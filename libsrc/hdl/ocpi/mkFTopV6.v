//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Wed Nov 10 08:07:23 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     4
// pcie_txn                       O     4
// led                            O    13
// gps_ppsSyncOut                 O     1
// dram_addr                      O    13
// dram_ba                        O     3
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_reset_n                   O     1
// dram_cs_n                      O     1
// dram_odt                       O     1
// dram_cke                       O     1
// dram_dm                        O     8
// dram_ck_p                      O     1
// dram_ck_n                      O     1
// flash_addr                     O    24 reg
// flash_ce_n                     O     1
// flash_oe_n                     O     1
// flash_we_n                     O     1
// flash_wp_n                     O     1 const
// flash_rst_n                    O     1 const
// flash_adv_n                    O     1 const
// gmii_txd                       O     8
// gmii_tx_en                     O     1
// gmii_tx_er                     O     1
// trn2Clk                        O     1 clock
// CLK_GATE_trn2Clk               O     1 const
// gmii_tx_clk                    O     1 clock
// CLK_GATE_gmii_tx_clk           O     1 const
// rxclk                          O     1 clock
// CLK_GATE_rxclk                 O     1 const
// pci0_reset_n_mrst_n            O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// gmii_rx_clk                    I     1 clock
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// pci0_reset_n                   I     1 reset
// pcie_rxp_i                     I     4
// pcie_rxn_i                     I     4
// gps_ppsSyncIn_x                I     1 reg
// flash_fwait_i                  I     1 reg
// gmii_rxd_i                     I     8
// gmii_rx_dv_i                   I     1
// gmii_rx_er_i                   I     1
// dram_io_dq                    IO    64 inout
// dram_io_dqs_p                 IO     8 inout
// dram_io_dqs_n                 IO     8 inout
// flash_io_dq                   IO    16 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop(sys0_clkp,
	      sys0_clkn,
	      sys1_clkp,
	      sys1_clkn,
	      gmii_rx_clk,
	      pci0_clkp,
	      pci0_clkn,
	      pci0_reset_n,

	      .dram_io_dq(dram0$dram_io_dq),
	      .dram_io_dqs_p(dram0$dram_io_dqs_p),
	      .dram_io_dqs_n(dram0$dram_io_dqs_n),
	      .flash_io_dq(flash0$flash_io_dq),

	      pcie_rxp_i,

	      pcie_rxn_i,

	      pcie_txp,

	      pcie_txn,

	      led,

	      gps_ppsSyncIn_x,

	      gps_ppsSyncOut,

	      dram_addr,

	      dram_ba,

	      dram_ras_n,

	      dram_cas_n,

	      dram_we_n,

	      dram_reset_n,

	      dram_cs_n,

	      dram_odt,

	      dram_cke,

	      dram_dm,

	      dram_ck_p,

	      dram_ck_n,

	      flash_addr,

	      flash_ce_n,

	      flash_oe_n,

	      flash_we_n,

	      flash_wp_n,

	      flash_rst_n,

	      flash_adv_n,

	      flash_fwait_i,

	      gmii_txd,

	      gmii_tx_en,

	      gmii_tx_er,

	      gmii_rxd_i,

	      gmii_rx_dv_i,

	      gmii_rx_er_i,

	      trn2Clk,
	      CLK_GATE_trn2Clk,

	      gmii_tx_clk,
	      CLK_GATE_gmii_tx_clk,

	      rxclk,
	      CLK_GATE_rxclk,

	      pci0_reset_n_mrst_n);
  input  sys0_clkp;
  input  sys0_clkn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  gmii_rx_clk;
  input  pci0_clkp;
  input  pci0_clkn;
  input  pci0_reset_n;

  inout  [63 : 0] dram0$dram_io_dq;
  inout  [7 : 0] dram0$dram_io_dqs_p;
  inout  [7 : 0] dram0$dram_io_dqs_n;
  inout  [15 : 0] flash0$flash_io_dq;

  // action method pcie_rxp
  input  [3 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [3 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [3 : 0] pcie_txp;

  // value method pcie_txn
  output [3 : 0] pcie_txn;

  // value method led
  output [12 : 0] led;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [2 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_reset_n
  output dram_reset_n;

  // value method dram_cs_n
  output dram_cs_n;

  // value method dram_odt
  output dram_odt;

  // value method dram_cke
  output dram_cke;

  // value method dram_dm
  output [7 : 0] dram_dm;

  // value method dram_ck_p
  output dram_ck_p;

  // value method dram_ck_n
  output dram_ck_n;

  // value method flash_addr
  output [23 : 0] flash_addr;

  // value method flash_ce_n
  output flash_ce_n;

  // value method flash_oe_n
  output flash_oe_n;

  // value method flash_we_n
  output flash_we_n;

  // value method flash_wp_n
  output flash_wp_n;

  // value method flash_rst_n
  output flash_rst_n;

  // value method flash_adv_n
  output flash_adv_n;

  // action method flash_fwait
  input  flash_fwait_i;

  // value method gmii_txd
  output [7 : 0] gmii_txd;

  // value method gmii_tx_en
  output gmii_tx_en;

  // value method gmii_tx_er
  output gmii_tx_er;

  // action method gmii_rxd
  input  [7 : 0] gmii_rxd_i;

  // action method gmii_rx_dv
  input  gmii_rx_dv_i;

  // action method gmii_rx_er
  input  gmii_rx_er_i;

  // oscillator and gates for output clock trn2Clk
  output trn2Clk;
  output CLK_GATE_trn2Clk;

  // oscillator and gates for output clock gmii_tx_clk
  output gmii_tx_clk;
  output CLK_GATE_gmii_tx_clk;

  // oscillator and gates for output clock rxclk
  output rxclk;
  output CLK_GATE_rxclk;

  // output resets
  output pci0_reset_n_mrst_n;

  // signals for module outputs
  wire [23 : 0] flash_addr;
  wire [12 : 0] dram_addr, led;
  wire [7 : 0] dram_dm, gmii_txd;
  wire [3 : 0] pcie_txn, pcie_txp;
  wire [2 : 0] dram_ba;
  wire CLK_GATE_gmii_tx_clk,
       CLK_GATE_rxclk,
       CLK_GATE_trn2Clk,
       dram_cas_n,
       dram_ck_n,
       dram_ck_p,
       dram_cke,
       dram_cs_n,
       dram_odt,
       dram_ras_n,
       dram_reset_n,
       dram_we_n,
       flash_adv_n,
       flash_ce_n,
       flash_oe_n,
       flash_rst_n,
       flash_we_n,
       flash_wp_n,
       gmii_tx_clk,
       gmii_tx_en,
       gmii_tx_er,
       gps_ppsSyncOut,
       pci0_reset_n_mrst_n,
       rxclk,
       trn2Clk;

  // inlined wires
  wire [145 : 0] ctop_app_appW3_wmemi_dhF_x_wire$wget;
  wire [130 : 0] ctop_app_appW3_wmemi_wmemiResponse$wget;
  wire [127 : 0] ctop_app_appW3_wmemi_Em_sData_w$wget;
  wire [95 : 0] ctop_app_appW2_wsiM_extStatusW$wget,
		ctop_app_appW2_wsiS_extStatusW$wget,
		ctop_app_appW3_wsiM_extStatusW$wget,
		ctop_app_appW3_wsiS_extStatusW$wget,
		ctop_app_appW4_wsiM_extStatusW$wget,
		ctop_app_appW4_wsiS_extStatusW$wget;
  wire [66 : 0] ctop_inf_dp0_wti_wtiReq$wget, ctop_inf_dp1_wti_wtiReq$wget;
  wire [63 : 0] ctop_inf_dp0_wmi_nowW$wget, ctop_inf_dp1_wmi_nowW$wget;
  wire [60 : 0] ctop_app_appW2_respF_wDataIn$wget,
		ctop_app_appW2_respF_wDataOut$wget,
		ctop_app_appW2_wsiM_reqFifo_x_wire$wget,
		ctop_app_appW2_wsiS_wsiReq$wget,
		ctop_app_appW3_wsiM_reqFifo_x_wire$wget,
		ctop_app_appW3_wsiS_wsiReq$wget,
		ctop_app_appW4_respF_wDataIn$wget,
		ctop_app_appW4_respF_wDataOut$wget,
		ctop_app_appW4_wsiM_reqFifo_x_wire$wget,
		ctop_app_appW4_wsiS_wsiReq$wget;
  wire [59 : 0] ctop_app_appW2_wci_wciReq$wget,
		ctop_app_appW3_wci_wciReq$wget,
		ctop_app_appW4_wci_wciReq$wget,
		ctop_inf_dp0_wci_wciReq$wget,
		ctop_inf_dp1_wci_wciReq$wget;
  wire [51 : 0] ctop_app_appW3_wmemi_reqF_x_wire$wget;
  wire [37 : 0] ctop_app_appW2_wmi_dhF_x_wire$wget,
		ctop_app_appW4_wmi_dhF_x_wire$wget,
		ctop_inf_dp0_wmi_wmi_wmiDh$wget,
		ctop_inf_dp1_wmi_wmi_wmiDh$wget;
  wire [33 : 0] ctop_app_appW2_wci_respF_x_wire$wget,
		ctop_app_appW2_wmi_wmiResponse$wget,
		ctop_app_appW3_wci_respF_x_wire$wget,
		ctop_app_appW4_wci_respF_x_wire$wget,
		ctop_app_appW4_wmi_wmiResponse$wget,
		ctop_inf_dp0_wci_respF_x_wire$wget,
		ctop_inf_dp0_wmi_wmi_respF_x_wire$wget,
		ctop_inf_dp1_wci_respF_x_wire$wget,
		ctop_inf_dp1_wmi_wmi_respF_x_wire$wget;
  wire [31 : 0] ctop_app_appW2_wci_Es_mData_w$wget,
		ctop_app_appW2_wmi_Em_sData_w$wget,
		ctop_app_appW2_wmi_mFlagF_x_wire$wget,
		ctop_app_appW2_wmi_reqF_x_wire$wget,
		ctop_app_appW2_wsi_Es_mData_w$wget,
		ctop_app_appW3_mesgWF_wDataIn$wget,
		ctop_app_appW3_mesgWF_wDataOut$wget,
		ctop_app_appW3_wci_Es_mData_w$wget,
		ctop_app_appW3_wsi_Es_mData_w$wget,
		ctop_app_appW4_wci_Es_mData_w$wget,
		ctop_app_appW4_wmi_Em_sData_w$wget,
		ctop_app_appW4_wmi_mFlagF_x_wire$wget,
		ctop_app_appW4_wmi_reqF_x_wire$wget,
		ctop_app_appW4_wsi_Es_mData_w$wget,
		ctop_app_tieOff0_wci_Es_mData_w$wget,
		ctop_app_tieOff1_wci_Es_mData_w$wget,
		ctop_app_tieOff5_wci_Es_mData_w$wget,
		ctop_app_tieOff6_wci_Es_mData_w$wget,
		ctop_app_tieOff7_wci_Es_mData_w$wget,
		ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget,
		ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget,
		ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget,
		ctop_inf_dp0_bram_serverAdapterA_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget,
		ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterB_1_outData_outData$wget,
		ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterB_2_outData_outData$wget,
		ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterB_3_outData_outData$wget,
		ctop_inf_dp0_bram_serverAdapterB_outData_enqData$wget,
		ctop_inf_dp0_bram_serverAdapterB_outData_outData$wget,
		ctop_inf_dp0_wci_Es_mData_w$wget,
		ctop_inf_dp0_wmi_Es_mData_w$wget,
		ctop_inf_dp0_wmi_wmi_wmiMFlag$wget,
		ctop_inf_dp0_wmi_wmi_wmiReq$wget,
		ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget,
		ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget,
		ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget,
		ctop_inf_dp1_bram_serverAdapterA_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget,
		ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterB_1_outData_outData$wget,
		ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterB_2_outData_outData$wget,
		ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterB_3_outData_outData$wget,
		ctop_inf_dp1_bram_serverAdapterB_outData_enqData$wget,
		ctop_inf_dp1_bram_serverAdapterB_outData_outData$wget,
		ctop_inf_dp1_wci_Es_mData_w$wget,
		ctop_inf_dp1_wmi_Es_mData_w$wget,
		ctop_inf_dp1_wmi_wmi_wmiMFlag$wget,
		ctop_inf_dp1_wmi_wmi_wmiReq$wget;
  wire [24 : 0] ctop_app_appW3_dlyWordsStored_acc_v1$wget,
		ctop_app_appW3_dlyWordsStored_acc_v2$wget;
  wire [19 : 0] ctop_app_appW2_wci_Es_mAddr_w$wget,
		ctop_app_appW3_wci_Es_mAddr_w$wget,
		ctop_app_appW4_wci_Es_mAddr_w$wget,
		ctop_app_tieOff0_wci_Es_mAddr_w$wget,
		ctop_app_tieOff1_wci_Es_mAddr_w$wget,
		ctop_app_tieOff5_wci_Es_mAddr_w$wget,
		ctop_app_tieOff6_wci_Es_mAddr_w$wget,
		ctop_app_tieOff7_wci_Es_mAddr_w$wget,
		ctop_inf_dp0_wci_Es_mAddr_w$wget,
		ctop_inf_dp1_wci_Es_mAddr_w$wget;
  wire [15 : 0] ctop_app_appW3_dlyReadyToWrite_acc_v1$wget,
		ctop_app_appW3_dlyReadyToWrite_acc_v2$wget,
		ctop_inf_dp0_bml_crdBuf_modulus_bw$wget,
		ctop_inf_dp0_bml_fabBuf_modulus_bw$wget,
		ctop_inf_dp0_bml_lclBuf_modulus_bw$wget,
		ctop_inf_dp0_bml_remBuf_modulus_bw$wget,
		ctop_inf_dp1_bml_crdBuf_modulus_bw$wget,
		ctop_inf_dp1_bml_fabBuf_modulus_bw$wget,
		ctop_inf_dp1_bml_lclBuf_modulus_bw$wget,
		ctop_inf_dp1_bml_remBuf_modulus_bw$wget;
  wire [13 : 0] ctop_inf_dp0_wmi_Es_mAddr_w$wget,
		ctop_inf_dp1_wmi_Es_mAddr_w$wget;
  wire [11 : 0] ctop_app_appW2_fabRespCredit_acc_v1$wget,
		ctop_app_appW2_fabRespCredit_acc_v2$wget,
		ctop_app_appW2_wsi_Es_mBurstLength_w$wget,
		ctop_app_appW3_wsi_Es_mBurstLength_w$wget,
		ctop_app_appW4_fabRespCredit_acc_v1$wget,
		ctop_app_appW4_fabRespCredit_acc_v2$wget,
		ctop_app_appW4_wsi_Es_mBurstLength_w$wget,
		ctop_inf_dp0_wmi_Es_mBurstLength_w$wget,
		ctop_inf_dp1_wmi_Es_mBurstLength_w$wget;
  wire [7 : 0] ctop_app_appW2_wsi_Es_mReqInfo_w$wget,
	       ctop_app_appW3_dlyReadCredit_acc_v1$wget,
	       ctop_app_appW3_dlyReadCredit_acc_v2$wget,
	       ctop_app_appW3_wsi_Es_mReqInfo_w$wget,
	       ctop_app_appW4_wsi_Es_mReqInfo_w$wget,
	       pcie_irq_wInterruptDo$wget;
  wire [3 : 0] ctop_app_appW2_wci_Es_mByteEn_w$wget,
	       ctop_app_appW2_wsi_Es_mByteEn_w$wget,
	       ctop_app_appW3_wci_Es_mByteEn_w$wget,
	       ctop_app_appW3_wsi_Es_mByteEn_w$wget,
	       ctop_app_appW4_wci_Es_mByteEn_w$wget,
	       ctop_app_appW4_wsi_Es_mByteEn_w$wget,
	       ctop_app_tieOff0_wci_Es_mByteEn_w$wget,
	       ctop_app_tieOff1_wci_Es_mByteEn_w$wget,
	       ctop_app_tieOff5_wci_Es_mByteEn_w$wget,
	       ctop_app_tieOff6_wci_Es_mByteEn_w$wget,
	       ctop_app_tieOff7_wci_Es_mByteEn_w$wget,
	       ctop_inf_dp0_bml_dpControl$wget,
	       ctop_inf_dp0_tlp_dpControl$wget,
	       ctop_inf_dp0_wci_Es_mByteEn_w$wget,
	       ctop_inf_dp0_wmi_Es_mDataByteEn_w$wget,
	       ctop_inf_dp0_wmi_dpControl$wget,
	       ctop_inf_dp1_bml_dpControl$wget,
	       ctop_inf_dp1_tlp_dpControl$wget,
	       ctop_inf_dp1_wci_Es_mByteEn_w$wget,
	       ctop_inf_dp1_wmi_Es_mDataByteEn_w$wget,
	       ctop_inf_dp1_wmi_dpControl$wget;
  wire [2 : 0] ctop_app_appW2_wci_Es_mCmd_w$wget,
	       ctop_app_appW2_wci_wEdge$wget,
	       ctop_app_appW2_wsi_Es_mCmd_w$wget,
	       ctop_app_appW3_wci_Es_mCmd_w$wget,
	       ctop_app_appW3_wci_wEdge$wget,
	       ctop_app_appW3_wsi_Es_mCmd_w$wget,
	       ctop_app_appW4_wci_Es_mCmd_w$wget,
	       ctop_app_appW4_wci_wEdge$wget,
	       ctop_app_appW4_wsi_Es_mCmd_w$wget,
	       ctop_app_tieOff0_wci_Es_mCmd_w$wget,
	       ctop_app_tieOff1_wci_Es_mCmd_w$wget,
	       ctop_app_tieOff5_wci_Es_mCmd_w$wget,
	       ctop_app_tieOff6_wci_Es_mCmd_w$wget,
	       ctop_app_tieOff7_wci_Es_mCmd_w$wget,
	       ctop_inf_dp0_bram_serverAdapterA_1_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_1_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterA_1_cnt_3$wget,
	       ctop_inf_dp0_bram_serverAdapterA_2_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_2_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterA_2_cnt_3$wget,
	       ctop_inf_dp0_bram_serverAdapterA_3_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_3_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterA_3_cnt_3$wget,
	       ctop_inf_dp0_bram_serverAdapterA_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterA_cnt_3$wget,
	       ctop_inf_dp0_bram_serverAdapterB_1_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_1_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterB_1_cnt_3$wget,
	       ctop_inf_dp0_bram_serverAdapterB_2_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_2_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterB_2_cnt_3$wget,
	       ctop_inf_dp0_bram_serverAdapterB_3_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_3_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterB_3_cnt_3$wget,
	       ctop_inf_dp0_bram_serverAdapterB_cnt_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_cnt_2$wget,
	       ctop_inf_dp0_bram_serverAdapterB_cnt_3$wget,
	       ctop_inf_dp0_wci_Es_mCmd_w$wget,
	       ctop_inf_dp0_wci_wEdge$wget,
	       ctop_inf_dp0_wmi_Es_mCmd_w$wget,
	       ctop_inf_dp1_bram_serverAdapterA_1_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_1_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterA_1_cnt_3$wget,
	       ctop_inf_dp1_bram_serverAdapterA_2_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_2_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterA_2_cnt_3$wget,
	       ctop_inf_dp1_bram_serverAdapterA_3_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_3_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterA_3_cnt_3$wget,
	       ctop_inf_dp1_bram_serverAdapterA_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterA_cnt_3$wget,
	       ctop_inf_dp1_bram_serverAdapterB_1_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_1_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterB_1_cnt_3$wget,
	       ctop_inf_dp1_bram_serverAdapterB_2_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_2_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterB_2_cnt_3$wget,
	       ctop_inf_dp1_bram_serverAdapterB_3_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_3_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterB_3_cnt_3$wget,
	       ctop_inf_dp1_bram_serverAdapterB_cnt_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_cnt_2$wget,
	       ctop_inf_dp1_bram_serverAdapterB_cnt_3$wget,
	       ctop_inf_dp1_wci_Es_mCmd_w$wget,
	       ctop_inf_dp1_wci_wEdge$wget,
	       ctop_inf_dp1_wmi_Es_mCmd_w$wget;
  wire [1 : 0] ctop_app_appW2_wmi_Em_sResp_w$wget,
	       ctop_app_appW3_wmemi_Em_sResp_w$wget,
	       ctop_app_appW4_wmi_Em_sResp_w$wget,
	       ctop_inf_dp0_bram_serverAdapterA_1_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_1_writeWithResp$wget,
	       ctop_inf_dp0_bram_serverAdapterA_2_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_2_writeWithResp$wget,
	       ctop_inf_dp0_bram_serverAdapterA_3_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_3_writeWithResp$wget,
	       ctop_inf_dp0_bram_serverAdapterA_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterA_writeWithResp$wget,
	       ctop_inf_dp0_bram_serverAdapterB_1_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_1_writeWithResp$wget,
	       ctop_inf_dp0_bram_serverAdapterB_2_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_2_writeWithResp$wget,
	       ctop_inf_dp0_bram_serverAdapterB_3_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_3_writeWithResp$wget,
	       ctop_inf_dp0_bram_serverAdapterB_s1_1$wget,
	       ctop_inf_dp0_bram_serverAdapterB_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterA_1_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_1_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterA_2_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_2_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterA_3_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_3_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterA_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterA_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterB_1_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_1_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterB_2_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_2_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterB_3_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_3_writeWithResp$wget,
	       ctop_inf_dp1_bram_serverAdapterB_s1_1$wget,
	       ctop_inf_dp1_bram_serverAdapterB_writeWithResp$wget;
  wire ctop_app_appW2_fabRespCredit_acc_v1$whas,
       ctop_app_appW2_fabRespCredit_acc_v2$whas,
       ctop_app_appW2_mesgPreRequest_1$wget,
       ctop_app_appW2_mesgPreRequest_1$whas,
       ctop_app_appW2_respF_pwDequeue$whas,
       ctop_app_appW2_respF_pwEnqueue$whas,
       ctop_app_appW2_respF_wDataIn$whas,
       ctop_app_appW2_respF_wDataOut$whas,
       ctop_app_appW2_wci_Es_mAddrSpace_w$wget,
       ctop_app_appW2_wci_Es_mAddrSpace_w$whas,
       ctop_app_appW2_wci_Es_mAddr_w$whas,
       ctop_app_appW2_wci_Es_mByteEn_w$whas,
       ctop_app_appW2_wci_Es_mCmd_w$whas,
       ctop_app_appW2_wci_Es_mData_w$whas,
       ctop_app_appW2_wci_ctlAckReg_1$wget,
       ctop_app_appW2_wci_ctlAckReg_1$whas,
       ctop_app_appW2_wci_reqF_r_clr$whas,
       ctop_app_appW2_wci_reqF_r_deq$whas,
       ctop_app_appW2_wci_reqF_r_enq$whas,
       ctop_app_appW2_wci_respF_dequeueing$whas,
       ctop_app_appW2_wci_respF_enqueueing$whas,
       ctop_app_appW2_wci_respF_x_wire$whas,
       ctop_app_appW2_wci_sFlagReg_1$wget,
       ctop_app_appW2_wci_sFlagReg_1$whas,
       ctop_app_appW2_wci_sThreadBusy_pw$whas,
       ctop_app_appW2_wci_wEdge$whas,
       ctop_app_appW2_wci_wciReq$whas,
       ctop_app_appW2_wci_wci_cfrd_pw$whas,
       ctop_app_appW2_wci_wci_cfwr_pw$whas,
       ctop_app_appW2_wci_wci_ctrl_pw$whas,
       ctop_app_appW2_wmi_Em_sData_w$whas,
       ctop_app_appW2_wmi_Em_sResp_w$whas,
       ctop_app_appW2_wmi_dhF_dequeueing$whas,
       ctop_app_appW2_wmi_dhF_enqueueing$whas,
       ctop_app_appW2_wmi_dhF_x_wire$whas,
       ctop_app_appW2_wmi_mFlagF_dequeueing$whas,
       ctop_app_appW2_wmi_mFlagF_enqueueing$whas,
       ctop_app_appW2_wmi_mFlagF_x_wire$whas,
       ctop_app_appW2_wmi_operateD_1$wget,
       ctop_app_appW2_wmi_operateD_1$whas,
       ctop_app_appW2_wmi_peerIsReady_1$wget,
       ctop_app_appW2_wmi_peerIsReady_1$whas,
       ctop_app_appW2_wmi_reqF_dequeueing$whas,
       ctop_app_appW2_wmi_reqF_enqueueing$whas,
       ctop_app_appW2_wmi_reqF_x_wire$whas,
       ctop_app_appW2_wmi_sDataThreadBusy_d_1$wget,
       ctop_app_appW2_wmi_sDataThreadBusy_d_1$whas,
       ctop_app_appW2_wmi_sThreadBusy_d_1$wget,
       ctop_app_appW2_wmi_sThreadBusy_d_1$whas,
       ctop_app_appW2_wmi_wmiResponse$whas,
       ctop_app_appW2_wsiM_operateD_1$wget,
       ctop_app_appW2_wsiM_operateD_1$whas,
       ctop_app_appW2_wsiM_peerIsReady_1$wget,
       ctop_app_appW2_wsiM_peerIsReady_1$whas,
       ctop_app_appW2_wsiM_reqFifo_dequeueing$whas,
       ctop_app_appW2_wsiM_reqFifo_enqueueing$whas,
       ctop_app_appW2_wsiM_reqFifo_x_wire$whas,
       ctop_app_appW2_wsiM_sThreadBusy_pw$whas,
       ctop_app_appW2_wsiS_operateD_1$wget,
       ctop_app_appW2_wsiS_operateD_1$whas,
       ctop_app_appW2_wsiS_peerIsReady_1$wget,
       ctop_app_appW2_wsiS_peerIsReady_1$whas,
       ctop_app_appW2_wsiS_reqFifo_doResetClr$whas,
       ctop_app_appW2_wsiS_reqFifo_doResetDeq$whas,
       ctop_app_appW2_wsiS_reqFifo_doResetEnq$whas,
       ctop_app_appW2_wsiS_reqFifo_r_clr$whas,
       ctop_app_appW2_wsiS_reqFifo_r_deq$whas,
       ctop_app_appW2_wsiS_reqFifo_r_enq$whas,
       ctop_app_appW2_wsiS_sThreadBusy_dw$wget,
       ctop_app_appW2_wsiS_sThreadBusy_dw$whas,
       ctop_app_appW2_wsiS_wsiReq$whas,
       ctop_app_appW2_wsi_Es_mBurstLength_w$whas,
       ctop_app_appW2_wsi_Es_mBurstPrecise_w$whas,
       ctop_app_appW2_wsi_Es_mByteEn_w$whas,
       ctop_app_appW2_wsi_Es_mCmd_w$whas,
       ctop_app_appW2_wsi_Es_mDataInfo_w$whas,
       ctop_app_appW2_wsi_Es_mData_w$whas,
       ctop_app_appW2_wsi_Es_mReqInfo_w$whas,
       ctop_app_appW2_wsi_Es_mReqLast_w$whas,
       ctop_app_appW3_dlyReadCredit_acc_v1$whas,
       ctop_app_appW3_dlyReadCredit_acc_v2$whas,
       ctop_app_appW3_dlyReadyToWrite_acc_v1$whas,
       ctop_app_appW3_dlyReadyToWrite_acc_v2$whas,
       ctop_app_appW3_dlyWordsStored_acc_v1$whas,
       ctop_app_appW3_dlyWordsStored_acc_v2$whas,
       ctop_app_appW3_mesgWF_pwDequeue$whas,
       ctop_app_appW3_mesgWF_pwEnqueue$whas,
       ctop_app_appW3_mesgWF_wDataIn$whas,
       ctop_app_appW3_mesgWF_wDataOut$whas,
       ctop_app_appW3_wci_Es_mAddrSpace_w$wget,
       ctop_app_appW3_wci_Es_mAddrSpace_w$whas,
       ctop_app_appW3_wci_Es_mAddr_w$whas,
       ctop_app_appW3_wci_Es_mByteEn_w$whas,
       ctop_app_appW3_wci_Es_mCmd_w$whas,
       ctop_app_appW3_wci_Es_mData_w$whas,
       ctop_app_appW3_wci_ctlAckReg_1$wget,
       ctop_app_appW3_wci_ctlAckReg_1$whas,
       ctop_app_appW3_wci_reqF_r_clr$whas,
       ctop_app_appW3_wci_reqF_r_deq$whas,
       ctop_app_appW3_wci_reqF_r_enq$whas,
       ctop_app_appW3_wci_respF_dequeueing$whas,
       ctop_app_appW3_wci_respF_enqueueing$whas,
       ctop_app_appW3_wci_respF_x_wire$whas,
       ctop_app_appW3_wci_sFlagReg_1$wget,
       ctop_app_appW3_wci_sFlagReg_1$whas,
       ctop_app_appW3_wci_sThreadBusy_pw$whas,
       ctop_app_appW3_wci_wEdge$whas,
       ctop_app_appW3_wci_wciReq$whas,
       ctop_app_appW3_wci_wci_cfrd_pw$whas,
       ctop_app_appW3_wci_wci_cfwr_pw$whas,
       ctop_app_appW3_wci_wci_ctrl_pw$whas,
       ctop_app_appW3_wmemi_Em_sData_w$whas,
       ctop_app_appW3_wmemi_Em_sRespLast_w$whas,
       ctop_app_appW3_wmemi_Em_sResp_w$whas,
       ctop_app_appW3_wmemi_dhF_dequeueing$whas,
       ctop_app_appW3_wmemi_dhF_enqueueing$whas,
       ctop_app_appW3_wmemi_dhF_x_wire$whas,
       ctop_app_appW3_wmemi_operateD_1$wget,
       ctop_app_appW3_wmemi_operateD_1$whas,
       ctop_app_appW3_wmemi_peerIsReady_1$wget,
       ctop_app_appW3_wmemi_peerIsReady_1$whas,
       ctop_app_appW3_wmemi_reqF_dequeueing$whas,
       ctop_app_appW3_wmemi_reqF_enqueueing$whas,
       ctop_app_appW3_wmemi_reqF_x_wire$whas,
       ctop_app_appW3_wmemi_sCmdAccept_w$wget,
       ctop_app_appW3_wmemi_sCmdAccept_w$whas,
       ctop_app_appW3_wmemi_sDataAccept_w$wget,
       ctop_app_appW3_wmemi_sDataAccept_w$whas,
       ctop_app_appW3_wmemi_wmemiResponse$whas,
       ctop_app_appW3_wsiM_operateD_1$wget,
       ctop_app_appW3_wsiM_operateD_1$whas,
       ctop_app_appW3_wsiM_peerIsReady_1$wget,
       ctop_app_appW3_wsiM_peerIsReady_1$whas,
       ctop_app_appW3_wsiM_reqFifo_dequeueing$whas,
       ctop_app_appW3_wsiM_reqFifo_enqueueing$whas,
       ctop_app_appW3_wsiM_reqFifo_x_wire$whas,
       ctop_app_appW3_wsiM_sThreadBusy_pw$whas,
       ctop_app_appW3_wsiS_operateD_1$wget,
       ctop_app_appW3_wsiS_operateD_1$whas,
       ctop_app_appW3_wsiS_peerIsReady_1$wget,
       ctop_app_appW3_wsiS_peerIsReady_1$whas,
       ctop_app_appW3_wsiS_reqFifo_doResetClr$whas,
       ctop_app_appW3_wsiS_reqFifo_doResetDeq$whas,
       ctop_app_appW3_wsiS_reqFifo_doResetEnq$whas,
       ctop_app_appW3_wsiS_reqFifo_r_clr$whas,
       ctop_app_appW3_wsiS_reqFifo_r_deq$whas,
       ctop_app_appW3_wsiS_reqFifo_r_enq$whas,
       ctop_app_appW3_wsiS_sThreadBusy_dw$wget,
       ctop_app_appW3_wsiS_sThreadBusy_dw$whas,
       ctop_app_appW3_wsiS_wsiReq$whas,
       ctop_app_appW3_wsi_Es_mBurstLength_w$whas,
       ctop_app_appW3_wsi_Es_mBurstPrecise_w$whas,
       ctop_app_appW3_wsi_Es_mByteEn_w$whas,
       ctop_app_appW3_wsi_Es_mCmd_w$whas,
       ctop_app_appW3_wsi_Es_mDataInfo_w$whas,
       ctop_app_appW3_wsi_Es_mData_w$whas,
       ctop_app_appW3_wsi_Es_mReqInfo_w$whas,
       ctop_app_appW3_wsi_Es_mReqLast_w$whas,
       ctop_app_appW4_fabRespCredit_acc_v1$whas,
       ctop_app_appW4_fabRespCredit_acc_v2$whas,
       ctop_app_appW4_mesgPreRequest_1$wget,
       ctop_app_appW4_mesgPreRequest_1$whas,
       ctop_app_appW4_respF_pwDequeue$whas,
       ctop_app_appW4_respF_pwEnqueue$whas,
       ctop_app_appW4_respF_wDataIn$whas,
       ctop_app_appW4_respF_wDataOut$whas,
       ctop_app_appW4_wci_Es_mAddrSpace_w$wget,
       ctop_app_appW4_wci_Es_mAddrSpace_w$whas,
       ctop_app_appW4_wci_Es_mAddr_w$whas,
       ctop_app_appW4_wci_Es_mByteEn_w$whas,
       ctop_app_appW4_wci_Es_mCmd_w$whas,
       ctop_app_appW4_wci_Es_mData_w$whas,
       ctop_app_appW4_wci_ctlAckReg_1$wget,
       ctop_app_appW4_wci_ctlAckReg_1$whas,
       ctop_app_appW4_wci_reqF_r_clr$whas,
       ctop_app_appW4_wci_reqF_r_deq$whas,
       ctop_app_appW4_wci_reqF_r_enq$whas,
       ctop_app_appW4_wci_respF_dequeueing$whas,
       ctop_app_appW4_wci_respF_enqueueing$whas,
       ctop_app_appW4_wci_respF_x_wire$whas,
       ctop_app_appW4_wci_sFlagReg_1$wget,
       ctop_app_appW4_wci_sFlagReg_1$whas,
       ctop_app_appW4_wci_sThreadBusy_pw$whas,
       ctop_app_appW4_wci_wEdge$whas,
       ctop_app_appW4_wci_wciReq$whas,
       ctop_app_appW4_wci_wci_cfrd_pw$whas,
       ctop_app_appW4_wci_wci_cfwr_pw$whas,
       ctop_app_appW4_wci_wci_ctrl_pw$whas,
       ctop_app_appW4_wmi_Em_sData_w$whas,
       ctop_app_appW4_wmi_Em_sResp_w$whas,
       ctop_app_appW4_wmi_dhF_dequeueing$whas,
       ctop_app_appW4_wmi_dhF_enqueueing$whas,
       ctop_app_appW4_wmi_dhF_x_wire$whas,
       ctop_app_appW4_wmi_mFlagF_dequeueing$whas,
       ctop_app_appW4_wmi_mFlagF_enqueueing$whas,
       ctop_app_appW4_wmi_mFlagF_x_wire$whas,
       ctop_app_appW4_wmi_operateD_1$wget,
       ctop_app_appW4_wmi_operateD_1$whas,
       ctop_app_appW4_wmi_peerIsReady_1$wget,
       ctop_app_appW4_wmi_peerIsReady_1$whas,
       ctop_app_appW4_wmi_reqF_dequeueing$whas,
       ctop_app_appW4_wmi_reqF_enqueueing$whas,
       ctop_app_appW4_wmi_reqF_x_wire$whas,
       ctop_app_appW4_wmi_sDataThreadBusy_d_1$wget,
       ctop_app_appW4_wmi_sDataThreadBusy_d_1$whas,
       ctop_app_appW4_wmi_sThreadBusy_d_1$wget,
       ctop_app_appW4_wmi_sThreadBusy_d_1$whas,
       ctop_app_appW4_wmi_wmiResponse$whas,
       ctop_app_appW4_wsiM_operateD_1$wget,
       ctop_app_appW4_wsiM_operateD_1$whas,
       ctop_app_appW4_wsiM_peerIsReady_1$wget,
       ctop_app_appW4_wsiM_peerIsReady_1$whas,
       ctop_app_appW4_wsiM_reqFifo_dequeueing$whas,
       ctop_app_appW4_wsiM_reqFifo_enqueueing$whas,
       ctop_app_appW4_wsiM_reqFifo_x_wire$whas,
       ctop_app_appW4_wsiM_sThreadBusy_pw$whas,
       ctop_app_appW4_wsiS_operateD_1$wget,
       ctop_app_appW4_wsiS_operateD_1$whas,
       ctop_app_appW4_wsiS_peerIsReady_1$wget,
       ctop_app_appW4_wsiS_peerIsReady_1$whas,
       ctop_app_appW4_wsiS_reqFifo_doResetClr$whas,
       ctop_app_appW4_wsiS_reqFifo_doResetDeq$whas,
       ctop_app_appW4_wsiS_reqFifo_doResetEnq$whas,
       ctop_app_appW4_wsiS_reqFifo_r_clr$whas,
       ctop_app_appW4_wsiS_reqFifo_r_deq$whas,
       ctop_app_appW4_wsiS_reqFifo_r_enq$whas,
       ctop_app_appW4_wsiS_sThreadBusy_dw$wget,
       ctop_app_appW4_wsiS_sThreadBusy_dw$whas,
       ctop_app_appW4_wsiS_wsiReq$whas,
       ctop_app_appW4_wsi_Es_mBurstLength_w$whas,
       ctop_app_appW4_wsi_Es_mBurstPrecise_w$whas,
       ctop_app_appW4_wsi_Es_mByteEn_w$whas,
       ctop_app_appW4_wsi_Es_mCmd_w$whas,
       ctop_app_appW4_wsi_Es_mDataInfo_w$whas,
       ctop_app_appW4_wsi_Es_mData_w$whas,
       ctop_app_appW4_wsi_Es_mReqInfo_w$whas,
       ctop_app_appW4_wsi_Es_mReqLast_w$whas,
       ctop_app_tieOff0_wci_Es_mAddrSpace_w$wget,
       ctop_app_tieOff0_wci_Es_mAddrSpace_w$whas,
       ctop_app_tieOff0_wci_Es_mAddr_w$whas,
       ctop_app_tieOff0_wci_Es_mByteEn_w$whas,
       ctop_app_tieOff0_wci_Es_mCmd_w$whas,
       ctop_app_tieOff0_wci_Es_mData_w$whas,
       ctop_app_tieOff1_wci_Es_mAddrSpace_w$wget,
       ctop_app_tieOff1_wci_Es_mAddrSpace_w$whas,
       ctop_app_tieOff1_wci_Es_mAddr_w$whas,
       ctop_app_tieOff1_wci_Es_mByteEn_w$whas,
       ctop_app_tieOff1_wci_Es_mCmd_w$whas,
       ctop_app_tieOff1_wci_Es_mData_w$whas,
       ctop_app_tieOff5_wci_Es_mAddrSpace_w$wget,
       ctop_app_tieOff5_wci_Es_mAddrSpace_w$whas,
       ctop_app_tieOff5_wci_Es_mAddr_w$whas,
       ctop_app_tieOff5_wci_Es_mByteEn_w$whas,
       ctop_app_tieOff5_wci_Es_mCmd_w$whas,
       ctop_app_tieOff5_wci_Es_mData_w$whas,
       ctop_app_tieOff6_wci_Es_mAddrSpace_w$wget,
       ctop_app_tieOff6_wci_Es_mAddrSpace_w$whas,
       ctop_app_tieOff6_wci_Es_mAddr_w$whas,
       ctop_app_tieOff6_wci_Es_mByteEn_w$whas,
       ctop_app_tieOff6_wci_Es_mCmd_w$whas,
       ctop_app_tieOff6_wci_Es_mData_w$whas,
       ctop_app_tieOff7_wci_Es_mAddrSpace_w$wget,
       ctop_app_tieOff7_wci_Es_mAddrSpace_w$whas,
       ctop_app_tieOff7_wci_Es_mAddr_w$whas,
       ctop_app_tieOff7_wci_Es_mByteEn_w$whas,
       ctop_app_tieOff7_wci_Es_mCmd_w$whas,
       ctop_app_tieOff7_wci_Es_mData_w$whas,
       ctop_inf_dp0_bml_crdBuf_decAction$whas,
       ctop_inf_dp0_bml_crdBuf_incAction$whas,
       ctop_inf_dp0_bml_dpControl$whas,
       ctop_inf_dp0_bml_fabAvail_1$wget,
       ctop_inf_dp0_bml_fabAvail_1$whas,
       ctop_inf_dp0_bml_fabBuf_decAction$whas,
       ctop_inf_dp0_bml_fabBuf_incAction$whas,
       ctop_inf_dp0_bml_fabDone_1$wget,
       ctop_inf_dp0_bml_fabDone_1$whas,
       ctop_inf_dp0_bml_lclBufDone_1$wget,
       ctop_inf_dp0_bml_lclBufDone_1$whas,
       ctop_inf_dp0_bml_lclBufStart_1$wget,
       ctop_inf_dp0_bml_lclBufStart_1$whas,
       ctop_inf_dp0_bml_lclBuf_decAction$whas,
       ctop_inf_dp0_bml_lclBuf_incAction$whas,
       ctop_inf_dp0_bml_remBuf_decAction$whas,
       ctop_inf_dp0_bml_remBuf_incAction$whas,
       ctop_inf_dp0_bml_remDone_1$wget,
       ctop_inf_dp0_bml_remDone_1$whas,
       ctop_inf_dp0_bml_remStart_1$wget,
       ctop_inf_dp0_bml_remStart_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_1_writeWithResp$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_2_writeWithResp$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_3_writeWithResp$whas,
       ctop_inf_dp0_bram_serverAdapterA_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterA_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterA_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterA_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterA_writeWithResp$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_1_writeWithResp$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_2_writeWithResp$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_3_writeWithResp$whas,
       ctop_inf_dp0_bram_serverAdapterB_cnt_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_cnt_2$whas,
       ctop_inf_dp0_bram_serverAdapterB_cnt_3$whas,
       ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas,
       ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas,
       ctop_inf_dp0_bram_serverAdapterB_outData_outData$whas,
       ctop_inf_dp0_bram_serverAdapterB_s1_1$whas,
       ctop_inf_dp0_bram_serverAdapterB_writeWithResp$whas,
       ctop_inf_dp0_tlp_creditReady_1$wget,
       ctop_inf_dp0_tlp_creditReady_1$whas,
       ctop_inf_dp0_tlp_dpControl$whas,
       ctop_inf_dp0_tlp_farBufReady_1$wget,
       ctop_inf_dp0_tlp_farBufReady_1$whas,
       ctop_inf_dp0_tlp_nearBufReady_1$wget,
       ctop_inf_dp0_tlp_nearBufReady_1$whas,
       ctop_inf_dp0_tlp_pullTagMatch_1$wget,
       ctop_inf_dp0_tlp_pullTagMatch_1$whas,
       ctop_inf_dp0_tlp_remDone_1$wget,
       ctop_inf_dp0_tlp_remDone_1$whas,
       ctop_inf_dp0_tlp_remStart_1$wget,
       ctop_inf_dp0_tlp_remStart_1$whas,
       ctop_inf_dp0_wci_Es_mAddrSpace_w$wget,
       ctop_inf_dp0_wci_Es_mAddrSpace_w$whas,
       ctop_inf_dp0_wci_Es_mAddr_w$whas,
       ctop_inf_dp0_wci_Es_mByteEn_w$whas,
       ctop_inf_dp0_wci_Es_mCmd_w$whas,
       ctop_inf_dp0_wci_Es_mData_w$whas,
       ctop_inf_dp0_wci_ctlAckReg_1$wget,
       ctop_inf_dp0_wci_ctlAckReg_1$whas,
       ctop_inf_dp0_wci_reqF_r_clr$whas,
       ctop_inf_dp0_wci_reqF_r_deq$whas,
       ctop_inf_dp0_wci_reqF_r_enq$whas,
       ctop_inf_dp0_wci_respF_dequeueing$whas,
       ctop_inf_dp0_wci_respF_enqueueing$whas,
       ctop_inf_dp0_wci_respF_x_wire$whas,
       ctop_inf_dp0_wci_sFlagReg_1$wget,
       ctop_inf_dp0_wci_sFlagReg_1$whas,
       ctop_inf_dp0_wci_sThreadBusy_pw$whas,
       ctop_inf_dp0_wci_wEdge$whas,
       ctop_inf_dp0_wci_wciReq$whas,
       ctop_inf_dp0_wci_wci_cfrd_pw$whas,
       ctop_inf_dp0_wci_wci_cfwr_pw$whas,
       ctop_inf_dp0_wci_wci_ctrl_pw$whas,
       ctop_inf_dp0_wmi_Es_mAddrSpace_w$wget,
       ctop_inf_dp0_wmi_Es_mAddrSpace_w$whas,
       ctop_inf_dp0_wmi_Es_mAddr_w$whas,
       ctop_inf_dp0_wmi_Es_mBurstLength_w$whas,
       ctop_inf_dp0_wmi_Es_mCmd_w$whas,
       ctop_inf_dp0_wmi_Es_mDataByteEn_w$whas,
       ctop_inf_dp0_wmi_Es_mDataInfo_w$whas,
       ctop_inf_dp0_wmi_Es_mDataLast_w$whas,
       ctop_inf_dp0_wmi_Es_mDataValid_w$whas,
       ctop_inf_dp0_wmi_Es_mData_w$whas,
       ctop_inf_dp0_wmi_Es_mReqInfo_w$wget,
       ctop_inf_dp0_wmi_Es_mReqInfo_w$whas,
       ctop_inf_dp0_wmi_Es_mReqLast_w$whas,
       ctop_inf_dp0_wmi_dpControl$whas,
       ctop_inf_dp0_wmi_mesgBufReady_1$wget,
       ctop_inf_dp0_wmi_mesgBufReady_1$whas,
       ctop_inf_dp0_wmi_mesgDone_1$wget,
       ctop_inf_dp0_wmi_mesgDone_1$whas,
       ctop_inf_dp0_wmi_mesgStart_1$wget,
       ctop_inf_dp0_wmi_mesgStart_1$whas,
       ctop_inf_dp0_wmi_nowW$whas,
       ctop_inf_dp0_wmi_wmi_dhF_doResetClr$whas,
       ctop_inf_dp0_wmi_wmi_dhF_doResetDeq$whas,
       ctop_inf_dp0_wmi_wmi_dhF_doResetEnq$whas,
       ctop_inf_dp0_wmi_wmi_dhF_r_clr$whas,
       ctop_inf_dp0_wmi_wmi_dhF_r_deq$whas,
       ctop_inf_dp0_wmi_wmi_dhF_r_enq$whas,
       ctop_inf_dp0_wmi_wmi_forceSThreadBusy_pw$whas,
       ctop_inf_dp0_wmi_wmi_mFlagF_doResetClr$whas,
       ctop_inf_dp0_wmi_wmi_mFlagF_doResetDeq$whas,
       ctop_inf_dp0_wmi_wmi_mFlagF_doResetEnq$whas,
       ctop_inf_dp0_wmi_wmi_mFlagF_r_clr$whas,
       ctop_inf_dp0_wmi_wmi_mFlagF_r_deq$whas,
       ctop_inf_dp0_wmi_wmi_mFlagF_r_enq$whas,
       ctop_inf_dp0_wmi_wmi_operateD_1$wget,
       ctop_inf_dp0_wmi_wmi_operateD_1$whas,
       ctop_inf_dp0_wmi_wmi_peerIsReady_1$wget,
       ctop_inf_dp0_wmi_wmi_peerIsReady_1$whas,
       ctop_inf_dp0_wmi_wmi_reqF_doResetClr$whas,
       ctop_inf_dp0_wmi_wmi_reqF_doResetDeq$whas,
       ctop_inf_dp0_wmi_wmi_reqF_doResetEnq$whas,
       ctop_inf_dp0_wmi_wmi_reqF_r_clr$whas,
       ctop_inf_dp0_wmi_wmi_reqF_r_deq$whas,
       ctop_inf_dp0_wmi_wmi_reqF_r_enq$whas,
       ctop_inf_dp0_wmi_wmi_respF_dequeueing$whas,
       ctop_inf_dp0_wmi_wmi_respF_enqueueing$whas,
       ctop_inf_dp0_wmi_wmi_respF_x_wire$whas,
       ctop_inf_dp0_wmi_wmi_sDataThreadBusy_dw$wget,
       ctop_inf_dp0_wmi_wmi_sDataThreadBusy_dw$whas,
       ctop_inf_dp0_wmi_wmi_sThreadBusy_dw$wget,
       ctop_inf_dp0_wmi_wmi_sThreadBusy_dw$whas,
       ctop_inf_dp0_wmi_wmi_wmiDh$whas,
       ctop_inf_dp0_wmi_wmi_wmiMFlag$whas,
       ctop_inf_dp0_wmi_wmi_wmiReq$whas,
       ctop_inf_dp0_wti_wtiReq$whas,
       ctop_inf_dp1_bml_crdBuf_decAction$whas,
       ctop_inf_dp1_bml_crdBuf_incAction$whas,
       ctop_inf_dp1_bml_dpControl$whas,
       ctop_inf_dp1_bml_fabAvail_1$wget,
       ctop_inf_dp1_bml_fabAvail_1$whas,
       ctop_inf_dp1_bml_fabBuf_decAction$whas,
       ctop_inf_dp1_bml_fabBuf_incAction$whas,
       ctop_inf_dp1_bml_fabDone_1$wget,
       ctop_inf_dp1_bml_fabDone_1$whas,
       ctop_inf_dp1_bml_lclBufDone_1$wget,
       ctop_inf_dp1_bml_lclBufDone_1$whas,
       ctop_inf_dp1_bml_lclBufStart_1$wget,
       ctop_inf_dp1_bml_lclBufStart_1$whas,
       ctop_inf_dp1_bml_lclBuf_decAction$whas,
       ctop_inf_dp1_bml_lclBuf_incAction$whas,
       ctop_inf_dp1_bml_remBuf_decAction$whas,
       ctop_inf_dp1_bml_remBuf_incAction$whas,
       ctop_inf_dp1_bml_remDone_1$wget,
       ctop_inf_dp1_bml_remDone_1$whas,
       ctop_inf_dp1_bml_remStart_1$wget,
       ctop_inf_dp1_bml_remStart_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_1_writeWithResp$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_2_writeWithResp$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_3_writeWithResp$whas,
       ctop_inf_dp1_bram_serverAdapterA_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterA_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterA_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterA_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterA_writeWithResp$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_1_writeWithResp$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_2_writeWithResp$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_3_writeWithResp$whas,
       ctop_inf_dp1_bram_serverAdapterB_cnt_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_cnt_2$whas,
       ctop_inf_dp1_bram_serverAdapterB_cnt_3$whas,
       ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas,
       ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas,
       ctop_inf_dp1_bram_serverAdapterB_outData_outData$whas,
       ctop_inf_dp1_bram_serverAdapterB_s1_1$whas,
       ctop_inf_dp1_bram_serverAdapterB_writeWithResp$whas,
       ctop_inf_dp1_tlp_creditReady_1$wget,
       ctop_inf_dp1_tlp_creditReady_1$whas,
       ctop_inf_dp1_tlp_dpControl$whas,
       ctop_inf_dp1_tlp_farBufReady_1$wget,
       ctop_inf_dp1_tlp_farBufReady_1$whas,
       ctop_inf_dp1_tlp_nearBufReady_1$wget,
       ctop_inf_dp1_tlp_nearBufReady_1$whas,
       ctop_inf_dp1_tlp_pullTagMatch_1$wget,
       ctop_inf_dp1_tlp_pullTagMatch_1$whas,
       ctop_inf_dp1_tlp_remDone_1$wget,
       ctop_inf_dp1_tlp_remDone_1$whas,
       ctop_inf_dp1_tlp_remStart_1$wget,
       ctop_inf_dp1_tlp_remStart_1$whas,
       ctop_inf_dp1_wci_Es_mAddrSpace_w$wget,
       ctop_inf_dp1_wci_Es_mAddrSpace_w$whas,
       ctop_inf_dp1_wci_Es_mAddr_w$whas,
       ctop_inf_dp1_wci_Es_mByteEn_w$whas,
       ctop_inf_dp1_wci_Es_mCmd_w$whas,
       ctop_inf_dp1_wci_Es_mData_w$whas,
       ctop_inf_dp1_wci_ctlAckReg_1$wget,
       ctop_inf_dp1_wci_ctlAckReg_1$whas,
       ctop_inf_dp1_wci_reqF_r_clr$whas,
       ctop_inf_dp1_wci_reqF_r_deq$whas,
       ctop_inf_dp1_wci_reqF_r_enq$whas,
       ctop_inf_dp1_wci_respF_dequeueing$whas,
       ctop_inf_dp1_wci_respF_enqueueing$whas,
       ctop_inf_dp1_wci_respF_x_wire$whas,
       ctop_inf_dp1_wci_sFlagReg_1$wget,
       ctop_inf_dp1_wci_sFlagReg_1$whas,
       ctop_inf_dp1_wci_sThreadBusy_pw$whas,
       ctop_inf_dp1_wci_wEdge$whas,
       ctop_inf_dp1_wci_wciReq$whas,
       ctop_inf_dp1_wci_wci_cfrd_pw$whas,
       ctop_inf_dp1_wci_wci_cfwr_pw$whas,
       ctop_inf_dp1_wci_wci_ctrl_pw$whas,
       ctop_inf_dp1_wmi_Es_mAddrSpace_w$wget,
       ctop_inf_dp1_wmi_Es_mAddrSpace_w$whas,
       ctop_inf_dp1_wmi_Es_mAddr_w$whas,
       ctop_inf_dp1_wmi_Es_mBurstLength_w$whas,
       ctop_inf_dp1_wmi_Es_mCmd_w$whas,
       ctop_inf_dp1_wmi_Es_mDataByteEn_w$whas,
       ctop_inf_dp1_wmi_Es_mDataInfo_w$whas,
       ctop_inf_dp1_wmi_Es_mDataLast_w$whas,
       ctop_inf_dp1_wmi_Es_mDataValid_w$whas,
       ctop_inf_dp1_wmi_Es_mData_w$whas,
       ctop_inf_dp1_wmi_Es_mReqInfo_w$wget,
       ctop_inf_dp1_wmi_Es_mReqInfo_w$whas,
       ctop_inf_dp1_wmi_Es_mReqLast_w$whas,
       ctop_inf_dp1_wmi_dpControl$whas,
       ctop_inf_dp1_wmi_mesgBufReady_1$wget,
       ctop_inf_dp1_wmi_mesgBufReady_1$whas,
       ctop_inf_dp1_wmi_mesgDone_1$wget,
       ctop_inf_dp1_wmi_mesgDone_1$whas,
       ctop_inf_dp1_wmi_mesgStart_1$wget,
       ctop_inf_dp1_wmi_mesgStart_1$whas,
       ctop_inf_dp1_wmi_nowW$whas,
       ctop_inf_dp1_wmi_wmi_dhF_doResetClr$whas,
       ctop_inf_dp1_wmi_wmi_dhF_doResetDeq$whas,
       ctop_inf_dp1_wmi_wmi_dhF_doResetEnq$whas,
       ctop_inf_dp1_wmi_wmi_dhF_r_clr$whas,
       ctop_inf_dp1_wmi_wmi_dhF_r_deq$whas,
       ctop_inf_dp1_wmi_wmi_dhF_r_enq$whas,
       ctop_inf_dp1_wmi_wmi_forceSThreadBusy_pw$whas,
       ctop_inf_dp1_wmi_wmi_mFlagF_doResetClr$whas,
       ctop_inf_dp1_wmi_wmi_mFlagF_doResetDeq$whas,
       ctop_inf_dp1_wmi_wmi_mFlagF_doResetEnq$whas,
       ctop_inf_dp1_wmi_wmi_mFlagF_r_clr$whas,
       ctop_inf_dp1_wmi_wmi_mFlagF_r_deq$whas,
       ctop_inf_dp1_wmi_wmi_mFlagF_r_enq$whas,
       ctop_inf_dp1_wmi_wmi_operateD_1$wget,
       ctop_inf_dp1_wmi_wmi_operateD_1$whas,
       ctop_inf_dp1_wmi_wmi_peerIsReady_1$wget,
       ctop_inf_dp1_wmi_wmi_peerIsReady_1$whas,
       ctop_inf_dp1_wmi_wmi_reqF_doResetClr$whas,
       ctop_inf_dp1_wmi_wmi_reqF_doResetDeq$whas,
       ctop_inf_dp1_wmi_wmi_reqF_doResetEnq$whas,
       ctop_inf_dp1_wmi_wmi_reqF_r_clr$whas,
       ctop_inf_dp1_wmi_wmi_reqF_r_deq$whas,
       ctop_inf_dp1_wmi_wmi_reqF_r_enq$whas,
       ctop_inf_dp1_wmi_wmi_respF_dequeueing$whas,
       ctop_inf_dp1_wmi_wmi_respF_enqueueing$whas,
       ctop_inf_dp1_wmi_wmi_respF_x_wire$whas,
       ctop_inf_dp1_wmi_wmi_sDataThreadBusy_dw$wget,
       ctop_inf_dp1_wmi_wmi_sDataThreadBusy_dw$whas,
       ctop_inf_dp1_wmi_wmi_sThreadBusy_dw$wget,
       ctop_inf_dp1_wmi_wmi_sThreadBusy_dw$whas,
       ctop_inf_dp1_wmi_wmi_wmiDh$whas,
       ctop_inf_dp1_wmi_wmi_wmiMFlag$whas,
       ctop_inf_dp1_wmi_wmi_wmiReq$whas,
       ctop_inf_dp1_wti_wtiReq$whas,
       ctop_inf_itc0_wti_sThreadBusy_pw$whas,
       ctop_inf_itc1_wti_sThreadBusy_pw$whas,
       i2pAF_dClear_pw$whas,
       i2pAF_deq_happened$whas,
       i2pAF_deq_pw$whas,
       i2pAF_enq_pw$whas,
       i2pAF_sClear_pw$whas,
       p2iAF_dClear_pw$whas,
       p2iAF_deq_happened$whas,
       p2iAF_deq_pw$whas,
       p2iAF_enq_pw$whas,
       p2iAF_sClear_pw$whas,
       pci0_pwTrnRx$whas,
       pci0_pwTrnTx$whas,
       pcie_irq_wInterruptDo$whas,
       pcie_irq_wInterruptRdyN$wget,
       pcie_irq_wInterruptRdyN$whas,
       tcGbe0_wti_sThreadBusy_pw$whas;

  // register Prelude_inst_changeSpecialWires_1_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_1_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_1_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_1_rg$EN;

  // register Prelude_inst_changeSpecialWires_4_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_4_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_4_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_4_rg$EN;

  // register ctop_app_appW2_abortCount
  reg [31 : 0] ctop_app_appW2_abortCount;
  wire [31 : 0] ctop_app_appW2_abortCount$D_IN;
  wire ctop_app_appW2_abortCount$EN;

  // register ctop_app_appW2_doAbort
  reg ctop_app_appW2_doAbort;
  wire ctop_app_appW2_doAbort$D_IN, ctop_app_appW2_doAbort$EN;

  // register ctop_app_appW2_endOfMessage
  reg ctop_app_appW2_endOfMessage;
  wire ctop_app_appW2_endOfMessage$D_IN, ctop_app_appW2_endOfMessage$EN;

  // register ctop_app_appW2_errCount
  reg [31 : 0] ctop_app_appW2_errCount;
  wire [31 : 0] ctop_app_appW2_errCount$D_IN;
  wire ctop_app_appW2_errCount$EN;

  // register ctop_app_appW2_fabRespCredit_value
  reg [11 : 0] ctop_app_appW2_fabRespCredit_value;
  wire [11 : 0] ctop_app_appW2_fabRespCredit_value$D_IN;
  wire ctop_app_appW2_fabRespCredit_value$EN;

  // register ctop_app_appW2_fabWordsCurReq
  reg [13 : 0] ctop_app_appW2_fabWordsCurReq;
  wire [13 : 0] ctop_app_appW2_fabWordsCurReq$D_IN;
  wire ctop_app_appW2_fabWordsCurReq$EN;

  // register ctop_app_appW2_fabWordsRemain
  reg [13 : 0] ctop_app_appW2_fabWordsRemain;
  wire [13 : 0] ctop_app_appW2_fabWordsRemain$D_IN;
  wire ctop_app_appW2_fabWordsRemain$EN;

  // register ctop_app_appW2_firstMsgReq
  reg ctop_app_appW2_firstMsgReq;
  wire ctop_app_appW2_firstMsgReq$D_IN, ctop_app_appW2_firstMsgReq$EN;

  // register ctop_app_appW2_impreciseBurst
  reg ctop_app_appW2_impreciseBurst;
  wire ctop_app_appW2_impreciseBurst$D_IN, ctop_app_appW2_impreciseBurst$EN;

  // register ctop_app_appW2_lastMesg
  reg [31 : 0] ctop_app_appW2_lastMesg;
  wire [31 : 0] ctop_app_appW2_lastMesg$D_IN;
  wire ctop_app_appW2_lastMesg$EN;

  // register ctop_app_appW2_mesgCount
  reg [31 : 0] ctop_app_appW2_mesgCount;
  reg [31 : 0] ctop_app_appW2_mesgCount$D_IN;
  wire ctop_app_appW2_mesgCount$EN;

  // register ctop_app_appW2_mesgLength
  reg [14 : 0] ctop_app_appW2_mesgLength;
  reg [14 : 0] ctop_app_appW2_mesgLength$D_IN;
  wire ctop_app_appW2_mesgLength$EN;

  // register ctop_app_appW2_mesgLengthSoFar
  reg [13 : 0] ctop_app_appW2_mesgLengthSoFar;
  wire [13 : 0] ctop_app_appW2_mesgLengthSoFar$D_IN;
  wire ctop_app_appW2_mesgLengthSoFar$EN;

  // register ctop_app_appW2_mesgPreRequest
  reg ctop_app_appW2_mesgPreRequest;
  wire ctop_app_appW2_mesgPreRequest$D_IN, ctop_app_appW2_mesgPreRequest$EN;

  // register ctop_app_appW2_mesgReqAddr
  reg [13 : 0] ctop_app_appW2_mesgReqAddr;
  wire [13 : 0] ctop_app_appW2_mesgReqAddr$D_IN;
  wire ctop_app_appW2_mesgReqAddr$EN;

  // register ctop_app_appW2_mesgReqOK
  reg ctop_app_appW2_mesgReqOK;
  wire ctop_app_appW2_mesgReqOK$D_IN, ctop_app_appW2_mesgReqOK$EN;

  // register ctop_app_appW2_mesgReqValid
  reg ctop_app_appW2_mesgReqValid;
  wire ctop_app_appW2_mesgReqValid$D_IN, ctop_app_appW2_mesgReqValid$EN;

  // register ctop_app_appW2_opcode
  reg [8 : 0] ctop_app_appW2_opcode;
  wire [8 : 0] ctop_app_appW2_opcode$D_IN;
  wire ctop_app_appW2_opcode$EN;

  // register ctop_app_appW2_preciseBurst
  reg ctop_app_appW2_preciseBurst;
  wire ctop_app_appW2_preciseBurst$D_IN, ctop_app_appW2_preciseBurst$EN;

  // register ctop_app_appW2_readyToPush
  reg ctop_app_appW2_readyToPush;
  wire ctop_app_appW2_readyToPush$D_IN, ctop_app_appW2_readyToPush$EN;

  // register ctop_app_appW2_readyToRequest
  reg ctop_app_appW2_readyToRequest;
  wire ctop_app_appW2_readyToRequest$D_IN, ctop_app_appW2_readyToRequest$EN;

  // register ctop_app_appW2_respF_rCache
  reg [73 : 0] ctop_app_appW2_respF_rCache;
  wire [73 : 0] ctop_app_appW2_respF_rCache$D_IN;
  wire ctop_app_appW2_respF_rCache$EN;

  // register ctop_app_appW2_respF_rRdPtr
  reg [11 : 0] ctop_app_appW2_respF_rRdPtr;
  wire [11 : 0] ctop_app_appW2_respF_rRdPtr$D_IN;
  wire ctop_app_appW2_respF_rRdPtr$EN;

  // register ctop_app_appW2_respF_rWrPtr
  reg [11 : 0] ctop_app_appW2_respF_rWrPtr;
  wire [11 : 0] ctop_app_appW2_respF_rWrPtr$D_IN;
  wire ctop_app_appW2_respF_rWrPtr$EN;

  // register ctop_app_appW2_smaCtrl
  reg [31 : 0] ctop_app_appW2_smaCtrl;
  wire [31 : 0] ctop_app_appW2_smaCtrl$D_IN;
  wire ctop_app_appW2_smaCtrl$EN;

  // register ctop_app_appW2_thisMesg
  reg [31 : 0] ctop_app_appW2_thisMesg;
  reg [31 : 0] ctop_app_appW2_thisMesg$D_IN;
  wire ctop_app_appW2_thisMesg$EN;

  // register ctop_app_appW2_unrollCnt
  reg [15 : 0] ctop_app_appW2_unrollCnt;
  wire [15 : 0] ctop_app_appW2_unrollCnt$D_IN;
  wire ctop_app_appW2_unrollCnt$EN;

  // register ctop_app_appW2_valExpect
  reg [31 : 0] ctop_app_appW2_valExpect;
  wire [31 : 0] ctop_app_appW2_valExpect$D_IN;
  wire ctop_app_appW2_valExpect$EN;

  // register ctop_app_appW2_wci_cEdge
  reg [2 : 0] ctop_app_appW2_wci_cEdge;
  wire [2 : 0] ctop_app_appW2_wci_cEdge$D_IN;
  wire ctop_app_appW2_wci_cEdge$EN;

  // register ctop_app_appW2_wci_cState
  reg [2 : 0] ctop_app_appW2_wci_cState;
  wire [2 : 0] ctop_app_appW2_wci_cState$D_IN;
  wire ctop_app_appW2_wci_cState$EN;

  // register ctop_app_appW2_wci_ctlAckReg
  reg ctop_app_appW2_wci_ctlAckReg;
  wire ctop_app_appW2_wci_ctlAckReg$D_IN, ctop_app_appW2_wci_ctlAckReg$EN;

  // register ctop_app_appW2_wci_ctlOpActive
  reg ctop_app_appW2_wci_ctlOpActive;
  wire ctop_app_appW2_wci_ctlOpActive$D_IN, ctop_app_appW2_wci_ctlOpActive$EN;

  // register ctop_app_appW2_wci_illegalEdge
  reg ctop_app_appW2_wci_illegalEdge;
  wire ctop_app_appW2_wci_illegalEdge$D_IN, ctop_app_appW2_wci_illegalEdge$EN;

  // register ctop_app_appW2_wci_nState
  reg [2 : 0] ctop_app_appW2_wci_nState;
  reg [2 : 0] ctop_app_appW2_wci_nState$D_IN;
  wire ctop_app_appW2_wci_nState$EN;

  // register ctop_app_appW2_wci_reqF_countReg
  reg [1 : 0] ctop_app_appW2_wci_reqF_countReg;
  wire [1 : 0] ctop_app_appW2_wci_reqF_countReg$D_IN;
  wire ctop_app_appW2_wci_reqF_countReg$EN;

  // register ctop_app_appW2_wci_respF_c_r
  reg [1 : 0] ctop_app_appW2_wci_respF_c_r;
  wire [1 : 0] ctop_app_appW2_wci_respF_c_r$D_IN;
  wire ctop_app_appW2_wci_respF_c_r$EN;

  // register ctop_app_appW2_wci_respF_q_0
  reg [33 : 0] ctop_app_appW2_wci_respF_q_0;
  reg [33 : 0] ctop_app_appW2_wci_respF_q_0$D_IN;
  wire ctop_app_appW2_wci_respF_q_0$EN;

  // register ctop_app_appW2_wci_respF_q_1
  reg [33 : 0] ctop_app_appW2_wci_respF_q_1;
  reg [33 : 0] ctop_app_appW2_wci_respF_q_1$D_IN;
  wire ctop_app_appW2_wci_respF_q_1$EN;

  // register ctop_app_appW2_wci_sFlagReg
  reg ctop_app_appW2_wci_sFlagReg;
  wire ctop_app_appW2_wci_sFlagReg$D_IN, ctop_app_appW2_wci_sFlagReg$EN;

  // register ctop_app_appW2_wci_sThreadBusy_d
  reg ctop_app_appW2_wci_sThreadBusy_d;
  wire ctop_app_appW2_wci_sThreadBusy_d$D_IN,
       ctop_app_appW2_wci_sThreadBusy_d$EN;

  // register ctop_app_appW2_wmi_busyWithMessage
  reg ctop_app_appW2_wmi_busyWithMessage;
  wire ctop_app_appW2_wmi_busyWithMessage$D_IN,
       ctop_app_appW2_wmi_busyWithMessage$EN;

  // register ctop_app_appW2_wmi_dhF_c_r
  reg [1 : 0] ctop_app_appW2_wmi_dhF_c_r;
  wire [1 : 0] ctop_app_appW2_wmi_dhF_c_r$D_IN;
  wire ctop_app_appW2_wmi_dhF_c_r$EN;

  // register ctop_app_appW2_wmi_dhF_q_0
  reg [37 : 0] ctop_app_appW2_wmi_dhF_q_0;
  reg [37 : 0] ctop_app_appW2_wmi_dhF_q_0$D_IN;
  wire ctop_app_appW2_wmi_dhF_q_0$EN;

  // register ctop_app_appW2_wmi_dhF_q_1
  reg [37 : 0] ctop_app_appW2_wmi_dhF_q_1;
  reg [37 : 0] ctop_app_appW2_wmi_dhF_q_1$D_IN;
  wire ctop_app_appW2_wmi_dhF_q_1$EN;

  // register ctop_app_appW2_wmi_errorSticky
  reg ctop_app_appW2_wmi_errorSticky;
  wire ctop_app_appW2_wmi_errorSticky$D_IN, ctop_app_appW2_wmi_errorSticky$EN;

  // register ctop_app_appW2_wmi_mFlagF_c_r
  reg [1 : 0] ctop_app_appW2_wmi_mFlagF_c_r;
  wire [1 : 0] ctop_app_appW2_wmi_mFlagF_c_r$D_IN;
  wire ctop_app_appW2_wmi_mFlagF_c_r$EN;

  // register ctop_app_appW2_wmi_mFlagF_q_0
  reg [31 : 0] ctop_app_appW2_wmi_mFlagF_q_0;
  reg [31 : 0] ctop_app_appW2_wmi_mFlagF_q_0$D_IN;
  wire ctop_app_appW2_wmi_mFlagF_q_0$EN;

  // register ctop_app_appW2_wmi_mFlagF_q_1
  reg [31 : 0] ctop_app_appW2_wmi_mFlagF_q_1;
  reg [31 : 0] ctop_app_appW2_wmi_mFlagF_q_1$D_IN;
  wire ctop_app_appW2_wmi_mFlagF_q_1$EN;

  // register ctop_app_appW2_wmi_operateD
  reg ctop_app_appW2_wmi_operateD;
  wire ctop_app_appW2_wmi_operateD$D_IN, ctop_app_appW2_wmi_operateD$EN;

  // register ctop_app_appW2_wmi_peerIsReady
  reg ctop_app_appW2_wmi_peerIsReady;
  wire ctop_app_appW2_wmi_peerIsReady$D_IN, ctop_app_appW2_wmi_peerIsReady$EN;

  // register ctop_app_appW2_wmi_reqF_c_r
  reg [1 : 0] ctop_app_appW2_wmi_reqF_c_r;
  wire [1 : 0] ctop_app_appW2_wmi_reqF_c_r$D_IN;
  wire ctop_app_appW2_wmi_reqF_c_r$EN;

  // register ctop_app_appW2_wmi_reqF_q_0
  reg [31 : 0] ctop_app_appW2_wmi_reqF_q_0;
  reg [31 : 0] ctop_app_appW2_wmi_reqF_q_0$D_IN;
  wire ctop_app_appW2_wmi_reqF_q_0$EN;

  // register ctop_app_appW2_wmi_reqF_q_1
  reg [31 : 0] ctop_app_appW2_wmi_reqF_q_1;
  reg [31 : 0] ctop_app_appW2_wmi_reqF_q_1$D_IN;
  wire ctop_app_appW2_wmi_reqF_q_1$EN;

  // register ctop_app_appW2_wmi_sDataThreadBusy_d
  reg ctop_app_appW2_wmi_sDataThreadBusy_d;
  wire ctop_app_appW2_wmi_sDataThreadBusy_d$D_IN,
       ctop_app_appW2_wmi_sDataThreadBusy_d$EN;

  // register ctop_app_appW2_wmi_sFlagReg
  reg [31 : 0] ctop_app_appW2_wmi_sFlagReg;
  wire [31 : 0] ctop_app_appW2_wmi_sFlagReg$D_IN;
  wire ctop_app_appW2_wmi_sFlagReg$EN;

  // register ctop_app_appW2_wmi_sThreadBusy_d
  reg ctop_app_appW2_wmi_sThreadBusy_d;
  wire ctop_app_appW2_wmi_sThreadBusy_d$D_IN,
       ctop_app_appW2_wmi_sThreadBusy_d$EN;

  // register ctop_app_appW2_wmi_statusR
  reg [7 : 0] ctop_app_appW2_wmi_statusR;
  wire [7 : 0] ctop_app_appW2_wmi_statusR$D_IN;
  wire ctop_app_appW2_wmi_statusR$EN;

  // register ctop_app_appW2_wmi_trafficSticky
  reg ctop_app_appW2_wmi_trafficSticky;
  wire ctop_app_appW2_wmi_trafficSticky$D_IN,
       ctop_app_appW2_wmi_trafficSticky$EN;

  // register ctop_app_appW2_wsiM_burstKind
  reg [1 : 0] ctop_app_appW2_wsiM_burstKind;
  wire [1 : 0] ctop_app_appW2_wsiM_burstKind$D_IN;
  wire ctop_app_appW2_wsiM_burstKind$EN;

  // register ctop_app_appW2_wsiM_errorSticky
  reg ctop_app_appW2_wsiM_errorSticky;
  wire ctop_app_appW2_wsiM_errorSticky$D_IN,
       ctop_app_appW2_wsiM_errorSticky$EN;

  // register ctop_app_appW2_wsiM_iMesgCount
  reg [31 : 0] ctop_app_appW2_wsiM_iMesgCount;
  wire [31 : 0] ctop_app_appW2_wsiM_iMesgCount$D_IN;
  wire ctop_app_appW2_wsiM_iMesgCount$EN;

  // register ctop_app_appW2_wsiM_operateD
  reg ctop_app_appW2_wsiM_operateD;
  wire ctop_app_appW2_wsiM_operateD$D_IN, ctop_app_appW2_wsiM_operateD$EN;

  // register ctop_app_appW2_wsiM_pMesgCount
  reg [31 : 0] ctop_app_appW2_wsiM_pMesgCount;
  wire [31 : 0] ctop_app_appW2_wsiM_pMesgCount$D_IN;
  wire ctop_app_appW2_wsiM_pMesgCount$EN;

  // register ctop_app_appW2_wsiM_peerIsReady
  reg ctop_app_appW2_wsiM_peerIsReady;
  wire ctop_app_appW2_wsiM_peerIsReady$D_IN,
       ctop_app_appW2_wsiM_peerIsReady$EN;

  // register ctop_app_appW2_wsiM_reqFifo_c_r
  reg [1 : 0] ctop_app_appW2_wsiM_reqFifo_c_r;
  wire [1 : 0] ctop_app_appW2_wsiM_reqFifo_c_r$D_IN;
  wire ctop_app_appW2_wsiM_reqFifo_c_r$EN;

  // register ctop_app_appW2_wsiM_reqFifo_q_0
  reg [60 : 0] ctop_app_appW2_wsiM_reqFifo_q_0;
  reg [60 : 0] ctop_app_appW2_wsiM_reqFifo_q_0$D_IN;
  wire ctop_app_appW2_wsiM_reqFifo_q_0$EN;

  // register ctop_app_appW2_wsiM_reqFifo_q_1
  reg [60 : 0] ctop_app_appW2_wsiM_reqFifo_q_1;
  reg [60 : 0] ctop_app_appW2_wsiM_reqFifo_q_1$D_IN;
  wire ctop_app_appW2_wsiM_reqFifo_q_1$EN;

  // register ctop_app_appW2_wsiM_sThreadBusy_d
  reg ctop_app_appW2_wsiM_sThreadBusy_d;
  wire ctop_app_appW2_wsiM_sThreadBusy_d$D_IN,
       ctop_app_appW2_wsiM_sThreadBusy_d$EN;

  // register ctop_app_appW2_wsiM_statusR
  reg [7 : 0] ctop_app_appW2_wsiM_statusR;
  wire [7 : 0] ctop_app_appW2_wsiM_statusR$D_IN;
  wire ctop_app_appW2_wsiM_statusR$EN;

  // register ctop_app_appW2_wsiM_tBusyCount
  reg [31 : 0] ctop_app_appW2_wsiM_tBusyCount;
  wire [31 : 0] ctop_app_appW2_wsiM_tBusyCount$D_IN;
  wire ctop_app_appW2_wsiM_tBusyCount$EN;

  // register ctop_app_appW2_wsiM_trafficSticky
  reg ctop_app_appW2_wsiM_trafficSticky;
  wire ctop_app_appW2_wsiM_trafficSticky$D_IN,
       ctop_app_appW2_wsiM_trafficSticky$EN;

  // register ctop_app_appW2_wsiS_burstKind
  reg [1 : 0] ctop_app_appW2_wsiS_burstKind;
  wire [1 : 0] ctop_app_appW2_wsiS_burstKind$D_IN;
  wire ctop_app_appW2_wsiS_burstKind$EN;

  // register ctop_app_appW2_wsiS_errorSticky
  reg ctop_app_appW2_wsiS_errorSticky;
  wire ctop_app_appW2_wsiS_errorSticky$D_IN,
       ctop_app_appW2_wsiS_errorSticky$EN;

  // register ctop_app_appW2_wsiS_iMesgCount
  reg [31 : 0] ctop_app_appW2_wsiS_iMesgCount;
  wire [31 : 0] ctop_app_appW2_wsiS_iMesgCount$D_IN;
  wire ctop_app_appW2_wsiS_iMesgCount$EN;

  // register ctop_app_appW2_wsiS_mesgWordLength
  reg [11 : 0] ctop_app_appW2_wsiS_mesgWordLength;
  wire [11 : 0] ctop_app_appW2_wsiS_mesgWordLength$D_IN;
  wire ctop_app_appW2_wsiS_mesgWordLength$EN;

  // register ctop_app_appW2_wsiS_operateD
  reg ctop_app_appW2_wsiS_operateD;
  wire ctop_app_appW2_wsiS_operateD$D_IN, ctop_app_appW2_wsiS_operateD$EN;

  // register ctop_app_appW2_wsiS_pMesgCount
  reg [31 : 0] ctop_app_appW2_wsiS_pMesgCount;
  wire [31 : 0] ctop_app_appW2_wsiS_pMesgCount$D_IN;
  wire ctop_app_appW2_wsiS_pMesgCount$EN;

  // register ctop_app_appW2_wsiS_peerIsReady
  reg ctop_app_appW2_wsiS_peerIsReady;
  wire ctop_app_appW2_wsiS_peerIsReady$D_IN,
       ctop_app_appW2_wsiS_peerIsReady$EN;

  // register ctop_app_appW2_wsiS_reqFifo_countReg
  reg [1 : 0] ctop_app_appW2_wsiS_reqFifo_countReg;
  wire [1 : 0] ctop_app_appW2_wsiS_reqFifo_countReg$D_IN;
  wire ctop_app_appW2_wsiS_reqFifo_countReg$EN;

  // register ctop_app_appW2_wsiS_reqFifo_levelsValid
  reg ctop_app_appW2_wsiS_reqFifo_levelsValid;
  wire ctop_app_appW2_wsiS_reqFifo_levelsValid$D_IN,
       ctop_app_appW2_wsiS_reqFifo_levelsValid$EN;

  // register ctop_app_appW2_wsiS_statusR
  reg [7 : 0] ctop_app_appW2_wsiS_statusR;
  wire [7 : 0] ctop_app_appW2_wsiS_statusR$D_IN;
  wire ctop_app_appW2_wsiS_statusR$EN;

  // register ctop_app_appW2_wsiS_tBusyCount
  reg [31 : 0] ctop_app_appW2_wsiS_tBusyCount;
  wire [31 : 0] ctop_app_appW2_wsiS_tBusyCount$D_IN;
  wire ctop_app_appW2_wsiS_tBusyCount$EN;

  // register ctop_app_appW2_wsiS_trafficSticky
  reg ctop_app_appW2_wsiS_trafficSticky;
  wire ctop_app_appW2_wsiS_trafficSticky$D_IN,
       ctop_app_appW2_wsiS_trafficSticky$EN;

  // register ctop_app_appW2_wsiS_wordCount
  reg [11 : 0] ctop_app_appW2_wsiS_wordCount;
  wire [11 : 0] ctop_app_appW2_wsiS_wordCount$D_IN;
  wire ctop_app_appW2_wsiS_wordCount$EN;

  // register ctop_app_appW2_wsiWordsRemain
  reg [11 : 0] ctop_app_appW2_wsiWordsRemain;
  wire [11 : 0] ctop_app_appW2_wsiWordsRemain$D_IN;
  wire ctop_app_appW2_wsiWordsRemain$EN;

  // register ctop_app_appW2_zeroLengthMesg
  reg ctop_app_appW2_zeroLengthMesg;
  wire ctop_app_appW2_zeroLengthMesg$D_IN, ctop_app_appW2_zeroLengthMesg$EN;

  // register ctop_app_appW3_bytesRead
  reg [31 : 0] ctop_app_appW3_bytesRead;
  wire [31 : 0] ctop_app_appW3_bytesRead$D_IN;
  wire ctop_app_appW3_bytesRead$EN;

  // register ctop_app_appW3_bytesThisMessage
  reg [23 : 0] ctop_app_appW3_bytesThisMessage;
  wire [23 : 0] ctop_app_appW3_bytesThisMessage$D_IN;
  wire ctop_app_appW3_bytesThisMessage$EN;

  // register ctop_app_appW3_bytesWritten
  reg [31 : 0] ctop_app_appW3_bytesWritten;
  wire [31 : 0] ctop_app_appW3_bytesWritten$D_IN;
  wire ctop_app_appW3_bytesWritten$EN;

  // register ctop_app_appW3_cyclesPassed
  reg [31 : 0] ctop_app_appW3_cyclesPassed;
  wire [31 : 0] ctop_app_appW3_cyclesPassed$D_IN;
  wire ctop_app_appW3_cyclesPassed$EN;

  // register ctop_app_appW3_dlyCtrl
  reg [31 : 0] ctop_app_appW3_dlyCtrl;
  wire [31 : 0] ctop_app_appW3_dlyCtrl$D_IN;
  wire ctop_app_appW3_dlyCtrl$EN;

  // register ctop_app_appW3_dlyHoldoffBytes
  reg [31 : 0] ctop_app_appW3_dlyHoldoffBytes;
  wire [31 : 0] ctop_app_appW3_dlyHoldoffBytes$D_IN;
  wire ctop_app_appW3_dlyHoldoffBytes$EN;

  // register ctop_app_appW3_dlyHoldoffCycles
  reg [31 : 0] ctop_app_appW3_dlyHoldoffCycles;
  wire [31 : 0] ctop_app_appW3_dlyHoldoffCycles$D_IN;
  wire ctop_app_appW3_dlyHoldoffCycles$EN;

  // register ctop_app_appW3_dlyRAG
  reg [22 : 0] ctop_app_appW3_dlyRAG;
  wire [22 : 0] ctop_app_appW3_dlyRAG$D_IN;
  wire ctop_app_appW3_dlyRAG$EN;

  // register ctop_app_appW3_dlyRdOpOther
  reg [31 : 0] ctop_app_appW3_dlyRdOpOther;
  wire [31 : 0] ctop_app_appW3_dlyRdOpOther$D_IN;
  wire ctop_app_appW3_dlyRdOpOther$EN;

  // register ctop_app_appW3_dlyRdOpZero
  reg [31 : 0] ctop_app_appW3_dlyRdOpZero;
  wire [31 : 0] ctop_app_appW3_dlyRdOpZero$D_IN;
  wire ctop_app_appW3_dlyRdOpZero$EN;

  // register ctop_app_appW3_dlyReadCredit_value
  reg [7 : 0] ctop_app_appW3_dlyReadCredit_value;
  wire [7 : 0] ctop_app_appW3_dlyReadCredit_value$D_IN;
  wire ctop_app_appW3_dlyReadCredit_value$EN;

  // register ctop_app_appW3_dlyReadyToWrite_value
  reg [15 : 0] ctop_app_appW3_dlyReadyToWrite_value;
  wire [15 : 0] ctop_app_appW3_dlyReadyToWrite_value$D_IN;
  wire ctop_app_appW3_dlyReadyToWrite_value$EN;

  // register ctop_app_appW3_dlyWAG
  reg [22 : 0] ctop_app_appW3_dlyWAG;
  wire [22 : 0] ctop_app_appW3_dlyWAG$D_IN;
  wire ctop_app_appW3_dlyWAG$EN;

  // register ctop_app_appW3_dlyWordsStored_value
  reg [24 : 0] ctop_app_appW3_dlyWordsStored_value;
  wire [24 : 0] ctop_app_appW3_dlyWordsStored_value$D_IN;
  wire ctop_app_appW3_dlyWordsStored_value$EN;

  // register ctop_app_appW3_mesgLengthSoFar
  reg [13 : 0] ctop_app_appW3_mesgLengthSoFar;
  wire [13 : 0] ctop_app_appW3_mesgLengthSoFar$D_IN;
  wire ctop_app_appW3_mesgLengthSoFar$EN;

  // register ctop_app_appW3_mesgRdCount
  reg [31 : 0] ctop_app_appW3_mesgRdCount;
  wire [31 : 0] ctop_app_appW3_mesgRdCount$D_IN;
  wire ctop_app_appW3_mesgRdCount$EN;

  // register ctop_app_appW3_mesgWF_rCache
  reg [45 : 0] ctop_app_appW3_mesgWF_rCache;
  wire [45 : 0] ctop_app_appW3_mesgWF_rCache$D_IN;
  wire ctop_app_appW3_mesgWF_rCache$EN;

  // register ctop_app_appW3_mesgWF_rRdPtr
  reg [12 : 0] ctop_app_appW3_mesgWF_rRdPtr;
  wire [12 : 0] ctop_app_appW3_mesgWF_rRdPtr$D_IN;
  wire ctop_app_appW3_mesgWF_rRdPtr$EN;

  // register ctop_app_appW3_mesgWF_rWrPtr
  reg [12 : 0] ctop_app_appW3_mesgWF_rWrPtr;
  wire [12 : 0] ctop_app_appW3_mesgWF_rWrPtr$D_IN;
  wire ctop_app_appW3_mesgWF_rWrPtr$EN;

  // register ctop_app_appW3_mesgWtCount
  reg [31 : 0] ctop_app_appW3_mesgWtCount;
  wire [31 : 0] ctop_app_appW3_mesgWtCount$D_IN;
  wire ctop_app_appW3_mesgWtCount$EN;

  // register ctop_app_appW3_rdSerAddr
  reg [31 : 0] ctop_app_appW3_rdSerAddr;
  wire [31 : 0] ctop_app_appW3_rdSerAddr$D_IN;
  wire ctop_app_appW3_rdSerAddr$EN;

  // register ctop_app_appW3_rdSerEmpty
  reg ctop_app_appW3_rdSerEmpty;
  wire ctop_app_appW3_rdSerEmpty$D_IN, ctop_app_appW3_rdSerEmpty$EN;

  // register ctop_app_appW3_rdSerMeta
  reg [31 : 0] ctop_app_appW3_rdSerMeta;
  wire [31 : 0] ctop_app_appW3_rdSerMeta$D_IN;
  wire ctop_app_appW3_rdSerMeta$EN;

  // register ctop_app_appW3_rdSerPos
  reg [1 : 0] ctop_app_appW3_rdSerPos;
  wire [1 : 0] ctop_app_appW3_rdSerPos$D_IN;
  wire ctop_app_appW3_rdSerPos$EN;

  // register ctop_app_appW3_rdSerStage
  reg [31 : 0] ctop_app_appW3_rdSerStage;
  wire [31 : 0] ctop_app_appW3_rdSerStage$D_IN;
  wire ctop_app_appW3_rdSerStage$EN;

  // register ctop_app_appW3_rdSerStage_1
  reg [31 : 0] ctop_app_appW3_rdSerStage_1;
  wire [31 : 0] ctop_app_appW3_rdSerStage_1$D_IN;
  wire ctop_app_appW3_rdSerStage_1$EN;

  // register ctop_app_appW3_rdSerStage_2
  reg [31 : 0] ctop_app_appW3_rdSerStage_2;
  wire [31 : 0] ctop_app_appW3_rdSerStage_2$D_IN;
  wire ctop_app_appW3_rdSerStage_2$EN;

  // register ctop_app_appW3_rdSerStage_3
  reg [31 : 0] ctop_app_appW3_rdSerStage_3;
  wire [31 : 0] ctop_app_appW3_rdSerStage_3$D_IN;
  wire ctop_app_appW3_rdSerStage_3$EN;

  // register ctop_app_appW3_rdSerUnroll
  reg [15 : 0] ctop_app_appW3_rdSerUnroll;
  wire [15 : 0] ctop_app_appW3_rdSerUnroll$D_IN;
  wire ctop_app_appW3_rdSerUnroll$EN;

  // register ctop_app_appW3_rdSyncWord
  reg ctop_app_appW3_rdSyncWord;
  reg ctop_app_appW3_rdSyncWord$D_IN;
  wire ctop_app_appW3_rdSyncWord$EN;

  // register ctop_app_appW3_readMeta
  reg [31 : 0] ctop_app_appW3_readMeta;
  wire [31 : 0] ctop_app_appW3_readMeta$D_IN;
  wire ctop_app_appW3_readMeta$EN;

  // register ctop_app_appW3_tog50
  reg ctop_app_appW3_tog50;
  wire ctop_app_appW3_tog50$D_IN, ctop_app_appW3_tog50$EN;

  // register ctop_app_appW3_unrollCnt
  reg [15 : 0] ctop_app_appW3_unrollCnt;
  wire [15 : 0] ctop_app_appW3_unrollCnt$D_IN;
  wire ctop_app_appW3_unrollCnt$EN;

  // register ctop_app_appW3_wci_cEdge
  reg [2 : 0] ctop_app_appW3_wci_cEdge;
  wire [2 : 0] ctop_app_appW3_wci_cEdge$D_IN;
  wire ctop_app_appW3_wci_cEdge$EN;

  // register ctop_app_appW3_wci_cState
  reg [2 : 0] ctop_app_appW3_wci_cState;
  wire [2 : 0] ctop_app_appW3_wci_cState$D_IN;
  wire ctop_app_appW3_wci_cState$EN;

  // register ctop_app_appW3_wci_ctlAckReg
  reg ctop_app_appW3_wci_ctlAckReg;
  wire ctop_app_appW3_wci_ctlAckReg$D_IN, ctop_app_appW3_wci_ctlAckReg$EN;

  // register ctop_app_appW3_wci_ctlOpActive
  reg ctop_app_appW3_wci_ctlOpActive;
  wire ctop_app_appW3_wci_ctlOpActive$D_IN, ctop_app_appW3_wci_ctlOpActive$EN;

  // register ctop_app_appW3_wci_illegalEdge
  reg ctop_app_appW3_wci_illegalEdge;
  wire ctop_app_appW3_wci_illegalEdge$D_IN, ctop_app_appW3_wci_illegalEdge$EN;

  // register ctop_app_appW3_wci_nState
  reg [2 : 0] ctop_app_appW3_wci_nState;
  reg [2 : 0] ctop_app_appW3_wci_nState$D_IN;
  wire ctop_app_appW3_wci_nState$EN;

  // register ctop_app_appW3_wci_reqF_countReg
  reg [1 : 0] ctop_app_appW3_wci_reqF_countReg;
  wire [1 : 0] ctop_app_appW3_wci_reqF_countReg$D_IN;
  wire ctop_app_appW3_wci_reqF_countReg$EN;

  // register ctop_app_appW3_wci_respF_c_r
  reg [1 : 0] ctop_app_appW3_wci_respF_c_r;
  wire [1 : 0] ctop_app_appW3_wci_respF_c_r$D_IN;
  wire ctop_app_appW3_wci_respF_c_r$EN;

  // register ctop_app_appW3_wci_respF_q_0
  reg [33 : 0] ctop_app_appW3_wci_respF_q_0;
  reg [33 : 0] ctop_app_appW3_wci_respF_q_0$D_IN;
  wire ctop_app_appW3_wci_respF_q_0$EN;

  // register ctop_app_appW3_wci_respF_q_1
  reg [33 : 0] ctop_app_appW3_wci_respF_q_1;
  reg [33 : 0] ctop_app_appW3_wci_respF_q_1$D_IN;
  wire ctop_app_appW3_wci_respF_q_1$EN;

  // register ctop_app_appW3_wci_sFlagReg
  reg ctop_app_appW3_wci_sFlagReg;
  wire ctop_app_appW3_wci_sFlagReg$D_IN, ctop_app_appW3_wci_sFlagReg$EN;

  // register ctop_app_appW3_wci_sThreadBusy_d
  reg ctop_app_appW3_wci_sThreadBusy_d;
  wire ctop_app_appW3_wci_sThreadBusy_d$D_IN,
       ctop_app_appW3_wci_sThreadBusy_d$EN;

  // register ctop_app_appW3_wmemiRdReq
  reg [31 : 0] ctop_app_appW3_wmemiRdReq;
  wire [31 : 0] ctop_app_appW3_wmemiRdReq$D_IN;
  wire ctop_app_appW3_wmemiRdReq$EN;

  // register ctop_app_appW3_wmemiRdResp1
  reg [31 : 0] ctop_app_appW3_wmemiRdResp1;
  wire [31 : 0] ctop_app_appW3_wmemiRdResp1$D_IN;
  wire ctop_app_appW3_wmemiRdResp1$EN;

  // register ctop_app_appW3_wmemiRdResp2
  reg [31 : 0] ctop_app_appW3_wmemiRdResp2;
  wire [31 : 0] ctop_app_appW3_wmemiRdResp2$D_IN;
  wire ctop_app_appW3_wmemiRdResp2$EN;

  // register ctop_app_appW3_wmemiWrReq
  reg [31 : 0] ctop_app_appW3_wmemiWrReq;
  wire [31 : 0] ctop_app_appW3_wmemiWrReq$D_IN;
  wire ctop_app_appW3_wmemiWrReq$EN;

  // register ctop_app_appW3_wmemi_busyWithMessage
  reg ctop_app_appW3_wmemi_busyWithMessage;
  wire ctop_app_appW3_wmemi_busyWithMessage$D_IN,
       ctop_app_appW3_wmemi_busyWithMessage$EN;

  // register ctop_app_appW3_wmemi_dhF_c_r
  reg [1 : 0] ctop_app_appW3_wmemi_dhF_c_r;
  wire [1 : 0] ctop_app_appW3_wmemi_dhF_c_r$D_IN;
  wire ctop_app_appW3_wmemi_dhF_c_r$EN;

  // register ctop_app_appW3_wmemi_dhF_q_0
  reg [145 : 0] ctop_app_appW3_wmemi_dhF_q_0;
  reg [145 : 0] ctop_app_appW3_wmemi_dhF_q_0$D_IN;
  wire ctop_app_appW3_wmemi_dhF_q_0$EN;

  // register ctop_app_appW3_wmemi_dhF_q_1
  reg [145 : 0] ctop_app_appW3_wmemi_dhF_q_1;
  reg [145 : 0] ctop_app_appW3_wmemi_dhF_q_1$D_IN;
  wire ctop_app_appW3_wmemi_dhF_q_1$EN;

  // register ctop_app_appW3_wmemi_errorSticky
  reg ctop_app_appW3_wmemi_errorSticky;
  wire ctop_app_appW3_wmemi_errorSticky$D_IN,
       ctop_app_appW3_wmemi_errorSticky$EN;

  // register ctop_app_appW3_wmemi_operateD
  reg ctop_app_appW3_wmemi_operateD;
  wire ctop_app_appW3_wmemi_operateD$D_IN, ctop_app_appW3_wmemi_operateD$EN;

  // register ctop_app_appW3_wmemi_peerIsReady
  reg ctop_app_appW3_wmemi_peerIsReady;
  wire ctop_app_appW3_wmemi_peerIsReady$D_IN,
       ctop_app_appW3_wmemi_peerIsReady$EN;

  // register ctop_app_appW3_wmemi_reqF_c_r
  reg [1 : 0] ctop_app_appW3_wmemi_reqF_c_r;
  wire [1 : 0] ctop_app_appW3_wmemi_reqF_c_r$D_IN;
  wire ctop_app_appW3_wmemi_reqF_c_r$EN;

  // register ctop_app_appW3_wmemi_reqF_q_0
  reg [51 : 0] ctop_app_appW3_wmemi_reqF_q_0;
  reg [51 : 0] ctop_app_appW3_wmemi_reqF_q_0$D_IN;
  wire ctop_app_appW3_wmemi_reqF_q_0$EN;

  // register ctop_app_appW3_wmemi_reqF_q_1
  reg [51 : 0] ctop_app_appW3_wmemi_reqF_q_1;
  reg [51 : 0] ctop_app_appW3_wmemi_reqF_q_1$D_IN;
  wire ctop_app_appW3_wmemi_reqF_q_1$EN;

  // register ctop_app_appW3_wmemi_statusR
  reg [7 : 0] ctop_app_appW3_wmemi_statusR;
  wire [7 : 0] ctop_app_appW3_wmemi_statusR$D_IN;
  wire ctop_app_appW3_wmemi_statusR$EN;

  // register ctop_app_appW3_wmemi_trafficSticky
  reg ctop_app_appW3_wmemi_trafficSticky;
  wire ctop_app_appW3_wmemi_trafficSticky$D_IN,
       ctop_app_appW3_wmemi_trafficSticky$EN;

  // register ctop_app_appW3_wrtSerAddr
  reg [31 : 0] ctop_app_appW3_wrtSerAddr;
  wire [31 : 0] ctop_app_appW3_wrtSerAddr$D_IN;
  wire ctop_app_appW3_wrtSerAddr$EN;

  // register ctop_app_appW3_wrtSerPos
  reg [1 : 0] ctop_app_appW3_wrtSerPos;
  wire [1 : 0] ctop_app_appW3_wrtSerPos$D_IN;
  wire ctop_app_appW3_wrtSerPos$EN;

  // register ctop_app_appW3_wrtSerStage
  reg [31 : 0] ctop_app_appW3_wrtSerStage;
  wire [31 : 0] ctop_app_appW3_wrtSerStage$D_IN;
  wire ctop_app_appW3_wrtSerStage$EN;

  // register ctop_app_appW3_wrtSerStage_1
  reg [31 : 0] ctop_app_appW3_wrtSerStage_1;
  wire [31 : 0] ctop_app_appW3_wrtSerStage_1$D_IN;
  wire ctop_app_appW3_wrtSerStage_1$EN;

  // register ctop_app_appW3_wrtSerStage_2
  reg [31 : 0] ctop_app_appW3_wrtSerStage_2;
  wire [31 : 0] ctop_app_appW3_wrtSerStage_2$D_IN;
  wire ctop_app_appW3_wrtSerStage_2$EN;

  // register ctop_app_appW3_wrtSerStage_3
  reg [31 : 0] ctop_app_appW3_wrtSerStage_3;
  wire [31 : 0] ctop_app_appW3_wrtSerStage_3$D_IN;
  wire ctop_app_appW3_wrtSerStage_3$EN;

  // register ctop_app_appW3_wrtSerUnroll
  reg [15 : 0] ctop_app_appW3_wrtSerUnroll;
  wire [15 : 0] ctop_app_appW3_wrtSerUnroll$D_IN;
  wire ctop_app_appW3_wrtSerUnroll$EN;

  // register ctop_app_appW3_wsiM_burstKind
  reg [1 : 0] ctop_app_appW3_wsiM_burstKind;
  wire [1 : 0] ctop_app_appW3_wsiM_burstKind$D_IN;
  wire ctop_app_appW3_wsiM_burstKind$EN;

  // register ctop_app_appW3_wsiM_errorSticky
  reg ctop_app_appW3_wsiM_errorSticky;
  wire ctop_app_appW3_wsiM_errorSticky$D_IN,
       ctop_app_appW3_wsiM_errorSticky$EN;

  // register ctop_app_appW3_wsiM_iMesgCount
  reg [31 : 0] ctop_app_appW3_wsiM_iMesgCount;
  wire [31 : 0] ctop_app_appW3_wsiM_iMesgCount$D_IN;
  wire ctop_app_appW3_wsiM_iMesgCount$EN;

  // register ctop_app_appW3_wsiM_operateD
  reg ctop_app_appW3_wsiM_operateD;
  wire ctop_app_appW3_wsiM_operateD$D_IN, ctop_app_appW3_wsiM_operateD$EN;

  // register ctop_app_appW3_wsiM_pMesgCount
  reg [31 : 0] ctop_app_appW3_wsiM_pMesgCount;
  wire [31 : 0] ctop_app_appW3_wsiM_pMesgCount$D_IN;
  wire ctop_app_appW3_wsiM_pMesgCount$EN;

  // register ctop_app_appW3_wsiM_peerIsReady
  reg ctop_app_appW3_wsiM_peerIsReady;
  wire ctop_app_appW3_wsiM_peerIsReady$D_IN,
       ctop_app_appW3_wsiM_peerIsReady$EN;

  // register ctop_app_appW3_wsiM_reqFifo_c_r
  reg [1 : 0] ctop_app_appW3_wsiM_reqFifo_c_r;
  wire [1 : 0] ctop_app_appW3_wsiM_reqFifo_c_r$D_IN;
  wire ctop_app_appW3_wsiM_reqFifo_c_r$EN;

  // register ctop_app_appW3_wsiM_reqFifo_q_0
  reg [60 : 0] ctop_app_appW3_wsiM_reqFifo_q_0;
  reg [60 : 0] ctop_app_appW3_wsiM_reqFifo_q_0$D_IN;
  wire ctop_app_appW3_wsiM_reqFifo_q_0$EN;

  // register ctop_app_appW3_wsiM_reqFifo_q_1
  reg [60 : 0] ctop_app_appW3_wsiM_reqFifo_q_1;
  reg [60 : 0] ctop_app_appW3_wsiM_reqFifo_q_1$D_IN;
  wire ctop_app_appW3_wsiM_reqFifo_q_1$EN;

  // register ctop_app_appW3_wsiM_sThreadBusy_d
  reg ctop_app_appW3_wsiM_sThreadBusy_d;
  wire ctop_app_appW3_wsiM_sThreadBusy_d$D_IN,
       ctop_app_appW3_wsiM_sThreadBusy_d$EN;

  // register ctop_app_appW3_wsiM_statusR
  reg [7 : 0] ctop_app_appW3_wsiM_statusR;
  wire [7 : 0] ctop_app_appW3_wsiM_statusR$D_IN;
  wire ctop_app_appW3_wsiM_statusR$EN;

  // register ctop_app_appW3_wsiM_tBusyCount
  reg [31 : 0] ctop_app_appW3_wsiM_tBusyCount;
  wire [31 : 0] ctop_app_appW3_wsiM_tBusyCount$D_IN;
  wire ctop_app_appW3_wsiM_tBusyCount$EN;

  // register ctop_app_appW3_wsiM_trafficSticky
  reg ctop_app_appW3_wsiM_trafficSticky;
  wire ctop_app_appW3_wsiM_trafficSticky$D_IN,
       ctop_app_appW3_wsiM_trafficSticky$EN;

  // register ctop_app_appW3_wsiS_burstKind
  reg [1 : 0] ctop_app_appW3_wsiS_burstKind;
  wire [1 : 0] ctop_app_appW3_wsiS_burstKind$D_IN;
  wire ctop_app_appW3_wsiS_burstKind$EN;

  // register ctop_app_appW3_wsiS_errorSticky
  reg ctop_app_appW3_wsiS_errorSticky;
  wire ctop_app_appW3_wsiS_errorSticky$D_IN,
       ctop_app_appW3_wsiS_errorSticky$EN;

  // register ctop_app_appW3_wsiS_iMesgCount
  reg [31 : 0] ctop_app_appW3_wsiS_iMesgCount;
  wire [31 : 0] ctop_app_appW3_wsiS_iMesgCount$D_IN;
  wire ctop_app_appW3_wsiS_iMesgCount$EN;

  // register ctop_app_appW3_wsiS_mesgWordLength
  reg [11 : 0] ctop_app_appW3_wsiS_mesgWordLength;
  wire [11 : 0] ctop_app_appW3_wsiS_mesgWordLength$D_IN;
  wire ctop_app_appW3_wsiS_mesgWordLength$EN;

  // register ctop_app_appW3_wsiS_operateD
  reg ctop_app_appW3_wsiS_operateD;
  wire ctop_app_appW3_wsiS_operateD$D_IN, ctop_app_appW3_wsiS_operateD$EN;

  // register ctop_app_appW3_wsiS_pMesgCount
  reg [31 : 0] ctop_app_appW3_wsiS_pMesgCount;
  wire [31 : 0] ctop_app_appW3_wsiS_pMesgCount$D_IN;
  wire ctop_app_appW3_wsiS_pMesgCount$EN;

  // register ctop_app_appW3_wsiS_peerIsReady
  reg ctop_app_appW3_wsiS_peerIsReady;
  wire ctop_app_appW3_wsiS_peerIsReady$D_IN,
       ctop_app_appW3_wsiS_peerIsReady$EN;

  // register ctop_app_appW3_wsiS_reqFifo_countReg
  reg [1 : 0] ctop_app_appW3_wsiS_reqFifo_countReg;
  wire [1 : 0] ctop_app_appW3_wsiS_reqFifo_countReg$D_IN;
  wire ctop_app_appW3_wsiS_reqFifo_countReg$EN;

  // register ctop_app_appW3_wsiS_reqFifo_levelsValid
  reg ctop_app_appW3_wsiS_reqFifo_levelsValid;
  wire ctop_app_appW3_wsiS_reqFifo_levelsValid$D_IN,
       ctop_app_appW3_wsiS_reqFifo_levelsValid$EN;

  // register ctop_app_appW3_wsiS_statusR
  reg [7 : 0] ctop_app_appW3_wsiS_statusR;
  wire [7 : 0] ctop_app_appW3_wsiS_statusR$D_IN;
  wire ctop_app_appW3_wsiS_statusR$EN;

  // register ctop_app_appW3_wsiS_tBusyCount
  reg [31 : 0] ctop_app_appW3_wsiS_tBusyCount;
  wire [31 : 0] ctop_app_appW3_wsiS_tBusyCount$D_IN;
  wire ctop_app_appW3_wsiS_tBusyCount$EN;

  // register ctop_app_appW3_wsiS_trafficSticky
  reg ctop_app_appW3_wsiS_trafficSticky;
  wire ctop_app_appW3_wsiS_trafficSticky$D_IN,
       ctop_app_appW3_wsiS_trafficSticky$EN;

  // register ctop_app_appW3_wsiS_wordCount
  reg [11 : 0] ctop_app_appW3_wsiS_wordCount;
  wire [11 : 0] ctop_app_appW3_wsiS_wordCount$D_IN;
  wire ctop_app_appW3_wsiS_wordCount$EN;

  // register ctop_app_appW4_abortCount
  reg [31 : 0] ctop_app_appW4_abortCount;
  wire [31 : 0] ctop_app_appW4_abortCount$D_IN;
  wire ctop_app_appW4_abortCount$EN;

  // register ctop_app_appW4_doAbort
  reg ctop_app_appW4_doAbort;
  wire ctop_app_appW4_doAbort$D_IN, ctop_app_appW4_doAbort$EN;

  // register ctop_app_appW4_endOfMessage
  reg ctop_app_appW4_endOfMessage;
  wire ctop_app_appW4_endOfMessage$D_IN, ctop_app_appW4_endOfMessage$EN;

  // register ctop_app_appW4_errCount
  reg [31 : 0] ctop_app_appW4_errCount;
  wire [31 : 0] ctop_app_appW4_errCount$D_IN;
  wire ctop_app_appW4_errCount$EN;

  // register ctop_app_appW4_fabRespCredit_value
  reg [11 : 0] ctop_app_appW4_fabRespCredit_value;
  wire [11 : 0] ctop_app_appW4_fabRespCredit_value$D_IN;
  wire ctop_app_appW4_fabRespCredit_value$EN;

  // register ctop_app_appW4_fabWordsCurReq
  reg [13 : 0] ctop_app_appW4_fabWordsCurReq;
  wire [13 : 0] ctop_app_appW4_fabWordsCurReq$D_IN;
  wire ctop_app_appW4_fabWordsCurReq$EN;

  // register ctop_app_appW4_fabWordsRemain
  reg [13 : 0] ctop_app_appW4_fabWordsRemain;
  wire [13 : 0] ctop_app_appW4_fabWordsRemain$D_IN;
  wire ctop_app_appW4_fabWordsRemain$EN;

  // register ctop_app_appW4_firstMsgReq
  reg ctop_app_appW4_firstMsgReq;
  wire ctop_app_appW4_firstMsgReq$D_IN, ctop_app_appW4_firstMsgReq$EN;

  // register ctop_app_appW4_impreciseBurst
  reg ctop_app_appW4_impreciseBurst;
  wire ctop_app_appW4_impreciseBurst$D_IN, ctop_app_appW4_impreciseBurst$EN;

  // register ctop_app_appW4_lastMesg
  reg [31 : 0] ctop_app_appW4_lastMesg;
  wire [31 : 0] ctop_app_appW4_lastMesg$D_IN;
  wire ctop_app_appW4_lastMesg$EN;

  // register ctop_app_appW4_mesgCount
  reg [31 : 0] ctop_app_appW4_mesgCount;
  reg [31 : 0] ctop_app_appW4_mesgCount$D_IN;
  wire ctop_app_appW4_mesgCount$EN;

  // register ctop_app_appW4_mesgLength
  reg [14 : 0] ctop_app_appW4_mesgLength;
  reg [14 : 0] ctop_app_appW4_mesgLength$D_IN;
  wire ctop_app_appW4_mesgLength$EN;

  // register ctop_app_appW4_mesgLengthSoFar
  reg [13 : 0] ctop_app_appW4_mesgLengthSoFar;
  wire [13 : 0] ctop_app_appW4_mesgLengthSoFar$D_IN;
  wire ctop_app_appW4_mesgLengthSoFar$EN;

  // register ctop_app_appW4_mesgPreRequest
  reg ctop_app_appW4_mesgPreRequest;
  wire ctop_app_appW4_mesgPreRequest$D_IN, ctop_app_appW4_mesgPreRequest$EN;

  // register ctop_app_appW4_mesgReqAddr
  reg [13 : 0] ctop_app_appW4_mesgReqAddr;
  wire [13 : 0] ctop_app_appW4_mesgReqAddr$D_IN;
  wire ctop_app_appW4_mesgReqAddr$EN;

  // register ctop_app_appW4_mesgReqOK
  reg ctop_app_appW4_mesgReqOK;
  wire ctop_app_appW4_mesgReqOK$D_IN, ctop_app_appW4_mesgReqOK$EN;

  // register ctop_app_appW4_mesgReqValid
  reg ctop_app_appW4_mesgReqValid;
  wire ctop_app_appW4_mesgReqValid$D_IN, ctop_app_appW4_mesgReqValid$EN;

  // register ctop_app_appW4_opcode
  reg [8 : 0] ctop_app_appW4_opcode;
  wire [8 : 0] ctop_app_appW4_opcode$D_IN;
  wire ctop_app_appW4_opcode$EN;

  // register ctop_app_appW4_preciseBurst
  reg ctop_app_appW4_preciseBurst;
  wire ctop_app_appW4_preciseBurst$D_IN, ctop_app_appW4_preciseBurst$EN;

  // register ctop_app_appW4_readyToPush
  reg ctop_app_appW4_readyToPush;
  wire ctop_app_appW4_readyToPush$D_IN, ctop_app_appW4_readyToPush$EN;

  // register ctop_app_appW4_readyToRequest
  reg ctop_app_appW4_readyToRequest;
  wire ctop_app_appW4_readyToRequest$D_IN, ctop_app_appW4_readyToRequest$EN;

  // register ctop_app_appW4_respF_rCache
  reg [73 : 0] ctop_app_appW4_respF_rCache;
  wire [73 : 0] ctop_app_appW4_respF_rCache$D_IN;
  wire ctop_app_appW4_respF_rCache$EN;

  // register ctop_app_appW4_respF_rRdPtr
  reg [11 : 0] ctop_app_appW4_respF_rRdPtr;
  wire [11 : 0] ctop_app_appW4_respF_rRdPtr$D_IN;
  wire ctop_app_appW4_respF_rRdPtr$EN;

  // register ctop_app_appW4_respF_rWrPtr
  reg [11 : 0] ctop_app_appW4_respF_rWrPtr;
  wire [11 : 0] ctop_app_appW4_respF_rWrPtr$D_IN;
  wire ctop_app_appW4_respF_rWrPtr$EN;

  // register ctop_app_appW4_smaCtrl
  reg [31 : 0] ctop_app_appW4_smaCtrl;
  wire [31 : 0] ctop_app_appW4_smaCtrl$D_IN;
  wire ctop_app_appW4_smaCtrl$EN;

  // register ctop_app_appW4_thisMesg
  reg [31 : 0] ctop_app_appW4_thisMesg;
  reg [31 : 0] ctop_app_appW4_thisMesg$D_IN;
  wire ctop_app_appW4_thisMesg$EN;

  // register ctop_app_appW4_unrollCnt
  reg [15 : 0] ctop_app_appW4_unrollCnt;
  wire [15 : 0] ctop_app_appW4_unrollCnt$D_IN;
  wire ctop_app_appW4_unrollCnt$EN;

  // register ctop_app_appW4_valExpect
  reg [31 : 0] ctop_app_appW4_valExpect;
  wire [31 : 0] ctop_app_appW4_valExpect$D_IN;
  wire ctop_app_appW4_valExpect$EN;

  // register ctop_app_appW4_wci_cEdge
  reg [2 : 0] ctop_app_appW4_wci_cEdge;
  wire [2 : 0] ctop_app_appW4_wci_cEdge$D_IN;
  wire ctop_app_appW4_wci_cEdge$EN;

  // register ctop_app_appW4_wci_cState
  reg [2 : 0] ctop_app_appW4_wci_cState;
  wire [2 : 0] ctop_app_appW4_wci_cState$D_IN;
  wire ctop_app_appW4_wci_cState$EN;

  // register ctop_app_appW4_wci_ctlAckReg
  reg ctop_app_appW4_wci_ctlAckReg;
  wire ctop_app_appW4_wci_ctlAckReg$D_IN, ctop_app_appW4_wci_ctlAckReg$EN;

  // register ctop_app_appW4_wci_ctlOpActive
  reg ctop_app_appW4_wci_ctlOpActive;
  wire ctop_app_appW4_wci_ctlOpActive$D_IN, ctop_app_appW4_wci_ctlOpActive$EN;

  // register ctop_app_appW4_wci_illegalEdge
  reg ctop_app_appW4_wci_illegalEdge;
  wire ctop_app_appW4_wci_illegalEdge$D_IN, ctop_app_appW4_wci_illegalEdge$EN;

  // register ctop_app_appW4_wci_nState
  reg [2 : 0] ctop_app_appW4_wci_nState;
  reg [2 : 0] ctop_app_appW4_wci_nState$D_IN;
  wire ctop_app_appW4_wci_nState$EN;

  // register ctop_app_appW4_wci_reqF_countReg
  reg [1 : 0] ctop_app_appW4_wci_reqF_countReg;
  wire [1 : 0] ctop_app_appW4_wci_reqF_countReg$D_IN;
  wire ctop_app_appW4_wci_reqF_countReg$EN;

  // register ctop_app_appW4_wci_respF_c_r
  reg [1 : 0] ctop_app_appW4_wci_respF_c_r;
  wire [1 : 0] ctop_app_appW4_wci_respF_c_r$D_IN;
  wire ctop_app_appW4_wci_respF_c_r$EN;

  // register ctop_app_appW4_wci_respF_q_0
  reg [33 : 0] ctop_app_appW4_wci_respF_q_0;
  reg [33 : 0] ctop_app_appW4_wci_respF_q_0$D_IN;
  wire ctop_app_appW4_wci_respF_q_0$EN;

  // register ctop_app_appW4_wci_respF_q_1
  reg [33 : 0] ctop_app_appW4_wci_respF_q_1;
  reg [33 : 0] ctop_app_appW4_wci_respF_q_1$D_IN;
  wire ctop_app_appW4_wci_respF_q_1$EN;

  // register ctop_app_appW4_wci_sFlagReg
  reg ctop_app_appW4_wci_sFlagReg;
  wire ctop_app_appW4_wci_sFlagReg$D_IN, ctop_app_appW4_wci_sFlagReg$EN;

  // register ctop_app_appW4_wci_sThreadBusy_d
  reg ctop_app_appW4_wci_sThreadBusy_d;
  wire ctop_app_appW4_wci_sThreadBusy_d$D_IN,
       ctop_app_appW4_wci_sThreadBusy_d$EN;

  // register ctop_app_appW4_wmi_busyWithMessage
  reg ctop_app_appW4_wmi_busyWithMessage;
  wire ctop_app_appW4_wmi_busyWithMessage$D_IN,
       ctop_app_appW4_wmi_busyWithMessage$EN;

  // register ctop_app_appW4_wmi_dhF_c_r
  reg [1 : 0] ctop_app_appW4_wmi_dhF_c_r;
  wire [1 : 0] ctop_app_appW4_wmi_dhF_c_r$D_IN;
  wire ctop_app_appW4_wmi_dhF_c_r$EN;

  // register ctop_app_appW4_wmi_dhF_q_0
  reg [37 : 0] ctop_app_appW4_wmi_dhF_q_0;
  reg [37 : 0] ctop_app_appW4_wmi_dhF_q_0$D_IN;
  wire ctop_app_appW4_wmi_dhF_q_0$EN;

  // register ctop_app_appW4_wmi_dhF_q_1
  reg [37 : 0] ctop_app_appW4_wmi_dhF_q_1;
  reg [37 : 0] ctop_app_appW4_wmi_dhF_q_1$D_IN;
  wire ctop_app_appW4_wmi_dhF_q_1$EN;

  // register ctop_app_appW4_wmi_errorSticky
  reg ctop_app_appW4_wmi_errorSticky;
  wire ctop_app_appW4_wmi_errorSticky$D_IN, ctop_app_appW4_wmi_errorSticky$EN;

  // register ctop_app_appW4_wmi_mFlagF_c_r
  reg [1 : 0] ctop_app_appW4_wmi_mFlagF_c_r;
  wire [1 : 0] ctop_app_appW4_wmi_mFlagF_c_r$D_IN;
  wire ctop_app_appW4_wmi_mFlagF_c_r$EN;

  // register ctop_app_appW4_wmi_mFlagF_q_0
  reg [31 : 0] ctop_app_appW4_wmi_mFlagF_q_0;
  reg [31 : 0] ctop_app_appW4_wmi_mFlagF_q_0$D_IN;
  wire ctop_app_appW4_wmi_mFlagF_q_0$EN;

  // register ctop_app_appW4_wmi_mFlagF_q_1
  reg [31 : 0] ctop_app_appW4_wmi_mFlagF_q_1;
  reg [31 : 0] ctop_app_appW4_wmi_mFlagF_q_1$D_IN;
  wire ctop_app_appW4_wmi_mFlagF_q_1$EN;

  // register ctop_app_appW4_wmi_operateD
  reg ctop_app_appW4_wmi_operateD;
  wire ctop_app_appW4_wmi_operateD$D_IN, ctop_app_appW4_wmi_operateD$EN;

  // register ctop_app_appW4_wmi_peerIsReady
  reg ctop_app_appW4_wmi_peerIsReady;
  wire ctop_app_appW4_wmi_peerIsReady$D_IN, ctop_app_appW4_wmi_peerIsReady$EN;

  // register ctop_app_appW4_wmi_reqF_c_r
  reg [1 : 0] ctop_app_appW4_wmi_reqF_c_r;
  wire [1 : 0] ctop_app_appW4_wmi_reqF_c_r$D_IN;
  wire ctop_app_appW4_wmi_reqF_c_r$EN;

  // register ctop_app_appW4_wmi_reqF_q_0
  reg [31 : 0] ctop_app_appW4_wmi_reqF_q_0;
  reg [31 : 0] ctop_app_appW4_wmi_reqF_q_0$D_IN;
  wire ctop_app_appW4_wmi_reqF_q_0$EN;

  // register ctop_app_appW4_wmi_reqF_q_1
  reg [31 : 0] ctop_app_appW4_wmi_reqF_q_1;
  reg [31 : 0] ctop_app_appW4_wmi_reqF_q_1$D_IN;
  wire ctop_app_appW4_wmi_reqF_q_1$EN;

  // register ctop_app_appW4_wmi_sDataThreadBusy_d
  reg ctop_app_appW4_wmi_sDataThreadBusy_d;
  wire ctop_app_appW4_wmi_sDataThreadBusy_d$D_IN,
       ctop_app_appW4_wmi_sDataThreadBusy_d$EN;

  // register ctop_app_appW4_wmi_sFlagReg
  reg [31 : 0] ctop_app_appW4_wmi_sFlagReg;
  wire [31 : 0] ctop_app_appW4_wmi_sFlagReg$D_IN;
  wire ctop_app_appW4_wmi_sFlagReg$EN;

  // register ctop_app_appW4_wmi_sThreadBusy_d
  reg ctop_app_appW4_wmi_sThreadBusy_d;
  wire ctop_app_appW4_wmi_sThreadBusy_d$D_IN,
       ctop_app_appW4_wmi_sThreadBusy_d$EN;

  // register ctop_app_appW4_wmi_statusR
  reg [7 : 0] ctop_app_appW4_wmi_statusR;
  wire [7 : 0] ctop_app_appW4_wmi_statusR$D_IN;
  wire ctop_app_appW4_wmi_statusR$EN;

  // register ctop_app_appW4_wmi_trafficSticky
  reg ctop_app_appW4_wmi_trafficSticky;
  wire ctop_app_appW4_wmi_trafficSticky$D_IN,
       ctop_app_appW4_wmi_trafficSticky$EN;

  // register ctop_app_appW4_wsiM_burstKind
  reg [1 : 0] ctop_app_appW4_wsiM_burstKind;
  wire [1 : 0] ctop_app_appW4_wsiM_burstKind$D_IN;
  wire ctop_app_appW4_wsiM_burstKind$EN;

  // register ctop_app_appW4_wsiM_errorSticky
  reg ctop_app_appW4_wsiM_errorSticky;
  wire ctop_app_appW4_wsiM_errorSticky$D_IN,
       ctop_app_appW4_wsiM_errorSticky$EN;

  // register ctop_app_appW4_wsiM_iMesgCount
  reg [31 : 0] ctop_app_appW4_wsiM_iMesgCount;
  wire [31 : 0] ctop_app_appW4_wsiM_iMesgCount$D_IN;
  wire ctop_app_appW4_wsiM_iMesgCount$EN;

  // register ctop_app_appW4_wsiM_operateD
  reg ctop_app_appW4_wsiM_operateD;
  wire ctop_app_appW4_wsiM_operateD$D_IN, ctop_app_appW4_wsiM_operateD$EN;

  // register ctop_app_appW4_wsiM_pMesgCount
  reg [31 : 0] ctop_app_appW4_wsiM_pMesgCount;
  wire [31 : 0] ctop_app_appW4_wsiM_pMesgCount$D_IN;
  wire ctop_app_appW4_wsiM_pMesgCount$EN;

  // register ctop_app_appW4_wsiM_peerIsReady
  reg ctop_app_appW4_wsiM_peerIsReady;
  wire ctop_app_appW4_wsiM_peerIsReady$D_IN,
       ctop_app_appW4_wsiM_peerIsReady$EN;

  // register ctop_app_appW4_wsiM_reqFifo_c_r
  reg [1 : 0] ctop_app_appW4_wsiM_reqFifo_c_r;
  wire [1 : 0] ctop_app_appW4_wsiM_reqFifo_c_r$D_IN;
  wire ctop_app_appW4_wsiM_reqFifo_c_r$EN;

  // register ctop_app_appW4_wsiM_reqFifo_q_0
  reg [60 : 0] ctop_app_appW4_wsiM_reqFifo_q_0;
  reg [60 : 0] ctop_app_appW4_wsiM_reqFifo_q_0$D_IN;
  wire ctop_app_appW4_wsiM_reqFifo_q_0$EN;

  // register ctop_app_appW4_wsiM_reqFifo_q_1
  reg [60 : 0] ctop_app_appW4_wsiM_reqFifo_q_1;
  reg [60 : 0] ctop_app_appW4_wsiM_reqFifo_q_1$D_IN;
  wire ctop_app_appW4_wsiM_reqFifo_q_1$EN;

  // register ctop_app_appW4_wsiM_sThreadBusy_d
  reg ctop_app_appW4_wsiM_sThreadBusy_d;
  wire ctop_app_appW4_wsiM_sThreadBusy_d$D_IN,
       ctop_app_appW4_wsiM_sThreadBusy_d$EN;

  // register ctop_app_appW4_wsiM_statusR
  reg [7 : 0] ctop_app_appW4_wsiM_statusR;
  wire [7 : 0] ctop_app_appW4_wsiM_statusR$D_IN;
  wire ctop_app_appW4_wsiM_statusR$EN;

  // register ctop_app_appW4_wsiM_tBusyCount
  reg [31 : 0] ctop_app_appW4_wsiM_tBusyCount;
  wire [31 : 0] ctop_app_appW4_wsiM_tBusyCount$D_IN;
  wire ctop_app_appW4_wsiM_tBusyCount$EN;

  // register ctop_app_appW4_wsiM_trafficSticky
  reg ctop_app_appW4_wsiM_trafficSticky;
  wire ctop_app_appW4_wsiM_trafficSticky$D_IN,
       ctop_app_appW4_wsiM_trafficSticky$EN;

  // register ctop_app_appW4_wsiS_burstKind
  reg [1 : 0] ctop_app_appW4_wsiS_burstKind;
  wire [1 : 0] ctop_app_appW4_wsiS_burstKind$D_IN;
  wire ctop_app_appW4_wsiS_burstKind$EN;

  // register ctop_app_appW4_wsiS_errorSticky
  reg ctop_app_appW4_wsiS_errorSticky;
  wire ctop_app_appW4_wsiS_errorSticky$D_IN,
       ctop_app_appW4_wsiS_errorSticky$EN;

  // register ctop_app_appW4_wsiS_iMesgCount
  reg [31 : 0] ctop_app_appW4_wsiS_iMesgCount;
  wire [31 : 0] ctop_app_appW4_wsiS_iMesgCount$D_IN;
  wire ctop_app_appW4_wsiS_iMesgCount$EN;

  // register ctop_app_appW4_wsiS_mesgWordLength
  reg [11 : 0] ctop_app_appW4_wsiS_mesgWordLength;
  wire [11 : 0] ctop_app_appW4_wsiS_mesgWordLength$D_IN;
  wire ctop_app_appW4_wsiS_mesgWordLength$EN;

  // register ctop_app_appW4_wsiS_operateD
  reg ctop_app_appW4_wsiS_operateD;
  wire ctop_app_appW4_wsiS_operateD$D_IN, ctop_app_appW4_wsiS_operateD$EN;

  // register ctop_app_appW4_wsiS_pMesgCount
  reg [31 : 0] ctop_app_appW4_wsiS_pMesgCount;
  wire [31 : 0] ctop_app_appW4_wsiS_pMesgCount$D_IN;
  wire ctop_app_appW4_wsiS_pMesgCount$EN;

  // register ctop_app_appW4_wsiS_peerIsReady
  reg ctop_app_appW4_wsiS_peerIsReady;
  wire ctop_app_appW4_wsiS_peerIsReady$D_IN,
       ctop_app_appW4_wsiS_peerIsReady$EN;

  // register ctop_app_appW4_wsiS_reqFifo_countReg
  reg [1 : 0] ctop_app_appW4_wsiS_reqFifo_countReg;
  wire [1 : 0] ctop_app_appW4_wsiS_reqFifo_countReg$D_IN;
  wire ctop_app_appW4_wsiS_reqFifo_countReg$EN;

  // register ctop_app_appW4_wsiS_reqFifo_levelsValid
  reg ctop_app_appW4_wsiS_reqFifo_levelsValid;
  wire ctop_app_appW4_wsiS_reqFifo_levelsValid$D_IN,
       ctop_app_appW4_wsiS_reqFifo_levelsValid$EN;

  // register ctop_app_appW4_wsiS_statusR
  reg [7 : 0] ctop_app_appW4_wsiS_statusR;
  wire [7 : 0] ctop_app_appW4_wsiS_statusR$D_IN;
  wire ctop_app_appW4_wsiS_statusR$EN;

  // register ctop_app_appW4_wsiS_tBusyCount
  reg [31 : 0] ctop_app_appW4_wsiS_tBusyCount;
  wire [31 : 0] ctop_app_appW4_wsiS_tBusyCount$D_IN;
  wire ctop_app_appW4_wsiS_tBusyCount$EN;

  // register ctop_app_appW4_wsiS_trafficSticky
  reg ctop_app_appW4_wsiS_trafficSticky;
  wire ctop_app_appW4_wsiS_trafficSticky$D_IN,
       ctop_app_appW4_wsiS_trafficSticky$EN;

  // register ctop_app_appW4_wsiS_wordCount
  reg [11 : 0] ctop_app_appW4_wsiS_wordCount;
  wire [11 : 0] ctop_app_appW4_wsiS_wordCount$D_IN;
  wire ctop_app_appW4_wsiS_wordCount$EN;

  // register ctop_app_appW4_wsiWordsRemain
  reg [11 : 0] ctop_app_appW4_wsiWordsRemain;
  wire [11 : 0] ctop_app_appW4_wsiWordsRemain$D_IN;
  wire ctop_app_appW4_wsiWordsRemain$EN;

  // register ctop_app_appW4_zeroLengthMesg
  reg ctop_app_appW4_zeroLengthMesg;
  wire ctop_app_appW4_zeroLengthMesg$D_IN, ctop_app_appW4_zeroLengthMesg$EN;

  // register ctop_inf_chompCnt
  reg [7 : 0] ctop_inf_chompCnt;
  wire [7 : 0] ctop_inf_chompCnt$D_IN;
  wire ctop_inf_chompCnt$EN;

  // register ctop_inf_dp0_bml_crdBuf_modulus
  reg [15 : 0] ctop_inf_dp0_bml_crdBuf_modulus;
  wire [15 : 0] ctop_inf_dp0_bml_crdBuf_modulus$D_IN;
  wire ctop_inf_dp0_bml_crdBuf_modulus$EN;

  // register ctop_inf_dp0_bml_crdBuf_value
  reg [15 : 0] ctop_inf_dp0_bml_crdBuf_value;
  wire [15 : 0] ctop_inf_dp0_bml_crdBuf_value$D_IN;
  wire ctop_inf_dp0_bml_crdBuf_value$EN;

  // register ctop_inf_dp0_bml_fabAvail
  reg ctop_inf_dp0_bml_fabAvail;
  wire ctop_inf_dp0_bml_fabAvail$D_IN, ctop_inf_dp0_bml_fabAvail$EN;

  // register ctop_inf_dp0_bml_fabBuf_modulus
  reg [15 : 0] ctop_inf_dp0_bml_fabBuf_modulus;
  wire [15 : 0] ctop_inf_dp0_bml_fabBuf_modulus$D_IN;
  wire ctop_inf_dp0_bml_fabBuf_modulus$EN;

  // register ctop_inf_dp0_bml_fabBuf_value
  reg [15 : 0] ctop_inf_dp0_bml_fabBuf_value;
  wire [15 : 0] ctop_inf_dp0_bml_fabBuf_value$D_IN;
  wire ctop_inf_dp0_bml_fabBuf_value$EN;

  // register ctop_inf_dp0_bml_fabBufsAvail
  reg [15 : 0] ctop_inf_dp0_bml_fabBufsAvail;
  wire [15 : 0] ctop_inf_dp0_bml_fabBufsAvail$D_IN;
  wire ctop_inf_dp0_bml_fabBufsAvail$EN;

  // register ctop_inf_dp0_bml_fabDone
  reg ctop_inf_dp0_bml_fabDone;
  wire ctop_inf_dp0_bml_fabDone$D_IN, ctop_inf_dp0_bml_fabDone$EN;

  // register ctop_inf_dp0_bml_fabFlowAddr
  reg [31 : 0] ctop_inf_dp0_bml_fabFlowAddr;
  reg [31 : 0] ctop_inf_dp0_bml_fabFlowAddr$D_IN;
  wire ctop_inf_dp0_bml_fabFlowAddr$EN;

  // register ctop_inf_dp0_bml_fabFlowBase
  reg [31 : 0] ctop_inf_dp0_bml_fabFlowBase;
  wire [31 : 0] ctop_inf_dp0_bml_fabFlowBase$D_IN;
  wire ctop_inf_dp0_bml_fabFlowBase$EN;

  // register ctop_inf_dp0_bml_fabFlowSize
  reg [31 : 0] ctop_inf_dp0_bml_fabFlowSize;
  wire [31 : 0] ctop_inf_dp0_bml_fabFlowSize$D_IN;
  wire ctop_inf_dp0_bml_fabFlowSize$EN;

  // register ctop_inf_dp0_bml_fabMesgAddr
  reg [31 : 0] ctop_inf_dp0_bml_fabMesgAddr;
  wire [31 : 0] ctop_inf_dp0_bml_fabMesgAddr$D_IN;
  wire ctop_inf_dp0_bml_fabMesgAddr$EN;

  // register ctop_inf_dp0_bml_fabMesgBase
  reg [31 : 0] ctop_inf_dp0_bml_fabMesgBase;
  wire [31 : 0] ctop_inf_dp0_bml_fabMesgBase$D_IN;
  wire ctop_inf_dp0_bml_fabMesgBase$EN;

  // register ctop_inf_dp0_bml_fabMesgSize
  reg [31 : 0] ctop_inf_dp0_bml_fabMesgSize;
  wire [31 : 0] ctop_inf_dp0_bml_fabMesgSize$D_IN;
  wire ctop_inf_dp0_bml_fabMesgSize$EN;

  // register ctop_inf_dp0_bml_fabMetaAddr
  reg [31 : 0] ctop_inf_dp0_bml_fabMetaAddr;
  wire [31 : 0] ctop_inf_dp0_bml_fabMetaAddr$D_IN;
  wire ctop_inf_dp0_bml_fabMetaAddr$EN;

  // register ctop_inf_dp0_bml_fabMetaBase
  reg [31 : 0] ctop_inf_dp0_bml_fabMetaBase;
  wire [31 : 0] ctop_inf_dp0_bml_fabMetaBase$D_IN;
  wire ctop_inf_dp0_bml_fabMetaBase$EN;

  // register ctop_inf_dp0_bml_fabMetaSize
  reg [31 : 0] ctop_inf_dp0_bml_fabMetaSize;
  wire [31 : 0] ctop_inf_dp0_bml_fabMetaSize$D_IN;
  wire ctop_inf_dp0_bml_fabMetaSize$EN;

  // register ctop_inf_dp0_bml_fabNumBufs
  reg [15 : 0] ctop_inf_dp0_bml_fabNumBufs;
  wire [15 : 0] ctop_inf_dp0_bml_fabNumBufs$D_IN;
  wire ctop_inf_dp0_bml_fabNumBufs$EN;

  // register ctop_inf_dp0_bml_lclBufDone
  reg ctop_inf_dp0_bml_lclBufDone;
  wire ctop_inf_dp0_bml_lclBufDone$D_IN, ctop_inf_dp0_bml_lclBufDone$EN;

  // register ctop_inf_dp0_bml_lclBufStart
  reg ctop_inf_dp0_bml_lclBufStart;
  wire ctop_inf_dp0_bml_lclBufStart$D_IN, ctop_inf_dp0_bml_lclBufStart$EN;

  // register ctop_inf_dp0_bml_lclBuf_modulus
  reg [15 : 0] ctop_inf_dp0_bml_lclBuf_modulus;
  wire [15 : 0] ctop_inf_dp0_bml_lclBuf_modulus$D_IN;
  wire ctop_inf_dp0_bml_lclBuf_modulus$EN;

  // register ctop_inf_dp0_bml_lclBuf_value
  reg [15 : 0] ctop_inf_dp0_bml_lclBuf_value;
  wire [15 : 0] ctop_inf_dp0_bml_lclBuf_value$D_IN;
  wire ctop_inf_dp0_bml_lclBuf_value$EN;

  // register ctop_inf_dp0_bml_lclBufsAR
  reg [15 : 0] ctop_inf_dp0_bml_lclBufsAR;
  wire [15 : 0] ctop_inf_dp0_bml_lclBufsAR$D_IN;
  wire ctop_inf_dp0_bml_lclBufsAR$EN;

  // register ctop_inf_dp0_bml_lclBufsCF
  reg [15 : 0] ctop_inf_dp0_bml_lclBufsCF;
  wire [15 : 0] ctop_inf_dp0_bml_lclBufsCF$D_IN;
  wire ctop_inf_dp0_bml_lclBufsCF$EN;

  // register ctop_inf_dp0_bml_lclCredit
  reg [15 : 0] ctop_inf_dp0_bml_lclCredit;
  wire [15 : 0] ctop_inf_dp0_bml_lclCredit$D_IN;
  wire ctop_inf_dp0_bml_lclCredit$EN;

  // register ctop_inf_dp0_bml_lclDones
  reg [15 : 0] ctop_inf_dp0_bml_lclDones;
  wire [15 : 0] ctop_inf_dp0_bml_lclDones$D_IN;
  wire ctop_inf_dp0_bml_lclDones$EN;

  // register ctop_inf_dp0_bml_lclMesgAddr
  reg [15 : 0] ctop_inf_dp0_bml_lclMesgAddr;
  wire [15 : 0] ctop_inf_dp0_bml_lclMesgAddr$D_IN;
  wire ctop_inf_dp0_bml_lclMesgAddr$EN;

  // register ctop_inf_dp0_bml_lclMetaAddr
  reg [15 : 0] ctop_inf_dp0_bml_lclMetaAddr;
  wire [15 : 0] ctop_inf_dp0_bml_lclMetaAddr$D_IN;
  wire ctop_inf_dp0_bml_lclMetaAddr$EN;

  // register ctop_inf_dp0_bml_lclNumBufs
  reg [15 : 0] ctop_inf_dp0_bml_lclNumBufs;
  wire [15 : 0] ctop_inf_dp0_bml_lclNumBufs$D_IN;
  wire ctop_inf_dp0_bml_lclNumBufs$EN;

  // register ctop_inf_dp0_bml_lclStarts
  reg [15 : 0] ctop_inf_dp0_bml_lclStarts;
  wire [15 : 0] ctop_inf_dp0_bml_lclStarts$D_IN;
  wire ctop_inf_dp0_bml_lclStarts$EN;

  // register ctop_inf_dp0_bml_mesgBase
  reg [15 : 0] ctop_inf_dp0_bml_mesgBase;
  wire [15 : 0] ctop_inf_dp0_bml_mesgBase$D_IN;
  wire ctop_inf_dp0_bml_mesgBase$EN;

  // register ctop_inf_dp0_bml_mesgSize
  reg [15 : 0] ctop_inf_dp0_bml_mesgSize;
  wire [15 : 0] ctop_inf_dp0_bml_mesgSize$D_IN;
  wire ctop_inf_dp0_bml_mesgSize$EN;

  // register ctop_inf_dp0_bml_metaBase
  reg [15 : 0] ctop_inf_dp0_bml_metaBase;
  wire [15 : 0] ctop_inf_dp0_bml_metaBase$D_IN;
  wire ctop_inf_dp0_bml_metaBase$EN;

  // register ctop_inf_dp0_bml_metaSize
  reg [15 : 0] ctop_inf_dp0_bml_metaSize;
  wire [15 : 0] ctop_inf_dp0_bml_metaSize$D_IN;
  wire ctop_inf_dp0_bml_metaSize$EN;

  // register ctop_inf_dp0_bml_remBuf_modulus
  reg [15 : 0] ctop_inf_dp0_bml_remBuf_modulus;
  wire [15 : 0] ctop_inf_dp0_bml_remBuf_modulus$D_IN;
  wire ctop_inf_dp0_bml_remBuf_modulus$EN;

  // register ctop_inf_dp0_bml_remBuf_value
  reg [15 : 0] ctop_inf_dp0_bml_remBuf_value;
  wire [15 : 0] ctop_inf_dp0_bml_remBuf_value$D_IN;
  wire ctop_inf_dp0_bml_remBuf_value$EN;

  // register ctop_inf_dp0_bml_remDone
  reg ctop_inf_dp0_bml_remDone;
  wire ctop_inf_dp0_bml_remDone$D_IN, ctop_inf_dp0_bml_remDone$EN;

  // register ctop_inf_dp0_bml_remDones
  reg [15 : 0] ctop_inf_dp0_bml_remDones;
  wire [15 : 0] ctop_inf_dp0_bml_remDones$D_IN;
  wire ctop_inf_dp0_bml_remDones$EN;

  // register ctop_inf_dp0_bml_remMesgAddr
  reg [15 : 0] ctop_inf_dp0_bml_remMesgAddr;
  wire [15 : 0] ctop_inf_dp0_bml_remMesgAddr$D_IN;
  wire ctop_inf_dp0_bml_remMesgAddr$EN;

  // register ctop_inf_dp0_bml_remMetaAddr
  reg [15 : 0] ctop_inf_dp0_bml_remMetaAddr;
  wire [15 : 0] ctop_inf_dp0_bml_remMetaAddr$D_IN;
  wire ctop_inf_dp0_bml_remMetaAddr$EN;

  // register ctop_inf_dp0_bml_remStart
  reg ctop_inf_dp0_bml_remStart;
  wire ctop_inf_dp0_bml_remStart$D_IN, ctop_inf_dp0_bml_remStart$EN;

  // register ctop_inf_dp0_bml_remStarts
  reg [15 : 0] ctop_inf_dp0_bml_remStarts;
  wire [15 : 0] ctop_inf_dp0_bml_remStarts$D_IN;
  wire ctop_inf_dp0_bml_remStarts$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_1_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterA_1_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterA_1_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_1_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_1_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterA_1_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterA_1_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_1_s1$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_2_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterA_2_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterA_2_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_2_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_2_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterA_2_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterA_2_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_2_s1$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_3_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterA_3_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterA_3_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_3_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_3_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterA_3_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterA_3_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_3_s1$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterA_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterA_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterA_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterA_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterA_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterA_s1$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_1_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterB_1_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterB_1_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_1_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_1_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterB_1_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterB_1_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_1_s1$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_2_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterB_2_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterB_2_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_2_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_2_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterB_2_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterB_2_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_2_s1$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_3_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterB_3_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterB_3_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_3_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_3_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterB_3_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterB_3_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_3_s1$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_cnt
  reg [2 : 0] ctop_inf_dp0_bram_serverAdapterB_cnt;
  wire [2 : 0] ctop_inf_dp0_bram_serverAdapterB_cnt$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_cnt$EN;

  // register ctop_inf_dp0_bram_serverAdapterB_s1
  reg [1 : 0] ctop_inf_dp0_bram_serverAdapterB_s1;
  wire [1 : 0] ctop_inf_dp0_bram_serverAdapterB_s1$D_IN;
  wire ctop_inf_dp0_bram_serverAdapterB_s1$EN;

  // register ctop_inf_dp0_dpControl
  reg [3 : 0] ctop_inf_dp0_dpControl;
  wire [3 : 0] ctop_inf_dp0_dpControl$D_IN;
  wire ctop_inf_dp0_dpControl$EN;

  // register ctop_inf_dp0_tlp_creditReady
  reg ctop_inf_dp0_tlp_creditReady;
  wire ctop_inf_dp0_tlp_creditReady$D_IN, ctop_inf_dp0_tlp_creditReady$EN;

  // register ctop_inf_dp0_tlp_debugBdata
  reg [127 : 0] ctop_inf_dp0_tlp_debugBdata;
  wire [127 : 0] ctop_inf_dp0_tlp_debugBdata$D_IN;
  wire ctop_inf_dp0_tlp_debugBdata$EN;

  // register ctop_inf_dp0_tlp_dmaDoTailEvent
  reg ctop_inf_dp0_tlp_dmaDoTailEvent;
  reg ctop_inf_dp0_tlp_dmaDoTailEvent$D_IN;
  wire ctop_inf_dp0_tlp_dmaDoTailEvent$EN;

  // register ctop_inf_dp0_tlp_dmaPullRemainDWLen
  reg [9 : 0] ctop_inf_dp0_tlp_dmaPullRemainDWLen;
  reg [9 : 0] ctop_inf_dp0_tlp_dmaPullRemainDWLen$D_IN;
  wire ctop_inf_dp0_tlp_dmaPullRemainDWLen$EN;

  // register ctop_inf_dp0_tlp_dmaPullRemainDWSub
  reg [9 : 0] ctop_inf_dp0_tlp_dmaPullRemainDWSub;
  wire [9 : 0] ctop_inf_dp0_tlp_dmaPullRemainDWSub$D_IN;
  wire ctop_inf_dp0_tlp_dmaPullRemainDWSub$EN;

  // register ctop_inf_dp0_tlp_dmaReqTag
  reg [4 : 0] ctop_inf_dp0_tlp_dmaReqTag;
  wire [4 : 0] ctop_inf_dp0_tlp_dmaReqTag$D_IN;
  wire ctop_inf_dp0_tlp_dmaReqTag$EN;

  // register ctop_inf_dp0_tlp_dmaTag
  reg [4 : 0] ctop_inf_dp0_tlp_dmaTag;
  wire [4 : 0] ctop_inf_dp0_tlp_dmaTag$D_IN;
  wire ctop_inf_dp0_tlp_dmaTag$EN;

  // register ctop_inf_dp0_tlp_doXmtMetaBody
  reg ctop_inf_dp0_tlp_doXmtMetaBody;
  wire ctop_inf_dp0_tlp_doXmtMetaBody$D_IN, ctop_inf_dp0_tlp_doXmtMetaBody$EN;

  // register ctop_inf_dp0_tlp_fabFlowAddr
  reg [31 : 0] ctop_inf_dp0_tlp_fabFlowAddr;
  wire [31 : 0] ctop_inf_dp0_tlp_fabFlowAddr$D_IN;
  wire ctop_inf_dp0_tlp_fabFlowAddr$EN;

  // register ctop_inf_dp0_tlp_fabMesgAccu
  reg [31 : 0] ctop_inf_dp0_tlp_fabMesgAccu;
  reg [31 : 0] ctop_inf_dp0_tlp_fabMesgAccu$D_IN;
  wire ctop_inf_dp0_tlp_fabMesgAccu$EN;

  // register ctop_inf_dp0_tlp_fabMesgAddr
  reg [31 : 0] ctop_inf_dp0_tlp_fabMesgAddr;
  wire [31 : 0] ctop_inf_dp0_tlp_fabMesgAddr$D_IN;
  wire ctop_inf_dp0_tlp_fabMesgAddr$EN;

  // register ctop_inf_dp0_tlp_fabMeta
  reg [128 : 0] ctop_inf_dp0_tlp_fabMeta;
  reg [128 : 0] ctop_inf_dp0_tlp_fabMeta$D_IN;
  wire ctop_inf_dp0_tlp_fabMeta$EN;

  // register ctop_inf_dp0_tlp_fabMetaAddr
  reg [31 : 0] ctop_inf_dp0_tlp_fabMetaAddr;
  wire [31 : 0] ctop_inf_dp0_tlp_fabMetaAddr$D_IN;
  wire ctop_inf_dp0_tlp_fabMetaAddr$EN;

  // register ctop_inf_dp0_tlp_farBufReady
  reg ctop_inf_dp0_tlp_farBufReady;
  wire ctop_inf_dp0_tlp_farBufReady$D_IN, ctop_inf_dp0_tlp_farBufReady$EN;

  // register ctop_inf_dp0_tlp_flowDiagCount
  reg [31 : 0] ctop_inf_dp0_tlp_flowDiagCount;
  wire [31 : 0] ctop_inf_dp0_tlp_flowDiagCount$D_IN;
  wire ctop_inf_dp0_tlp_flowDiagCount$EN;

  // register ctop_inf_dp0_tlp_gotResponseHeader
  reg ctop_inf_dp0_tlp_gotResponseHeader;
  reg ctop_inf_dp0_tlp_gotResponseHeader$D_IN;
  wire ctop_inf_dp0_tlp_gotResponseHeader$EN;

  // register ctop_inf_dp0_tlp_inIgnorePkt
  reg ctop_inf_dp0_tlp_inIgnorePkt;
  wire ctop_inf_dp0_tlp_inIgnorePkt$D_IN, ctop_inf_dp0_tlp_inIgnorePkt$EN;

  // register ctop_inf_dp0_tlp_maxPayloadSize
  reg [12 : 0] ctop_inf_dp0_tlp_maxPayloadSize;
  wire [12 : 0] ctop_inf_dp0_tlp_maxPayloadSize$D_IN;
  wire ctop_inf_dp0_tlp_maxPayloadSize$EN;

  // register ctop_inf_dp0_tlp_maxReadReqSize
  reg [12 : 0] ctop_inf_dp0_tlp_maxReadReqSize;
  wire [12 : 0] ctop_inf_dp0_tlp_maxReadReqSize$D_IN;
  wire ctop_inf_dp0_tlp_maxReadReqSize$EN;

  // register ctop_inf_dp0_tlp_mesgComplReceived
  reg [16 : 0] ctop_inf_dp0_tlp_mesgComplReceived;
  reg [16 : 0] ctop_inf_dp0_tlp_mesgComplReceived$D_IN;
  wire ctop_inf_dp0_tlp_mesgComplReceived$EN;

  // register ctop_inf_dp0_tlp_mesgLengthRemainPull
  reg [16 : 0] ctop_inf_dp0_tlp_mesgLengthRemainPull;
  wire [16 : 0] ctop_inf_dp0_tlp_mesgLengthRemainPull$D_IN;
  wire ctop_inf_dp0_tlp_mesgLengthRemainPull$EN;

  // register ctop_inf_dp0_tlp_mesgLengthRemainPush
  reg [16 : 0] ctop_inf_dp0_tlp_mesgLengthRemainPush;
  wire [16 : 0] ctop_inf_dp0_tlp_mesgLengthRemainPush$D_IN;
  wire ctop_inf_dp0_tlp_mesgLengthRemainPush$EN;

  // register ctop_inf_dp0_tlp_nearBufReady
  reg ctop_inf_dp0_tlp_nearBufReady;
  wire ctop_inf_dp0_tlp_nearBufReady$D_IN, ctop_inf_dp0_tlp_nearBufReady$EN;

  // register ctop_inf_dp0_tlp_outDwRemain
  reg [9 : 0] ctop_inf_dp0_tlp_outDwRemain;
  wire [9 : 0] ctop_inf_dp0_tlp_outDwRemain$D_IN;
  wire ctop_inf_dp0_tlp_outDwRemain$EN;

  // register ctop_inf_dp0_tlp_postSeqDwell
  reg [3 : 0] ctop_inf_dp0_tlp_postSeqDwell;
  wire [3 : 0] ctop_inf_dp0_tlp_postSeqDwell$D_IN;
  wire ctop_inf_dp0_tlp_postSeqDwell$EN;

  // register ctop_inf_dp0_tlp_pullTagMatch
  reg ctop_inf_dp0_tlp_pullTagMatch;
  wire ctop_inf_dp0_tlp_pullTagMatch$D_IN, ctop_inf_dp0_tlp_pullTagMatch$EN;

  // register ctop_inf_dp0_tlp_rdRespDwRemain
  reg [9 : 0] ctop_inf_dp0_tlp_rdRespDwRemain;
  wire [9 : 0] ctop_inf_dp0_tlp_rdRespDwRemain$D_IN;
  wire ctop_inf_dp0_tlp_rdRespDwRemain$EN;

  // register ctop_inf_dp0_tlp_readHeaderSent
  reg ctop_inf_dp0_tlp_readHeaderSent;
  wire ctop_inf_dp0_tlp_readHeaderSent$D_IN,
       ctop_inf_dp0_tlp_readHeaderSent$EN;

  // register ctop_inf_dp0_tlp_readNxtDWAddr
  reg [12 : 0] ctop_inf_dp0_tlp_readNxtDWAddr;
  wire [12 : 0] ctop_inf_dp0_tlp_readNxtDWAddr$D_IN;
  wire ctop_inf_dp0_tlp_readNxtDWAddr$EN;

  // register ctop_inf_dp0_tlp_readRemainDWLen
  reg [9 : 0] ctop_inf_dp0_tlp_readRemainDWLen;
  wire [9 : 0] ctop_inf_dp0_tlp_readRemainDWLen$D_IN;
  wire ctop_inf_dp0_tlp_readRemainDWLen$EN;

  // register ctop_inf_dp0_tlp_readStarted
  reg ctop_inf_dp0_tlp_readStarted;
  wire ctop_inf_dp0_tlp_readStarted$D_IN, ctop_inf_dp0_tlp_readStarted$EN;

  // register ctop_inf_dp0_tlp_remDone
  reg ctop_inf_dp0_tlp_remDone;
  wire ctop_inf_dp0_tlp_remDone$D_IN, ctop_inf_dp0_tlp_remDone$EN;

  // register ctop_inf_dp0_tlp_remMesgAccu
  reg [15 : 0] ctop_inf_dp0_tlp_remMesgAccu;
  reg [15 : 0] ctop_inf_dp0_tlp_remMesgAccu$D_IN;
  wire ctop_inf_dp0_tlp_remMesgAccu$EN;

  // register ctop_inf_dp0_tlp_remMesgAddr
  reg [15 : 0] ctop_inf_dp0_tlp_remMesgAddr;
  wire [15 : 0] ctop_inf_dp0_tlp_remMesgAddr$D_IN;
  wire ctop_inf_dp0_tlp_remMesgAddr$EN;

  // register ctop_inf_dp0_tlp_remMetaAddr
  reg [15 : 0] ctop_inf_dp0_tlp_remMetaAddr;
  wire [15 : 0] ctop_inf_dp0_tlp_remMetaAddr$D_IN;
  wire ctop_inf_dp0_tlp_remMetaAddr$EN;

  // register ctop_inf_dp0_tlp_remStart
  reg ctop_inf_dp0_tlp_remStart;
  wire ctop_inf_dp0_tlp_remStart$D_IN, ctop_inf_dp0_tlp_remStart$EN;

  // register ctop_inf_dp0_tlp_reqMesgInFlight
  reg ctop_inf_dp0_tlp_reqMesgInFlight;
  reg ctop_inf_dp0_tlp_reqMesgInFlight$D_IN;
  wire ctop_inf_dp0_tlp_reqMesgInFlight$EN;

  // register ctop_inf_dp0_tlp_reqMetaBodyInFlight
  reg ctop_inf_dp0_tlp_reqMetaBodyInFlight;
  wire ctop_inf_dp0_tlp_reqMetaBodyInFlight$D_IN,
       ctop_inf_dp0_tlp_reqMetaBodyInFlight$EN;

  // register ctop_inf_dp0_tlp_reqMetaInFlight
  reg ctop_inf_dp0_tlp_reqMetaInFlight;
  reg ctop_inf_dp0_tlp_reqMetaInFlight$D_IN;
  wire ctop_inf_dp0_tlp_reqMetaInFlight$EN;

  // register ctop_inf_dp0_tlp_srcMesgAccu
  reg [31 : 0] ctop_inf_dp0_tlp_srcMesgAccu;
  wire [31 : 0] ctop_inf_dp0_tlp_srcMesgAccu$D_IN;
  wire ctop_inf_dp0_tlp_srcMesgAccu$EN;

  // register ctop_inf_dp0_tlp_tlpMetaSent
  reg ctop_inf_dp0_tlp_tlpMetaSent;
  wire ctop_inf_dp0_tlp_tlpMetaSent$D_IN, ctop_inf_dp0_tlp_tlpMetaSent$EN;

  // register ctop_inf_dp0_tlp_tlpRcvBusy
  reg ctop_inf_dp0_tlp_tlpRcvBusy;
  reg ctop_inf_dp0_tlp_tlpRcvBusy$D_IN;
  wire ctop_inf_dp0_tlp_tlpRcvBusy$EN;

  // register ctop_inf_dp0_tlp_tlpXmtBusy
  reg ctop_inf_dp0_tlp_tlpXmtBusy;
  reg ctop_inf_dp0_tlp_tlpXmtBusy$D_IN;
  wire ctop_inf_dp0_tlp_tlpXmtBusy$EN;

  // register ctop_inf_dp0_tlp_writeDWAddr
  reg [12 : 0] ctop_inf_dp0_tlp_writeDWAddr;
  wire [12 : 0] ctop_inf_dp0_tlp_writeDWAddr$D_IN;
  wire ctop_inf_dp0_tlp_writeDWAddr$EN;

  // register ctop_inf_dp0_tlp_writeLastBE
  reg [3 : 0] ctop_inf_dp0_tlp_writeLastBE;
  wire [3 : 0] ctop_inf_dp0_tlp_writeLastBE$D_IN;
  wire ctop_inf_dp0_tlp_writeLastBE$EN;

  // register ctop_inf_dp0_tlp_writeRemainDWLen
  reg [9 : 0] ctop_inf_dp0_tlp_writeRemainDWLen;
  wire [9 : 0] ctop_inf_dp0_tlp_writeRemainDWLen$D_IN;
  wire ctop_inf_dp0_tlp_writeRemainDWLen$EN;

  // register ctop_inf_dp0_tlp_xmtMetaInFlight
  reg ctop_inf_dp0_tlp_xmtMetaInFlight;
  wire ctop_inf_dp0_tlp_xmtMetaInFlight$D_IN,
       ctop_inf_dp0_tlp_xmtMetaInFlight$EN;

  // register ctop_inf_dp0_tlp_xmtMetaOK
  reg ctop_inf_dp0_tlp_xmtMetaOK;
  reg ctop_inf_dp0_tlp_xmtMetaOK$D_IN;
  wire ctop_inf_dp0_tlp_xmtMetaOK$EN;

  // register ctop_inf_dp0_wci_cEdge
  reg [2 : 0] ctop_inf_dp0_wci_cEdge;
  wire [2 : 0] ctop_inf_dp0_wci_cEdge$D_IN;
  wire ctop_inf_dp0_wci_cEdge$EN;

  // register ctop_inf_dp0_wci_cState
  reg [2 : 0] ctop_inf_dp0_wci_cState;
  wire [2 : 0] ctop_inf_dp0_wci_cState$D_IN;
  wire ctop_inf_dp0_wci_cState$EN;

  // register ctop_inf_dp0_wci_ctlAckReg
  reg ctop_inf_dp0_wci_ctlAckReg;
  wire ctop_inf_dp0_wci_ctlAckReg$D_IN, ctop_inf_dp0_wci_ctlAckReg$EN;

  // register ctop_inf_dp0_wci_ctlOpActive
  reg ctop_inf_dp0_wci_ctlOpActive;
  wire ctop_inf_dp0_wci_ctlOpActive$D_IN, ctop_inf_dp0_wci_ctlOpActive$EN;

  // register ctop_inf_dp0_wci_illegalEdge
  reg ctop_inf_dp0_wci_illegalEdge;
  wire ctop_inf_dp0_wci_illegalEdge$D_IN, ctop_inf_dp0_wci_illegalEdge$EN;

  // register ctop_inf_dp0_wci_nState
  reg [2 : 0] ctop_inf_dp0_wci_nState;
  reg [2 : 0] ctop_inf_dp0_wci_nState$D_IN;
  wire ctop_inf_dp0_wci_nState$EN;

  // register ctop_inf_dp0_wci_reqF_countReg
  reg [1 : 0] ctop_inf_dp0_wci_reqF_countReg;
  wire [1 : 0] ctop_inf_dp0_wci_reqF_countReg$D_IN;
  wire ctop_inf_dp0_wci_reqF_countReg$EN;

  // register ctop_inf_dp0_wci_respF_c_r
  reg [1 : 0] ctop_inf_dp0_wci_respF_c_r;
  wire [1 : 0] ctop_inf_dp0_wci_respF_c_r$D_IN;
  wire ctop_inf_dp0_wci_respF_c_r$EN;

  // register ctop_inf_dp0_wci_respF_q_0
  reg [33 : 0] ctop_inf_dp0_wci_respF_q_0;
  reg [33 : 0] ctop_inf_dp0_wci_respF_q_0$D_IN;
  wire ctop_inf_dp0_wci_respF_q_0$EN;

  // register ctop_inf_dp0_wci_respF_q_1
  reg [33 : 0] ctop_inf_dp0_wci_respF_q_1;
  reg [33 : 0] ctop_inf_dp0_wci_respF_q_1$D_IN;
  wire ctop_inf_dp0_wci_respF_q_1$EN;

  // register ctop_inf_dp0_wci_sFlagReg
  reg ctop_inf_dp0_wci_sFlagReg;
  wire ctop_inf_dp0_wci_sFlagReg$D_IN, ctop_inf_dp0_wci_sFlagReg$EN;

  // register ctop_inf_dp0_wci_sThreadBusy_d
  reg ctop_inf_dp0_wci_sThreadBusy_d;
  wire ctop_inf_dp0_wci_sThreadBusy_d$D_IN, ctop_inf_dp0_wci_sThreadBusy_d$EN;

  // register ctop_inf_dp0_wmi_addr
  reg [13 : 0] ctop_inf_dp0_wmi_addr;
  wire [13 : 0] ctop_inf_dp0_wmi_addr$D_IN;
  wire ctop_inf_dp0_wmi_addr$EN;

  // register ctop_inf_dp0_wmi_bufDwell
  reg [1 : 0] ctop_inf_dp0_wmi_bufDwell;
  wire [1 : 0] ctop_inf_dp0_wmi_bufDwell$D_IN;
  wire ctop_inf_dp0_wmi_bufDwell$EN;

  // register ctop_inf_dp0_wmi_bytesRemainReq
  reg [13 : 0] ctop_inf_dp0_wmi_bytesRemainReq;
  wire [13 : 0] ctop_inf_dp0_wmi_bytesRemainReq$D_IN;
  wire ctop_inf_dp0_wmi_bytesRemainReq$EN;

  // register ctop_inf_dp0_wmi_bytesRemainResp
  reg [13 : 0] ctop_inf_dp0_wmi_bytesRemainResp;
  wire [13 : 0] ctop_inf_dp0_wmi_bytesRemainResp$D_IN;
  wire ctop_inf_dp0_wmi_bytesRemainResp$EN;

  // register ctop_inf_dp0_wmi_doneWithMesg
  reg ctop_inf_dp0_wmi_doneWithMesg;
  wire ctop_inf_dp0_wmi_doneWithMesg$D_IN, ctop_inf_dp0_wmi_doneWithMesg$EN;

  // register ctop_inf_dp0_wmi_lastMesg
  reg [31 : 0] ctop_inf_dp0_wmi_lastMesg;
  wire [31 : 0] ctop_inf_dp0_wmi_lastMesg$D_IN;
  wire ctop_inf_dp0_wmi_lastMesg$EN;

  // register ctop_inf_dp0_wmi_lclMesgAddr
  reg [14 : 0] ctop_inf_dp0_wmi_lclMesgAddr;
  wire [14 : 0] ctop_inf_dp0_wmi_lclMesgAddr$D_IN;
  wire ctop_inf_dp0_wmi_lclMesgAddr$EN;

  // register ctop_inf_dp0_wmi_lclMetaAddr
  reg [14 : 0] ctop_inf_dp0_wmi_lclMetaAddr;
  wire [14 : 0] ctop_inf_dp0_wmi_lclMetaAddr$D_IN;
  wire ctop_inf_dp0_wmi_lclMetaAddr$EN;

  // register ctop_inf_dp0_wmi_mesgBufReady
  reg ctop_inf_dp0_wmi_mesgBufReady;
  wire ctop_inf_dp0_wmi_mesgBufReady$D_IN, ctop_inf_dp0_wmi_mesgBufReady$EN;

  // register ctop_inf_dp0_wmi_mesgBusy
  reg ctop_inf_dp0_wmi_mesgBusy;
  wire ctop_inf_dp0_wmi_mesgBusy$D_IN, ctop_inf_dp0_wmi_mesgBusy$EN;

  // register ctop_inf_dp0_wmi_mesgCount
  reg [31 : 0] ctop_inf_dp0_wmi_mesgCount;
  wire [31 : 0] ctop_inf_dp0_wmi_mesgCount$D_IN;
  wire ctop_inf_dp0_wmi_mesgCount$EN;

  // register ctop_inf_dp0_wmi_mesgDone
  reg ctop_inf_dp0_wmi_mesgDone;
  wire ctop_inf_dp0_wmi_mesgDone$D_IN, ctop_inf_dp0_wmi_mesgDone$EN;

  // register ctop_inf_dp0_wmi_mesgMeta
  reg [128 : 0] ctop_inf_dp0_wmi_mesgMeta;
  wire [128 : 0] ctop_inf_dp0_wmi_mesgMeta$D_IN;
  wire ctop_inf_dp0_wmi_mesgMeta$EN;

  // register ctop_inf_dp0_wmi_mesgStart
  reg ctop_inf_dp0_wmi_mesgStart;
  wire ctop_inf_dp0_wmi_mesgStart$D_IN, ctop_inf_dp0_wmi_mesgStart$EN;

  // register ctop_inf_dp0_wmi_metaBusy
  reg ctop_inf_dp0_wmi_metaBusy;
  wire ctop_inf_dp0_wmi_metaBusy$D_IN, ctop_inf_dp0_wmi_metaBusy$EN;

  // register ctop_inf_dp0_wmi_p4B
  reg [1 : 0] ctop_inf_dp0_wmi_p4B;
  wire [1 : 0] ctop_inf_dp0_wmi_p4B$D_IN;
  wire ctop_inf_dp0_wmi_p4B$EN;

  // register ctop_inf_dp0_wmi_rdActive
  reg ctop_inf_dp0_wmi_rdActive;
  wire ctop_inf_dp0_wmi_rdActive$D_IN, ctop_inf_dp0_wmi_rdActive$EN;

  // register ctop_inf_dp0_wmi_reqCount
  reg [15 : 0] ctop_inf_dp0_wmi_reqCount;
  wire [15 : 0] ctop_inf_dp0_wmi_reqCount$D_IN;
  wire ctop_inf_dp0_wmi_reqCount$EN;

  // register ctop_inf_dp0_wmi_thisMesg
  reg [31 : 0] ctop_inf_dp0_wmi_thisMesg;
  wire [31 : 0] ctop_inf_dp0_wmi_thisMesg$D_IN;
  wire ctop_inf_dp0_wmi_thisMesg$EN;

  // register ctop_inf_dp0_wmi_wmi_blockReq
  reg ctop_inf_dp0_wmi_wmi_blockReq;
  wire ctop_inf_dp0_wmi_wmi_blockReq$D_IN, ctop_inf_dp0_wmi_wmi_blockReq$EN;

  // register ctop_inf_dp0_wmi_wmi_dhF_countReg
  reg [1 : 0] ctop_inf_dp0_wmi_wmi_dhF_countReg;
  wire [1 : 0] ctop_inf_dp0_wmi_wmi_dhF_countReg$D_IN;
  wire ctop_inf_dp0_wmi_wmi_dhF_countReg$EN;

  // register ctop_inf_dp0_wmi_wmi_dhF_levelsValid
  reg ctop_inf_dp0_wmi_wmi_dhF_levelsValid;
  wire ctop_inf_dp0_wmi_wmi_dhF_levelsValid$D_IN,
       ctop_inf_dp0_wmi_wmi_dhF_levelsValid$EN;

  // register ctop_inf_dp0_wmi_wmi_errorSticky
  reg ctop_inf_dp0_wmi_wmi_errorSticky;
  wire ctop_inf_dp0_wmi_wmi_errorSticky$D_IN,
       ctop_inf_dp0_wmi_wmi_errorSticky$EN;

  // register ctop_inf_dp0_wmi_wmi_mFlagF_countReg
  reg [1 : 0] ctop_inf_dp0_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] ctop_inf_dp0_wmi_wmi_mFlagF_countReg$D_IN;
  wire ctop_inf_dp0_wmi_wmi_mFlagF_countReg$EN;

  // register ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid
  reg ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid;
  wire ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$D_IN,
       ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$EN;

  // register ctop_inf_dp0_wmi_wmi_mFlagReg
  reg [31 : 0] ctop_inf_dp0_wmi_wmi_mFlagReg;
  wire [31 : 0] ctop_inf_dp0_wmi_wmi_mFlagReg$D_IN;
  wire ctop_inf_dp0_wmi_wmi_mFlagReg$EN;

  // register ctop_inf_dp0_wmi_wmi_operateD
  reg ctop_inf_dp0_wmi_wmi_operateD;
  wire ctop_inf_dp0_wmi_wmi_operateD$D_IN, ctop_inf_dp0_wmi_wmi_operateD$EN;

  // register ctop_inf_dp0_wmi_wmi_peerIsReady
  reg ctop_inf_dp0_wmi_wmi_peerIsReady;
  wire ctop_inf_dp0_wmi_wmi_peerIsReady$D_IN,
       ctop_inf_dp0_wmi_wmi_peerIsReady$EN;

  // register ctop_inf_dp0_wmi_wmi_reqF_countReg
  reg [1 : 0] ctop_inf_dp0_wmi_wmi_reqF_countReg;
  wire [1 : 0] ctop_inf_dp0_wmi_wmi_reqF_countReg$D_IN;
  wire ctop_inf_dp0_wmi_wmi_reqF_countReg$EN;

  // register ctop_inf_dp0_wmi_wmi_reqF_levelsValid
  reg ctop_inf_dp0_wmi_wmi_reqF_levelsValid;
  wire ctop_inf_dp0_wmi_wmi_reqF_levelsValid$D_IN,
       ctop_inf_dp0_wmi_wmi_reqF_levelsValid$EN;

  // register ctop_inf_dp0_wmi_wmi_respF_c_r
  reg [1 : 0] ctop_inf_dp0_wmi_wmi_respF_c_r;
  wire [1 : 0] ctop_inf_dp0_wmi_wmi_respF_c_r$D_IN;
  wire ctop_inf_dp0_wmi_wmi_respF_c_r$EN;

  // register ctop_inf_dp0_wmi_wmi_respF_q_0
  reg [33 : 0] ctop_inf_dp0_wmi_wmi_respF_q_0;
  reg [33 : 0] ctop_inf_dp0_wmi_wmi_respF_q_0$D_IN;
  wire ctop_inf_dp0_wmi_wmi_respF_q_0$EN;

  // register ctop_inf_dp0_wmi_wmi_respF_q_1
  reg [33 : 0] ctop_inf_dp0_wmi_wmi_respF_q_1;
  reg [33 : 0] ctop_inf_dp0_wmi_wmi_respF_q_1$D_IN;
  wire ctop_inf_dp0_wmi_wmi_respF_q_1$EN;

  // register ctop_inf_dp0_wmi_wmi_sFlagReg
  reg [31 : 0] ctop_inf_dp0_wmi_wmi_sFlagReg;
  wire [31 : 0] ctop_inf_dp0_wmi_wmi_sFlagReg$D_IN;
  wire ctop_inf_dp0_wmi_wmi_sFlagReg$EN;

  // register ctop_inf_dp0_wmi_wmi_statusR
  reg [7 : 0] ctop_inf_dp0_wmi_wmi_statusR;
  wire [7 : 0] ctop_inf_dp0_wmi_wmi_statusR$D_IN;
  wire ctop_inf_dp0_wmi_wmi_statusR$EN;

  // register ctop_inf_dp0_wmi_wmi_trafficSticky
  reg ctop_inf_dp0_wmi_wmi_trafficSticky;
  wire ctop_inf_dp0_wmi_wmi_trafficSticky$D_IN,
       ctop_inf_dp0_wmi_wmi_trafficSticky$EN;

  // register ctop_inf_dp0_wmi_wrActive
  reg ctop_inf_dp0_wmi_wrActive;
  wire ctop_inf_dp0_wmi_wrActive$D_IN, ctop_inf_dp0_wmi_wrActive$EN;

  // register ctop_inf_dp0_wmi_wrFinalize
  reg ctop_inf_dp0_wmi_wrFinalize;
  wire ctop_inf_dp0_wmi_wrFinalize$D_IN, ctop_inf_dp0_wmi_wrFinalize$EN;

  // register ctop_inf_dp0_wmi_wrtCount
  reg [15 : 0] ctop_inf_dp0_wmi_wrtCount;
  wire [15 : 0] ctop_inf_dp0_wmi_wrtCount$D_IN;
  wire ctop_inf_dp0_wmi_wrtCount$EN;

  // register ctop_inf_dp0_wti_nowReq
  reg [66 : 0] ctop_inf_dp0_wti_nowReq;
  wire [66 : 0] ctop_inf_dp0_wti_nowReq$D_IN;
  wire ctop_inf_dp0_wti_nowReq$EN;

  // register ctop_inf_dp1_bml_crdBuf_modulus
  reg [15 : 0] ctop_inf_dp1_bml_crdBuf_modulus;
  wire [15 : 0] ctop_inf_dp1_bml_crdBuf_modulus$D_IN;
  wire ctop_inf_dp1_bml_crdBuf_modulus$EN;

  // register ctop_inf_dp1_bml_crdBuf_value
  reg [15 : 0] ctop_inf_dp1_bml_crdBuf_value;
  wire [15 : 0] ctop_inf_dp1_bml_crdBuf_value$D_IN;
  wire ctop_inf_dp1_bml_crdBuf_value$EN;

  // register ctop_inf_dp1_bml_fabAvail
  reg ctop_inf_dp1_bml_fabAvail;
  wire ctop_inf_dp1_bml_fabAvail$D_IN, ctop_inf_dp1_bml_fabAvail$EN;

  // register ctop_inf_dp1_bml_fabBuf_modulus
  reg [15 : 0] ctop_inf_dp1_bml_fabBuf_modulus;
  wire [15 : 0] ctop_inf_dp1_bml_fabBuf_modulus$D_IN;
  wire ctop_inf_dp1_bml_fabBuf_modulus$EN;

  // register ctop_inf_dp1_bml_fabBuf_value
  reg [15 : 0] ctop_inf_dp1_bml_fabBuf_value;
  wire [15 : 0] ctop_inf_dp1_bml_fabBuf_value$D_IN;
  wire ctop_inf_dp1_bml_fabBuf_value$EN;

  // register ctop_inf_dp1_bml_fabBufsAvail
  reg [15 : 0] ctop_inf_dp1_bml_fabBufsAvail;
  wire [15 : 0] ctop_inf_dp1_bml_fabBufsAvail$D_IN;
  wire ctop_inf_dp1_bml_fabBufsAvail$EN;

  // register ctop_inf_dp1_bml_fabDone
  reg ctop_inf_dp1_bml_fabDone;
  wire ctop_inf_dp1_bml_fabDone$D_IN, ctop_inf_dp1_bml_fabDone$EN;

  // register ctop_inf_dp1_bml_fabFlowAddr
  reg [31 : 0] ctop_inf_dp1_bml_fabFlowAddr;
  reg [31 : 0] ctop_inf_dp1_bml_fabFlowAddr$D_IN;
  wire ctop_inf_dp1_bml_fabFlowAddr$EN;

  // register ctop_inf_dp1_bml_fabFlowBase
  reg [31 : 0] ctop_inf_dp1_bml_fabFlowBase;
  wire [31 : 0] ctop_inf_dp1_bml_fabFlowBase$D_IN;
  wire ctop_inf_dp1_bml_fabFlowBase$EN;

  // register ctop_inf_dp1_bml_fabFlowSize
  reg [31 : 0] ctop_inf_dp1_bml_fabFlowSize;
  wire [31 : 0] ctop_inf_dp1_bml_fabFlowSize$D_IN;
  wire ctop_inf_dp1_bml_fabFlowSize$EN;

  // register ctop_inf_dp1_bml_fabMesgAddr
  reg [31 : 0] ctop_inf_dp1_bml_fabMesgAddr;
  wire [31 : 0] ctop_inf_dp1_bml_fabMesgAddr$D_IN;
  wire ctop_inf_dp1_bml_fabMesgAddr$EN;

  // register ctop_inf_dp1_bml_fabMesgBase
  reg [31 : 0] ctop_inf_dp1_bml_fabMesgBase;
  wire [31 : 0] ctop_inf_dp1_bml_fabMesgBase$D_IN;
  wire ctop_inf_dp1_bml_fabMesgBase$EN;

  // register ctop_inf_dp1_bml_fabMesgSize
  reg [31 : 0] ctop_inf_dp1_bml_fabMesgSize;
  wire [31 : 0] ctop_inf_dp1_bml_fabMesgSize$D_IN;
  wire ctop_inf_dp1_bml_fabMesgSize$EN;

  // register ctop_inf_dp1_bml_fabMetaAddr
  reg [31 : 0] ctop_inf_dp1_bml_fabMetaAddr;
  wire [31 : 0] ctop_inf_dp1_bml_fabMetaAddr$D_IN;
  wire ctop_inf_dp1_bml_fabMetaAddr$EN;

  // register ctop_inf_dp1_bml_fabMetaBase
  reg [31 : 0] ctop_inf_dp1_bml_fabMetaBase;
  wire [31 : 0] ctop_inf_dp1_bml_fabMetaBase$D_IN;
  wire ctop_inf_dp1_bml_fabMetaBase$EN;

  // register ctop_inf_dp1_bml_fabMetaSize
  reg [31 : 0] ctop_inf_dp1_bml_fabMetaSize;
  wire [31 : 0] ctop_inf_dp1_bml_fabMetaSize$D_IN;
  wire ctop_inf_dp1_bml_fabMetaSize$EN;

  // register ctop_inf_dp1_bml_fabNumBufs
  reg [15 : 0] ctop_inf_dp1_bml_fabNumBufs;
  wire [15 : 0] ctop_inf_dp1_bml_fabNumBufs$D_IN;
  wire ctop_inf_dp1_bml_fabNumBufs$EN;

  // register ctop_inf_dp1_bml_lclBufDone
  reg ctop_inf_dp1_bml_lclBufDone;
  wire ctop_inf_dp1_bml_lclBufDone$D_IN, ctop_inf_dp1_bml_lclBufDone$EN;

  // register ctop_inf_dp1_bml_lclBufStart
  reg ctop_inf_dp1_bml_lclBufStart;
  wire ctop_inf_dp1_bml_lclBufStart$D_IN, ctop_inf_dp1_bml_lclBufStart$EN;

  // register ctop_inf_dp1_bml_lclBuf_modulus
  reg [15 : 0] ctop_inf_dp1_bml_lclBuf_modulus;
  wire [15 : 0] ctop_inf_dp1_bml_lclBuf_modulus$D_IN;
  wire ctop_inf_dp1_bml_lclBuf_modulus$EN;

  // register ctop_inf_dp1_bml_lclBuf_value
  reg [15 : 0] ctop_inf_dp1_bml_lclBuf_value;
  wire [15 : 0] ctop_inf_dp1_bml_lclBuf_value$D_IN;
  wire ctop_inf_dp1_bml_lclBuf_value$EN;

  // register ctop_inf_dp1_bml_lclBufsAR
  reg [15 : 0] ctop_inf_dp1_bml_lclBufsAR;
  wire [15 : 0] ctop_inf_dp1_bml_lclBufsAR$D_IN;
  wire ctop_inf_dp1_bml_lclBufsAR$EN;

  // register ctop_inf_dp1_bml_lclBufsCF
  reg [15 : 0] ctop_inf_dp1_bml_lclBufsCF;
  wire [15 : 0] ctop_inf_dp1_bml_lclBufsCF$D_IN;
  wire ctop_inf_dp1_bml_lclBufsCF$EN;

  // register ctop_inf_dp1_bml_lclCredit
  reg [15 : 0] ctop_inf_dp1_bml_lclCredit;
  wire [15 : 0] ctop_inf_dp1_bml_lclCredit$D_IN;
  wire ctop_inf_dp1_bml_lclCredit$EN;

  // register ctop_inf_dp1_bml_lclDones
  reg [15 : 0] ctop_inf_dp1_bml_lclDones;
  wire [15 : 0] ctop_inf_dp1_bml_lclDones$D_IN;
  wire ctop_inf_dp1_bml_lclDones$EN;

  // register ctop_inf_dp1_bml_lclMesgAddr
  reg [15 : 0] ctop_inf_dp1_bml_lclMesgAddr;
  wire [15 : 0] ctop_inf_dp1_bml_lclMesgAddr$D_IN;
  wire ctop_inf_dp1_bml_lclMesgAddr$EN;

  // register ctop_inf_dp1_bml_lclMetaAddr
  reg [15 : 0] ctop_inf_dp1_bml_lclMetaAddr;
  wire [15 : 0] ctop_inf_dp1_bml_lclMetaAddr$D_IN;
  wire ctop_inf_dp1_bml_lclMetaAddr$EN;

  // register ctop_inf_dp1_bml_lclNumBufs
  reg [15 : 0] ctop_inf_dp1_bml_lclNumBufs;
  wire [15 : 0] ctop_inf_dp1_bml_lclNumBufs$D_IN;
  wire ctop_inf_dp1_bml_lclNumBufs$EN;

  // register ctop_inf_dp1_bml_lclStarts
  reg [15 : 0] ctop_inf_dp1_bml_lclStarts;
  wire [15 : 0] ctop_inf_dp1_bml_lclStarts$D_IN;
  wire ctop_inf_dp1_bml_lclStarts$EN;

  // register ctop_inf_dp1_bml_mesgBase
  reg [15 : 0] ctop_inf_dp1_bml_mesgBase;
  wire [15 : 0] ctop_inf_dp1_bml_mesgBase$D_IN;
  wire ctop_inf_dp1_bml_mesgBase$EN;

  // register ctop_inf_dp1_bml_mesgSize
  reg [15 : 0] ctop_inf_dp1_bml_mesgSize;
  wire [15 : 0] ctop_inf_dp1_bml_mesgSize$D_IN;
  wire ctop_inf_dp1_bml_mesgSize$EN;

  // register ctop_inf_dp1_bml_metaBase
  reg [15 : 0] ctop_inf_dp1_bml_metaBase;
  wire [15 : 0] ctop_inf_dp1_bml_metaBase$D_IN;
  wire ctop_inf_dp1_bml_metaBase$EN;

  // register ctop_inf_dp1_bml_metaSize
  reg [15 : 0] ctop_inf_dp1_bml_metaSize;
  wire [15 : 0] ctop_inf_dp1_bml_metaSize$D_IN;
  wire ctop_inf_dp1_bml_metaSize$EN;

  // register ctop_inf_dp1_bml_remBuf_modulus
  reg [15 : 0] ctop_inf_dp1_bml_remBuf_modulus;
  wire [15 : 0] ctop_inf_dp1_bml_remBuf_modulus$D_IN;
  wire ctop_inf_dp1_bml_remBuf_modulus$EN;

  // register ctop_inf_dp1_bml_remBuf_value
  reg [15 : 0] ctop_inf_dp1_bml_remBuf_value;
  wire [15 : 0] ctop_inf_dp1_bml_remBuf_value$D_IN;
  wire ctop_inf_dp1_bml_remBuf_value$EN;

  // register ctop_inf_dp1_bml_remDone
  reg ctop_inf_dp1_bml_remDone;
  wire ctop_inf_dp1_bml_remDone$D_IN, ctop_inf_dp1_bml_remDone$EN;

  // register ctop_inf_dp1_bml_remDones
  reg [15 : 0] ctop_inf_dp1_bml_remDones;
  wire [15 : 0] ctop_inf_dp1_bml_remDones$D_IN;
  wire ctop_inf_dp1_bml_remDones$EN;

  // register ctop_inf_dp1_bml_remMesgAddr
  reg [15 : 0] ctop_inf_dp1_bml_remMesgAddr;
  wire [15 : 0] ctop_inf_dp1_bml_remMesgAddr$D_IN;
  wire ctop_inf_dp1_bml_remMesgAddr$EN;

  // register ctop_inf_dp1_bml_remMetaAddr
  reg [15 : 0] ctop_inf_dp1_bml_remMetaAddr;
  wire [15 : 0] ctop_inf_dp1_bml_remMetaAddr$D_IN;
  wire ctop_inf_dp1_bml_remMetaAddr$EN;

  // register ctop_inf_dp1_bml_remStart
  reg ctop_inf_dp1_bml_remStart;
  wire ctop_inf_dp1_bml_remStart$D_IN, ctop_inf_dp1_bml_remStart$EN;

  // register ctop_inf_dp1_bml_remStarts
  reg [15 : 0] ctop_inf_dp1_bml_remStarts;
  wire [15 : 0] ctop_inf_dp1_bml_remStarts$D_IN;
  wire ctop_inf_dp1_bml_remStarts$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_1_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterA_1_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterA_1_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_1_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_1_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterA_1_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterA_1_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_1_s1$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_2_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterA_2_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterA_2_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_2_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_2_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterA_2_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterA_2_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_2_s1$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_3_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterA_3_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterA_3_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_3_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_3_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterA_3_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterA_3_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_3_s1$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterA_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterA_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterA_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterA_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterA_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterA_s1$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_1_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterB_1_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterB_1_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_1_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_1_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterB_1_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterB_1_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_1_s1$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_2_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterB_2_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterB_2_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_2_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_2_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterB_2_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterB_2_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_2_s1$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_3_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterB_3_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterB_3_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_3_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_3_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterB_3_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterB_3_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_3_s1$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_cnt
  reg [2 : 0] ctop_inf_dp1_bram_serverAdapterB_cnt;
  wire [2 : 0] ctop_inf_dp1_bram_serverAdapterB_cnt$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_cnt$EN;

  // register ctop_inf_dp1_bram_serverAdapterB_s1
  reg [1 : 0] ctop_inf_dp1_bram_serverAdapterB_s1;
  wire [1 : 0] ctop_inf_dp1_bram_serverAdapterB_s1$D_IN;
  wire ctop_inf_dp1_bram_serverAdapterB_s1$EN;

  // register ctop_inf_dp1_dpControl
  reg [3 : 0] ctop_inf_dp1_dpControl;
  wire [3 : 0] ctop_inf_dp1_dpControl$D_IN;
  wire ctop_inf_dp1_dpControl$EN;

  // register ctop_inf_dp1_tlp_creditReady
  reg ctop_inf_dp1_tlp_creditReady;
  wire ctop_inf_dp1_tlp_creditReady$D_IN, ctop_inf_dp1_tlp_creditReady$EN;

  // register ctop_inf_dp1_tlp_debugBdata
  reg [127 : 0] ctop_inf_dp1_tlp_debugBdata;
  wire [127 : 0] ctop_inf_dp1_tlp_debugBdata$D_IN;
  wire ctop_inf_dp1_tlp_debugBdata$EN;

  // register ctop_inf_dp1_tlp_dmaDoTailEvent
  reg ctop_inf_dp1_tlp_dmaDoTailEvent;
  reg ctop_inf_dp1_tlp_dmaDoTailEvent$D_IN;
  wire ctop_inf_dp1_tlp_dmaDoTailEvent$EN;

  // register ctop_inf_dp1_tlp_dmaPullRemainDWLen
  reg [9 : 0] ctop_inf_dp1_tlp_dmaPullRemainDWLen;
  reg [9 : 0] ctop_inf_dp1_tlp_dmaPullRemainDWLen$D_IN;
  wire ctop_inf_dp1_tlp_dmaPullRemainDWLen$EN;

  // register ctop_inf_dp1_tlp_dmaPullRemainDWSub
  reg [9 : 0] ctop_inf_dp1_tlp_dmaPullRemainDWSub;
  wire [9 : 0] ctop_inf_dp1_tlp_dmaPullRemainDWSub$D_IN;
  wire ctop_inf_dp1_tlp_dmaPullRemainDWSub$EN;

  // register ctop_inf_dp1_tlp_dmaReqTag
  reg [4 : 0] ctop_inf_dp1_tlp_dmaReqTag;
  wire [4 : 0] ctop_inf_dp1_tlp_dmaReqTag$D_IN;
  wire ctop_inf_dp1_tlp_dmaReqTag$EN;

  // register ctop_inf_dp1_tlp_dmaTag
  reg [4 : 0] ctop_inf_dp1_tlp_dmaTag;
  wire [4 : 0] ctop_inf_dp1_tlp_dmaTag$D_IN;
  wire ctop_inf_dp1_tlp_dmaTag$EN;

  // register ctop_inf_dp1_tlp_doXmtMetaBody
  reg ctop_inf_dp1_tlp_doXmtMetaBody;
  wire ctop_inf_dp1_tlp_doXmtMetaBody$D_IN, ctop_inf_dp1_tlp_doXmtMetaBody$EN;

  // register ctop_inf_dp1_tlp_fabFlowAddr
  reg [31 : 0] ctop_inf_dp1_tlp_fabFlowAddr;
  wire [31 : 0] ctop_inf_dp1_tlp_fabFlowAddr$D_IN;
  wire ctop_inf_dp1_tlp_fabFlowAddr$EN;

  // register ctop_inf_dp1_tlp_fabMesgAccu
  reg [31 : 0] ctop_inf_dp1_tlp_fabMesgAccu;
  reg [31 : 0] ctop_inf_dp1_tlp_fabMesgAccu$D_IN;
  wire ctop_inf_dp1_tlp_fabMesgAccu$EN;

  // register ctop_inf_dp1_tlp_fabMesgAddr
  reg [31 : 0] ctop_inf_dp1_tlp_fabMesgAddr;
  wire [31 : 0] ctop_inf_dp1_tlp_fabMesgAddr$D_IN;
  wire ctop_inf_dp1_tlp_fabMesgAddr$EN;

  // register ctop_inf_dp1_tlp_fabMeta
  reg [128 : 0] ctop_inf_dp1_tlp_fabMeta;
  reg [128 : 0] ctop_inf_dp1_tlp_fabMeta$D_IN;
  wire ctop_inf_dp1_tlp_fabMeta$EN;

  // register ctop_inf_dp1_tlp_fabMetaAddr
  reg [31 : 0] ctop_inf_dp1_tlp_fabMetaAddr;
  wire [31 : 0] ctop_inf_dp1_tlp_fabMetaAddr$D_IN;
  wire ctop_inf_dp1_tlp_fabMetaAddr$EN;

  // register ctop_inf_dp1_tlp_farBufReady
  reg ctop_inf_dp1_tlp_farBufReady;
  wire ctop_inf_dp1_tlp_farBufReady$D_IN, ctop_inf_dp1_tlp_farBufReady$EN;

  // register ctop_inf_dp1_tlp_flowDiagCount
  reg [31 : 0] ctop_inf_dp1_tlp_flowDiagCount;
  wire [31 : 0] ctop_inf_dp1_tlp_flowDiagCount$D_IN;
  wire ctop_inf_dp1_tlp_flowDiagCount$EN;

  // register ctop_inf_dp1_tlp_gotResponseHeader
  reg ctop_inf_dp1_tlp_gotResponseHeader;
  reg ctop_inf_dp1_tlp_gotResponseHeader$D_IN;
  wire ctop_inf_dp1_tlp_gotResponseHeader$EN;

  // register ctop_inf_dp1_tlp_inIgnorePkt
  reg ctop_inf_dp1_tlp_inIgnorePkt;
  wire ctop_inf_dp1_tlp_inIgnorePkt$D_IN, ctop_inf_dp1_tlp_inIgnorePkt$EN;

  // register ctop_inf_dp1_tlp_maxPayloadSize
  reg [12 : 0] ctop_inf_dp1_tlp_maxPayloadSize;
  wire [12 : 0] ctop_inf_dp1_tlp_maxPayloadSize$D_IN;
  wire ctop_inf_dp1_tlp_maxPayloadSize$EN;

  // register ctop_inf_dp1_tlp_maxReadReqSize
  reg [12 : 0] ctop_inf_dp1_tlp_maxReadReqSize;
  wire [12 : 0] ctop_inf_dp1_tlp_maxReadReqSize$D_IN;
  wire ctop_inf_dp1_tlp_maxReadReqSize$EN;

  // register ctop_inf_dp1_tlp_mesgComplReceived
  reg [16 : 0] ctop_inf_dp1_tlp_mesgComplReceived;
  reg [16 : 0] ctop_inf_dp1_tlp_mesgComplReceived$D_IN;
  wire ctop_inf_dp1_tlp_mesgComplReceived$EN;

  // register ctop_inf_dp1_tlp_mesgLengthRemainPull
  reg [16 : 0] ctop_inf_dp1_tlp_mesgLengthRemainPull;
  wire [16 : 0] ctop_inf_dp1_tlp_mesgLengthRemainPull$D_IN;
  wire ctop_inf_dp1_tlp_mesgLengthRemainPull$EN;

  // register ctop_inf_dp1_tlp_mesgLengthRemainPush
  reg [16 : 0] ctop_inf_dp1_tlp_mesgLengthRemainPush;
  wire [16 : 0] ctop_inf_dp1_tlp_mesgLengthRemainPush$D_IN;
  wire ctop_inf_dp1_tlp_mesgLengthRemainPush$EN;

  // register ctop_inf_dp1_tlp_nearBufReady
  reg ctop_inf_dp1_tlp_nearBufReady;
  wire ctop_inf_dp1_tlp_nearBufReady$D_IN, ctop_inf_dp1_tlp_nearBufReady$EN;

  // register ctop_inf_dp1_tlp_outDwRemain
  reg [9 : 0] ctop_inf_dp1_tlp_outDwRemain;
  wire [9 : 0] ctop_inf_dp1_tlp_outDwRemain$D_IN;
  wire ctop_inf_dp1_tlp_outDwRemain$EN;

  // register ctop_inf_dp1_tlp_postSeqDwell
  reg [3 : 0] ctop_inf_dp1_tlp_postSeqDwell;
  wire [3 : 0] ctop_inf_dp1_tlp_postSeqDwell$D_IN;
  wire ctop_inf_dp1_tlp_postSeqDwell$EN;

  // register ctop_inf_dp1_tlp_pullTagMatch
  reg ctop_inf_dp1_tlp_pullTagMatch;
  wire ctop_inf_dp1_tlp_pullTagMatch$D_IN, ctop_inf_dp1_tlp_pullTagMatch$EN;

  // register ctop_inf_dp1_tlp_rdRespDwRemain
  reg [9 : 0] ctop_inf_dp1_tlp_rdRespDwRemain;
  wire [9 : 0] ctop_inf_dp1_tlp_rdRespDwRemain$D_IN;
  wire ctop_inf_dp1_tlp_rdRespDwRemain$EN;

  // register ctop_inf_dp1_tlp_readHeaderSent
  reg ctop_inf_dp1_tlp_readHeaderSent;
  wire ctop_inf_dp1_tlp_readHeaderSent$D_IN,
       ctop_inf_dp1_tlp_readHeaderSent$EN;

  // register ctop_inf_dp1_tlp_readNxtDWAddr
  reg [12 : 0] ctop_inf_dp1_tlp_readNxtDWAddr;
  wire [12 : 0] ctop_inf_dp1_tlp_readNxtDWAddr$D_IN;
  wire ctop_inf_dp1_tlp_readNxtDWAddr$EN;

  // register ctop_inf_dp1_tlp_readRemainDWLen
  reg [9 : 0] ctop_inf_dp1_tlp_readRemainDWLen;
  wire [9 : 0] ctop_inf_dp1_tlp_readRemainDWLen$D_IN;
  wire ctop_inf_dp1_tlp_readRemainDWLen$EN;

  // register ctop_inf_dp1_tlp_readStarted
  reg ctop_inf_dp1_tlp_readStarted;
  wire ctop_inf_dp1_tlp_readStarted$D_IN, ctop_inf_dp1_tlp_readStarted$EN;

  // register ctop_inf_dp1_tlp_remDone
  reg ctop_inf_dp1_tlp_remDone;
  wire ctop_inf_dp1_tlp_remDone$D_IN, ctop_inf_dp1_tlp_remDone$EN;

  // register ctop_inf_dp1_tlp_remMesgAccu
  reg [15 : 0] ctop_inf_dp1_tlp_remMesgAccu;
  reg [15 : 0] ctop_inf_dp1_tlp_remMesgAccu$D_IN;
  wire ctop_inf_dp1_tlp_remMesgAccu$EN;

  // register ctop_inf_dp1_tlp_remMesgAddr
  reg [15 : 0] ctop_inf_dp1_tlp_remMesgAddr;
  wire [15 : 0] ctop_inf_dp1_tlp_remMesgAddr$D_IN;
  wire ctop_inf_dp1_tlp_remMesgAddr$EN;

  // register ctop_inf_dp1_tlp_remMetaAddr
  reg [15 : 0] ctop_inf_dp1_tlp_remMetaAddr;
  wire [15 : 0] ctop_inf_dp1_tlp_remMetaAddr$D_IN;
  wire ctop_inf_dp1_tlp_remMetaAddr$EN;

  // register ctop_inf_dp1_tlp_remStart
  reg ctop_inf_dp1_tlp_remStart;
  wire ctop_inf_dp1_tlp_remStart$D_IN, ctop_inf_dp1_tlp_remStart$EN;

  // register ctop_inf_dp1_tlp_reqMesgInFlight
  reg ctop_inf_dp1_tlp_reqMesgInFlight;
  reg ctop_inf_dp1_tlp_reqMesgInFlight$D_IN;
  wire ctop_inf_dp1_tlp_reqMesgInFlight$EN;

  // register ctop_inf_dp1_tlp_reqMetaBodyInFlight
  reg ctop_inf_dp1_tlp_reqMetaBodyInFlight;
  wire ctop_inf_dp1_tlp_reqMetaBodyInFlight$D_IN,
       ctop_inf_dp1_tlp_reqMetaBodyInFlight$EN;

  // register ctop_inf_dp1_tlp_reqMetaInFlight
  reg ctop_inf_dp1_tlp_reqMetaInFlight;
  reg ctop_inf_dp1_tlp_reqMetaInFlight$D_IN;
  wire ctop_inf_dp1_tlp_reqMetaInFlight$EN;

  // register ctop_inf_dp1_tlp_srcMesgAccu
  reg [31 : 0] ctop_inf_dp1_tlp_srcMesgAccu;
  wire [31 : 0] ctop_inf_dp1_tlp_srcMesgAccu$D_IN;
  wire ctop_inf_dp1_tlp_srcMesgAccu$EN;

  // register ctop_inf_dp1_tlp_tlpMetaSent
  reg ctop_inf_dp1_tlp_tlpMetaSent;
  wire ctop_inf_dp1_tlp_tlpMetaSent$D_IN, ctop_inf_dp1_tlp_tlpMetaSent$EN;

  // register ctop_inf_dp1_tlp_tlpRcvBusy
  reg ctop_inf_dp1_tlp_tlpRcvBusy;
  reg ctop_inf_dp1_tlp_tlpRcvBusy$D_IN;
  wire ctop_inf_dp1_tlp_tlpRcvBusy$EN;

  // register ctop_inf_dp1_tlp_tlpXmtBusy
  reg ctop_inf_dp1_tlp_tlpXmtBusy;
  reg ctop_inf_dp1_tlp_tlpXmtBusy$D_IN;
  wire ctop_inf_dp1_tlp_tlpXmtBusy$EN;

  // register ctop_inf_dp1_tlp_writeDWAddr
  reg [12 : 0] ctop_inf_dp1_tlp_writeDWAddr;
  wire [12 : 0] ctop_inf_dp1_tlp_writeDWAddr$D_IN;
  wire ctop_inf_dp1_tlp_writeDWAddr$EN;

  // register ctop_inf_dp1_tlp_writeLastBE
  reg [3 : 0] ctop_inf_dp1_tlp_writeLastBE;
  wire [3 : 0] ctop_inf_dp1_tlp_writeLastBE$D_IN;
  wire ctop_inf_dp1_tlp_writeLastBE$EN;

  // register ctop_inf_dp1_tlp_writeRemainDWLen
  reg [9 : 0] ctop_inf_dp1_tlp_writeRemainDWLen;
  wire [9 : 0] ctop_inf_dp1_tlp_writeRemainDWLen$D_IN;
  wire ctop_inf_dp1_tlp_writeRemainDWLen$EN;

  // register ctop_inf_dp1_tlp_xmtMetaInFlight
  reg ctop_inf_dp1_tlp_xmtMetaInFlight;
  wire ctop_inf_dp1_tlp_xmtMetaInFlight$D_IN,
       ctop_inf_dp1_tlp_xmtMetaInFlight$EN;

  // register ctop_inf_dp1_tlp_xmtMetaOK
  reg ctop_inf_dp1_tlp_xmtMetaOK;
  reg ctop_inf_dp1_tlp_xmtMetaOK$D_IN;
  wire ctop_inf_dp1_tlp_xmtMetaOK$EN;

  // register ctop_inf_dp1_wci_cEdge
  reg [2 : 0] ctop_inf_dp1_wci_cEdge;
  wire [2 : 0] ctop_inf_dp1_wci_cEdge$D_IN;
  wire ctop_inf_dp1_wci_cEdge$EN;

  // register ctop_inf_dp1_wci_cState
  reg [2 : 0] ctop_inf_dp1_wci_cState;
  wire [2 : 0] ctop_inf_dp1_wci_cState$D_IN;
  wire ctop_inf_dp1_wci_cState$EN;

  // register ctop_inf_dp1_wci_ctlAckReg
  reg ctop_inf_dp1_wci_ctlAckReg;
  wire ctop_inf_dp1_wci_ctlAckReg$D_IN, ctop_inf_dp1_wci_ctlAckReg$EN;

  // register ctop_inf_dp1_wci_ctlOpActive
  reg ctop_inf_dp1_wci_ctlOpActive;
  wire ctop_inf_dp1_wci_ctlOpActive$D_IN, ctop_inf_dp1_wci_ctlOpActive$EN;

  // register ctop_inf_dp1_wci_illegalEdge
  reg ctop_inf_dp1_wci_illegalEdge;
  wire ctop_inf_dp1_wci_illegalEdge$D_IN, ctop_inf_dp1_wci_illegalEdge$EN;

  // register ctop_inf_dp1_wci_nState
  reg [2 : 0] ctop_inf_dp1_wci_nState;
  reg [2 : 0] ctop_inf_dp1_wci_nState$D_IN;
  wire ctop_inf_dp1_wci_nState$EN;

  // register ctop_inf_dp1_wci_reqF_countReg
  reg [1 : 0] ctop_inf_dp1_wci_reqF_countReg;
  wire [1 : 0] ctop_inf_dp1_wci_reqF_countReg$D_IN;
  wire ctop_inf_dp1_wci_reqF_countReg$EN;

  // register ctop_inf_dp1_wci_respF_c_r
  reg [1 : 0] ctop_inf_dp1_wci_respF_c_r;
  wire [1 : 0] ctop_inf_dp1_wci_respF_c_r$D_IN;
  wire ctop_inf_dp1_wci_respF_c_r$EN;

  // register ctop_inf_dp1_wci_respF_q_0
  reg [33 : 0] ctop_inf_dp1_wci_respF_q_0;
  reg [33 : 0] ctop_inf_dp1_wci_respF_q_0$D_IN;
  wire ctop_inf_dp1_wci_respF_q_0$EN;

  // register ctop_inf_dp1_wci_respF_q_1
  reg [33 : 0] ctop_inf_dp1_wci_respF_q_1;
  reg [33 : 0] ctop_inf_dp1_wci_respF_q_1$D_IN;
  wire ctop_inf_dp1_wci_respF_q_1$EN;

  // register ctop_inf_dp1_wci_sFlagReg
  reg ctop_inf_dp1_wci_sFlagReg;
  wire ctop_inf_dp1_wci_sFlagReg$D_IN, ctop_inf_dp1_wci_sFlagReg$EN;

  // register ctop_inf_dp1_wci_sThreadBusy_d
  reg ctop_inf_dp1_wci_sThreadBusy_d;
  wire ctop_inf_dp1_wci_sThreadBusy_d$D_IN, ctop_inf_dp1_wci_sThreadBusy_d$EN;

  // register ctop_inf_dp1_wmi_addr
  reg [13 : 0] ctop_inf_dp1_wmi_addr;
  wire [13 : 0] ctop_inf_dp1_wmi_addr$D_IN;
  wire ctop_inf_dp1_wmi_addr$EN;

  // register ctop_inf_dp1_wmi_bufDwell
  reg [1 : 0] ctop_inf_dp1_wmi_bufDwell;
  wire [1 : 0] ctop_inf_dp1_wmi_bufDwell$D_IN;
  wire ctop_inf_dp1_wmi_bufDwell$EN;

  // register ctop_inf_dp1_wmi_bytesRemainReq
  reg [13 : 0] ctop_inf_dp1_wmi_bytesRemainReq;
  wire [13 : 0] ctop_inf_dp1_wmi_bytesRemainReq$D_IN;
  wire ctop_inf_dp1_wmi_bytesRemainReq$EN;

  // register ctop_inf_dp1_wmi_bytesRemainResp
  reg [13 : 0] ctop_inf_dp1_wmi_bytesRemainResp;
  wire [13 : 0] ctop_inf_dp1_wmi_bytesRemainResp$D_IN;
  wire ctop_inf_dp1_wmi_bytesRemainResp$EN;

  // register ctop_inf_dp1_wmi_doneWithMesg
  reg ctop_inf_dp1_wmi_doneWithMesg;
  wire ctop_inf_dp1_wmi_doneWithMesg$D_IN, ctop_inf_dp1_wmi_doneWithMesg$EN;

  // register ctop_inf_dp1_wmi_lastMesg
  reg [31 : 0] ctop_inf_dp1_wmi_lastMesg;
  wire [31 : 0] ctop_inf_dp1_wmi_lastMesg$D_IN;
  wire ctop_inf_dp1_wmi_lastMesg$EN;

  // register ctop_inf_dp1_wmi_lclMesgAddr
  reg [14 : 0] ctop_inf_dp1_wmi_lclMesgAddr;
  wire [14 : 0] ctop_inf_dp1_wmi_lclMesgAddr$D_IN;
  wire ctop_inf_dp1_wmi_lclMesgAddr$EN;

  // register ctop_inf_dp1_wmi_lclMetaAddr
  reg [14 : 0] ctop_inf_dp1_wmi_lclMetaAddr;
  wire [14 : 0] ctop_inf_dp1_wmi_lclMetaAddr$D_IN;
  wire ctop_inf_dp1_wmi_lclMetaAddr$EN;

  // register ctop_inf_dp1_wmi_mesgBufReady
  reg ctop_inf_dp1_wmi_mesgBufReady;
  wire ctop_inf_dp1_wmi_mesgBufReady$D_IN, ctop_inf_dp1_wmi_mesgBufReady$EN;

  // register ctop_inf_dp1_wmi_mesgBusy
  reg ctop_inf_dp1_wmi_mesgBusy;
  wire ctop_inf_dp1_wmi_mesgBusy$D_IN, ctop_inf_dp1_wmi_mesgBusy$EN;

  // register ctop_inf_dp1_wmi_mesgCount
  reg [31 : 0] ctop_inf_dp1_wmi_mesgCount;
  wire [31 : 0] ctop_inf_dp1_wmi_mesgCount$D_IN;
  wire ctop_inf_dp1_wmi_mesgCount$EN;

  // register ctop_inf_dp1_wmi_mesgDone
  reg ctop_inf_dp1_wmi_mesgDone;
  wire ctop_inf_dp1_wmi_mesgDone$D_IN, ctop_inf_dp1_wmi_mesgDone$EN;

  // register ctop_inf_dp1_wmi_mesgMeta
  reg [128 : 0] ctop_inf_dp1_wmi_mesgMeta;
  wire [128 : 0] ctop_inf_dp1_wmi_mesgMeta$D_IN;
  wire ctop_inf_dp1_wmi_mesgMeta$EN;

  // register ctop_inf_dp1_wmi_mesgStart
  reg ctop_inf_dp1_wmi_mesgStart;
  wire ctop_inf_dp1_wmi_mesgStart$D_IN, ctop_inf_dp1_wmi_mesgStart$EN;

  // register ctop_inf_dp1_wmi_metaBusy
  reg ctop_inf_dp1_wmi_metaBusy;
  wire ctop_inf_dp1_wmi_metaBusy$D_IN, ctop_inf_dp1_wmi_metaBusy$EN;

  // register ctop_inf_dp1_wmi_p4B
  reg [1 : 0] ctop_inf_dp1_wmi_p4B;
  wire [1 : 0] ctop_inf_dp1_wmi_p4B$D_IN;
  wire ctop_inf_dp1_wmi_p4B$EN;

  // register ctop_inf_dp1_wmi_rdActive
  reg ctop_inf_dp1_wmi_rdActive;
  wire ctop_inf_dp1_wmi_rdActive$D_IN, ctop_inf_dp1_wmi_rdActive$EN;

  // register ctop_inf_dp1_wmi_reqCount
  reg [15 : 0] ctop_inf_dp1_wmi_reqCount;
  wire [15 : 0] ctop_inf_dp1_wmi_reqCount$D_IN;
  wire ctop_inf_dp1_wmi_reqCount$EN;

  // register ctop_inf_dp1_wmi_thisMesg
  reg [31 : 0] ctop_inf_dp1_wmi_thisMesg;
  wire [31 : 0] ctop_inf_dp1_wmi_thisMesg$D_IN;
  wire ctop_inf_dp1_wmi_thisMesg$EN;

  // register ctop_inf_dp1_wmi_wmi_blockReq
  reg ctop_inf_dp1_wmi_wmi_blockReq;
  wire ctop_inf_dp1_wmi_wmi_blockReq$D_IN, ctop_inf_dp1_wmi_wmi_blockReq$EN;

  // register ctop_inf_dp1_wmi_wmi_dhF_countReg
  reg [1 : 0] ctop_inf_dp1_wmi_wmi_dhF_countReg;
  wire [1 : 0] ctop_inf_dp1_wmi_wmi_dhF_countReg$D_IN;
  wire ctop_inf_dp1_wmi_wmi_dhF_countReg$EN;

  // register ctop_inf_dp1_wmi_wmi_dhF_levelsValid
  reg ctop_inf_dp1_wmi_wmi_dhF_levelsValid;
  wire ctop_inf_dp1_wmi_wmi_dhF_levelsValid$D_IN,
       ctop_inf_dp1_wmi_wmi_dhF_levelsValid$EN;

  // register ctop_inf_dp1_wmi_wmi_errorSticky
  reg ctop_inf_dp1_wmi_wmi_errorSticky;
  wire ctop_inf_dp1_wmi_wmi_errorSticky$D_IN,
       ctop_inf_dp1_wmi_wmi_errorSticky$EN;

  // register ctop_inf_dp1_wmi_wmi_mFlagF_countReg
  reg [1 : 0] ctop_inf_dp1_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] ctop_inf_dp1_wmi_wmi_mFlagF_countReg$D_IN;
  wire ctop_inf_dp1_wmi_wmi_mFlagF_countReg$EN;

  // register ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid
  reg ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid;
  wire ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$D_IN,
       ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$EN;

  // register ctop_inf_dp1_wmi_wmi_mFlagReg
  reg [31 : 0] ctop_inf_dp1_wmi_wmi_mFlagReg;
  wire [31 : 0] ctop_inf_dp1_wmi_wmi_mFlagReg$D_IN;
  wire ctop_inf_dp1_wmi_wmi_mFlagReg$EN;

  // register ctop_inf_dp1_wmi_wmi_operateD
  reg ctop_inf_dp1_wmi_wmi_operateD;
  wire ctop_inf_dp1_wmi_wmi_operateD$D_IN, ctop_inf_dp1_wmi_wmi_operateD$EN;

  // register ctop_inf_dp1_wmi_wmi_peerIsReady
  reg ctop_inf_dp1_wmi_wmi_peerIsReady;
  wire ctop_inf_dp1_wmi_wmi_peerIsReady$D_IN,
       ctop_inf_dp1_wmi_wmi_peerIsReady$EN;

  // register ctop_inf_dp1_wmi_wmi_reqF_countReg
  reg [1 : 0] ctop_inf_dp1_wmi_wmi_reqF_countReg;
  wire [1 : 0] ctop_inf_dp1_wmi_wmi_reqF_countReg$D_IN;
  wire ctop_inf_dp1_wmi_wmi_reqF_countReg$EN;

  // register ctop_inf_dp1_wmi_wmi_reqF_levelsValid
  reg ctop_inf_dp1_wmi_wmi_reqF_levelsValid;
  wire ctop_inf_dp1_wmi_wmi_reqF_levelsValid$D_IN,
       ctop_inf_dp1_wmi_wmi_reqF_levelsValid$EN;

  // register ctop_inf_dp1_wmi_wmi_respF_c_r
  reg [1 : 0] ctop_inf_dp1_wmi_wmi_respF_c_r;
  wire [1 : 0] ctop_inf_dp1_wmi_wmi_respF_c_r$D_IN;
  wire ctop_inf_dp1_wmi_wmi_respF_c_r$EN;

  // register ctop_inf_dp1_wmi_wmi_respF_q_0
  reg [33 : 0] ctop_inf_dp1_wmi_wmi_respF_q_0;
  reg [33 : 0] ctop_inf_dp1_wmi_wmi_respF_q_0$D_IN;
  wire ctop_inf_dp1_wmi_wmi_respF_q_0$EN;

  // register ctop_inf_dp1_wmi_wmi_respF_q_1
  reg [33 : 0] ctop_inf_dp1_wmi_wmi_respF_q_1;
  reg [33 : 0] ctop_inf_dp1_wmi_wmi_respF_q_1$D_IN;
  wire ctop_inf_dp1_wmi_wmi_respF_q_1$EN;

  // register ctop_inf_dp1_wmi_wmi_sFlagReg
  reg [31 : 0] ctop_inf_dp1_wmi_wmi_sFlagReg;
  wire [31 : 0] ctop_inf_dp1_wmi_wmi_sFlagReg$D_IN;
  wire ctop_inf_dp1_wmi_wmi_sFlagReg$EN;

  // register ctop_inf_dp1_wmi_wmi_statusR
  reg [7 : 0] ctop_inf_dp1_wmi_wmi_statusR;
  wire [7 : 0] ctop_inf_dp1_wmi_wmi_statusR$D_IN;
  wire ctop_inf_dp1_wmi_wmi_statusR$EN;

  // register ctop_inf_dp1_wmi_wmi_trafficSticky
  reg ctop_inf_dp1_wmi_wmi_trafficSticky;
  wire ctop_inf_dp1_wmi_wmi_trafficSticky$D_IN,
       ctop_inf_dp1_wmi_wmi_trafficSticky$EN;

  // register ctop_inf_dp1_wmi_wrActive
  reg ctop_inf_dp1_wmi_wrActive;
  wire ctop_inf_dp1_wmi_wrActive$D_IN, ctop_inf_dp1_wmi_wrActive$EN;

  // register ctop_inf_dp1_wmi_wrFinalize
  reg ctop_inf_dp1_wmi_wrFinalize;
  wire ctop_inf_dp1_wmi_wrFinalize$D_IN, ctop_inf_dp1_wmi_wrFinalize$EN;

  // register ctop_inf_dp1_wmi_wrtCount
  reg [15 : 0] ctop_inf_dp1_wmi_wrtCount;
  wire [15 : 0] ctop_inf_dp1_wmi_wrtCount$D_IN;
  wire ctop_inf_dp1_wmi_wrtCount$EN;

  // register ctop_inf_dp1_wti_nowReq
  reg [66 : 0] ctop_inf_dp1_wti_nowReq;
  wire [66 : 0] ctop_inf_dp1_wti_nowReq$D_IN;
  wire ctop_inf_dp1_wti_nowReq$EN;

  // register ctop_inf_itc0_wti_nowReq
  reg [66 : 0] ctop_inf_itc0_wti_nowReq;
  wire [66 : 0] ctop_inf_itc0_wti_nowReq$D_IN;
  wire ctop_inf_itc0_wti_nowReq$EN;

  // register ctop_inf_itc0_wti_sThreadBusy_d
  reg ctop_inf_itc0_wti_sThreadBusy_d;
  wire ctop_inf_itc0_wti_sThreadBusy_d$D_IN,
       ctop_inf_itc0_wti_sThreadBusy_d$EN;

  // register ctop_inf_itc1_wti_nowReq
  reg [66 : 0] ctop_inf_itc1_wti_nowReq;
  wire [66 : 0] ctop_inf_itc1_wti_nowReq$D_IN;
  wire ctop_inf_itc1_wti_nowReq$EN;

  // register ctop_inf_itc1_wti_sThreadBusy_d
  reg ctop_inf_itc1_wti_sThreadBusy_d;
  wire ctop_inf_itc1_wti_sThreadBusy_d$D_IN,
       ctop_inf_itc1_wti_sThreadBusy_d$EN;

  // register i2pAF_head_wrapped
  reg i2pAF_head_wrapped;
  wire i2pAF_head_wrapped$D_IN, i2pAF_head_wrapped$EN;

  // register i2pAF_tail_wrapped
  reg i2pAF_tail_wrapped;
  wire i2pAF_tail_wrapped$D_IN, i2pAF_tail_wrapped$EN;

  // register i2pS
  reg [152 : 0] i2pS;
  wire [152 : 0] i2pS$D_IN;
  wire i2pS$EN;

  // register p2iAF_head_wrapped
  reg p2iAF_head_wrapped;
  wire p2iAF_head_wrapped$D_IN, p2iAF_head_wrapped$EN;

  // register p2iAF_tail_wrapped
  reg p2iAF_tail_wrapped;
  wire p2iAF_tail_wrapped$D_IN, p2iAF_tail_wrapped$EN;

  // register p2iS
  reg [152 : 0] p2iS;
  wire [152 : 0] p2iS$D_IN;
  wire p2iS$EN;

  // register pcie_irq_rInterruptDi
  reg [7 : 0] pcie_irq_rInterruptDi;
  wire [7 : 0] pcie_irq_rInterruptDi$D_IN;
  wire pcie_irq_rInterruptDi$EN;

  // register pcie_irq_rInterruptN
  reg pcie_irq_rInterruptN;
  wire pcie_irq_rInterruptN$D_IN, pcie_irq_rInterruptN$EN;

  // register pcie_irq_rInterrupting
  reg pcie_irq_rInterrupting;
  wire pcie_irq_rInterrupting$D_IN, pcie_irq_rInterrupting$EN;

  // register pcie_irq_rMMEnabled
  reg [2 : 0] pcie_irq_rMMEnabled;
  wire [2 : 0] pcie_irq_rMMEnabled$D_IN;
  wire pcie_irq_rMMEnabled$EN;

  // register pcie_irq_rMSIEnabled
  reg pcie_irq_rMSIEnabled;
  wire pcie_irq_rMSIEnabled$D_IN, pcie_irq_rMSIEnabled$EN;

  // register tcGbe0_wti_nowReq
  reg [66 : 0] tcGbe0_wti_nowReq;
  wire [66 : 0] tcGbe0_wti_nowReq$D_IN;
  wire tcGbe0_wti_nowReq$EN;

  // register tcGbe0_wti_sThreadBusy_d
  reg tcGbe0_wti_sThreadBusy_d;
  wire tcGbe0_wti_sThreadBusy_d$D_IN, tcGbe0_wti_sThreadBusy_d$EN;

  // ports of submodule ctop_app_appW2_respF_memory
  wire [60 : 0] ctop_app_appW2_respF_memory$DIA,
		ctop_app_appW2_respF_memory$DIB,
		ctop_app_appW2_respF_memory$DOB;
  wire [10 : 0] ctop_app_appW2_respF_memory$ADDRA,
		ctop_app_appW2_respF_memory$ADDRB;
  wire ctop_app_appW2_respF_memory$ENA,
       ctop_app_appW2_respF_memory$ENB,
       ctop_app_appW2_respF_memory$WEA,
       ctop_app_appW2_respF_memory$WEB;

  // ports of submodule ctop_app_appW2_wci_isReset
  wire ctop_app_appW2_wci_isReset$VAL;

  // ports of submodule ctop_app_appW2_wci_reqF
  wire [59 : 0] ctop_app_appW2_wci_reqF$D_IN, ctop_app_appW2_wci_reqF$D_OUT;
  wire ctop_app_appW2_wci_reqF$CLR,
       ctop_app_appW2_wci_reqF$DEQ,
       ctop_app_appW2_wci_reqF$EMPTY_N,
       ctop_app_appW2_wci_reqF$ENQ;

  // ports of submodule ctop_app_appW2_wmi_isReset
  wire ctop_app_appW2_wmi_isReset$VAL;

  // ports of submodule ctop_app_appW2_wmi_respF
  wire [33 : 0] ctop_app_appW2_wmi_respF$D_IN, ctop_app_appW2_wmi_respF$D_OUT;
  wire ctop_app_appW2_wmi_respF$CLR,
       ctop_app_appW2_wmi_respF$DEQ,
       ctop_app_appW2_wmi_respF$EMPTY_N,
       ctop_app_appW2_wmi_respF$ENQ,
       ctop_app_appW2_wmi_respF$FULL_N;

  // ports of submodule ctop_app_appW2_wsiM_isReset
  wire ctop_app_appW2_wsiM_isReset$VAL;

  // ports of submodule ctop_app_appW2_wsiS_isReset
  wire ctop_app_appW2_wsiS_isReset$VAL;

  // ports of submodule ctop_app_appW2_wsiS_reqFifo
  wire [60 : 0] ctop_app_appW2_wsiS_reqFifo$D_IN,
		ctop_app_appW2_wsiS_reqFifo$D_OUT;
  wire ctop_app_appW2_wsiS_reqFifo$CLR,
       ctop_app_appW2_wsiS_reqFifo$DEQ,
       ctop_app_appW2_wsiS_reqFifo$EMPTY_N,
       ctop_app_appW2_wsiS_reqFifo$ENQ;

  // ports of submodule ctop_app_appW3_mesgRF
  wire [31 : 0] ctop_app_appW3_mesgRF$D_IN, ctop_app_appW3_mesgRF$D_OUT;
  wire ctop_app_appW3_mesgRF$CLR,
       ctop_app_appW3_mesgRF$DEQ,
       ctop_app_appW3_mesgRF$EMPTY_N,
       ctop_app_appW3_mesgRF$ENQ,
       ctop_app_appW3_mesgRF$FULL_N;

  // ports of submodule ctop_app_appW3_mesgWF_memory
  wire [31 : 0] ctop_app_appW3_mesgWF_memory$DIA,
		ctop_app_appW3_mesgWF_memory$DIB,
		ctop_app_appW3_mesgWF_memory$DOB;
  wire [11 : 0] ctop_app_appW3_mesgWF_memory$ADDRA,
		ctop_app_appW3_mesgWF_memory$ADDRB;
  wire ctop_app_appW3_mesgWF_memory$ENA,
       ctop_app_appW3_mesgWF_memory$ENB,
       ctop_app_appW3_mesgWF_memory$WEA,
       ctop_app_appW3_mesgWF_memory$WEB;

  // ports of submodule ctop_app_appW3_metaRF
  wire [31 : 0] ctop_app_appW3_metaRF$D_IN, ctop_app_appW3_metaRF$D_OUT;
  wire ctop_app_appW3_metaRF$CLR,
       ctop_app_appW3_metaRF$DEQ,
       ctop_app_appW3_metaRF$EMPTY_N,
       ctop_app_appW3_metaRF$ENQ,
       ctop_app_appW3_metaRF$FULL_N;

  // ports of submodule ctop_app_appW3_metaWF
  wire [31 : 0] ctop_app_appW3_metaWF$D_IN, ctop_app_appW3_metaWF$D_OUT;
  wire ctop_app_appW3_metaWF$CLR,
       ctop_app_appW3_metaWF$DEQ,
       ctop_app_appW3_metaWF$EMPTY_N,
       ctop_app_appW3_metaWF$ENQ,
       ctop_app_appW3_metaWF$FULL_N;

  // ports of submodule ctop_app_appW3_wci_isReset
  wire ctop_app_appW3_wci_isReset$VAL;

  // ports of submodule ctop_app_appW3_wci_reqF
  wire [59 : 0] ctop_app_appW3_wci_reqF$D_IN, ctop_app_appW3_wci_reqF$D_OUT;
  wire ctop_app_appW3_wci_reqF$CLR,
       ctop_app_appW3_wci_reqF$DEQ,
       ctop_app_appW3_wci_reqF$EMPTY_N,
       ctop_app_appW3_wci_reqF$ENQ;

  // ports of submodule ctop_app_appW3_wide16Fa
  wire [127 : 0] ctop_app_appW3_wide16Fa$D_IN, ctop_app_appW3_wide16Fa$D_OUT;
  wire ctop_app_appW3_wide16Fa$CLR,
       ctop_app_appW3_wide16Fa$DEQ,
       ctop_app_appW3_wide16Fa$EMPTY_N,
       ctop_app_appW3_wide16Fa$ENQ,
       ctop_app_appW3_wide16Fa$FULL_N;

  // ports of submodule ctop_app_appW3_wide16Fb
  wire [127 : 0] ctop_app_appW3_wide16Fb$D_IN, ctop_app_appW3_wide16Fb$D_OUT;
  wire ctop_app_appW3_wide16Fb$CLR,
       ctop_app_appW3_wide16Fb$DEQ,
       ctop_app_appW3_wide16Fb$EMPTY_N,
       ctop_app_appW3_wide16Fb$ENQ,
       ctop_app_appW3_wide16Fb$FULL_N;

  // ports of submodule ctop_app_appW3_wide16Fc
  wire [127 : 0] ctop_app_appW3_wide16Fc$D_IN, ctop_app_appW3_wide16Fc$D_OUT;
  wire ctop_app_appW3_wide16Fc$CLR,
       ctop_app_appW3_wide16Fc$DEQ,
       ctop_app_appW3_wide16Fc$EMPTY_N,
       ctop_app_appW3_wide16Fc$ENQ,
       ctop_app_appW3_wide16Fc$FULL_N;

  // ports of submodule ctop_app_appW3_wmemi_isReset
  wire ctop_app_appW3_wmemi_isReset$VAL;

  // ports of submodule ctop_app_appW3_wmemi_respF
  wire [130 : 0] ctop_app_appW3_wmemi_respF$D_IN,
		 ctop_app_appW3_wmemi_respF$D_OUT;
  wire ctop_app_appW3_wmemi_respF$CLR,
       ctop_app_appW3_wmemi_respF$DEQ,
       ctop_app_appW3_wmemi_respF$EMPTY_N,
       ctop_app_appW3_wmemi_respF$ENQ,
       ctop_app_appW3_wmemi_respF$FULL_N;

  // ports of submodule ctop_app_appW3_wsiM_isReset
  wire ctop_app_appW3_wsiM_isReset$VAL;

  // ports of submodule ctop_app_appW3_wsiS_isReset
  wire ctop_app_appW3_wsiS_isReset$VAL;

  // ports of submodule ctop_app_appW3_wsiS_reqFifo
  wire [60 : 0] ctop_app_appW3_wsiS_reqFifo$D_IN,
		ctop_app_appW3_wsiS_reqFifo$D_OUT;
  wire ctop_app_appW3_wsiS_reqFifo$CLR,
       ctop_app_appW3_wsiS_reqFifo$DEQ,
       ctop_app_appW3_wsiS_reqFifo$EMPTY_N,
       ctop_app_appW3_wsiS_reqFifo$ENQ,
       ctop_app_appW3_wsiS_reqFifo$FULL_N;

  // ports of submodule ctop_app_appW4_respF_memory
  wire [60 : 0] ctop_app_appW4_respF_memory$DIA,
		ctop_app_appW4_respF_memory$DIB,
		ctop_app_appW4_respF_memory$DOB;
  wire [10 : 0] ctop_app_appW4_respF_memory$ADDRA,
		ctop_app_appW4_respF_memory$ADDRB;
  wire ctop_app_appW4_respF_memory$ENA,
       ctop_app_appW4_respF_memory$ENB,
       ctop_app_appW4_respF_memory$WEA,
       ctop_app_appW4_respF_memory$WEB;

  // ports of submodule ctop_app_appW4_wci_isReset
  wire ctop_app_appW4_wci_isReset$VAL;

  // ports of submodule ctop_app_appW4_wci_reqF
  wire [59 : 0] ctop_app_appW4_wci_reqF$D_IN, ctop_app_appW4_wci_reqF$D_OUT;
  wire ctop_app_appW4_wci_reqF$CLR,
       ctop_app_appW4_wci_reqF$DEQ,
       ctop_app_appW4_wci_reqF$EMPTY_N,
       ctop_app_appW4_wci_reqF$ENQ;

  // ports of submodule ctop_app_appW4_wmi_isReset
  wire ctop_app_appW4_wmi_isReset$VAL;

  // ports of submodule ctop_app_appW4_wmi_respF
  wire [33 : 0] ctop_app_appW4_wmi_respF$D_IN, ctop_app_appW4_wmi_respF$D_OUT;
  wire ctop_app_appW4_wmi_respF$CLR,
       ctop_app_appW4_wmi_respF$DEQ,
       ctop_app_appW4_wmi_respF$EMPTY_N,
       ctop_app_appW4_wmi_respF$ENQ,
       ctop_app_appW4_wmi_respF$FULL_N;

  // ports of submodule ctop_app_appW4_wsiM_isReset
  wire ctop_app_appW4_wsiM_isReset$VAL;

  // ports of submodule ctop_app_appW4_wsiS_isReset
  wire ctop_app_appW4_wsiS_isReset$VAL;

  // ports of submodule ctop_app_appW4_wsiS_reqFifo
  wire [60 : 0] ctop_app_appW4_wsiS_reqFifo$D_IN,
		ctop_app_appW4_wsiS_reqFifo$D_OUT;
  wire ctop_app_appW4_wsiS_reqFifo$CLR,
       ctop_app_appW4_wsiS_reqFifo$DEQ,
       ctop_app_appW4_wsiS_reqFifo$EMPTY_N,
       ctop_app_appW4_wsiS_reqFifo$ENQ,
       ctop_app_appW4_wsiS_reqFifo$FULL_N;

  // ports of submodule ctop_inf_cp
  wire [152 : 0] ctop_inf_cp$server_request_put,
		 ctop_inf_cp$server_response_get;
  wire [63 : 0] ctop_inf_cp$cpNow;
  wire [31 : 0] ctop_inf_cp$wci_Vm_0_MData,
		ctop_inf_cp$wci_Vm_0_SData,
		ctop_inf_cp$wci_Vm_10_MData,
		ctop_inf_cp$wci_Vm_10_SData,
		ctop_inf_cp$wci_Vm_11_MData,
		ctop_inf_cp$wci_Vm_11_SData,
		ctop_inf_cp$wci_Vm_12_MData,
		ctop_inf_cp$wci_Vm_12_SData,
		ctop_inf_cp$wci_Vm_13_MData,
		ctop_inf_cp$wci_Vm_13_SData,
		ctop_inf_cp$wci_Vm_14_MData,
		ctop_inf_cp$wci_Vm_14_SData,
		ctop_inf_cp$wci_Vm_1_MData,
		ctop_inf_cp$wci_Vm_1_SData,
		ctop_inf_cp$wci_Vm_2_MData,
		ctop_inf_cp$wci_Vm_2_SData,
		ctop_inf_cp$wci_Vm_3_MData,
		ctop_inf_cp$wci_Vm_3_SData,
		ctop_inf_cp$wci_Vm_4_MData,
		ctop_inf_cp$wci_Vm_4_SData,
		ctop_inf_cp$wci_Vm_5_MData,
		ctop_inf_cp$wci_Vm_5_SData,
		ctop_inf_cp$wci_Vm_6_MData,
		ctop_inf_cp$wci_Vm_6_SData,
		ctop_inf_cp$wci_Vm_7_MData,
		ctop_inf_cp$wci_Vm_7_SData,
		ctop_inf_cp$wci_Vm_8_MData,
		ctop_inf_cp$wci_Vm_8_SData,
		ctop_inf_cp$wci_Vm_9_MData,
		ctop_inf_cp$wci_Vm_9_SData;
  wire [19 : 0] ctop_inf_cp$wci_Vm_0_MAddr,
		ctop_inf_cp$wci_Vm_10_MAddr,
		ctop_inf_cp$wci_Vm_11_MAddr,
		ctop_inf_cp$wci_Vm_12_MAddr,
		ctop_inf_cp$wci_Vm_13_MAddr,
		ctop_inf_cp$wci_Vm_14_MAddr,
		ctop_inf_cp$wci_Vm_1_MAddr,
		ctop_inf_cp$wci_Vm_2_MAddr,
		ctop_inf_cp$wci_Vm_3_MAddr,
		ctop_inf_cp$wci_Vm_4_MAddr,
		ctop_inf_cp$wci_Vm_5_MAddr,
		ctop_inf_cp$wci_Vm_6_MAddr,
		ctop_inf_cp$wci_Vm_7_MAddr,
		ctop_inf_cp$wci_Vm_8_MAddr,
		ctop_inf_cp$wci_Vm_9_MAddr;
  wire [3 : 0] ctop_inf_cp$wci_Vm_0_MByteEn,
	       ctop_inf_cp$wci_Vm_10_MByteEn,
	       ctop_inf_cp$wci_Vm_11_MByteEn,
	       ctop_inf_cp$wci_Vm_12_MByteEn,
	       ctop_inf_cp$wci_Vm_13_MByteEn,
	       ctop_inf_cp$wci_Vm_14_MByteEn,
	       ctop_inf_cp$wci_Vm_1_MByteEn,
	       ctop_inf_cp$wci_Vm_2_MByteEn,
	       ctop_inf_cp$wci_Vm_3_MByteEn,
	       ctop_inf_cp$wci_Vm_4_MByteEn,
	       ctop_inf_cp$wci_Vm_5_MByteEn,
	       ctop_inf_cp$wci_Vm_6_MByteEn,
	       ctop_inf_cp$wci_Vm_7_MByteEn,
	       ctop_inf_cp$wci_Vm_8_MByteEn,
	       ctop_inf_cp$wci_Vm_9_MByteEn;
  wire [2 : 0] ctop_inf_cp$switch_x,
	       ctop_inf_cp$wci_Vm_0_MCmd,
	       ctop_inf_cp$wci_Vm_10_MCmd,
	       ctop_inf_cp$wci_Vm_11_MCmd,
	       ctop_inf_cp$wci_Vm_12_MCmd,
	       ctop_inf_cp$wci_Vm_13_MCmd,
	       ctop_inf_cp$wci_Vm_14_MCmd,
	       ctop_inf_cp$wci_Vm_1_MCmd,
	       ctop_inf_cp$wci_Vm_2_MCmd,
	       ctop_inf_cp$wci_Vm_3_MCmd,
	       ctop_inf_cp$wci_Vm_4_MCmd,
	       ctop_inf_cp$wci_Vm_5_MCmd,
	       ctop_inf_cp$wci_Vm_6_MCmd,
	       ctop_inf_cp$wci_Vm_7_MCmd,
	       ctop_inf_cp$wci_Vm_8_MCmd,
	       ctop_inf_cp$wci_Vm_9_MCmd;
  wire [1 : 0] ctop_inf_cp$led,
	       ctop_inf_cp$wci_Vm_0_SFlag,
	       ctop_inf_cp$wci_Vm_0_SResp,
	       ctop_inf_cp$wci_Vm_10_MFlag,
	       ctop_inf_cp$wci_Vm_10_SFlag,
	       ctop_inf_cp$wci_Vm_10_SResp,
	       ctop_inf_cp$wci_Vm_11_MFlag,
	       ctop_inf_cp$wci_Vm_11_SFlag,
	       ctop_inf_cp$wci_Vm_11_SResp,
	       ctop_inf_cp$wci_Vm_12_MFlag,
	       ctop_inf_cp$wci_Vm_12_SFlag,
	       ctop_inf_cp$wci_Vm_12_SResp,
	       ctop_inf_cp$wci_Vm_13_SFlag,
	       ctop_inf_cp$wci_Vm_13_SResp,
	       ctop_inf_cp$wci_Vm_14_SFlag,
	       ctop_inf_cp$wci_Vm_14_SResp,
	       ctop_inf_cp$wci_Vm_1_SFlag,
	       ctop_inf_cp$wci_Vm_1_SResp,
	       ctop_inf_cp$wci_Vm_2_SFlag,
	       ctop_inf_cp$wci_Vm_2_SResp,
	       ctop_inf_cp$wci_Vm_3_SFlag,
	       ctop_inf_cp$wci_Vm_3_SResp,
	       ctop_inf_cp$wci_Vm_4_SFlag,
	       ctop_inf_cp$wci_Vm_4_SResp,
	       ctop_inf_cp$wci_Vm_5_SFlag,
	       ctop_inf_cp$wci_Vm_5_SResp,
	       ctop_inf_cp$wci_Vm_6_SFlag,
	       ctop_inf_cp$wci_Vm_6_SResp,
	       ctop_inf_cp$wci_Vm_7_SFlag,
	       ctop_inf_cp$wci_Vm_7_SResp,
	       ctop_inf_cp$wci_Vm_8_MFlag,
	       ctop_inf_cp$wci_Vm_8_SFlag,
	       ctop_inf_cp$wci_Vm_8_SResp,
	       ctop_inf_cp$wci_Vm_9_MFlag,
	       ctop_inf_cp$wci_Vm_9_SFlag,
	       ctop_inf_cp$wci_Vm_9_SResp;
  wire ctop_inf_cp$EN_server_request_put,
       ctop_inf_cp$EN_server_response_get,
       ctop_inf_cp$RDY_server_request_put,
       ctop_inf_cp$RDY_server_response_get,
       ctop_inf_cp$RST_N_wci_Vm_10,
       ctop_inf_cp$RST_N_wci_Vm_12,
       ctop_inf_cp$RST_N_wci_Vm_13,
       ctop_inf_cp$RST_N_wci_Vm_14,
       ctop_inf_cp$RST_N_wci_Vm_2,
       ctop_inf_cp$RST_N_wci_Vm_3,
       ctop_inf_cp$RST_N_wci_Vm_4,
       ctop_inf_cp$RST_N_wci_Vm_8,
       ctop_inf_cp$RST_N_wci_Vm_9,
       ctop_inf_cp$gps_ppsSyncIn_x,
       ctop_inf_cp$gps_ppsSyncOut,
       ctop_inf_cp$wci_Vm_0_MAddrSpace,
       ctop_inf_cp$wci_Vm_0_SThreadBusy,
       ctop_inf_cp$wci_Vm_10_MAddrSpace,
       ctop_inf_cp$wci_Vm_10_SThreadBusy,
       ctop_inf_cp$wci_Vm_11_MAddrSpace,
       ctop_inf_cp$wci_Vm_11_SThreadBusy,
       ctop_inf_cp$wci_Vm_12_MAddrSpace,
       ctop_inf_cp$wci_Vm_12_SThreadBusy,
       ctop_inf_cp$wci_Vm_13_MAddrSpace,
       ctop_inf_cp$wci_Vm_13_SThreadBusy,
       ctop_inf_cp$wci_Vm_14_MAddrSpace,
       ctop_inf_cp$wci_Vm_14_SThreadBusy,
       ctop_inf_cp$wci_Vm_1_MAddrSpace,
       ctop_inf_cp$wci_Vm_1_SThreadBusy,
       ctop_inf_cp$wci_Vm_2_MAddrSpace,
       ctop_inf_cp$wci_Vm_2_SThreadBusy,
       ctop_inf_cp$wci_Vm_3_MAddrSpace,
       ctop_inf_cp$wci_Vm_3_SThreadBusy,
       ctop_inf_cp$wci_Vm_4_MAddrSpace,
       ctop_inf_cp$wci_Vm_4_SThreadBusy,
       ctop_inf_cp$wci_Vm_5_MAddrSpace,
       ctop_inf_cp$wci_Vm_5_SThreadBusy,
       ctop_inf_cp$wci_Vm_6_MAddrSpace,
       ctop_inf_cp$wci_Vm_6_SThreadBusy,
       ctop_inf_cp$wci_Vm_7_MAddrSpace,
       ctop_inf_cp$wci_Vm_7_SThreadBusy,
       ctop_inf_cp$wci_Vm_8_MAddrSpace,
       ctop_inf_cp$wci_Vm_8_SThreadBusy,
       ctop_inf_cp$wci_Vm_9_MAddrSpace,
       ctop_inf_cp$wci_Vm_9_SThreadBusy;

  // ports of submodule ctop_inf_dp0_bram_memory
  reg [31 : 0] ctop_inf_dp0_bram_memory$DIA, ctop_inf_dp0_bram_memory$DIB;
  reg [10 : 0] ctop_inf_dp0_bram_memory$ADDRA, ctop_inf_dp0_bram_memory$ADDRB;
  wire [31 : 0] ctop_inf_dp0_bram_memory$DOA, ctop_inf_dp0_bram_memory$DOB;
  wire ctop_inf_dp0_bram_memory$ENA,
       ctop_inf_dp0_bram_memory$ENB,
       ctop_inf_dp0_bram_memory$WEA,
       ctop_inf_dp0_bram_memory$WEB;

  // ports of submodule ctop_inf_dp0_bram_memory_1
  reg [31 : 0] ctop_inf_dp0_bram_memory_1$DIA, ctop_inf_dp0_bram_memory_1$DIB;
  reg [10 : 0] ctop_inf_dp0_bram_memory_1$ADDRA,
	       ctop_inf_dp0_bram_memory_1$ADDRB;
  wire [31 : 0] ctop_inf_dp0_bram_memory_1$DOA,
		ctop_inf_dp0_bram_memory_1$DOB;
  wire ctop_inf_dp0_bram_memory_1$ENA,
       ctop_inf_dp0_bram_memory_1$ENB,
       ctop_inf_dp0_bram_memory_1$WEA,
       ctop_inf_dp0_bram_memory_1$WEB;

  // ports of submodule ctop_inf_dp0_bram_memory_2
  reg [31 : 0] ctop_inf_dp0_bram_memory_2$DIA, ctop_inf_dp0_bram_memory_2$DIB;
  reg [10 : 0] ctop_inf_dp0_bram_memory_2$ADDRA,
	       ctop_inf_dp0_bram_memory_2$ADDRB;
  wire [31 : 0] ctop_inf_dp0_bram_memory_2$DOA,
		ctop_inf_dp0_bram_memory_2$DOB;
  wire ctop_inf_dp0_bram_memory_2$ENA,
       ctop_inf_dp0_bram_memory_2$ENB,
       ctop_inf_dp0_bram_memory_2$WEA,
       ctop_inf_dp0_bram_memory_2$WEB;

  // ports of submodule ctop_inf_dp0_bram_memory_3
  reg [31 : 0] ctop_inf_dp0_bram_memory_3$DIA, ctop_inf_dp0_bram_memory_3$DIB;
  reg [10 : 0] ctop_inf_dp0_bram_memory_3$ADDRA,
	       ctop_inf_dp0_bram_memory_3$ADDRB;
  wire [31 : 0] ctop_inf_dp0_bram_memory_3$DOA,
		ctop_inf_dp0_bram_memory_3$DOB;
  wire ctop_inf_dp0_bram_memory_3$ENA,
       ctop_inf_dp0_bram_memory_3$ENB,
       ctop_inf_dp0_bram_memory_3$WEA,
       ctop_inf_dp0_bram_memory_3$WEB;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterA_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterA_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterA_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterA_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterA_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterA_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_bram_serverAdapterB_outDataCore
  wire [31 : 0] ctop_inf_dp0_bram_serverAdapterB_outDataCore$D_IN,
		ctop_inf_dp0_bram_serverAdapterB_outDataCore$D_OUT;
  wire ctop_inf_dp0_bram_serverAdapterB_outDataCore$CLR,
       ctop_inf_dp0_bram_serverAdapterB_outDataCore$DEQ,
       ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N,
       ctop_inf_dp0_bram_serverAdapterB_outDataCore$ENQ,
       ctop_inf_dp0_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp0_tlp_inF
  wire [152 : 0] ctop_inf_dp0_tlp_inF$D_IN, ctop_inf_dp0_tlp_inF$D_OUT;
  wire ctop_inf_dp0_tlp_inF$CLR,
       ctop_inf_dp0_tlp_inF$DEQ,
       ctop_inf_dp0_tlp_inF$EMPTY_N,
       ctop_inf_dp0_tlp_inF$ENQ,
       ctop_inf_dp0_tlp_inF$FULL_N;

  // ports of submodule ctop_inf_dp0_tlp_mReqF
  reg [129 : 0] ctop_inf_dp0_tlp_mReqF$D_IN;
  wire [129 : 0] ctop_inf_dp0_tlp_mReqF$D_OUT;
  wire ctop_inf_dp0_tlp_mReqF$CLR,
       ctop_inf_dp0_tlp_mReqF$DEQ,
       ctop_inf_dp0_tlp_mReqF$EMPTY_N,
       ctop_inf_dp0_tlp_mReqF$ENQ,
       ctop_inf_dp0_tlp_mReqF$FULL_N;

  // ports of submodule ctop_inf_dp0_tlp_mRespF
  wire [138 : 0] ctop_inf_dp0_tlp_mRespF$D_IN, ctop_inf_dp0_tlp_mRespF$D_OUT;
  wire ctop_inf_dp0_tlp_mRespF$CLR,
       ctop_inf_dp0_tlp_mRespF$DEQ,
       ctop_inf_dp0_tlp_mRespF$EMPTY_N,
       ctop_inf_dp0_tlp_mRespF$ENQ,
       ctop_inf_dp0_tlp_mRespF$FULL_N;

  // ports of submodule ctop_inf_dp0_tlp_outF
  reg [152 : 0] ctop_inf_dp0_tlp_outF$D_IN;
  wire [152 : 0] ctop_inf_dp0_tlp_outF$D_OUT;
  wire ctop_inf_dp0_tlp_outF$CLR,
       ctop_inf_dp0_tlp_outF$DEQ,
       ctop_inf_dp0_tlp_outF$EMPTY_N,
       ctop_inf_dp0_tlp_outF$ENQ,
       ctop_inf_dp0_tlp_outF$FULL_N;

  // ports of submodule ctop_inf_dp0_tlp_readReq
  wire [59 : 0] ctop_inf_dp0_tlp_readReq$D_IN, ctop_inf_dp0_tlp_readReq$D_OUT;
  wire ctop_inf_dp0_tlp_readReq$CLR,
       ctop_inf_dp0_tlp_readReq$DEQ,
       ctop_inf_dp0_tlp_readReq$EMPTY_N,
       ctop_inf_dp0_tlp_readReq$ENQ,
       ctop_inf_dp0_tlp_readReq$FULL_N;

  // ports of submodule ctop_inf_dp0_wci_isReset
  wire ctop_inf_dp0_wci_isReset$VAL;

  // ports of submodule ctop_inf_dp0_wci_reqF
  wire [59 : 0] ctop_inf_dp0_wci_reqF$D_IN, ctop_inf_dp0_wci_reqF$D_OUT;
  wire ctop_inf_dp0_wci_reqF$CLR,
       ctop_inf_dp0_wci_reqF$DEQ,
       ctop_inf_dp0_wci_reqF$EMPTY_N,
       ctop_inf_dp0_wci_reqF$ENQ;

  // ports of submodule ctop_inf_dp0_wmi_wmi_dhF
  wire [37 : 0] ctop_inf_dp0_wmi_wmi_dhF$D_IN, ctop_inf_dp0_wmi_wmi_dhF$D_OUT;
  wire ctop_inf_dp0_wmi_wmi_dhF$CLR,
       ctop_inf_dp0_wmi_wmi_dhF$DEQ,
       ctop_inf_dp0_wmi_wmi_dhF$EMPTY_N,
       ctop_inf_dp0_wmi_wmi_dhF$ENQ,
       ctop_inf_dp0_wmi_wmi_dhF$FULL_N;

  // ports of submodule ctop_inf_dp0_wmi_wmi_isReset
  wire ctop_inf_dp0_wmi_wmi_isReset$VAL;

  // ports of submodule ctop_inf_dp0_wmi_wmi_mFlagF
  wire [31 : 0] ctop_inf_dp0_wmi_wmi_mFlagF$D_IN,
		ctop_inf_dp0_wmi_wmi_mFlagF$D_OUT;
  wire ctop_inf_dp0_wmi_wmi_mFlagF$CLR,
       ctop_inf_dp0_wmi_wmi_mFlagF$DEQ,
       ctop_inf_dp0_wmi_wmi_mFlagF$EMPTY_N,
       ctop_inf_dp0_wmi_wmi_mFlagF$ENQ,
       ctop_inf_dp0_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule ctop_inf_dp0_wmi_wmi_reqF
  wire [31 : 0] ctop_inf_dp0_wmi_wmi_reqF$D_IN,
		ctop_inf_dp0_wmi_wmi_reqF$D_OUT;
  wire ctop_inf_dp0_wmi_wmi_reqF$CLR,
       ctop_inf_dp0_wmi_wmi_reqF$DEQ,
       ctop_inf_dp0_wmi_wmi_reqF$EMPTY_N,
       ctop_inf_dp0_wmi_wmi_reqF$ENQ,
       ctop_inf_dp0_wmi_wmi_reqF$FULL_N;

  // ports of submodule ctop_inf_dp0_wti_isReset
  wire ctop_inf_dp0_wti_isReset$VAL;

  // ports of submodule ctop_inf_dp1_bram_memory
  reg [31 : 0] ctop_inf_dp1_bram_memory$DIA, ctop_inf_dp1_bram_memory$DIB;
  reg [10 : 0] ctop_inf_dp1_bram_memory$ADDRA, ctop_inf_dp1_bram_memory$ADDRB;
  wire [31 : 0] ctop_inf_dp1_bram_memory$DOA, ctop_inf_dp1_bram_memory$DOB;
  wire ctop_inf_dp1_bram_memory$ENA,
       ctop_inf_dp1_bram_memory$ENB,
       ctop_inf_dp1_bram_memory$WEA,
       ctop_inf_dp1_bram_memory$WEB;

  // ports of submodule ctop_inf_dp1_bram_memory_1
  reg [31 : 0] ctop_inf_dp1_bram_memory_1$DIA, ctop_inf_dp1_bram_memory_1$DIB;
  reg [10 : 0] ctop_inf_dp1_bram_memory_1$ADDRA,
	       ctop_inf_dp1_bram_memory_1$ADDRB;
  wire [31 : 0] ctop_inf_dp1_bram_memory_1$DOA,
		ctop_inf_dp1_bram_memory_1$DOB;
  wire ctop_inf_dp1_bram_memory_1$ENA,
       ctop_inf_dp1_bram_memory_1$ENB,
       ctop_inf_dp1_bram_memory_1$WEA,
       ctop_inf_dp1_bram_memory_1$WEB;

  // ports of submodule ctop_inf_dp1_bram_memory_2
  reg [31 : 0] ctop_inf_dp1_bram_memory_2$DIA, ctop_inf_dp1_bram_memory_2$DIB;
  reg [10 : 0] ctop_inf_dp1_bram_memory_2$ADDRA,
	       ctop_inf_dp1_bram_memory_2$ADDRB;
  wire [31 : 0] ctop_inf_dp1_bram_memory_2$DOA,
		ctop_inf_dp1_bram_memory_2$DOB;
  wire ctop_inf_dp1_bram_memory_2$ENA,
       ctop_inf_dp1_bram_memory_2$ENB,
       ctop_inf_dp1_bram_memory_2$WEA,
       ctop_inf_dp1_bram_memory_2$WEB;

  // ports of submodule ctop_inf_dp1_bram_memory_3
  reg [31 : 0] ctop_inf_dp1_bram_memory_3$DIA, ctop_inf_dp1_bram_memory_3$DIB;
  reg [10 : 0] ctop_inf_dp1_bram_memory_3$ADDRA,
	       ctop_inf_dp1_bram_memory_3$ADDRB;
  wire [31 : 0] ctop_inf_dp1_bram_memory_3$DOA,
		ctop_inf_dp1_bram_memory_3$DOB;
  wire ctop_inf_dp1_bram_memory_3$ENA,
       ctop_inf_dp1_bram_memory_3$ENB,
       ctop_inf_dp1_bram_memory_3$WEA,
       ctop_inf_dp1_bram_memory_3$WEB;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterA_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterA_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterA_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterA_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterA_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterA_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_bram_serverAdapterB_outDataCore
  wire [31 : 0] ctop_inf_dp1_bram_serverAdapterB_outDataCore$D_IN,
		ctop_inf_dp1_bram_serverAdapterB_outDataCore$D_OUT;
  wire ctop_inf_dp1_bram_serverAdapterB_outDataCore$CLR,
       ctop_inf_dp1_bram_serverAdapterB_outDataCore$DEQ,
       ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N,
       ctop_inf_dp1_bram_serverAdapterB_outDataCore$ENQ,
       ctop_inf_dp1_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule ctop_inf_dp1_tlp_inF
  wire [152 : 0] ctop_inf_dp1_tlp_inF$D_IN, ctop_inf_dp1_tlp_inF$D_OUT;
  wire ctop_inf_dp1_tlp_inF$CLR,
       ctop_inf_dp1_tlp_inF$DEQ,
       ctop_inf_dp1_tlp_inF$EMPTY_N,
       ctop_inf_dp1_tlp_inF$ENQ,
       ctop_inf_dp1_tlp_inF$FULL_N;

  // ports of submodule ctop_inf_dp1_tlp_mReqF
  reg [129 : 0] ctop_inf_dp1_tlp_mReqF$D_IN;
  wire [129 : 0] ctop_inf_dp1_tlp_mReqF$D_OUT;
  wire ctop_inf_dp1_tlp_mReqF$CLR,
       ctop_inf_dp1_tlp_mReqF$DEQ,
       ctop_inf_dp1_tlp_mReqF$EMPTY_N,
       ctop_inf_dp1_tlp_mReqF$ENQ,
       ctop_inf_dp1_tlp_mReqF$FULL_N;

  // ports of submodule ctop_inf_dp1_tlp_mRespF
  wire [138 : 0] ctop_inf_dp1_tlp_mRespF$D_IN, ctop_inf_dp1_tlp_mRespF$D_OUT;
  wire ctop_inf_dp1_tlp_mRespF$CLR,
       ctop_inf_dp1_tlp_mRespF$DEQ,
       ctop_inf_dp1_tlp_mRespF$EMPTY_N,
       ctop_inf_dp1_tlp_mRespF$ENQ,
       ctop_inf_dp1_tlp_mRespF$FULL_N;

  // ports of submodule ctop_inf_dp1_tlp_outF
  reg [152 : 0] ctop_inf_dp1_tlp_outF$D_IN;
  wire [152 : 0] ctop_inf_dp1_tlp_outF$D_OUT;
  wire ctop_inf_dp1_tlp_outF$CLR,
       ctop_inf_dp1_tlp_outF$DEQ,
       ctop_inf_dp1_tlp_outF$EMPTY_N,
       ctop_inf_dp1_tlp_outF$ENQ,
       ctop_inf_dp1_tlp_outF$FULL_N;

  // ports of submodule ctop_inf_dp1_tlp_readReq
  wire [59 : 0] ctop_inf_dp1_tlp_readReq$D_IN, ctop_inf_dp1_tlp_readReq$D_OUT;
  wire ctop_inf_dp1_tlp_readReq$CLR,
       ctop_inf_dp1_tlp_readReq$DEQ,
       ctop_inf_dp1_tlp_readReq$EMPTY_N,
       ctop_inf_dp1_tlp_readReq$ENQ,
       ctop_inf_dp1_tlp_readReq$FULL_N;

  // ports of submodule ctop_inf_dp1_wci_isReset
  wire ctop_inf_dp1_wci_isReset$VAL;

  // ports of submodule ctop_inf_dp1_wci_reqF
  wire [59 : 0] ctop_inf_dp1_wci_reqF$D_IN, ctop_inf_dp1_wci_reqF$D_OUT;
  wire ctop_inf_dp1_wci_reqF$CLR,
       ctop_inf_dp1_wci_reqF$DEQ,
       ctop_inf_dp1_wci_reqF$EMPTY_N,
       ctop_inf_dp1_wci_reqF$ENQ;

  // ports of submodule ctop_inf_dp1_wmi_wmi_dhF
  wire [37 : 0] ctop_inf_dp1_wmi_wmi_dhF$D_IN, ctop_inf_dp1_wmi_wmi_dhF$D_OUT;
  wire ctop_inf_dp1_wmi_wmi_dhF$CLR,
       ctop_inf_dp1_wmi_wmi_dhF$DEQ,
       ctop_inf_dp1_wmi_wmi_dhF$EMPTY_N,
       ctop_inf_dp1_wmi_wmi_dhF$ENQ,
       ctop_inf_dp1_wmi_wmi_dhF$FULL_N;

  // ports of submodule ctop_inf_dp1_wmi_wmi_isReset
  wire ctop_inf_dp1_wmi_wmi_isReset$VAL;

  // ports of submodule ctop_inf_dp1_wmi_wmi_mFlagF
  wire [31 : 0] ctop_inf_dp1_wmi_wmi_mFlagF$D_IN,
		ctop_inf_dp1_wmi_wmi_mFlagF$D_OUT;
  wire ctop_inf_dp1_wmi_wmi_mFlagF$CLR,
       ctop_inf_dp1_wmi_wmi_mFlagF$DEQ,
       ctop_inf_dp1_wmi_wmi_mFlagF$EMPTY_N,
       ctop_inf_dp1_wmi_wmi_mFlagF$ENQ,
       ctop_inf_dp1_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule ctop_inf_dp1_wmi_wmi_reqF
  wire [31 : 0] ctop_inf_dp1_wmi_wmi_reqF$D_IN,
		ctop_inf_dp1_wmi_wmi_reqF$D_OUT;
  wire ctop_inf_dp1_wmi_wmi_reqF$CLR,
       ctop_inf_dp1_wmi_wmi_reqF$DEQ,
       ctop_inf_dp1_wmi_wmi_reqF$EMPTY_N,
       ctop_inf_dp1_wmi_wmi_reqF$ENQ,
       ctop_inf_dp1_wmi_wmi_reqF$FULL_N;

  // ports of submodule ctop_inf_dp1_wti_isReset
  wire ctop_inf_dp1_wti_isReset$VAL;

  // ports of submodule ctop_inf_itc0_now
  wire [63 : 0] ctop_inf_itc0_now$dD_OUT, ctop_inf_itc0_now$sD_IN;
  wire ctop_inf_itc0_now$sEN, ctop_inf_itc0_now$sRDY;

  // ports of submodule ctop_inf_itc1_now
  wire [63 : 0] ctop_inf_itc1_now$dD_OUT, ctop_inf_itc1_now$sD_IN;
  wire ctop_inf_itc1_now$sEN, ctop_inf_itc1_now$sRDY;

  // ports of submodule ctop_inf_sm0
  wire [152 : 0] ctop_inf_sm0$c0_request_get,
		 ctop_inf_sm0$c0_response_put,
		 ctop_inf_sm0$c1_request_get,
		 ctop_inf_sm0$c1_response_put,
		 ctop_inf_sm0$s_request_put,
		 ctop_inf_sm0$s_response_get;
  wire ctop_inf_sm0$EN_c0_request_get,
       ctop_inf_sm0$EN_c0_response_put,
       ctop_inf_sm0$EN_c1_request_get,
       ctop_inf_sm0$EN_c1_response_put,
       ctop_inf_sm0$EN_s_request_put,
       ctop_inf_sm0$EN_s_response_get,
       ctop_inf_sm0$RDY_c0_request_get,
       ctop_inf_sm0$RDY_c0_response_put,
       ctop_inf_sm0$RDY_c1_request_get,
       ctop_inf_sm0$RDY_c1_response_put,
       ctop_inf_sm0$RDY_s_request_put,
       ctop_inf_sm0$RDY_s_response_get;

  // ports of submodule ctop_inf_sm1
  wire [152 : 0] ctop_inf_sm1$c0_request_get,
		 ctop_inf_sm1$c0_response_put,
		 ctop_inf_sm1$c1_request_get,
		 ctop_inf_sm1$c1_response_put,
		 ctop_inf_sm1$s_request_put,
		 ctop_inf_sm1$s_response_get;
  wire ctop_inf_sm1$EN_c0_request_get,
       ctop_inf_sm1$EN_c0_response_put,
       ctop_inf_sm1$EN_c1_request_get,
       ctop_inf_sm1$EN_c1_response_put,
       ctop_inf_sm1$EN_s_request_put,
       ctop_inf_sm1$EN_s_response_get,
       ctop_inf_sm1$RDY_c0_request_get,
       ctop_inf_sm1$RDY_c0_response_put,
       ctop_inf_sm1$RDY_c1_request_get,
       ctop_inf_sm1$RDY_c1_response_put,
       ctop_inf_sm1$RDY_s_request_put,
       ctop_inf_sm1$RDY_s_response_get;

  // ports of submodule ctop_inf_sm2
  wire [152 : 0] ctop_inf_sm2$c0_request_get,
		 ctop_inf_sm2$c0_response_put,
		 ctop_inf_sm2$c1_response_put,
		 ctop_inf_sm2$s_request_put,
		 ctop_inf_sm2$s_response_get;
  wire ctop_inf_sm2$EN_c0_request_get,
       ctop_inf_sm2$EN_c0_response_put,
       ctop_inf_sm2$EN_c1_request_get,
       ctop_inf_sm2$EN_c1_response_put,
       ctop_inf_sm2$EN_s_request_put,
       ctop_inf_sm2$EN_s_response_get,
       ctop_inf_sm2$RDY_c0_request_get,
       ctop_inf_sm2$RDY_c0_response_put,
       ctop_inf_sm2$RDY_c1_request_get,
       ctop_inf_sm2$RDY_s_request_put,
       ctop_inf_sm2$RDY_s_response_get;

  // ports of submodule dram0
  wire [127 : 0] dram0$wmemiS_MData, dram0$wmemiS_SData;
  wire [63 : 0] dram0$dram_io_dq;
  wire [59 : 0] dram0$wci_s_req;
  wire [35 : 0] dram0$wmemiS_MAddr;
  wire [33 : 0] dram0$wci_s_resp;
  wire [15 : 0] dram0$wmemiS_MDataByteEn;
  wire [12 : 0] dram0$dram_addr;
  wire [11 : 0] dram0$wmemiS_MBurstLength;
  wire [7 : 0] dram0$dram_dm, dram0$dram_io_dqs_n, dram0$dram_io_dqs_p;
  wire [2 : 0] dram0$dram_ba, dram0$wmemiS_MCmd;
  wire [1 : 0] dram0$wci_s_MFlag, dram0$wci_s_SFlag, dram0$wmemiS_SResp;
  wire dram0$dram_cas_n,
       dram0$dram_ck_n,
       dram0$dram_ck_p,
       dram0$dram_cke,
       dram0$dram_cs_n,
       dram0$dram_odt,
       dram0$dram_ras_n,
       dram0$dram_reset_n,
       dram0$dram_we_n,
       dram0$wci_s_SThreadBusy,
       dram0$wmemiS_MDataLast,
       dram0$wmemiS_MDataValid,
       dram0$wmemiS_MReqLast,
       dram0$wmemiS_MReset_n,
       dram0$wmemiS_SCmdAccept,
       dram0$wmemiS_SDataAccept,
       dram0$wmemiS_SRespLast;

  // ports of submodule fI2P
  wire [80 : 0] fI2P$D_IN, fI2P$D_OUT;
  wire fI2P$CLR, fI2P$DEQ, fI2P$EMPTY_N, fI2P$ENQ, fI2P$FULL_N;

  // ports of submodule fP2I
  wire [80 : 0] fP2I$D_IN, fP2I$D_OUT;
  wire fP2I$CLR, fP2I$DEQ, fP2I$EMPTY_N, fP2I$ENQ, fP2I$FULL_N;

  // ports of submodule flash0
  wire [59 : 0] flash0$wci_s_req;
  wire [33 : 0] flash0$wci_s_resp;
  wire [23 : 0] flash0$flash_addr;
  wire [15 : 0] flash0$flash_io_dq;
  wire [1 : 0] flash0$wci_s_MFlag, flash0$wci_s_SFlag;
  wire flash0$flash_adv_n,
       flash0$flash_ce_n,
       flash0$flash_fwait_i,
       flash0$flash_oe_n,
       flash0$flash_rst_n,
       flash0$flash_we_n,
       flash0$flash_wp_n,
       flash0$wci_s_SThreadBusy;

  // ports of submodule gbe0
  wire [66 : 0] gbe0$wti_s_req;
  wire [59 : 0] gbe0$wci_rx_req, gbe0$wci_tx_req;
  wire [33 : 0] gbe0$wci_rx_resp, gbe0$wci_tx_resp;
  wire [31 : 0] gbe0$wsiS1_MData;
  wire [11 : 0] gbe0$wsiS1_MBurstLength;
  wire [7 : 0] gbe0$gmii_rxd_i, gbe0$gmii_txd, gbe0$wsiS1_MReqInfo;
  wire [3 : 0] gbe0$wsiS1_MByteEn;
  wire [2 : 0] gbe0$wsiS1_MCmd;
  wire [1 : 0] gbe0$wci_rx_MFlag,
	       gbe0$wci_rx_SFlag,
	       gbe0$wci_tx_MFlag,
	       gbe0$wci_tx_SFlag;
  wire gbe0$CLK_gmii_tx_clk,
       gbe0$CLK_rxclk,
       gbe0$RST_N_mrst_n,
       gbe0$gmii_rx_dv_i,
       gbe0$gmii_rx_er_i,
       gbe0$gmii_tx_en,
       gbe0$gmii_tx_er,
       gbe0$wci_rx_SThreadBusy,
       gbe0$wci_tx_SThreadBusy,
       gbe0$wsiM1_SReset_n,
       gbe0$wsiM1_SThreadBusy,
       gbe0$wsiS1_MBurstPrecise,
       gbe0$wsiS1_MReqLast,
       gbe0$wsiS1_MReset_n,
       gbe0$wti_s_SThreadBusy;

  // ports of submodule i2pAF_dCombinedReset
  wire i2pAF_dCombinedReset$RST_OUT;

  // ports of submodule i2pAF_dCrossedsReset
  wire i2pAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule i2pAF_dInReset
  wire i2pAF_dInReset$VAL;

  // ports of submodule i2pAF_sCombinedReset
  wire i2pAF_sCombinedReset$RST_OUT;

  // ports of submodule i2pAF_sCrosseddReset
  wire i2pAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule i2pAF_sInReset
  wire i2pAF_sInReset$VAL;

  // ports of submodule icap
  wire [59 : 0] icap$wci_s_req;
  wire [33 : 0] icap$wci_s_resp;
  wire [1 : 0] icap$wci_s_MFlag, icap$wci_s_SFlag;
  wire icap$wci_s_SThreadBusy;

  // ports of submodule infLed
  wire [1 : 0] infLed$WGET, infLed$WVAL;

  // ports of submodule p2iAF_dCombinedReset
  wire p2iAF_dCombinedReset$RST_OUT;

  // ports of submodule p2iAF_dCrossedsReset
  wire p2iAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule p2iAF_dInReset
  wire p2iAF_dInReset$VAL;

  // ports of submodule p2iAF_sCombinedReset
  wire p2iAF_sCombinedReset$RST_OUT;

  // ports of submodule p2iAF_sCrosseddReset
  wire p2iAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule p2iAF_sInReset
  wire p2iAF_sInReset$VAL;

  // ports of submodule pci0_clk
  wire pci0_clk$O;

  // ports of submodule pci0_pcie_ep
  wire [63 : 0] pci0_pcie_ep$cfg_dsn,
		pci0_pcie_ep$trn_rd,
		pci0_pcie_ep$trn_td;
  wire [47 : 0] pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pci0_pcie_ep$cfg_di;
  wire [9 : 0] pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_interrupt_di,
	       pci0_pcie_ep$cfg_interrupt_do;
  wire [6 : 0] pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pci0_pcie_ep$cfg_byte_en_n,
	       pci0_pcie_ep$pci_exp_rxn,
	       pci0_pcie_ep$pci_exp_rxp,
	       pci0_pcie_ep$pci_exp_txn,
	       pci0_pcie_ep$pci_exp_txp;
  wire [2 : 0] pci0_pcie_ep$cfg_function_number,
	       pci0_pcie_ep$cfg_interrupt_mmenable,
	       pci0_pcie_ep$trn_fc_sel;
  wire [1 : 0] pci0_pcie_ep$pl_directed_link_change,
	       pci0_pcie_ep$pl_directed_link_width;
  wire pci0_pcie_ep$cfg_err_cor_n,
       pci0_pcie_ep$cfg_err_cpl_abort_n,
       pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pci0_pcie_ep$cfg_err_ecrc_n,
       pci0_pcie_ep$cfg_err_locked_n,
       pci0_pcie_ep$cfg_err_posted_n,
       pci0_pcie_ep$cfg_err_ur_n,
       pci0_pcie_ep$cfg_interrupt_assert_n,
       pci0_pcie_ep$cfg_interrupt_msienable,
       pci0_pcie_ep$cfg_interrupt_n,
       pci0_pcie_ep$cfg_interrupt_rdy_n,
       pci0_pcie_ep$cfg_pm_wake_n,
       pci0_pcie_ep$cfg_rd_en_n,
       pci0_pcie_ep$cfg_trn_pending_n,
       pci0_pcie_ep$cfg_turnoff_ok_n,
       pci0_pcie_ep$cfg_wr_en_n,
       pci0_pcie_ep$pl_directed_link_auton,
       pci0_pcie_ep$pl_directed_link_speed,
       pci0_pcie_ep$pl_upstream_prefer_deemph,
       pci0_pcie_ep$trn2_clk,
       pci0_pcie_ep$trn_clk,
       pci0_pcie_ep$trn_lnk_up_n,
       pci0_pcie_ep$trn_rdst_rdy_n,
       pci0_pcie_ep$trn_reof_n,
       pci0_pcie_ep$trn_reset_n,
       pci0_pcie_ep$trn_rnp_ok_n,
       pci0_pcie_ep$trn_rrem_n,
       pci0_pcie_ep$trn_rsof_n,
       pci0_pcie_ep$trn_rsrc_rdy_n,
       pci0_pcie_ep$trn_tcfg_gnt_n,
       pci0_pcie_ep$trn_tdst_rdy_n,
       pci0_pcie_ep$trn_teof_n,
       pci0_pcie_ep$trn_terrfwd_n,
       pci0_pcie_ep$trn_trem_n,
       pci0_pcie_ep$trn_tsof_n,
       pci0_pcie_ep$trn_tsrc_dsc_n,
       pci0_pcie_ep$trn_tsrc_rdy_n,
       pci0_pcie_ep$trn_tstr_n;

  // ports of submodule pci0_rst
  wire pci0_rst$O;

  // ports of submodule pciDevice
  wire [15 : 0] pciDevice$dD_OUT, pciDevice$sD_IN;
  wire pciDevice$sEN, pciDevice$sRDY;

  // ports of submodule pcie_irq_fifoAssert
  wire [7 : 0] pcie_irq_fifoAssert$dD_OUT, pcie_irq_fifoAssert$sD_IN;
  wire pcie_irq_fifoAssert$dDEQ,
       pcie_irq_fifoAssert$dEMPTY_N,
       pcie_irq_fifoAssert$sENQ;

  // ports of submodule preEdge
  wire preEdge$CLK_VAL;

  // ports of submodule sys0_clk
  wire sys0_clk$O;

  // ports of submodule sys0_rst
  wire sys0_rst$OUT_RST_N;

  // ports of submodule sys1_clk
  wire sys1_clk$O;

  // ports of submodule sys1_clki
  wire sys1_clki$O;

  // ports of submodule sys1_rst
  wire sys1_rst$OUT_RST_N;

  // ports of submodule tcGbe0_now
  wire [63 : 0] tcGbe0_now$dD_OUT, tcGbe0_now$sD_IN;
  wire tcGbe0_now$sEN, tcGbe0_now$sRDY;

  // ports of submodule trn2_rst
  wire trn2_rst$OUT_RST_N;

  // ports of submodule trn_rst
  wire trn_rst$OUT_RST_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_every,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_every,
       CAN_FIRE_RL_connect_interrupt_1,
       CAN_FIRE_RL_connect_interrupt_do,
       CAN_FIRE_RL_connect_interrupt_mmenable,
       CAN_FIRE_RL_connect_interrupt_msienable,
       CAN_FIRE_RL_connect_interrupt_rdy_n,
       CAN_FIRE_RL_ctop_app_appW2_fabRespCredit_accumulate,
       CAN_FIRE_RL_ctop_app_appW2_mesgPreRequest__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_operating_actions,
       CAN_FIRE_RL_ctop_app_appW2_respF_portA,
       CAN_FIRE_RL_ctop_app_appW2_respF_portB,
       CAN_FIRE_RL_ctop_app_appW2_respF_portB_read_data,
       CAN_FIRE_RL_ctop_app_appW2_wci_Es_doAlways_Req,
       CAN_FIRE_RL_ctop_app_appW2_wci_cfrd,
       CAN_FIRE_RL_ctop_app_appW2_wci_cfwr,
       CAN_FIRE_RL_ctop_app_appW2_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete,
       CAN_FIRE_RL_ctop_app_appW2_wci_ctl_op_start,
       CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI,
       CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO,
       CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE,
       CAN_FIRE_RL_ctop_app_appW2_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_ctop_app_appW2_wci_reqF_enq,
       CAN_FIRE_RL_ctop_app_appW2_wci_request_decode,
       CAN_FIRE_RL_ctop_app_appW2_wci_respF_both,
       CAN_FIRE_RL_ctop_app_appW2_wci_respF_decCtr,
       CAN_FIRE_RL_ctop_app_appW2_wci_respF_deq,
       CAN_FIRE_RL_ctop_app_appW2_wci_respF_incCtr,
       CAN_FIRE_RL_ctop_app_appW2_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wci_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_app_appW2_wmi_Em_doAlways,
       CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_both,
       CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr,
       CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_deq,
       CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr,
       CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both,
       CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr,
       CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr,
       CAN_FIRE_RL_ctop_app_appW2_wmi_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_both,
       CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr,
       CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_deq,
       CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr,
       CAN_FIRE_RL_ctop_app_appW2_wmi_respAdvance,
       CAN_FIRE_RL_ctop_app_appW2_wmi_sDataThreadBusy_d__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wmi_sThreadBusy_d__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin,
       CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest,
       CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi,
       CAN_FIRE_RL_ctop_app_appW2_wmwt_doAbort,
       CAN_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin,
       CAN_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize,
       CAN_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise,
       CAN_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise,
       CAN_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_ext_status_assign,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_app_appW2_wsiM_update_statusR,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_backpressure,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_ext_status_assign,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_enq,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_reset,
       CAN_FIRE_RL_ctop_app_appW2_wsiS_update_statusR,
       CAN_FIRE_RL_ctop_app_appW2_wsi_Es_doAlways,
       CAN_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush,
       CAN_FIRE_RL_ctop_app_appW3_cycles_passed_count,
       CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc,
       CAN_FIRE_RL_ctop_app_appW3_delay_read_req,
       CAN_FIRE_RL_ctop_app_appW3_delay_read_resp,
       CAN_FIRE_RL_ctop_app_appW3_delay_write_req,
       CAN_FIRE_RL_ctop_app_appW3_dlyReadCredit_accumulate,
       CAN_FIRE_RL_ctop_app_appW3_dlyReadyToWrite_accumulate,
       CAN_FIRE_RL_ctop_app_appW3_dlyWordsStored_accumulate,
       CAN_FIRE_RL_ctop_app_appW3_mesgWF_portA,
       CAN_FIRE_RL_ctop_app_appW3_mesgWF_portB,
       CAN_FIRE_RL_ctop_app_appW3_mesgWF_portB_read_data,
       CAN_FIRE_RL_ctop_app_appW3_operating_actions,
       CAN_FIRE_RL_ctop_app_appW3_rdSer_begin,
       CAN_FIRE_RL_ctop_app_appW3_rdSer_body,
       CAN_FIRE_RL_ctop_app_appW3_rdSer_sync,
       CAN_FIRE_RL_ctop_app_appW3_wci_Es_doAlways_Req,
       CAN_FIRE_RL_ctop_app_appW3_wci_cfrd,
       CAN_FIRE_RL_ctop_app_appW3_wci_cfwr,
       CAN_FIRE_RL_ctop_app_appW3_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete,
       CAN_FIRE_RL_ctop_app_appW3_wci_ctl_op_start,
       CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI,
       CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO,
       CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE,
       CAN_FIRE_RL_ctop_app_appW3_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_ctop_app_appW3_wci_reqF_enq,
       CAN_FIRE_RL_ctop_app_appW3_wci_request_decode,
       CAN_FIRE_RL_ctop_app_appW3_wci_respF_both,
       CAN_FIRE_RL_ctop_app_appW3_wci_respF_decCtr,
       CAN_FIRE_RL_ctop_app_appW3_wci_respF_deq,
       CAN_FIRE_RL_ctop_app_appW3_wci_respF_incCtr,
       CAN_FIRE_RL_ctop_app_appW3_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wci_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_Em_doAlways,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_both,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_deq,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_both,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_deq,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_respAdvance,
       CAN_FIRE_RL_ctop_app_appW3_wmemi_update_statusR,
       CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin,
       CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress,
       CAN_FIRE_RL_ctop_app_appW3_wrtSer_begin,
       CAN_FIRE_RL_ctop_app_appW3_wrtSer_body,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_ext_status_assign,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_app_appW3_wsiM_update_statusR,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_backpressure,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_ext_status_assign,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_reset,
       CAN_FIRE_RL_ctop_app_appW3_wsiS_update_statusR,
       CAN_FIRE_RL_ctop_app_appW3_wsi_Es_doAlways,
       CAN_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush,
       CAN_FIRE_RL_ctop_app_appW4_fabRespCredit_accumulate,
       CAN_FIRE_RL_ctop_app_appW4_mesgPreRequest__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_operating_actions,
       CAN_FIRE_RL_ctop_app_appW4_respF_portA,
       CAN_FIRE_RL_ctop_app_appW4_respF_portB,
       CAN_FIRE_RL_ctop_app_appW4_respF_portB_read_data,
       CAN_FIRE_RL_ctop_app_appW4_wci_Es_doAlways_Req,
       CAN_FIRE_RL_ctop_app_appW4_wci_cfrd,
       CAN_FIRE_RL_ctop_app_appW4_wci_cfwr,
       CAN_FIRE_RL_ctop_app_appW4_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete,
       CAN_FIRE_RL_ctop_app_appW4_wci_ctl_op_start,
       CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI,
       CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO,
       CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE,
       CAN_FIRE_RL_ctop_app_appW4_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_ctop_app_appW4_wci_reqF_enq,
       CAN_FIRE_RL_ctop_app_appW4_wci_request_decode,
       CAN_FIRE_RL_ctop_app_appW4_wci_respF_both,
       CAN_FIRE_RL_ctop_app_appW4_wci_respF_decCtr,
       CAN_FIRE_RL_ctop_app_appW4_wci_respF_deq,
       CAN_FIRE_RL_ctop_app_appW4_wci_respF_incCtr,
       CAN_FIRE_RL_ctop_app_appW4_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wci_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_app_appW4_wmi_Em_doAlways,
       CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_both,
       CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr,
       CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_deq,
       CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr,
       CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both,
       CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr,
       CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr,
       CAN_FIRE_RL_ctop_app_appW4_wmi_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_both,
       CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr,
       CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_deq,
       CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr,
       CAN_FIRE_RL_ctop_app_appW4_wmi_respAdvance,
       CAN_FIRE_RL_ctop_app_appW4_wmi_sDataThreadBusy_d__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wmi_sThreadBusy_d__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin,
       CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest,
       CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi,
       CAN_FIRE_RL_ctop_app_appW4_wmwt_doAbort,
       CAN_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin,
       CAN_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize,
       CAN_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise,
       CAN_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise,
       CAN_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_ext_status_assign,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_app_appW4_wsiM_update_statusR,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_backpressure,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_ext_status_assign,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_reset,
       CAN_FIRE_RL_ctop_app_appW4_wsiS_update_statusR,
       CAN_FIRE_RL_ctop_app_appW4_wsi_Es_doAlways,
       CAN_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush,
       CAN_FIRE_RL_ctop_app_mBurstLConnect,
       CAN_FIRE_RL_ctop_app_mBurstLConnect_1,
       CAN_FIRE_RL_ctop_app_mBurstPConnect,
       CAN_FIRE_RL_ctop_app_mBurstPConnect_1,
       CAN_FIRE_RL_ctop_app_mByteEnConnect,
       CAN_FIRE_RL_ctop_app_mByteEnConnect_1,
       CAN_FIRE_RL_ctop_app_mCmdConnect,
       CAN_FIRE_RL_ctop_app_mCmdConnect_1,
       CAN_FIRE_RL_ctop_app_mDataConnect,
       CAN_FIRE_RL_ctop_app_mDataConnect_1,
       CAN_FIRE_RL_ctop_app_mDataIConnect,
       CAN_FIRE_RL_ctop_app_mDataIConnect_1,
       CAN_FIRE_RL_ctop_app_mReqIConnect,
       CAN_FIRE_RL_ctop_app_mReqIConnect_1,
       CAN_FIRE_RL_ctop_app_mReqLConnect,
       CAN_FIRE_RL_ctop_app_mReqLConnect_1,
       CAN_FIRE_RL_ctop_app_mRstConnect,
       CAN_FIRE_RL_ctop_app_mRstConnect_1,
       CAN_FIRE_RL_ctop_app_sRstConnect,
       CAN_FIRE_RL_ctop_app_sRstConnect_1,
       CAN_FIRE_RL_ctop_app_stbConnect,
       CAN_FIRE_RL_ctop_app_stbConnect_1,
       CAN_FIRE_RL_ctop_inf_ClientServerRequest,
       CAN_FIRE_RL_ctop_inf_ClientServerRequest_1,
       CAN_FIRE_RL_ctop_inf_ClientServerRequest_2,
       CAN_FIRE_RL_ctop_inf_ClientServerRequest_3,
       CAN_FIRE_RL_ctop_inf_ClientServerRequest_4,
       CAN_FIRE_RL_ctop_inf_ClientServerResponse,
       CAN_FIRE_RL_ctop_inf_ClientServerResponse_1,
       CAN_FIRE_RL_ctop_inf_ClientServerResponse_2,
       CAN_FIRE_RL_ctop_inf_ClientServerResponse_3,
       CAN_FIRE_RL_ctop_inf_ClientServerResponse_4,
       CAN_FIRE_RL_ctop_inf_chomp_rogue,
       CAN_FIRE_RL_ctop_inf_dp0_assignControl,
       CAN_FIRE_RL_ctop_inf_dp0_bml_cntLclDone,
       CAN_FIRE_RL_ctop_inf_dp0_bml_cntLclStart,
       CAN_FIRE_RL_ctop_inf_dp0_bml_cntRemDone,
       CAN_FIRE_RL_ctop_inf_dp0_bml_cntRemStart,
       CAN_FIRE_RL_ctop_inf_dp0_bml_crdAdvance,
       CAN_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp0_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp0_bml_fabDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bml_fba,
       CAN_FIRE_RL_ctop_inf_dp0_bml_initAccumulators,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lbar,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lbcf,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp0_bml_lcredit,
       CAN_FIRE_RL_ctop_inf_dp0_bml_remAdvance,
       CAN_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp0_bml_remDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bml_remStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp0_mkConnectionVtoAf,
       CAN_FIRE_RL_ctop_inf_dp0_operating_actions,
       CAN_FIRE_RL_ctop_inf_dp0_rBMesg,
       CAN_FIRE_RL_ctop_inf_dp0_rBMesg_1,
       CAN_FIRE_RL_ctop_inf_dp0_rBMeta,
       CAN_FIRE_RL_ctop_inf_dp0_rBMeta_1,
       CAN_FIRE_RL_ctop_inf_dp0_rCredit_1,
       CAN_FIRE_RL_ctop_inf_dp0_rDone,
       CAN_FIRE_RL_ctop_inf_dp0_rDone_1,
       CAN_FIRE_RL_ctop_inf_dp0_rFFlow_1,
       CAN_FIRE_RL_ctop_inf_dp0_rFMesg_1,
       CAN_FIRE_RL_ctop_inf_dp0_rFMeta_1,
       CAN_FIRE_RL_ctop_inf_dp0_rFRdy_1,
       CAN_FIRE_RL_ctop_inf_dp0_rRdy,
       CAN_FIRE_RL_ctop_inf_dp0_rRdy_1,
       CAN_FIRE_RL_ctop_inf_dp0_rStart,
       CAN_FIRE_RL_ctop_inf_dp0_rStart_1,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_remDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_remStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_writeData,
       CAN_FIRE_RL_ctop_inf_dp0_tlp_writeReq,
       CAN_FIRE_RL_ctop_inf_dp0_wci_Es_doAlways_Req,
       CAN_FIRE_RL_ctop_inf_dp0_wci_cfrd,
       CAN_FIRE_RL_ctop_inf_dp0_wci_cfwr,
       CAN_FIRE_RL_ctop_inf_dp0_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete,
       CAN_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start,
       CAN_FIRE_RL_ctop_inf_dp0_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp0_wci_reqF_enq,
       CAN_FIRE_RL_ctop_inf_dp0_wci_request_decode,
       CAN_FIRE_RL_ctop_inf_dp0_wci_respF_both,
       CAN_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr,
       CAN_FIRE_RL_ctop_inf_dp0_wci_respF_deq,
       CAN_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr,
       CAN_FIRE_RL_ctop_inf_dp0_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_wci_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_doDwell,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadReq,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_getRequest,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_respMetadata,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_throttleWmi,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_deq,
       CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_ctop_inf_dp1_assignControl,
       CAN_FIRE_RL_ctop_inf_dp1_bml_cntLclDone,
       CAN_FIRE_RL_ctop_inf_dp1_bml_cntLclStart,
       CAN_FIRE_RL_ctop_inf_dp1_bml_cntRemDone,
       CAN_FIRE_RL_ctop_inf_dp1_bml_cntRemStart,
       CAN_FIRE_RL_ctop_inf_dp1_bml_crdAdvance,
       CAN_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp1_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp1_bml_fabDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bml_fba,
       CAN_FIRE_RL_ctop_inf_dp1_bml_initAccumulators,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lbar,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lbcf,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp1_bml_lcredit,
       CAN_FIRE_RL_ctop_inf_dp1_bml_remAdvance,
       CAN_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleDec,
       CAN_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleInc,
       CAN_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleMod,
       CAN_FIRE_RL_ctop_inf_dp1_bml_remDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bml_remStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_ctop_inf_dp1_mkConnectionVtoAf,
       CAN_FIRE_RL_ctop_inf_dp1_operating_actions,
       CAN_FIRE_RL_ctop_inf_dp1_rBMesg,
       CAN_FIRE_RL_ctop_inf_dp1_rBMesg_1,
       CAN_FIRE_RL_ctop_inf_dp1_rBMeta,
       CAN_FIRE_RL_ctop_inf_dp1_rBMeta_1,
       CAN_FIRE_RL_ctop_inf_dp1_rCredit_1,
       CAN_FIRE_RL_ctop_inf_dp1_rDone,
       CAN_FIRE_RL_ctop_inf_dp1_rDone_1,
       CAN_FIRE_RL_ctop_inf_dp1_rFFlow_1,
       CAN_FIRE_RL_ctop_inf_dp1_rFMesg_1,
       CAN_FIRE_RL_ctop_inf_dp1_rFMeta_1,
       CAN_FIRE_RL_ctop_inf_dp1_rFRdy_1,
       CAN_FIRE_RL_ctop_inf_dp1_rRdy,
       CAN_FIRE_RL_ctop_inf_dp1_rRdy_1,
       CAN_FIRE_RL_ctop_inf_dp1_rStart,
       CAN_FIRE_RL_ctop_inf_dp1_rStart_1,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_remDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_remStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_writeData,
       CAN_FIRE_RL_ctop_inf_dp1_tlp_writeReq,
       CAN_FIRE_RL_ctop_inf_dp1_wci_Es_doAlways_Req,
       CAN_FIRE_RL_ctop_inf_dp1_wci_cfrd,
       CAN_FIRE_RL_ctop_inf_dp1_wci_cfwr,
       CAN_FIRE_RL_ctop_inf_dp1_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete,
       CAN_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start,
       CAN_FIRE_RL_ctop_inf_dp1_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp1_wci_reqF_enq,
       CAN_FIRE_RL_ctop_inf_dp1_wci_request_decode,
       CAN_FIRE_RL_ctop_inf_dp1_wci_respF_both,
       CAN_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr,
       CAN_FIRE_RL_ctop_inf_dp1_wci_respF_deq,
       CAN_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr,
       CAN_FIRE_RL_ctop_inf_dp1_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_wci_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_doDwell,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadReq,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_getRequest,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_respMetadata,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_throttleWmi,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_deq,
       CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_ctop_inf_itc0_send_time,
       CAN_FIRE_RL_ctop_inf_itc0_wti_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_inf_itc1_send_time,
       CAN_FIRE_RL_ctop_inf_itc1_wti_sThreadBusy_reg,
       CAN_FIRE_RL_ctop_inf_mAddrConnect,
       CAN_FIRE_RL_ctop_inf_mAddrConnect_1,
       CAN_FIRE_RL_ctop_inf_mAddrSConnect,
       CAN_FIRE_RL_ctop_inf_mAddrSConnect_1,
       CAN_FIRE_RL_ctop_inf_mBEConnect,
       CAN_FIRE_RL_ctop_inf_mBEConnect_1,
       CAN_FIRE_RL_ctop_inf_mCmdConnect,
       CAN_FIRE_RL_ctop_inf_mCmdConnect_1,
       CAN_FIRE_RL_ctop_inf_mDataConnect,
       CAN_FIRE_RL_ctop_inf_mDataConnect_1,
       CAN_FIRE_RL_ctop_inf_mkConnectionVtoAf,
       CAN_FIRE_RL_ctop_inf_mkConnectionVtoAf_1,
       CAN_FIRE_RL_ctop_inf_reqConnect,
       CAN_FIRE_RL_ctop_inf_reqConnect_1,
       CAN_FIRE_RL_ctop_inf_sDataConnect,
       CAN_FIRE_RL_ctop_inf_sDataConnect_1,
       CAN_FIRE_RL_ctop_inf_sFlagConnect,
       CAN_FIRE_RL_ctop_inf_sFlagConnect_1,
       CAN_FIRE_RL_ctop_inf_sRespConnect,
       CAN_FIRE_RL_ctop_inf_sRespConnect_1,
       CAN_FIRE_RL_ctop_inf_stbConnect,
       CAN_FIRE_RL_ctop_inf_stbConnect_1,
       CAN_FIRE_RL_ctop_inf_stbConnect_2,
       CAN_FIRE_RL_ctop_inf_stbConnect_3,
       CAN_FIRE_RL_ctop_mAddrConnect,
       CAN_FIRE_RL_ctop_mAddrConnect_1,
       CAN_FIRE_RL_ctop_mAddrConnect_2,
       CAN_FIRE_RL_ctop_mAddrConnect_3,
       CAN_FIRE_RL_ctop_mAddrConnect_4,
       CAN_FIRE_RL_ctop_mAddrConnect_5,
       CAN_FIRE_RL_ctop_mAddrConnect_6,
       CAN_FIRE_RL_ctop_mAddrConnect_7,
       CAN_FIRE_RL_ctop_mAddrConnect_8,
       CAN_FIRE_RL_ctop_mAddrConnect_9,
       CAN_FIRE_RL_ctop_mAddrSConnect,
       CAN_FIRE_RL_ctop_mAddrSConnect_1,
       CAN_FIRE_RL_ctop_mAddrSConnect_2,
       CAN_FIRE_RL_ctop_mAddrSConnect_3,
       CAN_FIRE_RL_ctop_mAddrSConnect_4,
       CAN_FIRE_RL_ctop_mAddrSConnect_5,
       CAN_FIRE_RL_ctop_mAddrSConnect_6,
       CAN_FIRE_RL_ctop_mAddrSConnect_7,
       CAN_FIRE_RL_ctop_mAddrSConnect_8,
       CAN_FIRE_RL_ctop_mAddrSConnect_9,
       CAN_FIRE_RL_ctop_mBEConnect,
       CAN_FIRE_RL_ctop_mBEConnect_1,
       CAN_FIRE_RL_ctop_mBEConnect_2,
       CAN_FIRE_RL_ctop_mBEConnect_3,
       CAN_FIRE_RL_ctop_mBEConnect_4,
       CAN_FIRE_RL_ctop_mBEConnect_5,
       CAN_FIRE_RL_ctop_mBEConnect_6,
       CAN_FIRE_RL_ctop_mBEConnect_7,
       CAN_FIRE_RL_ctop_mBurstLConnect,
       CAN_FIRE_RL_ctop_mBurstLConnect_1,
       CAN_FIRE_RL_ctop_mCmdConnect,
       CAN_FIRE_RL_ctop_mCmdConnect_1,
       CAN_FIRE_RL_ctop_mCmdConnect_2,
       CAN_FIRE_RL_ctop_mCmdConnect_3,
       CAN_FIRE_RL_ctop_mCmdConnect_4,
       CAN_FIRE_RL_ctop_mCmdConnect_5,
       CAN_FIRE_RL_ctop_mCmdConnect_6,
       CAN_FIRE_RL_ctop_mCmdConnect_7,
       CAN_FIRE_RL_ctop_mCmdConnect_8,
       CAN_FIRE_RL_ctop_mCmdConnect_9,
       CAN_FIRE_RL_ctop_mDataBEConnect,
       CAN_FIRE_RL_ctop_mDataBEConnect_1,
       CAN_FIRE_RL_ctop_mDataConnect,
       CAN_FIRE_RL_ctop_mDataConnect_1,
       CAN_FIRE_RL_ctop_mDataConnect_2,
       CAN_FIRE_RL_ctop_mDataConnect_3,
       CAN_FIRE_RL_ctop_mDataConnect_4,
       CAN_FIRE_RL_ctop_mDataConnect_5,
       CAN_FIRE_RL_ctop_mDataConnect_6,
       CAN_FIRE_RL_ctop_mDataConnect_7,
       CAN_FIRE_RL_ctop_mDataConnect_8,
       CAN_FIRE_RL_ctop_mDataConnect_9,
       CAN_FIRE_RL_ctop_mDataIConnect,
       CAN_FIRE_RL_ctop_mDataIConnect_1,
       CAN_FIRE_RL_ctop_mDataLConnect,
       CAN_FIRE_RL_ctop_mDataLConnect_1,
       CAN_FIRE_RL_ctop_mDataVConnect,
       CAN_FIRE_RL_ctop_mDataVConnect_1,
       CAN_FIRE_RL_ctop_mFlagConnect_8,
       CAN_FIRE_RL_ctop_mFlagConnect_9,
       CAN_FIRE_RL_ctop_mReqIConnect,
       CAN_FIRE_RL_ctop_mReqIConnect_1,
       CAN_FIRE_RL_ctop_mReqLConnect,
       CAN_FIRE_RL_ctop_mReqLConnect_1,
       CAN_FIRE_RL_ctop_mRstConnect,
       CAN_FIRE_RL_ctop_mRstConnect_1,
       CAN_FIRE_RL_ctop_sDataConnect,
       CAN_FIRE_RL_ctop_sDataConnect_1,
       CAN_FIRE_RL_ctop_sDataConnect_2,
       CAN_FIRE_RL_ctop_sDataConnect_3,
       CAN_FIRE_RL_ctop_sDataConnect_4,
       CAN_FIRE_RL_ctop_sDataConnect_5,
       CAN_FIRE_RL_ctop_sDataConnect_6,
       CAN_FIRE_RL_ctop_sDataConnect_7,
       CAN_FIRE_RL_ctop_sDataConnect_8,
       CAN_FIRE_RL_ctop_sDataConnect_9,
       CAN_FIRE_RL_ctop_sFlagConnect,
       CAN_FIRE_RL_ctop_sFlagConnect_1,
       CAN_FIRE_RL_ctop_sFlagConnect_2,
       CAN_FIRE_RL_ctop_sFlagConnect_3,
       CAN_FIRE_RL_ctop_sFlagConnect_4,
       CAN_FIRE_RL_ctop_sFlagConnect_5,
       CAN_FIRE_RL_ctop_sFlagConnect_6,
       CAN_FIRE_RL_ctop_sFlagConnect_7,
       CAN_FIRE_RL_ctop_sFlagConnect_8,
       CAN_FIRE_RL_ctop_sFlagConnect_9,
       CAN_FIRE_RL_ctop_sRespConnect,
       CAN_FIRE_RL_ctop_sRespConnect_1,
       CAN_FIRE_RL_ctop_sRespConnect_2,
       CAN_FIRE_RL_ctop_sRespConnect_3,
       CAN_FIRE_RL_ctop_sRespConnect_4,
       CAN_FIRE_RL_ctop_sRespConnect_5,
       CAN_FIRE_RL_ctop_sRespConnect_6,
       CAN_FIRE_RL_ctop_sRespConnect_7,
       CAN_FIRE_RL_ctop_sRespConnect_8,
       CAN_FIRE_RL_ctop_sRespConnect_9,
       CAN_FIRE_RL_ctop_sRstConnect,
       CAN_FIRE_RL_ctop_sRstConnect_1,
       CAN_FIRE_RL_ctop_sdtbConnect,
       CAN_FIRE_RL_ctop_sdtbConnect_1,
       CAN_FIRE_RL_ctop_stbConnect,
       CAN_FIRE_RL_ctop_stbConnect_1,
       CAN_FIRE_RL_ctop_stbConnect_2,
       CAN_FIRE_RL_ctop_stbConnect_3,
       CAN_FIRE_RL_ctop_stbConnect_4,
       CAN_FIRE_RL_ctop_stbConnect_5,
       CAN_FIRE_RL_ctop_stbConnect_6,
       CAN_FIRE_RL_ctop_stbConnect_7,
       CAN_FIRE_RL_ctop_stbConnect_8,
       CAN_FIRE_RL_ctop_stbConnect_9,
       CAN_FIRE_RL_i2pAF_dClear_update_head,
       CAN_FIRE_RL_i2pAF_deq_update_head,
       CAN_FIRE_RL_i2pAF_enq_update_tail,
       CAN_FIRE_RL_i2pAF_reset_head,
       CAN_FIRE_RL_i2pAF_reset_tail,
       CAN_FIRE_RL_i2pAF_sClear_update_tail,
       CAN_FIRE_RL_infLed_clock_domain_crossing,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mBurstLConnect,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mDataBEConnect,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataLConnect,
       CAN_FIRE_RL_mDataVConnect,
       CAN_FIRE_RL_mFlagConnect,
       CAN_FIRE_RL_mFlagConnect_1,
       CAN_FIRE_RL_mFlagConnect_2,
       CAN_FIRE_RL_mFlagConnect_3,
       CAN_FIRE_RL_mFlagConnect_4,
       CAN_FIRE_RL_mReqLConnect,
       CAN_FIRE_RL_mRstConnect,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_p2iAF_dClear_update_head,
       CAN_FIRE_RL_p2iAF_deq_update_head,
       CAN_FIRE_RL_p2iAF_enq_update_tail,
       CAN_FIRE_RL_p2iAF_reset_head,
       CAN_FIRE_RL_p2iAF_reset_tail,
       CAN_FIRE_RL_p2iAF_sClear_update_tail,
       CAN_FIRE_RL_pci0_connect_trn_rx,
       CAN_FIRE_RL_pci0_connect_trn_tx,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       CAN_FIRE_RL_reqConnect,
       CAN_FIRE_RL_reqConnect_1,
       CAN_FIRE_RL_reqConnect_2,
       CAN_FIRE_RL_reqConnect_3,
       CAN_FIRE_RL_reqConnect_4,
       CAN_FIRE_RL_reqConnect_5,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sDataConnect_1,
       CAN_FIRE_RL_sDataConnect_2,
       CAN_FIRE_RL_sDataConnect_3,
       CAN_FIRE_RL_sDataConnect_4,
       CAN_FIRE_RL_sDataConnect_5,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sFlagConnect_1,
       CAN_FIRE_RL_sFlagConnect_2,
       CAN_FIRE_RL_sFlagConnect_3,
       CAN_FIRE_RL_sFlagConnect_4,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRespConnect_1,
       CAN_FIRE_RL_sRespConnect_2,
       CAN_FIRE_RL_sRespConnect_3,
       CAN_FIRE_RL_sRespConnect_4,
       CAN_FIRE_RL_sRespConnect_5,
       CAN_FIRE_RL_sRespLConnect,
       CAN_FIRE_RL_scaConnect,
       CAN_FIRE_RL_sdaConnect,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_RL_stbConnect_4,
       CAN_FIRE_RL_stbConnect_5,
       CAN_FIRE_RL_tcGbe0_send_time,
       CAN_FIRE_RL_tcGbe0_wti_sThreadBusy_reg,
       CAN_FIRE_RL_tie_off_inputs,
       CAN_FIRE_RL_tie_off_inputs_1,
       CAN_FIRE_RL_write_pciDevice,
       CAN_FIRE_flash_fwait,
       CAN_FIRE_gmii_rx_dv,
       CAN_FIRE_gmii_rx_er,
       CAN_FIRE_gmii_rxd,
       CAN_FIRE_gps_ppsSyncIn,
       CAN_FIRE_pcie_rxn,
       CAN_FIRE_pcie_rxp,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_every,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_connect,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_every,
       WILL_FIRE_RL_connect_interrupt_1,
       WILL_FIRE_RL_connect_interrupt_do,
       WILL_FIRE_RL_connect_interrupt_mmenable,
       WILL_FIRE_RL_connect_interrupt_msienable,
       WILL_FIRE_RL_connect_interrupt_rdy_n,
       WILL_FIRE_RL_ctop_app_appW2_fabRespCredit_accumulate,
       WILL_FIRE_RL_ctop_app_appW2_mesgPreRequest__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_operating_actions,
       WILL_FIRE_RL_ctop_app_appW2_respF_portA,
       WILL_FIRE_RL_ctop_app_appW2_respF_portB,
       WILL_FIRE_RL_ctop_app_appW2_respF_portB_read_data,
       WILL_FIRE_RL_ctop_app_appW2_wci_Es_doAlways_Req,
       WILL_FIRE_RL_ctop_app_appW2_wci_cfrd,
       WILL_FIRE_RL_ctop_app_appW2_wci_cfwr,
       WILL_FIRE_RL_ctop_app_appW2_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete,
       WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start,
       WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI,
       WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO,
       WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE,
       WILL_FIRE_RL_ctop_app_appW2_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_ctop_app_appW2_wci_reqF_enq,
       WILL_FIRE_RL_ctop_app_appW2_wci_request_decode,
       WILL_FIRE_RL_ctop_app_appW2_wci_respF_both,
       WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr,
       WILL_FIRE_RL_ctop_app_appW2_wci_respF_deq,
       WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr,
       WILL_FIRE_RL_ctop_app_appW2_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wci_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_app_appW2_wmi_Em_doAlways,
       WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both,
       WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr,
       WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_deq,
       WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr,
       WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both,
       WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_ctop_app_appW2_wmi_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both,
       WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr,
       WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_deq,
       WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr,
       WILL_FIRE_RL_ctop_app_appW2_wmi_respAdvance,
       WILL_FIRE_RL_ctop_app_appW2_wmi_sDataThreadBusy_d__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wmi_sThreadBusy_d__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin,
       WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest,
       WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort,
       WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin,
       WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize,
       WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise,
       WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise,
       WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_ext_status_assign,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_app_appW2_wsiM_update_statusR,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_backpressure,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_ext_status_assign,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_enq,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_reset,
       WILL_FIRE_RL_ctop_app_appW2_wsiS_update_statusR,
       WILL_FIRE_RL_ctop_app_appW2_wsi_Es_doAlways,
       WILL_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush,
       WILL_FIRE_RL_ctop_app_appW3_cycles_passed_count,
       WILL_FIRE_RL_ctop_app_appW3_delay_Fb2Fc,
       WILL_FIRE_RL_ctop_app_appW3_delay_read_req,
       WILL_FIRE_RL_ctop_app_appW3_delay_read_resp,
       WILL_FIRE_RL_ctop_app_appW3_delay_write_req,
       WILL_FIRE_RL_ctop_app_appW3_dlyReadCredit_accumulate,
       WILL_FIRE_RL_ctop_app_appW3_dlyReadyToWrite_accumulate,
       WILL_FIRE_RL_ctop_app_appW3_dlyWordsStored_accumulate,
       WILL_FIRE_RL_ctop_app_appW3_mesgWF_portA,
       WILL_FIRE_RL_ctop_app_appW3_mesgWF_portB,
       WILL_FIRE_RL_ctop_app_appW3_mesgWF_portB_read_data,
       WILL_FIRE_RL_ctop_app_appW3_operating_actions,
       WILL_FIRE_RL_ctop_app_appW3_rdSer_begin,
       WILL_FIRE_RL_ctop_app_appW3_rdSer_body,
       WILL_FIRE_RL_ctop_app_appW3_rdSer_sync,
       WILL_FIRE_RL_ctop_app_appW3_wci_Es_doAlways_Req,
       WILL_FIRE_RL_ctop_app_appW3_wci_cfrd,
       WILL_FIRE_RL_ctop_app_appW3_wci_cfwr,
       WILL_FIRE_RL_ctop_app_appW3_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete,
       WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start,
       WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI,
       WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO,
       WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE,
       WILL_FIRE_RL_ctop_app_appW3_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_ctop_app_appW3_wci_reqF_enq,
       WILL_FIRE_RL_ctop_app_appW3_wci_request_decode,
       WILL_FIRE_RL_ctop_app_appW3_wci_respF_both,
       WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr,
       WILL_FIRE_RL_ctop_app_appW3_wci_respF_deq,
       WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr,
       WILL_FIRE_RL_ctop_app_appW3_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wci_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_Em_doAlways,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_deq,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_deq,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_respAdvance,
       WILL_FIRE_RL_ctop_app_appW3_wmemi_update_statusR,
       WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin,
       WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress,
       WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin,
       WILL_FIRE_RL_ctop_app_appW3_wrtSer_body,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_ext_status_assign,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_app_appW3_wsiM_update_statusR,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_backpressure,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_ext_status_assign,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_reset,
       WILL_FIRE_RL_ctop_app_appW3_wsiS_update_statusR,
       WILL_FIRE_RL_ctop_app_appW3_wsi_Es_doAlways,
       WILL_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush,
       WILL_FIRE_RL_ctop_app_appW4_fabRespCredit_accumulate,
       WILL_FIRE_RL_ctop_app_appW4_mesgPreRequest__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_operating_actions,
       WILL_FIRE_RL_ctop_app_appW4_respF_portA,
       WILL_FIRE_RL_ctop_app_appW4_respF_portB,
       WILL_FIRE_RL_ctop_app_appW4_respF_portB_read_data,
       WILL_FIRE_RL_ctop_app_appW4_wci_Es_doAlways_Req,
       WILL_FIRE_RL_ctop_app_appW4_wci_cfrd,
       WILL_FIRE_RL_ctop_app_appW4_wci_cfwr,
       WILL_FIRE_RL_ctop_app_appW4_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete,
       WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start,
       WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI,
       WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO,
       WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE,
       WILL_FIRE_RL_ctop_app_appW4_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_ctop_app_appW4_wci_reqF_enq,
       WILL_FIRE_RL_ctop_app_appW4_wci_request_decode,
       WILL_FIRE_RL_ctop_app_appW4_wci_respF_both,
       WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr,
       WILL_FIRE_RL_ctop_app_appW4_wci_respF_deq,
       WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr,
       WILL_FIRE_RL_ctop_app_appW4_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wci_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_app_appW4_wmi_Em_doAlways,
       WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both,
       WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr,
       WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_deq,
       WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr,
       WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both,
       WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_ctop_app_appW4_wmi_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both,
       WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr,
       WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_deq,
       WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr,
       WILL_FIRE_RL_ctop_app_appW4_wmi_respAdvance,
       WILL_FIRE_RL_ctop_app_appW4_wmi_sDataThreadBusy_d__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wmi_sThreadBusy_d__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin,
       WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest,
       WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort,
       WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin,
       WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize,
       WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise,
       WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise,
       WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_ext_status_assign,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_app_appW4_wsiM_update_statusR,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_backpressure,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_ext_status_assign,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_reset,
       WILL_FIRE_RL_ctop_app_appW4_wsiS_update_statusR,
       WILL_FIRE_RL_ctop_app_appW4_wsi_Es_doAlways,
       WILL_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush,
       WILL_FIRE_RL_ctop_app_mBurstLConnect,
       WILL_FIRE_RL_ctop_app_mBurstLConnect_1,
       WILL_FIRE_RL_ctop_app_mBurstPConnect,
       WILL_FIRE_RL_ctop_app_mBurstPConnect_1,
       WILL_FIRE_RL_ctop_app_mByteEnConnect,
       WILL_FIRE_RL_ctop_app_mByteEnConnect_1,
       WILL_FIRE_RL_ctop_app_mCmdConnect,
       WILL_FIRE_RL_ctop_app_mCmdConnect_1,
       WILL_FIRE_RL_ctop_app_mDataConnect,
       WILL_FIRE_RL_ctop_app_mDataConnect_1,
       WILL_FIRE_RL_ctop_app_mDataIConnect,
       WILL_FIRE_RL_ctop_app_mDataIConnect_1,
       WILL_FIRE_RL_ctop_app_mReqIConnect,
       WILL_FIRE_RL_ctop_app_mReqIConnect_1,
       WILL_FIRE_RL_ctop_app_mReqLConnect,
       WILL_FIRE_RL_ctop_app_mReqLConnect_1,
       WILL_FIRE_RL_ctop_app_mRstConnect,
       WILL_FIRE_RL_ctop_app_mRstConnect_1,
       WILL_FIRE_RL_ctop_app_sRstConnect,
       WILL_FIRE_RL_ctop_app_sRstConnect_1,
       WILL_FIRE_RL_ctop_app_stbConnect,
       WILL_FIRE_RL_ctop_app_stbConnect_1,
       WILL_FIRE_RL_ctop_inf_ClientServerRequest,
       WILL_FIRE_RL_ctop_inf_ClientServerRequest_1,
       WILL_FIRE_RL_ctop_inf_ClientServerRequest_2,
       WILL_FIRE_RL_ctop_inf_ClientServerRequest_3,
       WILL_FIRE_RL_ctop_inf_ClientServerRequest_4,
       WILL_FIRE_RL_ctop_inf_ClientServerResponse,
       WILL_FIRE_RL_ctop_inf_ClientServerResponse_1,
       WILL_FIRE_RL_ctop_inf_ClientServerResponse_2,
       WILL_FIRE_RL_ctop_inf_ClientServerResponse_3,
       WILL_FIRE_RL_ctop_inf_ClientServerResponse_4,
       WILL_FIRE_RL_ctop_inf_chomp_rogue,
       WILL_FIRE_RL_ctop_inf_dp0_assignControl,
       WILL_FIRE_RL_ctop_inf_dp0_bml_cntLclDone,
       WILL_FIRE_RL_ctop_inf_dp0_bml_cntLclStart,
       WILL_FIRE_RL_ctop_inf_dp0_bml_cntRemDone,
       WILL_FIRE_RL_ctop_inf_dp0_bml_cntRemStart,
       WILL_FIRE_RL_ctop_inf_dp0_bml_crdAdvance,
       WILL_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp0_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp0_bml_fabDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bml_fba,
       WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lbar,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lbcf,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lclAdvance,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp0_bml_lcredit,
       WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance,
       WILL_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp0_bml_remDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bml_remStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp0_mkConnectionVtoAf,
       WILL_FIRE_RL_ctop_inf_dp0_operating_actions,
       WILL_FIRE_RL_ctop_inf_dp0_rBMesg,
       WILL_FIRE_RL_ctop_inf_dp0_rBMesg_1,
       WILL_FIRE_RL_ctop_inf_dp0_rBMeta,
       WILL_FIRE_RL_ctop_inf_dp0_rBMeta_1,
       WILL_FIRE_RL_ctop_inf_dp0_rCredit_1,
       WILL_FIRE_RL_ctop_inf_dp0_rDone,
       WILL_FIRE_RL_ctop_inf_dp0_rDone_1,
       WILL_FIRE_RL_ctop_inf_dp0_rFFlow_1,
       WILL_FIRE_RL_ctop_inf_dp0_rFMesg_1,
       WILL_FIRE_RL_ctop_inf_dp0_rFMeta_1,
       WILL_FIRE_RL_ctop_inf_dp0_rFRdy_1,
       WILL_FIRE_RL_ctop_inf_dp0_rRdy,
       WILL_FIRE_RL_ctop_inf_dp0_rRdy_1,
       WILL_FIRE_RL_ctop_inf_dp0_rStart,
       WILL_FIRE_RL_ctop_inf_dp0_rStart_1,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_remDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_remStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData,
       WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq,
       WILL_FIRE_RL_ctop_inf_dp0_wci_Es_doAlways_Req,
       WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd,
       WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr,
       WILL_FIRE_RL_ctop_inf_dp0_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete,
       WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start,
       WILL_FIRE_RL_ctop_inf_dp0_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp0_wci_reqF_enq,
       WILL_FIRE_RL_ctop_inf_dp0_wci_request_decode,
       WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both,
       WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr,
       WILL_FIRE_RL_ctop_inf_dp0_wci_respF_deq,
       WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr,
       WILL_FIRE_RL_ctop_inf_dp0_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_wci_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_doDwell,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_throttleWmi,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_deq,
       WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_ctop_inf_dp1_assignControl,
       WILL_FIRE_RL_ctop_inf_dp1_bml_cntLclDone,
       WILL_FIRE_RL_ctop_inf_dp1_bml_cntLclStart,
       WILL_FIRE_RL_ctop_inf_dp1_bml_cntRemDone,
       WILL_FIRE_RL_ctop_inf_dp1_bml_cntRemStart,
       WILL_FIRE_RL_ctop_inf_dp1_bml_crdAdvance,
       WILL_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp1_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp1_bml_fabDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bml_fba,
       WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lbar,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lbcf,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lclAdvance,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp1_bml_lcredit,
       WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance,
       WILL_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleDec,
       WILL_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleInc,
       WILL_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleMod,
       WILL_FIRE_RL_ctop_inf_dp1_bml_remDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bml_remStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_ctop_inf_dp1_mkConnectionVtoAf,
       WILL_FIRE_RL_ctop_inf_dp1_operating_actions,
       WILL_FIRE_RL_ctop_inf_dp1_rBMesg,
       WILL_FIRE_RL_ctop_inf_dp1_rBMesg_1,
       WILL_FIRE_RL_ctop_inf_dp1_rBMeta,
       WILL_FIRE_RL_ctop_inf_dp1_rBMeta_1,
       WILL_FIRE_RL_ctop_inf_dp1_rCredit_1,
       WILL_FIRE_RL_ctop_inf_dp1_rDone,
       WILL_FIRE_RL_ctop_inf_dp1_rDone_1,
       WILL_FIRE_RL_ctop_inf_dp1_rFFlow_1,
       WILL_FIRE_RL_ctop_inf_dp1_rFMesg_1,
       WILL_FIRE_RL_ctop_inf_dp1_rFMeta_1,
       WILL_FIRE_RL_ctop_inf_dp1_rFRdy_1,
       WILL_FIRE_RL_ctop_inf_dp1_rRdy,
       WILL_FIRE_RL_ctop_inf_dp1_rRdy_1,
       WILL_FIRE_RL_ctop_inf_dp1_rStart,
       WILL_FIRE_RL_ctop_inf_dp1_rStart_1,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_remDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_remStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData,
       WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq,
       WILL_FIRE_RL_ctop_inf_dp1_wci_Es_doAlways_Req,
       WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd,
       WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr,
       WILL_FIRE_RL_ctop_inf_dp1_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete,
       WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start,
       WILL_FIRE_RL_ctop_inf_dp1_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp1_wci_reqF_enq,
       WILL_FIRE_RL_ctop_inf_dp1_wci_request_decode,
       WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both,
       WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr,
       WILL_FIRE_RL_ctop_inf_dp1_wci_respF_deq,
       WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr,
       WILL_FIRE_RL_ctop_inf_dp1_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_wci_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_doDwell,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_throttleWmi,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_deq,
       WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_ctop_inf_itc0_send_time,
       WILL_FIRE_RL_ctop_inf_itc0_wti_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_inf_itc1_send_time,
       WILL_FIRE_RL_ctop_inf_itc1_wti_sThreadBusy_reg,
       WILL_FIRE_RL_ctop_inf_mAddrConnect,
       WILL_FIRE_RL_ctop_inf_mAddrConnect_1,
       WILL_FIRE_RL_ctop_inf_mAddrSConnect,
       WILL_FIRE_RL_ctop_inf_mAddrSConnect_1,
       WILL_FIRE_RL_ctop_inf_mBEConnect,
       WILL_FIRE_RL_ctop_inf_mBEConnect_1,
       WILL_FIRE_RL_ctop_inf_mCmdConnect,
       WILL_FIRE_RL_ctop_inf_mCmdConnect_1,
       WILL_FIRE_RL_ctop_inf_mDataConnect,
       WILL_FIRE_RL_ctop_inf_mDataConnect_1,
       WILL_FIRE_RL_ctop_inf_mkConnectionVtoAf,
       WILL_FIRE_RL_ctop_inf_mkConnectionVtoAf_1,
       WILL_FIRE_RL_ctop_inf_reqConnect,
       WILL_FIRE_RL_ctop_inf_reqConnect_1,
       WILL_FIRE_RL_ctop_inf_sDataConnect,
       WILL_FIRE_RL_ctop_inf_sDataConnect_1,
       WILL_FIRE_RL_ctop_inf_sFlagConnect,
       WILL_FIRE_RL_ctop_inf_sFlagConnect_1,
       WILL_FIRE_RL_ctop_inf_sRespConnect,
       WILL_FIRE_RL_ctop_inf_sRespConnect_1,
       WILL_FIRE_RL_ctop_inf_stbConnect,
       WILL_FIRE_RL_ctop_inf_stbConnect_1,
       WILL_FIRE_RL_ctop_inf_stbConnect_2,
       WILL_FIRE_RL_ctop_inf_stbConnect_3,
       WILL_FIRE_RL_ctop_mAddrConnect,
       WILL_FIRE_RL_ctop_mAddrConnect_1,
       WILL_FIRE_RL_ctop_mAddrConnect_2,
       WILL_FIRE_RL_ctop_mAddrConnect_3,
       WILL_FIRE_RL_ctop_mAddrConnect_4,
       WILL_FIRE_RL_ctop_mAddrConnect_5,
       WILL_FIRE_RL_ctop_mAddrConnect_6,
       WILL_FIRE_RL_ctop_mAddrConnect_7,
       WILL_FIRE_RL_ctop_mAddrConnect_8,
       WILL_FIRE_RL_ctop_mAddrConnect_9,
       WILL_FIRE_RL_ctop_mAddrSConnect,
       WILL_FIRE_RL_ctop_mAddrSConnect_1,
       WILL_FIRE_RL_ctop_mAddrSConnect_2,
       WILL_FIRE_RL_ctop_mAddrSConnect_3,
       WILL_FIRE_RL_ctop_mAddrSConnect_4,
       WILL_FIRE_RL_ctop_mAddrSConnect_5,
       WILL_FIRE_RL_ctop_mAddrSConnect_6,
       WILL_FIRE_RL_ctop_mAddrSConnect_7,
       WILL_FIRE_RL_ctop_mAddrSConnect_8,
       WILL_FIRE_RL_ctop_mAddrSConnect_9,
       WILL_FIRE_RL_ctop_mBEConnect,
       WILL_FIRE_RL_ctop_mBEConnect_1,
       WILL_FIRE_RL_ctop_mBEConnect_2,
       WILL_FIRE_RL_ctop_mBEConnect_3,
       WILL_FIRE_RL_ctop_mBEConnect_4,
       WILL_FIRE_RL_ctop_mBEConnect_5,
       WILL_FIRE_RL_ctop_mBEConnect_6,
       WILL_FIRE_RL_ctop_mBEConnect_7,
       WILL_FIRE_RL_ctop_mBurstLConnect,
       WILL_FIRE_RL_ctop_mBurstLConnect_1,
       WILL_FIRE_RL_ctop_mCmdConnect,
       WILL_FIRE_RL_ctop_mCmdConnect_1,
       WILL_FIRE_RL_ctop_mCmdConnect_2,
       WILL_FIRE_RL_ctop_mCmdConnect_3,
       WILL_FIRE_RL_ctop_mCmdConnect_4,
       WILL_FIRE_RL_ctop_mCmdConnect_5,
       WILL_FIRE_RL_ctop_mCmdConnect_6,
       WILL_FIRE_RL_ctop_mCmdConnect_7,
       WILL_FIRE_RL_ctop_mCmdConnect_8,
       WILL_FIRE_RL_ctop_mCmdConnect_9,
       WILL_FIRE_RL_ctop_mDataBEConnect,
       WILL_FIRE_RL_ctop_mDataBEConnect_1,
       WILL_FIRE_RL_ctop_mDataConnect,
       WILL_FIRE_RL_ctop_mDataConnect_1,
       WILL_FIRE_RL_ctop_mDataConnect_2,
       WILL_FIRE_RL_ctop_mDataConnect_3,
       WILL_FIRE_RL_ctop_mDataConnect_4,
       WILL_FIRE_RL_ctop_mDataConnect_5,
       WILL_FIRE_RL_ctop_mDataConnect_6,
       WILL_FIRE_RL_ctop_mDataConnect_7,
       WILL_FIRE_RL_ctop_mDataConnect_8,
       WILL_FIRE_RL_ctop_mDataConnect_9,
       WILL_FIRE_RL_ctop_mDataIConnect,
       WILL_FIRE_RL_ctop_mDataIConnect_1,
       WILL_FIRE_RL_ctop_mDataLConnect,
       WILL_FIRE_RL_ctop_mDataLConnect_1,
       WILL_FIRE_RL_ctop_mDataVConnect,
       WILL_FIRE_RL_ctop_mDataVConnect_1,
       WILL_FIRE_RL_ctop_mFlagConnect_8,
       WILL_FIRE_RL_ctop_mFlagConnect_9,
       WILL_FIRE_RL_ctop_mReqIConnect,
       WILL_FIRE_RL_ctop_mReqIConnect_1,
       WILL_FIRE_RL_ctop_mReqLConnect,
       WILL_FIRE_RL_ctop_mReqLConnect_1,
       WILL_FIRE_RL_ctop_mRstConnect,
       WILL_FIRE_RL_ctop_mRstConnect_1,
       WILL_FIRE_RL_ctop_sDataConnect,
       WILL_FIRE_RL_ctop_sDataConnect_1,
       WILL_FIRE_RL_ctop_sDataConnect_2,
       WILL_FIRE_RL_ctop_sDataConnect_3,
       WILL_FIRE_RL_ctop_sDataConnect_4,
       WILL_FIRE_RL_ctop_sDataConnect_5,
       WILL_FIRE_RL_ctop_sDataConnect_6,
       WILL_FIRE_RL_ctop_sDataConnect_7,
       WILL_FIRE_RL_ctop_sDataConnect_8,
       WILL_FIRE_RL_ctop_sDataConnect_9,
       WILL_FIRE_RL_ctop_sFlagConnect,
       WILL_FIRE_RL_ctop_sFlagConnect_1,
       WILL_FIRE_RL_ctop_sFlagConnect_2,
       WILL_FIRE_RL_ctop_sFlagConnect_3,
       WILL_FIRE_RL_ctop_sFlagConnect_4,
       WILL_FIRE_RL_ctop_sFlagConnect_5,
       WILL_FIRE_RL_ctop_sFlagConnect_6,
       WILL_FIRE_RL_ctop_sFlagConnect_7,
       WILL_FIRE_RL_ctop_sFlagConnect_8,
       WILL_FIRE_RL_ctop_sFlagConnect_9,
       WILL_FIRE_RL_ctop_sRespConnect,
       WILL_FIRE_RL_ctop_sRespConnect_1,
       WILL_FIRE_RL_ctop_sRespConnect_2,
       WILL_FIRE_RL_ctop_sRespConnect_3,
       WILL_FIRE_RL_ctop_sRespConnect_4,
       WILL_FIRE_RL_ctop_sRespConnect_5,
       WILL_FIRE_RL_ctop_sRespConnect_6,
       WILL_FIRE_RL_ctop_sRespConnect_7,
       WILL_FIRE_RL_ctop_sRespConnect_8,
       WILL_FIRE_RL_ctop_sRespConnect_9,
       WILL_FIRE_RL_ctop_sRstConnect,
       WILL_FIRE_RL_ctop_sRstConnect_1,
       WILL_FIRE_RL_ctop_sdtbConnect,
       WILL_FIRE_RL_ctop_sdtbConnect_1,
       WILL_FIRE_RL_ctop_stbConnect,
       WILL_FIRE_RL_ctop_stbConnect_1,
       WILL_FIRE_RL_ctop_stbConnect_2,
       WILL_FIRE_RL_ctop_stbConnect_3,
       WILL_FIRE_RL_ctop_stbConnect_4,
       WILL_FIRE_RL_ctop_stbConnect_5,
       WILL_FIRE_RL_ctop_stbConnect_6,
       WILL_FIRE_RL_ctop_stbConnect_7,
       WILL_FIRE_RL_ctop_stbConnect_8,
       WILL_FIRE_RL_ctop_stbConnect_9,
       WILL_FIRE_RL_i2pAF_dClear_update_head,
       WILL_FIRE_RL_i2pAF_deq_update_head,
       WILL_FIRE_RL_i2pAF_enq_update_tail,
       WILL_FIRE_RL_i2pAF_reset_head,
       WILL_FIRE_RL_i2pAF_reset_tail,
       WILL_FIRE_RL_i2pAF_sClear_update_tail,
       WILL_FIRE_RL_infLed_clock_domain_crossing,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mBurstLConnect,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mDataBEConnect,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataLConnect,
       WILL_FIRE_RL_mDataVConnect,
       WILL_FIRE_RL_mFlagConnect,
       WILL_FIRE_RL_mFlagConnect_1,
       WILL_FIRE_RL_mFlagConnect_2,
       WILL_FIRE_RL_mFlagConnect_3,
       WILL_FIRE_RL_mFlagConnect_4,
       WILL_FIRE_RL_mReqLConnect,
       WILL_FIRE_RL_mRstConnect,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_p2iAF_dClear_update_head,
       WILL_FIRE_RL_p2iAF_deq_update_head,
       WILL_FIRE_RL_p2iAF_enq_update_tail,
       WILL_FIRE_RL_p2iAF_reset_head,
       WILL_FIRE_RL_p2iAF_reset_tail,
       WILL_FIRE_RL_p2iAF_sClear_update_tail,
       WILL_FIRE_RL_pci0_connect_trn_rx,
       WILL_FIRE_RL_pci0_connect_trn_tx,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_reqConnect,
       WILL_FIRE_RL_reqConnect_1,
       WILL_FIRE_RL_reqConnect_2,
       WILL_FIRE_RL_reqConnect_3,
       WILL_FIRE_RL_reqConnect_4,
       WILL_FIRE_RL_reqConnect_5,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sDataConnect_1,
       WILL_FIRE_RL_sDataConnect_2,
       WILL_FIRE_RL_sDataConnect_3,
       WILL_FIRE_RL_sDataConnect_4,
       WILL_FIRE_RL_sDataConnect_5,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sFlagConnect_1,
       WILL_FIRE_RL_sFlagConnect_2,
       WILL_FIRE_RL_sFlagConnect_3,
       WILL_FIRE_RL_sFlagConnect_4,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRespConnect_1,
       WILL_FIRE_RL_sRespConnect_2,
       WILL_FIRE_RL_sRespConnect_3,
       WILL_FIRE_RL_sRespConnect_4,
       WILL_FIRE_RL_sRespConnect_5,
       WILL_FIRE_RL_sRespLConnect,
       WILL_FIRE_RL_scaConnect,
       WILL_FIRE_RL_sdaConnect,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_RL_stbConnect_4,
       WILL_FIRE_RL_stbConnect_5,
       WILL_FIRE_RL_tcGbe0_send_time,
       WILL_FIRE_RL_tcGbe0_wti_sThreadBusy_reg,
       WILL_FIRE_RL_tie_off_inputs,
       WILL_FIRE_RL_tie_off_inputs_1,
       WILL_FIRE_RL_write_pciDevice,
       WILL_FIRE_flash_fwait,
       WILL_FIRE_gmii_rx_dv,
       WILL_FIRE_gmii_rx_er,
       WILL_FIRE_gmii_rxd,
       WILL_FIRE_gps_ppsSyncIn,
       WILL_FIRE_pcie_rxn,
       WILL_FIRE_pcie_rxp;

  // inputs to muxes for submodule ports
  reg [127 : 0] MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_1,
		MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_2;
  reg [33 : 0] MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2,
	       MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2,
	       MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2,
	       MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2,
	       MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2;
  reg [31 : 0] MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2,
	       MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2;
  reg [10 : 0] MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_3,
	       MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_4,
	       MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_3,
	       MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_4,
	       MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_3,
	       MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_4,
	       MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_3,
	       MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_4,
	       MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_3,
	       MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_4,
	       MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_3,
	       MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_4,
	       MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_3,
	       MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_4,
	       MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_3,
	       MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_4;
  wire [152 : 0] MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_1,
		 MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_2,
		 MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_3,
		 MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_4,
		 MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_5,
		 MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_6,
		 MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_7,
		 MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_8,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_1,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_2,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_3,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_4,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_5,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_6,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_7,
		 MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_8,
		 MUX_p2iS$write_1__VAL_1,
		 MUX_p2iS$write_1__VAL_2;
  wire [145 : 0] MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_1,
		 MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2,
		 MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__VAL_1;
  wire [138 : 0] MUX_ctop_inf_dp0_tlp_mRespF$enq_1__VAL_1,
		 MUX_ctop_inf_dp0_tlp_mRespF$enq_1__VAL_2,
		 MUX_ctop_inf_dp1_tlp_mRespF$enq_1__VAL_1,
		 MUX_ctop_inf_dp1_tlp_mRespF$enq_1__VAL_2;
  wire [129 : 0] MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_1,
		 MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_2,
		 MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_3,
		 MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_4,
		 MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_5,
		 MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_6,
		 MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_1,
		 MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_2,
		 MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_3,
		 MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_4,
		 MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_5,
		 MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_6;
  wire [128 : 0] MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_1,
		 MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_2,
		 MUX_ctop_inf_dp0_wmi_mesgMeta$write_1__VAL_2,
		 MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_1,
		 MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_2,
		 MUX_ctop_inf_dp1_wmi_mesgMeta$write_1__VAL_2;
  wire [81 : 0] MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1,
		MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__VAL_1;
  wire [80 : 0] MUX_fI2P$enq_1__VAL_1;
  wire [60 : 0] MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3,
		MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_ctop_app_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3;
  wire [51 : 0] MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2,
		MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_2;
  wire [37 : 0] MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2,
		MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW2_wmi_dhF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW2_wmi_dhF_x_wire$wset_1__VAL_2,
		MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2,
		MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW4_wmi_dhF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW4_wmi_dhF_x_wire$wset_1__VAL_2;
  wire [33 : 0] MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW2_wci_respF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_2,
		MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW3_wci_respF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_2,
		MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW4_wci_respF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_2,
		MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_1,
		MUX_ctop_inf_dp0_wci_respF_q_1$write_1__VAL_1,
		MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_1,
		MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_2,
		MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1,
		MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_1,
		MUX_ctop_inf_dp1_wci_respF_q_1$write_1__VAL_1,
		MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_1,
		MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_2,
		MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
  wire [31 : 0] MUX_ctop_app_appW2_mesgCount$write_1__VAL_1,
		MUX_ctop_app_appW2_thisMesg$write_1__VAL_1,
		MUX_ctop_app_appW2_thisMesg$write_1__VAL_2,
		MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3,
		MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2,
		MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3,
		MUX_ctop_app_appW3_mesgRdCount$write_1__VAL_1,
		MUX_ctop_app_appW3_mesgWtCount$write_1__VAL_1,
		MUX_ctop_app_appW4_mesgCount$write_1__VAL_1,
		MUX_ctop_app_appW4_thisMesg$write_1__VAL_1,
		MUX_ctop_app_appW4_thisMesg$write_1__VAL_2,
		MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3,
		MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_1,
		MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__VAL_1,
		MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2,
		MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3,
		MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_1,
		MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_3,
		MUX_ctop_inf_dp0_bml_fabMesgAddr$write_1__VAL_1,
		MUX_ctop_inf_dp0_bml_fabMetaAddr$write_1__VAL_1,
		MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1,
		MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_3,
		MUX_ctop_inf_dp0_bram_memory_1$a_put_3__VAL_3,
		MUX_ctop_inf_dp0_bram_memory_2$a_put_3__VAL_3,
		MUX_ctop_inf_dp0_bram_memory_3$a_put_3__VAL_3,
		MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_ctop_inf_dp0_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_ctop_inf_dp0_wmi_mesgCount$write_1__VAL_1,
		MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_1,
		MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_3,
		MUX_ctop_inf_dp1_bml_fabMesgAddr$write_1__VAL_1,
		MUX_ctop_inf_dp1_bml_fabMetaAddr$write_1__VAL_1,
		MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1,
		MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_3,
		MUX_ctop_inf_dp1_bram_memory_1$a_put_3__VAL_3,
		MUX_ctop_inf_dp1_bram_memory_2$a_put_3__VAL_3,
		MUX_ctop_inf_dp1_bram_memory_3$a_put_3__VAL_3,
		MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_ctop_inf_dp1_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_ctop_inf_dp1_wmi_mesgCount$write_1__VAL_1;
  wire [24 : 0] MUX_ctop_app_appW3_dlyWordsStored_value$write_1__VAL_2;
  wire [22 : 0] MUX_ctop_app_appW3_dlyRAG$write_1__VAL_1,
		MUX_ctop_app_appW3_dlyWAG$write_1__VAL_1;
  wire [16 : 0] MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_ctop_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_ctop_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_ctop_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_ctop_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_ctop_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_ctop_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2;
  wire [15 : 0] MUX_ctop_app_appW2_unrollCnt$write_1__VAL_1,
		MUX_ctop_app_appW2_unrollCnt$write_1__VAL_2,
		MUX_ctop_app_appW3_dlyReadyToWrite_value$write_1__VAL_2,
		MUX_ctop_app_appW3_rdSerUnroll$write_1__VAL_2,
		MUX_ctop_app_appW3_unrollCnt$write_1__VAL_1,
		MUX_ctop_app_appW3_unrollCnt$write_1__VAL_2,
		MUX_ctop_app_appW3_wrtSerUnroll$write_1__VAL_2,
		MUX_ctop_app_appW4_unrollCnt$write_1__VAL_1,
		MUX_ctop_app_appW4_unrollCnt$write_1__VAL_2,
		MUX_ctop_inf_dp0_bml_crdBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp0_bml_fabBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__VAL_1,
		MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__VAL_2,
		MUX_ctop_inf_dp0_bml_lclBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__VAL_1,
		MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__VAL_2,
		MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__VAL_1,
		MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__VAL_2,
		MUX_ctop_inf_dp0_bml_lclCredit$write_1__VAL_1,
		MUX_ctop_inf_dp0_bml_lclMesgAddr$write_1__VAL_2,
		MUX_ctop_inf_dp0_bml_lclMetaAddr$write_1__VAL_2,
		MUX_ctop_inf_dp0_bml_remBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp0_bml_remMesgAddr$write_1__VAL_2,
		MUX_ctop_inf_dp0_bml_remMetaAddr$write_1__VAL_2,
		MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_2,
		MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_3,
		MUX_ctop_inf_dp1_bml_crdBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp1_bml_fabBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__VAL_1,
		MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__VAL_2,
		MUX_ctop_inf_dp1_bml_lclBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__VAL_1,
		MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__VAL_2,
		MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__VAL_1,
		MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__VAL_2,
		MUX_ctop_inf_dp1_bml_lclCredit$write_1__VAL_1,
		MUX_ctop_inf_dp1_bml_lclMesgAddr$write_1__VAL_2,
		MUX_ctop_inf_dp1_bml_lclMetaAddr$write_1__VAL_2,
		MUX_ctop_inf_dp1_bml_remBuf_value$write_1__VAL_3,
		MUX_ctop_inf_dp1_bml_remMesgAddr$write_1__VAL_2,
		MUX_ctop_inf_dp1_bml_remMetaAddr$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_3;
  wire [14 : 0] MUX_ctop_app_appW2_mesgLength$write_1__VAL_3,
		MUX_ctop_app_appW2_mesgLength$write_1__VAL_4,
		MUX_ctop_app_appW4_mesgLength$write_1__VAL_3,
		MUX_ctop_app_appW4_mesgLength$write_1__VAL_4;
  wire [13 : 0] MUX_ctop_app_appW2_fabWordsRemain$write_1__VAL_1,
		MUX_ctop_app_appW2_fabWordsRemain$write_1__VAL_2,
		MUX_ctop_app_appW2_mesgReqAddr$write_1__VAL_2,
		MUX_ctop_app_appW4_fabWordsRemain$write_1__VAL_1,
		MUX_ctop_app_appW4_fabWordsRemain$write_1__VAL_2,
		MUX_ctop_app_appW4_mesgReqAddr$write_1__VAL_2,
		MUX_ctop_inf_dp0_wmi_addr$write_1__VAL_2,
		MUX_ctop_inf_dp0_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_ctop_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_ctop_inf_dp0_wmi_bytesRemainResp$write_1__VAL_2,
		MUX_ctop_inf_dp1_wmi_addr$write_1__VAL_1,
		MUX_ctop_inf_dp1_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_ctop_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_ctop_inf_dp1_wmi_bytesRemainResp$write_1__VAL_2;
  wire [12 : 0] MUX_ctop_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_ctop_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_ctop_inf_dp0_tlp_writeDWAddr$write_1__VAL_1,
		MUX_ctop_inf_dp0_tlp_writeDWAddr$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_ctop_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_ctop_inf_dp1_tlp_writeDWAddr$write_1__VAL_1,
		MUX_ctop_inf_dp1_tlp_writeDWAddr$write_1__VAL_2;
  wire [11 : 0] MUX_ctop_app_appW2_fabRespCredit_value$write_1__VAL_2,
		MUX_ctop_app_appW2_wsiWordsRemain$write_1__VAL_2,
		MUX_ctop_app_appW4_fabRespCredit_value$write_1__VAL_2,
		MUX_ctop_app_appW4_wsiWordsRemain$write_1__VAL_2;
  wire [10 : 0] MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1,
		MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
  wire [9 : 0] MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_ctop_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_ctop_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__VAL_1,
	       MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__VAL_2,
	       MUX_ctop_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_ctop_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_ctop_inf_dp0_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_ctop_inf_dp0_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_ctop_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_ctop_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_2,
	       MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_ctop_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_ctop_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__VAL_1,
	       MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__VAL_2,
	       MUX_ctop_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_ctop_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_ctop_inf_dp1_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_ctop_inf_dp1_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_ctop_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_ctop_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_2;
  wire [8 : 0] MUX_ctop_app_appW2_opcode$write_1__VAL_3,
	       MUX_ctop_app_appW4_opcode$write_1__VAL_3;
  wire [7 : 0] MUX_ctop_app_appW3_dlyReadCredit_value$write_1__VAL_2;
  wire [3 : 0] MUX_ctop_inf_dp0_tlp_postSeqDwell$write_1__VAL_1,
	       MUX_ctop_inf_dp1_tlp_postSeqDwell$write_1__VAL_1;
  wire [1 : 0] MUX_ctop_app_appW2_wci_respF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW2_wci_respF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW2_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW2_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW2_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW2_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW2_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW2_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW3_rdSerPos$write_1__VAL_1,
	       MUX_ctop_app_appW3_wci_respF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW3_wci_respF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW3_wmemi_dhF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW3_wmemi_dhF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW3_wmemi_reqF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW3_wmemi_reqF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW3_wrtSerPos$write_1__VAL_1,
	       MUX_ctop_app_appW3_wrtSerPos$write_1__VAL_2,
	       MUX_ctop_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW4_wci_respF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW4_wci_respF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW4_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW4_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW4_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW4_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW4_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW4_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_ctop_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_ctop_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_ctop_inf_dp0_wci_respF_c_r$write_1__VAL_1,
	       MUX_ctop_inf_dp0_wci_respF_c_r$write_1__VAL_2,
	       MUX_ctop_inf_dp0_wmi_bufDwell$write_1__VAL_3,
	       MUX_ctop_inf_dp0_wmi_p4B$write_1__VAL_2,
	       MUX_ctop_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_ctop_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_2,
	       MUX_ctop_inf_dp1_wci_respF_c_r$write_1__VAL_1,
	       MUX_ctop_inf_dp1_wci_respF_c_r$write_1__VAL_2,
	       MUX_ctop_inf_dp1_wmi_bufDwell$write_1__VAL_3,
	       MUX_ctop_inf_dp1_wmi_p4B$write_1__VAL_2,
	       MUX_ctop_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_ctop_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_2;
  wire MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1,
       MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__SEL_1,
       MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1,
       MUX_ctop_app_appW2_impreciseBurst$write_1__SEL_3,
       MUX_ctop_app_appW2_lastMesg$write_1__SEL_2,
       MUX_ctop_app_appW2_mesgCount$write_1__SEL_1,
       MUX_ctop_app_appW2_mesgLength$write_1__SEL_4,
       MUX_ctop_app_appW2_wci_illegalEdge$write_1__SEL_1,
       MUX_ctop_app_appW2_wci_illegalEdge$write_1__SEL_2,
       MUX_ctop_app_appW2_wci_illegalEdge$write_1__VAL_2,
       MUX_ctop_app_appW2_wci_respF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW2_wci_respF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1,
       MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2,
       MUX_ctop_app_appW3_mesgRdCount$write_1__SEL_1,
       MUX_ctop_app_appW3_mesgWtCount$write_1__SEL_1,
       MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1,
       MUX_ctop_app_appW3_rdSerEmpty$write_1__SEL_1,
       MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_1,
       MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_2,
       MUX_ctop_app_appW3_wci_illegalEdge$write_1__SEL_1,
       MUX_ctop_app_appW3_wci_illegalEdge$write_1__SEL_2,
       MUX_ctop_app_appW3_wci_illegalEdge$write_1__VAL_2,
       MUX_ctop_app_appW3_wci_respF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW3_wci_respF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW3_wide16Fa$enq_1__SEL_1,
       MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW3_wrtSerStage$write_1__SEL_1,
       MUX_ctop_app_appW3_wrtSerStage_1$write_1__SEL_1,
       MUX_ctop_app_appW3_wrtSerStage_2$write_1__SEL_1,
       MUX_ctop_app_appW3_wrtSerStage_3$write_1__SEL_1,
       MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4,
       MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1,
       MUX_ctop_app_appW4_impreciseBurst$write_1__SEL_3,
       MUX_ctop_app_appW4_lastMesg$write_1__SEL_2,
       MUX_ctop_app_appW4_mesgCount$write_1__SEL_1,
       MUX_ctop_app_appW4_mesgLength$write_1__SEL_4,
       MUX_ctop_app_appW4_wci_illegalEdge$write_1__SEL_1,
       MUX_ctop_app_appW4_wci_illegalEdge$write_1__SEL_2,
       MUX_ctop_app_appW4_wci_illegalEdge$write_1__VAL_2,
       MUX_ctop_app_appW4_wci_respF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW4_wci_respF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__SEL_2,
       MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__SEL_2,
       MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1,
       MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2,
       MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5,
       MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__SEL_1,
       MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1,
       MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__SEL_1,
       MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__SEL_1,
       MUX_ctop_inf_dp0_bml_lclCredit$write_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2,
       MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_3,
       MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_2,
       MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2,
       MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_3,
       MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_2,
       MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2,
       MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_3,
       MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_2,
       MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2,
       MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_3,
       MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1,
       MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_2,
       MUX_ctop_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_1,
       MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_6,
       MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__SEL_1,
       MUX_ctop_inf_dp0_tlp_outF$enq_1__SEL_8,
       MUX_ctop_inf_dp0_tlp_readHeaderSent$write_1__SEL_1,
       MUX_ctop_inf_dp0_tlp_readStarted$write_1__SEL_1,
       MUX_ctop_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3,
       MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4,
       MUX_ctop_inf_dp0_wci_illegalEdge$write_1__SEL_1,
       MUX_ctop_inf_dp0_wci_illegalEdge$write_1__SEL_2,
       MUX_ctop_inf_dp0_wci_illegalEdge$write_1__VAL_2,
       MUX_ctop_inf_dp0_wci_respF_q_0$write_1__SEL_2,
       MUX_ctop_inf_dp0_wci_respF_q_1$write_1__SEL_2,
       MUX_ctop_inf_dp0_wmi_bufDwell$write_1__SEL_1,
       MUX_ctop_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_ctop_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_ctop_inf_dp0_wmi_doneWithMesg$write_1__SEL_1,
       MUX_ctop_inf_dp0_wmi_mesgBusy$write_1__SEL_1,
       MUX_ctop_inf_dp0_wmi_rdActive$write_1__SEL_1,
       MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_ctop_inf_dp0_wmi_wrActive$write_1__SEL_1,
       MUX_ctop_inf_dp0_wmi_wrFinalize$write_1__SEL_1,
       MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__SEL_1,
       MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1,
       MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__SEL_1,
       MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__SEL_1,
       MUX_ctop_inf_dp1_bml_lclCredit$write_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2,
       MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_3,
       MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_2,
       MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2,
       MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_3,
       MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_2,
       MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2,
       MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_3,
       MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_2,
       MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2,
       MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_3,
       MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1,
       MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_2,
       MUX_ctop_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_1,
       MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_6,
       MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__SEL_1,
       MUX_ctop_inf_dp1_tlp_outF$enq_1__SEL_8,
       MUX_ctop_inf_dp1_tlp_readHeaderSent$write_1__SEL_1,
       MUX_ctop_inf_dp1_tlp_readStarted$write_1__SEL_1,
       MUX_ctop_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3,
       MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4,
       MUX_ctop_inf_dp1_wci_illegalEdge$write_1__SEL_1,
       MUX_ctop_inf_dp1_wci_illegalEdge$write_1__SEL_2,
       MUX_ctop_inf_dp1_wci_illegalEdge$write_1__VAL_2,
       MUX_ctop_inf_dp1_wci_respF_q_0$write_1__SEL_2,
       MUX_ctop_inf_dp1_wci_respF_q_1$write_1__SEL_2,
       MUX_ctop_inf_dp1_wmi_bufDwell$write_1__SEL_1,
       MUX_ctop_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__SEL_1,
       MUX_ctop_inf_dp1_wmi_mesgBusy$write_1__SEL_1,
       MUX_ctop_inf_dp1_wmi_rdActive$write_1__SEL_1,
       MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_ctop_inf_dp1_wmi_wrActive$write_1__SEL_1,
       MUX_ctop_inf_dp1_wmi_wrFinalize$write_1__SEL_1,
       MUX_p2iS$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h100914,
	       v__h101096,
	       v__h101251,
	       v__h105184,
	       v__h106193,
	       v__h110287,
	       v__h110633,
	       v__h111200,
	       v__h111551,
	       v__h112614,
	       v__h115348,
	       v__h116382,
	       v__h117429,
	       v__h117763,
	       v__h119011,
	       v__h123115,
	       v__h123542,
	       v__h124160,
	       v__h124477,
	       v__h125531,
	       v__h154850,
	       v__h162245,
	       v__h162619,
	       v__h162781,
	       v__h166975,
	       v__h171065,
	       v__h171247,
	       v__h171402,
	       v__h185087,
	       v__h186504,
	       v__h186581,
	       v__h188301,
	       v__h188562,
	       v__h189344,
	       v__h194285,
	       v__h194467,
	       v__h194622,
	       v__h213523,
	       v__h21827,
	       v__h218484,
	       v__h218666,
	       v__h218821,
	       v__h22012,
	       v__h22167,
	       v__h232499,
	       v__h233916,
	       v__h233993,
	       v__h235713,
	       v__h235974,
	       v__h236756,
	       v__h26112,
	       v__h27124,
	       v__h31218,
	       v__h31564,
	       v__h32131,
	       v__h32482,
	       v__h33545,
	       v__h36279,
	       v__h37313,
	       v__h38360,
	       v__h38699,
	       v__h39950,
	       v__h44054,
	       v__h44481,
	       v__h45099,
	       v__h45416,
	       v__h46470,
	       v__h75789,
	       v__h83187,
	       v__h83561,
	       v__h83723;
  reg [31 : 0] IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681,
	       IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686,
	       IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682,
	       IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687,
	       IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683,
	       IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688,
	       IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684,
	       IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689,
	       IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685,
	       IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535,
	       _theResult____h162765,
	       _theResult____h83707,
	       rdata__h155967,
	       rdata__h76906,
	       v__h210525,
	       value__h173593,
	       value__h221012,
	       x_data__h188904,
	       x_data__h212880,
	       x_data__h236316;
  reg [15 : 0] CASE_ctop_inf_dp0_tlp_outDwRemain_BITS_1_TO_0__ETC__q5,
	       CASE_ctop_inf_dp1_tlp_outDwRemain_BITS_1_TO_0__ETC__q6;
  reg [1 : 0] lowAddr10__h138044,
	      lowAddr10__h58983,
	      x__h138166,
	      x__h138189,
	      x__h59105,
	      x__h59128;
  reg CASE_ctop_app_appW3_wrtSerPos_0b1_0_1_1_1_2_1__ETC__q2,
      CASE_ctop_app_appW3_wrtSerPos_NOT_ctop_app_app_ETC__q1,
      CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q11,
      CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q13,
      CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_ctop_i_ETC__q3,
      CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q8,
      CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q7,
      CASE_ctop_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_ETC__q29,
      CASE_ctop_inf_dp0_wmi_p4B_NOT_ctop_inf_dp0_wmi_ETC__q30,
      CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q12,
      CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q21,
      CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_ctop_i_ETC__q4,
      CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q10,
      CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q9,
      CASE_ctop_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_ETC__q31,
      CASE_ctop_inf_dp1_wmi_p4B_NOT_ctop_inf_dp1_wmi_ETC__q32,
      IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1229,
      IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7429,
      IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3415,
      IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7457,
      IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1239,
      IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7430,
      IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3425,
      IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7458,
      IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1249,
      IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7474,
      IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3435,
      IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7459,
      IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1259,
      IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7431,
      IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3445,
      IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7460,
      IF_ctop_inf_dp0_bml_dpControl_wget__992_BITS_1_ETC___d2069,
      IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1461,
      IF_ctop_inf_dp0_wmi_addr_824_BITS_3_TO_2_825_E_ETC___d7577,
      IF_ctop_inf_dp0_wmi_p4B_878_EQ_1_881_THEN_ctop_ETC___d1887,
      IF_ctop_inf_dp1_bml_dpControl_wget__178_BITS_1_ETC___d4255,
      IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3647,
      IF_ctop_inf_dp1_wmi_addr_010_BITS_3_TO_2_011_E_ETC___d7567,
      IF_ctop_inf_dp1_wmi_p4B_064_EQ_1_067_THEN_ctop_ETC___d4073;
  wire [127 : 0] IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5835,
		 IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5864,
		 IF_ctop_inf_dp0_tlp_readNxtDWAddr_398_BIT_0_57_ETC___d1580,
		 IF_ctop_inf_dp0_tlp_readNxtDWAddr_398_BIT_0_57_ETC___d1585,
		 IF_ctop_inf_dp1_tlp_readNxtDWAddr_584_BIT_0_76_ETC___d3766,
		 IF_ctop_inf_dp1_tlp_readNxtDWAddr_584_BIT_0_76_ETC___d3771,
		 pkt__h126526,
		 pkt__h47465,
		 rdata__h143414,
		 rdata__h64353,
		 val_data__h245240,
		 wOut_data__h245346,
		 w_data__h110742,
		 w_data__h111720,
		 w_data__h112782,
		 w_data__h115502,
		 w_data__h117686,
		 w_data__h123449,
		 w_data__h31673,
		 w_data__h32651,
		 w_data__h33713,
		 w_data__h36433,
		 w_data__h38617,
		 w_data__h44388,
		 x__h208786,
		 x__h208813,
		 x__h209436,
		 x__h209460;
  wire [55 : 0] IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7405,
		IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7408;
  wire [35 : 0] addr__h209860, addr__h210210;
  wire [31 : 0] ctop_inf_dp0_bml_fabFlowAddr_031_PLUS_ctop_inf_ETC___d8255,
		ctop_inf_dp1_bml_fabFlowAddr_217_PLUS_ctop_inf_ETC___d8256,
		data__h209151,
		delayStatus__h212490,
		mesgMeta_opcode__h154247,
		mesgMeta_opcode__h75186,
		nowLS__h107124,
		nowLS__h119958,
		nowLS__h28055,
		nowLS__h40897,
		nowMS__h107123,
		nowMS__h119957,
		nowMS__h28054,
		nowMS__h40896,
		opcode__h107122,
		opcode__h119956,
		opcode__h28053,
		opcode__h40895,
		rdat__h162844,
		rdat__h162852,
		rdat__h162860,
		rdat__h162868,
		rdat__h162876,
		rdat__h162884,
		rdat__h162892,
		rdat__h162913,
		rdat__h162918,
		rdat__h162929,
		rdat__h162934,
		rdat__h162995,
		rdat__h188997,
		rdat__h212928,
		rdat__h213114,
		rdat__h213123,
		rdat__h213132,
		rdat__h213141,
		rdat__h213214,
		rdat__h213223,
		rdat__h213232,
		rdat__h213241,
		rdat__h236409,
		rdat__h83786,
		rdat__h83794,
		rdat__h83802,
		rdat__h83810,
		rdat__h83818,
		rdat__h83826,
		rdat__h83834,
		rdat__h83855,
		rdat__h83860,
		rdat__h83871,
		rdat__h83876,
		rdat__h83937,
		rresp_data__h138088,
		rresp_data__h59027,
		x3__h154207,
		x3__h75146,
		x__h107185,
		x__h119988,
		x__h205550,
		x__h28116,
		x__h40927,
		y__h110472,
		y__h110889,
		y__h123264,
		y__h31403,
		y__h31820,
		y__h44203,
		y_avValue__h155803,
		y_avValue__h155823,
		y_avValue__h155843,
		y_avValue__h155863,
		y_avValue__h76742,
		y_avValue__h76762,
		y_avValue__h76782,
		y_avValue__h76802;
  wire [26 : 0] x__h209918, x__h210255;
  wire [23 : 0] btm__h208039,
		mesgMetaF_length__h186882,
		mesgMetaF_length__h187618,
		mesgMetaF_length__h234294,
		mesgMetaF_length__h235030,
		x__h212931;
  wire [16 : 0] x__h110391,
		x__h123201,
		x__h31322,
		x__h44140,
		y__h110378,
		y__h110393,
		y__h123193,
		y__h123203,
		y__h124453,
		y__h31309,
		y__h31324,
		y__h44132,
		y__h44142,
		y__h45392;
  wire [15 : 0] val_be__h245239,
		wOut_be__h245345,
		w_be__h111294,
		w_be__h32225,
		wsiBurstLength__h185549,
		wsiBurstLength__h232961,
		x__h159988,
		x__h161112,
		x__h161117,
		x__h161189,
		x__h161194,
		x__h161231,
		x__h161236,
		x__h161269,
		x__h161274,
		x__h189000,
		x__h236412,
		x__h80930,
		x__h82054,
		x__h82059,
		x__h82131,
		x__h82136,
		x__h82173,
		x__h82178,
		x__h82211,
		x__h82216,
		x_length__h186637,
		x_length__h234049,
		y__h110520,
		y__h123775,
		y__h31451,
		y__h44714;
  wire [13 : 0] addr__h187488,
		addr__h234900,
		b__h185171,
		b__h232583,
		ctop_app_appW3_mesgLengthSoFar_780_PLUS_1___d8258,
		mlp1B__h187472,
		mlp1B__h234884,
		mlp1__h187471,
		mlp1__h234883,
		x__h186655,
		x__h234067;
  wire [12 : 0] ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18,
		ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19,
		ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17,
		ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15,
		ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16,
		ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14,
		ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26,
		ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27,
		ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25,
		ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23,
		ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24,
		ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22,
		spanToNextPage__h110337,
		spanToNextPage__h123167,
		spanToNextPage__h31268,
		spanToNextPage__h44106,
		thisRequestLength__h110338,
		thisRequestLength__h123168,
		thisRequestLength__h31269,
		thisRequestLength__h44107,
		x__h205651;
  wire [11 : 0] b__h181983,
		b__h229395,
		bl__h186744,
		bl__h234156,
		byteCount__h138046,
		byteCount__h58985,
		sendData_burstLength__h185631,
		sendData_burstLength__h233043,
		x__h138157,
		x__h138159,
		x__h183337,
		x__h230749,
		x__h59096,
		x__h59098,
		x_burstLength__h212397,
		y__h138158,
		y__h138160,
		y__h59097,
		y__h59099;
  wire [9 : 0] x__h110892,
	       x__h123778,
	       x__h124456,
	       x__h31823,
	       x__h44717,
	       x__h45395;
  wire [7 : 0] rreq_tag__h110567,
	       rreq_tag__h31498,
	       tag__h123443,
	       tag__h44382,
	       tagm__h123569,
	       tagm__h44508,
	       x__h186641,
	       x__h234053;
  wire [6 : 0] lowAddr__h138045, lowAddr__h58984;
  wire [3 : 0] lastBE__h110766,
	       lastBE__h123470,
	       lastBE__h31697,
	       lastBE__h44409,
	       sendData_byteEn__h185633,
	       sendData_byteEn__h233045,
	       x_byteEn__h212398;
  wire [2 : 0] IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7402,
	       IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7406,
	       ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_PLUS_ETC___d221,
	       ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_PLUS_ETC___d339,
	       ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_PLUS_ETC___d457,
	       ctop_inf_dp0_bram_serverAdapterA_cnt_7_PLUS_IF_ETC___d103,
	       ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_PLUS_ETC___d280,
	       ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_PLUS_ETC___d398,
	       ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_PLUS_ETC___d516,
	       ctop_inf_dp0_bram_serverAdapterB_cnt_56_PLUS_I_ETC___d162,
	       ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_PLU_ETC___d2414,
	       ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_PLU_ETC___d2532,
	       ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_PLU_ETC___d2650,
	       ctop_inf_dp1_bram_serverAdapterA_cnt_290_PLUS__ETC___d2296,
	       ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_PLU_ETC___d2473,
	       ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_PLU_ETC___d2591,
	       ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_PLU_ETC___d2709,
	       ctop_inf_dp1_bram_serverAdapterB_cnt_349_PLUS__ETC___d2355;
  wire [1 : 0] ab__h10876,
	       ab__h12273,
	       ab__h13803,
	       ab__h15200,
	       ab__h16730,
	       ab__h18127,
	       ab__h7947,
	       ab__h87043,
	       ab__h88442,
	       ab__h89972,
	       ab__h91369,
	       ab__h92899,
	       ab__h9346,
	       ab__h94296,
	       ab__h95826,
	       ab__h97223,
	       ctop_app_appW3_wrtSerPos_797_PLUS_1___d8257,
	       idx__h128867,
	       idx__h131090,
	       idx__h132386,
	       idx__h133682,
	       idx__h135930,
	       idx__h136398,
	       idx__h136771,
	       idx__h137144,
	       idx__h49806,
	       idx__h52029,
	       idx__h53325,
	       idx__h54621,
	       idx__h56869,
	       idx__h57337,
	       idx__h57710,
	       idx__h58083;
  wire IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1262,
       IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3448,
       IF_ctop_app_appW3_wrtSerPos_797_EQ_0_805_OR_ct_ETC___d5850,
       IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1469,
       IF_ctop_inf_dp0_wmi_p4B_878_EQ_0_879_THEN_ctop_ETC___d1892,
       IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3655,
       IF_ctop_inf_dp1_wmi_p4B_064_EQ_0_065_THEN_ctop_ETC___d4078,
       NOT_ctop_app_appW2_wmi_reqF_c_r_685_EQ_2_704_7_ETC___d5056,
       NOT_ctop_app_appW3_mesgWF_rRdPtr_711_EQ_ctop_a_ETC___d5839,
       NOT_ctop_app_appW3_mesgWF_rRdPtr_711_PLUS_2048_ETC___d5769,
       NOT_ctop_app_appW3_wrtSerPos_797_EQ_3_798_799__ETC___d5813,
       NOT_ctop_app_appW4_wmi_reqF_c_r_321_EQ_2_339_3_ETC___d6688,
       NOT_ctop_inf_dp0_bml_lclBufDone_016_083_AND_IF_ETC___d2096,
       NOT_ctop_inf_dp0_tlp_mReqF_first__180_BITS_28__ETC___d1371,
       NOT_ctop_inf_dp0_wmi_wrActive_796_797_OR_NOT_c_ETC___d1806,
       NOT_ctop_inf_dp1_bml_lclBufDone_202_269_AND_IF_ETC___d4282,
       NOT_ctop_inf_dp1_tlp_mReqF_first__366_BITS_28__ETC___d3557,
       NOT_ctop_inf_dp1_wmi_wrActive_982_983_OR_NOT_c_ETC___d3992,
       _dfoo15,
       _dfoo5,
       ctop_app_appW2_wmi_operateD_771_AND_ctop_app_a_ETC___d5151,
       ctop_app_appW2_wmi_respF_i_notEmpty__068_AND_c_ETC___d5073,
       ctop_app_appW2_wsiS_reqFifo_i_notEmpty__003_AN_ETC___d5170,
       ctop_app_appW3_bytesWritten_793_ULT_ctop_app_a_ETC___d7367,
       ctop_app_appW3_cyclesPassed_763_ULT_ctop_app_a_ETC___d7389,
       ctop_app_appW3_dlyWordsStored_value_724_SLE_0__ETC___d5879,
       ctop_app_appW3_dlyWordsStored_value_724_SLE_0___d7366,
       ctop_app_appW3_dlyWordsStored_value_724_SLT_83_ETC___d5881,
       ctop_app_appW3_mesgRF_i_notFull__978_AND_NOT_c_ETC___d5979,
       ctop_app_appW3_metaRF_i_notFull__927_AND_NOT_c_ETC___d5938,
       ctop_app_appW3_wci_cState_382_EQ_2_393_AND_cto_ETC___d5899,
       ctop_app_appW3_wsiS_reqFifo_notFull__486_AND_c_ETC___d5508,
       ctop_app_appW4_wmi_operateD_405_AND_ctop_app_a_ETC___d6783,
       ctop_app_appW4_wmi_respF_i_notEmpty__700_AND_c_ETC___d6705,
       ctop_app_appW4_wsiS_reqFifo_i_notEmpty__635_AN_ETC___d6802,
       ctop_app_appW4_wsiS_reqFifo_notFull__537_AND_c_ETC___d6559,
       ctop_inf_dp0_bml_crdBuf_value_974_EQ_ctop_inf__ETC___d8451,
       ctop_inf_dp0_bml_fabBuf_value_959_EQ_ctop_inf__ETC___d7529,
       ctop_inf_dp0_bml_lclBufDone_016_AND_IF_ctop_in_ETC___d7433,
       ctop_inf_dp0_bml_lclBuf_value_929_EQ_ctop_inf__ETC___d8466,
       ctop_inf_dp0_bml_remBuf_value_944_EQ_ctop_inf__ETC___d7522,
       ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263,
       ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264,
       ctop_inf_dp0_bram_serverAdapterA_2_outDataCore_ETC___d1540,
       ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265,
       ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262,
       ctop_inf_dp0_bram_serverAdapterA_outDataCore_n_ETC___d1542,
       ctop_inf_dp0_bram_serverAdapterA_outData_outDa_ETC___d1538,
       ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_SLT_3___d1737,
       ctop_inf_dp0_bram_serverAdapterB_1_outData_out_ETC___d1765,
       ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_SLT_3___d1738,
       ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_SLT_3___d1739,
       ctop_inf_dp0_bram_serverAdapterB_cnt_56_SLT_3___d1736,
       ctop_inf_dp0_tlp_dmaPullRemainDWLen_073_ULE_ct_ETC___d8259,
       ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370,
       ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d1112,
       ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d725,
       ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d949,
       ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d982,
       ctop_inf_dp0_tlp_inF_first__68_BITS_63_TO_56_7_ETC___d980,
       ctop_inf_dp0_tlp_inF_first__68_BIT_152_115_AND_ETC___d1140,
       ctop_inf_dp0_tlp_mReqF_RDY_deq__179_AND_IF_cto_ETC___d1195,
       ctop_inf_dp0_tlp_mRespF_first__35_BITS_71_TO_6_ETC___d7384,
       ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830,
       ctop_inf_dp0_tlp_rdRespDwRemain_530_ULE_4___d1531,
       ctop_inf_dp0_tlp_readRemainDWLen_386_ULE_4___d1387,
       ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401,
       ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386,
       ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338,
       ctop_inf_dp0_wmi_dpControl_whas__723_AND_ctop__ETC___d1769,
       ctop_inf_dp1_bml_crdBuf_value_160_EQ_ctop_inf__ETC___d8507,
       ctop_inf_dp1_bml_fabBuf_value_145_EQ_ctop_inf__ETC___d7530,
       ctop_inf_dp1_bml_lclBufDone_202_AND_IF_ctop_in_ETC___d7462,
       ctop_inf_dp1_bml_lclBuf_value_115_EQ_ctop_inf__ETC___d8518,
       ctop_inf_dp1_bml_remBuf_value_130_EQ_ctop_inf__ETC___d8519,
       ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267,
       ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534,
       ctop_inf_dp1_bram_serverAdapterA_2_outDataCore_ETC___d3726,
       ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268,
       ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266,
       ctop_inf_dp1_bram_serverAdapterA_outDataCore_n_ETC___d3728,
       ctop_inf_dp1_bram_serverAdapterA_outData_outDa_ETC___d3724,
       ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_SLT_3___d3923,
       ctop_inf_dp1_bram_serverAdapterB_1_outData_out_ETC___d3951,
       ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_SLT_3___d3924,
       ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_SLT_3___d3925,
       ctop_inf_dp1_bram_serverAdapterB_cnt_349_SLT_3___d3922,
       ctop_inf_dp1_tlp_dmaPullRemainDWLen_259_ULE_ct_ETC___d8260,
       ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261,
       ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d2917,
       ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3137,
       ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3168,
       ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3298,
       ctop_inf_dp1_tlp_inF_first__156_BITS_63_TO_56__ETC___d3166,
       ctop_inf_dp1_tlp_inF_first__156_BIT_152_301_AN_ETC___d3326,
       ctop_inf_dp1_tlp_mReqF_RDY_deq__365_AND_IF_cto_ETC___d3381,
       ctop_inf_dp1_tlp_mRespF_first__926_BITS_71_TO__ETC___d7397,
       ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372,
       ctop_inf_dp1_tlp_rdRespDwRemain_716_ULE_4___d3717,
       ctop_inf_dp1_tlp_readRemainDWLen_572_ULE_4___d3573,
       ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339,
       ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387,
       ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399,
       ctop_inf_dp1_wmi_dpControl_whas__909_AND_ctop__ETC___d3955,
       p2iAF_head_wrapped_crossed__8_EQ_p2iAF_tail_wr_ETC___d7152,
       x__h185342,
       x__h232754;

  // oscillator and gates for output clock trn2Clk
  assign trn2Clk = pci0_pcie_ep$trn2_clk ;
  assign CLK_GATE_trn2Clk = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_clk
  assign gmii_tx_clk = gbe0$CLK_gmii_tx_clk ;
  assign CLK_GATE_gmii_tx_clk = 1'b1 ;

  // oscillator and gates for output clock rxclk
  assign rxclk = gbe0$CLK_rxclk ;
  assign CLK_GATE_rxclk = 1'b1 ;

  // output resets
  assign pci0_reset_n_mrst_n = gbe0$RST_N_mrst_n ;

  // action method pcie_rxp
  assign CAN_FIRE_pcie_rxp = 1'd1 ;
  assign WILL_FIRE_pcie_rxp = 1'd1 ;

  // action method pcie_rxn
  assign CAN_FIRE_pcie_rxn = 1'd1 ;
  assign WILL_FIRE_pcie_rxn = 1'd1 ;

  // value method pcie_txp
  assign pcie_txp = pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pci0_pcie_ep$pci_exp_txn ;

  // value method led
  assign led = { 10'b1010000000, infLed$WGET, !pci0_pcie_ep$trn_lnk_up_n } ;

  // action method gps_ppsSyncIn
  assign CAN_FIRE_gps_ppsSyncIn = 1'd1 ;
  assign WILL_FIRE_gps_ppsSyncIn = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = ctop_inf_cp$gps_ppsSyncOut ;

  // value method dram_addr
  assign dram_addr = dram0$dram_addr ;

  // value method dram_ba
  assign dram_ba = dram0$dram_ba ;

  // value method dram_ras_n
  assign dram_ras_n = dram0$dram_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = dram0$dram_cas_n ;

  // value method dram_we_n
  assign dram_we_n = dram0$dram_we_n ;

  // value method dram_reset_n
  assign dram_reset_n = dram0$dram_reset_n ;

  // value method dram_cs_n
  assign dram_cs_n = dram0$dram_cs_n ;

  // value method dram_odt
  assign dram_odt = dram0$dram_odt ;

  // value method dram_cke
  assign dram_cke = dram0$dram_cke ;

  // value method dram_dm
  assign dram_dm = dram0$dram_dm ;

  // value method dram_ck_p
  assign dram_ck_p = dram0$dram_ck_p ;

  // value method dram_ck_n
  assign dram_ck_n = dram0$dram_ck_n ;

  // value method flash_addr
  assign flash_addr = flash0$flash_addr ;

  // value method flash_ce_n
  assign flash_ce_n = flash0$flash_ce_n ;

  // value method flash_oe_n
  assign flash_oe_n = flash0$flash_oe_n ;

  // value method flash_we_n
  assign flash_we_n = flash0$flash_we_n ;

  // value method flash_wp_n
  assign flash_wp_n = flash0$flash_wp_n ;

  // value method flash_rst_n
  assign flash_rst_n = flash0$flash_rst_n ;

  // value method flash_adv_n
  assign flash_adv_n = flash0$flash_adv_n ;

  // action method flash_fwait
  assign CAN_FIRE_flash_fwait = 1'd1 ;
  assign WILL_FIRE_flash_fwait = 1'd1 ;

  // value method gmii_txd
  assign gmii_txd = gbe0$gmii_txd ;

  // value method gmii_tx_en
  assign gmii_tx_en = gbe0$gmii_tx_en ;

  // value method gmii_tx_er
  assign gmii_tx_er = gbe0$gmii_tx_er ;

  // action method gmii_rxd
  assign CAN_FIRE_gmii_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rxd = 1'd1 ;

  // action method gmii_rx_dv
  assign CAN_FIRE_gmii_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_dv = 1'd1 ;

  // action method gmii_rx_er
  assign CAN_FIRE_gmii_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_er = 1'd1 ;

  // submodule ctop_app_appW2_respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) ctop_app_appW2_respF_memory(.CLKA(pci0_pcie_ep$trn2_clk),
							  .CLKB(pci0_pcie_ep$trn2_clk),
							  .ADDRA(ctop_app_appW2_respF_memory$ADDRA),
							  .ADDRB(ctop_app_appW2_respF_memory$ADDRB),
							  .DIA(ctop_app_appW2_respF_memory$DIA),
							  .DIB(ctop_app_appW2_respF_memory$DIB),
							  .WEA(ctop_app_appW2_respF_memory$WEA),
							  .WEB(ctop_app_appW2_respF_memory$WEB),
							  .ENA(ctop_app_appW2_respF_memory$ENA),
							  .ENB(ctop_app_appW2_respF_memory$ENB),
							  .DOA(),
							  .DOB(ctop_app_appW2_respF_memory$DOB));

  // submodule ctop_app_appW2_wci_isReset
  ResetToBool ctop_app_appW2_wci_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_2),
					 .VAL(ctop_app_appW2_wci_isReset$VAL));

  // submodule ctop_app_appW2_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_app_appW2_wci_reqF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_2),
						       .CLK(pci0_pcie_ep$trn2_clk),
						       .D_IN(ctop_app_appW2_wci_reqF$D_IN),
						       .ENQ(ctop_app_appW2_wci_reqF$ENQ),
						       .DEQ(ctop_app_appW2_wci_reqF$DEQ),
						       .CLR(ctop_app_appW2_wci_reqF$CLR),
						       .D_OUT(ctop_app_appW2_wci_reqF$D_OUT),
						       .FULL_N(),
						       .EMPTY_N(ctop_app_appW2_wci_reqF$EMPTY_N));

  // submodule ctop_app_appW2_wmi_isReset
  ResetToBool ctop_app_appW2_wmi_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_2),
					 .VAL(ctop_app_appW2_wmi_isReset$VAL));

  // submodule ctop_app_appW2_wmi_respF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) ctop_app_appW2_wmi_respF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_2),
						    .CLK(pci0_pcie_ep$trn2_clk),
						    .D_IN(ctop_app_appW2_wmi_respF$D_IN),
						    .ENQ(ctop_app_appW2_wmi_respF$ENQ),
						    .DEQ(ctop_app_appW2_wmi_respF$DEQ),
						    .CLR(ctop_app_appW2_wmi_respF$CLR),
						    .D_OUT(ctop_app_appW2_wmi_respF$D_OUT),
						    .FULL_N(ctop_app_appW2_wmi_respF$FULL_N),
						    .EMPTY_N(ctop_app_appW2_wmi_respF$EMPTY_N));

  // submodule ctop_app_appW2_wsiM_isReset
  ResetToBool ctop_app_appW2_wsiM_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_2),
					  .VAL(ctop_app_appW2_wsiM_isReset$VAL));

  // submodule ctop_app_appW2_wsiS_isReset
  ResetToBool ctop_app_appW2_wsiS_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_2),
					  .VAL(ctop_app_appW2_wsiS_isReset$VAL));

  // submodule ctop_app_appW2_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_app_appW2_wsiS_reqFifo(.RST_N(ctop_inf_cp$RST_N_wci_Vm_2),
							   .CLK(pci0_pcie_ep$trn2_clk),
							   .D_IN(ctop_app_appW2_wsiS_reqFifo$D_IN),
							   .ENQ(ctop_app_appW2_wsiS_reqFifo$ENQ),
							   .DEQ(ctop_app_appW2_wsiS_reqFifo$DEQ),
							   .CLR(ctop_app_appW2_wsiS_reqFifo$CLR),
							   .D_OUT(ctop_app_appW2_wsiS_reqFifo$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(ctop_app_appW2_wsiS_reqFifo$EMPTY_N));

  // submodule ctop_app_appW3_mesgRF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) ctop_app_appW3_mesgRF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						     .CLK(pci0_pcie_ep$trn2_clk),
						     .D_IN(ctop_app_appW3_mesgRF$D_IN),
						     .ENQ(ctop_app_appW3_mesgRF$ENQ),
						     .DEQ(ctop_app_appW3_mesgRF$DEQ),
						     .CLR(ctop_app_appW3_mesgRF$CLR),
						     .D_OUT(ctop_app_appW3_mesgRF$D_OUT),
						     .FULL_N(ctop_app_appW3_mesgRF$FULL_N),
						     .EMPTY_N(ctop_app_appW3_mesgRF$EMPTY_N));

  // submodule ctop_app_appW3_mesgWF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(13'd4096)) ctop_app_appW3_mesgWF_memory(.CLKA(pci0_pcie_ep$trn2_clk),
							   .CLKB(pci0_pcie_ep$trn2_clk),
							   .ADDRA(ctop_app_appW3_mesgWF_memory$ADDRA),
							   .ADDRB(ctop_app_appW3_mesgWF_memory$ADDRB),
							   .DIA(ctop_app_appW3_mesgWF_memory$DIA),
							   .DIB(ctop_app_appW3_mesgWF_memory$DIB),
							   .WEA(ctop_app_appW3_mesgWF_memory$WEA),
							   .WEB(ctop_app_appW3_mesgWF_memory$WEB),
							   .ENA(ctop_app_appW3_mesgWF_memory$ENA),
							   .ENB(ctop_app_appW3_mesgWF_memory$ENB),
							   .DOA(),
							   .DOB(ctop_app_appW3_mesgWF_memory$DOB));

  // submodule ctop_app_appW3_metaRF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) ctop_app_appW3_metaRF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						     .CLK(pci0_pcie_ep$trn2_clk),
						     .D_IN(ctop_app_appW3_metaRF$D_IN),
						     .ENQ(ctop_app_appW3_metaRF$ENQ),
						     .DEQ(ctop_app_appW3_metaRF$DEQ),
						     .CLR(ctop_app_appW3_metaRF$CLR),
						     .D_OUT(ctop_app_appW3_metaRF$D_OUT),
						     .FULL_N(ctop_app_appW3_metaRF$FULL_N),
						     .EMPTY_N(ctop_app_appW3_metaRF$EMPTY_N));

  // submodule ctop_app_appW3_metaWF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) ctop_app_appW3_metaWF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						     .CLK(pci0_pcie_ep$trn2_clk),
						     .D_IN(ctop_app_appW3_metaWF$D_IN),
						     .ENQ(ctop_app_appW3_metaWF$ENQ),
						     .DEQ(ctop_app_appW3_metaWF$DEQ),
						     .CLR(ctop_app_appW3_metaWF$CLR),
						     .D_OUT(ctop_app_appW3_metaWF$D_OUT),
						     .FULL_N(ctop_app_appW3_metaWF$FULL_N),
						     .EMPTY_N(ctop_app_appW3_metaWF$EMPTY_N));

  // submodule ctop_app_appW3_wci_isReset
  ResetToBool ctop_app_appW3_wci_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_3),
					 .VAL(ctop_app_appW3_wci_isReset$VAL));

  // submodule ctop_app_appW3_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_app_appW3_wci_reqF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						       .CLK(pci0_pcie_ep$trn2_clk),
						       .D_IN(ctop_app_appW3_wci_reqF$D_IN),
						       .ENQ(ctop_app_appW3_wci_reqF$ENQ),
						       .DEQ(ctop_app_appW3_wci_reqF$DEQ),
						       .CLR(ctop_app_appW3_wci_reqF$CLR),
						       .D_OUT(ctop_app_appW3_wci_reqF$D_OUT),
						       .FULL_N(),
						       .EMPTY_N(ctop_app_appW3_wci_reqF$EMPTY_N));

  // submodule ctop_app_appW3_wide16Fa
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) ctop_app_appW3_wide16Fa(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						       .CLK(pci0_pcie_ep$trn2_clk),
						       .D_IN(ctop_app_appW3_wide16Fa$D_IN),
						       .ENQ(ctop_app_appW3_wide16Fa$ENQ),
						       .DEQ(ctop_app_appW3_wide16Fa$DEQ),
						       .CLR(ctop_app_appW3_wide16Fa$CLR),
						       .D_OUT(ctop_app_appW3_wide16Fa$D_OUT),
						       .FULL_N(ctop_app_appW3_wide16Fa$FULL_N),
						       .EMPTY_N(ctop_app_appW3_wide16Fa$EMPTY_N));

  // submodule ctop_app_appW3_wide16Fb
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) ctop_app_appW3_wide16Fb(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						       .CLK(pci0_pcie_ep$trn2_clk),
						       .D_IN(ctop_app_appW3_wide16Fb$D_IN),
						       .ENQ(ctop_app_appW3_wide16Fb$ENQ),
						       .DEQ(ctop_app_appW3_wide16Fb$DEQ),
						       .CLR(ctop_app_appW3_wide16Fb$CLR),
						       .D_OUT(ctop_app_appW3_wide16Fb$D_OUT),
						       .FULL_N(ctop_app_appW3_wide16Fb$FULL_N),
						       .EMPTY_N(ctop_app_appW3_wide16Fb$EMPTY_N));

  // submodule ctop_app_appW3_wide16Fc
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) ctop_app_appW3_wide16Fc(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						       .CLK(pci0_pcie_ep$trn2_clk),
						       .D_IN(ctop_app_appW3_wide16Fc$D_IN),
						       .ENQ(ctop_app_appW3_wide16Fc$ENQ),
						       .DEQ(ctop_app_appW3_wide16Fc$DEQ),
						       .CLR(ctop_app_appW3_wide16Fc$CLR),
						       .D_OUT(ctop_app_appW3_wide16Fc$D_OUT),
						       .FULL_N(ctop_app_appW3_wide16Fc$FULL_N),
						       .EMPTY_N(ctop_app_appW3_wide16Fc$EMPTY_N));

  // submodule ctop_app_appW3_wmemi_isReset
  ResetToBool ctop_app_appW3_wmemi_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_3),
					   .VAL(ctop_app_appW3_wmemi_isReset$VAL));

  // submodule ctop_app_appW3_wmemi_respF
  FIFO2 #(.width(32'd131),
	  .guarded(32'd1)) ctop_app_appW3_wmemi_respF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
						      .CLK(pci0_pcie_ep$trn2_clk),
						      .D_IN(ctop_app_appW3_wmemi_respF$D_IN),
						      .ENQ(ctop_app_appW3_wmemi_respF$ENQ),
						      .DEQ(ctop_app_appW3_wmemi_respF$DEQ),
						      .CLR(ctop_app_appW3_wmemi_respF$CLR),
						      .D_OUT(ctop_app_appW3_wmemi_respF$D_OUT),
						      .FULL_N(ctop_app_appW3_wmemi_respF$FULL_N),
						      .EMPTY_N(ctop_app_appW3_wmemi_respF$EMPTY_N));

  // submodule ctop_app_appW3_wsiM_isReset
  ResetToBool ctop_app_appW3_wsiM_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_3),
					  .VAL(ctop_app_appW3_wsiM_isReset$VAL));

  // submodule ctop_app_appW3_wsiS_isReset
  ResetToBool ctop_app_appW3_wsiS_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_3),
					  .VAL(ctop_app_appW3_wsiS_isReset$VAL));

  // submodule ctop_app_appW3_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_app_appW3_wsiS_reqFifo(.RST_N(ctop_inf_cp$RST_N_wci_Vm_3),
							   .CLK(pci0_pcie_ep$trn2_clk),
							   .D_IN(ctop_app_appW3_wsiS_reqFifo$D_IN),
							   .ENQ(ctop_app_appW3_wsiS_reqFifo$ENQ),
							   .DEQ(ctop_app_appW3_wsiS_reqFifo$DEQ),
							   .CLR(ctop_app_appW3_wsiS_reqFifo$CLR),
							   .D_OUT(ctop_app_appW3_wsiS_reqFifo$D_OUT),
							   .FULL_N(ctop_app_appW3_wsiS_reqFifo$FULL_N),
							   .EMPTY_N(ctop_app_appW3_wsiS_reqFifo$EMPTY_N));

  // submodule ctop_app_appW4_respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) ctop_app_appW4_respF_memory(.CLKA(pci0_pcie_ep$trn2_clk),
							  .CLKB(pci0_pcie_ep$trn2_clk),
							  .ADDRA(ctop_app_appW4_respF_memory$ADDRA),
							  .ADDRB(ctop_app_appW4_respF_memory$ADDRB),
							  .DIA(ctop_app_appW4_respF_memory$DIA),
							  .DIB(ctop_app_appW4_respF_memory$DIB),
							  .WEA(ctop_app_appW4_respF_memory$WEA),
							  .WEB(ctop_app_appW4_respF_memory$WEB),
							  .ENA(ctop_app_appW4_respF_memory$ENA),
							  .ENB(ctop_app_appW4_respF_memory$ENB),
							  .DOA(),
							  .DOB(ctop_app_appW4_respF_memory$DOB));

  // submodule ctop_app_appW4_wci_isReset
  ResetToBool ctop_app_appW4_wci_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_4),
					 .VAL(ctop_app_appW4_wci_isReset$VAL));

  // submodule ctop_app_appW4_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_app_appW4_wci_reqF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_4),
						       .CLK(pci0_pcie_ep$trn2_clk),
						       .D_IN(ctop_app_appW4_wci_reqF$D_IN),
						       .ENQ(ctop_app_appW4_wci_reqF$ENQ),
						       .DEQ(ctop_app_appW4_wci_reqF$DEQ),
						       .CLR(ctop_app_appW4_wci_reqF$CLR),
						       .D_OUT(ctop_app_appW4_wci_reqF$D_OUT),
						       .FULL_N(),
						       .EMPTY_N(ctop_app_appW4_wci_reqF$EMPTY_N));

  // submodule ctop_app_appW4_wmi_isReset
  ResetToBool ctop_app_appW4_wmi_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_4),
					 .VAL(ctop_app_appW4_wmi_isReset$VAL));

  // submodule ctop_app_appW4_wmi_respF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) ctop_app_appW4_wmi_respF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_4),
						    .CLK(pci0_pcie_ep$trn2_clk),
						    .D_IN(ctop_app_appW4_wmi_respF$D_IN),
						    .ENQ(ctop_app_appW4_wmi_respF$ENQ),
						    .DEQ(ctop_app_appW4_wmi_respF$DEQ),
						    .CLR(ctop_app_appW4_wmi_respF$CLR),
						    .D_OUT(ctop_app_appW4_wmi_respF$D_OUT),
						    .FULL_N(ctop_app_appW4_wmi_respF$FULL_N),
						    .EMPTY_N(ctop_app_appW4_wmi_respF$EMPTY_N));

  // submodule ctop_app_appW4_wsiM_isReset
  ResetToBool ctop_app_appW4_wsiM_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_4),
					  .VAL(ctop_app_appW4_wsiM_isReset$VAL));

  // submodule ctop_app_appW4_wsiS_isReset
  ResetToBool ctop_app_appW4_wsiS_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_4),
					  .VAL(ctop_app_appW4_wsiS_isReset$VAL));

  // submodule ctop_app_appW4_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_app_appW4_wsiS_reqFifo(.RST_N(ctop_inf_cp$RST_N_wci_Vm_4),
							   .CLK(pci0_pcie_ep$trn2_clk),
							   .D_IN(ctop_app_appW4_wsiS_reqFifo$D_IN),
							   .ENQ(ctop_app_appW4_wsiS_reqFifo$ENQ),
							   .DEQ(ctop_app_appW4_wsiS_reqFifo$DEQ),
							   .CLR(ctop_app_appW4_wsiS_reqFifo$CLR),
							   .D_OUT(ctop_app_appW4_wsiS_reqFifo$D_OUT),
							   .FULL_N(ctop_app_appW4_wsiS_reqFifo$FULL_N),
							   .EMPTY_N(ctop_app_appW4_wsiS_reqFifo$EMPTY_N));

  // submodule ctop_inf_cp
  mkOCCP ctop_inf_cp(.pciDevice(pciDevice$dD_OUT),
		     .CLK_sys0_clk(sys0_clk$O),
		     .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		     .CLK(pci0_pcie_ep$trn2_clk),
		     .RST_N(trn2_rst$OUT_RST_N),
		     .gps_ppsSyncIn_x(ctop_inf_cp$gps_ppsSyncIn_x),
		     .server_request_put(ctop_inf_cp$server_request_put),
		     .switch_x(ctop_inf_cp$switch_x),
		     .wci_Vm_0_SData(ctop_inf_cp$wci_Vm_0_SData),
		     .wci_Vm_0_SFlag(ctop_inf_cp$wci_Vm_0_SFlag),
		     .wci_Vm_0_SResp(ctop_inf_cp$wci_Vm_0_SResp),
		     .wci_Vm_10_SData(ctop_inf_cp$wci_Vm_10_SData),
		     .wci_Vm_10_SFlag(ctop_inf_cp$wci_Vm_10_SFlag),
		     .wci_Vm_10_SResp(ctop_inf_cp$wci_Vm_10_SResp),
		     .wci_Vm_11_SData(ctop_inf_cp$wci_Vm_11_SData),
		     .wci_Vm_11_SFlag(ctop_inf_cp$wci_Vm_11_SFlag),
		     .wci_Vm_11_SResp(ctop_inf_cp$wci_Vm_11_SResp),
		     .wci_Vm_12_SData(ctop_inf_cp$wci_Vm_12_SData),
		     .wci_Vm_12_SFlag(ctop_inf_cp$wci_Vm_12_SFlag),
		     .wci_Vm_12_SResp(ctop_inf_cp$wci_Vm_12_SResp),
		     .wci_Vm_13_SData(ctop_inf_cp$wci_Vm_13_SData),
		     .wci_Vm_13_SFlag(ctop_inf_cp$wci_Vm_13_SFlag),
		     .wci_Vm_13_SResp(ctop_inf_cp$wci_Vm_13_SResp),
		     .wci_Vm_14_SData(ctop_inf_cp$wci_Vm_14_SData),
		     .wci_Vm_14_SFlag(ctop_inf_cp$wci_Vm_14_SFlag),
		     .wci_Vm_14_SResp(ctop_inf_cp$wci_Vm_14_SResp),
		     .wci_Vm_1_SData(ctop_inf_cp$wci_Vm_1_SData),
		     .wci_Vm_1_SFlag(ctop_inf_cp$wci_Vm_1_SFlag),
		     .wci_Vm_1_SResp(ctop_inf_cp$wci_Vm_1_SResp),
		     .wci_Vm_2_SData(ctop_inf_cp$wci_Vm_2_SData),
		     .wci_Vm_2_SFlag(ctop_inf_cp$wci_Vm_2_SFlag),
		     .wci_Vm_2_SResp(ctop_inf_cp$wci_Vm_2_SResp),
		     .wci_Vm_3_SData(ctop_inf_cp$wci_Vm_3_SData),
		     .wci_Vm_3_SFlag(ctop_inf_cp$wci_Vm_3_SFlag),
		     .wci_Vm_3_SResp(ctop_inf_cp$wci_Vm_3_SResp),
		     .wci_Vm_4_SData(ctop_inf_cp$wci_Vm_4_SData),
		     .wci_Vm_4_SFlag(ctop_inf_cp$wci_Vm_4_SFlag),
		     .wci_Vm_4_SResp(ctop_inf_cp$wci_Vm_4_SResp),
		     .wci_Vm_5_SData(ctop_inf_cp$wci_Vm_5_SData),
		     .wci_Vm_5_SFlag(ctop_inf_cp$wci_Vm_5_SFlag),
		     .wci_Vm_5_SResp(ctop_inf_cp$wci_Vm_5_SResp),
		     .wci_Vm_6_SData(ctop_inf_cp$wci_Vm_6_SData),
		     .wci_Vm_6_SFlag(ctop_inf_cp$wci_Vm_6_SFlag),
		     .wci_Vm_6_SResp(ctop_inf_cp$wci_Vm_6_SResp),
		     .wci_Vm_7_SData(ctop_inf_cp$wci_Vm_7_SData),
		     .wci_Vm_7_SFlag(ctop_inf_cp$wci_Vm_7_SFlag),
		     .wci_Vm_7_SResp(ctop_inf_cp$wci_Vm_7_SResp),
		     .wci_Vm_8_SData(ctop_inf_cp$wci_Vm_8_SData),
		     .wci_Vm_8_SFlag(ctop_inf_cp$wci_Vm_8_SFlag),
		     .wci_Vm_8_SResp(ctop_inf_cp$wci_Vm_8_SResp),
		     .wci_Vm_9_SData(ctop_inf_cp$wci_Vm_9_SData),
		     .wci_Vm_9_SFlag(ctop_inf_cp$wci_Vm_9_SFlag),
		     .wci_Vm_9_SResp(ctop_inf_cp$wci_Vm_9_SResp),
		     .EN_server_request_put(ctop_inf_cp$EN_server_request_put),
		     .EN_server_response_get(ctop_inf_cp$EN_server_response_get),
		     .wci_Vm_0_SThreadBusy(ctop_inf_cp$wci_Vm_0_SThreadBusy),
		     .wci_Vm_1_SThreadBusy(ctop_inf_cp$wci_Vm_1_SThreadBusy),
		     .wci_Vm_2_SThreadBusy(ctop_inf_cp$wci_Vm_2_SThreadBusy),
		     .wci_Vm_3_SThreadBusy(ctop_inf_cp$wci_Vm_3_SThreadBusy),
		     .wci_Vm_4_SThreadBusy(ctop_inf_cp$wci_Vm_4_SThreadBusy),
		     .wci_Vm_5_SThreadBusy(ctop_inf_cp$wci_Vm_5_SThreadBusy),
		     .wci_Vm_6_SThreadBusy(ctop_inf_cp$wci_Vm_6_SThreadBusy),
		     .wci_Vm_7_SThreadBusy(ctop_inf_cp$wci_Vm_7_SThreadBusy),
		     .wci_Vm_8_SThreadBusy(ctop_inf_cp$wci_Vm_8_SThreadBusy),
		     .wci_Vm_9_SThreadBusy(ctop_inf_cp$wci_Vm_9_SThreadBusy),
		     .wci_Vm_10_SThreadBusy(ctop_inf_cp$wci_Vm_10_SThreadBusy),
		     .wci_Vm_11_SThreadBusy(ctop_inf_cp$wci_Vm_11_SThreadBusy),
		     .wci_Vm_12_SThreadBusy(ctop_inf_cp$wci_Vm_12_SThreadBusy),
		     .wci_Vm_13_SThreadBusy(ctop_inf_cp$wci_Vm_13_SThreadBusy),
		     .wci_Vm_14_SThreadBusy(ctop_inf_cp$wci_Vm_14_SThreadBusy),
		     .RDY_server_request_put(ctop_inf_cp$RDY_server_request_put),
		     .server_response_get(ctop_inf_cp$server_response_get),
		     .RDY_server_response_get(ctop_inf_cp$RDY_server_response_get),
		     .led(ctop_inf_cp$led),
		     .wci_Vm_0_MCmd(ctop_inf_cp$wci_Vm_0_MCmd),
		     .wci_Vm_0_MAddrSpace(ctop_inf_cp$wci_Vm_0_MAddrSpace),
		     .wci_Vm_0_MByteEn(ctop_inf_cp$wci_Vm_0_MByteEn),
		     .wci_Vm_0_MAddr(ctop_inf_cp$wci_Vm_0_MAddr),
		     .wci_Vm_0_MData(ctop_inf_cp$wci_Vm_0_MData),
		     .wci_Vm_0_MFlag(),
		     .wci_Vm_1_MCmd(ctop_inf_cp$wci_Vm_1_MCmd),
		     .wci_Vm_1_MAddrSpace(ctop_inf_cp$wci_Vm_1_MAddrSpace),
		     .wci_Vm_1_MByteEn(ctop_inf_cp$wci_Vm_1_MByteEn),
		     .wci_Vm_1_MAddr(ctop_inf_cp$wci_Vm_1_MAddr),
		     .wci_Vm_1_MData(ctop_inf_cp$wci_Vm_1_MData),
		     .wci_Vm_1_MFlag(),
		     .wci_Vm_2_MCmd(ctop_inf_cp$wci_Vm_2_MCmd),
		     .wci_Vm_2_MAddrSpace(ctop_inf_cp$wci_Vm_2_MAddrSpace),
		     .wci_Vm_2_MByteEn(ctop_inf_cp$wci_Vm_2_MByteEn),
		     .wci_Vm_2_MAddr(ctop_inf_cp$wci_Vm_2_MAddr),
		     .wci_Vm_2_MData(ctop_inf_cp$wci_Vm_2_MData),
		     .wci_Vm_2_MFlag(),
		     .wci_Vm_3_MCmd(ctop_inf_cp$wci_Vm_3_MCmd),
		     .wci_Vm_3_MAddrSpace(ctop_inf_cp$wci_Vm_3_MAddrSpace),
		     .wci_Vm_3_MByteEn(ctop_inf_cp$wci_Vm_3_MByteEn),
		     .wci_Vm_3_MAddr(ctop_inf_cp$wci_Vm_3_MAddr),
		     .wci_Vm_3_MData(ctop_inf_cp$wci_Vm_3_MData),
		     .wci_Vm_3_MFlag(),
		     .wci_Vm_4_MCmd(ctop_inf_cp$wci_Vm_4_MCmd),
		     .wci_Vm_4_MAddrSpace(ctop_inf_cp$wci_Vm_4_MAddrSpace),
		     .wci_Vm_4_MByteEn(ctop_inf_cp$wci_Vm_4_MByteEn),
		     .wci_Vm_4_MAddr(ctop_inf_cp$wci_Vm_4_MAddr),
		     .wci_Vm_4_MData(ctop_inf_cp$wci_Vm_4_MData),
		     .wci_Vm_4_MFlag(),
		     .wci_Vm_5_MCmd(ctop_inf_cp$wci_Vm_5_MCmd),
		     .wci_Vm_5_MAddrSpace(ctop_inf_cp$wci_Vm_5_MAddrSpace),
		     .wci_Vm_5_MByteEn(ctop_inf_cp$wci_Vm_5_MByteEn),
		     .wci_Vm_5_MAddr(ctop_inf_cp$wci_Vm_5_MAddr),
		     .wci_Vm_5_MData(ctop_inf_cp$wci_Vm_5_MData),
		     .wci_Vm_5_MFlag(),
		     .wci_Vm_6_MCmd(ctop_inf_cp$wci_Vm_6_MCmd),
		     .wci_Vm_6_MAddrSpace(ctop_inf_cp$wci_Vm_6_MAddrSpace),
		     .wci_Vm_6_MByteEn(ctop_inf_cp$wci_Vm_6_MByteEn),
		     .wci_Vm_6_MAddr(ctop_inf_cp$wci_Vm_6_MAddr),
		     .wci_Vm_6_MData(ctop_inf_cp$wci_Vm_6_MData),
		     .wci_Vm_6_MFlag(),
		     .wci_Vm_7_MCmd(ctop_inf_cp$wci_Vm_7_MCmd),
		     .wci_Vm_7_MAddrSpace(ctop_inf_cp$wci_Vm_7_MAddrSpace),
		     .wci_Vm_7_MByteEn(ctop_inf_cp$wci_Vm_7_MByteEn),
		     .wci_Vm_7_MAddr(ctop_inf_cp$wci_Vm_7_MAddr),
		     .wci_Vm_7_MData(ctop_inf_cp$wci_Vm_7_MData),
		     .wci_Vm_7_MFlag(),
		     .wci_Vm_8_MCmd(ctop_inf_cp$wci_Vm_8_MCmd),
		     .wci_Vm_8_MAddrSpace(ctop_inf_cp$wci_Vm_8_MAddrSpace),
		     .wci_Vm_8_MByteEn(ctop_inf_cp$wci_Vm_8_MByteEn),
		     .wci_Vm_8_MAddr(ctop_inf_cp$wci_Vm_8_MAddr),
		     .wci_Vm_8_MData(ctop_inf_cp$wci_Vm_8_MData),
		     .wci_Vm_8_MFlag(ctop_inf_cp$wci_Vm_8_MFlag),
		     .wci_Vm_9_MCmd(ctop_inf_cp$wci_Vm_9_MCmd),
		     .wci_Vm_9_MAddrSpace(ctop_inf_cp$wci_Vm_9_MAddrSpace),
		     .wci_Vm_9_MByteEn(ctop_inf_cp$wci_Vm_9_MByteEn),
		     .wci_Vm_9_MAddr(ctop_inf_cp$wci_Vm_9_MAddr),
		     .wci_Vm_9_MData(ctop_inf_cp$wci_Vm_9_MData),
		     .wci_Vm_9_MFlag(ctop_inf_cp$wci_Vm_9_MFlag),
		     .wci_Vm_10_MCmd(ctop_inf_cp$wci_Vm_10_MCmd),
		     .wci_Vm_10_MAddrSpace(ctop_inf_cp$wci_Vm_10_MAddrSpace),
		     .wci_Vm_10_MByteEn(ctop_inf_cp$wci_Vm_10_MByteEn),
		     .wci_Vm_10_MAddr(ctop_inf_cp$wci_Vm_10_MAddr),
		     .wci_Vm_10_MData(ctop_inf_cp$wci_Vm_10_MData),
		     .wci_Vm_10_MFlag(ctop_inf_cp$wci_Vm_10_MFlag),
		     .wci_Vm_11_MCmd(ctop_inf_cp$wci_Vm_11_MCmd),
		     .wci_Vm_11_MAddrSpace(ctop_inf_cp$wci_Vm_11_MAddrSpace),
		     .wci_Vm_11_MByteEn(ctop_inf_cp$wci_Vm_11_MByteEn),
		     .wci_Vm_11_MAddr(ctop_inf_cp$wci_Vm_11_MAddr),
		     .wci_Vm_11_MData(ctop_inf_cp$wci_Vm_11_MData),
		     .wci_Vm_11_MFlag(ctop_inf_cp$wci_Vm_11_MFlag),
		     .wci_Vm_12_MCmd(ctop_inf_cp$wci_Vm_12_MCmd),
		     .wci_Vm_12_MAddrSpace(ctop_inf_cp$wci_Vm_12_MAddrSpace),
		     .wci_Vm_12_MByteEn(ctop_inf_cp$wci_Vm_12_MByteEn),
		     .wci_Vm_12_MAddr(ctop_inf_cp$wci_Vm_12_MAddr),
		     .wci_Vm_12_MData(ctop_inf_cp$wci_Vm_12_MData),
		     .wci_Vm_12_MFlag(ctop_inf_cp$wci_Vm_12_MFlag),
		     .wci_Vm_13_MCmd(ctop_inf_cp$wci_Vm_13_MCmd),
		     .wci_Vm_13_MAddrSpace(ctop_inf_cp$wci_Vm_13_MAddrSpace),
		     .wci_Vm_13_MByteEn(ctop_inf_cp$wci_Vm_13_MByteEn),
		     .wci_Vm_13_MAddr(ctop_inf_cp$wci_Vm_13_MAddr),
		     .wci_Vm_13_MData(ctop_inf_cp$wci_Vm_13_MData),
		     .wci_Vm_13_MFlag(),
		     .wci_Vm_14_MCmd(ctop_inf_cp$wci_Vm_14_MCmd),
		     .wci_Vm_14_MAddrSpace(ctop_inf_cp$wci_Vm_14_MAddrSpace),
		     .wci_Vm_14_MByteEn(ctop_inf_cp$wci_Vm_14_MByteEn),
		     .wci_Vm_14_MAddr(ctop_inf_cp$wci_Vm_14_MAddr),
		     .wci_Vm_14_MData(ctop_inf_cp$wci_Vm_14_MData),
		     .wci_Vm_14_MFlag(),
		     .cpNow(ctop_inf_cp$cpNow),
		     .RDY_cpNow(),
		     .gps_ppsSyncOut(ctop_inf_cp$gps_ppsSyncOut),
		     .RST_N_wci_Vm_0(),
		     .RST_N_wci_Vm_1(),
		     .RST_N_wci_Vm_2(ctop_inf_cp$RST_N_wci_Vm_2),
		     .RST_N_wci_Vm_3(ctop_inf_cp$RST_N_wci_Vm_3),
		     .RST_N_wci_Vm_4(ctop_inf_cp$RST_N_wci_Vm_4),
		     .RST_N_wci_Vm_5(),
		     .RST_N_wci_Vm_6(),
		     .RST_N_wci_Vm_7(),
		     .RST_N_wci_Vm_8(ctop_inf_cp$RST_N_wci_Vm_8),
		     .RST_N_wci_Vm_9(ctop_inf_cp$RST_N_wci_Vm_9),
		     .RST_N_wci_Vm_10(ctop_inf_cp$RST_N_wci_Vm_10),
		     .RST_N_wci_Vm_11(),
		     .RST_N_wci_Vm_12(ctop_inf_cp$RST_N_wci_Vm_12),
		     .RST_N_wci_Vm_13(ctop_inf_cp$RST_N_wci_Vm_13),
		     .RST_N_wci_Vm_14(ctop_inf_cp$RST_N_wci_Vm_14));

  // submodule ctop_inf_dp0_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp0_bram_memory(.CLKA(pci0_pcie_ep$trn2_clk),
						       .CLKB(pci0_pcie_ep$trn2_clk),
						       .ADDRA(ctop_inf_dp0_bram_memory$ADDRA),
						       .ADDRB(ctop_inf_dp0_bram_memory$ADDRB),
						       .DIA(ctop_inf_dp0_bram_memory$DIA),
						       .DIB(ctop_inf_dp0_bram_memory$DIB),
						       .WEA(ctop_inf_dp0_bram_memory$WEA),
						       .WEB(ctop_inf_dp0_bram_memory$WEB),
						       .ENA(ctop_inf_dp0_bram_memory$ENA),
						       .ENB(ctop_inf_dp0_bram_memory$ENB),
						       .DOA(ctop_inf_dp0_bram_memory$DOA),
						       .DOB(ctop_inf_dp0_bram_memory$DOB));

  // submodule ctop_inf_dp0_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp0_bram_memory_1(.CLKA(pci0_pcie_ep$trn2_clk),
							 .CLKB(pci0_pcie_ep$trn2_clk),
							 .ADDRA(ctop_inf_dp0_bram_memory_1$ADDRA),
							 .ADDRB(ctop_inf_dp0_bram_memory_1$ADDRB),
							 .DIA(ctop_inf_dp0_bram_memory_1$DIA),
							 .DIB(ctop_inf_dp0_bram_memory_1$DIB),
							 .WEA(ctop_inf_dp0_bram_memory_1$WEA),
							 .WEB(ctop_inf_dp0_bram_memory_1$WEB),
							 .ENA(ctop_inf_dp0_bram_memory_1$ENA),
							 .ENB(ctop_inf_dp0_bram_memory_1$ENB),
							 .DOA(ctop_inf_dp0_bram_memory_1$DOA),
							 .DOB(ctop_inf_dp0_bram_memory_1$DOB));

  // submodule ctop_inf_dp0_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp0_bram_memory_2(.CLKA(pci0_pcie_ep$trn2_clk),
							 .CLKB(pci0_pcie_ep$trn2_clk),
							 .ADDRA(ctop_inf_dp0_bram_memory_2$ADDRA),
							 .ADDRB(ctop_inf_dp0_bram_memory_2$ADDRB),
							 .DIA(ctop_inf_dp0_bram_memory_2$DIA),
							 .DIB(ctop_inf_dp0_bram_memory_2$DIB),
							 .WEA(ctop_inf_dp0_bram_memory_2$WEA),
							 .WEB(ctop_inf_dp0_bram_memory_2$WEB),
							 .ENA(ctop_inf_dp0_bram_memory_2$ENA),
							 .ENB(ctop_inf_dp0_bram_memory_2$ENB),
							 .DOA(ctop_inf_dp0_bram_memory_2$DOA),
							 .DOB(ctop_inf_dp0_bram_memory_2$DOB));

  // submodule ctop_inf_dp0_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp0_bram_memory_3(.CLKA(pci0_pcie_ep$trn2_clk),
							 .CLKB(pci0_pcie_ep$trn2_clk),
							 .ADDRA(ctop_inf_dp0_bram_memory_3$ADDRA),
							 .ADDRB(ctop_inf_dp0_bram_memory_3$ADDRB),
							 .DIA(ctop_inf_dp0_bram_memory_3$DIA),
							 .DIB(ctop_inf_dp0_bram_memory_3$DIB),
							 .WEA(ctop_inf_dp0_bram_memory_3$WEA),
							 .WEB(ctop_inf_dp0_bram_memory_3$WEB),
							 .ENA(ctop_inf_dp0_bram_memory_3$ENA),
							 .ENB(ctop_inf_dp0_bram_memory_3$ENB),
							 .DOA(ctop_inf_dp0_bram_memory_3$DOA),
							 .DOB(ctop_inf_dp0_bram_memory_3$DOB));

  // submodule ctop_inf_dp0_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterA_1_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$DEQ),
									      .CLR(ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterA_2_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$DEQ),
									      .CLR(ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterA_3_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$DEQ),
									      .CLR(ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterA_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									    .CLK(pci0_pcie_ep$trn2_clk),
									    .D_IN(ctop_inf_dp0_bram_serverAdapterA_outDataCore$D_IN),
									    .ENQ(ctop_inf_dp0_bram_serverAdapterA_outDataCore$ENQ),
									    .DEQ(ctop_inf_dp0_bram_serverAdapterA_outDataCore$DEQ),
									    .CLR(ctop_inf_dp0_bram_serverAdapterA_outDataCore$CLR),
									    .D_OUT(ctop_inf_dp0_bram_serverAdapterA_outDataCore$D_OUT),
									    .FULL_N(ctop_inf_dp0_bram_serverAdapterA_outDataCore$FULL_N),
									    .EMPTY_N(ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterB_1_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$DEQ),
									      .CLR(ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterB_2_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$DEQ),
									      .CLR(ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterB_3_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$DEQ),
									      .CLR(ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_bram_serverAdapterB_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
									    .CLK(pci0_pcie_ep$trn2_clk),
									    .D_IN(ctop_inf_dp0_bram_serverAdapterB_outDataCore$D_IN),
									    .ENQ(ctop_inf_dp0_bram_serverAdapterB_outDataCore$ENQ),
									    .DEQ(ctop_inf_dp0_bram_serverAdapterB_outDataCore$DEQ),
									    .CLR(ctop_inf_dp0_bram_serverAdapterB_outDataCore$CLR),
									    .D_OUT(ctop_inf_dp0_bram_serverAdapterB_outDataCore$D_OUT),
									    .FULL_N(ctop_inf_dp0_bram_serverAdapterB_outDataCore$FULL_N),
									    .EMPTY_N(ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp0_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp0_tlp_inF(.CLK(pci0_pcie_ep$trn2_clk),
						   .RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
						   .D_IN(ctop_inf_dp0_tlp_inF$D_IN),
						   .ENQ(ctop_inf_dp0_tlp_inF$ENQ),
						   .DEQ(ctop_inf_dp0_tlp_inF$DEQ),
						   .CLR(ctop_inf_dp0_tlp_inF$CLR),
						   .D_OUT(ctop_inf_dp0_tlp_inF$D_OUT),
						   .EMPTY_N(ctop_inf_dp0_tlp_inF$EMPTY_N),
						   .FULL_N(ctop_inf_dp0_tlp_inF$FULL_N));

  // submodule ctop_inf_dp0_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp0_tlp_mReqF(.CLK(pci0_pcie_ep$trn2_clk),
						     .RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
						     .D_IN(ctop_inf_dp0_tlp_mReqF$D_IN),
						     .ENQ(ctop_inf_dp0_tlp_mReqF$ENQ),
						     .DEQ(ctop_inf_dp0_tlp_mReqF$DEQ),
						     .CLR(ctop_inf_dp0_tlp_mReqF$CLR),
						     .D_OUT(ctop_inf_dp0_tlp_mReqF$D_OUT),
						     .EMPTY_N(ctop_inf_dp0_tlp_mReqF$EMPTY_N),
						     .FULL_N(ctop_inf_dp0_tlp_mReqF$FULL_N));

  // submodule ctop_inf_dp0_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) ctop_inf_dp0_tlp_mRespF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
						   .CLK(pci0_pcie_ep$trn2_clk),
						   .D_IN(ctop_inf_dp0_tlp_mRespF$D_IN),
						   .ENQ(ctop_inf_dp0_tlp_mRespF$ENQ),
						   .DEQ(ctop_inf_dp0_tlp_mRespF$DEQ),
						   .CLR(ctop_inf_dp0_tlp_mRespF$CLR),
						   .D_OUT(ctop_inf_dp0_tlp_mRespF$D_OUT),
						   .FULL_N(ctop_inf_dp0_tlp_mRespF$FULL_N),
						   .EMPTY_N(ctop_inf_dp0_tlp_mRespF$EMPTY_N));

  // submodule ctop_inf_dp0_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp0_tlp_outF(.CLK(pci0_pcie_ep$trn2_clk),
						    .RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
						    .D_IN(ctop_inf_dp0_tlp_outF$D_IN),
						    .ENQ(ctop_inf_dp0_tlp_outF$ENQ),
						    .DEQ(ctop_inf_dp0_tlp_outF$DEQ),
						    .CLR(ctop_inf_dp0_tlp_outF$CLR),
						    .D_OUT(ctop_inf_dp0_tlp_outF$D_OUT),
						    .EMPTY_N(ctop_inf_dp0_tlp_outF$EMPTY_N),
						    .FULL_N(ctop_inf_dp0_tlp_outF$FULL_N));

  // submodule ctop_inf_dp0_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp0_tlp_readReq(.CLK(pci0_pcie_ep$trn2_clk),
						       .RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
						       .D_IN(ctop_inf_dp0_tlp_readReq$D_IN),
						       .ENQ(ctop_inf_dp0_tlp_readReq$ENQ),
						       .DEQ(ctop_inf_dp0_tlp_readReq$DEQ),
						       .CLR(ctop_inf_dp0_tlp_readReq$CLR),
						       .D_OUT(ctop_inf_dp0_tlp_readReq$D_OUT),
						       .EMPTY_N(ctop_inf_dp0_tlp_readReq$EMPTY_N),
						       .FULL_N(ctop_inf_dp0_tlp_readReq$FULL_N));

  // submodule ctop_inf_dp0_wci_isReset
  ResetToBool ctop_inf_dp0_wci_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_13),
				       .VAL(ctop_inf_dp0_wci_isReset$VAL));

  // submodule ctop_inf_dp0_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_wci_reqF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
						     .CLK(pci0_pcie_ep$trn2_clk),
						     .D_IN(ctop_inf_dp0_wci_reqF$D_IN),
						     .ENQ(ctop_inf_dp0_wci_reqF$ENQ),
						     .DEQ(ctop_inf_dp0_wci_reqF$DEQ),
						     .CLR(ctop_inf_dp0_wci_reqF$CLR),
						     .D_OUT(ctop_inf_dp0_wci_reqF$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(ctop_inf_dp0_wci_reqF$EMPTY_N));

  // submodule ctop_inf_dp0_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_wmi_wmi_dhF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
							.CLK(pci0_pcie_ep$trn2_clk),
							.D_IN(ctop_inf_dp0_wmi_wmi_dhF$D_IN),
							.ENQ(ctop_inf_dp0_wmi_wmi_dhF$ENQ),
							.DEQ(ctop_inf_dp0_wmi_wmi_dhF$DEQ),
							.CLR(ctop_inf_dp0_wmi_wmi_dhF$CLR),
							.D_OUT(ctop_inf_dp0_wmi_wmi_dhF$D_OUT),
							.FULL_N(ctop_inf_dp0_wmi_wmi_dhF$FULL_N),
							.EMPTY_N(ctop_inf_dp0_wmi_wmi_dhF$EMPTY_N));

  // submodule ctop_inf_dp0_wmi_wmi_isReset
  ResetToBool ctop_inf_dp0_wmi_wmi_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_13),
					   .VAL(ctop_inf_dp0_wmi_wmi_isReset$VAL));

  // submodule ctop_inf_dp0_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_wmi_wmi_mFlagF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
							   .CLK(pci0_pcie_ep$trn2_clk),
							   .D_IN(ctop_inf_dp0_wmi_wmi_mFlagF$D_IN),
							   .ENQ(ctop_inf_dp0_wmi_wmi_mFlagF$ENQ),
							   .DEQ(ctop_inf_dp0_wmi_wmi_mFlagF$DEQ),
							   .CLR(ctop_inf_dp0_wmi_wmi_mFlagF$CLR),
							   .D_OUT(ctop_inf_dp0_wmi_wmi_mFlagF$D_OUT),
							   .FULL_N(ctop_inf_dp0_wmi_wmi_mFlagF$FULL_N),
							   .EMPTY_N(ctop_inf_dp0_wmi_wmi_mFlagF$EMPTY_N));

  // submodule ctop_inf_dp0_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp0_wmi_wmi_reqF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_13),
							 .CLK(pci0_pcie_ep$trn2_clk),
							 .D_IN(ctop_inf_dp0_wmi_wmi_reqF$D_IN),
							 .ENQ(ctop_inf_dp0_wmi_wmi_reqF$ENQ),
							 .DEQ(ctop_inf_dp0_wmi_wmi_reqF$DEQ),
							 .CLR(ctop_inf_dp0_wmi_wmi_reqF$CLR),
							 .D_OUT(ctop_inf_dp0_wmi_wmi_reqF$D_OUT),
							 .FULL_N(ctop_inf_dp0_wmi_wmi_reqF$FULL_N),
							 .EMPTY_N(ctop_inf_dp0_wmi_wmi_reqF$EMPTY_N));

  // submodule ctop_inf_dp0_wti_isReset
  ResetToBool ctop_inf_dp0_wti_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_13),
				       .VAL(ctop_inf_dp0_wti_isReset$VAL));

  // submodule ctop_inf_dp1_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp1_bram_memory(.CLKA(pci0_pcie_ep$trn2_clk),
						       .CLKB(pci0_pcie_ep$trn2_clk),
						       .ADDRA(ctop_inf_dp1_bram_memory$ADDRA),
						       .ADDRB(ctop_inf_dp1_bram_memory$ADDRB),
						       .DIA(ctop_inf_dp1_bram_memory$DIA),
						       .DIB(ctop_inf_dp1_bram_memory$DIB),
						       .WEA(ctop_inf_dp1_bram_memory$WEA),
						       .WEB(ctop_inf_dp1_bram_memory$WEB),
						       .ENA(ctop_inf_dp1_bram_memory$ENA),
						       .ENB(ctop_inf_dp1_bram_memory$ENB),
						       .DOA(ctop_inf_dp1_bram_memory$DOA),
						       .DOB(ctop_inf_dp1_bram_memory$DOB));

  // submodule ctop_inf_dp1_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp1_bram_memory_1(.CLKA(pci0_pcie_ep$trn2_clk),
							 .CLKB(pci0_pcie_ep$trn2_clk),
							 .ADDRA(ctop_inf_dp1_bram_memory_1$ADDRA),
							 .ADDRB(ctop_inf_dp1_bram_memory_1$ADDRB),
							 .DIA(ctop_inf_dp1_bram_memory_1$DIA),
							 .DIB(ctop_inf_dp1_bram_memory_1$DIB),
							 .WEA(ctop_inf_dp1_bram_memory_1$WEA),
							 .WEB(ctop_inf_dp1_bram_memory_1$WEB),
							 .ENA(ctop_inf_dp1_bram_memory_1$ENA),
							 .ENB(ctop_inf_dp1_bram_memory_1$ENB),
							 .DOA(ctop_inf_dp1_bram_memory_1$DOA),
							 .DOB(ctop_inf_dp1_bram_memory_1$DOB));

  // submodule ctop_inf_dp1_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp1_bram_memory_2(.CLKA(pci0_pcie_ep$trn2_clk),
							 .CLKB(pci0_pcie_ep$trn2_clk),
							 .ADDRA(ctop_inf_dp1_bram_memory_2$ADDRA),
							 .ADDRB(ctop_inf_dp1_bram_memory_2$ADDRB),
							 .DIA(ctop_inf_dp1_bram_memory_2$DIA),
							 .DIB(ctop_inf_dp1_bram_memory_2$DIB),
							 .WEA(ctop_inf_dp1_bram_memory_2$WEA),
							 .WEB(ctop_inf_dp1_bram_memory_2$WEB),
							 .ENA(ctop_inf_dp1_bram_memory_2$ENA),
							 .ENB(ctop_inf_dp1_bram_memory_2$ENB),
							 .DOA(ctop_inf_dp1_bram_memory_2$DOA),
							 .DOB(ctop_inf_dp1_bram_memory_2$DOB));

  // submodule ctop_inf_dp1_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ctop_inf_dp1_bram_memory_3(.CLKA(pci0_pcie_ep$trn2_clk),
							 .CLKB(pci0_pcie_ep$trn2_clk),
							 .ADDRA(ctop_inf_dp1_bram_memory_3$ADDRA),
							 .ADDRB(ctop_inf_dp1_bram_memory_3$ADDRB),
							 .DIA(ctop_inf_dp1_bram_memory_3$DIA),
							 .DIB(ctop_inf_dp1_bram_memory_3$DIB),
							 .WEA(ctop_inf_dp1_bram_memory_3$WEA),
							 .WEB(ctop_inf_dp1_bram_memory_3$WEB),
							 .ENA(ctop_inf_dp1_bram_memory_3$ENA),
							 .ENB(ctop_inf_dp1_bram_memory_3$ENB),
							 .DOA(ctop_inf_dp1_bram_memory_3$DOA),
							 .DOB(ctop_inf_dp1_bram_memory_3$DOB));

  // submodule ctop_inf_dp1_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterA_1_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$DEQ),
									      .CLR(ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterA_2_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$DEQ),
									      .CLR(ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterA_3_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$DEQ),
									      .CLR(ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterA_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									    .CLK(pci0_pcie_ep$trn2_clk),
									    .D_IN(ctop_inf_dp1_bram_serverAdapterA_outDataCore$D_IN),
									    .ENQ(ctop_inf_dp1_bram_serverAdapterA_outDataCore$ENQ),
									    .DEQ(ctop_inf_dp1_bram_serverAdapterA_outDataCore$DEQ),
									    .CLR(ctop_inf_dp1_bram_serverAdapterA_outDataCore$CLR),
									    .D_OUT(ctop_inf_dp1_bram_serverAdapterA_outDataCore$D_OUT),
									    .FULL_N(ctop_inf_dp1_bram_serverAdapterA_outDataCore$FULL_N),
									    .EMPTY_N(ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterB_1_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$DEQ),
									      .CLR(ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterB_2_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$DEQ),
									      .CLR(ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterB_3_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									      .CLK(pci0_pcie_ep$trn2_clk),
									      .D_IN(ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$D_IN),
									      .ENQ(ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$ENQ),
									      .DEQ(ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$DEQ),
									      .CLR(ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$CLR),
									      .D_OUT(ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$D_OUT),
									      .FULL_N(ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N),
									      .EMPTY_N(ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_bram_serverAdapterB_outDataCore(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
									    .CLK(pci0_pcie_ep$trn2_clk),
									    .D_IN(ctop_inf_dp1_bram_serverAdapterB_outDataCore$D_IN),
									    .ENQ(ctop_inf_dp1_bram_serverAdapterB_outDataCore$ENQ),
									    .DEQ(ctop_inf_dp1_bram_serverAdapterB_outDataCore$DEQ),
									    .CLR(ctop_inf_dp1_bram_serverAdapterB_outDataCore$CLR),
									    .D_OUT(ctop_inf_dp1_bram_serverAdapterB_outDataCore$D_OUT),
									    .FULL_N(ctop_inf_dp1_bram_serverAdapterB_outDataCore$FULL_N),
									    .EMPTY_N(ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule ctop_inf_dp1_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp1_tlp_inF(.CLK(pci0_pcie_ep$trn2_clk),
						   .RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
						   .D_IN(ctop_inf_dp1_tlp_inF$D_IN),
						   .ENQ(ctop_inf_dp1_tlp_inF$ENQ),
						   .DEQ(ctop_inf_dp1_tlp_inF$DEQ),
						   .CLR(ctop_inf_dp1_tlp_inF$CLR),
						   .D_OUT(ctop_inf_dp1_tlp_inF$D_OUT),
						   .EMPTY_N(ctop_inf_dp1_tlp_inF$EMPTY_N),
						   .FULL_N(ctop_inf_dp1_tlp_inF$FULL_N));

  // submodule ctop_inf_dp1_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp1_tlp_mReqF(.CLK(pci0_pcie_ep$trn2_clk),
						     .RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
						     .D_IN(ctop_inf_dp1_tlp_mReqF$D_IN),
						     .ENQ(ctop_inf_dp1_tlp_mReqF$ENQ),
						     .DEQ(ctop_inf_dp1_tlp_mReqF$DEQ),
						     .CLR(ctop_inf_dp1_tlp_mReqF$CLR),
						     .D_OUT(ctop_inf_dp1_tlp_mReqF$D_OUT),
						     .EMPTY_N(ctop_inf_dp1_tlp_mReqF$EMPTY_N),
						     .FULL_N(ctop_inf_dp1_tlp_mReqF$FULL_N));

  // submodule ctop_inf_dp1_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) ctop_inf_dp1_tlp_mRespF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
						   .CLK(pci0_pcie_ep$trn2_clk),
						   .D_IN(ctop_inf_dp1_tlp_mRespF$D_IN),
						   .ENQ(ctop_inf_dp1_tlp_mRespF$ENQ),
						   .DEQ(ctop_inf_dp1_tlp_mRespF$DEQ),
						   .CLR(ctop_inf_dp1_tlp_mRespF$CLR),
						   .D_OUT(ctop_inf_dp1_tlp_mRespF$D_OUT),
						   .FULL_N(ctop_inf_dp1_tlp_mRespF$FULL_N),
						   .EMPTY_N(ctop_inf_dp1_tlp_mRespF$EMPTY_N));

  // submodule ctop_inf_dp1_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp1_tlp_outF(.CLK(pci0_pcie_ep$trn2_clk),
						    .RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
						    .D_IN(ctop_inf_dp1_tlp_outF$D_IN),
						    .ENQ(ctop_inf_dp1_tlp_outF$ENQ),
						    .DEQ(ctop_inf_dp1_tlp_outF$DEQ),
						    .CLR(ctop_inf_dp1_tlp_outF$CLR),
						    .D_OUT(ctop_inf_dp1_tlp_outF$D_OUT),
						    .EMPTY_N(ctop_inf_dp1_tlp_outF$EMPTY_N),
						    .FULL_N(ctop_inf_dp1_tlp_outF$FULL_N));

  // submodule ctop_inf_dp1_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) ctop_inf_dp1_tlp_readReq(.CLK(pci0_pcie_ep$trn2_clk),
						       .RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
						       .D_IN(ctop_inf_dp1_tlp_readReq$D_IN),
						       .ENQ(ctop_inf_dp1_tlp_readReq$ENQ),
						       .DEQ(ctop_inf_dp1_tlp_readReq$DEQ),
						       .CLR(ctop_inf_dp1_tlp_readReq$CLR),
						       .D_OUT(ctop_inf_dp1_tlp_readReq$D_OUT),
						       .EMPTY_N(ctop_inf_dp1_tlp_readReq$EMPTY_N),
						       .FULL_N(ctop_inf_dp1_tlp_readReq$FULL_N));

  // submodule ctop_inf_dp1_wci_isReset
  ResetToBool ctop_inf_dp1_wci_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_14),
				       .VAL(ctop_inf_dp1_wci_isReset$VAL));

  // submodule ctop_inf_dp1_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_wci_reqF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
						     .CLK(pci0_pcie_ep$trn2_clk),
						     .D_IN(ctop_inf_dp1_wci_reqF$D_IN),
						     .ENQ(ctop_inf_dp1_wci_reqF$ENQ),
						     .DEQ(ctop_inf_dp1_wci_reqF$DEQ),
						     .CLR(ctop_inf_dp1_wci_reqF$CLR),
						     .D_OUT(ctop_inf_dp1_wci_reqF$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(ctop_inf_dp1_wci_reqF$EMPTY_N));

  // submodule ctop_inf_dp1_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_wmi_wmi_dhF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
							.CLK(pci0_pcie_ep$trn2_clk),
							.D_IN(ctop_inf_dp1_wmi_wmi_dhF$D_IN),
							.ENQ(ctop_inf_dp1_wmi_wmi_dhF$ENQ),
							.DEQ(ctop_inf_dp1_wmi_wmi_dhF$DEQ),
							.CLR(ctop_inf_dp1_wmi_wmi_dhF$CLR),
							.D_OUT(ctop_inf_dp1_wmi_wmi_dhF$D_OUT),
							.FULL_N(ctop_inf_dp1_wmi_wmi_dhF$FULL_N),
							.EMPTY_N(ctop_inf_dp1_wmi_wmi_dhF$EMPTY_N));

  // submodule ctop_inf_dp1_wmi_wmi_isReset
  ResetToBool ctop_inf_dp1_wmi_wmi_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_14),
					   .VAL(ctop_inf_dp1_wmi_wmi_isReset$VAL));

  // submodule ctop_inf_dp1_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_wmi_wmi_mFlagF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
							   .CLK(pci0_pcie_ep$trn2_clk),
							   .D_IN(ctop_inf_dp1_wmi_wmi_mFlagF$D_IN),
							   .ENQ(ctop_inf_dp1_wmi_wmi_mFlagF$ENQ),
							   .DEQ(ctop_inf_dp1_wmi_wmi_mFlagF$DEQ),
							   .CLR(ctop_inf_dp1_wmi_wmi_mFlagF$CLR),
							   .D_OUT(ctop_inf_dp1_wmi_wmi_mFlagF$D_OUT),
							   .FULL_N(ctop_inf_dp1_wmi_wmi_mFlagF$FULL_N),
							   .EMPTY_N(ctop_inf_dp1_wmi_wmi_mFlagF$EMPTY_N));

  // submodule ctop_inf_dp1_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ctop_inf_dp1_wmi_wmi_reqF(.RST_N(ctop_inf_cp$RST_N_wci_Vm_14),
							 .CLK(pci0_pcie_ep$trn2_clk),
							 .D_IN(ctop_inf_dp1_wmi_wmi_reqF$D_IN),
							 .ENQ(ctop_inf_dp1_wmi_wmi_reqF$ENQ),
							 .DEQ(ctop_inf_dp1_wmi_wmi_reqF$DEQ),
							 .CLR(ctop_inf_dp1_wmi_wmi_reqF$CLR),
							 .D_OUT(ctop_inf_dp1_wmi_wmi_reqF$D_OUT),
							 .FULL_N(ctop_inf_dp1_wmi_wmi_reqF$FULL_N),
							 .EMPTY_N(ctop_inf_dp1_wmi_wmi_reqF$EMPTY_N));

  // submodule ctop_inf_dp1_wti_isReset
  ResetToBool ctop_inf_dp1_wti_isReset(.RST(ctop_inf_cp$RST_N_wci_Vm_14),
				       .VAL(ctop_inf_dp1_wti_isReset$VAL));

  // submodule ctop_inf_itc0_now
  SyncRegister #(.width(32'd64),
		 .init(64'd0)) ctop_inf_itc0_now(.sCLK(sys0_clk$O),
						 .dCLK(pci0_pcie_ep$trn2_clk),
						 .sRST_N(sys0_rst$OUT_RST_N),
						 .sD_IN(ctop_inf_itc0_now$sD_IN),
						 .sEN(ctop_inf_itc0_now$sEN),
						 .dD_OUT(ctop_inf_itc0_now$dD_OUT),
						 .sRDY(ctop_inf_itc0_now$sRDY));

  // submodule ctop_inf_itc1_now
  SyncRegister #(.width(32'd64),
		 .init(64'd0)) ctop_inf_itc1_now(.sCLK(sys0_clk$O),
						 .dCLK(pci0_pcie_ep$trn2_clk),
						 .sRST_N(sys0_rst$OUT_RST_N),
						 .sD_IN(ctop_inf_itc1_now$sD_IN),
						 .sEN(ctop_inf_itc1_now$sEN),
						 .dD_OUT(ctop_inf_itc1_now$dD_OUT),
						 .sRDY(ctop_inf_itc1_now$sRDY));

  // submodule ctop_inf_sm0
  mkTLPSM ctop_inf_sm0(.pfk(14'd1360),
		       .CLK(pci0_pcie_ep$trn2_clk),
		       .RST_N(trn2_rst$OUT_RST_N),
		       .c0_response_put(ctop_inf_sm0$c0_response_put),
		       .c1_response_put(ctop_inf_sm0$c1_response_put),
		       .s_request_put(ctop_inf_sm0$s_request_put),
		       .EN_s_request_put(ctop_inf_sm0$EN_s_request_put),
		       .EN_s_response_get(ctop_inf_sm0$EN_s_response_get),
		       .EN_c0_request_get(ctop_inf_sm0$EN_c0_request_get),
		       .EN_c0_response_put(ctop_inf_sm0$EN_c0_response_put),
		       .EN_c1_request_get(ctop_inf_sm0$EN_c1_request_get),
		       .EN_c1_response_put(ctop_inf_sm0$EN_c1_response_put),
		       .RDY_s_request_put(ctop_inf_sm0$RDY_s_request_put),
		       .s_response_get(ctop_inf_sm0$s_response_get),
		       .RDY_s_response_get(ctop_inf_sm0$RDY_s_response_get),
		       .c0_request_get(ctop_inf_sm0$c0_request_get),
		       .RDY_c0_request_get(ctop_inf_sm0$RDY_c0_request_get),
		       .RDY_c0_response_put(ctop_inf_sm0$RDY_c0_response_put),
		       .c1_request_get(ctop_inf_sm0$c1_request_get),
		       .RDY_c1_request_get(ctop_inf_sm0$RDY_c1_request_get),
		       .RDY_c1_response_put(ctop_inf_sm0$RDY_c1_response_put));

  // submodule ctop_inf_sm1
  mkTLPSM ctop_inf_sm1(.pfk(14'd9488),
		       .CLK(pci0_pcie_ep$trn2_clk),
		       .RST_N(trn2_rst$OUT_RST_N),
		       .c0_response_put(ctop_inf_sm1$c0_response_put),
		       .c1_response_put(ctop_inf_sm1$c1_response_put),
		       .s_request_put(ctop_inf_sm1$s_request_put),
		       .EN_s_request_put(ctop_inf_sm1$EN_s_request_put),
		       .EN_s_response_get(ctop_inf_sm1$EN_s_response_get),
		       .EN_c0_request_get(ctop_inf_sm1$EN_c0_request_get),
		       .EN_c0_response_put(ctop_inf_sm1$EN_c0_response_put),
		       .EN_c1_request_get(ctop_inf_sm1$EN_c1_request_get),
		       .EN_c1_response_put(ctop_inf_sm1$EN_c1_response_put),
		       .RDY_s_request_put(ctop_inf_sm1$RDY_s_request_put),
		       .s_response_get(ctop_inf_sm1$s_response_get),
		       .RDY_s_response_get(ctop_inf_sm1$RDY_s_response_get),
		       .c0_request_get(ctop_inf_sm1$c0_request_get),
		       .RDY_c0_request_get(ctop_inf_sm1$RDY_c0_request_get),
		       .RDY_c0_response_put(ctop_inf_sm1$RDY_c0_response_put),
		       .c1_request_get(ctop_inf_sm1$c1_request_get),
		       .RDY_c1_request_get(ctop_inf_sm1$RDY_c1_request_get),
		       .RDY_c1_response_put(ctop_inf_sm1$RDY_c1_response_put));

  // submodule ctop_inf_sm2
  mkTLPSM ctop_inf_sm2(.pfk(14'd9497),
		       .CLK(pci0_pcie_ep$trn2_clk),
		       .RST_N(trn2_rst$OUT_RST_N),
		       .c0_response_put(ctop_inf_sm2$c0_response_put),
		       .c1_response_put(ctop_inf_sm2$c1_response_put),
		       .s_request_put(ctop_inf_sm2$s_request_put),
		       .EN_s_request_put(ctop_inf_sm2$EN_s_request_put),
		       .EN_s_response_get(ctop_inf_sm2$EN_s_response_get),
		       .EN_c0_request_get(ctop_inf_sm2$EN_c0_request_get),
		       .EN_c0_response_put(ctop_inf_sm2$EN_c0_response_put),
		       .EN_c1_request_get(ctop_inf_sm2$EN_c1_request_get),
		       .EN_c1_response_put(ctop_inf_sm2$EN_c1_response_put),
		       .RDY_s_request_put(ctop_inf_sm2$RDY_s_request_put),
		       .s_response_get(ctop_inf_sm2$s_response_get),
		       .RDY_s_response_get(ctop_inf_sm2$RDY_s_response_get),
		       .c0_request_get(ctop_inf_sm2$c0_request_get),
		       .RDY_c0_request_get(ctop_inf_sm2$RDY_c0_request_get),
		       .RDY_c0_response_put(ctop_inf_sm2$RDY_c0_response_put),
		       .c1_request_get(),
		       .RDY_c1_request_get(ctop_inf_sm2$RDY_c1_request_get),
		       .RDY_c1_response_put());

  // submodule dram0
  mkDramServer dram0(.CLK_sys0_clk(sys0_clk$O),
		     .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		     .CLK(pci0_pcie_ep$trn2_clk),
		     .RST_N(ctop_inf_cp$RST_N_wci_Vm_12),
		     .wci_s_MFlag(dram0$wci_s_MFlag),
		     .wci_s_req(dram0$wci_s_req),
		     .wmemiS_MAddr(dram0$wmemiS_MAddr),
		     .wmemiS_MBurstLength(dram0$wmemiS_MBurstLength),
		     .wmemiS_MCmd(dram0$wmemiS_MCmd),
		     .wmemiS_MData(dram0$wmemiS_MData),
		     .wmemiS_MDataByteEn(dram0$wmemiS_MDataByteEn),
		     .wmemiS_MReqLast(dram0$wmemiS_MReqLast),
		     .wmemiS_MDataValid(dram0$wmemiS_MDataValid),
		     .wmemiS_MDataLast(dram0$wmemiS_MDataLast),
		     .wmemiS_MReset_n(dram0$wmemiS_MReset_n),
		     .wci_s_resp(dram0$wci_s_resp),
		     .wci_s_SThreadBusy(dram0$wci_s_SThreadBusy),
		     .wci_s_SFlag(dram0$wci_s_SFlag),
		     .dram_addr(dram0$dram_addr),
		     .dram_ba(dram0$dram_ba),
		     .dram_ras_n(dram0$dram_ras_n),
		     .dram_cas_n(dram0$dram_cas_n),
		     .dram_we_n(dram0$dram_we_n),
		     .dram_reset_n(dram0$dram_reset_n),
		     .dram_cs_n(dram0$dram_cs_n),
		     .dram_odt(dram0$dram_odt),
		     .dram_cke(dram0$dram_cke),
		     .dram_dm(dram0$dram_dm),
		     .dram_ck_p(dram0$dram_ck_p),
		     .dram_ck_n(dram0$dram_ck_n),
		     .wmemiS_SResp(dram0$wmemiS_SResp),
		     .wmemiS_SRespLast(dram0$wmemiS_SRespLast),
		     .wmemiS_SData(dram0$wmemiS_SData),
		     .wmemiS_SCmdAccept(dram0$wmemiS_SCmdAccept),
		     .wmemiS_SDataAccept(dram0$wmemiS_SDataAccept),
		     .dram_io_dq(dram0$dram_io_dq),
		     .dram_io_dqs_p(dram0$dram_io_dqs_p),
		     .dram_io_dqs_n(dram0$dram_io_dqs_n));

  // submodule fI2P
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fI2P(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fI2P$D_IN),
				    .ENQ(fI2P$ENQ),
				    .DEQ(fI2P$DEQ),
				    .CLR(fI2P$CLR),
				    .D_OUT(fI2P$D_OUT),
				    .FULL_N(fI2P$FULL_N),
				    .EMPTY_N(fI2P$EMPTY_N));

  // submodule fP2I
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fP2I(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fP2I$D_IN),
				    .ENQ(fP2I$ENQ),
				    .DEQ(fP2I$DEQ),
				    .CLR(fP2I$CLR),
				    .D_OUT(fP2I$D_OUT),
				    .FULL_N(fP2I$FULL_N),
				    .EMPTY_N(fP2I$EMPTY_N));

  // submodule flash0
  mkFlashWorker flash0(.CLK(pci0_pcie_ep$trn2_clk),
		       .RST_N(ctop_inf_cp$RST_N_wci_Vm_9),
		       .flash_fwait_i(flash0$flash_fwait_i),
		       .wci_s_MFlag(flash0$wci_s_MFlag),
		       .wci_s_req(flash0$wci_s_req),
		       .wci_s_resp(flash0$wci_s_resp),
		       .wci_s_SThreadBusy(flash0$wci_s_SThreadBusy),
		       .wci_s_SFlag(flash0$wci_s_SFlag),
		       .flash_addr(flash0$flash_addr),
		       .flash_ce_n(flash0$flash_ce_n),
		       .flash_oe_n(flash0$flash_oe_n),
		       .flash_we_n(flash0$flash_we_n),
		       .flash_wp_n(flash0$flash_wp_n),
		       .flash_rst_n(flash0$flash_rst_n),
		       .flash_adv_n(flash0$flash_adv_n),
		       .flash_io_dq(flash0$flash_io_dq));

  // submodule gbe0
  mkGbeWorker gbe0(.CLK_gmii_rx_clk(gmii_rx_clk),
		   .CLK_sys1_clk(sys1_clk$O),
		   .RST_N_sys1_rst(sys1_rst$OUT_RST_N),
		   .CLK(pci0_pcie_ep$trn2_clk),
		   .RST_N(ctop_inf_cp$RST_N_wci_Vm_10),
		   .gmii_rx_dv_i(gbe0$gmii_rx_dv_i),
		   .gmii_rx_er_i(gbe0$gmii_rx_er_i),
		   .gmii_rxd_i(gbe0$gmii_rxd_i),
		   .wci_rx_MFlag(gbe0$wci_rx_MFlag),
		   .wci_rx_req(gbe0$wci_rx_req),
		   .wci_tx_MFlag(gbe0$wci_tx_MFlag),
		   .wci_tx_req(gbe0$wci_tx_req),
		   .wsiS1_MBurstLength(gbe0$wsiS1_MBurstLength),
		   .wsiS1_MByteEn(gbe0$wsiS1_MByteEn),
		   .wsiS1_MCmd(gbe0$wsiS1_MCmd),
		   .wsiS1_MData(gbe0$wsiS1_MData),
		   .wsiS1_MReqInfo(gbe0$wsiS1_MReqInfo),
		   .wti_s_req(gbe0$wti_s_req),
		   .wsiM1_SThreadBusy(gbe0$wsiM1_SThreadBusy),
		   .wsiM1_SReset_n(gbe0$wsiM1_SReset_n),
		   .wsiS1_MReqLast(gbe0$wsiS1_MReqLast),
		   .wsiS1_MBurstPrecise(gbe0$wsiS1_MBurstPrecise),
		   .wsiS1_MReset_n(gbe0$wsiS1_MReset_n),
		   .wci_rx_resp(gbe0$wci_rx_resp),
		   .wci_rx_SThreadBusy(gbe0$wci_rx_SThreadBusy),
		   .wci_rx_SFlag(gbe0$wci_rx_SFlag),
		   .wci_tx_resp(gbe0$wci_tx_resp),
		   .wci_tx_SThreadBusy(gbe0$wci_tx_SThreadBusy),
		   .wci_tx_SFlag(gbe0$wci_tx_SFlag),
		   .wti_s_SThreadBusy(gbe0$wti_s_SThreadBusy),
		   .wsiM1_MCmd(),
		   .wsiM1_MReqLast(),
		   .wsiM1_MBurstPrecise(),
		   .wsiM1_MBurstLength(),
		   .wsiM1_MData(),
		   .wsiM1_MByteEn(),
		   .wsiM1_MReqInfo(),
		   .wsiM1_MReset_n(),
		   .wsiS1_SThreadBusy(),
		   .wsiS1_SReset_n(),
		   .gmii_txd(gbe0$gmii_txd),
		   .gmii_tx_en(gbe0$gmii_tx_en),
		   .gmii_tx_er(gbe0$gmii_tx_er),
		   .CLK_gmii_tx_clk(gbe0$CLK_gmii_tx_clk),
		   .CLK_GATE_gmii_tx_clk(),
		   .CLK_rxclk(gbe0$CLK_rxclk),
		   .CLK_GATE_rxclk(),
		   .RST_N_mrst_n(gbe0$RST_N_mrst_n));

  // submodule i2pAF_dCombinedReset
  ResetEither i2pAF_dCombinedReset(.A_RST(trn_rst$OUT_RST_N),
				   .B_RST(i2pAF_dCrossedsReset$OUT_RST_N),
				   .RST_OUT(i2pAF_dCombinedReset$RST_OUT));

  // submodule i2pAF_dCrossedsReset
  SyncReset0 i2pAF_dCrossedsReset(.IN_RST_N(trn2_rst$OUT_RST_N),
				  .OUT_RST_N(i2pAF_dCrossedsReset$OUT_RST_N));

  // submodule i2pAF_dInReset
  ResetToBool i2pAF_dInReset(.RST(i2pAF_dCombinedReset$RST_OUT),
			     .VAL(i2pAF_dInReset$VAL));

  // submodule i2pAF_sCombinedReset
  ResetEither i2pAF_sCombinedReset(.A_RST(trn2_rst$OUT_RST_N),
				   .B_RST(i2pAF_sCrosseddReset$OUT_RST_N),
				   .RST_OUT(i2pAF_sCombinedReset$RST_OUT));

  // submodule i2pAF_sCrosseddReset
  SyncReset0 i2pAF_sCrosseddReset(.IN_RST_N(trn_rst$OUT_RST_N),
				  .OUT_RST_N(i2pAF_sCrosseddReset$OUT_RST_N));

  // submodule i2pAF_sInReset
  ResetToBool i2pAF_sInReset(.RST(i2pAF_sCombinedReset$RST_OUT),
			     .VAL(i2pAF_sInReset$VAL));

  // submodule icap
  mkICAPWorker #(.isV6ICAP(1'd1),
		 .hasDebugLogic(1'd1)) icap(.wciS0_Clk(pci0_pcie_ep$trn2_clk),
					    .wciS0_MReset_n(ctop_inf_cp$RST_N_wci_Vm_8),
					    .wci_s_MFlag(icap$wci_s_MFlag),
					    .wci_s_req(icap$wci_s_req),
					    .wci_s_resp(icap$wci_s_resp),
					    .wci_s_SThreadBusy(icap$wci_s_SThreadBusy),
					    .wci_s_SFlag(icap$wci_s_SFlag));

  // submodule infLed
  BypassCrossingWire #(.width(32'd2)) infLed(.WVAL(infLed$WVAL),
					     .WGET(infLed$WGET));

  // submodule p2iAF_dCombinedReset
  ResetEither p2iAF_dCombinedReset(.A_RST(trn2_rst$OUT_RST_N),
				   .B_RST(p2iAF_dCrossedsReset$OUT_RST_N),
				   .RST_OUT(p2iAF_dCombinedReset$RST_OUT));

  // submodule p2iAF_dCrossedsReset
  SyncReset0 p2iAF_dCrossedsReset(.IN_RST_N(trn_rst$OUT_RST_N),
				  .OUT_RST_N(p2iAF_dCrossedsReset$OUT_RST_N));

  // submodule p2iAF_dInReset
  ResetToBool p2iAF_dInReset(.RST(p2iAF_dCombinedReset$RST_OUT),
			     .VAL(p2iAF_dInReset$VAL));

  // submodule p2iAF_sCombinedReset
  ResetEither p2iAF_sCombinedReset(.A_RST(trn_rst$OUT_RST_N),
				   .B_RST(p2iAF_sCrosseddReset$OUT_RST_N),
				   .RST_OUT(p2iAF_sCombinedReset$RST_OUT));

  // submodule p2iAF_sCrosseddReset
  SyncReset0 p2iAF_sCrosseddReset(.IN_RST_N(trn2_rst$OUT_RST_N),
				  .OUT_RST_N(p2iAF_sCrosseddReset$OUT_RST_N));

  // submodule p2iAF_sInReset
  ResetToBool p2iAF_sInReset(.RST(p2iAF_sCombinedReset$RST_OUT),
			     .VAL(p2iAF_sInReset$VAL));

  // submodule pci0_clk
  IBUFDS_GTXE1 pci0_clk(.I(pci0_clkp),
			.IB(pci0_clkn),
			.CEB(1'd0),
			.O(pci0_clk$O),
			.ODIV2());

  // submodule pci0_pcie_ep
  xilinx_v6_pcie_wrapper #(.PL_FAST_TRAIN("FALSE")) pci0_pcie_ep(.sys_clk(pci0_clk$O),
								 .sys_reset_n(pci0_rst$O),
								 .cfg_byte_en_n(pci0_pcie_ep$cfg_byte_en_n),
								 .cfg_di(pci0_pcie_ep$cfg_di),
								 .cfg_dsn(pci0_pcie_ep$cfg_dsn),
								 .cfg_dwaddr(pci0_pcie_ep$cfg_dwaddr),
								 .cfg_err_cor_n(pci0_pcie_ep$cfg_err_cor_n),
								 .cfg_err_cpl_abort_n(pci0_pcie_ep$cfg_err_cpl_abort_n),
								 .cfg_err_cpl_timeout_n(pci0_pcie_ep$cfg_err_cpl_timeout_n),
								 .cfg_err_cpl_unexpect_n(pci0_pcie_ep$cfg_err_cpl_unexpect_n),
								 .cfg_err_ecrc_n(pci0_pcie_ep$cfg_err_ecrc_n),
								 .cfg_err_locked_n(pci0_pcie_ep$cfg_err_locked_n),
								 .cfg_err_posted_n(pci0_pcie_ep$cfg_err_posted_n),
								 .cfg_err_tlp_cpl_header(pci0_pcie_ep$cfg_err_tlp_cpl_header),
								 .cfg_err_ur_n(pci0_pcie_ep$cfg_err_ur_n),
								 .cfg_interrupt_assert_n(pci0_pcie_ep$cfg_interrupt_assert_n),
								 .cfg_interrupt_di(pci0_pcie_ep$cfg_interrupt_di),
								 .cfg_interrupt_n(pci0_pcie_ep$cfg_interrupt_n),
								 .cfg_pm_wake_n(pci0_pcie_ep$cfg_pm_wake_n),
								 .cfg_rd_en_n(pci0_pcie_ep$cfg_rd_en_n),
								 .cfg_trn_pending_n(pci0_pcie_ep$cfg_trn_pending_n),
								 .cfg_turnoff_ok_n(pci0_pcie_ep$cfg_turnoff_ok_n),
								 .cfg_wr_en_n(pci0_pcie_ep$cfg_wr_en_n),
								 .pci_exp_rxn(pci0_pcie_ep$pci_exp_rxn),
								 .pci_exp_rxp(pci0_pcie_ep$pci_exp_rxp),
								 .pl_directed_link_auton(pci0_pcie_ep$pl_directed_link_auton),
								 .pl_directed_link_change(pci0_pcie_ep$pl_directed_link_change),
								 .pl_directed_link_speed(pci0_pcie_ep$pl_directed_link_speed),
								 .pl_directed_link_width(pci0_pcie_ep$pl_directed_link_width),
								 .pl_upstream_prefer_deemph(pci0_pcie_ep$pl_upstream_prefer_deemph),
								 .trn_fc_sel(pci0_pcie_ep$trn_fc_sel),
								 .trn_rdst_rdy_n(pci0_pcie_ep$trn_rdst_rdy_n),
								 .trn_rnp_ok_n(pci0_pcie_ep$trn_rnp_ok_n),
								 .trn_tcfg_gnt_n(pci0_pcie_ep$trn_tcfg_gnt_n),
								 .trn_td(pci0_pcie_ep$trn_td),
								 .trn_teof_n(pci0_pcie_ep$trn_teof_n),
								 .trn_terrfwd_n(pci0_pcie_ep$trn_terrfwd_n),
								 .trn_trem_n(pci0_pcie_ep$trn_trem_n),
								 .trn_tsof_n(pci0_pcie_ep$trn_tsof_n),
								 .trn_tsrc_dsc_n(pci0_pcie_ep$trn_tsrc_dsc_n),
								 .trn_tsrc_rdy_n(pci0_pcie_ep$trn_tsrc_rdy_n),
								 .trn_tstr_n(pci0_pcie_ep$trn_tstr_n),
								 .pci_exp_txp(pci0_pcie_ep$pci_exp_txp),
								 .pci_exp_txn(pci0_pcie_ep$pci_exp_txn),
								 .trn_lnk_up_n(pci0_pcie_ep$trn_lnk_up_n),
								 .trn_fc_ph(),
								 .trn_fc_pd(),
								 .trn_fc_nph(),
								 .trn_fc_npd(),
								 .trn_fc_cplh(),
								 .trn_fc_cpld(),
								 .cfg_do(),
								 .cfg_rd_wr_done_n(),
								 .cfg_bus_number(pci0_pcie_ep$cfg_bus_number),
								 .cfg_device_number(pci0_pcie_ep$cfg_device_number),
								 .cfg_function_number(pci0_pcie_ep$cfg_function_number),
								 .cfg_status(),
								 .cfg_command(),
								 .cfg_dstatus(),
								 .cfg_dcommand(),
								 .cfg_dcommand2(),
								 .cfg_lstatus(),
								 .cfg_lcommand(),
								 .cfg_to_turnoff_n(),
								 .cfg_pcie_link_state_n(),
								 .cfg_pmcsr_pme_en(),
								 .cfg_pmcsr_pme_status(),
								 .cfg_pmcsr_powerstate(),
								 .trn_rsof_n(pci0_pcie_ep$trn_rsof_n),
								 .trn_reof_n(pci0_pcie_ep$trn_reof_n),
								 .trn_rd(pci0_pcie_ep$trn_rd),
								 .trn_rrem_n(pci0_pcie_ep$trn_rrem_n),
								 .trn_rerrfwd_n(),
								 .trn_rsrc_rdy_n(pci0_pcie_ep$trn_rsrc_rdy_n),
								 .trn_rsrc_dsc_n(),
								 .trn_rbar_hit_n(pci0_pcie_ep$trn_rbar_hit_n),
								 .trn_tdst_rdy_n(pci0_pcie_ep$trn_tdst_rdy_n),
								 .trn_tbuf_av(),
								 .trn_terr_drop_n(),
								 .trn_tcfg_req_n(),
								 .cfg_interrupt_rdy_n(pci0_pcie_ep$cfg_interrupt_rdy_n),
								 .cfg_interrupt_do(pci0_pcie_ep$cfg_interrupt_do),
								 .cfg_interrupt_mmenable(pci0_pcie_ep$cfg_interrupt_mmenable),
								 .cfg_interrupt_msienable(pci0_pcie_ep$cfg_interrupt_msienable),
								 .cfg_interrupt_msixenable(),
								 .cfg_interrupt_msixfm(),
								 .cfg_err_cpl_rdy_n(),
								 .pl_initial_link_width(),
								 .pl_lane_reversal_mode(),
								 .pl_link_gen2_capable(),
								 .pl_link_partner_gen2_supported(),
								 .pl_link_upcfg_capable(),
								 .pl_sel_link_rate(),
								 .pl_sel_link_width(),
								 .pl_ltssm_state(),
								 .pl_received_hot_rst(),
								 .trn_clk(pci0_pcie_ep$trn_clk),
								 .trn2_clk(pci0_pcie_ep$trn2_clk),
								 .trn_reset_n(pci0_pcie_ep$trn_reset_n));

  // submodule pci0_rst
  IBUF pci0_rst(.I(pci0_reset_n), .O(pci0_rst$O));

  // submodule pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciDevice(.sCLK(pci0_pcie_ep$trn_clk),
					 .dCLK(pci0_pcie_ep$trn2_clk),
					 .sRST_N(trn_rst$OUT_RST_N),
					 .sD_IN(pciDevice$sD_IN),
					 .sEN(pciDevice$sEN),
					 .dD_OUT(pciDevice$dD_OUT),
					 .sRDY(pciDevice$sRDY));

  // submodule pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) pcie_irq_fifoAssert(.sCLK(pci0_pcie_ep$trn_clk),
						  .dCLK(pci0_pcie_ep$trn_clk),
						  .sRST_N(trn_rst$OUT_RST_N),
						  .sD_IN(pcie_irq_fifoAssert$sD_IN),
						  .sENQ(pcie_irq_fifoAssert$sENQ),
						  .dDEQ(pcie_irq_fifoAssert$dDEQ),
						  .dD_OUT(pcie_irq_fifoAssert$dD_OUT),
						  .sFULL_N(),
						  .dEMPTY_N(pcie_irq_fifoAssert$dEMPTY_N));

  // submodule preEdge
  ClockInvToBool preEdge(.CLK_FAST(pci0_pcie_ep$trn_clk),
			 .CLK_SLOW(pci0_pcie_ep$trn2_clk),
			 .CLK_VAL(preEdge$CLK_VAL));

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk$O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys0_rst(.CLK(sys0_clk$O),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(sys0_rst$OUT_RST_N));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki$O), .O(sys1_clk$O));

  // submodule sys1_clki
  IBUFDS_GTXE1 sys1_clki(.I(sys1_clkp),
			 .IB(sys1_clkn),
			 .CEB(1'd0),
			 .O(sys1_clki$O),
			 .ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk$O),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(sys1_rst$OUT_RST_N));

  // submodule tcGbe0_now
  SyncRegister #(.width(32'd64), .init(64'd0)) tcGbe0_now(.sCLK(sys0_clk$O),
							  .dCLK(sys1_clk$O),
							  .sRST_N(sys0_rst$OUT_RST_N),
							  .sD_IN(tcGbe0_now$sD_IN),
							  .sEN(tcGbe0_now$sEN),
							  .dD_OUT(tcGbe0_now$dD_OUT),
							  .sRDY(tcGbe0_now$sRDY));

  // submodule trn2_rst
  SyncResetA #(.RSTDELAY(32'd0)) trn2_rst(.CLK(pci0_pcie_ep$trn2_clk),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(trn2_rst$OUT_RST_N));

  // submodule trn_rst
  SyncResetA #(.RSTDELAY(32'd0)) trn_rst(.CLK(pci0_pcie_ep$trn_clk),
					 .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					 .OUT_RST_N(trn_rst$OUT_RST_N));

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = tcGbe0_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = tcGbe0_now$sRDY ;

  // rule RL_ctop_inf_mkConnectionVtoAf
  assign CAN_FIRE_RL_ctop_inf_mkConnectionVtoAf = ctop_inf_itc0_now$sRDY ;
  assign WILL_FIRE_RL_ctop_inf_mkConnectionVtoAf = ctop_inf_itc0_now$sRDY ;

  // rule RL_ctop_inf_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_ctop_inf_mkConnectionVtoAf_1 = ctop_inf_itc1_now$sRDY ;
  assign WILL_FIRE_RL_ctop_inf_mkConnectionVtoAf_1 = ctop_inf_itc1_now$sRDY ;

  // rule RL_write_pciDevice
  assign CAN_FIRE_RL_write_pciDevice = pciDevice$sRDY ;
  assign WILL_FIRE_RL_write_pciDevice = pciDevice$sRDY ;

  // rule RL_connect_interrupt_1
  assign CAN_FIRE_RL_connect_interrupt_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_1 = 1'd1 ;

  // rule RL_connect_interrupt_rdy_n
  assign CAN_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;

  // rule RL_connect_interrupt_mmenable
  assign CAN_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;

  // rule RL_connect_interrupt_do
  assign CAN_FIRE_RL_connect_interrupt_do = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_do = 1'd1 ;

  // rule RL_tie_off_inputs
  assign CAN_FIRE_RL_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs = 1'd1 ;

  // rule RL_reqConnect
  assign CAN_FIRE_RL_reqConnect = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect = 1'd1 ;

  // rule RL_tie_off_inputs_1
  assign CAN_FIRE_RL_tie_off_inputs_1 = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs_1 = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect = icap$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect = icap$wci_s_SThreadBusy ;

  // rule RL_mFlagConnect
  assign CAN_FIRE_RL_mFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect = 1'd1 ;

  // rule RL_reqConnect_1
  assign CAN_FIRE_RL_reqConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_1 = 1'd1 ;

  // rule RL_sDataConnect_1
  assign CAN_FIRE_RL_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_1
  assign CAN_FIRE_RL_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_1 = 1'd1 ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 = flash0$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_1 = flash0$wci_s_SThreadBusy ;

  // rule RL_sFlagConnect_1
  assign CAN_FIRE_RL_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_1 = 1'd1 ;

  // rule RL_mFlagConnect_1
  assign CAN_FIRE_RL_mFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_1 = 1'd1 ;

  // rule RL_reqConnect_2
  assign CAN_FIRE_RL_reqConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_2 = 1'd1 ;

  // rule RL_sRespConnect_2
  assign CAN_FIRE_RL_sRespConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_2 = 1'd1 ;

  // rule RL_sDataConnect_2
  assign CAN_FIRE_RL_sDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_2 = 1'd1 ;

  // rule RL_sFlagConnect_2
  assign CAN_FIRE_RL_sFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_2 = 1'd1 ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 = gbe0$wci_rx_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_2 = gbe0$wci_rx_SThreadBusy ;

  // rule RL_mFlagConnect_2
  assign CAN_FIRE_RL_mFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_2 = 1'd1 ;

  // rule RL_sRespConnect_3
  assign CAN_FIRE_RL_sRespConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_3 = 1'd1 ;

  // rule RL_reqConnect_3
  assign CAN_FIRE_RL_reqConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_3 = 1'd1 ;

  // rule RL_sDataConnect_3
  assign CAN_FIRE_RL_sDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_3 = 1'd1 ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 = gbe0$wci_tx_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_3 = gbe0$wci_tx_SThreadBusy ;

  // rule RL_mFlagConnect_3
  assign CAN_FIRE_RL_mFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_3 = 1'd1 ;

  // rule RL_sFlagConnect_3
  assign CAN_FIRE_RL_sFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_3 = 1'd1 ;

  // rule RL_reqConnect_4
  assign CAN_FIRE_RL_reqConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_4 = 1'd1 ;

  // rule RL_sRespConnect_4
  assign CAN_FIRE_RL_sRespConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_4 = 1'd1 ;

  // rule RL_sDataConnect_4
  assign CAN_FIRE_RL_sDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_4 = 1'd1 ;

  // rule RL_stbConnect_4
  assign CAN_FIRE_RL_stbConnect_4 = dram0$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_4 = dram0$wci_s_SThreadBusy ;

  // rule RL_sFlagConnect_4
  assign CAN_FIRE_RL_sFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_4 = 1'd1 ;

  // rule RL_mFlagConnect_4
  assign CAN_FIRE_RL_mFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_4 = 1'd1 ;

  // rule RL_reqConnect_5
  assign CAN_FIRE_RL_reqConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_5 = 1'd1 ;

  // rule RL_stbConnect_5
  assign CAN_FIRE_RL_stbConnect_5 = gbe0$wti_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_5 = gbe0$wti_s_SThreadBusy ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mReqLConnect
  assign CAN_FIRE_RL_mReqLConnect = ctop_app_appW3_wmemi_reqF_q_0[48] ;
  assign WILL_FIRE_RL_mReqLConnect = CAN_FIRE_RL_mReqLConnect ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mDataVConnect
  assign CAN_FIRE_RL_mDataVConnect = ctop_app_appW3_wmemi_dhF_q_0[145] ;
  assign WILL_FIRE_RL_mDataVConnect = CAN_FIRE_RL_mDataVConnect ;

  // rule RL_mBurstLConnect
  assign CAN_FIRE_RL_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect = 1'd1 ;

  // rule RL_mDataLConnect
  assign CAN_FIRE_RL_mDataLConnect = ctop_app_appW3_wmemi_dhF_q_0[144] ;
  assign WILL_FIRE_RL_mDataLConnect = CAN_FIRE_RL_mDataLConnect ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_sRespConnect_5
  assign CAN_FIRE_RL_sRespConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_5 = 1'd1 ;

  // rule RL_mDataBEConnect
  assign CAN_FIRE_RL_mDataBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataBEConnect = 1'd1 ;

  // rule RL_sDataConnect_5
  assign CAN_FIRE_RL_sDataConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_5 = 1'd1 ;

  // rule RL_sRespLConnect
  assign CAN_FIRE_RL_sRespLConnect = dram0$wmemiS_SRespLast ;
  assign WILL_FIRE_RL_sRespLConnect = dram0$wmemiS_SRespLast ;

  // rule RL_scaConnect
  assign CAN_FIRE_RL_scaConnect = dram0$wmemiS_SCmdAccept ;
  assign WILL_FIRE_RL_scaConnect = dram0$wmemiS_SCmdAccept ;

  // rule RL_sdaConnect
  assign CAN_FIRE_RL_sdaConnect = dram0$wmemiS_SDataAccept ;
  assign WILL_FIRE_RL_sdaConnect = dram0$wmemiS_SDataAccept ;

  // rule RL_mRstConnect
  assign CAN_FIRE_RL_mRstConnect =
	     !ctop_app_appW3_wmemi_isReset$VAL &&
	     ctop_app_appW3_wmemi_operateD ;
  assign WILL_FIRE_RL_mRstConnect = CAN_FIRE_RL_mRstConnect ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     pcie_irq_fifoAssert$dEMPTY_N && pcie_irq_rMSIEnabled &&
	     !pcie_irq_rInterrupting &&
	     pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt_done
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     pcie_irq_rMSIEnabled && pcie_irq_rInterrupting &&
	     !pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // rule RL_connect_interrupt_msienable
  assign CAN_FIRE_RL_connect_interrupt_msienable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_msienable = 1'd1 ;

  // rule RL_p2iAF_reset_head
  assign CAN_FIRE_RL_p2iAF_reset_head = p2iAF_dInReset$VAL ;
  assign WILL_FIRE_RL_p2iAF_reset_head = p2iAF_dInReset$VAL ;

  // rule RL_i2pAF_reset_tail
  assign CAN_FIRE_RL_i2pAF_reset_tail = i2pAF_sInReset$VAL ;
  assign WILL_FIRE_RL_i2pAF_reset_tail = i2pAF_sInReset$VAL ;

  // rule RL_i2pAF_reset_head
  assign CAN_FIRE_RL_i2pAF_reset_head = i2pAF_dInReset$VAL ;
  assign WILL_FIRE_RL_i2pAF_reset_head = i2pAF_dInReset$VAL ;

  // rule RL_ctop_mCmdConnect
  assign CAN_FIRE_RL_ctop_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect = 1'd1 ;

  // rule RL_ctop_mAddrSConnect
  assign CAN_FIRE_RL_ctop_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect = 1'd1 ;

  // rule RL_ctop_mAddrConnect
  assign CAN_FIRE_RL_ctop_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect = 1'd1 ;

  // rule RL_ctop_mBEConnect
  assign CAN_FIRE_RL_ctop_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect = 1'd1 ;

  // rule RL_ctop_mDataConnect
  assign CAN_FIRE_RL_ctop_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect = 1'd1 ;

  // rule RL_ctop_sRespConnect
  assign CAN_FIRE_RL_ctop_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect = 1'd1 ;

  // rule RL_ctop_sDataConnect
  assign CAN_FIRE_RL_ctop_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect = 1'd1 ;

  // rule RL_ctop_mCmdConnect_1
  assign CAN_FIRE_RL_ctop_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_1 = 1'd1 ;

  // rule RL_ctop_stbConnect
  assign CAN_FIRE_RL_ctop_stbConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_stbConnect = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_1
  assign CAN_FIRE_RL_ctop_mAddrSConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_1 = 1'd1 ;

  // rule RL_ctop_sFlagConnect
  assign CAN_FIRE_RL_ctop_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect = 1'd1 ;

  // rule RL_ctop_mBEConnect_1
  assign CAN_FIRE_RL_ctop_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect_1 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_1
  assign CAN_FIRE_RL_ctop_mAddrConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_1 = 1'd1 ;

  // rule RL_ctop_mDataConnect_1
  assign CAN_FIRE_RL_ctop_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_1 = 1'd1 ;

  // rule RL_ctop_sRespConnect_1
  assign CAN_FIRE_RL_ctop_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_1 = 1'd1 ;

  // rule RL_ctop_sDataConnect_1
  assign CAN_FIRE_RL_ctop_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_1 = 1'd1 ;

  // rule RL_ctop_stbConnect_1
  assign CAN_FIRE_RL_ctop_stbConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_stbConnect_1 = 1'd1 ;

  // rule RL_ctop_sFlagConnect_1
  assign CAN_FIRE_RL_ctop_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_1 = 1'd1 ;

  // rule RL_ctop_mCmdConnect_2
  assign CAN_FIRE_RL_ctop_mCmdConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_2 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_2
  assign CAN_FIRE_RL_ctop_mAddrSConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_2 = 1'd1 ;

  // rule RL_ctop_mBEConnect_2
  assign CAN_FIRE_RL_ctop_mBEConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect_2 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_2
  assign CAN_FIRE_RL_ctop_mAddrConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_2 = 1'd1 ;

  // rule RL_ctop_sRespConnect_2
  assign CAN_FIRE_RL_ctop_sRespConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_2 = 1'd1 ;

  // rule RL_ctop_mDataConnect_2
  assign CAN_FIRE_RL_ctop_mDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_2 = 1'd1 ;

  // rule RL_ctop_sDataConnect_2
  assign CAN_FIRE_RL_ctop_sDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_2 = 1'd1 ;

  // rule RL_ctop_stbConnect_2
  assign CAN_FIRE_RL_ctop_stbConnect_2 =
	     ctop_app_appW2_wci_reqF_countReg > 2'd1 ||
	     ctop_app_appW2_wci_isReset$VAL ;
  assign WILL_FIRE_RL_ctop_stbConnect_2 = CAN_FIRE_RL_ctop_stbConnect_2 ;

  // rule RL_ctop_sFlagConnect_2
  assign CAN_FIRE_RL_ctop_sFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_2 = 1'd1 ;

  // rule RL_ctop_mCmdConnect_3
  assign CAN_FIRE_RL_ctop_mCmdConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_3 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_3
  assign CAN_FIRE_RL_ctop_mAddrSConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_3 = 1'd1 ;

  // rule RL_ctop_mBEConnect_3
  assign CAN_FIRE_RL_ctop_mBEConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect_3 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_3
  assign CAN_FIRE_RL_ctop_mAddrConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_3 = 1'd1 ;

  // rule RL_ctop_sRespConnect_3
  assign CAN_FIRE_RL_ctop_sRespConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_3 = 1'd1 ;

  // rule RL_ctop_mDataConnect_3
  assign CAN_FIRE_RL_ctop_mDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_3 = 1'd1 ;

  // rule RL_ctop_sDataConnect_3
  assign CAN_FIRE_RL_ctop_sDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_3 = 1'd1 ;

  // rule RL_ctop_stbConnect_3
  assign CAN_FIRE_RL_ctop_stbConnect_3 =
	     ctop_app_appW3_wci_reqF_countReg > 2'd1 ||
	     ctop_app_appW3_wci_isReset$VAL ;
  assign WILL_FIRE_RL_ctop_stbConnect_3 = CAN_FIRE_RL_ctop_stbConnect_3 ;

  // rule RL_ctop_sFlagConnect_3
  assign CAN_FIRE_RL_ctop_sFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_3 = 1'd1 ;

  // rule RL_ctop_mCmdConnect_4
  assign CAN_FIRE_RL_ctop_mCmdConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_4 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_4
  assign CAN_FIRE_RL_ctop_mAddrSConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_4 = 1'd1 ;

  // rule RL_ctop_mBEConnect_4
  assign CAN_FIRE_RL_ctop_mBEConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect_4 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_4
  assign CAN_FIRE_RL_ctop_mAddrConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_4 = 1'd1 ;

  // rule RL_ctop_mDataConnect_4
  assign CAN_FIRE_RL_ctop_mDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_4 = 1'd1 ;

  // rule RL_ctop_sRespConnect_4
  assign CAN_FIRE_RL_ctop_sRespConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_4 = 1'd1 ;

  // rule RL_ctop_sDataConnect_4
  assign CAN_FIRE_RL_ctop_sDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_4 = 1'd1 ;

  // rule RL_ctop_stbConnect_4
  assign CAN_FIRE_RL_ctop_stbConnect_4 =
	     ctop_app_appW4_wci_reqF_countReg > 2'd1 ||
	     ctop_app_appW4_wci_isReset$VAL ;
  assign WILL_FIRE_RL_ctop_stbConnect_4 = CAN_FIRE_RL_ctop_stbConnect_4 ;

  // rule RL_ctop_sFlagConnect_4
  assign CAN_FIRE_RL_ctop_sFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_4 = 1'd1 ;

  // rule RL_ctop_mCmdConnect_5
  assign CAN_FIRE_RL_ctop_mCmdConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_5 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_5
  assign CAN_FIRE_RL_ctop_mAddrSConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_5 = 1'd1 ;

  // rule RL_ctop_mBEConnect_5
  assign CAN_FIRE_RL_ctop_mBEConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect_5 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_5
  assign CAN_FIRE_RL_ctop_mAddrConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_5 = 1'd1 ;

  // rule RL_ctop_mDataConnect_5
  assign CAN_FIRE_RL_ctop_mDataConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_5 = 1'd1 ;

  // rule RL_ctop_sRespConnect_5
  assign CAN_FIRE_RL_ctop_sRespConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_5 = 1'd1 ;

  // rule RL_ctop_sDataConnect_5
  assign CAN_FIRE_RL_ctop_sDataConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_5 = 1'd1 ;

  // rule RL_ctop_stbConnect_5
  assign CAN_FIRE_RL_ctop_stbConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_stbConnect_5 = 1'd1 ;

  // rule RL_ctop_sFlagConnect_5
  assign CAN_FIRE_RL_ctop_sFlagConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_5 = 1'd1 ;

  // rule RL_ctop_mCmdConnect_6
  assign CAN_FIRE_RL_ctop_mCmdConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_6 = 1'd1 ;

  // rule RL_ctop_mCmdConnect_7
  assign CAN_FIRE_RL_ctop_mCmdConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_7 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_6
  assign CAN_FIRE_RL_ctop_mAddrSConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_6 = 1'd1 ;

  // rule RL_ctop_mBEConnect_6
  assign CAN_FIRE_RL_ctop_mBEConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect_6 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_6
  assign CAN_FIRE_RL_ctop_mAddrConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_6 = 1'd1 ;

  // rule RL_ctop_mDataConnect_6
  assign CAN_FIRE_RL_ctop_mDataConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_6 = 1'd1 ;

  // rule RL_ctop_sRespConnect_6
  assign CAN_FIRE_RL_ctop_sRespConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_6 = 1'd1 ;

  // rule RL_ctop_sDataConnect_6
  assign CAN_FIRE_RL_ctop_sDataConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_6 = 1'd1 ;

  // rule RL_ctop_stbConnect_6
  assign CAN_FIRE_RL_ctop_stbConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_stbConnect_6 = 1'd1 ;

  // rule RL_ctop_sFlagConnect_6
  assign CAN_FIRE_RL_ctop_sFlagConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_6 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_7
  assign CAN_FIRE_RL_ctop_mAddrSConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_7 = 1'd1 ;

  // rule RL_ctop_mBEConnect_7
  assign CAN_FIRE_RL_ctop_mBEConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBEConnect_7 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_7
  assign CAN_FIRE_RL_ctop_mAddrConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_7 = 1'd1 ;

  // rule RL_ctop_mDataConnect_7
  assign CAN_FIRE_RL_ctop_mDataConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_7 = 1'd1 ;

  // rule RL_ctop_sDataConnect_7
  assign CAN_FIRE_RL_ctop_sDataConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_7 = 1'd1 ;

  // rule RL_ctop_sRespConnect_7
  assign CAN_FIRE_RL_ctop_sRespConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_7 = 1'd1 ;

  // rule RL_ctop_stbConnect_7
  assign CAN_FIRE_RL_ctop_stbConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_stbConnect_7 = 1'd1 ;

  // rule RL_ctop_sFlagConnect_7
  assign CAN_FIRE_RL_ctop_sFlagConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_7 = 1'd1 ;

  // rule RL_ctop_mCmdConnect_8
  assign CAN_FIRE_RL_ctop_mCmdConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_8 = 1'd1 ;

  // rule RL_ctop_mReqLConnect
  assign CAN_FIRE_RL_ctop_mReqLConnect = ctop_app_appW2_wmi_reqF_q_0[28] ;
  assign WILL_FIRE_RL_ctop_mReqLConnect = CAN_FIRE_RL_ctop_mReqLConnect ;

  // rule RL_ctop_mReqIConnect
  assign CAN_FIRE_RL_ctop_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mReqIConnect = 1'd1 ;

  // rule RL_ctop_mAddrConnect_8
  assign CAN_FIRE_RL_ctop_mAddrConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_8 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_8
  assign CAN_FIRE_RL_ctop_mAddrSConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_8 = 1'd1 ;

  // rule RL_ctop_mBurstLConnect
  assign CAN_FIRE_RL_ctop_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBurstLConnect = 1'd1 ;

  // rule RL_ctop_mDataVConnect
  assign CAN_FIRE_RL_ctop_mDataVConnect =
	     !ctop_app_appW2_wmi_sDataThreadBusy_d &&
	     ctop_app_appW2_wmi_dhF_q_0[37] ;
  assign WILL_FIRE_RL_ctop_mDataVConnect = CAN_FIRE_RL_ctop_mDataVConnect ;

  // rule RL_ctop_mDataLConnect
  assign CAN_FIRE_RL_ctop_mDataLConnect = ctop_app_appW2_wmi_dhF_q_0[36] ;
  assign WILL_FIRE_RL_ctop_mDataLConnect = CAN_FIRE_RL_ctop_mDataLConnect ;

  // rule RL_ctop_mDataConnect_8
  assign CAN_FIRE_RL_ctop_mDataConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_8 = 1'd1 ;

  // rule RL_ctop_mDataIConnect
  assign CAN_FIRE_RL_ctop_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataIConnect = 1'd1 ;

  // rule RL_ctop_sRespConnect_8
  assign CAN_FIRE_RL_ctop_sRespConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_8 = 1'd1 ;

  // rule RL_ctop_mDataBEConnect
  assign CAN_FIRE_RL_ctop_mDataBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataBEConnect = 1'd1 ;

  // rule RL_ctop_sDataConnect_8
  assign CAN_FIRE_RL_ctop_sDataConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_8 = 1'd1 ;

  // rule RL_ctop_mFlagConnect_8
  assign CAN_FIRE_RL_ctop_mFlagConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mFlagConnect_8 = 1'd1 ;

  // rule RL_ctop_mRstConnect
  assign CAN_FIRE_RL_ctop_mRstConnect =
	     !ctop_app_appW2_wmi_isReset$VAL && ctop_app_appW2_wmi_operateD ;
  assign WILL_FIRE_RL_ctop_mRstConnect = CAN_FIRE_RL_ctop_mRstConnect ;

  // rule RL_ctop_sRstConnect
  assign CAN_FIRE_RL_ctop_sRstConnect =
	     !ctop_inf_dp0_wmi_wmi_isReset$VAL &&
	     ctop_inf_dp0_wmi_wmi_operateD ;
  assign WILL_FIRE_RL_ctop_sRstConnect = CAN_FIRE_RL_ctop_sRstConnect ;

  // rule RL_ctop_mCmdConnect_9
  assign CAN_FIRE_RL_ctop_mCmdConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mCmdConnect_9 = 1'd1 ;

  // rule RL_ctop_mReqLConnect_1
  assign CAN_FIRE_RL_ctop_mReqLConnect_1 = ctop_app_appW4_wmi_reqF_q_0[28] ;
  assign WILL_FIRE_RL_ctop_mReqLConnect_1 = CAN_FIRE_RL_ctop_mReqLConnect_1 ;

  // rule RL_ctop_mReqIConnect_1
  assign CAN_FIRE_RL_ctop_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mReqIConnect_1 = 1'd1 ;

  // rule RL_ctop_mAddrSConnect_9
  assign CAN_FIRE_RL_ctop_mAddrSConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrSConnect_9 = 1'd1 ;

  // rule RL_ctop_mAddrConnect_9
  assign CAN_FIRE_RL_ctop_mAddrConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mAddrConnect_9 = 1'd1 ;

  // rule RL_ctop_mBurstLConnect_1
  assign CAN_FIRE_RL_ctop_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mBurstLConnect_1 = 1'd1 ;

  // rule RL_ctop_mDataLConnect_1
  assign CAN_FIRE_RL_ctop_mDataLConnect_1 = ctop_app_appW4_wmi_dhF_q_0[36] ;
  assign WILL_FIRE_RL_ctop_mDataLConnect_1 =
	     CAN_FIRE_RL_ctop_mDataLConnect_1 ;

  // rule RL_ctop_mDataVConnect_1
  assign CAN_FIRE_RL_ctop_mDataVConnect_1 =
	     !ctop_app_appW4_wmi_sDataThreadBusy_d &&
	     ctop_app_appW4_wmi_dhF_q_0[37] ;
  assign WILL_FIRE_RL_ctop_mDataVConnect_1 =
	     CAN_FIRE_RL_ctop_mDataVConnect_1 ;

  // rule RL_ctop_mDataConnect_9
  assign CAN_FIRE_RL_ctop_mDataConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataConnect_9 = 1'd1 ;

  // rule RL_ctop_mDataIConnect_1
  assign CAN_FIRE_RL_ctop_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataIConnect_1 = 1'd1 ;

  // rule RL_ctop_mDataBEConnect_1
  assign CAN_FIRE_RL_ctop_mDataBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mDataBEConnect_1 = 1'd1 ;

  // rule RL_ctop_sRespConnect_9
  assign CAN_FIRE_RL_ctop_sRespConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sRespConnect_9 = 1'd1 ;

  // rule RL_ctop_sDataConnect_9
  assign CAN_FIRE_RL_ctop_sDataConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sDataConnect_9 = 1'd1 ;

  // rule RL_ctop_mFlagConnect_9
  assign CAN_FIRE_RL_ctop_mFlagConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_mFlagConnect_9 = 1'd1 ;

  // rule RL_ctop_mRstConnect_1
  assign CAN_FIRE_RL_ctop_mRstConnect_1 =
	     !ctop_app_appW4_wmi_isReset$VAL && ctop_app_appW4_wmi_operateD ;
  assign WILL_FIRE_RL_ctop_mRstConnect_1 = CAN_FIRE_RL_ctop_mRstConnect_1 ;

  // rule RL_ctop_sRstConnect_1
  assign CAN_FIRE_RL_ctop_sRstConnect_1 =
	     !ctop_inf_dp1_wmi_wmi_isReset$VAL &&
	     ctop_inf_dp1_wmi_wmi_operateD ;
  assign WILL_FIRE_RL_ctop_sRstConnect_1 = CAN_FIRE_RL_ctop_sRstConnect_1 ;

  // rule RL_ctop_inf_mCmdConnect
  assign CAN_FIRE_RL_ctop_inf_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mCmdConnect = 1'd1 ;

  // rule RL_ctop_inf_mBEConnect
  assign CAN_FIRE_RL_ctop_inf_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mBEConnect = 1'd1 ;

  // rule RL_ctop_inf_mAddrSConnect
  assign CAN_FIRE_RL_ctop_inf_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mAddrSConnect = 1'd1 ;

  // rule RL_ctop_inf_mAddrConnect
  assign CAN_FIRE_RL_ctop_inf_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mAddrConnect = 1'd1 ;

  // rule RL_ctop_inf_mDataConnect
  assign CAN_FIRE_RL_ctop_inf_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mDataConnect = 1'd1 ;

  // rule RL_ctop_inf_sRespConnect
  assign CAN_FIRE_RL_ctop_inf_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_sRespConnect = 1'd1 ;

  // rule RL_ctop_inf_sDataConnect
  assign CAN_FIRE_RL_ctop_inf_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_sDataConnect = 1'd1 ;

  // rule RL_ctop_inf_mAddrConnect_1
  assign CAN_FIRE_RL_ctop_inf_mAddrConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mAddrConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_stbConnect
  assign CAN_FIRE_RL_ctop_inf_stbConnect =
	     ctop_inf_dp0_wci_reqF_countReg > 2'd1 ||
	     ctop_inf_dp0_wci_isReset$VAL ;
  assign WILL_FIRE_RL_ctop_inf_stbConnect = CAN_FIRE_RL_ctop_inf_stbConnect ;

  // rule RL_ctop_inf_sFlagConnect
  assign CAN_FIRE_RL_ctop_inf_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_sFlagConnect = 1'd1 ;

  // rule RL_ctop_inf_mCmdConnect_1
  assign CAN_FIRE_RL_ctop_inf_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mCmdConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_mAddrSConnect_1
  assign CAN_FIRE_RL_ctop_inf_mAddrSConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mAddrSConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_mBEConnect_1
  assign CAN_FIRE_RL_ctop_inf_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mBEConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_mDataConnect_1
  assign CAN_FIRE_RL_ctop_inf_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_mDataConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_sRespConnect_1
  assign CAN_FIRE_RL_ctop_inf_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_sRespConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_sDataConnect_1
  assign CAN_FIRE_RL_ctop_inf_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_sDataConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_stbConnect_1
  assign CAN_FIRE_RL_ctop_inf_stbConnect_1 =
	     ctop_inf_dp1_wci_reqF_countReg > 2'd1 ||
	     ctop_inf_dp1_wci_isReset$VAL ;
  assign WILL_FIRE_RL_ctop_inf_stbConnect_1 =
	     CAN_FIRE_RL_ctop_inf_stbConnect_1 ;

  // rule RL_ctop_inf_sFlagConnect_1
  assign CAN_FIRE_RL_ctop_inf_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_sFlagConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_stbConnect_2
  assign CAN_FIRE_RL_ctop_inf_stbConnect_2 = ctop_inf_dp0_wti_isReset$VAL ;
  assign WILL_FIRE_RL_ctop_inf_stbConnect_2 = ctop_inf_dp0_wti_isReset$VAL ;

  // rule RL_ctop_inf_stbConnect_3
  assign CAN_FIRE_RL_ctop_inf_stbConnect_3 = ctop_inf_dp1_wti_isReset$VAL ;
  assign WILL_FIRE_RL_ctop_inf_stbConnect_3 = ctop_inf_dp1_wti_isReset$VAL ;

  // rule RL_ctop_inf_ClientServerRequest
  assign CAN_FIRE_RL_ctop_inf_ClientServerRequest =
	     ctop_inf_sm0$RDY_c0_request_get &&
	     ctop_inf_cp$RDY_server_request_put ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerRequest =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest ;

  // rule RL_ctop_inf_ClientServerResponse
  assign CAN_FIRE_RL_ctop_inf_ClientServerResponse =
	     ctop_inf_sm0$RDY_c0_response_put &&
	     ctop_inf_cp$RDY_server_response_get ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerResponse =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse ;

  // rule RL_ctop_inf_ClientServerRequest_1
  assign CAN_FIRE_RL_ctop_inf_ClientServerRequest_1 =
	     ctop_inf_sm0$RDY_c1_request_get &&
	     ctop_inf_sm1$RDY_s_request_put ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerRequest_1 =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_1 ;

  // rule RL_ctop_inf_ClientServerResponse_1
  assign CAN_FIRE_RL_ctop_inf_ClientServerResponse_1 =
	     ctop_inf_sm0$RDY_c1_response_put &&
	     ctop_inf_sm1$RDY_s_response_get ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerResponse_1 =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_1 ;

  // rule RL_ctop_inf_ClientServerRequest_2
  assign CAN_FIRE_RL_ctop_inf_ClientServerRequest_2 =
	     ctop_inf_dp0_tlp_inF$FULL_N && ctop_inf_sm1$RDY_c0_request_get ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerRequest_2 =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_2 ;

  // rule RL_ctop_inf_ClientServerResponse_2
  assign CAN_FIRE_RL_ctop_inf_ClientServerResponse_2 =
	     ctop_inf_dp0_tlp_outF$EMPTY_N &&
	     ctop_inf_sm1$RDY_c0_response_put ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerResponse_2 =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_2 ;

  // rule RL_ctop_inf_ClientServerRequest_3
  assign CAN_FIRE_RL_ctop_inf_ClientServerRequest_3 =
	     ctop_inf_sm1$RDY_c1_request_get &&
	     ctop_inf_sm2$RDY_s_request_put ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerRequest_3 =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_3 ;

  // rule RL_ctop_inf_ClientServerResponse_3
  assign CAN_FIRE_RL_ctop_inf_ClientServerResponse_3 =
	     ctop_inf_sm1$RDY_c1_response_put &&
	     ctop_inf_sm2$RDY_s_response_get ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerResponse_3 =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_3 ;

  // rule RL_ctop_inf_ClientServerRequest_4
  assign CAN_FIRE_RL_ctop_inf_ClientServerRequest_4 =
	     ctop_inf_dp1_tlp_inF$FULL_N && ctop_inf_sm2$RDY_c0_request_get ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerRequest_4 =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_4 ;

  // rule RL_ctop_inf_ClientServerResponse_4
  assign CAN_FIRE_RL_ctop_inf_ClientServerResponse_4 =
	     ctop_inf_dp1_tlp_outF$EMPTY_N &&
	     ctop_inf_sm2$RDY_c0_response_put ;
  assign WILL_FIRE_RL_ctop_inf_ClientServerResponse_4 =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_4 ;

  // rule RL_ctop_inf_chomp_rogue
  assign CAN_FIRE_RL_ctop_inf_chomp_rogue = ctop_inf_sm2$RDY_c1_request_get ;
  assign WILL_FIRE_RL_ctop_inf_chomp_rogue = ctop_inf_sm2$RDY_c1_request_get ;

  // rule RL_ctop_inf_dp0_rStart
  assign CAN_FIRE_RL_ctop_inf_dp0_rStart = ctop_inf_dp0_wmi_mesgStart ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rStart = ctop_inf_dp0_wmi_mesgStart ;

  // rule RL_ctop_inf_dp0_rDone
  assign CAN_FIRE_RL_ctop_inf_dp0_rDone = ctop_inf_dp0_wmi_mesgDone ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rDone = ctop_inf_dp0_wmi_mesgDone ;

  // rule RL_ctop_inf_dp0_rRdy
  assign CAN_FIRE_RL_ctop_inf_dp0_rRdy =
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rRdy = CAN_FIRE_RL_ctop_inf_dp0_rRdy ;

  // rule RL_ctop_inf_dp0_rStart_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rStart_1 = ctop_inf_dp0_tlp_remStart ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rStart_1 = ctop_inf_dp0_tlp_remStart ;

  // rule RL_ctop_inf_dp0_rDone_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rDone_1 = ctop_inf_dp0_tlp_remDone ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rDone_1 = ctop_inf_dp0_tlp_remDone ;

  // rule RL_ctop_inf_dp0_rRdy_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rRdy_1 =
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rRdy_1 = CAN_FIRE_RL_ctop_inf_dp0_rRdy_1 ;

  // rule RL_ctop_inf_dp0_rFRdy_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rFRdy_1 =
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rFRdy_1 =
	     CAN_FIRE_RL_ctop_inf_dp0_rFRdy_1 ;

  // rule RL_ctop_inf_dp0_rCredit_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rCredit_1 =
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rCredit_1 =
	     CAN_FIRE_RL_ctop_inf_dp0_rCredit_1 ;

  // rule RL_ctop_inf_dp0_assignControl
  assign CAN_FIRE_RL_ctop_inf_dp0_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_assignControl = 1'd1 ;

  // rule RL_ctop_inf_dp0_operating_actions
  assign CAN_FIRE_RL_ctop_inf_dp0_operating_actions =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lbar ;
  assign WILL_FIRE_RL_ctop_inf_dp0_operating_actions =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lbar ;

  // rule RL_ctop_inf_dp0_mkConnectionVtoAf
  assign CAN_FIRE_RL_ctop_inf_dp0_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_mkConnectionVtoAf = 1'd1 ;

  // rule RL_ctop_inf_reqConnect
  assign CAN_FIRE_RL_ctop_inf_reqConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_reqConnect = 1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterA_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterA_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_overRun =
	     ctop_inf_dp0_bram_serverAdapterA_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterB_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterB_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_overRun =
	     ctop_inf_dp0_bram_serverAdapterB_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterA_1_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_overRun =
	     ctop_inf_dp0_bram_serverAdapterA_1_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterB_1_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_overRun =
	     ctop_inf_dp0_bram_serverAdapterB_1_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterA_2_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_overRun =
	     ctop_inf_dp0_bram_serverAdapterA_2_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterB_2_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_overRun =
	     ctop_inf_dp0_bram_serverAdapterB_2_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterA_3_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_overRun =
	     ctop_inf_dp0_bram_serverAdapterA_3_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     (!ctop_inf_dp0_bram_serverAdapterB_3_s1[0] ||
	      ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     ctop_inf_dp0_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_overRun =
	     ctop_inf_dp0_bram_serverAdapterB_3_s1[1] &&
	     !ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_overRun ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     !ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp0_wci_request_decode
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_request_decode =
	     ctop_inf_dp0_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_request_decode =
	     ctop_inf_dp0_wci_reqF$EMPTY_N ;

  // rule RL_ctop_inf_dp0_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_inf_dp0_wci_respF_deq
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_respF_deq = 1'd1 ;

  // rule RL_ctop_inf_dp0_wci_cfrd
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_cfrd =
	     ctop_inf_dp0_wci_respF_c_r != 2'd2 &&
	     ctop_inf_dp0_wci_reqF$EMPTY_N &&
	     ctop_inf_dp0_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_cfrd &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp0_wci_ctl_op_start
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start =
	     ctop_inf_dp0_wci_reqF$EMPTY_N &&
	     ctop_inf_dp0_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp0_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta =
	     ctop_inf_dp0_tlp_mReqF$FULL_N &&
	     ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d725 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta ;

  // rule RL_ctop_inf_dp0_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg =
	     ctop_inf_dp0_tlp_mReqF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     ctop_inf_dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !ctop_inf_dp0_tlp_tlpRcvBusy &&
	     ctop_inf_dp0_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ;

  // rule RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead =
	     ctop_inf_dp0_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp0_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead ;

  // rule RL_ctop_inf_dp0_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp0_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp0_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody ;

  // rule RL_ctop_inf_dp0_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     !ctop_inf_dp0_tlp_tlpXmtBusy &&
	     !ctop_inf_dp0_tlp_xmtMetaInFlight &&
	     ctop_inf_dp0_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp0_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     ctop_inf_dp0_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp0_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     !ctop_inf_dp0_tlp_tlpXmtBusy &&
	     ctop_inf_dp0_tlp_tlpMetaSent &&
	     ctop_inf_dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp0_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPostSeqDwell =
	     ctop_inf_dp0_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPostSeqDwell ;

  // rule RL_ctop_inf_dp0_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd2 &&
	     !ctop_inf_dp0_tlp_tlpXmtBusy &&
	     ctop_inf_dp0_tlp_postSeqDwell == 4'd0 &&
	     ctop_inf_dp0_tlp_creditReady ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell ;

  // rule RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag =
	     ctop_inf_dp0_tlp_inF$EMPTY_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag ;

  // rule RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta =
	     ctop_inf_dp0_tlp_inF$EMPTY_N && ctop_inf_dp0_tlp_mReqF$FULL_N &&
	     ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d982 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp0_rBMeta_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rBMeta_1 = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader =
	     ctop_inf_dp0_tlp_inF$EMPTY_N && ctop_inf_dp0_tlp_mReqF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     ctop_inf_dp0_tlp_reqMesgInFlight &&
	     !ctop_inf_dp0_tlp_tlpRcvBusy &&
	     ctop_inf_dp0_tlp_pullTagMatch &&
	     !ctop_inf_dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp0_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody =
	     ctop_inf_dp0_tlp_inF$EMPTY_N && ctop_inf_dp0_tlp_mReqF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     ctop_inf_dp0_tlp_reqMesgInFlight &&
	     ctop_inf_dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp0_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d1112 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // rule RL_ctop_inf_dp0_rFFlow_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rFFlow_1 = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta =
	     ctop_inf_dp0_tlp_inF$EMPTY_N && ctop_inf_dp0_tlp_mReqF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_reqMetaBodyInFlight &&
	     !ctop_inf_dp0_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp0_tlp_tlpRcv
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv =
	     ctop_inf_dp0_tlp_inF$EMPTY_N &&
	     (ctop_inf_dp0_tlp_inF$D_OUT[152] ?
		ctop_inf_dp0_tlp_inF$D_OUT[110] ||
		ctop_inf_dp0_tlp_inF$D_OUT[125] ||
		ctop_inf_dp0_tlp_inF$D_OUT[124:120] != 5'b0 ||
		ctop_inf_dp0_tlp_mReqF$FULL_N :
		ctop_inf_dp0_tlp_inIgnorePkt ||
		ctop_inf_dp0_tlp_mReqF$FULL_N) &&
	     !ctop_inf_dp0_tlp_reqMetaInFlight &&
	     !ctop_inf_dp0_tlp_reqMesgInFlight &&
	     !ctop_inf_dp0_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta ;

  // rule RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody =
	     ctop_inf_dp0_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ;

  // rule RL_ctop_inf_dp0_rBMesg_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rBMesg_1 = 1'd1 ;

  // rule RL_ctop_inf_dp0_rFMesg_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rFMesg_1 = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d949 &&
	     ctop_inf_dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_ctop_inf_dp0_rFMeta_1
  assign CAN_FIRE_RL_ctop_inf_dp0_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rFMeta_1 = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     ctop_inf_dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !ctop_inf_dp0_tlp_tlpXmtBusy &&
	     !ctop_inf_dp0_tlp_reqMesgInFlight &&
	     ctop_inf_dp0_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp0_tlp_dataXmt_Header
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_tlp_mRespF$EMPTY_N &&
	     !ctop_inf_dp0_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead ;

  // rule RL_ctop_inf_dp0_tlp_dataXmt_Body
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body =
	     ctop_inf_dp0_tlp_outF$FULL_N &&
	     ctop_inf_dp0_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead ;

  // rule RL_ctop_inf_dp0_tlp_writeReq
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_writeReq =
	     ctop_inf_dp0_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp0_tlp_mReqF_RDY_deq__179_AND_IF_cto_ETC___d1195 &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_writeReq ;

  // rule RL_ctop_inf_dp0_tlp_writeData
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_writeData =
	     ctop_inf_dp0_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp0_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1229 ||
	      ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262) &&
	     IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1262 &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_writeData ;

  // rule RL_ctop_inf_dp0_tlp_read_FirstResp
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp =
	     ctop_inf_dp0_tlp_readReq$EMPTY_N &&
	     ctop_inf_dp0_tlp_mRespF$FULL_N &&
	     IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1469 &&
	     (ctop_inf_dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      ctop_inf_dp0_tlp_readReq$EMPTY_N) &&
	     !ctop_inf_dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp ;

  // rule RL_ctop_inf_dp0_tlp_read_NextResp
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp =
	     ctop_inf_dp0_tlp_readReq$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore_n_ETC___d1542 &&
	     ctop_inf_dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_tlp_read_FirstReq
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq =
	     ctop_inf_dp0_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp0_tlp_readReq$FULL_N &&
	     NOT_ctop_inf_dp0_tlp_mReqF_first__180_BITS_28__ETC___d1371 &&
	     !ctop_inf_dp0_tlp_readStarted &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq ;

  // rule RL_ctop_inf_dp0_tlp_read_NextReq
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq =
	     ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262 &&
	     ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263 &&
	     ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264 &&
	     ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265 &&
	     ctop_inf_dp0_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp0_tlp_readStarted &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterA_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterA_1_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterA_2_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterA_3_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_throttleWmi
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_throttleWmi = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_reqMetadata
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata =
	     ctop_inf_dp0_bram_serverAdapterB_cnt_56_SLT_3___d1736 &&
	     ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_SLT_3___d1737 &&
	     ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_SLT_3___d1738 &&
	     ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_SLT_3___d1739 &&
	     ctop_inf_dp0_dpControl[3:2] != 2'd1 &&
	     !ctop_inf_dp0_wmi_mesgMeta[128] &&
	     ctop_inf_dp0_wmi_mesgBufReady &&
	     !ctop_inf_dp0_wmi_metaBusy &&
	     ctop_inf_dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp0_wmi_doDwell
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_doDwell =
	     ctop_inf_dp0_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_doDwell =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doDwell ;

  // rule RL_ctop_inf_dp0_wmi_doWriteFinalize
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize =
	     ctop_inf_dp0_bram_serverAdapterB_cnt_56_SLT_3___d1736 &&
	     ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_SLT_3___d1737 &&
	     ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_SLT_3___d1738 &&
	     ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_SLT_3___d1739 &&
	     ctop_inf_dp0_wmi_wrFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp0_rBMeta
  assign CAN_FIRE_RL_ctop_inf_dp0_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rBMeta = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_doReadResp
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp =
	     ctop_inf_dp0_wmi_wmi_respF_c_r != 2'd2 &&
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     IF_ctop_inf_dp0_wmi_p4B_878_EQ_0_879_THEN_ctop_ETC___d1892 &&
	     ctop_inf_dp0_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;

  // rule RL_ctop_inf_dp0_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_req =
	     ctop_inf_dp0_wmi_wmi_reqF_levelsValid &&
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     !ctop_inf_dp0_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_req ;

  // rule RL_ctop_stbConnect_8
  assign CAN_FIRE_RL_ctop_stbConnect_8 =
	     !CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_req ||
	     ctop_inf_dp0_wmi_wmi_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_ctop_stbConnect_8 = CAN_FIRE_RL_ctop_stbConnect_8 ;

  // rule RL_ctop_inf_dp0_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_dh =
	     ctop_inf_dp0_wmi_wmi_dhF_levelsValid &&
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_dh ;

  // rule RL_ctop_sdtbConnect
  assign CAN_FIRE_RL_ctop_sdtbConnect =
	     !CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_dh ||
	     ctop_inf_dp0_wmi_wmi_sDataThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_ctop_sdtbConnect = CAN_FIRE_RL_ctop_sdtbConnect ;

  // rule RL_ctop_inf_dp0_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr =
	     ((ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp :
		ctop_inf_dp0_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp) &&
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp &&
	     !(ctop_inf_dp0_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr ;

  // rule RL_ctop_inf_dp0_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr =
	     ctop_inf_dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr ;

  // rule RL_ctop_inf_dp0_wmi_wmi_respF_both
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both =
	     ((ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp :
		ctop_inf_dp0_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp) &&
	     ctop_inf_dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both ;

  // rule RL_ctop_inf_dp0_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_EiI =
	     ctop_inf_dp0_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     ctop_inf_dp0_wci_cState == 3'd0 &&
	     ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_EiI ;

  // rule RL_ctop_inf_dp0_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_OrE =
	     ctop_inf_dp0_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_OrE ;

  // rule RL_ctop_inf_dp0_bml_cntLclStart
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_cntLclStart =
	     ctop_inf_dp0_wci_cState == 3'd2 && ctop_inf_dp0_bml_lclBufStart ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_cntLclStart =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_cntLclStart ;

  // rule RL_ctop_inf_dp0_bml_cntLclDone
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_cntLclDone =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_cntLclDone =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;

  // rule RL_ctop_inf_dp0_bml_cntRemStart
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_cntRemStart =
	     ctop_inf_dp0_wci_cState == 3'd2 && ctop_inf_dp0_bml_remStart ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_cntRemStart =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_cntRemStart ;

  // rule RL_ctop_inf_dp0_bml_cntRemDone
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_cntRemDone =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_cntRemDone =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;

  // rule RL_ctop_inf_dp0_bml_lbar
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lbar = ctop_inf_dp0_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lbar =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lbar ;

  // rule RL_ctop_inf_dp0_bml_lbcf
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lbcf =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lbar ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lbcf =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lbar ;

  // rule RL_ctop_inf_dp0_bml_fba
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_fba =
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_fba =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_fba ;

  // rule RL_ctop_inf_dp0_bml_lcredit
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lcredit =
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lcredit =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lcredit ;

  // rule RL_ctop_inf_dp0_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_remAdvance
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_remAdvance =
	     ctop_inf_dp0_wci_cState == 3'd2 && ctop_inf_dp0_bml_remDone ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_remAdvance &&
	     !WILL_FIRE_RL_ctop_inf_dp0_bml_crdAdvance ;

  // rule RL_ctop_inf_dp0_bml_remDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;

  // rule RL_ctop_inf_dp0_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp0_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleInc =
	     MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleInc =
	     MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_ctop_inf_dp0_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp0_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_crdAdvance
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_crdAdvance =
	     ctop_inf_dp0_wci_cState == 3'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd2 &&
	     ctop_inf_dp0_bml_remStart ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_crdAdvance =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_crdAdvance ;

  // rule RL_ctop_inf_dp0_bml_remStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_crdAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_crdAdvance ;

  // rule RL_ctop_inf_dp0_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp0_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_ctop_inf_dp0_wci_reqF_enq
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_reqF_enq =
	     ctop_inf_dp0_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_reqF_enq =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_reqF_enq ;

  // rule RL_ctop_inf_dp0_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq =
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     ctop_inf_dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq ;

  // rule RL_ctop_inf_dp0_wmi_getRequest
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_getRequest =
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     !ctop_inf_dp0_wmi_wmi_blockReq &&
	     ctop_inf_dp0_wmi_wmi_reqF$EMPTY_N &&
	     NOT_ctop_inf_dp0_wmi_wrActive_796_797_OR_NOT_c_ETC___d1806 &&
	     ctop_inf_dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;

  // rule RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq =
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     ctop_inf_dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     ctop_inf_dp0_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;

  // rule RL_ctop_inf_dp0_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF__updateLevelCounter =
	     MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_ctop_inf_dp0_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_reset =
	     MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_reset ;

  // rule RL_ctop_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset ;

  // rule RL_ctop_inf_dp0_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq =
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     ctop_inf_dp0_wmi_wmi_wmiDh$wget[37] ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq ;

  // rule RL_ctop_inf_dp0_wmi_doWriteReq
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq =
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     ctop_inf_dp0_wmi_wmi_dhF$EMPTY_N &&
	     IF_ctop_inf_dp0_wmi_addr_824_BITS_3_TO_2_825_E_ETC___d7577 &&
	     ctop_inf_dp0_wmi_wrActive ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp0_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF__updateLevelCounter =
	     MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_ctop_inf_dp0_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_reset =
	     MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_reset ;

  // rule RL_ctop_inf_dp1_rStart
  assign CAN_FIRE_RL_ctop_inf_dp1_rStart = ctop_inf_dp1_wmi_mesgStart ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rStart = ctop_inf_dp1_wmi_mesgStart ;

  // rule RL_ctop_inf_dp1_rDone
  assign CAN_FIRE_RL_ctop_inf_dp1_rDone = ctop_inf_dp1_wmi_mesgDone ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rDone = ctop_inf_dp1_wmi_mesgDone ;

  // rule RL_ctop_inf_dp1_rRdy
  assign CAN_FIRE_RL_ctop_inf_dp1_rRdy =
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rRdy = CAN_FIRE_RL_ctop_inf_dp1_rRdy ;

  // rule RL_ctop_inf_dp1_rStart_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rStart_1 = ctop_inf_dp1_tlp_remStart ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rStart_1 = ctop_inf_dp1_tlp_remStart ;

  // rule RL_ctop_inf_dp1_rDone_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rDone_1 = ctop_inf_dp1_tlp_remDone ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rDone_1 = ctop_inf_dp1_tlp_remDone ;

  // rule RL_ctop_inf_dp1_rRdy_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rRdy_1 =
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rRdy_1 = CAN_FIRE_RL_ctop_inf_dp1_rRdy_1 ;

  // rule RL_ctop_inf_dp1_rFRdy_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rFRdy_1 =
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rFRdy_1 =
	     CAN_FIRE_RL_ctop_inf_dp1_rFRdy_1 ;

  // rule RL_ctop_inf_dp1_rCredit_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rCredit_1 =
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rCredit_1 =
	     CAN_FIRE_RL_ctop_inf_dp1_rCredit_1 ;

  // rule RL_ctop_inf_dp1_assignControl
  assign CAN_FIRE_RL_ctop_inf_dp1_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_assignControl = 1'd1 ;

  // rule RL_ctop_inf_dp1_operating_actions
  assign CAN_FIRE_RL_ctop_inf_dp1_operating_actions =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lbar ;
  assign WILL_FIRE_RL_ctop_inf_dp1_operating_actions =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lbar ;

  // rule RL_ctop_inf_dp1_mkConnectionVtoAf
  assign CAN_FIRE_RL_ctop_inf_dp1_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_mkConnectionVtoAf = 1'd1 ;

  // rule RL_ctop_inf_reqConnect_1
  assign CAN_FIRE_RL_ctop_inf_reqConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_reqConnect_1 = 1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterA_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterA_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_overRun =
	     ctop_inf_dp1_bram_serverAdapterA_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterB_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterB_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_overRun =
	     ctop_inf_dp1_bram_serverAdapterB_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterA_1_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_overRun =
	     ctop_inf_dp1_bram_serverAdapterA_1_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterB_1_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_overRun =
	     ctop_inf_dp1_bram_serverAdapterB_1_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterA_2_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_overRun =
	     ctop_inf_dp1_bram_serverAdapterA_2_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterB_2_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_overRun =
	     ctop_inf_dp1_bram_serverAdapterB_2_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterA_3_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_overRun =
	     ctop_inf_dp1_bram_serverAdapterA_3_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     (!ctop_inf_dp1_bram_serverAdapterB_3_s1[0] ||
	      ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     ctop_inf_dp1_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_overRun =
	     ctop_inf_dp1_bram_serverAdapterB_3_s1[1] &&
	     !ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_overRun ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     !ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_ctop_inf_dp1_wci_request_decode
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_request_decode =
	     ctop_inf_dp1_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_request_decode =
	     ctop_inf_dp1_wci_reqF$EMPTY_N ;

  // rule RL_ctop_inf_dp1_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_inf_dp1_wci_respF_deq
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_respF_deq = 1'd1 ;

  // rule RL_ctop_inf_dp1_wci_cfrd
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_cfrd =
	     ctop_inf_dp1_wci_respF_c_r != 2'd2 &&
	     ctop_inf_dp1_wci_reqF$EMPTY_N &&
	     ctop_inf_dp1_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_cfrd &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp1_wci_ctl_op_start
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start =
	     ctop_inf_dp1_wci_reqF$EMPTY_N &&
	     ctop_inf_dp1_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp1_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta =
	     ctop_inf_dp1_tlp_mReqF$FULL_N &&
	     ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d2917 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_ctop_inf_dp1_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg =
	     ctop_inf_dp1_tlp_mReqF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     ctop_inf_dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !ctop_inf_dp1_tlp_tlpRcvBusy &&
	     ctop_inf_dp1_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead =
	     ctop_inf_dp1_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp1_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead ;

  // rule RL_ctop_inf_dp1_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp1_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp1_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody ;

  // rule RL_ctop_inf_dp1_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     !ctop_inf_dp1_tlp_tlpXmtBusy &&
	     !ctop_inf_dp1_tlp_xmtMetaInFlight &&
	     ctop_inf_dp1_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp1_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     ctop_inf_dp1_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp1_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     !ctop_inf_dp1_tlp_tlpXmtBusy &&
	     ctop_inf_dp1_tlp_tlpMetaSent &&
	     ctop_inf_dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_ctop_inf_dp1_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPostSeqDwell =
	     ctop_inf_dp1_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPostSeqDwell ;

  // rule RL_ctop_inf_dp1_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd2 &&
	     !ctop_inf_dp1_tlp_tlpXmtBusy &&
	     ctop_inf_dp1_tlp_postSeqDwell == 4'd0 &&
	     ctop_inf_dp1_tlp_creditReady ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell ;

  // rule RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag =
	     ctop_inf_dp1_tlp_inF$EMPTY_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag ;

  // rule RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta =
	     ctop_inf_dp1_tlp_inF$EMPTY_N && ctop_inf_dp1_tlp_mReqF$FULL_N &&
	     ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3168 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp1_rBMeta_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rBMeta_1 = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader =
	     ctop_inf_dp1_tlp_inF$EMPTY_N && ctop_inf_dp1_tlp_mReqF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     ctop_inf_dp1_tlp_reqMesgInFlight &&
	     !ctop_inf_dp1_tlp_tlpRcvBusy &&
	     ctop_inf_dp1_tlp_pullTagMatch &&
	     !ctop_inf_dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp1_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody =
	     ctop_inf_dp1_tlp_inF$EMPTY_N && ctop_inf_dp1_tlp_mReqF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     ctop_inf_dp1_tlp_reqMesgInFlight &&
	     ctop_inf_dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp1_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3298 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // rule RL_ctop_inf_dp1_rFFlow_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rFFlow_1 = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta =
	     ctop_inf_dp1_tlp_inF$EMPTY_N && ctop_inf_dp1_tlp_mReqF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_reqMetaBodyInFlight &&
	     !ctop_inf_dp1_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp1_tlp_tlpRcv
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv =
	     ctop_inf_dp1_tlp_inF$EMPTY_N &&
	     (ctop_inf_dp1_tlp_inF$D_OUT[152] ?
		ctop_inf_dp1_tlp_inF$D_OUT[110] ||
		ctop_inf_dp1_tlp_inF$D_OUT[125] ||
		ctop_inf_dp1_tlp_inF$D_OUT[124:120] != 5'b0 ||
		ctop_inf_dp1_tlp_mReqF$FULL_N :
		ctop_inf_dp1_tlp_inIgnorePkt ||
		ctop_inf_dp1_tlp_mReqF$FULL_N) &&
	     !ctop_inf_dp1_tlp_reqMetaInFlight &&
	     !ctop_inf_dp1_tlp_reqMesgInFlight &&
	     !ctop_inf_dp1_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody =
	     ctop_inf_dp1_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_ctop_inf_dp1_rBMesg_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rBMesg_1 = 1'd1 ;

  // rule RL_ctop_inf_dp1_rFMesg_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rFMesg_1 = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3137 &&
	     ctop_inf_dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta ;

  // rule RL_ctop_inf_dp1_rFMeta_1
  assign CAN_FIRE_RL_ctop_inf_dp1_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rFMeta_1 = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     ctop_inf_dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !ctop_inf_dp1_tlp_tlpXmtBusy &&
	     !ctop_inf_dp1_tlp_reqMesgInFlight &&
	     ctop_inf_dp1_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_ctop_inf_dp1_tlp_dataXmt_Header
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_tlp_mRespF$EMPTY_N &&
	     !ctop_inf_dp1_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_ctop_inf_dp1_tlp_dataXmt_Body
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body =
	     ctop_inf_dp1_tlp_outF$FULL_N &&
	     ctop_inf_dp1_tlp_mRespF$EMPTY_N &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[138] &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_ctop_inf_dp1_tlp_writeReq
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_writeReq =
	     ctop_inf_dp1_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp1_tlp_mReqF_RDY_deq__365_AND_IF_cto_ETC___d3381 &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_writeReq ;

  // rule RL_ctop_inf_dp1_tlp_writeData
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_writeData =
	     ctop_inf_dp1_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp1_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3415 ||
	      ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266) &&
	     IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3448 &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_writeData ;

  // rule RL_ctop_inf_dp1_tlp_read_FirstResp
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp =
	     ctop_inf_dp1_tlp_readReq$EMPTY_N &&
	     ctop_inf_dp1_tlp_mRespF$FULL_N &&
	     IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3655 &&
	     (ctop_inf_dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      ctop_inf_dp1_tlp_readReq$EMPTY_N) &&
	     !ctop_inf_dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp ;

  // rule RL_ctop_inf_dp1_tlp_read_NextResp
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp =
	     ctop_inf_dp1_tlp_readReq$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore_n_ETC___d3728 &&
	     ctop_inf_dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_tlp_read_FirstReq
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq =
	     ctop_inf_dp1_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp1_tlp_readReq$FULL_N &&
	     NOT_ctop_inf_dp1_tlp_mReqF_first__366_BITS_28__ETC___d3557 &&
	     !ctop_inf_dp1_tlp_readStarted &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq ;

  // rule RL_ctop_inf_dp1_tlp_read_NextReq
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq =
	     ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266 &&
	     ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267 &&
	     ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534 &&
	     ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268 &&
	     ctop_inf_dp1_tlp_mReqF$EMPTY_N &&
	     ctop_inf_dp1_tlp_readStarted &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterA_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterA_1_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterA_2_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterA_3_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_throttleWmi
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_throttleWmi = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_reqMetadata
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata =
	     ctop_inf_dp1_bram_serverAdapterB_cnt_349_SLT_3___d3922 &&
	     ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_SLT_3___d3923 &&
	     ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_SLT_3___d3924 &&
	     ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_SLT_3___d3925 &&
	     ctop_inf_dp1_dpControl[3:2] != 2'd1 &&
	     !ctop_inf_dp1_wmi_mesgMeta[128] &&
	     ctop_inf_dp1_wmi_mesgBufReady &&
	     !ctop_inf_dp1_wmi_metaBusy &&
	     ctop_inf_dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp1_wmi_doDwell
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_doDwell =
	     ctop_inf_dp1_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_doDwell =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doDwell ;

  // rule RL_ctop_inf_dp1_wmi_doWriteFinalize
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize =
	     ctop_inf_dp1_bram_serverAdapterB_cnt_349_SLT_3___d3922 &&
	     ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_SLT_3___d3923 &&
	     ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_SLT_3___d3924 &&
	     ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_SLT_3___d3925 &&
	     ctop_inf_dp1_wmi_wrFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp1_rBMeta
  assign CAN_FIRE_RL_ctop_inf_dp1_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rBMeta = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_doReadResp
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp =
	     ctop_inf_dp1_wmi_wmi_respF_c_r != 2'd2 &&
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     IF_ctop_inf_dp1_wmi_p4B_064_EQ_0_065_THEN_ctop_ETC___d4078 &&
	     ctop_inf_dp1_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;

  // rule RL_ctop_inf_dp1_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_req =
	     ctop_inf_dp1_wmi_wmi_reqF_levelsValid &&
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     !ctop_inf_dp1_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_req ;

  // rule RL_ctop_stbConnect_9
  assign CAN_FIRE_RL_ctop_stbConnect_9 =
	     !CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_req ||
	     ctop_inf_dp1_wmi_wmi_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_ctop_stbConnect_9 = CAN_FIRE_RL_ctop_stbConnect_9 ;

  // rule RL_ctop_inf_dp1_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_dh =
	     ctop_inf_dp1_wmi_wmi_dhF_levelsValid &&
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_dh ;

  // rule RL_ctop_sdtbConnect_1
  assign CAN_FIRE_RL_ctop_sdtbConnect_1 =
	     !CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_dh ||
	     ctop_inf_dp1_wmi_wmi_sDataThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_ctop_sdtbConnect_1 = CAN_FIRE_RL_ctop_sdtbConnect_1 ;

  // rule RL_ctop_inf_dp1_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr =
	     ((ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp :
		ctop_inf_dp1_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp) &&
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp &&
	     !(ctop_inf_dp1_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr ;

  // rule RL_ctop_inf_dp1_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr =
	     ctop_inf_dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr ;

  // rule RL_ctop_inf_dp1_wmi_wmi_respF_both
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both =
	     ((ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp :
		ctop_inf_dp1_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp) &&
	     ctop_inf_dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both ;

  // rule RL_ctop_inf_dp1_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_EiI =
	     ctop_inf_dp1_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     ctop_inf_dp1_wci_cState == 3'd0 &&
	     ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_EiI ;

  // rule RL_ctop_inf_dp1_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_OrE =
	     ctop_inf_dp1_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_OrE ;

  // rule RL_ctop_inf_dp1_bml_cntLclStart
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_cntLclStart =
	     ctop_inf_dp1_wci_cState == 3'd2 && ctop_inf_dp1_bml_lclBufStart ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_cntLclStart =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_cntLclStart ;

  // rule RL_ctop_inf_dp1_bml_cntLclDone
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_cntLclDone =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_cntLclDone =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;

  // rule RL_ctop_inf_dp1_bml_cntRemStart
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_cntRemStart =
	     ctop_inf_dp1_wci_cState == 3'd2 && ctop_inf_dp1_bml_remStart ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_cntRemStart =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_cntRemStart ;

  // rule RL_ctop_inf_dp1_bml_cntRemDone
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_cntRemDone =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_cntRemDone =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;

  // rule RL_ctop_inf_dp1_bml_lbar
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lbar = ctop_inf_dp1_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lbar =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lbar ;

  // rule RL_ctop_inf_dp1_bml_lbcf
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lbcf =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lbar ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lbcf =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lbar ;

  // rule RL_ctop_inf_dp1_bml_fba
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_fba =
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_fba =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_fba ;

  // rule RL_ctop_inf_dp1_bml_lcredit
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lcredit =
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lcredit =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lcredit ;

  // rule RL_ctop_inf_dp1_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_remAdvance
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_remAdvance =
	     ctop_inf_dp1_wci_cState == 3'd2 && ctop_inf_dp1_bml_remDone ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_remAdvance &&
	     !WILL_FIRE_RL_ctop_inf_dp1_bml_crdAdvance ;

  // rule RL_ctop_inf_dp1_bml_remDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;

  // rule RL_ctop_inf_dp1_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp1_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleInc =
	     MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleInc =
	     MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_ctop_inf_dp1_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp1_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_crdAdvance
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_crdAdvance =
	     ctop_inf_dp1_wci_cState == 3'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd2 &&
	     ctop_inf_dp1_bml_remStart ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_crdAdvance =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_crdAdvance ;

  // rule RL_ctop_inf_dp1_bml_remStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_crdAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_crdAdvance ;

  // rule RL_ctop_inf_dp1_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp1_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_ctop_inf_dp1_wci_reqF_enq
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_reqF_enq =
	     ctop_inf_dp1_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_reqF_enq =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_reqF_enq ;

  // rule RL_ctop_inf_dp1_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq =
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     ctop_inf_dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq ;

  // rule RL_ctop_inf_dp1_wmi_getRequest
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_getRequest =
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     !ctop_inf_dp1_wmi_wmi_blockReq &&
	     ctop_inf_dp1_wmi_wmi_reqF$EMPTY_N &&
	     NOT_ctop_inf_dp1_wmi_wrActive_982_983_OR_NOT_c_ETC___d3992 &&
	     ctop_inf_dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;

  // rule RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq =
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     ctop_inf_dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     ctop_inf_dp1_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // rule RL_ctop_inf_dp1_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF__updateLevelCounter =
	     MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_ctop_inf_dp1_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_reset =
	     MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_reset ;

  // rule RL_ctop_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset ;

  // rule RL_ctop_inf_dp1_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq =
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     ctop_inf_dp1_wmi_wmi_wmiDh$wget[37] ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq ;

  // rule RL_ctop_inf_dp1_wmi_doWriteReq
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq =
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     ctop_inf_dp1_wmi_wmi_dhF$EMPTY_N &&
	     IF_ctop_inf_dp1_wmi_addr_010_BITS_3_TO_2_011_E_ETC___d7567 &&
	     ctop_inf_dp1_wmi_wrActive ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp1_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF__updateLevelCounter =
	     MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_ctop_inf_dp1_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_reset =
	     MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_reset ;

  // rule RL_ctop_inf_itc0_send_time
  assign CAN_FIRE_RL_ctop_inf_itc0_send_time = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_itc0_send_time = 1'd1 ;

  // rule RL_ctop_inf_itc0_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_inf_itc0_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_itc0_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_inf_itc1_send_time
  assign CAN_FIRE_RL_ctop_inf_itc1_send_time = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_itc1_send_time = 1'd1 ;

  // rule RL_ctop_inf_itc1_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_inf_itc1_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_itc1_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_app_mCmdConnect
  assign CAN_FIRE_RL_ctop_app_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mCmdConnect = 1'd1 ;

  // rule RL_ctop_app_mReqLConnect
  assign CAN_FIRE_RL_ctop_app_mReqLConnect =
	     !ctop_app_appW2_wsiM_sThreadBusy_d &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_ctop_app_mReqLConnect =
	     CAN_FIRE_RL_ctop_app_mReqLConnect ;

  // rule RL_ctop_app_mBurstPConnect
  assign CAN_FIRE_RL_ctop_app_mBurstPConnect =
	     !ctop_app_appW2_wsiM_sThreadBusy_d &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_ctop_app_mBurstPConnect =
	     CAN_FIRE_RL_ctop_app_mBurstPConnect ;

  // rule RL_ctop_app_mBurstLConnect
  assign CAN_FIRE_RL_ctop_app_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mBurstLConnect = 1'd1 ;

  // rule RL_ctop_app_mDataConnect
  assign CAN_FIRE_RL_ctop_app_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mDataConnect = 1'd1 ;

  // rule RL_ctop_app_mByteEnConnect
  assign CAN_FIRE_RL_ctop_app_mByteEnConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mByteEnConnect = 1'd1 ;

  // rule RL_ctop_app_mReqIConnect
  assign CAN_FIRE_RL_ctop_app_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mReqIConnect = 1'd1 ;

  // rule RL_ctop_app_mDataIConnect
  assign CAN_FIRE_RL_ctop_app_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mDataIConnect = 1'd1 ;

  // rule RL_ctop_app_mRstConnect
  assign CAN_FIRE_RL_ctop_app_mRstConnect =
	     !ctop_app_appW2_wsiM_isReset$VAL &&
	     ctop_app_appW2_wsiM_operateD ;
  assign WILL_FIRE_RL_ctop_app_mRstConnect =
	     CAN_FIRE_RL_ctop_app_mRstConnect ;

  // rule RL_ctop_app_sRstConnect
  assign CAN_FIRE_RL_ctop_app_sRstConnect =
	     !ctop_app_appW3_wsiS_isReset$VAL &&
	     ctop_app_appW3_wsiS_operateD ;
  assign WILL_FIRE_RL_ctop_app_sRstConnect =
	     CAN_FIRE_RL_ctop_app_sRstConnect ;

  // rule RL_ctop_app_mCmdConnect_1
  assign CAN_FIRE_RL_ctop_app_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mCmdConnect_1 = 1'd1 ;

  // rule RL_ctop_app_mReqLConnect_1
  assign CAN_FIRE_RL_ctop_app_mReqLConnect_1 =
	     !ctop_app_appW3_wsiM_sThreadBusy_d &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_ctop_app_mReqLConnect_1 =
	     CAN_FIRE_RL_ctop_app_mReqLConnect_1 ;

  // rule RL_ctop_app_mBurstPConnect_1
  assign CAN_FIRE_RL_ctop_app_mBurstPConnect_1 =
	     !ctop_app_appW3_wsiM_sThreadBusy_d &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_ctop_app_mBurstPConnect_1 =
	     CAN_FIRE_RL_ctop_app_mBurstPConnect_1 ;

  // rule RL_ctop_app_mBurstLConnect_1
  assign CAN_FIRE_RL_ctop_app_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mBurstLConnect_1 = 1'd1 ;

  // rule RL_ctop_app_mDataConnect_1
  assign CAN_FIRE_RL_ctop_app_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mDataConnect_1 = 1'd1 ;

  // rule RL_ctop_app_mByteEnConnect_1
  assign CAN_FIRE_RL_ctop_app_mByteEnConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mByteEnConnect_1 = 1'd1 ;

  // rule RL_ctop_app_mReqIConnect_1
  assign CAN_FIRE_RL_ctop_app_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mReqIConnect_1 = 1'd1 ;

  // rule RL_ctop_app_mDataIConnect_1
  assign CAN_FIRE_RL_ctop_app_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_mDataIConnect_1 = 1'd1 ;

  // rule RL_ctop_app_mRstConnect_1
  assign CAN_FIRE_RL_ctop_app_mRstConnect_1 =
	     !ctop_app_appW3_wsiM_isReset$VAL &&
	     ctop_app_appW3_wsiM_operateD ;
  assign WILL_FIRE_RL_ctop_app_mRstConnect_1 =
	     CAN_FIRE_RL_ctop_app_mRstConnect_1 ;

  // rule RL_ctop_app_sRstConnect_1
  assign CAN_FIRE_RL_ctop_app_sRstConnect_1 =
	     !ctop_app_appW4_wsiS_isReset$VAL &&
	     ctop_app_appW4_wsiS_operateD ;
  assign WILL_FIRE_RL_ctop_app_sRstConnect_1 =
	     CAN_FIRE_RL_ctop_app_sRstConnect_1 ;

  // rule RL_ctop_app_appW2_operating_actions
  assign CAN_FIRE_RL_ctop_app_appW2_operating_actions =
	     ctop_app_appW2_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_ctop_app_appW2_operating_actions =
	     CAN_FIRE_RL_ctop_app_appW2_operating_actions ;

  // rule RL_ctop_app_appW2_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest =
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h9) &&
	     ctop_app_appW2_fabWordsRemain != 14'd0 &&
	     (ctop_app_appW2_fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     ctop_app_appW2_mesgReqOK ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ;

  // rule RL_ctop_app_appW2_wmrd_mesgBodyRequest
  assign CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest =
	     NOT_ctop_app_appW2_wmi_reqF_c_r_685_EQ_2_704_7_ETC___d5056 &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h9) &&
	     ctop_app_appW2_mesgPreRequest ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ;

  // rule RL_ctop_app_appW2_wci_request_decode
  assign CAN_FIRE_RL_ctop_app_appW2_wci_request_decode =
	     ctop_app_appW2_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_request_decode =
	     ctop_app_appW2_wci_reqF$EMPTY_N ;

  // rule RL_ctop_app_appW2_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_app_appW2_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_app_appW2_wci_respF_deq
  assign CAN_FIRE_RL_ctop_app_appW2_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_respF_deq = 1'd1 ;

  // rule RL_ctop_app_appW2_wci_ctl_op_start
  assign CAN_FIRE_RL_ctop_app_appW2_wci_ctl_op_start =
	     ctop_app_appW2_wci_reqF$EMPTY_N &&
	     ctop_app_appW2_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start =
	     CAN_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW2_wci_ctrl_EiI
  assign CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI =
	     ctop_app_appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     ctop_app_appW2_wci_cState == 3'd0 &&
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI =
	     CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI ;

  // rule RL_ctop_app_appW2_wci_ctrl_OrE
  assign CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE =
	     ctop_app_appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE =
	     CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE ;

  // rule RL_ctop_app_appW2_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wmi_reqF_deq
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_deq =
	     ctop_app_appW2_wmi_operateD && ctop_app_appW2_wmi_peerIsReady &&
	     !ctop_app_appW2_wmi_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_deq =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_deq ;

  // rule RL_ctop_app_appW2_wmi_dhF_deq
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_deq =
	     ctop_app_appW2_wmi_operateD && ctop_app_appW2_wmi_peerIsReady &&
	     !ctop_app_appW2_wmi_sDataThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_deq =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_deq ;

  // rule RL_ctop_app_appW2_wsiM_ext_status_assign
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_ctop_app_appW2_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_inc_tBusyCount =
	     ctop_app_appW2_wsiM_operateD &&
	     ctop_app_appW2_wsiM_peerIsReady &&
	     ctop_app_appW2_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_inc_tBusyCount ;

  // rule RL_ctop_app_appW2_wsiM_update_statusR
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_update_statusR = 1'd1 ;

  // rule RL_ctop_app_appW2_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq =
	     ctop_app_appW2_wsiM_reqFifo_c_r != 2'd0 &&
	     !ctop_app_appW2_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq ;

  // rule RL_ctop_app_appW2_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wsiS_backpressure
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_backpressure =
	     ctop_app_appW2_wsiS_reqFifo_levelsValid &&
	     ctop_app_appW2_wsiS_operateD &&
	     ctop_app_appW2_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_backpressure =
	     CAN_FIRE_RL_ctop_app_appW2_wsiS_backpressure ;

  // rule RL_ctop_app_appW2_wsiS_ext_status_assign
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_ctop_app_appW2_wci_cfrd
  assign CAN_FIRE_RL_ctop_app_appW2_wci_cfrd =
	     ctop_app_appW2_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW2_wci_reqF$EMPTY_N &&
	     ctop_app_appW2_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_cfrd =
	     CAN_FIRE_RL_ctop_app_appW2_wci_cfrd &&
	     !WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW2_wmrd_mesgBegin
  assign CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin =
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h9) &&
	     !ctop_app_appW2_wmi_sThreadBusy_d &&
	     !ctop_app_appW2_wmi_sDataThreadBusy_d &&
	     ctop_app_appW2_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ;

  // rule RL_ctop_sFlagConnect_8
  assign CAN_FIRE_RL_ctop_sFlagConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_8 = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_respMetadata
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_respMetadata =
	     ctop_inf_dp0_wmi_wmi_operateD &&
	     ctop_inf_dp0_wmi_wmi_peerIsReady &&
	     ctop_inf_dp0_wmi_dpControl_whas__723_AND_ctop__ETC___d1769 &&
	     ctop_inf_dp0_dpControl[3:2] != 2'd1 &&
	     !ctop_inf_dp0_wmi_mesgMeta[128] &&
	     ctop_inf_dp0_wmi_mesgBufReady &&
	     ctop_inf_dp0_wmi_metaBusy ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_respMetadata &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp0_wmi_doReadReq
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadReq =
	     IF_ctop_inf_dp0_wmi_addr_824_BITS_3_TO_2_825_E_ETC___d7577 &&
	     ctop_inf_dp0_wmi_rdActive ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp0_rBMesg
  assign CAN_FIRE_RL_ctop_inf_dp0_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_rBMesg = 1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterB_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterB_1_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterB_2_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     ctop_inf_dp0_bram_serverAdapterB_3_cnt_1$whas ||
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_ctop_inf_dp0_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_lclAdvance
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance =
	     ctop_inf_dp0_wci_cState == 3'd2 && ctop_inf_dp0_bml_lclBufDone ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lclAdvance =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;

  // rule RL_ctop_inf_dp0_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;

  // rule RL_ctop_inf_dp0_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp0_bml_initAccumulators
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_initAccumulators =
	     ctop_inf_dp0_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     ctop_inf_dp0_wci_cState == 3'd1 &&
	     ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // rule RL_ctop_inf_dp0_wci_cfwr
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_cfwr =
	     ctop_inf_dp0_wci_respF_c_r != 2'd2 &&
	     ctop_inf_dp0_wci_reqF$EMPTY_N &&
	     ctop_inf_dp0_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp0_wci_ctl_op_complete
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete =
	     ctop_inf_dp0_wci_respF_c_r != 2'd2 &&
	     ctop_inf_dp0_wci_ctlOpActive &&
	     ctop_inf_dp0_wci_ctlAckReg ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp0_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_reqF__updateLevelCounter =
	     (ctop_inf_dp0_wci_wciReq$wget[59:57] != 3'd0) !=
	     ctop_inf_dp0_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_reqF__updateLevelCounter ;

  // rule RL_ctop_inf_dp0_wci_respF_incCtr
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr =
	     ((ctop_inf_dp0_wci_respF_c_r == 2'd0) ?
		ctop_inf_dp0_wci_respF_x_wire$whas :
		ctop_inf_dp0_wci_respF_c_r != 2'd1 ||
		ctop_inf_dp0_wci_respF_x_wire$whas) &&
	     ctop_inf_dp0_wci_respF_enqueueing$whas &&
	     !(ctop_inf_dp0_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr ;

  // rule RL_ctop_inf_dp0_wci_respF_decCtr
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr =
	     ctop_inf_dp0_wci_respF_c_r != 2'd0 &&
	     !ctop_inf_dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr ;

  // rule RL_ctop_inf_dp0_wci_respF_both
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_respF_both =
	     ((ctop_inf_dp0_wci_respF_c_r == 2'd1) ?
		ctop_inf_dp0_wci_respF_x_wire$whas :
		ctop_inf_dp0_wci_respF_c_r != 2'd2 ||
		ctop_inf_dp0_wci_respF_x_wire$whas) &&
	     ctop_inf_dp0_wci_respF_c_r != 2'd0 &&
	     ctop_inf_dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_respF_both ;

  // rule RL_ctop_inf_dp0_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp0_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp0_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp0_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_inc_tBusyCount =
	     ctop_app_appW2_wsiS_operateD &&
	     ctop_app_appW2_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_ctop_app_appW2_wsiS_backpressure ||
	      ctop_app_appW2_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_ctop_app_appW2_wsiS_inc_tBusyCount ;

  // rule RL_ctop_app_appW2_wsiS_update_statusR
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_update_statusR = 1'd1 ;

  // rule RL_ctop_app_appW2_mesgPreRequest__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_mesgPreRequest__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_mesgPreRequest__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_respF_portB_read_data
  assign CAN_FIRE_RL_ctop_app_appW2_respF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_respF_portB_read_data = 1'd1 ;

  // rule RL_ctop_app_appW2_wmrd_mesgResptoWsi
  assign CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi =
	     ctop_app_appW2_wsiM_reqFifo_c_r != 2'd2 &&
	     ctop_app_appW2_respF_rRdPtr != ctop_app_appW2_respF_rWrPtr &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h9) ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi ;

  // rule RL_ctop_app_appW2_fabRespCredit_accumulate
  assign CAN_FIRE_RL_ctop_app_appW2_fabRespCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_fabRespCredit_accumulate = 1'd1 ;

  // rule RL_ctop_app_appW2_wci_ctrl_IsO
  assign CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO =
	     ctop_app_appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     ctop_app_appW2_wci_cState == 3'd1 &&
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO =
	     CAN_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO ;

  // rule RL_ctop_app_appW2_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_ctop_app_appW2_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_ctop_app_appW2_wci_reqF_enq
  assign CAN_FIRE_RL_ctop_app_appW2_wci_reqF_enq =
	     ctop_app_appW2_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_reqF_enq =
	     CAN_FIRE_RL_ctop_app_appW2_wci_reqF_enq ;

  // rule RL_ctop_app_appW2_wsi_Es_doAlways
  assign CAN_FIRE_RL_ctop_app_appW2_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsi_Es_doAlways = 1'd1 ;

  // rule RL_ctop_app_appW2_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_enq = 1'b0 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_enq = 1'b0 ;

  // rule RL_ctop_app_appW2_wsipass_doMessagePush
  assign CAN_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush =
	     ctop_app_appW2_wsiS_reqFifo$EMPTY_N &&
	     (ctop_app_appW2_smaCtrl[4] ||
	      ctop_app_appW2_wsiM_reqFifo_c_r != 2'd2) &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     ctop_app_appW2_smaCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush =
	     CAN_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush ;

  // rule RL_ctop_app_appW2_wmwt_messagePushPrecise
  assign CAN_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise =
	     ctop_app_appW2_wmi_dhF_c_r != 2'd2 &&
	     ctop_app_appW2_wmi_operateD_771_AND_ctop_app_a_ETC___d5151 &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW2_wsiWordsRemain != 12'd0 &&
	     ctop_app_appW2_mesgReqValid &&
	     ctop_app_appW2_preciseBurst ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise =
	     CAN_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW2_wmwt_requestPrecise
  assign CAN_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise =
	     ctop_app_appW2_wmi_reqF_c_r != 2'd2 &&
	     ctop_app_appW2_wmi_mFlagF_c_r != 2'd2 &&
	     ctop_app_appW2_wmi_operateD &&
	     ctop_app_appW2_wmi_peerIsReady &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW2_readyToRequest &&
	     ctop_app_appW2_preciseBurst ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise =
	     CAN_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise ;

  // rule RL_ctop_app_appW2_wmwt_mesgBegin
  assign CAN_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin =
	     ctop_app_appW2_wsiS_reqFifo$EMPTY_N &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h3) &&
	     !ctop_app_appW2_wmi_sThreadBusy_d &&
	     !ctop_app_appW2_wmi_sDataThreadBusy_d &&
	     !ctop_app_appW2_opcode[8] ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin =
	     CAN_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW2_wmwt_messagePushImprecise
  assign CAN_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise =
	     ctop_app_appW2_wmi_reqF_c_r != 2'd2 &&
	     ctop_app_appW2_wmi_dhF_c_r != 2'd2 &&
	     ctop_app_appW2_wmi_operateD &&
	     ctop_app_appW2_wmi_peerIsReady &&
	     ctop_app_appW2_wsiS_reqFifo_i_notEmpty__003_AN_ETC___d5170 &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW2_readyToPush &&
	     ctop_app_appW2_impreciseBurst ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise =
	     CAN_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW2_wmwt_doAbort
  assign CAN_FIRE_RL_ctop_app_appW2_wmwt_doAbort =
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW2_doAbort ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort =
	     CAN_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // rule RL_ctop_app_appW2_wmwt_messageFinalize
  assign CAN_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize =
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW2_mesgLength[14] &&
	     !ctop_app_appW2_doAbort &&
	     (ctop_app_appW2_preciseBurst &&
	      ctop_app_appW2_wsiWordsRemain == 12'd0 ||
	      ctop_app_appW2_impreciseBurst && ctop_app_appW2_endOfMessage) ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize =
	     CAN_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW2_wmi_reqF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr =
	     ((ctop_app_appW2_wmi_reqF_c_r == 2'd0) ?
		ctop_app_appW2_wmi_reqF_x_wire$whas :
		ctop_app_appW2_wmi_reqF_c_r != 2'd1 ||
		ctop_app_appW2_wmi_reqF_x_wire$whas) &&
	     ctop_app_appW2_wmi_reqF_enqueueing$whas &&
	     !ctop_app_appW2_wmi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr ;

  // rule RL_ctop_app_appW2_wmi_reqF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr =
	     ctop_app_appW2_wmi_reqF_dequeueing$whas &&
	     !ctop_app_appW2_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr ;

  // rule RL_ctop_app_appW2_wmi_reqF_both
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_both =
	     ((ctop_app_appW2_wmi_reqF_c_r == 2'd1) ?
		ctop_app_appW2_wmi_reqF_x_wire$whas :
		ctop_app_appW2_wmi_reqF_c_r != 2'd2 ||
		ctop_app_appW2_wmi_reqF_x_wire$whas) &&
	     ctop_app_appW2_wmi_reqF_dequeueing$whas &&
	     ctop_app_appW2_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_reqF_both ;

  // rule RL_ctop_app_appW2_wmi_mFlagF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr =
	     ((ctop_app_appW2_wmi_mFlagF_c_r == 2'd0) ?
		ctop_app_appW2_wmi_mFlagF_enqueueing$whas :
		ctop_app_appW2_wmi_mFlagF_c_r != 2'd1 ||
		ctop_app_appW2_wmi_mFlagF_enqueueing$whas) &&
	     ctop_app_appW2_wmi_mFlagF_enqueueing$whas &&
	     !ctop_app_appW2_wmi_mFlagF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr ;

  // rule RL_ctop_app_appW2_wmi_mFlagF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr =
	     ctop_app_appW2_wmi_mFlagF_dequeueing$whas &&
	     !ctop_app_appW2_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr ;

  // rule RL_ctop_app_appW2_wmi_mFlagF_both
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both =
	     ((ctop_app_appW2_wmi_mFlagF_c_r == 2'd1) ?
		ctop_app_appW2_wmi_mFlagF_enqueueing$whas :
		ctop_app_appW2_wmi_mFlagF_c_r != 2'd2 ||
		ctop_app_appW2_wmi_mFlagF_enqueueing$whas) &&
	     ctop_app_appW2_wmi_mFlagF_dequeueing$whas &&
	     ctop_app_appW2_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both ;

  // rule RL_ctop_app_appW2_wmi_dhF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr =
	     ((ctop_app_appW2_wmi_dhF_c_r == 2'd0) ?
		MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		ctop_app_appW2_wmi_dhF_c_r != 2'd1 ||
		MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     !ctop_app_appW2_wmi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr ;

  // rule RL_ctop_app_appW2_wmi_dhF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr =
	     ctop_app_appW2_wmi_dhF_dequeueing$whas &&
	     !MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr ;

  // rule RL_ctop_app_appW2_wmi_dhF_both
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_both =
	     ((ctop_app_appW2_wmi_dhF_c_r == 2'd1) ?
		MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		ctop_app_appW2_wmi_dhF_c_r != 2'd2 ||
		MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     ctop_app_appW2_wmi_dhF_dequeueing$whas &&
	     MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_dhF_both ;

  // rule RL_ctop_app_appW2_wmi_sThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_sThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_sThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wmi_sDataThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_sDataThreadBusy_d__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_sDataThreadBusy_d__dreg_update =
	     1'd1 ;

  // rule RL_ctop_app_appW2_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr =
	     ((ctop_app_appW2_wsiM_reqFifo_c_r == 2'd0) ?
		ctop_app_appW2_wsiM_reqFifo_enqueueing$whas :
		ctop_app_appW2_wsiM_reqFifo_c_r != 2'd1 ||
		ctop_app_appW2_wsiM_reqFifo_enqueueing$whas) &&
	     ctop_app_appW2_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr ;

  // rule RL_ctop_app_appW2_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq &&
	     !ctop_app_appW2_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr ;

  // rule RL_ctop_app_appW2_wsiM_reqFifo_both
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both =
	     ((ctop_app_appW2_wsiM_reqFifo_c_r == 2'd1) ?
		ctop_app_appW2_wsiM_reqFifo_enqueueing$whas :
		ctop_app_appW2_wsiM_reqFifo_c_r != 2'd2 ||
		ctop_app_appW2_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq &&
	     ctop_app_appW2_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both ;

  // rule RL_ctop_app_appW2_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo__updateLevelCounter =
	     1'b0 != ctop_app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_ctop_app_appW2_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_reset =
	     ctop_app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_reqFifo_reset =
	     ctop_app_appW2_wsiS_reqFifo_r_deq$whas ;

  // rule RL_ctop_app_appW2_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wmi_Em_doAlways
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_Em_doAlways = 1'd1 ;

  // rule RL_ctop_app_appW2_wmi_respAdvance
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_respAdvance =
	     ctop_app_appW2_wmi_operateD && ctop_app_appW2_wmi_peerIsReady &&
	     ctop_inf_dp0_wmi_wmi_respF_q_0[33:32] != 2'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_respAdvance =
	     CAN_FIRE_RL_ctop_app_appW2_wmi_respAdvance ;

  // rule RL_ctop_app_appW2_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse =
	     ctop_app_appW2_wmi_respF_i_notEmpty__068_AND_c_ETC___d5073 &&
	     ctop_app_appW2_wci_cState == 3'd2 &&
	     (ctop_app_appW2_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW2_smaCtrl[3:0] == 4'h9) &&
	     ctop_app_appW2_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse ;

  // rule RL_ctop_app_appW2_wci_cfwr
  assign CAN_FIRE_RL_ctop_app_appW2_wci_cfwr =
	     ctop_app_appW2_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW2_wci_reqF$EMPTY_N &&
	     ctop_app_appW2_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_cfwr =
	     CAN_FIRE_RL_ctop_app_appW2_wci_cfwr &&
	     !WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW2_wci_ctl_op_complete
  assign CAN_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete =
	     ctop_app_appW2_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW2_wci_ctlOpActive &&
	     ctop_app_appW2_wci_ctlAckReg ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete =
	     CAN_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW2_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_app_appW2_wci_reqF__updateLevelCounter =
	     (ctop_app_appW2_wci_wciReq$wget[59:57] != 3'd0) !=
	     ctop_app_appW2_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_app_appW2_wci_reqF__updateLevelCounter ;

  // rule RL_ctop_app_appW2_wci_respF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wci_respF_incCtr =
	     ((ctop_app_appW2_wci_respF_c_r == 2'd0) ?
		ctop_app_appW2_wci_respF_x_wire$whas :
		ctop_app_appW2_wci_respF_c_r != 2'd1 ||
		ctop_app_appW2_wci_respF_x_wire$whas) &&
	     ctop_app_appW2_wci_respF_enqueueing$whas &&
	     !(ctop_app_appW2_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wci_respF_incCtr ;

  // rule RL_ctop_app_appW2_wci_respF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW2_wci_respF_decCtr =
	     ctop_app_appW2_wci_respF_c_r != 2'd0 &&
	     !ctop_app_appW2_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW2_wci_respF_decCtr ;

  // rule RL_ctop_app_appW2_wci_respF_both
  assign CAN_FIRE_RL_ctop_app_appW2_wci_respF_both =
	     ((ctop_app_appW2_wci_respF_c_r == 2'd1) ?
		ctop_app_appW2_wci_respF_x_wire$whas :
		ctop_app_appW2_wci_respF_c_r != 2'd2 ||
		ctop_app_appW2_wci_respF_x_wire$whas) &&
	     ctop_app_appW2_wci_respF_c_r != 2'd0 &&
	     ctop_app_appW2_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_respF_both =
	     CAN_FIRE_RL_ctop_app_appW2_wci_respF_both ;

  // rule RL_ctop_app_appW2_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW2_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW2_respF_portA
  assign CAN_FIRE_RL_ctop_app_appW2_respF_portA = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_respF_portA = 1'd1 ;

  // rule RL_ctop_app_appW2_respF_portB
  assign CAN_FIRE_RL_ctop_app_appW2_respF_portB = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_respF_portB = 1'd1 ;

  // rule RL_ctop_app_appW3_rdSer_sync
  assign CAN_FIRE_RL_ctop_app_appW3_rdSer_sync =
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_rdSyncWord ;
  assign WILL_FIRE_RL_ctop_app_appW3_rdSer_sync =
	     CAN_FIRE_RL_ctop_app_appW3_rdSer_sync ;

  // rule RL_ctop_app_appW3_wci_request_decode
  assign CAN_FIRE_RL_ctop_app_appW3_wci_request_decode =
	     ctop_app_appW3_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_request_decode =
	     ctop_app_appW3_wci_reqF$EMPTY_N ;

  // rule RL_ctop_app_appW3_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_app_appW3_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_app_appW3_wci_respF_deq
  assign CAN_FIRE_RL_ctop_app_appW3_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_respF_deq = 1'd1 ;

  // rule RL_ctop_app_appW3_wci_ctl_op_start
  assign CAN_FIRE_RL_ctop_app_appW3_wci_ctl_op_start =
	     ctop_app_appW3_wci_reqF$EMPTY_N &&
	     ctop_app_appW3_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start =
	     CAN_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW3_wci_ctrl_EiI
  assign CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI =
	     ctop_app_appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     ctop_app_appW3_wci_cState == 3'd0 &&
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI =
	     CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI ;

  // rule RL_ctop_app_appW3_wci_ctrl_OrE
  assign CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE =
	     ctop_app_appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE =
	     CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE ;

  // rule RL_ctop_app_appW3_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiS_backpressure
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_backpressure =
	     ctop_app_appW3_wsiS_reqFifo_levelsValid &&
	     ctop_app_appW3_wsiS_operateD &&
	     ctop_app_appW3_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_backpressure =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_backpressure ;

  // rule RL_ctop_app_stbConnect
  assign CAN_FIRE_RL_ctop_app_stbConnect =
	     !CAN_FIRE_RL_ctop_app_appW3_wsiS_backpressure ||
	     ctop_app_appW3_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_ctop_app_stbConnect = CAN_FIRE_RL_ctop_app_stbConnect ;

  // rule RL_ctop_app_appW2_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_app_appW2_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW2_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiS_ext_status_assign
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_inc_tBusyCount =
	     ctop_app_appW3_wsiS_operateD &&
	     ctop_app_appW3_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_ctop_app_appW3_wsiS_backpressure ||
	      ctop_app_appW3_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_inc_tBusyCount ;

  // rule RL_ctop_app_appW3_wsiS_update_statusR
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_update_statusR = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiM_ext_status_assign
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_ctop_app_appW3_wci_cfrd
  assign CAN_FIRE_RL_ctop_app_appW3_wci_cfrd =
	     ctop_app_appW3_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW3_wci_reqF$EMPTY_N &&
	     ctop_app_appW3_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_cfrd =
	     CAN_FIRE_RL_ctop_app_appW3_wci_cfrd &&
	     !WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW3_wrtSer_begin
  assign CAN_FIRE_RL_ctop_app_appW3_wrtSer_begin =
	     ctop_app_appW3_metaWF$EMPTY_N &&
	     NOT_ctop_app_appW3_wrtSerPos_797_EQ_3_798_799__ETC___d5813 &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_wrtSerUnroll == 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin =
	     CAN_FIRE_RL_ctop_app_appW3_wrtSer_begin ;

  // rule RL_ctop_app_appW3_delay_write_req
  assign CAN_FIRE_RL_ctop_app_appW3_delay_write_req =
	     ctop_app_appW3_wmemi_reqF_c_r != 2'd2 &&
	     ctop_app_appW3_wmemi_dhF_c_r != 2'd2 &&
	     ctop_app_appW3_wmemi_operateD &&
	     ctop_app_appW3_wmemi_peerIsReady &&
	     ctop_app_appW3_wide16Fa$EMPTY_N &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_dlyWordsStored_value_724_SLE_0__ETC___d5879 &&
	     ctop_app_appW3_dlyWordsStored_value_724_SLT_83_ETC___d5881 ;
  assign WILL_FIRE_RL_ctop_app_appW3_delay_write_req =
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;

  // rule RL_ctop_app_appW3_operating_actions
  assign CAN_FIRE_RL_ctop_app_appW3_operating_actions =
	     ctop_app_appW3_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_ctop_app_appW3_operating_actions =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;

  // rule RL_ctop_app_appW3_delay_read_req
  assign CAN_FIRE_RL_ctop_app_appW3_delay_read_req =
	     ctop_app_appW3_wmemi_reqF_c_r != 2'd2 &&
	     ctop_app_appW3_wmemi_operateD &&
	     ctop_app_appW3_wmemi_peerIsReady &&
	     ctop_app_appW3_wci_cState_382_EQ_2_393_AND_cto_ETC___d5899 &&
	     (ctop_app_appW3_dlyReadCredit_value ^ 8'h80) > 8'd128 &&
	     ctop_app_appW3_wsiM_reqFifo_c_r != 2'd2 ;
  assign WILL_FIRE_RL_ctop_app_appW3_delay_read_req =
	     CAN_FIRE_RL_ctop_app_appW3_delay_read_req &&
	     !WILL_FIRE_RL_ctop_app_appW3_delay_write_req ;

  // rule RL_ctop_app_appW3_cycles_passed_count
  assign CAN_FIRE_RL_ctop_app_appW3_cycles_passed_count =
	     ctop_app_appW3_wsiS_statusR[0] ;
  assign WILL_FIRE_RL_ctop_app_appW3_cycles_passed_count =
	     CAN_FIRE_RL_ctop_app_appW3_cycles_passed_count ;

  // rule RL_ctop_app_appW3_delay_Fb2Fc
  assign CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc =
	     ctop_app_appW3_wide16Fc$FULL_N &&
	     ctop_app_appW3_wide16Fb$EMPTY_N &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_ctop_app_appW3_delay_Fb2Fc =
	     CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc ;

  // rule RL_ctop_app_appW3_rdSer_begin
  assign CAN_FIRE_RL_ctop_app_appW3_rdSer_begin =
	     ctop_app_appW3_metaRF_i_notFull__927_AND_NOT_c_ETC___d5938 &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_rdSerUnroll == 16'd0 &&
	     !ctop_app_appW3_rdSyncWord ;
  assign WILL_FIRE_RL_ctop_app_appW3_rdSer_begin =
	     CAN_FIRE_RL_ctop_app_appW3_rdSer_begin ;

  // rule RL_ctop_app_appW3_rdSer_body
  assign CAN_FIRE_RL_ctop_app_appW3_rdSer_body =
	     ctop_app_appW3_mesgRF_i_notFull__978_AND_NOT_c_ETC___d5979 &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_rdSerUnroll != 16'd0 &&
	     !ctop_app_appW3_rdSyncWord ;
  assign WILL_FIRE_RL_ctop_app_appW3_rdSer_body =
	     CAN_FIRE_RL_ctop_app_appW3_rdSer_body ;

  // rule RL_ctop_app_appW3_wmrd_mesgBegin
  assign CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin =
	     ctop_app_appW3_metaRF$EMPTY_N &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin =
	     CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin ;

  // rule RL_ctop_app_appW3_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse =
	     ctop_app_appW3_wsiM_reqFifo_c_r != 2'd2 &&
	     ctop_app_appW3_mesgRF$EMPTY_N &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse ;

  // rule RL_ctop_app_appW3_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_inc_tBusyCount =
	     ctop_app_appW3_wsiM_operateD &&
	     ctop_app_appW3_wsiM_peerIsReady &&
	     ctop_app_appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_inc_tBusyCount ;

  // rule RL_ctop_app_appW3_wsiM_update_statusR
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_update_statusR = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq =
	     ctop_app_appW3_wsiM_reqFifo_c_r != 2'd0 &&
	     !ctop_app_appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq ;

  // rule RL_ctop_app_appW3_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW3_wmemi_dhF_deq
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_deq = dram0$wmemiS_SDataAccept ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_deq =
	     dram0$wmemiS_SDataAccept ;

  // rule RL_ctop_app_appW3_wmemi_update_statusR
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_update_statusR = 1'd1 ;

  // rule RL_ctop_app_appW3_wmemi_reqF_deq
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_deq = dram0$wmemiS_SCmdAccept ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_deq =
	     dram0$wmemiS_SCmdAccept ;

  // rule RL_ctop_app_appW3_wmemi_reqF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr =
	     ((ctop_app_appW3_wmemi_reqF_c_r == 2'd0) ?
		ctop_app_appW3_wmemi_reqF_x_wire$whas :
		ctop_app_appW3_wmemi_reqF_c_r != 2'd1 ||
		ctop_app_appW3_wmemi_reqF_x_wire$whas) &&
	     ctop_app_appW3_wmemi_reqF_enqueueing$whas &&
	     !ctop_app_appW3_wmemi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr ;

  // rule RL_ctop_app_appW3_wmemi_reqF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr =
	     ctop_app_appW3_wmemi_reqF_dequeueing$whas &&
	     !ctop_app_appW3_wmemi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr ;

  // rule RL_ctop_app_appW3_wmemi_reqF_both
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_both =
	     ((ctop_app_appW3_wmemi_reqF_c_r == 2'd1) ?
		ctop_app_appW3_wmemi_reqF_x_wire$whas :
		ctop_app_appW3_wmemi_reqF_c_r != 2'd2 ||
		ctop_app_appW3_wmemi_reqF_x_wire$whas) &&
	     ctop_app_appW3_wmemi_reqF_dequeueing$whas &&
	     ctop_app_appW3_wmemi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both =
	     CAN_FIRE_RL_ctop_app_appW3_wmemi_reqF_both ;

  // rule RL_ctop_app_appW3_wmemi_dhF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr =
	     ((ctop_app_appW3_wmemi_dhF_c_r == 2'd0) ?
		CAN_FIRE_RL_ctop_app_appW3_delay_write_req :
		ctop_app_appW3_wmemi_dhF_c_r != 2'd1 ||
		CAN_FIRE_RL_ctop_app_appW3_delay_write_req) &&
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req &&
	     !ctop_app_appW3_wmemi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr ;

  // rule RL_ctop_app_appW3_wmemi_dhF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr =
	     ctop_app_appW3_wmemi_dhF_dequeueing$whas &&
	     !CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr ;

  // rule RL_ctop_app_appW3_wmemi_dhF_both
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_both =
	     ((ctop_app_appW3_wmemi_dhF_c_r == 2'd1) ?
		CAN_FIRE_RL_ctop_app_appW3_delay_write_req :
		ctop_app_appW3_wmemi_dhF_c_r != 2'd2 ||
		CAN_FIRE_RL_ctop_app_appW3_delay_write_req) &&
	     ctop_app_appW3_wmemi_dhF_dequeueing$whas &&
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both =
	     CAN_FIRE_RL_ctop_app_appW3_wmemi_dhF_both ;

  // rule RL_ctop_app_appW3_mesgWF_portB_read_data
  assign CAN_FIRE_RL_ctop_app_appW3_mesgWF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_mesgWF_portB_read_data = 1'd1 ;

  // rule RL_ctop_app_appW3_wrtSer_body
  assign CAN_FIRE_RL_ctop_app_appW3_wrtSer_body =
	     NOT_ctop_app_appW3_mesgWF_rRdPtr_711_EQ_ctop_a_ETC___d5839 &&
	     IF_ctop_app_appW3_wrtSerPos_797_EQ_0_805_OR_ct_ETC___d5850 &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     ctop_app_appW3_wrtSerUnroll != 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wrtSer_body =
	     CAN_FIRE_RL_ctop_app_appW3_wrtSer_body ;

  // rule RL_ctop_app_appW3_dlyWordsStored_accumulate
  assign CAN_FIRE_RL_ctop_app_appW3_dlyWordsStored_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_dlyWordsStored_accumulate = 1'd1 ;

  // rule RL_ctop_app_appW3_dlyReadCredit_accumulate
  assign CAN_FIRE_RL_ctop_app_appW3_dlyReadCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_dlyReadCredit_accumulate = 1'd1 ;

  // rule RL_ctop_app_appW3_dlyReadyToWrite_accumulate
  assign CAN_FIRE_RL_ctop_app_appW3_dlyReadyToWrite_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_dlyReadyToWrite_accumulate = 1'd1 ;

  // rule RL_ctop_app_appW3_wci_ctrl_IsO
  assign CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO =
	     ctop_app_appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     ctop_app_appW3_wci_cState == 3'd1 &&
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO =
	     CAN_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ;

  // rule RL_ctop_app_appW3_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_ctop_app_appW3_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_ctop_app_appW3_wci_reqF_enq
  assign CAN_FIRE_RL_ctop_app_appW3_wci_reqF_enq =
	     ctop_app_appW3_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_reqF_enq =
	     CAN_FIRE_RL_ctop_app_appW3_wci_reqF_enq ;

  // rule RL_ctop_app_appW3_wsi_Es_doAlways
  assign CAN_FIRE_RL_ctop_app_appW3_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsi_Es_doAlways = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq =
	     ctop_app_appW3_wsiS_operateD &&
	     ctop_app_appW3_wsiS_peerIsReady &&
	     ctop_app_appW3_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq ;

  // rule RL_ctop_app_appW3_wsipass_doMessagePush
  assign CAN_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush =
	     ctop_app_appW3_wsiM_reqFifo_c_r != 2'd2 &&
	     ctop_app_appW3_wsiS_reqFifo$EMPTY_N &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush =
	     CAN_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush ;

  // rule RL_ctop_app_appW3_wmwt_mesg_ingress
  assign CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress =
	     NOT_ctop_app_appW3_mesgWF_rRdPtr_711_PLUS_2048_ETC___d5769 &&
	     ctop_app_appW3_wsiS_reqFifo$EMPTY_N &&
	     (!ctop_app_appW3_wsiS_reqFifo$D_OUT[57] ||
	      ctop_app_appW3_metaWF$FULL_N) &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ;

  // rule RL_ctop_app_appW3_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo__updateLevelCounter =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 !=
	     ctop_app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_ctop_app_appW3_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_reset =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ||
	     ctop_app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_reset ;

  // rule RL_ctop_app_appW3_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW3_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr =
	     ((ctop_app_appW3_wsiM_reqFifo_c_r == 2'd0) ?
		ctop_app_appW3_wsiM_reqFifo_enqueueing$whas :
		ctop_app_appW3_wsiM_reqFifo_c_r != 2'd1 ||
		ctop_app_appW3_wsiM_reqFifo_enqueueing$whas) &&
	     ctop_app_appW3_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr ;

  // rule RL_ctop_app_appW3_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq &&
	     !ctop_app_appW3_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr ;

  // rule RL_ctop_app_appW3_wsiM_reqFifo_both
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both =
	     ((ctop_app_appW3_wsiM_reqFifo_c_r == 2'd1) ?
		ctop_app_appW3_wsiM_reqFifo_enqueueing$whas :
		ctop_app_appW3_wsiM_reqFifo_c_r != 2'd2 ||
		ctop_app_appW3_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq &&
	     ctop_app_appW3_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both ;

  // rule RL_ctop_app_appW3_mesgWF_portA
  assign CAN_FIRE_RL_ctop_app_appW3_mesgWF_portA = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_mesgWF_portA = 1'd1 ;

  // rule RL_ctop_app_appW3_mesgWF_portB
  assign CAN_FIRE_RL_ctop_app_appW3_mesgWF_portB = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_mesgWF_portB = 1'd1 ;

  // rule RL_ctop_app_appW3_wmemi_Em_doAlways
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_Em_doAlways = 1'd1 ;

  // rule RL_ctop_app_appW3_wmemi_respAdvance
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_respAdvance =
	     ctop_app_appW3_wmemi_operateD &&
	     ctop_app_appW3_wmemi_peerIsReady &&
	     ctop_app_appW3_wmemi_wmemiResponse$wget[130:129] != 2'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_respAdvance =
	     CAN_FIRE_RL_ctop_app_appW3_wmemi_respAdvance ;

  // rule RL_ctop_app_appW3_delay_read_resp
  assign CAN_FIRE_RL_ctop_app_appW3_delay_read_resp =
	     ctop_app_appW3_wmemi_respF$EMPTY_N &&
	     ctop_app_appW3_wide16Fb$FULL_N &&
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_ctop_app_appW3_delay_read_resp =
	     CAN_FIRE_RL_ctop_app_appW3_delay_read_resp ;

  // rule RL_ctop_app_appW3_wci_cfwr
  assign CAN_FIRE_RL_ctop_app_appW3_wci_cfwr =
	     ctop_app_appW3_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW3_wci_reqF$EMPTY_N &&
	     ctop_app_appW3_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_cfwr =
	     CAN_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	     !WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW3_wci_ctl_op_complete
  assign CAN_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete =
	     ctop_app_appW3_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW3_wci_ctlOpActive &&
	     ctop_app_appW3_wci_ctlAckReg ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete =
	     CAN_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW3_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_app_appW3_wci_reqF__updateLevelCounter =
	     (ctop_app_appW3_wci_wciReq$wget[59:57] != 3'd0) !=
	     ctop_app_appW3_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_app_appW3_wci_reqF__updateLevelCounter ;

  // rule RL_ctop_app_appW3_wci_respF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wci_respF_incCtr =
	     ((ctop_app_appW3_wci_respF_c_r == 2'd0) ?
		ctop_app_appW3_wci_respF_x_wire$whas :
		ctop_app_appW3_wci_respF_c_r != 2'd1 ||
		ctop_app_appW3_wci_respF_x_wire$whas) &&
	     ctop_app_appW3_wci_respF_enqueueing$whas &&
	     !(ctop_app_appW3_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wci_respF_incCtr ;

  // rule RL_ctop_app_appW3_wci_respF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW3_wci_respF_decCtr =
	     ctop_app_appW3_wci_respF_c_r != 2'd0 &&
	     !ctop_app_appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW3_wci_respF_decCtr ;

  // rule RL_ctop_app_appW3_wci_respF_both
  assign CAN_FIRE_RL_ctop_app_appW3_wci_respF_both =
	     ((ctop_app_appW3_wci_respF_c_r == 2'd1) ?
		ctop_app_appW3_wci_respF_x_wire$whas :
		ctop_app_appW3_wci_respF_c_r != 2'd2 ||
		ctop_app_appW3_wci_respF_x_wire$whas) &&
	     ctop_app_appW3_wci_respF_c_r != 2'd0 &&
	     ctop_app_appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_respF_both =
	     CAN_FIRE_RL_ctop_app_appW3_wci_respF_both ;

  // rule RL_ctop_app_appW3_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW3_wmemi_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW3_wmemi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW3_wmemi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wmemi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_operating_actions
  assign CAN_FIRE_RL_ctop_app_appW4_operating_actions =
	     ctop_app_appW4_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_ctop_app_appW4_operating_actions =
	     CAN_FIRE_RL_ctop_app_appW4_operating_actions ;

  // rule RL_ctop_app_appW4_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest =
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h9) &&
	     ctop_app_appW4_fabWordsRemain != 14'd0 &&
	     (ctop_app_appW4_fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     ctop_app_appW4_mesgReqOK ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ;

  // rule RL_ctop_app_appW4_wmrd_mesgBodyRequest
  assign CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest =
	     NOT_ctop_app_appW4_wmi_reqF_c_r_321_EQ_2_339_3_ETC___d6688 &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h9) &&
	     ctop_app_appW4_mesgPreRequest ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ;

  // rule RL_ctop_app_appW4_wci_request_decode
  assign CAN_FIRE_RL_ctop_app_appW4_wci_request_decode =
	     ctop_app_appW4_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_request_decode =
	     ctop_app_appW4_wci_reqF$EMPTY_N ;

  // rule RL_ctop_app_appW4_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_app_appW4_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_app_appW4_wci_respF_deq
  assign CAN_FIRE_RL_ctop_app_appW4_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_respF_deq = 1'd1 ;

  // rule RL_ctop_app_appW4_wci_ctl_op_start
  assign CAN_FIRE_RL_ctop_app_appW4_wci_ctl_op_start =
	     ctop_app_appW4_wci_reqF$EMPTY_N &&
	     ctop_app_appW4_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start =
	     CAN_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW4_wci_ctrl_EiI
  assign CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI =
	     ctop_app_appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     ctop_app_appW4_wci_cState == 3'd0 &&
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI =
	     CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI ;

  // rule RL_ctop_app_appW4_wci_ctrl_OrE
  assign CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE =
	     ctop_app_appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE =
	     CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE ;

  // rule RL_ctop_app_appW4_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wmi_reqF_deq
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_deq =
	     ctop_app_appW4_wmi_operateD && ctop_app_appW4_wmi_peerIsReady &&
	     !ctop_app_appW4_wmi_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_deq =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_deq ;

  // rule RL_ctop_app_appW4_wmi_dhF_deq
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_deq =
	     ctop_app_appW4_wmi_operateD && ctop_app_appW4_wmi_peerIsReady &&
	     !ctop_app_appW4_wmi_sDataThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_deq =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_deq ;

  // rule RL_ctop_app_appW4_wsiM_ext_status_assign
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_inc_tBusyCount =
	     ctop_app_appW4_wsiM_operateD &&
	     ctop_app_appW4_wsiM_peerIsReady &&
	     ctop_app_appW4_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_inc_tBusyCount ;

  // rule RL_ctop_app_appW4_wsiM_update_statusR
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_update_statusR = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq =
	     ctop_app_appW4_wsiM_reqFifo_c_r != 2'd0 &&
	     !ctop_app_appW4_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq ;

  // rule RL_ctop_app_appW4_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiS_backpressure
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_backpressure =
	     ctop_app_appW4_wsiS_reqFifo_levelsValid &&
	     ctop_app_appW4_wsiS_operateD &&
	     ctop_app_appW4_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_backpressure =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_backpressure ;

  // rule RL_ctop_app_stbConnect_1
  assign CAN_FIRE_RL_ctop_app_stbConnect_1 =
	     !CAN_FIRE_RL_ctop_app_appW4_wsiS_backpressure ||
	     ctop_app_appW4_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_ctop_app_stbConnect_1 =
	     CAN_FIRE_RL_ctop_app_stbConnect_1 ;

  // rule RL_ctop_app_appW3_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_ctop_app_appW3_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW3_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiS_ext_status_assign
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_ctop_app_appW4_wci_cfrd
  assign CAN_FIRE_RL_ctop_app_appW4_wci_cfrd =
	     ctop_app_appW4_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW4_wci_reqF$EMPTY_N &&
	     ctop_app_appW4_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_cfrd =
	     CAN_FIRE_RL_ctop_app_appW4_wci_cfrd &&
	     !WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW4_wmrd_mesgBegin
  assign CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin =
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h9) &&
	     !ctop_app_appW4_wmi_sThreadBusy_d &&
	     !ctop_app_appW4_wmi_sDataThreadBusy_d &&
	     ctop_app_appW4_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ;

  // rule RL_ctop_sFlagConnect_9
  assign CAN_FIRE_RL_ctop_sFlagConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_ctop_sFlagConnect_9 = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_respMetadata
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_respMetadata =
	     ctop_inf_dp1_wmi_wmi_operateD &&
	     ctop_inf_dp1_wmi_wmi_peerIsReady &&
	     ctop_inf_dp1_wmi_dpControl_whas__909_AND_ctop__ETC___d3955 &&
	     ctop_inf_dp1_dpControl[3:2] != 2'd1 &&
	     !ctop_inf_dp1_wmi_mesgMeta[128] &&
	     ctop_inf_dp1_wmi_mesgBufReady &&
	     ctop_inf_dp1_wmi_metaBusy ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_respMetadata &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_ctop_inf_dp1_wmi_doReadReq
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadReq =
	     IF_ctop_inf_dp1_wmi_addr_010_BITS_3_TO_2_011_E_ETC___d7567 &&
	     ctop_inf_dp1_wmi_rdActive ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_ctop_inf_dp1_rBMesg
  assign CAN_FIRE_RL_ctop_inf_dp1_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_rBMesg = 1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterB_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterB_1_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterB_2_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     ctop_inf_dp1_bram_serverAdapterB_3_cnt_1$whas ||
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_ctop_inf_dp1_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_s1__dreg_update =
	     1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_lclAdvance
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance =
	     ctop_inf_dp1_wci_cState == 3'd2 && ctop_inf_dp1_bml_lclBufDone ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lclAdvance =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;

  // rule RL_ctop_inf_dp1_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;

  // rule RL_ctop_inf_dp1_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_ctop_inf_dp1_bml_initAccumulators
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_initAccumulators =
	     ctop_inf_dp1_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     ctop_inf_dp1_wci_cState == 3'd1 &&
	     ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // rule RL_ctop_inf_dp1_wci_cfwr
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_cfwr =
	     ctop_inf_dp1_wci_respF_c_r != 2'd2 &&
	     ctop_inf_dp1_wci_reqF$EMPTY_N &&
	     ctop_inf_dp1_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp1_wci_ctl_op_complete
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete =
	     ctop_inf_dp1_wci_respF_c_r != 2'd2 &&
	     ctop_inf_dp1_wci_ctlOpActive &&
	     ctop_inf_dp1_wci_ctlAckReg ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ;

  // rule RL_ctop_inf_dp1_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_reqF__updateLevelCounter =
	     (ctop_inf_dp1_wci_wciReq$wget[59:57] != 3'd0) !=
	     ctop_inf_dp1_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_reqF__updateLevelCounter ;

  // rule RL_ctop_inf_dp1_wci_respF_incCtr
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr =
	     ((ctop_inf_dp1_wci_respF_c_r == 2'd0) ?
		ctop_inf_dp1_wci_respF_x_wire$whas :
		ctop_inf_dp1_wci_respF_c_r != 2'd1 ||
		ctop_inf_dp1_wci_respF_x_wire$whas) &&
	     ctop_inf_dp1_wci_respF_enqueueing$whas &&
	     !(ctop_inf_dp1_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr ;

  // rule RL_ctop_inf_dp1_wci_respF_decCtr
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr =
	     ctop_inf_dp1_wci_respF_c_r != 2'd0 &&
	     !ctop_inf_dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr ;

  // rule RL_ctop_inf_dp1_wci_respF_both
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_respF_both =
	     ((ctop_inf_dp1_wci_respF_c_r == 2'd1) ?
		ctop_inf_dp1_wci_respF_x_wire$whas :
		ctop_inf_dp1_wci_respF_c_r != 2'd2 ||
		ctop_inf_dp1_wci_respF_x_wire$whas) &&
	     ctop_inf_dp1_wci_respF_c_r != 2'd0 &&
	     ctop_inf_dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_respF_both ;

  // rule RL_ctop_inf_dp1_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_ctop_inf_dp1_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_ctop_inf_dp1_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_inf_dp1_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_inc_tBusyCount =
	     ctop_app_appW4_wsiS_operateD &&
	     ctop_app_appW4_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_ctop_app_appW4_wsiS_backpressure ||
	      ctop_app_appW4_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_inc_tBusyCount ;

  // rule RL_ctop_app_appW4_wsiS_update_statusR
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_update_statusR = 1'd1 ;

  // rule RL_ctop_app_appW4_mesgPreRequest__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_mesgPreRequest__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_mesgPreRequest__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_respF_portB_read_data
  assign CAN_FIRE_RL_ctop_app_appW4_respF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_respF_portB_read_data = 1'd1 ;

  // rule RL_ctop_app_appW4_wmrd_mesgResptoWsi
  assign CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi =
	     ctop_app_appW4_wsiM_reqFifo_c_r != 2'd2 &&
	     ctop_app_appW4_respF_rRdPtr != ctop_app_appW4_respF_rWrPtr &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h9) ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi ;

  // rule RL_ctop_app_appW4_fabRespCredit_accumulate
  assign CAN_FIRE_RL_ctop_app_appW4_fabRespCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_fabRespCredit_accumulate = 1'd1 ;

  // rule RL_ctop_app_appW4_wci_ctrl_IsO
  assign CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO =
	     ctop_app_appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     ctop_app_appW4_wci_cState == 3'd1 &&
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO =
	     CAN_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO ;

  // rule RL_ctop_app_appW4_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_ctop_app_appW4_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_ctop_app_appW4_wci_reqF_enq
  assign CAN_FIRE_RL_ctop_app_appW4_wci_reqF_enq =
	     ctop_app_appW4_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_reqF_enq =
	     CAN_FIRE_RL_ctop_app_appW4_wci_reqF_enq ;

  // rule RL_ctop_app_appW4_wsi_Es_doAlways
  assign CAN_FIRE_RL_ctop_app_appW4_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsi_Es_doAlways = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq =
	     ctop_app_appW4_wsiS_operateD &&
	     ctop_app_appW4_wsiS_peerIsReady &&
	     ctop_app_appW4_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq ;

  // rule RL_ctop_app_appW4_wsipass_doMessagePush
  assign CAN_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush =
	     ctop_app_appW4_wsiS_reqFifo$EMPTY_N &&
	     (ctop_app_appW4_smaCtrl[4] ||
	      ctop_app_appW4_wsiM_reqFifo_c_r != 2'd2) &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     ctop_app_appW4_smaCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush =
	     CAN_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush ;

  // rule RL_ctop_app_appW4_wmwt_messagePushPrecise
  assign CAN_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise =
	     ctop_app_appW4_wmi_dhF_c_r != 2'd2 &&
	     ctop_app_appW4_wmi_operateD_405_AND_ctop_app_a_ETC___d6783 &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW4_wsiWordsRemain != 12'd0 &&
	     ctop_app_appW4_mesgReqValid &&
	     ctop_app_appW4_preciseBurst ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise =
	     CAN_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW4_wmwt_requestPrecise
  assign CAN_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise =
	     ctop_app_appW4_wmi_reqF_c_r != 2'd2 &&
	     ctop_app_appW4_wmi_mFlagF_c_r != 2'd2 &&
	     ctop_app_appW4_wmi_operateD &&
	     ctop_app_appW4_wmi_peerIsReady &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW4_readyToRequest &&
	     ctop_app_appW4_preciseBurst ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise =
	     CAN_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise ;

  // rule RL_ctop_app_appW4_wmwt_mesgBegin
  assign CAN_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin =
	     ctop_app_appW4_wsiS_reqFifo$EMPTY_N &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h3) &&
	     !ctop_app_appW4_wmi_sThreadBusy_d &&
	     !ctop_app_appW4_wmi_sDataThreadBusy_d &&
	     !ctop_app_appW4_opcode[8] ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin =
	     CAN_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW4_wmwt_messagePushImprecise
  assign CAN_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise =
	     ctop_app_appW4_wmi_reqF_c_r != 2'd2 &&
	     ctop_app_appW4_wmi_dhF_c_r != 2'd2 &&
	     ctop_app_appW4_wmi_operateD &&
	     ctop_app_appW4_wmi_peerIsReady &&
	     ctop_app_appW4_wsiS_reqFifo_i_notEmpty__635_AN_ETC___d6802 &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW4_readyToPush &&
	     ctop_app_appW4_impreciseBurst ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise =
	     CAN_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW4_wmwt_doAbort
  assign CAN_FIRE_RL_ctop_app_appW4_wmwt_doAbort =
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW4_doAbort ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort =
	     CAN_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // rule RL_ctop_app_appW4_wmwt_messageFinalize
  assign CAN_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize =
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h2 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h3) &&
	     ctop_app_appW4_mesgLength[14] &&
	     !ctop_app_appW4_doAbort &&
	     (ctop_app_appW4_preciseBurst &&
	      ctop_app_appW4_wsiWordsRemain == 12'd0 ||
	      ctop_app_appW4_impreciseBurst && ctop_app_appW4_endOfMessage) ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize =
	     CAN_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ;

  // rule RL_ctop_app_appW4_wmi_reqF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr =
	     ((ctop_app_appW4_wmi_reqF_c_r == 2'd0) ?
		ctop_app_appW4_wmi_reqF_x_wire$whas :
		ctop_app_appW4_wmi_reqF_c_r != 2'd1 ||
		ctop_app_appW4_wmi_reqF_x_wire$whas) &&
	     ctop_app_appW4_wmi_reqF_enqueueing$whas &&
	     !ctop_app_appW4_wmi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr ;

  // rule RL_ctop_app_appW4_wmi_reqF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr =
	     ctop_app_appW4_wmi_reqF_dequeueing$whas &&
	     !ctop_app_appW4_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr ;

  // rule RL_ctop_app_appW4_wmi_reqF_both
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_both =
	     ((ctop_app_appW4_wmi_reqF_c_r == 2'd1) ?
		ctop_app_appW4_wmi_reqF_x_wire$whas :
		ctop_app_appW4_wmi_reqF_c_r != 2'd2 ||
		ctop_app_appW4_wmi_reqF_x_wire$whas) &&
	     ctop_app_appW4_wmi_reqF_dequeueing$whas &&
	     ctop_app_appW4_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_reqF_both ;

  // rule RL_ctop_app_appW4_wmi_mFlagF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr =
	     ((ctop_app_appW4_wmi_mFlagF_c_r == 2'd0) ?
		ctop_app_appW4_wmi_mFlagF_enqueueing$whas :
		ctop_app_appW4_wmi_mFlagF_c_r != 2'd1 ||
		ctop_app_appW4_wmi_mFlagF_enqueueing$whas) &&
	     ctop_app_appW4_wmi_mFlagF_enqueueing$whas &&
	     !ctop_app_appW4_wmi_mFlagF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr ;

  // rule RL_ctop_app_appW4_wmi_mFlagF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr =
	     ctop_app_appW4_wmi_mFlagF_dequeueing$whas &&
	     !ctop_app_appW4_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr ;

  // rule RL_ctop_app_appW4_wmi_mFlagF_both
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both =
	     ((ctop_app_appW4_wmi_mFlagF_c_r == 2'd1) ?
		ctop_app_appW4_wmi_mFlagF_enqueueing$whas :
		ctop_app_appW4_wmi_mFlagF_c_r != 2'd2 ||
		ctop_app_appW4_wmi_mFlagF_enqueueing$whas) &&
	     ctop_app_appW4_wmi_mFlagF_dequeueing$whas &&
	     ctop_app_appW4_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both ;

  // rule RL_ctop_app_appW4_wmi_dhF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr =
	     ((ctop_app_appW4_wmi_dhF_c_r == 2'd0) ?
		MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		ctop_app_appW4_wmi_dhF_c_r != 2'd1 ||
		MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     !ctop_app_appW4_wmi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr ;

  // rule RL_ctop_app_appW4_wmi_dhF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr =
	     ctop_app_appW4_wmi_dhF_dequeueing$whas &&
	     !MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr ;

  // rule RL_ctop_app_appW4_wmi_dhF_both
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_both =
	     ((ctop_app_appW4_wmi_dhF_c_r == 2'd1) ?
		MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		ctop_app_appW4_wmi_dhF_c_r != 2'd2 ||
		MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     ctop_app_appW4_wmi_dhF_dequeueing$whas &&
	     MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_dhF_both ;

  // rule RL_ctop_app_appW4_wmi_sThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_sThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_sThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wmi_sDataThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_sDataThreadBusy_d__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_sDataThreadBusy_d__dreg_update =
	     1'd1 ;

  // rule RL_ctop_app_appW4_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr =
	     ((ctop_app_appW4_wsiM_reqFifo_c_r == 2'd0) ?
		ctop_app_appW4_wsiM_reqFifo_enqueueing$whas :
		ctop_app_appW4_wsiM_reqFifo_c_r != 2'd1 ||
		ctop_app_appW4_wsiM_reqFifo_enqueueing$whas) &&
	     ctop_app_appW4_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr ;

  // rule RL_ctop_app_appW4_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq &&
	     !ctop_app_appW4_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr ;

  // rule RL_ctop_app_appW4_wsiM_reqFifo_both
  assign CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both =
	     ((ctop_app_appW4_wsiM_reqFifo_c_r == 2'd1) ?
		ctop_app_appW4_wsiM_reqFifo_enqueueing$whas :
		ctop_app_appW4_wsiM_reqFifo_c_r != 2'd2 ||
		ctop_app_appW4_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq &&
	     ctop_app_appW4_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both ;

  // rule RL_ctop_app_appW4_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo__updateLevelCounter =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 !=
	     ctop_app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_ctop_app_appW4_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_reset =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ||
	     ctop_app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_reset ;

  // rule RL_ctop_app_appW4_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wmi_Em_doAlways
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_Em_doAlways = 1'd1 ;

  // rule RL_ctop_app_appW4_wmi_respAdvance
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_respAdvance =
	     ctop_app_appW4_wmi_operateD && ctop_app_appW4_wmi_peerIsReady &&
	     ctop_inf_dp1_wmi_wmi_respF_q_0[33:32] != 2'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_respAdvance =
	     CAN_FIRE_RL_ctop_app_appW4_wmi_respAdvance ;

  // rule RL_ctop_app_appW4_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse =
	     ctop_app_appW4_wmi_respF_i_notEmpty__700_AND_c_ETC___d6705 &&
	     ctop_app_appW4_wci_cState == 3'd2 &&
	     (ctop_app_appW4_smaCtrl[3:0] == 4'h1 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h4 ||
	      ctop_app_appW4_smaCtrl[3:0] == 4'h9) &&
	     ctop_app_appW4_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse ;

  // rule RL_ctop_app_appW4_wci_cfwr
  assign CAN_FIRE_RL_ctop_app_appW4_wci_cfwr =
	     ctop_app_appW4_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW4_wci_reqF$EMPTY_N &&
	     ctop_app_appW4_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_cfwr =
	     CAN_FIRE_RL_ctop_app_appW4_wci_cfwr &&
	     !WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW4_wci_ctl_op_complete
  assign CAN_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete =
	     ctop_app_appW4_wci_respF_c_r != 2'd2 &&
	     ctop_app_appW4_wci_ctlOpActive &&
	     ctop_app_appW4_wci_ctlAckReg ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete =
	     CAN_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ;

  // rule RL_ctop_app_appW4_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_ctop_app_appW4_wci_reqF__updateLevelCounter =
	     (ctop_app_appW4_wci_wciReq$wget[59:57] != 3'd0) !=
	     ctop_app_appW4_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_ctop_app_appW4_wci_reqF__updateLevelCounter ;

  // rule RL_ctop_app_appW4_wci_respF_incCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wci_respF_incCtr =
	     ((ctop_app_appW4_wci_respF_c_r == 2'd0) ?
		ctop_app_appW4_wci_respF_x_wire$whas :
		ctop_app_appW4_wci_respF_c_r != 2'd1 ||
		ctop_app_appW4_wci_respF_x_wire$whas) &&
	     ctop_app_appW4_wci_respF_enqueueing$whas &&
	     !(ctop_app_appW4_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wci_respF_incCtr ;

  // rule RL_ctop_app_appW4_wci_respF_decCtr
  assign CAN_FIRE_RL_ctop_app_appW4_wci_respF_decCtr =
	     ctop_app_appW4_wci_respF_c_r != 2'd0 &&
	     !ctop_app_appW4_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr =
	     CAN_FIRE_RL_ctop_app_appW4_wci_respF_decCtr ;

  // rule RL_ctop_app_appW4_wci_respF_both
  assign CAN_FIRE_RL_ctop_app_appW4_wci_respF_both =
	     ((ctop_app_appW4_wci_respF_c_r == 2'd1) ?
		ctop_app_appW4_wci_respF_x_wire$whas :
		ctop_app_appW4_wci_respF_c_r != 2'd2 ||
		ctop_app_appW4_wci_respF_x_wire$whas) &&
	     ctop_app_appW4_wci_respF_c_r != 2'd0 &&
	     ctop_app_appW4_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_respF_both =
	     CAN_FIRE_RL_ctop_app_appW4_wci_respF_both ;

  // rule RL_ctop_app_appW4_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_ctop_app_appW4_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_ctop_app_appW4_respF_portA
  assign CAN_FIRE_RL_ctop_app_appW4_respF_portA = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_respF_portA = 1'd1 ;

  // rule RL_ctop_app_appW4_respF_portB
  assign CAN_FIRE_RL_ctop_app_appW4_respF_portB = 1'd1 ;
  assign WILL_FIRE_RL_ctop_app_appW4_respF_portB = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_every
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_every = 1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_every = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_connect
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect =
	     !pci0_pcie_ep$trn_rsrc_rdy_n && fP2I$FULL_N ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_connect =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;

  // rule RL_pci0_connect_trn_rx
  assign CAN_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_1_upconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     fP2I$EMPTY_N &&
	     (!fP2I$D_OUT[79] ||
	      p2iAF_head_wrapped_crossed__8_EQ_p2iAF_tail_wr_ETC___d7152) &&
	     !Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;

  // rule RL_p2iAF_reset_tail
  assign CAN_FIRE_RL_p2iAF_reset_tail = p2iAF_sInReset$VAL ;
  assign WILL_FIRE_RL_p2iAF_reset_tail = p2iAF_sInReset$VAL ;

  // rule RL_Prelude_inst_changeSpecialWires_1_upconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     p2iAF_head_wrapped_crossed__8_EQ_p2iAF_tail_wr_ETC___d7152 &&
	     fP2I$EMPTY_N &&
	     Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // rule RL_p2iAF_enq_update_tail
  assign CAN_FIRE_RL_p2iAF_enq_update_tail =
	     !p2iAF_sInReset$VAL && p2iAF_enq_pw$whas ;
  assign WILL_FIRE_RL_p2iAF_enq_update_tail =
	     CAN_FIRE_RL_p2iAF_enq_update_tail ;

  // rule RL_p2iAF_sClear_update_tail
  assign CAN_FIRE_RL_p2iAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_p2iAF_sClear_update_tail = 1'b0 ;

  // rule RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut =
	     p2iAF_head_wrapped != p2iAF_tail_wrapped &&
	     !p2iAF_dInReset$VAL &&
	     ctop_inf_sm0$RDY_s_request_put ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;

  // rule RL_p2iAF_deq_update_head
  assign CAN_FIRE_RL_p2iAF_deq_update_head =
	     !p2iAF_dInReset$VAL &&
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;
  assign WILL_FIRE_RL_p2iAF_deq_update_head =
	     CAN_FIRE_RL_p2iAF_deq_update_head ;

  // rule RL_p2iAF_dClear_update_head
  assign CAN_FIRE_RL_p2iAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_p2iAF_dClear_update_head = 1'b0 ;

  // rule RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut =
	     i2pAF_head_wrapped == i2pAF_tail_wrapped &&
	     !i2pAF_sInReset$VAL &&
	     ctop_inf_sm0$RDY_s_response_get ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;

  // rule RL_i2pAF_enq_update_tail
  assign CAN_FIRE_RL_i2pAF_enq_update_tail =
	     !i2pAF_sInReset$VAL &&
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;
  assign WILL_FIRE_RL_i2pAF_enq_update_tail =
	     CAN_FIRE_RL_i2pAF_enq_update_tail ;

  // rule RL_i2pAF_sClear_update_tail
  assign CAN_FIRE_RL_i2pAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_i2pAF_sClear_update_tail = 1'b0 ;

  // rule RL_Prelude_inst_changeSpecialWires_4_downconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 =
	     i2pAF_head_wrapped != i2pAF_tail_wrapped &&
	     !i2pAF_dInReset$VAL &&
	     preEdge$CLK_VAL &&
	     fI2P$FULL_N &&
	     !Prelude_inst_changeSpecialWires_4_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ;

  // rule RL_i2pAF_deq_update_head
  assign CAN_FIRE_RL_i2pAF_deq_update_head =
	     !i2pAF_dInReset$VAL &&
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ;
  assign WILL_FIRE_RL_i2pAF_deq_update_head =
	     CAN_FIRE_RL_i2pAF_deq_update_head ;

  // rule RL_i2pAF_dClear_update_head
  assign CAN_FIRE_RL_i2pAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_i2pAF_dClear_update_head = 1'b0 ;

  // rule RL_Prelude_inst_changeSpecialWires_4_downconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 =
	     fI2P$FULL_N && Prelude_inst_changeSpecialWires_4_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 ;

  // rule RL_Prelude_inst_changeSpecialWires_5_every
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_every = 1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_every = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_5_connect
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect =
	     !pci0_pcie_ep$trn_tdst_rdy_n && fI2P$EMPTY_N ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;

  // rule RL_pci0_connect_trn_tx
  assign CAN_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;

  // rule RL_infLed_clock_domain_crossing
  assign CAN_FIRE_RL_infLed_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_infLed_clock_domain_crossing = 1'd1 ;

  // rule RL_tcGbe0_send_time
  assign CAN_FIRE_RL_tcGbe0_send_time = 1'd1 ;
  assign WILL_FIRE_RL_tcGbe0_send_time = 1'd1 ;

  // rule RL_tcGbe0_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_tcGbe0_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_tcGbe0_wti_sThreadBusy_reg = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !fP2I$D_OUT[79] ;
  assign MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 &&
	     i2pS[135:128] != 8'd0 ;
  assign MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_ctop_app_appW2_impreciseBurst$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     !ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_ctop_app_appW2_lastMesg$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ;
  assign MUX_ctop_app_appW2_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse &&
	     ctop_app_appW2_unrollCnt == 16'd1 ;
  assign MUX_ctop_app_appW2_mesgLength$write_1__SEL_4 =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_ctop_app_appW2_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete &&
	     ctop_app_appW2_wci_illegalEdge ;
  assign MUX_ctop_app_appW2_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     (ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_app_appW2_wci_cState != 3'd0 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      ctop_app_appW2_wci_cState != 3'd1 &&
	      ctop_app_appW2_wci_cState != 3'd3 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_app_appW2_wci_cState != 3'd2 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      ctop_app_appW2_wci_cState != 3'd3 &&
	      ctop_app_appW2_wci_cState != 3'd2 &&
	      ctop_app_appW2_wci_cState != 3'd1 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_ctop_app_appW2_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr &&
	     ctop_app_appW2_wci_respF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW2_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr &&
	     ctop_app_appW2_wci_respF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr &&
	     ctop_app_appW2_wmi_dhF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr &&
	     ctop_app_appW2_wmi_dhF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr &&
	     ctop_app_appW2_wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr &&
	     ctop_app_appW2_wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest && x__h185342 ;
  assign MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr &&
	     ctop_app_appW2_wmi_reqF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr &&
	     ctop_app_appW2_wmi_reqF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr &&
	     ctop_app_appW2_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr &&
	     ctop_app_appW2_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     ctop_app_appW2_smaCtrl[3:0] == 4'h3 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush &&
	     !ctop_app_appW2_smaCtrl[4] ;
  assign MUX_ctop_app_appW3_mesgRdCount$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse &&
	     ctop_app_appW3_unrollCnt == 16'd1 ;
  assign MUX_ctop_app_appW3_mesgWtCount$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress &&
	     ctop_app_appW3_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_body ||
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_begin ;
  assign MUX_ctop_app_appW3_rdSerEmpty$write_1__SEL_1 =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (ctop_app_appW3_rdSerEmpty || ctop_app_appW3_rdSerPos == 2'd0) ;
  assign MUX_ctop_app_appW3_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete &&
	     ctop_app_appW3_wci_illegalEdge ;
  assign MUX_ctop_app_appW3_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     (ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_app_appW3_wci_cState != 3'd0 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      ctop_app_appW3_wci_cState != 3'd1 &&
	      ctop_app_appW3_wci_cState != 3'd3 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_app_appW3_wci_cState != 3'd2 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      ctop_app_appW3_wci_cState != 3'd3 &&
	      ctop_app_appW3_wci_cState != 3'd2 &&
	      ctop_app_appW3_wci_cState != 3'd1 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_ctop_app_appW3_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr &&
	     ctop_app_appW3_wci_respF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW3_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr &&
	     ctop_app_appW3_wci_respF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW3_wide16Fa$enq_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin &&
	     (ctop_app_appW3_wrtSerPos == 2'd3 ||
	      ctop_app_appW3_metaWF$D_OUT[23:0] == 24'd0) ;
  assign MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr &&
	     ctop_app_appW3_wmemi_dhF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr &&
	     ctop_app_appW3_wmemi_dhF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr &&
	     ctop_app_appW3_wmemi_reqF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr &&
	     ctop_app_appW3_wmemi_reqF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW3_wrtSerStage$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd0 ;
  assign MUX_ctop_app_appW3_wrtSerStage_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd1 ;
  assign MUX_ctop_app_appW3_wrtSerStage_2$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd2 ;
  assign MUX_ctop_app_appW3_wrtSerStage_3$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd3 ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr &&
	     ctop_app_appW3_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr &&
	     ctop_app_appW3_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq &&
	     ctop_app_appW3_wsiS_reqFifo$FULL_N ;
  assign MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_ctop_app_appW4_impreciseBurst$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     !ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_ctop_app_appW4_lastMesg$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ;
  assign MUX_ctop_app_appW4_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse &&
	     ctop_app_appW4_unrollCnt == 16'd1 ;
  assign MUX_ctop_app_appW4_mesgLength$write_1__SEL_4 =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_ctop_app_appW4_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete &&
	     ctop_app_appW4_wci_illegalEdge ;
  assign MUX_ctop_app_appW4_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     (ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_app_appW4_wci_cState != 3'd0 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      ctop_app_appW4_wci_cState != 3'd1 &&
	      ctop_app_appW4_wci_cState != 3'd3 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_app_appW4_wci_cState != 3'd2 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      ctop_app_appW4_wci_cState != 3'd3 &&
	      ctop_app_appW4_wci_cState != 3'd2 &&
	      ctop_app_appW4_wci_cState != 3'd1 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_ctop_app_appW4_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr &&
	     ctop_app_appW4_wci_respF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW4_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr &&
	     ctop_app_appW4_wci_respF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr &&
	     ctop_app_appW4_wmi_dhF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr &&
	     ctop_app_appW4_wmi_dhF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr &&
	     ctop_app_appW4_wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr &&
	     ctop_app_appW4_wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest && x__h232754 ;
  assign MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr &&
	     ctop_app_appW4_wmi_reqF_c_r == 2'd0 ;
  assign MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr &&
	     ctop_app_appW4_wmi_reqF_c_r == 2'd1 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr &&
	     ctop_app_appW4_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr &&
	     ctop_app_appW4_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     ctop_app_appW4_smaCtrl[3:0] == 4'h3 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush &&
	     !ctop_app_appW4_smaCtrl[4] ;
  assign MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq &&
	     ctop_app_appW4_wsiS_reqFifo$FULL_N ;
  assign MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_fba &&
	     (ctop_inf_dp0_bml_fabAvail && !ctop_inf_dp0_bml_remStart ||
	      !ctop_inf_dp0_bml_fabAvail && ctop_inf_dp0_bml_remStart) ;
  assign MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 ;
  assign MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_lbar &&
	     (IF_ctop_inf_dp0_bml_dpControl_wget__992_BITS_1_ETC___d2069 &&
	      !ctop_inf_dp0_bml_lclBufStart ||
	      CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q13 &&
	      ctop_inf_dp0_bml_lclBufStart) ;
  assign MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_lbcf &&
	     (ctop_inf_dp0_bml_lclBufDone_016_AND_IF_ctop_in_ETC___d7433 ||
	      NOT_ctop_inf_dp0_bml_lclBufDone_016_083_AND_IF_ETC___d2096) ;
  assign MUX_ctop_inf_dp0_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_lcredit &&
	     (ctop_inf_dp0_bml_lclBufDone && !ctop_inf_dp0_bml_remStart ||
	      !ctop_inf_dp0_bml_lclBufDone && ctop_inf_dp0_bml_remStart) ;
  assign MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7429 ;
  assign MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7430 ;
  assign MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7474 ;
  assign MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7431 ;
  assign MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv &&
	     ctop_inf_dp0_tlp_inF_first__68_BIT_152_115_AND_ETC___d1140 ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ;
  assign MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ;
  assign MUX_ctop_inf_dp0_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp &&
	     ctop_inf_dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader && _dfoo5 ;
  assign MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header &&
	     !ctop_inf_dp0_tlp_mRespF_first__35_BITS_71_TO_6_ETC___d7384 ;
  assign MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody ;
  assign MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 &&
	     ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830 ;
  assign MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody &&
	     ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830 &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4 =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_ctop_inf_dp0_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete &&
	     ctop_inf_dp0_wci_illegalEdge ;
  assign MUX_ctop_inf_dp0_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     (ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_inf_dp0_wci_cState != 3'd0 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      ctop_inf_dp0_wci_cState != 3'd1 &&
	      ctop_inf_dp0_wci_cState != 3'd3 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_inf_dp0_wci_cState != 3'd2 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      ctop_inf_dp0_wci_cState != 3'd3 &&
	      ctop_inf_dp0_wci_cState != 3'd2 &&
	      ctop_inf_dp0_wci_cState != 3'd1 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_ctop_inf_dp0_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr &&
	     ctop_inf_dp0_wci_respF_c_r == 2'd0 ;
  assign MUX_ctop_inf_dp0_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr &&
	     ctop_inf_dp0_wci_respF_c_r == 2'd1 ;
  assign MUX_ctop_inf_dp0_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ;
  assign MUX_ctop_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_ctop_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;
  assign MUX_ctop_inf_dp0_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_ctop_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1 &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ;
  assign MUX_ctop_inf_dp0_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doDwell &&
	     ctop_inf_dp0_wmi_bufDwell == 2'd1 ;
  assign MUX_ctop_inf_dp0_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq &&
	     ctop_inf_dp0_wmi_wmi_dhF$FULL_N ;
  assign MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq &&
	     ctop_inf_dp0_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[27] &&
	     ctop_inf_dp0_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq &&
	     ctop_inf_dp0_wmi_wmi_reqF$FULL_N ;
  assign MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_ctop_inf_dp0_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_ctop_inf_dp0_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ;
  assign MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_fba &&
	     (ctop_inf_dp1_bml_fabAvail && !ctop_inf_dp1_bml_remStart ||
	      !ctop_inf_dp1_bml_fabAvail && ctop_inf_dp1_bml_remStart) ;
  assign MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 ;
  assign MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_lbar &&
	     (IF_ctop_inf_dp1_bml_dpControl_wget__178_BITS_1_ETC___d4255 &&
	      !ctop_inf_dp1_bml_lclBufStart ||
	      CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q21 &&
	      ctop_inf_dp1_bml_lclBufStart) ;
  assign MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_lbcf &&
	     (ctop_inf_dp1_bml_lclBufDone_202_AND_IF_ctop_in_ETC___d7462 ||
	      NOT_ctop_inf_dp1_bml_lclBufDone_202_269_AND_IF_ETC___d4282) ;
  assign MUX_ctop_inf_dp1_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_lcredit &&
	     (ctop_inf_dp1_bml_lclBufDone && !ctop_inf_dp1_bml_remStart ||
	      !ctop_inf_dp1_bml_lclBufDone && ctop_inf_dp1_bml_remStart) ;
  assign MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7457 ;
  assign MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7458 ;
  assign MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7459 ;
  assign MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7460 ;
  assign MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv &&
	     ctop_inf_dp1_tlp_inF_first__156_BIT_152_301_AN_ETC___d3326 ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ;
  assign MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ;
  assign MUX_ctop_inf_dp1_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp &&
	     ctop_inf_dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader && _dfoo15 ;
  assign MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header &&
	     !ctop_inf_dp1_tlp_mRespF_first__926_BITS_71_TO__ETC___d7397 ;
  assign MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody ;
  assign MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 &&
	     ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372 ;
  assign MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody &&
	     ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372 &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4 =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_ctop_inf_dp1_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete &&
	     ctop_inf_dp1_wci_illegalEdge ;
  assign MUX_ctop_inf_dp1_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     (ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_inf_dp1_wci_cState != 3'd0 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      ctop_inf_dp1_wci_cState != 3'd1 &&
	      ctop_inf_dp1_wci_cState != 3'd3 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_inf_dp1_wci_cState != 3'd2 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      ctop_inf_dp1_wci_cState != 3'd3 &&
	      ctop_inf_dp1_wci_cState != 3'd2 &&
	      ctop_inf_dp1_wci_cState != 3'd1 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_ctop_inf_dp1_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr &&
	     ctop_inf_dp1_wci_respF_c_r == 2'd0 ;
  assign MUX_ctop_inf_dp1_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr &&
	     ctop_inf_dp1_wci_respF_c_r == 2'd1 ;
  assign MUX_ctop_inf_dp1_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ;
  assign MUX_ctop_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;
  assign MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ;
  assign MUX_ctop_inf_dp1_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doDwell &&
	     ctop_inf_dp1_wmi_bufDwell == 2'd1 ;
  assign MUX_ctop_inf_dp1_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq &&
	     ctop_inf_dp1_wmi_wmi_dhF$FULL_N ;
  assign MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq &&
	     ctop_inf_dp1_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[27] &&
	     ctop_inf_dp1_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq &&
	     ctop_inf_dp1_wmi_wmi_reqF$FULL_N ;
  assign MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_ctop_inf_dp1_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_ctop_inf_dp1_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ;
  assign MUX_p2iS$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     fP2I$D_OUT[79] ;
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 =
	     { 1'd1, fP2I$D_OUT } ;
  assign MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__VAL_1 =
	     { 2'd2, i2pS[151:144], i2pS[135:128], i2pS[63:0] } ;
  assign MUX_ctop_app_appW2_fabRespCredit_value$write_1__VAL_2 =
	     ctop_app_appW2_fabRespCredit_value +
	     (CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ?
		b__h181983 :
		12'd0) +
	     (CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_ctop_app_appW2_fabWordsRemain$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_sFlagReg[23:0] == 24'd0) ?
	       14'd1 :
	       ctop_app_appW2_wmi_sFlagReg[15:2] ;
  assign MUX_ctop_app_appW2_fabWordsRemain$write_1__VAL_2 =
	     ctop_app_appW2_fabWordsRemain - ctop_app_appW2_fabWordsCurReq ;
  assign MUX_ctop_app_appW2_mesgCount$write_1__VAL_1 =
	     ctop_app_appW2_mesgCount + 32'd1 ;
  assign MUX_ctop_app_appW2_mesgLength$write_1__VAL_3 =
	     { 1'd1, mlp1B__h187472 } ;
  assign MUX_ctop_app_appW2_mesgLength$write_1__VAL_4 =
	     (ctop_app_appW2_wsiS_reqFifo$D_OUT[11:8] == 4'd0) ?
	       15'd16384 :
	       { 1'd1, ctop_app_appW2_wsiS_reqFifo$D_OUT[55:44], 2'd0 } ;
  assign MUX_ctop_app_appW2_mesgReqAddr$write_1__VAL_2 =
	     ctop_app_appW2_mesgReqAddr +
	     { ctop_app_appW2_fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_ctop_app_appW2_opcode$write_1__VAL_3 =
	     { 1'd1, ctop_app_appW2_wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_ctop_app_appW2_thisMesg$write_1__VAL_1 =
	     { ctop_app_appW2_mesgCount[7:0],
	       x__h186641,
	       x_length__h186637 } ;
  assign MUX_ctop_app_appW2_thisMesg$write_1__VAL_2 =
	     { ctop_app_appW2_mesgCount[7:0],
	       ctop_app_appW2_wmi_sFlagReg[31:24],
	       ctop_app_appW2_wmi_sFlagReg[15:0] } ;
  assign MUX_ctop_app_appW2_unrollCnt$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_sFlagReg[23:0] == 24'd0) ?
	       16'd1 :
	       ctop_app_appW2_wmi_sFlagReg[17:2] ;
  assign MUX_ctop_app_appW2_unrollCnt$write_1__VAL_2 =
	     ctop_app_appW2_unrollCnt - 16'd1 ;
  assign MUX_ctop_app_appW2_wci_illegalEdge$write_1__VAL_2 =
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_ctop_app_appW2_wci_respF_c_r$write_1__VAL_1 =
	     ctop_app_appW2_wci_respF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW2_wci_respF_c_r$write_1__VAL_2 =
	     ctop_app_appW2_wci_respF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_1 =
	     (ctop_app_appW2_wci_respF_c_r == 2'd1) ?
	       MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 :
	       ctop_app_appW2_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete or
	  MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW2_wci_cfrd or
	  MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete:
	  MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW2_wci_cfrd:
	  MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wci_cfwr:
	  MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_ctop_app_appW2_wci_respF_q_1$write_1__VAL_1 =
	     (ctop_app_appW2_wci_respF_c_r == 2'd2) ?
	       MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_1 =
	     ctop_app_appW2_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_ctop_app_appW2_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, x_data__h188904 } ;
  assign MUX_ctop_app_appW2_wmi_dhF_c_r$write_1__VAL_1 =
	     ctop_app_appW2_wmi_dhF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_dhF_c_r$write_1__VAL_2 =
	     ctop_app_appW2_wmi_dhF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_dhF_c_r == 2'd1) ?
	       MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2 :
	       ctop_app_appW2_wmi_dhF_q_1 ;
  assign MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise ?
	       MUX_ctop_app_appW2_wmi_dhF_x_wire$wset_1__VAL_1 :
	       MUX_ctop_app_appW2_wmi_dhF_x_wire$wset_1__VAL_2 ;
  assign MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_dhF_c_r == 2'd2) ?
	       MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2 :
	       38'h0AAAAAAAAA ;
  assign MUX_ctop_app_appW2_wmi_dhF_x_wire$wset_1__VAL_1 =
	     { 1'd1,
	       ctop_app_appW2_wsiWordsRemain == 12'd1,
	       ctop_app_appW2_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_ctop_app_appW2_wmi_dhF_x_wire$wset_1__VAL_2 =
	     { 1'd1,
	       ctop_app_appW2_wsiS_reqFifo$D_OUT[57],
	       ctop_app_appW2_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_c_r$write_1__VAL_1 =
	     ctop_app_appW2_wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_c_r$write_1__VAL_2 =
	     ctop_app_appW2_wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_mFlagF_c_r == 2'd1) ?
	       value__h173593 :
	       ctop_app_appW2_wmi_mFlagF_q_1 ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_mFlagF_c_r == 2'd2) ?
	       value__h173593 :
	       32'd0 ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { x__h186641, mesgMetaF_length__h187618 } ;
  assign MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3 =
	     { x__h186641, mesgMetaF_length__h186882 } ;
  assign MUX_ctop_app_appW2_wmi_reqF_c_r$write_1__VAL_1 =
	     ctop_app_appW2_wmi_reqF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_reqF_c_r$write_1__VAL_2 =
	     ctop_app_appW2_wmi_reqF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_reqF_c_r == 2'd1) ?
	       MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 :
	       ctop_app_appW2_wmi_reqF_q_1 ;
  always@(WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest or
	  MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise or
	  MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise or
	  MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest:
	  MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise:
	  MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise:
	  MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3;
      default: MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__VAL_1 =
	     (ctop_app_appW2_wmi_reqF_c_r == 2'd2) ?
	       MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 :
	       32'd178956970 ;
  assign MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5,
	       x__h185342,
	       1'b0,
	       ctop_app_appW2_mesgReqAddr,
	       ctop_app_appW2_fabWordsCurReq[11:0] } ;
  assign MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 20'd229376, bl__h186744 } ;
  assign MUX_ctop_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3 =
	     { 4'd3,
	       ctop_app_appW2_wsiS_reqFifo$D_OUT[57],
	       1'b0,
	       addr__h187488,
	       12'd1 } ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     ctop_app_appW2_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     ctop_app_appW2_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (ctop_app_appW2_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       ctop_app_appW2_wsiM_reqFifo_q_1 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       ctop_app_appW2_wsiS_reqFifo$D_OUT :
	       MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (ctop_app_appW2_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (ctop_app_appW2_respF_rCache[73] &&
	      ctop_app_appW2_respF_rCache[72:61] ==
	      ctop_app_appW2_respF_rRdPtr) ?
	       ctop_app_appW2_respF_rCache[60:0] :
	       ctop_app_appW2_respF_memory$DOB ;
  assign MUX_ctop_app_appW2_wsiWordsRemain$write_1__VAL_2 =
	     ctop_app_appW2_wsiWordsRemain - 12'd1 ;
  assign MUX_ctop_app_appW3_dlyRAG$write_1__VAL_1 =
	     ctop_app_appW3_dlyRAG + 23'd1 ;
  assign MUX_ctop_app_appW3_dlyReadCredit_value$write_1__VAL_2 =
	     ctop_app_appW3_dlyReadCredit_value +
	     (WILL_FIRE_RL_ctop_app_appW3_delay_read_req ? 8'd255 : 8'd0) +
	     (CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc ? 8'd1 : 8'd0) ;
  assign MUX_ctop_app_appW3_dlyReadyToWrite_value$write_1__VAL_2 =
	     ctop_app_appW3_dlyReadyToWrite_value +
	     (ctop_app_appW3_dlyReadyToWrite_acc_v1$whas ? 16'd1 : 16'd0) +
	     (CAN_FIRE_RL_ctop_app_appW3_delay_write_req ?
		16'd65535 :
		16'd0) ;
  assign MUX_ctop_app_appW3_dlyWAG$write_1__VAL_1 =
	     ctop_app_appW3_dlyWAG + 23'd1 ;
  assign MUX_ctop_app_appW3_dlyWordsStored_value$write_1__VAL_2 =
	     ctop_app_appW3_dlyWordsStored_value +
	     (CAN_FIRE_RL_ctop_app_appW3_delay_write_req ? 25'd1 : 25'd0) +
	     (WILL_FIRE_RL_ctop_app_appW3_delay_read_req ?
		25'd33554431 :
		25'd0) ;
  assign MUX_ctop_app_appW3_mesgRdCount$write_1__VAL_1 =
	     ctop_app_appW3_mesgRdCount + 32'd1 ;
  assign MUX_ctop_app_appW3_mesgWtCount$write_1__VAL_1 =
	     ctop_app_appW3_mesgWtCount + 32'd1 ;
  assign MUX_ctop_app_appW3_rdSerPos$write_1__VAL_1 =
	     ctop_app_appW3_rdSerPos + 2'd1 ;
  assign MUX_ctop_app_appW3_rdSerUnroll$write_1__VAL_2 =
	     ctop_app_appW3_rdSerUnroll - 16'd1 ;
  assign MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_1 =
	     ctop_app_appW3_rdSerPos != 2'd3 && v__h210525[23:0] == 24'd0 ;
  assign MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_2 =
	     ctop_app_appW3_rdSerPos != 2'd3 &&
	     ctop_app_appW3_rdSerUnroll == 16'd1 ;
  assign MUX_ctop_app_appW3_unrollCnt$write_1__VAL_1 =
	     (ctop_app_appW3_metaRF$D_OUT[23:0] == 24'd0) ?
	       16'd1 :
	       ctop_app_appW3_metaRF$D_OUT[17:2] ;
  assign MUX_ctop_app_appW3_unrollCnt$write_1__VAL_2 =
	     ctop_app_appW3_unrollCnt - 16'd1 ;
  assign MUX_ctop_app_appW3_wci_illegalEdge$write_1__VAL_2 =
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_ctop_app_appW3_wci_respF_c_r$write_1__VAL_1 =
	     ctop_app_appW3_wci_respF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW3_wci_respF_c_r$write_1__VAL_2 =
	     ctop_app_appW3_wci_respF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_1 =
	     (ctop_app_appW3_wci_respF_c_r == 2'd1) ?
	       MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 :
	       ctop_app_appW3_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete or
	  MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW3_wci_cfrd or
	  MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete:
	  MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW3_wci_cfrd:
	  MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wci_cfwr:
	  MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_ctop_app_appW3_wci_respF_q_1$write_1__VAL_1 =
	     (ctop_app_appW3_wci_respF_c_r == 2'd2) ?
	       MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_1 =
	     ctop_app_appW3_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_ctop_app_appW3_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, x_data__h212880 } ;
  always@(ctop_app_appW3_wrtSerPos or
	  IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5835 or
	  x__h208786 or x__h208813)
  begin
    case (ctop_app_appW3_wrtSerPos)
      2'd0: MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_1 = x__h208786;
      2'd1: MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_1 = x__h208813;
      default: MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_1 =
		   IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5835;
    endcase
  end
  always@(ctop_app_appW3_wrtSerPos or
	  IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5864 or
	  x__h209436 or x__h209460)
  begin
    case (ctop_app_appW3_wrtSerPos)
      2'd0: MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_2 = x__h209436;
      2'd1: MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_2 = x__h209460;
      default: MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_2 =
		   IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5864;
    endcase
  end
  assign MUX_ctop_app_appW3_wmemi_dhF_c_r$write_1__VAL_1 =
	     ctop_app_appW3_wmemi_dhF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW3_wmemi_dhF_c_r$write_1__VAL_2 =
	     ctop_app_appW3_wmemi_dhF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_1 =
	     (ctop_app_appW3_wmemi_dhF_c_r == 2'd1) ?
	       MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 :
	       ctop_app_appW3_wmemi_dhF_q_1 ;
  assign MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 =
	     { 2'd3, ctop_app_appW3_wide16Fa$D_OUT, 16'd65535 } ;
  assign MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__VAL_1 =
	     (ctop_app_appW3_wmemi_dhF_c_r == 2'd2) ?
	       MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 :
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_ctop_app_appW3_wmemi_reqF_c_r$write_1__VAL_1 =
	     ctop_app_appW3_wmemi_reqF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW3_wmemi_reqF_c_r$write_1__VAL_2 =
	     ctop_app_appW3_wmemi_reqF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_1 =
	     (ctop_app_appW3_wmemi_reqF_c_r == 2'd1) ?
	       MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 :
	       ctop_app_appW3_wmemi_reqF_q_1 ;
  assign MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_delay_write_req ?
	       MUX_ctop_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_1 :
	       MUX_ctop_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_2 ;
  assign MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__VAL_1 =
	     (ctop_app_appW3_wmemi_reqF_c_r == 2'd2) ?
	       MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 :
	       52'h0AAAAAAAAAAAA ;
  assign MUX_ctop_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd3, addr__h209860, 12'd1 } ;
  assign MUX_ctop_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_2 =
	     { 4'd5, addr__h210210, 12'd1 } ;
  assign MUX_ctop_app_appW3_wrtSerPos$write_1__VAL_1 =
	     (ctop_app_appW3_metaWF$D_OUT[23:0] == 24'd0) ?
	       2'd0 :
	       ctop_app_appW3_wrtSerPos_797_PLUS_1___d8257 ;
  assign MUX_ctop_app_appW3_wrtSerPos$write_1__VAL_2 =
	     (ctop_app_appW3_wrtSerUnroll == 16'd1) ?
	       2'd0 :
	       ctop_app_appW3_wrtSerPos_797_PLUS_1___d8257 ;
  assign MUX_ctop_app_appW3_wrtSerUnroll$write_1__VAL_2 =
	     ctop_app_appW3_wrtSerUnroll - 16'd1 ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     ctop_app_appW3_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     ctop_app_appW3_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (ctop_app_appW3_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       ctop_app_appW3_wsiM_reqFifo_q_1 ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse ?
	       MUX_ctop_app_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1 :
	       ctop_app_appW3_wsiS_reqFifo$D_OUT ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (ctop_app_appW3_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_ctop_app_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1 =
	     { 3'd1,
	       ctop_app_appW3_unrollCnt == 16'd1,
	       1'd1,
	       x_burstLength__h212397,
	       ctop_app_appW3_mesgRF$D_OUT,
	       x_byteEn__h212398,
	       ctop_app_appW3_readMeta[31:24] } ;
  assign MUX_ctop_app_appW4_fabRespCredit_value$write_1__VAL_2 =
	     ctop_app_appW4_fabRespCredit_value +
	     (CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ?
		b__h229395 :
		12'd0) +
	     (CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_ctop_app_appW4_fabWordsRemain$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_sFlagReg[23:0] == 24'd0) ?
	       14'd1 :
	       ctop_app_appW4_wmi_sFlagReg[15:2] ;
  assign MUX_ctop_app_appW4_fabWordsRemain$write_1__VAL_2 =
	     ctop_app_appW4_fabWordsRemain - ctop_app_appW4_fabWordsCurReq ;
  assign MUX_ctop_app_appW4_mesgCount$write_1__VAL_1 =
	     ctop_app_appW4_mesgCount + 32'd1 ;
  assign MUX_ctop_app_appW4_mesgLength$write_1__VAL_3 =
	     { 1'd1, mlp1B__h234884 } ;
  assign MUX_ctop_app_appW4_mesgLength$write_1__VAL_4 =
	     (ctop_app_appW4_wsiS_reqFifo$D_OUT[11:8] == 4'd0) ?
	       15'd16384 :
	       { 1'd1, ctop_app_appW4_wsiS_reqFifo$D_OUT[55:44], 2'd0 } ;
  assign MUX_ctop_app_appW4_mesgReqAddr$write_1__VAL_2 =
	     ctop_app_appW4_mesgReqAddr +
	     { ctop_app_appW4_fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_ctop_app_appW4_opcode$write_1__VAL_3 =
	     { 1'd1, ctop_app_appW4_wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_ctop_app_appW4_thisMesg$write_1__VAL_1 =
	     { ctop_app_appW4_mesgCount[7:0],
	       x__h234053,
	       x_length__h234049 } ;
  assign MUX_ctop_app_appW4_thisMesg$write_1__VAL_2 =
	     { ctop_app_appW4_mesgCount[7:0],
	       ctop_app_appW4_wmi_sFlagReg[31:24],
	       ctop_app_appW4_wmi_sFlagReg[15:0] } ;
  assign MUX_ctop_app_appW4_unrollCnt$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_sFlagReg[23:0] == 24'd0) ?
	       16'd1 :
	       ctop_app_appW4_wmi_sFlagReg[17:2] ;
  assign MUX_ctop_app_appW4_unrollCnt$write_1__VAL_2 =
	     ctop_app_appW4_unrollCnt - 16'd1 ;
  assign MUX_ctop_app_appW4_wci_illegalEdge$write_1__VAL_2 =
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_ctop_app_appW4_wci_respF_c_r$write_1__VAL_1 =
	     ctop_app_appW4_wci_respF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW4_wci_respF_c_r$write_1__VAL_2 =
	     ctop_app_appW4_wci_respF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_1 =
	     (ctop_app_appW4_wci_respF_c_r == 2'd1) ?
	       MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 :
	       ctop_app_appW4_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete or
	  MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW4_wci_cfrd or
	  MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete:
	  MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW4_wci_cfrd:
	  MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wci_cfwr:
	  MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_ctop_app_appW4_wci_respF_q_1$write_1__VAL_1 =
	     (ctop_app_appW4_wci_respF_c_r == 2'd2) ?
	       MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_1 =
	     ctop_app_appW4_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_ctop_app_appW4_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, x_data__h236316 } ;
  assign MUX_ctop_app_appW4_wmi_dhF_c_r$write_1__VAL_1 =
	     ctop_app_appW4_wmi_dhF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_dhF_c_r$write_1__VAL_2 =
	     ctop_app_appW4_wmi_dhF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_dhF_c_r == 2'd1) ?
	       MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2 :
	       ctop_app_appW4_wmi_dhF_q_1 ;
  assign MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise ?
	       MUX_ctop_app_appW4_wmi_dhF_x_wire$wset_1__VAL_1 :
	       MUX_ctop_app_appW4_wmi_dhF_x_wire$wset_1__VAL_2 ;
  assign MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_dhF_c_r == 2'd2) ?
	       MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2 :
	       38'h0AAAAAAAAA ;
  assign MUX_ctop_app_appW4_wmi_dhF_x_wire$wset_1__VAL_1 =
	     { 1'd1,
	       ctop_app_appW4_wsiWordsRemain == 12'd1,
	       ctop_app_appW4_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_ctop_app_appW4_wmi_dhF_x_wire$wset_1__VAL_2 =
	     { 1'd1,
	       ctop_app_appW4_wsiS_reqFifo$D_OUT[57],
	       ctop_app_appW4_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_c_r$write_1__VAL_1 =
	     ctop_app_appW4_wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_c_r$write_1__VAL_2 =
	     ctop_app_appW4_wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_mFlagF_c_r == 2'd1) ?
	       value__h221012 :
	       ctop_app_appW4_wmi_mFlagF_q_1 ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_mFlagF_c_r == 2'd2) ?
	       value__h221012 :
	       32'd0 ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { x__h234053, mesgMetaF_length__h235030 } ;
  assign MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3 =
	     { x__h234053, mesgMetaF_length__h234294 } ;
  assign MUX_ctop_app_appW4_wmi_reqF_c_r$write_1__VAL_1 =
	     ctop_app_appW4_wmi_reqF_c_r + 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_reqF_c_r$write_1__VAL_2 =
	     ctop_app_appW4_wmi_reqF_c_r - 2'd1 ;
  assign MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_reqF_c_r == 2'd1) ?
	       MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 :
	       ctop_app_appW4_wmi_reqF_q_1 ;
  always@(WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest or
	  MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise or
	  MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise or
	  MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest:
	  MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise:
	  MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise:
	  MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3;
      default: MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__VAL_1 =
	     (ctop_app_appW4_wmi_reqF_c_r == 2'd2) ?
	       MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 :
	       32'd178956970 ;
  assign MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5,
	       x__h232754,
	       1'b0,
	       ctop_app_appW4_mesgReqAddr,
	       ctop_app_appW4_fabWordsCurReq[11:0] } ;
  assign MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 20'd229376, bl__h234156 } ;
  assign MUX_ctop_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3 =
	     { 4'd3,
	       ctop_app_appW4_wsiS_reqFifo$D_OUT[57],
	       1'b0,
	       addr__h234900,
	       12'd1 } ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     ctop_app_appW4_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     ctop_app_appW4_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (ctop_app_appW4_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       ctop_app_appW4_wsiM_reqFifo_q_1 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       ctop_app_appW4_wsiS_reqFifo$D_OUT :
	       MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (ctop_app_appW4_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (ctop_app_appW4_respF_rCache[73] &&
	      ctop_app_appW4_respF_rCache[72:61] ==
	      ctop_app_appW4_respF_rRdPtr) ?
	       ctop_app_appW4_respF_rCache[60:0] :
	       ctop_app_appW4_respF_memory$DOB ;
  assign MUX_ctop_app_appW4_wsiWordsRemain$write_1__VAL_2 =
	     ctop_app_appW4_wsiWordsRemain - 12'd1 ;
  assign MUX_ctop_inf_dp0_bml_crdBuf_value$write_1__VAL_3 =
	     ctop_inf_dp0_bml_crdBuf_value_974_EQ_ctop_inf__ETC___d8451 ?
	       16'd0 :
	       ctop_inf_dp0_bml_crdBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp0_bml_fabBuf_value$write_1__VAL_3 =
	     ctop_inf_dp0_bml_fabBuf_value_959_EQ_ctop_inf__ETC___d7529 ?
	       16'd0 :
	       ctop_inf_dp0_bml_fabBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__VAL_1 =
	     (ctop_inf_dp0_bml_fabAvail && !ctop_inf_dp0_bml_remStart) ?
	       x__h82173 :
	       x__h82178 ;
  assign MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__VAL_2 =
	     (ctop_inf_dp0_dpControl[3:2] == 2'd1) ? x__h80930 : 16'd0 ;
  assign MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_1 =
	     ctop_inf_dp0_bml_fabBuf_value_959_EQ_ctop_inf__ETC___d7529 ?
	       ctop_inf_dp0_bml_fabFlowBase :
	       ctop_inf_dp0_bml_fabFlowAddr_031_PLUS_ctop_inf_ETC___d8255 ;
  assign MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_3 =
	     ctop_inf_dp0_bml_crdBuf_value_974_EQ_ctop_inf__ETC___d8451 ?
	       ctop_inf_dp0_bml_fabFlowBase :
	       ctop_inf_dp0_bml_fabFlowAddr_031_PLUS_ctop_inf_ETC___d8255 ;
  assign MUX_ctop_inf_dp0_bml_fabMesgAddr$write_1__VAL_1 =
	     ctop_inf_dp0_bml_fabBuf_value_959_EQ_ctop_inf__ETC___d7529 ?
	       ctop_inf_dp0_bml_fabMesgBase :
	       ctop_inf_dp0_bml_fabMesgAddr + ctop_inf_dp0_bml_fabMesgSize ;
  assign MUX_ctop_inf_dp0_bml_fabMetaAddr$write_1__VAL_1 =
	     ctop_inf_dp0_bml_fabBuf_value_959_EQ_ctop_inf__ETC___d7529 ?
	       ctop_inf_dp0_bml_fabMetaBase :
	       ctop_inf_dp0_bml_fabMetaAddr + ctop_inf_dp0_bml_fabMetaSize ;
  assign MUX_ctop_inf_dp0_bml_lclBuf_value$write_1__VAL_3 =
	     ctop_inf_dp0_bml_lclBuf_value_929_EQ_ctop_inf__ETC___d8466 ?
	       16'd0 :
	       ctop_inf_dp0_bml_lclBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_ctop_inf_dp0_bml_dpControl_wget__992_BITS_1_ETC___d2069 &&
	      !ctop_inf_dp0_bml_lclBufStart) ?
	       x__h82054 :
	       x__h82059 ;
  assign MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__VAL_2 =
	     (ctop_inf_dp0_dpControl[3:2] == 2'd1) ?
	       ctop_inf_dp0_bml_lclNumBufs :
	       16'd0 ;
  assign MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__VAL_1 =
	     ctop_inf_dp0_bml_lclBufDone_016_AND_IF_ctop_in_ETC___d7433 ?
	       x__h82131 :
	       x__h82136 ;
  assign MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__VAL_2 =
	     (ctop_inf_dp0_dpControl[3:2] == 2'd1) ?
	       16'd0 :
	       ctop_inf_dp0_bml_lclNumBufs ;
  assign MUX_ctop_inf_dp0_bml_lclCredit$write_1__VAL_1 =
	     (ctop_inf_dp0_bml_lclBufDone && !ctop_inf_dp0_bml_remStart) ?
	       x__h82211 :
	       x__h82216 ;
  assign MUX_ctop_inf_dp0_bml_lclMesgAddr$write_1__VAL_2 =
	     ctop_inf_dp0_bml_lclBuf_value_929_EQ_ctop_inf__ETC___d8466 ?
	       ctop_inf_dp0_bml_mesgBase :
	       ctop_inf_dp0_bml_lclMesgAddr + ctop_inf_dp0_bml_mesgSize ;
  assign MUX_ctop_inf_dp0_bml_lclMetaAddr$write_1__VAL_2 =
	     ctop_inf_dp0_bml_lclBuf_value_929_EQ_ctop_inf__ETC___d8466 ?
	       ctop_inf_dp0_bml_metaBase :
	       ctop_inf_dp0_bml_lclMetaAddr + ctop_inf_dp0_bml_metaSize ;
  assign MUX_ctop_inf_dp0_bml_remBuf_value$write_1__VAL_3 =
	     ctop_inf_dp0_bml_remBuf_value_944_EQ_ctop_inf__ETC___d7522 ?
	       16'd0 :
	       ctop_inf_dp0_bml_remBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp0_bml_remMesgAddr$write_1__VAL_2 =
	     ctop_inf_dp0_bml_remBuf_value_944_EQ_ctop_inf__ETC___d7522 ?
	       ctop_inf_dp0_bml_mesgBase :
	       ctop_inf_dp0_bml_remMesgAddr + ctop_inf_dp0_bml_mesgSize ;
  assign MUX_ctop_inf_dp0_bml_remMetaAddr$write_1__VAL_2 =
	     ctop_inf_dp0_bml_remBuf_value_944_EQ_ctop_inf__ETC___d7522 ?
	       ctop_inf_dp0_bml_metaBase :
	       ctop_inf_dp0_bml_remMetaAddr + ctop_inf_dp0_bml_metaSize ;
  always@(idx__h49806 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  ctop_inf_dp0_tlp_writeDWAddr or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h49806)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h56869 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  ctop_inf_dp0_tlp_readNxtDWAddr or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h56869)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1 =
	     { ctop_inf_dp0_tlp_mReqF$D_OUT[7:0],
	       ctop_inf_dp0_tlp_mReqF$D_OUT[15:8],
	       ctop_inf_dp0_tlp_mReqF$D_OUT[23:16],
	       ctop_inf_dp0_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681[7:0],
	       IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681[15:8],
	       IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681[23:16],
	       IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681[31:24] } ;
  assign MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1 =
	     ctop_inf_dp0_wmi_lclMesgAddr[14:4] +
	     { 1'd0, ctop_inf_dp0_wmi_addr[13:4] } ;
  always@(idx__h52029 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  ctop_inf_dp0_tlp_writeDWAddr or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h52029)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h57337 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  ctop_inf_dp0_tlp_readNxtDWAddr or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h57337)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp0_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682[7:0],
	       IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682[15:8],
	       IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682[23:16],
	       IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682[31:24] } ;
  always@(idx__h53325 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  ctop_inf_dp0_tlp_writeDWAddr or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h53325)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h57710 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  ctop_inf_dp0_tlp_readNxtDWAddr or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h57710)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp0_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683[7:0],
	       IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683[15:8],
	       IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683[23:16],
	       IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683[31:24] } ;
  always@(idx__h54621 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  ctop_inf_dp0_tlp_writeDWAddr or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h54621)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h58083 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  ctop_inf_dp0_tlp_readNxtDWAddr or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h58083)
      2'd0:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp0_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684[7:0],
	       IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684[15:8],
	       IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684[23:16],
	       IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684[31:24] } ;
  assign MUX_ctop_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370 &&
	     ctop_inf_dp0_tlp_dmaPullRemainDWLen_073_ULE_ct_ETC___d8259 ;
  assign MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370 ?
	       ctop_inf_dp0_tlp_dmaPullRemainDWLen -
	       ctop_inf_dp0_tlp_dmaPullRemainDWSub :
	       ctop_inf_dp0_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_ctop_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370 ?
	       10'd0 :
	       ctop_inf_dp0_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_fabMesgAccu + y__h31820 ;
  assign MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3 =
	     ctop_inf_dp0_tlp_fabMesgAccu + y__h44203 ;
  assign MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h28116,
	       opcode__h28053,
	       nowMS__h28054,
	       nowLS__h28055 } ;
  assign MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_2 =
	     { 1'd1,
	       x__h40927,
	       opcode__h40895,
	       nowMS__h40896,
	       nowLS__h40897 } ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_1 =
	     ctop_inf_dp0_tlp_inF$D_OUT[152] ?
	       (ctop_inf_dp0_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    ctop_inf_dp0_tlp_inF$D_OUT[46:34],
		    ctop_inf_dp0_tlp_inF$D_OUT[105:96],
		    ctop_inf_dp0_tlp_inF$D_OUT[67:64],
		    ctop_inf_dp0_tlp_inF$D_OUT[71:68],
		    ctop_inf_dp0_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    ctop_inf_dp0_tlp_inF$D_OUT[95:80],
		    ctop_inf_dp0_tlp_inF$D_OUT[46:34],
		    ctop_inf_dp0_tlp_inF$D_OUT[105:96],
		    ctop_inf_dp0_tlp_inF$D_OUT[67:64],
		    ctop_inf_dp0_tlp_inF$D_OUT[71:68],
		    ctop_inf_dp0_tlp_inF$D_OUT[79:72],
		    ctop_inf_dp0_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, ctop_inf_dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       ctop_inf_dp0_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       ctop_inf_dp0_tlp_remMesgAccu[14:2],
	       thisRequestLength__h31269[11:2],
	       8'd255,
	       rreq_tag__h31498,
	       3'h2 } ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       ctop_inf_dp0_tlp_remMetaAddr[14:2],
	       18'd1279,
	       ctop_inf_dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       ctop_inf_dp0_tlp_remMesgAccu[14:2],
	       ctop_inf_dp0_tlp_inF$D_OUT[105:96],
	       8'd255,
	       ctop_inf_dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_6 =
	     { 2'd1, ctop_inf_dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_ctop_inf_dp0_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       ctop_inf_dp0_tlp_readReq$D_OUT[59:42],
	       ctop_inf_dp0_tlp_readReq$D_OUT[28:19],
	       lowAddr__h58984,
	       byteCount__h58985,
	       ctop_inf_dp0_tlp_readReq$D_OUT[10:0],
	       rresp_data__h59027 } ;
  assign MUX_ctop_inf_dp0_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       ctop_inf_dp0_tlp_readReq$D_OUT[59:58],
	       ctop_inf_dp0_tlp_readReq$D_OUT[10:3],
	       rdata__h64353 } ;
  assign MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_mesgComplReceived + y__h45392 ;
  assign MUX_ctop_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { ctop_inf_dp0_tlp_inF$D_OUT[8],
	       ctop_inf_dp0_tlp_inF$D_OUT[23:16],
	       ctop_inf_dp0_tlp_inF$D_OUT[31:24] } ;
  assign MUX_ctop_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_mesgLengthRemainPull - y__h44132 ;
  assign MUX_ctop_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { ctop_inf_dp0_tlp_mRespF$D_OUT[8],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[23:16],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_ctop_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_mesgLengthRemainPush - y__h31309 ;
  assign MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_outDwRemain - 10'd4 ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_1 =
	     { 1'd1,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h31673 } ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_2 =
	     { 25'd16973823, w_data__h32651 } ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_3 =
	     { 25'd8585200, w_data__h33713 } ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_4 =
	     { 25'd25362416, w_data__h38617 } ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_5 =
	     { 25'd25362416, w_data__h44388 } ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h47465 } ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830,
	       7'h02,
	       w_be__h32225,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_8 =
	     { 25'd25296895, w_data__h36433 } ;
  assign MUX_ctop_inf_dp0_tlp_postSeqDwell$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_postSeqDwell - 4'd1 ;
  assign MUX_ctop_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_ctop_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_ctop_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_ctop_inf_dp0_tlp_readRemainDWLen$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_readRemainDWLen$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_remMesgAccu + y__h31451 ;
  assign MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_3 =
	     ctop_inf_dp0_tlp_remMesgAccu + y__h44714 ;
  assign MUX_ctop_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370 ||
	     !ctop_inf_dp0_tlp_dmaPullRemainDWLen_073_ULE_ct_ETC___d8259 ;
  assign MUX_ctop_inf_dp0_tlp_srcMesgAccu$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_srcMesgAccu + y__h31403 ;
  assign MUX_ctop_inf_dp0_tlp_writeDWAddr$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_ctop_inf_dp0_tlp_writeDWAddr$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_writeDWAddr + 13'd4 ;
  assign MUX_ctop_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_1 =
	     ctop_inf_dp0_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_ctop_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_2 =
	     ctop_inf_dp0_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_ctop_inf_dp0_wci_illegalEdge$write_1__VAL_2 =
	     ctop_inf_dp0_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     ctop_inf_dp0_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     ctop_inf_dp0_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_ctop_inf_dp0_wci_respF_c_r$write_1__VAL_1 =
	     ctop_inf_dp0_wci_respF_c_r + 2'd1 ;
  assign MUX_ctop_inf_dp0_wci_respF_c_r$write_1__VAL_2 =
	     ctop_inf_dp0_wci_respF_c_r - 2'd1 ;
  assign MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_1 =
	     (ctop_inf_dp0_wci_respF_c_r == 2'd1) ?
	       MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 :
	       ctop_inf_dp0_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete or
	  MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd or
	  MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete:
	  MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd:
	  MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr:
	  MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_ctop_inf_dp0_wci_respF_q_1$write_1__VAL_1 =
	     (ctop_inf_dp0_wci_respF_c_r == 2'd2) ?
	       MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_1 =
	     ctop_inf_dp0_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_ctop_inf_dp0_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h83707 } ;
  assign MUX_ctop_inf_dp0_wmi_addr$write_1__VAL_2 =
	     ctop_inf_dp0_wmi_addr + 14'd4 ;
  assign MUX_ctop_inf_dp0_wmi_bufDwell$write_1__VAL_3 =
	     ctop_inf_dp0_wmi_bufDwell - 2'd1 ;
  assign MUX_ctop_inf_dp0_wmi_bytesRemainReq$write_1__VAL_1 =
	     ctop_inf_dp0_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_ctop_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2 =
	     { ctop_inf_dp0_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_ctop_inf_dp0_wmi_bytesRemainResp$write_1__VAL_2 =
	     ctop_inf_dp0_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_ctop_inf_dp0_wmi_mesgCount$write_1__VAL_1 =
	     ctop_inf_dp0_wmi_mesgCount + 32'd1 ;
  assign MUX_ctop_inf_dp0_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h76742,
	       y_avValue__h76762,
	       y_avValue__h76782,
	       y_avValue__h76802 } ;
  assign MUX_ctop_inf_dp0_wmi_p4B$write_1__VAL_2 =
	     ctop_inf_dp0_wmi_p4B + 2'd1 ;
  assign MUX_ctop_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     ctop_inf_dp0_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_ctop_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     ctop_inf_dp0_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       ctop_inf_dp0_wmi_wmi_respF_q_1 ;
  assign MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 =
	     { 2'd1, rdata__h76906 } ;
  assign MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_ctop_inf_dp1_bml_crdBuf_value$write_1__VAL_3 =
	     ctop_inf_dp1_bml_crdBuf_value_160_EQ_ctop_inf__ETC___d8507 ?
	       16'd0 :
	       ctop_inf_dp1_bml_crdBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp1_bml_fabBuf_value$write_1__VAL_3 =
	     ctop_inf_dp1_bml_fabBuf_value_145_EQ_ctop_inf__ETC___d7530 ?
	       16'd0 :
	       ctop_inf_dp1_bml_fabBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__VAL_1 =
	     (ctop_inf_dp1_bml_fabAvail && !ctop_inf_dp1_bml_remStart) ?
	       x__h161231 :
	       x__h161236 ;
  assign MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__VAL_2 =
	     (ctop_inf_dp1_dpControl[3:2] == 2'd1) ? x__h159988 : 16'd0 ;
  assign MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_1 =
	     ctop_inf_dp1_bml_fabBuf_value_145_EQ_ctop_inf__ETC___d7530 ?
	       ctop_inf_dp1_bml_fabFlowBase :
	       ctop_inf_dp1_bml_fabFlowAddr_217_PLUS_ctop_inf_ETC___d8256 ;
  assign MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_3 =
	     ctop_inf_dp1_bml_crdBuf_value_160_EQ_ctop_inf__ETC___d8507 ?
	       ctop_inf_dp1_bml_fabFlowBase :
	       ctop_inf_dp1_bml_fabFlowAddr_217_PLUS_ctop_inf_ETC___d8256 ;
  assign MUX_ctop_inf_dp1_bml_fabMesgAddr$write_1__VAL_1 =
	     ctop_inf_dp1_bml_fabBuf_value_145_EQ_ctop_inf__ETC___d7530 ?
	       ctop_inf_dp1_bml_fabMesgBase :
	       ctop_inf_dp1_bml_fabMesgAddr + ctop_inf_dp1_bml_fabMesgSize ;
  assign MUX_ctop_inf_dp1_bml_fabMetaAddr$write_1__VAL_1 =
	     ctop_inf_dp1_bml_fabBuf_value_145_EQ_ctop_inf__ETC___d7530 ?
	       ctop_inf_dp1_bml_fabMetaBase :
	       ctop_inf_dp1_bml_fabMetaAddr + ctop_inf_dp1_bml_fabMetaSize ;
  assign MUX_ctop_inf_dp1_bml_lclBuf_value$write_1__VAL_3 =
	     ctop_inf_dp1_bml_lclBuf_value_115_EQ_ctop_inf__ETC___d8518 ?
	       16'd0 :
	       ctop_inf_dp1_bml_lclBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_ctop_inf_dp1_bml_dpControl_wget__178_BITS_1_ETC___d4255 &&
	      !ctop_inf_dp1_bml_lclBufStart) ?
	       x__h161112 :
	       x__h161117 ;
  assign MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__VAL_2 =
	     (ctop_inf_dp1_dpControl[3:2] == 2'd1) ?
	       ctop_inf_dp1_bml_lclNumBufs :
	       16'd0 ;
  assign MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__VAL_1 =
	     ctop_inf_dp1_bml_lclBufDone_202_AND_IF_ctop_in_ETC___d7462 ?
	       x__h161189 :
	       x__h161194 ;
  assign MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__VAL_2 =
	     (ctop_inf_dp1_dpControl[3:2] == 2'd1) ?
	       16'd0 :
	       ctop_inf_dp1_bml_lclNumBufs ;
  assign MUX_ctop_inf_dp1_bml_lclCredit$write_1__VAL_1 =
	     (ctop_inf_dp1_bml_lclBufDone && !ctop_inf_dp1_bml_remStart) ?
	       x__h161269 :
	       x__h161274 ;
  assign MUX_ctop_inf_dp1_bml_lclMesgAddr$write_1__VAL_2 =
	     ctop_inf_dp1_bml_lclBuf_value_115_EQ_ctop_inf__ETC___d8518 ?
	       ctop_inf_dp1_bml_mesgBase :
	       ctop_inf_dp1_bml_lclMesgAddr + ctop_inf_dp1_bml_mesgSize ;
  assign MUX_ctop_inf_dp1_bml_lclMetaAddr$write_1__VAL_2 =
	     ctop_inf_dp1_bml_lclBuf_value_115_EQ_ctop_inf__ETC___d8518 ?
	       ctop_inf_dp1_bml_metaBase :
	       ctop_inf_dp1_bml_lclMetaAddr + ctop_inf_dp1_bml_metaSize ;
  assign MUX_ctop_inf_dp1_bml_remBuf_value$write_1__VAL_3 =
	     ctop_inf_dp1_bml_remBuf_value_130_EQ_ctop_inf__ETC___d8519 ?
	       16'd0 :
	       ctop_inf_dp1_bml_remBuf_value + 16'd1 ;
  assign MUX_ctop_inf_dp1_bml_remMesgAddr$write_1__VAL_2 =
	     ctop_inf_dp1_bml_remBuf_value_130_EQ_ctop_inf__ETC___d8519 ?
	       ctop_inf_dp1_bml_mesgBase :
	       ctop_inf_dp1_bml_remMesgAddr + ctop_inf_dp1_bml_mesgSize ;
  assign MUX_ctop_inf_dp1_bml_remMetaAddr$write_1__VAL_2 =
	     ctop_inf_dp1_bml_remBuf_value_130_EQ_ctop_inf__ETC___d8519 ?
	       ctop_inf_dp1_bml_metaBase :
	       ctop_inf_dp1_bml_remMetaAddr + ctop_inf_dp1_bml_metaSize ;
  always@(idx__h128867 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  ctop_inf_dp1_tlp_writeDWAddr or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h128867)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h135930 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  ctop_inf_dp1_tlp_readNxtDWAddr or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h135930)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1 =
	     { ctop_inf_dp1_tlp_mReqF$D_OUT[7:0],
	       ctop_inf_dp1_tlp_mReqF$D_OUT[15:8],
	       ctop_inf_dp1_tlp_mReqF$D_OUT[23:16],
	       ctop_inf_dp1_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686[7:0],
	       IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686[15:8],
	       IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686[23:16],
	       IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686[31:24] } ;
  assign MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1 =
	     ctop_inf_dp1_wmi_lclMesgAddr[14:4] +
	     { 1'd0, ctop_inf_dp1_wmi_addr[13:4] } ;
  always@(idx__h131090 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  ctop_inf_dp1_tlp_writeDWAddr or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h131090)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h136398 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  ctop_inf_dp1_tlp_readNxtDWAddr or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h136398)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp1_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687[7:0],
	       IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687[15:8],
	       IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687[23:16],
	       IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687[31:24] } ;
  always@(idx__h132386 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  ctop_inf_dp1_tlp_writeDWAddr or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h132386)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h136771 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  ctop_inf_dp1_tlp_readNxtDWAddr or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h136771)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp1_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688[7:0],
	       IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688[15:8],
	       IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688[23:16],
	       IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688[31:24] } ;
  always@(idx__h133682 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  ctop_inf_dp1_tlp_writeDWAddr or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h133682)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h137144 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  ctop_inf_dp1_tlp_readNxtDWAddr or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h137144)
      2'd0:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_ctop_inf_dp1_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689[7:0],
	       IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689[15:8],
	       IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689[23:16],
	       IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689[31:24] } ;
  assign MUX_ctop_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261 &&
	     ctop_inf_dp1_tlp_dmaPullRemainDWLen_259_ULE_ct_ETC___d8260 ;
  assign MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261 ?
	       ctop_inf_dp1_tlp_dmaPullRemainDWLen -
	       ctop_inf_dp1_tlp_dmaPullRemainDWSub :
	       ctop_inf_dp1_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_ctop_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261 ?
	       10'd0 :
	       ctop_inf_dp1_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_fabMesgAccu + y__h110889 ;
  assign MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3 =
	     ctop_inf_dp1_tlp_fabMesgAccu + y__h123264 ;
  assign MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h107185,
	       opcode__h107122,
	       nowMS__h107123,
	       nowLS__h107124 } ;
  assign MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_2 =
	     { 1'd1,
	       x__h119988,
	       opcode__h119956,
	       nowMS__h119957,
	       nowLS__h119958 } ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_1 =
	     ctop_inf_dp1_tlp_inF$D_OUT[152] ?
	       (ctop_inf_dp1_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    ctop_inf_dp1_tlp_inF$D_OUT[46:34],
		    ctop_inf_dp1_tlp_inF$D_OUT[105:96],
		    ctop_inf_dp1_tlp_inF$D_OUT[67:64],
		    ctop_inf_dp1_tlp_inF$D_OUT[71:68],
		    ctop_inf_dp1_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    ctop_inf_dp1_tlp_inF$D_OUT[95:80],
		    ctop_inf_dp1_tlp_inF$D_OUT[46:34],
		    ctop_inf_dp1_tlp_inF$D_OUT[105:96],
		    ctop_inf_dp1_tlp_inF$D_OUT[67:64],
		    ctop_inf_dp1_tlp_inF$D_OUT[71:68],
		    ctop_inf_dp1_tlp_inF$D_OUT[79:72],
		    ctop_inf_dp1_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, ctop_inf_dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       ctop_inf_dp1_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       ctop_inf_dp1_tlp_remMesgAccu[14:2],
	       thisRequestLength__h110338[11:2],
	       8'd255,
	       rreq_tag__h110567,
	       3'h2 } ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       ctop_inf_dp1_tlp_remMetaAddr[14:2],
	       18'd1279,
	       ctop_inf_dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       ctop_inf_dp1_tlp_remMesgAccu[14:2],
	       ctop_inf_dp1_tlp_inF$D_OUT[105:96],
	       8'd255,
	       ctop_inf_dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_6 =
	     { 2'd1, ctop_inf_dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_ctop_inf_dp1_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       ctop_inf_dp1_tlp_readReq$D_OUT[59:42],
	       ctop_inf_dp1_tlp_readReq$D_OUT[28:19],
	       lowAddr__h138045,
	       byteCount__h138046,
	       ctop_inf_dp1_tlp_readReq$D_OUT[10:0],
	       rresp_data__h138088 } ;
  assign MUX_ctop_inf_dp1_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       ctop_inf_dp1_tlp_readReq$D_OUT[59:58],
	       ctop_inf_dp1_tlp_readReq$D_OUT[10:3],
	       rdata__h143414 } ;
  assign MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_mesgComplReceived + y__h124453 ;
  assign MUX_ctop_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { ctop_inf_dp1_tlp_inF$D_OUT[8],
	       ctop_inf_dp1_tlp_inF$D_OUT[23:16],
	       ctop_inf_dp1_tlp_inF$D_OUT[31:24] } ;
  assign MUX_ctop_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_mesgLengthRemainPull - y__h123193 ;
  assign MUX_ctop_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { ctop_inf_dp1_tlp_mRespF$D_OUT[8],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[23:16],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_ctop_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_mesgLengthRemainPush - y__h110378 ;
  assign MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_outDwRemain - 10'd4 ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_1 =
	     { 1'd1,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h110742 } ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_2 =
	     { 25'd16973823, w_data__h111720 } ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_3 =
	     { 25'd8585200, w_data__h112782 } ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_4 =
	     { 25'd25362416, w_data__h117686 } ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_5 =
	     { 25'd25362416, w_data__h123449 } ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h126526 } ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372,
	       7'h02,
	       w_be__h111294,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_8 =
	     { 25'd25296895, w_data__h115502 } ;
  assign MUX_ctop_inf_dp1_tlp_postSeqDwell$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_postSeqDwell - 4'd1 ;
  assign MUX_ctop_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_ctop_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_ctop_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_ctop_inf_dp1_tlp_readRemainDWLen$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_readRemainDWLen$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_remMesgAccu + y__h110520 ;
  assign MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_3 =
	     ctop_inf_dp1_tlp_remMesgAccu + y__h123775 ;
  assign MUX_ctop_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261 ||
	     !ctop_inf_dp1_tlp_dmaPullRemainDWLen_259_ULE_ct_ETC___d8260 ;
  assign MUX_ctop_inf_dp1_tlp_srcMesgAccu$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_srcMesgAccu + y__h110472 ;
  assign MUX_ctop_inf_dp1_tlp_writeDWAddr$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_ctop_inf_dp1_tlp_writeDWAddr$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_writeDWAddr + 13'd4 ;
  assign MUX_ctop_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_1 =
	     ctop_inf_dp1_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_ctop_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_2 =
	     ctop_inf_dp1_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_ctop_inf_dp1_wci_illegalEdge$write_1__VAL_2 =
	     ctop_inf_dp1_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     ctop_inf_dp1_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     ctop_inf_dp1_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_ctop_inf_dp1_wci_respF_c_r$write_1__VAL_1 =
	     ctop_inf_dp1_wci_respF_c_r + 2'd1 ;
  assign MUX_ctop_inf_dp1_wci_respF_c_r$write_1__VAL_2 =
	     ctop_inf_dp1_wci_respF_c_r - 2'd1 ;
  assign MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_1 =
	     (ctop_inf_dp1_wci_respF_c_r == 2'd1) ?
	       MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 :
	       ctop_inf_dp1_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete or
	  MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd or
	  MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete:
	  MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd:
	  MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr:
	  MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_ctop_inf_dp1_wci_respF_q_1$write_1__VAL_1 =
	     (ctop_inf_dp1_wci_respF_c_r == 2'd2) ?
	       MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_1 =
	     ctop_inf_dp1_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_ctop_inf_dp1_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h162765 } ;
  assign MUX_ctop_inf_dp1_wmi_addr$write_1__VAL_1 =
	     ctop_inf_dp1_wmi_addr + 14'd4 ;
  assign MUX_ctop_inf_dp1_wmi_bufDwell$write_1__VAL_3 =
	     ctop_inf_dp1_wmi_bufDwell - 2'd1 ;
  assign MUX_ctop_inf_dp1_wmi_bytesRemainReq$write_1__VAL_1 =
	     ctop_inf_dp1_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_ctop_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2 =
	     { ctop_inf_dp1_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_ctop_inf_dp1_wmi_bytesRemainResp$write_1__VAL_2 =
	     ctop_inf_dp1_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_ctop_inf_dp1_wmi_mesgCount$write_1__VAL_1 =
	     ctop_inf_dp1_wmi_mesgCount + 32'd1 ;
  assign MUX_ctop_inf_dp1_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h155803,
	       y_avValue__h155823,
	       y_avValue__h155843,
	       y_avValue__h155863 } ;
  assign MUX_ctop_inf_dp1_wmi_p4B$write_1__VAL_2 =
	     ctop_inf_dp1_wmi_p4B + 2'd1 ;
  assign MUX_ctop_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     ctop_inf_dp1_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_ctop_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     ctop_inf_dp1_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       ctop_inf_dp1_wmi_wmi_respF_q_1 ;
  assign MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 =
	     { 2'd1, rdata__h155967 } ;
  assign MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_fI2P$enq_1__VAL_1 =
	     (i2pS[135:128] == 8'd0) ?
	       { i2pS[152:136], i2pS[127:64] } :
	       { i2pS[152], 1'd0, i2pS[150:136], i2pS[127:64] } ;
  assign MUX_p2iS$write_1__VAL_1 =
	     { fP2I$D_OUT[80:72], val_be__h245239, val_data__h245240 } ;
  assign MUX_p2iS$write_1__VAL_2 =
	     { Prelude_inst_changeSpecialWires_1_rg[80],
	       fP2I$D_OUT[79],
	       Prelude_inst_changeSpecialWires_1_rg[78:72],
	       wOut_be__h245345,
	       wOut_data__h245346 } ;

  // inlined wires
  assign pcie_irq_wInterruptRdyN$wget = pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pcie_irq_wInterruptDo$wget = pci0_pcie_ep$cfg_interrupt_do ;
  assign pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterA_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterA_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget =
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterA_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h7947[1] || ab__h7947[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_writeWithResp$wget = ab__h7947 ;
  assign ctop_inf_dp0_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h7947[1] || ab__h7947[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterB_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterB_outData_outData$wget =
	     y_avValue__h76742 ;
  assign ctop_inf_dp0_bram_serverAdapterB_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h9346[1] || ab__h9346[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_writeWithResp$wget = ab__h9346 ;
  assign ctop_inf_dp0_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h9346[1] || ab__h9346[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory_1$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterA_1_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget =
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory_1$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h10876[1] || ab__h10876[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_writeWithResp$wget = ab__h10876 ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h10876[1] || ab__h10876[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory_1$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterB_1_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h76762 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h12273[1] || ab__h12273[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_writeWithResp$wget = ab__h12273 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h12273[1] || ab__h12273[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory_2$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterA_2_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget =
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory_2$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h13803[1] || ab__h13803[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_writeWithResp$wget = ab__h13803 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h13803[1] || ab__h13803[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory_2$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterB_2_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h76782 ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h15200[1] || ab__h15200[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_writeWithResp$wget = ab__h15200 ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h15200[1] || ab__h15200[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory_3$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterA_3_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget =
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory_3$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h16730[1] || ab__h16730[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_writeWithResp$wget = ab__h16730 ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h16730[1] || ab__h16730[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$wget =
	     ctop_inf_dp0_bram_memory_3$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO &&
	     ctop_inf_dp0_bram_serverAdapterB_3_s1[0] ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h76802 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outData_outData$whas =
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h18127[1] || ab__h18127[0]) ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_2$whas =
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_writeWithResp$wget = ab__h18127 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h18127[1] || ab__h18127[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign ctop_inf_dp0_wci_wciReq$wget =
	     { ctop_inf_cp$wci_Vm_13_MCmd,
	       ctop_inf_cp$wci_Vm_13_MAddrSpace,
	       ctop_inf_cp$wci_Vm_13_MByteEn,
	       ctop_inf_cp$wci_Vm_13_MAddr,
	       ctop_inf_cp$wci_Vm_13_MData } ;
  assign ctop_inf_dp0_wci_wciReq$whas = 1'd1 ;
  assign ctop_inf_dp0_wci_respF_x_wire$wget =
	     MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 ;
  assign ctop_inf_dp0_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr ;
  assign ctop_inf_dp0_wci_wEdge$wget = ctop_inf_dp0_wci_reqF$D_OUT[36:34] ;
  assign ctop_inf_dp0_wci_wEdge$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start ;
  assign ctop_inf_dp0_wci_sFlagReg_1$wget = 1'b0 ;
  assign ctop_inf_dp0_wci_sFlagReg_1$whas = 1'b0 ;
  assign ctop_inf_dp0_wci_ctlAckReg_1$wget = 1'd1 ;
  assign ctop_inf_dp0_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;
  assign ctop_inf_dp0_wti_wtiReq$wget = 67'h0 ;
  assign ctop_inf_dp0_wti_wtiReq$whas = 1'b0 ;
  assign ctop_inf_dp0_tlp_remStart_1$wget = 1'd1 ;
  assign ctop_inf_dp0_tlp_remStart_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta ;
  assign ctop_inf_dp0_tlp_remDone_1$wget = 1'd1 ;
  assign ctop_inf_dp0_tlp_remDone_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody ;
  assign ctop_inf_dp0_tlp_nearBufReady_1$wget = 1'd1 ;
  assign ctop_inf_dp0_tlp_nearBufReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_rRdy_1 ;
  assign ctop_inf_dp0_tlp_farBufReady_1$wget = 1'd1 ;
  assign ctop_inf_dp0_tlp_farBufReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_rFRdy_1 ;
  assign ctop_inf_dp0_tlp_creditReady_1$wget = 1'd1 ;
  assign ctop_inf_dp0_tlp_creditReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_rCredit_1 ;
  assign ctop_inf_dp0_tlp_dpControl$wget = ctop_inf_dp0_dpControl ;
  assign ctop_inf_dp0_tlp_dpControl$whas = 1'd1 ;
  assign ctop_inf_dp0_tlp_pullTagMatch_1$wget =
	     tagm__h44508 == ctop_inf_dp0_tlp_inF$D_OUT[47:40] &&
	     ctop_inf_dp0_tlp_inF_first__68_BITS_63_TO_56_7_ETC___d980 ;
  assign ctop_inf_dp0_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag ;
  assign ctop_inf_dp0_wmi_wmi_wmiReq$wget =
	     { ctop_inf_dp0_wmi_Es_mCmd_w$wget,
	       ctop_app_appW2_wmi_reqF_q_0[28:0] } ;
  assign ctop_inf_dp0_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_wmi_wmiMFlag$wget =
	     ctop_app_appW2_wmi_sThreadBusy_d ?
	       32'd0 :
	       ctop_app_appW2_wmi_mFlagF_q_0 ;
  assign ctop_inf_dp0_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_wmi_wmiDh$wget =
	     { CAN_FIRE_RL_ctop_mDataVConnect,
	       ctop_app_appW2_wmi_dhF_q_0[36:0] } ;
  assign ctop_inf_dp0_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_wmi_respF_x_wire$wget =
	     MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign ctop_inf_dp0_wmi_wmi_respF_x_wire$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;
  assign ctop_inf_dp0_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign ctop_inf_dp0_wmi_wmi_operateD_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lbar ;
  assign ctop_inf_dp0_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign ctop_inf_dp0_wmi_wmi_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_mRstConnect ;
  assign ctop_inf_dp0_wmi_wmi_sThreadBusy_dw$wget =
	     ctop_inf_dp0_wmi_wmi_reqF_countReg > 2'd1 ;
  assign ctop_inf_dp0_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_req ;
  assign ctop_inf_dp0_wmi_wmi_sDataThreadBusy_dw$wget =
	     ctop_inf_dp0_wmi_wmi_dhF_countReg > 2'd1 ;
  assign ctop_inf_dp0_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_backpressure_dh ;
  assign ctop_inf_dp0_wmi_mesgStart_1$wget = 1'd1 ;
  assign ctop_inf_dp0_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     !ctop_inf_dp0_wmi_mesgBusy ;
  assign ctop_inf_dp0_wmi_mesgDone_1$wget = 1'd1 ;
  assign ctop_inf_dp0_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;
  assign ctop_inf_dp0_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign ctop_inf_dp0_wmi_mesgBufReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_rRdy ;
  assign ctop_inf_dp0_wmi_dpControl$wget = ctop_inf_dp0_dpControl ;
  assign ctop_inf_dp0_wmi_dpControl$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_nowW$wget = ctop_inf_dp0_wti_nowReq[63:0] ;
  assign ctop_inf_dp0_wmi_nowW$whas = 1'd1 ;
  assign ctop_inf_dp0_bml_lclBufStart_1$wget = 1'd1 ;
  assign ctop_inf_dp0_bml_lclBufStart_1$whas = ctop_inf_dp0_wmi_mesgStart ;
  assign ctop_inf_dp0_bml_lclBufDone_1$wget = 1'd1 ;
  assign ctop_inf_dp0_bml_lclBufDone_1$whas = ctop_inf_dp0_wmi_mesgDone ;
  assign ctop_inf_dp0_bml_remStart_1$wget = 1'd1 ;
  assign ctop_inf_dp0_bml_remStart_1$whas = ctop_inf_dp0_tlp_remStart ;
  assign ctop_inf_dp0_bml_remDone_1$wget = 1'd1 ;
  assign ctop_inf_dp0_bml_remDone_1$whas = ctop_inf_dp0_tlp_remDone ;
  assign ctop_inf_dp0_bml_fabDone_1$wget = 1'd1 ;
  assign ctop_inf_dp0_bml_fabDone_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     ctop_inf_dp0_dpControl[1:0] != 2'd1 ;
  assign ctop_inf_dp0_bml_fabAvail_1$wget = 1'd1 ;
  assign ctop_inf_dp0_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 ;
  assign ctop_inf_dp0_bml_dpControl$wget = ctop_inf_dp0_dpControl ;
  assign ctop_inf_dp0_bml_dpControl$whas = 1'd1 ;
  assign ctop_inf_dp0_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_13_MCmd ;
  assign ctop_inf_dp0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_13_MAddrSpace ;
  assign ctop_inf_dp0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_13_MAddr ;
  assign ctop_inf_dp0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_13_MData ;
  assign ctop_inf_dp0_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wci_Es_mByteEn_w$wget = ctop_inf_cp$wci_Vm_13_MByteEn ;
  assign ctop_inf_dp0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_Es_mCmd_w$wget =
	     ctop_app_appW2_wmi_sThreadBusy_d ?
	       3'd0 :
	       ctop_app_appW2_wmi_reqF_q_0[31:29] ;
  assign ctop_inf_dp0_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_Es_mReqInfo_w$wget =
	     ctop_app_appW2_wmi_reqF_q_0[27] ;
  assign ctop_inf_dp0_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_Es_mAddrSpace_w$wget =
	     ctop_app_appW2_wmi_reqF_q_0[26] ;
  assign ctop_inf_dp0_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_Es_mAddr_w$wget =
	     ctop_app_appW2_wmi_reqF_q_0[25:12] ;
  assign ctop_inf_dp0_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_Es_mBurstLength_w$wget =
	     ctop_app_appW2_wmi_reqF_q_0[11:0] ;
  assign ctop_inf_dp0_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_Es_mData_w$wget = ctop_app_appW2_wmi_dhF_q_0[35:4] ;
  assign ctop_inf_dp0_wmi_Es_mData_w$whas = 1'd1 ;
  assign ctop_inf_dp0_wmi_Es_mDataByteEn_w$wget =
	     ctop_app_appW2_wmi_dhF_q_0[3:0] ;
  assign ctop_inf_dp0_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterA_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterA_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget =
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterA_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h87043[1] || ab__h87043[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_writeWithResp$wget = ab__h87043 ;
  assign ctop_inf_dp1_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h87043[1] || ab__h87043[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterB_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterB_outData_outData$wget =
	     y_avValue__h155803 ;
  assign ctop_inf_dp1_bram_serverAdapterB_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h88442[1] || ab__h88442[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_writeWithResp$wget = ab__h88442 ;
  assign ctop_inf_dp1_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h88442[1] || ab__h88442[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory_1$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterA_1_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget =
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory_1$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h89972[1] || ab__h89972[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_writeWithResp$wget = ab__h89972 ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h89972[1] || ab__h89972[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory_1$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterB_1_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h155823 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h91369[1] || ab__h91369[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_writeWithResp$wget = ab__h91369 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h91369[1] || ab__h91369[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory_2$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterA_2_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget =
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory_2$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h92899[1] || ab__h92899[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_writeWithResp$wget = ab__h92899 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h92899[1] || ab__h92899[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory_2$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterB_2_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h155843 ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h94296[1] || ab__h94296[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_writeWithResp$wget = ab__h94296 ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h94296[1] || ab__h94296[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory_3$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterA_3_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget =
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory_3$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h95826[1] || ab__h95826[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_writeWithResp$wget = ab__h95826 ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h95826[1] || ab__h95826[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$wget =
	     ctop_inf_dp1_bram_memory_3$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO &&
	     ctop_inf_dp1_bram_serverAdapterB_3_s1[0] ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h155863 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outData_outData$whas =
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h97223[1] || ab__h97223[0]) ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_2$whas =
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_writeWithResp$wget = ab__h97223 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h97223[1] || ab__h97223[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign ctop_inf_dp1_wci_wciReq$wget =
	     { ctop_inf_cp$wci_Vm_14_MCmd,
	       ctop_inf_cp$wci_Vm_14_MAddrSpace,
	       ctop_inf_cp$wci_Vm_14_MByteEn,
	       ctop_inf_cp$wci_Vm_14_MAddr,
	       ctop_inf_cp$wci_Vm_14_MData } ;
  assign ctop_inf_dp1_wci_wciReq$whas = 1'd1 ;
  assign ctop_inf_dp1_wci_respF_x_wire$wget =
	     MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 ;
  assign ctop_inf_dp1_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr ;
  assign ctop_inf_dp1_wci_wEdge$wget = ctop_inf_dp1_wci_reqF$D_OUT[36:34] ;
  assign ctop_inf_dp1_wci_wEdge$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start ;
  assign ctop_inf_dp1_wci_sFlagReg_1$wget = 1'b0 ;
  assign ctop_inf_dp1_wci_sFlagReg_1$whas = 1'b0 ;
  assign ctop_inf_dp1_wci_ctlAckReg_1$wget = 1'd1 ;
  assign ctop_inf_dp1_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;
  assign ctop_inf_dp1_wti_wtiReq$wget = 67'h0 ;
  assign ctop_inf_dp1_wti_wtiReq$whas = 1'b0 ;
  assign ctop_inf_dp1_tlp_remStart_1$wget = 1'd1 ;
  assign ctop_inf_dp1_tlp_remStart_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta ;
  assign ctop_inf_dp1_tlp_remDone_1$wget = 1'd1 ;
  assign ctop_inf_dp1_tlp_remDone_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody ;
  assign ctop_inf_dp1_tlp_nearBufReady_1$wget = 1'd1 ;
  assign ctop_inf_dp1_tlp_nearBufReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_rRdy_1 ;
  assign ctop_inf_dp1_tlp_farBufReady_1$wget = 1'd1 ;
  assign ctop_inf_dp1_tlp_farBufReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_rFRdy_1 ;
  assign ctop_inf_dp1_tlp_creditReady_1$wget = 1'd1 ;
  assign ctop_inf_dp1_tlp_creditReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_rCredit_1 ;
  assign ctop_inf_dp1_tlp_dpControl$wget = ctop_inf_dp1_dpControl ;
  assign ctop_inf_dp1_tlp_dpControl$whas = 1'd1 ;
  assign ctop_inf_dp1_tlp_pullTagMatch_1$wget =
	     tagm__h123569 == ctop_inf_dp1_tlp_inF$D_OUT[47:40] &&
	     ctop_inf_dp1_tlp_inF_first__156_BITS_63_TO_56__ETC___d3166 ;
  assign ctop_inf_dp1_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag ;
  assign ctop_inf_dp1_wmi_wmi_wmiReq$wget =
	     { ctop_inf_dp1_wmi_Es_mCmd_w$wget,
	       ctop_app_appW4_wmi_reqF_q_0[28:0] } ;
  assign ctop_inf_dp1_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_wmi_wmiMFlag$wget =
	     ctop_app_appW4_wmi_sThreadBusy_d ?
	       32'd0 :
	       ctop_app_appW4_wmi_mFlagF_q_0 ;
  assign ctop_inf_dp1_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_wmi_wmiDh$wget =
	     { CAN_FIRE_RL_ctop_mDataVConnect_1,
	       ctop_app_appW4_wmi_dhF_q_0[36:0] } ;
  assign ctop_inf_dp1_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_wmi_respF_x_wire$wget =
	     MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign ctop_inf_dp1_wmi_wmi_respF_x_wire$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;
  assign ctop_inf_dp1_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign ctop_inf_dp1_wmi_wmi_operateD_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lbar ;
  assign ctop_inf_dp1_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign ctop_inf_dp1_wmi_wmi_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_mRstConnect_1 ;
  assign ctop_inf_dp1_wmi_wmi_sThreadBusy_dw$wget =
	     ctop_inf_dp1_wmi_wmi_reqF_countReg > 2'd1 ;
  assign ctop_inf_dp1_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_req ;
  assign ctop_inf_dp1_wmi_wmi_sDataThreadBusy_dw$wget =
	     ctop_inf_dp1_wmi_wmi_dhF_countReg > 2'd1 ;
  assign ctop_inf_dp1_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_backpressure_dh ;
  assign ctop_inf_dp1_wmi_mesgStart_1$wget = 1'd1 ;
  assign ctop_inf_dp1_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     !ctop_inf_dp1_wmi_mesgBusy ;
  assign ctop_inf_dp1_wmi_mesgDone_1$wget = 1'd1 ;
  assign ctop_inf_dp1_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;
  assign ctop_inf_dp1_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign ctop_inf_dp1_wmi_mesgBufReady_1$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_rRdy ;
  assign ctop_inf_dp1_wmi_dpControl$wget = ctop_inf_dp1_dpControl ;
  assign ctop_inf_dp1_wmi_dpControl$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_nowW$wget = ctop_inf_dp1_wti_nowReq[63:0] ;
  assign ctop_inf_dp1_wmi_nowW$whas = 1'd1 ;
  assign ctop_inf_dp1_bml_lclBufStart_1$wget = 1'd1 ;
  assign ctop_inf_dp1_bml_lclBufStart_1$whas = ctop_inf_dp1_wmi_mesgStart ;
  assign ctop_inf_dp1_bml_lclBufDone_1$wget = 1'd1 ;
  assign ctop_inf_dp1_bml_lclBufDone_1$whas = ctop_inf_dp1_wmi_mesgDone ;
  assign ctop_inf_dp1_bml_remStart_1$wget = 1'd1 ;
  assign ctop_inf_dp1_bml_remStart_1$whas = ctop_inf_dp1_tlp_remStart ;
  assign ctop_inf_dp1_bml_remDone_1$wget = 1'd1 ;
  assign ctop_inf_dp1_bml_remDone_1$whas = ctop_inf_dp1_tlp_remDone ;
  assign ctop_inf_dp1_bml_fabDone_1$wget = 1'd1 ;
  assign ctop_inf_dp1_bml_fabDone_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     ctop_inf_dp1_dpControl[1:0] != 2'd1 ;
  assign ctop_inf_dp1_bml_fabAvail_1$wget = 1'd1 ;
  assign ctop_inf_dp1_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 ;
  assign ctop_inf_dp1_bml_dpControl$wget = ctop_inf_dp1_dpControl ;
  assign ctop_inf_dp1_bml_dpControl$whas = 1'd1 ;
  assign ctop_inf_dp1_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_14_MCmd ;
  assign ctop_inf_dp1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_14_MAddrSpace ;
  assign ctop_inf_dp1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_14_MAddr ;
  assign ctop_inf_dp1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_14_MData ;
  assign ctop_inf_dp1_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wci_Es_mByteEn_w$wget = ctop_inf_cp$wci_Vm_14_MByteEn ;
  assign ctop_inf_dp1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_Es_mCmd_w$wget =
	     ctop_app_appW4_wmi_sThreadBusy_d ?
	       3'd0 :
	       ctop_app_appW4_wmi_reqF_q_0[31:29] ;
  assign ctop_inf_dp1_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_Es_mReqInfo_w$wget =
	     ctop_app_appW4_wmi_reqF_q_0[27] ;
  assign ctop_inf_dp1_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_Es_mAddrSpace_w$wget =
	     ctop_app_appW4_wmi_reqF_q_0[26] ;
  assign ctop_inf_dp1_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_Es_mAddr_w$wget =
	     ctop_app_appW4_wmi_reqF_q_0[25:12] ;
  assign ctop_inf_dp1_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_Es_mBurstLength_w$wget =
	     ctop_app_appW4_wmi_reqF_q_0[11:0] ;
  assign ctop_inf_dp1_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_Es_mData_w$wget = ctop_app_appW4_wmi_dhF_q_0[35:4] ;
  assign ctop_inf_dp1_wmi_Es_mData_w$whas = 1'd1 ;
  assign ctop_inf_dp1_wmi_Es_mDataByteEn_w$wget =
	     ctop_app_appW4_wmi_dhF_q_0[3:0] ;
  assign ctop_inf_dp1_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign ctop_app_appW2_wci_wciReq$wget =
	     { ctop_inf_cp$wci_Vm_2_MCmd,
	       ctop_inf_cp$wci_Vm_2_MAddrSpace,
	       ctop_inf_cp$wci_Vm_2_MByteEn,
	       ctop_inf_cp$wci_Vm_2_MAddr,
	       ctop_inf_cp$wci_Vm_2_MData } ;
  assign ctop_app_appW2_wci_wciReq$whas = 1'd1 ;
  assign ctop_app_appW2_wci_respF_x_wire$wget =
	     MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW2_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_cfwr ;
  assign ctop_app_appW2_wci_wEdge$wget =
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] ;
  assign ctop_app_appW2_wci_wEdge$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start ;
  assign ctop_app_appW2_wci_sFlagReg_1$wget = 1'b0 ;
  assign ctop_app_appW2_wci_sFlagReg_1$whas = 1'b0 ;
  assign ctop_app_appW2_wci_ctlAckReg_1$wget = 1'd1 ;
  assign ctop_app_appW2_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI ;
  assign ctop_app_appW2_wmi_reqF_x_wire$wget =
	     MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW2_wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise ;
  assign ctop_app_appW2_wmi_mFlagF_x_wire$wget = value__h173593 ;
  assign ctop_app_appW2_wmi_mFlagF_x_wire$whas =
	     ctop_app_appW2_wmi_mFlagF_enqueueing$whas ;
  assign ctop_app_appW2_wmi_dhF_x_wire$wget =
	     MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW2_wmi_dhF_x_wire$whas =
	     MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign ctop_app_appW2_wmi_wmiResponse$wget =
	     ctop_inf_dp0_wmi_wmi_respF_q_0 ;
  assign ctop_app_appW2_wmi_wmiResponse$whas = 1'd1 ;
  assign ctop_app_appW2_wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign ctop_app_appW2_wmi_sThreadBusy_d_1$whas =
	     CAN_FIRE_RL_ctop_stbConnect_8 ;
  assign ctop_app_appW2_wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign ctop_app_appW2_wmi_sDataThreadBusy_d_1$whas =
	     CAN_FIRE_RL_ctop_sdtbConnect ;
  assign ctop_app_appW2_wmi_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW2_wmi_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW2_operating_actions ;
  assign ctop_app_appW2_wmi_peerIsReady_1$wget = 1'd1 ;
  assign ctop_app_appW2_wmi_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_sRstConnect ;
  assign ctop_app_appW2_wsiM_reqFifo_x_wire$wget =
	     MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign ctop_app_appW2_wsiM_reqFifo_x_wire$whas =
	     ctop_app_appW2_wsiM_reqFifo_enqueueing$whas ;
  assign ctop_app_appW2_wsiM_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW2_wsiM_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW2_operating_actions ;
  assign ctop_app_appW2_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign ctop_app_appW2_wsiM_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_app_sRstConnect ;
  assign ctop_app_appW2_wsiS_wsiReq$wget = 61'd0 ;
  assign ctop_app_appW2_wsiS_wsiReq$whas = 1'd1 ;
  assign ctop_app_appW2_wsiS_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW2_wsiS_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW2_operating_actions ;
  assign ctop_app_appW2_wsiS_peerIsReady_1$wget = 1'b0 ;
  assign ctop_app_appW2_wsiS_peerIsReady_1$whas = 1'b0 ;
  assign ctop_app_appW2_wsiS_sThreadBusy_dw$wget =
	     ctop_app_appW2_wsiS_reqFifo_countReg > 2'd1 ;
  assign ctop_app_appW2_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_ctop_app_appW2_wsiS_backpressure ;
  assign ctop_app_appW2_fabRespCredit_acc_v1$wget = b__h181983 ;
  assign ctop_app_appW2_fabRespCredit_acc_v1$whas =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ;
  assign ctop_app_appW2_fabRespCredit_acc_v2$wget = 12'd1 ;
  assign ctop_app_appW2_fabRespCredit_acc_v2$whas =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi ;
  assign ctop_app_appW2_mesgPreRequest_1$wget = 1'd1 ;
  assign ctop_app_appW2_mesgPreRequest_1$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest ;
  assign ctop_app_appW2_respF_wDataIn$wget =
	     { 3'd1,
	       ctop_app_appW2_unrollCnt == 16'd1,
	       !ctop_app_appW2_smaCtrl[5],
	       sendData_burstLength__h185631,
	       ctop_app_appW2_wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h185633,
	       ctop_app_appW2_thisMesg[23:16] } ;
  assign ctop_app_appW2_respF_wDataIn$whas =
	     ctop_app_appW2_respF_pwEnqueue$whas ;
  assign ctop_app_appW2_respF_wDataOut$wget =
	     MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign ctop_app_appW2_respF_wDataOut$whas = 1'd1 ;
  assign ctop_app_appW2_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_2_MCmd ;
  assign ctop_app_appW2_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_appW2_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_2_MAddrSpace ;
  assign ctop_app_appW2_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_appW2_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_2_MAddr ;
  assign ctop_app_appW2_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_appW2_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_2_MData ;
  assign ctop_app_appW2_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_appW2_wci_Es_mByteEn_w$wget = ctop_inf_cp$wci_Vm_2_MByteEn ;
  assign ctop_app_appW2_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_appW2_wsi_Es_mCmd_w$wget = 3'h0 ;
  assign ctop_app_appW2_wsi_Es_mCmd_w$whas = 1'b0 ;
  assign ctop_app_appW2_wsi_Es_mBurstLength_w$wget = 12'h0 ;
  assign ctop_app_appW2_wsi_Es_mBurstLength_w$whas = 1'b0 ;
  assign ctop_app_appW2_wsi_Es_mData_w$wget = 32'h0 ;
  assign ctop_app_appW2_wsi_Es_mData_w$whas = 1'b0 ;
  assign ctop_app_appW2_wsi_Es_mByteEn_w$wget = 4'h0 ;
  assign ctop_app_appW2_wsi_Es_mByteEn_w$whas = 1'b0 ;
  assign ctop_app_appW2_wsi_Es_mReqInfo_w$wget = 8'h0 ;
  assign ctop_app_appW2_wsi_Es_mReqInfo_w$whas = 1'b0 ;
  assign ctop_app_appW2_wmi_Em_sResp_w$wget =
	     ctop_inf_dp0_wmi_wmi_respF_q_0[33:32] ;
  assign ctop_app_appW2_wmi_Em_sResp_w$whas = 1'd1 ;
  assign ctop_app_appW2_wmi_Em_sData_w$wget =
	     ctop_inf_dp0_wmi_wmi_respF_q_0[31:0] ;
  assign ctop_app_appW2_wmi_Em_sData_w$whas = 1'd1 ;
  assign ctop_app_appW3_wci_wciReq$wget =
	     { ctop_inf_cp$wci_Vm_3_MCmd,
	       ctop_inf_cp$wci_Vm_3_MAddrSpace,
	       ctop_inf_cp$wci_Vm_3_MByteEn,
	       ctop_inf_cp$wci_Vm_3_MAddr,
	       ctop_inf_cp$wci_Vm_3_MData } ;
  assign ctop_app_appW3_wci_wciReq$whas = 1'd1 ;
  assign ctop_app_appW3_wci_respF_x_wire$wget =
	     MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW3_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfwr ;
  assign ctop_app_appW3_wci_wEdge$wget =
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] ;
  assign ctop_app_appW3_wci_wEdge$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start ;
  assign ctop_app_appW3_wci_sFlagReg_1$wget = 1'b0 ;
  assign ctop_app_appW3_wci_sFlagReg_1$whas = 1'b0 ;
  assign ctop_app_appW3_wci_ctlAckReg_1$wget = 1'd1 ;
  assign ctop_app_appW3_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI ;
  assign ctop_app_appW3_wsiS_wsiReq$wget =
	     { ctop_app_appW3_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_ctop_app_mReqLConnect,
	       CAN_FIRE_RL_ctop_app_mBurstPConnect,
	       ctop_app_appW3_wsi_Es_mBurstLength_w$wget,
	       ctop_app_appW2_wsiM_reqFifo_q_0[43:8],
	       ctop_app_appW3_wsi_Es_mReqInfo_w$wget } ;
  assign ctop_app_appW3_wsiS_wsiReq$whas = 1'd1 ;
  assign ctop_app_appW3_wsiS_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW3_wsiS_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;
  assign ctop_app_appW3_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign ctop_app_appW3_wsiS_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_app_mRstConnect ;
  assign ctop_app_appW3_wsiS_sThreadBusy_dw$wget =
	     ctop_app_appW3_wsiS_reqFifo_countReg > 2'd1 ;
  assign ctop_app_appW3_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_backpressure ;
  assign ctop_app_appW3_wsiM_reqFifo_x_wire$wget =
	     MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign ctop_app_appW3_wsiM_reqFifo_x_wire$whas =
	     ctop_app_appW3_wsiM_reqFifo_enqueueing$whas ;
  assign ctop_app_appW3_wsiM_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW3_wsiM_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;
  assign ctop_app_appW3_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign ctop_app_appW3_wsiM_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_app_sRstConnect_1 ;
  assign ctop_app_appW3_wmemi_reqF_x_wire$wget =
	     MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW3_wmemi_reqF_x_wire$whas =
	     WILL_FIRE_RL_ctop_app_appW3_delay_write_req ||
	     WILL_FIRE_RL_ctop_app_appW3_delay_read_req ;
  assign ctop_app_appW3_wmemi_dhF_x_wire$wget =
	     MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW3_wmemi_dhF_x_wire$whas =
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign ctop_app_appW3_wmemi_wmemiResponse$wget =
	     { dram0$wmemiS_SResp,
	       dram0$wmemiS_SRespLast,
	       dram0$wmemiS_SData } ;
  assign ctop_app_appW3_wmemi_wmemiResponse$whas = 1'd1 ;
  assign ctop_app_appW3_wmemi_sCmdAccept_w$wget = 1'd1 ;
  assign ctop_app_appW3_wmemi_sCmdAccept_w$whas = dram0$wmemiS_SCmdAccept ;
  assign ctop_app_appW3_wmemi_sDataAccept_w$wget = 1'd1 ;
  assign ctop_app_appW3_wmemi_sDataAccept_w$whas = dram0$wmemiS_SDataAccept ;
  assign ctop_app_appW3_wmemi_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW3_wmemi_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;
  assign ctop_app_appW3_wmemi_peerIsReady_1$wget = 1'b0 ;
  assign ctop_app_appW3_wmemi_peerIsReady_1$whas = 1'b0 ;
  assign ctop_app_appW3_mesgWF_wDataIn$wget =
	     ctop_app_appW3_wsiS_reqFifo$D_OUT[43:12] ;
  assign ctop_app_appW3_mesgWF_wDataIn$whas =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ;
  assign ctop_app_appW3_mesgWF_wDataOut$wget = data__h209151 ;
  assign ctop_app_appW3_mesgWF_wDataOut$whas = 1'd1 ;
  assign ctop_app_appW3_dlyWordsStored_acc_v1$wget = 25'd1 ;
  assign ctop_app_appW3_dlyWordsStored_acc_v1$whas =
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign ctop_app_appW3_dlyWordsStored_acc_v2$wget = 25'd33554431 ;
  assign ctop_app_appW3_dlyWordsStored_acc_v2$whas =
	     WILL_FIRE_RL_ctop_app_appW3_delay_read_req ;
  assign ctop_app_appW3_dlyReadCredit_acc_v1$wget = 8'd255 ;
  assign ctop_app_appW3_dlyReadCredit_acc_v1$whas =
	     WILL_FIRE_RL_ctop_app_appW3_delay_read_req ;
  assign ctop_app_appW3_dlyReadCredit_acc_v2$wget = 8'd1 ;
  assign ctop_app_appW3_dlyReadCredit_acc_v2$whas =
	     CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc ;
  assign ctop_app_appW3_dlyReadyToWrite_acc_v1$wget = 16'd1 ;
  assign ctop_app_appW3_dlyReadyToWrite_acc_v1$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin ;
  assign ctop_app_appW3_dlyReadyToWrite_acc_v2$wget = 16'd65535 ;
  assign ctop_app_appW3_dlyReadyToWrite_acc_v2$whas =
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign ctop_app_appW3_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_3_MCmd ;
  assign ctop_app_appW3_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_appW3_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_3_MAddrSpace ;
  assign ctop_app_appW3_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_appW3_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_3_MAddr ;
  assign ctop_app_appW3_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_appW3_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_3_MData ;
  assign ctop_app_appW3_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_appW3_wci_Es_mByteEn_w$wget = ctop_inf_cp$wci_Vm_3_MByteEn ;
  assign ctop_app_appW3_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_appW3_wsi_Es_mCmd_w$wget =
	     ctop_app_appW2_wsiM_sThreadBusy_d ?
	       3'd0 :
	       ctop_app_appW2_wsiM_reqFifo_q_0[60:58] ;
  assign ctop_app_appW3_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_appW3_wsi_Es_mBurstLength_w$wget =
	     ctop_app_appW2_wsiM_sThreadBusy_d ?
	       12'd0 :
	       ctop_app_appW2_wsiM_reqFifo_q_0[55:44] ;
  assign ctop_app_appW3_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign ctop_app_appW3_wsi_Es_mData_w$wget =
	     ctop_app_appW2_wsiM_reqFifo_q_0[43:12] ;
  assign ctop_app_appW3_wsi_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_appW3_wsi_Es_mByteEn_w$wget =
	     ctop_app_appW2_wsiM_reqFifo_q_0[11:8] ;
  assign ctop_app_appW3_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_appW3_wsi_Es_mReqInfo_w$wget =
	     ctop_app_appW2_wsiM_sThreadBusy_d ?
	       8'd0 :
	       ctop_app_appW2_wsiM_reqFifo_q_0[7:0] ;
  assign ctop_app_appW3_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign ctop_app_appW3_wmemi_Em_sResp_w$wget = dram0$wmemiS_SResp ;
  assign ctop_app_appW3_wmemi_Em_sResp_w$whas = 1'd1 ;
  assign ctop_app_appW3_wmemi_Em_sData_w$wget = dram0$wmemiS_SData ;
  assign ctop_app_appW3_wmemi_Em_sData_w$whas = 1'd1 ;
  assign ctop_app_appW4_wci_wciReq$wget =
	     { ctop_inf_cp$wci_Vm_4_MCmd,
	       ctop_inf_cp$wci_Vm_4_MAddrSpace,
	       ctop_inf_cp$wci_Vm_4_MByteEn,
	       ctop_inf_cp$wci_Vm_4_MAddr,
	       ctop_inf_cp$wci_Vm_4_MData } ;
  assign ctop_app_appW4_wci_wciReq$whas = 1'd1 ;
  assign ctop_app_appW4_wci_respF_x_wire$wget =
	     MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW4_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_cfwr ;
  assign ctop_app_appW4_wci_wEdge$wget =
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] ;
  assign ctop_app_appW4_wci_wEdge$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start ;
  assign ctop_app_appW4_wci_sFlagReg_1$wget = 1'b0 ;
  assign ctop_app_appW4_wci_sFlagReg_1$whas = 1'b0 ;
  assign ctop_app_appW4_wci_ctlAckReg_1$wget = 1'd1 ;
  assign ctop_app_appW4_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI ;
  assign ctop_app_appW4_wmi_reqF_x_wire$wget =
	     MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW4_wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise ;
  assign ctop_app_appW4_wmi_mFlagF_x_wire$wget = value__h221012 ;
  assign ctop_app_appW4_wmi_mFlagF_x_wire$whas =
	     ctop_app_appW4_wmi_mFlagF_enqueueing$whas ;
  assign ctop_app_appW4_wmi_dhF_x_wire$wget =
	     MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2 ;
  assign ctop_app_appW4_wmi_dhF_x_wire$whas =
	     MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign ctop_app_appW4_wmi_wmiResponse$wget =
	     ctop_inf_dp1_wmi_wmi_respF_q_0 ;
  assign ctop_app_appW4_wmi_wmiResponse$whas = 1'd1 ;
  assign ctop_app_appW4_wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign ctop_app_appW4_wmi_sThreadBusy_d_1$whas =
	     CAN_FIRE_RL_ctop_stbConnect_9 ;
  assign ctop_app_appW4_wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign ctop_app_appW4_wmi_sDataThreadBusy_d_1$whas =
	     CAN_FIRE_RL_ctop_sdtbConnect_1 ;
  assign ctop_app_appW4_wmi_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW4_wmi_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW4_operating_actions ;
  assign ctop_app_appW4_wmi_peerIsReady_1$wget = 1'd1 ;
  assign ctop_app_appW4_wmi_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_sRstConnect_1 ;
  assign ctop_app_appW4_wsiM_reqFifo_x_wire$wget =
	     MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign ctop_app_appW4_wsiM_reqFifo_x_wire$whas =
	     ctop_app_appW4_wsiM_reqFifo_enqueueing$whas ;
  assign ctop_app_appW4_wsiM_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW4_wsiM_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW4_operating_actions ;
  assign ctop_app_appW4_wsiM_peerIsReady_1$wget = 1'b0 ;
  assign ctop_app_appW4_wsiM_peerIsReady_1$whas = 1'b0 ;
  assign ctop_app_appW4_wsiS_wsiReq$wget =
	     { ctop_app_appW4_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_ctop_app_mReqLConnect_1,
	       CAN_FIRE_RL_ctop_app_mBurstPConnect_1,
	       ctop_app_appW4_wsi_Es_mBurstLength_w$wget,
	       ctop_app_appW3_wsiM_reqFifo_q_0[43:8],
	       ctop_app_appW4_wsi_Es_mReqInfo_w$wget } ;
  assign ctop_app_appW4_wsiS_wsiReq$whas = 1'd1 ;
  assign ctop_app_appW4_wsiS_operateD_1$wget = 1'd1 ;
  assign ctop_app_appW4_wsiS_operateD_1$whas =
	     CAN_FIRE_RL_ctop_app_appW4_operating_actions ;
  assign ctop_app_appW4_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign ctop_app_appW4_wsiS_peerIsReady_1$whas =
	     CAN_FIRE_RL_ctop_app_mRstConnect_1 ;
  assign ctop_app_appW4_wsiS_sThreadBusy_dw$wget =
	     ctop_app_appW4_wsiS_reqFifo_countReg > 2'd1 ;
  assign ctop_app_appW4_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_backpressure ;
  assign ctop_app_appW4_fabRespCredit_acc_v1$wget = b__h229395 ;
  assign ctop_app_appW4_fabRespCredit_acc_v1$whas =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ;
  assign ctop_app_appW4_fabRespCredit_acc_v2$wget = 12'd1 ;
  assign ctop_app_appW4_fabRespCredit_acc_v2$whas =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi ;
  assign ctop_app_appW4_mesgPreRequest_1$wget = 1'd1 ;
  assign ctop_app_appW4_mesgPreRequest_1$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest ;
  assign ctop_app_appW4_respF_wDataIn$wget =
	     { 3'd1,
	       ctop_app_appW4_unrollCnt == 16'd1,
	       !ctop_app_appW4_smaCtrl[5],
	       sendData_burstLength__h233043,
	       ctop_app_appW4_wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h233045,
	       ctop_app_appW4_thisMesg[23:16] } ;
  assign ctop_app_appW4_respF_wDataIn$whas =
	     ctop_app_appW4_respF_pwEnqueue$whas ;
  assign ctop_app_appW4_respF_wDataOut$wget =
	     MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign ctop_app_appW4_respF_wDataOut$whas = 1'd1 ;
  assign ctop_app_appW4_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_4_MCmd ;
  assign ctop_app_appW4_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_appW4_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_4_MAddrSpace ;
  assign ctop_app_appW4_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_appW4_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_4_MAddr ;
  assign ctop_app_appW4_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_appW4_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_4_MData ;
  assign ctop_app_appW4_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_appW4_wci_Es_mByteEn_w$wget = ctop_inf_cp$wci_Vm_4_MByteEn ;
  assign ctop_app_appW4_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_appW4_wsi_Es_mCmd_w$wget =
	     ctop_app_appW3_wsiM_sThreadBusy_d ?
	       3'd0 :
	       ctop_app_appW3_wsiM_reqFifo_q_0[60:58] ;
  assign ctop_app_appW4_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_appW4_wsi_Es_mBurstLength_w$wget =
	     ctop_app_appW3_wsiM_sThreadBusy_d ?
	       12'd0 :
	       ctop_app_appW3_wsiM_reqFifo_q_0[55:44] ;
  assign ctop_app_appW4_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign ctop_app_appW4_wsi_Es_mData_w$wget =
	     ctop_app_appW3_wsiM_reqFifo_q_0[43:12] ;
  assign ctop_app_appW4_wsi_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_appW4_wsi_Es_mByteEn_w$wget =
	     ctop_app_appW3_wsiM_reqFifo_q_0[11:8] ;
  assign ctop_app_appW4_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_appW4_wsi_Es_mReqInfo_w$wget =
	     ctop_app_appW3_wsiM_sThreadBusy_d ?
	       8'd0 :
	       ctop_app_appW3_wsiM_reqFifo_q_0[7:0] ;
  assign ctop_app_appW4_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign ctop_app_appW4_wmi_Em_sResp_w$wget =
	     ctop_inf_dp1_wmi_wmi_respF_q_0[33:32] ;
  assign ctop_app_appW4_wmi_Em_sResp_w$whas = 1'd1 ;
  assign ctop_app_appW4_wmi_Em_sData_w$wget =
	     ctop_inf_dp1_wmi_wmi_respF_q_0[31:0] ;
  assign ctop_app_appW4_wmi_Em_sData_w$whas = 1'd1 ;
  assign ctop_app_tieOff0_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_0_MCmd ;
  assign ctop_app_tieOff0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_tieOff0_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_0_MAddrSpace ;
  assign ctop_app_tieOff0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_tieOff0_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_0_MAddr ;
  assign ctop_app_tieOff0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_tieOff0_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_0_MData ;
  assign ctop_app_tieOff0_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_tieOff0_wci_Es_mByteEn_w$wget =
	     ctop_inf_cp$wci_Vm_0_MByteEn ;
  assign ctop_app_tieOff0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_tieOff1_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_1_MCmd ;
  assign ctop_app_tieOff1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_tieOff1_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_1_MAddrSpace ;
  assign ctop_app_tieOff1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_tieOff1_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_1_MAddr ;
  assign ctop_app_tieOff1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_tieOff1_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_1_MData ;
  assign ctop_app_tieOff1_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_tieOff1_wci_Es_mByteEn_w$wget =
	     ctop_inf_cp$wci_Vm_1_MByteEn ;
  assign ctop_app_tieOff1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_tieOff5_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_5_MCmd ;
  assign ctop_app_tieOff5_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_tieOff5_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_5_MAddrSpace ;
  assign ctop_app_tieOff5_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_tieOff5_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_5_MAddr ;
  assign ctop_app_tieOff5_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_tieOff5_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_5_MData ;
  assign ctop_app_tieOff5_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_tieOff5_wci_Es_mByteEn_w$wget =
	     ctop_inf_cp$wci_Vm_5_MByteEn ;
  assign ctop_app_tieOff5_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_tieOff6_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_6_MCmd ;
  assign ctop_app_tieOff6_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_tieOff6_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_6_MAddrSpace ;
  assign ctop_app_tieOff6_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_tieOff6_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_6_MAddr ;
  assign ctop_app_tieOff6_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_tieOff6_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_6_MData ;
  assign ctop_app_tieOff6_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_tieOff6_wci_Es_mByteEn_w$wget =
	     ctop_inf_cp$wci_Vm_6_MByteEn ;
  assign ctop_app_tieOff6_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign ctop_app_tieOff7_wci_Es_mCmd_w$wget = ctop_inf_cp$wci_Vm_7_MCmd ;
  assign ctop_app_tieOff7_wci_Es_mCmd_w$whas = 1'd1 ;
  assign ctop_app_tieOff7_wci_Es_mAddrSpace_w$wget =
	     ctop_inf_cp$wci_Vm_7_MAddrSpace ;
  assign ctop_app_tieOff7_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign ctop_app_tieOff7_wci_Es_mAddr_w$wget = ctop_inf_cp$wci_Vm_7_MAddr ;
  assign ctop_app_tieOff7_wci_Es_mAddr_w$whas = 1'd1 ;
  assign ctop_app_tieOff7_wci_Es_mData_w$wget = ctop_inf_cp$wci_Vm_7_MData ;
  assign ctop_app_tieOff7_wci_Es_mData_w$whas = 1'd1 ;
  assign ctop_app_tieOff7_wci_Es_mByteEn_w$wget =
	     ctop_inf_cp$wci_Vm_7_MByteEn ;
  assign ctop_app_tieOff7_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign pci0_pwTrnTx$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;
  assign pci0_pwTrnRx$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign p2iAF_enq_pw$whas =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;
  assign p2iAF_deq_pw$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;
  assign p2iAF_sClear_pw$whas = 1'b0 ;
  assign p2iAF_dClear_pw$whas = 1'b0 ;
  assign p2iAF_deq_happened$whas = 1'b0 ;
  assign i2pAF_enq_pw$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;
  assign i2pAF_deq_pw$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ;
  assign i2pAF_sClear_pw$whas = 1'b0 ;
  assign i2pAF_dClear_pw$whas = 1'b0 ;
  assign i2pAF_deq_happened$whas = 1'b0 ;
  assign ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp &&
	     ctop_inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;
  assign ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp &&
	     ctop_inf_dp0_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp &&
	     ctop_inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp &&
	     ctop_inf_dp0_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp &&
	     ctop_inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp &&
	     ctop_inf_dp0_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp &&
	     ctop_inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp &&
	     ctop_inf_dp0_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ;
  assign ctop_inf_dp0_wci_reqF_r_enq$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_reqF_enq ;
  assign ctop_inf_dp0_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start ;
  assign ctop_inf_dp0_wci_reqF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp0_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ;
  assign ctop_inf_dp0_wci_respF_dequeueing$whas =
	     ctop_inf_dp0_wci_respF_c_r != 2'd0 ;
  assign ctop_inf_dp0_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign ctop_inf_dp0_wci_wci_cfwr_pw$whas =
	     ctop_inf_dp0_wci_reqF$EMPTY_N &&
	     ctop_inf_dp0_wci_reqF$D_OUT[56] &&
	     ctop_inf_dp0_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign ctop_inf_dp0_wci_wci_cfrd_pw$whas =
	     ctop_inf_dp0_wci_reqF$EMPTY_N &&
	     ctop_inf_dp0_wci_reqF$D_OUT[56] &&
	     ctop_inf_dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_inf_dp0_wci_wci_ctrl_pw$whas =
	     ctop_inf_dp0_wci_reqF$EMPTY_N &&
	     !ctop_inf_dp0_wci_reqF$D_OUT[56] &&
	     ctop_inf_dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_inf_dp0_wmi_wmi_forceSThreadBusy_pw$whas =
	     ctop_inf_dp0_dpControl[3:2] != 2'd1 &&
	     !ctop_inf_dp0_wmi_mesgMeta[128] ||
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     !ctop_inf_dp0_wmi_mesgBufReady ;
  assign ctop_inf_dp0_wmi_wmi_reqF_r_enq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_reqF_r_deq$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;
  assign ctop_inf_dp0_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp0_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_reqF_doResetDeq$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;
  assign ctop_inf_dp0_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign ctop_inf_dp0_wmi_wmi_dhF_r_enq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_dhF_r_deq$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;
  assign ctop_inf_dp0_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp0_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_dhF_doResetDeq$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;
  assign ctop_inf_dp0_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign ctop_inf_dp0_wmi_wmi_respF_enqueueing$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;
  assign ctop_inf_dp0_wmi_wmi_respF_dequeueing$whas =
	     ctop_inf_dp0_wmi_wmi_respF_c_r != 2'd0 ;
  assign ctop_inf_dp0_bml_lclBuf_incAction$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;
  assign ctop_inf_dp0_bml_lclBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp0_bml_remBuf_incAction$whas =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;
  assign ctop_inf_dp0_bml_remBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp0_bml_fabBuf_incAction$whas =
	     MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign ctop_inf_dp0_bml_fabBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp0_bml_crdBuf_incAction$whas =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_crdAdvance ;
  assign ctop_inf_dp0_bml_crdBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp0_wmi_Es_mReqLast_w$whas = CAN_FIRE_RL_ctop_mReqLConnect ;
  assign ctop_inf_dp0_wmi_Es_mDataValid_w$whas =
	     CAN_FIRE_RL_ctop_mDataVConnect ;
  assign ctop_inf_dp0_wmi_Es_mDataLast_w$whas =
	     CAN_FIRE_RL_ctop_mDataLConnect ;
  assign ctop_inf_dp0_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp &&
	     ctop_inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;
  assign ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp &&
	     ctop_inf_dp1_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp &&
	     ctop_inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp &&
	     ctop_inf_dp1_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp &&
	     ctop_inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp &&
	     ctop_inf_dp1_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp &&
	     ctop_inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp &&
	     ctop_inf_dp1_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ;
  assign ctop_inf_dp1_wci_reqF_r_enq$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_reqF_enq ;
  assign ctop_inf_dp1_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start ;
  assign ctop_inf_dp1_wci_reqF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp1_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ;
  assign ctop_inf_dp1_wci_respF_dequeueing$whas =
	     ctop_inf_dp1_wci_respF_c_r != 2'd0 ;
  assign ctop_inf_dp1_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign ctop_inf_dp1_wci_wci_cfwr_pw$whas =
	     ctop_inf_dp1_wci_reqF$EMPTY_N &&
	     ctop_inf_dp1_wci_reqF$D_OUT[56] &&
	     ctop_inf_dp1_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign ctop_inf_dp1_wci_wci_cfrd_pw$whas =
	     ctop_inf_dp1_wci_reqF$EMPTY_N &&
	     ctop_inf_dp1_wci_reqF$D_OUT[56] &&
	     ctop_inf_dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_inf_dp1_wci_wci_ctrl_pw$whas =
	     ctop_inf_dp1_wci_reqF$EMPTY_N &&
	     !ctop_inf_dp1_wci_reqF$D_OUT[56] &&
	     ctop_inf_dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_inf_dp1_wmi_wmi_forceSThreadBusy_pw$whas =
	     ctop_inf_dp1_dpControl[3:2] != 2'd1 &&
	     !ctop_inf_dp1_wmi_mesgMeta[128] ||
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     !ctop_inf_dp1_wmi_mesgBufReady ;
  assign ctop_inf_dp1_wmi_wmi_reqF_r_enq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_reqF_r_deq$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;
  assign ctop_inf_dp1_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp1_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_reqF_doResetDeq$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;
  assign ctop_inf_dp1_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign ctop_inf_dp1_wmi_wmi_dhF_r_enq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_dhF_r_deq$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;
  assign ctop_inf_dp1_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign ctop_inf_dp1_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_dhF_doResetDeq$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;
  assign ctop_inf_dp1_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign ctop_inf_dp1_wmi_wmi_respF_enqueueing$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;
  assign ctop_inf_dp1_wmi_wmi_respF_dequeueing$whas =
	     ctop_inf_dp1_wmi_wmi_respF_c_r != 2'd0 ;
  assign ctop_inf_dp1_bml_lclBuf_incAction$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;
  assign ctop_inf_dp1_bml_lclBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp1_bml_remBuf_incAction$whas =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;
  assign ctop_inf_dp1_bml_remBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp1_bml_fabBuf_incAction$whas =
	     MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign ctop_inf_dp1_bml_fabBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp1_bml_crdBuf_incAction$whas =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_crdAdvance ;
  assign ctop_inf_dp1_bml_crdBuf_decAction$whas = 1'b0 ;
  assign ctop_inf_dp1_wmi_Es_mReqLast_w$whas =
	     CAN_FIRE_RL_ctop_mReqLConnect_1 ;
  assign ctop_inf_dp1_wmi_Es_mDataValid_w$whas =
	     CAN_FIRE_RL_ctop_mDataVConnect_1 ;
  assign ctop_inf_dp1_wmi_Es_mDataLast_w$whas =
	     CAN_FIRE_RL_ctop_mDataLConnect_1 ;
  assign ctop_inf_dp1_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign ctop_inf_itc0_wti_sThreadBusy_pw$whas =
	     ctop_inf_dp0_wti_isReset$VAL ;
  assign ctop_inf_itc1_wti_sThreadBusy_pw$whas =
	     ctop_inf_dp1_wti_isReset$VAL ;
  assign ctop_app_appW2_wci_reqF_r_enq$whas =
	     CAN_FIRE_RL_ctop_app_appW2_wci_reqF_enq ;
  assign ctop_app_appW2_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_cfwr ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start ;
  assign ctop_app_appW2_wci_reqF_r_clr$whas = 1'b0 ;
  assign ctop_app_appW2_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_cfwr ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ;
  assign ctop_app_appW2_wci_respF_dequeueing$whas =
	     ctop_app_appW2_wci_respF_c_r != 2'd0 ;
  assign ctop_app_appW2_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign ctop_app_appW2_wci_wci_cfwr_pw$whas =
	     ctop_app_appW2_wci_reqF$EMPTY_N &&
	     ctop_app_appW2_wci_reqF$D_OUT[56] &&
	     ctop_app_appW2_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign ctop_app_appW2_wci_wci_cfrd_pw$whas =
	     ctop_app_appW2_wci_reqF$EMPTY_N &&
	     ctop_app_appW2_wci_reqF$D_OUT[56] &&
	     ctop_app_appW2_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_app_appW2_wci_wci_ctrl_pw$whas =
	     ctop_app_appW2_wci_reqF$EMPTY_N &&
	     !ctop_app_appW2_wci_reqF$D_OUT[56] &&
	     ctop_app_appW2_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_app_appW2_wmi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ;
  assign ctop_app_appW2_wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_deq &&
	     ctop_app_appW2_wmi_reqF_c_r != 2'd0 ;
  assign ctop_app_appW2_wmi_mFlagF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest && x__h185342 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ;
  assign ctop_app_appW2_wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_deq &&
	     ctop_app_appW2_wmi_reqF_q_0[27] &&
	     ctop_app_appW2_wmi_mFlagF_c_r != 2'd0 ;
  assign ctop_app_appW2_wmi_dhF_enqueueing$whas =
	     MUX_ctop_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign ctop_app_appW2_wmi_dhF_dequeueing$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_deq &&
	     ctop_app_appW2_wmi_dhF_c_r != 2'd0 ;
  assign ctop_app_appW2_wsiM_reqFifo_enqueueing$whas =
	     (WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise ||
	      WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise) &&
	     ctop_app_appW2_smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush &&
	     !ctop_app_appW2_smaCtrl[4] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi ;
  assign ctop_app_appW2_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq ;
  assign ctop_app_appW2_wsiM_sThreadBusy_pw$whas =
	     CAN_FIRE_RL_ctop_app_stbConnect ;
  assign ctop_app_appW2_wsiS_reqFifo_r_enq$whas = 1'b0 ;
  assign ctop_app_appW2_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise ;
  assign ctop_app_appW2_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign ctop_app_appW2_wsiS_reqFifo_doResetEnq$whas = 1'b0 ;
  assign ctop_app_appW2_wsiS_reqFifo_doResetDeq$whas =
	     ctop_app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign ctop_app_appW2_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign ctop_app_appW2_respF_pwDequeue$whas =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi ;
  assign ctop_app_appW2_respF_pwEnqueue$whas =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse &&
	     !ctop_app_appW2_smaCtrl[4] ;
  assign ctop_app_appW2_wsi_Es_mReqLast_w$whas = 1'b0 ;
  assign ctop_app_appW2_wsi_Es_mBurstPrecise_w$whas = 1'b0 ;
  assign ctop_app_appW2_wsi_Es_mDataInfo_w$whas = 1'b0 ;
  assign ctop_app_appW3_wci_reqF_r_enq$whas =
	     CAN_FIRE_RL_ctop_app_appW3_wci_reqF_enq ;
  assign ctop_app_appW3_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfwr ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start ;
  assign ctop_app_appW3_wci_reqF_r_clr$whas = 1'b0 ;
  assign ctop_app_appW3_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfwr ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ;
  assign ctop_app_appW3_wci_respF_dequeueing$whas =
	     ctop_app_appW3_wci_respF_c_r != 2'd0 ;
  assign ctop_app_appW3_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign ctop_app_appW3_wci_wci_cfwr_pw$whas =
	     ctop_app_appW3_wci_reqF$EMPTY_N &&
	     ctop_app_appW3_wci_reqF$D_OUT[56] &&
	     ctop_app_appW3_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign ctop_app_appW3_wci_wci_cfrd_pw$whas =
	     ctop_app_appW3_wci_reqF$EMPTY_N &&
	     ctop_app_appW3_wci_reqF$D_OUT[56] &&
	     ctop_app_appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_app_appW3_wci_wci_ctrl_pw$whas =
	     ctop_app_appW3_wci_reqF$EMPTY_N &&
	     !ctop_app_appW3_wci_reqF$D_OUT[56] &&
	     ctop_app_appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_app_appW3_wsiS_reqFifo_r_enq$whas =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign ctop_app_appW3_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ||
	     WILL_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush ;
  assign ctop_app_appW3_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign ctop_app_appW3_wsiS_reqFifo_doResetEnq$whas =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign ctop_app_appW3_wsiS_reqFifo_doResetDeq$whas =
	     ctop_app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign ctop_app_appW3_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign ctop_app_appW3_wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush ;
  assign ctop_app_appW3_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq ;
  assign ctop_app_appW3_wsiM_sThreadBusy_pw$whas =
	     CAN_FIRE_RL_ctop_app_stbConnect_1 ;
  assign ctop_app_appW3_wmemi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW3_delay_read_req ||
	     WILL_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign ctop_app_appW3_wmemi_reqF_dequeueing$whas =
	     dram0$wmemiS_SCmdAccept &&
	     ctop_app_appW3_wmemi_reqF_c_r != 2'd0 ;
  assign ctop_app_appW3_wmemi_dhF_enqueueing$whas =
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign ctop_app_appW3_wmemi_dhF_dequeueing$whas =
	     dram0$wmemiS_SDataAccept &&
	     ctop_app_appW3_wmemi_dhF_c_r != 2'd0 ;
  assign ctop_app_appW3_mesgWF_pwDequeue$whas =
	     CAN_FIRE_RL_ctop_app_appW3_wrtSer_body ;
  assign ctop_app_appW3_mesgWF_pwEnqueue$whas =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ;
  assign ctop_app_appW3_wsi_Es_mReqLast_w$whas =
	     CAN_FIRE_RL_ctop_app_mReqLConnect ;
  assign ctop_app_appW3_wsi_Es_mBurstPrecise_w$whas =
	     CAN_FIRE_RL_ctop_app_mBurstPConnect ;
  assign ctop_app_appW3_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign ctop_app_appW3_wmemi_Em_sRespLast_w$whas = dram0$wmemiS_SRespLast ;
  assign ctop_app_appW4_wci_reqF_r_enq$whas =
	     CAN_FIRE_RL_ctop_app_appW4_wci_reqF_enq ;
  assign ctop_app_appW4_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_cfwr ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start ;
  assign ctop_app_appW4_wci_reqF_r_clr$whas = 1'b0 ;
  assign ctop_app_appW4_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wci_cfrd ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_cfwr ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ;
  assign ctop_app_appW4_wci_respF_dequeueing$whas =
	     ctop_app_appW4_wci_respF_c_r != 2'd0 ;
  assign ctop_app_appW4_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign ctop_app_appW4_wci_wci_cfwr_pw$whas =
	     ctop_app_appW4_wci_reqF$EMPTY_N &&
	     ctop_app_appW4_wci_reqF$D_OUT[56] &&
	     ctop_app_appW4_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign ctop_app_appW4_wci_wci_cfrd_pw$whas =
	     ctop_app_appW4_wci_reqF$EMPTY_N &&
	     ctop_app_appW4_wci_reqF$D_OUT[56] &&
	     ctop_app_appW4_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_app_appW4_wci_wci_ctrl_pw$whas =
	     ctop_app_appW4_wci_reqF$EMPTY_N &&
	     !ctop_app_appW4_wci_reqF$D_OUT[56] &&
	     ctop_app_appW4_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign ctop_app_appW4_wmi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ;
  assign ctop_app_appW4_wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_deq &&
	     ctop_app_appW4_wmi_reqF_c_r != 2'd0 ;
  assign ctop_app_appW4_wmi_mFlagF_enqueueing$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest && x__h232754 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ;
  assign ctop_app_appW4_wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_deq &&
	     ctop_app_appW4_wmi_reqF_q_0[27] &&
	     ctop_app_appW4_wmi_mFlagF_c_r != 2'd0 ;
  assign ctop_app_appW4_wmi_dhF_enqueueing$whas =
	     MUX_ctop_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign ctop_app_appW4_wmi_dhF_dequeueing$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_deq &&
	     ctop_app_appW4_wmi_dhF_c_r != 2'd0 ;
  assign ctop_app_appW4_wsiM_reqFifo_enqueueing$whas =
	     (WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise ||
	      WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise) &&
	     ctop_app_appW4_smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush &&
	     !ctop_app_appW4_smaCtrl[4] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi ;
  assign ctop_app_appW4_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq ;
  assign ctop_app_appW4_wsiM_sThreadBusy_pw$whas = 1'b0 ;
  assign ctop_app_appW4_wsiS_reqFifo_r_enq$whas =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign ctop_app_appW4_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise ;
  assign ctop_app_appW4_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign ctop_app_appW4_wsiS_reqFifo_doResetEnq$whas =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign ctop_app_appW4_wsiS_reqFifo_doResetDeq$whas =
	     ctop_app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign ctop_app_appW4_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign ctop_app_appW4_respF_pwDequeue$whas =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi ;
  assign ctop_app_appW4_respF_pwEnqueue$whas =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse &&
	     !ctop_app_appW4_smaCtrl[4] ;
  assign ctop_app_appW4_wsi_Es_mReqLast_w$whas =
	     CAN_FIRE_RL_ctop_app_mReqLConnect_1 ;
  assign ctop_app_appW4_wsi_Es_mBurstPrecise_w$whas =
	     CAN_FIRE_RL_ctop_app_mBurstPConnect_1 ;
  assign ctop_app_appW4_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign tcGbe0_wti_sThreadBusy_pw$whas = gbe0$wti_s_SThreadBusy ;
  assign ctop_inf_dp0_bml_lclBuf_modulus_bw$wget =
	     ctop_inf_dp0_bml_lclBuf_modulus ;
  assign ctop_inf_dp0_bml_remBuf_modulus_bw$wget =
	     ctop_inf_dp0_bml_remBuf_modulus ;
  assign ctop_inf_dp0_bml_fabBuf_modulus_bw$wget =
	     ctop_inf_dp0_bml_fabBuf_modulus ;
  assign ctop_inf_dp0_bml_crdBuf_modulus_bw$wget =
	     ctop_inf_dp0_bml_crdBuf_modulus ;
  assign ctop_inf_dp1_bml_lclBuf_modulus_bw$wget =
	     ctop_inf_dp1_bml_lclBuf_modulus ;
  assign ctop_inf_dp1_bml_remBuf_modulus_bw$wget =
	     ctop_inf_dp1_bml_remBuf_modulus ;
  assign ctop_inf_dp1_bml_fabBuf_modulus_bw$wget =
	     ctop_inf_dp1_bml_fabBuf_modulus ;
  assign ctop_inf_dp1_bml_crdBuf_modulus_bw$wget =
	     ctop_inf_dp1_bml_crdBuf_modulus ;
  assign ctop_app_appW2_wsiM_extStatusW$wget =
	     { ctop_app_appW2_wsiM_pMesgCount,
	       ctop_app_appW2_wsiM_iMesgCount,
	       ctop_app_appW2_wsiM_tBusyCount } ;
  assign ctop_app_appW2_wsiS_extStatusW$wget =
	     { ctop_app_appW2_wsiS_pMesgCount,
	       ctop_app_appW2_wsiS_iMesgCount,
	       ctop_app_appW2_wsiS_tBusyCount } ;
  assign ctop_app_appW3_wsiS_extStatusW$wget =
	     { ctop_app_appW3_wsiS_pMesgCount,
	       ctop_app_appW3_wsiS_iMesgCount,
	       ctop_app_appW3_wsiS_tBusyCount } ;
  assign ctop_app_appW3_wsiM_extStatusW$wget =
	     { ctop_app_appW3_wsiM_pMesgCount,
	       ctop_app_appW3_wsiM_iMesgCount,
	       ctop_app_appW3_wsiM_tBusyCount } ;
  assign ctop_app_appW4_wsiM_extStatusW$wget =
	     { ctop_app_appW4_wsiM_pMesgCount,
	       ctop_app_appW4_wsiM_iMesgCount,
	       ctop_app_appW4_wsiM_tBusyCount } ;
  assign ctop_app_appW4_wsiS_extStatusW$wget =
	     { ctop_app_appW4_wsiS_pMesgCount,
	       ctop_app_appW4_wsiS_iMesgCount,
	       ctop_app_appW4_wsiS_tBusyCount } ;

  // register Prelude_inst_changeSpecialWires_1_rg
  assign Prelude_inst_changeSpecialWires_1_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_1_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // register Prelude_inst_changeSpecialWires_4_rg
  assign Prelude_inst_changeSpecialWires_4_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_4_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 &&
	     i2pS[135:128] != 8'd0 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 ;

  // register ctop_app_appW2_abortCount
  assign ctop_app_appW2_abortCount$D_IN = ctop_app_appW2_abortCount + 32'd1 ;
  assign ctop_app_appW2_abortCount$EN =
	     CAN_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // register ctop_app_appW2_doAbort
  assign ctop_app_appW2_doAbort$D_IN = 1'd0 ;
  assign ctop_app_appW2_doAbort$EN = CAN_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // register ctop_app_appW2_endOfMessage
  assign ctop_app_appW2_endOfMessage$D_IN =
	     MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1 ;
  assign ctop_app_appW2_endOfMessage$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ;

  // register ctop_app_appW2_errCount
  assign ctop_app_appW2_errCount$D_IN = ctop_app_appW2_errCount + 32'd1 ;
  assign ctop_app_appW2_errCount$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[43:12] !=
	     ctop_app_appW2_valExpect &&
	     (!ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	      ctop_app_appW2_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register ctop_app_appW2_fabRespCredit_value
  assign ctop_app_appW2_fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_ctop_app_appW2_fabRespCredit_value$write_1__VAL_2 ;
  assign ctop_app_appW2_fabRespCredit_value$EN = 1'b1 ;

  // register ctop_app_appW2_fabWordsCurReq
  assign ctop_app_appW2_fabWordsCurReq$D_IN =
	     (ctop_app_appW2_fabWordsRemain <= b__h185171) ?
	       ctop_app_appW2_fabWordsRemain :
	       b__h185171 ;
  assign ctop_app_appW2_fabWordsCurReq$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest ;

  // register ctop_app_appW2_fabWordsRemain
  assign ctop_app_appW2_fabWordsRemain$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ?
	       MUX_ctop_app_appW2_fabWordsRemain$write_1__VAL_1 :
	       MUX_ctop_app_appW2_fabWordsRemain$write_1__VAL_2 ;
  assign ctop_app_appW2_fabWordsRemain$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ;

  // register ctop_app_appW2_firstMsgReq
  assign ctop_app_appW2_firstMsgReq$D_IN = 1'b0 ;
  assign ctop_app_appW2_firstMsgReq$EN = 1'b0 ;

  // register ctop_app_appW2_impreciseBurst
  assign ctop_app_appW2_impreciseBurst$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;
  assign ctop_app_appW2_impreciseBurst$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     !ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // register ctop_app_appW2_lastMesg
  assign ctop_app_appW2_lastMesg$D_IN =
	     (MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1 ||
	      MUX_ctop_app_appW2_lastMesg$write_1__SEL_2) ?
	       ctop_app_appW2_thisMesg :
	       32'hFEFEFFFE ;
  assign ctop_app_appW2_lastMesg$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO ;

  // register ctop_app_appW2_mesgCount
  always@(MUX_ctop_app_appW2_mesgCount$write_1__SEL_1 or
	  MUX_ctop_app_appW2_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize or
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_app_appW2_mesgCount$write_1__SEL_1:
	  ctop_app_appW2_mesgCount$D_IN =
	      MUX_ctop_app_appW2_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize:
	  ctop_app_appW2_mesgCount$D_IN =
	      MUX_ctop_app_appW2_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO:
	  ctop_app_appW2_mesgCount$D_IN = 32'd0;
      default: ctop_app_appW2_mesgCount$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_mesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse &&
	     ctop_app_appW2_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO ;

  // register ctop_app_appW2_mesgLength
  always@(WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize or
	  WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort or
	  MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_ctop_app_appW2_mesgLength$write_1__VAL_3 or
	  MUX_ctop_app_appW2_mesgLength$write_1__SEL_4 or
	  MUX_ctop_app_appW2_mesgLength$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
    WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort:
	ctop_app_appW2_mesgLength$D_IN = 15'd10922;
    MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1:
	ctop_app_appW2_mesgLength$D_IN =
	    MUX_ctop_app_appW2_mesgLength$write_1__VAL_3;
    MUX_ctop_app_appW2_mesgLength$write_1__SEL_4:
	ctop_app_appW2_mesgLength$D_IN =
	    MUX_ctop_app_appW2_mesgLength$write_1__VAL_4;
    default: ctop_app_appW2_mesgLength$D_IN =
		 15'b010101010101010 /* unspecified value */ ;
  endcase
  assign ctop_app_appW2_mesgLength$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // register ctop_app_appW2_mesgLengthSoFar
  assign ctop_app_appW2_mesgLengthSoFar$D_IN =
	     MUX_ctop_app_appW2_impreciseBurst$write_1__SEL_3 ?
	       14'd0 :
	       mlp1__h187471 ;
  assign ctop_app_appW2_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     !ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise ;

  // register ctop_app_appW2_mesgPreRequest
  assign ctop_app_appW2_mesgPreRequest$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest ;
  assign ctop_app_appW2_mesgPreRequest$EN = 1'd1 ;

  // register ctop_app_appW2_mesgReqAddr
  assign ctop_app_appW2_mesgReqAddr$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_ctop_app_appW2_mesgReqAddr$write_1__VAL_2 ;
  assign ctop_app_appW2_mesgReqAddr$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ;

  // register ctop_app_appW2_mesgReqOK
  assign ctop_app_appW2_mesgReqOK$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ;
  assign ctop_app_appW2_mesgReqOK$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyPreRequest ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse ;

  // register ctop_app_appW2_mesgReqValid
  assign ctop_app_appW2_mesgReqValid$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ;
  assign ctop_app_appW2_mesgReqValid$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ;

  // register ctop_app_appW2_opcode
  assign ctop_app_appW2_opcode$D_IN =
	     (WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
	      WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort) ?
	       9'd170 :
	       MUX_ctop_app_appW2_opcode$write_1__VAL_3 ;
  assign ctop_app_appW2_opcode$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // register ctop_app_appW2_preciseBurst
  assign ctop_app_appW2_preciseBurst$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;
  assign ctop_app_appW2_preciseBurst$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // register ctop_app_appW2_readyToPush
  assign ctop_app_appW2_readyToPush$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort &&
	     !MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1 ;
  assign ctop_app_appW2_readyToPush$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     !ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort ;

  // register ctop_app_appW2_readyToRequest
  assign ctop_app_appW2_readyToRequest$D_IN =
	     MUX_ctop_app_appW2_mesgLength$write_1__SEL_4 ;
  assign ctop_app_appW2_readyToRequest$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ;

  // register ctop_app_appW2_respF_rCache
  assign ctop_app_appW2_respF_rCache$D_IN =
	     { 1'd1,
	       ctop_app_appW2_respF_rWrPtr,
	       IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7402,
	       ctop_app_appW2_respF_pwEnqueue$whas &&
	       ctop_app_appW2_respF_wDataIn$wget[57],
	       ctop_app_appW2_respF_pwEnqueue$whas &&
	       ctop_app_appW2_respF_wDataIn$wget[56],
	       IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7405 } ;
  assign ctop_app_appW2_respF_rCache$EN =
	     ctop_app_appW2_respF_pwEnqueue$whas ;

  // register ctop_app_appW2_respF_rRdPtr
  assign ctop_app_appW2_respF_rRdPtr$D_IN = x__h183337 ;
  assign ctop_app_appW2_respF_rRdPtr$EN =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi ;

  // register ctop_app_appW2_respF_rWrPtr
  assign ctop_app_appW2_respF_rWrPtr$D_IN =
	     ctop_app_appW2_respF_rWrPtr + 12'd1 ;
  assign ctop_app_appW2_respF_rWrPtr$EN =
	     ctop_app_appW2_respF_pwEnqueue$whas ;

  // register ctop_app_appW2_smaCtrl
  assign ctop_app_appW2_smaCtrl$D_IN = ctop_app_appW2_wci_reqF$D_OUT[31:0] ;
  assign ctop_app_appW2_smaCtrl$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_cfwr &&
	     ctop_app_appW2_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register ctop_app_appW2_thisMesg
  always@(MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_ctop_app_appW2_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin or
	  MUX_ctop_app_appW2_thisMesg$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise or
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1:
	  ctop_app_appW2_thisMesg$D_IN =
	      MUX_ctop_app_appW2_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin:
	  ctop_app_appW2_thisMesg$D_IN =
	      MUX_ctop_app_appW2_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise:
	  ctop_app_appW2_thisMesg$D_IN =
	      MUX_ctop_app_appW2_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO:
	  ctop_app_appW2_thisMesg$D_IN = 32'hFEFEFFFE;
      default: ctop_app_appW2_thisMesg$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_thisMesg$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO ;

  // register ctop_app_appW2_unrollCnt
  assign ctop_app_appW2_unrollCnt$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ?
	       MUX_ctop_app_appW2_unrollCnt$write_1__VAL_1 :
	       MUX_ctop_app_appW2_unrollCnt$write_1__VAL_2 ;
  assign ctop_app_appW2_unrollCnt$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse ;

  // register ctop_app_appW2_valExpect
  assign ctop_app_appW2_valExpect$D_IN = ctop_app_appW2_valExpect + 32'd1 ;
  assign ctop_app_appW2_valExpect$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise &&
	     (!ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	      ctop_app_appW2_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register ctop_app_appW2_wci_cEdge
  assign ctop_app_appW2_wci_cEdge$D_IN =
	     ctop_app_appW2_wci_reqF$D_OUT[36:34] ;
  assign ctop_app_appW2_wci_cEdge$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start ;

  // register ctop_app_appW2_wci_cState
  assign ctop_app_appW2_wci_cState$D_IN = ctop_app_appW2_wci_nState ;
  assign ctop_app_appW2_wci_cState$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete &&
	     !ctop_app_appW2_wci_illegalEdge ;

  // register ctop_app_appW2_wci_ctlAckReg
  assign ctop_app_appW2_wci_ctlAckReg$D_IN =
	     ctop_app_appW2_wci_ctlAckReg_1$whas ;
  assign ctop_app_appW2_wci_ctlAckReg$EN = 1'd1 ;

  // register ctop_app_appW2_wci_ctlOpActive
  assign ctop_app_appW2_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ;
  assign ctop_app_appW2_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start ;

  // register ctop_app_appW2_wci_illegalEdge
  assign ctop_app_appW2_wci_illegalEdge$D_IN =
	     !MUX_ctop_app_appW2_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_ctop_app_appW2_wci_illegalEdge$write_1__VAL_2 ;
  assign ctop_app_appW2_wci_illegalEdge$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete &&
	     ctop_app_appW2_wci_illegalEdge ||
	     MUX_ctop_app_appW2_wci_illegalEdge$write_1__SEL_2 ;

  // register ctop_app_appW2_wci_nState
  always@(ctop_app_appW2_wci_reqF$D_OUT)
  begin
    case (ctop_app_appW2_wci_reqF$D_OUT[36:34])
      3'd0: ctop_app_appW2_wci_nState$D_IN = 3'd1;
      3'd1: ctop_app_appW2_wci_nState$D_IN = 3'd2;
      3'd2: ctop_app_appW2_wci_nState$D_IN = 3'd3;
      default: ctop_app_appW2_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign ctop_app_appW2_wci_nState$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start &&
	     (ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_app_appW2_wci_cState == 3'd0 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (ctop_app_appW2_wci_cState == 3'd1 ||
	       ctop_app_appW2_wci_cState == 3'd3) ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_app_appW2_wci_cState == 3'd2 ||
	      ctop_app_appW2_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (ctop_app_appW2_wci_cState == 3'd3 ||
	       ctop_app_appW2_wci_cState == 3'd2 ||
	       ctop_app_appW2_wci_cState == 3'd1)) ;

  // register ctop_app_appW2_wci_reqF_countReg
  assign ctop_app_appW2_wci_reqF_countReg$D_IN =
	     (ctop_app_appW2_wci_wciReq$wget[59:57] != 3'd0) ?
	       ctop_app_appW2_wci_reqF_countReg + 2'd1 :
	       ctop_app_appW2_wci_reqF_countReg - 2'd1 ;
  assign ctop_app_appW2_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_ctop_app_appW2_wci_reqF__updateLevelCounter ;

  // register ctop_app_appW2_wci_respF_c_r
  assign ctop_app_appW2_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr ?
	       MUX_ctop_app_appW2_wci_respF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW2_wci_respF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW2_wci_respF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr ;

  // register ctop_app_appW2_wci_respF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW2_wci_respF_both or
	  MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wci_respF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr or
	  ctop_app_appW2_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wci_respF_both:
	  ctop_app_appW2_wci_respF_q_0$D_IN =
	      MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW2_wci_respF_q_0$write_1__SEL_2:
	  ctop_app_appW2_wci_respF_q_0$D_IN =
	      MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr:
	  ctop_app_appW2_wci_respF_q_0$D_IN = ctop_app_appW2_wci_respF_q_1;
      default: ctop_app_appW2_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wci_respF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr &&
	     ctop_app_appW2_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr ;

  // register ctop_app_appW2_wci_respF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW2_wci_respF_both or
	  MUX_ctop_app_appW2_wci_respF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wci_respF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wci_respF_both:
	  ctop_app_appW2_wci_respF_q_1$D_IN =
	      MUX_ctop_app_appW2_wci_respF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW2_wci_respF_q_1$write_1__SEL_2:
	  ctop_app_appW2_wci_respF_q_1$D_IN =
	      MUX_ctop_app_appW2_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr:
	  ctop_app_appW2_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: ctop_app_appW2_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wci_respF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_incCtr &&
	     ctop_app_appW2_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW2_wci_respF_decCtr ;

  // register ctop_app_appW2_wci_sFlagReg
  assign ctop_app_appW2_wci_sFlagReg$D_IN = 1'b0 ;
  assign ctop_app_appW2_wci_sFlagReg$EN = 1'd1 ;

  // register ctop_app_appW2_wci_sThreadBusy_d
  assign ctop_app_appW2_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign ctop_app_appW2_wci_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW2_wmi_busyWithMessage
  assign ctop_app_appW2_wmi_busyWithMessage$D_IN = 1'b0 ;
  assign ctop_app_appW2_wmi_busyWithMessage$EN = 1'b0 ;

  // register ctop_app_appW2_wmi_dhF_c_r
  assign ctop_app_appW2_wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr ?
	       MUX_ctop_app_appW2_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW2_wmi_dhF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW2_wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr ;

  // register ctop_app_appW2_wmi_dhF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both or
	  MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr or
	  ctop_app_appW2_wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both:
	  ctop_app_appW2_wmi_dhF_q_0$D_IN =
	      MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__SEL_2:
	  ctop_app_appW2_wmi_dhF_q_0$D_IN =
	      MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr:
	  ctop_app_appW2_wmi_dhF_q_0$D_IN = ctop_app_appW2_wmi_dhF_q_1;
      default: ctop_app_appW2_wmi_dhF_q_0$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr &&
	     ctop_app_appW2_wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr ;

  // register ctop_app_appW2_wmi_dhF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both or
	  MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both:
	  ctop_app_appW2_wmi_dhF_q_1$D_IN =
	      MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW2_wmi_dhF_q_1$write_1__SEL_2:
	  ctop_app_appW2_wmi_dhF_q_1$D_IN =
	      MUX_ctop_app_appW2_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr:
	  ctop_app_appW2_wmi_dhF_q_1$D_IN = 38'h0AAAAAAAAA;
      default: ctop_app_appW2_wmi_dhF_q_1$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_incCtr &&
	     ctop_app_appW2_wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_dhF_decCtr ;

  // register ctop_app_appW2_wmi_errorSticky
  assign ctop_app_appW2_wmi_errorSticky$D_IN = 1'd1 ;
  assign ctop_app_appW2_wmi_errorSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_respAdvance &&
	     !ctop_app_appW2_wmi_respF$FULL_N ;

  // register ctop_app_appW2_wmi_mFlagF_c_r
  assign ctop_app_appW2_wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr ?
	       MUX_ctop_app_appW2_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW2_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW2_wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr ;

  // register ctop_app_appW2_wmi_mFlagF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both or
	  MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2 or
	  value__h173593 or
	  WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr or
	  ctop_app_appW2_wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both:
	  ctop_app_appW2_wmi_mFlagF_q_0$D_IN =
	      MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2:
	  ctop_app_appW2_wmi_mFlagF_q_0$D_IN = value__h173593;
      WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr:
	  ctop_app_appW2_wmi_mFlagF_q_0$D_IN = ctop_app_appW2_wmi_mFlagF_q_1;
      default: ctop_app_appW2_wmi_mFlagF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr &&
	     ctop_app_appW2_wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr ;

  // register ctop_app_appW2_wmi_mFlagF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both or
	  MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2 or
	  value__h173593 or WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both:
	  ctop_app_appW2_wmi_mFlagF_q_1$D_IN =
	      MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2:
	  ctop_app_appW2_wmi_mFlagF_q_1$D_IN = value__h173593;
      WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr:
	  ctop_app_appW2_wmi_mFlagF_q_1$D_IN = 32'd0;
      default: ctop_app_appW2_wmi_mFlagF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_incCtr &&
	     ctop_app_appW2_wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_mFlagF_decCtr ;

  // register ctop_app_appW2_wmi_operateD
  assign ctop_app_appW2_wmi_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW2_operating_actions ;
  assign ctop_app_appW2_wmi_operateD$EN = 1'd1 ;

  // register ctop_app_appW2_wmi_peerIsReady
  assign ctop_app_appW2_wmi_peerIsReady$D_IN = CAN_FIRE_RL_ctop_sRstConnect ;
  assign ctop_app_appW2_wmi_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW2_wmi_reqF_c_r
  assign ctop_app_appW2_wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr ?
	       MUX_ctop_app_appW2_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW2_wmi_reqF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW2_wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr ;

  // register ctop_app_appW2_wmi_reqF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both or
	  MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr or
	  ctop_app_appW2_wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both:
	  ctop_app_appW2_wmi_reqF_q_0$D_IN =
	      MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__SEL_2:
	  ctop_app_appW2_wmi_reqF_q_0$D_IN =
	      MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr:
	  ctop_app_appW2_wmi_reqF_q_0$D_IN = ctop_app_appW2_wmi_reqF_q_1;
      default: ctop_app_appW2_wmi_reqF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr &&
	     ctop_app_appW2_wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr ;

  // register ctop_app_appW2_wmi_reqF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both or
	  MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both:
	  ctop_app_appW2_wmi_reqF_q_1$D_IN =
	      MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW2_wmi_reqF_q_1$write_1__SEL_2:
	  ctop_app_appW2_wmi_reqF_q_1$D_IN =
	      MUX_ctop_app_appW2_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr:
	  ctop_app_appW2_wmi_reqF_q_1$D_IN = 32'd178956970;
      default: ctop_app_appW2_wmi_reqF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_incCtr &&
	     ctop_app_appW2_wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW2_wmi_reqF_decCtr ;

  // register ctop_app_appW2_wmi_sDataThreadBusy_d
  assign ctop_app_appW2_wmi_sDataThreadBusy_d$D_IN =
	     CAN_FIRE_RL_ctop_sdtbConnect ;
  assign ctop_app_appW2_wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW2_wmi_sFlagReg
  assign ctop_app_appW2_wmi_sFlagReg$D_IN = ctop_inf_dp0_wmi_wmi_sFlagReg ;
  assign ctop_app_appW2_wmi_sFlagReg$EN = 1'd1 ;

  // register ctop_app_appW2_wmi_sThreadBusy_d
  assign ctop_app_appW2_wmi_sThreadBusy_d$D_IN =
	     CAN_FIRE_RL_ctop_stbConnect_8 ;
  assign ctop_app_appW2_wmi_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW2_wmi_statusR
  assign ctop_app_appW2_wmi_statusR$D_IN = 8'h0 ;
  assign ctop_app_appW2_wmi_statusR$EN = 1'b0 ;

  // register ctop_app_appW2_wmi_trafficSticky
  assign ctop_app_appW2_wmi_trafficSticky$D_IN = 1'b0 ;
  assign ctop_app_appW2_wmi_trafficSticky$EN = 1'b0 ;

  // register ctop_app_appW2_wsiM_burstKind
  assign ctop_app_appW2_wsiM_burstKind$D_IN =
	     (ctop_app_appW2_wsiM_burstKind == 2'd0) ?
	       (ctop_app_appW2_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign ctop_app_appW2_wsiM_burstKind$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (ctop_app_appW2_wsiM_burstKind == 2'd0 ||
	      (ctop_app_appW2_wsiM_burstKind == 2'd1 ||
	       ctop_app_appW2_wsiM_burstKind == 2'd2) &&
	      ctop_app_appW2_wsiM_reqFifo_q_0[57]) ;

  // register ctop_app_appW2_wsiM_errorSticky
  assign ctop_app_appW2_wsiM_errorSticky$D_IN = 1'b0 ;
  assign ctop_app_appW2_wsiM_errorSticky$EN = 1'b0 ;

  // register ctop_app_appW2_wsiM_iMesgCount
  assign ctop_app_appW2_wsiM_iMesgCount$D_IN =
	     ctop_app_appW2_wsiM_iMesgCount + 32'd1 ;
  assign ctop_app_appW2_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     ctop_app_appW2_wsiM_burstKind == 2'd2 &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[57] ;

  // register ctop_app_appW2_wsiM_operateD
  assign ctop_app_appW2_wsiM_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW2_operating_actions ;
  assign ctop_app_appW2_wsiM_operateD$EN = 1'd1 ;

  // register ctop_app_appW2_wsiM_pMesgCount
  assign ctop_app_appW2_wsiM_pMesgCount$D_IN =
	     ctop_app_appW2_wsiM_pMesgCount + 32'd1 ;
  assign ctop_app_appW2_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     ctop_app_appW2_wsiM_burstKind == 2'd1 &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[57] ;

  // register ctop_app_appW2_wsiM_peerIsReady
  assign ctop_app_appW2_wsiM_peerIsReady$D_IN =
	     CAN_FIRE_RL_ctop_app_sRstConnect ;
  assign ctop_app_appW2_wsiM_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW2_wsiM_reqFifo_c_r
  assign ctop_app_appW2_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr ?
	       MUX_ctop_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign ctop_app_appW2_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW2_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both or
	  MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr or
	  ctop_app_appW2_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both:
	  ctop_app_appW2_wsiM_reqFifo_q_0$D_IN =
	      MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2:
	  ctop_app_appW2_wsiM_reqFifo_q_0$D_IN =
	      MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr:
	  ctop_app_appW2_wsiM_reqFifo_q_0$D_IN =
	      ctop_app_appW2_wsiM_reqFifo_q_1;
      default: ctop_app_appW2_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr &&
	     ctop_app_appW2_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW2_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both or
	  MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both:
	  ctop_app_appW2_wsiM_reqFifo_q_1$D_IN =
	      MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_ctop_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2:
	  ctop_app_appW2_wsiM_reqFifo_q_1$D_IN =
	      MUX_ctop_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr:
	  ctop_app_appW2_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: ctop_app_appW2_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW2_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_incCtr &&
	     ctop_app_appW2_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW2_wsiM_sThreadBusy_d
  assign ctop_app_appW2_wsiM_sThreadBusy_d$D_IN =
	     CAN_FIRE_RL_ctop_app_stbConnect ;
  assign ctop_app_appW2_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW2_wsiM_statusR
  assign ctop_app_appW2_wsiM_statusR$D_IN =
	     { ctop_app_appW2_wsiM_isReset$VAL,
	       !ctop_app_appW2_wsiM_peerIsReady,
	       !ctop_app_appW2_wsiM_operateD,
	       ctop_app_appW2_wsiM_errorSticky,
	       ctop_app_appW2_wsiM_burstKind != 2'd0,
	       ctop_app_appW2_wsiM_sThreadBusy_d,
	       1'd0,
	       ctop_app_appW2_wsiM_trafficSticky } ;
  assign ctop_app_appW2_wsiM_statusR$EN = 1'd1 ;

  // register ctop_app_appW2_wsiM_tBusyCount
  assign ctop_app_appW2_wsiM_tBusyCount$D_IN =
	     ctop_app_appW2_wsiM_tBusyCount + 32'd1 ;
  assign ctop_app_appW2_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_ctop_app_appW2_wsiM_inc_tBusyCount ;

  // register ctop_app_appW2_wsiM_trafficSticky
  assign ctop_app_appW2_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign ctop_app_appW2_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsiM_reqFifo_deq &&
	     ctop_app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register ctop_app_appW2_wsiS_burstKind
  assign ctop_app_appW2_wsiS_burstKind$D_IN =
	     (ctop_app_appW2_wsiS_burstKind == 2'd0) ? 2'd2 : 2'd0 ;
  assign ctop_app_appW2_wsiS_burstKind$EN = 1'b0 ;

  // register ctop_app_appW2_wsiS_errorSticky
  assign ctop_app_appW2_wsiS_errorSticky$D_IN = 1'd1 ;
  assign ctop_app_appW2_wsiS_errorSticky$EN = 1'b0 ;

  // register ctop_app_appW2_wsiS_iMesgCount
  assign ctop_app_appW2_wsiS_iMesgCount$D_IN =
	     ctop_app_appW2_wsiS_iMesgCount + 32'd1 ;
  assign ctop_app_appW2_wsiS_iMesgCount$EN = 1'b0 ;

  // register ctop_app_appW2_wsiS_mesgWordLength
  assign ctop_app_appW2_wsiS_mesgWordLength$D_IN =
	     ctop_app_appW2_wsiS_wordCount ;
  assign ctop_app_appW2_wsiS_mesgWordLength$EN = 1'b0 ;

  // register ctop_app_appW2_wsiS_operateD
  assign ctop_app_appW2_wsiS_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW2_operating_actions ;
  assign ctop_app_appW2_wsiS_operateD$EN = 1'd1 ;

  // register ctop_app_appW2_wsiS_pMesgCount
  assign ctop_app_appW2_wsiS_pMesgCount$D_IN =
	     ctop_app_appW2_wsiS_pMesgCount + 32'd1 ;
  assign ctop_app_appW2_wsiS_pMesgCount$EN = 1'b0 ;

  // register ctop_app_appW2_wsiS_peerIsReady
  assign ctop_app_appW2_wsiS_peerIsReady$D_IN = 1'b0 ;
  assign ctop_app_appW2_wsiS_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW2_wsiS_reqFifo_countReg
  assign ctop_app_appW2_wsiS_reqFifo_countReg$D_IN =
	     ctop_app_appW2_wsiS_reqFifo_countReg - 2'd1 ;
  assign ctop_app_appW2_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_ctop_app_appW2_wsiS_reqFifo__updateLevelCounter ;

  // register ctop_app_appW2_wsiS_reqFifo_levelsValid
  assign ctop_app_appW2_wsiS_reqFifo_levelsValid$D_IN =
	     ctop_app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign ctop_app_appW2_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wsipass_doMessagePush ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushImprecise ||
	     ctop_app_appW2_wsiS_reqFifo_r_deq$whas ;

  // register ctop_app_appW2_wsiS_statusR
  assign ctop_app_appW2_wsiS_statusR$D_IN =
	     { ctop_app_appW2_wsiS_isReset$VAL,
	       !ctop_app_appW2_wsiS_peerIsReady,
	       !ctop_app_appW2_wsiS_operateD,
	       ctop_app_appW2_wsiS_errorSticky,
	       ctop_app_appW2_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_ctop_app_appW2_wsiS_backpressure ||
	       ctop_app_appW2_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       ctop_app_appW2_wsiS_trafficSticky } ;
  assign ctop_app_appW2_wsiS_statusR$EN = 1'd1 ;

  // register ctop_app_appW2_wsiS_tBusyCount
  assign ctop_app_appW2_wsiS_tBusyCount$D_IN =
	     ctop_app_appW2_wsiS_tBusyCount + 32'd1 ;
  assign ctop_app_appW2_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_ctop_app_appW2_wsiS_inc_tBusyCount ;

  // register ctop_app_appW2_wsiS_trafficSticky
  assign ctop_app_appW2_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign ctop_app_appW2_wsiS_trafficSticky$EN = 1'b0 ;

  // register ctop_app_appW2_wsiS_wordCount
  assign ctop_app_appW2_wsiS_wordCount$D_IN =
	     ctop_app_appW2_wsiS_wordCount + 12'd1 ;
  assign ctop_app_appW2_wsiS_wordCount$EN = 1'b0 ;

  // register ctop_app_appW2_wsiWordsRemain
  assign ctop_app_appW2_wsiWordsRemain$D_IN =
	     MUX_ctop_app_appW2_mesgLength$write_1__SEL_4 ?
	       ctop_app_appW2_wsiS_reqFifo$D_OUT[55:44] :
	       MUX_ctop_app_appW2_wsiWordsRemain$write_1__VAL_2 ;
  assign ctop_app_appW2_wsiWordsRemain$EN =
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW2_wmwt_messagePushPrecise ;

  // register ctop_app_appW2_zeroLengthMesg
  assign ctop_app_appW2_zeroLengthMesg$D_IN =
	     ctop_app_appW2_wsiS_reqFifo$D_OUT[11:8] == 4'd0 ;
  assign ctop_app_appW2_zeroLengthMesg$EN =
	     MUX_ctop_app_appW2_mesgLength$write_1__SEL_4 ;

  // register ctop_app_appW3_bytesRead
  assign ctop_app_appW3_bytesRead$D_IN = ctop_app_appW3_bytesRead + 32'd4 ;
  assign ctop_app_appW3_bytesRead$EN =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     ctop_app_appW3_bytesRead != 32'hFFFFFFFF ;

  // register ctop_app_appW3_bytesThisMessage
  assign ctop_app_appW3_bytesThisMessage$D_IN = btm__h208039 ;
  assign ctop_app_appW3_bytesThisMessage$EN =
	     MUX_ctop_app_appW3_mesgWtCount$write_1__SEL_1 ;

  // register ctop_app_appW3_bytesWritten
  assign ctop_app_appW3_bytesWritten$D_IN =
	     ctop_app_appW3_bytesWritten + 32'd4 ;
  assign ctop_app_appW3_bytesWritten$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress &&
	     ctop_app_appW3_bytesWritten < 32'hFFFFFFFB ;

  // register ctop_app_appW3_cyclesPassed
  assign ctop_app_appW3_cyclesPassed$D_IN =
	     ctop_app_appW3_cyclesPassed + 32'd1 ;
  assign ctop_app_appW3_cyclesPassed$EN =
	     ctop_app_appW3_wsiS_statusR[0] &&
	     ctop_app_appW3_cyclesPassed != 32'hFFFFFFFF ;

  // register ctop_app_appW3_dlyCtrl
  assign ctop_app_appW3_dlyCtrl$D_IN = ctop_app_appW3_wci_reqF$D_OUT[31:0] ;
  assign ctop_app_appW3_dlyCtrl$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	     ctop_app_appW3_wci_reqF$D_OUT[51:32] == 20'h0 ;

  // register ctop_app_appW3_dlyHoldoffBytes
  assign ctop_app_appW3_dlyHoldoffBytes$D_IN =
	     ctop_app_appW3_wci_reqF$D_OUT[31:0] ;
  assign ctop_app_appW3_dlyHoldoffBytes$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	     ctop_app_appW3_wci_reqF$D_OUT[51:32] == 20'h00004 ;

  // register ctop_app_appW3_dlyHoldoffCycles
  assign ctop_app_appW3_dlyHoldoffCycles$D_IN =
	     ctop_app_appW3_wci_reqF$D_OUT[31:0] ;
  assign ctop_app_appW3_dlyHoldoffCycles$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	     ctop_app_appW3_wci_reqF$D_OUT[51:32] == 20'h00008 ;

  // register ctop_app_appW3_dlyRAG
  assign ctop_app_appW3_dlyRAG$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_delay_read_req ?
	       MUX_ctop_app_appW3_dlyRAG$write_1__VAL_1 :
	       23'd0 ;
  assign ctop_app_appW3_dlyRAG$EN =
	     WILL_FIRE_RL_ctop_app_appW3_delay_read_req ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ;

  // register ctop_app_appW3_dlyRdOpOther
  assign ctop_app_appW3_dlyRdOpOther$D_IN =
	     ctop_app_appW3_dlyRdOpOther + 32'd1 ;
  assign ctop_app_appW3_dlyRdOpOther$EN =
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_begin &&
	     v__h210525[31:24] != 8'd0 ;

  // register ctop_app_appW3_dlyRdOpZero
  assign ctop_app_appW3_dlyRdOpZero$D_IN =
	     ctop_app_appW3_dlyRdOpZero + 32'd1 ;
  assign ctop_app_appW3_dlyRdOpZero$EN =
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_begin &&
	     v__h210525[31:24] == 8'd0 ;

  // register ctop_app_appW3_dlyReadCredit_value
  assign ctop_app_appW3_dlyReadCredit_value$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ?
	       8'd12 :
	       MUX_ctop_app_appW3_dlyReadCredit_value$write_1__VAL_2 ;
  assign ctop_app_appW3_dlyReadCredit_value$EN = 1'b1 ;

  // register ctop_app_appW3_dlyReadyToWrite_value
  assign ctop_app_appW3_dlyReadyToWrite_value$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ?
	       16'd0 :
	       MUX_ctop_app_appW3_dlyReadyToWrite_value$write_1__VAL_2 ;
  assign ctop_app_appW3_dlyReadyToWrite_value$EN = 1'b1 ;

  // register ctop_app_appW3_dlyWAG
  assign ctop_app_appW3_dlyWAG$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_delay_write_req ?
	       MUX_ctop_app_appW3_dlyWAG$write_1__VAL_1 :
	       23'd0 ;
  assign ctop_app_appW3_dlyWAG$EN =
	     WILL_FIRE_RL_ctop_app_appW3_delay_write_req ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ;

  // register ctop_app_appW3_dlyWordsStored_value
  assign ctop_app_appW3_dlyWordsStored_value$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ?
	       25'd0 :
	       MUX_ctop_app_appW3_dlyWordsStored_value$write_1__VAL_2 ;
  assign ctop_app_appW3_dlyWordsStored_value$EN = 1'b1 ;

  // register ctop_app_appW3_mesgLengthSoFar
  assign ctop_app_appW3_mesgLengthSoFar$D_IN =
	     ctop_app_appW3_wsiS_reqFifo$D_OUT[57] ?
	       14'd0 :
	       ctop_app_appW3_mesgLengthSoFar_780_PLUS_1___d8258 ;
  assign ctop_app_appW3_mesgLengthSoFar$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ;

  // register ctop_app_appW3_mesgRdCount
  assign ctop_app_appW3_mesgRdCount$D_IN =
	     MUX_ctop_app_appW3_mesgRdCount$write_1__SEL_1 ?
	       MUX_ctop_app_appW3_mesgRdCount$write_1__VAL_1 :
	       32'd0 ;
  assign ctop_app_appW3_mesgRdCount$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse &&
	     ctop_app_appW3_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ;

  // register ctop_app_appW3_mesgWF_rCache
  assign ctop_app_appW3_mesgWF_rCache$D_IN =
	     { 1'd1, ctop_app_appW3_mesgWF_rWrPtr, x__h205550 } ;
  assign ctop_app_appW3_mesgWF_rCache$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ;

  // register ctop_app_appW3_mesgWF_rRdPtr
  assign ctop_app_appW3_mesgWF_rRdPtr$D_IN = x__h205651 ;
  assign ctop_app_appW3_mesgWF_rRdPtr$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wrtSer_body ;

  // register ctop_app_appW3_mesgWF_rWrPtr
  assign ctop_app_appW3_mesgWF_rWrPtr$D_IN =
	     ctop_app_appW3_mesgWF_rWrPtr + 13'd1 ;
  assign ctop_app_appW3_mesgWF_rWrPtr$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ;

  // register ctop_app_appW3_mesgWtCount
  assign ctop_app_appW3_mesgWtCount$D_IN =
	     MUX_ctop_app_appW3_mesgWtCount$write_1__SEL_1 ?
	       MUX_ctop_app_appW3_mesgWtCount$write_1__VAL_1 :
	       32'd0 ;
  assign ctop_app_appW3_mesgWtCount$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress &&
	     ctop_app_appW3_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO ;

  // register ctop_app_appW3_rdSerAddr
  assign ctop_app_appW3_rdSerAddr$D_IN = 32'h0 ;
  assign ctop_app_appW3_rdSerAddr$EN = 1'b0 ;

  // register ctop_app_appW3_rdSerEmpty
  assign ctop_app_appW3_rdSerEmpty$D_IN =
	     !MUX_ctop_app_appW3_rdSerEmpty$write_1__SEL_1 ;
  assign ctop_app_appW3_rdSerEmpty$EN =
	     (WILL_FIRE_RL_ctop_app_appW3_rdSer_body ||
	      WILL_FIRE_RL_ctop_app_appW3_rdSer_begin) &&
	     (ctop_app_appW3_rdSerEmpty || ctop_app_appW3_rdSerPos == 2'd0) ||
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_sync ;

  // register ctop_app_appW3_rdSerMeta
  assign ctop_app_appW3_rdSerMeta$D_IN = v__h210525 ;
  assign ctop_app_appW3_rdSerMeta$EN =
	     CAN_FIRE_RL_ctop_app_appW3_rdSer_begin ;

  // register ctop_app_appW3_rdSerPos
  assign ctop_app_appW3_rdSerPos$D_IN =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 ?
	       MUX_ctop_app_appW3_rdSerPos$write_1__VAL_1 :
	       2'd0 ;
  assign ctop_app_appW3_rdSerPos$EN =
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_body ||
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_begin ||
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_sync ;

  // register ctop_app_appW3_rdSerStage
  assign ctop_app_appW3_rdSerStage$D_IN =
	     ctop_app_appW3_wide16Fc$D_OUT[31:0] ;
  assign ctop_app_appW3_rdSerStage$EN =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (ctop_app_appW3_rdSerEmpty || ctop_app_appW3_rdSerPos == 2'd0) ;

  // register ctop_app_appW3_rdSerStage_1
  assign ctop_app_appW3_rdSerStage_1$D_IN =
	     ctop_app_appW3_wide16Fc$D_OUT[63:32] ;
  assign ctop_app_appW3_rdSerStage_1$EN =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (ctop_app_appW3_rdSerEmpty || ctop_app_appW3_rdSerPos == 2'd0) ;

  // register ctop_app_appW3_rdSerStage_2
  assign ctop_app_appW3_rdSerStage_2$D_IN =
	     ctop_app_appW3_wide16Fc$D_OUT[95:64] ;
  assign ctop_app_appW3_rdSerStage_2$EN =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (ctop_app_appW3_rdSerEmpty || ctop_app_appW3_rdSerPos == 2'd0) ;

  // register ctop_app_appW3_rdSerStage_3
  assign ctop_app_appW3_rdSerStage_3$D_IN =
	     ctop_app_appW3_wide16Fc$D_OUT[127:96] ;
  assign ctop_app_appW3_rdSerStage_3$EN =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (ctop_app_appW3_rdSerEmpty || ctop_app_appW3_rdSerPos == 2'd0) ;

  // register ctop_app_appW3_rdSerUnroll
  assign ctop_app_appW3_rdSerUnroll$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_begin ?
	       v__h210525[17:2] :
	       MUX_ctop_app_appW3_rdSerUnroll$write_1__VAL_2 ;
  assign ctop_app_appW3_rdSerUnroll$EN =
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_begin ||
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_body ;

  // register ctop_app_appW3_rdSyncWord
  always@(WILL_FIRE_RL_ctop_app_appW3_rdSer_begin or
	  MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW3_rdSer_body or
	  MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_rdSer_sync)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_rdSer_begin:
	  ctop_app_appW3_rdSyncWord$D_IN =
	      MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW3_rdSer_body:
	  ctop_app_appW3_rdSyncWord$D_IN =
	      MUX_ctop_app_appW3_rdSyncWord$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_rdSer_sync:
	  ctop_app_appW3_rdSyncWord$D_IN = 1'd0;
      default: ctop_app_appW3_rdSyncWord$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_rdSyncWord$EN =
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_begin ||
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_body ||
	     WILL_FIRE_RL_ctop_app_appW3_rdSer_sync ;

  // register ctop_app_appW3_readMeta
  assign ctop_app_appW3_readMeta$D_IN = ctop_app_appW3_metaRF$D_OUT ;
  assign ctop_app_appW3_readMeta$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin ;

  // register ctop_app_appW3_tog50
  assign ctop_app_appW3_tog50$D_IN = !ctop_app_appW3_tog50 ;
  assign ctop_app_appW3_tog50$EN =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;

  // register ctop_app_appW3_unrollCnt
  assign ctop_app_appW3_unrollCnt$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin ?
	       MUX_ctop_app_appW3_unrollCnt$write_1__VAL_1 :
	       MUX_ctop_app_appW3_unrollCnt$write_1__VAL_2 ;
  assign ctop_app_appW3_unrollCnt$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse ;

  // register ctop_app_appW3_wci_cEdge
  assign ctop_app_appW3_wci_cEdge$D_IN =
	     ctop_app_appW3_wci_reqF$D_OUT[36:34] ;
  assign ctop_app_appW3_wci_cEdge$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start ;

  // register ctop_app_appW3_wci_cState
  assign ctop_app_appW3_wci_cState$D_IN = ctop_app_appW3_wci_nState ;
  assign ctop_app_appW3_wci_cState$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete &&
	     !ctop_app_appW3_wci_illegalEdge ;

  // register ctop_app_appW3_wci_ctlAckReg
  assign ctop_app_appW3_wci_ctlAckReg$D_IN =
	     ctop_app_appW3_wci_ctlAckReg_1$whas ;
  assign ctop_app_appW3_wci_ctlAckReg$EN = 1'd1 ;

  // register ctop_app_appW3_wci_ctlOpActive
  assign ctop_app_appW3_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ;
  assign ctop_app_appW3_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start ;

  // register ctop_app_appW3_wci_illegalEdge
  assign ctop_app_appW3_wci_illegalEdge$D_IN =
	     !MUX_ctop_app_appW3_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_ctop_app_appW3_wci_illegalEdge$write_1__VAL_2 ;
  assign ctop_app_appW3_wci_illegalEdge$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete &&
	     ctop_app_appW3_wci_illegalEdge ||
	     MUX_ctop_app_appW3_wci_illegalEdge$write_1__SEL_2 ;

  // register ctop_app_appW3_wci_nState
  always@(ctop_app_appW3_wci_reqF$D_OUT)
  begin
    case (ctop_app_appW3_wci_reqF$D_OUT[36:34])
      3'd0: ctop_app_appW3_wci_nState$D_IN = 3'd1;
      3'd1: ctop_app_appW3_wci_nState$D_IN = 3'd2;
      3'd2: ctop_app_appW3_wci_nState$D_IN = 3'd3;
      default: ctop_app_appW3_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign ctop_app_appW3_wci_nState$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start &&
	     (ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_app_appW3_wci_cState == 3'd0 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (ctop_app_appW3_wci_cState == 3'd1 ||
	       ctop_app_appW3_wci_cState == 3'd3) ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_app_appW3_wci_cState == 3'd2 ||
	      ctop_app_appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (ctop_app_appW3_wci_cState == 3'd3 ||
	       ctop_app_appW3_wci_cState == 3'd2 ||
	       ctop_app_appW3_wci_cState == 3'd1)) ;

  // register ctop_app_appW3_wci_reqF_countReg
  assign ctop_app_appW3_wci_reqF_countReg$D_IN =
	     (ctop_app_appW3_wci_wciReq$wget[59:57] != 3'd0) ?
	       ctop_app_appW3_wci_reqF_countReg + 2'd1 :
	       ctop_app_appW3_wci_reqF_countReg - 2'd1 ;
  assign ctop_app_appW3_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wci_reqF__updateLevelCounter ;

  // register ctop_app_appW3_wci_respF_c_r
  assign ctop_app_appW3_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr ?
	       MUX_ctop_app_appW3_wci_respF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW3_wci_respF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW3_wci_respF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr ;

  // register ctop_app_appW3_wci_respF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW3_wci_respF_both or
	  MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wci_respF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr or
	  ctop_app_appW3_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wci_respF_both:
	  ctop_app_appW3_wci_respF_q_0$D_IN =
	      MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW3_wci_respF_q_0$write_1__SEL_2:
	  ctop_app_appW3_wci_respF_q_0$D_IN =
	      MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr:
	  ctop_app_appW3_wci_respF_q_0$D_IN = ctop_app_appW3_wci_respF_q_1;
      default: ctop_app_appW3_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wci_respF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr &&
	     ctop_app_appW3_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr ;

  // register ctop_app_appW3_wci_respF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW3_wci_respF_both or
	  MUX_ctop_app_appW3_wci_respF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wci_respF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wci_respF_both:
	  ctop_app_appW3_wci_respF_q_1$D_IN =
	      MUX_ctop_app_appW3_wci_respF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW3_wci_respF_q_1$write_1__SEL_2:
	  ctop_app_appW3_wci_respF_q_1$D_IN =
	      MUX_ctop_app_appW3_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr:
	  ctop_app_appW3_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: ctop_app_appW3_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wci_respF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_incCtr &&
	     ctop_app_appW3_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW3_wci_respF_decCtr ;

  // register ctop_app_appW3_wci_sFlagReg
  assign ctop_app_appW3_wci_sFlagReg$D_IN = 1'b0 ;
  assign ctop_app_appW3_wci_sFlagReg$EN = 1'd1 ;

  // register ctop_app_appW3_wci_sThreadBusy_d
  assign ctop_app_appW3_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign ctop_app_appW3_wci_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW3_wmemiRdReq
  assign ctop_app_appW3_wmemiRdReq$D_IN = ctop_app_appW3_wmemiRdReq + 32'd1 ;
  assign ctop_app_appW3_wmemiRdReq$EN =
	     WILL_FIRE_RL_ctop_app_appW3_delay_read_req ;

  // register ctop_app_appW3_wmemiRdResp1
  assign ctop_app_appW3_wmemiRdResp1$D_IN =
	     ctop_app_appW3_wmemiRdResp1 + 32'd1 ;
  assign ctop_app_appW3_wmemiRdResp1$EN =
	     CAN_FIRE_RL_ctop_app_appW3_delay_read_resp ;

  // register ctop_app_appW3_wmemiRdResp2
  assign ctop_app_appW3_wmemiRdResp2$D_IN =
	     ctop_app_appW3_wmemiRdResp2 + 32'd1 ;
  assign ctop_app_appW3_wmemiRdResp2$EN =
	     CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc ;

  // register ctop_app_appW3_wmemiWrReq
  assign ctop_app_appW3_wmemiWrReq$D_IN = ctop_app_appW3_wmemiWrReq + 32'd1 ;
  assign ctop_app_appW3_wmemiWrReq$EN =
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;

  // register ctop_app_appW3_wmemi_busyWithMessage
  assign ctop_app_appW3_wmemi_busyWithMessage$D_IN = 1'b0 ;
  assign ctop_app_appW3_wmemi_busyWithMessage$EN = 1'b0 ;

  // register ctop_app_appW3_wmemi_dhF_c_r
  assign ctop_app_appW3_wmemi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr ?
	       MUX_ctop_app_appW3_wmemi_dhF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW3_wmemi_dhF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW3_wmemi_dhF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr ;

  // register ctop_app_appW3_wmemi_dhF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both or
	  MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr or
	  ctop_app_appW3_wmemi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both:
	  ctop_app_appW3_wmemi_dhF_q_0$D_IN =
	      MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__SEL_2:
	  ctop_app_appW3_wmemi_dhF_q_0$D_IN =
	      MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr:
	  ctop_app_appW3_wmemi_dhF_q_0$D_IN = ctop_app_appW3_wmemi_dhF_q_1;
      default: ctop_app_appW3_wmemi_dhF_q_0$D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wmemi_dhF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr &&
	     ctop_app_appW3_wmemi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr ;

  // register ctop_app_appW3_wmemi_dhF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both or
	  MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both:
	  ctop_app_appW3_wmemi_dhF_q_1$D_IN =
	      MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW3_wmemi_dhF_q_1$write_1__SEL_2:
	  ctop_app_appW3_wmemi_dhF_q_1$D_IN =
	      MUX_ctop_app_appW3_wmemi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr:
	  ctop_app_appW3_wmemi_dhF_q_1$D_IN =
	      146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: ctop_app_appW3_wmemi_dhF_q_1$D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wmemi_dhF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_incCtr &&
	     ctop_app_appW3_wmemi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_dhF_decCtr ;

  // register ctop_app_appW3_wmemi_errorSticky
  assign ctop_app_appW3_wmemi_errorSticky$D_IN = 1'd1 ;
  assign ctop_app_appW3_wmemi_errorSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_respAdvance &&
	     !ctop_app_appW3_wmemi_respF$FULL_N ;

  // register ctop_app_appW3_wmemi_operateD
  assign ctop_app_appW3_wmemi_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;
  assign ctop_app_appW3_wmemi_operateD$EN = 1'd1 ;

  // register ctop_app_appW3_wmemi_peerIsReady
  assign ctop_app_appW3_wmemi_peerIsReady$D_IN = 1'b1 ;
  assign ctop_app_appW3_wmemi_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW3_wmemi_reqF_c_r
  assign ctop_app_appW3_wmemi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr ?
	       MUX_ctop_app_appW3_wmemi_reqF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW3_wmemi_reqF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW3_wmemi_reqF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr ;

  // register ctop_app_appW3_wmemi_reqF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both or
	  MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr or
	  ctop_app_appW3_wmemi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both:
	  ctop_app_appW3_wmemi_reqF_q_0$D_IN =
	      MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__SEL_2:
	  ctop_app_appW3_wmemi_reqF_q_0$D_IN =
	      MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr:
	  ctop_app_appW3_wmemi_reqF_q_0$D_IN = ctop_app_appW3_wmemi_reqF_q_1;
      default: ctop_app_appW3_wmemi_reqF_q_0$D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wmemi_reqF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr &&
	     ctop_app_appW3_wmemi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr ;

  // register ctop_app_appW3_wmemi_reqF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both or
	  MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both:
	  ctop_app_appW3_wmemi_reqF_q_1$D_IN =
	      MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW3_wmemi_reqF_q_1$write_1__SEL_2:
	  ctop_app_appW3_wmemi_reqF_q_1$D_IN =
	      MUX_ctop_app_appW3_wmemi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr:
	  ctop_app_appW3_wmemi_reqF_q_1$D_IN = 52'h0AAAAAAAAAAAA;
      default: ctop_app_appW3_wmemi_reqF_q_1$D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wmemi_reqF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_incCtr &&
	     ctop_app_appW3_wmemi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_reqF_decCtr ;

  // register ctop_app_appW3_wmemi_statusR
  assign ctop_app_appW3_wmemi_statusR$D_IN =
	     { ctop_app_appW3_wmemi_isReset$VAL,
	       !ctop_app_appW3_wmemi_peerIsReady,
	       !ctop_app_appW3_wmemi_operateD,
	       ctop_app_appW3_wmemi_errorSticky,
	       3'd0,
	       ctop_app_appW3_wmemi_trafficSticky } ;
  assign ctop_app_appW3_wmemi_statusR$EN = 1'd1 ;

  // register ctop_app_appW3_wmemi_trafficSticky
  assign ctop_app_appW3_wmemi_trafficSticky$D_IN = 1'd1 ;
  assign ctop_app_appW3_wmemi_trafficSticky$EN = dram0$wmemiS_SCmdAccept ;

  // register ctop_app_appW3_wrtSerAddr
  assign ctop_app_appW3_wrtSerAddr$D_IN = 32'h0 ;
  assign ctop_app_appW3_wrtSerAddr$EN = 1'b0 ;

  // register ctop_app_appW3_wrtSerPos
  assign ctop_app_appW3_wrtSerPos$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin ?
	       MUX_ctop_app_appW3_wrtSerPos$write_1__VAL_1 :
	       MUX_ctop_app_appW3_wrtSerPos$write_1__VAL_2 ;
  assign ctop_app_appW3_wrtSerPos$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body ;

  // register ctop_app_appW3_wrtSerStage
  assign ctop_app_appW3_wrtSerStage$D_IN =
	     MUX_ctop_app_appW3_wrtSerStage$write_1__SEL_1 ?
	       data__h209151 :
	       ctop_app_appW3_metaWF$D_OUT ;
  assign ctop_app_appW3_wrtSerStage$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin &&
	     ctop_app_appW3_wrtSerPos == 2'd0 ;

  // register ctop_app_appW3_wrtSerStage_1
  assign ctop_app_appW3_wrtSerStage_1$D_IN =
	     MUX_ctop_app_appW3_wrtSerStage_1$write_1__SEL_1 ?
	       data__h209151 :
	       ctop_app_appW3_metaWF$D_OUT ;
  assign ctop_app_appW3_wrtSerStage_1$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin &&
	     ctop_app_appW3_wrtSerPos == 2'd1 ;

  // register ctop_app_appW3_wrtSerStage_2
  assign ctop_app_appW3_wrtSerStage_2$D_IN =
	     MUX_ctop_app_appW3_wrtSerStage_2$write_1__SEL_1 ?
	       data__h209151 :
	       ctop_app_appW3_metaWF$D_OUT ;
  assign ctop_app_appW3_wrtSerStage_2$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd2 ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin &&
	     ctop_app_appW3_wrtSerPos == 2'd2 ;

  // register ctop_app_appW3_wrtSerStage_3
  assign ctop_app_appW3_wrtSerStage_3$D_IN =
	     MUX_ctop_app_appW3_wrtSerStage_3$write_1__SEL_1 ?
	       data__h209151 :
	       ctop_app_appW3_metaWF$D_OUT ;
  assign ctop_app_appW3_wrtSerStage_3$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     ctop_app_appW3_wrtSerPos == 2'd3 ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin &&
	     ctop_app_appW3_wrtSerPos == 2'd3 ;

  // register ctop_app_appW3_wrtSerUnroll
  assign ctop_app_appW3_wrtSerUnroll$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin ?
	       ctop_app_appW3_metaWF$D_OUT[17:2] :
	       MUX_ctop_app_appW3_wrtSerUnroll$write_1__VAL_2 ;
  assign ctop_app_appW3_wrtSerUnroll$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body ;

  // register ctop_app_appW3_wsiM_burstKind
  assign ctop_app_appW3_wsiM_burstKind$D_IN =
	     (ctop_app_appW3_wsiM_burstKind == 2'd0) ?
	       (ctop_app_appW3_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign ctop_app_appW3_wsiM_burstKind$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (ctop_app_appW3_wsiM_burstKind == 2'd0 ||
	      (ctop_app_appW3_wsiM_burstKind == 2'd1 ||
	       ctop_app_appW3_wsiM_burstKind == 2'd2) &&
	      ctop_app_appW3_wsiM_reqFifo_q_0[57]) ;

  // register ctop_app_appW3_wsiM_errorSticky
  assign ctop_app_appW3_wsiM_errorSticky$D_IN = 1'b0 ;
  assign ctop_app_appW3_wsiM_errorSticky$EN = 1'b0 ;

  // register ctop_app_appW3_wsiM_iMesgCount
  assign ctop_app_appW3_wsiM_iMesgCount$D_IN =
	     ctop_app_appW3_wsiM_iMesgCount + 32'd1 ;
  assign ctop_app_appW3_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     ctop_app_appW3_wsiM_burstKind == 2'd2 &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[57] ;

  // register ctop_app_appW3_wsiM_operateD
  assign ctop_app_appW3_wsiM_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;
  assign ctop_app_appW3_wsiM_operateD$EN = 1'd1 ;

  // register ctop_app_appW3_wsiM_pMesgCount
  assign ctop_app_appW3_wsiM_pMesgCount$D_IN =
	     ctop_app_appW3_wsiM_pMesgCount + 32'd1 ;
  assign ctop_app_appW3_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     ctop_app_appW3_wsiM_burstKind == 2'd1 &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[57] ;

  // register ctop_app_appW3_wsiM_peerIsReady
  assign ctop_app_appW3_wsiM_peerIsReady$D_IN =
	     CAN_FIRE_RL_ctop_app_sRstConnect_1 ;
  assign ctop_app_appW3_wsiM_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW3_wsiM_reqFifo_c_r
  assign ctop_app_appW3_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr ?
	       MUX_ctop_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign ctop_app_appW3_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW3_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both or
	  MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr or
	  ctop_app_appW3_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both:
	  ctop_app_appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2:
	  ctop_app_appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr:
	  ctop_app_appW3_wsiM_reqFifo_q_0$D_IN =
	      ctop_app_appW3_wsiM_reqFifo_q_1;
      default: ctop_app_appW3_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr &&
	     ctop_app_appW3_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW3_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both or
	  MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both:
	  ctop_app_appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_ctop_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2:
	  ctop_app_appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_ctop_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr:
	  ctop_app_appW3_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: ctop_app_appW3_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW3_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_incCtr &&
	     ctop_app_appW3_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW3_wsiM_sThreadBusy_d
  assign ctop_app_appW3_wsiM_sThreadBusy_d$D_IN =
	     CAN_FIRE_RL_ctop_app_stbConnect_1 ;
  assign ctop_app_appW3_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW3_wsiM_statusR
  assign ctop_app_appW3_wsiM_statusR$D_IN =
	     { ctop_app_appW3_wsiM_isReset$VAL,
	       !ctop_app_appW3_wsiM_peerIsReady,
	       !ctop_app_appW3_wsiM_operateD,
	       ctop_app_appW3_wsiM_errorSticky,
	       ctop_app_appW3_wsiM_burstKind != 2'd0,
	       ctop_app_appW3_wsiM_sThreadBusy_d,
	       1'd0,
	       ctop_app_appW3_wsiM_trafficSticky } ;
  assign ctop_app_appW3_wsiM_statusR$EN = 1'd1 ;

  // register ctop_app_appW3_wsiM_tBusyCount
  assign ctop_app_appW3_wsiM_tBusyCount$D_IN =
	     ctop_app_appW3_wsiM_tBusyCount + 32'd1 ;
  assign ctop_app_appW3_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wsiM_inc_tBusyCount ;

  // register ctop_app_appW3_wsiM_trafficSticky
  assign ctop_app_appW3_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign ctop_app_appW3_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiM_reqFifo_deq &&
	     ctop_app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register ctop_app_appW3_wsiS_burstKind
  assign ctop_app_appW3_wsiS_burstKind$D_IN =
	     (ctop_app_appW3_wsiS_burstKind == 2'd0) ?
	       (ctop_app_appW3_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign ctop_app_appW3_wsiS_burstKind$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq &&
	     ctop_app_appW3_wsiS_reqFifo_notFull__486_AND_c_ETC___d5508 ;

  // register ctop_app_appW3_wsiS_errorSticky
  assign ctop_app_appW3_wsiS_errorSticky$D_IN = 1'd1 ;
  assign ctop_app_appW3_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq &&
	     !ctop_app_appW3_wsiS_reqFifo$FULL_N ;

  // register ctop_app_appW3_wsiS_iMesgCount
  assign ctop_app_appW3_wsiS_iMesgCount$D_IN =
	     ctop_app_appW3_wsiS_iMesgCount + 32'd1 ;
  assign ctop_app_appW3_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq &&
	     ctop_app_appW3_wsiS_reqFifo$FULL_N &&
	     ctop_app_appW3_wsiS_burstKind == 2'd2 &&
	     ctop_app_appW3_wsiS_wsiReq$wget[57] ;

  // register ctop_app_appW3_wsiS_mesgWordLength
  assign ctop_app_appW3_wsiS_mesgWordLength$D_IN =
	     ctop_app_appW3_wsiS_wordCount ;
  assign ctop_app_appW3_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq &&
	     ctop_app_appW3_wsiS_reqFifo$FULL_N &&
	     ctop_app_appW3_wsiS_wsiReq$wget[57] ;

  // register ctop_app_appW3_wsiS_operateD
  assign ctop_app_appW3_wsiS_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW3_operating_actions ;
  assign ctop_app_appW3_wsiS_operateD$EN = 1'd1 ;

  // register ctop_app_appW3_wsiS_pMesgCount
  assign ctop_app_appW3_wsiS_pMesgCount$D_IN =
	     ctop_app_appW3_wsiS_pMesgCount + 32'd1 ;
  assign ctop_app_appW3_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq &&
	     ctop_app_appW3_wsiS_reqFifo$FULL_N &&
	     ctop_app_appW3_wsiS_burstKind == 2'd1 &&
	     ctop_app_appW3_wsiS_wsiReq$wget[57] ;

  // register ctop_app_appW3_wsiS_peerIsReady
  assign ctop_app_appW3_wsiS_peerIsReady$D_IN =
	     CAN_FIRE_RL_ctop_app_mRstConnect ;
  assign ctop_app_appW3_wsiS_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW3_wsiS_reqFifo_countReg
  assign ctop_app_appW3_wsiS_reqFifo_countReg$D_IN =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ?
	       ctop_app_appW3_wsiS_reqFifo_countReg + 2'd1 :
	       ctop_app_appW3_wsiS_reqFifo_countReg - 2'd1 ;
  assign ctop_app_appW3_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_reqFifo__updateLevelCounter ;

  // register ctop_app_appW3_wsiS_reqFifo_levelsValid
  assign ctop_app_appW3_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_reset ;
  assign ctop_app_appW3_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_enq &&
	     ctop_app_appW3_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ||
	     WILL_FIRE_RL_ctop_app_appW3_wsipass_doMessagePush ||
	     WILL_FIRE_RL_ctop_app_appW3_wsiS_reqFifo_reset ;

  // register ctop_app_appW3_wsiS_statusR
  assign ctop_app_appW3_wsiS_statusR$D_IN =
	     { ctop_app_appW3_wsiS_isReset$VAL,
	       !ctop_app_appW3_wsiS_peerIsReady,
	       !ctop_app_appW3_wsiS_operateD,
	       ctop_app_appW3_wsiS_errorSticky,
	       ctop_app_appW3_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_ctop_app_appW3_wsiS_backpressure ||
	       ctop_app_appW3_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       ctop_app_appW3_wsiS_trafficSticky } ;
  assign ctop_app_appW3_wsiS_statusR$EN = 1'd1 ;

  // register ctop_app_appW3_wsiS_tBusyCount
  assign ctop_app_appW3_wsiS_tBusyCount$D_IN =
	     ctop_app_appW3_wsiS_tBusyCount + 32'd1 ;
  assign ctop_app_appW3_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_ctop_app_appW3_wsiS_inc_tBusyCount ;

  // register ctop_app_appW3_wsiS_trafficSticky
  assign ctop_app_appW3_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign ctop_app_appW3_wsiS_trafficSticky$EN =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // register ctop_app_appW3_wsiS_wordCount
  assign ctop_app_appW3_wsiS_wordCount$D_IN =
	     ctop_app_appW3_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       ctop_app_appW3_wsiS_wordCount + 12'd1 ;
  assign ctop_app_appW3_wsiS_wordCount$EN =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // register ctop_app_appW4_abortCount
  assign ctop_app_appW4_abortCount$D_IN = ctop_app_appW4_abortCount + 32'd1 ;
  assign ctop_app_appW4_abortCount$EN =
	     CAN_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // register ctop_app_appW4_doAbort
  assign ctop_app_appW4_doAbort$D_IN = 1'd0 ;
  assign ctop_app_appW4_doAbort$EN = CAN_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // register ctop_app_appW4_endOfMessage
  assign ctop_app_appW4_endOfMessage$D_IN =
	     MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1 ;
  assign ctop_app_appW4_endOfMessage$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ;

  // register ctop_app_appW4_errCount
  assign ctop_app_appW4_errCount$D_IN = ctop_app_appW4_errCount + 32'd1 ;
  assign ctop_app_appW4_errCount$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[43:12] !=
	     ctop_app_appW4_valExpect &&
	     (!ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	      ctop_app_appW4_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register ctop_app_appW4_fabRespCredit_value
  assign ctop_app_appW4_fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_ctop_app_appW4_fabRespCredit_value$write_1__VAL_2 ;
  assign ctop_app_appW4_fabRespCredit_value$EN = 1'b1 ;

  // register ctop_app_appW4_fabWordsCurReq
  assign ctop_app_appW4_fabWordsCurReq$D_IN =
	     (ctop_app_appW4_fabWordsRemain <= b__h232583) ?
	       ctop_app_appW4_fabWordsRemain :
	       b__h232583 ;
  assign ctop_app_appW4_fabWordsCurReq$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest ;

  // register ctop_app_appW4_fabWordsRemain
  assign ctop_app_appW4_fabWordsRemain$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ?
	       MUX_ctop_app_appW4_fabWordsRemain$write_1__VAL_1 :
	       MUX_ctop_app_appW4_fabWordsRemain$write_1__VAL_2 ;
  assign ctop_app_appW4_fabWordsRemain$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ;

  // register ctop_app_appW4_firstMsgReq
  assign ctop_app_appW4_firstMsgReq$D_IN = 1'b0 ;
  assign ctop_app_appW4_firstMsgReq$EN = 1'b0 ;

  // register ctop_app_appW4_impreciseBurst
  assign ctop_app_appW4_impreciseBurst$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;
  assign ctop_app_appW4_impreciseBurst$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     !ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // register ctop_app_appW4_lastMesg
  assign ctop_app_appW4_lastMesg$D_IN =
	     (MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1 ||
	      MUX_ctop_app_appW4_lastMesg$write_1__SEL_2) ?
	       ctop_app_appW4_thisMesg :
	       32'hFEFEFFFE ;
  assign ctop_app_appW4_lastMesg$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO ;

  // register ctop_app_appW4_mesgCount
  always@(MUX_ctop_app_appW4_mesgCount$write_1__SEL_1 or
	  MUX_ctop_app_appW4_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize or
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_app_appW4_mesgCount$write_1__SEL_1:
	  ctop_app_appW4_mesgCount$D_IN =
	      MUX_ctop_app_appW4_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize:
	  ctop_app_appW4_mesgCount$D_IN =
	      MUX_ctop_app_appW4_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO:
	  ctop_app_appW4_mesgCount$D_IN = 32'd0;
      default: ctop_app_appW4_mesgCount$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_mesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse &&
	     ctop_app_appW4_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO ;

  // register ctop_app_appW4_mesgLength
  always@(WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize or
	  WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort or
	  MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_ctop_app_appW4_mesgLength$write_1__VAL_3 or
	  MUX_ctop_app_appW4_mesgLength$write_1__SEL_4 or
	  MUX_ctop_app_appW4_mesgLength$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
    WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort:
	ctop_app_appW4_mesgLength$D_IN = 15'd10922;
    MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1:
	ctop_app_appW4_mesgLength$D_IN =
	    MUX_ctop_app_appW4_mesgLength$write_1__VAL_3;
    MUX_ctop_app_appW4_mesgLength$write_1__SEL_4:
	ctop_app_appW4_mesgLength$D_IN =
	    MUX_ctop_app_appW4_mesgLength$write_1__VAL_4;
    default: ctop_app_appW4_mesgLength$D_IN =
		 15'b010101010101010 /* unspecified value */ ;
  endcase
  assign ctop_app_appW4_mesgLength$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // register ctop_app_appW4_mesgLengthSoFar
  assign ctop_app_appW4_mesgLengthSoFar$D_IN =
	     MUX_ctop_app_appW4_impreciseBurst$write_1__SEL_3 ?
	       14'd0 :
	       mlp1__h234883 ;
  assign ctop_app_appW4_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     !ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise ;

  // register ctop_app_appW4_mesgPreRequest
  assign ctop_app_appW4_mesgPreRequest$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest ;
  assign ctop_app_appW4_mesgPreRequest$EN = 1'd1 ;

  // register ctop_app_appW4_mesgReqAddr
  assign ctop_app_appW4_mesgReqAddr$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_ctop_app_appW4_mesgReqAddr$write_1__VAL_2 ;
  assign ctop_app_appW4_mesgReqAddr$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ;

  // register ctop_app_appW4_mesgReqOK
  assign ctop_app_appW4_mesgReqOK$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ;
  assign ctop_app_appW4_mesgReqOK$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyPreRequest ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse ;

  // register ctop_app_appW4_mesgReqValid
  assign ctop_app_appW4_mesgReqValid$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ;
  assign ctop_app_appW4_mesgReqValid$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ;

  // register ctop_app_appW4_opcode
  assign ctop_app_appW4_opcode$D_IN =
	     (WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
	      WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort) ?
	       9'd170 :
	       MUX_ctop_app_appW4_opcode$write_1__VAL_3 ;
  assign ctop_app_appW4_opcode$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // register ctop_app_appW4_preciseBurst
  assign ctop_app_appW4_preciseBurst$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;
  assign ctop_app_appW4_preciseBurst$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // register ctop_app_appW4_readyToPush
  assign ctop_app_appW4_readyToPush$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort &&
	     !MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1 ;
  assign ctop_app_appW4_readyToPush$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     !ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort ;

  // register ctop_app_appW4_readyToRequest
  assign ctop_app_appW4_readyToRequest$D_IN =
	     MUX_ctop_app_appW4_mesgLength$write_1__SEL_4 ;
  assign ctop_app_appW4_readyToRequest$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ;

  // register ctop_app_appW4_respF_rCache
  assign ctop_app_appW4_respF_rCache$D_IN =
	     { 1'd1,
	       ctop_app_appW4_respF_rWrPtr,
	       IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7406,
	       ctop_app_appW4_respF_pwEnqueue$whas &&
	       ctop_app_appW4_respF_wDataIn$wget[57],
	       ctop_app_appW4_respF_pwEnqueue$whas &&
	       ctop_app_appW4_respF_wDataIn$wget[56],
	       IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7408 } ;
  assign ctop_app_appW4_respF_rCache$EN =
	     ctop_app_appW4_respF_pwEnqueue$whas ;

  // register ctop_app_appW4_respF_rRdPtr
  assign ctop_app_appW4_respF_rRdPtr$D_IN = x__h230749 ;
  assign ctop_app_appW4_respF_rRdPtr$EN =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi ;

  // register ctop_app_appW4_respF_rWrPtr
  assign ctop_app_appW4_respF_rWrPtr$D_IN =
	     ctop_app_appW4_respF_rWrPtr + 12'd1 ;
  assign ctop_app_appW4_respF_rWrPtr$EN =
	     ctop_app_appW4_respF_pwEnqueue$whas ;

  // register ctop_app_appW4_smaCtrl
  assign ctop_app_appW4_smaCtrl$D_IN = ctop_app_appW4_wci_reqF$D_OUT[31:0] ;
  assign ctop_app_appW4_smaCtrl$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_cfwr &&
	     ctop_app_appW4_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register ctop_app_appW4_thisMesg
  always@(MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_ctop_app_appW4_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin or
	  MUX_ctop_app_appW4_thisMesg$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise or
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1:
	  ctop_app_appW4_thisMesg$D_IN =
	      MUX_ctop_app_appW4_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin:
	  ctop_app_appW4_thisMesg$D_IN =
	      MUX_ctop_app_appW4_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise:
	  ctop_app_appW4_thisMesg$D_IN =
	      MUX_ctop_app_appW4_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO:
	  ctop_app_appW4_thisMesg$D_IN = 32'hFEFEFFFE;
      default: ctop_app_appW4_thisMesg$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_thisMesg$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO ;

  // register ctop_app_appW4_unrollCnt
  assign ctop_app_appW4_unrollCnt$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ?
	       MUX_ctop_app_appW4_unrollCnt$write_1__VAL_1 :
	       MUX_ctop_app_appW4_unrollCnt$write_1__VAL_2 ;
  assign ctop_app_appW4_unrollCnt$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse ;

  // register ctop_app_appW4_valExpect
  assign ctop_app_appW4_valExpect$D_IN = ctop_app_appW4_valExpect + 32'd1 ;
  assign ctop_app_appW4_valExpect$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise &&
	     (!ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	      ctop_app_appW4_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register ctop_app_appW4_wci_cEdge
  assign ctop_app_appW4_wci_cEdge$D_IN =
	     ctop_app_appW4_wci_reqF$D_OUT[36:34] ;
  assign ctop_app_appW4_wci_cEdge$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start ;

  // register ctop_app_appW4_wci_cState
  assign ctop_app_appW4_wci_cState$D_IN = ctop_app_appW4_wci_nState ;
  assign ctop_app_appW4_wci_cState$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete &&
	     !ctop_app_appW4_wci_illegalEdge ;

  // register ctop_app_appW4_wci_ctlAckReg
  assign ctop_app_appW4_wci_ctlAckReg$D_IN =
	     ctop_app_appW4_wci_ctlAckReg_1$whas ;
  assign ctop_app_appW4_wci_ctlAckReg$EN = 1'd1 ;

  // register ctop_app_appW4_wci_ctlOpActive
  assign ctop_app_appW4_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ;
  assign ctop_app_appW4_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start ;

  // register ctop_app_appW4_wci_illegalEdge
  assign ctop_app_appW4_wci_illegalEdge$D_IN =
	     !MUX_ctop_app_appW4_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_ctop_app_appW4_wci_illegalEdge$write_1__VAL_2 ;
  assign ctop_app_appW4_wci_illegalEdge$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete &&
	     ctop_app_appW4_wci_illegalEdge ||
	     MUX_ctop_app_appW4_wci_illegalEdge$write_1__SEL_2 ;

  // register ctop_app_appW4_wci_nState
  always@(ctop_app_appW4_wci_reqF$D_OUT)
  begin
    case (ctop_app_appW4_wci_reqF$D_OUT[36:34])
      3'd0: ctop_app_appW4_wci_nState$D_IN = 3'd1;
      3'd1: ctop_app_appW4_wci_nState$D_IN = 3'd2;
      3'd2: ctop_app_appW4_wci_nState$D_IN = 3'd3;
      default: ctop_app_appW4_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign ctop_app_appW4_wci_nState$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start &&
	     (ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_app_appW4_wci_cState == 3'd0 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (ctop_app_appW4_wci_cState == 3'd1 ||
	       ctop_app_appW4_wci_cState == 3'd3) ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_app_appW4_wci_cState == 3'd2 ||
	      ctop_app_appW4_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (ctop_app_appW4_wci_cState == 3'd3 ||
	       ctop_app_appW4_wci_cState == 3'd2 ||
	       ctop_app_appW4_wci_cState == 3'd1)) ;

  // register ctop_app_appW4_wci_reqF_countReg
  assign ctop_app_appW4_wci_reqF_countReg$D_IN =
	     (ctop_app_appW4_wci_wciReq$wget[59:57] != 3'd0) ?
	       ctop_app_appW4_wci_reqF_countReg + 2'd1 :
	       ctop_app_appW4_wci_reqF_countReg - 2'd1 ;
  assign ctop_app_appW4_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_ctop_app_appW4_wci_reqF__updateLevelCounter ;

  // register ctop_app_appW4_wci_respF_c_r
  assign ctop_app_appW4_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr ?
	       MUX_ctop_app_appW4_wci_respF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW4_wci_respF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW4_wci_respF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr ;

  // register ctop_app_appW4_wci_respF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW4_wci_respF_both or
	  MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wci_respF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr or
	  ctop_app_appW4_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wci_respF_both:
	  ctop_app_appW4_wci_respF_q_0$D_IN =
	      MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW4_wci_respF_q_0$write_1__SEL_2:
	  ctop_app_appW4_wci_respF_q_0$D_IN =
	      MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr:
	  ctop_app_appW4_wci_respF_q_0$D_IN = ctop_app_appW4_wci_respF_q_1;
      default: ctop_app_appW4_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wci_respF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr &&
	     ctop_app_appW4_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr ;

  // register ctop_app_appW4_wci_respF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW4_wci_respF_both or
	  MUX_ctop_app_appW4_wci_respF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wci_respF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wci_respF_both:
	  ctop_app_appW4_wci_respF_q_1$D_IN =
	      MUX_ctop_app_appW4_wci_respF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW4_wci_respF_q_1$write_1__SEL_2:
	  ctop_app_appW4_wci_respF_q_1$D_IN =
	      MUX_ctop_app_appW4_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr:
	  ctop_app_appW4_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: ctop_app_appW4_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wci_respF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_incCtr &&
	     ctop_app_appW4_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW4_wci_respF_decCtr ;

  // register ctop_app_appW4_wci_sFlagReg
  assign ctop_app_appW4_wci_sFlagReg$D_IN = 1'b0 ;
  assign ctop_app_appW4_wci_sFlagReg$EN = 1'd1 ;

  // register ctop_app_appW4_wci_sThreadBusy_d
  assign ctop_app_appW4_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign ctop_app_appW4_wci_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW4_wmi_busyWithMessage
  assign ctop_app_appW4_wmi_busyWithMessage$D_IN = 1'b0 ;
  assign ctop_app_appW4_wmi_busyWithMessage$EN = 1'b0 ;

  // register ctop_app_appW4_wmi_dhF_c_r
  assign ctop_app_appW4_wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr ?
	       MUX_ctop_app_appW4_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW4_wmi_dhF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW4_wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr ;

  // register ctop_app_appW4_wmi_dhF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both or
	  MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr or
	  ctop_app_appW4_wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both:
	  ctop_app_appW4_wmi_dhF_q_0$D_IN =
	      MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__SEL_2:
	  ctop_app_appW4_wmi_dhF_q_0$D_IN =
	      MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr:
	  ctop_app_appW4_wmi_dhF_q_0$D_IN = ctop_app_appW4_wmi_dhF_q_1;
      default: ctop_app_appW4_wmi_dhF_q_0$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr &&
	     ctop_app_appW4_wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr ;

  // register ctop_app_appW4_wmi_dhF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both or
	  MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both:
	  ctop_app_appW4_wmi_dhF_q_1$D_IN =
	      MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW4_wmi_dhF_q_1$write_1__SEL_2:
	  ctop_app_appW4_wmi_dhF_q_1$D_IN =
	      MUX_ctop_app_appW4_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr:
	  ctop_app_appW4_wmi_dhF_q_1$D_IN = 38'h0AAAAAAAAA;
      default: ctop_app_appW4_wmi_dhF_q_1$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_incCtr &&
	     ctop_app_appW4_wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_dhF_decCtr ;

  // register ctop_app_appW4_wmi_errorSticky
  assign ctop_app_appW4_wmi_errorSticky$D_IN = 1'd1 ;
  assign ctop_app_appW4_wmi_errorSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_respAdvance &&
	     !ctop_app_appW4_wmi_respF$FULL_N ;

  // register ctop_app_appW4_wmi_mFlagF_c_r
  assign ctop_app_appW4_wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr ?
	       MUX_ctop_app_appW4_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW4_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW4_wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr ;

  // register ctop_app_appW4_wmi_mFlagF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both or
	  MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__SEL_2 or
	  value__h221012 or
	  WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr or
	  ctop_app_appW4_wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both:
	  ctop_app_appW4_wmi_mFlagF_q_0$D_IN =
	      MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW4_wmi_mFlagF_q_0$write_1__SEL_2:
	  ctop_app_appW4_wmi_mFlagF_q_0$D_IN = value__h221012;
      WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr:
	  ctop_app_appW4_wmi_mFlagF_q_0$D_IN = ctop_app_appW4_wmi_mFlagF_q_1;
      default: ctop_app_appW4_wmi_mFlagF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr &&
	     ctop_app_appW4_wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr ;

  // register ctop_app_appW4_wmi_mFlagF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both or
	  MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__SEL_2 or
	  value__h221012 or WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both:
	  ctop_app_appW4_wmi_mFlagF_q_1$D_IN =
	      MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW4_wmi_mFlagF_q_1$write_1__SEL_2:
	  ctop_app_appW4_wmi_mFlagF_q_1$D_IN = value__h221012;
      WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr:
	  ctop_app_appW4_wmi_mFlagF_q_1$D_IN = 32'd0;
      default: ctop_app_appW4_wmi_mFlagF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_incCtr &&
	     ctop_app_appW4_wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_mFlagF_decCtr ;

  // register ctop_app_appW4_wmi_operateD
  assign ctop_app_appW4_wmi_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW4_operating_actions ;
  assign ctop_app_appW4_wmi_operateD$EN = 1'd1 ;

  // register ctop_app_appW4_wmi_peerIsReady
  assign ctop_app_appW4_wmi_peerIsReady$D_IN =
	     CAN_FIRE_RL_ctop_sRstConnect_1 ;
  assign ctop_app_appW4_wmi_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW4_wmi_reqF_c_r
  assign ctop_app_appW4_wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr ?
	       MUX_ctop_app_appW4_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW4_wmi_reqF_c_r$write_1__VAL_2 ;
  assign ctop_app_appW4_wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr ;

  // register ctop_app_appW4_wmi_reqF_q_0
  always@(WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both or
	  MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr or
	  ctop_app_appW4_wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both:
	  ctop_app_appW4_wmi_reqF_q_0$D_IN =
	      MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_1;
      MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__SEL_2:
	  ctop_app_appW4_wmi_reqF_q_0$D_IN =
	      MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr:
	  ctop_app_appW4_wmi_reqF_q_0$D_IN = ctop_app_appW4_wmi_reqF_q_1;
      default: ctop_app_appW4_wmi_reqF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr &&
	     ctop_app_appW4_wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr ;

  // register ctop_app_appW4_wmi_reqF_q_1
  always@(WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both or
	  MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both:
	  ctop_app_appW4_wmi_reqF_q_1$D_IN =
	      MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__VAL_1;
      MUX_ctop_app_appW4_wmi_reqF_q_1$write_1__SEL_2:
	  ctop_app_appW4_wmi_reqF_q_1$D_IN =
	      MUX_ctop_app_appW4_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr:
	  ctop_app_appW4_wmi_reqF_q_1$D_IN = 32'd178956970;
      default: ctop_app_appW4_wmi_reqF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_incCtr &&
	     ctop_app_appW4_wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW4_wmi_reqF_decCtr ;

  // register ctop_app_appW4_wmi_sDataThreadBusy_d
  assign ctop_app_appW4_wmi_sDataThreadBusy_d$D_IN =
	     CAN_FIRE_RL_ctop_sdtbConnect_1 ;
  assign ctop_app_appW4_wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW4_wmi_sFlagReg
  assign ctop_app_appW4_wmi_sFlagReg$D_IN = ctop_inf_dp1_wmi_wmi_sFlagReg ;
  assign ctop_app_appW4_wmi_sFlagReg$EN = 1'd1 ;

  // register ctop_app_appW4_wmi_sThreadBusy_d
  assign ctop_app_appW4_wmi_sThreadBusy_d$D_IN =
	     CAN_FIRE_RL_ctop_stbConnect_9 ;
  assign ctop_app_appW4_wmi_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW4_wmi_statusR
  assign ctop_app_appW4_wmi_statusR$D_IN = 8'h0 ;
  assign ctop_app_appW4_wmi_statusR$EN = 1'b0 ;

  // register ctop_app_appW4_wmi_trafficSticky
  assign ctop_app_appW4_wmi_trafficSticky$D_IN = 1'b0 ;
  assign ctop_app_appW4_wmi_trafficSticky$EN = 1'b0 ;

  // register ctop_app_appW4_wsiM_burstKind
  assign ctop_app_appW4_wsiM_burstKind$D_IN =
	     (ctop_app_appW4_wsiM_burstKind == 2'd0) ?
	       (ctop_app_appW4_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign ctop_app_appW4_wsiM_burstKind$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq &&
	     ctop_app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (ctop_app_appW4_wsiM_burstKind == 2'd0 ||
	      (ctop_app_appW4_wsiM_burstKind == 2'd1 ||
	       ctop_app_appW4_wsiM_burstKind == 2'd2) &&
	      ctop_app_appW4_wsiM_reqFifo_q_0[57]) ;

  // register ctop_app_appW4_wsiM_errorSticky
  assign ctop_app_appW4_wsiM_errorSticky$D_IN = 1'b0 ;
  assign ctop_app_appW4_wsiM_errorSticky$EN = 1'b0 ;

  // register ctop_app_appW4_wsiM_iMesgCount
  assign ctop_app_appW4_wsiM_iMesgCount$D_IN =
	     ctop_app_appW4_wsiM_iMesgCount + 32'd1 ;
  assign ctop_app_appW4_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq &&
	     ctop_app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     ctop_app_appW4_wsiM_burstKind == 2'd2 &&
	     ctop_app_appW4_wsiM_reqFifo_q_0[57] ;

  // register ctop_app_appW4_wsiM_operateD
  assign ctop_app_appW4_wsiM_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW4_operating_actions ;
  assign ctop_app_appW4_wsiM_operateD$EN = 1'd1 ;

  // register ctop_app_appW4_wsiM_pMesgCount
  assign ctop_app_appW4_wsiM_pMesgCount$D_IN =
	     ctop_app_appW4_wsiM_pMesgCount + 32'd1 ;
  assign ctop_app_appW4_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq &&
	     ctop_app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     ctop_app_appW4_wsiM_burstKind == 2'd1 &&
	     ctop_app_appW4_wsiM_reqFifo_q_0[57] ;

  // register ctop_app_appW4_wsiM_peerIsReady
  assign ctop_app_appW4_wsiM_peerIsReady$D_IN = 1'b0 ;
  assign ctop_app_appW4_wsiM_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW4_wsiM_reqFifo_c_r
  assign ctop_app_appW4_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr ?
	       MUX_ctop_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_ctop_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign ctop_app_appW4_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW4_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both or
	  MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr or
	  ctop_app_appW4_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both:
	  ctop_app_appW4_wsiM_reqFifo_q_0$D_IN =
	      MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_2:
	  ctop_app_appW4_wsiM_reqFifo_q_0$D_IN =
	      MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr:
	  ctop_app_appW4_wsiM_reqFifo_q_0$D_IN =
	      ctop_app_appW4_wsiM_reqFifo_q_1;
      default: ctop_app_appW4_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr &&
	     ctop_app_appW4_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW4_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both or
	  MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both:
	  ctop_app_appW4_wsiM_reqFifo_q_1$D_IN =
	      MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_ctop_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_2:
	  ctop_app_appW4_wsiM_reqFifo_q_1$D_IN =
	      MUX_ctop_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr:
	  ctop_app_appW4_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: ctop_app_appW4_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_app_appW4_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_incCtr &&
	     ctop_app_appW4_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_decCtr ;

  // register ctop_app_appW4_wsiM_sThreadBusy_d
  assign ctop_app_appW4_wsiM_sThreadBusy_d$D_IN = 1'b0 ;
  assign ctop_app_appW4_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_app_appW4_wsiM_statusR
  assign ctop_app_appW4_wsiM_statusR$D_IN =
	     { ctop_app_appW4_wsiM_isReset$VAL,
	       !ctop_app_appW4_wsiM_peerIsReady,
	       !ctop_app_appW4_wsiM_operateD,
	       ctop_app_appW4_wsiM_errorSticky,
	       ctop_app_appW4_wsiM_burstKind != 2'd0,
	       ctop_app_appW4_wsiM_sThreadBusy_d,
	       1'd0,
	       ctop_app_appW4_wsiM_trafficSticky } ;
  assign ctop_app_appW4_wsiM_statusR$EN = 1'd1 ;

  // register ctop_app_appW4_wsiM_tBusyCount
  assign ctop_app_appW4_wsiM_tBusyCount$D_IN =
	     ctop_app_appW4_wsiM_tBusyCount + 32'd1 ;
  assign ctop_app_appW4_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_ctop_app_appW4_wsiM_inc_tBusyCount ;

  // register ctop_app_appW4_wsiM_trafficSticky
  assign ctop_app_appW4_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign ctop_app_appW4_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiM_reqFifo_deq &&
	     ctop_app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register ctop_app_appW4_wsiS_burstKind
  assign ctop_app_appW4_wsiS_burstKind$D_IN =
	     (ctop_app_appW4_wsiS_burstKind == 2'd0) ?
	       (ctop_app_appW4_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign ctop_app_appW4_wsiS_burstKind$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq &&
	     ctop_app_appW4_wsiS_reqFifo_notFull__537_AND_c_ETC___d6559 ;

  // register ctop_app_appW4_wsiS_errorSticky
  assign ctop_app_appW4_wsiS_errorSticky$D_IN = 1'd1 ;
  assign ctop_app_appW4_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq &&
	     !ctop_app_appW4_wsiS_reqFifo$FULL_N ;

  // register ctop_app_appW4_wsiS_iMesgCount
  assign ctop_app_appW4_wsiS_iMesgCount$D_IN =
	     ctop_app_appW4_wsiS_iMesgCount + 32'd1 ;
  assign ctop_app_appW4_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq &&
	     ctop_app_appW4_wsiS_reqFifo$FULL_N &&
	     ctop_app_appW4_wsiS_burstKind == 2'd2 &&
	     ctop_app_appW4_wsiS_wsiReq$wget[57] ;

  // register ctop_app_appW4_wsiS_mesgWordLength
  assign ctop_app_appW4_wsiS_mesgWordLength$D_IN =
	     ctop_app_appW4_wsiS_wordCount ;
  assign ctop_app_appW4_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq &&
	     ctop_app_appW4_wsiS_reqFifo$FULL_N &&
	     ctop_app_appW4_wsiS_wsiReq$wget[57] ;

  // register ctop_app_appW4_wsiS_operateD
  assign ctop_app_appW4_wsiS_operateD$D_IN =
	     CAN_FIRE_RL_ctop_app_appW4_operating_actions ;
  assign ctop_app_appW4_wsiS_operateD$EN = 1'd1 ;

  // register ctop_app_appW4_wsiS_pMesgCount
  assign ctop_app_appW4_wsiS_pMesgCount$D_IN =
	     ctop_app_appW4_wsiS_pMesgCount + 32'd1 ;
  assign ctop_app_appW4_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq &&
	     ctop_app_appW4_wsiS_reqFifo$FULL_N &&
	     ctop_app_appW4_wsiS_burstKind == 2'd1 &&
	     ctop_app_appW4_wsiS_wsiReq$wget[57] ;

  // register ctop_app_appW4_wsiS_peerIsReady
  assign ctop_app_appW4_wsiS_peerIsReady$D_IN =
	     CAN_FIRE_RL_ctop_app_mRstConnect_1 ;
  assign ctop_app_appW4_wsiS_peerIsReady$EN = 1'd1 ;

  // register ctop_app_appW4_wsiS_reqFifo_countReg
  assign ctop_app_appW4_wsiS_reqFifo_countReg$D_IN =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ?
	       ctop_app_appW4_wsiS_reqFifo_countReg + 2'd1 :
	       ctop_app_appW4_wsiS_reqFifo_countReg - 2'd1 ;
  assign ctop_app_appW4_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_reqFifo__updateLevelCounter ;

  // register ctop_app_appW4_wsiS_reqFifo_levelsValid
  assign ctop_app_appW4_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_reset ;
  assign ctop_app_appW4_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_enq &&
	     ctop_app_appW4_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_ctop_app_appW4_wsipass_doMessagePush ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_ctop_app_appW4_wsiS_reqFifo_reset ;

  // register ctop_app_appW4_wsiS_statusR
  assign ctop_app_appW4_wsiS_statusR$D_IN =
	     { ctop_app_appW4_wsiS_isReset$VAL,
	       !ctop_app_appW4_wsiS_peerIsReady,
	       !ctop_app_appW4_wsiS_operateD,
	       ctop_app_appW4_wsiS_errorSticky,
	       ctop_app_appW4_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_ctop_app_appW4_wsiS_backpressure ||
	       ctop_app_appW4_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       ctop_app_appW4_wsiS_trafficSticky } ;
  assign ctop_app_appW4_wsiS_statusR$EN = 1'd1 ;

  // register ctop_app_appW4_wsiS_tBusyCount
  assign ctop_app_appW4_wsiS_tBusyCount$D_IN =
	     ctop_app_appW4_wsiS_tBusyCount + 32'd1 ;
  assign ctop_app_appW4_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_ctop_app_appW4_wsiS_inc_tBusyCount ;

  // register ctop_app_appW4_wsiS_trafficSticky
  assign ctop_app_appW4_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign ctop_app_appW4_wsiS_trafficSticky$EN =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register ctop_app_appW4_wsiS_wordCount
  assign ctop_app_appW4_wsiS_wordCount$D_IN =
	     ctop_app_appW4_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       ctop_app_appW4_wsiS_wordCount + 12'd1 ;
  assign ctop_app_appW4_wsiS_wordCount$EN =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register ctop_app_appW4_wsiWordsRemain
  assign ctop_app_appW4_wsiWordsRemain$D_IN =
	     MUX_ctop_app_appW4_mesgLength$write_1__SEL_4 ?
	       ctop_app_appW4_wsiS_reqFifo$D_OUT[55:44] :
	       MUX_ctop_app_appW4_wsiWordsRemain$write_1__VAL_2 ;
  assign ctop_app_appW4_wsiWordsRemain$EN =
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_ctop_app_appW4_wmwt_messagePushPrecise ;

  // register ctop_app_appW4_zeroLengthMesg
  assign ctop_app_appW4_zeroLengthMesg$D_IN =
	     ctop_app_appW4_wsiS_reqFifo$D_OUT[11:8] == 4'd0 ;
  assign ctop_app_appW4_zeroLengthMesg$EN =
	     MUX_ctop_app_appW4_mesgLength$write_1__SEL_4 ;

  // register ctop_inf_chompCnt
  assign ctop_inf_chompCnt$D_IN = ctop_inf_chompCnt + 8'd1 ;
  assign ctop_inf_chompCnt$EN =
	     ctop_inf_sm2$RDY_c1_request_get && ctop_inf_chompCnt != 8'd255 ;

  // register ctop_inf_dp0_bml_crdBuf_modulus
  assign ctop_inf_dp0_bml_crdBuf_modulus$D_IN =
	     ctop_inf_dp0_bml_lclNumBufs - 16'd1 ;
  assign ctop_inf_dp0_bml_crdBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_crdBuf_value
  assign ctop_inf_dp0_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp0_bml_crdBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp0_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_crdAdvance ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_fabAvail
  assign ctop_inf_dp0_bml_fabAvail$D_IN = ctop_inf_dp0_bml_fabAvail_1$whas ;
  assign ctop_inf_dp0_bml_fabAvail$EN = 1'd1 ;

  // register ctop_inf_dp0_bml_fabBuf_modulus
  assign ctop_inf_dp0_bml_fabBuf_modulus$D_IN =
	     ctop_inf_dp0_bml_fabNumBufs - 16'd1 ;
  assign ctop_inf_dp0_bml_fabBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_fabBuf_value
  assign ctop_inf_dp0_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp0_bml_fabBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp0_bml_fabBuf_value$EN =
	     MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_fabBufsAvail
  assign ctop_inf_dp0_bml_fabBufsAvail$D_IN =
	     MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_bml_fabBufsAvail$write_1__VAL_2 ;
  assign ctop_inf_dp0_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_fba &&
	     (ctop_inf_dp0_bml_fabAvail && !ctop_inf_dp0_bml_remStart ||
	      !ctop_inf_dp0_bml_fabAvail && ctop_inf_dp0_bml_remStart) ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_fabDone
  assign ctop_inf_dp0_bml_fabDone$D_IN = ctop_inf_dp0_bml_fabDone_1$whas ;
  assign ctop_inf_dp0_bml_fabDone$EN = 1'd1 ;

  // register ctop_inf_dp0_bml_fabFlowAddr
  always@(MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators or
	  ctop_inf_dp0_bml_fabFlowBase or
	  WILL_FIRE_RL_ctop_inf_dp0_bml_crdAdvance or
	  MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1:
	  ctop_inf_dp0_bml_fabFlowAddr$D_IN =
	      MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators:
	  ctop_inf_dp0_bml_fabFlowAddr$D_IN = ctop_inf_dp0_bml_fabFlowBase;
      WILL_FIRE_RL_ctop_inf_dp0_bml_crdAdvance:
	  ctop_inf_dp0_bml_fabFlowAddr$D_IN =
	      MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__VAL_3;
      default: ctop_inf_dp0_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_crdAdvance ;

  // register ctop_inf_dp0_bml_fabFlowBase
  assign ctop_inf_dp0_bml_fabFlowBase$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp0_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register ctop_inf_dp0_bml_fabFlowSize
  assign ctop_inf_dp0_bml_fabFlowSize$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp0_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register ctop_inf_dp0_bml_fabMesgAddr
  assign ctop_inf_dp0_bml_fabMesgAddr$D_IN =
	     MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_bml_fabMesgAddr$write_1__VAL_1 :
	       ctop_inf_dp0_bml_fabMesgBase ;
  assign ctop_inf_dp0_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_fabMesgBase
  assign ctop_inf_dp0_bml_fabMesgBase$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp0_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register ctop_inf_dp0_bml_fabMesgSize
  assign ctop_inf_dp0_bml_fabMesgSize$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp0_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register ctop_inf_dp0_bml_fabMetaAddr
  assign ctop_inf_dp0_bml_fabMetaAddr$D_IN =
	     MUX_ctop_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_bml_fabMetaAddr$write_1__VAL_1 :
	       ctop_inf_dp0_bml_fabMetaBase ;
  assign ctop_inf_dp0_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_fabMetaBase
  assign ctop_inf_dp0_bml_fabMetaBase$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp0_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register ctop_inf_dp0_bml_fabMetaSize
  assign ctop_inf_dp0_bml_fabMetaSize$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp0_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register ctop_inf_dp0_bml_fabNumBufs
  assign ctop_inf_dp0_bml_fabNumBufs$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp0_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register ctop_inf_dp0_bml_lclBufDone
  assign ctop_inf_dp0_bml_lclBufDone$D_IN = ctop_inf_dp0_wmi_mesgDone ;
  assign ctop_inf_dp0_bml_lclBufDone$EN = 1'd1 ;

  // register ctop_inf_dp0_bml_lclBufStart
  assign ctop_inf_dp0_bml_lclBufStart$D_IN = ctop_inf_dp0_wmi_mesgStart ;
  assign ctop_inf_dp0_bml_lclBufStart$EN = 1'd1 ;

  // register ctop_inf_dp0_bml_lclBuf_modulus
  assign ctop_inf_dp0_bml_lclBuf_modulus$D_IN =
	     ctop_inf_dp0_bml_crdBuf_modulus$D_IN ;
  assign ctop_inf_dp0_bml_lclBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_lclBuf_value
  assign ctop_inf_dp0_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp0_bml_lclBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp0_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_lclBufsAR
  assign ctop_inf_dp0_bml_lclBufsAR$D_IN =
	     MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__VAL_2 ;
  assign ctop_inf_dp0_bml_lclBufsAR$EN =
	     MUX_ctop_inf_dp0_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_lclBufsCF
  assign ctop_inf_dp0_bml_lclBufsCF$D_IN =
	     MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_bml_lclBufsCF$write_1__VAL_2 ;
  assign ctop_inf_dp0_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_lbcf &&
	     (ctop_inf_dp0_bml_lclBufDone_016_AND_IF_ctop_in_ETC___d7433 ||
	      NOT_ctop_inf_dp0_bml_lclBufDone_016_083_AND_IF_ETC___d2096) ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_lclCredit
  assign ctop_inf_dp0_bml_lclCredit$D_IN =
	     MUX_ctop_inf_dp0_bml_lclCredit$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign ctop_inf_dp0_bml_lclCredit$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_lcredit &&
	     (ctop_inf_dp0_bml_lclBufDone && !ctop_inf_dp0_bml_remStart ||
	      !ctop_inf_dp0_bml_lclBufDone && ctop_inf_dp0_bml_remStart) ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_lclDones
  assign ctop_inf_dp0_bml_lclDones$D_IN = ctop_inf_dp0_bml_lclDones + 16'd1 ;
  assign ctop_inf_dp0_bml_lclDones$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;

  // register ctop_inf_dp0_bml_lclMesgAddr
  assign ctop_inf_dp0_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       ctop_inf_dp0_bml_mesgBase :
	       MUX_ctop_inf_dp0_bml_lclMesgAddr$write_1__VAL_2 ;
  assign ctop_inf_dp0_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;

  // register ctop_inf_dp0_bml_lclMetaAddr
  assign ctop_inf_dp0_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       ctop_inf_dp0_bml_metaBase :
	       MUX_ctop_inf_dp0_bml_lclMetaAddr$write_1__VAL_2 ;
  assign ctop_inf_dp0_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_lclAdvance ;

  // register ctop_inf_dp0_bml_lclNumBufs
  assign ctop_inf_dp0_bml_lclNumBufs$D_IN =
	     ctop_inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp0_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register ctop_inf_dp0_bml_lclStarts
  assign ctop_inf_dp0_bml_lclStarts$D_IN =
	     ctop_inf_dp0_bml_lclStarts + 16'd1 ;
  assign ctop_inf_dp0_bml_lclStarts$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_cntLclStart ;

  // register ctop_inf_dp0_bml_mesgBase
  assign ctop_inf_dp0_bml_mesgBase$D_IN = ctop_inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp0_bml_mesgBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register ctop_inf_dp0_bml_mesgSize
  assign ctop_inf_dp0_bml_mesgSize$D_IN = ctop_inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp0_bml_mesgSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register ctop_inf_dp0_bml_metaBase
  assign ctop_inf_dp0_bml_metaBase$D_IN = ctop_inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp0_bml_metaBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register ctop_inf_dp0_bml_metaSize
  assign ctop_inf_dp0_bml_metaSize$D_IN = ctop_inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp0_bml_metaSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register ctop_inf_dp0_bml_remBuf_modulus
  assign ctop_inf_dp0_bml_remBuf_modulus$D_IN =
	     ctop_inf_dp0_bml_crdBuf_modulus$D_IN ;
  assign ctop_inf_dp0_bml_remBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_remBuf_value
  assign ctop_inf_dp0_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp0_bml_remBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp0_bml_remBuf_value$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ;

  // register ctop_inf_dp0_bml_remDone
  assign ctop_inf_dp0_bml_remDone$D_IN = ctop_inf_dp0_tlp_remDone ;
  assign ctop_inf_dp0_bml_remDone$EN = 1'd1 ;

  // register ctop_inf_dp0_bml_remDones
  assign ctop_inf_dp0_bml_remDones$D_IN = ctop_inf_dp0_bml_remDones + 16'd1 ;
  assign ctop_inf_dp0_bml_remDones$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;

  // register ctop_inf_dp0_bml_remMesgAddr
  assign ctop_inf_dp0_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       ctop_inf_dp0_bml_mesgBase :
	       MUX_ctop_inf_dp0_bml_remMesgAddr$write_1__VAL_2 ;
  assign ctop_inf_dp0_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;

  // register ctop_inf_dp0_bml_remMetaAddr
  assign ctop_inf_dp0_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ?
	       ctop_inf_dp0_bml_metaBase :
	       MUX_ctop_inf_dp0_bml_remMetaAddr$write_1__VAL_2 ;
  assign ctop_inf_dp0_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp0_bml_remAdvance ;

  // register ctop_inf_dp0_bml_remStart
  assign ctop_inf_dp0_bml_remStart$D_IN = ctop_inf_dp0_tlp_remStart ;
  assign ctop_inf_dp0_bml_remStart$EN = 1'd1 ;

  // register ctop_inf_dp0_bml_remStarts
  assign ctop_inf_dp0_bml_remStarts$D_IN =
	     ctop_inf_dp0_bml_remStarts + 16'd1 ;
  assign ctop_inf_dp0_bml_remStarts$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_cntRemStart ;

  // register ctop_inf_dp0_bram_serverAdapterA_1_cnt
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_PLUS_ETC___d221 ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterA_1_s1
  assign ctop_inf_dp0_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterA_1_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_bram_serverAdapterA_2_cnt
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_PLUS_ETC___d339 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterA_2_s1
  assign ctop_inf_dp0_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterA_2_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_bram_serverAdapterA_3_cnt
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_PLUS_ETC___d457 ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterA_3_s1
  assign ctop_inf_dp0_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterA_3_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_bram_serverAdapterA_cnt
  assign ctop_inf_dp0_bram_serverAdapterA_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterA_cnt_7_PLUS_IF_ETC___d103 ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterA_s1
  assign ctop_inf_dp0_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterA_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterA_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_bram_serverAdapterB_1_cnt
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_PLUS_ETC___d280 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterB_1_s1
  assign ctop_inf_dp0_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterB_1_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_bram_serverAdapterB_2_cnt
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_PLUS_ETC___d398 ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterB_2_s1
  assign ctop_inf_dp0_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterB_2_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_bram_serverAdapterB_3_cnt
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_PLUS_ETC___d516 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterB_3_s1
  assign ctop_inf_dp0_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterB_3_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_bram_serverAdapterB_cnt
  assign ctop_inf_dp0_bram_serverAdapterB_cnt$D_IN =
	     ctop_inf_dp0_bram_serverAdapterB_cnt_56_PLUS_I_ETC___d162 ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // register ctop_inf_dp0_bram_serverAdapterB_s1
  assign ctop_inf_dp0_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	       ctop_inf_dp0_bram_serverAdapterB_s1_1$wget[1],
	       ctop_inf_dp0_bram_serverAdapterB_s1_1$wget[0] } ;
  assign ctop_inf_dp0_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register ctop_inf_dp0_dpControl
  assign ctop_inf_dp0_dpControl$D_IN = ctop_inf_dp0_wci_reqF$D_OUT[3:0] ;
  assign ctop_inf_dp0_dpControl$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	     ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register ctop_inf_dp0_tlp_creditReady
  assign ctop_inf_dp0_tlp_creditReady$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp0_rCredit_1 ;
  assign ctop_inf_dp0_tlp_creditReady$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_debugBdata
  assign ctop_inf_dp0_tlp_debugBdata$D_IN =
	     { ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
	       ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
	       ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
	       ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign ctop_inf_dp0_tlp_debugBdata$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;

  // register ctop_inf_dp0_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta or
	  ctop_inf_dp0_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  ctop_inf_dp0_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta:
	ctop_inf_dp0_tlp_dmaDoTailEvent$D_IN =
	    ctop_inf_dp0_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent:
	ctop_inf_dp0_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody:
	ctop_inf_dp0_tlp_dmaDoTailEvent$D_IN =
	    MUX_ctop_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	ctop_inf_dp0_tlp_dmaDoTailEvent$D_IN =
	    ctop_inf_dp0_tlp_dmaPullRemainDWLen == 10'd1;
    default: ctop_inf_dp0_tlp_dmaDoTailEvent$D_IN =
		 1'b0 /* unspecified value */ ;
  endcase
  assign ctop_inf_dp0_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent ;

  // register ctop_inf_dp0_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h44107 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
	      thisRequestLength__h44107[11:2];
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	  ctop_inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody:
	  ctop_inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_ctop_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: ctop_inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ;

  // register ctop_inf_dp0_tlp_dmaPullRemainDWSub
  assign ctop_inf_dp0_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ?
	       MUX_ctop_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ;

  // register ctop_inf_dp0_tlp_dmaReqTag
  assign ctop_inf_dp0_tlp_dmaReqTag$D_IN = ctop_inf_dp0_tlp_dmaTag ;
  assign ctop_inf_dp0_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta ;

  // register ctop_inf_dp0_tlp_dmaTag
  assign ctop_inf_dp0_tlp_dmaTag$D_IN = ctop_inf_dp0_tlp_dmaTag + 5'd1 ;
  assign ctop_inf_dp0_tlp_dmaTag$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta ;

  // register ctop_inf_dp0_tlp_doXmtMetaBody
  assign ctop_inf_dp0_tlp_doXmtMetaBody$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody ;
  assign ctop_inf_dp0_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp0_tlp_fabFlowAddr
  assign ctop_inf_dp0_tlp_fabFlowAddr$D_IN = ctop_inf_dp0_bml_fabFlowAddr ;
  assign ctop_inf_dp0_tlp_fabFlowAddr$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_fabMesgAccu
  always@(MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  ctop_inf_dp0_tlp_fabMesgAddr or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader or
	  MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  ctop_inf_dp0_tlp_fabMesgAccu$D_IN = ctop_inf_dp0_tlp_fabMesgAddr;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader:
	  ctop_inf_dp0_tlp_fabMesgAccu$D_IN =
	      MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp0_tlp_fabMesgAccu$D_IN =
	      MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3;
      default: ctop_inf_dp0_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp0_tlp_fabMesgAddr
  assign ctop_inf_dp0_tlp_fabMesgAddr$D_IN = ctop_inf_dp0_bml_fabMesgAddr ;
  assign ctop_inf_dp0_tlp_fabMesgAddr$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_fabMeta
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody or
	  MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta or
	  MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody:
	ctop_inf_dp0_tlp_fabMeta$D_IN =
	    MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta:
	ctop_inf_dp0_tlp_fabMeta$D_IN =
	    MUX_ctop_inf_dp0_tlp_fabMeta$write_1__VAL_2;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent ||
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent:
	ctop_inf_dp0_tlp_fabMeta$D_IN =
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: ctop_inf_dp0_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign ctop_inf_dp0_tlp_fabMeta$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ;

  // register ctop_inf_dp0_tlp_fabMetaAddr
  assign ctop_inf_dp0_tlp_fabMetaAddr$D_IN = ctop_inf_dp0_bml_fabMetaAddr ;
  assign ctop_inf_dp0_tlp_fabMetaAddr$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_farBufReady
  assign ctop_inf_dp0_tlp_farBufReady$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp0_rFRdy_1 ;
  assign ctop_inf_dp0_tlp_farBufReady$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_flowDiagCount
  assign ctop_inf_dp0_tlp_flowDiagCount$D_IN =
	     ctop_inf_dp0_tlp_flowDiagCount + 32'd1 ;
  assign ctop_inf_dp0_tlp_flowDiagCount$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell ;

  // register ctop_inf_dp0_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  ctop_inf_dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody or
	  ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	  ctop_inf_dp0_tlp_gotResponseHeader$D_IN =
	      ctop_inf_dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody:
	  ctop_inf_dp0_tlp_gotResponseHeader$D_IN =
	      !ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp0_tlp_gotResponseHeader$D_IN = 1'd0;
      default: ctop_inf_dp0_tlp_gotResponseHeader$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp0_tlp_inIgnorePkt
  assign ctop_inf_dp0_tlp_inIgnorePkt$D_IN =
	     ctop_inf_dp0_tlp_inF$D_OUT[110] ||
	     ctop_inf_dp0_tlp_inF$D_OUT[125] ||
	     ctop_inf_dp0_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign ctop_inf_dp0_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv &&
	     ctop_inf_dp0_tlp_inF$D_OUT[152] ;

  // register ctop_inf_dp0_tlp_maxPayloadSize
  assign ctop_inf_dp0_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign ctop_inf_dp0_tlp_maxPayloadSize$EN = 1'b0 ;

  // register ctop_inf_dp0_tlp_maxReadReqSize
  assign ctop_inf_dp0_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign ctop_inf_dp0_tlp_maxReadReqSize$EN = 1'b0 ;

  // register ctop_inf_dp0_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	  ctop_inf_dp0_tlp_mesgComplReceived$D_IN =
	      MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody:
	  ctop_inf_dp0_tlp_mesgComplReceived$D_IN =
	      MUX_ctop_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta:
	  ctop_inf_dp0_tlp_mesgComplReceived$D_IN = 17'd0;
      default: ctop_inf_dp0_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ;

  // register ctop_inf_dp0_tlp_mesgLengthRemainPull
  assign ctop_inf_dp0_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ?
	       MUX_ctop_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp0_tlp_mesgLengthRemainPush
  assign ctop_inf_dp0_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead ?
	       MUX_ctop_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg ;

  // register ctop_inf_dp0_tlp_nearBufReady
  assign ctop_inf_dp0_tlp_nearBufReady$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp0_rRdy_1 ;
  assign ctop_inf_dp0_tlp_nearBufReady$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_outDwRemain
  assign ctop_inf_dp0_tlp_outDwRemain$D_IN =
	     MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_outDwRemain$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody ;

  // register ctop_inf_dp0_tlp_postSeqDwell
  assign ctop_inf_dp0_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPostSeqDwell ?
	       MUX_ctop_inf_dp0_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign ctop_inf_dp0_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ;

  // register ctop_inf_dp0_tlp_pullTagMatch
  assign ctop_inf_dp0_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeaderTag &&
	     ctop_inf_dp0_tlp_pullTagMatch_1$wget ;
  assign ctop_inf_dp0_tlp_pullTagMatch$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_rdRespDwRemain
  assign ctop_inf_dp0_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp ?
	       MUX_ctop_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;

  // register ctop_inf_dp0_tlp_readHeaderSent
  assign ctop_inf_dp0_tlp_readHeaderSent$D_IN =
	     MUX_ctop_inf_dp0_tlp_readHeaderSent$write_1__SEL_1 ;
  assign ctop_inf_dp0_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp &&
	     ctop_inf_dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp &&
	     ctop_inf_dp0_tlp_rdRespDwRemain_530_ULE_4___d1531 ;

  // register ctop_inf_dp0_tlp_readNxtDWAddr
  assign ctop_inf_dp0_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq ?
	       MUX_ctop_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;

  // register ctop_inf_dp0_tlp_readRemainDWLen
  assign ctop_inf_dp0_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq ?
	       MUX_ctop_inf_dp0_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;

  // register ctop_inf_dp0_tlp_readStarted
  assign ctop_inf_dp0_tlp_readStarted$D_IN =
	     MUX_ctop_inf_dp0_tlp_readStarted$write_1__SEL_1 ;
  assign ctop_inf_dp0_tlp_readStarted$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq &&
	     ctop_inf_dp0_tlp_readRemainDWLen_386_ULE_4___d1387 ;

  // register ctop_inf_dp0_tlp_remDone
  assign ctop_inf_dp0_tlp_remDone$D_IN = ctop_inf_dp0_tlp_remDone_1$whas ;
  assign ctop_inf_dp0_tlp_remDone$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_remMesgAccu
  always@(MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  ctop_inf_dp0_tlp_remMesgAddr or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg or
	  MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  ctop_inf_dp0_tlp_remMesgAccu$D_IN = ctop_inf_dp0_tlp_remMesgAddr;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg:
	  ctop_inf_dp0_tlp_remMesgAccu$D_IN =
	      MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	  ctop_inf_dp0_tlp_remMesgAccu$D_IN =
	      MUX_ctop_inf_dp0_tlp_remMesgAccu$write_1__VAL_3;
      default: ctop_inf_dp0_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ;

  // register ctop_inf_dp0_tlp_remMesgAddr
  assign ctop_inf_dp0_tlp_remMesgAddr$D_IN = ctop_inf_dp0_bml_remMesgAddr ;
  assign ctop_inf_dp0_tlp_remMesgAddr$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_remMetaAddr
  assign ctop_inf_dp0_tlp_remMetaAddr$D_IN = ctop_inf_dp0_bml_remMetaAddr ;
  assign ctop_inf_dp0_tlp_remMetaAddr$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_remStart
  assign ctop_inf_dp0_tlp_remStart$D_IN = ctop_inf_dp0_tlp_remStart_1$whas ;
  assign ctop_inf_dp0_tlp_remStart$EN = 1'd1 ;

  // register ctop_inf_dp0_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  ctop_inf_dp0_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	  ctop_inf_dp0_tlp_reqMesgInFlight$D_IN =
	      ctop_inf_dp0_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody:
	  ctop_inf_dp0_tlp_reqMesgInFlight$D_IN =
	      MUX_ctop_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp0_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: ctop_inf_dp0_tlp_reqMesgInFlight$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp0_tlp_reqMetaBodyInFlight
  assign ctop_inf_dp0_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ;
  assign ctop_inf_dp0_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // register ctop_inf_dp0_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta:
	ctop_inf_dp0_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta:
	ctop_inf_dp0_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta:
	ctop_inf_dp0_tlp_reqMetaInFlight$D_IN = 1'd1;
    default: ctop_inf_dp0_tlp_reqMetaInFlight$D_IN =
		 1'b0 /* unspecified value */ ;
  endcase
  assign ctop_inf_dp0_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta ;

  // register ctop_inf_dp0_tlp_srcMesgAccu
  assign ctop_inf_dp0_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ?
	       ctop_inf_dp0_tlp_fabMesgAddr :
	       MUX_ctop_inf_dp0_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg ;

  // register ctop_inf_dp0_tlp_tlpMetaSent
  assign ctop_inf_dp0_tlp_tlpMetaSent$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ;
  assign ctop_inf_dp0_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody ;

  // register ctop_inf_dp0_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv or
	  ctop_inf_dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody or
	  ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv:
	  ctop_inf_dp0_tlp_tlpRcvBusy$D_IN = !ctop_inf_dp0_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	  ctop_inf_dp0_tlp_tlpRcvBusy$D_IN =
	      ctop_inf_dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody:
	  ctop_inf_dp0_tlp_tlpRcvBusy$D_IN =
	      !ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370;
      default: ctop_inf_dp0_tlp_tlpRcvBusy$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ;

  // register ctop_inf_dp0_tlp_tlpXmtBusy
  always@(MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1 or
	  ctop_inf_dp0_tlp_mRespF$D_OUT or
	  MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody or
	  MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1:
	  ctop_inf_dp0_tlp_tlpXmtBusy$D_IN =
	      ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody:
	  ctop_inf_dp0_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead:
	  ctop_inf_dp0_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: ctop_inf_dp0_tlp_tlpXmtBusy$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader && _dfoo5 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header &&
	     !ctop_inf_dp0_tlp_mRespF_first__35_BITS_71_TO_6_ETC___d7384 ||
	     (WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody) &&
	     ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp0_tlp_writeDWAddr
  assign ctop_inf_dp0_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq ?
	       MUX_ctop_inf_dp0_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_writeDWAddr$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData ;

  // register ctop_inf_dp0_tlp_writeLastBE
  assign ctop_inf_dp0_tlp_writeLastBE$D_IN =
	     ctop_inf_dp0_tlp_mReqF$D_OUT[35:32] ;
  assign ctop_inf_dp0_tlp_writeLastBE$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_writeReq ;

  // register ctop_inf_dp0_tlp_writeRemainDWLen
  assign ctop_inf_dp0_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq ?
	       MUX_ctop_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData ;

  // register ctop_inf_dp0_tlp_xmtMetaInFlight
  assign ctop_inf_dp0_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ;
  assign ctop_inf_dp0_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp0_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody or
	  ctop_inf_dp0_tlp_mesgLengthRemainPush or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead or
	  MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3 or
	  MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody:
	ctop_inf_dp0_tlp_xmtMetaOK$D_IN =
	    ctop_inf_dp0_tlp_mesgLengthRemainPush == 17'd0;
    WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead:
	ctop_inf_dp0_tlp_xmtMetaOK$D_IN = 1'd0;
    MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3 ||
    MUX_ctop_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4:
	ctop_inf_dp0_tlp_xmtMetaOK$D_IN = 1'd1;
    default: ctop_inf_dp0_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign ctop_inf_dp0_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody &&
	     ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830 &&
	     ctop_inf_dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp0_wci_cEdge
  assign ctop_inf_dp0_wci_cEdge$D_IN = ctop_inf_dp0_wci_reqF$D_OUT[36:34] ;
  assign ctop_inf_dp0_wci_cEdge$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start ;

  // register ctop_inf_dp0_wci_cState
  assign ctop_inf_dp0_wci_cState$D_IN = ctop_inf_dp0_wci_nState ;
  assign ctop_inf_dp0_wci_cState$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete &&
	     !ctop_inf_dp0_wci_illegalEdge ;

  // register ctop_inf_dp0_wci_ctlAckReg
  assign ctop_inf_dp0_wci_ctlAckReg$D_IN = ctop_inf_dp0_wci_ctlAckReg_1$whas ;
  assign ctop_inf_dp0_wci_ctlAckReg$EN = 1'd1 ;

  // register ctop_inf_dp0_wci_ctlOpActive
  assign ctop_inf_dp0_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ;
  assign ctop_inf_dp0_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start ;

  // register ctop_inf_dp0_wci_illegalEdge
  assign ctop_inf_dp0_wci_illegalEdge$D_IN =
	     !MUX_ctop_inf_dp0_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_ctop_inf_dp0_wci_illegalEdge$write_1__VAL_2 ;
  assign ctop_inf_dp0_wci_illegalEdge$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete &&
	     ctop_inf_dp0_wci_illegalEdge ||
	     MUX_ctop_inf_dp0_wci_illegalEdge$write_1__SEL_2 ;

  // register ctop_inf_dp0_wci_nState
  always@(ctop_inf_dp0_wci_reqF$D_OUT)
  begin
    case (ctop_inf_dp0_wci_reqF$D_OUT[36:34])
      3'd0: ctop_inf_dp0_wci_nState$D_IN = 3'd1;
      3'd1: ctop_inf_dp0_wci_nState$D_IN = 3'd2;
      3'd2: ctop_inf_dp0_wci_nState$D_IN = 3'd3;
      default: ctop_inf_dp0_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign ctop_inf_dp0_wci_nState$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start &&
	     (ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_inf_dp0_wci_cState == 3'd0 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (ctop_inf_dp0_wci_cState == 3'd1 ||
	       ctop_inf_dp0_wci_cState == 3'd3) ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_inf_dp0_wci_cState == 3'd2 ||
	      ctop_inf_dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (ctop_inf_dp0_wci_cState == 3'd3 ||
	       ctop_inf_dp0_wci_cState == 3'd2 ||
	       ctop_inf_dp0_wci_cState == 3'd1)) ;

  // register ctop_inf_dp0_wci_reqF_countReg
  assign ctop_inf_dp0_wci_reqF_countReg$D_IN =
	     (ctop_inf_dp0_wci_wciReq$wget[59:57] != 3'd0) ?
	       ctop_inf_dp0_wci_reqF_countReg + 2'd1 :
	       ctop_inf_dp0_wci_reqF_countReg - 2'd1 ;
  assign ctop_inf_dp0_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_wci_reqF__updateLevelCounter ;

  // register ctop_inf_dp0_wci_respF_c_r
  assign ctop_inf_dp0_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr ?
	       MUX_ctop_inf_dp0_wci_respF_c_r$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_wci_respF_c_r$write_1__VAL_2 ;
  assign ctop_inf_dp0_wci_respF_c_r$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr ;

  // register ctop_inf_dp0_wci_respF_q_0
  always@(WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both or
	  MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_1 or
	  MUX_ctop_inf_dp0_wci_respF_q_0$write_1__SEL_2 or
	  MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr or
	  ctop_inf_dp0_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both:
	  ctop_inf_dp0_wci_respF_q_0$D_IN =
	      MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_1;
      MUX_ctop_inf_dp0_wci_respF_q_0$write_1__SEL_2:
	  ctop_inf_dp0_wci_respF_q_0$D_IN =
	      MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr:
	  ctop_inf_dp0_wci_respF_q_0$D_IN = ctop_inf_dp0_wci_respF_q_1;
      default: ctop_inf_dp0_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_wci_respF_q_0$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr &&
	     ctop_inf_dp0_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr ;

  // register ctop_inf_dp0_wci_respF_q_1
  always@(WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both or
	  MUX_ctop_inf_dp0_wci_respF_q_1$write_1__VAL_1 or
	  MUX_ctop_inf_dp0_wci_respF_q_1$write_1__SEL_2 or
	  MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both:
	  ctop_inf_dp0_wci_respF_q_1$D_IN =
	      MUX_ctop_inf_dp0_wci_respF_q_1$write_1__VAL_1;
      MUX_ctop_inf_dp0_wci_respF_q_1$write_1__SEL_2:
	  ctop_inf_dp0_wci_respF_q_1$D_IN =
	      MUX_ctop_inf_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr:
	  ctop_inf_dp0_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: ctop_inf_dp0_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_wci_respF_q_1$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_incCtr &&
	     ctop_inf_dp0_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wci_respF_decCtr ;

  // register ctop_inf_dp0_wci_sFlagReg
  assign ctop_inf_dp0_wci_sFlagReg$D_IN = 1'b0 ;
  assign ctop_inf_dp0_wci_sFlagReg$EN = 1'd1 ;

  // register ctop_inf_dp0_wci_sThreadBusy_d
  assign ctop_inf_dp0_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign ctop_inf_dp0_wci_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_addr
  assign ctop_inf_dp0_wmi_addr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ?
	       ctop_inf_dp0_wmi_wmi_reqF$D_OUT[25:12] :
	       MUX_ctop_inf_dp0_wmi_addr$write_1__VAL_2 ;
  assign ctop_inf_dp0_wmi_addr$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;

  // register ctop_inf_dp0_wmi_bufDwell
  assign ctop_inf_dp0_wmi_bufDwell$D_IN =
	     (MUX_ctop_inf_dp0_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_ctop_inf_dp0_wmi_bufDwell$write_1__VAL_3 ;
  assign ctop_inf_dp0_wmi_bufDwell$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doDwell ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // register ctop_inf_dp0_wmi_bytesRemainReq
  assign ctop_inf_dp0_wmi_bytesRemainReq$D_IN =
	     MUX_ctop_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_ctop_inf_dp0_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign ctop_inf_dp0_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;

  // register ctop_inf_dp0_wmi_bytesRemainResp
  assign ctop_inf_dp0_wmi_bytesRemainResp$D_IN =
	     MUX_ctop_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_ctop_inf_dp0_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign ctop_inf_dp0_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;

  // register ctop_inf_dp0_wmi_doneWithMesg
  assign ctop_inf_dp0_wmi_doneWithMesg$D_IN =
	     !MUX_ctop_inf_dp0_wmi_doneWithMesg$write_1__SEL_1 &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[27] ;
  assign ctop_inf_dp0_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq ||
	      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq) &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;

  // register ctop_inf_dp0_wmi_lastMesg
  assign ctop_inf_dp0_wmi_lastMesg$D_IN = ctop_inf_dp0_wmi_thisMesg ;
  assign ctop_inf_dp0_wmi_lastMesg$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // register ctop_inf_dp0_wmi_lclMesgAddr
  assign ctop_inf_dp0_wmi_lclMesgAddr$D_IN =
	     ctop_inf_dp0_bml_lclMesgAddr[14:0] ;
  assign ctop_inf_dp0_wmi_lclMesgAddr$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_lclMetaAddr
  assign ctop_inf_dp0_wmi_lclMetaAddr$D_IN =
	     ctop_inf_dp0_bml_lclMetaAddr[14:0] ;
  assign ctop_inf_dp0_wmi_lclMetaAddr$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_mesgBufReady
  assign ctop_inf_dp0_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_ctop_inf_dp0_rRdy ;
  assign ctop_inf_dp0_wmi_mesgBufReady$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_mesgBusy
  assign ctop_inf_dp0_wmi_mesgBusy$D_IN =
	     !MUX_ctop_inf_dp0_wmi_mesgBusy$write_1__SEL_1 ;
  assign ctop_inf_dp0_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doDwell &&
	     ctop_inf_dp0_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;

  // register ctop_inf_dp0_wmi_mesgCount
  assign ctop_inf_dp0_wmi_mesgCount$D_IN =
	     MUX_ctop_inf_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_ctop_inf_dp0_wmi_mesgCount$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_wmi_mesgCount$write_1__VAL_1 ;
  assign ctop_inf_dp0_wmi_mesgCount$EN = ctop_inf_dp0_wmi_mesgDone_1$whas ;

  // register ctop_inf_dp0_wmi_mesgDone
  assign ctop_inf_dp0_wmi_mesgDone$D_IN = ctop_inf_dp0_wmi_mesgDone_1$whas ;
  assign ctop_inf_dp0_wmi_mesgDone$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_mesgMeta
  assign ctop_inf_dp0_wmi_mesgMeta$D_IN =
	     MUX_ctop_inf_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_ctop_inf_dp0_wmi_mesgMeta$write_1__VAL_2 ;
  assign ctop_inf_dp0_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ;

  // register ctop_inf_dp0_wmi_mesgStart
  assign ctop_inf_dp0_wmi_mesgStart$D_IN = ctop_inf_dp0_wmi_mesgStart_1$whas ;
  assign ctop_inf_dp0_wmi_mesgStart$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_metaBusy
  assign ctop_inf_dp0_wmi_metaBusy$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ;
  assign ctop_inf_dp0_wmi_metaBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ;

  // register ctop_inf_dp0_wmi_p4B
  assign ctop_inf_dp0_wmi_p4B$D_IN =
	     MUX_ctop_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       ctop_inf_dp0_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_ctop_inf_dp0_wmi_p4B$write_1__VAL_2 ;
  assign ctop_inf_dp0_wmi_p4B$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadResp ;

  // register ctop_inf_dp0_wmi_rdActive
  assign ctop_inf_dp0_wmi_rdActive$D_IN =
	     !MUX_ctop_inf_dp0_wmi_rdActive$write_1__SEL_1 &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign ctop_inf_dp0_wmi_rdActive$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;

  // register ctop_inf_dp0_wmi_reqCount
  assign ctop_inf_dp0_wmi_reqCount$D_IN = ctop_inf_dp0_wmi_reqCount + 16'd1 ;
  assign ctop_inf_dp0_wmi_reqCount$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;

  // register ctop_inf_dp0_wmi_thisMesg
  assign ctop_inf_dp0_wmi_thisMesg$D_IN =
	     { ctop_inf_dp0_wmi_mesgCount[7:0],
	       ctop_inf_dp0_wmi_wmi_mFlagReg[31:24],
	       ctop_inf_dp0_wmi_wmi_mFlagReg[15:0] } ;
  assign ctop_inf_dp0_wmi_thisMesg$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // register ctop_inf_dp0_wmi_wmi_blockReq
  assign ctop_inf_dp0_wmi_wmi_blockReq$D_IN =
	     !MUX_ctop_inf_dp0_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;
  assign ctop_inf_dp0_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[28] &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // register ctop_inf_dp0_wmi_wmi_dhF_countReg
  assign ctop_inf_dp0_wmi_wmi_dhF_countReg$D_IN =
	     MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       ctop_inf_dp0_wmi_wmi_dhF_countReg + 2'd1 :
	       ctop_inf_dp0_wmi_wmi_dhF_countReg - 2'd1 ;
  assign ctop_inf_dp0_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // register ctop_inf_dp0_wmi_wmi_dhF_levelsValid
  assign ctop_inf_dp0_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_reset ;
  assign ctop_inf_dp0_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq &&
	     ctop_inf_dp0_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_reset ;

  // register ctop_inf_dp0_wmi_wmi_errorSticky
  assign ctop_inf_dp0_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign ctop_inf_dp0_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq &&
	     !ctop_inf_dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq &&
	     !ctop_inf_dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_dhF_enq &&
	     !ctop_inf_dp0_wmi_wmi_dhF$FULL_N ;

  // register ctop_inf_dp0_wmi_wmi_mFlagF_countReg
  assign ctop_inf_dp0_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       ctop_inf_dp0_wmi_wmi_mFlagF_countReg + 2'd1 :
	       ctop_inf_dp0_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // register ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid
  assign ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[27] &&
	     ctop_inf_dp0_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_enq &&
	     ctop_inf_dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_mFlagF_reset ;

  // register ctop_inf_dp0_wmi_wmi_mFlagReg
  assign ctop_inf_dp0_wmi_wmi_mFlagReg$D_IN =
	     ctop_inf_dp0_wmi_wmi_mFlagF$D_OUT ;
  assign ctop_inf_dp0_wmi_wmi_mFlagReg$EN =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register ctop_inf_dp0_wmi_wmi_operateD
  assign ctop_inf_dp0_wmi_wmi_operateD$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp0_bml_lbar ;
  assign ctop_inf_dp0_wmi_wmi_operateD$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_wmi_peerIsReady
  assign ctop_inf_dp0_wmi_wmi_peerIsReady$D_IN =
	     CAN_FIRE_RL_ctop_mRstConnect ;
  assign ctop_inf_dp0_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register ctop_inf_dp0_wmi_wmi_reqF_countReg
  assign ctop_inf_dp0_wmi_wmi_reqF_countReg$D_IN =
	     MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       ctop_inf_dp0_wmi_wmi_reqF_countReg + 2'd1 :
	       ctop_inf_dp0_wmi_wmi_reqF_countReg - 2'd1 ;
  assign ctop_inf_dp0_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // register ctop_inf_dp0_wmi_wmi_reqF_levelsValid
  assign ctop_inf_dp0_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_reset ;
  assign ctop_inf_dp0_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_enq &&
	     ctop_inf_dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_reqF_reset ;

  // register ctop_inf_dp0_wmi_wmi_respF_c_r
  assign ctop_inf_dp0_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr ?
	       MUX_ctop_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_ctop_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign ctop_inf_dp0_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr ;

  // register ctop_inf_dp0_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both or
	  MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr or
	  ctop_inf_dp0_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both:
	  ctop_inf_dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2:
	  ctop_inf_dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr:
	  ctop_inf_dp0_wmi_wmi_respF_q_0$D_IN =
	      ctop_inf_dp0_wmi_wmi_respF_q_1;
      default: ctop_inf_dp0_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr ;

  // register ctop_inf_dp0_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both or
	  MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both:
	  ctop_inf_dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_ctop_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2:
	  ctop_inf_dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_ctop_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr:
	  ctop_inf_dp0_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: ctop_inf_dp0_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp0_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_wmi_respF_decCtr ;

  // register ctop_inf_dp0_wmi_wmi_sFlagReg
  assign ctop_inf_dp0_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h76762[7:0], y_avValue__h76742[23:0] } ;
  assign ctop_inf_dp0_wmi_wmi_sFlagReg$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_respMetadata ;

  // register ctop_inf_dp0_wmi_wmi_statusR
  assign ctop_inf_dp0_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign ctop_inf_dp0_wmi_wmi_statusR$EN = 1'b0 ;

  // register ctop_inf_dp0_wmi_wmi_trafficSticky
  assign ctop_inf_dp0_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign ctop_inf_dp0_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register ctop_inf_dp0_wmi_wrActive
  assign ctop_inf_dp0_wmi_wrActive$D_IN =
	     !MUX_ctop_inf_dp0_wmi_wrActive$write_1__SEL_1 &&
	     ctop_inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign ctop_inf_dp0_wmi_wrActive$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;

  // register ctop_inf_dp0_wmi_wrFinalize
  assign ctop_inf_dp0_wmi_wrFinalize$D_IN =
	     MUX_ctop_inf_dp0_wmi_wrFinalize$write_1__SEL_1 ;
  assign ctop_inf_dp0_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // register ctop_inf_dp0_wmi_wrtCount
  assign ctop_inf_dp0_wmi_wrtCount$D_IN = ctop_inf_dp0_wmi_wrtCount + 16'd1 ;
  assign ctop_inf_dp0_wmi_wrtCount$EN =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;

  // register ctop_inf_dp0_wti_nowReq
  assign ctop_inf_dp0_wti_nowReq$D_IN =
	     ctop_inf_itc0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       ctop_inf_itc0_wti_nowReq ;
  assign ctop_inf_dp0_wti_nowReq$EN = 1'd1 ;

  // register ctop_inf_dp1_bml_crdBuf_modulus
  assign ctop_inf_dp1_bml_crdBuf_modulus$D_IN =
	     ctop_inf_dp1_bml_lclNumBufs - 16'd1 ;
  assign ctop_inf_dp1_bml_crdBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_crdBuf_value
  assign ctop_inf_dp1_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp1_bml_crdBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp1_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_crdAdvance ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_fabAvail
  assign ctop_inf_dp1_bml_fabAvail$D_IN = ctop_inf_dp1_bml_fabAvail_1$whas ;
  assign ctop_inf_dp1_bml_fabAvail$EN = 1'd1 ;

  // register ctop_inf_dp1_bml_fabBuf_modulus
  assign ctop_inf_dp1_bml_fabBuf_modulus$D_IN =
	     ctop_inf_dp1_bml_fabNumBufs - 16'd1 ;
  assign ctop_inf_dp1_bml_fabBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_fabBuf_value
  assign ctop_inf_dp1_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp1_bml_fabBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp1_bml_fabBuf_value$EN =
	     MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_fabBufsAvail
  assign ctop_inf_dp1_bml_fabBufsAvail$D_IN =
	     MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_bml_fabBufsAvail$write_1__VAL_2 ;
  assign ctop_inf_dp1_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_fba &&
	     (ctop_inf_dp1_bml_fabAvail && !ctop_inf_dp1_bml_remStart ||
	      !ctop_inf_dp1_bml_fabAvail && ctop_inf_dp1_bml_remStart) ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_fabDone
  assign ctop_inf_dp1_bml_fabDone$D_IN = ctop_inf_dp1_bml_fabDone_1$whas ;
  assign ctop_inf_dp1_bml_fabDone$EN = 1'd1 ;

  // register ctop_inf_dp1_bml_fabFlowAddr
  always@(MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators or
	  ctop_inf_dp1_bml_fabFlowBase or
	  WILL_FIRE_RL_ctop_inf_dp1_bml_crdAdvance or
	  MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1:
	  ctop_inf_dp1_bml_fabFlowAddr$D_IN =
	      MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators:
	  ctop_inf_dp1_bml_fabFlowAddr$D_IN = ctop_inf_dp1_bml_fabFlowBase;
      WILL_FIRE_RL_ctop_inf_dp1_bml_crdAdvance:
	  ctop_inf_dp1_bml_fabFlowAddr$D_IN =
	      MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__VAL_3;
      default: ctop_inf_dp1_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_crdAdvance ;

  // register ctop_inf_dp1_bml_fabFlowBase
  assign ctop_inf_dp1_bml_fabFlowBase$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp1_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register ctop_inf_dp1_bml_fabFlowSize
  assign ctop_inf_dp1_bml_fabFlowSize$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp1_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register ctop_inf_dp1_bml_fabMesgAddr
  assign ctop_inf_dp1_bml_fabMesgAddr$D_IN =
	     MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_bml_fabMesgAddr$write_1__VAL_1 :
	       ctop_inf_dp1_bml_fabMesgBase ;
  assign ctop_inf_dp1_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_fabMesgBase
  assign ctop_inf_dp1_bml_fabMesgBase$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp1_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register ctop_inf_dp1_bml_fabMesgSize
  assign ctop_inf_dp1_bml_fabMesgSize$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp1_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register ctop_inf_dp1_bml_fabMetaAddr
  assign ctop_inf_dp1_bml_fabMetaAddr$D_IN =
	     MUX_ctop_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_bml_fabMetaAddr$write_1__VAL_1 :
	       ctop_inf_dp1_bml_fabMetaBase ;
  assign ctop_inf_dp1_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_fabMetaBase
  assign ctop_inf_dp1_bml_fabMetaBase$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp1_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register ctop_inf_dp1_bml_fabMetaSize
  assign ctop_inf_dp1_bml_fabMetaSize$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign ctop_inf_dp1_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register ctop_inf_dp1_bml_fabNumBufs
  assign ctop_inf_dp1_bml_fabNumBufs$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp1_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register ctop_inf_dp1_bml_lclBufDone
  assign ctop_inf_dp1_bml_lclBufDone$D_IN = ctop_inf_dp1_wmi_mesgDone ;
  assign ctop_inf_dp1_bml_lclBufDone$EN = 1'd1 ;

  // register ctop_inf_dp1_bml_lclBufStart
  assign ctop_inf_dp1_bml_lclBufStart$D_IN = ctop_inf_dp1_wmi_mesgStart ;
  assign ctop_inf_dp1_bml_lclBufStart$EN = 1'd1 ;

  // register ctop_inf_dp1_bml_lclBuf_modulus
  assign ctop_inf_dp1_bml_lclBuf_modulus$D_IN =
	     ctop_inf_dp1_bml_crdBuf_modulus$D_IN ;
  assign ctop_inf_dp1_bml_lclBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_lclBuf_value
  assign ctop_inf_dp1_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp1_bml_lclBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp1_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_lclBufsAR
  assign ctop_inf_dp1_bml_lclBufsAR$D_IN =
	     MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__VAL_2 ;
  assign ctop_inf_dp1_bml_lclBufsAR$EN =
	     MUX_ctop_inf_dp1_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_lclBufsCF
  assign ctop_inf_dp1_bml_lclBufsCF$D_IN =
	     MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_bml_lclBufsCF$write_1__VAL_2 ;
  assign ctop_inf_dp1_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_lbcf &&
	     (ctop_inf_dp1_bml_lclBufDone_202_AND_IF_ctop_in_ETC___d7462 ||
	      NOT_ctop_inf_dp1_bml_lclBufDone_202_269_AND_IF_ETC___d4282) ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_lclCredit
  assign ctop_inf_dp1_bml_lclCredit$D_IN =
	     MUX_ctop_inf_dp1_bml_lclCredit$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign ctop_inf_dp1_bml_lclCredit$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_lcredit &&
	     (ctop_inf_dp1_bml_lclBufDone && !ctop_inf_dp1_bml_remStart ||
	      !ctop_inf_dp1_bml_lclBufDone && ctop_inf_dp1_bml_remStart) ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_lclDones
  assign ctop_inf_dp1_bml_lclDones$D_IN = ctop_inf_dp1_bml_lclDones + 16'd1 ;
  assign ctop_inf_dp1_bml_lclDones$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;

  // register ctop_inf_dp1_bml_lclMesgAddr
  assign ctop_inf_dp1_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       ctop_inf_dp1_bml_mesgBase :
	       MUX_ctop_inf_dp1_bml_lclMesgAddr$write_1__VAL_2 ;
  assign ctop_inf_dp1_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;

  // register ctop_inf_dp1_bml_lclMetaAddr
  assign ctop_inf_dp1_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       ctop_inf_dp1_bml_metaBase :
	       MUX_ctop_inf_dp1_bml_lclMetaAddr$write_1__VAL_2 ;
  assign ctop_inf_dp1_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_lclAdvance ;

  // register ctop_inf_dp1_bml_lclNumBufs
  assign ctop_inf_dp1_bml_lclNumBufs$D_IN =
	     ctop_inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp1_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register ctop_inf_dp1_bml_lclStarts
  assign ctop_inf_dp1_bml_lclStarts$D_IN =
	     ctop_inf_dp1_bml_lclStarts + 16'd1 ;
  assign ctop_inf_dp1_bml_lclStarts$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_cntLclStart ;

  // register ctop_inf_dp1_bml_mesgBase
  assign ctop_inf_dp1_bml_mesgBase$D_IN = ctop_inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp1_bml_mesgBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register ctop_inf_dp1_bml_mesgSize
  assign ctop_inf_dp1_bml_mesgSize$D_IN = ctop_inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp1_bml_mesgSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register ctop_inf_dp1_bml_metaBase
  assign ctop_inf_dp1_bml_metaBase$D_IN = ctop_inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp1_bml_metaBase$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register ctop_inf_dp1_bml_metaSize
  assign ctop_inf_dp1_bml_metaSize$D_IN = ctop_inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign ctop_inf_dp1_bml_metaSize$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register ctop_inf_dp1_bml_remBuf_modulus
  assign ctop_inf_dp1_bml_remBuf_modulus$D_IN =
	     ctop_inf_dp1_bml_crdBuf_modulus$D_IN ;
  assign ctop_inf_dp1_bml_remBuf_modulus$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_remBuf_value
  assign ctop_inf_dp1_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_ctop_inf_dp1_bml_remBuf_value$write_1__VAL_3 ;
  assign ctop_inf_dp1_bml_remBuf_value$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ;

  // register ctop_inf_dp1_bml_remDone
  assign ctop_inf_dp1_bml_remDone$D_IN = ctop_inf_dp1_tlp_remDone ;
  assign ctop_inf_dp1_bml_remDone$EN = 1'd1 ;

  // register ctop_inf_dp1_bml_remDones
  assign ctop_inf_dp1_bml_remDones$D_IN = ctop_inf_dp1_bml_remDones + 16'd1 ;
  assign ctop_inf_dp1_bml_remDones$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;

  // register ctop_inf_dp1_bml_remMesgAddr
  assign ctop_inf_dp1_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       ctop_inf_dp1_bml_mesgBase :
	       MUX_ctop_inf_dp1_bml_remMesgAddr$write_1__VAL_2 ;
  assign ctop_inf_dp1_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;

  // register ctop_inf_dp1_bml_remMetaAddr
  assign ctop_inf_dp1_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ?
	       ctop_inf_dp1_bml_metaBase :
	       MUX_ctop_inf_dp1_bml_remMetaAddr$write_1__VAL_2 ;
  assign ctop_inf_dp1_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_ctop_inf_dp1_bml_remAdvance ;

  // register ctop_inf_dp1_bml_remStart
  assign ctop_inf_dp1_bml_remStart$D_IN = ctop_inf_dp1_tlp_remStart ;
  assign ctop_inf_dp1_bml_remStart$EN = 1'd1 ;

  // register ctop_inf_dp1_bml_remStarts
  assign ctop_inf_dp1_bml_remStarts$D_IN =
	     ctop_inf_dp1_bml_remStarts + 16'd1 ;
  assign ctop_inf_dp1_bml_remStarts$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_cntRemStart ;

  // register ctop_inf_dp1_bram_serverAdapterA_1_cnt
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_PLU_ETC___d2414 ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterA_1_s1
  assign ctop_inf_dp1_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterA_1_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_bram_serverAdapterA_2_cnt
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_PLU_ETC___d2532 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterA_2_s1
  assign ctop_inf_dp1_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterA_2_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_bram_serverAdapterA_3_cnt
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_PLU_ETC___d2650 ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterA_3_s1
  assign ctop_inf_dp1_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterA_3_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_bram_serverAdapterA_cnt
  assign ctop_inf_dp1_bram_serverAdapterA_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterA_cnt_290_PLUS__ETC___d2296 ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterA_s1
  assign ctop_inf_dp1_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterA_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterA_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_bram_serverAdapterB_1_cnt
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_PLU_ETC___d2473 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterB_1_s1
  assign ctop_inf_dp1_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterB_1_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_bram_serverAdapterB_2_cnt
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_PLU_ETC___d2591 ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterB_2_s1
  assign ctop_inf_dp1_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterB_2_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_bram_serverAdapterB_3_cnt
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_PLU_ETC___d2709 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterB_3_s1
  assign ctop_inf_dp1_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterB_3_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_bram_serverAdapterB_cnt
  assign ctop_inf_dp1_bram_serverAdapterB_cnt$D_IN =
	     ctop_inf_dp1_bram_serverAdapterB_cnt_349_PLUS__ETC___d2355 ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // register ctop_inf_dp1_bram_serverAdapterB_s1
  assign ctop_inf_dp1_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	       ctop_inf_dp1_bram_serverAdapterB_s1_1$wget[1],
	       ctop_inf_dp1_bram_serverAdapterB_s1_1$wget[0] } ;
  assign ctop_inf_dp1_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register ctop_inf_dp1_dpControl
  assign ctop_inf_dp1_dpControl$D_IN = ctop_inf_dp1_wci_reqF$D_OUT[3:0] ;
  assign ctop_inf_dp1_dpControl$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	     ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register ctop_inf_dp1_tlp_creditReady
  assign ctop_inf_dp1_tlp_creditReady$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp1_rCredit_1 ;
  assign ctop_inf_dp1_tlp_creditReady$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_debugBdata
  assign ctop_inf_dp1_tlp_debugBdata$D_IN =
	     { ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
	       ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
	       ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
	       ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign ctop_inf_dp1_tlp_debugBdata$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;

  // register ctop_inf_dp1_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta or
	  ctop_inf_dp1_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  ctop_inf_dp1_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta:
	ctop_inf_dp1_tlp_dmaDoTailEvent$D_IN =
	    ctop_inf_dp1_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent:
	ctop_inf_dp1_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody:
	ctop_inf_dp1_tlp_dmaDoTailEvent$D_IN =
	    MUX_ctop_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	ctop_inf_dp1_tlp_dmaDoTailEvent$D_IN =
	    ctop_inf_dp1_tlp_dmaPullRemainDWLen == 10'd1;
    default: ctop_inf_dp1_tlp_dmaDoTailEvent$D_IN =
		 1'b0 /* unspecified value */ ;
  endcase
  assign ctop_inf_dp1_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent ;

  // register ctop_inf_dp1_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h123168 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
	      thisRequestLength__h123168[11:2];
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	  ctop_inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody:
	  ctop_inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_ctop_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: ctop_inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ;

  // register ctop_inf_dp1_tlp_dmaPullRemainDWSub
  assign ctop_inf_dp1_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ?
	       MUX_ctop_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ;

  // register ctop_inf_dp1_tlp_dmaReqTag
  assign ctop_inf_dp1_tlp_dmaReqTag$D_IN = ctop_inf_dp1_tlp_dmaTag ;
  assign ctop_inf_dp1_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta ;

  // register ctop_inf_dp1_tlp_dmaTag
  assign ctop_inf_dp1_tlp_dmaTag$D_IN = ctop_inf_dp1_tlp_dmaTag + 5'd1 ;
  assign ctop_inf_dp1_tlp_dmaTag$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta ;

  // register ctop_inf_dp1_tlp_doXmtMetaBody
  assign ctop_inf_dp1_tlp_doXmtMetaBody$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody ;
  assign ctop_inf_dp1_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp1_tlp_fabFlowAddr
  assign ctop_inf_dp1_tlp_fabFlowAddr$D_IN = ctop_inf_dp1_bml_fabFlowAddr ;
  assign ctop_inf_dp1_tlp_fabFlowAddr$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_fabMesgAccu
  always@(MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  ctop_inf_dp1_tlp_fabMesgAddr or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader or
	  MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  ctop_inf_dp1_tlp_fabMesgAccu$D_IN = ctop_inf_dp1_tlp_fabMesgAddr;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader:
	  ctop_inf_dp1_tlp_fabMesgAccu$D_IN =
	      MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp1_tlp_fabMesgAccu$D_IN =
	      MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3;
      default: ctop_inf_dp1_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp1_tlp_fabMesgAddr
  assign ctop_inf_dp1_tlp_fabMesgAddr$D_IN = ctop_inf_dp1_bml_fabMesgAddr ;
  assign ctop_inf_dp1_tlp_fabMesgAddr$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_fabMeta
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody or
	  MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta or
	  MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody:
	ctop_inf_dp1_tlp_fabMeta$D_IN =
	    MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta:
	ctop_inf_dp1_tlp_fabMeta$D_IN =
	    MUX_ctop_inf_dp1_tlp_fabMeta$write_1__VAL_2;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent ||
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent:
	ctop_inf_dp1_tlp_fabMeta$D_IN =
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: ctop_inf_dp1_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign ctop_inf_dp1_tlp_fabMeta$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ;

  // register ctop_inf_dp1_tlp_fabMetaAddr
  assign ctop_inf_dp1_tlp_fabMetaAddr$D_IN = ctop_inf_dp1_bml_fabMetaAddr ;
  assign ctop_inf_dp1_tlp_fabMetaAddr$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_farBufReady
  assign ctop_inf_dp1_tlp_farBufReady$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp1_rFRdy_1 ;
  assign ctop_inf_dp1_tlp_farBufReady$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_flowDiagCount
  assign ctop_inf_dp1_tlp_flowDiagCount$D_IN =
	     ctop_inf_dp1_tlp_flowDiagCount + 32'd1 ;
  assign ctop_inf_dp1_tlp_flowDiagCount$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell ;

  // register ctop_inf_dp1_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  ctop_inf_dp1_tlp_inF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody or
	  ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	  ctop_inf_dp1_tlp_gotResponseHeader$D_IN =
	      ctop_inf_dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody:
	  ctop_inf_dp1_tlp_gotResponseHeader$D_IN =
	      !ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp1_tlp_gotResponseHeader$D_IN = 1'd0;
      default: ctop_inf_dp1_tlp_gotResponseHeader$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp1_tlp_inIgnorePkt
  assign ctop_inf_dp1_tlp_inIgnorePkt$D_IN =
	     ctop_inf_dp1_tlp_inF$D_OUT[110] ||
	     ctop_inf_dp1_tlp_inF$D_OUT[125] ||
	     ctop_inf_dp1_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign ctop_inf_dp1_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv &&
	     ctop_inf_dp1_tlp_inF$D_OUT[152] ;

  // register ctop_inf_dp1_tlp_maxPayloadSize
  assign ctop_inf_dp1_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign ctop_inf_dp1_tlp_maxPayloadSize$EN = 1'b0 ;

  // register ctop_inf_dp1_tlp_maxReadReqSize
  assign ctop_inf_dp1_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign ctop_inf_dp1_tlp_maxReadReqSize$EN = 1'b0 ;

  // register ctop_inf_dp1_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	  ctop_inf_dp1_tlp_mesgComplReceived$D_IN =
	      MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody:
	  ctop_inf_dp1_tlp_mesgComplReceived$D_IN =
	      MUX_ctop_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta:
	  ctop_inf_dp1_tlp_mesgComplReceived$D_IN = 17'd0;
      default: ctop_inf_dp1_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ;

  // register ctop_inf_dp1_tlp_mesgLengthRemainPull
  assign ctop_inf_dp1_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ?
	       MUX_ctop_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp1_tlp_mesgLengthRemainPush
  assign ctop_inf_dp1_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead ?
	       MUX_ctop_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg ;

  // register ctop_inf_dp1_tlp_nearBufReady
  assign ctop_inf_dp1_tlp_nearBufReady$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp1_rRdy_1 ;
  assign ctop_inf_dp1_tlp_nearBufReady$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_outDwRemain
  assign ctop_inf_dp1_tlp_outDwRemain$D_IN =
	     MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_outDwRemain$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody ;

  // register ctop_inf_dp1_tlp_postSeqDwell
  assign ctop_inf_dp1_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPostSeqDwell ?
	       MUX_ctop_inf_dp1_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign ctop_inf_dp1_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ;

  // register ctop_inf_dp1_tlp_pullTagMatch
  assign ctop_inf_dp1_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeaderTag &&
	     ctop_inf_dp1_tlp_pullTagMatch_1$wget ;
  assign ctop_inf_dp1_tlp_pullTagMatch$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_rdRespDwRemain
  assign ctop_inf_dp1_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp ?
	       MUX_ctop_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;

  // register ctop_inf_dp1_tlp_readHeaderSent
  assign ctop_inf_dp1_tlp_readHeaderSent$D_IN =
	     MUX_ctop_inf_dp1_tlp_readHeaderSent$write_1__SEL_1 ;
  assign ctop_inf_dp1_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp &&
	     ctop_inf_dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp &&
	     ctop_inf_dp1_tlp_rdRespDwRemain_716_ULE_4___d3717 ;

  // register ctop_inf_dp1_tlp_readNxtDWAddr
  assign ctop_inf_dp1_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq ?
	       MUX_ctop_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;

  // register ctop_inf_dp1_tlp_readRemainDWLen
  assign ctop_inf_dp1_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq ?
	       MUX_ctop_inf_dp1_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;

  // register ctop_inf_dp1_tlp_readStarted
  assign ctop_inf_dp1_tlp_readStarted$D_IN =
	     MUX_ctop_inf_dp1_tlp_readStarted$write_1__SEL_1 ;
  assign ctop_inf_dp1_tlp_readStarted$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq &&
	     ctop_inf_dp1_tlp_readRemainDWLen_572_ULE_4___d3573 ;

  // register ctop_inf_dp1_tlp_remDone
  assign ctop_inf_dp1_tlp_remDone$D_IN = ctop_inf_dp1_tlp_remDone_1$whas ;
  assign ctop_inf_dp1_tlp_remDone$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_remMesgAccu
  always@(MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  ctop_inf_dp1_tlp_remMesgAddr or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg or
	  MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  ctop_inf_dp1_tlp_remMesgAccu$D_IN = ctop_inf_dp1_tlp_remMesgAddr;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg:
	  ctop_inf_dp1_tlp_remMesgAccu$D_IN =
	      MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	  ctop_inf_dp1_tlp_remMesgAccu$D_IN =
	      MUX_ctop_inf_dp1_tlp_remMesgAccu$write_1__VAL_3;
      default: ctop_inf_dp1_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ;

  // register ctop_inf_dp1_tlp_remMesgAddr
  assign ctop_inf_dp1_tlp_remMesgAddr$D_IN = ctop_inf_dp1_bml_remMesgAddr ;
  assign ctop_inf_dp1_tlp_remMesgAddr$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_remMetaAddr
  assign ctop_inf_dp1_tlp_remMetaAddr$D_IN = ctop_inf_dp1_bml_remMetaAddr ;
  assign ctop_inf_dp1_tlp_remMetaAddr$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_remStart
  assign ctop_inf_dp1_tlp_remStart$D_IN = ctop_inf_dp1_tlp_remStart_1$whas ;
  assign ctop_inf_dp1_tlp_remStart$EN = 1'd1 ;

  // register ctop_inf_dp1_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  ctop_inf_dp1_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_ctop_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	  ctop_inf_dp1_tlp_reqMesgInFlight$D_IN =
	      ctop_inf_dp1_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody:
	  ctop_inf_dp1_tlp_reqMesgInFlight$D_IN =
	      MUX_ctop_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp1_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: ctop_inf_dp1_tlp_reqMesgInFlight$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register ctop_inf_dp1_tlp_reqMetaBodyInFlight
  assign ctop_inf_dp1_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ;
  assign ctop_inf_dp1_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // register ctop_inf_dp1_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta:
	ctop_inf_dp1_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta:
	ctop_inf_dp1_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta:
	ctop_inf_dp1_tlp_reqMetaInFlight$D_IN = 1'd1;
    default: ctop_inf_dp1_tlp_reqMetaInFlight$D_IN =
		 1'b0 /* unspecified value */ ;
  endcase
  assign ctop_inf_dp1_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta ;

  // register ctop_inf_dp1_tlp_srcMesgAccu
  assign ctop_inf_dp1_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ?
	       ctop_inf_dp1_tlp_fabMesgAddr :
	       MUX_ctop_inf_dp1_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg ;

  // register ctop_inf_dp1_tlp_tlpMetaSent
  assign ctop_inf_dp1_tlp_tlpMetaSent$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ;
  assign ctop_inf_dp1_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody ;

  // register ctop_inf_dp1_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv or
	  ctop_inf_dp1_tlp_inF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody or
	  ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv:
	  ctop_inf_dp1_tlp_tlpRcvBusy$D_IN = !ctop_inf_dp1_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	  ctop_inf_dp1_tlp_tlpRcvBusy$D_IN =
	      ctop_inf_dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody:
	  ctop_inf_dp1_tlp_tlpRcvBusy$D_IN =
	      !ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261;
      default: ctop_inf_dp1_tlp_tlpRcvBusy$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ;

  // register ctop_inf_dp1_tlp_tlpXmtBusy
  always@(MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1 or
	  ctop_inf_dp1_tlp_mRespF$D_OUT or
	  MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody or
	  MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1:
	  ctop_inf_dp1_tlp_tlpXmtBusy$D_IN =
	      ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody:
	  ctop_inf_dp1_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead:
	  ctop_inf_dp1_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: ctop_inf_dp1_tlp_tlpXmtBusy$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader && _dfoo15 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header &&
	     !ctop_inf_dp1_tlp_mRespF_first__926_BITS_71_TO__ETC___d7397 ||
	     (WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody) &&
	     ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp1_tlp_writeDWAddr
  assign ctop_inf_dp1_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq ?
	       MUX_ctop_inf_dp1_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_writeDWAddr$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData ;

  // register ctop_inf_dp1_tlp_writeLastBE
  assign ctop_inf_dp1_tlp_writeLastBE$D_IN =
	     ctop_inf_dp1_tlp_mReqF$D_OUT[35:32] ;
  assign ctop_inf_dp1_tlp_writeLastBE$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_writeReq ;

  // register ctop_inf_dp1_tlp_writeRemainDWLen
  assign ctop_inf_dp1_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq ?
	       MUX_ctop_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData ;

  // register ctop_inf_dp1_tlp_xmtMetaInFlight
  assign ctop_inf_dp1_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ;
  assign ctop_inf_dp1_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp1_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody or
	  ctop_inf_dp1_tlp_mesgLengthRemainPush or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead or
	  MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3 or
	  MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4)
  case (1'b1)
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody:
	ctop_inf_dp1_tlp_xmtMetaOK$D_IN =
	    ctop_inf_dp1_tlp_mesgLengthRemainPush == 17'd0;
    WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead:
	ctop_inf_dp1_tlp_xmtMetaOK$D_IN = 1'd0;
    MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3 ||
    MUX_ctop_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4:
	ctop_inf_dp1_tlp_xmtMetaOK$D_IN = 1'd1;
    default: ctop_inf_dp1_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign ctop_inf_dp1_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody &&
	     ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372 &&
	     ctop_inf_dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead ;

  // register ctop_inf_dp1_wci_cEdge
  assign ctop_inf_dp1_wci_cEdge$D_IN = ctop_inf_dp1_wci_reqF$D_OUT[36:34] ;
  assign ctop_inf_dp1_wci_cEdge$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start ;

  // register ctop_inf_dp1_wci_cState
  assign ctop_inf_dp1_wci_cState$D_IN = ctop_inf_dp1_wci_nState ;
  assign ctop_inf_dp1_wci_cState$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete &&
	     !ctop_inf_dp1_wci_illegalEdge ;

  // register ctop_inf_dp1_wci_ctlAckReg
  assign ctop_inf_dp1_wci_ctlAckReg$D_IN = ctop_inf_dp1_wci_ctlAckReg_1$whas ;
  assign ctop_inf_dp1_wci_ctlAckReg$EN = 1'd1 ;

  // register ctop_inf_dp1_wci_ctlOpActive
  assign ctop_inf_dp1_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ;
  assign ctop_inf_dp1_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start ;

  // register ctop_inf_dp1_wci_illegalEdge
  assign ctop_inf_dp1_wci_illegalEdge$D_IN =
	     !MUX_ctop_inf_dp1_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_ctop_inf_dp1_wci_illegalEdge$write_1__VAL_2 ;
  assign ctop_inf_dp1_wci_illegalEdge$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete &&
	     ctop_inf_dp1_wci_illegalEdge ||
	     MUX_ctop_inf_dp1_wci_illegalEdge$write_1__SEL_2 ;

  // register ctop_inf_dp1_wci_nState
  always@(ctop_inf_dp1_wci_reqF$D_OUT)
  begin
    case (ctop_inf_dp1_wci_reqF$D_OUT[36:34])
      3'd0: ctop_inf_dp1_wci_nState$D_IN = 3'd1;
      3'd1: ctop_inf_dp1_wci_nState$D_IN = 3'd2;
      3'd2: ctop_inf_dp1_wci_nState$D_IN = 3'd3;
      default: ctop_inf_dp1_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign ctop_inf_dp1_wci_nState$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start &&
	     (ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      ctop_inf_dp1_wci_cState == 3'd0 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (ctop_inf_dp1_wci_cState == 3'd1 ||
	       ctop_inf_dp1_wci_cState == 3'd3) ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      ctop_inf_dp1_wci_cState == 3'd2 ||
	      ctop_inf_dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (ctop_inf_dp1_wci_cState == 3'd3 ||
	       ctop_inf_dp1_wci_cState == 3'd2 ||
	       ctop_inf_dp1_wci_cState == 3'd1)) ;

  // register ctop_inf_dp1_wci_reqF_countReg
  assign ctop_inf_dp1_wci_reqF_countReg$D_IN =
	     (ctop_inf_dp1_wci_wciReq$wget[59:57] != 3'd0) ?
	       ctop_inf_dp1_wci_reqF_countReg + 2'd1 :
	       ctop_inf_dp1_wci_reqF_countReg - 2'd1 ;
  assign ctop_inf_dp1_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_wci_reqF__updateLevelCounter ;

  // register ctop_inf_dp1_wci_respF_c_r
  assign ctop_inf_dp1_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr ?
	       MUX_ctop_inf_dp1_wci_respF_c_r$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_wci_respF_c_r$write_1__VAL_2 ;
  assign ctop_inf_dp1_wci_respF_c_r$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr ;

  // register ctop_inf_dp1_wci_respF_q_0
  always@(WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both or
	  MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_1 or
	  MUX_ctop_inf_dp1_wci_respF_q_0$write_1__SEL_2 or
	  MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr or
	  ctop_inf_dp1_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both:
	  ctop_inf_dp1_wci_respF_q_0$D_IN =
	      MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_1;
      MUX_ctop_inf_dp1_wci_respF_q_0$write_1__SEL_2:
	  ctop_inf_dp1_wci_respF_q_0$D_IN =
	      MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr:
	  ctop_inf_dp1_wci_respF_q_0$D_IN = ctop_inf_dp1_wci_respF_q_1;
      default: ctop_inf_dp1_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_wci_respF_q_0$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr &&
	     ctop_inf_dp1_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr ;

  // register ctop_inf_dp1_wci_respF_q_1
  always@(WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both or
	  MUX_ctop_inf_dp1_wci_respF_q_1$write_1__VAL_1 or
	  MUX_ctop_inf_dp1_wci_respF_q_1$write_1__SEL_2 or
	  MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both:
	  ctop_inf_dp1_wci_respF_q_1$D_IN =
	      MUX_ctop_inf_dp1_wci_respF_q_1$write_1__VAL_1;
      MUX_ctop_inf_dp1_wci_respF_q_1$write_1__SEL_2:
	  ctop_inf_dp1_wci_respF_q_1$D_IN =
	      MUX_ctop_inf_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr:
	  ctop_inf_dp1_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: ctop_inf_dp1_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_wci_respF_q_1$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_incCtr &&
	     ctop_inf_dp1_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wci_respF_decCtr ;

  // register ctop_inf_dp1_wci_sFlagReg
  assign ctop_inf_dp1_wci_sFlagReg$D_IN = 1'b0 ;
  assign ctop_inf_dp1_wci_sFlagReg$EN = 1'd1 ;

  // register ctop_inf_dp1_wci_sThreadBusy_d
  assign ctop_inf_dp1_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign ctop_inf_dp1_wci_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_addr
  assign ctop_inf_dp1_wmi_addr$D_IN =
	     MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_ctop_inf_dp1_wmi_addr$write_1__VAL_1 :
	       ctop_inf_dp1_wmi_wmi_reqF$D_OUT[25:12] ;
  assign ctop_inf_dp1_wmi_addr$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // register ctop_inf_dp1_wmi_bufDwell
  assign ctop_inf_dp1_wmi_bufDwell$D_IN =
	     (MUX_ctop_inf_dp1_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_ctop_inf_dp1_wmi_bufDwell$write_1__VAL_3 ;
  assign ctop_inf_dp1_wmi_bufDwell$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doDwell ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // register ctop_inf_dp1_wmi_bytesRemainReq
  assign ctop_inf_dp1_wmi_bytesRemainReq$D_IN =
	     MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_ctop_inf_dp1_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign ctop_inf_dp1_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // register ctop_inf_dp1_wmi_bytesRemainResp
  assign ctop_inf_dp1_wmi_bytesRemainResp$D_IN =
	     MUX_ctop_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_ctop_inf_dp1_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign ctop_inf_dp1_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;

  // register ctop_inf_dp1_wmi_doneWithMesg
  assign ctop_inf_dp1_wmi_doneWithMesg$D_IN =
	     !MUX_ctop_inf_dp1_wmi_doneWithMesg$write_1__SEL_1 &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[27] ;
  assign ctop_inf_dp1_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq ||
	      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq) &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // register ctop_inf_dp1_wmi_lastMesg
  assign ctop_inf_dp1_wmi_lastMesg$D_IN = ctop_inf_dp1_wmi_thisMesg ;
  assign ctop_inf_dp1_wmi_lastMesg$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // register ctop_inf_dp1_wmi_lclMesgAddr
  assign ctop_inf_dp1_wmi_lclMesgAddr$D_IN =
	     ctop_inf_dp1_bml_lclMesgAddr[14:0] ;
  assign ctop_inf_dp1_wmi_lclMesgAddr$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_lclMetaAddr
  assign ctop_inf_dp1_wmi_lclMetaAddr$D_IN =
	     ctop_inf_dp1_bml_lclMetaAddr[14:0] ;
  assign ctop_inf_dp1_wmi_lclMetaAddr$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_mesgBufReady
  assign ctop_inf_dp1_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_ctop_inf_dp1_rRdy ;
  assign ctop_inf_dp1_wmi_mesgBufReady$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_mesgBusy
  assign ctop_inf_dp1_wmi_mesgBusy$D_IN =
	     !MUX_ctop_inf_dp1_wmi_mesgBusy$write_1__SEL_1 ;
  assign ctop_inf_dp1_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doDwell &&
	     ctop_inf_dp1_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // register ctop_inf_dp1_wmi_mesgCount
  assign ctop_inf_dp1_wmi_mesgCount$D_IN =
	     MUX_ctop_inf_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_ctop_inf_dp1_wmi_mesgCount$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_wmi_mesgCount$write_1__VAL_1 ;
  assign ctop_inf_dp1_wmi_mesgCount$EN = ctop_inf_dp1_wmi_mesgDone_1$whas ;

  // register ctop_inf_dp1_wmi_mesgDone
  assign ctop_inf_dp1_wmi_mesgDone$D_IN = ctop_inf_dp1_wmi_mesgDone_1$whas ;
  assign ctop_inf_dp1_wmi_mesgDone$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_mesgMeta
  assign ctop_inf_dp1_wmi_mesgMeta$D_IN =
	     MUX_ctop_inf_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_ctop_inf_dp1_wmi_mesgMeta$write_1__VAL_2 ;
  assign ctop_inf_dp1_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ;

  // register ctop_inf_dp1_wmi_mesgStart
  assign ctop_inf_dp1_wmi_mesgStart$D_IN = ctop_inf_dp1_wmi_mesgStart_1$whas ;
  assign ctop_inf_dp1_wmi_mesgStart$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_metaBusy
  assign ctop_inf_dp1_wmi_metaBusy$D_IN =
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ;
  assign ctop_inf_dp1_wmi_metaBusy$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ;

  // register ctop_inf_dp1_wmi_p4B
  assign ctop_inf_dp1_wmi_p4B$D_IN =
	     MUX_ctop_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       ctop_inf_dp1_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_ctop_inf_dp1_wmi_p4B$write_1__VAL_2 ;
  assign ctop_inf_dp1_wmi_p4B$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadResp ;

  // register ctop_inf_dp1_wmi_rdActive
  assign ctop_inf_dp1_wmi_rdActive$D_IN =
	     !MUX_ctop_inf_dp1_wmi_rdActive$write_1__SEL_1 &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign ctop_inf_dp1_wmi_rdActive$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // register ctop_inf_dp1_wmi_reqCount
  assign ctop_inf_dp1_wmi_reqCount$D_IN = ctop_inf_dp1_wmi_reqCount + 16'd1 ;
  assign ctop_inf_dp1_wmi_reqCount$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // register ctop_inf_dp1_wmi_thisMesg
  assign ctop_inf_dp1_wmi_thisMesg$D_IN =
	     { ctop_inf_dp1_wmi_mesgCount[7:0],
	       ctop_inf_dp1_wmi_wmi_mFlagReg[31:24],
	       ctop_inf_dp1_wmi_wmi_mFlagReg[15:0] } ;
  assign ctop_inf_dp1_wmi_thisMesg$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // register ctop_inf_dp1_wmi_wmi_blockReq
  assign ctop_inf_dp1_wmi_wmi_blockReq$D_IN =
	     !MUX_ctop_inf_dp1_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;
  assign ctop_inf_dp1_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[28] &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // register ctop_inf_dp1_wmi_wmi_dhF_countReg
  assign ctop_inf_dp1_wmi_wmi_dhF_countReg$D_IN =
	     MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       ctop_inf_dp1_wmi_wmi_dhF_countReg + 2'd1 :
	       ctop_inf_dp1_wmi_wmi_dhF_countReg - 2'd1 ;
  assign ctop_inf_dp1_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // register ctop_inf_dp1_wmi_wmi_dhF_levelsValid
  assign ctop_inf_dp1_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_reset ;
  assign ctop_inf_dp1_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq &&
	     ctop_inf_dp1_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_reset ;

  // register ctop_inf_dp1_wmi_wmi_errorSticky
  assign ctop_inf_dp1_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign ctop_inf_dp1_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq &&
	     !ctop_inf_dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq &&
	     !ctop_inf_dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_dhF_enq &&
	     !ctop_inf_dp1_wmi_wmi_dhF$FULL_N ;

  // register ctop_inf_dp1_wmi_wmi_mFlagF_countReg
  assign ctop_inf_dp1_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       ctop_inf_dp1_wmi_wmi_mFlagF_countReg + 2'd1 :
	       ctop_inf_dp1_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // register ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid
  assign ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[27] &&
	     ctop_inf_dp1_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_enq &&
	     ctop_inf_dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_mFlagF_reset ;

  // register ctop_inf_dp1_wmi_wmi_mFlagReg
  assign ctop_inf_dp1_wmi_wmi_mFlagReg$D_IN =
	     ctop_inf_dp1_wmi_wmi_mFlagF$D_OUT ;
  assign ctop_inf_dp1_wmi_wmi_mFlagReg$EN =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register ctop_inf_dp1_wmi_wmi_operateD
  assign ctop_inf_dp1_wmi_wmi_operateD$D_IN =
	     CAN_FIRE_RL_ctop_inf_dp1_bml_lbar ;
  assign ctop_inf_dp1_wmi_wmi_operateD$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_wmi_peerIsReady
  assign ctop_inf_dp1_wmi_wmi_peerIsReady$D_IN =
	     CAN_FIRE_RL_ctop_mRstConnect_1 ;
  assign ctop_inf_dp1_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register ctop_inf_dp1_wmi_wmi_reqF_countReg
  assign ctop_inf_dp1_wmi_wmi_reqF_countReg$D_IN =
	     MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       ctop_inf_dp1_wmi_wmi_reqF_countReg + 2'd1 :
	       ctop_inf_dp1_wmi_wmi_reqF_countReg - 2'd1 ;
  assign ctop_inf_dp1_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // register ctop_inf_dp1_wmi_wmi_reqF_levelsValid
  assign ctop_inf_dp1_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_reset ;
  assign ctop_inf_dp1_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_enq &&
	     ctop_inf_dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_reqF_reset ;

  // register ctop_inf_dp1_wmi_wmi_respF_c_r
  assign ctop_inf_dp1_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr ?
	       MUX_ctop_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_ctop_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign ctop_inf_dp1_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr ;

  // register ctop_inf_dp1_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both or
	  MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr or
	  ctop_inf_dp1_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both:
	  ctop_inf_dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2:
	  ctop_inf_dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr:
	  ctop_inf_dp1_wmi_wmi_respF_q_0$D_IN =
	      ctop_inf_dp1_wmi_wmi_respF_q_1;
      default: ctop_inf_dp1_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr ;

  // register ctop_inf_dp1_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both or
	  MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both:
	  ctop_inf_dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_ctop_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2:
	  ctop_inf_dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_ctop_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr:
	  ctop_inf_dp1_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: ctop_inf_dp1_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_incCtr &&
	     ctop_inf_dp1_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_wmi_respF_decCtr ;

  // register ctop_inf_dp1_wmi_wmi_sFlagReg
  assign ctop_inf_dp1_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h155823[7:0], y_avValue__h155803[23:0] } ;
  assign ctop_inf_dp1_wmi_wmi_sFlagReg$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_respMetadata ;

  // register ctop_inf_dp1_wmi_wmi_statusR
  assign ctop_inf_dp1_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign ctop_inf_dp1_wmi_wmi_statusR$EN = 1'b0 ;

  // register ctop_inf_dp1_wmi_wmi_trafficSticky
  assign ctop_inf_dp1_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign ctop_inf_dp1_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register ctop_inf_dp1_wmi_wrActive
  assign ctop_inf_dp1_wmi_wrActive$D_IN =
	     !MUX_ctop_inf_dp1_wmi_wrActive$write_1__SEL_1 &&
	     ctop_inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign ctop_inf_dp1_wmi_wrActive$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;

  // register ctop_inf_dp1_wmi_wrFinalize
  assign ctop_inf_dp1_wmi_wrFinalize$D_IN =
	     MUX_ctop_inf_dp1_wmi_wrFinalize$write_1__SEL_1 ;
  assign ctop_inf_dp1_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     ctop_inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // register ctop_inf_dp1_wmi_wrtCount
  assign ctop_inf_dp1_wmi_wrtCount$D_IN = ctop_inf_dp1_wmi_wrtCount + 16'd1 ;
  assign ctop_inf_dp1_wmi_wrtCount$EN =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;

  // register ctop_inf_dp1_wti_nowReq
  assign ctop_inf_dp1_wti_nowReq$D_IN =
	     ctop_inf_itc1_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       ctop_inf_itc1_wti_nowReq ;
  assign ctop_inf_dp1_wti_nowReq$EN = 1'd1 ;

  // register ctop_inf_itc0_wti_nowReq
  assign ctop_inf_itc0_wti_nowReq$D_IN = { 3'd1, ctop_inf_itc0_now$dD_OUT } ;
  assign ctop_inf_itc0_wti_nowReq$EN = 1'd1 ;

  // register ctop_inf_itc0_wti_sThreadBusy_d
  assign ctop_inf_itc0_wti_sThreadBusy_d$D_IN = ctop_inf_dp0_wti_isReset$VAL ;
  assign ctop_inf_itc0_wti_sThreadBusy_d$EN = 1'd1 ;

  // register ctop_inf_itc1_wti_nowReq
  assign ctop_inf_itc1_wti_nowReq$D_IN = { 3'd1, ctop_inf_itc1_now$dD_OUT } ;
  assign ctop_inf_itc1_wti_nowReq$EN = 1'd1 ;

  // register ctop_inf_itc1_wti_sThreadBusy_d
  assign ctop_inf_itc1_wti_sThreadBusy_d$D_IN = ctop_inf_dp1_wti_isReset$VAL ;
  assign ctop_inf_itc1_wti_sThreadBusy_d$EN = 1'd1 ;

  // register i2pAF_head_wrapped
  assign i2pAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_i2pAF_deq_update_head && !i2pAF_head_wrapped ;
  assign i2pAF_head_wrapped$EN =
	     WILL_FIRE_RL_i2pAF_deq_update_head || i2pAF_dInReset$VAL ;

  // register i2pAF_tail_wrapped
  assign i2pAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_i2pAF_enq_update_tail && !i2pAF_tail_wrapped ;
  assign i2pAF_tail_wrapped$EN =
	     WILL_FIRE_RL_i2pAF_enq_update_tail || i2pAF_sInReset$VAL ;

  // register i2pS
  assign i2pS$D_IN = ctop_inf_sm0$s_response_get ;
  assign i2pS$EN =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;

  // register p2iAF_head_wrapped
  assign p2iAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_p2iAF_deq_update_head && !p2iAF_head_wrapped ;
  assign p2iAF_head_wrapped$EN =
	     WILL_FIRE_RL_p2iAF_deq_update_head || p2iAF_dInReset$VAL ;

  // register p2iAF_tail_wrapped
  assign p2iAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_p2iAF_enq_update_tail && !p2iAF_tail_wrapped ;
  assign p2iAF_tail_wrapped$EN =
	     WILL_FIRE_RL_p2iAF_enq_update_tail || p2iAF_sInReset$VAL ;

  // register p2iS
  assign p2iS$D_IN =
	     MUX_p2iS$write_1__SEL_1 ?
	       MUX_p2iS$write_1__VAL_1 :
	       MUX_p2iS$write_1__VAL_2 ;
  assign p2iS$EN = p2iAF_enq_pw$whas ;

  // register pcie_irq_rInterruptDi
  assign pcie_irq_rInterruptDi$D_IN = pcie_irq_fifoAssert$dD_OUT ;
  assign pcie_irq_rInterruptDi$EN =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rInterruptN
  assign pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;
  assign pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pcie_irq_rInterrupting
  assign pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rMMEnabled
  assign pcie_irq_rMMEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pcie_irq_rMSIEnabled
  assign pcie_irq_rMSIEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // register tcGbe0_wti_nowReq
  assign tcGbe0_wti_nowReq$D_IN = { 3'd1, tcGbe0_now$dD_OUT } ;
  assign tcGbe0_wti_nowReq$EN = 1'd1 ;

  // register tcGbe0_wti_sThreadBusy_d
  assign tcGbe0_wti_sThreadBusy_d$D_IN = gbe0$wti_s_SThreadBusy ;
  assign tcGbe0_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule ctop_app_appW2_respF_memory
  assign ctop_app_appW2_respF_memory$ADDRA =
	     ctop_app_appW2_respF_rWrPtr[10:0] ;
  assign ctop_app_appW2_respF_memory$ADDRB =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgResptoWsi ?
	       x__h183337[10:0] :
	       ctop_app_appW2_respF_rRdPtr[10:0] ;
  assign ctop_app_appW2_respF_memory$DIA =
	     { IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7402,
	       ctop_app_appW2_respF_pwEnqueue$whas &&
	       ctop_app_appW2_respF_wDataIn$wget[57],
	       ctop_app_appW2_respF_pwEnqueue$whas &&
	       ctop_app_appW2_respF_wDataIn$wget[56],
	       IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7405 } ;
  assign ctop_app_appW2_respF_memory$DIB =
	     61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign ctop_app_appW2_respF_memory$WEA =
	     ctop_app_appW2_respF_pwEnqueue$whas ;
  assign ctop_app_appW2_respF_memory$WEB = 1'd0 ;
  assign ctop_app_appW2_respF_memory$ENA = 1'd1 ;
  assign ctop_app_appW2_respF_memory$ENB = 1'd1 ;

  // submodule ctop_app_appW2_wci_reqF
  assign ctop_app_appW2_wci_reqF$D_IN = ctop_app_appW2_wci_wciReq$wget ;
  assign ctop_app_appW2_wci_reqF$ENQ =
	     CAN_FIRE_RL_ctop_app_appW2_wci_reqF_enq ;
  assign ctop_app_appW2_wci_reqF$DEQ = ctop_app_appW2_wci_reqF_r_deq$whas ;
  assign ctop_app_appW2_wci_reqF$CLR = 1'b0 ;

  // submodule ctop_app_appW2_wmi_respF
  assign ctop_app_appW2_wmi_respF$D_IN = ctop_inf_dp0_wmi_wmi_respF_q_0 ;
  assign ctop_app_appW2_wmi_respF$ENQ =
	     WILL_FIRE_RL_ctop_app_appW2_wmi_respAdvance &&
	     ctop_app_appW2_wmi_respF$FULL_N ;
  assign ctop_app_appW2_wmi_respF$DEQ =
	     CAN_FIRE_RL_ctop_app_appW2_wmrd_mesgBodyResponse ;
  assign ctop_app_appW2_wmi_respF$CLR = 1'b0 ;

  // submodule ctop_app_appW2_wsiS_reqFifo
  assign ctop_app_appW2_wsiS_reqFifo$D_IN = 61'd0 ;
  assign ctop_app_appW2_wsiS_reqFifo$ENQ = 1'b0 ;
  assign ctop_app_appW2_wsiS_reqFifo$DEQ =
	     ctop_app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign ctop_app_appW2_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule ctop_app_appW3_mesgRF
  assign ctop_app_appW3_mesgRF$D_IN = v__h210525 ;
  assign ctop_app_appW3_mesgRF$ENQ = CAN_FIRE_RL_ctop_app_appW3_rdSer_body ;
  assign ctop_app_appW3_mesgRF$DEQ =
	     CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBodyResponse ;
  assign ctop_app_appW3_mesgRF$CLR = 1'b0 ;

  // submodule ctop_app_appW3_mesgWF_memory
  assign ctop_app_appW3_mesgWF_memory$ADDRA =
	     ctop_app_appW3_mesgWF_rWrPtr[11:0] ;
  assign ctop_app_appW3_mesgWF_memory$ADDRB =
	     CAN_FIRE_RL_ctop_app_appW3_wrtSer_body ?
	       x__h205651[11:0] :
	       ctop_app_appW3_mesgWF_rRdPtr[11:0] ;
  assign ctop_app_appW3_mesgWF_memory$DIA = x__h205550 ;
  assign ctop_app_appW3_mesgWF_memory$DIB =
	     32'hAAAAAAAA /* unspecified value */  ;
  assign ctop_app_appW3_mesgWF_memory$WEA =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ;
  assign ctop_app_appW3_mesgWF_memory$WEB = 1'd0 ;
  assign ctop_app_appW3_mesgWF_memory$ENA = 1'd1 ;
  assign ctop_app_appW3_mesgWF_memory$ENB = 1'd1 ;

  // submodule ctop_app_appW3_metaRF
  assign ctop_app_appW3_metaRF$D_IN = v__h210525 ;
  assign ctop_app_appW3_metaRF$ENQ = CAN_FIRE_RL_ctop_app_appW3_rdSer_begin ;
  assign ctop_app_appW3_metaRF$DEQ =
	     CAN_FIRE_RL_ctop_app_appW3_wmrd_mesgBegin ;
  assign ctop_app_appW3_metaRF$CLR = 1'b0 ;

  // submodule ctop_app_appW3_metaWF
  assign ctop_app_appW3_metaWF$D_IN =
	     { ctop_app_appW3_wsiS_reqFifo$D_OUT[7:0], btm__h208039 } ;
  assign ctop_app_appW3_metaWF$ENQ =
	     MUX_ctop_app_appW3_mesgWtCount$write_1__SEL_1 ;
  assign ctop_app_appW3_metaWF$DEQ = CAN_FIRE_RL_ctop_app_appW3_wrtSer_begin ;
  assign ctop_app_appW3_metaWF$CLR = 1'b0 ;

  // submodule ctop_app_appW3_wci_reqF
  assign ctop_app_appW3_wci_reqF$D_IN = ctop_app_appW3_wci_wciReq$wget ;
  assign ctop_app_appW3_wci_reqF$ENQ =
	     CAN_FIRE_RL_ctop_app_appW3_wci_reqF_enq ;
  assign ctop_app_appW3_wci_reqF$DEQ = ctop_app_appW3_wci_reqF_r_deq$whas ;
  assign ctop_app_appW3_wci_reqF$CLR = 1'b0 ;

  // submodule ctop_app_appW3_wide16Fa
  assign ctop_app_appW3_wide16Fa$D_IN =
	     MUX_ctop_app_appW3_wide16Fa$enq_1__SEL_1 ?
	       MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_1 :
	       MUX_ctop_app_appW3_wide16Fa$enq_1__VAL_2 ;
  assign ctop_app_appW3_wide16Fa$ENQ =
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_begin &&
	     (ctop_app_appW3_wrtSerPos == 2'd3 ||
	      ctop_app_appW3_metaWF$D_OUT[23:0] == 24'd0) ||
	     WILL_FIRE_RL_ctop_app_appW3_wrtSer_body &&
	     (ctop_app_appW3_wrtSerPos == 2'd3 ||
	      ctop_app_appW3_wrtSerUnroll == 16'd1) ;
  assign ctop_app_appW3_wide16Fa$DEQ =
	     CAN_FIRE_RL_ctop_app_appW3_delay_write_req ;
  assign ctop_app_appW3_wide16Fa$CLR = 1'b0 ;

  // submodule ctop_app_appW3_wide16Fb
  assign ctop_app_appW3_wide16Fb$D_IN =
	     ctop_app_appW3_wmemi_respF$D_OUT[127:0] ;
  assign ctop_app_appW3_wide16Fb$ENQ =
	     CAN_FIRE_RL_ctop_app_appW3_delay_read_resp ;
  assign ctop_app_appW3_wide16Fb$DEQ =
	     CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc ;
  assign ctop_app_appW3_wide16Fb$CLR = 1'b0 ;

  // submodule ctop_app_appW3_wide16Fc
  assign ctop_app_appW3_wide16Fc$D_IN = ctop_app_appW3_wide16Fb$D_OUT ;
  assign ctop_app_appW3_wide16Fc$ENQ =
	     CAN_FIRE_RL_ctop_app_appW3_delay_Fb2Fc ;
  assign ctop_app_appW3_wide16Fc$DEQ =
	     MUX_ctop_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (ctop_app_appW3_rdSerEmpty || ctop_app_appW3_rdSerPos == 2'd0) ;
  assign ctop_app_appW3_wide16Fc$CLR = 1'b0 ;

  // submodule ctop_app_appW3_wmemi_respF
  assign ctop_app_appW3_wmemi_respF$D_IN =
	     ctop_app_appW3_wmemi_wmemiResponse$wget ;
  assign ctop_app_appW3_wmemi_respF$ENQ =
	     WILL_FIRE_RL_ctop_app_appW3_wmemi_respAdvance &&
	     ctop_app_appW3_wmemi_respF$FULL_N ;
  assign ctop_app_appW3_wmemi_respF$DEQ =
	     CAN_FIRE_RL_ctop_app_appW3_delay_read_resp ;
  assign ctop_app_appW3_wmemi_respF$CLR = 1'b0 ;

  // submodule ctop_app_appW3_wsiS_reqFifo
  assign ctop_app_appW3_wsiS_reqFifo$D_IN = ctop_app_appW3_wsiS_wsiReq$wget ;
  assign ctop_app_appW3_wsiS_reqFifo$ENQ =
	     MUX_ctop_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign ctop_app_appW3_wsiS_reqFifo$DEQ =
	     ctop_app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign ctop_app_appW3_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule ctop_app_appW4_respF_memory
  assign ctop_app_appW4_respF_memory$ADDRA =
	     ctop_app_appW4_respF_rWrPtr[10:0] ;
  assign ctop_app_appW4_respF_memory$ADDRB =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgResptoWsi ?
	       x__h230749[10:0] :
	       ctop_app_appW4_respF_rRdPtr[10:0] ;
  assign ctop_app_appW4_respF_memory$DIA =
	     { IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7406,
	       ctop_app_appW4_respF_pwEnqueue$whas &&
	       ctop_app_appW4_respF_wDataIn$wget[57],
	       ctop_app_appW4_respF_pwEnqueue$whas &&
	       ctop_app_appW4_respF_wDataIn$wget[56],
	       IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7408 } ;
  assign ctop_app_appW4_respF_memory$DIB =
	     61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign ctop_app_appW4_respF_memory$WEA =
	     ctop_app_appW4_respF_pwEnqueue$whas ;
  assign ctop_app_appW4_respF_memory$WEB = 1'd0 ;
  assign ctop_app_appW4_respF_memory$ENA = 1'd1 ;
  assign ctop_app_appW4_respF_memory$ENB = 1'd1 ;

  // submodule ctop_app_appW4_wci_reqF
  assign ctop_app_appW4_wci_reqF$D_IN = ctop_app_appW4_wci_wciReq$wget ;
  assign ctop_app_appW4_wci_reqF$ENQ =
	     CAN_FIRE_RL_ctop_app_appW4_wci_reqF_enq ;
  assign ctop_app_appW4_wci_reqF$DEQ = ctop_app_appW4_wci_reqF_r_deq$whas ;
  assign ctop_app_appW4_wci_reqF$CLR = 1'b0 ;

  // submodule ctop_app_appW4_wmi_respF
  assign ctop_app_appW4_wmi_respF$D_IN = ctop_inf_dp1_wmi_wmi_respF_q_0 ;
  assign ctop_app_appW4_wmi_respF$ENQ =
	     WILL_FIRE_RL_ctop_app_appW4_wmi_respAdvance &&
	     ctop_app_appW4_wmi_respF$FULL_N ;
  assign ctop_app_appW4_wmi_respF$DEQ =
	     CAN_FIRE_RL_ctop_app_appW4_wmrd_mesgBodyResponse ;
  assign ctop_app_appW4_wmi_respF$CLR = 1'b0 ;

  // submodule ctop_app_appW4_wsiS_reqFifo
  assign ctop_app_appW4_wsiS_reqFifo$D_IN = ctop_app_appW4_wsiS_wsiReq$wget ;
  assign ctop_app_appW4_wsiS_reqFifo$ENQ =
	     MUX_ctop_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign ctop_app_appW4_wsiS_reqFifo$DEQ =
	     ctop_app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign ctop_app_appW4_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule ctop_inf_cp
  assign ctop_inf_cp$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign ctop_inf_cp$server_request_put = ctop_inf_sm0$c0_request_get ;
  assign ctop_inf_cp$switch_x = 3'h0 ;
  assign ctop_inf_cp$wci_Vm_0_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop_inf_cp$wci_Vm_0_SFlag = 2'b0 ;
  assign ctop_inf_cp$wci_Vm_0_SResp = 2'd0 ;
  assign ctop_inf_cp$wci_Vm_10_SData = gbe0$wci_rx_resp[31:0] ;
  assign ctop_inf_cp$wci_Vm_10_SFlag = gbe0$wci_rx_SFlag ;
  assign ctop_inf_cp$wci_Vm_10_SResp = gbe0$wci_rx_resp[33:32] ;
  assign ctop_inf_cp$wci_Vm_11_SData = gbe0$wci_tx_resp[31:0] ;
  assign ctop_inf_cp$wci_Vm_11_SFlag = gbe0$wci_tx_SFlag ;
  assign ctop_inf_cp$wci_Vm_11_SResp = gbe0$wci_tx_resp[33:32] ;
  assign ctop_inf_cp$wci_Vm_12_SData = dram0$wci_s_resp[31:0] ;
  assign ctop_inf_cp$wci_Vm_12_SFlag = dram0$wci_s_SFlag ;
  assign ctop_inf_cp$wci_Vm_12_SResp = dram0$wci_s_resp[33:32] ;
  assign ctop_inf_cp$wci_Vm_13_SData = ctop_inf_dp0_wci_respF_q_0[31:0] ;
  assign ctop_inf_cp$wci_Vm_13_SFlag = { 1'd1, ctop_inf_dp0_wci_sFlagReg } ;
  assign ctop_inf_cp$wci_Vm_13_SResp = ctop_inf_dp0_wci_respF_q_0[33:32] ;
  assign ctop_inf_cp$wci_Vm_14_SData = ctop_inf_dp1_wci_respF_q_0[31:0] ;
  assign ctop_inf_cp$wci_Vm_14_SFlag = { 1'd1, ctop_inf_dp1_wci_sFlagReg } ;
  assign ctop_inf_cp$wci_Vm_14_SResp = ctop_inf_dp1_wci_respF_q_0[33:32] ;
  assign ctop_inf_cp$wci_Vm_1_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop_inf_cp$wci_Vm_1_SFlag = 2'b0 ;
  assign ctop_inf_cp$wci_Vm_1_SResp = 2'd0 ;
  assign ctop_inf_cp$wci_Vm_2_SData = ctop_app_appW2_wci_respF_q_0[31:0] ;
  assign ctop_inf_cp$wci_Vm_2_SFlag = { 1'd1, ctop_app_appW2_wci_sFlagReg } ;
  assign ctop_inf_cp$wci_Vm_2_SResp = ctop_app_appW2_wci_respF_q_0[33:32] ;
  assign ctop_inf_cp$wci_Vm_3_SData = ctop_app_appW3_wci_respF_q_0[31:0] ;
  assign ctop_inf_cp$wci_Vm_3_SFlag = { 1'd1, ctop_app_appW3_wci_sFlagReg } ;
  assign ctop_inf_cp$wci_Vm_3_SResp = ctop_app_appW3_wci_respF_q_0[33:32] ;
  assign ctop_inf_cp$wci_Vm_4_SData = ctop_app_appW4_wci_respF_q_0[31:0] ;
  assign ctop_inf_cp$wci_Vm_4_SFlag = { 1'd1, ctop_app_appW4_wci_sFlagReg } ;
  assign ctop_inf_cp$wci_Vm_4_SResp = ctop_app_appW4_wci_respF_q_0[33:32] ;
  assign ctop_inf_cp$wci_Vm_5_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop_inf_cp$wci_Vm_5_SFlag = 2'b0 ;
  assign ctop_inf_cp$wci_Vm_5_SResp = 2'd0 ;
  assign ctop_inf_cp$wci_Vm_6_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop_inf_cp$wci_Vm_6_SFlag = 2'b0 ;
  assign ctop_inf_cp$wci_Vm_6_SResp = 2'd0 ;
  assign ctop_inf_cp$wci_Vm_7_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop_inf_cp$wci_Vm_7_SFlag = 2'b0 ;
  assign ctop_inf_cp$wci_Vm_7_SResp = 2'd0 ;
  assign ctop_inf_cp$wci_Vm_8_SData = icap$wci_s_resp[31:0] ;
  assign ctop_inf_cp$wci_Vm_8_SFlag = icap$wci_s_SFlag ;
  assign ctop_inf_cp$wci_Vm_8_SResp = icap$wci_s_resp[33:32] ;
  assign ctop_inf_cp$wci_Vm_9_SData = flash0$wci_s_resp[31:0] ;
  assign ctop_inf_cp$wci_Vm_9_SFlag = flash0$wci_s_SFlag ;
  assign ctop_inf_cp$wci_Vm_9_SResp = flash0$wci_s_resp[33:32] ;
  assign ctop_inf_cp$EN_server_request_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest ;
  assign ctop_inf_cp$EN_server_response_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse ;
  assign ctop_inf_cp$wci_Vm_0_SThreadBusy = 1'd1 ;
  assign ctop_inf_cp$wci_Vm_1_SThreadBusy = 1'd1 ;
  assign ctop_inf_cp$wci_Vm_2_SThreadBusy = CAN_FIRE_RL_ctop_stbConnect_2 ;
  assign ctop_inf_cp$wci_Vm_3_SThreadBusy = CAN_FIRE_RL_ctop_stbConnect_3 ;
  assign ctop_inf_cp$wci_Vm_4_SThreadBusy = CAN_FIRE_RL_ctop_stbConnect_4 ;
  assign ctop_inf_cp$wci_Vm_5_SThreadBusy = 1'd1 ;
  assign ctop_inf_cp$wci_Vm_6_SThreadBusy = 1'd1 ;
  assign ctop_inf_cp$wci_Vm_7_SThreadBusy = 1'd1 ;
  assign ctop_inf_cp$wci_Vm_8_SThreadBusy = icap$wci_s_SThreadBusy ;
  assign ctop_inf_cp$wci_Vm_9_SThreadBusy = flash0$wci_s_SThreadBusy ;
  assign ctop_inf_cp$wci_Vm_10_SThreadBusy = gbe0$wci_rx_SThreadBusy ;
  assign ctop_inf_cp$wci_Vm_11_SThreadBusy = gbe0$wci_tx_SThreadBusy ;
  assign ctop_inf_cp$wci_Vm_12_SThreadBusy = dram0$wci_s_SThreadBusy ;
  assign ctop_inf_cp$wci_Vm_13_SThreadBusy = CAN_FIRE_RL_ctop_inf_stbConnect ;
  assign ctop_inf_cp$wci_Vm_14_SThreadBusy =
	     CAN_FIRE_RL_ctop_inf_stbConnect_1 ;

  // submodule ctop_inf_dp0_bram_memory
  always@(MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_1 or
	  ctop_inf_dp0_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq or
	  MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory$a_put_2__VAL_4;
      default: ctop_inf_dp0_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  ctop_inf_dp0_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory$ADDRB = ctop_inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp0_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory$DIA =
	      MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory$DIA =
	      MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_3;
      MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory$DIA = 32'd0;
      default: ctop_inf_dp0_bram_memory$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_2 or
	  ctop_inf_dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  x3__h75146 or
	  MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory$DIB = ctop_inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory$DIB = x3__h75146;
      MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata:
	  ctop_inf_dp0_bram_memory$DIB = 32'd0;
      default: ctop_inf_dp0_bram_memory$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_bram_memory$WEA =
	     !MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory$WEB =
	     !MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ;
  assign ctop_inf_dp0_bram_memory$ENA =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7429 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory$ENB =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp0_bram_memory_1
  always@(MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_1 or
	  ctop_inf_dp0_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq or
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_1$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_1$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory_1$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory_1$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory_1$a_put_2__VAL_4;
      default: ctop_inf_dp0_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  ctop_inf_dp0_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory_1$ADDRB =
	      ctop_inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_1$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_1$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp0_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_1$DIA =
	      MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory_1$DIA =
	      MUX_ctop_inf_dp0_bram_memory_1$a_put_3__VAL_3;
      MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory_1$DIA = 32'd0;
      default: ctop_inf_dp0_bram_memory_1$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_2 or
	  ctop_inf_dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  mesgMeta_opcode__h75186 or
	  MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_1$DIB =
	      ctop_inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory_1$DIB = mesgMeta_opcode__h75186;
      MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata:
	  ctop_inf_dp0_bram_memory_1$DIB = 32'd0;
      default: ctop_inf_dp0_bram_memory_1$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_bram_memory_1$WEA =
	     !MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory_1$WEB =
	     !MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ;
  assign ctop_inf_dp0_bram_memory_1$ENA =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7430 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory_1$ENB =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp0_bram_memory_2
  always@(MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_1 or
	  ctop_inf_dp0_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq or
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_2$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_2$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory_2$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory_2$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory_2$a_put_2__VAL_4;
      default: ctop_inf_dp0_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  ctop_inf_dp0_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory_2$ADDRB =
	      ctop_inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_2$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_2$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp0_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_2$DIA =
	      MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory_2$DIA =
	      MUX_ctop_inf_dp0_bram_memory_2$a_put_3__VAL_3;
      MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory_2$DIA = 32'd0;
      default: ctop_inf_dp0_bram_memory_2$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  ctop_inf_dp0_wmi_nowW$wget or
	  MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_2 or
	  ctop_inf_dp0_wmi_wmi_dhF$D_OUT or
	  MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory_2$DIB = ctop_inf_dp0_wmi_nowW$wget[63:32];
      MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_2$DIB =
	      ctop_inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata:
	  ctop_inf_dp0_bram_memory_2$DIB = 32'd0;
      default: ctop_inf_dp0_bram_memory_2$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_bram_memory_2$WEA =
	     !MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory_2$WEB =
	     !MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ;
  assign ctop_inf_dp0_bram_memory_2$ENA =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7474 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory_2$ENB =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp0_bram_memory_3
  always@(MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_1 or
	  ctop_inf_dp0_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq or
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_3$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_3$ADDRA =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory_3$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory_3$ADDRA =
	      MUX_ctop_inf_dp0_bram_memory_3$a_put_2__VAL_4;
      default: ctop_inf_dp0_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  ctop_inf_dp0_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory_3$ADDRB =
	      ctop_inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_3$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_3$ADDRB =
	      MUX_ctop_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp0_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_1:
	  ctop_inf_dp0_bram_memory_3$DIA =
	      MUX_ctop_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_3:
	  ctop_inf_dp0_bram_memory_3$DIA =
	      MUX_ctop_inf_dp0_bram_memory_3$a_put_3__VAL_3;
      MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq:
	  ctop_inf_dp0_bram_memory_3$DIA = 32'd0;
      default: ctop_inf_dp0_bram_memory_3$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize or
	  ctop_inf_dp0_wmi_nowW$wget or
	  MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_2 or
	  ctop_inf_dp0_wmi_wmi_dhF$D_OUT or
	  MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize:
	  ctop_inf_dp0_bram_memory_3$DIB = ctop_inf_dp0_wmi_nowW$wget[31:0];
      MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_2:
	  ctop_inf_dp0_bram_memory_3$DIB =
	      ctop_inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata:
	  ctop_inf_dp0_bram_memory_3$DIB = 32'd0;
      default: ctop_inf_dp0_bram_memory_3$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_bram_memory_3$WEA =
	     !MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory_3$WEB =
	     !MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ;
  assign ctop_inf_dp0_bram_memory_3$ENA =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData &&
	     IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7431 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq ;
  assign ctop_inf_dp0_bram_memory_3$ENB =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doReadReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq &&
	     ctop_inf_dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp0_bram_serverAdapterA_1_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory_1$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_bram_serverAdapterA_2_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory_2$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_bram_serverAdapterA_3_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory_3$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_bram_serverAdapterA_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterA_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory$DOA ;
  assign ctop_inf_dp0_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_bram_serverAdapterB_1_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory_1$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_bram_serverAdapterB_2_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory_2$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_bram_serverAdapterB_3_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory_3$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_bram_serverAdapterB_outDataCore
  assign ctop_inf_dp0_bram_serverAdapterB_outDataCore$D_IN =
	     ctop_inf_dp0_bram_memory$DOB ;
  assign ctop_inf_dp0_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_outData_deqOnly ;
  assign ctop_inf_dp0_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_tlp_inF
  assign ctop_inf_dp0_tlp_inF$D_IN = ctop_inf_sm1$c0_request_get ;
  assign ctop_inf_dp0_tlp_inF$ENQ =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_2 ;
  assign ctop_inf_dp0_tlp_inF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ;
  assign ctop_inf_dp0_tlp_inF$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_tlp_mReqF
  always@(MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_1 or
	  MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta or
	  MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg or
	  MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta or
	  MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_5 or
	  MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_6 or
	  MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_1:
	  ctop_inf_dp0_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta:
	  ctop_inf_dp0_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg:
	  ctop_inf_dp0_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta:
	  ctop_inf_dp0_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader:
	  ctop_inf_dp0_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_5;
      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__SEL_6:
	  ctop_inf_dp0_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp0_tlp_mReqF$enq_1__VAL_6;
      default: ctop_inf_dp0_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_tlpRcv &&
	     ctop_inf_dp0_tlp_inF_first__68_BIT_152_115_AND_ETC___d1140 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta ;
  assign ctop_inf_dp0_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq &&
	     ctop_inf_dp0_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq &&
	     ctop_inf_dp0_tlp_readRemainDWLen_386_ULE_4___d1387 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeData ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_writeReq ;
  assign ctop_inf_dp0_tlp_mReqF$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_tlp_mRespF
  assign ctop_inf_dp0_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp ?
	       MUX_ctop_inf_dp0_tlp_mRespF$enq_1__VAL_1 :
	       MUX_ctop_inf_dp0_tlp_mRespF$enq_1__VAL_2 ;
  assign ctop_inf_dp0_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp ;
  assign ctop_inf_dp0_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead ;
  assign ctop_inf_dp0_tlp_mRespF$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_tlp_outF
  always@(WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_6 or
	  MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_7 or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__SEL_8 or
	  MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_6;
      MUX_ctop_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_7;
      MUX_ctop_inf_dp0_tlp_outF$enq_1__SEL_8:
	  ctop_inf_dp0_tlp_outF$D_IN = MUX_ctop_inf_dp0_tlp_outF$enq_1__VAL_8;
      default: ctop_inf_dp0_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp0_tlp_outF$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent ;
  assign ctop_inf_dp0_tlp_outF$DEQ =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_2 ;
  assign ctop_inf_dp0_tlp_outF$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_tlp_readReq
  assign ctop_inf_dp0_tlp_readReq$D_IN = ctop_inf_dp0_tlp_mReqF$D_OUT[59:0] ;
  assign ctop_inf_dp0_tlp_readReq$ENQ =
	     CAN_FIRE_RL_ctop_inf_dp0_tlp_read_FirstReq ;
  assign ctop_inf_dp0_tlp_readReq$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextResp &&
	     ctop_inf_dp0_tlp_rdRespDwRemain_530_ULE_4___d1531 ||
	     WILL_FIRE_RL_ctop_inf_dp0_tlp_read_FirstResp &&
	     ctop_inf_dp0_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign ctop_inf_dp0_tlp_readReq$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_wci_reqF
  assign ctop_inf_dp0_wci_reqF$D_IN = ctop_inf_dp0_wci_wciReq$wget ;
  assign ctop_inf_dp0_wci_reqF$ENQ = CAN_FIRE_RL_ctop_inf_dp0_wci_reqF_enq ;
  assign ctop_inf_dp0_wci_reqF$DEQ = ctop_inf_dp0_wci_reqF_r_deq$whas ;
  assign ctop_inf_dp0_wci_reqF$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_wmi_wmi_dhF
  assign ctop_inf_dp0_wmi_wmi_dhF$D_IN = ctop_inf_dp0_wmi_wmi_wmiDh$wget ;
  assign ctop_inf_dp0_wmi_wmi_dhF$ENQ =
	     MUX_ctop_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_dhF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteReq ;
  assign ctop_inf_dp0_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_wmi_wmi_mFlagF
  assign ctop_inf_dp0_wmi_wmi_mFlagF$D_IN =
	     ctop_inf_dp0_wmi_wmi_wmiMFlag$wget ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF$ENQ =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF$DEQ =
	     MUX_ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule ctop_inf_dp0_wmi_wmi_reqF
  assign ctop_inf_dp0_wmi_wmi_reqF$D_IN = ctop_inf_dp0_wmi_wmi_wmiReq$wget ;
  assign ctop_inf_dp0_wmi_wmi_reqF$ENQ =
	     MUX_ctop_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp0_wmi_wmi_reqF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp0_wmi_getRequest ;
  assign ctop_inf_dp0_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_memory
  always@(MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_1 or
	  ctop_inf_dp1_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq or
	  MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory$a_put_2__VAL_4;
      default: ctop_inf_dp1_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  ctop_inf_dp1_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory$ADDRB = ctop_inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp1_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory$DIA =
	      MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory$DIA =
	      MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_3;
      MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory$DIA = 32'd0;
      default: ctop_inf_dp1_bram_memory$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_2 or
	  ctop_inf_dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  x3__h154207 or
	  MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory$DIB = ctop_inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory$DIB = x3__h154207;
      MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata:
	  ctop_inf_dp1_bram_memory$DIB = 32'd0;
      default: ctop_inf_dp1_bram_memory$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_bram_memory$WEA =
	     !MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory$WEB =
	     !MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ;
  assign ctop_inf_dp1_bram_memory$ENA =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7457 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory$ENB =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp1_bram_memory_1
  always@(MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_1 or
	  ctop_inf_dp1_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq or
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_1$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_1$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory_1$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory_1$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory_1$a_put_2__VAL_4;
      default: ctop_inf_dp1_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  ctop_inf_dp1_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory_1$ADDRB =
	      ctop_inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_1$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_1$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp1_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_1$DIA =
	      MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory_1$DIA =
	      MUX_ctop_inf_dp1_bram_memory_1$a_put_3__VAL_3;
      MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory_1$DIA = 32'd0;
      default: ctop_inf_dp1_bram_memory_1$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_2 or
	  ctop_inf_dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  mesgMeta_opcode__h154247 or
	  MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_1$DIB =
	      ctop_inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory_1$DIB = mesgMeta_opcode__h154247;
      MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata:
	  ctop_inf_dp1_bram_memory_1$DIB = 32'd0;
      default: ctop_inf_dp1_bram_memory_1$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_bram_memory_1$WEA =
	     !MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory_1$WEB =
	     !MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ;
  assign ctop_inf_dp1_bram_memory_1$ENA =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7458 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory_1$ENB =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp1_bram_memory_2
  always@(MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_1 or
	  ctop_inf_dp1_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq or
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_2$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_2$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory_2$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory_2$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory_2$a_put_2__VAL_4;
      default: ctop_inf_dp1_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  ctop_inf_dp1_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory_2$ADDRB =
	      ctop_inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_2$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_2$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp1_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_2$DIA =
	      MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory_2$DIA =
	      MUX_ctop_inf_dp1_bram_memory_2$a_put_3__VAL_3;
      MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory_2$DIA = 32'd0;
      default: ctop_inf_dp1_bram_memory_2$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  ctop_inf_dp1_wmi_nowW$wget or
	  MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_2 or
	  ctop_inf_dp1_wmi_wmi_dhF$D_OUT or
	  MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory_2$DIB = ctop_inf_dp1_wmi_nowW$wget[63:32];
      MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_2$DIB =
	      ctop_inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata:
	  ctop_inf_dp1_bram_memory_2$DIB = 32'd0;
      default: ctop_inf_dp1_bram_memory_2$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_bram_memory_2$WEA =
	     !MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory_2$WEB =
	     !MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ;
  assign ctop_inf_dp1_bram_memory_2$ENA =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7459 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory_2$ENB =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp1_bram_memory_3
  always@(MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_1 or
	  ctop_inf_dp1_tlp_mReqF$D_OUT or
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2 or
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq or
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_3$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_3$ADDRA =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory_3$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory_3$ADDRA =
	      MUX_ctop_inf_dp1_bram_memory_3$a_put_2__VAL_4;
      default: ctop_inf_dp1_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  ctop_inf_dp1_wmi_lclMetaAddr or
	  MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory_3$ADDRB =
	      ctop_inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_3$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_3$ADDRB =
	      MUX_ctop_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: ctop_inf_dp1_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_1 or
	  MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_3__VAL_3 or
	  MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_1:
	  ctop_inf_dp1_bram_memory_3$DIA =
	      MUX_ctop_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_3:
	  ctop_inf_dp1_bram_memory_3$DIA =
	      MUX_ctop_inf_dp1_bram_memory_3$a_put_3__VAL_3;
      MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq:
	  ctop_inf_dp1_bram_memory_3$DIA = 32'd0;
      default: ctop_inf_dp1_bram_memory_3$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize or
	  ctop_inf_dp1_wmi_nowW$wget or
	  MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_2 or
	  ctop_inf_dp1_wmi_wmi_dhF$D_OUT or
	  MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize:
	  ctop_inf_dp1_bram_memory_3$DIB = ctop_inf_dp1_wmi_nowW$wget[31:0];
      MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_2:
	  ctop_inf_dp1_bram_memory_3$DIB =
	      ctop_inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata:
	  ctop_inf_dp1_bram_memory_3$DIB = 32'd0;
      default: ctop_inf_dp1_bram_memory_3$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_bram_memory_3$WEA =
	     !MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory_3$WEB =
	     !MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ;
  assign ctop_inf_dp1_bram_memory_3$ENA =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData &&
	     IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7460 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq ;
  assign ctop_inf_dp1_bram_memory_3$ENB =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doReadReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq &&
	     ctop_inf_dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize ;

  // submodule ctop_inf_dp1_bram_serverAdapterA_1_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory_1$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_serverAdapterA_2_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory_2$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_serverAdapterA_3_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory_3$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_serverAdapterA_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterA_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory$DOA ;
  assign ctop_inf_dp1_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_serverAdapterB_1_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory_1$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_serverAdapterB_2_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory_2$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_serverAdapterB_3_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory_3$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_bram_serverAdapterB_outDataCore
  assign ctop_inf_dp1_bram_serverAdapterB_outDataCore$D_IN =
	     ctop_inf_dp1_bram_memory$DOB ;
  assign ctop_inf_dp1_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_outData_deqOnly ;
  assign ctop_inf_dp1_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_tlp_inF
  assign ctop_inf_dp1_tlp_inF$D_IN = ctop_inf_sm2$c0_request_get ;
  assign ctop_inf_dp1_tlp_inF$ENQ =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_4 ;
  assign ctop_inf_dp1_tlp_inF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ;
  assign ctop_inf_dp1_tlp_inF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_tlp_mReqF
  always@(MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_1 or
	  MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta or
	  MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg or
	  MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta or
	  MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_5 or
	  MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_6 or
	  MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_1:
	  ctop_inf_dp1_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta:
	  ctop_inf_dp1_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg:
	  ctop_inf_dp1_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta:
	  ctop_inf_dp1_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader:
	  ctop_inf_dp1_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_5;
      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__SEL_6:
	  ctop_inf_dp1_tlp_mReqF$D_IN =
	      MUX_ctop_inf_dp1_tlp_mReqF$enq_1__VAL_6;
      default: ctop_inf_dp1_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_tlpRcv &&
	     ctop_inf_dp1_tlp_inF_first__156_BIT_152_301_AN_ETC___d3326 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta ;
  assign ctop_inf_dp1_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq &&
	     ctop_inf_dp1_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq &&
	     ctop_inf_dp1_tlp_readRemainDWLen_572_ULE_4___d3573 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeData ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_writeReq ;
  assign ctop_inf_dp1_tlp_mReqF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_tlp_mRespF
  assign ctop_inf_dp1_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp ?
	       MUX_ctop_inf_dp1_tlp_mRespF$enq_1__VAL_1 :
	       MUX_ctop_inf_dp1_tlp_mRespF$enq_1__VAL_2 ;
  assign ctop_inf_dp1_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp ;
  assign ctop_inf_dp1_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead ;
  assign ctop_inf_dp1_tlp_mRespF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_tlp_outF
  always@(WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_6 or
	  MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_7 or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__SEL_8 or
	  MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_6;
      MUX_ctop_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_7;
      MUX_ctop_inf_dp1_tlp_outF$enq_1__SEL_8:
	  ctop_inf_dp1_tlp_outF$D_IN = MUX_ctop_inf_dp1_tlp_outF$enq_1__VAL_8;
      default: ctop_inf_dp1_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ctop_inf_dp1_tlp_outF$ENQ =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent ;
  assign ctop_inf_dp1_tlp_outF$DEQ =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_4 ;
  assign ctop_inf_dp1_tlp_outF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_tlp_readReq
  assign ctop_inf_dp1_tlp_readReq$D_IN = ctop_inf_dp1_tlp_mReqF$D_OUT[59:0] ;
  assign ctop_inf_dp1_tlp_readReq$ENQ =
	     CAN_FIRE_RL_ctop_inf_dp1_tlp_read_FirstReq ;
  assign ctop_inf_dp1_tlp_readReq$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextResp &&
	     ctop_inf_dp1_tlp_rdRespDwRemain_716_ULE_4___d3717 ||
	     WILL_FIRE_RL_ctop_inf_dp1_tlp_read_FirstResp &&
	     ctop_inf_dp1_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign ctop_inf_dp1_tlp_readReq$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_wci_reqF
  assign ctop_inf_dp1_wci_reqF$D_IN = ctop_inf_dp1_wci_wciReq$wget ;
  assign ctop_inf_dp1_wci_reqF$ENQ = CAN_FIRE_RL_ctop_inf_dp1_wci_reqF_enq ;
  assign ctop_inf_dp1_wci_reqF$DEQ = ctop_inf_dp1_wci_reqF_r_deq$whas ;
  assign ctop_inf_dp1_wci_reqF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_wmi_wmi_dhF
  assign ctop_inf_dp1_wmi_wmi_dhF$D_IN = ctop_inf_dp1_wmi_wmi_wmiDh$wget ;
  assign ctop_inf_dp1_wmi_wmi_dhF$ENQ =
	     MUX_ctop_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_dhF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteReq ;
  assign ctop_inf_dp1_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_wmi_wmi_mFlagF
  assign ctop_inf_dp1_wmi_wmi_mFlagF$D_IN =
	     ctop_inf_dp1_wmi_wmi_wmiMFlag$wget ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF$ENQ =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF$DEQ =
	     MUX_ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule ctop_inf_dp1_wmi_wmi_reqF
  assign ctop_inf_dp1_wmi_wmi_reqF$D_IN = ctop_inf_dp1_wmi_wmi_wmiReq$wget ;
  assign ctop_inf_dp1_wmi_wmi_reqF$ENQ =
	     MUX_ctop_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign ctop_inf_dp1_wmi_wmi_reqF$DEQ =
	     WILL_FIRE_RL_ctop_inf_dp1_wmi_getRequest ;
  assign ctop_inf_dp1_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule ctop_inf_itc0_now
  assign ctop_inf_itc0_now$sD_IN = ctop_inf_cp$cpNow ;
  assign ctop_inf_itc0_now$sEN = ctop_inf_itc0_now$sRDY ;

  // submodule ctop_inf_itc1_now
  assign ctop_inf_itc1_now$sD_IN = ctop_inf_cp$cpNow ;
  assign ctop_inf_itc1_now$sEN = ctop_inf_itc1_now$sRDY ;

  // submodule ctop_inf_sm0
  assign ctop_inf_sm0$c0_response_put = ctop_inf_cp$server_response_get ;
  assign ctop_inf_sm0$c1_response_put = ctop_inf_sm1$s_response_get ;
  assign ctop_inf_sm0$s_request_put = p2iS ;
  assign ctop_inf_sm0$EN_s_request_put =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;
  assign ctop_inf_sm0$EN_s_response_get =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;
  assign ctop_inf_sm0$EN_c0_request_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest ;
  assign ctop_inf_sm0$EN_c0_response_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse ;
  assign ctop_inf_sm0$EN_c1_request_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_1 ;
  assign ctop_inf_sm0$EN_c1_response_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_1 ;

  // submodule ctop_inf_sm1
  assign ctop_inf_sm1$c0_response_put = ctop_inf_dp0_tlp_outF$D_OUT ;
  assign ctop_inf_sm1$c1_response_put = ctop_inf_sm2$s_response_get ;
  assign ctop_inf_sm1$s_request_put = ctop_inf_sm0$c1_request_get ;
  assign ctop_inf_sm1$EN_s_request_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_1 ;
  assign ctop_inf_sm1$EN_s_response_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_1 ;
  assign ctop_inf_sm1$EN_c0_request_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_2 ;
  assign ctop_inf_sm1$EN_c0_response_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_2 ;
  assign ctop_inf_sm1$EN_c1_request_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_3 ;
  assign ctop_inf_sm1$EN_c1_response_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_3 ;

  // submodule ctop_inf_sm2
  assign ctop_inf_sm2$c0_response_put = ctop_inf_dp1_tlp_outF$D_OUT ;
  assign ctop_inf_sm2$c1_response_put = 153'h0 ;
  assign ctop_inf_sm2$s_request_put = ctop_inf_sm1$c1_request_get ;
  assign ctop_inf_sm2$EN_s_request_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_3 ;
  assign ctop_inf_sm2$EN_s_response_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_3 ;
  assign ctop_inf_sm2$EN_c0_request_get =
	     CAN_FIRE_RL_ctop_inf_ClientServerRequest_4 ;
  assign ctop_inf_sm2$EN_c0_response_put =
	     CAN_FIRE_RL_ctop_inf_ClientServerResponse_4 ;
  assign ctop_inf_sm2$EN_c1_request_get = ctop_inf_sm2$RDY_c1_request_get ;
  assign ctop_inf_sm2$EN_c1_response_put = 1'b0 ;

  // submodule dram0
  assign dram0$wci_s_MFlag = ctop_inf_cp$wci_Vm_12_MFlag ;
  assign dram0$wci_s_req =
	     { ctop_inf_cp$wci_Vm_12_MCmd,
	       ctop_inf_cp$wci_Vm_12_MAddrSpace,
	       ctop_inf_cp$wci_Vm_12_MByteEn,
	       ctop_inf_cp$wci_Vm_12_MAddr,
	       ctop_inf_cp$wci_Vm_12_MData } ;
  assign dram0$wmemiS_MAddr = ctop_app_appW3_wmemi_reqF_q_0[47:12] ;
  assign dram0$wmemiS_MBurstLength = ctop_app_appW3_wmemi_reqF_q_0[11:0] ;
  assign dram0$wmemiS_MCmd = ctop_app_appW3_wmemi_reqF_q_0[51:49] ;
  assign dram0$wmemiS_MData = ctop_app_appW3_wmemi_dhF_q_0[143:16] ;
  assign dram0$wmemiS_MDataByteEn = ctop_app_appW3_wmemi_dhF_q_0[15:0] ;
  assign dram0$wmemiS_MReqLast = CAN_FIRE_RL_mReqLConnect ;
  assign dram0$wmemiS_MDataValid = CAN_FIRE_RL_mDataVConnect ;
  assign dram0$wmemiS_MDataLast = CAN_FIRE_RL_mDataLConnect ;
  assign dram0$wmemiS_MReset_n = CAN_FIRE_RL_mRstConnect ;

  // submodule fI2P
  assign fI2P$D_IN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ?
	       MUX_fI2P$enq_1__VAL_1 :
	       Prelude_inst_changeSpecialWires_4_rg[80:0] ;
  assign fI2P$ENQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 ;
  assign fI2P$DEQ = CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;
  assign fI2P$CLR = 1'b0 ;

  // submodule fP2I
  assign fP2I$D_IN =
	     { !pci0_pcie_ep$trn_rsof_n,
	       !pci0_pcie_ep$trn_reof_n,
	       ~pci0_pcie_ep$trn_rbar_hit_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       pci0_pcie_ep$trn_rd } ;
  assign fP2I$ENQ = CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign fP2I$DEQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;
  assign fP2I$CLR = 1'b0 ;

  // submodule flash0
  assign flash0$flash_fwait_i = flash_fwait_i ;
  assign flash0$wci_s_MFlag = ctop_inf_cp$wci_Vm_9_MFlag ;
  assign flash0$wci_s_req =
	     { ctop_inf_cp$wci_Vm_9_MCmd,
	       ctop_inf_cp$wci_Vm_9_MAddrSpace,
	       ctop_inf_cp$wci_Vm_9_MByteEn,
	       ctop_inf_cp$wci_Vm_9_MAddr,
	       ctop_inf_cp$wci_Vm_9_MData } ;

  // submodule gbe0
  assign gbe0$gmii_rx_dv_i = gmii_rx_dv_i ;
  assign gbe0$gmii_rx_er_i = gmii_rx_er_i ;
  assign gbe0$gmii_rxd_i = gmii_rxd_i ;
  assign gbe0$wci_rx_MFlag = ctop_inf_cp$wci_Vm_10_MFlag ;
  assign gbe0$wci_rx_req =
	     { ctop_inf_cp$wci_Vm_10_MCmd,
	       ctop_inf_cp$wci_Vm_10_MAddrSpace,
	       ctop_inf_cp$wci_Vm_10_MByteEn,
	       ctop_inf_cp$wci_Vm_10_MAddr,
	       ctop_inf_cp$wci_Vm_10_MData } ;
  assign gbe0$wci_tx_MFlag = ctop_inf_cp$wci_Vm_11_MFlag ;
  assign gbe0$wci_tx_req =
	     { ctop_inf_cp$wci_Vm_11_MCmd,
	       ctop_inf_cp$wci_Vm_11_MAddrSpace,
	       ctop_inf_cp$wci_Vm_11_MByteEn,
	       ctop_inf_cp$wci_Vm_11_MAddr,
	       ctop_inf_cp$wci_Vm_11_MData } ;
  assign gbe0$wsiS1_MBurstLength = 12'h0 ;
  assign gbe0$wsiS1_MByteEn = 4'h0 ;
  assign gbe0$wsiS1_MCmd = 3'h0 ;
  assign gbe0$wsiS1_MData = 32'h0 ;
  assign gbe0$wsiS1_MReqInfo = 8'h0 ;
  assign gbe0$wti_s_req =
	     tcGbe0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       tcGbe0_wti_nowReq ;
  assign gbe0$wsiM1_SThreadBusy = 1'b0 ;
  assign gbe0$wsiM1_SReset_n = 1'b0 ;
  assign gbe0$wsiS1_MReqLast = 1'b0 ;
  assign gbe0$wsiS1_MBurstPrecise = 1'b0 ;
  assign gbe0$wsiS1_MReset_n = 1'b0 ;

  // submodule icap
  assign icap$wci_s_MFlag = ctop_inf_cp$wci_Vm_8_MFlag ;
  assign icap$wci_s_req =
	     { ctop_inf_cp$wci_Vm_8_MCmd,
	       ctop_inf_cp$wci_Vm_8_MAddrSpace,
	       ctop_inf_cp$wci_Vm_8_MByteEn,
	       ctop_inf_cp$wci_Vm_8_MAddr,
	       ctop_inf_cp$wci_Vm_8_MData } ;

  // submodule infLed
  assign infLed$WVAL = ctop_inf_cp$led ;

  // submodule pci0_pcie_ep
  assign pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_di = pcie_irq_rInterruptDi ;
  assign pci0_pcie_ep$cfg_interrupt_n = pcie_irq_rInterruptN ;
  assign pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_turnoff_ok_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pci0_pcie_ep$pl_directed_link_auton = 1'b0 ;
  assign pci0_pcie_ep$pl_directed_link_change = 2'h0 ;
  assign pci0_pcie_ep$pl_directed_link_speed = 1'b0 ;
  assign pci0_pcie_ep$pl_directed_link_width = 2'h0 ;
  assign pci0_pcie_ep$pl_upstream_prefer_deemph = 1'b0 ;
  assign pci0_pcie_ep$trn_fc_sel = 3'h0 ;
  assign pci0_pcie_ep$trn_rdst_rdy_n =
	     !CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign pci0_pcie_ep$trn_rnp_ok_n = 1'd0 ;
  assign pci0_pcie_ep$trn_tcfg_gnt_n = 1'd0 ;
  assign pci0_pcie_ep$trn_td = fI2P$D_OUT[63:0] ;
  assign pci0_pcie_ep$trn_teof_n = !fI2P$D_OUT[79] ;
  assign pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pci0_pcie_ep$trn_trem_n = fI2P$D_OUT[71:64] != 8'd255 ;
  assign pci0_pcie_ep$trn_tsof_n = !fI2P$D_OUT[80] ;
  assign pci0_pcie_ep$trn_tsrc_dsc_n = 1'd1 ;
  assign pci0_pcie_ep$trn_tsrc_rdy_n =
	     !CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;
  assign pci0_pcie_ep$trn_tstr_n = 1'd1 ;

  // submodule pciDevice
  assign pciDevice$sD_IN =
	     { pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_device_number,
	       pci0_pcie_ep$cfg_function_number } ;
  assign pciDevice$sEN = pciDevice$sRDY ;

  // submodule pcie_irq_fifoAssert
  assign pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pcie_irq_fifoAssert$sENQ = 1'b0 ;
  assign pcie_irq_fifoAssert$dDEQ =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // submodule tcGbe0_now
  assign tcGbe0_now$sD_IN = ctop_inf_cp$cpNow ;
  assign tcGbe0_now$sEN = tcGbe0_now$sRDY ;

  // remaining internal signals
  assign IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1262 =
	     (IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1239 ||
	      ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263) &&
	     (IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1249 ||
	      ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264) &&
	     (IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1259 ||
	      ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265) ;
  assign IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3448 =
	     (IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3425 ||
	      ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267) &&
	     (IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3435 ||
	      ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534) &&
	     (IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3445 ||
	      ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268) ;
  assign IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7402 =
	     ctop_app_appW2_respF_pwEnqueue$whas ?
	       ctop_app_appW2_respF_wDataIn$wget[60:58] :
	       3'd0 ;
  assign IF_ctop_app_appW2_respF_wDataIn_whas__972_THEN_ETC___d7405 =
	     ctop_app_appW2_respF_pwEnqueue$whas ?
	       ctop_app_appW2_respF_wDataIn$wget[55:0] :
	       56'd0 ;
  assign IF_ctop_app_appW3_wrtSerPos_797_EQ_0_805_OR_ct_ETC___d5850 =
	     CASE_ctop_app_appW3_wrtSerPos_0b1_0_1_1_1_2_1__ETC__q2 &&
	     (ctop_app_appW3_wrtSerPos != 2'd3 &&
	      ctop_app_appW3_wrtSerUnroll != 16'd1 ||
	      CASE_ctop_app_appW3_wrtSerPos_NOT_ctop_app_app_ETC__q1) ;
  assign IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5835 =
	     { (ctop_app_appW3_wrtSerPos == 2'd2) ?
		 32'h0 :
		 ctop_app_appW3_metaWF$D_OUT,
	       (ctop_app_appW3_wrtSerPos == 2'd2) ?
		 ctop_app_appW3_metaWF$D_OUT :
		 ctop_app_appW3_wrtSerStage_2,
	       ctop_app_appW3_wrtSerStage_1,
	       ctop_app_appW3_wrtSerStage } ;
  assign IF_ctop_app_appW3_wrtSerPos_797_EQ_2_807_THEN__ETC___d5864 =
	     { (ctop_app_appW3_wrtSerPos == 2'd2) ? 32'h0 : data__h209151,
	       (ctop_app_appW3_wrtSerPos == 2'd2) ?
		 data__h209151 :
		 ctop_app_appW3_wrtSerStage_2,
	       ctop_app_appW3_wrtSerStage_1,
	       ctop_app_appW3_wrtSerStage } ;
  assign IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7406 =
	     ctop_app_appW4_respF_pwEnqueue$whas ?
	       ctop_app_appW4_respF_wDataIn$wget[60:58] :
	       3'd0 ;
  assign IF_ctop_app_appW4_respF_wDataIn_whas__604_THEN_ETC___d7408 =
	     ctop_app_appW4_respF_pwEnqueue$whas ?
	       ctop_app_appW4_respF_wDataIn$wget[55:0] :
	       56'd0 ;
  assign IF_ctop_inf_dp0_tlp_readNxtDWAddr_398_BIT_0_57_ETC___d1580 =
	     ctop_inf_dp0_tlp_readNxtDWAddr[0] ?
	       { ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_ctop_inf_dp0_tlp_readNxtDWAddr_398_BIT_0_57_ETC___d1585 =
	     ctop_inf_dp0_tlp_readNxtDWAddr[0] ?
	       { ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1469 =
	     (ctop_inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
		ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas) &&
	       ctop_inf_dp0_bram_serverAdapterA_outData_outData$whas :
	       IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1461 &&
	       CASE_ctop_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_ETC__q29 ;
  assign IF_ctop_inf_dp0_wmi_p4B_878_EQ_0_879_THEN_ctop_ETC___d1892 =
	     (ctop_inf_dp0_wmi_p4B == 2'd0) ?
	       (ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
		ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas) &&
	       ctop_inf_dp0_bram_serverAdapterB_outData_outData$whas :
	       IF_ctop_inf_dp0_wmi_p4B_878_EQ_1_881_THEN_ctop_ETC___d1887 &&
	       CASE_ctop_inf_dp0_wmi_p4B_NOT_ctop_inf_dp0_wmi_ETC__q30 ;
  assign IF_ctop_inf_dp1_tlp_readNxtDWAddr_584_BIT_0_76_ETC___d3766 =
	     ctop_inf_dp1_tlp_readNxtDWAddr[0] ?
	       { ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_ctop_inf_dp1_tlp_readNxtDWAddr_584_BIT_0_76_ETC___d3771 =
	     ctop_inf_dp1_tlp_readNxtDWAddr[0] ?
	       { ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3655 =
	     (ctop_inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
		ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas) &&
	       ctop_inf_dp1_bram_serverAdapterA_outData_outData$whas :
	       IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3647 &&
	       CASE_ctop_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_ETC__q31 ;
  assign IF_ctop_inf_dp1_wmi_p4B_064_EQ_0_065_THEN_ctop_ETC___d4078 =
	     (ctop_inf_dp1_wmi_p4B == 2'd0) ?
	       (ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
		ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas) &&
	       ctop_inf_dp1_bram_serverAdapterB_outData_outData$whas :
	       IF_ctop_inf_dp1_wmi_p4B_064_EQ_1_067_THEN_ctop_ETC___d4073 &&
	       CASE_ctop_inf_dp1_wmi_p4B_NOT_ctop_inf_dp1_wmi_ETC__q32 ;
  assign NOT_ctop_app_appW2_wmi_reqF_c_r_685_EQ_2_704_7_ETC___d5056 =
	     ctop_app_appW2_wmi_reqF_c_r != 2'd2 &&
	     ctop_app_appW2_wmi_operateD &&
	     ctop_app_appW2_wmi_peerIsReady &&
	     (!x__h185342 || ctop_app_appW2_wmi_mFlagF_c_r != 2'd2) ;
  assign NOT_ctop_app_appW3_mesgWF_rRdPtr_711_EQ_ctop_a_ETC___d5839 =
	     ctop_app_appW3_mesgWF_rRdPtr != ctop_app_appW3_mesgWF_rWrPtr ;
  assign NOT_ctop_app_appW3_mesgWF_rRdPtr_711_PLUS_2048_ETC___d5769 =
	     ctop_app_appW3_mesgWF_rRdPtr + 13'd2048 !=
	     ctop_app_appW3_mesgWF_rWrPtr ;
  assign NOT_ctop_app_appW3_wrtSerPos_797_EQ_3_798_799__ETC___d5813 =
	     ctop_app_appW3_wrtSerPos != 2'd3 &&
	     ctop_app_appW3_metaWF$D_OUT[23:0] != 24'd0 ||
	     CASE_ctop_app_appW3_wrtSerPos_NOT_ctop_app_app_ETC__q1 ;
  assign NOT_ctop_app_appW4_wmi_reqF_c_r_321_EQ_2_339_3_ETC___d6688 =
	     ctop_app_appW4_wmi_reqF_c_r != 2'd2 &&
	     ctop_app_appW4_wmi_operateD &&
	     ctop_app_appW4_wmi_peerIsReady &&
	     (!x__h232754 || ctop_app_appW4_wmi_mFlagF_c_r != 2'd2) ;
  assign NOT_ctop_inf_dp0_bml_lclBufDone_016_083_AND_IF_ETC___d2096 =
	     !ctop_inf_dp0_bml_lclBufDone &&
	     CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_ctop_i_ETC__q3 ;
  assign NOT_ctop_inf_dp0_tlp_mReqF_first__180_BITS_28__ETC___d1371 =
	     (ctop_inf_dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	      ctop_inf_dp0_tlp_mReqF$EMPTY_N) &&
	     CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q8 ;
  assign NOT_ctop_inf_dp0_wmi_wrActive_796_797_OR_NOT_c_ETC___d1806 =
	     (!ctop_inf_dp0_wmi_wrActive || !ctop_inf_dp0_wmi_rdActive) &&
	     !ctop_inf_dp0_wmi_wrFinalize &&
	     (ctop_inf_dp0_wmi_mesgBufReady || ctop_inf_dp0_wmi_mesgBusy) ;
  assign NOT_ctop_inf_dp1_bml_lclBufDone_202_269_AND_IF_ETC___d4282 =
	     !ctop_inf_dp1_bml_lclBufDone &&
	     CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_ctop_i_ETC__q4 ;
  assign NOT_ctop_inf_dp1_tlp_mReqF_first__366_BITS_28__ETC___d3557 =
	     (ctop_inf_dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	      ctop_inf_dp1_tlp_mReqF$EMPTY_N) &&
	     CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q10 ;
  assign NOT_ctop_inf_dp1_wmi_wrActive_982_983_OR_NOT_c_ETC___d3992 =
	     (!ctop_inf_dp1_wmi_wrActive || !ctop_inf_dp1_wmi_rdActive) &&
	     !ctop_inf_dp1_wmi_wrFinalize &&
	     (ctop_inf_dp1_wmi_mesgBufReady || ctop_inf_dp1_wmi_mesgBusy) ;
  assign _dfoo15 =
	     ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     ctop_inf_dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign _dfoo5 =
	     ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     ctop_inf_dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign ab__h10876 =
	     (MUX_ctop_inf_dp0_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h12273 =
	     (MUX_ctop_inf_dp0_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h13803 =
	     (MUX_ctop_inf_dp0_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h15200 =
	     (MUX_ctop_inf_dp0_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h16730 =
	     (MUX_ctop_inf_dp0_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h18127 =
	     (MUX_ctop_inf_dp0_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h7947 =
	     (MUX_ctop_inf_dp0_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h87043 =
	     (MUX_ctop_inf_dp1_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h88442 =
	     (MUX_ctop_inf_dp1_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h89972 =
	     (MUX_ctop_inf_dp1_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h91369 =
	     (MUX_ctop_inf_dp1_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h92899 =
	     (MUX_ctop_inf_dp1_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h9346 =
	     (MUX_ctop_inf_dp0_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h94296 =
	     (MUX_ctop_inf_dp1_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h95826 =
	     (MUX_ctop_inf_dp1_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_ctop_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h97223 =
	     (MUX_ctop_inf_dp1_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_ctop_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign addr__h187488 = { ctop_app_appW2_mesgLengthSoFar[11:0], 2'd0 } ;
  assign addr__h209860 = { 9'd0, x__h209918 } ;
  assign addr__h210210 = { 9'd0, x__h210255 } ;
  assign addr__h234900 = { ctop_app_appW4_mesgLengthSoFar[11:0], 2'd0 } ;
  assign b__h181983 = -ctop_app_appW2_fabWordsCurReq[11:0] ;
  assign b__h185171 =
	     { {2{ctop_app_appW2_fabRespCredit_value[11]}},
	       ctop_app_appW2_fabRespCredit_value } ;
  assign b__h229395 = -ctop_app_appW4_fabWordsCurReq[11:0] ;
  assign b__h232583 =
	     { {2{ctop_app_appW4_fabRespCredit_value[11]}},
	       ctop_app_appW4_fabRespCredit_value } ;
  assign bl__h186744 =
	     ctop_app_appW2_zeroLengthMesg ? 12'd1 : x__h186655[13:2] ;
  assign bl__h234156 =
	     ctop_app_appW4_zeroLengthMesg ? 12'd1 : x__h234067[13:2] ;
  assign btm__h208039 =
	     { ctop_app_appW3_wsiS_reqFifo$D_OUT[56] ?
		 { 10'd0, ctop_app_appW3_wsiS_reqFifo$D_OUT[55:44] } :
		 { 8'd0, ctop_app_appW3_mesgLengthSoFar_780_PLUS_1___d8258 },
	       2'd0 } ;
  assign byteCount__h138046 = x__h138157 - y__h138158 ;
  assign byteCount__h58985 = x__h59096 - y__h59097 ;
  assign ctop_app_appW2_wmi_operateD_771_AND_ctop_app_a_ETC___d5151 =
	     ctop_app_appW2_wmi_operateD && ctop_app_appW2_wmi_peerIsReady &&
	     ctop_app_appW2_wsiS_reqFifo$EMPTY_N &&
	     (ctop_app_appW2_smaCtrl[3:0] != 4'h3 ||
	      ctop_app_appW2_wsiM_reqFifo_c_r != 2'd2) ;
  assign ctop_app_appW2_wmi_respF_i_notEmpty__068_AND_c_ETC___d5073 =
	     ctop_app_appW2_wmi_respF$EMPTY_N &&
	     (ctop_app_appW2_smaCtrl[4] ||
	      ctop_app_appW2_respF_rRdPtr + 12'd1024 !=
	      ctop_app_appW2_respF_rWrPtr) ;
  assign ctop_app_appW2_wsiS_reqFifo_i_notEmpty__003_AN_ETC___d5170 =
	     ctop_app_appW2_wsiS_reqFifo$EMPTY_N &&
	     (ctop_app_appW2_smaCtrl[3:0] != 4'h3 ||
	      ctop_app_appW2_wsiM_reqFifo_c_r != 2'd2) &&
	     (!ctop_app_appW2_wsiS_reqFifo$D_OUT[57] ||
	      ctop_app_appW2_wmi_mFlagF_c_r != 2'd2) ;
  assign ctop_app_appW3_bytesWritten_793_ULT_ctop_app_a_ETC___d7367 =
	     ctop_app_appW3_bytesWritten < ctop_app_appW3_dlyHoldoffBytes ;
  assign ctop_app_appW3_cyclesPassed_763_ULT_ctop_app_a_ETC___d7389 =
	     ctop_app_appW3_cyclesPassed < ctop_app_appW3_dlyHoldoffCycles ;
  assign ctop_app_appW3_dlyWordsStored_value_724_SLE_0__ETC___d5879 =
	     ctop_app_appW3_dlyWordsStored_value_724_SLE_0___d7366 ||
	     ctop_app_appW3_bytesWritten_793_ULT_ctop_app_a_ETC___d7367 ||
	     ctop_app_appW3_cyclesPassed_763_ULT_ctop_app_a_ETC___d7389 ||
	     ctop_app_appW3_wsiM_reqFifo_c_r == 2'd2 ||
	     ctop_app_appW3_tog50 ;
  assign ctop_app_appW3_dlyWordsStored_value_724_SLE_0___d7366 =
	     (ctop_app_appW3_dlyWordsStored_value ^ 25'h1000000) <=
	     25'd16777216 ;
  assign ctop_app_appW3_dlyWordsStored_value_724_SLT_83_ETC___d5881 =
	     (ctop_app_appW3_dlyWordsStored_value ^ 25'h1000000) <
	     25'd25165824 ;
  assign ctop_app_appW3_mesgLengthSoFar_780_PLUS_1___d8258 =
	     ctop_app_appW3_mesgLengthSoFar + 14'd1 ;
  assign ctop_app_appW3_mesgRF_i_notFull__978_AND_NOT_c_ETC___d5979 =
	     ctop_app_appW3_mesgRF$FULL_N &&
	     (!ctop_app_appW3_rdSerEmpty && ctop_app_appW3_rdSerPos != 2'd0 ||
	      ctop_app_appW3_wide16Fc$EMPTY_N) ;
  assign ctop_app_appW3_metaRF_i_notFull__927_AND_NOT_c_ETC___d5938 =
	     ctop_app_appW3_metaRF$FULL_N &&
	     (!ctop_app_appW3_rdSerEmpty && ctop_app_appW3_rdSerPos != 2'd0 ||
	      ctop_app_appW3_wide16Fc$EMPTY_N) ;
  assign ctop_app_appW3_wci_cState_382_EQ_2_393_AND_cto_ETC___d5899 =
	     ctop_app_appW3_wci_cState == 3'd2 &&
	     ctop_app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     !ctop_app_appW3_dlyWordsStored_value_724_SLE_0___d7366 &&
	     !ctop_app_appW3_bytesWritten_793_ULT_ctop_app_a_ETC___d7367 &&
	     !ctop_app_appW3_cyclesPassed_763_ULT_ctop_app_a_ETC___d7389 ;
  assign ctop_app_appW3_wrtSerPos_797_PLUS_1___d8257 =
	     ctop_app_appW3_wrtSerPos + 2'd1 ;
  assign ctop_app_appW3_wsiS_reqFifo_notFull__486_AND_c_ETC___d5508 =
	     ctop_app_appW3_wsiS_reqFifo$FULL_N &&
	     (ctop_app_appW3_wsiS_burstKind == 2'd0 ||
	      (ctop_app_appW3_wsiS_burstKind == 2'd1 ||
	       ctop_app_appW3_wsiS_burstKind == 2'd2) &&
	      ctop_app_appW3_wsiS_wsiReq$wget[57]) ;
  assign ctop_app_appW4_wmi_operateD_405_AND_ctop_app_a_ETC___d6783 =
	     ctop_app_appW4_wmi_operateD && ctop_app_appW4_wmi_peerIsReady &&
	     ctop_app_appW4_wsiS_reqFifo$EMPTY_N &&
	     (ctop_app_appW4_smaCtrl[3:0] != 4'h3 ||
	      ctop_app_appW4_wsiM_reqFifo_c_r != 2'd2) ;
  assign ctop_app_appW4_wmi_respF_i_notEmpty__700_AND_c_ETC___d6705 =
	     ctop_app_appW4_wmi_respF$EMPTY_N &&
	     (ctop_app_appW4_smaCtrl[4] ||
	      ctop_app_appW4_respF_rRdPtr + 12'd1024 !=
	      ctop_app_appW4_respF_rWrPtr) ;
  assign ctop_app_appW4_wsiS_reqFifo_i_notEmpty__635_AN_ETC___d6802 =
	     ctop_app_appW4_wsiS_reqFifo$EMPTY_N &&
	     (ctop_app_appW4_smaCtrl[3:0] != 4'h3 ||
	      ctop_app_appW4_wsiM_reqFifo_c_r != 2'd2) &&
	     (!ctop_app_appW4_wsiS_reqFifo$D_OUT[57] ||
	      ctop_app_appW4_wmi_mFlagF_c_r != 2'd2) ;
  assign ctop_app_appW4_wsiS_reqFifo_notFull__537_AND_c_ETC___d6559 =
	     ctop_app_appW4_wsiS_reqFifo$FULL_N &&
	     (ctop_app_appW4_wsiS_burstKind == 2'd0 ||
	      (ctop_app_appW4_wsiS_burstKind == 2'd1 ||
	       ctop_app_appW4_wsiS_burstKind == 2'd2) &&
	      ctop_app_appW4_wsiS_wsiReq$wget[57]) ;
  assign ctop_inf_dp0_bml_crdBuf_value_974_EQ_ctop_inf__ETC___d8451 =
	     ctop_inf_dp0_bml_crdBuf_value ==
	     ctop_inf_dp0_bml_crdBuf_modulus ;
  assign ctop_inf_dp0_bml_fabBuf_value_959_EQ_ctop_inf__ETC___d7529 =
	     ctop_inf_dp0_bml_fabBuf_value ==
	     ctop_inf_dp0_bml_fabBuf_modulus ;
  assign ctop_inf_dp0_bml_fabFlowAddr_031_PLUS_ctop_inf_ETC___d8255 =
	     ctop_inf_dp0_bml_fabFlowAddr + ctop_inf_dp0_bml_fabFlowSize ;
  assign ctop_inf_dp0_bml_lclBufDone_016_AND_IF_ctop_in_ETC___d7433 =
	     ctop_inf_dp0_bml_lclBufDone &&
	     CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q11 ;
  assign ctop_inf_dp0_bml_lclBuf_value_929_EQ_ctop_inf__ETC___d8466 =
	     ctop_inf_dp0_bml_lclBuf_value ==
	     ctop_inf_dp0_bml_lclBuf_modulus ;
  assign ctop_inf_dp0_bml_remBuf_value_944_EQ_ctop_inf__ETC___d7522 =
	     ctop_inf_dp0_bml_remBuf_value ==
	     ctop_inf_dp0_bml_remBuf_modulus ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_PLUS_ETC___d221 =
	     ctop_inf_dp0_bram_serverAdapterA_1_cnt +
	     (ctop_inf_dp0_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263 =
	     (ctop_inf_dp0_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_PLUS_ETC___d339 =
	     ctop_inf_dp0_bram_serverAdapterA_2_cnt +
	     (ctop_inf_dp0_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264 =
	     (ctop_inf_dp0_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_2_outDataCore_ETC___d1540 =
	     (ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas) &&
	     ctop_inf_dp0_bram_serverAdapterA_outData_outDa_ETC___d1538 ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_PLUS_ETC___d457 =
	     ctop_inf_dp0_bram_serverAdapterA_3_cnt +
	     (ctop_inf_dp0_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265 =
	     (ctop_inf_dp0_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_7_PLUS_IF_ETC___d103 =
	     ctop_inf_dp0_bram_serverAdapterA_cnt +
	     (ctop_inf_dp0_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterA_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262 =
	     (ctop_inf_dp0_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterA_outDataCore_n_ETC___d1542 =
	     (ctop_inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterA_outData_enqData$whas) &&
	     (ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas) &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outDataCore_ETC___d1540 ;
  assign ctop_inf_dp0_bram_serverAdapterA_outData_outDa_ETC___d1538 =
	     ctop_inf_dp0_bram_serverAdapterA_outData_outData$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$whas &&
	     ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$whas &&
	     ctop_inf_dp0_tlp_mRespF$FULL_N &&
	     (!ctop_inf_dp0_tlp_rdRespDwRemain_530_ULE_4___d1531 ||
	      ctop_inf_dp0_tlp_readReq$EMPTY_N) ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_PLUS_ETC___d280 =
	     ctop_inf_dp0_bram_serverAdapterB_1_cnt +
	     (ctop_inf_dp0_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_SLT_3___d1737 =
	     (ctop_inf_dp0_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterB_1_outData_out_ETC___d1765 =
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_outData$whas &&
	     (ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas) &&
	     ctop_inf_dp0_bram_serverAdapterB_2_outData_outData$whas &&
	     (ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas) &&
	     ctop_inf_dp0_bram_serverAdapterB_3_outData_outData$whas ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_PLUS_ETC___d398 =
	     ctop_inf_dp0_bram_serverAdapterB_2_cnt +
	     (ctop_inf_dp0_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_SLT_3___d1738 =
	     (ctop_inf_dp0_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_PLUS_ETC___d516 =
	     ctop_inf_dp0_bram_serverAdapterB_3_cnt +
	     (ctop_inf_dp0_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_SLT_3___d1739 =
	     (ctop_inf_dp0_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_56_PLUS_I_ETC___d162 =
	     ctop_inf_dp0_bram_serverAdapterB_cnt +
	     (ctop_inf_dp0_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp0_bram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp0_bram_serverAdapterB_cnt_56_SLT_3___d1736 =
	     (ctop_inf_dp0_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp0_tlp_dmaPullRemainDWLen_073_ULE_ct_ETC___d8259 =
	     ctop_inf_dp0_tlp_dmaPullRemainDWLen <=
	     ctop_inf_dp0_tlp_dmaPullRemainDWSub ;
  assign ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370 =
	     ctop_inf_dp0_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d1112 =
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_fabMeta[128] &&
	     !ctop_inf_dp0_tlp_tlpXmtBusy &&
	     ctop_inf_dp0_tlp_dmaDoTailEvent &&
	     ctop_inf_dp0_tlp_postSeqDwell == 4'd0 &&
	     ctop_inf_dp0_tlp_mesgComplReceived ==
	     ctop_inf_dp0_tlp_fabMeta[112:96] ;
  assign ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d725 =
	     ctop_inf_dp0_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp0_tlp_tlpRcvBusy &&
	     !ctop_inf_dp0_tlp_reqMetaInFlight &&
	     !ctop_inf_dp0_tlp_fabMeta[128] &&
	     ctop_inf_dp0_tlp_nearBufReady &&
	     ctop_inf_dp0_tlp_farBufReady &&
	     ctop_inf_dp0_tlp_postSeqDwell == 4'd0 ;
  assign ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d949 =
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp0_tlp_tlpXmtBusy &&
	     !ctop_inf_dp0_tlp_reqMetaInFlight &&
	     !ctop_inf_dp0_tlp_reqMetaBodyInFlight &&
	     !ctop_inf_dp0_tlp_fabMeta[128] &&
	     ctop_inf_dp0_tlp_nearBufReady &&
	     ctop_inf_dp0_tlp_farBufReady ;
  assign ctop_inf_dp0_tlp_dpControl_wget__03_BITS_3_TO__ETC___d982 =
	     ctop_inf_dp0_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp0_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp0_tlp_reqMetaInFlight &&
	     !ctop_inf_dp0_tlp_tlpRcvBusy &&
	     tagm__h44508 == ctop_inf_dp0_tlp_inF$D_OUT[47:40] &&
	     ctop_inf_dp0_tlp_inF_first__68_BITS_63_TO_56_7_ETC___d980 ;
  assign ctop_inf_dp0_tlp_inF_first__68_BITS_63_TO_56_7_ETC___d980 =
	     ctop_inf_dp0_tlp_inF$D_OUT[63:56] == pciDevice$dD_OUT[15:8] &&
	     ctop_inf_dp0_tlp_inF$D_OUT[55:51] == pciDevice$dD_OUT[7:3] &&
	     ctop_inf_dp0_tlp_inF$D_OUT[50:48] == 3'd0 ;
  assign ctop_inf_dp0_tlp_inF_first__68_BIT_152_115_AND_ETC___d1140 =
	     ctop_inf_dp0_tlp_inF$D_OUT[152] &&
	     !ctop_inf_dp0_tlp_inF$D_OUT[110] &&
	     !ctop_inf_dp0_tlp_inF$D_OUT[125] &&
	     ctop_inf_dp0_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !ctop_inf_dp0_tlp_inF$D_OUT[152] &&
	     !ctop_inf_dp0_tlp_inIgnorePkt ;
  assign ctop_inf_dp0_tlp_mReqF_RDY_deq__179_AND_IF_cto_ETC___d1195 =
	     ctop_inf_dp0_tlp_mReqF$EMPTY_N &&
	     CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q7 ;
  assign ctop_inf_dp0_tlp_mRespF_first__35_BITS_71_TO_6_ETC___d7384 =
	     ctop_inf_dp0_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830 =
	     ctop_inf_dp0_tlp_outDwRemain <= 10'd4 ;
  assign ctop_inf_dp0_tlp_rdRespDwRemain_530_ULE_4___d1531 =
	     ctop_inf_dp0_tlp_rdRespDwRemain <= 10'd4 ;
  assign ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 =
	     ctop_inf_dp0_tlp_readNxtDWAddr + 13'd1 ;
  assign ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19 =
	     ctop_inf_dp0_tlp_readNxtDWAddr + 13'd2 ;
  assign ctop_inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 =
	     ctop_inf_dp0_tlp_readNxtDWAddr + 13'd3 ;
  assign ctop_inf_dp0_tlp_readRemainDWLen_386_ULE_4___d1387 =
	     ctop_inf_dp0_tlp_readRemainDWLen <= 10'd4 ;
  assign ctop_inf_dp0_tlp_writeDWAddr_PLUS_1__q15 =
	     ctop_inf_dp0_tlp_writeDWAddr + 13'd1 ;
  assign ctop_inf_dp0_tlp_writeDWAddr_PLUS_2__q16 =
	     ctop_inf_dp0_tlp_writeDWAddr + 13'd2 ;
  assign ctop_inf_dp0_tlp_writeDWAddr_PLUS_3__q14 =
	     ctop_inf_dp0_tlp_writeDWAddr + 13'd3 ;
  assign ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 =
	     ctop_inf_dp0_tlp_writeRemainDWLen <= 10'd1 ;
  assign ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386 =
	     ctop_inf_dp0_tlp_writeRemainDWLen <= 10'd2 ;
  assign ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 =
	     ctop_inf_dp0_tlp_writeRemainDWLen <= 10'd3 ;
  assign ctop_inf_dp0_wmi_dpControl_whas__723_AND_ctop__ETC___d1769 =
	     (ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterB_outData_enqData$whas) &&
	     ctop_inf_dp0_bram_serverAdapterB_outData_outData$whas &&
	     (ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas) &&
	     ctop_inf_dp0_bram_serverAdapterB_1_outData_out_ETC___d1765 ;
  assign ctop_inf_dp1_bml_crdBuf_value_160_EQ_ctop_inf__ETC___d8507 =
	     ctop_inf_dp1_bml_crdBuf_value ==
	     ctop_inf_dp1_bml_crdBuf_modulus ;
  assign ctop_inf_dp1_bml_fabBuf_value_145_EQ_ctop_inf__ETC___d7530 =
	     ctop_inf_dp1_bml_fabBuf_value ==
	     ctop_inf_dp1_bml_fabBuf_modulus ;
  assign ctop_inf_dp1_bml_fabFlowAddr_217_PLUS_ctop_inf_ETC___d8256 =
	     ctop_inf_dp1_bml_fabFlowAddr + ctop_inf_dp1_bml_fabFlowSize ;
  assign ctop_inf_dp1_bml_lclBufDone_202_AND_IF_ctop_in_ETC___d7462 =
	     ctop_inf_dp1_bml_lclBufDone &&
	     CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q12 ;
  assign ctop_inf_dp1_bml_lclBuf_value_115_EQ_ctop_inf__ETC___d8518 =
	     ctop_inf_dp1_bml_lclBuf_value ==
	     ctop_inf_dp1_bml_lclBuf_modulus ;
  assign ctop_inf_dp1_bml_remBuf_value_130_EQ_ctop_inf__ETC___d8519 =
	     ctop_inf_dp1_bml_remBuf_value ==
	     ctop_inf_dp1_bml_remBuf_modulus ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_PLU_ETC___d2414 =
	     ctop_inf_dp1_bram_serverAdapterA_1_cnt +
	     (ctop_inf_dp1_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267 =
	     (ctop_inf_dp1_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_PLU_ETC___d2532 =
	     ctop_inf_dp1_bram_serverAdapterA_2_cnt +
	     (ctop_inf_dp1_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534 =
	     (ctop_inf_dp1_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_2_outDataCore_ETC___d3726 =
	     (ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas) &&
	     ctop_inf_dp1_bram_serverAdapterA_outData_outDa_ETC___d3724 ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_PLU_ETC___d2650 =
	     ctop_inf_dp1_bram_serverAdapterA_3_cnt +
	     (ctop_inf_dp1_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268 =
	     (ctop_inf_dp1_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_290_PLUS__ETC___d2296 =
	     ctop_inf_dp1_bram_serverAdapterA_cnt +
	     (ctop_inf_dp1_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterA_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266 =
	     (ctop_inf_dp1_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterA_outDataCore_n_ETC___d3728 =
	     (ctop_inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterA_outData_enqData$whas) &&
	     (ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas) &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outDataCore_ETC___d3726 ;
  assign ctop_inf_dp1_bram_serverAdapterA_outData_outDa_ETC___d3724 =
	     ctop_inf_dp1_bram_serverAdapterA_outData_outData$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$whas &&
	     ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$whas &&
	     ctop_inf_dp1_tlp_mRespF$FULL_N &&
	     (!ctop_inf_dp1_tlp_rdRespDwRemain_716_ULE_4___d3717 ||
	      ctop_inf_dp1_tlp_readReq$EMPTY_N) ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_PLU_ETC___d2473 =
	     ctop_inf_dp1_bram_serverAdapterB_1_cnt +
	     (ctop_inf_dp1_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_SLT_3___d3923 =
	     (ctop_inf_dp1_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterB_1_outData_out_ETC___d3951 =
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_outData$whas &&
	     (ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas) &&
	     ctop_inf_dp1_bram_serverAdapterB_2_outData_outData$whas &&
	     (ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas) &&
	     ctop_inf_dp1_bram_serverAdapterB_3_outData_outData$whas ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_PLU_ETC___d2591 =
	     ctop_inf_dp1_bram_serverAdapterB_2_cnt +
	     (ctop_inf_dp1_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_SLT_3___d3924 =
	     (ctop_inf_dp1_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_PLU_ETC___d2709 =
	     ctop_inf_dp1_bram_serverAdapterB_3_cnt +
	     (ctop_inf_dp1_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_SLT_3___d3925 =
	     (ctop_inf_dp1_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_349_PLUS__ETC___d2355 =
	     ctop_inf_dp1_bram_serverAdapterB_cnt +
	     (ctop_inf_dp1_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (ctop_inf_dp1_bram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign ctop_inf_dp1_bram_serverAdapterB_cnt_349_SLT_3___d3922 =
	     (ctop_inf_dp1_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign ctop_inf_dp1_tlp_dmaPullRemainDWLen_259_ULE_ct_ETC___d8260 =
	     ctop_inf_dp1_tlp_dmaPullRemainDWLen <=
	     ctop_inf_dp1_tlp_dmaPullRemainDWSub ;
  assign ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261 =
	     ctop_inf_dp1_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d2917 =
	     ctop_inf_dp1_dpControl[3:2] == 2'd1 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp1_tlp_tlpRcvBusy &&
	     !ctop_inf_dp1_tlp_reqMetaInFlight &&
	     !ctop_inf_dp1_tlp_fabMeta[128] &&
	     ctop_inf_dp1_tlp_nearBufReady &&
	     ctop_inf_dp1_tlp_farBufReady &&
	     ctop_inf_dp1_tlp_postSeqDwell == 4'd0 ;
  assign ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3137 =
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     !ctop_inf_dp1_tlp_tlpXmtBusy &&
	     !ctop_inf_dp1_tlp_reqMetaInFlight &&
	     !ctop_inf_dp1_tlp_reqMetaBodyInFlight &&
	     !ctop_inf_dp1_tlp_fabMeta[128] &&
	     ctop_inf_dp1_tlp_nearBufReady &&
	     ctop_inf_dp1_tlp_farBufReady ;
  assign ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3168 =
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_reqMetaInFlight &&
	     !ctop_inf_dp1_tlp_tlpRcvBusy &&
	     tagm__h123569 == ctop_inf_dp1_tlp_inF$D_OUT[47:40] &&
	     ctop_inf_dp1_tlp_inF_first__156_BITS_63_TO_56__ETC___d3166 ;
  assign ctop_inf_dp1_tlp_dpControl_wget__895_BITS_3_TO_ETC___d3298 =
	     ctop_inf_dp1_dpControl[3:2] == 2'd2 &&
	     ctop_inf_dp1_dpControl[1:0] == 2'd1 &&
	     ctop_inf_dp1_tlp_fabMeta[128] &&
	     !ctop_inf_dp1_tlp_tlpXmtBusy &&
	     ctop_inf_dp1_tlp_dmaDoTailEvent &&
	     ctop_inf_dp1_tlp_postSeqDwell == 4'd0 &&
	     ctop_inf_dp1_tlp_mesgComplReceived ==
	     ctop_inf_dp1_tlp_fabMeta[112:96] ;
  assign ctop_inf_dp1_tlp_inF_first__156_BITS_63_TO_56__ETC___d3166 =
	     ctop_inf_dp1_tlp_inF$D_OUT[63:56] == pciDevice$dD_OUT[15:8] &&
	     ctop_inf_dp1_tlp_inF$D_OUT[55:51] == pciDevice$dD_OUT[7:3] &&
	     ctop_inf_dp1_tlp_inF$D_OUT[50:48] == 3'd1 ;
  assign ctop_inf_dp1_tlp_inF_first__156_BIT_152_301_AN_ETC___d3326 =
	     ctop_inf_dp1_tlp_inF$D_OUT[152] &&
	     !ctop_inf_dp1_tlp_inF$D_OUT[110] &&
	     !ctop_inf_dp1_tlp_inF$D_OUT[125] &&
	     ctop_inf_dp1_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !ctop_inf_dp1_tlp_inF$D_OUT[152] &&
	     !ctop_inf_dp1_tlp_inIgnorePkt ;
  assign ctop_inf_dp1_tlp_mReqF_RDY_deq__365_AND_IF_cto_ETC___d3381 =
	     ctop_inf_dp1_tlp_mReqF$EMPTY_N &&
	     CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q9 ;
  assign ctop_inf_dp1_tlp_mRespF_first__926_BITS_71_TO__ETC___d7397 =
	     ctop_inf_dp1_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372 =
	     ctop_inf_dp1_tlp_outDwRemain <= 10'd4 ;
  assign ctop_inf_dp1_tlp_rdRespDwRemain_716_ULE_4___d3717 =
	     ctop_inf_dp1_tlp_rdRespDwRemain <= 10'd4 ;
  assign ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 =
	     ctop_inf_dp1_tlp_readNxtDWAddr + 13'd1 ;
  assign ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27 =
	     ctop_inf_dp1_tlp_readNxtDWAddr + 13'd2 ;
  assign ctop_inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 =
	     ctop_inf_dp1_tlp_readNxtDWAddr + 13'd3 ;
  assign ctop_inf_dp1_tlp_readRemainDWLen_572_ULE_4___d3573 =
	     ctop_inf_dp1_tlp_readRemainDWLen <= 10'd4 ;
  assign ctop_inf_dp1_tlp_writeDWAddr_PLUS_1__q23 =
	     ctop_inf_dp1_tlp_writeDWAddr + 13'd1 ;
  assign ctop_inf_dp1_tlp_writeDWAddr_PLUS_2__q24 =
	     ctop_inf_dp1_tlp_writeDWAddr + 13'd2 ;
  assign ctop_inf_dp1_tlp_writeDWAddr_PLUS_3__q22 =
	     ctop_inf_dp1_tlp_writeDWAddr + 13'd3 ;
  assign ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 =
	     ctop_inf_dp1_tlp_writeRemainDWLen <= 10'd1 ;
  assign ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387 =
	     ctop_inf_dp1_tlp_writeRemainDWLen <= 10'd2 ;
  assign ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 =
	     ctop_inf_dp1_tlp_writeRemainDWLen <= 10'd3 ;
  assign ctop_inf_dp1_wmi_dpControl_whas__909_AND_ctop__ETC___d3955 =
	     (ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterB_outData_enqData$whas) &&
	     ctop_inf_dp1_bram_serverAdapterB_outData_outData$whas &&
	     (ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas) &&
	     ctop_inf_dp1_bram_serverAdapterB_1_outData_out_ETC___d3951 ;
  assign data__h209151 =
	     (ctop_app_appW3_mesgWF_rCache[45] &&
	      ctop_app_appW3_mesgWF_rCache[44:32] ==
	      ctop_app_appW3_mesgWF_rRdPtr) ?
	       ctop_app_appW3_mesgWF_rCache[31:0] :
	       ctop_app_appW3_mesgWF_memory$DOB ;
  assign delayStatus__h212490 =
	     { 14'h0,
	       !ctop_app_appW3_dlyWordsStored_value_724_SLE_0___d7366 &&
	       !ctop_app_appW3_bytesWritten_793_ULT_ctop_app_a_ETC___d7367 &&
	       !ctop_app_appW3_cyclesPassed_763_ULT_ctop_app_a_ETC___d7389,
	       ctop_app_appW3_dlyWordsStored_value_724_SLE_0__ETC___d5879,
	       ctop_app_appW3_dlyWordsStored_value_724_SLT_83_ETC___d5881,
	       ctop_app_appW3_wsiM_reqFifo_c_r != 2'd2,
	       ctop_app_appW3_metaWF$FULL_N,
	       ctop_app_appW3_metaWF$EMPTY_N,
	       NOT_ctop_app_appW3_mesgWF_rRdPtr_711_PLUS_2048_ETC___d5769,
	       NOT_ctop_app_appW3_mesgWF_rRdPtr_711_EQ_ctop_a_ETC___d5839,
	       ctop_app_appW3_metaRF$FULL_N,
	       ctop_app_appW3_metaRF$EMPTY_N,
	       ctop_app_appW3_mesgRF$FULL_N,
	       ctop_app_appW3_mesgRF$EMPTY_N,
	       ctop_app_appW3_wide16Fa$FULL_N,
	       ctop_app_appW3_wide16Fa$EMPTY_N,
	       ctop_app_appW3_wide16Fb$FULL_N,
	       ctop_app_appW3_wide16Fb$EMPTY_N,
	       ctop_app_appW3_wide16Fc$FULL_N,
	       ctop_app_appW3_wide16Fc$EMPTY_N } ;
  assign idx__h128867 = 2'd0 - ctop_inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h131090 = 2'd1 - ctop_inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h132386 = 2'd2 - ctop_inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h133682 = 2'd3 - ctop_inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h135930 = 2'd0 - ctop_inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h136398 = 2'd1 - ctop_inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h136771 = 2'd2 - ctop_inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h137144 = 2'd3 - ctop_inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h49806 = 2'd0 - ctop_inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h52029 = 2'd1 - ctop_inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h53325 = 2'd2 - ctop_inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h54621 = 2'd3 - ctop_inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h56869 = 2'd0 - ctop_inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h57337 = 2'd1 - ctop_inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h57710 = 2'd2 - ctop_inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h58083 = 2'd3 - ctop_inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign lastBE__h110766 =
	     ctop_inf_dp1_tlp_mRespF_first__926_BITS_71_TO__ETC___d7397 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h123470 =
	     (thisRequestLength__h123168[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lastBE__h31697 =
	     ctop_inf_dp0_tlp_mRespF_first__35_BITS_71_TO_6_ETC___d7384 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h44409 =
	     (thisRequestLength__h44107[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lowAddr__h138045 =
	     { ctop_inf_dp1_tlp_readReq$D_OUT[33:29], lowAddr10__h138044 } ;
  assign lowAddr__h58984 =
	     { ctop_inf_dp0_tlp_readReq$D_OUT[33:29], lowAddr10__h58983 } ;
  assign mesgMetaF_length__h186882 = { 10'd0, x__h186655 } ;
  assign mesgMetaF_length__h187618 = { 10'd0, mlp1B__h187472 } ;
  assign mesgMetaF_length__h234294 = { 10'd0, x__h234067 } ;
  assign mesgMetaF_length__h235030 = { 10'd0, mlp1B__h234884 } ;
  assign mesgMeta_opcode__h154247 =
	     { 24'h800000, ctop_inf_dp1_wmi_wmi_mFlagReg[31:24] } ;
  assign mesgMeta_opcode__h75186 =
	     { 24'h800000, ctop_inf_dp0_wmi_wmi_mFlagReg[31:24] } ;
  assign mlp1B__h187472 = { mlp1__h187471[11:0], 2'd0 } ;
  assign mlp1B__h234884 = { mlp1__h234883[11:0], 2'd0 } ;
  assign mlp1__h187471 = ctop_app_appW2_mesgLengthSoFar + 14'd1 ;
  assign mlp1__h234883 = ctop_app_appW4_mesgLengthSoFar + 14'd1 ;
  assign nowLS__h107124 =
	     { ctop_inf_dp1_tlp_mRespF$D_OUT[39:32],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[47:40],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[55:48],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h119958 =
	     { ctop_inf_dp1_tlp_inF$D_OUT[39:32],
	       ctop_inf_dp1_tlp_inF$D_OUT[47:40],
	       ctop_inf_dp1_tlp_inF$D_OUT[55:48],
	       ctop_inf_dp1_tlp_inF$D_OUT[63:56] } ;
  assign nowLS__h28055 =
	     { ctop_inf_dp0_tlp_mRespF$D_OUT[39:32],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[47:40],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[55:48],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h40897 =
	     { ctop_inf_dp0_tlp_inF$D_OUT[39:32],
	       ctop_inf_dp0_tlp_inF$D_OUT[47:40],
	       ctop_inf_dp0_tlp_inF$D_OUT[55:48],
	       ctop_inf_dp0_tlp_inF$D_OUT[63:56] } ;
  assign nowMS__h107123 =
	     { ctop_inf_dp1_tlp_mRespF$D_OUT[71:64],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[79:72],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[87:80],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h119957 =
	     { ctop_inf_dp1_tlp_inF$D_OUT[71:64],
	       ctop_inf_dp1_tlp_inF$D_OUT[79:72],
	       ctop_inf_dp1_tlp_inF$D_OUT[87:80],
	       ctop_inf_dp1_tlp_inF$D_OUT[95:88] } ;
  assign nowMS__h28054 =
	     { ctop_inf_dp0_tlp_mRespF$D_OUT[71:64],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[79:72],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[87:80],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h40896 =
	     { ctop_inf_dp0_tlp_inF$D_OUT[71:64],
	       ctop_inf_dp0_tlp_inF$D_OUT[79:72],
	       ctop_inf_dp0_tlp_inF$D_OUT[87:80],
	       ctop_inf_dp0_tlp_inF$D_OUT[95:88] } ;
  assign opcode__h107122 =
	     { ctop_inf_dp1_tlp_mRespF$D_OUT[103:96],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[111:104],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[119:112],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h119956 =
	     { ctop_inf_dp1_tlp_inF$D_OUT[103:96],
	       ctop_inf_dp1_tlp_inF$D_OUT[111:104],
	       ctop_inf_dp1_tlp_inF$D_OUT[119:112],
	       ctop_inf_dp1_tlp_inF$D_OUT[127:120] } ;
  assign opcode__h28053 =
	     { ctop_inf_dp0_tlp_mRespF$D_OUT[103:96],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[111:104],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[119:112],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h40895 =
	     { ctop_inf_dp0_tlp_inF$D_OUT[103:96],
	       ctop_inf_dp0_tlp_inF$D_OUT[111:104],
	       ctop_inf_dp0_tlp_inF$D_OUT[119:112],
	       ctop_inf_dp0_tlp_inF$D_OUT[127:120] } ;
  assign p2iAF_head_wrapped_crossed__8_EQ_p2iAF_tail_wr_ETC___d7152 =
	     p2iAF_head_wrapped == p2iAF_tail_wrapped &&
	     !p2iAF_sInReset$VAL &&
	     preEdge$CLK_VAL ;
  assign pkt__h126526 =
	     { 9'd148,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice$dD_OUT[15:3],
	       7'd16,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[54:43],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[87:72],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[61:55],
	       ctop_inf_dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign pkt__h47465 =
	     { 9'd148,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice$dD_OUT[15:3],
	       7'd0,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[54:43],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[87:72],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[61:55],
	       ctop_inf_dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign rdat__h162844 = { 16'd0, ctop_inf_dp1_bml_lclNumBufs } ;
  assign rdat__h162852 = { 16'd0, ctop_inf_dp1_bml_fabNumBufs } ;
  assign rdat__h162860 = { 16'd0, ctop_inf_dp1_bml_mesgBase } ;
  assign rdat__h162868 = { 16'd0, ctop_inf_dp1_bml_metaBase } ;
  assign rdat__h162876 = { 16'd0, ctop_inf_dp1_bml_mesgSize } ;
  assign rdat__h162884 = { 16'd0, ctop_inf_dp1_bml_metaSize } ;
  assign rdat__h162892 = { 16'd0, ctop_inf_dp1_bml_lclBufsCF } ;
  assign rdat__h162913 =
	     { ctop_inf_dp1_bml_lclBufsAR, ctop_inf_dp1_bml_fabBufsAvail } ;
  assign rdat__h162918 =
	     { ctop_inf_dp1_bml_remBuf_value,
	       ctop_inf_dp1_bml_lclBuf_value } ;
  assign rdat__h162929 =
	     { ctop_inf_dp1_bml_lclStarts, ctop_inf_dp1_bml_lclDones } ;
  assign rdat__h162934 =
	     { ctop_inf_dp1_bml_remStarts, ctop_inf_dp1_bml_remDones } ;
  assign rdat__h162995 = { 28'd0, ctop_inf_dp1_dpControl } ;
  assign rdat__h188997 = { 16'd0, x__h189000 } ;
  assign rdat__h212928 = { 8'd0, x__h212931 } ;
  assign rdat__h213114 =
	     { {7{ctop_app_appW3_dlyWordsStored_value[24]}},
	       ctop_app_appW3_dlyWordsStored_value } ;
  assign rdat__h213123 =
	     { {24{ctop_app_appW3_dlyReadCredit_value[7]}},
	       ctop_app_appW3_dlyReadCredit_value } ;
  assign rdat__h213132 = { 9'd0, ctop_app_appW3_dlyWAG } ;
  assign rdat__h213141 = { 9'd0, ctop_app_appW3_dlyRAG } ;
  assign rdat__h213214 =
	     { {16{ctop_app_appW3_dlyReadyToWrite_value[15]}},
	       ctop_app_appW3_dlyReadyToWrite_value } ;
  assign rdat__h213223 = { 16'd0, ctop_app_appW3_wrtSerUnroll } ;
  assign rdat__h213232 = { 8'd0, ctop_app_appW3_bytesThisMessage } ;
  assign rdat__h213241 = { 18'd0, ctop_app_appW3_mesgLengthSoFar } ;
  assign rdat__h236409 = { 16'd0, x__h236412 } ;
  assign rdat__h83786 = { 16'd0, ctop_inf_dp0_bml_lclNumBufs } ;
  assign rdat__h83794 = { 16'd0, ctop_inf_dp0_bml_fabNumBufs } ;
  assign rdat__h83802 = { 16'd0, ctop_inf_dp0_bml_mesgBase } ;
  assign rdat__h83810 = { 16'd0, ctop_inf_dp0_bml_metaBase } ;
  assign rdat__h83818 = { 16'd0, ctop_inf_dp0_bml_mesgSize } ;
  assign rdat__h83826 = { 16'd0, ctop_inf_dp0_bml_metaSize } ;
  assign rdat__h83834 = { 16'd0, ctop_inf_dp0_bml_lclBufsCF } ;
  assign rdat__h83855 =
	     { ctop_inf_dp0_bml_lclBufsAR, ctop_inf_dp0_bml_fabBufsAvail } ;
  assign rdat__h83860 =
	     { ctop_inf_dp0_bml_remBuf_value,
	       ctop_inf_dp0_bml_lclBuf_value } ;
  assign rdat__h83871 =
	     { ctop_inf_dp0_bml_lclStarts, ctop_inf_dp0_bml_lclDones } ;
  assign rdat__h83876 =
	     { ctop_inf_dp0_bml_remStarts, ctop_inf_dp0_bml_remDones } ;
  assign rdat__h83937 = { 28'd0, ctop_inf_dp0_dpControl } ;
  assign rdata__h143414 =
	     ctop_inf_dp1_tlp_readNxtDWAddr[1] ?
	       IF_ctop_inf_dp1_tlp_readNxtDWAddr_584_BIT_0_76_ETC___d3766 :
	       IF_ctop_inf_dp1_tlp_readNxtDWAddr_584_BIT_0_76_ETC___d3771 ;
  assign rdata__h64353 =
	     ctop_inf_dp0_tlp_readNxtDWAddr[1] ?
	       IF_ctop_inf_dp0_tlp_readNxtDWAddr_398_BIT_0_57_ETC___d1580 :
	       IF_ctop_inf_dp0_tlp_readNxtDWAddr_398_BIT_0_57_ETC___d1585 ;
  assign rreq_tag__h110567 =
	     (y__h110378 == ctop_inf_dp1_tlp_mesgLengthRemainPush) ?
	       8'h01 :
	       8'h0 ;
  assign rreq_tag__h31498 =
	     (y__h31309 == ctop_inf_dp0_tlp_mesgLengthRemainPush) ?
	       8'h01 :
	       8'h0 ;
  assign rresp_data__h138088 =
	     { IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535[7:0],
	       IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535[15:8],
	       IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535[23:16],
	       IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535[31:24] } ;
  assign rresp_data__h59027 =
	     { IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685[7:0],
	       IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685[15:8],
	       IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685[23:16],
	       IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685[31:24] } ;
  assign sendData_burstLength__h185631 =
	     (ctop_app_appW2_thisMesg[15:0] == 16'd0 ||
	      ctop_app_appW2_smaCtrl[5] &&
	      ctop_app_appW2_unrollCnt == 16'd1) ?
	       12'd1 :
	       (ctop_app_appW2_smaCtrl[5] ?
		  12'd4095 :
		  wsiBurstLength__h185549[11:0]) ;
  assign sendData_burstLength__h233043 =
	     (ctop_app_appW4_thisMesg[15:0] == 16'd0 ||
	      ctop_app_appW4_smaCtrl[5] &&
	      ctop_app_appW4_unrollCnt == 16'd1) ?
	       12'd1 :
	       (ctop_app_appW4_smaCtrl[5] ?
		  12'd4095 :
		  wsiBurstLength__h232961[11:0]) ;
  assign sendData_byteEn__h185633 =
	     (ctop_app_appW2_thisMesg[15:0] == 16'd0) ? 4'd0 : 4'd15 ;
  assign sendData_byteEn__h233045 =
	     (ctop_app_appW4_thisMesg[15:0] == 16'd0) ? 4'd0 : 4'd15 ;
  assign spanToNextPage__h110337 =
	     13'd4096 - { 1'd0, ctop_inf_dp1_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h123167 =
	     13'd4096 - { 1'd0, ctop_inf_dp1_tlp_fabMesgAccu[11:0] } ;
  assign spanToNextPage__h31268 =
	     13'd4096 - { 1'd0, ctop_inf_dp0_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h44106 =
	     13'd4096 - { 1'd0, ctop_inf_dp0_tlp_fabMesgAccu[11:0] } ;
  assign tag__h123443 = { 3'd0, ctop_inf_dp1_tlp_dmaTag } ;
  assign tag__h44382 = { 3'd0, ctop_inf_dp0_tlp_dmaTag } ;
  assign tagm__h123569 = { 3'd0, ctop_inf_dp1_tlp_dmaReqTag } ;
  assign tagm__h44508 = { 3'd0, ctop_inf_dp0_tlp_dmaReqTag } ;
  assign thisRequestLength__h110338 =
	     (x__h110391[12:0] <= spanToNextPage__h110337) ?
	       x__h110391[12:0] :
	       spanToNextPage__h110337 ;
  assign thisRequestLength__h123168 =
	     (x__h123201[12:0] <= spanToNextPage__h123167) ?
	       x__h123201[12:0] :
	       spanToNextPage__h123167 ;
  assign thisRequestLength__h31269 =
	     (x__h31322[12:0] <= spanToNextPage__h31268) ?
	       x__h31322[12:0] :
	       spanToNextPage__h31268 ;
  assign thisRequestLength__h44107 =
	     (x__h44140[12:0] <= spanToNextPage__h44106) ?
	       x__h44140[12:0] :
	       spanToNextPage__h44106 ;
  assign val_be__h245239 = { fP2I$D_OUT[71:64], 8'd0 } ;
  assign val_data__h245240 = { fP2I$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign wOut_be__h245345 =
	     { Prelude_inst_changeSpecialWires_1_rg[71:64],
	       fP2I$D_OUT[71:64] } ;
  assign wOut_data__h245346 =
	     { Prelude_inst_changeSpecialWires_1_rg[63:0],
	       fP2I$D_OUT[63:0] } ;
  assign w_be__h111294 =
	     ctop_inf_dp1_tlp_outDwRemain_042_ULE_4___d7372 ?
	       CASE_ctop_inf_dp1_tlp_outDwRemain_BITS_1_TO_0__ETC__q6 :
	       16'd65535 ;
  assign w_be__h32225 =
	     ctop_inf_dp0_tlp_outDwRemain_53_ULE_4___d7830 ?
	       CASE_ctop_inf_dp0_tlp_outDwRemain_BITS_1_TO_0__ETC__q5 :
	       16'd65535 ;
  assign w_data__h110742 =
	     { 22'd1048580,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice$dD_OUT[15:3],
	       11'd256,
	       lastBE__h110766,
	       4'd15,
	       ctop_inf_dp1_tlp_fabMesgAccu,
	       ctop_inf_dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h111720 =
	     { 32'd1073745924,
	       pciDevice$dD_OUT[15:3],
	       19'd65791,
	       ctop_inf_dp1_tlp_fabMetaAddr,
	       ctop_inf_dp1_tlp_fabMeta[103:96],
	       ctop_inf_dp1_tlp_fabMeta[111:104],
	       ctop_inf_dp1_tlp_fabMeta[119:112],
	       ctop_inf_dp1_tlp_fabMeta[127:120] } ;
  assign w_data__h112782 =
	     { ctop_inf_dp1_tlp_fabMeta[71:64],
	       ctop_inf_dp1_tlp_fabMeta[79:72],
	       ctop_inf_dp1_tlp_fabMeta[87:80],
	       ctop_inf_dp1_tlp_fabMeta[95:88],
	       ctop_inf_dp1_tlp_fabMeta[39:32],
	       ctop_inf_dp1_tlp_fabMeta[47:40],
	       ctop_inf_dp1_tlp_fabMeta[55:48],
	       ctop_inf_dp1_tlp_fabMeta[63:56],
	       ctop_inf_dp1_tlp_fabMeta[7:0],
	       ctop_inf_dp1_tlp_fabMeta[15:8],
	       ctop_inf_dp1_tlp_fabMeta[23:16],
	       ctop_inf_dp1_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h115502 =
	     { 32'd1073745921,
	       pciDevice$dD_OUT[15:3],
	       19'd65551,
	       ctop_inf_dp1_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h117686 =
	     { 32'd4100,
	       pciDevice$dD_OUT[15:3],
	       3'd1,
	       tag__h123443,
	       8'd255,
	       ctop_inf_dp1_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h123449 =
	     { 22'd4,
	       thisRequestLength__h123168[11:2],
	       pciDevice$dD_OUT[15:3],
	       3'd1,
	       tag__h123443,
	       lastBE__h123470,
	       4'd15,
	       ctop_inf_dp1_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign w_data__h31673 =
	     { 22'd1048580,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice$dD_OUT[15:3],
	       11'd0,
	       lastBE__h31697,
	       4'd15,
	       ctop_inf_dp0_tlp_fabMesgAccu,
	       ctop_inf_dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h32651 =
	     { 32'd1073745924,
	       pciDevice$dD_OUT[15:3],
	       19'd255,
	       ctop_inf_dp0_tlp_fabMetaAddr,
	       ctop_inf_dp0_tlp_fabMeta[103:96],
	       ctop_inf_dp0_tlp_fabMeta[111:104],
	       ctop_inf_dp0_tlp_fabMeta[119:112],
	       ctop_inf_dp0_tlp_fabMeta[127:120] } ;
  assign w_data__h33713 =
	     { ctop_inf_dp0_tlp_fabMeta[71:64],
	       ctop_inf_dp0_tlp_fabMeta[79:72],
	       ctop_inf_dp0_tlp_fabMeta[87:80],
	       ctop_inf_dp0_tlp_fabMeta[95:88],
	       ctop_inf_dp0_tlp_fabMeta[39:32],
	       ctop_inf_dp0_tlp_fabMeta[47:40],
	       ctop_inf_dp0_tlp_fabMeta[55:48],
	       ctop_inf_dp0_tlp_fabMeta[63:56],
	       ctop_inf_dp0_tlp_fabMeta[7:0],
	       ctop_inf_dp0_tlp_fabMeta[15:8],
	       ctop_inf_dp0_tlp_fabMeta[23:16],
	       ctop_inf_dp0_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h36433 =
	     { 32'd1073745921,
	       pciDevice$dD_OUT[15:3],
	       19'd15,
	       ctop_inf_dp0_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h38617 =
	     { 32'd4100,
	       pciDevice$dD_OUT[15:3],
	       3'd0,
	       tag__h44382,
	       8'd255,
	       ctop_inf_dp0_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h44388 =
	     { 22'd4,
	       thisRequestLength__h44107[11:2],
	       pciDevice$dD_OUT[15:3],
	       3'd0,
	       tag__h44382,
	       lastBE__h44409,
	       4'd15,
	       ctop_inf_dp0_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign wsiBurstLength__h185549 =
	     ctop_app_appW2_smaCtrl[5] ?
	       16'd2 :
	       { 2'd0, ctop_app_appW2_thisMesg[15:2] } ;
  assign wsiBurstLength__h232961 =
	     ctop_app_appW4_smaCtrl[5] ?
	       16'd2 :
	       { 2'd0, ctop_app_appW4_thisMesg[15:2] } ;
  assign x3__h154207 = { 8'd0, ctop_inf_dp1_wmi_wmi_mFlagReg[23:0] } ;
  assign x3__h75146 = { 8'd0, ctop_inf_dp0_wmi_wmi_mFlagReg[23:0] } ;
  assign x__h107185 = { 15'd0, ctop_inf_dp1_tlp_mesgLengthRemainPush } ;
  assign x__h110391 =
	     (ctop_inf_dp1_tlp_mesgLengthRemainPush <= y__h110393) ?
	       ctop_inf_dp1_tlp_mesgLengthRemainPush :
	       y__h110393 ;
  assign x__h110892 = { ctop_inf_dp1_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h119988 = { 15'd0, ctop_inf_dp1_tlp_mesgLengthRemainPull } ;
  assign x__h123201 =
	     (ctop_inf_dp1_tlp_mesgLengthRemainPull <= y__h123203) ?
	       ctop_inf_dp1_tlp_mesgLengthRemainPull :
	       y__h123203 ;
  assign x__h123778 = { ctop_inf_dp1_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h124456 = { ctop_inf_dp1_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h138157 = x__h138159 - y__h138160 ;
  assign x__h138159 = { ctop_inf_dp1_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h159988 =
	     (ctop_inf_dp1_dpControl[1:0] == 2'd1) ?
	       ctop_inf_dp1_bml_fabNumBufs :
	       16'd0 ;
  assign x__h161112 = ctop_inf_dp1_bml_lclBufsAR + 16'd1 ;
  assign x__h161117 = ctop_inf_dp1_bml_lclBufsAR - 16'd1 ;
  assign x__h161189 = ctop_inf_dp1_bml_lclBufsCF + 16'd1 ;
  assign x__h161194 = ctop_inf_dp1_bml_lclBufsCF - 16'd1 ;
  assign x__h161231 = ctop_inf_dp1_bml_fabBufsAvail + 16'd1 ;
  assign x__h161236 = ctop_inf_dp1_bml_fabBufsAvail - 16'd1 ;
  assign x__h161269 = ctop_inf_dp1_bml_lclCredit + 16'd1 ;
  assign x__h161274 = ctop_inf_dp1_bml_lclCredit - 16'd1 ;
  assign x__h183337 = ctop_app_appW2_respF_rRdPtr + 12'd1 ;
  assign x__h185342 =
	     ctop_app_appW2_fabWordsRemain == ctop_app_appW2_fabWordsCurReq ;
  assign x__h186641 =
	     ctop_app_appW2_opcode[8] ? ctop_app_appW2_opcode[7:0] : 8'd0 ;
  assign x__h186655 =
	     ctop_app_appW2_mesgLength[14] ?
	       ctop_app_appW2_mesgLength[13:0] :
	       14'd0 ;
  assign x__h189000 =
	     { ctop_app_appW2_wsiS_statusR, ctop_app_appW2_wsiM_statusR } ;
  assign x__h205550 =
	     CAN_FIRE_RL_ctop_app_appW3_wmwt_mesg_ingress ?
	       ctop_app_appW3_wsiS_reqFifo$D_OUT[43:12] :
	       32'd0 ;
  assign x__h205651 = ctop_app_appW3_mesgWF_rRdPtr + 13'd1 ;
  assign x__h208786 = { 96'd0, ctop_app_appW3_metaWF$D_OUT } ;
  assign x__h208813 =
	     { 64'd0,
	       ctop_app_appW3_metaWF$D_OUT,
	       ctop_app_appW3_wrtSerStage } ;
  assign x__h209436 = { 96'd0, data__h209151 } ;
  assign x__h209460 = { 64'd0, data__h209151, ctop_app_appW3_wrtSerStage } ;
  assign x__h209918 = { ctop_app_appW3_dlyWAG, 4'h0 } ;
  assign x__h210255 = { ctop_app_appW3_dlyRAG, 4'h0 } ;
  assign x__h212931 =
	     { ctop_app_appW3_wmemi_statusR,
	       ctop_app_appW3_wsiS_statusR,
	       ctop_app_appW3_wsiM_statusR } ;
  assign x__h230749 = ctop_app_appW4_respF_rRdPtr + 12'd1 ;
  assign x__h232754 =
	     ctop_app_appW4_fabWordsRemain == ctop_app_appW4_fabWordsCurReq ;
  assign x__h234053 =
	     ctop_app_appW4_opcode[8] ? ctop_app_appW4_opcode[7:0] : 8'd0 ;
  assign x__h234067 =
	     ctop_app_appW4_mesgLength[14] ?
	       ctop_app_appW4_mesgLength[13:0] :
	       14'd0 ;
  assign x__h236412 =
	     { ctop_app_appW4_wsiS_statusR, ctop_app_appW4_wsiM_statusR } ;
  assign x__h28116 = { 15'd0, ctop_inf_dp0_tlp_mesgLengthRemainPush } ;
  assign x__h31322 =
	     (ctop_inf_dp0_tlp_mesgLengthRemainPush <= y__h31324) ?
	       ctop_inf_dp0_tlp_mesgLengthRemainPush :
	       y__h31324 ;
  assign x__h31823 = { ctop_inf_dp0_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h40927 = { 15'd0, ctop_inf_dp0_tlp_mesgLengthRemainPull } ;
  assign x__h44140 =
	     (ctop_inf_dp0_tlp_mesgLengthRemainPull <= y__h44142) ?
	       ctop_inf_dp0_tlp_mesgLengthRemainPull :
	       y__h44142 ;
  assign x__h44717 = { ctop_inf_dp0_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h45395 = { ctop_inf_dp0_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h59096 = x__h59098 - y__h59099 ;
  assign x__h59098 = { ctop_inf_dp0_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h80930 =
	     (ctop_inf_dp0_dpControl[1:0] == 2'd1) ?
	       ctop_inf_dp0_bml_fabNumBufs :
	       16'd0 ;
  assign x__h82054 = ctop_inf_dp0_bml_lclBufsAR + 16'd1 ;
  assign x__h82059 = ctop_inf_dp0_bml_lclBufsAR - 16'd1 ;
  assign x__h82131 = ctop_inf_dp0_bml_lclBufsCF + 16'd1 ;
  assign x__h82136 = ctop_inf_dp0_bml_lclBufsCF - 16'd1 ;
  assign x__h82173 = ctop_inf_dp0_bml_fabBufsAvail + 16'd1 ;
  assign x__h82178 = ctop_inf_dp0_bml_fabBufsAvail - 16'd1 ;
  assign x__h82211 = ctop_inf_dp0_bml_lclCredit + 16'd1 ;
  assign x__h82216 = ctop_inf_dp0_bml_lclCredit - 16'd1 ;
  assign x_burstLength__h212397 =
	     (ctop_app_appW3_readMeta[23:0] == 24'd0) ?
	       12'd1 :
	       ctop_app_appW3_readMeta[13:2] ;
  assign x_byteEn__h212398 =
	     (ctop_app_appW3_readMeta[23:0] == 24'd0) ? 4'd0 : 4'd15 ;
  assign x_length__h186637 = { 2'd0, x__h186655 } ;
  assign x_length__h234049 = { 2'd0, x__h234067 } ;
  assign y__h110378 = { 4'd0, thisRequestLength__h110338 } ;
  assign y__h110393 = { 4'd0, ctop_inf_dp1_tlp_maxPayloadSize } ;
  assign y__h110472 = { 19'd0, thisRequestLength__h110338 } ;
  assign y__h110520 = { 3'd0, thisRequestLength__h110338 } ;
  assign y__h110889 = { 22'd0, x__h110892 } ;
  assign y__h123193 = { 4'd0, thisRequestLength__h123168 } ;
  assign y__h123203 = { 4'd0, ctop_inf_dp1_tlp_maxReadReqSize } ;
  assign y__h123264 = { 19'd0, thisRequestLength__h123168 } ;
  assign y__h123775 = { 6'd0, x__h123778 } ;
  assign y__h124453 =
	     ctop_inf_dp1_tlp_dmaPullRemainDWSub_273_ULE_4___d8261 ?
	       { 7'd0, x__h124456 } :
	       17'd16 ;
  assign y__h138158 =
	     (ctop_inf_dp1_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h138189 } ;
  assign y__h138160 = { 10'd0, x__h138166 } ;
  assign y__h31309 = { 4'd0, thisRequestLength__h31269 } ;
  assign y__h31324 = { 4'd0, ctop_inf_dp0_tlp_maxPayloadSize } ;
  assign y__h31403 = { 19'd0, thisRequestLength__h31269 } ;
  assign y__h31451 = { 3'd0, thisRequestLength__h31269 } ;
  assign y__h31820 = { 22'd0, x__h31823 } ;
  assign y__h44132 = { 4'd0, thisRequestLength__h44107 } ;
  assign y__h44142 = { 4'd0, ctop_inf_dp0_tlp_maxReadReqSize } ;
  assign y__h44203 = { 19'd0, thisRequestLength__h44107 } ;
  assign y__h44714 = { 6'd0, x__h44717 } ;
  assign y__h45392 =
	     ctop_inf_dp0_tlp_dmaPullRemainDWSub_087_ULE_4___d7370 ?
	       { 7'd0, x__h45395 } :
	       17'd16 ;
  assign y__h59097 =
	     (ctop_inf_dp0_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h59128 } ;
  assign y__h59099 = { 10'd0, x__h59105 } ;
  assign y_avValue__h155803 =
	     ctop_inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterB_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory$DOB ;
  assign y_avValue__h155823 =
	     ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory_1$DOB ;
  assign y_avValue__h155843 =
	     ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory_2$DOB ;
  assign y_avValue__h155863 =
	     ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$D_OUT :
	       ctop_inf_dp1_bram_memory_3$DOB ;
  assign y_avValue__h76742 =
	     ctop_inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterB_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory$DOB ;
  assign y_avValue__h76762 =
	     ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory_1$DOB ;
  assign y_avValue__h76782 =
	     ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory_2$DOB ;
  assign y_avValue__h76802 =
	     ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$D_OUT :
	       ctop_inf_dp0_bram_memory_3$DOB ;
  always@(ctop_inf_dp0_tlp_readReq$D_OUT)
  begin
    case (ctop_inf_dp0_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h59105 = 2'b10;
      4'b1110: x__h59105 = 2'b01;
      4'b1111: x__h59105 = 2'b0;
      default: x__h59105 = 2'b11;
    endcase
  end
  always@(ctop_inf_dp0_tlp_readReq$D_OUT)
  begin
    case (ctop_inf_dp0_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h59128 = 2'b10;
      4'b1110: x__h59128 = 2'b01;
      4'b1111: x__h59128 = 2'b0;
      default: x__h59128 = 2'b11;
    endcase
  end
  always@(ctop_inf_dp1_tlp_readReq$D_OUT)
  begin
    case (ctop_inf_dp1_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h138166 = 2'b10;
      4'b1110: x__h138166 = 2'b01;
      4'b1111: x__h138166 = 2'b0;
      default: x__h138166 = 2'b11;
    endcase
  end
  always@(ctop_inf_dp1_tlp_readReq$D_OUT)
  begin
    case (ctop_inf_dp1_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h138189 = 2'b10;
      4'b1110: x__h138189 = 2'b01;
      4'b1111: x__h138189 = 2'b0;
      default: x__h138189 = 2'b11;
    endcase
  end
  always@(ctop_app_appW3_rdSerPos or
	  ctop_app_appW3_rdSerStage_3 or
	  ctop_app_appW3_wide16Fc$D_OUT or
	  ctop_app_appW3_rdSerStage_1 or ctop_app_appW3_rdSerStage_2)
  begin
    case (ctop_app_appW3_rdSerPos)
      2'd0: v__h210525 = ctop_app_appW3_wide16Fc$D_OUT[31:0];
      2'd1: v__h210525 = ctop_app_appW3_rdSerStage_1;
      2'd2: v__h210525 = ctop_app_appW3_rdSerStage_2;
      2'd3: v__h210525 = ctop_app_appW3_rdSerStage_3;
    endcase
  end
  always@(ctop_inf_dp0_wmi_p4B or
	  y_avValue__h76802 or
	  y_avValue__h76742 or y_avValue__h76762 or y_avValue__h76782)
  begin
    case (ctop_inf_dp0_wmi_p4B)
      2'd0: rdata__h76906 = y_avValue__h76742;
      2'd1: rdata__h76906 = y_avValue__h76762;
      2'd2: rdata__h76906 = y_avValue__h76782;
      2'd3: rdata__h76906 = y_avValue__h76802;
    endcase
  end
  always@(ctop_inf_dp1_wmi_p4B or
	  y_avValue__h155863 or
	  y_avValue__h155803 or y_avValue__h155823 or y_avValue__h155843)
  begin
    case (ctop_inf_dp1_wmi_p4B)
      2'd0: rdata__h155967 = y_avValue__h155803;
      2'd1: rdata__h155967 = y_avValue__h155823;
      2'd2: rdata__h155967 = y_avValue__h155843;
      2'd3: rdata__h155967 = y_avValue__h155863;
    endcase
  end
  always@(ctop_inf_dp0_tlp_readReq$D_OUT)
  begin
    case (ctop_inf_dp0_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h58983 = 2'b11;
      4'b1100: lowAddr10__h58983 = 2'b10;
      4'b1110: lowAddr10__h58983 = 2'b01;
      default: lowAddr10__h58983 = 2'b0;
    endcase
  end
  always@(ctop_inf_dp0_wci_reqF$D_OUT or
	  rdat__h83786 or
	  rdat__h83794 or
	  rdat__h83802 or
	  rdat__h83810 or
	  rdat__h83818 or
	  rdat__h83826 or
	  rdat__h83834 or
	  rdat__h83855 or
	  rdat__h83860 or
	  rdat__h83871 or
	  rdat__h83876 or
	  ctop_inf_dp0_bml_fabMesgBase or
	  ctop_inf_dp0_bml_fabMetaBase or
	  ctop_inf_dp0_bml_fabMesgSize or
	  ctop_inf_dp0_bml_fabMetaSize or
	  ctop_inf_dp0_bml_fabFlowBase or
	  ctop_inf_dp0_bml_fabFlowSize or rdat__h83937)
  begin
    case (ctop_inf_dp0_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h83707 = rdat__h83786;
      8'h04: _theResult____h83707 = rdat__h83794;
      8'h08: _theResult____h83707 = rdat__h83802;
      8'h0C: _theResult____h83707 = rdat__h83810;
      8'h10: _theResult____h83707 = rdat__h83818;
      8'h14: _theResult____h83707 = rdat__h83826;
      8'h20: _theResult____h83707 = rdat__h83834;
      8'h24: _theResult____h83707 = 32'hF00DFACE;
      8'h28: _theResult____h83707 = rdat__h83855;
      8'h2C: _theResult____h83707 = rdat__h83860;
      8'h30: _theResult____h83707 = rdat__h83871;
      8'h34: _theResult____h83707 = rdat__h83876;
      8'h48: _theResult____h83707 = 32'hDADEBABE;
      8'h4C: _theResult____h83707 = 32'h00008000;
      8'h50: _theResult____h83707 = ctop_inf_dp0_bml_fabMesgBase;
      8'h54: _theResult____h83707 = ctop_inf_dp0_bml_fabMetaBase;
      8'h58: _theResult____h83707 = ctop_inf_dp0_bml_fabMesgSize;
      8'h5C: _theResult____h83707 = ctop_inf_dp0_bml_fabMetaSize;
      8'h60: _theResult____h83707 = ctop_inf_dp0_bml_fabFlowBase;
      8'h64: _theResult____h83707 = ctop_inf_dp0_bml_fabFlowSize;
      8'h68: _theResult____h83707 = rdat__h83937;
      default: _theResult____h83707 = 32'd0;
    endcase
  end
  always@(ctop_inf_dp1_tlp_readReq$D_OUT)
  begin
    case (ctop_inf_dp1_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h138044 = 2'b11;
      4'b1100: lowAddr10__h138044 = 2'b10;
      4'b1110: lowAddr10__h138044 = 2'b01;
      default: lowAddr10__h138044 = 2'b0;
    endcase
  end
  always@(ctop_inf_dp1_wci_reqF$D_OUT or
	  rdat__h162844 or
	  rdat__h162852 or
	  rdat__h162860 or
	  rdat__h162868 or
	  rdat__h162876 or
	  rdat__h162884 or
	  rdat__h162892 or
	  rdat__h162913 or
	  rdat__h162918 or
	  rdat__h162929 or
	  rdat__h162934 or
	  ctop_inf_dp1_bml_fabMesgBase or
	  ctop_inf_dp1_bml_fabMetaBase or
	  ctop_inf_dp1_bml_fabMesgSize or
	  ctop_inf_dp1_bml_fabMetaSize or
	  ctop_inf_dp1_bml_fabFlowBase or
	  ctop_inf_dp1_bml_fabFlowSize or rdat__h162995)
  begin
    case (ctop_inf_dp1_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h162765 = rdat__h162844;
      8'h04: _theResult____h162765 = rdat__h162852;
      8'h08: _theResult____h162765 = rdat__h162860;
      8'h0C: _theResult____h162765 = rdat__h162868;
      8'h10: _theResult____h162765 = rdat__h162876;
      8'h14: _theResult____h162765 = rdat__h162884;
      8'h20: _theResult____h162765 = rdat__h162892;
      8'h24: _theResult____h162765 = 32'hF00DFACE;
      8'h28: _theResult____h162765 = rdat__h162913;
      8'h2C: _theResult____h162765 = rdat__h162918;
      8'h30: _theResult____h162765 = rdat__h162929;
      8'h34: _theResult____h162765 = rdat__h162934;
      8'h48: _theResult____h162765 = 32'hDADEBABE;
      8'h4C: _theResult____h162765 = 32'h00008000;
      8'h50: _theResult____h162765 = ctop_inf_dp1_bml_fabMesgBase;
      8'h54: _theResult____h162765 = ctop_inf_dp1_bml_fabMetaBase;
      8'h58: _theResult____h162765 = ctop_inf_dp1_bml_fabMesgSize;
      8'h5C: _theResult____h162765 = ctop_inf_dp1_bml_fabMetaSize;
      8'h60: _theResult____h162765 = ctop_inf_dp1_bml_fabFlowBase;
      8'h64: _theResult____h162765 = ctop_inf_dp1_bml_fabFlowSize;
      8'h68: _theResult____h162765 = rdat__h162995;
      default: _theResult____h162765 = 32'd0;
    endcase
  end
  always@(ctop_inf_dp0_dpControl or
	  ctop_inf_dp0_bml_fabDone or ctop_inf_dp0_bml_remDone)
  begin
    case (ctop_inf_dp0_dpControl[1:0])
      2'd0:
	  IF_ctop_inf_dp0_bml_dpControl_wget__992_BITS_1_ETC___d2069 =
	      ctop_inf_dp0_bml_fabDone;
      2'd1:
	  IF_ctop_inf_dp0_bml_dpControl_wget__992_BITS_1_ETC___d2069 =
	      ctop_inf_dp0_bml_remDone;
      default: IF_ctop_inf_dp0_bml_dpControl_wget__992_BITS_1_ETC___d2069 =
		   ctop_inf_dp0_bml_fabDone;
    endcase
  end
  always@(ctop_inf_dp1_dpControl or
	  ctop_inf_dp1_bml_fabDone or ctop_inf_dp1_bml_remDone)
  begin
    case (ctop_inf_dp1_dpControl[1:0])
      2'd0:
	  IF_ctop_inf_dp1_bml_dpControl_wget__178_BITS_1_ETC___d4255 =
	      ctop_inf_dp1_bml_fabDone;
      2'd1:
	  IF_ctop_inf_dp1_bml_dpControl_wget__178_BITS_1_ETC___d4255 =
	      ctop_inf_dp1_bml_remDone;
      default: IF_ctop_inf_dp1_bml_dpControl_wget__178_BITS_1_ETC___d4255 =
		   ctop_inf_dp1_bml_fabDone;
    endcase
  end
  always@(ctop_app_appW3_wrtSerPos or ctop_app_appW3_wide16Fa$FULL_N)
  begin
    case (ctop_app_appW3_wrtSerPos)
      2'd0, 2'd1, 2'd2:
	  CASE_ctop_app_appW3_wrtSerPos_NOT_ctop_app_app_ETC__q1 =
	      ctop_app_appW3_wide16Fa$FULL_N;
      2'd3:
	  CASE_ctop_app_appW3_wrtSerPos_NOT_ctop_app_app_ETC__q1 =
	      ctop_app_appW3_wrtSerPos != 2'd3 ||
	      ctop_app_appW3_wide16Fa$FULL_N;
    endcase
  end
  always@(ctop_app_appW3_wrtSerPos)
  begin
    case (ctop_app_appW3_wrtSerPos)
      2'd0, 2'd1, 2'd2, 2'd3:
	  CASE_ctop_app_appW3_wrtSerPos_0b1_0_1_1_1_2_1__ETC__q2 = 1'd1;
    endcase
  end
  always@(ctop_inf_dp0_dpControl or
	  ctop_inf_dp0_bml_fabDone or
	  ctop_inf_dp0_bml_remDone or ctop_inf_dp0_bml_remStart)
  begin
    case (ctop_inf_dp0_dpControl[1:0])
      2'd0:
	  CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_ctop_i_ETC__q3 =
	      ctop_inf_dp0_bml_fabDone;
      2'd1:
	  CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_ctop_i_ETC__q3 =
	      (ctop_inf_dp0_dpControl[3:2] == 2'd1) ?
		ctop_inf_dp0_bml_remDone :
		ctop_inf_dp0_bml_remStart;
      default: CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_ctop_i_ETC__q3 =
		   ctop_inf_dp0_bml_fabDone;
    endcase
  end
  always@(ctop_inf_dp1_dpControl or
	  ctop_inf_dp1_bml_fabDone or
	  ctop_inf_dp1_bml_remDone or ctop_inf_dp1_bml_remStart)
  begin
    case (ctop_inf_dp1_dpControl[1:0])
      2'd0:
	  CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_ctop_i_ETC__q4 =
	      ctop_inf_dp1_bml_fabDone;
      2'd1:
	  CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_ctop_i_ETC__q4 =
	      (ctop_inf_dp1_dpControl[3:2] == 2'd1) ?
		ctop_inf_dp1_bml_remDone :
		ctop_inf_dp1_bml_remStart;
      default: CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_ctop_i_ETC__q4 =
		   ctop_inf_dp1_bml_fabDone;
    endcase
  end
  always@(ctop_inf_dp0_tlp_outDwRemain)
  begin
    case (ctop_inf_dp0_tlp_outDwRemain[1:0])
      2'b0: CASE_ctop_inf_dp0_tlp_outDwRemain_BITS_1_TO_0__ETC__q5 = 16'hFFFF;
      2'b01:
	  CASE_ctop_inf_dp0_tlp_outDwRemain_BITS_1_TO_0__ETC__q5 = 16'hF000;
      2'b10:
	  CASE_ctop_inf_dp0_tlp_outDwRemain_BITS_1_TO_0__ETC__q5 = 16'hFF00;
      2'd3: CASE_ctop_inf_dp0_tlp_outDwRemain_BITS_1_TO_0__ETC__q5 = 16'hFFF0;
    endcase
  end
  always@(ctop_inf_dp1_tlp_outDwRemain)
  begin
    case (ctop_inf_dp1_tlp_outDwRemain[1:0])
      2'b0: CASE_ctop_inf_dp1_tlp_outDwRemain_BITS_1_TO_0__ETC__q6 = 16'hFFFF;
      2'b01:
	  CASE_ctop_inf_dp1_tlp_outDwRemain_BITS_1_TO_0__ETC__q6 = 16'hF000;
      2'b10:
	  CASE_ctop_inf_dp1_tlp_outDwRemain_BITS_1_TO_0__ETC__q6 = 16'hFF00;
      2'd3: CASE_ctop_inf_dp1_tlp_outDwRemain_BITS_1_TO_0__ETC__q6 = 16'hFFF0;
    endcase
  end
  always@(idx__h49806 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h49806)
      2'd0:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1229 =
	      ctop_inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1229 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1229 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1229 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h52029 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h52029)
      2'd0:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1239 =
	      ctop_inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1239 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1239 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1239 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h53325 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h53325)
      2'd0:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1249 =
	      ctop_inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1249 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1249 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1249 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h54621 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h54621)
      2'd0:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1259 =
	      ctop_inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1259 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1259 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d1259 =
	      ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h128867 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h128867)
      2'd0:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3415 =
	      ctop_inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3415 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3415 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3415 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(idx__h131090 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h131090)
      2'd0:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3425 =
	      ctop_inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3425 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3425 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3425 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(idx__h132386 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h132386)
      2'd0:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3435 =
	      ctop_inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3435 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3435 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3435 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(idx__h133682 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h133682)
      2'd0:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3445 =
	      ctop_inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3445 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3445 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d3445 =
	      ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(ctop_inf_dp0_tlp_mReqF$D_OUT or
	  ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265 or
	  ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262 or
	  ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263 or
	  ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264)
  begin
    case (ctop_inf_dp0_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q7 =
	      ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262;
      2'd1:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q7 =
	      ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263;
      2'd2:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q7 =
	      ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264;
      2'd3:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q7 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265;
    endcase
  end
  always@(ctop_inf_dp0_tlp_mReqF$D_OUT or
	  ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265 or
	  ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262 or
	  ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263 or
	  ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264)
  begin
    case (ctop_inf_dp0_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q8 =
	      ctop_inf_dp0_bram_serverAdapterA_cnt_7_SLT_3___d8262;
      2'd1:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q8 =
	      ctop_inf_dp0_bram_serverAdapterA_1_cnt_15_SLT_3___d8263;
      2'd2:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q8 =
	      ctop_inf_dp0_bram_serverAdapterA_2_cnt_33_SLT_3___d8264;
      2'd3:
	  CASE_ctop_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q8 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      ctop_inf_dp0_bram_serverAdapterA_3_cnt_51_SLT_3___d8265;
    endcase
  end
  always@(ctop_inf_dp1_tlp_mReqF$D_OUT or
	  ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268 or
	  ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266 or
	  ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267 or
	  ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534)
  begin
    case (ctop_inf_dp1_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q9 =
	      ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266;
      2'd1:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q9 =
	      ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267;
      2'd2:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q9 =
	      ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534;
      2'd3:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_5_ETC__q9 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268;
    endcase
  end
  always@(ctop_inf_dp1_tlp_mReqF$D_OUT or
	  ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268 or
	  ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266 or
	  ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267 or
	  ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534)
  begin
    case (ctop_inf_dp1_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q10 =
	      ctop_inf_dp1_bram_serverAdapterA_cnt_290_SLT_3___d8266;
      2'd1:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q10 =
	      ctop_inf_dp1_bram_serverAdapterA_1_cnt_408_SLT_3___d8267;
      2'd2:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q10 =
	      ctop_inf_dp1_bram_serverAdapterA_2_cnt_526_SLT_3___d7534;
      2'd3:
	  CASE_ctop_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_2_ETC__q10 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      ctop_inf_dp1_bram_serverAdapterA_3_cnt_644_SLT_3___d8268;
    endcase
  end
  always@(ctop_inf_dp0_wmi_addr or
	  ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_SLT_3___d1739 or
	  ctop_inf_dp0_bram_serverAdapterB_cnt_56_SLT_3___d1736 or
	  ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_SLT_3___d1737 or
	  ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_SLT_3___d1738)
  begin
    case (ctop_inf_dp0_wmi_addr[3:2])
      2'd0:
	  IF_ctop_inf_dp0_wmi_addr_824_BITS_3_TO_2_825_E_ETC___d7577 =
	      ctop_inf_dp0_bram_serverAdapterB_cnt_56_SLT_3___d1736;
      2'd1:
	  IF_ctop_inf_dp0_wmi_addr_824_BITS_3_TO_2_825_E_ETC___d7577 =
	      ctop_inf_dp0_bram_serverAdapterB_1_cnt_74_SLT_3___d1737;
      2'd2:
	  IF_ctop_inf_dp0_wmi_addr_824_BITS_3_TO_2_825_E_ETC___d7577 =
	      ctop_inf_dp0_bram_serverAdapterB_2_cnt_92_SLT_3___d1738;
      2'd3:
	  IF_ctop_inf_dp0_wmi_addr_824_BITS_3_TO_2_825_E_ETC___d7577 =
	      ctop_inf_dp0_wmi_addr[3:2] != 2'd3 ||
	      ctop_inf_dp0_bram_serverAdapterB_3_cnt_10_SLT_3___d1739;
    endcase
  end
  always@(ctop_inf_dp0_dpControl or
	  ctop_inf_dp0_bml_fabDone or
	  ctop_inf_dp0_bml_remDone or ctop_inf_dp0_bml_remStart)
  begin
    case (ctop_inf_dp0_dpControl[1:0])
      2'd0:
	  CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q11 =
	      !ctop_inf_dp0_bml_fabDone;
      2'd1:
	  CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q11 =
	      (ctop_inf_dp0_dpControl[3:2] == 2'd1) ?
		!ctop_inf_dp0_bml_remDone :
		!ctop_inf_dp0_bml_remStart;
      default: CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q11 =
		   !ctop_inf_dp0_bml_fabDone;
    endcase
  end
  always@(ctop_inf_dp1_wmi_addr or
	  ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_SLT_3___d3925 or
	  ctop_inf_dp1_bram_serverAdapterB_cnt_349_SLT_3___d3922 or
	  ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_SLT_3___d3923 or
	  ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_SLT_3___d3924)
  begin
    case (ctop_inf_dp1_wmi_addr[3:2])
      2'd0:
	  IF_ctop_inf_dp1_wmi_addr_010_BITS_3_TO_2_011_E_ETC___d7567 =
	      ctop_inf_dp1_bram_serverAdapterB_cnt_349_SLT_3___d3922;
      2'd1:
	  IF_ctop_inf_dp1_wmi_addr_010_BITS_3_TO_2_011_E_ETC___d7567 =
	      ctop_inf_dp1_bram_serverAdapterB_1_cnt_467_SLT_3___d3923;
      2'd2:
	  IF_ctop_inf_dp1_wmi_addr_010_BITS_3_TO_2_011_E_ETC___d7567 =
	      ctop_inf_dp1_bram_serverAdapterB_2_cnt_585_SLT_3___d3924;
      2'd3:
	  IF_ctop_inf_dp1_wmi_addr_010_BITS_3_TO_2_011_E_ETC___d7567 =
	      ctop_inf_dp1_wmi_addr[3:2] != 2'd3 ||
	      ctop_inf_dp1_bram_serverAdapterB_3_cnt_703_SLT_3___d3925;
    endcase
  end
  always@(ctop_inf_dp1_dpControl or
	  ctop_inf_dp1_bml_fabDone or
	  ctop_inf_dp1_bml_remDone or ctop_inf_dp1_bml_remStart)
  begin
    case (ctop_inf_dp1_dpControl[1:0])
      2'd0:
	  CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q12 =
	      !ctop_inf_dp1_bml_fabDone;
      2'd1:
	  CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q12 =
	      (ctop_inf_dp1_dpControl[3:2] == 2'd1) ?
		!ctop_inf_dp1_bml_remDone :
		!ctop_inf_dp1_bml_remStart;
      default: CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q12 =
		   !ctop_inf_dp1_bml_fabDone;
    endcase
  end
  always@(idx__h49806 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h49806)
      2'd0:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7429 =
	      ctop_inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7429 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7429 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7429 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h52029 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h52029)
      2'd0:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7430 =
	      ctop_inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7430 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7430 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7430 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h53325 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h53325)
      2'd0:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7474 =
	      ctop_inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7474 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7474 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7474 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h54621 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338 or
	  ctop_inf_dp0_tlp_writeRemainDWLen or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401 or
	  ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386)
  begin
    case (idx__h54621)
      2'd0:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7431 =
	      ctop_inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7431 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_1___d7401;
      2'd2:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7431 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_2___d7386;
      2'd3:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7431 =
	      !ctop_inf_dp0_tlp_writeRemainDWLen_216_ULE_3___d7338;
    endcase
  end
  always@(idx__h128867 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h128867)
      2'd0:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7457 =
	      ctop_inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7457 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7457 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7457 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(idx__h131090 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h131090)
      2'd0:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7458 =
	      ctop_inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7458 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7458 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7458 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(idx__h132386 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h132386)
      2'd0:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7459 =
	      ctop_inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7459 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7459 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7459 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(idx__h133682 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399 or
	  ctop_inf_dp1_tlp_writeRemainDWLen or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339 or
	  ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387)
  begin
    case (idx__h133682)
      2'd0:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7460 =
	      ctop_inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7460 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_1___d7339;
      2'd2:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7460 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_2___d7387;
      2'd3:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7460 =
	      !ctop_inf_dp1_tlp_writeRemainDWLen_402_ULE_3___d7399;
    endcase
  end
  always@(idx__h49806 or ctop_inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h49806)
      2'd0:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7681 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h52029 or ctop_inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h52029)
      2'd0:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7682 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h53325 or ctop_inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h53325)
      2'd0:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7683 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h54621 or ctop_inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h54621)
      2'd0:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_ctop_inf_dp0_tlp_writeDWAddr_212_BI_ETC___d7684 =
	      ctop_inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h128867 or ctop_inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h128867)
      2'd0:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7686 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h131090 or ctop_inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h131090)
      2'd0:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7687 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h132386 or ctop_inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h132386)
      2'd0:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7688 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h133682 or ctop_inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h133682)
      2'd0:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_ctop_inf_dp1_tlp_writeDWAddr_398_BI_ETC___d7689 =
	      ctop_inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1 or
	  MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise or
	  MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1:
	  value__h173593 = 32'hAAAAAAAA /* unspecified value */ ;
      MUX_ctop_app_appW2_endOfMessage$write_1__SEL_1:
	  value__h173593 = MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW2_wmwt_requestPrecise:
	  value__h173593 = MUX_ctop_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3;
      default: value__h173593 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1 or
	  MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise or
	  MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1:
	  value__h221012 = 32'hAAAAAAAA /* unspecified value */ ;
      MUX_ctop_app_appW4_endOfMessage$write_1__SEL_1:
	  value__h221012 = MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_ctop_app_appW4_wmwt_requestPrecise:
	  value__h221012 = MUX_ctop_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3;
      default: value__h221012 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(ctop_inf_dp0_dpControl or
	  ctop_inf_dp0_bml_fabDone or ctop_inf_dp0_bml_remDone)
  begin
    case (ctop_inf_dp0_dpControl[1:0])
      2'd0:
	  CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q13 =
	      !ctop_inf_dp0_bml_fabDone;
      2'd1:
	  CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q13 =
	      !ctop_inf_dp0_bml_remDone;
      default: CASE_ctop_inf_dp0_dpControl_BITS_1_TO_0_NOT_ct_ETC__q13 =
		   !ctop_inf_dp0_bml_fabDone;
    endcase
  end
  always@(ctop_inf_dp1_dpControl or
	  ctop_inf_dp1_bml_fabDone or ctop_inf_dp1_bml_remDone)
  begin
    case (ctop_inf_dp1_dpControl[1:0])
      2'd0:
	  CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q21 =
	      !ctop_inf_dp1_bml_fabDone;
      2'd1:
	  CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q21 =
	      !ctop_inf_dp1_bml_remDone;
      default: CASE_ctop_inf_dp1_dpControl_BITS_1_TO_0_NOT_ct_ETC__q21 =
		   !ctop_inf_dp1_bml_fabDone;
    endcase
  end
  always@(ctop_inf_dp0_tlp_readReq$D_OUT or
	  ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas or
	  ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas or
	  ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (ctop_inf_dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1461 =
	      ctop_inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1461 =
	      ctop_inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d1461 =
		   ctop_inf_dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   ctop_inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   ctop_inf_dp0_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(ctop_inf_dp0_tlp_readReq$D_OUT or
	  ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget or
	  ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget or
	  ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget or
	  ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (ctop_inf_dp0_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685 =
	      ctop_inf_dp0_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685 =
	      ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685 =
	      ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_ctop_inf_dp0_tlp_readReq_first__446_BITS_30_ETC___d7685 =
	      ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(ctop_inf_dp0_tlp_readReq$D_OUT or
	  ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$whas or
	  ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$whas or
	  ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (ctop_inf_dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_ctop_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_ETC__q29 =
	      ctop_inf_dp0_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_ctop_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_ETC__q29 =
	      ctop_inf_dp0_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_ctop_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_ETC__q29 =
		   ctop_inf_dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   ctop_inf_dp0_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(ctop_inf_dp0_wmi_p4B or
	  ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas or
	  ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas or
	  ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (ctop_inf_dp0_wmi_p4B)
      2'd1:
	  IF_ctop_inf_dp0_wmi_p4B_878_EQ_1_881_THEN_ctop_ETC___d1887 =
	      ctop_inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_ctop_inf_dp0_wmi_p4B_878_EQ_1_881_THEN_ctop_ETC___d1887 =
	      ctop_inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp0_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_ctop_inf_dp0_wmi_p4B_878_EQ_1_881_THEN_ctop_ETC___d1887 =
		   ctop_inf_dp0_wmi_p4B != 2'd3 ||
		   ctop_inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   ctop_inf_dp0_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(ctop_inf_dp0_wmi_p4B or
	  ctop_inf_dp0_bram_serverAdapterB_3_outData_outData$whas or
	  ctop_inf_dp0_bram_serverAdapterB_1_outData_outData$whas or
	  ctop_inf_dp0_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (ctop_inf_dp0_wmi_p4B)
      2'd1:
	  CASE_ctop_inf_dp0_wmi_p4B_NOT_ctop_inf_dp0_wmi_ETC__q30 =
	      ctop_inf_dp0_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_ctop_inf_dp0_wmi_p4B_NOT_ctop_inf_dp0_wmi_ETC__q30 =
	      ctop_inf_dp0_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_ctop_inf_dp0_wmi_p4B_NOT_ctop_inf_dp0_wmi_ETC__q30 =
		   ctop_inf_dp0_wmi_p4B != 2'd3 ||
		   ctop_inf_dp0_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(ctop_inf_dp1_tlp_readReq$D_OUT or
	  ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas or
	  ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas or
	  ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (ctop_inf_dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3647 =
	      ctop_inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3647 =
	      ctop_inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d3647 =
		   ctop_inf_dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   ctop_inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   ctop_inf_dp1_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(ctop_inf_dp1_tlp_readReq$D_OUT or
	  ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget or
	  ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget or
	  ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget or
	  ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (ctop_inf_dp1_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535 =
	      ctop_inf_dp1_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535 =
	      ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535 =
	      ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_ctop_inf_dp1_tlp_readReq_first__632_BITS_30_ETC___d7535 =
	      ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(ctop_inf_dp1_tlp_readReq$D_OUT or
	  ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$whas or
	  ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$whas or
	  ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (ctop_inf_dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_ctop_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_ETC__q31 =
	      ctop_inf_dp1_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_ctop_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_ETC__q31 =
	      ctop_inf_dp1_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_ctop_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_ETC__q31 =
		   ctop_inf_dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   ctop_inf_dp1_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(ctop_inf_dp1_wmi_p4B or
	  ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas or
	  ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas or
	  ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (ctop_inf_dp1_wmi_p4B)
      2'd1:
	  IF_ctop_inf_dp1_wmi_p4B_064_EQ_1_067_THEN_ctop_ETC___d4073 =
	      ctop_inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_ctop_inf_dp1_wmi_p4B_064_EQ_1_067_THEN_ctop_ETC___d4073 =
	      ctop_inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      ctop_inf_dp1_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_ctop_inf_dp1_wmi_p4B_064_EQ_1_067_THEN_ctop_ETC___d4073 =
		   ctop_inf_dp1_wmi_p4B != 2'd3 ||
		   ctop_inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   ctop_inf_dp1_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(ctop_inf_dp1_wmi_p4B or
	  ctop_inf_dp1_bram_serverAdapterB_3_outData_outData$whas or
	  ctop_inf_dp1_bram_serverAdapterB_1_outData_outData$whas or
	  ctop_inf_dp1_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (ctop_inf_dp1_wmi_p4B)
      2'd1:
	  CASE_ctop_inf_dp1_wmi_p4B_NOT_ctop_inf_dp1_wmi_ETC__q32 =
	      ctop_inf_dp1_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_ctop_inf_dp1_wmi_p4B_NOT_ctop_inf_dp1_wmi_ETC__q32 =
	      ctop_inf_dp1_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_ctop_inf_dp1_wmi_p4B_NOT_ctop_inf_dp1_wmi_ETC__q32 =
		   ctop_inf_dp1_wmi_p4B != 2'd3 ||
		   ctop_inf_dp1_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(ctop_app_appW2_wci_reqF$D_OUT or
	  ctop_app_appW2_smaCtrl or
	  ctop_app_appW2_mesgCount or
	  ctop_app_appW2_abortCount or
	  ctop_app_appW2_thisMesg or
	  ctop_app_appW2_lastMesg or
	  rdat__h188997 or
	  ctop_app_appW2_wsiS_extStatusW$wget or
	  ctop_app_appW2_wsiM_extStatusW$wget)
  begin
    case (ctop_app_appW2_wci_reqF$D_OUT[39:32])
      8'h0: x_data__h188904 = ctop_app_appW2_smaCtrl;
      8'h04: x_data__h188904 = ctop_app_appW2_mesgCount;
      8'h08: x_data__h188904 = ctop_app_appW2_abortCount;
      8'h10: x_data__h188904 = ctop_app_appW2_thisMesg;
      8'h14: x_data__h188904 = ctop_app_appW2_lastMesg;
      8'h18: x_data__h188904 = rdat__h188997;
      8'h20: x_data__h188904 = ctop_app_appW2_wsiS_extStatusW$wget[95:64];
      8'h24: x_data__h188904 = ctop_app_appW2_wsiS_extStatusW$wget[63:32];
      8'h28: x_data__h188904 = ctop_app_appW2_wsiS_extStatusW$wget[31:0];
      8'h2C: x_data__h188904 = ctop_app_appW2_wsiM_extStatusW$wget[95:64];
      8'h30: x_data__h188904 = ctop_app_appW2_wsiM_extStatusW$wget[63:32];
      8'h34: x_data__h188904 = ctop_app_appW2_wsiM_extStatusW$wget[31:0];
      default: x_data__h188904 = 32'd0;
    endcase
  end
  always@(ctop_app_appW3_wci_reqF$D_OUT or
	  ctop_app_appW3_dlyCtrl or
	  ctop_app_appW3_dlyHoldoffBytes or
	  ctop_app_appW3_dlyHoldoffCycles or
	  ctop_app_appW3_mesgWtCount or
	  ctop_app_appW3_mesgRdCount or
	  ctop_app_appW3_bytesWritten or
	  rdat__h212928 or
	  ctop_app_appW3_wsiS_extStatusW$wget or
	  ctop_app_appW3_wsiM_extStatusW$wget or
	  ctop_app_appW3_wmemiWrReq or
	  ctop_app_appW3_wmemiRdReq or
	  ctop_app_appW3_wmemiRdResp1 or
	  rdat__h213114 or
	  rdat__h213123 or
	  rdat__h213132 or
	  rdat__h213141 or
	  ctop_app_appW3_dlyRdOpZero or
	  ctop_app_appW3_dlyRdOpOther or
	  ctop_app_appW3_wmemiRdResp2 or
	  delayStatus__h212490 or
	  rdat__h213214 or rdat__h213223 or rdat__h213232 or rdat__h213241)
  begin
    case (ctop_app_appW3_wci_reqF$D_OUT[51:32])
      20'h0: x_data__h212880 = ctop_app_appW3_dlyCtrl;
      20'h00004: x_data__h212880 = ctop_app_appW3_dlyHoldoffBytes;
      20'h00008: x_data__h212880 = ctop_app_appW3_dlyHoldoffCycles;
      20'h0000C: x_data__h212880 = ctop_app_appW3_mesgWtCount;
      20'h00010: x_data__h212880 = ctop_app_appW3_mesgRdCount;
      20'h00014: x_data__h212880 = ctop_app_appW3_bytesWritten;
      20'h00018: x_data__h212880 = rdat__h212928;
      20'h0001C: x_data__h212880 = 32'd0;
      20'h00020: x_data__h212880 = ctop_app_appW3_wsiS_extStatusW$wget[95:64];
      20'h00024: x_data__h212880 = ctop_app_appW3_wsiS_extStatusW$wget[63:32];
      20'h00028: x_data__h212880 = ctop_app_appW3_wsiS_extStatusW$wget[31:0];
      20'h0002C: x_data__h212880 = ctop_app_appW3_wsiM_extStatusW$wget[95:64];
      20'h00030: x_data__h212880 = ctop_app_appW3_wsiM_extStatusW$wget[63:32];
      20'h00034: x_data__h212880 = ctop_app_appW3_wsiM_extStatusW$wget[31:0];
      20'h00038: x_data__h212880 = ctop_app_appW3_wmemiWrReq;
      20'h0003C: x_data__h212880 = ctop_app_appW3_wmemiRdReq;
      20'h00040: x_data__h212880 = ctop_app_appW3_wmemiRdResp1;
      20'h00044: x_data__h212880 = rdat__h213114;
      20'h00048: x_data__h212880 = rdat__h213123;
      20'h0004C: x_data__h212880 = rdat__h213132;
      20'h00050: x_data__h212880 = rdat__h213141;
      20'h00058: x_data__h212880 = ctop_app_appW3_dlyRdOpZero;
      20'h0005C: x_data__h212880 = ctop_app_appW3_dlyRdOpOther;
      20'h00060: x_data__h212880 = ctop_app_appW3_wmemiRdResp2;
      20'h00064: x_data__h212880 = delayStatus__h212490;
      20'h00068: x_data__h212880 = rdat__h213214;
      20'h0006C: x_data__h212880 = rdat__h213223;
      20'h00070: x_data__h212880 = rdat__h213232;
      20'h00074: x_data__h212880 = rdat__h213241;
      default: x_data__h212880 = 32'd0;
    endcase
  end
  always@(ctop_app_appW4_wci_reqF$D_OUT or
	  ctop_app_appW4_smaCtrl or
	  ctop_app_appW4_mesgCount or
	  ctop_app_appW4_abortCount or
	  ctop_app_appW4_thisMesg or
	  ctop_app_appW4_lastMesg or
	  rdat__h236409 or
	  ctop_app_appW4_wsiS_extStatusW$wget or
	  ctop_app_appW4_wsiM_extStatusW$wget)
  begin
    case (ctop_app_appW4_wci_reqF$D_OUT[39:32])
      8'h0: x_data__h236316 = ctop_app_appW4_smaCtrl;
      8'h04: x_data__h236316 = ctop_app_appW4_mesgCount;
      8'h08: x_data__h236316 = ctop_app_appW4_abortCount;
      8'h10: x_data__h236316 = ctop_app_appW4_thisMesg;
      8'h14: x_data__h236316 = ctop_app_appW4_lastMesg;
      8'h18: x_data__h236316 = rdat__h236409;
      8'h20: x_data__h236316 = ctop_app_appW4_wsiS_extStatusW$wget[95:64];
      8'h24: x_data__h236316 = ctop_app_appW4_wsiS_extStatusW$wget[63:32];
      8'h28: x_data__h236316 = ctop_app_appW4_wsiS_extStatusW$wget[31:0];
      8'h2C: x_data__h236316 = ctop_app_appW4_wsiM_extStatusW$wget[95:64];
      8'h30: x_data__h236316 = ctop_app_appW4_wsiM_extStatusW$wget[63:32];
      8'h34: x_data__h236316 = ctop_app_appW4_wsiM_extStatusW$wget[31:0];
      default: x_data__h236316 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge sys1_clk$O)
  begin
    if (!sys1_rst$OUT_RST_N)
      begin
        tcGbe0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	tcGbe0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (tcGbe0_wti_nowReq$EN)
	  tcGbe0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY tcGbe0_wti_nowReq$D_IN;
	if (tcGbe0_wti_sThreadBusy_d$EN)
	  tcGbe0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      tcGbe0_wti_sThreadBusy_d$D_IN;
      end
  end

  always@(posedge pci0_pcie_ep$trn_clk)
  begin
    if (!trn_rst$OUT_RST_N)
      begin
        Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	Prelude_inst_changeSpecialWires_4_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (Prelude_inst_changeSpecialWires_1_rg$EN)
	  Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_1_rg$D_IN;
	if (Prelude_inst_changeSpecialWires_4_rg$EN)
	  Prelude_inst_changeSpecialWires_4_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_4_rg$D_IN;
	if (i2pAF_head_wrapped$EN)
	  i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY i2pAF_head_wrapped$D_IN;
	if (p2iAF_tail_wrapped$EN)
	  p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY p2iAF_tail_wrapped$D_IN;
	if (pcie_irq_rInterruptDi$EN)
	  pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptDi$D_IN;
	if (pcie_irq_rInterruptN$EN)
	  pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptN$D_IN;
	if (pcie_irq_rInterrupting$EN)
	  pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterrupting$D_IN;
      end
    if (p2iS$EN) p2iS <= `BSV_ASSIGNMENT_DELAY p2iS$D_IN;
    if (pcie_irq_rMMEnabled$EN)
      pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMMEnabled$D_IN;
    if (pcie_irq_rMSIEnabled$EN)
      pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMSIEnabled$D_IN;
  end

  always@(posedge pci0_pcie_ep$trn2_clk)
  begin
    if (!ctop_inf_cp$RST_N_wci_Vm_14)
      begin
        ctop_inf_dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	ctop_inf_dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	ctop_inf_dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	ctop_inf_dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	ctop_inf_dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	ctop_inf_dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	ctop_inf_dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	ctop_inf_dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	ctop_inf_dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	ctop_inf_dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	ctop_inf_dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	ctop_inf_dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	ctop_inf_dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctop_inf_dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	ctop_inf_dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ctop_inf_dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ctop_inf_dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	ctop_inf_dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	ctop_inf_dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctop_inf_dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	ctop_inf_dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctop_inf_dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_inf_dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ctop_inf_dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_inf_dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (ctop_inf_dp1_bml_crdBuf_modulus$EN)
	  ctop_inf_dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_crdBuf_modulus$D_IN;
	if (ctop_inf_dp1_bml_crdBuf_value$EN)
	  ctop_inf_dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_crdBuf_value$D_IN;
	if (ctop_inf_dp1_bml_fabAvail$EN)
	  ctop_inf_dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabAvail$D_IN;
	if (ctop_inf_dp1_bml_fabBuf_modulus$EN)
	  ctop_inf_dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabBuf_modulus$D_IN;
	if (ctop_inf_dp1_bml_fabBuf_value$EN)
	  ctop_inf_dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabBuf_value$D_IN;
	if (ctop_inf_dp1_bml_fabDone$EN)
	  ctop_inf_dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabDone$D_IN;
	if (ctop_inf_dp1_bml_fabFlowBase$EN)
	  ctop_inf_dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabFlowBase$D_IN;
	if (ctop_inf_dp1_bml_fabFlowSize$EN)
	  ctop_inf_dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabFlowSize$D_IN;
	if (ctop_inf_dp1_bml_fabMesgBase$EN)
	  ctop_inf_dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabMesgBase$D_IN;
	if (ctop_inf_dp1_bml_fabMesgSize$EN)
	  ctop_inf_dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabMesgSize$D_IN;
	if (ctop_inf_dp1_bml_fabMetaBase$EN)
	  ctop_inf_dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabMetaBase$D_IN;
	if (ctop_inf_dp1_bml_fabMetaSize$EN)
	  ctop_inf_dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabMetaSize$D_IN;
	if (ctop_inf_dp1_bml_fabNumBufs$EN)
	  ctop_inf_dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_fabNumBufs$D_IN;
	if (ctop_inf_dp1_bml_lclBufDone$EN)
	  ctop_inf_dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_lclBufDone$D_IN;
	if (ctop_inf_dp1_bml_lclBufStart$EN)
	  ctop_inf_dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_lclBufStart$D_IN;
	if (ctop_inf_dp1_bml_lclBuf_modulus$EN)
	  ctop_inf_dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_lclBuf_modulus$D_IN;
	if (ctop_inf_dp1_bml_lclBuf_value$EN)
	  ctop_inf_dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_lclBuf_value$D_IN;
	if (ctop_inf_dp1_bml_lclDones$EN)
	  ctop_inf_dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_lclDones$D_IN;
	if (ctop_inf_dp1_bml_lclNumBufs$EN)
	  ctop_inf_dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_lclNumBufs$D_IN;
	if (ctop_inf_dp1_bml_lclStarts$EN)
	  ctop_inf_dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_lclStarts$D_IN;
	if (ctop_inf_dp1_bml_mesgBase$EN)
	  ctop_inf_dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_mesgBase$D_IN;
	if (ctop_inf_dp1_bml_mesgSize$EN)
	  ctop_inf_dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_mesgSize$D_IN;
	if (ctop_inf_dp1_bml_metaBase$EN)
	  ctop_inf_dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_metaBase$D_IN;
	if (ctop_inf_dp1_bml_metaSize$EN)
	  ctop_inf_dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_metaSize$D_IN;
	if (ctop_inf_dp1_bml_remBuf_modulus$EN)
	  ctop_inf_dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_remBuf_modulus$D_IN;
	if (ctop_inf_dp1_bml_remBuf_value$EN)
	  ctop_inf_dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_remBuf_value$D_IN;
	if (ctop_inf_dp1_bml_remDone$EN)
	  ctop_inf_dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_remDone$D_IN;
	if (ctop_inf_dp1_bml_remDones$EN)
	  ctop_inf_dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_remDones$D_IN;
	if (ctop_inf_dp1_bml_remStart$EN)
	  ctop_inf_dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_remStart$D_IN;
	if (ctop_inf_dp1_bml_remStarts$EN)
	  ctop_inf_dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bml_remStarts$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_1_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_1_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_1_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_1_s1$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_2_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_2_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_2_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_2_s1$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_3_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_3_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_3_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_3_s1$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterA_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterA_s1$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_1_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_1_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_1_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_1_s1$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_2_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_2_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_2_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_2_s1$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_3_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_3_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_3_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_3_s1$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_cnt$EN)
	  ctop_inf_dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_cnt$D_IN;
	if (ctop_inf_dp1_bram_serverAdapterB_s1$EN)
	  ctop_inf_dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_bram_serverAdapterB_s1$D_IN;
	if (ctop_inf_dp1_dpControl$EN)
	  ctop_inf_dp1_dpControl <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_dpControl$D_IN;
	if (ctop_inf_dp1_tlp_creditReady$EN)
	  ctop_inf_dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_creditReady$D_IN;
	if (ctop_inf_dp1_tlp_debugBdata$EN)
	  ctop_inf_dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_debugBdata$D_IN;
	if (ctop_inf_dp1_tlp_dmaDoTailEvent$EN)
	  ctop_inf_dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_dmaDoTailEvent$D_IN;
	if (ctop_inf_dp1_tlp_dmaTag$EN)
	  ctop_inf_dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_dmaTag$D_IN;
	if (ctop_inf_dp1_tlp_doXmtMetaBody$EN)
	  ctop_inf_dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_doXmtMetaBody$D_IN;
	if (ctop_inf_dp1_tlp_fabMeta$EN)
	  ctop_inf_dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_fabMeta$D_IN;
	if (ctop_inf_dp1_tlp_farBufReady$EN)
	  ctop_inf_dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_farBufReady$D_IN;
	if (ctop_inf_dp1_tlp_flowDiagCount$EN)
	  ctop_inf_dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_flowDiagCount$D_IN;
	if (ctop_inf_dp1_tlp_gotResponseHeader$EN)
	  ctop_inf_dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_gotResponseHeader$D_IN;
	if (ctop_inf_dp1_tlp_maxPayloadSize$EN)
	  ctop_inf_dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_maxPayloadSize$D_IN;
	if (ctop_inf_dp1_tlp_maxReadReqSize$EN)
	  ctop_inf_dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_maxReadReqSize$D_IN;
	if (ctop_inf_dp1_tlp_nearBufReady$EN)
	  ctop_inf_dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_nearBufReady$D_IN;
	if (ctop_inf_dp1_tlp_postSeqDwell$EN)
	  ctop_inf_dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_postSeqDwell$D_IN;
	if (ctop_inf_dp1_tlp_pullTagMatch$EN)
	  ctop_inf_dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_pullTagMatch$D_IN;
	if (ctop_inf_dp1_tlp_readHeaderSent$EN)
	  ctop_inf_dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_readHeaderSent$D_IN;
	if (ctop_inf_dp1_tlp_readStarted$EN)
	  ctop_inf_dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_readStarted$D_IN;
	if (ctop_inf_dp1_tlp_remDone$EN)
	  ctop_inf_dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_remDone$D_IN;
	if (ctop_inf_dp1_tlp_remStart$EN)
	  ctop_inf_dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_remStart$D_IN;
	if (ctop_inf_dp1_tlp_reqMesgInFlight$EN)
	  ctop_inf_dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_reqMesgInFlight$D_IN;
	if (ctop_inf_dp1_tlp_reqMetaBodyInFlight$EN)
	  ctop_inf_dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_reqMetaBodyInFlight$D_IN;
	if (ctop_inf_dp1_tlp_reqMetaInFlight$EN)
	  ctop_inf_dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_reqMetaInFlight$D_IN;
	if (ctop_inf_dp1_tlp_tlpMetaSent$EN)
	  ctop_inf_dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_tlpMetaSent$D_IN;
	if (ctop_inf_dp1_tlp_tlpRcvBusy$EN)
	  ctop_inf_dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_tlpRcvBusy$D_IN;
	if (ctop_inf_dp1_tlp_tlpXmtBusy$EN)
	  ctop_inf_dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_tlpXmtBusy$D_IN;
	if (ctop_inf_dp1_tlp_xmtMetaInFlight$EN)
	  ctop_inf_dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_xmtMetaInFlight$D_IN;
	if (ctop_inf_dp1_tlp_xmtMetaOK$EN)
	  ctop_inf_dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_tlp_xmtMetaOK$D_IN;
	if (ctop_inf_dp1_wci_cEdge$EN)
	  ctop_inf_dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_cEdge$D_IN;
	if (ctop_inf_dp1_wci_cState$EN)
	  ctop_inf_dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_cState$D_IN;
	if (ctop_inf_dp1_wci_ctlAckReg$EN)
	  ctop_inf_dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_ctlAckReg$D_IN;
	if (ctop_inf_dp1_wci_ctlOpActive$EN)
	  ctop_inf_dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_ctlOpActive$D_IN;
	if (ctop_inf_dp1_wci_illegalEdge$EN)
	  ctop_inf_dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_illegalEdge$D_IN;
	if (ctop_inf_dp1_wci_nState$EN)
	  ctop_inf_dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_nState$D_IN;
	if (ctop_inf_dp1_wci_reqF_countReg$EN)
	  ctop_inf_dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_reqF_countReg$D_IN;
	if (ctop_inf_dp1_wci_respF_c_r$EN)
	  ctop_inf_dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_respF_c_r$D_IN;
	if (ctop_inf_dp1_wci_respF_q_0$EN)
	  ctop_inf_dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_respF_q_0$D_IN;
	if (ctop_inf_dp1_wci_respF_q_1$EN)
	  ctop_inf_dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_respF_q_1$D_IN;
	if (ctop_inf_dp1_wci_sFlagReg$EN)
	  ctop_inf_dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_sFlagReg$D_IN;
	if (ctop_inf_dp1_wci_sThreadBusy_d$EN)
	  ctop_inf_dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wci_sThreadBusy_d$D_IN;
	if (ctop_inf_dp1_wmi_bufDwell$EN)
	  ctop_inf_dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_bufDwell$D_IN;
	if (ctop_inf_dp1_wmi_bytesRemainResp$EN)
	  ctop_inf_dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_bytesRemainResp$D_IN;
	if (ctop_inf_dp1_wmi_doneWithMesg$EN)
	  ctop_inf_dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_doneWithMesg$D_IN;
	if (ctop_inf_dp1_wmi_lastMesg$EN)
	  ctop_inf_dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_lastMesg$D_IN;
	if (ctop_inf_dp1_wmi_mesgBufReady$EN)
	  ctop_inf_dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_mesgBufReady$D_IN;
	if (ctop_inf_dp1_wmi_mesgBusy$EN)
	  ctop_inf_dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_mesgBusy$D_IN;
	if (ctop_inf_dp1_wmi_mesgCount$EN)
	  ctop_inf_dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_mesgCount$D_IN;
	if (ctop_inf_dp1_wmi_mesgDone$EN)
	  ctop_inf_dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_mesgDone$D_IN;
	if (ctop_inf_dp1_wmi_mesgMeta$EN)
	  ctop_inf_dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_mesgMeta$D_IN;
	if (ctop_inf_dp1_wmi_mesgStart$EN)
	  ctop_inf_dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_mesgStart$D_IN;
	if (ctop_inf_dp1_wmi_metaBusy$EN)
	  ctop_inf_dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_metaBusy$D_IN;
	if (ctop_inf_dp1_wmi_p4B$EN)
	  ctop_inf_dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_p4B$D_IN;
	if (ctop_inf_dp1_wmi_rdActive$EN)
	  ctop_inf_dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_rdActive$D_IN;
	if (ctop_inf_dp1_wmi_reqCount$EN)
	  ctop_inf_dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_reqCount$D_IN;
	if (ctop_inf_dp1_wmi_thisMesg$EN)
	  ctop_inf_dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_thisMesg$D_IN;
	if (ctop_inf_dp1_wmi_wmi_blockReq$EN)
	  ctop_inf_dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_blockReq$D_IN;
	if (ctop_inf_dp1_wmi_wmi_dhF_countReg$EN)
	  ctop_inf_dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_dhF_countReg$D_IN;
	if (ctop_inf_dp1_wmi_wmi_dhF_levelsValid$EN)
	  ctop_inf_dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_dhF_levelsValid$D_IN;
	if (ctop_inf_dp1_wmi_wmi_errorSticky$EN)
	  ctop_inf_dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_errorSticky$D_IN;
	if (ctop_inf_dp1_wmi_wmi_mFlagF_countReg$EN)
	  ctop_inf_dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_mFlagF_countReg$D_IN;
	if (ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$EN)
	  ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (ctop_inf_dp1_wmi_wmi_mFlagReg$EN)
	  ctop_inf_dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_mFlagReg$D_IN;
	if (ctop_inf_dp1_wmi_wmi_operateD$EN)
	  ctop_inf_dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_operateD$D_IN;
	if (ctop_inf_dp1_wmi_wmi_peerIsReady$EN)
	  ctop_inf_dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_peerIsReady$D_IN;
	if (ctop_inf_dp1_wmi_wmi_reqF_countReg$EN)
	  ctop_inf_dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_reqF_countReg$D_IN;
	if (ctop_inf_dp1_wmi_wmi_reqF_levelsValid$EN)
	  ctop_inf_dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_reqF_levelsValid$D_IN;
	if (ctop_inf_dp1_wmi_wmi_respF_c_r$EN)
	  ctop_inf_dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_respF_c_r$D_IN;
	if (ctop_inf_dp1_wmi_wmi_respF_q_0$EN)
	  ctop_inf_dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_respF_q_0$D_IN;
	if (ctop_inf_dp1_wmi_wmi_respF_q_1$EN)
	  ctop_inf_dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_respF_q_1$D_IN;
	if (ctop_inf_dp1_wmi_wmi_sFlagReg$EN)
	  ctop_inf_dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_sFlagReg$D_IN;
	if (ctop_inf_dp1_wmi_wmi_trafficSticky$EN)
	  ctop_inf_dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wmi_trafficSticky$D_IN;
	if (ctop_inf_dp1_wmi_wrActive$EN)
	  ctop_inf_dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wrActive$D_IN;
	if (ctop_inf_dp1_wmi_wrFinalize$EN)
	  ctop_inf_dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wrFinalize$D_IN;
	if (ctop_inf_dp1_wmi_wrtCount$EN)
	  ctop_inf_dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wmi_wrtCount$D_IN;
	if (ctop_inf_dp1_wti_nowReq$EN)
	  ctop_inf_dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp1_wti_nowReq$D_IN;
      end
    if (!ctop_inf_cp$RST_N_wci_Vm_13)
      begin
        ctop_inf_dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	ctop_inf_dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	ctop_inf_dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	ctop_inf_dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	ctop_inf_dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	ctop_inf_dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	ctop_inf_dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	ctop_inf_dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	ctop_inf_dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	ctop_inf_dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	ctop_inf_dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	ctop_inf_dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	ctop_inf_dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	ctop_inf_dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctop_inf_dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	ctop_inf_dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ctop_inf_dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ctop_inf_dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	ctop_inf_dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	ctop_inf_dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctop_inf_dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	ctop_inf_dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_inf_dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctop_inf_dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_inf_dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ctop_inf_dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_inf_dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_inf_dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_inf_dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_inf_dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_inf_dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_inf_dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (ctop_inf_dp0_bml_crdBuf_modulus$EN)
	  ctop_inf_dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_crdBuf_modulus$D_IN;
	if (ctop_inf_dp0_bml_crdBuf_value$EN)
	  ctop_inf_dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_crdBuf_value$D_IN;
	if (ctop_inf_dp0_bml_fabAvail$EN)
	  ctop_inf_dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabAvail$D_IN;
	if (ctop_inf_dp0_bml_fabBuf_modulus$EN)
	  ctop_inf_dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabBuf_modulus$D_IN;
	if (ctop_inf_dp0_bml_fabBuf_value$EN)
	  ctop_inf_dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabBuf_value$D_IN;
	if (ctop_inf_dp0_bml_fabDone$EN)
	  ctop_inf_dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabDone$D_IN;
	if (ctop_inf_dp0_bml_fabFlowBase$EN)
	  ctop_inf_dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabFlowBase$D_IN;
	if (ctop_inf_dp0_bml_fabFlowSize$EN)
	  ctop_inf_dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabFlowSize$D_IN;
	if (ctop_inf_dp0_bml_fabMesgBase$EN)
	  ctop_inf_dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabMesgBase$D_IN;
	if (ctop_inf_dp0_bml_fabMesgSize$EN)
	  ctop_inf_dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabMesgSize$D_IN;
	if (ctop_inf_dp0_bml_fabMetaBase$EN)
	  ctop_inf_dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabMetaBase$D_IN;
	if (ctop_inf_dp0_bml_fabMetaSize$EN)
	  ctop_inf_dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabMetaSize$D_IN;
	if (ctop_inf_dp0_bml_fabNumBufs$EN)
	  ctop_inf_dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_fabNumBufs$D_IN;
	if (ctop_inf_dp0_bml_lclBufDone$EN)
	  ctop_inf_dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_lclBufDone$D_IN;
	if (ctop_inf_dp0_bml_lclBufStart$EN)
	  ctop_inf_dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_lclBufStart$D_IN;
	if (ctop_inf_dp0_bml_lclBuf_modulus$EN)
	  ctop_inf_dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_lclBuf_modulus$D_IN;
	if (ctop_inf_dp0_bml_lclBuf_value$EN)
	  ctop_inf_dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_lclBuf_value$D_IN;
	if (ctop_inf_dp0_bml_lclDones$EN)
	  ctop_inf_dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_lclDones$D_IN;
	if (ctop_inf_dp0_bml_lclNumBufs$EN)
	  ctop_inf_dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_lclNumBufs$D_IN;
	if (ctop_inf_dp0_bml_lclStarts$EN)
	  ctop_inf_dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_lclStarts$D_IN;
	if (ctop_inf_dp0_bml_mesgBase$EN)
	  ctop_inf_dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_mesgBase$D_IN;
	if (ctop_inf_dp0_bml_mesgSize$EN)
	  ctop_inf_dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_mesgSize$D_IN;
	if (ctop_inf_dp0_bml_metaBase$EN)
	  ctop_inf_dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_metaBase$D_IN;
	if (ctop_inf_dp0_bml_metaSize$EN)
	  ctop_inf_dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_metaSize$D_IN;
	if (ctop_inf_dp0_bml_remBuf_modulus$EN)
	  ctop_inf_dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_remBuf_modulus$D_IN;
	if (ctop_inf_dp0_bml_remBuf_value$EN)
	  ctop_inf_dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_remBuf_value$D_IN;
	if (ctop_inf_dp0_bml_remDone$EN)
	  ctop_inf_dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_remDone$D_IN;
	if (ctop_inf_dp0_bml_remDones$EN)
	  ctop_inf_dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_remDones$D_IN;
	if (ctop_inf_dp0_bml_remStart$EN)
	  ctop_inf_dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_remStart$D_IN;
	if (ctop_inf_dp0_bml_remStarts$EN)
	  ctop_inf_dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bml_remStarts$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_1_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_1_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_1_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_1_s1$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_2_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_2_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_2_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_2_s1$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_3_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_3_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_3_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_3_s1$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterA_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterA_s1$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_1_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_1_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_1_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_1_s1$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_2_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_2_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_2_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_2_s1$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_3_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_3_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_3_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_3_s1$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_cnt$EN)
	  ctop_inf_dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_cnt$D_IN;
	if (ctop_inf_dp0_bram_serverAdapterB_s1$EN)
	  ctop_inf_dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_bram_serverAdapterB_s1$D_IN;
	if (ctop_inf_dp0_dpControl$EN)
	  ctop_inf_dp0_dpControl <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_dpControl$D_IN;
	if (ctop_inf_dp0_tlp_creditReady$EN)
	  ctop_inf_dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_creditReady$D_IN;
	if (ctop_inf_dp0_tlp_debugBdata$EN)
	  ctop_inf_dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_debugBdata$D_IN;
	if (ctop_inf_dp0_tlp_dmaDoTailEvent$EN)
	  ctop_inf_dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_dmaDoTailEvent$D_IN;
	if (ctop_inf_dp0_tlp_dmaTag$EN)
	  ctop_inf_dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_dmaTag$D_IN;
	if (ctop_inf_dp0_tlp_doXmtMetaBody$EN)
	  ctop_inf_dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_doXmtMetaBody$D_IN;
	if (ctop_inf_dp0_tlp_fabMeta$EN)
	  ctop_inf_dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_fabMeta$D_IN;
	if (ctop_inf_dp0_tlp_farBufReady$EN)
	  ctop_inf_dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_farBufReady$D_IN;
	if (ctop_inf_dp0_tlp_flowDiagCount$EN)
	  ctop_inf_dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_flowDiagCount$D_IN;
	if (ctop_inf_dp0_tlp_gotResponseHeader$EN)
	  ctop_inf_dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_gotResponseHeader$D_IN;
	if (ctop_inf_dp0_tlp_maxPayloadSize$EN)
	  ctop_inf_dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_maxPayloadSize$D_IN;
	if (ctop_inf_dp0_tlp_maxReadReqSize$EN)
	  ctop_inf_dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_maxReadReqSize$D_IN;
	if (ctop_inf_dp0_tlp_nearBufReady$EN)
	  ctop_inf_dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_nearBufReady$D_IN;
	if (ctop_inf_dp0_tlp_postSeqDwell$EN)
	  ctop_inf_dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_postSeqDwell$D_IN;
	if (ctop_inf_dp0_tlp_pullTagMatch$EN)
	  ctop_inf_dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_pullTagMatch$D_IN;
	if (ctop_inf_dp0_tlp_readHeaderSent$EN)
	  ctop_inf_dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_readHeaderSent$D_IN;
	if (ctop_inf_dp0_tlp_readStarted$EN)
	  ctop_inf_dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_readStarted$D_IN;
	if (ctop_inf_dp0_tlp_remDone$EN)
	  ctop_inf_dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_remDone$D_IN;
	if (ctop_inf_dp0_tlp_remStart$EN)
	  ctop_inf_dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_remStart$D_IN;
	if (ctop_inf_dp0_tlp_reqMesgInFlight$EN)
	  ctop_inf_dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_reqMesgInFlight$D_IN;
	if (ctop_inf_dp0_tlp_reqMetaBodyInFlight$EN)
	  ctop_inf_dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_reqMetaBodyInFlight$D_IN;
	if (ctop_inf_dp0_tlp_reqMetaInFlight$EN)
	  ctop_inf_dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_reqMetaInFlight$D_IN;
	if (ctop_inf_dp0_tlp_tlpMetaSent$EN)
	  ctop_inf_dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_tlpMetaSent$D_IN;
	if (ctop_inf_dp0_tlp_tlpRcvBusy$EN)
	  ctop_inf_dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_tlpRcvBusy$D_IN;
	if (ctop_inf_dp0_tlp_tlpXmtBusy$EN)
	  ctop_inf_dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_tlpXmtBusy$D_IN;
	if (ctop_inf_dp0_tlp_xmtMetaInFlight$EN)
	  ctop_inf_dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_xmtMetaInFlight$D_IN;
	if (ctop_inf_dp0_tlp_xmtMetaOK$EN)
	  ctop_inf_dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_tlp_xmtMetaOK$D_IN;
	if (ctop_inf_dp0_wci_cEdge$EN)
	  ctop_inf_dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_cEdge$D_IN;
	if (ctop_inf_dp0_wci_cState$EN)
	  ctop_inf_dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_cState$D_IN;
	if (ctop_inf_dp0_wci_ctlAckReg$EN)
	  ctop_inf_dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_ctlAckReg$D_IN;
	if (ctop_inf_dp0_wci_ctlOpActive$EN)
	  ctop_inf_dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_ctlOpActive$D_IN;
	if (ctop_inf_dp0_wci_illegalEdge$EN)
	  ctop_inf_dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_illegalEdge$D_IN;
	if (ctop_inf_dp0_wci_nState$EN)
	  ctop_inf_dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_nState$D_IN;
	if (ctop_inf_dp0_wci_reqF_countReg$EN)
	  ctop_inf_dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_reqF_countReg$D_IN;
	if (ctop_inf_dp0_wci_respF_c_r$EN)
	  ctop_inf_dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_respF_c_r$D_IN;
	if (ctop_inf_dp0_wci_respF_q_0$EN)
	  ctop_inf_dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_respF_q_0$D_IN;
	if (ctop_inf_dp0_wci_respF_q_1$EN)
	  ctop_inf_dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_respF_q_1$D_IN;
	if (ctop_inf_dp0_wci_sFlagReg$EN)
	  ctop_inf_dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_sFlagReg$D_IN;
	if (ctop_inf_dp0_wci_sThreadBusy_d$EN)
	  ctop_inf_dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wci_sThreadBusy_d$D_IN;
	if (ctop_inf_dp0_wmi_bufDwell$EN)
	  ctop_inf_dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_bufDwell$D_IN;
	if (ctop_inf_dp0_wmi_bytesRemainResp$EN)
	  ctop_inf_dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_bytesRemainResp$D_IN;
	if (ctop_inf_dp0_wmi_doneWithMesg$EN)
	  ctop_inf_dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_doneWithMesg$D_IN;
	if (ctop_inf_dp0_wmi_lastMesg$EN)
	  ctop_inf_dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_lastMesg$D_IN;
	if (ctop_inf_dp0_wmi_mesgBufReady$EN)
	  ctop_inf_dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_mesgBufReady$D_IN;
	if (ctop_inf_dp0_wmi_mesgBusy$EN)
	  ctop_inf_dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_mesgBusy$D_IN;
	if (ctop_inf_dp0_wmi_mesgCount$EN)
	  ctop_inf_dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_mesgCount$D_IN;
	if (ctop_inf_dp0_wmi_mesgDone$EN)
	  ctop_inf_dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_mesgDone$D_IN;
	if (ctop_inf_dp0_wmi_mesgMeta$EN)
	  ctop_inf_dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_mesgMeta$D_IN;
	if (ctop_inf_dp0_wmi_mesgStart$EN)
	  ctop_inf_dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_mesgStart$D_IN;
	if (ctop_inf_dp0_wmi_metaBusy$EN)
	  ctop_inf_dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_metaBusy$D_IN;
	if (ctop_inf_dp0_wmi_p4B$EN)
	  ctop_inf_dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_p4B$D_IN;
	if (ctop_inf_dp0_wmi_rdActive$EN)
	  ctop_inf_dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_rdActive$D_IN;
	if (ctop_inf_dp0_wmi_reqCount$EN)
	  ctop_inf_dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_reqCount$D_IN;
	if (ctop_inf_dp0_wmi_thisMesg$EN)
	  ctop_inf_dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_thisMesg$D_IN;
	if (ctop_inf_dp0_wmi_wmi_blockReq$EN)
	  ctop_inf_dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_blockReq$D_IN;
	if (ctop_inf_dp0_wmi_wmi_dhF_countReg$EN)
	  ctop_inf_dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_dhF_countReg$D_IN;
	if (ctop_inf_dp0_wmi_wmi_dhF_levelsValid$EN)
	  ctop_inf_dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_dhF_levelsValid$D_IN;
	if (ctop_inf_dp0_wmi_wmi_errorSticky$EN)
	  ctop_inf_dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_errorSticky$D_IN;
	if (ctop_inf_dp0_wmi_wmi_mFlagF_countReg$EN)
	  ctop_inf_dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_mFlagF_countReg$D_IN;
	if (ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$EN)
	  ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (ctop_inf_dp0_wmi_wmi_mFlagReg$EN)
	  ctop_inf_dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_mFlagReg$D_IN;
	if (ctop_inf_dp0_wmi_wmi_operateD$EN)
	  ctop_inf_dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_operateD$D_IN;
	if (ctop_inf_dp0_wmi_wmi_peerIsReady$EN)
	  ctop_inf_dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_peerIsReady$D_IN;
	if (ctop_inf_dp0_wmi_wmi_reqF_countReg$EN)
	  ctop_inf_dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_reqF_countReg$D_IN;
	if (ctop_inf_dp0_wmi_wmi_reqF_levelsValid$EN)
	  ctop_inf_dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_reqF_levelsValid$D_IN;
	if (ctop_inf_dp0_wmi_wmi_respF_c_r$EN)
	  ctop_inf_dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_respF_c_r$D_IN;
	if (ctop_inf_dp0_wmi_wmi_respF_q_0$EN)
	  ctop_inf_dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_respF_q_0$D_IN;
	if (ctop_inf_dp0_wmi_wmi_respF_q_1$EN)
	  ctop_inf_dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_respF_q_1$D_IN;
	if (ctop_inf_dp0_wmi_wmi_sFlagReg$EN)
	  ctop_inf_dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_sFlagReg$D_IN;
	if (ctop_inf_dp0_wmi_wmi_trafficSticky$EN)
	  ctop_inf_dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wmi_trafficSticky$D_IN;
	if (ctop_inf_dp0_wmi_wrActive$EN)
	  ctop_inf_dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wrActive$D_IN;
	if (ctop_inf_dp0_wmi_wrFinalize$EN)
	  ctop_inf_dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wrFinalize$D_IN;
	if (ctop_inf_dp0_wmi_wrtCount$EN)
	  ctop_inf_dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wmi_wrtCount$D_IN;
	if (ctop_inf_dp0_wti_nowReq$EN)
	  ctop_inf_dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_dp0_wti_nowReq$D_IN;
      end
    if (!ctop_inf_cp$RST_N_wci_Vm_4)
      begin
        ctop_app_appW4_abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW4_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctop_app_appW4_firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_impreciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_app_appW4_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_mesgLength <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	ctop_app_appW4_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctop_app_appW4_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_mesgReqValid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	ctop_app_appW4_preciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	ctop_app_appW4_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW4_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW4_smaCtrl <= `BSV_ASSIGNMENT_DELAY 32'h00000002;
	ctop_app_appW4_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_app_appW4_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_app_appW4_valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	ctop_app_appW4_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_app_appW4_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_app_appW4_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_app_appW4_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_app_appW4_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW4_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	ctop_app_appW4_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	ctop_app_appW4_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	ctop_app_appW4_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	ctop_app_appW4_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	ctop_app_appW4_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	ctop_app_appW4_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW4_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW4_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW4_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW4_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW4_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	ctop_app_appW4_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW4_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ctop_app_appW4_abortCount$EN)
	  ctop_app_appW4_abortCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_abortCount$D_IN;
	if (ctop_app_appW4_doAbort$EN)
	  ctop_app_appW4_doAbort <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_doAbort$D_IN;
	if (ctop_app_appW4_endOfMessage$EN)
	  ctop_app_appW4_endOfMessage <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_endOfMessage$D_IN;
	if (ctop_app_appW4_errCount$EN)
	  ctop_app_appW4_errCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_errCount$D_IN;
	if (ctop_app_appW4_fabRespCredit_value$EN)
	  ctop_app_appW4_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_fabRespCredit_value$D_IN;
	if (ctop_app_appW4_fabWordsRemain$EN)
	  ctop_app_appW4_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_fabWordsRemain$D_IN;
	if (ctop_app_appW4_firstMsgReq$EN)
	  ctop_app_appW4_firstMsgReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_firstMsgReq$D_IN;
	if (ctop_app_appW4_impreciseBurst$EN)
	  ctop_app_appW4_impreciseBurst <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_impreciseBurst$D_IN;
	if (ctop_app_appW4_lastMesg$EN)
	  ctop_app_appW4_lastMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_lastMesg$D_IN;
	if (ctop_app_appW4_mesgCount$EN)
	  ctop_app_appW4_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_mesgCount$D_IN;
	if (ctop_app_appW4_mesgLength$EN)
	  ctop_app_appW4_mesgLength <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_mesgLength$D_IN;
	if (ctop_app_appW4_mesgLengthSoFar$EN)
	  ctop_app_appW4_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_mesgLengthSoFar$D_IN;
	if (ctop_app_appW4_mesgPreRequest$EN)
	  ctop_app_appW4_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_mesgPreRequest$D_IN;
	if (ctop_app_appW4_mesgReqOK$EN)
	  ctop_app_appW4_mesgReqOK <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_mesgReqOK$D_IN;
	if (ctop_app_appW4_mesgReqValid$EN)
	  ctop_app_appW4_mesgReqValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_mesgReqValid$D_IN;
	if (ctop_app_appW4_opcode$EN)
	  ctop_app_appW4_opcode <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_opcode$D_IN;
	if (ctop_app_appW4_preciseBurst$EN)
	  ctop_app_appW4_preciseBurst <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_preciseBurst$D_IN;
	if (ctop_app_appW4_readyToPush$EN)
	  ctop_app_appW4_readyToPush <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_readyToPush$D_IN;
	if (ctop_app_appW4_readyToRequest$EN)
	  ctop_app_appW4_readyToRequest <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_readyToRequest$D_IN;
	if (ctop_app_appW4_respF_rCache$EN)
	  ctop_app_appW4_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_respF_rCache$D_IN;
	if (ctop_app_appW4_respF_rRdPtr$EN)
	  ctop_app_appW4_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_respF_rRdPtr$D_IN;
	if (ctop_app_appW4_respF_rWrPtr$EN)
	  ctop_app_appW4_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_respF_rWrPtr$D_IN;
	if (ctop_app_appW4_smaCtrl$EN)
	  ctop_app_appW4_smaCtrl <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_smaCtrl$D_IN;
	if (ctop_app_appW4_thisMesg$EN)
	  ctop_app_appW4_thisMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_thisMesg$D_IN;
	if (ctop_app_appW4_unrollCnt$EN)
	  ctop_app_appW4_unrollCnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_unrollCnt$D_IN;
	if (ctop_app_appW4_valExpect$EN)
	  ctop_app_appW4_valExpect <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_valExpect$D_IN;
	if (ctop_app_appW4_wci_cEdge$EN)
	  ctop_app_appW4_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_cEdge$D_IN;
	if (ctop_app_appW4_wci_cState$EN)
	  ctop_app_appW4_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_cState$D_IN;
	if (ctop_app_appW4_wci_ctlAckReg$EN)
	  ctop_app_appW4_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_ctlAckReg$D_IN;
	if (ctop_app_appW4_wci_ctlOpActive$EN)
	  ctop_app_appW4_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_ctlOpActive$D_IN;
	if (ctop_app_appW4_wci_illegalEdge$EN)
	  ctop_app_appW4_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_illegalEdge$D_IN;
	if (ctop_app_appW4_wci_nState$EN)
	  ctop_app_appW4_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_nState$D_IN;
	if (ctop_app_appW4_wci_reqF_countReg$EN)
	  ctop_app_appW4_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_reqF_countReg$D_IN;
	if (ctop_app_appW4_wci_respF_c_r$EN)
	  ctop_app_appW4_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_respF_c_r$D_IN;
	if (ctop_app_appW4_wci_respF_q_0$EN)
	  ctop_app_appW4_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_respF_q_0$D_IN;
	if (ctop_app_appW4_wci_respF_q_1$EN)
	  ctop_app_appW4_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_respF_q_1$D_IN;
	if (ctop_app_appW4_wci_sFlagReg$EN)
	  ctop_app_appW4_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_sFlagReg$D_IN;
	if (ctop_app_appW4_wci_sThreadBusy_d$EN)
	  ctop_app_appW4_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wci_sThreadBusy_d$D_IN;
	if (ctop_app_appW4_wmi_busyWithMessage$EN)
	  ctop_app_appW4_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_busyWithMessage$D_IN;
	if (ctop_app_appW4_wmi_dhF_c_r$EN)
	  ctop_app_appW4_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_dhF_c_r$D_IN;
	if (ctop_app_appW4_wmi_dhF_q_0$EN)
	  ctop_app_appW4_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_dhF_q_0$D_IN;
	if (ctop_app_appW4_wmi_dhF_q_1$EN)
	  ctop_app_appW4_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_dhF_q_1$D_IN;
	if (ctop_app_appW4_wmi_errorSticky$EN)
	  ctop_app_appW4_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_errorSticky$D_IN;
	if (ctop_app_appW4_wmi_mFlagF_c_r$EN)
	  ctop_app_appW4_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_mFlagF_c_r$D_IN;
	if (ctop_app_appW4_wmi_mFlagF_q_0$EN)
	  ctop_app_appW4_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_mFlagF_q_0$D_IN;
	if (ctop_app_appW4_wmi_mFlagF_q_1$EN)
	  ctop_app_appW4_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_mFlagF_q_1$D_IN;
	if (ctop_app_appW4_wmi_operateD$EN)
	  ctop_app_appW4_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_operateD$D_IN;
	if (ctop_app_appW4_wmi_peerIsReady$EN)
	  ctop_app_appW4_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_peerIsReady$D_IN;
	if (ctop_app_appW4_wmi_reqF_c_r$EN)
	  ctop_app_appW4_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_reqF_c_r$D_IN;
	if (ctop_app_appW4_wmi_reqF_q_0$EN)
	  ctop_app_appW4_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_reqF_q_0$D_IN;
	if (ctop_app_appW4_wmi_reqF_q_1$EN)
	  ctop_app_appW4_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_reqF_q_1$D_IN;
	if (ctop_app_appW4_wmi_sDataThreadBusy_d$EN)
	  ctop_app_appW4_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_sDataThreadBusy_d$D_IN;
	if (ctop_app_appW4_wmi_sFlagReg$EN)
	  ctop_app_appW4_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_sFlagReg$D_IN;
	if (ctop_app_appW4_wmi_sThreadBusy_d$EN)
	  ctop_app_appW4_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_sThreadBusy_d$D_IN;
	if (ctop_app_appW4_wmi_trafficSticky$EN)
	  ctop_app_appW4_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wmi_trafficSticky$D_IN;
	if (ctop_app_appW4_wsiM_burstKind$EN)
	  ctop_app_appW4_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_burstKind$D_IN;
	if (ctop_app_appW4_wsiM_errorSticky$EN)
	  ctop_app_appW4_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_errorSticky$D_IN;
	if (ctop_app_appW4_wsiM_iMesgCount$EN)
	  ctop_app_appW4_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_iMesgCount$D_IN;
	if (ctop_app_appW4_wsiM_operateD$EN)
	  ctop_app_appW4_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_operateD$D_IN;
	if (ctop_app_appW4_wsiM_pMesgCount$EN)
	  ctop_app_appW4_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_pMesgCount$D_IN;
	if (ctop_app_appW4_wsiM_peerIsReady$EN)
	  ctop_app_appW4_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_peerIsReady$D_IN;
	if (ctop_app_appW4_wsiM_reqFifo_c_r$EN)
	  ctop_app_appW4_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_reqFifo_c_r$D_IN;
	if (ctop_app_appW4_wsiM_reqFifo_q_0$EN)
	  ctop_app_appW4_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_reqFifo_q_0$D_IN;
	if (ctop_app_appW4_wsiM_reqFifo_q_1$EN)
	  ctop_app_appW4_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_reqFifo_q_1$D_IN;
	if (ctop_app_appW4_wsiM_sThreadBusy_d$EN)
	  ctop_app_appW4_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_sThreadBusy_d$D_IN;
	if (ctop_app_appW4_wsiM_tBusyCount$EN)
	  ctop_app_appW4_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_tBusyCount$D_IN;
	if (ctop_app_appW4_wsiM_trafficSticky$EN)
	  ctop_app_appW4_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiM_trafficSticky$D_IN;
	if (ctop_app_appW4_wsiS_burstKind$EN)
	  ctop_app_appW4_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_burstKind$D_IN;
	if (ctop_app_appW4_wsiS_errorSticky$EN)
	  ctop_app_appW4_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_errorSticky$D_IN;
	if (ctop_app_appW4_wsiS_iMesgCount$EN)
	  ctop_app_appW4_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_iMesgCount$D_IN;
	if (ctop_app_appW4_wsiS_operateD$EN)
	  ctop_app_appW4_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_operateD$D_IN;
	if (ctop_app_appW4_wsiS_pMesgCount$EN)
	  ctop_app_appW4_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_pMesgCount$D_IN;
	if (ctop_app_appW4_wsiS_peerIsReady$EN)
	  ctop_app_appW4_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_peerIsReady$D_IN;
	if (ctop_app_appW4_wsiS_reqFifo_countReg$EN)
	  ctop_app_appW4_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_reqFifo_countReg$D_IN;
	if (ctop_app_appW4_wsiS_reqFifo_levelsValid$EN)
	  ctop_app_appW4_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_reqFifo_levelsValid$D_IN;
	if (ctop_app_appW4_wsiS_tBusyCount$EN)
	  ctop_app_appW4_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_tBusyCount$D_IN;
	if (ctop_app_appW4_wsiS_trafficSticky$EN)
	  ctop_app_appW4_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_trafficSticky$D_IN;
	if (ctop_app_appW4_wsiS_wordCount$EN)
	  ctop_app_appW4_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiS_wordCount$D_IN;
	if (ctop_app_appW4_wsiWordsRemain$EN)
	  ctop_app_appW4_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_wsiWordsRemain$D_IN;
	if (ctop_app_appW4_zeroLengthMesg$EN)
	  ctop_app_appW4_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW4_zeroLengthMesg$D_IN;
      end
    if (!ctop_inf_cp$RST_N_wci_Vm_3)
      begin
        ctop_app_appW3_bytesRead <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_bytesThisMessage <= `BSV_ASSIGNMENT_DELAY 24'd0;
	ctop_app_appW3_bytesWritten <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_cyclesPassed <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_dlyCtrl <= `BSV_ASSIGNMENT_DELAY 32'h0;
	ctop_app_appW3_dlyHoldoffBytes <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_dlyHoldoffCycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_dlyRAG <= `BSV_ASSIGNMENT_DELAY 23'd0;
	ctop_app_appW3_dlyRdOpOther <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_dlyRdOpZero <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_dlyReadCredit_value <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ctop_app_appW3_dlyReadyToWrite_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_app_appW3_dlyWAG <= `BSV_ASSIGNMENT_DELAY 23'd0;
	ctop_app_appW3_dlyWordsStored_value <= `BSV_ASSIGNMENT_DELAY 25'd0;
	ctop_app_appW3_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctop_app_appW3_mesgRdCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_mesgWF_rCache <= `BSV_ASSIGNMENT_DELAY
	    46'h0AAAAAAAAAAA;
	ctop_app_appW3_mesgWF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	ctop_app_appW3_mesgWF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	ctop_app_appW3_mesgWtCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_rdSerAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_rdSerEmpty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW3_rdSerPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_rdSerUnroll <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_app_appW3_rdSyncWord <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_tog50 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_app_appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	ctop_app_appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_app_appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_app_appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_app_appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_app_appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW3_wmemiRdReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wmemiRdResp1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wmemiRdResp2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wmemiWrReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wmemi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ctop_app_appW3_wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ctop_app_appW3_wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wmemi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW3_wmemi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    52'h0AAAAAAAAAAAA;
	ctop_app_appW3_wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    52'h0AAAAAAAAAAAA;
	ctop_app_appW3_wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wrtSerAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wrtSerPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wrtSerUnroll <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_app_appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	ctop_app_appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	ctop_app_appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (ctop_app_appW3_bytesRead$EN)
	  ctop_app_appW3_bytesRead <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_bytesRead$D_IN;
	if (ctop_app_appW3_bytesThisMessage$EN)
	  ctop_app_appW3_bytesThisMessage <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_bytesThisMessage$D_IN;
	if (ctop_app_appW3_bytesWritten$EN)
	  ctop_app_appW3_bytesWritten <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_bytesWritten$D_IN;
	if (ctop_app_appW3_cyclesPassed$EN)
	  ctop_app_appW3_cyclesPassed <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_cyclesPassed$D_IN;
	if (ctop_app_appW3_dlyCtrl$EN)
	  ctop_app_appW3_dlyCtrl <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyCtrl$D_IN;
	if (ctop_app_appW3_dlyHoldoffBytes$EN)
	  ctop_app_appW3_dlyHoldoffBytes <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyHoldoffBytes$D_IN;
	if (ctop_app_appW3_dlyHoldoffCycles$EN)
	  ctop_app_appW3_dlyHoldoffCycles <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyHoldoffCycles$D_IN;
	if (ctop_app_appW3_dlyRAG$EN)
	  ctop_app_appW3_dlyRAG <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyRAG$D_IN;
	if (ctop_app_appW3_dlyRdOpOther$EN)
	  ctop_app_appW3_dlyRdOpOther <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyRdOpOther$D_IN;
	if (ctop_app_appW3_dlyRdOpZero$EN)
	  ctop_app_appW3_dlyRdOpZero <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyRdOpZero$D_IN;
	if (ctop_app_appW3_dlyReadCredit_value$EN)
	  ctop_app_appW3_dlyReadCredit_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyReadCredit_value$D_IN;
	if (ctop_app_appW3_dlyReadyToWrite_value$EN)
	  ctop_app_appW3_dlyReadyToWrite_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyReadyToWrite_value$D_IN;
	if (ctop_app_appW3_dlyWAG$EN)
	  ctop_app_appW3_dlyWAG <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyWAG$D_IN;
	if (ctop_app_appW3_dlyWordsStored_value$EN)
	  ctop_app_appW3_dlyWordsStored_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_dlyWordsStored_value$D_IN;
	if (ctop_app_appW3_mesgLengthSoFar$EN)
	  ctop_app_appW3_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_mesgLengthSoFar$D_IN;
	if (ctop_app_appW3_mesgRdCount$EN)
	  ctop_app_appW3_mesgRdCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_mesgRdCount$D_IN;
	if (ctop_app_appW3_mesgWF_rCache$EN)
	  ctop_app_appW3_mesgWF_rCache <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_mesgWF_rCache$D_IN;
	if (ctop_app_appW3_mesgWF_rRdPtr$EN)
	  ctop_app_appW3_mesgWF_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_mesgWF_rRdPtr$D_IN;
	if (ctop_app_appW3_mesgWF_rWrPtr$EN)
	  ctop_app_appW3_mesgWF_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_mesgWF_rWrPtr$D_IN;
	if (ctop_app_appW3_mesgWtCount$EN)
	  ctop_app_appW3_mesgWtCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_mesgWtCount$D_IN;
	if (ctop_app_appW3_rdSerAddr$EN)
	  ctop_app_appW3_rdSerAddr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_rdSerAddr$D_IN;
	if (ctop_app_appW3_rdSerEmpty$EN)
	  ctop_app_appW3_rdSerEmpty <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_rdSerEmpty$D_IN;
	if (ctop_app_appW3_rdSerPos$EN)
	  ctop_app_appW3_rdSerPos <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_rdSerPos$D_IN;
	if (ctop_app_appW3_rdSerUnroll$EN)
	  ctop_app_appW3_rdSerUnroll <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_rdSerUnroll$D_IN;
	if (ctop_app_appW3_rdSyncWord$EN)
	  ctop_app_appW3_rdSyncWord <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_rdSyncWord$D_IN;
	if (ctop_app_appW3_tog50$EN)
	  ctop_app_appW3_tog50 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_tog50$D_IN;
	if (ctop_app_appW3_unrollCnt$EN)
	  ctop_app_appW3_unrollCnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_unrollCnt$D_IN;
	if (ctop_app_appW3_wci_cEdge$EN)
	  ctop_app_appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_cEdge$D_IN;
	if (ctop_app_appW3_wci_cState$EN)
	  ctop_app_appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_cState$D_IN;
	if (ctop_app_appW3_wci_ctlAckReg$EN)
	  ctop_app_appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_ctlAckReg$D_IN;
	if (ctop_app_appW3_wci_ctlOpActive$EN)
	  ctop_app_appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_ctlOpActive$D_IN;
	if (ctop_app_appW3_wci_illegalEdge$EN)
	  ctop_app_appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_illegalEdge$D_IN;
	if (ctop_app_appW3_wci_nState$EN)
	  ctop_app_appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_nState$D_IN;
	if (ctop_app_appW3_wci_reqF_countReg$EN)
	  ctop_app_appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_reqF_countReg$D_IN;
	if (ctop_app_appW3_wci_respF_c_r$EN)
	  ctop_app_appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_respF_c_r$D_IN;
	if (ctop_app_appW3_wci_respF_q_0$EN)
	  ctop_app_appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_respF_q_0$D_IN;
	if (ctop_app_appW3_wci_respF_q_1$EN)
	  ctop_app_appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_respF_q_1$D_IN;
	if (ctop_app_appW3_wci_sFlagReg$EN)
	  ctop_app_appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_sFlagReg$D_IN;
	if (ctop_app_appW3_wci_sThreadBusy_d$EN)
	  ctop_app_appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wci_sThreadBusy_d$D_IN;
	if (ctop_app_appW3_wmemiRdReq$EN)
	  ctop_app_appW3_wmemiRdReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemiRdReq$D_IN;
	if (ctop_app_appW3_wmemiRdResp1$EN)
	  ctop_app_appW3_wmemiRdResp1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemiRdResp1$D_IN;
	if (ctop_app_appW3_wmemiRdResp2$EN)
	  ctop_app_appW3_wmemiRdResp2 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemiRdResp2$D_IN;
	if (ctop_app_appW3_wmemiWrReq$EN)
	  ctop_app_appW3_wmemiWrReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemiWrReq$D_IN;
	if (ctop_app_appW3_wmemi_busyWithMessage$EN)
	  ctop_app_appW3_wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_busyWithMessage$D_IN;
	if (ctop_app_appW3_wmemi_dhF_c_r$EN)
	  ctop_app_appW3_wmemi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_dhF_c_r$D_IN;
	if (ctop_app_appW3_wmemi_dhF_q_0$EN)
	  ctop_app_appW3_wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_dhF_q_0$D_IN;
	if (ctop_app_appW3_wmemi_dhF_q_1$EN)
	  ctop_app_appW3_wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_dhF_q_1$D_IN;
	if (ctop_app_appW3_wmemi_errorSticky$EN)
	  ctop_app_appW3_wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_errorSticky$D_IN;
	if (ctop_app_appW3_wmemi_operateD$EN)
	  ctop_app_appW3_wmemi_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_operateD$D_IN;
	if (ctop_app_appW3_wmemi_peerIsReady$EN)
	  ctop_app_appW3_wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_peerIsReady$D_IN;
	if (ctop_app_appW3_wmemi_reqF_c_r$EN)
	  ctop_app_appW3_wmemi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_reqF_c_r$D_IN;
	if (ctop_app_appW3_wmemi_reqF_q_0$EN)
	  ctop_app_appW3_wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_reqF_q_0$D_IN;
	if (ctop_app_appW3_wmemi_reqF_q_1$EN)
	  ctop_app_appW3_wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_reqF_q_1$D_IN;
	if (ctop_app_appW3_wmemi_trafficSticky$EN)
	  ctop_app_appW3_wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wmemi_trafficSticky$D_IN;
	if (ctop_app_appW3_wrtSerAddr$EN)
	  ctop_app_appW3_wrtSerAddr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wrtSerAddr$D_IN;
	if (ctop_app_appW3_wrtSerPos$EN)
	  ctop_app_appW3_wrtSerPos <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wrtSerPos$D_IN;
	if (ctop_app_appW3_wrtSerUnroll$EN)
	  ctop_app_appW3_wrtSerUnroll <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wrtSerUnroll$D_IN;
	if (ctop_app_appW3_wsiM_burstKind$EN)
	  ctop_app_appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_burstKind$D_IN;
	if (ctop_app_appW3_wsiM_errorSticky$EN)
	  ctop_app_appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_errorSticky$D_IN;
	if (ctop_app_appW3_wsiM_iMesgCount$EN)
	  ctop_app_appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_iMesgCount$D_IN;
	if (ctop_app_appW3_wsiM_operateD$EN)
	  ctop_app_appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_operateD$D_IN;
	if (ctop_app_appW3_wsiM_pMesgCount$EN)
	  ctop_app_appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_pMesgCount$D_IN;
	if (ctop_app_appW3_wsiM_peerIsReady$EN)
	  ctop_app_appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_peerIsReady$D_IN;
	if (ctop_app_appW3_wsiM_reqFifo_c_r$EN)
	  ctop_app_appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_reqFifo_c_r$D_IN;
	if (ctop_app_appW3_wsiM_reqFifo_q_0$EN)
	  ctop_app_appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_reqFifo_q_0$D_IN;
	if (ctop_app_appW3_wsiM_reqFifo_q_1$EN)
	  ctop_app_appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_reqFifo_q_1$D_IN;
	if (ctop_app_appW3_wsiM_sThreadBusy_d$EN)
	  ctop_app_appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_sThreadBusy_d$D_IN;
	if (ctop_app_appW3_wsiM_tBusyCount$EN)
	  ctop_app_appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_tBusyCount$D_IN;
	if (ctop_app_appW3_wsiM_trafficSticky$EN)
	  ctop_app_appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiM_trafficSticky$D_IN;
	if (ctop_app_appW3_wsiS_burstKind$EN)
	  ctop_app_appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_burstKind$D_IN;
	if (ctop_app_appW3_wsiS_errorSticky$EN)
	  ctop_app_appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_errorSticky$D_IN;
	if (ctop_app_appW3_wsiS_iMesgCount$EN)
	  ctop_app_appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_iMesgCount$D_IN;
	if (ctop_app_appW3_wsiS_operateD$EN)
	  ctop_app_appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_operateD$D_IN;
	if (ctop_app_appW3_wsiS_pMesgCount$EN)
	  ctop_app_appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_pMesgCount$D_IN;
	if (ctop_app_appW3_wsiS_peerIsReady$EN)
	  ctop_app_appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_peerIsReady$D_IN;
	if (ctop_app_appW3_wsiS_reqFifo_countReg$EN)
	  ctop_app_appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_reqFifo_countReg$D_IN;
	if (ctop_app_appW3_wsiS_reqFifo_levelsValid$EN)
	  ctop_app_appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_reqFifo_levelsValid$D_IN;
	if (ctop_app_appW3_wsiS_tBusyCount$EN)
	  ctop_app_appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_tBusyCount$D_IN;
	if (ctop_app_appW3_wsiS_trafficSticky$EN)
	  ctop_app_appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_trafficSticky$D_IN;
	if (ctop_app_appW3_wsiS_wordCount$EN)
	  ctop_app_appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW3_wsiS_wordCount$D_IN;
      end
    if (!ctop_inf_cp$RST_N_wci_Vm_2)
      begin
        ctop_app_appW2_abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW2_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctop_app_appW2_firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_impreciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_app_appW2_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_mesgLength <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	ctop_app_appW2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	ctop_app_appW2_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_mesgReqValid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	ctop_app_appW2_preciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	ctop_app_appW2_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW2_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW2_smaCtrl <= `BSV_ASSIGNMENT_DELAY 32'h00000001;
	ctop_app_appW2_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	ctop_app_appW2_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	ctop_app_appW2_valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	ctop_app_appW2_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_app_appW2_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ctop_app_appW2_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_app_appW2_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	ctop_app_appW2_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW2_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	ctop_app_appW2_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	ctop_app_appW2_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	ctop_app_appW2_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	ctop_app_appW2_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	ctop_app_appW2_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	ctop_app_appW2_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW2_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ctop_app_appW2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_app_appW2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ctop_app_appW2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ctop_app_appW2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	ctop_app_appW2_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	ctop_app_appW2_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ctop_app_appW2_abortCount$EN)
	  ctop_app_appW2_abortCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_abortCount$D_IN;
	if (ctop_app_appW2_doAbort$EN)
	  ctop_app_appW2_doAbort <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_doAbort$D_IN;
	if (ctop_app_appW2_endOfMessage$EN)
	  ctop_app_appW2_endOfMessage <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_endOfMessage$D_IN;
	if (ctop_app_appW2_errCount$EN)
	  ctop_app_appW2_errCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_errCount$D_IN;
	if (ctop_app_appW2_fabRespCredit_value$EN)
	  ctop_app_appW2_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_fabRespCredit_value$D_IN;
	if (ctop_app_appW2_fabWordsRemain$EN)
	  ctop_app_appW2_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_fabWordsRemain$D_IN;
	if (ctop_app_appW2_firstMsgReq$EN)
	  ctop_app_appW2_firstMsgReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_firstMsgReq$D_IN;
	if (ctop_app_appW2_impreciseBurst$EN)
	  ctop_app_appW2_impreciseBurst <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_impreciseBurst$D_IN;
	if (ctop_app_appW2_lastMesg$EN)
	  ctop_app_appW2_lastMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_lastMesg$D_IN;
	if (ctop_app_appW2_mesgCount$EN)
	  ctop_app_appW2_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_mesgCount$D_IN;
	if (ctop_app_appW2_mesgLength$EN)
	  ctop_app_appW2_mesgLength <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_mesgLength$D_IN;
	if (ctop_app_appW2_mesgLengthSoFar$EN)
	  ctop_app_appW2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_mesgLengthSoFar$D_IN;
	if (ctop_app_appW2_mesgPreRequest$EN)
	  ctop_app_appW2_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_mesgPreRequest$D_IN;
	if (ctop_app_appW2_mesgReqOK$EN)
	  ctop_app_appW2_mesgReqOK <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_mesgReqOK$D_IN;
	if (ctop_app_appW2_mesgReqValid$EN)
	  ctop_app_appW2_mesgReqValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_mesgReqValid$D_IN;
	if (ctop_app_appW2_opcode$EN)
	  ctop_app_appW2_opcode <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_opcode$D_IN;
	if (ctop_app_appW2_preciseBurst$EN)
	  ctop_app_appW2_preciseBurst <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_preciseBurst$D_IN;
	if (ctop_app_appW2_readyToPush$EN)
	  ctop_app_appW2_readyToPush <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_readyToPush$D_IN;
	if (ctop_app_appW2_readyToRequest$EN)
	  ctop_app_appW2_readyToRequest <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_readyToRequest$D_IN;
	if (ctop_app_appW2_respF_rCache$EN)
	  ctop_app_appW2_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_respF_rCache$D_IN;
	if (ctop_app_appW2_respF_rRdPtr$EN)
	  ctop_app_appW2_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_respF_rRdPtr$D_IN;
	if (ctop_app_appW2_respF_rWrPtr$EN)
	  ctop_app_appW2_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_respF_rWrPtr$D_IN;
	if (ctop_app_appW2_smaCtrl$EN)
	  ctop_app_appW2_smaCtrl <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_smaCtrl$D_IN;
	if (ctop_app_appW2_thisMesg$EN)
	  ctop_app_appW2_thisMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_thisMesg$D_IN;
	if (ctop_app_appW2_unrollCnt$EN)
	  ctop_app_appW2_unrollCnt <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_unrollCnt$D_IN;
	if (ctop_app_appW2_valExpect$EN)
	  ctop_app_appW2_valExpect <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_valExpect$D_IN;
	if (ctop_app_appW2_wci_cEdge$EN)
	  ctop_app_appW2_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_cEdge$D_IN;
	if (ctop_app_appW2_wci_cState$EN)
	  ctop_app_appW2_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_cState$D_IN;
	if (ctop_app_appW2_wci_ctlAckReg$EN)
	  ctop_app_appW2_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_ctlAckReg$D_IN;
	if (ctop_app_appW2_wci_ctlOpActive$EN)
	  ctop_app_appW2_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_ctlOpActive$D_IN;
	if (ctop_app_appW2_wci_illegalEdge$EN)
	  ctop_app_appW2_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_illegalEdge$D_IN;
	if (ctop_app_appW2_wci_nState$EN)
	  ctop_app_appW2_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_nState$D_IN;
	if (ctop_app_appW2_wci_reqF_countReg$EN)
	  ctop_app_appW2_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_reqF_countReg$D_IN;
	if (ctop_app_appW2_wci_respF_c_r$EN)
	  ctop_app_appW2_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_respF_c_r$D_IN;
	if (ctop_app_appW2_wci_respF_q_0$EN)
	  ctop_app_appW2_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_respF_q_0$D_IN;
	if (ctop_app_appW2_wci_respF_q_1$EN)
	  ctop_app_appW2_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_respF_q_1$D_IN;
	if (ctop_app_appW2_wci_sFlagReg$EN)
	  ctop_app_appW2_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_sFlagReg$D_IN;
	if (ctop_app_appW2_wci_sThreadBusy_d$EN)
	  ctop_app_appW2_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wci_sThreadBusy_d$D_IN;
	if (ctop_app_appW2_wmi_busyWithMessage$EN)
	  ctop_app_appW2_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_busyWithMessage$D_IN;
	if (ctop_app_appW2_wmi_dhF_c_r$EN)
	  ctop_app_appW2_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_dhF_c_r$D_IN;
	if (ctop_app_appW2_wmi_dhF_q_0$EN)
	  ctop_app_appW2_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_dhF_q_0$D_IN;
	if (ctop_app_appW2_wmi_dhF_q_1$EN)
	  ctop_app_appW2_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_dhF_q_1$D_IN;
	if (ctop_app_appW2_wmi_errorSticky$EN)
	  ctop_app_appW2_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_errorSticky$D_IN;
	if (ctop_app_appW2_wmi_mFlagF_c_r$EN)
	  ctop_app_appW2_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_mFlagF_c_r$D_IN;
	if (ctop_app_appW2_wmi_mFlagF_q_0$EN)
	  ctop_app_appW2_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_mFlagF_q_0$D_IN;
	if (ctop_app_appW2_wmi_mFlagF_q_1$EN)
	  ctop_app_appW2_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_mFlagF_q_1$D_IN;
	if (ctop_app_appW2_wmi_operateD$EN)
	  ctop_app_appW2_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_operateD$D_IN;
	if (ctop_app_appW2_wmi_peerIsReady$EN)
	  ctop_app_appW2_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_peerIsReady$D_IN;
	if (ctop_app_appW2_wmi_reqF_c_r$EN)
	  ctop_app_appW2_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_reqF_c_r$D_IN;
	if (ctop_app_appW2_wmi_reqF_q_0$EN)
	  ctop_app_appW2_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_reqF_q_0$D_IN;
	if (ctop_app_appW2_wmi_reqF_q_1$EN)
	  ctop_app_appW2_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_reqF_q_1$D_IN;
	if (ctop_app_appW2_wmi_sDataThreadBusy_d$EN)
	  ctop_app_appW2_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_sDataThreadBusy_d$D_IN;
	if (ctop_app_appW2_wmi_sFlagReg$EN)
	  ctop_app_appW2_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_sFlagReg$D_IN;
	if (ctop_app_appW2_wmi_sThreadBusy_d$EN)
	  ctop_app_appW2_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_sThreadBusy_d$D_IN;
	if (ctop_app_appW2_wmi_trafficSticky$EN)
	  ctop_app_appW2_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wmi_trafficSticky$D_IN;
	if (ctop_app_appW2_wsiM_burstKind$EN)
	  ctop_app_appW2_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_burstKind$D_IN;
	if (ctop_app_appW2_wsiM_errorSticky$EN)
	  ctop_app_appW2_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_errorSticky$D_IN;
	if (ctop_app_appW2_wsiM_iMesgCount$EN)
	  ctop_app_appW2_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_iMesgCount$D_IN;
	if (ctop_app_appW2_wsiM_operateD$EN)
	  ctop_app_appW2_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_operateD$D_IN;
	if (ctop_app_appW2_wsiM_pMesgCount$EN)
	  ctop_app_appW2_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_pMesgCount$D_IN;
	if (ctop_app_appW2_wsiM_peerIsReady$EN)
	  ctop_app_appW2_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_peerIsReady$D_IN;
	if (ctop_app_appW2_wsiM_reqFifo_c_r$EN)
	  ctop_app_appW2_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_reqFifo_c_r$D_IN;
	if (ctop_app_appW2_wsiM_reqFifo_q_0$EN)
	  ctop_app_appW2_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_reqFifo_q_0$D_IN;
	if (ctop_app_appW2_wsiM_reqFifo_q_1$EN)
	  ctop_app_appW2_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_reqFifo_q_1$D_IN;
	if (ctop_app_appW2_wsiM_sThreadBusy_d$EN)
	  ctop_app_appW2_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_sThreadBusy_d$D_IN;
	if (ctop_app_appW2_wsiM_tBusyCount$EN)
	  ctop_app_appW2_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_tBusyCount$D_IN;
	if (ctop_app_appW2_wsiM_trafficSticky$EN)
	  ctop_app_appW2_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiM_trafficSticky$D_IN;
	if (ctop_app_appW2_wsiS_burstKind$EN)
	  ctop_app_appW2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_burstKind$D_IN;
	if (ctop_app_appW2_wsiS_errorSticky$EN)
	  ctop_app_appW2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_errorSticky$D_IN;
	if (ctop_app_appW2_wsiS_iMesgCount$EN)
	  ctop_app_appW2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_iMesgCount$D_IN;
	if (ctop_app_appW2_wsiS_operateD$EN)
	  ctop_app_appW2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_operateD$D_IN;
	if (ctop_app_appW2_wsiS_pMesgCount$EN)
	  ctop_app_appW2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_pMesgCount$D_IN;
	if (ctop_app_appW2_wsiS_peerIsReady$EN)
	  ctop_app_appW2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_peerIsReady$D_IN;
	if (ctop_app_appW2_wsiS_reqFifo_countReg$EN)
	  ctop_app_appW2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_reqFifo_countReg$D_IN;
	if (ctop_app_appW2_wsiS_reqFifo_levelsValid$EN)
	  ctop_app_appW2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_reqFifo_levelsValid$D_IN;
	if (ctop_app_appW2_wsiS_tBusyCount$EN)
	  ctop_app_appW2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_tBusyCount$D_IN;
	if (ctop_app_appW2_wsiS_trafficSticky$EN)
	  ctop_app_appW2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_trafficSticky$D_IN;
	if (ctop_app_appW2_wsiS_wordCount$EN)
	  ctop_app_appW2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiS_wordCount$D_IN;
	if (ctop_app_appW2_wsiWordsRemain$EN)
	  ctop_app_appW2_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_wsiWordsRemain$D_IN;
	if (ctop_app_appW2_zeroLengthMesg$EN)
	  ctop_app_appW2_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY
	      ctop_app_appW2_zeroLengthMesg$D_IN;
      end
    if (!trn2_rst$OUT_RST_N)
      begin
        ctop_inf_chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ctop_inf_itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	ctop_inf_itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ctop_inf_itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	ctop_inf_itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ctop_inf_chompCnt$EN)
	  ctop_inf_chompCnt <= `BSV_ASSIGNMENT_DELAY ctop_inf_chompCnt$D_IN;
	if (ctop_inf_itc0_wti_nowReq$EN)
	  ctop_inf_itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_itc0_wti_nowReq$D_IN;
	if (ctop_inf_itc0_wti_sThreadBusy_d$EN)
	  ctop_inf_itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_itc0_wti_sThreadBusy_d$D_IN;
	if (ctop_inf_itc1_wti_nowReq$EN)
	  ctop_inf_itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_itc1_wti_nowReq$D_IN;
	if (ctop_inf_itc1_wti_sThreadBusy_d$EN)
	  ctop_inf_itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      ctop_inf_itc1_wti_sThreadBusy_d$D_IN;
	if (i2pAF_tail_wrapped$EN)
	  i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY i2pAF_tail_wrapped$D_IN;
	if (p2iAF_head_wrapped$EN)
	  p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY p2iAF_head_wrapped$D_IN;
      end
    if (ctop_app_appW2_fabWordsCurReq$EN)
      ctop_app_appW2_fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW2_fabWordsCurReq$D_IN;
    if (ctop_app_appW2_mesgReqAddr$EN)
      ctop_app_appW2_mesgReqAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW2_mesgReqAddr$D_IN;
    if (ctop_app_appW2_wmi_statusR$EN)
      ctop_app_appW2_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW2_wmi_statusR$D_IN;
    if (ctop_app_appW2_wsiM_statusR$EN)
      ctop_app_appW2_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW2_wsiM_statusR$D_IN;
    if (ctop_app_appW2_wsiS_mesgWordLength$EN)
      ctop_app_appW2_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW2_wsiS_mesgWordLength$D_IN;
    if (ctop_app_appW2_wsiS_statusR$EN)
      ctop_app_appW2_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW2_wsiS_statusR$D_IN;
    if (ctop_app_appW3_rdSerMeta$EN)
      ctop_app_appW3_rdSerMeta <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_rdSerMeta$D_IN;
    if (ctop_app_appW3_rdSerStage$EN)
      ctop_app_appW3_rdSerStage <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_rdSerStage$D_IN;
    if (ctop_app_appW3_rdSerStage_1$EN)
      ctop_app_appW3_rdSerStage_1 <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_rdSerStage_1$D_IN;
    if (ctop_app_appW3_rdSerStage_2$EN)
      ctop_app_appW3_rdSerStage_2 <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_rdSerStage_2$D_IN;
    if (ctop_app_appW3_rdSerStage_3$EN)
      ctop_app_appW3_rdSerStage_3 <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_rdSerStage_3$D_IN;
    if (ctop_app_appW3_readMeta$EN)
      ctop_app_appW3_readMeta <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_readMeta$D_IN;
    if (ctop_app_appW3_wmemi_statusR$EN)
      ctop_app_appW3_wmemi_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wmemi_statusR$D_IN;
    if (ctop_app_appW3_wrtSerStage$EN)
      ctop_app_appW3_wrtSerStage <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wrtSerStage$D_IN;
    if (ctop_app_appW3_wrtSerStage_1$EN)
      ctop_app_appW3_wrtSerStage_1 <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wrtSerStage_1$D_IN;
    if (ctop_app_appW3_wrtSerStage_2$EN)
      ctop_app_appW3_wrtSerStage_2 <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wrtSerStage_2$D_IN;
    if (ctop_app_appW3_wrtSerStage_3$EN)
      ctop_app_appW3_wrtSerStage_3 <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wrtSerStage_3$D_IN;
    if (ctop_app_appW3_wsiM_statusR$EN)
      ctop_app_appW3_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wsiM_statusR$D_IN;
    if (ctop_app_appW3_wsiS_mesgWordLength$EN)
      ctop_app_appW3_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wsiS_mesgWordLength$D_IN;
    if (ctop_app_appW3_wsiS_statusR$EN)
      ctop_app_appW3_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW3_wsiS_statusR$D_IN;
    if (ctop_app_appW4_fabWordsCurReq$EN)
      ctop_app_appW4_fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW4_fabWordsCurReq$D_IN;
    if (ctop_app_appW4_mesgReqAddr$EN)
      ctop_app_appW4_mesgReqAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW4_mesgReqAddr$D_IN;
    if (ctop_app_appW4_wmi_statusR$EN)
      ctop_app_appW4_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW4_wmi_statusR$D_IN;
    if (ctop_app_appW4_wsiM_statusR$EN)
      ctop_app_appW4_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW4_wsiM_statusR$D_IN;
    if (ctop_app_appW4_wsiS_mesgWordLength$EN)
      ctop_app_appW4_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW4_wsiS_mesgWordLength$D_IN;
    if (ctop_app_appW4_wsiS_statusR$EN)
      ctop_app_appW4_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_app_appW4_wsiS_statusR$D_IN;
    if (ctop_inf_dp0_bml_fabBufsAvail$EN)
      ctop_inf_dp0_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_fabBufsAvail$D_IN;
    if (ctop_inf_dp0_bml_fabFlowAddr$EN)
      ctop_inf_dp0_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_fabFlowAddr$D_IN;
    if (ctop_inf_dp0_bml_fabMesgAddr$EN)
      ctop_inf_dp0_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_fabMesgAddr$D_IN;
    if (ctop_inf_dp0_bml_fabMetaAddr$EN)
      ctop_inf_dp0_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_fabMetaAddr$D_IN;
    if (ctop_inf_dp0_bml_lclBufsAR$EN)
      ctop_inf_dp0_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_lclBufsAR$D_IN;
    if (ctop_inf_dp0_bml_lclBufsCF$EN)
      ctop_inf_dp0_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_lclBufsCF$D_IN;
    if (ctop_inf_dp0_bml_lclCredit$EN)
      ctop_inf_dp0_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_lclCredit$D_IN;
    if (ctop_inf_dp0_bml_lclMesgAddr$EN)
      ctop_inf_dp0_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_lclMesgAddr$D_IN;
    if (ctop_inf_dp0_bml_lclMetaAddr$EN)
      ctop_inf_dp0_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_lclMetaAddr$D_IN;
    if (ctop_inf_dp0_bml_remMesgAddr$EN)
      ctop_inf_dp0_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_remMesgAddr$D_IN;
    if (ctop_inf_dp0_bml_remMetaAddr$EN)
      ctop_inf_dp0_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_bml_remMetaAddr$D_IN;
    if (ctop_inf_dp0_tlp_dmaPullRemainDWLen$EN)
      ctop_inf_dp0_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_dmaPullRemainDWLen$D_IN;
    if (ctop_inf_dp0_tlp_dmaPullRemainDWSub$EN)
      ctop_inf_dp0_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_dmaPullRemainDWSub$D_IN;
    if (ctop_inf_dp0_tlp_dmaReqTag$EN)
      ctop_inf_dp0_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_dmaReqTag$D_IN;
    if (ctop_inf_dp0_tlp_fabFlowAddr$EN)
      ctop_inf_dp0_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_fabFlowAddr$D_IN;
    if (ctop_inf_dp0_tlp_fabMesgAccu$EN)
      ctop_inf_dp0_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_fabMesgAccu$D_IN;
    if (ctop_inf_dp0_tlp_fabMesgAddr$EN)
      ctop_inf_dp0_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_fabMesgAddr$D_IN;
    if (ctop_inf_dp0_tlp_fabMetaAddr$EN)
      ctop_inf_dp0_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_fabMetaAddr$D_IN;
    if (ctop_inf_dp0_tlp_inIgnorePkt$EN)
      ctop_inf_dp0_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_inIgnorePkt$D_IN;
    if (ctop_inf_dp0_tlp_mesgComplReceived$EN)
      ctop_inf_dp0_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_mesgComplReceived$D_IN;
    if (ctop_inf_dp0_tlp_mesgLengthRemainPull$EN)
      ctop_inf_dp0_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_mesgLengthRemainPull$D_IN;
    if (ctop_inf_dp0_tlp_mesgLengthRemainPush$EN)
      ctop_inf_dp0_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_mesgLengthRemainPush$D_IN;
    if (ctop_inf_dp0_tlp_outDwRemain$EN)
      ctop_inf_dp0_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_outDwRemain$D_IN;
    if (ctop_inf_dp0_tlp_rdRespDwRemain$EN)
      ctop_inf_dp0_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_rdRespDwRemain$D_IN;
    if (ctop_inf_dp0_tlp_readNxtDWAddr$EN)
      ctop_inf_dp0_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_readNxtDWAddr$D_IN;
    if (ctop_inf_dp0_tlp_readRemainDWLen$EN)
      ctop_inf_dp0_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_readRemainDWLen$D_IN;
    if (ctop_inf_dp0_tlp_remMesgAccu$EN)
      ctop_inf_dp0_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_remMesgAccu$D_IN;
    if (ctop_inf_dp0_tlp_remMesgAddr$EN)
      ctop_inf_dp0_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_remMesgAddr$D_IN;
    if (ctop_inf_dp0_tlp_remMetaAddr$EN)
      ctop_inf_dp0_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_remMetaAddr$D_IN;
    if (ctop_inf_dp0_tlp_srcMesgAccu$EN)
      ctop_inf_dp0_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_srcMesgAccu$D_IN;
    if (ctop_inf_dp0_tlp_writeDWAddr$EN)
      ctop_inf_dp0_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_writeDWAddr$D_IN;
    if (ctop_inf_dp0_tlp_writeLastBE$EN)
      ctop_inf_dp0_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_writeLastBE$D_IN;
    if (ctop_inf_dp0_tlp_writeRemainDWLen$EN)
      ctop_inf_dp0_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_tlp_writeRemainDWLen$D_IN;
    if (ctop_inf_dp0_wmi_addr$EN)
      ctop_inf_dp0_wmi_addr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_wmi_addr$D_IN;
    if (ctop_inf_dp0_wmi_bytesRemainReq$EN)
      ctop_inf_dp0_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_wmi_bytesRemainReq$D_IN;
    if (ctop_inf_dp0_wmi_lclMesgAddr$EN)
      ctop_inf_dp0_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_wmi_lclMesgAddr$D_IN;
    if (ctop_inf_dp0_wmi_lclMetaAddr$EN)
      ctop_inf_dp0_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_wmi_lclMetaAddr$D_IN;
    if (ctop_inf_dp0_wmi_wmi_statusR$EN)
      ctop_inf_dp0_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp0_wmi_wmi_statusR$D_IN;
    if (ctop_inf_dp1_bml_fabBufsAvail$EN)
      ctop_inf_dp1_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_fabBufsAvail$D_IN;
    if (ctop_inf_dp1_bml_fabFlowAddr$EN)
      ctop_inf_dp1_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_fabFlowAddr$D_IN;
    if (ctop_inf_dp1_bml_fabMesgAddr$EN)
      ctop_inf_dp1_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_fabMesgAddr$D_IN;
    if (ctop_inf_dp1_bml_fabMetaAddr$EN)
      ctop_inf_dp1_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_fabMetaAddr$D_IN;
    if (ctop_inf_dp1_bml_lclBufsAR$EN)
      ctop_inf_dp1_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_lclBufsAR$D_IN;
    if (ctop_inf_dp1_bml_lclBufsCF$EN)
      ctop_inf_dp1_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_lclBufsCF$D_IN;
    if (ctop_inf_dp1_bml_lclCredit$EN)
      ctop_inf_dp1_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_lclCredit$D_IN;
    if (ctop_inf_dp1_bml_lclMesgAddr$EN)
      ctop_inf_dp1_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_lclMesgAddr$D_IN;
    if (ctop_inf_dp1_bml_lclMetaAddr$EN)
      ctop_inf_dp1_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_lclMetaAddr$D_IN;
    if (ctop_inf_dp1_bml_remMesgAddr$EN)
      ctop_inf_dp1_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_remMesgAddr$D_IN;
    if (ctop_inf_dp1_bml_remMetaAddr$EN)
      ctop_inf_dp1_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_bml_remMetaAddr$D_IN;
    if (ctop_inf_dp1_tlp_dmaPullRemainDWLen$EN)
      ctop_inf_dp1_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_dmaPullRemainDWLen$D_IN;
    if (ctop_inf_dp1_tlp_dmaPullRemainDWSub$EN)
      ctop_inf_dp1_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_dmaPullRemainDWSub$D_IN;
    if (ctop_inf_dp1_tlp_dmaReqTag$EN)
      ctop_inf_dp1_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_dmaReqTag$D_IN;
    if (ctop_inf_dp1_tlp_fabFlowAddr$EN)
      ctop_inf_dp1_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_fabFlowAddr$D_IN;
    if (ctop_inf_dp1_tlp_fabMesgAccu$EN)
      ctop_inf_dp1_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_fabMesgAccu$D_IN;
    if (ctop_inf_dp1_tlp_fabMesgAddr$EN)
      ctop_inf_dp1_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_fabMesgAddr$D_IN;
    if (ctop_inf_dp1_tlp_fabMetaAddr$EN)
      ctop_inf_dp1_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_fabMetaAddr$D_IN;
    if (ctop_inf_dp1_tlp_inIgnorePkt$EN)
      ctop_inf_dp1_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_inIgnorePkt$D_IN;
    if (ctop_inf_dp1_tlp_mesgComplReceived$EN)
      ctop_inf_dp1_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_mesgComplReceived$D_IN;
    if (ctop_inf_dp1_tlp_mesgLengthRemainPull$EN)
      ctop_inf_dp1_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_mesgLengthRemainPull$D_IN;
    if (ctop_inf_dp1_tlp_mesgLengthRemainPush$EN)
      ctop_inf_dp1_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_mesgLengthRemainPush$D_IN;
    if (ctop_inf_dp1_tlp_outDwRemain$EN)
      ctop_inf_dp1_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_outDwRemain$D_IN;
    if (ctop_inf_dp1_tlp_rdRespDwRemain$EN)
      ctop_inf_dp1_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_rdRespDwRemain$D_IN;
    if (ctop_inf_dp1_tlp_readNxtDWAddr$EN)
      ctop_inf_dp1_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_readNxtDWAddr$D_IN;
    if (ctop_inf_dp1_tlp_readRemainDWLen$EN)
      ctop_inf_dp1_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_readRemainDWLen$D_IN;
    if (ctop_inf_dp1_tlp_remMesgAccu$EN)
      ctop_inf_dp1_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_remMesgAccu$D_IN;
    if (ctop_inf_dp1_tlp_remMesgAddr$EN)
      ctop_inf_dp1_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_remMesgAddr$D_IN;
    if (ctop_inf_dp1_tlp_remMetaAddr$EN)
      ctop_inf_dp1_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_remMetaAddr$D_IN;
    if (ctop_inf_dp1_tlp_srcMesgAccu$EN)
      ctop_inf_dp1_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_srcMesgAccu$D_IN;
    if (ctop_inf_dp1_tlp_writeDWAddr$EN)
      ctop_inf_dp1_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_writeDWAddr$D_IN;
    if (ctop_inf_dp1_tlp_writeLastBE$EN)
      ctop_inf_dp1_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_writeLastBE$D_IN;
    if (ctop_inf_dp1_tlp_writeRemainDWLen$EN)
      ctop_inf_dp1_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_tlp_writeRemainDWLen$D_IN;
    if (ctop_inf_dp1_wmi_addr$EN)
      ctop_inf_dp1_wmi_addr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_wmi_addr$D_IN;
    if (ctop_inf_dp1_wmi_bytesRemainReq$EN)
      ctop_inf_dp1_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_wmi_bytesRemainReq$D_IN;
    if (ctop_inf_dp1_wmi_lclMesgAddr$EN)
      ctop_inf_dp1_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_wmi_lclMesgAddr$D_IN;
    if (ctop_inf_dp1_wmi_lclMetaAddr$EN)
      ctop_inf_dp1_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_wmi_lclMetaAddr$D_IN;
    if (ctop_inf_dp1_wmi_wmi_statusR$EN)
      ctop_inf_dp1_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  ctop_inf_dp1_wmi_wmi_statusR$D_IN;
    if (i2pS$EN) i2pS <= `BSV_ASSIGNMENT_DELAY i2pS$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    Prelude_inst_changeSpecialWires_1_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    Prelude_inst_changeSpecialWires_4_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    ctop_app_appW2_abortCount = 32'hAAAAAAAA;
    ctop_app_appW2_doAbort = 1'h0;
    ctop_app_appW2_endOfMessage = 1'h0;
    ctop_app_appW2_errCount = 32'hAAAAAAAA;
    ctop_app_appW2_fabRespCredit_value = 12'hAAA;
    ctop_app_appW2_fabWordsCurReq = 14'h2AAA;
    ctop_app_appW2_fabWordsRemain = 14'h2AAA;
    ctop_app_appW2_firstMsgReq = 1'h0;
    ctop_app_appW2_impreciseBurst = 1'h0;
    ctop_app_appW2_lastMesg = 32'hAAAAAAAA;
    ctop_app_appW2_mesgCount = 32'hAAAAAAAA;
    ctop_app_appW2_mesgLength = 15'h2AAA;
    ctop_app_appW2_mesgLengthSoFar = 14'h2AAA;
    ctop_app_appW2_mesgPreRequest = 1'h0;
    ctop_app_appW2_mesgReqAddr = 14'h2AAA;
    ctop_app_appW2_mesgReqOK = 1'h0;
    ctop_app_appW2_mesgReqValid = 1'h0;
    ctop_app_appW2_opcode = 9'h0AA;
    ctop_app_appW2_preciseBurst = 1'h0;
    ctop_app_appW2_readyToPush = 1'h0;
    ctop_app_appW2_readyToRequest = 1'h0;
    ctop_app_appW2_respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    ctop_app_appW2_respF_rRdPtr = 12'hAAA;
    ctop_app_appW2_respF_rWrPtr = 12'hAAA;
    ctop_app_appW2_smaCtrl = 32'hAAAAAAAA;
    ctop_app_appW2_thisMesg = 32'hAAAAAAAA;
    ctop_app_appW2_unrollCnt = 16'hAAAA;
    ctop_app_appW2_valExpect = 32'hAAAAAAAA;
    ctop_app_appW2_wci_cEdge = 3'h2;
    ctop_app_appW2_wci_cState = 3'h2;
    ctop_app_appW2_wci_ctlAckReg = 1'h0;
    ctop_app_appW2_wci_ctlOpActive = 1'h0;
    ctop_app_appW2_wci_illegalEdge = 1'h0;
    ctop_app_appW2_wci_nState = 3'h2;
    ctop_app_appW2_wci_reqF_countReg = 2'h2;
    ctop_app_appW2_wci_respF_c_r = 2'h2;
    ctop_app_appW2_wci_respF_q_0 = 34'h2AAAAAAAA;
    ctop_app_appW2_wci_respF_q_1 = 34'h2AAAAAAAA;
    ctop_app_appW2_wci_sFlagReg = 1'h0;
    ctop_app_appW2_wci_sThreadBusy_d = 1'h0;
    ctop_app_appW2_wmi_busyWithMessage = 1'h0;
    ctop_app_appW2_wmi_dhF_c_r = 2'h2;
    ctop_app_appW2_wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    ctop_app_appW2_wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    ctop_app_appW2_wmi_errorSticky = 1'h0;
    ctop_app_appW2_wmi_mFlagF_c_r = 2'h2;
    ctop_app_appW2_wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    ctop_app_appW2_wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    ctop_app_appW2_wmi_operateD = 1'h0;
    ctop_app_appW2_wmi_peerIsReady = 1'h0;
    ctop_app_appW2_wmi_reqF_c_r = 2'h2;
    ctop_app_appW2_wmi_reqF_q_0 = 32'hAAAAAAAA;
    ctop_app_appW2_wmi_reqF_q_1 = 32'hAAAAAAAA;
    ctop_app_appW2_wmi_sDataThreadBusy_d = 1'h0;
    ctop_app_appW2_wmi_sFlagReg = 32'hAAAAAAAA;
    ctop_app_appW2_wmi_sThreadBusy_d = 1'h0;
    ctop_app_appW2_wmi_statusR = 8'hAA;
    ctop_app_appW2_wmi_trafficSticky = 1'h0;
    ctop_app_appW2_wsiM_burstKind = 2'h2;
    ctop_app_appW2_wsiM_errorSticky = 1'h0;
    ctop_app_appW2_wsiM_iMesgCount = 32'hAAAAAAAA;
    ctop_app_appW2_wsiM_operateD = 1'h0;
    ctop_app_appW2_wsiM_pMesgCount = 32'hAAAAAAAA;
    ctop_app_appW2_wsiM_peerIsReady = 1'h0;
    ctop_app_appW2_wsiM_reqFifo_c_r = 2'h2;
    ctop_app_appW2_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    ctop_app_appW2_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    ctop_app_appW2_wsiM_sThreadBusy_d = 1'h0;
    ctop_app_appW2_wsiM_statusR = 8'hAA;
    ctop_app_appW2_wsiM_tBusyCount = 32'hAAAAAAAA;
    ctop_app_appW2_wsiM_trafficSticky = 1'h0;
    ctop_app_appW2_wsiS_burstKind = 2'h2;
    ctop_app_appW2_wsiS_errorSticky = 1'h0;
    ctop_app_appW2_wsiS_iMesgCount = 32'hAAAAAAAA;
    ctop_app_appW2_wsiS_mesgWordLength = 12'hAAA;
    ctop_app_appW2_wsiS_operateD = 1'h0;
    ctop_app_appW2_wsiS_pMesgCount = 32'hAAAAAAAA;
    ctop_app_appW2_wsiS_peerIsReady = 1'h0;
    ctop_app_appW2_wsiS_reqFifo_countReg = 2'h2;
    ctop_app_appW2_wsiS_reqFifo_levelsValid = 1'h0;
    ctop_app_appW2_wsiS_statusR = 8'hAA;
    ctop_app_appW2_wsiS_tBusyCount = 32'hAAAAAAAA;
    ctop_app_appW2_wsiS_trafficSticky = 1'h0;
    ctop_app_appW2_wsiS_wordCount = 12'hAAA;
    ctop_app_appW2_wsiWordsRemain = 12'hAAA;
    ctop_app_appW2_zeroLengthMesg = 1'h0;
    ctop_app_appW3_bytesRead = 32'hAAAAAAAA;
    ctop_app_appW3_bytesThisMessage = 24'hAAAAAA;
    ctop_app_appW3_bytesWritten = 32'hAAAAAAAA;
    ctop_app_appW3_cyclesPassed = 32'hAAAAAAAA;
    ctop_app_appW3_dlyCtrl = 32'hAAAAAAAA;
    ctop_app_appW3_dlyHoldoffBytes = 32'hAAAAAAAA;
    ctop_app_appW3_dlyHoldoffCycles = 32'hAAAAAAAA;
    ctop_app_appW3_dlyRAG = 23'h2AAAAA;
    ctop_app_appW3_dlyRdOpOther = 32'hAAAAAAAA;
    ctop_app_appW3_dlyRdOpZero = 32'hAAAAAAAA;
    ctop_app_appW3_dlyReadCredit_value = 8'hAA;
    ctop_app_appW3_dlyReadyToWrite_value = 16'hAAAA;
    ctop_app_appW3_dlyWAG = 23'h2AAAAA;
    ctop_app_appW3_dlyWordsStored_value = 25'h0AAAAAA;
    ctop_app_appW3_mesgLengthSoFar = 14'h2AAA;
    ctop_app_appW3_mesgRdCount = 32'hAAAAAAAA;
    ctop_app_appW3_mesgWF_rCache = 46'h2AAAAAAAAAAA;
    ctop_app_appW3_mesgWF_rRdPtr = 13'h0AAA;
    ctop_app_appW3_mesgWF_rWrPtr = 13'h0AAA;
    ctop_app_appW3_mesgWtCount = 32'hAAAAAAAA;
    ctop_app_appW3_rdSerAddr = 32'hAAAAAAAA;
    ctop_app_appW3_rdSerEmpty = 1'h0;
    ctop_app_appW3_rdSerMeta = 32'hAAAAAAAA;
    ctop_app_appW3_rdSerPos = 2'h2;
    ctop_app_appW3_rdSerStage = 32'hAAAAAAAA;
    ctop_app_appW3_rdSerStage_1 = 32'hAAAAAAAA;
    ctop_app_appW3_rdSerStage_2 = 32'hAAAAAAAA;
    ctop_app_appW3_rdSerStage_3 = 32'hAAAAAAAA;
    ctop_app_appW3_rdSerUnroll = 16'hAAAA;
    ctop_app_appW3_rdSyncWord = 1'h0;
    ctop_app_appW3_readMeta = 32'hAAAAAAAA;
    ctop_app_appW3_tog50 = 1'h0;
    ctop_app_appW3_unrollCnt = 16'hAAAA;
    ctop_app_appW3_wci_cEdge = 3'h2;
    ctop_app_appW3_wci_cState = 3'h2;
    ctop_app_appW3_wci_ctlAckReg = 1'h0;
    ctop_app_appW3_wci_ctlOpActive = 1'h0;
    ctop_app_appW3_wci_illegalEdge = 1'h0;
    ctop_app_appW3_wci_nState = 3'h2;
    ctop_app_appW3_wci_reqF_countReg = 2'h2;
    ctop_app_appW3_wci_respF_c_r = 2'h2;
    ctop_app_appW3_wci_respF_q_0 = 34'h2AAAAAAAA;
    ctop_app_appW3_wci_respF_q_1 = 34'h2AAAAAAAA;
    ctop_app_appW3_wci_sFlagReg = 1'h0;
    ctop_app_appW3_wci_sThreadBusy_d = 1'h0;
    ctop_app_appW3_wmemiRdReq = 32'hAAAAAAAA;
    ctop_app_appW3_wmemiRdResp1 = 32'hAAAAAAAA;
    ctop_app_appW3_wmemiRdResp2 = 32'hAAAAAAAA;
    ctop_app_appW3_wmemiWrReq = 32'hAAAAAAAA;
    ctop_app_appW3_wmemi_busyWithMessage = 1'h0;
    ctop_app_appW3_wmemi_dhF_c_r = 2'h2;
    ctop_app_appW3_wmemi_dhF_q_0 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_app_appW3_wmemi_dhF_q_1 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_app_appW3_wmemi_errorSticky = 1'h0;
    ctop_app_appW3_wmemi_operateD = 1'h0;
    ctop_app_appW3_wmemi_peerIsReady = 1'h0;
    ctop_app_appW3_wmemi_reqF_c_r = 2'h2;
    ctop_app_appW3_wmemi_reqF_q_0 = 52'hAAAAAAAAAAAAA;
    ctop_app_appW3_wmemi_reqF_q_1 = 52'hAAAAAAAAAAAAA;
    ctop_app_appW3_wmemi_statusR = 8'hAA;
    ctop_app_appW3_wmemi_trafficSticky = 1'h0;
    ctop_app_appW3_wrtSerAddr = 32'hAAAAAAAA;
    ctop_app_appW3_wrtSerPos = 2'h2;
    ctop_app_appW3_wrtSerStage = 32'hAAAAAAAA;
    ctop_app_appW3_wrtSerStage_1 = 32'hAAAAAAAA;
    ctop_app_appW3_wrtSerStage_2 = 32'hAAAAAAAA;
    ctop_app_appW3_wrtSerStage_3 = 32'hAAAAAAAA;
    ctop_app_appW3_wrtSerUnroll = 16'hAAAA;
    ctop_app_appW3_wsiM_burstKind = 2'h2;
    ctop_app_appW3_wsiM_errorSticky = 1'h0;
    ctop_app_appW3_wsiM_iMesgCount = 32'hAAAAAAAA;
    ctop_app_appW3_wsiM_operateD = 1'h0;
    ctop_app_appW3_wsiM_pMesgCount = 32'hAAAAAAAA;
    ctop_app_appW3_wsiM_peerIsReady = 1'h0;
    ctop_app_appW3_wsiM_reqFifo_c_r = 2'h2;
    ctop_app_appW3_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    ctop_app_appW3_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    ctop_app_appW3_wsiM_sThreadBusy_d = 1'h0;
    ctop_app_appW3_wsiM_statusR = 8'hAA;
    ctop_app_appW3_wsiM_tBusyCount = 32'hAAAAAAAA;
    ctop_app_appW3_wsiM_trafficSticky = 1'h0;
    ctop_app_appW3_wsiS_burstKind = 2'h2;
    ctop_app_appW3_wsiS_errorSticky = 1'h0;
    ctop_app_appW3_wsiS_iMesgCount = 32'hAAAAAAAA;
    ctop_app_appW3_wsiS_mesgWordLength = 12'hAAA;
    ctop_app_appW3_wsiS_operateD = 1'h0;
    ctop_app_appW3_wsiS_pMesgCount = 32'hAAAAAAAA;
    ctop_app_appW3_wsiS_peerIsReady = 1'h0;
    ctop_app_appW3_wsiS_reqFifo_countReg = 2'h2;
    ctop_app_appW3_wsiS_reqFifo_levelsValid = 1'h0;
    ctop_app_appW3_wsiS_statusR = 8'hAA;
    ctop_app_appW3_wsiS_tBusyCount = 32'hAAAAAAAA;
    ctop_app_appW3_wsiS_trafficSticky = 1'h0;
    ctop_app_appW3_wsiS_wordCount = 12'hAAA;
    ctop_app_appW4_abortCount = 32'hAAAAAAAA;
    ctop_app_appW4_doAbort = 1'h0;
    ctop_app_appW4_endOfMessage = 1'h0;
    ctop_app_appW4_errCount = 32'hAAAAAAAA;
    ctop_app_appW4_fabRespCredit_value = 12'hAAA;
    ctop_app_appW4_fabWordsCurReq = 14'h2AAA;
    ctop_app_appW4_fabWordsRemain = 14'h2AAA;
    ctop_app_appW4_firstMsgReq = 1'h0;
    ctop_app_appW4_impreciseBurst = 1'h0;
    ctop_app_appW4_lastMesg = 32'hAAAAAAAA;
    ctop_app_appW4_mesgCount = 32'hAAAAAAAA;
    ctop_app_appW4_mesgLength = 15'h2AAA;
    ctop_app_appW4_mesgLengthSoFar = 14'h2AAA;
    ctop_app_appW4_mesgPreRequest = 1'h0;
    ctop_app_appW4_mesgReqAddr = 14'h2AAA;
    ctop_app_appW4_mesgReqOK = 1'h0;
    ctop_app_appW4_mesgReqValid = 1'h0;
    ctop_app_appW4_opcode = 9'h0AA;
    ctop_app_appW4_preciseBurst = 1'h0;
    ctop_app_appW4_readyToPush = 1'h0;
    ctop_app_appW4_readyToRequest = 1'h0;
    ctop_app_appW4_respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    ctop_app_appW4_respF_rRdPtr = 12'hAAA;
    ctop_app_appW4_respF_rWrPtr = 12'hAAA;
    ctop_app_appW4_smaCtrl = 32'hAAAAAAAA;
    ctop_app_appW4_thisMesg = 32'hAAAAAAAA;
    ctop_app_appW4_unrollCnt = 16'hAAAA;
    ctop_app_appW4_valExpect = 32'hAAAAAAAA;
    ctop_app_appW4_wci_cEdge = 3'h2;
    ctop_app_appW4_wci_cState = 3'h2;
    ctop_app_appW4_wci_ctlAckReg = 1'h0;
    ctop_app_appW4_wci_ctlOpActive = 1'h0;
    ctop_app_appW4_wci_illegalEdge = 1'h0;
    ctop_app_appW4_wci_nState = 3'h2;
    ctop_app_appW4_wci_reqF_countReg = 2'h2;
    ctop_app_appW4_wci_respF_c_r = 2'h2;
    ctop_app_appW4_wci_respF_q_0 = 34'h2AAAAAAAA;
    ctop_app_appW4_wci_respF_q_1 = 34'h2AAAAAAAA;
    ctop_app_appW4_wci_sFlagReg = 1'h0;
    ctop_app_appW4_wci_sThreadBusy_d = 1'h0;
    ctop_app_appW4_wmi_busyWithMessage = 1'h0;
    ctop_app_appW4_wmi_dhF_c_r = 2'h2;
    ctop_app_appW4_wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    ctop_app_appW4_wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    ctop_app_appW4_wmi_errorSticky = 1'h0;
    ctop_app_appW4_wmi_mFlagF_c_r = 2'h2;
    ctop_app_appW4_wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    ctop_app_appW4_wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    ctop_app_appW4_wmi_operateD = 1'h0;
    ctop_app_appW4_wmi_peerIsReady = 1'h0;
    ctop_app_appW4_wmi_reqF_c_r = 2'h2;
    ctop_app_appW4_wmi_reqF_q_0 = 32'hAAAAAAAA;
    ctop_app_appW4_wmi_reqF_q_1 = 32'hAAAAAAAA;
    ctop_app_appW4_wmi_sDataThreadBusy_d = 1'h0;
    ctop_app_appW4_wmi_sFlagReg = 32'hAAAAAAAA;
    ctop_app_appW4_wmi_sThreadBusy_d = 1'h0;
    ctop_app_appW4_wmi_statusR = 8'hAA;
    ctop_app_appW4_wmi_trafficSticky = 1'h0;
    ctop_app_appW4_wsiM_burstKind = 2'h2;
    ctop_app_appW4_wsiM_errorSticky = 1'h0;
    ctop_app_appW4_wsiM_iMesgCount = 32'hAAAAAAAA;
    ctop_app_appW4_wsiM_operateD = 1'h0;
    ctop_app_appW4_wsiM_pMesgCount = 32'hAAAAAAAA;
    ctop_app_appW4_wsiM_peerIsReady = 1'h0;
    ctop_app_appW4_wsiM_reqFifo_c_r = 2'h2;
    ctop_app_appW4_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    ctop_app_appW4_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    ctop_app_appW4_wsiM_sThreadBusy_d = 1'h0;
    ctop_app_appW4_wsiM_statusR = 8'hAA;
    ctop_app_appW4_wsiM_tBusyCount = 32'hAAAAAAAA;
    ctop_app_appW4_wsiM_trafficSticky = 1'h0;
    ctop_app_appW4_wsiS_burstKind = 2'h2;
    ctop_app_appW4_wsiS_errorSticky = 1'h0;
    ctop_app_appW4_wsiS_iMesgCount = 32'hAAAAAAAA;
    ctop_app_appW4_wsiS_mesgWordLength = 12'hAAA;
    ctop_app_appW4_wsiS_operateD = 1'h0;
    ctop_app_appW4_wsiS_pMesgCount = 32'hAAAAAAAA;
    ctop_app_appW4_wsiS_peerIsReady = 1'h0;
    ctop_app_appW4_wsiS_reqFifo_countReg = 2'h2;
    ctop_app_appW4_wsiS_reqFifo_levelsValid = 1'h0;
    ctop_app_appW4_wsiS_statusR = 8'hAA;
    ctop_app_appW4_wsiS_tBusyCount = 32'hAAAAAAAA;
    ctop_app_appW4_wsiS_trafficSticky = 1'h0;
    ctop_app_appW4_wsiS_wordCount = 12'hAAA;
    ctop_app_appW4_wsiWordsRemain = 12'hAAA;
    ctop_app_appW4_zeroLengthMesg = 1'h0;
    ctop_inf_chompCnt = 8'hAA;
    ctop_inf_dp0_bml_crdBuf_modulus = 16'hAAAA;
    ctop_inf_dp0_bml_crdBuf_value = 16'hAAAA;
    ctop_inf_dp0_bml_fabAvail = 1'h0;
    ctop_inf_dp0_bml_fabBuf_modulus = 16'hAAAA;
    ctop_inf_dp0_bml_fabBuf_value = 16'hAAAA;
    ctop_inf_dp0_bml_fabBufsAvail = 16'hAAAA;
    ctop_inf_dp0_bml_fabDone = 1'h0;
    ctop_inf_dp0_bml_fabFlowAddr = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabFlowBase = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabFlowSize = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabMesgAddr = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabMesgBase = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabMesgSize = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabMetaAddr = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabMetaBase = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabMetaSize = 32'hAAAAAAAA;
    ctop_inf_dp0_bml_fabNumBufs = 16'hAAAA;
    ctop_inf_dp0_bml_lclBufDone = 1'h0;
    ctop_inf_dp0_bml_lclBufStart = 1'h0;
    ctop_inf_dp0_bml_lclBuf_modulus = 16'hAAAA;
    ctop_inf_dp0_bml_lclBuf_value = 16'hAAAA;
    ctop_inf_dp0_bml_lclBufsAR = 16'hAAAA;
    ctop_inf_dp0_bml_lclBufsCF = 16'hAAAA;
    ctop_inf_dp0_bml_lclCredit = 16'hAAAA;
    ctop_inf_dp0_bml_lclDones = 16'hAAAA;
    ctop_inf_dp0_bml_lclMesgAddr = 16'hAAAA;
    ctop_inf_dp0_bml_lclMetaAddr = 16'hAAAA;
    ctop_inf_dp0_bml_lclNumBufs = 16'hAAAA;
    ctop_inf_dp0_bml_lclStarts = 16'hAAAA;
    ctop_inf_dp0_bml_mesgBase = 16'hAAAA;
    ctop_inf_dp0_bml_mesgSize = 16'hAAAA;
    ctop_inf_dp0_bml_metaBase = 16'hAAAA;
    ctop_inf_dp0_bml_metaSize = 16'hAAAA;
    ctop_inf_dp0_bml_remBuf_modulus = 16'hAAAA;
    ctop_inf_dp0_bml_remBuf_value = 16'hAAAA;
    ctop_inf_dp0_bml_remDone = 1'h0;
    ctop_inf_dp0_bml_remDones = 16'hAAAA;
    ctop_inf_dp0_bml_remMesgAddr = 16'hAAAA;
    ctop_inf_dp0_bml_remMetaAddr = 16'hAAAA;
    ctop_inf_dp0_bml_remStart = 1'h0;
    ctop_inf_dp0_bml_remStarts = 16'hAAAA;
    ctop_inf_dp0_bram_serverAdapterA_1_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterA_1_s1 = 2'h2;
    ctop_inf_dp0_bram_serverAdapterA_2_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterA_2_s1 = 2'h2;
    ctop_inf_dp0_bram_serverAdapterA_3_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterA_3_s1 = 2'h2;
    ctop_inf_dp0_bram_serverAdapterA_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterA_s1 = 2'h2;
    ctop_inf_dp0_bram_serverAdapterB_1_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterB_1_s1 = 2'h2;
    ctop_inf_dp0_bram_serverAdapterB_2_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterB_2_s1 = 2'h2;
    ctop_inf_dp0_bram_serverAdapterB_3_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterB_3_s1 = 2'h2;
    ctop_inf_dp0_bram_serverAdapterB_cnt = 3'h2;
    ctop_inf_dp0_bram_serverAdapterB_s1 = 2'h2;
    ctop_inf_dp0_dpControl = 4'hA;
    ctop_inf_dp0_tlp_creditReady = 1'h0;
    ctop_inf_dp0_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_inf_dp0_tlp_dmaDoTailEvent = 1'h0;
    ctop_inf_dp0_tlp_dmaPullRemainDWLen = 10'h2AA;
    ctop_inf_dp0_tlp_dmaPullRemainDWSub = 10'h2AA;
    ctop_inf_dp0_tlp_dmaReqTag = 5'h0A;
    ctop_inf_dp0_tlp_dmaTag = 5'h0A;
    ctop_inf_dp0_tlp_doXmtMetaBody = 1'h0;
    ctop_inf_dp0_tlp_fabFlowAddr = 32'hAAAAAAAA;
    ctop_inf_dp0_tlp_fabMesgAccu = 32'hAAAAAAAA;
    ctop_inf_dp0_tlp_fabMesgAddr = 32'hAAAAAAAA;
    ctop_inf_dp0_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_inf_dp0_tlp_fabMetaAddr = 32'hAAAAAAAA;
    ctop_inf_dp0_tlp_farBufReady = 1'h0;
    ctop_inf_dp0_tlp_flowDiagCount = 32'hAAAAAAAA;
    ctop_inf_dp0_tlp_gotResponseHeader = 1'h0;
    ctop_inf_dp0_tlp_inIgnorePkt = 1'h0;
    ctop_inf_dp0_tlp_maxPayloadSize = 13'h0AAA;
    ctop_inf_dp0_tlp_maxReadReqSize = 13'h0AAA;
    ctop_inf_dp0_tlp_mesgComplReceived = 17'h0AAAA;
    ctop_inf_dp0_tlp_mesgLengthRemainPull = 17'h0AAAA;
    ctop_inf_dp0_tlp_mesgLengthRemainPush = 17'h0AAAA;
    ctop_inf_dp0_tlp_nearBufReady = 1'h0;
    ctop_inf_dp0_tlp_outDwRemain = 10'h2AA;
    ctop_inf_dp0_tlp_postSeqDwell = 4'hA;
    ctop_inf_dp0_tlp_pullTagMatch = 1'h0;
    ctop_inf_dp0_tlp_rdRespDwRemain = 10'h2AA;
    ctop_inf_dp0_tlp_readHeaderSent = 1'h0;
    ctop_inf_dp0_tlp_readNxtDWAddr = 13'h0AAA;
    ctop_inf_dp0_tlp_readRemainDWLen = 10'h2AA;
    ctop_inf_dp0_tlp_readStarted = 1'h0;
    ctop_inf_dp0_tlp_remDone = 1'h0;
    ctop_inf_dp0_tlp_remMesgAccu = 16'hAAAA;
    ctop_inf_dp0_tlp_remMesgAddr = 16'hAAAA;
    ctop_inf_dp0_tlp_remMetaAddr = 16'hAAAA;
    ctop_inf_dp0_tlp_remStart = 1'h0;
    ctop_inf_dp0_tlp_reqMesgInFlight = 1'h0;
    ctop_inf_dp0_tlp_reqMetaBodyInFlight = 1'h0;
    ctop_inf_dp0_tlp_reqMetaInFlight = 1'h0;
    ctop_inf_dp0_tlp_srcMesgAccu = 32'hAAAAAAAA;
    ctop_inf_dp0_tlp_tlpMetaSent = 1'h0;
    ctop_inf_dp0_tlp_tlpRcvBusy = 1'h0;
    ctop_inf_dp0_tlp_tlpXmtBusy = 1'h0;
    ctop_inf_dp0_tlp_writeDWAddr = 13'h0AAA;
    ctop_inf_dp0_tlp_writeLastBE = 4'hA;
    ctop_inf_dp0_tlp_writeRemainDWLen = 10'h2AA;
    ctop_inf_dp0_tlp_xmtMetaInFlight = 1'h0;
    ctop_inf_dp0_tlp_xmtMetaOK = 1'h0;
    ctop_inf_dp0_wci_cEdge = 3'h2;
    ctop_inf_dp0_wci_cState = 3'h2;
    ctop_inf_dp0_wci_ctlAckReg = 1'h0;
    ctop_inf_dp0_wci_ctlOpActive = 1'h0;
    ctop_inf_dp0_wci_illegalEdge = 1'h0;
    ctop_inf_dp0_wci_nState = 3'h2;
    ctop_inf_dp0_wci_reqF_countReg = 2'h2;
    ctop_inf_dp0_wci_respF_c_r = 2'h2;
    ctop_inf_dp0_wci_respF_q_0 = 34'h2AAAAAAAA;
    ctop_inf_dp0_wci_respF_q_1 = 34'h2AAAAAAAA;
    ctop_inf_dp0_wci_sFlagReg = 1'h0;
    ctop_inf_dp0_wci_sThreadBusy_d = 1'h0;
    ctop_inf_dp0_wmi_addr = 14'h2AAA;
    ctop_inf_dp0_wmi_bufDwell = 2'h2;
    ctop_inf_dp0_wmi_bytesRemainReq = 14'h2AAA;
    ctop_inf_dp0_wmi_bytesRemainResp = 14'h2AAA;
    ctop_inf_dp0_wmi_doneWithMesg = 1'h0;
    ctop_inf_dp0_wmi_lastMesg = 32'hAAAAAAAA;
    ctop_inf_dp0_wmi_lclMesgAddr = 15'h2AAA;
    ctop_inf_dp0_wmi_lclMetaAddr = 15'h2AAA;
    ctop_inf_dp0_wmi_mesgBufReady = 1'h0;
    ctop_inf_dp0_wmi_mesgBusy = 1'h0;
    ctop_inf_dp0_wmi_mesgCount = 32'hAAAAAAAA;
    ctop_inf_dp0_wmi_mesgDone = 1'h0;
    ctop_inf_dp0_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_inf_dp0_wmi_mesgStart = 1'h0;
    ctop_inf_dp0_wmi_metaBusy = 1'h0;
    ctop_inf_dp0_wmi_p4B = 2'h2;
    ctop_inf_dp0_wmi_rdActive = 1'h0;
    ctop_inf_dp0_wmi_reqCount = 16'hAAAA;
    ctop_inf_dp0_wmi_thisMesg = 32'hAAAAAAAA;
    ctop_inf_dp0_wmi_wmi_blockReq = 1'h0;
    ctop_inf_dp0_wmi_wmi_dhF_countReg = 2'h2;
    ctop_inf_dp0_wmi_wmi_dhF_levelsValid = 1'h0;
    ctop_inf_dp0_wmi_wmi_errorSticky = 1'h0;
    ctop_inf_dp0_wmi_wmi_mFlagF_countReg = 2'h2;
    ctop_inf_dp0_wmi_wmi_mFlagF_levelsValid = 1'h0;
    ctop_inf_dp0_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    ctop_inf_dp0_wmi_wmi_operateD = 1'h0;
    ctop_inf_dp0_wmi_wmi_peerIsReady = 1'h0;
    ctop_inf_dp0_wmi_wmi_reqF_countReg = 2'h2;
    ctop_inf_dp0_wmi_wmi_reqF_levelsValid = 1'h0;
    ctop_inf_dp0_wmi_wmi_respF_c_r = 2'h2;
    ctop_inf_dp0_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    ctop_inf_dp0_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    ctop_inf_dp0_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    ctop_inf_dp0_wmi_wmi_statusR = 8'hAA;
    ctop_inf_dp0_wmi_wmi_trafficSticky = 1'h0;
    ctop_inf_dp0_wmi_wrActive = 1'h0;
    ctop_inf_dp0_wmi_wrFinalize = 1'h0;
    ctop_inf_dp0_wmi_wrtCount = 16'hAAAA;
    ctop_inf_dp0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    ctop_inf_dp1_bml_crdBuf_modulus = 16'hAAAA;
    ctop_inf_dp1_bml_crdBuf_value = 16'hAAAA;
    ctop_inf_dp1_bml_fabAvail = 1'h0;
    ctop_inf_dp1_bml_fabBuf_modulus = 16'hAAAA;
    ctop_inf_dp1_bml_fabBuf_value = 16'hAAAA;
    ctop_inf_dp1_bml_fabBufsAvail = 16'hAAAA;
    ctop_inf_dp1_bml_fabDone = 1'h0;
    ctop_inf_dp1_bml_fabFlowAddr = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabFlowBase = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabFlowSize = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabMesgAddr = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabMesgBase = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabMesgSize = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabMetaAddr = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabMetaBase = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabMetaSize = 32'hAAAAAAAA;
    ctop_inf_dp1_bml_fabNumBufs = 16'hAAAA;
    ctop_inf_dp1_bml_lclBufDone = 1'h0;
    ctop_inf_dp1_bml_lclBufStart = 1'h0;
    ctop_inf_dp1_bml_lclBuf_modulus = 16'hAAAA;
    ctop_inf_dp1_bml_lclBuf_value = 16'hAAAA;
    ctop_inf_dp1_bml_lclBufsAR = 16'hAAAA;
    ctop_inf_dp1_bml_lclBufsCF = 16'hAAAA;
    ctop_inf_dp1_bml_lclCredit = 16'hAAAA;
    ctop_inf_dp1_bml_lclDones = 16'hAAAA;
    ctop_inf_dp1_bml_lclMesgAddr = 16'hAAAA;
    ctop_inf_dp1_bml_lclMetaAddr = 16'hAAAA;
    ctop_inf_dp1_bml_lclNumBufs = 16'hAAAA;
    ctop_inf_dp1_bml_lclStarts = 16'hAAAA;
    ctop_inf_dp1_bml_mesgBase = 16'hAAAA;
    ctop_inf_dp1_bml_mesgSize = 16'hAAAA;
    ctop_inf_dp1_bml_metaBase = 16'hAAAA;
    ctop_inf_dp1_bml_metaSize = 16'hAAAA;
    ctop_inf_dp1_bml_remBuf_modulus = 16'hAAAA;
    ctop_inf_dp1_bml_remBuf_value = 16'hAAAA;
    ctop_inf_dp1_bml_remDone = 1'h0;
    ctop_inf_dp1_bml_remDones = 16'hAAAA;
    ctop_inf_dp1_bml_remMesgAddr = 16'hAAAA;
    ctop_inf_dp1_bml_remMetaAddr = 16'hAAAA;
    ctop_inf_dp1_bml_remStart = 1'h0;
    ctop_inf_dp1_bml_remStarts = 16'hAAAA;
    ctop_inf_dp1_bram_serverAdapterA_1_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterA_1_s1 = 2'h2;
    ctop_inf_dp1_bram_serverAdapterA_2_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterA_2_s1 = 2'h2;
    ctop_inf_dp1_bram_serverAdapterA_3_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterA_3_s1 = 2'h2;
    ctop_inf_dp1_bram_serverAdapterA_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterA_s1 = 2'h2;
    ctop_inf_dp1_bram_serverAdapterB_1_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterB_1_s1 = 2'h2;
    ctop_inf_dp1_bram_serverAdapterB_2_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterB_2_s1 = 2'h2;
    ctop_inf_dp1_bram_serverAdapterB_3_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterB_3_s1 = 2'h2;
    ctop_inf_dp1_bram_serverAdapterB_cnt = 3'h2;
    ctop_inf_dp1_bram_serverAdapterB_s1 = 2'h2;
    ctop_inf_dp1_dpControl = 4'hA;
    ctop_inf_dp1_tlp_creditReady = 1'h0;
    ctop_inf_dp1_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_inf_dp1_tlp_dmaDoTailEvent = 1'h0;
    ctop_inf_dp1_tlp_dmaPullRemainDWLen = 10'h2AA;
    ctop_inf_dp1_tlp_dmaPullRemainDWSub = 10'h2AA;
    ctop_inf_dp1_tlp_dmaReqTag = 5'h0A;
    ctop_inf_dp1_tlp_dmaTag = 5'h0A;
    ctop_inf_dp1_tlp_doXmtMetaBody = 1'h0;
    ctop_inf_dp1_tlp_fabFlowAddr = 32'hAAAAAAAA;
    ctop_inf_dp1_tlp_fabMesgAccu = 32'hAAAAAAAA;
    ctop_inf_dp1_tlp_fabMesgAddr = 32'hAAAAAAAA;
    ctop_inf_dp1_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_inf_dp1_tlp_fabMetaAddr = 32'hAAAAAAAA;
    ctop_inf_dp1_tlp_farBufReady = 1'h0;
    ctop_inf_dp1_tlp_flowDiagCount = 32'hAAAAAAAA;
    ctop_inf_dp1_tlp_gotResponseHeader = 1'h0;
    ctop_inf_dp1_tlp_inIgnorePkt = 1'h0;
    ctop_inf_dp1_tlp_maxPayloadSize = 13'h0AAA;
    ctop_inf_dp1_tlp_maxReadReqSize = 13'h0AAA;
    ctop_inf_dp1_tlp_mesgComplReceived = 17'h0AAAA;
    ctop_inf_dp1_tlp_mesgLengthRemainPull = 17'h0AAAA;
    ctop_inf_dp1_tlp_mesgLengthRemainPush = 17'h0AAAA;
    ctop_inf_dp1_tlp_nearBufReady = 1'h0;
    ctop_inf_dp1_tlp_outDwRemain = 10'h2AA;
    ctop_inf_dp1_tlp_postSeqDwell = 4'hA;
    ctop_inf_dp1_tlp_pullTagMatch = 1'h0;
    ctop_inf_dp1_tlp_rdRespDwRemain = 10'h2AA;
    ctop_inf_dp1_tlp_readHeaderSent = 1'h0;
    ctop_inf_dp1_tlp_readNxtDWAddr = 13'h0AAA;
    ctop_inf_dp1_tlp_readRemainDWLen = 10'h2AA;
    ctop_inf_dp1_tlp_readStarted = 1'h0;
    ctop_inf_dp1_tlp_remDone = 1'h0;
    ctop_inf_dp1_tlp_remMesgAccu = 16'hAAAA;
    ctop_inf_dp1_tlp_remMesgAddr = 16'hAAAA;
    ctop_inf_dp1_tlp_remMetaAddr = 16'hAAAA;
    ctop_inf_dp1_tlp_remStart = 1'h0;
    ctop_inf_dp1_tlp_reqMesgInFlight = 1'h0;
    ctop_inf_dp1_tlp_reqMetaBodyInFlight = 1'h0;
    ctop_inf_dp1_tlp_reqMetaInFlight = 1'h0;
    ctop_inf_dp1_tlp_srcMesgAccu = 32'hAAAAAAAA;
    ctop_inf_dp1_tlp_tlpMetaSent = 1'h0;
    ctop_inf_dp1_tlp_tlpRcvBusy = 1'h0;
    ctop_inf_dp1_tlp_tlpXmtBusy = 1'h0;
    ctop_inf_dp1_tlp_writeDWAddr = 13'h0AAA;
    ctop_inf_dp1_tlp_writeLastBE = 4'hA;
    ctop_inf_dp1_tlp_writeRemainDWLen = 10'h2AA;
    ctop_inf_dp1_tlp_xmtMetaInFlight = 1'h0;
    ctop_inf_dp1_tlp_xmtMetaOK = 1'h0;
    ctop_inf_dp1_wci_cEdge = 3'h2;
    ctop_inf_dp1_wci_cState = 3'h2;
    ctop_inf_dp1_wci_ctlAckReg = 1'h0;
    ctop_inf_dp1_wci_ctlOpActive = 1'h0;
    ctop_inf_dp1_wci_illegalEdge = 1'h0;
    ctop_inf_dp1_wci_nState = 3'h2;
    ctop_inf_dp1_wci_reqF_countReg = 2'h2;
    ctop_inf_dp1_wci_respF_c_r = 2'h2;
    ctop_inf_dp1_wci_respF_q_0 = 34'h2AAAAAAAA;
    ctop_inf_dp1_wci_respF_q_1 = 34'h2AAAAAAAA;
    ctop_inf_dp1_wci_sFlagReg = 1'h0;
    ctop_inf_dp1_wci_sThreadBusy_d = 1'h0;
    ctop_inf_dp1_wmi_addr = 14'h2AAA;
    ctop_inf_dp1_wmi_bufDwell = 2'h2;
    ctop_inf_dp1_wmi_bytesRemainReq = 14'h2AAA;
    ctop_inf_dp1_wmi_bytesRemainResp = 14'h2AAA;
    ctop_inf_dp1_wmi_doneWithMesg = 1'h0;
    ctop_inf_dp1_wmi_lastMesg = 32'hAAAAAAAA;
    ctop_inf_dp1_wmi_lclMesgAddr = 15'h2AAA;
    ctop_inf_dp1_wmi_lclMetaAddr = 15'h2AAA;
    ctop_inf_dp1_wmi_mesgBufReady = 1'h0;
    ctop_inf_dp1_wmi_mesgBusy = 1'h0;
    ctop_inf_dp1_wmi_mesgCount = 32'hAAAAAAAA;
    ctop_inf_dp1_wmi_mesgDone = 1'h0;
    ctop_inf_dp1_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ctop_inf_dp1_wmi_mesgStart = 1'h0;
    ctop_inf_dp1_wmi_metaBusy = 1'h0;
    ctop_inf_dp1_wmi_p4B = 2'h2;
    ctop_inf_dp1_wmi_rdActive = 1'h0;
    ctop_inf_dp1_wmi_reqCount = 16'hAAAA;
    ctop_inf_dp1_wmi_thisMesg = 32'hAAAAAAAA;
    ctop_inf_dp1_wmi_wmi_blockReq = 1'h0;
    ctop_inf_dp1_wmi_wmi_dhF_countReg = 2'h2;
    ctop_inf_dp1_wmi_wmi_dhF_levelsValid = 1'h0;
    ctop_inf_dp1_wmi_wmi_errorSticky = 1'h0;
    ctop_inf_dp1_wmi_wmi_mFlagF_countReg = 2'h2;
    ctop_inf_dp1_wmi_wmi_mFlagF_levelsValid = 1'h0;
    ctop_inf_dp1_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    ctop_inf_dp1_wmi_wmi_operateD = 1'h0;
    ctop_inf_dp1_wmi_wmi_peerIsReady = 1'h0;
    ctop_inf_dp1_wmi_wmi_reqF_countReg = 2'h2;
    ctop_inf_dp1_wmi_wmi_reqF_levelsValid = 1'h0;
    ctop_inf_dp1_wmi_wmi_respF_c_r = 2'h2;
    ctop_inf_dp1_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    ctop_inf_dp1_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    ctop_inf_dp1_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    ctop_inf_dp1_wmi_wmi_statusR = 8'hAA;
    ctop_inf_dp1_wmi_wmi_trafficSticky = 1'h0;
    ctop_inf_dp1_wmi_wrActive = 1'h0;
    ctop_inf_dp1_wmi_wrFinalize = 1'h0;
    ctop_inf_dp1_wmi_wrtCount = 16'hAAAA;
    ctop_inf_dp1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    ctop_inf_itc0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    ctop_inf_itc0_wti_sThreadBusy_d = 1'h0;
    ctop_inf_itc1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    ctop_inf_itc1_wti_sThreadBusy_d = 1'h0;
    i2pAF_head_wrapped = 1'h0;
    i2pAF_tail_wrapped = 1'h0;
    i2pS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p2iAF_head_wrapped = 1'h0;
    p2iAF_tail_wrapped = 1'h0;
    p2iS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcie_irq_rInterruptDi = 8'hAA;
    pcie_irq_rInterruptN = 1'h0;
    pcie_irq_rInterrupting = 1'h0;
    pcie_irq_rMMEnabled = 3'h2;
    pcie_irq_rMSIEnabled = 1'h0;
    tcGbe0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    tcGbe0_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pci0_pcie_ep$trn2_clk)
  begin
    #0;
    if (trn2_rst$OUT_RST_N)
      if (ctop_inf_sm2$RDY_c1_request_get)
	begin
	  v__h166975 = $time;
	  #0;
	end
    if (trn2_rst$OUT_RST_N)
      if (ctop_inf_sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h166975,
		 $unsigned(ctop_inf_chompCnt));
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd)
	begin
	  v__h83723 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h83723,
		 ctop_inf_dp0_wci_reqF$D_OUT[51:32],
		 ctop_inf_dp0_wci_reqF$D_OUT[55:52],
		 _theResult____h83707);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start)
	begin
	  v__h21827 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h21827,
		 ctop_inf_dp0_wci_reqF$D_OUT[36:34],
		 ctop_inf_dp0_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta)
	begin
	  v__h26112 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h26112);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg)
	begin
	  v__h31564 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h31564);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead)
	begin
	  v__h27124 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h27124,
		 { ctop_inf_dp0_tlp_mRespF$D_OUT[7:0],
		   ctop_inf_dp0_tlp_mRespF$D_OUT[15:8],
		   ctop_inf_dp0_tlp_mRespF$D_OUT[23:16],
		   ctop_inf_dp0_tlp_mRespF$D_OUT[31:24] });
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader)
	begin
	  v__h32131 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseHeader)
	$display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		 v__h32131);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody)
	begin
	  v__h32482 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h32482);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead)
	begin
	  v__h33545 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaHead)
	$display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h33545);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody)
	begin
	  v__h36279 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h36279);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent)
	begin
	  v__h37313 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtTailEvent)
	$display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h37313);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell)
	begin
	  v__h38360 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaXmtDoorbell)
	$display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1", v__h38360);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta)
	begin
	  v__h39950 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespHeadFarMeta)
	$display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		 v__h39950,
		 { ctop_inf_dp0_tlp_inF$D_OUT[7:0],
		   ctop_inf_dp0_tlp_inF$D_OUT[15:8],
		   ctop_inf_dp0_tlp_inF$D_OUT[23:16],
		   ctop_inf_dp0_tlp_inF$D_OUT[31:24] });
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader)
	begin
	  v__h45099 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h45099);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody)
	begin
	  v__h45416 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h45416);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent)
	begin
	  v__h46470 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullTailEvent)
	$display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5", v__h46470);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta)
	begin
	  v__h44054 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h44054,
		 opcode__h40895,
		 nowMS__h40896,
		 nowLS__h40897);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody)
	begin
	  v__h31218 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h31218,
		 opcode__h28053,
		 nowMS__h28054,
		 nowLS__h28055);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta)
	begin
	  v__h38699 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaRequestFarMeta)
	$display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5", v__h38699);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg)
	begin
	  v__h44481 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_tlp_dmaPullRequestFarMesg)
	$display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		 v__h44481);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize)
	begin
	  v__h75789 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h75789,
		 ctop_inf_dp0_wmi_lclMetaAddr,
		 x3__h75146,
		 mesgMeta_opcode__h75186,
		 ctop_inf_dp0_wmi_nowW$wget[63:32],
		 ctop_inf_dp0_wmi_nowW$wget[31:0]);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd)
	begin
	  v__h162781 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h162781,
		 ctop_inf_dp1_wci_reqF$D_OUT[51:32],
		 ctop_inf_dp1_wci_reqF$D_OUT[55:52],
		 _theResult____h162765);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start)
	begin
	  v__h100914 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h100914,
		 ctop_inf_dp1_wci_reqF$D_OUT[36:34],
		 ctop_inf_dp1_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta)
	begin
	  v__h105184 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h105184);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg)
	begin
	  v__h110633 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h110633);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead)
	begin
	  v__h106193 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h106193,
		 { ctop_inf_dp1_tlp_mRespF$D_OUT[7:0],
		   ctop_inf_dp1_tlp_mRespF$D_OUT[15:8],
		   ctop_inf_dp1_tlp_mRespF$D_OUT[23:16],
		   ctop_inf_dp1_tlp_mRespF$D_OUT[31:24] });
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader)
	begin
	  v__h111200 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseHeader)
	$display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		 v__h111200);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody)
	begin
	  v__h111551 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h111551);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead)
	begin
	  v__h112614 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaHead)
	$display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h112614);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody)
	begin
	  v__h115348 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h115348);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent)
	begin
	  v__h116382 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtTailEvent)
	$display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h116382);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell)
	begin
	  v__h117429 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaXmtDoorbell)
	$display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		 v__h117429);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta)
	begin
	  v__h119011 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespHeadFarMeta)
	$display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		 v__h119011,
		 { ctop_inf_dp1_tlp_inF$D_OUT[7:0],
		   ctop_inf_dp1_tlp_inF$D_OUT[15:8],
		   ctop_inf_dp1_tlp_inF$D_OUT[23:16],
		   ctop_inf_dp1_tlp_inF$D_OUT[31:24] });
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader)
	begin
	  v__h124160 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h124160);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody)
	begin
	  v__h124477 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h124477);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent)
	begin
	  v__h125531 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullTailEvent)
	$display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5", v__h125531);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta)
	begin
	  v__h123115 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h123115,
		 opcode__h119956,
		 nowMS__h119957,
		 nowLS__h119958);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody)
	begin
	  v__h110287 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h110287,
		 opcode__h107122,
		 nowMS__h107123,
		 nowLS__h107124);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta)
	begin
	  v__h117763 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaRequestFarMeta)
	$display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		 v__h117763);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg)
	begin
	  v__h123542 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_tlp_dmaPullRequestFarMesg)
	$display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		 v__h123542);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize)
	begin
	  v__h154850 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h154850,
		 ctop_inf_dp1_wmi_lclMetaAddr,
		 x3__h154207,
		 mesgMeta_opcode__h154247,
		 ctop_inf_dp1_wmi_nowW$wget[63:32],
		 ctop_inf_dp1_wmi_nowW$wget[31:0]);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start)
	begin
	  v__h171065 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h171065,
		 ctop_app_appW2_wci_reqF$D_OUT[36:34],
		 ctop_app_appW2_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_ctrl_OrE and\n  RL_ctop_app_appW2_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_cfrd &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_cfrd and\n  RL_ctop_app_appW2_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_cfrd &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_cfrd and\n  RL_ctop_app_appW2_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin)
	begin
	  v__h185087 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h185087,
		 ctop_app_appW2_mesgCount,
		 ctop_app_appW2_wmi_sFlagReg[23:0],
		 ctop_app_appW2_wmi_sFlagReg[31:24]);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	  ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h83187 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	  ctop_inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h83187);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr)
	begin
	  v__h83561 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h83561,
		 ctop_inf_dp0_wci_reqF$D_OUT[51:32],
		 ctop_inf_dp0_wci_reqF$D_OUT[55:52],
		 ctop_inf_dp0_wci_reqF$D_OUT[31:0]);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_cfwr &&
	  WILL_FIRE_RL_ctop_inf_dp0_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_ctop_inf_dp0_wci_cfwr and\n  RL_ctop_inf_dp0_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete &&
	  ctop_inf_dp0_wci_illegalEdge)
	begin
	  v__h22167 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete &&
	  ctop_inf_dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h22167,
		 ctop_inf_dp0_wci_cEdge,
		 ctop_inf_dp0_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete &&
	  !ctop_inf_dp0_wci_illegalEdge)
	begin
	  v__h22012 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_ctop_inf_dp0_wci_ctl_op_complete &&
	  !ctop_inf_dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h22012,
		 ctop_inf_dp0_wci_cEdge,
		 ctop_inf_dp0_wci_cState,
		 ctop_inf_dp0_wci_nState);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO)
	begin
	  v__h189344 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h189344,
		 ctop_app_appW2_smaCtrl);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_ctrl_IsO and\n  RL_ctop_app_appW2_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_ctrl_IsO and\n  RL_ctop_app_appW2_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_ctrl_IsO and\n  RL_ctop_app_appW2_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	  ctop_app_appW2_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h186504 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	  ctop_app_appW2_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h186504,
		 ctop_app_appW2_mesgCount,
		 ctop_app_appW2_wsiS_reqFifo$D_OUT[55:44],
		 ctop_app_appW2_wsiS_reqFifo$D_OUT[7:0]);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	  !ctop_app_appW2_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h186581 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_mesgBegin &&
	  !ctop_app_appW2_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h186581,
		 ctop_app_appW2_mesgCount);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort)
	begin
	  v__h188301 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h188301);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize)
	begin
	  v__h188562 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h188562,
		 ctop_app_appW2_mesgCount,
		 x__h186655);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_cfwr and\n  RL_ctop_app_appW2_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_IsO)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_cfwr and\n  RL_ctop_app_appW2_wci_ctrl_IsO fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_cfwr and\n  RL_ctop_app_appW2_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW2_wci_cfwr and\n  RL_ctop_app_appW2_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete &&
	  ctop_app_appW2_wci_illegalEdge)
	begin
	  v__h171402 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete &&
	  ctop_app_appW2_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h171402,
		 ctop_app_appW2_wci_cEdge,
		 ctop_app_appW2_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete &&
	  !ctop_app_appW2_wci_illegalEdge)
	begin
	  v__h171247 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_ctop_app_appW2_wci_ctl_op_complete &&
	  !ctop_app_appW2_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h171247,
		 ctop_app_appW2_wci_cEdge,
		 ctop_app_appW2_wci_cState,
		 ctop_app_appW2_wci_nState);
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start)
	begin
	  v__h194285 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h194285,
		 ctop_app_appW3_wci_reqF$D_OUT[36:34],
		 ctop_app_appW3_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 443, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_ctrl_OrE and\n  RL_ctop_app_appW3_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_cfrd &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 392, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_cfrd and\n  RL_ctop_app_appW3_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_cfrd &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 392, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_cfrd and\n  RL_ctop_app_appW3_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO)
	begin
	  v__h213523 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting DelayWorker dlyCtrl:%0x",
		 v__h213523,
		 ctop_app_appW3_dlyCtrl);
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_ctrl_IsO and\n  RL_ctop_app_appW3_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_ctrl_IsO and\n  RL_ctop_app_appW3_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_cfrd)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_ctrl_IsO and\n  RL_ctop_app_appW3_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_cfwr and\n  RL_ctop_app_appW3_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_IsO)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_cfwr and\n  RL_ctop_app_appW3_wci_ctrl_IsO fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_cfwr and\n  RL_ctop_app_appW3_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW3_wci_cfrd)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW3_wci_cfwr and\n  RL_ctop_app_appW3_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete &&
	  ctop_app_appW3_wci_illegalEdge)
	begin
	  v__h194622 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete &&
	  ctop_app_appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h194622,
		 ctop_app_appW3_wci_cEdge,
		 ctop_app_appW3_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete &&
	  !ctop_app_appW3_wci_illegalEdge)
	begin
	  v__h194467 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_ctop_app_appW3_wci_ctl_op_complete &&
	  !ctop_app_appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h194467,
		 ctop_app_appW3_wci_cEdge,
		 ctop_app_appW3_wci_cState,
		 ctop_app_appW3_wci_nState);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start)
	begin
	  v__h218484 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h218484,
		 ctop_app_appW4_wci_reqF$D_OUT[36:34],
		 ctop_app_appW4_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_ctrl_OrE and\n  RL_ctop_app_appW4_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_cfrd &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_cfrd and\n  RL_ctop_app_appW4_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_cfrd &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_cfrd and\n  RL_ctop_app_appW4_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin)
	begin
	  v__h232499 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h232499,
		 ctop_app_appW4_mesgCount,
		 ctop_app_appW4_wmi_sFlagReg[23:0],
		 ctop_app_appW4_wmi_sFlagReg[31:24]);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	  ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h162245 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	  ctop_inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h162245);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr)
	begin
	  v__h162619 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h162619,
		 ctop_inf_dp1_wci_reqF$D_OUT[51:32],
		 ctop_inf_dp1_wci_reqF$D_OUT[55:52],
		 ctop_inf_dp1_wci_reqF$D_OUT[31:0]);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_cfwr &&
	  WILL_FIRE_RL_ctop_inf_dp1_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_ctop_inf_dp1_wci_cfwr and\n  RL_ctop_inf_dp1_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete &&
	  ctop_inf_dp1_wci_illegalEdge)
	begin
	  v__h101251 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete &&
	  ctop_inf_dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h101251,
		 ctop_inf_dp1_wci_cEdge,
		 ctop_inf_dp1_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete &&
	  !ctop_inf_dp1_wci_illegalEdge)
	begin
	  v__h101096 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_ctop_inf_dp1_wci_ctl_op_complete &&
	  !ctop_inf_dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h101096,
		 ctop_inf_dp1_wci_cEdge,
		 ctop_inf_dp1_wci_cState,
		 ctop_inf_dp1_wci_nState);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO)
	begin
	  v__h236756 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h236756,
		 ctop_app_appW4_smaCtrl);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_ctrl_IsO and\n  RL_ctop_app_appW4_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_ctrl_IsO and\n  RL_ctop_app_appW4_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_ctrl_IsO and\n  RL_ctop_app_appW4_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	  ctop_app_appW4_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h233916 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	  ctop_app_appW4_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h233916,
		 ctop_app_appW4_mesgCount,
		 ctop_app_appW4_wsiS_reqFifo$D_OUT[55:44],
		 ctop_app_appW4_wsiS_reqFifo$D_OUT[7:0]);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	  !ctop_app_appW4_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h233993 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_mesgBegin &&
	  !ctop_app_appW4_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h233993,
		 ctop_app_appW4_mesgCount);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort)
	begin
	  v__h235713 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h235713);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize)
	begin
	  v__h235974 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h235974,
		 ctop_app_appW4_mesgCount,
		 x__h234067);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_cfwr and\n  RL_ctop_app_appW4_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_IsO)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_cfwr and\n  RL_ctop_app_appW4_wci_ctrl_IsO fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_cfwr and\n  RL_ctop_app_appW4_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_cfwr &&
	  WILL_FIRE_RL_ctop_app_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_ctop_app_appW4_wci_cfwr and\n  RL_ctop_app_appW4_wci_cfrd fired in the same clock cycle.\n");
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete &&
	  ctop_app_appW4_wci_illegalEdge)
	begin
	  v__h218821 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete &&
	  ctop_app_appW4_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h218821,
		 ctop_app_appW4_wci_cEdge,
		 ctop_app_appW4_wci_cState);
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete &&
	  !ctop_app_appW4_wci_illegalEdge)
	begin
	  v__h218666 = $time;
	  #0;
	end
    if (ctop_inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_ctop_app_appW4_wci_ctl_op_complete &&
	  !ctop_app_appW4_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h218666,
		 ctop_app_appW4_wci_cEdge,
		 ctop_app_appW4_wci_cState,
		 ctop_app_appW4_wci_nState);
  end
  // synopsys translate_on
endmodule  // mkFTop

