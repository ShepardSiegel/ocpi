//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Wed Aug 11 07:37:43 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     4
// pcie_txn                       O     4
// led                            O    13
// gps_ppsSyncOut                 O     1
// dram_addr                      O    13
// dram_ba                        O     3
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_reset_n                   O     1
// dram_cs_n                      O     1
// dram_odt                       O     1
// dram_cke                       O     1
// dram_dm                        O     8
// dram_ck_p                      O     1
// dram_ck_n                      O     1
// flash_addr                     O    24 reg
// flash_ce_n                     O     1
// flash_oe_n                     O     1
// flash_we_n                     O     1
// flash_wp_n                     O     1 const
// flash_rst_n                    O     1 const
// flash_adv_n                    O     1 const
// gmii_txd                       O     8
// gmii_tx_en                     O     1
// gmii_tx_er                     O     1
// trn2Clk                        O     1 clock
// CLK_GATE_trn2Clk               O     1 const
// gmii_tx_clk                    O     1 clock
// CLK_GATE_gmii_tx_clk           O     1 const
// rxclk                          O     1 clock
// CLK_GATE_rxclk                 O     1 const
// pci0_reset_n_mrst_n            O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// gmii_rx_clk                    I     1 clock
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// pci0_reset_n                   I     1 reset
// pcie_rxp_i                     I     4
// pcie_rxn_i                     I     4
// gps_ppsSyncIn_x                I     1 reg
// flash_fwait_i                  I     1 reg
// gmii_rxd_i                     I     8
// gmii_rx_dv_i                   I     1
// gmii_rx_er_i                   I     1
// dram_io_dq                    IO    64 unused
// dram_io_dqs_p                 IO     8 unused
// dram_io_dqs_n                 IO     8 unused
// flash_io_dq                   IO    16 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop(sys0_clkp,
	      sys0_clkn,
	      sys1_clkp,
	      sys1_clkn,
	      gmii_rx_clk,
	      pci0_clkp,
	      pci0_clkn,
	      pci0_reset_n,

	      .dram_io_dq(dram0$dram_io_dq),
	      .dram_io_dqs_p(dram0$dram_io_dqs_p),
	      .dram_io_dqs_n(dram0$dram_io_dqs_n),
	      .flash_io_dq(flash0$flash_io_dq),

	      pcie_rxp_i,

	      pcie_rxn_i,

	      pcie_txp,

	      pcie_txn,

	      led,

	      gps_ppsSyncIn_x,

	      gps_ppsSyncOut,

	      dram_addr,

	      dram_ba,

	      dram_ras_n,

	      dram_cas_n,

	      dram_we_n,

	      dram_reset_n,

	      dram_cs_n,

	      dram_odt,

	      dram_cke,

	      dram_dm,

	      dram_ck_p,

	      dram_ck_n,

	      flash_addr,

	      flash_ce_n,

	      flash_oe_n,

	      flash_we_n,

	      flash_wp_n,

	      flash_rst_n,

	      flash_adv_n,

	      flash_fwait_i,

	      gmii_txd,

	      gmii_tx_en,

	      gmii_tx_er,

	      gmii_rxd_i,

	      gmii_rx_dv_i,

	      gmii_rx_er_i,

	      trn2Clk,
	      CLK_GATE_trn2Clk,

	      gmii_tx_clk,
	      CLK_GATE_gmii_tx_clk,

	      rxclk,
	      CLK_GATE_rxclk,

	      pci0_reset_n_mrst_n);
  input  sys0_clkp;
  input  sys0_clkn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  gmii_rx_clk;
  input  pci0_clkp;
  input  pci0_clkn;
  input  pci0_reset_n;

  inout  [63 : 0] dram0$dram_io_dq;
  inout  [7 : 0] dram0$dram_io_dqs_p;
  inout  [7 : 0] dram0$dram_io_dqs_n;
  inout  [15 : 0] flash0$flash_io_dq;

  // action method pcie_rxp
  input  [3 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [3 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [3 : 0] pcie_txp;

  // value method pcie_txn
  output [3 : 0] pcie_txn;

  // value method led
  output [12 : 0] led;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [2 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_reset_n
  output dram_reset_n;

  // value method dram_cs_n
  output dram_cs_n;

  // value method dram_odt
  output dram_odt;

  // value method dram_cke
  output dram_cke;

  // value method dram_dm
  output [7 : 0] dram_dm;

  // value method dram_ck_p
  output dram_ck_p;

  // value method dram_ck_n
  output dram_ck_n;

  // value method flash_addr
  output [23 : 0] flash_addr;

  // value method flash_ce_n
  output flash_ce_n;

  // value method flash_oe_n
  output flash_oe_n;

  // value method flash_we_n
  output flash_we_n;

  // value method flash_wp_n
  output flash_wp_n;

  // value method flash_rst_n
  output flash_rst_n;

  // value method flash_adv_n
  output flash_adv_n;

  // action method flash_fwait
  input  flash_fwait_i;

  // value method gmii_txd
  output [7 : 0] gmii_txd;

  // value method gmii_tx_en
  output gmii_tx_en;

  // value method gmii_tx_er
  output gmii_tx_er;

  // action method gmii_rxd
  input  [7 : 0] gmii_rxd_i;

  // action method gmii_rx_dv
  input  gmii_rx_dv_i;

  // action method gmii_rx_er
  input  gmii_rx_er_i;

  // oscillator and gates for output clock trn2Clk
  output trn2Clk;
  output CLK_GATE_trn2Clk;

  // oscillator and gates for output clock gmii_tx_clk
  output gmii_tx_clk;
  output CLK_GATE_gmii_tx_clk;

  // oscillator and gates for output clock rxclk
  output rxclk;
  output CLK_GATE_rxclk;

  // output resets
  output pci0_reset_n_mrst_n;

  // signals for module outputs
  wire [23 : 0] flash_addr;
  wire [12 : 0] dram_addr, led;
  wire [7 : 0] dram_dm, gmii_txd;
  wire [3 : 0] pcie_txn, pcie_txp;
  wire [2 : 0] dram_ba;
  wire CLK_GATE_gmii_tx_clk,
       CLK_GATE_rxclk,
       CLK_GATE_trn2Clk,
       dram_cas_n,
       dram_ck_n,
       dram_ck_p,
       dram_cke,
       dram_cs_n,
       dram_odt,
       dram_ras_n,
       dram_reset_n,
       dram_we_n,
       flash_adv_n,
       flash_ce_n,
       flash_oe_n,
       flash_rst_n,
       flash_we_n,
       flash_wp_n,
       gmii_tx_clk,
       gmii_tx_en,
       gmii_tx_er,
       gps_ppsSyncOut,
       pci0_reset_n_mrst_n,
       rxclk,
       trn2Clk;

  // inlined wires
  wire [7 : 0] pcie_irq_wInterruptDo$wget;
  wire i2pAF_dClear_pw$whas,
       i2pAF_deq_happened$whas,
       i2pAF_deq_pw$whas,
       i2pAF_enq_pw$whas,
       i2pAF_sClear_pw$whas,
       p2iAF_dClear_pw$whas,
       p2iAF_deq_happened$whas,
       p2iAF_deq_pw$whas,
       p2iAF_enq_pw$whas,
       p2iAF_sClear_pw$whas,
       pci0_pwTrnRx$whas,
       pci0_pwTrnTx$whas,
       pcie_irq_wInterruptDo$whas,
       pcie_irq_wInterruptRdyN$wget,
       pcie_irq_wInterruptRdyN$whas,
       tcGbe0_wti_sThreadBusy_pw$whas;

  // register Prelude_inst_changeSpecialWires_1_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_1_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_1_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_1_rg$EN;

  // register Prelude_inst_changeSpecialWires_4_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_4_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_4_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_4_rg$EN;

  // register i2pAF_head_wrapped
  reg i2pAF_head_wrapped;
  wire i2pAF_head_wrapped$D_IN, i2pAF_head_wrapped$EN;

  // register i2pAF_tail_wrapped
  reg i2pAF_tail_wrapped;
  wire i2pAF_tail_wrapped$D_IN, i2pAF_tail_wrapped$EN;

  // register i2pS
  reg [152 : 0] i2pS;
  wire [152 : 0] i2pS$D_IN;
  wire i2pS$EN;

  // register p2iAF_head_wrapped
  reg p2iAF_head_wrapped;
  wire p2iAF_head_wrapped$D_IN, p2iAF_head_wrapped$EN;

  // register p2iAF_tail_wrapped
  reg p2iAF_tail_wrapped;
  wire p2iAF_tail_wrapped$D_IN, p2iAF_tail_wrapped$EN;

  // register p2iS
  reg [152 : 0] p2iS;
  wire [152 : 0] p2iS$D_IN;
  wire p2iS$EN;

  // register pcie_irq_rInterruptDi
  reg [7 : 0] pcie_irq_rInterruptDi;
  wire [7 : 0] pcie_irq_rInterruptDi$D_IN;
  wire pcie_irq_rInterruptDi$EN;

  // register pcie_irq_rInterruptN
  reg pcie_irq_rInterruptN;
  wire pcie_irq_rInterruptN$D_IN, pcie_irq_rInterruptN$EN;

  // register pcie_irq_rInterrupting
  reg pcie_irq_rInterrupting;
  wire pcie_irq_rInterrupting$D_IN, pcie_irq_rInterrupting$EN;

  // register pcie_irq_rMMEnabled
  reg [2 : 0] pcie_irq_rMMEnabled;
  wire [2 : 0] pcie_irq_rMMEnabled$D_IN;
  wire pcie_irq_rMMEnabled$EN;

  // register pcie_irq_rMSIEnabled
  reg pcie_irq_rMSIEnabled;
  wire pcie_irq_rMSIEnabled$D_IN, pcie_irq_rMSIEnabled$EN;

  // register tcGbe0_wti_nowReq
  reg [66 : 0] tcGbe0_wti_nowReq;
  wire [66 : 0] tcGbe0_wti_nowReq$D_IN;
  wire tcGbe0_wti_nowReq$EN;

  // register tcGbe0_wti_sThreadBusy_d
  reg tcGbe0_wti_sThreadBusy_d;
  wire tcGbe0_wti_sThreadBusy_d$D_IN, tcGbe0_wti_sThreadBusy_d$EN;

  // ports of submodule ctop
  wire [152 : 0] ctop$server_request_put, ctop$server_response_get;
  wire [127 : 0] ctop$wmemiM_MData, ctop$wmemiM_SData;
  wire [63 : 0] ctop$cpNow;
  wire [35 : 0] ctop$wmemiM_MAddr;
  wire [31 : 0] ctop$wci_m_0_SData,
		ctop$wci_m_1_MData,
		ctop$wci_m_1_SData,
		ctop$wci_m_2_MData,
		ctop$wci_m_2_SData,
		ctop$wci_m_3_MData,
		ctop$wci_m_3_SData,
		ctop$wci_m_4_MData,
		ctop$wci_m_4_SData,
		ctop$wsi_m_dac_MData,
		ctop$wsi_s_adc_MData;
  wire [19 : 0] ctop$wci_m_1_MAddr,
		ctop$wci_m_2_MAddr,
		ctop$wci_m_3_MAddr,
		ctop$wci_m_4_MAddr;
  wire [15 : 0] ctop$wmemiM_MDataByteEn;
  wire [11 : 0] ctop$wmemiM_MBurstLength,
		ctop$wsi_m_dac_MBurstLength,
		ctop$wsi_s_adc_MBurstLength;
  wire [7 : 0] ctop$wsi_m_dac_MReqInfo, ctop$wsi_s_adc_MReqInfo;
  wire [3 : 0] ctop$wci_m_1_MByteEn,
	       ctop$wci_m_2_MByteEn,
	       ctop$wci_m_3_MByteEn,
	       ctop$wci_m_4_MByteEn,
	       ctop$wsi_m_dac_MByteEn,
	       ctop$wsi_s_adc_MByteEn;
  wire [2 : 0] ctop$switch_x,
	       ctop$wci_m_1_MCmd,
	       ctop$wci_m_2_MCmd,
	       ctop$wci_m_3_MCmd,
	       ctop$wci_m_4_MCmd,
	       ctop$wmemiM_MCmd,
	       ctop$wsi_m_dac_MCmd,
	       ctop$wsi_s_adc_MCmd;
  wire [1 : 0] ctop$led,
	       ctop$wci_m_0_SFlag,
	       ctop$wci_m_0_SResp,
	       ctop$wci_m_1_MFlag,
	       ctop$wci_m_1_SFlag,
	       ctop$wci_m_1_SResp,
	       ctop$wci_m_2_MFlag,
	       ctop$wci_m_2_SFlag,
	       ctop$wci_m_2_SResp,
	       ctop$wci_m_3_MFlag,
	       ctop$wci_m_3_SFlag,
	       ctop$wci_m_3_SResp,
	       ctop$wci_m_4_MFlag,
	       ctop$wci_m_4_SFlag,
	       ctop$wci_m_4_SResp,
	       ctop$wmemiM_SResp;
  wire ctop$EN_server_request_put,
       ctop$EN_server_response_get,
       ctop$RDY_server_request_put,
       ctop$RDY_server_response_get,
       ctop$RST_N_wci_m_1_mReset_n,
       ctop$RST_N_wci_m_2_mReset_n,
       ctop$RST_N_wci_m_4_mReset_n,
       ctop$gps_ppsSyncIn_x,
       ctop$gps_ppsSyncOut,
       ctop$wci_m_0_SThreadBusy,
       ctop$wci_m_1_MAddrSpace,
       ctop$wci_m_1_SThreadBusy,
       ctop$wci_m_2_MAddrSpace,
       ctop$wci_m_2_SThreadBusy,
       ctop$wci_m_3_MAddrSpace,
       ctop$wci_m_3_SThreadBusy,
       ctop$wci_m_4_MAddrSpace,
       ctop$wci_m_4_SThreadBusy,
       ctop$wmemiM_MDataLast,
       ctop$wmemiM_MDataValid,
       ctop$wmemiM_MReqLast,
       ctop$wmemiM_MReset_n,
       ctop$wmemiM_SCmdAccept,
       ctop$wmemiM_SDataAccept,
       ctop$wmemiM_SRespLast,
       ctop$wsi_m_dac_MBurstPrecise,
       ctop$wsi_m_dac_MReqLast,
       ctop$wsi_m_dac_MReset_n,
       ctop$wsi_m_dac_SReset_n,
       ctop$wsi_m_dac_SThreadBusy,
       ctop$wsi_s_adc_MBurstPrecise,
       ctop$wsi_s_adc_MReqLast,
       ctop$wsi_s_adc_MReset_n,
       ctop$wsi_s_adc_SReset_n,
       ctop$wsi_s_adc_SThreadBusy;

  // ports of submodule dram0
  wire [127 : 0] dram0$wmemiS_MData, dram0$wmemiS_SData;
  wire [63 : 0] dram0$dram_io_dq;
  wire [59 : 0] dram0$wci_s_req;
  wire [35 : 0] dram0$wmemiS_MAddr;
  wire [33 : 0] dram0$wci_s_resp;
  wire [15 : 0] dram0$wmemiS_MDataByteEn;
  wire [12 : 0] dram0$dram_addr;
  wire [11 : 0] dram0$wmemiS_MBurstLength;
  wire [7 : 0] dram0$dram_dm, dram0$dram_io_dqs_n, dram0$dram_io_dqs_p;
  wire [2 : 0] dram0$dram_ba, dram0$wmemiS_MCmd;
  wire [1 : 0] dram0$wci_s_MFlag, dram0$wci_s_SFlag, dram0$wmemiS_SResp;
  wire dram0$dram_cas_n,
       dram0$dram_ck_n,
       dram0$dram_ck_p,
       dram0$dram_cke,
       dram0$dram_cs_n,
       dram0$dram_odt,
       dram0$dram_ras_n,
       dram0$dram_reset_n,
       dram0$dram_we_n,
       dram0$wci_s_SThreadBusy,
       dram0$wmemiS_MDataLast,
       dram0$wmemiS_MDataValid,
       dram0$wmemiS_MReqLast,
       dram0$wmemiS_MReset_n,
       dram0$wmemiS_SCmdAccept,
       dram0$wmemiS_SDataAccept,
       dram0$wmemiS_SRespLast;

  // ports of submodule fI2P
  wire [80 : 0] fI2P$D_IN, fI2P$D_OUT;
  wire fI2P$CLR, fI2P$DEQ, fI2P$EMPTY_N, fI2P$ENQ, fI2P$FULL_N;

  // ports of submodule fP2I
  wire [80 : 0] fP2I$D_IN, fP2I$D_OUT;
  wire fP2I$CLR, fP2I$DEQ, fP2I$EMPTY_N, fP2I$ENQ, fP2I$FULL_N;

  // ports of submodule flash0
  wire [59 : 0] flash0$wci_s_req;
  wire [33 : 0] flash0$wci_s_resp;
  wire [23 : 0] flash0$flash_addr;
  wire [15 : 0] flash0$flash_io_dq;
  wire [1 : 0] flash0$wci_s_MFlag, flash0$wci_s_SFlag;
  wire flash0$flash_adv_n,
       flash0$flash_ce_n,
       flash0$flash_fwait_i,
       flash0$flash_oe_n,
       flash0$flash_rst_n,
       flash0$flash_we_n,
       flash0$flash_wp_n,
       flash0$wci_s_SThreadBusy;

  // ports of submodule gbe0
  wire [66 : 0] gbe0$wti_s_req;
  wire [59 : 0] gbe0$wci_rx_req, gbe0$wci_tx_req;
  wire [33 : 0] gbe0$wci_rx_resp, gbe0$wci_tx_resp;
  wire [31 : 0] gbe0$wsiM1_MData, gbe0$wsiS1_MData;
  wire [11 : 0] gbe0$wsiM1_MBurstLength, gbe0$wsiS1_MBurstLength;
  wire [7 : 0] gbe0$gmii_rxd_i,
	       gbe0$gmii_txd,
	       gbe0$wsiM1_MReqInfo,
	       gbe0$wsiS1_MReqInfo;
  wire [3 : 0] gbe0$wsiM1_MByteEn, gbe0$wsiS1_MByteEn;
  wire [2 : 0] gbe0$wsiM1_MCmd, gbe0$wsiS1_MCmd;
  wire [1 : 0] gbe0$wci_rx_MFlag,
	       gbe0$wci_rx_SFlag,
	       gbe0$wci_tx_MFlag,
	       gbe0$wci_tx_SFlag;
  wire gbe0$CLK_gmii_tx_clk,
       gbe0$CLK_rxclk,
       gbe0$RST_N_mrst_n,
       gbe0$gmii_rx_dv_i,
       gbe0$gmii_rx_er_i,
       gbe0$gmii_tx_en,
       gbe0$gmii_tx_er,
       gbe0$wci_rx_SThreadBusy,
       gbe0$wci_tx_SThreadBusy,
       gbe0$wsiM1_MBurstPrecise,
       gbe0$wsiM1_MReqLast,
       gbe0$wsiM1_MReset_n,
       gbe0$wsiM1_SReset_n,
       gbe0$wsiM1_SThreadBusy,
       gbe0$wsiS1_MBurstPrecise,
       gbe0$wsiS1_MReqLast,
       gbe0$wsiS1_MReset_n,
       gbe0$wsiS1_SReset_n,
       gbe0$wsiS1_SThreadBusy,
       gbe0$wti_s_SThreadBusy;

  // ports of submodule i2pAF_dCombinedReset
  wire i2pAF_dCombinedReset$RST_OUT;

  // ports of submodule i2pAF_dCrossedTailWrapped
  wire i2pAF_dCrossedTailWrapped$WGET, i2pAF_dCrossedTailWrapped$WVAL;

  // ports of submodule i2pAF_dCrossedsReset
  wire i2pAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule i2pAF_dInReset
  wire i2pAF_dInReset$VAL;

  // ports of submodule i2pAF_sCombinedReset
  wire i2pAF_sCombinedReset$RST_OUT;

  // ports of submodule i2pAF_sCrossedHeadWrapped
  wire i2pAF_sCrossedHeadWrapped$WGET, i2pAF_sCrossedHeadWrapped$WVAL;

  // ports of submodule i2pAF_sCrosseddReset
  wire i2pAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule i2pAF_sInReset
  wire i2pAF_sInReset$VAL;

  // ports of submodule infLed
  wire [1 : 0] infLed$WGET, infLed$WVAL;

  // ports of submodule p2iAF_dCombinedReset
  wire p2iAF_dCombinedReset$RST_OUT;

  // ports of submodule p2iAF_dCrossedTailWrapped
  wire p2iAF_dCrossedTailWrapped$WGET, p2iAF_dCrossedTailWrapped$WVAL;

  // ports of submodule p2iAF_dCrossedsReset
  wire p2iAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule p2iAF_dInReset
  wire p2iAF_dInReset$VAL;

  // ports of submodule p2iAF_sCombinedReset
  wire p2iAF_sCombinedReset$RST_OUT;

  // ports of submodule p2iAF_sCrossedHeadWrapped
  wire p2iAF_sCrossedHeadWrapped$WGET, p2iAF_sCrossedHeadWrapped$WVAL;

  // ports of submodule p2iAF_sCrosseddReset
  wire p2iAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule p2iAF_sInReset
  wire p2iAF_sInReset$VAL;

  // ports of submodule pci0_clk
  wire pci0_clk$O;

  // ports of submodule pci0_pcie_ep
  wire [63 : 0] pci0_pcie_ep$cfg_dsn,
		pci0_pcie_ep$trn_rd,
		pci0_pcie_ep$trn_td;
  wire [47 : 0] pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pci0_pcie_ep$cfg_di;
  wire [9 : 0] pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_interrupt_di,
	       pci0_pcie_ep$cfg_interrupt_do;
  wire [6 : 0] pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pci0_pcie_ep$cfg_byte_en_n,
	       pci0_pcie_ep$pci_exp_rxn,
	       pci0_pcie_ep$pci_exp_rxp,
	       pci0_pcie_ep$pci_exp_txn,
	       pci0_pcie_ep$pci_exp_txp;
  wire [2 : 0] pci0_pcie_ep$cfg_function_number,
	       pci0_pcie_ep$cfg_interrupt_mmenable,
	       pci0_pcie_ep$trn_fc_sel;
  wire [1 : 0] pci0_pcie_ep$pl_directed_link_change,
	       pci0_pcie_ep$pl_directed_link_width;
  wire pci0_pcie_ep$cfg_err_cor_n,
       pci0_pcie_ep$cfg_err_cpl_abort_n,
       pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pci0_pcie_ep$cfg_err_ecrc_n,
       pci0_pcie_ep$cfg_err_locked_n,
       pci0_pcie_ep$cfg_err_posted_n,
       pci0_pcie_ep$cfg_err_ur_n,
       pci0_pcie_ep$cfg_interrupt_assert_n,
       pci0_pcie_ep$cfg_interrupt_msienable,
       pci0_pcie_ep$cfg_interrupt_n,
       pci0_pcie_ep$cfg_interrupt_rdy_n,
       pci0_pcie_ep$cfg_pm_wake_n,
       pci0_pcie_ep$cfg_rd_en_n,
       pci0_pcie_ep$cfg_trn_pending_n,
       pci0_pcie_ep$cfg_turnoff_ok_n,
       pci0_pcie_ep$cfg_wr_en_n,
       pci0_pcie_ep$pl_directed_link_auton,
       pci0_pcie_ep$pl_directed_link_speed,
       pci0_pcie_ep$pl_upstream_prefer_deemph,
       pci0_pcie_ep$trn2_clk,
       pci0_pcie_ep$trn_clk,
       pci0_pcie_ep$trn_lnk_up_n,
       pci0_pcie_ep$trn_rdst_rdy_n,
       pci0_pcie_ep$trn_reof_n,
       pci0_pcie_ep$trn_reset_n,
       pci0_pcie_ep$trn_rnp_ok_n,
       pci0_pcie_ep$trn_rrem_n,
       pci0_pcie_ep$trn_rsof_n,
       pci0_pcie_ep$trn_rsrc_rdy_n,
       pci0_pcie_ep$trn_tcfg_gnt_n,
       pci0_pcie_ep$trn_tdst_rdy_n,
       pci0_pcie_ep$trn_teof_n,
       pci0_pcie_ep$trn_terrfwd_n,
       pci0_pcie_ep$trn_trem_n,
       pci0_pcie_ep$trn_tsof_n,
       pci0_pcie_ep$trn_tsrc_dsc_n,
       pci0_pcie_ep$trn_tsrc_rdy_n,
       pci0_pcie_ep$trn_tstr_n;

  // ports of submodule pci0_rst
  wire pci0_rst$O;

  // ports of submodule pciDevice
  wire [15 : 0] pciDevice$dD_OUT, pciDevice$sD_IN;
  wire pciDevice$sEN, pciDevice$sRDY;

  // ports of submodule pcie_irq_fifoAssert
  wire [7 : 0] pcie_irq_fifoAssert$dD_OUT, pcie_irq_fifoAssert$sD_IN;
  wire pcie_irq_fifoAssert$dDEQ,
       pcie_irq_fifoAssert$dEMPTY_N,
       pcie_irq_fifoAssert$sENQ;

  // ports of submodule pcie_irq_rMMEnabled_1
  wire [2 : 0] pcie_irq_rMMEnabled_1$WVAL;

  // ports of submodule preEdge
  wire preEdge$CLK_VAL;

  // ports of submodule sys0_clk
  wire sys0_clk$O;

  // ports of submodule sys0_rst
  wire sys0_rst$OUT_RST_N;

  // ports of submodule sys1_clk
  wire sys1_clk$O;

  // ports of submodule sys1_clki
  wire sys1_clki$O;

  // ports of submodule sys1_rst
  wire sys1_rst$OUT_RST_N;

  // ports of submodule tcGbe0_now
  wire [63 : 0] tcGbe0_now$dD_OUT, tcGbe0_now$sD_IN;
  wire tcGbe0_now$sEN, tcGbe0_now$sRDY;

  // ports of submodule trn2_rst
  wire trn2_rst$OUT_RST_N;

  // ports of submodule trn_rst
  wire trn_rst$OUT_RST_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_every,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_every,
       CAN_FIRE_RL_connect_interrupt_1,
       CAN_FIRE_RL_connect_interrupt_do,
       CAN_FIRE_RL_connect_interrupt_mmenable,
       CAN_FIRE_RL_connect_interrupt_msienable,
       CAN_FIRE_RL_connect_interrupt_rdy_n,
       CAN_FIRE_RL_i2pAF_dClear_update_head,
       CAN_FIRE_RL_i2pAF_dCrossedTailWrapped_clock_domain_crossing,
       CAN_FIRE_RL_i2pAF_deq_update_head,
       CAN_FIRE_RL_i2pAF_enq_update_tail,
       CAN_FIRE_RL_i2pAF_reset_head,
       CAN_FIRE_RL_i2pAF_reset_tail,
       CAN_FIRE_RL_i2pAF_sClear_update_tail,
       CAN_FIRE_RL_i2pAF_sCrossedHeadWrapped_clock_domain_crossing,
       CAN_FIRE_RL_infLed_clock_domain_crossing,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mBurstLConnect,
       CAN_FIRE_RL_mBurstLConnect_1,
       CAN_FIRE_RL_mBurstLConnect_2,
       CAN_FIRE_RL_mBurstPConnect,
       CAN_FIRE_RL_mBurstPConnect_1,
       CAN_FIRE_RL_mByteEnConnect,
       CAN_FIRE_RL_mByteEnConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mCmdConnect_2,
       CAN_FIRE_RL_mDataBEConnect,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mDataConnect_2,
       CAN_FIRE_RL_mDataIConnect,
       CAN_FIRE_RL_mDataIConnect_1,
       CAN_FIRE_RL_mDataLConnect,
       CAN_FIRE_RL_mDataVConnect,
       CAN_FIRE_RL_mFlagConnect_1,
       CAN_FIRE_RL_mFlagConnect_2,
       CAN_FIRE_RL_mFlagConnect_3,
       CAN_FIRE_RL_mFlagConnect_4,
       CAN_FIRE_RL_mReqIConnect,
       CAN_FIRE_RL_mReqIConnect_1,
       CAN_FIRE_RL_mReqLConnect,
       CAN_FIRE_RL_mReqLConnect_1,
       CAN_FIRE_RL_mReqLConnect_2,
       CAN_FIRE_RL_mRstConnect,
       CAN_FIRE_RL_mRstConnect_1,
       CAN_FIRE_RL_mRstConnect_2,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_p2iAF_dClear_update_head,
       CAN_FIRE_RL_p2iAF_dCrossedTailWrapped_clock_domain_crossing,
       CAN_FIRE_RL_p2iAF_deq_update_head,
       CAN_FIRE_RL_p2iAF_enq_update_tail,
       CAN_FIRE_RL_p2iAF_reset_head,
       CAN_FIRE_RL_p2iAF_reset_tail,
       CAN_FIRE_RL_p2iAF_sClear_update_tail,
       CAN_FIRE_RL_p2iAF_sCrossedHeadWrapped_clock_domain_crossing,
       CAN_FIRE_RL_pci0_connect_trn_rx,
       CAN_FIRE_RL_pci0_connect_trn_tx,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       CAN_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing,
       CAN_FIRE_RL_reqConnect_1,
       CAN_FIRE_RL_reqConnect_2,
       CAN_FIRE_RL_reqConnect_3,
       CAN_FIRE_RL_reqConnect_4,
       CAN_FIRE_RL_reqConnect_5,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sDataConnect_1,
       CAN_FIRE_RL_sDataConnect_2,
       CAN_FIRE_RL_sDataConnect_3,
       CAN_FIRE_RL_sDataConnect_4,
       CAN_FIRE_RL_sDataConnect_5,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sFlagConnect_1,
       CAN_FIRE_RL_sFlagConnect_2,
       CAN_FIRE_RL_sFlagConnect_3,
       CAN_FIRE_RL_sFlagConnect_4,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRespConnect_1,
       CAN_FIRE_RL_sRespConnect_2,
       CAN_FIRE_RL_sRespConnect_3,
       CAN_FIRE_RL_sRespConnect_4,
       CAN_FIRE_RL_sRespConnect_5,
       CAN_FIRE_RL_sRespLConnect,
       CAN_FIRE_RL_sRstConnect,
       CAN_FIRE_RL_sRstConnect_1,
       CAN_FIRE_RL_scaConnect,
       CAN_FIRE_RL_sdaConnect,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_RL_stbConnect_4,
       CAN_FIRE_RL_stbConnect_5,
       CAN_FIRE_RL_stbConnect_6,
       CAN_FIRE_RL_stbConnect_7,
       CAN_FIRE_RL_tcGbe0_send_time,
       CAN_FIRE_RL_tcGbe0_wti_sThreadBusy_reg,
       CAN_FIRE_RL_tie_off_inputs,
       CAN_FIRE_RL_tie_off_inputs_1,
       CAN_FIRE_RL_write_pciDevice,
       CAN_FIRE_flash_fwait,
       CAN_FIRE_gmii_rx_dv,
       CAN_FIRE_gmii_rx_er,
       CAN_FIRE_gmii_rxd,
       CAN_FIRE_gps_ppsSyncIn,
       CAN_FIRE_pcie_rxn,
       CAN_FIRE_pcie_rxp,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_every,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_connect,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_every,
       WILL_FIRE_RL_connect_interrupt_1,
       WILL_FIRE_RL_connect_interrupt_do,
       WILL_FIRE_RL_connect_interrupt_mmenable,
       WILL_FIRE_RL_connect_interrupt_msienable,
       WILL_FIRE_RL_connect_interrupt_rdy_n,
       WILL_FIRE_RL_i2pAF_dClear_update_head,
       WILL_FIRE_RL_i2pAF_dCrossedTailWrapped_clock_domain_crossing,
       WILL_FIRE_RL_i2pAF_deq_update_head,
       WILL_FIRE_RL_i2pAF_enq_update_tail,
       WILL_FIRE_RL_i2pAF_reset_head,
       WILL_FIRE_RL_i2pAF_reset_tail,
       WILL_FIRE_RL_i2pAF_sClear_update_tail,
       WILL_FIRE_RL_i2pAF_sCrossedHeadWrapped_clock_domain_crossing,
       WILL_FIRE_RL_infLed_clock_domain_crossing,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mBurstLConnect,
       WILL_FIRE_RL_mBurstLConnect_1,
       WILL_FIRE_RL_mBurstLConnect_2,
       WILL_FIRE_RL_mBurstPConnect,
       WILL_FIRE_RL_mBurstPConnect_1,
       WILL_FIRE_RL_mByteEnConnect,
       WILL_FIRE_RL_mByteEnConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mCmdConnect_2,
       WILL_FIRE_RL_mDataBEConnect,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mDataConnect_2,
       WILL_FIRE_RL_mDataIConnect,
       WILL_FIRE_RL_mDataIConnect_1,
       WILL_FIRE_RL_mDataLConnect,
       WILL_FIRE_RL_mDataVConnect,
       WILL_FIRE_RL_mFlagConnect_1,
       WILL_FIRE_RL_mFlagConnect_2,
       WILL_FIRE_RL_mFlagConnect_3,
       WILL_FIRE_RL_mFlagConnect_4,
       WILL_FIRE_RL_mReqIConnect,
       WILL_FIRE_RL_mReqIConnect_1,
       WILL_FIRE_RL_mReqLConnect,
       WILL_FIRE_RL_mReqLConnect_1,
       WILL_FIRE_RL_mReqLConnect_2,
       WILL_FIRE_RL_mRstConnect,
       WILL_FIRE_RL_mRstConnect_1,
       WILL_FIRE_RL_mRstConnect_2,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_p2iAF_dClear_update_head,
       WILL_FIRE_RL_p2iAF_dCrossedTailWrapped_clock_domain_crossing,
       WILL_FIRE_RL_p2iAF_deq_update_head,
       WILL_FIRE_RL_p2iAF_enq_update_tail,
       WILL_FIRE_RL_p2iAF_reset_head,
       WILL_FIRE_RL_p2iAF_reset_tail,
       WILL_FIRE_RL_p2iAF_sClear_update_tail,
       WILL_FIRE_RL_p2iAF_sCrossedHeadWrapped_clock_domain_crossing,
       WILL_FIRE_RL_pci0_connect_trn_rx,
       WILL_FIRE_RL_pci0_connect_trn_tx,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing,
       WILL_FIRE_RL_reqConnect_1,
       WILL_FIRE_RL_reqConnect_2,
       WILL_FIRE_RL_reqConnect_3,
       WILL_FIRE_RL_reqConnect_4,
       WILL_FIRE_RL_reqConnect_5,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sDataConnect_1,
       WILL_FIRE_RL_sDataConnect_2,
       WILL_FIRE_RL_sDataConnect_3,
       WILL_FIRE_RL_sDataConnect_4,
       WILL_FIRE_RL_sDataConnect_5,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sFlagConnect_1,
       WILL_FIRE_RL_sFlagConnect_2,
       WILL_FIRE_RL_sFlagConnect_3,
       WILL_FIRE_RL_sFlagConnect_4,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRespConnect_1,
       WILL_FIRE_RL_sRespConnect_2,
       WILL_FIRE_RL_sRespConnect_3,
       WILL_FIRE_RL_sRespConnect_4,
       WILL_FIRE_RL_sRespConnect_5,
       WILL_FIRE_RL_sRespLConnect,
       WILL_FIRE_RL_sRstConnect,
       WILL_FIRE_RL_sRstConnect_1,
       WILL_FIRE_RL_scaConnect,
       WILL_FIRE_RL_sdaConnect,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_RL_stbConnect_4,
       WILL_FIRE_RL_stbConnect_5,
       WILL_FIRE_RL_stbConnect_6,
       WILL_FIRE_RL_stbConnect_7,
       WILL_FIRE_RL_tcGbe0_send_time,
       WILL_FIRE_RL_tcGbe0_wti_sThreadBusy_reg,
       WILL_FIRE_RL_tie_off_inputs,
       WILL_FIRE_RL_tie_off_inputs_1,
       WILL_FIRE_RL_write_pciDevice,
       WILL_FIRE_flash_fwait,
       WILL_FIRE_gmii_rx_dv,
       WILL_FIRE_gmii_rx_er,
       WILL_FIRE_gmii_rxd,
       WILL_FIRE_gps_ppsSyncIn,
       WILL_FIRE_pcie_rxn,
       WILL_FIRE_pcie_rxp;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_p2iS$write_1__VAL_1, MUX_p2iS$write_1__VAL_2;
  wire [81 : 0] MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1,
		MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__VAL_1;
  wire [80 : 0] MUX_fI2P$enq_1__VAL_1;
  wire MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1,
       MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__SEL_1,
       MUX_p2iS$write_1__SEL_1;

  // remaining internal signals
  wire [127 : 0] val_data__h7064, wOut_data__h6865;
  wire [15 : 0] val_be__h7063, wOut_be__h6864;
  wire p2iAF_sCrossedHeadWrapped_wget__73_EQ_p2iAF_ta_ETC___d179;

  // oscillator and gates for output clock trn2Clk
  assign trn2Clk = pci0_pcie_ep$trn2_clk ;
  assign CLK_GATE_trn2Clk = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_clk
  assign gmii_tx_clk = gbe0$CLK_gmii_tx_clk ;
  assign CLK_GATE_gmii_tx_clk = 1'b1 ;

  // oscillator and gates for output clock rxclk
  assign rxclk = gbe0$CLK_rxclk ;
  assign CLK_GATE_rxclk = 1'b1 ;

  // output resets
  assign pci0_reset_n_mrst_n = gbe0$RST_N_mrst_n ;

  // action method pcie_rxp
  assign CAN_FIRE_pcie_rxp = 1'd1 ;
  assign WILL_FIRE_pcie_rxp = 1'd1 ;

  // action method pcie_rxn
  assign CAN_FIRE_pcie_rxn = 1'd1 ;
  assign WILL_FIRE_pcie_rxn = 1'd1 ;

  // value method pcie_txp
  assign pcie_txp = pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pci0_pcie_ep$pci_exp_txn ;

  // value method led
  assign led = { 10'b1010000000, infLed$WGET, !pci0_pcie_ep$trn_lnk_up_n } ;

  // action method gps_ppsSyncIn
  assign CAN_FIRE_gps_ppsSyncIn = 1'd1 ;
  assign WILL_FIRE_gps_ppsSyncIn = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = ctop$gps_ppsSyncOut ;

  // value method dram_addr
  assign dram_addr = dram0$dram_addr ;

  // value method dram_ba
  assign dram_ba = dram0$dram_ba ;

  // value method dram_ras_n
  assign dram_ras_n = dram0$dram_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = dram0$dram_cas_n ;

  // value method dram_we_n
  assign dram_we_n = dram0$dram_we_n ;

  // value method dram_reset_n
  assign dram_reset_n = dram0$dram_reset_n ;

  // value method dram_cs_n
  assign dram_cs_n = dram0$dram_cs_n ;

  // value method dram_odt
  assign dram_odt = dram0$dram_odt ;

  // value method dram_cke
  assign dram_cke = dram0$dram_cke ;

  // value method dram_dm
  assign dram_dm = dram0$dram_dm ;

  // value method dram_ck_p
  assign dram_ck_p = dram0$dram_ck_p ;

  // value method dram_ck_n
  assign dram_ck_n = dram0$dram_ck_n ;

  // value method flash_addr
  assign flash_addr = flash0$flash_addr ;

  // value method flash_ce_n
  assign flash_ce_n = flash0$flash_ce_n ;

  // value method flash_oe_n
  assign flash_oe_n = flash0$flash_oe_n ;

  // value method flash_we_n
  assign flash_we_n = flash0$flash_we_n ;

  // value method flash_wp_n
  assign flash_wp_n = flash0$flash_wp_n ;

  // value method flash_rst_n
  assign flash_rst_n = flash0$flash_rst_n ;

  // value method flash_adv_n
  assign flash_adv_n = flash0$flash_adv_n ;

  // action method flash_fwait
  assign CAN_FIRE_flash_fwait = 1'd1 ;
  assign WILL_FIRE_flash_fwait = 1'd1 ;

  // value method gmii_txd
  assign gmii_txd = gbe0$gmii_txd ;

  // value method gmii_tx_en
  assign gmii_tx_en = gbe0$gmii_tx_en ;

  // value method gmii_tx_er
  assign gmii_tx_er = gbe0$gmii_tx_er ;

  // action method gmii_rxd
  assign CAN_FIRE_gmii_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rxd = 1'd1 ;

  // action method gmii_rx_dv
  assign CAN_FIRE_gmii_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_dv = 1'd1 ;

  // action method gmii_rx_er
  assign CAN_FIRE_gmii_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_er = 1'd1 ;

  // submodule ctop
  mkCTop ctop(.pciDevice(pciDevice$dD_OUT),
	      .CLK_sys0_clk(sys0_clk$O),
	      .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
	      .CLK(pci0_pcie_ep$trn2_clk),
	      .RST_N(trn2_rst$OUT_RST_N),
	      .gps_ppsSyncIn_x(ctop$gps_ppsSyncIn_x),
	      .server_request_put(ctop$server_request_put),
	      .switch_x(ctop$switch_x),
	      .wci_m_0_SData(ctop$wci_m_0_SData),
	      .wci_m_0_SFlag(ctop$wci_m_0_SFlag),
	      .wci_m_0_SResp(ctop$wci_m_0_SResp),
	      .wci_m_1_SData(ctop$wci_m_1_SData),
	      .wci_m_1_SFlag(ctop$wci_m_1_SFlag),
	      .wci_m_1_SResp(ctop$wci_m_1_SResp),
	      .wci_m_2_SData(ctop$wci_m_2_SData),
	      .wci_m_2_SFlag(ctop$wci_m_2_SFlag),
	      .wci_m_2_SResp(ctop$wci_m_2_SResp),
	      .wci_m_3_SData(ctop$wci_m_3_SData),
	      .wci_m_3_SFlag(ctop$wci_m_3_SFlag),
	      .wci_m_3_SResp(ctop$wci_m_3_SResp),
	      .wci_m_4_SData(ctop$wci_m_4_SData),
	      .wci_m_4_SFlag(ctop$wci_m_4_SFlag),
	      .wci_m_4_SResp(ctop$wci_m_4_SResp),
	      .wmemiM_SData(ctop$wmemiM_SData),
	      .wmemiM_SResp(ctop$wmemiM_SResp),
	      .wsi_s_adc_MBurstLength(ctop$wsi_s_adc_MBurstLength),
	      .wsi_s_adc_MByteEn(ctop$wsi_s_adc_MByteEn),
	      .wsi_s_adc_MCmd(ctop$wsi_s_adc_MCmd),
	      .wsi_s_adc_MData(ctop$wsi_s_adc_MData),
	      .wsi_s_adc_MReqInfo(ctop$wsi_s_adc_MReqInfo),
	      .EN_server_request_put(ctop$EN_server_request_put),
	      .EN_server_response_get(ctop$EN_server_response_get),
	      .wci_m_0_SThreadBusy(ctop$wci_m_0_SThreadBusy),
	      .wci_m_1_SThreadBusy(ctop$wci_m_1_SThreadBusy),
	      .wci_m_2_SThreadBusy(ctop$wci_m_2_SThreadBusy),
	      .wci_m_3_SThreadBusy(ctop$wci_m_3_SThreadBusy),
	      .wci_m_4_SThreadBusy(ctop$wci_m_4_SThreadBusy),
	      .wsi_s_adc_MReqLast(ctop$wsi_s_adc_MReqLast),
	      .wsi_s_adc_MBurstPrecise(ctop$wsi_s_adc_MBurstPrecise),
	      .wsi_s_adc_MReset_n(ctop$wsi_s_adc_MReset_n),
	      .wsi_m_dac_SThreadBusy(ctop$wsi_m_dac_SThreadBusy),
	      .wsi_m_dac_SReset_n(ctop$wsi_m_dac_SReset_n),
	      .wmemiM_SRespLast(ctop$wmemiM_SRespLast),
	      .wmemiM_SCmdAccept(ctop$wmemiM_SCmdAccept),
	      .wmemiM_SDataAccept(ctop$wmemiM_SDataAccept),
	      .RDY_server_request_put(ctop$RDY_server_request_put),
	      .server_response_get(ctop$server_response_get),
	      .RDY_server_response_get(ctop$RDY_server_response_get),
	      .led(ctop$led),
	      .wci_m_0_MCmd(),
	      .wci_m_0_MAddrSpace(),
	      .wci_m_0_MByteEn(),
	      .wci_m_0_MAddr(),
	      .wci_m_0_MData(),
	      .wci_m_0_MFlag(),
	      .wci_m_1_MCmd(ctop$wci_m_1_MCmd),
	      .wci_m_1_MAddrSpace(ctop$wci_m_1_MAddrSpace),
	      .wci_m_1_MByteEn(ctop$wci_m_1_MByteEn),
	      .wci_m_1_MAddr(ctop$wci_m_1_MAddr),
	      .wci_m_1_MData(ctop$wci_m_1_MData),
	      .wci_m_1_MFlag(ctop$wci_m_1_MFlag),
	      .wci_m_2_MCmd(ctop$wci_m_2_MCmd),
	      .wci_m_2_MAddrSpace(ctop$wci_m_2_MAddrSpace),
	      .wci_m_2_MByteEn(ctop$wci_m_2_MByteEn),
	      .wci_m_2_MAddr(ctop$wci_m_2_MAddr),
	      .wci_m_2_MData(ctop$wci_m_2_MData),
	      .wci_m_2_MFlag(ctop$wci_m_2_MFlag),
	      .wci_m_3_MCmd(ctop$wci_m_3_MCmd),
	      .wci_m_3_MAddrSpace(ctop$wci_m_3_MAddrSpace),
	      .wci_m_3_MByteEn(ctop$wci_m_3_MByteEn),
	      .wci_m_3_MAddr(ctop$wci_m_3_MAddr),
	      .wci_m_3_MData(ctop$wci_m_3_MData),
	      .wci_m_3_MFlag(ctop$wci_m_3_MFlag),
	      .wci_m_4_MCmd(ctop$wci_m_4_MCmd),
	      .wci_m_4_MAddrSpace(ctop$wci_m_4_MAddrSpace),
	      .wci_m_4_MByteEn(ctop$wci_m_4_MByteEn),
	      .wci_m_4_MAddr(ctop$wci_m_4_MAddr),
	      .wci_m_4_MData(ctop$wci_m_4_MData),
	      .wci_m_4_MFlag(ctop$wci_m_4_MFlag),
	      .cpNow(ctop$cpNow),
	      .RDY_cpNow(),
	      .wsi_s_adc_SThreadBusy(ctop$wsi_s_adc_SThreadBusy),
	      .wsi_s_adc_SReset_n(ctop$wsi_s_adc_SReset_n),
	      .wsi_m_dac_MCmd(ctop$wsi_m_dac_MCmd),
	      .wsi_m_dac_MReqLast(ctop$wsi_m_dac_MReqLast),
	      .wsi_m_dac_MBurstPrecise(ctop$wsi_m_dac_MBurstPrecise),
	      .wsi_m_dac_MBurstLength(ctop$wsi_m_dac_MBurstLength),
	      .wsi_m_dac_MData(ctop$wsi_m_dac_MData),
	      .wsi_m_dac_MByteEn(ctop$wsi_m_dac_MByteEn),
	      .wsi_m_dac_MReqInfo(ctop$wsi_m_dac_MReqInfo),
	      .wsi_m_dac_MReset_n(ctop$wsi_m_dac_MReset_n),
	      .wmemiM_MCmd(ctop$wmemiM_MCmd),
	      .wmemiM_MReqLast(ctop$wmemiM_MReqLast),
	      .wmemiM_MAddr(ctop$wmemiM_MAddr),
	      .wmemiM_MBurstLength(ctop$wmemiM_MBurstLength),
	      .wmemiM_MDataValid(ctop$wmemiM_MDataValid),
	      .wmemiM_MDataLast(ctop$wmemiM_MDataLast),
	      .wmemiM_MData(ctop$wmemiM_MData),
	      .wmemiM_MDataByteEn(ctop$wmemiM_MDataByteEn),
	      .wmemiM_MReset_n(ctop$wmemiM_MReset_n),
	      .gps_ppsSyncOut(ctop$gps_ppsSyncOut),
	      .RST_N_wci_m_0_mReset_n(),
	      .RST_N_wci_m_1_mReset_n(ctop$RST_N_wci_m_1_mReset_n),
	      .RST_N_wci_m_2_mReset_n(ctop$RST_N_wci_m_2_mReset_n),
	      .RST_N_wci_m_3_mReset_n(),
	      .RST_N_wci_m_4_mReset_n(ctop$RST_N_wci_m_4_mReset_n));

  // submodule dram0
  mkDramServer dram0(.CLK_sys0_clk(sys0_clk$O),
		     .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		     .CLK(pci0_pcie_ep$trn2_clk),
		     .RST_N(ctop$RST_N_wci_m_4_mReset_n),
		     .wci_s_MFlag(dram0$wci_s_MFlag),
		     .wci_s_req(dram0$wci_s_req),
		     .wmemiS_MAddr(dram0$wmemiS_MAddr),
		     .wmemiS_MBurstLength(dram0$wmemiS_MBurstLength),
		     .wmemiS_MCmd(dram0$wmemiS_MCmd),
		     .wmemiS_MData(dram0$wmemiS_MData),
		     .wmemiS_MDataByteEn(dram0$wmemiS_MDataByteEn),
		     .wmemiS_MReqLast(dram0$wmemiS_MReqLast),
		     .wmemiS_MDataValid(dram0$wmemiS_MDataValid),
		     .wmemiS_MDataLast(dram0$wmemiS_MDataLast),
		     .wmemiS_MReset_n(dram0$wmemiS_MReset_n),
		     .wci_s_resp(dram0$wci_s_resp),
		     .wci_s_SThreadBusy(dram0$wci_s_SThreadBusy),
		     .wci_s_SFlag(dram0$wci_s_SFlag),
		     .dram_addr(dram0$dram_addr),
		     .dram_ba(dram0$dram_ba),
		     .dram_ras_n(dram0$dram_ras_n),
		     .dram_cas_n(dram0$dram_cas_n),
		     .dram_we_n(dram0$dram_we_n),
		     .dram_reset_n(dram0$dram_reset_n),
		     .dram_cs_n(dram0$dram_cs_n),
		     .dram_odt(dram0$dram_odt),
		     .dram_cke(dram0$dram_cke),
		     .dram_dm(dram0$dram_dm),
		     .dram_ck_p(dram0$dram_ck_p),
		     .dram_ck_n(dram0$dram_ck_n),
		     .wmemiS_SResp(dram0$wmemiS_SResp),
		     .wmemiS_SRespLast(dram0$wmemiS_SRespLast),
		     .wmemiS_SData(dram0$wmemiS_SData),
		     .wmemiS_SCmdAccept(dram0$wmemiS_SCmdAccept),
		     .wmemiS_SDataAccept(dram0$wmemiS_SDataAccept),
		     .dram_io_dq(dram0$dram_io_dq),
		     .dram_io_dqs_p(dram0$dram_io_dqs_p),
		     .dram_io_dqs_n(dram0$dram_io_dqs_n));

  // submodule fI2P
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fI2P(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fI2P$D_IN),
				    .ENQ(fI2P$ENQ),
				    .DEQ(fI2P$DEQ),
				    .CLR(fI2P$CLR),
				    .D_OUT(fI2P$D_OUT),
				    .FULL_N(fI2P$FULL_N),
				    .EMPTY_N(fI2P$EMPTY_N));

  // submodule fP2I
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fP2I(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fP2I$D_IN),
				    .ENQ(fP2I$ENQ),
				    .DEQ(fP2I$DEQ),
				    .CLR(fP2I$CLR),
				    .D_OUT(fP2I$D_OUT),
				    .FULL_N(fP2I$FULL_N),
				    .EMPTY_N(fP2I$EMPTY_N));

  // submodule flash0
  mkFlashWorker flash0(.CLK(pci0_pcie_ep$trn2_clk),
		       .RST_N(ctop$RST_N_wci_m_1_mReset_n),
		       .flash_fwait_i(flash0$flash_fwait_i),
		       .wci_s_MFlag(flash0$wci_s_MFlag),
		       .wci_s_req(flash0$wci_s_req),
		       .wci_s_resp(flash0$wci_s_resp),
		       .wci_s_SThreadBusy(flash0$wci_s_SThreadBusy),
		       .wci_s_SFlag(flash0$wci_s_SFlag),
		       .flash_addr(flash0$flash_addr),
		       .flash_ce_n(flash0$flash_ce_n),
		       .flash_oe_n(flash0$flash_oe_n),
		       .flash_we_n(flash0$flash_we_n),
		       .flash_wp_n(flash0$flash_wp_n),
		       .flash_rst_n(flash0$flash_rst_n),
		       .flash_adv_n(flash0$flash_adv_n),
		       .flash_io_dq(flash0$flash_io_dq));

  // submodule gbe0
  mkGbeWorker gbe0(.CLK_gmii_rx_clk(gmii_rx_clk),
		   .CLK_sys1_clk(sys1_clk$O),
		   .RST_N_sys1_rst(sys1_rst$OUT_RST_N),
		   .CLK(pci0_pcie_ep$trn2_clk),
		   .RST_N(ctop$RST_N_wci_m_2_mReset_n),
		   .gmii_rx_dv_i(gbe0$gmii_rx_dv_i),
		   .gmii_rx_er_i(gbe0$gmii_rx_er_i),
		   .gmii_rxd_i(gbe0$gmii_rxd_i),
		   .wci_rx_MFlag(gbe0$wci_rx_MFlag),
		   .wci_rx_req(gbe0$wci_rx_req),
		   .wci_tx_MFlag(gbe0$wci_tx_MFlag),
		   .wci_tx_req(gbe0$wci_tx_req),
		   .wsiS1_MBurstLength(gbe0$wsiS1_MBurstLength),
		   .wsiS1_MByteEn(gbe0$wsiS1_MByteEn),
		   .wsiS1_MCmd(gbe0$wsiS1_MCmd),
		   .wsiS1_MData(gbe0$wsiS1_MData),
		   .wsiS1_MReqInfo(gbe0$wsiS1_MReqInfo),
		   .wti_s_req(gbe0$wti_s_req),
		   .wsiM1_SThreadBusy(gbe0$wsiM1_SThreadBusy),
		   .wsiM1_SReset_n(gbe0$wsiM1_SReset_n),
		   .wsiS1_MReqLast(gbe0$wsiS1_MReqLast),
		   .wsiS1_MBurstPrecise(gbe0$wsiS1_MBurstPrecise),
		   .wsiS1_MReset_n(gbe0$wsiS1_MReset_n),
		   .wci_rx_resp(gbe0$wci_rx_resp),
		   .wci_rx_SThreadBusy(gbe0$wci_rx_SThreadBusy),
		   .wci_rx_SFlag(gbe0$wci_rx_SFlag),
		   .wci_tx_resp(gbe0$wci_tx_resp),
		   .wci_tx_SThreadBusy(gbe0$wci_tx_SThreadBusy),
		   .wci_tx_SFlag(gbe0$wci_tx_SFlag),
		   .wti_s_SThreadBusy(gbe0$wti_s_SThreadBusy),
		   .wsiM1_MCmd(gbe0$wsiM1_MCmd),
		   .wsiM1_MReqLast(gbe0$wsiM1_MReqLast),
		   .wsiM1_MBurstPrecise(gbe0$wsiM1_MBurstPrecise),
		   .wsiM1_MBurstLength(gbe0$wsiM1_MBurstLength),
		   .wsiM1_MData(gbe0$wsiM1_MData),
		   .wsiM1_MByteEn(gbe0$wsiM1_MByteEn),
		   .wsiM1_MReqInfo(gbe0$wsiM1_MReqInfo),
		   .wsiM1_MReset_n(gbe0$wsiM1_MReset_n),
		   .wsiS1_SThreadBusy(gbe0$wsiS1_SThreadBusy),
		   .wsiS1_SReset_n(gbe0$wsiS1_SReset_n),
		   .gmii_txd(gbe0$gmii_txd),
		   .gmii_tx_en(gbe0$gmii_tx_en),
		   .gmii_tx_er(gbe0$gmii_tx_er),
		   .CLK_gmii_tx_clk(gbe0$CLK_gmii_tx_clk),
		   .CLK_GATE_gmii_tx_clk(),
		   .CLK_rxclk(gbe0$CLK_rxclk),
		   .CLK_GATE_rxclk(),
		   .RST_N_mrst_n(gbe0$RST_N_mrst_n));

  // submodule i2pAF_dCombinedReset
  ResetEither i2pAF_dCombinedReset(.A_RST(trn_rst$OUT_RST_N),
				   .B_RST(i2pAF_dCrossedsReset$OUT_RST_N),
				   .RST_OUT(i2pAF_dCombinedReset$RST_OUT));

  // submodule i2pAF_dCrossedTailWrapped
  BypassWire #(.width(32'd1)) i2pAF_dCrossedTailWrapped(.WVAL(i2pAF_dCrossedTailWrapped$WVAL),
							.WGET(i2pAF_dCrossedTailWrapped$WGET));

  // submodule i2pAF_dCrossedsReset
  SyncReset0 i2pAF_dCrossedsReset(.IN_RST_N(trn2_rst$OUT_RST_N),
				  .OUT_RST_N(i2pAF_dCrossedsReset$OUT_RST_N));

  // submodule i2pAF_dInReset
  ResetToBool i2pAF_dInReset(.RST(i2pAF_dCombinedReset$RST_OUT),
			     .VAL(i2pAF_dInReset$VAL));

  // submodule i2pAF_sCombinedReset
  ResetEither i2pAF_sCombinedReset(.A_RST(trn2_rst$OUT_RST_N),
				   .B_RST(i2pAF_sCrosseddReset$OUT_RST_N),
				   .RST_OUT(i2pAF_sCombinedReset$RST_OUT));

  // submodule i2pAF_sCrossedHeadWrapped
  BypassWire #(.width(32'd1)) i2pAF_sCrossedHeadWrapped(.WVAL(i2pAF_sCrossedHeadWrapped$WVAL),
							.WGET(i2pAF_sCrossedHeadWrapped$WGET));

  // submodule i2pAF_sCrosseddReset
  SyncReset0 i2pAF_sCrosseddReset(.IN_RST_N(trn_rst$OUT_RST_N),
				  .OUT_RST_N(i2pAF_sCrosseddReset$OUT_RST_N));

  // submodule i2pAF_sInReset
  ResetToBool i2pAF_sInReset(.RST(i2pAF_sCombinedReset$RST_OUT),
			     .VAL(i2pAF_sInReset$VAL));

  // submodule infLed
  BypassWire #(.width(32'd2)) infLed(.WVAL(infLed$WVAL), .WGET(infLed$WGET));

  // submodule p2iAF_dCombinedReset
  ResetEither p2iAF_dCombinedReset(.A_RST(trn2_rst$OUT_RST_N),
				   .B_RST(p2iAF_dCrossedsReset$OUT_RST_N),
				   .RST_OUT(p2iAF_dCombinedReset$RST_OUT));

  // submodule p2iAF_dCrossedTailWrapped
  BypassWire #(.width(32'd1)) p2iAF_dCrossedTailWrapped(.WVAL(p2iAF_dCrossedTailWrapped$WVAL),
							.WGET(p2iAF_dCrossedTailWrapped$WGET));

  // submodule p2iAF_dCrossedsReset
  SyncReset0 p2iAF_dCrossedsReset(.IN_RST_N(trn_rst$OUT_RST_N),
				  .OUT_RST_N(p2iAF_dCrossedsReset$OUT_RST_N));

  // submodule p2iAF_dInReset
  ResetToBool p2iAF_dInReset(.RST(p2iAF_dCombinedReset$RST_OUT),
			     .VAL(p2iAF_dInReset$VAL));

  // submodule p2iAF_sCombinedReset
  ResetEither p2iAF_sCombinedReset(.A_RST(trn_rst$OUT_RST_N),
				   .B_RST(p2iAF_sCrosseddReset$OUT_RST_N),
				   .RST_OUT(p2iAF_sCombinedReset$RST_OUT));

  // submodule p2iAF_sCrossedHeadWrapped
  BypassWire #(.width(32'd1)) p2iAF_sCrossedHeadWrapped(.WVAL(p2iAF_sCrossedHeadWrapped$WVAL),
							.WGET(p2iAF_sCrossedHeadWrapped$WGET));

  // submodule p2iAF_sCrosseddReset
  SyncReset0 p2iAF_sCrosseddReset(.IN_RST_N(trn2_rst$OUT_RST_N),
				  .OUT_RST_N(p2iAF_sCrosseddReset$OUT_RST_N));

  // submodule p2iAF_sInReset
  ResetToBool p2iAF_sInReset(.RST(p2iAF_sCombinedReset$RST_OUT),
			     .VAL(p2iAF_sInReset$VAL));

  // submodule pci0_clk
  IBUFDS_GTXE1 pci0_clk(.I(pci0_clkp),
			.IB(pci0_clkn),
			.CEB(1'd0),
			.O(pci0_clk$O),
			.ODIV2());

  // submodule pci0_pcie_ep
  xilinx_v6_pcie_wrapper #(.PL_FAST_TRAIN("FALSE")) pci0_pcie_ep(.sys_clk(pci0_clk$O),
								 .sys_reset_n(pci0_rst$O),
								 .cfg_byte_en_n(pci0_pcie_ep$cfg_byte_en_n),
								 .cfg_di(pci0_pcie_ep$cfg_di),
								 .cfg_dsn(pci0_pcie_ep$cfg_dsn),
								 .cfg_dwaddr(pci0_pcie_ep$cfg_dwaddr),
								 .cfg_err_cor_n(pci0_pcie_ep$cfg_err_cor_n),
								 .cfg_err_cpl_abort_n(pci0_pcie_ep$cfg_err_cpl_abort_n),
								 .cfg_err_cpl_timeout_n(pci0_pcie_ep$cfg_err_cpl_timeout_n),
								 .cfg_err_cpl_unexpect_n(pci0_pcie_ep$cfg_err_cpl_unexpect_n),
								 .cfg_err_ecrc_n(pci0_pcie_ep$cfg_err_ecrc_n),
								 .cfg_err_locked_n(pci0_pcie_ep$cfg_err_locked_n),
								 .cfg_err_posted_n(pci0_pcie_ep$cfg_err_posted_n),
								 .cfg_err_tlp_cpl_header(pci0_pcie_ep$cfg_err_tlp_cpl_header),
								 .cfg_err_ur_n(pci0_pcie_ep$cfg_err_ur_n),
								 .cfg_interrupt_assert_n(pci0_pcie_ep$cfg_interrupt_assert_n),
								 .cfg_interrupt_di(pci0_pcie_ep$cfg_interrupt_di),
								 .cfg_interrupt_n(pci0_pcie_ep$cfg_interrupt_n),
								 .cfg_pm_wake_n(pci0_pcie_ep$cfg_pm_wake_n),
								 .cfg_rd_en_n(pci0_pcie_ep$cfg_rd_en_n),
								 .cfg_trn_pending_n(pci0_pcie_ep$cfg_trn_pending_n),
								 .cfg_turnoff_ok_n(pci0_pcie_ep$cfg_turnoff_ok_n),
								 .cfg_wr_en_n(pci0_pcie_ep$cfg_wr_en_n),
								 .pci_exp_rxn(pci0_pcie_ep$pci_exp_rxn),
								 .pci_exp_rxp(pci0_pcie_ep$pci_exp_rxp),
								 .pl_directed_link_auton(pci0_pcie_ep$pl_directed_link_auton),
								 .pl_directed_link_change(pci0_pcie_ep$pl_directed_link_change),
								 .pl_directed_link_speed(pci0_pcie_ep$pl_directed_link_speed),
								 .pl_directed_link_width(pci0_pcie_ep$pl_directed_link_width),
								 .pl_upstream_prefer_deemph(pci0_pcie_ep$pl_upstream_prefer_deemph),
								 .trn_fc_sel(pci0_pcie_ep$trn_fc_sel),
								 .trn_rdst_rdy_n(pci0_pcie_ep$trn_rdst_rdy_n),
								 .trn_rnp_ok_n(pci0_pcie_ep$trn_rnp_ok_n),
								 .trn_tcfg_gnt_n(pci0_pcie_ep$trn_tcfg_gnt_n),
								 .trn_td(pci0_pcie_ep$trn_td),
								 .trn_teof_n(pci0_pcie_ep$trn_teof_n),
								 .trn_terrfwd_n(pci0_pcie_ep$trn_terrfwd_n),
								 .trn_trem_n(pci0_pcie_ep$trn_trem_n),
								 .trn_tsof_n(pci0_pcie_ep$trn_tsof_n),
								 .trn_tsrc_dsc_n(pci0_pcie_ep$trn_tsrc_dsc_n),
								 .trn_tsrc_rdy_n(pci0_pcie_ep$trn_tsrc_rdy_n),
								 .trn_tstr_n(pci0_pcie_ep$trn_tstr_n),
								 .pci_exp_txp(pci0_pcie_ep$pci_exp_txp),
								 .pci_exp_txn(pci0_pcie_ep$pci_exp_txn),
								 .trn_lnk_up_n(pci0_pcie_ep$trn_lnk_up_n),
								 .trn_fc_ph(),
								 .trn_fc_pd(),
								 .trn_fc_nph(),
								 .trn_fc_npd(),
								 .trn_fc_cplh(),
								 .trn_fc_cpld(),
								 .cfg_do(),
								 .cfg_rd_wr_done_n(),
								 .cfg_bus_number(pci0_pcie_ep$cfg_bus_number),
								 .cfg_device_number(pci0_pcie_ep$cfg_device_number),
								 .cfg_function_number(pci0_pcie_ep$cfg_function_number),
								 .cfg_status(),
								 .cfg_command(),
								 .cfg_dstatus(),
								 .cfg_dcommand(),
								 .cfg_dcommand2(),
								 .cfg_lstatus(),
								 .cfg_lcommand(),
								 .cfg_to_turnoff_n(),
								 .cfg_pcie_link_state_n(),
								 .cfg_pmcsr_pme_en(),
								 .cfg_pmcsr_pme_status(),
								 .cfg_pmcsr_powerstate(),
								 .trn_rsof_n(pci0_pcie_ep$trn_rsof_n),
								 .trn_reof_n(pci0_pcie_ep$trn_reof_n),
								 .trn_rd(pci0_pcie_ep$trn_rd),
								 .trn_rrem_n(pci0_pcie_ep$trn_rrem_n),
								 .trn_rerrfwd_n(),
								 .trn_rsrc_rdy_n(pci0_pcie_ep$trn_rsrc_rdy_n),
								 .trn_rsrc_dsc_n(),
								 .trn_rbar_hit_n(pci0_pcie_ep$trn_rbar_hit_n),
								 .trn_tdst_rdy_n(pci0_pcie_ep$trn_tdst_rdy_n),
								 .trn_tbuf_av(),
								 .trn_terr_drop_n(),
								 .trn_tcfg_req_n(),
								 .cfg_interrupt_rdy_n(pci0_pcie_ep$cfg_interrupt_rdy_n),
								 .cfg_interrupt_do(pci0_pcie_ep$cfg_interrupt_do),
								 .cfg_interrupt_mmenable(pci0_pcie_ep$cfg_interrupt_mmenable),
								 .cfg_interrupt_msienable(pci0_pcie_ep$cfg_interrupt_msienable),
								 .cfg_interrupt_msixenable(),
								 .cfg_interrupt_msixfm(),
								 .cfg_err_cpl_rdy_n(),
								 .pl_initial_link_width(),
								 .pl_lane_reversal_mode(),
								 .pl_link_gen2_capable(),
								 .pl_link_partner_gen2_supported(),
								 .pl_link_upcfg_capable(),
								 .pl_sel_link_rate(),
								 .pl_sel_link_width(),
								 .pl_ltssm_state(),
								 .pl_received_hot_rst(),
								 .trn_clk(pci0_pcie_ep$trn_clk),
								 .trn2_clk(pci0_pcie_ep$trn2_clk),
								 .trn_reset_n(pci0_pcie_ep$trn_reset_n));

  // submodule pci0_rst
  IBUF pci0_rst(.I(pci0_reset_n), .O(pci0_rst$O));

  // submodule pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciDevice(.sCLK(pci0_pcie_ep$trn_clk),
					 .dCLK(pci0_pcie_ep$trn2_clk),
					 .sRST_N(trn_rst$OUT_RST_N),
					 .sD_IN(pciDevice$sD_IN),
					 .sEN(pciDevice$sEN),
					 .dD_OUT(pciDevice$dD_OUT),
					 .sRDY(pciDevice$sRDY));

  // submodule pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) pcie_irq_fifoAssert(.sCLK(pci0_pcie_ep$trn_clk),
						  .dCLK(pci0_pcie_ep$trn_clk),
						  .sRST_N(trn_rst$OUT_RST_N),
						  .sD_IN(pcie_irq_fifoAssert$sD_IN),
						  .sENQ(pcie_irq_fifoAssert$sENQ),
						  .dDEQ(pcie_irq_fifoAssert$dDEQ),
						  .dD_OUT(pcie_irq_fifoAssert$dD_OUT),
						  .sFULL_N(),
						  .dEMPTY_N(pcie_irq_fifoAssert$dEMPTY_N));

  // submodule pcie_irq_rMMEnabled_1
  BypassWire #(.width(32'd3)) pcie_irq_rMMEnabled_1(.WVAL(pcie_irq_rMMEnabled_1$WVAL),
						    .WGET());

  // submodule preEdge
  ClockInvToBool preEdge(.CLK_FAST(pci0_pcie_ep$trn_clk),
			 .CLK_SLOW(pci0_pcie_ep$trn2_clk),
			 .CLK_VAL(preEdge$CLK_VAL));

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk$O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys0_rst(.CLK(sys0_clk$O),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(sys0_rst$OUT_RST_N));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki$O), .O(sys1_clk$O));

  // submodule sys1_clki
  IBUFDS_GTXE1 sys1_clki(.I(sys1_clkp),
			 .IB(sys1_clkn),
			 .CEB(1'd0),
			 .O(sys1_clki$O),
			 .ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk$O),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(sys1_rst$OUT_RST_N));

  // submodule tcGbe0_now
  SyncRegister #(.width(32'd64), .init(64'd0)) tcGbe0_now(.sCLK(sys0_clk$O),
							  .dCLK(sys1_clk$O),
							  .sRST_N(sys0_rst$OUT_RST_N),
							  .sD_IN(tcGbe0_now$sD_IN),
							  .sEN(tcGbe0_now$sEN),
							  .dD_OUT(tcGbe0_now$dD_OUT),
							  .sRDY(tcGbe0_now$sRDY));

  // submodule trn2_rst
  SyncResetA #(.RSTDELAY(32'd0)) trn2_rst(.CLK(pci0_pcie_ep$trn2_clk),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(trn2_rst$OUT_RST_N));

  // submodule trn_rst
  SyncResetA #(.RSTDELAY(32'd0)) trn_rst(.CLK(pci0_pcie_ep$trn_clk),
					 .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					 .OUT_RST_N(trn_rst$OUT_RST_N));

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = tcGbe0_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = tcGbe0_now$sRDY ;

  // rule RL_sRstConnect_1
  assign CAN_FIRE_RL_sRstConnect_1 = gbe0$wsiS1_SReset_n ;
  assign WILL_FIRE_RL_sRstConnect_1 = gbe0$wsiS1_SReset_n ;

  // rule RL_mRstConnect_1
  assign CAN_FIRE_RL_mRstConnect_1 = ctop$wsi_m_dac_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect_1 = ctop$wsi_m_dac_MReset_n ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 = flash0$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_1 = flash0$wci_s_SThreadBusy ;

  // rule RL_mDataIConnect_1
  assign CAN_FIRE_RL_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect_1 = 1'd1 ;

  // rule RL_mReqIConnect_1
  assign CAN_FIRE_RL_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_1 = 1'd1 ;

  // rule RL_mByteEnConnect_1
  assign CAN_FIRE_RL_mByteEnConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect_1 = 1'd1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mBurstLConnect_1
  assign CAN_FIRE_RL_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_1 = 1'd1 ;

  // rule RL_mBurstPConnect_1
  assign CAN_FIRE_RL_mBurstPConnect_1 = ctop$wsi_m_dac_MBurstPrecise ;
  assign WILL_FIRE_RL_mBurstPConnect_1 = ctop$wsi_m_dac_MBurstPrecise ;

  // rule RL_mReqLConnect_1
  assign CAN_FIRE_RL_mReqLConnect_1 = ctop$wsi_m_dac_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect_1 = ctop$wsi_m_dac_MReqLast ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_sRstConnect
  assign CAN_FIRE_RL_sRstConnect = ctop$wsi_s_adc_SReset_n ;
  assign WILL_FIRE_RL_sRstConnect = ctop$wsi_s_adc_SReset_n ;

  // rule RL_mRstConnect
  assign CAN_FIRE_RL_mRstConnect = gbe0$wsiM1_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect = gbe0$wsiM1_MReset_n ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect = 1'd1 ;

  // rule RL_mDataIConnect
  assign CAN_FIRE_RL_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect = 1'd1 ;

  // rule RL_mReqIConnect
  assign CAN_FIRE_RL_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect = 1'd1 ;

  // rule RL_mByteEnConnect
  assign CAN_FIRE_RL_mByteEnConnect = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mBurstLConnect
  assign CAN_FIRE_RL_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect = 1'd1 ;

  // rule RL_mBurstPConnect
  assign CAN_FIRE_RL_mBurstPConnect = gbe0$wsiM1_MBurstPrecise ;
  assign WILL_FIRE_RL_mBurstPConnect = gbe0$wsiM1_MBurstPrecise ;

  // rule RL_mReqLConnect
  assign CAN_FIRE_RL_mReqLConnect = gbe0$wsiM1_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect = gbe0$wsiM1_MReqLast ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 = gbe0$wci_tx_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_3 = gbe0$wci_tx_SThreadBusy ;

  // rule RL_reqConnect_1
  assign CAN_FIRE_RL_reqConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_1 = 1'd1 ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 = gbe0$wci_rx_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_2 = gbe0$wci_rx_SThreadBusy ;

  // rule RL_mFlagConnect_1
  assign CAN_FIRE_RL_mFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_1 = 1'd1 ;

  // rule RL_sFlagConnect_1
  assign CAN_FIRE_RL_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_1 = 1'd1 ;

  // rule RL_sDataConnect_1
  assign CAN_FIRE_RL_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_1
  assign CAN_FIRE_RL_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_1 = 1'd1 ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mDataBEConnect
  assign CAN_FIRE_RL_mDataBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataBEConnect = 1'd1 ;

  // rule RL_mDataLConnect
  assign CAN_FIRE_RL_mDataLConnect = ctop$wmemiM_MDataLast ;
  assign WILL_FIRE_RL_mDataLConnect = ctop$wmemiM_MDataLast ;

  // rule RL_mDataVConnect
  assign CAN_FIRE_RL_mDataVConnect = ctop$wmemiM_MDataValid ;
  assign WILL_FIRE_RL_mDataVConnect = ctop$wmemiM_MDataValid ;

  // rule RL_stbConnect_7
  assign CAN_FIRE_RL_stbConnect_7 = gbe0$wsiS1_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_7 = gbe0$wsiS1_SThreadBusy ;

  // rule RL_stbConnect_6
  assign CAN_FIRE_RL_stbConnect_6 = ctop$wsi_s_adc_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_6 = ctop$wsi_s_adc_SThreadBusy ;

  // rule RL_stbConnect_5
  assign CAN_FIRE_RL_stbConnect_5 = gbe0$wti_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_5 = gbe0$wti_s_SThreadBusy ;

  // rule RL_sDataConnect_5
  assign CAN_FIRE_RL_sDataConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_5 = 1'd1 ;

  // rule RL_sRespConnect_5
  assign CAN_FIRE_RL_sRespConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_5 = 1'd1 ;

  // rule RL_mFlagConnect_4
  assign CAN_FIRE_RL_mFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_4 = 1'd1 ;

  // rule RL_mFlagConnect_3
  assign CAN_FIRE_RL_mFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_3 = 1'd1 ;

  // rule RL_sFlagConnect_4
  assign CAN_FIRE_RL_sFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_4 = 1'd1 ;

  // rule RL_stbConnect_4
  assign CAN_FIRE_RL_stbConnect_4 = dram0$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_4 = dram0$wci_s_SThreadBusy ;

  // rule RL_sDataConnect_4
  assign CAN_FIRE_RL_sDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_4 = 1'd1 ;

  // rule RL_sRespConnect_4
  assign CAN_FIRE_RL_sRespConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_4 = 1'd1 ;

  // rule RL_sFlagConnect_3
  assign CAN_FIRE_RL_sFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_3 = 1'd1 ;

  // rule RL_sDataConnect_3
  assign CAN_FIRE_RL_sDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_3 = 1'd1 ;

  // rule RL_sRespConnect_3
  assign CAN_FIRE_RL_sRespConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_3 = 1'd1 ;

  // rule RL_mFlagConnect_2
  assign CAN_FIRE_RL_mFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_2 = 1'd1 ;

  // rule RL_sFlagConnect_2
  assign CAN_FIRE_RL_sFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_2 = 1'd1 ;

  // rule RL_sDataConnect_2
  assign CAN_FIRE_RL_sDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_2 = 1'd1 ;

  // rule RL_sRespConnect_2
  assign CAN_FIRE_RL_sRespConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_2 = 1'd1 ;

  // rule RL_mDataConnect_2
  assign CAN_FIRE_RL_mDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_2 = 1'd1 ;

  // rule RL_mCmdConnect_2
  assign CAN_FIRE_RL_mCmdConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_2 = 1'd1 ;

  // rule RL_mRstConnect_2
  assign CAN_FIRE_RL_mRstConnect_2 = ctop$wmemiM_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect_2 = ctop$wmemiM_MReset_n ;

  // rule RL_sdaConnect
  assign CAN_FIRE_RL_sdaConnect = dram0$wmemiS_SDataAccept ;
  assign WILL_FIRE_RL_sdaConnect = dram0$wmemiS_SDataAccept ;

  // rule RL_sRespLConnect
  assign CAN_FIRE_RL_sRespLConnect = dram0$wmemiS_SRespLast ;
  assign WILL_FIRE_RL_sRespLConnect = dram0$wmemiS_SRespLast ;

  // rule RL_reqConnect_4
  assign CAN_FIRE_RL_reqConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_4 = 1'd1 ;

  // rule RL_mBurstLConnect_2
  assign CAN_FIRE_RL_mBurstLConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_2 = 1'd1 ;

  // rule RL_mReqLConnect_2
  assign CAN_FIRE_RL_mReqLConnect_2 = ctop$wmemiM_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect_2 = ctop$wmemiM_MReqLast ;

  // rule RL_scaConnect
  assign CAN_FIRE_RL_scaConnect = dram0$wmemiS_SCmdAccept ;
  assign WILL_FIRE_RL_scaConnect = dram0$wmemiS_SCmdAccept ;

  // rule RL_reqConnect_5
  assign CAN_FIRE_RL_reqConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_5 = 1'd1 ;

  // rule RL_tcGbe0_send_time
  assign CAN_FIRE_RL_tcGbe0_send_time = 1'd1 ;
  assign WILL_FIRE_RL_tcGbe0_send_time = 1'd1 ;

  // rule RL_tcGbe0_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_tcGbe0_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_tcGbe0_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_reqConnect_3
  assign CAN_FIRE_RL_reqConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_3 = 1'd1 ;

  // rule RL_reqConnect_2
  assign CAN_FIRE_RL_reqConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_2 = 1'd1 ;

  // rule RL_infLed_clock_domain_crossing
  assign CAN_FIRE_RL_infLed_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_infLed_clock_domain_crossing = 1'd1 ;

  // rule RL_tie_off_inputs_1
  assign CAN_FIRE_RL_tie_off_inputs_1 = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs_1 = 1'd1 ;

  // rule RL_tie_off_inputs
  assign CAN_FIRE_RL_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs = 1'd1 ;

  // rule RL_connect_interrupt_do
  assign CAN_FIRE_RL_connect_interrupt_do = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_do = 1'd1 ;

  // rule RL_connect_interrupt_rdy_n
  assign CAN_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;

  // rule RL_connect_interrupt_1
  assign CAN_FIRE_RL_connect_interrupt_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_1 = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_5_connect
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect =
	     !pci0_pcie_ep$trn_tdst_rdy_n && fI2P$EMPTY_N ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;

  // rule RL_Prelude_inst_changeSpecialWires_5_every
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_every = 1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_5_every = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_4_downconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 =
	     fI2P$FULL_N && Prelude_inst_changeSpecialWires_4_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 ;

  // rule RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut =
	     i2pAF_sCrossedHeadWrapped$WGET == i2pAF_tail_wrapped &&
	     !i2pAF_sInReset$VAL &&
	     ctop$RDY_server_response_get ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;

  // rule RL_Prelude_inst_changeSpecialWires_4_downconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 =
	     i2pAF_head_wrapped != i2pAF_dCrossedTailWrapped$WGET &&
	     !i2pAF_dInReset$VAL &&
	     preEdge$CLK_VAL &&
	     fI2P$FULL_N &&
	     !Prelude_inst_changeSpecialWires_4_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ;

  // rule RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut =
	     p2iAF_head_wrapped != p2iAF_dCrossedTailWrapped$WGET &&
	     !p2iAF_dInReset$VAL &&
	     ctop$RDY_server_request_put ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;

  // rule RL_Prelude_inst_changeSpecialWires_1_upconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     p2iAF_sCrossedHeadWrapped_wget__73_EQ_p2iAF_ta_ETC___d179 &&
	     fP2I$EMPTY_N &&
	     Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // rule RL_Prelude_inst_changeSpecialWires_1_upconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     fP2I$EMPTY_N &&
	     (!fP2I$D_OUT[79] ||
	      p2iAF_sCrossedHeadWrapped_wget__73_EQ_p2iAF_ta_ETC___d179) &&
	     !Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;

  // rule RL_Prelude_inst_changeSpecialWires_connect
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect =
	     !pci0_pcie_ep$trn_rsrc_rdy_n && fP2I$FULL_N ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_connect =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;

  // rule RL_Prelude_inst_changeSpecialWires_every
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_every = 1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_every = 1'd1 ;

  // rule RL_i2pAF_dCrossedTailWrapped_clock_domain_crossing
  assign CAN_FIRE_RL_i2pAF_dCrossedTailWrapped_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_i2pAF_dCrossedTailWrapped_clock_domain_crossing = 1'd1 ;

  // rule RL_i2pAF_reset_tail
  assign CAN_FIRE_RL_i2pAF_reset_tail = i2pAF_sInReset$VAL ;
  assign WILL_FIRE_RL_i2pAF_reset_tail = i2pAF_sInReset$VAL ;

  // rule RL_i2pAF_sClear_update_tail
  assign CAN_FIRE_RL_i2pAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_i2pAF_sClear_update_tail = 1'b0 ;

  // rule RL_i2pAF_enq_update_tail
  assign CAN_FIRE_RL_i2pAF_enq_update_tail =
	     !i2pAF_sInReset$VAL &&
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;
  assign WILL_FIRE_RL_i2pAF_enq_update_tail =
	     CAN_FIRE_RL_i2pAF_enq_update_tail ;

  // rule RL_i2pAF_sCrossedHeadWrapped_clock_domain_crossing
  assign CAN_FIRE_RL_i2pAF_sCrossedHeadWrapped_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_i2pAF_sCrossedHeadWrapped_clock_domain_crossing = 1'd1 ;

  // rule RL_i2pAF_reset_head
  assign CAN_FIRE_RL_i2pAF_reset_head = i2pAF_dInReset$VAL ;
  assign WILL_FIRE_RL_i2pAF_reset_head = i2pAF_dInReset$VAL ;

  // rule RL_i2pAF_dClear_update_head
  assign CAN_FIRE_RL_i2pAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_i2pAF_dClear_update_head = 1'b0 ;

  // rule RL_i2pAF_deq_update_head
  assign CAN_FIRE_RL_i2pAF_deq_update_head =
	     !i2pAF_dInReset$VAL &&
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ;
  assign WILL_FIRE_RL_i2pAF_deq_update_head =
	     CAN_FIRE_RL_i2pAF_deq_update_head ;

  // rule RL_p2iAF_dCrossedTailWrapped_clock_domain_crossing
  assign CAN_FIRE_RL_p2iAF_dCrossedTailWrapped_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_p2iAF_dCrossedTailWrapped_clock_domain_crossing = 1'd1 ;

  // rule RL_p2iAF_reset_tail
  assign CAN_FIRE_RL_p2iAF_reset_tail = p2iAF_sInReset$VAL ;
  assign WILL_FIRE_RL_p2iAF_reset_tail = p2iAF_sInReset$VAL ;

  // rule RL_p2iAF_sClear_update_tail
  assign CAN_FIRE_RL_p2iAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_p2iAF_sClear_update_tail = 1'b0 ;

  // rule RL_p2iAF_enq_update_tail
  assign CAN_FIRE_RL_p2iAF_enq_update_tail =
	     !p2iAF_sInReset$VAL && p2iAF_enq_pw$whas ;
  assign WILL_FIRE_RL_p2iAF_enq_update_tail =
	     CAN_FIRE_RL_p2iAF_enq_update_tail ;

  // rule RL_p2iAF_sCrossedHeadWrapped_clock_domain_crossing
  assign CAN_FIRE_RL_p2iAF_sCrossedHeadWrapped_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_p2iAF_sCrossedHeadWrapped_clock_domain_crossing = 1'd1 ;

  // rule RL_p2iAF_reset_head
  assign CAN_FIRE_RL_p2iAF_reset_head = p2iAF_dInReset$VAL ;
  assign WILL_FIRE_RL_p2iAF_reset_head = p2iAF_dInReset$VAL ;

  // rule RL_p2iAF_dClear_update_head
  assign CAN_FIRE_RL_p2iAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_p2iAF_dClear_update_head = 1'b0 ;

  // rule RL_p2iAF_deq_update_head
  assign CAN_FIRE_RL_p2iAF_deq_update_head =
	     !p2iAF_dInReset$VAL &&
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;
  assign WILL_FIRE_RL_p2iAF_deq_update_head =
	     CAN_FIRE_RL_p2iAF_deq_update_head ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     pcie_irq_fifoAssert$dEMPTY_N && pcie_irq_rMSIEnabled &&
	     !pcie_irq_rInterrupting &&
	     pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt_done
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     pcie_irq_rMSIEnabled && pcie_irq_rInterrupting &&
	     !pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // rule RL_connect_interrupt_msienable
  assign CAN_FIRE_RL_connect_interrupt_msienable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_msienable = 1'd1 ;

  // rule RL_pcie_irq_rMMEnabled_clock_domain_crossing
  assign CAN_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing = 1'd1 ;

  // rule RL_connect_interrupt_mmenable
  assign CAN_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;

  // rule RL_write_pciDevice
  assign CAN_FIRE_RL_write_pciDevice = pciDevice$sRDY ;
  assign WILL_FIRE_RL_write_pciDevice = pciDevice$sRDY ;

  // rule RL_pci0_connect_trn_rx
  assign CAN_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;

  // rule RL_pci0_connect_trn_tx
  assign CAN_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !fP2I$D_OUT[79] ;
  assign MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 &&
	     i2pS[135:128] != 8'd0 ;
  assign MUX_p2iS$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     fP2I$D_OUT[79] ;
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 =
	     { 1'd1, fP2I$D_OUT } ;
  assign MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__VAL_1 =
	     { 2'd2, i2pS[151:144], i2pS[135:128], i2pS[63:0] } ;
  assign MUX_fI2P$enq_1__VAL_1 =
	     (i2pS[135:128] == 8'd0) ?
	       { i2pS[152:136], i2pS[127:64] } :
	       { i2pS[152], 1'd0, i2pS[150:136], i2pS[127:64] } ;
  assign MUX_p2iS$write_1__VAL_1 =
	     { fP2I$D_OUT[80:72], val_be__h7063, val_data__h7064 } ;
  assign MUX_p2iS$write_1__VAL_2 =
	     { Prelude_inst_changeSpecialWires_1_rg[80],
	       fP2I$D_OUT[79],
	       Prelude_inst_changeSpecialWires_1_rg[78:72],
	       wOut_be__h6864,
	       wOut_data__h6865 } ;

  // inlined wires
  assign pci0_pwTrnTx$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;
  assign pci0_pwTrnRx$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign pcie_irq_wInterruptRdyN$wget = pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pcie_irq_wInterruptDo$wget = pci0_pcie_ep$cfg_interrupt_do ;
  assign p2iAF_deq_pw$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;
  assign pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign p2iAF_enq_pw$whas =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;
  assign p2iAF_sClear_pw$whas = 1'b0 ;
  assign p2iAF_dClear_pw$whas = 1'b0 ;
  assign p2iAF_deq_happened$whas = 1'b0 ;
  assign i2pAF_enq_pw$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;
  assign i2pAF_sClear_pw$whas = 1'b0 ;
  assign i2pAF_deq_pw$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ;
  assign i2pAF_dClear_pw$whas = 1'b0 ;
  assign i2pAF_deq_happened$whas = 1'b0 ;
  assign tcGbe0_wti_sThreadBusy_pw$whas = gbe0$wti_s_SThreadBusy ;

  // register Prelude_inst_changeSpecialWires_1_rg
  assign Prelude_inst_changeSpecialWires_1_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_1_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // register Prelude_inst_changeSpecialWires_4_rg
  assign Prelude_inst_changeSpecialWires_4_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_4_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_4_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 &&
	     i2pS[135:128] != 8'd0 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 ;

  // register i2pAF_head_wrapped
  assign i2pAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_i2pAF_deq_update_head && !i2pAF_head_wrapped ;
  assign i2pAF_head_wrapped$EN =
	     WILL_FIRE_RL_i2pAF_deq_update_head || i2pAF_dInReset$VAL ;

  // register i2pAF_tail_wrapped
  assign i2pAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_i2pAF_enq_update_tail && !i2pAF_tail_wrapped ;
  assign i2pAF_tail_wrapped$EN =
	     WILL_FIRE_RL_i2pAF_enq_update_tail || i2pAF_sInReset$VAL ;

  // register i2pS
  assign i2pS$D_IN = ctop$server_response_get ;
  assign i2pS$EN =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;

  // register p2iAF_head_wrapped
  assign p2iAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_p2iAF_deq_update_head && !p2iAF_head_wrapped ;
  assign p2iAF_head_wrapped$EN =
	     WILL_FIRE_RL_p2iAF_deq_update_head || p2iAF_dInReset$VAL ;

  // register p2iAF_tail_wrapped
  assign p2iAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_p2iAF_enq_update_tail && !p2iAF_tail_wrapped ;
  assign p2iAF_tail_wrapped$EN =
	     WILL_FIRE_RL_p2iAF_enq_update_tail || p2iAF_sInReset$VAL ;

  // register p2iS
  assign p2iS$D_IN =
	     MUX_p2iS$write_1__SEL_1 ?
	       MUX_p2iS$write_1__VAL_1 :
	       MUX_p2iS$write_1__VAL_2 ;
  assign p2iS$EN = p2iAF_enq_pw$whas ;

  // register pcie_irq_rInterruptDi
  assign pcie_irq_rInterruptDi$D_IN = pcie_irq_fifoAssert$dD_OUT ;
  assign pcie_irq_rInterruptDi$EN =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rInterruptN
  assign pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;
  assign pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pcie_irq_rInterrupting
  assign pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rMMEnabled
  assign pcie_irq_rMMEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pcie_irq_rMSIEnabled
  assign pcie_irq_rMSIEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // register tcGbe0_wti_nowReq
  assign tcGbe0_wti_nowReq$D_IN = { 3'd1, tcGbe0_now$dD_OUT } ;
  assign tcGbe0_wti_nowReq$EN = 1'd1 ;

  // register tcGbe0_wti_sThreadBusy_d
  assign tcGbe0_wti_sThreadBusy_d$D_IN = gbe0$wti_s_SThreadBusy ;
  assign tcGbe0_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule ctop
  assign ctop$EN_server_request_put =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_mkConnectionGetPut ;
  assign ctop$EN_server_response_get =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_mkConnectionGetPut ;
  assign ctop$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign ctop$server_request_put = p2iS ;
  assign ctop$wci_m_0_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop$wci_m_0_SResp = 2'd0 ;
  assign ctop$wci_m_0_SFlag = 2'b0 ;
  assign ctop$wci_m_1_SData = flash0$wci_s_resp[31:0] ;
  assign ctop$wci_m_1_SFlag = flash0$wci_s_SFlag ;
  assign ctop$wci_m_1_SResp = flash0$wci_s_resp[33:32] ;
  assign ctop$wci_m_2_SData = gbe0$wci_rx_resp[31:0] ;
  assign ctop$wci_m_2_SFlag = gbe0$wci_rx_SFlag ;
  assign ctop$wci_m_2_SResp = gbe0$wci_rx_resp[33:32] ;
  assign ctop$wci_m_3_SData = gbe0$wci_tx_resp[31:0] ;
  assign ctop$wci_m_3_SFlag = gbe0$wci_tx_SFlag ;
  assign ctop$wci_m_3_SResp = gbe0$wci_tx_resp[33:32] ;
  assign ctop$wci_m_4_SData = dram0$wci_s_resp[31:0] ;
  assign ctop$wci_m_4_SFlag = dram0$wci_s_SFlag ;
  assign ctop$wci_m_4_SResp = dram0$wci_s_resp[33:32] ;
  assign ctop$wmemiM_SData = dram0$wmemiS_SData ;
  assign ctop$wmemiM_SResp = dram0$wmemiS_SResp ;
  assign ctop$wsi_s_adc_MBurstLength = gbe0$wsiM1_MBurstLength ;
  assign ctop$wsi_s_adc_MByteEn = gbe0$wsiM1_MByteEn ;
  assign ctop$wsi_s_adc_MCmd = gbe0$wsiM1_MCmd ;
  assign ctop$wsi_s_adc_MData = gbe0$wsiM1_MData ;
  assign ctop$wsi_s_adc_MReqInfo = gbe0$wsiM1_MReqInfo ;
  assign ctop$wci_m_0_SThreadBusy = 1'd1 ;
  assign ctop$wci_m_1_SThreadBusy = flash0$wci_s_SThreadBusy ;
  assign ctop$wci_m_2_SThreadBusy = gbe0$wci_rx_SThreadBusy ;
  assign ctop$wci_m_3_SThreadBusy = gbe0$wci_tx_SThreadBusy ;
  assign ctop$wci_m_4_SThreadBusy = dram0$wci_s_SThreadBusy ;
  assign ctop$wmemiM_SCmdAccept = dram0$wmemiS_SCmdAccept ;
  assign ctop$wmemiM_SDataAccept = dram0$wmemiS_SDataAccept ;
  assign ctop$wmemiM_SRespLast = dram0$wmemiS_SRespLast ;
  assign ctop$wsi_m_dac_SReset_n = gbe0$wsiS1_SReset_n ;
  assign ctop$wsi_m_dac_SThreadBusy = gbe0$wsiS1_SThreadBusy ;
  assign ctop$wsi_s_adc_MBurstPrecise = gbe0$wsiM1_MBurstPrecise ;
  assign ctop$wsi_s_adc_MReqLast = gbe0$wsiM1_MReqLast ;
  assign ctop$wsi_s_adc_MReset_n = gbe0$wsiM1_MReset_n ;
  assign ctop$switch_x = 3'h0 ;

  // submodule dram0
  assign dram0$wci_s_MFlag = ctop$wci_m_4_MFlag ;
  assign dram0$wci_s_req =
	     { ctop$wci_m_4_MCmd,
	       ctop$wci_m_4_MAddrSpace,
	       ctop$wci_m_4_MByteEn,
	       ctop$wci_m_4_MAddr,
	       ctop$wci_m_4_MData } ;
  assign dram0$wmemiS_MAddr = ctop$wmemiM_MAddr ;
  assign dram0$wmemiS_MBurstLength = ctop$wmemiM_MBurstLength ;
  assign dram0$wmemiS_MCmd = ctop$wmemiM_MCmd ;
  assign dram0$wmemiS_MData = ctop$wmemiM_MData ;
  assign dram0$wmemiS_MDataByteEn = ctop$wmemiM_MDataByteEn ;
  assign dram0$wmemiS_MDataLast = ctop$wmemiM_MDataLast ;
  assign dram0$wmemiS_MDataValid = ctop$wmemiM_MDataValid ;
  assign dram0$wmemiS_MReset_n = ctop$wmemiM_MReset_n ;
  assign dram0$wmemiS_MReqLast = ctop$wmemiM_MReqLast ;

  // submodule fI2P
  assign fI2P$D_IN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ?
	       MUX_fI2P$enq_1__VAL_1 :
	       Prelude_inst_changeSpecialWires_4_rg[80:0] ;
  assign fI2P$DEQ = CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;
  assign fI2P$ENQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect1 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_4_downconv_connect2 ;
  assign fI2P$CLR = 1'b0 ;

  // submodule fP2I
  assign fP2I$D_IN =
	     { !pci0_pcie_ep$trn_rsof_n,
	       !pci0_pcie_ep$trn_reof_n,
	       ~pci0_pcie_ep$trn_rbar_hit_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       pci0_pcie_ep$trn_rd } ;
  assign fP2I$DEQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;
  assign fP2I$ENQ = CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign fP2I$CLR = 1'b0 ;

  // submodule flash0
  assign flash0$flash_fwait_i = flash_fwait_i ;
  assign flash0$wci_s_MFlag = ctop$wci_m_1_MFlag ;
  assign flash0$wci_s_req =
	     { ctop$wci_m_1_MCmd,
	       ctop$wci_m_1_MAddrSpace,
	       ctop$wci_m_1_MByteEn,
	       ctop$wci_m_1_MAddr,
	       ctop$wci_m_1_MData } ;

  // submodule gbe0
  assign gbe0$gmii_rx_dv_i = gmii_rx_dv_i ;
  assign gbe0$gmii_rx_er_i = gmii_rx_er_i ;
  assign gbe0$gmii_rxd_i = gmii_rxd_i ;
  assign gbe0$wci_rx_MFlag = ctop$wci_m_2_MFlag ;
  assign gbe0$wci_tx_MFlag = ctop$wci_m_3_MFlag ;
  assign gbe0$wci_rx_req =
	     { ctop$wci_m_2_MCmd,
	       ctop$wci_m_2_MAddrSpace,
	       ctop$wci_m_2_MByteEn,
	       ctop$wci_m_2_MAddr,
	       ctop$wci_m_2_MData } ;
  assign gbe0$wci_tx_req =
	     { ctop$wci_m_3_MCmd,
	       ctop$wci_m_3_MAddrSpace,
	       ctop$wci_m_3_MByteEn,
	       ctop$wci_m_3_MAddr,
	       ctop$wci_m_3_MData } ;
  assign gbe0$wsiS1_MBurstLength = ctop$wsi_m_dac_MBurstLength ;
  assign gbe0$wsiS1_MByteEn = ctop$wsi_m_dac_MByteEn ;
  assign gbe0$wsiS1_MCmd = ctop$wsi_m_dac_MCmd ;
  assign gbe0$wsiS1_MData = ctop$wsi_m_dac_MData ;
  assign gbe0$wsiS1_MReqInfo = ctop$wsi_m_dac_MReqInfo ;
  assign gbe0$wti_s_req =
	     tcGbe0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       tcGbe0_wti_nowReq ;
  assign gbe0$wsiM1_SReset_n = ctop$wsi_s_adc_SReset_n ;
  assign gbe0$wsiM1_SThreadBusy = ctop$wsi_s_adc_SThreadBusy ;
  assign gbe0$wsiS1_MBurstPrecise = ctop$wsi_m_dac_MBurstPrecise ;
  assign gbe0$wsiS1_MReqLast = ctop$wsi_m_dac_MReqLast ;
  assign gbe0$wsiS1_MReset_n = ctop$wsi_m_dac_MReset_n ;

  // submodule i2pAF_dCrossedTailWrapped
  assign i2pAF_dCrossedTailWrapped$WVAL = i2pAF_tail_wrapped ;

  // submodule i2pAF_sCrossedHeadWrapped
  assign i2pAF_sCrossedHeadWrapped$WVAL = i2pAF_head_wrapped ;

  // submodule infLed
  assign infLed$WVAL = ctop$led ;

  // submodule p2iAF_dCrossedTailWrapped
  assign p2iAF_dCrossedTailWrapped$WVAL = p2iAF_tail_wrapped ;

  // submodule p2iAF_sCrossedHeadWrapped
  assign p2iAF_sCrossedHeadWrapped$WVAL = p2iAF_head_wrapped ;

  // submodule pci0_pcie_ep
  assign pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_di = pcie_irq_rInterruptDi ;
  assign pci0_pcie_ep$cfg_interrupt_n = pcie_irq_rInterruptN ;
  assign pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_turnoff_ok_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pci0_pcie_ep$trn_rdst_rdy_n =
	     !CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign pci0_pcie_ep$trn_rnp_ok_n = 1'd0 ;
  assign pci0_pcie_ep$trn_tcfg_gnt_n = 1'd0 ;
  assign pci0_pcie_ep$trn_td = fI2P$D_OUT[63:0] ;
  assign pci0_pcie_ep$trn_teof_n = !fI2P$D_OUT[79] ;
  assign pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pci0_pcie_ep$trn_trem_n = fI2P$D_OUT[71:64] != 8'd255 ;
  assign pci0_pcie_ep$trn_tsof_n = !fI2P$D_OUT[80] ;
  assign pci0_pcie_ep$trn_tsrc_dsc_n = 1'd1 ;
  assign pci0_pcie_ep$trn_tsrc_rdy_n =
	     !CAN_FIRE_RL_Prelude_inst_changeSpecialWires_5_connect ;
  assign pci0_pcie_ep$trn_tstr_n = 1'd1 ;
  assign pci0_pcie_ep$trn_fc_sel = 3'h0 ;
  assign pci0_pcie_ep$pl_directed_link_auton = 1'b0 ;
  assign pci0_pcie_ep$pl_directed_link_change = 2'h0 ;
  assign pci0_pcie_ep$pl_directed_link_speed = 1'b0 ;
  assign pci0_pcie_ep$pl_directed_link_width = 2'h0 ;
  assign pci0_pcie_ep$pl_upstream_prefer_deemph = 1'b0 ;

  // submodule pciDevice
  assign pciDevice$sD_IN =
	     { pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_device_number,
	       pci0_pcie_ep$cfg_function_number } ;
  assign pciDevice$sEN = pciDevice$sRDY ;

  // submodule pcie_irq_fifoAssert
  assign pcie_irq_fifoAssert$dDEQ =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;
  assign pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pcie_irq_fifoAssert$sENQ = 1'b0 ;

  // submodule pcie_irq_rMMEnabled_1
  assign pcie_irq_rMMEnabled_1$WVAL = pcie_irq_rMMEnabled ;

  // submodule tcGbe0_now
  assign tcGbe0_now$sD_IN = ctop$cpNow ;
  assign tcGbe0_now$sEN = tcGbe0_now$sRDY ;

  // remaining internal signals
  assign p2iAF_sCrossedHeadWrapped_wget__73_EQ_p2iAF_ta_ETC___d179 =
	     p2iAF_sCrossedHeadWrapped$WGET == p2iAF_tail_wrapped &&
	     !p2iAF_sInReset$VAL &&
	     preEdge$CLK_VAL ;
  assign val_be__h7063 = { fP2I$D_OUT[71:64], 8'd0 } ;
  assign val_data__h7064 = { fP2I$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign wOut_be__h6864 =
	     { Prelude_inst_changeSpecialWires_1_rg[71:64],
	       fP2I$D_OUT[71:64] } ;
  assign wOut_data__h6865 =
	     { Prelude_inst_changeSpecialWires_1_rg[63:0],
	       fP2I$D_OUT[63:0] } ;

  // handling of inlined registers

  always@(posedge sys1_clk$O)
  begin
    if (!sys1_rst$OUT_RST_N)
      begin
        tcGbe0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	tcGbe0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (tcGbe0_wti_nowReq$EN)
	  tcGbe0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY tcGbe0_wti_nowReq$D_IN;
	if (tcGbe0_wti_sThreadBusy_d$EN)
	  tcGbe0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      tcGbe0_wti_sThreadBusy_d$D_IN;
      end
  end

  always@(posedge pci0_pcie_ep$trn_clk)
  begin
    if (!trn_rst$OUT_RST_N)
      begin
        Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	Prelude_inst_changeSpecialWires_4_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (Prelude_inst_changeSpecialWires_1_rg$EN)
	  Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_1_rg$D_IN;
	if (Prelude_inst_changeSpecialWires_4_rg$EN)
	  Prelude_inst_changeSpecialWires_4_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_4_rg$D_IN;
	if (i2pAF_head_wrapped$EN)
	  i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY i2pAF_head_wrapped$D_IN;
	if (p2iAF_tail_wrapped$EN)
	  p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY p2iAF_tail_wrapped$D_IN;
	if (pcie_irq_rInterruptDi$EN)
	  pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptDi$D_IN;
	if (pcie_irq_rInterruptN$EN)
	  pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptN$D_IN;
	if (pcie_irq_rInterrupting$EN)
	  pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterrupting$D_IN;
      end
    if (p2iS$EN) p2iS <= `BSV_ASSIGNMENT_DELAY p2iS$D_IN;
    if (pcie_irq_rMMEnabled$EN)
      pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMMEnabled$D_IN;
    if (pcie_irq_rMSIEnabled$EN)
      pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMSIEnabled$D_IN;
  end

  always@(posedge pci0_pcie_ep$trn2_clk)
  begin
    if (!trn2_rst$OUT_RST_N)
      begin
        i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (i2pAF_tail_wrapped$EN)
	  i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY i2pAF_tail_wrapped$D_IN;
	if (p2iAF_head_wrapped$EN)
	  p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY p2iAF_head_wrapped$D_IN;
      end
    if (i2pS$EN) i2pS <= `BSV_ASSIGNMENT_DELAY i2pS$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    Prelude_inst_changeSpecialWires_1_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    Prelude_inst_changeSpecialWires_4_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    i2pAF_head_wrapped = 1'h0;
    i2pAF_tail_wrapped = 1'h0;
    i2pS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p2iAF_head_wrapped = 1'h0;
    p2iAF_tail_wrapped = 1'h0;
    p2iS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcie_irq_rInterruptDi = 8'hAA;
    pcie_irq_rInterruptN = 1'h0;
    pcie_irq_rInterrupting = 1'h0;
    pcie_irq_rMMEnabled = 3'h2;
    pcie_irq_rMSIEnabled = 1'h0;
    tcGbe0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    tcGbe0_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop

