//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Mar  2 13:59:29 EST 2012
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGMACTB(CLK,
		RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [95 : 0] biasWorker_wsiM_extStatusW$wget,
		biasWorker_wsiS_extStatusW$wget,
		wsiM_extStatusW$wget,
		wsiS_extStatusW$wget;
  wire [71 : 0] biasWorker_wci_wslv_wciReq$wget, wci_reqF_x_wire$wget;
  wire [60 : 0] biasWorker_wsiM_reqFifo_x_wire$wget,
		biasWorker_wsiS_wsiReq$wget,
		wsiM_reqFifo_x_wire$wget,
		wsiS_wsiReq$wget;
  wire [33 : 0] biasWorker_wci_wslv_respF_x_wire$wget, wci_wciResponse$wget;
  wire [31 : 0] biasWorker_wci_wci_Es_mAddr_w$wget,
		biasWorker_wci_wci_Es_mData_w$wget,
		biasWorker_wsi_Es_mData_w$wget,
		wci_wci_Em_respData_w$wget,
		wsi_Es_mData_w$wget;
  wire [11 : 0] biasWorker_wsi_Es_mBurstLength_w$wget,
		wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] biasWorker_wsi_Es_mReqInfo_w$wget, wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] biasWorker_wci_wci_Es_mByteEn_w$wget,
	       biasWorker_wsi_Es_mByteEn_w$wget,
	       wsi_Es_mByteEn_w$wget;
  wire [2 : 0] biasWorker_wci_wci_Es_mCmd_w$wget,
	       biasWorker_wci_wslv_wEdge$wget,
	       biasWorker_wsi_Es_mCmd_w$wget,
	       wsi_Es_mCmd_w$wget;
  wire [1 : 0] wci_wci_Em_resp_w$wget;
  wire badDataCnt_decAction$whas,
       badDataCnt_incAction$whas,
       badMesgCnt_decAction$whas,
       badMesgCnt_incAction$whas,
       biasWorker_wci_wci_Es_mAddrSpace_w$wget,
       biasWorker_wci_wci_Es_mAddrSpace_w$whas,
       biasWorker_wci_wci_Es_mAddr_w$whas,
       biasWorker_wci_wci_Es_mByteEn_w$whas,
       biasWorker_wci_wci_Es_mCmd_w$whas,
       biasWorker_wci_wci_Es_mData_w$whas,
       biasWorker_wci_wslv_ctlAckReg_1$wget,
       biasWorker_wci_wslv_ctlAckReg_1$whas,
       biasWorker_wci_wslv_reqF_r_clr$whas,
       biasWorker_wci_wslv_reqF_r_deq$whas,
       biasWorker_wci_wslv_reqF_r_enq$whas,
       biasWorker_wci_wslv_respF_dequeueing$whas,
       biasWorker_wci_wslv_respF_enqueueing$whas,
       biasWorker_wci_wslv_respF_x_wire$whas,
       biasWorker_wci_wslv_sFlagReg_1$wget,
       biasWorker_wci_wslv_sFlagReg_1$whas,
       biasWorker_wci_wslv_sThreadBusy_pw$whas,
       biasWorker_wci_wslv_wEdge$whas,
       biasWorker_wci_wslv_wciReq$whas,
       biasWorker_wci_wslv_wci_cfrd_pw$whas,
       biasWorker_wci_wslv_wci_cfwr_pw$whas,
       biasWorker_wci_wslv_wci_ctrl_pw$whas,
       biasWorker_wsiM_operateD_1$wget,
       biasWorker_wsiM_operateD_1$whas,
       biasWorker_wsiM_peerIsReady_1$wget,
       biasWorker_wsiM_peerIsReady_1$whas,
       biasWorker_wsiM_reqFifo_dequeueing$whas,
       biasWorker_wsiM_reqFifo_enqueueing$whas,
       biasWorker_wsiM_reqFifo_x_wire$whas,
       biasWorker_wsiM_sThreadBusy_pw$whas,
       biasWorker_wsiS_operateD_1$wget,
       biasWorker_wsiS_operateD_1$whas,
       biasWorker_wsiS_peerIsReady_1$wget,
       biasWorker_wsiS_peerIsReady_1$whas,
       biasWorker_wsiS_reqFifo_doResetClr$whas,
       biasWorker_wsiS_reqFifo_doResetDeq$whas,
       biasWorker_wsiS_reqFifo_doResetEnq$whas,
       biasWorker_wsiS_reqFifo_r_clr$whas,
       biasWorker_wsiS_reqFifo_r_deq$whas,
       biasWorker_wsiS_reqFifo_r_enq$whas,
       biasWorker_wsiS_sThreadBusy_dw$wget,
       biasWorker_wsiS_sThreadBusy_dw$whas,
       biasWorker_wsiS_wsiReq$whas,
       biasWorker_wsi_Es_mBurstLength_w$whas,
       biasWorker_wsi_Es_mBurstPrecise_w$whas,
       biasWorker_wsi_Es_mByteEn_w$whas,
       biasWorker_wsi_Es_mCmd_w$whas,
       biasWorker_wsi_Es_mDataInfo_w$whas,
       biasWorker_wsi_Es_mData_w$whas,
       biasWorker_wsi_Es_mReqInfo_w$whas,
       biasWorker_wsi_Es_mReqLast_w$whas,
       goodDataCnt_decAction$whas,
       goodDataCnt_incAction$whas,
       goodMesgCnt_decAction$whas,
       goodMesgCnt_incAction$whas,
       wciSeqFsm_abort$wget,
       wciSeqFsm_abort$whas,
       wciSeqFsm_start_reg_1_1$wget,
       wciSeqFsm_start_reg_1_1$whas,
       wciSeqFsm_start_wire$wget,
       wciSeqFsm_start_wire$whas,
       wciSeqFsm_state_fired_1$wget,
       wciSeqFsm_state_fired_1$whas,
       wciSeqFsm_state_overlap_pw$whas,
       wciSeqFsm_state_set_pw$whas,
       wci_reqF_dequeueing$whas,
       wci_reqF_enqueueing$whas,
       wci_reqF_x_wire$whas,
       wci_sThreadBusy_pw$whas,
       wci_sfCapClear_1$wget,
       wci_sfCapClear_1$whas,
       wci_sfCapSet_1$wget,
       wci_sfCapSet_1$whas,
       wci_wciResponse$whas,
       wci_wci_Em_respData_w$whas,
       wci_wci_Em_resp_w$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas;

  // register badDataCnt_value
  reg [31 : 0] badDataCnt_value;
  wire [31 : 0] badDataCnt_value$D_IN;
  wire badDataCnt_value$EN;

  // register badMesgCnt_value
  reg [31 : 0] badMesgCnt_value;
  wire [31 : 0] badMesgCnt_value$D_IN;
  wire badMesgCnt_value$EN;

  // register biasWorker_biasValue
  reg [31 : 0] biasWorker_biasValue;
  wire [31 : 0] biasWorker_biasValue$D_IN;
  wire biasWorker_biasValue$EN;

  // register biasWorker_controlReg
  reg [31 : 0] biasWorker_controlReg;
  wire [31 : 0] biasWorker_controlReg$D_IN;
  wire biasWorker_controlReg$EN;

  // register biasWorker_wci_wslv_cEdge
  reg [2 : 0] biasWorker_wci_wslv_cEdge;
  wire [2 : 0] biasWorker_wci_wslv_cEdge$D_IN;
  wire biasWorker_wci_wslv_cEdge$EN;

  // register biasWorker_wci_wslv_cState
  reg [2 : 0] biasWorker_wci_wslv_cState;
  wire [2 : 0] biasWorker_wci_wslv_cState$D_IN;
  wire biasWorker_wci_wslv_cState$EN;

  // register biasWorker_wci_wslv_ctlAckReg
  reg biasWorker_wci_wslv_ctlAckReg;
  wire biasWorker_wci_wslv_ctlAckReg$D_IN, biasWorker_wci_wslv_ctlAckReg$EN;

  // register biasWorker_wci_wslv_ctlOpActive
  reg biasWorker_wci_wslv_ctlOpActive;
  wire biasWorker_wci_wslv_ctlOpActive$D_IN,
       biasWorker_wci_wslv_ctlOpActive$EN;

  // register biasWorker_wci_wslv_illegalEdge
  reg biasWorker_wci_wslv_illegalEdge;
  wire biasWorker_wci_wslv_illegalEdge$D_IN,
       biasWorker_wci_wslv_illegalEdge$EN;

  // register biasWorker_wci_wslv_isReset_isInReset
  reg biasWorker_wci_wslv_isReset_isInReset;
  wire biasWorker_wci_wslv_isReset_isInReset$D_IN,
       biasWorker_wci_wslv_isReset_isInReset$EN;

  // register biasWorker_wci_wslv_nState
  reg [2 : 0] biasWorker_wci_wslv_nState;
  reg [2 : 0] biasWorker_wci_wslv_nState$D_IN;
  wire biasWorker_wci_wslv_nState$EN;

  // register biasWorker_wci_wslv_reqF_countReg
  reg [1 : 0] biasWorker_wci_wslv_reqF_countReg;
  wire [1 : 0] biasWorker_wci_wslv_reqF_countReg$D_IN;
  wire biasWorker_wci_wslv_reqF_countReg$EN;

  // register biasWorker_wci_wslv_respF_c_r
  reg [1 : 0] biasWorker_wci_wslv_respF_c_r;
  wire [1 : 0] biasWorker_wci_wslv_respF_c_r$D_IN;
  wire biasWorker_wci_wslv_respF_c_r$EN;

  // register biasWorker_wci_wslv_respF_q_0
  reg [33 : 0] biasWorker_wci_wslv_respF_q_0;
  reg [33 : 0] biasWorker_wci_wslv_respF_q_0$D_IN;
  wire biasWorker_wci_wslv_respF_q_0$EN;

  // register biasWorker_wci_wslv_respF_q_1
  reg [33 : 0] biasWorker_wci_wslv_respF_q_1;
  reg [33 : 0] biasWorker_wci_wslv_respF_q_1$D_IN;
  wire biasWorker_wci_wslv_respF_q_1$EN;

  // register biasWorker_wci_wslv_sFlagReg
  reg biasWorker_wci_wslv_sFlagReg;
  wire biasWorker_wci_wslv_sFlagReg$D_IN, biasWorker_wci_wslv_sFlagReg$EN;

  // register biasWorker_wci_wslv_sThreadBusy_d
  reg biasWorker_wci_wslv_sThreadBusy_d;
  wire biasWorker_wci_wslv_sThreadBusy_d$D_IN,
       biasWorker_wci_wslv_sThreadBusy_d$EN;

  // register biasWorker_wsiM_burstKind
  reg [1 : 0] biasWorker_wsiM_burstKind;
  wire [1 : 0] biasWorker_wsiM_burstKind$D_IN;
  wire biasWorker_wsiM_burstKind$EN;

  // register biasWorker_wsiM_errorSticky
  reg biasWorker_wsiM_errorSticky;
  wire biasWorker_wsiM_errorSticky$D_IN, biasWorker_wsiM_errorSticky$EN;

  // register biasWorker_wsiM_iMesgCount
  reg [31 : 0] biasWorker_wsiM_iMesgCount;
  wire [31 : 0] biasWorker_wsiM_iMesgCount$D_IN;
  wire biasWorker_wsiM_iMesgCount$EN;

  // register biasWorker_wsiM_isReset_isInReset
  reg biasWorker_wsiM_isReset_isInReset;
  wire biasWorker_wsiM_isReset_isInReset$D_IN,
       biasWorker_wsiM_isReset_isInReset$EN;

  // register biasWorker_wsiM_operateD
  reg biasWorker_wsiM_operateD;
  wire biasWorker_wsiM_operateD$D_IN, biasWorker_wsiM_operateD$EN;

  // register biasWorker_wsiM_pMesgCount
  reg [31 : 0] biasWorker_wsiM_pMesgCount;
  wire [31 : 0] biasWorker_wsiM_pMesgCount$D_IN;
  wire biasWorker_wsiM_pMesgCount$EN;

  // register biasWorker_wsiM_peerIsReady
  reg biasWorker_wsiM_peerIsReady;
  wire biasWorker_wsiM_peerIsReady$D_IN, biasWorker_wsiM_peerIsReady$EN;

  // register biasWorker_wsiM_reqFifo_c_r
  reg [1 : 0] biasWorker_wsiM_reqFifo_c_r;
  wire [1 : 0] biasWorker_wsiM_reqFifo_c_r$D_IN;
  wire biasWorker_wsiM_reqFifo_c_r$EN;

  // register biasWorker_wsiM_reqFifo_q_0
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_0;
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_0$D_IN;
  wire biasWorker_wsiM_reqFifo_q_0$EN;

  // register biasWorker_wsiM_reqFifo_q_1
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_1;
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_1$D_IN;
  wire biasWorker_wsiM_reqFifo_q_1$EN;

  // register biasWorker_wsiM_sThreadBusy_d
  reg biasWorker_wsiM_sThreadBusy_d;
  wire biasWorker_wsiM_sThreadBusy_d$D_IN, biasWorker_wsiM_sThreadBusy_d$EN;

  // register biasWorker_wsiM_statusR
  reg [7 : 0] biasWorker_wsiM_statusR;
  wire [7 : 0] biasWorker_wsiM_statusR$D_IN;
  wire biasWorker_wsiM_statusR$EN;

  // register biasWorker_wsiM_tBusyCount
  reg [31 : 0] biasWorker_wsiM_tBusyCount;
  wire [31 : 0] biasWorker_wsiM_tBusyCount$D_IN;
  wire biasWorker_wsiM_tBusyCount$EN;

  // register biasWorker_wsiM_trafficSticky
  reg biasWorker_wsiM_trafficSticky;
  wire biasWorker_wsiM_trafficSticky$D_IN, biasWorker_wsiM_trafficSticky$EN;

  // register biasWorker_wsiS_burstKind
  reg [1 : 0] biasWorker_wsiS_burstKind;
  wire [1 : 0] biasWorker_wsiS_burstKind$D_IN;
  wire biasWorker_wsiS_burstKind$EN;

  // register biasWorker_wsiS_errorSticky
  reg biasWorker_wsiS_errorSticky;
  wire biasWorker_wsiS_errorSticky$D_IN, biasWorker_wsiS_errorSticky$EN;

  // register biasWorker_wsiS_iMesgCount
  reg [31 : 0] biasWorker_wsiS_iMesgCount;
  wire [31 : 0] biasWorker_wsiS_iMesgCount$D_IN;
  wire biasWorker_wsiS_iMesgCount$EN;

  // register biasWorker_wsiS_isReset_isInReset
  reg biasWorker_wsiS_isReset_isInReset;
  wire biasWorker_wsiS_isReset_isInReset$D_IN,
       biasWorker_wsiS_isReset_isInReset$EN;

  // register biasWorker_wsiS_mesgWordLength
  reg [11 : 0] biasWorker_wsiS_mesgWordLength;
  wire [11 : 0] biasWorker_wsiS_mesgWordLength$D_IN;
  wire biasWorker_wsiS_mesgWordLength$EN;

  // register biasWorker_wsiS_operateD
  reg biasWorker_wsiS_operateD;
  wire biasWorker_wsiS_operateD$D_IN, biasWorker_wsiS_operateD$EN;

  // register biasWorker_wsiS_pMesgCount
  reg [31 : 0] biasWorker_wsiS_pMesgCount;
  wire [31 : 0] biasWorker_wsiS_pMesgCount$D_IN;
  wire biasWorker_wsiS_pMesgCount$EN;

  // register biasWorker_wsiS_peerIsReady
  reg biasWorker_wsiS_peerIsReady;
  wire biasWorker_wsiS_peerIsReady$D_IN, biasWorker_wsiS_peerIsReady$EN;

  // register biasWorker_wsiS_reqFifo_countReg
  reg [1 : 0] biasWorker_wsiS_reqFifo_countReg;
  wire [1 : 0] biasWorker_wsiS_reqFifo_countReg$D_IN;
  wire biasWorker_wsiS_reqFifo_countReg$EN;

  // register biasWorker_wsiS_reqFifo_levelsValid
  reg biasWorker_wsiS_reqFifo_levelsValid;
  wire biasWorker_wsiS_reqFifo_levelsValid$D_IN,
       biasWorker_wsiS_reqFifo_levelsValid$EN;

  // register biasWorker_wsiS_statusR
  reg [7 : 0] biasWorker_wsiS_statusR;
  wire [7 : 0] biasWorker_wsiS_statusR$D_IN;
  wire biasWorker_wsiS_statusR$EN;

  // register biasWorker_wsiS_tBusyCount
  reg [31 : 0] biasWorker_wsiS_tBusyCount;
  wire [31 : 0] biasWorker_wsiS_tBusyCount$D_IN;
  wire biasWorker_wsiS_tBusyCount$EN;

  // register biasWorker_wsiS_trafficSticky
  reg biasWorker_wsiS_trafficSticky;
  wire biasWorker_wsiS_trafficSticky$D_IN, biasWorker_wsiS_trafficSticky$EN;

  // register biasWorker_wsiS_wordCount
  reg [11 : 0] biasWorker_wsiS_wordCount;
  wire [11 : 0] biasWorker_wsiS_wordCount$D_IN;
  wire biasWorker_wsiS_wordCount$EN;

  // register dstDataOut
  reg [31 : 0] dstDataOut;
  wire [31 : 0] dstDataOut$D_IN;
  wire dstDataOut$EN;

  // register dstMesgCount
  reg [15 : 0] dstMesgCount;
  wire [15 : 0] dstMesgCount$D_IN;
  wire dstMesgCount$EN;

  // register dstUnrollCnt
  reg [15 : 0] dstUnrollCnt;
  wire [15 : 0] dstUnrollCnt$D_IN;
  wire dstUnrollCnt$EN;

  // register enWsiChecker
  reg enWsiChecker;
  wire enWsiChecker$D_IN, enWsiChecker$EN;

  // register enWsiSource
  reg enWsiSource;
  wire enWsiSource$D_IN, enWsiSource$EN;

  // register goodDataCnt_value
  reg [31 : 0] goodDataCnt_value;
  wire [31 : 0] goodDataCnt_value$D_IN;
  wire goodDataCnt_value$EN;

  // register goodMesgCnt_value
  reg [31 : 0] goodMesgCnt_value;
  wire [31 : 0] goodMesgCnt_value$D_IN;
  wire goodMesgCnt_value$EN;

  // register mesgHadError
  reg mesgHadError;
  wire mesgHadError$D_IN, mesgHadError$EN;

  // register rsRcvGen_isSOF
  reg rsRcvGen_isSOF;
  wire rsRcvGen_isSOF$D_IN, rsRcvGen_isSOF$EN;

  // register rsRcvGen_lenRemain
  reg [11 : 0] rsRcvGen_lenRemain;
  wire [11 : 0] rsRcvGen_lenRemain$D_IN;
  wire rsRcvGen_lenRemain$EN;

  // register rsRcvGen_pattern
  reg [7 : 0] rsRcvGen_pattern;
  wire [7 : 0] rsRcvGen_pattern$D_IN;
  wire rsRcvGen_pattern$EN;

  // register rsXmtGen_isSOF
  reg rsXmtGen_isSOF;
  wire rsXmtGen_isSOF$D_IN, rsXmtGen_isSOF$EN;

  // register rsXmtGen_lenRemain
  reg [11 : 0] rsXmtGen_lenRemain;
  wire [11 : 0] rsXmtGen_lenRemain$D_IN;
  wire rsXmtGen_lenRemain$EN;

  // register rsXmtGen_pattern
  reg [7 : 0] rsXmtGen_pattern;
  wire [7 : 0] rsXmtGen_pattern$D_IN;
  wire rsXmtGen_pattern$EN;

  // register simCycle
  reg [15 : 0] simCycle;
  wire [15 : 0] simCycle$D_IN;
  wire simCycle$EN;

  // register srcDataOut
  reg [31 : 0] srcDataOut;
  wire [31 : 0] srcDataOut$D_IN;
  wire srcDataOut$EN;

  // register srcMesgCount
  reg [15 : 0] srcMesgCount;
  wire [15 : 0] srcMesgCount$D_IN;
  wire srcMesgCount$EN;

  // register srcUnrollCnt
  reg [15 : 0] srcUnrollCnt;
  wire [15 : 0] srcUnrollCnt$D_IN;
  wire srcUnrollCnt$EN;

  // register testOperating
  reg testOperating;
  wire testOperating$D_IN, testOperating$EN;

  // register wciSeqFsm_start_reg
  reg wciSeqFsm_start_reg;
  wire wciSeqFsm_start_reg$D_IN, wciSeqFsm_start_reg$EN;

  // register wciSeqFsm_start_reg_1
  reg wciSeqFsm_start_reg_1;
  wire wciSeqFsm_start_reg_1$D_IN, wciSeqFsm_start_reg_1$EN;

  // register wciSeqFsm_state_can_overlap
  reg wciSeqFsm_state_can_overlap;
  wire wciSeqFsm_state_can_overlap$D_IN, wciSeqFsm_state_can_overlap$EN;

  // register wciSeqFsm_state_fired
  reg wciSeqFsm_state_fired;
  wire wciSeqFsm_state_fired$D_IN, wciSeqFsm_state_fired$EN;

  // register wciSeqFsm_state_mkFSMstate
  reg [4 : 0] wciSeqFsm_state_mkFSMstate;
  reg [4 : 0] wciSeqFsm_state_mkFSMstate$D_IN;
  wire wciSeqFsm_state_mkFSMstate$EN;

  // register wciSeqOnce_onceReady
  reg wciSeqOnce_onceReady;
  wire wciSeqOnce_onceReady$D_IN, wciSeqOnce_onceReady$EN;

  // register wci_busy
  reg wci_busy;
  wire wci_busy$D_IN, wci_busy$EN;

  // register wci_lastConfigAddr
  reg [32 : 0] wci_lastConfigAddr;
  wire [32 : 0] wci_lastConfigAddr$D_IN;
  wire wci_lastConfigAddr$EN;

  // register wci_lastConfigBE
  reg [4 : 0] wci_lastConfigBE;
  wire [4 : 0] wci_lastConfigBE$D_IN;
  wire wci_lastConfigBE$EN;

  // register wci_lastControlOp
  reg [3 : 0] wci_lastControlOp;
  wire [3 : 0] wci_lastControlOp$D_IN;
  wire wci_lastControlOp$EN;

  // register wci_lastOpWrite
  reg [1 : 0] wci_lastOpWrite;
  wire [1 : 0] wci_lastOpWrite$D_IN;
  wire wci_lastOpWrite$EN;

  // register wci_mFlagReg
  reg [1 : 0] wci_mFlagReg;
  wire [1 : 0] wci_mFlagReg$D_IN;
  wire wci_mFlagReg$EN;

  // register wci_pageWindow
  reg [11 : 0] wci_pageWindow;
  wire [11 : 0] wci_pageWindow$D_IN;
  wire wci_pageWindow$EN;

  // register wci_reqERR
  reg [2 : 0] wci_reqERR;
  reg [2 : 0] wci_reqERR$D_IN;
  wire wci_reqERR$EN;

  // register wci_reqFAIL
  reg [2 : 0] wci_reqFAIL;
  reg [2 : 0] wci_reqFAIL$D_IN;
  wire wci_reqFAIL$EN;

  // register wci_reqF_c_r
  reg wci_reqF_c_r;
  wire wci_reqF_c_r$D_IN, wci_reqF_c_r$EN;

  // register wci_reqF_q_0
  reg [71 : 0] wci_reqF_q_0;
  reg [71 : 0] wci_reqF_q_0$D_IN;
  wire wci_reqF_q_0$EN;

  // register wci_reqPend
  reg [1 : 0] wci_reqPend;
  reg [1 : 0] wci_reqPend$D_IN;
  wire wci_reqPend$EN;

  // register wci_reqTO
  reg [2 : 0] wci_reqTO;
  reg [2 : 0] wci_reqTO$D_IN;
  wire wci_reqTO$EN;

  // register wci_respTimr
  reg [31 : 0] wci_respTimr;
  wire [31 : 0] wci_respTimr$D_IN;
  wire wci_respTimr$EN;

  // register wci_respTimrAct
  reg wci_respTimrAct;
  wire wci_respTimrAct$D_IN, wci_respTimrAct$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wci_sfCap
  reg wci_sfCap;
  wire wci_sfCap$D_IN, wci_sfCap$EN;

  // register wci_sfCapClear
  reg wci_sfCapClear;
  wire wci_sfCapClear$D_IN, wci_sfCapClear$EN;

  // register wci_sfCapSet
  reg wci_sfCapSet;
  wire wci_sfCapSet$D_IN, wci_sfCapSet$EN;

  // register wci_slvPresent
  reg wci_slvPresent;
  wire wci_slvPresent$D_IN, wci_slvPresent$EN;

  // register wci_wReset_n
  reg wci_wReset_n;
  wire wci_wReset_n$D_IN, wci_wReset_n$EN;

  // register wci_wStatus
  reg [31 : 0] wci_wStatus;
  wire [31 : 0] wci_wStatus$D_IN;
  wire wci_wStatus$EN;

  // register wci_wTimeout
  reg [4 : 0] wci_wTimeout;
  wire [4 : 0] wci_wTimeout$D_IN;
  wire wci_wTimeout$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_isReset_isInReset
  reg wsiM_isReset_isInReset;
  wire wsiM_isReset_isInReset$D_IN, wsiM_isReset_isInReset$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_isReset_isInReset
  reg wsiS_isReset_isInReset;
  wire wsiS_isReset_isInReset$D_IN, wsiS_isReset_isInReset$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule biasWorker_wci_wslv_reqF
  wire [71 : 0] biasWorker_wci_wslv_reqF$D_IN, biasWorker_wci_wslv_reqF$D_OUT;
  wire biasWorker_wci_wslv_reqF$CLR,
       biasWorker_wci_wslv_reqF$DEQ,
       biasWorker_wci_wslv_reqF$EMPTY_N,
       biasWorker_wci_wslv_reqF$ENQ;

  // ports of submodule biasWorker_wsiS_reqFifo
  wire [60 : 0] biasWorker_wsiS_reqFifo$D_IN, biasWorker_wsiS_reqFifo$D_OUT;
  wire biasWorker_wsiS_reqFifo$CLR,
       biasWorker_wsiS_reqFifo$DEQ,
       biasWorker_wsiS_reqFifo$EMPTY_N,
       biasWorker_wsiS_reqFifo$ENQ,
       biasWorker_wsiS_reqFifo$FULL_N;

  // ports of submodule erx
  wire [9 : 0] erx$rxf_get;
  wire [7 : 0] erx$gmii_rxd_i;
  wire erx$EN_rxf_get, erx$RDY_rxf_get, erx$gmii_rx_dv_i, erx$gmii_rx_er_i;

  // ports of submodule etx
  wire [9 : 0] etx$txf_put;
  wire [7 : 0] etx$gmii_txd;
  wire etx$EN_txf_put, etx$RDY_txf_put, etx$gmii_tx_en, etx$gmii_tx_er;

  // ports of submodule rsRcvGen_gsF
  wire [9 : 0] rsRcvGen_gsF$D_IN, rsRcvGen_gsF$D_OUT;
  wire rsRcvGen_gsF$CLR,
       rsRcvGen_gsF$DEQ,
       rsRcvGen_gsF$EMPTY_N,
       rsRcvGen_gsF$ENQ,
       rsRcvGen_gsF$FULL_N;

  // ports of submodule rsXmtGen_gsF
  wire [9 : 0] rsXmtGen_gsF$D_IN, rsXmtGen_gsF$D_OUT;
  wire rsXmtGen_gsF$CLR,
       rsXmtGen_gsF$DEQ,
       rsXmtGen_gsF$EMPTY_N,
       rsXmtGen_gsF$ENQ,
       rsXmtGen_gsF$FULL_N;

  // ports of submodule wci_mReset
  wire wci_mReset$ASSERT_IN, wci_mReset$OUT_RST_N;

  // ports of submodule wci_respF
  reg [33 : 0] wci_respF$D_IN;
  wire wci_respF$CLR,
       wci_respF$DEQ,
       wci_respF$EMPTY_N,
       wci_respF$ENQ,
       wci_respF$FULL_N;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  reg WILL_FIRE_RL_rsRcvGen_genseq, WILL_FIRE_RL_rsXmtGen_genseq;
  wire WILL_FIRE_RL_biasWorker_wci_cfrd,
       WILL_FIRE_RL_biasWorker_wci_cfwr,
       WILL_FIRE_RL_biasWorker_wci_ctrl_EiI,
       WILL_FIRE_RL_biasWorker_wci_ctrl_IsO,
       WILL_FIRE_RL_biasWorker_wci_ctrl_OrE,
       WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_biasWorker_wci_wslv_respF_both,
       WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq,
       WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset,
       WILL_FIRE_RL_recvPat,
       WILL_FIRE_RL_wciSeqFsm_action_l163c5,
       WILL_FIRE_RL_wciSeqFsm_action_l164c10,
       WILL_FIRE_RL_wciSeqFsm_action_l167c8,
       WILL_FIRE_RL_wciSeqFsm_action_l168c5,
       WILL_FIRE_RL_wciSeqFsm_action_l171c8,
       WILL_FIRE_RL_wciSeqFsm_action_l172c5,
       WILL_FIRE_RL_wciSeqFsm_action_l175c8,
       WILL_FIRE_RL_wciSeqFsm_action_l176c5,
       WILL_FIRE_RL_wciSeqFsm_action_l179c8,
       WILL_FIRE_RL_wciSeqFsm_action_l180c5,
       WILL_FIRE_RL_wciSeqFsm_action_l183c8,
       WILL_FIRE_RL_wciSeqFsm_action_l184c5,
       WILL_FIRE_RL_wciSeqFsm_fsm_start,
       WILL_FIRE_RL_wciSeqFsm_idle_l162c3,
       WILL_FIRE_RL_wci_reqF_both,
       WILL_FIRE_RL_wci_reqF_decCtr,
       WILL_FIRE_RL_wci_reqF_incCtr,
       WILL_FIRE_RL_wci_wrkBusy,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  reg [71 : 0] MUX_wci_reqF_q_0$write_1__VAL_2;
  reg [33 : 0] MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1;
  wire [71 : 0] MUX_wci_reqF_q_0$write_1__VAL_1,
		MUX_wci_reqF_x_wire$wset_1__VAL_2,
		MUX_wci_reqF_x_wire$wset_1__VAL_3;
  wire [60 : 0] MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
  wire [33 : 0] MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_2,
		MUX_biasWorker_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_wci_respF$enq_1__VAL_2;
  wire [31 : 0] MUX_badDataCnt_value$write_1__VAL_1,
		MUX_badMesgCnt_value$write_1__VAL_1,
		MUX_goodDataCnt_value$write_1__VAL_1,
		MUX_goodMesgCnt_value$write_1__VAL_1,
		MUX_wci_respTimr$write_1__VAL_2;
  wire [15 : 0] MUX_dstUnrollCnt$write_1__VAL_2,
		MUX_srcUnrollCnt$write_1__VAL_2;
  wire [1 : 0] MUX_biasWorker_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_biasWorker_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_biasWorker_biasValue$write_1__SEL_1,
       MUX_biasWorker_controlReg$write_1__SEL_1,
       MUX_biasWorker_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_biasWorker_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_biasWorker_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_biasWorker_wci_wslv_respF_q_0$write_1__SEL_1,
       MUX_biasWorker_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3,
       MUX_wci_busy$write_1__PSEL_1,
       MUX_wci_busy$write_1__SEL_1,
       MUX_wci_busy$write_1__SEL_2,
       MUX_wci_lastConfigBE$write_1__SEL_1,
       MUX_wci_lastConfigBE$write_1__SEL_2,
       MUX_wci_lastControlOp$write_1__SEL_1,
       MUX_wci_lastControlOp$write_1__SEL_2,
       MUX_wci_reqF_c_r$write_1__VAL_1,
       MUX_wci_reqF_c_r$write_1__VAL_2,
       MUX_wci_reqF_q_0$write_1__SEL_2,
       MUX_wci_reqPend$write_1__PSEL_3,
       MUX_wci_reqPend$write_1__SEL_3,
       MUX_wci_reqPend$write_1__SEL_4,
       MUX_wci_respF$enq_1__SEL_1,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h13547,
	       v__h13721,
	       v__h13865,
	       v__h20595,
	       v__h20748,
	       v__h25257,
	       v__h25566,
	       v__h2742,
	       v__h2832,
	       v__h2921,
	       v__h3145,
	       v__h3235,
	       v__h3324,
	       v__h3553,
	       v__h3643,
	       v__h3732,
	       v__h60482,
	       v__h60910,
	       v__h61952,
	       v__h62256,
	       v__h63024,
	       v__h64097,
	       v__h65251,
	       v__h65627,
	       v__h68683,
	       v__h68928,
	       v__h69116,
	       v__h69311;
  reg [31 : 0] _theResult____h20732;
  reg [1 : 0] CASE_rsRcvGen_lenRemain_EQ_1_CONCAT_rsRcvGen_i_ETC__q2,
	      CASE_rsXmtGen_gsFD_OUT_BITS_9_TO_8_3_0_rsXmtG_ETC__q1,
	      CASE_rsXmtGen_lenRemain_EQ_1_CONCAT_rsXmtGen_i_ETC__q3;
  wire [31 : 0] rdat__h20822,
		toCount__h2450,
		wciAddr__h63306,
		x__h2609,
		x_data__h20067;
  wire [26 : 0] IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137;
  wire [15 : 0] wsiBurstLength__h68725, x__h20825, x__h68623, x__h69084;
  wire IF_erx_rxf_get_15_BITS_9_TO_8_16_EQ_0_17_OR_er_ETC___d829,
       NOT_wci_busy_5_49_AND_IF_wci_wReset_n_5_THEN_N_ETC___d962,
       _dand1wci_busy$EN_write,
       _dand1wci_respF$EN_enq,
       _dor1wci_lastConfigAddr$EN_write,
       wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110,
       wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075;

  // submodule biasWorker_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) biasWorker_wci_wslv_reqF(.RST_N(wci_mReset$OUT_RST_N),
							.CLK(CLK),
							.D_IN(biasWorker_wci_wslv_reqF$D_IN),
							.ENQ(biasWorker_wci_wslv_reqF$ENQ),
							.DEQ(biasWorker_wci_wslv_reqF$DEQ),
							.CLR(biasWorker_wci_wslv_reqF$CLR),
							.D_OUT(biasWorker_wci_wslv_reqF$D_OUT),
							.FULL_N(),
							.EMPTY_N(biasWorker_wci_wslv_reqF$EMPTY_N));

  // submodule biasWorker_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) biasWorker_wsiS_reqFifo(.RST_N(wci_mReset$OUT_RST_N),
						       .CLK(CLK),
						       .D_IN(biasWorker_wsiS_reqFifo$D_IN),
						       .ENQ(biasWorker_wsiS_reqFifo$ENQ),
						       .DEQ(biasWorker_wsiS_reqFifo$DEQ),
						       .CLR(biasWorker_wsiS_reqFifo$CLR),
						       .D_OUT(biasWorker_wsiS_reqFifo$D_OUT),
						       .FULL_N(biasWorker_wsiS_reqFifo$FULL_N),
						       .EMPTY_N(biasWorker_wsiS_reqFifo$EMPTY_N));

  // submodule erx
  mkRxRSAsync erx(.CLK_rxClk(CLK),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .gmii_rx_dv_i(erx$gmii_rx_dv_i),
		  .gmii_rx_er_i(erx$gmii_rx_er_i),
		  .gmii_rxd_i(erx$gmii_rxd_i),
		  .EN_rxf_get(erx$EN_rxf_get),
		  .rxf_get(erx$rxf_get),
		  .RDY_rxf_get(erx$RDY_rxf_get));

  // submodule etx
  mkTxRS etx(.CLK(CLK),
	     .RST_N(RST_N),
	     .txf_put(etx$txf_put),
	     .EN_txf_put(etx$EN_txf_put),
	     .RDY_txf_put(etx$RDY_txf_put),
	     .txUnderflow(),
	     .RDY_txUnderflow(),
	     .gmii_txd(etx$gmii_txd),
	     .gmii_tx_en(etx$gmii_tx_en),
	     .gmii_tx_er(etx$gmii_tx_er));

  // submodule rsRcvGen_gsF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) rsRcvGen_gsF(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(rsRcvGen_gsF$D_IN),
							.ENQ(rsRcvGen_gsF$ENQ),
							.DEQ(rsRcvGen_gsF$DEQ),
							.CLR(rsRcvGen_gsF$CLR),
							.D_OUT(rsRcvGen_gsF$D_OUT),
							.FULL_N(rsRcvGen_gsF$FULL_N),
							.EMPTY_N(rsRcvGen_gsF$EMPTY_N));

  // submodule rsXmtGen_gsF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) rsXmtGen_gsF(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(rsXmtGen_gsF$D_IN),
							.ENQ(rsXmtGen_gsF$ENQ),
							.DEQ(rsXmtGen_gsF$DEQ),
							.CLR(rsXmtGen_gsF$CLR),
							.D_OUT(rsXmtGen_gsF$D_OUT),
							.FULL_N(rsXmtGen_gsF$FULL_N),
							.EMPTY_N(rsXmtGen_gsF$EMPTY_N));

  // submodule wci_mReset
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) wci_mReset(.CLK(CLK),
							  .RST_N(RST_N),
							  .DST_CLK(CLK),
							  .ASSERT_IN(wci_mReset$ASSERT_IN),
							  .ASSERT_OUT(),
							  .OUT_RST_N(wci_mReset$OUT_RST_N));

  // submodule wci_respF
  FIFO1 #(.width(32'd34), .guarded(32'd1)) wci_respF(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(wci_respF$D_IN),
						     .ENQ(wci_respF$ENQ),
						     .DEQ(wci_respF$DEQ),
						     .CLR(wci_respF$CLR),
						     .D_OUT(),
						     .FULL_N(wci_respF$FULL_N),
						     .EMPTY_N(wci_respF$EMPTY_N));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_recvPat
  assign WILL_FIRE_RL_recvPat = erx$RDY_rxf_get && rsRcvGen_gsF$EMPTY_N ;

  // rule RL_wci_wrkBusy
  assign WILL_FIRE_RL_wci_wrkBusy =
	     ((biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0) ?
		wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 ||
		wci_respF$FULL_N :
		wci_respF$FULL_N) &&
	     wci_busy ;

  // rule RL_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;

  // rule RL_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd1 || wsiM_reqFifo_enqueueing$whas) &&
	     wsiM_reqFifo_enqueueing$whas &&
	     !WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_wsiM_reqFifo_deq && !wsiM_reqFifo_enqueueing$whas ;

  // rule RL_wsiM_reqFifo_both
  assign WILL_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd2 || wsiM_reqFifo_enqueueing$whas) &&
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_enqueueing$whas ;

  // rule RL_biasWorker_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start =
	     biasWorker_wci_wslv_reqF$EMPTY_N &&
	     biasWorker_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete ;

  // rule RL_biasWorker_wci_ctrl_EiI
  assign WILL_FIRE_RL_biasWorker_wci_ctrl_EiI =
	     biasWorker_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start &&
	     biasWorker_wci_wslv_cState == 3'd0 &&
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_biasWorker_wci_ctrl_IsO
  assign WILL_FIRE_RL_biasWorker_wci_ctrl_IsO =
	     biasWorker_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start &&
	     biasWorker_wci_wslv_cState == 3'd1 &&
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_biasWorker_wci_ctrl_OrE
  assign WILL_FIRE_RL_biasWorker_wci_ctrl_OrE =
	     biasWorker_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start &&
	     biasWorker_wci_wslv_cState == 3'd2 &&
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_biasWorker_wci_cfwr
  assign WILL_FIRE_RL_biasWorker_wci_cfwr =
	     biasWorker_wci_wslv_respF_c_r != 2'd2 &&
	     biasWorker_wci_wslv_reqF$EMPTY_N &&
	     biasWorker_wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete ;

  // rule RL_biasWorker_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete =
	     biasWorker_wci_wslv_respF_c_r != 2'd2 &&
	     biasWorker_wci_wslv_ctlOpActive &&
	     biasWorker_wci_wslv_ctlAckReg ;

  // rule RL_biasWorker_wci_cfrd
  assign WILL_FIRE_RL_biasWorker_wci_cfrd =
	     biasWorker_wci_wslv_respF_c_r != 2'd2 &&
	     biasWorker_wci_wslv_reqF$EMPTY_N &&
	     biasWorker_wci_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete ;

  // rule RL_biasWorker_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr =
	     ((biasWorker_wci_wslv_respF_c_r == 2'd0) ?
		biasWorker_wci_wslv_respF_x_wire$whas :
		biasWorker_wci_wslv_respF_c_r != 2'd1 ||
		biasWorker_wci_wslv_respF_x_wire$whas) &&
	     biasWorker_wci_wslv_respF_enqueueing$whas &&
	     !(biasWorker_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_biasWorker_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr =
	     biasWorker_wci_wslv_respF_c_r != 2'd0 &&
	     !biasWorker_wci_wslv_respF_enqueueing$whas ;

  // rule RL_biasWorker_wci_wslv_respF_both
  assign WILL_FIRE_RL_biasWorker_wci_wslv_respF_both =
	     ((biasWorker_wci_wslv_respF_c_r == 2'd1) ?
		biasWorker_wci_wslv_respF_x_wire$whas :
		biasWorker_wci_wslv_respF_c_r != 2'd2 ||
		biasWorker_wci_wslv_respF_x_wire$whas) &&
	     biasWorker_wci_wslv_respF_c_r != 2'd0 &&
	     biasWorker_wci_wslv_respF_enqueueing$whas ;

  // rule RL_biasWorker_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq =
	     biasWorker_wsiM_reqFifo_c_r != 2'd0 &&
	     !biasWorker_wsiM_sThreadBusy_d ;

  // rule RL_biasWorker_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr =
	     ((biasWorker_wsiM_reqFifo_c_r == 2'd0) ?
		MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 :
		biasWorker_wsiM_reqFifo_c_r != 2'd1 ||
		MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3) &&
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     !WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq ;

  // rule RL_biasWorker_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     !MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // rule RL_biasWorker_wsiM_reqFifo_both
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both =
	     ((biasWorker_wsiM_reqFifo_c_r == 2'd1) ?
		MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 :
		biasWorker_wsiM_reqFifo_c_r != 2'd2 ||
		MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3) &&
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // rule RL_biasWorker_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq =
	     biasWorker_wsiS_reqFifo$FULL_N && biasWorker_wsiS_operateD &&
	     biasWorker_wsiS_peerIsReady &&
	     biasWorker_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_biasWorker_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ||
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // rule RL_rsXmtGen_genseq
  always@(rsXmtGen_lenRemain or rsXmtGen_isSOF or rsXmtGen_gsF$FULL_N)
  begin
    case ({ rsXmtGen_lenRemain == 12'd1, rsXmtGen_isSOF })
      2'd0, 2'd1, 2'd2: WILL_FIRE_RL_rsXmtGen_genseq = rsXmtGen_gsF$FULL_N;
      2'd3:
	  WILL_FIRE_RL_rsXmtGen_genseq =
	      { rsXmtGen_lenRemain == 12'd1, rsXmtGen_isSOF } != 2'd3 ||
	      rsXmtGen_gsF$FULL_N;
    endcase
  end

  // rule RL_rsRcvGen_genseq
  always@(rsRcvGen_lenRemain or rsRcvGen_isSOF or rsRcvGen_gsF$FULL_N)
  begin
    case ({ rsRcvGen_lenRemain == 12'd1, rsRcvGen_isSOF })
      2'd0, 2'd1, 2'd2: WILL_FIRE_RL_rsRcvGen_genseq = rsRcvGen_gsF$FULL_N;
      2'd3:
	  WILL_FIRE_RL_rsRcvGen_genseq =
	      { rsRcvGen_lenRemain == 12'd1, rsRcvGen_isSOF } != 2'd3 ||
	      rsRcvGen_gsF$FULL_N;
    endcase
  end

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_reqFifo$FULL_N && wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // rule RL_wciSeqFsm_action_l164c10
  assign WILL_FIRE_RL_wciSeqFsm_action_l164c10 =
	     wci_slvPresent && wciSeqFsm_state_mkFSMstate == 5'd1 ;

  // rule RL_wciSeqFsm_action_l167c8
  assign WILL_FIRE_RL_wciSeqFsm_action_l167c8 =
	     !wci_busy && wci_respF$FULL_N &&
	     wciSeqFsm_state_mkFSMstate == 5'd3 ;

  // rule RL_wciSeqFsm_action_l168c5
  assign WILL_FIRE_RL_wciSeqFsm_action_l168c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd4 ;

  // rule RL_wciSeqFsm_action_l171c8
  assign WILL_FIRE_RL_wciSeqFsm_action_l171c8 =
	     NOT_wci_busy_5_49_AND_IF_wci_wReset_n_5_THEN_N_ETC___d962 &&
	     wciSeqFsm_state_mkFSMstate == 5'd6 ;

  // rule RL_wciSeqFsm_action_l172c5
  assign WILL_FIRE_RL_wciSeqFsm_action_l172c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd7 ;

  // rule RL_wciSeqFsm_action_l175c8
  assign WILL_FIRE_RL_wciSeqFsm_action_l175c8 =
	     NOT_wci_busy_5_49_AND_IF_wci_wReset_n_5_THEN_N_ETC___d962 &&
	     wciSeqFsm_state_mkFSMstate == 5'd9 ;

  // rule RL_wciSeqFsm_action_l176c5
  assign WILL_FIRE_RL_wciSeqFsm_action_l176c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd10 ;

  // rule RL_wciSeqFsm_action_l179c8
  assign WILL_FIRE_RL_wciSeqFsm_action_l179c8 =
	     NOT_wci_busy_5_49_AND_IF_wci_wReset_n_5_THEN_N_ETC___d962 &&
	     wciSeqFsm_state_mkFSMstate == 5'd12 ;

  // rule RL_wciSeqFsm_action_l180c5
  assign WILL_FIRE_RL_wciSeqFsm_action_l180c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd13 ;

  // rule RL_wciSeqFsm_action_l183c8
  assign WILL_FIRE_RL_wciSeqFsm_action_l183c8 =
	     NOT_wci_busy_5_49_AND_IF_wci_wReset_n_5_THEN_N_ETC___d962 &&
	     wciSeqFsm_state_mkFSMstate == 5'd15 ;

  // rule RL_wci_reqF_incCtr
  assign WILL_FIRE_RL_wci_reqF_incCtr =
	     (wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_enqueueing$whas &&
	     !wci_reqF_dequeueing$whas ;

  // rule RL_wci_reqF_decCtr
  assign WILL_FIRE_RL_wci_reqF_decCtr =
	     wci_reqF_dequeueing$whas && !wci_reqF_enqueueing$whas ;

  // rule RL_wci_reqF_both
  assign WILL_FIRE_RL_wci_reqF_both =
	     (!wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_dequeueing$whas &&
	     wci_reqF_enqueueing$whas ;

  // rule RL_wciSeqFsm_action_l184c5
  assign WILL_FIRE_RL_wciSeqFsm_action_l184c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd16 ;

  // rule RL_wciSeqFsm_fsm_start
  assign WILL_FIRE_RL_wciSeqFsm_fsm_start =
	     (wciSeqFsm_state_mkFSMstate == 5'd0 ||
	      wciSeqFsm_state_mkFSMstate == 5'd22) &&
	     (!wciSeqFsm_start_reg_1 || wciSeqFsm_state_fired) &&
	     wciSeqFsm_start_reg ;

  // rule RL_wciSeqFsm_action_l163c5
  assign WILL_FIRE_RL_wciSeqFsm_action_l163c5 =
	     wciSeqFsm_start_wire$whas &&
	     (wciSeqFsm_state_mkFSMstate == 5'd0 ||
	      wciSeqFsm_state_mkFSMstate == 5'd22) ;

  // rule RL_wciSeqFsm_idle_l162c3
  assign WILL_FIRE_RL_wciSeqFsm_idle_l162c3 =
	     !wciSeqFsm_start_wire$whas &&
	     wciSeqFsm_state_mkFSMstate == 5'd22 ;

  // inputs to muxes for submodule ports
  assign MUX_biasWorker_biasValue$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_biasWorker_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_biasWorker_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete &&
	     biasWorker_wci_wslv_illegalEdge ;
  assign MUX_biasWorker_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start &&
	     (biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      biasWorker_wci_wslv_cState != 3'd0 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      biasWorker_wci_wslv_cState != 3'd1 &&
	      biasWorker_wci_wslv_cState != 3'd3 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      biasWorker_wci_wslv_cState != 3'd2 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      biasWorker_wci_wslv_cState != 3'd3 &&
	      biasWorker_wci_wslv_cState != 3'd2 &&
	      biasWorker_wci_wslv_cState != 3'd1 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_biasWorker_wci_wslv_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr &&
	     biasWorker_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_biasWorker_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr &&
	     biasWorker_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     biasWorker_wsiM_reqFifo_c_r != 2'd2 &&
	     biasWorker_wsiS_reqFifo$EMPTY_N &&
	     biasWorker_wci_wslv_cState == 3'd2 ;
  assign MUX_wci_busy$write_1__PSEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l171c8 ;
  assign MUX_wci_busy$write_1__SEL_1 =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign MUX_wci_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 ||
	      biasWorker_wci_wslv_respF_q_0[33:32] != 2'd0) ;
  assign MUX_wci_lastConfigBE$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 && wci_wReset_n ;
  assign MUX_wci_lastConfigBE$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_action_l171c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_action_l183c8 && wci_wReset_n ;
  assign MUX_wci_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ;
  assign MUX_wci_reqPend$write_1__PSEL_3 =
	     WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l171c8 ;
  assign MUX_wci_reqPend$write_1__SEL_3 =
	     MUX_wci_reqPend$write_1__PSEL_3 && wci_wReset_n ;
  assign MUX_wci_reqPend$write_1__SEL_4 =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_wslv_respF_q_0[33:32] != 2'd0 ;
  assign MUX_wci_respF$enq_1__SEL_1 =
	     MUX_wci_busy$write_1__PSEL_1 && !wci_wReset_n ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     wsiS_reqFifo$EMPTY_N && enWsiChecker && !WILL_FIRE_RL_recvPat ;
  assign MUX_badDataCnt_value$write_1__VAL_1 =
	     (badDataCnt_value == 32'hFFFFFFFF) ?
	       badDataCnt_value :
	       badDataCnt_value + 32'd1 ;
  assign MUX_badMesgCnt_value$write_1__VAL_1 =
	     (badMesgCnt_value == 32'hFFFFFFFF) ?
	       badMesgCnt_value :
	       badMesgCnt_value + 32'd1 ;
  assign MUX_biasWorker_wci_wslv_illegalEdge$write_1__VAL_2 =
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_biasWorker_wci_wslv_respF_c_r$write_1__VAL_1 =
	     biasWorker_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_biasWorker_wci_wslv_respF_c_r$write_1__VAL_2 =
	     biasWorker_wci_wslv_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete or
	  MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wci_cfrd or
	  MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete:
	  MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wci_cfrd:
	  MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wci_cfwr:
	  MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_2 =
	     (biasWorker_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 :
	       biasWorker_wci_wslv_respF_q_1 ;
  assign MUX_biasWorker_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (biasWorker_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     biasWorker_wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_biasWorker_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h20732 } ;
  assign MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     biasWorker_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     biasWorker_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     { biasWorker_wsiS_reqFifo$D_OUT[60:44],
	       x_data__h20067,
	       biasWorker_wsiS_reqFifo$D_OUT[11:0] } ;
  assign MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (biasWorker_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       biasWorker_wsiM_reqFifo_q_1 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (biasWorker_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_dstUnrollCnt$write_1__VAL_2 =
	     (dstUnrollCnt == 16'd1) ? wsiBurstLength__h68725 : x__h69084 ;
  assign MUX_goodDataCnt_value$write_1__VAL_1 =
	     (goodDataCnt_value == 32'hFFFFFFFF) ?
	       goodDataCnt_value :
	       goodDataCnt_value + 32'd1 ;
  assign MUX_goodMesgCnt_value$write_1__VAL_1 =
	     (goodMesgCnt_value == 32'hFFFFFFFF) ?
	       goodMesgCnt_value :
	       goodMesgCnt_value + 32'd1 ;
  assign MUX_srcUnrollCnt$write_1__VAL_2 =
	     (srcUnrollCnt == 16'd1) ? 16'd16 : x__h68623 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_1 = wci_reqF_c_r + 1'd1 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_2 = wci_reqF_c_r - 1'd1 ;
  assign MUX_wci_reqF_q_0$write_1__VAL_1 =
	     wci_reqF_c_r ?
	       MUX_wci_reqF_q_0$write_1__VAL_2 :
	       72'h0000000000AAAAAAAA ;
  always@(MUX_wci_lastControlOp$write_1__SEL_1 or
	  MUX_wci_lastConfigBE$write_1__SEL_2 or
	  MUX_wci_reqF_x_wire$wset_1__VAL_2 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_reqF_x_wire$wset_1__VAL_3 or
	  MUX_wci_lastControlOp$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastControlOp$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 72'h4F00000000AAAAAAAA;
      MUX_wci_lastConfigBE$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = MUX_wci_reqF_x_wire$wset_1__VAL_2;
      MUX_wci_lastConfigBE$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = MUX_wci_reqF_x_wire$wset_1__VAL_3;
      MUX_wci_lastControlOp$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 72'h4F00000004AAAAAAAA;
      default: MUX_wci_reqF_q_0$write_1__VAL_2 =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_reqF_x_wire$wset_1__VAL_2 =
	     { 8'd63, wciAddr__h63306, 32'h00004242 } ;
  assign MUX_wci_reqF_x_wire$wset_1__VAL_3 =
	     { 8'd90, wciAddr__h63306, 32'hAAAAAAAA } ;
  assign MUX_wci_respF$enq_1__VAL_2 =
	     (biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0) ?
	       34'h1C0DE4203 :
	       biasWorker_wci_wslv_respF_q_0 ;
  assign MUX_wci_respTimr$write_1__VAL_2 =
	     (biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0) ?
	       (wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 ?
		  x__h2609 :
		  32'd0) :
	       32'd0 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     { 3'd1, srcUnrollCnt == 16'd1, 13'd16, srcDataOut, 12'd3840 } ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign wci_reqF_x_wire$wget = MUX_wci_reqF_q_0$write_1__VAL_2 ;
  assign wci_reqF_x_wire$whas =
	     WILL_FIRE_RL_wciSeqFsm_action_l171c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_action_l183c8 && wci_wReset_n ;
  assign wci_wciResponse$wget = biasWorker_wci_wslv_respF_q_0 ;
  assign wci_wciResponse$whas = 1'd1 ;
  assign wci_sfCapSet_1$wget = biasWorker_wci_wslv_sFlagReg ;
  assign wci_sfCapSet_1$whas = 1'd1 ;
  assign wci_sfCapClear_1$wget = 1'b0 ;
  assign wci_sfCapClear_1$whas = 1'b0 ;
  assign wci_wci_Em_resp_w$wget = biasWorker_wci_wslv_respF_q_0[33:32] ;
  assign wci_wci_Em_resp_w$whas = 1'd1 ;
  assign wci_wci_Em_respData_w$wget = biasWorker_wci_wslv_respF_q_0[31:0] ;
  assign wci_wci_Em_respData_w$whas = 1'd1 ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign wsiM_reqFifo_x_wire$whas = wsiM_reqFifo_enqueueing$whas ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = testOperating ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas =
	     !biasWorker_wsiS_isReset_isInReset && biasWorker_wsiS_operateD ;
  assign wsiS_wsiReq$wget =
	     { wsi_Es_mCmd_w$wget,
	       wsi_Es_mReqLast_w$whas,
	       wsi_Es_mBurstPrecise_w$whas,
	       wsi_Es_mBurstLength_w$wget,
	       biasWorker_wsiM_reqFifo_q_0[43:8],
	       wsi_Es_mReqInfo_w$wget } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = testOperating ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas =
	     !biasWorker_wsiM_isReset_isInReset && biasWorker_wsiM_operateD ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign biasWorker_wci_wslv_wciReq$wget =
	     { biasWorker_wci_wci_Es_mCmd_w$wget,
	       biasWorker_wci_wci_Es_mAddrSpace_w$wget,
	       biasWorker_wci_wci_Es_mByteEn_w$wget,
	       biasWorker_wci_wci_Es_mAddr_w$wget,
	       wci_reqF_q_0[31:0] } ;
  assign biasWorker_wci_wslv_wciReq$whas = 1'd1 ;
  assign biasWorker_wci_wslv_respF_x_wire$wget =
	     MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 ;
  assign biasWorker_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_biasWorker_wci_cfrd ||
	     WILL_FIRE_RL_biasWorker_wci_cfwr ;
  assign biasWorker_wci_wslv_wEdge$wget =
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] ;
  assign biasWorker_wci_wslv_wEdge$whas =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start ;
  assign biasWorker_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign biasWorker_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign biasWorker_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign biasWorker_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_biasWorker_wci_ctrl_OrE ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_IsO ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_EiI ;
  assign biasWorker_wci_wci_Es_mCmd_w$wget =
	     wci_sThreadBusy_d ? 3'd0 : wci_reqF_q_0[71:69] ;
  assign biasWorker_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign biasWorker_wci_wci_Es_mAddrSpace_w$wget =
	     !wci_sThreadBusy_d && wci_reqF_q_0[68] ;
  assign biasWorker_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign biasWorker_wci_wci_Es_mAddr_w$wget =
	     wci_sThreadBusy_d ? 32'd0 : wci_reqF_q_0[63:32] ;
  assign biasWorker_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign biasWorker_wci_wci_Es_mData_w$wget = wci_reqF_q_0[31:0] ;
  assign biasWorker_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign biasWorker_wci_wci_Es_mByteEn_w$wget =
	     wci_sThreadBusy_d ? 4'd0 : wci_reqF_q_0[67:64] ;
  assign biasWorker_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign biasWorker_wsiS_wsiReq$wget =
	     { biasWorker_wsi_Es_mCmd_w$wget,
	       biasWorker_wsi_Es_mReqLast_w$whas,
	       biasWorker_wsi_Es_mBurstPrecise_w$whas,
	       biasWorker_wsi_Es_mBurstLength_w$wget,
	       wsiM_reqFifo_q_0[43:8],
	       biasWorker_wsi_Es_mReqInfo_w$wget } ;
  assign biasWorker_wsiS_wsiReq$whas = 1'd1 ;
  assign biasWorker_wsiS_operateD_1$wget = 1'd1 ;
  assign biasWorker_wsiS_operateD_1$whas =
	     biasWorker_wci_wslv_cState == 3'd2 ;
  assign biasWorker_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign biasWorker_wsiS_peerIsReady_1$whas =
	     !wsiM_isReset_isInReset && wsiM_operateD ;
  assign biasWorker_wsiS_sThreadBusy_dw$wget =
	     biasWorker_wsiS_reqFifo_countReg > 2'd1 ;
  assign biasWorker_wsiS_sThreadBusy_dw$whas =
	     biasWorker_wsiS_reqFifo_levelsValid &&
	     biasWorker_wsiS_operateD &&
	     biasWorker_wsiS_peerIsReady ;
  assign biasWorker_wsiM_reqFifo_x_wire$wget =
	     MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign biasWorker_wsiM_reqFifo_x_wire$whas =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiM_operateD_1$wget = 1'd1 ;
  assign biasWorker_wsiM_operateD_1$whas =
	     biasWorker_wci_wslv_cState == 3'd2 ;
  assign biasWorker_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign biasWorker_wsiM_peerIsReady_1$whas =
	     !wsiS_isReset_isInReset && wsiS_operateD ;
  assign biasWorker_wsi_Es_mCmd_w$wget =
	     wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;
  assign biasWorker_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mBurstLength_w$wget =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;
  assign biasWorker_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mData_w$wget = wsiM_reqFifo_q_0[43:12] ;
  assign biasWorker_wsi_Es_mData_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mByteEn_w$wget = wsiM_reqFifo_q_0[11:8] ;
  assign biasWorker_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mReqInfo_w$wget =
	     wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;
  assign biasWorker_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wsi_Es_mCmd_w$wget =
	     biasWorker_wsiM_sThreadBusy_d ?
	       3'd0 :
	       biasWorker_wsiM_reqFifo_q_0[60:58] ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget =
	     biasWorker_wsiM_sThreadBusy_d ?
	       12'd0 :
	       biasWorker_wsiM_reqFifo_q_0[55:44] ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = biasWorker_wsiM_reqFifo_q_0[43:12] ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = biasWorker_wsiM_reqFifo_q_0[11:8] ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget =
	     biasWorker_wsiM_sThreadBusy_d ?
	       8'd0 :
	       biasWorker_wsiM_reqFifo_q_0[7:0] ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wciSeqFsm_start_wire$wget = 1'd1 ;
  assign wciSeqFsm_start_wire$whas =
	     WILL_FIRE_RL_wciSeqFsm_fsm_start ||
	     wciSeqFsm_start_reg_1 && !wciSeqFsm_state_fired ;
  assign wciSeqFsm_start_reg_1_1$wget = 1'd1 ;
  assign wciSeqFsm_start_reg_1_1$whas = wciSeqFsm_start_wire$whas ;
  assign wciSeqFsm_abort$wget = 1'b0 ;
  assign wciSeqFsm_abort$whas = 1'b0 ;
  assign wciSeqFsm_state_fired_1$wget = 1'd1 ;
  assign wciSeqFsm_state_fired_1$whas = wciSeqFsm_state_set_pw$whas ;
  assign wci_reqF_enqueueing$whas =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign wci_reqF_dequeueing$whas =
	     !wci_sThreadBusy_d &&
	     biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	     wci_reqF_c_r ;
  assign wci_sThreadBusy_pw$whas =
	     biasWorker_wci_wslv_reqF_countReg > 2'd1 ||
	     biasWorker_wci_wslv_isReset_isInReset ;
  assign wsiM_reqFifo_enqueueing$whas =
	     wsiM_reqFifo_c_r != 2'd2 && enWsiSource ;
  assign wsiM_reqFifo_dequeueing$whas = WILL_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas =
	     !biasWorker_wsiS_sThreadBusy_dw$whas ||
	     biasWorker_wsiS_sThreadBusy_dw$wget ;
  assign wsiS_reqFifo_r_enq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_doResetDeq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign biasWorker_wci_wslv_reqF_r_enq$whas =
	     biasWorker_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign biasWorker_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_biasWorker_wci_cfrd ||
	     WILL_FIRE_RL_biasWorker_wci_cfwr ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start ;
  assign biasWorker_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign biasWorker_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_biasWorker_wci_cfrd ||
	     WILL_FIRE_RL_biasWorker_wci_cfwr ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete ;
  assign biasWorker_wci_wslv_respF_dequeueing$whas =
	     biasWorker_wci_wslv_respF_c_r != 2'd0 ;
  assign biasWorker_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign biasWorker_wci_wslv_wci_cfwr_pw$whas =
	     biasWorker_wci_wslv_reqF$EMPTY_N &&
	     biasWorker_wci_wslv_reqF$D_OUT[68] &&
	     biasWorker_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign biasWorker_wci_wslv_wci_cfrd_pw$whas =
	     biasWorker_wci_wslv_reqF$EMPTY_N &&
	     biasWorker_wci_wslv_reqF$D_OUT[68] &&
	     biasWorker_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign biasWorker_wci_wslv_wci_ctrl_pw$whas =
	     biasWorker_wci_wslv_reqF$EMPTY_N &&
	     !biasWorker_wci_wslv_reqF$D_OUT[68] &&
	     biasWorker_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign biasWorker_wsiS_reqFifo_r_enq$whas =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ;
  assign biasWorker_wsiS_reqFifo_r_deq$whas =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign biasWorker_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ;
  assign biasWorker_wsiS_reqFifo_doResetDeq$whas =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign biasWorker_wsiM_reqFifo_enqueueing$whas =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiM_reqFifo_dequeueing$whas =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq ;
  assign biasWorker_wsiM_sThreadBusy_pw$whas =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;
  assign biasWorker_wsi_Es_mReqLast_w$whas =
	     !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;
  assign biasWorker_wsi_Es_mBurstPrecise_w$whas =
	     !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;
  assign biasWorker_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign goodDataCnt_incAction$whas =
	     WILL_FIRE_RL_recvPat &&
	     IF_erx_rxf_get_15_BITS_9_TO_8_16_EQ_0_17_OR_er_ETC___d829 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075 ;
  assign goodDataCnt_decAction$whas = 1'b0 ;
  assign goodMesgCnt_incAction$whas =
	     WILL_FIRE_RL_recvPat && erx$rxf_get[9:8] != 2'd0 &&
	     rsRcvGen_gsF$D_OUT[9:8] != 2'd0 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     dstUnrollCnt == 16'd1 &&
	     wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075 &&
	     !mesgHadError ;
  assign goodMesgCnt_decAction$whas = 1'b0 ;
  assign badDataCnt_incAction$whas =
	     WILL_FIRE_RL_recvPat &&
	     !IF_erx_rxf_get_15_BITS_9_TO_8_16_EQ_0_17_OR_er_ETC___d829 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     !wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075 ;
  assign badDataCnt_decAction$whas = 1'b0 ;
  assign badMesgCnt_incAction$whas =
	     WILL_FIRE_RL_recvPat && erx$rxf_get[9:8] != 2'd0 &&
	     rsRcvGen_gsF$D_OUT[9:8] == 2'd0 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     dstUnrollCnt == 16'd1 &&
	     (!wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075 ||
	      mesgHadError) ;
  assign badMesgCnt_decAction$whas = 1'b0 ;
  assign wsi_Es_mReqLast_w$whas =
	     !biasWorker_wsiM_sThreadBusy_d &&
	     biasWorker_wsiM_reqFifo_q_0[57] ;
  assign wsi_Es_mBurstPrecise_w$whas =
	     !biasWorker_wsiM_sThreadBusy_d &&
	     biasWorker_wsiM_reqFifo_q_0[56] ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wciSeqFsm_state_set_pw$whas =
	     WILL_FIRE_RL_wciSeqFsm_idle_l162c3 ||
	     wciSeqFsm_state_mkFSMstate == 5'd21 ||
	     wciSeqFsm_state_mkFSMstate == 5'd20 ||
	     wciSeqFsm_state_mkFSMstate == 5'd19 ||
	     wciSeqFsm_state_mkFSMstate == 5'd18 ||
	     wciSeqFsm_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd11 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l168c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l167c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd2 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l164c10 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l163c5 ;
  assign wciSeqFsm_state_overlap_pw$whas = 1'b0 ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;
  assign biasWorker_wsiS_extStatusW$wget =
	     { biasWorker_wsiS_pMesgCount,
	       biasWorker_wsiS_iMesgCount,
	       biasWorker_wsiS_tBusyCount } ;
  assign biasWorker_wsiM_extStatusW$wget =
	     { biasWorker_wsiM_pMesgCount,
	       biasWorker_wsiM_iMesgCount,
	       biasWorker_wsiM_tBusyCount } ;

  // register badDataCnt_value
  assign badDataCnt_value$D_IN = MUX_badDataCnt_value$write_1__VAL_1 ;
  assign badDataCnt_value$EN = badDataCnt_incAction$whas ;

  // register badMesgCnt_value
  assign badMesgCnt_value$D_IN = MUX_badMesgCnt_value$write_1__VAL_1 ;
  assign badMesgCnt_value$EN = badMesgCnt_incAction$whas ;

  // register biasWorker_biasValue
  assign biasWorker_biasValue$D_IN =
	     MUX_biasWorker_biasValue$write_1__SEL_1 ?
	       biasWorker_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign biasWorker_biasValue$EN =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_EiI ;

  // register biasWorker_controlReg
  assign biasWorker_controlReg$D_IN =
	     MUX_biasWorker_controlReg$write_1__SEL_1 ?
	       biasWorker_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign biasWorker_controlReg$EN =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_EiI ;

  // register biasWorker_wci_wslv_cEdge
  assign biasWorker_wci_wslv_cEdge$D_IN =
	     biasWorker_wci_wslv_reqF$D_OUT[36:34] ;
  assign biasWorker_wci_wslv_cEdge$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start ;

  // register biasWorker_wci_wslv_cState
  assign biasWorker_wci_wslv_cState$D_IN = biasWorker_wci_wslv_nState ;
  assign biasWorker_wci_wslv_cState$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete &&
	     !biasWorker_wci_wslv_illegalEdge ;

  // register biasWorker_wci_wslv_ctlAckReg
  assign biasWorker_wci_wslv_ctlAckReg$D_IN =
	     biasWorker_wci_wslv_ctlAckReg_1$whas ;
  assign biasWorker_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register biasWorker_wci_wslv_ctlOpActive
  assign biasWorker_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete ;
  assign biasWorker_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start ;

  // register biasWorker_wci_wslv_illegalEdge
  assign biasWorker_wci_wslv_illegalEdge$D_IN =
	     !MUX_biasWorker_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_biasWorker_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign biasWorker_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete &&
	     biasWorker_wci_wslv_illegalEdge ||
	     MUX_biasWorker_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register biasWorker_wci_wslv_isReset_isInReset
  assign biasWorker_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign biasWorker_wci_wslv_isReset_isInReset$EN =
	     biasWorker_wci_wslv_isReset_isInReset ;

  // register biasWorker_wci_wslv_nState
  always@(biasWorker_wci_wslv_reqF$D_OUT)
  begin
    case (biasWorker_wci_wslv_reqF$D_OUT[36:34])
      3'd0: biasWorker_wci_wslv_nState$D_IN = 3'd1;
      3'd1: biasWorker_wci_wslv_nState$D_IN = 3'd2;
      3'd2: biasWorker_wci_wslv_nState$D_IN = 3'd3;
      default: biasWorker_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign biasWorker_wci_wslv_nState$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start &&
	     (biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      biasWorker_wci_wslv_cState == 3'd0 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (biasWorker_wci_wslv_cState == 3'd1 ||
	       biasWorker_wci_wslv_cState == 3'd3) ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      biasWorker_wci_wslv_cState == 3'd2 ||
	      biasWorker_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (biasWorker_wci_wslv_cState == 3'd3 ||
	       biasWorker_wci_wslv_cState == 3'd2 ||
	       biasWorker_wci_wslv_cState == 3'd1)) ;

  // register biasWorker_wci_wslv_reqF_countReg
  assign biasWorker_wci_wslv_reqF_countReg$D_IN =
	     (biasWorker_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       biasWorker_wci_wslv_reqF_countReg + 2'd1 :
	       biasWorker_wci_wslv_reqF_countReg - 2'd1 ;
  assign biasWorker_wci_wslv_reqF_countReg$EN =
	     (biasWorker_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     biasWorker_wci_wslv_reqF_r_deq$whas ;

  // register biasWorker_wci_wslv_respF_c_r
  assign biasWorker_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr ?
	       MUX_biasWorker_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_biasWorker_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign biasWorker_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr ;

  // register biasWorker_wci_wslv_respF_q_0
  always@(MUX_biasWorker_wci_wslv_respF_q_0$write_1__SEL_1 or
	  MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wci_wslv_respF_both or
	  MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr or
	  biasWorker_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_biasWorker_wci_wslv_respF_q_0$write_1__SEL_1:
	  biasWorker_wci_wslv_respF_q_0$D_IN =
	      MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wci_wslv_respF_both:
	  biasWorker_wci_wslv_respF_q_0$D_IN =
	      MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr:
	  biasWorker_wci_wslv_respF_q_0$D_IN = biasWorker_wci_wslv_respF_q_1;
      default: biasWorker_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr &&
	     biasWorker_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_both ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr ;

  // register biasWorker_wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_biasWorker_wci_wslv_respF_both or
	  MUX_biasWorker_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_biasWorker_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_biasWorker_wci_wslv_respF_both:
	  biasWorker_wci_wslv_respF_q_1$D_IN =
	      MUX_biasWorker_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_biasWorker_wci_wslv_respF_q_1$write_1__SEL_2:
	  biasWorker_wci_wslv_respF_q_1$D_IN =
	      MUX_biasWorker_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr:
	  biasWorker_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: biasWorker_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_both ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_incCtr &&
	     biasWorker_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_biasWorker_wci_wslv_respF_decCtr ;

  // register biasWorker_wci_wslv_sFlagReg
  assign biasWorker_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign biasWorker_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register biasWorker_wci_wslv_sThreadBusy_d
  assign biasWorker_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign biasWorker_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register biasWorker_wsiM_burstKind
  assign biasWorker_wsiM_burstKind$D_IN =
	     (biasWorker_wsiM_burstKind == 2'd0) ?
	       (biasWorker_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign biasWorker_wsiM_burstKind$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (biasWorker_wsiM_burstKind == 2'd0 ||
	      (biasWorker_wsiM_burstKind == 2'd1 ||
	       biasWorker_wsiM_burstKind == 2'd2) &&
	      biasWorker_wsiM_reqFifo_q_0[57]) ;

  // register biasWorker_wsiM_errorSticky
  assign biasWorker_wsiM_errorSticky$D_IN = 1'b0 ;
  assign biasWorker_wsiM_errorSticky$EN = 1'b0 ;

  // register biasWorker_wsiM_iMesgCount
  assign biasWorker_wsiM_iMesgCount$D_IN =
	     biasWorker_wsiM_iMesgCount + 32'd1 ;
  assign biasWorker_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     biasWorker_wsiM_burstKind == 2'd2 &&
	     biasWorker_wsiM_reqFifo_q_0[57] ;

  // register biasWorker_wsiM_isReset_isInReset
  assign biasWorker_wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign biasWorker_wsiM_isReset_isInReset$EN =
	     biasWorker_wsiM_isReset_isInReset ;

  // register biasWorker_wsiM_operateD
  assign biasWorker_wsiM_operateD$D_IN = biasWorker_wci_wslv_cState == 3'd2 ;
  assign biasWorker_wsiM_operateD$EN = 1'd1 ;

  // register biasWorker_wsiM_pMesgCount
  assign biasWorker_wsiM_pMesgCount$D_IN =
	     biasWorker_wsiM_pMesgCount + 32'd1 ;
  assign biasWorker_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     biasWorker_wsiM_burstKind == 2'd1 &&
	     biasWorker_wsiM_reqFifo_q_0[57] ;

  // register biasWorker_wsiM_peerIsReady
  assign biasWorker_wsiM_peerIsReady$D_IN =
	     biasWorker_wsiM_peerIsReady_1$whas ;
  assign biasWorker_wsiM_peerIsReady$EN = 1'd1 ;

  // register biasWorker_wsiM_reqFifo_c_r
  assign biasWorker_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr ?
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign biasWorker_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr ;

  // register biasWorker_wsiM_reqFifo_q_0
  always@(MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both or
	  MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr or
	  biasWorker_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1:
	  biasWorker_wsiM_reqFifo_q_0$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both:
	  biasWorker_wsiM_reqFifo_q_0$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr:
	  biasWorker_wsiM_reqFifo_q_0$D_IN = biasWorker_wsiM_reqFifo_q_1;
      default: biasWorker_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr ;

  // register biasWorker_wsiM_reqFifo_q_1
  always@(MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both or
	  MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1:
	  biasWorker_wsiM_reqFifo_q_1$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both:
	  biasWorker_wsiM_reqFifo_q_1$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr:
	  biasWorker_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: biasWorker_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr ;

  // register biasWorker_wsiM_sThreadBusy_d
  assign biasWorker_wsiM_sThreadBusy_d$D_IN =
	     biasWorker_wsiM_sThreadBusy_pw$whas ;
  assign biasWorker_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register biasWorker_wsiM_statusR
  assign biasWorker_wsiM_statusR$D_IN =
	     { biasWorker_wsiM_isReset_isInReset,
	       !biasWorker_wsiM_peerIsReady,
	       !biasWorker_wsiM_operateD,
	       biasWorker_wsiM_errorSticky,
	       biasWorker_wsiM_burstKind != 2'd0,
	       biasWorker_wsiM_sThreadBusy_d,
	       1'd0,
	       biasWorker_wsiM_trafficSticky } ;
  assign biasWorker_wsiM_statusR$EN = 1'd1 ;

  // register biasWorker_wsiM_tBusyCount
  assign biasWorker_wsiM_tBusyCount$D_IN =
	     biasWorker_wsiM_tBusyCount + 32'd1 ;
  assign biasWorker_wsiM_tBusyCount$EN =
	     biasWorker_wsiM_operateD && biasWorker_wsiM_peerIsReady &&
	     biasWorker_wsiM_sThreadBusy_d ;

  // register biasWorker_wsiM_trafficSticky
  assign biasWorker_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign biasWorker_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register biasWorker_wsiS_burstKind
  assign biasWorker_wsiS_burstKind$D_IN =
	     (biasWorker_wsiS_burstKind == 2'd0) ?
	       (biasWorker_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign biasWorker_wsiS_burstKind$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     (biasWorker_wsiS_burstKind == 2'd0 ||
	      (biasWorker_wsiS_burstKind == 2'd1 ||
	       biasWorker_wsiS_burstKind == 2'd2) &&
	      biasWorker_wsiS_wsiReq$wget[57]) ;

  // register biasWorker_wsiS_errorSticky
  assign biasWorker_wsiS_errorSticky$D_IN = 1'b0 ;
  assign biasWorker_wsiS_errorSticky$EN = 1'b0 ;

  // register biasWorker_wsiS_iMesgCount
  assign biasWorker_wsiS_iMesgCount$D_IN =
	     biasWorker_wsiS_iMesgCount + 32'd1 ;
  assign biasWorker_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_burstKind == 2'd2 &&
	     biasWorker_wsiS_wsiReq$wget[57] ;

  // register biasWorker_wsiS_isReset_isInReset
  assign biasWorker_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign biasWorker_wsiS_isReset_isInReset$EN =
	     biasWorker_wsiS_isReset_isInReset ;

  // register biasWorker_wsiS_mesgWordLength
  assign biasWorker_wsiS_mesgWordLength$D_IN = biasWorker_wsiS_wordCount ;
  assign biasWorker_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_wsiReq$wget[57] ;

  // register biasWorker_wsiS_operateD
  assign biasWorker_wsiS_operateD$D_IN = biasWorker_wci_wslv_cState == 3'd2 ;
  assign biasWorker_wsiS_operateD$EN = 1'd1 ;

  // register biasWorker_wsiS_pMesgCount
  assign biasWorker_wsiS_pMesgCount$D_IN =
	     biasWorker_wsiS_pMesgCount + 32'd1 ;
  assign biasWorker_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_burstKind == 2'd1 &&
	     biasWorker_wsiS_wsiReq$wget[57] ;

  // register biasWorker_wsiS_peerIsReady
  assign biasWorker_wsiS_peerIsReady$D_IN =
	     biasWorker_wsiS_peerIsReady_1$whas ;
  assign biasWorker_wsiS_peerIsReady$EN = 1'd1 ;

  // register biasWorker_wsiS_reqFifo_countReg
  assign biasWorker_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ?
	       biasWorker_wsiS_reqFifo_countReg + 2'd1 :
	       biasWorker_wsiS_reqFifo_countReg - 2'd1 ;
  assign biasWorker_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq !=
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register biasWorker_wsiS_reqFifo_levelsValid
  assign biasWorker_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset ;
  assign biasWorker_wsiS_reqFifo_levelsValid$EN =
	     biasWorker_wsiM_reqFifo_c_r != 2'd2 &&
	     biasWorker_wsiS_reqFifo$EMPTY_N &&
	     biasWorker_wci_wslv_cState == 3'd2 ||
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset ;

  // register biasWorker_wsiS_statusR
  assign biasWorker_wsiS_statusR$D_IN =
	     { biasWorker_wsiS_isReset_isInReset,
	       !biasWorker_wsiS_peerIsReady,
	       !biasWorker_wsiS_operateD,
	       biasWorker_wsiS_errorSticky,
	       biasWorker_wsiS_burstKind != 2'd0,
	       !biasWorker_wsiS_sThreadBusy_dw$whas ||
	       biasWorker_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       biasWorker_wsiS_trafficSticky } ;
  assign biasWorker_wsiS_statusR$EN = 1'd1 ;

  // register biasWorker_wsiS_tBusyCount
  assign biasWorker_wsiS_tBusyCount$D_IN =
	     biasWorker_wsiS_tBusyCount + 32'd1 ;
  assign biasWorker_wsiS_tBusyCount$EN =
	     biasWorker_wsiS_operateD && biasWorker_wsiS_peerIsReady &&
	     (!biasWorker_wsiS_sThreadBusy_dw$whas ||
	      biasWorker_wsiS_sThreadBusy_dw$wget) ;

  // register biasWorker_wsiS_trafficSticky
  assign biasWorker_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign biasWorker_wsiS_trafficSticky$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ;

  // register biasWorker_wsiS_wordCount
  assign biasWorker_wsiS_wordCount$D_IN =
	     biasWorker_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       biasWorker_wsiS_wordCount + 12'd1 ;
  assign biasWorker_wsiS_wordCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ;

  // register dstDataOut
  assign dstDataOut$D_IN = dstDataOut + 32'd1 ;
  assign dstDataOut$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register dstMesgCount
  assign dstMesgCount$D_IN = dstMesgCount + 16'd1 ;
  assign dstMesgCount$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     dstUnrollCnt == 16'd1 ;

  // register dstUnrollCnt
  assign dstUnrollCnt$D_IN =
	     (wciSeqFsm_state_mkFSMstate == 5'd18) ?
	       16'd16 :
	       MUX_dstUnrollCnt$write_1__VAL_2 ;
  assign dstUnrollCnt$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     wciSeqFsm_state_mkFSMstate == 5'd18 ;

  // register enWsiChecker
  assign enWsiChecker$D_IN = 1'd1 ;
  assign enWsiChecker$EN = wciSeqFsm_state_mkFSMstate == 5'd19 ;

  // register enWsiSource
  assign enWsiSource$D_IN = 1'd1 ;
  assign enWsiSource$EN = wciSeqFsm_state_mkFSMstate == 5'd21 ;

  // register goodDataCnt_value
  assign goodDataCnt_value$D_IN = MUX_goodDataCnt_value$write_1__VAL_1 ;
  assign goodDataCnt_value$EN = goodDataCnt_incAction$whas ;

  // register goodMesgCnt_value
  assign goodMesgCnt_value$D_IN = MUX_goodMesgCnt_value$write_1__VAL_1 ;
  assign goodMesgCnt_value$EN = goodMesgCnt_incAction$whas ;

  // register mesgHadError
  assign mesgHadError$D_IN =
	     dstUnrollCnt != 16'd1 &&
	     !wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075 ;
  assign mesgHadError$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register rsRcvGen_isSOF
  assign rsRcvGen_isSOF$D_IN = rsRcvGen_lenRemain == 12'd1 ;
  assign rsRcvGen_isSOF$EN = WILL_FIRE_RL_rsRcvGen_genseq ;

  // register rsRcvGen_lenRemain
  assign rsRcvGen_lenRemain$D_IN =
	     (rsRcvGen_lenRemain == 12'd1) ?
	       12'd64 :
	       rsRcvGen_lenRemain - 12'd1 ;
  assign rsRcvGen_lenRemain$EN = WILL_FIRE_RL_rsRcvGen_genseq ;

  // register rsRcvGen_pattern
  assign rsRcvGen_pattern$D_IN = rsRcvGen_pattern + 8'd1 ;
  assign rsRcvGen_pattern$EN = WILL_FIRE_RL_rsRcvGen_genseq ;

  // register rsXmtGen_isSOF
  assign rsXmtGen_isSOF$D_IN = rsXmtGen_lenRemain == 12'd1 ;
  assign rsXmtGen_isSOF$EN = WILL_FIRE_RL_rsXmtGen_genseq ;

  // register rsXmtGen_lenRemain
  assign rsXmtGen_lenRemain$D_IN =
	     (rsXmtGen_lenRemain == 12'd1) ?
	       12'd64 :
	       rsXmtGen_lenRemain - 12'd1 ;
  assign rsXmtGen_lenRemain$EN = WILL_FIRE_RL_rsXmtGen_genseq ;

  // register rsXmtGen_pattern
  assign rsXmtGen_pattern$D_IN = rsXmtGen_pattern + 8'd1 ;
  assign rsXmtGen_pattern$EN = WILL_FIRE_RL_rsXmtGen_genseq ;

  // register simCycle
  assign simCycle$D_IN = simCycle + 16'd1 ;
  assign simCycle$EN = 1'd1 ;

  // register srcDataOut
  assign srcDataOut$D_IN = srcDataOut + 32'd1 ;
  assign srcDataOut$EN = wsiM_reqFifo_enqueueing$whas ;

  // register srcMesgCount
  assign srcMesgCount$D_IN = srcMesgCount + 16'd1 ;
  assign srcMesgCount$EN =
	     wsiM_reqFifo_enqueueing$whas && srcUnrollCnt == 16'd1 ;

  // register srcUnrollCnt
  assign srcUnrollCnt$D_IN =
	     (wciSeqFsm_state_mkFSMstate == 5'd20) ?
	       16'd16 :
	       MUX_srcUnrollCnt$write_1__VAL_2 ;
  assign srcUnrollCnt$EN =
	     wsiM_reqFifo_enqueueing$whas ||
	     wciSeqFsm_state_mkFSMstate == 5'd20 ;

  // register testOperating
  assign testOperating$D_IN = 1'd1 ;
  assign testOperating$EN = wciSeqFsm_state_mkFSMstate == 5'd17 ;

  // register wciSeqFsm_start_reg
  assign wciSeqFsm_start_reg$D_IN = 1'd0 ;
  assign wciSeqFsm_start_reg$EN = WILL_FIRE_RL_wciSeqFsm_fsm_start ;

  // register wciSeqFsm_start_reg_1
  assign wciSeqFsm_start_reg_1$D_IN = wciSeqFsm_start_wire$whas ;
  assign wciSeqFsm_start_reg_1$EN = 1'd1 ;

  // register wciSeqFsm_state_can_overlap
  assign wciSeqFsm_state_can_overlap$D_IN =
	     wciSeqFsm_state_set_pw$whas || wciSeqFsm_state_can_overlap ;
  assign wciSeqFsm_state_can_overlap$EN = 1'd1 ;

  // register wciSeqFsm_state_fired
  assign wciSeqFsm_state_fired$D_IN = wciSeqFsm_state_set_pw$whas ;
  assign wciSeqFsm_state_fired$EN = 1'd1 ;

  // register wciSeqFsm_state_mkFSMstate
  always@(WILL_FIRE_RL_wciSeqFsm_idle_l162c3 or
	  WILL_FIRE_RL_wciSeqFsm_action_l163c5 or
	  WILL_FIRE_RL_wciSeqFsm_action_l164c10 or
	  wciSeqFsm_state_mkFSMstate or
	  WILL_FIRE_RL_wciSeqFsm_action_l167c8 or
	  WILL_FIRE_RL_wciSeqFsm_action_l168c5 or
	  WILL_FIRE_RL_wciSeqFsm_action_l171c8 or
	  WILL_FIRE_RL_wciSeqFsm_action_l172c5 or
	  WILL_FIRE_RL_wciSeqFsm_action_l175c8 or
	  WILL_FIRE_RL_wciSeqFsm_action_l176c5 or
	  WILL_FIRE_RL_wciSeqFsm_action_l179c8 or
	  WILL_FIRE_RL_wciSeqFsm_action_l180c5 or
	  WILL_FIRE_RL_wciSeqFsm_action_l183c8 or
	  WILL_FIRE_RL_wciSeqFsm_action_l184c5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciSeqFsm_idle_l162c3:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_wciSeqFsm_action_l163c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_wciSeqFsm_action_l164c10:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd2;
      wciSeqFsm_state_mkFSMstate == 5'd2:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_wciSeqFsm_action_l167c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_wciSeqFsm_action_l168c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd5;
      wciSeqFsm_state_mkFSMstate == 5'd5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_wciSeqFsm_action_l171c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_wciSeqFsm_action_l172c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd8;
      wciSeqFsm_state_mkFSMstate == 5'd8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_wciSeqFsm_action_l175c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_wciSeqFsm_action_l176c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd11;
      wciSeqFsm_state_mkFSMstate == 5'd11:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_wciSeqFsm_action_l179c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_wciSeqFsm_action_l180c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd14;
      wciSeqFsm_state_mkFSMstate == 5'd14:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_wciSeqFsm_action_l183c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_wciSeqFsm_action_l184c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd17;
      wciSeqFsm_state_mkFSMstate == 5'd17:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd18;
      wciSeqFsm_state_mkFSMstate == 5'd18:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd19;
      wciSeqFsm_state_mkFSMstate == 5'd19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd20;
      wciSeqFsm_state_mkFSMstate == 5'd20:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd21;
      wciSeqFsm_state_mkFSMstate == 5'd21:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd22;
      default: wciSeqFsm_state_mkFSMstate$D_IN =
		   5'b01010 /* unspecified value */ ;
    endcase
  end
  assign wciSeqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_wciSeqFsm_idle_l162c3 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l163c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l164c10 ||
	     wciSeqFsm_state_mkFSMstate == 5'd2 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l167c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l168c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd11 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd17 ||
	     wciSeqFsm_state_mkFSMstate == 5'd18 ||
	     wciSeqFsm_state_mkFSMstate == 5'd19 ||
	     wciSeqFsm_state_mkFSMstate == 5'd20 ||
	     wciSeqFsm_state_mkFSMstate == 5'd21 ;

  // register wciSeqOnce_onceReady
  assign wciSeqOnce_onceReady$D_IN = 1'b0 ;
  assign wciSeqOnce_onceReady$EN = 1'b0 ;

  // register wci_busy
  assign wci_busy$D_IN = MUX_wci_busy$write_1__SEL_1 ;
  assign wci_busy$EN =
	     _dand1wci_busy$EN_write ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 ||
	      biasWorker_wci_wslv_respF_q_0[33:32] != 2'd0) ;

  // register wci_lastConfigAddr
  assign wci_lastConfigAddr$D_IN = 33'h100000004 ;
  assign wci_lastConfigAddr$EN =
	     _dor1wci_lastConfigAddr$EN_write && wci_wReset_n ;

  // register wci_lastConfigBE
  assign wci_lastConfigBE$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 5'd26 : 5'd31 ;
  assign wci_lastConfigBE$EN =
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 && wci_wReset_n ;

  // register wci_lastControlOp
  assign wci_lastControlOp$D_IN =
	     MUX_wci_lastControlOp$write_1__SEL_1 ? 4'd8 : 4'd9 ;
  assign wci_lastControlOp$EN =
	     WILL_FIRE_RL_wciSeqFsm_action_l171c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_action_l183c8 && wci_wReset_n ;

  // register wci_lastOpWrite
  assign wci_lastOpWrite$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 2'd2 : 2'd3 ;
  assign wci_lastOpWrite$EN =
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 && wci_wReset_n ;

  // register wci_mFlagReg
  assign wci_mFlagReg$D_IN = 2'h0 ;
  assign wci_mFlagReg$EN = 1'b0 ;

  // register wci_pageWindow
  assign wci_pageWindow$D_IN = 12'h0 ;
  assign wci_pageWindow$EN = 1'b0 ;

  // register wci_reqERR
  always@(wci_reqPend or wci_reqERR)
  begin
    case (wci_reqPend)
      2'd1: wci_reqERR$D_IN = { 1'd1, wci_reqERR[1:0] };
      2'd2: wci_reqERR$D_IN = { wci_reqERR[2], 1'd1, wci_reqERR[0] };
      default: wci_reqERR$D_IN = { wci_reqERR[2:1], 1'd1 };
    endcase
  end
  assign wci_reqERR$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_wslv_respF_q_0[33:32] == 2'd3 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqFAIL
  always@(wci_reqPend or wci_reqFAIL)
  begin
    case (wci_reqPend)
      2'd1: wci_reqFAIL$D_IN = { 1'd1, wci_reqFAIL[1:0] };
      2'd2: wci_reqFAIL$D_IN = { wci_reqFAIL[2], 1'd1, wci_reqFAIL[0] };
      default: wci_reqFAIL$D_IN = { wci_reqFAIL[2:1], 1'd1 };
    endcase
  end
  assign wci_reqFAIL$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_wslv_respF_q_0[33:32] == 2'd2 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqF_c_r
  assign wci_reqF_c_r$D_IN =
	     WILL_FIRE_RL_wci_reqF_incCtr ?
	       MUX_wci_reqF_c_r$write_1__VAL_1 :
	       MUX_wci_reqF_c_r$write_1__VAL_2 ;
  assign wci_reqF_c_r$EN =
	     WILL_FIRE_RL_wci_reqF_incCtr || WILL_FIRE_RL_wci_reqF_decCtr ;

  // register wci_reqF_q_0
  always@(WILL_FIRE_RL_wci_reqF_both or
	  MUX_wci_reqF_q_0$write_1__VAL_1 or
	  MUX_wci_reqF_q_0$write_1__SEL_2 or
	  MUX_wci_reqF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wci_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_reqF_both:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_1;
      MUX_wci_reqF_q_0$write_1__SEL_2:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_reqF_decCtr:
	  wci_reqF_q_0$D_IN = 72'h0000000000AAAAAAAA;
      default: wci_reqF_q_0$D_IN =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_reqF_q_0$EN =
	     WILL_FIRE_RL_wci_reqF_both ||
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ||
	     WILL_FIRE_RL_wci_reqF_decCtr ;

  // register wci_reqPend
  always@(MUX_wci_lastConfigBE$write_1__SEL_2 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_reqPend$write_1__SEL_3 or MUX_wci_reqPend$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastConfigBE$write_1__SEL_2: wci_reqPend$D_IN = 2'd1;
      MUX_wci_lastConfigBE$write_1__SEL_1: wci_reqPend$D_IN = 2'd2;
      MUX_wci_reqPend$write_1__SEL_3: wci_reqPend$D_IN = 2'd3;
      MUX_wci_reqPend$write_1__SEL_4: wci_reqPend$D_IN = 2'd0;
      default: wci_reqPend$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign wci_reqPend$EN =
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 && wci_wReset_n ||
	     (WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	      WILL_FIRE_RL_wciSeqFsm_action_l171c8) &&
	     wci_wReset_n ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_wslv_respF_q_0[33:32] != 2'd0 ;

  // register wci_reqTO
  always@(wci_reqPend or wci_reqTO)
  begin
    case (wci_reqPend)
      2'd1: wci_reqTO$D_IN = { 1'd1, wci_reqTO[1:0] };
      2'd2: wci_reqTO$D_IN = { wci_reqTO[2], 1'd1, wci_reqTO[0] };
      default: wci_reqTO$D_IN = { wci_reqTO[2:1], 1'd1 };
    endcase
  end
  assign wci_reqTO$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	     !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_respTimr
  assign wci_respTimr$D_IN =
	     wci_reqF_c_r ? 32'd0 : MUX_wci_respTimr$write_1__VAL_2 ;
  assign wci_respTimr$EN = WILL_FIRE_RL_wci_wrkBusy || wci_reqF_c_r ;

  // register wci_respTimrAct
  assign wci_respTimrAct$D_IN = wci_reqF_c_r ;
  assign wci_respTimrAct$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 ||
	      biasWorker_wci_wslv_respF_q_0[33:32] != 2'd0) ||
	     wci_reqF_c_r ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = wci_sThreadBusy_pw$whas ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wci_sfCap
  assign wci_sfCap$D_IN = wci_sfCapSet ;
  assign wci_sfCap$EN = wci_sfCapSet || wci_sfCapClear ;

  // register wci_sfCapClear
  assign wci_sfCapClear$D_IN = 1'b0 ;
  assign wci_sfCapClear$EN = 1'd1 ;

  // register wci_sfCapSet
  assign wci_sfCapSet$D_IN = biasWorker_wci_wslv_sFlagReg ;
  assign wci_sfCapSet$EN = 1'd1 ;

  // register wci_slvPresent
  assign wci_slvPresent$D_IN = 1'd1 ;
  assign wci_slvPresent$EN = 1'd1 ;

  // register wci_wReset_n
  assign wci_wReset_n$D_IN = 1'd1 ;
  assign wci_wReset_n$EN = WILL_FIRE_RL_wciSeqFsm_action_l167c8 ;

  // register wci_wStatus
  assign wci_wStatus$D_IN =
	     { 4'b0,
	       !wci_lastOpWrite[1] || wci_lastOpWrite[0],
	       IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 } ;
  assign wci_wStatus$EN = 1'd1 ;

  // register wci_wTimeout
  assign wci_wTimeout$D_IN = 5'd4 ;
  assign wci_wTimeout$EN = WILL_FIRE_RL_wciSeqFsm_action_l167c8 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_isReset_isInReset
  assign wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiM_isReset_isInReset$EN = wsiM_isReset_isInReset ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = testOperating ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsiM_peerIsReady_1$whas ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_0$write_1__SEL_2:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsiM_sThreadBusy_pw$whas ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset_isInReset,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'b0 ;
  assign wsiS_errorSticky$EN = 1'b0 ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_isReset_isInReset
  assign wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiS_isReset_isInReset$EN = wsiS_isReset_isInReset ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = testOperating ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS_peerIsReady_1$whas ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq !=
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset_isInReset,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // submodule biasWorker_wci_wslv_reqF
  assign biasWorker_wci_wslv_reqF$D_IN = biasWorker_wci_wslv_wciReq$wget ;
  assign biasWorker_wci_wslv_reqF$ENQ =
	     biasWorker_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign biasWorker_wci_wslv_reqF$DEQ = biasWorker_wci_wslv_reqF_r_deq$whas ;
  assign biasWorker_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule biasWorker_wsiS_reqFifo
  assign biasWorker_wsiS_reqFifo$D_IN = biasWorker_wsiS_wsiReq$wget ;
  assign biasWorker_wsiS_reqFifo$ENQ =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq ;
  assign biasWorker_wsiS_reqFifo$DEQ =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule erx
  assign erx$gmii_rx_dv_i = etx$gmii_tx_en ;
  assign erx$gmii_rx_er_i = etx$gmii_tx_er ;
  assign erx$gmii_rxd_i = etx$gmii_txd ;
  assign erx$EN_rxf_get = WILL_FIRE_RL_recvPat ;

  // submodule etx
  assign etx$txf_put =
	     { CASE_rsXmtGen_gsFD_OUT_BITS_9_TO_8_3_0_rsXmtG_ETC__q1,
	       rsXmtGen_gsF$D_OUT[7:0] } ;
  assign etx$EN_txf_put =
	     etx$RDY_txf_put && rsXmtGen_gsF$EMPTY_N && simCycle > 16'd5 ;

  // submodule rsRcvGen_gsF
  assign rsRcvGen_gsF$D_IN =
	     { CASE_rsRcvGen_lenRemain_EQ_1_CONCAT_rsRcvGen_i_ETC__q2,
	       rsRcvGen_pattern } ;
  assign rsRcvGen_gsF$ENQ = WILL_FIRE_RL_rsRcvGen_genseq ;
  assign rsRcvGen_gsF$DEQ = WILL_FIRE_RL_recvPat ;
  assign rsRcvGen_gsF$CLR = 1'b0 ;

  // submodule rsXmtGen_gsF
  assign rsXmtGen_gsF$D_IN =
	     { CASE_rsXmtGen_lenRemain_EQ_1_CONCAT_rsXmtGen_i_ETC__q3,
	       rsXmtGen_pattern } ;
  assign rsXmtGen_gsF$ENQ = WILL_FIRE_RL_rsXmtGen_genseq ;
  assign rsXmtGen_gsF$DEQ =
	     etx$RDY_txf_put && rsXmtGen_gsF$EMPTY_N && simCycle > 16'd5 ;
  assign rsXmtGen_gsF$CLR = 1'b0 ;

  // submodule wci_mReset
  assign wci_mReset$ASSERT_IN = !wci_wReset_n ;

  // submodule wci_respF
  always@(MUX_wci_respF$enq_1__SEL_1 or
	  MUX_wci_busy$write_1__SEL_2 or
	  MUX_wci_respF$enq_1__VAL_2 or WILL_FIRE_RL_wciSeqFsm_action_l167c8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_respF$enq_1__SEL_1: wci_respF$D_IN = 34'h1C0DE4204;
      MUX_wci_busy$write_1__SEL_2:
	  wci_respF$D_IN = MUX_wci_respF$enq_1__VAL_2;
      WILL_FIRE_RL_wciSeqFsm_action_l167c8: wci_respF$D_IN = 34'h100000000;
      default: wci_respF$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF$ENQ =
	     _dand1wci_respF$EN_enq ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 ||
	      biasWorker_wci_wslv_respF_q_0[33:32] != 2'd0) ||
	     WILL_FIRE_RL_wciSeqFsm_action_l167c8 ;
  assign wci_respF$DEQ =
	     WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l168c5 ;
  assign wci_respF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo$DEQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_erx_rxf_get_15_BITS_9_TO_8_16_EQ_0_17_OR_er_ETC___d829 =
	     erx$rxf_get[7:0] == rsRcvGen_gsF$D_OUT[7:0] ;
  assign IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 =
	     { wci_lastControlOp[3] ? wci_lastControlOp[2:0] : 3'b111,
	       wci_lastConfigBE[4] ? wci_lastConfigBE[3:0] : 4'hF,
	       wci_lastOpWrite[1],
	       wci_lastControlOp[3],
	       wci_lastConfigBE[4],
	       wci_lastConfigAddr[32],
	       6'b0,
	       wci_sfCap,
	       wci_reqTO,
	       wci_reqFAIL,
	       wci_reqERR } ;
  assign NOT_wci_busy_5_49_AND_IF_wci_wReset_n_5_THEN_N_ETC___d962 =
	     !wci_busy && (wci_wReset_n ? !wci_reqF_c_r : wci_respF$FULL_N) ;
  assign _dand1wci_busy$EN_write =
	     (WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	      WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	      WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	      WILL_FIRE_RL_wciSeqFsm_action_l171c8) &&
	     wci_wReset_n ;
  assign _dand1wci_respF$EN_enq =
	     (WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	      WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	      WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	      WILL_FIRE_RL_wciSeqFsm_action_l171c8) &&
	     !wci_wReset_n ;
  assign _dor1wci_lastConfigAddr$EN_write =
	     WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	     WILL_FIRE_RL_wciSeqFsm_action_l175c8 ;
  assign rdat__h20822 = { 16'd0, x__h20825 } ;
  assign toCount__h2450 = 32'd1 << wci_wTimeout ;
  assign wciAddr__h63306 = { wci_pageWindow, 20'h00004 } ;
  assign wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 =
	     wci_respTimr < toCount__h2450 ;
  assign wsiBurstLength__h68725 = { 4'd0, wsiS_reqFifo$D_OUT[55:44] } ;
  assign wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075 =
	     wsiS_reqFifo$D_OUT[43:12] == dstDataOut ;
  assign x__h20825 = { biasWorker_wsiS_statusR, biasWorker_wsiM_statusR } ;
  assign x__h2609 = wci_respTimr + 32'd1 ;
  assign x__h68623 = srcUnrollCnt - 16'd1 ;
  assign x__h69084 = dstUnrollCnt - 16'd1 ;
  assign x_data__h20067 =
	     biasWorker_wsiS_reqFifo$D_OUT[43:12] + biasWorker_biasValue ;
  always@(biasWorker_wci_wslv_reqF$D_OUT or
	  biasWorker_biasValue or
	  biasWorker_controlReg or
	  rdat__h20822 or
	  biasWorker_wsiS_extStatusW$wget or biasWorker_wsiM_extStatusW$wget)
  begin
    case (biasWorker_wci_wslv_reqF$D_OUT[39:32])
      8'h0: _theResult____h20732 = biasWorker_biasValue;
      8'h04: _theResult____h20732 = biasWorker_controlReg;
      8'h20: _theResult____h20732 = rdat__h20822;
      8'h24: _theResult____h20732 = biasWorker_wsiS_extStatusW$wget[95:64];
      8'h28: _theResult____h20732 = biasWorker_wsiS_extStatusW$wget[63:32];
      8'h2C: _theResult____h20732 = biasWorker_wsiS_extStatusW$wget[31:0];
      8'h30: _theResult____h20732 = biasWorker_wsiM_extStatusW$wget[95:64];
      8'h34: _theResult____h20732 = biasWorker_wsiM_extStatusW$wget[63:32];
      8'h38: _theResult____h20732 = biasWorker_wsiM_extStatusW$wget[31:0];
      default: _theResult____h20732 = 32'd0;
    endcase
  end
  always@(rsXmtGen_gsF$D_OUT)
  begin
    case (rsXmtGen_gsF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rsXmtGen_gsFD_OUT_BITS_9_TO_8_3_0_rsXmtG_ETC__q1 =
	      rsXmtGen_gsF$D_OUT[9:8];
      2'd3: CASE_rsXmtGen_gsFD_OUT_BITS_9_TO_8_3_0_rsXmtG_ETC__q1 = 2'd3;
    endcase
  end
  always@(rsRcvGen_lenRemain or rsRcvGen_isSOF)
  begin
    case ({ rsRcvGen_lenRemain == 12'd1, rsRcvGen_isSOF })
      2'd0, 2'd1:
	  CASE_rsRcvGen_lenRemain_EQ_1_CONCAT_rsRcvGen_i_ETC__q2 = 2'd0;
      default: CASE_rsRcvGen_lenRemain_EQ_1_CONCAT_rsRcvGen_i_ETC__q2 = 2'd1;
    endcase
  end
  always@(rsXmtGen_lenRemain or rsXmtGen_isSOF)
  begin
    case ({ rsXmtGen_lenRemain == 12'd1, rsXmtGen_isSOF })
      2'd0, 2'd1:
	  CASE_rsXmtGen_lenRemain_EQ_1_CONCAT_rsXmtGen_i_ETC__q3 = 2'd0;
      default: CASE_rsXmtGen_lenRemain_EQ_1_CONCAT_rsXmtGen_i_ETC__q3 = 2'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        badDataCnt_value <= `BSV_ASSIGNMENT_DELAY 32'd0;
	badMesgCnt_value <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dstDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dstMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	enWsiChecker <= `BSV_ASSIGNMENT_DELAY 1'd0;
	enWsiSource <= `BSV_ASSIGNMENT_DELAY 1'd0;
	goodDataCnt_value <= `BSV_ASSIGNMENT_DELAY 32'd0;
	goodMesgCnt_value <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mesgHadError <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rsRcvGen_isSOF <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rsRcvGen_lenRemain <= `BSV_ASSIGNMENT_DELAY 12'd64;
	rsRcvGen_pattern <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rsXmtGen_isSOF <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rsXmtGen_lenRemain <= `BSV_ASSIGNMENT_DELAY 12'd64;
	rsXmtGen_pattern <= `BSV_ASSIGNMENT_DELAY 8'd0;
	simCycle <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	srcMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	testOperating <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wciSeqFsm_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY 5'd10;
	wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY 4'd2;
	wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY 2'b10;
	wci_pageWindow <= `BSV_ASSIGNMENT_DELAY 12'd0;
	wci_reqERR <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 72'h0000000000AAAAAAAA;
	wci_reqPend <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_reqTO <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_respTimr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_sfCap <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_slvPresent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wTimeout <= `BSV_ASSIGNMENT_DELAY 5'h04;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (badDataCnt_value$EN)
	  badDataCnt_value <= `BSV_ASSIGNMENT_DELAY badDataCnt_value$D_IN;
	if (badMesgCnt_value$EN)
	  badMesgCnt_value <= `BSV_ASSIGNMENT_DELAY badMesgCnt_value$D_IN;
	if (dstDataOut$EN)
	  dstDataOut <= `BSV_ASSIGNMENT_DELAY dstDataOut$D_IN;
	if (dstMesgCount$EN)
	  dstMesgCount <= `BSV_ASSIGNMENT_DELAY dstMesgCount$D_IN;
	if (dstUnrollCnt$EN)
	  dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY dstUnrollCnt$D_IN;
	if (enWsiChecker$EN)
	  enWsiChecker <= `BSV_ASSIGNMENT_DELAY enWsiChecker$D_IN;
	if (enWsiSource$EN)
	  enWsiSource <= `BSV_ASSIGNMENT_DELAY enWsiSource$D_IN;
	if (goodDataCnt_value$EN)
	  goodDataCnt_value <= `BSV_ASSIGNMENT_DELAY goodDataCnt_value$D_IN;
	if (goodMesgCnt_value$EN)
	  goodMesgCnt_value <= `BSV_ASSIGNMENT_DELAY goodMesgCnt_value$D_IN;
	if (mesgHadError$EN)
	  mesgHadError <= `BSV_ASSIGNMENT_DELAY mesgHadError$D_IN;
	if (rsRcvGen_isSOF$EN)
	  rsRcvGen_isSOF <= `BSV_ASSIGNMENT_DELAY rsRcvGen_isSOF$D_IN;
	if (rsRcvGen_lenRemain$EN)
	  rsRcvGen_lenRemain <= `BSV_ASSIGNMENT_DELAY rsRcvGen_lenRemain$D_IN;
	if (rsRcvGen_pattern$EN)
	  rsRcvGen_pattern <= `BSV_ASSIGNMENT_DELAY rsRcvGen_pattern$D_IN;
	if (rsXmtGen_isSOF$EN)
	  rsXmtGen_isSOF <= `BSV_ASSIGNMENT_DELAY rsXmtGen_isSOF$D_IN;
	if (rsXmtGen_lenRemain$EN)
	  rsXmtGen_lenRemain <= `BSV_ASSIGNMENT_DELAY rsXmtGen_lenRemain$D_IN;
	if (rsXmtGen_pattern$EN)
	  rsXmtGen_pattern <= `BSV_ASSIGNMENT_DELAY rsXmtGen_pattern$D_IN;
	if (simCycle$EN) simCycle <= `BSV_ASSIGNMENT_DELAY simCycle$D_IN;
	if (srcDataOut$EN)
	  srcDataOut <= `BSV_ASSIGNMENT_DELAY srcDataOut$D_IN;
	if (srcMesgCount$EN)
	  srcMesgCount <= `BSV_ASSIGNMENT_DELAY srcMesgCount$D_IN;
	if (srcUnrollCnt$EN)
	  srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY srcUnrollCnt$D_IN;
	if (testOperating$EN)
	  testOperating <= `BSV_ASSIGNMENT_DELAY testOperating$D_IN;
	if (wciSeqFsm_start_reg$EN)
	  wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_start_reg$D_IN;
	if (wciSeqFsm_start_reg_1$EN)
	  wciSeqFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_start_reg_1$D_IN;
	if (wciSeqFsm_state_can_overlap$EN)
	  wciSeqFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_can_overlap$D_IN;
	if (wciSeqFsm_state_fired$EN)
	  wciSeqFsm_state_fired <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_fired$D_IN;
	if (wciSeqFsm_state_mkFSMstate$EN)
	  wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_mkFSMstate$D_IN;
	if (wciSeqOnce_onceReady$EN)
	  wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY
	      wciSeqOnce_onceReady$D_IN;
	if (wci_busy$EN) wci_busy <= `BSV_ASSIGNMENT_DELAY wci_busy$D_IN;
	if (wci_lastConfigAddr$EN)
	  wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY wci_lastConfigAddr$D_IN;
	if (wci_lastConfigBE$EN)
	  wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY wci_lastConfigBE$D_IN;
	if (wci_lastControlOp$EN)
	  wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY wci_lastControlOp$D_IN;
	if (wci_lastOpWrite$EN)
	  wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY wci_lastOpWrite$D_IN;
	if (wci_mFlagReg$EN)
	  wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY wci_mFlagReg$D_IN;
	if (wci_pageWindow$EN)
	  wci_pageWindow <= `BSV_ASSIGNMENT_DELAY wci_pageWindow$D_IN;
	if (wci_reqERR$EN)
	  wci_reqERR <= `BSV_ASSIGNMENT_DELAY wci_reqERR$D_IN;
	if (wci_reqFAIL$EN)
	  wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY wci_reqFAIL$D_IN;
	if (wci_reqF_c_r$EN)
	  wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY wci_reqF_c_r$D_IN;
	if (wci_reqF_q_0$EN)
	  wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_reqF_q_0$D_IN;
	if (wci_reqPend$EN)
	  wci_reqPend <= `BSV_ASSIGNMENT_DELAY wci_reqPend$D_IN;
	if (wci_reqTO$EN) wci_reqTO <= `BSV_ASSIGNMENT_DELAY wci_reqTO$D_IN;
	if (wci_respTimr$EN)
	  wci_respTimr <= `BSV_ASSIGNMENT_DELAY wci_respTimr$D_IN;
	if (wci_respTimrAct$EN)
	  wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY wci_respTimrAct$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wci_sfCap$EN) wci_sfCap <= `BSV_ASSIGNMENT_DELAY wci_sfCap$D_IN;
	if (wci_sfCapClear$EN)
	  wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY wci_sfCapClear$D_IN;
	if (wci_sfCapSet$EN)
	  wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY wci_sfCapSet$D_IN;
	if (wci_slvPresent$EN)
	  wci_slvPresent <= `BSV_ASSIGNMENT_DELAY wci_slvPresent$D_IN;
	if (wci_wReset_n$EN)
	  wci_wReset_n <= `BSV_ASSIGNMENT_DELAY wci_wReset_n$D_IN;
	if (wci_wTimeout$EN)
	  wci_wTimeout <= `BSV_ASSIGNMENT_DELAY wci_wTimeout$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (!wci_mReset$OUT_RST_N)
      begin
        biasWorker_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	biasWorker_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	biasWorker_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	biasWorker_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	biasWorker_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	biasWorker_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	biasWorker_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	biasWorker_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	biasWorker_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	biasWorker_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	biasWorker_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (biasWorker_wci_wslv_cEdge$EN)
	  biasWorker_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_cEdge$D_IN;
	if (biasWorker_wci_wslv_cState$EN)
	  biasWorker_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_cState$D_IN;
	if (biasWorker_wci_wslv_ctlAckReg$EN)
	  biasWorker_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_ctlAckReg$D_IN;
	if (biasWorker_wci_wslv_ctlOpActive$EN)
	  biasWorker_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_ctlOpActive$D_IN;
	if (biasWorker_wci_wslv_illegalEdge$EN)
	  biasWorker_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_illegalEdge$D_IN;
	if (biasWorker_wci_wslv_nState$EN)
	  biasWorker_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_nState$D_IN;
	if (biasWorker_wci_wslv_reqF_countReg$EN)
	  biasWorker_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_reqF_countReg$D_IN;
	if (biasWorker_wci_wslv_respF_c_r$EN)
	  biasWorker_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_respF_c_r$D_IN;
	if (biasWorker_wci_wslv_respF_q_0$EN)
	  biasWorker_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_respF_q_0$D_IN;
	if (biasWorker_wci_wslv_respF_q_1$EN)
	  biasWorker_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_respF_q_1$D_IN;
	if (biasWorker_wci_wslv_sFlagReg$EN)
	  biasWorker_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_sFlagReg$D_IN;
	if (biasWorker_wci_wslv_sThreadBusy_d$EN)
	  biasWorker_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_wslv_sThreadBusy_d$D_IN;
	if (biasWorker_wsiM_burstKind$EN)
	  biasWorker_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_burstKind$D_IN;
	if (biasWorker_wsiM_errorSticky$EN)
	  biasWorker_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_errorSticky$D_IN;
	if (biasWorker_wsiM_iMesgCount$EN)
	  biasWorker_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_iMesgCount$D_IN;
	if (biasWorker_wsiM_operateD$EN)
	  biasWorker_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_operateD$D_IN;
	if (biasWorker_wsiM_pMesgCount$EN)
	  biasWorker_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_pMesgCount$D_IN;
	if (biasWorker_wsiM_peerIsReady$EN)
	  biasWorker_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_peerIsReady$D_IN;
	if (biasWorker_wsiM_reqFifo_c_r$EN)
	  biasWorker_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_reqFifo_c_r$D_IN;
	if (biasWorker_wsiM_reqFifo_q_0$EN)
	  biasWorker_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_reqFifo_q_0$D_IN;
	if (biasWorker_wsiM_reqFifo_q_1$EN)
	  biasWorker_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_reqFifo_q_1$D_IN;
	if (biasWorker_wsiM_sThreadBusy_d$EN)
	  biasWorker_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_sThreadBusy_d$D_IN;
	if (biasWorker_wsiM_tBusyCount$EN)
	  biasWorker_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_tBusyCount$D_IN;
	if (biasWorker_wsiM_trafficSticky$EN)
	  biasWorker_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_trafficSticky$D_IN;
	if (biasWorker_wsiS_burstKind$EN)
	  biasWorker_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_burstKind$D_IN;
	if (biasWorker_wsiS_errorSticky$EN)
	  biasWorker_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_errorSticky$D_IN;
	if (biasWorker_wsiS_iMesgCount$EN)
	  biasWorker_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_iMesgCount$D_IN;
	if (biasWorker_wsiS_operateD$EN)
	  biasWorker_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_operateD$D_IN;
	if (biasWorker_wsiS_pMesgCount$EN)
	  biasWorker_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_pMesgCount$D_IN;
	if (biasWorker_wsiS_peerIsReady$EN)
	  biasWorker_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_peerIsReady$D_IN;
	if (biasWorker_wsiS_reqFifo_countReg$EN)
	  biasWorker_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_reqFifo_countReg$D_IN;
	if (biasWorker_wsiS_reqFifo_levelsValid$EN)
	  biasWorker_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_reqFifo_levelsValid$D_IN;
	if (biasWorker_wsiS_tBusyCount$EN)
	  biasWorker_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_tBusyCount$D_IN;
	if (biasWorker_wsiS_trafficSticky$EN)
	  biasWorker_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_trafficSticky$D_IN;
	if (biasWorker_wsiS_wordCount$EN)
	  biasWorker_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_wordCount$D_IN;
      end
    if (biasWorker_biasValue$EN)
      biasWorker_biasValue <= `BSV_ASSIGNMENT_DELAY biasWorker_biasValue$D_IN;
    if (biasWorker_controlReg$EN)
      biasWorker_controlReg <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_controlReg$D_IN;
    if (biasWorker_wsiM_statusR$EN)
      biasWorker_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_wsiM_statusR$D_IN;
    if (biasWorker_wsiS_mesgWordLength$EN)
      biasWorker_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_wsiS_mesgWordLength$D_IN;
    if (biasWorker_wsiS_statusR$EN)
      biasWorker_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_wsiS_statusR$D_IN;
    if (wci_wStatus$EN) wci_wStatus <= `BSV_ASSIGNMENT_DELAY wci_wStatus$D_IN;
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge CLK or negedge RST_N)
  if (!RST_N)
    begin
      wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wsiM_isReset_isInReset$EN)
	wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiM_isReset_isInReset$D_IN;
      if (wsiS_isReset_isInReset$EN)
	wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiS_isReset_isInReset$D_IN;
    end

  always@(posedge CLK or negedge wci_mReset$OUT_RST_N)
  if (!wci_mReset$OUT_RST_N)
    begin
      biasWorker_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      biasWorker_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      biasWorker_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (biasWorker_wci_wslv_isReset_isInReset$EN)
	biasWorker_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    biasWorker_wci_wslv_isReset_isInReset$D_IN;
      if (biasWorker_wsiM_isReset_isInReset$EN)
	biasWorker_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    biasWorker_wsiM_isReset_isInReset$D_IN;
      if (biasWorker_wsiS_isReset_isInReset$EN)
	biasWorker_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    biasWorker_wsiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    badDataCnt_value = 32'hAAAAAAAA;
    badMesgCnt_value = 32'hAAAAAAAA;
    biasWorker_biasValue = 32'hAAAAAAAA;
    biasWorker_controlReg = 32'hAAAAAAAA;
    biasWorker_wci_wslv_cEdge = 3'h2;
    biasWorker_wci_wslv_cState = 3'h2;
    biasWorker_wci_wslv_ctlAckReg = 1'h0;
    biasWorker_wci_wslv_ctlOpActive = 1'h0;
    biasWorker_wci_wslv_illegalEdge = 1'h0;
    biasWorker_wci_wslv_isReset_isInReset = 1'h0;
    biasWorker_wci_wslv_nState = 3'h2;
    biasWorker_wci_wslv_reqF_countReg = 2'h2;
    biasWorker_wci_wslv_respF_c_r = 2'h2;
    biasWorker_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    biasWorker_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    biasWorker_wci_wslv_sFlagReg = 1'h0;
    biasWorker_wci_wslv_sThreadBusy_d = 1'h0;
    biasWorker_wsiM_burstKind = 2'h2;
    biasWorker_wsiM_errorSticky = 1'h0;
    biasWorker_wsiM_iMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiM_isReset_isInReset = 1'h0;
    biasWorker_wsiM_operateD = 1'h0;
    biasWorker_wsiM_pMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiM_peerIsReady = 1'h0;
    biasWorker_wsiM_reqFifo_c_r = 2'h2;
    biasWorker_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    biasWorker_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    biasWorker_wsiM_sThreadBusy_d = 1'h0;
    biasWorker_wsiM_statusR = 8'hAA;
    biasWorker_wsiM_tBusyCount = 32'hAAAAAAAA;
    biasWorker_wsiM_trafficSticky = 1'h0;
    biasWorker_wsiS_burstKind = 2'h2;
    biasWorker_wsiS_errorSticky = 1'h0;
    biasWorker_wsiS_iMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiS_isReset_isInReset = 1'h0;
    biasWorker_wsiS_mesgWordLength = 12'hAAA;
    biasWorker_wsiS_operateD = 1'h0;
    biasWorker_wsiS_pMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiS_peerIsReady = 1'h0;
    biasWorker_wsiS_reqFifo_countReg = 2'h2;
    biasWorker_wsiS_reqFifo_levelsValid = 1'h0;
    biasWorker_wsiS_statusR = 8'hAA;
    biasWorker_wsiS_tBusyCount = 32'hAAAAAAAA;
    biasWorker_wsiS_trafficSticky = 1'h0;
    biasWorker_wsiS_wordCount = 12'hAAA;
    dstDataOut = 32'hAAAAAAAA;
    dstMesgCount = 16'hAAAA;
    dstUnrollCnt = 16'hAAAA;
    enWsiChecker = 1'h0;
    enWsiSource = 1'h0;
    goodDataCnt_value = 32'hAAAAAAAA;
    goodMesgCnt_value = 32'hAAAAAAAA;
    mesgHadError = 1'h0;
    rsRcvGen_isSOF = 1'h0;
    rsRcvGen_lenRemain = 12'hAAA;
    rsRcvGen_pattern = 8'hAA;
    rsXmtGen_isSOF = 1'h0;
    rsXmtGen_lenRemain = 12'hAAA;
    rsXmtGen_pattern = 8'hAA;
    simCycle = 16'hAAAA;
    srcDataOut = 32'hAAAAAAAA;
    srcMesgCount = 16'hAAAA;
    srcUnrollCnt = 16'hAAAA;
    testOperating = 1'h0;
    wciSeqFsm_start_reg = 1'h0;
    wciSeqFsm_start_reg_1 = 1'h0;
    wciSeqFsm_state_can_overlap = 1'h0;
    wciSeqFsm_state_fired = 1'h0;
    wciSeqFsm_state_mkFSMstate = 5'h0A;
    wciSeqOnce_onceReady = 1'h0;
    wci_busy = 1'h0;
    wci_lastConfigAddr = 33'h0AAAAAAAA;
    wci_lastConfigBE = 5'h0A;
    wci_lastControlOp = 4'hA;
    wci_lastOpWrite = 2'h2;
    wci_mFlagReg = 2'h2;
    wci_pageWindow = 12'hAAA;
    wci_reqERR = 3'h2;
    wci_reqFAIL = 3'h2;
    wci_reqF_c_r = 1'h0;
    wci_reqF_q_0 = 72'hAAAAAAAAAAAAAAAAAA;
    wci_reqPend = 2'h2;
    wci_reqTO = 3'h2;
    wci_respTimr = 32'hAAAAAAAA;
    wci_respTimrAct = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wci_sfCap = 1'h0;
    wci_sfCapClear = 1'h0;
    wci_sfCapSet = 1'h0;
    wci_slvPresent = 1'h0;
    wci_wReset_n = 1'h0;
    wci_wStatus = 32'hAAAAAAAA;
    wci_wTimeout = 5'h0A;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_isReset_isInReset = 1'h0;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_isReset_isInReset = 1'h0;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_recvPat &&
	  !IF_erx_rxf_get_15_BITS_9_TO_8_16_EQ_0_17_OR_er_ETC___d829)
	begin
	  v__h25257 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_recvPat &&
	  !IF_erx_rxf_get_15_BITS_9_TO_8_16_EQ_0_17_OR_er_ETC___d829)
	$display("[%0d]: %m: recvPat MISMATCH: exp:%0x got:%0x",
		 v__h25257,
		 rsRcvGen_gsF$D_OUT[7:0],
		 erx$rxf_get[7:0]);
    if (RST_N)
      if (WILL_FIRE_RL_recvPat && erx$rxf_get[9:8] != 2'd0 &&
	  rsRcvGen_gsF$D_OUT[9:8] == 2'd0)
	begin
	  v__h25566 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_recvPat && erx$rxf_get[9:8] != 2'd0 &&
	  rsRcvGen_gsF$D_OUT[9:8] == 2'd0)
	$display("[%0d]: %m: recv EOF MISMATCH: exp:%0x got:%0x",
		 v__h25566,
		 1'd0,
		 1'd1);
    if (RST_N)
      if (wsiM_reqFifo_enqueueing$whas && srcUnrollCnt == 16'd1)
	begin
	  v__h68683 = $time;
	  #0;
	end
    if (RST_N)
      if (wsiM_reqFifo_enqueueing$whas && srcUnrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Producer Egress: srcMesgCount:%0x opcode:%0x",
		 v__h68683,
		 srcMesgCount,
		 8'd0);
    if (RST_N)
      if (simCycle == 16'd1000)
	begin
	  v__h69311 = $time;
	  #0;
	end
    if (RST_N)
      if (simCycle == 16'd1000)
	$display("[%0d]: %m: mkGMACTB termination", v__h69311);
    if (RST_N)
      if (simCycle == 16'd1000)
	$display("goodDataCnt : %08x (%d)",
		 $unsigned(goodDataCnt_value),
		 $unsigned(goodDataCnt_value));
    if (RST_N)
      if (simCycle == 16'd1000)
	$display("goodMesgCnt : %08x (%d)",
		 $unsigned(goodMesgCnt_value),
		 $unsigned(goodMesgCnt_value));
    if (RST_N)
      if (simCycle == 16'd1000)
	$display("badDataCnt  : %08x (%d)",
		 $unsigned(badDataCnt_value),
		 $unsigned(badDataCnt_value));
    if (RST_N)
      if (simCycle == 16'd1000)
	$display("badMesgCnt  : %08x (%d)",
		 $unsigned(badMesgCnt_value),
		 $unsigned(badMesgCnt_value));
    if (RST_N)
      if (simCycle == 16'd1000 && badDataCnt_value == 32'h0)
	$display("mkGMACTB PASSED OK");
    if (RST_N)
      if (simCycle == 16'd1000 && badDataCnt_value != 32'h0)
	$display("mkGMACTB had %d ERRORS and FAILED",
		 $unsigned(badDataCnt_value));
    if (RST_N) if (simCycle == 16'd1000) $finish(32'd1);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h2742 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE TIMEOUT", v__h2742);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h2832 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  TIMEOUT", v__h2832);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h2921 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d1110 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   TIMEOUT", v__h2921);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3145 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-FAIL", v__h3145);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3235 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-FAIL", v__h3235);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3324 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-FAIL", v__h3324);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3553 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-ERR", v__h3553);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3643 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-ERR", v__h3643);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3732 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_wslv_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-ERR", v__h3732);
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	  !wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075)
	begin
	  v__h68928 = $time;
	  #0;
	end
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	  !wsiS_reqFifo_first__040_BITS_43_TO_12_041_EQ_d_ETC___d1075)
	$display("[%0d]: %m: wsi_checker MISMATCH: exp:%0x got:%0x srcMesgCount:%0x",
		 v__h68928,
		 dstDataOut,
		 wsiS_reqFifo$D_OUT[43:12],
		 dstMesgCount);
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	  dstUnrollCnt == 16'd1)
	begin
	  v__h69116 = $time;
	  #0;
	end
    if (RST_N)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	  dstUnrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Consumer Ingress: dstMesgCount:%0x opcode:%0x",
		 v__h69116,
		 dstMesgCount,
		 wsiS_reqFifo$D_OUT[7:0]);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start)
	begin
	  v__h13547 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h13547,
		 biasWorker_wci_wslv_reqF$D_OUT[36:34],
		 biasWorker_wci_wslv_cState);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctrl_EiI &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_OrE)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_ctrl_EiI] and\n  [RL_biasWorker_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctrl_EiI &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_IsO)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_ctrl_EiI] and\n  [RL_biasWorker_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctrl_IsO &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_OrE)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_ctrl_IsO] and\n  [RL_biasWorker_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr)
	begin
	  v__h20595 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h20595,
		 biasWorker_wci_wslv_reqF$D_OUT[63:32],
		 biasWorker_wci_wslv_reqF$D_OUT[67:64],
		 biasWorker_wci_wslv_reqF$D_OUT[31:0]);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete &&
	  biasWorker_wci_wslv_illegalEdge)
	begin
	  v__h13865 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete &&
	  biasWorker_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h13865,
		 biasWorker_wci_wslv_cEdge,
		 biasWorker_wci_wslv_cState);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete &&
	  !biasWorker_wci_wslv_illegalEdge)
	begin
	  v__h13721 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_wslv_ctl_op_complete &&
	  !biasWorker_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h13721,
		 biasWorker_wci_wslv_cEdge,
		 biasWorker_wci_wslv_cState,
		 biasWorker_wci_wslv_nState);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd)
	begin
	  v__h20748 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h20748,
		 biasWorker_wci_wslv_reqF$D_OUT[63:32],
		 biasWorker_wci_wslv_reqF$D_OUT[67:64],
		 _theResult____h20732);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_OrE)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_cfwr] and\n  [RL_biasWorker_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_IsO)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_cfwr] and\n  [RL_biasWorker_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_EiI)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_cfwr] and\n  [RL_biasWorker_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_cfrd)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_cfwr] and\n  [RL_biasWorker_wci_cfrd] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_OrE)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_cfrd] and\n  [RL_biasWorker_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_IsO)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_cfrd] and\n  [RL_biasWorker_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_EiI)
	$display("Error: \"../wrk/BiasWorker.bsv\", line 67, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_biasWorker_wci_cfrd] and\n  [RL_biasWorker_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd2)
	begin
	  v__h60910 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd2)
	$display("[%0d]: %m: Taking DUT out of Reset...", v__h60910);
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd5)
	begin
	  v__h61952 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd5)
	$display("[%0d]: %m: CONTROL-OP: -INITIALIZE- DUT...", v__h61952);
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l171c8)
	begin
	  v__h62256 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l171c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h62256);
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd8)
	begin
	  v__h63024 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd8)
	$display("[%0d]: %m: Write Dataplane Config Properties...",
		 v__h63024);
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd11)
	begin
	  v__h64097 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd11)
	$display("[%0d]: %m: Read Dataplane Config Properties...", v__h64097);
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd14)
	begin
	  v__h65251 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd14)
	$display("[%0d]: %m: CONTROL-OP: -START- DUT...", v__h65251);
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l183c8)
	begin
	  v__h65627 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l183c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h65627);
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l164c10 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd2 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l167c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l168c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd5 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 164, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l164c10] and\n  [RL_wciSeqFsm_action_l166c5, RL_wciSeqFsm_action_l167c8,\n  RL_wciSeqFsm_action_l168c5, RL_wciSeqFsm_action_l170c5,\n  RL_wciSeqFsm_action_l171c8, RL_wciSeqFsm_action_l172c5,\n  RL_wciSeqFsm_action_l174c5, RL_wciSeqFsm_action_l175c8,\n  RL_wciSeqFsm_action_l176c5, RL_wciSeqFsm_action_l178c5,\n  RL_wciSeqFsm_action_l179c8, RL_wciSeqFsm_action_l180c5,\n  RL_wciSeqFsm_action_l182c5, RL_wciSeqFsm_action_l183c8,\n  RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd2 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l167c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l168c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd5 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 166, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l166c5] and\n  [RL_wciSeqFsm_action_l167c8, RL_wciSeqFsm_action_l168c5,\n  RL_wciSeqFsm_action_l170c5, RL_wciSeqFsm_action_l171c8,\n  RL_wciSeqFsm_action_l172c5, RL_wciSeqFsm_action_l174c5,\n  RL_wciSeqFsm_action_l175c8, RL_wciSeqFsm_action_l176c5,\n  RL_wciSeqFsm_action_l178c5, RL_wciSeqFsm_action_l179c8,\n  RL_wciSeqFsm_action_l180c5, RL_wciSeqFsm_action_l182c5,\n  RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l168c5 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd5 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 168, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l168c5] and\n  [RL_wciSeqFsm_action_l170c5, RL_wciSeqFsm_action_l171c8,\n  RL_wciSeqFsm_action_l172c5, RL_wciSeqFsm_action_l174c5,\n  RL_wciSeqFsm_action_l175c8, RL_wciSeqFsm_action_l176c5,\n  RL_wciSeqFsm_action_l178c5, RL_wciSeqFsm_action_l179c8,\n  RL_wciSeqFsm_action_l180c5, RL_wciSeqFsm_action_l182c5,\n  RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l167c8 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l168c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd5 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 167, column 8: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l167c8] and\n  [RL_wciSeqFsm_action_l168c5, RL_wciSeqFsm_action_l170c5,\n  RL_wciSeqFsm_action_l171c8, RL_wciSeqFsm_action_l172c5,\n  RL_wciSeqFsm_action_l174c5, RL_wciSeqFsm_action_l175c8,\n  RL_wciSeqFsm_action_l176c5, RL_wciSeqFsm_action_l178c5,\n  RL_wciSeqFsm_action_l179c8, RL_wciSeqFsm_action_l180c5,\n  RL_wciSeqFsm_action_l182c5, RL_wciSeqFsm_action_l183c8,\n  RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd5 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 170, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l170c5] and\n  [RL_wciSeqFsm_action_l171c8, RL_wciSeqFsm_action_l172c5,\n  RL_wciSeqFsm_action_l174c5, RL_wciSeqFsm_action_l175c8,\n  RL_wciSeqFsm_action_l176c5, RL_wciSeqFsm_action_l178c5,\n  RL_wciSeqFsm_action_l179c8, RL_wciSeqFsm_action_l180c5,\n  RL_wciSeqFsm_action_l182c5, RL_wciSeqFsm_action_l183c8,\n  RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l171c8 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 171, column 8: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l171c8] and\n  [RL_wciSeqFsm_action_l172c5, RL_wciSeqFsm_action_l174c5,\n  RL_wciSeqFsm_action_l175c8, RL_wciSeqFsm_action_l176c5,\n  RL_wciSeqFsm_action_l178c5, RL_wciSeqFsm_action_l179c8,\n  RL_wciSeqFsm_action_l180c5, RL_wciSeqFsm_action_l182c5,\n  RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l172c5 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 172, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l172c5] and\n  [RL_wciSeqFsm_action_l174c5, RL_wciSeqFsm_action_l175c8,\n  RL_wciSeqFsm_action_l176c5, RL_wciSeqFsm_action_l178c5,\n  RL_wciSeqFsm_action_l179c8, RL_wciSeqFsm_action_l180c5,\n  RL_wciSeqFsm_action_l182c5, RL_wciSeqFsm_action_l183c8,\n  RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l175c8 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 175, column 8: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l175c8] and\n  [RL_wciSeqFsm_action_l176c5, RL_wciSeqFsm_action_l178c5,\n  RL_wciSeqFsm_action_l179c8, RL_wciSeqFsm_action_l180c5,\n  RL_wciSeqFsm_action_l182c5, RL_wciSeqFsm_action_l183c8,\n  RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd8 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 174, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l174c5] and\n  [RL_wciSeqFsm_action_l175c8, RL_wciSeqFsm_action_l176c5,\n  RL_wciSeqFsm_action_l178c5, RL_wciSeqFsm_action_l179c8,\n  RL_wciSeqFsm_action_l180c5, RL_wciSeqFsm_action_l182c5,\n  RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l176c5 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 176, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l176c5] and\n  [RL_wciSeqFsm_action_l178c5, RL_wciSeqFsm_action_l179c8,\n  RL_wciSeqFsm_action_l180c5, RL_wciSeqFsm_action_l182c5,\n  RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd11 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 178, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l178c5] and\n  [RL_wciSeqFsm_action_l179c8, RL_wciSeqFsm_action_l180c5,\n  RL_wciSeqFsm_action_l182c5, RL_wciSeqFsm_action_l183c8,\n  RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l180c5 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 180, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l180c5] and\n  [RL_wciSeqFsm_action_l182c5, RL_wciSeqFsm_action_l183c8,\n  RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l179c8 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 179, column 8: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l179c8] and\n  [RL_wciSeqFsm_action_l180c5, RL_wciSeqFsm_action_l182c5,\n  RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd14 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 182, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l182c5] and\n  [RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l183c8 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 183, column 8: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l183c8] and\n  [RL_wciSeqFsm_action_l184c5, RL_wciSeqFsm_action_l186c19,\n  RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l184c5 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 184, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l184c5] and\n  [RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd17 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 186, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l186c19] and\n  [RL_wciSeqFsm_action_l187c19, RL_wciSeqFsm_action_l188c19,\n  RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd18 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 187, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l187c19] and\n  [RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd19 &&
	  (wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 188, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l188c19] and\n  [RL_wciSeqFsm_action_l189c19, RL_wciSeqFsm_action_l190c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd20 &&
	  wciSeqFsm_state_mkFSMstate == 5'd21)
	$display("Error: \"GMACTB.bsv\", line 189, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l189c19] and\n  [RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l163c5)
	begin
	  v__h60482 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l163c5)
	$display("[%0d]: %m: Checking for DUT presence...", v__h60482);
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_action_l163c5 &&
	  (WILL_FIRE_RL_wciSeqFsm_action_l164c10 ||
	   wciSeqFsm_state_mkFSMstate == 5'd2 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l167c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l168c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd5 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l171c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l172c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l175c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l176c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd11 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l179c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l180c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l183c8 ||
	   WILL_FIRE_RL_wciSeqFsm_action_l184c5 ||
	   wciSeqFsm_state_mkFSMstate == 5'd17 ||
	   wciSeqFsm_state_mkFSMstate == 5'd18 ||
	   wciSeqFsm_state_mkFSMstate == 5'd19 ||
	   wciSeqFsm_state_mkFSMstate == 5'd20 ||
	   wciSeqFsm_state_mkFSMstate == 5'd21))
	$display("Error: \"GMACTB.bsv\", line 163, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wciSeqFsm_action_l163c5] and\n  [RL_wciSeqFsm_action_l164c10, RL_wciSeqFsm_action_l166c5,\n  RL_wciSeqFsm_action_l167c8, RL_wciSeqFsm_action_l168c5,\n  RL_wciSeqFsm_action_l170c5, RL_wciSeqFsm_action_l171c8,\n  RL_wciSeqFsm_action_l172c5, RL_wciSeqFsm_action_l174c5,\n  RL_wciSeqFsm_action_l175c8, RL_wciSeqFsm_action_l176c5,\n  RL_wciSeqFsm_action_l178c5, RL_wciSeqFsm_action_l179c8,\n  RL_wciSeqFsm_action_l180c5, RL_wciSeqFsm_action_l182c5,\n  RL_wciSeqFsm_action_l183c8, RL_wciSeqFsm_action_l184c5,\n  RL_wciSeqFsm_action_l186c19, RL_wciSeqFsm_action_l187c19,\n  RL_wciSeqFsm_action_l188c19, RL_wciSeqFsm_action_l189c19,\n  RL_wciSeqFsm_action_l190c19] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkGMACTB

