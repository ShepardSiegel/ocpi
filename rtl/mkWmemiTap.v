//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Thu Jan 30 15:27:16 EST 2014
//
//
// Ports:
// Name                         I/O  size props
// wmemiS0_SResp                  O     2 reg
// wmemiS0_SRespLast              O     1 reg
// wmemiS0_SData                  O   128 reg
// wmemiS0_SCmdAccept             O     1
// wmemiS0_SDataAccept            O     1
// wmemiM0_MCmd                   O     3 reg
// wmemiM0_MReqLast               O     1 reg
// wmemiM0_MAddr                  O    36 reg
// wmemiM0_MBurstLength           O    12 reg
// wmemiM0_MDataValid             O     1 reg
// wmemiM0_MDataLast              O     1 reg
// wmemiM0_MData                  O   128 reg
// wmemiM0_MDataByteEn            O    16 reg
// wmemiM0_MReset_n               O     1
// axiM0_wrAddr_data              O    35 reg
// axiM0_wrAddr_valid             O     1
// axiM0_wrData_data              O    36 reg
// axiM0_wrData_valid             O     1
// axiM0_wrResp_ready             O     1 reg
// axiM0_rdAddr_data              O    35 reg
// axiM0_rdAddr_valid             O     1
// axiM0_rdResp_ready             O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wmemiS0_MCmd                   I     3
// wmemiS0_MAddr                  I    36
// wmemiS0_MBurstLength           I    12
// wmemiS0_MData                  I   128
// wmemiS0_MDataByteEn            I    16
// wmemiM0_SResp                  I     2
// wmemiM0_SData                  I   128
// axiM0_wrAddr_ready_value       I     1
// axiM0_wrData_ready_value       I     1
// axiM0_wrResp_data_value        I     2 reg
// axiM0_wrResp_valid_value       I     1
// axiM0_rdAddr_ready_value       I     1
// axiM0_rdResp_data_value        I    34 reg
// axiM0_rdResp_valid_value       I     1
// wmemiS0_MReqLast               I     1
// wmemiS0_MDataValid             I     1
// wmemiS0_MDataLast              I     1
// wmemiS0_MReset_n               I     1 reg
// wmemiM0_SRespLast              I     1
// wmemiM0_SCmdAccept             I     1
// wmemiM0_SDataAccept            I     1
//
// Combinational paths from inputs to outputs:
//   (wmemiS0_MCmd,
//    wmemiS0_MAddr,
//    wmemiS0_MBurstLength,
//    wmemiS0_MReqLast) -> wmemiS0_SCmdAccept
//   (wmemiS0_MData,
//    wmemiS0_MDataByteEn,
//    wmemiS0_MDataValid,
//    wmemiS0_MDataLast) -> wmemiS0_SDataAccept
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkWmemiTap(CLK,
		  RST_N,

		  wmemiS0_MCmd,

		  wmemiS0_MReqLast,

		  wmemiS0_MAddr,

		  wmemiS0_MBurstLength,

		  wmemiS0_MDataValid,

		  wmemiS0_MDataLast,

		  wmemiS0_MData,

		  wmemiS0_MDataByteEn,

		  wmemiS0_SResp,

		  wmemiS0_SRespLast,

		  wmemiS0_SData,

		  wmemiS0_SCmdAccept,

		  wmemiS0_SDataAccept,

		  wmemiS0_MReset_n,

		  wmemiM0_MCmd,

		  wmemiM0_MReqLast,

		  wmemiM0_MAddr,

		  wmemiM0_MBurstLength,

		  wmemiM0_MDataValid,

		  wmemiM0_MDataLast,

		  wmemiM0_MData,

		  wmemiM0_MDataByteEn,

		  wmemiM0_SResp,

		  wmemiM0_SRespLast,

		  wmemiM0_SData,

		  wmemiM0_SCmdAccept,

		  wmemiM0_SDataAccept,

		  wmemiM0_MReset_n,

		  axiM0_wrAddr_data,

		  axiM0_wrAddr_valid,

		  axiM0_wrAddr_ready_value,

		  axiM0_wrData_data,

		  axiM0_wrData_valid,

		  axiM0_wrData_ready_value,

		  axiM0_wrResp_data_value,

		  axiM0_wrResp_valid_value,

		  axiM0_wrResp_ready,

		  axiM0_rdAddr_data,

		  axiM0_rdAddr_valid,

		  axiM0_rdAddr_ready_value,

		  axiM0_rdResp_data_value,

		  axiM0_rdResp_valid_value,

		  axiM0_rdResp_ready);
  input  CLK;
  input  RST_N;

  // action method wmemiS0_mCmd
  input  [2 : 0] wmemiS0_MCmd;

  // action method wmemiS0_mReqLast
  input  wmemiS0_MReqLast;

  // action method wmemiS0_mAddr
  input  [35 : 0] wmemiS0_MAddr;

  // action method wmemiS0_mBurstLength
  input  [11 : 0] wmemiS0_MBurstLength;

  // action method wmemiS0_mDataValid
  input  wmemiS0_MDataValid;

  // action method wmemiS0_mDataLast
  input  wmemiS0_MDataLast;

  // action method wmemiS0_mData
  input  [127 : 0] wmemiS0_MData;

  // action method wmemiS0_mDataByteEn
  input  [15 : 0] wmemiS0_MDataByteEn;

  // value method wmemiS0_sResp
  output [1 : 0] wmemiS0_SResp;

  // value method wmemiS0_sRespLast
  output wmemiS0_SRespLast;

  // value method wmemiS0_sData
  output [127 : 0] wmemiS0_SData;

  // value method wmemiS0_sCmdAccept
  output wmemiS0_SCmdAccept;

  // value method wmemiS0_sDataAccept
  output wmemiS0_SDataAccept;

  // action method wmemiS0_mReset_n
  input  wmemiS0_MReset_n;

  // value method wmemiM0_mCmd
  output [2 : 0] wmemiM0_MCmd;

  // value method wmemiM0_mReqLast
  output wmemiM0_MReqLast;

  // value method wmemiM0_mAddr
  output [35 : 0] wmemiM0_MAddr;

  // value method wmemiM0_mBurstLength
  output [11 : 0] wmemiM0_MBurstLength;

  // value method wmemiM0_mDataValid
  output wmemiM0_MDataValid;

  // value method wmemiM0_mDataLast
  output wmemiM0_MDataLast;

  // value method wmemiM0_mData
  output [127 : 0] wmemiM0_MData;

  // value method wmemiM0_mDataByteEn
  output [15 : 0] wmemiM0_MDataByteEn;

  // action method wmemiM0_sResp
  input  [1 : 0] wmemiM0_SResp;

  // action method wmemiM0_sRespLast
  input  wmemiM0_SRespLast;

  // action method wmemiM0_sData
  input  [127 : 0] wmemiM0_SData;

  // action method wmemiM0_sCmdAccept
  input  wmemiM0_SCmdAccept;

  // action method wmemiM0_sDataAccept
  input  wmemiM0_SDataAccept;

  // value method wmemiM0_mReset_n
  output wmemiM0_MReset_n;

  // value method axiM0_wrAddr_data
  output [34 : 0] axiM0_wrAddr_data;

  // value method axiM0_wrAddr_valid
  output axiM0_wrAddr_valid;

  // action method axiM0_wrAddr_ready
  input  axiM0_wrAddr_ready_value;

  // value method axiM0_wrData_data
  output [35 : 0] axiM0_wrData_data;

  // value method axiM0_wrData_valid
  output axiM0_wrData_valid;

  // action method axiM0_wrData_ready
  input  axiM0_wrData_ready_value;

  // action method axiM0_wrResp_data
  input  [1 : 0] axiM0_wrResp_data_value;

  // action method axiM0_wrResp_valid
  input  axiM0_wrResp_valid_value;

  // value method axiM0_wrResp_ready
  output axiM0_wrResp_ready;

  // value method axiM0_rdAddr_data
  output [34 : 0] axiM0_rdAddr_data;

  // value method axiM0_rdAddr_valid
  output axiM0_rdAddr_valid;

  // action method axiM0_rdAddr_ready
  input  axiM0_rdAddr_ready_value;

  // action method axiM0_rdResp_data
  input  [33 : 0] axiM0_rdResp_data_value;

  // action method axiM0_rdResp_valid
  input  axiM0_rdResp_valid_value;

  // value method axiM0_rdResp_ready
  output axiM0_rdResp_ready;

  // signals for module outputs
  wire [127 : 0] wmemiM0_MData, wmemiS0_SData;
  wire [35 : 0] axiM0_wrData_data, wmemiM0_MAddr;
  wire [34 : 0] axiM0_rdAddr_data, axiM0_wrAddr_data;
  wire [15 : 0] wmemiM0_MDataByteEn;
  wire [11 : 0] wmemiM0_MBurstLength;
  wire [2 : 0] wmemiM0_MCmd;
  wire [1 : 0] wmemiS0_SResp;
  wire axiM0_rdAddr_valid,
       axiM0_rdResp_ready,
       axiM0_wrAddr_valid,
       axiM0_wrData_valid,
       axiM0_wrResp_ready,
       wmemiM0_MDataLast,
       wmemiM0_MDataValid,
       wmemiM0_MReqLast,
       wmemiM0_MReset_n,
       wmemiS0_SCmdAccept,
       wmemiS0_SDataAccept,
       wmemiS0_SRespLast;

  // inlined wires
  wire [145 : 0] wmemiM_dhF_x_wire_wget, wmemiS_wmemiDh_wget;
  wire [130 : 0] wmemiM_wmemiResponse_wget, wmemiS_respF_x_wire_wget;
  wire [127 : 0] wmemi_Em_sData_w_wget, wmemi_Es_mData_w_wget;
  wire [51 : 0] wmemiM_reqF_x_wire_wget, wmemiS_wmemiReq_wget;
  wire [35 : 0] a4l_a4wrData_fifof_x_wire_wget, wmemi_Es_mAddr_w_wget;
  wire [34 : 0] a4l_a4rdAddr_fifof_x_wire_wget,
		a4l_a4wrAddr_fifof_x_wire_wget;
  wire [33 : 0] a4l_a4rdResp_data_wire_wget;
  wire [15 : 0] wmemi_Es_mDataByteEn_w_wget;
  wire [11 : 0] wmemi_Es_mBurstLength_w_wget;
  wire [2 : 0] wmemi_Es_mCmd_w_wget;
  wire [1 : 0] a4l_a4wrResp_data_wire_wget, wmemi_Em_sResp_w_wget;
  wire a4l_a4rdAddr_deq_deq_whas,
       a4l_a4rdAddr_deq_ready_whas,
       a4l_a4rdAddr_fifof_dequeueing_whas,
       a4l_a4rdAddr_fifof_enqueueing_whas,
       a4l_a4rdAddr_fifof_x_wire_whas,
       a4l_a4rdResp_enq_enq_whas,
       a4l_a4rdResp_enq_valid_whas,
       a4l_a4wrAddr_deq_deq_whas,
       a4l_a4wrAddr_deq_ready_whas,
       a4l_a4wrAddr_fifof_dequeueing_whas,
       a4l_a4wrAddr_fifof_enqueueing_whas,
       a4l_a4wrAddr_fifof_x_wire_whas,
       a4l_a4wrData_deq_deq_whas,
       a4l_a4wrData_deq_ready_whas,
       a4l_a4wrData_fifof_dequeueing_whas,
       a4l_a4wrData_fifof_enqueueing_whas,
       a4l_a4wrData_fifof_x_wire_whas,
       a4l_a4wrResp_enq_enq_whas,
       a4l_a4wrResp_enq_valid_whas,
       wmemiM_dhF_dequeueing_whas,
       wmemiM_dhF_enqueueing_whas,
       wmemiM_dhF_x_wire_whas,
       wmemiM_operateD_1_wget,
       wmemiM_operateD_1_whas,
       wmemiM_peerIsReady_1_wget,
       wmemiM_peerIsReady_1_whas,
       wmemiM_reqF_dequeueing_whas,
       wmemiM_reqF_enqueueing_whas,
       wmemiM_reqF_x_wire_whas,
       wmemiM_sCmdAccept_w_wget,
       wmemiM_sCmdAccept_w_whas,
       wmemiM_sDataAccept_w_wget,
       wmemiM_sDataAccept_w_whas,
       wmemiM_wmemiResponse_whas,
       wmemiS_cmdAccept_w_wget,
       wmemiS_cmdAccept_w_whas,
       wmemiS_dhAccept_w_wget,
       wmemiS_dhAccept_w_whas,
       wmemiS_operateD_1_wget,
       wmemiS_operateD_1_whas,
       wmemiS_peerIsReady_1_wget,
       wmemiS_peerIsReady_1_whas,
       wmemiS_respF_dequeueing_whas,
       wmemiS_respF_enqueueing_whas,
       wmemiS_respF_x_wire_whas,
       wmemiS_wmemiDh_whas,
       wmemiS_wmemiReq_whas,
       wmemi_Em_sData_w_whas,
       wmemi_Em_sRespLast_w_whas,
       wmemi_Em_sResp_w_whas,
       wmemi_Es_mAddr_w_whas,
       wmemi_Es_mBurstLength_w_whas,
       wmemi_Es_mCmd_w_whas,
       wmemi_Es_mDataByteEn_w_whas,
       wmemi_Es_mDataLast_w_whas,
       wmemi_Es_mDataValid_w_whas,
       wmemi_Es_mData_w_whas,
       wmemi_Es_mReqLast_w_whas;

  // register a4l_a4rdAddr_fifof_cntr_r
  reg [1 : 0] a4l_a4rdAddr_fifof_cntr_r;
  wire [1 : 0] a4l_a4rdAddr_fifof_cntr_r_D_IN;
  wire a4l_a4rdAddr_fifof_cntr_r_EN;

  // register a4l_a4rdAddr_fifof_q_0
  reg [34 : 0] a4l_a4rdAddr_fifof_q_0;
  reg [34 : 0] a4l_a4rdAddr_fifof_q_0_D_IN;
  wire a4l_a4rdAddr_fifof_q_0_EN;

  // register a4l_a4rdAddr_fifof_q_1
  reg [34 : 0] a4l_a4rdAddr_fifof_q_1;
  reg [34 : 0] a4l_a4rdAddr_fifof_q_1_D_IN;
  wire a4l_a4rdAddr_fifof_q_1_EN;

  // register a4l_a4wrAddr_fifof_cntr_r
  reg [1 : 0] a4l_a4wrAddr_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrAddr_fifof_cntr_r_D_IN;
  wire a4l_a4wrAddr_fifof_cntr_r_EN;

  // register a4l_a4wrAddr_fifof_q_0
  reg [34 : 0] a4l_a4wrAddr_fifof_q_0;
  reg [34 : 0] a4l_a4wrAddr_fifof_q_0_D_IN;
  wire a4l_a4wrAddr_fifof_q_0_EN;

  // register a4l_a4wrAddr_fifof_q_1
  reg [34 : 0] a4l_a4wrAddr_fifof_q_1;
  reg [34 : 0] a4l_a4wrAddr_fifof_q_1_D_IN;
  wire a4l_a4wrAddr_fifof_q_1_EN;

  // register a4l_a4wrData_fifof_cntr_r
  reg [1 : 0] a4l_a4wrData_fifof_cntr_r;
  wire [1 : 0] a4l_a4wrData_fifof_cntr_r_D_IN;
  wire a4l_a4wrData_fifof_cntr_r_EN;

  // register a4l_a4wrData_fifof_q_0
  reg [35 : 0] a4l_a4wrData_fifof_q_0;
  reg [35 : 0] a4l_a4wrData_fifof_q_0_D_IN;
  wire a4l_a4wrData_fifof_q_0_EN;

  // register a4l_a4wrData_fifof_q_1
  reg [35 : 0] a4l_a4wrData_fifof_q_1;
  reg [35 : 0] a4l_a4wrData_fifof_q_1_D_IN;
  wire a4l_a4wrData_fifof_q_1_EN;

  // register axiActive
  reg axiActive;
  wire axiActive_D_IN, axiActive_EN;

  // register wmemiM_busyWithMessage
  reg wmemiM_busyWithMessage;
  wire wmemiM_busyWithMessage_D_IN, wmemiM_busyWithMessage_EN;

  // register wmemiM_dhF_cntr_r
  reg [1 : 0] wmemiM_dhF_cntr_r;
  wire [1 : 0] wmemiM_dhF_cntr_r_D_IN;
  wire wmemiM_dhF_cntr_r_EN;

  // register wmemiM_dhF_q_0
  reg [145 : 0] wmemiM_dhF_q_0;
  reg [145 : 0] wmemiM_dhF_q_0_D_IN;
  wire wmemiM_dhF_q_0_EN;

  // register wmemiM_dhF_q_1
  reg [145 : 0] wmemiM_dhF_q_1;
  reg [145 : 0] wmemiM_dhF_q_1_D_IN;
  wire wmemiM_dhF_q_1_EN;

  // register wmemiM_errorSticky
  reg wmemiM_errorSticky;
  wire wmemiM_errorSticky_D_IN, wmemiM_errorSticky_EN;

  // register wmemiM_isReset_isInReset
  reg wmemiM_isReset_isInReset;
  wire wmemiM_isReset_isInReset_D_IN, wmemiM_isReset_isInReset_EN;

  // register wmemiM_operateD
  reg wmemiM_operateD;
  wire wmemiM_operateD_D_IN, wmemiM_operateD_EN;

  // register wmemiM_peerIsReady
  reg wmemiM_peerIsReady;
  wire wmemiM_peerIsReady_D_IN, wmemiM_peerIsReady_EN;

  // register wmemiM_reqF_cntr_r
  reg [1 : 0] wmemiM_reqF_cntr_r;
  wire [1 : 0] wmemiM_reqF_cntr_r_D_IN;
  wire wmemiM_reqF_cntr_r_EN;

  // register wmemiM_reqF_q_0
  reg [51 : 0] wmemiM_reqF_q_0;
  reg [51 : 0] wmemiM_reqF_q_0_D_IN;
  wire wmemiM_reqF_q_0_EN;

  // register wmemiM_reqF_q_1
  reg [51 : 0] wmemiM_reqF_q_1;
  reg [51 : 0] wmemiM_reqF_q_1_D_IN;
  wire wmemiM_reqF_q_1_EN;

  // register wmemiM_statusR
  reg [7 : 0] wmemiM_statusR;
  wire [7 : 0] wmemiM_statusR_D_IN;
  wire wmemiM_statusR_EN;

  // register wmemiM_trafficSticky
  reg wmemiM_trafficSticky;
  wire wmemiM_trafficSticky_D_IN, wmemiM_trafficSticky_EN;

  // register wmemiS_errorSticky
  reg wmemiS_errorSticky;
  wire wmemiS_errorSticky_D_IN, wmemiS_errorSticky_EN;

  // register wmemiS_isReset_isInReset
  reg wmemiS_isReset_isInReset;
  wire wmemiS_isReset_isInReset_D_IN, wmemiS_isReset_isInReset_EN;

  // register wmemiS_operateD
  reg wmemiS_operateD;
  wire wmemiS_operateD_D_IN, wmemiS_operateD_EN;

  // register wmemiS_peerIsReady
  reg wmemiS_peerIsReady;
  wire wmemiS_peerIsReady_D_IN, wmemiS_peerIsReady_EN;

  // register wmemiS_respF_cntr_r
  reg [1 : 0] wmemiS_respF_cntr_r;
  wire [1 : 0] wmemiS_respF_cntr_r_D_IN;
  wire wmemiS_respF_cntr_r_EN;

  // register wmemiS_respF_q_0
  reg [130 : 0] wmemiS_respF_q_0;
  reg [130 : 0] wmemiS_respF_q_0_D_IN;
  wire wmemiS_respF_q_0_EN;

  // register wmemiS_respF_q_1
  reg [130 : 0] wmemiS_respF_q_1;
  reg [130 : 0] wmemiS_respF_q_1_D_IN;
  wire wmemiS_respF_q_1_EN;

  // register wmemiS_statusR
  reg [7 : 0] wmemiS_statusR;
  wire [7 : 0] wmemiS_statusR_D_IN;
  wire wmemiS_statusR_EN;

  // register wmemiS_trafficSticky
  reg wmemiS_trafficSticky;
  wire wmemiS_trafficSticky_D_IN, wmemiS_trafficSticky_EN;

  // ports of submodule a4l_a4rdResp_fifof
  wire [33 : 0] a4l_a4rdResp_fifof_D_IN, a4l_a4rdResp_fifof_D_OUT;
  wire a4l_a4rdResp_fifof_CLR,
       a4l_a4rdResp_fifof_DEQ,
       a4l_a4rdResp_fifof_EMPTY_N,
       a4l_a4rdResp_fifof_ENQ,
       a4l_a4rdResp_fifof_FULL_N;

  // ports of submodule a4l_a4wrResp_fifof
  wire [1 : 0] a4l_a4wrResp_fifof_D_IN;
  wire a4l_a4wrResp_fifof_CLR,
       a4l_a4wrResp_fifof_DEQ,
       a4l_a4wrResp_fifof_EMPTY_N,
       a4l_a4wrResp_fifof_ENQ,
       a4l_a4wrResp_fifof_FULL_N;

  // ports of submodule wmemiM_respF
  wire [130 : 0] wmemiM_respF_D_IN, wmemiM_respF_D_OUT;
  wire wmemiM_respF_CLR,
       wmemiM_respF_DEQ,
       wmemiM_respF_EMPTY_N,
       wmemiM_respF_ENQ,
       wmemiM_respF_FULL_N;

  // ports of submodule wmemiS_dhF
  wire [145 : 0] wmemiS_dhF_D_IN, wmemiS_dhF_D_OUT;
  wire wmemiS_dhF_CLR,
       wmemiS_dhF_DEQ,
       wmemiS_dhF_EMPTY_N,
       wmemiS_dhF_ENQ,
       wmemiS_dhF_FULL_N;

  // ports of submodule wmemiS_reqF
  wire [51 : 0] wmemiS_reqF_D_IN, wmemiS_reqF_D_OUT;
  wire wmemiS_reqF_CLR,
       wmemiS_reqF_DEQ,
       wmemiS_reqF_EMPTY_N,
       wmemiS_reqF_ENQ,
       wmemiS_reqF_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_axi_read_response,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrData_fifof_both,
       WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr,
       WILL_FIRE_RL_advance_request,
       WILL_FIRE_RL_axi_read_response,
       WILL_FIRE_RL_axi_write_response,
       WILL_FIRE_RL_wmemiM_dhF_both,
       WILL_FIRE_RL_wmemiM_dhF_decCtr,
       WILL_FIRE_RL_wmemiM_dhF_incCtr,
       WILL_FIRE_RL_wmemiM_reqF_both,
       WILL_FIRE_RL_wmemiM_reqF_decCtr,
       WILL_FIRE_RL_wmemiM_reqF_incCtr,
       WILL_FIRE_RL_wmemiS_respF_both,
       WILL_FIRE_RL_wmemiS_respF_decCtr,
       WILL_FIRE_RL_wmemiS_respF_incCtr,
       WILL_FIRE_RL_wmemi_response;

  // inputs to muxes for submodule ports
  wire [145 : 0] MUX_wmemiM_dhF_q_0_write_1__VAL_1,
		 MUX_wmemiM_dhF_q_0_write_1__VAL_2,
		 MUX_wmemiM_dhF_q_1_write_1__VAL_2;
  wire [130 : 0] MUX_wmemiS_respF_q_0_write_1__VAL_1,
		 MUX_wmemiS_respF_q_0_write_1__VAL_2,
		 MUX_wmemiS_respF_q_1_write_1__VAL_2,
		 MUX_wmemiS_respF_x_wire_wset_1__VAL_1,
		 MUX_wmemiS_respF_x_wire_wset_1__VAL_2;
  wire [51 : 0] MUX_wmemiM_reqF_q_0_write_1__VAL_1,
		MUX_wmemiM_reqF_q_0_write_1__VAL_2,
		MUX_wmemiM_reqF_q_1_write_1__VAL_2;
  wire [35 : 0] MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_2;
  wire [34 : 0] MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1,
		MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2,
		MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2,
		MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_2;
  wire [1 : 0] MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_2,
	       MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_2,
	       MUX_wmemiM_dhF_cntr_r_write_1__VAL_2,
	       MUX_wmemiM_reqF_cntr_r_write_1__VAL_2,
	       MUX_wmemiS_respF_cntr_r_write_1__VAL_2;
  wire MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2,
       MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2,
       MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1,
       MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2,
       MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1,
       MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2,
       MUX_axiActive_write_1__SEL_1,
       MUX_wmemiM_dhF_q_0_write_1__SEL_1,
       MUX_wmemiM_dhF_q_0_write_1__SEL_2,
       MUX_wmemiM_dhF_q_1_write_1__SEL_1,
       MUX_wmemiM_dhF_q_1_write_1__SEL_2,
       MUX_wmemiM_reqF_q_0_write_1__SEL_1,
       MUX_wmemiM_reqF_q_0_write_1__SEL_2,
       MUX_wmemiM_reqF_q_1_write_1__SEL_1,
       MUX_wmemiM_reqF_q_1_write_1__SEL_2,
       MUX_wmemiS_respF_q_0_write_1__SEL_1,
       MUX_wmemiS_respF_q_0_write_1__SEL_2,
       MUX_wmemiS_respF_q_1_write_1__SEL_1,
       MUX_wmemiS_respF_q_1_write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h10358, v__h10384, v__h10592, v__h10751;
  wire [1 : 0] a4l_a4rdAddr_fifof_cntr_r_09_MINUS_1___d217,
	       a4l_a4wrAddr_fifof_cntr_r_49_MINUS_1___d157,
	       a4l_a4wrData_fifof_cntr_r_76_MINUS_1___d184,
	       wmemiM_dhF_cntr_r_1_MINUS_1___d100,
	       wmemiM_reqF_cntr_r_8_MINUS_1___d77,
	       wmemiS_respF_cntr_r_MINUS_1___d16;
  wire IF_wmemiS_reqF_first__37_BITS_51_TO_49_39_EQ_1_ETC___d244,
       IF_wmemiS_reqF_first__37_BIT_43_38_THEN_IF_wme_ETC___d250,
       _dfoo1,
       _dfoo11,
       _dfoo13,
       _dfoo15,
       _dfoo17,
       _dfoo19,
       _dfoo21,
       _dfoo23,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       _dfoo9,
       wmemiM_operateD_27_AND_wmemiM_peerIsReady_28_2_ETC___d248;

  // value method wmemiS0_sResp
  assign wmemiS0_SResp = wmemiS_respF_q_0[130:129] ;

  // value method wmemiS0_sRespLast
  assign wmemiS0_SRespLast = wmemiS_respF_q_0[128] ;

  // value method wmemiS0_sData
  assign wmemiS0_SData = wmemiS_respF_q_0[127:0] ;

  // value method wmemiS0_sCmdAccept
  assign wmemiS0_SCmdAccept = wmemiS_cmdAccept_w_whas ;

  // value method wmemiS0_sDataAccept
  assign wmemiS0_SDataAccept = wmemiS_dhAccept_w_whas ;

  // value method wmemiM0_mCmd
  assign wmemiM0_MCmd = wmemiM_reqF_q_0[51:49] ;

  // value method wmemiM0_mReqLast
  assign wmemiM0_MReqLast = wmemiM_reqF_q_0[48] ;

  // value method wmemiM0_mAddr
  assign wmemiM0_MAddr = wmemiM_reqF_q_0[47:12] ;

  // value method wmemiM0_mBurstLength
  assign wmemiM0_MBurstLength = wmemiM_reqF_q_0[11:0] ;

  // value method wmemiM0_mDataValid
  assign wmemiM0_MDataValid = wmemiM_dhF_q_0[145] ;

  // value method wmemiM0_mDataLast
  assign wmemiM0_MDataLast = wmemiM_dhF_q_0[144] ;

  // value method wmemiM0_mData
  assign wmemiM0_MData = wmemiM_dhF_q_0[143:16] ;

  // value method wmemiM0_mDataByteEn
  assign wmemiM0_MDataByteEn = wmemiM_dhF_q_0[15:0] ;

  // value method wmemiM0_mReset_n
  assign wmemiM0_MReset_n = !wmemiM_isReset_isInReset && wmemiM_operateD ;

  // value method axiM0_wrAddr_data
  assign axiM0_wrAddr_data = a4l_a4wrAddr_fifof_q_0 ;

  // value method axiM0_wrAddr_valid
  assign axiM0_wrAddr_valid = a4l_a4wrAddr_fifof_cntr_r != 2'd0 ;

  // value method axiM0_wrData_data
  assign axiM0_wrData_data = a4l_a4wrData_fifof_q_0 ;

  // value method axiM0_wrData_valid
  assign axiM0_wrData_valid = a4l_a4wrData_fifof_cntr_r != 2'd0 ;

  // value method axiM0_wrResp_ready
  assign axiM0_wrResp_ready = a4l_a4wrResp_fifof_FULL_N ;

  // value method axiM0_rdAddr_data
  assign axiM0_rdAddr_data = a4l_a4rdAddr_fifof_q_0 ;

  // value method axiM0_rdAddr_valid
  assign axiM0_rdAddr_valid = a4l_a4rdAddr_fifof_cntr_r != 2'd0 ;

  // value method axiM0_rdResp_ready
  assign axiM0_rdResp_ready = a4l_a4rdResp_fifof_FULL_N ;

  // submodule a4l_a4rdResp_fifof
  FIFO2 #(.width(32'd34), .guarded(32'd1)) a4l_a4rdResp_fifof(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(a4l_a4rdResp_fifof_D_IN),
							      .ENQ(a4l_a4rdResp_fifof_ENQ),
							      .DEQ(a4l_a4rdResp_fifof_DEQ),
							      .CLR(a4l_a4rdResp_fifof_CLR),
							      .D_OUT(a4l_a4rdResp_fifof_D_OUT),
							      .FULL_N(a4l_a4rdResp_fifof_FULL_N),
							      .EMPTY_N(a4l_a4rdResp_fifof_EMPTY_N));

  // submodule a4l_a4wrResp_fifof
  FIFO2 #(.width(32'd2), .guarded(32'd1)) a4l_a4wrResp_fifof(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(a4l_a4wrResp_fifof_D_IN),
							     .ENQ(a4l_a4wrResp_fifof_ENQ),
							     .DEQ(a4l_a4wrResp_fifof_DEQ),
							     .CLR(a4l_a4wrResp_fifof_CLR),
							     .D_OUT(),
							     .FULL_N(a4l_a4wrResp_fifof_FULL_N),
							     .EMPTY_N(a4l_a4wrResp_fifof_EMPTY_N));

  // submodule wmemiM_respF
  FIFO2 #(.width(32'd131), .guarded(32'd1)) wmemiM_respF(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(wmemiM_respF_D_IN),
							 .ENQ(wmemiM_respF_ENQ),
							 .DEQ(wmemiM_respF_DEQ),
							 .CLR(wmemiM_respF_CLR),
							 .D_OUT(wmemiM_respF_D_OUT),
							 .FULL_N(wmemiM_respF_FULL_N),
							 .EMPTY_N(wmemiM_respF_EMPTY_N));

  // submodule wmemiS_dhF
  FIFO2 #(.width(32'd146), .guarded(32'd1)) wmemiS_dhF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(wmemiS_dhF_D_IN),
						       .ENQ(wmemiS_dhF_ENQ),
						       .DEQ(wmemiS_dhF_DEQ),
						       .CLR(wmemiS_dhF_CLR),
						       .D_OUT(wmemiS_dhF_D_OUT),
						       .FULL_N(wmemiS_dhF_FULL_N),
						       .EMPTY_N(wmemiS_dhF_EMPTY_N));

  // submodule wmemiS_reqF
  FIFO2 #(.width(32'd52), .guarded(32'd1)) wmemiS_reqF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(wmemiS_reqF_D_IN),
						       .ENQ(wmemiS_reqF_ENQ),
						       .DEQ(wmemiS_reqF_DEQ),
						       .CLR(wmemiS_reqF_CLR),
						       .D_OUT(wmemiS_reqF_D_OUT),
						       .FULL_N(wmemiS_reqF_FULL_N),
						       .EMPTY_N(wmemiS_reqF_EMPTY_N));

  // rule RL_wmemi_response
  assign WILL_FIRE_RL_wmemi_response =
	     wmemiS_respF_cntr_r != 2'd2 && wmemiS_operateD &&
	     wmemiS_peerIsReady &&
	     wmemiM_respF_EMPTY_N &&
	     !axiActive ;

  // rule RL_axi_write_response
  assign WILL_FIRE_RL_axi_write_response =
	     a4l_a4wrResp_fifof_EMPTY_N && axiActive ;

  // rule RL_axi_read_response
  assign CAN_FIRE_RL_axi_read_response =
	     wmemiS_respF_cntr_r != 2'd2 && wmemiS_operateD &&
	     wmemiS_peerIsReady &&
	     a4l_a4rdResp_fifof_EMPTY_N &&
	     axiActive ;
  assign WILL_FIRE_RL_axi_read_response =
	     CAN_FIRE_RL_axi_read_response &&
	     !WILL_FIRE_RL_axi_write_response ;

  // rule RL_wmemiS_respF_incCtr
  assign WILL_FIRE_RL_wmemiS_respF_incCtr =
	     wmemiS_respF_x_wire_whas && wmemiS_respF_enqueueing_whas &&
	     !(wmemiS_respF_cntr_r != 2'd0) ;

  // rule RL_wmemiS_respF_decCtr
  assign WILL_FIRE_RL_wmemiS_respF_decCtr =
	     wmemiS_respF_cntr_r != 2'd0 && !wmemiS_respF_enqueueing_whas ;

  // rule RL_wmemiS_respF_both
  assign WILL_FIRE_RL_wmemiS_respF_both =
	     wmemiS_respF_x_wire_whas && wmemiS_respF_cntr_r != 2'd0 &&
	     wmemiS_respF_enqueueing_whas ;

  // rule RL_advance_request
  assign WILL_FIRE_RL_advance_request =
	     wmemiS_operateD && wmemiS_peerIsReady && wmemiS_reqF_EMPTY_N &&
	     IF_wmemiS_reqF_first__37_BIT_43_38_THEN_IF_wme_ETC___d250 &&
	     !axiActive ;

  // rule RL_wmemiM_reqF_incCtr
  assign WILL_FIRE_RL_wmemiM_reqF_incCtr =
	     wmemiM_reqF_enqueueing_whas && wmemiM_reqF_enqueueing_whas &&
	     !wmemiM_reqF_dequeueing_whas ;

  // rule RL_wmemiM_reqF_decCtr
  assign WILL_FIRE_RL_wmemiM_reqF_decCtr =
	     wmemiM_reqF_dequeueing_whas && !wmemiM_reqF_enqueueing_whas ;

  // rule RL_wmemiM_reqF_both
  assign WILL_FIRE_RL_wmemiM_reqF_both =
	     wmemiM_reqF_enqueueing_whas && wmemiM_reqF_dequeueing_whas &&
	     wmemiM_reqF_enqueueing_whas ;

  // rule RL_wmemiM_dhF_incCtr
  assign WILL_FIRE_RL_wmemiM_dhF_incCtr =
	     wmemiM_dhF_enqueueing_whas && wmemiM_dhF_enqueueing_whas &&
	     !wmemiM_dhF_dequeueing_whas ;

  // rule RL_wmemiM_dhF_decCtr
  assign WILL_FIRE_RL_wmemiM_dhF_decCtr =
	     wmemiM_dhF_dequeueing_whas && !wmemiM_dhF_enqueueing_whas ;

  // rule RL_wmemiM_dhF_both
  assign WILL_FIRE_RL_wmemiM_dhF_both =
	     wmemiM_dhF_enqueueing_whas && wmemiM_dhF_dequeueing_whas &&
	     wmemiM_dhF_enqueueing_whas ;

  // rule RL_a4l_a4wrAddr_fifof_incCtr
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     !a4l_a4wrAddr_fifof_dequeueing_whas ;

  // rule RL_a4l_a4wrAddr_fifof_decCtr
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr =
	     a4l_a4wrAddr_fifof_dequeueing_whas &&
	     !a4l_a4wrAddr_fifof_enqueueing_whas ;

  // rule RL_a4l_a4wrAddr_fifof_both
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_both =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     a4l_a4wrAddr_fifof_dequeueing_whas &&
	     a4l_a4wrAddr_fifof_enqueueing_whas ;

  // rule RL_a4l_a4wrData_fifof_incCtr
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     !a4l_a4wrData_fifof_dequeueing_whas ;

  // rule RL_a4l_a4wrData_fifof_decCtr
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr =
	     a4l_a4wrData_fifof_dequeueing_whas &&
	     !a4l_a4wrAddr_fifof_enqueueing_whas ;

  // rule RL_a4l_a4wrData_fifof_both
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_both =
	     a4l_a4wrAddr_fifof_enqueueing_whas &&
	     a4l_a4wrData_fifof_dequeueing_whas &&
	     a4l_a4wrAddr_fifof_enqueueing_whas ;

  // rule RL_a4l_a4rdAddr_fifof_incCtr
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr =
	     a4l_a4rdAddr_fifof_enqueueing_whas &&
	     a4l_a4rdAddr_fifof_enqueueing_whas &&
	     !a4l_a4rdAddr_fifof_dequeueing_whas ;

  // rule RL_a4l_a4rdAddr_fifof_decCtr
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr =
	     a4l_a4rdAddr_fifof_dequeueing_whas &&
	     !a4l_a4rdAddr_fifof_enqueueing_whas ;

  // rule RL_a4l_a4rdAddr_fifof_both
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_both =
	     a4l_a4rdAddr_fifof_enqueueing_whas &&
	     a4l_a4rdAddr_fifof_dequeueing_whas &&
	     a4l_a4rdAddr_fifof_enqueueing_whas ;

  // inputs to muxes for submodule ports
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo23 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo21 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo15 ;
  assign MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo13 ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd0 ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo19 ;
  assign MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo17 ;
  assign MUX_axiActive_write_1__SEL_1 =
	     WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] ;
  assign MUX_wmemiM_dhF_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemiM_dhF_incCtr && wmemiM_dhF_cntr_r == 2'd0 ;
  assign MUX_wmemiM_dhF_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemiM_dhF_both && _dfoo11 ;
  assign MUX_wmemiM_dhF_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemiM_dhF_incCtr && wmemiM_dhF_cntr_r == 2'd1 ;
  assign MUX_wmemiM_dhF_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemiM_dhF_both && _dfoo9 ;
  assign MUX_wmemiM_reqF_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemiM_reqF_incCtr && wmemiM_reqF_cntr_r == 2'd0 ;
  assign MUX_wmemiM_reqF_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemiM_reqF_both && _dfoo7 ;
  assign MUX_wmemiM_reqF_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemiM_reqF_incCtr && wmemiM_reqF_cntr_r == 2'd1 ;
  assign MUX_wmemiM_reqF_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemiM_reqF_both && _dfoo5 ;
  assign MUX_wmemiS_respF_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemiS_respF_incCtr && wmemiS_respF_cntr_r == 2'd0 ;
  assign MUX_wmemiS_respF_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemiS_respF_both && _dfoo3 ;
  assign MUX_wmemiS_respF_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemiS_respF_incCtr && wmemiS_respF_cntr_r == 2'd1 ;
  assign MUX_wmemiS_respF_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemiS_respF_both && _dfoo1 ;
  assign MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4rdAddr_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 =
	     { 3'd0, wmemiS_reqF_D_OUT[43:12] } ;
  assign MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4rdAddr_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 :
	       a4l_a4rdAddr_fifof_q_1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2 =
	     (a4l_a4rdAddr_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 :
	       35'd0 ;
  assign MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4wrAddr_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4wrAddr_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 :
	       a4l_a4wrAddr_fifof_q_1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_2 =
	     (a4l_a4wrAddr_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 :
	       35'd0 ;
  assign MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_2 =
	     a4l_a4wrData_fifof_cntr_r + 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 =
	     { wmemiS_dhF_D_OUT[3:0], wmemiS_dhF_D_OUT[47:16] } ;
  assign MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2 =
	     (a4l_a4wrData_fifof_cntr_r == 2'd1) ?
	       MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 :
	       a4l_a4wrData_fifof_q_1 ;
  assign MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_2 =
	     (a4l_a4wrData_fifof_cntr_r == 2'd2) ?
	       MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 :
	       36'd0 ;
  assign MUX_wmemiM_dhF_cntr_r_write_1__VAL_2 = wmemiM_dhF_cntr_r + 2'd1 ;
  assign MUX_wmemiM_dhF_q_0_write_1__VAL_1 =
	     { 1'd1, wmemiS_dhF_D_OUT[144:0] } ;
  assign MUX_wmemiM_dhF_q_0_write_1__VAL_2 =
	     (wmemiM_dhF_cntr_r == 2'd1) ?
	       MUX_wmemiM_dhF_q_0_write_1__VAL_1 :
	       wmemiM_dhF_q_1 ;
  assign MUX_wmemiM_dhF_q_1_write_1__VAL_2 =
	     (wmemiM_dhF_cntr_r == 2'd2) ?
	       MUX_wmemiM_dhF_q_0_write_1__VAL_1 :
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_wmemiM_reqF_cntr_r_write_1__VAL_2 = wmemiM_reqF_cntr_r + 2'd1 ;
  assign MUX_wmemiM_reqF_q_0_write_1__VAL_1 =
	     { (wmemiS_reqF_D_OUT[51:49] == 3'd1) ?
		 wmemiS_reqF_D_OUT[51:49] :
		 3'd2,
	       1'd1,
	       wmemiS_reqF_D_OUT[47:0] } ;
  assign MUX_wmemiM_reqF_q_0_write_1__VAL_2 =
	     (wmemiM_reqF_cntr_r == 2'd1) ?
	       MUX_wmemiM_reqF_q_0_write_1__VAL_1 :
	       wmemiM_reqF_q_1 ;
  assign MUX_wmemiM_reqF_q_1_write_1__VAL_2 =
	     (wmemiM_reqF_cntr_r == 2'd2) ?
	       MUX_wmemiM_reqF_q_0_write_1__VAL_1 :
	       52'h0AAAAAAAAAAAA ;
  assign MUX_wmemiS_respF_cntr_r_write_1__VAL_2 = wmemiS_respF_cntr_r + 2'd1 ;
  assign MUX_wmemiS_respF_q_0_write_1__VAL_1 =
	     WILL_FIRE_RL_wmemi_response ?
	       MUX_wmemiS_respF_x_wire_wset_1__VAL_1 :
	       MUX_wmemiS_respF_x_wire_wset_1__VAL_2 ;
  assign MUX_wmemiS_respF_q_0_write_1__VAL_2 =
	     (wmemiS_respF_cntr_r == 2'd1) ?
	       MUX_wmemiS_respF_q_0_write_1__VAL_1 :
	       wmemiS_respF_q_1 ;
  assign MUX_wmemiS_respF_q_1_write_1__VAL_2 =
	     (wmemiS_respF_cntr_r == 2'd2) ?
	       MUX_wmemiS_respF_q_0_write_1__VAL_1 :
	       131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_wmemiS_respF_x_wire_wset_1__VAL_1 =
	     { 2'd1, wmemiM_respF_D_OUT[128:0] } ;
  assign MUX_wmemiS_respF_x_wire_wset_1__VAL_2 =
	     { 99'h3000000000000000000000000,
	       a4l_a4rdResp_fifof_D_OUT[31:0] } ;

  // inlined wires
  assign wmemiS_wmemiReq_wget =
	     { wmemiS0_MCmd,
	       wmemiS0_MReqLast,
	       wmemiS0_MAddr,
	       wmemiS0_MBurstLength } ;
  assign wmemiS_wmemiReq_whas = 1'd1 ;
  assign wmemiS_wmemiDh_wget =
	     { wmemiS0_MDataValid,
	       wmemiS0_MDataLast,
	       wmemiS0_MData,
	       wmemiS0_MDataByteEn } ;
  assign wmemiS_wmemiDh_whas = 1'd1 ;
  assign wmemiS_cmdAccept_w_wget = 1'd1 ;
  assign wmemiS_cmdAccept_w_whas =
	     wmemiS_reqF_FULL_N && wmemiS_operateD && wmemiS_peerIsReady &&
	     wmemiS_wmemiReq_wget[51:49] != 3'd0 &&
	     wmemiS_reqF_FULL_N ;
  assign wmemiS_dhAccept_w_wget = 1'd1 ;
  assign wmemiS_dhAccept_w_whas =
	     wmemiS_dhF_FULL_N && wmemiS_operateD && wmemiS_peerIsReady &&
	     wmemiS_wmemiDh_wget[145] &&
	     wmemiS_dhF_FULL_N ;
  assign wmemiS_respF_x_wire_wget = MUX_wmemiS_respF_q_0_write_1__VAL_1 ;
  assign wmemiS_respF_x_wire_whas =
	     WILL_FIRE_RL_wmemi_response || WILL_FIRE_RL_axi_read_response ;
  assign wmemiS_operateD_1_wget = 1'd1 ;
  assign wmemiS_operateD_1_whas = 1'd1 ;
  assign wmemiS_peerIsReady_1_wget = 1'd1 ;
  assign wmemiS_peerIsReady_1_whas = wmemiS0_MReset_n ;
  assign wmemiM_reqF_x_wire_wget = MUX_wmemiM_reqF_q_0_write_1__VAL_1 ;
  assign wmemiM_reqF_x_wire_whas = wmemiM_reqF_enqueueing_whas ;
  assign wmemiM_dhF_x_wire_wget = MUX_wmemiM_dhF_q_0_write_1__VAL_1 ;
  assign wmemiM_dhF_x_wire_whas = wmemiM_dhF_enqueueing_whas ;
  assign wmemiM_wmemiResponse_wget =
	     { wmemiM0_SResp, wmemiM0_SRespLast, wmemiM0_SData } ;
  assign wmemiM_wmemiResponse_whas = 1'd1 ;
  assign wmemiM_sCmdAccept_w_wget = 1'd1 ;
  assign wmemiM_sCmdAccept_w_whas = wmemiM0_SCmdAccept ;
  assign wmemiM_sDataAccept_w_wget = 1'd1 ;
  assign wmemiM_sDataAccept_w_whas = wmemiM0_SDataAccept ;
  assign wmemiM_operateD_1_wget = 1'd1 ;
  assign wmemiM_operateD_1_whas = 1'd1 ;
  assign wmemiM_peerIsReady_1_wget = 1'b0 ;
  assign wmemiM_peerIsReady_1_whas = 1'b0 ;
  assign a4l_a4wrAddr_fifof_x_wire_wget =
	     MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 ;
  assign a4l_a4wrAddr_fifof_x_wire_whas = a4l_a4wrAddr_fifof_enqueueing_whas ;
  assign a4l_a4wrData_fifof_x_wire_wget =
	     MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 ;
  assign a4l_a4wrData_fifof_x_wire_whas = a4l_a4wrAddr_fifof_enqueueing_whas ;
  assign a4l_a4rdAddr_fifof_x_wire_wget =
	     MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 ;
  assign a4l_a4rdAddr_fifof_x_wire_whas = a4l_a4rdAddr_fifof_enqueueing_whas ;
  assign wmemi_Es_mCmd_w_wget = wmemiS0_MCmd ;
  assign wmemi_Es_mCmd_w_whas = 1'd1 ;
  assign wmemi_Es_mAddr_w_wget = wmemiS0_MAddr ;
  assign wmemi_Es_mAddr_w_whas = 1'd1 ;
  assign wmemi_Es_mBurstLength_w_wget = wmemiS0_MBurstLength ;
  assign wmemi_Es_mBurstLength_w_whas = 1'd1 ;
  assign wmemi_Es_mData_w_wget = wmemiS0_MData ;
  assign wmemi_Es_mData_w_whas = 1'd1 ;
  assign wmemi_Es_mDataByteEn_w_wget = wmemiS0_MDataByteEn ;
  assign wmemi_Es_mDataByteEn_w_whas = 1'd1 ;
  assign wmemi_Em_sResp_w_wget = wmemiM0_SResp ;
  assign wmemi_Em_sResp_w_whas = 1'd1 ;
  assign wmemi_Em_sData_w_wget = wmemiM0_SData ;
  assign wmemi_Em_sData_w_whas = 1'd1 ;
  assign wmemiS_respF_enqueueing_whas =
	     WILL_FIRE_RL_axi_read_response || WILL_FIRE_RL_wmemi_response ;
  assign wmemiS_respF_dequeueing_whas = wmemiS_respF_cntr_r != 2'd0 ;
  assign wmemiM_reqF_enqueueing_whas =
	     WILL_FIRE_RL_advance_request && !wmemiS_reqF_D_OUT[43] ;
  assign wmemiM_reqF_dequeueing_whas =
	     wmemiM0_SCmdAccept && wmemiM_reqF_cntr_r != 2'd0 ;
  assign wmemiM_dhF_enqueueing_whas =
	     WILL_FIRE_RL_advance_request && !wmemiS_reqF_D_OUT[43] &&
	     wmemiS_reqF_D_OUT[51:49] == 3'd1 ;
  assign wmemiM_dhF_dequeueing_whas =
	     wmemiM0_SDataAccept && wmemiM_dhF_cntr_r != 2'd0 ;
  assign a4l_a4wrAddr_fifof_enqueueing_whas =
	     WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] &&
	     wmemiS_reqF_D_OUT[51:49] == 3'd1 ;
  assign a4l_a4wrAddr_fifof_dequeueing_whas =
	     a4l_a4wrAddr_fifof_cntr_r != 2'd0 && axiM0_wrAddr_ready_value ;
  assign a4l_a4wrAddr_deq_ready_whas = axiM0_wrAddr_ready_value ;
  assign a4l_a4wrAddr_deq_deq_whas = 1'b0 ;
  assign a4l_a4wrData_fifof_enqueueing_whas =
	     a4l_a4wrAddr_fifof_enqueueing_whas ;
  assign a4l_a4wrData_fifof_dequeueing_whas =
	     a4l_a4wrData_fifof_cntr_r != 2'd0 && axiM0_wrData_ready_value ;
  assign a4l_a4wrData_deq_ready_whas = axiM0_wrData_ready_value ;
  assign a4l_a4wrData_deq_deq_whas = 1'b0 ;
  assign a4l_a4wrResp_enq_valid_whas = axiM0_wrResp_valid_value ;
  assign a4l_a4wrResp_enq_enq_whas = 1'b0 ;
  assign a4l_a4rdAddr_fifof_enqueueing_whas =
	     WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] &&
	     wmemiS_reqF_D_OUT[51:49] != 3'd1 ;
  assign a4l_a4rdAddr_fifof_dequeueing_whas =
	     a4l_a4rdAddr_fifof_cntr_r != 2'd0 && axiM0_rdAddr_ready_value ;
  assign a4l_a4rdAddr_deq_ready_whas = axiM0_rdAddr_ready_value ;
  assign a4l_a4rdAddr_deq_deq_whas = 1'b0 ;
  assign a4l_a4rdResp_enq_valid_whas = axiM0_rdResp_valid_value ;
  assign a4l_a4rdResp_enq_enq_whas = 1'b0 ;
  assign wmemi_Es_mReqLast_w_whas = wmemiS0_MReqLast ;
  assign wmemi_Es_mDataValid_w_whas = wmemiS0_MDataValid ;
  assign wmemi_Es_mDataLast_w_whas = wmemiS0_MDataLast ;
  assign wmemi_Em_sRespLast_w_whas = wmemiM0_SRespLast ;
  assign a4l_a4wrResp_data_wire_wget = axiM0_wrResp_data_value ;
  assign a4l_a4rdResp_data_wire_wget = axiM0_rdResp_data_value ;

  // register a4l_a4rdAddr_fifof_cntr_r
  assign a4l_a4rdAddr_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ?
	       a4l_a4rdAddr_fifof_cntr_r_09_MINUS_1___d217 :
	       MUX_a4l_a4rdAddr_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4rdAddr_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr ;

  // register a4l_a4rdAddr_fifof_q_0
  always@(MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr or a4l_a4rdAddr_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_1:
	  a4l_a4rdAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdAddr_fifof_q_0_write_1__SEL_2:
	  a4l_a4rdAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr:
	  a4l_a4rdAddr_fifof_q_0_D_IN = a4l_a4rdAddr_fifof_q_1;
      default: a4l_a4rdAddr_fifof_q_0_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdAddr_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo23 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // register a4l_a4rdAddr_fifof_q_1
  always@(MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_1:
	  a4l_a4rdAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4rdAddr_fifof_q_1_write_1__SEL_2:
	  a4l_a4rdAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr:
	  a4l_a4rdAddr_fifof_q_1_D_IN = 35'd0;
      default: a4l_a4rdAddr_fifof_q_1_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdAddr_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both && _dfoo21 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // register a4l_a4wrAddr_fifof_cntr_r
  assign a4l_a4wrAddr_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ?
	       a4l_a4wrAddr_fifof_cntr_r_49_MINUS_1___d157 :
	       MUX_a4l_a4wrAddr_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4wrAddr_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr ;

  // register a4l_a4wrAddr_fifof_q_0
  always@(MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr or a4l_a4wrAddr_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_1:
	  a4l_a4wrAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4wrAddr_fifof_q_0_write_1__SEL_2:
	  a4l_a4wrAddr_fifof_q_0_D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr:
	  a4l_a4wrAddr_fifof_q_0_D_IN = a4l_a4wrAddr_fifof_q_1;
      default: a4l_a4wrAddr_fifof_q_0_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrAddr_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo15 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // register a4l_a4wrAddr_fifof_q_1
  always@(MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_1:
	  a4l_a4wrAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4wrAddr_fifof_q_1_write_1__SEL_2:
	  a4l_a4wrAddr_fifof_q_1_D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr:
	  a4l_a4wrAddr_fifof_q_1_D_IN = 35'd0;
      default: a4l_a4wrAddr_fifof_q_1_D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrAddr_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both && _dfoo13 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // register a4l_a4wrData_fifof_cntr_r
  assign a4l_a4wrData_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ?
	       a4l_a4wrData_fifof_cntr_r_76_MINUS_1___d184 :
	       MUX_a4l_a4wrData_fifof_cntr_r_write_1__VAL_2 ;
  assign a4l_a4wrData_fifof_cntr_r_EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr ;

  // register a4l_a4wrData_fifof_q_0
  always@(MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr or a4l_a4wrData_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_1:
	  a4l_a4wrData_fifof_q_0_D_IN =
	      MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4wrData_fifof_q_0_write_1__SEL_2:
	  a4l_a4wrData_fifof_q_0_D_IN =
	      MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr:
	  a4l_a4wrData_fifof_q_0_D_IN = a4l_a4wrData_fifof_q_1;
      default: a4l_a4wrData_fifof_q_0_D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrData_fifof_q_0_EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo19 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // register a4l_a4wrData_fifof_q_1
  always@(MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1 or
	  MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1 or
	  MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2 or
	  MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_1:
	  a4l_a4wrData_fifof_q_1_D_IN =
	      MUX_a4l_a4wrData_fifof_q_0_write_1__VAL_1;
      MUX_a4l_a4wrData_fifof_q_1_write_1__SEL_2:
	  a4l_a4wrData_fifof_q_1_D_IN =
	      MUX_a4l_a4wrData_fifof_q_1_write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr:
	  a4l_a4wrData_fifof_q_1_D_IN = 36'd0;
      default: a4l_a4wrData_fifof_q_1_D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrData_fifof_q_1_EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both && _dfoo17 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // register axiActive
  assign axiActive_D_IN = MUX_axiActive_write_1__SEL_1 ;
  assign axiActive_EN =
	     WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] ||
	     WILL_FIRE_RL_axi_read_response ||
	     WILL_FIRE_RL_axi_write_response ;

  // register wmemiM_busyWithMessage
  assign wmemiM_busyWithMessage_D_IN = 1'b0 ;
  assign wmemiM_busyWithMessage_EN = 1'b0 ;

  // register wmemiM_dhF_cntr_r
  assign wmemiM_dhF_cntr_r_D_IN =
	     WILL_FIRE_RL_wmemiM_dhF_decCtr ?
	       wmemiM_dhF_cntr_r_1_MINUS_1___d100 :
	       MUX_wmemiM_dhF_cntr_r_write_1__VAL_2 ;
  assign wmemiM_dhF_cntr_r_EN =
	     WILL_FIRE_RL_wmemiM_dhF_decCtr ||
	     WILL_FIRE_RL_wmemiM_dhF_incCtr ;

  // register wmemiM_dhF_q_0
  always@(MUX_wmemiM_dhF_q_0_write_1__SEL_1 or
	  MUX_wmemiM_dhF_q_0_write_1__VAL_1 or
	  MUX_wmemiM_dhF_q_0_write_1__SEL_2 or
	  MUX_wmemiM_dhF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_wmemiM_dhF_decCtr or wmemiM_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemiM_dhF_q_0_write_1__SEL_1:
	  wmemiM_dhF_q_0_D_IN = MUX_wmemiM_dhF_q_0_write_1__VAL_1;
      MUX_wmemiM_dhF_q_0_write_1__SEL_2:
	  wmemiM_dhF_q_0_D_IN = MUX_wmemiM_dhF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wmemiM_dhF_decCtr: wmemiM_dhF_q_0_D_IN = wmemiM_dhF_q_1;
      default: wmemiM_dhF_q_0_D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemiM_dhF_q_0_EN =
	     WILL_FIRE_RL_wmemiM_dhF_incCtr && wmemiM_dhF_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wmemiM_dhF_both && _dfoo11 ||
	     WILL_FIRE_RL_wmemiM_dhF_decCtr ;

  // register wmemiM_dhF_q_1
  always@(MUX_wmemiM_dhF_q_1_write_1__SEL_1 or
	  MUX_wmemiM_dhF_q_0_write_1__VAL_1 or
	  MUX_wmemiM_dhF_q_1_write_1__SEL_2 or
	  MUX_wmemiM_dhF_q_1_write_1__VAL_2 or WILL_FIRE_RL_wmemiM_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemiM_dhF_q_1_write_1__SEL_1:
	  wmemiM_dhF_q_1_D_IN = MUX_wmemiM_dhF_q_0_write_1__VAL_1;
      MUX_wmemiM_dhF_q_1_write_1__SEL_2:
	  wmemiM_dhF_q_1_D_IN = MUX_wmemiM_dhF_q_1_write_1__VAL_2;
      WILL_FIRE_RL_wmemiM_dhF_decCtr:
	  wmemiM_dhF_q_1_D_IN = 146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: wmemiM_dhF_q_1_D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemiM_dhF_q_1_EN =
	     WILL_FIRE_RL_wmemiM_dhF_incCtr && wmemiM_dhF_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wmemiM_dhF_both && _dfoo9 ||
	     WILL_FIRE_RL_wmemiM_dhF_decCtr ;

  // register wmemiM_errorSticky
  assign wmemiM_errorSticky_D_IN = 1'b0 ;
  assign wmemiM_errorSticky_EN = 1'b0 ;

  // register wmemiM_isReset_isInReset
  assign wmemiM_isReset_isInReset_D_IN = 1'd0 ;
  assign wmemiM_isReset_isInReset_EN = wmemiM_isReset_isInReset ;

  // register wmemiM_operateD
  assign wmemiM_operateD_D_IN = 1'b1 ;
  assign wmemiM_operateD_EN = 1'd1 ;

  // register wmemiM_peerIsReady
  assign wmemiM_peerIsReady_D_IN = 1'b1 ;
  assign wmemiM_peerIsReady_EN = 1'd1 ;

  // register wmemiM_reqF_cntr_r
  assign wmemiM_reqF_cntr_r_D_IN =
	     WILL_FIRE_RL_wmemiM_reqF_decCtr ?
	       wmemiM_reqF_cntr_r_8_MINUS_1___d77 :
	       MUX_wmemiM_reqF_cntr_r_write_1__VAL_2 ;
  assign wmemiM_reqF_cntr_r_EN =
	     WILL_FIRE_RL_wmemiM_reqF_decCtr ||
	     WILL_FIRE_RL_wmemiM_reqF_incCtr ;

  // register wmemiM_reqF_q_0
  always@(MUX_wmemiM_reqF_q_0_write_1__SEL_1 or
	  MUX_wmemiM_reqF_q_0_write_1__VAL_1 or
	  MUX_wmemiM_reqF_q_0_write_1__SEL_2 or
	  MUX_wmemiM_reqF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_wmemiM_reqF_decCtr or wmemiM_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemiM_reqF_q_0_write_1__SEL_1:
	  wmemiM_reqF_q_0_D_IN = MUX_wmemiM_reqF_q_0_write_1__VAL_1;
      MUX_wmemiM_reqF_q_0_write_1__SEL_2:
	  wmemiM_reqF_q_0_D_IN = MUX_wmemiM_reqF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wmemiM_reqF_decCtr: wmemiM_reqF_q_0_D_IN = wmemiM_reqF_q_1;
      default: wmemiM_reqF_q_0_D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemiM_reqF_q_0_EN =
	     WILL_FIRE_RL_wmemiM_reqF_incCtr && wmemiM_reqF_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wmemiM_reqF_both && _dfoo7 ||
	     WILL_FIRE_RL_wmemiM_reqF_decCtr ;

  // register wmemiM_reqF_q_1
  always@(MUX_wmemiM_reqF_q_1_write_1__SEL_1 or
	  MUX_wmemiM_reqF_q_0_write_1__VAL_1 or
	  MUX_wmemiM_reqF_q_1_write_1__SEL_2 or
	  MUX_wmemiM_reqF_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_wmemiM_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemiM_reqF_q_1_write_1__SEL_1:
	  wmemiM_reqF_q_1_D_IN = MUX_wmemiM_reqF_q_0_write_1__VAL_1;
      MUX_wmemiM_reqF_q_1_write_1__SEL_2:
	  wmemiM_reqF_q_1_D_IN = MUX_wmemiM_reqF_q_1_write_1__VAL_2;
      WILL_FIRE_RL_wmemiM_reqF_decCtr:
	  wmemiM_reqF_q_1_D_IN = 52'h0AAAAAAAAAAAA;
      default: wmemiM_reqF_q_1_D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemiM_reqF_q_1_EN =
	     WILL_FIRE_RL_wmemiM_reqF_incCtr && wmemiM_reqF_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wmemiM_reqF_both && _dfoo5 ||
	     WILL_FIRE_RL_wmemiM_reqF_decCtr ;

  // register wmemiM_statusR
  assign wmemiM_statusR_D_IN =
	     { wmemiM_isReset_isInReset,
	       !wmemiM_peerIsReady,
	       !wmemiM_operateD,
	       wmemiM_errorSticky,
	       3'd0,
	       wmemiM_trafficSticky } ;
  assign wmemiM_statusR_EN = 1'd1 ;

  // register wmemiM_trafficSticky
  assign wmemiM_trafficSticky_D_IN = 1'd1 ;
  assign wmemiM_trafficSticky_EN = wmemiM0_SCmdAccept ;

  // register wmemiS_errorSticky
  assign wmemiS_errorSticky_D_IN = 1'b0 ;
  assign wmemiS_errorSticky_EN = 1'b0 ;

  // register wmemiS_isReset_isInReset
  assign wmemiS_isReset_isInReset_D_IN = 1'd0 ;
  assign wmemiS_isReset_isInReset_EN = wmemiS_isReset_isInReset ;

  // register wmemiS_operateD
  assign wmemiS_operateD_D_IN = 1'b1 ;
  assign wmemiS_operateD_EN = 1'd1 ;

  // register wmemiS_peerIsReady
  assign wmemiS_peerIsReady_D_IN = wmemiS0_MReset_n ;
  assign wmemiS_peerIsReady_EN = 1'd1 ;

  // register wmemiS_respF_cntr_r
  assign wmemiS_respF_cntr_r_D_IN =
	     WILL_FIRE_RL_wmemiS_respF_decCtr ?
	       wmemiS_respF_cntr_r_MINUS_1___d16 :
	       MUX_wmemiS_respF_cntr_r_write_1__VAL_2 ;
  assign wmemiS_respF_cntr_r_EN =
	     WILL_FIRE_RL_wmemiS_respF_decCtr ||
	     WILL_FIRE_RL_wmemiS_respF_incCtr ;

  // register wmemiS_respF_q_0
  always@(MUX_wmemiS_respF_q_0_write_1__SEL_1 or
	  MUX_wmemiS_respF_q_0_write_1__VAL_1 or
	  MUX_wmemiS_respF_q_0_write_1__SEL_2 or
	  MUX_wmemiS_respF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_wmemiS_respF_decCtr or wmemiS_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemiS_respF_q_0_write_1__SEL_1:
	  wmemiS_respF_q_0_D_IN = MUX_wmemiS_respF_q_0_write_1__VAL_1;
      MUX_wmemiS_respF_q_0_write_1__SEL_2:
	  wmemiS_respF_q_0_D_IN = MUX_wmemiS_respF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wmemiS_respF_decCtr:
	  wmemiS_respF_q_0_D_IN = wmemiS_respF_q_1;
      default: wmemiS_respF_q_0_D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemiS_respF_q_0_EN =
	     WILL_FIRE_RL_wmemiS_respF_incCtr &&
	     wmemiS_respF_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wmemiS_respF_both && _dfoo3 ||
	     WILL_FIRE_RL_wmemiS_respF_decCtr ;

  // register wmemiS_respF_q_1
  always@(MUX_wmemiS_respF_q_1_write_1__SEL_1 or
	  MUX_wmemiS_respF_q_0_write_1__VAL_1 or
	  MUX_wmemiS_respF_q_1_write_1__SEL_2 or
	  MUX_wmemiS_respF_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_wmemiS_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemiS_respF_q_1_write_1__SEL_1:
	  wmemiS_respF_q_1_D_IN = MUX_wmemiS_respF_q_0_write_1__VAL_1;
      MUX_wmemiS_respF_q_1_write_1__SEL_2:
	  wmemiS_respF_q_1_D_IN = MUX_wmemiS_respF_q_1_write_1__VAL_2;
      WILL_FIRE_RL_wmemiS_respF_decCtr:
	  wmemiS_respF_q_1_D_IN = 131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: wmemiS_respF_q_1_D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemiS_respF_q_1_EN =
	     WILL_FIRE_RL_wmemiS_respF_incCtr &&
	     wmemiS_respF_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wmemiS_respF_both && _dfoo1 ||
	     WILL_FIRE_RL_wmemiS_respF_decCtr ;

  // register wmemiS_statusR
  assign wmemiS_statusR_D_IN =
	     { wmemiS_isReset_isInReset,
	       !wmemiS_peerIsReady,
	       !wmemiS_operateD,
	       wmemiS_errorSticky,
	       3'd0,
	       wmemiS_trafficSticky } ;
  assign wmemiS_statusR_EN = 1'd1 ;

  // register wmemiS_trafficSticky
  assign wmemiS_trafficSticky_D_IN = 1'd1 ;
  assign wmemiS_trafficSticky_EN = wmemiS_cmdAccept_w_whas ;

  // submodule a4l_a4rdResp_fifof
  assign a4l_a4rdResp_fifof_D_IN = axiM0_rdResp_data_value ;
  assign a4l_a4rdResp_fifof_ENQ =
	     a4l_a4rdResp_fifof_FULL_N && axiM0_rdResp_valid_value ;
  assign a4l_a4rdResp_fifof_DEQ = WILL_FIRE_RL_axi_read_response ;
  assign a4l_a4rdResp_fifof_CLR = 1'b0 ;

  // submodule a4l_a4wrResp_fifof
  assign a4l_a4wrResp_fifof_D_IN = axiM0_wrResp_data_value ;
  assign a4l_a4wrResp_fifof_ENQ =
	     a4l_a4wrResp_fifof_FULL_N && axiM0_wrResp_valid_value ;
  assign a4l_a4wrResp_fifof_DEQ = WILL_FIRE_RL_axi_write_response ;
  assign a4l_a4wrResp_fifof_CLR = 1'b0 ;

  // submodule wmemiM_respF
  assign wmemiM_respF_D_IN = wmemiM_wmemiResponse_wget ;
  assign wmemiM_respF_ENQ =
	     wmemiM_respF_FULL_N && wmemiM_operateD && wmemiM_peerIsReady &&
	     wmemiM_wmemiResponse_wget[130:129] != 2'd0 ;
  assign wmemiM_respF_DEQ = WILL_FIRE_RL_wmemi_response ;
  assign wmemiM_respF_CLR = 1'b0 ;

  // submodule wmemiS_dhF
  assign wmemiS_dhF_D_IN = wmemiS_wmemiDh_wget ;
  assign wmemiS_dhF_ENQ = wmemiS_dhAccept_w_whas ;
  assign wmemiS_dhF_DEQ =
	     WILL_FIRE_RL_advance_request &&
	     wmemiS_reqF_D_OUT[51:49] == 3'd1 ;
  assign wmemiS_dhF_CLR = 1'b0 ;

  // submodule wmemiS_reqF
  assign wmemiS_reqF_D_IN = wmemiS_wmemiReq_wget ;
  assign wmemiS_reqF_ENQ = wmemiS_cmdAccept_w_whas ;
  assign wmemiS_reqF_DEQ = WILL_FIRE_RL_advance_request ;
  assign wmemiS_reqF_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wmemiS_reqF_first__37_BITS_51_TO_49_39_EQ_1_ETC___d244 =
	     (wmemiS_reqF_D_OUT[51:49] == 3'd1) ?
	       a4l_a4wrAddr_fifof_cntr_r != 2'd2 &&
	       a4l_a4wrData_fifof_cntr_r != 2'd2 &&
	       wmemiS_dhF_EMPTY_N :
	       a4l_a4rdAddr_fifof_cntr_r != 2'd2 ;
  assign IF_wmemiS_reqF_first__37_BIT_43_38_THEN_IF_wme_ETC___d250 =
	     wmemiS_reqF_D_OUT[43] ?
	       IF_wmemiS_reqF_first__37_BITS_51_TO_49_39_EQ_1_ETC___d244 :
	       wmemiM_reqF_cntr_r != 2'd2 &&
	       wmemiM_operateD_27_AND_wmemiM_peerIsReady_28_2_ETC___d248 ;
  assign _dfoo1 =
	     wmemiS_respF_cntr_r != 2'd2 ||
	     wmemiS_respF_cntr_r_MINUS_1___d16 == 2'd1 ;
  assign _dfoo11 =
	     wmemiM_dhF_cntr_r != 2'd1 ||
	     wmemiM_dhF_cntr_r_1_MINUS_1___d100 == 2'd0 ;
  assign _dfoo13 =
	     a4l_a4wrAddr_fifof_cntr_r != 2'd2 ||
	     a4l_a4wrAddr_fifof_cntr_r_49_MINUS_1___d157 == 2'd1 ;
  assign _dfoo15 =
	     a4l_a4wrAddr_fifof_cntr_r != 2'd1 ||
	     a4l_a4wrAddr_fifof_cntr_r_49_MINUS_1___d157 == 2'd0 ;
  assign _dfoo17 =
	     a4l_a4wrData_fifof_cntr_r != 2'd2 ||
	     a4l_a4wrData_fifof_cntr_r_76_MINUS_1___d184 == 2'd1 ;
  assign _dfoo19 =
	     a4l_a4wrData_fifof_cntr_r != 2'd1 ||
	     a4l_a4wrData_fifof_cntr_r_76_MINUS_1___d184 == 2'd0 ;
  assign _dfoo21 =
	     a4l_a4rdAddr_fifof_cntr_r != 2'd2 ||
	     a4l_a4rdAddr_fifof_cntr_r_09_MINUS_1___d217 == 2'd1 ;
  assign _dfoo23 =
	     a4l_a4rdAddr_fifof_cntr_r != 2'd1 ||
	     a4l_a4rdAddr_fifof_cntr_r_09_MINUS_1___d217 == 2'd0 ;
  assign _dfoo3 =
	     wmemiS_respF_cntr_r != 2'd1 ||
	     wmemiS_respF_cntr_r_MINUS_1___d16 == 2'd0 ;
  assign _dfoo5 =
	     wmemiM_reqF_cntr_r != 2'd2 ||
	     wmemiM_reqF_cntr_r_8_MINUS_1___d77 == 2'd1 ;
  assign _dfoo7 =
	     wmemiM_reqF_cntr_r != 2'd1 ||
	     wmemiM_reqF_cntr_r_8_MINUS_1___d77 == 2'd0 ;
  assign _dfoo9 =
	     wmemiM_dhF_cntr_r != 2'd2 ||
	     wmemiM_dhF_cntr_r_1_MINUS_1___d100 == 2'd1 ;
  assign a4l_a4rdAddr_fifof_cntr_r_09_MINUS_1___d217 =
	     a4l_a4rdAddr_fifof_cntr_r - 2'd1 ;
  assign a4l_a4wrAddr_fifof_cntr_r_49_MINUS_1___d157 =
	     a4l_a4wrAddr_fifof_cntr_r - 2'd1 ;
  assign a4l_a4wrData_fifof_cntr_r_76_MINUS_1___d184 =
	     a4l_a4wrData_fifof_cntr_r - 2'd1 ;
  assign wmemiM_dhF_cntr_r_1_MINUS_1___d100 = wmemiM_dhF_cntr_r - 2'd1 ;
  assign wmemiM_operateD_27_AND_wmemiM_peerIsReady_28_2_ETC___d248 =
	     wmemiM_operateD && wmemiM_peerIsReady &&
	     (wmemiS_reqF_D_OUT[51:49] != 3'd1 ||
	      wmemiM_dhF_cntr_r != 2'd2 && wmemiS_dhF_EMPTY_N) ;
  assign wmemiM_reqF_cntr_r_8_MINUS_1___d77 = wmemiM_reqF_cntr_r - 2'd1 ;
  assign wmemiS_respF_cntr_r_MINUS_1___d16 = wmemiS_respF_cntr_r - 2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a4l_a4rdAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrData_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	axiActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiM_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiM_dhF_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemiM_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemiM_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wmemiM_reqF_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemiM_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	wmemiM_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	wmemiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemiS_respF_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemiS_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemiS_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (a4l_a4rdAddr_fifof_cntr_r_EN)
	  a4l_a4rdAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_cntr_r_D_IN;
	if (a4l_a4rdAddr_fifof_q_0_EN)
	  a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_0_D_IN;
	if (a4l_a4rdAddr_fifof_q_1_EN)
	  a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_1_D_IN;
	if (a4l_a4wrAddr_fifof_cntr_r_EN)
	  a4l_a4wrAddr_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_cntr_r_D_IN;
	if (a4l_a4wrAddr_fifof_q_0_EN)
	  a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_0_D_IN;
	if (a4l_a4wrAddr_fifof_q_1_EN)
	  a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_1_D_IN;
	if (a4l_a4wrData_fifof_cntr_r_EN)
	  a4l_a4wrData_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_cntr_r_D_IN;
	if (a4l_a4wrData_fifof_q_0_EN)
	  a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_0_D_IN;
	if (a4l_a4wrData_fifof_q_1_EN)
	  a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_1_D_IN;
	if (axiActive_EN) axiActive <= `BSV_ASSIGNMENT_DELAY axiActive_D_IN;
	if (wmemiM_busyWithMessage_EN)
	  wmemiM_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      wmemiM_busyWithMessage_D_IN;
	if (wmemiM_dhF_cntr_r_EN)
	  wmemiM_dhF_cntr_r <= `BSV_ASSIGNMENT_DELAY wmemiM_dhF_cntr_r_D_IN;
	if (wmemiM_dhF_q_0_EN)
	  wmemiM_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY wmemiM_dhF_q_0_D_IN;
	if (wmemiM_dhF_q_1_EN)
	  wmemiM_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY wmemiM_dhF_q_1_D_IN;
	if (wmemiM_errorSticky_EN)
	  wmemiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wmemiM_errorSticky_D_IN;
	if (wmemiM_operateD_EN)
	  wmemiM_operateD <= `BSV_ASSIGNMENT_DELAY wmemiM_operateD_D_IN;
	if (wmemiM_peerIsReady_EN)
	  wmemiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wmemiM_peerIsReady_D_IN;
	if (wmemiM_reqF_cntr_r_EN)
	  wmemiM_reqF_cntr_r <= `BSV_ASSIGNMENT_DELAY wmemiM_reqF_cntr_r_D_IN;
	if (wmemiM_reqF_q_0_EN)
	  wmemiM_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wmemiM_reqF_q_0_D_IN;
	if (wmemiM_reqF_q_1_EN)
	  wmemiM_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY wmemiM_reqF_q_1_D_IN;
	if (wmemiM_trafficSticky_EN)
	  wmemiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wmemiM_trafficSticky_D_IN;
	if (wmemiS_errorSticky_EN)
	  wmemiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wmemiS_errorSticky_D_IN;
	if (wmemiS_operateD_EN)
	  wmemiS_operateD <= `BSV_ASSIGNMENT_DELAY wmemiS_operateD_D_IN;
	if (wmemiS_peerIsReady_EN)
	  wmemiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wmemiS_peerIsReady_D_IN;
	if (wmemiS_respF_cntr_r_EN)
	  wmemiS_respF_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      wmemiS_respF_cntr_r_D_IN;
	if (wmemiS_respF_q_0_EN)
	  wmemiS_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wmemiS_respF_q_0_D_IN;
	if (wmemiS_respF_q_1_EN)
	  wmemiS_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wmemiS_respF_q_1_D_IN;
	if (wmemiS_trafficSticky_EN)
	  wmemiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wmemiS_trafficSticky_D_IN;
      end
    if (wmemiM_statusR_EN)
      wmemiM_statusR <= `BSV_ASSIGNMENT_DELAY wmemiM_statusR_D_IN;
    if (wmemiS_statusR_EN)
      wmemiS_statusR <= `BSV_ASSIGNMENT_DELAY wmemiS_statusR_D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      wmemiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wmemiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wmemiM_isReset_isInReset_EN)
	wmemiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wmemiM_isReset_isInReset_D_IN;
      if (wmemiS_isReset_isInReset_EN)
	wmemiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wmemiS_isReset_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a4l_a4rdAddr_fifof_cntr_r = 2'h2;
    a4l_a4rdAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4rdAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_cntr_r = 2'h2;
    a4l_a4wrAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrData_fifof_cntr_r = 2'h2;
    a4l_a4wrData_fifof_q_0 = 36'hAAAAAAAAA;
    a4l_a4wrData_fifof_q_1 = 36'hAAAAAAAAA;
    axiActive = 1'h0;
    wmemiM_busyWithMessage = 1'h0;
    wmemiM_dhF_cntr_r = 2'h2;
    wmemiM_dhF_q_0 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemiM_dhF_q_1 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemiM_errorSticky = 1'h0;
    wmemiM_isReset_isInReset = 1'h0;
    wmemiM_operateD = 1'h0;
    wmemiM_peerIsReady = 1'h0;
    wmemiM_reqF_cntr_r = 2'h2;
    wmemiM_reqF_q_0 = 52'hAAAAAAAAAAAAA;
    wmemiM_reqF_q_1 = 52'hAAAAAAAAAAAAA;
    wmemiM_statusR = 8'hAA;
    wmemiM_trafficSticky = 1'h0;
    wmemiS_errorSticky = 1'h0;
    wmemiS_isReset_isInReset = 1'h0;
    wmemiS_operateD = 1'h0;
    wmemiS_peerIsReady = 1'h0;
    wmemiS_respF_cntr_r = 2'h2;
    wmemiS_respF_q_0 = 131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemiS_respF_q_1 = 131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemiS_statusR = 8'hAA;
    wmemiS_trafficSticky = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi_write_response)
	begin
	  v__h10592 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi_write_response)
	$display("[%0d]: %m: AXI4-LITE WRITE RESPOSNE", v__h10592);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi_read_response)
	begin
	  v__h10751 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi_read_response)
	$display("[%0d]: %m: AXI4-LITE READ RESPOSNE Data:%0x",
		 v__h10751,
		 a4l_a4rdResp_fifof_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] &&
	  wmemiS_reqF_D_OUT[51:49] == 3'd1)
	begin
	  v__h10358 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] &&
	  wmemiS_reqF_D_OUT[51:49] == 3'd1)
	$display("[%0d]: %m: AXI4-LITE WRITE REQUEST Addr:%0x BE:%0x Data:%0x",
		 v__h10358,
		 wmemiS_reqF_D_OUT[47:12],
		 wmemiS_dhF_D_OUT[15:0],
		 wmemiS_dhF_D_OUT[143:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] &&
	  wmemiS_reqF_D_OUT[51:49] != 3'd1)
	begin
	  v__h10384 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_advance_request && wmemiS_reqF_D_OUT[43] &&
	  wmemiS_reqF_D_OUT[51:49] != 3'd1)
	$display("[%0d]: %m: AXI4-LITE READ REQUEST Addr:%0x",
		 v__h10384,
		 wmemiS_reqF_D_OUT[47:12]);
  end
  // synopsys translate_on
endmodule  // mkWmemiTap

