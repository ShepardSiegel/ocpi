//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Mon Jul 25 19:45:19 EDT 2011
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// axiM0_wrAddr_data              O    35 reg
// axiM0_wrAddr_valid             O     1
// axiM0_wrData_data              O    36 reg
// axiM0_wrData_valid             O     1
// axiM0_wrResp_ready             O     1 reg
// axiM0_rdAddr_data              O    35 reg
// axiM0_rdAddr_valid             O     1
// axiM0_rdResp_ready             O     1 reg
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// axiM0_wrAddr_ready_value       I     1
// axiM0_wrData_ready_value       I     1
// axiM0_wrResp_data_value        I     2 reg
// axiM0_wrResp_valid_value       I     1
// axiM0_rdAddr_ready_value       I     1
// axiM0_rdResp_data_value        I    34 reg
// axiM0_rdResp_valid_value       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWCIS2A4LM(wciS0_Clk,
		   wciS0_MReset_n,

		   wciS0_MCmd,

		   wciS0_MAddrSpace,

		   wciS0_MByteEn,

		   wciS0_MAddr,

		   wciS0_MData,

		   wciS0_SResp,

		   wciS0_SData,

		   wciS0_SThreadBusy,

		   wciS0_SFlag,

		   wciS0_MFlag,

		   axiM0_wrAddr_data,

		   axiM0_wrAddr_valid,

		   axiM0_wrAddr_ready_value,

		   axiM0_wrData_data,

		   axiM0_wrData_valid,

		   axiM0_wrData_ready_value,

		   axiM0_wrResp_data_value,

		   axiM0_wrResp_valid_value,

		   axiM0_wrResp_ready,

		   axiM0_rdAddr_data,

		   axiM0_rdAddr_valid,

		   axiM0_rdAddr_ready_value,

		   axiM0_rdResp_data_value,

		   axiM0_rdResp_valid_value,

		   axiM0_rdResp_ready);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // value method axiM0_wrAddr_data
  output [34 : 0] axiM0_wrAddr_data;

  // value method axiM0_wrAddr_valid
  output axiM0_wrAddr_valid;

  // action method axiM0_wrAddr_ready
  input  axiM0_wrAddr_ready_value;

  // value method axiM0_wrData_data
  output [35 : 0] axiM0_wrData_data;

  // value method axiM0_wrData_valid
  output axiM0_wrData_valid;

  // action method axiM0_wrData_ready
  input  axiM0_wrData_ready_value;

  // action method axiM0_wrResp_data
  input  [1 : 0] axiM0_wrResp_data_value;

  // action method axiM0_wrResp_valid
  input  axiM0_wrResp_valid_value;

  // value method axiM0_wrResp_ready
  output axiM0_wrResp_ready;

  // value method axiM0_rdAddr_data
  output [34 : 0] axiM0_rdAddr_data;

  // value method axiM0_rdAddr_valid
  output axiM0_rdAddr_valid;

  // action method axiM0_rdAddr_ready
  input  axiM0_rdAddr_ready_value;

  // action method axiM0_rdResp_data
  input  [33 : 0] axiM0_rdResp_data_value;

  // action method axiM0_rdResp_valid
  input  axiM0_rdResp_valid_value;

  // value method axiM0_rdResp_ready
  output axiM0_rdResp_ready;

  // signals for module outputs
  wire [35 : 0] axiM0_wrData_data;
  wire [34 : 0] axiM0_rdAddr_data, axiM0_wrAddr_data;
  wire [31 : 0] wciS0_SData;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire axiM0_rdAddr_valid,
       axiM0_rdResp_ready,
       axiM0_wrAddr_valid,
       axiM0_wrData_valid,
       axiM0_wrResp_ready,
       wciS0_SThreadBusy;

  // inlined wires
  wire [71 : 0] wci_wciReq$wget;
  wire [35 : 0] a4l_a4wrData_fifof_x_wire$wget;
  wire [34 : 0] a4l_a4rdAddr_fifof_x_wire$wget,
		a4l_a4wrAddr_fifof_x_wire$wget;
  wire [33 : 0] a4l_a4rdResp_data_wire$wget, wci_respF_x_wire$wget;
  wire [31 : 0] wci_Es_mAddr_w$wget, wci_Es_mData_w$wget;
  wire [3 : 0] wci_Es_mByteEn_w$wget;
  wire [2 : 0] wci_Es_mCmd_w$wget, wci_wEdge$wget;
  wire [1 : 0] a4l_a4wrResp_data_wire$wget;
  wire a4l_a4rdAddr_deq_deq$whas,
       a4l_a4rdAddr_deq_ready$whas,
       a4l_a4rdAddr_fifof_dequeueing$whas,
       a4l_a4rdAddr_fifof_enqueueing$whas,
       a4l_a4rdAddr_fifof_x_wire$whas,
       a4l_a4rdResp_enq_enq$whas,
       a4l_a4rdResp_enq_valid$whas,
       a4l_a4wrAddr_deq_deq$whas,
       a4l_a4wrAddr_deq_ready$whas,
       a4l_a4wrAddr_fifof_dequeueing$whas,
       a4l_a4wrAddr_fifof_enqueueing$whas,
       a4l_a4wrAddr_fifof_x_wire$whas,
       a4l_a4wrData_deq_deq$whas,
       a4l_a4wrData_deq_ready$whas,
       a4l_a4wrData_fifof_dequeueing$whas,
       a4l_a4wrData_fifof_enqueueing$whas,
       a4l_a4wrData_fifof_x_wire$whas,
       a4l_a4wrResp_enq_enq$whas,
       a4l_a4wrResp_enq_valid$whas,
       wci_Es_mAddrSpace_w$wget,
       wci_Es_mAddrSpace_w$whas,
       wci_Es_mAddr_w$whas,
       wci_Es_mByteEn_w$whas,
       wci_Es_mCmd_w$whas,
       wci_Es_mData_w$whas,
       wci_ctlAckReg_1$wget,
       wci_ctlAckReg_1$whas,
       wci_reqF_r_clr$whas,
       wci_reqF_r_deq$whas,
       wci_reqF_r_enq$whas,
       wci_respF_dequeueing$whas,
       wci_respF_enqueueing$whas,
       wci_respF_x_wire$whas,
       wci_sFlagReg_1$wget,
       wci_sFlagReg_1$whas,
       wci_sThreadBusy_pw$whas,
       wci_wEdge$whas,
       wci_wciReq$whas,
       wci_wci_cfrd_pw$whas,
       wci_wci_cfwr_pw$whas,
       wci_wci_ctrl_pw$whas;

  // register a4l_a4rdAddr_fifof_c_r
  reg [1 : 0] a4l_a4rdAddr_fifof_c_r;
  wire [1 : 0] a4l_a4rdAddr_fifof_c_r$D_IN;
  wire a4l_a4rdAddr_fifof_c_r$EN;

  // register a4l_a4rdAddr_fifof_q_0
  reg [34 : 0] a4l_a4rdAddr_fifof_q_0;
  reg [34 : 0] a4l_a4rdAddr_fifof_q_0$D_IN;
  wire a4l_a4rdAddr_fifof_q_0$EN;

  // register a4l_a4rdAddr_fifof_q_1
  reg [34 : 0] a4l_a4rdAddr_fifof_q_1;
  reg [34 : 0] a4l_a4rdAddr_fifof_q_1$D_IN;
  wire a4l_a4rdAddr_fifof_q_1$EN;

  // register a4l_a4wrAddr_fifof_c_r
  reg [1 : 0] a4l_a4wrAddr_fifof_c_r;
  wire [1 : 0] a4l_a4wrAddr_fifof_c_r$D_IN;
  wire a4l_a4wrAddr_fifof_c_r$EN;

  // register a4l_a4wrAddr_fifof_q_0
  reg [34 : 0] a4l_a4wrAddr_fifof_q_0;
  reg [34 : 0] a4l_a4wrAddr_fifof_q_0$D_IN;
  wire a4l_a4wrAddr_fifof_q_0$EN;

  // register a4l_a4wrAddr_fifof_q_1
  reg [34 : 0] a4l_a4wrAddr_fifof_q_1;
  reg [34 : 0] a4l_a4wrAddr_fifof_q_1$D_IN;
  wire a4l_a4wrAddr_fifof_q_1$EN;

  // register a4l_a4wrData_fifof_c_r
  reg [1 : 0] a4l_a4wrData_fifof_c_r;
  wire [1 : 0] a4l_a4wrData_fifof_c_r$D_IN;
  wire a4l_a4wrData_fifof_c_r$EN;

  // register a4l_a4wrData_fifof_q_0
  reg [35 : 0] a4l_a4wrData_fifof_q_0;
  reg [35 : 0] a4l_a4wrData_fifof_q_0$D_IN;
  wire a4l_a4wrData_fifof_q_0$EN;

  // register a4l_a4wrData_fifof_q_1
  reg [35 : 0] a4l_a4wrData_fifof_q_1;
  reg [35 : 0] a4l_a4wrData_fifof_q_1$D_IN;
  wire a4l_a4wrData_fifof_q_1$EN;

  // register wci_cEdge
  reg [2 : 0] wci_cEdge;
  wire [2 : 0] wci_cEdge$D_IN;
  wire wci_cEdge$EN;

  // register wci_cState
  reg [2 : 0] wci_cState;
  wire [2 : 0] wci_cState$D_IN;
  wire wci_cState$EN;

  // register wci_ctlAckReg
  reg wci_ctlAckReg;
  wire wci_ctlAckReg$D_IN, wci_ctlAckReg$EN;

  // register wci_ctlOpActive
  reg wci_ctlOpActive;
  wire wci_ctlOpActive$D_IN, wci_ctlOpActive$EN;

  // register wci_illegalEdge
  reg wci_illegalEdge;
  wire wci_illegalEdge$D_IN, wci_illegalEdge$EN;

  // register wci_isReset_isInReset
  reg wci_isReset_isInReset;
  wire wci_isReset_isInReset$D_IN, wci_isReset_isInReset$EN;

  // register wci_nState
  reg [2 : 0] wci_nState;
  reg [2 : 0] wci_nState$D_IN;
  wire wci_nState$EN;

  // register wci_reqF_countReg
  reg [1 : 0] wci_reqF_countReg;
  wire [1 : 0] wci_reqF_countReg$D_IN;
  wire wci_reqF_countReg$EN;

  // register wci_respF_c_r
  reg [1 : 0] wci_respF_c_r;
  wire [1 : 0] wci_respF_c_r$D_IN;
  wire wci_respF_c_r$EN;

  // register wci_respF_q_0
  reg [33 : 0] wci_respF_q_0;
  reg [33 : 0] wci_respF_q_0$D_IN;
  wire wci_respF_q_0$EN;

  // register wci_respF_q_1
  reg [33 : 0] wci_respF_q_1;
  reg [33 : 0] wci_respF_q_1$D_IN;
  wire wci_respF_q_1$EN;

  // register wci_sFlagReg
  reg wci_sFlagReg;
  wire wci_sFlagReg$D_IN, wci_sFlagReg$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // ports of submodule a4l_a4rdResp_fifof
  wire [33 : 0] a4l_a4rdResp_fifof$D_IN, a4l_a4rdResp_fifof$D_OUT;
  wire a4l_a4rdResp_fifof$CLR,
       a4l_a4rdResp_fifof$DEQ,
       a4l_a4rdResp_fifof$EMPTY_N,
       a4l_a4rdResp_fifof$ENQ,
       a4l_a4rdResp_fifof$FULL_N;

  // ports of submodule a4l_a4wrResp_fifof
  wire [1 : 0] a4l_a4wrResp_fifof$D_IN;
  wire a4l_a4wrResp_fifof$CLR,
       a4l_a4wrResp_fifof$DEQ,
       a4l_a4wrResp_fifof$EMPTY_N,
       a4l_a4wrResp_fifof$ENQ,
       a4l_a4wrResp_fifof$FULL_N;

  // ports of submodule token
  wire token$CLR, token$DEQ, token$EMPTY_N, token$ENQ, token$FULL_N;

  // ports of submodule wci_reqF
  wire [71 : 0] wci_reqF$D_IN, wci_reqF$D_OUT;
  wire wci_reqF$CLR, wci_reqF$DEQ, wci_reqF$EMPTY_N, wci_reqF$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_a4l_a4rdAddr_do_deq,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_both,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4rdResp_do_enq,
       CAN_FIRE_RL_a4l_a4wrAddr_do_deq,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_both,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrData_do_deq,
       CAN_FIRE_RL_a4l_a4wrData_fifof_both,
       CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr,
       CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr,
       CAN_FIRE_RL_a4l_a4wrResp_do_enq,
       CAN_FIRE_RL_wci_Es_doAlways_Req,
       CAN_FIRE_RL_wci_cfrd,
       CAN_FIRE_RL_wci_cfrd_resp,
       CAN_FIRE_RL_wci_cfwr,
       CAN_FIRE_RL_wci_cfwr_resp,
       CAN_FIRE_RL_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wci_ctl_op_complete,
       CAN_FIRE_RL_wci_ctl_op_start,
       CAN_FIRE_RL_wci_ctrl_EiI,
       CAN_FIRE_RL_wci_ctrl_IsO,
       CAN_FIRE_RL_wci_ctrl_OrE,
       CAN_FIRE_RL_wci_isReset_isResetAssertedUpdate,
       CAN_FIRE_RL_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_wci_reqF_enq,
       CAN_FIRE_RL_wci_request_decode,
       CAN_FIRE_RL_wci_respF_both,
       CAN_FIRE_RL_wci_respF_decCtr,
       CAN_FIRE_RL_wci_respF_deq,
       CAN_FIRE_RL_wci_respF_incCtr,
       CAN_FIRE_RL_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_wci_sThreadBusy_reg,
       CAN_FIRE___me_check_27,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_31,
       CAN_FIRE___me_check_32,
       CAN_FIRE_axiM0_rdAddr_ready,
       CAN_FIRE_axiM0_rdResp_data,
       CAN_FIRE_axiM0_rdResp_valid,
       CAN_FIRE_axiM0_wrAddr_ready,
       CAN_FIRE_axiM0_wrData_ready,
       CAN_FIRE_axiM0_wrResp_data,
       CAN_FIRE_axiM0_wrResp_valid,
       CAN_FIRE_wciS0_mAddr,
       CAN_FIRE_wciS0_mAddrSpace,
       CAN_FIRE_wciS0_mByteEn,
       CAN_FIRE_wciS0_mCmd,
       CAN_FIRE_wciS0_mData,
       CAN_FIRE_wciS0_mFlag,
       WILL_FIRE_RL_a4l_a4rdAddr_do_deq,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4rdResp_do_enq,
       WILL_FIRE_RL_a4l_a4wrAddr_do_deq,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_both,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrData_do_deq,
       WILL_FIRE_RL_a4l_a4wrData_fifof_both,
       WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr,
       WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr,
       WILL_FIRE_RL_a4l_a4wrResp_do_enq,
       WILL_FIRE_RL_wci_Es_doAlways_Req,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfrd_resp,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_cfwr_resp,
       WILL_FIRE_RL_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wci_ctl_op_complete,
       WILL_FIRE_RL_wci_ctl_op_start,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_isReset_isResetAssertedUpdate,
       WILL_FIRE_RL_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_wci_reqF_enq,
       WILL_FIRE_RL_wci_request_decode,
       WILL_FIRE_RL_wci_respF_both,
       WILL_FIRE_RL_wci_respF_decCtr,
       WILL_FIRE_RL_wci_respF_deq,
       WILL_FIRE_RL_wci_respF_incCtr,
       WILL_FIRE_RL_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_wci_sThreadBusy_reg,
       WILL_FIRE___me_check_27,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_31,
       WILL_FIRE___me_check_32,
       WILL_FIRE_axiM0_rdAddr_ready,
       WILL_FIRE_axiM0_rdResp_data,
       WILL_FIRE_axiM0_rdResp_valid,
       WILL_FIRE_axiM0_wrAddr_ready,
       WILL_FIRE_axiM0_wrData_ready,
       WILL_FIRE_axiM0_wrResp_data,
       WILL_FIRE_axiM0_wrResp_valid,
       WILL_FIRE_wciS0_mAddr,
       WILL_FIRE_wciS0_mAddrSpace,
       WILL_FIRE_wciS0_mByteEn,
       WILL_FIRE_wciS0_mCmd,
       WILL_FIRE_wciS0_mData,
       WILL_FIRE_wciS0_mFlag;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_respF_q_0$write_1__VAL_1;
  wire [35 : 0] MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1,
		MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_2,
		MUX_a4l_a4wrData_fifof_q_1$write_1__VAL_2;
  wire [34 : 0] MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1,
		MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_2,
		MUX_a4l_a4rdAddr_fifof_q_1$write_1__VAL_2,
		MUX_a4l_a4wrAddr_fifof_q_0$write_1__VAL_2,
		MUX_a4l_a4wrAddr_fifof_q_1$write_1__VAL_2;
  wire [33 : 0] MUX_wci_respF_q_0$write_1__VAL_2,
		MUX_wci_respF_q_1$write_1__VAL_2,
		MUX_wci_respF_x_wire$wset_1__VAL_1,
		MUX_wci_respF_x_wire$wset_1__VAL_2;
  wire [1 : 0] MUX_a4l_a4rdAddr_fifof_c_r$write_1__VAL_1,
	       MUX_a4l_a4rdAddr_fifof_c_r$write_1__VAL_2,
	       MUX_a4l_a4wrAddr_fifof_c_r$write_1__VAL_1,
	       MUX_a4l_a4wrAddr_fifof_c_r$write_1__VAL_2,
	       MUX_a4l_a4wrData_fifof_c_r$write_1__VAL_1,
	       MUX_a4l_a4wrData_fifof_c_r$write_1__VAL_2,
	       MUX_wci_respF_c_r$write_1__VAL_1,
	       MUX_wci_respF_c_r$write_1__VAL_2;
  wire MUX_a4l_a4rdAddr_fifof_q_0$write_1__SEL_1,
       MUX_a4l_a4rdAddr_fifof_q_1$write_1__SEL_1,
       MUX_a4l_a4wrAddr_fifof_q_0$write_1__SEL_1,
       MUX_a4l_a4wrAddr_fifof_q_1$write_1__SEL_1,
       MUX_a4l_a4wrData_fifof_q_0$write_1__SEL_1,
       MUX_a4l_a4wrData_fifof_q_1$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_2,
       MUX_wci_illegalEdge$write_1__VAL_2,
       MUX_wci_respF_q_0$write_1__SEL_1,
       MUX_wci_respF_q_1$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h3608,
	       v__h3782,
	       v__h3926,
	       v__h8601,
	       v__h8761,
	       v__h8957,
	       v__h9116;

  // action method wciS0_mCmd
  assign CAN_FIRE_wciS0_mCmd = 1'd1 ;
  assign WILL_FIRE_wciS0_mCmd = 1'd1 ;

  // action method wciS0_mAddrSpace
  assign CAN_FIRE_wciS0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wciS0_mAddrSpace = 1'd1 ;

  // action method wciS0_mByteEn
  assign CAN_FIRE_wciS0_mByteEn = 1'd1 ;
  assign WILL_FIRE_wciS0_mByteEn = 1'd1 ;

  // action method wciS0_mAddr
  assign CAN_FIRE_wciS0_mAddr = 1'd1 ;
  assign WILL_FIRE_wciS0_mAddr = 1'd1 ;

  // action method wciS0_mData
  assign CAN_FIRE_wciS0_mData = 1'd1 ;
  assign WILL_FIRE_wciS0_mData = 1'd1 ;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_reqF_countReg > 2'd1 || wci_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_sFlagReg } ;

  // action method wciS0_mFlag
  assign CAN_FIRE_wciS0_mFlag = 1'd1 ;
  assign WILL_FIRE_wciS0_mFlag = 1'd1 ;

  // value method axiM0_wrAddr_data
  assign axiM0_wrAddr_data = a4l_a4wrAddr_fifof_q_0 ;

  // value method axiM0_wrAddr_valid
  assign axiM0_wrAddr_valid = a4l_a4wrAddr_fifof_c_r != 2'd0 ;

  // action method axiM0_wrAddr_ready
  assign CAN_FIRE_axiM0_wrAddr_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_wrAddr_ready = 1'd1 ;

  // value method axiM0_wrData_data
  assign axiM0_wrData_data = a4l_a4wrData_fifof_q_0 ;

  // value method axiM0_wrData_valid
  assign axiM0_wrData_valid = a4l_a4wrData_fifof_c_r != 2'd0 ;

  // action method axiM0_wrData_ready
  assign CAN_FIRE_axiM0_wrData_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_wrData_ready = 1'd1 ;

  // action method axiM0_wrResp_data
  assign CAN_FIRE_axiM0_wrResp_data = 1'd1 ;
  assign WILL_FIRE_axiM0_wrResp_data = 1'd1 ;

  // action method axiM0_wrResp_valid
  assign CAN_FIRE_axiM0_wrResp_valid = 1'd1 ;
  assign WILL_FIRE_axiM0_wrResp_valid = 1'd1 ;

  // value method axiM0_wrResp_ready
  assign axiM0_wrResp_ready = a4l_a4wrResp_fifof$FULL_N ;

  // value method axiM0_rdAddr_data
  assign axiM0_rdAddr_data = a4l_a4rdAddr_fifof_q_0 ;

  // value method axiM0_rdAddr_valid
  assign axiM0_rdAddr_valid = a4l_a4rdAddr_fifof_c_r != 2'd0 ;

  // action method axiM0_rdAddr_ready
  assign CAN_FIRE_axiM0_rdAddr_ready = 1'd1 ;
  assign WILL_FIRE_axiM0_rdAddr_ready = 1'd1 ;

  // action method axiM0_rdResp_data
  assign CAN_FIRE_axiM0_rdResp_data = 1'd1 ;
  assign WILL_FIRE_axiM0_rdResp_data = 1'd1 ;

  // action method axiM0_rdResp_valid
  assign CAN_FIRE_axiM0_rdResp_valid = 1'd1 ;
  assign WILL_FIRE_axiM0_rdResp_valid = 1'd1 ;

  // value method axiM0_rdResp_ready
  assign axiM0_rdResp_ready = a4l_a4rdResp_fifof$FULL_N ;

  // submodule a4l_a4rdResp_fifof
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) a4l_a4rdResp_fifof(.RST_N(wciS0_MReset_n),
					      .CLK(wciS0_Clk),
					      .D_IN(a4l_a4rdResp_fifof$D_IN),
					      .ENQ(a4l_a4rdResp_fifof$ENQ),
					      .DEQ(a4l_a4rdResp_fifof$DEQ),
					      .CLR(a4l_a4rdResp_fifof$CLR),
					      .D_OUT(a4l_a4rdResp_fifof$D_OUT),
					      .FULL_N(a4l_a4rdResp_fifof$FULL_N),
					      .EMPTY_N(a4l_a4rdResp_fifof$EMPTY_N));

  // submodule a4l_a4wrResp_fifof
  FIFO2 #(.width(32'd2),
	  .guarded(32'd1)) a4l_a4wrResp_fifof(.RST_N(wciS0_MReset_n),
					      .CLK(wciS0_Clk),
					      .D_IN(a4l_a4wrResp_fifof$D_IN),
					      .ENQ(a4l_a4wrResp_fifof$ENQ),
					      .DEQ(a4l_a4wrResp_fifof$DEQ),
					      .CLR(a4l_a4wrResp_fifof$CLR),
					      .D_OUT(),
					      .FULL_N(a4l_a4wrResp_fifof$FULL_N),
					      .EMPTY_N(a4l_a4wrResp_fifof$EMPTY_N));

  // submodule token
  FIFO10 #(.guarded(32'd1)) token(.RST_N(wciS0_MReset_n),
				  .CLK(wciS0_Clk),
				  .ENQ(token$ENQ),
				  .DEQ(token$DEQ),
				  .CLR(token$CLR),
				  .FULL_N(token$FULL_N),
				  .EMPTY_N(token$EMPTY_N));

  // submodule wci_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_reqF(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(wci_reqF$D_IN),
					.ENQ(wci_reqF$ENQ),
					.DEQ(wci_reqF$DEQ),
					.CLR(wci_reqF$CLR),
					.D_OUT(wci_reqF$D_OUT),
					.FULL_N(),
					.EMPTY_N(wci_reqF$EMPTY_N));

  // rule RL_wci_request_decode
  assign CAN_FIRE_RL_wci_request_decode = wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wci_request_decode = wci_reqF$EMPTY_N ;

  // rule RL_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_wci_respF_deq
  assign CAN_FIRE_RL_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wci_respF_deq = 1'd1 ;

  // rule RL_wci_cfwr_resp
  assign CAN_FIRE_RL_wci_cfwr_resp =
	     wci_respF_c_r != 2'd2 && a4l_a4wrResp_fifof$EMPTY_N &&
	     token$EMPTY_N ;
  assign WILL_FIRE_RL_wci_cfwr_resp =
	     CAN_FIRE_RL_wci_cfwr_resp && !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_cfrd_resp
  assign CAN_FIRE_RL_wci_cfrd_resp =
	     wci_respF_c_r != 2'd2 && token$EMPTY_N &&
	     a4l_a4rdResp_fifof$EMPTY_N ;
  assign WILL_FIRE_RL_wci_cfrd_resp =
	     CAN_FIRE_RL_wci_cfrd_resp && !WILL_FIRE_RL_wci_cfwr_resp &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wci_reqF$EMPTY_N && a4l_a4wrAddr_fifof_c_r != 2'd2 &&
	     a4l_a4wrData_fifof_c_r != 2'd2 &&
	     token$FULL_N &&
	     wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wci_ctl_op_start ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wci_reqF$EMPTY_N && a4l_a4rdAddr_fifof_c_r != 2'd2 &&
	     token$FULL_N &&
	     wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wci_ctl_op_start ;

  // rule RL_wci_ctl_op_start
  assign CAN_FIRE_RL_wci_ctl_op_start =
	     wci_reqF$EMPTY_N && wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wci_ctl_op_start =
	     CAN_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_ctrl_IsO
  assign CAN_FIRE_RL_wci_ctrl_IsO =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd1 &&
	     wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_wci_ctrl_IsO = CAN_FIRE_RL_wci_ctrl_IsO ;

  // rule RL_wci_ctrl_EiI
  assign CAN_FIRE_RL_wci_ctrl_EiI =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd0 &&
	     wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_wci_ctrl_EiI = CAN_FIRE_RL_wci_ctrl_EiI ;

  // rule RL_wci_ctrl_OrE
  assign CAN_FIRE_RL_wci_ctrl_OrE =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd2 &&
	     wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_wci_ctrl_OrE = CAN_FIRE_RL_wci_ctrl_OrE ;

  // rule __me_check_27
  assign CAN_FIRE___me_check_27 = 1'b1 ;
  assign WILL_FIRE___me_check_27 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule __me_check_31
  assign CAN_FIRE___me_check_31 = 1'b1 ;
  assign WILL_FIRE___me_check_31 = 1'b1 ;

  // rule __me_check_32
  assign CAN_FIRE___me_check_32 = 1'b1 ;
  assign WILL_FIRE___me_check_32 = 1'b1 ;

  // rule RL_wci_ctl_op_complete
  assign CAN_FIRE_RL_wci_ctl_op_complete =
	     wci_respF_c_r != 2'd2 && wci_ctlOpActive && wci_ctlAckReg ;
  assign WILL_FIRE_RL_wci_ctl_op_complete = CAN_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_respF_incCtr
  assign CAN_FIRE_RL_wci_respF_incCtr =
	     ((wci_respF_c_r == 2'd0) ?
		wci_respF_x_wire$whas :
		wci_respF_c_r != 2'd1 || wci_respF_x_wire$whas) &&
	     wci_respF_enqueueing$whas &&
	     !(wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wci_respF_incCtr = CAN_FIRE_RL_wci_respF_incCtr ;

  // rule RL_wci_respF_decCtr
  assign CAN_FIRE_RL_wci_respF_decCtr =
	     wci_respF_c_r != 2'd0 && !wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_respF_decCtr = CAN_FIRE_RL_wci_respF_decCtr ;

  // rule RL_wci_respF_both
  assign CAN_FIRE_RL_wci_respF_both =
	     ((wci_respF_c_r == 2'd1) ?
		wci_respF_x_wire$whas :
		wci_respF_c_r != 2'd2 || wci_respF_x_wire$whas) &&
	     wci_respF_c_r != 2'd0 &&
	     wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_respF_both = CAN_FIRE_RL_wci_respF_both ;

  // rule RL_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_wci_isReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_wci_isReset_isResetAssertedUpdate =
	     wci_isReset_isInReset ;
  assign WILL_FIRE_RL_wci_isReset_isResetAssertedUpdate =
	     wci_isReset_isInReset ;

  // rule RL_a4l_a4wrAddr_do_deq
  assign CAN_FIRE_RL_a4l_a4wrAddr_do_deq =
	     a4l_a4wrAddr_fifof_c_r != 2'd0 && axiM0_wrAddr_ready_value ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_do_deq = CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;

  // rule RL_a4l_a4wrAddr_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr =
	     ((a4l_a4wrAddr_fifof_c_r == 2'd0) ?
		WILL_FIRE_RL_wci_cfwr :
		a4l_a4wrAddr_fifof_c_r != 2'd1 || WILL_FIRE_RL_wci_cfwr) &&
	     WILL_FIRE_RL_wci_cfwr &&
	     !CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_fifof_incCtr ;

  // rule RL_a4l_a4wrAddr_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_do_deq && !WILL_FIRE_RL_wci_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // rule RL_a4l_a4wrAddr_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrAddr_fifof_both =
	     ((a4l_a4wrAddr_fifof_c_r == 2'd1) ?
		WILL_FIRE_RL_wci_cfwr :
		a4l_a4wrAddr_fifof_c_r != 2'd2 || WILL_FIRE_RL_wci_cfwr) &&
	     CAN_FIRE_RL_a4l_a4wrAddr_do_deq &&
	     WILL_FIRE_RL_wci_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrAddr_fifof_both =
	     CAN_FIRE_RL_a4l_a4wrAddr_fifof_both ;

  // rule RL_a4l_a4wrData_do_deq
  assign CAN_FIRE_RL_a4l_a4wrData_do_deq =
	     a4l_a4wrData_fifof_c_r != 2'd0 && axiM0_wrData_ready_value ;
  assign WILL_FIRE_RL_a4l_a4wrData_do_deq = CAN_FIRE_RL_a4l_a4wrData_do_deq ;

  // rule RL_a4l_a4wrData_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr =
	     ((a4l_a4wrData_fifof_c_r == 2'd0) ?
		WILL_FIRE_RL_wci_cfwr :
		a4l_a4wrData_fifof_c_r != 2'd1 || WILL_FIRE_RL_wci_cfwr) &&
	     WILL_FIRE_RL_wci_cfwr &&
	     !CAN_FIRE_RL_a4l_a4wrData_do_deq ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4wrData_fifof_incCtr ;

  // rule RL_a4l_a4wrData_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrData_do_deq && !WILL_FIRE_RL_wci_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // rule RL_a4l_a4wrData_fifof_both
  assign CAN_FIRE_RL_a4l_a4wrData_fifof_both =
	     ((a4l_a4wrData_fifof_c_r == 2'd1) ?
		WILL_FIRE_RL_wci_cfwr :
		a4l_a4wrData_fifof_c_r != 2'd2 || WILL_FIRE_RL_wci_cfwr) &&
	     CAN_FIRE_RL_a4l_a4wrData_do_deq &&
	     WILL_FIRE_RL_wci_cfwr ;
  assign WILL_FIRE_RL_a4l_a4wrData_fifof_both =
	     CAN_FIRE_RL_a4l_a4wrData_fifof_both ;

  // rule RL_a4l_a4wrResp_do_enq
  assign CAN_FIRE_RL_a4l_a4wrResp_do_enq =
	     a4l_a4wrResp_fifof$FULL_N && axiM0_wrResp_valid_value ;
  assign WILL_FIRE_RL_a4l_a4wrResp_do_enq = CAN_FIRE_RL_a4l_a4wrResp_do_enq ;

  // rule RL_a4l_a4rdAddr_do_deq
  assign CAN_FIRE_RL_a4l_a4rdAddr_do_deq =
	     a4l_a4rdAddr_fifof_c_r != 2'd0 && axiM0_rdAddr_ready_value ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_do_deq = CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;

  // rule RL_a4l_a4rdAddr_fifof_incCtr
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr =
	     ((a4l_a4rdAddr_fifof_c_r == 2'd0) ?
		WILL_FIRE_RL_wci_cfrd :
		a4l_a4rdAddr_fifof_c_r != 2'd1 || WILL_FIRE_RL_wci_cfrd) &&
	     WILL_FIRE_RL_wci_cfrd &&
	     !CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_fifof_incCtr ;

  // rule RL_a4l_a4rdAddr_fifof_decCtr
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_do_deq && !WILL_FIRE_RL_wci_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr =
	     CAN_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // rule RL_a4l_a4rdAddr_fifof_both
  assign CAN_FIRE_RL_a4l_a4rdAddr_fifof_both =
	     ((a4l_a4rdAddr_fifof_c_r == 2'd1) ?
		WILL_FIRE_RL_wci_cfrd :
		a4l_a4rdAddr_fifof_c_r != 2'd2 || WILL_FIRE_RL_wci_cfrd) &&
	     CAN_FIRE_RL_a4l_a4rdAddr_do_deq &&
	     WILL_FIRE_RL_wci_cfrd ;
  assign WILL_FIRE_RL_a4l_a4rdAddr_fifof_both =
	     CAN_FIRE_RL_a4l_a4rdAddr_fifof_both ;

  // rule RL_a4l_a4rdResp_do_enq
  assign CAN_FIRE_RL_a4l_a4rdResp_do_enq =
	     a4l_a4rdResp_fifof$FULL_N && axiM0_rdResp_valid_value ;
  assign WILL_FIRE_RL_a4l_a4rdResp_do_enq = CAN_FIRE_RL_a4l_a4rdResp_do_enq ;

  // rule RL_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_wci_reqF_enq
  assign CAN_FIRE_RL_wci_reqF_enq = wci_wciReq$wget[71:69] != 3'd0 ;
  assign WILL_FIRE_RL_wci_reqF_enq = CAN_FIRE_RL_wci_reqF_enq ;

  // rule RL_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wci_reqF__updateLevelCounter =
	     (wci_wciReq$wget[71:69] != 3'd0) != wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wci_reqF__updateLevelCounter ;

  // inputs to muxes for submodule ports
  assign MUX_a4l_a4rdAddr_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_c_r == 2'd0 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_c_r == 2'd1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_c_r == 2'd0 ;
  assign MUX_a4l_a4wrAddr_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_c_r == 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_c_r == 2'd0 ;
  assign MUX_a4l_a4wrData_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_c_r == 2'd1 ;
  assign MUX_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ;
  assign MUX_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState != 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 && wci_cState != 3'd1 &&
	      wci_cState != 3'd3 ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState != 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 && wci_cState != 3'd3 &&
	      wci_cState != 3'd2 &&
	      wci_cState != 3'd1 ||
	      wci_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ;
  assign MUX_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_c_r$write_1__VAL_1 =
	     a4l_a4rdAddr_fifof_c_r + 2'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_c_r$write_1__VAL_2 =
	     a4l_a4rdAddr_fifof_c_r - 2'd1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 =
	     { 3'd0, wci_reqF$D_OUT[63:32] } ;
  assign MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_2 =
	     (a4l_a4rdAddr_fifof_c_r == 2'd1) ?
	       MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 :
	       a4l_a4rdAddr_fifof_q_1 ;
  assign MUX_a4l_a4rdAddr_fifof_q_1$write_1__VAL_2 =
	     (a4l_a4rdAddr_fifof_c_r == 2'd2) ?
	       MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 :
	       35'd0 ;
  assign MUX_a4l_a4wrAddr_fifof_c_r$write_1__VAL_1 =
	     a4l_a4wrAddr_fifof_c_r + 2'd1 ;
  assign MUX_a4l_a4wrAddr_fifof_c_r$write_1__VAL_2 =
	     a4l_a4wrAddr_fifof_c_r - 2'd1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_0$write_1__VAL_2 =
	     (a4l_a4wrAddr_fifof_c_r == 2'd1) ?
	       MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 :
	       a4l_a4wrAddr_fifof_q_1 ;
  assign MUX_a4l_a4wrAddr_fifof_q_1$write_1__VAL_2 =
	     (a4l_a4wrAddr_fifof_c_r == 2'd2) ?
	       MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 :
	       35'd0 ;
  assign MUX_a4l_a4wrData_fifof_c_r$write_1__VAL_1 =
	     a4l_a4wrData_fifof_c_r + 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_c_r$write_1__VAL_2 =
	     a4l_a4wrData_fifof_c_r - 2'd1 ;
  assign MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1 =
	     { wci_reqF$D_OUT[67:64], wci_reqF$D_OUT[31:0] } ;
  assign MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_2 =
	     (a4l_a4wrData_fifof_c_r == 2'd1) ?
	       MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1 :
	       a4l_a4wrData_fifof_q_1 ;
  assign MUX_a4l_a4wrData_fifof_q_1$write_1__VAL_2 =
	     (a4l_a4wrData_fifof_c_r == 2'd2) ?
	       MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1 :
	       36'd0 ;
  assign MUX_wci_illegalEdge$write_1__VAL_2 =
	     wci_reqF$D_OUT[36:34] != 3'd4 && wci_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_respF_c_r$write_1__VAL_1 = wci_respF_c_r + 2'd1 ;
  assign MUX_wci_respF_c_r$write_1__VAL_2 = wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_wci_ctl_op_complete or
	  MUX_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd_resp or
	  MUX_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr_resp)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_ctl_op_complete:
	  MUX_wci_respF_q_0$write_1__VAL_1 =
	      MUX_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd_resp:
	  MUX_wci_respF_q_0$write_1__VAL_1 =
	      MUX_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr_resp:
	  MUX_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_respF_q_0$write_1__VAL_2 =
	     (wci_respF_c_r == 2'd1) ?
	       MUX_wci_respF_q_0$write_1__VAL_1 :
	       wci_respF_q_1 ;
  assign MUX_wci_respF_q_1$write_1__VAL_2 =
	     (wci_respF_c_r == 2'd2) ?
	       MUX_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_1 =
	     wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, a4l_a4rdResp_fifof$D_OUT[31:0] } ;

  // inlined wires
  assign wci_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wciReq$whas = 1'd1 ;
  assign wci_respF_x_wire$wget = MUX_wci_respF_q_0$write_1__VAL_1 ;
  assign wci_respF_x_wire$whas =
	     WILL_FIRE_RL_wci_ctl_op_complete || WILL_FIRE_RL_wci_cfrd_resp ||
	     WILL_FIRE_RL_wci_cfwr_resp ;
  assign wci_wEdge$wget = wci_reqF$D_OUT[36:34] ;
  assign wci_wEdge$whas = WILL_FIRE_RL_wci_ctl_op_start ;
  assign wci_sFlagReg_1$wget = 1'b0 ;
  assign wci_sFlagReg_1$whas = 1'b0 ;
  assign wci_ctlAckReg_1$wget = 1'd1 ;
  assign wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign a4l_a4wrAddr_fifof_x_wire$wget =
	     MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 ;
  assign a4l_a4wrAddr_fifof_x_wire$whas = WILL_FIRE_RL_wci_cfwr ;
  assign a4l_a4wrData_fifof_x_wire$wget =
	     MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1 ;
  assign a4l_a4wrData_fifof_x_wire$whas = WILL_FIRE_RL_wci_cfwr ;
  assign a4l_a4rdAddr_fifof_x_wire$wget =
	     MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 ;
  assign a4l_a4rdAddr_fifof_x_wire$whas = WILL_FIRE_RL_wci_cfrd ;
  assign wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_Es_mData_w$whas = 1'd1 ;
  assign wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wci_reqF_r_enq$whas = CAN_FIRE_RL_wci_reqF_enq ;
  assign wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_ctl_op_start ;
  assign wci_reqF_r_clr$whas = 1'b0 ;
  assign wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_cfrd_resp || WILL_FIRE_RL_wci_cfwr_resp ||
	     WILL_FIRE_RL_wci_ctl_op_complete ;
  assign wci_respF_dequeueing$whas = wci_respF_c_r != 2'd0 ;
  assign wci_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wci_cfwr_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[68] &&
	     wci_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wci_cfrd_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[68] &&
	     wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wci_ctrl_pw$whas =
	     wci_reqF$EMPTY_N && !wci_reqF$D_OUT[68] &&
	     wci_reqF$D_OUT[71:69] == 3'd2 ;
  assign a4l_a4wrAddr_fifof_enqueueing$whas = WILL_FIRE_RL_wci_cfwr ;
  assign a4l_a4wrAddr_fifof_dequeueing$whas =
	     CAN_FIRE_RL_a4l_a4wrAddr_do_deq ;
  assign a4l_a4wrAddr_deq_ready$whas = axiM0_wrAddr_ready_value ;
  assign a4l_a4wrAddr_deq_deq$whas = 1'b0 ;
  assign a4l_a4wrData_fifof_enqueueing$whas = WILL_FIRE_RL_wci_cfwr ;
  assign a4l_a4wrData_fifof_dequeueing$whas =
	     CAN_FIRE_RL_a4l_a4wrData_do_deq ;
  assign a4l_a4wrData_deq_ready$whas = axiM0_wrData_ready_value ;
  assign a4l_a4wrData_deq_deq$whas = 1'b0 ;
  assign a4l_a4wrResp_enq_valid$whas = axiM0_wrResp_valid_value ;
  assign a4l_a4wrResp_enq_enq$whas = 1'b0 ;
  assign a4l_a4rdAddr_fifof_enqueueing$whas = WILL_FIRE_RL_wci_cfrd ;
  assign a4l_a4rdAddr_fifof_dequeueing$whas =
	     CAN_FIRE_RL_a4l_a4rdAddr_do_deq ;
  assign a4l_a4rdAddr_deq_ready$whas = axiM0_rdAddr_ready_value ;
  assign a4l_a4rdAddr_deq_deq$whas = 1'b0 ;
  assign a4l_a4rdResp_enq_valid$whas = axiM0_rdResp_valid_value ;
  assign a4l_a4rdResp_enq_enq$whas = 1'b0 ;
  assign a4l_a4wrResp_data_wire$wget = axiM0_wrResp_data_value ;
  assign a4l_a4rdResp_data_wire$wget = axiM0_rdResp_data_value ;

  // register a4l_a4rdAddr_fifof_c_r
  assign a4l_a4rdAddr_fifof_c_r$D_IN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr ?
	       MUX_a4l_a4rdAddr_fifof_c_r$write_1__VAL_1 :
	       MUX_a4l_a4rdAddr_fifof_c_r$write_1__VAL_2 ;
  assign a4l_a4rdAddr_fifof_c_r$EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // register a4l_a4rdAddr_fifof_q_0
  always@(MUX_a4l_a4rdAddr_fifof_q_0$write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_both or
	  MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr or a4l_a4rdAddr_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdAddr_fifof_q_0$write_1__SEL_1:
	  a4l_a4rdAddr_fifof_q_0$D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_both:
	  a4l_a4rdAddr_fifof_q_0$D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr:
	  a4l_a4rdAddr_fifof_q_0$D_IN = a4l_a4rdAddr_fifof_q_1;
      default: a4l_a4rdAddr_fifof_q_0$D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdAddr_fifof_q_0$EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // register a4l_a4rdAddr_fifof_q_1
  always@(MUX_a4l_a4rdAddr_fifof_q_1$write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_both or
	  MUX_a4l_a4rdAddr_fifof_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4rdAddr_fifof_q_1$write_1__SEL_1:
	  a4l_a4rdAddr_fifof_q_1$D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_both:
	  a4l_a4rdAddr_fifof_q_1$D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr:
	  a4l_a4rdAddr_fifof_q_1$D_IN = 35'd0;
      default: a4l_a4rdAddr_fifof_q_1$D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4rdAddr_fifof_q_1$EN =
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_incCtr &&
	     a4l_a4rdAddr_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_both ||
	     WILL_FIRE_RL_a4l_a4rdAddr_fifof_decCtr ;

  // register a4l_a4wrAddr_fifof_c_r
  assign a4l_a4wrAddr_fifof_c_r$D_IN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr ?
	       MUX_a4l_a4wrAddr_fifof_c_r$write_1__VAL_1 :
	       MUX_a4l_a4wrAddr_fifof_c_r$write_1__VAL_2 ;
  assign a4l_a4wrAddr_fifof_c_r$EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // register a4l_a4wrAddr_fifof_q_0
  always@(MUX_a4l_a4wrAddr_fifof_q_0$write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_both or
	  MUX_a4l_a4wrAddr_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr or a4l_a4wrAddr_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrAddr_fifof_q_0$write_1__SEL_1:
	  a4l_a4wrAddr_fifof_q_0$D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_both:
	  a4l_a4wrAddr_fifof_q_0$D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr:
	  a4l_a4wrAddr_fifof_q_0$D_IN = a4l_a4wrAddr_fifof_q_1;
      default: a4l_a4wrAddr_fifof_q_0$D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrAddr_fifof_q_0$EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // register a4l_a4wrAddr_fifof_q_1
  always@(MUX_a4l_a4wrAddr_fifof_q_1$write_1__SEL_1 or
	  MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_both or
	  MUX_a4l_a4wrAddr_fifof_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrAddr_fifof_q_1$write_1__SEL_1:
	  a4l_a4wrAddr_fifof_q_1$D_IN =
	      MUX_a4l_a4rdAddr_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_both:
	  a4l_a4wrAddr_fifof_q_1$D_IN =
	      MUX_a4l_a4wrAddr_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr:
	  a4l_a4wrAddr_fifof_q_1$D_IN = 35'd0;
      default: a4l_a4wrAddr_fifof_q_1$D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrAddr_fifof_q_1$EN =
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_incCtr &&
	     a4l_a4wrAddr_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_both ||
	     WILL_FIRE_RL_a4l_a4wrAddr_fifof_decCtr ;

  // register a4l_a4wrData_fifof_c_r
  assign a4l_a4wrData_fifof_c_r$D_IN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr ?
	       MUX_a4l_a4wrData_fifof_c_r$write_1__VAL_1 :
	       MUX_a4l_a4wrData_fifof_c_r$write_1__VAL_2 ;
  assign a4l_a4wrData_fifof_c_r$EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // register a4l_a4wrData_fifof_q_0
  always@(MUX_a4l_a4wrData_fifof_q_0$write_1__SEL_1 or
	  MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_both or
	  MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr or a4l_a4wrData_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrData_fifof_q_0$write_1__SEL_1:
	  a4l_a4wrData_fifof_q_0$D_IN =
	      MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_a4l_a4wrData_fifof_both:
	  a4l_a4wrData_fifof_q_0$D_IN =
	      MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr:
	  a4l_a4wrData_fifof_q_0$D_IN = a4l_a4wrData_fifof_q_1;
      default: a4l_a4wrData_fifof_q_0$D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrData_fifof_q_0$EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // register a4l_a4wrData_fifof_q_1
  always@(MUX_a4l_a4wrData_fifof_q_1$write_1__SEL_1 or
	  MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_both or
	  MUX_a4l_a4wrData_fifof_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_a4l_a4wrData_fifof_q_1$write_1__SEL_1:
	  a4l_a4wrData_fifof_q_1$D_IN =
	      MUX_a4l_a4wrData_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_a4l_a4wrData_fifof_both:
	  a4l_a4wrData_fifof_q_1$D_IN =
	      MUX_a4l_a4wrData_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr:
	  a4l_a4wrData_fifof_q_1$D_IN = 36'd0;
      default: a4l_a4wrData_fifof_q_1$D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign a4l_a4wrData_fifof_q_1$EN =
	     WILL_FIRE_RL_a4l_a4wrData_fifof_incCtr &&
	     a4l_a4wrData_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_both ||
	     WILL_FIRE_RL_a4l_a4wrData_fifof_decCtr ;

  // register wci_cEdge
  assign wci_cEdge$D_IN = wci_reqF$D_OUT[36:34] ;
  assign wci_cEdge$EN = WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_cState
  assign wci_cState$D_IN = wci_nState ;
  assign wci_cState$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge ;

  // register wci_ctlAckReg
  assign wci_ctlAckReg$D_IN = wci_ctlAckReg_1$whas ;
  assign wci_ctlAckReg$EN = 1'd1 ;

  // register wci_ctlOpActive
  assign wci_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_ctl_op_complete ;
  assign wci_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete ||
	     WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_illegalEdge
  assign wci_illegalEdge$D_IN =
	     !MUX_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_illegalEdge$write_1__VAL_2 ;
  assign wci_illegalEdge$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ||
	     MUX_wci_illegalEdge$write_1__SEL_2 ;

  // register wci_isReset_isInReset
  assign wci_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_isReset_isInReset$EN = wci_isReset_isInReset ;

  // register wci_nState
  always@(wci_reqF$D_OUT)
  begin
    case (wci_reqF$D_OUT[36:34])
      3'd0: wci_nState$D_IN = 3'd1;
      3'd1: wci_nState$D_IN = 3'd2;
      3'd2: wci_nState$D_IN = 3'd3;
      default: wci_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_nState$EN =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState == 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_cState == 3'd1 || wci_cState == 3'd3) ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState == 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_cState == 3'd3 || wci_cState == 3'd2 ||
	       wci_cState == 3'd1)) ;

  // register wci_reqF_countReg
  assign wci_reqF_countReg$D_IN =
	     (wci_wciReq$wget[71:69] != 3'd0) ?
	       wci_reqF_countReg + 2'd1 :
	       wci_reqF_countReg - 2'd1 ;
  assign wci_reqF_countReg$EN = CAN_FIRE_RL_wci_reqF__updateLevelCounter ;

  // register wci_respF_c_r
  assign wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_respF_incCtr ?
	       MUX_wci_respF_c_r$write_1__VAL_1 :
	       MUX_wci_respF_c_r$write_1__VAL_2 ;
  assign wci_respF_c_r$EN =
	     WILL_FIRE_RL_wci_respF_incCtr || WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_respF_q_0
  always@(MUX_wci_respF_q_0$write_1__SEL_1 or
	  MUX_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_respF_decCtr or wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_respF_q_0$write_1__SEL_1:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_0$D_IN = wci_respF_q_1;
      default: wci_respF_q_0$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF_q_0$EN =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_respF_q_1
  always@(MUX_wci_respF_q_1$write_1__SEL_1 or
	  MUX_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_1$write_1__VAL_2 or WILL_FIRE_RL_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_respF_q_1$write_1__SEL_1:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_respF_q_1$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF_q_1$EN =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_sFlagReg
  assign wci_sFlagReg$D_IN = 1'b0 ;
  assign wci_sFlagReg$EN = 1'd1 ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // submodule a4l_a4rdResp_fifof
  assign a4l_a4rdResp_fifof$D_IN = axiM0_rdResp_data_value ;
  assign a4l_a4rdResp_fifof$ENQ = CAN_FIRE_RL_a4l_a4rdResp_do_enq ;
  assign a4l_a4rdResp_fifof$DEQ = WILL_FIRE_RL_wci_cfrd_resp ;
  assign a4l_a4rdResp_fifof$CLR = 1'b0 ;

  // submodule a4l_a4wrResp_fifof
  assign a4l_a4wrResp_fifof$D_IN = axiM0_wrResp_data_value ;
  assign a4l_a4wrResp_fifof$ENQ = CAN_FIRE_RL_a4l_a4wrResp_do_enq ;
  assign a4l_a4wrResp_fifof$DEQ = WILL_FIRE_RL_wci_cfwr_resp ;
  assign a4l_a4wrResp_fifof$CLR = 1'b0 ;

  // submodule token
  assign token$ENQ = WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ;
  assign token$DEQ =
	     WILL_FIRE_RL_wci_cfrd_resp || WILL_FIRE_RL_wci_cfwr_resp ;
  assign token$CLR = 1'b0 ;

  // submodule wci_reqF
  assign wci_reqF$D_IN = wci_wciReq$wget ;
  assign wci_reqF$ENQ = CAN_FIRE_RL_wci_reqF_enq ;
  assign wci_reqF$DEQ = wci_reqF_r_deq$whas ;
  assign wci_reqF$CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        a4l_a4rdAddr_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 35'd0;
	a4l_a4wrData_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (a4l_a4rdAddr_fifof_c_r$EN)
	  a4l_a4rdAddr_fifof_c_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_c_r$D_IN;
	if (a4l_a4rdAddr_fifof_q_0$EN)
	  a4l_a4rdAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_0$D_IN;
	if (a4l_a4rdAddr_fifof_q_1$EN)
	  a4l_a4rdAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4rdAddr_fifof_q_1$D_IN;
	if (a4l_a4wrAddr_fifof_c_r$EN)
	  a4l_a4wrAddr_fifof_c_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_c_r$D_IN;
	if (a4l_a4wrAddr_fifof_q_0$EN)
	  a4l_a4wrAddr_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_0$D_IN;
	if (a4l_a4wrAddr_fifof_q_1$EN)
	  a4l_a4wrAddr_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrAddr_fifof_q_1$D_IN;
	if (a4l_a4wrData_fifof_c_r$EN)
	  a4l_a4wrData_fifof_c_r <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_c_r$D_IN;
	if (a4l_a4wrData_fifof_q_0$EN)
	  a4l_a4wrData_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_0$D_IN;
	if (a4l_a4wrData_fifof_q_1$EN)
	  a4l_a4wrData_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      a4l_a4wrData_fifof_q_1$D_IN;
	if (wci_cEdge$EN) wci_cEdge <= `BSV_ASSIGNMENT_DELAY wci_cEdge$D_IN;
	if (wci_cState$EN)
	  wci_cState <= `BSV_ASSIGNMENT_DELAY wci_cState$D_IN;
	if (wci_ctlAckReg$EN)
	  wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_ctlAckReg$D_IN;
	if (wci_ctlOpActive$EN)
	  wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY wci_ctlOpActive$D_IN;
	if (wci_illegalEdge$EN)
	  wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY wci_illegalEdge$D_IN;
	if (wci_nState$EN)
	  wci_nState <= `BSV_ASSIGNMENT_DELAY wci_nState$D_IN;
	if (wci_reqF_countReg$EN)
	  wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY wci_reqF_countReg$D_IN;
	if (wci_respF_c_r$EN)
	  wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_respF_c_r$D_IN;
	if (wci_respF_q_0$EN)
	  wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_0$D_IN;
	if (wci_respF_q_1$EN)
	  wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_1$D_IN;
	if (wci_sFlagReg$EN)
	  wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_sFlagReg$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
      end
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_isReset_isInReset$EN)
	wci_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a4l_a4rdAddr_fifof_c_r = 2'h2;
    a4l_a4rdAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4rdAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_c_r = 2'h2;
    a4l_a4wrAddr_fifof_q_0 = 35'h2AAAAAAAA;
    a4l_a4wrAddr_fifof_q_1 = 35'h2AAAAAAAA;
    a4l_a4wrData_fifof_c_r = 2'h2;
    a4l_a4wrData_fifof_q_0 = 36'hAAAAAAAAA;
    a4l_a4wrData_fifof_q_1 = 36'hAAAAAAAAA;
    wci_cEdge = 3'h2;
    wci_cState = 3'h2;
    wci_ctlAckReg = 1'h0;
    wci_ctlOpActive = 1'h0;
    wci_illegalEdge = 1'h0;
    wci_isReset_isInReset = 1'h0;
    wci_nState = 3'h2;
    wci_reqF_countReg = 2'h2;
    wci_respF_c_r = 2'h2;
    wci_respF_q_0 = 34'h2AAAAAAAA;
    wci_respF_q_1 = 34'h2AAAAAAAA;
    wci_sFlagReg = 1'h0;
    wci_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr_resp)
	begin
	  v__h8761 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr_resp)
	$display("[%0d]: %m: WCI CONFIG WRITE RESPOSNE", v__h8761);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd_resp)
	begin
	  v__h9116 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd_resp)
	$display("[%0d]: %m: WCI CONFIG READ RESPOSNE Data:%0x",
		 v__h9116,
		 a4l_a4rdResp_fifof$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h8601 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h8601,
		 wci_reqF$D_OUT[63:32],
		 wci_reqF$D_OUT[67:64],
		 wci_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h8957 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x",
		 v__h8957,
		 wci_reqF$D_OUT[63:32],
		 wci_reqF$D_OUT[67:64]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	begin
	  v__h3608 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3608,
		 wci_reqF$D_OUT[36:34],
		 wci_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/axi/WCIS2AL4M.bsv\", line 26, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	begin
	  v__h3926 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3926,
		 wci_cEdge,
		 wci_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	begin
	  v__h3782 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3782,
		 wci_cEdge,
		 wci_cState,
		 wci_nState);
  end
  // synopsys translate_on
endmodule  // mkWCIS2A4LM

