//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Mon Dec 20 16:58:44 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     4
// pcie_txn                       O     4
// debug                          O    32
// p125clk                        O     1 clock
// CLK_GATE_p125clk               O     1 const
// RST_N_p125rst                  O     1 reset
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// pcie_rxp_i                     I     4
// pcie_rxn_i                     I     4
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOPEDv6(pci0_clkp,
		pci0_clkn,

		pcie_rxp_i,

		pcie_rxn_i,

		pcie_txp,

		pcie_txn,

		debug,

		p125clk,
		CLK_GATE_p125clk,

		RST_N_p125rst);
  input  pci0_clkp;
  input  pci0_clkn;

  // action method pcie_rxp
  input  [3 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [3 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [3 : 0] pcie_txp;

  // value method pcie_txn
  output [3 : 0] pcie_txn;

  // value method debug
  output [31 : 0] debug;

  // oscillator and gates for output clock p125clk
  output p125clk;
  output CLK_GATE_p125clk;

  // output resets
  output RST_N_p125rst;

  // signals for module outputs
  wire [31 : 0] debug;
  wire [3 : 0] pcie_txn, pcie_txp;
  wire CLK_GATE_p125clk, RST_N_p125rst, p125clk;

  // inlined wires
  wire [66 : 0] dp0_wti_wtiReq$wget, dp1_wti_wtiReq$wget;
  wire [63 : 0] dp0_wmi_nowW$wget, dp1_wmi_nowW$wget;
  wire [59 : 0] dp0_wci_wciReq$wget, dp1_wci_wciReq$wget;
  wire [37 : 0] dp0_wmi_wmi_wmiDh$wget, dp1_wmi_wmi_wmiDh$wget;
  wire [33 : 0] dp0_wci_respF_x_wire$wget,
		dp0_wmi_wmi_respF_x_wire$wget,
		dp1_wci_respF_x_wire$wget,
		dp1_wmi_wmi_respF_x_wire$wget;
  wire [31 : 0] dp0_bram_serverAdapterA_1_outData_enqData$wget,
		dp0_bram_serverAdapterA_1_outData_outData$wget,
		dp0_bram_serverAdapterA_2_outData_enqData$wget,
		dp0_bram_serverAdapterA_2_outData_outData$wget,
		dp0_bram_serverAdapterA_3_outData_enqData$wget,
		dp0_bram_serverAdapterA_3_outData_outData$wget,
		dp0_bram_serverAdapterA_outData_enqData$wget,
		dp0_bram_serverAdapterA_outData_outData$wget,
		dp0_bram_serverAdapterB_1_outData_enqData$wget,
		dp0_bram_serverAdapterB_1_outData_outData$wget,
		dp0_bram_serverAdapterB_2_outData_enqData$wget,
		dp0_bram_serverAdapterB_2_outData_outData$wget,
		dp0_bram_serverAdapterB_3_outData_enqData$wget,
		dp0_bram_serverAdapterB_3_outData_outData$wget,
		dp0_bram_serverAdapterB_outData_enqData$wget,
		dp0_bram_serverAdapterB_outData_outData$wget,
		dp0_wci_Es_mData_w$wget,
		dp0_wmi_Es_mData_w$wget,
		dp0_wmi_wmi_wmiMFlag$wget,
		dp0_wmi_wmi_wmiReq$wget,
		dp1_bram_serverAdapterA_1_outData_enqData$wget,
		dp1_bram_serverAdapterA_1_outData_outData$wget,
		dp1_bram_serverAdapterA_2_outData_enqData$wget,
		dp1_bram_serverAdapterA_2_outData_outData$wget,
		dp1_bram_serverAdapterA_3_outData_enqData$wget,
		dp1_bram_serverAdapterA_3_outData_outData$wget,
		dp1_bram_serverAdapterA_outData_enqData$wget,
		dp1_bram_serverAdapterA_outData_outData$wget,
		dp1_bram_serverAdapterB_1_outData_enqData$wget,
		dp1_bram_serverAdapterB_1_outData_outData$wget,
		dp1_bram_serverAdapterB_2_outData_enqData$wget,
		dp1_bram_serverAdapterB_2_outData_outData$wget,
		dp1_bram_serverAdapterB_3_outData_enqData$wget,
		dp1_bram_serverAdapterB_3_outData_outData$wget,
		dp1_bram_serverAdapterB_outData_enqData$wget,
		dp1_bram_serverAdapterB_outData_outData$wget,
		dp1_wci_Es_mData_w$wget,
		dp1_wmi_Es_mData_w$wget,
		dp1_wmi_wmi_wmiMFlag$wget,
		dp1_wmi_wmi_wmiReq$wget;
  wire [19 : 0] dp0_wci_Es_mAddr_w$wget, dp1_wci_Es_mAddr_w$wget;
  wire [15 : 0] dp0_bml_crdBuf_modulus_bw$wget,
		dp0_bml_fabBuf_modulus_bw$wget,
		dp0_bml_lclBuf_modulus_bw$wget,
		dp0_bml_remBuf_modulus_bw$wget,
		dp1_bml_crdBuf_modulus_bw$wget,
		dp1_bml_fabBuf_modulus_bw$wget,
		dp1_bml_lclBuf_modulus_bw$wget,
		dp1_bml_remBuf_modulus_bw$wget;
  wire [13 : 0] dp0_wmi_Es_mAddr_w$wget, dp1_wmi_Es_mAddr_w$wget;
  wire [11 : 0] dp0_wmi_Es_mBurstLength_w$wget,
		dp1_wmi_Es_mBurstLength_w$wget;
  wire [7 : 0] pciw_pcie_irq_wInterruptDo$wget;
  wire [3 : 0] dp0_bml_dpControl$wget,
	       dp0_tlp_dpControl$wget,
	       dp0_wci_Es_mByteEn_w$wget,
	       dp0_wmi_Es_mDataByteEn_w$wget,
	       dp0_wmi_dpControl$wget,
	       dp1_bml_dpControl$wget,
	       dp1_tlp_dpControl$wget,
	       dp1_wci_Es_mByteEn_w$wget,
	       dp1_wmi_Es_mDataByteEn_w$wget,
	       dp1_wmi_dpControl$wget;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_1$wget,
	       dp0_bram_serverAdapterA_1_cnt_2$wget,
	       dp0_bram_serverAdapterA_1_cnt_3$wget,
	       dp0_bram_serverAdapterA_2_cnt_1$wget,
	       dp0_bram_serverAdapterA_2_cnt_2$wget,
	       dp0_bram_serverAdapterA_2_cnt_3$wget,
	       dp0_bram_serverAdapterA_3_cnt_1$wget,
	       dp0_bram_serverAdapterA_3_cnt_2$wget,
	       dp0_bram_serverAdapterA_3_cnt_3$wget,
	       dp0_bram_serverAdapterA_cnt_1$wget,
	       dp0_bram_serverAdapterA_cnt_2$wget,
	       dp0_bram_serverAdapterA_cnt_3$wget,
	       dp0_bram_serverAdapterB_1_cnt_1$wget,
	       dp0_bram_serverAdapterB_1_cnt_2$wget,
	       dp0_bram_serverAdapterB_1_cnt_3$wget,
	       dp0_bram_serverAdapterB_2_cnt_1$wget,
	       dp0_bram_serverAdapterB_2_cnt_2$wget,
	       dp0_bram_serverAdapterB_2_cnt_3$wget,
	       dp0_bram_serverAdapterB_3_cnt_1$wget,
	       dp0_bram_serverAdapterB_3_cnt_2$wget,
	       dp0_bram_serverAdapterB_3_cnt_3$wget,
	       dp0_bram_serverAdapterB_cnt_1$wget,
	       dp0_bram_serverAdapterB_cnt_2$wget,
	       dp0_bram_serverAdapterB_cnt_3$wget,
	       dp0_wci_Es_mCmd_w$wget,
	       dp0_wci_wEdge$wget,
	       dp0_wmi_Es_mCmd_w$wget,
	       dp1_bram_serverAdapterA_1_cnt_1$wget,
	       dp1_bram_serverAdapterA_1_cnt_2$wget,
	       dp1_bram_serverAdapterA_1_cnt_3$wget,
	       dp1_bram_serverAdapterA_2_cnt_1$wget,
	       dp1_bram_serverAdapterA_2_cnt_2$wget,
	       dp1_bram_serverAdapterA_2_cnt_3$wget,
	       dp1_bram_serverAdapterA_3_cnt_1$wget,
	       dp1_bram_serverAdapterA_3_cnt_2$wget,
	       dp1_bram_serverAdapterA_3_cnt_3$wget,
	       dp1_bram_serverAdapterA_cnt_1$wget,
	       dp1_bram_serverAdapterA_cnt_2$wget,
	       dp1_bram_serverAdapterA_cnt_3$wget,
	       dp1_bram_serverAdapterB_1_cnt_1$wget,
	       dp1_bram_serverAdapterB_1_cnt_2$wget,
	       dp1_bram_serverAdapterB_1_cnt_3$wget,
	       dp1_bram_serverAdapterB_2_cnt_1$wget,
	       dp1_bram_serverAdapterB_2_cnt_2$wget,
	       dp1_bram_serverAdapterB_2_cnt_3$wget,
	       dp1_bram_serverAdapterB_3_cnt_1$wget,
	       dp1_bram_serverAdapterB_3_cnt_2$wget,
	       dp1_bram_serverAdapterB_3_cnt_3$wget,
	       dp1_bram_serverAdapterB_cnt_1$wget,
	       dp1_bram_serverAdapterB_cnt_2$wget,
	       dp1_bram_serverAdapterB_cnt_3$wget,
	       dp1_wci_Es_mCmd_w$wget,
	       dp1_wci_wEdge$wget,
	       dp1_wmi_Es_mCmd_w$wget;
  wire [1 : 0] dp0_bram_serverAdapterA_1_s1_1$wget,
	       dp0_bram_serverAdapterA_1_writeWithResp$wget,
	       dp0_bram_serverAdapterA_2_s1_1$wget,
	       dp0_bram_serverAdapterA_2_writeWithResp$wget,
	       dp0_bram_serverAdapterA_3_s1_1$wget,
	       dp0_bram_serverAdapterA_3_writeWithResp$wget,
	       dp0_bram_serverAdapterA_s1_1$wget,
	       dp0_bram_serverAdapterA_writeWithResp$wget,
	       dp0_bram_serverAdapterB_1_s1_1$wget,
	       dp0_bram_serverAdapterB_1_writeWithResp$wget,
	       dp0_bram_serverAdapterB_2_s1_1$wget,
	       dp0_bram_serverAdapterB_2_writeWithResp$wget,
	       dp0_bram_serverAdapterB_3_s1_1$wget,
	       dp0_bram_serverAdapterB_3_writeWithResp$wget,
	       dp0_bram_serverAdapterB_s1_1$wget,
	       dp0_bram_serverAdapterB_writeWithResp$wget,
	       dp1_bram_serverAdapterA_1_s1_1$wget,
	       dp1_bram_serverAdapterA_1_writeWithResp$wget,
	       dp1_bram_serverAdapterA_2_s1_1$wget,
	       dp1_bram_serverAdapterA_2_writeWithResp$wget,
	       dp1_bram_serverAdapterA_3_s1_1$wget,
	       dp1_bram_serverAdapterA_3_writeWithResp$wget,
	       dp1_bram_serverAdapterA_s1_1$wget,
	       dp1_bram_serverAdapterA_writeWithResp$wget,
	       dp1_bram_serverAdapterB_1_s1_1$wget,
	       dp1_bram_serverAdapterB_1_writeWithResp$wget,
	       dp1_bram_serverAdapterB_2_s1_1$wget,
	       dp1_bram_serverAdapterB_2_writeWithResp$wget,
	       dp1_bram_serverAdapterB_3_s1_1$wget,
	       dp1_bram_serverAdapterB_3_writeWithResp$wget,
	       dp1_bram_serverAdapterB_s1_1$wget,
	       dp1_bram_serverAdapterB_writeWithResp$wget;
  wire dp0_bml_crdBuf_decAction$whas,
       dp0_bml_crdBuf_incAction$whas,
       dp0_bml_dpControl$whas,
       dp0_bml_fabAvail_1$wget,
       dp0_bml_fabAvail_1$whas,
       dp0_bml_fabBuf_decAction$whas,
       dp0_bml_fabBuf_incAction$whas,
       dp0_bml_fabDone_1$wget,
       dp0_bml_fabDone_1$whas,
       dp0_bml_lclBufDone_1$wget,
       dp0_bml_lclBufDone_1$whas,
       dp0_bml_lclBufStart_1$wget,
       dp0_bml_lclBufStart_1$whas,
       dp0_bml_lclBuf_decAction$whas,
       dp0_bml_lclBuf_incAction$whas,
       dp0_bml_remBuf_decAction$whas,
       dp0_bml_remBuf_incAction$whas,
       dp0_bml_remDone_1$wget,
       dp0_bml_remDone_1$whas,
       dp0_bml_remStart_1$wget,
       dp0_bml_remStart_1$whas,
       dp0_bram_serverAdapterA_1_cnt_1$whas,
       dp0_bram_serverAdapterA_1_cnt_2$whas,
       dp0_bram_serverAdapterA_1_cnt_3$whas,
       dp0_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_1_outData_enqData$whas,
       dp0_bram_serverAdapterA_1_outData_outData$whas,
       dp0_bram_serverAdapterA_1_s1_1$whas,
       dp0_bram_serverAdapterA_1_writeWithResp$whas,
       dp0_bram_serverAdapterA_2_cnt_1$whas,
       dp0_bram_serverAdapterA_2_cnt_2$whas,
       dp0_bram_serverAdapterA_2_cnt_3$whas,
       dp0_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_2_outData_enqData$whas,
       dp0_bram_serverAdapterA_2_outData_outData$whas,
       dp0_bram_serverAdapterA_2_s1_1$whas,
       dp0_bram_serverAdapterA_2_writeWithResp$whas,
       dp0_bram_serverAdapterA_3_cnt_1$whas,
       dp0_bram_serverAdapterA_3_cnt_2$whas,
       dp0_bram_serverAdapterA_3_cnt_3$whas,
       dp0_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_3_outData_enqData$whas,
       dp0_bram_serverAdapterA_3_outData_outData$whas,
       dp0_bram_serverAdapterA_3_s1_1$whas,
       dp0_bram_serverAdapterA_3_writeWithResp$whas,
       dp0_bram_serverAdapterA_cnt_1$whas,
       dp0_bram_serverAdapterA_cnt_2$whas,
       dp0_bram_serverAdapterA_cnt_3$whas,
       dp0_bram_serverAdapterA_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_outData_enqData$whas,
       dp0_bram_serverAdapterA_outData_outData$whas,
       dp0_bram_serverAdapterA_s1_1$whas,
       dp0_bram_serverAdapterA_writeWithResp$whas,
       dp0_bram_serverAdapterB_1_cnt_1$whas,
       dp0_bram_serverAdapterB_1_cnt_2$whas,
       dp0_bram_serverAdapterB_1_cnt_3$whas,
       dp0_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_1_outData_enqData$whas,
       dp0_bram_serverAdapterB_1_outData_outData$whas,
       dp0_bram_serverAdapterB_1_s1_1$whas,
       dp0_bram_serverAdapterB_1_writeWithResp$whas,
       dp0_bram_serverAdapterB_2_cnt_1$whas,
       dp0_bram_serverAdapterB_2_cnt_2$whas,
       dp0_bram_serverAdapterB_2_cnt_3$whas,
       dp0_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_2_outData_enqData$whas,
       dp0_bram_serverAdapterB_2_outData_outData$whas,
       dp0_bram_serverAdapterB_2_s1_1$whas,
       dp0_bram_serverAdapterB_2_writeWithResp$whas,
       dp0_bram_serverAdapterB_3_cnt_1$whas,
       dp0_bram_serverAdapterB_3_cnt_2$whas,
       dp0_bram_serverAdapterB_3_cnt_3$whas,
       dp0_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_3_outData_enqData$whas,
       dp0_bram_serverAdapterB_3_outData_outData$whas,
       dp0_bram_serverAdapterB_3_s1_1$whas,
       dp0_bram_serverAdapterB_3_writeWithResp$whas,
       dp0_bram_serverAdapterB_cnt_1$whas,
       dp0_bram_serverAdapterB_cnt_2$whas,
       dp0_bram_serverAdapterB_cnt_3$whas,
       dp0_bram_serverAdapterB_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_outData_enqData$whas,
       dp0_bram_serverAdapterB_outData_outData$whas,
       dp0_bram_serverAdapterB_s1_1$whas,
       dp0_bram_serverAdapterB_writeWithResp$whas,
       dp0_tlp_creditReady_1$wget,
       dp0_tlp_creditReady_1$whas,
       dp0_tlp_dpControl$whas,
       dp0_tlp_farBufReady_1$wget,
       dp0_tlp_farBufReady_1$whas,
       dp0_tlp_nearBufReady_1$wget,
       dp0_tlp_nearBufReady_1$whas,
       dp0_tlp_pullTagMatch_1$wget,
       dp0_tlp_pullTagMatch_1$whas,
       dp0_tlp_remDone_1$wget,
       dp0_tlp_remDone_1$whas,
       dp0_tlp_remStart_1$wget,
       dp0_tlp_remStart_1$whas,
       dp0_wci_Es_mAddrSpace_w$wget,
       dp0_wci_Es_mAddrSpace_w$whas,
       dp0_wci_Es_mAddr_w$whas,
       dp0_wci_Es_mByteEn_w$whas,
       dp0_wci_Es_mCmd_w$whas,
       dp0_wci_Es_mData_w$whas,
       dp0_wci_ctlAckReg_1$wget,
       dp0_wci_ctlAckReg_1$whas,
       dp0_wci_reqF_r_clr$whas,
       dp0_wci_reqF_r_deq$whas,
       dp0_wci_reqF_r_enq$whas,
       dp0_wci_respF_dequeueing$whas,
       dp0_wci_respF_enqueueing$whas,
       dp0_wci_respF_x_wire$whas,
       dp0_wci_sFlagReg_1$wget,
       dp0_wci_sFlagReg_1$whas,
       dp0_wci_sThreadBusy_pw$whas,
       dp0_wci_wEdge$whas,
       dp0_wci_wciReq$whas,
       dp0_wci_wci_cfrd_pw$whas,
       dp0_wci_wci_cfwr_pw$whas,
       dp0_wci_wci_ctrl_pw$whas,
       dp0_wmi_Es_mAddrSpace_w$wget,
       dp0_wmi_Es_mAddrSpace_w$whas,
       dp0_wmi_Es_mAddr_w$whas,
       dp0_wmi_Es_mBurstLength_w$whas,
       dp0_wmi_Es_mCmd_w$whas,
       dp0_wmi_Es_mDataByteEn_w$whas,
       dp0_wmi_Es_mDataInfo_w$whas,
       dp0_wmi_Es_mDataLast_w$whas,
       dp0_wmi_Es_mDataValid_w$whas,
       dp0_wmi_Es_mData_w$whas,
       dp0_wmi_Es_mReqInfo_w$wget,
       dp0_wmi_Es_mReqInfo_w$whas,
       dp0_wmi_Es_mReqLast_w$whas,
       dp0_wmi_dpControl$whas,
       dp0_wmi_mesgBufReady_1$wget,
       dp0_wmi_mesgBufReady_1$whas,
       dp0_wmi_mesgDone_1$wget,
       dp0_wmi_mesgDone_1$whas,
       dp0_wmi_mesgStart_1$wget,
       dp0_wmi_mesgStart_1$whas,
       dp0_wmi_nowW$whas,
       dp0_wmi_wmi_dhF_doResetClr$whas,
       dp0_wmi_wmi_dhF_doResetDeq$whas,
       dp0_wmi_wmi_dhF_doResetEnq$whas,
       dp0_wmi_wmi_dhF_r_clr$whas,
       dp0_wmi_wmi_dhF_r_deq$whas,
       dp0_wmi_wmi_dhF_r_enq$whas,
       dp0_wmi_wmi_forceSThreadBusy_pw$whas,
       dp0_wmi_wmi_mFlagF_doResetClr$whas,
       dp0_wmi_wmi_mFlagF_doResetDeq$whas,
       dp0_wmi_wmi_mFlagF_doResetEnq$whas,
       dp0_wmi_wmi_mFlagF_r_clr$whas,
       dp0_wmi_wmi_mFlagF_r_deq$whas,
       dp0_wmi_wmi_mFlagF_r_enq$whas,
       dp0_wmi_wmi_operateD_1$wget,
       dp0_wmi_wmi_operateD_1$whas,
       dp0_wmi_wmi_peerIsReady_1$wget,
       dp0_wmi_wmi_peerIsReady_1$whas,
       dp0_wmi_wmi_reqF_doResetClr$whas,
       dp0_wmi_wmi_reqF_doResetDeq$whas,
       dp0_wmi_wmi_reqF_doResetEnq$whas,
       dp0_wmi_wmi_reqF_r_clr$whas,
       dp0_wmi_wmi_reqF_r_deq$whas,
       dp0_wmi_wmi_reqF_r_enq$whas,
       dp0_wmi_wmi_respF_dequeueing$whas,
       dp0_wmi_wmi_respF_enqueueing$whas,
       dp0_wmi_wmi_respF_x_wire$whas,
       dp0_wmi_wmi_sDataThreadBusy_dw$wget,
       dp0_wmi_wmi_sDataThreadBusy_dw$whas,
       dp0_wmi_wmi_sThreadBusy_dw$wget,
       dp0_wmi_wmi_sThreadBusy_dw$whas,
       dp0_wmi_wmi_wmiDh$whas,
       dp0_wmi_wmi_wmiMFlag$whas,
       dp0_wmi_wmi_wmiReq$whas,
       dp0_wti_wtiReq$whas,
       dp1_bml_crdBuf_decAction$whas,
       dp1_bml_crdBuf_incAction$whas,
       dp1_bml_dpControl$whas,
       dp1_bml_fabAvail_1$wget,
       dp1_bml_fabAvail_1$whas,
       dp1_bml_fabBuf_decAction$whas,
       dp1_bml_fabBuf_incAction$whas,
       dp1_bml_fabDone_1$wget,
       dp1_bml_fabDone_1$whas,
       dp1_bml_lclBufDone_1$wget,
       dp1_bml_lclBufDone_1$whas,
       dp1_bml_lclBufStart_1$wget,
       dp1_bml_lclBufStart_1$whas,
       dp1_bml_lclBuf_decAction$whas,
       dp1_bml_lclBuf_incAction$whas,
       dp1_bml_remBuf_decAction$whas,
       dp1_bml_remBuf_incAction$whas,
       dp1_bml_remDone_1$wget,
       dp1_bml_remDone_1$whas,
       dp1_bml_remStart_1$wget,
       dp1_bml_remStart_1$whas,
       dp1_bram_serverAdapterA_1_cnt_1$whas,
       dp1_bram_serverAdapterA_1_cnt_2$whas,
       dp1_bram_serverAdapterA_1_cnt_3$whas,
       dp1_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_1_outData_enqData$whas,
       dp1_bram_serverAdapterA_1_outData_outData$whas,
       dp1_bram_serverAdapterA_1_s1_1$whas,
       dp1_bram_serverAdapterA_1_writeWithResp$whas,
       dp1_bram_serverAdapterA_2_cnt_1$whas,
       dp1_bram_serverAdapterA_2_cnt_2$whas,
       dp1_bram_serverAdapterA_2_cnt_3$whas,
       dp1_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_2_outData_enqData$whas,
       dp1_bram_serverAdapterA_2_outData_outData$whas,
       dp1_bram_serverAdapterA_2_s1_1$whas,
       dp1_bram_serverAdapterA_2_writeWithResp$whas,
       dp1_bram_serverAdapterA_3_cnt_1$whas,
       dp1_bram_serverAdapterA_3_cnt_2$whas,
       dp1_bram_serverAdapterA_3_cnt_3$whas,
       dp1_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_3_outData_enqData$whas,
       dp1_bram_serverAdapterA_3_outData_outData$whas,
       dp1_bram_serverAdapterA_3_s1_1$whas,
       dp1_bram_serverAdapterA_3_writeWithResp$whas,
       dp1_bram_serverAdapterA_cnt_1$whas,
       dp1_bram_serverAdapterA_cnt_2$whas,
       dp1_bram_serverAdapterA_cnt_3$whas,
       dp1_bram_serverAdapterA_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_outData_enqData$whas,
       dp1_bram_serverAdapterA_outData_outData$whas,
       dp1_bram_serverAdapterA_s1_1$whas,
       dp1_bram_serverAdapterA_writeWithResp$whas,
       dp1_bram_serverAdapterB_1_cnt_1$whas,
       dp1_bram_serverAdapterB_1_cnt_2$whas,
       dp1_bram_serverAdapterB_1_cnt_3$whas,
       dp1_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_1_outData_enqData$whas,
       dp1_bram_serverAdapterB_1_outData_outData$whas,
       dp1_bram_serverAdapterB_1_s1_1$whas,
       dp1_bram_serverAdapterB_1_writeWithResp$whas,
       dp1_bram_serverAdapterB_2_cnt_1$whas,
       dp1_bram_serverAdapterB_2_cnt_2$whas,
       dp1_bram_serverAdapterB_2_cnt_3$whas,
       dp1_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_2_outData_enqData$whas,
       dp1_bram_serverAdapterB_2_outData_outData$whas,
       dp1_bram_serverAdapterB_2_s1_1$whas,
       dp1_bram_serverAdapterB_2_writeWithResp$whas,
       dp1_bram_serverAdapterB_3_cnt_1$whas,
       dp1_bram_serverAdapterB_3_cnt_2$whas,
       dp1_bram_serverAdapterB_3_cnt_3$whas,
       dp1_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_3_outData_enqData$whas,
       dp1_bram_serverAdapterB_3_outData_outData$whas,
       dp1_bram_serverAdapterB_3_s1_1$whas,
       dp1_bram_serverAdapterB_3_writeWithResp$whas,
       dp1_bram_serverAdapterB_cnt_1$whas,
       dp1_bram_serverAdapterB_cnt_2$whas,
       dp1_bram_serverAdapterB_cnt_3$whas,
       dp1_bram_serverAdapterB_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_outData_enqData$whas,
       dp1_bram_serverAdapterB_outData_outData$whas,
       dp1_bram_serverAdapterB_s1_1$whas,
       dp1_bram_serverAdapterB_writeWithResp$whas,
       dp1_tlp_creditReady_1$wget,
       dp1_tlp_creditReady_1$whas,
       dp1_tlp_dpControl$whas,
       dp1_tlp_farBufReady_1$wget,
       dp1_tlp_farBufReady_1$whas,
       dp1_tlp_nearBufReady_1$wget,
       dp1_tlp_nearBufReady_1$whas,
       dp1_tlp_pullTagMatch_1$wget,
       dp1_tlp_pullTagMatch_1$whas,
       dp1_tlp_remDone_1$wget,
       dp1_tlp_remDone_1$whas,
       dp1_tlp_remStart_1$wget,
       dp1_tlp_remStart_1$whas,
       dp1_wci_Es_mAddrSpace_w$wget,
       dp1_wci_Es_mAddrSpace_w$whas,
       dp1_wci_Es_mAddr_w$whas,
       dp1_wci_Es_mByteEn_w$whas,
       dp1_wci_Es_mCmd_w$whas,
       dp1_wci_Es_mData_w$whas,
       dp1_wci_ctlAckReg_1$wget,
       dp1_wci_ctlAckReg_1$whas,
       dp1_wci_reqF_r_clr$whas,
       dp1_wci_reqF_r_deq$whas,
       dp1_wci_reqF_r_enq$whas,
       dp1_wci_respF_dequeueing$whas,
       dp1_wci_respF_enqueueing$whas,
       dp1_wci_respF_x_wire$whas,
       dp1_wci_sFlagReg_1$wget,
       dp1_wci_sFlagReg_1$whas,
       dp1_wci_sThreadBusy_pw$whas,
       dp1_wci_wEdge$whas,
       dp1_wci_wciReq$whas,
       dp1_wci_wci_cfrd_pw$whas,
       dp1_wci_wci_cfwr_pw$whas,
       dp1_wci_wci_ctrl_pw$whas,
       dp1_wmi_Es_mAddrSpace_w$wget,
       dp1_wmi_Es_mAddrSpace_w$whas,
       dp1_wmi_Es_mAddr_w$whas,
       dp1_wmi_Es_mBurstLength_w$whas,
       dp1_wmi_Es_mCmd_w$whas,
       dp1_wmi_Es_mDataByteEn_w$whas,
       dp1_wmi_Es_mDataInfo_w$whas,
       dp1_wmi_Es_mDataLast_w$whas,
       dp1_wmi_Es_mDataValid_w$whas,
       dp1_wmi_Es_mData_w$whas,
       dp1_wmi_Es_mReqInfo_w$wget,
       dp1_wmi_Es_mReqInfo_w$whas,
       dp1_wmi_Es_mReqLast_w$whas,
       dp1_wmi_dpControl$whas,
       dp1_wmi_mesgBufReady_1$wget,
       dp1_wmi_mesgBufReady_1$whas,
       dp1_wmi_mesgDone_1$wget,
       dp1_wmi_mesgDone_1$whas,
       dp1_wmi_mesgStart_1$wget,
       dp1_wmi_mesgStart_1$whas,
       dp1_wmi_nowW$whas,
       dp1_wmi_wmi_dhF_doResetClr$whas,
       dp1_wmi_wmi_dhF_doResetDeq$whas,
       dp1_wmi_wmi_dhF_doResetEnq$whas,
       dp1_wmi_wmi_dhF_r_clr$whas,
       dp1_wmi_wmi_dhF_r_deq$whas,
       dp1_wmi_wmi_dhF_r_enq$whas,
       dp1_wmi_wmi_forceSThreadBusy_pw$whas,
       dp1_wmi_wmi_mFlagF_doResetClr$whas,
       dp1_wmi_wmi_mFlagF_doResetDeq$whas,
       dp1_wmi_wmi_mFlagF_doResetEnq$whas,
       dp1_wmi_wmi_mFlagF_r_clr$whas,
       dp1_wmi_wmi_mFlagF_r_deq$whas,
       dp1_wmi_wmi_mFlagF_r_enq$whas,
       dp1_wmi_wmi_operateD_1$wget,
       dp1_wmi_wmi_operateD_1$whas,
       dp1_wmi_wmi_peerIsReady_1$wget,
       dp1_wmi_wmi_peerIsReady_1$whas,
       dp1_wmi_wmi_reqF_doResetClr$whas,
       dp1_wmi_wmi_reqF_doResetDeq$whas,
       dp1_wmi_wmi_reqF_doResetEnq$whas,
       dp1_wmi_wmi_reqF_r_clr$whas,
       dp1_wmi_wmi_reqF_r_deq$whas,
       dp1_wmi_wmi_reqF_r_enq$whas,
       dp1_wmi_wmi_respF_dequeueing$whas,
       dp1_wmi_wmi_respF_enqueueing$whas,
       dp1_wmi_wmi_respF_x_wire$whas,
       dp1_wmi_wmi_sDataThreadBusy_dw$wget,
       dp1_wmi_wmi_sDataThreadBusy_dw$whas,
       dp1_wmi_wmi_sThreadBusy_dw$wget,
       dp1_wmi_wmi_sThreadBusy_dw$whas,
       dp1_wmi_wmi_wmiDh$whas,
       dp1_wmi_wmi_wmiMFlag$whas,
       dp1_wmi_wmi_wmiReq$whas,
       dp1_wti_wtiReq$whas,
       pciw_i2pAF_dClear_pw$whas,
       pciw_i2pAF_deq_happened$whas,
       pciw_i2pAF_deq_pw$whas,
       pciw_i2pAF_enq_pw$whas,
       pciw_i2pAF_sClear_pw$whas,
       pciw_p2iAF_dClear_pw$whas,
       pciw_p2iAF_deq_happened$whas,
       pciw_p2iAF_deq_pw$whas,
       pciw_p2iAF_enq_pw$whas,
       pciw_p2iAF_sClear_pw$whas,
       pciw_pci0_pwTrnRx$whas,
       pciw_pci0_pwTrnTx$whas,
       pciw_pcie_irq_wInterruptDo$whas,
       pciw_pcie_irq_wInterruptRdyN$wget,
       pciw_pcie_irq_wInterruptRdyN$whas;

  // register dp0_bml_crdBuf_modulus
  reg [15 : 0] dp0_bml_crdBuf_modulus;
  wire [15 : 0] dp0_bml_crdBuf_modulus$D_IN;
  wire dp0_bml_crdBuf_modulus$EN;

  // register dp0_bml_crdBuf_value
  reg [15 : 0] dp0_bml_crdBuf_value;
  wire [15 : 0] dp0_bml_crdBuf_value$D_IN;
  wire dp0_bml_crdBuf_value$EN;

  // register dp0_bml_fabAvail
  reg dp0_bml_fabAvail;
  wire dp0_bml_fabAvail$D_IN, dp0_bml_fabAvail$EN;

  // register dp0_bml_fabBuf_modulus
  reg [15 : 0] dp0_bml_fabBuf_modulus;
  wire [15 : 0] dp0_bml_fabBuf_modulus$D_IN;
  wire dp0_bml_fabBuf_modulus$EN;

  // register dp0_bml_fabBuf_value
  reg [15 : 0] dp0_bml_fabBuf_value;
  wire [15 : 0] dp0_bml_fabBuf_value$D_IN;
  wire dp0_bml_fabBuf_value$EN;

  // register dp0_bml_fabBufsAvail
  reg [15 : 0] dp0_bml_fabBufsAvail;
  wire [15 : 0] dp0_bml_fabBufsAvail$D_IN;
  wire dp0_bml_fabBufsAvail$EN;

  // register dp0_bml_fabDone
  reg dp0_bml_fabDone;
  wire dp0_bml_fabDone$D_IN, dp0_bml_fabDone$EN;

  // register dp0_bml_fabFlowAddr
  reg [31 : 0] dp0_bml_fabFlowAddr;
  reg [31 : 0] dp0_bml_fabFlowAddr$D_IN;
  wire dp0_bml_fabFlowAddr$EN;

  // register dp0_bml_fabFlowBase
  reg [31 : 0] dp0_bml_fabFlowBase;
  wire [31 : 0] dp0_bml_fabFlowBase$D_IN;
  wire dp0_bml_fabFlowBase$EN;

  // register dp0_bml_fabFlowSize
  reg [31 : 0] dp0_bml_fabFlowSize;
  wire [31 : 0] dp0_bml_fabFlowSize$D_IN;
  wire dp0_bml_fabFlowSize$EN;

  // register dp0_bml_fabMesgAddr
  reg [31 : 0] dp0_bml_fabMesgAddr;
  wire [31 : 0] dp0_bml_fabMesgAddr$D_IN;
  wire dp0_bml_fabMesgAddr$EN;

  // register dp0_bml_fabMesgBase
  reg [31 : 0] dp0_bml_fabMesgBase;
  wire [31 : 0] dp0_bml_fabMesgBase$D_IN;
  wire dp0_bml_fabMesgBase$EN;

  // register dp0_bml_fabMesgSize
  reg [31 : 0] dp0_bml_fabMesgSize;
  wire [31 : 0] dp0_bml_fabMesgSize$D_IN;
  wire dp0_bml_fabMesgSize$EN;

  // register dp0_bml_fabMetaAddr
  reg [31 : 0] dp0_bml_fabMetaAddr;
  wire [31 : 0] dp0_bml_fabMetaAddr$D_IN;
  wire dp0_bml_fabMetaAddr$EN;

  // register dp0_bml_fabMetaBase
  reg [31 : 0] dp0_bml_fabMetaBase;
  wire [31 : 0] dp0_bml_fabMetaBase$D_IN;
  wire dp0_bml_fabMetaBase$EN;

  // register dp0_bml_fabMetaSize
  reg [31 : 0] dp0_bml_fabMetaSize;
  wire [31 : 0] dp0_bml_fabMetaSize$D_IN;
  wire dp0_bml_fabMetaSize$EN;

  // register dp0_bml_fabNumBufs
  reg [15 : 0] dp0_bml_fabNumBufs;
  wire [15 : 0] dp0_bml_fabNumBufs$D_IN;
  wire dp0_bml_fabNumBufs$EN;

  // register dp0_bml_lclBufDone
  reg dp0_bml_lclBufDone;
  wire dp0_bml_lclBufDone$D_IN, dp0_bml_lclBufDone$EN;

  // register dp0_bml_lclBufStart
  reg dp0_bml_lclBufStart;
  wire dp0_bml_lclBufStart$D_IN, dp0_bml_lclBufStart$EN;

  // register dp0_bml_lclBuf_modulus
  reg [15 : 0] dp0_bml_lclBuf_modulus;
  wire [15 : 0] dp0_bml_lclBuf_modulus$D_IN;
  wire dp0_bml_lclBuf_modulus$EN;

  // register dp0_bml_lclBuf_value
  reg [15 : 0] dp0_bml_lclBuf_value;
  wire [15 : 0] dp0_bml_lclBuf_value$D_IN;
  wire dp0_bml_lclBuf_value$EN;

  // register dp0_bml_lclBufsAR
  reg [15 : 0] dp0_bml_lclBufsAR;
  wire [15 : 0] dp0_bml_lclBufsAR$D_IN;
  wire dp0_bml_lclBufsAR$EN;

  // register dp0_bml_lclBufsCF
  reg [15 : 0] dp0_bml_lclBufsCF;
  wire [15 : 0] dp0_bml_lclBufsCF$D_IN;
  wire dp0_bml_lclBufsCF$EN;

  // register dp0_bml_lclCredit
  reg [15 : 0] dp0_bml_lclCredit;
  wire [15 : 0] dp0_bml_lclCredit$D_IN;
  wire dp0_bml_lclCredit$EN;

  // register dp0_bml_lclDones
  reg [15 : 0] dp0_bml_lclDones;
  wire [15 : 0] dp0_bml_lclDones$D_IN;
  wire dp0_bml_lclDones$EN;

  // register dp0_bml_lclMesgAddr
  reg [15 : 0] dp0_bml_lclMesgAddr;
  wire [15 : 0] dp0_bml_lclMesgAddr$D_IN;
  wire dp0_bml_lclMesgAddr$EN;

  // register dp0_bml_lclMetaAddr
  reg [15 : 0] dp0_bml_lclMetaAddr;
  wire [15 : 0] dp0_bml_lclMetaAddr$D_IN;
  wire dp0_bml_lclMetaAddr$EN;

  // register dp0_bml_lclNumBufs
  reg [15 : 0] dp0_bml_lclNumBufs;
  wire [15 : 0] dp0_bml_lclNumBufs$D_IN;
  wire dp0_bml_lclNumBufs$EN;

  // register dp0_bml_lclStarts
  reg [15 : 0] dp0_bml_lclStarts;
  wire [15 : 0] dp0_bml_lclStarts$D_IN;
  wire dp0_bml_lclStarts$EN;

  // register dp0_bml_mesgBase
  reg [15 : 0] dp0_bml_mesgBase;
  wire [15 : 0] dp0_bml_mesgBase$D_IN;
  wire dp0_bml_mesgBase$EN;

  // register dp0_bml_mesgSize
  reg [15 : 0] dp0_bml_mesgSize;
  wire [15 : 0] dp0_bml_mesgSize$D_IN;
  wire dp0_bml_mesgSize$EN;

  // register dp0_bml_metaBase
  reg [15 : 0] dp0_bml_metaBase;
  wire [15 : 0] dp0_bml_metaBase$D_IN;
  wire dp0_bml_metaBase$EN;

  // register dp0_bml_metaSize
  reg [15 : 0] dp0_bml_metaSize;
  wire [15 : 0] dp0_bml_metaSize$D_IN;
  wire dp0_bml_metaSize$EN;

  // register dp0_bml_remBuf_modulus
  reg [15 : 0] dp0_bml_remBuf_modulus;
  wire [15 : 0] dp0_bml_remBuf_modulus$D_IN;
  wire dp0_bml_remBuf_modulus$EN;

  // register dp0_bml_remBuf_value
  reg [15 : 0] dp0_bml_remBuf_value;
  wire [15 : 0] dp0_bml_remBuf_value$D_IN;
  wire dp0_bml_remBuf_value$EN;

  // register dp0_bml_remDone
  reg dp0_bml_remDone;
  wire dp0_bml_remDone$D_IN, dp0_bml_remDone$EN;

  // register dp0_bml_remDones
  reg [15 : 0] dp0_bml_remDones;
  wire [15 : 0] dp0_bml_remDones$D_IN;
  wire dp0_bml_remDones$EN;

  // register dp0_bml_remMesgAddr
  reg [15 : 0] dp0_bml_remMesgAddr;
  wire [15 : 0] dp0_bml_remMesgAddr$D_IN;
  wire dp0_bml_remMesgAddr$EN;

  // register dp0_bml_remMetaAddr
  reg [15 : 0] dp0_bml_remMetaAddr;
  wire [15 : 0] dp0_bml_remMetaAddr$D_IN;
  wire dp0_bml_remMetaAddr$EN;

  // register dp0_bml_remStart
  reg dp0_bml_remStart;
  wire dp0_bml_remStart$D_IN, dp0_bml_remStart$EN;

  // register dp0_bml_remStarts
  reg [15 : 0] dp0_bml_remStarts;
  wire [15 : 0] dp0_bml_remStarts$D_IN;
  wire dp0_bml_remStarts$EN;

  // register dp0_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt$D_IN;
  wire dp0_bram_serverAdapterA_1_cnt$EN;

  // register dp0_bram_serverAdapterA_1_s1
  reg [1 : 0] dp0_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_1_s1$D_IN;
  wire dp0_bram_serverAdapterA_1_s1$EN;

  // register dp0_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_2_cnt$D_IN;
  wire dp0_bram_serverAdapterA_2_cnt$EN;

  // register dp0_bram_serverAdapterA_2_s1
  reg [1 : 0] dp0_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_2_s1$D_IN;
  wire dp0_bram_serverAdapterA_2_s1$EN;

  // register dp0_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_3_cnt$D_IN;
  wire dp0_bram_serverAdapterA_3_cnt$EN;

  // register dp0_bram_serverAdapterA_3_s1
  reg [1 : 0] dp0_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_3_s1$D_IN;
  wire dp0_bram_serverAdapterA_3_s1$EN;

  // register dp0_bram_serverAdapterA_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_cnt$D_IN;
  wire dp0_bram_serverAdapterA_cnt$EN;

  // register dp0_bram_serverAdapterA_s1
  reg [1 : 0] dp0_bram_serverAdapterA_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_s1$D_IN;
  wire dp0_bram_serverAdapterA_s1$EN;

  // register dp0_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_1_cnt$D_IN;
  wire dp0_bram_serverAdapterB_1_cnt$EN;

  // register dp0_bram_serverAdapterB_1_s1
  reg [1 : 0] dp0_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_1_s1$D_IN;
  wire dp0_bram_serverAdapterB_1_s1$EN;

  // register dp0_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_2_cnt$D_IN;
  wire dp0_bram_serverAdapterB_2_cnt$EN;

  // register dp0_bram_serverAdapterB_2_s1
  reg [1 : 0] dp0_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_2_s1$D_IN;
  wire dp0_bram_serverAdapterB_2_s1$EN;

  // register dp0_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_3_cnt$D_IN;
  wire dp0_bram_serverAdapterB_3_cnt$EN;

  // register dp0_bram_serverAdapterB_3_s1
  reg [1 : 0] dp0_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_3_s1$D_IN;
  wire dp0_bram_serverAdapterB_3_s1$EN;

  // register dp0_bram_serverAdapterB_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_cnt$D_IN;
  wire dp0_bram_serverAdapterB_cnt$EN;

  // register dp0_bram_serverAdapterB_s1
  reg [1 : 0] dp0_bram_serverAdapterB_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_s1$D_IN;
  wire dp0_bram_serverAdapterB_s1$EN;

  // register dp0_dpControl
  reg [3 : 0] dp0_dpControl;
  wire [3 : 0] dp0_dpControl$D_IN;
  wire dp0_dpControl$EN;

  // register dp0_tlp_creditReady
  reg dp0_tlp_creditReady;
  wire dp0_tlp_creditReady$D_IN, dp0_tlp_creditReady$EN;

  // register dp0_tlp_debugBdata
  reg [127 : 0] dp0_tlp_debugBdata;
  wire [127 : 0] dp0_tlp_debugBdata$D_IN;
  wire dp0_tlp_debugBdata$EN;

  // register dp0_tlp_dmaDoTailEvent
  reg dp0_tlp_dmaDoTailEvent;
  reg dp0_tlp_dmaDoTailEvent$D_IN;
  wire dp0_tlp_dmaDoTailEvent$EN;

  // register dp0_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen;
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen$D_IN;
  wire dp0_tlp_dmaPullRemainDWLen$EN;

  // register dp0_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp0_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp0_tlp_dmaPullRemainDWSub$D_IN;
  wire dp0_tlp_dmaPullRemainDWSub$EN;

  // register dp0_tlp_dmaReqTag
  reg [4 : 0] dp0_tlp_dmaReqTag;
  wire [4 : 0] dp0_tlp_dmaReqTag$D_IN;
  wire dp0_tlp_dmaReqTag$EN;

  // register dp0_tlp_dmaTag
  reg [4 : 0] dp0_tlp_dmaTag;
  wire [4 : 0] dp0_tlp_dmaTag$D_IN;
  wire dp0_tlp_dmaTag$EN;

  // register dp0_tlp_doXmtMetaBody
  reg dp0_tlp_doXmtMetaBody;
  wire dp0_tlp_doXmtMetaBody$D_IN, dp0_tlp_doXmtMetaBody$EN;

  // register dp0_tlp_fabFlowAddr
  reg [31 : 0] dp0_tlp_fabFlowAddr;
  wire [31 : 0] dp0_tlp_fabFlowAddr$D_IN;
  wire dp0_tlp_fabFlowAddr$EN;

  // register dp0_tlp_fabMesgAccu
  reg [31 : 0] dp0_tlp_fabMesgAccu;
  wire [31 : 0] dp0_tlp_fabMesgAccu$D_IN;
  wire dp0_tlp_fabMesgAccu$EN;

  // register dp0_tlp_fabMesgAddr
  reg [31 : 0] dp0_tlp_fabMesgAddr;
  wire [31 : 0] dp0_tlp_fabMesgAddr$D_IN;
  wire dp0_tlp_fabMesgAddr$EN;

  // register dp0_tlp_fabMeta
  reg [128 : 0] dp0_tlp_fabMeta;
  wire [128 : 0] dp0_tlp_fabMeta$D_IN;
  wire dp0_tlp_fabMeta$EN;

  // register dp0_tlp_fabMetaAddr
  reg [31 : 0] dp0_tlp_fabMetaAddr;
  wire [31 : 0] dp0_tlp_fabMetaAddr$D_IN;
  wire dp0_tlp_fabMetaAddr$EN;

  // register dp0_tlp_farBufReady
  reg dp0_tlp_farBufReady;
  wire dp0_tlp_farBufReady$D_IN, dp0_tlp_farBufReady$EN;

  // register dp0_tlp_flowDiagCount
  reg [31 : 0] dp0_tlp_flowDiagCount;
  wire [31 : 0] dp0_tlp_flowDiagCount$D_IN;
  wire dp0_tlp_flowDiagCount$EN;

  // register dp0_tlp_gotResponseHeader
  reg dp0_tlp_gotResponseHeader;
  reg dp0_tlp_gotResponseHeader$D_IN;
  wire dp0_tlp_gotResponseHeader$EN;

  // register dp0_tlp_inIgnorePkt
  reg dp0_tlp_inIgnorePkt;
  wire dp0_tlp_inIgnorePkt$D_IN, dp0_tlp_inIgnorePkt$EN;

  // register dp0_tlp_maxPayloadSize
  reg [12 : 0] dp0_tlp_maxPayloadSize;
  wire [12 : 0] dp0_tlp_maxPayloadSize$D_IN;
  wire dp0_tlp_maxPayloadSize$EN;

  // register dp0_tlp_maxReadReqSize
  reg [12 : 0] dp0_tlp_maxReadReqSize;
  wire [12 : 0] dp0_tlp_maxReadReqSize$D_IN;
  wire dp0_tlp_maxReadReqSize$EN;

  // register dp0_tlp_mesgComplReceived
  reg [16 : 0] dp0_tlp_mesgComplReceived;
  reg [16 : 0] dp0_tlp_mesgComplReceived$D_IN;
  wire dp0_tlp_mesgComplReceived$EN;

  // register dp0_tlp_mesgLengthRemainPull
  reg [16 : 0] dp0_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPull$D_IN;
  wire dp0_tlp_mesgLengthRemainPull$EN;

  // register dp0_tlp_mesgLengthRemainPush
  reg [16 : 0] dp0_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPush$D_IN;
  wire dp0_tlp_mesgLengthRemainPush$EN;

  // register dp0_tlp_nearBufReady
  reg dp0_tlp_nearBufReady;
  wire dp0_tlp_nearBufReady$D_IN, dp0_tlp_nearBufReady$EN;

  // register dp0_tlp_outDwRemain
  reg [9 : 0] dp0_tlp_outDwRemain;
  wire [9 : 0] dp0_tlp_outDwRemain$D_IN;
  wire dp0_tlp_outDwRemain$EN;

  // register dp0_tlp_postSeqDwell
  reg [3 : 0] dp0_tlp_postSeqDwell;
  wire [3 : 0] dp0_tlp_postSeqDwell$D_IN;
  wire dp0_tlp_postSeqDwell$EN;

  // register dp0_tlp_pullTagMatch
  reg dp0_tlp_pullTagMatch;
  wire dp0_tlp_pullTagMatch$D_IN, dp0_tlp_pullTagMatch$EN;

  // register dp0_tlp_rdRespDwRemain
  reg [9 : 0] dp0_tlp_rdRespDwRemain;
  wire [9 : 0] dp0_tlp_rdRespDwRemain$D_IN;
  wire dp0_tlp_rdRespDwRemain$EN;

  // register dp0_tlp_readHeaderSent
  reg dp0_tlp_readHeaderSent;
  wire dp0_tlp_readHeaderSent$D_IN, dp0_tlp_readHeaderSent$EN;

  // register dp0_tlp_readNxtDWAddr
  reg [12 : 0] dp0_tlp_readNxtDWAddr;
  wire [12 : 0] dp0_tlp_readNxtDWAddr$D_IN;
  wire dp0_tlp_readNxtDWAddr$EN;

  // register dp0_tlp_readRemainDWLen
  reg [9 : 0] dp0_tlp_readRemainDWLen;
  wire [9 : 0] dp0_tlp_readRemainDWLen$D_IN;
  wire dp0_tlp_readRemainDWLen$EN;

  // register dp0_tlp_readStarted
  reg dp0_tlp_readStarted;
  wire dp0_tlp_readStarted$D_IN, dp0_tlp_readStarted$EN;

  // register dp0_tlp_remDone
  reg dp0_tlp_remDone;
  wire dp0_tlp_remDone$D_IN, dp0_tlp_remDone$EN;

  // register dp0_tlp_remMesgAccu
  reg [15 : 0] dp0_tlp_remMesgAccu;
  wire [15 : 0] dp0_tlp_remMesgAccu$D_IN;
  wire dp0_tlp_remMesgAccu$EN;

  // register dp0_tlp_remMesgAddr
  reg [15 : 0] dp0_tlp_remMesgAddr;
  wire [15 : 0] dp0_tlp_remMesgAddr$D_IN;
  wire dp0_tlp_remMesgAddr$EN;

  // register dp0_tlp_remMetaAddr
  reg [15 : 0] dp0_tlp_remMetaAddr;
  wire [15 : 0] dp0_tlp_remMetaAddr$D_IN;
  wire dp0_tlp_remMetaAddr$EN;

  // register dp0_tlp_remStart
  reg dp0_tlp_remStart;
  wire dp0_tlp_remStart$D_IN, dp0_tlp_remStart$EN;

  // register dp0_tlp_reqMesgInFlight
  reg dp0_tlp_reqMesgInFlight;
  reg dp0_tlp_reqMesgInFlight$D_IN;
  wire dp0_tlp_reqMesgInFlight$EN;

  // register dp0_tlp_reqMetaBodyInFlight
  reg dp0_tlp_reqMetaBodyInFlight;
  wire dp0_tlp_reqMetaBodyInFlight$D_IN, dp0_tlp_reqMetaBodyInFlight$EN;

  // register dp0_tlp_reqMetaInFlight
  reg dp0_tlp_reqMetaInFlight;
  wire dp0_tlp_reqMetaInFlight$D_IN, dp0_tlp_reqMetaInFlight$EN;

  // register dp0_tlp_srcMesgAccu
  reg [31 : 0] dp0_tlp_srcMesgAccu;
  wire [31 : 0] dp0_tlp_srcMesgAccu$D_IN;
  wire dp0_tlp_srcMesgAccu$EN;

  // register dp0_tlp_tlpMetaSent
  reg dp0_tlp_tlpMetaSent;
  wire dp0_tlp_tlpMetaSent$D_IN, dp0_tlp_tlpMetaSent$EN;

  // register dp0_tlp_tlpRcvBusy
  reg dp0_tlp_tlpRcvBusy;
  reg dp0_tlp_tlpRcvBusy$D_IN;
  wire dp0_tlp_tlpRcvBusy$EN;

  // register dp0_tlp_tlpXmtBusy
  reg dp0_tlp_tlpXmtBusy;
  wire dp0_tlp_tlpXmtBusy$D_IN, dp0_tlp_tlpXmtBusy$EN;

  // register dp0_tlp_writeDWAddr
  reg [12 : 0] dp0_tlp_writeDWAddr;
  wire [12 : 0] dp0_tlp_writeDWAddr$D_IN;
  wire dp0_tlp_writeDWAddr$EN;

  // register dp0_tlp_writeLastBE
  reg [3 : 0] dp0_tlp_writeLastBE;
  wire [3 : 0] dp0_tlp_writeLastBE$D_IN;
  wire dp0_tlp_writeLastBE$EN;

  // register dp0_tlp_writeRemainDWLen
  reg [9 : 0] dp0_tlp_writeRemainDWLen;
  wire [9 : 0] dp0_tlp_writeRemainDWLen$D_IN;
  wire dp0_tlp_writeRemainDWLen$EN;

  // register dp0_tlp_xmtMetaInFlight
  reg dp0_tlp_xmtMetaInFlight;
  wire dp0_tlp_xmtMetaInFlight$D_IN, dp0_tlp_xmtMetaInFlight$EN;

  // register dp0_tlp_xmtMetaOK
  reg dp0_tlp_xmtMetaOK;
  wire dp0_tlp_xmtMetaOK$D_IN, dp0_tlp_xmtMetaOK$EN;

  // register dp0_wci_cEdge
  reg [2 : 0] dp0_wci_cEdge;
  wire [2 : 0] dp0_wci_cEdge$D_IN;
  wire dp0_wci_cEdge$EN;

  // register dp0_wci_cState
  reg [2 : 0] dp0_wci_cState;
  wire [2 : 0] dp0_wci_cState$D_IN;
  wire dp0_wci_cState$EN;

  // register dp0_wci_ctlAckReg
  reg dp0_wci_ctlAckReg;
  wire dp0_wci_ctlAckReg$D_IN, dp0_wci_ctlAckReg$EN;

  // register dp0_wci_ctlOpActive
  reg dp0_wci_ctlOpActive;
  wire dp0_wci_ctlOpActive$D_IN, dp0_wci_ctlOpActive$EN;

  // register dp0_wci_illegalEdge
  reg dp0_wci_illegalEdge;
  wire dp0_wci_illegalEdge$D_IN, dp0_wci_illegalEdge$EN;

  // register dp0_wci_nState
  reg [2 : 0] dp0_wci_nState;
  reg [2 : 0] dp0_wci_nState$D_IN;
  wire dp0_wci_nState$EN;

  // register dp0_wci_reqF_countReg
  reg [1 : 0] dp0_wci_reqF_countReg;
  wire [1 : 0] dp0_wci_reqF_countReg$D_IN;
  wire dp0_wci_reqF_countReg$EN;

  // register dp0_wci_respF_c_r
  reg [1 : 0] dp0_wci_respF_c_r;
  wire [1 : 0] dp0_wci_respF_c_r$D_IN;
  wire dp0_wci_respF_c_r$EN;

  // register dp0_wci_respF_q_0
  reg [33 : 0] dp0_wci_respF_q_0;
  reg [33 : 0] dp0_wci_respF_q_0$D_IN;
  wire dp0_wci_respF_q_0$EN;

  // register dp0_wci_respF_q_1
  reg [33 : 0] dp0_wci_respF_q_1;
  reg [33 : 0] dp0_wci_respF_q_1$D_IN;
  wire dp0_wci_respF_q_1$EN;

  // register dp0_wci_sFlagReg
  reg dp0_wci_sFlagReg;
  wire dp0_wci_sFlagReg$D_IN, dp0_wci_sFlagReg$EN;

  // register dp0_wci_sThreadBusy_d
  reg dp0_wci_sThreadBusy_d;
  wire dp0_wci_sThreadBusy_d$D_IN, dp0_wci_sThreadBusy_d$EN;

  // register dp0_wmi_addr
  reg [13 : 0] dp0_wmi_addr;
  wire [13 : 0] dp0_wmi_addr$D_IN;
  wire dp0_wmi_addr$EN;

  // register dp0_wmi_bufDwell
  reg [1 : 0] dp0_wmi_bufDwell;
  wire [1 : 0] dp0_wmi_bufDwell$D_IN;
  wire dp0_wmi_bufDwell$EN;

  // register dp0_wmi_bytesRemainReq
  reg [13 : 0] dp0_wmi_bytesRemainReq;
  wire [13 : 0] dp0_wmi_bytesRemainReq$D_IN;
  wire dp0_wmi_bytesRemainReq$EN;

  // register dp0_wmi_bytesRemainResp
  reg [13 : 0] dp0_wmi_bytesRemainResp;
  wire [13 : 0] dp0_wmi_bytesRemainResp$D_IN;
  wire dp0_wmi_bytesRemainResp$EN;

  // register dp0_wmi_doneWithMesg
  reg dp0_wmi_doneWithMesg;
  wire dp0_wmi_doneWithMesg$D_IN, dp0_wmi_doneWithMesg$EN;

  // register dp0_wmi_lastMesg
  reg [31 : 0] dp0_wmi_lastMesg;
  wire [31 : 0] dp0_wmi_lastMesg$D_IN;
  wire dp0_wmi_lastMesg$EN;

  // register dp0_wmi_lclMesgAddr
  reg [14 : 0] dp0_wmi_lclMesgAddr;
  wire [14 : 0] dp0_wmi_lclMesgAddr$D_IN;
  wire dp0_wmi_lclMesgAddr$EN;

  // register dp0_wmi_lclMetaAddr
  reg [14 : 0] dp0_wmi_lclMetaAddr;
  wire [14 : 0] dp0_wmi_lclMetaAddr$D_IN;
  wire dp0_wmi_lclMetaAddr$EN;

  // register dp0_wmi_mesgBufReady
  reg dp0_wmi_mesgBufReady;
  wire dp0_wmi_mesgBufReady$D_IN, dp0_wmi_mesgBufReady$EN;

  // register dp0_wmi_mesgBusy
  reg dp0_wmi_mesgBusy;
  wire dp0_wmi_mesgBusy$D_IN, dp0_wmi_mesgBusy$EN;

  // register dp0_wmi_mesgCount
  reg [31 : 0] dp0_wmi_mesgCount;
  wire [31 : 0] dp0_wmi_mesgCount$D_IN;
  wire dp0_wmi_mesgCount$EN;

  // register dp0_wmi_mesgDone
  reg dp0_wmi_mesgDone;
  wire dp0_wmi_mesgDone$D_IN, dp0_wmi_mesgDone$EN;

  // register dp0_wmi_mesgMeta
  reg [128 : 0] dp0_wmi_mesgMeta;
  wire [128 : 0] dp0_wmi_mesgMeta$D_IN;
  wire dp0_wmi_mesgMeta$EN;

  // register dp0_wmi_mesgStart
  reg dp0_wmi_mesgStart;
  wire dp0_wmi_mesgStart$D_IN, dp0_wmi_mesgStart$EN;

  // register dp0_wmi_metaBusy
  reg dp0_wmi_metaBusy;
  wire dp0_wmi_metaBusy$D_IN, dp0_wmi_metaBusy$EN;

  // register dp0_wmi_p4B
  reg [1 : 0] dp0_wmi_p4B;
  wire [1 : 0] dp0_wmi_p4B$D_IN;
  wire dp0_wmi_p4B$EN;

  // register dp0_wmi_rdActive
  reg dp0_wmi_rdActive;
  wire dp0_wmi_rdActive$D_IN, dp0_wmi_rdActive$EN;

  // register dp0_wmi_reqCount
  reg [15 : 0] dp0_wmi_reqCount;
  wire [15 : 0] dp0_wmi_reqCount$D_IN;
  wire dp0_wmi_reqCount$EN;

  // register dp0_wmi_thisMesg
  reg [31 : 0] dp0_wmi_thisMesg;
  wire [31 : 0] dp0_wmi_thisMesg$D_IN;
  wire dp0_wmi_thisMesg$EN;

  // register dp0_wmi_wmi_blockReq
  reg dp0_wmi_wmi_blockReq;
  wire dp0_wmi_wmi_blockReq$D_IN, dp0_wmi_wmi_blockReq$EN;

  // register dp0_wmi_wmi_dhF_countReg
  reg [1 : 0] dp0_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp0_wmi_wmi_dhF_countReg$D_IN;
  wire dp0_wmi_wmi_dhF_countReg$EN;

  // register dp0_wmi_wmi_dhF_levelsValid
  reg dp0_wmi_wmi_dhF_levelsValid;
  wire dp0_wmi_wmi_dhF_levelsValid$D_IN, dp0_wmi_wmi_dhF_levelsValid$EN;

  // register dp0_wmi_wmi_errorSticky
  reg dp0_wmi_wmi_errorSticky;
  wire dp0_wmi_wmi_errorSticky$D_IN, dp0_wmi_wmi_errorSticky$EN;

  // register dp0_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp0_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp0_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp0_wmi_wmi_mFlagF_countReg$EN;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  reg dp0_wmi_wmi_mFlagF_levelsValid;
  wire dp0_wmi_wmi_mFlagF_levelsValid$D_IN, dp0_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp0_wmi_wmi_mFlagReg
  reg [31 : 0] dp0_wmi_wmi_mFlagReg;
  wire [31 : 0] dp0_wmi_wmi_mFlagReg$D_IN;
  wire dp0_wmi_wmi_mFlagReg$EN;

  // register dp0_wmi_wmi_operateD
  reg dp0_wmi_wmi_operateD;
  wire dp0_wmi_wmi_operateD$D_IN, dp0_wmi_wmi_operateD$EN;

  // register dp0_wmi_wmi_peerIsReady
  reg dp0_wmi_wmi_peerIsReady;
  wire dp0_wmi_wmi_peerIsReady$D_IN, dp0_wmi_wmi_peerIsReady$EN;

  // register dp0_wmi_wmi_reqF_countReg
  reg [1 : 0] dp0_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp0_wmi_wmi_reqF_countReg$D_IN;
  wire dp0_wmi_wmi_reqF_countReg$EN;

  // register dp0_wmi_wmi_reqF_levelsValid
  reg dp0_wmi_wmi_reqF_levelsValid;
  wire dp0_wmi_wmi_reqF_levelsValid$D_IN, dp0_wmi_wmi_reqF_levelsValid$EN;

  // register dp0_wmi_wmi_respF_c_r
  reg [1 : 0] dp0_wmi_wmi_respF_c_r;
  wire [1 : 0] dp0_wmi_wmi_respF_c_r$D_IN;
  wire dp0_wmi_wmi_respF_c_r$EN;

  // register dp0_wmi_wmi_respF_q_0
  reg [33 : 0] dp0_wmi_wmi_respF_q_0;
  reg [33 : 0] dp0_wmi_wmi_respF_q_0$D_IN;
  wire dp0_wmi_wmi_respF_q_0$EN;

  // register dp0_wmi_wmi_respF_q_1
  reg [33 : 0] dp0_wmi_wmi_respF_q_1;
  reg [33 : 0] dp0_wmi_wmi_respF_q_1$D_IN;
  wire dp0_wmi_wmi_respF_q_1$EN;

  // register dp0_wmi_wmi_sFlagReg
  reg [31 : 0] dp0_wmi_wmi_sFlagReg;
  wire [31 : 0] dp0_wmi_wmi_sFlagReg$D_IN;
  wire dp0_wmi_wmi_sFlagReg$EN;

  // register dp0_wmi_wmi_statusR
  reg [7 : 0] dp0_wmi_wmi_statusR;
  wire [7 : 0] dp0_wmi_wmi_statusR$D_IN;
  wire dp0_wmi_wmi_statusR$EN;

  // register dp0_wmi_wmi_trafficSticky
  reg dp0_wmi_wmi_trafficSticky;
  wire dp0_wmi_wmi_trafficSticky$D_IN, dp0_wmi_wmi_trafficSticky$EN;

  // register dp0_wmi_wrActive
  reg dp0_wmi_wrActive;
  wire dp0_wmi_wrActive$D_IN, dp0_wmi_wrActive$EN;

  // register dp0_wmi_wrFinalize
  reg dp0_wmi_wrFinalize;
  wire dp0_wmi_wrFinalize$D_IN, dp0_wmi_wrFinalize$EN;

  // register dp0_wmi_wrtCount
  reg [15 : 0] dp0_wmi_wrtCount;
  wire [15 : 0] dp0_wmi_wrtCount$D_IN;
  wire dp0_wmi_wrtCount$EN;

  // register dp0_wti_nowReq
  reg [66 : 0] dp0_wti_nowReq;
  wire [66 : 0] dp0_wti_nowReq$D_IN;
  wire dp0_wti_nowReq$EN;

  // register dp1_bml_crdBuf_modulus
  reg [15 : 0] dp1_bml_crdBuf_modulus;
  wire [15 : 0] dp1_bml_crdBuf_modulus$D_IN;
  wire dp1_bml_crdBuf_modulus$EN;

  // register dp1_bml_crdBuf_value
  reg [15 : 0] dp1_bml_crdBuf_value;
  wire [15 : 0] dp1_bml_crdBuf_value$D_IN;
  wire dp1_bml_crdBuf_value$EN;

  // register dp1_bml_fabAvail
  reg dp1_bml_fabAvail;
  wire dp1_bml_fabAvail$D_IN, dp1_bml_fabAvail$EN;

  // register dp1_bml_fabBuf_modulus
  reg [15 : 0] dp1_bml_fabBuf_modulus;
  wire [15 : 0] dp1_bml_fabBuf_modulus$D_IN;
  wire dp1_bml_fabBuf_modulus$EN;

  // register dp1_bml_fabBuf_value
  reg [15 : 0] dp1_bml_fabBuf_value;
  wire [15 : 0] dp1_bml_fabBuf_value$D_IN;
  wire dp1_bml_fabBuf_value$EN;

  // register dp1_bml_fabBufsAvail
  reg [15 : 0] dp1_bml_fabBufsAvail;
  wire [15 : 0] dp1_bml_fabBufsAvail$D_IN;
  wire dp1_bml_fabBufsAvail$EN;

  // register dp1_bml_fabDone
  reg dp1_bml_fabDone;
  wire dp1_bml_fabDone$D_IN, dp1_bml_fabDone$EN;

  // register dp1_bml_fabFlowAddr
  reg [31 : 0] dp1_bml_fabFlowAddr;
  reg [31 : 0] dp1_bml_fabFlowAddr$D_IN;
  wire dp1_bml_fabFlowAddr$EN;

  // register dp1_bml_fabFlowBase
  reg [31 : 0] dp1_bml_fabFlowBase;
  wire [31 : 0] dp1_bml_fabFlowBase$D_IN;
  wire dp1_bml_fabFlowBase$EN;

  // register dp1_bml_fabFlowSize
  reg [31 : 0] dp1_bml_fabFlowSize;
  wire [31 : 0] dp1_bml_fabFlowSize$D_IN;
  wire dp1_bml_fabFlowSize$EN;

  // register dp1_bml_fabMesgAddr
  reg [31 : 0] dp1_bml_fabMesgAddr;
  wire [31 : 0] dp1_bml_fabMesgAddr$D_IN;
  wire dp1_bml_fabMesgAddr$EN;

  // register dp1_bml_fabMesgBase
  reg [31 : 0] dp1_bml_fabMesgBase;
  wire [31 : 0] dp1_bml_fabMesgBase$D_IN;
  wire dp1_bml_fabMesgBase$EN;

  // register dp1_bml_fabMesgSize
  reg [31 : 0] dp1_bml_fabMesgSize;
  wire [31 : 0] dp1_bml_fabMesgSize$D_IN;
  wire dp1_bml_fabMesgSize$EN;

  // register dp1_bml_fabMetaAddr
  reg [31 : 0] dp1_bml_fabMetaAddr;
  wire [31 : 0] dp1_bml_fabMetaAddr$D_IN;
  wire dp1_bml_fabMetaAddr$EN;

  // register dp1_bml_fabMetaBase
  reg [31 : 0] dp1_bml_fabMetaBase;
  wire [31 : 0] dp1_bml_fabMetaBase$D_IN;
  wire dp1_bml_fabMetaBase$EN;

  // register dp1_bml_fabMetaSize
  reg [31 : 0] dp1_bml_fabMetaSize;
  wire [31 : 0] dp1_bml_fabMetaSize$D_IN;
  wire dp1_bml_fabMetaSize$EN;

  // register dp1_bml_fabNumBufs
  reg [15 : 0] dp1_bml_fabNumBufs;
  wire [15 : 0] dp1_bml_fabNumBufs$D_IN;
  wire dp1_bml_fabNumBufs$EN;

  // register dp1_bml_lclBufDone
  reg dp1_bml_lclBufDone;
  wire dp1_bml_lclBufDone$D_IN, dp1_bml_lclBufDone$EN;

  // register dp1_bml_lclBufStart
  reg dp1_bml_lclBufStart;
  wire dp1_bml_lclBufStart$D_IN, dp1_bml_lclBufStart$EN;

  // register dp1_bml_lclBuf_modulus
  reg [15 : 0] dp1_bml_lclBuf_modulus;
  wire [15 : 0] dp1_bml_lclBuf_modulus$D_IN;
  wire dp1_bml_lclBuf_modulus$EN;

  // register dp1_bml_lclBuf_value
  reg [15 : 0] dp1_bml_lclBuf_value;
  wire [15 : 0] dp1_bml_lclBuf_value$D_IN;
  wire dp1_bml_lclBuf_value$EN;

  // register dp1_bml_lclBufsAR
  reg [15 : 0] dp1_bml_lclBufsAR;
  wire [15 : 0] dp1_bml_lclBufsAR$D_IN;
  wire dp1_bml_lclBufsAR$EN;

  // register dp1_bml_lclBufsCF
  reg [15 : 0] dp1_bml_lclBufsCF;
  wire [15 : 0] dp1_bml_lclBufsCF$D_IN;
  wire dp1_bml_lclBufsCF$EN;

  // register dp1_bml_lclCredit
  reg [15 : 0] dp1_bml_lclCredit;
  wire [15 : 0] dp1_bml_lclCredit$D_IN;
  wire dp1_bml_lclCredit$EN;

  // register dp1_bml_lclDones
  reg [15 : 0] dp1_bml_lclDones;
  wire [15 : 0] dp1_bml_lclDones$D_IN;
  wire dp1_bml_lclDones$EN;

  // register dp1_bml_lclMesgAddr
  reg [15 : 0] dp1_bml_lclMesgAddr;
  wire [15 : 0] dp1_bml_lclMesgAddr$D_IN;
  wire dp1_bml_lclMesgAddr$EN;

  // register dp1_bml_lclMetaAddr
  reg [15 : 0] dp1_bml_lclMetaAddr;
  wire [15 : 0] dp1_bml_lclMetaAddr$D_IN;
  wire dp1_bml_lclMetaAddr$EN;

  // register dp1_bml_lclNumBufs
  reg [15 : 0] dp1_bml_lclNumBufs;
  wire [15 : 0] dp1_bml_lclNumBufs$D_IN;
  wire dp1_bml_lclNumBufs$EN;

  // register dp1_bml_lclStarts
  reg [15 : 0] dp1_bml_lclStarts;
  wire [15 : 0] dp1_bml_lclStarts$D_IN;
  wire dp1_bml_lclStarts$EN;

  // register dp1_bml_mesgBase
  reg [15 : 0] dp1_bml_mesgBase;
  wire [15 : 0] dp1_bml_mesgBase$D_IN;
  wire dp1_bml_mesgBase$EN;

  // register dp1_bml_mesgSize
  reg [15 : 0] dp1_bml_mesgSize;
  wire [15 : 0] dp1_bml_mesgSize$D_IN;
  wire dp1_bml_mesgSize$EN;

  // register dp1_bml_metaBase
  reg [15 : 0] dp1_bml_metaBase;
  wire [15 : 0] dp1_bml_metaBase$D_IN;
  wire dp1_bml_metaBase$EN;

  // register dp1_bml_metaSize
  reg [15 : 0] dp1_bml_metaSize;
  wire [15 : 0] dp1_bml_metaSize$D_IN;
  wire dp1_bml_metaSize$EN;

  // register dp1_bml_remBuf_modulus
  reg [15 : 0] dp1_bml_remBuf_modulus;
  wire [15 : 0] dp1_bml_remBuf_modulus$D_IN;
  wire dp1_bml_remBuf_modulus$EN;

  // register dp1_bml_remBuf_value
  reg [15 : 0] dp1_bml_remBuf_value;
  wire [15 : 0] dp1_bml_remBuf_value$D_IN;
  wire dp1_bml_remBuf_value$EN;

  // register dp1_bml_remDone
  reg dp1_bml_remDone;
  wire dp1_bml_remDone$D_IN, dp1_bml_remDone$EN;

  // register dp1_bml_remDones
  reg [15 : 0] dp1_bml_remDones;
  wire [15 : 0] dp1_bml_remDones$D_IN;
  wire dp1_bml_remDones$EN;

  // register dp1_bml_remMesgAddr
  reg [15 : 0] dp1_bml_remMesgAddr;
  wire [15 : 0] dp1_bml_remMesgAddr$D_IN;
  wire dp1_bml_remMesgAddr$EN;

  // register dp1_bml_remMetaAddr
  reg [15 : 0] dp1_bml_remMetaAddr;
  wire [15 : 0] dp1_bml_remMetaAddr$D_IN;
  wire dp1_bml_remMetaAddr$EN;

  // register dp1_bml_remStart
  reg dp1_bml_remStart;
  wire dp1_bml_remStart$D_IN, dp1_bml_remStart$EN;

  // register dp1_bml_remStarts
  reg [15 : 0] dp1_bml_remStarts;
  wire [15 : 0] dp1_bml_remStarts$D_IN;
  wire dp1_bml_remStarts$EN;

  // register dp1_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_1_cnt$D_IN;
  wire dp1_bram_serverAdapterA_1_cnt$EN;

  // register dp1_bram_serverAdapterA_1_s1
  reg [1 : 0] dp1_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_1_s1$D_IN;
  wire dp1_bram_serverAdapterA_1_s1$EN;

  // register dp1_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_2_cnt$D_IN;
  wire dp1_bram_serverAdapterA_2_cnt$EN;

  // register dp1_bram_serverAdapterA_2_s1
  reg [1 : 0] dp1_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_2_s1$D_IN;
  wire dp1_bram_serverAdapterA_2_s1$EN;

  // register dp1_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_3_cnt$D_IN;
  wire dp1_bram_serverAdapterA_3_cnt$EN;

  // register dp1_bram_serverAdapterA_3_s1
  reg [1 : 0] dp1_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_3_s1$D_IN;
  wire dp1_bram_serverAdapterA_3_s1$EN;

  // register dp1_bram_serverAdapterA_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_cnt$D_IN;
  wire dp1_bram_serverAdapterA_cnt$EN;

  // register dp1_bram_serverAdapterA_s1
  reg [1 : 0] dp1_bram_serverAdapterA_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_s1$D_IN;
  wire dp1_bram_serverAdapterA_s1$EN;

  // register dp1_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_1_cnt$D_IN;
  wire dp1_bram_serverAdapterB_1_cnt$EN;

  // register dp1_bram_serverAdapterB_1_s1
  reg [1 : 0] dp1_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_1_s1$D_IN;
  wire dp1_bram_serverAdapterB_1_s1$EN;

  // register dp1_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_2_cnt$D_IN;
  wire dp1_bram_serverAdapterB_2_cnt$EN;

  // register dp1_bram_serverAdapterB_2_s1
  reg [1 : 0] dp1_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_2_s1$D_IN;
  wire dp1_bram_serverAdapterB_2_s1$EN;

  // register dp1_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_3_cnt$D_IN;
  wire dp1_bram_serverAdapterB_3_cnt$EN;

  // register dp1_bram_serverAdapterB_3_s1
  reg [1 : 0] dp1_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_3_s1$D_IN;
  wire dp1_bram_serverAdapterB_3_s1$EN;

  // register dp1_bram_serverAdapterB_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_cnt$D_IN;
  wire dp1_bram_serverAdapterB_cnt$EN;

  // register dp1_bram_serverAdapterB_s1
  reg [1 : 0] dp1_bram_serverAdapterB_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_s1$D_IN;
  wire dp1_bram_serverAdapterB_s1$EN;

  // register dp1_dpControl
  reg [3 : 0] dp1_dpControl;
  wire [3 : 0] dp1_dpControl$D_IN;
  wire dp1_dpControl$EN;

  // register dp1_tlp_creditReady
  reg dp1_tlp_creditReady;
  wire dp1_tlp_creditReady$D_IN, dp1_tlp_creditReady$EN;

  // register dp1_tlp_debugBdata
  reg [127 : 0] dp1_tlp_debugBdata;
  wire [127 : 0] dp1_tlp_debugBdata$D_IN;
  wire dp1_tlp_debugBdata$EN;

  // register dp1_tlp_dmaDoTailEvent
  reg dp1_tlp_dmaDoTailEvent;
  wire dp1_tlp_dmaDoTailEvent$D_IN, dp1_tlp_dmaDoTailEvent$EN;

  // register dp1_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp1_tlp_dmaPullRemainDWLen;
  wire [9 : 0] dp1_tlp_dmaPullRemainDWLen$D_IN;
  wire dp1_tlp_dmaPullRemainDWLen$EN;

  // register dp1_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp1_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp1_tlp_dmaPullRemainDWSub$D_IN;
  wire dp1_tlp_dmaPullRemainDWSub$EN;

  // register dp1_tlp_dmaReqTag
  reg [4 : 0] dp1_tlp_dmaReqTag;
  wire [4 : 0] dp1_tlp_dmaReqTag$D_IN;
  wire dp1_tlp_dmaReqTag$EN;

  // register dp1_tlp_dmaTag
  reg [4 : 0] dp1_tlp_dmaTag;
  wire [4 : 0] dp1_tlp_dmaTag$D_IN;
  wire dp1_tlp_dmaTag$EN;

  // register dp1_tlp_doXmtMetaBody
  reg dp1_tlp_doXmtMetaBody;
  wire dp1_tlp_doXmtMetaBody$D_IN, dp1_tlp_doXmtMetaBody$EN;

  // register dp1_tlp_fabFlowAddr
  reg [31 : 0] dp1_tlp_fabFlowAddr;
  wire [31 : 0] dp1_tlp_fabFlowAddr$D_IN;
  wire dp1_tlp_fabFlowAddr$EN;

  // register dp1_tlp_fabMesgAccu
  reg [31 : 0] dp1_tlp_fabMesgAccu;
  wire [31 : 0] dp1_tlp_fabMesgAccu$D_IN;
  wire dp1_tlp_fabMesgAccu$EN;

  // register dp1_tlp_fabMesgAddr
  reg [31 : 0] dp1_tlp_fabMesgAddr;
  wire [31 : 0] dp1_tlp_fabMesgAddr$D_IN;
  wire dp1_tlp_fabMesgAddr$EN;

  // register dp1_tlp_fabMeta
  reg [128 : 0] dp1_tlp_fabMeta;
  wire [128 : 0] dp1_tlp_fabMeta$D_IN;
  wire dp1_tlp_fabMeta$EN;

  // register dp1_tlp_fabMetaAddr
  reg [31 : 0] dp1_tlp_fabMetaAddr;
  wire [31 : 0] dp1_tlp_fabMetaAddr$D_IN;
  wire dp1_tlp_fabMetaAddr$EN;

  // register dp1_tlp_farBufReady
  reg dp1_tlp_farBufReady;
  wire dp1_tlp_farBufReady$D_IN, dp1_tlp_farBufReady$EN;

  // register dp1_tlp_flowDiagCount
  reg [31 : 0] dp1_tlp_flowDiagCount;
  wire [31 : 0] dp1_tlp_flowDiagCount$D_IN;
  wire dp1_tlp_flowDiagCount$EN;

  // register dp1_tlp_gotResponseHeader
  reg dp1_tlp_gotResponseHeader;
  wire dp1_tlp_gotResponseHeader$D_IN, dp1_tlp_gotResponseHeader$EN;

  // register dp1_tlp_inIgnorePkt
  reg dp1_tlp_inIgnorePkt;
  wire dp1_tlp_inIgnorePkt$D_IN, dp1_tlp_inIgnorePkt$EN;

  // register dp1_tlp_maxPayloadSize
  reg [12 : 0] dp1_tlp_maxPayloadSize;
  wire [12 : 0] dp1_tlp_maxPayloadSize$D_IN;
  wire dp1_tlp_maxPayloadSize$EN;

  // register dp1_tlp_maxReadReqSize
  reg [12 : 0] dp1_tlp_maxReadReqSize;
  wire [12 : 0] dp1_tlp_maxReadReqSize$D_IN;
  wire dp1_tlp_maxReadReqSize$EN;

  // register dp1_tlp_mesgComplReceived
  reg [16 : 0] dp1_tlp_mesgComplReceived;
  wire [16 : 0] dp1_tlp_mesgComplReceived$D_IN;
  wire dp1_tlp_mesgComplReceived$EN;

  // register dp1_tlp_mesgLengthRemainPull
  reg [16 : 0] dp1_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPull$D_IN;
  wire dp1_tlp_mesgLengthRemainPull$EN;

  // register dp1_tlp_mesgLengthRemainPush
  reg [16 : 0] dp1_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPush$D_IN;
  wire dp1_tlp_mesgLengthRemainPush$EN;

  // register dp1_tlp_nearBufReady
  reg dp1_tlp_nearBufReady;
  wire dp1_tlp_nearBufReady$D_IN, dp1_tlp_nearBufReady$EN;

  // register dp1_tlp_outDwRemain
  reg [9 : 0] dp1_tlp_outDwRemain;
  wire [9 : 0] dp1_tlp_outDwRemain$D_IN;
  wire dp1_tlp_outDwRemain$EN;

  // register dp1_tlp_postSeqDwell
  reg [3 : 0] dp1_tlp_postSeqDwell;
  wire [3 : 0] dp1_tlp_postSeqDwell$D_IN;
  wire dp1_tlp_postSeqDwell$EN;

  // register dp1_tlp_pullTagMatch
  reg dp1_tlp_pullTagMatch;
  wire dp1_tlp_pullTagMatch$D_IN, dp1_tlp_pullTagMatch$EN;

  // register dp1_tlp_rdRespDwRemain
  reg [9 : 0] dp1_tlp_rdRespDwRemain;
  wire [9 : 0] dp1_tlp_rdRespDwRemain$D_IN;
  wire dp1_tlp_rdRespDwRemain$EN;

  // register dp1_tlp_readHeaderSent
  reg dp1_tlp_readHeaderSent;
  wire dp1_tlp_readHeaderSent$D_IN, dp1_tlp_readHeaderSent$EN;

  // register dp1_tlp_readNxtDWAddr
  reg [12 : 0] dp1_tlp_readNxtDWAddr;
  wire [12 : 0] dp1_tlp_readNxtDWAddr$D_IN;
  wire dp1_tlp_readNxtDWAddr$EN;

  // register dp1_tlp_readRemainDWLen
  reg [9 : 0] dp1_tlp_readRemainDWLen;
  wire [9 : 0] dp1_tlp_readRemainDWLen$D_IN;
  wire dp1_tlp_readRemainDWLen$EN;

  // register dp1_tlp_readStarted
  reg dp1_tlp_readStarted;
  wire dp1_tlp_readStarted$D_IN, dp1_tlp_readStarted$EN;

  // register dp1_tlp_remDone
  reg dp1_tlp_remDone;
  wire dp1_tlp_remDone$D_IN, dp1_tlp_remDone$EN;

  // register dp1_tlp_remMesgAccu
  reg [15 : 0] dp1_tlp_remMesgAccu;
  wire [15 : 0] dp1_tlp_remMesgAccu$D_IN;
  wire dp1_tlp_remMesgAccu$EN;

  // register dp1_tlp_remMesgAddr
  reg [15 : 0] dp1_tlp_remMesgAddr;
  wire [15 : 0] dp1_tlp_remMesgAddr$D_IN;
  wire dp1_tlp_remMesgAddr$EN;

  // register dp1_tlp_remMetaAddr
  reg [15 : 0] dp1_tlp_remMetaAddr;
  wire [15 : 0] dp1_tlp_remMetaAddr$D_IN;
  wire dp1_tlp_remMetaAddr$EN;

  // register dp1_tlp_remStart
  reg dp1_tlp_remStart;
  wire dp1_tlp_remStart$D_IN, dp1_tlp_remStart$EN;

  // register dp1_tlp_reqMesgInFlight
  reg dp1_tlp_reqMesgInFlight;
  wire dp1_tlp_reqMesgInFlight$D_IN, dp1_tlp_reqMesgInFlight$EN;

  // register dp1_tlp_reqMetaBodyInFlight
  reg dp1_tlp_reqMetaBodyInFlight;
  wire dp1_tlp_reqMetaBodyInFlight$D_IN, dp1_tlp_reqMetaBodyInFlight$EN;

  // register dp1_tlp_reqMetaInFlight
  reg dp1_tlp_reqMetaInFlight;
  wire dp1_tlp_reqMetaInFlight$D_IN, dp1_tlp_reqMetaInFlight$EN;

  // register dp1_tlp_srcMesgAccu
  reg [31 : 0] dp1_tlp_srcMesgAccu;
  wire [31 : 0] dp1_tlp_srcMesgAccu$D_IN;
  wire dp1_tlp_srcMesgAccu$EN;

  // register dp1_tlp_tlpMetaSent
  reg dp1_tlp_tlpMetaSent;
  wire dp1_tlp_tlpMetaSent$D_IN, dp1_tlp_tlpMetaSent$EN;

  // register dp1_tlp_tlpRcvBusy
  reg dp1_tlp_tlpRcvBusy;
  wire dp1_tlp_tlpRcvBusy$D_IN, dp1_tlp_tlpRcvBusy$EN;

  // register dp1_tlp_tlpXmtBusy
  reg dp1_tlp_tlpXmtBusy;
  reg dp1_tlp_tlpXmtBusy$D_IN;
  wire dp1_tlp_tlpXmtBusy$EN;

  // register dp1_tlp_writeDWAddr
  reg [12 : 0] dp1_tlp_writeDWAddr;
  wire [12 : 0] dp1_tlp_writeDWAddr$D_IN;
  wire dp1_tlp_writeDWAddr$EN;

  // register dp1_tlp_writeLastBE
  reg [3 : 0] dp1_tlp_writeLastBE;
  wire [3 : 0] dp1_tlp_writeLastBE$D_IN;
  wire dp1_tlp_writeLastBE$EN;

  // register dp1_tlp_writeRemainDWLen
  reg [9 : 0] dp1_tlp_writeRemainDWLen;
  wire [9 : 0] dp1_tlp_writeRemainDWLen$D_IN;
  wire dp1_tlp_writeRemainDWLen$EN;

  // register dp1_tlp_xmtMetaInFlight
  reg dp1_tlp_xmtMetaInFlight;
  wire dp1_tlp_xmtMetaInFlight$D_IN, dp1_tlp_xmtMetaInFlight$EN;

  // register dp1_tlp_xmtMetaOK
  reg dp1_tlp_xmtMetaOK;
  reg dp1_tlp_xmtMetaOK$D_IN;
  wire dp1_tlp_xmtMetaOK$EN;

  // register dp1_wci_cEdge
  reg [2 : 0] dp1_wci_cEdge;
  wire [2 : 0] dp1_wci_cEdge$D_IN;
  wire dp1_wci_cEdge$EN;

  // register dp1_wci_cState
  reg [2 : 0] dp1_wci_cState;
  wire [2 : 0] dp1_wci_cState$D_IN;
  wire dp1_wci_cState$EN;

  // register dp1_wci_ctlAckReg
  reg dp1_wci_ctlAckReg;
  wire dp1_wci_ctlAckReg$D_IN, dp1_wci_ctlAckReg$EN;

  // register dp1_wci_ctlOpActive
  reg dp1_wci_ctlOpActive;
  wire dp1_wci_ctlOpActive$D_IN, dp1_wci_ctlOpActive$EN;

  // register dp1_wci_illegalEdge
  reg dp1_wci_illegalEdge;
  wire dp1_wci_illegalEdge$D_IN, dp1_wci_illegalEdge$EN;

  // register dp1_wci_nState
  reg [2 : 0] dp1_wci_nState;
  reg [2 : 0] dp1_wci_nState$D_IN;
  wire dp1_wci_nState$EN;

  // register dp1_wci_reqF_countReg
  reg [1 : 0] dp1_wci_reqF_countReg;
  wire [1 : 0] dp1_wci_reqF_countReg$D_IN;
  wire dp1_wci_reqF_countReg$EN;

  // register dp1_wci_respF_c_r
  reg [1 : 0] dp1_wci_respF_c_r;
  wire [1 : 0] dp1_wci_respF_c_r$D_IN;
  wire dp1_wci_respF_c_r$EN;

  // register dp1_wci_respF_q_0
  reg [33 : 0] dp1_wci_respF_q_0;
  reg [33 : 0] dp1_wci_respF_q_0$D_IN;
  wire dp1_wci_respF_q_0$EN;

  // register dp1_wci_respF_q_1
  reg [33 : 0] dp1_wci_respF_q_1;
  reg [33 : 0] dp1_wci_respF_q_1$D_IN;
  wire dp1_wci_respF_q_1$EN;

  // register dp1_wci_sFlagReg
  reg dp1_wci_sFlagReg;
  wire dp1_wci_sFlagReg$D_IN, dp1_wci_sFlagReg$EN;

  // register dp1_wci_sThreadBusy_d
  reg dp1_wci_sThreadBusy_d;
  wire dp1_wci_sThreadBusy_d$D_IN, dp1_wci_sThreadBusy_d$EN;

  // register dp1_wmi_addr
  reg [13 : 0] dp1_wmi_addr;
  wire [13 : 0] dp1_wmi_addr$D_IN;
  wire dp1_wmi_addr$EN;

  // register dp1_wmi_bufDwell
  reg [1 : 0] dp1_wmi_bufDwell;
  wire [1 : 0] dp1_wmi_bufDwell$D_IN;
  wire dp1_wmi_bufDwell$EN;

  // register dp1_wmi_bytesRemainReq
  reg [13 : 0] dp1_wmi_bytesRemainReq;
  wire [13 : 0] dp1_wmi_bytesRemainReq$D_IN;
  wire dp1_wmi_bytesRemainReq$EN;

  // register dp1_wmi_bytesRemainResp
  reg [13 : 0] dp1_wmi_bytesRemainResp;
  wire [13 : 0] dp1_wmi_bytesRemainResp$D_IN;
  wire dp1_wmi_bytesRemainResp$EN;

  // register dp1_wmi_doneWithMesg
  reg dp1_wmi_doneWithMesg;
  wire dp1_wmi_doneWithMesg$D_IN, dp1_wmi_doneWithMesg$EN;

  // register dp1_wmi_lastMesg
  reg [31 : 0] dp1_wmi_lastMesg;
  wire [31 : 0] dp1_wmi_lastMesg$D_IN;
  wire dp1_wmi_lastMesg$EN;

  // register dp1_wmi_lclMesgAddr
  reg [14 : 0] dp1_wmi_lclMesgAddr;
  wire [14 : 0] dp1_wmi_lclMesgAddr$D_IN;
  wire dp1_wmi_lclMesgAddr$EN;

  // register dp1_wmi_lclMetaAddr
  reg [14 : 0] dp1_wmi_lclMetaAddr;
  wire [14 : 0] dp1_wmi_lclMetaAddr$D_IN;
  wire dp1_wmi_lclMetaAddr$EN;

  // register dp1_wmi_mesgBufReady
  reg dp1_wmi_mesgBufReady;
  wire dp1_wmi_mesgBufReady$D_IN, dp1_wmi_mesgBufReady$EN;

  // register dp1_wmi_mesgBusy
  reg dp1_wmi_mesgBusy;
  wire dp1_wmi_mesgBusy$D_IN, dp1_wmi_mesgBusy$EN;

  // register dp1_wmi_mesgCount
  reg [31 : 0] dp1_wmi_mesgCount;
  wire [31 : 0] dp1_wmi_mesgCount$D_IN;
  wire dp1_wmi_mesgCount$EN;

  // register dp1_wmi_mesgDone
  reg dp1_wmi_mesgDone;
  wire dp1_wmi_mesgDone$D_IN, dp1_wmi_mesgDone$EN;

  // register dp1_wmi_mesgMeta
  reg [128 : 0] dp1_wmi_mesgMeta;
  wire [128 : 0] dp1_wmi_mesgMeta$D_IN;
  wire dp1_wmi_mesgMeta$EN;

  // register dp1_wmi_mesgStart
  reg dp1_wmi_mesgStart;
  wire dp1_wmi_mesgStart$D_IN, dp1_wmi_mesgStart$EN;

  // register dp1_wmi_metaBusy
  reg dp1_wmi_metaBusy;
  wire dp1_wmi_metaBusy$D_IN, dp1_wmi_metaBusy$EN;

  // register dp1_wmi_p4B
  reg [1 : 0] dp1_wmi_p4B;
  wire [1 : 0] dp1_wmi_p4B$D_IN;
  wire dp1_wmi_p4B$EN;

  // register dp1_wmi_rdActive
  reg dp1_wmi_rdActive;
  wire dp1_wmi_rdActive$D_IN, dp1_wmi_rdActive$EN;

  // register dp1_wmi_reqCount
  reg [15 : 0] dp1_wmi_reqCount;
  wire [15 : 0] dp1_wmi_reqCount$D_IN;
  wire dp1_wmi_reqCount$EN;

  // register dp1_wmi_thisMesg
  reg [31 : 0] dp1_wmi_thisMesg;
  wire [31 : 0] dp1_wmi_thisMesg$D_IN;
  wire dp1_wmi_thisMesg$EN;

  // register dp1_wmi_wmi_blockReq
  reg dp1_wmi_wmi_blockReq;
  wire dp1_wmi_wmi_blockReq$D_IN, dp1_wmi_wmi_blockReq$EN;

  // register dp1_wmi_wmi_dhF_countReg
  reg [1 : 0] dp1_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp1_wmi_wmi_dhF_countReg$D_IN;
  wire dp1_wmi_wmi_dhF_countReg$EN;

  // register dp1_wmi_wmi_dhF_levelsValid
  reg dp1_wmi_wmi_dhF_levelsValid;
  wire dp1_wmi_wmi_dhF_levelsValid$D_IN, dp1_wmi_wmi_dhF_levelsValid$EN;

  // register dp1_wmi_wmi_errorSticky
  reg dp1_wmi_wmi_errorSticky;
  wire dp1_wmi_wmi_errorSticky$D_IN, dp1_wmi_wmi_errorSticky$EN;

  // register dp1_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp1_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp1_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp1_wmi_wmi_mFlagF_countReg$EN;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  reg dp1_wmi_wmi_mFlagF_levelsValid;
  wire dp1_wmi_wmi_mFlagF_levelsValid$D_IN, dp1_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp1_wmi_wmi_mFlagReg
  reg [31 : 0] dp1_wmi_wmi_mFlagReg;
  wire [31 : 0] dp1_wmi_wmi_mFlagReg$D_IN;
  wire dp1_wmi_wmi_mFlagReg$EN;

  // register dp1_wmi_wmi_operateD
  reg dp1_wmi_wmi_operateD;
  wire dp1_wmi_wmi_operateD$D_IN, dp1_wmi_wmi_operateD$EN;

  // register dp1_wmi_wmi_peerIsReady
  reg dp1_wmi_wmi_peerIsReady;
  wire dp1_wmi_wmi_peerIsReady$D_IN, dp1_wmi_wmi_peerIsReady$EN;

  // register dp1_wmi_wmi_reqF_countReg
  reg [1 : 0] dp1_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp1_wmi_wmi_reqF_countReg$D_IN;
  wire dp1_wmi_wmi_reqF_countReg$EN;

  // register dp1_wmi_wmi_reqF_levelsValid
  reg dp1_wmi_wmi_reqF_levelsValid;
  wire dp1_wmi_wmi_reqF_levelsValid$D_IN, dp1_wmi_wmi_reqF_levelsValid$EN;

  // register dp1_wmi_wmi_respF_c_r
  reg [1 : 0] dp1_wmi_wmi_respF_c_r;
  wire [1 : 0] dp1_wmi_wmi_respF_c_r$D_IN;
  wire dp1_wmi_wmi_respF_c_r$EN;

  // register dp1_wmi_wmi_respF_q_0
  reg [33 : 0] dp1_wmi_wmi_respF_q_0;
  reg [33 : 0] dp1_wmi_wmi_respF_q_0$D_IN;
  wire dp1_wmi_wmi_respF_q_0$EN;

  // register dp1_wmi_wmi_respF_q_1
  reg [33 : 0] dp1_wmi_wmi_respF_q_1;
  reg [33 : 0] dp1_wmi_wmi_respF_q_1$D_IN;
  wire dp1_wmi_wmi_respF_q_1$EN;

  // register dp1_wmi_wmi_sFlagReg
  reg [31 : 0] dp1_wmi_wmi_sFlagReg;
  wire [31 : 0] dp1_wmi_wmi_sFlagReg$D_IN;
  wire dp1_wmi_wmi_sFlagReg$EN;

  // register dp1_wmi_wmi_statusR
  reg [7 : 0] dp1_wmi_wmi_statusR;
  wire [7 : 0] dp1_wmi_wmi_statusR$D_IN;
  wire dp1_wmi_wmi_statusR$EN;

  // register dp1_wmi_wmi_trafficSticky
  reg dp1_wmi_wmi_trafficSticky;
  wire dp1_wmi_wmi_trafficSticky$D_IN, dp1_wmi_wmi_trafficSticky$EN;

  // register dp1_wmi_wrActive
  reg dp1_wmi_wrActive;
  wire dp1_wmi_wrActive$D_IN, dp1_wmi_wrActive$EN;

  // register dp1_wmi_wrFinalize
  reg dp1_wmi_wrFinalize;
  wire dp1_wmi_wrFinalize$D_IN, dp1_wmi_wrFinalize$EN;

  // register dp1_wmi_wrtCount
  reg [15 : 0] dp1_wmi_wrtCount;
  wire [15 : 0] dp1_wmi_wrtCount$D_IN;
  wire dp1_wmi_wrtCount$EN;

  // register dp1_wti_nowReq
  reg [66 : 0] dp1_wti_nowReq;
  wire [66 : 0] dp1_wti_nowReq$D_IN;
  wire dp1_wti_nowReq$EN;

  // register noc_chompCnt
  reg [7 : 0] noc_chompCnt;
  wire [7 : 0] noc_chompCnt$D_IN;
  wire noc_chompCnt$EN;

  // register pciDevice
  reg [15 : 0] pciDevice;
  wire [15 : 0] pciDevice$D_IN;
  wire pciDevice$EN;

  // register pciw_Prelude_inst_changeSpecialWires_1_rg
  reg [81 : 0] pciw_Prelude_inst_changeSpecialWires_1_rg;
  wire [81 : 0] pciw_Prelude_inst_changeSpecialWires_1_rg$D_IN;
  wire pciw_Prelude_inst_changeSpecialWires_1_rg$EN;

  // register pciw_Prelude_inst_changeSpecialWires_2_rg
  reg [81 : 0] pciw_Prelude_inst_changeSpecialWires_2_rg;
  wire [81 : 0] pciw_Prelude_inst_changeSpecialWires_2_rg$D_IN;
  wire pciw_Prelude_inst_changeSpecialWires_2_rg$EN;

  // register pciw_i2pAF_dInReset_isInReset
  reg pciw_i2pAF_dInReset_isInReset;
  wire pciw_i2pAF_dInReset_isInReset$D_IN, pciw_i2pAF_dInReset_isInReset$EN;

  // register pciw_i2pAF_head_wrapped
  reg pciw_i2pAF_head_wrapped;
  wire pciw_i2pAF_head_wrapped$D_IN, pciw_i2pAF_head_wrapped$EN;

  // register pciw_i2pAF_sInReset_isInReset
  reg pciw_i2pAF_sInReset_isInReset;
  wire pciw_i2pAF_sInReset_isInReset$D_IN, pciw_i2pAF_sInReset_isInReset$EN;

  // register pciw_i2pAF_tail_wrapped
  reg pciw_i2pAF_tail_wrapped;
  wire pciw_i2pAF_tail_wrapped$D_IN, pciw_i2pAF_tail_wrapped$EN;

  // register pciw_i2pS
  reg [152 : 0] pciw_i2pS;
  wire [152 : 0] pciw_i2pS$D_IN;
  wire pciw_i2pS$EN;

  // register pciw_p2iAF_dInReset_isInReset
  reg pciw_p2iAF_dInReset_isInReset;
  wire pciw_p2iAF_dInReset_isInReset$D_IN, pciw_p2iAF_dInReset_isInReset$EN;

  // register pciw_p2iAF_head_wrapped
  reg pciw_p2iAF_head_wrapped;
  wire pciw_p2iAF_head_wrapped$D_IN, pciw_p2iAF_head_wrapped$EN;

  // register pciw_p2iAF_sInReset_isInReset
  reg pciw_p2iAF_sInReset_isInReset;
  wire pciw_p2iAF_sInReset_isInReset$D_IN, pciw_p2iAF_sInReset_isInReset$EN;

  // register pciw_p2iAF_tail_wrapped
  reg pciw_p2iAF_tail_wrapped;
  wire pciw_p2iAF_tail_wrapped$D_IN, pciw_p2iAF_tail_wrapped$EN;

  // register pciw_p2iS
  reg [152 : 0] pciw_p2iS;
  wire [152 : 0] pciw_p2iS$D_IN;
  wire pciw_p2iS$EN;

  // register pciw_pcie_irq_rInterruptDi
  reg [7 : 0] pciw_pcie_irq_rInterruptDi;
  wire [7 : 0] pciw_pcie_irq_rInterruptDi$D_IN;
  wire pciw_pcie_irq_rInterruptDi$EN;

  // register pciw_pcie_irq_rInterruptN
  reg pciw_pcie_irq_rInterruptN;
  wire pciw_pcie_irq_rInterruptN$D_IN, pciw_pcie_irq_rInterruptN$EN;

  // register pciw_pcie_irq_rInterrupting
  reg pciw_pcie_irq_rInterrupting;
  wire pciw_pcie_irq_rInterrupting$D_IN, pciw_pcie_irq_rInterrupting$EN;

  // register pciw_pcie_irq_rMMEnabled
  reg [2 : 0] pciw_pcie_irq_rMMEnabled;
  wire [2 : 0] pciw_pcie_irq_rMMEnabled$D_IN;
  wire pciw_pcie_irq_rMMEnabled$EN;

  // register pciw_pcie_irq_rMSIEnabled
  reg pciw_pcie_irq_rMSIEnabled;
  wire pciw_pcie_irq_rMSIEnabled$D_IN, pciw_pcie_irq_rMSIEnabled$EN;

  // ports of submodule cp
  wire [152 : 0] cp$server_request_put, cp$server_response_get;
  wire [31 : 0] cp$wci_Vm_0_SData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_SData;
  wire [2 : 0] cp$switch_x;
  wire [1 : 0] cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_13,
       cp$RST_N_wci_Vm_14,
       cp$gps_ppsSyncIn_x,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule dp0_bram_memory
  reg [31 : 0] dp0_bram_memory$DIA, dp0_bram_memory$DIB;
  reg [10 : 0] dp0_bram_memory$ADDRA, dp0_bram_memory$ADDRB;
  wire [31 : 0] dp0_bram_memory$DOA, dp0_bram_memory$DOB;
  wire dp0_bram_memory$ENA,
       dp0_bram_memory$ENB,
       dp0_bram_memory$WEA,
       dp0_bram_memory$WEB;

  // ports of submodule dp0_bram_memory_1
  reg [31 : 0] dp0_bram_memory_1$DIA, dp0_bram_memory_1$DIB;
  reg [10 : 0] dp0_bram_memory_1$ADDRA, dp0_bram_memory_1$ADDRB;
  wire [31 : 0] dp0_bram_memory_1$DOA, dp0_bram_memory_1$DOB;
  wire dp0_bram_memory_1$ENA,
       dp0_bram_memory_1$ENB,
       dp0_bram_memory_1$WEA,
       dp0_bram_memory_1$WEB;

  // ports of submodule dp0_bram_memory_2
  reg [31 : 0] dp0_bram_memory_2$DIA, dp0_bram_memory_2$DIB;
  reg [10 : 0] dp0_bram_memory_2$ADDRA, dp0_bram_memory_2$ADDRB;
  wire [31 : 0] dp0_bram_memory_2$DOA, dp0_bram_memory_2$DOB;
  wire dp0_bram_memory_2$ENA,
       dp0_bram_memory_2$ENB,
       dp0_bram_memory_2$WEA,
       dp0_bram_memory_2$WEB;

  // ports of submodule dp0_bram_memory_3
  reg [31 : 0] dp0_bram_memory_3$DIA, dp0_bram_memory_3$DIB;
  reg [10 : 0] dp0_bram_memory_3$ADDRA, dp0_bram_memory_3$ADDRB;
  wire [31 : 0] dp0_bram_memory_3$DOA, dp0_bram_memory_3$DOB;
  wire dp0_bram_memory_3$ENA,
       dp0_bram_memory_3$ENB,
       dp0_bram_memory_3$WEA,
       dp0_bram_memory_3$WEB;

  // ports of submodule dp0_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_1_outDataCore$D_IN,
		dp0_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_1_outDataCore$CLR,
       dp0_bram_serverAdapterA_1_outDataCore$DEQ,
       dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_1_outDataCore$ENQ,
       dp0_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_2_outDataCore$D_IN,
		dp0_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_2_outDataCore$CLR,
       dp0_bram_serverAdapterA_2_outDataCore$DEQ,
       dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_2_outDataCore$ENQ,
       dp0_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_3_outDataCore$D_IN,
		dp0_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_3_outDataCore$CLR,
       dp0_bram_serverAdapterA_3_outDataCore$DEQ,
       dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_3_outDataCore$ENQ,
       dp0_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_outDataCore$D_IN,
		dp0_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_outDataCore$CLR,
       dp0_bram_serverAdapterA_outDataCore$DEQ,
       dp0_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_outDataCore$ENQ,
       dp0_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_1_outDataCore$D_IN,
		dp0_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_1_outDataCore$CLR,
       dp0_bram_serverAdapterB_1_outDataCore$DEQ,
       dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_1_outDataCore$ENQ,
       dp0_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_2_outDataCore$D_IN,
		dp0_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_2_outDataCore$CLR,
       dp0_bram_serverAdapterB_2_outDataCore$DEQ,
       dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_2_outDataCore$ENQ,
       dp0_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_3_outDataCore$D_IN,
		dp0_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_3_outDataCore$CLR,
       dp0_bram_serverAdapterB_3_outDataCore$DEQ,
       dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_3_outDataCore$ENQ,
       dp0_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_outDataCore$D_IN,
		dp0_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_outDataCore$CLR,
       dp0_bram_serverAdapterB_outDataCore$DEQ,
       dp0_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_outDataCore$ENQ,
       dp0_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp0_tlp_inF
  wire [152 : 0] dp0_tlp_inF$D_IN, dp0_tlp_inF$D_OUT;
  wire dp0_tlp_inF$CLR,
       dp0_tlp_inF$DEQ,
       dp0_tlp_inF$EMPTY_N,
       dp0_tlp_inF$ENQ,
       dp0_tlp_inF$FULL_N;

  // ports of submodule dp0_tlp_mReqF
  reg [129 : 0] dp0_tlp_mReqF$D_IN;
  wire [129 : 0] dp0_tlp_mReqF$D_OUT;
  wire dp0_tlp_mReqF$CLR,
       dp0_tlp_mReqF$DEQ,
       dp0_tlp_mReqF$EMPTY_N,
       dp0_tlp_mReqF$ENQ,
       dp0_tlp_mReqF$FULL_N;

  // ports of submodule dp0_tlp_mRespF
  wire [138 : 0] dp0_tlp_mRespF$D_IN, dp0_tlp_mRespF$D_OUT;
  wire dp0_tlp_mRespF$CLR,
       dp0_tlp_mRespF$DEQ,
       dp0_tlp_mRespF$EMPTY_N,
       dp0_tlp_mRespF$ENQ,
       dp0_tlp_mRespF$FULL_N;

  // ports of submodule dp0_tlp_outF
  reg [152 : 0] dp0_tlp_outF$D_IN;
  wire [152 : 0] dp0_tlp_outF$D_OUT;
  wire dp0_tlp_outF$CLR,
       dp0_tlp_outF$DEQ,
       dp0_tlp_outF$EMPTY_N,
       dp0_tlp_outF$ENQ,
       dp0_tlp_outF$FULL_N;

  // ports of submodule dp0_tlp_readReq
  wire [59 : 0] dp0_tlp_readReq$D_IN, dp0_tlp_readReq$D_OUT;
  wire dp0_tlp_readReq$CLR,
       dp0_tlp_readReq$DEQ,
       dp0_tlp_readReq$EMPTY_N,
       dp0_tlp_readReq$ENQ,
       dp0_tlp_readReq$FULL_N;

  // ports of submodule dp0_tlp_tailEventF
  wire dp0_tlp_tailEventF$CLR,
       dp0_tlp_tailEventF$DEQ,
       dp0_tlp_tailEventF$EMPTY_N,
       dp0_tlp_tailEventF$ENQ,
       dp0_tlp_tailEventF$FULL_N;

  // ports of submodule dp0_wci_reqF
  wire [59 : 0] dp0_wci_reqF$D_IN, dp0_wci_reqF$D_OUT;
  wire dp0_wci_reqF$CLR,
       dp0_wci_reqF$DEQ,
       dp0_wci_reqF$EMPTY_N,
       dp0_wci_reqF$ENQ;

  // ports of submodule dp0_wmi_wmi_dhF
  wire [37 : 0] dp0_wmi_wmi_dhF$D_IN, dp0_wmi_wmi_dhF$D_OUT;
  wire dp0_wmi_wmi_dhF$CLR,
       dp0_wmi_wmi_dhF$DEQ,
       dp0_wmi_wmi_dhF$EMPTY_N,
       dp0_wmi_wmi_dhF$ENQ;

  // ports of submodule dp0_wmi_wmi_mFlagF
  wire [31 : 0] dp0_wmi_wmi_mFlagF$D_IN, dp0_wmi_wmi_mFlagF$D_OUT;
  wire dp0_wmi_wmi_mFlagF$CLR,
       dp0_wmi_wmi_mFlagF$DEQ,
       dp0_wmi_wmi_mFlagF$EMPTY_N,
       dp0_wmi_wmi_mFlagF$ENQ;

  // ports of submodule dp0_wmi_wmi_reqF
  wire [31 : 0] dp0_wmi_wmi_reqF$D_IN, dp0_wmi_wmi_reqF$D_OUT;
  wire dp0_wmi_wmi_reqF$CLR,
       dp0_wmi_wmi_reqF$DEQ,
       dp0_wmi_wmi_reqF$EMPTY_N,
       dp0_wmi_wmi_reqF$ENQ;

  // ports of submodule dp1_bram_memory
  reg [31 : 0] dp1_bram_memory$DIA, dp1_bram_memory$DIB;
  reg [10 : 0] dp1_bram_memory$ADDRA, dp1_bram_memory$ADDRB;
  wire [31 : 0] dp1_bram_memory$DOA, dp1_bram_memory$DOB;
  wire dp1_bram_memory$ENA,
       dp1_bram_memory$ENB,
       dp1_bram_memory$WEA,
       dp1_bram_memory$WEB;

  // ports of submodule dp1_bram_memory_1
  reg [31 : 0] dp1_bram_memory_1$DIA, dp1_bram_memory_1$DIB;
  reg [10 : 0] dp1_bram_memory_1$ADDRA, dp1_bram_memory_1$ADDRB;
  wire [31 : 0] dp1_bram_memory_1$DOA, dp1_bram_memory_1$DOB;
  wire dp1_bram_memory_1$ENA,
       dp1_bram_memory_1$ENB,
       dp1_bram_memory_1$WEA,
       dp1_bram_memory_1$WEB;

  // ports of submodule dp1_bram_memory_2
  reg [31 : 0] dp1_bram_memory_2$DIA, dp1_bram_memory_2$DIB;
  reg [10 : 0] dp1_bram_memory_2$ADDRA, dp1_bram_memory_2$ADDRB;
  wire [31 : 0] dp1_bram_memory_2$DOA, dp1_bram_memory_2$DOB;
  wire dp1_bram_memory_2$ENA,
       dp1_bram_memory_2$ENB,
       dp1_bram_memory_2$WEA,
       dp1_bram_memory_2$WEB;

  // ports of submodule dp1_bram_memory_3
  reg [31 : 0] dp1_bram_memory_3$DIA, dp1_bram_memory_3$DIB;
  reg [10 : 0] dp1_bram_memory_3$ADDRA, dp1_bram_memory_3$ADDRB;
  wire [31 : 0] dp1_bram_memory_3$DOA, dp1_bram_memory_3$DOB;
  wire dp1_bram_memory_3$ENA,
       dp1_bram_memory_3$ENB,
       dp1_bram_memory_3$WEA,
       dp1_bram_memory_3$WEB;

  // ports of submodule dp1_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_1_outDataCore$D_IN,
		dp1_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_1_outDataCore$CLR,
       dp1_bram_serverAdapterA_1_outDataCore$DEQ,
       dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_1_outDataCore$ENQ,
       dp1_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_2_outDataCore$D_IN,
		dp1_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_2_outDataCore$CLR,
       dp1_bram_serverAdapterA_2_outDataCore$DEQ,
       dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_2_outDataCore$ENQ,
       dp1_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_3_outDataCore$D_IN,
		dp1_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_3_outDataCore$CLR,
       dp1_bram_serverAdapterA_3_outDataCore$DEQ,
       dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_3_outDataCore$ENQ,
       dp1_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_outDataCore$D_IN,
		dp1_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_outDataCore$CLR,
       dp1_bram_serverAdapterA_outDataCore$DEQ,
       dp1_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_outDataCore$ENQ,
       dp1_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_1_outDataCore$D_IN,
		dp1_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_1_outDataCore$CLR,
       dp1_bram_serverAdapterB_1_outDataCore$DEQ,
       dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_1_outDataCore$ENQ,
       dp1_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_2_outDataCore$D_IN,
		dp1_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_2_outDataCore$CLR,
       dp1_bram_serverAdapterB_2_outDataCore$DEQ,
       dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_2_outDataCore$ENQ,
       dp1_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_3_outDataCore$D_IN,
		dp1_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_3_outDataCore$CLR,
       dp1_bram_serverAdapterB_3_outDataCore$DEQ,
       dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_3_outDataCore$ENQ,
       dp1_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_outDataCore$D_IN,
		dp1_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_outDataCore$CLR,
       dp1_bram_serverAdapterB_outDataCore$DEQ,
       dp1_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_outDataCore$ENQ,
       dp1_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp1_tlp_inF
  wire [152 : 0] dp1_tlp_inF$D_IN, dp1_tlp_inF$D_OUT;
  wire dp1_tlp_inF$CLR,
       dp1_tlp_inF$DEQ,
       dp1_tlp_inF$EMPTY_N,
       dp1_tlp_inF$ENQ,
       dp1_tlp_inF$FULL_N;

  // ports of submodule dp1_tlp_mReqF
  reg [129 : 0] dp1_tlp_mReqF$D_IN;
  wire [129 : 0] dp1_tlp_mReqF$D_OUT;
  wire dp1_tlp_mReqF$CLR,
       dp1_tlp_mReqF$DEQ,
       dp1_tlp_mReqF$EMPTY_N,
       dp1_tlp_mReqF$ENQ,
       dp1_tlp_mReqF$FULL_N;

  // ports of submodule dp1_tlp_mRespF
  wire [138 : 0] dp1_tlp_mRespF$D_IN, dp1_tlp_mRespF$D_OUT;
  wire dp1_tlp_mRespF$CLR,
       dp1_tlp_mRespF$DEQ,
       dp1_tlp_mRespF$EMPTY_N,
       dp1_tlp_mRespF$ENQ,
       dp1_tlp_mRespF$FULL_N;

  // ports of submodule dp1_tlp_outF
  reg [152 : 0] dp1_tlp_outF$D_IN;
  wire [152 : 0] dp1_tlp_outF$D_OUT;
  wire dp1_tlp_outF$CLR,
       dp1_tlp_outF$DEQ,
       dp1_tlp_outF$EMPTY_N,
       dp1_tlp_outF$ENQ,
       dp1_tlp_outF$FULL_N;

  // ports of submodule dp1_tlp_readReq
  wire [59 : 0] dp1_tlp_readReq$D_IN, dp1_tlp_readReq$D_OUT;
  wire dp1_tlp_readReq$CLR,
       dp1_tlp_readReq$DEQ,
       dp1_tlp_readReq$EMPTY_N,
       dp1_tlp_readReq$ENQ,
       dp1_tlp_readReq$FULL_N;

  // ports of submodule dp1_tlp_tailEventF
  wire dp1_tlp_tailEventF$CLR,
       dp1_tlp_tailEventF$DEQ,
       dp1_tlp_tailEventF$EMPTY_N,
       dp1_tlp_tailEventF$ENQ,
       dp1_tlp_tailEventF$FULL_N;

  // ports of submodule dp1_wci_reqF
  wire [59 : 0] dp1_wci_reqF$D_IN, dp1_wci_reqF$D_OUT;
  wire dp1_wci_reqF$CLR,
       dp1_wci_reqF$DEQ,
       dp1_wci_reqF$EMPTY_N,
       dp1_wci_reqF$ENQ;

  // ports of submodule dp1_wmi_wmi_dhF
  wire [37 : 0] dp1_wmi_wmi_dhF$D_IN, dp1_wmi_wmi_dhF$D_OUT;
  wire dp1_wmi_wmi_dhF$CLR,
       dp1_wmi_wmi_dhF$DEQ,
       dp1_wmi_wmi_dhF$EMPTY_N,
       dp1_wmi_wmi_dhF$ENQ;

  // ports of submodule dp1_wmi_wmi_mFlagF
  wire [31 : 0] dp1_wmi_wmi_mFlagF$D_IN, dp1_wmi_wmi_mFlagF$D_OUT;
  wire dp1_wmi_wmi_mFlagF$CLR,
       dp1_wmi_wmi_mFlagF$DEQ,
       dp1_wmi_wmi_mFlagF$EMPTY_N,
       dp1_wmi_wmi_mFlagF$ENQ;

  // ports of submodule dp1_wmi_wmi_reqF
  wire [31 : 0] dp1_wmi_wmi_reqF$D_IN, dp1_wmi_wmi_reqF$D_OUT;
  wire dp1_wmi_wmi_reqF$CLR,
       dp1_wmi_wmi_reqF$DEQ,
       dp1_wmi_wmi_reqF$EMPTY_N,
       dp1_wmi_wmi_reqF$ENQ;

  // ports of submodule noc_sm0
  wire [152 : 0] noc_sm0$c0_request_get,
		 noc_sm0$c0_response_put,
		 noc_sm0$c1_request_get,
		 noc_sm0$c1_response_put,
		 noc_sm0$s_request_put,
		 noc_sm0$s_response_get;
  wire noc_sm0$EN_c0_request_get,
       noc_sm0$EN_c0_response_put,
       noc_sm0$EN_c1_request_get,
       noc_sm0$EN_c1_response_put,
       noc_sm0$EN_s_request_put,
       noc_sm0$EN_s_response_get,
       noc_sm0$RDY_c0_request_get,
       noc_sm0$RDY_c0_response_put,
       noc_sm0$RDY_c1_request_get,
       noc_sm0$RDY_c1_response_put,
       noc_sm0$RDY_s_request_put,
       noc_sm0$RDY_s_response_get;

  // ports of submodule noc_sm1
  wire [152 : 0] noc_sm1$c0_request_get,
		 noc_sm1$c0_response_put,
		 noc_sm1$c1_request_get,
		 noc_sm1$c1_response_put,
		 noc_sm1$s_request_put,
		 noc_sm1$s_response_get;
  wire noc_sm1$EN_c0_request_get,
       noc_sm1$EN_c0_response_put,
       noc_sm1$EN_c1_request_get,
       noc_sm1$EN_c1_response_put,
       noc_sm1$EN_s_request_put,
       noc_sm1$EN_s_response_get,
       noc_sm1$RDY_c0_request_get,
       noc_sm1$RDY_c0_response_put,
       noc_sm1$RDY_c1_request_get,
       noc_sm1$RDY_c1_response_put,
       noc_sm1$RDY_s_request_put,
       noc_sm1$RDY_s_response_get;

  // ports of submodule noc_sm2
  wire [152 : 0] noc_sm2$c0_request_get,
		 noc_sm2$c0_response_put,
		 noc_sm2$c1_response_put,
		 noc_sm2$s_request_put,
		 noc_sm2$s_response_get;
  wire noc_sm2$EN_c0_request_get,
       noc_sm2$EN_c0_response_put,
       noc_sm2$EN_c1_request_get,
       noc_sm2$EN_c1_response_put,
       noc_sm2$EN_s_request_put,
       noc_sm2$EN_s_response_get,
       noc_sm2$RDY_c0_request_get,
       noc_sm2$RDY_c0_response_put,
       noc_sm2$RDY_c1_request_get,
       noc_sm2$RDY_s_request_put,
       noc_sm2$RDY_s_response_get;

  // ports of submodule pciw_fI2P
  wire [80 : 0] pciw_fI2P$D_IN, pciw_fI2P$D_OUT;
  wire pciw_fI2P$CLR,
       pciw_fI2P$DEQ,
       pciw_fI2P$EMPTY_N,
       pciw_fI2P$ENQ,
       pciw_fI2P$FULL_N;

  // ports of submodule pciw_fP2I
  wire [80 : 0] pciw_fP2I$D_IN, pciw_fP2I$D_OUT;
  wire pciw_fP2I$CLR,
       pciw_fP2I$DEQ,
       pciw_fP2I$EMPTY_N,
       pciw_fP2I$ENQ,
       pciw_fP2I$FULL_N;

  // ports of submodule pciw_i2pAF_dCombinedReset
  wire pciw_i2pAF_dCombinedReset$RST_OUT;

  // ports of submodule pciw_i2pAF_dCrossedsReset
  wire pciw_i2pAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule pciw_i2pAF_sCombinedReset
  wire pciw_i2pAF_sCombinedReset$RST_OUT;

  // ports of submodule pciw_i2pAF_sCrosseddReset
  wire pciw_i2pAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule pciw_p125rst
  wire pciw_p125rst$OUT_RST_N;

  // ports of submodule pciw_p250rst
  wire pciw_p250rst$OUT_RST_N;

  // ports of submodule pciw_p2iAF_dCombinedReset
  wire pciw_p2iAF_dCombinedReset$RST_OUT;

  // ports of submodule pciw_p2iAF_dCrossedsReset
  wire pciw_p2iAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule pciw_p2iAF_sCombinedReset
  wire pciw_p2iAF_sCombinedReset$RST_OUT;

  // ports of submodule pciw_p2iAF_sCrosseddReset
  wire pciw_p2iAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule pciw_pci0_clk
  wire pciw_pci0_clk$O;

  // ports of submodule pciw_pci0_pcie_ep
  wire [63 : 0] pciw_pci0_pcie_ep$cfg_dsn,
		pciw_pci0_pcie_ep$trn_rd,
		pciw_pci0_pcie_ep$trn_td;
  wire [47 : 0] pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pciw_pci0_pcie_ep$cfg_di;
  wire [9 : 0] pciw_pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_di,
	       pciw_pci0_pcie_ep$cfg_interrupt_do;
  wire [6 : 0] pciw_pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pciw_pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pciw_pci0_pcie_ep$cfg_byte_en_n,
	       pciw_pci0_pcie_ep$pci_exp_rxn,
	       pciw_pci0_pcie_ep$pci_exp_rxp,
	       pciw_pci0_pcie_ep$pci_exp_txn,
	       pciw_pci0_pcie_ep$pci_exp_txp;
  wire [2 : 0] pciw_pci0_pcie_ep$cfg_function_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_mmenable,
	       pciw_pci0_pcie_ep$trn_fc_sel;
  wire [1 : 0] pciw_pci0_pcie_ep$pl_directed_link_change,
	       pciw_pci0_pcie_ep$pl_directed_link_width;
  wire pciw_pci0_pcie_ep$cfg_err_cor_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_abort_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pciw_pci0_pcie_ep$cfg_err_ecrc_n,
       pciw_pci0_pcie_ep$cfg_err_locked_n,
       pciw_pci0_pcie_ep$cfg_err_posted_n,
       pciw_pci0_pcie_ep$cfg_err_ur_n,
       pciw_pci0_pcie_ep$cfg_interrupt_assert_n,
       pciw_pci0_pcie_ep$cfg_interrupt_msienable,
       pciw_pci0_pcie_ep$cfg_interrupt_n,
       pciw_pci0_pcie_ep$cfg_interrupt_rdy_n,
       pciw_pci0_pcie_ep$cfg_pm_wake_n,
       pciw_pci0_pcie_ep$cfg_rd_en_n,
       pciw_pci0_pcie_ep$cfg_trn_pending_n,
       pciw_pci0_pcie_ep$cfg_turnoff_ok_n,
       pciw_pci0_pcie_ep$cfg_wr_en_n,
       pciw_pci0_pcie_ep$pl_directed_link_auton,
       pciw_pci0_pcie_ep$pl_directed_link_speed,
       pciw_pci0_pcie_ep$pl_upstream_prefer_deemph,
       pciw_pci0_pcie_ep$trn2_clk,
       pciw_pci0_pcie_ep$trn_clk,
       pciw_pci0_pcie_ep$trn_lnk_up_n,
       pciw_pci0_pcie_ep$trn_rdst_rdy_n,
       pciw_pci0_pcie_ep$trn_reof_n,
       pciw_pci0_pcie_ep$trn_reset_n,
       pciw_pci0_pcie_ep$trn_rnp_ok_n,
       pciw_pci0_pcie_ep$trn_rrem_n,
       pciw_pci0_pcie_ep$trn_rsof_n,
       pciw_pci0_pcie_ep$trn_rsrc_rdy_n,
       pciw_pci0_pcie_ep$trn_tcfg_gnt_n,
       pciw_pci0_pcie_ep$trn_tdst_rdy_n,
       pciw_pci0_pcie_ep$trn_teof_n,
       pciw_pci0_pcie_ep$trn_terrfwd_n,
       pciw_pci0_pcie_ep$trn_trem_n,
       pciw_pci0_pcie_ep$trn_tsof_n,
       pciw_pci0_pcie_ep$trn_tsrc_dsc_n,
       pciw_pci0_pcie_ep$trn_tsrc_rdy_n,
       pciw_pci0_pcie_ep$trn_tstr_n;

  // ports of submodule pciw_pci0_rst
  wire pciw_pci0_rst$O;

  // ports of submodule pciw_pciDevice
  wire [15 : 0] pciw_pciDevice$dD_OUT, pciw_pciDevice$sD_IN;
  wire pciw_pciDevice$sEN, pciw_pciDevice$sRDY;

  // ports of submodule pciw_pciLinkUp
  wire pciw_pciLinkUp$dD_OUT, pciw_pciLinkUp$sD_IN, pciw_pciLinkUp$sEN;

  // ports of submodule pciw_pcie_irq_fifoAssert
  wire [7 : 0] pciw_pcie_irq_fifoAssert$dD_OUT,
	       pciw_pcie_irq_fifoAssert$sD_IN;
  wire pciw_pcie_irq_fifoAssert$dDEQ,
       pciw_pcie_irq_fifoAssert$dEMPTY_N,
       pciw_pcie_irq_fifoAssert$sENQ;

  // ports of submodule pciw_preEdge
  wire pciw_preEdge$CLK_VAL;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_dp0_assignControl,
       CAN_FIRE_RL_dp0_bml_cntLclDone,
       CAN_FIRE_RL_dp0_bml_cntLclStart,
       CAN_FIRE_RL_dp0_bml_cntRemDone,
       CAN_FIRE_RL_dp0_bml_cntRemStart,
       CAN_FIRE_RL_dp0_bml_crdAdvance,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_fabDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_fba,
       CAN_FIRE_RL_dp0_bml_initAccumulators,
       CAN_FIRE_RL_dp0_bml_lbar,
       CAN_FIRE_RL_dp0_bml_lbcf,
       CAN_FIRE_RL_dp0_bml_lclAdvance,
       CAN_FIRE_RL_dp0_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_lcredit,
       CAN_FIRE_RL_dp0_bml_remAdvance,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_remDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_remStart__dreg_update,
       CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_mkConnectionVtoAf,
       CAN_FIRE_RL_dp0_operating_actions,
       CAN_FIRE_RL_dp0_rBMesg,
       CAN_FIRE_RL_dp0_rBMesg_1,
       CAN_FIRE_RL_dp0_rBMeta,
       CAN_FIRE_RL_dp0_rBMeta_1,
       CAN_FIRE_RL_dp0_rCredit_1,
       CAN_FIRE_RL_dp0_rDone,
       CAN_FIRE_RL_dp0_rDone_1,
       CAN_FIRE_RL_dp0_rFFlow_1,
       CAN_FIRE_RL_dp0_rFMesg_1,
       CAN_FIRE_RL_dp0_rFMeta_1,
       CAN_FIRE_RL_dp0_rFRdy_1,
       CAN_FIRE_RL_dp0_rRdy,
       CAN_FIRE_RL_dp0_rRdy_1,
       CAN_FIRE_RL_dp0_rStart,
       CAN_FIRE_RL_dp0_rStart_1,
       CAN_FIRE_RL_dp0_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_dataXmt_Body,
       CAN_FIRE_RL_dp0_tlp_dataXmt_Header,
       CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaTailEventSender,
       CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_dp0_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_dp0_tlp_read_FirstReq,
       CAN_FIRE_RL_dp0_tlp_read_FirstResp,
       CAN_FIRE_RL_dp0_tlp_read_NextReq,
       CAN_FIRE_RL_dp0_tlp_read_NextResp,
       CAN_FIRE_RL_dp0_tlp_remDone__dreg_update,
       CAN_FIRE_RL_dp0_tlp_remStart__dreg_update,
       CAN_FIRE_RL_dp0_tlp_tlpRcv,
       CAN_FIRE_RL_dp0_tlp_writeData,
       CAN_FIRE_RL_dp0_tlp_writeReq,
       CAN_FIRE_RL_dp0_wci_Es_doAlways_Req,
       CAN_FIRE_RL_dp0_wci_cfrd,
       CAN_FIRE_RL_dp0_wci_cfwr,
       CAN_FIRE_RL_dp0_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_dp0_wci_ctl_op_complete,
       CAN_FIRE_RL_dp0_wci_ctl_op_start,
       CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wci_reqF_enq,
       CAN_FIRE_RL_dp0_wci_request_decode,
       CAN_FIRE_RL_dp0_wci_respF_both,
       CAN_FIRE_RL_dp0_wci_respF_decCtr,
       CAN_FIRE_RL_dp0_wci_respF_deq,
       CAN_FIRE_RL_dp0_wci_respF_incCtr,
       CAN_FIRE_RL_dp0_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_dp0_wci_sThreadBusy_reg,
       CAN_FIRE_RL_dp0_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_dp0_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_dp0_wmi_doDwell,
       CAN_FIRE_RL_dp0_wmi_doReadReq,
       CAN_FIRE_RL_dp0_wmi_doReadResp,
       CAN_FIRE_RL_dp0_wmi_doWriteFinalize,
       CAN_FIRE_RL_dp0_wmi_doWriteReq,
       CAN_FIRE_RL_dp0_wmi_getRequest,
       CAN_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_dp0_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_dp0_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_dp0_wmi_reqMetadata,
       CAN_FIRE_RL_dp0_wmi_respMetadata,
       CAN_FIRE_RL_dp0_wmi_throttleWmi,
       CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_both,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_deq,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_dp1_assignControl,
       CAN_FIRE_RL_dp1_bml_cntLclDone,
       CAN_FIRE_RL_dp1_bml_cntLclStart,
       CAN_FIRE_RL_dp1_bml_cntRemDone,
       CAN_FIRE_RL_dp1_bml_cntRemStart,
       CAN_FIRE_RL_dp1_bml_crdAdvance,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_fabDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_fba,
       CAN_FIRE_RL_dp1_bml_initAccumulators,
       CAN_FIRE_RL_dp1_bml_lbar,
       CAN_FIRE_RL_dp1_bml_lbcf,
       CAN_FIRE_RL_dp1_bml_lclAdvance,
       CAN_FIRE_RL_dp1_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_lcredit,
       CAN_FIRE_RL_dp1_bml_remAdvance,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_remDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_remStart__dreg_update,
       CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_mkConnectionVtoAf,
       CAN_FIRE_RL_dp1_operating_actions,
       CAN_FIRE_RL_dp1_rBMesg,
       CAN_FIRE_RL_dp1_rBMesg_1,
       CAN_FIRE_RL_dp1_rBMeta,
       CAN_FIRE_RL_dp1_rBMeta_1,
       CAN_FIRE_RL_dp1_rCredit_1,
       CAN_FIRE_RL_dp1_rDone,
       CAN_FIRE_RL_dp1_rDone_1,
       CAN_FIRE_RL_dp1_rFFlow_1,
       CAN_FIRE_RL_dp1_rFMesg_1,
       CAN_FIRE_RL_dp1_rFMeta_1,
       CAN_FIRE_RL_dp1_rFRdy_1,
       CAN_FIRE_RL_dp1_rRdy,
       CAN_FIRE_RL_dp1_rRdy_1,
       CAN_FIRE_RL_dp1_rStart,
       CAN_FIRE_RL_dp1_rStart_1,
       CAN_FIRE_RL_dp1_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_dataXmt_Body,
       CAN_FIRE_RL_dp1_tlp_dataXmt_Header,
       CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_dp1_tlp_dmaTailEventSender,
       CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_dp1_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_dp1_tlp_read_FirstReq,
       CAN_FIRE_RL_dp1_tlp_read_FirstResp,
       CAN_FIRE_RL_dp1_tlp_read_NextReq,
       CAN_FIRE_RL_dp1_tlp_read_NextResp,
       CAN_FIRE_RL_dp1_tlp_remDone__dreg_update,
       CAN_FIRE_RL_dp1_tlp_remStart__dreg_update,
       CAN_FIRE_RL_dp1_tlp_tlpRcv,
       CAN_FIRE_RL_dp1_tlp_writeData,
       CAN_FIRE_RL_dp1_tlp_writeReq,
       CAN_FIRE_RL_dp1_wci_Es_doAlways_Req,
       CAN_FIRE_RL_dp1_wci_cfrd,
       CAN_FIRE_RL_dp1_wci_cfwr,
       CAN_FIRE_RL_dp1_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_dp1_wci_ctl_op_complete,
       CAN_FIRE_RL_dp1_wci_ctl_op_start,
       CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wci_reqF_enq,
       CAN_FIRE_RL_dp1_wci_request_decode,
       CAN_FIRE_RL_dp1_wci_respF_both,
       CAN_FIRE_RL_dp1_wci_respF_decCtr,
       CAN_FIRE_RL_dp1_wci_respF_deq,
       CAN_FIRE_RL_dp1_wci_respF_incCtr,
       CAN_FIRE_RL_dp1_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_dp1_wci_sThreadBusy_reg,
       CAN_FIRE_RL_dp1_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_dp1_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_dp1_wmi_doDwell,
       CAN_FIRE_RL_dp1_wmi_doReadReq,
       CAN_FIRE_RL_dp1_wmi_doReadResp,
       CAN_FIRE_RL_dp1_wmi_doWriteFinalize,
       CAN_FIRE_RL_dp1_wmi_doWriteReq,
       CAN_FIRE_RL_dp1_wmi_getRequest,
       CAN_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_dp1_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_dp1_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_dp1_wmi_reqMetadata,
       CAN_FIRE_RL_dp1_wmi_respMetadata,
       CAN_FIRE_RL_dp1_wmi_throttleWmi,
       CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_both,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_deq,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_noc_ClientServerRequest,
       CAN_FIRE_RL_noc_ClientServerRequest_1,
       CAN_FIRE_RL_noc_ClientServerResponse,
       CAN_FIRE_RL_noc_ClientServerResponse_1,
       CAN_FIRE_RL_noc_chomp_rogue,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_connect,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_every,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_connect,
       CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_every,
       CAN_FIRE_RL_pciw_capture_pciDevice,
       CAN_FIRE_RL_pciw_connect_interrupt_1,
       CAN_FIRE_RL_pciw_connect_interrupt_do,
       CAN_FIRE_RL_pciw_connect_interrupt_mmenable,
       CAN_FIRE_RL_pciw_connect_interrupt_msienable,
       CAN_FIRE_RL_pciw_connect_interrupt_rdy_n,
       CAN_FIRE_RL_pciw_i2pAF_dClear_update_head,
       CAN_FIRE_RL_pciw_i2pAF_dInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_pciw_i2pAF_deq_update_head,
       CAN_FIRE_RL_pciw_i2pAF_enq_update_tail,
       CAN_FIRE_RL_pciw_i2pAF_reset_head,
       CAN_FIRE_RL_pciw_i2pAF_reset_tail,
       CAN_FIRE_RL_pciw_i2pAF_sClear_update_tail,
       CAN_FIRE_RL_pciw_i2pAF_sInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_pciw_p2iAF_dClear_update_head,
       CAN_FIRE_RL_pciw_p2iAF_dInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_pciw_p2iAF_deq_update_head,
       CAN_FIRE_RL_pciw_p2iAF_enq_update_tail,
       CAN_FIRE_RL_pciw_p2iAF_reset_head,
       CAN_FIRE_RL_pciw_p2iAF_reset_tail,
       CAN_FIRE_RL_pciw_p2iAF_sClear_update_tail,
       CAN_FIRE_RL_pciw_p2iAF_sInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_pciw_pci0_connect_trn_rx,
       CAN_FIRE_RL_pciw_pci0_connect_trn_tx,
       CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt,
       CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done,
       CAN_FIRE_RL_pciw_send_pciLinkup,
       CAN_FIRE_RL_pciw_tie_off_inputs,
       CAN_FIRE_RL_pciw_tie_off_inputs_1,
       CAN_FIRE_RL_pdev,
       CAN_FIRE_pcie_rxn,
       CAN_FIRE_pcie_rxp,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_dp0_assignControl,
       WILL_FIRE_RL_dp0_bml_cntLclDone,
       WILL_FIRE_RL_dp0_bml_cntLclStart,
       WILL_FIRE_RL_dp0_bml_cntRemDone,
       WILL_FIRE_RL_dp0_bml_cntRemStart,
       WILL_FIRE_RL_dp0_bml_crdAdvance,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_fabDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_fba,
       WILL_FIRE_RL_dp0_bml_initAccumulators,
       WILL_FIRE_RL_dp0_bml_lbar,
       WILL_FIRE_RL_dp0_bml_lbcf,
       WILL_FIRE_RL_dp0_bml_lclAdvance,
       WILL_FIRE_RL_dp0_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_lcredit,
       WILL_FIRE_RL_dp0_bml_remAdvance,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_remDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_remStart__dreg_update,
       WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_mkConnectionVtoAf,
       WILL_FIRE_RL_dp0_operating_actions,
       WILL_FIRE_RL_dp0_rBMesg,
       WILL_FIRE_RL_dp0_rBMesg_1,
       WILL_FIRE_RL_dp0_rBMeta,
       WILL_FIRE_RL_dp0_rBMeta_1,
       WILL_FIRE_RL_dp0_rCredit_1,
       WILL_FIRE_RL_dp0_rDone,
       WILL_FIRE_RL_dp0_rDone_1,
       WILL_FIRE_RL_dp0_rFFlow_1,
       WILL_FIRE_RL_dp0_rFMesg_1,
       WILL_FIRE_RL_dp0_rFMeta_1,
       WILL_FIRE_RL_dp0_rFRdy_1,
       WILL_FIRE_RL_dp0_rRdy,
       WILL_FIRE_RL_dp0_rRdy_1,
       WILL_FIRE_RL_dp0_rStart,
       WILL_FIRE_RL_dp0_rStart_1,
       WILL_FIRE_RL_dp0_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaTailEventSender,
       WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp0_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_dp0_tlp_read_FirstReq,
       WILL_FIRE_RL_dp0_tlp_read_FirstResp,
       WILL_FIRE_RL_dp0_tlp_read_NextReq,
       WILL_FIRE_RL_dp0_tlp_read_NextResp,
       WILL_FIRE_RL_dp0_tlp_remDone__dreg_update,
       WILL_FIRE_RL_dp0_tlp_remStart__dreg_update,
       WILL_FIRE_RL_dp0_tlp_tlpRcv,
       WILL_FIRE_RL_dp0_tlp_writeData,
       WILL_FIRE_RL_dp0_tlp_writeReq,
       WILL_FIRE_RL_dp0_wci_Es_doAlways_Req,
       WILL_FIRE_RL_dp0_wci_cfrd,
       WILL_FIRE_RL_dp0_wci_cfwr,
       WILL_FIRE_RL_dp0_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_dp0_wci_ctl_op_complete,
       WILL_FIRE_RL_dp0_wci_ctl_op_start,
       WILL_FIRE_RL_dp0_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wci_reqF_enq,
       WILL_FIRE_RL_dp0_wci_request_decode,
       WILL_FIRE_RL_dp0_wci_respF_both,
       WILL_FIRE_RL_dp0_wci_respF_decCtr,
       WILL_FIRE_RL_dp0_wci_respF_deq,
       WILL_FIRE_RL_dp0_wci_respF_incCtr,
       WILL_FIRE_RL_dp0_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_dp0_wci_sThreadBusy_reg,
       WILL_FIRE_RL_dp0_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_dp0_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_dp0_wmi_doDwell,
       WILL_FIRE_RL_dp0_wmi_doReadReq,
       WILL_FIRE_RL_dp0_wmi_doReadResp,
       WILL_FIRE_RL_dp0_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp0_wmi_doWriteReq,
       WILL_FIRE_RL_dp0_wmi_getRequest,
       WILL_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_dp0_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_dp0_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_dp0_wmi_reqMetadata,
       WILL_FIRE_RL_dp0_wmi_respMetadata,
       WILL_FIRE_RL_dp0_wmi_throttleWmi,
       WILL_FIRE_RL_dp0_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_dp0_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_deq,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_dp1_assignControl,
       WILL_FIRE_RL_dp1_bml_cntLclDone,
       WILL_FIRE_RL_dp1_bml_cntLclStart,
       WILL_FIRE_RL_dp1_bml_cntRemDone,
       WILL_FIRE_RL_dp1_bml_cntRemStart,
       WILL_FIRE_RL_dp1_bml_crdAdvance,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_fabDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_fba,
       WILL_FIRE_RL_dp1_bml_initAccumulators,
       WILL_FIRE_RL_dp1_bml_lbar,
       WILL_FIRE_RL_dp1_bml_lbcf,
       WILL_FIRE_RL_dp1_bml_lclAdvance,
       WILL_FIRE_RL_dp1_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_lcredit,
       WILL_FIRE_RL_dp1_bml_remAdvance,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_remDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_remStart__dreg_update,
       WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_mkConnectionVtoAf,
       WILL_FIRE_RL_dp1_operating_actions,
       WILL_FIRE_RL_dp1_rBMesg,
       WILL_FIRE_RL_dp1_rBMesg_1,
       WILL_FIRE_RL_dp1_rBMeta,
       WILL_FIRE_RL_dp1_rBMeta_1,
       WILL_FIRE_RL_dp1_rCredit_1,
       WILL_FIRE_RL_dp1_rDone,
       WILL_FIRE_RL_dp1_rDone_1,
       WILL_FIRE_RL_dp1_rFFlow_1,
       WILL_FIRE_RL_dp1_rFMesg_1,
       WILL_FIRE_RL_dp1_rFMeta_1,
       WILL_FIRE_RL_dp1_rFRdy_1,
       WILL_FIRE_RL_dp1_rRdy,
       WILL_FIRE_RL_dp1_rRdy_1,
       WILL_FIRE_RL_dp1_rStart,
       WILL_FIRE_RL_dp1_rStart_1,
       WILL_FIRE_RL_dp1_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaTailEventSender,
       WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_dp1_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_dp1_tlp_read_FirstReq,
       WILL_FIRE_RL_dp1_tlp_read_FirstResp,
       WILL_FIRE_RL_dp1_tlp_read_NextReq,
       WILL_FIRE_RL_dp1_tlp_read_NextResp,
       WILL_FIRE_RL_dp1_tlp_remDone__dreg_update,
       WILL_FIRE_RL_dp1_tlp_remStart__dreg_update,
       WILL_FIRE_RL_dp1_tlp_tlpRcv,
       WILL_FIRE_RL_dp1_tlp_writeData,
       WILL_FIRE_RL_dp1_tlp_writeReq,
       WILL_FIRE_RL_dp1_wci_Es_doAlways_Req,
       WILL_FIRE_RL_dp1_wci_cfrd,
       WILL_FIRE_RL_dp1_wci_cfwr,
       WILL_FIRE_RL_dp1_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_dp1_wci_ctl_op_complete,
       WILL_FIRE_RL_dp1_wci_ctl_op_start,
       WILL_FIRE_RL_dp1_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wci_reqF_enq,
       WILL_FIRE_RL_dp1_wci_request_decode,
       WILL_FIRE_RL_dp1_wci_respF_both,
       WILL_FIRE_RL_dp1_wci_respF_decCtr,
       WILL_FIRE_RL_dp1_wci_respF_deq,
       WILL_FIRE_RL_dp1_wci_respF_incCtr,
       WILL_FIRE_RL_dp1_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_dp1_wci_sThreadBusy_reg,
       WILL_FIRE_RL_dp1_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_dp1_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_dp1_wmi_doDwell,
       WILL_FIRE_RL_dp1_wmi_doReadReq,
       WILL_FIRE_RL_dp1_wmi_doReadResp,
       WILL_FIRE_RL_dp1_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp1_wmi_doWriteReq,
       WILL_FIRE_RL_dp1_wmi_getRequest,
       WILL_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_dp1_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_dp1_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_dp1_wmi_reqMetadata,
       WILL_FIRE_RL_dp1_wmi_respMetadata,
       WILL_FIRE_RL_dp1_wmi_throttleWmi,
       WILL_FIRE_RL_dp1_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_dp1_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_deq,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_noc_ClientServerRequest,
       WILL_FIRE_RL_noc_ClientServerRequest_1,
       WILL_FIRE_RL_noc_ClientServerResponse,
       WILL_FIRE_RL_noc_ClientServerResponse_1,
       WILL_FIRE_RL_noc_chomp_rogue,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_connect,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_every,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_connect,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_every,
       WILL_FIRE_RL_pciw_capture_pciDevice,
       WILL_FIRE_RL_pciw_connect_interrupt_1,
       WILL_FIRE_RL_pciw_connect_interrupt_do,
       WILL_FIRE_RL_pciw_connect_interrupt_mmenable,
       WILL_FIRE_RL_pciw_connect_interrupt_msienable,
       WILL_FIRE_RL_pciw_connect_interrupt_rdy_n,
       WILL_FIRE_RL_pciw_i2pAF_dClear_update_head,
       WILL_FIRE_RL_pciw_i2pAF_dInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_pciw_i2pAF_deq_update_head,
       WILL_FIRE_RL_pciw_i2pAF_enq_update_tail,
       WILL_FIRE_RL_pciw_i2pAF_reset_head,
       WILL_FIRE_RL_pciw_i2pAF_reset_tail,
       WILL_FIRE_RL_pciw_i2pAF_sClear_update_tail,
       WILL_FIRE_RL_pciw_i2pAF_sInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_pciw_p2iAF_dClear_update_head,
       WILL_FIRE_RL_pciw_p2iAF_dInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_pciw_p2iAF_deq_update_head,
       WILL_FIRE_RL_pciw_p2iAF_enq_update_tail,
       WILL_FIRE_RL_pciw_p2iAF_reset_head,
       WILL_FIRE_RL_pciw_p2iAF_reset_tail,
       WILL_FIRE_RL_pciw_p2iAF_sClear_update_tail,
       WILL_FIRE_RL_pciw_p2iAF_sInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_pciw_pci0_connect_trn_rx,
       WILL_FIRE_RL_pciw_pci0_connect_trn_tx,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_pciw_send_pciLinkup,
       WILL_FIRE_RL_pciw_tie_off_inputs,
       WILL_FIRE_RL_pciw_tie_off_inputs_1,
       WILL_FIRE_RL_pdev,
       WILL_FIRE_pcie_rxn,
       WILL_FIRE_pcie_rxp;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_2,
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2;
  reg [10 : 0] MUX_dp0_bram_memory$a_put_2__VAL_2,
	       MUX_dp0_bram_memory$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_2,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_2,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_4,
	       MUX_dp1_bram_memory$a_put_2__VAL_2,
	       MUX_dp1_bram_memory$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_2,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_2,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_4;
  wire [152 : 0] MUX_dp0_tlp_outF$enq_1__VAL_1,
		 MUX_dp0_tlp_outF$enq_1__VAL_2,
		 MUX_dp0_tlp_outF$enq_1__VAL_3,
		 MUX_dp0_tlp_outF$enq_1__VAL_4,
		 MUX_dp0_tlp_outF$enq_1__VAL_5,
		 MUX_dp1_tlp_outF$enq_1__VAL_1,
		 MUX_dp1_tlp_outF$enq_1__VAL_2,
		 MUX_dp1_tlp_outF$enq_1__VAL_3,
		 MUX_dp1_tlp_outF$enq_1__VAL_4,
		 MUX_dp1_tlp_outF$enq_1__VAL_5,
		 MUX_dp1_tlp_outF$enq_1__VAL_6,
		 MUX_pciw_p2iS$write_1__VAL_1,
		 MUX_pciw_p2iS$write_1__VAL_2;
  wire [138 : 0] MUX_dp0_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp0_tlp_mRespF$enq_1__VAL_2,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_2;
  wire [129 : 0] MUX_dp0_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_3,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_4,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_3;
  wire [128 : 0] MUX_dp0_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp0_wmi_mesgMeta$write_1__VAL_2,
		 MUX_dp1_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp1_wmi_mesgMeta$write_1__VAL_2;
  wire [81 : 0] MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1,
		MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1;
  wire [80 : 0] MUX_pciw_fI2P$enq_1__VAL_1;
  wire [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_1,
		MUX_dp0_wci_respF_q_1$write_1__VAL_1,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_2,
		MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1,
		MUX_dp1_wci_respF_q_0$write_1__VAL_1,
		MUX_dp1_wci_respF_q_1$write_1__VAL_1,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_2,
		MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
  wire [31 : 0] MUX_dp0_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp0_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp0_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp0_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp0_bram_memory$a_put_3__VAL_1,
		MUX_dp0_bram_memory$a_put_3__VAL_2,
		MUX_dp0_bram_memory$b_put_3__VAL_4,
		MUX_dp0_bram_memory_1$a_put_3__VAL_2,
		MUX_dp0_bram_memory_1$b_put_3__VAL_4,
		MUX_dp0_bram_memory_2$a_put_3__VAL_2,
		MUX_dp0_bram_memory_3$a_put_3__VAL_3,
		MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp0_wmi_mesgCount$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp1_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp1_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp1_bram_memory$a_put_3__VAL_1,
		MUX_dp1_bram_memory$a_put_3__VAL_2,
		MUX_dp1_bram_memory$b_put_3__VAL_4,
		MUX_dp1_bram_memory_1$a_put_3__VAL_2,
		MUX_dp1_bram_memory_1$b_put_3__VAL_4,
		MUX_dp1_bram_memory_2$a_put_3__VAL_2,
		MUX_dp1_bram_memory_3$a_put_3__VAL_3,
		MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_dp1_wmi_mesgCount$write_1__VAL_1;
  wire [16 : 0] MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2;
  wire [15 : 0] MUX_dp0_bml_crdBuf_value$write_1__VAL_3,
		MUX_dp0_bml_fabBuf_value$write_1__VAL_3,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp0_bml_lclBuf_value$write_1__VAL_3,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp0_bml_lclCredit$write_1__VAL_1,
		MUX_dp0_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp0_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp0_bml_remBuf_value$write_1__VAL_3,
		MUX_dp0_bml_remMesgAddr$write_1__VAL_2,
		MUX_dp0_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp0_tlp_remMesgAccu$write_1__VAL_2,
		MUX_dp1_bml_crdBuf_value$write_1__VAL_3,
		MUX_dp1_bml_fabBuf_value$write_1__VAL_3,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp1_bml_lclBuf_value$write_1__VAL_3,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp1_bml_lclCredit$write_1__VAL_1,
		MUX_dp1_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp1_bml_remBuf_value$write_1__VAL_3,
		MUX_dp1_bml_remMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp1_tlp_remMesgAccu$write_1__VAL_2;
  wire [13 : 0] MUX_dp0_wmi_addr$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2,
		MUX_dp1_wmi_addr$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainResp$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2;
  wire [12 : 0] MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_2;
  wire [10 : 0] MUX_dp0_bram_memory$b_put_2__VAL_1,
		MUX_dp1_bram_memory$b_put_2__VAL_1;
  wire [9 : 0] MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2;
  wire [3 : 0] MUX_dp0_tlp_postSeqDwell$write_1__VAL_1,
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1;
  wire [1 : 0] MUX_dp0_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp0_wmi_p4B$write_1__VAL_2,
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp1_wmi_p4B$write_1__VAL_2,
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2;
  wire MUX_dp0_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp0_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp0_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp0_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp0_bml_lclCredit$write_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_2,
       MUX_dp0_bram_memory$a_put_1__SEL_3,
       MUX_dp0_bram_memory$b_put_1__SEL_1,
       MUX_dp0_bram_memory$b_put_1__SEL_2,
       MUX_dp0_bram_memory_1$a_put_1__SEL_1,
       MUX_dp0_bram_memory_1$a_put_1__SEL_2,
       MUX_dp0_bram_memory_1$a_put_1__SEL_3,
       MUX_dp0_bram_memory_1$b_put_1__SEL_1,
       MUX_dp0_bram_memory_1$b_put_1__SEL_2,
       MUX_dp0_bram_memory_2$a_put_1__SEL_1,
       MUX_dp0_bram_memory_2$a_put_1__SEL_2,
       MUX_dp0_bram_memory_2$a_put_1__SEL_3,
       MUX_dp0_bram_memory_2$b_put_1__SEL_1,
       MUX_dp0_bram_memory_2$b_put_1__SEL_2,
       MUX_dp0_bram_memory_3$a_put_1__SEL_1,
       MUX_dp0_bram_memory_3$a_put_1__SEL_2,
       MUX_dp0_bram_memory_3$a_put_1__SEL_3,
       MUX_dp0_bram_memory_3$b_put_1__SEL_1,
       MUX_dp0_bram_memory_3$b_put_1__SEL_2,
       MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_dp0_tlp_mReqF$enq_1__SEL_1,
       MUX_dp0_tlp_mReqF$enq_1__SEL_4,
       MUX_dp0_tlp_postSeqDwell$write_1__SEL_2,
       MUX_dp0_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp0_tlp_readStarted$write_1__SEL_1,
       MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp0_wci_illegalEdge$write_1__SEL_1,
       MUX_dp0_wci_illegalEdge$write_1__SEL_2,
       MUX_dp0_wci_illegalEdge$write_1__VAL_2,
       MUX_dp0_wci_respF_q_0$write_1__SEL_2,
       MUX_dp0_wci_respF_q_1$write_1__SEL_2,
       MUX_dp0_wmi_bufDwell$write_1__SEL_1,
       MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_dp0_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp0_wmi_mesgBusy$write_1__SEL_1,
       MUX_dp0_wmi_rdActive$write_1__SEL_1,
       MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_dp0_wmi_wrActive$write_1__SEL_1,
       MUX_dp0_wmi_wrFinalize$write_1__SEL_1,
       MUX_dp1_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp1_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp1_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp1_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp1_bml_lclCredit$write_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_2,
       MUX_dp1_bram_memory$a_put_1__SEL_3,
       MUX_dp1_bram_memory$b_put_1__SEL_1,
       MUX_dp1_bram_memory$b_put_1__SEL_2,
       MUX_dp1_bram_memory_1$a_put_1__SEL_1,
       MUX_dp1_bram_memory_1$a_put_1__SEL_2,
       MUX_dp1_bram_memory_1$a_put_1__SEL_3,
       MUX_dp1_bram_memory_1$b_put_1__SEL_1,
       MUX_dp1_bram_memory_1$b_put_1__SEL_2,
       MUX_dp1_bram_memory_2$a_put_1__SEL_1,
       MUX_dp1_bram_memory_2$a_put_1__SEL_2,
       MUX_dp1_bram_memory_2$a_put_1__SEL_3,
       MUX_dp1_bram_memory_2$b_put_1__SEL_1,
       MUX_dp1_bram_memory_2$b_put_1__SEL_2,
       MUX_dp1_bram_memory_3$a_put_1__SEL_1,
       MUX_dp1_bram_memory_3$a_put_1__SEL_2,
       MUX_dp1_bram_memory_3$a_put_1__SEL_3,
       MUX_dp1_bram_memory_3$b_put_1__SEL_1,
       MUX_dp1_bram_memory_3$b_put_1__SEL_2,
       MUX_dp1_tlp_mReqF$enq_1__SEL_1,
       MUX_dp1_tlp_outDwRemain$write_1__SEL_1,
       MUX_dp1_tlp_postSeqDwell$write_1__SEL_2,
       MUX_dp1_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp1_tlp_readStarted$write_1__SEL_1,
       MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_dp1_wci_illegalEdge$write_1__SEL_1,
       MUX_dp1_wci_illegalEdge$write_1__SEL_2,
       MUX_dp1_wci_illegalEdge$write_1__VAL_2,
       MUX_dp1_wci_respF_q_0$write_1__SEL_2,
       MUX_dp1_wci_respF_q_1$write_1__SEL_2,
       MUX_dp1_wmi_bufDwell$write_1__SEL_1,
       MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_dp1_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp1_wmi_mesgBusy$write_1__SEL_1,
       MUX_dp1_wmi_rdActive$write_1__SEL_1,
       MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_dp1_wmi_wrActive$write_1__SEL_1,
       MUX_dp1_wmi_wrFinalize$write_1__SEL_1,
       MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1,
       MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1,
       MUX_pciw_p2iS$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h103076,
	       v__h103258,
	       v__h103413,
	       v__h107597,
	       v__h108606,
	       v__h112700,
	       v__h113046,
	       v__h113614,
	       v__h113965,
	       v__h115028,
	       v__h117762,
	       v__h117947,
	       v__h118113,
	       v__h125951,
	       v__h155257,
	       v__h162652,
	       v__h163026,
	       v__h163188,
	       v__h25788,
	       v__h25973,
	       v__h26128,
	       v__h40653,
	       v__h41005,
	       v__h42134,
	       v__h46238,
	       v__h46667,
	       v__h47172,
	       v__h47489,
	       v__h47688,
	       v__h48643,
	       v__h77948,
	       v__h85346,
	       v__h8548,
	       v__h85720,
	       v__h85882;
  reg [31 : 0] IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423,
	       IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428,
	       IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424,
	       IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429,
	       IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425,
	       IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430,
	       IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426,
	       IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431,
	       IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427,
	       IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432,
	       _theResult____h163172,
	       _theResult____h85866,
	       rdata__h156374,
	       rdata__h79065;
  reg [15 : 0] CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q23,
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q24;
  reg [1 : 0] lowAddr10__h138453,
	      lowAddr10__h61144,
	      x__h138575,
	      x__h138598,
	      x__h61266,
	      x__h61289;
  reg CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q17,
      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q29,
      CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q21,
      CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q26,
      CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q25,
      CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q15,
      CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q16,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q20,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q30,
      CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q22,
      CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q28,
      CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q27,
      CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q18,
      CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q19,
      IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1177,
      IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4329,
      IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3192,
      IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4349,
      IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1187,
      IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4359,
      IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3202,
      IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4362,
      IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1197,
      IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4330,
      IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3212,
      IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4350,
      IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1207,
      IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4331,
      IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3222,
      IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4351,
      IF_dp0_bml_dpControl_wget__928_BITS_1_TO_0_934_ETC___d2005,
      IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1403,
      IF_dp0_wmi_addr_760_BITS_3_TO_2_761_EQ_0_762_T_ETC___d4313,
      IF_dp0_wmi_p4B_814_EQ_1_817_THEN_dp0_bram_serv_ETC___d1823,
      IF_dp1_bml_dpControl_wget__943_BITS_1_TO_0_949_ETC___d4020,
      IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3418,
      IF_dp1_wmi_addr_775_BITS_3_TO_2_776_EQ_0_777_T_ETC___d4314,
      IF_dp1_wmi_p4B_829_EQ_1_832_THEN_dp1_bram_serv_ETC___d3838;
  wire [127 : 0] IF_dp0_tlp_readNxtDWAddr_340_BIT_0_511_THEN_dp_ETC___d1516,
		 IF_dp0_tlp_readNxtDWAddr_340_BIT_0_511_THEN_dp_ETC___d1521,
		 IF_dp1_tlp_readNxtDWAddr_355_BIT_0_526_THEN_dp_ETC___d3531,
		 IF_dp1_tlp_readNxtDWAddr_355_BIT_0_526_THEN_dp_ETC___d3536,
		 pkt__h126937,
		 pkt__h49628,
		 rdata__h143821,
		 rdata__h66512,
		 val_data__h5604,
		 wOut_data__h5710,
		 w_data__h113155,
		 w_data__h114134,
		 w_data__h115196,
		 w_data__h125083,
		 w_data__h40923,
		 w_data__h46574,
		 w_data__h47775;
  wire [31 : 0] dp0_bml_fabFlowAddr_967_PLUS_dp0_bml_fabFlowSi_ETC___d4875,
		dp1_bml_fabFlowAddr_982_PLUS_dp1_bml_fabFlowSi_ETC___d4876,
		mesgMeta_opcode__h154654,
		mesgMeta_opcode__h77345,
		nowLS__h109537,
		nowLS__h43081,
		nowMS__h109536,
		nowMS__h43080,
		opcode__h109535,
		opcode__h43079,
		rdat__h163251,
		rdat__h163259,
		rdat__h163267,
		rdat__h163275,
		rdat__h163283,
		rdat__h163291,
		rdat__h163299,
		rdat__h163320,
		rdat__h163325,
		rdat__h163336,
		rdat__h163341,
		rdat__h163402,
		rdat__h85945,
		rdat__h85953,
		rdat__h85961,
		rdat__h85969,
		rdat__h85977,
		rdat__h85985,
		rdat__h85993,
		rdat__h86014,
		rdat__h86019,
		rdat__h86030,
		rdat__h86035,
		rdat__h86096,
		rresp_data__h138497,
		rresp_data__h61188,
		x3__h154614,
		x3__h77305,
		x__h109598,
		x__h43111,
		y__h112885,
		y__h113303,
		y__h46389,
		y_avValue__h156210,
		y_avValue__h156230,
		y_avValue__h156250,
		y_avValue__h156270,
		y_avValue__h78901,
		y_avValue__h78921,
		y_avValue__h78941,
		y_avValue__h78961;
  wire [16 : 0] x__h112804,
		x__h46326,
		y__h112791,
		y__h112806,
		y__h46318,
		y__h46328,
		y__h47465;
  wire [15 : 0] val_be__h5603,
		wOut_be__h5709,
		w_be__h113708,
		w_be__h36227,
		x__h160395,
		x__h161519,
		x__h161524,
		x__h161596,
		x__h161601,
		x__h161638,
		x__h161643,
		x__h161676,
		x__h161681,
		x__h83089,
		x__h84213,
		x__h84218,
		x__h84290,
		x__h84295,
		x__h84332,
		x__h84337,
		x__h84370,
		x__h84375,
		y__h112933,
		y__h46787;
  wire [12 : 0] dp0_tlp_readNxtDWAddr_PLUS_1__q7,
		dp0_tlp_readNxtDWAddr_PLUS_2__q8,
		dp0_tlp_readNxtDWAddr_PLUS_3__q6,
		dp0_tlp_writeDWAddr_PLUS_1__q4,
		dp0_tlp_writeDWAddr_PLUS_2__q5,
		dp0_tlp_writeDWAddr_PLUS_3__q3,
		dp1_tlp_readNxtDWAddr_PLUS_1__q13,
		dp1_tlp_readNxtDWAddr_PLUS_2__q14,
		dp1_tlp_readNxtDWAddr_PLUS_3__q12,
		dp1_tlp_writeDWAddr_PLUS_1__q10,
		dp1_tlp_writeDWAddr_PLUS_2__q11,
		dp1_tlp_writeDWAddr_PLUS_3__q9,
		spanToNextPage__h112750,
		spanToNextPage__h46292,
		thisRequestLength__h112751,
		thisRequestLength__h46293;
  wire [11 : 0] byteCount__h138455,
		byteCount__h61146,
		x__h138566,
		x__h138568,
		x__h61257,
		x__h61259,
		y__h138567,
		y__h138569,
		y__h61258,
		y__h61260;
  wire [9 : 0] x__h113306, x__h46790, x__h47468;
  wire [7 : 0] rreq_tag__h112980, tag__h46568;
  wire [6 : 0] lowAddr__h138454, lowAddr__h61145;
  wire [3 : 0] lastBE__h113179, lastBE__h46595;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_40_PLUS_IF_dp0_b_ETC___d346,
	       dp0_bram_serverAdapterA_2_cnt_58_PLUS_IF_dp0_b_ETC___d464,
	       dp0_bram_serverAdapterA_3_cnt_76_PLUS_IF_dp0_b_ETC___d582,
	       dp0_bram_serverAdapterA_cnt_22_PLUS_IF_dp0_bra_ETC___d228,
	       dp0_bram_serverAdapterB_1_cnt_99_PLUS_IF_dp0_b_ETC___d405,
	       dp0_bram_serverAdapterB_2_cnt_17_PLUS_IF_dp0_b_ETC___d523,
	       dp0_bram_serverAdapterB_3_cnt_35_PLUS_IF_dp0_b_ETC___d641,
	       dp0_bram_serverAdapterB_cnt_81_PLUS_IF_dp0_bra_ETC___d287,
	       dp1_bram_serverAdapterA_1_cnt_344_PLUS_IF_dp1__ETC___d2350,
	       dp1_bram_serverAdapterA_2_cnt_462_PLUS_IF_dp1__ETC___d2468,
	       dp1_bram_serverAdapterA_3_cnt_580_PLUS_IF_dp1__ETC___d2586,
	       dp1_bram_serverAdapterA_cnt_226_PLUS_IF_dp1_br_ETC___d2232,
	       dp1_bram_serverAdapterB_1_cnt_403_PLUS_IF_dp1__ETC___d2409,
	       dp1_bram_serverAdapterB_2_cnt_521_PLUS_IF_dp1__ETC___d2527,
	       dp1_bram_serverAdapterB_3_cnt_639_PLUS_IF_dp1__ETC___d2645,
	       dp1_bram_serverAdapterB_cnt_285_PLUS_IF_dp1_br_ETC___d2291;
  wire [1 : 0] ab__h11911,
	       ab__h13310,
	       ab__h14840,
	       ab__h16237,
	       ab__h17767,
	       ab__h19164,
	       ab__h20694,
	       ab__h22091,
	       ab__h89205,
	       ab__h90604,
	       ab__h92134,
	       ab__h93531,
	       ab__h95061,
	       ab__h96458,
	       ab__h97988,
	       ab__h99385,
	       idx__h129276,
	       idx__h131499,
	       idx__h132795,
	       idx__h134091,
	       idx__h136339,
	       idx__h136807,
	       idx__h137180,
	       idx__h137553,
	       idx__h51967,
	       idx__h54190,
	       idx__h55486,
	       idx__h56782,
	       idx__h59030,
	       idx__h59498,
	       idx__h59871,
	       idx__h60244;
  wire IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1210,
       IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3225,
       IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1411,
       IF_dp0_wmi_p4B_814_EQ_0_815_THEN_dp0_bram_serv_ETC___d1828,
       IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3426,
       IF_dp1_wmi_p4B_829_EQ_0_830_THEN_dp1_bram_serv_ETC___d3843,
       NOT_dp0_bml_lclBufDone_952_019_AND_IF_dp0_bml__ETC___d2032,
       NOT_dp0_tlp_mRespF_first__085_BITS_71_TO_62_09_ETC___d1109,
       NOT_dp0_wmi_wrActive_732_733_OR_NOT_dp0_wmi_rd_ETC___d1742,
       NOT_dp1_bml_lclBufDone_967_034_AND_IF_dp1_bml__ETC___d4047,
       NOT_dp1_wmi_wrActive_747_748_OR_NOT_dp1_wmi_rd_ETC___d3757,
       _dfoo13,
       dp0_bml_crdBuf_value_910_EQ_dp0_bml_crdBuf_mod_ETC___d4999,
       dp0_bml_fabBuf_value_895_EQ_dp0_bml_fabBuf_mod_ETC___d5001,
       dp0_bml_lclBufDone_952_AND_IF_dp0_bml_dpContro_ETC___d4333,
       dp0_bml_lclBuf_value_865_EQ_dp0_bml_lclBuf_mod_ETC___d4998,
       dp0_bml_remBuf_value_880_EQ_dp0_bml_remBuf_mod_ETC___d5000,
       dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880,
       dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881,
       dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1474,
       dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882,
       dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879,
       dp0_bram_serverAdapterA_outDataCore_notEmpty___ETC___d1476,
       dp0_bram_serverAdapterB_1_cnt_99_SLT_3___d1673,
       dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1701,
       dp0_bram_serverAdapterB_2_cnt_17_SLT_3___d1674,
       dp0_bram_serverAdapterB_3_cnt_35_SLT_3___d1675,
       dp0_bram_serverAdapterB_cnt_81_SLT_3___d1672,
       dp0_tlp_dmaPullRemainDWLen_90_ULE_dp0_tlp_dmaP_ETC___d4877,
       dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878,
       dp0_tlp_dpControl_wget__32_BITS_3_TO_2_47_EQ_2_ETC___d1029,
       dp0_tlp_dpControl_wget__32_BITS_3_TO_2_47_EQ_2_ETC___d865,
       dp0_tlp_inF_first__89_BIT_152_040_AND_NOT_dp0__ETC___d1064,
       dp0_tlp_mReqF_i_notEmpty__128_AND_IF_dp0_tlp_m_ETC___d1144,
       dp0_tlp_outDwRemain_114_ULE_4___d4530,
       dp0_tlp_rdRespDwRemain_505_ULE_4___d1507,
       dp0_tlp_readRemainDWLen_337_ULE_4___d1338,
       dp0_tlp_readReq_i_notFull__303_AND_IF_dp0_tlp__ETC___d1314,
       dp0_tlp_writeRemainDWLen_164_ULE_1___d4292,
       dp0_tlp_writeRemainDWLen_164_ULE_2___d4274,
       dp0_tlp_writeRemainDWLen_164_ULE_3___d4293,
       dp0_wmi_dpControl_whas__659_AND_dp0_bram_serve_ETC___d1705,
       dp1_bml_crdBuf_value_925_EQ_dp1_bml_crdBuf_mod_ETC___d5052,
       dp1_bml_fabBuf_value_910_EQ_dp1_bml_fabBuf_mod_ETC___d5054,
       dp1_bml_lclBufDone_967_AND_IF_dp1_bml_dpContro_ETC___d4353,
       dp1_bml_lclBuf_value_880_EQ_dp1_bml_lclBuf_mod_ETC___d5051,
       dp1_bml_remBuf_value_895_EQ_dp1_bml_remBuf_mod_ETC___d5053,
       dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884,
       dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885,
       dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3489,
       dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886,
       dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883,
       dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3491,
       dp1_bram_serverAdapterB_1_cnt_403_SLT_3___d3688,
       dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3716,
       dp1_bram_serverAdapterB_2_cnt_521_SLT_3___d3689,
       dp1_bram_serverAdapterB_3_cnt_639_SLT_3___d3690,
       dp1_bram_serverAdapterB_cnt_285_SLT_3___d3687,
       dp1_tlp_dpControl_wget__831_BITS_3_TO_2_832_EQ_ETC___d2853,
       dp1_tlp_inF_first__072_BIT_152_073_AND_NOT_dp1_ETC___d3101,
       dp1_tlp_mReqF_i_notEmpty__143_AND_IF_dp1_tlp_m_ETC___d3159,
       dp1_tlp_mRespF_first__863_BITS_71_TO_62_954_ULE_1___d4275,
       dp1_tlp_outDwRemain_980_ULE_4___d4535,
       dp1_tlp_rdRespDwRemain_520_ULE_4___d3522,
       dp1_tlp_readRemainDWLen_352_ULE_4___d3353,
       dp1_tlp_readReq_i_notFull__318_AND_IF_dp1_tlp__ETC___d3329,
       dp1_tlp_writeRemainDWLen_179_ULE_1___d4288,
       dp1_tlp_writeRemainDWLen_179_ULE_2___d4310,
       dp1_tlp_writeRemainDWLen_179_ULE_3___d4277,
       dp1_wmi_dpControl_whas__674_AND_dp1_bram_serve_ETC___d3720,
       pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100;

  // oscillator and gates for output clock p125clk
  assign p125clk = pciw_pci0_pcie_ep$trn2_clk ;
  assign CLK_GATE_p125clk = 1'b1 ;

  // output resets
  assign RST_N_p125rst = pciw_p125rst$OUT_RST_N ;

  // action method pcie_rxp
  assign CAN_FIRE_pcie_rxp = 1'd1 ;
  assign WILL_FIRE_pcie_rxp = 1'd1 ;

  // action method pcie_rxn
  assign CAN_FIRE_pcie_rxn = 1'd1 ;
  assign WILL_FIRE_pcie_rxn = 1'd1 ;

  // value method pcie_txp
  assign pcie_txp = pciw_pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pciw_pci0_pcie_ep$pci_exp_txn ;

  // value method debug
  assign debug = { 31'd0, pciw_pciLinkUp$dD_OUT } ;

  // submodule cp
  mkOCCP cp(.pciDevice(pciDevice),
	    .CLK_sys0_clk(pciw_pci0_pcie_ep$trn2_clk),
	    .RST_N_sys0_rst(pciw_p125rst$OUT_RST_N),
	    .CLK(pciw_pci0_pcie_ep$trn2_clk),
	    .RST_N(pciw_p125rst$OUT_RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .led(),
	    .wci_Vm_0_MCmd(),
	    .wci_Vm_0_MAddrSpace(),
	    .wci_Vm_0_MByteEn(),
	    .wci_Vm_0_MAddr(),
	    .wci_Vm_0_MData(),
	    .wci_Vm_0_MFlag(),
	    .wci_Vm_1_MCmd(),
	    .wci_Vm_1_MAddrSpace(),
	    .wci_Vm_1_MByteEn(),
	    .wci_Vm_1_MAddr(),
	    .wci_Vm_1_MData(),
	    .wci_Vm_1_MFlag(),
	    .wci_Vm_2_MCmd(),
	    .wci_Vm_2_MAddrSpace(),
	    .wci_Vm_2_MByteEn(),
	    .wci_Vm_2_MAddr(),
	    .wci_Vm_2_MData(),
	    .wci_Vm_2_MFlag(),
	    .wci_Vm_3_MCmd(),
	    .wci_Vm_3_MAddrSpace(),
	    .wci_Vm_3_MByteEn(),
	    .wci_Vm_3_MAddr(),
	    .wci_Vm_3_MData(),
	    .wci_Vm_3_MFlag(),
	    .wci_Vm_4_MCmd(),
	    .wci_Vm_4_MAddrSpace(),
	    .wci_Vm_4_MByteEn(),
	    .wci_Vm_4_MAddr(),
	    .wci_Vm_4_MData(),
	    .wci_Vm_4_MFlag(),
	    .wci_Vm_5_MCmd(),
	    .wci_Vm_5_MAddrSpace(),
	    .wci_Vm_5_MByteEn(),
	    .wci_Vm_5_MAddr(),
	    .wci_Vm_5_MData(),
	    .wci_Vm_5_MFlag(),
	    .wci_Vm_6_MCmd(),
	    .wci_Vm_6_MAddrSpace(),
	    .wci_Vm_6_MByteEn(),
	    .wci_Vm_6_MAddr(),
	    .wci_Vm_6_MData(),
	    .wci_Vm_6_MFlag(),
	    .wci_Vm_7_MCmd(),
	    .wci_Vm_7_MAddrSpace(),
	    .wci_Vm_7_MByteEn(),
	    .wci_Vm_7_MAddr(),
	    .wci_Vm_7_MData(),
	    .wci_Vm_7_MFlag(),
	    .wci_Vm_8_MCmd(),
	    .wci_Vm_8_MAddrSpace(),
	    .wci_Vm_8_MByteEn(),
	    .wci_Vm_8_MAddr(),
	    .wci_Vm_8_MData(),
	    .wci_Vm_8_MFlag(),
	    .wci_Vm_9_MCmd(),
	    .wci_Vm_9_MAddrSpace(),
	    .wci_Vm_9_MByteEn(),
	    .wci_Vm_9_MAddr(),
	    .wci_Vm_9_MData(),
	    .wci_Vm_9_MFlag(),
	    .wci_Vm_10_MCmd(),
	    .wci_Vm_10_MAddrSpace(),
	    .wci_Vm_10_MByteEn(),
	    .wci_Vm_10_MAddr(),
	    .wci_Vm_10_MData(),
	    .wci_Vm_10_MFlag(),
	    .wci_Vm_11_MCmd(),
	    .wci_Vm_11_MAddrSpace(),
	    .wci_Vm_11_MByteEn(),
	    .wci_Vm_11_MAddr(),
	    .wci_Vm_11_MData(),
	    .wci_Vm_11_MFlag(),
	    .wci_Vm_12_MCmd(),
	    .wci_Vm_12_MAddrSpace(),
	    .wci_Vm_12_MByteEn(),
	    .wci_Vm_12_MAddr(),
	    .wci_Vm_12_MData(),
	    .wci_Vm_12_MFlag(),
	    .wci_Vm_13_MCmd(),
	    .wci_Vm_13_MAddrSpace(),
	    .wci_Vm_13_MByteEn(),
	    .wci_Vm_13_MAddr(),
	    .wci_Vm_13_MData(),
	    .wci_Vm_13_MFlag(),
	    .wci_Vm_14_MCmd(),
	    .wci_Vm_14_MAddrSpace(),
	    .wci_Vm_14_MByteEn(),
	    .wci_Vm_14_MAddr(),
	    .wci_Vm_14_MData(),
	    .wci_Vm_14_MFlag(),
	    .cpNow(),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(),
	    .RST_N_wci_Vm_0(),
	    .RST_N_wci_Vm_1(),
	    .RST_N_wci_Vm_2(),
	    .RST_N_wci_Vm_3(),
	    .RST_N_wci_Vm_4(),
	    .RST_N_wci_Vm_5(),
	    .RST_N_wci_Vm_6(),
	    .RST_N_wci_Vm_7(),
	    .RST_N_wci_Vm_8(),
	    .RST_N_wci_Vm_9(),
	    .RST_N_wci_Vm_10(),
	    .RST_N_wci_Vm_11(),
	    .RST_N_wci_Vm_12(),
	    .RST_N_wci_Vm_13(cp$RST_N_wci_Vm_13),
	    .RST_N_wci_Vm_14(cp$RST_N_wci_Vm_14));

  // submodule dp0_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
					      .CLKB(pciw_pci0_pcie_ep$trn2_clk),
					      .ADDRA(dp0_bram_memory$ADDRA),
					      .ADDRB(dp0_bram_memory$ADDRB),
					      .DIA(dp0_bram_memory$DIA),
					      .DIB(dp0_bram_memory$DIB),
					      .WEA(dp0_bram_memory$WEA),
					      .WEB(dp0_bram_memory$WEB),
					      .ENA(dp0_bram_memory$ENA),
					      .ENB(dp0_bram_memory$ENB),
					      .DOA(dp0_bram_memory$DOA),
					      .DOB(dp0_bram_memory$DOB));

  // submodule dp0_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_1(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
						.CLKB(pciw_pci0_pcie_ep$trn2_clk),
						.ADDRA(dp0_bram_memory_1$ADDRA),
						.ADDRB(dp0_bram_memory_1$ADDRB),
						.DIA(dp0_bram_memory_1$DIA),
						.DIB(dp0_bram_memory_1$DIB),
						.WEA(dp0_bram_memory_1$WEA),
						.WEB(dp0_bram_memory_1$WEB),
						.ENA(dp0_bram_memory_1$ENA),
						.ENB(dp0_bram_memory_1$ENB),
						.DOA(dp0_bram_memory_1$DOA),
						.DOB(dp0_bram_memory_1$DOB));

  // submodule dp0_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_2(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
						.CLKB(pciw_pci0_pcie_ep$trn2_clk),
						.ADDRA(dp0_bram_memory_2$ADDRA),
						.ADDRB(dp0_bram_memory_2$ADDRB),
						.DIA(dp0_bram_memory_2$DIA),
						.DIB(dp0_bram_memory_2$DIB),
						.WEA(dp0_bram_memory_2$WEA),
						.WEB(dp0_bram_memory_2$WEB),
						.ENA(dp0_bram_memory_2$ENA),
						.ENB(dp0_bram_memory_2$ENB),
						.DOA(dp0_bram_memory_2$DOA),
						.DOB(dp0_bram_memory_2$DOB));

  // submodule dp0_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_3(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
						.CLKB(pciw_pci0_pcie_ep$trn2_clk),
						.ADDRA(dp0_bram_memory_3$ADDRA),
						.ADDRB(dp0_bram_memory_3$ADDRB),
						.DIA(dp0_bram_memory_3$DIA),
						.DIB(dp0_bram_memory_3$DIB),
						.WEA(dp0_bram_memory_3$WEA),
						.WEB(dp0_bram_memory_3$WEB),
						.ENA(dp0_bram_memory_3$ENA),
						.ENB(dp0_bram_memory_3$ENB),
						.DOA(dp0_bram_memory_3$DOA),
						.DOB(dp0_bram_memory_3$DOB));

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp0_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp0_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp0_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								   .CLK(pciw_pci0_pcie_ep$trn2_clk),
								   .D_IN(dp0_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp0_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp0_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp0_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_13),
								   .CLK(pciw_pci0_pcie_ep$trn2_clk),
								   .D_IN(dp0_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp0_tlp_inF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) dp0_tlp_inF(.RST_N(cp$RST_N_wci_Vm_13),
				       .CLK(pciw_pci0_pcie_ep$trn2_clk),
				       .D_IN(dp0_tlp_inF$D_IN),
				       .ENQ(dp0_tlp_inF$ENQ),
				       .DEQ(dp0_tlp_inF$DEQ),
				       .CLR(dp0_tlp_inF$CLR),
				       .D_OUT(dp0_tlp_inF$D_OUT),
				       .FULL_N(dp0_tlp_inF$FULL_N),
				       .EMPTY_N(dp0_tlp_inF$EMPTY_N));

  // submodule dp0_tlp_mReqF
  FIFO2 #(.width(32'd130),
	  .guarded(32'd1)) dp0_tlp_mReqF(.RST_N(cp$RST_N_wci_Vm_13),
					 .CLK(pciw_pci0_pcie_ep$trn2_clk),
					 .D_IN(dp0_tlp_mReqF$D_IN),
					 .ENQ(dp0_tlp_mReqF$ENQ),
					 .DEQ(dp0_tlp_mReqF$DEQ),
					 .CLR(dp0_tlp_mReqF$CLR),
					 .D_OUT(dp0_tlp_mReqF$D_OUT),
					 .FULL_N(dp0_tlp_mReqF$FULL_N),
					 .EMPTY_N(dp0_tlp_mReqF$EMPTY_N));

  // submodule dp0_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp0_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_13),
					  .CLK(pciw_pci0_pcie_ep$trn2_clk),
					  .D_IN(dp0_tlp_mRespF$D_IN),
					  .ENQ(dp0_tlp_mRespF$ENQ),
					  .DEQ(dp0_tlp_mRespF$DEQ),
					  .CLR(dp0_tlp_mRespF$CLR),
					  .D_OUT(dp0_tlp_mRespF$D_OUT),
					  .FULL_N(dp0_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp0_tlp_mRespF$EMPTY_N));

  // submodule dp0_tlp_outF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) dp0_tlp_outF(.RST_N(cp$RST_N_wci_Vm_13),
					.CLK(pciw_pci0_pcie_ep$trn2_clk),
					.D_IN(dp0_tlp_outF$D_IN),
					.ENQ(dp0_tlp_outF$ENQ),
					.DEQ(dp0_tlp_outF$DEQ),
					.CLR(dp0_tlp_outF$CLR),
					.D_OUT(dp0_tlp_outF$D_OUT),
					.FULL_N(dp0_tlp_outF$FULL_N),
					.EMPTY_N(dp0_tlp_outF$EMPTY_N));

  // submodule dp0_tlp_readReq
  FIFO2 #(.width(32'd60),
	  .guarded(32'd1)) dp0_tlp_readReq(.RST_N(cp$RST_N_wci_Vm_13),
					   .CLK(pciw_pci0_pcie_ep$trn2_clk),
					   .D_IN(dp0_tlp_readReq$D_IN),
					   .ENQ(dp0_tlp_readReq$ENQ),
					   .DEQ(dp0_tlp_readReq$DEQ),
					   .CLR(dp0_tlp_readReq$CLR),
					   .D_OUT(dp0_tlp_readReq$D_OUT),
					   .FULL_N(dp0_tlp_readReq$FULL_N),
					   .EMPTY_N(dp0_tlp_readReq$EMPTY_N));

  // submodule dp0_tlp_tailEventF
  FIFO20 #(.guarded(32'd1)) dp0_tlp_tailEventF(.RST_N(cp$RST_N_wci_Vm_13),
					       .CLK(pciw_pci0_pcie_ep$trn2_clk),
					       .ENQ(dp0_tlp_tailEventF$ENQ),
					       .DEQ(dp0_tlp_tailEventF$DEQ),
					       .CLR(dp0_tlp_tailEventF$CLR),
					       .FULL_N(dp0_tlp_tailEventF$FULL_N),
					       .EMPTY_N(dp0_tlp_tailEventF$EMPTY_N));

  // submodule dp0_wci_isReset
  ResetToBool dp0_wci_isReset(.RST(cp$RST_N_wci_Vm_13), .VAL());

  // submodule dp0_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wci_reqF(.RST_N(cp$RST_N_wci_Vm_13),
					    .CLK(pciw_pci0_pcie_ep$trn2_clk),
					    .D_IN(dp0_wci_reqF$D_IN),
					    .ENQ(dp0_wci_reqF$ENQ),
					    .DEQ(dp0_wci_reqF$DEQ),
					    .CLR(dp0_wci_reqF$CLR),
					    .D_OUT(dp0_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp0_wci_reqF$EMPTY_N));

  // submodule dp0_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_13),
					       .CLK(pciw_pci0_pcie_ep$trn2_clk),
					       .D_IN(dp0_wmi_wmi_dhF$D_IN),
					       .ENQ(dp0_wmi_wmi_dhF$ENQ),
					       .DEQ(dp0_wmi_wmi_dhF$DEQ),
					       .CLR(dp0_wmi_wmi_dhF$CLR),
					       .D_OUT(dp0_wmi_wmi_dhF$D_OUT),
					       .FULL_N(),
					       .EMPTY_N(dp0_wmi_wmi_dhF$EMPTY_N));

  // submodule dp0_wmi_wmi_isReset
  ResetToBool dp0_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_13), .VAL());

  // submodule dp0_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_13),
						  .CLK(pciw_pci0_pcie_ep$trn2_clk),
						  .D_IN(dp0_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp0_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp0_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp0_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp0_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(dp0_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp0_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_13),
						.CLK(pciw_pci0_pcie_ep$trn2_clk),
						.D_IN(dp0_wmi_wmi_reqF$D_IN),
						.ENQ(dp0_wmi_wmi_reqF$ENQ),
						.DEQ(dp0_wmi_wmi_reqF$DEQ),
						.CLR(dp0_wmi_wmi_reqF$CLR),
						.D_OUT(dp0_wmi_wmi_reqF$D_OUT),
						.FULL_N(),
						.EMPTY_N(dp0_wmi_wmi_reqF$EMPTY_N));

  // submodule dp0_wti_isReset
  ResetToBool dp0_wti_isReset(.RST(cp$RST_N_wci_Vm_13), .VAL());

  // submodule dp1_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
					      .CLKB(pciw_pci0_pcie_ep$trn2_clk),
					      .ADDRA(dp1_bram_memory$ADDRA),
					      .ADDRB(dp1_bram_memory$ADDRB),
					      .DIA(dp1_bram_memory$DIA),
					      .DIB(dp1_bram_memory$DIB),
					      .WEA(dp1_bram_memory$WEA),
					      .WEB(dp1_bram_memory$WEB),
					      .ENA(dp1_bram_memory$ENA),
					      .ENB(dp1_bram_memory$ENB),
					      .DOA(dp1_bram_memory$DOA),
					      .DOB(dp1_bram_memory$DOB));

  // submodule dp1_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_1(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
						.CLKB(pciw_pci0_pcie_ep$trn2_clk),
						.ADDRA(dp1_bram_memory_1$ADDRA),
						.ADDRB(dp1_bram_memory_1$ADDRB),
						.DIA(dp1_bram_memory_1$DIA),
						.DIB(dp1_bram_memory_1$DIB),
						.WEA(dp1_bram_memory_1$WEA),
						.WEB(dp1_bram_memory_1$WEB),
						.ENA(dp1_bram_memory_1$ENA),
						.ENB(dp1_bram_memory_1$ENB),
						.DOA(dp1_bram_memory_1$DOA),
						.DOB(dp1_bram_memory_1$DOB));

  // submodule dp1_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_2(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
						.CLKB(pciw_pci0_pcie_ep$trn2_clk),
						.ADDRA(dp1_bram_memory_2$ADDRA),
						.ADDRB(dp1_bram_memory_2$ADDRB),
						.DIA(dp1_bram_memory_2$DIA),
						.DIB(dp1_bram_memory_2$DIB),
						.WEA(dp1_bram_memory_2$WEA),
						.WEB(dp1_bram_memory_2$WEB),
						.ENA(dp1_bram_memory_2$ENA),
						.ENB(dp1_bram_memory_2$ENB),
						.DOA(dp1_bram_memory_2$DOA),
						.DOB(dp1_bram_memory_2$DOB));

  // submodule dp1_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_3(.CLKA(pciw_pci0_pcie_ep$trn2_clk),
						.CLKB(pciw_pci0_pcie_ep$trn2_clk),
						.ADDRA(dp1_bram_memory_3$ADDRA),
						.ADDRB(dp1_bram_memory_3$ADDRB),
						.DIA(dp1_bram_memory_3$DIA),
						.DIB(dp1_bram_memory_3$DIB),
						.WEA(dp1_bram_memory_3$WEA),
						.WEB(dp1_bram_memory_3$WEB),
						.ENA(dp1_bram_memory_3$ENA),
						.ENB(dp1_bram_memory_3$ENB),
						.DOA(dp1_bram_memory_3$DOA),
						.DOB(dp1_bram_memory_3$DOB));

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp1_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp1_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp1_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								   .CLK(pciw_pci0_pcie_ep$trn2_clk),
								   .D_IN(dp1_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp1_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp1_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								     .CLK(pciw_pci0_pcie_ep$trn2_clk),
								     .D_IN(dp1_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_14),
								   .CLK(pciw_pci0_pcie_ep$trn2_clk),
								   .D_IN(dp1_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp1_tlp_inF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) dp1_tlp_inF(.RST_N(cp$RST_N_wci_Vm_14),
				       .CLK(pciw_pci0_pcie_ep$trn2_clk),
				       .D_IN(dp1_tlp_inF$D_IN),
				       .ENQ(dp1_tlp_inF$ENQ),
				       .DEQ(dp1_tlp_inF$DEQ),
				       .CLR(dp1_tlp_inF$CLR),
				       .D_OUT(dp1_tlp_inF$D_OUT),
				       .FULL_N(dp1_tlp_inF$FULL_N),
				       .EMPTY_N(dp1_tlp_inF$EMPTY_N));

  // submodule dp1_tlp_mReqF
  FIFO2 #(.width(32'd130),
	  .guarded(32'd1)) dp1_tlp_mReqF(.RST_N(cp$RST_N_wci_Vm_14),
					 .CLK(pciw_pci0_pcie_ep$trn2_clk),
					 .D_IN(dp1_tlp_mReqF$D_IN),
					 .ENQ(dp1_tlp_mReqF$ENQ),
					 .DEQ(dp1_tlp_mReqF$DEQ),
					 .CLR(dp1_tlp_mReqF$CLR),
					 .D_OUT(dp1_tlp_mReqF$D_OUT),
					 .FULL_N(dp1_tlp_mReqF$FULL_N),
					 .EMPTY_N(dp1_tlp_mReqF$EMPTY_N));

  // submodule dp1_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp1_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_14),
					  .CLK(pciw_pci0_pcie_ep$trn2_clk),
					  .D_IN(dp1_tlp_mRespF$D_IN),
					  .ENQ(dp1_tlp_mRespF$ENQ),
					  .DEQ(dp1_tlp_mRespF$DEQ),
					  .CLR(dp1_tlp_mRespF$CLR),
					  .D_OUT(dp1_tlp_mRespF$D_OUT),
					  .FULL_N(dp1_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp1_tlp_mRespF$EMPTY_N));

  // submodule dp1_tlp_outF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) dp1_tlp_outF(.RST_N(cp$RST_N_wci_Vm_14),
					.CLK(pciw_pci0_pcie_ep$trn2_clk),
					.D_IN(dp1_tlp_outF$D_IN),
					.ENQ(dp1_tlp_outF$ENQ),
					.DEQ(dp1_tlp_outF$DEQ),
					.CLR(dp1_tlp_outF$CLR),
					.D_OUT(dp1_tlp_outF$D_OUT),
					.FULL_N(dp1_tlp_outF$FULL_N),
					.EMPTY_N(dp1_tlp_outF$EMPTY_N));

  // submodule dp1_tlp_readReq
  FIFO2 #(.width(32'd60),
	  .guarded(32'd1)) dp1_tlp_readReq(.RST_N(cp$RST_N_wci_Vm_14),
					   .CLK(pciw_pci0_pcie_ep$trn2_clk),
					   .D_IN(dp1_tlp_readReq$D_IN),
					   .ENQ(dp1_tlp_readReq$ENQ),
					   .DEQ(dp1_tlp_readReq$DEQ),
					   .CLR(dp1_tlp_readReq$CLR),
					   .D_OUT(dp1_tlp_readReq$D_OUT),
					   .FULL_N(dp1_tlp_readReq$FULL_N),
					   .EMPTY_N(dp1_tlp_readReq$EMPTY_N));

  // submodule dp1_tlp_tailEventF
  FIFO20 #(.guarded(32'd1)) dp1_tlp_tailEventF(.RST_N(cp$RST_N_wci_Vm_14),
					       .CLK(pciw_pci0_pcie_ep$trn2_clk),
					       .ENQ(dp1_tlp_tailEventF$ENQ),
					       .DEQ(dp1_tlp_tailEventF$DEQ),
					       .CLR(dp1_tlp_tailEventF$CLR),
					       .FULL_N(dp1_tlp_tailEventF$FULL_N),
					       .EMPTY_N(dp1_tlp_tailEventF$EMPTY_N));

  // submodule dp1_wci_isReset
  ResetToBool dp1_wci_isReset(.RST(cp$RST_N_wci_Vm_14), .VAL());

  // submodule dp1_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wci_reqF(.RST_N(cp$RST_N_wci_Vm_14),
					    .CLK(pciw_pci0_pcie_ep$trn2_clk),
					    .D_IN(dp1_wci_reqF$D_IN),
					    .ENQ(dp1_wci_reqF$ENQ),
					    .DEQ(dp1_wci_reqF$DEQ),
					    .CLR(dp1_wci_reqF$CLR),
					    .D_OUT(dp1_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp1_wci_reqF$EMPTY_N));

  // submodule dp1_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_14),
					       .CLK(pciw_pci0_pcie_ep$trn2_clk),
					       .D_IN(dp1_wmi_wmi_dhF$D_IN),
					       .ENQ(dp1_wmi_wmi_dhF$ENQ),
					       .DEQ(dp1_wmi_wmi_dhF$DEQ),
					       .CLR(dp1_wmi_wmi_dhF$CLR),
					       .D_OUT(dp1_wmi_wmi_dhF$D_OUT),
					       .FULL_N(),
					       .EMPTY_N(dp1_wmi_wmi_dhF$EMPTY_N));

  // submodule dp1_wmi_wmi_isReset
  ResetToBool dp1_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_14), .VAL());

  // submodule dp1_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_14),
						  .CLK(pciw_pci0_pcie_ep$trn2_clk),
						  .D_IN(dp1_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp1_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp1_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp1_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp1_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(dp1_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp1_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_14),
						.CLK(pciw_pci0_pcie_ep$trn2_clk),
						.D_IN(dp1_wmi_wmi_reqF$D_IN),
						.ENQ(dp1_wmi_wmi_reqF$ENQ),
						.DEQ(dp1_wmi_wmi_reqF$DEQ),
						.CLR(dp1_wmi_wmi_reqF$CLR),
						.D_OUT(dp1_wmi_wmi_reqF$D_OUT),
						.FULL_N(),
						.EMPTY_N(dp1_wmi_wmi_reqF$EMPTY_N));

  // submodule dp1_wti_isReset
  ResetToBool dp1_wti_isReset(.RST(cp$RST_N_wci_Vm_14), .VAL());

  // submodule noc_sm0
  mkTLPSM noc_sm0(.pfk(14'd1360),
		  .CLK(pciw_pci0_pcie_ep$trn2_clk),
		  .RST_N(pciw_p125rst$OUT_RST_N),
		  .c0_response_put(noc_sm0$c0_response_put),
		  .c1_response_put(noc_sm0$c1_response_put),
		  .s_request_put(noc_sm0$s_request_put),
		  .EN_s_request_put(noc_sm0$EN_s_request_put),
		  .EN_s_response_get(noc_sm0$EN_s_response_get),
		  .EN_c0_request_get(noc_sm0$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm0$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm0$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm0$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm0$RDY_s_request_put),
		  .s_response_get(noc_sm0$s_response_get),
		  .RDY_s_response_get(noc_sm0$RDY_s_response_get),
		  .c0_request_get(noc_sm0$c0_request_get),
		  .RDY_c0_request_get(noc_sm0$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm0$RDY_c0_response_put),
		  .c1_request_get(noc_sm0$c1_request_get),
		  .RDY_c1_request_get(noc_sm0$RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm0$RDY_c1_response_put));

  // submodule noc_sm1
  mkTLPSM noc_sm1(.pfk(14'd9488),
		  .CLK(pciw_pci0_pcie_ep$trn2_clk),
		  .RST_N(pciw_p125rst$OUT_RST_N),
		  .c0_response_put(noc_sm1$c0_response_put),
		  .c1_response_put(noc_sm1$c1_response_put),
		  .s_request_put(noc_sm1$s_request_put),
		  .EN_s_request_put(noc_sm1$EN_s_request_put),
		  .EN_s_response_get(noc_sm1$EN_s_response_get),
		  .EN_c0_request_get(noc_sm1$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm1$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm1$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm1$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm1$RDY_s_request_put),
		  .s_response_get(noc_sm1$s_response_get),
		  .RDY_s_response_get(noc_sm1$RDY_s_response_get),
		  .c0_request_get(noc_sm1$c0_request_get),
		  .RDY_c0_request_get(noc_sm1$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm1$RDY_c0_response_put),
		  .c1_request_get(noc_sm1$c1_request_get),
		  .RDY_c1_request_get(noc_sm1$RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm1$RDY_c1_response_put));

  // submodule noc_sm2
  mkTLPSM noc_sm2(.pfk(14'd9497),
		  .CLK(pciw_pci0_pcie_ep$trn2_clk),
		  .RST_N(pciw_p125rst$OUT_RST_N),
		  .c0_response_put(noc_sm2$c0_response_put),
		  .c1_response_put(noc_sm2$c1_response_put),
		  .s_request_put(noc_sm2$s_request_put),
		  .EN_s_request_put(noc_sm2$EN_s_request_put),
		  .EN_s_response_get(noc_sm2$EN_s_response_get),
		  .EN_c0_request_get(noc_sm2$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm2$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm2$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm2$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm2$RDY_s_request_put),
		  .s_response_get(noc_sm2$s_response_get),
		  .RDY_s_response_get(noc_sm2$RDY_s_response_get),
		  .c0_request_get(noc_sm2$c0_request_get),
		  .RDY_c0_request_get(noc_sm2$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm2$RDY_c0_response_put),
		  .c1_request_get(),
		  .RDY_c1_request_get(noc_sm2$RDY_c1_request_get),
		  .RDY_c1_response_put());

  // submodule pciw_fI2P
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pciw_fI2P(.RST_N(pciw_p250rst$OUT_RST_N),
					 .CLK(pciw_pci0_pcie_ep$trn_clk),
					 .D_IN(pciw_fI2P$D_IN),
					 .ENQ(pciw_fI2P$ENQ),
					 .DEQ(pciw_fI2P$DEQ),
					 .CLR(pciw_fI2P$CLR),
					 .D_OUT(pciw_fI2P$D_OUT),
					 .FULL_N(pciw_fI2P$FULL_N),
					 .EMPTY_N(pciw_fI2P$EMPTY_N));

  // submodule pciw_fP2I
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pciw_fP2I(.RST_N(pciw_p250rst$OUT_RST_N),
					 .CLK(pciw_pci0_pcie_ep$trn_clk),
					 .D_IN(pciw_fP2I$D_IN),
					 .ENQ(pciw_fP2I$ENQ),
					 .DEQ(pciw_fP2I$DEQ),
					 .CLR(pciw_fP2I$CLR),
					 .D_OUT(pciw_fP2I$D_OUT),
					 .FULL_N(pciw_fP2I$FULL_N),
					 .EMPTY_N(pciw_fP2I$EMPTY_N));

  // submodule pciw_i2pAF_dCombinedReset
  ResetEither pciw_i2pAF_dCombinedReset(.A_RST(pciw_p250rst$OUT_RST_N),
					.B_RST(pciw_i2pAF_dCrossedsReset$OUT_RST_N),
					.RST_OUT(pciw_i2pAF_dCombinedReset$RST_OUT));

  // submodule pciw_i2pAF_dCrossedsReset
  SyncReset0 pciw_i2pAF_dCrossedsReset(.IN_RST_N(pciw_p125rst$OUT_RST_N),
				       .OUT_RST_N(pciw_i2pAF_dCrossedsReset$OUT_RST_N));

  // submodule pciw_i2pAF_sCombinedReset
  ResetEither pciw_i2pAF_sCombinedReset(.A_RST(pciw_p125rst$OUT_RST_N),
					.B_RST(pciw_i2pAF_sCrosseddReset$OUT_RST_N),
					.RST_OUT(pciw_i2pAF_sCombinedReset$RST_OUT));

  // submodule pciw_i2pAF_sCrosseddReset
  SyncReset0 pciw_i2pAF_sCrosseddReset(.IN_RST_N(pciw_p250rst$OUT_RST_N),
				       .OUT_RST_N(pciw_i2pAF_sCrosseddReset$OUT_RST_N));

  // submodule pciw_p125rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p125rst(.CLK(pciw_pci0_pcie_ep$trn2_clk),
					      .IN_RST_N(pciw_pci0_pcie_ep$trn_reset_n),
					      .OUT_RST_N(pciw_p125rst$OUT_RST_N));

  // submodule pciw_p250rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p250rst(.CLK(pciw_pci0_pcie_ep$trn_clk),
					      .IN_RST_N(pciw_pci0_pcie_ep$trn_reset_n),
					      .OUT_RST_N(pciw_p250rst$OUT_RST_N));

  // submodule pciw_p2iAF_dCombinedReset
  ResetEither pciw_p2iAF_dCombinedReset(.A_RST(pciw_p125rst$OUT_RST_N),
					.B_RST(pciw_p2iAF_dCrossedsReset$OUT_RST_N),
					.RST_OUT(pciw_p2iAF_dCombinedReset$RST_OUT));

  // submodule pciw_p2iAF_dCrossedsReset
  SyncReset0 pciw_p2iAF_dCrossedsReset(.IN_RST_N(pciw_p250rst$OUT_RST_N),
				       .OUT_RST_N(pciw_p2iAF_dCrossedsReset$OUT_RST_N));

  // submodule pciw_p2iAF_sCombinedReset
  ResetEither pciw_p2iAF_sCombinedReset(.A_RST(pciw_p250rst$OUT_RST_N),
					.B_RST(pciw_p2iAF_sCrosseddReset$OUT_RST_N),
					.RST_OUT(pciw_p2iAF_sCombinedReset$RST_OUT));

  // submodule pciw_p2iAF_sCrosseddReset
  SyncReset0 pciw_p2iAF_sCrosseddReset(.IN_RST_N(pciw_p125rst$OUT_RST_N),
				       .OUT_RST_N(pciw_p2iAF_sCrosseddReset$OUT_RST_N));

  // submodule pciw_pci0_clk
  IBUFDS_GTXE1 pciw_pci0_clk(.I(pci0_clkp),
			     .IB(pci0_clkn),
			     .CEB(1'd0),
			     .O(pciw_pci0_clk$O),
			     .ODIV2());

  // submodule pciw_pci0_pcie_ep
  xilinx_v6_pcie_wrapper #(.PL_FAST_TRAIN("FALSE")) pciw_pci0_pcie_ep(.sys_clk(pciw_pci0_clk$O),
								      .sys_reset_n(pciw_pci0_rst$O),
								      .cfg_byte_en_n(pciw_pci0_pcie_ep$cfg_byte_en_n),
								      .cfg_di(pciw_pci0_pcie_ep$cfg_di),
								      .cfg_dsn(pciw_pci0_pcie_ep$cfg_dsn),
								      .cfg_dwaddr(pciw_pci0_pcie_ep$cfg_dwaddr),
								      .cfg_err_cor_n(pciw_pci0_pcie_ep$cfg_err_cor_n),
								      .cfg_err_cpl_abort_n(pciw_pci0_pcie_ep$cfg_err_cpl_abort_n),
								      .cfg_err_cpl_timeout_n(pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n),
								      .cfg_err_cpl_unexpect_n(pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n),
								      .cfg_err_ecrc_n(pciw_pci0_pcie_ep$cfg_err_ecrc_n),
								      .cfg_err_locked_n(pciw_pci0_pcie_ep$cfg_err_locked_n),
								      .cfg_err_posted_n(pciw_pci0_pcie_ep$cfg_err_posted_n),
								      .cfg_err_tlp_cpl_header(pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header),
								      .cfg_err_ur_n(pciw_pci0_pcie_ep$cfg_err_ur_n),
								      .cfg_interrupt_assert_n(pciw_pci0_pcie_ep$cfg_interrupt_assert_n),
								      .cfg_interrupt_di(pciw_pci0_pcie_ep$cfg_interrupt_di),
								      .cfg_interrupt_n(pciw_pci0_pcie_ep$cfg_interrupt_n),
								      .cfg_pm_wake_n(pciw_pci0_pcie_ep$cfg_pm_wake_n),
								      .cfg_rd_en_n(pciw_pci0_pcie_ep$cfg_rd_en_n),
								      .cfg_trn_pending_n(pciw_pci0_pcie_ep$cfg_trn_pending_n),
								      .cfg_turnoff_ok_n(pciw_pci0_pcie_ep$cfg_turnoff_ok_n),
								      .cfg_wr_en_n(pciw_pci0_pcie_ep$cfg_wr_en_n),
								      .pci_exp_rxn(pciw_pci0_pcie_ep$pci_exp_rxn),
								      .pci_exp_rxp(pciw_pci0_pcie_ep$pci_exp_rxp),
								      .pl_directed_link_auton(pciw_pci0_pcie_ep$pl_directed_link_auton),
								      .pl_directed_link_change(pciw_pci0_pcie_ep$pl_directed_link_change),
								      .pl_directed_link_speed(pciw_pci0_pcie_ep$pl_directed_link_speed),
								      .pl_directed_link_width(pciw_pci0_pcie_ep$pl_directed_link_width),
								      .pl_upstream_prefer_deemph(pciw_pci0_pcie_ep$pl_upstream_prefer_deemph),
								      .trn_fc_sel(pciw_pci0_pcie_ep$trn_fc_sel),
								      .trn_rdst_rdy_n(pciw_pci0_pcie_ep$trn_rdst_rdy_n),
								      .trn_rnp_ok_n(pciw_pci0_pcie_ep$trn_rnp_ok_n),
								      .trn_tcfg_gnt_n(pciw_pci0_pcie_ep$trn_tcfg_gnt_n),
								      .trn_td(pciw_pci0_pcie_ep$trn_td),
								      .trn_teof_n(pciw_pci0_pcie_ep$trn_teof_n),
								      .trn_terrfwd_n(pciw_pci0_pcie_ep$trn_terrfwd_n),
								      .trn_trem_n(pciw_pci0_pcie_ep$trn_trem_n),
								      .trn_tsof_n(pciw_pci0_pcie_ep$trn_tsof_n),
								      .trn_tsrc_dsc_n(pciw_pci0_pcie_ep$trn_tsrc_dsc_n),
								      .trn_tsrc_rdy_n(pciw_pci0_pcie_ep$trn_tsrc_rdy_n),
								      .trn_tstr_n(pciw_pci0_pcie_ep$trn_tstr_n),
								      .pci_exp_txp(pciw_pci0_pcie_ep$pci_exp_txp),
								      .pci_exp_txn(pciw_pci0_pcie_ep$pci_exp_txn),
								      .cfg_do(),
								      .cfg_rd_wr_done_n(),
								      .cfg_bus_number(pciw_pci0_pcie_ep$cfg_bus_number),
								      .cfg_device_number(pciw_pci0_pcie_ep$cfg_device_number),
								      .cfg_function_number(pciw_pci0_pcie_ep$cfg_function_number),
								      .cfg_status(),
								      .cfg_command(),
								      .cfg_dstatus(),
								      .cfg_dcommand(),
								      .cfg_dcommand2(),
								      .cfg_lstatus(),
								      .cfg_lcommand(),
								      .cfg_to_turnoff_n(),
								      .cfg_pcie_link_state_n(),
								      .cfg_pmcsr_pme_en(),
								      .cfg_pmcsr_pme_status(),
								      .cfg_pmcsr_powerstate(),
								      .trn_lnk_up_n(pciw_pci0_pcie_ep$trn_lnk_up_n),
								      .trn_fc_ph(),
								      .trn_fc_pd(),
								      .trn_fc_nph(),
								      .trn_fc_npd(),
								      .trn_fc_cplh(),
								      .trn_fc_cpld(),
								      .trn_rsof_n(pciw_pci0_pcie_ep$trn_rsof_n),
								      .trn_reof_n(pciw_pci0_pcie_ep$trn_reof_n),
								      .trn_rd(pciw_pci0_pcie_ep$trn_rd),
								      .trn_rrem_n(pciw_pci0_pcie_ep$trn_rrem_n),
								      .trn_rerrfwd_n(),
								      .trn_rsrc_rdy_n(pciw_pci0_pcie_ep$trn_rsrc_rdy_n),
								      .trn_rsrc_dsc_n(),
								      .trn_rbar_hit_n(pciw_pci0_pcie_ep$trn_rbar_hit_n),
								      .trn_tdst_rdy_n(pciw_pci0_pcie_ep$trn_tdst_rdy_n),
								      .trn_tbuf_av(),
								      .trn_terr_drop_n(),
								      .trn_tcfg_req_n(),
								      .cfg_interrupt_rdy_n(pciw_pci0_pcie_ep$cfg_interrupt_rdy_n),
								      .cfg_interrupt_do(pciw_pci0_pcie_ep$cfg_interrupt_do),
								      .cfg_interrupt_mmenable(pciw_pci0_pcie_ep$cfg_interrupt_mmenable),
								      .cfg_interrupt_msienable(pciw_pci0_pcie_ep$cfg_interrupt_msienable),
								      .cfg_interrupt_msixenable(),
								      .cfg_interrupt_msixfm(),
								      .cfg_err_cpl_rdy_n(),
								      .pl_initial_link_width(),
								      .pl_lane_reversal_mode(),
								      .pl_link_gen2_capable(),
								      .pl_link_partner_gen2_supported(),
								      .pl_link_upcfg_capable(),
								      .pl_sel_link_rate(),
								      .pl_sel_link_width(),
								      .pl_ltssm_state(),
								      .pl_received_hot_rst(),
								      .trn_clk(pciw_pci0_pcie_ep$trn_clk),
								      .trn2_clk(pciw_pci0_pcie_ep$trn2_clk),
								      .trn_reset_n(pciw_pci0_pcie_ep$trn_reset_n));

  // submodule pciw_pci0_rst
  IBUF pciw_pci0_rst(.I(1'd1), .O(pciw_pci0_rst$O));

  // submodule pciw_pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciw_pciDevice(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					      .dCLK(pciw_pci0_pcie_ep$trn2_clk),
					      .sRST_N(pciw_p250rst$OUT_RST_N),
					      .sD_IN(pciw_pciDevice$sD_IN),
					      .sEN(pciw_pciDevice$sEN),
					      .dD_OUT(pciw_pciDevice$dD_OUT),
					      .sRDY(pciw_pciDevice$sRDY));

  // submodule pciw_pciLinkUp
  SyncBit #(.init(32'd0)) pciw_pciLinkUp(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					 .dCLK(pciw_pci0_pcie_ep$trn2_clk),
					 .sRST_N(pciw_p250rst$OUT_RST_N),
					 .sD_IN(pciw_pciLinkUp$sD_IN),
					 .sEN(pciw_pciLinkUp$sEN),
					 .dD_OUT(pciw_pciLinkUp$dD_OUT));

  // submodule pciw_pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) pciw_pcie_irq_fifoAssert(.sCLK(pciw_pci0_pcie_ep$trn_clk),
						       .dCLK(pciw_pci0_pcie_ep$trn_clk),
						       .sRST_N(pciw_p250rst$OUT_RST_N),
						       .sD_IN(pciw_pcie_irq_fifoAssert$sD_IN),
						       .sENQ(pciw_pcie_irq_fifoAssert$sENQ),
						       .dDEQ(pciw_pcie_irq_fifoAssert$dDEQ),
						       .dD_OUT(pciw_pcie_irq_fifoAssert$dD_OUT),
						       .sFULL_N(),
						       .dEMPTY_N(pciw_pcie_irq_fifoAssert$dEMPTY_N));

  // submodule pciw_preEdge
  ClockInvToBool pciw_preEdge(.CLK_FAST(pciw_pci0_pcie_ep$trn_clk),
			      .CLK_SLOW(pciw_pci0_pcie_ep$trn2_clk),
			      .CLK_VAL(pciw_preEdge$CLK_VAL));

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     pciw_p2iAF_head_wrapped != pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_dInReset_isInReset &&
	     noc_sm0$RDY_s_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     pciw_i2pAF_head_wrapped == pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_sInReset_isInReset &&
	     noc_sm0$RDY_s_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     noc_sm0$RDY_c0_request_get && cp$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     noc_sm0$RDY_c0_response_put && cp$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     noc_sm1$RDY_c0_request_get && dp0_tlp_inF$FULL_N ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     noc_sm1$RDY_c0_response_put && dp0_tlp_outF$EMPTY_N ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     noc_sm2$RDY_c0_request_get && dp1_tlp_inF$FULL_N ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     noc_sm2$RDY_c0_response_put && dp1_tlp_outF$EMPTY_N ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_pciw_send_pciLinkup
  assign CAN_FIRE_RL_pciw_send_pciLinkup = 1'd1 ;
  assign WILL_FIRE_RL_pciw_send_pciLinkup = 1'd1 ;

  // rule RL_pciw_capture_pciDevice
  assign CAN_FIRE_RL_pciw_capture_pciDevice = pciw_pciDevice$sRDY ;
  assign WILL_FIRE_RL_pciw_capture_pciDevice = pciw_pciDevice$sRDY ;

  // rule RL_pciw_connect_interrupt_1
  assign CAN_FIRE_RL_pciw_connect_interrupt_1 = 1'd1 ;
  assign WILL_FIRE_RL_pciw_connect_interrupt_1 = 1'd1 ;

  // rule RL_pciw_connect_interrupt_rdy_n
  assign CAN_FIRE_RL_pciw_connect_interrupt_rdy_n = 1'd1 ;
  assign WILL_FIRE_RL_pciw_connect_interrupt_rdy_n = 1'd1 ;

  // rule RL_pciw_connect_interrupt_mmenable
  assign CAN_FIRE_RL_pciw_connect_interrupt_mmenable = 1'd1 ;
  assign WILL_FIRE_RL_pciw_connect_interrupt_mmenable = 1'd1 ;

  // rule RL_pciw_connect_interrupt_do
  assign CAN_FIRE_RL_pciw_connect_interrupt_do = 1'd1 ;
  assign WILL_FIRE_RL_pciw_connect_interrupt_do = 1'd1 ;

  // rule RL_pciw_tie_off_inputs
  assign CAN_FIRE_RL_pciw_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_pciw_tie_off_inputs = 1'd1 ;

  // rule RL_pciw_tie_off_inputs_1
  assign CAN_FIRE_RL_pciw_tie_off_inputs_1 = 1'd1 ;
  assign WILL_FIRE_RL_pciw_tie_off_inputs_1 = 1'd1 ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt
  assign CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt =
	     pciw_pcie_irq_fifoAssert$dEMPTY_N && pciw_pcie_irq_rMSIEnabled &&
	     !pciw_pcie_irq_rInterrupting &&
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt =
	     CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done
  assign CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done =
	     pciw_pcie_irq_rMSIEnabled && pciw_pcie_irq_rInterrupting &&
	     !pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done =
	     CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;

  // rule RL_pciw_connect_interrupt_msienable
  assign CAN_FIRE_RL_pciw_connect_interrupt_msienable = 1'd1 ;
  assign WILL_FIRE_RL_pciw_connect_interrupt_msienable = 1'd1 ;

  // rule RL_pciw_p2iAF_deq_update_head
  assign CAN_FIRE_RL_pciw_p2iAF_deq_update_head =
	     !pciw_p2iAF_dInReset_isInReset &&
	     CAN_FIRE_RL_ClientServerRequest ;
  assign WILL_FIRE_RL_pciw_p2iAF_deq_update_head =
	     CAN_FIRE_RL_pciw_p2iAF_deq_update_head ;

  // rule RL_pciw_p2iAF_dClear_update_head
  assign CAN_FIRE_RL_pciw_p2iAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_pciw_p2iAF_dClear_update_head = 1'b0 ;

  // rule RL_pciw_p2iAF_reset_head
  assign CAN_FIRE_RL_pciw_p2iAF_reset_head = pciw_p2iAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_p2iAF_reset_head = pciw_p2iAF_dInReset_isInReset ;

  // rule RL_pciw_p2iAF_dInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_pciw_p2iAF_dInReset_isResetAssertedUpdate =
	     pciw_p2iAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_p2iAF_dInReset_isResetAssertedUpdate =
	     pciw_p2iAF_dInReset_isInReset ;

  // rule RL_pciw_i2pAF_enq_update_tail
  assign CAN_FIRE_RL_pciw_i2pAF_enq_update_tail =
	     !pciw_i2pAF_sInReset_isInReset &&
	     CAN_FIRE_RL_ClientServerResponse ;
  assign WILL_FIRE_RL_pciw_i2pAF_enq_update_tail =
	     CAN_FIRE_RL_pciw_i2pAF_enq_update_tail ;

  // rule RL_pciw_i2pAF_sClear_update_tail
  assign CAN_FIRE_RL_pciw_i2pAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_pciw_i2pAF_sClear_update_tail = 1'b0 ;

  // rule RL_pciw_i2pAF_reset_tail
  assign CAN_FIRE_RL_pciw_i2pAF_reset_tail = pciw_i2pAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_i2pAF_reset_tail = pciw_i2pAF_sInReset_isInReset ;

  // rule RL_pciw_i2pAF_reset_head
  assign CAN_FIRE_RL_pciw_i2pAF_reset_head = pciw_i2pAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_i2pAF_reset_head = pciw_i2pAF_dInReset_isInReset ;

  // rule RL_pciw_i2pAF_sInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_pciw_i2pAF_sInReset_isResetAssertedUpdate =
	     pciw_i2pAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_i2pAF_sInReset_isResetAssertedUpdate =
	     pciw_i2pAF_sInReset_isInReset ;

  // rule RL_pciw_i2pAF_dInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_pciw_i2pAF_dInReset_isResetAssertedUpdate =
	     pciw_i2pAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_i2pAF_dInReset_isResetAssertedUpdate =
	     pciw_i2pAF_dInReset_isInReset ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_every
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_every = 1'd1 ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_every = 1'd1 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_connect
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_connect =
	     pciw_pci0_pwTrnRx$whas ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_connect =
	     pciw_pci0_pwTrnRx$whas ;

  // rule RL_pciw_pci0_connect_trn_rx
  assign CAN_FIRE_RL_pciw_pci0_connect_trn_rx = 1'd1 ;
  assign WILL_FIRE_RL_pciw_pci0_connect_trn_rx = 1'd1 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     pciw_fP2I$EMPTY_N &&
	     (!pciw_fP2I$D_OUT[79] ||
	      pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100) &&
	     !pciw_Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;

  // rule RL_pciw_p2iAF_reset_tail
  assign CAN_FIRE_RL_pciw_p2iAF_reset_tail = pciw_p2iAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_p2iAF_reset_tail = pciw_p2iAF_sInReset_isInReset ;

  // rule RL_pciw_p2iAF_sInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_pciw_p2iAF_sInReset_isResetAssertedUpdate =
	     pciw_p2iAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_pciw_p2iAF_sInReset_isResetAssertedUpdate =
	     pciw_p2iAF_sInReset_isInReset ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100 &&
	     pciw_fP2I$EMPTY_N &&
	     pciw_Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // rule RL_pciw_p2iAF_enq_update_tail
  assign CAN_FIRE_RL_pciw_p2iAF_enq_update_tail =
	     !pciw_p2iAF_sInReset_isInReset && pciw_p2iAF_enq_pw$whas ;
  assign WILL_FIRE_RL_pciw_p2iAF_enq_update_tail =
	     CAN_FIRE_RL_pciw_p2iAF_enq_update_tail ;

  // rule RL_pciw_p2iAF_sClear_update_tail
  assign CAN_FIRE_RL_pciw_p2iAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_pciw_p2iAF_sClear_update_tail = 1'b0 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 =
	     pciw_i2pAF_head_wrapped != pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_dInReset_isInReset &&
	     pciw_preEdge$CLK_VAL &&
	     pciw_fI2P$FULL_N &&
	     !pciw_Prelude_inst_changeSpecialWires_2_rg[81] ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 =
	     CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;

  // rule RL_pciw_i2pAF_deq_update_head
  assign CAN_FIRE_RL_pciw_i2pAF_deq_update_head =
	     !pciw_i2pAF_dInReset_isInReset &&
	     CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;
  assign WILL_FIRE_RL_pciw_i2pAF_deq_update_head =
	     CAN_FIRE_RL_pciw_i2pAF_deq_update_head ;

  // rule RL_pciw_i2pAF_dClear_update_head
  assign CAN_FIRE_RL_pciw_i2pAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_pciw_i2pAF_dClear_update_head = 1'b0 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 =
	     pciw_fI2P$FULL_N &&
	     pciw_Prelude_inst_changeSpecialWires_2_rg[81] ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 =
	     CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_3_every
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_every = 1'd1 ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_every = 1'd1 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_3_connect
  assign CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_connect =
	     pciw_pci0_pwTrnTx$whas ;
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_3_connect =
	     pciw_pci0_pwTrnTx$whas ;

  // rule RL_pciw_pci0_connect_trn_tx
  assign CAN_FIRE_RL_pciw_pci0_connect_trn_tx = 1'd1 ;
  assign WILL_FIRE_RL_pciw_pci0_connect_trn_tx = 1'd1 ;

  // rule RL_noc_ClientServerRequest
  assign CAN_FIRE_RL_noc_ClientServerRequest =
	     noc_sm1$RDY_s_request_put && noc_sm0$RDY_c1_request_get ;
  assign WILL_FIRE_RL_noc_ClientServerRequest =
	     CAN_FIRE_RL_noc_ClientServerRequest ;

  // rule RL_noc_ClientServerResponse
  assign CAN_FIRE_RL_noc_ClientServerResponse =
	     noc_sm1$RDY_s_response_get && noc_sm0$RDY_c1_response_put ;
  assign WILL_FIRE_RL_noc_ClientServerResponse =
	     CAN_FIRE_RL_noc_ClientServerResponse ;

  // rule RL_noc_ClientServerRequest_1
  assign CAN_FIRE_RL_noc_ClientServerRequest_1 =
	     noc_sm2$RDY_s_request_put && noc_sm1$RDY_c1_request_get ;
  assign WILL_FIRE_RL_noc_ClientServerRequest_1 =
	     CAN_FIRE_RL_noc_ClientServerRequest_1 ;

  // rule RL_noc_ClientServerResponse_1
  assign CAN_FIRE_RL_noc_ClientServerResponse_1 =
	     noc_sm2$RDY_s_response_get && noc_sm1$RDY_c1_response_put ;
  assign WILL_FIRE_RL_noc_ClientServerResponse_1 =
	     CAN_FIRE_RL_noc_ClientServerResponse_1 ;

  // rule RL_noc_chomp_rogue
  assign CAN_FIRE_RL_noc_chomp_rogue = noc_sm2$RDY_c1_request_get ;
  assign WILL_FIRE_RL_noc_chomp_rogue = noc_sm2$RDY_c1_request_get ;

  // rule RL_dp0_rStart
  assign CAN_FIRE_RL_dp0_rStart = dp0_wmi_mesgStart ;
  assign WILL_FIRE_RL_dp0_rStart = dp0_wmi_mesgStart ;

  // rule RL_dp0_rDone
  assign CAN_FIRE_RL_dp0_rDone = dp0_wmi_mesgDone ;
  assign WILL_FIRE_RL_dp0_rDone = dp0_wmi_mesgDone ;

  // rule RL_dp0_rRdy
  assign CAN_FIRE_RL_dp0_rRdy =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rRdy = CAN_FIRE_RL_dp0_rRdy ;

  // rule RL_dp0_rStart_1
  assign CAN_FIRE_RL_dp0_rStart_1 = dp0_tlp_remStart ;
  assign WILL_FIRE_RL_dp0_rStart_1 = dp0_tlp_remStart ;

  // rule RL_dp0_rDone_1
  assign CAN_FIRE_RL_dp0_rDone_1 = dp0_tlp_remDone ;
  assign WILL_FIRE_RL_dp0_rDone_1 = dp0_tlp_remDone ;

  // rule RL_dp0_rRdy_1
  assign CAN_FIRE_RL_dp0_rRdy_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rRdy_1 = CAN_FIRE_RL_dp0_rRdy_1 ;

  // rule RL_dp0_rFRdy_1
  assign CAN_FIRE_RL_dp0_rFRdy_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rFRdy_1 = CAN_FIRE_RL_dp0_rFRdy_1 ;

  // rule RL_dp0_rCredit_1
  assign CAN_FIRE_RL_dp0_rCredit_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rCredit_1 = CAN_FIRE_RL_dp0_rCredit_1 ;

  // rule RL_dp0_assignControl
  assign CAN_FIRE_RL_dp0_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_dp0_assignControl = 1'd1 ;

  // rule RL_dp0_operating_actions
  assign CAN_FIRE_RL_dp0_operating_actions = CAN_FIRE_RL_dp0_bml_lbcf ;
  assign WILL_FIRE_RL_dp0_operating_actions = CAN_FIRE_RL_dp0_bml_lbcf ;

  // rule RL_dp0_mkConnectionVtoAf
  assign CAN_FIRE_RL_dp0_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_dp0_mkConnectionVtoAf = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_s1[0] ||
	      dp0_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun =
	     dp0_bram_serverAdapterA_s1[1] &&
	     !dp0_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun ;

  // rule RL_dp0_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_s1[0] ||
	      dp0_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun =
	     dp0_bram_serverAdapterB_s1[1] &&
	     !dp0_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun ;

  // rule RL_dp0_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_1_s1[0] ||
	      dp0_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun =
	     dp0_bram_serverAdapterA_1_s1[1] &&
	     !dp0_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_1_s1[0] ||
	      dp0_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun =
	     dp0_bram_serverAdapterB_1_s1[1] &&
	     !dp0_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_2_s1[0] ||
	      dp0_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun =
	     dp0_bram_serverAdapterA_2_s1[1] &&
	     !dp0_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_2_s1[0] ||
	      dp0_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun =
	     dp0_bram_serverAdapterB_2_s1[1] &&
	     !dp0_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_3_s1[0] ||
	      dp0_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun =
	     dp0_bram_serverAdapterA_3_s1[1] &&
	     !dp0_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_3_s1[0] ||
	      dp0_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun =
	     dp0_bram_serverAdapterB_3_s1[1] &&
	     !dp0_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_dp0_wci_request_decode
  assign CAN_FIRE_RL_dp0_wci_request_decode = dp0_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_wci_request_decode = dp0_wci_reqF$EMPTY_N ;

  // rule RL_dp0_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_dp0_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp0_wci_respF_deq
  assign CAN_FIRE_RL_dp0_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_respF_deq = 1'd1 ;

  // rule RL_dp0_wci_cfrd
  assign CAN_FIRE_RL_dp0_wci_cfrd =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_respF_c_r != 2'd2 &&
	     dp0_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_cfrd =
	     CAN_FIRE_RL_dp0_wci_cfrd && !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_ctl_op_start
  assign CAN_FIRE_RL_dp0_wci_ctl_op_start =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_ctl_op_start =
	     CAN_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_dp0_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell = dp0_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell ;

  // rule RL_dp0_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell =
	     dp0_tlp_tailEventF$FULL_N && dp0_dpControl[1:0] == 2'd2 &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_creditReady ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // rule RL_dp0_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag ;

  // rule RL_dp0_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     dp0_tlp_mReqF$FULL_N && dp0_tlp_inF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_tlpRcvBusy &&
	     dp0_tlp_pullTagMatch &&
	     !dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     dp0_tlp_mReqF$FULL_N && dp0_tlp_inF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_tlp_dmaTailEventSender
  assign CAN_FIRE_RL_dp0_tlp_dmaTailEventSender =
	     dp0_tlp_outF$FULL_N && dp0_tlp_tailEventF$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_tlp_dmaTailEventSender =
	     CAN_FIRE_RL_dp0_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_rFFlow_1
  assign CAN_FIRE_RL_dp0_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFFlow_1 = 1'd1 ;

  // rule RL_dp0_tlp_tlpRcv
  assign CAN_FIRE_RL_dp0_tlp_tlpRcv =
	     dp0_tlp_inF$EMPTY_N &&
	     (dp0_tlp_inF$D_OUT[152] ?
		dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
		dp0_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp0_tlp_mReqF$FULL_N :
		dp0_tlp_inIgnorePkt || dp0_tlp_mReqF$FULL_N) &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_dp0_tlp_tlpRcv = CAN_FIRE_RL_dp0_tlp_tlpRcv ;

  // rule RL_dp0_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta =
	     dp0_tlp_outF$FULL_N &&
	     dp0_tlp_dpControl_wget__32_BITS_3_TO_2_47_EQ_2_ETC___d865 &&
	     dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_rFMeta_1
  assign CAN_FIRE_RL_dp0_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFMeta_1 = 1'd1 ;

  // rule RL_dp0_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;

  // rule RL_dp0_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta =
	     dp0_tlp_mReqF$FULL_N && dp0_tlp_inF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_rBMeta_1
  assign CAN_FIRE_RL_dp0_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMeta_1 = 1'd1 ;

  // rule RL_dp0_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent =
	     dp0_tlp_tailEventF$FULL_N &&
	     dp0_tlp_dpControl_wget__32_BITS_3_TO_2_47_EQ_2_ETC___d1029 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ;

  // rule RL_dp0_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     dp0_tlp_mReqF$FULL_N && dp0_tlp_inF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_dp0_rBMesg_1
  assign CAN_FIRE_RL_dp0_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMesg_1 = 1'd1 ;

  // rule RL_dp0_rFMesg_1
  assign CAN_FIRE_RL_dp0_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFMesg_1 = 1'd1 ;

  // rule RL_dp0_tlp_dataXmt_Header
  assign CAN_FIRE_RL_dp0_tlp_dataXmt_Header =
	     dp0_tlp_mRespF$EMPTY_N && dp0_tlp_outF$FULL_N &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Header =
	     CAN_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_tlp_dataXmt_Body
  assign CAN_FIRE_RL_dp0_tlp_dataXmt_Body =
	     dp0_tlp_mRespF$EMPTY_N && dp0_tlp_outF$FULL_N &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Body =
	     CAN_FIRE_RL_dp0_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_dp0_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_dp0_tlp_writeReq
  assign CAN_FIRE_RL_dp0_tlp_writeReq =
	     dp0_tlp_mReqF_i_notEmpty__128_AND_IF_dp0_tlp_m_ETC___d1144 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_writeReq = CAN_FIRE_RL_dp0_tlp_writeReq ;

  // rule RL_dp0_tlp_writeData
  assign CAN_FIRE_RL_dp0_tlp_writeData =
	     dp0_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1177 ||
	      dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879) &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1210 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_writeData = CAN_FIRE_RL_dp0_tlp_writeData ;

  // rule RL_dp0_tlp_read_FirstResp
  assign CAN_FIRE_RL_dp0_tlp_read_FirstResp =
	     dp0_tlp_readReq$EMPTY_N && dp0_tlp_mRespF$FULL_N &&
	     IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1411 &&
	     !dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp0_tlp_read_FirstResp =
	     CAN_FIRE_RL_dp0_tlp_read_FirstResp ;

  // rule RL_dp0_tlp_read_NextResp
  assign CAN_FIRE_RL_dp0_tlp_read_NextResp =
	     dp0_tlp_readReq$EMPTY_N &&
	     dp0_bram_serverAdapterA_outDataCore_notEmpty___ETC___d1476 &&
	     dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp0_tlp_read_NextResp =
	     CAN_FIRE_RL_dp0_tlp_read_NextResp ;

  // rule RL_dp0_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly =
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_dp0_tlp_read_FirstReq
  assign CAN_FIRE_RL_dp0_tlp_read_FirstReq =
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_readReq_i_notFull__303_AND_IF_dp0_tlp__ETC___d1314 &&
	     !dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_read_FirstReq =
	     CAN_FIRE_RL_dp0_tlp_read_FirstReq ;

  // rule RL_dp0_tlp_read_NextReq
  assign CAN_FIRE_RL_dp0_tlp_read_NextReq =
	     dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879 &&
	     dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880 &&
	     dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881 &&
	     dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882 &&
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_read_NextReq =
	     CAN_FIRE_RL_dp0_tlp_read_NextReq ;

  // rule RL_dp0_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_dp0_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd =
	     dp0_bram_serverAdapterA_cnt_1$whas ||
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_dp0_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     dp0_bram_serverAdapterA_1_cnt_1$whas ||
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_dp0_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     dp0_bram_serverAdapterA_2_cnt_1$whas ||
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_dp0_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     dp0_bram_serverAdapterA_3_cnt_1$whas ||
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_throttleWmi
  assign CAN_FIRE_RL_dp0_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_throttleWmi = 1'd1 ;

  // rule RL_dp0_wmi_reqMetadata
  assign CAN_FIRE_RL_dp0_wmi_reqMetadata =
	     dp0_bram_serverAdapterB_cnt_81_SLT_3___d1672 &&
	     dp0_bram_serverAdapterB_1_cnt_99_SLT_3___d1673 &&
	     dp0_bram_serverAdapterB_2_cnt_17_SLT_3___d1674 &&
	     dp0_bram_serverAdapterB_3_cnt_35_SLT_3___d1675 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     !dp0_wmi_metaBusy &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_reqMetadata =
	     CAN_FIRE_RL_dp0_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_wmi_doDwell
  assign CAN_FIRE_RL_dp0_wmi_doDwell = dp0_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_doDwell = CAN_FIRE_RL_dp0_wmi_doDwell ;

  // rule RL_dp0_wmi_doWriteFinalize
  assign CAN_FIRE_RL_dp0_wmi_doWriteFinalize =
	     dp0_bram_serverAdapterB_cnt_81_SLT_3___d1672 &&
	     dp0_bram_serverAdapterB_1_cnt_99_SLT_3___d1673 &&
	     dp0_bram_serverAdapterB_2_cnt_17_SLT_3___d1674 &&
	     dp0_bram_serverAdapterB_3_cnt_35_SLT_3___d1675 &&
	     dp0_wmi_wrFinalize ;
  assign WILL_FIRE_RL_dp0_wmi_doWriteFinalize =
	     CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_rBMeta
  assign CAN_FIRE_RL_dp0_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMeta = 1'd1 ;

  // rule RL_dp0_wmi_respMetadata
  assign CAN_FIRE_RL_dp0_wmi_respMetadata =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_dpControl_whas__659_AND_dp0_bram_serve_ETC___d1705 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     dp0_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp0_wmi_respMetadata =
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     !WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_wmi_doReadReq
  assign CAN_FIRE_RL_dp0_wmi_doReadReq =
	     IF_dp0_wmi_addr_760_BITS_3_TO_2_761_EQ_0_762_T_ETC___d4313 &&
	     dp0_wmi_rdActive ;
  assign WILL_FIRE_RL_dp0_wmi_doReadReq =
	     CAN_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_wmi_doReadResp
  assign CAN_FIRE_RL_dp0_wmi_doReadResp =
	     dp0_wmi_wmi_respF_c_r != 2'd2 && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady &&
	     IF_dp0_wmi_p4B_814_EQ_0_815_THEN_dp0_bram_serv_ETC___d1828 &&
	     dp0_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_doReadResp = CAN_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly =
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_dp0_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req =
	     dp0_wmi_wmi_reqF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ;

  // rule RL_dp0_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh =
	     dp0_wmi_wmi_dhF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ;

  // rule RL_dp0_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_dp0_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr =
	     ((dp0_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_dp0_wmi_doReadResp :
		dp0_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_dp0_wmi_doReadResp) &&
	     CAN_FIRE_RL_dp0_wmi_doReadResp &&
	     !(dp0_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr ;

  // rule RL_dp0_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr =
	     dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // rule RL_dp0_wmi_wmi_respF_both
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_both =
	     ((dp0_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_dp0_wmi_doReadResp :
		dp0_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_dp0_wmi_doReadResp) &&
	     dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_both =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_both ;

  // rule RL_dp0_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd0 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI ;

  // rule RL_dp0_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd2 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE ;

  // rule RL_dp0_bml_cntLclStart
  assign CAN_FIRE_RL_dp0_bml_cntLclStart =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufStart ;
  assign WILL_FIRE_RL_dp0_bml_cntLclStart = CAN_FIRE_RL_dp0_bml_cntLclStart ;

  // rule RL_dp0_bml_cntLclDone
  assign CAN_FIRE_RL_dp0_bml_cntLclDone = CAN_FIRE_RL_dp0_bml_lclAdvance ;
  assign WILL_FIRE_RL_dp0_bml_cntLclDone = CAN_FIRE_RL_dp0_bml_lclAdvance ;

  // rule RL_dp0_bml_cntRemStart
  assign CAN_FIRE_RL_dp0_bml_cntRemStart =
	     dp0_wci_cState == 3'd2 && dp0_bml_remStart ;
  assign WILL_FIRE_RL_dp0_bml_cntRemStart = CAN_FIRE_RL_dp0_bml_cntRemStart ;

  // rule RL_dp0_bml_cntRemDone
  assign CAN_FIRE_RL_dp0_bml_cntRemDone = CAN_FIRE_RL_dp0_bml_remAdvance ;
  assign WILL_FIRE_RL_dp0_bml_cntRemDone = CAN_FIRE_RL_dp0_bml_remAdvance ;

  // rule RL_dp0_bml_lbar
  assign CAN_FIRE_RL_dp0_bml_lbar = CAN_FIRE_RL_dp0_bml_lbcf ;
  assign WILL_FIRE_RL_dp0_bml_lbar = CAN_FIRE_RL_dp0_bml_lbcf ;

  // rule RL_dp0_bml_lbcf
  assign CAN_FIRE_RL_dp0_bml_lbcf = dp0_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_dp0_bml_lbcf = CAN_FIRE_RL_dp0_bml_lbcf ;

  // rule RL_dp0_bml_fba
  assign CAN_FIRE_RL_dp0_bml_fba =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fba = CAN_FIRE_RL_dp0_bml_fba ;

  // rule RL_dp0_bml_lcredit
  assign CAN_FIRE_RL_dp0_bml_lcredit =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_dp0_bml_lcredit = CAN_FIRE_RL_dp0_bml_lcredit ;

  // rule RL_dp0_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_dp0_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_remAdvance
  assign CAN_FIRE_RL_dp0_bml_remAdvance =
	     dp0_wci_cState == 3'd2 && dp0_bml_remDone ;
  assign WILL_FIRE_RL_dp0_bml_remAdvance =
	     CAN_FIRE_RL_dp0_bml_remAdvance &&
	     !WILL_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_remDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp0_bml_remAdvance ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // rule RL_dp0_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleInc =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleInc =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_dp0_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_crdAdvance
  assign CAN_FIRE_RL_dp0_bml_crdAdvance =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 &&
	     dp0_bml_remStart ;
  assign WILL_FIRE_RL_dp0_bml_crdAdvance = CAN_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_remStart__dreg_update
  assign CAN_FIRE_RL_dp0_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleInc = CAN_FIRE_RL_dp0_bml_crdAdvance ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_dp0_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp0_wci_reqF_enq
  assign CAN_FIRE_RL_dp0_wci_reqF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp0_wci_reqF_enq = 1'b0 ;

  // rule RL_dp0_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_dp0_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp0_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq = 1'b0 ;

  // rule RL_dp0_wmi_getRequest
  assign CAN_FIRE_RL_dp0_wmi_getRequest =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_blockReq &&
	     dp0_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp0_wmi_wrActive_732_733_OR_NOT_dp0_wmi_rd_ETC___d1742 &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_getRequest =
	     CAN_FIRE_RL_dp0_wmi_getRequest &&
	     !WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq = 1'b0 ;

  // rule RL_dp0_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter =
	     1'b0 != WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset =
	     WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset =
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // rule RL_dp0_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     1'b0 != MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // rule RL_dp0_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_dp0_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_dp0_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq = 1'b0 ;

  // rule RL_dp0_wmi_doWriteReq
  assign CAN_FIRE_RL_dp0_wmi_doWriteReq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_dhF$EMPTY_N &&
	     IF_dp0_wmi_addr_760_BITS_3_TO_2_761_EQ_0_762_T_ETC___d4313 &&
	     dp0_wmi_wrActive ;
  assign WILL_FIRE_RL_dp0_wmi_doWriteReq =
	     CAN_FIRE_RL_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_rBMesg
  assign CAN_FIRE_RL_dp0_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMesg = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_dp0_bram_memory$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd =
	     dp0_bram_serverAdapterB_cnt_1$whas ||
	     dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     dp0_bram_serverAdapterB_1_cnt_1$whas ||
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     dp0_bram_serverAdapterB_2_cnt_1$whas ||
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     dp0_bram_serverAdapterB_3_cnt_1$whas ||
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter =
	     1'b0 != WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_lclAdvance
  assign CAN_FIRE_RL_dp0_bml_lclAdvance =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufDone ;
  assign WILL_FIRE_RL_dp0_bml_lclAdvance = CAN_FIRE_RL_dp0_bml_lclAdvance ;

  // rule RL_dp0_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleInc = CAN_FIRE_RL_dp0_bml_lclAdvance ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_dp0_bml_lclAdvance ;

  // rule RL_dp0_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_initAccumulators
  assign CAN_FIRE_RL_dp0_bml_initAccumulators =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd1 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_dp0_bml_initAccumulators =
	     CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // rule RL_dp0_wci_cfwr
  assign CAN_FIRE_RL_dp0_wci_cfwr =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_respF_c_r != 2'd2 &&
	     dp0_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_cfwr =
	     CAN_FIRE_RL_dp0_wci_cfwr && !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_ctl_op_complete
  assign CAN_FIRE_RL_dp0_wci_ctl_op_complete =
	     dp0_wci_respF_c_r != 2'd2 && dp0_wci_ctlOpActive &&
	     dp0_wci_ctlAckReg ;
  assign WILL_FIRE_RL_dp0_wci_ctl_op_complete =
	     CAN_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter =
	     1'b0 != dp0_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_dp0_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter ;

  // rule RL_dp0_wci_respF_incCtr
  assign CAN_FIRE_RL_dp0_wci_respF_incCtr =
	     ((dp0_wci_respF_c_r == 2'd0) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd1 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_enqueueing$whas &&
	     !(dp0_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp0_wci_respF_incCtr =
	     CAN_FIRE_RL_dp0_wci_respF_incCtr ;

  // rule RL_dp0_wci_respF_decCtr
  assign CAN_FIRE_RL_dp0_wci_respF_decCtr =
	     dp0_wci_respF_c_r != 2'd0 && !dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp0_wci_respF_decCtr =
	     CAN_FIRE_RL_dp0_wci_respF_decCtr ;

  // rule RL_dp0_wci_respF_both
  assign CAN_FIRE_RL_dp0_wci_respF_both =
	     ((dp0_wci_respF_c_r == 2'd1) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd2 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_c_r != 2'd0 &&
	     dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp0_wci_respF_both = CAN_FIRE_RL_dp0_wci_respF_both ;

  // rule RL_dp0_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_dp0_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_dp1_rStart
  assign CAN_FIRE_RL_dp1_rStart = dp1_wmi_mesgStart ;
  assign WILL_FIRE_RL_dp1_rStart = dp1_wmi_mesgStart ;

  // rule RL_dp1_rDone
  assign CAN_FIRE_RL_dp1_rDone = dp1_wmi_mesgDone ;
  assign WILL_FIRE_RL_dp1_rDone = dp1_wmi_mesgDone ;

  // rule RL_dp1_rRdy
  assign CAN_FIRE_RL_dp1_rRdy =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rRdy = CAN_FIRE_RL_dp1_rRdy ;

  // rule RL_dp1_rStart_1
  assign CAN_FIRE_RL_dp1_rStart_1 = dp1_tlp_remStart ;
  assign WILL_FIRE_RL_dp1_rStart_1 = dp1_tlp_remStart ;

  // rule RL_dp1_rDone_1
  assign CAN_FIRE_RL_dp1_rDone_1 = dp1_tlp_remDone ;
  assign WILL_FIRE_RL_dp1_rDone_1 = dp1_tlp_remDone ;

  // rule RL_dp1_rRdy_1
  assign CAN_FIRE_RL_dp1_rRdy_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rRdy_1 = CAN_FIRE_RL_dp1_rRdy_1 ;

  // rule RL_dp1_rFRdy_1
  assign CAN_FIRE_RL_dp1_rFRdy_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rFRdy_1 = CAN_FIRE_RL_dp1_rFRdy_1 ;

  // rule RL_dp1_rCredit_1
  assign CAN_FIRE_RL_dp1_rCredit_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rCredit_1 = CAN_FIRE_RL_dp1_rCredit_1 ;

  // rule RL_dp1_assignControl
  assign CAN_FIRE_RL_dp1_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_dp1_assignControl = 1'd1 ;

  // rule RL_dp1_operating_actions
  assign CAN_FIRE_RL_dp1_operating_actions = CAN_FIRE_RL_dp1_bml_lbar ;
  assign WILL_FIRE_RL_dp1_operating_actions = CAN_FIRE_RL_dp1_bml_lbar ;

  // rule RL_dp1_mkConnectionVtoAf
  assign CAN_FIRE_RL_dp1_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_dp1_mkConnectionVtoAf = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_s1[0] ||
	      dp1_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun =
	     dp1_bram_serverAdapterA_s1[1] &&
	     !dp1_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun ;

  // rule RL_dp1_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_s1[0] ||
	      dp1_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun =
	     dp1_bram_serverAdapterB_s1[1] &&
	     !dp1_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun ;

  // rule RL_dp1_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_1_s1[0] ||
	      dp1_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun =
	     dp1_bram_serverAdapterA_1_s1[1] &&
	     !dp1_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_1_s1[0] ||
	      dp1_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun =
	     dp1_bram_serverAdapterB_1_s1[1] &&
	     !dp1_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_2_s1[0] ||
	      dp1_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun =
	     dp1_bram_serverAdapterA_2_s1[1] &&
	     !dp1_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_2_s1[0] ||
	      dp1_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun =
	     dp1_bram_serverAdapterB_2_s1[1] &&
	     !dp1_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_3_s1[0] ||
	      dp1_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun =
	     dp1_bram_serverAdapterA_3_s1[1] &&
	     !dp1_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_3_s1[0] ||
	      dp1_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun =
	     dp1_bram_serverAdapterB_3_s1[1] &&
	     !dp1_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_dp1_wci_request_decode
  assign CAN_FIRE_RL_dp1_wci_request_decode = dp1_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_wci_request_decode = dp1_wci_reqF$EMPTY_N ;

  // rule RL_dp1_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_dp1_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp1_wci_respF_deq
  assign CAN_FIRE_RL_dp1_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_respF_deq = 1'd1 ;

  // rule RL_dp1_wci_cfrd
  assign CAN_FIRE_RL_dp1_wci_cfrd =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_respF_c_r != 2'd2 &&
	     dp1_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_cfrd =
	     CAN_FIRE_RL_dp1_wci_cfrd && !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_ctl_op_start
  assign CAN_FIRE_RL_dp1_wci_ctl_op_start =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_ctl_op_start =
	     CAN_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_dp1_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta =
	     dp1_tlp_mReqF$FULL_N &&
	     dp1_tlp_dpControl_wget__831_BITS_3_TO_2_832_EQ_ETC___d2853 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_dp1_rBMeta_1
  assign CAN_FIRE_RL_dp1_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMeta_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     dp1_tlp_mReqF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp1_tlp_tlpRcvBusy &&
	     dp1_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp1_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ;

  // rule RL_dp1_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_xmtMetaInFlight &&
	     dp1_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_rFMeta_1
  assign CAN_FIRE_RL_dp1_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFMeta_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     dp1_tlp_tailEventF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_tlpMetaSent &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_dp1_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader =
	     dp1_tlp_mRespF$EMPTY_N && dp1_tlp_outF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody =
	     dp1_tlp_mRespF$EMPTY_N && dp1_tlp_outF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody ;

  // rule RL_dp1_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell = dp1_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell ;

  // rule RL_dp1_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell =
	     dp1_tlp_tailEventF$FULL_N && dp1_dpControl[1:0] == 2'd2 &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_postSeqDwell == 4'd0 &&
	     dp1_tlp_creditReady ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell ;

  // rule RL_dp1_tlp_dmaTailEventSender
  assign CAN_FIRE_RL_dp1_tlp_dmaTailEventSender =
	     dp1_tlp_outF$FULL_N && dp1_tlp_tailEventF$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_tlp_dmaTailEventSender =
	     CAN_FIRE_RL_dp1_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_dp1_rFFlow_1
  assign CAN_FIRE_RL_dp1_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFFlow_1 = 1'd1 ;

  // rule RL_dp1_tlp_tlpRcv
  assign CAN_FIRE_RL_dp1_tlp_tlpRcv =
	     dp1_tlp_inF$EMPTY_N &&
	     (dp1_tlp_inF$D_OUT[152] ?
		dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
		dp1_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp1_tlp_mReqF$FULL_N :
		dp1_tlp_inIgnorePkt || dp1_tlp_mReqF$FULL_N) &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_reqMesgInFlight &&
	     !dp1_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_dp1_tlp_tlpRcv =
	     CAN_FIRE_RL_dp1_tlp_tlpRcv &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_dp1_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp1_rBMesg_1
  assign CAN_FIRE_RL_dp1_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMesg_1 = 1'd1 ;

  // rule RL_dp1_rFMesg_1
  assign CAN_FIRE_RL_dp1_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFMesg_1 = 1'd1 ;

  // rule RL_dp1_tlp_dataXmt_Header
  assign CAN_FIRE_RL_dp1_tlp_dataXmt_Header =
	     dp1_tlp_mRespF$EMPTY_N && dp1_tlp_outF$FULL_N &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Header =
	     CAN_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_pdev
  assign CAN_FIRE_RL_pdev = 1'd1 ;
  assign WILL_FIRE_RL_pdev = 1'd1 ;

  // rule RL_dp1_tlp_dataXmt_Body
  assign CAN_FIRE_RL_dp1_tlp_dataXmt_Body =
	     dp1_tlp_mRespF$EMPTY_N && dp1_tlp_outF$FULL_N &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Body =
	     CAN_FIRE_RL_dp1_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_dp1_tlp_dmaTailEventSender &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_dp1_tlp_writeReq
  assign CAN_FIRE_RL_dp1_tlp_writeReq =
	     dp1_tlp_mReqF_i_notEmpty__143_AND_IF_dp1_tlp_m_ETC___d3159 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_writeReq = CAN_FIRE_RL_dp1_tlp_writeReq ;

  // rule RL_dp1_tlp_writeData
  assign CAN_FIRE_RL_dp1_tlp_writeData =
	     dp1_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3192 ||
	      dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883) &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3225 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_writeData = CAN_FIRE_RL_dp1_tlp_writeData ;

  // rule RL_dp1_tlp_read_FirstResp
  assign CAN_FIRE_RL_dp1_tlp_read_FirstResp =
	     dp1_tlp_readReq$EMPTY_N && dp1_tlp_mRespF$FULL_N &&
	     IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3426 &&
	     !dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp1_tlp_read_FirstResp =
	     CAN_FIRE_RL_dp1_tlp_read_FirstResp ;

  // rule RL_dp1_tlp_read_NextResp
  assign CAN_FIRE_RL_dp1_tlp_read_NextResp =
	     dp1_tlp_readReq$EMPTY_N &&
	     dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3491 &&
	     dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp1_tlp_read_NextResp =
	     CAN_FIRE_RL_dp1_tlp_read_NextResp ;

  // rule RL_dp1_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly =
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_dp1_tlp_read_FirstReq
  assign CAN_FIRE_RL_dp1_tlp_read_FirstReq =
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_readReq_i_notFull__318_AND_IF_dp1_tlp__ETC___d3329 &&
	     !dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_read_FirstReq =
	     CAN_FIRE_RL_dp1_tlp_read_FirstReq ;

  // rule RL_dp1_tlp_read_NextReq
  assign CAN_FIRE_RL_dp1_tlp_read_NextReq =
	     dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883 &&
	     dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884 &&
	     dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885 &&
	     dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886 &&
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_read_NextReq =
	     CAN_FIRE_RL_dp1_tlp_read_NextReq ;

  // rule RL_dp1_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_dp1_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd =
	     dp1_bram_serverAdapterA_cnt_1$whas ||
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_dp1_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     dp1_bram_serverAdapterA_1_cnt_1$whas ||
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_dp1_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     dp1_bram_serverAdapterA_2_cnt_1$whas ||
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_dp1_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     dp1_bram_serverAdapterA_3_cnt_1$whas ||
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_throttleWmi
  assign CAN_FIRE_RL_dp1_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_throttleWmi = 1'd1 ;

  // rule RL_dp1_wmi_reqMetadata
  assign CAN_FIRE_RL_dp1_wmi_reqMetadata =
	     dp1_bram_serverAdapterB_cnt_285_SLT_3___d3687 &&
	     dp1_bram_serverAdapterB_1_cnt_403_SLT_3___d3688 &&
	     dp1_bram_serverAdapterB_2_cnt_521_SLT_3___d3689 &&
	     dp1_bram_serverAdapterB_3_cnt_639_SLT_3___d3690 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     !dp1_wmi_metaBusy &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_reqMetadata =
	     CAN_FIRE_RL_dp1_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_wmi_doDwell
  assign CAN_FIRE_RL_dp1_wmi_doDwell = dp1_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_doDwell = CAN_FIRE_RL_dp1_wmi_doDwell ;

  // rule RL_dp1_wmi_doWriteFinalize
  assign CAN_FIRE_RL_dp1_wmi_doWriteFinalize =
	     dp1_bram_serverAdapterB_cnt_285_SLT_3___d3687 &&
	     dp1_bram_serverAdapterB_1_cnt_403_SLT_3___d3688 &&
	     dp1_bram_serverAdapterB_2_cnt_521_SLT_3___d3689 &&
	     dp1_bram_serverAdapterB_3_cnt_639_SLT_3___d3690 &&
	     dp1_wmi_wrFinalize ;
  assign WILL_FIRE_RL_dp1_wmi_doWriteFinalize =
	     CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_rBMeta
  assign CAN_FIRE_RL_dp1_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMeta = 1'd1 ;

  // rule RL_dp1_wmi_respMetadata
  assign CAN_FIRE_RL_dp1_wmi_respMetadata =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_dpControl_whas__674_AND_dp1_bram_serve_ETC___d3720 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     dp1_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp1_wmi_respMetadata =
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     !WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_wmi_doReadReq
  assign CAN_FIRE_RL_dp1_wmi_doReadReq =
	     IF_dp1_wmi_addr_775_BITS_3_TO_2_776_EQ_0_777_T_ETC___d4314 &&
	     dp1_wmi_rdActive ;
  assign WILL_FIRE_RL_dp1_wmi_doReadReq =
	     CAN_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_wmi_doReadResp
  assign CAN_FIRE_RL_dp1_wmi_doReadResp =
	     dp1_wmi_wmi_respF_c_r != 2'd2 && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady &&
	     IF_dp1_wmi_p4B_829_EQ_0_830_THEN_dp1_bram_serv_ETC___d3843 &&
	     dp1_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_doReadResp = CAN_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly =
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_dp1_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req =
	     dp1_wmi_wmi_reqF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ;

  // rule RL_dp1_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh =
	     dp1_wmi_wmi_dhF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ;

  // rule RL_dp1_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_dp1_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr =
	     ((dp1_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_dp1_wmi_doReadResp :
		dp1_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_dp1_wmi_doReadResp) &&
	     CAN_FIRE_RL_dp1_wmi_doReadResp &&
	     !(dp1_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr ;

  // rule RL_dp1_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr =
	     dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // rule RL_dp1_wmi_wmi_respF_both
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_both =
	     ((dp1_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_dp1_wmi_doReadResp :
		dp1_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_dp1_wmi_doReadResp) &&
	     dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_both =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_both ;

  // rule RL_dp1_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd0 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI ;

  // rule RL_dp1_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd2 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE ;

  // rule RL_dp1_bml_cntLclStart
  assign CAN_FIRE_RL_dp1_bml_cntLclStart =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufStart ;
  assign WILL_FIRE_RL_dp1_bml_cntLclStart = CAN_FIRE_RL_dp1_bml_cntLclStart ;

  // rule RL_dp1_bml_cntLclDone
  assign CAN_FIRE_RL_dp1_bml_cntLclDone =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufDone ;
  assign WILL_FIRE_RL_dp1_bml_cntLclDone = CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // rule RL_dp1_bml_cntRemStart
  assign CAN_FIRE_RL_dp1_bml_cntRemStart =
	     dp1_wci_cState == 3'd2 && dp1_bml_remStart ;
  assign WILL_FIRE_RL_dp1_bml_cntRemStart = CAN_FIRE_RL_dp1_bml_cntRemStart ;

  // rule RL_dp1_bml_cntRemDone
  assign CAN_FIRE_RL_dp1_bml_cntRemDone = CAN_FIRE_RL_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_dp1_bml_cntRemDone = CAN_FIRE_RL_dp1_bml_remAdvance ;

  // rule RL_dp1_bml_lbar
  assign CAN_FIRE_RL_dp1_bml_lbar = dp1_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_dp1_bml_lbar = CAN_FIRE_RL_dp1_bml_lbar ;

  // rule RL_dp1_bml_lbcf
  assign CAN_FIRE_RL_dp1_bml_lbcf = CAN_FIRE_RL_dp1_bml_lbar ;
  assign WILL_FIRE_RL_dp1_bml_lbcf = CAN_FIRE_RL_dp1_bml_lbar ;

  // rule RL_dp1_bml_fba
  assign CAN_FIRE_RL_dp1_bml_fba =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fba = CAN_FIRE_RL_dp1_bml_fba ;

  // rule RL_dp1_bml_lcredit
  assign CAN_FIRE_RL_dp1_bml_lcredit =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_bml_lcredit = CAN_FIRE_RL_dp1_bml_lcredit ;

  // rule RL_dp1_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_dp1_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_remAdvance
  assign CAN_FIRE_RL_dp1_bml_remAdvance =
	     dp1_wci_cState == 3'd2 && dp1_bml_remDone ;
  assign WILL_FIRE_RL_dp1_bml_remAdvance =
	     CAN_FIRE_RL_dp1_bml_remAdvance &&
	     !WILL_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_remDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // rule RL_dp1_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleInc =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleInc =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_dp1_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_crdAdvance
  assign CAN_FIRE_RL_dp1_bml_crdAdvance =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 &&
	     dp1_bml_remStart ;
  assign WILL_FIRE_RL_dp1_bml_crdAdvance = CAN_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_remStart__dreg_update
  assign CAN_FIRE_RL_dp1_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleInc = CAN_FIRE_RL_dp1_bml_crdAdvance ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_dp1_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp1_wci_reqF_enq
  assign CAN_FIRE_RL_dp1_wci_reqF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp1_wci_reqF_enq = 1'b0 ;

  // rule RL_dp1_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_dp1_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp1_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq = 1'b0 ;

  // rule RL_dp1_wmi_getRequest
  assign CAN_FIRE_RL_dp1_wmi_getRequest =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_blockReq &&
	     dp1_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp1_wmi_wrActive_747_748_OR_NOT_dp1_wmi_rd_ETC___d3757 &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_getRequest =
	     CAN_FIRE_RL_dp1_wmi_getRequest &&
	     !WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq = 1'b0 ;

  // rule RL_dp1_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter =
	     1'b0 != WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset =
	     WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset =
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // rule RL_dp1_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     1'b0 != MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // rule RL_dp1_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_dp1_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_dp1_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq = 1'b0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq = 1'b0 ;

  // rule RL_dp1_wmi_doWriteReq
  assign CAN_FIRE_RL_dp1_wmi_doWriteReq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_dhF$EMPTY_N &&
	     IF_dp1_wmi_addr_775_BITS_3_TO_2_776_EQ_0_777_T_ETC___d4314 &&
	     dp1_wmi_wrActive ;
  assign WILL_FIRE_RL_dp1_wmi_doWriteReq =
	     CAN_FIRE_RL_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_rBMesg
  assign CAN_FIRE_RL_dp1_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMesg = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_dp1_bram_memory$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd =
	     dp1_bram_serverAdapterB_cnt_1$whas ||
	     dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     dp1_bram_serverAdapterB_1_cnt_1$whas ||
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     dp1_bram_serverAdapterB_2_cnt_1$whas ||
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     dp1_bram_serverAdapterB_3_cnt_1$whas ||
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter =
	     1'b0 != WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_lclAdvance
  assign CAN_FIRE_RL_dp1_bml_lclAdvance = CAN_FIRE_RL_dp1_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp1_bml_lclAdvance = CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // rule RL_dp1_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleInc = CAN_FIRE_RL_dp1_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // rule RL_dp1_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_initAccumulators
  assign CAN_FIRE_RL_dp1_bml_initAccumulators =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd1 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_dp1_bml_initAccumulators =
	     CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // rule RL_dp1_wci_cfwr
  assign CAN_FIRE_RL_dp1_wci_cfwr =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_respF_c_r != 2'd2 &&
	     dp1_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_cfwr =
	     CAN_FIRE_RL_dp1_wci_cfwr && !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_ctl_op_complete
  assign CAN_FIRE_RL_dp1_wci_ctl_op_complete =
	     dp1_wci_respF_c_r != 2'd2 && dp1_wci_ctlOpActive &&
	     dp1_wci_ctlAckReg ;
  assign WILL_FIRE_RL_dp1_wci_ctl_op_complete =
	     CAN_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter =
	     1'b0 != dp1_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_dp1_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter ;

  // rule RL_dp1_wci_respF_incCtr
  assign CAN_FIRE_RL_dp1_wci_respF_incCtr =
	     ((dp1_wci_respF_c_r == 2'd0) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd1 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_enqueueing$whas &&
	     !(dp1_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp1_wci_respF_incCtr =
	     CAN_FIRE_RL_dp1_wci_respF_incCtr ;

  // rule RL_dp1_wci_respF_decCtr
  assign CAN_FIRE_RL_dp1_wci_respF_decCtr =
	     dp1_wci_respF_c_r != 2'd0 && !dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp1_wci_respF_decCtr =
	     CAN_FIRE_RL_dp1_wci_respF_decCtr ;

  // rule RL_dp1_wci_respF_both
  assign CAN_FIRE_RL_dp1_wci_respF_both =
	     ((dp1_wci_respF_c_r == 2'd1) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd2 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_c_r != 2'd0 &&
	     dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp1_wci_respF_both = CAN_FIRE_RL_dp1_wci_respF_both ;

  // rule RL_dp1_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_dp1_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabAvail__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lbar &&
	     (IF_dp0_bml_dpControl_wget__928_BITS_1_TO_0_934_ETC___d2005 &&
	      !dp0_bml_lclBufStart ||
	      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q17 &&
	      dp0_bml_lclBufStart) ;
  assign MUX_dp0_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lbcf &&
	     (dp0_bml_lclBufDone_952_AND_IF_dp0_bml_dpContro_ETC___d4333 ||
	      NOT_dp0_bml_lclBufDone_952_019_AND_IF_dp0_bml__ETC___d2032) ;
  assign MUX_dp0_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4329 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp0_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp0_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4359 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp0_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4330 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp0_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4331 ;
  assign MUX_dp0_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp0_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__89_BIT_152_040_AND_NOT_dp0__ETC___d1064 ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_4 =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign MUX_dp0_tlp_postSeqDwell$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;
  assign MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp0_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     NOT_dp0_tlp_mRespF_first__085_BITS_71_TO_62_09_ETC___d1109 ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState != 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 && dp0_wci_cState != 3'd1 &&
	      dp0_wci_cState != 3'd3 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState != 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 && dp0_wci_cState != 3'd3 &&
	      dp0_wci_cState != 3'd2 &&
	      dp0_wci_cState != 3'd1 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp0_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ;
  assign MUX_dp0_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ;
  assign MUX_dp0_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doDwell && dp0_wmi_bufDwell == 2'd1 ;
  assign MUX_dp0_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_dp0_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp0_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lbar &&
	     (IF_dp1_bml_dpControl_wget__943_BITS_1_TO_0_949_ETC___d4020 &&
	      !dp1_bml_lclBufStart ||
	      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q20 &&
	      dp1_bml_lclBufStart) ;
  assign MUX_dp1_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lbcf &&
	     (dp1_bml_lclBufDone_967_AND_IF_dp1_bml_dpContro_ETC___d4353 ||
	      NOT_dp1_bml_lclBufDone_967_034_AND_IF_dp1_bml__ETC___d4047) ;
  assign MUX_dp1_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4349 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp1_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp1_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4362 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp1_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4350 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp1_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4351 ;
  assign MUX_dp1_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp1_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_dp1_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__072_BIT_152_073_AND_NOT_dp1_ETC___d3101 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;
  assign MUX_dp1_tlp_postSeqDwell$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp1_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo13 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__863_BITS_71_TO_62_954_ULE_1___d4275 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 &&
	     dp1_tlp_outDwRemain_980_ULE_4___d4535 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_980_ULE_4___d4535 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState != 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 && dp1_wci_cState != 3'd1 &&
	      dp1_wci_cState != 3'd3 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState != 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 && dp1_wci_cState != 3'd3 &&
	      dp1_wci_cState != 3'd2 &&
	      dp1_wci_cState != 3'd1 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp1_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ;
  assign MUX_dp1_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ;
  assign MUX_dp1_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doDwell && dp1_wmi_bufDwell == 2'd1 ;
  assign MUX_dp1_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_dp1_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_dp1_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !pciw_fP2I$D_OUT[79] ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     pciw_i2pS[135:128] != 8'd0 ;
  assign MUX_pciw_p2iS$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     pciw_fP2I$D_OUT[79] ;
  assign MUX_dp0_bml_crdBuf_value$write_1__VAL_3 =
	     dp0_bml_crdBuf_value_910_EQ_dp0_bml_crdBuf_mod_ETC___d4999 ?
	       16'd0 :
	       dp0_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabBuf_value$write_1__VAL_3 =
	     dp0_bml_fabBuf_value_895_EQ_dp0_bml_fabBuf_mod_ETC___d5001 ?
	       16'd0 :
	       dp0_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp0_bml_fabAvail && !dp0_bml_remStart) ? x__h84332 : x__h84337 ;
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? x__h83089 : 16'd0 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_895_EQ_dp0_bml_fabBuf_mod_ETC___d5001 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_967_PLUS_dp0_bml_fabFlowSi_ETC___d4875 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_3 =
	     dp0_bml_crdBuf_value_910_EQ_dp0_bml_crdBuf_mod_ETC___d4999 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_967_PLUS_dp0_bml_fabFlowSi_ETC___d4875 ;
  assign MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_895_EQ_dp0_bml_fabBuf_mod_ETC___d5001 ?
	       dp0_bml_fabMesgBase :
	       dp0_bml_fabMesgAddr + dp0_bml_fabMesgSize ;
  assign MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_895_EQ_dp0_bml_fabBuf_mod_ETC___d5001 ?
	       dp0_bml_fabMetaBase :
	       dp0_bml_fabMetaAddr + dp0_bml_fabMetaSize ;
  assign MUX_dp0_bml_lclBuf_value$write_1__VAL_3 =
	     dp0_bml_lclBuf_value_865_EQ_dp0_bml_lclBuf_mod_ETC___d4998 ?
	       16'd0 :
	       dp0_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp0_bml_dpControl_wget__928_BITS_1_TO_0_934_ETC___d2005 &&
	      !dp0_bml_lclBufStart) ?
	       x__h84213 :
	       x__h84218 ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? dp0_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_1 =
	     dp0_bml_lclBufDone_952_AND_IF_dp0_bml_dpContro_ETC___d4333 ?
	       x__h84290 :
	       x__h84295 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? 16'd0 : dp0_bml_lclNumBufs ;
  assign MUX_dp0_bml_lclCredit$write_1__VAL_1 =
	     (dp0_bml_lclBufDone && !dp0_bml_remStart) ?
	       x__h84370 :
	       x__h84375 ;
  assign MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_865_EQ_dp0_bml_lclBuf_mod_ETC___d4998 ?
	       dp0_bml_mesgBase :
	       dp0_bml_lclMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_865_EQ_dp0_bml_lclBuf_mod_ETC___d4998 ?
	       dp0_bml_metaBase :
	       dp0_bml_lclMetaAddr + dp0_bml_metaSize ;
  assign MUX_dp0_bml_remBuf_value$write_1__VAL_3 =
	     dp0_bml_remBuf_value_880_EQ_dp0_bml_remBuf_mod_ETC___d5000 ?
	       16'd0 :
	       dp0_bml_remBuf_value + 16'd1 ;
  assign MUX_dp0_bml_remMesgAddr$write_1__VAL_2 =
	     dp0_bml_remBuf_value_880_EQ_dp0_bml_remBuf_mod_ETC___d5000 ?
	       dp0_bml_mesgBase :
	       dp0_bml_remMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_remMetaAddr$write_1__VAL_2 =
	     dp0_bml_remBuf_value_880_EQ_dp0_bml_remBuf_mod_ETC___d5000 ?
	       dp0_bml_metaBase :
	       dp0_bml_remMetaAddr + dp0_bml_metaSize ;
  always@(idx__h51967 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h51967)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_2 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h59030 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h59030)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory$a_put_3__VAL_1 =
	     { dp0_tlp_mReqF$D_OUT[7:0],
	       dp0_tlp_mReqF$D_OUT[15:8],
	       dp0_tlp_mReqF$D_OUT[23:16],
	       dp0_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp0_bram_memory$a_put_3__VAL_2 =
	     { IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423[7:0],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423[15:8],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423[23:16],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423[31:24] } ;
  assign MUX_dp0_bram_memory$b_put_2__VAL_1 =
	     dp0_wmi_lclMesgAddr[14:4] + { 1'd0, dp0_wmi_addr[13:4] } ;
  assign MUX_dp0_bram_memory$b_put_3__VAL_4 =
	     { 8'd0, dp0_wmi_wmi_mFlagReg[23:0] } ;
  always@(idx__h54190 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h54190)
      2'd0: MUX_dp0_bram_memory_1$a_put_2__VAL_2 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h59498 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h59498)
      2'd0:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_1$a_put_3__VAL_2 =
	     { IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424[7:0],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424[15:8],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424[23:16],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424[31:24] } ;
  assign MUX_dp0_bram_memory_1$b_put_3__VAL_4 =
	     { 24'h800000, dp0_wmi_wmi_mFlagReg[31:24] } ;
  always@(idx__h55486 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h55486)
      2'd0: MUX_dp0_bram_memory_2$a_put_2__VAL_2 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h59871 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h59871)
      2'd0:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_2$a_put_3__VAL_2 =
	     { IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425[7:0],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425[15:8],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425[23:16],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425[31:24] } ;
  always@(idx__h56782 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h56782)
      2'd0: MUX_dp0_bram_memory_3$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h60244 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h60244)
      2'd0:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426[7:0],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426[15:8],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426[23:16],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426[31:24] } ;
  assign MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878 &&
	     dp0_tlp_dmaPullRemainDWLen_90_ULE_dp0_tlp_dmaP_ETC___d4877 ;
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878 ?
	       dp0_tlp_dmaPullRemainDWLen - dp0_tlp_dmaPullRemainDWSub :
	       dp0_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878 ?
	       10'd0 :
	       dp0_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp0_tlp_fabMesgAccu + y__h46389 ;
  assign MUX_dp0_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h43111,
	       opcode__h43079,
	       nowMS__h43080,
	       nowLS__h43081 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[152] ?
	       (dp0_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp0_tlp_inF$D_OUT[95:80],
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[79:72],
		    dp0_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_2 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMetaAddr[14:2],
	       18'd1279,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_3 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMesgAccu[14:2],
	       dp0_tlp_inF$D_OUT[105:96],
	       8'd255,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_4 = { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       dp0_tlp_readReq$D_OUT[59:42],
	       dp0_tlp_readReq$D_OUT[28:19],
	       lowAddr__h61145,
	       byteCount__h61146,
	       dp0_tlp_readReq$D_OUT[10:0],
	       rresp_data__h61188 } ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       dp0_tlp_readReq$D_OUT[59:58],
	       dp0_tlp_readReq$D_OUT[10:3],
	       rdata__h66512 } ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 =
	     dp0_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 =
	     dp0_tlp_mesgComplReceived + y__h47465 ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { dp0_tlp_inF$D_OUT[8],
	       dp0_tlp_inF$D_OUT[23:16],
	       dp0_tlp_inF$D_OUT[31:24] } ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     dp0_tlp_mesgLengthRemainPull - y__h46318 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_1 =
	     dp0_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_2 =
	     dp0_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_1 = { 25'd25362416, w_data__h40923 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_2 = { 25'd25362416, w_data__h46574 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_3 = { 25'd25296895, w_data__h47775 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_4 =
	     { 1'd1,
	       dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h49628 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_5 =
	     { 1'd0,
	       dp0_tlp_outDwRemain_114_ULE_4___d4530,
	       7'h02,
	       w_be__h36227,
	       dp0_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 =
	     dp0_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp0_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp0_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp0_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 =
	     dp0_tlp_remMesgAccu + y__h46787 ;
  assign MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878 ||
	     !dp0_tlp_dmaPullRemainDWLen_90_ULE_dp0_tlp_dmaP_ETC___d4877 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 =
	     dp0_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp0_wci_illegalEdge$write_1__VAL_2 =
	     dp0_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_1 = dp0_wci_respF_c_r + 2'd1 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_2 = dp0_wci_respF_c_r - 2'd1 ;
  assign MUX_dp0_wci_respF_q_0$write_1__VAL_1 =
	     (dp0_wci_respF_c_r == 2'd1) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_2 :
	       dp0_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_dp0_wci_ctl_op_complete or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wci_cfrd or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_ctl_op_complete:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp0_wci_cfrd:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_cfwr:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp0_wci_respF_q_1$write_1__VAL_1 =
	     (dp0_wci_respF_c_r == 2'd2) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 =
	     dp0_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h85866 } ;
  assign MUX_dp0_wmi_addr$write_1__VAL_1 = dp0_wmi_addr + 14'd4 ;
  assign MUX_dp0_wmi_bufDwell$write_1__VAL_3 = dp0_wmi_bufDwell - 2'd1 ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 =
	     dp0_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 =
	     { dp0_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp0_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_dp0_wmi_mesgCount$write_1__VAL_1 = dp0_wmi_mesgCount + 32'd1 ;
  assign MUX_dp0_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h78901,
	       y_avValue__h78921,
	       y_avValue__h78941,
	       y_avValue__h78961 } ;
  assign MUX_dp0_wmi_p4B$write_1__VAL_2 = dp0_wmi_p4B + 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp0_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     dp0_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (dp0_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       dp0_wmi_wmi_respF_q_1 ;
  assign MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 = { 2'd1, rdata__h79065 } ;
  assign MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (dp0_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_bml_crdBuf_value$write_1__VAL_3 =
	     dp1_bml_crdBuf_value_925_EQ_dp1_bml_crdBuf_mod_ETC___d5052 ?
	       16'd0 :
	       dp1_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabBuf_value$write_1__VAL_3 =
	     dp1_bml_fabBuf_value_910_EQ_dp1_bml_fabBuf_mod_ETC___d5054 ?
	       16'd0 :
	       dp1_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp1_bml_fabAvail && !dp1_bml_remStart) ?
	       x__h161638 :
	       x__h161643 ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? x__h160395 : 16'd0 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_910_EQ_dp1_bml_fabBuf_mod_ETC___d5054 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_982_PLUS_dp1_bml_fabFlowSi_ETC___d4876 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_3 =
	     dp1_bml_crdBuf_value_925_EQ_dp1_bml_crdBuf_mod_ETC___d5052 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_982_PLUS_dp1_bml_fabFlowSi_ETC___d4876 ;
  assign MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_910_EQ_dp1_bml_fabBuf_mod_ETC___d5054 ?
	       dp1_bml_fabMesgBase :
	       dp1_bml_fabMesgAddr + dp1_bml_fabMesgSize ;
  assign MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_910_EQ_dp1_bml_fabBuf_mod_ETC___d5054 ?
	       dp1_bml_fabMetaBase :
	       dp1_bml_fabMetaAddr + dp1_bml_fabMetaSize ;
  assign MUX_dp1_bml_lclBuf_value$write_1__VAL_3 =
	     dp1_bml_lclBuf_value_880_EQ_dp1_bml_lclBuf_mod_ETC___d5051 ?
	       16'd0 :
	       dp1_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp1_bml_dpControl_wget__943_BITS_1_TO_0_949_ETC___d4020 &&
	      !dp1_bml_lclBufStart) ?
	       x__h161519 :
	       x__h161524 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? dp1_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_1 =
	     dp1_bml_lclBufDone_967_AND_IF_dp1_bml_dpContro_ETC___d4353 ?
	       x__h161596 :
	       x__h161601 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? 16'd0 : dp1_bml_lclNumBufs ;
  assign MUX_dp1_bml_lclCredit$write_1__VAL_1 =
	     (dp1_bml_lclBufDone && !dp1_bml_remStart) ?
	       x__h161676 :
	       x__h161681 ;
  assign MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_880_EQ_dp1_bml_lclBuf_mod_ETC___d5051 ?
	       dp1_bml_mesgBase :
	       dp1_bml_lclMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_880_EQ_dp1_bml_lclBuf_mod_ETC___d5051 ?
	       dp1_bml_metaBase :
	       dp1_bml_lclMetaAddr + dp1_bml_metaSize ;
  assign MUX_dp1_bml_remBuf_value$write_1__VAL_3 =
	     dp1_bml_remBuf_value_895_EQ_dp1_bml_remBuf_mod_ETC___d5053 ?
	       16'd0 :
	       dp1_bml_remBuf_value + 16'd1 ;
  assign MUX_dp1_bml_remMesgAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_895_EQ_dp1_bml_remBuf_mod_ETC___d5053 ?
	       dp1_bml_mesgBase :
	       dp1_bml_remMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_remMetaAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_895_EQ_dp1_bml_remBuf_mod_ETC___d5053 ?
	       dp1_bml_metaBase :
	       dp1_bml_remMetaAddr + dp1_bml_metaSize ;
  always@(idx__h129276 or
	  dp1_tlp_writeDWAddr_PLUS_3__q9 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q10 or dp1_tlp_writeDWAddr_PLUS_2__q11)
  begin
    case (idx__h129276)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_2 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_1__q10[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_2__q11[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_3__q9[12:2];
    endcase
  end
  always@(idx__h136339 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q12 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q13 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q14)
  begin
    case (idx__h136339)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory$a_put_3__VAL_1 =
	     { dp1_tlp_mReqF$D_OUT[7:0],
	       dp1_tlp_mReqF$D_OUT[15:8],
	       dp1_tlp_mReqF$D_OUT[23:16],
	       dp1_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp1_bram_memory$a_put_3__VAL_2 =
	     { IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428[7:0],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428[15:8],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428[23:16],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428[31:24] } ;
  assign MUX_dp1_bram_memory$b_put_2__VAL_1 =
	     dp1_wmi_lclMesgAddr[14:4] + { 1'd0, dp1_wmi_addr[13:4] } ;
  assign MUX_dp1_bram_memory$b_put_3__VAL_4 =
	     { 8'd0, dp1_wmi_wmi_mFlagReg[23:0] } ;
  always@(idx__h131499 or
	  dp1_tlp_writeDWAddr_PLUS_3__q9 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q10 or dp1_tlp_writeDWAddr_PLUS_2__q11)
  begin
    case (idx__h131499)
      2'd0: MUX_dp1_bram_memory_1$a_put_2__VAL_2 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_1__q10[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_2__q11[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_3__q9[12:2];
    endcase
  end
  always@(idx__h136807 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q12 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q13 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q14)
  begin
    case (idx__h136807)
      2'd0:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_1$a_put_3__VAL_2 =
	     { IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429[7:0],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429[15:8],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429[23:16],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429[31:24] } ;
  assign MUX_dp1_bram_memory_1$b_put_3__VAL_4 =
	     { 24'h800000, dp1_wmi_wmi_mFlagReg[31:24] } ;
  always@(idx__h132795 or
	  dp1_tlp_writeDWAddr_PLUS_3__q9 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q10 or dp1_tlp_writeDWAddr_PLUS_2__q11)
  begin
    case (idx__h132795)
      2'd0: MUX_dp1_bram_memory_2$a_put_2__VAL_2 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_1__q10[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_2__q11[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_3__q9[12:2];
    endcase
  end
  always@(idx__h137180 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q12 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q13 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q14)
  begin
    case (idx__h137180)
      2'd0:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_2$a_put_3__VAL_2 =
	     { IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430[7:0],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430[15:8],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430[23:16],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430[31:24] } ;
  always@(idx__h134091 or
	  dp1_tlp_writeDWAddr_PLUS_3__q9 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q10 or dp1_tlp_writeDWAddr_PLUS_2__q11)
  begin
    case (idx__h134091)
      2'd0: MUX_dp1_bram_memory_3$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q10[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q11[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q9[12:2];
    endcase
  end
  always@(idx__h137553 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q12 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q13 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q14)
  begin
    case (idx__h137553)
      2'd0:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q13[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q14[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q12[12:2];
    endcase
  end
  assign MUX_dp1_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431[7:0],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431[15:8],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431[23:16],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431[31:24] } ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp1_tlp_fabMesgAccu + y__h113303 ;
  assign MUX_dp1_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h109598,
	       opcode__h109535,
	       nowMS__h109536,
	       nowLS__h109537 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_1 =
	     dp1_tlp_inF$D_OUT[152] ?
	       (dp1_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp1_tlp_inF$D_OUT[95:80],
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[79:72],
		    dp1_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       dp1_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       dp1_tlp_remMesgAccu[14:2],
	       thisRequestLength__h112751[11:2],
	       8'd255,
	       rreq_tag__h112980,
	       3'h2 } ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       dp1_tlp_readReq$D_OUT[59:42],
	       dp1_tlp_readReq$D_OUT[28:19],
	       lowAddr__h138454,
	       byteCount__h138455,
	       dp1_tlp_readReq$D_OUT[10:0],
	       rresp_data__h138497 } ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       dp1_tlp_readReq$D_OUT[59:58],
	       dp1_tlp_readReq$D_OUT[10:3],
	       rdata__h143821 } ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { dp1_tlp_mRespF$D_OUT[8],
	       dp1_tlp_mRespF$D_OUT[23:16],
	       dp1_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     dp1_tlp_mesgLengthRemainPush - y__h112791 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_1 =
	     dp1_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_2 =
	     dp1_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_1 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h113155 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_2 = { 25'd16973823, w_data__h114134 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_3 = { 25'd8585200, w_data__h115196 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_4 = { 25'd25296895, w_data__h125083 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_5 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h126937 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_6 =
	     { 1'd0,
	       dp1_tlp_outDwRemain_980_ULE_4___d4535,
	       7'h02,
	       w_be__h113708,
	       dp1_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 =
	     dp1_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp1_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp1_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp1_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 =
	     dp1_tlp_remMesgAccu + y__h112933 ;
  assign MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 =
	     dp1_tlp_srcMesgAccu + y__h112885 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 =
	     dp1_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp1_wci_illegalEdge$write_1__VAL_2 =
	     dp1_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_1 = dp1_wci_respF_c_r + 2'd1 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_2 = dp1_wci_respF_c_r - 2'd1 ;
  assign MUX_dp1_wci_respF_q_0$write_1__VAL_1 =
	     (dp1_wci_respF_c_r == 2'd1) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2 :
	       dp1_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_dp1_wci_ctl_op_complete or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wci_cfrd or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp1_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_ctl_op_complete:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp1_wci_cfrd:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_cfwr:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp1_wci_respF_q_1$write_1__VAL_1 =
	     (dp1_wci_respF_c_r == 2'd2) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 =
	     dp1_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h163172 } ;
  assign MUX_dp1_wmi_addr$write_1__VAL_1 = dp1_wmi_addr + 14'd4 ;
  assign MUX_dp1_wmi_bufDwell$write_1__VAL_3 = dp1_wmi_bufDwell - 2'd1 ;
  assign MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 =
	     dp1_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__VAL_1 =
	     { dp1_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp1_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_dp1_wmi_mesgCount$write_1__VAL_1 = dp1_wmi_mesgCount + 32'd1 ;
  assign MUX_dp1_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h156210,
	       y_avValue__h156230,
	       y_avValue__h156250,
	       y_avValue__h156270 } ;
  assign MUX_dp1_wmi_p4B$write_1__VAL_2 = dp1_wmi_p4B + 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp1_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     dp1_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (dp1_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       dp1_wmi_wmi_respF_q_1 ;
  assign MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 = { 2'd1, rdata__h156374 } ;
  assign MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (dp1_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 =
	     { 1'd1, pciw_fP2I$D_OUT } ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1 =
	     { 2'd2,
	       pciw_i2pS[151:144],
	       pciw_i2pS[135:128],
	       pciw_i2pS[63:0] } ;
  assign MUX_pciw_fI2P$enq_1__VAL_1 =
	     (pciw_i2pS[135:128] == 8'd0) ?
	       { pciw_i2pS[152:136], pciw_i2pS[127:64] } :
	       { pciw_i2pS[152],
		 1'd0,
		 pciw_i2pS[150:136],
		 pciw_i2pS[127:64] } ;
  assign MUX_pciw_p2iS$write_1__VAL_1 =
	     { pciw_fP2I$D_OUT[80:72], val_be__h5603, val_data__h5604 } ;
  assign MUX_pciw_p2iS$write_1__VAL_2 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[80],
	       pciw_fP2I$D_OUT[79],
	       pciw_Prelude_inst_changeSpecialWires_1_rg[78:72],
	       wOut_be__h5709,
	       wOut_data__h5710 } ;

  // inlined wires
  assign pciw_pcie_irq_wInterruptRdyN$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pciw_pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptDo$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_do ;
  assign pciw_pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign dp0_bram_serverAdapterA_outData_enqData$wget = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_s1[0] ;
  assign dp0_bram_serverAdapterA_outData_outData$wget =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_outDataCore$D_OUT :
	       dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outData_outData$whas =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h11911[1] || ab__h11911[0]) ;
  assign dp0_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_2$whas =
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_writeWithResp$wget =
	     (MUX_dp0_bram_memory$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h11911[1] || ab__h11911[0] } ;
  assign dp0_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_outData_enqData$wget = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_s1[0] ;
  assign dp0_bram_serverAdapterB_outData_outData$wget =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_outDataCore$D_OUT :
	       dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outData_outData$whas =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h13310[1] || ab__h13310[0]) ;
  assign dp0_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_2$whas =
	     dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_writeWithResp$wget =
	     (MUX_dp0_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h13310[1] || ab__h13310[0] } ;
  assign dp0_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_1_s1[0] ;
  assign dp0_bram_serverAdapterA_1_outData_outData$wget =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outData_outData$whas =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h14840[1] || ab__h14840[0]) ;
  assign dp0_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_1_cnt_2$whas =
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$wget =
	     (MUX_dp0_bram_memory_1$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h14840[1] || ab__h14840[0] } ;
  assign dp0_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_1_s1[0] ;
  assign dp0_bram_serverAdapterB_1_outData_outData$wget =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outData_outData$whas =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h16237[1] || ab__h16237[0]) ;
  assign dp0_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_1_cnt_2$whas =
	     dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$wget =
	     (MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h16237[1] || ab__h16237[0] } ;
  assign dp0_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_2_s1[0] ;
  assign dp0_bram_serverAdapterA_2_outData_outData$wget =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outData_outData$whas =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h17767[1] || ab__h17767[0]) ;
  assign dp0_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_2$whas =
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$wget =
	     (MUX_dp0_bram_memory_2$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h17767[1] || ab__h17767[0] } ;
  assign dp0_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_2_s1[0] ;
  assign dp0_bram_serverAdapterB_2_outData_outData$wget =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outData_outData$whas =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h19164[1] || ab__h19164[0]) ;
  assign dp0_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_2_cnt_2$whas =
	     dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$wget =
	     (MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h19164[1] || ab__h19164[0] } ;
  assign dp0_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_3_s1[0] ;
  assign dp0_bram_serverAdapterA_3_outData_outData$wget =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_3_outDataCore$D_OUT :
	       dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outData_outData$whas =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h20694[1] || ab__h20694[0]) ;
  assign dp0_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_3_cnt_2$whas =
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$wget =
	     (MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h20694[1] || ab__h20694[0] } ;
  assign dp0_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_3_s1[0] ;
  assign dp0_bram_serverAdapterB_3_outData_outData$wget =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outData_outData$whas =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h22091[1] || ab__h22091[0]) ;
  assign dp0_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_2$whas =
	     dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$wget =
	     (MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h22091[1] || ab__h22091[0] } ;
  assign dp0_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_wci_wciReq$wget = 60'd0 ;
  assign dp0_wci_wciReq$whas = 1'd1 ;
  assign dp0_wci_respF_x_wire$wget = MUX_dp0_wci_respF_q_0$write_1__VAL_2 ;
  assign dp0_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_cfrd ||
	     WILL_FIRE_RL_dp0_wci_cfwr ;
  assign dp0_wci_wEdge$wget = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_wEdge$whas = WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp0_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp0_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp0_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_wti_wtiReq$wget = 67'h0 ;
  assign dp0_wti_wtiReq$whas = 1'b0 ;
  assign dp0_tlp_remStart_1$wget = 1'd1 ;
  assign dp0_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;
  assign dp0_tlp_remDone_1$wget = 1'd1 ;
  assign dp0_tlp_remDone_1$whas = WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  assign dp0_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_nearBufReady_1$whas = CAN_FIRE_RL_dp0_rRdy_1 ;
  assign dp0_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_farBufReady_1$whas = CAN_FIRE_RL_dp0_rFRdy_1 ;
  assign dp0_tlp_creditReady_1$wget = 1'd1 ;
  assign dp0_tlp_creditReady_1$whas = CAN_FIRE_RL_dp0_rCredit_1 ;
  assign dp0_tlp_dpControl$wget = dp0_dpControl ;
  assign dp0_tlp_dpControl$whas = 1'd1 ;
  assign dp0_tlp_pullTagMatch_1$wget = 1'd1 ;
  assign dp0_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag ;
  assign dp0_wmi_wmi_wmiReq$wget = 32'd0 ;
  assign dp0_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp0_wmi_wmi_wmiMFlag$wget = 32'h0 ;
  assign dp0_wmi_wmi_wmiMFlag$whas = 1'b0 ;
  assign dp0_wmi_wmi_wmiDh$wget = 38'b0 ;
  assign dp0_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp0_wmi_wmi_respF_x_wire$wget =
	     MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign dp0_wmi_wmi_respF_x_wire$whas = CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign dp0_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp0_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_dp0_bml_lbcf ;
  assign dp0_wmi_wmi_peerIsReady_1$wget = 1'b0 ;
  assign dp0_wmi_wmi_peerIsReady_1$whas = 1'b0 ;
  assign dp0_wmi_wmi_sThreadBusy_dw$wget = dp0_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp0_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ;
  assign dp0_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp0_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp0_wmi_getRequest && !dp0_wmi_mesgBusy ;
  assign dp0_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp0_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp0_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_dp0_rRdy ;
  assign dp0_wmi_dpControl$wget = dp0_dpControl ;
  assign dp0_wmi_dpControl$whas = 1'd1 ;
  assign dp0_wmi_nowW$wget = dp0_wti_nowReq[63:0] ;
  assign dp0_wmi_nowW$whas = 1'd1 ;
  assign dp0_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp0_bml_lclBufStart_1$whas = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp0_bml_lclBufDone_1$whas = dp0_wmi_mesgDone ;
  assign dp0_bml_remStart_1$wget = 1'd1 ;
  assign dp0_bml_remStart_1$whas = dp0_tlp_remStart ;
  assign dp0_bml_remDone_1$wget = 1'd1 ;
  assign dp0_bml_remDone_1$whas = dp0_tlp_remDone ;
  assign dp0_bml_fabDone_1$wget = 1'd1 ;
  assign dp0_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] != 2'd1 ;
  assign dp0_bml_fabAvail_1$wget = 1'd1 ;
  assign dp0_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] == 2'd1 ;
  assign dp0_bml_dpControl$wget = dp0_dpControl ;
  assign dp0_bml_dpControl$whas = 1'd1 ;
  assign dp0_wci_Es_mCmd_w$wget = 3'h0 ;
  assign dp0_wci_Es_mCmd_w$whas = 1'b0 ;
  assign dp0_wci_Es_mAddrSpace_w$wget = 1'b0 ;
  assign dp0_wci_Es_mAddrSpace_w$whas = 1'b0 ;
  assign dp0_wci_Es_mAddr_w$wget = 20'h0 ;
  assign dp0_wci_Es_mAddr_w$whas = 1'b0 ;
  assign dp0_wci_Es_mData_w$wget = 32'h0 ;
  assign dp0_wci_Es_mData_w$whas = 1'b0 ;
  assign dp0_wci_Es_mByteEn_w$wget = 4'h0 ;
  assign dp0_wci_Es_mByteEn_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mCmd_w$wget = 3'h0 ;
  assign dp0_wmi_Es_mCmd_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mReqInfo_w$wget = 1'b0 ;
  assign dp0_wmi_Es_mReqInfo_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mAddrSpace_w$wget = 1'b0 ;
  assign dp0_wmi_Es_mAddrSpace_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mAddr_w$wget = 14'h0 ;
  assign dp0_wmi_Es_mAddr_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mBurstLength_w$wget = 12'h0 ;
  assign dp0_wmi_Es_mBurstLength_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mData_w$wget = 32'h0 ;
  assign dp0_wmi_Es_mData_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mDataByteEn_w$wget = 4'h0 ;
  assign dp0_wmi_Es_mDataByteEn_w$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_outData_enqData$wget = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_s1[0] ;
  assign dp1_bram_serverAdapterA_outData_outData$wget =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_outDataCore$D_OUT :
	       dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_outData$whas =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h89205[1] || ab__h89205[0]) ;
  assign dp1_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_2$whas =
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_writeWithResp$wget =
	     (MUX_dp1_bram_memory$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h89205[1] || ab__h89205[0] } ;
  assign dp1_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_outData_enqData$wget = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_s1[0] ;
  assign dp1_bram_serverAdapterB_outData_outData$wget =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_outDataCore$D_OUT :
	       dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outData_outData$whas =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h90604[1] || ab__h90604[0]) ;
  assign dp1_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_2$whas =
	     dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_writeWithResp$wget =
	     (MUX_dp1_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h90604[1] || ab__h90604[0] } ;
  assign dp1_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_1_s1[0] ;
  assign dp1_bram_serverAdapterA_1_outData_outData$wget =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_outData$whas =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h92134[1] || ab__h92134[0]) ;
  assign dp1_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_1_cnt_2$whas =
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$wget =
	     (MUX_dp1_bram_memory_1$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h92134[1] || ab__h92134[0] } ;
  assign dp1_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_1_s1[0] ;
  assign dp1_bram_serverAdapterB_1_outData_outData$wget =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outData_outData$whas =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h93531[1] || ab__h93531[0]) ;
  assign dp1_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_1_cnt_2$whas =
	     dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$wget =
	     (MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h93531[1] || ab__h93531[0] } ;
  assign dp1_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_2_s1[0] ;
  assign dp1_bram_serverAdapterA_2_outData_outData$wget =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_outData$whas =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h95061[1] || ab__h95061[0]) ;
  assign dp1_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_2$whas =
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$wget =
	     (MUX_dp1_bram_memory_2$a_put_1__SEL_3 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h95061[1] || ab__h95061[0] } ;
  assign dp1_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_2_s1[0] ;
  assign dp1_bram_serverAdapterB_2_outData_outData$wget =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outData_outData$whas =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h96458[1] || ab__h96458[0]) ;
  assign dp1_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_2_cnt_2$whas =
	     dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$wget =
	     (MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h96458[1] || ab__h96458[0] } ;
  assign dp1_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_3_s1[0] ;
  assign dp1_bram_serverAdapterA_3_outData_outData$wget =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_outData$whas =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h97988[1] || ab__h97988[0]) ;
  assign dp1_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_3_cnt_2$whas =
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$wget =
	     (MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h97988[1] || ab__h97988[0] } ;
  assign dp1_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_3_s1[0] ;
  assign dp1_bram_serverAdapterB_3_outData_outData$wget =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outData_outData$whas =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h99385[1] || ab__h99385[0]) ;
  assign dp1_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_2$whas =
	     dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$wget =
	     (MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h99385[1] || ab__h99385[0] } ;
  assign dp1_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_wci_wciReq$wget = 60'd0 ;
  assign dp1_wci_wciReq$whas = 1'd1 ;
  assign dp1_wci_respF_x_wire$wget = MUX_dp1_wci_respF_q_0$write_1__VAL_2 ;
  assign dp1_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_cfrd ||
	     WILL_FIRE_RL_dp1_wci_cfwr ;
  assign dp1_wci_wEdge$wget = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_wEdge$whas = WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp1_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp1_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp1_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_wti_wtiReq$wget = 67'h0 ;
  assign dp1_wti_wtiReq$whas = 1'b0 ;
  assign dp1_tlp_remStart_1$wget = 1'd1 ;
  assign dp1_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;
  assign dp1_tlp_remDone_1$wget = 1'd1 ;
  assign dp1_tlp_remDone_1$whas = WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_nearBufReady_1$whas = CAN_FIRE_RL_dp1_rRdy_1 ;
  assign dp1_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_farBufReady_1$whas = CAN_FIRE_RL_dp1_rFRdy_1 ;
  assign dp1_tlp_creditReady_1$wget = 1'd1 ;
  assign dp1_tlp_creditReady_1$whas = CAN_FIRE_RL_dp1_rCredit_1 ;
  assign dp1_tlp_dpControl$wget = dp1_dpControl ;
  assign dp1_tlp_dpControl$whas = 1'd1 ;
  assign dp1_tlp_pullTagMatch_1$wget = 1'b0 ;
  assign dp1_tlp_pullTagMatch_1$whas = 1'b0 ;
  assign dp1_wmi_wmi_wmiReq$wget = 32'd0 ;
  assign dp1_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp1_wmi_wmi_wmiMFlag$wget = 32'h0 ;
  assign dp1_wmi_wmi_wmiMFlag$whas = 1'b0 ;
  assign dp1_wmi_wmi_wmiDh$wget = 38'b0 ;
  assign dp1_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp1_wmi_wmi_respF_x_wire$wget =
	     MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign dp1_wmi_wmi_respF_x_wire$whas = CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign dp1_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp1_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_dp1_bml_lbar ;
  assign dp1_wmi_wmi_peerIsReady_1$wget = 1'b0 ;
  assign dp1_wmi_wmi_peerIsReady_1$whas = 1'b0 ;
  assign dp1_wmi_wmi_sThreadBusy_dw$wget = dp1_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp1_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp1_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ;
  assign dp1_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp1_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp1_wmi_getRequest && !dp1_wmi_mesgBusy ;
  assign dp1_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp1_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp1_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_dp1_rRdy ;
  assign dp1_wmi_dpControl$wget = dp1_dpControl ;
  assign dp1_wmi_dpControl$whas = 1'd1 ;
  assign dp1_wmi_nowW$wget = dp1_wti_nowReq[63:0] ;
  assign dp1_wmi_nowW$whas = 1'd1 ;
  assign dp1_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp1_bml_lclBufStart_1$whas = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp1_bml_lclBufDone_1$whas = dp1_wmi_mesgDone ;
  assign dp1_bml_remStart_1$wget = 1'd1 ;
  assign dp1_bml_remStart_1$whas = dp1_tlp_remStart ;
  assign dp1_bml_remDone_1$wget = 1'd1 ;
  assign dp1_bml_remDone_1$whas = dp1_tlp_remDone ;
  assign dp1_bml_fabDone_1$wget = 1'd1 ;
  assign dp1_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] != 2'd1 ;
  assign dp1_bml_fabAvail_1$wget = 1'd1 ;
  assign dp1_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] == 2'd1 ;
  assign dp1_bml_dpControl$wget = dp1_dpControl ;
  assign dp1_bml_dpControl$whas = 1'd1 ;
  assign dp1_wci_Es_mCmd_w$wget = 3'h0 ;
  assign dp1_wci_Es_mCmd_w$whas = 1'b0 ;
  assign dp1_wci_Es_mAddrSpace_w$wget = 1'b0 ;
  assign dp1_wci_Es_mAddrSpace_w$whas = 1'b0 ;
  assign dp1_wci_Es_mAddr_w$wget = 20'h0 ;
  assign dp1_wci_Es_mAddr_w$whas = 1'b0 ;
  assign dp1_wci_Es_mData_w$wget = 32'h0 ;
  assign dp1_wci_Es_mData_w$whas = 1'b0 ;
  assign dp1_wci_Es_mByteEn_w$wget = 4'h0 ;
  assign dp1_wci_Es_mByteEn_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mCmd_w$wget = 3'h0 ;
  assign dp1_wmi_Es_mCmd_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mReqInfo_w$wget = 1'b0 ;
  assign dp1_wmi_Es_mReqInfo_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mAddrSpace_w$wget = 1'b0 ;
  assign dp1_wmi_Es_mAddrSpace_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mAddr_w$wget = 14'h0 ;
  assign dp1_wmi_Es_mAddr_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mBurstLength_w$wget = 12'h0 ;
  assign dp1_wmi_Es_mBurstLength_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mData_w$wget = 32'h0 ;
  assign dp1_wmi_Es_mData_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mDataByteEn_w$wget = 4'h0 ;
  assign dp1_wmi_Es_mDataByteEn_w$whas = 1'b0 ;
  assign pciw_pci0_pwTrnTx$whas =
	     !pciw_pci0_pcie_ep$trn_tdst_rdy_n && pciw_fI2P$EMPTY_N ;
  assign pciw_pci0_pwTrnRx$whas =
	     !pciw_pci0_pcie_ep$trn_rsrc_rdy_n && pciw_fP2I$FULL_N ;
  assign pciw_p2iAF_enq_pw$whas =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     pciw_fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;
  assign pciw_p2iAF_deq_pw$whas = CAN_FIRE_RL_ClientServerRequest ;
  assign pciw_p2iAF_sClear_pw$whas = 1'b0 ;
  assign pciw_p2iAF_dClear_pw$whas = 1'b0 ;
  assign pciw_p2iAF_deq_happened$whas = 1'b0 ;
  assign pciw_i2pAF_enq_pw$whas = CAN_FIRE_RL_ClientServerResponse ;
  assign pciw_i2pAF_deq_pw$whas =
	     CAN_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;
  assign pciw_i2pAF_sClear_pw$whas = 1'b0 ;
  assign pciw_i2pAF_dClear_pw$whas = 1'b0 ;
  assign pciw_i2pAF_deq_happened$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadResp && dp0_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_wci_reqF_r_enq$whas = 1'b0 ;
  assign dp0_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_respF_dequeueing$whas = dp0_wci_respF_c_r != 2'd0 ;
  assign dp0_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp0_wci_wci_cfwr_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign dp0_wci_wci_cfrd_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp0_wci_wci_ctrl_pw$whas =
	     dp0_wci_reqF$EMPTY_N && !dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp0_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp0_dpControl[3:2] != 2'd1 && !dp0_wmi_mesgMeta[128] ||
	     dp0_dpControl[3:2] == 2'd1 && !dp0_wmi_mesgBufReady ;
  assign dp0_wmi_wmi_reqF_r_enq$whas = 1'b0 ;
  assign dp0_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_reqF_doResetEnq$whas = 1'b0 ;
  assign dp0_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_r_enq$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_doResetEnq$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_r_enq$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_r_deq$whas = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_doResetEnq$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_doResetDeq$whas = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_respF_enqueueing$whas = CAN_FIRE_RL_dp0_wmi_doReadResp ;
  assign dp0_wmi_wmi_respF_dequeueing$whas = dp0_wmi_wmi_respF_c_r != 2'd0 ;
  assign dp0_bml_lclBuf_incAction$whas = CAN_FIRE_RL_dp0_bml_lclAdvance ;
  assign dp0_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_remBuf_incAction$whas = WILL_FIRE_RL_dp0_bml_remAdvance ;
  assign dp0_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_fabBuf_incAction$whas =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp0_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_crdBuf_incAction$whas = CAN_FIRE_RL_dp0_bml_crdAdvance ;
  assign dp0_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp0_wmi_Es_mReqLast_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mDataValid_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mDataLast_w$whas = 1'b0 ;
  assign dp0_wmi_Es_mDataInfo_w$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadResp && dp1_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_wci_reqF_r_enq$whas = 1'b0 ;
  assign dp1_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_respF_dequeueing$whas = dp1_wci_respF_c_r != 2'd0 ;
  assign dp1_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp1_wci_wci_cfwr_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign dp1_wci_wci_cfrd_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp1_wci_wci_ctrl_pw$whas =
	     dp1_wci_reqF$EMPTY_N && !dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp1_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp1_dpControl[3:2] != 2'd1 && !dp1_wmi_mesgMeta[128] ||
	     dp1_dpControl[3:2] == 2'd1 && !dp1_wmi_mesgBufReady ;
  assign dp1_wmi_wmi_reqF_r_enq$whas = 1'b0 ;
  assign dp1_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_reqF_doResetEnq$whas = 1'b0 ;
  assign dp1_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_r_enq$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_doResetEnq$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_r_enq$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_r_deq$whas = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_doResetEnq$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_doResetDeq$whas = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_respF_enqueueing$whas = CAN_FIRE_RL_dp1_wmi_doReadResp ;
  assign dp1_wmi_wmi_respF_dequeueing$whas = dp1_wmi_wmi_respF_c_r != 2'd0 ;
  assign dp1_bml_lclBuf_incAction$whas = CAN_FIRE_RL_dp1_bml_cntLclDone ;
  assign dp1_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_remBuf_incAction$whas = WILL_FIRE_RL_dp1_bml_remAdvance ;
  assign dp1_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_fabBuf_incAction$whas =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp1_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_crdBuf_incAction$whas = CAN_FIRE_RL_dp1_bml_crdAdvance ;
  assign dp1_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp1_wmi_Es_mReqLast_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mDataValid_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mDataLast_w$whas = 1'b0 ;
  assign dp1_wmi_Es_mDataInfo_w$whas = 1'b0 ;
  assign dp0_bml_lclBuf_modulus_bw$wget = dp0_bml_lclBuf_modulus ;
  assign dp0_bml_remBuf_modulus_bw$wget = dp0_bml_remBuf_modulus ;
  assign dp0_bml_fabBuf_modulus_bw$wget = dp0_bml_fabBuf_modulus ;
  assign dp0_bml_crdBuf_modulus_bw$wget = dp0_bml_crdBuf_modulus ;
  assign dp1_bml_lclBuf_modulus_bw$wget = dp1_bml_lclBuf_modulus ;
  assign dp1_bml_remBuf_modulus_bw$wget = dp1_bml_remBuf_modulus ;
  assign dp1_bml_fabBuf_modulus_bw$wget = dp1_bml_fabBuf_modulus ;
  assign dp1_bml_crdBuf_modulus_bw$wget = dp1_bml_crdBuf_modulus ;

  // register dp0_bml_crdBuf_modulus
  assign dp0_bml_crdBuf_modulus$D_IN = dp0_bml_lclNumBufs - 16'd1 ;
  assign dp0_bml_crdBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_crdBuf_value
  assign dp0_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_crdBuf_value$write_1__VAL_3 ;
  assign dp0_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_dp0_bml_crdAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabAvail
  assign dp0_bml_fabAvail$D_IN = dp0_bml_fabAvail_1$whas ;
  assign dp0_bml_fabAvail$EN = 1'd1 ;

  // register dp0_bml_fabBuf_modulus
  assign dp0_bml_fabBuf_modulus$D_IN = dp0_bml_fabNumBufs - 16'd1 ;
  assign dp0_bml_fabBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabBuf_value
  assign dp0_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_fabBuf_value$write_1__VAL_3 ;
  assign dp0_bml_fabBuf_value$EN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabBufsAvail
  assign dp0_bml_fabBufsAvail$D_IN =
	     MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 ;
  assign dp0_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabDone
  assign dp0_bml_fabDone$D_IN = dp0_bml_fabDone_1$whas ;
  assign dp0_bml_fabDone$EN = 1'd1 ;

  // register dp0_bml_fabFlowAddr
  always@(MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_bml_initAccumulators or
	  dp0_bml_fabFlowBase or
	  WILL_FIRE_RL_dp0_bml_crdAdvance or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bml_fabFlowAddr$write_1__SEL_1:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp0_bml_initAccumulators:
	  dp0_bml_fabFlowAddr$D_IN = dp0_bml_fabFlowBase;
      WILL_FIRE_RL_dp0_bml_crdAdvance:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_3;
      default: dp0_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_crdAdvance ;

  // register dp0_bml_fabFlowBase
  assign dp0_bml_fabFlowBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp0_bml_fabFlowSize
  assign dp0_bml_fabFlowSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp0_bml_fabMesgAddr
  assign dp0_bml_fabMesgAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 :
	       dp0_bml_fabMesgBase ;
  assign dp0_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabMesgBase
  assign dp0_bml_fabMesgBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp0_bml_fabMesgSize
  assign dp0_bml_fabMesgSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp0_bml_fabMetaAddr
  assign dp0_bml_fabMetaAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 :
	       dp0_bml_fabMetaBase ;
  assign dp0_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabMetaBase
  assign dp0_bml_fabMetaBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp0_bml_fabMetaSize
  assign dp0_bml_fabMetaSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp0_bml_fabNumBufs
  assign dp0_bml_fabNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp0_bml_lclBufDone
  assign dp0_bml_lclBufDone$D_IN = dp0_wmi_mesgDone ;
  assign dp0_bml_lclBufDone$EN = 1'd1 ;

  // register dp0_bml_lclBufStart
  assign dp0_bml_lclBufStart$D_IN = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufStart$EN = 1'd1 ;

  // register dp0_bml_lclBuf_modulus
  assign dp0_bml_lclBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_lclBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBuf_value
  assign dp0_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_lclBuf_value$write_1__VAL_3 ;
  assign dp0_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_dp0_bml_lclAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBufsAR
  assign dp0_bml_lclBufsAR$D_IN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_2 ;
  assign dp0_bml_lclBufsAR$EN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBufsCF
  assign dp0_bml_lclBufsCF$D_IN =
	     MUX_dp0_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp0_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_dp0_bml_lbcf &&
	     (dp0_bml_lclBufDone_952_AND_IF_dp0_bml_dpContro_ETC___d4333 ||
	      NOT_dp0_bml_lclBufDone_952_019_AND_IF_dp0_bml__ETC___d2032) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclCredit
  assign dp0_bml_lclCredit$D_IN =
	     MUX_dp0_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp0_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign dp0_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclDones
  assign dp0_bml_lclDones$D_IN = dp0_bml_lclDones + 16'd1 ;
  assign dp0_bml_lclDones$EN = CAN_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclMesgAddr
  assign dp0_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_mesgBase :
	       MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 ;
  assign dp0_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclMetaAddr
  assign dp0_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 ;
  assign dp0_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;

  // register dp0_bml_lclNumBufs
  assign dp0_bml_lclNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp0_bml_lclStarts
  assign dp0_bml_lclStarts$D_IN = dp0_bml_lclStarts + 16'd1 ;
  assign dp0_bml_lclStarts$EN = CAN_FIRE_RL_dp0_bml_cntLclStart ;

  // register dp0_bml_mesgBase
  assign dp0_bml_mesgBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp0_bml_mesgSize
  assign dp0_bml_mesgSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp0_bml_metaBase
  assign dp0_bml_metaBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp0_bml_metaSize
  assign dp0_bml_metaSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp0_bml_remBuf_modulus
  assign dp0_bml_remBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_remBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_remBuf_value
  assign dp0_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_remBuf_value$write_1__VAL_3 ;
  assign dp0_bml_remBuf_value$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_remDone
  assign dp0_bml_remDone$D_IN = dp0_tlp_remDone ;
  assign dp0_bml_remDone$EN = 1'd1 ;

  // register dp0_bml_remDones
  assign dp0_bml_remDones$D_IN = dp0_bml_remDones + 16'd1 ;
  assign dp0_bml_remDones$EN = CAN_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remMesgAddr
  assign dp0_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_mesgBase :
	       MUX_dp0_bml_remMesgAddr$write_1__VAL_2 ;
  assign dp0_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remMetaAddr
  assign dp0_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_remMetaAddr$write_1__VAL_2 ;
  assign dp0_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_remAdvance ;

  // register dp0_bml_remStart
  assign dp0_bml_remStart$D_IN = dp0_tlp_remStart ;
  assign dp0_bml_remStart$EN = 1'd1 ;

  // register dp0_bml_remStarts
  assign dp0_bml_remStarts$D_IN = dp0_bml_remStarts + 16'd1 ;
  assign dp0_bml_remStarts$EN = CAN_FIRE_RL_dp0_bml_cntRemStart ;

  // register dp0_bram_serverAdapterA_1_cnt
  assign dp0_bram_serverAdapterA_1_cnt$D_IN =
	     dp0_bram_serverAdapterA_1_cnt_40_PLUS_IF_dp0_b_ETC___d346 ;
  assign dp0_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_1_s1
  assign dp0_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_1_s1_1$wget[1],
	       dp0_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_2_cnt
  assign dp0_bram_serverAdapterA_2_cnt$D_IN =
	     dp0_bram_serverAdapterA_2_cnt_58_PLUS_IF_dp0_b_ETC___d464 ;
  assign dp0_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_2_s1
  assign dp0_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_2_s1_1$wget[1],
	       dp0_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_3_cnt
  assign dp0_bram_serverAdapterA_3_cnt$D_IN =
	     dp0_bram_serverAdapterA_3_cnt_76_PLUS_IF_dp0_b_ETC___d582 ;
  assign dp0_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_3_s1
  assign dp0_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_3_s1_1$wget[1],
	       dp0_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterA_cnt
  assign dp0_bram_serverAdapterA_cnt$D_IN =
	     dp0_bram_serverAdapterA_cnt_22_PLUS_IF_dp0_bra_ETC___d228 ;
  assign dp0_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // register dp0_bram_serverAdapterA_s1
  assign dp0_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_s1_1$wget[1],
	       dp0_bram_serverAdapterA_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_1_cnt
  assign dp0_bram_serverAdapterB_1_cnt$D_IN =
	     dp0_bram_serverAdapterB_1_cnt_99_PLUS_IF_dp0_b_ETC___d405 ;
  assign dp0_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_1_s1
  assign dp0_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_1_s1_1$wget[1],
	       dp0_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_2_cnt
  assign dp0_bram_serverAdapterB_2_cnt$D_IN =
	     dp0_bram_serverAdapterB_2_cnt_17_PLUS_IF_dp0_b_ETC___d523 ;
  assign dp0_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_2_s1
  assign dp0_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_2_s1_1$wget[1],
	       dp0_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_3_cnt
  assign dp0_bram_serverAdapterB_3_cnt$D_IN =
	     dp0_bram_serverAdapterB_3_cnt_35_PLUS_IF_dp0_b_ETC___d641 ;
  assign dp0_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_3_s1
  assign dp0_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_3_s1_1$wget[1],
	       dp0_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register dp0_bram_serverAdapterB_cnt
  assign dp0_bram_serverAdapterB_cnt$D_IN =
	     dp0_bram_serverAdapterB_cnt_81_PLUS_IF_dp0_bra_ETC___d287 ;
  assign dp0_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // register dp0_bram_serverAdapterB_s1
  assign dp0_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_s1_1$wget[1],
	       dp0_bram_serverAdapterB_s1_1$wget[0] } ;
  assign dp0_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register dp0_dpControl
  assign dp0_dpControl$D_IN = dp0_wci_reqF$D_OUT[3:0] ;
  assign dp0_dpControl$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp0_tlp_creditReady
  assign dp0_tlp_creditReady$D_IN = CAN_FIRE_RL_dp0_rCredit_1 ;
  assign dp0_tlp_creditReady$EN = 1'd1 ;

  // register dp0_tlp_debugBdata
  assign dp0_tlp_debugBdata$D_IN =
	     { dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       dp0_bram_serverAdapterA_outData_outData$wget[7:0],
	       dp0_bram_serverAdapterA_outData_outData$wget[15:8],
	       dp0_bram_serverAdapterA_outData_outData$wget[23:16],
	       dp0_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign dp0_tlp_debugBdata$EN = CAN_FIRE_RL_dp0_tlp_read_NextResp ;

  // register dp0_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta or
	  dp0_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent: dp0_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	dp0_tlp_dmaDoTailEvent$D_IN =
	    MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_dmaPullRemainDWLen == 10'd1;
    default: dp0_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp0_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // register dp0_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h46293 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_dmaPullRemainDWLen$D_IN = thisRequestLength__h46293[11:2];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: dp0_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_dmaPullRemainDWSub
  assign dp0_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ?
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign dp0_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_dmaReqTag
  assign dp0_tlp_dmaReqTag$D_IN = dp0_tlp_dmaTag ;
  assign dp0_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_dmaTag
  assign dp0_tlp_dmaTag$D_IN = dp0_tlp_dmaTag + 5'd1 ;
  assign dp0_tlp_dmaTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_doXmtMetaBody
  assign dp0_tlp_doXmtMetaBody$D_IN = 1'b0 ;
  assign dp0_tlp_doXmtMetaBody$EN = 1'b0 ;

  // register dp0_tlp_fabFlowAddr
  assign dp0_tlp_fabFlowAddr$D_IN = dp0_bml_fabFlowAddr ;
  assign dp0_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMesgAccu
  assign dp0_tlp_fabMesgAccu$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ?
	       dp0_tlp_fabMesgAddr :
	       MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 ;
  assign dp0_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_fabMesgAddr
  assign dp0_tlp_fabMesgAddr$D_IN = dp0_bml_fabMesgAddr ;
  assign dp0_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMeta
  assign dp0_tlp_fabMeta$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ?
	       MUX_dp0_tlp_fabMeta$write_1__VAL_1 :
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign dp0_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // register dp0_tlp_fabMetaAddr
  assign dp0_tlp_fabMetaAddr$D_IN = dp0_bml_fabMetaAddr ;
  assign dp0_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_farBufReady
  assign dp0_tlp_farBufReady$D_IN = CAN_FIRE_RL_dp0_rFRdy_1 ;
  assign dp0_tlp_farBufReady$EN = 1'd1 ;

  // register dp0_tlp_flowDiagCount
  assign dp0_tlp_flowDiagCount$D_IN = dp0_tlp_flowDiagCount + 32'd1 ;
  assign dp0_tlp_flowDiagCount$EN = CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // register dp0_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_gotResponseHeader$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_gotResponseHeader$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_gotResponseHeader$D_IN = 1'd0;
      default: dp0_tlp_gotResponseHeader$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_inIgnorePkt
  assign dp0_tlp_inIgnorePkt$D_IN =
	     dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
	     dp0_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp0_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv && dp0_tlp_inF$D_OUT[152] ;

  // register dp0_tlp_maxPayloadSize
  assign dp0_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxPayloadSize$EN = 1'b0 ;

  // register dp0_tlp_maxReadReqSize
  assign dp0_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp0_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	  dp0_tlp_mesgComplReceived$D_IN = 17'd0;
      default: dp0_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;

  // register dp0_tlp_mesgLengthRemainPull
  assign dp0_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ?
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign dp0_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_mesgLengthRemainPush
  assign dp0_tlp_mesgLengthRemainPush$D_IN = 17'h0 ;
  assign dp0_tlp_mesgLengthRemainPush$EN = 1'b0 ;

  // register dp0_tlp_nearBufReady
  assign dp0_tlp_nearBufReady$D_IN = CAN_FIRE_RL_dp0_rRdy_1 ;
  assign dp0_tlp_nearBufReady$EN = 1'd1 ;

  // register dp0_tlp_outDwRemain
  assign dp0_tlp_outDwRemain$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ?
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // register dp0_tlp_postSeqDwell
  assign dp0_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell ?
	       MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign dp0_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // register dp0_tlp_pullTagMatch
  assign dp0_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag ;
  assign dp0_tlp_pullTagMatch$EN = 1'd1 ;

  // register dp0_tlp_rdRespDwRemain
  assign dp0_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ?
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;

  // register dp0_tlp_readHeaderSent
  assign dp0_tlp_readHeaderSent$D_IN =
	     MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp0_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_505_ULE_4___d1507 ;

  // register dp0_tlp_readNxtDWAddr
  assign dp0_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ?
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;

  // register dp0_tlp_readRemainDWLen
  assign dp0_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ?
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;

  // register dp0_tlp_readStarted
  assign dp0_tlp_readStarted$D_IN = MUX_dp0_tlp_readStarted$write_1__SEL_1 ;
  assign dp0_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_337_ULE_4___d1338 ;

  // register dp0_tlp_remDone
  assign dp0_tlp_remDone$D_IN = WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  assign dp0_tlp_remDone$EN = 1'd1 ;

  // register dp0_tlp_remMesgAccu
  assign dp0_tlp_remMesgAccu$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ?
	       dp0_tlp_remMesgAddr :
	       MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 ;
  assign dp0_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ;

  // register dp0_tlp_remMesgAddr
  assign dp0_tlp_remMesgAddr$D_IN = dp0_bml_remMesgAddr ;
  assign dp0_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_remMetaAddr
  assign dp0_tlp_remMetaAddr$D_IN = dp0_bml_remMetaAddr ;
  assign dp0_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_remStart
  assign dp0_tlp_remStart$D_IN = dp0_tlp_remStart_1$whas ;
  assign dp0_tlp_remStart$EN = 1'd1 ;

  // register dp0_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_reqMesgInFlight$D_IN = dp0_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_reqMesgInFlight$D_IN =
	      MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: dp0_tlp_reqMesgInFlight$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_reqMetaBodyInFlight
  assign dp0_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign dp0_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // register dp0_tlp_reqMetaInFlight
  assign dp0_tlp_reqMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;
  assign dp0_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_srcMesgAccu
  assign dp0_tlp_srcMesgAccu$D_IN = 32'h0 ;
  assign dp0_tlp_srcMesgAccu$EN = 1'b0 ;

  // register dp0_tlp_tlpMetaSent
  assign dp0_tlp_tlpMetaSent$D_IN = 1'b0 ;
  assign dp0_tlp_tlpMetaSent$EN = 1'b0 ;

  // register dp0_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_dp0_tlp_tlpRcv or
	  dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_tlpRcv:
	  dp0_tlp_tlpRcvBusy$D_IN = !dp0_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_tlpRcvBusy$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_tlpRcvBusy$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878;
      default: dp0_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // register dp0_tlp_tlpXmtBusy
  assign dp0_tlp_tlpXmtBusy$D_IN = MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 ;
  assign dp0_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     NOT_dp0_tlp_mRespF_first__085_BITS_71_TO_62_09_ETC___d1109 ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body &&
	     dp0_tlp_outDwRemain_114_ULE_4___d4530 ;

  // register dp0_tlp_writeDWAddr
  assign dp0_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeReq ?
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_writeReq || WILL_FIRE_RL_dp0_tlp_writeData ;

  // register dp0_tlp_writeLastBE
  assign dp0_tlp_writeLastBE$D_IN = dp0_tlp_mReqF$D_OUT[35:32] ;
  assign dp0_tlp_writeLastBE$EN = CAN_FIRE_RL_dp0_tlp_writeReq ;

  // register dp0_tlp_writeRemainDWLen
  assign dp0_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeReq ?
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_writeReq || WILL_FIRE_RL_dp0_tlp_writeData ;

  // register dp0_tlp_xmtMetaInFlight
  assign dp0_tlp_xmtMetaInFlight$D_IN = 1'b0 ;
  assign dp0_tlp_xmtMetaInFlight$EN = 1'b0 ;

  // register dp0_tlp_xmtMetaOK
  assign dp0_tlp_xmtMetaOK$D_IN = 1'b0 ;
  assign dp0_tlp_xmtMetaOK$EN = 1'b0 ;

  // register dp0_wci_cEdge
  assign dp0_wci_cEdge$D_IN = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_cEdge$EN = WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_cState
  assign dp0_wci_cState$D_IN = dp0_wci_nState ;
  assign dp0_wci_cState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge ;

  // register dp0_wci_ctlAckReg
  assign dp0_wci_ctlAckReg$D_IN = dp0_wci_ctlAckReg_1$whas ;
  assign dp0_wci_ctlAckReg$EN = 1'd1 ;

  // register dp0_wci_ctlOpActive
  assign dp0_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_illegalEdge
  assign dp0_wci_illegalEdge$D_IN =
	     !MUX_dp0_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp0_wci_illegalEdge$write_1__VAL_2 ;
  assign dp0_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ||
	     MUX_dp0_wci_illegalEdge$write_1__SEL_2 ;

  // register dp0_wci_nState
  always@(dp0_wci_reqF$D_OUT)
  begin
    case (dp0_wci_reqF$D_OUT[36:34])
      3'd0: dp0_wci_nState$D_IN = 3'd1;
      3'd1: dp0_wci_nState$D_IN = 3'd2;
      3'd2: dp0_wci_nState$D_IN = 3'd3;
      default: dp0_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp0_wci_nState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState == 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp0_wci_cState == 3'd1 || dp0_wci_cState == 3'd3) ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState == 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp0_wci_cState == 3'd3 || dp0_wci_cState == 3'd2 ||
	       dp0_wci_cState == 3'd1)) ;

  // register dp0_wci_reqF_countReg
  assign dp0_wci_reqF_countReg$D_IN = dp0_wci_reqF_countReg - 2'd1 ;
  assign dp0_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter ;

  // register dp0_wci_respF_c_r
  assign dp0_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr ?
	       MUX_dp0_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2 ;
  assign dp0_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_respF_q_0
  always@(WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 or
	  MUX_dp0_wci_respF_q_0$write_1__SEL_2 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr or dp0_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_1;
      MUX_dp0_wci_respF_q_0$write_1__SEL_2:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_0$D_IN = dp0_wci_respF_q_1;
      default: dp0_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_respF_q_1
  always@(WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_1$write_1__VAL_1 or
	  MUX_dp0_wci_respF_q_1$write_1__SEL_2 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_1$write_1__VAL_1;
      MUX_dp0_wci_respF_q_1$write_1__SEL_2:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp0_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;

  // register dp0_wci_sFlagReg
  assign dp0_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp0_wci_sFlagReg$EN = 1'd1 ;

  // register dp0_wci_sThreadBusy_d
  assign dp0_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp0_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp0_wmi_addr
  assign dp0_wmi_addr$D_IN =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp0_wmi_addr$write_1__VAL_1 :
	       dp0_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp0_wmi_addr$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_bufDwell
  assign dp0_wmi_bufDwell$D_IN =
	     (MUX_dp0_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3 ;
  assign dp0_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doDwell ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_bytesRemainReq
  assign dp0_wmi_bytesRemainReq$D_IN =
	     MUX_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_bytesRemainResp
  assign dp0_wmi_bytesRemainResp$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_doneWithMesg
  assign dp0_wmi_doneWithMesg$D_IN =
	     !MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ;
  assign dp0_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp0_wmi_doReadReq ||
	      WILL_FIRE_RL_dp0_wmi_doWriteReq) &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_lastMesg
  assign dp0_wmi_lastMesg$D_IN = dp0_wmi_thisMesg ;
  assign dp0_wmi_lastMesg$EN = CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_lclMesgAddr
  assign dp0_wmi_lclMesgAddr$D_IN = dp0_bml_lclMesgAddr[14:0] ;
  assign dp0_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp0_wmi_lclMetaAddr
  assign dp0_wmi_lclMetaAddr$D_IN = dp0_bml_lclMetaAddr[14:0] ;
  assign dp0_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp0_wmi_mesgBufReady
  assign dp0_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_dp0_rRdy ;
  assign dp0_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp0_wmi_mesgBusy
  assign dp0_wmi_mesgBusy$D_IN = !MUX_dp0_wmi_mesgBusy$write_1__SEL_1 ;
  assign dp0_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_dp0_wmi_doDwell && dp0_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_mesgCount
  assign dp0_wmi_mesgCount$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 ;
  assign dp0_wmi_mesgCount$EN = dp0_wmi_mesgDone_1$whas ;

  // register dp0_wmi_mesgDone
  assign dp0_wmi_mesgDone$D_IN = dp0_wmi_mesgDone_1$whas ;
  assign dp0_wmi_mesgDone$EN = 1'd1 ;

  // register dp0_wmi_mesgMeta
  assign dp0_wmi_mesgMeta$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp0_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp0_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_mesgStart
  assign dp0_wmi_mesgStart$D_IN = dp0_wmi_mesgStart_1$whas ;
  assign dp0_wmi_mesgStart$EN = 1'd1 ;

  // register dp0_wmi_metaBusy
  assign dp0_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp0_wmi_respMetadata ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ;

  // register dp0_wmi_p4B
  assign dp0_wmi_p4B$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp0_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_dp0_wmi_p4B$write_1__VAL_2 ;
  assign dp0_wmi_p4B$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_rdActive
  assign dp0_wmi_rdActive$D_IN =
	     !MUX_dp0_wmi_rdActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp0_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_reqCount
  assign dp0_wmi_reqCount$D_IN = dp0_wmi_reqCount + 16'd1 ;
  assign dp0_wmi_reqCount$EN = WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_thisMesg
  assign dp0_wmi_thisMesg$D_IN =
	     { dp0_wmi_mesgCount[7:0],
	       dp0_wmi_wmi_mFlagReg[31:24],
	       dp0_wmi_wmi_mFlagReg[15:0] } ;
  assign dp0_wmi_thisMesg$EN = CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_blockReq
  assign dp0_wmi_wmi_blockReq$D_IN =
	     !MUX_dp0_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[28] &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_dhF_countReg
  assign dp0_wmi_wmi_dhF_countReg$D_IN = dp0_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // register dp0_wmi_wmi_dhF_levelsValid
  assign dp0_wmi_wmi_dhF_levelsValid$D_IN = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // register dp0_wmi_wmi_errorSticky
  assign dp0_wmi_wmi_errorSticky$D_IN = 1'b0 /* unspecified value */  ;
  assign dp0_wmi_wmi_errorSticky$EN = 1'b0 ;

  // register dp0_wmi_wmi_mFlagF_countReg
  assign dp0_wmi_wmi_mFlagF_countReg$D_IN =
	     dp0_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  assign dp0_wmi_wmi_mFlagF_levelsValid$D_IN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ||
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp0_wmi_wmi_mFlagReg
  assign dp0_wmi_wmi_mFlagReg$D_IN = dp0_wmi_wmi_mFlagF$D_OUT ;
  assign dp0_wmi_wmi_mFlagReg$EN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp0_wmi_wmi_operateD
  assign dp0_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_dp0_bml_lbcf ;
  assign dp0_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp0_wmi_wmi_peerIsReady
  assign dp0_wmi_wmi_peerIsReady$D_IN = 1'b0 ;
  assign dp0_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp0_wmi_wmi_reqF_countReg
  assign dp0_wmi_wmi_reqF_countReg$D_IN = dp0_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // register dp0_wmi_wmi_reqF_levelsValid
  assign dp0_wmi_wmi_reqF_levelsValid$D_IN = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_wmi_respF_c_r
  assign dp0_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr ?
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign dp0_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_dp0_wmi_wmi_respF_both or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr or dp0_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_wmi_respF_both:
	  dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_dp0_wmi_wmi_respF_q_0$write_1__SEL_2:
	  dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr:
	  dp0_wmi_wmi_respF_q_0$D_IN = dp0_wmi_wmi_respF_q_1;
      default: dp0_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_dp0_wmi_wmi_respF_both or
	  MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_wmi_respF_both:
	  dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_dp0_wmi_wmi_respF_q_1$write_1__SEL_2:
	  dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr:
	  dp0_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp0_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr &&
	     dp0_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_sFlagReg
  assign dp0_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h78921[7:0], y_avValue__h78901[23:0] } ;
  assign dp0_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_wmi_statusR
  assign dp0_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign dp0_wmi_wmi_statusR$EN = 1'b0 ;

  // register dp0_wmi_wmi_trafficSticky
  assign dp0_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp0_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp0_wmi_wrActive
  assign dp0_wmi_wrActive$D_IN =
	     !MUX_dp0_wmi_wrActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp0_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_wrFinalize
  assign dp0_wmi_wrFinalize$D_IN = MUX_dp0_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp0_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd4 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wrtCount
  assign dp0_wmi_wrtCount$D_IN = dp0_wmi_wrtCount + 16'd1 ;
  assign dp0_wmi_wrtCount$EN = WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // register dp0_wti_nowReq
  assign dp0_wti_nowReq$D_IN = 67'h0 ;
  assign dp0_wti_nowReq$EN = 1'b0 ;

  // register dp1_bml_crdBuf_modulus
  assign dp1_bml_crdBuf_modulus$D_IN = dp1_bml_lclNumBufs - 16'd1 ;
  assign dp1_bml_crdBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_crdBuf_value
  assign dp1_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_crdBuf_value$write_1__VAL_3 ;
  assign dp1_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_dp1_bml_crdAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabAvail
  assign dp1_bml_fabAvail$D_IN = dp1_bml_fabAvail_1$whas ;
  assign dp1_bml_fabAvail$EN = 1'd1 ;

  // register dp1_bml_fabBuf_modulus
  assign dp1_bml_fabBuf_modulus$D_IN = dp1_bml_fabNumBufs - 16'd1 ;
  assign dp1_bml_fabBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabBuf_value
  assign dp1_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_fabBuf_value$write_1__VAL_3 ;
  assign dp1_bml_fabBuf_value$EN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabBufsAvail
  assign dp1_bml_fabBufsAvail$D_IN =
	     MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 ;
  assign dp1_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabDone
  assign dp1_bml_fabDone$D_IN = dp1_bml_fabDone_1$whas ;
  assign dp1_bml_fabDone$EN = 1'd1 ;

  // register dp1_bml_fabFlowAddr
  always@(MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_bml_initAccumulators or
	  dp1_bml_fabFlowBase or
	  WILL_FIRE_RL_dp1_bml_crdAdvance or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bml_fabFlowAddr$write_1__SEL_1:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp1_bml_initAccumulators:
	  dp1_bml_fabFlowAddr$D_IN = dp1_bml_fabFlowBase;
      WILL_FIRE_RL_dp1_bml_crdAdvance:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_3;
      default: dp1_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_crdAdvance ;

  // register dp1_bml_fabFlowBase
  assign dp1_bml_fabFlowBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp1_bml_fabFlowSize
  assign dp1_bml_fabFlowSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp1_bml_fabMesgAddr
  assign dp1_bml_fabMesgAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 :
	       dp1_bml_fabMesgBase ;
  assign dp1_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabMesgBase
  assign dp1_bml_fabMesgBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp1_bml_fabMesgSize
  assign dp1_bml_fabMesgSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp1_bml_fabMetaAddr
  assign dp1_bml_fabMetaAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 :
	       dp1_bml_fabMetaBase ;
  assign dp1_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabMetaBase
  assign dp1_bml_fabMetaBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp1_bml_fabMetaSize
  assign dp1_bml_fabMetaSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp1_bml_fabNumBufs
  assign dp1_bml_fabNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp1_bml_lclBufDone
  assign dp1_bml_lclBufDone$D_IN = dp1_wmi_mesgDone ;
  assign dp1_bml_lclBufDone$EN = 1'd1 ;

  // register dp1_bml_lclBufStart
  assign dp1_bml_lclBufStart$D_IN = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufStart$EN = 1'd1 ;

  // register dp1_bml_lclBuf_modulus
  assign dp1_bml_lclBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_lclBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBuf_value
  assign dp1_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_lclBuf_value$write_1__VAL_3 ;
  assign dp1_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_dp1_bml_cntLclDone ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBufsAR
  assign dp1_bml_lclBufsAR$D_IN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_2 ;
  assign dp1_bml_lclBufsAR$EN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBufsCF
  assign dp1_bml_lclBufsCF$D_IN =
	     MUX_dp1_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp1_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_dp1_bml_lbcf &&
	     (dp1_bml_lclBufDone_967_AND_IF_dp1_bml_dpContro_ETC___d4353 ||
	      NOT_dp1_bml_lclBufDone_967_034_AND_IF_dp1_bml__ETC___d4047) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclCredit
  assign dp1_bml_lclCredit$D_IN =
	     MUX_dp1_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp1_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign dp1_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclDones
  assign dp1_bml_lclDones$D_IN = dp1_bml_lclDones + 16'd1 ;
  assign dp1_bml_lclDones$EN = CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // register dp1_bml_lclMesgAddr
  assign dp1_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 ;
  assign dp1_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclMetaAddr
  assign dp1_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 ;
  assign dp1_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;

  // register dp1_bml_lclNumBufs
  assign dp1_bml_lclNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp1_bml_lclStarts
  assign dp1_bml_lclStarts$D_IN = dp1_bml_lclStarts + 16'd1 ;
  assign dp1_bml_lclStarts$EN = CAN_FIRE_RL_dp1_bml_cntLclStart ;

  // register dp1_bml_mesgBase
  assign dp1_bml_mesgBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp1_bml_mesgSize
  assign dp1_bml_mesgSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp1_bml_metaBase
  assign dp1_bml_metaBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp1_bml_metaSize
  assign dp1_bml_metaSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp1_bml_remBuf_modulus
  assign dp1_bml_remBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_remBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_remBuf_value
  assign dp1_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_remBuf_value$write_1__VAL_3 ;
  assign dp1_bml_remBuf_value$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_remDone
  assign dp1_bml_remDone$D_IN = dp1_tlp_remDone ;
  assign dp1_bml_remDone$EN = 1'd1 ;

  // register dp1_bml_remDones
  assign dp1_bml_remDones$D_IN = dp1_bml_remDones + 16'd1 ;
  assign dp1_bml_remDones$EN = CAN_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remMesgAddr
  assign dp1_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_remMesgAddr$write_1__VAL_2 ;
  assign dp1_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remMetaAddr
  assign dp1_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_remMetaAddr$write_1__VAL_2 ;
  assign dp1_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;

  // register dp1_bml_remStart
  assign dp1_bml_remStart$D_IN = dp1_tlp_remStart ;
  assign dp1_bml_remStart$EN = 1'd1 ;

  // register dp1_bml_remStarts
  assign dp1_bml_remStarts$D_IN = dp1_bml_remStarts + 16'd1 ;
  assign dp1_bml_remStarts$EN = CAN_FIRE_RL_dp1_bml_cntRemStart ;

  // register dp1_bram_serverAdapterA_1_cnt
  assign dp1_bram_serverAdapterA_1_cnt$D_IN =
	     dp1_bram_serverAdapterA_1_cnt_344_PLUS_IF_dp1__ETC___d2350 ;
  assign dp1_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_1_s1
  assign dp1_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_1_s1_1$wget[1],
	       dp1_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_2_cnt
  assign dp1_bram_serverAdapterA_2_cnt$D_IN =
	     dp1_bram_serverAdapterA_2_cnt_462_PLUS_IF_dp1__ETC___d2468 ;
  assign dp1_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_2_s1
  assign dp1_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_2_s1_1$wget[1],
	       dp1_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_3_cnt
  assign dp1_bram_serverAdapterA_3_cnt$D_IN =
	     dp1_bram_serverAdapterA_3_cnt_580_PLUS_IF_dp1__ETC___d2586 ;
  assign dp1_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_3_s1
  assign dp1_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_3_s1_1$wget[1],
	       dp1_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterA_cnt
  assign dp1_bram_serverAdapterA_cnt$D_IN =
	     dp1_bram_serverAdapterA_cnt_226_PLUS_IF_dp1_br_ETC___d2232 ;
  assign dp1_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // register dp1_bram_serverAdapterA_s1
  assign dp1_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_s1_1$wget[1],
	       dp1_bram_serverAdapterA_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_1_cnt
  assign dp1_bram_serverAdapterB_1_cnt$D_IN =
	     dp1_bram_serverAdapterB_1_cnt_403_PLUS_IF_dp1__ETC___d2409 ;
  assign dp1_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_1_s1
  assign dp1_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_1_s1_1$wget[1],
	       dp1_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_2_cnt
  assign dp1_bram_serverAdapterB_2_cnt$D_IN =
	     dp1_bram_serverAdapterB_2_cnt_521_PLUS_IF_dp1__ETC___d2527 ;
  assign dp1_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_2_s1
  assign dp1_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_2_s1_1$wget[1],
	       dp1_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_3_cnt
  assign dp1_bram_serverAdapterB_3_cnt$D_IN =
	     dp1_bram_serverAdapterB_3_cnt_639_PLUS_IF_dp1__ETC___d2645 ;
  assign dp1_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_3_s1
  assign dp1_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_3_s1_1$wget[1],
	       dp1_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register dp1_bram_serverAdapterB_cnt
  assign dp1_bram_serverAdapterB_cnt$D_IN =
	     dp1_bram_serverAdapterB_cnt_285_PLUS_IF_dp1_br_ETC___d2291 ;
  assign dp1_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // register dp1_bram_serverAdapterB_s1
  assign dp1_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_s1_1$wget[1],
	       dp1_bram_serverAdapterB_s1_1$wget[0] } ;
  assign dp1_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register dp1_dpControl
  assign dp1_dpControl$D_IN = dp1_wci_reqF$D_OUT[3:0] ;
  assign dp1_dpControl$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp1_tlp_creditReady
  assign dp1_tlp_creditReady$D_IN = CAN_FIRE_RL_dp1_rCredit_1 ;
  assign dp1_tlp_creditReady$EN = 1'd1 ;

  // register dp1_tlp_debugBdata
  assign dp1_tlp_debugBdata$D_IN =
	     { dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       dp1_bram_serverAdapterA_outData_outData$wget[7:0],
	       dp1_bram_serverAdapterA_outData_outData$wget[15:8],
	       dp1_bram_serverAdapterA_outData_outData$wget[23:16],
	       dp1_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign dp1_tlp_debugBdata$EN = CAN_FIRE_RL_dp1_tlp_read_NextResp ;

  // register dp1_tlp_dmaDoTailEvent
  assign dp1_tlp_dmaDoTailEvent$D_IN = 1'b0 ;
  assign dp1_tlp_dmaDoTailEvent$EN = 1'b0 ;

  // register dp1_tlp_dmaPullRemainDWLen
  assign dp1_tlp_dmaPullRemainDWLen$D_IN = 10'h0 ;
  assign dp1_tlp_dmaPullRemainDWLen$EN = 1'b0 ;

  // register dp1_tlp_dmaPullRemainDWSub
  assign dp1_tlp_dmaPullRemainDWSub$D_IN = 10'h0 ;
  assign dp1_tlp_dmaPullRemainDWSub$EN = 1'b0 ;

  // register dp1_tlp_dmaReqTag
  assign dp1_tlp_dmaReqTag$D_IN = 5'h0 ;
  assign dp1_tlp_dmaReqTag$EN = 1'b0 ;

  // register dp1_tlp_dmaTag
  assign dp1_tlp_dmaTag$D_IN = 5'h0 ;
  assign dp1_tlp_dmaTag$EN = 1'b0 ;

  // register dp1_tlp_doXmtMetaBody
  assign dp1_tlp_doXmtMetaBody$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_fabFlowAddr
  assign dp1_tlp_fabFlowAddr$D_IN = dp1_bml_fabFlowAddr ;
  assign dp1_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMesgAccu
  assign dp1_tlp_fabMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_fabMesgAddr :
	       MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 ;
  assign dp1_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ;

  // register dp1_tlp_fabMesgAddr
  assign dp1_tlp_fabMesgAddr$D_IN = dp1_bml_fabMesgAddr ;
  assign dp1_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMeta
  assign dp1_tlp_fabMeta$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       MUX_dp1_tlp_fabMeta$write_1__VAL_1 :
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign dp1_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // register dp1_tlp_fabMetaAddr
  assign dp1_tlp_fabMetaAddr$D_IN = dp1_bml_fabMetaAddr ;
  assign dp1_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_farBufReady
  assign dp1_tlp_farBufReady$D_IN = CAN_FIRE_RL_dp1_rFRdy_1 ;
  assign dp1_tlp_farBufReady$EN = 1'd1 ;

  // register dp1_tlp_flowDiagCount
  assign dp1_tlp_flowDiagCount$D_IN = dp1_tlp_flowDiagCount + 32'd1 ;
  assign dp1_tlp_flowDiagCount$EN = CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell ;

  // register dp1_tlp_gotResponseHeader
  assign dp1_tlp_gotResponseHeader$D_IN = 1'b0 ;
  assign dp1_tlp_gotResponseHeader$EN = 1'b0 ;

  // register dp1_tlp_inIgnorePkt
  assign dp1_tlp_inIgnorePkt$D_IN =
	     dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
	     dp1_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp1_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv && dp1_tlp_inF$D_OUT[152] ;

  // register dp1_tlp_maxPayloadSize
  assign dp1_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign dp1_tlp_maxPayloadSize$EN = 1'b0 ;

  // register dp1_tlp_maxReadReqSize
  assign dp1_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp1_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp1_tlp_mesgComplReceived
  assign dp1_tlp_mesgComplReceived$D_IN = 17'h0 ;
  assign dp1_tlp_mesgComplReceived$EN = 1'b0 ;

  // register dp1_tlp_mesgLengthRemainPull
  assign dp1_tlp_mesgLengthRemainPull$D_IN = 17'h0 ;
  assign dp1_tlp_mesgLengthRemainPull$EN = 1'b0 ;

  // register dp1_tlp_mesgLengthRemainPush
  assign dp1_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ?
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign dp1_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_nearBufReady
  assign dp1_tlp_nearBufReady$D_IN = CAN_FIRE_RL_dp1_rRdy_1 ;
  assign dp1_tlp_nearBufReady$EN = 1'd1 ;

  // register dp1_tlp_outDwRemain
  assign dp1_tlp_outDwRemain$D_IN =
	     MUX_dp1_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;

  // register dp1_tlp_postSeqDwell
  assign dp1_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell ?
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign dp1_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // register dp1_tlp_pullTagMatch
  assign dp1_tlp_pullTagMatch$D_IN = 1'b0 ;
  assign dp1_tlp_pullTagMatch$EN = 1'd1 ;

  // register dp1_tlp_rdRespDwRemain
  assign dp1_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ?
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;

  // register dp1_tlp_readHeaderSent
  assign dp1_tlp_readHeaderSent$D_IN =
	     MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp1_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_520_ULE_4___d3522 ;

  // register dp1_tlp_readNxtDWAddr
  assign dp1_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ?
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;

  // register dp1_tlp_readRemainDWLen
  assign dp1_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ?
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;

  // register dp1_tlp_readStarted
  assign dp1_tlp_readStarted$D_IN = MUX_dp1_tlp_readStarted$write_1__SEL_1 ;
  assign dp1_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_352_ULE_4___d3353 ;

  // register dp1_tlp_remDone
  assign dp1_tlp_remDone$D_IN = WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_remDone$EN = 1'd1 ;

  // register dp1_tlp_remMesgAccu
  assign dp1_tlp_remMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_remMesgAddr :
	       MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 ;
  assign dp1_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_remMesgAddr
  assign dp1_tlp_remMesgAddr$D_IN = dp1_bml_remMesgAddr ;
  assign dp1_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_remMetaAddr
  assign dp1_tlp_remMetaAddr$D_IN = dp1_bml_remMetaAddr ;
  assign dp1_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_remStart
  assign dp1_tlp_remStart$D_IN = dp1_tlp_remStart_1$whas ;
  assign dp1_tlp_remStart$EN = 1'd1 ;

  // register dp1_tlp_reqMesgInFlight
  assign dp1_tlp_reqMesgInFlight$D_IN = 1'b0 ;
  assign dp1_tlp_reqMesgInFlight$EN = 1'b0 ;

  // register dp1_tlp_reqMetaBodyInFlight
  assign dp1_tlp_reqMetaBodyInFlight$D_IN = 1'b0 ;
  assign dp1_tlp_reqMetaBodyInFlight$EN = 1'b0 ;

  // register dp1_tlp_reqMetaInFlight
  assign dp1_tlp_reqMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;
  assign dp1_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ;

  // register dp1_tlp_srcMesgAccu
  assign dp1_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_fabMesgAddr :
	       MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign dp1_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;

  // register dp1_tlp_tlpMetaSent
  assign dp1_tlp_tlpMetaSent$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;

  // register dp1_tlp_tlpRcvBusy
  assign dp1_tlp_tlpRcvBusy$D_IN = !dp1_tlp_inF$D_OUT[151] ;
  assign dp1_tlp_tlpRcvBusy$EN = WILL_FIRE_RL_dp1_tlp_tlpRcv ;

  // register dp1_tlp_tlpXmtBusy
  always@(MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 or
	  dp1_tlp_mRespF$D_OUT or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1:
	  dp1_tlp_tlpXmtBusy$D_IN = dp1_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: dp1_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo13 ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__863_BITS_71_TO_62_954_ULE_1___d4275 ||
	     (WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody) &&
	     dp1_tlp_outDwRemain_980_ULE_4___d4535 ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_writeDWAddr
  assign dp1_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeReq ?
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_writeReq || WILL_FIRE_RL_dp1_tlp_writeData ;

  // register dp1_tlp_writeLastBE
  assign dp1_tlp_writeLastBE$D_IN = dp1_tlp_mReqF$D_OUT[35:32] ;
  assign dp1_tlp_writeLastBE$EN = CAN_FIRE_RL_dp1_tlp_writeReq ;

  // register dp1_tlp_writeRemainDWLen
  assign dp1_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeReq ?
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_writeReq || WILL_FIRE_RL_dp1_tlp_writeData ;

  // register dp1_tlp_xmtMetaInFlight
  assign dp1_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  dp1_tlp_mesgLengthRemainPush or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody:
	dp1_tlp_xmtMetaOK$D_IN = dp1_tlp_mesgLengthRemainPush == 17'd0;
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 ||
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3:
	dp1_tlp_xmtMetaOK$D_IN = 1'd1;
    WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead: dp1_tlp_xmtMetaOK$D_IN = 1'd0;
    default: dp1_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp1_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_980_ULE_4___d4535 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_wci_cEdge
  assign dp1_wci_cEdge$D_IN = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_cEdge$EN = WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_cState
  assign dp1_wci_cState$D_IN = dp1_wci_nState ;
  assign dp1_wci_cState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge ;

  // register dp1_wci_ctlAckReg
  assign dp1_wci_ctlAckReg$D_IN = dp1_wci_ctlAckReg_1$whas ;
  assign dp1_wci_ctlAckReg$EN = 1'd1 ;

  // register dp1_wci_ctlOpActive
  assign dp1_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_illegalEdge
  assign dp1_wci_illegalEdge$D_IN =
	     !MUX_dp1_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp1_wci_illegalEdge$write_1__VAL_2 ;
  assign dp1_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ||
	     MUX_dp1_wci_illegalEdge$write_1__SEL_2 ;

  // register dp1_wci_nState
  always@(dp1_wci_reqF$D_OUT)
  begin
    case (dp1_wci_reqF$D_OUT[36:34])
      3'd0: dp1_wci_nState$D_IN = 3'd1;
      3'd1: dp1_wci_nState$D_IN = 3'd2;
      3'd2: dp1_wci_nState$D_IN = 3'd3;
      default: dp1_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp1_wci_nState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState == 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp1_wci_cState == 3'd1 || dp1_wci_cState == 3'd3) ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState == 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp1_wci_cState == 3'd3 || dp1_wci_cState == 3'd2 ||
	       dp1_wci_cState == 3'd1)) ;

  // register dp1_wci_reqF_countReg
  assign dp1_wci_reqF_countReg$D_IN = dp1_wci_reqF_countReg - 2'd1 ;
  assign dp1_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter ;

  // register dp1_wci_respF_c_r
  assign dp1_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr ?
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2 ;
  assign dp1_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_respF_q_0
  always@(WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 or
	  MUX_dp1_wci_respF_q_0$write_1__SEL_2 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr or dp1_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_1;
      MUX_dp1_wci_respF_q_0$write_1__SEL_2:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_0$D_IN = dp1_wci_respF_q_1;
      default: dp1_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_respF_q_1
  always@(WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_1$write_1__VAL_1 or
	  MUX_dp1_wci_respF_q_1$write_1__SEL_2 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_1$write_1__VAL_1;
      MUX_dp1_wci_respF_q_1$write_1__SEL_2:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp1_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;

  // register dp1_wci_sFlagReg
  assign dp1_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp1_wci_sFlagReg$EN = 1'd1 ;

  // register dp1_wci_sThreadBusy_d
  assign dp1_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp1_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp1_wmi_addr
  assign dp1_wmi_addr$D_IN =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp1_wmi_addr$write_1__VAL_1 :
	       dp1_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp1_wmi_addr$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_bufDwell
  assign dp1_wmi_bufDwell$D_IN =
	     (MUX_dp1_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3 ;
  assign dp1_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doDwell ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_bytesRemainReq
  assign dp1_wmi_bytesRemainReq$D_IN =
	     MUX_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp1_wmi_bytesRemainResp$write_1__VAL_1 ;
  assign dp1_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_bytesRemainResp
  assign dp1_wmi_bytesRemainResp$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp1_wmi_bytesRemainResp$write_1__VAL_1 :
	       MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp1_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_doneWithMesg
  assign dp1_wmi_doneWithMesg$D_IN =
	     !MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ;
  assign dp1_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp1_wmi_doReadReq ||
	      WILL_FIRE_RL_dp1_wmi_doWriteReq) &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_lastMesg
  assign dp1_wmi_lastMesg$D_IN = dp1_wmi_thisMesg ;
  assign dp1_wmi_lastMesg$EN = CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_lclMesgAddr
  assign dp1_wmi_lclMesgAddr$D_IN = dp1_bml_lclMesgAddr[14:0] ;
  assign dp1_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp1_wmi_lclMetaAddr
  assign dp1_wmi_lclMetaAddr$D_IN = dp1_bml_lclMetaAddr[14:0] ;
  assign dp1_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp1_wmi_mesgBufReady
  assign dp1_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_dp1_rRdy ;
  assign dp1_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp1_wmi_mesgBusy
  assign dp1_wmi_mesgBusy$D_IN = !MUX_dp1_wmi_mesgBusy$write_1__SEL_1 ;
  assign dp1_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_dp1_wmi_doDwell && dp1_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_mesgCount
  assign dp1_wmi_mesgCount$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 ;
  assign dp1_wmi_mesgCount$EN = dp1_wmi_mesgDone_1$whas ;

  // register dp1_wmi_mesgDone
  assign dp1_wmi_mesgDone$D_IN = dp1_wmi_mesgDone_1$whas ;
  assign dp1_wmi_mesgDone$EN = 1'd1 ;

  // register dp1_wmi_mesgMeta
  assign dp1_wmi_mesgMeta$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp1_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp1_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_mesgStart
  assign dp1_wmi_mesgStart$D_IN = dp1_wmi_mesgStart_1$whas ;
  assign dp1_wmi_mesgStart$EN = 1'd1 ;

  // register dp1_wmi_metaBusy
  assign dp1_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp1_wmi_respMetadata ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ;

  // register dp1_wmi_p4B
  assign dp1_wmi_p4B$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp1_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_dp1_wmi_p4B$write_1__VAL_2 ;
  assign dp1_wmi_p4B$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_rdActive
  assign dp1_wmi_rdActive$D_IN =
	     !MUX_dp1_wmi_rdActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp1_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_reqCount
  assign dp1_wmi_reqCount$D_IN = dp1_wmi_reqCount + 16'd1 ;
  assign dp1_wmi_reqCount$EN = WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_thisMesg
  assign dp1_wmi_thisMesg$D_IN =
	     { dp1_wmi_mesgCount[7:0],
	       dp1_wmi_wmi_mFlagReg[31:24],
	       dp1_wmi_wmi_mFlagReg[15:0] } ;
  assign dp1_wmi_thisMesg$EN = CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_blockReq
  assign dp1_wmi_wmi_blockReq$D_IN =
	     !MUX_dp1_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[28] &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_dhF_countReg
  assign dp1_wmi_wmi_dhF_countReg$D_IN = dp1_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // register dp1_wmi_wmi_dhF_levelsValid
  assign dp1_wmi_wmi_dhF_levelsValid$D_IN = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // register dp1_wmi_wmi_errorSticky
  assign dp1_wmi_wmi_errorSticky$D_IN = 1'b0 /* unspecified value */  ;
  assign dp1_wmi_wmi_errorSticky$EN = 1'b0 ;

  // register dp1_wmi_wmi_mFlagF_countReg
  assign dp1_wmi_wmi_mFlagF_countReg$D_IN =
	     dp1_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  assign dp1_wmi_wmi_mFlagF_levelsValid$D_IN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ||
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp1_wmi_wmi_mFlagReg
  assign dp1_wmi_wmi_mFlagReg$D_IN = dp1_wmi_wmi_mFlagF$D_OUT ;
  assign dp1_wmi_wmi_mFlagReg$EN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register dp1_wmi_wmi_operateD
  assign dp1_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_dp1_bml_lbar ;
  assign dp1_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp1_wmi_wmi_peerIsReady
  assign dp1_wmi_wmi_peerIsReady$D_IN = 1'b0 ;
  assign dp1_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp1_wmi_wmi_reqF_countReg
  assign dp1_wmi_wmi_reqF_countReg$D_IN = dp1_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // register dp1_wmi_wmi_reqF_levelsValid
  assign dp1_wmi_wmi_reqF_levelsValid$D_IN = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_wmi_respF_c_r
  assign dp1_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr ?
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign dp1_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_dp1_wmi_wmi_respF_both or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr or dp1_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_wmi_respF_both:
	  dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_dp1_wmi_wmi_respF_q_0$write_1__SEL_2:
	  dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr:
	  dp1_wmi_wmi_respF_q_0$D_IN = dp1_wmi_wmi_respF_q_1;
      default: dp1_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_dp1_wmi_wmi_respF_both or
	  MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_wmi_respF_both:
	  dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_dp1_wmi_wmi_respF_q_1$write_1__SEL_2:
	  dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr:
	  dp1_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp1_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr &&
	     dp1_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_sFlagReg
  assign dp1_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h156230[7:0], y_avValue__h156210[23:0] } ;
  assign dp1_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_wmi_statusR
  assign dp1_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign dp1_wmi_wmi_statusR$EN = 1'b0 ;

  // register dp1_wmi_wmi_trafficSticky
  assign dp1_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp1_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp1_wmi_wrActive
  assign dp1_wmi_wrActive$D_IN =
	     !MUX_dp1_wmi_wrActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp1_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_wrFinalize
  assign dp1_wmi_wrFinalize$D_IN = MUX_dp1_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp1_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd4 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wrtCount
  assign dp1_wmi_wrtCount$D_IN = dp1_wmi_wrtCount + 16'd1 ;
  assign dp1_wmi_wrtCount$EN = WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // register dp1_wti_nowReq
  assign dp1_wti_nowReq$D_IN = 67'h0 ;
  assign dp1_wti_nowReq$EN = 1'b0 ;

  // register noc_chompCnt
  assign noc_chompCnt$D_IN = noc_chompCnt + 8'd1 ;
  assign noc_chompCnt$EN =
	     noc_sm2$RDY_c1_request_get && noc_chompCnt != 8'd255 ;

  // register pciDevice
  assign pciDevice$D_IN = pciw_pciDevice$dD_OUT ;
  assign pciDevice$EN = 1'd1 ;

  // register pciw_Prelude_inst_changeSpecialWires_1_rg
  assign pciw_Prelude_inst_changeSpecialWires_1_rg$D_IN =
	     MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 ?
	       MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_Prelude_inst_changeSpecialWires_1_rg$EN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !pciw_fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // register pciw_Prelude_inst_changeSpecialWires_2_rg
  assign pciw_Prelude_inst_changeSpecialWires_2_rg$D_IN =
	     MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1 ?
	       MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_Prelude_inst_changeSpecialWires_2_rg$EN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     pciw_i2pS[135:128] != 8'd0 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;

  // register pciw_i2pAF_dInReset_isInReset
  assign pciw_i2pAF_dInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_i2pAF_dInReset_isInReset$EN = pciw_i2pAF_dInReset_isInReset ;

  // register pciw_i2pAF_head_wrapped
  assign pciw_i2pAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_i2pAF_deq_update_head &&
	     !pciw_i2pAF_head_wrapped ;
  assign pciw_i2pAF_head_wrapped$EN =
	     WILL_FIRE_RL_pciw_i2pAF_deq_update_head ||
	     pciw_i2pAF_dInReset_isInReset ;

  // register pciw_i2pAF_sInReset_isInReset
  assign pciw_i2pAF_sInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_i2pAF_sInReset_isInReset$EN = pciw_i2pAF_sInReset_isInReset ;

  // register pciw_i2pAF_tail_wrapped
  assign pciw_i2pAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_i2pAF_enq_update_tail &&
	     !pciw_i2pAF_tail_wrapped ;
  assign pciw_i2pAF_tail_wrapped$EN =
	     WILL_FIRE_RL_pciw_i2pAF_enq_update_tail ||
	     pciw_i2pAF_sInReset_isInReset ;

  // register pciw_i2pS
  assign pciw_i2pS$D_IN = noc_sm0$s_response_get ;
  assign pciw_i2pS$EN = CAN_FIRE_RL_ClientServerResponse ;

  // register pciw_p2iAF_dInReset_isInReset
  assign pciw_p2iAF_dInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_p2iAF_dInReset_isInReset$EN = pciw_p2iAF_dInReset_isInReset ;

  // register pciw_p2iAF_head_wrapped
  assign pciw_p2iAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_p2iAF_deq_update_head &&
	     !pciw_p2iAF_head_wrapped ;
  assign pciw_p2iAF_head_wrapped$EN =
	     WILL_FIRE_RL_pciw_p2iAF_deq_update_head ||
	     pciw_p2iAF_dInReset_isInReset ;

  // register pciw_p2iAF_sInReset_isInReset
  assign pciw_p2iAF_sInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_p2iAF_sInReset_isInReset$EN = pciw_p2iAF_sInReset_isInReset ;

  // register pciw_p2iAF_tail_wrapped
  assign pciw_p2iAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_p2iAF_enq_update_tail &&
	     !pciw_p2iAF_tail_wrapped ;
  assign pciw_p2iAF_tail_wrapped$EN =
	     WILL_FIRE_RL_pciw_p2iAF_enq_update_tail ||
	     pciw_p2iAF_sInReset_isInReset ;

  // register pciw_p2iS
  assign pciw_p2iS$D_IN =
	     MUX_pciw_p2iS$write_1__SEL_1 ?
	       MUX_pciw_p2iS$write_1__VAL_1 :
	       MUX_pciw_p2iS$write_1__VAL_2 ;
  assign pciw_p2iS$EN = pciw_p2iAF_enq_pw$whas ;

  // register pciw_pcie_irq_rInterruptDi
  assign pciw_pcie_irq_rInterruptDi$D_IN = pciw_pcie_irq_fifoAssert$dD_OUT ;
  assign pciw_pcie_irq_rInterruptDi$EN =
	     CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rInterruptN
  assign pciw_pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;
  assign pciw_pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pciw_pcie_irq_rInterrupting
  assign pciw_pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pciw_pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rMMEnabled
  assign pciw_pcie_irq_rMMEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pciw_pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pciw_pcie_irq_rMSIEnabled
  assign pciw_pcie_irq_rMSIEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pciw_pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // submodule cp
  assign cp$gps_ppsSyncIn_x = 1'b0 ;
  assign cp$server_request_put = noc_sm0$c0_request_get ;
  assign cp$switch_x = 3'h0 ;
  assign cp$wci_Vm_0_SData = 32'h0 ;
  assign cp$wci_Vm_0_SFlag = 2'h0 ;
  assign cp$wci_Vm_0_SResp = 2'h0 ;
  assign cp$wci_Vm_10_SData = 32'h0 ;
  assign cp$wci_Vm_10_SFlag = 2'h0 ;
  assign cp$wci_Vm_10_SResp = 2'h0 ;
  assign cp$wci_Vm_11_SData = 32'h0 ;
  assign cp$wci_Vm_11_SFlag = 2'h0 ;
  assign cp$wci_Vm_11_SResp = 2'h0 ;
  assign cp$wci_Vm_12_SData = 32'h0 ;
  assign cp$wci_Vm_12_SFlag = 2'h0 ;
  assign cp$wci_Vm_12_SResp = 2'h0 ;
  assign cp$wci_Vm_13_SData = 32'h0 ;
  assign cp$wci_Vm_13_SFlag = 2'h0 ;
  assign cp$wci_Vm_13_SResp = 2'h0 ;
  assign cp$wci_Vm_14_SData = 32'h0 ;
  assign cp$wci_Vm_14_SFlag = 2'h0 ;
  assign cp$wci_Vm_14_SResp = 2'h0 ;
  assign cp$wci_Vm_1_SData = 32'h0 ;
  assign cp$wci_Vm_1_SFlag = 2'h0 ;
  assign cp$wci_Vm_1_SResp = 2'h0 ;
  assign cp$wci_Vm_2_SData = 32'h0 ;
  assign cp$wci_Vm_2_SFlag = 2'h0 ;
  assign cp$wci_Vm_2_SResp = 2'h0 ;
  assign cp$wci_Vm_3_SData = 32'h0 ;
  assign cp$wci_Vm_3_SFlag = 2'h0 ;
  assign cp$wci_Vm_3_SResp = 2'h0 ;
  assign cp$wci_Vm_4_SData = 32'h0 ;
  assign cp$wci_Vm_4_SFlag = 2'h0 ;
  assign cp$wci_Vm_4_SResp = 2'h0 ;
  assign cp$wci_Vm_5_SData = 32'h0 ;
  assign cp$wci_Vm_5_SFlag = 2'h0 ;
  assign cp$wci_Vm_5_SResp = 2'h0 ;
  assign cp$wci_Vm_6_SData = 32'h0 ;
  assign cp$wci_Vm_6_SFlag = 2'h0 ;
  assign cp$wci_Vm_6_SResp = 2'h0 ;
  assign cp$wci_Vm_7_SData = 32'h0 ;
  assign cp$wci_Vm_7_SFlag = 2'h0 ;
  assign cp$wci_Vm_7_SResp = 2'h0 ;
  assign cp$wci_Vm_8_SData = 32'h0 ;
  assign cp$wci_Vm_8_SFlag = 2'h0 ;
  assign cp$wci_Vm_8_SResp = 2'h0 ;
  assign cp$wci_Vm_9_SData = 32'h0 ;
  assign cp$wci_Vm_9_SFlag = 2'h0 ;
  assign cp$wci_Vm_9_SResp = 2'h0 ;
  assign cp$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign cp$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign cp$wci_Vm_0_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_1_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_2_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_3_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_4_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_5_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_6_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_7_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_8_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_9_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_10_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_11_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_12_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_13_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_14_SThreadBusy = 1'b0 ;

  // submodule dp0_bram_memory
  always@(MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory$a_put_2__VAL_2 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_1:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory$a_put_1__SEL_2:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_2;
      MUX_dp0_bram_memory$a_put_1__SEL_3:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_4;
      default: dp0_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory$b_put_1__SEL_1:
	  dp0_bram_memory$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory$b_put_1__SEL_2:
	  dp0_bram_memory$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory$a_put_3__VAL_2 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_1:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory$a_put_1__SEL_2:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_2;
      MUX_dp0_bram_memory$a_put_1__SEL_3 || WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$DIA = 32'd0;
      default: dp0_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  MUX_dp0_bram_memory$b_put_3__VAL_4 or
	  MUX_dp0_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$b_put_1__SEL_2:
	  dp0_bram_memory$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory$DIB = MUX_dp0_bram_memory$b_put_3__VAL_4;
      MUX_dp0_bram_memory$b_put_1__SEL_1 || WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory$DIB = 32'd0;
      default: dp0_bram_memory$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory$WEA =
	     !MUX_dp0_bram_memory$a_put_1__SEL_3 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory$WEB =
	     !MUX_dp0_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4329 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_1
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_1:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_1$a_put_1__SEL_2:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_2;
      MUX_dp0_bram_memory_1$a_put_1__SEL_3:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_4;
      default: dp0_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_1$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_1$b_put_1__SEL_1:
	  dp0_bram_memory_1$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_1$b_put_1__SEL_2:
	  dp0_bram_memory_1$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_1$a_put_3__VAL_2 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_1:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_1$a_put_1__SEL_2:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory_1$a_put_3__VAL_2;
      MUX_dp0_bram_memory_1$a_put_1__SEL_3 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$DIA = 32'd0;
      default: dp0_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_1$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  MUX_dp0_bram_memory_1$b_put_3__VAL_4 or
	  MUX_dp0_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$b_put_1__SEL_2:
	  dp0_bram_memory_1$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_1$DIB = MUX_dp0_bram_memory_1$b_put_3__VAL_4;
      MUX_dp0_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_1$DIB = 32'd0;
      default: dp0_bram_memory_1$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_1$WEA =
	     !MUX_dp0_bram_memory_1$a_put_1__SEL_3 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_1$WEB =
	     !MUX_dp0_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4359 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_1$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_2
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_1:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_2$a_put_1__SEL_2:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_2;
      MUX_dp0_bram_memory_2$a_put_1__SEL_3:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_4;
      default: dp0_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_2$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_2$b_put_1__SEL_1:
	  dp0_bram_memory_2$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_2$b_put_1__SEL_2:
	  dp0_bram_memory_2$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_2$a_put_3__VAL_2 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_1:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_2$a_put_1__SEL_2:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory_2$a_put_3__VAL_2;
      MUX_dp0_bram_memory_2$a_put_1__SEL_3 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$DIA = 32'd0;
      default: dp0_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_nowW$wget or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  MUX_dp0_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_2$DIB = dp0_wmi_nowW$wget[63:32];
      MUX_dp0_bram_memory_2$b_put_1__SEL_2:
	  dp0_bram_memory_2$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp0_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_2$DIB = 32'd0;
      default: dp0_bram_memory_2$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_2$WEA =
	     !MUX_dp0_bram_memory_2$a_put_1__SEL_3 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_2$WEB =
	     !MUX_dp0_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4330 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_2$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_memory_3
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_1:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_3$a_put_1__SEL_2:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_4;
      default: dp0_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_lclMetaAddr or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_1 or
	  MUX_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_3$ADDRB = dp0_wmi_lclMetaAddr[14:4];
      MUX_dp0_bram_memory_3$b_put_1__SEL_1:
	  dp0_bram_memory_3$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      MUX_dp0_bram_memory_3$b_put_1__SEL_2:
	  dp0_bram_memory_3$ADDRB = MUX_dp0_bram_memory$b_put_2__VAL_1;
      default: dp0_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  MUX_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_1:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory$a_put_3__VAL_1;
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory_3$a_put_3__VAL_3;
      MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$DIA = 32'd0;
      default: dp0_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp0_wmi_doWriteFinalize or
	  dp0_wmi_nowW$wget or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_2 or
	  dp0_wmi_wmi_dhF$D_OUT or
	  MUX_dp0_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wmi_doWriteFinalize:
	  dp0_bram_memory_3$DIB = dp0_wmi_nowW$wget[31:0];
      MUX_dp0_bram_memory_3$b_put_1__SEL_2:
	  dp0_bram_memory_3$DIB = dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp0_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_wmi_reqMetadata:
	  dp0_bram_memory_3$DIB = 32'd0;
      default: dp0_bram_memory_3$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_3$WEA =
	     !MUX_dp0_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_3$WEB =
	     !MUX_dp0_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4331 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign dp0_bram_memory_3$ENB =
	     WILL_FIRE_RL_dp0_wmi_doReadReq && dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq && dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  assign dp0_bram_serverAdapterA_1_outDataCore$D_IN = dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  assign dp0_bram_serverAdapterA_2_outDataCore$D_IN = dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  assign dp0_bram_serverAdapterA_3_outDataCore$D_IN = dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterA_outDataCore
  assign dp0_bram_serverAdapterA_outDataCore$D_IN = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly ;
  assign dp0_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly ;
  assign dp0_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  assign dp0_bram_serverAdapterB_1_outDataCore$D_IN = dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  assign dp0_bram_serverAdapterB_2_outDataCore$D_IN = dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  assign dp0_bram_serverAdapterB_3_outDataCore$D_IN = dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule dp0_bram_serverAdapterB_outDataCore
  assign dp0_bram_serverAdapterB_outDataCore$D_IN = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly ;
  assign dp0_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly ;
  assign dp0_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule dp0_tlp_inF
  assign dp0_tlp_inF$D_IN = noc_sm1$c0_request_get ;
  assign dp0_tlp_inF$ENQ = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign dp0_tlp_inF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;
  assign dp0_tlp_inF$CLR = 1'b0 ;

  // submodule dp0_tlp_mReqF
  always@(MUX_dp0_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_3 or
	  MUX_dp0_tlp_mReqF$enq_1__SEL_4 or MUX_dp0_tlp_mReqF$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_mReqF$enq_1__SEL_1:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_3;
      MUX_dp0_tlp_mReqF$enq_1__SEL_4:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_4;
      default: dp0_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__89_BIT_152_040_AND_NOT_dp0__ETC___d1064 ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign dp0_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_337_ULE_4___d1338 ||
	     WILL_FIRE_RL_dp0_tlp_writeData ||
	     WILL_FIRE_RL_dp0_tlp_writeReq ;
  assign dp0_tlp_mReqF$CLR = 1'b0 ;

  // submodule dp0_tlp_mRespF
  assign dp0_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ?
	       MUX_dp0_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp0_tlp_mRespF$enq_1__VAL_2 ;
  assign dp0_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ;
  assign dp0_tlp_mRespF$CLR = 1'b0 ;

  // submodule dp0_tlp_outF
  always@(WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta or
	  MUX_dp0_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_dp0_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaTailEventSender or
	  MUX_dp0_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dataXmt_Header or
	  MUX_dp0_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp0_tlp_dataXmt_Body or MUX_dp0_tlp_outF$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaTailEventSender:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp0_tlp_dataXmt_Header:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp0_tlp_dataXmt_Body:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_5;
      default: dp0_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaTailEventSender ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;
  assign dp0_tlp_outF$DEQ = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign dp0_tlp_outF$CLR = 1'b0 ;

  // submodule dp0_tlp_readReq
  assign dp0_tlp_readReq$D_IN = dp0_tlp_mReqF$D_OUT[59:0] ;
  assign dp0_tlp_readReq$ENQ = CAN_FIRE_RL_dp0_tlp_read_FirstReq ;
  assign dp0_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_505_ULE_4___d1507 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp0_tlp_readReq$CLR = 1'b0 ;

  // submodule dp0_tlp_tailEventF
  assign dp0_tlp_tailEventF$ENQ = MUX_dp0_tlp_postSeqDwell$write_1__SEL_2 ;
  assign dp0_tlp_tailEventF$DEQ = WILL_FIRE_RL_dp0_tlp_dmaTailEventSender ;
  assign dp0_tlp_tailEventF$CLR = 1'b0 ;

  // submodule dp0_wci_reqF
  assign dp0_wci_reqF$D_IN = 60'd0 ;
  assign dp0_wci_reqF$ENQ = 1'b0 ;
  assign dp0_wci_reqF$DEQ = dp0_wci_reqF_r_deq$whas ;
  assign dp0_wci_reqF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_dhF
  assign dp0_wmi_wmi_dhF$D_IN = 38'b0 ;
  assign dp0_wmi_wmi_dhF$ENQ = 1'b0 ;
  assign dp0_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_mFlagF
  assign dp0_wmi_wmi_mFlagF$D_IN = 32'h0 ;
  assign dp0_wmi_wmi_mFlagF$ENQ = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF$DEQ =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_reqF
  assign dp0_wmi_wmi_reqF$D_IN = 32'd0 ;
  assign dp0_wmi_wmi_reqF$ENQ = 1'b0 ;
  assign dp0_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule dp1_bram_memory
  always@(MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory$a_put_2__VAL_2 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_1:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory$a_put_1__SEL_2:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_2;
      MUX_dp1_bram_memory$a_put_1__SEL_3:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_4;
      default: dp1_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory$b_put_1__SEL_1:
	  dp1_bram_memory$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory$b_put_1__SEL_2:
	  dp1_bram_memory$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory$a_put_3__VAL_2 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_1:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory$a_put_1__SEL_2:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_2;
      MUX_dp1_bram_memory$a_put_1__SEL_3 || WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$DIA = 32'd0;
      default: dp1_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  MUX_dp1_bram_memory$b_put_3__VAL_4 or
	  MUX_dp1_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$b_put_1__SEL_2:
	  dp1_bram_memory$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory$DIB = MUX_dp1_bram_memory$b_put_3__VAL_4;
      MUX_dp1_bram_memory$b_put_1__SEL_1 || WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory$DIB = 32'd0;
      default: dp1_bram_memory$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory$WEA =
	     !MUX_dp1_bram_memory$a_put_1__SEL_3 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory$WEB =
	     !MUX_dp1_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4349 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_1
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_1:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_1$a_put_1__SEL_2:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_2;
      MUX_dp1_bram_memory_1$a_put_1__SEL_3:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_4;
      default: dp1_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_1$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_1$b_put_1__SEL_1:
	  dp1_bram_memory_1$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_1$b_put_1__SEL_2:
	  dp1_bram_memory_1$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_1$a_put_3__VAL_2 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_1:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_1$a_put_1__SEL_2:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory_1$a_put_3__VAL_2;
      MUX_dp1_bram_memory_1$a_put_1__SEL_3 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$DIA = 32'd0;
      default: dp1_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_1$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  MUX_dp1_bram_memory_1$b_put_3__VAL_4 or
	  MUX_dp1_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$b_put_1__SEL_2:
	  dp1_bram_memory_1$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_1$DIB = MUX_dp1_bram_memory_1$b_put_3__VAL_4;
      MUX_dp1_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_1$DIB = 32'd0;
      default: dp1_bram_memory_1$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_1$WEA =
	     !MUX_dp1_bram_memory_1$a_put_1__SEL_3 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_1$WEB =
	     !MUX_dp1_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4362 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_1$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_2
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_1:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_2$a_put_1__SEL_2:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_2;
      MUX_dp1_bram_memory_2$a_put_1__SEL_3:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_4;
      default: dp1_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_2$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_2$b_put_1__SEL_1:
	  dp1_bram_memory_2$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_2$b_put_1__SEL_2:
	  dp1_bram_memory_2$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_2$a_put_3__VAL_2 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_1:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_2$a_put_1__SEL_2:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory_2$a_put_3__VAL_2;
      MUX_dp1_bram_memory_2$a_put_1__SEL_3 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$DIA = 32'd0;
      default: dp1_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_nowW$wget or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  MUX_dp1_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_2$DIB = dp1_wmi_nowW$wget[63:32];
      MUX_dp1_bram_memory_2$b_put_1__SEL_2:
	  dp1_bram_memory_2$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp1_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_2$DIB = 32'd0;
      default: dp1_bram_memory_2$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_2$WEA =
	     !MUX_dp1_bram_memory_2$a_put_1__SEL_3 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_2$WEB =
	     !MUX_dp1_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4350 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_2$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_memory_3
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_1:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_3$a_put_1__SEL_2:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_4;
      default: dp1_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_lclMetaAddr or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_1 or
	  MUX_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_3$ADDRB = dp1_wmi_lclMetaAddr[14:4];
      MUX_dp1_bram_memory_3$b_put_1__SEL_1:
	  dp1_bram_memory_3$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      MUX_dp1_bram_memory_3$b_put_1__SEL_2:
	  dp1_bram_memory_3$ADDRB = MUX_dp1_bram_memory$b_put_2__VAL_1;
      default: dp1_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  MUX_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_1:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory$a_put_3__VAL_1;
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory_3$a_put_3__VAL_3;
      MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$DIA = 32'd0;
      default: dp1_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_dp1_wmi_doWriteFinalize or
	  dp1_wmi_nowW$wget or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_2 or
	  dp1_wmi_wmi_dhF$D_OUT or
	  MUX_dp1_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wmi_doWriteFinalize:
	  dp1_bram_memory_3$DIB = dp1_wmi_nowW$wget[31:0];
      MUX_dp1_bram_memory_3$b_put_1__SEL_2:
	  dp1_bram_memory_3$DIB = dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_dp1_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_wmi_reqMetadata:
	  dp1_bram_memory_3$DIB = 32'd0;
      default: dp1_bram_memory_3$DIB = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_3$WEA =
	     !MUX_dp1_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_3$WEB =
	     !MUX_dp1_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4351 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign dp1_bram_memory_3$ENB =
	     WILL_FIRE_RL_dp1_wmi_doReadReq && dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq && dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  assign dp1_bram_serverAdapterA_1_outDataCore$D_IN = dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  assign dp1_bram_serverAdapterA_2_outDataCore$D_IN = dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  assign dp1_bram_serverAdapterA_3_outDataCore$D_IN = dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterA_outDataCore
  assign dp1_bram_serverAdapterA_outDataCore$D_IN = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly ;
  assign dp1_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly ;
  assign dp1_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  assign dp1_bram_serverAdapterB_1_outDataCore$D_IN = dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  assign dp1_bram_serverAdapterB_2_outDataCore$D_IN = dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  assign dp1_bram_serverAdapterB_3_outDataCore$D_IN = dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule dp1_bram_serverAdapterB_outDataCore
  assign dp1_bram_serverAdapterB_outDataCore$D_IN = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly ;
  assign dp1_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly ;
  assign dp1_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule dp1_tlp_inF
  assign dp1_tlp_inF$D_IN = noc_sm2$c0_request_get ;
  assign dp1_tlp_inF$ENQ = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign dp1_tlp_inF$DEQ = WILL_FIRE_RL_dp1_tlp_tlpRcv ;
  assign dp1_tlp_inF$CLR = 1'b0 ;

  // submodule dp1_tlp_mReqF
  always@(MUX_dp1_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_mReqF$enq_1__SEL_1:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_3;
      default: dp1_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__072_BIT_152_073_AND_NOT_dp1_ETC___d3101 ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;
  assign dp1_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_352_ULE_4___d3353 ||
	     WILL_FIRE_RL_dp1_tlp_writeData ||
	     WILL_FIRE_RL_dp1_tlp_writeReq ;
  assign dp1_tlp_mReqF$CLR = 1'b0 ;

  // submodule dp1_tlp_mRespF
  assign dp1_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ?
	       MUX_dp1_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp1_tlp_mRespF$enq_1__VAL_2 ;
  assign dp1_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ;
  assign dp1_tlp_mRespF$CLR = 1'b0 ;

  // submodule dp1_tlp_outF
  always@(WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader or
	  MUX_dp1_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead or
	  MUX_dp1_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaTailEventSender or
	  MUX_dp1_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp1_tlp_dataXmt_Header or
	  MUX_dp1_tlp_outF$enq_1__VAL_5 or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 or
	  MUX_dp1_tlp_outF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp1_tlp_dmaTailEventSender:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp1_tlp_dataXmt_Header:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_5;
      MUX_dp1_tlp_tlpXmtBusy$write_1__PSEL_3:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_6;
      default: dp1_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaTailEventSender ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ;
  assign dp1_tlp_outF$DEQ = CAN_FIRE_RL_ClientServerResponse_3 ;
  assign dp1_tlp_outF$CLR = 1'b0 ;

  // submodule dp1_tlp_readReq
  assign dp1_tlp_readReq$D_IN = dp1_tlp_mReqF$D_OUT[59:0] ;
  assign dp1_tlp_readReq$ENQ = CAN_FIRE_RL_dp1_tlp_read_FirstReq ;
  assign dp1_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_520_ULE_4___d3522 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp1_tlp_readReq$CLR = 1'b0 ;

  // submodule dp1_tlp_tailEventF
  assign dp1_tlp_tailEventF$ENQ = MUX_dp1_tlp_postSeqDwell$write_1__SEL_2 ;
  assign dp1_tlp_tailEventF$DEQ = WILL_FIRE_RL_dp1_tlp_dmaTailEventSender ;
  assign dp1_tlp_tailEventF$CLR = 1'b0 ;

  // submodule dp1_wci_reqF
  assign dp1_wci_reqF$D_IN = 60'd0 ;
  assign dp1_wci_reqF$ENQ = 1'b0 ;
  assign dp1_wci_reqF$DEQ = dp1_wci_reqF_r_deq$whas ;
  assign dp1_wci_reqF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_dhF
  assign dp1_wmi_wmi_dhF$D_IN = 38'b0 ;
  assign dp1_wmi_wmi_dhF$ENQ = 1'b0 ;
  assign dp1_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_mFlagF
  assign dp1_wmi_wmi_mFlagF$D_IN = 32'h0 ;
  assign dp1_wmi_wmi_mFlagF$ENQ = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF$DEQ =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_reqF
  assign dp1_wmi_wmi_reqF$D_IN = 32'd0 ;
  assign dp1_wmi_wmi_reqF$ENQ = 1'b0 ;
  assign dp1_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule noc_sm0
  assign noc_sm0$c0_response_put = cp$server_response_get ;
  assign noc_sm0$c1_response_put = noc_sm1$s_response_get ;
  assign noc_sm0$s_request_put = pciw_p2iS ;
  assign noc_sm0$EN_s_request_put = CAN_FIRE_RL_ClientServerRequest ;
  assign noc_sm0$EN_s_response_get = CAN_FIRE_RL_ClientServerResponse ;
  assign noc_sm0$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign noc_sm0$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign noc_sm0$EN_c1_request_get = CAN_FIRE_RL_noc_ClientServerRequest ;
  assign noc_sm0$EN_c1_response_put = CAN_FIRE_RL_noc_ClientServerResponse ;

  // submodule noc_sm1
  assign noc_sm1$c0_response_put = dp0_tlp_outF$D_OUT ;
  assign noc_sm1$c1_response_put = noc_sm2$s_response_get ;
  assign noc_sm1$s_request_put = noc_sm0$c1_request_get ;
  assign noc_sm1$EN_s_request_put = CAN_FIRE_RL_noc_ClientServerRequest ;
  assign noc_sm1$EN_s_response_get = CAN_FIRE_RL_noc_ClientServerResponse ;
  assign noc_sm1$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign noc_sm1$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign noc_sm1$EN_c1_request_get = CAN_FIRE_RL_noc_ClientServerRequest_1 ;
  assign noc_sm1$EN_c1_response_put = CAN_FIRE_RL_noc_ClientServerResponse_1 ;

  // submodule noc_sm2
  assign noc_sm2$c0_response_put = dp1_tlp_outF$D_OUT ;
  assign noc_sm2$c1_response_put = 153'h0 ;
  assign noc_sm2$s_request_put = noc_sm1$c1_request_get ;
  assign noc_sm2$EN_s_request_put = CAN_FIRE_RL_noc_ClientServerRequest_1 ;
  assign noc_sm2$EN_s_response_get = CAN_FIRE_RL_noc_ClientServerResponse_1 ;
  assign noc_sm2$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign noc_sm2$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_3 ;
  assign noc_sm2$EN_c1_request_get = noc_sm2$RDY_c1_request_get ;
  assign noc_sm2$EN_c1_response_put = 1'b0 ;

  // submodule pciw_fI2P
  assign pciw_fI2P$D_IN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ?
	       MUX_pciw_fI2P$enq_1__VAL_1 :
	       pciw_Prelude_inst_changeSpecialWires_2_rg[80:0] ;
  assign pciw_fI2P$ENQ =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;
  assign pciw_fI2P$DEQ = pciw_pci0_pwTrnTx$whas ;
  assign pciw_fI2P$CLR = 1'b0 ;

  // submodule pciw_fP2I
  assign pciw_fP2I$D_IN =
	     { !pciw_pci0_pcie_ep$trn_rsof_n,
	       !pciw_pci0_pcie_ep$trn_reof_n,
	       ~pciw_pci0_pcie_ep$trn_rbar_hit_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_rd } ;
  assign pciw_fP2I$ENQ = pciw_pci0_pwTrnRx$whas ;
  assign pciw_fP2I$DEQ =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;
  assign pciw_fP2I$CLR = 1'b0 ;

  // submodule pciw_pci0_pcie_ep
  assign pciw_pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pciw_pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pciw_pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pciw_pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_di = pciw_pcie_irq_rInterruptDi ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_n = pciw_pcie_irq_rInterruptN ;
  assign pciw_pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_turnoff_ok_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pciw_pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pciw_pci0_pcie_ep$pl_directed_link_auton = 1'b0 ;
  assign pciw_pci0_pcie_ep$pl_directed_link_change = 2'h0 ;
  assign pciw_pci0_pcie_ep$pl_directed_link_speed = 1'b0 ;
  assign pciw_pci0_pcie_ep$pl_directed_link_width = 2'h0 ;
  assign pciw_pci0_pcie_ep$pl_upstream_prefer_deemph = 1'b0 ;
  assign pciw_pci0_pcie_ep$trn_fc_sel = 3'h0 ;
  assign pciw_pci0_pcie_ep$trn_rdst_rdy_n = !pciw_pci0_pwTrnRx$whas ;
  assign pciw_pci0_pcie_ep$trn_rnp_ok_n = 1'd0 ;
  assign pciw_pci0_pcie_ep$trn_tcfg_gnt_n = 1'd0 ;
  assign pciw_pci0_pcie_ep$trn_td = pciw_fI2P$D_OUT[63:0] ;
  assign pciw_pci0_pcie_ep$trn_teof_n = !pciw_fI2P$D_OUT[79] ;
  assign pciw_pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$trn_trem_n = pciw_fI2P$D_OUT[71:64] != 8'd255 ;
  assign pciw_pci0_pcie_ep$trn_tsof_n = !pciw_fI2P$D_OUT[80] ;
  assign pciw_pci0_pcie_ep$trn_tsrc_dsc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$trn_tsrc_rdy_n = !pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_pcie_ep$trn_tstr_n = 1'd1 ;

  // submodule pciw_pciDevice
  assign pciw_pciDevice$sD_IN =
	     { pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_device_number,
	       pciw_pci0_pcie_ep$cfg_function_number } ;
  assign pciw_pciDevice$sEN = pciw_pciDevice$sRDY ;

  // submodule pciw_pciLinkUp
  assign pciw_pciLinkUp$sD_IN = !pciw_pci0_pcie_ep$trn_lnk_up_n ;
  assign pciw_pciLinkUp$sEN = 1'd1 ;

  // submodule pciw_pcie_irq_fifoAssert
  assign pciw_pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pciw_pcie_irq_fifoAssert$sENQ = 1'b0 ;
  assign pciw_pcie_irq_fifoAssert$dDEQ =
	     CAN_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // remaining internal signals
  assign IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1210 =
	     (IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1187 ||
	      dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880) &&
	     (IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1197 ||
	      dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881) &&
	     (IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1207 ||
	      dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882) ;
  assign IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3225 =
	     (IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3202 ||
	      dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884) &&
	     (IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3212 ||
	      dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885) &&
	     (IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3222 ||
	      dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886) ;
  assign IF_dp0_tlp_readNxtDWAddr_340_BIT_0_511_THEN_dp_ETC___d1516 =
	     dp0_tlp_readNxtDWAddr[0] ?
	       { dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_dp0_tlp_readNxtDWAddr_340_BIT_0_511_THEN_dp_ETC___d1521 =
	     dp0_tlp_readNxtDWAddr[0] ?
	       { dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp0_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1411 =
	     (dp0_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp0_bram_serverAdapterA_outData_enqData$whas) &&
	       dp0_bram_serverAdapterA_outData_outData$whas :
	       IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1403 &&
	       CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q15 ;
  assign IF_dp0_wmi_p4B_814_EQ_0_815_THEN_dp0_bram_serv_ETC___d1828 =
	     (dp0_wmi_p4B == 2'd0) ?
	       (dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
		dp0_bram_serverAdapterB_outData_enqData$whas) &&
	       dp0_bram_serverAdapterB_outData_outData$whas :
	       IF_dp0_wmi_p4B_814_EQ_1_817_THEN_dp0_bram_serv_ETC___d1823 &&
	       CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q16 ;
  assign IF_dp1_tlp_readNxtDWAddr_355_BIT_0_526_THEN_dp_ETC___d3531 =
	     dp1_tlp_readNxtDWAddr[0] ?
	       { dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_dp1_tlp_readNxtDWAddr_355_BIT_0_526_THEN_dp_ETC___d3536 =
	     dp1_tlp_readNxtDWAddr[0] ?
	       { dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 dp1_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3426 =
	     (dp1_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp1_bram_serverAdapterA_outData_enqData$whas) &&
	       dp1_bram_serverAdapterA_outData_outData$whas :
	       IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3418 &&
	       CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q18 ;
  assign IF_dp1_wmi_p4B_829_EQ_0_830_THEN_dp1_bram_serv_ETC___d3843 =
	     (dp1_wmi_p4B == 2'd0) ?
	       (dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
		dp1_bram_serverAdapterB_outData_enqData$whas) &&
	       dp1_bram_serverAdapterB_outData_outData$whas :
	       IF_dp1_wmi_p4B_829_EQ_1_832_THEN_dp1_bram_serv_ETC___d3838 &&
	       CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q19 ;
  assign NOT_dp0_bml_lclBufDone_952_019_AND_IF_dp0_bml__ETC___d2032 =
	     !dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q21 ;
  assign NOT_dp0_tlp_mRespF_first__085_BITS_71_TO_62_09_ETC___d1109 =
	     dp0_tlp_mRespF$D_OUT[71:62] > 10'd1 ;
  assign NOT_dp0_wmi_wrActive_732_733_OR_NOT_dp0_wmi_rd_ETC___d1742 =
	     (!dp0_wmi_wrActive || !dp0_wmi_rdActive) &&
	     !dp0_wmi_wrFinalize &&
	     (dp0_wmi_mesgBufReady || dp0_wmi_mesgBusy) ;
  assign NOT_dp1_bml_lclBufDone_967_034_AND_IF_dp1_bml__ETC___d4047 =
	     !dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q22 ;
  assign NOT_dp1_wmi_wrActive_747_748_OR_NOT_dp1_wmi_rd_ETC___d3757 =
	     (!dp1_wmi_wrActive || !dp1_wmi_rdActive) &&
	     !dp1_wmi_wrFinalize &&
	     (dp1_wmi_mesgBufReady || dp1_wmi_mesgBusy) ;
  assign _dfoo13 =
	     dp1_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign ab__h11911 = dp0_bram_serverAdapterA_writeWithResp$wget ;
  assign ab__h13310 = dp0_bram_serverAdapterB_writeWithResp$wget ;
  assign ab__h14840 = dp0_bram_serverAdapterA_1_writeWithResp$wget ;
  assign ab__h16237 = dp0_bram_serverAdapterB_1_writeWithResp$wget ;
  assign ab__h17767 = dp0_bram_serverAdapterA_2_writeWithResp$wget ;
  assign ab__h19164 = dp0_bram_serverAdapterB_2_writeWithResp$wget ;
  assign ab__h20694 = dp0_bram_serverAdapterA_3_writeWithResp$wget ;
  assign ab__h22091 = dp0_bram_serverAdapterB_3_writeWithResp$wget ;
  assign ab__h89205 = dp1_bram_serverAdapterA_writeWithResp$wget ;
  assign ab__h90604 = dp1_bram_serverAdapterB_writeWithResp$wget ;
  assign ab__h92134 = dp1_bram_serverAdapterA_1_writeWithResp$wget ;
  assign ab__h93531 = dp1_bram_serverAdapterB_1_writeWithResp$wget ;
  assign ab__h95061 = dp1_bram_serverAdapterA_2_writeWithResp$wget ;
  assign ab__h96458 = dp1_bram_serverAdapterB_2_writeWithResp$wget ;
  assign ab__h97988 = dp1_bram_serverAdapterA_3_writeWithResp$wget ;
  assign ab__h99385 = dp1_bram_serverAdapterB_3_writeWithResp$wget ;
  assign byteCount__h138455 = x__h138566 - y__h138567 ;
  assign byteCount__h61146 = x__h61257 - y__h61258 ;
  assign dp0_bml_crdBuf_value_910_EQ_dp0_bml_crdBuf_mod_ETC___d4999 =
	     dp0_bml_crdBuf_value == dp0_bml_crdBuf_modulus ;
  assign dp0_bml_fabBuf_value_895_EQ_dp0_bml_fabBuf_mod_ETC___d5001 =
	     dp0_bml_fabBuf_value == dp0_bml_fabBuf_modulus ;
  assign dp0_bml_fabFlowAddr_967_PLUS_dp0_bml_fabFlowSi_ETC___d4875 =
	     dp0_bml_fabFlowAddr + dp0_bml_fabFlowSize ;
  assign dp0_bml_lclBufDone_952_AND_IF_dp0_bml_dpContro_ETC___d4333 =
	     dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q29 ;
  assign dp0_bml_lclBuf_value_865_EQ_dp0_bml_lclBuf_mod_ETC___d4998 =
	     dp0_bml_lclBuf_value == dp0_bml_lclBuf_modulus ;
  assign dp0_bml_remBuf_value_880_EQ_dp0_bml_remBuf_mod_ETC___d5000 =
	     dp0_bml_remBuf_value == dp0_bml_remBuf_modulus ;
  assign dp0_bram_serverAdapterA_1_cnt_40_PLUS_IF_dp0_b_ETC___d346 =
	     dp0_bram_serverAdapterA_1_cnt +
	     (dp0_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880 =
	     (dp0_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_58_PLUS_IF_dp0_b_ETC___d464 =
	     dp0_bram_serverAdapterA_2_cnt +
	     (dp0_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881 =
	     (dp0_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1474 =
	     (dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_outData_outData$whas &&
	     dp0_bram_serverAdapterA_1_outData_outData$whas &&
	     dp0_bram_serverAdapterA_2_outData_outData$whas &&
	     dp0_bram_serverAdapterA_3_outData_outData$whas &&
	     dp0_tlp_mRespF$FULL_N ;
  assign dp0_bram_serverAdapterA_3_cnt_76_PLUS_IF_dp0_b_ETC___d582 =
	     dp0_bram_serverAdapterA_3_cnt +
	     (dp0_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882 =
	     (dp0_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_22_PLUS_IF_dp0_bra_ETC___d228 =
	     dp0_bram_serverAdapterA_cnt +
	     (dp0_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879 =
	     (dp0_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_outDataCore_notEmpty___ETC___d1476 =
	     (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_outData_enqData$whas) &&
	     (dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d1474 ;
  assign dp0_bram_serverAdapterB_1_cnt_99_PLUS_IF_dp0_b_ETC___d405 =
	     dp0_bram_serverAdapterB_1_cnt +
	     (dp0_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_1_cnt_99_SLT_3___d1673 =
	     (dp0_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1701 =
	     dp0_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_17_PLUS_IF_dp0_b_ETC___d523 =
	     dp0_bram_serverAdapterB_2_cnt +
	     (dp0_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_2_cnt_17_SLT_3___d1674 =
	     (dp0_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_35_PLUS_IF_dp0_b_ETC___d641 =
	     dp0_bram_serverAdapterB_3_cnt +
	     (dp0_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterB_3_cnt_35_SLT_3___d1675 =
	     (dp0_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_81_PLUS_IF_dp0_bra_ETC___d287 =
	     dp0_bram_serverAdapterB_cnt +
	     (dp0_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterB_cnt_81_SLT_3___d1672 =
	     (dp0_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_tlp_dmaPullRemainDWLen_90_ULE_dp0_tlp_dmaP_ETC___d4877 =
	     dp0_tlp_dmaPullRemainDWLen <= dp0_tlp_dmaPullRemainDWSub ;
  assign dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878 =
	     dp0_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign dp0_tlp_dpControl_wget__32_BITS_3_TO_2_47_EQ_2_ETC___d1029 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_dmaDoTailEvent &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_mesgComplReceived == dp0_tlp_fabMeta[112:96] ;
  assign dp0_tlp_dpControl_wget__32_BITS_3_TO_2_47_EQ_2_ETC___d865 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_fabMeta[128] &&
	     dp0_tlp_nearBufReady &&
	     dp0_tlp_farBufReady ;
  assign dp0_tlp_inF_first__89_BIT_152_040_AND_NOT_dp0__ETC___d1064 =
	     dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inF$D_OUT[110] &&
	     !dp0_tlp_inF$D_OUT[125] &&
	     dp0_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inIgnorePkt ;
  assign dp0_tlp_mReqF_i_notEmpty__128_AND_IF_dp0_tlp_m_ETC___d1144 =
	     dp0_tlp_mReqF$EMPTY_N &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q25 ;
  assign dp0_tlp_outDwRemain_114_ULE_4___d4530 =
	     dp0_tlp_outDwRemain <= 10'd4 ;
  assign dp0_tlp_rdRespDwRemain_505_ULE_4___d1507 =
	     dp0_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_1__q7 = dp0_tlp_readNxtDWAddr + 13'd1 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_2__q8 = dp0_tlp_readNxtDWAddr + 13'd2 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_3__q6 = dp0_tlp_readNxtDWAddr + 13'd3 ;
  assign dp0_tlp_readRemainDWLen_337_ULE_4___d1338 =
	     dp0_tlp_readRemainDWLen <= 10'd4 ;
  assign dp0_tlp_readReq_i_notFull__303_AND_IF_dp0_tlp__ETC___d1314 =
	     dp0_tlp_readReq$FULL_N &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q26 ;
  assign dp0_tlp_writeDWAddr_PLUS_1__q4 = dp0_tlp_writeDWAddr + 13'd1 ;
  assign dp0_tlp_writeDWAddr_PLUS_2__q5 = dp0_tlp_writeDWAddr + 13'd2 ;
  assign dp0_tlp_writeDWAddr_PLUS_3__q3 = dp0_tlp_writeDWAddr + 13'd3 ;
  assign dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 =
	     dp0_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp0_tlp_writeRemainDWLen_164_ULE_2___d4274 =
	     dp0_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 =
	     dp0_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp0_wmi_dpControl_whas__659_AND_dp0_bram_serve_ETC___d1705 =
	     (dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d1701 ;
  assign dp1_bml_crdBuf_value_925_EQ_dp1_bml_crdBuf_mod_ETC___d5052 =
	     dp1_bml_crdBuf_value == dp1_bml_crdBuf_modulus ;
  assign dp1_bml_fabBuf_value_910_EQ_dp1_bml_fabBuf_mod_ETC___d5054 =
	     dp1_bml_fabBuf_value == dp1_bml_fabBuf_modulus ;
  assign dp1_bml_fabFlowAddr_982_PLUS_dp1_bml_fabFlowSi_ETC___d4876 =
	     dp1_bml_fabFlowAddr + dp1_bml_fabFlowSize ;
  assign dp1_bml_lclBufDone_967_AND_IF_dp1_bml_dpContro_ETC___d4353 =
	     dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q30 ;
  assign dp1_bml_lclBuf_value_880_EQ_dp1_bml_lclBuf_mod_ETC___d5051 =
	     dp1_bml_lclBuf_value == dp1_bml_lclBuf_modulus ;
  assign dp1_bml_remBuf_value_895_EQ_dp1_bml_remBuf_mod_ETC___d5053 =
	     dp1_bml_remBuf_value == dp1_bml_remBuf_modulus ;
  assign dp1_bram_serverAdapterA_1_cnt_344_PLUS_IF_dp1__ETC___d2350 =
	     dp1_bram_serverAdapterA_1_cnt +
	     (dp1_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884 =
	     (dp1_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_462_PLUS_IF_dp1__ETC___d2468 =
	     dp1_bram_serverAdapterA_2_cnt +
	     (dp1_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885 =
	     (dp1_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3489 =
	     (dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_outData_outData$whas &&
	     dp1_bram_serverAdapterA_1_outData_outData$whas &&
	     dp1_bram_serverAdapterA_2_outData_outData$whas &&
	     dp1_bram_serverAdapterA_3_outData_outData$whas &&
	     dp1_tlp_mRespF$FULL_N ;
  assign dp1_bram_serverAdapterA_3_cnt_580_PLUS_IF_dp1__ETC___d2586 =
	     dp1_bram_serverAdapterA_3_cnt +
	     (dp1_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886 =
	     (dp1_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_226_PLUS_IF_dp1_br_ETC___d2232 =
	     dp1_bram_serverAdapterA_cnt +
	     (dp1_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883 =
	     (dp1_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_outDataCore_notEmpty___ETC___d3491 =
	     (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_outData_enqData$whas) &&
	     (dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_2_outDataCore_notEmpty_ETC___d3489 ;
  assign dp1_bram_serverAdapterB_1_cnt_403_PLUS_IF_dp1__ETC___d2409 =
	     dp1_bram_serverAdapterB_1_cnt +
	     (dp1_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_1_cnt_403_SLT_3___d3688 =
	     (dp1_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3716 =
	     dp1_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_521_PLUS_IF_dp1__ETC___d2527 =
	     dp1_bram_serverAdapterB_2_cnt +
	     (dp1_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_2_cnt_521_SLT_3___d3689 =
	     (dp1_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_639_PLUS_IF_dp1__ETC___d2645 =
	     dp1_bram_serverAdapterB_3_cnt +
	     (dp1_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterB_3_cnt_639_SLT_3___d3690 =
	     (dp1_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_285_PLUS_IF_dp1_br_ETC___d2291 =
	     dp1_bram_serverAdapterB_cnt +
	     (dp1_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterB_cnt_285_SLT_3___d3687 =
	     (dp1_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_tlp_dpControl_wget__831_BITS_3_TO_2_832_EQ_ETC___d2853 =
	     dp1_dpControl[3:2] == 2'd1 && dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_tlpRcvBusy &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_fabMeta[128] &&
	     dp1_tlp_nearBufReady &&
	     dp1_tlp_farBufReady &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign dp1_tlp_inF_first__072_BIT_152_073_AND_NOT_dp1_ETC___d3101 =
	     dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inF$D_OUT[110] &&
	     !dp1_tlp_inF$D_OUT[125] &&
	     dp1_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inIgnorePkt ;
  assign dp1_tlp_mReqF_i_notEmpty__143_AND_IF_dp1_tlp_m_ETC___d3159 =
	     dp1_tlp_mReqF$EMPTY_N &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q27 ;
  assign dp1_tlp_mRespF_first__863_BITS_71_TO_62_954_ULE_1___d4275 =
	     dp1_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign dp1_tlp_outDwRemain_980_ULE_4___d4535 =
	     dp1_tlp_outDwRemain <= 10'd4 ;
  assign dp1_tlp_rdRespDwRemain_520_ULE_4___d3522 =
	     dp1_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_1__q13 = dp1_tlp_readNxtDWAddr + 13'd1 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_2__q14 = dp1_tlp_readNxtDWAddr + 13'd2 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_3__q12 = dp1_tlp_readNxtDWAddr + 13'd3 ;
  assign dp1_tlp_readRemainDWLen_352_ULE_4___d3353 =
	     dp1_tlp_readRemainDWLen <= 10'd4 ;
  assign dp1_tlp_readReq_i_notFull__318_AND_IF_dp1_tlp__ETC___d3329 =
	     dp1_tlp_readReq$FULL_N &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q28 ;
  assign dp1_tlp_writeDWAddr_PLUS_1__q10 = dp1_tlp_writeDWAddr + 13'd1 ;
  assign dp1_tlp_writeDWAddr_PLUS_2__q11 = dp1_tlp_writeDWAddr + 13'd2 ;
  assign dp1_tlp_writeDWAddr_PLUS_3__q9 = dp1_tlp_writeDWAddr + 13'd3 ;
  assign dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 =
	     dp1_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp1_tlp_writeRemainDWLen_179_ULE_2___d4310 =
	     dp1_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 =
	     dp1_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp1_wmi_dpControl_whas__674_AND_dp1_bram_serve_ETC___d3720 =
	     (dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d3716 ;
  assign idx__h129276 = 2'd0 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h131499 = 2'd1 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h132795 = 2'd2 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h134091 = 2'd3 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h136339 = 2'd0 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h136807 = 2'd1 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h137180 = 2'd2 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h137553 = 2'd3 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h51967 = 2'd0 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h54190 = 2'd1 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h55486 = 2'd2 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h56782 = 2'd3 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h59030 = 2'd0 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h59498 = 2'd1 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h59871 = 2'd2 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h60244 = 2'd3 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign lastBE__h113179 =
	     dp1_tlp_mRespF_first__863_BITS_71_TO_62_954_ULE_1___d4275 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h46595 =
	     (thisRequestLength__h46293[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lowAddr__h138454 =
	     { dp1_tlp_readReq$D_OUT[33:29], lowAddr10__h138453 } ;
  assign lowAddr__h61145 =
	     { dp0_tlp_readReq$D_OUT[33:29], lowAddr10__h61144 } ;
  assign mesgMeta_opcode__h154654 = MUX_dp1_bram_memory_1$b_put_3__VAL_4 ;
  assign mesgMeta_opcode__h77345 = MUX_dp0_bram_memory_1$b_put_3__VAL_4 ;
  assign nowLS__h109537 =
	     { dp1_tlp_mRespF$D_OUT[39:32],
	       dp1_tlp_mRespF$D_OUT[47:40],
	       dp1_tlp_mRespF$D_OUT[55:48],
	       dp1_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h43081 =
	     { dp0_tlp_inF$D_OUT[39:32],
	       dp0_tlp_inF$D_OUT[47:40],
	       dp0_tlp_inF$D_OUT[55:48],
	       dp0_tlp_inF$D_OUT[63:56] } ;
  assign nowMS__h109536 =
	     { dp1_tlp_mRespF$D_OUT[71:64],
	       dp1_tlp_mRespF$D_OUT[79:72],
	       dp1_tlp_mRespF$D_OUT[87:80],
	       dp1_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h43080 =
	     { dp0_tlp_inF$D_OUT[71:64],
	       dp0_tlp_inF$D_OUT[79:72],
	       dp0_tlp_inF$D_OUT[87:80],
	       dp0_tlp_inF$D_OUT[95:88] } ;
  assign opcode__h109535 =
	     { dp1_tlp_mRespF$D_OUT[103:96],
	       dp1_tlp_mRespF$D_OUT[111:104],
	       dp1_tlp_mRespF$D_OUT[119:112],
	       dp1_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h43079 =
	     { dp0_tlp_inF$D_OUT[103:96],
	       dp0_tlp_inF$D_OUT[111:104],
	       dp0_tlp_inF$D_OUT[119:112],
	       dp0_tlp_inF$D_OUT[127:120] } ;
  assign pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100 =
	     pciw_p2iAF_head_wrapped == pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_sInReset_isInReset &&
	     pciw_preEdge$CLK_VAL ;
  assign pkt__h126937 =
	     { 9'd148,
	       dp1_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd16,
	       dp1_tlp_mRespF$D_OUT[54:43],
	       dp1_tlp_mRespF$D_OUT[87:72],
	       dp1_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp1_tlp_mRespF$D_OUT[61:55],
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign pkt__h49628 =
	     { 9'd148,
	       dp0_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd0,
	       dp0_tlp_mRespF$D_OUT[54:43],
	       dp0_tlp_mRespF$D_OUT[87:72],
	       dp0_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp0_tlp_mRespF$D_OUT[61:55],
	       dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign rdat__h163251 = { 16'd0, dp1_bml_lclNumBufs } ;
  assign rdat__h163259 = { 16'd0, dp1_bml_fabNumBufs } ;
  assign rdat__h163267 = { 16'd0, dp1_bml_mesgBase } ;
  assign rdat__h163275 = { 16'd0, dp1_bml_metaBase } ;
  assign rdat__h163283 = { 16'd0, dp1_bml_mesgSize } ;
  assign rdat__h163291 = { 16'd0, dp1_bml_metaSize } ;
  assign rdat__h163299 = { 16'd0, dp1_bml_lclBufsCF } ;
  assign rdat__h163320 = { dp1_bml_lclBufsAR, dp1_bml_fabBufsAvail } ;
  assign rdat__h163325 = { dp1_bml_remBuf_value, dp1_bml_lclBuf_value } ;
  assign rdat__h163336 = { dp1_bml_lclStarts, dp1_bml_lclDones } ;
  assign rdat__h163341 = { dp1_bml_remStarts, dp1_bml_remDones } ;
  assign rdat__h163402 = { 28'd0, dp1_dpControl } ;
  assign rdat__h85945 = { 16'd0, dp0_bml_lclNumBufs } ;
  assign rdat__h85953 = { 16'd0, dp0_bml_fabNumBufs } ;
  assign rdat__h85961 = { 16'd0, dp0_bml_mesgBase } ;
  assign rdat__h85969 = { 16'd0, dp0_bml_metaBase } ;
  assign rdat__h85977 = { 16'd0, dp0_bml_mesgSize } ;
  assign rdat__h85985 = { 16'd0, dp0_bml_metaSize } ;
  assign rdat__h85993 = { 16'd0, dp0_bml_lclBufsCF } ;
  assign rdat__h86014 = { dp0_bml_lclBufsAR, dp0_bml_fabBufsAvail } ;
  assign rdat__h86019 = { dp0_bml_remBuf_value, dp0_bml_lclBuf_value } ;
  assign rdat__h86030 = { dp0_bml_lclStarts, dp0_bml_lclDones } ;
  assign rdat__h86035 = { dp0_bml_remStarts, dp0_bml_remDones } ;
  assign rdat__h86096 = { 28'd0, dp0_dpControl } ;
  assign rdata__h143821 =
	     dp1_tlp_readNxtDWAddr[1] ?
	       IF_dp1_tlp_readNxtDWAddr_355_BIT_0_526_THEN_dp_ETC___d3531 :
	       IF_dp1_tlp_readNxtDWAddr_355_BIT_0_526_THEN_dp_ETC___d3536 ;
  assign rdata__h66512 =
	     dp0_tlp_readNxtDWAddr[1] ?
	       IF_dp0_tlp_readNxtDWAddr_340_BIT_0_511_THEN_dp_ETC___d1516 :
	       IF_dp0_tlp_readNxtDWAddr_340_BIT_0_511_THEN_dp_ETC___d1521 ;
  assign rreq_tag__h112980 =
	     (y__h112791 == dp1_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rresp_data__h138497 =
	     { IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432[7:0],
	       IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432[15:8],
	       IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432[23:16],
	       IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432[31:24] } ;
  assign rresp_data__h61188 =
	     { IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427[7:0],
	       IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427[15:8],
	       IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427[23:16],
	       IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427[31:24] } ;
  assign spanToNextPage__h112750 =
	     13'd4096 - { 1'd0, dp1_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h46292 =
	     13'd4096 - { 1'd0, dp0_tlp_fabMesgAccu[11:0] } ;
  assign tag__h46568 = { 3'd0, dp0_tlp_dmaTag } ;
  assign thisRequestLength__h112751 =
	     (x__h112804[12:0] <= spanToNextPage__h112750) ?
	       x__h112804[12:0] :
	       spanToNextPage__h112750 ;
  assign thisRequestLength__h46293 =
	     (x__h46326[12:0] <= spanToNextPage__h46292) ?
	       x__h46326[12:0] :
	       spanToNextPage__h46292 ;
  assign val_be__h5603 = { pciw_fP2I$D_OUT[71:64], 8'd0 } ;
  assign val_data__h5604 = { pciw_fP2I$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign wOut_be__h5709 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[71:64],
	       pciw_fP2I$D_OUT[71:64] } ;
  assign wOut_data__h5710 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[63:0],
	       pciw_fP2I$D_OUT[63:0] } ;
  assign w_be__h113708 =
	     dp1_tlp_outDwRemain_980_ULE_4___d4535 ?
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q24 :
	       16'd65535 ;
  assign w_be__h36227 =
	     dp0_tlp_outDwRemain_114_ULE_4___d4530 ?
	       CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q23 :
	       16'd65535 ;
  assign w_data__h113155 =
	     { 22'd1048580,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd256,
	       lastBE__h113179,
	       4'd15,
	       dp1_tlp_fabMesgAccu,
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h114134 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd65791,
	       dp1_tlp_fabMetaAddr,
	       dp1_tlp_fabMeta[103:96],
	       dp1_tlp_fabMeta[111:104],
	       dp1_tlp_fabMeta[119:112],
	       dp1_tlp_fabMeta[127:120] } ;
  assign w_data__h115196 =
	     { dp1_tlp_fabMeta[71:64],
	       dp1_tlp_fabMeta[79:72],
	       dp1_tlp_fabMeta[87:80],
	       dp1_tlp_fabMeta[95:88],
	       dp1_tlp_fabMeta[39:32],
	       dp1_tlp_fabMeta[47:40],
	       dp1_tlp_fabMeta[55:48],
	       dp1_tlp_fabMeta[63:56],
	       dp1_tlp_fabMeta[7:0],
	       dp1_tlp_fabMeta[15:8],
	       dp1_tlp_fabMeta[23:16],
	       dp1_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h125083 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd65551,
	       dp1_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h40923 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd0,
	       tag__h46568,
	       8'd255,
	       dp0_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h46574 =
	     { 22'd4,
	       thisRequestLength__h46293[11:2],
	       pciDevice[15:3],
	       3'd0,
	       tag__h46568,
	       lastBE__h46595,
	       4'd15,
	       dp0_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign w_data__h47775 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd15,
	       dp0_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign x3__h154614 = MUX_dp1_bram_memory$b_put_3__VAL_4 ;
  assign x3__h77305 = MUX_dp0_bram_memory$b_put_3__VAL_4 ;
  assign x__h109598 = { 15'd0, dp1_tlp_mesgLengthRemainPush } ;
  assign x__h112804 =
	     (dp1_tlp_mesgLengthRemainPush <= y__h112806) ?
	       dp1_tlp_mesgLengthRemainPush :
	       y__h112806 ;
  assign x__h113306 = { dp1_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h138566 = x__h138568 - y__h138569 ;
  assign x__h138568 = { dp1_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h160395 =
	     (dp1_dpControl[1:0] == 2'd1) ? dp1_bml_fabNumBufs : 16'd0 ;
  assign x__h161519 = dp1_bml_lclBufsAR + 16'd1 ;
  assign x__h161524 = dp1_bml_lclBufsAR - 16'd1 ;
  assign x__h161596 = dp1_bml_lclBufsCF + 16'd1 ;
  assign x__h161601 = dp1_bml_lclBufsCF - 16'd1 ;
  assign x__h161638 = dp1_bml_fabBufsAvail + 16'd1 ;
  assign x__h161643 = dp1_bml_fabBufsAvail - 16'd1 ;
  assign x__h161676 = dp1_bml_lclCredit + 16'd1 ;
  assign x__h161681 = dp1_bml_lclCredit - 16'd1 ;
  assign x__h43111 = { 15'd0, dp0_tlp_mesgLengthRemainPull } ;
  assign x__h46326 =
	     (dp0_tlp_mesgLengthRemainPull <= y__h46328) ?
	       dp0_tlp_mesgLengthRemainPull :
	       y__h46328 ;
  assign x__h46790 = { dp0_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h47468 = { dp0_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h61257 = x__h61259 - y__h61260 ;
  assign x__h61259 = { dp0_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h83089 =
	     (dp0_dpControl[1:0] == 2'd1) ? dp0_bml_fabNumBufs : 16'd0 ;
  assign x__h84213 = dp0_bml_lclBufsAR + 16'd1 ;
  assign x__h84218 = dp0_bml_lclBufsAR - 16'd1 ;
  assign x__h84290 = dp0_bml_lclBufsCF + 16'd1 ;
  assign x__h84295 = dp0_bml_lclBufsCF - 16'd1 ;
  assign x__h84332 = dp0_bml_fabBufsAvail + 16'd1 ;
  assign x__h84337 = dp0_bml_fabBufsAvail - 16'd1 ;
  assign x__h84370 = dp0_bml_lclCredit + 16'd1 ;
  assign x__h84375 = dp0_bml_lclCredit - 16'd1 ;
  assign y__h112791 = { 4'd0, thisRequestLength__h112751 } ;
  assign y__h112806 = { 4'd0, dp1_tlp_maxPayloadSize } ;
  assign y__h112885 = { 19'd0, thisRequestLength__h112751 } ;
  assign y__h112933 = { 3'd0, thisRequestLength__h112751 } ;
  assign y__h113303 = { 22'd0, x__h113306 } ;
  assign y__h138567 =
	     (dp1_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h138598 } ;
  assign y__h138569 = { 10'd0, x__h138575 } ;
  assign y__h46318 = { 4'd0, thisRequestLength__h46293 } ;
  assign y__h46328 = { 4'd0, dp0_tlp_maxReadReqSize } ;
  assign y__h46389 = { 19'd0, thisRequestLength__h46293 } ;
  assign y__h46787 = { 6'd0, x__h46790 } ;
  assign y__h47465 =
	     dp0_tlp_dmaPullRemainDWSub_004_ULE_4___d4878 ?
	       { 7'd0, x__h47468 } :
	       17'd16 ;
  assign y__h61258 =
	     (dp0_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h61289 } ;
  assign y__h61260 = { 10'd0, x__h61266 } ;
  assign y_avValue__h156210 = dp1_bram_serverAdapterB_outData_outData$wget ;
  assign y_avValue__h156230 = dp1_bram_serverAdapterB_1_outData_outData$wget ;
  assign y_avValue__h156250 = dp1_bram_serverAdapterB_2_outData_outData$wget ;
  assign y_avValue__h156270 = dp1_bram_serverAdapterB_3_outData_outData$wget ;
  assign y_avValue__h78901 = dp0_bram_serverAdapterB_outData_outData$wget ;
  assign y_avValue__h78921 = dp0_bram_serverAdapterB_1_outData_outData$wget ;
  assign y_avValue__h78941 = dp0_bram_serverAdapterB_2_outData_outData$wget ;
  assign y_avValue__h78961 = dp0_bram_serverAdapterB_3_outData_outData$wget ;
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h61266 = 2'b10;
      4'b1110: x__h61266 = 2'b01;
      4'b1111: x__h61266 = 2'b0;
      default: x__h61266 = 2'b11;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h61289 = 2'b10;
      4'b1110: x__h61289 = 2'b01;
      4'b1111: x__h61289 = 2'b0;
      default: x__h61289 = 2'b11;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h138575 = 2'b10;
      4'b1110: x__h138575 = 2'b01;
      4'b1111: x__h138575 = 2'b0;
      default: x__h138575 = 2'b11;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h138598 = 2'b10;
      4'b1110: x__h138598 = 2'b01;
      4'b1111: x__h138598 = 2'b0;
      default: x__h138598 = 2'b11;
    endcase
  end
  always@(dp0_wmi_p4B or
	  y_avValue__h78961 or
	  y_avValue__h78901 or y_avValue__h78921 or y_avValue__h78941)
  begin
    case (dp0_wmi_p4B)
      2'd0: rdata__h79065 = y_avValue__h78901;
      2'd1: rdata__h79065 = y_avValue__h78921;
      2'd2: rdata__h79065 = y_avValue__h78941;
      2'd3: rdata__h79065 = y_avValue__h78961;
    endcase
  end
  always@(dp1_wmi_p4B or
	  y_avValue__h156270 or
	  y_avValue__h156210 or y_avValue__h156230 or y_avValue__h156250)
  begin
    case (dp1_wmi_p4B)
      2'd0: rdata__h156374 = y_avValue__h156210;
      2'd1: rdata__h156374 = y_avValue__h156230;
      2'd2: rdata__h156374 = y_avValue__h156250;
      2'd3: rdata__h156374 = y_avValue__h156270;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h61144 = 2'b11;
      4'b1100: lowAddr10__h61144 = 2'b10;
      4'b1110: lowAddr10__h61144 = 2'b01;
      default: lowAddr10__h61144 = 2'b0;
    endcase
  end
  always@(dp0_wci_reqF$D_OUT or
	  rdat__h85945 or
	  rdat__h85953 or
	  rdat__h85961 or
	  rdat__h85969 or
	  rdat__h85977 or
	  rdat__h85985 or
	  rdat__h85993 or
	  rdat__h86014 or
	  rdat__h86019 or
	  rdat__h86030 or
	  rdat__h86035 or
	  dp0_bml_fabMesgBase or
	  dp0_bml_fabMetaBase or
	  dp0_bml_fabMesgSize or
	  dp0_bml_fabMetaSize or
	  dp0_bml_fabFlowBase or dp0_bml_fabFlowSize or rdat__h86096)
  begin
    case (dp0_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h85866 = rdat__h85945;
      8'h04: _theResult____h85866 = rdat__h85953;
      8'h08: _theResult____h85866 = rdat__h85961;
      8'h0C: _theResult____h85866 = rdat__h85969;
      8'h10: _theResult____h85866 = rdat__h85977;
      8'h14: _theResult____h85866 = rdat__h85985;
      8'h20: _theResult____h85866 = rdat__h85993;
      8'h24: _theResult____h85866 = 32'hF00DFACE;
      8'h28: _theResult____h85866 = rdat__h86014;
      8'h2C: _theResult____h85866 = rdat__h86019;
      8'h30: _theResult____h85866 = rdat__h86030;
      8'h34: _theResult____h85866 = rdat__h86035;
      8'h48: _theResult____h85866 = 32'hDADEBABE;
      8'h4C: _theResult____h85866 = 32'h00008000;
      8'h50: _theResult____h85866 = dp0_bml_fabMesgBase;
      8'h54: _theResult____h85866 = dp0_bml_fabMetaBase;
      8'h58: _theResult____h85866 = dp0_bml_fabMesgSize;
      8'h5C: _theResult____h85866 = dp0_bml_fabMetaSize;
      8'h60: _theResult____h85866 = dp0_bml_fabFlowBase;
      8'h64: _theResult____h85866 = dp0_bml_fabFlowSize;
      8'h68: _theResult____h85866 = rdat__h86096;
      default: _theResult____h85866 = 32'd0;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h138453 = 2'b11;
      4'b1100: lowAddr10__h138453 = 2'b10;
      4'b1110: lowAddr10__h138453 = 2'b01;
      default: lowAddr10__h138453 = 2'b0;
    endcase
  end
  always@(dp1_wci_reqF$D_OUT or
	  rdat__h163251 or
	  rdat__h163259 or
	  rdat__h163267 or
	  rdat__h163275 or
	  rdat__h163283 or
	  rdat__h163291 or
	  rdat__h163299 or
	  rdat__h163320 or
	  rdat__h163325 or
	  rdat__h163336 or
	  rdat__h163341 or
	  dp1_bml_fabMesgBase or
	  dp1_bml_fabMetaBase or
	  dp1_bml_fabMesgSize or
	  dp1_bml_fabMetaSize or
	  dp1_bml_fabFlowBase or dp1_bml_fabFlowSize or rdat__h163402)
  begin
    case (dp1_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h163172 = rdat__h163251;
      8'h04: _theResult____h163172 = rdat__h163259;
      8'h08: _theResult____h163172 = rdat__h163267;
      8'h0C: _theResult____h163172 = rdat__h163275;
      8'h10: _theResult____h163172 = rdat__h163283;
      8'h14: _theResult____h163172 = rdat__h163291;
      8'h20: _theResult____h163172 = rdat__h163299;
      8'h24: _theResult____h163172 = 32'hF00DFACE;
      8'h28: _theResult____h163172 = rdat__h163320;
      8'h2C: _theResult____h163172 = rdat__h163325;
      8'h30: _theResult____h163172 = rdat__h163336;
      8'h34: _theResult____h163172 = rdat__h163341;
      8'h48: _theResult____h163172 = 32'hDADEBABE;
      8'h4C: _theResult____h163172 = 32'h00008000;
      8'h50: _theResult____h163172 = dp1_bml_fabMesgBase;
      8'h54: _theResult____h163172 = dp1_bml_fabMetaBase;
      8'h58: _theResult____h163172 = dp1_bml_fabMesgSize;
      8'h5C: _theResult____h163172 = dp1_bml_fabMetaSize;
      8'h60: _theResult____h163172 = dp1_bml_fabFlowBase;
      8'h64: _theResult____h163172 = dp1_bml_fabFlowSize;
      8'h68: _theResult____h163172 = rdat__h163402;
      default: _theResult____h163172 = 32'd0;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_3_outData_enqData$whas or
	  dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_1_outData_enqData$whas or
	  dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1403 =
	      dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1403 =
	      dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d1403 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp0_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outData_outData$whas or
	  dp0_bram_serverAdapterA_1_outData_outData$whas or
	  dp0_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q15 =
	      dp0_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q15 =
	      dp0_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q15 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp0_wmi_p4B or
	  dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_3_outData_enqData$whas or
	  dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_1_outData_enqData$whas or
	  dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (dp0_wmi_p4B)
      2'd1:
	  IF_dp0_wmi_p4B_814_EQ_1_817_THEN_dp0_bram_serv_ETC___d1823 =
	      dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_dp0_wmi_p4B_814_EQ_1_817_THEN_dp0_bram_serv_ETC___d1823 =
	      dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_dp0_wmi_p4B_814_EQ_1_817_THEN_dp0_bram_serv_ETC___d1823 =
		   dp0_wmi_p4B != 2'd3 ||
		   dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   dp0_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(dp0_wmi_p4B or
	  dp0_bram_serverAdapterB_3_outData_outData$whas or
	  dp0_bram_serverAdapterB_1_outData_outData$whas or
	  dp0_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (dp0_wmi_p4B)
      2'd1:
	  CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q16 =
	      dp0_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q16 =
	      dp0_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_dp0_wmi_p4B_NOT_dp0_wmi_p4B_EQ_3_OR_dp0_b_ETC__q16 =
		   dp0_wmi_p4B != 2'd3 ||
		   dp0_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  IF_dp0_bml_dpControl_wget__928_BITS_1_TO_0_934_ETC___d2005 =
	      dp0_bml_fabDone;
      2'd1:
	  IF_dp0_bml_dpControl_wget__928_BITS_1_TO_0_934_ETC___d2005 =
	      dp0_bml_remDone;
      default: IF_dp0_bml_dpControl_wget__928_BITS_1_TO_0_934_ETC___d2005 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q17 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q17 =
	      !dp0_bml_remDone;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q17 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_3_outData_enqData$whas or
	  dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_1_outData_enqData$whas or
	  dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3418 =
	      dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3418 =
	      dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d3418 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp1_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outData_outData$whas or
	  dp1_bram_serverAdapterA_1_outData_outData$whas or
	  dp1_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q18 =
	      dp1_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q18 =
	      dp1_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q18 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp1_wmi_p4B or
	  dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_3_outData_enqData$whas or
	  dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_1_outData_enqData$whas or
	  dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (dp1_wmi_p4B)
      2'd1:
	  IF_dp1_wmi_p4B_829_EQ_1_832_THEN_dp1_bram_serv_ETC___d3838 =
	      dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_dp1_wmi_p4B_829_EQ_1_832_THEN_dp1_bram_serv_ETC___d3838 =
	      dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_dp1_wmi_p4B_829_EQ_1_832_THEN_dp1_bram_serv_ETC___d3838 =
		   dp1_wmi_p4B != 2'd3 ||
		   dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   dp1_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(dp1_wmi_p4B or
	  dp1_bram_serverAdapterB_3_outData_outData$whas or
	  dp1_bram_serverAdapterB_1_outData_outData$whas or
	  dp1_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (dp1_wmi_p4B)
      2'd1:
	  CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q19 =
	      dp1_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q19 =
	      dp1_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_dp1_wmi_p4B_NOT_dp1_wmi_p4B_EQ_3_OR_dp1_b_ETC__q19 =
		   dp1_wmi_p4B != 2'd3 ||
		   dp1_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  IF_dp1_bml_dpControl_wget__943_BITS_1_TO_0_949_ETC___d4020 =
	      dp1_bml_fabDone;
      2'd1:
	  IF_dp1_bml_dpControl_wget__943_BITS_1_TO_0_949_ETC___d4020 =
	      dp1_bml_remDone;
      default: IF_dp1_bml_dpControl_wget__943_BITS_1_TO_0_949_ETC___d4020 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q20 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q20 =
	      !dp1_bml_remDone;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q20 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q21 =
	      dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q21 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		dp0_bml_remDone :
		dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q21 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q22 =
	      dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q22 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		dp1_bml_remDone :
		dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q22 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp0_tlp_outDwRemain)
  begin
    case (dp0_tlp_outDwRemain[1:0])
      2'b0:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q23 = 16'hFFFF;
      2'b01:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q23 = 16'hF000;
      2'b10:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q23 = 16'hFF00;
      2'd3:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q23 = 16'hFFF0;
    endcase
  end
  always@(dp1_tlp_outDwRemain)
  begin
    case (dp1_tlp_outDwRemain[1:0])
      2'b0:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q24 = 16'hFFFF;
      2'b01:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q24 = 16'hF000;
      2'b10:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q24 = 16'hFF00;
      2'd3:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q24 = 16'hFFF0;
    endcase
  end
  always@(idx__h51967 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h51967)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1177 =
	      dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h54190 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h54190)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1187 =
	      dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h55486 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h55486)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1197 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1197 =
	      dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1197 =
	      dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1197 =
	      dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h56782 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h56782)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1207 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1207 =
	      dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1207 =
	      dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d1207 =
	      dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h129276 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h129276)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3192 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3192 =
	      dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3192 =
	      dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3192 =
	      dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(idx__h131499 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h131499)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3202 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3202 =
	      dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3202 =
	      dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3202 =
	      dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(idx__h132795 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h132795)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3212 =
	      dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(idx__h134091 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h134091)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d3222 =
	      dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882 or
	  dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879 or
	  dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880 or
	  dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881)
  begin
    case (dp0_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q25 =
	      dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q25 =
	      dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q25 =
	      dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q25 =
	      dp0_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882 or
	  dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879 or
	  dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880 or
	  dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881)
  begin
    case (dp0_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q26 =
	      dp0_bram_serverAdapterA_cnt_22_SLT_3___d4879;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q26 =
	      dp0_bram_serverAdapterA_1_cnt_40_SLT_3___d4880;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q26 =
	      dp0_bram_serverAdapterA_2_cnt_58_SLT_3___d4881;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q26 =
	      dp0_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_76_SLT_3___d4882;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886 or
	  dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883 or
	  dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884 or
	  dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885)
  begin
    case (dp1_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q27 =
	      dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q27 =
	      dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q27 =
	      dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q27 =
	      dp1_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886 or
	  dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883 or
	  dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884 or
	  dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885)
  begin
    case (dp1_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q28 =
	      dp1_bram_serverAdapterA_cnt_226_SLT_3___d4883;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q28 =
	      dp1_bram_serverAdapterA_1_cnt_344_SLT_3___d4884;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q28 =
	      dp1_bram_serverAdapterA_2_cnt_462_SLT_3___d4885;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q28 =
	      dp1_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_580_SLT_3___d4886;
    endcase
  end
  always@(dp0_wmi_addr or
	  dp0_bram_serverAdapterB_3_cnt_35_SLT_3___d1675 or
	  dp0_bram_serverAdapterB_cnt_81_SLT_3___d1672 or
	  dp0_bram_serverAdapterB_1_cnt_99_SLT_3___d1673 or
	  dp0_bram_serverAdapterB_2_cnt_17_SLT_3___d1674)
  begin
    case (dp0_wmi_addr[3:2])
      2'd0:
	  IF_dp0_wmi_addr_760_BITS_3_TO_2_761_EQ_0_762_T_ETC___d4313 =
	      dp0_bram_serverAdapterB_cnt_81_SLT_3___d1672;
      2'd1:
	  IF_dp0_wmi_addr_760_BITS_3_TO_2_761_EQ_0_762_T_ETC___d4313 =
	      dp0_bram_serverAdapterB_1_cnt_99_SLT_3___d1673;
      2'd2:
	  IF_dp0_wmi_addr_760_BITS_3_TO_2_761_EQ_0_762_T_ETC___d4313 =
	      dp0_bram_serverAdapterB_2_cnt_17_SLT_3___d1674;
      2'd3:
	  IF_dp0_wmi_addr_760_BITS_3_TO_2_761_EQ_0_762_T_ETC___d4313 =
	      dp0_wmi_addr[3:2] != 2'd3 ||
	      dp0_bram_serverAdapterB_3_cnt_35_SLT_3___d1675;
    endcase
  end
  always@(dp1_wmi_addr or
	  dp1_bram_serverAdapterB_3_cnt_639_SLT_3___d3690 or
	  dp1_bram_serverAdapterB_cnt_285_SLT_3___d3687 or
	  dp1_bram_serverAdapterB_1_cnt_403_SLT_3___d3688 or
	  dp1_bram_serverAdapterB_2_cnt_521_SLT_3___d3689)
  begin
    case (dp1_wmi_addr[3:2])
      2'd0:
	  IF_dp1_wmi_addr_775_BITS_3_TO_2_776_EQ_0_777_T_ETC___d4314 =
	      dp1_bram_serverAdapterB_cnt_285_SLT_3___d3687;
      2'd1:
	  IF_dp1_wmi_addr_775_BITS_3_TO_2_776_EQ_0_777_T_ETC___d4314 =
	      dp1_bram_serverAdapterB_1_cnt_403_SLT_3___d3688;
      2'd2:
	  IF_dp1_wmi_addr_775_BITS_3_TO_2_776_EQ_0_777_T_ETC___d4314 =
	      dp1_bram_serverAdapterB_2_cnt_521_SLT_3___d3689;
      2'd3:
	  IF_dp1_wmi_addr_775_BITS_3_TO_2_776_EQ_0_777_T_ETC___d4314 =
	      dp1_wmi_addr[3:2] != 2'd3 ||
	      dp1_bram_serverAdapterB_3_cnt_639_SLT_3___d3690;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q29 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q29 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		!dp0_bml_remDone :
		!dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q29 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q30 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q30 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		!dp1_bml_remDone :
		!dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q30 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(idx__h51967 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h51967)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4329 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4329 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4329 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4329 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h54190 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h54190)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4359 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4359 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4359 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4359 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h55486 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h55486)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4330 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4330 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4330 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4330 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h56782 or
	  dp0_tlp_writeRemainDWLen_164_ULE_3___d4293 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_164_ULE_1___d4292 or
	  dp0_tlp_writeRemainDWLen_164_ULE_2___d4274)
  begin
    case (idx__h56782)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4331 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4331 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_1___d4292;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4331 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_2___d4274;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4331 =
	      !dp0_tlp_writeRemainDWLen_164_ULE_3___d4293;
    endcase
  end
  always@(idx__h129276 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h129276)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4349 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4349 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4349 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4349 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(idx__h131499 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h131499)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4362 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4362 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4362 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4362 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(idx__h134091 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h134091)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4351 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4351 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4351 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4351 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(idx__h132795 or
	  dp1_tlp_writeRemainDWLen_179_ULE_3___d4277 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_179_ULE_1___d4288 or
	  dp1_tlp_writeRemainDWLen_179_ULE_2___d4310)
  begin
    case (idx__h132795)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4350 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4350 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_1___d4288;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4350 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_2___d4310;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4350 =
	      !dp1_tlp_writeRemainDWLen_179_ULE_3___d4277;
    endcase
  end
  always@(idx__h51967 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h51967)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4423 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h54190 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h54190)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4424 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h55486 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h55486)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4425 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h56782 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h56782)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_160_BITS_1_TO_0_ETC___d4426 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outData_outData$wget or
	  dp0_bram_serverAdapterA_outData_outData$wget or
	  dp0_bram_serverAdapterA_1_outData_outData$wget or
	  dp0_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427 =
	      dp0_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427 =
	      dp0_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427 =
	      dp0_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_dp0_tlp_readReq_first__388_BITS_30_TO_29_38_ETC___d4427 =
	      dp0_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(idx__h131499 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h131499)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4429 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h129276 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h129276)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4428 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h132795 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h132795)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4430 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h134091 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h134091)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_175_BITS_1_TO_0_ETC___d4431 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outData_outData$wget or
	  dp1_bram_serverAdapterA_outData_outData$wget or
	  dp1_bram_serverAdapterA_1_outData_outData$wget or
	  dp1_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432 =
	      dp1_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432 =
	      dp1_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432 =
	      dp1_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_dp1_tlp_readReq_first__403_BITS_30_TO_29_40_ETC___d4432 =
	      dp1_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end

  // handling of inlined registers

  always@(posedge pciw_pci0_pcie_ep$trn_clk)
  begin
    if (!pciw_p250rst$OUT_RST_N)
      begin
        pciw_Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (pciw_Prelude_inst_changeSpecialWires_1_rg$EN)
	  pciw_Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	      pciw_Prelude_inst_changeSpecialWires_1_rg$D_IN;
	if (pciw_Prelude_inst_changeSpecialWires_2_rg$EN)
	  pciw_Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	      pciw_Prelude_inst_changeSpecialWires_2_rg$D_IN;
	if (pciw_i2pAF_head_wrapped$EN)
	  pciw_i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_i2pAF_head_wrapped$D_IN;
	if (pciw_p2iAF_tail_wrapped$EN)
	  pciw_p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_p2iAF_tail_wrapped$D_IN;
	if (pciw_pcie_irq_rInterruptDi$EN)
	  pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptDi$D_IN;
	if (pciw_pcie_irq_rInterruptN$EN)
	  pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptN$D_IN;
	if (pciw_pcie_irq_rInterrupting$EN)
	  pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterrupting$D_IN;
      end
    if (pciw_p2iS$EN) pciw_p2iS <= `BSV_ASSIGNMENT_DELAY pciw_p2iS$D_IN;
    if (pciw_pcie_irq_rMMEnabled$EN)
      pciw_pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMMEnabled$D_IN;
    if (pciw_pcie_irq_rMSIEnabled$EN)
      pciw_pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMSIEnabled$D_IN;
  end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk)
  begin
    if (!cp$RST_N_wci_Vm_14)
      begin
        dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp1_bml_crdBuf_modulus$EN)
	  dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_modulus$D_IN;
	if (dp1_bml_crdBuf_value$EN)
	  dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_value$D_IN;
	if (dp1_bml_fabAvail$EN)
	  dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabAvail$D_IN;
	if (dp1_bml_fabBuf_modulus$EN)
	  dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_modulus$D_IN;
	if (dp1_bml_fabBuf_value$EN)
	  dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_value$D_IN;
	if (dp1_bml_fabDone$EN)
	  dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabDone$D_IN;
	if (dp1_bml_fabFlowBase$EN)
	  dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowBase$D_IN;
	if (dp1_bml_fabFlowSize$EN)
	  dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowSize$D_IN;
	if (dp1_bml_fabMesgBase$EN)
	  dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgBase$D_IN;
	if (dp1_bml_fabMesgSize$EN)
	  dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgSize$D_IN;
	if (dp1_bml_fabMetaBase$EN)
	  dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaBase$D_IN;
	if (dp1_bml_fabMetaSize$EN)
	  dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaSize$D_IN;
	if (dp1_bml_fabNumBufs$EN)
	  dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabNumBufs$D_IN;
	if (dp1_bml_lclBufDone$EN)
	  dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufDone$D_IN;
	if (dp1_bml_lclBufStart$EN)
	  dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBufStart$D_IN;
	if (dp1_bml_lclBuf_modulus$EN)
	  dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_modulus$D_IN;
	if (dp1_bml_lclBuf_value$EN)
	  dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_value$D_IN;
	if (dp1_bml_lclDones$EN)
	  dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclDones$D_IN;
	if (dp1_bml_lclNumBufs$EN)
	  dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclNumBufs$D_IN;
	if (dp1_bml_lclStarts$EN)
	  dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclStarts$D_IN;
	if (dp1_bml_mesgBase$EN)
	  dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgBase$D_IN;
	if (dp1_bml_mesgSize$EN)
	  dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgSize$D_IN;
	if (dp1_bml_metaBase$EN)
	  dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaBase$D_IN;
	if (dp1_bml_metaSize$EN)
	  dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaSize$D_IN;
	if (dp1_bml_remBuf_modulus$EN)
	  dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_modulus$D_IN;
	if (dp1_bml_remBuf_value$EN)
	  dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_value$D_IN;
	if (dp1_bml_remDone$EN)
	  dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDone$D_IN;
	if (dp1_bml_remDones$EN)
	  dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDones$D_IN;
	if (dp1_bml_remStart$EN)
	  dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStart$D_IN;
	if (dp1_bml_remStarts$EN)
	  dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStarts$D_IN;
	if (dp1_bram_serverAdapterA_1_cnt$EN)
	  dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_cnt$D_IN;
	if (dp1_bram_serverAdapterA_1_s1$EN)
	  dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_s1$D_IN;
	if (dp1_bram_serverAdapterA_2_cnt$EN)
	  dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_cnt$D_IN;
	if (dp1_bram_serverAdapterA_2_s1$EN)
	  dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_s1$D_IN;
	if (dp1_bram_serverAdapterA_3_cnt$EN)
	  dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_cnt$D_IN;
	if (dp1_bram_serverAdapterA_3_s1$EN)
	  dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_s1$D_IN;
	if (dp1_bram_serverAdapterA_cnt$EN)
	  dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_cnt$D_IN;
	if (dp1_bram_serverAdapterA_s1$EN)
	  dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_s1$D_IN;
	if (dp1_bram_serverAdapterB_1_cnt$EN)
	  dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_cnt$D_IN;
	if (dp1_bram_serverAdapterB_1_s1$EN)
	  dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_s1$D_IN;
	if (dp1_bram_serverAdapterB_2_cnt$EN)
	  dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_cnt$D_IN;
	if (dp1_bram_serverAdapterB_2_s1$EN)
	  dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_s1$D_IN;
	if (dp1_bram_serverAdapterB_3_cnt$EN)
	  dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_cnt$D_IN;
	if (dp1_bram_serverAdapterB_3_s1$EN)
	  dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_s1$D_IN;
	if (dp1_bram_serverAdapterB_cnt$EN)
	  dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_cnt$D_IN;
	if (dp1_bram_serverAdapterB_s1$EN)
	  dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_s1$D_IN;
	if (dp1_dpControl$EN)
	  dp1_dpControl <= `BSV_ASSIGNMENT_DELAY dp1_dpControl$D_IN;
	if (dp1_tlp_creditReady$EN)
	  dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_creditReady$D_IN;
	if (dp1_tlp_debugBdata$EN)
	  dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp1_tlp_debugBdata$D_IN;
	if (dp1_tlp_dmaDoTailEvent$EN)
	  dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_dmaDoTailEvent$D_IN;
	if (dp1_tlp_dmaTag$EN)
	  dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaTag$D_IN;
	if (dp1_tlp_doXmtMetaBody$EN)
	  dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_doXmtMetaBody$D_IN;
	if (dp1_tlp_fabMeta$EN)
	  dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMeta$D_IN;
	if (dp1_tlp_farBufReady$EN)
	  dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_farBufReady$D_IN;
	if (dp1_tlp_flowDiagCount$EN)
	  dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_flowDiagCount$D_IN;
	if (dp1_tlp_gotResponseHeader$EN)
	  dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_gotResponseHeader$D_IN;
	if (dp1_tlp_maxPayloadSize$EN)
	  dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxPayloadSize$D_IN;
	if (dp1_tlp_maxReadReqSize$EN)
	  dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxReadReqSize$D_IN;
	if (dp1_tlp_nearBufReady$EN)
	  dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_nearBufReady$D_IN;
	if (dp1_tlp_postSeqDwell$EN)
	  dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_postSeqDwell$D_IN;
	if (dp1_tlp_pullTagMatch$EN)
	  dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_pullTagMatch$D_IN;
	if (dp1_tlp_readHeaderSent$EN)
	  dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readHeaderSent$D_IN;
	if (dp1_tlp_readStarted$EN)
	  dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readStarted$D_IN;
	if (dp1_tlp_remDone$EN)
	  dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remDone$D_IN;
	if (dp1_tlp_remStart$EN)
	  dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remStart$D_IN;
	if (dp1_tlp_reqMesgInFlight$EN)
	  dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMesgInFlight$D_IN;
	if (dp1_tlp_reqMetaBodyInFlight$EN)
	  dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaBodyInFlight$D_IN;
	if (dp1_tlp_reqMetaInFlight$EN)
	  dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaInFlight$D_IN;
	if (dp1_tlp_tlpMetaSent$EN)
	  dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_tlpMetaSent$D_IN;
	if (dp1_tlp_tlpRcvBusy$EN)
	  dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpRcvBusy$D_IN;
	if (dp1_tlp_tlpXmtBusy$EN)
	  dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpXmtBusy$D_IN;
	if (dp1_tlp_xmtMetaInFlight$EN)
	  dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_xmtMetaInFlight$D_IN;
	if (dp1_tlp_xmtMetaOK$EN)
	  dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp1_tlp_xmtMetaOK$D_IN;
	if (dp1_wci_cEdge$EN)
	  dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp1_wci_cEdge$D_IN;
	if (dp1_wci_cState$EN)
	  dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY dp1_wci_cState$D_IN;
	if (dp1_wci_ctlAckReg$EN)
	  dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_ctlAckReg$D_IN;
	if (dp1_wci_ctlOpActive$EN)
	  dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_ctlOpActive$D_IN;
	if (dp1_wci_illegalEdge$EN)
	  dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_illegalEdge$D_IN;
	if (dp1_wci_nState$EN)
	  dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY dp1_wci_nState$D_IN;
	if (dp1_wci_reqF_countReg$EN)
	  dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_reqF_countReg$D_IN;
	if (dp1_wci_respF_c_r$EN)
	  dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_c_r$D_IN;
	if (dp1_wci_respF_q_0$EN)
	  dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_0$D_IN;
	if (dp1_wci_respF_q_1$EN)
	  dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_1$D_IN;
	if (dp1_wci_sFlagReg$EN)
	  dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_sFlagReg$D_IN;
	if (dp1_wci_sThreadBusy_d$EN)
	  dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_sThreadBusy_d$D_IN;
	if (dp1_wmi_bufDwell$EN)
	  dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp1_wmi_bufDwell$D_IN;
	if (dp1_wmi_bytesRemainResp$EN)
	  dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_bytesRemainResp$D_IN;
	if (dp1_wmi_doneWithMesg$EN)
	  dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_doneWithMesg$D_IN;
	if (dp1_wmi_lastMesg$EN)
	  dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lastMesg$D_IN;
	if (dp1_wmi_mesgBufReady$EN)
	  dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_mesgBufReady$D_IN;
	if (dp1_wmi_mesgBusy$EN)
	  dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgBusy$D_IN;
	if (dp1_wmi_mesgCount$EN)
	  dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgCount$D_IN;
	if (dp1_wmi_mesgDone$EN)
	  dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgDone$D_IN;
	if (dp1_wmi_mesgMeta$EN)
	  dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgMeta$D_IN;
	if (dp1_wmi_mesgStart$EN)
	  dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgStart$D_IN;
	if (dp1_wmi_metaBusy$EN)
	  dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_metaBusy$D_IN;
	if (dp1_wmi_p4B$EN)
	  dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp1_wmi_p4B$D_IN;
	if (dp1_wmi_rdActive$EN)
	  dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_rdActive$D_IN;
	if (dp1_wmi_reqCount$EN)
	  dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_reqCount$D_IN;
	if (dp1_wmi_thisMesg$EN)
	  dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_thisMesg$D_IN;
	if (dp1_wmi_wmi_blockReq$EN)
	  dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_blockReq$D_IN;
	if (dp1_wmi_wmi_dhF_countReg$EN)
	  dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_countReg$D_IN;
	if (dp1_wmi_wmi_dhF_levelsValid$EN)
	  dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp1_wmi_wmi_errorSticky$EN)
	  dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_errorSticky$D_IN;
	if (dp1_wmi_wmi_mFlagF_countReg$EN)
	  dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp1_wmi_wmi_mFlagF_levelsValid$EN)
	  dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp1_wmi_wmi_mFlagReg$EN)
	  dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagReg$D_IN;
	if (dp1_wmi_wmi_operateD$EN)
	  dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_operateD$D_IN;
	if (dp1_wmi_wmi_peerIsReady$EN)
	  dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_peerIsReady$D_IN;
	if (dp1_wmi_wmi_reqF_countReg$EN)
	  dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_countReg$D_IN;
	if (dp1_wmi_wmi_reqF_levelsValid$EN)
	  dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp1_wmi_wmi_respF_c_r$EN)
	  dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_c_r$D_IN;
	if (dp1_wmi_wmi_respF_q_0$EN)
	  dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_0$D_IN;
	if (dp1_wmi_wmi_respF_q_1$EN)
	  dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_1$D_IN;
	if (dp1_wmi_wmi_sFlagReg$EN)
	  dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_sFlagReg$D_IN;
	if (dp1_wmi_wmi_trafficSticky$EN)
	  dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_trafficSticky$D_IN;
	if (dp1_wmi_wrActive$EN)
	  dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrActive$D_IN;
	if (dp1_wmi_wrFinalize$EN)
	  dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrFinalize$D_IN;
	if (dp1_wmi_wrtCount$EN)
	  dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrtCount$D_IN;
	if (dp1_wti_nowReq$EN)
	  dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp1_wti_nowReq$D_IN;
      end
    if (!cp$RST_N_wci_Vm_13)
      begin
        dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp0_bml_crdBuf_modulus$EN)
	  dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_modulus$D_IN;
	if (dp0_bml_crdBuf_value$EN)
	  dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_value$D_IN;
	if (dp0_bml_fabAvail$EN)
	  dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabAvail$D_IN;
	if (dp0_bml_fabBuf_modulus$EN)
	  dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_modulus$D_IN;
	if (dp0_bml_fabBuf_value$EN)
	  dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_value$D_IN;
	if (dp0_bml_fabDone$EN)
	  dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabDone$D_IN;
	if (dp0_bml_fabFlowBase$EN)
	  dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowBase$D_IN;
	if (dp0_bml_fabFlowSize$EN)
	  dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowSize$D_IN;
	if (dp0_bml_fabMesgBase$EN)
	  dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgBase$D_IN;
	if (dp0_bml_fabMesgSize$EN)
	  dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgSize$D_IN;
	if (dp0_bml_fabMetaBase$EN)
	  dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaBase$D_IN;
	if (dp0_bml_fabMetaSize$EN)
	  dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaSize$D_IN;
	if (dp0_bml_fabNumBufs$EN)
	  dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabNumBufs$D_IN;
	if (dp0_bml_lclBufDone$EN)
	  dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufDone$D_IN;
	if (dp0_bml_lclBufStart$EN)
	  dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBufStart$D_IN;
	if (dp0_bml_lclBuf_modulus$EN)
	  dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_modulus$D_IN;
	if (dp0_bml_lclBuf_value$EN)
	  dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_value$D_IN;
	if (dp0_bml_lclDones$EN)
	  dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclDones$D_IN;
	if (dp0_bml_lclNumBufs$EN)
	  dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclNumBufs$D_IN;
	if (dp0_bml_lclStarts$EN)
	  dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclStarts$D_IN;
	if (dp0_bml_mesgBase$EN)
	  dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgBase$D_IN;
	if (dp0_bml_mesgSize$EN)
	  dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgSize$D_IN;
	if (dp0_bml_metaBase$EN)
	  dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaBase$D_IN;
	if (dp0_bml_metaSize$EN)
	  dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaSize$D_IN;
	if (dp0_bml_remBuf_modulus$EN)
	  dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_modulus$D_IN;
	if (dp0_bml_remBuf_value$EN)
	  dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_value$D_IN;
	if (dp0_bml_remDone$EN)
	  dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDone$D_IN;
	if (dp0_bml_remDones$EN)
	  dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDones$D_IN;
	if (dp0_bml_remStart$EN)
	  dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStart$D_IN;
	if (dp0_bml_remStarts$EN)
	  dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStarts$D_IN;
	if (dp0_bram_serverAdapterA_1_cnt$EN)
	  dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_cnt$D_IN;
	if (dp0_bram_serverAdapterA_1_s1$EN)
	  dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_s1$D_IN;
	if (dp0_bram_serverAdapterA_2_cnt$EN)
	  dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_cnt$D_IN;
	if (dp0_bram_serverAdapterA_2_s1$EN)
	  dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_s1$D_IN;
	if (dp0_bram_serverAdapterA_3_cnt$EN)
	  dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_cnt$D_IN;
	if (dp0_bram_serverAdapterA_3_s1$EN)
	  dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_s1$D_IN;
	if (dp0_bram_serverAdapterA_cnt$EN)
	  dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_cnt$D_IN;
	if (dp0_bram_serverAdapterA_s1$EN)
	  dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_s1$D_IN;
	if (dp0_bram_serverAdapterB_1_cnt$EN)
	  dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_cnt$D_IN;
	if (dp0_bram_serverAdapterB_1_s1$EN)
	  dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_s1$D_IN;
	if (dp0_bram_serverAdapterB_2_cnt$EN)
	  dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_cnt$D_IN;
	if (dp0_bram_serverAdapterB_2_s1$EN)
	  dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_s1$D_IN;
	if (dp0_bram_serverAdapterB_3_cnt$EN)
	  dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_cnt$D_IN;
	if (dp0_bram_serverAdapterB_3_s1$EN)
	  dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_s1$D_IN;
	if (dp0_bram_serverAdapterB_cnt$EN)
	  dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_cnt$D_IN;
	if (dp0_bram_serverAdapterB_s1$EN)
	  dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_s1$D_IN;
	if (dp0_dpControl$EN)
	  dp0_dpControl <= `BSV_ASSIGNMENT_DELAY dp0_dpControl$D_IN;
	if (dp0_tlp_creditReady$EN)
	  dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_creditReady$D_IN;
	if (dp0_tlp_debugBdata$EN)
	  dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp0_tlp_debugBdata$D_IN;
	if (dp0_tlp_dmaDoTailEvent$EN)
	  dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_dmaDoTailEvent$D_IN;
	if (dp0_tlp_dmaTag$EN)
	  dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaTag$D_IN;
	if (dp0_tlp_doXmtMetaBody$EN)
	  dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_doXmtMetaBody$D_IN;
	if (dp0_tlp_fabMeta$EN)
	  dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMeta$D_IN;
	if (dp0_tlp_farBufReady$EN)
	  dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_farBufReady$D_IN;
	if (dp0_tlp_flowDiagCount$EN)
	  dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_flowDiagCount$D_IN;
	if (dp0_tlp_gotResponseHeader$EN)
	  dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_gotResponseHeader$D_IN;
	if (dp0_tlp_maxPayloadSize$EN)
	  dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxPayloadSize$D_IN;
	if (dp0_tlp_maxReadReqSize$EN)
	  dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxReadReqSize$D_IN;
	if (dp0_tlp_nearBufReady$EN)
	  dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_nearBufReady$D_IN;
	if (dp0_tlp_postSeqDwell$EN)
	  dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_postSeqDwell$D_IN;
	if (dp0_tlp_pullTagMatch$EN)
	  dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_pullTagMatch$D_IN;
	if (dp0_tlp_readHeaderSent$EN)
	  dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readHeaderSent$D_IN;
	if (dp0_tlp_readStarted$EN)
	  dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readStarted$D_IN;
	if (dp0_tlp_remDone$EN)
	  dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remDone$D_IN;
	if (dp0_tlp_remStart$EN)
	  dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remStart$D_IN;
	if (dp0_tlp_reqMesgInFlight$EN)
	  dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMesgInFlight$D_IN;
	if (dp0_tlp_reqMetaBodyInFlight$EN)
	  dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaBodyInFlight$D_IN;
	if (dp0_tlp_reqMetaInFlight$EN)
	  dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaInFlight$D_IN;
	if (dp0_tlp_tlpMetaSent$EN)
	  dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_tlpMetaSent$D_IN;
	if (dp0_tlp_tlpRcvBusy$EN)
	  dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpRcvBusy$D_IN;
	if (dp0_tlp_tlpXmtBusy$EN)
	  dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpXmtBusy$D_IN;
	if (dp0_tlp_xmtMetaInFlight$EN)
	  dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_xmtMetaInFlight$D_IN;
	if (dp0_tlp_xmtMetaOK$EN)
	  dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp0_tlp_xmtMetaOK$D_IN;
	if (dp0_wci_cEdge$EN)
	  dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp0_wci_cEdge$D_IN;
	if (dp0_wci_cState$EN)
	  dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY dp0_wci_cState$D_IN;
	if (dp0_wci_ctlAckReg$EN)
	  dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_ctlAckReg$D_IN;
	if (dp0_wci_ctlOpActive$EN)
	  dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_ctlOpActive$D_IN;
	if (dp0_wci_illegalEdge$EN)
	  dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_illegalEdge$D_IN;
	if (dp0_wci_nState$EN)
	  dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY dp0_wci_nState$D_IN;
	if (dp0_wci_reqF_countReg$EN)
	  dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_reqF_countReg$D_IN;
	if (dp0_wci_respF_c_r$EN)
	  dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_c_r$D_IN;
	if (dp0_wci_respF_q_0$EN)
	  dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_0$D_IN;
	if (dp0_wci_respF_q_1$EN)
	  dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_1$D_IN;
	if (dp0_wci_sFlagReg$EN)
	  dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_sFlagReg$D_IN;
	if (dp0_wci_sThreadBusy_d$EN)
	  dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_sThreadBusy_d$D_IN;
	if (dp0_wmi_bufDwell$EN)
	  dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp0_wmi_bufDwell$D_IN;
	if (dp0_wmi_bytesRemainResp$EN)
	  dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_bytesRemainResp$D_IN;
	if (dp0_wmi_doneWithMesg$EN)
	  dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_doneWithMesg$D_IN;
	if (dp0_wmi_lastMesg$EN)
	  dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lastMesg$D_IN;
	if (dp0_wmi_mesgBufReady$EN)
	  dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_mesgBufReady$D_IN;
	if (dp0_wmi_mesgBusy$EN)
	  dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgBusy$D_IN;
	if (dp0_wmi_mesgCount$EN)
	  dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgCount$D_IN;
	if (dp0_wmi_mesgDone$EN)
	  dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgDone$D_IN;
	if (dp0_wmi_mesgMeta$EN)
	  dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgMeta$D_IN;
	if (dp0_wmi_mesgStart$EN)
	  dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgStart$D_IN;
	if (dp0_wmi_metaBusy$EN)
	  dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_metaBusy$D_IN;
	if (dp0_wmi_p4B$EN)
	  dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp0_wmi_p4B$D_IN;
	if (dp0_wmi_rdActive$EN)
	  dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_rdActive$D_IN;
	if (dp0_wmi_reqCount$EN)
	  dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_reqCount$D_IN;
	if (dp0_wmi_thisMesg$EN)
	  dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_thisMesg$D_IN;
	if (dp0_wmi_wmi_blockReq$EN)
	  dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_blockReq$D_IN;
	if (dp0_wmi_wmi_dhF_countReg$EN)
	  dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_countReg$D_IN;
	if (dp0_wmi_wmi_dhF_levelsValid$EN)
	  dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp0_wmi_wmi_errorSticky$EN)
	  dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_errorSticky$D_IN;
	if (dp0_wmi_wmi_mFlagF_countReg$EN)
	  dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp0_wmi_wmi_mFlagF_levelsValid$EN)
	  dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp0_wmi_wmi_mFlagReg$EN)
	  dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagReg$D_IN;
	if (dp0_wmi_wmi_operateD$EN)
	  dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_operateD$D_IN;
	if (dp0_wmi_wmi_peerIsReady$EN)
	  dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_peerIsReady$D_IN;
	if (dp0_wmi_wmi_reqF_countReg$EN)
	  dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_countReg$D_IN;
	if (dp0_wmi_wmi_reqF_levelsValid$EN)
	  dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp0_wmi_wmi_respF_c_r$EN)
	  dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_c_r$D_IN;
	if (dp0_wmi_wmi_respF_q_0$EN)
	  dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_0$D_IN;
	if (dp0_wmi_wmi_respF_q_1$EN)
	  dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_1$D_IN;
	if (dp0_wmi_wmi_sFlagReg$EN)
	  dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_sFlagReg$D_IN;
	if (dp0_wmi_wmi_trafficSticky$EN)
	  dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_trafficSticky$D_IN;
	if (dp0_wmi_wrActive$EN)
	  dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrActive$D_IN;
	if (dp0_wmi_wrFinalize$EN)
	  dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrFinalize$D_IN;
	if (dp0_wmi_wrtCount$EN)
	  dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrtCount$D_IN;
	if (dp0_wti_nowReq$EN)
	  dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp0_wti_nowReq$D_IN;
      end
    if (!pciw_p125rst$OUT_RST_N)
      begin
        noc_chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciw_i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (noc_chompCnt$EN)
	  noc_chompCnt <= `BSV_ASSIGNMENT_DELAY noc_chompCnt$D_IN;
	if (pciDevice$EN) pciDevice <= `BSV_ASSIGNMENT_DELAY pciDevice$D_IN;
	if (pciw_i2pAF_tail_wrapped$EN)
	  pciw_i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_i2pAF_tail_wrapped$D_IN;
	if (pciw_p2iAF_head_wrapped$EN)
	  pciw_p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_p2iAF_head_wrapped$D_IN;
      end
    if (dp0_bml_fabBufsAvail$EN)
      dp0_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabBufsAvail$D_IN;
    if (dp0_bml_fabFlowAddr$EN)
      dp0_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabFlowAddr$D_IN;
    if (dp0_bml_fabMesgAddr$EN)
      dp0_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMesgAddr$D_IN;
    if (dp0_bml_fabMetaAddr$EN)
      dp0_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMetaAddr$D_IN;
    if (dp0_bml_lclBufsAR$EN)
      dp0_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsAR$D_IN;
    if (dp0_bml_lclBufsCF$EN)
      dp0_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsCF$D_IN;
    if (dp0_bml_lclCredit$EN)
      dp0_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclCredit$D_IN;
    if (dp0_bml_lclMesgAddr$EN)
      dp0_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMesgAddr$D_IN;
    if (dp0_bml_lclMetaAddr$EN)
      dp0_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMetaAddr$D_IN;
    if (dp0_bml_remMesgAddr$EN)
      dp0_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMesgAddr$D_IN;
    if (dp0_bml_remMetaAddr$EN)
      dp0_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMetaAddr$D_IN;
    if (dp0_tlp_dmaPullRemainDWLen$EN)
      dp0_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWLen$D_IN;
    if (dp0_tlp_dmaPullRemainDWSub$EN)
      dp0_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWSub$D_IN;
    if (dp0_tlp_dmaReqTag$EN)
      dp0_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaReqTag$D_IN;
    if (dp0_tlp_fabFlowAddr$EN)
      dp0_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabFlowAddr$D_IN;
    if (dp0_tlp_fabMesgAccu$EN)
      dp0_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAccu$D_IN;
    if (dp0_tlp_fabMesgAddr$EN)
      dp0_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAddr$D_IN;
    if (dp0_tlp_fabMetaAddr$EN)
      dp0_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMetaAddr$D_IN;
    if (dp0_tlp_inIgnorePkt$EN)
      dp0_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp0_tlp_inIgnorePkt$D_IN;
    if (dp0_tlp_mesgComplReceived$EN)
      dp0_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgComplReceived$D_IN;
    if (dp0_tlp_mesgLengthRemainPull$EN)
      dp0_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPull$D_IN;
    if (dp0_tlp_mesgLengthRemainPush$EN)
      dp0_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPush$D_IN;
    if (dp0_tlp_outDwRemain$EN)
      dp0_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp0_tlp_outDwRemain$D_IN;
    if (dp0_tlp_rdRespDwRemain$EN)
      dp0_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_rdRespDwRemain$D_IN;
    if (dp0_tlp_readNxtDWAddr$EN)
      dp0_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readNxtDWAddr$D_IN;
    if (dp0_tlp_readRemainDWLen$EN)
      dp0_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readRemainDWLen$D_IN;
    if (dp0_tlp_remMesgAccu$EN)
      dp0_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAccu$D_IN;
    if (dp0_tlp_remMesgAddr$EN)
      dp0_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAddr$D_IN;
    if (dp0_tlp_remMetaAddr$EN)
      dp0_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMetaAddr$D_IN;
    if (dp0_tlp_srcMesgAccu$EN)
      dp0_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_srcMesgAccu$D_IN;
    if (dp0_tlp_writeDWAddr$EN)
      dp0_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeDWAddr$D_IN;
    if (dp0_tlp_writeLastBE$EN)
      dp0_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeLastBE$D_IN;
    if (dp0_tlp_writeRemainDWLen$EN)
      dp0_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_writeRemainDWLen$D_IN;
    if (dp0_wmi_addr$EN)
      dp0_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_addr$D_IN;
    if (dp0_wmi_bytesRemainReq$EN)
      dp0_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp0_wmi_bytesRemainReq$D_IN;
    if (dp0_wmi_lclMesgAddr$EN)
      dp0_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMesgAddr$D_IN;
    if (dp0_wmi_lclMetaAddr$EN)
      dp0_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMetaAddr$D_IN;
    if (dp0_wmi_wmi_statusR$EN)
      dp0_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wmi_statusR$D_IN;
    if (dp1_bml_fabBufsAvail$EN)
      dp1_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabBufsAvail$D_IN;
    if (dp1_bml_fabFlowAddr$EN)
      dp1_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabFlowAddr$D_IN;
    if (dp1_bml_fabMesgAddr$EN)
      dp1_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMesgAddr$D_IN;
    if (dp1_bml_fabMetaAddr$EN)
      dp1_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMetaAddr$D_IN;
    if (dp1_bml_lclBufsAR$EN)
      dp1_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsAR$D_IN;
    if (dp1_bml_lclBufsCF$EN)
      dp1_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsCF$D_IN;
    if (dp1_bml_lclCredit$EN)
      dp1_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclCredit$D_IN;
    if (dp1_bml_lclMesgAddr$EN)
      dp1_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMesgAddr$D_IN;
    if (dp1_bml_lclMetaAddr$EN)
      dp1_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMetaAddr$D_IN;
    if (dp1_bml_remMesgAddr$EN)
      dp1_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMesgAddr$D_IN;
    if (dp1_bml_remMetaAddr$EN)
      dp1_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMetaAddr$D_IN;
    if (dp1_tlp_dmaPullRemainDWLen$EN)
      dp1_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWLen$D_IN;
    if (dp1_tlp_dmaPullRemainDWSub$EN)
      dp1_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWSub$D_IN;
    if (dp1_tlp_dmaReqTag$EN)
      dp1_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaReqTag$D_IN;
    if (dp1_tlp_fabFlowAddr$EN)
      dp1_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabFlowAddr$D_IN;
    if (dp1_tlp_fabMesgAccu$EN)
      dp1_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAccu$D_IN;
    if (dp1_tlp_fabMesgAddr$EN)
      dp1_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAddr$D_IN;
    if (dp1_tlp_fabMetaAddr$EN)
      dp1_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMetaAddr$D_IN;
    if (dp1_tlp_inIgnorePkt$EN)
      dp1_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp1_tlp_inIgnorePkt$D_IN;
    if (dp1_tlp_mesgComplReceived$EN)
      dp1_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgComplReceived$D_IN;
    if (dp1_tlp_mesgLengthRemainPull$EN)
      dp1_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPull$D_IN;
    if (dp1_tlp_mesgLengthRemainPush$EN)
      dp1_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPush$D_IN;
    if (dp1_tlp_outDwRemain$EN)
      dp1_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp1_tlp_outDwRemain$D_IN;
    if (dp1_tlp_rdRespDwRemain$EN)
      dp1_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_rdRespDwRemain$D_IN;
    if (dp1_tlp_readNxtDWAddr$EN)
      dp1_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readNxtDWAddr$D_IN;
    if (dp1_tlp_readRemainDWLen$EN)
      dp1_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readRemainDWLen$D_IN;
    if (dp1_tlp_remMesgAccu$EN)
      dp1_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAccu$D_IN;
    if (dp1_tlp_remMesgAddr$EN)
      dp1_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAddr$D_IN;
    if (dp1_tlp_remMetaAddr$EN)
      dp1_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMetaAddr$D_IN;
    if (dp1_tlp_srcMesgAccu$EN)
      dp1_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_srcMesgAccu$D_IN;
    if (dp1_tlp_writeDWAddr$EN)
      dp1_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeDWAddr$D_IN;
    if (dp1_tlp_writeLastBE$EN)
      dp1_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeLastBE$D_IN;
    if (dp1_tlp_writeRemainDWLen$EN)
      dp1_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_writeRemainDWLen$D_IN;
    if (dp1_wmi_addr$EN)
      dp1_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_addr$D_IN;
    if (dp1_wmi_bytesRemainReq$EN)
      dp1_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp1_wmi_bytesRemainReq$D_IN;
    if (dp1_wmi_lclMesgAddr$EN)
      dp1_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMesgAddr$D_IN;
    if (dp1_wmi_lclMetaAddr$EN)
      dp1_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMetaAddr$D_IN;
    if (dp1_wmi_wmi_statusR$EN)
      dp1_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wmi_statusR$D_IN;
    if (pciw_i2pS$EN) pciw_i2pS <= `BSV_ASSIGNMENT_DELAY pciw_i2pS$D_IN;
  end

  always@(posedge pciw_pci0_pcie_ep$trn_clk or
	  negedge pciw_i2pAF_dCombinedReset$RST_OUT)
  if (!pciw_i2pAF_dCombinedReset$RST_OUT)
    begin
      pciw_i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_i2pAF_dInReset_isInReset$EN)
	pciw_i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_i2pAF_dInReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn_clk or
	  negedge pciw_p2iAF_sCombinedReset$RST_OUT)
  if (!pciw_p2iAF_sCombinedReset$RST_OUT)
    begin
      pciw_p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_p2iAF_sInReset_isInReset$EN)
	pciw_p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_p2iAF_sInReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk or
	  negedge pciw_i2pAF_sCombinedReset$RST_OUT)
  if (!pciw_i2pAF_sCombinedReset$RST_OUT)
    begin
      pciw_i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_i2pAF_sInReset_isInReset$EN)
	pciw_i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_i2pAF_sInReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk or
	  negedge pciw_p2iAF_dCombinedReset$RST_OUT)
  if (!pciw_p2iAF_dCombinedReset$RST_OUT)
    begin
      pciw_p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_p2iAF_dInReset_isInReset$EN)
	pciw_p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_p2iAF_dInReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dp0_bml_crdBuf_modulus = 16'hAAAA;
    dp0_bml_crdBuf_value = 16'hAAAA;
    dp0_bml_fabAvail = 1'h0;
    dp0_bml_fabBuf_modulus = 16'hAAAA;
    dp0_bml_fabBuf_value = 16'hAAAA;
    dp0_bml_fabBufsAvail = 16'hAAAA;
    dp0_bml_fabDone = 1'h0;
    dp0_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp0_bml_fabFlowBase = 32'hAAAAAAAA;
    dp0_bml_fabFlowSize = 32'hAAAAAAAA;
    dp0_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp0_bml_fabMesgBase = 32'hAAAAAAAA;
    dp0_bml_fabMesgSize = 32'hAAAAAAAA;
    dp0_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp0_bml_fabMetaBase = 32'hAAAAAAAA;
    dp0_bml_fabMetaSize = 32'hAAAAAAAA;
    dp0_bml_fabNumBufs = 16'hAAAA;
    dp0_bml_lclBufDone = 1'h0;
    dp0_bml_lclBufStart = 1'h0;
    dp0_bml_lclBuf_modulus = 16'hAAAA;
    dp0_bml_lclBuf_value = 16'hAAAA;
    dp0_bml_lclBufsAR = 16'hAAAA;
    dp0_bml_lclBufsCF = 16'hAAAA;
    dp0_bml_lclCredit = 16'hAAAA;
    dp0_bml_lclDones = 16'hAAAA;
    dp0_bml_lclMesgAddr = 16'hAAAA;
    dp0_bml_lclMetaAddr = 16'hAAAA;
    dp0_bml_lclNumBufs = 16'hAAAA;
    dp0_bml_lclStarts = 16'hAAAA;
    dp0_bml_mesgBase = 16'hAAAA;
    dp0_bml_mesgSize = 16'hAAAA;
    dp0_bml_metaBase = 16'hAAAA;
    dp0_bml_metaSize = 16'hAAAA;
    dp0_bml_remBuf_modulus = 16'hAAAA;
    dp0_bml_remBuf_value = 16'hAAAA;
    dp0_bml_remDone = 1'h0;
    dp0_bml_remDones = 16'hAAAA;
    dp0_bml_remMesgAddr = 16'hAAAA;
    dp0_bml_remMetaAddr = 16'hAAAA;
    dp0_bml_remStart = 1'h0;
    dp0_bml_remStarts = 16'hAAAA;
    dp0_bram_serverAdapterA_1_cnt = 3'h2;
    dp0_bram_serverAdapterA_1_s1 = 2'h2;
    dp0_bram_serverAdapterA_2_cnt = 3'h2;
    dp0_bram_serverAdapterA_2_s1 = 2'h2;
    dp0_bram_serverAdapterA_3_cnt = 3'h2;
    dp0_bram_serverAdapterA_3_s1 = 2'h2;
    dp0_bram_serverAdapterA_cnt = 3'h2;
    dp0_bram_serverAdapterA_s1 = 2'h2;
    dp0_bram_serverAdapterB_1_cnt = 3'h2;
    dp0_bram_serverAdapterB_1_s1 = 2'h2;
    dp0_bram_serverAdapterB_2_cnt = 3'h2;
    dp0_bram_serverAdapterB_2_s1 = 2'h2;
    dp0_bram_serverAdapterB_3_cnt = 3'h2;
    dp0_bram_serverAdapterB_3_s1 = 2'h2;
    dp0_bram_serverAdapterB_cnt = 3'h2;
    dp0_bram_serverAdapterB_s1 = 2'h2;
    dp0_dpControl = 4'hA;
    dp0_tlp_creditReady = 1'h0;
    dp0_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_dmaDoTailEvent = 1'h0;
    dp0_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp0_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp0_tlp_dmaReqTag = 5'h0A;
    dp0_tlp_dmaTag = 5'h0A;
    dp0_tlp_doXmtMetaBody = 1'h0;
    dp0_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp0_tlp_farBufReady = 1'h0;
    dp0_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp0_tlp_gotResponseHeader = 1'h0;
    dp0_tlp_inIgnorePkt = 1'h0;
    dp0_tlp_maxPayloadSize = 13'h0AAA;
    dp0_tlp_maxReadReqSize = 13'h0AAA;
    dp0_tlp_mesgComplReceived = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp0_tlp_nearBufReady = 1'h0;
    dp0_tlp_outDwRemain = 10'h2AA;
    dp0_tlp_postSeqDwell = 4'hA;
    dp0_tlp_pullTagMatch = 1'h0;
    dp0_tlp_rdRespDwRemain = 10'h2AA;
    dp0_tlp_readHeaderSent = 1'h0;
    dp0_tlp_readNxtDWAddr = 13'h0AAA;
    dp0_tlp_readRemainDWLen = 10'h2AA;
    dp0_tlp_readStarted = 1'h0;
    dp0_tlp_remDone = 1'h0;
    dp0_tlp_remMesgAccu = 16'hAAAA;
    dp0_tlp_remMesgAddr = 16'hAAAA;
    dp0_tlp_remMetaAddr = 16'hAAAA;
    dp0_tlp_remStart = 1'h0;
    dp0_tlp_reqMesgInFlight = 1'h0;
    dp0_tlp_reqMetaBodyInFlight = 1'h0;
    dp0_tlp_reqMetaInFlight = 1'h0;
    dp0_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_tlpMetaSent = 1'h0;
    dp0_tlp_tlpRcvBusy = 1'h0;
    dp0_tlp_tlpXmtBusy = 1'h0;
    dp0_tlp_writeDWAddr = 13'h0AAA;
    dp0_tlp_writeLastBE = 4'hA;
    dp0_tlp_writeRemainDWLen = 10'h2AA;
    dp0_tlp_xmtMetaInFlight = 1'h0;
    dp0_tlp_xmtMetaOK = 1'h0;
    dp0_wci_cEdge = 3'h2;
    dp0_wci_cState = 3'h2;
    dp0_wci_ctlAckReg = 1'h0;
    dp0_wci_ctlOpActive = 1'h0;
    dp0_wci_illegalEdge = 1'h0;
    dp0_wci_nState = 3'h2;
    dp0_wci_reqF_countReg = 2'h2;
    dp0_wci_respF_c_r = 2'h2;
    dp0_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp0_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp0_wci_sFlagReg = 1'h0;
    dp0_wci_sThreadBusy_d = 1'h0;
    dp0_wmi_addr = 14'h2AAA;
    dp0_wmi_bufDwell = 2'h2;
    dp0_wmi_bytesRemainReq = 14'h2AAA;
    dp0_wmi_bytesRemainResp = 14'h2AAA;
    dp0_wmi_doneWithMesg = 1'h0;
    dp0_wmi_lastMesg = 32'hAAAAAAAA;
    dp0_wmi_lclMesgAddr = 15'h2AAA;
    dp0_wmi_lclMetaAddr = 15'h2AAA;
    dp0_wmi_mesgBufReady = 1'h0;
    dp0_wmi_mesgBusy = 1'h0;
    dp0_wmi_mesgCount = 32'hAAAAAAAA;
    dp0_wmi_mesgDone = 1'h0;
    dp0_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_wmi_mesgStart = 1'h0;
    dp0_wmi_metaBusy = 1'h0;
    dp0_wmi_p4B = 2'h2;
    dp0_wmi_rdActive = 1'h0;
    dp0_wmi_reqCount = 16'hAAAA;
    dp0_wmi_thisMesg = 32'hAAAAAAAA;
    dp0_wmi_wmi_blockReq = 1'h0;
    dp0_wmi_wmi_dhF_countReg = 2'h2;
    dp0_wmi_wmi_dhF_levelsValid = 1'h0;
    dp0_wmi_wmi_errorSticky = 1'h0;
    dp0_wmi_wmi_mFlagF_countReg = 2'h2;
    dp0_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp0_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_operateD = 1'h0;
    dp0_wmi_wmi_peerIsReady = 1'h0;
    dp0_wmi_wmi_reqF_countReg = 2'h2;
    dp0_wmi_wmi_reqF_levelsValid = 1'h0;
    dp0_wmi_wmi_respF_c_r = 2'h2;
    dp0_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    dp0_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    dp0_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_statusR = 8'hAA;
    dp0_wmi_wmi_trafficSticky = 1'h0;
    dp0_wmi_wrActive = 1'h0;
    dp0_wmi_wrFinalize = 1'h0;
    dp0_wmi_wrtCount = 16'hAAAA;
    dp0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    dp1_bml_crdBuf_modulus = 16'hAAAA;
    dp1_bml_crdBuf_value = 16'hAAAA;
    dp1_bml_fabAvail = 1'h0;
    dp1_bml_fabBuf_modulus = 16'hAAAA;
    dp1_bml_fabBuf_value = 16'hAAAA;
    dp1_bml_fabBufsAvail = 16'hAAAA;
    dp1_bml_fabDone = 1'h0;
    dp1_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp1_bml_fabFlowBase = 32'hAAAAAAAA;
    dp1_bml_fabFlowSize = 32'hAAAAAAAA;
    dp1_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp1_bml_fabMesgBase = 32'hAAAAAAAA;
    dp1_bml_fabMesgSize = 32'hAAAAAAAA;
    dp1_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp1_bml_fabMetaBase = 32'hAAAAAAAA;
    dp1_bml_fabMetaSize = 32'hAAAAAAAA;
    dp1_bml_fabNumBufs = 16'hAAAA;
    dp1_bml_lclBufDone = 1'h0;
    dp1_bml_lclBufStart = 1'h0;
    dp1_bml_lclBuf_modulus = 16'hAAAA;
    dp1_bml_lclBuf_value = 16'hAAAA;
    dp1_bml_lclBufsAR = 16'hAAAA;
    dp1_bml_lclBufsCF = 16'hAAAA;
    dp1_bml_lclCredit = 16'hAAAA;
    dp1_bml_lclDones = 16'hAAAA;
    dp1_bml_lclMesgAddr = 16'hAAAA;
    dp1_bml_lclMetaAddr = 16'hAAAA;
    dp1_bml_lclNumBufs = 16'hAAAA;
    dp1_bml_lclStarts = 16'hAAAA;
    dp1_bml_mesgBase = 16'hAAAA;
    dp1_bml_mesgSize = 16'hAAAA;
    dp1_bml_metaBase = 16'hAAAA;
    dp1_bml_metaSize = 16'hAAAA;
    dp1_bml_remBuf_modulus = 16'hAAAA;
    dp1_bml_remBuf_value = 16'hAAAA;
    dp1_bml_remDone = 1'h0;
    dp1_bml_remDones = 16'hAAAA;
    dp1_bml_remMesgAddr = 16'hAAAA;
    dp1_bml_remMetaAddr = 16'hAAAA;
    dp1_bml_remStart = 1'h0;
    dp1_bml_remStarts = 16'hAAAA;
    dp1_bram_serverAdapterA_1_cnt = 3'h2;
    dp1_bram_serverAdapterA_1_s1 = 2'h2;
    dp1_bram_serverAdapterA_2_cnt = 3'h2;
    dp1_bram_serverAdapterA_2_s1 = 2'h2;
    dp1_bram_serverAdapterA_3_cnt = 3'h2;
    dp1_bram_serverAdapterA_3_s1 = 2'h2;
    dp1_bram_serverAdapterA_cnt = 3'h2;
    dp1_bram_serverAdapterA_s1 = 2'h2;
    dp1_bram_serverAdapterB_1_cnt = 3'h2;
    dp1_bram_serverAdapterB_1_s1 = 2'h2;
    dp1_bram_serverAdapterB_2_cnt = 3'h2;
    dp1_bram_serverAdapterB_2_s1 = 2'h2;
    dp1_bram_serverAdapterB_3_cnt = 3'h2;
    dp1_bram_serverAdapterB_3_s1 = 2'h2;
    dp1_bram_serverAdapterB_cnt = 3'h2;
    dp1_bram_serverAdapterB_s1 = 2'h2;
    dp1_dpControl = 4'hA;
    dp1_tlp_creditReady = 1'h0;
    dp1_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_dmaDoTailEvent = 1'h0;
    dp1_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp1_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp1_tlp_dmaReqTag = 5'h0A;
    dp1_tlp_dmaTag = 5'h0A;
    dp1_tlp_doXmtMetaBody = 1'h0;
    dp1_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp1_tlp_farBufReady = 1'h0;
    dp1_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp1_tlp_gotResponseHeader = 1'h0;
    dp1_tlp_inIgnorePkt = 1'h0;
    dp1_tlp_maxPayloadSize = 13'h0AAA;
    dp1_tlp_maxReadReqSize = 13'h0AAA;
    dp1_tlp_mesgComplReceived = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp1_tlp_nearBufReady = 1'h0;
    dp1_tlp_outDwRemain = 10'h2AA;
    dp1_tlp_postSeqDwell = 4'hA;
    dp1_tlp_pullTagMatch = 1'h0;
    dp1_tlp_rdRespDwRemain = 10'h2AA;
    dp1_tlp_readHeaderSent = 1'h0;
    dp1_tlp_readNxtDWAddr = 13'h0AAA;
    dp1_tlp_readRemainDWLen = 10'h2AA;
    dp1_tlp_readStarted = 1'h0;
    dp1_tlp_remDone = 1'h0;
    dp1_tlp_remMesgAccu = 16'hAAAA;
    dp1_tlp_remMesgAddr = 16'hAAAA;
    dp1_tlp_remMetaAddr = 16'hAAAA;
    dp1_tlp_remStart = 1'h0;
    dp1_tlp_reqMesgInFlight = 1'h0;
    dp1_tlp_reqMetaBodyInFlight = 1'h0;
    dp1_tlp_reqMetaInFlight = 1'h0;
    dp1_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_tlpMetaSent = 1'h0;
    dp1_tlp_tlpRcvBusy = 1'h0;
    dp1_tlp_tlpXmtBusy = 1'h0;
    dp1_tlp_writeDWAddr = 13'h0AAA;
    dp1_tlp_writeLastBE = 4'hA;
    dp1_tlp_writeRemainDWLen = 10'h2AA;
    dp1_tlp_xmtMetaInFlight = 1'h0;
    dp1_tlp_xmtMetaOK = 1'h0;
    dp1_wci_cEdge = 3'h2;
    dp1_wci_cState = 3'h2;
    dp1_wci_ctlAckReg = 1'h0;
    dp1_wci_ctlOpActive = 1'h0;
    dp1_wci_illegalEdge = 1'h0;
    dp1_wci_nState = 3'h2;
    dp1_wci_reqF_countReg = 2'h2;
    dp1_wci_respF_c_r = 2'h2;
    dp1_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp1_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp1_wci_sFlagReg = 1'h0;
    dp1_wci_sThreadBusy_d = 1'h0;
    dp1_wmi_addr = 14'h2AAA;
    dp1_wmi_bufDwell = 2'h2;
    dp1_wmi_bytesRemainReq = 14'h2AAA;
    dp1_wmi_bytesRemainResp = 14'h2AAA;
    dp1_wmi_doneWithMesg = 1'h0;
    dp1_wmi_lastMesg = 32'hAAAAAAAA;
    dp1_wmi_lclMesgAddr = 15'h2AAA;
    dp1_wmi_lclMetaAddr = 15'h2AAA;
    dp1_wmi_mesgBufReady = 1'h0;
    dp1_wmi_mesgBusy = 1'h0;
    dp1_wmi_mesgCount = 32'hAAAAAAAA;
    dp1_wmi_mesgDone = 1'h0;
    dp1_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_wmi_mesgStart = 1'h0;
    dp1_wmi_metaBusy = 1'h0;
    dp1_wmi_p4B = 2'h2;
    dp1_wmi_rdActive = 1'h0;
    dp1_wmi_reqCount = 16'hAAAA;
    dp1_wmi_thisMesg = 32'hAAAAAAAA;
    dp1_wmi_wmi_blockReq = 1'h0;
    dp1_wmi_wmi_dhF_countReg = 2'h2;
    dp1_wmi_wmi_dhF_levelsValid = 1'h0;
    dp1_wmi_wmi_errorSticky = 1'h0;
    dp1_wmi_wmi_mFlagF_countReg = 2'h2;
    dp1_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp1_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_operateD = 1'h0;
    dp1_wmi_wmi_peerIsReady = 1'h0;
    dp1_wmi_wmi_reqF_countReg = 2'h2;
    dp1_wmi_wmi_reqF_levelsValid = 1'h0;
    dp1_wmi_wmi_respF_c_r = 2'h2;
    dp1_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    dp1_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    dp1_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_statusR = 8'hAA;
    dp1_wmi_wmi_trafficSticky = 1'h0;
    dp1_wmi_wrActive = 1'h0;
    dp1_wmi_wrFinalize = 1'h0;
    dp1_wmi_wrtCount = 16'hAAAA;
    dp1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    noc_chompCnt = 8'hAA;
    pciDevice = 16'hAAAA;
    pciw_Prelude_inst_changeSpecialWires_1_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_Prelude_inst_changeSpecialWires_2_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_i2pAF_dInReset_isInReset = 1'h0;
    pciw_i2pAF_head_wrapped = 1'h0;
    pciw_i2pAF_sInReset_isInReset = 1'h0;
    pciw_i2pAF_tail_wrapped = 1'h0;
    pciw_i2pS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pciw_p2iAF_dInReset_isInReset = 1'h0;
    pciw_p2iAF_head_wrapped = 1'h0;
    pciw_p2iAF_sInReset_isInReset = 1'h0;
    pciw_p2iAF_tail_wrapped = 1'h0;
    pciw_p2iS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pciw_pcie_irq_rInterruptDi = 8'hAA;
    pciw_pcie_irq_rInterruptN = 1'h0;
    pciw_pcie_irq_rInterrupting = 1'h0;
    pciw_pcie_irq_rMMEnabled = 3'h2;
    pciw_pcie_irq_rMSIEnabled = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pciw_pci0_pcie_ep$trn2_clk)
  begin
    #0;
    if (pciw_p125rst$OUT_RST_N)
      if (noc_sm2$RDY_c1_request_get)
	begin
	  v__h8548 = $time;
	  #0;
	end
    if (pciw_p125rst$OUT_RST_N)
      if (noc_sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h8548,
		 $unsigned(noc_chompCnt));
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	begin
	  v__h85882 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h85882,
		 dp0_wci_reqF$D_OUT[51:32],
		 dp0_wci_reqF$D_OUT[55:52],
		 _theResult____h85866);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	begin
	  v__h25788 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h25788,
		 dp0_wci_reqF$D_OUT[36:34],
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	begin
	  v__h40653 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	$display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1", v__h40653);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	begin
	  v__h47172 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h47172);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	begin
	  v__h47489 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h47489);
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaTailEventSender)
	  begin
	    v__h48643 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaTailEventSender)
	  $display("[%0d]: %m: dmaTailEventSender - generic", v__h48643);
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  begin
	    v__h41005 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h41005);
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h46667 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h46667);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	begin
	  v__h42134 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	$display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		 v__h42134,
		 { dp0_tlp_inF$D_OUT[7:0],
		   dp0_tlp_inF$D_OUT[15:8],
		   dp0_tlp_inF$D_OUT[23:16],
		   dp0_tlp_inF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	begin
	  v__h47688 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	$display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5", v__h47688);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	begin
	  v__h46238 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h46238,
		 opcode__h43079,
		 nowMS__h43080,
		 nowLS__h43081);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	begin
	  v__h77948 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h77948,
		 dp0_wmi_lclMetaAddr,
		 x3__h77305,
		 mesgMeta_opcode__h77345,
		 dp0_wmi_nowW$wget[63:32],
		 dp0_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h85346 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h85346);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	begin
	  v__h85720 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h85720,
		 dp0_wci_reqF$D_OUT[51:32],
		 dp0_wci_reqF$D_OUT[55:52],
		 dp0_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_cfwr && WILL_FIRE_RL_dp0_wci_cfrd)
	$display("Error: \"bsv/inf/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp0_wci_cfwr and RL_dp0_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	begin
	  v__h26128 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h26128,
		 dp0_wci_cEdge,
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	begin
	  v__h25973 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h25973,
		 dp0_wci_cEdge,
		 dp0_wci_cState,
		 dp0_wci_nState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	begin
	  v__h163188 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h163188,
		 dp1_wci_reqF$D_OUT[51:32],
		 dp1_wci_reqF$D_OUT[55:52],
		 _theResult____h163172);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	begin
	  v__h103076 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h103076,
		 dp1_wci_reqF$D_OUT[36:34],
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	begin
	  v__h107597 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h107597);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	begin
	  v__h113046 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h113046);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	begin
	  v__h108606 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h108606,
		 { dp1_tlp_mRespF$D_OUT[7:0],
		   dp1_tlp_mRespF$D_OUT[15:8],
		   dp1_tlp_mRespF$D_OUT[23:16],
		   dp1_tlp_mRespF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  begin
	    v__h115028 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h115028);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	begin
	  v__h117762 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h117762);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	begin
	  v__h117947 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	$display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h117947);
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  begin
	    v__h113614 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h113614);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	begin
	  v__h113965 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h113965);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	begin
	  v__h118113 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	$display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		 v__h118113);
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaTailEventSender)
	  begin
	    v__h125951 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14)
      if (pciw_p125rst$OUT_RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaTailEventSender)
	  $display("[%0d]: %m: dmaTailEventSender - generic", v__h125951);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	begin
	  v__h112700 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h112700,
		 opcode__h109535,
		 nowMS__h109536,
		 nowLS__h109537);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	begin
	  v__h155257 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h155257,
		 dp1_wmi_lclMetaAddr,
		 x3__h154614,
		 mesgMeta_opcode__h154654,
		 dp1_wmi_nowW$wget[63:32],
		 dp1_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h162652 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h162652);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	begin
	  v__h163026 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h163026,
		 dp1_wci_reqF$D_OUT[51:32],
		 dp1_wci_reqF$D_OUT[55:52],
		 dp1_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_cfwr && WILL_FIRE_RL_dp1_wci_cfrd)
	$display("Error: \"bsv/inf/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp1_wci_cfwr and RL_dp1_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	begin
	  v__h103413 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h103413,
		 dp1_wci_cEdge,
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	begin
	  v__h103258 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h103258,
		 dp1_wci_cEdge,
		 dp1_wci_cState,
		 dp1_wci_nState);
  end
  // synopsys translate_on
endmodule  // mkOPEDv6

