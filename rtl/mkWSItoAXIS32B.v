//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Mon Feb  7 17:11:42 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// wsi_SThreadBusy                O     1
// wsi_SReset_n                   O     1
// axi_dat_TVALID                 O     1
// axi_dat_TDATA                  O   256 reg
// axi_dat_TSTRB                  O    32 reg
// axi_dat_TLAST                  O     1 reg
// axi_len_TVALID                 O     1
// axi_len_TDATA                  O    16 reg
// axi_len_TSTRB                  O     2 reg
// axi_len_TLAST                  O     1 reg
// axi_spt_TVALID                 O     1
// axi_spt_TDATA                  O     8 reg
// axi_spt_TSTRB                  O     1 reg
// axi_spt_TLAST                  O     1 reg
// axi_dpt_TVALID                 O     1
// axi_dpt_TDATA                  O     8 reg
// axi_dpt_TSTRB                  O     1 reg
// axi_dpt_TLAST                  O     1 reg
// axi_err_TVALID                 O     1
// axi_err_TDATA                  O     8 reg
// axi_err_TSTRB                  O     1 reg
// axi_err_TLAST                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wsi_MCmd                       I     3
// wsi_MBurstLength               I    12
// wsi_MData                      I   256
// wsi_MByteEn                    I    32
// wsi_MReqInfo                   I     8
// wsi_MReqLast                   I     1
// wsi_MBurstPrecise              I     1
// wsi_MReset_n                   I     1 reg
// axi_dat_TREADY                 I     1
// axi_len_TREADY                 I     1
// axi_spt_TREADY                 I     1
// axi_dpt_TREADY                 I     1
// axi_err_TREADY                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWSItoAXIS32B(CLK,
		      RST_N,

		      wsi_MCmd,

		      wsi_MReqLast,

		      wsi_MBurstPrecise,

		      wsi_MBurstLength,

		      wsi_MData,

		      wsi_MByteEn,

		      wsi_MReqInfo,

		      wsi_SThreadBusy,

		      wsi_SReset_n,

		      wsi_MReset_n,

		      axi_dat_TVALID,

		      axi_dat_TREADY,

		      axi_dat_TDATA,

		      axi_dat_TSTRB,

		      axi_dat_TLAST,

		      axi_len_TVALID,

		      axi_len_TREADY,

		      axi_len_TDATA,

		      axi_len_TSTRB,

		      axi_len_TLAST,

		      axi_spt_TVALID,

		      axi_spt_TREADY,

		      axi_spt_TDATA,

		      axi_spt_TSTRB,

		      axi_spt_TLAST,

		      axi_dpt_TVALID,

		      axi_dpt_TREADY,

		      axi_dpt_TDATA,

		      axi_dpt_TSTRB,

		      axi_dpt_TLAST,

		      axi_err_TVALID,

		      axi_err_TREADY,

		      axi_err_TDATA,

		      axi_err_TSTRB,

		      axi_err_TLAST);
  input  CLK;
  input  RST_N;

  // action method wsi_mCmd
  input  [2 : 0] wsi_MCmd;

  // action method wsi_mReqLast
  input  wsi_MReqLast;

  // action method wsi_mBurstPrecise
  input  wsi_MBurstPrecise;

  // action method wsi_mBurstLength
  input  [11 : 0] wsi_MBurstLength;

  // action method wsi_mData
  input  [255 : 0] wsi_MData;

  // action method wsi_mByteEn
  input  [31 : 0] wsi_MByteEn;

  // action method wsi_mReqInfo
  input  [7 : 0] wsi_MReqInfo;

  // action method wsi_mDataInfo

  // value method wsi_sThreadBusy
  output wsi_SThreadBusy;

  // value method wsi_sReset_n
  output wsi_SReset_n;

  // action method wsi_mReset_n
  input  wsi_MReset_n;

  // value method axi_dat_mTVALID
  output axi_dat_TVALID;

  // action method axi_dat_sTREADY
  input  axi_dat_TREADY;

  // value method axi_dat_mTDATA
  output [255 : 0] axi_dat_TDATA;

  // value method axi_dat_mTSTRB
  output [31 : 0] axi_dat_TSTRB;

  // value method axi_dat_mTKEEP

  // value method axi_dat_mTLAST
  output axi_dat_TLAST;

  // value method axi_len_mTVALID
  output axi_len_TVALID;

  // action method axi_len_sTREADY
  input  axi_len_TREADY;

  // value method axi_len_mTDATA
  output [15 : 0] axi_len_TDATA;

  // value method axi_len_mTSTRB
  output [1 : 0] axi_len_TSTRB;

  // value method axi_len_mTKEEP

  // value method axi_len_mTLAST
  output axi_len_TLAST;

  // value method axi_spt_mTVALID
  output axi_spt_TVALID;

  // action method axi_spt_sTREADY
  input  axi_spt_TREADY;

  // value method axi_spt_mTDATA
  output [7 : 0] axi_spt_TDATA;

  // value method axi_spt_mTSTRB
  output axi_spt_TSTRB;

  // value method axi_spt_mTKEEP

  // value method axi_spt_mTLAST
  output axi_spt_TLAST;

  // value method axi_dpt_mTVALID
  output axi_dpt_TVALID;

  // action method axi_dpt_sTREADY
  input  axi_dpt_TREADY;

  // value method axi_dpt_mTDATA
  output [7 : 0] axi_dpt_TDATA;

  // value method axi_dpt_mTSTRB
  output axi_dpt_TSTRB;

  // value method axi_dpt_mTKEEP

  // value method axi_dpt_mTLAST
  output axi_dpt_TLAST;

  // value method axi_err_mTVALID
  output axi_err_TVALID;

  // action method axi_err_sTREADY
  input  axi_err_TREADY;

  // value method axi_err_mTDATA
  output [7 : 0] axi_err_TDATA;

  // value method axi_err_mTSTRB
  output axi_err_TSTRB;

  // value method axi_err_mTKEEP

  // value method axi_err_mTLAST
  output axi_err_TLAST;

  // signals for module outputs
  wire [255 : 0] axi_dat_TDATA;
  wire [31 : 0] axi_dat_TSTRB;
  wire [15 : 0] axi_len_TDATA;
  wire [7 : 0] axi_dpt_TDATA, axi_err_TDATA, axi_spt_TDATA;
  wire [1 : 0] axi_len_TSTRB;
  wire axi_dat_TLAST,
       axi_dat_TVALID,
       axi_dpt_TLAST,
       axi_dpt_TSTRB,
       axi_dpt_TVALID,
       axi_err_TLAST,
       axi_err_TSTRB,
       axi_err_TVALID,
       axi_len_TLAST,
       axi_len_TVALID,
       axi_spt_TLAST,
       axi_spt_TSTRB,
       axi_spt_TVALID,
       wsi_SReset_n,
       wsi_SThreadBusy;

  // inlined wires
  wire [312 : 0] wsiS_wsiReq$wget;
  wire [288 : 0] dat_fifof_x_wire$wget;
  wire [255 : 0] wsi_Es_mData_w$wget;
  wire [95 : 0] wsiS_extStatusW$wget;
  wire [31 : 0] wsi_Es_mByteEn_w$wget;
  wire [18 : 0] len_fifof_x_wire$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [9 : 0] dpt_fifof_x_wire$wget,
	       err_fifof_x_wire$wget,
	       spt_fifof_x_wire$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [2 : 0] wsi_Es_mCmd_w$wget;
  wire axiDat_Em_mTRdy_w$wget,
       axiDat_Em_mTRdy_w$whas,
       axiDpt_Em_mTRdy_w$wget,
       axiDpt_Em_mTRdy_w$whas,
       axiErr_Em_mTRdy_w$wget,
       axiErr_Em_mTRdy_w$whas,
       axiLen_Em_mTRdy_w$wget,
       axiLen_Em_mTRdy_w$whas,
       axiSpt_Em_mTRdy_w$wget,
       axiSpt_Em_mTRdy_w$whas,
       dat_deq_deq$whas,
       dat_deq_ready$whas,
       dat_fifof_dequeueing$whas,
       dat_fifof_enqueueing$whas,
       dat_fifof_x_wire$whas,
       dpt_deq_deq$whas,
       dpt_deq_ready$whas,
       dpt_fifof_dequeueing$whas,
       dpt_fifof_enqueueing$whas,
       dpt_fifof_x_wire$whas,
       err_deq_deq$whas,
       err_deq_ready$whas,
       err_fifof_dequeueing$whas,
       err_fifof_enqueueing$whas,
       err_fifof_x_wire$whas,
       len_deq_deq$whas,
       len_deq_ready$whas,
       len_fifof_dequeueing$whas,
       len_fifof_enqueueing$whas,
       len_fifof_x_wire$whas,
       spt_deq_deq$whas,
       spt_deq_ready$whas,
       spt_fifof_dequeueing$whas,
       spt_fifof_enqueueing$whas,
       spt_fifof_x_wire$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas;

  // register dat_fifof_c_r
  reg [1 : 0] dat_fifof_c_r;
  wire [1 : 0] dat_fifof_c_r$D_IN;
  wire dat_fifof_c_r$EN;

  // register dat_fifof_q_0
  reg [288 : 0] dat_fifof_q_0;
  reg [288 : 0] dat_fifof_q_0$D_IN;
  wire dat_fifof_q_0$EN;

  // register dat_fifof_q_1
  reg [288 : 0] dat_fifof_q_1;
  reg [288 : 0] dat_fifof_q_1$D_IN;
  wire dat_fifof_q_1$EN;

  // register dpt_fifof_c_r
  reg [1 : 0] dpt_fifof_c_r;
  wire [1 : 0] dpt_fifof_c_r$D_IN;
  wire dpt_fifof_c_r$EN;

  // register dpt_fifof_q_0
  reg [9 : 0] dpt_fifof_q_0;
  reg [9 : 0] dpt_fifof_q_0$D_IN;
  wire dpt_fifof_q_0$EN;

  // register dpt_fifof_q_1
  reg [9 : 0] dpt_fifof_q_1;
  reg [9 : 0] dpt_fifof_q_1$D_IN;
  wire dpt_fifof_q_1$EN;

  // register err_fifof_c_r
  reg [1 : 0] err_fifof_c_r;
  wire [1 : 0] err_fifof_c_r$D_IN;
  wire err_fifof_c_r$EN;

  // register err_fifof_q_0
  reg [9 : 0] err_fifof_q_0;
  reg [9 : 0] err_fifof_q_0$D_IN;
  wire err_fifof_q_0$EN;

  // register err_fifof_q_1
  reg [9 : 0] err_fifof_q_1;
  reg [9 : 0] err_fifof_q_1$D_IN;
  wire err_fifof_q_1$EN;

  // register firstWord
  reg firstWord;
  wire firstWord$D_IN, firstWord$EN;

  // register len_fifof_c_r
  reg [1 : 0] len_fifof_c_r;
  wire [1 : 0] len_fifof_c_r$D_IN;
  wire len_fifof_c_r$EN;

  // register len_fifof_q_0
  reg [18 : 0] len_fifof_q_0;
  reg [18 : 0] len_fifof_q_0$D_IN;
  wire len_fifof_q_0$EN;

  // register len_fifof_q_1
  reg [18 : 0] len_fifof_q_1;
  reg [18 : 0] len_fifof_q_1$D_IN;
  wire len_fifof_q_1$EN;

  // register spt_fifof_c_r
  reg [1 : 0] spt_fifof_c_r;
  wire [1 : 0] spt_fifof_c_r$D_IN;
  wire spt_fifof_c_r$EN;

  // register spt_fifof_q_0
  reg [9 : 0] spt_fifof_q_0;
  reg [9 : 0] spt_fifof_q_0$D_IN;
  wire spt_fifof_q_0$EN;

  // register spt_fifof_q_1
  reg [9 : 0] spt_fifof_q_1;
  reg [9 : 0] spt_fifof_q_1$D_IN;
  wire spt_fifof_q_1$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule wsiS_isReset
  wire wsiS_isReset$VAL;

  // ports of submodule wsiS_reqFifo
  wire [312 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_advance_data,
       WILL_FIRE_RL_dat_fifof_both,
       WILL_FIRE_RL_dat_fifof_decCtr,
       WILL_FIRE_RL_dat_fifof_incCtr,
       WILL_FIRE_RL_dpt_fifof_both,
       WILL_FIRE_RL_dpt_fifof_decCtr,
       WILL_FIRE_RL_dpt_fifof_incCtr,
       WILL_FIRE_RL_err_fifof_both,
       WILL_FIRE_RL_err_fifof_decCtr,
       WILL_FIRE_RL_err_fifof_incCtr,
       WILL_FIRE_RL_len_fifof_both,
       WILL_FIRE_RL_len_fifof_decCtr,
       WILL_FIRE_RL_len_fifof_incCtr,
       WILL_FIRE_RL_spt_fifof_both,
       WILL_FIRE_RL_spt_fifof_decCtr,
       WILL_FIRE_RL_spt_fifof_incCtr,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  wire [288 : 0] MUX_dat_fifof_q_0$write_1__VAL_1,
		 MUX_dat_fifof_q_0$write_1__VAL_2,
		 MUX_dat_fifof_q_1$write_1__VAL_1;
  wire [18 : 0] MUX_len_fifof_q_0$write_1__VAL_1,
		MUX_len_fifof_q_0$write_1__VAL_2,
		MUX_len_fifof_q_1$write_1__VAL_1;
  wire [9 : 0] MUX_dpt_fifof_q_0$write_1__VAL_1,
	       MUX_dpt_fifof_q_0$write_1__VAL_2,
	       MUX_dpt_fifof_q_1$write_1__VAL_1,
	       MUX_err_fifof_q_0$write_1__VAL_1,
	       MUX_err_fifof_q_1$write_1__VAL_1,
	       MUX_spt_fifof_q_0$write_1__VAL_1,
	       MUX_spt_fifof_q_1$write_1__VAL_1;
  wire [1 : 0] MUX_dat_fifof_c_r$write_1__VAL_1,
	       MUX_dat_fifof_c_r$write_1__VAL_2,
	       MUX_dpt_fifof_c_r$write_1__VAL_1,
	       MUX_dpt_fifof_c_r$write_1__VAL_2,
	       MUX_err_fifof_c_r$write_1__VAL_1,
	       MUX_err_fifof_c_r$write_1__VAL_2,
	       MUX_len_fifof_c_r$write_1__VAL_1,
	       MUX_len_fifof_c_r$write_1__VAL_2,
	       MUX_spt_fifof_c_r$write_1__VAL_1,
	       MUX_spt_fifof_c_r$write_1__VAL_2;
  wire MUX_dat_fifof_q_0$write_1__SEL_2,
       MUX_dat_fifof_q_1$write_1__SEL_2,
       MUX_dpt_fifof_q_0$write_1__SEL_2,
       MUX_dpt_fifof_q_1$write_1__SEL_2,
       MUX_err_fifof_q_0$write_1__SEL_2,
       MUX_err_fifof_q_1$write_1__SEL_2,
       MUX_len_fifof_q_0$write_1__SEL_2,
       MUX_len_fifof_q_1$write_1__SEL_2,
       MUX_spt_fifof_q_0$write_1__SEL_2,
       MUX_spt_fifof_q_1$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  wire [15 : 0] x_data__h9010;
  wire [11 : 0] x__h9016;
  wire wsiS_reqFifo_notFull__1_AND_wsiS_burstKind_6_E_ETC___d53;

  // value method wsi_sThreadBusy
  assign wsi_SThreadBusy =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;

  // value method wsi_sReset_n
  assign wsi_SReset_n = !wsiS_isReset$VAL && wsiS_operateD ;

  // value method axi_dat_mTVALID
  assign axi_dat_TVALID = dat_fifof_c_r != 2'd0 ;

  // value method axi_dat_mTDATA
  assign axi_dat_TDATA = dat_fifof_q_0[288:33] ;

  // value method axi_dat_mTSTRB
  assign axi_dat_TSTRB = dat_fifof_q_0[32:1] ;

  // value method axi_dat_mTLAST
  assign axi_dat_TLAST = dat_fifof_q_0[0] ;

  // value method axi_len_mTVALID
  assign axi_len_TVALID = len_fifof_c_r != 2'd0 ;

  // value method axi_len_mTDATA
  assign axi_len_TDATA = len_fifof_q_0[18:3] ;

  // value method axi_len_mTSTRB
  assign axi_len_TSTRB = len_fifof_q_0[2:1] ;

  // value method axi_len_mTLAST
  assign axi_len_TLAST = len_fifof_q_0[0] ;

  // value method axi_spt_mTVALID
  assign axi_spt_TVALID = spt_fifof_c_r != 2'd0 ;

  // value method axi_spt_mTDATA
  assign axi_spt_TDATA = spt_fifof_q_0[9:2] ;

  // value method axi_spt_mTSTRB
  assign axi_spt_TSTRB = spt_fifof_q_0[1] ;

  // value method axi_spt_mTLAST
  assign axi_spt_TLAST = spt_fifof_q_0[0] ;

  // value method axi_dpt_mTVALID
  assign axi_dpt_TVALID = dpt_fifof_c_r != 2'd0 ;

  // value method axi_dpt_mTDATA
  assign axi_dpt_TDATA = dpt_fifof_q_0[9:2] ;

  // value method axi_dpt_mTSTRB
  assign axi_dpt_TSTRB = dpt_fifof_q_0[1] ;

  // value method axi_dpt_mTLAST
  assign axi_dpt_TLAST = dpt_fifof_q_0[0] ;

  // value method axi_err_mTVALID
  assign axi_err_TVALID = err_fifof_c_r != 2'd0 ;

  // value method axi_err_mTDATA
  assign axi_err_TDATA = err_fifof_q_0[9:2] ;

  // value method axi_err_mTSTRB
  assign axi_err_TSTRB = err_fifof_q_0[1] ;

  // value method axi_err_mTLAST
  assign axi_err_TLAST = err_fifof_q_0[0] ;

  // submodule wsiS_isReset
  ResetToBool wsiS_isReset(.RST(RST_N), .VAL(wsiS_isReset$VAL));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd313),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[312:310] == 3'd1 ;

  // rule RL_advance_data
  assign WILL_FIRE_RL_advance_data =
	     dat_fifof_c_r != 2'd2 && wsiS_reqFifo$EMPTY_N &&
	     (!firstWord ||
	      len_fifof_c_r != 2'd2 && spt_fifof_c_r != 2'd2 &&
	      dpt_fifof_c_r != 2'd2 &&
	      err_fifof_c_r != 2'd2) ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_advance_data ;

  // rule RL_dat_fifof_incCtr
  assign WILL_FIRE_RL_dat_fifof_incCtr =
	     ((dat_fifof_c_r == 2'd0) ?
		WILL_FIRE_RL_advance_data :
		dat_fifof_c_r != 2'd1 || WILL_FIRE_RL_advance_data) &&
	     WILL_FIRE_RL_advance_data &&
	     !dat_fifof_dequeueing$whas ;

  // rule RL_dat_fifof_decCtr
  assign WILL_FIRE_RL_dat_fifof_decCtr =
	     dat_fifof_dequeueing$whas && !WILL_FIRE_RL_advance_data ;

  // rule RL_dat_fifof_both
  assign WILL_FIRE_RL_dat_fifof_both =
	     ((dat_fifof_c_r == 2'd1) ?
		WILL_FIRE_RL_advance_data :
		dat_fifof_c_r != 2'd2 || WILL_FIRE_RL_advance_data) &&
	     dat_fifof_dequeueing$whas &&
	     WILL_FIRE_RL_advance_data ;

  // rule RL_len_fifof_incCtr
  assign WILL_FIRE_RL_len_fifof_incCtr =
	     ((len_fifof_c_r == 2'd0) ?
		len_fifof_enqueueing$whas :
		len_fifof_c_r != 2'd1 || len_fifof_enqueueing$whas) &&
	     len_fifof_enqueueing$whas &&
	     !len_fifof_dequeueing$whas ;

  // rule RL_len_fifof_decCtr
  assign WILL_FIRE_RL_len_fifof_decCtr =
	     len_fifof_dequeueing$whas && !len_fifof_enqueueing$whas ;

  // rule RL_len_fifof_both
  assign WILL_FIRE_RL_len_fifof_both =
	     ((len_fifof_c_r == 2'd1) ?
		len_fifof_enqueueing$whas :
		len_fifof_c_r != 2'd2 || len_fifof_enqueueing$whas) &&
	     len_fifof_dequeueing$whas &&
	     len_fifof_enqueueing$whas ;

  // rule RL_spt_fifof_incCtr
  assign WILL_FIRE_RL_spt_fifof_incCtr =
	     ((spt_fifof_c_r == 2'd0) ?
		len_fifof_enqueueing$whas :
		spt_fifof_c_r != 2'd1 || len_fifof_enqueueing$whas) &&
	     len_fifof_enqueueing$whas &&
	     !spt_fifof_dequeueing$whas ;

  // rule RL_spt_fifof_decCtr
  assign WILL_FIRE_RL_spt_fifof_decCtr =
	     spt_fifof_dequeueing$whas && !len_fifof_enqueueing$whas ;

  // rule RL_spt_fifof_both
  assign WILL_FIRE_RL_spt_fifof_both =
	     ((spt_fifof_c_r == 2'd1) ?
		len_fifof_enqueueing$whas :
		spt_fifof_c_r != 2'd2 || len_fifof_enqueueing$whas) &&
	     spt_fifof_dequeueing$whas &&
	     len_fifof_enqueueing$whas ;

  // rule RL_dpt_fifof_incCtr
  assign WILL_FIRE_RL_dpt_fifof_incCtr =
	     ((dpt_fifof_c_r == 2'd0) ?
		len_fifof_enqueueing$whas :
		dpt_fifof_c_r != 2'd1 || len_fifof_enqueueing$whas) &&
	     len_fifof_enqueueing$whas &&
	     !dpt_fifof_dequeueing$whas ;

  // rule RL_dpt_fifof_decCtr
  assign WILL_FIRE_RL_dpt_fifof_decCtr =
	     dpt_fifof_dequeueing$whas && !len_fifof_enqueueing$whas ;

  // rule RL_dpt_fifof_both
  assign WILL_FIRE_RL_dpt_fifof_both =
	     ((dpt_fifof_c_r == 2'd1) ?
		len_fifof_enqueueing$whas :
		dpt_fifof_c_r != 2'd2 || len_fifof_enqueueing$whas) &&
	     dpt_fifof_dequeueing$whas &&
	     len_fifof_enqueueing$whas ;

  // rule RL_err_fifof_incCtr
  assign WILL_FIRE_RL_err_fifof_incCtr =
	     ((err_fifof_c_r == 2'd0) ?
		len_fifof_enqueueing$whas :
		err_fifof_c_r != 2'd1 || len_fifof_enqueueing$whas) &&
	     len_fifof_enqueueing$whas &&
	     !err_fifof_dequeueing$whas ;

  // rule RL_err_fifof_decCtr
  assign WILL_FIRE_RL_err_fifof_decCtr =
	     err_fifof_dequeueing$whas && !len_fifof_enqueueing$whas ;

  // rule RL_err_fifof_both
  assign WILL_FIRE_RL_err_fifof_both =
	     ((err_fifof_c_r == 2'd1) ?
		len_fifof_enqueueing$whas :
		err_fifof_c_r != 2'd2 || len_fifof_enqueueing$whas) &&
	     err_fifof_dequeueing$whas &&
	     len_fifof_enqueueing$whas ;

  // inputs to muxes for submodule ports
  assign MUX_dat_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dat_fifof_incCtr && dat_fifof_c_r == 2'd0 ;
  assign MUX_dat_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dat_fifof_incCtr && dat_fifof_c_r == 2'd1 ;
  assign MUX_dpt_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dpt_fifof_incCtr && dpt_fifof_c_r == 2'd0 ;
  assign MUX_dpt_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dpt_fifof_incCtr && dpt_fifof_c_r == 2'd1 ;
  assign MUX_err_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_err_fifof_incCtr && err_fifof_c_r == 2'd0 ;
  assign MUX_err_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_err_fifof_incCtr && err_fifof_c_r == 2'd1 ;
  assign MUX_len_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_len_fifof_incCtr && len_fifof_c_r == 2'd0 ;
  assign MUX_len_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_len_fifof_incCtr && len_fifof_c_r == 2'd1 ;
  assign MUX_spt_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_spt_fifof_incCtr && spt_fifof_c_r == 2'd0 ;
  assign MUX_spt_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_spt_fifof_incCtr && spt_fifof_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign MUX_dat_fifof_c_r$write_1__VAL_1 = dat_fifof_c_r + 2'd1 ;
  assign MUX_dat_fifof_c_r$write_1__VAL_2 = dat_fifof_c_r - 2'd1 ;
  assign MUX_dat_fifof_q_0$write_1__VAL_1 =
	     (dat_fifof_c_r == 2'd1) ?
	       MUX_dat_fifof_q_0$write_1__VAL_2 :
	       dat_fifof_q_1 ;
  assign MUX_dat_fifof_q_0$write_1__VAL_2 =
	     { wsiS_reqFifo$D_OUT[295:8], wsiS_reqFifo$D_OUT[309] } ;
  assign MUX_dat_fifof_q_1$write_1__VAL_1 =
	     (dat_fifof_c_r == 2'd2) ?
	       MUX_dat_fifof_q_0$write_1__VAL_2 :
	       289'd0 ;
  assign MUX_dpt_fifof_c_r$write_1__VAL_1 = dpt_fifof_c_r + 2'd1 ;
  assign MUX_dpt_fifof_c_r$write_1__VAL_2 = dpt_fifof_c_r - 2'd1 ;
  assign MUX_dpt_fifof_q_0$write_1__VAL_1 =
	     (dpt_fifof_c_r == 2'd1) ?
	       MUX_dpt_fifof_q_0$write_1__VAL_2 :
	       dpt_fifof_q_1 ;
  assign MUX_dpt_fifof_q_0$write_1__VAL_2 =
	     { wsiS_reqFifo$D_OUT[7:0], 2'd3 } ;
  assign MUX_dpt_fifof_q_1$write_1__VAL_1 =
	     (dpt_fifof_c_r == 2'd2) ?
	       MUX_dpt_fifof_q_0$write_1__VAL_2 :
	       10'd0 ;
  assign MUX_err_fifof_c_r$write_1__VAL_1 = err_fifof_c_r + 2'd1 ;
  assign MUX_err_fifof_c_r$write_1__VAL_2 = err_fifof_c_r - 2'd1 ;
  assign MUX_err_fifof_q_0$write_1__VAL_1 =
	     (err_fifof_c_r == 2'd1) ? 10'd3 : err_fifof_q_1 ;
  assign MUX_err_fifof_q_1$write_1__VAL_1 =
	     (err_fifof_c_r == 2'd2) ? 10'd3 : 10'd0 ;
  assign MUX_len_fifof_c_r$write_1__VAL_1 = len_fifof_c_r + 2'd1 ;
  assign MUX_len_fifof_c_r$write_1__VAL_2 = len_fifof_c_r - 2'd1 ;
  assign MUX_len_fifof_q_0$write_1__VAL_1 =
	     (len_fifof_c_r == 2'd1) ?
	       MUX_len_fifof_q_0$write_1__VAL_2 :
	       len_fifof_q_1 ;
  assign MUX_len_fifof_q_0$write_1__VAL_2 = { x_data__h9010, 3'd7 } ;
  assign MUX_len_fifof_q_1$write_1__VAL_1 =
	     (len_fifof_c_r == 2'd2) ?
	       MUX_len_fifof_q_0$write_1__VAL_2 :
	       19'd0 ;
  assign MUX_spt_fifof_c_r$write_1__VAL_1 = spt_fifof_c_r + 2'd1 ;
  assign MUX_spt_fifof_c_r$write_1__VAL_2 = spt_fifof_c_r - 2'd1 ;
  assign MUX_spt_fifof_q_0$write_1__VAL_1 =
	     (spt_fifof_c_r == 2'd1) ? 10'd67 : spt_fifof_q_1 ;
  assign MUX_spt_fifof_q_1$write_1__VAL_1 =
	     (spt_fifof_c_r == 2'd2) ? 10'd67 : 10'd0 ;

  // inlined wires
  assign wsiS_wsiReq$wget =
	     { wsi_MCmd,
	       wsi_MReqLast,
	       wsi_MBurstPrecise,
	       wsi_MBurstLength,
	       wsi_MData,
	       wsi_MByteEn,
	       wsi_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = 1'd1 ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsi_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign dat_fifof_x_wire$wget = MUX_dat_fifof_q_0$write_1__VAL_2 ;
  assign dat_fifof_x_wire$whas = WILL_FIRE_RL_advance_data ;
  assign len_fifof_x_wire$wget = MUX_len_fifof_q_0$write_1__VAL_2 ;
  assign len_fifof_x_wire$whas = len_fifof_enqueueing$whas ;
  assign spt_fifof_x_wire$wget = 10'd67 ;
  assign spt_fifof_x_wire$whas = len_fifof_enqueueing$whas ;
  assign dpt_fifof_x_wire$wget = MUX_dpt_fifof_q_0$write_1__VAL_2 ;
  assign dpt_fifof_x_wire$whas = len_fifof_enqueueing$whas ;
  assign err_fifof_x_wire$wget = 10'd3 ;
  assign err_fifof_x_wire$whas = len_fifof_enqueueing$whas ;
  assign wsi_Es_mCmd_w$wget = wsi_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = wsi_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsi_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = wsi_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsi_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign axiDat_Em_mTRdy_w$wget = 1'd1 ;
  assign axiDat_Em_mTRdy_w$whas = axi_dat_TREADY ;
  assign axiLen_Em_mTRdy_w$wget = 1'd1 ;
  assign axiLen_Em_mTRdy_w$whas = axi_len_TREADY ;
  assign axiSpt_Em_mTRdy_w$wget = 1'd1 ;
  assign axiSpt_Em_mTRdy_w$whas = axi_spt_TREADY ;
  assign axiDpt_Em_mTRdy_w$wget = 1'd1 ;
  assign axiDpt_Em_mTRdy_w$whas = axi_dpt_TREADY ;
  assign axiErr_Em_mTRdy_w$wget = 1'd1 ;
  assign axiErr_Em_mTRdy_w$whas = axi_err_TREADY ;
  assign wsiS_reqFifo_r_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_deq$whas = WILL_FIRE_RL_advance_data ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetDeq$whas = WILL_FIRE_RL_advance_data ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign dat_fifof_enqueueing$whas = WILL_FIRE_RL_advance_data ;
  assign dat_fifof_dequeueing$whas = dat_fifof_c_r != 2'd0 && axi_dat_TREADY ;
  assign dat_deq_ready$whas = axi_dat_TREADY ;
  assign dat_deq_deq$whas = 1'b0 ;
  assign len_fifof_enqueueing$whas = WILL_FIRE_RL_advance_data && firstWord ;
  assign len_fifof_dequeueing$whas = len_fifof_c_r != 2'd0 && axi_len_TREADY ;
  assign len_deq_ready$whas = axi_len_TREADY ;
  assign len_deq_deq$whas = 1'b0 ;
  assign spt_fifof_enqueueing$whas = len_fifof_enqueueing$whas ;
  assign spt_fifof_dequeueing$whas = spt_fifof_c_r != 2'd0 && axi_spt_TREADY ;
  assign spt_deq_ready$whas = axi_spt_TREADY ;
  assign spt_deq_deq$whas = 1'b0 ;
  assign dpt_fifof_enqueueing$whas = len_fifof_enqueueing$whas ;
  assign dpt_fifof_dequeueing$whas = dpt_fifof_c_r != 2'd0 && axi_dpt_TREADY ;
  assign dpt_deq_ready$whas = axi_dpt_TREADY ;
  assign dpt_deq_deq$whas = 1'b0 ;
  assign err_fifof_enqueueing$whas = len_fifof_enqueueing$whas ;
  assign err_fifof_dequeueing$whas = err_fifof_c_r != 2'd0 && axi_err_TREADY ;
  assign err_deq_ready$whas = axi_err_TREADY ;
  assign err_deq_deq$whas = 1'b0 ;
  assign wsi_Es_mReqLast_w$whas = wsi_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsi_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;

  // register dat_fifof_c_r
  assign dat_fifof_c_r$D_IN =
	     WILL_FIRE_RL_dat_fifof_incCtr ?
	       MUX_dat_fifof_c_r$write_1__VAL_1 :
	       MUX_dat_fifof_c_r$write_1__VAL_2 ;
  assign dat_fifof_c_r$EN =
	     WILL_FIRE_RL_dat_fifof_incCtr || WILL_FIRE_RL_dat_fifof_decCtr ;

  // register dat_fifof_q_0
  always@(WILL_FIRE_RL_dat_fifof_both or
	  MUX_dat_fifof_q_0$write_1__VAL_1 or
	  MUX_dat_fifof_q_0$write_1__SEL_2 or
	  MUX_dat_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dat_fifof_decCtr or dat_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dat_fifof_both:
	  dat_fifof_q_0$D_IN = MUX_dat_fifof_q_0$write_1__VAL_1;
      MUX_dat_fifof_q_0$write_1__SEL_2:
	  dat_fifof_q_0$D_IN = MUX_dat_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dat_fifof_decCtr: dat_fifof_q_0$D_IN = dat_fifof_q_1;
      default: dat_fifof_q_0$D_IN =
		   289'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dat_fifof_q_0$EN =
	     WILL_FIRE_RL_dat_fifof_both ||
	     WILL_FIRE_RL_dat_fifof_incCtr && dat_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_dat_fifof_decCtr ;

  // register dat_fifof_q_1
  always@(WILL_FIRE_RL_dat_fifof_both or
	  MUX_dat_fifof_q_1$write_1__VAL_1 or
	  MUX_dat_fifof_q_1$write_1__SEL_2 or
	  MUX_dat_fifof_q_0$write_1__VAL_2 or WILL_FIRE_RL_dat_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dat_fifof_both:
	  dat_fifof_q_1$D_IN = MUX_dat_fifof_q_1$write_1__VAL_1;
      MUX_dat_fifof_q_1$write_1__SEL_2:
	  dat_fifof_q_1$D_IN = MUX_dat_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dat_fifof_decCtr: dat_fifof_q_1$D_IN = 289'd0;
      default: dat_fifof_q_1$D_IN =
		   289'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dat_fifof_q_1$EN =
	     WILL_FIRE_RL_dat_fifof_both ||
	     WILL_FIRE_RL_dat_fifof_incCtr && dat_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_dat_fifof_decCtr ;

  // register dpt_fifof_c_r
  assign dpt_fifof_c_r$D_IN =
	     WILL_FIRE_RL_dpt_fifof_incCtr ?
	       MUX_dpt_fifof_c_r$write_1__VAL_1 :
	       MUX_dpt_fifof_c_r$write_1__VAL_2 ;
  assign dpt_fifof_c_r$EN =
	     WILL_FIRE_RL_dpt_fifof_incCtr || WILL_FIRE_RL_dpt_fifof_decCtr ;

  // register dpt_fifof_q_0
  always@(WILL_FIRE_RL_dpt_fifof_both or
	  MUX_dpt_fifof_q_0$write_1__VAL_1 or
	  MUX_dpt_fifof_q_0$write_1__SEL_2 or
	  MUX_dpt_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dpt_fifof_decCtr or dpt_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dpt_fifof_both:
	  dpt_fifof_q_0$D_IN = MUX_dpt_fifof_q_0$write_1__VAL_1;
      MUX_dpt_fifof_q_0$write_1__SEL_2:
	  dpt_fifof_q_0$D_IN = MUX_dpt_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dpt_fifof_decCtr: dpt_fifof_q_0$D_IN = dpt_fifof_q_1;
      default: dpt_fifof_q_0$D_IN = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign dpt_fifof_q_0$EN =
	     WILL_FIRE_RL_dpt_fifof_both ||
	     WILL_FIRE_RL_dpt_fifof_incCtr && dpt_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_dpt_fifof_decCtr ;

  // register dpt_fifof_q_1
  always@(WILL_FIRE_RL_dpt_fifof_both or
	  MUX_dpt_fifof_q_1$write_1__VAL_1 or
	  MUX_dpt_fifof_q_1$write_1__SEL_2 or
	  MUX_dpt_fifof_q_0$write_1__VAL_2 or WILL_FIRE_RL_dpt_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dpt_fifof_both:
	  dpt_fifof_q_1$D_IN = MUX_dpt_fifof_q_1$write_1__VAL_1;
      MUX_dpt_fifof_q_1$write_1__SEL_2:
	  dpt_fifof_q_1$D_IN = MUX_dpt_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dpt_fifof_decCtr: dpt_fifof_q_1$D_IN = 10'd0;
      default: dpt_fifof_q_1$D_IN = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign dpt_fifof_q_1$EN =
	     WILL_FIRE_RL_dpt_fifof_both ||
	     WILL_FIRE_RL_dpt_fifof_incCtr && dpt_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_dpt_fifof_decCtr ;

  // register err_fifof_c_r
  assign err_fifof_c_r$D_IN =
	     WILL_FIRE_RL_err_fifof_incCtr ?
	       MUX_err_fifof_c_r$write_1__VAL_1 :
	       MUX_err_fifof_c_r$write_1__VAL_2 ;
  assign err_fifof_c_r$EN =
	     WILL_FIRE_RL_err_fifof_incCtr || WILL_FIRE_RL_err_fifof_decCtr ;

  // register err_fifof_q_0
  always@(WILL_FIRE_RL_err_fifof_both or
	  MUX_err_fifof_q_0$write_1__VAL_1 or
	  MUX_err_fifof_q_0$write_1__SEL_2 or
	  WILL_FIRE_RL_err_fifof_decCtr or err_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_err_fifof_both:
	  err_fifof_q_0$D_IN = MUX_err_fifof_q_0$write_1__VAL_1;
      MUX_err_fifof_q_0$write_1__SEL_2: err_fifof_q_0$D_IN = 10'd3;
      WILL_FIRE_RL_err_fifof_decCtr: err_fifof_q_0$D_IN = err_fifof_q_1;
      default: err_fifof_q_0$D_IN = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign err_fifof_q_0$EN =
	     WILL_FIRE_RL_err_fifof_both ||
	     WILL_FIRE_RL_err_fifof_incCtr && err_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_err_fifof_decCtr ;

  // register err_fifof_q_1
  always@(WILL_FIRE_RL_err_fifof_both or
	  MUX_err_fifof_q_1$write_1__VAL_1 or
	  MUX_err_fifof_q_1$write_1__SEL_2 or WILL_FIRE_RL_err_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_err_fifof_both:
	  err_fifof_q_1$D_IN = MUX_err_fifof_q_1$write_1__VAL_1;
      MUX_err_fifof_q_1$write_1__SEL_2: err_fifof_q_1$D_IN = 10'd3;
      WILL_FIRE_RL_err_fifof_decCtr: err_fifof_q_1$D_IN = 10'd0;
      default: err_fifof_q_1$D_IN = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign err_fifof_q_1$EN =
	     WILL_FIRE_RL_err_fifof_both ||
	     WILL_FIRE_RL_err_fifof_incCtr && err_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_err_fifof_decCtr ;

  // register firstWord
  assign firstWord$D_IN = wsiS_reqFifo$D_OUT[309] ;
  assign firstWord$EN = WILL_FIRE_RL_advance_data ;

  // register len_fifof_c_r
  assign len_fifof_c_r$D_IN =
	     WILL_FIRE_RL_len_fifof_incCtr ?
	       MUX_len_fifof_c_r$write_1__VAL_1 :
	       MUX_len_fifof_c_r$write_1__VAL_2 ;
  assign len_fifof_c_r$EN =
	     WILL_FIRE_RL_len_fifof_incCtr || WILL_FIRE_RL_len_fifof_decCtr ;

  // register len_fifof_q_0
  always@(WILL_FIRE_RL_len_fifof_both or
	  MUX_len_fifof_q_0$write_1__VAL_1 or
	  MUX_len_fifof_q_0$write_1__SEL_2 or
	  MUX_len_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_len_fifof_decCtr or len_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_len_fifof_both:
	  len_fifof_q_0$D_IN = MUX_len_fifof_q_0$write_1__VAL_1;
      MUX_len_fifof_q_0$write_1__SEL_2:
	  len_fifof_q_0$D_IN = MUX_len_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_len_fifof_decCtr: len_fifof_q_0$D_IN = len_fifof_q_1;
      default: len_fifof_q_0$D_IN =
		   19'b0101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign len_fifof_q_0$EN =
	     WILL_FIRE_RL_len_fifof_both ||
	     WILL_FIRE_RL_len_fifof_incCtr && len_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_len_fifof_decCtr ;

  // register len_fifof_q_1
  always@(WILL_FIRE_RL_len_fifof_both or
	  MUX_len_fifof_q_1$write_1__VAL_1 or
	  MUX_len_fifof_q_1$write_1__SEL_2 or
	  MUX_len_fifof_q_0$write_1__VAL_2 or WILL_FIRE_RL_len_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_len_fifof_both:
	  len_fifof_q_1$D_IN = MUX_len_fifof_q_1$write_1__VAL_1;
      MUX_len_fifof_q_1$write_1__SEL_2:
	  len_fifof_q_1$D_IN = MUX_len_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_len_fifof_decCtr: len_fifof_q_1$D_IN = 19'd0;
      default: len_fifof_q_1$D_IN =
		   19'b0101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign len_fifof_q_1$EN =
	     WILL_FIRE_RL_len_fifof_both ||
	     WILL_FIRE_RL_len_fifof_incCtr && len_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_len_fifof_decCtr ;

  // register spt_fifof_c_r
  assign spt_fifof_c_r$D_IN =
	     WILL_FIRE_RL_spt_fifof_incCtr ?
	       MUX_spt_fifof_c_r$write_1__VAL_1 :
	       MUX_spt_fifof_c_r$write_1__VAL_2 ;
  assign spt_fifof_c_r$EN =
	     WILL_FIRE_RL_spt_fifof_incCtr || WILL_FIRE_RL_spt_fifof_decCtr ;

  // register spt_fifof_q_0
  always@(WILL_FIRE_RL_spt_fifof_both or
	  MUX_spt_fifof_q_0$write_1__VAL_1 or
	  MUX_spt_fifof_q_0$write_1__SEL_2 or
	  WILL_FIRE_RL_spt_fifof_decCtr or spt_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_spt_fifof_both:
	  spt_fifof_q_0$D_IN = MUX_spt_fifof_q_0$write_1__VAL_1;
      MUX_spt_fifof_q_0$write_1__SEL_2: spt_fifof_q_0$D_IN = 10'd67;
      WILL_FIRE_RL_spt_fifof_decCtr: spt_fifof_q_0$D_IN = spt_fifof_q_1;
      default: spt_fifof_q_0$D_IN = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign spt_fifof_q_0$EN =
	     WILL_FIRE_RL_spt_fifof_both ||
	     WILL_FIRE_RL_spt_fifof_incCtr && spt_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_spt_fifof_decCtr ;

  // register spt_fifof_q_1
  always@(WILL_FIRE_RL_spt_fifof_both or
	  MUX_spt_fifof_q_1$write_1__VAL_1 or
	  MUX_spt_fifof_q_1$write_1__SEL_2 or WILL_FIRE_RL_spt_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_spt_fifof_both:
	  spt_fifof_q_1$D_IN = MUX_spt_fifof_q_1$write_1__VAL_1;
      MUX_spt_fifof_q_1$write_1__SEL_2: spt_fifof_q_1$D_IN = 10'd67;
      WILL_FIRE_RL_spt_fifof_decCtr: spt_fifof_q_1$D_IN = 10'd0;
      default: spt_fifof_q_1$D_IN = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign spt_fifof_q_1$EN =
	     WILL_FIRE_RL_spt_fifof_both ||
	     WILL_FIRE_RL_spt_fifof_incCtr && spt_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_spt_fifof_decCtr ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[308] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__1_AND_wsiS_burstKind_6_E_ETC___d53 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[309] ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_wsiReq$wget[309] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = 1'b1 ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[309] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsi_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_advance_data ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_advance_data ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset$VAL,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[309] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$DEQ = WILL_FIRE_RL_advance_data ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign wsiS_reqFifo_notFull__1_AND_wsiS_burstKind_6_E_ETC___d53 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[309]) ;
  assign x__h9016 = { wsiS_reqFifo$D_OUT[302:296], 5'd0 } ;
  assign x_data__h9010 = { 4'd0, x__h9016 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        dat_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dat_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 289'd0;
	dat_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 289'd0;
	dpt_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dpt_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 10'd0;
	dpt_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 10'd0;
	err_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	err_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 10'd0;
	err_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 10'd0;
	firstWord <= `BSV_ASSIGNMENT_DELAY 1'd1;
	len_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	len_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 19'd0;
	len_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 19'd0;
	spt_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	spt_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 10'd0;
	spt_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 10'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (dat_fifof_c_r$EN)
	  dat_fifof_c_r <= `BSV_ASSIGNMENT_DELAY dat_fifof_c_r$D_IN;
	if (dat_fifof_q_0$EN)
	  dat_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY dat_fifof_q_0$D_IN;
	if (dat_fifof_q_1$EN)
	  dat_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY dat_fifof_q_1$D_IN;
	if (dpt_fifof_c_r$EN)
	  dpt_fifof_c_r <= `BSV_ASSIGNMENT_DELAY dpt_fifof_c_r$D_IN;
	if (dpt_fifof_q_0$EN)
	  dpt_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY dpt_fifof_q_0$D_IN;
	if (dpt_fifof_q_1$EN)
	  dpt_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY dpt_fifof_q_1$D_IN;
	if (err_fifof_c_r$EN)
	  err_fifof_c_r <= `BSV_ASSIGNMENT_DELAY err_fifof_c_r$D_IN;
	if (err_fifof_q_0$EN)
	  err_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY err_fifof_q_0$D_IN;
	if (err_fifof_q_1$EN)
	  err_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY err_fifof_q_1$D_IN;
	if (firstWord$EN) firstWord <= `BSV_ASSIGNMENT_DELAY firstWord$D_IN;
	if (len_fifof_c_r$EN)
	  len_fifof_c_r <= `BSV_ASSIGNMENT_DELAY len_fifof_c_r$D_IN;
	if (len_fifof_q_0$EN)
	  len_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY len_fifof_q_0$D_IN;
	if (len_fifof_q_1$EN)
	  len_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY len_fifof_q_1$D_IN;
	if (spt_fifof_c_r$EN)
	  spt_fifof_c_r <= `BSV_ASSIGNMENT_DELAY spt_fifof_c_r$D_IN;
	if (spt_fifof_q_0$EN)
	  spt_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY spt_fifof_q_0$D_IN;
	if (spt_fifof_q_1$EN)
	  spt_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY spt_fifof_q_1$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dat_fifof_c_r = 2'h2;
    dat_fifof_q_0 =
	289'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dat_fifof_q_1 =
	289'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dpt_fifof_c_r = 2'h2;
    dpt_fifof_q_0 = 10'h2AA;
    dpt_fifof_q_1 = 10'h2AA;
    err_fifof_c_r = 2'h2;
    err_fifof_q_0 = 10'h2AA;
    err_fifof_q_1 = 10'h2AA;
    firstWord = 1'h0;
    len_fifof_c_r = 2'h2;
    len_fifof_q_0 = 19'h2AAAA;
    len_fifof_q_1 = 19'h2AAAA;
    spt_fifof_c_r = 2'h2;
    spt_fifof_q_0 = 10'h2AA;
    spt_fifof_q_1 = 10'h2AA;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkWSItoAXIS32B

