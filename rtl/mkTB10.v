//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Thu Feb  3 13:44:11 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkTB10(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [95 : 0] wsiM_extStatusW$wget, wsiS_extStatusW$wget;
  wire [71 : 0] wci_reqF_x_wire$wget;
  wire [60 : 0] wsiM_reqFifo_x_wire$wget, wsiS_wsiReq$wget;
  wire [33 : 0] wci_wciResponse$wget;
  wire [31 : 0] wci_wci_Em_respData_w$wget, wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wsi_Es_mByteEn_w$wget;
  wire [2 : 0] wsi_Es_mCmd_w$wget;
  wire [1 : 0] wci_wci_Em_resp_w$wget;
  wire wciSeqFsm_abort$wget,
       wciSeqFsm_abort$whas,
       wciSeqFsm_pw_list$whas,
       wciSeqFsm_pw_list_1$whas,
       wciSeqFsm_pw_list_10$whas,
       wciSeqFsm_pw_list_11$whas,
       wciSeqFsm_pw_list_12$whas,
       wciSeqFsm_pw_list_13$whas,
       wciSeqFsm_pw_list_14$whas,
       wciSeqFsm_pw_list_15$whas,
       wciSeqFsm_pw_list_16$whas,
       wciSeqFsm_pw_list_17$whas,
       wciSeqFsm_pw_list_18$whas,
       wciSeqFsm_pw_list_19$whas,
       wciSeqFsm_pw_list_2$whas,
       wciSeqFsm_pw_list_20$whas,
       wciSeqFsm_pw_list_21$whas,
       wciSeqFsm_pw_list_22$whas,
       wciSeqFsm_pw_list_23$whas,
       wciSeqFsm_pw_list_24$whas,
       wciSeqFsm_pw_list_3$whas,
       wciSeqFsm_pw_list_4$whas,
       wciSeqFsm_pw_list_5$whas,
       wciSeqFsm_pw_list_6$whas,
       wciSeqFsm_pw_list_7$whas,
       wciSeqFsm_pw_list_8$whas,
       wciSeqFsm_pw_list_9$whas,
       wciSeqFsm_start_reg_1$wget,
       wciSeqFsm_start_reg_1$whas,
       wciSeqFsm_start_wire$wget,
       wciSeqFsm_start_wire$whas,
       wciSeqFsm_state_run_pw$whas,
       wciSeqFsm_state_start_pw$whas,
       wci_reqF_dequeueing$whas,
       wci_reqF_enqueueing$whas,
       wci_reqF_x_wire$whas,
       wci_sThreadBusy_pw$whas,
       wci_sfCapClear_1$wget,
       wci_sfCapClear_1$whas,
       wci_sfCapSet_1$wget,
       wci_sfCapSet_1$whas,
       wci_wciResponse$whas,
       wci_wci_Em_respData_w$whas,
       wci_wci_Em_resp_w$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas;

  // register dstDataOut
  reg [31 : 0] dstDataOut;
  wire [31 : 0] dstDataOut$D_IN;
  wire dstDataOut$EN;

  // register dstMesgCount
  reg [15 : 0] dstMesgCount;
  wire [15 : 0] dstMesgCount$D_IN;
  wire dstMesgCount$EN;

  // register dstUnrollCnt
  reg [15 : 0] dstUnrollCnt;
  wire [15 : 0] dstUnrollCnt$D_IN;
  wire dstUnrollCnt$EN;

  // register enWsiChecker
  reg enWsiChecker;
  wire enWsiChecker$D_IN, enWsiChecker$EN;

  // register enWsiSource
  reg enWsiSource;
  wire enWsiSource$D_IN, enWsiSource$EN;

  // register simCycle
  reg [15 : 0] simCycle;
  wire [15 : 0] simCycle$D_IN;
  wire simCycle$EN;

  // register srcDataOut
  reg [31 : 0] srcDataOut;
  wire [31 : 0] srcDataOut$D_IN;
  wire srcDataOut$EN;

  // register srcIndex
  reg [5 : 0] srcIndex;
  wire [5 : 0] srcIndex$D_IN;
  wire srcIndex$EN;

  // register srcMesgCount
  reg [15 : 0] srcMesgCount;
  wire [15 : 0] srcMesgCount$D_IN;
  wire srcMesgCount$EN;

  // register srcUnrollCnt
  reg [15 : 0] srcUnrollCnt;
  wire [15 : 0] srcUnrollCnt$D_IN;
  wire srcUnrollCnt$EN;

  // register testOperating
  reg testOperating;
  wire testOperating$D_IN, testOperating$EN;

  // register wciSeqFsm_start_reg
  reg wciSeqFsm_start_reg;
  wire wciSeqFsm_start_reg$D_IN, wciSeqFsm_start_reg$EN;

  // register wciSeqFsm_state_mkFSMstate
  reg [4 : 0] wciSeqFsm_state_mkFSMstate;
  reg [4 : 0] wciSeqFsm_state_mkFSMstate$D_IN;
  wire wciSeqFsm_state_mkFSMstate$EN;

  // register wciSeqFsm_state_standby
  reg wciSeqFsm_state_standby;
  wire wciSeqFsm_state_standby$D_IN, wciSeqFsm_state_standby$EN;

  // register wciSeqOnce_onceReady
  reg wciSeqOnce_onceReady;
  wire wciSeqOnce_onceReady$D_IN, wciSeqOnce_onceReady$EN;

  // register wci_busy
  reg wci_busy;
  wire wci_busy$D_IN, wci_busy$EN;

  // register wci_lastConfigAddr
  reg [32 : 0] wci_lastConfigAddr;
  wire [32 : 0] wci_lastConfigAddr$D_IN;
  wire wci_lastConfigAddr$EN;

  // register wci_lastConfigBE
  reg [4 : 0] wci_lastConfigBE;
  wire [4 : 0] wci_lastConfigBE$D_IN;
  wire wci_lastConfigBE$EN;

  // register wci_lastControlOp
  reg [3 : 0] wci_lastControlOp;
  wire [3 : 0] wci_lastControlOp$D_IN;
  wire wci_lastControlOp$EN;

  // register wci_lastOpWrite
  reg [1 : 0] wci_lastOpWrite;
  wire [1 : 0] wci_lastOpWrite$D_IN;
  wire wci_lastOpWrite$EN;

  // register wci_mFlagReg
  reg [1 : 0] wci_mFlagReg;
  wire [1 : 0] wci_mFlagReg$D_IN;
  wire wci_mFlagReg$EN;

  // register wci_pageWindow
  reg [11 : 0] wci_pageWindow;
  wire [11 : 0] wci_pageWindow$D_IN;
  wire wci_pageWindow$EN;

  // register wci_reqERR
  reg [2 : 0] wci_reqERR;
  reg [2 : 0] wci_reqERR$D_IN;
  wire wci_reqERR$EN;

  // register wci_reqFAIL
  reg [2 : 0] wci_reqFAIL;
  reg [2 : 0] wci_reqFAIL$D_IN;
  wire wci_reqFAIL$EN;

  // register wci_reqF_c_r
  reg wci_reqF_c_r;
  wire wci_reqF_c_r$D_IN, wci_reqF_c_r$EN;

  // register wci_reqF_q_0
  reg [71 : 0] wci_reqF_q_0;
  reg [71 : 0] wci_reqF_q_0$D_IN;
  wire wci_reqF_q_0$EN;

  // register wci_reqPend
  reg [1 : 0] wci_reqPend;
  reg [1 : 0] wci_reqPend$D_IN;
  wire wci_reqPend$EN;

  // register wci_reqTO
  reg [2 : 0] wci_reqTO;
  reg [2 : 0] wci_reqTO$D_IN;
  wire wci_reqTO$EN;

  // register wci_respTimr
  reg [31 : 0] wci_respTimr;
  wire [31 : 0] wci_respTimr$D_IN;
  wire wci_respTimr$EN;

  // register wci_respTimrAct
  reg wci_respTimrAct;
  wire wci_respTimrAct$D_IN, wci_respTimrAct$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wci_sfCap
  reg wci_sfCap;
  wire wci_sfCap$D_IN, wci_sfCap$EN;

  // register wci_sfCapClear
  reg wci_sfCapClear;
  wire wci_sfCapClear$D_IN, wci_sfCapClear$EN;

  // register wci_sfCapSet
  reg wci_sfCapSet;
  wire wci_sfCapSet$D_IN, wci_sfCapSet$EN;

  // register wci_slvPresent
  reg wci_slvPresent;
  wire wci_slvPresent$D_IN, wci_slvPresent$EN;

  // register wci_wReset_n
  reg wci_wReset_n;
  wire wci_wReset_n$D_IN, wci_wReset_n$EN;

  // register wci_wStatus
  reg [31 : 0] wci_wStatus;
  wire [31 : 0] wci_wStatus$D_IN;
  wire wci_wStatus$EN;

  // register wci_wTimeout
  reg [4 : 0] wci_wTimeout;
  wire [4 : 0] wci_wTimeout$D_IN;
  wire wci_wTimeout$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule psdWorker
  wire [31 : 0] psdWorker$wciS0_MAddr,
		psdWorker$wciS0_MData,
		psdWorker$wciS0_SData,
		psdWorker$wsiM0_MData,
		psdWorker$wsiS0_MData;
  wire [11 : 0] psdWorker$wsiM0_MBurstLength, psdWorker$wsiS0_MBurstLength;
  wire [7 : 0] psdWorker$wsiM0_MReqInfo, psdWorker$wsiS0_MReqInfo;
  wire [3 : 0] psdWorker$wciS0_MByteEn,
	       psdWorker$wsiM0_MByteEn,
	       psdWorker$wsiS0_MByteEn;
  wire [2 : 0] psdWorker$wciS0_MCmd,
	       psdWorker$wsiM0_MCmd,
	       psdWorker$wsiS0_MCmd;
  wire [1 : 0] psdWorker$wciS0_MFlag,
	       psdWorker$wciS0_SFlag,
	       psdWorker$wciS0_SResp;
  wire psdWorker$wciS0_MAddrSpace,
       psdWorker$wciS0_SThreadBusy,
       psdWorker$wsiM0_MBurstPrecise,
       psdWorker$wsiM0_MReqLast,
       psdWorker$wsiM0_MReset_n,
       psdWorker$wsiM0_SReset_n,
       psdWorker$wsiM0_SThreadBusy,
       psdWorker$wsiS0_MBurstPrecise,
       psdWorker$wsiS0_MReqLast,
       psdWorker$wsiS0_MReset_n,
       psdWorker$wsiS0_SReset_n,
       psdWorker$wsiS0_SThreadBusy;

  // ports of submodule wci_mReset
  wire wci_mReset$ASSERT_IN, wci_mReset$OUT_RST_N;

  // ports of submodule wci_respF
  reg [33 : 0] wci_respF$D_IN;
  wire wci_respF$CLR,
       wci_respF$DEQ,
       wci_respF$EMPTY_N,
       wci_respF$ENQ,
       wci_respF$FULL_N;

  // ports of submodule wsiM_isReset
  wire wsiM_isReset$VAL;

  // ports of submodule wsiS_isReset
  wire wsiS_isReset$VAL;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_wciSeqFsm_actionof_l114c3_22,
       WILL_FIRE_RL_wciSeqFsm_actionof_l115c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l116c10,
       WILL_FIRE_RL_wciSeqFsm_actionof_l119c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l120c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l123c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l124c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l127c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l128c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l131c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l132c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l135c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l136c5,
       WILL_FIRE_RL_wci_reqF_both,
       WILL_FIRE_RL_wci_reqF_decCtr,
       WILL_FIRE_RL_wci_reqF_incCtr,
       WILL_FIRE_RL_wci_wrkBusy,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset,
       WILL_FIRE_RL_wsi_checker,
       WILL_FIRE_RL_wsi_source;

  // inputs to muxes for submodule ports
  reg [71 : 0] MUX_wci_reqF_q_0$write_1__VAL_1;
  wire [71 : 0] MUX_wci_reqF_q_0$write_1__VAL_2,
		MUX_wci_reqF_x_wire$wset_1__VAL_2,
		MUX_wci_reqF_x_wire$wset_1__VAL_3;
  wire [60 : 0] MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_2;
  wire [33 : 0] MUX_wci_respF$enq_1__VAL_2;
  wire [31 : 0] MUX_wci_respTimr$write_1__VAL_2;
  wire [15 : 0] MUX_dstUnrollCnt$write_1__VAL_2,
		MUX_srcUnrollCnt$write_1__VAL_2;
  wire [1 : 0] MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1,
       MUX_wci_busy$write_1__PSEL_1,
       MUX_wci_busy$write_1__SEL_1,
       MUX_wci_busy$write_1__SEL_2,
       MUX_wci_lastConfigBE$write_1__SEL_1,
       MUX_wci_lastConfigBE$write_1__SEL_2,
       MUX_wci_lastControlOp$write_1__SEL_1,
       MUX_wci_lastControlOp$write_1__SEL_2,
       MUX_wci_reqF_c_r$write_1__VAL_1,
       MUX_wci_reqF_c_r$write_1__VAL_2,
       MUX_wci_reqF_q_0$write_1__SEL_1,
       MUX_wci_reqPend$write_1__PSEL_3,
       MUX_wci_reqPend$write_1__SEL_3,
       MUX_wci_reqPend$write_1__SEL_4,
       MUX_wci_respF$enq_1__SEL_1,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h2737,
	       v__h2827,
	       v__h2916,
	       v__h3140,
	       v__h3230,
	       v__h3319,
	       v__h3548,
	       v__h3638,
	       v__h3727,
	       v__h43509,
	       v__h43832,
	       v__h44679,
	       v__h44908,
	       v__h45511,
	       v__h46299,
	       v__h47123,
	       v__h47379,
	       v__h52543,
	       v__h52786,
	       v__h52983,
	       v__h53090;
  reg [15 : 0] CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1,
	       CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2;
  wire [31 : 0] toCount__h2445, wciAddr__h45703, x__h2604, x_data__h49213;
  wire [26 : 0] IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137;
  wire [15 : 0] wsiBurstLength__h52618;
  wire NOT_wciSeqFsm_abort_whas__82_39_OR_NOT_wciSeqF_ETC___d444,
       NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468,
       _dand1wci_busy$EN_write,
       _dand1wci_respF$EN_enq,
       _dor1wci_lastConfigAddr$EN_write,
       wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840,
       wsiS_reqFifo_notFull__56_AND_wsiS_burstKind_71_ETC___d278;

  // submodule psdWorker
  mkPSD #(.psdCtrlInit(32'h0),
	  .hasDebugLogic(1'd1)) psdWorker(.wciS0_Clk(CLK),
					  .wciS0_MReset_n(wci_mReset$OUT_RST_N),
					  .wciS0_MAddr(psdWorker$wciS0_MAddr),
					  .wciS0_MAddrSpace(psdWorker$wciS0_MAddrSpace),
					  .wciS0_MByteEn(psdWorker$wciS0_MByteEn),
					  .wciS0_MCmd(psdWorker$wciS0_MCmd),
					  .wciS0_MData(psdWorker$wciS0_MData),
					  .wciS0_MFlag(psdWorker$wciS0_MFlag),
					  .wsiS0_MBurstLength(psdWorker$wsiS0_MBurstLength),
					  .wsiS0_MByteEn(psdWorker$wsiS0_MByteEn),
					  .wsiS0_MCmd(psdWorker$wsiS0_MCmd),
					  .wsiS0_MData(psdWorker$wsiS0_MData),
					  .wsiS0_MReqInfo(psdWorker$wsiS0_MReqInfo),
					  .wsiS0_MReqLast(psdWorker$wsiS0_MReqLast),
					  .wsiS0_MBurstPrecise(psdWorker$wsiS0_MBurstPrecise),
					  .wsiS0_MReset_n(psdWorker$wsiS0_MReset_n),
					  .wsiM0_SThreadBusy(psdWorker$wsiM0_SThreadBusy),
					  .wsiM0_SReset_n(psdWorker$wsiM0_SReset_n),
					  .wciS0_SResp(psdWorker$wciS0_SResp),
					  .wciS0_SData(psdWorker$wciS0_SData),
					  .wciS0_SThreadBusy(psdWorker$wciS0_SThreadBusy),
					  .wciS0_SFlag(psdWorker$wciS0_SFlag),
					  .wsiS0_SThreadBusy(psdWorker$wsiS0_SThreadBusy),
					  .wsiS0_SReset_n(psdWorker$wsiS0_SReset_n),
					  .wsiM0_MCmd(psdWorker$wsiM0_MCmd),
					  .wsiM0_MReqLast(psdWorker$wsiM0_MReqLast),
					  .wsiM0_MBurstPrecise(psdWorker$wsiM0_MBurstPrecise),
					  .wsiM0_MBurstLength(psdWorker$wsiM0_MBurstLength),
					  .wsiM0_MData(psdWorker$wsiM0_MData),
					  .wsiM0_MByteEn(psdWorker$wsiM0_MByteEn),
					  .wsiM0_MReqInfo(psdWorker$wsiM0_MReqInfo),
					  .wsiM0_MReset_n(psdWorker$wsiM0_MReset_n));

  // submodule wci_mReset
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) wci_mReset(.CLK(CLK),
							  .RST_N(RST_N),
							  .DST_CLK(CLK),
							  .ASSERT_IN(wci_mReset$ASSERT_IN),
							  .ASSERT_OUT(),
							  .OUT_RST_N(wci_mReset$OUT_RST_N));

  // submodule wci_respF
  FIFO1 #(.width(32'd34), .guarded(32'd1)) wci_respF(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(wci_respF$D_IN),
						     .ENQ(wci_respF$ENQ),
						     .DEQ(wci_respF$DEQ),
						     .CLR(wci_respF$CLR),
						     .D_OUT(),
						     .FULL_N(wci_respF$FULL_N),
						     .EMPTY_N(wci_respF$EMPTY_N));

  // submodule wsiM_isReset
  ResetToBool wsiM_isReset(.RST(RST_N), .VAL(wsiM_isReset$VAL));

  // submodule wsiS_isReset
  ResetToBool wsiS_isReset(.RST(RST_N), .VAL(wsiS_isReset$VAL));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wsi_source
  assign WILL_FIRE_RL_wsi_source =
	     (srcMesgCount != 16'd0 || wsiM_reqFifo_c_r != 2'd2) &&
	     enWsiSource ;

  // rule RL_wci_wrkBusy
  assign WILL_FIRE_RL_wci_wrkBusy =
	     ((wci_wciResponse$wget[33:32] == 2'd0) ?
		wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 ||
		wci_respF$FULL_N :
		wci_respF$FULL_N) &&
	     wci_busy ;

  // rule RL_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;

  // rule RL_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd1 || wsiM_reqFifo_enqueueing$whas) &&
	     wsiM_reqFifo_enqueueing$whas &&
	     !WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_wsiM_reqFifo_deq && !wsiM_reqFifo_enqueueing$whas ;

  // rule RL_wsiM_reqFifo_both
  assign WILL_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd2 || wsiM_reqFifo_enqueueing$whas) &&
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_enqueueing$whas ;

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_wsi_checker
  assign WILL_FIRE_RL_wsi_checker = wsiS_reqFifo$EMPTY_N && enWsiChecker ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_wsi_checker ;

  // rule RL_wciSeqFsm_actionof_l116c10
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l116c10 =
	     wci_slvPresent && wciSeqFsm_state_mkFSMstate == 5'd2 ;

  // rule RL_wciSeqFsm_actionof_l119c8
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 =
	     !wci_busy && wci_respF$FULL_N &&
	     wciSeqFsm_state_mkFSMstate == 5'd4 ;

  // rule RL_wciSeqFsm_actionof_l120c5
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l120c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd5 ;

  // rule RL_wciSeqFsm_actionof_l123c8
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 =
	     NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	     wciSeqFsm_state_mkFSMstate == 5'd7 ;

  // rule RL_wciSeqFsm_actionof_l124c5
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l124c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd8 ;

  // rule RL_wciSeqFsm_actionof_l127c8
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 =
	     NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	     wciSeqFsm_state_mkFSMstate == 5'd10 ;

  // rule RL_wciSeqFsm_actionof_l128c5
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l128c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd11 ;

  // rule RL_wciSeqFsm_actionof_l131c8
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 =
	     NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	     wciSeqFsm_state_mkFSMstate == 5'd13 ;

  // rule RL_wciSeqFsm_actionof_l132c5
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l132c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd14 ;

  // rule RL_wciSeqFsm_actionof_l135c8
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 =
	     NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	     wciSeqFsm_state_mkFSMstate == 5'd16 ;

  // rule RL_wci_reqF_incCtr
  assign WILL_FIRE_RL_wci_reqF_incCtr =
	     (wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_enqueueing$whas &&
	     !wci_reqF_dequeueing$whas ;

  // rule RL_wci_reqF_decCtr
  assign WILL_FIRE_RL_wci_reqF_decCtr =
	     wci_reqF_dequeueing$whas && !wci_reqF_enqueueing$whas ;

  // rule RL_wci_reqF_both
  assign WILL_FIRE_RL_wci_reqF_both =
	     (!wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_dequeueing$whas &&
	     wci_reqF_enqueueing$whas ;

  // rule RL_wciSeqFsm_actionof_l136c5
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l136c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd17 ;

  // rule RL_wciSeqFsm_actionof_l114c3_22
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l114c3_22 =
	     wciSeqFsm_state_mkFSMstate == 5'd1 &&
	     !wciSeqFsm_start_wire$whas &&
	     !wciSeqFsm_state_standby ;

  // rule RL_wciSeqFsm_actionof_l115c5
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l115c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd1 &&
	     NOT_wciSeqFsm_abort_whas__82_39_OR_NOT_wciSeqF_ETC___d444 ;

  // inputs to muxes for submodule ports
  assign MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l114c3_22 ||
	     wciSeqFsm_state_mkFSMstate == 5'd23 ;
  assign MUX_wci_busy$write_1__PSEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 ;
  assign MUX_wci_busy$write_1__SEL_1 =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign MUX_wci_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ;
  assign MUX_wci_lastConfigBE$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 && wci_wReset_n ;
  assign MUX_wci_lastConfigBE$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 && wci_wReset_n ;
  assign MUX_wci_reqF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ;
  assign MUX_wci_reqPend$write_1__PSEL_3 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 ;
  assign MUX_wci_reqPend$write_1__SEL_3 =
	     MUX_wci_reqPend$write_1__PSEL_3 && wci_wReset_n ;
  assign MUX_wci_reqPend$write_1__SEL_4 =
	     WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] != 2'd0 ;
  assign MUX_wci_respF$enq_1__SEL_1 =
	     MUX_wci_busy$write_1__PSEL_1 && !wci_wReset_n ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign MUX_dstUnrollCnt$write_1__VAL_2 =
	     (dstUnrollCnt == 16'd1) ?
	       wsiBurstLength__h52618 :
	       dstUnrollCnt - 16'd1 ;
  assign MUX_srcUnrollCnt$write_1__VAL_2 =
	     (srcUnrollCnt == 16'd1) ? 16'd2048 : srcUnrollCnt - 16'd1 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_1 = wci_reqF_c_r + 1'd1 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_2 = wci_reqF_c_r - 1'd1 ;
  always@(MUX_wci_lastControlOp$write_1__SEL_1 or
	  MUX_wci_lastConfigBE$write_1__SEL_2 or
	  MUX_wci_reqF_x_wire$wset_1__VAL_2 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_reqF_x_wire$wset_1__VAL_3 or
	  MUX_wci_lastControlOp$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastControlOp$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_1 = 72'h4F00000000AAAAAAAA;
      MUX_wci_lastConfigBE$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_1 = MUX_wci_reqF_x_wire$wset_1__VAL_2;
      MUX_wci_lastConfigBE$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_1 = MUX_wci_reqF_x_wire$wset_1__VAL_3;
      MUX_wci_lastControlOp$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_1 = 72'h4F00000004AAAAAAAA;
      default: MUX_wci_reqF_q_0$write_1__VAL_1 =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_reqF_q_0$write_1__VAL_2 =
	     wci_reqF_c_r ?
	       MUX_wci_reqF_q_0$write_1__VAL_1 :
	       72'h0000000000AAAAAAAA ;
  assign MUX_wci_reqF_x_wire$wset_1__VAL_2 =
	     { 8'd63, wciAddr__h45703, 32'h00000002 } ;
  assign MUX_wci_reqF_x_wire$wset_1__VAL_3 =
	     { 8'd90, wciAddr__h45703, 32'hAAAAAAAA } ;
  assign MUX_wci_respF$enq_1__VAL_2 =
	     (wci_wciResponse$wget[33:32] == 2'd0) ?
	       34'h1C0DE4203 :
	       wci_wciResponse$wget ;
  assign MUX_wci_respTimr$write_1__VAL_2 =
	     (wci_wciResponse$wget[33:32] == 2'd0) ?
	       (wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 ?
		  x__h2604 :
		  32'd0) :
	       32'd0 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     { 3'd1,
	       srcUnrollCnt == 16'd1,
	       13'd4095,
	       x_data__h49213,
	       12'd3840 } ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign wci_reqF_x_wire$wget = MUX_wci_reqF_q_0$write_1__VAL_1 ;
  assign wci_reqF_x_wire$whas =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 && wci_wReset_n ;
  assign wci_wciResponse$wget =
	     { psdWorker$wciS0_SResp, psdWorker$wciS0_SData } ;
  assign wci_wciResponse$whas = 1'd1 ;
  assign wci_sfCapSet_1$wget = psdWorker$wciS0_SFlag[0] ;
  assign wci_sfCapSet_1$whas = 1'd1 ;
  assign wci_sfCapClear_1$wget = 1'b0 ;
  assign wci_sfCapClear_1$whas = 1'b0 ;
  assign wci_wci_Em_resp_w$wget = psdWorker$wciS0_SResp ;
  assign wci_wci_Em_resp_w$whas = 1'd1 ;
  assign wci_wci_Em_respData_w$wget = psdWorker$wciS0_SData ;
  assign wci_wci_Em_respData_w$whas = 1'd1 ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign wsiM_reqFifo_x_wire$whas = wsiM_reqFifo_enqueueing$whas ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = testOperating ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas = psdWorker$wsiS0_SReset_n ;
  assign wsiS_wsiReq$wget =
	     { psdWorker$wsiM0_MCmd,
	       psdWorker$wsiM0_MReqLast,
	       psdWorker$wsiM0_MBurstPrecise,
	       psdWorker$wsiM0_MBurstLength,
	       psdWorker$wsiM0_MData,
	       psdWorker$wsiM0_MByteEn,
	       psdWorker$wsiM0_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = testOperating ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = psdWorker$wsiM0_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign wsi_Es_mCmd_w$wget = psdWorker$wsiM0_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = psdWorker$wsiM0_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = psdWorker$wsiM0_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = psdWorker$wsiM0_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = psdWorker$wsiM0_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wciSeqFsm_start_reg_1$wget = 1'd1 ;
  assign wciSeqFsm_start_reg_1$whas =
	     wciSeqOnce_onceReady &&
	     (wciSeqFsm_state_mkFSMstate == 5'd23 ||
	      wciSeqFsm_state_mkFSMstate == 5'd1 &&
	      !wciSeqFsm_state_standby) &&
	     !wciSeqFsm_start_reg ;
  assign wciSeqFsm_start_wire$wget = 1'd1 ;
  assign wciSeqFsm_start_wire$whas =
	     (wciSeqFsm_state_mkFSMstate == 5'd23 ||
	      wciSeqFsm_state_mkFSMstate == 5'd1 &&
	      !wciSeqFsm_state_standby) &&
	     wciSeqFsm_start_reg ;
  assign wciSeqFsm_abort$wget = 1'b0 ;
  assign wciSeqFsm_abort$whas = 1'b0 ;
  assign wci_reqF_enqueueing$whas =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign wci_reqF_dequeueing$whas =
	     !wci_sThreadBusy_d && wci_wciResponse$wget[33:32] == 2'd0 &&
	     wci_reqF_c_r ;
  assign wci_sThreadBusy_pw$whas = psdWorker$wciS0_SThreadBusy ;
  assign wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_wsi_source && srcMesgCount == 16'd0 ;
  assign wsiM_reqFifo_dequeueing$whas = WILL_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas = psdWorker$wsiS0_SThreadBusy ;
  assign wsiS_reqFifo_r_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_deq$whas = WILL_FIRE_RL_wsi_checker ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetDeq$whas = WILL_FIRE_RL_wsi_checker ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign wsi_Es_mReqLast_w$whas = psdWorker$wsiM0_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = psdWorker$wsiM0_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wciSeqFsm_state_run_pw$whas =
	     wciSeqFsm_state_mkFSMstate == 5'd22 ||
	     wciSeqFsm_state_mkFSMstate == 5'd21 ||
	     wciSeqFsm_state_mkFSMstate == 5'd20 ||
	     wciSeqFsm_state_mkFSMstate == 5'd19 ||
	     wciSeqFsm_state_mkFSMstate == 5'd18 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l136c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd15 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l132c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd12 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l128c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd9 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l124c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd6 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l120c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 ||
	     wciSeqFsm_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l116c10 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l115c5 ;
  assign wciSeqFsm_state_start_pw$whas = wciSeqFsm_start_wire$whas ;
  assign wciSeqFsm_pw_list$whas = 1'b0 ;
  assign wciSeqFsm_pw_list_1$whas =
	     MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1 ;
  assign wciSeqFsm_pw_list_2$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l115c5 ;
  assign wciSeqFsm_pw_list_3$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l116c10 ;
  assign wciSeqFsm_pw_list_4$whas = wciSeqFsm_state_mkFSMstate == 5'd3 ;
  assign wciSeqFsm_pw_list_5$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 ;
  assign wciSeqFsm_pw_list_6$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l120c5 ;
  assign wciSeqFsm_pw_list_7$whas = wciSeqFsm_state_mkFSMstate == 5'd6 ;
  assign wciSeqFsm_pw_list_8$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 ;
  assign wciSeqFsm_pw_list_9$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l124c5 ;
  assign wciSeqFsm_pw_list_10$whas = wciSeqFsm_state_mkFSMstate == 5'd9 ;
  assign wciSeqFsm_pw_list_11$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 ;
  assign wciSeqFsm_pw_list_12$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l128c5 ;
  assign wciSeqFsm_pw_list_13$whas = wciSeqFsm_state_mkFSMstate == 5'd12 ;
  assign wciSeqFsm_pw_list_14$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 ;
  assign wciSeqFsm_pw_list_15$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l132c5 ;
  assign wciSeqFsm_pw_list_16$whas = wciSeqFsm_state_mkFSMstate == 5'd15 ;
  assign wciSeqFsm_pw_list_17$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ;
  assign wciSeqFsm_pw_list_18$whas = WILL_FIRE_RL_wciSeqFsm_actionof_l136c5 ;
  assign wciSeqFsm_pw_list_19$whas = wciSeqFsm_state_mkFSMstate == 5'd18 ;
  assign wciSeqFsm_pw_list_20$whas = wciSeqFsm_state_mkFSMstate == 5'd19 ;
  assign wciSeqFsm_pw_list_21$whas = wciSeqFsm_state_mkFSMstate == 5'd20 ;
  assign wciSeqFsm_pw_list_22$whas = wciSeqFsm_state_mkFSMstate == 5'd21 ;
  assign wciSeqFsm_pw_list_23$whas = wciSeqFsm_state_mkFSMstate == 5'd22 ;
  assign wciSeqFsm_pw_list_24$whas = 1'b0 ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;

  // register dstDataOut
  assign dstDataOut$D_IN = dstDataOut + 32'd2 ;
  assign dstDataOut$EN = WILL_FIRE_RL_wsi_checker ;

  // register dstMesgCount
  assign dstMesgCount$D_IN = dstMesgCount + 16'd1 ;
  assign dstMesgCount$EN = WILL_FIRE_RL_wsi_checker && dstUnrollCnt == 16'd1 ;

  // register dstUnrollCnt
  assign dstUnrollCnt$D_IN =
	     (wciSeqFsm_state_mkFSMstate == 5'd19) ?
	       16'd2048 :
	       MUX_dstUnrollCnt$write_1__VAL_2 ;
  assign dstUnrollCnt$EN =
	     WILL_FIRE_RL_wsi_checker || wciSeqFsm_state_mkFSMstate == 5'd19 ;

  // register enWsiChecker
  assign enWsiChecker$D_IN = 1'd1 ;
  assign enWsiChecker$EN = wciSeqFsm_state_mkFSMstate == 5'd20 ;

  // register enWsiSource
  assign enWsiSource$D_IN = 1'd1 ;
  assign enWsiSource$EN = wciSeqFsm_state_mkFSMstate == 5'd22 ;

  // register simCycle
  assign simCycle$D_IN = simCycle + 16'd1 ;
  assign simCycle$EN = 1'd1 ;

  // register srcDataOut
  assign srcDataOut$D_IN = srcDataOut + 32'd1 ;
  assign srcDataOut$EN = WILL_FIRE_RL_wsi_source ;

  // register srcIndex
  assign srcIndex$D_IN = srcIndex + 6'd2 ;
  assign srcIndex$EN = WILL_FIRE_RL_wsi_source ;

  // register srcMesgCount
  assign srcMesgCount$D_IN = srcMesgCount + 16'd1 ;
  assign srcMesgCount$EN = WILL_FIRE_RL_wsi_source && srcUnrollCnt == 16'd1 ;

  // register srcUnrollCnt
  assign srcUnrollCnt$D_IN =
	     (wciSeqFsm_state_mkFSMstate == 5'd21) ?
	       16'd2048 :
	       MUX_srcUnrollCnt$write_1__VAL_2 ;
  assign srcUnrollCnt$EN =
	     WILL_FIRE_RL_wsi_source || wciSeqFsm_state_mkFSMstate == 5'd21 ;

  // register testOperating
  assign testOperating$D_IN = 1'd1 ;
  assign testOperating$EN = wciSeqFsm_state_mkFSMstate == 5'd18 ;

  // register wciSeqFsm_start_reg
  assign wciSeqFsm_start_reg$D_IN = wciSeqFsm_start_reg_1$whas ;
  assign wciSeqFsm_start_reg$EN = 1'd1 ;

  // register wciSeqFsm_state_mkFSMstate
  always@(MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l115c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l116c10 or
	  wciSeqFsm_state_mkFSMstate or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l120c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l124c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l128c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l132c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l136c5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wciSeqFsm_state_mkFSMstate$write_1__SEL_1:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_wciSeqFsm_actionof_l115c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_wciSeqFsm_actionof_l116c10:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd3;
      wciSeqFsm_state_mkFSMstate == 5'd3:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_wciSeqFsm_actionof_l119c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_wciSeqFsm_actionof_l120c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd6;
      wciSeqFsm_state_mkFSMstate == 5'd6:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_wciSeqFsm_actionof_l123c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_wciSeqFsm_actionof_l124c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd9;
      wciSeqFsm_state_mkFSMstate == 5'd9:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_wciSeqFsm_actionof_l127c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_wciSeqFsm_actionof_l128c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd12;
      wciSeqFsm_state_mkFSMstate == 5'd12:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_wciSeqFsm_actionof_l131c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd14;
      WILL_FIRE_RL_wciSeqFsm_actionof_l132c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd15;
      wciSeqFsm_state_mkFSMstate == 5'd15:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_wciSeqFsm_actionof_l135c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd17;
      WILL_FIRE_RL_wciSeqFsm_actionof_l136c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd18;
      wciSeqFsm_state_mkFSMstate == 5'd18:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd19;
      wciSeqFsm_state_mkFSMstate == 5'd19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd20;
      wciSeqFsm_state_mkFSMstate == 5'd20:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd21;
      wciSeqFsm_state_mkFSMstate == 5'd21:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd22;
      wciSeqFsm_state_mkFSMstate == 5'd22:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd23;
      default: wciSeqFsm_state_mkFSMstate$D_IN =
		   5'b01010 /* unspecified value */ ;
    endcase
  end
  assign wciSeqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l114c3_22 ||
	     wciSeqFsm_state_mkFSMstate == 5'd23 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l115c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l116c10 ||
	     wciSeqFsm_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l120c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd6 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l124c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd9 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l128c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd12 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l132c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd15 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l136c5 ||
	     wciSeqFsm_state_mkFSMstate == 5'd18 ||
	     wciSeqFsm_state_mkFSMstate == 5'd19 ||
	     wciSeqFsm_state_mkFSMstate == 5'd20 ||
	     wciSeqFsm_state_mkFSMstate == 5'd21 ||
	     wciSeqFsm_state_mkFSMstate == 5'd22 ;

  // register wciSeqFsm_state_standby
  assign wciSeqFsm_state_standby$D_IN = !wciSeqFsm_state_run_pw$whas ;
  assign wciSeqFsm_state_standby$EN =
	     wciSeqFsm_state_run_pw$whas || wciSeqFsm_start_wire$whas ;

  // register wciSeqOnce_onceReady
  assign wciSeqOnce_onceReady$D_IN = 1'd0 ;
  assign wciSeqOnce_onceReady$EN = wciSeqFsm_start_reg_1$whas ;

  // register wci_busy
  assign wci_busy$D_IN = MUX_wci_busy$write_1__SEL_1 ;
  assign wci_busy$EN =
	     _dand1wci_busy$EN_write ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ;

  // register wci_lastConfigAddr
  assign wci_lastConfigAddr$D_IN = 33'h100000004 ;
  assign wci_lastConfigAddr$EN =
	     _dor1wci_lastConfigAddr$EN_write && wci_wReset_n ;

  // register wci_lastConfigBE
  assign wci_lastConfigBE$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 5'd26 : 5'd31 ;
  assign wci_lastConfigBE$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 && wci_wReset_n ;

  // register wci_lastControlOp
  assign wci_lastControlOp$D_IN =
	     MUX_wci_lastControlOp$write_1__SEL_1 ? 4'd8 : 4'd9 ;
  assign wci_lastControlOp$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l123c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 && wci_wReset_n ;

  // register wci_lastOpWrite
  assign wci_lastOpWrite$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 2'd2 : 2'd3 ;
  assign wci_lastOpWrite$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 && wci_wReset_n ;

  // register wci_mFlagReg
  assign wci_mFlagReg$D_IN = 2'h0 ;
  assign wci_mFlagReg$EN = 1'b0 ;

  // register wci_pageWindow
  assign wci_pageWindow$D_IN = 12'h0 ;
  assign wci_pageWindow$EN = 1'b0 ;

  // register wci_reqERR
  always@(wci_reqPend or wci_reqERR)
  begin
    case (wci_reqPend)
      2'd1: wci_reqERR$D_IN = { 1'd1, wci_reqERR[1:0] };
      2'd2: wci_reqERR$D_IN = { wci_reqERR[2], 1'd1, wci_reqERR[0] };
      default: wci_reqERR$D_IN = { wci_reqERR[2:1], 1'd1 };
    endcase
  end
  assign wci_reqERR$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     wci_wciResponse$wget[33:32] == 2'd3 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqFAIL
  always@(wci_reqPend or wci_reqFAIL)
  begin
    case (wci_reqPend)
      2'd1: wci_reqFAIL$D_IN = { 1'd1, wci_reqFAIL[1:0] };
      2'd2: wci_reqFAIL$D_IN = { wci_reqFAIL[2], 1'd1, wci_reqFAIL[0] };
      default: wci_reqFAIL$D_IN = { wci_reqFAIL[2:1], 1'd1 };
    endcase
  end
  assign wci_reqFAIL$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     wci_wciResponse$wget[33:32] == 2'd2 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqF_c_r
  assign wci_reqF_c_r$D_IN =
	     WILL_FIRE_RL_wci_reqF_incCtr ?
	       MUX_wci_reqF_c_r$write_1__VAL_1 :
	       MUX_wci_reqF_c_r$write_1__VAL_2 ;
  assign wci_reqF_c_r$EN =
	     WILL_FIRE_RL_wci_reqF_incCtr || WILL_FIRE_RL_wci_reqF_decCtr ;

  // register wci_reqF_q_0
  always@(MUX_wci_reqF_q_0$write_1__SEL_1 or
	  MUX_wci_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_reqF_both or
	  MUX_wci_reqF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wci_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_reqF_q_0$write_1__SEL_1:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_reqF_both:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_reqF_decCtr:
	  wci_reqF_q_0$D_IN = 72'h0000000000AAAAAAAA;
      default: wci_reqF_q_0$D_IN =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_reqF_q_0$EN =
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ||
	     WILL_FIRE_RL_wci_reqF_both ||
	     WILL_FIRE_RL_wci_reqF_decCtr ;

  // register wci_reqPend
  always@(MUX_wci_lastConfigBE$write_1__SEL_2 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_reqPend$write_1__SEL_3 or MUX_wci_reqPend$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastConfigBE$write_1__SEL_2: wci_reqPend$D_IN = 2'd1;
      MUX_wci_lastConfigBE$write_1__SEL_1: wci_reqPend$D_IN = 2'd2;
      MUX_wci_reqPend$write_1__SEL_3: wci_reqPend$D_IN = 2'd3;
      MUX_wci_reqPend$write_1__SEL_4: wci_reqPend$D_IN = 2'd0;
      default: wci_reqPend$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign wci_reqPend$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 && wci_wReset_n ||
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l123c8) &&
	     wci_wReset_n ||
	     WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] != 2'd0 ;

  // register wci_reqTO
  always@(wci_reqPend or wci_reqTO)
  begin
    case (wci_reqPend)
      2'd1: wci_reqTO$D_IN = { 1'd1, wci_reqTO[1:0] };
      2'd2: wci_reqTO$D_IN = { wci_reqTO[2], 1'd1, wci_reqTO[0] };
      default: wci_reqTO$D_IN = { wci_reqTO[2:1], 1'd1 };
    endcase
  end
  assign wci_reqTO$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     wci_wciResponse$wget[33:32] == 2'd0 &&
	     !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_respTimr
  assign wci_respTimr$D_IN =
	     wci_reqF_c_r ? 32'd0 : MUX_wci_respTimr$write_1__VAL_2 ;
  assign wci_respTimr$EN = WILL_FIRE_RL_wci_wrkBusy || wci_reqF_c_r ;

  // register wci_respTimrAct
  assign wci_respTimrAct$D_IN = wci_reqF_c_r ;
  assign wci_respTimrAct$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ||
	     wci_reqF_c_r ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = psdWorker$wciS0_SThreadBusy ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wci_sfCap
  assign wci_sfCap$D_IN = wci_sfCapSet ;
  assign wci_sfCap$EN = wci_sfCapSet || wci_sfCapClear ;

  // register wci_sfCapClear
  assign wci_sfCapClear$D_IN = 1'b0 ;
  assign wci_sfCapClear$EN = 1'd1 ;

  // register wci_sfCapSet
  assign wci_sfCapSet$D_IN = psdWorker$wciS0_SFlag[0] ;
  assign wci_sfCapSet$EN = 1'd1 ;

  // register wci_slvPresent
  assign wci_slvPresent$D_IN = psdWorker$wciS0_SFlag[1] ;
  assign wci_slvPresent$EN = 1'd1 ;

  // register wci_wReset_n
  assign wci_wReset_n$D_IN = 1'd1 ;
  assign wci_wReset_n$EN = WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 ;

  // register wci_wStatus
  assign wci_wStatus$D_IN =
	     { 4'b0,
	       !wci_lastOpWrite[1] || wci_lastOpWrite[0],
	       IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 } ;
  assign wci_wStatus$EN = 1'd1 ;

  // register wci_wTimeout
  assign wci_wTimeout$D_IN = 5'd4 ;
  assign wci_wTimeout$EN = WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = testOperating ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = psdWorker$wsiS0_SReset_n ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_0
  always@(MUX_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wsiM_reqFifo_q_0$write_1__SEL_1:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(MUX_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wsiM_reqFifo_q_1$write_1__SEL_1:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = psdWorker$wsiS0_SThreadBusy ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset$VAL,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__56_AND_wsiS_burstKind_71_ETC___d278 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = testOperating ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = psdWorker$wsiM0_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_wsi_checker ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_wsi_checker ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset$VAL,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // submodule psdWorker
  assign psdWorker$wciS0_MAddr =
	     wci_sThreadBusy_d ? 32'd0 : wci_reqF_q_0[63:32] ;
  assign psdWorker$wciS0_MAddrSpace = !wci_sThreadBusy_d && wci_reqF_q_0[68] ;
  assign psdWorker$wciS0_MByteEn =
	     wci_sThreadBusy_d ? 4'd0 : wci_reqF_q_0[67:64] ;
  assign psdWorker$wciS0_MCmd =
	     wci_sThreadBusy_d ? 3'd0 : wci_reqF_q_0[71:69] ;
  assign psdWorker$wciS0_MData = wci_reqF_q_0[31:0] ;
  assign psdWorker$wciS0_MFlag = wci_mFlagReg ;
  assign psdWorker$wsiS0_MBurstLength =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;
  assign psdWorker$wsiS0_MByteEn = wsiM_reqFifo_q_0[11:8] ;
  assign psdWorker$wsiS0_MCmd =
	     wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;
  assign psdWorker$wsiS0_MData = wsiM_reqFifo_q_0[43:12] ;
  assign psdWorker$wsiS0_MReqInfo =
	     wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;
  assign psdWorker$wsiS0_MReqLast =
	     !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;
  assign psdWorker$wsiS0_MBurstPrecise =
	     !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;
  assign psdWorker$wsiS0_MReset_n = !wsiM_isReset$VAL && wsiM_operateD ;
  assign psdWorker$wsiM0_SThreadBusy =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;
  assign psdWorker$wsiM0_SReset_n = !wsiS_isReset$VAL && wsiS_operateD ;

  // submodule wci_mReset
  assign wci_mReset$ASSERT_IN = !wci_wReset_n ;

  // submodule wci_respF
  always@(MUX_wci_respF$enq_1__SEL_1 or
	  MUX_wci_busy$write_1__SEL_2 or
	  MUX_wci_respF$enq_1__VAL_2 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l119c8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_respF$enq_1__SEL_1: wci_respF$D_IN = 34'h1C0DE4204;
      MUX_wci_busy$write_1__SEL_2:
	  wci_respF$D_IN = MUX_wci_respF$enq_1__VAL_2;
      WILL_FIRE_RL_wciSeqFsm_actionof_l119c8: wci_respF$D_IN = 34'h100000000;
      default: wci_respF$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF$ENQ =
	     _dand1wci_respF$EN_enq ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l119c8 ;
  assign wci_respF$DEQ =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l136c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l132c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l128c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l124c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l120c5 ;
  assign wci_respF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$DEQ = WILL_FIRE_RL_wsi_checker ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 =
	     { wci_lastControlOp[3] ? wci_lastControlOp[2:0] : 3'b111,
	       wci_lastConfigBE[4] ? wci_lastConfigBE[3:0] : 4'hF,
	       wci_lastOpWrite[1],
	       wci_lastControlOp[3],
	       wci_lastConfigBE[4],
	       wci_lastConfigAddr[32],
	       6'b0,
	       wci_sfCap,
	       wci_reqTO,
	       wci_reqFAIL,
	       wci_reqERR } ;
  assign NOT_wciSeqFsm_abort_whas__82_39_OR_NOT_wciSeqF_ETC___d444 =
	     wciSeqFsm_start_wire$whas || wciSeqFsm_state_standby ;
  assign NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 =
	     !wci_busy && (wci_wReset_n ? !wci_reqF_c_r : wci_respF$FULL_N) ;
  assign _dand1wci_busy$EN_write =
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l123c8) &&
	     wci_wReset_n ;
  assign _dand1wci_respF$EN_enq =
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l135c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l123c8) &&
	     !wci_wReset_n ;
  assign _dor1wci_lastConfigAddr$EN_write =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l131c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l127c8 ;
  assign toCount__h2445 = 32'd1 << wci_wTimeout ;
  assign wciAddr__h45703 = { wci_pageWindow, 20'h00004 } ;
  assign wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 =
	     wci_respTimr < toCount__h2445 ;
  assign wsiBurstLength__h52618 = { 4'd0, wsiS_reqFifo$D_OUT[55:44] } ;
  assign wsiS_reqFifo_notFull__56_AND_wsiS_burstKind_71_ETC___d278 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;
  assign x__h2604 = wci_respTimr + 32'd1 ;
  assign x_data__h49213 =
	     { CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1,
	       CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 } ;
  always@(srcIndex)
  begin
    case (srcIndex)
      6'd0, 6'd62:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h7E1C;
      6'd1, 6'd61:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h7C49;
      6'd2, 6'd60:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h7943;
      6'd3, 6'd59:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h7513;
      6'd4, 6'd58:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h6FC2;
      6'd5, 6'd57:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h695D;
      6'd6, 6'd56:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h61F5;
      6'd7, 6'd55:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h599B;
      6'd8, 6'd54:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h5064;
      6'd9, 6'd53:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h4667;
      6'd10, 6'd52:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h3BBC;
      6'd11, 6'd51:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h307E;
      6'd12, 6'd50:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h24C9;
      6'd13, 6'd49:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h18B9;
      6'd14, 6'd48:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h0C6C;
      6'd15, 6'd47:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h0;
      6'd16, 6'd46:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hF395;
      6'd17, 6'd45:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hE748;
      6'd18, 6'd44:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hDB38;
      6'd19, 6'd43:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hCF83;
      6'd20, 6'd42:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hC445;
      6'd21, 6'd41:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hB99A;
      6'd22, 6'd40:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hAF9D;
      6'd23, 6'd39:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'hA666;
      6'd24, 6'd38:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h9E0C;
      6'd25, 6'd37:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h96A4;
      6'd26, 6'd36:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h903F;
      6'd27, 6'd35:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h8AEE;
      6'd28, 6'd34:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h86BE;
      6'd29, 6'd33:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h83B8;
      6'd30, 6'd32:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h81E5;
      6'd31:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h8149;
      6'd63:
	  CASE_srcIndex_0x7E1C_0_0x7E1C_1_0x7C49_2_0x794_ETC__q1 = 16'h7EB8;
    endcase
  end
  always@(srcIndex)
  begin
    case (srcIndex)
      6'd0: CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h7EB8;
      6'd1, 6'd63:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h7E1C;
      6'd2, 6'd62:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h7C49;
      6'd3, 6'd61:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h7943;
      6'd4, 6'd60:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h7513;
      6'd5, 6'd59:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h6FC2;
      6'd6, 6'd58:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h695D;
      6'd7, 6'd57:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h61F5;
      6'd8, 6'd56:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h599B;
      6'd9, 6'd55:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h5064;
      6'd10, 6'd54:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h4667;
      6'd11, 6'd53:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h3BBC;
      6'd12, 6'd52:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h307E;
      6'd13, 6'd51:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h24C9;
      6'd14, 6'd50:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h18B9;
      6'd15, 6'd49:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h0C6C;
      6'd16, 6'd48:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h0;
      6'd17, 6'd47:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hF395;
      6'd18, 6'd46:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hE748;
      6'd19, 6'd45:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hDB38;
      6'd20, 6'd44:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hCF83;
      6'd21, 6'd43:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hC445;
      6'd22, 6'd42:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hB99A;
      6'd23, 6'd41:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hAF9D;
      6'd24, 6'd40:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'hA666;
      6'd25, 6'd39:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h9E0C;
      6'd26, 6'd38:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h96A4;
      6'd27, 6'd37:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h903F;
      6'd28, 6'd36:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h8AEE;
      6'd29, 6'd35:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h86BE;
      6'd30, 6'd34:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h83B8;
      6'd31, 6'd33:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h81E5;
      6'd32:
	  CASE_srcIndex_0x7E1C_0_0x7EB8_1_0x7E1C_2_0x7C4_ETC__q2 = 16'h8149;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        dstDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dstMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	enWsiChecker <= `BSV_ASSIGNMENT_DELAY 1'd0;
	enWsiSource <= `BSV_ASSIGNMENT_DELAY 1'd0;
	simCycle <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	srcIndex <= `BSV_ASSIGNMENT_DELAY 6'd0;
	srcMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	testOperating <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd1;
	wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY 5'd10;
	wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY 4'd2;
	wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY 2'b10;
	wci_pageWindow <= `BSV_ASSIGNMENT_DELAY 12'd0;
	wci_reqERR <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 72'h0000000000AAAAAAAA;
	wci_reqPend <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_reqTO <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_respTimr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_sfCap <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_slvPresent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wTimeout <= `BSV_ASSIGNMENT_DELAY 5'h04;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (dstDataOut$EN)
	  dstDataOut <= `BSV_ASSIGNMENT_DELAY dstDataOut$D_IN;
	if (dstMesgCount$EN)
	  dstMesgCount <= `BSV_ASSIGNMENT_DELAY dstMesgCount$D_IN;
	if (dstUnrollCnt$EN)
	  dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY dstUnrollCnt$D_IN;
	if (enWsiChecker$EN)
	  enWsiChecker <= `BSV_ASSIGNMENT_DELAY enWsiChecker$D_IN;
	if (enWsiSource$EN)
	  enWsiSource <= `BSV_ASSIGNMENT_DELAY enWsiSource$D_IN;
	if (simCycle$EN) simCycle <= `BSV_ASSIGNMENT_DELAY simCycle$D_IN;
	if (srcDataOut$EN)
	  srcDataOut <= `BSV_ASSIGNMENT_DELAY srcDataOut$D_IN;
	if (srcIndex$EN) srcIndex <= `BSV_ASSIGNMENT_DELAY srcIndex$D_IN;
	if (srcMesgCount$EN)
	  srcMesgCount <= `BSV_ASSIGNMENT_DELAY srcMesgCount$D_IN;
	if (srcUnrollCnt$EN)
	  srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY srcUnrollCnt$D_IN;
	if (testOperating$EN)
	  testOperating <= `BSV_ASSIGNMENT_DELAY testOperating$D_IN;
	if (wciSeqFsm_start_reg$EN)
	  wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_start_reg$D_IN;
	if (wciSeqFsm_state_mkFSMstate$EN)
	  wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_mkFSMstate$D_IN;
	if (wciSeqFsm_state_standby$EN)
	  wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_standby$D_IN;
	if (wciSeqOnce_onceReady$EN)
	  wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY
	      wciSeqOnce_onceReady$D_IN;
	if (wci_busy$EN) wci_busy <= `BSV_ASSIGNMENT_DELAY wci_busy$D_IN;
	if (wci_lastConfigAddr$EN)
	  wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY wci_lastConfigAddr$D_IN;
	if (wci_lastConfigBE$EN)
	  wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY wci_lastConfigBE$D_IN;
	if (wci_lastControlOp$EN)
	  wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY wci_lastControlOp$D_IN;
	if (wci_lastOpWrite$EN)
	  wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY wci_lastOpWrite$D_IN;
	if (wci_mFlagReg$EN)
	  wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY wci_mFlagReg$D_IN;
	if (wci_pageWindow$EN)
	  wci_pageWindow <= `BSV_ASSIGNMENT_DELAY wci_pageWindow$D_IN;
	if (wci_reqERR$EN)
	  wci_reqERR <= `BSV_ASSIGNMENT_DELAY wci_reqERR$D_IN;
	if (wci_reqFAIL$EN)
	  wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY wci_reqFAIL$D_IN;
	if (wci_reqF_c_r$EN)
	  wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY wci_reqF_c_r$D_IN;
	if (wci_reqF_q_0$EN)
	  wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_reqF_q_0$D_IN;
	if (wci_reqPend$EN)
	  wci_reqPend <= `BSV_ASSIGNMENT_DELAY wci_reqPend$D_IN;
	if (wci_reqTO$EN) wci_reqTO <= `BSV_ASSIGNMENT_DELAY wci_reqTO$D_IN;
	if (wci_respTimr$EN)
	  wci_respTimr <= `BSV_ASSIGNMENT_DELAY wci_respTimr$D_IN;
	if (wci_respTimrAct$EN)
	  wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY wci_respTimrAct$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wci_sfCap$EN) wci_sfCap <= `BSV_ASSIGNMENT_DELAY wci_sfCap$D_IN;
	if (wci_sfCapClear$EN)
	  wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY wci_sfCapClear$D_IN;
	if (wci_sfCapSet$EN)
	  wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY wci_sfCapSet$D_IN;
	if (wci_slvPresent$EN)
	  wci_slvPresent <= `BSV_ASSIGNMENT_DELAY wci_slvPresent$D_IN;
	if (wci_wReset_n$EN)
	  wci_wReset_n <= `BSV_ASSIGNMENT_DELAY wci_wReset_n$D_IN;
	if (wci_wTimeout$EN)
	  wci_wTimeout <= `BSV_ASSIGNMENT_DELAY wci_wTimeout$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (wci_wStatus$EN) wci_wStatus <= `BSV_ASSIGNMENT_DELAY wci_wStatus$D_IN;
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dstDataOut = 32'hAAAAAAAA;
    dstMesgCount = 16'hAAAA;
    dstUnrollCnt = 16'hAAAA;
    enWsiChecker = 1'h0;
    enWsiSource = 1'h0;
    simCycle = 16'hAAAA;
    srcDataOut = 32'hAAAAAAAA;
    srcIndex = 6'h2A;
    srcMesgCount = 16'hAAAA;
    srcUnrollCnt = 16'hAAAA;
    testOperating = 1'h0;
    wciSeqFsm_start_reg = 1'h0;
    wciSeqFsm_state_mkFSMstate = 5'h0A;
    wciSeqFsm_state_standby = 1'h0;
    wciSeqOnce_onceReady = 1'h0;
    wci_busy = 1'h0;
    wci_lastConfigAddr = 33'h0AAAAAAAA;
    wci_lastConfigBE = 5'h0A;
    wci_lastControlOp = 4'hA;
    wci_lastOpWrite = 2'h2;
    wci_mFlagReg = 2'h2;
    wci_pageWindow = 12'hAAA;
    wci_reqERR = 3'h2;
    wci_reqFAIL = 3'h2;
    wci_reqF_c_r = 1'h0;
    wci_reqF_q_0 = 72'hAAAAAAAAAAAAAAAAAA;
    wci_reqPend = 2'h2;
    wci_reqTO = 3'h2;
    wci_respTimr = 32'hAAAAAAAA;
    wci_respTimrAct = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wci_sfCap = 1'h0;
    wci_sfCapClear = 1'h0;
    wci_sfCapSet = 1'h0;
    wci_slvPresent = 1'h0;
    wci_wReset_n = 1'h0;
    wci_wStatus = 32'hAAAAAAAA;
    wci_wTimeout = 5'h0A;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_wsi_source && srcUnrollCnt == 16'd1)
	begin
	  v__h52543 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wsi_source && srcUnrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Producer Egress: srcMesgCount:%0x opcode:%0x",
		 v__h52543,
		 srcMesgCount,
		 8'd0);
    if (RST_N)
      if (simCycle == 16'd20000)
	begin
	  v__h53090 = $time;
	  #0;
	end
    if (RST_N)
      if (simCycle == 16'd20000)
	$display("[%0d]: %m: mkTB10 termination", v__h53090);
    if (RST_N) if (simCycle == 16'd20000) $finish(32'd1);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h2737 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE TIMEOUT", v__h2737);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h2827 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  TIMEOUT", v__h2827);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h2916 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d840 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   TIMEOUT", v__h2916);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3140 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-FAIL", v__h3140);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3230 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-FAIL", v__h3230);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3319 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-FAIL", v__h3319);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3548 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-ERR", v__h3548);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3638 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-ERR", v__h3638);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3727 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-ERR", v__h3727);
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker)
	begin
	  v__h52786 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker)
	$display("[%0d]: %m: PSD bin:%0d %04x, bin:%0d %04x",
		 v__h52786,
		 dstDataOut,
		 wsiS_reqFifo$D_OUT[27:12],
		 dstDataOut + 32'd1,
		 wsiS_reqFifo$D_OUT[43:28]);
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker && dstUnrollCnt == 16'd1)
	begin
	  v__h52983 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker && dstUnrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Consumer Ingress: dstMesgCount:%0x opcode:%0x",
		 v__h52983,
		 dstMesgCount,
		 wsiS_reqFifo$D_OUT[7:0]);
    if (RST_N)
      if (wci_slvPresent && wciSeqFsm_state_mkFSMstate == 5'd2) $write("");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd3)
	begin
	  v__h43832 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd3)
	$display("[%0d]: %m: Taking DUT out of Reset...", v__h43832);
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd3) $write("");
    if (RST_N)
      if (!wci_busy && wci_respF$FULL_N && wciSeqFsm_state_mkFSMstate == 5'd4)
	$write("");
    if (RST_N)
      if (wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd5) $write("");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd6)
	begin
	  v__h44679 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd6)
	$display("[%0d]: %m: CONTROL-OP: -INITIALIZE- DUT...", v__h44679);
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd6) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l123c8)
	begin
	  v__h44908 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l123c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h44908);
    if (RST_N)
      if (NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	  wciSeqFsm_state_mkFSMstate == 5'd7)
	$write("");
    if (RST_N)
      if (wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd8) $write("");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd9)
	begin
	  v__h45511 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd9)
	$display("[%0d]: %m: Write Dataplane Config Properties...",
		 v__h45511);
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd9) $write("");
    if (RST_N)
      if (NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	  wciSeqFsm_state_mkFSMstate == 5'd10)
	$write("");
    if (RST_N)
      if (wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd11)
	$write("");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd12)
	begin
	  v__h46299 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd12)
	$display("[%0d]: %m: Read Dataplane Config Properties...", v__h46299);
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd12) $write("");
    if (RST_N)
      if (NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	  wciSeqFsm_state_mkFSMstate == 5'd13)
	$write("");
    if (RST_N)
      if (wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd14)
	$write("");
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd15)
	begin
	  v__h47123 = $time;
	  #0;
	end
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd15)
	$display("[%0d]: %m: CONTROL-OP: -START- DUT...", v__h47123);
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd15) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l135c8)
	begin
	  v__h47379 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l135c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h47379);
    if (RST_N)
      if (NOT_wci_busy_5_55_AND_IF_wci_wReset_n_5_THEN_N_ETC___d468 &&
	  wciSeqFsm_state_mkFSMstate == 5'd16)
	$write("");
    if (RST_N)
      if (wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd17)
	$write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd18) $write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd19) $write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd20) $write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd21) $write("");
    if (RST_N) if (wciSeqFsm_state_mkFSMstate == 5'd22) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l114c3_22 ||
	  wciSeqFsm_state_mkFSMstate == 5'd23)
	$write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l115c5)
	begin
	  v__h43509 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l115c5)
	$display("[%0d]: %m: Checking for DUT presence...", v__h43509);
    if (RST_N)
      if (wciSeqFsm_state_mkFSMstate == 5'd1 &&
	  NOT_wciSeqFsm_abort_whas__82_39_OR_NOT_wciSeqF_ETC___d444)
	$write("");
  end
  // synopsys translate_on
endmodule  // mkTB10

