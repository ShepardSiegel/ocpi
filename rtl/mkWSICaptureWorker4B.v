//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Thu Aug 23 13:30:49 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wsiS0_SThreadBusy              O     1
// wsiS0_SReset_n                 O     1
// wtiS0_SThreadBusy              O     1 reg
// wtiS0_SReset_n                 O     1
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wsiS0_MCmd                     I     3
// wsiS0_MBurstLength             I    12
// wsiS0_MData                    I    32
// wsiS0_MByteEn                  I     4
// wsiS0_MReqInfo                 I     8
// wtiS0_MCmd                     I     3 reg
// wtiS0_MData                    I    64 reg
// wsiS0_MReqLast                 I     1
// wsiS0_MBurstPrecise            I     1
// wsiS0_MReset_n                 I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWSICaptureWorker4B(wciS0_Clk,
			    wciS0_MReset_n,

			    wciS0_MCmd,

			    wciS0_MAddrSpace,

			    wciS0_MByteEn,

			    wciS0_MAddr,

			    wciS0_MData,

			    wciS0_SResp,

			    wciS0_SData,

			    wciS0_SThreadBusy,

			    wciS0_SFlag,

			    wciS0_MFlag,

			    wsiS0_MCmd,

			    wsiS0_MReqLast,

			    wsiS0_MBurstPrecise,

			    wsiS0_MBurstLength,

			    wsiS0_MData,

			    wsiS0_MByteEn,

			    wsiS0_MReqInfo,

			    wsiS0_SThreadBusy,

			    wsiS0_SReset_n,

			    wsiS0_MReset_n,

			    wtiS0_MCmd,

			    wtiS0_MData,

			    wtiS0_SThreadBusy,

			    wtiS0_SReset_n);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // action method wsiS0_mCmd
  input  [2 : 0] wsiS0_MCmd;

  // action method wsiS0_mReqLast
  input  wsiS0_MReqLast;

  // action method wsiS0_mBurstPrecise
  input  wsiS0_MBurstPrecise;

  // action method wsiS0_mBurstLength
  input  [11 : 0] wsiS0_MBurstLength;

  // action method wsiS0_mData
  input  [31 : 0] wsiS0_MData;

  // action method wsiS0_mByteEn
  input  [3 : 0] wsiS0_MByteEn;

  // action method wsiS0_mReqInfo
  input  [7 : 0] wsiS0_MReqInfo;

  // action method wsiS0_mDataInfo

  // value method wsiS0_sThreadBusy
  output wsiS0_SThreadBusy;

  // value method wsiS0_sReset_n
  output wsiS0_SReset_n;

  // action method wsiS0_mReset_n
  input  wsiS0_MReset_n;

  // action method wtiS0_mCmd
  input  [2 : 0] wtiS0_MCmd;

  // action method wtiS0_mData
  input  [63 : 0] wtiS0_MData;

  // value method wtiS0_sThreadBusy
  output wtiS0_SThreadBusy;

  // value method wtiS0_sReset_n
  output wtiS0_SReset_n;

  // signals for module outputs
  wire [31 : 0] wciS0_SData;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire wciS0_SThreadBusy,
       wsiS0_SReset_n,
       wsiS0_SThreadBusy,
       wtiS0_SReset_n,
       wtiS0_SThreadBusy;

  // inlined wires
  wire [95 : 0] wsiS_extStatusW$wget;
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire [66 : 0] wtiS_wtiReq$wget;
  wire [63 : 0] nowW$wget, wti_Es_mData_w$wget;
  wire [60 : 0] wsiS_wsiReq$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget;
  wire [31 : 0] dataBram_serverAdapterA_outData_enqData$wget,
		dataBram_serverAdapterA_outData_outData$wget,
		dataBram_serverAdapterB_outData_enqData$wget,
		dataBram_serverAdapterB_outData_outData$wget,
		metaBram_serverAdapterA_1_outData_enqData$wget,
		metaBram_serverAdapterA_1_outData_outData$wget,
		metaBram_serverAdapterA_2_outData_enqData$wget,
		metaBram_serverAdapterA_2_outData_outData$wget,
		metaBram_serverAdapterA_3_outData_enqData$wget,
		metaBram_serverAdapterA_3_outData_outData$wget,
		metaBram_serverAdapterA_outData_enqData$wget,
		metaBram_serverAdapterA_outData_outData$wget,
		metaBram_serverAdapterB_1_outData_enqData$wget,
		metaBram_serverAdapterB_1_outData_outData$wget,
		metaBram_serverAdapterB_2_outData_enqData$wget,
		metaBram_serverAdapterB_2_outData_outData$wget,
		metaBram_serverAdapterB_3_outData_enqData$wget,
		metaBram_serverAdapterB_3_outData_outData$wget,
		metaBram_serverAdapterB_outData_enqData$wget,
		metaBram_serverAdapterB_outData_outData$wget,
		statusReg_w$wget,
		wci_wci_Es_mAddr_w$wget,
		wci_wci_Es_mData_w$wget,
		wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wci_wci_Es_mByteEn_w$wget, wsi_Es_mByteEn_w$wget;
  wire [2 : 0] dataBram_serverAdapterA_cnt_1$wget,
	       dataBram_serverAdapterA_cnt_2$wget,
	       dataBram_serverAdapterA_cnt_3$wget,
	       dataBram_serverAdapterB_cnt_1$wget,
	       dataBram_serverAdapterB_cnt_2$wget,
	       dataBram_serverAdapterB_cnt_3$wget,
	       metaBram_serverAdapterA_1_cnt_1$wget,
	       metaBram_serverAdapterA_1_cnt_2$wget,
	       metaBram_serverAdapterA_1_cnt_3$wget,
	       metaBram_serverAdapterA_2_cnt_1$wget,
	       metaBram_serverAdapterA_2_cnt_2$wget,
	       metaBram_serverAdapterA_2_cnt_3$wget,
	       metaBram_serverAdapterA_3_cnt_1$wget,
	       metaBram_serverAdapterA_3_cnt_2$wget,
	       metaBram_serverAdapterA_3_cnt_3$wget,
	       metaBram_serverAdapterA_cnt_1$wget,
	       metaBram_serverAdapterA_cnt_2$wget,
	       metaBram_serverAdapterA_cnt_3$wget,
	       metaBram_serverAdapterB_1_cnt_1$wget,
	       metaBram_serverAdapterB_1_cnt_2$wget,
	       metaBram_serverAdapterB_1_cnt_3$wget,
	       metaBram_serverAdapterB_2_cnt_1$wget,
	       metaBram_serverAdapterB_2_cnt_2$wget,
	       metaBram_serverAdapterB_2_cnt_3$wget,
	       metaBram_serverAdapterB_3_cnt_1$wget,
	       metaBram_serverAdapterB_3_cnt_2$wget,
	       metaBram_serverAdapterB_3_cnt_3$wget,
	       metaBram_serverAdapterB_cnt_1$wget,
	       metaBram_serverAdapterB_cnt_2$wget,
	       metaBram_serverAdapterB_cnt_3$wget,
	       wci_wci_Es_mCmd_w$wget,
	       wci_wslv_wEdge$wget,
	       wsi_Es_mCmd_w$wget,
	       wti_Es_mCmd_w$wget;
  wire [1 : 0] dataBram_serverAdapterA_s1_1$wget,
	       dataBram_serverAdapterA_writeWithResp$wget,
	       dataBram_serverAdapterB_s1_1$wget,
	       dataBram_serverAdapterB_writeWithResp$wget,
	       metaBram_serverAdapterA_1_s1_1$wget,
	       metaBram_serverAdapterA_1_writeWithResp$wget,
	       metaBram_serverAdapterA_2_s1_1$wget,
	       metaBram_serverAdapterA_2_writeWithResp$wget,
	       metaBram_serverAdapterA_3_s1_1$wget,
	       metaBram_serverAdapterA_3_writeWithResp$wget,
	       metaBram_serverAdapterA_s1_1$wget,
	       metaBram_serverAdapterA_writeWithResp$wget,
	       metaBram_serverAdapterB_1_s1_1$wget,
	       metaBram_serverAdapterB_1_writeWithResp$wget,
	       metaBram_serverAdapterB_2_s1_1$wget,
	       metaBram_serverAdapterB_2_writeWithResp$wget,
	       metaBram_serverAdapterB_3_s1_1$wget,
	       metaBram_serverAdapterB_3_writeWithResp$wget,
	       metaBram_serverAdapterB_s1_1$wget,
	       metaBram_serverAdapterB_writeWithResp$wget;
  wire dataBram_serverAdapterA_cnt_1$whas,
       dataBram_serverAdapterA_cnt_2$whas,
       dataBram_serverAdapterA_cnt_3$whas,
       dataBram_serverAdapterA_outData_deqCalled$whas,
       dataBram_serverAdapterA_outData_enqData$whas,
       dataBram_serverAdapterA_outData_outData$whas,
       dataBram_serverAdapterA_s1_1$whas,
       dataBram_serverAdapterA_writeWithResp$whas,
       dataBram_serverAdapterB_cnt_1$whas,
       dataBram_serverAdapterB_cnt_2$whas,
       dataBram_serverAdapterB_cnt_3$whas,
       dataBram_serverAdapterB_outData_deqCalled$whas,
       dataBram_serverAdapterB_outData_enqData$whas,
       dataBram_serverAdapterB_outData_outData$whas,
       dataBram_serverAdapterB_s1_1$whas,
       dataBram_serverAdapterB_writeWithResp$whas,
       metaBram_serverAdapterA_1_cnt_1$whas,
       metaBram_serverAdapterA_1_cnt_2$whas,
       metaBram_serverAdapterA_1_cnt_3$whas,
       metaBram_serverAdapterA_1_outData_deqCalled$whas,
       metaBram_serverAdapterA_1_outData_enqData$whas,
       metaBram_serverAdapterA_1_outData_outData$whas,
       metaBram_serverAdapterA_1_s1_1$whas,
       metaBram_serverAdapterA_1_writeWithResp$whas,
       metaBram_serverAdapterA_2_cnt_1$whas,
       metaBram_serverAdapterA_2_cnt_2$whas,
       metaBram_serverAdapterA_2_cnt_3$whas,
       metaBram_serverAdapterA_2_outData_deqCalled$whas,
       metaBram_serverAdapterA_2_outData_enqData$whas,
       metaBram_serverAdapterA_2_outData_outData$whas,
       metaBram_serverAdapterA_2_s1_1$whas,
       metaBram_serverAdapterA_2_writeWithResp$whas,
       metaBram_serverAdapterA_3_cnt_1$whas,
       metaBram_serverAdapterA_3_cnt_2$whas,
       metaBram_serverAdapterA_3_cnt_3$whas,
       metaBram_serverAdapterA_3_outData_deqCalled$whas,
       metaBram_serverAdapterA_3_outData_enqData$whas,
       metaBram_serverAdapterA_3_outData_outData$whas,
       metaBram_serverAdapterA_3_s1_1$whas,
       metaBram_serverAdapterA_3_writeWithResp$whas,
       metaBram_serverAdapterA_cnt_1$whas,
       metaBram_serverAdapterA_cnt_2$whas,
       metaBram_serverAdapterA_cnt_3$whas,
       metaBram_serverAdapterA_outData_deqCalled$whas,
       metaBram_serverAdapterA_outData_enqData$whas,
       metaBram_serverAdapterA_outData_outData$whas,
       metaBram_serverAdapterA_s1_1$whas,
       metaBram_serverAdapterA_writeWithResp$whas,
       metaBram_serverAdapterB_1_cnt_1$whas,
       metaBram_serverAdapterB_1_cnt_2$whas,
       metaBram_serverAdapterB_1_cnt_3$whas,
       metaBram_serverAdapterB_1_outData_deqCalled$whas,
       metaBram_serverAdapterB_1_outData_enqData$whas,
       metaBram_serverAdapterB_1_outData_outData$whas,
       metaBram_serverAdapterB_1_s1_1$whas,
       metaBram_serverAdapterB_1_writeWithResp$whas,
       metaBram_serverAdapterB_2_cnt_1$whas,
       metaBram_serverAdapterB_2_cnt_2$whas,
       metaBram_serverAdapterB_2_cnt_3$whas,
       metaBram_serverAdapterB_2_outData_deqCalled$whas,
       metaBram_serverAdapterB_2_outData_enqData$whas,
       metaBram_serverAdapterB_2_outData_outData$whas,
       metaBram_serverAdapterB_2_s1_1$whas,
       metaBram_serverAdapterB_2_writeWithResp$whas,
       metaBram_serverAdapterB_3_cnt_1$whas,
       metaBram_serverAdapterB_3_cnt_2$whas,
       metaBram_serverAdapterB_3_cnt_3$whas,
       metaBram_serverAdapterB_3_outData_deqCalled$whas,
       metaBram_serverAdapterB_3_outData_enqData$whas,
       metaBram_serverAdapterB_3_outData_outData$whas,
       metaBram_serverAdapterB_3_s1_1$whas,
       metaBram_serverAdapterB_3_writeWithResp$whas,
       metaBram_serverAdapterB_cnt_1$whas,
       metaBram_serverAdapterB_cnt_2$whas,
       metaBram_serverAdapterB_cnt_3$whas,
       metaBram_serverAdapterB_outData_deqCalled$whas,
       metaBram_serverAdapterB_outData_enqData$whas,
       metaBram_serverAdapterB_outData_outData$whas,
       metaBram_serverAdapterB_s1_1$whas,
       metaBram_serverAdapterB_writeWithResp$whas,
       nowW$whas,
       statusReg_w$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas,
       wtiS_operateD_1$wget,
       wtiS_operateD_1$whas,
       wtiS_wtiReq$whas,
       wti_Es_mCmd_w$whas,
       wti_Es_mData_w$whas;

  // register controlReg
  reg [31 : 0] controlReg;
  wire [31 : 0] controlReg$D_IN;
  wire controlReg$EN;

  // register dataBram_serverAdapterA_cnt
  reg [2 : 0] dataBram_serverAdapterA_cnt;
  wire [2 : 0] dataBram_serverAdapterA_cnt$D_IN;
  wire dataBram_serverAdapterA_cnt$EN;

  // register dataBram_serverAdapterA_s1
  reg [1 : 0] dataBram_serverAdapterA_s1;
  wire [1 : 0] dataBram_serverAdapterA_s1$D_IN;
  wire dataBram_serverAdapterA_s1$EN;

  // register dataBram_serverAdapterB_cnt
  reg [2 : 0] dataBram_serverAdapterB_cnt;
  wire [2 : 0] dataBram_serverAdapterB_cnt$D_IN;
  wire dataBram_serverAdapterB_cnt$EN;

  // register dataBram_serverAdapterB_s1
  reg [1 : 0] dataBram_serverAdapterB_s1;
  wire [1 : 0] dataBram_serverAdapterB_s1$D_IN;
  wire dataBram_serverAdapterB_s1$EN;

  // register dataCount
  reg [31 : 0] dataCount;
  reg [31 : 0] dataCount$D_IN;
  wire dataCount$EN;

  // register isFirst
  reg isFirst;
  wire isFirst$D_IN, isFirst$EN;

  // register mesgLengthSoFar
  reg [13 : 0] mesgLengthSoFar;
  wire [13 : 0] mesgLengthSoFar$D_IN;
  wire mesgLengthSoFar$EN;

  // register metaBram_serverAdapterA_1_cnt
  reg [2 : 0] metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] metaBram_serverAdapterA_1_cnt$D_IN;
  wire metaBram_serverAdapterA_1_cnt$EN;

  // register metaBram_serverAdapterA_1_s1
  reg [1 : 0] metaBram_serverAdapterA_1_s1;
  wire [1 : 0] metaBram_serverAdapterA_1_s1$D_IN;
  wire metaBram_serverAdapterA_1_s1$EN;

  // register metaBram_serverAdapterA_2_cnt
  reg [2 : 0] metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] metaBram_serverAdapterA_2_cnt$D_IN;
  wire metaBram_serverAdapterA_2_cnt$EN;

  // register metaBram_serverAdapterA_2_s1
  reg [1 : 0] metaBram_serverAdapterA_2_s1;
  wire [1 : 0] metaBram_serverAdapterA_2_s1$D_IN;
  wire metaBram_serverAdapterA_2_s1$EN;

  // register metaBram_serverAdapterA_3_cnt
  reg [2 : 0] metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] metaBram_serverAdapterA_3_cnt$D_IN;
  wire metaBram_serverAdapterA_3_cnt$EN;

  // register metaBram_serverAdapterA_3_s1
  reg [1 : 0] metaBram_serverAdapterA_3_s1;
  wire [1 : 0] metaBram_serverAdapterA_3_s1$D_IN;
  wire metaBram_serverAdapterA_3_s1$EN;

  // register metaBram_serverAdapterA_cnt
  reg [2 : 0] metaBram_serverAdapterA_cnt;
  wire [2 : 0] metaBram_serverAdapterA_cnt$D_IN;
  wire metaBram_serverAdapterA_cnt$EN;

  // register metaBram_serverAdapterA_s1
  reg [1 : 0] metaBram_serverAdapterA_s1;
  wire [1 : 0] metaBram_serverAdapterA_s1$D_IN;
  wire metaBram_serverAdapterA_s1$EN;

  // register metaBram_serverAdapterB_1_cnt
  reg [2 : 0] metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] metaBram_serverAdapterB_1_cnt$D_IN;
  wire metaBram_serverAdapterB_1_cnt$EN;

  // register metaBram_serverAdapterB_1_s1
  reg [1 : 0] metaBram_serverAdapterB_1_s1;
  wire [1 : 0] metaBram_serverAdapterB_1_s1$D_IN;
  wire metaBram_serverAdapterB_1_s1$EN;

  // register metaBram_serverAdapterB_2_cnt
  reg [2 : 0] metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] metaBram_serverAdapterB_2_cnt$D_IN;
  wire metaBram_serverAdapterB_2_cnt$EN;

  // register metaBram_serverAdapterB_2_s1
  reg [1 : 0] metaBram_serverAdapterB_2_s1;
  wire [1 : 0] metaBram_serverAdapterB_2_s1$D_IN;
  wire metaBram_serverAdapterB_2_s1$EN;

  // register metaBram_serverAdapterB_3_cnt
  reg [2 : 0] metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] metaBram_serverAdapterB_3_cnt$D_IN;
  wire metaBram_serverAdapterB_3_cnt$EN;

  // register metaBram_serverAdapterB_3_s1
  reg [1 : 0] metaBram_serverAdapterB_3_s1;
  wire [1 : 0] metaBram_serverAdapterB_3_s1$D_IN;
  wire metaBram_serverAdapterB_3_s1$EN;

  // register metaBram_serverAdapterB_cnt
  reg [2 : 0] metaBram_serverAdapterB_cnt;
  wire [2 : 0] metaBram_serverAdapterB_cnt$D_IN;
  wire metaBram_serverAdapterB_cnt$EN;

  // register metaBram_serverAdapterB_s1
  reg [1 : 0] metaBram_serverAdapterB_s1;
  wire [1 : 0] metaBram_serverAdapterB_s1$D_IN;
  wire metaBram_serverAdapterB_s1$EN;

  // register metaCount
  reg [31 : 0] metaCount;
  reg [31 : 0] metaCount$D_IN;
  wire metaCount$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_isReset_isInReset
  reg wsiS_isReset_isInReset;
  wire wsiS_isReset_isInReset$D_IN, wsiS_isReset_isInReset$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // register wtiS_isReset_isInReset
  reg wtiS_isReset_isInReset;
  wire wtiS_isReset_isInReset$D_IN, wtiS_isReset_isInReset$EN;

  // register wtiS_nowReq
  reg [66 : 0] wtiS_nowReq;
  wire [66 : 0] wtiS_nowReq$D_IN;
  wire wtiS_nowReq$EN;

  // register wtiS_operateD
  reg wtiS_operateD;
  wire wtiS_operateD$D_IN, wtiS_operateD$EN;

  // ports of submodule dataBram_memory
  wire [31 : 0] dataBram_memory$DIA,
		dataBram_memory$DIB,
		dataBram_memory$DOA,
		dataBram_memory$DOB;
  wire [9 : 0] dataBram_memory$ADDRA, dataBram_memory$ADDRB;
  wire dataBram_memory$ENA,
       dataBram_memory$ENB,
       dataBram_memory$WEA,
       dataBram_memory$WEB;

  // ports of submodule dataBram_serverAdapterA_outDataCore
  wire [31 : 0] dataBram_serverAdapterA_outDataCore$D_IN,
		dataBram_serverAdapterA_outDataCore$D_OUT;
  wire dataBram_serverAdapterA_outDataCore$CLR,
       dataBram_serverAdapterA_outDataCore$DEQ,
       dataBram_serverAdapterA_outDataCore$EMPTY_N,
       dataBram_serverAdapterA_outDataCore$ENQ,
       dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dataBram_serverAdapterB_outDataCore
  wire [31 : 0] dataBram_serverAdapterB_outDataCore$D_IN,
		dataBram_serverAdapterB_outDataCore$D_OUT;
  wire dataBram_serverAdapterB_outDataCore$CLR,
       dataBram_serverAdapterB_outDataCore$DEQ,
       dataBram_serverAdapterB_outDataCore$EMPTY_N,
       dataBram_serverAdapterB_outDataCore$ENQ,
       dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule metaBram_memory
  wire [31 : 0] metaBram_memory$DIA,
		metaBram_memory$DIB,
		metaBram_memory$DOA,
		metaBram_memory$DOB;
  wire [9 : 0] metaBram_memory$ADDRA, metaBram_memory$ADDRB;
  wire metaBram_memory$ENA,
       metaBram_memory$ENB,
       metaBram_memory$WEA,
       metaBram_memory$WEB;

  // ports of submodule metaBram_memory_1
  wire [31 : 0] metaBram_memory_1$DIA,
		metaBram_memory_1$DIB,
		metaBram_memory_1$DOA,
		metaBram_memory_1$DOB;
  wire [9 : 0] metaBram_memory_1$ADDRA, metaBram_memory_1$ADDRB;
  wire metaBram_memory_1$ENA,
       metaBram_memory_1$ENB,
       metaBram_memory_1$WEA,
       metaBram_memory_1$WEB;

  // ports of submodule metaBram_memory_2
  wire [31 : 0] metaBram_memory_2$DIA,
		metaBram_memory_2$DIB,
		metaBram_memory_2$DOA,
		metaBram_memory_2$DOB;
  wire [9 : 0] metaBram_memory_2$ADDRA, metaBram_memory_2$ADDRB;
  wire metaBram_memory_2$ENA,
       metaBram_memory_2$ENB,
       metaBram_memory_2$WEA,
       metaBram_memory_2$WEB;

  // ports of submodule metaBram_memory_3
  wire [31 : 0] metaBram_memory_3$DIA,
		metaBram_memory_3$DIB,
		metaBram_memory_3$DOA,
		metaBram_memory_3$DOB;
  wire [9 : 0] metaBram_memory_3$ADDRA, metaBram_memory_3$ADDRB;
  wire metaBram_memory_3$ENA,
       metaBram_memory_3$ENB,
       metaBram_memory_3$WEA,
       metaBram_memory_3$WEB;

  // ports of submodule metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] metaBram_serverAdapterA_1_outDataCore$D_IN,
		metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire metaBram_serverAdapterA_1_outDataCore$CLR,
       metaBram_serverAdapterA_1_outDataCore$DEQ,
       metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       metaBram_serverAdapterA_1_outDataCore$ENQ,
       metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] metaBram_serverAdapterA_2_outDataCore$D_IN,
		metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire metaBram_serverAdapterA_2_outDataCore$CLR,
       metaBram_serverAdapterA_2_outDataCore$DEQ,
       metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       metaBram_serverAdapterA_2_outDataCore$ENQ,
       metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] metaBram_serverAdapterA_3_outDataCore$D_IN,
		metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire metaBram_serverAdapterA_3_outDataCore$CLR,
       metaBram_serverAdapterA_3_outDataCore$DEQ,
       metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       metaBram_serverAdapterA_3_outDataCore$ENQ,
       metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule metaBram_serverAdapterA_outDataCore
  wire [31 : 0] metaBram_serverAdapterA_outDataCore$D_IN,
		metaBram_serverAdapterA_outDataCore$D_OUT;
  wire metaBram_serverAdapterA_outDataCore$CLR,
       metaBram_serverAdapterA_outDataCore$DEQ,
       metaBram_serverAdapterA_outDataCore$EMPTY_N,
       metaBram_serverAdapterA_outDataCore$ENQ,
       metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] metaBram_serverAdapterB_1_outDataCore$D_IN,
		metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire metaBram_serverAdapterB_1_outDataCore$CLR,
       metaBram_serverAdapterB_1_outDataCore$DEQ,
       metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       metaBram_serverAdapterB_1_outDataCore$ENQ,
       metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] metaBram_serverAdapterB_2_outDataCore$D_IN,
		metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire metaBram_serverAdapterB_2_outDataCore$CLR,
       metaBram_serverAdapterB_2_outDataCore$DEQ,
       metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       metaBram_serverAdapterB_2_outDataCore$ENQ,
       metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] metaBram_serverAdapterB_3_outDataCore$D_IN,
		metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire metaBram_serverAdapterB_3_outDataCore$CLR,
       metaBram_serverAdapterB_3_outDataCore$DEQ,
       metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       metaBram_serverAdapterB_3_outDataCore$ENQ,
       metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule metaBram_serverAdapterB_outDataCore
  wire [31 : 0] metaBram_serverAdapterB_outDataCore$D_IN,
		metaBram_serverAdapterB_outDataCore$D_OUT;
  wire metaBram_serverAdapterB_outDataCore$CLR,
       metaBram_serverAdapterB_outDataCore$DEQ,
       metaBram_serverAdapterB_outDataCore$EMPTY_N,
       metaBram_serverAdapterB_outDataCore$ENQ,
       metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule splaF
  wire [2 : 0] splaF$D_IN, splaF$D_OUT;
  wire splaF$CLR, splaF$DEQ, splaF$EMPTY_N, splaF$ENQ, splaF$FULL_N;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [31 : 0] MUX_dataCount$write_1__VAL_2, MUX_metaCount$write_1__VAL_2;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2;
  wire MUX_controlReg$write_1__SEL_1,
       MUX_controlReg$write_1__SEL_2,
       MUX_dataCount$write_1__SEL_1,
       MUX_dataCount$write_1__SEL_2,
       MUX_metaCount$write_1__SEL_1,
       MUX_splitReadInFlight$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__VAL_1,
       MUX_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_wci_wslv_respF_x_wire$wset_1__SEL_3,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h25170,
	       v__h26216,
	       v__h26499,
	       v__h26702,
	       v__h3640,
	       v__h3814,
	       v__h3958;
  reg [31 : 0] IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d951,
	       v__h26683;
  reg CASE_splaFD_OUT_BITS_1_TO_0_NOT_splaFD_OUT_B_ETC__q2,
      IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d918,
      IF_wci_wslv_reqF_first__5_BITS_35_TO_34_80_EQ__ETC___d993,
      IF_wci_wslv_reqF_first__5_BITS_63_TO_52_65_EQ__ETC___d997;
  wire [63 : 0] wtiS_nowReq_BITS_63_TO_0__q1;
  wire [31 : 0] g_data__h27773,
		rdat___1__h26780,
		rdat___1__h26864,
		rdat___1__h26919,
		rdat___1__h26933,
		rdat___1__h26941,
		v__h25297,
		y_avValue__h25924,
		y_avValue__h25968,
		y_avValue__h26008,
		y_avValue__h26048,
		y_avValue__h26088;
  wire [13 : 0] mlB__h23066, mlInc__h23065;
  wire [2 : 0] dataBram_serverAdapterB_cnt_21_PLUS_IF_dataBra_ETC___d327,
	       metaBram_serverAdapterB_1_cnt_57_PLUS_IF_metaB_ETC___d563,
	       metaBram_serverAdapterB_2_cnt_75_PLUS_IF_metaB_ETC___d681,
	       metaBram_serverAdapterB_3_cnt_93_PLUS_IF_metaB_ETC___d799,
	       metaBram_serverAdapterB_cnt_39_PLUS_IF_metaBra_ETC___d445,
	       x__h23114,
	       x__h23126,
	       x__h23138,
	       y__h23115,
	       y__h23127,
	       y__h23139;
  wire IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d927,
       NOT_controlReg_30_BIT_0_31_32_OR_controlReg_30_ETC___d856,
       controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878,
       dataCount_37_ULT_1024___d1196,
       metaCount_34_ULT_1024___d1195,
       splaF_i_notEmpty__96_AND_IF_splaF_first__97_BI_ETC___d929;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // value method wsiS0_sThreadBusy
  assign wsiS0_SThreadBusy =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;

  // value method wsiS0_sReset_n
  assign wsiS0_SReset_n = !wsiS_isReset_isInReset && wsiS_operateD ;

  // value method wtiS0_sThreadBusy
  assign wtiS0_SThreadBusy = wtiS_isReset_isInReset ;

  // value method wtiS0_sReset_n
  assign wtiS0_SReset_n = !wtiS_isReset_isInReset && wtiS_operateD ;

  // submodule dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) dataBram_memory(.CLKA(wciS0_Clk),
					      .CLKB(wciS0_Clk),
					      .ADDRA(dataBram_memory$ADDRA),
					      .ADDRB(dataBram_memory$ADDRB),
					      .DIA(dataBram_memory$DIA),
					      .DIB(dataBram_memory$DIB),
					      .WEA(dataBram_memory$WEA),
					      .WEB(dataBram_memory$WEB),
					      .ENA(dataBram_memory$ENA),
					      .ENB(dataBram_memory$ENB),
					      .DOA(dataBram_memory$DOA),
					      .DOB(dataBram_memory$DOB));

  // submodule dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dataBram_serverAdapterA_outDataCore(.RST_N(wciS0_MReset_n),
								   .CLK(wciS0_Clk),
								   .D_IN(dataBram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dataBram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dataBram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dataBram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dataBram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dataBram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dataBram_serverAdapterB_outDataCore(.RST_N(wciS0_MReset_n),
								   .CLK(wciS0_Clk),
								   .D_IN(dataBram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dataBram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dataBram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dataBram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dataBram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dataBram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) metaBram_memory(.CLKA(wciS0_Clk),
					      .CLKB(wciS0_Clk),
					      .ADDRA(metaBram_memory$ADDRA),
					      .ADDRB(metaBram_memory$ADDRB),
					      .DIA(metaBram_memory$DIA),
					      .DIB(metaBram_memory$DIB),
					      .WEA(metaBram_memory$WEA),
					      .WEB(metaBram_memory$WEB),
					      .ENA(metaBram_memory$ENA),
					      .ENB(metaBram_memory$ENB),
					      .DOA(metaBram_memory$DOA),
					      .DOB(metaBram_memory$DOB));

  // submodule metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) metaBram_memory_1(.CLKA(wciS0_Clk),
						.CLKB(wciS0_Clk),
						.ADDRA(metaBram_memory_1$ADDRA),
						.ADDRB(metaBram_memory_1$ADDRB),
						.DIA(metaBram_memory_1$DIA),
						.DIB(metaBram_memory_1$DIB),
						.WEA(metaBram_memory_1$WEA),
						.WEB(metaBram_memory_1$WEB),
						.ENA(metaBram_memory_1$ENA),
						.ENB(metaBram_memory_1$ENB),
						.DOA(metaBram_memory_1$DOA),
						.DOB(metaBram_memory_1$DOB));

  // submodule metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) metaBram_memory_2(.CLKA(wciS0_Clk),
						.CLKB(wciS0_Clk),
						.ADDRA(metaBram_memory_2$ADDRA),
						.ADDRB(metaBram_memory_2$ADDRB),
						.DIA(metaBram_memory_2$DIA),
						.DIB(metaBram_memory_2$DIB),
						.WEA(metaBram_memory_2$WEA),
						.WEB(metaBram_memory_2$WEB),
						.ENA(metaBram_memory_2$ENA),
						.ENB(metaBram_memory_2$ENB),
						.DOA(metaBram_memory_2$DOA),
						.DOB(metaBram_memory_2$DOB));

  // submodule metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) metaBram_memory_3(.CLKA(wciS0_Clk),
						.CLKB(wciS0_Clk),
						.ADDRA(metaBram_memory_3$ADDRA),
						.ADDRB(metaBram_memory_3$ADDRB),
						.DIA(metaBram_memory_3$DIA),
						.DIB(metaBram_memory_3$DIB),
						.WEA(metaBram_memory_3$WEA),
						.WEB(metaBram_memory_3$WEB),
						.ENA(metaBram_memory_3$ENA),
						.ENB(metaBram_memory_3$ENB),
						.DOA(metaBram_memory_3$DOA),
						.DOB(metaBram_memory_3$DOB));

  // submodule metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterA_1_outDataCore(.RST_N(wciS0_MReset_n),
								     .CLK(wciS0_Clk),
								     .D_IN(metaBram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(metaBram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(metaBram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(metaBram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(metaBram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(metaBram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterA_2_outDataCore(.RST_N(wciS0_MReset_n),
								     .CLK(wciS0_Clk),
								     .D_IN(metaBram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(metaBram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(metaBram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(metaBram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(metaBram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(metaBram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterA_3_outDataCore(.RST_N(wciS0_MReset_n),
								     .CLK(wciS0_Clk),
								     .D_IN(metaBram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(metaBram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(metaBram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(metaBram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(metaBram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(metaBram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterA_outDataCore(.RST_N(wciS0_MReset_n),
								   .CLK(wciS0_Clk),
								   .D_IN(metaBram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(metaBram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(metaBram_serverAdapterA_outDataCore$DEQ),
								   .CLR(metaBram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(metaBram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(metaBram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterB_1_outDataCore(.RST_N(wciS0_MReset_n),
								     .CLK(wciS0_Clk),
								     .D_IN(metaBram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(metaBram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(metaBram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(metaBram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(metaBram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(metaBram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterB_2_outDataCore(.RST_N(wciS0_MReset_n),
								     .CLK(wciS0_Clk),
								     .D_IN(metaBram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(metaBram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(metaBram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(metaBram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(metaBram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(metaBram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterB_3_outDataCore(.RST_N(wciS0_MReset_n),
								     .CLK(wciS0_Clk),
								     .D_IN(metaBram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(metaBram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(metaBram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(metaBram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(metaBram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(metaBram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) metaBram_serverAdapterB_outDataCore(.RST_N(wciS0_MReset_n),
								   .CLK(wciS0_Clk),
								   .D_IN(metaBram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(metaBram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(metaBram_serverAdapterB_outDataCore$DEQ),
								   .CLR(metaBram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(metaBram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(metaBram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule splaF
  FIFO2 #(.width(32'd3), .guarded(32'd1)) splaF(.RST_N(wciS0_MReset_n),
						.CLK(wciS0_Clk),
						.D_IN(splaF$D_IN),
						.ENQ(splaF$ENQ),
						.DEQ(splaF$DEQ),
						.CLR(splaF$CLR),
						.D_OUT(splaF$D_OUT),
						.FULL_N(splaF$FULL_N),
						.EMPTY_N(splaF$EMPTY_N));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wci_wslv_reqF$EMPTY_N &&
	     IF_wci_wslv_reqF_first__5_BITS_63_TO_52_65_EQ__ETC___d997 &&
	     (wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      wci_wslv_reqF$D_OUT[63:52] == 12'h400 ||
	      wci_wslv_respF_c_r != 2'd2) &&
	     wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_reqF$EMPTY_N &&
	     wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;

  // rule RL_dataBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;

  // rule RL_metaBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // rule RL_metaBram_serverAdapterB_1_stageReadResponseAlways
  assign WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // rule RL_metaBram_serverAdapterB_2_stageReadResponseAlways
  assign WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // rule RL_metaBram_serverAdapterB_3_stageReadResponseAlways
  assign WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // rule RL_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;

  // rule RL_wci_wslv_respF_both
  assign WILL_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;

  // rule RL_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_dataBram_serverAdapterB_outData_enqAndDeq =
	     dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     dataBram_serverAdapterB_outDataCore$FULL_N &&
	     dataBram_serverAdapterB_outData_deqCalled$whas &&
	     dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_metaBram_serverAdapterB_outData_enqAndDeq =
	     metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_outDataCore$FULL_N &&
	     metaBram_serverAdapterB_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_reqFifo$FULL_N && wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_controlReg$write_1__SEL_2 =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;
  assign MUX_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_dataCount$write_1__SEL_2 =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878 ;
  assign MUX_metaCount$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfrd &&
	     (wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      wci_wslv_reqF$D_OUT[63:52] == 12'h400) ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     wci_wslv_reqF$D_OUT[63:52] != 12'h400 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 =
	     wci_wslv_respF_c_r != 2'd2 &&
	     splaF_i_notEmpty__96_AND_IF_splaF_first__97_BI_ETC___d929 &&
	     !wci_wslv_wci_cfwr_pw$whas &&
	     splitReadInFlight &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     wsiS_reqFifo$EMPTY_N &&
	     NOT_controlReg_30_BIT_0_31_32_OR_controlReg_30_ETC___d856 &&
	     wci_wslv_cState == 3'd2 ;
  assign MUX_dataCount$write_1__VAL_2 = dataCount + 32'd1 ;
  assign MUX_metaCount$write_1__VAL_2 = metaCount + 32'd1 ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_1 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       wci_wslv_respF_q_1 ;
  always@(MUX_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      MUX_wci_wslv_respF_x_wire$wset_1__SEL_3:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 = { 2'd1, g_data__h27773 } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 = { 2'd1, v__h25297 } ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || MUX_controlReg$write_1__SEL_2 ||
	     WILL_FIRE_RL_wci_ctrl_IsO ;
  assign wci_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wsiS_wsiReq$wget =
	     { wsiS0_MCmd,
	       wsiS0_MReqLast,
	       wsiS0_MBurstPrecise,
	       wsiS0_MBurstLength,
	       wsiS0_MData,
	       wsiS0_MByteEn,
	       wsiS0_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = wci_wslv_cState == 3'd2 ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsiS0_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign wtiS_wtiReq$wget = 67'h0 ;
  assign wtiS_wtiReq$whas = 1'b0 ;
  assign wtiS_operateD_1$wget = 1'b0 ;
  assign wtiS_operateD_1$whas = 1'b0 ;
  assign nowW$wget = wtiS_nowReq[63:0] ;
  assign nowW$whas = 1'd1 ;
  assign statusReg_w$wget =
	     { 6'd40,
	       !metaCount_34_ULT_1024___d1195,
	       !dataCount_37_ULT_1024___d1196,
	       24'd2361866 } ;
  assign statusReg_w$whas = 1'd1 ;
  assign dataBram_serverAdapterA_outData_enqData$wget = dataBram_memory$DOA ;
  assign dataBram_serverAdapterA_outData_enqData$whas =
	     (!dataBram_serverAdapterA_s1[0] ||
	      dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     dataBram_serverAdapterA_s1[1] &&
	     dataBram_serverAdapterA_s1[0] ;
  assign dataBram_serverAdapterA_outData_outData$wget =
	     dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       dataBram_serverAdapterA_outDataCore$D_OUT :
	       dataBram_memory$DOA ;
  assign dataBram_serverAdapterA_outData_outData$whas =
	     dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     dataBram_serverAdapterA_outData_enqData$whas ;
  assign dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dataBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign dataBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign dataBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dataBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign dataBram_serverAdapterA_writeWithResp$whas =
	     MUX_dataCount$write_1__SEL_2 ;
  assign dataBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign dataBram_serverAdapterA_s1_1$whas = MUX_dataCount$write_1__SEL_2 ;
  assign dataBram_serverAdapterB_outData_enqData$wget = dataBram_memory$DOB ;
  assign dataBram_serverAdapterB_outData_enqData$whas =
	     (!dataBram_serverAdapterB_s1[0] ||
	      dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     dataBram_serverAdapterB_s1[1] &&
	     dataBram_serverAdapterB_s1[0] ;
  assign dataBram_serverAdapterB_outData_outData$wget =
	     dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       dataBram_serverAdapterB_outDataCore$D_OUT :
	       dataBram_memory$DOB ;
  assign dataBram_serverAdapterB_outData_outData$whas =
	     dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     dataBram_serverAdapterB_outData_enqData$whas ;
  assign dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dataBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dataBram_serverAdapterB_cnt_2$whas =
	     dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dataBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign dataBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign dataBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign dataBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign metaBram_serverAdapterA_outData_enqData$wget = metaBram_memory$DOA ;
  assign metaBram_serverAdapterA_outData_enqData$whas =
	     (!metaBram_serverAdapterA_s1[0] ||
	      metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     metaBram_serverAdapterA_s1[1] &&
	     metaBram_serverAdapterA_s1[0] ;
  assign metaBram_serverAdapterA_outData_outData$wget =
	     metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterA_outDataCore$D_OUT :
	       metaBram_memory$DOA ;
  assign metaBram_serverAdapterA_outData_outData$whas =
	     metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterA_outData_enqData$whas ;
  assign metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign metaBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign metaBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign metaBram_serverAdapterA_writeWithResp$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878 &&
	     wsiS_reqFifo$D_OUT[57] ;
  assign metaBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign metaBram_serverAdapterA_s1_1$whas =
	     metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_serverAdapterB_outData_enqData$wget = metaBram_memory$DOB ;
  assign metaBram_serverAdapterB_outData_enqData$whas =
	     (!metaBram_serverAdapterB_s1[0] ||
	      metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     metaBram_serverAdapterB_s1[1] &&
	     metaBram_serverAdapterB_s1[0] ;
  assign metaBram_serverAdapterB_outData_outData$wget =
	     metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterB_outDataCore$D_OUT :
	       metaBram_memory$DOB ;
  assign metaBram_serverAdapterB_outData_outData$whas =
	     metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_outData_enqData$whas ;
  assign metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign metaBram_serverAdapterB_cnt_2$whas =
	     metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign metaBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign metaBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign metaBram_serverAdapterA_1_outData_enqData$wget =
	     metaBram_memory_1$DOA ;
  assign metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!metaBram_serverAdapterA_1_s1[0] ||
	      metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     metaBram_serverAdapterA_1_s1[1] &&
	     metaBram_serverAdapterA_1_s1[0] ;
  assign metaBram_serverAdapterA_1_outData_outData$wget =
	     metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       metaBram_memory_1$DOA ;
  assign metaBram_serverAdapterA_1_outData_outData$whas =
	     metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterA_1_cnt_1$whas = 1'b0 ;
  assign metaBram_serverAdapterA_1_cnt_2$wget = 3'h0 ;
  assign metaBram_serverAdapterA_1_cnt_2$whas = 1'b0 ;
  assign metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterA_1_writeWithResp$wget = 2'd2 ;
  assign metaBram_serverAdapterA_1_writeWithResp$whas =
	     metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_serverAdapterA_1_s1_1$wget = 2'd2 ;
  assign metaBram_serverAdapterA_1_s1_1$whas =
	     metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_serverAdapterB_1_outData_enqData$wget =
	     metaBram_memory_1$DOB ;
  assign metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!metaBram_serverAdapterB_1_s1[0] ||
	      metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     metaBram_serverAdapterB_1_s1[1] &&
	     metaBram_serverAdapterB_1_s1[0] ;
  assign metaBram_serverAdapterB_1_outData_outData$wget =
	     metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       metaBram_memory_1$DOB ;
  assign metaBram_serverAdapterB_1_outData_outData$whas =
	     metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign metaBram_serverAdapterB_1_cnt_2$whas =
	     metaBram_serverAdapterB_1_outData_deqCalled$whas ;
  assign metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterB_1_writeWithResp$wget = 2'd0 ;
  assign metaBram_serverAdapterB_1_writeWithResp$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_1_s1_1$wget = 2'd3 ;
  assign metaBram_serverAdapterB_1_s1_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign metaBram_serverAdapterA_2_outData_enqData$wget =
	     metaBram_memory_2$DOA ;
  assign metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!metaBram_serverAdapterA_2_s1[0] ||
	      metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     metaBram_serverAdapterA_2_s1[1] &&
	     metaBram_serverAdapterA_2_s1[0] ;
  assign metaBram_serverAdapterA_2_outData_outData$wget =
	     metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       metaBram_memory_2$DOA ;
  assign metaBram_serverAdapterA_2_outData_outData$whas =
	     metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterA_2_cnt_1$whas = 1'b0 ;
  assign metaBram_serverAdapterA_2_cnt_2$wget = 3'h0 ;
  assign metaBram_serverAdapterA_2_cnt_2$whas = 1'b0 ;
  assign metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterA_2_writeWithResp$wget = 2'd2 ;
  assign metaBram_serverAdapterA_2_writeWithResp$whas =
	     metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_serverAdapterA_2_s1_1$wget = 2'd2 ;
  assign metaBram_serverAdapterA_2_s1_1$whas =
	     metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_serverAdapterB_2_outData_enqData$wget =
	     metaBram_memory_2$DOB ;
  assign metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!metaBram_serverAdapterB_2_s1[0] ||
	      metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     metaBram_serverAdapterB_2_s1[1] &&
	     metaBram_serverAdapterB_2_s1[0] ;
  assign metaBram_serverAdapterB_2_outData_outData$wget =
	     metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       metaBram_memory_2$DOB ;
  assign metaBram_serverAdapterB_2_outData_outData$whas =
	     metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign metaBram_serverAdapterB_2_cnt_2$whas =
	     metaBram_serverAdapterB_2_outData_deqCalled$whas ;
  assign metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterB_2_writeWithResp$wget = 2'd0 ;
  assign metaBram_serverAdapterB_2_writeWithResp$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_2_s1_1$wget = 2'd3 ;
  assign metaBram_serverAdapterB_2_s1_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign metaBram_serverAdapterA_3_outData_enqData$wget =
	     metaBram_memory_3$DOA ;
  assign metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!metaBram_serverAdapterA_3_s1[0] ||
	      metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     metaBram_serverAdapterA_3_s1[1] &&
	     metaBram_serverAdapterA_3_s1[0] ;
  assign metaBram_serverAdapterA_3_outData_outData$wget =
	     metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       metaBram_memory_3$DOA ;
  assign metaBram_serverAdapterA_3_outData_outData$whas =
	     metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterA_3_cnt_1$whas = 1'b0 ;
  assign metaBram_serverAdapterA_3_cnt_2$wget = 3'h0 ;
  assign metaBram_serverAdapterA_3_cnt_2$whas = 1'b0 ;
  assign metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterA_3_writeWithResp$wget = 2'd2 ;
  assign metaBram_serverAdapterA_3_writeWithResp$whas =
	     metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_serverAdapterA_3_s1_1$wget = 2'd2 ;
  assign metaBram_serverAdapterA_3_s1_1$whas =
	     metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_serverAdapterB_3_outData_enqData$wget =
	     metaBram_memory_3$DOB ;
  assign metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!metaBram_serverAdapterB_3_s1[0] ||
	      metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     metaBram_serverAdapterB_3_s1[1] &&
	     metaBram_serverAdapterB_3_s1[0] ;
  assign metaBram_serverAdapterB_3_outData_outData$wget =
	     metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       metaBram_memory_3$DOB ;
  assign metaBram_serverAdapterB_3_outData_outData$whas =
	     metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign metaBram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign metaBram_serverAdapterB_3_cnt_2$whas =
	     metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign metaBram_serverAdapterB_3_writeWithResp$wget = 2'd0 ;
  assign metaBram_serverAdapterB_3_writeWithResp$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign metaBram_serverAdapterB_3_s1_1$wget = 2'd3 ;
  assign metaBram_serverAdapterB_3_s1_1$whas =
	     WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign wsi_Es_mCmd_w$wget = wsiS0_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = wsiS0_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsiS0_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = wsiS0_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsiS0_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wti_Es_mCmd_w$wget = wtiS0_MCmd ;
  assign wti_Es_mCmd_w$whas = 1'd1 ;
  assign wti_Es_mData_w$wget = wtiS0_MData ;
  assign wti_Es_mData_w$whas = 1'd1 ;
  assign wci_wslv_reqF_r_enq$whas = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 ||
	     WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wsiS_reqFifo_r_enq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_doResetDeq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign dataBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign dataBram_serverAdapterB_outData_deqCalled$whas =
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 && splaF$D_OUT[2] &&
	     splaF$D_OUT[1:0] == 2'd0 ;
  assign metaBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign metaBram_serverAdapterB_outData_deqCalled$whas =
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 && !splaF$D_OUT[2] &&
	     splaF$D_OUT[1:0] == 2'd0 ;
  assign metaBram_serverAdapterA_1_outData_deqCalled$whas = 1'b0 ;
  assign metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 && !splaF$D_OUT[2] &&
	     splaF$D_OUT[1:0] == 2'd1 ;
  assign metaBram_serverAdapterA_2_outData_deqCalled$whas = 1'b0 ;
  assign metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 && !splaF$D_OUT[2] &&
	     splaF$D_OUT[1:0] == 2'd2 ;
  assign metaBram_serverAdapterA_3_outData_deqCalled$whas = 1'b0 ;
  assign metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 && !splaF$D_OUT[2] &&
	     splaF$D_OUT[1:0] == 2'd3 ;
  assign wsi_Es_mReqLast_w$whas = wsiS0_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsiS0_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;

  // register controlReg
  assign controlReg$D_IN =
	     MUX_controlReg$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign controlReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     MUX_controlReg$write_1__SEL_2 ;

  // register dataBram_serverAdapterA_cnt
  assign dataBram_serverAdapterA_cnt$D_IN =
	     dataBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign dataBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register dataBram_serverAdapterA_s1
  assign dataBram_serverAdapterA_s1$D_IN =
	     { MUX_dataCount$write_1__SEL_2, 1'b0 } ;
  assign dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register dataBram_serverAdapterB_cnt
  assign dataBram_serverAdapterB_cnt$D_IN =
	     dataBram_serverAdapterB_cnt_21_PLUS_IF_dataBra_ETC___d327 ;
  assign dataBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways ||
	     dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register dataBram_serverAdapterB_s1
  assign dataBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register dataCount
  always@(MUX_dataCount$write_1__SEL_1 or
	  wci_wslv_reqF$D_OUT or
	  MUX_dataCount$write_1__SEL_2 or
	  MUX_dataCount$write_1__VAL_2 or MUX_controlReg$write_1__SEL_2)
  case (1'b1)
    MUX_dataCount$write_1__SEL_1: dataCount$D_IN = wci_wslv_reqF$D_OUT[31:0];
    MUX_dataCount$write_1__SEL_2:
	dataCount$D_IN = MUX_dataCount$write_1__VAL_2;
    MUX_controlReg$write_1__SEL_2: dataCount$D_IN = 32'd0;
    default: dataCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign dataCount$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878 ||
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     MUX_controlReg$write_1__SEL_2 ;

  // register isFirst
  assign isFirst$D_IN = 1'b0 ;
  assign isFirst$EN = 1'b0 ;

  // register mesgLengthSoFar
  assign mesgLengthSoFar$D_IN = wsiS_reqFifo$D_OUT[57] ? 14'd0 : mlB__h23066 ;
  assign mesgLengthSoFar$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register metaBram_serverAdapterA_1_cnt
  assign metaBram_serverAdapterA_1_cnt$D_IN =
	     metaBram_serverAdapterA_1_cnt + 3'd0 + 3'd0 ;
  assign metaBram_serverAdapterA_1_cnt$EN = 1'b0 ;

  // register metaBram_serverAdapterA_1_s1
  assign metaBram_serverAdapterA_1_s1$D_IN =
	     { metaBram_serverAdapterA_writeWithResp$whas, 1'b0 } ;
  assign metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register metaBram_serverAdapterA_2_cnt
  assign metaBram_serverAdapterA_2_cnt$D_IN =
	     metaBram_serverAdapterA_2_cnt + 3'd0 + 3'd0 ;
  assign metaBram_serverAdapterA_2_cnt$EN = 1'b0 ;

  // register metaBram_serverAdapterA_2_s1
  assign metaBram_serverAdapterA_2_s1$D_IN =
	     { metaBram_serverAdapterA_writeWithResp$whas, 1'b0 } ;
  assign metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register metaBram_serverAdapterA_3_cnt
  assign metaBram_serverAdapterA_3_cnt$D_IN =
	     metaBram_serverAdapterA_3_cnt + 3'd0 + 3'd0 ;
  assign metaBram_serverAdapterA_3_cnt$EN = 1'b0 ;

  // register metaBram_serverAdapterA_3_s1
  assign metaBram_serverAdapterA_3_s1$D_IN =
	     { metaBram_serverAdapterA_writeWithResp$whas, 1'b0 } ;
  assign metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register metaBram_serverAdapterA_cnt
  assign metaBram_serverAdapterA_cnt$D_IN =
	     metaBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign metaBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register metaBram_serverAdapterA_s1
  assign metaBram_serverAdapterA_s1$D_IN =
	     { metaBram_serverAdapterA_writeWithResp$whas, 1'b0 } ;
  assign metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register metaBram_serverAdapterB_1_cnt
  assign metaBram_serverAdapterB_1_cnt$D_IN =
	     metaBram_serverAdapterB_1_cnt_57_PLUS_IF_metaB_ETC___d563 ;
  assign metaBram_serverAdapterB_1_cnt$EN =
	     WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways ||
	     metaBram_serverAdapterB_1_outData_deqCalled$whas ;

  // register metaBram_serverAdapterB_1_s1
  assign metaBram_serverAdapterB_1_s1$D_IN =
	     { WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways,
	       1'b1 } ;
  assign metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register metaBram_serverAdapterB_2_cnt
  assign metaBram_serverAdapterB_2_cnt$D_IN =
	     metaBram_serverAdapterB_2_cnt_75_PLUS_IF_metaB_ETC___d681 ;
  assign metaBram_serverAdapterB_2_cnt$EN =
	     WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways ||
	     metaBram_serverAdapterB_2_outData_deqCalled$whas ;

  // register metaBram_serverAdapterB_2_s1
  assign metaBram_serverAdapterB_2_s1$D_IN =
	     { WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways,
	       1'b1 } ;
  assign metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register metaBram_serverAdapterB_3_cnt
  assign metaBram_serverAdapterB_3_cnt$D_IN =
	     metaBram_serverAdapterB_3_cnt_93_PLUS_IF_metaB_ETC___d799 ;
  assign metaBram_serverAdapterB_3_cnt$EN =
	     WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways ||
	     metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register metaBram_serverAdapterB_3_s1
  assign metaBram_serverAdapterB_3_s1$D_IN =
	     { WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways,
	       1'b1 } ;
  assign metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register metaBram_serverAdapterB_cnt
  assign metaBram_serverAdapterB_cnt$D_IN =
	     metaBram_serverAdapterB_cnt_39_PLUS_IF_metaBra_ETC___d445 ;
  assign metaBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways ||
	     metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register metaBram_serverAdapterB_s1
  assign metaBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register metaCount
  always@(MUX_metaCount$write_1__SEL_1 or
	  wci_wslv_reqF$D_OUT or
	  metaBram_serverAdapterA_writeWithResp$whas or
	  MUX_metaCount$write_1__VAL_2 or MUX_controlReg$write_1__SEL_2)
  case (1'b1)
    MUX_metaCount$write_1__SEL_1: metaCount$D_IN = wci_wslv_reqF$D_OUT[31:0];
    metaBram_serverAdapterA_writeWithResp$whas:
	metaCount$D_IN = MUX_metaCount$write_1__VAL_2;
    MUX_controlReg$write_1__SEL_2: metaCount$D_IN = 32'd0;
    default: metaCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign metaCount$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878 &&
	     wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     MUX_controlReg$write_1__SEL_2 ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splitReadInFlight$EN =
	     WILL_FIRE_RL_wci_cfrd &&
	     (wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      wci_wslv_reqF$D_OUT[63:52] == 12'h400) ||
	     MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_1 ;
  assign wci_wslv_illegalEdge$EN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_wci_wslv_respF_q_0$write_1__SEL_2:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_wci_wslv_respF_q_1$write_1__SEL_2:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'b0 ;
  assign wsiS_errorSticky$EN = 1'b0 ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_isReset_isInReset
  assign wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiS_isReset_isInReset$EN = wsiS_isReset_isInReset ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = wci_wslv_cState == 3'd2 ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS0_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq !=
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset_isInReset,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // register wtiS_isReset_isInReset
  assign wtiS_isReset_isInReset$D_IN = 1'd0 ;
  assign wtiS_isReset_isInReset$EN = wtiS_isReset_isInReset ;

  // register wtiS_nowReq
  assign wtiS_nowReq$D_IN = { wtiS0_MCmd, wtiS0_MData } ;
  assign wtiS_nowReq$EN = 1'd1 ;

  // register wtiS_operateD
  assign wtiS_operateD$D_IN = 1'b1 ;
  assign wtiS_operateD$EN = 1'd1 ;

  // submodule dataBram_memory
  assign dataBram_memory$ADDRA = dataCount[9:0] ;
  assign dataBram_memory$ADDRB = wci_wslv_reqF$D_OUT[43:34] ;
  assign dataBram_memory$DIA = wsiS_reqFifo$D_OUT[43:12] ;
  assign dataBram_memory$DIB = 32'd0 ;
  assign dataBram_memory$WEA = 1'd1 ;
  assign dataBram_memory$WEB = 1'd0 ;
  assign dataBram_memory$ENA = MUX_dataCount$write_1__SEL_2 ;
  assign dataBram_memory$ENB =
	     WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways ;

  // submodule dataBram_serverAdapterA_outDataCore
  assign dataBram_serverAdapterA_outDataCore$D_IN = dataBram_memory$DOA ;
  assign dataBram_serverAdapterA_outDataCore$ENQ =
	     dataBram_serverAdapterA_outDataCore$FULL_N &&
	     dataBram_serverAdapterA_outData_enqData$whas ;
  assign dataBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule dataBram_serverAdapterB_outDataCore
  assign dataBram_serverAdapterB_outDataCore$D_IN = dataBram_memory$DOB ;
  assign dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dataBram_serverAdapterB_outData_enqAndDeq ||
	     dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !dataBram_serverAdapterB_outData_deqCalled$whas &&
	     dataBram_serverAdapterB_outData_enqData$whas ;
  assign dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dataBram_serverAdapterB_outData_enqAndDeq ||
	     dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !dataBram_serverAdapterB_outData_enqData$whas ;
  assign dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_memory
  assign metaBram_memory$ADDRA = metaCount[9:0] ;
  assign metaBram_memory$ADDRB = wci_wslv_reqF$D_OUT[45:36] ;
  assign metaBram_memory$DIA = { 18'd0, mlB__h23066 } ;
  assign metaBram_memory$DIB = 32'd0 ;
  assign metaBram_memory$WEA = 1'd1 ;
  assign metaBram_memory$WEB = 1'd0 ;
  assign metaBram_memory$ENA = metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_memory$ENB =
	     WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways ;

  // submodule metaBram_memory_1
  assign metaBram_memory_1$ADDRA = metaCount[9:0] ;
  assign metaBram_memory_1$ADDRB = wci_wslv_reqF$D_OUT[45:36] ;
  assign metaBram_memory_1$DIA = { 24'd0, wsiS_reqFifo$D_OUT[7:0] } ;
  assign metaBram_memory_1$DIB = 32'd0 ;
  assign metaBram_memory_1$WEA = 1'd1 ;
  assign metaBram_memory_1$WEB = 1'd0 ;
  assign metaBram_memory_1$ENA = metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_memory_1$ENB =
	     WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways ;

  // submodule metaBram_memory_2
  assign metaBram_memory_2$ADDRA = metaCount[9:0] ;
  assign metaBram_memory_2$ADDRB = wci_wslv_reqF$D_OUT[45:36] ;
  assign metaBram_memory_2$DIA = wtiS_nowReq_BITS_63_TO_0__q1[63:32] ;
  assign metaBram_memory_2$DIB = 32'd0 ;
  assign metaBram_memory_2$WEA = 1'd1 ;
  assign metaBram_memory_2$WEB = 1'd0 ;
  assign metaBram_memory_2$ENA = metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_memory_2$ENB =
	     WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways ;

  // submodule metaBram_memory_3
  assign metaBram_memory_3$ADDRA = metaCount[9:0] ;
  assign metaBram_memory_3$ADDRB = wci_wslv_reqF$D_OUT[45:36] ;
  assign metaBram_memory_3$DIA = wtiS_nowReq_BITS_63_TO_0__q1[31:0] ;
  assign metaBram_memory_3$DIB = 32'd0 ;
  assign metaBram_memory_3$WEA = 1'd1 ;
  assign metaBram_memory_3$WEB = 1'd0 ;
  assign metaBram_memory_3$ENA = metaBram_serverAdapterA_writeWithResp$whas ;
  assign metaBram_memory_3$ENB =
	     WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways ;

  // submodule metaBram_serverAdapterA_1_outDataCore
  assign metaBram_serverAdapterA_1_outDataCore$D_IN = metaBram_memory_1$DOA ;
  assign metaBram_serverAdapterA_1_outDataCore$ENQ =
	     metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign metaBram_serverAdapterA_1_outDataCore$DEQ = 1'b0 ;
  assign metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_serverAdapterA_2_outDataCore
  assign metaBram_serverAdapterA_2_outDataCore$D_IN = metaBram_memory_2$DOA ;
  assign metaBram_serverAdapterA_2_outDataCore$ENQ =
	     metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign metaBram_serverAdapterA_2_outDataCore$DEQ = 1'b0 ;
  assign metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_serverAdapterA_3_outDataCore
  assign metaBram_serverAdapterA_3_outDataCore$D_IN = metaBram_memory_3$DOA ;
  assign metaBram_serverAdapterA_3_outDataCore$ENQ =
	     metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign metaBram_serverAdapterA_3_outDataCore$DEQ = 1'b0 ;
  assign metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_serverAdapterA_outDataCore
  assign metaBram_serverAdapterA_outDataCore$D_IN = metaBram_memory$DOA ;
  assign metaBram_serverAdapterA_outDataCore$ENQ =
	     metaBram_serverAdapterA_outDataCore$FULL_N &&
	     metaBram_serverAdapterA_outData_enqData$whas ;
  assign metaBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_serverAdapterB_1_outDataCore
  assign metaBram_serverAdapterB_1_outDataCore$D_IN = metaBram_memory_1$DOB ;
  assign metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     !metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_serverAdapterB_2_outDataCore
  assign metaBram_serverAdapterB_2_outDataCore$D_IN = metaBram_memory_2$DOB ;
  assign metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     !metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_serverAdapterB_3_outDataCore
  assign metaBram_serverAdapterB_3_outDataCore$D_IN = metaBram_memory_3$DOB ;
  assign metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule metaBram_serverAdapterB_outDataCore
  assign metaBram_serverAdapterB_outDataCore$D_IN = metaBram_memory$DOB ;
  assign metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_outData_enqAndDeq ||
	     metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !metaBram_serverAdapterB_outData_deqCalled$whas &&
	     metaBram_serverAdapterB_outData_enqData$whas ;
  assign metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_metaBram_serverAdapterB_outData_enqAndDeq ||
	     metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !metaBram_serverAdapterB_outData_enqData$whas ;
  assign metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule splaF
  assign splaF$D_IN =
	     (wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
	       3'd4 :
	       { 1'd0, wci_wslv_reqF$D_OUT[35:34] } ;
  assign splaF$ENQ = MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splaF$DEQ = MUX_wci_wslv_respF_x_wire$wset_1__SEL_3 ;
  assign splaF$CLR = 1'b0 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo$DEQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d927 =
	     IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d918 &&
	     CASE_splaFD_OUT_BITS_1_TO_0_NOT_splaFD_OUT_B_ETC__q2 ;
  assign NOT_controlReg_30_BIT_0_31_32_OR_controlReg_30_ETC___d856 =
	     !controlReg[0] ||
	     controlReg[1] &&
	     (!metaCount_34_ULT_1024___d1195 ||
	      !dataCount_37_ULT_1024___d1196) ||
	     (dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!wsiS_reqFifo$D_OUT[57] ||
	      (metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	      (metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	      (metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	      (metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7) ;
  assign controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878 =
	     controlReg[0] &&
	     (!controlReg[1] ||
	      metaCount_34_ULT_1024___d1195 &&
	      dataCount_37_ULT_1024___d1196) ;
  assign dataBram_serverAdapterB_cnt_21_PLUS_IF_dataBra_ETC___d327 =
	     dataBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_dataBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (dataBram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dataCount_37_ULT_1024___d1196 = dataCount < 32'd1024 ;
  assign g_data__h27773 =
	     (wci_wslv_reqF$D_OUT[63:52] == 12'h0) ? v__h26683 : 32'd0 ;
  assign metaBram_serverAdapterB_1_cnt_57_PLUS_IF_metaB_ETC___d563 =
	     metaBram_serverAdapterB_1_cnt +
	     (WILL_FIRE_RL_metaBram_serverAdapterB_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (metaBram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign metaBram_serverAdapterB_2_cnt_75_PLUS_IF_metaB_ETC___d681 =
	     metaBram_serverAdapterB_2_cnt +
	     (WILL_FIRE_RL_metaBram_serverAdapterB_2_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (metaBram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign metaBram_serverAdapterB_3_cnt_93_PLUS_IF_metaB_ETC___d799 =
	     metaBram_serverAdapterB_3_cnt +
	     (WILL_FIRE_RL_metaBram_serverAdapterB_3_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign metaBram_serverAdapterB_cnt_39_PLUS_IF_metaBra_ETC___d445 =
	     metaBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_metaBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (metaBram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign metaCount_34_ULT_1024___d1195 = metaCount < 32'd1024 ;
  assign mlB__h23066 = mesgLengthSoFar + mlInc__h23065 ;
  assign mlInc__h23065 =
	     wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h23114 + y__h23115 } :
	       14'd4 ;
  assign rdat___1__h26780 = statusReg_w$wget ;
  assign rdat___1__h26864 = hasDebugLogic ? { 24'd0, wsiS_statusR } : 32'd0 ;
  assign rdat___1__h26919 =
	     hasDebugLogic ? wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat___1__h26933 =
	     hasDebugLogic ? wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat___1__h26941 =
	     hasDebugLogic ? wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign splaF_i_notEmpty__96_AND_IF_splaF_first__97_BI_ETC___d929 =
	     splaF$EMPTY_N &&
	     (splaF$D_OUT[2] ?
		(splaF$D_OUT[1:0] != 2'd0 ||
		 dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 dataBram_serverAdapterB_outData_enqData$whas) &&
		(splaF$D_OUT[1:0] != 2'd0 ||
		 dataBram_serverAdapterB_outData_outData$whas) :
		IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d927) ;
  assign v__h25297 =
	     splaF$D_OUT[2] ?
	       y_avValue__h25924 :
	       IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d951 ;
  assign wtiS_nowReq_BITS_63_TO_0__q1 = wtiS_nowReq[63:0] ;
  assign x__h23114 = x__h23126 + y__h23127 ;
  assign x__h23126 = x__h23138 + y__h23139 ;
  assign x__h23138 = { 2'd0, wsiS_reqFifo$D_OUT[11] } ;
  assign y__h23115 = { 2'd0, wsiS_reqFifo$D_OUT[8] } ;
  assign y__h23127 = { 2'd0, wsiS_reqFifo$D_OUT[9] } ;
  assign y__h23139 = { 2'd0, wsiS_reqFifo$D_OUT[10] } ;
  assign y_avValue__h25924 = dataBram_serverAdapterB_outData_outData$wget ;
  assign y_avValue__h25968 = metaBram_serverAdapterB_outData_outData$wget ;
  assign y_avValue__h26008 = metaBram_serverAdapterB_1_outData_outData$wget ;
  assign y_avValue__h26048 = metaBram_serverAdapterB_2_outData_outData$wget ;
  assign y_avValue__h26088 = metaBram_serverAdapterB_3_outData_outData$wget ;
  always@(splaF$D_OUT or
	  metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  metaBram_serverAdapterB_3_outData_enqData$whas or
	  metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  metaBram_serverAdapterB_outData_enqData$whas or
	  metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  metaBram_serverAdapterB_1_outData_enqData$whas or
	  metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (splaF$D_OUT[1:0])
      2'd0:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d918 =
	      metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d918 =
	      metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d918 =
	      metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d918 =
	      splaF$D_OUT[1:0] != 2'd3 ||
	      metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(splaF$D_OUT or
	  metaBram_serverAdapterB_3_outData_outData$whas or
	  metaBram_serverAdapterB_outData_outData$whas or
	  metaBram_serverAdapterB_1_outData_outData$whas or
	  metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (splaF$D_OUT[1:0])
      2'd0:
	  CASE_splaFD_OUT_BITS_1_TO_0_NOT_splaFD_OUT_B_ETC__q2 =
	      metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_splaFD_OUT_BITS_1_TO_0_NOT_splaFD_OUT_B_ETC__q2 =
	      metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_splaFD_OUT_BITS_1_TO_0_NOT_splaFD_OUT_B_ETC__q2 =
	      metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_splaFD_OUT_BITS_1_TO_0_NOT_splaFD_OUT_B_ETC__q2 =
	      splaF$D_OUT[1:0] != 2'd3 ||
	      metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(wci_wslv_reqF$D_OUT or
	  metaBram_serverAdapterB_3_cnt or
	  metaBram_serverAdapterB_cnt or
	  metaBram_serverAdapterB_1_cnt or metaBram_serverAdapterB_2_cnt)
  begin
    case (wci_wslv_reqF$D_OUT[35:34])
      2'd0:
	  IF_wci_wslv_reqF_first__5_BITS_35_TO_34_80_EQ__ETC___d993 =
	      (metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7;
      2'd1:
	  IF_wci_wslv_reqF_first__5_BITS_35_TO_34_80_EQ__ETC___d993 =
	      (metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7;
      2'd2:
	  IF_wci_wslv_reqF_first__5_BITS_35_TO_34_80_EQ__ETC___d993 =
	      (metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7;
      2'd3:
	  IF_wci_wslv_reqF_first__5_BITS_35_TO_34_80_EQ__ETC___d993 =
	      wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	      (metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7;
    endcase
  end
  always@(wci_wslv_reqF$D_OUT or
	  splaF$FULL_N or
	  IF_wci_wslv_reqF_first__5_BITS_35_TO_34_80_EQ__ETC___d993 or
	  dataBram_serverAdapterB_cnt)
  begin
    case (wci_wslv_reqF$D_OUT[63:52])
      12'h0: IF_wci_wslv_reqF_first__5_BITS_63_TO_52_65_EQ__ETC___d997 = 1'b1;
      12'h800:
	  IF_wci_wslv_reqF_first__5_BITS_63_TO_52_65_EQ__ETC___d997 =
	      (dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 && splaF$FULL_N;
      default: IF_wci_wslv_reqF_first__5_BITS_63_TO_52_65_EQ__ETC___d997 =
		   wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		   splaF$FULL_N &&
		   IF_wci_wslv_reqF_first__5_BITS_35_TO_34_80_EQ__ETC___d993;
    endcase
  end
  always@(splaF$D_OUT or
	  y_avValue__h26088 or
	  y_avValue__h25968 or y_avValue__h26008 or y_avValue__h26048)
  begin
    case (splaF$D_OUT[1:0])
      2'd0:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d951 =
	      y_avValue__h25968;
      2'd1:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d951 =
	      y_avValue__h26008;
      2'd2:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d951 =
	      y_avValue__h26048;
      2'd3:
	  IF_splaF_first__97_BITS_1_TO_0_99_EQ_0_00_THEN_ETC___d951 =
	      y_avValue__h26088;
    endcase
  end
  always@(wci_wslv_reqF$D_OUT or
	  controlReg or
	  metaCount or
	  dataCount or
	  rdat___1__h26780 or
	  rdat___1__h26864 or
	  rdat___1__h26919 or rdat___1__h26933 or rdat___1__h26941)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h26683 = controlReg;
      8'h04: v__h26683 = metaCount;
      8'h08: v__h26683 = dataCount;
      8'h0C: v__h26683 = rdat___1__h26780;
      8'h10: v__h26683 = rdat___1__h26864;
      8'h14: v__h26683 = rdat___1__h26919;
      8'h18: v__h26683 = rdat___1__h26933;
      8'h1C: v__h26683 = rdat___1__h26941;
      default: v__h26683 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	wtiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (dataBram_serverAdapterA_cnt$EN)
	  dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dataBram_serverAdapterA_cnt$D_IN;
	if (dataBram_serverAdapterA_s1$EN)
	  dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dataBram_serverAdapterA_s1$D_IN;
	if (dataBram_serverAdapterB_cnt$EN)
	  dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dataBram_serverAdapterB_cnt$D_IN;
	if (dataBram_serverAdapterB_s1$EN)
	  dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dataBram_serverAdapterB_s1$D_IN;
	if (isFirst$EN) isFirst <= `BSV_ASSIGNMENT_DELAY isFirst$D_IN;
	if (mesgLengthSoFar$EN)
	  mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY mesgLengthSoFar$D_IN;
	if (metaBram_serverAdapterA_1_cnt$EN)
	  metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_1_cnt$D_IN;
	if (metaBram_serverAdapterA_1_s1$EN)
	  metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_1_s1$D_IN;
	if (metaBram_serverAdapterA_2_cnt$EN)
	  metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_2_cnt$D_IN;
	if (metaBram_serverAdapterA_2_s1$EN)
	  metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_2_s1$D_IN;
	if (metaBram_serverAdapterA_3_cnt$EN)
	  metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_3_cnt$D_IN;
	if (metaBram_serverAdapterA_3_s1$EN)
	  metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_3_s1$D_IN;
	if (metaBram_serverAdapterA_cnt$EN)
	  metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_cnt$D_IN;
	if (metaBram_serverAdapterA_s1$EN)
	  metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterA_s1$D_IN;
	if (metaBram_serverAdapterB_1_cnt$EN)
	  metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_1_cnt$D_IN;
	if (metaBram_serverAdapterB_1_s1$EN)
	  metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_1_s1$D_IN;
	if (metaBram_serverAdapterB_2_cnt$EN)
	  metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_2_cnt$D_IN;
	if (metaBram_serverAdapterB_2_s1$EN)
	  metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_2_s1$D_IN;
	if (metaBram_serverAdapterB_3_cnt$EN)
	  metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_3_cnt$D_IN;
	if (metaBram_serverAdapterB_3_s1$EN)
	  metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_3_s1$D_IN;
	if (metaBram_serverAdapterB_cnt$EN)
	  metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_cnt$D_IN;
	if (metaBram_serverAdapterB_s1$EN)
	  metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      metaBram_serverAdapterB_s1$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
	if (wtiS_nowReq$EN)
	  wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY wtiS_nowReq$D_IN;
	if (wtiS_operateD$EN)
	  wtiS_operateD <= `BSV_ASSIGNMENT_DELAY wtiS_operateD$D_IN;
      end
    if (controlReg$EN) controlReg <= `BSV_ASSIGNMENT_DELAY controlReg$D_IN;
    if (dataCount$EN) dataCount <= `BSV_ASSIGNMENT_DELAY dataCount$D_IN;
    if (metaCount$EN) metaCount <= `BSV_ASSIGNMENT_DELAY metaCount$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
      if (wsiS_isReset_isInReset$EN)
	wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiS_isReset_isInReset$D_IN;
      if (wtiS_isReset_isInReset$EN)
	wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wtiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    controlReg = 32'hAAAAAAAA;
    dataBram_serverAdapterA_cnt = 3'h2;
    dataBram_serverAdapterA_s1 = 2'h2;
    dataBram_serverAdapterB_cnt = 3'h2;
    dataBram_serverAdapterB_s1 = 2'h2;
    dataCount = 32'hAAAAAAAA;
    isFirst = 1'h0;
    mesgLengthSoFar = 14'h2AAA;
    metaBram_serverAdapterA_1_cnt = 3'h2;
    metaBram_serverAdapterA_1_s1 = 2'h2;
    metaBram_serverAdapterA_2_cnt = 3'h2;
    metaBram_serverAdapterA_2_s1 = 2'h2;
    metaBram_serverAdapterA_3_cnt = 3'h2;
    metaBram_serverAdapterA_3_s1 = 2'h2;
    metaBram_serverAdapterA_cnt = 3'h2;
    metaBram_serverAdapterA_s1 = 2'h2;
    metaBram_serverAdapterB_1_cnt = 3'h2;
    metaBram_serverAdapterB_1_s1 = 2'h2;
    metaBram_serverAdapterB_2_cnt = 3'h2;
    metaBram_serverAdapterB_2_s1 = 2'h2;
    metaBram_serverAdapterB_3_cnt = 3'h2;
    metaBram_serverAdapterB_3_s1 = 2'h2;
    metaBram_serverAdapterB_cnt = 3'h2;
    metaBram_serverAdapterB_s1 = 2'h2;
    metaCount = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_isReset_isInReset = 1'h0;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
    wtiS_isReset_isInReset = 1'h0;
    wtiS_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    wtiS_operateD = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3640 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3640,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h26702 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h26702,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 v__h26683);
    if (wciS0_MReset_n)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	  controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878 &&
	  wsiS_reqFifo$D_OUT[57])
	begin
	  v__h25170 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	  controlReg_30_BIT_0_31_AND_NOT_controlReg_30_B_ETC___d878 &&
	  wsiS_reqFifo$D_OUT[57])
	$display("[%0d]: %m: doMessageAccept DWM metaCount:%0x WSI opcode:%0x length:%0x",
		 v__h25170,
		 metaCount,
		 wsiS_reqFifo$D_OUT[7:0],
		 mlB__h23066);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h26499 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h26499,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 wci_wslv_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3958 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3958,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3814 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3814,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
    if (wciS0_MReset_n)
      if (dataBram_serverAdapterA_s1[1] &&
	  !dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (dataBram_serverAdapterB_s1[1] &&
	  !dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterA_s1[1] &&
	  !metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterB_s1[1] &&
	  !metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterA_1_s1[1] &&
	  !metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterB_1_s1[1] &&
	  !metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterA_2_s1[1] &&
	  !metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterB_2_s1[1] &&
	  !metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterA_3_s1[1] &&
	  !metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (metaBram_serverAdapterB_3_s1[1] &&
	  !metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (MUX_wci_wslv_respF_x_wire$wset_1__SEL_3)
	begin
	  v__h26216 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (MUX_wci_wslv_respF_x_wire$wset_1__SEL_3)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h26216, v__h25297);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && MUX_wci_wslv_respF_x_wire$wset_1__SEL_3)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_advance_split_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && MUX_controlReg$write_1__SEL_2)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && MUX_wci_wslv_respF_x_wire$wset_1__SEL_3)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_advance_split_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && MUX_controlReg$write_1__SEL_2)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (MUX_controlReg$write_1__SEL_2 &&
	  MUX_wci_wslv_respF_x_wire$wset_1__SEL_3)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_advance_split_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (MUX_controlReg$write_1__SEL_2 && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO &&
	  MUX_wci_wslv_respF_x_wire$wset_1__SEL_3)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_advance_split_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && MUX_controlReg$write_1__SEL_2)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_OrE &&
	  MUX_wci_wslv_respF_x_wire$wset_1__SEL_3)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 76: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_OrE] and\n  [RL_advance_split_response] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkWSICaptureWorker4B

