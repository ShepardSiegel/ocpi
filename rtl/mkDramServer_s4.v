//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Wed Sep 28 15:54:33 EDT 2011
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wmemiS0_SResp                  O     2 reg
// wmemiS0_SRespLast              O     1 reg
// wmemiS0_SData                  O   128 reg
// wmemiS0_SCmdAccept             O     1
// wmemiS0_SDataAccept            O     1
// dram_addr                      O    13
// dram_ba                        O     3
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_reset_n                   O     1
// dram_cs_n                      O     1
// dram_odt                       O     1
// dram_cke                       O     1
// dram_dm                        O     2
// dram_ck_p                      O     1
// dram_ck_n                      O     1
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rstn                I     1 reset
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wmemiS0_MCmd                   I     3
// wmemiS0_MAddr                  I    36
// wmemiS0_MBurstLength           I    12
// wmemiS0_MData                  I   128
// wmemiS0_MDataByteEn            I    16
// dram_rdn_i                     I     1
// dram_rup_i                     I     1
// wmemiS0_MReqLast               I     1
// wmemiS0_MDataValid             I     1
// wmemiS0_MDataLast              I     1
// wmemiS0_MReset_n               I     1 reg
// dram_io_dq                    IO    16 inout
// dram_io_dqs_p                 IO     2 inout
// dram_io_dqs_n                 IO     2 inout
//
// Combinational paths from inputs to outputs:
//   (wmemiS0_MCmd,
//    wmemiS0_MAddr,
//    wmemiS0_MBurstLength,
//    wmemiS0_MReqLast) -> wmemiS0_SCmdAccept
//   (wmemiS0_MData,
//    wmemiS0_MDataByteEn,
//    wmemiS0_MDataValid,
//    wmemiS0_MDataLast) -> wmemiS0_SDataAccept
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkDramServer_s4(CLK_sys0_clk,
		       RST_N_sys0_rstn,
		       wciS0_Clk,
		       wciS0_MReset_n,

		       dram_io_dq,
		       dram_io_dqs_p,
		       dram_io_dqs_n,

		       wciS0_MCmd,

		       wciS0_MAddrSpace,

		       wciS0_MByteEn,

		       wciS0_MAddr,

		       wciS0_MData,

		       wciS0_SResp,

		       wciS0_SData,

		       wciS0_SThreadBusy,

		       wciS0_SFlag,

		       wciS0_MFlag,

		       wmemiS0_MCmd,

		       wmemiS0_MReqLast,

		       wmemiS0_MAddr,

		       wmemiS0_MBurstLength,

		       wmemiS0_MDataValid,

		       wmemiS0_MDataLast,

		       wmemiS0_MData,

		       wmemiS0_MDataByteEn,

		       wmemiS0_SResp,

		       wmemiS0_SRespLast,

		       wmemiS0_SData,

		       wmemiS0_SCmdAccept,

		       wmemiS0_SDataAccept,

		       wmemiS0_MReset_n,

		       dram_addr,

		       dram_ba,

		       dram_ras_n,

		       dram_cas_n,

		       dram_we_n,

		       dram_reset_n,

		       dram_cs_n,

		       dram_odt,

		       dram_cke,

		       dram_dm,

		       dram_ck_p,

		       dram_ck_n,

		       dram_rdn_i,

		       dram_rup_i);
  input  CLK_sys0_clk;
  input  RST_N_sys0_rstn;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  inout  [15 : 0] dram_io_dq;
  inout  [1 : 0] dram_io_dqs_p;
  inout  [1 : 0] dram_io_dqs_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // action method wmemiS0_mCmd
  input  [2 : 0] wmemiS0_MCmd;

  // action method wmemiS0_mReqLast
  input  wmemiS0_MReqLast;

  // action method wmemiS0_mAddr
  input  [35 : 0] wmemiS0_MAddr;

  // action method wmemiS0_mBurstLength
  input  [11 : 0] wmemiS0_MBurstLength;

  // action method wmemiS0_mDataValid
  input  wmemiS0_MDataValid;

  // action method wmemiS0_mDataLast
  input  wmemiS0_MDataLast;

  // action method wmemiS0_mData
  input  [127 : 0] wmemiS0_MData;

  // action method wmemiS0_mDataByteEn
  input  [15 : 0] wmemiS0_MDataByteEn;

  // value method wmemiS0_sResp
  output [1 : 0] wmemiS0_SResp;

  // value method wmemiS0_sRespLast
  output wmemiS0_SRespLast;

  // value method wmemiS0_sData
  output [127 : 0] wmemiS0_SData;

  // value method wmemiS0_sCmdAccept
  output wmemiS0_SCmdAccept;

  // value method wmemiS0_sDataAccept
  output wmemiS0_SDataAccept;

  // action method wmemiS0_mReset_n
  input  wmemiS0_MReset_n;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [2 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_reset_n
  output dram_reset_n;

  // value method dram_cs_n
  output dram_cs_n;

  // value method dram_odt
  output dram_odt;

  // value method dram_cke
  output dram_cke;

  // value method dram_dm
  output [1 : 0] dram_dm;

  // value method dram_ck_p
  output dram_ck_p;

  // value method dram_ck_n
  output dram_ck_n;

  // action method dram_rdn
  input  dram_rdn_i;

  // action method dram_rup
  input  dram_rup_i;

  // signals for module outputs
  wire [127 : 0] wmemiS0_SData;
  wire [31 : 0] wciS0_SData;
  wire [12 : 0] dram_addr;
  wire [2 : 0] dram_ba;
  wire [1 : 0] dram_dm, wciS0_SFlag, wciS0_SResp, wmemiS0_SResp;
  wire dram_cas_n,
       dram_ck_n,
       dram_ck_p,
       dram_cke,
       dram_cs_n,
       dram_odt,
       dram_ras_n,
       dram_reset_n,
       dram_we_n,
       wciS0_SThreadBusy,
       wmemiS0_SCmdAccept,
       wmemiS0_SDataAccept,
       wmemiS0_SRespLast;

  // inlined wires
  wire [145 : 0] wmemi_wmemiDh$wget;
  wire [130 : 0] wmemi_respF_x_wire$wget;
  wire [127 : 0] wmemi_Es_mData_w$wget;
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire [51 : 0] wmemi_wmemiReq$wget;
  wire [35 : 0] wmemi_Es_mAddr_w$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget;
  wire [31 : 0] wci_wci_Es_mAddr_w$wget, wci_wci_Es_mData_w$wget;
  wire [15 : 0] wmemi_Es_mDataByteEn_w$wget;
  wire [11 : 0] wmemi_Es_mBurstLength_w$wget;
  wire [7 : 0] wmemiReadInFlight_acc_v1$wget, wmemiReadInFlight_acc_v2$wget;
  wire [3 : 0] wci_wci_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wci_Es_mCmd_w$wget,
	       wci_wslv_wEdge$wget,
	       wmemi_Es_mCmd_w$wget;
  wire memc_wdfEnd$wget,
       memc_wdfEnd$whas,
       memc_wdfWren$wget,
       memc_wdfWren$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas,
       wmemiReadInFlight_acc_v1$whas,
       wmemiReadInFlight_acc_v2$whas,
       wmemi_Es_mAddr_w$whas,
       wmemi_Es_mBurstLength_w$whas,
       wmemi_Es_mCmd_w$whas,
       wmemi_Es_mDataByteEn_w$whas,
       wmemi_Es_mDataLast_w$whas,
       wmemi_Es_mDataValid_w$whas,
       wmemi_Es_mData_w$whas,
       wmemi_Es_mReqLast_w$whas,
       wmemi_cmdAccept_w$wget,
       wmemi_cmdAccept_w$whas,
       wmemi_dhAccept_w$wget,
       wmemi_dhAccept_w$whas,
       wmemi_operateD_1$wget,
       wmemi_operateD_1$whas,
       wmemi_peerIsReady_1$wget,
       wmemi_peerIsReady_1$whas,
       wmemi_respF_dequeueing$whas,
       wmemi_respF_enqueueing$whas,
       wmemi_respF_x_wire$whas,
       wmemi_wmemiDh$whas,
       wmemi_wmemiReq$whas;

  // register dbgCtrl
  reg [31 : 0] dbgCtrl;
  wire [31 : 0] dbgCtrl$D_IN;
  wire dbgCtrl$EN;

  // register dramCtrl
  reg [31 : 0] dramCtrl;
  wire [31 : 0] dramCtrl$D_IN;
  wire dramCtrl$EN;

  // register mReg
  reg [15 : 0] mReg;
  wire [15 : 0] mReg$D_IN;
  wire mReg$EN;

  // register memIsReset_isInReset
  reg memIsReset_isInReset;
  wire memIsReset_isInReset$D_IN, memIsReset_isInReset$EN;

  // register memc_afiCount
  reg [3 : 0] memc_afiCount;
  wire [3 : 0] memc_afiCount$D_IN;
  wire memc_afiCount$EN;

  // register memc_curCount
  reg [3 : 0] memc_curCount;
  wire [3 : 0] memc_curCount$D_IN;
  wire memc_curCount$EN;

  // register memc_dbg_reqCount
  reg [31 : 0] memc_dbg_reqCount;
  wire [31 : 0] memc_dbg_reqCount$D_IN;
  wire memc_dbg_reqCount$EN;

  // register memc_sysCount
  reg [3 : 0] memc_sysCount;
  wire [3 : 0] memc_sysCount$D_IN;
  wire memc_sysCount$EN;

  // register pReg
  reg [15 : 0] pReg;
  wire [15 : 0] pReg$D_IN;
  wire pReg$EN;

  // register rdReg
  reg [31 : 0] rdReg;
  wire [31 : 0] rdReg$D_IN;
  wire rdReg$EN;

  // register rdReg_1
  reg [31 : 0] rdReg_1;
  wire [31 : 0] rdReg_1$D_IN;
  wire rdReg_1$EN;

  // register rdReg_2
  reg [31 : 0] rdReg_2;
  wire [31 : 0] rdReg_2$D_IN;
  wire rdReg_2$EN;

  // register rdReg_3
  reg [31 : 0] rdReg_3;
  wire [31 : 0] rdReg_3$D_IN;
  wire rdReg_3$EN;

  // register respCount
  reg [7 : 0] respCount;
  wire [7 : 0] respCount$D_IN;
  wire respCount$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wdReg
  reg [31 : 0] wdReg;
  wire [31 : 0] wdReg$D_IN;
  wire wdReg$EN;

  // register wdReg_1
  reg [31 : 0] wdReg_1;
  wire [31 : 0] wdReg_1$D_IN;
  wire wdReg_1$EN;

  // register wdReg_2
  reg [31 : 0] wdReg_2;
  wire [31 : 0] wdReg_2$D_IN;
  wire wdReg_2$EN;

  // register wdReg_3
  reg [31 : 0] wdReg_3;
  wire [31 : 0] wdReg_3$D_IN;
  wire wdReg_3$EN;

  // register wmemiRdReq
  reg [31 : 0] wmemiRdReq;
  wire [31 : 0] wmemiRdReq$D_IN;
  wire wmemiRdReq$EN;

  // register wmemiRdResp
  reg [31 : 0] wmemiRdResp;
  wire [31 : 0] wmemiRdResp$D_IN;
  wire wmemiRdResp$EN;

  // register wmemiReadInFlight_value
  reg [7 : 0] wmemiReadInFlight_value;
  wire [7 : 0] wmemiReadInFlight_value$D_IN;
  wire wmemiReadInFlight_value$EN;

  // register wmemiWrReq
  reg [31 : 0] wmemiWrReq;
  wire [31 : 0] wmemiWrReq$D_IN;
  wire wmemiWrReq$EN;

  // register wmemi_errorSticky
  reg wmemi_errorSticky;
  wire wmemi_errorSticky$D_IN, wmemi_errorSticky$EN;

  // register wmemi_isReset_isInReset
  reg wmemi_isReset_isInReset;
  wire wmemi_isReset_isInReset$D_IN, wmemi_isReset_isInReset$EN;

  // register wmemi_operateD
  reg wmemi_operateD;
  wire wmemi_operateD$D_IN, wmemi_operateD$EN;

  // register wmemi_peerIsReady
  reg wmemi_peerIsReady;
  wire wmemi_peerIsReady$D_IN, wmemi_peerIsReady$EN;

  // register wmemi_respF_c_r
  reg [1 : 0] wmemi_respF_c_r;
  wire [1 : 0] wmemi_respF_c_r$D_IN;
  wire wmemi_respF_c_r$EN;

  // register wmemi_respF_q_0
  reg [130 : 0] wmemi_respF_q_0;
  reg [130 : 0] wmemi_respF_q_0$D_IN;
  wire wmemi_respF_q_0$EN;

  // register wmemi_respF_q_1
  reg [130 : 0] wmemi_respF_q_1;
  reg [130 : 0] wmemi_respF_q_1$D_IN;
  wire wmemi_respF_q_1$EN;

  // register wmemi_statusR
  reg [7 : 0] wmemi_statusR;
  wire [7 : 0] wmemi_statusR$D_IN;
  wire wmemi_statusR$EN;

  // register wmemi_trafficSticky
  reg wmemi_trafficSticky;
  wire wmemi_trafficSticky$D_IN, wmemi_trafficSticky$EN;

  // ports of submodule calFail
  wire calFail$dD_OUT, calFail$sD_IN, calFail$sEN;

  // ports of submodule calSuccess
  wire calSuccess$dD_OUT, calSuccess$sD_IN, calSuccess$sEN;

  // ports of submodule initDone
  wire initDone$dD_OUT, initDone$sD_IN, initDone$sEN;

  // ports of submodule lreqF
  reg [176 : 0] lreqF$sD_IN;
  wire [176 : 0] lreqF$dD_OUT;
  wire lreqF$dDEQ, lreqF$dEMPTY_N, lreqF$sENQ, lreqF$sFULL_N;

  // ports of submodule lrespF
  wire [127 : 0] lrespF$dD_OUT, lrespF$sD_IN;
  wire lrespF$dDEQ, lrespF$dEMPTY_N, lrespF$sENQ, lrespF$sFULL_N;

  // ports of submodule memIsResetCC
  wire memIsResetCC$dD_OUT, memIsResetCC$sD_IN, memIsResetCC$sEN;

  // ports of submodule memc_afiActive
  wire memc_afiActive$dD_OUT, memc_afiActive$sD_IN, memc_afiActive$sEN;

  // ports of submodule memc_drstn
  wire memc_drstn$OUT_RST_N;

  // ports of submodule memc_memc
  wire [63 : 0] memc_memc$avl_rdata, memc_memc$avl_wdata;
  wire [23 : 0] memc_memc$avl_addr;
  wire [15 : 0] memc_memc$mem_dq;
  wire [12 : 0] memc_memc$mem_a;
  wire [7 : 0] memc_memc$avl_be;
  wire [2 : 0] memc_memc$avl_size, memc_memc$mem_ba;
  wire [1 : 0] memc_memc$mem_dm, memc_memc$mem_dqs, memc_memc$mem_dqs_n;
  wire memc_memc$afi_half_clk,
       memc_memc$afi_reset_n,
       memc_memc$avl_burstbegin,
       memc_memc$avl_read_req,
       memc_memc$avl_write_req,
       memc_memc$local_cal_fail,
       memc_memc$local_cal_success,
       memc_memc$local_init_done,
       memc_memc$mem_cas_n,
       memc_memc$mem_ck,
       memc_memc$mem_ck_n,
       memc_memc$mem_cke,
       memc_memc$mem_cs_n,
       memc_memc$mem_odt,
       memc_memc$mem_ras_n,
       memc_memc$mem_reset_n,
       memc_memc$mem_we_n,
       memc_memc$oct_rdn,
       memc_memc$oct_rup;

  // ports of submodule memc_rdpF
  wire [1 : 0] memc_rdpF$D_IN;
  wire memc_rdpF$CLR, memc_rdpF$DEQ, memc_rdpF$ENQ;

  // ports of submodule memc_reqF
  wire [176 : 0] memc_reqF$D_IN;
  wire memc_reqF$CLR, memc_reqF$DEQ, memc_reqF$ENQ, memc_reqF$FULL_N;

  // ports of submodule memc_respF
  wire [127 : 0] memc_respF$D_IN, memc_respF$D_OUT;
  wire memc_respF$CLR, memc_respF$DEQ, memc_respF$EMPTY_N, memc_respF$ENQ;

  // ports of submodule memc_sysActive
  wire memc_sysActive$dD_OUT, memc_sysActive$sD_IN, memc_sysActive$sEN;

  // ports of submodule requestCount
  wire [15 : 0] requestCount$dD_OUT, requestCount$sD_IN;
  wire requestCount$sEN;

  // ports of submodule splaF
  wire [1 : 0] splaF$D_IN, splaF$D_OUT;
  wire splaF$CLR, splaF$DEQ, splaF$EMPTY_N, splaF$ENQ, splaF$FULL_N;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // ports of submodule wmemi_dhF
  wire [145 : 0] wmemi_dhF$D_IN, wmemi_dhF$D_OUT;
  wire wmemi_dhF$CLR,
       wmemi_dhF$DEQ,
       wmemi_dhF$EMPTY_N,
       wmemi_dhF$ENQ,
       wmemi_dhF$FULL_N;

  // ports of submodule wmemi_reqF
  wire [51 : 0] wmemi_reqF$D_IN, wmemi_reqF$D_OUT;
  wire wmemi_reqF$CLR,
       wmemi_reqF$DEQ,
       wmemi_reqF$EMPTY_N,
       wmemi_reqF$ENQ,
       wmemi_reqF$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_advance_response,
       WILL_FIRE_RL_getRequest,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wmemi_respF_both,
       WILL_FIRE_RL_wmemi_respF_decCtr,
       WILL_FIRE_RL_wmemi_respF_incCtr;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1;
  wire [176 : 0] MUX_lreqF$enq_1__VAL_1,
		 MUX_lreqF$enq_1__VAL_2,
		 MUX_lreqF$enq_1__VAL_3;
  wire [130 : 0] MUX_wmemi_respF_q_0$write_1__VAL_1,
		 MUX_wmemi_respF_q_0$write_1__VAL_2,
		 MUX_wmemi_respF_q_1$write_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2,
		MUX_wci_wslv_respF_q_1$write_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [7 : 0] MUX_wmemiReadInFlight_value$write_1__VAL_2;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_wmemi_respF_c_r$write_1__VAL_1,
	       MUX_wmemi_respF_c_r$write_1__VAL_2;
  wire MUX_lreqF$enq_1__SEL_1,
       MUX_lreqF$enq_1__SEL_2,
       MUX_rdReg$write_1__SEL_1,
       MUX_rdReg_1$write_1__SEL_1,
       MUX_rdReg_2$write_1__SEL_1,
       MUX_rdReg_3$write_1__SEL_1,
       MUX_splitReadInFlight$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_wci_wslv_respF_q_0$write_1__SEL_1,
       MUX_wci_wslv_respF_q_1$write_1__SEL_1,
       MUX_wci_wslv_respF_x_wire$wset_1__SEL_2,
       MUX_wmemi_respF_q_0$write_1__SEL_1,
       MUX_wmemi_respF_q_1$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h16247, v__h5097, v__h5271, v__h5415;
  reg [31 : 0] IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445,
	       g_data__h12158;
  wire [175 : 0] IF_wci_wslv_reqF_first__4_BIT_51_28_THEN_pReg__ETC___d379;
  wire [127 : 0] x1_data__h13399, x1_data__h14400;
  wire [31 : 0] dramStatus__h10800,
		g_data__h15916,
		rdat___1__h16006,
		rdat___1__h16019,
		rdat___1__h16027,
		x1_addr__h14398;
  wire [15 : 0] x1_be__h14399, x__h15956;
  wire [2 : 0] activeBits__h1445;
  wire IF_wci_wslv_reqF_first__4_BIT_51_28_THEN_lreqF_ETC___d404,
       NOT_wci_wslv_respF_c_r_1_EQ_2_0_1_AND_IF_wci_w_ETC___d340,
       lrespF_RDY_first__91_AND_NOT_splitReadInFlight_ETC___d307,
       lrespF_RDY_first__91_AND_NOT_wmemi_respF_c_r_7_ETC___d293,
       wmemi_operateD_11_AND_wmemi_peerIsReady_12_13__ETC___d269;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // value method wmemiS0_sResp
  assign wmemiS0_SResp = wmemi_respF_q_0[130:129] ;

  // value method wmemiS0_sRespLast
  assign wmemiS0_SRespLast = wmemi_respF_q_0[128] ;

  // value method wmemiS0_sData
  assign wmemiS0_SData = wmemi_respF_q_0[127:0] ;

  // value method wmemiS0_sCmdAccept
  assign wmemiS0_SCmdAccept = wmemi_cmdAccept_w$whas ;

  // value method wmemiS0_sDataAccept
  assign wmemiS0_SDataAccept = wmemi_dhAccept_w$whas ;

  // value method dram_addr
  assign dram_addr = memc_memc$mem_a ;

  // value method dram_ba
  assign dram_ba = memc_memc$mem_ba ;

  // value method dram_ras_n
  assign dram_ras_n = memc_memc$mem_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = memc_memc$mem_cas_n ;

  // value method dram_we_n
  assign dram_we_n = memc_memc$mem_we_n ;

  // value method dram_reset_n
  assign dram_reset_n = memc_memc$mem_reset_n ;

  // value method dram_cs_n
  assign dram_cs_n = memc_memc$mem_cs_n ;

  // value method dram_odt
  assign dram_odt = memc_memc$mem_odt ;

  // value method dram_cke
  assign dram_cke = memc_memc$mem_cke ;

  // value method dram_dm
  assign dram_dm = memc_memc$mem_dm ;

  // value method dram_ck_p
  assign dram_ck_p = memc_memc$mem_ck ;

  // value method dram_ck_n
  assign dram_ck_n = memc_memc$mem_ck_n ;

  // submodule calFail
  SyncBit #(.init(1'd0)) calFail(.sCLK(memc_memc$afi_half_clk),
				 .dCLK(wciS0_Clk),
				 .sRST_N(memc_memc$afi_reset_n),
				 .sD_IN(calFail$sD_IN),
				 .sEN(calFail$sEN),
				 .dD_OUT(calFail$dD_OUT));

  // submodule calSuccess
  SyncBit #(.init(1'd0)) calSuccess(.sCLK(memc_memc$afi_half_clk),
				    .dCLK(wciS0_Clk),
				    .sRST_N(memc_memc$afi_reset_n),
				    .sD_IN(calSuccess$sD_IN),
				    .sEN(calSuccess$sEN),
				    .dD_OUT(calSuccess$dD_OUT));

  // submodule initDone
  SyncBit #(.init(1'd0)) initDone(.sCLK(memc_memc$afi_half_clk),
				  .dCLK(wciS0_Clk),
				  .sRST_N(memc_memc$afi_reset_n),
				  .sD_IN(initDone$sD_IN),
				  .sEN(initDone$sEN),
				  .dD_OUT(initDone$dD_OUT));

  // submodule lreqF
  SyncFIFO #(.dataWidth(32'd177),
	     .depth(32'd2),
	     .indxWidth(32'd1)) lreqF(.sCLK(wciS0_Clk),
				      .dCLK(memc_memc$afi_half_clk),
				      .sRST_N(wciS0_MReset_n),
				      .sD_IN(lreqF$sD_IN),
				      .sENQ(lreqF$sENQ),
				      .dDEQ(lreqF$dDEQ),
				      .dD_OUT(lreqF$dD_OUT),
				      .sFULL_N(lreqF$sFULL_N),
				      .dEMPTY_N(lreqF$dEMPTY_N));

  // submodule lrespF
  SyncFIFO #(.dataWidth(32'd128),
	     .depth(32'd2),
	     .indxWidth(32'd1)) lrespF(.sCLK(memc_memc$afi_half_clk),
				       .dCLK(wciS0_Clk),
				       .sRST_N(memc_memc$afi_reset_n),
				       .sD_IN(lrespF$sD_IN),
				       .sENQ(lrespF$sENQ),
				       .dDEQ(lrespF$dDEQ),
				       .dD_OUT(lrespF$dD_OUT),
				       .sFULL_N(lrespF$sFULL_N),
				       .dEMPTY_N(lrespF$dEMPTY_N));

  // submodule memIsResetCC
  SyncBit #(.init(1'd0)) memIsResetCC(.sCLK(memc_memc$afi_half_clk),
				      .dCLK(wciS0_Clk),
				      .sRST_N(memc_memc$afi_reset_n),
				      .sD_IN(memIsResetCC$sD_IN),
				      .sEN(memIsResetCC$sEN),
				      .dD_OUT(memIsResetCC$dD_OUT));

  // submodule memc_afiActive
  SyncBit #(.init(1'd0)) memc_afiActive(.sCLK(memc_memc$afi_half_clk),
					.dCLK(wciS0_Clk),
					.sRST_N(memc_memc$afi_reset_n),
					.sD_IN(memc_afiActive$sD_IN),
					.sEN(memc_afiActive$sEN),
					.dD_OUT(memc_afiActive$dD_OUT));

  // submodule memc_drstn
  SyncResetA #(.RSTDELAY(32'd3)) memc_drstn(.CLK(CLK_sys0_clk),
					    .IN_RST_N(wciS0_MReset_n),
					    .OUT_RST_N(memc_drstn$OUT_RST_N));

  // submodule memc_memc
  ddr3_s4_uniphy memc_memc(.pll_ref_clk(CLK_sys0_clk),
			   .global_reset_n(memc_drstn$OUT_RST_N),
			   .soft_reset_n(wciS0_MReset_n),
			   .avl_addr(memc_memc$avl_addr),
			   .avl_be(memc_memc$avl_be),
			   .avl_burstbegin(memc_memc$avl_burstbegin),
			   .avl_read_req(memc_memc$avl_read_req),
			   .avl_size(memc_memc$avl_size),
			   .avl_wdata(memc_memc$avl_wdata),
			   .avl_write_req(memc_memc$avl_write_req),
			   .oct_rdn(memc_memc$oct_rdn),
			   .oct_rup(memc_memc$oct_rup),
			   .mem_a(memc_memc$mem_a),
			   .mem_ba(memc_memc$mem_ba),
			   .mem_ras_n(memc_memc$mem_ras_n),
			   .mem_cas_n(memc_memc$mem_cas_n),
			   .mem_we_n(memc_memc$mem_we_n),
			   .mem_reset_n(memc_memc$mem_reset_n),
			   .mem_cs_n(memc_memc$mem_cs_n),
			   .mem_odt(memc_memc$mem_odt),
			   .mem_cke(memc_memc$mem_cke),
			   .mem_dm(memc_memc$mem_dm),
			   .mem_ck(memc_memc$mem_ck),
			   .mem_ck_n(memc_memc$mem_ck_n),
			   .local_init_done(memc_memc$local_init_done),
			   .local_cal_success(memc_memc$local_cal_success),
			   .local_cal_fail(memc_memc$local_cal_fail),
			   .avl_ready(),
			   .avl_rdata_valid(),
			   .avl_rdata(memc_memc$avl_rdata),
			   .afi_clk(),
			   .afi_half_clk(memc_memc$afi_half_clk),
			   .afi_reset_n(memc_memc$afi_reset_n),
			   .mem_dq(dram_io_dq),
			   .mem_dqs(dram_io_dqs_p),
			   .mem_dqs_n(dram_io_dqs_n));

  // submodule memc_rdpF
  FIFO2 #(.width(32'd2),
	  .guarded(32'd1)) memc_rdpF(.RST_N(memc_memc$afi_reset_n),
				     .CLK(memc_memc$afi_half_clk),
				     .D_IN(memc_rdpF$D_IN),
				     .ENQ(memc_rdpF$ENQ),
				     .DEQ(memc_rdpF$DEQ),
				     .CLR(memc_rdpF$CLR),
				     .D_OUT(),
				     .FULL_N(),
				     .EMPTY_N());

  // submodule memc_reqF
  FIFO2 #(.width(32'd177),
	  .guarded(32'd1)) memc_reqF(.RST_N(memc_memc$afi_reset_n),
				     .CLK(memc_memc$afi_half_clk),
				     .D_IN(memc_reqF$D_IN),
				     .ENQ(memc_reqF$ENQ),
				     .DEQ(memc_reqF$DEQ),
				     .CLR(memc_reqF$CLR),
				     .D_OUT(),
				     .FULL_N(memc_reqF$FULL_N),
				     .EMPTY_N());

  // submodule memc_respF
  FIFO2 #(.width(32'd128),
	  .guarded(32'd1)) memc_respF(.RST_N(memc_memc$afi_reset_n),
				      .CLK(memc_memc$afi_half_clk),
				      .D_IN(memc_respF$D_IN),
				      .ENQ(memc_respF$ENQ),
				      .DEQ(memc_respF$DEQ),
				      .CLR(memc_respF$CLR),
				      .D_OUT(memc_respF$D_OUT),
				      .FULL_N(),
				      .EMPTY_N(memc_respF$EMPTY_N));

  // submodule memc_sysActive
  SyncBit #(.init(1'd0)) memc_sysActive(.sCLK(CLK_sys0_clk),
					.dCLK(wciS0_Clk),
					.sRST_N(RST_N_sys0_rstn),
					.sD_IN(memc_sysActive$sD_IN),
					.sEN(memc_sysActive$sEN),
					.dD_OUT(memc_sysActive$dD_OUT));

  // submodule requestCount
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) requestCount(.sCLK(memc_memc$afi_half_clk),
					    .dCLK(wciS0_Clk),
					    .sRST_N(memc_memc$afi_reset_n),
					    .sD_IN(requestCount$sD_IN),
					    .sEN(requestCount$sEN),
					    .dD_OUT(requestCount$dD_OUT),
					    .sRDY());

  // submodule splaF
  FIFO2 #(.width(32'd2), .guarded(32'd1)) splaF(.RST_N(wciS0_MReset_n),
						.CLK(wciS0_Clk),
						.D_IN(splaF$D_IN),
						.ENQ(splaF$ENQ),
						.DEQ(splaF$DEQ),
						.CLR(splaF$CLR),
						.D_OUT(splaF$D_OUT),
						.FULL_N(splaF$FULL_N),
						.EMPTY_N(splaF$EMPTY_N));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // submodule wmemi_dhF
  FIFO2 #(.width(32'd146), .guarded(32'd1)) wmemi_dhF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(wmemi_dhF$D_IN),
						      .ENQ(wmemi_dhF$ENQ),
						      .DEQ(wmemi_dhF$DEQ),
						      .CLR(wmemi_dhF$CLR),
						      .D_OUT(wmemi_dhF$D_OUT),
						      .FULL_N(wmemi_dhF$FULL_N),
						      .EMPTY_N(wmemi_dhF$EMPTY_N));

  // submodule wmemi_reqF
  FIFO2 #(.width(32'd52), .guarded(32'd1)) wmemi_reqF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(wmemi_reqF$D_IN),
						      .ENQ(wmemi_reqF$ENQ),
						      .DEQ(wmemi_reqF$DEQ),
						      .CLR(wmemi_reqF$CLR),
						      .D_OUT(wmemi_reqF$D_OUT),
						      .FULL_N(wmemi_reqF$FULL_N),
						      .EMPTY_N(wmemi_reqF$EMPTY_N));

  // rule RL_getRequest
  assign WILL_FIRE_RL_getRequest =
	     lreqF$sFULL_N &&
	     wmemi_operateD_11_AND_wmemi_peerIsReady_12_13__ETC___d269 &&
	     !wci_wslv_wci_cfwr_pw$whas &&
	     !wci_wslv_wci_cfrd_pw$whas ;

  // rule RL_advance_response
  assign WILL_FIRE_RL_advance_response =
	     lrespF$dEMPTY_N &&
	     lrespF_RDY_first__91_AND_NOT_splitReadInFlight_ETC___d307 &&
	     !wci_wslv_wci_cfwr_pw$whas &&
	     wmemiReadInFlight_value == 8'd0 &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wci_wslv_reqF$EMPTY_N &&
	     NOT_wci_wslv_respF_c_r_1_EQ_2_0_1_AND_IF_wci_w_ETC___d340 &&
	     wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wci_wslv_reqF$EMPTY_N &&
	     IF_wci_wslv_reqF_first__4_BIT_51_28_THEN_lreqF_ETC___d404 &&
	     wci_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign WILL_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_wmemi_respF_incCtr
  assign WILL_FIRE_RL_wmemi_respF_incCtr =
	     ((wmemi_respF_c_r == 2'd0) ?
		wmemi_respF_enqueueing$whas :
		wmemi_respF_c_r != 2'd1 || wmemi_respF_enqueueing$whas) &&
	     wmemi_respF_enqueueing$whas &&
	     !(wmemi_respF_c_r != 2'd0) ;

  // rule RL_wmemi_respF_decCtr
  assign WILL_FIRE_RL_wmemi_respF_decCtr =
	     wmemi_respF_c_r != 2'd0 && !wmemi_respF_enqueueing$whas ;

  // rule RL_wmemi_respF_both
  assign WILL_FIRE_RL_wmemi_respF_both =
	     ((wmemi_respF_c_r == 2'd1) ?
		wmemi_respF_enqueueing$whas :
		wmemi_respF_c_r != 2'd2 || wmemi_respF_enqueueing$whas) &&
	     wmemi_respF_c_r != 2'd0 &&
	     wmemi_respF_enqueueing$whas ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;

  // rule RL_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;

  // rule RL_wci_wslv_respF_both
  assign WILL_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;

  // inputs to muxes for submodule ports
  assign MUX_lreqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF$D_OUT[51] ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h54 ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h58) ;
  assign MUX_lreqF$enq_1__SEL_2 =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[51] ;
  assign MUX_rdReg$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h80 ;
  assign MUX_rdReg_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h84 ;
  assign MUX_rdReg_2$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h88 ;
  assign MUX_rdReg_3$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h8C ;
  assign MUX_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ;
  assign MUX_wmemi_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd0 ;
  assign MUX_wmemi_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd1 ;
  assign MUX_lreqF$enq_1__VAL_1 =
	     { !wci_wslv_reqF$D_OUT[51] &&
	       wci_wslv_reqF$D_OUT[39:32] != 8'h54,
	       IF_wci_wslv_reqF_first__4_BIT_51_28_THEN_pReg__ETC___d379 } ;
  assign MUX_lreqF$enq_1__VAL_2 =
	     { 1'd1,
	       x1_addr__h14398,
	       144'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_lreqF$enq_1__VAL_3 =
	     { wmemi_reqF$D_OUT[51:49] != 3'd1,
	       (wmemi_reqF$D_OUT[51:49] == 3'd1) ?
		 { wmemi_reqF$D_OUT[43:12],
		   wmemi_dhF$D_OUT[15:0],
		   wmemi_dhF$D_OUT[143:16] } :
		 { wmemi_reqF$D_OUT[43:0],
		   132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } } ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_2 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  always@(MUX_splitReadInFlight$write_1__SEL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__SEL_2 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_splitReadInFlight$write_1__SEL_1:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      MUX_wci_wslv_respF_x_wire$wset_1__SEL_2:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       wci_wslv_respF_q_1 ;
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 = { 2'd1, g_data__h12158 } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 = { 2'd1, g_data__h15916 } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wmemiReadInFlight_value$write_1__VAL_2 =
	     wmemiReadInFlight_value +
	     (wmemiReadInFlight_acc_v1$whas ? 8'd1 : 8'd0) +
	     (wmemi_respF_enqueueing$whas ? 8'd255 : 8'd0) ;
  assign MUX_wmemi_respF_c_r$write_1__VAL_1 = wmemi_respF_c_r + 2'd1 ;
  assign MUX_wmemi_respF_c_r$write_1__VAL_2 = wmemi_respF_c_r - 2'd1 ;
  assign MUX_wmemi_respF_q_0$write_1__VAL_1 = { 3'd3, lrespF$dD_OUT } ;
  assign MUX_wmemi_respF_q_0$write_1__VAL_2 =
	     (wmemi_respF_c_r == 2'd1) ?
	       MUX_wmemi_respF_q_0$write_1__VAL_1 :
	       wmemi_respF_q_1 ;
  assign MUX_wmemi_respF_q_1$write_1__VAL_2 =
	     (wmemi_respF_c_r == 2'd2) ?
	       MUX_wmemi_respF_q_0$write_1__VAL_1 :
	       131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;

  // inlined wires
  assign memc_wdfWren$wget = 1'b0 ;
  assign memc_wdfWren$whas = 1'b0 ;
  assign memc_wdfEnd$wget = 1'b0 ;
  assign memc_wdfEnd$whas = 1'b0 ;
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_1 ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wmemi_wmemiReq$wget =
	     { wmemiS0_MCmd,
	       wmemiS0_MReqLast,
	       wmemiS0_MAddr,
	       wmemiS0_MBurstLength } ;
  assign wmemi_wmemiReq$whas = 1'd1 ;
  assign wmemi_wmemiDh$wget =
	     { wmemiS0_MDataValid,
	       wmemiS0_MDataLast,
	       wmemiS0_MData,
	       wmemiS0_MDataByteEn } ;
  assign wmemi_wmemiDh$whas = 1'd1 ;
  assign wmemi_cmdAccept_w$wget = 1'd1 ;
  assign wmemi_cmdAccept_w$whas =
	     wmemi_reqF$FULL_N && wmemi_operateD && wmemi_peerIsReady &&
	     wmemi_wmemiReq$wget[51:49] != 3'd0 &&
	     wmemi_reqF$FULL_N ;
  assign wmemi_dhAccept_w$wget = 1'd1 ;
  assign wmemi_dhAccept_w$whas =
	     wmemi_dhF$FULL_N && wmemi_operateD && wmemi_peerIsReady &&
	     wmemi_wmemiDh$wget[145] &&
	     wmemi_dhF$FULL_N ;
  assign wmemi_respF_x_wire$wget = MUX_wmemi_respF_q_0$write_1__VAL_1 ;
  assign wmemi_respF_x_wire$whas = wmemi_respF_enqueueing$whas ;
  assign wmemi_operateD_1$wget = 1'd1 ;
  assign wmemi_operateD_1$whas = wci_wslv_cState == 3'd2 ;
  assign wmemi_peerIsReady_1$wget = 1'd1 ;
  assign wmemi_peerIsReady_1$whas = wmemiS0_MReset_n ;
  assign wmemiReadInFlight_acc_v1$wget = 8'd1 ;
  assign wmemiReadInFlight_acc_v1$whas =
	     WILL_FIRE_RL_getRequest && wmemi_reqF$D_OUT[51:49] != 3'd1 ;
  assign wmemiReadInFlight_acc_v2$wget = 8'd255 ;
  assign wmemiReadInFlight_acc_v2$whas = wmemi_respF_enqueueing$whas ;
  assign wmemi_Es_mCmd_w$wget = wmemiS0_MCmd ;
  assign wmemi_Es_mCmd_w$whas = 1'd1 ;
  assign wmemi_Es_mAddr_w$wget = wmemiS0_MAddr ;
  assign wmemi_Es_mAddr_w$whas = 1'd1 ;
  assign wmemi_Es_mBurstLength_w$wget = wmemiS0_MBurstLength ;
  assign wmemi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wmemi_Es_mData_w$wget = wmemiS0_MData ;
  assign wmemi_Es_mData_w$whas = 1'd1 ;
  assign wmemi_Es_mDataByteEn_w$wget = wmemiS0_MDataByteEn ;
  assign wmemi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign wci_wslv_reqF_r_enq$whas = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wmemi_respF_enqueueing$whas =
	     lrespF$dEMPTY_N &&
	     lrespF_RDY_first__91_AND_NOT_wmemi_respF_c_r_7_ETC___d293 &&
	     (wmemiReadInFlight_value ^ 8'h80) > 8'd128 ;
  assign wmemi_respF_dequeueing$whas = wmemi_respF_c_r != 2'd0 ;
  assign wmemi_Es_mReqLast_w$whas = wmemiS0_MReqLast ;
  assign wmemi_Es_mDataValid_w$whas = wmemiS0_MDataValid ;
  assign wmemi_Es_mDataLast_w$whas = wmemiS0_MDataLast ;

  // register dbgCtrl
  assign dbgCtrl$D_IN = 32'h0 ;
  assign dbgCtrl$EN = 1'b0 ;

  // register dramCtrl
  assign dramCtrl$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign dramCtrl$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;

  // register mReg
  assign mReg$D_IN = wci_wslv_reqF$D_OUT[15:0] ;
  assign mReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h5C ;

  // register memIsReset_isInReset
  assign memIsReset_isInReset$D_IN = 1'd0 ;
  assign memIsReset_isInReset$EN = memIsReset_isInReset ;

  // register memc_afiCount
  assign memc_afiCount$D_IN = memc_afiCount + 4'd1 ;
  assign memc_afiCount$EN = 1'd1 ;

  // register memc_curCount
  assign memc_curCount$D_IN = memc_curCount + 4'd1 ;
  assign memc_curCount$EN = 1'd1 ;

  // register memc_dbg_reqCount
  assign memc_dbg_reqCount$D_IN = memc_dbg_reqCount + 32'd1 ;
  assign memc_dbg_reqCount$EN =
	     memc_memc$local_init_done && memc_memc$local_cal_success ;

  // register memc_sysCount
  assign memc_sysCount$D_IN = memc_sysCount + 4'd1 ;
  assign memc_sysCount$EN = 1'd1 ;

  // register pReg
  assign pReg$D_IN = wci_wslv_reqF$D_OUT[15:0] ;
  assign pReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h50 ;

  // register rdReg
  assign rdReg$D_IN =
	     MUX_rdReg$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[31:0] ;
  assign rdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h80 ||
	     WILL_FIRE_RL_advance_response ;

  // register rdReg_1
  assign rdReg_1$D_IN =
	     MUX_rdReg_1$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[63:32] ;
  assign rdReg_1$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h84 ||
	     WILL_FIRE_RL_advance_response ;

  // register rdReg_2
  assign rdReg_2$D_IN =
	     MUX_rdReg_2$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[95:64] ;
  assign rdReg_2$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h88 ||
	     WILL_FIRE_RL_advance_response ;

  // register rdReg_3
  assign rdReg_3$D_IN =
	     MUX_rdReg_3$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[127:96] ;
  assign rdReg_3$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h8C ||
	     WILL_FIRE_RL_advance_response ;

  // register respCount
  assign respCount$D_IN = respCount + 8'd1 ;
  assign respCount$EN = WILL_FIRE_RL_advance_response ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = !MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splitReadInFlight$EN =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[51] ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     !MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ||
	     MUX_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(MUX_wci_wslv_respF_q_0$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_0$write_1__SEL_1:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(MUX_wci_wslv_respF_q_1$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_1$write_1__SEL_1:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wdReg
  assign wdReg$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign wdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h60 ;

  // register wdReg_1
  assign wdReg_1$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign wdReg_1$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h64 ;

  // register wdReg_2
  assign wdReg_2$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign wdReg_2$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h68 ;

  // register wdReg_3
  assign wdReg_3$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign wdReg_3$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_wslv_reqF$D_OUT[51] &&
	     wci_wslv_reqF$D_OUT[39:32] == 8'h6C ;

  // register wmemiRdReq
  assign wmemiRdReq$D_IN = wmemiRdReq + 32'd1 ;
  assign wmemiRdReq$EN = wmemiReadInFlight_acc_v1$whas ;

  // register wmemiRdResp
  assign wmemiRdResp$D_IN = wmemiRdResp + 32'd1 ;
  assign wmemiRdResp$EN = wmemi_respF_enqueueing$whas ;

  // register wmemiReadInFlight_value
  assign wmemiReadInFlight_value$D_IN =
	     WILL_FIRE_RL_wci_ctrl_IsO ?
	       8'd0 :
	       MUX_wmemiReadInFlight_value$write_1__VAL_2 ;
  assign wmemiReadInFlight_value$EN = 1'b1 ;

  // register wmemiWrReq
  assign wmemiWrReq$D_IN = wmemiWrReq + 32'd1 ;
  assign wmemiWrReq$EN =
	     WILL_FIRE_RL_getRequest && wmemi_reqF$D_OUT[51:49] == 3'd1 ;

  // register wmemi_errorSticky
  assign wmemi_errorSticky$D_IN = 1'b0 ;
  assign wmemi_errorSticky$EN = 1'b0 ;

  // register wmemi_isReset_isInReset
  assign wmemi_isReset_isInReset$D_IN = 1'd0 ;
  assign wmemi_isReset_isInReset$EN = wmemi_isReset_isInReset ;

  // register wmemi_operateD
  assign wmemi_operateD$D_IN = wci_wslv_cState == 3'd2 ;
  assign wmemi_operateD$EN = 1'd1 ;

  // register wmemi_peerIsReady
  assign wmemi_peerIsReady$D_IN = wmemiS0_MReset_n ;
  assign wmemi_peerIsReady$EN = 1'd1 ;

  // register wmemi_respF_c_r
  assign wmemi_respF_c_r$D_IN =
	     WILL_FIRE_RL_wmemi_respF_incCtr ?
	       MUX_wmemi_respF_c_r$write_1__VAL_1 :
	       MUX_wmemi_respF_c_r$write_1__VAL_2 ;
  assign wmemi_respF_c_r$EN =
	     WILL_FIRE_RL_wmemi_respF_incCtr ||
	     WILL_FIRE_RL_wmemi_respF_decCtr ;

  // register wmemi_respF_q_0
  always@(MUX_wmemi_respF_q_0$write_1__SEL_1 or
	  MUX_wmemi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wmemi_respF_both or
	  MUX_wmemi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wmemi_respF_decCtr or wmemi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_respF_q_0$write_1__SEL_1:
	  wmemi_respF_q_0$D_IN = MUX_wmemi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wmemi_respF_both:
	  wmemi_respF_q_0$D_IN = MUX_wmemi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmemi_respF_decCtr: wmemi_respF_q_0$D_IN = wmemi_respF_q_1;
      default: wmemi_respF_q_0$D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_respF_q_0$EN =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wmemi_respF_both ||
	     WILL_FIRE_RL_wmemi_respF_decCtr ;

  // register wmemi_respF_q_1
  always@(MUX_wmemi_respF_q_1$write_1__SEL_1 or
	  MUX_wmemi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wmemi_respF_both or
	  MUX_wmemi_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wmemi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_respF_q_1$write_1__SEL_1:
	  wmemi_respF_q_1$D_IN = MUX_wmemi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wmemi_respF_both:
	  wmemi_respF_q_1$D_IN = MUX_wmemi_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wmemi_respF_decCtr:
	  wmemi_respF_q_1$D_IN = 131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: wmemi_respF_q_1$D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_respF_q_1$EN =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wmemi_respF_both ||
	     WILL_FIRE_RL_wmemi_respF_decCtr ;

  // register wmemi_statusR
  assign wmemi_statusR$D_IN =
	     { wmemi_isReset_isInReset,
	       !wmemi_peerIsReady,
	       !wmemi_operateD,
	       wmemi_errorSticky,
	       3'd0,
	       wmemi_trafficSticky } ;
  assign wmemi_statusR$EN = 1'd1 ;

  // register wmemi_trafficSticky
  assign wmemi_trafficSticky$D_IN = 1'd1 ;
  assign wmemi_trafficSticky$EN = wmemi_cmdAccept_w$whas ;

  // submodule calFail
  assign calFail$sD_IN = memc_memc$local_cal_fail ;
  assign calFail$sEN = 1'd1 ;

  // submodule calSuccess
  assign calSuccess$sD_IN = memc_memc$local_cal_success ;
  assign calSuccess$sEN = 1'd1 ;

  // submodule initDone
  assign initDone$sD_IN = memc_memc$local_init_done ;
  assign initDone$sEN = 1'd1 ;

  // submodule lreqF
  always@(MUX_lreqF$enq_1__SEL_1 or
	  MUX_lreqF$enq_1__VAL_1 or
	  MUX_lreqF$enq_1__SEL_2 or
	  MUX_lreqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_getRequest or MUX_lreqF$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lreqF$enq_1__SEL_1: lreqF$sD_IN = MUX_lreqF$enq_1__VAL_1;
      MUX_lreqF$enq_1__SEL_2: lreqF$sD_IN = MUX_lreqF$enq_1__VAL_2;
      WILL_FIRE_RL_getRequest: lreqF$sD_IN = MUX_lreqF$enq_1__VAL_3;
      default: lreqF$sD_IN =
		   177'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lreqF$sENQ =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF$D_OUT[51] ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h54 ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h58) ||
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_getRequest ;
  assign lreqF$dDEQ = lreqF$dEMPTY_N && memc_reqF$FULL_N ;

  // submodule lrespF
  assign lrespF$sD_IN = memc_respF$D_OUT ;
  assign lrespF$sENQ = lrespF$sFULL_N && memc_respF$EMPTY_N ;
  assign lrespF$dDEQ =
	     lrespF$dEMPTY_N &&
	     lrespF_RDY_first__91_AND_NOT_wmemi_respF_c_r_7_ETC___d293 &&
	     (wmemiReadInFlight_value ^ 8'h80) > 8'd128 ||
	     WILL_FIRE_RL_advance_response ;

  // submodule memIsResetCC
  assign memIsResetCC$sD_IN = memIsReset_isInReset ;
  assign memIsResetCC$sEN = 1'd1 ;

  // submodule memc_afiActive
  assign memc_afiActive$sD_IN = memc_afiCount[3] ;
  assign memc_afiActive$sEN = 1'd1 ;

  // submodule memc_memc
  assign memc_memc$avl_addr = { 20'd0, memc_afiCount } ;
  assign memc_memc$avl_be = 8'd0 ;
  assign memc_memc$avl_burstbegin = 1'd0 ;
  assign memc_memc$avl_read_req =
	     memc_memc$local_init_done && memc_memc$local_cal_success &&
	     memc_afiCount == 4'd0 ;
  assign memc_memc$avl_size = 3'd0 ;
  assign memc_memc$avl_wdata = memc_memc$avl_rdata ;
  assign memc_memc$avl_write_req =
	     memc_memc$local_init_done && memc_memc$local_cal_success &&
	     memc_afiCount == 4'd7 ;
  assign memc_memc$oct_rdn = dram_rdn_i ;
  assign memc_memc$oct_rup = dram_rup_i ;

  // submodule memc_rdpF
  assign memc_rdpF$D_IN = 2'h0 ;
  assign memc_rdpF$ENQ = 1'b0 ;
  assign memc_rdpF$DEQ = 1'b0 ;
  assign memc_rdpF$CLR = 1'b0 ;

  // submodule memc_reqF
  assign memc_reqF$D_IN = lreqF$dD_OUT ;
  assign memc_reqF$ENQ = lreqF$dEMPTY_N && memc_reqF$FULL_N ;
  assign memc_reqF$DEQ = 1'b0 ;
  assign memc_reqF$CLR = 1'b0 ;

  // submodule memc_respF
  assign memc_respF$D_IN = 128'h0 ;
  assign memc_respF$ENQ = 1'b0 ;
  assign memc_respF$DEQ = lrespF$sFULL_N && memc_respF$EMPTY_N ;
  assign memc_respF$CLR = 1'b0 ;

  // submodule memc_sysActive
  assign memc_sysActive$sD_IN = memc_sysCount[3] ;
  assign memc_sysActive$sEN = 1'd1 ;

  // submodule requestCount
  assign requestCount$sD_IN = 16'h0 ;
  assign requestCount$sEN = 1'b0 ;

  // submodule splaF
  assign splaF$D_IN = wci_wslv_reqF$D_OUT[35:34] ;
  assign splaF$ENQ = MUX_lreqF$enq_1__SEL_2 ;
  assign splaF$DEQ = MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splaF$CLR = 1'b0 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // submodule wmemi_dhF
  assign wmemi_dhF$D_IN = wmemi_wmemiDh$wget ;
  assign wmemi_dhF$ENQ = wmemi_dhAccept_w$whas ;
  assign wmemi_dhF$DEQ =
	     WILL_FIRE_RL_getRequest && wmemi_reqF$D_OUT[51:49] == 3'd1 ;
  assign wmemi_dhF$CLR = 1'b0 ;

  // submodule wmemi_reqF
  assign wmemi_reqF$D_IN = wmemi_wmemiReq$wget ;
  assign wmemi_reqF$ENQ = wmemi_cmdAccept_w$whas ;
  assign wmemi_reqF$DEQ = WILL_FIRE_RL_getRequest ;
  assign wmemi_reqF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wci_wslv_reqF_first__4_BIT_51_28_THEN_lreqF_ETC___d404 =
	     wci_wslv_reqF$D_OUT[51] ?
	       lreqF$sFULL_N && splaF$FULL_N :
	       wci_wslv_respF_c_r != 2'd2 ;
  assign IF_wci_wslv_reqF_first__4_BIT_51_28_THEN_pReg__ETC___d379 =
	     wci_wslv_reqF$D_OUT[51] ?
	       { x1_addr__h14398, x1_be__h14399, x1_data__h14400 } :
	       { wci_wslv_reqF$D_OUT[31:0], mReg, x1_data__h13399 } ;
  assign NOT_wci_wslv_respF_c_r_1_EQ_2_0_1_AND_IF_wci_w_ETC___d340 =
	     wci_wslv_respF_c_r != 2'd2 &&
	     (wci_wslv_reqF$D_OUT[51] ?
		lreqF$sFULL_N :
		((wci_wslv_reqF$D_OUT[39:32] == 8'h54) ?
		   lreqF$sFULL_N :
		   wci_wslv_reqF$D_OUT[39:32] != 8'h58 || lreqF$sFULL_N)) ;
  assign activeBits__h1445 =
	     { memc_curCount[3],
	       memc_sysActive$dD_OUT,
	       memc_afiActive$dD_OUT } ;
  assign dramStatus__h10800 = { 16'd0, x__h15956 } ;
  assign g_data__h15916 =
	     wci_wslv_reqF$D_OUT[51] ?
	       32'd0 :
	       IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 ;
  assign lrespF_RDY_first__91_AND_NOT_splitReadInFlight_ETC___d307 =
	     lrespF$dEMPTY_N &&
	     (!splitReadInFlight ||
	      wci_wslv_respF_c_r != 2'd2 && splaF$EMPTY_N) ;
  assign lrespF_RDY_first__91_AND_NOT_wmemi_respF_c_r_7_ETC___d293 =
	     lrespF$dEMPTY_N && wmemi_respF_c_r != 2'd2 && wmemi_operateD &&
	     wmemi_peerIsReady ;
  assign rdat___1__h16006 = { 16'd0, requestCount$dD_OUT } ;
  assign rdat___1__h16019 = { 16'd0, pReg } ;
  assign rdat___1__h16027 = { 16'd0, mReg } ;
  assign wmemi_operateD_11_AND_wmemi_peerIsReady_12_13__ETC___d269 =
	     wmemi_operateD && wmemi_peerIsReady && wmemi_reqF$EMPTY_N &&
	     (wmemi_reqF$D_OUT[51:49] != 3'd1 || wmemi_dhF$EMPTY_N) ;
  assign x1_addr__h14398 = { pReg[12:0], wci_wslv_reqF$D_OUT[50:36], 4'd0 } ;
  assign x1_be__h14399 =
	     { (wci_wslv_reqF$D_OUT[35:34] == 2'd3) ? 4'hF : 4'h0,
	       (wci_wslv_reqF$D_OUT[35:34] == 2'd2) ? 4'hF : 4'h0,
	       (wci_wslv_reqF$D_OUT[35:34] == 2'd1) ? 4'hF : 4'h0,
	       (wci_wslv_reqF$D_OUT[35:34] == 2'd0) ? 4'hF : 4'h0 } ;
  assign x1_data__h13399 = { wdReg_3, wdReg_2, wdReg_1, wdReg } ;
  assign x1_data__h14400 = {4{wci_wslv_reqF$D_OUT[31:0]}} ;
  assign x__h15956 =
	     { respCount,
	       1'h0,
	       activeBits__h1445,
	       memIsResetCC$dD_OUT,
	       calFail$dD_OUT,
	       calSuccess$dD_OUT,
	       initDone$dD_OUT } ;
  always@(splaF$D_OUT or lrespF$dD_OUT)
  begin
    case (splaF$D_OUT)
      2'd0: g_data__h12158 = lrespF$dD_OUT[31:0];
      2'd1: g_data__h12158 = lrespF$dD_OUT[63:32];
      2'd2: g_data__h12158 = lrespF$dD_OUT[95:64];
      2'd3: g_data__h12158 = lrespF$dD_OUT[127:96];
    endcase
  end
  always@(wci_wslv_reqF$D_OUT or
	  dramStatus__h10800 or
	  dramCtrl or
	  rdat___1__h16006 or
	  rdat___1__h16019 or
	  rdat___1__h16027 or
	  wdReg or
	  wdReg_1 or
	  wdReg_2 or wdReg_3 or rdReg or rdReg_1 or rdReg_2 or rdReg_3)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 =
	      dramStatus__h10800;
      8'h04:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 =
	      dramCtrl;
      8'h48:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 =
	      rdat___1__h16006;
      8'h4C:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 =
	      32'hC0DE4000;
      8'h50:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 =
	      rdat___1__h16019;
      8'h5C:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 =
	      rdat___1__h16027;
      8'h60:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = wdReg;
      8'h64:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = wdReg_1;
      8'h68:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = wdReg_2;
      8'h6C:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = wdReg_3;
      8'h80:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = rdReg;
      8'h84:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = rdReg_1;
      8'h88:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = rdReg_2;
      8'h8C:
	  IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 = rdReg_3;
      default: IF_wci_wslv_reqF_first__4_BITS_39_TO_32_29_EQ__ETC___d445 =
		   32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        dramCtrl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	memc_curCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	respCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wdReg_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wdReg_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wdReg_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiRdReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiRdResp <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiReadInFlight_value <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wmemiWrReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (dramCtrl$EN) dramCtrl <= `BSV_ASSIGNMENT_DELAY dramCtrl$D_IN;
	if (mReg$EN) mReg <= `BSV_ASSIGNMENT_DELAY mReg$D_IN;
	if (memc_curCount$EN)
	  memc_curCount <= `BSV_ASSIGNMENT_DELAY memc_curCount$D_IN;
	if (pReg$EN) pReg <= `BSV_ASSIGNMENT_DELAY pReg$D_IN;
	if (rdReg$EN) rdReg <= `BSV_ASSIGNMENT_DELAY rdReg$D_IN;
	if (rdReg_1$EN) rdReg_1 <= `BSV_ASSIGNMENT_DELAY rdReg_1$D_IN;
	if (rdReg_2$EN) rdReg_2 <= `BSV_ASSIGNMENT_DELAY rdReg_2$D_IN;
	if (rdReg_3$EN) rdReg_3 <= `BSV_ASSIGNMENT_DELAY rdReg_3$D_IN;
	if (respCount$EN) respCount <= `BSV_ASSIGNMENT_DELAY respCount$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wdReg$EN) wdReg <= `BSV_ASSIGNMENT_DELAY wdReg$D_IN;
	if (wdReg_1$EN) wdReg_1 <= `BSV_ASSIGNMENT_DELAY wdReg_1$D_IN;
	if (wdReg_2$EN) wdReg_2 <= `BSV_ASSIGNMENT_DELAY wdReg_2$D_IN;
	if (wdReg_3$EN) wdReg_3 <= `BSV_ASSIGNMENT_DELAY wdReg_3$D_IN;
	if (wmemiRdReq$EN)
	  wmemiRdReq <= `BSV_ASSIGNMENT_DELAY wmemiRdReq$D_IN;
	if (wmemiRdResp$EN)
	  wmemiRdResp <= `BSV_ASSIGNMENT_DELAY wmemiRdResp$D_IN;
	if (wmemiReadInFlight_value$EN)
	  wmemiReadInFlight_value <= `BSV_ASSIGNMENT_DELAY
	      wmemiReadInFlight_value$D_IN;
	if (wmemiWrReq$EN)
	  wmemiWrReq <= `BSV_ASSIGNMENT_DELAY wmemiWrReq$D_IN;
	if (wmemi_errorSticky$EN)
	  wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY wmemi_errorSticky$D_IN;
	if (wmemi_operateD$EN)
	  wmemi_operateD <= `BSV_ASSIGNMENT_DELAY wmemi_operateD$D_IN;
	if (wmemi_peerIsReady$EN)
	  wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY wmemi_peerIsReady$D_IN;
	if (wmemi_respF_c_r$EN)
	  wmemi_respF_c_r <= `BSV_ASSIGNMENT_DELAY wmemi_respF_c_r$D_IN;
	if (wmemi_respF_q_0$EN)
	  wmemi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wmemi_respF_q_0$D_IN;
	if (wmemi_respF_q_1$EN)
	  wmemi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wmemi_respF_q_1$D_IN;
	if (wmemi_trafficSticky$EN)
	  wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wmemi_trafficSticky$D_IN;
      end
    if (wmemi_statusR$EN)
      wmemi_statusR <= `BSV_ASSIGNMENT_DELAY wmemi_statusR$D_IN;
  end

  always@(posedge CLK_sys0_clk)
  begin
    if (!RST_N_sys0_rstn)
      begin
        memc_sysCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (memc_sysCount$EN)
	  memc_sysCount <= `BSV_ASSIGNMENT_DELAY memc_sysCount$D_IN;
      end
  end

  always@(posedge memc_memc$afi_half_clk)
  begin
    if (!memc_memc$afi_reset_n)
      begin
        dbgCtrl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	memc_afiCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	memc_dbg_reqCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dbgCtrl$EN) dbgCtrl <= `BSV_ASSIGNMENT_DELAY dbgCtrl$D_IN;
	if (memc_afiCount$EN)
	  memc_afiCount <= `BSV_ASSIGNMENT_DELAY memc_afiCount$D_IN;
	if (memc_dbg_reqCount$EN)
	  memc_dbg_reqCount <= `BSV_ASSIGNMENT_DELAY memc_dbg_reqCount$D_IN;
      end
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wmemi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
      if (wmemi_isReset_isInReset$EN)
	wmemi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wmemi_isReset_isInReset$D_IN;
    end

  always@(posedge memc_memc$afi_half_clk or negedge memc_memc$afi_reset_n)
  if (!memc_memc$afi_reset_n)
    begin
      memIsReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (memIsReset_isInReset$EN)
	memIsReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    memIsReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dbgCtrl = 32'hAAAAAAAA;
    dramCtrl = 32'hAAAAAAAA;
    mReg = 16'hAAAA;
    memIsReset_isInReset = 1'h0;
    memc_afiCount = 4'hA;
    memc_curCount = 4'hA;
    memc_dbg_reqCount = 32'hAAAAAAAA;
    memc_sysCount = 4'hA;
    pReg = 16'hAAAA;
    rdReg = 32'hAAAAAAAA;
    rdReg_1 = 32'hAAAAAAAA;
    rdReg_2 = 32'hAAAAAAAA;
    rdReg_3 = 32'hAAAAAAAA;
    respCount = 8'hAA;
    splitReadInFlight = 1'h0;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wdReg = 32'hAAAAAAAA;
    wdReg_1 = 32'hAAAAAAAA;
    wdReg_2 = 32'hAAAAAAAA;
    wdReg_3 = 32'hAAAAAAAA;
    wmemiRdReq = 32'hAAAAAAAA;
    wmemiRdResp = 32'hAAAAAAAA;
    wmemiReadInFlight_value = 8'hAA;
    wmemiWrReq = 32'hAAAAAAAA;
    wmemi_errorSticky = 1'h0;
    wmemi_isReset_isInReset = 1'h0;
    wmemi_operateD = 1'h0;
    wmemi_peerIsReady = 1'h0;
    wmemi_respF_c_r = 2'h2;
    wmemi_respF_q_0 = 131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemi_respF_q_1 = 131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemi_statusR = 8'hAA;
    wmemi_trafficSticky = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h5097 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h5097,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	begin
	  v__h16247 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting DramWorker dramCtrl:%0x",
		 v__h16247,
		 dramCtrl);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_advance_response] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_advance_response] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_advance_response] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_advance_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_advance_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/DramServer_s4.bsv\", line 130, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h5415 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h5415,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h5271 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h5271,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkDramServer_s4

