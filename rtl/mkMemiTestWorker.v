//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Mon Jan 27 11:00:25 EST 2014
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wmemiM0_MCmd                   O     3 reg
// wmemiM0_MReqLast               O     1 reg
// wmemiM0_MAddr                  O    36 reg
// wmemiM0_MBurstLength           O    12 reg
// wmemiM0_MDataValid             O     1 reg
// wmemiM0_MDataLast              O     1 reg
// wmemiM0_MData                  O   128 reg
// wmemiM0_MDataByteEn            O    16 reg
// wmemiM0_MReset_n               O     1
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wmemiM0_SResp                  I     2
// wmemiM0_SData                  I   128
// wmemiM0_SRespLast              I     1
// wmemiM0_SCmdAccept             I     1
// wmemiM0_SDataAccept            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMemiTestWorker(wciS0_Clk,
			wciS0_MReset_n,

			wciS0_MCmd,

			wciS0_MAddrSpace,

			wciS0_MByteEn,

			wciS0_MAddr,

			wciS0_MData,

			wciS0_SResp,

			wciS0_SData,

			wciS0_SThreadBusy,

			wciS0_SFlag,

			wciS0_MFlag,

			wmemiM0_MCmd,

			wmemiM0_MReqLast,

			wmemiM0_MAddr,

			wmemiM0_MBurstLength,

			wmemiM0_MDataValid,

			wmemiM0_MDataLast,

			wmemiM0_MData,

			wmemiM0_MDataByteEn,

			wmemiM0_SResp,

			wmemiM0_SRespLast,

			wmemiM0_SData,

			wmemiM0_SCmdAccept,

			wmemiM0_SDataAccept,

			wmemiM0_MReset_n);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // value method wmemiM0_mCmd
  output [2 : 0] wmemiM0_MCmd;

  // value method wmemiM0_mReqLast
  output wmemiM0_MReqLast;

  // value method wmemiM0_mAddr
  output [35 : 0] wmemiM0_MAddr;

  // value method wmemiM0_mBurstLength
  output [11 : 0] wmemiM0_MBurstLength;

  // value method wmemiM0_mDataValid
  output wmemiM0_MDataValid;

  // value method wmemiM0_mDataLast
  output wmemiM0_MDataLast;

  // value method wmemiM0_mData
  output [127 : 0] wmemiM0_MData;

  // value method wmemiM0_mDataByteEn
  output [15 : 0] wmemiM0_MDataByteEn;

  // action method wmemiM0_sResp
  input  [1 : 0] wmemiM0_SResp;

  // action method wmemiM0_sRespLast
  input  wmemiM0_SRespLast;

  // action method wmemiM0_sData
  input  [127 : 0] wmemiM0_SData;

  // action method wmemiM0_sCmdAccept
  input  wmemiM0_SCmdAccept;

  // action method wmemiM0_sDataAccept
  input  wmemiM0_SDataAccept;

  // value method wmemiM0_mReset_n
  output wmemiM0_MReset_n;

  // signals for module outputs
  wire [127 : 0] wmemiM0_MData;
  wire [35 : 0] wmemiM0_MAddr;
  wire [31 : 0] wciS0_SData;
  wire [15 : 0] wmemiM0_MDataByteEn;
  wire [11 : 0] wmemiM0_MBurstLength;
  wire [2 : 0] wmemiM0_MCmd;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire wciS0_SThreadBusy,
       wmemiM0_MDataLast,
       wmemiM0_MDataValid,
       wmemiM0_MReqLast,
       wmemiM0_MReset_n;

  // inlined wires
  wire [145 : 0] wmemi_dhF_x_wire_wget;
  wire [130 : 0] wmemi_wmemiResponse_wget;
  wire [127 : 0] wmemi_Em_sData_w_wget;
  wire [71 : 0] wci_wslv_wciReq_wget;
  wire [51 : 0] wmemi_reqF_x_wire_wget;
  wire [33 : 0] wci_wslv_respF_x_wire_wget;
  wire [31 : 0] wci_wci_Es_mAddr_w_wget, wci_wci_Es_mData_w_wget;
  wire [3 : 0] wci_wci_Es_mByteEn_w_wget;
  wire [2 : 0] wci_wci_Es_mCmd_w_wget, wci_wslv_wEdge_wget;
  wire [1 : 0] wmemi_Em_sResp_w_wget;
  wire wci_wci_Es_mAddrSpace_w_wget,
       wci_wci_Es_mAddrSpace_w_whas,
       wci_wci_Es_mAddr_w_whas,
       wci_wci_Es_mByteEn_w_whas,
       wci_wci_Es_mCmd_w_whas,
       wci_wci_Es_mData_w_whas,
       wci_wslv_ctlAckReg_1_wget,
       wci_wslv_ctlAckReg_1_whas,
       wci_wslv_reqF_r_clr_whas,
       wci_wslv_reqF_r_deq_whas,
       wci_wslv_reqF_r_enq_whas,
       wci_wslv_respF_dequeueing_whas,
       wci_wslv_respF_enqueueing_whas,
       wci_wslv_respF_x_wire_whas,
       wci_wslv_sFlagReg_1_wget,
       wci_wslv_sFlagReg_1_whas,
       wci_wslv_sThreadBusy_pw_whas,
       wci_wslv_wEdge_whas,
       wci_wslv_wciReq_whas,
       wci_wslv_wci_cfrd_pw_whas,
       wci_wslv_wci_cfwr_pw_whas,
       wci_wslv_wci_ctrl_pw_whas,
       wmemi_Em_sData_w_whas,
       wmemi_Em_sRespLast_w_whas,
       wmemi_Em_sResp_w_whas,
       wmemi_dhF_dequeueing_whas,
       wmemi_dhF_enqueueing_whas,
       wmemi_dhF_x_wire_whas,
       wmemi_operateD_1_wget,
       wmemi_operateD_1_whas,
       wmemi_peerIsReady_1_wget,
       wmemi_peerIsReady_1_whas,
       wmemi_reqF_dequeueing_whas,
       wmemi_reqF_enqueueing_whas,
       wmemi_reqF_x_wire_whas,
       wmemi_sCmdAccept_w_wget,
       wmemi_sCmdAccept_w_whas,
       wmemi_sDataAccept_w_wget,
       wmemi_sDataAccept_w_whas,
       wmemi_wmemiResponse_whas;

  // register errorCount
  reg [31 : 0] errorCount;
  wire [31 : 0] errorCount_D_IN;
  wire errorCount_EN;

  // register freeCnt
  reg [31 : 0] freeCnt;
  wire [31 : 0] freeCnt_D_IN;
  wire freeCnt_EN;

  // register hwordAddr
  reg [31 : 0] hwordAddr;
  wire [31 : 0] hwordAddr_D_IN;
  wire hwordAddr_EN;

  // register isReader
  reg isReader;
  wire isReader_D_IN, isReader_EN;

  // register isTesting
  reg isTesting;
  wire isTesting_D_IN, isTesting_EN;

  // register isWriter
  reg isWriter;
  wire isWriter_D_IN, isWriter_EN;

  // register rdCycStart
  reg [31 : 0] rdCycStart;
  wire [31 : 0] rdCycStart_D_IN;
  wire rdCycStart_EN;

  // register rdDuration
  reg [31 : 0] rdDuration;
  wire [31 : 0] rdDuration_D_IN;
  wire rdDuration_EN;

  // register respCnt
  reg [31 : 0] respCnt;
  wire [31 : 0] respCnt_D_IN;
  wire respCnt_EN;

  // register rgen_patV
  reg [127 : 0] rgen_patV;
  wire [127 : 0] rgen_patV_D_IN;
  wire rgen_patV_EN;

  // register seqLen
  reg [31 : 0] seqLen;
  wire [31 : 0] seqLen_D_IN;
  wire seqLen_EN;

  // register testCycleCount
  reg [31 : 0] testCycleCount;
  wire [31 : 0] testCycleCount_D_IN;
  wire testCycleCount_EN;

  // register tstCtrl
  reg [31 : 0] tstCtrl;
  wire [31 : 0] tstCtrl_D_IN;
  wire tstCtrl_EN;

  // register unrollCnt
  reg [31 : 0] unrollCnt;
  reg [31 : 0] unrollCnt_D_IN;
  wire unrollCnt_EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge_D_IN;
  wire wci_wslv_cEdge_EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState_D_IN;
  wire wci_wslv_cState_EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg_D_IN, wci_wslv_ctlAckReg_EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive_D_IN, wci_wslv_ctlOpActive_EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge_D_IN, wci_wslv_illegalEdge_EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset_D_IN, wci_wslv_isReset_isInReset_EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState_D_IN;
  wire wci_wslv_nState_EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg_D_IN;
  wire wci_wslv_reqF_countReg_EN;

  // register wci_wslv_respF_cntr_r
  reg [1 : 0] wci_wslv_respF_cntr_r;
  wire [1 : 0] wci_wslv_respF_cntr_r_D_IN;
  wire wci_wslv_respF_cntr_r_EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0_D_IN;
  wire wci_wslv_respF_q_0_EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1_D_IN;
  wire wci_wslv_respF_q_1_EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg_D_IN, wci_wslv_sFlagReg_EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d_D_IN, wci_wslv_sThreadBusy_d_EN;

  // register wgen_patV
  reg [127 : 0] wgen_patV;
  wire [127 : 0] wgen_patV_D_IN;
  wire wgen_patV_EN;

  // register wmemiRdReq
  reg [31 : 0] wmemiRdReq;
  wire [31 : 0] wmemiRdReq_D_IN;
  wire wmemiRdReq_EN;

  // register wmemiRdResp
  reg [31 : 0] wmemiRdResp;
  wire [31 : 0] wmemiRdResp_D_IN;
  wire wmemiRdResp_EN;

  // register wmemiWrReq
  reg [31 : 0] wmemiWrReq;
  wire [31 : 0] wmemiWrReq_D_IN;
  wire wmemiWrReq_EN;

  // register wmemi_busyWithMessage
  reg wmemi_busyWithMessage;
  wire wmemi_busyWithMessage_D_IN, wmemi_busyWithMessage_EN;

  // register wmemi_dhF_cntr_r
  reg [1 : 0] wmemi_dhF_cntr_r;
  wire [1 : 0] wmemi_dhF_cntr_r_D_IN;
  wire wmemi_dhF_cntr_r_EN;

  // register wmemi_dhF_q_0
  reg [145 : 0] wmemi_dhF_q_0;
  reg [145 : 0] wmemi_dhF_q_0_D_IN;
  wire wmemi_dhF_q_0_EN;

  // register wmemi_dhF_q_1
  reg [145 : 0] wmemi_dhF_q_1;
  reg [145 : 0] wmemi_dhF_q_1_D_IN;
  wire wmemi_dhF_q_1_EN;

  // register wmemi_errorSticky
  reg wmemi_errorSticky;
  wire wmemi_errorSticky_D_IN, wmemi_errorSticky_EN;

  // register wmemi_isReset_isInReset
  reg wmemi_isReset_isInReset;
  wire wmemi_isReset_isInReset_D_IN, wmemi_isReset_isInReset_EN;

  // register wmemi_operateD
  reg wmemi_operateD;
  wire wmemi_operateD_D_IN, wmemi_operateD_EN;

  // register wmemi_peerIsReady
  reg wmemi_peerIsReady;
  wire wmemi_peerIsReady_D_IN, wmemi_peerIsReady_EN;

  // register wmemi_reqF_cntr_r
  reg [1 : 0] wmemi_reqF_cntr_r;
  wire [1 : 0] wmemi_reqF_cntr_r_D_IN;
  wire wmemi_reqF_cntr_r_EN;

  // register wmemi_reqF_q_0
  reg [51 : 0] wmemi_reqF_q_0;
  reg [51 : 0] wmemi_reqF_q_0_D_IN;
  wire wmemi_reqF_q_0_EN;

  // register wmemi_reqF_q_1
  reg [51 : 0] wmemi_reqF_q_1;
  reg [51 : 0] wmemi_reqF_q_1_D_IN;
  wire wmemi_reqF_q_1_EN;

  // register wmemi_statusR
  reg [7 : 0] wmemi_statusR;
  wire [7 : 0] wmemi_statusR_D_IN;
  wire wmemi_statusR_EN;

  // register wmemi_trafficSticky
  reg wmemi_trafficSticky;
  wire wmemi_trafficSticky_D_IN, wmemi_trafficSticky_EN;

  // register wtCycStart
  reg [31 : 0] wtCycStart;
  wire [31 : 0] wtCycStart_D_IN;
  wire wtCycStart_EN;

  // register wtDuration
  reg [31 : 0] wtDuration;
  wire [31 : 0] wtDuration_D_IN;
  wire wtDuration_EN;

  // ports of submodule rgen_gsF
  wire [127 : 0] rgen_gsF_D_IN, rgen_gsF_D_OUT;
  wire rgen_gsF_CLR,
       rgen_gsF_DEQ,
       rgen_gsF_EMPTY_N,
       rgen_gsF_ENQ,
       rgen_gsF_FULL_N;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF_D_IN, wci_wslv_reqF_D_OUT;
  wire wci_wslv_reqF_CLR,
       wci_wslv_reqF_DEQ,
       wci_wslv_reqF_EMPTY_N,
       wci_wslv_reqF_ENQ;

  // ports of submodule wgen_gsF
  wire [127 : 0] wgen_gsF_D_IN, wgen_gsF_D_OUT;
  wire wgen_gsF_CLR,
       wgen_gsF_DEQ,
       wgen_gsF_EMPTY_N,
       wgen_gsF_ENQ,
       wgen_gsF_FULL_N;

  // ports of submodule wmemi_respF
  wire [130 : 0] wmemi_respF_D_IN, wmemi_respF_D_OUT;
  wire wmemi_respF_CLR,
       wmemi_respF_DEQ,
       wmemi_respF_EMPTY_N,
       wmemi_respF_ENQ,
       wmemi_respF_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_read_req,
       WILL_FIRE_RL_read_resp,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wmemi_dhF_both,
       WILL_FIRE_RL_wmemi_dhF_decCtr,
       WILL_FIRE_RL_wmemi_dhF_incCtr,
       WILL_FIRE_RL_wmemi_reqF_both,
       WILL_FIRE_RL_wmemi_reqF_decCtr,
       WILL_FIRE_RL_wmemi_reqF_incCtr,
       WILL_FIRE_RL_write_req;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0_write_1__VAL_2;
  wire [145 : 0] MUX_wmemi_dhF_q_0_write_1__VAL_1,
		 MUX_wmemi_dhF_q_0_write_1__VAL_2,
		 MUX_wmemi_dhF_q_1_write_1__VAL_2;
  wire [51 : 0] MUX_wmemi_reqF_q_0_write_1__VAL_1,
		MUX_wmemi_reqF_q_0_write_1__VAL_2,
		MUX_wmemi_reqF_q_1_write_1__VAL_1,
		MUX_wmemi_reqF_x_wire_wset_1__VAL_1,
		MUX_wmemi_reqF_x_wire_wset_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0_write_1__VAL_1,
		MUX_wci_wslv_respF_q_1_write_1__VAL_1,
		MUX_wci_wslv_respF_x_wire_wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire_wset_1__VAL_2;
  wire [31 : 0] MUX_unrollCnt_write_1__VAL_2;
  wire [1 : 0] MUX_wci_wslv_respF_cntr_r_write_1__VAL_2,
	       MUX_wmemi_dhF_cntr_r_write_1__VAL_2,
	       MUX_wmemi_reqF_cntr_r_write_1__VAL_2;
  wire MUX_isReader_write_1__SEL_1,
       MUX_isReader_write_1__SEL_2,
       MUX_isTesting_write_1__SEL_1,
       MUX_unrollCnt_write_1__SEL_1,
       MUX_wci_wslv_illegalEdge_write_1__SEL_1,
       MUX_wci_wslv_illegalEdge_write_1__VAL_1,
       MUX_wci_wslv_respF_q_0_write_1__SEL_1,
       MUX_wci_wslv_respF_q_0_write_1__SEL_2,
       MUX_wci_wslv_respF_q_1_write_1__SEL_1,
       MUX_wci_wslv_respF_q_1_write_1__SEL_2,
       MUX_wmemi_dhF_q_0_write_1__SEL_1,
       MUX_wmemi_dhF_q_0_write_1__SEL_2,
       MUX_wmemi_dhF_q_1_write_1__SEL_1,
       MUX_wmemi_dhF_q_1_write_1__SEL_2,
       MUX_wmemi_reqF_q_0_write_1__SEL_1,
       MUX_wmemi_reqF_q_0_write_1__SEL_2,
       MUX_wmemi_reqF_q_1_write_1__SEL_1,
       MUX_wmemi_reqF_q_1_write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h14155, v__h14921, v__h3568, v__h3743, v__h3887;
  reg [31 : 0] g_data__h14736;
  wire [35 : 0] addr__h13592;
  wire [31 : 0] rdat__h14758, testStatus__h14232;
  wire [1 : 0] wci_wslv_respF_cntr_r_8_MINUS_1___d27,
	       wmemi_dhF_cntr_r_84_MINUS_1___d193,
	       wmemi_reqF_cntr_r_61_MINUS_1___d170;
  wire NOT_rgen_gsF_first__07_EQ_wmemi_respF_first__0_ETC___d311,
       NOT_wmemi_dhF_cntr_r_84_EQ_2_97_98_AND_wmemi_o_ETC___d264,
       _dfoo1,
       _dfoo11,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       _dfoo9,
       wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d272,
       wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d294;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // value method wmemiM0_mCmd
  assign wmemiM0_MCmd = wmemi_reqF_q_0[51:49] ;

  // value method wmemiM0_mReqLast
  assign wmemiM0_MReqLast = wmemi_reqF_q_0[48] ;

  // value method wmemiM0_mAddr
  assign wmemiM0_MAddr = wmemi_reqF_q_0[47:12] ;

  // value method wmemiM0_mBurstLength
  assign wmemiM0_MBurstLength = wmemi_reqF_q_0[11:0] ;

  // value method wmemiM0_mDataValid
  assign wmemiM0_MDataValid = wmemi_dhF_q_0[145] ;

  // value method wmemiM0_mDataLast
  assign wmemiM0_MDataLast = wmemi_dhF_q_0[144] ;

  // value method wmemiM0_mData
  assign wmemiM0_MData = wmemi_dhF_q_0[143:16] ;

  // value method wmemiM0_mDataByteEn
  assign wmemiM0_MDataByteEn = wmemi_dhF_q_0[15:0] ;

  // value method wmemiM0_mReset_n
  assign wmemiM0_MReset_n = !wmemi_isReset_isInReset && wmemi_operateD ;

  // submodule rgen_gsF
  FIFO2 #(.width(32'd128), .guarded(32'd1)) rgen_gsF(.RST(wciS0_MReset_n),
						     .CLK(wciS0_Clk),
						     .D_IN(rgen_gsF_D_IN),
						     .ENQ(rgen_gsF_ENQ),
						     .DEQ(rgen_gsF_DEQ),
						     .CLR(rgen_gsF_CLR),
						     .D_OUT(rgen_gsF_D_OUT),
						     .FULL_N(rgen_gsF_FULL_N),
						     .EMPTY_N(rgen_gsF_EMPTY_N));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF_D_IN),
					     .ENQ(wci_wslv_reqF_ENQ),
					     .DEQ(wci_wslv_reqF_DEQ),
					     .CLR(wci_wslv_reqF_CLR),
					     .D_OUT(wci_wslv_reqF_D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF_EMPTY_N));

  // submodule wgen_gsF
  FIFO2 #(.width(32'd128), .guarded(32'd1)) wgen_gsF(.RST(wciS0_MReset_n),
						     .CLK(wciS0_Clk),
						     .D_IN(wgen_gsF_D_IN),
						     .ENQ(wgen_gsF_ENQ),
						     .DEQ(wgen_gsF_DEQ),
						     .CLR(wgen_gsF_CLR),
						     .D_OUT(wgen_gsF_D_OUT),
						     .FULL_N(wgen_gsF_FULL_N),
						     .EMPTY_N(wgen_gsF_EMPTY_N));

  // submodule wmemi_respF
  FIFO2 #(.width(32'd131), .guarded(32'd1)) wmemi_respF(.RST(wciS0_MReset_n),
							.CLK(wciS0_Clk),
							.D_IN(wmemi_respF_D_IN),
							.ENQ(wmemi_respF_ENQ),
							.DEQ(wmemi_respF_DEQ),
							.CLR(wmemi_respF_CLR),
							.D_OUT(wmemi_respF_D_OUT),
							.FULL_N(wmemi_respF_FULL_N),
							.EMPTY_N(wmemi_respF_EMPTY_N));

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wci_wslv_respF_cntr_r != 2'd2 && wci_wslv_reqF_EMPTY_N &&
	     wci_wslv_wci_cfrd_pw_whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_write_req
  assign WILL_FIRE_RL_write_req =
	     wmemi_reqF_cntr_r != 2'd2 &&
	     NOT_wmemi_dhF_cntr_r_84_EQ_2_97_98_AND_wmemi_o_ETC___d264 &&
	     wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d272 ;

  // rule RL_read_req
  assign WILL_FIRE_RL_read_req =
	     wmemi_reqF_cntr_r != 2'd2 && wmemi_operateD &&
	     wmemi_peerIsReady &&
	     wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d294 ;

  // rule RL_read_resp
  assign WILL_FIRE_RL_read_resp =
	     rgen_gsF_EMPTY_N && wmemi_respF_EMPTY_N &&
	     wci_wslv_cState == 3'd2 &&
	     isTesting ;

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wci_wslv_respF_cntr_r != 2'd2 && wci_wslv_reqF_EMPTY_N &&
	     wci_wslv_wci_cfwr_pw_whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF_EMPTY_N && wci_wslv_wci_ctrl_pw_whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw_whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF_D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_ctrl_EiI
  assign WILL_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw_whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF_D_OUT[36:34] == 3'd0 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw_whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF_D_OUT[36:34] == 3'd3 ;

  // rule RL_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_cntr_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;

  // rule RL_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     wci_wslv_respF_x_wire_whas && wci_wslv_respF_enqueueing_whas &&
	     !(wci_wslv_respF_cntr_r != 2'd0) ;

  // rule RL_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_cntr_r != 2'd0 &&
	     !wci_wslv_respF_enqueueing_whas ;

  // rule RL_wci_wslv_respF_both
  assign WILL_FIRE_RL_wci_wslv_respF_both =
	     wci_wslv_respF_x_wire_whas && wci_wslv_respF_cntr_r != 2'd0 &&
	     wci_wslv_respF_enqueueing_whas ;

  // rule RL_wmemi_reqF_incCtr
  assign WILL_FIRE_RL_wmemi_reqF_incCtr =
	     wmemi_reqF_x_wire_whas && wmemi_reqF_enqueueing_whas &&
	     !wmemi_reqF_dequeueing_whas ;

  // rule RL_wmemi_reqF_decCtr
  assign WILL_FIRE_RL_wmemi_reqF_decCtr =
	     wmemi_reqF_dequeueing_whas && !wmemi_reqF_enqueueing_whas ;

  // rule RL_wmemi_reqF_both
  assign WILL_FIRE_RL_wmemi_reqF_both =
	     wmemi_reqF_x_wire_whas && wmemi_reqF_dequeueing_whas &&
	     wmemi_reqF_enqueueing_whas ;

  // rule RL_wmemi_dhF_incCtr
  assign WILL_FIRE_RL_wmemi_dhF_incCtr =
	     WILL_FIRE_RL_write_req && WILL_FIRE_RL_write_req &&
	     !wmemi_dhF_dequeueing_whas ;

  // rule RL_wmemi_dhF_decCtr
  assign WILL_FIRE_RL_wmemi_dhF_decCtr =
	     wmemi_dhF_dequeueing_whas && !WILL_FIRE_RL_write_req ;

  // rule RL_wmemi_dhF_both
  assign WILL_FIRE_RL_wmemi_dhF_both =
	     WILL_FIRE_RL_write_req && wmemi_dhF_dequeueing_whas &&
	     WILL_FIRE_RL_write_req ;

  // inputs to muxes for submodule ports
  assign MUX_isReader_write_1__SEL_1 =
	     WILL_FIRE_RL_read_req && unrollCnt == 32'd1 ;
  assign MUX_isReader_write_1__SEL_2 =
	     WILL_FIRE_RL_write_req && unrollCnt == 32'd1 ;
  assign MUX_isTesting_write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF_D_OUT[63:32] == 32'h00000030 ||
	      wci_wslv_reqF_D_OUT[63:32] == 32'h00000034) ;
  assign MUX_unrollCnt_write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr &&
	     wci_wslv_reqF_D_OUT[63:32] == 32'h00000030 ;
  assign MUX_wci_wslv_illegalEdge_write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF_D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_both && _dfoo3 ;
  assign MUX_wci_wslv_respF_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_cntr_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_both && _dfoo1 ;
  assign MUX_wci_wslv_respF_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_cntr_r == 2'd1 ;
  assign MUX_wmemi_dhF_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_dhF_incCtr && wmemi_dhF_cntr_r == 2'd0 ;
  assign MUX_wmemi_dhF_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemi_dhF_both && _dfoo11 ;
  assign MUX_wmemi_dhF_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_dhF_incCtr && wmemi_dhF_cntr_r == 2'd1 ;
  assign MUX_wmemi_dhF_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemi_dhF_both && _dfoo9 ;
  assign MUX_wmemi_reqF_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_reqF_both && _dfoo7 ;
  assign MUX_wmemi_reqF_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemi_reqF_incCtr && wmemi_reqF_cntr_r == 2'd0 ;
  assign MUX_wmemi_reqF_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_reqF_both && _dfoo5 ;
  assign MUX_wmemi_reqF_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_wmemi_reqF_incCtr && wmemi_reqF_cntr_r == 2'd1 ;
  assign MUX_unrollCnt_write_1__VAL_2 =
	     (unrollCnt == 32'd1) ? seqLen : unrollCnt - 32'd1 ;
  assign MUX_wci_wslv_illegalEdge_write_1__VAL_1 =
	     wci_wslv_reqF_D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF_D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF_D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_cntr_r_write_1__VAL_2 =
	     wci_wslv_respF_cntr_r + 2'd1 ;
  assign MUX_wci_wslv_respF_q_0_write_1__VAL_1 =
	     (wci_wslv_respF_cntr_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0_write_1__VAL_2 :
	       wci_wslv_respF_q_1 ;
  always@(WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire_wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wci_wslv_respF_x_wire_wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0_write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire_wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wci_wslv_respF_q_0_write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire_wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0_write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0_write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_1_write_1__VAL_1 =
	     (wci_wslv_respF_cntr_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0_write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire_wset_1__VAL_1 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_wslv_respF_x_wire_wset_1__VAL_2 = { 2'd1, g_data__h14736 } ;
  assign MUX_wmemi_dhF_cntr_r_write_1__VAL_2 = wmemi_dhF_cntr_r + 2'd1 ;
  assign MUX_wmemi_dhF_q_0_write_1__VAL_1 =
	     { 2'd3, wgen_gsF_D_OUT, 16'd65535 } ;
  assign MUX_wmemi_dhF_q_0_write_1__VAL_2 =
	     (wmemi_dhF_cntr_r == 2'd1) ?
	       MUX_wmemi_dhF_q_0_write_1__VAL_1 :
	       wmemi_dhF_q_1 ;
  assign MUX_wmemi_dhF_q_1_write_1__VAL_2 =
	     (wmemi_dhF_cntr_r == 2'd2) ?
	       MUX_wmemi_dhF_q_0_write_1__VAL_1 :
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_wmemi_reqF_cntr_r_write_1__VAL_2 = wmemi_reqF_cntr_r + 2'd1 ;
  assign MUX_wmemi_reqF_q_0_write_1__VAL_1 =
	     (wmemi_reqF_cntr_r == 2'd1) ?
	       MUX_wmemi_reqF_q_0_write_1__VAL_2 :
	       wmemi_reqF_q_1 ;
  assign MUX_wmemi_reqF_q_0_write_1__VAL_2 =
	     WILL_FIRE_RL_write_req ?
	       MUX_wmemi_reqF_x_wire_wset_1__VAL_1 :
	       MUX_wmemi_reqF_x_wire_wset_1__VAL_2 ;
  assign MUX_wmemi_reqF_q_1_write_1__VAL_1 =
	     (wmemi_reqF_cntr_r == 2'd2) ?
	       MUX_wmemi_reqF_q_0_write_1__VAL_2 :
	       52'h0AAAAAAAAAAAA ;
  assign MUX_wmemi_reqF_x_wire_wset_1__VAL_1 = { 4'd3, addr__h13592, 12'd1 } ;
  assign MUX_wmemi_reqF_x_wire_wset_1__VAL_2 = { 4'd5, addr__h13592, 12'd1 } ;

  // inlined wires
  assign wci_wslv_wciReq_wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq_whas = 1'd1 ;
  assign wci_wslv_respF_x_wire_wget = MUX_wci_wslv_respF_q_0_write_1__VAL_2 ;
  assign wci_wslv_respF_x_wire_whas =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge_wget = wci_wslv_reqF_D_OUT[36:34] ;
  assign wci_wslv_wEdge_whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1_wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1_whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1_wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1_whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w_wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w_whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w_wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w_whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w_wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w_whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w_wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w_whas = 1'd1 ;
  assign wci_wci_Es_mData_w_wget = wciS0_MData ;
  assign wci_wci_Es_mData_w_whas = 1'd1 ;
  assign wmemi_reqF_x_wire_wget = MUX_wmemi_reqF_q_0_write_1__VAL_2 ;
  assign wmemi_reqF_x_wire_whas =
	     WILL_FIRE_RL_write_req || WILL_FIRE_RL_read_req ;
  assign wmemi_dhF_x_wire_wget = MUX_wmemi_dhF_q_0_write_1__VAL_1 ;
  assign wmemi_dhF_x_wire_whas = WILL_FIRE_RL_write_req ;
  assign wmemi_wmemiResponse_wget =
	     { wmemiM0_SResp, wmemiM0_SRespLast, wmemiM0_SData } ;
  assign wmemi_wmemiResponse_whas = 1'd1 ;
  assign wmemi_sCmdAccept_w_wget = 1'd1 ;
  assign wmemi_sCmdAccept_w_whas = wmemiM0_SCmdAccept ;
  assign wmemi_sDataAccept_w_wget = 1'd1 ;
  assign wmemi_sDataAccept_w_whas = wmemiM0_SDataAccept ;
  assign wmemi_operateD_1_wget = 1'd1 ;
  assign wmemi_operateD_1_whas = wci_wslv_cState == 3'd2 ;
  assign wmemi_peerIsReady_1_wget = 1'b0 ;
  assign wmemi_peerIsReady_1_whas = 1'b0 ;
  assign wmemi_Em_sResp_w_wget = wmemiM0_SResp ;
  assign wmemi_Em_sResp_w_whas = 1'd1 ;
  assign wmemi_Em_sData_w_wget = wmemiM0_SData ;
  assign wmemi_Em_sData_w_whas = 1'd1 ;
  assign wci_wslv_reqF_r_enq_whas = wci_wslv_wciReq_wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_r_deq_whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr_whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing_whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing_whas = wci_wslv_respF_cntr_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw_whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw_whas =
	     wci_wslv_reqF_EMPTY_N && wci_wslv_reqF_D_OUT[68] &&
	     wci_wslv_reqF_D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw_whas =
	     wci_wslv_reqF_EMPTY_N && wci_wslv_reqF_D_OUT[68] &&
	     wci_wslv_reqF_D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw_whas =
	     wci_wslv_reqF_EMPTY_N && !wci_wslv_reqF_D_OUT[68] &&
	     wci_wslv_reqF_D_OUT[71:69] == 3'd2 ;
  assign wmemi_reqF_enqueueing_whas =
	     WILL_FIRE_RL_read_req || WILL_FIRE_RL_write_req ;
  assign wmemi_reqF_dequeueing_whas =
	     wmemiM0_SCmdAccept && wmemi_reqF_cntr_r != 2'd0 ;
  assign wmemi_dhF_enqueueing_whas = WILL_FIRE_RL_write_req ;
  assign wmemi_dhF_dequeueing_whas =
	     wmemiM0_SDataAccept && wmemi_dhF_cntr_r != 2'd0 ;
  assign wmemi_Em_sRespLast_w_whas = wmemiM0_SRespLast ;

  // register errorCount
  assign errorCount_D_IN = errorCount + 32'd1 ;
  assign errorCount_EN =
	     WILL_FIRE_RL_read_resp &&
	     NOT_rgen_gsF_first__07_EQ_wmemi_respF_first__0_ETC___d311 ;

  // register freeCnt
  assign freeCnt_D_IN = freeCnt + 32'd1 ;
  assign freeCnt_EN = 1'd1 ;

  // register hwordAddr
  assign hwordAddr_D_IN = (unrollCnt == 32'd1) ? 32'd0 : hwordAddr + 32'd1 ;
  assign hwordAddr_EN = wmemi_reqF_enqueueing_whas ;

  // register isReader
  assign isReader_D_IN = !MUX_isReader_write_1__SEL_1 ;
  assign isReader_EN =
	     WILL_FIRE_RL_read_req && unrollCnt == 32'd1 ||
	     WILL_FIRE_RL_write_req && unrollCnt == 32'd1 ;

  // register isTesting
  assign isTesting_D_IN =
	     MUX_isTesting_write_1__SEL_1 &&
	     wci_wslv_reqF_D_OUT[63:32] == 32'h00000030 ;
  assign isTesting_EN =
	     WILL_FIRE_RL_read_resp &&
	     NOT_rgen_gsF_first__07_EQ_wmemi_respF_first__0_ETC___d311 &&
	     tstCtrl[0] ||
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF_D_OUT[63:32] == 32'h00000030 ||
	      wci_wslv_reqF_D_OUT[63:32] == 32'h00000034) ;

  // register isWriter
  assign isWriter_D_IN = !MUX_isReader_write_1__SEL_2 ;
  assign isWriter_EN =
	     WILL_FIRE_RL_write_req && unrollCnt == 32'd1 ||
	     WILL_FIRE_RL_read_req && unrollCnt == 32'd1 ;

  // register rdCycStart
  assign rdCycStart_D_IN = freeCnt ;
  assign rdCycStart_EN = MUX_isReader_write_1__SEL_2 ;

  // register rdDuration
  assign rdDuration_D_IN = freeCnt - rdCycStart ;
  assign rdDuration_EN = MUX_isReader_write_1__SEL_1 ;

  // register respCnt
  assign respCnt_D_IN = 32'h0 ;
  assign respCnt_EN = 1'b0 ;

  // register rgen_patV
  assign rgen_patV_D_IN =
	     { rgen_patV[127:96] + 32'd4,
	       rgen_patV[95:64] + 32'd4,
	       rgen_patV[63:32] + 32'd4,
	       rgen_patV[31:0] + 32'd4 } ;
  assign rgen_patV_EN = rgen_gsF_FULL_N ;

  // register seqLen
  assign seqLen_D_IN = wci_wslv_reqF_D_OUT[31:0] ;
  assign seqLen_EN =
	     WILL_FIRE_RL_wci_cfwr &&
	     wci_wslv_reqF_D_OUT[63:32] == 32'h00000004 ;

  // register testCycleCount
  assign testCycleCount_D_IN = testCycleCount + 32'd1 ;
  assign testCycleCount_EN = MUX_isReader_write_1__SEL_1 ;

  // register tstCtrl
  assign tstCtrl_D_IN = wci_wslv_reqF_D_OUT[31:0] ;
  assign tstCtrl_EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF_D_OUT[63:32] == 32'h0 ;

  // register unrollCnt
  always@(MUX_unrollCnt_write_1__SEL_1 or
	  seqLen or
	  WILL_FIRE_RL_read_req or
	  MUX_unrollCnt_write_1__VAL_2 or WILL_FIRE_RL_write_req)
  case (1'b1)
    MUX_unrollCnt_write_1__SEL_1: unrollCnt_D_IN = seqLen;
    WILL_FIRE_RL_read_req: unrollCnt_D_IN = MUX_unrollCnt_write_1__VAL_2;
    WILL_FIRE_RL_write_req: unrollCnt_D_IN = MUX_unrollCnt_write_1__VAL_2;
    default: unrollCnt_D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign unrollCnt_EN =
	     WILL_FIRE_RL_wci_cfwr &&
	     wci_wslv_reqF_D_OUT[63:32] == 32'h00000030 ||
	     WILL_FIRE_RL_read_req ||
	     WILL_FIRE_RL_write_req ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge_D_IN = wci_wslv_reqF_D_OUT[36:34] ;
  assign wci_wslv_cEdge_EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState_D_IN = wci_wslv_nState ;
  assign wci_wslv_cState_EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg_D_IN = wci_wslv_ctlAckReg_1_whas ;
  assign wci_wslv_ctlAckReg_EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive_D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive_EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge_D_IN =
	     MUX_wci_wslv_illegalEdge_write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge_write_1__VAL_1 ;
  assign wci_wslv_illegalEdge_EN =
	     MUX_wci_wslv_illegalEdge_write_1__SEL_1 ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset_D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset_EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF_D_OUT)
  begin
    case (wci_wslv_reqF_D_OUT[36:34])
      3'd0: wci_wslv_nState_D_IN = 3'd1;
      3'd1: wci_wslv_nState_D_IN = 3'd2;
      3'd2: wci_wslv_nState_D_IN = 3'd3;
      default: wci_wslv_nState_D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState_EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF_D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF_D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg_D_IN =
	     (wci_wslv_wciReq_wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg_EN =
	     (wci_wslv_wciReq_wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq_whas ;

  // register wci_wslv_respF_cntr_r
  assign wci_wslv_respF_cntr_r_D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ?
	       wci_wslv_respF_cntr_r_8_MINUS_1___d27 :
	       MUX_wci_wslv_respF_cntr_r_write_1__VAL_2 ;
  assign wci_wslv_respF_cntr_r_EN =
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ;

  // register wci_wslv_respF_q_0
  always@(MUX_wci_wslv_respF_q_0_write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0_write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_0_write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_0_write_1__SEL_1:
	  wci_wslv_respF_q_0_D_IN = MUX_wci_wslv_respF_q_0_write_1__VAL_1;
      MUX_wci_wslv_respF_q_0_write_1__SEL_2:
	  wci_wslv_respF_q_0_D_IN = MUX_wci_wslv_respF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0_D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0_EN =
	     WILL_FIRE_RL_wci_wslv_respF_both && _dfoo3 ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(MUX_wci_wslv_respF_q_1_write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_1_write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_1_write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_1_write_1__SEL_1:
	  wci_wslv_respF_q_1_D_IN = MUX_wci_wslv_respF_q_1_write_1__VAL_1;
      MUX_wci_wslv_respF_q_1_write_1__SEL_2:
	  wci_wslv_respF_q_1_D_IN = MUX_wci_wslv_respF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1_D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1_D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1_EN =
	     WILL_FIRE_RL_wci_wslv_respF_both && _dfoo1 ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg_D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg_EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d_D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d_EN = 1'd1 ;

  // register wgen_patV
  assign wgen_patV_D_IN =
	     { wgen_patV[127:96] + 32'd4,
	       wgen_patV[95:64] + 32'd4,
	       wgen_patV[63:32] + 32'd4,
	       wgen_patV[31:0] + 32'd4 } ;
  assign wgen_patV_EN = wgen_gsF_FULL_N ;

  // register wmemiRdReq
  assign wmemiRdReq_D_IN = wmemiRdReq + 32'd1 ;
  assign wmemiRdReq_EN =
	     wmemi_reqF_cntr_r != 2'd2 && wmemi_operateD &&
	     wmemi_peerIsReady &&
	     wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d294 ;

  // register wmemiRdResp
  assign wmemiRdResp_D_IN = wmemiRdResp + 32'd1 ;
  assign wmemiRdResp_EN =
	     rgen_gsF_EMPTY_N && wmemi_respF_EMPTY_N &&
	     wci_wslv_cState == 3'd2 &&
	     isTesting ;

  // register wmemiWrReq
  assign wmemiWrReq_D_IN = wmemiWrReq + 32'd1 ;
  assign wmemiWrReq_EN =
	     wmemi_reqF_cntr_r != 2'd2 &&
	     NOT_wmemi_dhF_cntr_r_84_EQ_2_97_98_AND_wmemi_o_ETC___d264 &&
	     wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d272 ;

  // register wmemi_busyWithMessage
  assign wmemi_busyWithMessage_D_IN = 1'b0 ;
  assign wmemi_busyWithMessage_EN = 1'b0 ;

  // register wmemi_dhF_cntr_r
  assign wmemi_dhF_cntr_r_D_IN =
	     WILL_FIRE_RL_wmemi_dhF_decCtr ?
	       wmemi_dhF_cntr_r_84_MINUS_1___d193 :
	       MUX_wmemi_dhF_cntr_r_write_1__VAL_2 ;
  assign wmemi_dhF_cntr_r_EN =
	     WILL_FIRE_RL_wmemi_dhF_decCtr || WILL_FIRE_RL_wmemi_dhF_incCtr ;

  // register wmemi_dhF_q_0
  always@(MUX_wmemi_dhF_q_0_write_1__SEL_1 or
	  MUX_wmemi_dhF_q_0_write_1__VAL_1 or
	  MUX_wmemi_dhF_q_0_write_1__SEL_2 or
	  MUX_wmemi_dhF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_wmemi_dhF_decCtr or wmemi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_dhF_q_0_write_1__SEL_1:
	  wmemi_dhF_q_0_D_IN = MUX_wmemi_dhF_q_0_write_1__VAL_1;
      MUX_wmemi_dhF_q_0_write_1__SEL_2:
	  wmemi_dhF_q_0_D_IN = MUX_wmemi_dhF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wmemi_dhF_decCtr: wmemi_dhF_q_0_D_IN = wmemi_dhF_q_1;
      default: wmemi_dhF_q_0_D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_dhF_q_0_EN =
	     WILL_FIRE_RL_wmemi_dhF_incCtr && wmemi_dhF_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wmemi_dhF_both && _dfoo11 ||
	     WILL_FIRE_RL_wmemi_dhF_decCtr ;

  // register wmemi_dhF_q_1
  always@(MUX_wmemi_dhF_q_1_write_1__SEL_1 or
	  MUX_wmemi_dhF_q_0_write_1__VAL_1 or
	  MUX_wmemi_dhF_q_1_write_1__SEL_2 or
	  MUX_wmemi_dhF_q_1_write_1__VAL_2 or WILL_FIRE_RL_wmemi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_dhF_q_1_write_1__SEL_1:
	  wmemi_dhF_q_1_D_IN = MUX_wmemi_dhF_q_0_write_1__VAL_1;
      MUX_wmemi_dhF_q_1_write_1__SEL_2:
	  wmemi_dhF_q_1_D_IN = MUX_wmemi_dhF_q_1_write_1__VAL_2;
      WILL_FIRE_RL_wmemi_dhF_decCtr:
	  wmemi_dhF_q_1_D_IN = 146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: wmemi_dhF_q_1_D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_dhF_q_1_EN =
	     WILL_FIRE_RL_wmemi_dhF_incCtr && wmemi_dhF_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wmemi_dhF_both && _dfoo9 ||
	     WILL_FIRE_RL_wmemi_dhF_decCtr ;

  // register wmemi_errorSticky
  assign wmemi_errorSticky_D_IN = 1'b0 ;
  assign wmemi_errorSticky_EN = 1'b0 ;

  // register wmemi_isReset_isInReset
  assign wmemi_isReset_isInReset_D_IN = 1'd0 ;
  assign wmemi_isReset_isInReset_EN = wmemi_isReset_isInReset ;

  // register wmemi_operateD
  assign wmemi_operateD_D_IN = wci_wslv_cState == 3'd2 ;
  assign wmemi_operateD_EN = 1'd1 ;

  // register wmemi_peerIsReady
  assign wmemi_peerIsReady_D_IN = 1'b1 ;
  assign wmemi_peerIsReady_EN = 1'd1 ;

  // register wmemi_reqF_cntr_r
  assign wmemi_reqF_cntr_r_D_IN =
	     WILL_FIRE_RL_wmemi_reqF_decCtr ?
	       wmemi_reqF_cntr_r_61_MINUS_1___d170 :
	       MUX_wmemi_reqF_cntr_r_write_1__VAL_2 ;
  assign wmemi_reqF_cntr_r_EN =
	     WILL_FIRE_RL_wmemi_reqF_decCtr ||
	     WILL_FIRE_RL_wmemi_reqF_incCtr ;

  // register wmemi_reqF_q_0
  always@(MUX_wmemi_reqF_q_0_write_1__SEL_1 or
	  MUX_wmemi_reqF_q_0_write_1__VAL_1 or
	  MUX_wmemi_reqF_q_0_write_1__SEL_2 or
	  MUX_wmemi_reqF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_wmemi_reqF_decCtr or wmemi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_reqF_q_0_write_1__SEL_1:
	  wmemi_reqF_q_0_D_IN = MUX_wmemi_reqF_q_0_write_1__VAL_1;
      MUX_wmemi_reqF_q_0_write_1__SEL_2:
	  wmemi_reqF_q_0_D_IN = MUX_wmemi_reqF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wmemi_reqF_decCtr: wmemi_reqF_q_0_D_IN = wmemi_reqF_q_1;
      default: wmemi_reqF_q_0_D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_reqF_q_0_EN =
	     WILL_FIRE_RL_wmemi_reqF_both && _dfoo7 ||
	     WILL_FIRE_RL_wmemi_reqF_incCtr && wmemi_reqF_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wmemi_reqF_decCtr ;

  // register wmemi_reqF_q_1
  always@(MUX_wmemi_reqF_q_1_write_1__SEL_1 or
	  MUX_wmemi_reqF_q_1_write_1__VAL_1 or
	  MUX_wmemi_reqF_q_1_write_1__SEL_2 or
	  MUX_wmemi_reqF_q_0_write_1__VAL_2 or WILL_FIRE_RL_wmemi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_reqF_q_1_write_1__SEL_1:
	  wmemi_reqF_q_1_D_IN = MUX_wmemi_reqF_q_1_write_1__VAL_1;
      MUX_wmemi_reqF_q_1_write_1__SEL_2:
	  wmemi_reqF_q_1_D_IN = MUX_wmemi_reqF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_wmemi_reqF_decCtr: wmemi_reqF_q_1_D_IN = 52'h0AAAAAAAAAAAA;
      default: wmemi_reqF_q_1_D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_reqF_q_1_EN =
	     WILL_FIRE_RL_wmemi_reqF_both && _dfoo5 ||
	     WILL_FIRE_RL_wmemi_reqF_incCtr && wmemi_reqF_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wmemi_reqF_decCtr ;

  // register wmemi_statusR
  assign wmemi_statusR_D_IN =
	     { wmemi_isReset_isInReset,
	       !wmemi_peerIsReady,
	       !wmemi_operateD,
	       wmemi_errorSticky,
	       3'd0,
	       wmemi_trafficSticky } ;
  assign wmemi_statusR_EN = 1'd1 ;

  // register wmemi_trafficSticky
  assign wmemi_trafficSticky_D_IN = 1'd1 ;
  assign wmemi_trafficSticky_EN = wmemiM0_SCmdAccept ;

  // register wtCycStart
  assign wtCycStart_D_IN = freeCnt ;
  assign wtCycStart_EN = MUX_isReader_write_1__SEL_1 ;

  // register wtDuration
  assign wtDuration_D_IN = freeCnt - wtCycStart ;
  assign wtDuration_EN = MUX_isReader_write_1__SEL_2 ;

  // submodule rgen_gsF
  assign rgen_gsF_D_IN = rgen_patV ;
  assign rgen_gsF_ENQ = rgen_gsF_FULL_N ;
  assign rgen_gsF_DEQ = WILL_FIRE_RL_read_resp ;
  assign rgen_gsF_CLR = 1'b0 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF_D_IN = wci_wslv_wciReq_wget ;
  assign wci_wslv_reqF_ENQ = wci_wslv_wciReq_wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_DEQ = wci_wslv_reqF_r_deq_whas ;
  assign wci_wslv_reqF_CLR = 1'b0 ;

  // submodule wgen_gsF
  assign wgen_gsF_D_IN = wgen_patV ;
  assign wgen_gsF_ENQ = wgen_gsF_FULL_N ;
  assign wgen_gsF_DEQ = WILL_FIRE_RL_write_req ;
  assign wgen_gsF_CLR = 1'b0 ;

  // submodule wmemi_respF
  assign wmemi_respF_D_IN = wmemi_wmemiResponse_wget ;
  assign wmemi_respF_ENQ =
	     wmemi_respF_FULL_N && wmemi_operateD && wmemi_peerIsReady &&
	     wmemi_wmemiResponse_wget[130:129] != 2'd0 ;
  assign wmemi_respF_DEQ = WILL_FIRE_RL_read_resp ;
  assign wmemi_respF_CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_rgen_gsF_first__07_EQ_wmemi_respF_first__0_ETC___d311 =
	     rgen_gsF_D_OUT != wmemi_respF_D_OUT[127:0] ;
  assign NOT_wmemi_dhF_cntr_r_84_EQ_2_97_98_AND_wmemi_o_ETC___d264 =
	     wmemi_dhF_cntr_r != 2'd2 && wmemi_operateD &&
	     wmemi_peerIsReady &&
	     wgen_gsF_EMPTY_N ;
  assign _dfoo1 =
	     wci_wslv_respF_cntr_r != 2'd2 ||
	     wci_wslv_respF_cntr_r_8_MINUS_1___d27 == 2'd1 ;
  assign _dfoo11 =
	     wmemi_dhF_cntr_r != 2'd1 ||
	     wmemi_dhF_cntr_r_84_MINUS_1___d193 == 2'd0 ;
  assign _dfoo3 =
	     wci_wslv_respF_cntr_r != 2'd1 ||
	     wci_wslv_respF_cntr_r_8_MINUS_1___d27 == 2'd0 ;
  assign _dfoo5 =
	     wmemi_reqF_cntr_r != 2'd2 ||
	     wmemi_reqF_cntr_r_61_MINUS_1___d170 == 2'd1 ;
  assign _dfoo7 =
	     wmemi_reqF_cntr_r != 2'd1 ||
	     wmemi_reqF_cntr_r_61_MINUS_1___d170 == 2'd0 ;
  assign _dfoo9 =
	     wmemi_dhF_cntr_r != 2'd2 ||
	     wmemi_dhF_cntr_r_84_MINUS_1___d193 == 2'd1 ;
  assign addr__h13592 = { hwordAddr, 4'h0 } ;
  assign rdat__h14758 = { 24'd0, wmemi_statusR } ;
  assign testStatus__h14232 = { 31'h0, isReader } ;
  assign wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d272 =
	     wci_wslv_cState == 3'd2 && isTesting && isWriter && !isReader ;
  assign wci_wslv_cState_4_EQ_2_5_AND_isTesting_66_67_A_ETC___d294 =
	     wci_wslv_cState == 3'd2 && isTesting && !isWriter && isReader ;
  assign wci_wslv_respF_cntr_r_8_MINUS_1___d27 =
	     wci_wslv_respF_cntr_r - 2'd1 ;
  assign wmemi_dhF_cntr_r_84_MINUS_1___d193 = wmemi_dhF_cntr_r - 2'd1 ;
  assign wmemi_reqF_cntr_r_61_MINUS_1___d170 = wmemi_reqF_cntr_r - 2'd1 ;
  always@(wci_wslv_reqF_D_OUT or
	  tstCtrl or
	  seqLen or
	  rdat__h14758 or
	  testCycleCount or
	  errorCount or
	  wtDuration or
	  rdDuration or
	  wmemiWrReq or wmemiRdReq or wmemiRdResp or testStatus__h14232)
  begin
    case (wci_wslv_reqF_D_OUT[63:32])
      32'h0: g_data__h14736 = tstCtrl;
      32'h00000004: g_data__h14736 = seqLen;
      32'h00000008: g_data__h14736 = rdat__h14758;
      32'h0000000C: g_data__h14736 = testCycleCount;
      32'h00000010: g_data__h14736 = errorCount;
      32'h00000014: g_data__h14736 = wtDuration;
      32'h00000018: g_data__h14736 = rdDuration;
      32'h0000001C: g_data__h14736 = wmemiWrReq;
      32'h00000020: g_data__h14736 = wmemiRdReq;
      32'h00000024: g_data__h14736 = wmemiRdResp;
      32'h00000028: g_data__h14736 = testStatus__h14232;
      default: g_data__h14736 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (wciS0_MReset_n == `BSV_RESET_VALUE)
      begin
        errorCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	freeCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwordAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	isReader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	isTesting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	isWriter <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rdCycStart <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdDuration <= `BSV_ASSIGNMENT_DELAY 32'd0;
	respCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rgen_patV <= `BSV_ASSIGNMENT_DELAY
	    128'h00000003000000020000000100000000;
	seqLen <= `BSV_ASSIGNMENT_DELAY 32'd16;
	testCycleCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tstCtrl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	unrollCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wgen_patV <= `BSV_ASSIGNMENT_DELAY
	    128'h00000003000000020000000100000000;
	wmemiRdReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiRdResp <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiWrReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_dhF_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wmemi_reqF_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wtCycStart <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wtDuration <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (errorCount_EN)
	  errorCount <= `BSV_ASSIGNMENT_DELAY errorCount_D_IN;
	if (freeCnt_EN) freeCnt <= `BSV_ASSIGNMENT_DELAY freeCnt_D_IN;
	if (hwordAddr_EN) hwordAddr <= `BSV_ASSIGNMENT_DELAY hwordAddr_D_IN;
	if (isReader_EN) isReader <= `BSV_ASSIGNMENT_DELAY isReader_D_IN;
	if (isTesting_EN) isTesting <= `BSV_ASSIGNMENT_DELAY isTesting_D_IN;
	if (isWriter_EN) isWriter <= `BSV_ASSIGNMENT_DELAY isWriter_D_IN;
	if (rdCycStart_EN)
	  rdCycStart <= `BSV_ASSIGNMENT_DELAY rdCycStart_D_IN;
	if (rdDuration_EN)
	  rdDuration <= `BSV_ASSIGNMENT_DELAY rdDuration_D_IN;
	if (respCnt_EN) respCnt <= `BSV_ASSIGNMENT_DELAY respCnt_D_IN;
	if (rgen_patV_EN) rgen_patV <= `BSV_ASSIGNMENT_DELAY rgen_patV_D_IN;
	if (seqLen_EN) seqLen <= `BSV_ASSIGNMENT_DELAY seqLen_D_IN;
	if (testCycleCount_EN)
	  testCycleCount <= `BSV_ASSIGNMENT_DELAY testCycleCount_D_IN;
	if (tstCtrl_EN) tstCtrl <= `BSV_ASSIGNMENT_DELAY tstCtrl_D_IN;
	if (unrollCnt_EN) unrollCnt <= `BSV_ASSIGNMENT_DELAY unrollCnt_D_IN;
	if (wci_wslv_cEdge_EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge_D_IN;
	if (wci_wslv_cState_EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState_D_IN;
	if (wci_wslv_ctlAckReg_EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg_D_IN;
	if (wci_wslv_ctlOpActive_EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive_D_IN;
	if (wci_wslv_illegalEdge_EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge_D_IN;
	if (wci_wslv_nState_EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState_D_IN;
	if (wci_wslv_reqF_countReg_EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg_D_IN;
	if (wci_wslv_respF_cntr_r_EN)
	  wci_wslv_respF_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_respF_cntr_r_D_IN;
	if (wci_wslv_respF_q_0_EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0_D_IN;
	if (wci_wslv_respF_q_1_EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1_D_IN;
	if (wci_wslv_sFlagReg_EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg_D_IN;
	if (wci_wslv_sThreadBusy_d_EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d_D_IN;
	if (wgen_patV_EN) wgen_patV <= `BSV_ASSIGNMENT_DELAY wgen_patV_D_IN;
	if (wmemiRdReq_EN)
	  wmemiRdReq <= `BSV_ASSIGNMENT_DELAY wmemiRdReq_D_IN;
	if (wmemiRdResp_EN)
	  wmemiRdResp <= `BSV_ASSIGNMENT_DELAY wmemiRdResp_D_IN;
	if (wmemiWrReq_EN)
	  wmemiWrReq <= `BSV_ASSIGNMENT_DELAY wmemiWrReq_D_IN;
	if (wmemi_busyWithMessage_EN)
	  wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      wmemi_busyWithMessage_D_IN;
	if (wmemi_dhF_cntr_r_EN)
	  wmemi_dhF_cntr_r <= `BSV_ASSIGNMENT_DELAY wmemi_dhF_cntr_r_D_IN;
	if (wmemi_dhF_q_0_EN)
	  wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY wmemi_dhF_q_0_D_IN;
	if (wmemi_dhF_q_1_EN)
	  wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY wmemi_dhF_q_1_D_IN;
	if (wmemi_errorSticky_EN)
	  wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY wmemi_errorSticky_D_IN;
	if (wmemi_operateD_EN)
	  wmemi_operateD <= `BSV_ASSIGNMENT_DELAY wmemi_operateD_D_IN;
	if (wmemi_peerIsReady_EN)
	  wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY wmemi_peerIsReady_D_IN;
	if (wmemi_reqF_cntr_r_EN)
	  wmemi_reqF_cntr_r <= `BSV_ASSIGNMENT_DELAY wmemi_reqF_cntr_r_D_IN;
	if (wmemi_reqF_q_0_EN)
	  wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wmemi_reqF_q_0_D_IN;
	if (wmemi_reqF_q_1_EN)
	  wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY wmemi_reqF_q_1_D_IN;
	if (wmemi_trafficSticky_EN)
	  wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wmemi_trafficSticky_D_IN;
	if (wtCycStart_EN)
	  wtCycStart <= `BSV_ASSIGNMENT_DELAY wtCycStart_D_IN;
	if (wtDuration_EN)
	  wtDuration <= `BSV_ASSIGNMENT_DELAY wtDuration_D_IN;
      end
    if (wmemi_statusR_EN)
      wmemi_statusR <= `BSV_ASSIGNMENT_DELAY wmemi_statusR_D_IN;
  end

  always@(posedge wciS0_Clk or `BSV_RESET_EDGE wciS0_MReset_n)
  if (wciS0_MReset_n == `BSV_RESET_VALUE)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wmemi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset_EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset_D_IN;
      if (wmemi_isReset_isInReset_EN)
	wmemi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wmemi_isReset_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    errorCount = 32'hAAAAAAAA;
    freeCnt = 32'hAAAAAAAA;
    hwordAddr = 32'hAAAAAAAA;
    isReader = 1'h0;
    isTesting = 1'h0;
    isWriter = 1'h0;
    rdCycStart = 32'hAAAAAAAA;
    rdDuration = 32'hAAAAAAAA;
    respCnt = 32'hAAAAAAAA;
    rgen_patV = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    seqLen = 32'hAAAAAAAA;
    testCycleCount = 32'hAAAAAAAA;
    tstCtrl = 32'hAAAAAAAA;
    unrollCnt = 32'hAAAAAAAA;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_cntr_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wgen_patV = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemiRdReq = 32'hAAAAAAAA;
    wmemiRdResp = 32'hAAAAAAAA;
    wmemiWrReq = 32'hAAAAAAAA;
    wmemi_busyWithMessage = 1'h0;
    wmemi_dhF_cntr_r = 2'h2;
    wmemi_dhF_q_0 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemi_dhF_q_1 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemi_errorSticky = 1'h0;
    wmemi_isReset_isInReset = 1'h0;
    wmemi_operateD = 1'h0;
    wmemi_peerIsReady = 1'h0;
    wmemi_reqF_cntr_r = 2'h2;
    wmemi_reqF_q_0 = 52'hAAAAAAAAAAAAA;
    wmemi_reqF_q_1 = 52'hAAAAAAAAAAAAA;
    wmemi_statusR = 8'hAA;
    wmemi_trafficSticky = 1'h0;
    wtCycStart = 32'hAAAAAAAA;
    wtDuration = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read_resp &&
	  NOT_rgen_gsF_first__07_EQ_wmemi_respF_first__0_ETC___d311)
	begin
	  v__h14155 = $time;
	  #0;
	end
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read_resp &&
	  NOT_rgen_gsF_first__07_EQ_wmemi_respF_first__0_ETC___d311)
	$display("[%0d]: %m: read_resp MISMATCH: exp:%0x got:%0x",
		 v__h14155,
		 rgen_gsF_D_OUT,
		 wmemi_respF_D_OUT[127:0]);
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3568 = $time;
	  #0;
	end
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3568,
		 wci_wslv_reqF_D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	begin
	  v__h14921 = $time;
	  #0;
	end
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting MemiTestWorker", v__h14921);
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/MemiTestWorker.bsv\", line 119, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3887 = $time;
	  #0;
	end
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3887,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3743 = $time;
	  #0;
	end
    if (wciS0_MReset_n != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3743,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkMemiTestWorker

