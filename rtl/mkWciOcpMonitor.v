//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Thu Nov 25 14:29:31 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// pmem_get                       O    33
// RDY_pmem_get                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// observe_MCmd                   I     3 reg
// observe_MAddrSpace             I     1 reg
// observe_MByteEn                I     4 reg
// observe_MAddr                  I    20 reg
// observe_MData                  I    32 reg
// observe_SResp                  I     2 reg
// observe_SData                  I    32 reg
// observe_SFlag                  I     2 reg
// observe_MFlag                  I     2 reg
// observe_MReset_n               I     1 reg
// observe_SThreadBusy            I     1 reg
// EN_pmem_get                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWciOcpMonitor(CLK,
		       RST_N,

		       observe_MCmd,

		       observe_MAddrSpace,

		       observe_MByteEn,

		       observe_MAddr,

		       observe_MData,

		       observe_SResp,

		       observe_SData,

		       observe_SThreadBusy,

		       observe_SFlag,

		       observe_MFlag,

		       observe_MReset_n,

		       EN_pmem_get,
		       pmem_get,
		       RDY_pmem_get);
  parameter [7 : 0] monId = 8'b0;
  input  CLK;
  input  RST_N;

  // action method observe_mCmd
  input  [2 : 0] observe_MCmd;

  // action method observe_mAddrSpace
  input  observe_MAddrSpace;

  // action method observe_mByteEn
  input  [3 : 0] observe_MByteEn;

  // action method observe_mAddr
  input  [19 : 0] observe_MAddr;

  // action method observe_mData
  input  [31 : 0] observe_MData;

  // action method observe_sResp
  input  [1 : 0] observe_SResp;

  // action method observe_sData
  input  [31 : 0] observe_SData;

  // action method observe_sThreadBusy
  input  observe_SThreadBusy;

  // action method observe_sFlag
  input  [1 : 0] observe_SFlag;

  // action method observe_mFlag
  input  [1 : 0] observe_MFlag;

  // action method observe_mResetn
  input  observe_MReset_n;

  // actionvalue method pmem_get
  input  EN_pmem_get;
  output [32 : 0] pmem_get;
  output RDY_pmem_get;

  // signals for module outputs
  wire [32 : 0] pmem_get;
  wire RDY_pmem_get;

  // inlined wires
  wire observer_r_sThreadBusy_1$wget, observer_r_sThreadBusy_1$whas;

  // register observer_r_mAddr
  reg [19 : 0] observer_r_mAddr;
  wire [19 : 0] observer_r_mAddr$D_IN;
  wire observer_r_mAddr$EN;

  // register observer_r_mAddrSpace
  reg observer_r_mAddrSpace;
  wire observer_r_mAddrSpace$D_IN, observer_r_mAddrSpace$EN;

  // register observer_r_mByteEn
  reg [3 : 0] observer_r_mByteEn;
  wire [3 : 0] observer_r_mByteEn$D_IN;
  wire observer_r_mByteEn$EN;

  // register observer_r_mCmd
  reg [2 : 0] observer_r_mCmd;
  wire [2 : 0] observer_r_mCmd$D_IN;
  wire observer_r_mCmd$EN;

  // register observer_r_mCmdD
  reg [2 : 0] observer_r_mCmdD;
  wire [2 : 0] observer_r_mCmdD$D_IN;
  wire observer_r_mCmdD$EN;

  // register observer_r_mData
  reg [31 : 0] observer_r_mData;
  wire [31 : 0] observer_r_mData$D_IN;
  wire observer_r_mData$EN;

  // register observer_r_mFlag
  reg [1 : 0] observer_r_mFlag;
  wire [1 : 0] observer_r_mFlag$D_IN;
  wire observer_r_mFlag$EN;

  // register observer_r_mResetn
  reg observer_r_mResetn;
  wire observer_r_mResetn$D_IN, observer_r_mResetn$EN;

  // register observer_r_mResetnD
  reg observer_r_mResetnD;
  wire observer_r_mResetnD$D_IN, observer_r_mResetnD$EN;

  // register observer_r_sData
  reg [31 : 0] observer_r_sData;
  wire [31 : 0] observer_r_sData$D_IN;
  wire observer_r_sData$EN;

  // register observer_r_sFlag
  reg [1 : 0] observer_r_sFlag;
  wire [1 : 0] observer_r_sFlag$D_IN;
  wire observer_r_sFlag$EN;

  // register observer_r_sResp
  reg [1 : 0] observer_r_sResp;
  wire [1 : 0] observer_r_sResp$D_IN;
  wire observer_r_sResp$EN;

  // register observer_r_sRespD
  reg [1 : 0] observer_r_sRespD;
  wire [1 : 0] observer_r_sRespD$D_IN;
  wire observer_r_sRespD$EN;

  // register observer_r_sThreadBusy
  reg observer_r_sThreadBusy;
  wire observer_r_sThreadBusy$D_IN, observer_r_sThreadBusy$EN;

  // register observer_readInFlight
  reg observer_readInFlight;
  wire observer_readInFlight$D_IN, observer_readInFlight$EN;

  // register pmemgen_dwRemain
  reg [1 : 0] pmemgen_dwRemain;
  wire [1 : 0] pmemgen_dwRemain$D_IN;
  wire pmemgen_dwRemain$EN;

  // register pmemgen_srcTag
  reg [7 : 0] pmemgen_srcTag;
  wire [7 : 0] pmemgen_srcTag$D_IN;
  wire pmemgen_srcTag$EN;

  // ports of submodule observer_evF
  reg [73 : 0] observer_evF$D_IN;
  wire [73 : 0] observer_evF$D_OUT;
  wire observer_evF$CLR,
       observer_evF$DEQ,
       observer_evF$EMPTY_N,
       observer_evF$ENQ,
       observer_evF$FULL_N;

  // ports of submodule pmemgen_evF
  reg [73 : 0] pmemgen_evF$D_IN;
  wire [73 : 0] pmemgen_evF$D_OUT;
  wire pmemgen_evF$CLR,
       pmemgen_evF$DEQ,
       pmemgen_evF$EMPTY_N,
       pmemgen_evF$ENQ,
       pmemgen_evF$FULL_N;

  // ports of submodule pmemgen_pmemF
  wire [32 : 0] pmemgen_pmemF$D_IN, pmemgen_pmemF$D_OUT;
  wire pmemgen_pmemF$CLR,
       pmemgen_pmemF$DEQ,
       pmemgen_pmemF$EMPTY_N,
       pmemgen_pmemF$ENQ,
       pmemgen_pmemF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_event_cmd,
       CAN_FIRE_RL_observer_mCmd_state,
       CAN_FIRE_RL_observer_mResetn_state,
       CAN_FIRE_RL_observer_r_sThreadBusy__dreg_update,
       CAN_FIRE_RL_observer_request_detected,
       CAN_FIRE_RL_observer_reset_changed,
       CAN_FIRE_RL_observer_response_detected,
       CAN_FIRE_RL_observer_sResp_state,
       CAN_FIRE_RL_pmemgen_gen_message_body,
       CAN_FIRE_RL_pmemgen_gen_message_head,
       CAN_FIRE_observe_mAddr,
       CAN_FIRE_observe_mAddrSpace,
       CAN_FIRE_observe_mByteEn,
       CAN_FIRE_observe_mCmd,
       CAN_FIRE_observe_mData,
       CAN_FIRE_observe_mFlag,
       CAN_FIRE_observe_mResetn,
       CAN_FIRE_observe_sData,
       CAN_FIRE_observe_sFlag,
       CAN_FIRE_observe_sResp,
       CAN_FIRE_observe_sThreadBusy,
       CAN_FIRE_pmem_get,
       WILL_FIRE_RL_event_cmd,
       WILL_FIRE_RL_observer_mCmd_state,
       WILL_FIRE_RL_observer_mResetn_state,
       WILL_FIRE_RL_observer_r_sThreadBusy__dreg_update,
       WILL_FIRE_RL_observer_request_detected,
       WILL_FIRE_RL_observer_reset_changed,
       WILL_FIRE_RL_observer_response_detected,
       WILL_FIRE_RL_observer_sResp_state,
       WILL_FIRE_RL_pmemgen_gen_message_body,
       WILL_FIRE_RL_pmemgen_gen_message_head,
       WILL_FIRE_observe_mAddr,
       WILL_FIRE_observe_mAddrSpace,
       WILL_FIRE_observe_mByteEn,
       WILL_FIRE_observe_mCmd,
       WILL_FIRE_observe_mData,
       WILL_FIRE_observe_mFlag,
       WILL_FIRE_observe_mResetn,
       WILL_FIRE_observe_sData,
       WILL_FIRE_observe_sFlag,
       WILL_FIRE_observe_sResp,
       WILL_FIRE_observe_sThreadBusy,
       WILL_FIRE_pmem_get;

  // inputs to muxes for submodule ports
  reg [1 : 0] MUX_pmemgen_dwRemain$write_1__VAL_2;
  wire [73 : 0] MUX_observer_evF$enq_1__VAL_1,
		MUX_observer_evF$enq_1__VAL_2,
		MUX_observer_evF$enq_1__VAL_3;
  wire [32 : 0] MUX_pmemgen_pmemF$enq_1__VAL_1,
		MUX_pmemgen_pmemF$enq_1__VAL_2;
  wire [1 : 0] MUX_pmemgen_dwRemain$write_1__VAL_1;
  wire MUX_observer_evF$enq_1__SEL_1, MUX_observer_evF$enq_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h1478, v__h1501;
  reg [7 : 0] CASE_observer_evFD_OUT_BITS_39_TO_32_255_0_ob_ETC__q26,
	      CASE_observer_evFD_OUT_BITS_71_TO_64_255_0_ob_ETC__q24,
	      CASE_observer_evFD_OUT_BITS_7_TO_0_255_0_obse_ETC__q25,
	      CASE_pmemgen_pmemFD_OUT_BITS_23_TO_16_255_0_p_ETC__q1,
	      x__h2659;
  reg CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q10,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q11,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q12,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q13,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q14,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q15,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q16,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q17,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q18,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q19,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q2,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q20,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q21,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q22,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q23,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q3,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q4,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q5,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q6,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q7,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q8,
      CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q9;
  wire [31 : 0] x__h1125;
  wire [23 : 0] IF_IF_pmemgen_evF_first__6_BITS_73_TO_72_7_EQ__ETC___d200;

  // action method observe_mCmd
  assign CAN_FIRE_observe_mCmd = 1'd1 ;
  assign WILL_FIRE_observe_mCmd = 1'd1 ;

  // action method observe_mAddrSpace
  assign CAN_FIRE_observe_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_observe_mAddrSpace = 1'd1 ;

  // action method observe_mByteEn
  assign CAN_FIRE_observe_mByteEn = 1'd1 ;
  assign WILL_FIRE_observe_mByteEn = 1'd1 ;

  // action method observe_mAddr
  assign CAN_FIRE_observe_mAddr = 1'd1 ;
  assign WILL_FIRE_observe_mAddr = 1'd1 ;

  // action method observe_mData
  assign CAN_FIRE_observe_mData = 1'd1 ;
  assign WILL_FIRE_observe_mData = 1'd1 ;

  // action method observe_sResp
  assign CAN_FIRE_observe_sResp = 1'd1 ;
  assign WILL_FIRE_observe_sResp = 1'd1 ;

  // action method observe_sData
  assign CAN_FIRE_observe_sData = 1'd1 ;
  assign WILL_FIRE_observe_sData = 1'd1 ;

  // action method observe_sThreadBusy
  assign CAN_FIRE_observe_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_observe_sThreadBusy = observe_SThreadBusy ;

  // action method observe_sFlag
  assign CAN_FIRE_observe_sFlag = 1'd1 ;
  assign WILL_FIRE_observe_sFlag = 1'd1 ;

  // action method observe_mFlag
  assign CAN_FIRE_observe_mFlag = 1'd1 ;
  assign WILL_FIRE_observe_mFlag = 1'd1 ;

  // action method observe_mResetn
  assign CAN_FIRE_observe_mResetn = 1'd1 ;
  assign WILL_FIRE_observe_mResetn = 1'd1 ;

  // actionvalue method pmem_get
  assign pmem_get =
	     { pmemgen_pmemF$D_OUT[32],
	       pmemgen_pmemF$D_OUT[32] ?
		 pmemgen_pmemF$D_OUT[31:0] :
		 { pmemgen_pmemF$D_OUT[31:24],
		   CASE_pmemgen_pmemFD_OUT_BITS_23_TO_16_255_0_p_ETC__q1,
		   pmemgen_pmemF$D_OUT[15:0] } } ;
  assign RDY_pmem_get = pmemgen_pmemF$EMPTY_N ;
  assign CAN_FIRE_pmem_get = pmemgen_pmemF$EMPTY_N ;
  assign WILL_FIRE_pmem_get = EN_pmem_get ;

  // submodule observer_evF
  FIFO2 #(.width(32'd74), .guarded(32'd1)) observer_evF(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(observer_evF$D_IN),
							.ENQ(observer_evF$ENQ),
							.DEQ(observer_evF$DEQ),
							.CLR(observer_evF$CLR),
							.D_OUT(observer_evF$D_OUT),
							.FULL_N(observer_evF$FULL_N),
							.EMPTY_N(observer_evF$EMPTY_N));

  // submodule pmemgen_evF
  FIFO2 #(.width(32'd74), .guarded(32'd1)) pmemgen_evF(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(pmemgen_evF$D_IN),
						       .ENQ(pmemgen_evF$ENQ),
						       .DEQ(pmemgen_evF$DEQ),
						       .CLR(pmemgen_evF$CLR),
						       .D_OUT(pmemgen_evF$D_OUT),
						       .FULL_N(pmemgen_evF$FULL_N),
						       .EMPTY_N(pmemgen_evF$EMPTY_N));

  // submodule pmemgen_pmemF
  FIFO2 #(.width(32'd33), .guarded(32'd1)) pmemgen_pmemF(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(pmemgen_pmemF$D_IN),
							 .ENQ(pmemgen_pmemF$ENQ),
							 .DEQ(pmemgen_pmemF$DEQ),
							 .CLR(pmemgen_pmemF$CLR),
							 .D_OUT(pmemgen_pmemF$D_OUT),
							 .FULL_N(pmemgen_pmemF$FULL_N),
							 .EMPTY_N(pmemgen_pmemF$EMPTY_N));

  // rule RL_observer_request_detected
  assign CAN_FIRE_RL_observer_request_detected =
	     ((observer_r_mCmd == 3'd1) ?
		observer_evF$FULL_N :
		observer_r_mCmd != 3'd2 || observer_evF$FULL_N) &&
	     observer_r_mCmdD == 3'd0 &&
	     observer_r_mCmd != 3'd0 ;
  assign WILL_FIRE_RL_observer_request_detected =
	     CAN_FIRE_RL_observer_request_detected ;

  // rule RL_observer_mCmd_state
  assign CAN_FIRE_RL_observer_mCmd_state = 1'd1 ;
  assign WILL_FIRE_RL_observer_mCmd_state = 1'd1 ;

  // rule RL_observer_response_detected
  assign CAN_FIRE_RL_observer_response_detected =
	     (observer_r_sResp != 2'd1 || observer_evF$FULL_N) &&
	     observer_r_sRespD == 2'd0 &&
	     observer_r_sResp != 2'd0 ;
  assign WILL_FIRE_RL_observer_response_detected =
	     CAN_FIRE_RL_observer_response_detected &&
	     !WILL_FIRE_RL_observer_request_detected ;

  // rule RL_observer_sResp_state
  assign CAN_FIRE_RL_observer_sResp_state = 1'd1 ;
  assign WILL_FIRE_RL_observer_sResp_state = 1'd1 ;

  // rule RL_observer_reset_changed
  assign CAN_FIRE_RL_observer_reset_changed =
	     observer_evF$FULL_N && observer_r_mResetnD ^ observer_r_mResetn ;
  assign WILL_FIRE_RL_observer_reset_changed =
	     CAN_FIRE_RL_observer_reset_changed &&
	     !WILL_FIRE_RL_observer_response_detected &&
	     !WILL_FIRE_RL_observer_request_detected ;

  // rule RL_observer_mResetn_state
  assign CAN_FIRE_RL_observer_mResetn_state = 1'd1 ;
  assign WILL_FIRE_RL_observer_mResetn_state = 1'd1 ;

  // rule RL_event_cmd
  assign CAN_FIRE_RL_event_cmd = observer_evF$EMPTY_N && pmemgen_evF$FULL_N ;
  assign WILL_FIRE_RL_event_cmd = CAN_FIRE_RL_event_cmd ;

  // rule RL_observer_r_sThreadBusy__dreg_update
  assign CAN_FIRE_RL_observer_r_sThreadBusy__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_observer_r_sThreadBusy__dreg_update = 1'd1 ;

  // rule RL_pmemgen_gen_message_head
  assign CAN_FIRE_RL_pmemgen_gen_message_head =
	     pmemgen_evF$EMPTY_N && pmemgen_pmemF$FULL_N &&
	     pmemgen_dwRemain == 2'd0 ;
  assign WILL_FIRE_RL_pmemgen_gen_message_head =
	     CAN_FIRE_RL_pmemgen_gen_message_head ;

  // rule RL_pmemgen_gen_message_body
  assign CAN_FIRE_RL_pmemgen_gen_message_body =
	     pmemgen_evF$EMPTY_N && pmemgen_pmemF$FULL_N &&
	     pmemgen_dwRemain != 2'd0 ;
  assign WILL_FIRE_RL_pmemgen_gen_message_body =
	     CAN_FIRE_RL_pmemgen_gen_message_body ;

  // inputs to muxes for submodule ports
  assign MUX_observer_evF$enq_1__SEL_1 =
	     WILL_FIRE_RL_observer_response_detected &&
	     observer_r_sResp == 2'd1 ;
  assign MUX_observer_evF$enq_1__SEL_2 =
	     WILL_FIRE_RL_observer_request_detected &&
	     (observer_r_mCmd == 3'd1 || observer_r_mCmd == 3'd2) ;
  assign MUX_observer_evF$enq_1__VAL_1 =
	     { 34'h1AAAAAAAA,
	       observer_readInFlight ? 8'd64 : 8'd48,
	       observer_r_sData } ;
  assign MUX_observer_evF$enq_1__VAL_2 =
	     (observer_r_mCmd == 3'd1) ?
	       { 10'd528, x__h1125, observer_r_mData } :
	       { 54'h1AAAAAAAA20000, observer_r_mAddr } ;
  assign MUX_observer_evF$enq_1__VAL_3 =
	     { 66'h0AAAAAAAAAAAAAAAA, observer_r_mResetn ? 8'd1 : 8'd2 } ;
  assign MUX_pmemgen_dwRemain$write_1__VAL_1 = pmemgen_dwRemain - 2'd1 ;
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0, 2'd1:
	  MUX_pmemgen_dwRemain$write_1__VAL_2 = pmemgen_evF$D_OUT[73:72];
      default: MUX_pmemgen_dwRemain$write_1__VAL_2 = 2'd2;
    endcase
  end
  assign MUX_pmemgen_pmemF$enq_1__VAL_1 =
	     { 1'd0,
	       monId,
	       IF_IF_pmemgen_evF_first__6_BITS_73_TO_72_7_EQ__ETC___d200 } ;
  assign MUX_pmemgen_pmemF$enq_1__VAL_2 =
	     { 1'd1,
	       (pmemgen_evF$D_OUT[73:72] == 2'd0) ?
		 32'd0 :
		 ((pmemgen_evF$D_OUT[73:72] == 2'd1 ||
		   pmemgen_dwRemain == 2'd1) ?
		    pmemgen_evF$D_OUT[31:0] :
		    pmemgen_evF$D_OUT[63:32]) } ;

  // inlined wires
  assign observer_r_sThreadBusy_1$wget = 1'b1 ;
  assign observer_r_sThreadBusy_1$whas = observe_SThreadBusy ;

  // register observer_r_mAddr
  assign observer_r_mAddr$D_IN = observe_MAddr ;
  assign observer_r_mAddr$EN = 1'd1 ;

  // register observer_r_mAddrSpace
  assign observer_r_mAddrSpace$D_IN = observe_MAddrSpace ;
  assign observer_r_mAddrSpace$EN = 1'd1 ;

  // register observer_r_mByteEn
  assign observer_r_mByteEn$D_IN = observe_MByteEn ;
  assign observer_r_mByteEn$EN = 1'd1 ;

  // register observer_r_mCmd
  assign observer_r_mCmd$D_IN = observe_MCmd ;
  assign observer_r_mCmd$EN = 1'd1 ;

  // register observer_r_mCmdD
  assign observer_r_mCmdD$D_IN = observer_r_mCmd ;
  assign observer_r_mCmdD$EN = 1'd1 ;

  // register observer_r_mData
  assign observer_r_mData$D_IN = observe_MData ;
  assign observer_r_mData$EN = 1'd1 ;

  // register observer_r_mFlag
  assign observer_r_mFlag$D_IN = observe_MFlag ;
  assign observer_r_mFlag$EN = 1'd1 ;

  // register observer_r_mResetn
  assign observer_r_mResetn$D_IN = observe_MReset_n ;
  assign observer_r_mResetn$EN = 1'd1 ;

  // register observer_r_mResetnD
  assign observer_r_mResetnD$D_IN = observer_r_mResetn ;
  assign observer_r_mResetnD$EN = 1'd1 ;

  // register observer_r_sData
  assign observer_r_sData$D_IN = observe_SData ;
  assign observer_r_sData$EN = 1'd1 ;

  // register observer_r_sFlag
  assign observer_r_sFlag$D_IN = observe_SFlag ;
  assign observer_r_sFlag$EN = 1'd1 ;

  // register observer_r_sResp
  assign observer_r_sResp$D_IN = observe_SResp ;
  assign observer_r_sResp$EN = 1'd1 ;

  // register observer_r_sRespD
  assign observer_r_sRespD$D_IN = observer_r_sResp ;
  assign observer_r_sRespD$EN = 1'd1 ;

  // register observer_r_sThreadBusy
  assign observer_r_sThreadBusy$D_IN = observe_SThreadBusy ;
  assign observer_r_sThreadBusy$EN = 1'd1 ;

  // register observer_readInFlight
  assign observer_readInFlight$D_IN =
	     WILL_FIRE_RL_observer_request_detected &&
	     observer_r_mCmd == 3'd2 ;
  assign observer_readInFlight$EN =
	     WILL_FIRE_RL_observer_request_detected ||
	     WILL_FIRE_RL_observer_response_detected ;

  // register pmemgen_dwRemain
  assign pmemgen_dwRemain$D_IN =
	     WILL_FIRE_RL_pmemgen_gen_message_body ?
	       MUX_pmemgen_dwRemain$write_1__VAL_1 :
	       MUX_pmemgen_dwRemain$write_1__VAL_2 ;
  assign pmemgen_dwRemain$EN =
	     WILL_FIRE_RL_pmemgen_gen_message_body ||
	     WILL_FIRE_RL_pmemgen_gen_message_head ;

  // register pmemgen_srcTag
  assign pmemgen_srcTag$D_IN = pmemgen_srcTag + 8'd1 ;
  assign pmemgen_srcTag$EN = CAN_FIRE_RL_pmemgen_gen_message_head ;

  // submodule observer_evF
  always@(MUX_observer_evF$enq_1__SEL_1 or
	  MUX_observer_evF$enq_1__VAL_1 or
	  MUX_observer_evF$enq_1__SEL_2 or
	  MUX_observer_evF$enq_1__VAL_2 or
	  WILL_FIRE_RL_observer_reset_changed or
	  MUX_observer_evF$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_observer_evF$enq_1__SEL_1:
	  observer_evF$D_IN = MUX_observer_evF$enq_1__VAL_1;
      MUX_observer_evF$enq_1__SEL_2:
	  observer_evF$D_IN = MUX_observer_evF$enq_1__VAL_2;
      WILL_FIRE_RL_observer_reset_changed:
	  observer_evF$D_IN = MUX_observer_evF$enq_1__VAL_3;
      default: observer_evF$D_IN =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign observer_evF$ENQ =
	     WILL_FIRE_RL_observer_response_detected &&
	     observer_r_sResp == 2'd1 ||
	     WILL_FIRE_RL_observer_request_detected &&
	     (observer_r_mCmd == 3'd1 || observer_r_mCmd == 3'd2) ||
	     WILL_FIRE_RL_observer_reset_changed ;
  assign observer_evF$DEQ = CAN_FIRE_RL_event_cmd ;
  assign observer_evF$CLR = 1'b0 ;

  // submodule pmemgen_evF
  always@(observer_evF$D_OUT or
	  CASE_observer_evFD_OUT_BITS_71_TO_64_255_0_ob_ETC__q24 or
	  CASE_observer_evFD_OUT_BITS_7_TO_0_255_0_obse_ETC__q25 or
	  CASE_observer_evFD_OUT_BITS_39_TO_32_255_0_ob_ETC__q26)
  begin
    case (observer_evF$D_OUT[73:72])
      2'd0:
	  pmemgen_evF$D_IN =
	      { 66'h0AAAAAAAAAAAAAAAA,
		CASE_observer_evFD_OUT_BITS_7_TO_0_255_0_obse_ETC__q25 };
      2'd1:
	  pmemgen_evF$D_IN =
	      { observer_evF$D_OUT[73:72],
		32'hAAAAAAAA,
		CASE_observer_evFD_OUT_BITS_39_TO_32_255_0_ob_ETC__q26,
		observer_evF$D_OUT[31:0] };
      default: pmemgen_evF$D_IN =
		   { 2'd2,
		     CASE_observer_evFD_OUT_BITS_71_TO_64_255_0_ob_ETC__q24,
		     observer_evF$D_OUT[63:0] };
    endcase
  end
  assign pmemgen_evF$ENQ = CAN_FIRE_RL_event_cmd ;
  assign pmemgen_evF$DEQ =
	     WILL_FIRE_RL_pmemgen_gen_message_head &&
	     pmemgen_evF$D_OUT[73:72] == 2'd0 ||
	     WILL_FIRE_RL_pmemgen_gen_message_body &&
	     pmemgen_dwRemain == 2'd1 ;
  assign pmemgen_evF$CLR = 1'b0 ;

  // submodule pmemgen_pmemF
  assign pmemgen_pmemF$D_IN =
	     WILL_FIRE_RL_pmemgen_gen_message_head ?
	       MUX_pmemgen_pmemF$enq_1__VAL_1 :
	       MUX_pmemgen_pmemF$enq_1__VAL_2 ;
  assign pmemgen_pmemF$ENQ =
	     WILL_FIRE_RL_pmemgen_gen_message_head ||
	     WILL_FIRE_RL_pmemgen_gen_message_body ;
  assign pmemgen_pmemF$DEQ = EN_pmem_get ;
  assign pmemgen_pmemF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_pmemgen_evF_first__6_BITS_73_TO_72_7_EQ__ETC___d200 =
	     { CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q2 ?
		 8'd0 :
		 (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q3 ?
		    8'd1 :
		    (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q4 ?
		       8'd2 :
		       (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q5 ?
			  8'd3 :
			  (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q6 ?
			     8'd4 :
			     (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q7 ?
				8'd5 :
				(CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q8 ?
				   8'd6 :
				   (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q9 ?
				      8'd7 :
				      (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q10 ?
					 8'd8 :
					 (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q11 ?
					    8'd9 :
					    (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q12 ?
					       8'd10 :
					       (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q13 ?
						  8'd11 :
						  (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q14 ?
						     8'd12 :
						     (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q15 ?
							8'd13 :
							(CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q16 ?
							   8'd14 :
							   (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q17 ?
							      8'd16 :
							      (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q18 ?
								 8'd32 :
								 (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q19 ?
								    8'd48 :
								    (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q20 ?
								       8'd64 :
								       (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q21 ?
									  8'd128 :
									  (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q22 ?
									     8'd144 :
									     (CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q23 ?
										8'd160 :
										8'd255))))))))))))))))))))),
	       pmemgen_srcTag,
	       x__h2659 } ;
  assign x__h1125 = { 12'd0, observer_r_mAddr } ;
  always@(pmemgen_pmemF$D_OUT)
  begin
    case (pmemgen_pmemF$D_OUT[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemgen_pmemFD_OUT_BITS_23_TO_16_255_0_p_ETC__q1 =
	      pmemgen_pmemF$D_OUT[23:16];
      default: CASE_pmemgen_pmemFD_OUT_BITS_23_TO_16_255_0_p_ETC__q1 = 8'd255;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0: x__h2659 = 8'd1;
      2'd1: x__h2659 = 8'd2;
      default: x__h2659 = 8'd3;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q2 =
	      pmemgen_evF$D_OUT[7:0] == 8'd0;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q2 =
	      pmemgen_evF$D_OUT[39:32] == 8'd0;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q2 =
		   pmemgen_evF$D_OUT[71:64] == 8'd0;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q3 =
	      pmemgen_evF$D_OUT[7:0] == 8'd1;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q3 =
	      pmemgen_evF$D_OUT[39:32] == 8'd1;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q3 =
		   pmemgen_evF$D_OUT[71:64] == 8'd1;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q4 =
	      pmemgen_evF$D_OUT[7:0] == 8'd2;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q4 =
	      pmemgen_evF$D_OUT[39:32] == 8'd2;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q4 =
		   pmemgen_evF$D_OUT[71:64] == 8'd2;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q5 =
	      pmemgen_evF$D_OUT[7:0] == 8'd3;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q5 =
	      pmemgen_evF$D_OUT[39:32] == 8'd3;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q5 =
		   pmemgen_evF$D_OUT[71:64] == 8'd3;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q6 =
	      pmemgen_evF$D_OUT[7:0] == 8'd4;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q6 =
	      pmemgen_evF$D_OUT[39:32] == 8'd4;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q6 =
		   pmemgen_evF$D_OUT[71:64] == 8'd4;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q7 =
	      pmemgen_evF$D_OUT[7:0] == 8'd5;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q7 =
	      pmemgen_evF$D_OUT[39:32] == 8'd5;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q7 =
		   pmemgen_evF$D_OUT[71:64] == 8'd5;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q8 =
	      pmemgen_evF$D_OUT[7:0] == 8'd6;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q8 =
	      pmemgen_evF$D_OUT[39:32] == 8'd6;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q8 =
		   pmemgen_evF$D_OUT[71:64] == 8'd6;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q9 =
	      pmemgen_evF$D_OUT[7:0] == 8'd7;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q9 =
	      pmemgen_evF$D_OUT[39:32] == 8'd7;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q9 =
		   pmemgen_evF$D_OUT[71:64] == 8'd7;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q10 =
	      pmemgen_evF$D_OUT[7:0] == 8'd8;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q10 =
	      pmemgen_evF$D_OUT[39:32] == 8'd8;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q10 =
		   pmemgen_evF$D_OUT[71:64] == 8'd8;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q11 =
	      pmemgen_evF$D_OUT[7:0] == 8'd9;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q11 =
	      pmemgen_evF$D_OUT[39:32] == 8'd9;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q11 =
		   pmemgen_evF$D_OUT[71:64] == 8'd9;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q12 =
	      pmemgen_evF$D_OUT[7:0] == 8'd10;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q12 =
	      pmemgen_evF$D_OUT[39:32] == 8'd10;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q12 =
		   pmemgen_evF$D_OUT[71:64] == 8'd10;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q13 =
	      pmemgen_evF$D_OUT[7:0] == 8'd11;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q13 =
	      pmemgen_evF$D_OUT[39:32] == 8'd11;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q13 =
		   pmemgen_evF$D_OUT[71:64] == 8'd11;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q14 =
	      pmemgen_evF$D_OUT[7:0] == 8'd12;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q14 =
	      pmemgen_evF$D_OUT[39:32] == 8'd12;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q14 =
		   pmemgen_evF$D_OUT[71:64] == 8'd12;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q15 =
	      pmemgen_evF$D_OUT[7:0] == 8'd13;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q15 =
	      pmemgen_evF$D_OUT[39:32] == 8'd13;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q15 =
		   pmemgen_evF$D_OUT[71:64] == 8'd13;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q16 =
	      pmemgen_evF$D_OUT[7:0] == 8'd14;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q16 =
	      pmemgen_evF$D_OUT[39:32] == 8'd14;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q16 =
		   pmemgen_evF$D_OUT[71:64] == 8'd14;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q17 =
	      pmemgen_evF$D_OUT[7:0] == 8'd16;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q17 =
	      pmemgen_evF$D_OUT[39:32] == 8'd16;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q17 =
		   pmemgen_evF$D_OUT[71:64] == 8'd16;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q18 =
	      pmemgen_evF$D_OUT[7:0] == 8'd32;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q18 =
	      pmemgen_evF$D_OUT[39:32] == 8'd32;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q18 =
		   pmemgen_evF$D_OUT[71:64] == 8'd32;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q19 =
	      pmemgen_evF$D_OUT[7:0] == 8'd48;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q19 =
	      pmemgen_evF$D_OUT[39:32] == 8'd48;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q19 =
		   pmemgen_evF$D_OUT[71:64] == 8'd48;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q20 =
	      pmemgen_evF$D_OUT[7:0] == 8'd64;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q20 =
	      pmemgen_evF$D_OUT[39:32] == 8'd64;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q20 =
		   pmemgen_evF$D_OUT[71:64] == 8'd64;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q21 =
	      pmemgen_evF$D_OUT[7:0] == 8'd128;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q21 =
	      pmemgen_evF$D_OUT[39:32] == 8'd128;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q21 =
		   pmemgen_evF$D_OUT[71:64] == 8'd128;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q22 =
	      pmemgen_evF$D_OUT[7:0] == 8'd144;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q22 =
	      pmemgen_evF$D_OUT[39:32] == 8'd144;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q22 =
		   pmemgen_evF$D_OUT[71:64] == 8'd144;
    endcase
  end
  always@(pmemgen_evF$D_OUT)
  begin
    case (pmemgen_evF$D_OUT[73:72])
      2'd0:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q23 =
	      pmemgen_evF$D_OUT[7:0] == 8'd160;
      2'd1:
	  CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q23 =
	      pmemgen_evF$D_OUT[39:32] == 8'd160;
      default: CASE_pmemgen_evFD_OUT_BITS_73_TO_72_pmemgen_e_ETC__q23 =
		   pmemgen_evF$D_OUT[71:64] == 8'd160;
    endcase
  end
  always@(observer_evF$D_OUT)
  begin
    case (observer_evF$D_OUT[71:64])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_observer_evFD_OUT_BITS_71_TO_64_255_0_ob_ETC__q24 =
	      observer_evF$D_OUT[71:64];
      default: CASE_observer_evFD_OUT_BITS_71_TO_64_255_0_ob_ETC__q24 =
		   8'd255;
    endcase
  end
  always@(observer_evF$D_OUT)
  begin
    case (observer_evF$D_OUT[7:0])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_observer_evFD_OUT_BITS_7_TO_0_255_0_obse_ETC__q25 =
	      observer_evF$D_OUT[7:0];
      default: CASE_observer_evFD_OUT_BITS_7_TO_0_255_0_obse_ETC__q25 =
		   8'd255;
    endcase
  end
  always@(observer_evF$D_OUT)
  begin
    case (observer_evF$D_OUT[39:32])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_observer_evFD_OUT_BITS_39_TO_32_255_0_ob_ETC__q26 =
	      observer_evF$D_OUT[39:32];
      default: CASE_observer_evFD_OUT_BITS_39_TO_32_255_0_ob_ETC__q26 =
		   8'd255;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        observer_r_mAddr <= `BSV_ASSIGNMENT_DELAY 20'd0;
	observer_r_mAddrSpace <= `BSV_ASSIGNMENT_DELAY 1'd0;
	observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY 4'd0;
	observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY 3'd0;
	observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY 3'd0;
	observer_r_mData <= `BSV_ASSIGNMENT_DELAY 32'd0;
	observer_r_mFlag <= `BSV_ASSIGNMENT_DELAY 2'd0;
	observer_r_mResetn <= `BSV_ASSIGNMENT_DELAY 1'd0;
	observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	observer_r_sData <= `BSV_ASSIGNMENT_DELAY 32'd0;
	observer_r_sFlag <= `BSV_ASSIGNMENT_DELAY 2'd0;
	observer_r_sResp <= `BSV_ASSIGNMENT_DELAY 2'd0;
	observer_r_sRespD <= `BSV_ASSIGNMENT_DELAY 2'd0;
	observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	observer_readInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemgen_dwRemain <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemgen_srcTag <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (observer_r_mAddr$EN)
	  observer_r_mAddr <= `BSV_ASSIGNMENT_DELAY observer_r_mAddr$D_IN;
	if (observer_r_mAddrSpace$EN)
	  observer_r_mAddrSpace <= `BSV_ASSIGNMENT_DELAY
	      observer_r_mAddrSpace$D_IN;
	if (observer_r_mByteEn$EN)
	  observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY observer_r_mByteEn$D_IN;
	if (observer_r_mCmd$EN)
	  observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY observer_r_mCmd$D_IN;
	if (observer_r_mCmdD$EN)
	  observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY observer_r_mCmdD$D_IN;
	if (observer_r_mData$EN)
	  observer_r_mData <= `BSV_ASSIGNMENT_DELAY observer_r_mData$D_IN;
	if (observer_r_mFlag$EN)
	  observer_r_mFlag <= `BSV_ASSIGNMENT_DELAY observer_r_mFlag$D_IN;
	if (observer_r_mResetn$EN)
	  observer_r_mResetn <= `BSV_ASSIGNMENT_DELAY observer_r_mResetn$D_IN;
	if (observer_r_mResetnD$EN)
	  observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY
	      observer_r_mResetnD$D_IN;
	if (observer_r_sData$EN)
	  observer_r_sData <= `BSV_ASSIGNMENT_DELAY observer_r_sData$D_IN;
	if (observer_r_sFlag$EN)
	  observer_r_sFlag <= `BSV_ASSIGNMENT_DELAY observer_r_sFlag$D_IN;
	if (observer_r_sResp$EN)
	  observer_r_sResp <= `BSV_ASSIGNMENT_DELAY observer_r_sResp$D_IN;
	if (observer_r_sRespD$EN)
	  observer_r_sRespD <= `BSV_ASSIGNMENT_DELAY observer_r_sRespD$D_IN;
	if (observer_r_sThreadBusy$EN)
	  observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY
	      observer_r_sThreadBusy$D_IN;
	if (observer_readInFlight$EN)
	  observer_readInFlight <= `BSV_ASSIGNMENT_DELAY
	      observer_readInFlight$D_IN;
	if (pmemgen_dwRemain$EN)
	  pmemgen_dwRemain <= `BSV_ASSIGNMENT_DELAY pmemgen_dwRemain$D_IN;
	if (pmemgen_srcTag$EN)
	  pmemgen_srcTag <= `BSV_ASSIGNMENT_DELAY pmemgen_srcTag$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    observer_r_mAddr = 20'hAAAAA;
    observer_r_mAddrSpace = 1'h0;
    observer_r_mByteEn = 4'hA;
    observer_r_mCmd = 3'h2;
    observer_r_mCmdD = 3'h2;
    observer_r_mData = 32'hAAAAAAAA;
    observer_r_mFlag = 2'h2;
    observer_r_mResetn = 1'h0;
    observer_r_mResetnD = 1'h0;
    observer_r_sData = 32'hAAAAAAAA;
    observer_r_sFlag = 2'h2;
    observer_r_sResp = 2'h2;
    observer_r_sRespD = 2'h2;
    observer_r_sThreadBusy = 1'h0;
    observer_readInFlight = 1'h0;
    pmemgen_dwRemain = 2'h2;
    pmemgen_srcTag = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_observer_reset_changed && observer_r_mResetn)
	begin
	  v__h1478 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_observer_reset_changed && observer_r_mResetn)
	$display("[%0d]: %m: WCI reset DE-ASSERTED", v__h1478);
    if (RST_N)
      if (WILL_FIRE_RL_observer_reset_changed && !observer_r_mResetn)
	begin
	  v__h1501 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_observer_reset_changed && !observer_r_mResetn)
	$display("[%0d]: %m: WCI reset IS-ASSERTED", v__h1501);
    if (RST_N)
      if (WILL_FIRE_RL_pmemgen_gen_message_body &&
	  pmemgen_evF$D_OUT[73:72] == 2'd0)
	$display("Error");
  end
  // synopsys translate_on
endmodule  // mkWciOcpMonitor

