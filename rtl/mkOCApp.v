//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Sun Nov 14 10:53:47 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// wci_s_0_SResp                  O     2 const
// wci_s_0_SData                  O    32 const
// wci_s_0_SThreadBusy            O     1 const
// wci_s_0_SFlag                  O     2 const
// wci_s_1_SResp                  O     2 const
// wci_s_1_SData                  O    32 const
// wci_s_1_SThreadBusy            O     1 const
// wci_s_1_SFlag                  O     2 const
// wci_s_2_SResp                  O     2 reg
// wci_s_2_SData                  O    32 reg
// wci_s_2_SThreadBusy            O     1
// wci_s_2_SFlag                  O     2
// wci_s_3_SResp                  O     2 reg
// wci_s_3_SData                  O    32 reg
// wci_s_3_SThreadBusy            O     1
// wci_s_3_SFlag                  O     2
// wci_s_4_SResp                  O     2 reg
// wci_s_4_SData                  O    32 reg
// wci_s_4_SThreadBusy            O     1
// wci_s_4_SFlag                  O     2
// wci_s_5_SResp                  O     2 const
// wci_s_5_SData                  O    32 const
// wci_s_5_SThreadBusy            O     1 const
// wci_s_5_SFlag                  O     2 const
// wci_s_6_SResp                  O     2 const
// wci_s_6_SData                  O    32 const
// wci_s_6_SThreadBusy            O     1 const
// wci_s_6_SFlag                  O     2 const
// wci_s_7_SResp                  O     2 const
// wci_s_7_SData                  O    32 const
// wci_s_7_SThreadBusy            O     1 const
// wci_s_7_SFlag                  O     2 const
// wmiM0_MCmd                     O     3
// wmiM0_MReqLast                 O     1 reg
// wmiM0_MReqInfo                 O     1 reg
// wmiM0_MAddrSpace               O     1 reg
// wmiM0_MAddr                    O    14 reg
// wmiM0_MBurstLength             O    12 reg
// wmiM0_MDataValid               O     1
// wmiM0_MDataLast                O     1 reg
// wmiM0_MData                    O    32 reg
// wmiM0_MDataByteEn              O     4 reg
// wmiM0_MFlag                    O    32
// wmiM0_MReset_n                 O     1
// wmiM1_MCmd                     O     3
// wmiM1_MReqLast                 O     1 reg
// wmiM1_MReqInfo                 O     1 reg
// wmiM1_MAddrSpace               O     1 reg
// wmiM1_MAddr                    O    14 reg
// wmiM1_MBurstLength             O    12 reg
// wmiM1_MDataValid               O     1
// wmiM1_MDataLast                O     1 reg
// wmiM1_MData                    O    32 reg
// wmiM1_MDataByteEn              O     4 reg
// wmiM1_MFlag                    O    32
// wmiM1_MReset_n                 O     1
// wmemiM_MCmd                    O     3 const
// wmemiM_MReqLast                O     1 const
// wmemiM_MAddr                   O    36 const
// wmemiM_MBurstLength            O    12 const
// wmemiM_MDataValid              O     1 const
// wmemiM_MDataLast               O     1 const
// wmemiM_MData                   O   128 const
// wmemiM_MDataByteEn             O    16 const
// wmemiM_MReset_n                O     1 const
// wsi_s_adc_SThreadBusy          O     1
// wsi_s_adc_SReset_n             O     1
// wsi_m_dac_MCmd                 O     3
// wsi_m_dac_MReqLast             O     1
// wsi_m_dac_MBurstPrecise        O     1
// wsi_m_dac_MBurstLength         O    12
// wsi_m_dac_MData                O    32 reg
// wsi_m_dac_MByteEn              O     4 reg
// wsi_m_dac_MReqInfo             O     8
// wsi_m_dac_MReset_n             O     1
// RST_N_rst_0                    I     1 unused
// RST_N_rst_1                    I     1 unused
// RST_N_rst_2                    I     1 reset
// RST_N_rst_3                    I     1 reset
// RST_N_rst_4                    I     1 reset
// RST_N_rst_5                    I     1 unused
// RST_N_rst_6                    I     1 unused
// RST_N_rst_7                    I     1 unused
// CLK                            I     1 clock
// RST_N                          I     1 unused
// wci_s_0_MCmd                   I     3 unused
// wci_s_0_MAddrSpace             I     1 unused
// wci_s_0_MByteEn                I     4 unused
// wci_s_0_MAddr                  I    20 unused
// wci_s_0_MData                  I    32 unused
// wci_s_0_MFlag                  I     2 unused
// wci_s_1_MCmd                   I     3 unused
// wci_s_1_MAddrSpace             I     1 unused
// wci_s_1_MByteEn                I     4 unused
// wci_s_1_MAddr                  I    20 unused
// wci_s_1_MData                  I    32 unused
// wci_s_1_MFlag                  I     2 unused
// wci_s_2_MCmd                   I     3
// wci_s_2_MAddrSpace             I     1
// wci_s_2_MByteEn                I     4
// wci_s_2_MAddr                  I    20
// wci_s_2_MData                  I    32
// wci_s_2_MFlag                  I     2 unused
// wci_s_3_MCmd                   I     3
// wci_s_3_MAddrSpace             I     1
// wci_s_3_MByteEn                I     4
// wci_s_3_MAddr                  I    20
// wci_s_3_MData                  I    32
// wci_s_3_MFlag                  I     2 unused
// wci_s_4_MCmd                   I     3
// wci_s_4_MAddrSpace             I     1
// wci_s_4_MByteEn                I     4
// wci_s_4_MAddr                  I    20
// wci_s_4_MData                  I    32
// wci_s_4_MFlag                  I     2 unused
// wci_s_5_MCmd                   I     3 unused
// wci_s_5_MAddrSpace             I     1 unused
// wci_s_5_MByteEn                I     4 unused
// wci_s_5_MAddr                  I    20 unused
// wci_s_5_MData                  I    32 unused
// wci_s_5_MFlag                  I     2 unused
// wci_s_6_MCmd                   I     3 unused
// wci_s_6_MAddrSpace             I     1 unused
// wci_s_6_MByteEn                I     4 unused
// wci_s_6_MAddr                  I    20 unused
// wci_s_6_MData                  I    32 unused
// wci_s_6_MFlag                  I     2 unused
// wci_s_7_MCmd                   I     3 unused
// wci_s_7_MAddrSpace             I     1 unused
// wci_s_7_MByteEn                I     4 unused
// wci_s_7_MAddr                  I    20 unused
// wci_s_7_MData                  I    32 unused
// wci_s_7_MFlag                  I     2 unused
// wmiM0_SResp                    I     2
// wmiM0_SData                    I    32
// wmiM0_SFlag                    I    32 reg
// wmiM1_SResp                    I     2
// wmiM1_SData                    I    32
// wmiM1_SFlag                    I    32 reg
// wmemiM_SResp                   I     2 unused
// wmemiM_SData                   I   128 unused
// wsi_s_adc_MCmd                 I     3
// wsi_s_adc_MBurstLength         I    12
// wsi_s_adc_MData                I    32
// wsi_s_adc_MByteEn              I     4
// wsi_s_adc_MReqInfo             I     8
// wmiM0_SThreadBusy              I     1 reg
// wmiM0_SDataThreadBusy          I     1 reg
// wmiM0_SRespLast                I     1 unused
// wmiM0_SReset_n                 I     1 reg
// wmiM1_SThreadBusy              I     1 reg
// wmiM1_SDataThreadBusy          I     1 reg
// wmiM1_SRespLast                I     1 unused
// wmiM1_SReset_n                 I     1 reg
// wmemiM_SRespLast               I     1 unused
// wmemiM_SCmdAccept              I     1 unused
// wmemiM_SDataAccept             I     1 unused
// wsi_s_adc_MReqLast             I     1
// wsi_s_adc_MBurstPrecise        I     1
// wsi_s_adc_MReset_n             I     1 reg
// wsi_m_dac_SThreadBusy          I     1 reg
// wsi_m_dac_SReset_n             I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCApp(RST_N_rst_0,
	       RST_N_rst_1,
	       RST_N_rst_2,
	       RST_N_rst_3,
	       RST_N_rst_4,
	       RST_N_rst_5,
	       RST_N_rst_6,
	       RST_N_rst_7,
	       CLK,
	       RST_N,

	       wci_s_0_MCmd,

	       wci_s_0_MAddrSpace,

	       wci_s_0_MByteEn,

	       wci_s_0_MAddr,

	       wci_s_0_MData,

	       wci_s_0_SResp,

	       wci_s_0_SData,

	       wci_s_0_SThreadBusy,

	       wci_s_0_SFlag,

	       wci_s_0_MFlag,

	       wci_s_1_MCmd,

	       wci_s_1_MAddrSpace,

	       wci_s_1_MByteEn,

	       wci_s_1_MAddr,

	       wci_s_1_MData,

	       wci_s_1_SResp,

	       wci_s_1_SData,

	       wci_s_1_SThreadBusy,

	       wci_s_1_SFlag,

	       wci_s_1_MFlag,

	       wci_s_2_MCmd,

	       wci_s_2_MAddrSpace,

	       wci_s_2_MByteEn,

	       wci_s_2_MAddr,

	       wci_s_2_MData,

	       wci_s_2_SResp,

	       wci_s_2_SData,

	       wci_s_2_SThreadBusy,

	       wci_s_2_SFlag,

	       wci_s_2_MFlag,

	       wci_s_3_MCmd,

	       wci_s_3_MAddrSpace,

	       wci_s_3_MByteEn,

	       wci_s_3_MAddr,

	       wci_s_3_MData,

	       wci_s_3_SResp,

	       wci_s_3_SData,

	       wci_s_3_SThreadBusy,

	       wci_s_3_SFlag,

	       wci_s_3_MFlag,

	       wci_s_4_MCmd,

	       wci_s_4_MAddrSpace,

	       wci_s_4_MByteEn,

	       wci_s_4_MAddr,

	       wci_s_4_MData,

	       wci_s_4_SResp,

	       wci_s_4_SData,

	       wci_s_4_SThreadBusy,

	       wci_s_4_SFlag,

	       wci_s_4_MFlag,

	       wci_s_5_MCmd,

	       wci_s_5_MAddrSpace,

	       wci_s_5_MByteEn,

	       wci_s_5_MAddr,

	       wci_s_5_MData,

	       wci_s_5_SResp,

	       wci_s_5_SData,

	       wci_s_5_SThreadBusy,

	       wci_s_5_SFlag,

	       wci_s_5_MFlag,

	       wci_s_6_MCmd,

	       wci_s_6_MAddrSpace,

	       wci_s_6_MByteEn,

	       wci_s_6_MAddr,

	       wci_s_6_MData,

	       wci_s_6_SResp,

	       wci_s_6_SData,

	       wci_s_6_SThreadBusy,

	       wci_s_6_SFlag,

	       wci_s_6_MFlag,

	       wci_s_7_MCmd,

	       wci_s_7_MAddrSpace,

	       wci_s_7_MByteEn,

	       wci_s_7_MAddr,

	       wci_s_7_MData,

	       wci_s_7_SResp,

	       wci_s_7_SData,

	       wci_s_7_SThreadBusy,

	       wci_s_7_SFlag,

	       wci_s_7_MFlag,

	       wmiM0_MCmd,

	       wmiM0_MReqLast,

	       wmiM0_MReqInfo,

	       wmiM0_MAddrSpace,

	       wmiM0_MAddr,

	       wmiM0_MBurstLength,

	       wmiM0_MDataValid,

	       wmiM0_MDataLast,

	       wmiM0_MData,

	       wmiM0_MDataByteEn,

	       wmiM0_SResp,

	       wmiM0_SData,

	       wmiM0_SThreadBusy,

	       wmiM0_SDataThreadBusy,

	       wmiM0_SRespLast,

	       wmiM0_SFlag,

	       wmiM0_MFlag,

	       wmiM0_MReset_n,

	       wmiM0_SReset_n,

	       wmiM1_MCmd,

	       wmiM1_MReqLast,

	       wmiM1_MReqInfo,

	       wmiM1_MAddrSpace,

	       wmiM1_MAddr,

	       wmiM1_MBurstLength,

	       wmiM1_MDataValid,

	       wmiM1_MDataLast,

	       wmiM1_MData,

	       wmiM1_MDataByteEn,

	       wmiM1_SResp,

	       wmiM1_SData,

	       wmiM1_SThreadBusy,

	       wmiM1_SDataThreadBusy,

	       wmiM1_SRespLast,

	       wmiM1_SFlag,

	       wmiM1_MFlag,

	       wmiM1_MReset_n,

	       wmiM1_SReset_n,

	       wmemiM_MCmd,

	       wmemiM_MReqLast,

	       wmemiM_MAddr,

	       wmemiM_MBurstLength,

	       wmemiM_MDataValid,

	       wmemiM_MDataLast,

	       wmemiM_MData,

	       wmemiM_MDataByteEn,

	       wmemiM_SResp,

	       wmemiM_SRespLast,

	       wmemiM_SData,

	       wmemiM_SCmdAccept,

	       wmemiM_SDataAccept,

	       wmemiM_MReset_n,

	       wsi_s_adc_MCmd,

	       wsi_s_adc_MReqLast,

	       wsi_s_adc_MBurstPrecise,

	       wsi_s_adc_MBurstLength,

	       wsi_s_adc_MData,

	       wsi_s_adc_MByteEn,

	       wsi_s_adc_MReqInfo,

	       wsi_s_adc_SThreadBusy,

	       wsi_s_adc_SReset_n,

	       wsi_s_adc_MReset_n,

	       wsi_m_dac_MCmd,

	       wsi_m_dac_MReqLast,

	       wsi_m_dac_MBurstPrecise,

	       wsi_m_dac_MBurstLength,

	       wsi_m_dac_MData,

	       wsi_m_dac_MByteEn,

	       wsi_m_dac_MReqInfo,

	       wsi_m_dac_SThreadBusy,

	       wsi_m_dac_MReset_n,

	       wsi_m_dac_SReset_n);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  RST_N_rst_0;
  input  RST_N_rst_1;
  input  RST_N_rst_2;
  input  RST_N_rst_3;
  input  RST_N_rst_4;
  input  RST_N_rst_5;
  input  RST_N_rst_6;
  input  RST_N_rst_7;
  input  CLK;
  input  RST_N;

  // action method wci_s_0_mCmd
  input  [2 : 0] wci_s_0_MCmd;

  // action method wci_s_0_mAddrSpace
  input  wci_s_0_MAddrSpace;

  // action method wci_s_0_mByteEn
  input  [3 : 0] wci_s_0_MByteEn;

  // action method wci_s_0_mAddr
  input  [19 : 0] wci_s_0_MAddr;

  // action method wci_s_0_mData
  input  [31 : 0] wci_s_0_MData;

  // value method wci_s_0_sResp
  output [1 : 0] wci_s_0_SResp;

  // value method wci_s_0_sData
  output [31 : 0] wci_s_0_SData;

  // value method wci_s_0_sThreadBusy
  output wci_s_0_SThreadBusy;

  // value method wci_s_0_sFlag
  output [1 : 0] wci_s_0_SFlag;

  // action method wci_s_0_mFlag
  input  [1 : 0] wci_s_0_MFlag;

  // action method wci_s_1_mCmd
  input  [2 : 0] wci_s_1_MCmd;

  // action method wci_s_1_mAddrSpace
  input  wci_s_1_MAddrSpace;

  // action method wci_s_1_mByteEn
  input  [3 : 0] wci_s_1_MByteEn;

  // action method wci_s_1_mAddr
  input  [19 : 0] wci_s_1_MAddr;

  // action method wci_s_1_mData
  input  [31 : 0] wci_s_1_MData;

  // value method wci_s_1_sResp
  output [1 : 0] wci_s_1_SResp;

  // value method wci_s_1_sData
  output [31 : 0] wci_s_1_SData;

  // value method wci_s_1_sThreadBusy
  output wci_s_1_SThreadBusy;

  // value method wci_s_1_sFlag
  output [1 : 0] wci_s_1_SFlag;

  // action method wci_s_1_mFlag
  input  [1 : 0] wci_s_1_MFlag;

  // action method wci_s_2_mCmd
  input  [2 : 0] wci_s_2_MCmd;

  // action method wci_s_2_mAddrSpace
  input  wci_s_2_MAddrSpace;

  // action method wci_s_2_mByteEn
  input  [3 : 0] wci_s_2_MByteEn;

  // action method wci_s_2_mAddr
  input  [19 : 0] wci_s_2_MAddr;

  // action method wci_s_2_mData
  input  [31 : 0] wci_s_2_MData;

  // value method wci_s_2_sResp
  output [1 : 0] wci_s_2_SResp;

  // value method wci_s_2_sData
  output [31 : 0] wci_s_2_SData;

  // value method wci_s_2_sThreadBusy
  output wci_s_2_SThreadBusy;

  // value method wci_s_2_sFlag
  output [1 : 0] wci_s_2_SFlag;

  // action method wci_s_2_mFlag
  input  [1 : 0] wci_s_2_MFlag;

  // action method wci_s_3_mCmd
  input  [2 : 0] wci_s_3_MCmd;

  // action method wci_s_3_mAddrSpace
  input  wci_s_3_MAddrSpace;

  // action method wci_s_3_mByteEn
  input  [3 : 0] wci_s_3_MByteEn;

  // action method wci_s_3_mAddr
  input  [19 : 0] wci_s_3_MAddr;

  // action method wci_s_3_mData
  input  [31 : 0] wci_s_3_MData;

  // value method wci_s_3_sResp
  output [1 : 0] wci_s_3_SResp;

  // value method wci_s_3_sData
  output [31 : 0] wci_s_3_SData;

  // value method wci_s_3_sThreadBusy
  output wci_s_3_SThreadBusy;

  // value method wci_s_3_sFlag
  output [1 : 0] wci_s_3_SFlag;

  // action method wci_s_3_mFlag
  input  [1 : 0] wci_s_3_MFlag;

  // action method wci_s_4_mCmd
  input  [2 : 0] wci_s_4_MCmd;

  // action method wci_s_4_mAddrSpace
  input  wci_s_4_MAddrSpace;

  // action method wci_s_4_mByteEn
  input  [3 : 0] wci_s_4_MByteEn;

  // action method wci_s_4_mAddr
  input  [19 : 0] wci_s_4_MAddr;

  // action method wci_s_4_mData
  input  [31 : 0] wci_s_4_MData;

  // value method wci_s_4_sResp
  output [1 : 0] wci_s_4_SResp;

  // value method wci_s_4_sData
  output [31 : 0] wci_s_4_SData;

  // value method wci_s_4_sThreadBusy
  output wci_s_4_SThreadBusy;

  // value method wci_s_4_sFlag
  output [1 : 0] wci_s_4_SFlag;

  // action method wci_s_4_mFlag
  input  [1 : 0] wci_s_4_MFlag;

  // action method wci_s_5_mCmd
  input  [2 : 0] wci_s_5_MCmd;

  // action method wci_s_5_mAddrSpace
  input  wci_s_5_MAddrSpace;

  // action method wci_s_5_mByteEn
  input  [3 : 0] wci_s_5_MByteEn;

  // action method wci_s_5_mAddr
  input  [19 : 0] wci_s_5_MAddr;

  // action method wci_s_5_mData
  input  [31 : 0] wci_s_5_MData;

  // value method wci_s_5_sResp
  output [1 : 0] wci_s_5_SResp;

  // value method wci_s_5_sData
  output [31 : 0] wci_s_5_SData;

  // value method wci_s_5_sThreadBusy
  output wci_s_5_SThreadBusy;

  // value method wci_s_5_sFlag
  output [1 : 0] wci_s_5_SFlag;

  // action method wci_s_5_mFlag
  input  [1 : 0] wci_s_5_MFlag;

  // action method wci_s_6_mCmd
  input  [2 : 0] wci_s_6_MCmd;

  // action method wci_s_6_mAddrSpace
  input  wci_s_6_MAddrSpace;

  // action method wci_s_6_mByteEn
  input  [3 : 0] wci_s_6_MByteEn;

  // action method wci_s_6_mAddr
  input  [19 : 0] wci_s_6_MAddr;

  // action method wci_s_6_mData
  input  [31 : 0] wci_s_6_MData;

  // value method wci_s_6_sResp
  output [1 : 0] wci_s_6_SResp;

  // value method wci_s_6_sData
  output [31 : 0] wci_s_6_SData;

  // value method wci_s_6_sThreadBusy
  output wci_s_6_SThreadBusy;

  // value method wci_s_6_sFlag
  output [1 : 0] wci_s_6_SFlag;

  // action method wci_s_6_mFlag
  input  [1 : 0] wci_s_6_MFlag;

  // action method wci_s_7_mCmd
  input  [2 : 0] wci_s_7_MCmd;

  // action method wci_s_7_mAddrSpace
  input  wci_s_7_MAddrSpace;

  // action method wci_s_7_mByteEn
  input  [3 : 0] wci_s_7_MByteEn;

  // action method wci_s_7_mAddr
  input  [19 : 0] wci_s_7_MAddr;

  // action method wci_s_7_mData
  input  [31 : 0] wci_s_7_MData;

  // value method wci_s_7_sResp
  output [1 : 0] wci_s_7_SResp;

  // value method wci_s_7_sData
  output [31 : 0] wci_s_7_SData;

  // value method wci_s_7_sThreadBusy
  output wci_s_7_SThreadBusy;

  // value method wci_s_7_sFlag
  output [1 : 0] wci_s_7_SFlag;

  // action method wci_s_7_mFlag
  input  [1 : 0] wci_s_7_MFlag;

  // value method wmiM0_mCmd
  output [2 : 0] wmiM0_MCmd;

  // value method wmiM0_mReqLast
  output wmiM0_MReqLast;

  // value method wmiM0_mReqInfo
  output wmiM0_MReqInfo;

  // value method wmiM0_mAddrSpace
  output wmiM0_MAddrSpace;

  // value method wmiM0_mAddr
  output [13 : 0] wmiM0_MAddr;

  // value method wmiM0_mBurstLength
  output [11 : 0] wmiM0_MBurstLength;

  // value method wmiM0_mDataValid
  output wmiM0_MDataValid;

  // value method wmiM0_mDataLast
  output wmiM0_MDataLast;

  // value method wmiM0_mData
  output [31 : 0] wmiM0_MData;

  // value method wmiM0_mDataInfo

  // value method wmiM0_mDataByteEn
  output [3 : 0] wmiM0_MDataByteEn;

  // action method wmiM0_sResp
  input  [1 : 0] wmiM0_SResp;

  // action method wmiM0_sData
  input  [31 : 0] wmiM0_SData;

  // action method wmiM0_sThreadBusy
  input  wmiM0_SThreadBusy;

  // action method wmiM0_sDataThreadBusy
  input  wmiM0_SDataThreadBusy;

  // action method wmiM0_sRespLast
  input  wmiM0_SRespLast;

  // action method wmiM0_sFlag
  input  [31 : 0] wmiM0_SFlag;

  // value method wmiM0_mFlag
  output [31 : 0] wmiM0_MFlag;

  // value method wmiM0_mReset_n
  output wmiM0_MReset_n;

  // action method wmiM0_sReset_n
  input  wmiM0_SReset_n;

  // value method wmiM1_mCmd
  output [2 : 0] wmiM1_MCmd;

  // value method wmiM1_mReqLast
  output wmiM1_MReqLast;

  // value method wmiM1_mReqInfo
  output wmiM1_MReqInfo;

  // value method wmiM1_mAddrSpace
  output wmiM1_MAddrSpace;

  // value method wmiM1_mAddr
  output [13 : 0] wmiM1_MAddr;

  // value method wmiM1_mBurstLength
  output [11 : 0] wmiM1_MBurstLength;

  // value method wmiM1_mDataValid
  output wmiM1_MDataValid;

  // value method wmiM1_mDataLast
  output wmiM1_MDataLast;

  // value method wmiM1_mData
  output [31 : 0] wmiM1_MData;

  // value method wmiM1_mDataInfo

  // value method wmiM1_mDataByteEn
  output [3 : 0] wmiM1_MDataByteEn;

  // action method wmiM1_sResp
  input  [1 : 0] wmiM1_SResp;

  // action method wmiM1_sData
  input  [31 : 0] wmiM1_SData;

  // action method wmiM1_sThreadBusy
  input  wmiM1_SThreadBusy;

  // action method wmiM1_sDataThreadBusy
  input  wmiM1_SDataThreadBusy;

  // action method wmiM1_sRespLast
  input  wmiM1_SRespLast;

  // action method wmiM1_sFlag
  input  [31 : 0] wmiM1_SFlag;

  // value method wmiM1_mFlag
  output [31 : 0] wmiM1_MFlag;

  // value method wmiM1_mReset_n
  output wmiM1_MReset_n;

  // action method wmiM1_sReset_n
  input  wmiM1_SReset_n;

  // value method wmemiM_mCmd
  output [2 : 0] wmemiM_MCmd;

  // value method wmemiM_mReqLast
  output wmemiM_MReqLast;

  // value method wmemiM_mAddr
  output [35 : 0] wmemiM_MAddr;

  // value method wmemiM_mBurstLength
  output [11 : 0] wmemiM_MBurstLength;

  // value method wmemiM_mDataValid
  output wmemiM_MDataValid;

  // value method wmemiM_mDataLast
  output wmemiM_MDataLast;

  // value method wmemiM_mData
  output [127 : 0] wmemiM_MData;

  // value method wmemiM_mDataByteEn
  output [15 : 0] wmemiM_MDataByteEn;

  // action method wmemiM_sResp
  input  [1 : 0] wmemiM_SResp;

  // action method wmemiM_sRespLast
  input  wmemiM_SRespLast;

  // action method wmemiM_sData
  input  [127 : 0] wmemiM_SData;

  // action method wmemiM_sCmdAccept
  input  wmemiM_SCmdAccept;

  // action method wmemiM_sDataAccept
  input  wmemiM_SDataAccept;

  // value method wmemiM_mReset_n
  output wmemiM_MReset_n;

  // action method wsi_s_adc_mCmd
  input  [2 : 0] wsi_s_adc_MCmd;

  // action method wsi_s_adc_mReqLast
  input  wsi_s_adc_MReqLast;

  // action method wsi_s_adc_mBurstPrecise
  input  wsi_s_adc_MBurstPrecise;

  // action method wsi_s_adc_mBurstLength
  input  [11 : 0] wsi_s_adc_MBurstLength;

  // action method wsi_s_adc_mData
  input  [31 : 0] wsi_s_adc_MData;

  // action method wsi_s_adc_mByteEn
  input  [3 : 0] wsi_s_adc_MByteEn;

  // action method wsi_s_adc_mReqInfo
  input  [7 : 0] wsi_s_adc_MReqInfo;

  // action method wsi_s_adc_mDataInfo

  // value method wsi_s_adc_sThreadBusy
  output wsi_s_adc_SThreadBusy;

  // value method wsi_s_adc_sReset_n
  output wsi_s_adc_SReset_n;

  // action method wsi_s_adc_mReset_n
  input  wsi_s_adc_MReset_n;

  // value method wsi_m_dac_mCmd
  output [2 : 0] wsi_m_dac_MCmd;

  // value method wsi_m_dac_mReqLast
  output wsi_m_dac_MReqLast;

  // value method wsi_m_dac_mBurstPrecise
  output wsi_m_dac_MBurstPrecise;

  // value method wsi_m_dac_mBurstLength
  output [11 : 0] wsi_m_dac_MBurstLength;

  // value method wsi_m_dac_mData
  output [31 : 0] wsi_m_dac_MData;

  // value method wsi_m_dac_mByteEn
  output [3 : 0] wsi_m_dac_MByteEn;

  // value method wsi_m_dac_mReqInfo
  output [7 : 0] wsi_m_dac_MReqInfo;

  // value method wsi_m_dac_mDataInfo

  // action method wsi_m_dac_sThreadBusy
  input  wsi_m_dac_SThreadBusy;

  // value method wsi_m_dac_mReset_n
  output wsi_m_dac_MReset_n;

  // action method wsi_m_dac_sReset_n
  input  wsi_m_dac_SReset_n;

  // signals for module outputs
  wire [127 : 0] wmemiM_MData;
  wire [35 : 0] wmemiM_MAddr;
  wire [31 : 0] wci_s_0_SData,
		wci_s_1_SData,
		wci_s_2_SData,
		wci_s_3_SData,
		wci_s_4_SData,
		wci_s_5_SData,
		wci_s_6_SData,
		wci_s_7_SData,
		wmiM0_MData,
		wmiM0_MFlag,
		wmiM1_MData,
		wmiM1_MFlag,
		wsi_m_dac_MData;
  wire [15 : 0] wmemiM_MDataByteEn;
  wire [13 : 0] wmiM0_MAddr, wmiM1_MAddr;
  wire [11 : 0] wmemiM_MBurstLength,
		wmiM0_MBurstLength,
		wmiM1_MBurstLength,
		wsi_m_dac_MBurstLength;
  wire [7 : 0] wsi_m_dac_MReqInfo;
  wire [3 : 0] wmiM0_MDataByteEn, wmiM1_MDataByteEn, wsi_m_dac_MByteEn;
  wire [2 : 0] wmemiM_MCmd, wmiM0_MCmd, wmiM1_MCmd, wsi_m_dac_MCmd;
  wire [1 : 0] wci_s_0_SFlag,
	       wci_s_0_SResp,
	       wci_s_1_SFlag,
	       wci_s_1_SResp,
	       wci_s_2_SFlag,
	       wci_s_2_SResp,
	       wci_s_3_SFlag,
	       wci_s_3_SResp,
	       wci_s_4_SFlag,
	       wci_s_4_SResp,
	       wci_s_5_SFlag,
	       wci_s_5_SResp,
	       wci_s_6_SFlag,
	       wci_s_6_SResp,
	       wci_s_7_SFlag,
	       wci_s_7_SResp;
  wire wci_s_0_SThreadBusy,
       wci_s_1_SThreadBusy,
       wci_s_2_SThreadBusy,
       wci_s_3_SThreadBusy,
       wci_s_4_SThreadBusy,
       wci_s_5_SThreadBusy,
       wci_s_6_SThreadBusy,
       wci_s_7_SThreadBusy,
       wmemiM_MDataLast,
       wmemiM_MDataValid,
       wmemiM_MReqLast,
       wmemiM_MReset_n,
       wmiM0_MAddrSpace,
       wmiM0_MDataLast,
       wmiM0_MDataValid,
       wmiM0_MReqInfo,
       wmiM0_MReqLast,
       wmiM0_MReset_n,
       wmiM1_MAddrSpace,
       wmiM1_MDataLast,
       wmiM1_MDataValid,
       wmiM1_MReqInfo,
       wmiM1_MReqLast,
       wmiM1_MReset_n,
       wsi_m_dac_MBurstPrecise,
       wsi_m_dac_MReqLast,
       wsi_m_dac_MReset_n,
       wsi_s_adc_SReset_n,
       wsi_s_adc_SThreadBusy;

  // inlined wires
  wire [95 : 0] appW3_wsiM_extStatusW$wget, appW3_wsiS_extStatusW$wget;
  wire [60 : 0] appW3_wsiM_reqFifo_x_wire$wget, appW3_wsiS_wsiReq$wget;
  wire [59 : 0] appW3_wci_wciReq$wget;
  wire [33 : 0] appW3_wci_respF_x_wire$wget;
  wire [31 : 0] appW3_wci_Es_mData_w$wget,
		appW3_wsi_Es_mData_w$wget,
		tieOff0_wci_Es_mData_w$wget,
		tieOff1_wci_Es_mData_w$wget,
		tieOff5_wci_Es_mData_w$wget,
		tieOff6_wci_Es_mData_w$wget,
		tieOff7_wci_Es_mData_w$wget;
  wire [19 : 0] appW3_wci_Es_mAddr_w$wget,
		tieOff0_wci_Es_mAddr_w$wget,
		tieOff1_wci_Es_mAddr_w$wget,
		tieOff5_wci_Es_mAddr_w$wget,
		tieOff6_wci_Es_mAddr_w$wget,
		tieOff7_wci_Es_mAddr_w$wget;
  wire [11 : 0] appW3_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] appW3_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] appW3_wci_Es_mByteEn_w$wget,
	       appW3_wsi_Es_mByteEn_w$wget,
	       tieOff0_wci_Es_mByteEn_w$wget,
	       tieOff1_wci_Es_mByteEn_w$wget,
	       tieOff5_wci_Es_mByteEn_w$wget,
	       tieOff6_wci_Es_mByteEn_w$wget,
	       tieOff7_wci_Es_mByteEn_w$wget;
  wire [2 : 0] appW3_wci_Es_mCmd_w$wget,
	       appW3_wci_wEdge$wget,
	       appW3_wsi_Es_mCmd_w$wget,
	       tieOff0_wci_Es_mCmd_w$wget,
	       tieOff1_wci_Es_mCmd_w$wget,
	       tieOff5_wci_Es_mCmd_w$wget,
	       tieOff6_wci_Es_mCmd_w$wget,
	       tieOff7_wci_Es_mCmd_w$wget;
  wire appW3_wci_Es_mAddrSpace_w$wget,
       appW3_wci_Es_mAddrSpace_w$whas,
       appW3_wci_Es_mAddr_w$whas,
       appW3_wci_Es_mByteEn_w$whas,
       appW3_wci_Es_mCmd_w$whas,
       appW3_wci_Es_mData_w$whas,
       appW3_wci_ctlAckReg_1$wget,
       appW3_wci_ctlAckReg_1$whas,
       appW3_wci_reqF_r_clr$whas,
       appW3_wci_reqF_r_deq$whas,
       appW3_wci_reqF_r_enq$whas,
       appW3_wci_respF_dequeueing$whas,
       appW3_wci_respF_enqueueing$whas,
       appW3_wci_respF_x_wire$whas,
       appW3_wci_sFlagReg_1$wget,
       appW3_wci_sFlagReg_1$whas,
       appW3_wci_sThreadBusy_pw$whas,
       appW3_wci_wEdge$whas,
       appW3_wci_wciReq$whas,
       appW3_wci_wci_cfrd_pw$whas,
       appW3_wci_wci_cfwr_pw$whas,
       appW3_wci_wci_ctrl_pw$whas,
       appW3_wsiM_operateD_1$wget,
       appW3_wsiM_operateD_1$whas,
       appW3_wsiM_peerIsReady_1$wget,
       appW3_wsiM_peerIsReady_1$whas,
       appW3_wsiM_reqFifo_dequeueing$whas,
       appW3_wsiM_reqFifo_enqueueing$whas,
       appW3_wsiM_reqFifo_x_wire$whas,
       appW3_wsiM_sThreadBusy_pw$whas,
       appW3_wsiS_operateD_1$wget,
       appW3_wsiS_operateD_1$whas,
       appW3_wsiS_peerIsReady_1$wget,
       appW3_wsiS_peerIsReady_1$whas,
       appW3_wsiS_reqFifo_doResetClr$whas,
       appW3_wsiS_reqFifo_doResetDeq$whas,
       appW3_wsiS_reqFifo_doResetEnq$whas,
       appW3_wsiS_reqFifo_r_clr$whas,
       appW3_wsiS_reqFifo_r_deq$whas,
       appW3_wsiS_reqFifo_r_enq$whas,
       appW3_wsiS_sThreadBusy_dw$wget,
       appW3_wsiS_sThreadBusy_dw$whas,
       appW3_wsiS_wsiReq$whas,
       appW3_wsi_Es_mBurstLength_w$whas,
       appW3_wsi_Es_mBurstPrecise_w$whas,
       appW3_wsi_Es_mByteEn_w$whas,
       appW3_wsi_Es_mCmd_w$whas,
       appW3_wsi_Es_mDataInfo_w$whas,
       appW3_wsi_Es_mData_w$whas,
       appW3_wsi_Es_mReqInfo_w$whas,
       appW3_wsi_Es_mReqLast_w$whas,
       tieOff0_wci_Es_mAddrSpace_w$wget,
       tieOff0_wci_Es_mAddrSpace_w$whas,
       tieOff0_wci_Es_mAddr_w$whas,
       tieOff0_wci_Es_mByteEn_w$whas,
       tieOff0_wci_Es_mCmd_w$whas,
       tieOff0_wci_Es_mData_w$whas,
       tieOff1_wci_Es_mAddrSpace_w$wget,
       tieOff1_wci_Es_mAddrSpace_w$whas,
       tieOff1_wci_Es_mAddr_w$whas,
       tieOff1_wci_Es_mByteEn_w$whas,
       tieOff1_wci_Es_mCmd_w$whas,
       tieOff1_wci_Es_mData_w$whas,
       tieOff5_wci_Es_mAddrSpace_w$wget,
       tieOff5_wci_Es_mAddrSpace_w$whas,
       tieOff5_wci_Es_mAddr_w$whas,
       tieOff5_wci_Es_mByteEn_w$whas,
       tieOff5_wci_Es_mCmd_w$whas,
       tieOff5_wci_Es_mData_w$whas,
       tieOff6_wci_Es_mAddrSpace_w$wget,
       tieOff6_wci_Es_mAddrSpace_w$whas,
       tieOff6_wci_Es_mAddr_w$whas,
       tieOff6_wci_Es_mByteEn_w$whas,
       tieOff6_wci_Es_mCmd_w$whas,
       tieOff6_wci_Es_mData_w$whas,
       tieOff7_wci_Es_mAddrSpace_w$wget,
       tieOff7_wci_Es_mAddrSpace_w$whas,
       tieOff7_wci_Es_mAddr_w$whas,
       tieOff7_wci_Es_mByteEn_w$whas,
       tieOff7_wci_Es_mCmd_w$whas,
       tieOff7_wci_Es_mData_w$whas;

  // register appW3_biasValue
  reg [31 : 0] appW3_biasValue;
  wire [31 : 0] appW3_biasValue$D_IN;
  wire appW3_biasValue$EN;

  // register appW3_controlReg
  reg [31 : 0] appW3_controlReg;
  wire [31 : 0] appW3_controlReg$D_IN;
  wire appW3_controlReg$EN;

  // register appW3_wci_cEdge
  reg [2 : 0] appW3_wci_cEdge;
  wire [2 : 0] appW3_wci_cEdge$D_IN;
  wire appW3_wci_cEdge$EN;

  // register appW3_wci_cState
  reg [2 : 0] appW3_wci_cState;
  wire [2 : 0] appW3_wci_cState$D_IN;
  wire appW3_wci_cState$EN;

  // register appW3_wci_ctlAckReg
  reg appW3_wci_ctlAckReg;
  wire appW3_wci_ctlAckReg$D_IN, appW3_wci_ctlAckReg$EN;

  // register appW3_wci_ctlOpActive
  reg appW3_wci_ctlOpActive;
  wire appW3_wci_ctlOpActive$D_IN, appW3_wci_ctlOpActive$EN;

  // register appW3_wci_illegalEdge
  reg appW3_wci_illegalEdge;
  wire appW3_wci_illegalEdge$D_IN, appW3_wci_illegalEdge$EN;

  // register appW3_wci_nState
  reg [2 : 0] appW3_wci_nState;
  reg [2 : 0] appW3_wci_nState$D_IN;
  wire appW3_wci_nState$EN;

  // register appW3_wci_reqF_countReg
  reg [1 : 0] appW3_wci_reqF_countReg;
  wire [1 : 0] appW3_wci_reqF_countReg$D_IN;
  wire appW3_wci_reqF_countReg$EN;

  // register appW3_wci_respF_c_r
  reg [1 : 0] appW3_wci_respF_c_r;
  wire [1 : 0] appW3_wci_respF_c_r$D_IN;
  wire appW3_wci_respF_c_r$EN;

  // register appW3_wci_respF_q_0
  reg [33 : 0] appW3_wci_respF_q_0;
  reg [33 : 0] appW3_wci_respF_q_0$D_IN;
  wire appW3_wci_respF_q_0$EN;

  // register appW3_wci_respF_q_1
  reg [33 : 0] appW3_wci_respF_q_1;
  reg [33 : 0] appW3_wci_respF_q_1$D_IN;
  wire appW3_wci_respF_q_1$EN;

  // register appW3_wci_sFlagReg
  reg appW3_wci_sFlagReg;
  wire appW3_wci_sFlagReg$D_IN, appW3_wci_sFlagReg$EN;

  // register appW3_wci_sThreadBusy_d
  reg appW3_wci_sThreadBusy_d;
  wire appW3_wci_sThreadBusy_d$D_IN, appW3_wci_sThreadBusy_d$EN;

  // register appW3_wsiM_burstKind
  reg [1 : 0] appW3_wsiM_burstKind;
  wire [1 : 0] appW3_wsiM_burstKind$D_IN;
  wire appW3_wsiM_burstKind$EN;

  // register appW3_wsiM_errorSticky
  reg appW3_wsiM_errorSticky;
  wire appW3_wsiM_errorSticky$D_IN, appW3_wsiM_errorSticky$EN;

  // register appW3_wsiM_iMesgCount
  reg [31 : 0] appW3_wsiM_iMesgCount;
  wire [31 : 0] appW3_wsiM_iMesgCount$D_IN;
  wire appW3_wsiM_iMesgCount$EN;

  // register appW3_wsiM_operateD
  reg appW3_wsiM_operateD;
  wire appW3_wsiM_operateD$D_IN, appW3_wsiM_operateD$EN;

  // register appW3_wsiM_pMesgCount
  reg [31 : 0] appW3_wsiM_pMesgCount;
  wire [31 : 0] appW3_wsiM_pMesgCount$D_IN;
  wire appW3_wsiM_pMesgCount$EN;

  // register appW3_wsiM_peerIsReady
  reg appW3_wsiM_peerIsReady;
  wire appW3_wsiM_peerIsReady$D_IN, appW3_wsiM_peerIsReady$EN;

  // register appW3_wsiM_reqFifo_c_r
  reg [1 : 0] appW3_wsiM_reqFifo_c_r;
  wire [1 : 0] appW3_wsiM_reqFifo_c_r$D_IN;
  wire appW3_wsiM_reqFifo_c_r$EN;

  // register appW3_wsiM_reqFifo_q_0
  reg [60 : 0] appW3_wsiM_reqFifo_q_0;
  reg [60 : 0] appW3_wsiM_reqFifo_q_0$D_IN;
  wire appW3_wsiM_reqFifo_q_0$EN;

  // register appW3_wsiM_reqFifo_q_1
  reg [60 : 0] appW3_wsiM_reqFifo_q_1;
  reg [60 : 0] appW3_wsiM_reqFifo_q_1$D_IN;
  wire appW3_wsiM_reqFifo_q_1$EN;

  // register appW3_wsiM_sThreadBusy_d
  reg appW3_wsiM_sThreadBusy_d;
  wire appW3_wsiM_sThreadBusy_d$D_IN, appW3_wsiM_sThreadBusy_d$EN;

  // register appW3_wsiM_statusR
  reg [7 : 0] appW3_wsiM_statusR;
  wire [7 : 0] appW3_wsiM_statusR$D_IN;
  wire appW3_wsiM_statusR$EN;

  // register appW3_wsiM_tBusyCount
  reg [31 : 0] appW3_wsiM_tBusyCount;
  wire [31 : 0] appW3_wsiM_tBusyCount$D_IN;
  wire appW3_wsiM_tBusyCount$EN;

  // register appW3_wsiM_trafficSticky
  reg appW3_wsiM_trafficSticky;
  wire appW3_wsiM_trafficSticky$D_IN, appW3_wsiM_trafficSticky$EN;

  // register appW3_wsiS_burstKind
  reg [1 : 0] appW3_wsiS_burstKind;
  wire [1 : 0] appW3_wsiS_burstKind$D_IN;
  wire appW3_wsiS_burstKind$EN;

  // register appW3_wsiS_errorSticky
  reg appW3_wsiS_errorSticky;
  wire appW3_wsiS_errorSticky$D_IN, appW3_wsiS_errorSticky$EN;

  // register appW3_wsiS_iMesgCount
  reg [31 : 0] appW3_wsiS_iMesgCount;
  wire [31 : 0] appW3_wsiS_iMesgCount$D_IN;
  wire appW3_wsiS_iMesgCount$EN;

  // register appW3_wsiS_mesgWordLength
  reg [11 : 0] appW3_wsiS_mesgWordLength;
  wire [11 : 0] appW3_wsiS_mesgWordLength$D_IN;
  wire appW3_wsiS_mesgWordLength$EN;

  // register appW3_wsiS_operateD
  reg appW3_wsiS_operateD;
  wire appW3_wsiS_operateD$D_IN, appW3_wsiS_operateD$EN;

  // register appW3_wsiS_pMesgCount
  reg [31 : 0] appW3_wsiS_pMesgCount;
  wire [31 : 0] appW3_wsiS_pMesgCount$D_IN;
  wire appW3_wsiS_pMesgCount$EN;

  // register appW3_wsiS_peerIsReady
  reg appW3_wsiS_peerIsReady;
  wire appW3_wsiS_peerIsReady$D_IN, appW3_wsiS_peerIsReady$EN;

  // register appW3_wsiS_reqFifo_countReg
  reg [1 : 0] appW3_wsiS_reqFifo_countReg;
  wire [1 : 0] appW3_wsiS_reqFifo_countReg$D_IN;
  wire appW3_wsiS_reqFifo_countReg$EN;

  // register appW3_wsiS_reqFifo_levelsValid
  reg appW3_wsiS_reqFifo_levelsValid;
  wire appW3_wsiS_reqFifo_levelsValid$D_IN, appW3_wsiS_reqFifo_levelsValid$EN;

  // register appW3_wsiS_statusR
  reg [7 : 0] appW3_wsiS_statusR;
  wire [7 : 0] appW3_wsiS_statusR$D_IN;
  wire appW3_wsiS_statusR$EN;

  // register appW3_wsiS_tBusyCount
  reg [31 : 0] appW3_wsiS_tBusyCount;
  wire [31 : 0] appW3_wsiS_tBusyCount$D_IN;
  wire appW3_wsiS_tBusyCount$EN;

  // register appW3_wsiS_trafficSticky
  reg appW3_wsiS_trafficSticky;
  wire appW3_wsiS_trafficSticky$D_IN, appW3_wsiS_trafficSticky$EN;

  // register appW3_wsiS_wordCount
  reg [11 : 0] appW3_wsiS_wordCount;
  wire [11 : 0] appW3_wsiS_wordCount$D_IN;
  wire appW3_wsiS_wordCount$EN;

  // ports of submodule appW2
  wire [31 : 0] appW2$wciS0_MData,
		appW2$wciS0_SData,
		appW2$wmiM_MData,
		appW2$wmiM_MFlag,
		appW2$wmiM_SData,
		appW2$wmiM_SFlag,
		appW2$wsiM0_MData,
		appW2$wsiS0_MData;
  wire [19 : 0] appW2$wciS0_MAddr;
  wire [13 : 0] appW2$wmiM_MAddr;
  wire [11 : 0] appW2$wmiM_MBurstLength,
		appW2$wsiM0_MBurstLength,
		appW2$wsiS0_MBurstLength;
  wire [7 : 0] appW2$wsiM0_MReqInfo, appW2$wsiS0_MReqInfo;
  wire [3 : 0] appW2$wciS0_MByteEn,
	       appW2$wmiM_MDataByteEn,
	       appW2$wsiM0_MByteEn,
	       appW2$wsiS0_MByteEn;
  wire [2 : 0] appW2$wciS0_MCmd,
	       appW2$wmiM_MCmd,
	       appW2$wsiM0_MCmd,
	       appW2$wsiS0_MCmd;
  wire [1 : 0] appW2$wciS0_MFlag,
	       appW2$wciS0_SFlag,
	       appW2$wciS0_SResp,
	       appW2$wmiM_SResp;
  wire appW2$wciS0_MAddrSpace,
       appW2$wciS0_SThreadBusy,
       appW2$wmiM_MAddrSpace,
       appW2$wmiM_MDataLast,
       appW2$wmiM_MDataValid,
       appW2$wmiM_MReqInfo,
       appW2$wmiM_MReqLast,
       appW2$wmiM_MReset_n,
       appW2$wmiM_SDataThreadBusy,
       appW2$wmiM_SReset_n,
       appW2$wmiM_SRespLast,
       appW2$wmiM_SThreadBusy,
       appW2$wsiM0_MBurstPrecise,
       appW2$wsiM0_MReqLast,
       appW2$wsiM0_MReset_n,
       appW2$wsiM0_SReset_n,
       appW2$wsiM0_SThreadBusy,
       appW2$wsiS0_MBurstPrecise,
       appW2$wsiS0_MReqLast,
       appW2$wsiS0_MReset_n,
       appW2$wsiS0_SReset_n,
       appW2$wsiS0_SThreadBusy;

  // ports of submodule appW3_wci_isReset
  wire appW3_wci_isReset$VAL;

  // ports of submodule appW3_wci_reqF
  wire [59 : 0] appW3_wci_reqF$D_IN, appW3_wci_reqF$D_OUT;
  wire appW3_wci_reqF$CLR,
       appW3_wci_reqF$DEQ,
       appW3_wci_reqF$EMPTY_N,
       appW3_wci_reqF$ENQ;

  // ports of submodule appW3_wsiM_isReset
  wire appW3_wsiM_isReset$VAL;

  // ports of submodule appW3_wsiS_isReset
  wire appW3_wsiS_isReset$VAL;

  // ports of submodule appW3_wsiS_reqFifo
  wire [60 : 0] appW3_wsiS_reqFifo$D_IN, appW3_wsiS_reqFifo$D_OUT;
  wire appW3_wsiS_reqFifo$CLR,
       appW3_wsiS_reqFifo$DEQ,
       appW3_wsiS_reqFifo$EMPTY_N,
       appW3_wsiS_reqFifo$ENQ,
       appW3_wsiS_reqFifo$FULL_N;

  // ports of submodule appW4
  wire [31 : 0] appW4$wciS0_MData,
		appW4$wciS0_SData,
		appW4$wmiM_MData,
		appW4$wmiM_MFlag,
		appW4$wmiM_SData,
		appW4$wmiM_SFlag,
		appW4$wsiM0_MData,
		appW4$wsiS0_MData;
  wire [19 : 0] appW4$wciS0_MAddr;
  wire [13 : 0] appW4$wmiM_MAddr;
  wire [11 : 0] appW4$wmiM_MBurstLength,
		appW4$wsiM0_MBurstLength,
		appW4$wsiS0_MBurstLength;
  wire [7 : 0] appW4$wsiM0_MReqInfo, appW4$wsiS0_MReqInfo;
  wire [3 : 0] appW4$wciS0_MByteEn,
	       appW4$wmiM_MDataByteEn,
	       appW4$wsiM0_MByteEn,
	       appW4$wsiS0_MByteEn;
  wire [2 : 0] appW4$wciS0_MCmd,
	       appW4$wmiM_MCmd,
	       appW4$wsiM0_MCmd,
	       appW4$wsiS0_MCmd;
  wire [1 : 0] appW4$wciS0_MFlag,
	       appW4$wciS0_SFlag,
	       appW4$wciS0_SResp,
	       appW4$wmiM_SResp;
  wire appW4$wciS0_MAddrSpace,
       appW4$wciS0_SThreadBusy,
       appW4$wmiM_MAddrSpace,
       appW4$wmiM_MDataLast,
       appW4$wmiM_MDataValid,
       appW4$wmiM_MReqInfo,
       appW4$wmiM_MReqLast,
       appW4$wmiM_MReset_n,
       appW4$wmiM_SDataThreadBusy,
       appW4$wmiM_SReset_n,
       appW4$wmiM_SRespLast,
       appW4$wmiM_SThreadBusy,
       appW4$wsiM0_MBurstPrecise,
       appW4$wsiM0_MReqLast,
       appW4$wsiM0_MReset_n,
       appW4$wsiM0_SReset_n,
       appW4$wsiM0_SThreadBusy,
       appW4$wsiS0_MBurstPrecise,
       appW4$wsiS0_MReqLast,
       appW4$wsiS0_MReset_n,
       appW4$wsiS0_SReset_n,
       appW4$wsiS0_SThreadBusy;

  // rule scheduling signals
  wire CAN_FIRE_RL_appW3_doMessagePush,
       CAN_FIRE_RL_appW3_operating_actions,
       CAN_FIRE_RL_appW3_wci_Es_doAlways_Req,
       CAN_FIRE_RL_appW3_wci_cfrd,
       CAN_FIRE_RL_appW3_wci_cfwr,
       CAN_FIRE_RL_appW3_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_appW3_wci_ctl_op_complete,
       CAN_FIRE_RL_appW3_wci_ctl_op_start,
       CAN_FIRE_RL_appW3_wci_ctrl_EiI,
       CAN_FIRE_RL_appW3_wci_ctrl_IsO,
       CAN_FIRE_RL_appW3_wci_ctrl_OrE,
       CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_appW3_wci_reqF_enq,
       CAN_FIRE_RL_appW3_wci_request_decode,
       CAN_FIRE_RL_appW3_wci_respF_both,
       CAN_FIRE_RL_appW3_wci_respF_decCtr,
       CAN_FIRE_RL_appW3_wci_respF_deq,
       CAN_FIRE_RL_appW3_wci_respF_incCtr,
       CAN_FIRE_RL_appW3_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_appW3_wci_sThreadBusy_reg,
       CAN_FIRE_RL_appW3_wsiM_ext_status_assign,
       CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_appW3_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_both,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_deq,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_appW3_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_appW3_wsiM_update_statusR,
       CAN_FIRE_RL_appW3_wsiS_backpressure,
       CAN_FIRE_RL_appW3_wsiS_ext_status_assign,
       CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_appW3_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_appW3_wsiS_reqFifo_enq,
       CAN_FIRE_RL_appW3_wsiS_reqFifo_reset,
       CAN_FIRE_RL_appW3_wsiS_update_statusR,
       CAN_FIRE_RL_appW3_wsi_Es_doAlways,
       CAN_FIRE_RL_mBurstLConnect,
       CAN_FIRE_RL_mBurstLConnect_1,
       CAN_FIRE_RL_mBurstPConnect,
       CAN_FIRE_RL_mBurstPConnect_1,
       CAN_FIRE_RL_mByteEnConnect,
       CAN_FIRE_RL_mByteEnConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mDataIConnect,
       CAN_FIRE_RL_mDataIConnect_1,
       CAN_FIRE_RL_mReqIConnect,
       CAN_FIRE_RL_mReqIConnect_1,
       CAN_FIRE_RL_mReqLConnect,
       CAN_FIRE_RL_mReqLConnect_1,
       CAN_FIRE_RL_mRstConnect,
       CAN_FIRE_RL_mRstConnect_1,
       CAN_FIRE_RL_sRstConnect,
       CAN_FIRE_RL_sRstConnect_1,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_wci_s_0_mAddr,
       CAN_FIRE_wci_s_0_mAddrSpace,
       CAN_FIRE_wci_s_0_mByteEn,
       CAN_FIRE_wci_s_0_mCmd,
       CAN_FIRE_wci_s_0_mData,
       CAN_FIRE_wci_s_0_mFlag,
       CAN_FIRE_wci_s_1_mAddr,
       CAN_FIRE_wci_s_1_mAddrSpace,
       CAN_FIRE_wci_s_1_mByteEn,
       CAN_FIRE_wci_s_1_mCmd,
       CAN_FIRE_wci_s_1_mData,
       CAN_FIRE_wci_s_1_mFlag,
       CAN_FIRE_wci_s_2_mAddr,
       CAN_FIRE_wci_s_2_mAddrSpace,
       CAN_FIRE_wci_s_2_mByteEn,
       CAN_FIRE_wci_s_2_mCmd,
       CAN_FIRE_wci_s_2_mData,
       CAN_FIRE_wci_s_2_mFlag,
       CAN_FIRE_wci_s_3_mAddr,
       CAN_FIRE_wci_s_3_mAddrSpace,
       CAN_FIRE_wci_s_3_mByteEn,
       CAN_FIRE_wci_s_3_mCmd,
       CAN_FIRE_wci_s_3_mData,
       CAN_FIRE_wci_s_3_mFlag,
       CAN_FIRE_wci_s_4_mAddr,
       CAN_FIRE_wci_s_4_mAddrSpace,
       CAN_FIRE_wci_s_4_mByteEn,
       CAN_FIRE_wci_s_4_mCmd,
       CAN_FIRE_wci_s_4_mData,
       CAN_FIRE_wci_s_4_mFlag,
       CAN_FIRE_wci_s_5_mAddr,
       CAN_FIRE_wci_s_5_mAddrSpace,
       CAN_FIRE_wci_s_5_mByteEn,
       CAN_FIRE_wci_s_5_mCmd,
       CAN_FIRE_wci_s_5_mData,
       CAN_FIRE_wci_s_5_mFlag,
       CAN_FIRE_wci_s_6_mAddr,
       CAN_FIRE_wci_s_6_mAddrSpace,
       CAN_FIRE_wci_s_6_mByteEn,
       CAN_FIRE_wci_s_6_mCmd,
       CAN_FIRE_wci_s_6_mData,
       CAN_FIRE_wci_s_6_mFlag,
       CAN_FIRE_wci_s_7_mAddr,
       CAN_FIRE_wci_s_7_mAddrSpace,
       CAN_FIRE_wci_s_7_mByteEn,
       CAN_FIRE_wci_s_7_mCmd,
       CAN_FIRE_wci_s_7_mData,
       CAN_FIRE_wci_s_7_mFlag,
       CAN_FIRE_wmemiM_sCmdAccept,
       CAN_FIRE_wmemiM_sData,
       CAN_FIRE_wmemiM_sDataAccept,
       CAN_FIRE_wmemiM_sResp,
       CAN_FIRE_wmemiM_sRespLast,
       CAN_FIRE_wmiM0_sData,
       CAN_FIRE_wmiM0_sDataThreadBusy,
       CAN_FIRE_wmiM0_sFlag,
       CAN_FIRE_wmiM0_sReset_n,
       CAN_FIRE_wmiM0_sResp,
       CAN_FIRE_wmiM0_sRespLast,
       CAN_FIRE_wmiM0_sThreadBusy,
       CAN_FIRE_wmiM1_sData,
       CAN_FIRE_wmiM1_sDataThreadBusy,
       CAN_FIRE_wmiM1_sFlag,
       CAN_FIRE_wmiM1_sReset_n,
       CAN_FIRE_wmiM1_sResp,
       CAN_FIRE_wmiM1_sRespLast,
       CAN_FIRE_wmiM1_sThreadBusy,
       CAN_FIRE_wsi_m_dac_sReset_n,
       CAN_FIRE_wsi_m_dac_sThreadBusy,
       CAN_FIRE_wsi_s_adc_mBurstLength,
       CAN_FIRE_wsi_s_adc_mBurstPrecise,
       CAN_FIRE_wsi_s_adc_mByteEn,
       CAN_FIRE_wsi_s_adc_mCmd,
       CAN_FIRE_wsi_s_adc_mData,
       CAN_FIRE_wsi_s_adc_mDataInfo,
       CAN_FIRE_wsi_s_adc_mReqInfo,
       CAN_FIRE_wsi_s_adc_mReqLast,
       CAN_FIRE_wsi_s_adc_mReset_n,
       WILL_FIRE_RL_appW3_doMessagePush,
       WILL_FIRE_RL_appW3_operating_actions,
       WILL_FIRE_RL_appW3_wci_Es_doAlways_Req,
       WILL_FIRE_RL_appW3_wci_cfrd,
       WILL_FIRE_RL_appW3_wci_cfwr,
       WILL_FIRE_RL_appW3_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_appW3_wci_ctl_op_complete,
       WILL_FIRE_RL_appW3_wci_ctl_op_start,
       WILL_FIRE_RL_appW3_wci_ctrl_EiI,
       WILL_FIRE_RL_appW3_wci_ctrl_IsO,
       WILL_FIRE_RL_appW3_wci_ctrl_OrE,
       WILL_FIRE_RL_appW3_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_appW3_wci_reqF_enq,
       WILL_FIRE_RL_appW3_wci_request_decode,
       WILL_FIRE_RL_appW3_wci_respF_both,
       WILL_FIRE_RL_appW3_wci_respF_decCtr,
       WILL_FIRE_RL_appW3_wci_respF_deq,
       WILL_FIRE_RL_appW3_wci_respF_incCtr,
       WILL_FIRE_RL_appW3_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_appW3_wci_sThreadBusy_reg,
       WILL_FIRE_RL_appW3_wsiM_ext_status_assign,
       WILL_FIRE_RL_appW3_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_appW3_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_both,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_deq,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_appW3_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_appW3_wsiM_update_statusR,
       WILL_FIRE_RL_appW3_wsiS_backpressure,
       WILL_FIRE_RL_appW3_wsiS_ext_status_assign,
       WILL_FIRE_RL_appW3_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_appW3_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_appW3_wsiS_reqFifo_enq,
       WILL_FIRE_RL_appW3_wsiS_reqFifo_reset,
       WILL_FIRE_RL_appW3_wsiS_update_statusR,
       WILL_FIRE_RL_appW3_wsi_Es_doAlways,
       WILL_FIRE_RL_mBurstLConnect,
       WILL_FIRE_RL_mBurstLConnect_1,
       WILL_FIRE_RL_mBurstPConnect,
       WILL_FIRE_RL_mBurstPConnect_1,
       WILL_FIRE_RL_mByteEnConnect,
       WILL_FIRE_RL_mByteEnConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mDataIConnect,
       WILL_FIRE_RL_mDataIConnect_1,
       WILL_FIRE_RL_mReqIConnect,
       WILL_FIRE_RL_mReqIConnect_1,
       WILL_FIRE_RL_mReqLConnect,
       WILL_FIRE_RL_mReqLConnect_1,
       WILL_FIRE_RL_mRstConnect,
       WILL_FIRE_RL_mRstConnect_1,
       WILL_FIRE_RL_sRstConnect,
       WILL_FIRE_RL_sRstConnect_1,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_wci_s_0_mAddr,
       WILL_FIRE_wci_s_0_mAddrSpace,
       WILL_FIRE_wci_s_0_mByteEn,
       WILL_FIRE_wci_s_0_mCmd,
       WILL_FIRE_wci_s_0_mData,
       WILL_FIRE_wci_s_0_mFlag,
       WILL_FIRE_wci_s_1_mAddr,
       WILL_FIRE_wci_s_1_mAddrSpace,
       WILL_FIRE_wci_s_1_mByteEn,
       WILL_FIRE_wci_s_1_mCmd,
       WILL_FIRE_wci_s_1_mData,
       WILL_FIRE_wci_s_1_mFlag,
       WILL_FIRE_wci_s_2_mAddr,
       WILL_FIRE_wci_s_2_mAddrSpace,
       WILL_FIRE_wci_s_2_mByteEn,
       WILL_FIRE_wci_s_2_mCmd,
       WILL_FIRE_wci_s_2_mData,
       WILL_FIRE_wci_s_2_mFlag,
       WILL_FIRE_wci_s_3_mAddr,
       WILL_FIRE_wci_s_3_mAddrSpace,
       WILL_FIRE_wci_s_3_mByteEn,
       WILL_FIRE_wci_s_3_mCmd,
       WILL_FIRE_wci_s_3_mData,
       WILL_FIRE_wci_s_3_mFlag,
       WILL_FIRE_wci_s_4_mAddr,
       WILL_FIRE_wci_s_4_mAddrSpace,
       WILL_FIRE_wci_s_4_mByteEn,
       WILL_FIRE_wci_s_4_mCmd,
       WILL_FIRE_wci_s_4_mData,
       WILL_FIRE_wci_s_4_mFlag,
       WILL_FIRE_wci_s_5_mAddr,
       WILL_FIRE_wci_s_5_mAddrSpace,
       WILL_FIRE_wci_s_5_mByteEn,
       WILL_FIRE_wci_s_5_mCmd,
       WILL_FIRE_wci_s_5_mData,
       WILL_FIRE_wci_s_5_mFlag,
       WILL_FIRE_wci_s_6_mAddr,
       WILL_FIRE_wci_s_6_mAddrSpace,
       WILL_FIRE_wci_s_6_mByteEn,
       WILL_FIRE_wci_s_6_mCmd,
       WILL_FIRE_wci_s_6_mData,
       WILL_FIRE_wci_s_6_mFlag,
       WILL_FIRE_wci_s_7_mAddr,
       WILL_FIRE_wci_s_7_mAddrSpace,
       WILL_FIRE_wci_s_7_mByteEn,
       WILL_FIRE_wci_s_7_mCmd,
       WILL_FIRE_wci_s_7_mData,
       WILL_FIRE_wci_s_7_mFlag,
       WILL_FIRE_wmemiM_sCmdAccept,
       WILL_FIRE_wmemiM_sData,
       WILL_FIRE_wmemiM_sDataAccept,
       WILL_FIRE_wmemiM_sResp,
       WILL_FIRE_wmemiM_sRespLast,
       WILL_FIRE_wmiM0_sData,
       WILL_FIRE_wmiM0_sDataThreadBusy,
       WILL_FIRE_wmiM0_sFlag,
       WILL_FIRE_wmiM0_sReset_n,
       WILL_FIRE_wmiM0_sResp,
       WILL_FIRE_wmiM0_sRespLast,
       WILL_FIRE_wmiM0_sThreadBusy,
       WILL_FIRE_wmiM1_sData,
       WILL_FIRE_wmiM1_sDataThreadBusy,
       WILL_FIRE_wmiM1_sFlag,
       WILL_FIRE_wmiM1_sReset_n,
       WILL_FIRE_wmiM1_sResp,
       WILL_FIRE_wmiM1_sRespLast,
       WILL_FIRE_wmiM1_sThreadBusy,
       WILL_FIRE_wsi_m_dac_sReset_n,
       WILL_FIRE_wsi_m_dac_sThreadBusy,
       WILL_FIRE_wsi_s_adc_mBurstLength,
       WILL_FIRE_wsi_s_adc_mBurstPrecise,
       WILL_FIRE_wsi_s_adc_mByteEn,
       WILL_FIRE_wsi_s_adc_mCmd,
       WILL_FIRE_wsi_s_adc_mData,
       WILL_FIRE_wsi_s_adc_mDataInfo,
       WILL_FIRE_wsi_s_adc_mReqInfo,
       WILL_FIRE_wsi_s_adc_mReqLast,
       WILL_FIRE_wsi_s_adc_mReset_n;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_appW3_wci_respF_q_0$write_1__VAL_2;
  wire [60 : 0] MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_1;
  wire [33 : 0] MUX_appW3_wci_respF_q_0$write_1__VAL_1,
		MUX_appW3_wci_respF_q_1$write_1__VAL_1,
		MUX_appW3_wci_respF_x_wire$wset_1__VAL_1,
		MUX_appW3_wci_respF_x_wire$wset_1__VAL_2;
  wire [1 : 0] MUX_appW3_wci_respF_c_r$write_1__VAL_1,
	       MUX_appW3_wci_respF_c_r$write_1__VAL_2,
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_appW3_biasValue$write_1__SEL_1,
       MUX_appW3_controlReg$write_1__SEL_1,
       MUX_appW3_wci_illegalEdge$write_1__SEL_1,
       MUX_appW3_wci_illegalEdge$write_1__SEL_2,
       MUX_appW3_wci_illegalEdge$write_1__VAL_2,
       MUX_appW3_wci_respF_q_0$write_1__SEL_2,
       MUX_appW3_wci_respF_q_1$write_1__SEL_2,
       MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h10393, v__h10554, v__h4181, v__h4366, v__h4521;
  reg [31 : 0] _theResult____h10538;
  wire [31 : 0] rdat__h10628,
		rdat__h10728,
		rdat__h10742,
		rdat__h10750,
		rdat__h10756,
		rdat__h10770,
		rdat__h10778,
		x_data__h10127;
  wire [15 : 0] x__h10632;
  wire appW3_wsiS_reqFifo_notFull__69_AND_appW3_wsiS__ETC___d191;

  // action method wci_s_0_mCmd
  assign CAN_FIRE_wci_s_0_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mCmd = 1'd1 ;

  // action method wci_s_0_mAddrSpace
  assign CAN_FIRE_wci_s_0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mAddrSpace = 1'd1 ;

  // action method wci_s_0_mByteEn
  assign CAN_FIRE_wci_s_0_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mByteEn = 1'd1 ;

  // action method wci_s_0_mAddr
  assign CAN_FIRE_wci_s_0_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mAddr = 1'd1 ;

  // action method wci_s_0_mData
  assign CAN_FIRE_wci_s_0_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mData = 1'd1 ;

  // value method wci_s_0_sResp
  assign wci_s_0_SResp = 2'd0 ;

  // value method wci_s_0_sData
  assign wci_s_0_SData = 32'hAAAAAAAA ;

  // value method wci_s_0_sThreadBusy
  assign wci_s_0_SThreadBusy = 1'd1 ;

  // value method wci_s_0_sFlag
  assign wci_s_0_SFlag = 2'b0 ;

  // action method wci_s_0_mFlag
  assign CAN_FIRE_wci_s_0_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mFlag = 1'd1 ;

  // action method wci_s_1_mCmd
  assign CAN_FIRE_wci_s_1_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mCmd = 1'd1 ;

  // action method wci_s_1_mAddrSpace
  assign CAN_FIRE_wci_s_1_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mAddrSpace = 1'd1 ;

  // action method wci_s_1_mByteEn
  assign CAN_FIRE_wci_s_1_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mByteEn = 1'd1 ;

  // action method wci_s_1_mAddr
  assign CAN_FIRE_wci_s_1_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mAddr = 1'd1 ;

  // action method wci_s_1_mData
  assign CAN_FIRE_wci_s_1_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mData = 1'd1 ;

  // value method wci_s_1_sResp
  assign wci_s_1_SResp = 2'd0 ;

  // value method wci_s_1_sData
  assign wci_s_1_SData = 32'hAAAAAAAA ;

  // value method wci_s_1_sThreadBusy
  assign wci_s_1_SThreadBusy = 1'd1 ;

  // value method wci_s_1_sFlag
  assign wci_s_1_SFlag = 2'b0 ;

  // action method wci_s_1_mFlag
  assign CAN_FIRE_wci_s_1_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mFlag = 1'd1 ;

  // action method wci_s_2_mCmd
  assign CAN_FIRE_wci_s_2_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mCmd = 1'd1 ;

  // action method wci_s_2_mAddrSpace
  assign CAN_FIRE_wci_s_2_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mAddrSpace = 1'd1 ;

  // action method wci_s_2_mByteEn
  assign CAN_FIRE_wci_s_2_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mByteEn = 1'd1 ;

  // action method wci_s_2_mAddr
  assign CAN_FIRE_wci_s_2_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mAddr = 1'd1 ;

  // action method wci_s_2_mData
  assign CAN_FIRE_wci_s_2_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mData = 1'd1 ;

  // value method wci_s_2_sResp
  assign wci_s_2_SResp = appW2$wciS0_SResp ;

  // value method wci_s_2_sData
  assign wci_s_2_SData = appW2$wciS0_SData ;

  // value method wci_s_2_sThreadBusy
  assign wci_s_2_SThreadBusy = appW2$wciS0_SThreadBusy ;

  // value method wci_s_2_sFlag
  assign wci_s_2_SFlag = appW2$wciS0_SFlag ;

  // action method wci_s_2_mFlag
  assign CAN_FIRE_wci_s_2_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mFlag = 1'd1 ;

  // action method wci_s_3_mCmd
  assign CAN_FIRE_wci_s_3_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mCmd = 1'd1 ;

  // action method wci_s_3_mAddrSpace
  assign CAN_FIRE_wci_s_3_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mAddrSpace = 1'd1 ;

  // action method wci_s_3_mByteEn
  assign CAN_FIRE_wci_s_3_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mByteEn = 1'd1 ;

  // action method wci_s_3_mAddr
  assign CAN_FIRE_wci_s_3_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mAddr = 1'd1 ;

  // action method wci_s_3_mData
  assign CAN_FIRE_wci_s_3_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mData = 1'd1 ;

  // value method wci_s_3_sResp
  assign wci_s_3_SResp = appW3_wci_respF_q_0[33:32] ;

  // value method wci_s_3_sData
  assign wci_s_3_SData = appW3_wci_respF_q_0[31:0] ;

  // value method wci_s_3_sThreadBusy
  assign wci_s_3_SThreadBusy =
	     appW3_wci_reqF_countReg > 2'd1 || appW3_wci_isReset$VAL ;

  // value method wci_s_3_sFlag
  assign wci_s_3_SFlag = { 1'd1, appW3_wci_sFlagReg } ;

  // action method wci_s_3_mFlag
  assign CAN_FIRE_wci_s_3_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mFlag = 1'd1 ;

  // action method wci_s_4_mCmd
  assign CAN_FIRE_wci_s_4_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mCmd = 1'd1 ;

  // action method wci_s_4_mAddrSpace
  assign CAN_FIRE_wci_s_4_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mAddrSpace = 1'd1 ;

  // action method wci_s_4_mByteEn
  assign CAN_FIRE_wci_s_4_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mByteEn = 1'd1 ;

  // action method wci_s_4_mAddr
  assign CAN_FIRE_wci_s_4_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mAddr = 1'd1 ;

  // action method wci_s_4_mData
  assign CAN_FIRE_wci_s_4_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mData = 1'd1 ;

  // value method wci_s_4_sResp
  assign wci_s_4_SResp = appW4$wciS0_SResp ;

  // value method wci_s_4_sData
  assign wci_s_4_SData = appW4$wciS0_SData ;

  // value method wci_s_4_sThreadBusy
  assign wci_s_4_SThreadBusy = appW4$wciS0_SThreadBusy ;

  // value method wci_s_4_sFlag
  assign wci_s_4_SFlag = appW4$wciS0_SFlag ;

  // action method wci_s_4_mFlag
  assign CAN_FIRE_wci_s_4_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mFlag = 1'd1 ;

  // action method wci_s_5_mCmd
  assign CAN_FIRE_wci_s_5_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mCmd = 1'd1 ;

  // action method wci_s_5_mAddrSpace
  assign CAN_FIRE_wci_s_5_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mAddrSpace = 1'd1 ;

  // action method wci_s_5_mByteEn
  assign CAN_FIRE_wci_s_5_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mByteEn = 1'd1 ;

  // action method wci_s_5_mAddr
  assign CAN_FIRE_wci_s_5_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mAddr = 1'd1 ;

  // action method wci_s_5_mData
  assign CAN_FIRE_wci_s_5_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mData = 1'd1 ;

  // value method wci_s_5_sResp
  assign wci_s_5_SResp = 2'd0 ;

  // value method wci_s_5_sData
  assign wci_s_5_SData = 32'hAAAAAAAA ;

  // value method wci_s_5_sThreadBusy
  assign wci_s_5_SThreadBusy = 1'd1 ;

  // value method wci_s_5_sFlag
  assign wci_s_5_SFlag = 2'b0 ;

  // action method wci_s_5_mFlag
  assign CAN_FIRE_wci_s_5_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mFlag = 1'd1 ;

  // action method wci_s_6_mCmd
  assign CAN_FIRE_wci_s_6_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mCmd = 1'd1 ;

  // action method wci_s_6_mAddrSpace
  assign CAN_FIRE_wci_s_6_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mAddrSpace = 1'd1 ;

  // action method wci_s_6_mByteEn
  assign CAN_FIRE_wci_s_6_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mByteEn = 1'd1 ;

  // action method wci_s_6_mAddr
  assign CAN_FIRE_wci_s_6_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mAddr = 1'd1 ;

  // action method wci_s_6_mData
  assign CAN_FIRE_wci_s_6_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mData = 1'd1 ;

  // value method wci_s_6_sResp
  assign wci_s_6_SResp = 2'd0 ;

  // value method wci_s_6_sData
  assign wci_s_6_SData = 32'hAAAAAAAA ;

  // value method wci_s_6_sThreadBusy
  assign wci_s_6_SThreadBusy = 1'd1 ;

  // value method wci_s_6_sFlag
  assign wci_s_6_SFlag = 2'b0 ;

  // action method wci_s_6_mFlag
  assign CAN_FIRE_wci_s_6_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mFlag = 1'd1 ;

  // action method wci_s_7_mCmd
  assign CAN_FIRE_wci_s_7_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mCmd = 1'd1 ;

  // action method wci_s_7_mAddrSpace
  assign CAN_FIRE_wci_s_7_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mAddrSpace = 1'd1 ;

  // action method wci_s_7_mByteEn
  assign CAN_FIRE_wci_s_7_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mByteEn = 1'd1 ;

  // action method wci_s_7_mAddr
  assign CAN_FIRE_wci_s_7_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mAddr = 1'd1 ;

  // action method wci_s_7_mData
  assign CAN_FIRE_wci_s_7_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mData = 1'd1 ;

  // value method wci_s_7_sResp
  assign wci_s_7_SResp = 2'd0 ;

  // value method wci_s_7_sData
  assign wci_s_7_SData = 32'hAAAAAAAA ;

  // value method wci_s_7_sThreadBusy
  assign wci_s_7_SThreadBusy = 1'd1 ;

  // value method wci_s_7_sFlag
  assign wci_s_7_SFlag = 2'b0 ;

  // action method wci_s_7_mFlag
  assign CAN_FIRE_wci_s_7_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mFlag = 1'd1 ;

  // value method wmiM0_mCmd
  assign wmiM0_MCmd = appW2$wmiM_MCmd ;

  // value method wmiM0_mReqLast
  assign wmiM0_MReqLast = appW2$wmiM_MReqLast ;

  // value method wmiM0_mReqInfo
  assign wmiM0_MReqInfo = appW2$wmiM_MReqInfo ;

  // value method wmiM0_mAddrSpace
  assign wmiM0_MAddrSpace = appW2$wmiM_MAddrSpace ;

  // value method wmiM0_mAddr
  assign wmiM0_MAddr = appW2$wmiM_MAddr ;

  // value method wmiM0_mBurstLength
  assign wmiM0_MBurstLength = appW2$wmiM_MBurstLength ;

  // value method wmiM0_mDataValid
  assign wmiM0_MDataValid = appW2$wmiM_MDataValid ;

  // value method wmiM0_mDataLast
  assign wmiM0_MDataLast = appW2$wmiM_MDataLast ;

  // value method wmiM0_mData
  assign wmiM0_MData = appW2$wmiM_MData ;

  // value method wmiM0_mDataByteEn
  assign wmiM0_MDataByteEn = appW2$wmiM_MDataByteEn ;

  // action method wmiM0_sResp
  assign CAN_FIRE_wmiM0_sResp = 1'd1 ;
  assign WILL_FIRE_wmiM0_sResp = 1'd1 ;

  // action method wmiM0_sData
  assign CAN_FIRE_wmiM0_sData = 1'd1 ;
  assign WILL_FIRE_wmiM0_sData = 1'd1 ;

  // action method wmiM0_sThreadBusy
  assign CAN_FIRE_wmiM0_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM0_sThreadBusy = wmiM0_SThreadBusy ;

  // action method wmiM0_sDataThreadBusy
  assign CAN_FIRE_wmiM0_sDataThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM0_sDataThreadBusy = wmiM0_SDataThreadBusy ;

  // action method wmiM0_sRespLast
  assign CAN_FIRE_wmiM0_sRespLast = 1'd1 ;
  assign WILL_FIRE_wmiM0_sRespLast = wmiM0_SRespLast ;

  // action method wmiM0_sFlag
  assign CAN_FIRE_wmiM0_sFlag = 1'd1 ;
  assign WILL_FIRE_wmiM0_sFlag = 1'd1 ;

  // value method wmiM0_mFlag
  assign wmiM0_MFlag = appW2$wmiM_MFlag ;

  // value method wmiM0_mReset_n
  assign wmiM0_MReset_n = appW2$wmiM_MReset_n ;

  // action method wmiM0_sReset_n
  assign CAN_FIRE_wmiM0_sReset_n = 1'd1 ;
  assign WILL_FIRE_wmiM0_sReset_n = wmiM0_SReset_n ;

  // value method wmiM1_mCmd
  assign wmiM1_MCmd = appW4$wmiM_MCmd ;

  // value method wmiM1_mReqLast
  assign wmiM1_MReqLast = appW4$wmiM_MReqLast ;

  // value method wmiM1_mReqInfo
  assign wmiM1_MReqInfo = appW4$wmiM_MReqInfo ;

  // value method wmiM1_mAddrSpace
  assign wmiM1_MAddrSpace = appW4$wmiM_MAddrSpace ;

  // value method wmiM1_mAddr
  assign wmiM1_MAddr = appW4$wmiM_MAddr ;

  // value method wmiM1_mBurstLength
  assign wmiM1_MBurstLength = appW4$wmiM_MBurstLength ;

  // value method wmiM1_mDataValid
  assign wmiM1_MDataValid = appW4$wmiM_MDataValid ;

  // value method wmiM1_mDataLast
  assign wmiM1_MDataLast = appW4$wmiM_MDataLast ;

  // value method wmiM1_mData
  assign wmiM1_MData = appW4$wmiM_MData ;

  // value method wmiM1_mDataByteEn
  assign wmiM1_MDataByteEn = appW4$wmiM_MDataByteEn ;

  // action method wmiM1_sResp
  assign CAN_FIRE_wmiM1_sResp = 1'd1 ;
  assign WILL_FIRE_wmiM1_sResp = 1'd1 ;

  // action method wmiM1_sData
  assign CAN_FIRE_wmiM1_sData = 1'd1 ;
  assign WILL_FIRE_wmiM1_sData = 1'd1 ;

  // action method wmiM1_sThreadBusy
  assign CAN_FIRE_wmiM1_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM1_sThreadBusy = wmiM1_SThreadBusy ;

  // action method wmiM1_sDataThreadBusy
  assign CAN_FIRE_wmiM1_sDataThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM1_sDataThreadBusy = wmiM1_SDataThreadBusy ;

  // action method wmiM1_sRespLast
  assign CAN_FIRE_wmiM1_sRespLast = 1'd1 ;
  assign WILL_FIRE_wmiM1_sRespLast = wmiM1_SRespLast ;

  // action method wmiM1_sFlag
  assign CAN_FIRE_wmiM1_sFlag = 1'd1 ;
  assign WILL_FIRE_wmiM1_sFlag = 1'd1 ;

  // value method wmiM1_mFlag
  assign wmiM1_MFlag = appW4$wmiM_MFlag ;

  // value method wmiM1_mReset_n
  assign wmiM1_MReset_n = appW4$wmiM_MReset_n ;

  // action method wmiM1_sReset_n
  assign CAN_FIRE_wmiM1_sReset_n = 1'd1 ;
  assign WILL_FIRE_wmiM1_sReset_n = wmiM1_SReset_n ;

  // value method wmemiM_mCmd
  assign wmemiM_MCmd = 3'h2 ;

  // value method wmemiM_mReqLast
  assign wmemiM_MReqLast = 1'h0 ;

  // value method wmemiM_mAddr
  assign wmemiM_MAddr = 36'hAAAAAAAAA ;

  // value method wmemiM_mBurstLength
  assign wmemiM_MBurstLength = 12'hAAA ;

  // value method wmemiM_mDataValid
  assign wmemiM_MDataValid = 1'h0 ;

  // value method wmemiM_mDataLast
  assign wmemiM_MDataLast = 1'h0 ;

  // value method wmemiM_mData
  assign wmemiM_MData = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;

  // value method wmemiM_mDataByteEn
  assign wmemiM_MDataByteEn = 16'hAAAA ;

  // action method wmemiM_sResp
  assign CAN_FIRE_wmemiM_sResp = 1'd1 ;
  assign WILL_FIRE_wmemiM_sResp = 1'd1 ;

  // action method wmemiM_sRespLast
  assign CAN_FIRE_wmemiM_sRespLast = 1'd1 ;
  assign WILL_FIRE_wmemiM_sRespLast = wmemiM_SRespLast ;

  // action method wmemiM_sData
  assign CAN_FIRE_wmemiM_sData = 1'd1 ;
  assign WILL_FIRE_wmemiM_sData = 1'd1 ;

  // action method wmemiM_sCmdAccept
  assign CAN_FIRE_wmemiM_sCmdAccept = 1'd1 ;
  assign WILL_FIRE_wmemiM_sCmdAccept = wmemiM_SCmdAccept ;

  // action method wmemiM_sDataAccept
  assign CAN_FIRE_wmemiM_sDataAccept = 1'd1 ;
  assign WILL_FIRE_wmemiM_sDataAccept = wmemiM_SDataAccept ;

  // value method wmemiM_mReset_n
  assign wmemiM_MReset_n = 1'h0 ;

  // action method wsi_s_adc_mCmd
  assign CAN_FIRE_wsi_s_adc_mCmd = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mCmd = 1'd1 ;

  // action method wsi_s_adc_mReqLast
  assign CAN_FIRE_wsi_s_adc_mReqLast = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReqLast = wsi_s_adc_MReqLast ;

  // action method wsi_s_adc_mBurstPrecise
  assign CAN_FIRE_wsi_s_adc_mBurstPrecise = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mBurstPrecise = wsi_s_adc_MBurstPrecise ;

  // action method wsi_s_adc_mBurstLength
  assign CAN_FIRE_wsi_s_adc_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mBurstLength = 1'd1 ;

  // action method wsi_s_adc_mData
  assign CAN_FIRE_wsi_s_adc_mData = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mData = 1'd1 ;

  // action method wsi_s_adc_mByteEn
  assign CAN_FIRE_wsi_s_adc_mByteEn = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mByteEn = 1'd1 ;

  // action method wsi_s_adc_mReqInfo
  assign CAN_FIRE_wsi_s_adc_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReqInfo = 1'd1 ;

  // action method wsi_s_adc_mDataInfo
  assign CAN_FIRE_wsi_s_adc_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mDataInfo = 1'd1 ;

  // value method wsi_s_adc_sThreadBusy
  assign wsi_s_adc_SThreadBusy = appW2$wsiS0_SThreadBusy ;

  // value method wsi_s_adc_sReset_n
  assign wsi_s_adc_SReset_n = appW2$wsiS0_SReset_n ;

  // action method wsi_s_adc_mReset_n
  assign CAN_FIRE_wsi_s_adc_mReset_n = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReset_n = wsi_s_adc_MReset_n ;

  // value method wsi_m_dac_mCmd
  assign wsi_m_dac_MCmd = appW4$wsiM0_MCmd ;

  // value method wsi_m_dac_mReqLast
  assign wsi_m_dac_MReqLast = appW4$wsiM0_MReqLast ;

  // value method wsi_m_dac_mBurstPrecise
  assign wsi_m_dac_MBurstPrecise = appW4$wsiM0_MBurstPrecise ;

  // value method wsi_m_dac_mBurstLength
  assign wsi_m_dac_MBurstLength = appW4$wsiM0_MBurstLength ;

  // value method wsi_m_dac_mData
  assign wsi_m_dac_MData = appW4$wsiM0_MData ;

  // value method wsi_m_dac_mByteEn
  assign wsi_m_dac_MByteEn = appW4$wsiM0_MByteEn ;

  // value method wsi_m_dac_mReqInfo
  assign wsi_m_dac_MReqInfo = appW4$wsiM0_MReqInfo ;

  // action method wsi_m_dac_sThreadBusy
  assign CAN_FIRE_wsi_m_dac_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wsi_m_dac_sThreadBusy = wsi_m_dac_SThreadBusy ;

  // value method wsi_m_dac_mReset_n
  assign wsi_m_dac_MReset_n = appW4$wsiM0_MReset_n ;

  // action method wsi_m_dac_sReset_n
  assign CAN_FIRE_wsi_m_dac_sReset_n = 1'd1 ;
  assign WILL_FIRE_wsi_m_dac_sReset_n = wsi_m_dac_SReset_n ;

  // submodule appW2
  mkSMAdapter4B #(.smaCtrlInit(32'h00000001),
		  .hasDebugLogic(hasDebugLogic)) appW2(.wciS0_Clk(CLK),
						       .wciS0_MReset_n(RST_N_rst_2),
						       .wciS0_MAddr(appW2$wciS0_MAddr),
						       .wciS0_MAddrSpace(appW2$wciS0_MAddrSpace),
						       .wciS0_MByteEn(appW2$wciS0_MByteEn),
						       .wciS0_MCmd(appW2$wciS0_MCmd),
						       .wciS0_MData(appW2$wciS0_MData),
						       .wciS0_MFlag(appW2$wciS0_MFlag),
						       .wmiM_SData(appW2$wmiM_SData),
						       .wmiM_SFlag(appW2$wmiM_SFlag),
						       .wmiM_SResp(appW2$wmiM_SResp),
						       .wsiS0_MBurstLength(appW2$wsiS0_MBurstLength),
						       .wsiS0_MByteEn(appW2$wsiS0_MByteEn),
						       .wsiS0_MCmd(appW2$wsiS0_MCmd),
						       .wsiS0_MData(appW2$wsiS0_MData),
						       .wsiS0_MReqInfo(appW2$wsiS0_MReqInfo),
						       .wmiM_SThreadBusy(appW2$wmiM_SThreadBusy),
						       .wmiM_SDataThreadBusy(appW2$wmiM_SDataThreadBusy),
						       .wmiM_SRespLast(appW2$wmiM_SRespLast),
						       .wmiM_SReset_n(appW2$wmiM_SReset_n),
						       .wsiM0_SThreadBusy(appW2$wsiM0_SThreadBusy),
						       .wsiM0_SReset_n(appW2$wsiM0_SReset_n),
						       .wsiS0_MReqLast(appW2$wsiS0_MReqLast),
						       .wsiS0_MBurstPrecise(appW2$wsiS0_MBurstPrecise),
						       .wsiS0_MReset_n(appW2$wsiS0_MReset_n),
						       .wciS0_SResp(appW2$wciS0_SResp),
						       .wciS0_SData(appW2$wciS0_SData),
						       .wciS0_SThreadBusy(appW2$wciS0_SThreadBusy),
						       .wciS0_SFlag(appW2$wciS0_SFlag),
						       .wmiM_MCmd(appW2$wmiM_MCmd),
						       .wmiM_MReqLast(appW2$wmiM_MReqLast),
						       .wmiM_MReqInfo(appW2$wmiM_MReqInfo),
						       .wmiM_MAddrSpace(appW2$wmiM_MAddrSpace),
						       .wmiM_MAddr(appW2$wmiM_MAddr),
						       .wmiM_MBurstLength(appW2$wmiM_MBurstLength),
						       .wmiM_MDataValid(appW2$wmiM_MDataValid),
						       .wmiM_MDataLast(appW2$wmiM_MDataLast),
						       .wmiM_MData(appW2$wmiM_MData),
						       .wmiM_MDataByteEn(appW2$wmiM_MDataByteEn),
						       .wmiM_MFlag(appW2$wmiM_MFlag),
						       .wmiM_MReset_n(appW2$wmiM_MReset_n),
						       .wsiM0_MCmd(appW2$wsiM0_MCmd),
						       .wsiM0_MReqLast(appW2$wsiM0_MReqLast),
						       .wsiM0_MBurstPrecise(appW2$wsiM0_MBurstPrecise),
						       .wsiM0_MBurstLength(appW2$wsiM0_MBurstLength),
						       .wsiM0_MData(appW2$wsiM0_MData),
						       .wsiM0_MByteEn(appW2$wsiM0_MByteEn),
						       .wsiM0_MReqInfo(appW2$wsiM0_MReqInfo),
						       .wsiM0_MReset_n(appW2$wsiM0_MReset_n),
						       .wsiS0_SThreadBusy(appW2$wsiS0_SThreadBusy),
						       .wsiS0_SReset_n(appW2$wsiS0_SReset_n));

  // submodule appW3_wci_isReset
  ResetToBool appW3_wci_isReset(.RST(RST_N_rst_3),
				.VAL(appW3_wci_isReset$VAL));

  // submodule appW3_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW3_wci_reqF(.RST_N(RST_N_rst_3),
					      .CLK(CLK),
					      .D_IN(appW3_wci_reqF$D_IN),
					      .ENQ(appW3_wci_reqF$ENQ),
					      .DEQ(appW3_wci_reqF$DEQ),
					      .CLR(appW3_wci_reqF$CLR),
					      .D_OUT(appW3_wci_reqF$D_OUT),
					      .FULL_N(),
					      .EMPTY_N(appW3_wci_reqF$EMPTY_N));

  // submodule appW3_wsiM_isReset
  ResetToBool appW3_wsiM_isReset(.RST(RST_N_rst_3),
				 .VAL(appW3_wsiM_isReset$VAL));

  // submodule appW3_wsiS_isReset
  ResetToBool appW3_wsiS_isReset(.RST(RST_N_rst_3),
				 .VAL(appW3_wsiS_isReset$VAL));

  // submodule appW3_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW3_wsiS_reqFifo(.RST_N(RST_N_rst_3),
						  .CLK(CLK),
						  .D_IN(appW3_wsiS_reqFifo$D_IN),
						  .ENQ(appW3_wsiS_reqFifo$ENQ),
						  .DEQ(appW3_wsiS_reqFifo$DEQ),
						  .CLR(appW3_wsiS_reqFifo$CLR),
						  .D_OUT(appW3_wsiS_reqFifo$D_OUT),
						  .FULL_N(appW3_wsiS_reqFifo$FULL_N),
						  .EMPTY_N(appW3_wsiS_reqFifo$EMPTY_N));

  // submodule appW4
  mkSMAdapter4B #(.smaCtrlInit(32'h00000002),
		  .hasDebugLogic(hasDebugLogic)) appW4(.wciS0_Clk(CLK),
						       .wciS0_MReset_n(RST_N_rst_4),
						       .wciS0_MAddr(appW4$wciS0_MAddr),
						       .wciS0_MAddrSpace(appW4$wciS0_MAddrSpace),
						       .wciS0_MByteEn(appW4$wciS0_MByteEn),
						       .wciS0_MCmd(appW4$wciS0_MCmd),
						       .wciS0_MData(appW4$wciS0_MData),
						       .wciS0_MFlag(appW4$wciS0_MFlag),
						       .wmiM_SData(appW4$wmiM_SData),
						       .wmiM_SFlag(appW4$wmiM_SFlag),
						       .wmiM_SResp(appW4$wmiM_SResp),
						       .wsiS0_MBurstLength(appW4$wsiS0_MBurstLength),
						       .wsiS0_MByteEn(appW4$wsiS0_MByteEn),
						       .wsiS0_MCmd(appW4$wsiS0_MCmd),
						       .wsiS0_MData(appW4$wsiS0_MData),
						       .wsiS0_MReqInfo(appW4$wsiS0_MReqInfo),
						       .wmiM_SThreadBusy(appW4$wmiM_SThreadBusy),
						       .wmiM_SDataThreadBusy(appW4$wmiM_SDataThreadBusy),
						       .wmiM_SRespLast(appW4$wmiM_SRespLast),
						       .wmiM_SReset_n(appW4$wmiM_SReset_n),
						       .wsiM0_SThreadBusy(appW4$wsiM0_SThreadBusy),
						       .wsiM0_SReset_n(appW4$wsiM0_SReset_n),
						       .wsiS0_MReqLast(appW4$wsiS0_MReqLast),
						       .wsiS0_MBurstPrecise(appW4$wsiS0_MBurstPrecise),
						       .wsiS0_MReset_n(appW4$wsiS0_MReset_n),
						       .wciS0_SResp(appW4$wciS0_SResp),
						       .wciS0_SData(appW4$wciS0_SData),
						       .wciS0_SThreadBusy(appW4$wciS0_SThreadBusy),
						       .wciS0_SFlag(appW4$wciS0_SFlag),
						       .wmiM_MCmd(appW4$wmiM_MCmd),
						       .wmiM_MReqLast(appW4$wmiM_MReqLast),
						       .wmiM_MReqInfo(appW4$wmiM_MReqInfo),
						       .wmiM_MAddrSpace(appW4$wmiM_MAddrSpace),
						       .wmiM_MAddr(appW4$wmiM_MAddr),
						       .wmiM_MBurstLength(appW4$wmiM_MBurstLength),
						       .wmiM_MDataValid(appW4$wmiM_MDataValid),
						       .wmiM_MDataLast(appW4$wmiM_MDataLast),
						       .wmiM_MData(appW4$wmiM_MData),
						       .wmiM_MDataByteEn(appW4$wmiM_MDataByteEn),
						       .wmiM_MFlag(appW4$wmiM_MFlag),
						       .wmiM_MReset_n(appW4$wmiM_MReset_n),
						       .wsiM0_MCmd(appW4$wsiM0_MCmd),
						       .wsiM0_MReqLast(appW4$wsiM0_MReqLast),
						       .wsiM0_MBurstPrecise(appW4$wsiM0_MBurstPrecise),
						       .wsiM0_MBurstLength(appW4$wsiM0_MBurstLength),
						       .wsiM0_MData(appW4$wsiM0_MData),
						       .wsiM0_MByteEn(appW4$wsiM0_MByteEn),
						       .wsiM0_MReqInfo(appW4$wsiM0_MReqInfo),
						       .wsiM0_MReset_n(appW4$wsiM0_MReset_n),
						       .wsiS0_SThreadBusy(appW4$wsiS0_SThreadBusy),
						       .wsiS0_SReset_n(appW4$wsiS0_SReset_n));

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mReqLConnect
  assign CAN_FIRE_RL_mReqLConnect = appW2$wsiM0_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect = appW2$wsiM0_MReqLast ;

  // rule RL_mBurstPConnect
  assign CAN_FIRE_RL_mBurstPConnect = appW2$wsiM0_MBurstPrecise ;
  assign WILL_FIRE_RL_mBurstPConnect = appW2$wsiM0_MBurstPrecise ;

  // rule RL_mBurstLConnect
  assign CAN_FIRE_RL_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mByteEnConnect
  assign CAN_FIRE_RL_mByteEnConnect = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect = 1'd1 ;

  // rule RL_mReqIConnect
  assign CAN_FIRE_RL_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect = 1'd1 ;

  // rule RL_mDataIConnect
  assign CAN_FIRE_RL_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect = 1'd1 ;

  // rule RL_mRstConnect
  assign CAN_FIRE_RL_mRstConnect = appW2$wsiM0_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect = appW2$wsiM0_MReset_n ;

  // rule RL_sRstConnect
  assign CAN_FIRE_RL_sRstConnect =
	     !appW3_wsiS_isReset$VAL && appW3_wsiS_operateD ;
  assign WILL_FIRE_RL_sRstConnect = CAN_FIRE_RL_sRstConnect ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_mReqLConnect_1
  assign CAN_FIRE_RL_mReqLConnect_1 =
	     !appW3_wsiM_sThreadBusy_d && appW3_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_mReqLConnect_1 = CAN_FIRE_RL_mReqLConnect_1 ;

  // rule RL_mBurstPConnect_1
  assign CAN_FIRE_RL_mBurstPConnect_1 =
	     !appW3_wsiM_sThreadBusy_d && appW3_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_mBurstPConnect_1 = CAN_FIRE_RL_mBurstPConnect_1 ;

  // rule RL_mBurstLConnect_1
  assign CAN_FIRE_RL_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_1 = 1'd1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mByteEnConnect_1
  assign CAN_FIRE_RL_mByteEnConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect_1 = 1'd1 ;

  // rule RL_mReqIConnect_1
  assign CAN_FIRE_RL_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_1 = 1'd1 ;

  // rule RL_mDataIConnect_1
  assign CAN_FIRE_RL_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect_1 = 1'd1 ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 = appW4$wsiS0_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_1 = appW4$wsiS0_SThreadBusy ;

  // rule RL_mRstConnect_1
  assign CAN_FIRE_RL_mRstConnect_1 =
	     !appW3_wsiM_isReset$VAL && appW3_wsiM_operateD ;
  assign WILL_FIRE_RL_mRstConnect_1 = CAN_FIRE_RL_mRstConnect_1 ;

  // rule RL_sRstConnect_1
  assign CAN_FIRE_RL_sRstConnect_1 = appW4$wsiS0_SReset_n ;
  assign WILL_FIRE_RL_sRstConnect_1 = appW4$wsiS0_SReset_n ;

  // rule RL_appW3_operating_actions
  assign CAN_FIRE_RL_appW3_operating_actions = appW3_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_appW3_operating_actions =
	     CAN_FIRE_RL_appW3_operating_actions ;

  // rule RL_appW3_wci_request_decode
  assign CAN_FIRE_RL_appW3_wci_request_decode = appW3_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_appW3_wci_request_decode = appW3_wci_reqF$EMPTY_N ;

  // rule RL_appW3_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_appW3_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW3_wci_respF_deq
  assign CAN_FIRE_RL_appW3_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_respF_deq = 1'd1 ;

  // rule RL_appW3_wci_ctl_op_start
  assign CAN_FIRE_RL_appW3_wci_ctl_op_start =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_appW3_wci_ctl_op_start =
	     CAN_FIRE_RL_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wci_ctrl_EiI
  assign CAN_FIRE_RL_appW3_wci_ctrl_EiI =
	     appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     appW3_wci_cState == 3'd0 &&
	     appW3_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_appW3_wci_ctrl_EiI = CAN_FIRE_RL_appW3_wci_ctrl_EiI ;

  // rule RL_appW3_wci_ctrl_IsO
  assign CAN_FIRE_RL_appW3_wci_ctrl_IsO =
	     appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     appW3_wci_cState == 3'd1 &&
	     appW3_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_appW3_wci_ctrl_IsO = CAN_FIRE_RL_appW3_wci_ctrl_IsO ;

  // rule RL_appW3_wci_ctrl_OrE
  assign CAN_FIRE_RL_appW3_wci_ctrl_OrE =
	     appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_appW3_wci_ctrl_OrE = CAN_FIRE_RL_appW3_wci_ctrl_OrE ;

  // rule RL_appW3_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_appW3_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiS_backpressure
  assign CAN_FIRE_RL_appW3_wsiS_backpressure =
	     appW3_wsiS_reqFifo_levelsValid && appW3_wsiS_operateD &&
	     appW3_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_appW3_wsiS_backpressure =
	     CAN_FIRE_RL_appW3_wsiS_backpressure ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect =
	     !CAN_FIRE_RL_appW3_wsiS_backpressure ||
	     appW3_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect = CAN_FIRE_RL_stbConnect ;

  // rule RL_appW3_wsiS_ext_status_assign
  assign CAN_FIRE_RL_appW3_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_appW3_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount =
	     appW3_wsiS_operateD && appW3_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_appW3_wsiS_backpressure ||
	      appW3_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_appW3_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount ;

  // rule RL_appW3_wsiS_update_statusR
  assign CAN_FIRE_RL_appW3_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_update_statusR = 1'd1 ;

  // rule RL_appW3_wsiM_ext_status_assign
  assign CAN_FIRE_RL_appW3_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_appW3_wci_cfrd
  assign CAN_FIRE_RL_appW3_wci_cfrd =
	     appW3_wci_respF_c_r != 2'd2 && appW3_wci_reqF$EMPTY_N &&
	     appW3_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_appW3_wci_cfrd =
	     CAN_FIRE_RL_appW3_wci_cfrd &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount =
	     appW3_wsiM_operateD && appW3_wsiM_peerIsReady &&
	     appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW3_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount ;

  // rule RL_appW3_wsiM_update_statusR
  assign CAN_FIRE_RL_appW3_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_update_statusR = 1'd1 ;

  // rule RL_appW3_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_deq =
	     appW3_wsiM_reqFifo_c_r != 2'd0 && !appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq ;

  // rule RL_appW3_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_appW3_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW3_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_appW3_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW3_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_appW3_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_appW3_wci_reqF_enq
  assign CAN_FIRE_RL_appW3_wci_reqF_enq =
	     appW3_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_appW3_wci_reqF_enq = CAN_FIRE_RL_appW3_wci_reqF_enq ;

  // rule RL_appW3_wsi_Es_doAlways
  assign CAN_FIRE_RL_appW3_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsi_Es_doAlways = 1'd1 ;

  // rule RL_appW3_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_appW3_wsiS_reqFifo_enq =
	     appW3_wsiS_operateD && appW3_wsiS_peerIsReady &&
	     appW3_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo_enq ;

  // rule RL_appW3_doMessagePush
  assign CAN_FIRE_RL_appW3_doMessagePush =
	     appW3_wsiM_reqFifo_c_r != 2'd2 && appW3_wsiS_reqFifo$EMPTY_N &&
	     appW3_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_appW3_doMessagePush = CAN_FIRE_RL_appW3_doMessagePush ;

  // rule RL_appW3_wci_cfwr
  assign CAN_FIRE_RL_appW3_wci_cfwr =
	     appW3_wci_respF_c_r != 2'd2 && appW3_wci_reqF$EMPTY_N &&
	     appW3_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_appW3_wci_cfwr =
	     CAN_FIRE_RL_appW3_wci_cfwr &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wci_ctl_op_complete
  assign CAN_FIRE_RL_appW3_wci_ctl_op_complete =
	     appW3_wci_respF_c_r != 2'd2 && appW3_wci_ctlOpActive &&
	     appW3_wci_ctlAckReg ;
  assign WILL_FIRE_RL_appW3_wci_ctl_op_complete =
	     CAN_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter =
	     (appW3_wci_wciReq$wget[59:57] != 3'd0) !=
	     appW3_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_appW3_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter ;

  // rule RL_appW3_wci_respF_incCtr
  assign CAN_FIRE_RL_appW3_wci_respF_incCtr =
	     ((appW3_wci_respF_c_r == 2'd0) ?
		appW3_wci_respF_x_wire$whas :
		appW3_wci_respF_c_r != 2'd1 || appW3_wci_respF_x_wire$whas) &&
	     appW3_wci_respF_enqueueing$whas &&
	     !(appW3_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_appW3_wci_respF_incCtr =
	     CAN_FIRE_RL_appW3_wci_respF_incCtr ;

  // rule RL_appW3_wci_respF_decCtr
  assign CAN_FIRE_RL_appW3_wci_respF_decCtr =
	     appW3_wci_respF_c_r != 2'd0 && !appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wci_respF_decCtr =
	     CAN_FIRE_RL_appW3_wci_respF_decCtr ;

  // rule RL_appW3_wci_respF_both
  assign CAN_FIRE_RL_appW3_wci_respF_both =
	     ((appW3_wci_respF_c_r == 2'd1) ?
		appW3_wci_respF_x_wire$whas :
		appW3_wci_respF_c_r != 2'd2 || appW3_wci_respF_x_wire$whas) &&
	     appW3_wci_respF_c_r != 2'd0 &&
	     appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wci_respF_both =
	     CAN_FIRE_RL_appW3_wci_respF_both ;

  // rule RL_appW3_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     CAN_FIRE_RL_appW3_doMessagePush ;
  assign WILL_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_appW3_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_appW3_wsiS_reqFifo_reset =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     CAN_FIRE_RL_appW3_doMessagePush ;
  assign WILL_FIRE_RL_appW3_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo_reset ;

  // rule RL_appW3_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_appW3_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_incCtr =
	     ((appW3_wsiM_reqFifo_c_r == 2'd0) ?
		CAN_FIRE_RL_appW3_doMessagePush :
		appW3_wsiM_reqFifo_c_r != 2'd1 ||
		CAN_FIRE_RL_appW3_doMessagePush) &&
	     CAN_FIRE_RL_appW3_doMessagePush &&
	     !CAN_FIRE_RL_appW3_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_incCtr ;

  // rule RL_appW3_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     !CAN_FIRE_RL_appW3_doMessagePush ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // rule RL_appW3_wsiM_reqFifo_both
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_both =
	     ((appW3_wsiM_reqFifo_c_r == 2'd1) ?
		CAN_FIRE_RL_appW3_doMessagePush :
		appW3_wsiM_reqFifo_c_r != 2'd2 ||
		CAN_FIRE_RL_appW3_doMessagePush) &&
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     CAN_FIRE_RL_appW3_doMessagePush ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_both =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_both ;

  // inputs to muxes for submodule ports
  assign MUX_appW3_biasValue$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wci_cfwr &&
	     appW3_wci_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_appW3_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wci_cfwr &&
	     appW3_wci_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_appW3_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete && appW3_wci_illegalEdge ;
  assign MUX_appW3_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     (appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW3_wci_cState != 3'd0 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      appW3_wci_cState != 3'd1 &&
	      appW3_wci_cState != 3'd3 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW3_wci_cState != 3'd2 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      appW3_wci_cState != 3'd3 &&
	      appW3_wci_cState != 3'd2 &&
	      appW3_wci_cState != 3'd1 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_appW3_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd0 ;
  assign MUX_appW3_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd1 ;
  assign MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N ;
  assign MUX_appW3_wci_illegalEdge$write_1__VAL_2 =
	     appW3_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     appW3_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     appW3_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_appW3_wci_respF_c_r$write_1__VAL_1 = appW3_wci_respF_c_r + 2'd1 ;
  assign MUX_appW3_wci_respF_c_r$write_1__VAL_2 = appW3_wci_respF_c_r - 2'd1 ;
  assign MUX_appW3_wci_respF_q_0$write_1__VAL_1 =
	     (appW3_wci_respF_c_r == 2'd1) ?
	       MUX_appW3_wci_respF_q_0$write_1__VAL_2 :
	       appW3_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_appW3_wci_ctl_op_complete or
	  MUX_appW3_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wci_cfrd or
	  MUX_appW3_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW3_wci_ctl_op_complete:
	  MUX_appW3_wci_respF_q_0$write_1__VAL_2 =
	      MUX_appW3_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_appW3_wci_cfrd:
	  MUX_appW3_wci_respF_q_0$write_1__VAL_2 =
	      MUX_appW3_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW3_wci_cfwr:
	  MUX_appW3_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_appW3_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_appW3_wci_respF_q_1$write_1__VAL_1 =
	     (appW3_wci_respF_c_r == 2'd2) ?
	       MUX_appW3_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_appW3_wci_respF_x_wire$wset_1__VAL_1 =
	     appW3_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_appW3_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h10538 } ;
  assign MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     appW3_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     appW3_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (appW3_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       appW3_wsiM_reqFifo_q_1 ;
  assign MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     { appW3_wsiS_reqFifo$D_OUT[60:44],
	       x_data__h10127,
	       appW3_wsiS_reqFifo$D_OUT[11:0] } ;
  assign MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (appW3_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign appW3_wci_wciReq$wget =
	     { wci_s_3_MCmd,
	       wci_s_3_MAddrSpace,
	       wci_s_3_MByteEn,
	       wci_s_3_MAddr,
	       wci_s_3_MData } ;
  assign appW3_wci_wciReq$whas = 1'd1 ;
  assign appW3_wci_respF_x_wire$wget =
	     MUX_appW3_wci_respF_q_0$write_1__VAL_2 ;
  assign appW3_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW3_wci_cfrd ||
	     WILL_FIRE_RL_appW3_wci_cfwr ;
  assign appW3_wci_wEdge$wget = appW3_wci_reqF$D_OUT[36:34] ;
  assign appW3_wci_wEdge$whas = WILL_FIRE_RL_appW3_wci_ctl_op_start ;
  assign appW3_wci_sFlagReg_1$wget = 1'b0 ;
  assign appW3_wci_sFlagReg_1$whas = 1'b0 ;
  assign appW3_wci_ctlAckReg_1$wget = 1'd1 ;
  assign appW3_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_appW3_wci_ctrl_OrE ||
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ||
	     WILL_FIRE_RL_appW3_wci_ctrl_EiI ;
  assign appW3_wsiS_wsiReq$wget =
	     { appW2$wsiM0_MCmd,
	       appW2$wsiM0_MReqLast,
	       appW2$wsiM0_MBurstPrecise,
	       appW2$wsiM0_MBurstLength,
	       appW2$wsiM0_MData,
	       appW2$wsiM0_MByteEn,
	       appW2$wsiM0_MReqInfo } ;
  assign appW3_wsiS_wsiReq$whas = 1'd1 ;
  assign appW3_wsiS_operateD_1$wget = 1'd1 ;
  assign appW3_wsiS_operateD_1$whas = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign appW3_wsiS_peerIsReady_1$whas = appW2$wsiM0_MReset_n ;
  assign appW3_wsiS_sThreadBusy_dw$wget = appW3_wsiS_reqFifo_countReg > 2'd1 ;
  assign appW3_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_appW3_wsiS_backpressure ;
  assign appW3_wsiM_reqFifo_x_wire$wget =
	     MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign appW3_wsiM_reqFifo_x_wire$whas = CAN_FIRE_RL_appW3_doMessagePush ;
  assign appW3_wsiM_operateD_1$wget = 1'd1 ;
  assign appW3_wsiM_operateD_1$whas = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign appW3_wsiM_peerIsReady_1$whas = appW4$wsiS0_SReset_n ;
  assign appW3_wci_Es_mCmd_w$wget = wci_s_3_MCmd ;
  assign appW3_wci_Es_mCmd_w$whas = 1'd1 ;
  assign appW3_wci_Es_mAddrSpace_w$wget = wci_s_3_MAddrSpace ;
  assign appW3_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign appW3_wci_Es_mAddr_w$wget = wci_s_3_MAddr ;
  assign appW3_wci_Es_mAddr_w$whas = 1'd1 ;
  assign appW3_wci_Es_mData_w$wget = wci_s_3_MData ;
  assign appW3_wci_Es_mData_w$whas = 1'd1 ;
  assign appW3_wci_Es_mByteEn_w$wget = wci_s_3_MByteEn ;
  assign appW3_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mCmd_w$wget = appW2$wsiM0_MCmd ;
  assign appW3_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mBurstLength_w$wget = appW2$wsiM0_MBurstLength ;
  assign appW3_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mData_w$wget = appW2$wsiM0_MData ;
  assign appW3_wsi_Es_mData_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mByteEn_w$wget = appW2$wsiM0_MByteEn ;
  assign appW3_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mReqInfo_w$wget = appW2$wsiM0_MReqInfo ;
  assign appW3_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mCmd_w$wget = wci_s_0_MCmd ;
  assign tieOff0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddrSpace_w$wget = wci_s_0_MAddrSpace ;
  assign tieOff0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddr_w$wget = wci_s_0_MAddr ;
  assign tieOff0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mData_w$wget = wci_s_0_MData ;
  assign tieOff0_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mByteEn_w$wget = wci_s_0_MByteEn ;
  assign tieOff0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mCmd_w$wget = wci_s_1_MCmd ;
  assign tieOff1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mAddrSpace_w$wget = wci_s_1_MAddrSpace ;
  assign tieOff1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mAddr_w$wget = wci_s_1_MAddr ;
  assign tieOff1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mData_w$wget = wci_s_1_MData ;
  assign tieOff1_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mByteEn_w$wget = wci_s_1_MByteEn ;
  assign tieOff1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mCmd_w$wget = wci_s_5_MCmd ;
  assign tieOff5_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mAddrSpace_w$wget = wci_s_5_MAddrSpace ;
  assign tieOff5_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mAddr_w$wget = wci_s_5_MAddr ;
  assign tieOff5_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mData_w$wget = wci_s_5_MData ;
  assign tieOff5_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mByteEn_w$wget = wci_s_5_MByteEn ;
  assign tieOff5_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mCmd_w$wget = wci_s_6_MCmd ;
  assign tieOff6_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mAddrSpace_w$wget = wci_s_6_MAddrSpace ;
  assign tieOff6_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mAddr_w$wget = wci_s_6_MAddr ;
  assign tieOff6_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mData_w$wget = wci_s_6_MData ;
  assign tieOff6_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mByteEn_w$wget = wci_s_6_MByteEn ;
  assign tieOff6_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mCmd_w$wget = wci_s_7_MCmd ;
  assign tieOff7_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mAddrSpace_w$wget = wci_s_7_MAddrSpace ;
  assign tieOff7_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mAddr_w$wget = wci_s_7_MAddr ;
  assign tieOff7_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mData_w$wget = wci_s_7_MData ;
  assign tieOff7_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mByteEn_w$wget = wci_s_7_MByteEn ;
  assign tieOff7_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign appW3_wci_reqF_r_enq$whas = CAN_FIRE_RL_appW3_wci_reqF_enq ;
  assign appW3_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_appW3_wci_cfrd || WILL_FIRE_RL_appW3_wci_cfwr ||
	     WILL_FIRE_RL_appW3_wci_ctl_op_start ;
  assign appW3_wci_reqF_r_clr$whas = 1'b0 ;
  assign appW3_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_appW3_wci_cfrd || WILL_FIRE_RL_appW3_wci_cfwr ||
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete ;
  assign appW3_wci_respF_dequeueing$whas = appW3_wci_respF_c_r != 2'd0 ;
  assign appW3_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign appW3_wci_wci_cfwr_pw$whas =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_reqF$D_OUT[56] &&
	     appW3_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign appW3_wci_wci_cfrd_pw$whas =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_reqF$D_OUT[56] &&
	     appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW3_wci_wci_ctrl_pw$whas =
	     appW3_wci_reqF$EMPTY_N && !appW3_wci_reqF$D_OUT[56] &&
	     appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW3_wsiS_reqFifo_r_enq$whas =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign appW3_wsiS_reqFifo_r_deq$whas = CAN_FIRE_RL_appW3_doMessagePush ;
  assign appW3_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign appW3_wsiS_reqFifo_doResetEnq$whas =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign appW3_wsiS_reqFifo_doResetDeq$whas =
	     CAN_FIRE_RL_appW3_doMessagePush ;
  assign appW3_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign appW3_wsiM_reqFifo_enqueueing$whas =
	     CAN_FIRE_RL_appW3_doMessagePush ;
  assign appW3_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq ;
  assign appW3_wsiM_sThreadBusy_pw$whas = appW4$wsiS0_SThreadBusy ;
  assign appW3_wsi_Es_mReqLast_w$whas = appW2$wsiM0_MReqLast ;
  assign appW3_wsi_Es_mBurstPrecise_w$whas = appW2$wsiM0_MBurstPrecise ;
  assign appW3_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign appW3_wsiS_extStatusW$wget =
	     { appW3_wsiS_pMesgCount,
	       appW3_wsiS_iMesgCount,
	       appW3_wsiS_tBusyCount } ;
  assign appW3_wsiM_extStatusW$wget =
	     { appW3_wsiM_pMesgCount,
	       appW3_wsiM_iMesgCount,
	       appW3_wsiM_tBusyCount } ;

  // register appW3_biasValue
  assign appW3_biasValue$D_IN =
	     MUX_appW3_biasValue$write_1__SEL_1 ?
	       appW3_wci_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign appW3_biasValue$EN =
	     WILL_FIRE_RL_appW3_wci_cfwr &&
	     appW3_wci_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_appW3_wci_ctrl_EiI ;

  // register appW3_controlReg
  assign appW3_controlReg$D_IN =
	     MUX_appW3_controlReg$write_1__SEL_1 ?
	       appW3_wci_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign appW3_controlReg$EN =
	     WILL_FIRE_RL_appW3_wci_cfwr &&
	     appW3_wci_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_appW3_wci_ctrl_EiI ;

  // register appW3_wci_cEdge
  assign appW3_wci_cEdge$D_IN = appW3_wci_reqF$D_OUT[36:34] ;
  assign appW3_wci_cEdge$EN = WILL_FIRE_RL_appW3_wci_ctl_op_start ;

  // register appW3_wci_cState
  assign appW3_wci_cState$D_IN = appW3_wci_nState ;
  assign appW3_wci_cState$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete &&
	     !appW3_wci_illegalEdge ;

  // register appW3_wci_ctlAckReg
  assign appW3_wci_ctlAckReg$D_IN = appW3_wci_ctlAckReg_1$whas ;
  assign appW3_wci_ctlAckReg$EN = 1'd1 ;

  // register appW3_wci_ctlOpActive
  assign appW3_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;
  assign appW3_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW3_wci_ctl_op_start ;

  // register appW3_wci_illegalEdge
  assign appW3_wci_illegalEdge$D_IN =
	     !MUX_appW3_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_appW3_wci_illegalEdge$write_1__VAL_2 ;
  assign appW3_wci_illegalEdge$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete &&
	     appW3_wci_illegalEdge ||
	     MUX_appW3_wci_illegalEdge$write_1__SEL_2 ;

  // register appW3_wci_nState
  always@(appW3_wci_reqF$D_OUT)
  begin
    case (appW3_wci_reqF$D_OUT[36:34])
      3'd0: appW3_wci_nState$D_IN = 3'd1;
      3'd1: appW3_wci_nState$D_IN = 3'd2;
      3'd2: appW3_wci_nState$D_IN = 3'd3;
      default: appW3_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign appW3_wci_nState$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     (appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW3_wci_cState == 3'd0 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (appW3_wci_cState == 3'd1 || appW3_wci_cState == 3'd3) ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW3_wci_cState == 3'd2 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (appW3_wci_cState == 3'd3 || appW3_wci_cState == 3'd2 ||
	       appW3_wci_cState == 3'd1)) ;

  // register appW3_wci_reqF_countReg
  assign appW3_wci_reqF_countReg$D_IN =
	     (appW3_wci_wciReq$wget[59:57] != 3'd0) ?
	       appW3_wci_reqF_countReg + 2'd1 :
	       appW3_wci_reqF_countReg - 2'd1 ;
  assign appW3_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter ;

  // register appW3_wci_respF_c_r
  assign appW3_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr ?
	       MUX_appW3_wci_respF_c_r$write_1__VAL_1 :
	       MUX_appW3_wci_respF_c_r$write_1__VAL_2 ;
  assign appW3_wci_respF_c_r$EN =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr ||
	     WILL_FIRE_RL_appW3_wci_respF_decCtr ;

  // register appW3_wci_respF_q_0
  always@(WILL_FIRE_RL_appW3_wci_respF_both or
	  MUX_appW3_wci_respF_q_0$write_1__VAL_1 or
	  MUX_appW3_wci_respF_q_0$write_1__SEL_2 or
	  MUX_appW3_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wci_respF_decCtr or appW3_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW3_wci_respF_both:
	  appW3_wci_respF_q_0$D_IN = MUX_appW3_wci_respF_q_0$write_1__VAL_1;
      MUX_appW3_wci_respF_q_0$write_1__SEL_2:
	  appW3_wci_respF_q_0$D_IN = MUX_appW3_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wci_respF_decCtr:
	  appW3_wci_respF_q_0$D_IN = appW3_wci_respF_q_1;
      default: appW3_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wci_respF_q_0$EN =
	     WILL_FIRE_RL_appW3_wci_respF_both ||
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW3_wci_respF_decCtr ;

  // register appW3_wci_respF_q_1
  always@(WILL_FIRE_RL_appW3_wci_respF_both or
	  MUX_appW3_wci_respF_q_1$write_1__VAL_1 or
	  MUX_appW3_wci_respF_q_1$write_1__SEL_2 or
	  MUX_appW3_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW3_wci_respF_both:
	  appW3_wci_respF_q_1$D_IN = MUX_appW3_wci_respF_q_1$write_1__VAL_1;
      MUX_appW3_wci_respF_q_1$write_1__SEL_2:
	  appW3_wci_respF_q_1$D_IN = MUX_appW3_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wci_respF_decCtr:
	  appW3_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: appW3_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wci_respF_q_1$EN =
	     WILL_FIRE_RL_appW3_wci_respF_both ||
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW3_wci_respF_decCtr ;

  // register appW3_wci_sFlagReg
  assign appW3_wci_sFlagReg$D_IN = 1'b0 ;
  assign appW3_wci_sFlagReg$EN = 1'd1 ;

  // register appW3_wci_sThreadBusy_d
  assign appW3_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign appW3_wci_sThreadBusy_d$EN = 1'd1 ;

  // register appW3_wsiM_burstKind
  assign appW3_wsiM_burstKind$D_IN =
	     (appW3_wsiM_burstKind == 2'd0) ?
	       (appW3_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW3_wsiM_burstKind$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (appW3_wsiM_burstKind == 2'd0 ||
	      (appW3_wsiM_burstKind == 2'd1 ||
	       appW3_wsiM_burstKind == 2'd2) &&
	      appW3_wsiM_reqFifo_q_0[57]) ;

  // register appW3_wsiM_errorSticky
  assign appW3_wsiM_errorSticky$D_IN = 1'b0 ;
  assign appW3_wsiM_errorSticky$EN = 1'b0 ;

  // register appW3_wsiM_iMesgCount
  assign appW3_wsiM_iMesgCount$D_IN = appW3_wsiM_iMesgCount + 32'd1 ;
  assign appW3_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW3_wsiM_burstKind == 2'd2 &&
	     appW3_wsiM_reqFifo_q_0[57] ;

  // register appW3_wsiM_operateD
  assign appW3_wsiM_operateD$D_IN = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiM_operateD$EN = 1'd1 ;

  // register appW3_wsiM_pMesgCount
  assign appW3_wsiM_pMesgCount$D_IN = appW3_wsiM_pMesgCount + 32'd1 ;
  assign appW3_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW3_wsiM_burstKind == 2'd1 &&
	     appW3_wsiM_reqFifo_q_0[57] ;

  // register appW3_wsiM_peerIsReady
  assign appW3_wsiM_peerIsReady$D_IN = appW4$wsiS0_SReset_n ;
  assign appW3_wsiM_peerIsReady$EN = 1'd1 ;

  // register appW3_wsiM_reqFifo_c_r
  assign appW3_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr ?
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign appW3_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // register appW3_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_appW3_wsiM_reqFifo_both or
	  MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr or appW3_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW3_wsiM_reqFifo_both:
	  appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_2:
	  appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr:
	  appW3_wsiM_reqFifo_q_0$D_IN = appW3_wsiM_reqFifo_q_1;
      default: appW3_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // register appW3_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_appW3_wsiM_reqFifo_both or
	  MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW3_wsiM_reqFifo_both:
	  appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_2:
	  appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr:
	  appW3_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: appW3_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // register appW3_wsiM_sThreadBusy_d
  assign appW3_wsiM_sThreadBusy_d$D_IN = appW4$wsiS0_SThreadBusy ;
  assign appW3_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register appW3_wsiM_statusR
  assign appW3_wsiM_statusR$D_IN =
	     { appW3_wsiM_isReset$VAL,
	       !appW3_wsiM_peerIsReady,
	       !appW3_wsiM_operateD,
	       appW3_wsiM_errorSticky,
	       appW3_wsiM_burstKind != 2'd0,
	       appW3_wsiM_sThreadBusy_d,
	       1'd0,
	       appW3_wsiM_trafficSticky } ;
  assign appW3_wsiM_statusR$EN = 1'd1 ;

  // register appW3_wsiM_tBusyCount
  assign appW3_wsiM_tBusyCount$D_IN = appW3_wsiM_tBusyCount + 32'd1 ;
  assign appW3_wsiM_tBusyCount$EN = CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount ;

  // register appW3_wsiM_trafficSticky
  assign appW3_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign appW3_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register appW3_wsiS_burstKind
  assign appW3_wsiS_burstKind$D_IN =
	     (appW3_wsiS_burstKind == 2'd0) ?
	       (appW3_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW3_wsiS_burstKind$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo_notFull__69_AND_appW3_wsiS__ETC___d191 ;

  // register appW3_wsiS_errorSticky
  assign appW3_wsiS_errorSticky$D_IN = 1'd1 ;
  assign appW3_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     !appW3_wsiS_reqFifo$FULL_N ;

  // register appW3_wsiS_iMesgCount
  assign appW3_wsiS_iMesgCount$D_IN = appW3_wsiS_iMesgCount + 32'd1 ;
  assign appW3_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N &&
	     appW3_wsiS_burstKind == 2'd2 &&
	     appW3_wsiS_wsiReq$wget[57] ;

  // register appW3_wsiS_mesgWordLength
  assign appW3_wsiS_mesgWordLength$D_IN = appW3_wsiS_wordCount ;
  assign appW3_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N &&
	     appW3_wsiS_wsiReq$wget[57] ;

  // register appW3_wsiS_operateD
  assign appW3_wsiS_operateD$D_IN = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiS_operateD$EN = 1'd1 ;

  // register appW3_wsiS_pMesgCount
  assign appW3_wsiS_pMesgCount$D_IN = appW3_wsiS_pMesgCount + 32'd1 ;
  assign appW3_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N &&
	     appW3_wsiS_burstKind == 2'd1 &&
	     appW3_wsiS_wsiReq$wget[57] ;

  // register appW3_wsiS_peerIsReady
  assign appW3_wsiS_peerIsReady$D_IN = appW2$wsiM0_MReset_n ;
  assign appW3_wsiS_peerIsReady$EN = 1'd1 ;

  // register appW3_wsiS_reqFifo_countReg
  assign appW3_wsiS_reqFifo_countReg$D_IN =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       appW3_wsiS_reqFifo_countReg + 2'd1 :
	       appW3_wsiS_reqFifo_countReg - 2'd1 ;
  assign appW3_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter ;

  // register appW3_wsiS_reqFifo_levelsValid
  assign appW3_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_reset ;
  assign appW3_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_appW3_doMessagePush ||
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_reset ;

  // register appW3_wsiS_statusR
  assign appW3_wsiS_statusR$D_IN =
	     { appW3_wsiS_isReset$VAL,
	       !appW3_wsiS_peerIsReady,
	       !appW3_wsiS_operateD,
	       appW3_wsiS_errorSticky,
	       appW3_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_appW3_wsiS_backpressure ||
	       appW3_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       appW3_wsiS_trafficSticky } ;
  assign appW3_wsiS_statusR$EN = 1'd1 ;

  // register appW3_wsiS_tBusyCount
  assign appW3_wsiS_tBusyCount$D_IN = appW3_wsiS_tBusyCount + 32'd1 ;
  assign appW3_wsiS_tBusyCount$EN = CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount ;

  // register appW3_wsiS_trafficSticky
  assign appW3_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign appW3_wsiS_trafficSticky$EN =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register appW3_wsiS_wordCount
  assign appW3_wsiS_wordCount$D_IN =
	     appW3_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       appW3_wsiS_wordCount + 12'd1 ;
  assign appW3_wsiS_wordCount$EN =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // submodule appW2
  assign appW2$wciS0_MAddr = wci_s_2_MAddr ;
  assign appW2$wciS0_MAddrSpace = wci_s_2_MAddrSpace ;
  assign appW2$wciS0_MByteEn = wci_s_2_MByteEn ;
  assign appW2$wciS0_MCmd = wci_s_2_MCmd ;
  assign appW2$wciS0_MData = wci_s_2_MData ;
  assign appW2$wciS0_MFlag = wci_s_2_MFlag ;
  assign appW2$wmiM_SData = wmiM0_SData ;
  assign appW2$wmiM_SFlag = wmiM0_SFlag ;
  assign appW2$wmiM_SResp = wmiM0_SResp ;
  assign appW2$wsiS0_MBurstLength = wsi_s_adc_MBurstLength ;
  assign appW2$wsiS0_MByteEn = wsi_s_adc_MByteEn ;
  assign appW2$wsiS0_MCmd = wsi_s_adc_MCmd ;
  assign appW2$wsiS0_MData = wsi_s_adc_MData ;
  assign appW2$wsiS0_MReqInfo = wsi_s_adc_MReqInfo ;
  assign appW2$wmiM_SThreadBusy = wmiM0_SThreadBusy ;
  assign appW2$wmiM_SDataThreadBusy = wmiM0_SDataThreadBusy ;
  assign appW2$wmiM_SRespLast = wmiM0_SRespLast ;
  assign appW2$wmiM_SReset_n = wmiM0_SReset_n ;
  assign appW2$wsiM0_SThreadBusy = CAN_FIRE_RL_stbConnect ;
  assign appW2$wsiM0_SReset_n = CAN_FIRE_RL_sRstConnect ;
  assign appW2$wsiS0_MReqLast = wsi_s_adc_MReqLast ;
  assign appW2$wsiS0_MBurstPrecise = wsi_s_adc_MBurstPrecise ;
  assign appW2$wsiS0_MReset_n = wsi_s_adc_MReset_n ;

  // submodule appW3_wci_reqF
  assign appW3_wci_reqF$D_IN = appW3_wci_wciReq$wget ;
  assign appW3_wci_reqF$ENQ = CAN_FIRE_RL_appW3_wci_reqF_enq ;
  assign appW3_wci_reqF$DEQ = appW3_wci_reqF_r_deq$whas ;
  assign appW3_wci_reqF$CLR = 1'b0 ;

  // submodule appW3_wsiS_reqFifo
  assign appW3_wsiS_reqFifo$D_IN = appW3_wsiS_wsiReq$wget ;
  assign appW3_wsiS_reqFifo$ENQ =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign appW3_wsiS_reqFifo$DEQ = CAN_FIRE_RL_appW3_doMessagePush ;
  assign appW3_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule appW4
  assign appW4$wciS0_MAddr = wci_s_4_MAddr ;
  assign appW4$wciS0_MAddrSpace = wci_s_4_MAddrSpace ;
  assign appW4$wciS0_MByteEn = wci_s_4_MByteEn ;
  assign appW4$wciS0_MCmd = wci_s_4_MCmd ;
  assign appW4$wciS0_MData = wci_s_4_MData ;
  assign appW4$wciS0_MFlag = wci_s_4_MFlag ;
  assign appW4$wmiM_SData = wmiM1_SData ;
  assign appW4$wmiM_SFlag = wmiM1_SFlag ;
  assign appW4$wmiM_SResp = wmiM1_SResp ;
  assign appW4$wsiS0_MBurstLength =
	     appW3_wsiM_sThreadBusy_d ?
	       12'd0 :
	       appW3_wsiM_reqFifo_q_0[55:44] ;
  assign appW4$wsiS0_MByteEn = appW3_wsiM_reqFifo_q_0[11:8] ;
  assign appW4$wsiS0_MCmd =
	     appW3_wsiM_sThreadBusy_d ? 3'd0 : appW3_wsiM_reqFifo_q_0[60:58] ;
  assign appW4$wsiS0_MData = appW3_wsiM_reqFifo_q_0[43:12] ;
  assign appW4$wsiS0_MReqInfo =
	     appW3_wsiM_sThreadBusy_d ? 8'd0 : appW3_wsiM_reqFifo_q_0[7:0] ;
  assign appW4$wmiM_SThreadBusy = wmiM1_SThreadBusy ;
  assign appW4$wmiM_SDataThreadBusy = wmiM1_SDataThreadBusy ;
  assign appW4$wmiM_SRespLast = wmiM1_SRespLast ;
  assign appW4$wmiM_SReset_n = wmiM1_SReset_n ;
  assign appW4$wsiM0_SThreadBusy = wsi_m_dac_SThreadBusy ;
  assign appW4$wsiM0_SReset_n = wsi_m_dac_SReset_n ;
  assign appW4$wsiS0_MReqLast = CAN_FIRE_RL_mReqLConnect_1 ;
  assign appW4$wsiS0_MBurstPrecise = CAN_FIRE_RL_mBurstPConnect_1 ;
  assign appW4$wsiS0_MReset_n = CAN_FIRE_RL_mRstConnect_1 ;

  // remaining internal signals
  assign appW3_wsiS_reqFifo_notFull__69_AND_appW3_wsiS__ETC___d191 =
	     appW3_wsiS_reqFifo$FULL_N &&
	     (appW3_wsiS_burstKind == 2'd0 ||
	      (appW3_wsiS_burstKind == 2'd1 ||
	       appW3_wsiS_burstKind == 2'd2) &&
	      appW3_wsiS_wsiReq$wget[57]) ;
  assign rdat__h10628 = hasDebugLogic ? { 16'd0, x__h10632 } : 32'd0 ;
  assign rdat__h10728 =
	     hasDebugLogic ? appW3_wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h10742 =
	     hasDebugLogic ? appW3_wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h10750 =
	     hasDebugLogic ? appW3_wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h10756 =
	     hasDebugLogic ? appW3_wsiM_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h10770 =
	     hasDebugLogic ? appW3_wsiM_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h10778 =
	     hasDebugLogic ? appW3_wsiM_extStatusW$wget[31:0] : 32'd0 ;
  assign x__h10632 = { appW3_wsiS_statusR, appW3_wsiM_statusR } ;
  assign x_data__h10127 = appW3_wsiS_reqFifo$D_OUT[43:12] + appW3_biasValue ;
  always@(appW3_wci_reqF$D_OUT or
	  appW3_biasValue or
	  appW3_controlReg or
	  rdat__h10628 or
	  rdat__h10728 or
	  rdat__h10742 or
	  rdat__h10750 or rdat__h10756 or rdat__h10770 or rdat__h10778)
  begin
    case (appW3_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h10538 = appW3_biasValue;
      8'h04: _theResult____h10538 = appW3_controlReg;
      8'h20: _theResult____h10538 = rdat__h10628;
      8'h24: _theResult____h10538 = rdat__h10728;
      8'h28: _theResult____h10538 = rdat__h10742;
      8'h2C: _theResult____h10538 = rdat__h10750;
      8'h30: _theResult____h10538 = rdat__h10756;
      8'h34: _theResult____h10538 = rdat__h10770;
      8'h38: _theResult____h10538 = rdat__h10778;
      default: _theResult____h10538 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N_rst_3)
      begin
        appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (appW3_wci_cEdge$EN)
	  appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY appW3_wci_cEdge$D_IN;
	if (appW3_wci_cState$EN)
	  appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY appW3_wci_cState$D_IN;
	if (appW3_wci_ctlAckReg$EN)
	  appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_ctlAckReg$D_IN;
	if (appW3_wci_ctlOpActive$EN)
	  appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_ctlOpActive$D_IN;
	if (appW3_wci_illegalEdge$EN)
	  appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_illegalEdge$D_IN;
	if (appW3_wci_nState$EN)
	  appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY appW3_wci_nState$D_IN;
	if (appW3_wci_reqF_countReg$EN)
	  appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_reqF_countReg$D_IN;
	if (appW3_wci_respF_c_r$EN)
	  appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_respF_c_r$D_IN;
	if (appW3_wci_respF_q_0$EN)
	  appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_respF_q_0$D_IN;
	if (appW3_wci_respF_q_1$EN)
	  appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_respF_q_1$D_IN;
	if (appW3_wci_sFlagReg$EN)
	  appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY appW3_wci_sFlagReg$D_IN;
	if (appW3_wci_sThreadBusy_d$EN)
	  appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_sThreadBusy_d$D_IN;
	if (appW3_wsiM_burstKind$EN)
	  appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_burstKind$D_IN;
	if (appW3_wsiM_errorSticky$EN)
	  appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_errorSticky$D_IN;
	if (appW3_wsiM_iMesgCount$EN)
	  appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_iMesgCount$D_IN;
	if (appW3_wsiM_operateD$EN)
	  appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_operateD$D_IN;
	if (appW3_wsiM_pMesgCount$EN)
	  appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_pMesgCount$D_IN;
	if (appW3_wsiM_peerIsReady$EN)
	  appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_peerIsReady$D_IN;
	if (appW3_wsiM_reqFifo_c_r$EN)
	  appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_reqFifo_c_r$D_IN;
	if (appW3_wsiM_reqFifo_q_0$EN)
	  appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_reqFifo_q_0$D_IN;
	if (appW3_wsiM_reqFifo_q_1$EN)
	  appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_reqFifo_q_1$D_IN;
	if (appW3_wsiM_sThreadBusy_d$EN)
	  appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_sThreadBusy_d$D_IN;
	if (appW3_wsiM_tBusyCount$EN)
	  appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_tBusyCount$D_IN;
	if (appW3_wsiM_trafficSticky$EN)
	  appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_trafficSticky$D_IN;
	if (appW3_wsiS_burstKind$EN)
	  appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_burstKind$D_IN;
	if (appW3_wsiS_errorSticky$EN)
	  appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_errorSticky$D_IN;
	if (appW3_wsiS_iMesgCount$EN)
	  appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_iMesgCount$D_IN;
	if (appW3_wsiS_operateD$EN)
	  appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_operateD$D_IN;
	if (appW3_wsiS_pMesgCount$EN)
	  appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_pMesgCount$D_IN;
	if (appW3_wsiS_peerIsReady$EN)
	  appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_peerIsReady$D_IN;
	if (appW3_wsiS_reqFifo_countReg$EN)
	  appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_reqFifo_countReg$D_IN;
	if (appW3_wsiS_reqFifo_levelsValid$EN)
	  appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_reqFifo_levelsValid$D_IN;
	if (appW3_wsiS_tBusyCount$EN)
	  appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_tBusyCount$D_IN;
	if (appW3_wsiS_trafficSticky$EN)
	  appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_trafficSticky$D_IN;
	if (appW3_wsiS_wordCount$EN)
	  appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_wordCount$D_IN;
      end
    if (appW3_biasValue$EN)
      appW3_biasValue <= `BSV_ASSIGNMENT_DELAY appW3_biasValue$D_IN;
    if (appW3_controlReg$EN)
      appW3_controlReg <= `BSV_ASSIGNMENT_DELAY appW3_controlReg$D_IN;
    if (appW3_wsiM_statusR$EN)
      appW3_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY appW3_wsiM_statusR$D_IN;
    if (appW3_wsiS_mesgWordLength$EN)
      appW3_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  appW3_wsiS_mesgWordLength$D_IN;
    if (appW3_wsiS_statusR$EN)
      appW3_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY appW3_wsiS_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    appW3_biasValue = 32'hAAAAAAAA;
    appW3_controlReg = 32'hAAAAAAAA;
    appW3_wci_cEdge = 3'h2;
    appW3_wci_cState = 3'h2;
    appW3_wci_ctlAckReg = 1'h0;
    appW3_wci_ctlOpActive = 1'h0;
    appW3_wci_illegalEdge = 1'h0;
    appW3_wci_nState = 3'h2;
    appW3_wci_reqF_countReg = 2'h2;
    appW3_wci_respF_c_r = 2'h2;
    appW3_wci_respF_q_0 = 34'h2AAAAAAAA;
    appW3_wci_respF_q_1 = 34'h2AAAAAAAA;
    appW3_wci_sFlagReg = 1'h0;
    appW3_wci_sThreadBusy_d = 1'h0;
    appW3_wsiM_burstKind = 2'h2;
    appW3_wsiM_errorSticky = 1'h0;
    appW3_wsiM_iMesgCount = 32'hAAAAAAAA;
    appW3_wsiM_operateD = 1'h0;
    appW3_wsiM_pMesgCount = 32'hAAAAAAAA;
    appW3_wsiM_peerIsReady = 1'h0;
    appW3_wsiM_reqFifo_c_r = 2'h2;
    appW3_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    appW3_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    appW3_wsiM_sThreadBusy_d = 1'h0;
    appW3_wsiM_statusR = 8'hAA;
    appW3_wsiM_tBusyCount = 32'hAAAAAAAA;
    appW3_wsiM_trafficSticky = 1'h0;
    appW3_wsiS_burstKind = 2'h2;
    appW3_wsiS_errorSticky = 1'h0;
    appW3_wsiS_iMesgCount = 32'hAAAAAAAA;
    appW3_wsiS_mesgWordLength = 12'hAAA;
    appW3_wsiS_operateD = 1'h0;
    appW3_wsiS_pMesgCount = 32'hAAAAAAAA;
    appW3_wsiS_peerIsReady = 1'h0;
    appW3_wsiS_reqFifo_countReg = 2'h2;
    appW3_wsiS_reqFifo_levelsValid = 1'h0;
    appW3_wsiS_statusR = 8'hAA;
    appW3_wsiS_tBusyCount = 32'hAAAAAAAA;
    appW3_wsiS_trafficSticky = 1'h0;
    appW3_wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_start)
	begin
	  v__h4181 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h4181,
		 appW3_wci_reqF$D_OUT[36:34],
		 appW3_wci_cState);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_IsO && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/BiasWorker.bsv\", line 83, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_ctrl_IsO and RL_appW3_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_OrE && WILL_FIRE_RL_appW3_wci_ctrl_IsO)
	$display("Error: \"bsv/BiasWorker.bsv\", line 84, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_ctrl_OrE and RL_appW3_wci_ctrl_IsO\n  fired in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_OrE && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/BiasWorker.bsv\", line 84, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_ctrl_OrE and RL_appW3_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfrd)
	begin
	  v__h10554 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h10554,
		 appW3_wci_reqF$D_OUT[51:32],
		 appW3_wci_reqF$D_OUT[55:52],
		 _theResult____h10538);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfrd && WILL_FIRE_RL_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/BiasWorker.bsv\", line 58, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfrd and RL_appW3_wci_ctrl_OrE fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfrd && WILL_FIRE_RL_appW3_wci_ctrl_IsO)
	$display("Error: \"bsv/BiasWorker.bsv\", line 58, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfrd and RL_appW3_wci_ctrl_IsO fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfrd && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/BiasWorker.bsv\", line 58, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfrd and RL_appW3_wci_ctrl_EiI fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr)
	begin
	  v__h10393 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h10393,
		 appW3_wci_reqF$D_OUT[51:32],
		 appW3_wci_reqF$D_OUT[55:52],
		 appW3_wci_reqF$D_OUT[31:0]);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_ctrl_OrE fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_ctrl_IsO)
	$display("Error: \"bsv/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_ctrl_IsO fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_ctrl_EiI fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_cfrd)
	$display("Error: \"bsv/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_cfrd fired in\n  the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && appW3_wci_illegalEdge)
	begin
	  v__h4521 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h4521,
		 appW3_wci_cEdge,
		 appW3_wci_cState);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && !appW3_wci_illegalEdge)
	begin
	  v__h4366 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && !appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h4366,
		 appW3_wci_cEdge,
		 appW3_wci_cState,
		 appW3_wci_nState);
  end
  // synopsys translate_on
endmodule  // mkOCApp

