//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Mar 16 12:54:41 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// wci_s_0_SResp                  O     2 const
// wci_s_0_SData                  O    32 const
// wci_s_0_SThreadBusy            O     1 const
// wci_s_0_SFlag                  O     2 const
// wci_s_1_SResp                  O     2 reg
// wci_s_1_SData                  O    32 reg
// wci_s_1_SThreadBusy            O     1
// wci_s_1_SFlag                  O     2
// wci_s_2_SResp                  O     2 reg
// wci_s_2_SData                  O    32 reg
// wci_s_2_SThreadBusy            O     1
// wci_s_2_SFlag                  O     2
// wci_s_3_SResp                  O     2 reg
// wci_s_3_SData                  O    32 reg
// wci_s_3_SThreadBusy            O     1
// wci_s_3_SFlag                  O     2
// wci_s_4_SResp                  O     2 reg
// wci_s_4_SData                  O    32 reg
// wci_s_4_SThreadBusy            O     1
// wci_s_4_SFlag                  O     2
// wci_s_5_SResp                  O     2 reg
// wci_s_5_SData                  O    32 reg
// wci_s_5_SThreadBusy            O     1
// wci_s_5_SFlag                  O     2
// wci_s_6_SResp                  O     2 reg
// wci_s_6_SData                  O    32 reg
// wci_s_6_SThreadBusy            O     1
// wci_s_6_SFlag                  O     2
// wci_s_7_SResp                  O     2 reg
// wci_s_7_SData                  O    32 reg
// wci_s_7_SThreadBusy            O     1
// wci_s_7_SFlag                  O     2
// wti_s_0_SThreadBusy            O     1 reg
// wti_s_0_SReset_n               O     1
// wti_s_1_SThreadBusy            O     1 reg
// wti_s_1_SReset_n               O     1
// wti_s_2_SThreadBusy            O     1 reg
// wti_s_2_SReset_n               O     1
// wmiM0_MCmd                     O     3
// wmiM0_MReqLast                 O     1
// wmiM0_MReqInfo                 O     1
// wmiM0_MAddrSpace               O     1
// wmiM0_MAddr                    O    14
// wmiM0_MBurstLength             O    12
// wmiM0_MDataValid               O     1
// wmiM0_MDataLast                O     1
// wmiM0_MData                    O    32
// wmiM0_MDataByteEn              O     4
// wmiM0_MFlag                    O    32
// wmiM0_MReset_n                 O     1
// wmiM1_MCmd                     O     3
// wmiM1_MReqLast                 O     1
// wmiM1_MReqInfo                 O     1
// wmiM1_MAddrSpace               O     1
// wmiM1_MAddr                    O    14
// wmiM1_MBurstLength             O    12
// wmiM1_MDataValid               O     1
// wmiM1_MDataLast                O     1
// wmiM1_MData                    O    32
// wmiM1_MDataByteEn              O     4
// wmiM1_MFlag                    O    32
// wmiM1_MReset_n                 O     1
// wmemiM0_MCmd                   O     3 reg
// wmemiM0_MReqLast               O     1 reg
// wmemiM0_MAddr                  O    36 reg
// wmemiM0_MBurstLength           O    12 reg
// wmemiM0_MDataValid             O     1 reg
// wmemiM0_MDataLast              O     1 reg
// wmemiM0_MData                  O   128 reg
// wmemiM0_MDataByteEn            O    16 reg
// wmemiM0_MReset_n               O     1
// wsi_s_adc_SThreadBusy          O     1
// wsi_s_adc_SReset_n             O     1
// wsi_m_dac_MCmd                 O     3
// wsi_m_dac_MReqLast             O     1
// wsi_m_dac_MBurstPrecise        O     1
// wsi_m_dac_MBurstLength         O    12
// wsi_m_dac_MData                O    32 reg
// wsi_m_dac_MByteEn              O     4 reg
// wsi_m_dac_MReqInfo             O     8
// wsi_m_dac_MReset_n             O     1
// uuid                           O   512 const
// RST_N_rst_0                    I     1 unused
// RST_N_rst_1                    I     1 reset
// RST_N_rst_2                    I     1 reset
// RST_N_rst_3                    I     1 reset
// RST_N_rst_4                    I     1 reset
// RST_N_rst_5                    I     1 reset
// RST_N_rst_6                    I     1 reset
// RST_N_rst_7                    I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wci_s_0_MCmd                   I     3 unused
// wci_s_0_MAddrSpace             I     1 unused
// wci_s_0_MByteEn                I     4 unused
// wci_s_0_MAddr                  I    32 unused
// wci_s_0_MData                  I    32 unused
// wci_s_0_MFlag                  I     2 unused
// wci_s_1_MCmd                   I     3
// wci_s_1_MAddrSpace             I     1
// wci_s_1_MByteEn                I     4
// wci_s_1_MAddr                  I    32
// wci_s_1_MData                  I    32
// wci_s_1_MFlag                  I     2 unused
// wci_s_2_MCmd                   I     3
// wci_s_2_MAddrSpace             I     1
// wci_s_2_MByteEn                I     4
// wci_s_2_MAddr                  I    32
// wci_s_2_MData                  I    32
// wci_s_2_MFlag                  I     2 unused
// wci_s_3_MCmd                   I     3
// wci_s_3_MAddrSpace             I     1
// wci_s_3_MByteEn                I     4
// wci_s_3_MAddr                  I    32
// wci_s_3_MData                  I    32
// wci_s_3_MFlag                  I     2 unused
// wci_s_4_MCmd                   I     3
// wci_s_4_MAddrSpace             I     1
// wci_s_4_MByteEn                I     4
// wci_s_4_MAddr                  I    32
// wci_s_4_MData                  I    32
// wci_s_4_MFlag                  I     2 unused
// wci_s_5_MCmd                   I     3
// wci_s_5_MAddrSpace             I     1
// wci_s_5_MByteEn                I     4
// wci_s_5_MAddr                  I    32
// wci_s_5_MData                  I    32
// wci_s_5_MFlag                  I     2 unused
// wci_s_6_MCmd                   I     3
// wci_s_6_MAddrSpace             I     1
// wci_s_6_MByteEn                I     4
// wci_s_6_MAddr                  I    32
// wci_s_6_MData                  I    32
// wci_s_6_MFlag                  I     2 unused
// wci_s_7_MCmd                   I     3
// wci_s_7_MAddrSpace             I     1
// wci_s_7_MByteEn                I     4
// wci_s_7_MAddr                  I    32
// wci_s_7_MData                  I    32
// wci_s_7_MFlag                  I     2 unused
// wti_s_0_MCmd                   I     3 reg
// wti_s_0_MData                  I    64 reg
// wti_s_1_MCmd                   I     3 reg
// wti_s_1_MData                  I    64 reg
// wti_s_2_MCmd                   I     3 reg
// wti_s_2_MData                  I    64 reg
// wmiM0_SResp                    I     2
// wmiM0_SData                    I    32
// wmiM0_SFlag                    I    32 reg
// wmiM1_SResp                    I     2
// wmiM1_SData                    I    32
// wmiM1_SFlag                    I    32 reg
// wmemiM0_SResp                  I     2
// wmemiM0_SData                  I   128
// wsi_s_adc_MCmd                 I     3
// wsi_s_adc_MBurstLength         I    12
// wsi_s_adc_MData                I    32
// wsi_s_adc_MByteEn              I     4
// wsi_s_adc_MReqInfo             I     8
// wmiM0_SThreadBusy              I     1 reg
// wmiM0_SDataThreadBusy          I     1 reg
// wmiM0_SRespLast                I     1 unused
// wmiM0_SReset_n                 I     1 reg
// wmiM1_SThreadBusy              I     1 reg
// wmiM1_SDataThreadBusy          I     1 reg
// wmiM1_SRespLast                I     1 unused
// wmiM1_SReset_n                 I     1 reg
// wmemiM0_SRespLast              I     1
// wmemiM0_SCmdAccept             I     1
// wmemiM0_SDataAccept            I     1
// wsi_s_adc_MReqLast             I     1
// wsi_s_adc_MBurstPrecise        I     1
// wsi_s_adc_MReset_n             I     1 reg
// wsi_m_dac_SThreadBusy          I     1 reg
// wsi_m_dac_SReset_n             I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCApp4B(RST_N_rst_0,
		 RST_N_rst_1,
		 RST_N_rst_2,
		 RST_N_rst_3,
		 RST_N_rst_4,
		 RST_N_rst_5,
		 RST_N_rst_6,
		 RST_N_rst_7,
		 CLK,
		 RST_N,

		 wci_s_0_MCmd,

		 wci_s_0_MAddrSpace,

		 wci_s_0_MByteEn,

		 wci_s_0_MAddr,

		 wci_s_0_MData,

		 wci_s_0_SResp,

		 wci_s_0_SData,

		 wci_s_0_SThreadBusy,

		 wci_s_0_SFlag,

		 wci_s_0_MFlag,

		 wci_s_1_MCmd,

		 wci_s_1_MAddrSpace,

		 wci_s_1_MByteEn,

		 wci_s_1_MAddr,

		 wci_s_1_MData,

		 wci_s_1_SResp,

		 wci_s_1_SData,

		 wci_s_1_SThreadBusy,

		 wci_s_1_SFlag,

		 wci_s_1_MFlag,

		 wci_s_2_MCmd,

		 wci_s_2_MAddrSpace,

		 wci_s_2_MByteEn,

		 wci_s_2_MAddr,

		 wci_s_2_MData,

		 wci_s_2_SResp,

		 wci_s_2_SData,

		 wci_s_2_SThreadBusy,

		 wci_s_2_SFlag,

		 wci_s_2_MFlag,

		 wci_s_3_MCmd,

		 wci_s_3_MAddrSpace,

		 wci_s_3_MByteEn,

		 wci_s_3_MAddr,

		 wci_s_3_MData,

		 wci_s_3_SResp,

		 wci_s_3_SData,

		 wci_s_3_SThreadBusy,

		 wci_s_3_SFlag,

		 wci_s_3_MFlag,

		 wci_s_4_MCmd,

		 wci_s_4_MAddrSpace,

		 wci_s_4_MByteEn,

		 wci_s_4_MAddr,

		 wci_s_4_MData,

		 wci_s_4_SResp,

		 wci_s_4_SData,

		 wci_s_4_SThreadBusy,

		 wci_s_4_SFlag,

		 wci_s_4_MFlag,

		 wci_s_5_MCmd,

		 wci_s_5_MAddrSpace,

		 wci_s_5_MByteEn,

		 wci_s_5_MAddr,

		 wci_s_5_MData,

		 wci_s_5_SResp,

		 wci_s_5_SData,

		 wci_s_5_SThreadBusy,

		 wci_s_5_SFlag,

		 wci_s_5_MFlag,

		 wci_s_6_MCmd,

		 wci_s_6_MAddrSpace,

		 wci_s_6_MByteEn,

		 wci_s_6_MAddr,

		 wci_s_6_MData,

		 wci_s_6_SResp,

		 wci_s_6_SData,

		 wci_s_6_SThreadBusy,

		 wci_s_6_SFlag,

		 wci_s_6_MFlag,

		 wci_s_7_MCmd,

		 wci_s_7_MAddrSpace,

		 wci_s_7_MByteEn,

		 wci_s_7_MAddr,

		 wci_s_7_MData,

		 wci_s_7_SResp,

		 wci_s_7_SData,

		 wci_s_7_SThreadBusy,

		 wci_s_7_SFlag,

		 wci_s_7_MFlag,

		 wti_s_0_MCmd,

		 wti_s_0_MData,

		 wti_s_0_SThreadBusy,

		 wti_s_0_SReset_n,

		 wti_s_1_MCmd,

		 wti_s_1_MData,

		 wti_s_1_SThreadBusy,

		 wti_s_1_SReset_n,

		 wti_s_2_MCmd,

		 wti_s_2_MData,

		 wti_s_2_SThreadBusy,

		 wti_s_2_SReset_n,

		 wmiM0_MCmd,

		 wmiM0_MReqLast,

		 wmiM0_MReqInfo,

		 wmiM0_MAddrSpace,

		 wmiM0_MAddr,

		 wmiM0_MBurstLength,

		 wmiM0_MDataValid,

		 wmiM0_MDataLast,

		 wmiM0_MData,

		 wmiM0_MDataByteEn,

		 wmiM0_SResp,

		 wmiM0_SData,

		 wmiM0_SThreadBusy,

		 wmiM0_SDataThreadBusy,

		 wmiM0_SRespLast,

		 wmiM0_SFlag,

		 wmiM0_MFlag,

		 wmiM0_MReset_n,

		 wmiM0_SReset_n,

		 wmiM1_MCmd,

		 wmiM1_MReqLast,

		 wmiM1_MReqInfo,

		 wmiM1_MAddrSpace,

		 wmiM1_MAddr,

		 wmiM1_MBurstLength,

		 wmiM1_MDataValid,

		 wmiM1_MDataLast,

		 wmiM1_MData,

		 wmiM1_MDataByteEn,

		 wmiM1_SResp,

		 wmiM1_SData,

		 wmiM1_SThreadBusy,

		 wmiM1_SDataThreadBusy,

		 wmiM1_SRespLast,

		 wmiM1_SFlag,

		 wmiM1_MFlag,

		 wmiM1_MReset_n,

		 wmiM1_SReset_n,

		 wmemiM0_MCmd,

		 wmemiM0_MReqLast,

		 wmemiM0_MAddr,

		 wmemiM0_MBurstLength,

		 wmemiM0_MDataValid,

		 wmemiM0_MDataLast,

		 wmemiM0_MData,

		 wmemiM0_MDataByteEn,

		 wmemiM0_SResp,

		 wmemiM0_SRespLast,

		 wmemiM0_SData,

		 wmemiM0_SCmdAccept,

		 wmemiM0_SDataAccept,

		 wmemiM0_MReset_n,

		 wsi_s_adc_MCmd,

		 wsi_s_adc_MReqLast,

		 wsi_s_adc_MBurstPrecise,

		 wsi_s_adc_MBurstLength,

		 wsi_s_adc_MData,

		 wsi_s_adc_MByteEn,

		 wsi_s_adc_MReqInfo,

		 wsi_s_adc_SThreadBusy,

		 wsi_s_adc_SReset_n,

		 wsi_s_adc_MReset_n,

		 wsi_m_dac_MCmd,

		 wsi_m_dac_MReqLast,

		 wsi_m_dac_MBurstPrecise,

		 wsi_m_dac_MBurstLength,

		 wsi_m_dac_MData,

		 wsi_m_dac_MByteEn,

		 wsi_m_dac_MReqInfo,

		 wsi_m_dac_SThreadBusy,

		 wsi_m_dac_MReset_n,

		 wsi_m_dac_SReset_n,

		 uuid);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  RST_N_rst_0;
  input  RST_N_rst_1;
  input  RST_N_rst_2;
  input  RST_N_rst_3;
  input  RST_N_rst_4;
  input  RST_N_rst_5;
  input  RST_N_rst_6;
  input  RST_N_rst_7;
  input  CLK;
  input  RST_N;

  // action method wci_s_0_mCmd
  input  [2 : 0] wci_s_0_MCmd;

  // action method wci_s_0_mAddrSpace
  input  wci_s_0_MAddrSpace;

  // action method wci_s_0_mByteEn
  input  [3 : 0] wci_s_0_MByteEn;

  // action method wci_s_0_mAddr
  input  [31 : 0] wci_s_0_MAddr;

  // action method wci_s_0_mData
  input  [31 : 0] wci_s_0_MData;

  // value method wci_s_0_sResp
  output [1 : 0] wci_s_0_SResp;

  // value method wci_s_0_sData
  output [31 : 0] wci_s_0_SData;

  // value method wci_s_0_sThreadBusy
  output wci_s_0_SThreadBusy;

  // value method wci_s_0_sFlag
  output [1 : 0] wci_s_0_SFlag;

  // action method wci_s_0_mFlag
  input  [1 : 0] wci_s_0_MFlag;

  // action method wci_s_1_mCmd
  input  [2 : 0] wci_s_1_MCmd;

  // action method wci_s_1_mAddrSpace
  input  wci_s_1_MAddrSpace;

  // action method wci_s_1_mByteEn
  input  [3 : 0] wci_s_1_MByteEn;

  // action method wci_s_1_mAddr
  input  [31 : 0] wci_s_1_MAddr;

  // action method wci_s_1_mData
  input  [31 : 0] wci_s_1_MData;

  // value method wci_s_1_sResp
  output [1 : 0] wci_s_1_SResp;

  // value method wci_s_1_sData
  output [31 : 0] wci_s_1_SData;

  // value method wci_s_1_sThreadBusy
  output wci_s_1_SThreadBusy;

  // value method wci_s_1_sFlag
  output [1 : 0] wci_s_1_SFlag;

  // action method wci_s_1_mFlag
  input  [1 : 0] wci_s_1_MFlag;

  // action method wci_s_2_mCmd
  input  [2 : 0] wci_s_2_MCmd;

  // action method wci_s_2_mAddrSpace
  input  wci_s_2_MAddrSpace;

  // action method wci_s_2_mByteEn
  input  [3 : 0] wci_s_2_MByteEn;

  // action method wci_s_2_mAddr
  input  [31 : 0] wci_s_2_MAddr;

  // action method wci_s_2_mData
  input  [31 : 0] wci_s_2_MData;

  // value method wci_s_2_sResp
  output [1 : 0] wci_s_2_SResp;

  // value method wci_s_2_sData
  output [31 : 0] wci_s_2_SData;

  // value method wci_s_2_sThreadBusy
  output wci_s_2_SThreadBusy;

  // value method wci_s_2_sFlag
  output [1 : 0] wci_s_2_SFlag;

  // action method wci_s_2_mFlag
  input  [1 : 0] wci_s_2_MFlag;

  // action method wci_s_3_mCmd
  input  [2 : 0] wci_s_3_MCmd;

  // action method wci_s_3_mAddrSpace
  input  wci_s_3_MAddrSpace;

  // action method wci_s_3_mByteEn
  input  [3 : 0] wci_s_3_MByteEn;

  // action method wci_s_3_mAddr
  input  [31 : 0] wci_s_3_MAddr;

  // action method wci_s_3_mData
  input  [31 : 0] wci_s_3_MData;

  // value method wci_s_3_sResp
  output [1 : 0] wci_s_3_SResp;

  // value method wci_s_3_sData
  output [31 : 0] wci_s_3_SData;

  // value method wci_s_3_sThreadBusy
  output wci_s_3_SThreadBusy;

  // value method wci_s_3_sFlag
  output [1 : 0] wci_s_3_SFlag;

  // action method wci_s_3_mFlag
  input  [1 : 0] wci_s_3_MFlag;

  // action method wci_s_4_mCmd
  input  [2 : 0] wci_s_4_MCmd;

  // action method wci_s_4_mAddrSpace
  input  wci_s_4_MAddrSpace;

  // action method wci_s_4_mByteEn
  input  [3 : 0] wci_s_4_MByteEn;

  // action method wci_s_4_mAddr
  input  [31 : 0] wci_s_4_MAddr;

  // action method wci_s_4_mData
  input  [31 : 0] wci_s_4_MData;

  // value method wci_s_4_sResp
  output [1 : 0] wci_s_4_SResp;

  // value method wci_s_4_sData
  output [31 : 0] wci_s_4_SData;

  // value method wci_s_4_sThreadBusy
  output wci_s_4_SThreadBusy;

  // value method wci_s_4_sFlag
  output [1 : 0] wci_s_4_SFlag;

  // action method wci_s_4_mFlag
  input  [1 : 0] wci_s_4_MFlag;

  // action method wci_s_5_mCmd
  input  [2 : 0] wci_s_5_MCmd;

  // action method wci_s_5_mAddrSpace
  input  wci_s_5_MAddrSpace;

  // action method wci_s_5_mByteEn
  input  [3 : 0] wci_s_5_MByteEn;

  // action method wci_s_5_mAddr
  input  [31 : 0] wci_s_5_MAddr;

  // action method wci_s_5_mData
  input  [31 : 0] wci_s_5_MData;

  // value method wci_s_5_sResp
  output [1 : 0] wci_s_5_SResp;

  // value method wci_s_5_sData
  output [31 : 0] wci_s_5_SData;

  // value method wci_s_5_sThreadBusy
  output wci_s_5_SThreadBusy;

  // value method wci_s_5_sFlag
  output [1 : 0] wci_s_5_SFlag;

  // action method wci_s_5_mFlag
  input  [1 : 0] wci_s_5_MFlag;

  // action method wci_s_6_mCmd
  input  [2 : 0] wci_s_6_MCmd;

  // action method wci_s_6_mAddrSpace
  input  wci_s_6_MAddrSpace;

  // action method wci_s_6_mByteEn
  input  [3 : 0] wci_s_6_MByteEn;

  // action method wci_s_6_mAddr
  input  [31 : 0] wci_s_6_MAddr;

  // action method wci_s_6_mData
  input  [31 : 0] wci_s_6_MData;

  // value method wci_s_6_sResp
  output [1 : 0] wci_s_6_SResp;

  // value method wci_s_6_sData
  output [31 : 0] wci_s_6_SData;

  // value method wci_s_6_sThreadBusy
  output wci_s_6_SThreadBusy;

  // value method wci_s_6_sFlag
  output [1 : 0] wci_s_6_SFlag;

  // action method wci_s_6_mFlag
  input  [1 : 0] wci_s_6_MFlag;

  // action method wci_s_7_mCmd
  input  [2 : 0] wci_s_7_MCmd;

  // action method wci_s_7_mAddrSpace
  input  wci_s_7_MAddrSpace;

  // action method wci_s_7_mByteEn
  input  [3 : 0] wci_s_7_MByteEn;

  // action method wci_s_7_mAddr
  input  [31 : 0] wci_s_7_MAddr;

  // action method wci_s_7_mData
  input  [31 : 0] wci_s_7_MData;

  // value method wci_s_7_sResp
  output [1 : 0] wci_s_7_SResp;

  // value method wci_s_7_sData
  output [31 : 0] wci_s_7_SData;

  // value method wci_s_7_sThreadBusy
  output wci_s_7_SThreadBusy;

  // value method wci_s_7_sFlag
  output [1 : 0] wci_s_7_SFlag;

  // action method wci_s_7_mFlag
  input  [1 : 0] wci_s_7_MFlag;

  // action method wti_s_0_mCmd
  input  [2 : 0] wti_s_0_MCmd;

  // action method wti_s_0_mData
  input  [63 : 0] wti_s_0_MData;

  // value method wti_s_0_sThreadBusy
  output wti_s_0_SThreadBusy;

  // value method wti_s_0_sReset_n
  output wti_s_0_SReset_n;

  // action method wti_s_1_mCmd
  input  [2 : 0] wti_s_1_MCmd;

  // action method wti_s_1_mData
  input  [63 : 0] wti_s_1_MData;

  // value method wti_s_1_sThreadBusy
  output wti_s_1_SThreadBusy;

  // value method wti_s_1_sReset_n
  output wti_s_1_SReset_n;

  // action method wti_s_2_mCmd
  input  [2 : 0] wti_s_2_MCmd;

  // action method wti_s_2_mData
  input  [63 : 0] wti_s_2_MData;

  // value method wti_s_2_sThreadBusy
  output wti_s_2_SThreadBusy;

  // value method wti_s_2_sReset_n
  output wti_s_2_SReset_n;

  // value method wmiM0_mCmd
  output [2 : 0] wmiM0_MCmd;

  // value method wmiM0_mReqLast
  output wmiM0_MReqLast;

  // value method wmiM0_mReqInfo
  output wmiM0_MReqInfo;

  // value method wmiM0_mAddrSpace
  output wmiM0_MAddrSpace;

  // value method wmiM0_mAddr
  output [13 : 0] wmiM0_MAddr;

  // value method wmiM0_mBurstLength
  output [11 : 0] wmiM0_MBurstLength;

  // value method wmiM0_mDataValid
  output wmiM0_MDataValid;

  // value method wmiM0_mDataLast
  output wmiM0_MDataLast;

  // value method wmiM0_mData
  output [31 : 0] wmiM0_MData;

  // value method wmiM0_mDataInfo

  // value method wmiM0_mDataByteEn
  output [3 : 0] wmiM0_MDataByteEn;

  // action method wmiM0_sResp
  input  [1 : 0] wmiM0_SResp;

  // action method wmiM0_sData
  input  [31 : 0] wmiM0_SData;

  // action method wmiM0_sThreadBusy
  input  wmiM0_SThreadBusy;

  // action method wmiM0_sDataThreadBusy
  input  wmiM0_SDataThreadBusy;

  // action method wmiM0_sRespLast
  input  wmiM0_SRespLast;

  // action method wmiM0_sFlag
  input  [31 : 0] wmiM0_SFlag;

  // value method wmiM0_mFlag
  output [31 : 0] wmiM0_MFlag;

  // value method wmiM0_mReset_n
  output wmiM0_MReset_n;

  // action method wmiM0_sReset_n
  input  wmiM0_SReset_n;

  // value method wmiM1_mCmd
  output [2 : 0] wmiM1_MCmd;

  // value method wmiM1_mReqLast
  output wmiM1_MReqLast;

  // value method wmiM1_mReqInfo
  output wmiM1_MReqInfo;

  // value method wmiM1_mAddrSpace
  output wmiM1_MAddrSpace;

  // value method wmiM1_mAddr
  output [13 : 0] wmiM1_MAddr;

  // value method wmiM1_mBurstLength
  output [11 : 0] wmiM1_MBurstLength;

  // value method wmiM1_mDataValid
  output wmiM1_MDataValid;

  // value method wmiM1_mDataLast
  output wmiM1_MDataLast;

  // value method wmiM1_mData
  output [31 : 0] wmiM1_MData;

  // value method wmiM1_mDataInfo

  // value method wmiM1_mDataByteEn
  output [3 : 0] wmiM1_MDataByteEn;

  // action method wmiM1_sResp
  input  [1 : 0] wmiM1_SResp;

  // action method wmiM1_sData
  input  [31 : 0] wmiM1_SData;

  // action method wmiM1_sThreadBusy
  input  wmiM1_SThreadBusy;

  // action method wmiM1_sDataThreadBusy
  input  wmiM1_SDataThreadBusy;

  // action method wmiM1_sRespLast
  input  wmiM1_SRespLast;

  // action method wmiM1_sFlag
  input  [31 : 0] wmiM1_SFlag;

  // value method wmiM1_mFlag
  output [31 : 0] wmiM1_MFlag;

  // value method wmiM1_mReset_n
  output wmiM1_MReset_n;

  // action method wmiM1_sReset_n
  input  wmiM1_SReset_n;

  // value method wmemiM0_mCmd
  output [2 : 0] wmemiM0_MCmd;

  // value method wmemiM0_mReqLast
  output wmemiM0_MReqLast;

  // value method wmemiM0_mAddr
  output [35 : 0] wmemiM0_MAddr;

  // value method wmemiM0_mBurstLength
  output [11 : 0] wmemiM0_MBurstLength;

  // value method wmemiM0_mDataValid
  output wmemiM0_MDataValid;

  // value method wmemiM0_mDataLast
  output wmemiM0_MDataLast;

  // value method wmemiM0_mData
  output [127 : 0] wmemiM0_MData;

  // value method wmemiM0_mDataByteEn
  output [15 : 0] wmemiM0_MDataByteEn;

  // action method wmemiM0_sResp
  input  [1 : 0] wmemiM0_SResp;

  // action method wmemiM0_sRespLast
  input  wmemiM0_SRespLast;

  // action method wmemiM0_sData
  input  [127 : 0] wmemiM0_SData;

  // action method wmemiM0_sCmdAccept
  input  wmemiM0_SCmdAccept;

  // action method wmemiM0_sDataAccept
  input  wmemiM0_SDataAccept;

  // value method wmemiM0_mReset_n
  output wmemiM0_MReset_n;

  // action method wsi_s_adc_mCmd
  input  [2 : 0] wsi_s_adc_MCmd;

  // action method wsi_s_adc_mReqLast
  input  wsi_s_adc_MReqLast;

  // action method wsi_s_adc_mBurstPrecise
  input  wsi_s_adc_MBurstPrecise;

  // action method wsi_s_adc_mBurstLength
  input  [11 : 0] wsi_s_adc_MBurstLength;

  // action method wsi_s_adc_mData
  input  [31 : 0] wsi_s_adc_MData;

  // action method wsi_s_adc_mByteEn
  input  [3 : 0] wsi_s_adc_MByteEn;

  // action method wsi_s_adc_mReqInfo
  input  [7 : 0] wsi_s_adc_MReqInfo;

  // action method wsi_s_adc_mDataInfo

  // value method wsi_s_adc_sThreadBusy
  output wsi_s_adc_SThreadBusy;

  // value method wsi_s_adc_sReset_n
  output wsi_s_adc_SReset_n;

  // action method wsi_s_adc_mReset_n
  input  wsi_s_adc_MReset_n;

  // value method wsi_m_dac_mCmd
  output [2 : 0] wsi_m_dac_MCmd;

  // value method wsi_m_dac_mReqLast
  output wsi_m_dac_MReqLast;

  // value method wsi_m_dac_mBurstPrecise
  output wsi_m_dac_MBurstPrecise;

  // value method wsi_m_dac_mBurstLength
  output [11 : 0] wsi_m_dac_MBurstLength;

  // value method wsi_m_dac_mData
  output [31 : 0] wsi_m_dac_MData;

  // value method wsi_m_dac_mByteEn
  output [3 : 0] wsi_m_dac_MByteEn;

  // value method wsi_m_dac_mReqInfo
  output [7 : 0] wsi_m_dac_MReqInfo;

  // value method wsi_m_dac_mDataInfo

  // action method wsi_m_dac_sThreadBusy
  input  wsi_m_dac_SThreadBusy;

  // value method wsi_m_dac_mReset_n
  output wsi_m_dac_MReset_n;

  // action method wsi_m_dac_sReset_n
  input  wsi_m_dac_SReset_n;

  // value method uuid
  output [511 : 0] uuid;

  // signals for module outputs
  wire [511 : 0] uuid;
  wire [127 : 0] wmemiM0_MData;
  wire [35 : 0] wmemiM0_MAddr;
  wire [31 : 0] wci_s_0_SData,
		wci_s_1_SData,
		wci_s_2_SData,
		wci_s_3_SData,
		wci_s_4_SData,
		wci_s_5_SData,
		wci_s_6_SData,
		wci_s_7_SData,
		wmiM0_MData,
		wmiM0_MFlag,
		wmiM1_MData,
		wmiM1_MFlag,
		wsi_m_dac_MData;
  wire [15 : 0] wmemiM0_MDataByteEn;
  wire [13 : 0] wmiM0_MAddr, wmiM1_MAddr;
  wire [11 : 0] wmemiM0_MBurstLength,
		wmiM0_MBurstLength,
		wmiM1_MBurstLength,
		wsi_m_dac_MBurstLength;
  wire [7 : 0] wsi_m_dac_MReqInfo;
  wire [3 : 0] wmiM0_MDataByteEn, wmiM1_MDataByteEn, wsi_m_dac_MByteEn;
  wire [2 : 0] wmemiM0_MCmd, wmiM0_MCmd, wmiM1_MCmd, wsi_m_dac_MCmd;
  wire [1 : 0] wci_s_0_SFlag,
	       wci_s_0_SResp,
	       wci_s_1_SFlag,
	       wci_s_1_SResp,
	       wci_s_2_SFlag,
	       wci_s_2_SResp,
	       wci_s_3_SFlag,
	       wci_s_3_SResp,
	       wci_s_4_SFlag,
	       wci_s_4_SResp,
	       wci_s_5_SFlag,
	       wci_s_5_SResp,
	       wci_s_6_SFlag,
	       wci_s_6_SResp,
	       wci_s_7_SFlag,
	       wci_s_7_SResp;
  wire wci_s_0_SThreadBusy,
       wci_s_1_SThreadBusy,
       wci_s_2_SThreadBusy,
       wci_s_3_SThreadBusy,
       wci_s_4_SThreadBusy,
       wci_s_5_SThreadBusy,
       wci_s_6_SThreadBusy,
       wci_s_7_SThreadBusy,
       wmemiM0_MDataLast,
       wmemiM0_MDataValid,
       wmemiM0_MReqLast,
       wmemiM0_MReset_n,
       wmiM0_MAddrSpace,
       wmiM0_MDataLast,
       wmiM0_MDataValid,
       wmiM0_MReqInfo,
       wmiM0_MReqLast,
       wmiM0_MReset_n,
       wmiM1_MAddrSpace,
       wmiM1_MDataLast,
       wmiM1_MDataValid,
       wmiM1_MReqInfo,
       wmiM1_MReqLast,
       wmiM1_MReset_n,
       wsi_m_dac_MBurstPrecise,
       wsi_m_dac_MReqLast,
       wsi_m_dac_MReset_n,
       wsi_s_adc_SReset_n,
       wsi_s_adc_SThreadBusy,
       wti_s_0_SReset_n,
       wti_s_0_SThreadBusy,
       wti_s_1_SReset_n,
       wti_s_1_SThreadBusy,
       wti_s_2_SReset_n,
       wti_s_2_SThreadBusy;

  // inlined wires
  wire [95 : 0] captWorker0_wsiS_extStatusW$wget,
		captWorker1_wsiS_extStatusW$wget,
		captWorker2_wsiS_extStatusW$wget,
		wsimMonW3_pmsender_wsiM_extStatusW$wget,
		wsisMonW3_pmsender_wsiM_extStatusW$wget;
  wire [71 : 0] captWorker0_wci_wslv_wciReq$wget,
		captWorker1_wci_wslv_wciReq$wget,
		captWorker2_wci_wslv_wciReq$wget;
  wire [66 : 0] captWorker0_wtiS_wtiReq$wget,
		captWorker1_wtiS_wtiReq$wget,
		captWorker2_wtiS_wtiReq$wget;
  wire [63 : 0] captWorker0_nowW$wget,
		captWorker0_wti_Es_mData_w$wget,
		captWorker1_nowW$wget,
		captWorker1_wti_Es_mData_w$wget,
		captWorker2_nowW$wget,
		captWorker2_wti_Es_mData_w$wget;
  wire [60 : 0] captWorker0_wsiS_wsiReq$wget,
		captWorker1_wsiS_wsiReq$wget,
		captWorker2_wsiS_wsiReq$wget,
		wsimMonW3_pmsender_wsiM_reqFifo_x_wire$wget,
		wsisMonW3_pmsender_wsiM_reqFifo_x_wire$wget;
  wire [33 : 0] captWorker0_wci_wslv_respF_x_wire$wget,
		captWorker1_wci_wslv_respF_x_wire$wget,
		captWorker2_wci_wslv_respF_x_wire$wget;
  wire [31 : 0] captWorker0_dataBram_serverAdapterA_outData_enqData$wget,
		captWorker0_dataBram_serverAdapterA_outData_outData$wget,
		captWorker0_dataBram_serverAdapterB_outData_enqData$wget,
		captWorker0_dataBram_serverAdapterB_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_1_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_1_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_2_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_2_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_3_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_3_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_1_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_1_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_2_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_2_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_3_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_3_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_outData_outData$wget,
		captWorker0_statusReg_w$wget,
		captWorker0_wci_wci_Es_mAddr_w$wget,
		captWorker0_wci_wci_Es_mData_w$wget,
		captWorker0_wsi_Es_mData_w$wget,
		captWorker1_dataBram_serverAdapterA_outData_enqData$wget,
		captWorker1_dataBram_serverAdapterA_outData_outData$wget,
		captWorker1_dataBram_serverAdapterB_outData_enqData$wget,
		captWorker1_dataBram_serverAdapterB_outData_outData$wget,
		captWorker1_metaBram_serverAdapterA_1_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterA_1_outData_outData$wget,
		captWorker1_metaBram_serverAdapterA_2_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterA_2_outData_outData$wget,
		captWorker1_metaBram_serverAdapterA_3_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterA_3_outData_outData$wget,
		captWorker1_metaBram_serverAdapterA_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterA_outData_outData$wget,
		captWorker1_metaBram_serverAdapterB_1_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterB_1_outData_outData$wget,
		captWorker1_metaBram_serverAdapterB_2_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterB_2_outData_outData$wget,
		captWorker1_metaBram_serverAdapterB_3_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterB_3_outData_outData$wget,
		captWorker1_metaBram_serverAdapterB_outData_enqData$wget,
		captWorker1_metaBram_serverAdapterB_outData_outData$wget,
		captWorker1_statusReg_w$wget,
		captWorker1_wci_wci_Es_mAddr_w$wget,
		captWorker1_wci_wci_Es_mData_w$wget,
		captWorker1_wsi_Es_mData_w$wget,
		captWorker2_dataBram_serverAdapterA_outData_enqData$wget,
		captWorker2_dataBram_serverAdapterA_outData_outData$wget,
		captWorker2_dataBram_serverAdapterB_outData_enqData$wget,
		captWorker2_dataBram_serverAdapterB_outData_outData$wget,
		captWorker2_metaBram_serverAdapterA_1_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterA_1_outData_outData$wget,
		captWorker2_metaBram_serverAdapterA_2_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterA_2_outData_outData$wget,
		captWorker2_metaBram_serverAdapterA_3_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterA_3_outData_outData$wget,
		captWorker2_metaBram_serverAdapterA_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterA_outData_outData$wget,
		captWorker2_metaBram_serverAdapterB_1_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterB_1_outData_outData$wget,
		captWorker2_metaBram_serverAdapterB_2_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterB_2_outData_outData$wget,
		captWorker2_metaBram_serverAdapterB_3_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterB_3_outData_outData$wget,
		captWorker2_metaBram_serverAdapterB_outData_enqData$wget,
		captWorker2_metaBram_serverAdapterB_outData_outData$wget,
		captWorker2_statusReg_w$wget,
		captWorker2_wci_wci_Es_mAddr_w$wget,
		captWorker2_wci_wci_Es_mData_w$wget,
		captWorker2_wsi_Es_mData_w$wget,
		tieOff0_wci_Es_mAddr_w$wget,
		tieOff0_wci_Es_mData_w$wget;
  wire [11 : 0] captWorker0_wsi_Es_mBurstLength_w$wget,
		captWorker1_wsi_Es_mBurstLength_w$wget,
		captWorker2_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] captWorker0_wsi_Es_mReqInfo_w$wget,
	       captWorker1_wsi_Es_mReqInfo_w$wget,
	       captWorker2_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] captWorker0_wci_wci_Es_mByteEn_w$wget,
	       captWorker0_wsi_Es_mByteEn_w$wget,
	       captWorker1_wci_wci_Es_mByteEn_w$wget,
	       captWorker1_wsi_Es_mByteEn_w$wget,
	       captWorker2_wci_wci_Es_mByteEn_w$wget,
	       captWorker2_wsi_Es_mByteEn_w$wget,
	       tieOff0_wci_Es_mByteEn_w$wget;
  wire [2 : 0] captWorker0_dataBram_serverAdapterA_cnt_1$wget,
	       captWorker0_dataBram_serverAdapterA_cnt_2$wget,
	       captWorker0_dataBram_serverAdapterA_cnt_3$wget,
	       captWorker0_dataBram_serverAdapterB_cnt_1$wget,
	       captWorker0_dataBram_serverAdapterB_cnt_2$wget,
	       captWorker0_dataBram_serverAdapterB_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_1_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_1_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_1_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_2_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_2_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_2_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_3_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_3_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_3_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_1_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_1_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_1_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_2_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_2_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_2_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_3_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_3_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_3_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_cnt_3$wget,
	       captWorker0_wci_wci_Es_mCmd_w$wget,
	       captWorker0_wci_wslv_wEdge$wget,
	       captWorker0_wsi_Es_mCmd_w$wget,
	       captWorker0_wti_Es_mCmd_w$wget,
	       captWorker1_dataBram_serverAdapterA_cnt_1$wget,
	       captWorker1_dataBram_serverAdapterA_cnt_2$wget,
	       captWorker1_dataBram_serverAdapterA_cnt_3$wget,
	       captWorker1_dataBram_serverAdapterB_cnt_1$wget,
	       captWorker1_dataBram_serverAdapterB_cnt_2$wget,
	       captWorker1_dataBram_serverAdapterB_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterA_1_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterA_1_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterA_1_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterA_2_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterA_2_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterA_2_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterA_3_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterA_3_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterA_3_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterA_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterA_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterA_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterB_1_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterB_1_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterB_1_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterB_2_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterB_2_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterB_2_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterB_3_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterB_3_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterB_3_cnt_3$wget,
	       captWorker1_metaBram_serverAdapterB_cnt_1$wget,
	       captWorker1_metaBram_serverAdapterB_cnt_2$wget,
	       captWorker1_metaBram_serverAdapterB_cnt_3$wget,
	       captWorker1_wci_wci_Es_mCmd_w$wget,
	       captWorker1_wci_wslv_wEdge$wget,
	       captWorker1_wsi_Es_mCmd_w$wget,
	       captWorker1_wti_Es_mCmd_w$wget,
	       captWorker2_dataBram_serverAdapterA_cnt_1$wget,
	       captWorker2_dataBram_serverAdapterA_cnt_2$wget,
	       captWorker2_dataBram_serverAdapterA_cnt_3$wget,
	       captWorker2_dataBram_serverAdapterB_cnt_1$wget,
	       captWorker2_dataBram_serverAdapterB_cnt_2$wget,
	       captWorker2_dataBram_serverAdapterB_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterA_1_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterA_1_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterA_1_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterA_2_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterA_2_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterA_2_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterA_3_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterA_3_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterA_3_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterA_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterA_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterA_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterB_1_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterB_1_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterB_1_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterB_2_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterB_2_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterB_2_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterB_3_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterB_3_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterB_3_cnt_3$wget,
	       captWorker2_metaBram_serverAdapterB_cnt_1$wget,
	       captWorker2_metaBram_serverAdapterB_cnt_2$wget,
	       captWorker2_metaBram_serverAdapterB_cnt_3$wget,
	       captWorker2_wci_wci_Es_mCmd_w$wget,
	       captWorker2_wci_wslv_wEdge$wget,
	       captWorker2_wsi_Es_mCmd_w$wget,
	       captWorker2_wti_Es_mCmd_w$wget,
	       tieOff0_wci_Es_mCmd_w$wget;
  wire [1 : 0] captWorker0_dataBram_serverAdapterA_s1_1$wget,
	       captWorker0_dataBram_serverAdapterA_writeWithResp$wget,
	       captWorker0_dataBram_serverAdapterB_s1_1$wget,
	       captWorker0_dataBram_serverAdapterB_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_1_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_1_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_2_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_2_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_3_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_3_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_1_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_1_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_2_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_2_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_3_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_3_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_writeWithResp$wget,
	       captWorker1_dataBram_serverAdapterA_s1_1$wget,
	       captWorker1_dataBram_serverAdapterA_writeWithResp$wget,
	       captWorker1_dataBram_serverAdapterB_s1_1$wget,
	       captWorker1_dataBram_serverAdapterB_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterA_1_s1_1$wget,
	       captWorker1_metaBram_serverAdapterA_1_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterA_2_s1_1$wget,
	       captWorker1_metaBram_serverAdapterA_2_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterA_3_s1_1$wget,
	       captWorker1_metaBram_serverAdapterA_3_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterA_s1_1$wget,
	       captWorker1_metaBram_serverAdapterA_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterB_1_s1_1$wget,
	       captWorker1_metaBram_serverAdapterB_1_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterB_2_s1_1$wget,
	       captWorker1_metaBram_serverAdapterB_2_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterB_3_s1_1$wget,
	       captWorker1_metaBram_serverAdapterB_3_writeWithResp$wget,
	       captWorker1_metaBram_serverAdapterB_s1_1$wget,
	       captWorker1_metaBram_serverAdapterB_writeWithResp$wget,
	       captWorker2_dataBram_serverAdapterA_s1_1$wget,
	       captWorker2_dataBram_serverAdapterA_writeWithResp$wget,
	       captWorker2_dataBram_serverAdapterB_s1_1$wget,
	       captWorker2_dataBram_serverAdapterB_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterA_1_s1_1$wget,
	       captWorker2_metaBram_serverAdapterA_1_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterA_2_s1_1$wget,
	       captWorker2_metaBram_serverAdapterA_2_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterA_3_s1_1$wget,
	       captWorker2_metaBram_serverAdapterA_3_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterA_s1_1$wget,
	       captWorker2_metaBram_serverAdapterA_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterB_1_s1_1$wget,
	       captWorker2_metaBram_serverAdapterB_1_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterB_2_s1_1$wget,
	       captWorker2_metaBram_serverAdapterB_2_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterB_3_s1_1$wget,
	       captWorker2_metaBram_serverAdapterB_3_writeWithResp$wget,
	       captWorker2_metaBram_serverAdapterB_s1_1$wget,
	       captWorker2_metaBram_serverAdapterB_writeWithResp$wget;
  wire captWorker0_dataBram_serverAdapterA_cnt_1$whas,
       captWorker0_dataBram_serverAdapterA_cnt_2$whas,
       captWorker0_dataBram_serverAdapterA_cnt_3$whas,
       captWorker0_dataBram_serverAdapterA_outData_deqCalled$whas,
       captWorker0_dataBram_serverAdapterA_outData_enqData$whas,
       captWorker0_dataBram_serverAdapterA_outData_outData$whas,
       captWorker0_dataBram_serverAdapterA_s1_1$whas,
       captWorker0_dataBram_serverAdapterA_writeWithResp$whas,
       captWorker0_dataBram_serverAdapterB_cnt_1$whas,
       captWorker0_dataBram_serverAdapterB_cnt_2$whas,
       captWorker0_dataBram_serverAdapterB_cnt_3$whas,
       captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas,
       captWorker0_dataBram_serverAdapterB_outData_enqData$whas,
       captWorker0_dataBram_serverAdapterB_outData_outData$whas,
       captWorker0_dataBram_serverAdapterB_s1_1$whas,
       captWorker0_dataBram_serverAdapterB_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_1_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_1_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_1_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_1_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_1_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_1_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_1_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_2_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_2_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_2_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_2_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_2_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_2_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_2_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_3_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_3_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_3_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_3_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_3_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_3_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_3_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_1_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_1_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_1_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_1_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_1_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_1_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_2_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_2_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_2_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_2_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_2_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_2_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_3_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_3_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_3_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_3_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_3_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_3_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_writeWithResp$whas,
       captWorker0_nowW$whas,
       captWorker0_statusReg_w$whas,
       captWorker0_wci_wci_Es_mAddrSpace_w$wget,
       captWorker0_wci_wci_Es_mAddrSpace_w$whas,
       captWorker0_wci_wci_Es_mAddr_w$whas,
       captWorker0_wci_wci_Es_mByteEn_w$whas,
       captWorker0_wci_wci_Es_mCmd_w$whas,
       captWorker0_wci_wci_Es_mData_w$whas,
       captWorker0_wci_wslv_ctlAckReg_1$wget,
       captWorker0_wci_wslv_ctlAckReg_1$whas,
       captWorker0_wci_wslv_reqF_r_clr$whas,
       captWorker0_wci_wslv_reqF_r_deq$whas,
       captWorker0_wci_wslv_reqF_r_enq$whas,
       captWorker0_wci_wslv_respF_dequeueing$whas,
       captWorker0_wci_wslv_respF_enqueueing$whas,
       captWorker0_wci_wslv_respF_x_wire$whas,
       captWorker0_wci_wslv_sFlagReg_1$wget,
       captWorker0_wci_wslv_sFlagReg_1$whas,
       captWorker0_wci_wslv_sThreadBusy_pw$whas,
       captWorker0_wci_wslv_wEdge$whas,
       captWorker0_wci_wslv_wciReq$whas,
       captWorker0_wci_wslv_wci_cfrd_pw$whas,
       captWorker0_wci_wslv_wci_cfwr_pw$whas,
       captWorker0_wci_wslv_wci_ctrl_pw$whas,
       captWorker0_wsiS_operateD_1$wget,
       captWorker0_wsiS_operateD_1$whas,
       captWorker0_wsiS_peerIsReady_1$wget,
       captWorker0_wsiS_peerIsReady_1$whas,
       captWorker0_wsiS_reqFifo_doResetClr$whas,
       captWorker0_wsiS_reqFifo_doResetDeq$whas,
       captWorker0_wsiS_reqFifo_doResetEnq$whas,
       captWorker0_wsiS_reqFifo_r_clr$whas,
       captWorker0_wsiS_reqFifo_r_deq$whas,
       captWorker0_wsiS_reqFifo_r_enq$whas,
       captWorker0_wsiS_sThreadBusy_dw$wget,
       captWorker0_wsiS_sThreadBusy_dw$whas,
       captWorker0_wsiS_wsiReq$whas,
       captWorker0_wsi_Es_mBurstLength_w$whas,
       captWorker0_wsi_Es_mBurstPrecise_w$whas,
       captWorker0_wsi_Es_mByteEn_w$whas,
       captWorker0_wsi_Es_mCmd_w$whas,
       captWorker0_wsi_Es_mDataInfo_w$whas,
       captWorker0_wsi_Es_mData_w$whas,
       captWorker0_wsi_Es_mReqInfo_w$whas,
       captWorker0_wsi_Es_mReqLast_w$whas,
       captWorker0_wtiS_operateD_1$wget,
       captWorker0_wtiS_operateD_1$whas,
       captWorker0_wtiS_wtiReq$whas,
       captWorker0_wti_Es_mCmd_w$whas,
       captWorker0_wti_Es_mData_w$whas,
       captWorker1_dataBram_serverAdapterA_cnt_1$whas,
       captWorker1_dataBram_serverAdapterA_cnt_2$whas,
       captWorker1_dataBram_serverAdapterA_cnt_3$whas,
       captWorker1_dataBram_serverAdapterA_outData_deqCalled$whas,
       captWorker1_dataBram_serverAdapterA_outData_enqData$whas,
       captWorker1_dataBram_serverAdapterA_outData_outData$whas,
       captWorker1_dataBram_serverAdapterA_s1_1$whas,
       captWorker1_dataBram_serverAdapterA_writeWithResp$whas,
       captWorker1_dataBram_serverAdapterB_cnt_1$whas,
       captWorker1_dataBram_serverAdapterB_cnt_2$whas,
       captWorker1_dataBram_serverAdapterB_cnt_3$whas,
       captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas,
       captWorker1_dataBram_serverAdapterB_outData_enqData$whas,
       captWorker1_dataBram_serverAdapterB_outData_outData$whas,
       captWorker1_dataBram_serverAdapterB_s1_1$whas,
       captWorker1_dataBram_serverAdapterB_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterA_1_cnt_1$whas,
       captWorker1_metaBram_serverAdapterA_1_cnt_2$whas,
       captWorker1_metaBram_serverAdapterA_1_cnt_3$whas,
       captWorker1_metaBram_serverAdapterA_1_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterA_1_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterA_1_outData_outData$whas,
       captWorker1_metaBram_serverAdapterA_1_s1_1$whas,
       captWorker1_metaBram_serverAdapterA_1_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterA_2_cnt_1$whas,
       captWorker1_metaBram_serverAdapterA_2_cnt_2$whas,
       captWorker1_metaBram_serverAdapterA_2_cnt_3$whas,
       captWorker1_metaBram_serverAdapterA_2_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterA_2_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterA_2_outData_outData$whas,
       captWorker1_metaBram_serverAdapterA_2_s1_1$whas,
       captWorker1_metaBram_serverAdapterA_2_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterA_3_cnt_1$whas,
       captWorker1_metaBram_serverAdapterA_3_cnt_2$whas,
       captWorker1_metaBram_serverAdapterA_3_cnt_3$whas,
       captWorker1_metaBram_serverAdapterA_3_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterA_3_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterA_3_outData_outData$whas,
       captWorker1_metaBram_serverAdapterA_3_s1_1$whas,
       captWorker1_metaBram_serverAdapterA_3_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterA_cnt_1$whas,
       captWorker1_metaBram_serverAdapterA_cnt_2$whas,
       captWorker1_metaBram_serverAdapterA_cnt_3$whas,
       captWorker1_metaBram_serverAdapterA_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterA_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterA_outData_outData$whas,
       captWorker1_metaBram_serverAdapterA_s1_1$whas,
       captWorker1_metaBram_serverAdapterA_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterB_1_cnt_1$whas,
       captWorker1_metaBram_serverAdapterB_1_cnt_2$whas,
       captWorker1_metaBram_serverAdapterB_1_cnt_3$whas,
       captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterB_1_outData_outData$whas,
       captWorker1_metaBram_serverAdapterB_1_s1_1$whas,
       captWorker1_metaBram_serverAdapterB_1_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterB_2_cnt_1$whas,
       captWorker1_metaBram_serverAdapterB_2_cnt_2$whas,
       captWorker1_metaBram_serverAdapterB_2_cnt_3$whas,
       captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterB_2_outData_outData$whas,
       captWorker1_metaBram_serverAdapterB_2_s1_1$whas,
       captWorker1_metaBram_serverAdapterB_2_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterB_3_cnt_1$whas,
       captWorker1_metaBram_serverAdapterB_3_cnt_2$whas,
       captWorker1_metaBram_serverAdapterB_3_cnt_3$whas,
       captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterB_3_outData_outData$whas,
       captWorker1_metaBram_serverAdapterB_3_s1_1$whas,
       captWorker1_metaBram_serverAdapterB_3_writeWithResp$whas,
       captWorker1_metaBram_serverAdapterB_cnt_1$whas,
       captWorker1_metaBram_serverAdapterB_cnt_2$whas,
       captWorker1_metaBram_serverAdapterB_cnt_3$whas,
       captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas,
       captWorker1_metaBram_serverAdapterB_outData_enqData$whas,
       captWorker1_metaBram_serverAdapterB_outData_outData$whas,
       captWorker1_metaBram_serverAdapterB_s1_1$whas,
       captWorker1_metaBram_serverAdapterB_writeWithResp$whas,
       captWorker1_nowW$whas,
       captWorker1_statusReg_w$whas,
       captWorker1_wci_wci_Es_mAddrSpace_w$wget,
       captWorker1_wci_wci_Es_mAddrSpace_w$whas,
       captWorker1_wci_wci_Es_mAddr_w$whas,
       captWorker1_wci_wci_Es_mByteEn_w$whas,
       captWorker1_wci_wci_Es_mCmd_w$whas,
       captWorker1_wci_wci_Es_mData_w$whas,
       captWorker1_wci_wslv_ctlAckReg_1$wget,
       captWorker1_wci_wslv_ctlAckReg_1$whas,
       captWorker1_wci_wslv_reqF_r_clr$whas,
       captWorker1_wci_wslv_reqF_r_deq$whas,
       captWorker1_wci_wslv_reqF_r_enq$whas,
       captWorker1_wci_wslv_respF_dequeueing$whas,
       captWorker1_wci_wslv_respF_enqueueing$whas,
       captWorker1_wci_wslv_respF_x_wire$whas,
       captWorker1_wci_wslv_sFlagReg_1$wget,
       captWorker1_wci_wslv_sFlagReg_1$whas,
       captWorker1_wci_wslv_sThreadBusy_pw$whas,
       captWorker1_wci_wslv_wEdge$whas,
       captWorker1_wci_wslv_wciReq$whas,
       captWorker1_wci_wslv_wci_cfrd_pw$whas,
       captWorker1_wci_wslv_wci_cfwr_pw$whas,
       captWorker1_wci_wslv_wci_ctrl_pw$whas,
       captWorker1_wsiS_operateD_1$wget,
       captWorker1_wsiS_operateD_1$whas,
       captWorker1_wsiS_peerIsReady_1$wget,
       captWorker1_wsiS_peerIsReady_1$whas,
       captWorker1_wsiS_reqFifo_doResetClr$whas,
       captWorker1_wsiS_reqFifo_doResetDeq$whas,
       captWorker1_wsiS_reqFifo_doResetEnq$whas,
       captWorker1_wsiS_reqFifo_r_clr$whas,
       captWorker1_wsiS_reqFifo_r_deq$whas,
       captWorker1_wsiS_reqFifo_r_enq$whas,
       captWorker1_wsiS_sThreadBusy_dw$wget,
       captWorker1_wsiS_sThreadBusy_dw$whas,
       captWorker1_wsiS_wsiReq$whas,
       captWorker1_wsi_Es_mBurstLength_w$whas,
       captWorker1_wsi_Es_mBurstPrecise_w$whas,
       captWorker1_wsi_Es_mByteEn_w$whas,
       captWorker1_wsi_Es_mCmd_w$whas,
       captWorker1_wsi_Es_mDataInfo_w$whas,
       captWorker1_wsi_Es_mData_w$whas,
       captWorker1_wsi_Es_mReqInfo_w$whas,
       captWorker1_wsi_Es_mReqLast_w$whas,
       captWorker1_wtiS_operateD_1$wget,
       captWorker1_wtiS_operateD_1$whas,
       captWorker1_wtiS_wtiReq$whas,
       captWorker1_wti_Es_mCmd_w$whas,
       captWorker1_wti_Es_mData_w$whas,
       captWorker2_dataBram_serverAdapterA_cnt_1$whas,
       captWorker2_dataBram_serverAdapterA_cnt_2$whas,
       captWorker2_dataBram_serverAdapterA_cnt_3$whas,
       captWorker2_dataBram_serverAdapterA_outData_deqCalled$whas,
       captWorker2_dataBram_serverAdapterA_outData_enqData$whas,
       captWorker2_dataBram_serverAdapterA_outData_outData$whas,
       captWorker2_dataBram_serverAdapterA_s1_1$whas,
       captWorker2_dataBram_serverAdapterA_writeWithResp$whas,
       captWorker2_dataBram_serverAdapterB_cnt_1$whas,
       captWorker2_dataBram_serverAdapterB_cnt_2$whas,
       captWorker2_dataBram_serverAdapterB_cnt_3$whas,
       captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas,
       captWorker2_dataBram_serverAdapterB_outData_enqData$whas,
       captWorker2_dataBram_serverAdapterB_outData_outData$whas,
       captWorker2_dataBram_serverAdapterB_s1_1$whas,
       captWorker2_dataBram_serverAdapterB_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterA_1_cnt_1$whas,
       captWorker2_metaBram_serverAdapterA_1_cnt_2$whas,
       captWorker2_metaBram_serverAdapterA_1_cnt_3$whas,
       captWorker2_metaBram_serverAdapterA_1_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterA_1_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterA_1_outData_outData$whas,
       captWorker2_metaBram_serverAdapterA_1_s1_1$whas,
       captWorker2_metaBram_serverAdapterA_1_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterA_2_cnt_1$whas,
       captWorker2_metaBram_serverAdapterA_2_cnt_2$whas,
       captWorker2_metaBram_serverAdapterA_2_cnt_3$whas,
       captWorker2_metaBram_serverAdapterA_2_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterA_2_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterA_2_outData_outData$whas,
       captWorker2_metaBram_serverAdapterA_2_s1_1$whas,
       captWorker2_metaBram_serverAdapterA_2_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterA_3_cnt_1$whas,
       captWorker2_metaBram_serverAdapterA_3_cnt_2$whas,
       captWorker2_metaBram_serverAdapterA_3_cnt_3$whas,
       captWorker2_metaBram_serverAdapterA_3_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterA_3_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterA_3_outData_outData$whas,
       captWorker2_metaBram_serverAdapterA_3_s1_1$whas,
       captWorker2_metaBram_serverAdapterA_3_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterA_cnt_1$whas,
       captWorker2_metaBram_serverAdapterA_cnt_2$whas,
       captWorker2_metaBram_serverAdapterA_cnt_3$whas,
       captWorker2_metaBram_serverAdapterA_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterA_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterA_outData_outData$whas,
       captWorker2_metaBram_serverAdapterA_s1_1$whas,
       captWorker2_metaBram_serverAdapterA_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterB_1_cnt_1$whas,
       captWorker2_metaBram_serverAdapterB_1_cnt_2$whas,
       captWorker2_metaBram_serverAdapterB_1_cnt_3$whas,
       captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterB_1_outData_outData$whas,
       captWorker2_metaBram_serverAdapterB_1_s1_1$whas,
       captWorker2_metaBram_serverAdapterB_1_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterB_2_cnt_1$whas,
       captWorker2_metaBram_serverAdapterB_2_cnt_2$whas,
       captWorker2_metaBram_serverAdapterB_2_cnt_3$whas,
       captWorker2_metaBram_serverAdapterB_2_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterB_2_outData_outData$whas,
       captWorker2_metaBram_serverAdapterB_2_s1_1$whas,
       captWorker2_metaBram_serverAdapterB_2_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterB_3_cnt_1$whas,
       captWorker2_metaBram_serverAdapterB_3_cnt_2$whas,
       captWorker2_metaBram_serverAdapterB_3_cnt_3$whas,
       captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterB_3_outData_outData$whas,
       captWorker2_metaBram_serverAdapterB_3_s1_1$whas,
       captWorker2_metaBram_serverAdapterB_3_writeWithResp$whas,
       captWorker2_metaBram_serverAdapterB_cnt_1$whas,
       captWorker2_metaBram_serverAdapterB_cnt_2$whas,
       captWorker2_metaBram_serverAdapterB_cnt_3$whas,
       captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas,
       captWorker2_metaBram_serverAdapterB_outData_enqData$whas,
       captWorker2_metaBram_serverAdapterB_outData_outData$whas,
       captWorker2_metaBram_serverAdapterB_s1_1$whas,
       captWorker2_metaBram_serverAdapterB_writeWithResp$whas,
       captWorker2_nowW$whas,
       captWorker2_statusReg_w$whas,
       captWorker2_wci_wci_Es_mAddrSpace_w$wget,
       captWorker2_wci_wci_Es_mAddrSpace_w$whas,
       captWorker2_wci_wci_Es_mAddr_w$whas,
       captWorker2_wci_wci_Es_mByteEn_w$whas,
       captWorker2_wci_wci_Es_mCmd_w$whas,
       captWorker2_wci_wci_Es_mData_w$whas,
       captWorker2_wci_wslv_ctlAckReg_1$wget,
       captWorker2_wci_wslv_ctlAckReg_1$whas,
       captWorker2_wci_wslv_reqF_r_clr$whas,
       captWorker2_wci_wslv_reqF_r_deq$whas,
       captWorker2_wci_wslv_reqF_r_enq$whas,
       captWorker2_wci_wslv_respF_dequeueing$whas,
       captWorker2_wci_wslv_respF_enqueueing$whas,
       captWorker2_wci_wslv_respF_x_wire$whas,
       captWorker2_wci_wslv_sFlagReg_1$wget,
       captWorker2_wci_wslv_sFlagReg_1$whas,
       captWorker2_wci_wslv_sThreadBusy_pw$whas,
       captWorker2_wci_wslv_wEdge$whas,
       captWorker2_wci_wslv_wciReq$whas,
       captWorker2_wci_wslv_wci_cfrd_pw$whas,
       captWorker2_wci_wslv_wci_cfwr_pw$whas,
       captWorker2_wci_wslv_wci_ctrl_pw$whas,
       captWorker2_wsiS_operateD_1$wget,
       captWorker2_wsiS_operateD_1$whas,
       captWorker2_wsiS_peerIsReady_1$wget,
       captWorker2_wsiS_peerIsReady_1$whas,
       captWorker2_wsiS_reqFifo_doResetClr$whas,
       captWorker2_wsiS_reqFifo_doResetDeq$whas,
       captWorker2_wsiS_reqFifo_doResetEnq$whas,
       captWorker2_wsiS_reqFifo_r_clr$whas,
       captWorker2_wsiS_reqFifo_r_deq$whas,
       captWorker2_wsiS_reqFifo_r_enq$whas,
       captWorker2_wsiS_sThreadBusy_dw$wget,
       captWorker2_wsiS_sThreadBusy_dw$whas,
       captWorker2_wsiS_wsiReq$whas,
       captWorker2_wsi_Es_mBurstLength_w$whas,
       captWorker2_wsi_Es_mBurstPrecise_w$whas,
       captWorker2_wsi_Es_mByteEn_w$whas,
       captWorker2_wsi_Es_mCmd_w$whas,
       captWorker2_wsi_Es_mDataInfo_w$whas,
       captWorker2_wsi_Es_mData_w$whas,
       captWorker2_wsi_Es_mReqInfo_w$whas,
       captWorker2_wsi_Es_mReqLast_w$whas,
       captWorker2_wtiS_operateD_1$wget,
       captWorker2_wtiS_operateD_1$whas,
       captWorker2_wtiS_wtiReq$whas,
       captWorker2_wti_Es_mCmd_w$whas,
       captWorker2_wti_Es_mData_w$whas,
       tieOff0_wci_Es_mAddrSpace_w$wget,
       tieOff0_wci_Es_mAddrSpace_w$whas,
       tieOff0_wci_Es_mAddr_w$whas,
       tieOff0_wci_Es_mByteEn_w$whas,
       tieOff0_wci_Es_mCmd_w$whas,
       tieOff0_wci_Es_mData_w$whas,
       wsimMonW3_observer_r_mBurstPrecise_1$wget,
       wsimMonW3_observer_r_mBurstPrecise_1$whas,
       wsimMonW3_observer_r_mReqLast_1$wget,
       wsimMonW3_observer_r_mReqLast_1$whas,
       wsimMonW3_observer_r_mReset_n_1$wget,
       wsimMonW3_observer_r_mReset_n_1$whas,
       wsimMonW3_observer_r_sReset_n_1$wget,
       wsimMonW3_observer_r_sReset_n_1$whas,
       wsimMonW3_observer_r_sThreadBusy_1$wget,
       wsimMonW3_observer_r_sThreadBusy_1$whas,
       wsimMonW3_pmsender_wsiM_operateD_1$wget,
       wsimMonW3_pmsender_wsiM_operateD_1$whas,
       wsimMonW3_pmsender_wsiM_peerIsReady_1$wget,
       wsimMonW3_pmsender_wsiM_peerIsReady_1$whas,
       wsimMonW3_pmsender_wsiM_reqFifo_dequeueing$whas,
       wsimMonW3_pmsender_wsiM_reqFifo_enqueueing$whas,
       wsimMonW3_pmsender_wsiM_reqFifo_x_wire$whas,
       wsimMonW3_pmsender_wsiM_sThreadBusy_pw$whas,
       wsisMonW3_observer_r_mBurstPrecise_1$wget,
       wsisMonW3_observer_r_mBurstPrecise_1$whas,
       wsisMonW3_observer_r_mReqLast_1$wget,
       wsisMonW3_observer_r_mReqLast_1$whas,
       wsisMonW3_observer_r_mReset_n_1$wget,
       wsisMonW3_observer_r_mReset_n_1$whas,
       wsisMonW3_observer_r_sReset_n_1$wget,
       wsisMonW3_observer_r_sReset_n_1$whas,
       wsisMonW3_observer_r_sThreadBusy_1$wget,
       wsisMonW3_observer_r_sThreadBusy_1$whas,
       wsisMonW3_pmsender_wsiM_operateD_1$wget,
       wsisMonW3_pmsender_wsiM_operateD_1$whas,
       wsisMonW3_pmsender_wsiM_peerIsReady_1$wget,
       wsisMonW3_pmsender_wsiM_peerIsReady_1$whas,
       wsisMonW3_pmsender_wsiM_reqFifo_dequeueing$whas,
       wsisMonW3_pmsender_wsiM_reqFifo_enqueueing$whas,
       wsisMonW3_pmsender_wsiM_reqFifo_x_wire$whas,
       wsisMonW3_pmsender_wsiM_sThreadBusy_pw$whas;

  // register captWorker0_controlReg
  reg [31 : 0] captWorker0_controlReg;
  wire [31 : 0] captWorker0_controlReg$D_IN;
  wire captWorker0_controlReg$EN;

  // register captWorker0_dataBram_serverAdapterA_cnt
  reg [2 : 0] captWorker0_dataBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker0_dataBram_serverAdapterA_cnt$D_IN;
  wire captWorker0_dataBram_serverAdapterA_cnt$EN;

  // register captWorker0_dataBram_serverAdapterA_s1
  reg [1 : 0] captWorker0_dataBram_serverAdapterA_s1;
  wire [1 : 0] captWorker0_dataBram_serverAdapterA_s1$D_IN;
  wire captWorker0_dataBram_serverAdapterA_s1$EN;

  // register captWorker0_dataBram_serverAdapterB_cnt
  reg [2 : 0] captWorker0_dataBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker0_dataBram_serverAdapterB_cnt$D_IN;
  wire captWorker0_dataBram_serverAdapterB_cnt$EN;

  // register captWorker0_dataBram_serverAdapterB_s1
  reg [1 : 0] captWorker0_dataBram_serverAdapterB_s1;
  wire [1 : 0] captWorker0_dataBram_serverAdapterB_s1$D_IN;
  wire captWorker0_dataBram_serverAdapterB_s1$EN;

  // register captWorker0_dataCount
  reg [31 : 0] captWorker0_dataCount;
  reg [31 : 0] captWorker0_dataCount$D_IN;
  wire captWorker0_dataCount$EN;

  // register captWorker0_isFirst
  reg captWorker0_isFirst;
  wire captWorker0_isFirst$D_IN, captWorker0_isFirst$EN;

  // register captWorker0_mesgLengthSoFar
  reg [13 : 0] captWorker0_mesgLengthSoFar;
  wire [13 : 0] captWorker0_mesgLengthSoFar$D_IN;
  wire captWorker0_mesgLengthSoFar$EN;

  // register captWorker0_metaBram_serverAdapterA_1_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_1_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_1_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_1_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_1_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_1_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_1_s1$EN;

  // register captWorker0_metaBram_serverAdapterA_2_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_2_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_2_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_2_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_2_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_2_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_2_s1$EN;

  // register captWorker0_metaBram_serverAdapterA_3_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_3_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_3_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_3_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_3_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_3_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_3_s1$EN;

  // register captWorker0_metaBram_serverAdapterA_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_1_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_1_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_1_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_1_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_1_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_1_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_1_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_2_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_2_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_2_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_2_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_2_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_2_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_2_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_3_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_3_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_3_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_3_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_3_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_3_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_3_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_s1$EN;

  // register captWorker0_metaCount
  reg [31 : 0] captWorker0_metaCount;
  reg [31 : 0] captWorker0_metaCount$D_IN;
  wire captWorker0_metaCount$EN;

  // register captWorker0_splitReadInFlight
  reg captWorker0_splitReadInFlight;
  wire captWorker0_splitReadInFlight$D_IN, captWorker0_splitReadInFlight$EN;

  // register captWorker0_wci_wslv_cEdge
  reg [2 : 0] captWorker0_wci_wslv_cEdge;
  wire [2 : 0] captWorker0_wci_wslv_cEdge$D_IN;
  wire captWorker0_wci_wslv_cEdge$EN;

  // register captWorker0_wci_wslv_cState
  reg [2 : 0] captWorker0_wci_wslv_cState;
  wire [2 : 0] captWorker0_wci_wslv_cState$D_IN;
  wire captWorker0_wci_wslv_cState$EN;

  // register captWorker0_wci_wslv_ctlAckReg
  reg captWorker0_wci_wslv_ctlAckReg;
  wire captWorker0_wci_wslv_ctlAckReg$D_IN, captWorker0_wci_wslv_ctlAckReg$EN;

  // register captWorker0_wci_wslv_ctlOpActive
  reg captWorker0_wci_wslv_ctlOpActive;
  wire captWorker0_wci_wslv_ctlOpActive$D_IN,
       captWorker0_wci_wslv_ctlOpActive$EN;

  // register captWorker0_wci_wslv_illegalEdge
  reg captWorker0_wci_wslv_illegalEdge;
  wire captWorker0_wci_wslv_illegalEdge$D_IN,
       captWorker0_wci_wslv_illegalEdge$EN;

  // register captWorker0_wci_wslv_isReset_isInReset
  reg captWorker0_wci_wslv_isReset_isInReset;
  wire captWorker0_wci_wslv_isReset_isInReset$D_IN,
       captWorker0_wci_wslv_isReset_isInReset$EN;

  // register captWorker0_wci_wslv_nState
  reg [2 : 0] captWorker0_wci_wslv_nState;
  reg [2 : 0] captWorker0_wci_wslv_nState$D_IN;
  wire captWorker0_wci_wslv_nState$EN;

  // register captWorker0_wci_wslv_reqF_countReg
  reg [1 : 0] captWorker0_wci_wslv_reqF_countReg;
  wire [1 : 0] captWorker0_wci_wslv_reqF_countReg$D_IN;
  wire captWorker0_wci_wslv_reqF_countReg$EN;

  // register captWorker0_wci_wslv_respF_c_r
  reg [1 : 0] captWorker0_wci_wslv_respF_c_r;
  wire [1 : 0] captWorker0_wci_wslv_respF_c_r$D_IN;
  wire captWorker0_wci_wslv_respF_c_r$EN;

  // register captWorker0_wci_wslv_respF_q_0
  reg [33 : 0] captWorker0_wci_wslv_respF_q_0;
  reg [33 : 0] captWorker0_wci_wslv_respF_q_0$D_IN;
  wire captWorker0_wci_wslv_respF_q_0$EN;

  // register captWorker0_wci_wslv_respF_q_1
  reg [33 : 0] captWorker0_wci_wslv_respF_q_1;
  reg [33 : 0] captWorker0_wci_wslv_respF_q_1$D_IN;
  wire captWorker0_wci_wslv_respF_q_1$EN;

  // register captWorker0_wci_wslv_sFlagReg
  reg captWorker0_wci_wslv_sFlagReg;
  wire captWorker0_wci_wslv_sFlagReg$D_IN, captWorker0_wci_wslv_sFlagReg$EN;

  // register captWorker0_wci_wslv_sThreadBusy_d
  reg captWorker0_wci_wslv_sThreadBusy_d;
  wire captWorker0_wci_wslv_sThreadBusy_d$D_IN,
       captWorker0_wci_wslv_sThreadBusy_d$EN;

  // register captWorker0_wsiS_burstKind
  reg [1 : 0] captWorker0_wsiS_burstKind;
  wire [1 : 0] captWorker0_wsiS_burstKind$D_IN;
  wire captWorker0_wsiS_burstKind$EN;

  // register captWorker0_wsiS_errorSticky
  reg captWorker0_wsiS_errorSticky;
  wire captWorker0_wsiS_errorSticky$D_IN, captWorker0_wsiS_errorSticky$EN;

  // register captWorker0_wsiS_iMesgCount
  reg [31 : 0] captWorker0_wsiS_iMesgCount;
  wire [31 : 0] captWorker0_wsiS_iMesgCount$D_IN;
  wire captWorker0_wsiS_iMesgCount$EN;

  // register captWorker0_wsiS_isReset_isInReset
  reg captWorker0_wsiS_isReset_isInReset;
  wire captWorker0_wsiS_isReset_isInReset$D_IN,
       captWorker0_wsiS_isReset_isInReset$EN;

  // register captWorker0_wsiS_mesgWordLength
  reg [11 : 0] captWorker0_wsiS_mesgWordLength;
  wire [11 : 0] captWorker0_wsiS_mesgWordLength$D_IN;
  wire captWorker0_wsiS_mesgWordLength$EN;

  // register captWorker0_wsiS_operateD
  reg captWorker0_wsiS_operateD;
  wire captWorker0_wsiS_operateD$D_IN, captWorker0_wsiS_operateD$EN;

  // register captWorker0_wsiS_pMesgCount
  reg [31 : 0] captWorker0_wsiS_pMesgCount;
  wire [31 : 0] captWorker0_wsiS_pMesgCount$D_IN;
  wire captWorker0_wsiS_pMesgCount$EN;

  // register captWorker0_wsiS_peerIsReady
  reg captWorker0_wsiS_peerIsReady;
  wire captWorker0_wsiS_peerIsReady$D_IN, captWorker0_wsiS_peerIsReady$EN;

  // register captWorker0_wsiS_reqFifo_countReg
  reg [1 : 0] captWorker0_wsiS_reqFifo_countReg;
  wire [1 : 0] captWorker0_wsiS_reqFifo_countReg$D_IN;
  wire captWorker0_wsiS_reqFifo_countReg$EN;

  // register captWorker0_wsiS_reqFifo_levelsValid
  reg captWorker0_wsiS_reqFifo_levelsValid;
  wire captWorker0_wsiS_reqFifo_levelsValid$D_IN,
       captWorker0_wsiS_reqFifo_levelsValid$EN;

  // register captWorker0_wsiS_statusR
  reg [7 : 0] captWorker0_wsiS_statusR;
  wire [7 : 0] captWorker0_wsiS_statusR$D_IN;
  wire captWorker0_wsiS_statusR$EN;

  // register captWorker0_wsiS_tBusyCount
  reg [31 : 0] captWorker0_wsiS_tBusyCount;
  wire [31 : 0] captWorker0_wsiS_tBusyCount$D_IN;
  wire captWorker0_wsiS_tBusyCount$EN;

  // register captWorker0_wsiS_trafficSticky
  reg captWorker0_wsiS_trafficSticky;
  wire captWorker0_wsiS_trafficSticky$D_IN, captWorker0_wsiS_trafficSticky$EN;

  // register captWorker0_wsiS_wordCount
  reg [11 : 0] captWorker0_wsiS_wordCount;
  wire [11 : 0] captWorker0_wsiS_wordCount$D_IN;
  wire captWorker0_wsiS_wordCount$EN;

  // register captWorker0_wtiS_isReset_isInReset
  reg captWorker0_wtiS_isReset_isInReset;
  wire captWorker0_wtiS_isReset_isInReset$D_IN,
       captWorker0_wtiS_isReset_isInReset$EN;

  // register captWorker0_wtiS_nowReq
  reg [66 : 0] captWorker0_wtiS_nowReq;
  wire [66 : 0] captWorker0_wtiS_nowReq$D_IN;
  wire captWorker0_wtiS_nowReq$EN;

  // register captWorker0_wtiS_operateD
  reg captWorker0_wtiS_operateD;
  wire captWorker0_wtiS_operateD$D_IN, captWorker0_wtiS_operateD$EN;

  // register captWorker1_controlReg
  reg [31 : 0] captWorker1_controlReg;
  wire [31 : 0] captWorker1_controlReg$D_IN;
  wire captWorker1_controlReg$EN;

  // register captWorker1_dataBram_serverAdapterA_cnt
  reg [2 : 0] captWorker1_dataBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker1_dataBram_serverAdapterA_cnt$D_IN;
  wire captWorker1_dataBram_serverAdapterA_cnt$EN;

  // register captWorker1_dataBram_serverAdapterA_s1
  reg [1 : 0] captWorker1_dataBram_serverAdapterA_s1;
  wire [1 : 0] captWorker1_dataBram_serverAdapterA_s1$D_IN;
  wire captWorker1_dataBram_serverAdapterA_s1$EN;

  // register captWorker1_dataBram_serverAdapterB_cnt
  reg [2 : 0] captWorker1_dataBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker1_dataBram_serverAdapterB_cnt$D_IN;
  wire captWorker1_dataBram_serverAdapterB_cnt$EN;

  // register captWorker1_dataBram_serverAdapterB_s1
  reg [1 : 0] captWorker1_dataBram_serverAdapterB_s1;
  wire [1 : 0] captWorker1_dataBram_serverAdapterB_s1$D_IN;
  wire captWorker1_dataBram_serverAdapterB_s1$EN;

  // register captWorker1_dataCount
  reg [31 : 0] captWorker1_dataCount;
  reg [31 : 0] captWorker1_dataCount$D_IN;
  wire captWorker1_dataCount$EN;

  // register captWorker1_isFirst
  reg captWorker1_isFirst;
  wire captWorker1_isFirst$D_IN, captWorker1_isFirst$EN;

  // register captWorker1_mesgLengthSoFar
  reg [13 : 0] captWorker1_mesgLengthSoFar;
  wire [13 : 0] captWorker1_mesgLengthSoFar$D_IN;
  wire captWorker1_mesgLengthSoFar$EN;

  // register captWorker1_metaBram_serverAdapterA_1_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterA_1_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterA_1_cnt$EN;

  // register captWorker1_metaBram_serverAdapterA_1_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterA_1_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterA_1_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterA_1_s1$EN;

  // register captWorker1_metaBram_serverAdapterA_2_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterA_2_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterA_2_cnt$EN;

  // register captWorker1_metaBram_serverAdapterA_2_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterA_2_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterA_2_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterA_2_s1$EN;

  // register captWorker1_metaBram_serverAdapterA_3_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterA_3_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterA_3_cnt$EN;

  // register captWorker1_metaBram_serverAdapterA_3_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterA_3_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterA_3_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterA_3_s1$EN;

  // register captWorker1_metaBram_serverAdapterA_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterA_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterA_cnt$EN;

  // register captWorker1_metaBram_serverAdapterA_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterA_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterA_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterA_s1$EN;

  // register captWorker1_metaBram_serverAdapterB_1_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterB_1_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterB_1_cnt$EN;

  // register captWorker1_metaBram_serverAdapterB_1_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterB_1_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterB_1_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterB_1_s1$EN;

  // register captWorker1_metaBram_serverAdapterB_2_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterB_2_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterB_2_cnt$EN;

  // register captWorker1_metaBram_serverAdapterB_2_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterB_2_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterB_2_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterB_2_s1$EN;

  // register captWorker1_metaBram_serverAdapterB_3_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterB_3_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterB_3_cnt$EN;

  // register captWorker1_metaBram_serverAdapterB_3_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterB_3_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterB_3_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterB_3_s1$EN;

  // register captWorker1_metaBram_serverAdapterB_cnt
  reg [2 : 0] captWorker1_metaBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker1_metaBram_serverAdapterB_cnt$D_IN;
  wire captWorker1_metaBram_serverAdapterB_cnt$EN;

  // register captWorker1_metaBram_serverAdapterB_s1
  reg [1 : 0] captWorker1_metaBram_serverAdapterB_s1;
  wire [1 : 0] captWorker1_metaBram_serverAdapterB_s1$D_IN;
  wire captWorker1_metaBram_serverAdapterB_s1$EN;

  // register captWorker1_metaCount
  reg [31 : 0] captWorker1_metaCount;
  reg [31 : 0] captWorker1_metaCount$D_IN;
  wire captWorker1_metaCount$EN;

  // register captWorker1_splitReadInFlight
  reg captWorker1_splitReadInFlight;
  wire captWorker1_splitReadInFlight$D_IN, captWorker1_splitReadInFlight$EN;

  // register captWorker1_wci_wslv_cEdge
  reg [2 : 0] captWorker1_wci_wslv_cEdge;
  wire [2 : 0] captWorker1_wci_wslv_cEdge$D_IN;
  wire captWorker1_wci_wslv_cEdge$EN;

  // register captWorker1_wci_wslv_cState
  reg [2 : 0] captWorker1_wci_wslv_cState;
  wire [2 : 0] captWorker1_wci_wslv_cState$D_IN;
  wire captWorker1_wci_wslv_cState$EN;

  // register captWorker1_wci_wslv_ctlAckReg
  reg captWorker1_wci_wslv_ctlAckReg;
  wire captWorker1_wci_wslv_ctlAckReg$D_IN, captWorker1_wci_wslv_ctlAckReg$EN;

  // register captWorker1_wci_wslv_ctlOpActive
  reg captWorker1_wci_wslv_ctlOpActive;
  wire captWorker1_wci_wslv_ctlOpActive$D_IN,
       captWorker1_wci_wslv_ctlOpActive$EN;

  // register captWorker1_wci_wslv_illegalEdge
  reg captWorker1_wci_wslv_illegalEdge;
  wire captWorker1_wci_wslv_illegalEdge$D_IN,
       captWorker1_wci_wslv_illegalEdge$EN;

  // register captWorker1_wci_wslv_isReset_isInReset
  reg captWorker1_wci_wslv_isReset_isInReset;
  wire captWorker1_wci_wslv_isReset_isInReset$D_IN,
       captWorker1_wci_wslv_isReset_isInReset$EN;

  // register captWorker1_wci_wslv_nState
  reg [2 : 0] captWorker1_wci_wslv_nState;
  reg [2 : 0] captWorker1_wci_wslv_nState$D_IN;
  wire captWorker1_wci_wslv_nState$EN;

  // register captWorker1_wci_wslv_reqF_countReg
  reg [1 : 0] captWorker1_wci_wslv_reqF_countReg;
  wire [1 : 0] captWorker1_wci_wslv_reqF_countReg$D_IN;
  wire captWorker1_wci_wslv_reqF_countReg$EN;

  // register captWorker1_wci_wslv_respF_c_r
  reg [1 : 0] captWorker1_wci_wslv_respF_c_r;
  wire [1 : 0] captWorker1_wci_wslv_respF_c_r$D_IN;
  wire captWorker1_wci_wslv_respF_c_r$EN;

  // register captWorker1_wci_wslv_respF_q_0
  reg [33 : 0] captWorker1_wci_wslv_respF_q_0;
  reg [33 : 0] captWorker1_wci_wslv_respF_q_0$D_IN;
  wire captWorker1_wci_wslv_respF_q_0$EN;

  // register captWorker1_wci_wslv_respF_q_1
  reg [33 : 0] captWorker1_wci_wslv_respF_q_1;
  reg [33 : 0] captWorker1_wci_wslv_respF_q_1$D_IN;
  wire captWorker1_wci_wslv_respF_q_1$EN;

  // register captWorker1_wci_wslv_sFlagReg
  reg captWorker1_wci_wslv_sFlagReg;
  wire captWorker1_wci_wslv_sFlagReg$D_IN, captWorker1_wci_wslv_sFlagReg$EN;

  // register captWorker1_wci_wslv_sThreadBusy_d
  reg captWorker1_wci_wslv_sThreadBusy_d;
  wire captWorker1_wci_wslv_sThreadBusy_d$D_IN,
       captWorker1_wci_wslv_sThreadBusy_d$EN;

  // register captWorker1_wsiS_burstKind
  reg [1 : 0] captWorker1_wsiS_burstKind;
  wire [1 : 0] captWorker1_wsiS_burstKind$D_IN;
  wire captWorker1_wsiS_burstKind$EN;

  // register captWorker1_wsiS_errorSticky
  reg captWorker1_wsiS_errorSticky;
  wire captWorker1_wsiS_errorSticky$D_IN, captWorker1_wsiS_errorSticky$EN;

  // register captWorker1_wsiS_iMesgCount
  reg [31 : 0] captWorker1_wsiS_iMesgCount;
  wire [31 : 0] captWorker1_wsiS_iMesgCount$D_IN;
  wire captWorker1_wsiS_iMesgCount$EN;

  // register captWorker1_wsiS_isReset_isInReset
  reg captWorker1_wsiS_isReset_isInReset;
  wire captWorker1_wsiS_isReset_isInReset$D_IN,
       captWorker1_wsiS_isReset_isInReset$EN;

  // register captWorker1_wsiS_mesgWordLength
  reg [11 : 0] captWorker1_wsiS_mesgWordLength;
  wire [11 : 0] captWorker1_wsiS_mesgWordLength$D_IN;
  wire captWorker1_wsiS_mesgWordLength$EN;

  // register captWorker1_wsiS_operateD
  reg captWorker1_wsiS_operateD;
  wire captWorker1_wsiS_operateD$D_IN, captWorker1_wsiS_operateD$EN;

  // register captWorker1_wsiS_pMesgCount
  reg [31 : 0] captWorker1_wsiS_pMesgCount;
  wire [31 : 0] captWorker1_wsiS_pMesgCount$D_IN;
  wire captWorker1_wsiS_pMesgCount$EN;

  // register captWorker1_wsiS_peerIsReady
  reg captWorker1_wsiS_peerIsReady;
  wire captWorker1_wsiS_peerIsReady$D_IN, captWorker1_wsiS_peerIsReady$EN;

  // register captWorker1_wsiS_reqFifo_countReg
  reg [1 : 0] captWorker1_wsiS_reqFifo_countReg;
  wire [1 : 0] captWorker1_wsiS_reqFifo_countReg$D_IN;
  wire captWorker1_wsiS_reqFifo_countReg$EN;

  // register captWorker1_wsiS_reqFifo_levelsValid
  reg captWorker1_wsiS_reqFifo_levelsValid;
  wire captWorker1_wsiS_reqFifo_levelsValid$D_IN,
       captWorker1_wsiS_reqFifo_levelsValid$EN;

  // register captWorker1_wsiS_statusR
  reg [7 : 0] captWorker1_wsiS_statusR;
  wire [7 : 0] captWorker1_wsiS_statusR$D_IN;
  wire captWorker1_wsiS_statusR$EN;

  // register captWorker1_wsiS_tBusyCount
  reg [31 : 0] captWorker1_wsiS_tBusyCount;
  wire [31 : 0] captWorker1_wsiS_tBusyCount$D_IN;
  wire captWorker1_wsiS_tBusyCount$EN;

  // register captWorker1_wsiS_trafficSticky
  reg captWorker1_wsiS_trafficSticky;
  wire captWorker1_wsiS_trafficSticky$D_IN, captWorker1_wsiS_trafficSticky$EN;

  // register captWorker1_wsiS_wordCount
  reg [11 : 0] captWorker1_wsiS_wordCount;
  wire [11 : 0] captWorker1_wsiS_wordCount$D_IN;
  wire captWorker1_wsiS_wordCount$EN;

  // register captWorker1_wtiS_isReset_isInReset
  reg captWorker1_wtiS_isReset_isInReset;
  wire captWorker1_wtiS_isReset_isInReset$D_IN,
       captWorker1_wtiS_isReset_isInReset$EN;

  // register captWorker1_wtiS_nowReq
  reg [66 : 0] captWorker1_wtiS_nowReq;
  wire [66 : 0] captWorker1_wtiS_nowReq$D_IN;
  wire captWorker1_wtiS_nowReq$EN;

  // register captWorker1_wtiS_operateD
  reg captWorker1_wtiS_operateD;
  wire captWorker1_wtiS_operateD$D_IN, captWorker1_wtiS_operateD$EN;

  // register captWorker2_controlReg
  reg [31 : 0] captWorker2_controlReg;
  wire [31 : 0] captWorker2_controlReg$D_IN;
  wire captWorker2_controlReg$EN;

  // register captWorker2_dataBram_serverAdapterA_cnt
  reg [2 : 0] captWorker2_dataBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker2_dataBram_serverAdapterA_cnt$D_IN;
  wire captWorker2_dataBram_serverAdapterA_cnt$EN;

  // register captWorker2_dataBram_serverAdapterA_s1
  reg [1 : 0] captWorker2_dataBram_serverAdapterA_s1;
  wire [1 : 0] captWorker2_dataBram_serverAdapterA_s1$D_IN;
  wire captWorker2_dataBram_serverAdapterA_s1$EN;

  // register captWorker2_dataBram_serverAdapterB_cnt
  reg [2 : 0] captWorker2_dataBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker2_dataBram_serverAdapterB_cnt$D_IN;
  wire captWorker2_dataBram_serverAdapterB_cnt$EN;

  // register captWorker2_dataBram_serverAdapterB_s1
  reg [1 : 0] captWorker2_dataBram_serverAdapterB_s1;
  wire [1 : 0] captWorker2_dataBram_serverAdapterB_s1$D_IN;
  wire captWorker2_dataBram_serverAdapterB_s1$EN;

  // register captWorker2_dataCount
  reg [31 : 0] captWorker2_dataCount;
  reg [31 : 0] captWorker2_dataCount$D_IN;
  wire captWorker2_dataCount$EN;

  // register captWorker2_isFirst
  reg captWorker2_isFirst;
  wire captWorker2_isFirst$D_IN, captWorker2_isFirst$EN;

  // register captWorker2_mesgLengthSoFar
  reg [13 : 0] captWorker2_mesgLengthSoFar;
  wire [13 : 0] captWorker2_mesgLengthSoFar$D_IN;
  wire captWorker2_mesgLengthSoFar$EN;

  // register captWorker2_metaBram_serverAdapterA_1_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterA_1_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterA_1_cnt$EN;

  // register captWorker2_metaBram_serverAdapterA_1_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterA_1_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterA_1_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterA_1_s1$EN;

  // register captWorker2_metaBram_serverAdapterA_2_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterA_2_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterA_2_cnt$EN;

  // register captWorker2_metaBram_serverAdapterA_2_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterA_2_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterA_2_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterA_2_s1$EN;

  // register captWorker2_metaBram_serverAdapterA_3_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterA_3_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterA_3_cnt$EN;

  // register captWorker2_metaBram_serverAdapterA_3_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterA_3_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterA_3_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterA_3_s1$EN;

  // register captWorker2_metaBram_serverAdapterA_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterA_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterA_cnt$EN;

  // register captWorker2_metaBram_serverAdapterA_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterA_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterA_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterA_s1$EN;

  // register captWorker2_metaBram_serverAdapterB_1_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterB_1_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterB_1_cnt$EN;

  // register captWorker2_metaBram_serverAdapterB_1_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterB_1_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterB_1_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterB_1_s1$EN;

  // register captWorker2_metaBram_serverAdapterB_2_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterB_2_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterB_2_cnt$EN;

  // register captWorker2_metaBram_serverAdapterB_2_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterB_2_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterB_2_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterB_2_s1$EN;

  // register captWorker2_metaBram_serverAdapterB_3_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterB_3_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterB_3_cnt$EN;

  // register captWorker2_metaBram_serverAdapterB_3_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterB_3_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterB_3_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterB_3_s1$EN;

  // register captWorker2_metaBram_serverAdapterB_cnt
  reg [2 : 0] captWorker2_metaBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker2_metaBram_serverAdapterB_cnt$D_IN;
  wire captWorker2_metaBram_serverAdapterB_cnt$EN;

  // register captWorker2_metaBram_serverAdapterB_s1
  reg [1 : 0] captWorker2_metaBram_serverAdapterB_s1;
  wire [1 : 0] captWorker2_metaBram_serverAdapterB_s1$D_IN;
  wire captWorker2_metaBram_serverAdapterB_s1$EN;

  // register captWorker2_metaCount
  reg [31 : 0] captWorker2_metaCount;
  reg [31 : 0] captWorker2_metaCount$D_IN;
  wire captWorker2_metaCount$EN;

  // register captWorker2_splitReadInFlight
  reg captWorker2_splitReadInFlight;
  wire captWorker2_splitReadInFlight$D_IN, captWorker2_splitReadInFlight$EN;

  // register captWorker2_wci_wslv_cEdge
  reg [2 : 0] captWorker2_wci_wslv_cEdge;
  wire [2 : 0] captWorker2_wci_wslv_cEdge$D_IN;
  wire captWorker2_wci_wslv_cEdge$EN;

  // register captWorker2_wci_wslv_cState
  reg [2 : 0] captWorker2_wci_wslv_cState;
  wire [2 : 0] captWorker2_wci_wslv_cState$D_IN;
  wire captWorker2_wci_wslv_cState$EN;

  // register captWorker2_wci_wslv_ctlAckReg
  reg captWorker2_wci_wslv_ctlAckReg;
  wire captWorker2_wci_wslv_ctlAckReg$D_IN, captWorker2_wci_wslv_ctlAckReg$EN;

  // register captWorker2_wci_wslv_ctlOpActive
  reg captWorker2_wci_wslv_ctlOpActive;
  wire captWorker2_wci_wslv_ctlOpActive$D_IN,
       captWorker2_wci_wslv_ctlOpActive$EN;

  // register captWorker2_wci_wslv_illegalEdge
  reg captWorker2_wci_wslv_illegalEdge;
  wire captWorker2_wci_wslv_illegalEdge$D_IN,
       captWorker2_wci_wslv_illegalEdge$EN;

  // register captWorker2_wci_wslv_isReset_isInReset
  reg captWorker2_wci_wslv_isReset_isInReset;
  wire captWorker2_wci_wslv_isReset_isInReset$D_IN,
       captWorker2_wci_wslv_isReset_isInReset$EN;

  // register captWorker2_wci_wslv_nState
  reg [2 : 0] captWorker2_wci_wslv_nState;
  reg [2 : 0] captWorker2_wci_wslv_nState$D_IN;
  wire captWorker2_wci_wslv_nState$EN;

  // register captWorker2_wci_wslv_reqF_countReg
  reg [1 : 0] captWorker2_wci_wslv_reqF_countReg;
  wire [1 : 0] captWorker2_wci_wslv_reqF_countReg$D_IN;
  wire captWorker2_wci_wslv_reqF_countReg$EN;

  // register captWorker2_wci_wslv_respF_c_r
  reg [1 : 0] captWorker2_wci_wslv_respF_c_r;
  wire [1 : 0] captWorker2_wci_wslv_respF_c_r$D_IN;
  wire captWorker2_wci_wslv_respF_c_r$EN;

  // register captWorker2_wci_wslv_respF_q_0
  reg [33 : 0] captWorker2_wci_wslv_respF_q_0;
  reg [33 : 0] captWorker2_wci_wslv_respF_q_0$D_IN;
  wire captWorker2_wci_wslv_respF_q_0$EN;

  // register captWorker2_wci_wslv_respF_q_1
  reg [33 : 0] captWorker2_wci_wslv_respF_q_1;
  reg [33 : 0] captWorker2_wci_wslv_respF_q_1$D_IN;
  wire captWorker2_wci_wslv_respF_q_1$EN;

  // register captWorker2_wci_wslv_sFlagReg
  reg captWorker2_wci_wslv_sFlagReg;
  wire captWorker2_wci_wslv_sFlagReg$D_IN, captWorker2_wci_wslv_sFlagReg$EN;

  // register captWorker2_wci_wslv_sThreadBusy_d
  reg captWorker2_wci_wslv_sThreadBusy_d;
  wire captWorker2_wci_wslv_sThreadBusy_d$D_IN,
       captWorker2_wci_wslv_sThreadBusy_d$EN;

  // register captWorker2_wsiS_burstKind
  reg [1 : 0] captWorker2_wsiS_burstKind;
  wire [1 : 0] captWorker2_wsiS_burstKind$D_IN;
  wire captWorker2_wsiS_burstKind$EN;

  // register captWorker2_wsiS_errorSticky
  reg captWorker2_wsiS_errorSticky;
  wire captWorker2_wsiS_errorSticky$D_IN, captWorker2_wsiS_errorSticky$EN;

  // register captWorker2_wsiS_iMesgCount
  reg [31 : 0] captWorker2_wsiS_iMesgCount;
  wire [31 : 0] captWorker2_wsiS_iMesgCount$D_IN;
  wire captWorker2_wsiS_iMesgCount$EN;

  // register captWorker2_wsiS_isReset_isInReset
  reg captWorker2_wsiS_isReset_isInReset;
  wire captWorker2_wsiS_isReset_isInReset$D_IN,
       captWorker2_wsiS_isReset_isInReset$EN;

  // register captWorker2_wsiS_mesgWordLength
  reg [11 : 0] captWorker2_wsiS_mesgWordLength;
  wire [11 : 0] captWorker2_wsiS_mesgWordLength$D_IN;
  wire captWorker2_wsiS_mesgWordLength$EN;

  // register captWorker2_wsiS_operateD
  reg captWorker2_wsiS_operateD;
  wire captWorker2_wsiS_operateD$D_IN, captWorker2_wsiS_operateD$EN;

  // register captWorker2_wsiS_pMesgCount
  reg [31 : 0] captWorker2_wsiS_pMesgCount;
  wire [31 : 0] captWorker2_wsiS_pMesgCount$D_IN;
  wire captWorker2_wsiS_pMesgCount$EN;

  // register captWorker2_wsiS_peerIsReady
  reg captWorker2_wsiS_peerIsReady;
  wire captWorker2_wsiS_peerIsReady$D_IN, captWorker2_wsiS_peerIsReady$EN;

  // register captWorker2_wsiS_reqFifo_countReg
  reg [1 : 0] captWorker2_wsiS_reqFifo_countReg;
  wire [1 : 0] captWorker2_wsiS_reqFifo_countReg$D_IN;
  wire captWorker2_wsiS_reqFifo_countReg$EN;

  // register captWorker2_wsiS_reqFifo_levelsValid
  reg captWorker2_wsiS_reqFifo_levelsValid;
  wire captWorker2_wsiS_reqFifo_levelsValid$D_IN,
       captWorker2_wsiS_reqFifo_levelsValid$EN;

  // register captWorker2_wsiS_statusR
  reg [7 : 0] captWorker2_wsiS_statusR;
  wire [7 : 0] captWorker2_wsiS_statusR$D_IN;
  wire captWorker2_wsiS_statusR$EN;

  // register captWorker2_wsiS_tBusyCount
  reg [31 : 0] captWorker2_wsiS_tBusyCount;
  wire [31 : 0] captWorker2_wsiS_tBusyCount$D_IN;
  wire captWorker2_wsiS_tBusyCount$EN;

  // register captWorker2_wsiS_trafficSticky
  reg captWorker2_wsiS_trafficSticky;
  wire captWorker2_wsiS_trafficSticky$D_IN, captWorker2_wsiS_trafficSticky$EN;

  // register captWorker2_wsiS_wordCount
  reg [11 : 0] captWorker2_wsiS_wordCount;
  wire [11 : 0] captWorker2_wsiS_wordCount$D_IN;
  wire captWorker2_wsiS_wordCount$EN;

  // register captWorker2_wtiS_isReset_isInReset
  reg captWorker2_wtiS_isReset_isInReset;
  wire captWorker2_wtiS_isReset_isInReset$D_IN,
       captWorker2_wtiS_isReset_isInReset$EN;

  // register captWorker2_wtiS_nowReq
  reg [66 : 0] captWorker2_wtiS_nowReq;
  wire [66 : 0] captWorker2_wtiS_nowReq$D_IN;
  wire captWorker2_wtiS_nowReq$EN;

  // register captWorker2_wtiS_operateD
  reg captWorker2_wtiS_operateD;
  wire captWorker2_wtiS_operateD$D_IN, captWorker2_wtiS_operateD$EN;

  // register wsimMonW3_observer_e_sThreadBusy_srcD
  reg wsimMonW3_observer_e_sThreadBusy_srcD;
  wire wsimMonW3_observer_e_sThreadBusy_srcD$D_IN,
       wsimMonW3_observer_e_sThreadBusy_srcD$EN;

  // register wsimMonW3_observer_mesgInFlight
  reg wsimMonW3_observer_mesgInFlight;
  wire wsimMonW3_observer_mesgInFlight$D_IN,
       wsimMonW3_observer_mesgInFlight$EN;

  // register wsimMonW3_observer_mesgLengthSoFar
  reg [13 : 0] wsimMonW3_observer_mesgLengthSoFar;
  wire [13 : 0] wsimMonW3_observer_mesgLengthSoFar$D_IN;
  wire wsimMonW3_observer_mesgLengthSoFar$EN;

  // register wsimMonW3_observer_r_mBurstLength
  reg [11 : 0] wsimMonW3_observer_r_mBurstLength;
  wire [11 : 0] wsimMonW3_observer_r_mBurstLength$D_IN;
  wire wsimMonW3_observer_r_mBurstLength$EN;

  // register wsimMonW3_observer_r_mBurstPrecise
  reg wsimMonW3_observer_r_mBurstPrecise;
  wire wsimMonW3_observer_r_mBurstPrecise$D_IN,
       wsimMonW3_observer_r_mBurstPrecise$EN;

  // register wsimMonW3_observer_r_mByteEn
  reg [3 : 0] wsimMonW3_observer_r_mByteEn;
  wire [3 : 0] wsimMonW3_observer_r_mByteEn$D_IN;
  wire wsimMonW3_observer_r_mByteEn$EN;

  // register wsimMonW3_observer_r_mCmd
  reg [2 : 0] wsimMonW3_observer_r_mCmd;
  wire [2 : 0] wsimMonW3_observer_r_mCmd$D_IN;
  wire wsimMonW3_observer_r_mCmd$EN;

  // register wsimMonW3_observer_r_mCmdD
  reg [2 : 0] wsimMonW3_observer_r_mCmdD;
  wire [2 : 0] wsimMonW3_observer_r_mCmdD$D_IN;
  wire wsimMonW3_observer_r_mCmdD$EN;

  // register wsimMonW3_observer_r_mData
  reg [31 : 0] wsimMonW3_observer_r_mData;
  wire [31 : 0] wsimMonW3_observer_r_mData$D_IN;
  wire wsimMonW3_observer_r_mData$EN;

  // register wsimMonW3_observer_r_mReqInfo
  reg [7 : 0] wsimMonW3_observer_r_mReqInfo;
  wire [7 : 0] wsimMonW3_observer_r_mReqInfo$D_IN;
  wire wsimMonW3_observer_r_mReqInfo$EN;

  // register wsimMonW3_observer_r_mReqLast
  reg wsimMonW3_observer_r_mReqLast;
  wire wsimMonW3_observer_r_mReqLast$D_IN, wsimMonW3_observer_r_mReqLast$EN;

  // register wsimMonW3_observer_r_mReset_n
  reg wsimMonW3_observer_r_mReset_n;
  wire wsimMonW3_observer_r_mReset_n$D_IN, wsimMonW3_observer_r_mReset_n$EN;

  // register wsimMonW3_observer_r_mResetnD
  reg wsimMonW3_observer_r_mResetnD;
  wire wsimMonW3_observer_r_mResetnD$D_IN, wsimMonW3_observer_r_mResetnD$EN;

  // register wsimMonW3_observer_r_sReset_n
  reg wsimMonW3_observer_r_sReset_n;
  wire wsimMonW3_observer_r_sReset_n$D_IN, wsimMonW3_observer_r_sReset_n$EN;

  // register wsimMonW3_observer_r_sResetnD
  reg wsimMonW3_observer_r_sResetnD;
  wire wsimMonW3_observer_r_sResetnD$D_IN, wsimMonW3_observer_r_sResetnD$EN;

  // register wsimMonW3_observer_r_sThreadBusy
  reg wsimMonW3_observer_r_sThreadBusy;
  wire wsimMonW3_observer_r_sThreadBusy$D_IN,
       wsimMonW3_observer_r_sThreadBusy$EN;

  // register wsimMonW3_pmsender_idx
  reg [2 : 0] wsimMonW3_pmsender_idx;
  wire [2 : 0] wsimMonW3_pmsender_idx$D_IN;
  wire wsimMonW3_pmsender_idx$EN;

  // register wsimMonW3_pmsender_isHead
  reg wsimMonW3_pmsender_isHead;
  wire wsimMonW3_pmsender_isHead$D_IN, wsimMonW3_pmsender_isHead$EN;

  // register wsimMonW3_pmsender_srcTag
  reg [7 : 0] wsimMonW3_pmsender_srcTag;
  wire [7 : 0] wsimMonW3_pmsender_srcTag$D_IN;
  wire wsimMonW3_pmsender_srcTag$EN;

  // register wsimMonW3_pmsender_wsiM_burstKind
  reg [1 : 0] wsimMonW3_pmsender_wsiM_burstKind;
  wire [1 : 0] wsimMonW3_pmsender_wsiM_burstKind$D_IN;
  wire wsimMonW3_pmsender_wsiM_burstKind$EN;

  // register wsimMonW3_pmsender_wsiM_errorSticky
  reg wsimMonW3_pmsender_wsiM_errorSticky;
  wire wsimMonW3_pmsender_wsiM_errorSticky$D_IN,
       wsimMonW3_pmsender_wsiM_errorSticky$EN;

  // register wsimMonW3_pmsender_wsiM_iMesgCount
  reg [31 : 0] wsimMonW3_pmsender_wsiM_iMesgCount;
  wire [31 : 0] wsimMonW3_pmsender_wsiM_iMesgCount$D_IN;
  wire wsimMonW3_pmsender_wsiM_iMesgCount$EN;

  // register wsimMonW3_pmsender_wsiM_isReset_isInReset
  reg wsimMonW3_pmsender_wsiM_isReset_isInReset;
  wire wsimMonW3_pmsender_wsiM_isReset_isInReset$D_IN,
       wsimMonW3_pmsender_wsiM_isReset_isInReset$EN;

  // register wsimMonW3_pmsender_wsiM_operateD
  reg wsimMonW3_pmsender_wsiM_operateD;
  wire wsimMonW3_pmsender_wsiM_operateD$D_IN,
       wsimMonW3_pmsender_wsiM_operateD$EN;

  // register wsimMonW3_pmsender_wsiM_pMesgCount
  reg [31 : 0] wsimMonW3_pmsender_wsiM_pMesgCount;
  wire [31 : 0] wsimMonW3_pmsender_wsiM_pMesgCount$D_IN;
  wire wsimMonW3_pmsender_wsiM_pMesgCount$EN;

  // register wsimMonW3_pmsender_wsiM_peerIsReady
  reg wsimMonW3_pmsender_wsiM_peerIsReady;
  wire wsimMonW3_pmsender_wsiM_peerIsReady$D_IN,
       wsimMonW3_pmsender_wsiM_peerIsReady$EN;

  // register wsimMonW3_pmsender_wsiM_reqFifo_c_r
  reg [1 : 0] wsimMonW3_pmsender_wsiM_reqFifo_c_r;
  wire [1 : 0] wsimMonW3_pmsender_wsiM_reqFifo_c_r$D_IN;
  wire wsimMonW3_pmsender_wsiM_reqFifo_c_r$EN;

  // register wsimMonW3_pmsender_wsiM_reqFifo_q_0
  reg [60 : 0] wsimMonW3_pmsender_wsiM_reqFifo_q_0;
  reg [60 : 0] wsimMonW3_pmsender_wsiM_reqFifo_q_0$D_IN;
  wire wsimMonW3_pmsender_wsiM_reqFifo_q_0$EN;

  // register wsimMonW3_pmsender_wsiM_reqFifo_q_1
  reg [60 : 0] wsimMonW3_pmsender_wsiM_reqFifo_q_1;
  reg [60 : 0] wsimMonW3_pmsender_wsiM_reqFifo_q_1$D_IN;
  wire wsimMonW3_pmsender_wsiM_reqFifo_q_1$EN;

  // register wsimMonW3_pmsender_wsiM_sThreadBusy_d
  reg wsimMonW3_pmsender_wsiM_sThreadBusy_d;
  wire wsimMonW3_pmsender_wsiM_sThreadBusy_d$D_IN,
       wsimMonW3_pmsender_wsiM_sThreadBusy_d$EN;

  // register wsimMonW3_pmsender_wsiM_statusR
  reg [7 : 0] wsimMonW3_pmsender_wsiM_statusR;
  wire [7 : 0] wsimMonW3_pmsender_wsiM_statusR$D_IN;
  wire wsimMonW3_pmsender_wsiM_statusR$EN;

  // register wsimMonW3_pmsender_wsiM_tBusyCount
  reg [31 : 0] wsimMonW3_pmsender_wsiM_tBusyCount;
  wire [31 : 0] wsimMonW3_pmsender_wsiM_tBusyCount$D_IN;
  wire wsimMonW3_pmsender_wsiM_tBusyCount$EN;

  // register wsimMonW3_pmsender_wsiM_trafficSticky
  reg wsimMonW3_pmsender_wsiM_trafficSticky;
  wire wsimMonW3_pmsender_wsiM_trafficSticky$D_IN,
       wsimMonW3_pmsender_wsiM_trafficSticky$EN;

  // register wsisMonW3_observer_e_sThreadBusy_srcD
  reg wsisMonW3_observer_e_sThreadBusy_srcD;
  wire wsisMonW3_observer_e_sThreadBusy_srcD$D_IN,
       wsisMonW3_observer_e_sThreadBusy_srcD$EN;

  // register wsisMonW3_observer_mesgInFlight
  reg wsisMonW3_observer_mesgInFlight;
  wire wsisMonW3_observer_mesgInFlight$D_IN,
       wsisMonW3_observer_mesgInFlight$EN;

  // register wsisMonW3_observer_mesgLengthSoFar
  reg [13 : 0] wsisMonW3_observer_mesgLengthSoFar;
  wire [13 : 0] wsisMonW3_observer_mesgLengthSoFar$D_IN;
  wire wsisMonW3_observer_mesgLengthSoFar$EN;

  // register wsisMonW3_observer_r_mBurstLength
  reg [11 : 0] wsisMonW3_observer_r_mBurstLength;
  wire [11 : 0] wsisMonW3_observer_r_mBurstLength$D_IN;
  wire wsisMonW3_observer_r_mBurstLength$EN;

  // register wsisMonW3_observer_r_mBurstPrecise
  reg wsisMonW3_observer_r_mBurstPrecise;
  wire wsisMonW3_observer_r_mBurstPrecise$D_IN,
       wsisMonW3_observer_r_mBurstPrecise$EN;

  // register wsisMonW3_observer_r_mByteEn
  reg [3 : 0] wsisMonW3_observer_r_mByteEn;
  wire [3 : 0] wsisMonW3_observer_r_mByteEn$D_IN;
  wire wsisMonW3_observer_r_mByteEn$EN;

  // register wsisMonW3_observer_r_mCmd
  reg [2 : 0] wsisMonW3_observer_r_mCmd;
  wire [2 : 0] wsisMonW3_observer_r_mCmd$D_IN;
  wire wsisMonW3_observer_r_mCmd$EN;

  // register wsisMonW3_observer_r_mCmdD
  reg [2 : 0] wsisMonW3_observer_r_mCmdD;
  wire [2 : 0] wsisMonW3_observer_r_mCmdD$D_IN;
  wire wsisMonW3_observer_r_mCmdD$EN;

  // register wsisMonW3_observer_r_mData
  reg [31 : 0] wsisMonW3_observer_r_mData;
  wire [31 : 0] wsisMonW3_observer_r_mData$D_IN;
  wire wsisMonW3_observer_r_mData$EN;

  // register wsisMonW3_observer_r_mReqInfo
  reg [7 : 0] wsisMonW3_observer_r_mReqInfo;
  wire [7 : 0] wsisMonW3_observer_r_mReqInfo$D_IN;
  wire wsisMonW3_observer_r_mReqInfo$EN;

  // register wsisMonW3_observer_r_mReqLast
  reg wsisMonW3_observer_r_mReqLast;
  wire wsisMonW3_observer_r_mReqLast$D_IN, wsisMonW3_observer_r_mReqLast$EN;

  // register wsisMonW3_observer_r_mReset_n
  reg wsisMonW3_observer_r_mReset_n;
  wire wsisMonW3_observer_r_mReset_n$D_IN, wsisMonW3_observer_r_mReset_n$EN;

  // register wsisMonW3_observer_r_mResetnD
  reg wsisMonW3_observer_r_mResetnD;
  wire wsisMonW3_observer_r_mResetnD$D_IN, wsisMonW3_observer_r_mResetnD$EN;

  // register wsisMonW3_observer_r_sReset_n
  reg wsisMonW3_observer_r_sReset_n;
  wire wsisMonW3_observer_r_sReset_n$D_IN, wsisMonW3_observer_r_sReset_n$EN;

  // register wsisMonW3_observer_r_sResetnD
  reg wsisMonW3_observer_r_sResetnD;
  wire wsisMonW3_observer_r_sResetnD$D_IN, wsisMonW3_observer_r_sResetnD$EN;

  // register wsisMonW3_observer_r_sThreadBusy
  reg wsisMonW3_observer_r_sThreadBusy;
  wire wsisMonW3_observer_r_sThreadBusy$D_IN,
       wsisMonW3_observer_r_sThreadBusy$EN;

  // register wsisMonW3_pmsender_idx
  reg [2 : 0] wsisMonW3_pmsender_idx;
  wire [2 : 0] wsisMonW3_pmsender_idx$D_IN;
  wire wsisMonW3_pmsender_idx$EN;

  // register wsisMonW3_pmsender_isHead
  reg wsisMonW3_pmsender_isHead;
  wire wsisMonW3_pmsender_isHead$D_IN, wsisMonW3_pmsender_isHead$EN;

  // register wsisMonW3_pmsender_srcTag
  reg [7 : 0] wsisMonW3_pmsender_srcTag;
  wire [7 : 0] wsisMonW3_pmsender_srcTag$D_IN;
  wire wsisMonW3_pmsender_srcTag$EN;

  // register wsisMonW3_pmsender_wsiM_burstKind
  reg [1 : 0] wsisMonW3_pmsender_wsiM_burstKind;
  wire [1 : 0] wsisMonW3_pmsender_wsiM_burstKind$D_IN;
  wire wsisMonW3_pmsender_wsiM_burstKind$EN;

  // register wsisMonW3_pmsender_wsiM_errorSticky
  reg wsisMonW3_pmsender_wsiM_errorSticky;
  wire wsisMonW3_pmsender_wsiM_errorSticky$D_IN,
       wsisMonW3_pmsender_wsiM_errorSticky$EN;

  // register wsisMonW3_pmsender_wsiM_iMesgCount
  reg [31 : 0] wsisMonW3_pmsender_wsiM_iMesgCount;
  wire [31 : 0] wsisMonW3_pmsender_wsiM_iMesgCount$D_IN;
  wire wsisMonW3_pmsender_wsiM_iMesgCount$EN;

  // register wsisMonW3_pmsender_wsiM_isReset_isInReset
  reg wsisMonW3_pmsender_wsiM_isReset_isInReset;
  wire wsisMonW3_pmsender_wsiM_isReset_isInReset$D_IN,
       wsisMonW3_pmsender_wsiM_isReset_isInReset$EN;

  // register wsisMonW3_pmsender_wsiM_operateD
  reg wsisMonW3_pmsender_wsiM_operateD;
  wire wsisMonW3_pmsender_wsiM_operateD$D_IN,
       wsisMonW3_pmsender_wsiM_operateD$EN;

  // register wsisMonW3_pmsender_wsiM_pMesgCount
  reg [31 : 0] wsisMonW3_pmsender_wsiM_pMesgCount;
  wire [31 : 0] wsisMonW3_pmsender_wsiM_pMesgCount$D_IN;
  wire wsisMonW3_pmsender_wsiM_pMesgCount$EN;

  // register wsisMonW3_pmsender_wsiM_peerIsReady
  reg wsisMonW3_pmsender_wsiM_peerIsReady;
  wire wsisMonW3_pmsender_wsiM_peerIsReady$D_IN,
       wsisMonW3_pmsender_wsiM_peerIsReady$EN;

  // register wsisMonW3_pmsender_wsiM_reqFifo_c_r
  reg [1 : 0] wsisMonW3_pmsender_wsiM_reqFifo_c_r;
  wire [1 : 0] wsisMonW3_pmsender_wsiM_reqFifo_c_r$D_IN;
  wire wsisMonW3_pmsender_wsiM_reqFifo_c_r$EN;

  // register wsisMonW3_pmsender_wsiM_reqFifo_q_0
  reg [60 : 0] wsisMonW3_pmsender_wsiM_reqFifo_q_0;
  reg [60 : 0] wsisMonW3_pmsender_wsiM_reqFifo_q_0$D_IN;
  wire wsisMonW3_pmsender_wsiM_reqFifo_q_0$EN;

  // register wsisMonW3_pmsender_wsiM_reqFifo_q_1
  reg [60 : 0] wsisMonW3_pmsender_wsiM_reqFifo_q_1;
  reg [60 : 0] wsisMonW3_pmsender_wsiM_reqFifo_q_1$D_IN;
  wire wsisMonW3_pmsender_wsiM_reqFifo_q_1$EN;

  // register wsisMonW3_pmsender_wsiM_sThreadBusy_d
  reg wsisMonW3_pmsender_wsiM_sThreadBusy_d;
  wire wsisMonW3_pmsender_wsiM_sThreadBusy_d$D_IN,
       wsisMonW3_pmsender_wsiM_sThreadBusy_d$EN;

  // register wsisMonW3_pmsender_wsiM_statusR
  reg [7 : 0] wsisMonW3_pmsender_wsiM_statusR;
  wire [7 : 0] wsisMonW3_pmsender_wsiM_statusR$D_IN;
  wire wsisMonW3_pmsender_wsiM_statusR$EN;

  // register wsisMonW3_pmsender_wsiM_tBusyCount
  reg [31 : 0] wsisMonW3_pmsender_wsiM_tBusyCount;
  wire [31 : 0] wsisMonW3_pmsender_wsiM_tBusyCount$D_IN;
  wire wsisMonW3_pmsender_wsiM_tBusyCount$EN;

  // register wsisMonW3_pmsender_wsiM_trafficSticky
  reg wsisMonW3_pmsender_wsiM_trafficSticky;
  wire wsisMonW3_pmsender_wsiM_trafficSticky$D_IN,
       wsisMonW3_pmsender_wsiM_trafficSticky$EN;

  // ports of submodule appW1
  wire [127 : 0] appW1$wmemiM0_MData, appW1$wmemiM0_SData;
  wire [35 : 0] appW1$wmemiM0_MAddr;
  wire [31 : 0] appW1$wciS0_MAddr, appW1$wciS0_MData, appW1$wciS0_SData;
  wire [15 : 0] appW1$wmemiM0_MDataByteEn;
  wire [11 : 0] appW1$wmemiM0_MBurstLength;
  wire [3 : 0] appW1$wciS0_MByteEn;
  wire [2 : 0] appW1$wciS0_MCmd, appW1$wmemiM0_MCmd;
  wire [1 : 0] appW1$wciS0_MFlag,
	       appW1$wciS0_SFlag,
	       appW1$wciS0_SResp,
	       appW1$wmemiM0_SResp;
  wire appW1$wciS0_MAddrSpace,
       appW1$wciS0_SThreadBusy,
       appW1$wmemiM0_MDataLast,
       appW1$wmemiM0_MDataValid,
       appW1$wmemiM0_MReqLast,
       appW1$wmemiM0_MReset_n,
       appW1$wmemiM0_SCmdAccept,
       appW1$wmemiM0_SDataAccept,
       appW1$wmemiM0_SRespLast;

  // ports of submodule appW2
  wire [31 : 0] appW2$wciS0_MAddr,
		appW2$wciS0_MData,
		appW2$wciS0_SData,
		appW2$wmiM0_MData,
		appW2$wmiM0_MFlag,
		appW2$wmiM0_SData,
		appW2$wmiM0_SFlag,
		appW2$wsiM0_MData,
		appW2$wsiS0_MData;
  wire [13 : 0] appW2$wmiM0_MAddr;
  wire [11 : 0] appW2$wmiM0_MBurstLength,
		appW2$wsiM0_MBurstLength,
		appW2$wsiS0_MBurstLength;
  wire [7 : 0] appW2$wsiM0_MReqInfo, appW2$wsiS0_MReqInfo;
  wire [3 : 0] appW2$wciS0_MByteEn,
	       appW2$wmiM0_MDataByteEn,
	       appW2$wsiM0_MByteEn,
	       appW2$wsiS0_MByteEn;
  wire [2 : 0] appW2$wciS0_MCmd,
	       appW2$wmiM0_MCmd,
	       appW2$wsiM0_MCmd,
	       appW2$wsiS0_MCmd;
  wire [1 : 0] appW2$wciS0_MFlag,
	       appW2$wciS0_SFlag,
	       appW2$wciS0_SResp,
	       appW2$wmiM0_SResp;
  wire appW2$wciS0_MAddrSpace,
       appW2$wciS0_SThreadBusy,
       appW2$wmiM0_MAddrSpace,
       appW2$wmiM0_MDataLast,
       appW2$wmiM0_MDataValid,
       appW2$wmiM0_MReqInfo,
       appW2$wmiM0_MReqLast,
       appW2$wmiM0_MReset_n,
       appW2$wmiM0_SDataThreadBusy,
       appW2$wmiM0_SReset_n,
       appW2$wmiM0_SRespLast,
       appW2$wmiM0_SThreadBusy,
       appW2$wsiM0_MBurstPrecise,
       appW2$wsiM0_MReqLast,
       appW2$wsiM0_MReset_n,
       appW2$wsiM0_SReset_n,
       appW2$wsiM0_SThreadBusy,
       appW2$wsiS0_MBurstPrecise,
       appW2$wsiS0_MReqLast,
       appW2$wsiS0_MReset_n,
       appW2$wsiS0_SReset_n,
       appW2$wsiS0_SThreadBusy;

  // ports of submodule appW3
  wire [31 : 0] appW3$wciS0_MAddr,
		appW3$wciS0_MData,
		appW3$wciS0_SData,
		appW3$wsiM0_MData,
		appW3$wsiS0_MData;
  wire [11 : 0] appW3$wsiM0_MBurstLength, appW3$wsiS0_MBurstLength;
  wire [7 : 0] appW3$wsiM0_MReqInfo, appW3$wsiS0_MReqInfo;
  wire [3 : 0] appW3$wciS0_MByteEn, appW3$wsiM0_MByteEn, appW3$wsiS0_MByteEn;
  wire [2 : 0] appW3$wciS0_MCmd, appW3$wsiM0_MCmd, appW3$wsiS0_MCmd;
  wire [1 : 0] appW3$wciS0_MFlag, appW3$wciS0_SFlag, appW3$wciS0_SResp;
  wire appW3$wciS0_MAddrSpace,
       appW3$wciS0_SThreadBusy,
       appW3$wsiM0_MBurstPrecise,
       appW3$wsiM0_MReqLast,
       appW3$wsiM0_MReset_n,
       appW3$wsiM0_SReset_n,
       appW3$wsiM0_SThreadBusy,
       appW3$wsiS0_MBurstPrecise,
       appW3$wsiS0_MReqLast,
       appW3$wsiS0_MReset_n,
       appW3$wsiS0_SReset_n,
       appW3$wsiS0_SThreadBusy;

  // ports of submodule appW4
  wire [31 : 0] appW4$wciS0_MAddr,
		appW4$wciS0_MData,
		appW4$wciS0_SData,
		appW4$wmiM0_MData,
		appW4$wmiM0_MFlag,
		appW4$wmiM0_SData,
		appW4$wmiM0_SFlag,
		appW4$wsiM0_MData,
		appW4$wsiS0_MData;
  wire [13 : 0] appW4$wmiM0_MAddr;
  wire [11 : 0] appW4$wmiM0_MBurstLength,
		appW4$wsiM0_MBurstLength,
		appW4$wsiS0_MBurstLength;
  wire [7 : 0] appW4$wsiM0_MReqInfo, appW4$wsiS0_MReqInfo;
  wire [3 : 0] appW4$wciS0_MByteEn,
	       appW4$wmiM0_MDataByteEn,
	       appW4$wsiM0_MByteEn,
	       appW4$wsiS0_MByteEn;
  wire [2 : 0] appW4$wciS0_MCmd,
	       appW4$wmiM0_MCmd,
	       appW4$wsiM0_MCmd,
	       appW4$wsiS0_MCmd;
  wire [1 : 0] appW4$wciS0_MFlag,
	       appW4$wciS0_SFlag,
	       appW4$wciS0_SResp,
	       appW4$wmiM0_SResp;
  wire appW4$wciS0_MAddrSpace,
       appW4$wciS0_SThreadBusy,
       appW4$wmiM0_MAddrSpace,
       appW4$wmiM0_MDataLast,
       appW4$wmiM0_MDataValid,
       appW4$wmiM0_MReqInfo,
       appW4$wmiM0_MReqLast,
       appW4$wmiM0_MReset_n,
       appW4$wmiM0_SDataThreadBusy,
       appW4$wmiM0_SReset_n,
       appW4$wmiM0_SRespLast,
       appW4$wmiM0_SThreadBusy,
       appW4$wsiM0_MBurstPrecise,
       appW4$wsiM0_MReqLast,
       appW4$wsiM0_MReset_n,
       appW4$wsiM0_SReset_n,
       appW4$wsiM0_SThreadBusy,
       appW4$wsiS0_MBurstPrecise,
       appW4$wsiS0_MReqLast,
       appW4$wsiS0_MReset_n,
       appW4$wsiS0_SReset_n,
       appW4$wsiS0_SThreadBusy;

  // ports of submodule captWorker0_dataBram_memory
  wire [31 : 0] captWorker0_dataBram_memory$DIA,
		captWorker0_dataBram_memory$DIB,
		captWorker0_dataBram_memory$DOA,
		captWorker0_dataBram_memory$DOB;
  wire [9 : 0] captWorker0_dataBram_memory$ADDRA,
	       captWorker0_dataBram_memory$ADDRB;
  wire captWorker0_dataBram_memory$ENA,
       captWorker0_dataBram_memory$ENB,
       captWorker0_dataBram_memory$WEA,
       captWorker0_dataBram_memory$WEB;

  // ports of submodule captWorker0_dataBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker0_dataBram_serverAdapterA_outDataCore$D_IN,
		captWorker0_dataBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker0_dataBram_serverAdapterA_outDataCore$CLR,
       captWorker0_dataBram_serverAdapterA_outDataCore$DEQ,
       captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker0_dataBram_serverAdapterA_outDataCore$ENQ,
       captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker0_dataBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker0_dataBram_serverAdapterB_outDataCore$D_IN,
		captWorker0_dataBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker0_dataBram_serverAdapterB_outDataCore$CLR,
       captWorker0_dataBram_serverAdapterB_outDataCore$DEQ,
       captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker0_dataBram_serverAdapterB_outDataCore$ENQ,
       captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_memory
  wire [31 : 0] captWorker0_metaBram_memory$DIA,
		captWorker0_metaBram_memory$DIB,
		captWorker0_metaBram_memory$DOA,
		captWorker0_metaBram_memory$DOB;
  wire [9 : 0] captWorker0_metaBram_memory$ADDRA,
	       captWorker0_metaBram_memory$ADDRB;
  wire captWorker0_metaBram_memory$ENA,
       captWorker0_metaBram_memory$ENB,
       captWorker0_metaBram_memory$WEA,
       captWorker0_metaBram_memory$WEB;

  // ports of submodule captWorker0_metaBram_memory_1
  wire [31 : 0] captWorker0_metaBram_memory_1$DIA,
		captWorker0_metaBram_memory_1$DIB,
		captWorker0_metaBram_memory_1$DOA,
		captWorker0_metaBram_memory_1$DOB;
  wire [9 : 0] captWorker0_metaBram_memory_1$ADDRA,
	       captWorker0_metaBram_memory_1$ADDRB;
  wire captWorker0_metaBram_memory_1$ENA,
       captWorker0_metaBram_memory_1$ENB,
       captWorker0_metaBram_memory_1$WEA,
       captWorker0_metaBram_memory_1$WEB;

  // ports of submodule captWorker0_metaBram_memory_2
  wire [31 : 0] captWorker0_metaBram_memory_2$DIA,
		captWorker0_metaBram_memory_2$DIB,
		captWorker0_metaBram_memory_2$DOA,
		captWorker0_metaBram_memory_2$DOB;
  wire [9 : 0] captWorker0_metaBram_memory_2$ADDRA,
	       captWorker0_metaBram_memory_2$ADDRB;
  wire captWorker0_metaBram_memory_2$ENA,
       captWorker0_metaBram_memory_2$ENB,
       captWorker0_metaBram_memory_2$WEA,
       captWorker0_metaBram_memory_2$WEB;

  // ports of submodule captWorker0_metaBram_memory_3
  wire [31 : 0] captWorker0_metaBram_memory_3$DIA,
		captWorker0_metaBram_memory_3$DIB,
		captWorker0_metaBram_memory_3$DOA,
		captWorker0_metaBram_memory_3$DOB;
  wire [9 : 0] captWorker0_metaBram_memory_3$ADDRA,
	       captWorker0_metaBram_memory_3$ADDRB;
  wire captWorker0_metaBram_memory_3$ENA,
       captWorker0_metaBram_memory_3$ENB,
       captWorker0_metaBram_memory_3$WEA,
       captWorker0_metaBram_memory_3$WEB;

  // ports of submodule captWorker0_metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_1_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_1_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_2_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_2_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_3_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_3_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_1_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_1_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_2_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_2_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_3_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_3_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker0_splaF
  wire [2 : 0] captWorker0_splaF$D_IN, captWorker0_splaF$D_OUT;
  wire captWorker0_splaF$CLR,
       captWorker0_splaF$DEQ,
       captWorker0_splaF$EMPTY_N,
       captWorker0_splaF$ENQ,
       captWorker0_splaF$FULL_N;

  // ports of submodule captWorker0_wci_wslv_reqF
  wire [71 : 0] captWorker0_wci_wslv_reqF$D_IN,
		captWorker0_wci_wslv_reqF$D_OUT;
  wire captWorker0_wci_wslv_reqF$CLR,
       captWorker0_wci_wslv_reqF$DEQ,
       captWorker0_wci_wslv_reqF$EMPTY_N,
       captWorker0_wci_wslv_reqF$ENQ;

  // ports of submodule captWorker0_wsiS_reqFifo
  wire [60 : 0] captWorker0_wsiS_reqFifo$D_IN, captWorker0_wsiS_reqFifo$D_OUT;
  wire captWorker0_wsiS_reqFifo$CLR,
       captWorker0_wsiS_reqFifo$DEQ,
       captWorker0_wsiS_reqFifo$EMPTY_N,
       captWorker0_wsiS_reqFifo$ENQ,
       captWorker0_wsiS_reqFifo$FULL_N;

  // ports of submodule captWorker1_dataBram_memory
  wire [31 : 0] captWorker1_dataBram_memory$DIA,
		captWorker1_dataBram_memory$DIB,
		captWorker1_dataBram_memory$DOA,
		captWorker1_dataBram_memory$DOB;
  wire [9 : 0] captWorker1_dataBram_memory$ADDRA,
	       captWorker1_dataBram_memory$ADDRB;
  wire captWorker1_dataBram_memory$ENA,
       captWorker1_dataBram_memory$ENB,
       captWorker1_dataBram_memory$WEA,
       captWorker1_dataBram_memory$WEB;

  // ports of submodule captWorker1_dataBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker1_dataBram_serverAdapterA_outDataCore$D_IN,
		captWorker1_dataBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker1_dataBram_serverAdapterA_outDataCore$CLR,
       captWorker1_dataBram_serverAdapterA_outDataCore$DEQ,
       captWorker1_dataBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker1_dataBram_serverAdapterA_outDataCore$ENQ,
       captWorker1_dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker1_dataBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker1_dataBram_serverAdapterB_outDataCore$D_IN,
		captWorker1_dataBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker1_dataBram_serverAdapterB_outDataCore$CLR,
       captWorker1_dataBram_serverAdapterB_outDataCore$DEQ,
       captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker1_dataBram_serverAdapterB_outDataCore$ENQ,
       captWorker1_dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_memory
  wire [31 : 0] captWorker1_metaBram_memory$DIA,
		captWorker1_metaBram_memory$DIB,
		captWorker1_metaBram_memory$DOA,
		captWorker1_metaBram_memory$DOB;
  wire [9 : 0] captWorker1_metaBram_memory$ADDRA,
	       captWorker1_metaBram_memory$ADDRB;
  wire captWorker1_metaBram_memory$ENA,
       captWorker1_metaBram_memory$ENB,
       captWorker1_metaBram_memory$WEA,
       captWorker1_metaBram_memory$WEB;

  // ports of submodule captWorker1_metaBram_memory_1
  wire [31 : 0] captWorker1_metaBram_memory_1$DIA,
		captWorker1_metaBram_memory_1$DIB,
		captWorker1_metaBram_memory_1$DOA,
		captWorker1_metaBram_memory_1$DOB;
  wire [9 : 0] captWorker1_metaBram_memory_1$ADDRA,
	       captWorker1_metaBram_memory_1$ADDRB;
  wire captWorker1_metaBram_memory_1$ENA,
       captWorker1_metaBram_memory_1$ENB,
       captWorker1_metaBram_memory_1$WEA,
       captWorker1_metaBram_memory_1$WEB;

  // ports of submodule captWorker1_metaBram_memory_2
  wire [31 : 0] captWorker1_metaBram_memory_2$DIA,
		captWorker1_metaBram_memory_2$DIB,
		captWorker1_metaBram_memory_2$DOA,
		captWorker1_metaBram_memory_2$DOB;
  wire [9 : 0] captWorker1_metaBram_memory_2$ADDRA,
	       captWorker1_metaBram_memory_2$ADDRB;
  wire captWorker1_metaBram_memory_2$ENA,
       captWorker1_metaBram_memory_2$ENB,
       captWorker1_metaBram_memory_2$WEA,
       captWorker1_metaBram_memory_2$WEB;

  // ports of submodule captWorker1_metaBram_memory_3
  wire [31 : 0] captWorker1_metaBram_memory_3$DIA,
		captWorker1_metaBram_memory_3$DIB,
		captWorker1_metaBram_memory_3$DOA,
		captWorker1_metaBram_memory_3$DOB;
  wire [9 : 0] captWorker1_metaBram_memory_3$ADDRA,
	       captWorker1_metaBram_memory_3$ADDRB;
  wire captWorker1_metaBram_memory_3$ENA,
       captWorker1_metaBram_memory_3$ENB,
       captWorker1_metaBram_memory_3$WEA,
       captWorker1_metaBram_memory_3$WEB;

  // ports of submodule captWorker1_metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterA_1_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterA_1_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterA_1_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterA_1_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterA_2_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterA_2_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterA_2_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterA_2_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterA_3_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterA_3_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterA_3_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterA_3_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterA_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterA_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterA_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterA_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterB_1_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterB_1_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterB_1_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterB_1_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterB_2_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterB_2_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterB_2_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterB_2_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterB_3_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterB_3_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterB_3_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterB_3_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule captWorker1_metaBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker1_metaBram_serverAdapterB_outDataCore$D_IN,
		captWorker1_metaBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker1_metaBram_serverAdapterB_outDataCore$CLR,
       captWorker1_metaBram_serverAdapterB_outDataCore$DEQ,
       captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker1_metaBram_serverAdapterB_outDataCore$ENQ,
       captWorker1_metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker1_splaF
  wire [2 : 0] captWorker1_splaF$D_IN, captWorker1_splaF$D_OUT;
  wire captWorker1_splaF$CLR,
       captWorker1_splaF$DEQ,
       captWorker1_splaF$EMPTY_N,
       captWorker1_splaF$ENQ,
       captWorker1_splaF$FULL_N;

  // ports of submodule captWorker1_wci_wslv_reqF
  wire [71 : 0] captWorker1_wci_wslv_reqF$D_IN,
		captWorker1_wci_wslv_reqF$D_OUT;
  wire captWorker1_wci_wslv_reqF$CLR,
       captWorker1_wci_wslv_reqF$DEQ,
       captWorker1_wci_wslv_reqF$EMPTY_N,
       captWorker1_wci_wslv_reqF$ENQ;

  // ports of submodule captWorker1_wsiS_reqFifo
  wire [60 : 0] captWorker1_wsiS_reqFifo$D_IN, captWorker1_wsiS_reqFifo$D_OUT;
  wire captWorker1_wsiS_reqFifo$CLR,
       captWorker1_wsiS_reqFifo$DEQ,
       captWorker1_wsiS_reqFifo$EMPTY_N,
       captWorker1_wsiS_reqFifo$ENQ,
       captWorker1_wsiS_reqFifo$FULL_N;

  // ports of submodule captWorker2_dataBram_memory
  wire [31 : 0] captWorker2_dataBram_memory$DIA,
		captWorker2_dataBram_memory$DIB,
		captWorker2_dataBram_memory$DOA,
		captWorker2_dataBram_memory$DOB;
  wire [9 : 0] captWorker2_dataBram_memory$ADDRA,
	       captWorker2_dataBram_memory$ADDRB;
  wire captWorker2_dataBram_memory$ENA,
       captWorker2_dataBram_memory$ENB,
       captWorker2_dataBram_memory$WEA,
       captWorker2_dataBram_memory$WEB;

  // ports of submodule captWorker2_dataBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker2_dataBram_serverAdapterA_outDataCore$D_IN,
		captWorker2_dataBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker2_dataBram_serverAdapterA_outDataCore$CLR,
       captWorker2_dataBram_serverAdapterA_outDataCore$DEQ,
       captWorker2_dataBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker2_dataBram_serverAdapterA_outDataCore$ENQ,
       captWorker2_dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker2_dataBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker2_dataBram_serverAdapterB_outDataCore$D_IN,
		captWorker2_dataBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker2_dataBram_serverAdapterB_outDataCore$CLR,
       captWorker2_dataBram_serverAdapterB_outDataCore$DEQ,
       captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker2_dataBram_serverAdapterB_outDataCore$ENQ,
       captWorker2_dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_memory
  wire [31 : 0] captWorker2_metaBram_memory$DIA,
		captWorker2_metaBram_memory$DIB,
		captWorker2_metaBram_memory$DOA,
		captWorker2_metaBram_memory$DOB;
  wire [9 : 0] captWorker2_metaBram_memory$ADDRA,
	       captWorker2_metaBram_memory$ADDRB;
  wire captWorker2_metaBram_memory$ENA,
       captWorker2_metaBram_memory$ENB,
       captWorker2_metaBram_memory$WEA,
       captWorker2_metaBram_memory$WEB;

  // ports of submodule captWorker2_metaBram_memory_1
  wire [31 : 0] captWorker2_metaBram_memory_1$DIA,
		captWorker2_metaBram_memory_1$DIB,
		captWorker2_metaBram_memory_1$DOA,
		captWorker2_metaBram_memory_1$DOB;
  wire [9 : 0] captWorker2_metaBram_memory_1$ADDRA,
	       captWorker2_metaBram_memory_1$ADDRB;
  wire captWorker2_metaBram_memory_1$ENA,
       captWorker2_metaBram_memory_1$ENB,
       captWorker2_metaBram_memory_1$WEA,
       captWorker2_metaBram_memory_1$WEB;

  // ports of submodule captWorker2_metaBram_memory_2
  wire [31 : 0] captWorker2_metaBram_memory_2$DIA,
		captWorker2_metaBram_memory_2$DIB,
		captWorker2_metaBram_memory_2$DOA,
		captWorker2_metaBram_memory_2$DOB;
  wire [9 : 0] captWorker2_metaBram_memory_2$ADDRA,
	       captWorker2_metaBram_memory_2$ADDRB;
  wire captWorker2_metaBram_memory_2$ENA,
       captWorker2_metaBram_memory_2$ENB,
       captWorker2_metaBram_memory_2$WEA,
       captWorker2_metaBram_memory_2$WEB;

  // ports of submodule captWorker2_metaBram_memory_3
  wire [31 : 0] captWorker2_metaBram_memory_3$DIA,
		captWorker2_metaBram_memory_3$DIB,
		captWorker2_metaBram_memory_3$DOA,
		captWorker2_metaBram_memory_3$DOB;
  wire [9 : 0] captWorker2_metaBram_memory_3$ADDRA,
	       captWorker2_metaBram_memory_3$ADDRB;
  wire captWorker2_metaBram_memory_3$ENA,
       captWorker2_metaBram_memory_3$ENB,
       captWorker2_metaBram_memory_3$WEA,
       captWorker2_metaBram_memory_3$WEB;

  // ports of submodule captWorker2_metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterA_1_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterA_1_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterA_1_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterA_1_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterA_2_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterA_2_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterA_2_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterA_2_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterA_3_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterA_3_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterA_3_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterA_3_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterA_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterA_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterA_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterA_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterB_1_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterB_1_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterB_1_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterB_1_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterB_2_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterB_2_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterB_2_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterB_2_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterB_3_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterB_3_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterB_3_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterB_3_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule captWorker2_metaBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker2_metaBram_serverAdapterB_outDataCore$D_IN,
		captWorker2_metaBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker2_metaBram_serverAdapterB_outDataCore$CLR,
       captWorker2_metaBram_serverAdapterB_outDataCore$DEQ,
       captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker2_metaBram_serverAdapterB_outDataCore$ENQ,
       captWorker2_metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker2_splaF
  wire [2 : 0] captWorker2_splaF$D_IN, captWorker2_splaF$D_OUT;
  wire captWorker2_splaF$CLR,
       captWorker2_splaF$DEQ,
       captWorker2_splaF$EMPTY_N,
       captWorker2_splaF$ENQ,
       captWorker2_splaF$FULL_N;

  // ports of submodule captWorker2_wci_wslv_reqF
  wire [71 : 0] captWorker2_wci_wslv_reqF$D_IN,
		captWorker2_wci_wslv_reqF$D_OUT;
  wire captWorker2_wci_wslv_reqF$CLR,
       captWorker2_wci_wslv_reqF$DEQ,
       captWorker2_wci_wslv_reqF$EMPTY_N,
       captWorker2_wci_wslv_reqF$ENQ;

  // ports of submodule captWorker2_wsiS_reqFifo
  wire [60 : 0] captWorker2_wsiS_reqFifo$D_IN, captWorker2_wsiS_reqFifo$D_OUT;
  wire captWorker2_wsiS_reqFifo$CLR,
       captWorker2_wsiS_reqFifo$DEQ,
       captWorker2_wsiS_reqFifo$EMPTY_N,
       captWorker2_wsiS_reqFifo$ENQ,
       captWorker2_wsiS_reqFifo$FULL_N;

  // ports of submodule id
  wire [511 : 0] id$uuid;

  // ports of submodule wciMonW3
  wire [31 : 0] wciMonW3$observe_MAddr,
		wciMonW3$observe_MData,
		wciMonW3$observe_SData,
		wciMonW3$pmem_MData;
  wire [11 : 0] wciMonW3$pmem_MBurstLength;
  wire [7 : 0] wciMonW3$pmem_MReqInfo;
  wire [3 : 0] wciMonW3$observe_MByteEn, wciMonW3$pmem_MByteEn;
  wire [2 : 0] wciMonW3$observe_MCmd, wciMonW3$pmem_MCmd;
  wire [1 : 0] wciMonW3$observe_MFlag,
	       wciMonW3$observe_SFlag,
	       wciMonW3$observe_SResp;
  wire wciMonW3$observe_MAddrSpace,
       wciMonW3$observe_MReset_n,
       wciMonW3$observe_SThreadBusy,
       wciMonW3$pmem_MBurstPrecise,
       wciMonW3$pmem_MReqLast,
       wciMonW3$pmem_MReset_n,
       wciMonW3$pmem_SReset_n,
       wciMonW3$pmem_SThreadBusy;

  // ports of submodule wsimMonW3_observer_evF
  wire [98 : 0] wsimMonW3_observer_evF$D_IN, wsimMonW3_observer_evF$D_OUT;
  wire wsimMonW3_observer_evF$CLR,
       wsimMonW3_observer_evF$DEQ,
       wsimMonW3_observer_evF$EMPTY_N,
       wsimMonW3_observer_evF$ENQ,
       wsimMonW3_observer_evF$FULL_N;

  // ports of submodule wsimMonW3_pmsender_evF
  wire [98 : 0] wsimMonW3_pmsender_evF$D_IN, wsimMonW3_pmsender_evF$D_OUT;
  wire wsimMonW3_pmsender_evF$CLR,
       wsimMonW3_pmsender_evF$DEQ,
       wsimMonW3_pmsender_evF$EMPTY_N,
       wsimMonW3_pmsender_evF$ENQ,
       wsimMonW3_pmsender_evF$FULL_N;

  // ports of submodule wsisMonW3_observer_evF
  wire [98 : 0] wsisMonW3_observer_evF$D_IN, wsisMonW3_observer_evF$D_OUT;
  wire wsisMonW3_observer_evF$CLR,
       wsisMonW3_observer_evF$DEQ,
       wsisMonW3_observer_evF$EMPTY_N,
       wsisMonW3_observer_evF$ENQ,
       wsisMonW3_observer_evF$FULL_N;

  // ports of submodule wsisMonW3_pmsender_evF
  wire [98 : 0] wsisMonW3_pmsender_evF$D_IN, wsisMonW3_pmsender_evF$D_OUT;
  wire wsisMonW3_pmsender_evF$CLR,
       wsisMonW3_pmsender_evF$DEQ,
       wsisMonW3_pmsender_evF$EMPTY_N,
       wsisMonW3_pmsender_evF$ENQ,
       wsisMonW3_pmsender_evF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_captWorker0_wci_cfrd,
       CAN_FIRE_RL_captWorker1_wci_cfrd,
       CAN_FIRE_RL_captWorker2_wci_cfrd,
       WILL_FIRE_RL_captWorker0_advance_split_response,
       WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_doMessageAccept,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_wci_cfrd,
       WILL_FIRE_RL_captWorker0_wci_cfwr,
       WILL_FIRE_RL_captWorker0_wci_ctrl_EiI,
       WILL_FIRE_RL_captWorker0_wci_ctrl_IsO,
       WILL_FIRE_RL_captWorker0_wci_ctrl_OrE,
       WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_captWorker0_wci_wslv_respF_both,
       WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq,
       WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset,
       WILL_FIRE_RL_captWorker1_advance_split_response,
       WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker1_doMessageAccept,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker1_wci_cfrd,
       WILL_FIRE_RL_captWorker1_wci_cfwr,
       WILL_FIRE_RL_captWorker1_wci_ctrl_EiI,
       WILL_FIRE_RL_captWorker1_wci_ctrl_IsO,
       WILL_FIRE_RL_captWorker1_wci_ctrl_OrE,
       WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_captWorker1_wci_wslv_respF_both,
       WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq,
       WILL_FIRE_RL_captWorker1_wsiS_reqFifo_reset,
       WILL_FIRE_RL_captWorker2_advance_split_response,
       WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker2_doMessageAccept,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker2_wci_cfrd,
       WILL_FIRE_RL_captWorker2_wci_cfwr,
       WILL_FIRE_RL_captWorker2_wci_ctrl_EiI,
       WILL_FIRE_RL_captWorker2_wci_ctrl_IsO,
       WILL_FIRE_RL_captWorker2_wci_ctrl_OrE,
       WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_captWorker2_wci_wslv_respF_both,
       WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq,
       WILL_FIRE_RL_captWorker2_wsiS_reqFifo_reset,
       WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message,
       WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message,
       WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2,
	       MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2,
	       MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [60 : 0] MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1;
  wire [33 : 0] MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3,
		MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_captWorker1_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_3,
		MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_captWorker2_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [31 : 0] MUX_captWorker0_dataCount$write_1__VAL_2,
		MUX_captWorker0_metaCount$write_1__VAL_2,
		MUX_captWorker1_dataCount$write_1__VAL_2,
		MUX_captWorker1_metaCount$write_1__VAL_2,
		MUX_captWorker2_dataCount$write_1__VAL_2,
		MUX_captWorker2_metaCount$write_1__VAL_2;
  wire [1 : 0] MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_captWorker1_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_captWorker1_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_captWorker2_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_captWorker2_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_wsimMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsimMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_wsisMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsisMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_captWorker0_controlReg$write_1__SEL_1,
       MUX_captWorker0_dataCount$write_1__SEL_1,
       MUX_captWorker0_dataCount$write_1__SEL_2,
       MUX_captWorker0_metaCount$write_1__SEL_1,
       MUX_captWorker0_metaCount$write_1__SEL_2,
       MUX_captWorker0_splitReadInFlight$write_1__SEL_1,
       MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_captWorker0_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_captWorker1_controlReg$write_1__SEL_1,
       MUX_captWorker1_dataCount$write_1__SEL_1,
       MUX_captWorker1_dataCount$write_1__SEL_2,
       MUX_captWorker1_metaCount$write_1__SEL_1,
       MUX_captWorker1_metaCount$write_1__SEL_2,
       MUX_captWorker1_splitReadInFlight$write_1__SEL_1,
       MUX_captWorker1_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_captWorker1_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_captWorker1_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_captWorker1_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_captWorker1_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_captWorker2_controlReg$write_1__SEL_1,
       MUX_captWorker2_dataCount$write_1__SEL_1,
       MUX_captWorker2_dataCount$write_1__SEL_2,
       MUX_captWorker2_metaCount$write_1__SEL_1,
       MUX_captWorker2_metaCount$write_1__SEL_2,
       MUX_captWorker2_splitReadInFlight$write_1__SEL_1,
       MUX_captWorker2_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_captWorker2_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_captWorker2_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_captWorker2_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_captWorker2_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2;

  // remaining internal signals
  reg [95 : 0] CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q18,
	       CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q23;
  reg [63 : 0] v__h100489,
	       v__h100772,
	       v__h100975,
	       v__h25641,
	       v__h26684,
	       v__h26967,
	       v__h27170,
	       v__h41017,
	       v__h4111,
	       v__h41191,
	       v__h41335,
	       v__h4285,
	       v__h4429,
	       v__h62544,
	       v__h63587,
	       v__h63870,
	       v__h64073,
	       v__h77919,
	       v__h78093,
	       v__h78237,
	       v__h99446;
  reg [31 : 0] IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d951,
	       IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2646,
	       IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4344,
	       v__h100956,
	       v__h27151,
	       v__h64054,
	       x_data__h34858,
	       x_data__h71766;
  reg [7 : 0] CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10,
	      CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5,
	      CASE_wsimMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q16,
	      CASE_wsimMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q17,
	      CASE_wsimMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q15,
	      CASE_wsisMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q21,
	      CASE_wsisMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q22,
	      CASE_wsisMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q20,
	      x__h35872,
	      x__h72774;
  reg [4 : 0] CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8,
	      CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6,
	      CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7,
	      CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q9,
	      CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3,
	      CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1,
	      CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2,
	      CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q4;
  reg [2 : 0] CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q14,
	      CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q19,
	      len__h34789,
	      len__h71697;
  reg CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q11,
      CASE_captWorker1_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q12,
      CASE_captWorker2_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q13,
      IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d918,
      IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d993,
      IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d997,
      IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2613,
      IF_captWorker1_wci_wslv_reqF_first__740_BITS_3_ETC___d2688,
      IF_captWorker1_wci_wslv_reqF_first__740_BITS_6_ETC___d2692,
      IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4311,
      IF_captWorker2_wci_wslv_reqF_first__438_BITS_3_ETC___d4386,
      IF_captWorker2_wci_wslv_reqF_first__438_BITS_6_ETC___d4390;
  wire [39 : 0] IF_NOT_wsimMonW3_observer_mesgInFlight_814_840_ETC___d2848,
		IF_NOT_wsimMonW3_observer_mesgInFlight_814_840_ETC___d2849,
		IF_NOT_wsisMonW3_observer_mesgInFlight_114_140_ETC___d1148,
		IF_NOT_wsisMonW3_observer_mesgInFlight_114_140_ETC___d1149;
  wire [31 : 0] _0x81_CONCAT_IF_IF_wsisMonW3_pmsender_evF_first_ETC___d1482,
		_0x82_CONCAT_IF_IF_wsimMonW3_pmsender_evF_first_ETC___d3180,
		g_data__h102031,
		g_data__h28226,
		g_data__h65129,
		rdat___1__h101053,
		rdat___1__h101127,
		rdat___1__h27248,
		rdat___1__h27322,
		rdat___1__h64151,
		rdat___1__h64225,
		v__h25765,
		v__h62668,
		v__h99570,
		y_avValue__h100197,
		y_avValue__h100241,
		y_avValue__h100281,
		y_avValue__h100321,
		y_avValue__h100361,
		y_avValue__h26392,
		y_avValue__h26436,
		y_avValue__h26476,
		y_avValue__h26516,
		y_avValue__h26556,
		y_avValue__h63295,
		y_avValue__h63339,
		y_avValue__h63379,
		y_avValue__h63419,
		y_avValue__h63459;
  wire [13 : 0] mlB__h23537,
		mlB__h31076,
		mlB__h60440,
		mlB__h67987,
		mlB__h97342,
		mlInc__h23536,
		mlInc__h31075,
		mlInc__h60439,
		mlInc__h67986,
		mlInc__h97341;
  wire [11 : 0] x_burstLength__h34857, x_burstLength__h71765;
  wire [2 : 0] captWorker0_dataBram_serverAdapterB_cnt_21_PLU_ETC___d327,
	       captWorker0_metaBram_serverAdapterB_1_cnt_57_P_ETC___d563,
	       captWorker0_metaBram_serverAdapterB_2_cnt_75_P_ETC___d681,
	       captWorker0_metaBram_serverAdapterB_3_cnt_93_P_ETC___d799,
	       captWorker0_metaBram_serverAdapterB_cnt_39_PLU_ETC___d445,
	       captWorker1_dataBram_serverAdapterB_cnt_016_PL_ETC___d2022,
	       captWorker1_metaBram_serverAdapterB_1_cnt_252__ETC___d2258,
	       captWorker1_metaBram_serverAdapterB_2_cnt_370__ETC___d2376,
	       captWorker1_metaBram_serverAdapterB_3_cnt_488__ETC___d2494,
	       captWorker1_metaBram_serverAdapterB_cnt_134_PL_ETC___d2140,
	       captWorker2_dataBram_serverAdapterB_cnt_714_PL_ETC___d3720,
	       captWorker2_metaBram_serverAdapterB_1_cnt_950__ETC___d3956,
	       captWorker2_metaBram_serverAdapterB_2_cnt_068__ETC___d4074,
	       captWorker2_metaBram_serverAdapterB_3_cnt_186__ETC___d4192,
	       captWorker2_metaBram_serverAdapterB_cnt_832_PL_ETC___d3838,
	       x__h23585,
	       x__h23597,
	       x__h23609,
	       x__h31122,
	       x__h31134,
	       x__h31146,
	       x__h60488,
	       x__h60500,
	       x__h60512,
	       x__h68033,
	       x__h68045,
	       x__h68057,
	       x__h97390,
	       x__h97402,
	       x__h97414,
	       y__h23586,
	       y__h23598,
	       y__h23610,
	       y__h31123,
	       y__h31135,
	       y__h31147,
	       y__h60489,
	       y__h60501,
	       y__h60513,
	       y__h68034,
	       y__h68046,
	       y__h68058,
	       y__h97391,
	       y__h97403,
	       y__h97415;
  wire IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d927,
       IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2622,
       IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4320,
       IF_wsimMonW3_observer_mesgInFlight_814_THEN_0__ETC___d2820,
       IF_wsisMonW3_observer_mesgInFlight_114_THEN_0__ETC___d1120,
       NOT_captWorker0_controlReg_30_BIT_0_31_32_OR_c_ETC___d856,
       NOT_captWorker1_controlReg_525_BIT_0_526_527_O_ETC___d2551,
       NOT_captWorker2_controlReg_223_BIT_0_224_225_O_ETC___d4249,
       captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878,
       captWorker0_dataCount_37_ULT_1024___d4771,
       captWorker0_metaCount_34_ULT_1024___d4584,
       captWorker0_splaF_i_notEmpty__96_AND_IF_captWo_ETC___d929,
       captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573,
       captWorker1_dataCount_532_ULT_1024___d4773,
       captWorker1_metaCount_529_ULT_1024___d4772,
       captWorker1_splaF_i_notEmpty__591_AND_IF_captW_ETC___d2624,
       captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271,
       captWorker2_dataCount_230_ULT_1024___d4775,
       captWorker2_metaCount_227_ULT_1024___d4774,
       captWorker2_splaF_i_notEmpty__289_AND_IF_captW_ETC___d4322,
       wsimMonW3_pmsender_idx_928_EQ_IF_wsimMonW3_pms_ETC___d4616,
       wsisMonW3_pmsender_idx_230_EQ_IF_wsisMonW3_pms_ETC___d4615;

  // value method wci_s_0_sResp
  assign wci_s_0_SResp = 2'd0 ;

  // value method wci_s_0_sData
  assign wci_s_0_SData = 32'hAAAAAAAA ;

  // value method wci_s_0_sThreadBusy
  assign wci_s_0_SThreadBusy = 1'd1 ;

  // value method wci_s_0_sFlag
  assign wci_s_0_SFlag = 2'b0 ;

  // value method wci_s_1_sResp
  assign wci_s_1_SResp = appW1$wciS0_SResp ;

  // value method wci_s_1_sData
  assign wci_s_1_SData = appW1$wciS0_SData ;

  // value method wci_s_1_sThreadBusy
  assign wci_s_1_SThreadBusy = appW1$wciS0_SThreadBusy ;

  // value method wci_s_1_sFlag
  assign wci_s_1_SFlag = appW1$wciS0_SFlag ;

  // value method wci_s_2_sResp
  assign wci_s_2_SResp = appW2$wciS0_SResp ;

  // value method wci_s_2_sData
  assign wci_s_2_SData = appW2$wciS0_SData ;

  // value method wci_s_2_sThreadBusy
  assign wci_s_2_SThreadBusy = appW2$wciS0_SThreadBusy ;

  // value method wci_s_2_sFlag
  assign wci_s_2_SFlag = appW2$wciS0_SFlag ;

  // value method wci_s_3_sResp
  assign wci_s_3_SResp = appW3$wciS0_SResp ;

  // value method wci_s_3_sData
  assign wci_s_3_SData = appW3$wciS0_SData ;

  // value method wci_s_3_sThreadBusy
  assign wci_s_3_SThreadBusy = appW3$wciS0_SThreadBusy ;

  // value method wci_s_3_sFlag
  assign wci_s_3_SFlag = appW3$wciS0_SFlag ;

  // value method wci_s_4_sResp
  assign wci_s_4_SResp = appW4$wciS0_SResp ;

  // value method wci_s_4_sData
  assign wci_s_4_SData = appW4$wciS0_SData ;

  // value method wci_s_4_sThreadBusy
  assign wci_s_4_SThreadBusy = appW4$wciS0_SThreadBusy ;

  // value method wci_s_4_sFlag
  assign wci_s_4_SFlag = appW4$wciS0_SFlag ;

  // value method wci_s_5_sResp
  assign wci_s_5_SResp = captWorker0_wci_wslv_respF_q_0[33:32] ;

  // value method wci_s_5_sData
  assign wci_s_5_SData = captWorker0_wci_wslv_respF_q_0[31:0] ;

  // value method wci_s_5_sThreadBusy
  assign wci_s_5_SThreadBusy =
	     captWorker0_wci_wslv_reqF_countReg > 2'd1 ||
	     captWorker0_wci_wslv_isReset_isInReset ;

  // value method wci_s_5_sFlag
  assign wci_s_5_SFlag = { 1'd1, captWorker0_wci_wslv_sFlagReg } ;

  // value method wci_s_6_sResp
  assign wci_s_6_SResp = captWorker1_wci_wslv_respF_q_0[33:32] ;

  // value method wci_s_6_sData
  assign wci_s_6_SData = captWorker1_wci_wslv_respF_q_0[31:0] ;

  // value method wci_s_6_sThreadBusy
  assign wci_s_6_SThreadBusy =
	     captWorker1_wci_wslv_reqF_countReg > 2'd1 ||
	     captWorker1_wci_wslv_isReset_isInReset ;

  // value method wci_s_6_sFlag
  assign wci_s_6_SFlag = { 1'd1, captWorker1_wci_wslv_sFlagReg } ;

  // value method wci_s_7_sResp
  assign wci_s_7_SResp = captWorker2_wci_wslv_respF_q_0[33:32] ;

  // value method wci_s_7_sData
  assign wci_s_7_SData = captWorker2_wci_wslv_respF_q_0[31:0] ;

  // value method wci_s_7_sThreadBusy
  assign wci_s_7_SThreadBusy =
	     captWorker2_wci_wslv_reqF_countReg > 2'd1 ||
	     captWorker2_wci_wslv_isReset_isInReset ;

  // value method wci_s_7_sFlag
  assign wci_s_7_SFlag = { 1'd1, captWorker2_wci_wslv_sFlagReg } ;

  // value method wti_s_0_sThreadBusy
  assign wti_s_0_SThreadBusy = captWorker0_wtiS_isReset_isInReset ;

  // value method wti_s_0_sReset_n
  assign wti_s_0_SReset_n =
	     !captWorker0_wtiS_isReset_isInReset &&
	     captWorker0_wtiS_operateD ;

  // value method wti_s_1_sThreadBusy
  assign wti_s_1_SThreadBusy = captWorker1_wtiS_isReset_isInReset ;

  // value method wti_s_1_sReset_n
  assign wti_s_1_SReset_n =
	     !captWorker1_wtiS_isReset_isInReset &&
	     captWorker1_wtiS_operateD ;

  // value method wti_s_2_sThreadBusy
  assign wti_s_2_SThreadBusy = captWorker2_wtiS_isReset_isInReset ;

  // value method wti_s_2_sReset_n
  assign wti_s_2_SReset_n =
	     !captWorker2_wtiS_isReset_isInReset &&
	     captWorker2_wtiS_operateD ;

  // value method wmiM0_mCmd
  assign wmiM0_MCmd = appW2$wmiM0_MCmd ;

  // value method wmiM0_mReqLast
  assign wmiM0_MReqLast = appW2$wmiM0_MReqLast ;

  // value method wmiM0_mReqInfo
  assign wmiM0_MReqInfo = appW2$wmiM0_MReqInfo ;

  // value method wmiM0_mAddrSpace
  assign wmiM0_MAddrSpace = appW2$wmiM0_MAddrSpace ;

  // value method wmiM0_mAddr
  assign wmiM0_MAddr = appW2$wmiM0_MAddr ;

  // value method wmiM0_mBurstLength
  assign wmiM0_MBurstLength = appW2$wmiM0_MBurstLength ;

  // value method wmiM0_mDataValid
  assign wmiM0_MDataValid = appW2$wmiM0_MDataValid ;

  // value method wmiM0_mDataLast
  assign wmiM0_MDataLast = appW2$wmiM0_MDataLast ;

  // value method wmiM0_mData
  assign wmiM0_MData = appW2$wmiM0_MData ;

  // value method wmiM0_mDataByteEn
  assign wmiM0_MDataByteEn = appW2$wmiM0_MDataByteEn ;

  // value method wmiM0_mFlag
  assign wmiM0_MFlag = appW2$wmiM0_MFlag ;

  // value method wmiM0_mReset_n
  assign wmiM0_MReset_n = appW2$wmiM0_MReset_n ;

  // value method wmiM1_mCmd
  assign wmiM1_MCmd = appW4$wmiM0_MCmd ;

  // value method wmiM1_mReqLast
  assign wmiM1_MReqLast = appW4$wmiM0_MReqLast ;

  // value method wmiM1_mReqInfo
  assign wmiM1_MReqInfo = appW4$wmiM0_MReqInfo ;

  // value method wmiM1_mAddrSpace
  assign wmiM1_MAddrSpace = appW4$wmiM0_MAddrSpace ;

  // value method wmiM1_mAddr
  assign wmiM1_MAddr = appW4$wmiM0_MAddr ;

  // value method wmiM1_mBurstLength
  assign wmiM1_MBurstLength = appW4$wmiM0_MBurstLength ;

  // value method wmiM1_mDataValid
  assign wmiM1_MDataValid = appW4$wmiM0_MDataValid ;

  // value method wmiM1_mDataLast
  assign wmiM1_MDataLast = appW4$wmiM0_MDataLast ;

  // value method wmiM1_mData
  assign wmiM1_MData = appW4$wmiM0_MData ;

  // value method wmiM1_mDataByteEn
  assign wmiM1_MDataByteEn = appW4$wmiM0_MDataByteEn ;

  // value method wmiM1_mFlag
  assign wmiM1_MFlag = appW4$wmiM0_MFlag ;

  // value method wmiM1_mReset_n
  assign wmiM1_MReset_n = appW4$wmiM0_MReset_n ;

  // value method wmemiM0_mCmd
  assign wmemiM0_MCmd = appW1$wmemiM0_MCmd ;

  // value method wmemiM0_mReqLast
  assign wmemiM0_MReqLast = appW1$wmemiM0_MReqLast ;

  // value method wmemiM0_mAddr
  assign wmemiM0_MAddr = appW1$wmemiM0_MAddr ;

  // value method wmemiM0_mBurstLength
  assign wmemiM0_MBurstLength = appW1$wmemiM0_MBurstLength ;

  // value method wmemiM0_mDataValid
  assign wmemiM0_MDataValid = appW1$wmemiM0_MDataValid ;

  // value method wmemiM0_mDataLast
  assign wmemiM0_MDataLast = appW1$wmemiM0_MDataLast ;

  // value method wmemiM0_mData
  assign wmemiM0_MData = appW1$wmemiM0_MData ;

  // value method wmemiM0_mDataByteEn
  assign wmemiM0_MDataByteEn = appW1$wmemiM0_MDataByteEn ;

  // value method wmemiM0_mReset_n
  assign wmemiM0_MReset_n = appW1$wmemiM0_MReset_n ;

  // value method wsi_s_adc_sThreadBusy
  assign wsi_s_adc_SThreadBusy = appW2$wsiS0_SThreadBusy ;

  // value method wsi_s_adc_sReset_n
  assign wsi_s_adc_SReset_n = appW2$wsiS0_SReset_n ;

  // value method wsi_m_dac_mCmd
  assign wsi_m_dac_MCmd = appW4$wsiM0_MCmd ;

  // value method wsi_m_dac_mReqLast
  assign wsi_m_dac_MReqLast = appW4$wsiM0_MReqLast ;

  // value method wsi_m_dac_mBurstPrecise
  assign wsi_m_dac_MBurstPrecise = appW4$wsiM0_MBurstPrecise ;

  // value method wsi_m_dac_mBurstLength
  assign wsi_m_dac_MBurstLength = appW4$wsiM0_MBurstLength ;

  // value method wsi_m_dac_mData
  assign wsi_m_dac_MData = appW4$wsiM0_MData ;

  // value method wsi_m_dac_mByteEn
  assign wsi_m_dac_MByteEn = appW4$wsiM0_MByteEn ;

  // value method wsi_m_dac_mReqInfo
  assign wsi_m_dac_MReqInfo = appW4$wsiM0_MReqInfo ;

  // value method wsi_m_dac_mReset_n
  assign wsi_m_dac_MReset_n = appW4$wsiM0_MReset_n ;

  // value method uuid
  assign uuid = id$uuid ;

  // submodule appW1
  mkMemiTestWorker #(.hasDebugLogic(hasDebugLogic)) appW1(.wciS0_Clk(CLK),
							  .wciS0_MReset_n(RST_N_rst_1),
							  .wciS0_MAddr(appW1$wciS0_MAddr),
							  .wciS0_MAddrSpace(appW1$wciS0_MAddrSpace),
							  .wciS0_MByteEn(appW1$wciS0_MByteEn),
							  .wciS0_MCmd(appW1$wciS0_MCmd),
							  .wciS0_MData(appW1$wciS0_MData),
							  .wciS0_MFlag(appW1$wciS0_MFlag),
							  .wmemiM0_SData(appW1$wmemiM0_SData),
							  .wmemiM0_SResp(appW1$wmemiM0_SResp),
							  .wmemiM0_SRespLast(appW1$wmemiM0_SRespLast),
							  .wmemiM0_SCmdAccept(appW1$wmemiM0_SCmdAccept),
							  .wmemiM0_SDataAccept(appW1$wmemiM0_SDataAccept),
							  .wciS0_SResp(appW1$wciS0_SResp),
							  .wciS0_SData(appW1$wciS0_SData),
							  .wciS0_SThreadBusy(appW1$wciS0_SThreadBusy),
							  .wciS0_SFlag(appW1$wciS0_SFlag),
							  .wmemiM0_MCmd(appW1$wmemiM0_MCmd),
							  .wmemiM0_MReqLast(appW1$wmemiM0_MReqLast),
							  .wmemiM0_MAddr(appW1$wmemiM0_MAddr),
							  .wmemiM0_MBurstLength(appW1$wmemiM0_MBurstLength),
							  .wmemiM0_MDataValid(appW1$wmemiM0_MDataValid),
							  .wmemiM0_MDataLast(appW1$wmemiM0_MDataLast),
							  .wmemiM0_MData(appW1$wmemiM0_MData),
							  .wmemiM0_MDataByteEn(appW1$wmemiM0_MDataByteEn),
							  .wmemiM0_MReset_n(appW1$wmemiM0_MReset_n));

  // submodule appW2
  mkSMAdapter4B #(.smaCtrlInit(32'h00000001),
		  .hasDebugLogic(hasDebugLogic)) appW2(.wciS0_Clk(CLK),
						       .wciS0_MReset_n(RST_N_rst_2),
						       .wciS0_MAddr(appW2$wciS0_MAddr),
						       .wciS0_MAddrSpace(appW2$wciS0_MAddrSpace),
						       .wciS0_MByteEn(appW2$wciS0_MByteEn),
						       .wciS0_MCmd(appW2$wciS0_MCmd),
						       .wciS0_MData(appW2$wciS0_MData),
						       .wciS0_MFlag(appW2$wciS0_MFlag),
						       .wmiM0_SData(appW2$wmiM0_SData),
						       .wmiM0_SFlag(appW2$wmiM0_SFlag),
						       .wmiM0_SResp(appW2$wmiM0_SResp),
						       .wsiS0_MBurstLength(appW2$wsiS0_MBurstLength),
						       .wsiS0_MByteEn(appW2$wsiS0_MByteEn),
						       .wsiS0_MCmd(appW2$wsiS0_MCmd),
						       .wsiS0_MData(appW2$wsiS0_MData),
						       .wsiS0_MReqInfo(appW2$wsiS0_MReqInfo),
						       .wmiM0_SThreadBusy(appW2$wmiM0_SThreadBusy),
						       .wmiM0_SDataThreadBusy(appW2$wmiM0_SDataThreadBusy),
						       .wmiM0_SRespLast(appW2$wmiM0_SRespLast),
						       .wmiM0_SReset_n(appW2$wmiM0_SReset_n),
						       .wsiM0_SThreadBusy(appW2$wsiM0_SThreadBusy),
						       .wsiM0_SReset_n(appW2$wsiM0_SReset_n),
						       .wsiS0_MReqLast(appW2$wsiS0_MReqLast),
						       .wsiS0_MBurstPrecise(appW2$wsiS0_MBurstPrecise),
						       .wsiS0_MReset_n(appW2$wsiS0_MReset_n),
						       .wciS0_SResp(appW2$wciS0_SResp),
						       .wciS0_SData(appW2$wciS0_SData),
						       .wciS0_SThreadBusy(appW2$wciS0_SThreadBusy),
						       .wciS0_SFlag(appW2$wciS0_SFlag),
						       .wmiM0_MCmd(appW2$wmiM0_MCmd),
						       .wmiM0_MReqLast(appW2$wmiM0_MReqLast),
						       .wmiM0_MReqInfo(appW2$wmiM0_MReqInfo),
						       .wmiM0_MAddrSpace(appW2$wmiM0_MAddrSpace),
						       .wmiM0_MAddr(appW2$wmiM0_MAddr),
						       .wmiM0_MBurstLength(appW2$wmiM0_MBurstLength),
						       .wmiM0_MDataValid(appW2$wmiM0_MDataValid),
						       .wmiM0_MDataLast(appW2$wmiM0_MDataLast),
						       .wmiM0_MData(appW2$wmiM0_MData),
						       .wmiM0_MDataByteEn(appW2$wmiM0_MDataByteEn),
						       .wmiM0_MFlag(appW2$wmiM0_MFlag),
						       .wmiM0_MReset_n(appW2$wmiM0_MReset_n),
						       .wsiM0_MCmd(appW2$wsiM0_MCmd),
						       .wsiM0_MReqLast(appW2$wsiM0_MReqLast),
						       .wsiM0_MBurstPrecise(appW2$wsiM0_MBurstPrecise),
						       .wsiM0_MBurstLength(appW2$wsiM0_MBurstLength),
						       .wsiM0_MData(appW2$wsiM0_MData),
						       .wsiM0_MByteEn(appW2$wsiM0_MByteEn),
						       .wsiM0_MReqInfo(appW2$wsiM0_MReqInfo),
						       .wsiM0_MReset_n(appW2$wsiM0_MReset_n),
						       .wsiS0_SThreadBusy(appW2$wsiS0_SThreadBusy),
						       .wsiS0_SReset_n(appW2$wsiS0_SReset_n));

  // submodule appW3
  mkBiasWorker4B #(.hasDebugLogic(hasDebugLogic)) appW3(.wciS0_Clk(CLK),
							.wciS0_MReset_n(RST_N_rst_3),
							.wciS0_MAddr(appW3$wciS0_MAddr),
							.wciS0_MAddrSpace(appW3$wciS0_MAddrSpace),
							.wciS0_MByteEn(appW3$wciS0_MByteEn),
							.wciS0_MCmd(appW3$wciS0_MCmd),
							.wciS0_MData(appW3$wciS0_MData),
							.wciS0_MFlag(appW3$wciS0_MFlag),
							.wsiS0_MBurstLength(appW3$wsiS0_MBurstLength),
							.wsiS0_MByteEn(appW3$wsiS0_MByteEn),
							.wsiS0_MCmd(appW3$wsiS0_MCmd),
							.wsiS0_MData(appW3$wsiS0_MData),
							.wsiS0_MReqInfo(appW3$wsiS0_MReqInfo),
							.wsiS0_MReqLast(appW3$wsiS0_MReqLast),
							.wsiS0_MBurstPrecise(appW3$wsiS0_MBurstPrecise),
							.wsiS0_MReset_n(appW3$wsiS0_MReset_n),
							.wsiM0_SThreadBusy(appW3$wsiM0_SThreadBusy),
							.wsiM0_SReset_n(appW3$wsiM0_SReset_n),
							.wciS0_SResp(appW3$wciS0_SResp),
							.wciS0_SData(appW3$wciS0_SData),
							.wciS0_SThreadBusy(appW3$wciS0_SThreadBusy),
							.wciS0_SFlag(appW3$wciS0_SFlag),
							.wsiS0_SThreadBusy(appW3$wsiS0_SThreadBusy),
							.wsiS0_SReset_n(appW3$wsiS0_SReset_n),
							.wsiM0_MCmd(appW3$wsiM0_MCmd),
							.wsiM0_MReqLast(appW3$wsiM0_MReqLast),
							.wsiM0_MBurstPrecise(appW3$wsiM0_MBurstPrecise),
							.wsiM0_MBurstLength(appW3$wsiM0_MBurstLength),
							.wsiM0_MData(appW3$wsiM0_MData),
							.wsiM0_MByteEn(appW3$wsiM0_MByteEn),
							.wsiM0_MReqInfo(appW3$wsiM0_MReqInfo),
							.wsiM0_MReset_n(appW3$wsiM0_MReset_n));

  // submodule appW4
  mkSMAdapter4B #(.smaCtrlInit(32'h00000002),
		  .hasDebugLogic(hasDebugLogic)) appW4(.wciS0_Clk(CLK),
						       .wciS0_MReset_n(RST_N_rst_4),
						       .wciS0_MAddr(appW4$wciS0_MAddr),
						       .wciS0_MAddrSpace(appW4$wciS0_MAddrSpace),
						       .wciS0_MByteEn(appW4$wciS0_MByteEn),
						       .wciS0_MCmd(appW4$wciS0_MCmd),
						       .wciS0_MData(appW4$wciS0_MData),
						       .wciS0_MFlag(appW4$wciS0_MFlag),
						       .wmiM0_SData(appW4$wmiM0_SData),
						       .wmiM0_SFlag(appW4$wmiM0_SFlag),
						       .wmiM0_SResp(appW4$wmiM0_SResp),
						       .wsiS0_MBurstLength(appW4$wsiS0_MBurstLength),
						       .wsiS0_MByteEn(appW4$wsiS0_MByteEn),
						       .wsiS0_MCmd(appW4$wsiS0_MCmd),
						       .wsiS0_MData(appW4$wsiS0_MData),
						       .wsiS0_MReqInfo(appW4$wsiS0_MReqInfo),
						       .wmiM0_SThreadBusy(appW4$wmiM0_SThreadBusy),
						       .wmiM0_SDataThreadBusy(appW4$wmiM0_SDataThreadBusy),
						       .wmiM0_SRespLast(appW4$wmiM0_SRespLast),
						       .wmiM0_SReset_n(appW4$wmiM0_SReset_n),
						       .wsiM0_SThreadBusy(appW4$wsiM0_SThreadBusy),
						       .wsiM0_SReset_n(appW4$wsiM0_SReset_n),
						       .wsiS0_MReqLast(appW4$wsiS0_MReqLast),
						       .wsiS0_MBurstPrecise(appW4$wsiS0_MBurstPrecise),
						       .wsiS0_MReset_n(appW4$wsiS0_MReset_n),
						       .wciS0_SResp(appW4$wciS0_SResp),
						       .wciS0_SData(appW4$wciS0_SData),
						       .wciS0_SThreadBusy(appW4$wciS0_SThreadBusy),
						       .wciS0_SFlag(appW4$wciS0_SFlag),
						       .wmiM0_MCmd(appW4$wmiM0_MCmd),
						       .wmiM0_MReqLast(appW4$wmiM0_MReqLast),
						       .wmiM0_MReqInfo(appW4$wmiM0_MReqInfo),
						       .wmiM0_MAddrSpace(appW4$wmiM0_MAddrSpace),
						       .wmiM0_MAddr(appW4$wmiM0_MAddr),
						       .wmiM0_MBurstLength(appW4$wmiM0_MBurstLength),
						       .wmiM0_MDataValid(appW4$wmiM0_MDataValid),
						       .wmiM0_MDataLast(appW4$wmiM0_MDataLast),
						       .wmiM0_MData(appW4$wmiM0_MData),
						       .wmiM0_MDataByteEn(appW4$wmiM0_MDataByteEn),
						       .wmiM0_MFlag(appW4$wmiM0_MFlag),
						       .wmiM0_MReset_n(appW4$wmiM0_MReset_n),
						       .wsiM0_MCmd(appW4$wsiM0_MCmd),
						       .wsiM0_MReqLast(appW4$wsiM0_MReqLast),
						       .wsiM0_MBurstPrecise(appW4$wsiM0_MBurstPrecise),
						       .wsiM0_MBurstLength(appW4$wsiM0_MBurstLength),
						       .wsiM0_MData(appW4$wsiM0_MData),
						       .wsiM0_MByteEn(appW4$wsiM0_MByteEn),
						       .wsiM0_MReqInfo(appW4$wsiM0_MReqInfo),
						       .wsiM0_MReset_n(appW4$wsiM0_MReset_n),
						       .wsiS0_SThreadBusy(appW4$wsiS0_SThreadBusy),
						       .wsiS0_SReset_n(appW4$wsiS0_SReset_n));

  // submodule captWorker0_dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_dataBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker0_dataBram_memory$ADDRA),
							  .ADDRB(captWorker0_dataBram_memory$ADDRB),
							  .DIA(captWorker0_dataBram_memory$DIA),
							  .DIB(captWorker0_dataBram_memory$DIB),
							  .WEA(captWorker0_dataBram_memory$WEA),
							  .WEB(captWorker0_dataBram_memory$WEB),
							  .ENA(captWorker0_dataBram_memory$ENA),
							  .ENB(captWorker0_dataBram_memory$ENB),
							  .DOA(captWorker0_dataBram_memory$DOA),
							  .DOB(captWorker0_dataBram_memory$DOB));

  // submodule captWorker0_dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_dataBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_dataBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker0_dataBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker0_dataBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker0_dataBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker0_dataBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker0_dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_dataBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_dataBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker0_dataBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker0_dataBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker0_dataBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker0_dataBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker0_metaBram_memory$ADDRA),
							  .ADDRB(captWorker0_metaBram_memory$ADDRB),
							  .DIA(captWorker0_metaBram_memory$DIA),
							  .DIB(captWorker0_metaBram_memory$DIB),
							  .WEA(captWorker0_metaBram_memory$WEA),
							  .WEB(captWorker0_metaBram_memory$WEB),
							  .ENA(captWorker0_metaBram_memory$ENA),
							  .ENB(captWorker0_metaBram_memory$ENB),
							  .DOA(captWorker0_metaBram_memory$DOA),
							  .DOB(captWorker0_metaBram_memory$DOB));

  // submodule captWorker0_metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory_1(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker0_metaBram_memory_1$ADDRA),
							    .ADDRB(captWorker0_metaBram_memory_1$ADDRB),
							    .DIA(captWorker0_metaBram_memory_1$DIA),
							    .DIB(captWorker0_metaBram_memory_1$DIB),
							    .WEA(captWorker0_metaBram_memory_1$WEA),
							    .WEB(captWorker0_metaBram_memory_1$WEB),
							    .ENA(captWorker0_metaBram_memory_1$ENA),
							    .ENB(captWorker0_metaBram_memory_1$ENB),
							    .DOA(captWorker0_metaBram_memory_1$DOA),
							    .DOB(captWorker0_metaBram_memory_1$DOB));

  // submodule captWorker0_metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory_2(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker0_metaBram_memory_2$ADDRA),
							    .ADDRB(captWorker0_metaBram_memory_2$ADDRB),
							    .DIA(captWorker0_metaBram_memory_2$DIA),
							    .DIB(captWorker0_metaBram_memory_2$DIB),
							    .WEA(captWorker0_metaBram_memory_2$WEA),
							    .WEB(captWorker0_metaBram_memory_2$WEB),
							    .ENA(captWorker0_metaBram_memory_2$ENA),
							    .ENB(captWorker0_metaBram_memory_2$ENB),
							    .DOA(captWorker0_metaBram_memory_2$DOA),
							    .DOB(captWorker0_metaBram_memory_2$DOB));

  // submodule captWorker0_metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory_3(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker0_metaBram_memory_3$ADDRA),
							    .ADDRB(captWorker0_metaBram_memory_3$ADDRB),
							    .DIA(captWorker0_metaBram_memory_3$DIA),
							    .DIB(captWorker0_metaBram_memory_3$DIB),
							    .WEA(captWorker0_metaBram_memory_3$WEA),
							    .WEB(captWorker0_metaBram_memory_3$WEB),
							    .ENA(captWorker0_metaBram_memory_3$ENA),
							    .ENB(captWorker0_metaBram_memory_3$ENB),
							    .DOA(captWorker0_metaBram_memory_3$DOA),
							    .DOB(captWorker0_metaBram_memory_3$DOB));

  // submodule captWorker0_metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_1_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterA_1_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterA_1_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterA_1_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterA_1_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterA_1_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_2_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterA_2_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterA_2_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterA_2_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterA_2_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterA_2_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_3_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterA_3_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterA_3_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterA_3_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterA_3_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterA_3_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_metaBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker0_metaBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker0_metaBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker0_metaBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker0_metaBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_1_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterB_1_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterB_1_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterB_1_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterB_1_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterB_1_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_2_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterB_2_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterB_2_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterB_2_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterB_2_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterB_2_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_3_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterB_3_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterB_3_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterB_3_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterB_3_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterB_3_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_metaBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker0_metaBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker0_metaBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker0_metaBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker0_metaBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker0_splaF
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) captWorker0_splaF(.RST_N(RST_N_rst_5),
					     .CLK(CLK),
					     .D_IN(captWorker0_splaF$D_IN),
					     .ENQ(captWorker0_splaF$ENQ),
					     .DEQ(captWorker0_splaF$DEQ),
					     .CLR(captWorker0_splaF$CLR),
					     .D_OUT(captWorker0_splaF$D_OUT),
					     .FULL_N(captWorker0_splaF$FULL_N),
					     .EMPTY_N(captWorker0_splaF$EMPTY_N));

  // submodule captWorker0_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_wci_wslv_reqF(.RST_N(RST_N_rst_5),
							 .CLK(CLK),
							 .D_IN(captWorker0_wci_wslv_reqF$D_IN),
							 .ENQ(captWorker0_wci_wslv_reqF$ENQ),
							 .DEQ(captWorker0_wci_wslv_reqF$DEQ),
							 .CLR(captWorker0_wci_wslv_reqF$CLR),
							 .D_OUT(captWorker0_wci_wslv_reqF$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(captWorker0_wci_wslv_reqF$EMPTY_N));

  // submodule captWorker0_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_wsiS_reqFifo(.RST_N(RST_N_rst_5),
							.CLK(CLK),
							.D_IN(captWorker0_wsiS_reqFifo$D_IN),
							.ENQ(captWorker0_wsiS_reqFifo$ENQ),
							.DEQ(captWorker0_wsiS_reqFifo$DEQ),
							.CLR(captWorker0_wsiS_reqFifo$CLR),
							.D_OUT(captWorker0_wsiS_reqFifo$D_OUT),
							.FULL_N(captWorker0_wsiS_reqFifo$FULL_N),
							.EMPTY_N(captWorker0_wsiS_reqFifo$EMPTY_N));

  // submodule captWorker1_dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker1_dataBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker1_dataBram_memory$ADDRA),
							  .ADDRB(captWorker1_dataBram_memory$ADDRB),
							  .DIA(captWorker1_dataBram_memory$DIA),
							  .DIB(captWorker1_dataBram_memory$DIB),
							  .WEA(captWorker1_dataBram_memory$WEA),
							  .WEB(captWorker1_dataBram_memory$WEB),
							  .ENA(captWorker1_dataBram_memory$ENA),
							  .ENB(captWorker1_dataBram_memory$ENB),
							  .DOA(captWorker1_dataBram_memory$DOA),
							  .DOB(captWorker1_dataBram_memory$DOB));

  // submodule captWorker1_dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_dataBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_6),
									       .CLK(CLK),
									       .D_IN(captWorker1_dataBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker1_dataBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker1_dataBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker1_dataBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker1_dataBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker1_dataBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker1_dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker1_dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_dataBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_6),
									       .CLK(CLK),
									       .D_IN(captWorker1_dataBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker1_dataBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker1_dataBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker1_dataBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker1_dataBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker1_dataBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker1_metaBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker1_metaBram_memory$ADDRA),
							  .ADDRB(captWorker1_metaBram_memory$ADDRB),
							  .DIA(captWorker1_metaBram_memory$DIA),
							  .DIB(captWorker1_metaBram_memory$DIB),
							  .WEA(captWorker1_metaBram_memory$WEA),
							  .WEB(captWorker1_metaBram_memory$WEB),
							  .ENA(captWorker1_metaBram_memory$ENA),
							  .ENB(captWorker1_metaBram_memory$ENB),
							  .DOA(captWorker1_metaBram_memory$DOA),
							  .DOB(captWorker1_metaBram_memory$DOB));

  // submodule captWorker1_metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker1_metaBram_memory_1(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker1_metaBram_memory_1$ADDRA),
							    .ADDRB(captWorker1_metaBram_memory_1$ADDRB),
							    .DIA(captWorker1_metaBram_memory_1$DIA),
							    .DIB(captWorker1_metaBram_memory_1$DIB),
							    .WEA(captWorker1_metaBram_memory_1$WEA),
							    .WEB(captWorker1_metaBram_memory_1$WEB),
							    .ENA(captWorker1_metaBram_memory_1$ENA),
							    .ENB(captWorker1_metaBram_memory_1$ENB),
							    .DOA(captWorker1_metaBram_memory_1$DOA),
							    .DOB(captWorker1_metaBram_memory_1$DOB));

  // submodule captWorker1_metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker1_metaBram_memory_2(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker1_metaBram_memory_2$ADDRA),
							    .ADDRB(captWorker1_metaBram_memory_2$ADDRB),
							    .DIA(captWorker1_metaBram_memory_2$DIA),
							    .DIB(captWorker1_metaBram_memory_2$DIB),
							    .WEA(captWorker1_metaBram_memory_2$WEA),
							    .WEB(captWorker1_metaBram_memory_2$WEB),
							    .ENA(captWorker1_metaBram_memory_2$ENA),
							    .ENB(captWorker1_metaBram_memory_2$ENB),
							    .DOA(captWorker1_metaBram_memory_2$DOA),
							    .DOB(captWorker1_metaBram_memory_2$DOB));

  // submodule captWorker1_metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker1_metaBram_memory_3(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker1_metaBram_memory_3$ADDRA),
							    .ADDRB(captWorker1_metaBram_memory_3$ADDRB),
							    .DIA(captWorker1_metaBram_memory_3$DIA),
							    .DIB(captWorker1_metaBram_memory_3$DIB),
							    .WEA(captWorker1_metaBram_memory_3$WEA),
							    .WEB(captWorker1_metaBram_memory_3$WEB),
							    .ENA(captWorker1_metaBram_memory_3$ENA),
							    .ENB(captWorker1_metaBram_memory_3$ENB),
							    .DOA(captWorker1_metaBram_memory_3$DOA),
							    .DOB(captWorker1_metaBram_memory_3$DOB));

  // submodule captWorker1_metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterA_1_outDataCore(.RST_N(RST_N_rst_6),
										 .CLK(CLK),
										 .D_IN(captWorker1_metaBram_serverAdapterA_1_outDataCore$D_IN),
										 .ENQ(captWorker1_metaBram_serverAdapterA_1_outDataCore$ENQ),
										 .DEQ(captWorker1_metaBram_serverAdapterA_1_outDataCore$DEQ),
										 .CLR(captWorker1_metaBram_serverAdapterA_1_outDataCore$CLR),
										 .D_OUT(captWorker1_metaBram_serverAdapterA_1_outDataCore$D_OUT),
										 .FULL_N(captWorker1_metaBram_serverAdapterA_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker1_metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterA_2_outDataCore(.RST_N(RST_N_rst_6),
										 .CLK(CLK),
										 .D_IN(captWorker1_metaBram_serverAdapterA_2_outDataCore$D_IN),
										 .ENQ(captWorker1_metaBram_serverAdapterA_2_outDataCore$ENQ),
										 .DEQ(captWorker1_metaBram_serverAdapterA_2_outDataCore$DEQ),
										 .CLR(captWorker1_metaBram_serverAdapterA_2_outDataCore$CLR),
										 .D_OUT(captWorker1_metaBram_serverAdapterA_2_outDataCore$D_OUT),
										 .FULL_N(captWorker1_metaBram_serverAdapterA_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker1_metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterA_3_outDataCore(.RST_N(RST_N_rst_6),
										 .CLK(CLK),
										 .D_IN(captWorker1_metaBram_serverAdapterA_3_outDataCore$D_IN),
										 .ENQ(captWorker1_metaBram_serverAdapterA_3_outDataCore$ENQ),
										 .DEQ(captWorker1_metaBram_serverAdapterA_3_outDataCore$DEQ),
										 .CLR(captWorker1_metaBram_serverAdapterA_3_outDataCore$CLR),
										 .D_OUT(captWorker1_metaBram_serverAdapterA_3_outDataCore$D_OUT),
										 .FULL_N(captWorker1_metaBram_serverAdapterA_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker1_metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_6),
									       .CLK(CLK),
									       .D_IN(captWorker1_metaBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker1_metaBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker1_metaBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker1_metaBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker1_metaBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker1_metaBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker1_metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterB_1_outDataCore(.RST_N(RST_N_rst_6),
										 .CLK(CLK),
										 .D_IN(captWorker1_metaBram_serverAdapterB_1_outDataCore$D_IN),
										 .ENQ(captWorker1_metaBram_serverAdapterB_1_outDataCore$ENQ),
										 .DEQ(captWorker1_metaBram_serverAdapterB_1_outDataCore$DEQ),
										 .CLR(captWorker1_metaBram_serverAdapterB_1_outDataCore$CLR),
										 .D_OUT(captWorker1_metaBram_serverAdapterB_1_outDataCore$D_OUT),
										 .FULL_N(captWorker1_metaBram_serverAdapterB_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterB_2_outDataCore(.RST_N(RST_N_rst_6),
										 .CLK(CLK),
										 .D_IN(captWorker1_metaBram_serverAdapterB_2_outDataCore$D_IN),
										 .ENQ(captWorker1_metaBram_serverAdapterB_2_outDataCore$ENQ),
										 .DEQ(captWorker1_metaBram_serverAdapterB_2_outDataCore$DEQ),
										 .CLR(captWorker1_metaBram_serverAdapterB_2_outDataCore$CLR),
										 .D_OUT(captWorker1_metaBram_serverAdapterB_2_outDataCore$D_OUT),
										 .FULL_N(captWorker1_metaBram_serverAdapterB_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterB_3_outDataCore(.RST_N(RST_N_rst_6),
										 .CLK(CLK),
										 .D_IN(captWorker1_metaBram_serverAdapterB_3_outDataCore$D_IN),
										 .ENQ(captWorker1_metaBram_serverAdapterB_3_outDataCore$ENQ),
										 .DEQ(captWorker1_metaBram_serverAdapterB_3_outDataCore$DEQ),
										 .CLR(captWorker1_metaBram_serverAdapterB_3_outDataCore$CLR),
										 .D_OUT(captWorker1_metaBram_serverAdapterB_3_outDataCore$D_OUT),
										 .FULL_N(captWorker1_metaBram_serverAdapterB_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule captWorker1_metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_metaBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_6),
									       .CLK(CLK),
									       .D_IN(captWorker1_metaBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker1_metaBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker1_metaBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker1_metaBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker1_metaBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker1_metaBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker1_splaF
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) captWorker1_splaF(.RST_N(RST_N_rst_6),
					     .CLK(CLK),
					     .D_IN(captWorker1_splaF$D_IN),
					     .ENQ(captWorker1_splaF$ENQ),
					     .DEQ(captWorker1_splaF$DEQ),
					     .CLR(captWorker1_splaF$CLR),
					     .D_OUT(captWorker1_splaF$D_OUT),
					     .FULL_N(captWorker1_splaF$FULL_N),
					     .EMPTY_N(captWorker1_splaF$EMPTY_N));

  // submodule captWorker1_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_wci_wslv_reqF(.RST_N(RST_N_rst_6),
							 .CLK(CLK),
							 .D_IN(captWorker1_wci_wslv_reqF$D_IN),
							 .ENQ(captWorker1_wci_wslv_reqF$ENQ),
							 .DEQ(captWorker1_wci_wslv_reqF$DEQ),
							 .CLR(captWorker1_wci_wslv_reqF$CLR),
							 .D_OUT(captWorker1_wci_wslv_reqF$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(captWorker1_wci_wslv_reqF$EMPTY_N));

  // submodule captWorker1_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker1_wsiS_reqFifo(.RST_N(RST_N_rst_6),
							.CLK(CLK),
							.D_IN(captWorker1_wsiS_reqFifo$D_IN),
							.ENQ(captWorker1_wsiS_reqFifo$ENQ),
							.DEQ(captWorker1_wsiS_reqFifo$DEQ),
							.CLR(captWorker1_wsiS_reqFifo$CLR),
							.D_OUT(captWorker1_wsiS_reqFifo$D_OUT),
							.FULL_N(captWorker1_wsiS_reqFifo$FULL_N),
							.EMPTY_N(captWorker1_wsiS_reqFifo$EMPTY_N));

  // submodule captWorker2_dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker2_dataBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker2_dataBram_memory$ADDRA),
							  .ADDRB(captWorker2_dataBram_memory$ADDRB),
							  .DIA(captWorker2_dataBram_memory$DIA),
							  .DIB(captWorker2_dataBram_memory$DIB),
							  .WEA(captWorker2_dataBram_memory$WEA),
							  .WEB(captWorker2_dataBram_memory$WEB),
							  .ENA(captWorker2_dataBram_memory$ENA),
							  .ENB(captWorker2_dataBram_memory$ENB),
							  .DOA(captWorker2_dataBram_memory$DOA),
							  .DOB(captWorker2_dataBram_memory$DOB));

  // submodule captWorker2_dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_dataBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_7),
									       .CLK(CLK),
									       .D_IN(captWorker2_dataBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker2_dataBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker2_dataBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker2_dataBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker2_dataBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker2_dataBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker2_dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker2_dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_dataBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_7),
									       .CLK(CLK),
									       .D_IN(captWorker2_dataBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker2_dataBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker2_dataBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker2_dataBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker2_dataBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker2_dataBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker2_metaBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker2_metaBram_memory$ADDRA),
							  .ADDRB(captWorker2_metaBram_memory$ADDRB),
							  .DIA(captWorker2_metaBram_memory$DIA),
							  .DIB(captWorker2_metaBram_memory$DIB),
							  .WEA(captWorker2_metaBram_memory$WEA),
							  .WEB(captWorker2_metaBram_memory$WEB),
							  .ENA(captWorker2_metaBram_memory$ENA),
							  .ENB(captWorker2_metaBram_memory$ENB),
							  .DOA(captWorker2_metaBram_memory$DOA),
							  .DOB(captWorker2_metaBram_memory$DOB));

  // submodule captWorker2_metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker2_metaBram_memory_1(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker2_metaBram_memory_1$ADDRA),
							    .ADDRB(captWorker2_metaBram_memory_1$ADDRB),
							    .DIA(captWorker2_metaBram_memory_1$DIA),
							    .DIB(captWorker2_metaBram_memory_1$DIB),
							    .WEA(captWorker2_metaBram_memory_1$WEA),
							    .WEB(captWorker2_metaBram_memory_1$WEB),
							    .ENA(captWorker2_metaBram_memory_1$ENA),
							    .ENB(captWorker2_metaBram_memory_1$ENB),
							    .DOA(captWorker2_metaBram_memory_1$DOA),
							    .DOB(captWorker2_metaBram_memory_1$DOB));

  // submodule captWorker2_metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker2_metaBram_memory_2(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker2_metaBram_memory_2$ADDRA),
							    .ADDRB(captWorker2_metaBram_memory_2$ADDRB),
							    .DIA(captWorker2_metaBram_memory_2$DIA),
							    .DIB(captWorker2_metaBram_memory_2$DIB),
							    .WEA(captWorker2_metaBram_memory_2$WEA),
							    .WEB(captWorker2_metaBram_memory_2$WEB),
							    .ENA(captWorker2_metaBram_memory_2$ENA),
							    .ENB(captWorker2_metaBram_memory_2$ENB),
							    .DOA(captWorker2_metaBram_memory_2$DOA),
							    .DOB(captWorker2_metaBram_memory_2$DOB));

  // submodule captWorker2_metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker2_metaBram_memory_3(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker2_metaBram_memory_3$ADDRA),
							    .ADDRB(captWorker2_metaBram_memory_3$ADDRB),
							    .DIA(captWorker2_metaBram_memory_3$DIA),
							    .DIB(captWorker2_metaBram_memory_3$DIB),
							    .WEA(captWorker2_metaBram_memory_3$WEA),
							    .WEB(captWorker2_metaBram_memory_3$WEB),
							    .ENA(captWorker2_metaBram_memory_3$ENA),
							    .ENB(captWorker2_metaBram_memory_3$ENB),
							    .DOA(captWorker2_metaBram_memory_3$DOA),
							    .DOB(captWorker2_metaBram_memory_3$DOB));

  // submodule captWorker2_metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterA_1_outDataCore(.RST_N(RST_N_rst_7),
										 .CLK(CLK),
										 .D_IN(captWorker2_metaBram_serverAdapterA_1_outDataCore$D_IN),
										 .ENQ(captWorker2_metaBram_serverAdapterA_1_outDataCore$ENQ),
										 .DEQ(captWorker2_metaBram_serverAdapterA_1_outDataCore$DEQ),
										 .CLR(captWorker2_metaBram_serverAdapterA_1_outDataCore$CLR),
										 .D_OUT(captWorker2_metaBram_serverAdapterA_1_outDataCore$D_OUT),
										 .FULL_N(captWorker2_metaBram_serverAdapterA_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker2_metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterA_2_outDataCore(.RST_N(RST_N_rst_7),
										 .CLK(CLK),
										 .D_IN(captWorker2_metaBram_serverAdapterA_2_outDataCore$D_IN),
										 .ENQ(captWorker2_metaBram_serverAdapterA_2_outDataCore$ENQ),
										 .DEQ(captWorker2_metaBram_serverAdapterA_2_outDataCore$DEQ),
										 .CLR(captWorker2_metaBram_serverAdapterA_2_outDataCore$CLR),
										 .D_OUT(captWorker2_metaBram_serverAdapterA_2_outDataCore$D_OUT),
										 .FULL_N(captWorker2_metaBram_serverAdapterA_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker2_metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterA_3_outDataCore(.RST_N(RST_N_rst_7),
										 .CLK(CLK),
										 .D_IN(captWorker2_metaBram_serverAdapterA_3_outDataCore$D_IN),
										 .ENQ(captWorker2_metaBram_serverAdapterA_3_outDataCore$ENQ),
										 .DEQ(captWorker2_metaBram_serverAdapterA_3_outDataCore$DEQ),
										 .CLR(captWorker2_metaBram_serverAdapterA_3_outDataCore$CLR),
										 .D_OUT(captWorker2_metaBram_serverAdapterA_3_outDataCore$D_OUT),
										 .FULL_N(captWorker2_metaBram_serverAdapterA_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker2_metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_7),
									       .CLK(CLK),
									       .D_IN(captWorker2_metaBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker2_metaBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker2_metaBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker2_metaBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker2_metaBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker2_metaBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker2_metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterB_1_outDataCore(.RST_N(RST_N_rst_7),
										 .CLK(CLK),
										 .D_IN(captWorker2_metaBram_serverAdapterB_1_outDataCore$D_IN),
										 .ENQ(captWorker2_metaBram_serverAdapterB_1_outDataCore$ENQ),
										 .DEQ(captWorker2_metaBram_serverAdapterB_1_outDataCore$DEQ),
										 .CLR(captWorker2_metaBram_serverAdapterB_1_outDataCore$CLR),
										 .D_OUT(captWorker2_metaBram_serverAdapterB_1_outDataCore$D_OUT),
										 .FULL_N(captWorker2_metaBram_serverAdapterB_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterB_2_outDataCore(.RST_N(RST_N_rst_7),
										 .CLK(CLK),
										 .D_IN(captWorker2_metaBram_serverAdapterB_2_outDataCore$D_IN),
										 .ENQ(captWorker2_metaBram_serverAdapterB_2_outDataCore$ENQ),
										 .DEQ(captWorker2_metaBram_serverAdapterB_2_outDataCore$DEQ),
										 .CLR(captWorker2_metaBram_serverAdapterB_2_outDataCore$CLR),
										 .D_OUT(captWorker2_metaBram_serverAdapterB_2_outDataCore$D_OUT),
										 .FULL_N(captWorker2_metaBram_serverAdapterB_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterB_3_outDataCore(.RST_N(RST_N_rst_7),
										 .CLK(CLK),
										 .D_IN(captWorker2_metaBram_serverAdapterB_3_outDataCore$D_IN),
										 .ENQ(captWorker2_metaBram_serverAdapterB_3_outDataCore$ENQ),
										 .DEQ(captWorker2_metaBram_serverAdapterB_3_outDataCore$DEQ),
										 .CLR(captWorker2_metaBram_serverAdapterB_3_outDataCore$CLR),
										 .D_OUT(captWorker2_metaBram_serverAdapterB_3_outDataCore$D_OUT),
										 .FULL_N(captWorker2_metaBram_serverAdapterB_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule captWorker2_metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_metaBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_7),
									       .CLK(CLK),
									       .D_IN(captWorker2_metaBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker2_metaBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker2_metaBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker2_metaBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker2_metaBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker2_metaBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker2_splaF
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) captWorker2_splaF(.RST_N(RST_N_rst_7),
					     .CLK(CLK),
					     .D_IN(captWorker2_splaF$D_IN),
					     .ENQ(captWorker2_splaF$ENQ),
					     .DEQ(captWorker2_splaF$DEQ),
					     .CLR(captWorker2_splaF$CLR),
					     .D_OUT(captWorker2_splaF$D_OUT),
					     .FULL_N(captWorker2_splaF$FULL_N),
					     .EMPTY_N(captWorker2_splaF$EMPTY_N));

  // submodule captWorker2_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_wci_wslv_reqF(.RST_N(RST_N_rst_7),
							 .CLK(CLK),
							 .D_IN(captWorker2_wci_wslv_reqF$D_IN),
							 .ENQ(captWorker2_wci_wslv_reqF$ENQ),
							 .DEQ(captWorker2_wci_wslv_reqF$DEQ),
							 .CLR(captWorker2_wci_wslv_reqF$CLR),
							 .D_OUT(captWorker2_wci_wslv_reqF$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(captWorker2_wci_wslv_reqF$EMPTY_N));

  // submodule captWorker2_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker2_wsiS_reqFifo(.RST_N(RST_N_rst_7),
							.CLK(CLK),
							.D_IN(captWorker2_wsiS_reqFifo$D_IN),
							.ENQ(captWorker2_wsiS_reqFifo$ENQ),
							.DEQ(captWorker2_wsiS_reqFifo$DEQ),
							.CLR(captWorker2_wsiS_reqFifo$CLR),
							.D_OUT(captWorker2_wsiS_reqFifo$D_OUT),
							.FULL_N(captWorker2_wsiS_reqFifo$FULL_N),
							.EMPTY_N(captWorker2_wsiS_reqFifo$EMPTY_N));

  // submodule id
  mkUUID id(.uuid(id$uuid));

  // submodule wciMonW3
  mkWciMonitor #(.monId(8'h80)) wciMonW3(.CLK(CLK),
					 .RST_N(RST_N),
					 .observe_MAddr(wciMonW3$observe_MAddr),
					 .observe_MAddrSpace(wciMonW3$observe_MAddrSpace),
					 .observe_MByteEn(wciMonW3$observe_MByteEn),
					 .observe_MCmd(wciMonW3$observe_MCmd),
					 .observe_MData(wciMonW3$observe_MData),
					 .observe_MFlag(wciMonW3$observe_MFlag),
					 .observe_MReset_n(wciMonW3$observe_MReset_n),
					 .observe_SData(wciMonW3$observe_SData),
					 .observe_SFlag(wciMonW3$observe_SFlag),
					 .observe_SResp(wciMonW3$observe_SResp),
					 .observe_SThreadBusy(wciMonW3$observe_SThreadBusy),
					 .pmem_SThreadBusy(wciMonW3$pmem_SThreadBusy),
					 .pmem_SReset_n(wciMonW3$pmem_SReset_n),
					 .pmem_MCmd(wciMonW3$pmem_MCmd),
					 .pmem_MReqLast(wciMonW3$pmem_MReqLast),
					 .pmem_MBurstPrecise(wciMonW3$pmem_MBurstPrecise),
					 .pmem_MBurstLength(wciMonW3$pmem_MBurstLength),
					 .pmem_MData(wciMonW3$pmem_MData),
					 .pmem_MByteEn(wciMonW3$pmem_MByteEn),
					 .pmem_MReqInfo(wciMonW3$pmem_MReqInfo),
					 .pmem_MReset_n(wciMonW3$pmem_MReset_n));

  // submodule wsimMonW3_observer_evF
  FIFO2 #(.width(32'd99),
	  .guarded(32'd1)) wsimMonW3_observer_evF(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(wsimMonW3_observer_evF$D_IN),
						  .ENQ(wsimMonW3_observer_evF$ENQ),
						  .DEQ(wsimMonW3_observer_evF$DEQ),
						  .CLR(wsimMonW3_observer_evF$CLR),
						  .D_OUT(wsimMonW3_observer_evF$D_OUT),
						  .FULL_N(wsimMonW3_observer_evF$FULL_N),
						  .EMPTY_N(wsimMonW3_observer_evF$EMPTY_N));

  // submodule wsimMonW3_pmsender_evF
  FIFO2 #(.width(32'd99),
	  .guarded(32'd1)) wsimMonW3_pmsender_evF(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(wsimMonW3_pmsender_evF$D_IN),
						  .ENQ(wsimMonW3_pmsender_evF$ENQ),
						  .DEQ(wsimMonW3_pmsender_evF$DEQ),
						  .CLR(wsimMonW3_pmsender_evF$CLR),
						  .D_OUT(wsimMonW3_pmsender_evF$D_OUT),
						  .FULL_N(wsimMonW3_pmsender_evF$FULL_N),
						  .EMPTY_N(wsimMonW3_pmsender_evF$EMPTY_N));

  // submodule wsisMonW3_observer_evF
  FIFO2 #(.width(32'd99),
	  .guarded(32'd1)) wsisMonW3_observer_evF(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(wsisMonW3_observer_evF$D_IN),
						  .ENQ(wsisMonW3_observer_evF$ENQ),
						  .DEQ(wsisMonW3_observer_evF$DEQ),
						  .CLR(wsisMonW3_observer_evF$CLR),
						  .D_OUT(wsisMonW3_observer_evF$D_OUT),
						  .FULL_N(wsisMonW3_observer_evF$FULL_N),
						  .EMPTY_N(wsisMonW3_observer_evF$EMPTY_N));

  // submodule wsisMonW3_pmsender_evF
  FIFO2 #(.width(32'd99),
	  .guarded(32'd1)) wsisMonW3_pmsender_evF(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(wsisMonW3_pmsender_evF$D_IN),
						  .ENQ(wsisMonW3_pmsender_evF$ENQ),
						  .DEQ(wsisMonW3_pmsender_evF$DEQ),
						  .CLR(wsisMonW3_pmsender_evF$CLR),
						  .D_OUT(wsisMonW3_pmsender_evF$D_OUT),
						  .FULL_N(wsisMonW3_pmsender_evF$FULL_N),
						  .EMPTY_N(wsisMonW3_pmsender_evF$EMPTY_N));

  // rule RL_captWorker0_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_wci_ctrl_EiI
  assign WILL_FIRE_RL_captWorker0_wci_ctrl_EiI =
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     captWorker0_wci_wslv_cState == 3'd0 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_captWorker0_wci_ctrl_IsO
  assign WILL_FIRE_RL_captWorker0_wci_ctrl_IsO =
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     captWorker0_wci_wslv_cState == 3'd1 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_captWorker0_wci_ctrl_OrE
  assign WILL_FIRE_RL_captWorker0_wci_ctrl_OrE =
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     captWorker0_wci_wslv_cState == 3'd2 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_captWorker0_wci_cfrd
  assign CAN_FIRE_RL_captWorker0_wci_cfrd =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d997 &&
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 ||
	      captWorker0_wci_wslv_respF_c_r != 2'd2) &&
	     captWorker0_wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_captWorker0_wci_cfrd =
	     CAN_FIRE_RL_captWorker0_wci_cfrd &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_doMessageAccept
  assign WILL_FIRE_RL_captWorker0_doMessageAccept =
	     captWorker0_wsiS_reqFifo$EMPTY_N &&
	     NOT_captWorker0_controlReg_30_BIT_0_31_32_OR_c_ETC___d856 &&
	     captWorker0_wci_wslv_cState == 3'd2 ;

  // rule RL_captWorker0_wci_cfwr
  assign WILL_FIRE_RL_captWorker0_wci_cfwr =
	     captWorker0_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete =
	     captWorker0_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker0_wci_wslv_ctlOpActive &&
	     captWorker0_wci_wslv_ctlAckReg ;

  // rule RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // rule RL_captWorker0_advance_split_response
  assign WILL_FIRE_RL_captWorker0_advance_split_response =
	     captWorker0_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker0_splaF_i_notEmpty__96_AND_IF_captWo_ETC___d929 &&
	     !captWorker0_wci_wslv_wci_cfwr_pw$whas &&
	     captWorker0_splitReadInFlight &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr =
	     ((captWorker0_wci_wslv_respF_c_r == 2'd0) ?
		captWorker0_wci_wslv_respF_x_wire$whas :
		captWorker0_wci_wslv_respF_c_r != 2'd1 ||
		captWorker0_wci_wslv_respF_x_wire$whas) &&
	     captWorker0_wci_wslv_respF_enqueueing$whas &&
	     !(captWorker0_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_captWorker0_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr =
	     captWorker0_wci_wslv_respF_c_r != 2'd0 &&
	     !captWorker0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker0_wci_wslv_respF_both
  assign WILL_FIRE_RL_captWorker0_wci_wslv_respF_both =
	     ((captWorker0_wci_wslv_respF_c_r == 2'd1) ?
		captWorker0_wci_wslv_respF_x_wire$whas :
		captWorker0_wci_wslv_respF_c_r != 2'd2 ||
		captWorker0_wci_wslv_respF_x_wire$whas) &&
	     captWorker0_wci_wslv_respF_c_r != 2'd0 &&
	     captWorker0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq =
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_1_cnt_2$whas &&
	     captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_captWorker0_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq =
	     captWorker0_wsiS_reqFifo$FULL_N && captWorker0_wsiS_operateD &&
	     captWorker0_wsiS_peerIsReady &&
	     captWorker0_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_captWorker0_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;

  // rule RL_wsisMonW3_pmsender_serialize_message
  assign WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message =
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r != 2'd2 &&
	     wsisMonW3_pmsender_evF$EMPTY_N ;

  // rule RL_wsisMonW3_pmsender_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq =
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r != 2'd0 &&
	     !wsisMonW3_pmsender_wsiM_sThreadBusy_d ;

  // rule RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr =
	     ((wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd0) ?
		WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message :
		wsisMonW3_pmsender_wsiM_reqFifo_c_r != 2'd1 ||
		WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message) &&
	     WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message &&
	     !WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq ;

  // rule RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq &&
	     !WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message ;

  // rule RL_wsisMonW3_pmsender_wsiM_reqFifo_both
  assign WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both =
	     ((wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1) ?
		WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message :
		wsisMonW3_pmsender_wsiM_reqFifo_c_r != 2'd2 ||
		WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message) &&
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq &&
	     WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message ;

  // rule RL_captWorker1_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start =
	     captWorker1_wci_wslv_reqF$EMPTY_N &&
	     captWorker1_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker1_wci_ctrl_EiI
  assign WILL_FIRE_RL_captWorker1_wci_ctrl_EiI =
	     captWorker1_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start &&
	     captWorker1_wci_wslv_cState == 3'd0 &&
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_captWorker1_wci_ctrl_IsO
  assign WILL_FIRE_RL_captWorker1_wci_ctrl_IsO =
	     captWorker1_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start &&
	     captWorker1_wci_wslv_cState == 3'd1 &&
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_captWorker1_wci_ctrl_OrE
  assign WILL_FIRE_RL_captWorker1_wci_ctrl_OrE =
	     captWorker1_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start &&
	     captWorker1_wci_wslv_cState == 3'd2 &&
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_captWorker1_wci_cfrd
  assign CAN_FIRE_RL_captWorker1_wci_cfrd =
	     captWorker1_wci_wslv_reqF$EMPTY_N &&
	     IF_captWorker1_wci_wslv_reqF_first__740_BITS_6_ETC___d2692 &&
	     (captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h400 ||
	      captWorker1_wci_wslv_respF_c_r != 2'd2) &&
	     captWorker1_wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_captWorker1_wci_cfrd =
	     CAN_FIRE_RL_captWorker1_wci_cfrd &&
	     !WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker1_doMessageAccept
  assign WILL_FIRE_RL_captWorker1_doMessageAccept =
	     captWorker1_wsiS_reqFifo$EMPTY_N &&
	     NOT_captWorker1_controlReg_525_BIT_0_526_527_O_ETC___d2551 &&
	     captWorker1_wci_wslv_cState == 3'd2 ;

  // rule RL_captWorker1_wci_cfwr
  assign WILL_FIRE_RL_captWorker1_wci_cfwr =
	     captWorker1_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker1_wci_wslv_reqF$EMPTY_N &&
	     captWorker1_wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker1_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete =
	     captWorker1_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker1_wci_wslv_ctlOpActive &&
	     captWorker1_wci_wslv_ctlAckReg ;

  // rule RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;

  // rule RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker1_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // rule RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker1_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // rule RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker1_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // rule RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker1_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // rule RL_captWorker1_advance_split_response
  assign WILL_FIRE_RL_captWorker1_advance_split_response =
	     captWorker1_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker1_splaF_i_notEmpty__591_AND_IF_captW_ETC___d2624 &&
	     !captWorker1_wci_wslv_wci_cfwr_pw$whas &&
	     captWorker1_splitReadInFlight &&
	     !WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker1_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr =
	     ((captWorker1_wci_wslv_respF_c_r == 2'd0) ?
		captWorker1_wci_wslv_respF_x_wire$whas :
		captWorker1_wci_wslv_respF_c_r != 2'd1 ||
		captWorker1_wci_wslv_respF_x_wire$whas) &&
	     captWorker1_wci_wslv_respF_enqueueing$whas &&
	     !(captWorker1_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_captWorker1_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr =
	     captWorker1_wci_wslv_respF_c_r != 2'd0 &&
	     !captWorker1_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker1_wci_wslv_respF_both
  assign WILL_FIRE_RL_captWorker1_wci_wslv_respF_both =
	     ((captWorker1_wci_wslv_respF_c_r == 2'd1) ?
		captWorker1_wci_wslv_respF_x_wire$whas :
		captWorker1_wci_wslv_respF_c_r != 2'd2 ||
		captWorker1_wci_wslv_respF_x_wire$whas) &&
	     captWorker1_wci_wslv_respF_c_r != 2'd0 &&
	     captWorker1_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker1_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_outData_enqAndDeq =
	     captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker1_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker1_dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker1_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_outData_enqAndDeq =
	     captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker1_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_captWorker1_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_captWorker1_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_captWorker1_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq =
	     captWorker1_wsiS_reqFifo$FULL_N && captWorker1_wsiS_operateD &&
	     captWorker1_wsiS_peerIsReady &&
	     captWorker1_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_captWorker1_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_captWorker1_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker1_doMessageAccept ;

  // rule RL_wsimMonW3_pmsender_serialize_message
  assign WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message =
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r != 2'd2 &&
	     wsimMonW3_pmsender_evF$EMPTY_N ;

  // rule RL_wsimMonW3_pmsender_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq =
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r != 2'd0 &&
	     !wsimMonW3_pmsender_wsiM_sThreadBusy_d ;

  // rule RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr =
	     ((wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd0) ?
		WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message :
		wsimMonW3_pmsender_wsiM_reqFifo_c_r != 2'd1 ||
		WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message) &&
	     WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message &&
	     !WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq ;

  // rule RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq &&
	     !WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message ;

  // rule RL_wsimMonW3_pmsender_wsiM_reqFifo_both
  assign WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both =
	     ((wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1) ?
		WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message :
		wsimMonW3_pmsender_wsiM_reqFifo_c_r != 2'd2 ||
		WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message) &&
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq &&
	     WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message ;

  // rule RL_captWorker2_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start =
	     captWorker2_wci_wslv_reqF$EMPTY_N &&
	     captWorker2_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker2_wci_ctrl_EiI
  assign WILL_FIRE_RL_captWorker2_wci_ctrl_EiI =
	     captWorker2_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start &&
	     captWorker2_wci_wslv_cState == 3'd0 &&
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_captWorker2_wci_ctrl_IsO
  assign WILL_FIRE_RL_captWorker2_wci_ctrl_IsO =
	     captWorker2_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start &&
	     captWorker2_wci_wslv_cState == 3'd1 &&
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_captWorker2_wci_ctrl_OrE
  assign WILL_FIRE_RL_captWorker2_wci_ctrl_OrE =
	     captWorker2_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start &&
	     captWorker2_wci_wslv_cState == 3'd2 &&
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_captWorker2_wci_cfrd
  assign CAN_FIRE_RL_captWorker2_wci_cfrd =
	     captWorker2_wci_wslv_reqF$EMPTY_N &&
	     IF_captWorker2_wci_wslv_reqF_first__438_BITS_6_ETC___d4390 &&
	     (captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h400 ||
	      captWorker2_wci_wslv_respF_c_r != 2'd2) &&
	     captWorker2_wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_captWorker2_wci_cfrd =
	     CAN_FIRE_RL_captWorker2_wci_cfrd &&
	     !WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker2_doMessageAccept
  assign WILL_FIRE_RL_captWorker2_doMessageAccept =
	     captWorker2_wsiS_reqFifo$EMPTY_N &&
	     NOT_captWorker2_controlReg_223_BIT_0_224_225_O_ETC___d4249 &&
	     captWorker2_wci_wslv_cState == 3'd2 ;

  // rule RL_captWorker2_wci_cfwr
  assign WILL_FIRE_RL_captWorker2_wci_cfwr =
	     captWorker2_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker2_wci_wslv_reqF$EMPTY_N &&
	     captWorker2_wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker2_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete =
	     captWorker2_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker2_wci_wslv_ctlOpActive &&
	     captWorker2_wci_wslv_ctlAckReg ;

  // rule RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;

  // rule RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker2_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // rule RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker2_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // rule RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker2_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // rule RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     captWorker2_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // rule RL_captWorker2_advance_split_response
  assign WILL_FIRE_RL_captWorker2_advance_split_response =
	     captWorker2_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker2_splaF_i_notEmpty__289_AND_IF_captW_ETC___d4322 &&
	     !captWorker2_wci_wslv_wci_cfwr_pw$whas &&
	     captWorker2_splitReadInFlight &&
	     !WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker2_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr =
	     ((captWorker2_wci_wslv_respF_c_r == 2'd0) ?
		captWorker2_wci_wslv_respF_x_wire$whas :
		captWorker2_wci_wslv_respF_c_r != 2'd1 ||
		captWorker2_wci_wslv_respF_x_wire$whas) &&
	     captWorker2_wci_wslv_respF_enqueueing$whas &&
	     !(captWorker2_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_captWorker2_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr =
	     captWorker2_wci_wslv_respF_c_r != 2'd0 &&
	     !captWorker2_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker2_wci_wslv_respF_both
  assign WILL_FIRE_RL_captWorker2_wci_wslv_respF_both =
	     ((captWorker2_wci_wslv_respF_c_r == 2'd1) ?
		captWorker2_wci_wslv_respF_x_wire$whas :
		captWorker2_wci_wslv_respF_c_r != 2'd2 ||
		captWorker2_wci_wslv_respF_x_wire$whas) &&
	     captWorker2_wci_wslv_respF_c_r != 2'd0 &&
	     captWorker2_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker2_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_outData_enqAndDeq =
	     captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker2_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker2_dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker2_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_outData_enqAndDeq =
	     captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker2_metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker2_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_captWorker2_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterB_2_cnt_2$whas &&
	     captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_captWorker2_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_captWorker2_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq =
	     captWorker2_wsiS_reqFifo$FULL_N && captWorker2_wsiS_operateD &&
	     captWorker2_wsiS_peerIsReady &&
	     captWorker2_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_captWorker2_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_captWorker2_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker2_doMessageAccept ;

  // inputs to muxes for submodule ports
  assign MUX_captWorker0_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_captWorker0_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_captWorker0_dataCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878 ;
  assign MUX_captWorker0_metaCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_captWorker0_metaCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878 &&
	     captWorker0_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_captWorker0_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ;
  assign MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	     captWorker0_wci_wslv_illegalEdge ;
  assign MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     (captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker0_wci_wslv_cState != 3'd0 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      captWorker0_wci_wslv_cState != 3'd1 &&
	      captWorker0_wci_wslv_cState != 3'd3 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker0_wci_wslv_cState != 3'd2 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      captWorker0_wci_wslv_cState != 3'd3 &&
	      captWorker0_wci_wslv_cState != 3'd2 &&
	      captWorker0_wci_wslv_cState != 3'd1 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ;
  assign MUX_captWorker1_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker1_wci_cfwr &&
	     captWorker1_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_captWorker1_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker1_wci_cfwr &&
	     captWorker1_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_captWorker1_dataCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker1_doMessageAccept &&
	     captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573 ;
  assign MUX_captWorker1_metaCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker1_wci_cfwr &&
	     captWorker1_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_captWorker1_metaCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker1_doMessageAccept &&
	     captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573 &&
	     captWorker1_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_captWorker1_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     (captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ;
  assign MUX_captWorker1_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete &&
	     captWorker1_wci_wslv_illegalEdge ;
  assign MUX_captWorker1_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start &&
	     (captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker1_wci_wslv_cState != 3'd0 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      captWorker1_wci_wslv_cState != 3'd1 &&
	      captWorker1_wci_wslv_cState != 3'd3 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker1_wci_wslv_cState != 3'd2 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      captWorker1_wci_wslv_cState != 3'd3 &&
	      captWorker1_wci_wslv_cState != 3'd2 &&
	      captWorker1_wci_wslv_cState != 3'd1 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_captWorker1_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr &&
	     captWorker1_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_captWorker1_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr &&
	     captWorker1_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ;
  assign MUX_captWorker2_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker2_wci_cfwr &&
	     captWorker2_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_captWorker2_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker2_wci_cfwr &&
	     captWorker2_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_captWorker2_dataCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker2_doMessageAccept &&
	     captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271 ;
  assign MUX_captWorker2_metaCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker2_wci_cfwr &&
	     captWorker2_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_captWorker2_metaCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker2_doMessageAccept &&
	     captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271 &&
	     captWorker2_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_captWorker2_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     (captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ;
  assign MUX_captWorker2_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete &&
	     captWorker2_wci_wslv_illegalEdge ;
  assign MUX_captWorker2_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start &&
	     (captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker2_wci_wslv_cState != 3'd0 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      captWorker2_wci_wslv_cState != 3'd1 &&
	      captWorker2_wci_wslv_cState != 3'd3 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker2_wci_wslv_cState != 3'd2 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      captWorker2_wci_wslv_cState != 3'd3 &&
	      captWorker2_wci_wslv_cState != 3'd2 &&
	      captWorker2_wci_wslv_cState != 3'd1 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_captWorker2_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr &&
	     captWorker2_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_captWorker2_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr &&
	     captWorker2_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ;
  assign MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_captWorker0_dataCount$write_1__VAL_2 =
	     captWorker0_dataCount + 32'd1 ;
  assign MUX_captWorker0_metaCount$write_1__VAL_2 =
	     captWorker0_metaCount + 32'd1 ;
  assign MUX_captWorker0_wci_wslv_illegalEdge$write_1__VAL_2 =
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_1 =
	     captWorker0_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_2 =
	     captWorker0_wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (captWorker0_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       captWorker0_wci_wslv_respF_q_1 ;
  always@(MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete or
	  MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_advance_split_response or
	  MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3 or
	  WILL_FIRE_RL_captWorker0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_captWorker0_advance_split_response:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_captWorker0_wci_cfwr:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (captWorker0_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, g_data__h28226 } ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     captWorker0_wci_wslv_illegalEdge ?
	       34'h3C0DE4202 :
	       34'h1C0DE4201 ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     { 2'd1, v__h25765 } ;
  assign MUX_captWorker1_dataCount$write_1__VAL_2 =
	     captWorker1_dataCount + 32'd1 ;
  assign MUX_captWorker1_metaCount$write_1__VAL_2 =
	     captWorker1_metaCount + 32'd1 ;
  assign MUX_captWorker1_wci_wslv_illegalEdge$write_1__VAL_2 =
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_captWorker1_wci_wslv_respF_c_r$write_1__VAL_1 =
	     captWorker1_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_captWorker1_wci_wslv_respF_c_r$write_1__VAL_2 =
	     captWorker1_wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (captWorker1_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 :
	       captWorker1_wci_wslv_respF_q_1 ;
  always@(MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete or
	  MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_captWorker1_advance_split_response or
	  MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_3 or
	  WILL_FIRE_RL_captWorker1_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete:
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_captWorker1_advance_split_response:
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_captWorker1_wci_cfwr:
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_captWorker1_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (captWorker1_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, g_data__h65129 } ;
  assign MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     captWorker1_wci_wslv_illegalEdge ?
	       34'h3C0DE4202 :
	       34'h1C0DE4201 ;
  assign MUX_captWorker1_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     { 2'd1, v__h62668 } ;
  assign MUX_captWorker2_dataCount$write_1__VAL_2 =
	     captWorker2_dataCount + 32'd1 ;
  assign MUX_captWorker2_metaCount$write_1__VAL_2 =
	     captWorker2_metaCount + 32'd1 ;
  assign MUX_captWorker2_wci_wslv_illegalEdge$write_1__VAL_2 =
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_captWorker2_wci_wslv_respF_c_r$write_1__VAL_1 =
	     captWorker2_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_captWorker2_wci_wslv_respF_c_r$write_1__VAL_2 =
	     captWorker2_wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (captWorker2_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 :
	       captWorker2_wci_wslv_respF_q_1 ;
  always@(MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete or
	  MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_captWorker2_advance_split_response or
	  MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_3 or
	  WILL_FIRE_RL_captWorker2_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete:
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_captWorker2_advance_split_response:
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_captWorker2_wci_cfwr:
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_captWorker2_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (captWorker2_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, g_data__h102031 } ;
  assign MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     captWorker2_wci_wslv_illegalEdge ?
	       34'h3C0DE4202 :
	       34'h1C0DE4201 ;
  assign MUX_captWorker2_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     { 2'd1, v__h99570 } ;
  assign MUX_wsimMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsimMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       wsimMonW3_pmsender_wsiM_reqFifo_q_1 ;
  assign MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     { 3'd1,
	       wsimMonW3_pmsender_idx_928_EQ_IF_wsimMonW3_pms_ETC___d4616,
	       1'd0,
	       x_burstLength__h71765,
	       x_data__h71766,
	       12'd3840 } ;
  assign MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_wsisMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsisMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       wsisMonW3_pmsender_wsiM_reqFifo_q_1 ;
  assign MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     { 3'd1,
	       wsisMonW3_pmsender_idx_230_EQ_IF_wsisMonW3_pms_ETC___d4615,
	       1'd0,
	       x_burstLength__h34857,
	       x_data__h34858,
	       12'd3840 } ;
  assign MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign captWorker0_wci_wslv_wciReq$wget =
	     { wci_s_5_MCmd,
	       wci_s_5_MAddrSpace,
	       wci_s_5_MByteEn,
	       wci_s_5_MAddr,
	       wci_s_5_MData } ;
  assign captWorker0_wci_wslv_wciReq$whas = 1'd1 ;
  assign captWorker0_wci_wslv_respF_x_wire$wget =
	     MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign captWorker0_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker0_advance_split_response ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr ;
  assign captWorker0_wci_wslv_wEdge$wget =
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker0_wci_wslv_wEdge$whas =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;
  assign captWorker0_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign captWorker0_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign captWorker0_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign captWorker0_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_captWorker0_wci_ctrl_OrE ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_IsO ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;
  assign captWorker0_wci_wci_Es_mCmd_w$wget = wci_s_5_MCmd ;
  assign captWorker0_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mAddrSpace_w$wget = wci_s_5_MAddrSpace ;
  assign captWorker0_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mAddr_w$wget = wci_s_5_MAddr ;
  assign captWorker0_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mData_w$wget = wci_s_5_MData ;
  assign captWorker0_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mByteEn_w$wget = wci_s_5_MByteEn ;
  assign captWorker0_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker0_wsiS_wsiReq$wget =
	     { wciMonW3$pmem_MCmd,
	       wciMonW3$pmem_MReqLast,
	       wciMonW3$pmem_MBurstPrecise,
	       wciMonW3$pmem_MBurstLength,
	       wciMonW3$pmem_MData,
	       wciMonW3$pmem_MByteEn,
	       wciMonW3$pmem_MReqInfo } ;
  assign captWorker0_wsiS_wsiReq$whas = 1'd1 ;
  assign captWorker0_wsiS_operateD_1$wget = 1'd1 ;
  assign captWorker0_wsiS_operateD_1$whas =
	     captWorker0_wci_wslv_cState == 3'd2 ;
  assign captWorker0_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign captWorker0_wsiS_peerIsReady_1$whas = wciMonW3$pmem_MReset_n ;
  assign captWorker0_wsiS_sThreadBusy_dw$wget =
	     captWorker0_wsiS_reqFifo_countReg > 2'd1 ;
  assign captWorker0_wsiS_sThreadBusy_dw$whas =
	     captWorker0_wsiS_reqFifo_levelsValid &&
	     captWorker0_wsiS_operateD &&
	     captWorker0_wsiS_peerIsReady ;
  assign captWorker0_wtiS_wtiReq$wget = 67'h0 ;
  assign captWorker0_wtiS_wtiReq$whas = 1'b0 ;
  assign captWorker0_wtiS_operateD_1$wget = 1'b0 ;
  assign captWorker0_wtiS_operateD_1$whas = 1'b0 ;
  assign captWorker0_nowW$wget = captWorker0_wtiS_nowReq[63:0] ;
  assign captWorker0_nowW$whas = 1'd1 ;
  assign captWorker0_statusReg_w$wget = rdat___1__h27248 ;
  assign captWorker0_statusReg_w$whas = 1'd1 ;
  assign captWorker0_dataBram_serverAdapterA_outData_enqData$wget =
	     captWorker0_dataBram_memory$DOA ;
  assign captWorker0_dataBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker0_dataBram_serverAdapterA_s1[0] ||
	      captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker0_dataBram_serverAdapterA_s1[1] &&
	     captWorker0_dataBram_serverAdapterA_s1[0] ;
  assign captWorker0_dataBram_serverAdapterA_outData_outData$wget =
	     captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker0_dataBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker0_dataBram_memory$DOA ;
  assign captWorker0_dataBram_serverAdapterA_outData_outData$whas =
	     captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker0_dataBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker0_dataCount$write_1__SEL_2 ;
  assign captWorker0_dataBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker0_dataBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker0_dataCount$write_1__SEL_2 ;
  assign captWorker0_dataBram_serverAdapterB_outData_enqData$wget =
	     captWorker0_dataBram_memory$DOB ;
  assign captWorker0_dataBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker0_dataBram_serverAdapterB_s1[0] ||
	      captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker0_dataBram_serverAdapterB_s1[1] &&
	     captWorker0_dataBram_serverAdapterB_s1[0] ;
  assign captWorker0_dataBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h26392 ;
  assign captWorker0_dataBram_serverAdapterB_outData_outData$whas =
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker0_dataBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker0_dataBram_serverAdapterB_cnt_2$whas =
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker0_dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker0_dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker0_dataBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_dataBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker0_dataBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_outData_enqData$wget =
	     captWorker0_metaBram_memory$DOA ;
  assign captWorker0_metaBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker0_metaBram_memory$DOA ;
  assign captWorker0_metaBram_serverAdapterA_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_outData_enqData$wget =
	     captWorker0_metaBram_memory$DOB ;
  assign captWorker0_metaBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h26436 ;
  assign captWorker0_metaBram_serverAdapterB_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_cnt_2$whas =
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker0_metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_enqData$wget =
	     captWorker0_metaBram_memory_1$DOA ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_1_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_1_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_1_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_1$DOA ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_1_writeWithResp$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_1_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_1_s1_1$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_enqData$wget =
	     captWorker0_metaBram_memory_1$DOB ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_1_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_1_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_1_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h26476 ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_2$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd1 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_1_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_1_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_1_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_1_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_enqData$wget =
	     captWorker0_metaBram_memory_2$DOA ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_2_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_2_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_2_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_2$DOA ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_2_writeWithResp$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_2_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_2_s1_1$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_enqData$wget =
	     captWorker0_metaBram_memory_2$DOB ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_2_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_2_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_2_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h26516 ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_2$whas =
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_2_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_2_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_2_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_2_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_enqData$wget =
	     captWorker0_metaBram_memory_3$DOA ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_3_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_3_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_3_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_3$DOA ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_3_writeWithResp$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_3_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_3_s1_1$whas =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_enqData$wget =
	     captWorker0_metaBram_memory_3$DOB ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_3_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_3_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_3_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h26556 ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_2$whas =
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_3_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_3_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_3_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_3_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker0_wsi_Es_mCmd_w$wget = wciMonW3$pmem_MCmd ;
  assign captWorker0_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mBurstLength_w$wget = wciMonW3$pmem_MBurstLength ;
  assign captWorker0_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mData_w$wget = wciMonW3$pmem_MData ;
  assign captWorker0_wsi_Es_mData_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mByteEn_w$wget = wciMonW3$pmem_MByteEn ;
  assign captWorker0_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mReqInfo_w$wget = wciMonW3$pmem_MReqInfo ;
  assign captWorker0_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign captWorker0_wti_Es_mCmd_w$wget = wti_s_0_MCmd ;
  assign captWorker0_wti_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker0_wti_Es_mData_w$wget = wti_s_0_MData ;
  assign captWorker0_wti_Es_mData_w$whas = 1'd1 ;
  assign wsisMonW3_observer_r_mReqLast_1$wget = 1'b1 ;
  assign wsisMonW3_observer_r_mReqLast_1$whas = appW2$wsiM0_MReqLast ;
  assign wsisMonW3_observer_r_mBurstPrecise_1$wget = 1'b1 ;
  assign wsisMonW3_observer_r_mBurstPrecise_1$whas =
	     appW2$wsiM0_MBurstPrecise ;
  assign wsisMonW3_observer_r_sThreadBusy_1$wget = 1'b1 ;
  assign wsisMonW3_observer_r_sThreadBusy_1$whas = appW3$wsiS0_SThreadBusy ;
  assign wsisMonW3_observer_r_sReset_n_1$wget = 1'b1 ;
  assign wsisMonW3_observer_r_sReset_n_1$whas = appW3$wsiS0_SReset_n ;
  assign wsisMonW3_observer_r_mReset_n_1$wget = 1'b1 ;
  assign wsisMonW3_observer_r_mReset_n_1$whas = appW2$wsiM0_MReset_n ;
  assign wsisMonW3_pmsender_wsiM_reqFifo_x_wire$wget =
	     MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign wsisMonW3_pmsender_wsiM_reqFifo_x_wire$whas =
	     WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message ;
  assign wsisMonW3_pmsender_wsiM_operateD_1$wget = 1'd1 ;
  assign wsisMonW3_pmsender_wsiM_operateD_1$whas = 1'd1 ;
  assign wsisMonW3_pmsender_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsisMonW3_pmsender_wsiM_peerIsReady_1$whas =
	     !captWorker1_wsiS_isReset_isInReset &&
	     captWorker1_wsiS_operateD ;
  assign captWorker1_wci_wslv_wciReq$wget =
	     { wci_s_6_MCmd,
	       wci_s_6_MAddrSpace,
	       wci_s_6_MByteEn,
	       wci_s_6_MAddr,
	       wci_s_6_MData } ;
  assign captWorker1_wci_wslv_wciReq$whas = 1'd1 ;
  assign captWorker1_wci_wslv_respF_x_wire$wget =
	     MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign captWorker1_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker1_advance_split_response ||
	     WILL_FIRE_RL_captWorker1_wci_cfwr ;
  assign captWorker1_wci_wslv_wEdge$wget =
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker1_wci_wslv_wEdge$whas =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start ;
  assign captWorker1_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign captWorker1_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign captWorker1_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign captWorker1_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_captWorker1_wci_ctrl_OrE ||
	     WILL_FIRE_RL_captWorker1_wci_ctrl_IsO ||
	     WILL_FIRE_RL_captWorker1_wci_ctrl_EiI ;
  assign captWorker1_wci_wci_Es_mCmd_w$wget = wci_s_6_MCmd ;
  assign captWorker1_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker1_wci_wci_Es_mAddrSpace_w$wget = wci_s_6_MAddrSpace ;
  assign captWorker1_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign captWorker1_wci_wci_Es_mAddr_w$wget = wci_s_6_MAddr ;
  assign captWorker1_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign captWorker1_wci_wci_Es_mData_w$wget = wci_s_6_MData ;
  assign captWorker1_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign captWorker1_wci_wci_Es_mByteEn_w$wget = wci_s_6_MByteEn ;
  assign captWorker1_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker1_wsiS_wsiReq$wget =
	     { captWorker1_wsi_Es_mCmd_w$wget,
	       captWorker1_wsi_Es_mReqLast_w$whas,
	       captWorker1_wsi_Es_mBurstPrecise_w$whas,
	       captWorker1_wsi_Es_mBurstLength_w$wget,
	       wsisMonW3_pmsender_wsiM_reqFifo_q_0[43:8],
	       captWorker1_wsi_Es_mReqInfo_w$wget } ;
  assign captWorker1_wsiS_wsiReq$whas = 1'd1 ;
  assign captWorker1_wsiS_operateD_1$wget = 1'd1 ;
  assign captWorker1_wsiS_operateD_1$whas =
	     captWorker1_wci_wslv_cState == 3'd2 ;
  assign captWorker1_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign captWorker1_wsiS_peerIsReady_1$whas =
	     !wsisMonW3_pmsender_wsiM_isReset_isInReset &&
	     wsisMonW3_pmsender_wsiM_operateD ;
  assign captWorker1_wsiS_sThreadBusy_dw$wget =
	     captWorker1_wsiS_reqFifo_countReg > 2'd1 ;
  assign captWorker1_wsiS_sThreadBusy_dw$whas =
	     captWorker1_wsiS_reqFifo_levelsValid &&
	     captWorker1_wsiS_operateD &&
	     captWorker1_wsiS_peerIsReady ;
  assign captWorker1_wtiS_wtiReq$wget = 67'h0 ;
  assign captWorker1_wtiS_wtiReq$whas = 1'b0 ;
  assign captWorker1_wtiS_operateD_1$wget = 1'b0 ;
  assign captWorker1_wtiS_operateD_1$whas = 1'b0 ;
  assign captWorker1_nowW$wget = captWorker1_wtiS_nowReq[63:0] ;
  assign captWorker1_nowW$whas = 1'd1 ;
  assign captWorker1_statusReg_w$wget = rdat___1__h64151 ;
  assign captWorker1_statusReg_w$whas = 1'd1 ;
  assign captWorker1_dataBram_serverAdapterA_outData_enqData$wget =
	     captWorker1_dataBram_memory$DOA ;
  assign captWorker1_dataBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker1_dataBram_serverAdapterA_s1[0] ||
	      captWorker1_dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker1_dataBram_serverAdapterA_s1[1] &&
	     captWorker1_dataBram_serverAdapterA_s1[0] ;
  assign captWorker1_dataBram_serverAdapterA_outData_outData$wget =
	     captWorker1_dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker1_dataBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker1_dataBram_memory$DOA ;
  assign captWorker1_dataBram_serverAdapterA_outData_outData$whas =
	     captWorker1_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker1_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker1_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker1_dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker1_dataBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker1_dataBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker1_dataBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker1_dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker1_dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker1_dataBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker1_dataBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker1_dataCount$write_1__SEL_2 ;
  assign captWorker1_dataBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker1_dataBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker1_dataCount$write_1__SEL_2 ;
  assign captWorker1_dataBram_serverAdapterB_outData_enqData$wget =
	     captWorker1_dataBram_memory$DOB ;
  assign captWorker1_dataBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker1_dataBram_serverAdapterB_s1[0] ||
	      captWorker1_dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker1_dataBram_serverAdapterB_s1[1] &&
	     captWorker1_dataBram_serverAdapterB_s1[0] ;
  assign captWorker1_dataBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h63295 ;
  assign captWorker1_dataBram_serverAdapterB_outData_outData$whas =
	     captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker1_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker1_dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker1_dataBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker1_dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker1_dataBram_serverAdapterB_cnt_2$whas =
	     captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker1_dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker1_dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker1_dataBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker1_dataBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker1_dataBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker1_dataBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterA_outData_enqData$wget =
	     captWorker1_metaBram_memory$DOA ;
  assign captWorker1_metaBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterA_s1[0] ||
	      captWorker1_metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterA_s1[1] &&
	     captWorker1_metaBram_serverAdapterA_s1[0] ;
  assign captWorker1_metaBram_serverAdapterA_outData_outData$wget =
	     captWorker1_metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker1_metaBram_memory$DOA ;
  assign captWorker1_metaBram_serverAdapterA_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterB_outData_enqData$wget =
	     captWorker1_metaBram_memory$DOB ;
  assign captWorker1_metaBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterB_s1[0] ||
	      captWorker1_metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterB_s1[1] &&
	     captWorker1_metaBram_serverAdapterB_s1[0] ;
  assign captWorker1_metaBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h63339 ;
  assign captWorker1_metaBram_serverAdapterB_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker1_metaBram_serverAdapterB_cnt_2$whas =
	     captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker1_metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker1_metaBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker1_metaBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterA_1_outData_enqData$wget =
	     captWorker1_metaBram_memory_1$DOA ;
  assign captWorker1_metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterA_1_s1[0] ||
	      captWorker1_metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterA_1_s1[1] &&
	     captWorker1_metaBram_serverAdapterA_1_s1[0] ;
  assign captWorker1_metaBram_serverAdapterA_1_outData_outData$wget =
	     captWorker1_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       captWorker1_metaBram_memory_1$DOA ;
  assign captWorker1_metaBram_serverAdapterA_1_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterA_1_cnt_1$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_1_cnt_2$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_1_cnt_2$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_1_writeWithResp$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_1_writeWithResp$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterA_1_s1_1$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_1_s1_1$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterB_1_outData_enqData$wget =
	     captWorker1_metaBram_memory_1$DOB ;
  assign captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterB_1_s1[0] ||
	      captWorker1_metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterB_1_s1[1] &&
	     captWorker1_metaBram_serverAdapterB_1_s1[0] ;
  assign captWorker1_metaBram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h63379 ;
  assign captWorker1_metaBram_serverAdapterB_1_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt_2$whas =
	     captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_1_writeWithResp$wget = 2'd0 ;
  assign captWorker1_metaBram_serverAdapterB_1_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_1_s1_1$wget = 2'd3 ;
  assign captWorker1_metaBram_serverAdapterB_1_s1_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterA_2_outData_enqData$wget =
	     captWorker1_metaBram_memory_2$DOA ;
  assign captWorker1_metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterA_2_s1[0] ||
	      captWorker1_metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterA_2_s1[1] &&
	     captWorker1_metaBram_serverAdapterA_2_s1[0] ;
  assign captWorker1_metaBram_serverAdapterA_2_outData_outData$wget =
	     captWorker1_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       captWorker1_metaBram_memory_2$DOA ;
  assign captWorker1_metaBram_serverAdapterA_2_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterA_2_cnt_1$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_2_cnt_2$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_2_cnt_2$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_2_writeWithResp$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_2_writeWithResp$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterA_2_s1_1$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_2_s1_1$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterB_2_outData_enqData$wget =
	     captWorker1_metaBram_memory_2$DOB ;
  assign captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterB_2_s1[0] ||
	      captWorker1_metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterB_2_s1[1] &&
	     captWorker1_metaBram_serverAdapterB_2_s1[0] ;
  assign captWorker1_metaBram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h63419 ;
  assign captWorker1_metaBram_serverAdapterB_2_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt_2$whas =
	     captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_2_writeWithResp$wget = 2'd0 ;
  assign captWorker1_metaBram_serverAdapterB_2_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_2_s1_1$wget = 2'd3 ;
  assign captWorker1_metaBram_serverAdapterB_2_s1_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterA_3_outData_enqData$wget =
	     captWorker1_metaBram_memory_3$DOA ;
  assign captWorker1_metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterA_3_s1[0] ||
	      captWorker1_metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterA_3_s1[1] &&
	     captWorker1_metaBram_serverAdapterA_3_s1[0] ;
  assign captWorker1_metaBram_serverAdapterA_3_outData_outData$wget =
	     captWorker1_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       captWorker1_metaBram_memory_3$DOA ;
  assign captWorker1_metaBram_serverAdapterA_3_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterA_3_cnt_1$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_3_cnt_2$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_3_cnt_2$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_3_writeWithResp$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_3_writeWithResp$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterA_3_s1_1$wget = 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_3_s1_1$whas =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_serverAdapterB_3_outData_enqData$wget =
	     captWorker1_metaBram_memory_3$DOB ;
  assign captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!captWorker1_metaBram_serverAdapterB_3_s1[0] ||
	      captWorker1_metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     captWorker1_metaBram_serverAdapterB_3_s1[1] &&
	     captWorker1_metaBram_serverAdapterB_3_s1[0] ;
  assign captWorker1_metaBram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h63459 ;
  assign captWorker1_metaBram_serverAdapterB_3_outData_outData$whas =
	     captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt_2$whas =
	     captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_3_writeWithResp$wget = 2'd0 ;
  assign captWorker1_metaBram_serverAdapterB_3_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker1_metaBram_serverAdapterB_3_s1_1$wget = 2'd3 ;
  assign captWorker1_metaBram_serverAdapterB_3_s1_1$whas =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker1_wsi_Es_mCmd_w$wget =
	     wsisMonW3_pmsender_wsiM_sThreadBusy_d ?
	       3'd0 :
	       wsisMonW3_pmsender_wsiM_reqFifo_q_0[60:58] ;
  assign captWorker1_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker1_wsi_Es_mBurstLength_w$wget =
	     wsisMonW3_pmsender_wsiM_sThreadBusy_d ?
	       12'd0 :
	       wsisMonW3_pmsender_wsiM_reqFifo_q_0[55:44] ;
  assign captWorker1_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign captWorker1_wsi_Es_mData_w$wget =
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[43:12] ;
  assign captWorker1_wsi_Es_mData_w$whas = 1'd1 ;
  assign captWorker1_wsi_Es_mByteEn_w$wget =
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[11:8] ;
  assign captWorker1_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker1_wsi_Es_mReqInfo_w$wget =
	     wsisMonW3_pmsender_wsiM_sThreadBusy_d ?
	       8'd0 :
	       wsisMonW3_pmsender_wsiM_reqFifo_q_0[7:0] ;
  assign captWorker1_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign captWorker1_wti_Es_mCmd_w$wget = wti_s_1_MCmd ;
  assign captWorker1_wti_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker1_wti_Es_mData_w$wget = wti_s_1_MData ;
  assign captWorker1_wti_Es_mData_w$whas = 1'd1 ;
  assign wsimMonW3_observer_r_mReqLast_1$wget = 1'b1 ;
  assign wsimMonW3_observer_r_mReqLast_1$whas = appW3$wsiM0_MReqLast ;
  assign wsimMonW3_observer_r_mBurstPrecise_1$wget = 1'b1 ;
  assign wsimMonW3_observer_r_mBurstPrecise_1$whas =
	     appW3$wsiM0_MBurstPrecise ;
  assign wsimMonW3_observer_r_sThreadBusy_1$wget = 1'b1 ;
  assign wsimMonW3_observer_r_sThreadBusy_1$whas = appW4$wsiS0_SThreadBusy ;
  assign wsimMonW3_observer_r_sReset_n_1$wget = 1'b1 ;
  assign wsimMonW3_observer_r_sReset_n_1$whas = appW4$wsiS0_SReset_n ;
  assign wsimMonW3_observer_r_mReset_n_1$wget = 1'b1 ;
  assign wsimMonW3_observer_r_mReset_n_1$whas = appW3$wsiM0_MReset_n ;
  assign wsimMonW3_pmsender_wsiM_reqFifo_x_wire$wget =
	     MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign wsimMonW3_pmsender_wsiM_reqFifo_x_wire$whas =
	     WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message ;
  assign wsimMonW3_pmsender_wsiM_operateD_1$wget = 1'd1 ;
  assign wsimMonW3_pmsender_wsiM_operateD_1$whas = 1'd1 ;
  assign wsimMonW3_pmsender_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsimMonW3_pmsender_wsiM_peerIsReady_1$whas =
	     !captWorker2_wsiS_isReset_isInReset &&
	     captWorker2_wsiS_operateD ;
  assign captWorker2_wci_wslv_wciReq$wget =
	     { wci_s_7_MCmd,
	       wci_s_7_MAddrSpace,
	       wci_s_7_MByteEn,
	       wci_s_7_MAddr,
	       wci_s_7_MData } ;
  assign captWorker2_wci_wslv_wciReq$whas = 1'd1 ;
  assign captWorker2_wci_wslv_respF_x_wire$wget =
	     MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign captWorker2_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker2_advance_split_response ||
	     WILL_FIRE_RL_captWorker2_wci_cfwr ;
  assign captWorker2_wci_wslv_wEdge$wget =
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker2_wci_wslv_wEdge$whas =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start ;
  assign captWorker2_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign captWorker2_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign captWorker2_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign captWorker2_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_captWorker2_wci_ctrl_OrE ||
	     WILL_FIRE_RL_captWorker2_wci_ctrl_IsO ||
	     WILL_FIRE_RL_captWorker2_wci_ctrl_EiI ;
  assign captWorker2_wci_wci_Es_mCmd_w$wget = wci_s_7_MCmd ;
  assign captWorker2_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker2_wci_wci_Es_mAddrSpace_w$wget = wci_s_7_MAddrSpace ;
  assign captWorker2_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign captWorker2_wci_wci_Es_mAddr_w$wget = wci_s_7_MAddr ;
  assign captWorker2_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign captWorker2_wci_wci_Es_mData_w$wget = wci_s_7_MData ;
  assign captWorker2_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign captWorker2_wci_wci_Es_mByteEn_w$wget = wci_s_7_MByteEn ;
  assign captWorker2_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker2_wsiS_wsiReq$wget =
	     { captWorker2_wsi_Es_mCmd_w$wget,
	       captWorker2_wsi_Es_mReqLast_w$whas,
	       captWorker2_wsi_Es_mBurstPrecise_w$whas,
	       captWorker2_wsi_Es_mBurstLength_w$wget,
	       wsimMonW3_pmsender_wsiM_reqFifo_q_0[43:8],
	       captWorker2_wsi_Es_mReqInfo_w$wget } ;
  assign captWorker2_wsiS_wsiReq$whas = 1'd1 ;
  assign captWorker2_wsiS_operateD_1$wget = 1'd1 ;
  assign captWorker2_wsiS_operateD_1$whas =
	     captWorker2_wci_wslv_cState == 3'd2 ;
  assign captWorker2_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign captWorker2_wsiS_peerIsReady_1$whas =
	     !wsimMonW3_pmsender_wsiM_isReset_isInReset &&
	     wsimMonW3_pmsender_wsiM_operateD ;
  assign captWorker2_wsiS_sThreadBusy_dw$wget =
	     captWorker2_wsiS_reqFifo_countReg > 2'd1 ;
  assign captWorker2_wsiS_sThreadBusy_dw$whas =
	     captWorker2_wsiS_reqFifo_levelsValid &&
	     captWorker2_wsiS_operateD &&
	     captWorker2_wsiS_peerIsReady ;
  assign captWorker2_wtiS_wtiReq$wget = 67'h0 ;
  assign captWorker2_wtiS_wtiReq$whas = 1'b0 ;
  assign captWorker2_wtiS_operateD_1$wget = 1'b0 ;
  assign captWorker2_wtiS_operateD_1$whas = 1'b0 ;
  assign captWorker2_nowW$wget = captWorker2_wtiS_nowReq[63:0] ;
  assign captWorker2_nowW$whas = 1'd1 ;
  assign captWorker2_statusReg_w$wget = rdat___1__h101053 ;
  assign captWorker2_statusReg_w$whas = 1'd1 ;
  assign captWorker2_dataBram_serverAdapterA_outData_enqData$wget =
	     captWorker2_dataBram_memory$DOA ;
  assign captWorker2_dataBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker2_dataBram_serverAdapterA_s1[0] ||
	      captWorker2_dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker2_dataBram_serverAdapterA_s1[1] &&
	     captWorker2_dataBram_serverAdapterA_s1[0] ;
  assign captWorker2_dataBram_serverAdapterA_outData_outData$wget =
	     captWorker2_dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker2_dataBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker2_dataBram_memory$DOA ;
  assign captWorker2_dataBram_serverAdapterA_outData_outData$whas =
	     captWorker2_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker2_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker2_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker2_dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker2_dataBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker2_dataBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker2_dataBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker2_dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker2_dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker2_dataBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker2_dataBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker2_dataCount$write_1__SEL_2 ;
  assign captWorker2_dataBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker2_dataBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker2_dataCount$write_1__SEL_2 ;
  assign captWorker2_dataBram_serverAdapterB_outData_enqData$wget =
	     captWorker2_dataBram_memory$DOB ;
  assign captWorker2_dataBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker2_dataBram_serverAdapterB_s1[0] ||
	      captWorker2_dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker2_dataBram_serverAdapterB_s1[1] &&
	     captWorker2_dataBram_serverAdapterB_s1[0] ;
  assign captWorker2_dataBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h100197 ;
  assign captWorker2_dataBram_serverAdapterB_outData_outData$whas =
	     captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker2_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker2_dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker2_dataBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker2_dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker2_dataBram_serverAdapterB_cnt_2$whas =
	     captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker2_dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker2_dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker2_dataBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker2_dataBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker2_dataBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker2_dataBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterA_outData_enqData$wget =
	     captWorker2_metaBram_memory$DOA ;
  assign captWorker2_metaBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterA_s1[0] ||
	      captWorker2_metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterA_s1[1] &&
	     captWorker2_metaBram_serverAdapterA_s1[0] ;
  assign captWorker2_metaBram_serverAdapterA_outData_outData$wget =
	     captWorker2_metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker2_metaBram_memory$DOA ;
  assign captWorker2_metaBram_serverAdapterA_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterB_outData_enqData$wget =
	     captWorker2_metaBram_memory$DOB ;
  assign captWorker2_metaBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterB_s1[0] ||
	      captWorker2_metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterB_s1[1] &&
	     captWorker2_metaBram_serverAdapterB_s1[0] ;
  assign captWorker2_metaBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h100241 ;
  assign captWorker2_metaBram_serverAdapterB_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker2_metaBram_serverAdapterB_cnt_2$whas =
	     captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker2_metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker2_metaBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker2_metaBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterA_1_outData_enqData$wget =
	     captWorker2_metaBram_memory_1$DOA ;
  assign captWorker2_metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterA_1_s1[0] ||
	      captWorker2_metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterA_1_s1[1] &&
	     captWorker2_metaBram_serverAdapterA_1_s1[0] ;
  assign captWorker2_metaBram_serverAdapterA_1_outData_outData$wget =
	     captWorker2_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       captWorker2_metaBram_memory_1$DOA ;
  assign captWorker2_metaBram_serverAdapterA_1_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterA_1_cnt_1$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_1_cnt_2$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_1_cnt_2$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_1_writeWithResp$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_1_writeWithResp$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterA_1_s1_1$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_1_s1_1$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterB_1_outData_enqData$wget =
	     captWorker2_metaBram_memory_1$DOB ;
  assign captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterB_1_s1[0] ||
	      captWorker2_metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterB_1_s1[1] &&
	     captWorker2_metaBram_serverAdapterB_1_s1[0] ;
  assign captWorker2_metaBram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h100281 ;
  assign captWorker2_metaBram_serverAdapterB_1_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt_2$whas =
	     captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_1_writeWithResp$wget = 2'd0 ;
  assign captWorker2_metaBram_serverAdapterB_1_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_1_s1_1$wget = 2'd3 ;
  assign captWorker2_metaBram_serverAdapterB_1_s1_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterA_2_outData_enqData$wget =
	     captWorker2_metaBram_memory_2$DOA ;
  assign captWorker2_metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterA_2_s1[0] ||
	      captWorker2_metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterA_2_s1[1] &&
	     captWorker2_metaBram_serverAdapterA_2_s1[0] ;
  assign captWorker2_metaBram_serverAdapterA_2_outData_outData$wget =
	     captWorker2_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       captWorker2_metaBram_memory_2$DOA ;
  assign captWorker2_metaBram_serverAdapterA_2_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterA_2_cnt_1$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_2_cnt_2$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_2_cnt_2$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_2_writeWithResp$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_2_writeWithResp$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterA_2_s1_1$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_2_s1_1$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterB_2_outData_enqData$wget =
	     captWorker2_metaBram_memory_2$DOB ;
  assign captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterB_2_s1[0] ||
	      captWorker2_metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterB_2_s1[1] &&
	     captWorker2_metaBram_serverAdapterB_2_s1[0] ;
  assign captWorker2_metaBram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h100321 ;
  assign captWorker2_metaBram_serverAdapterB_2_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt_2$whas =
	     WILL_FIRE_RL_captWorker2_advance_split_response &&
	     !captWorker2_splaF$D_OUT[2] &&
	     captWorker2_splaF$D_OUT[1:0] == 2'd2 ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_2_writeWithResp$wget = 2'd0 ;
  assign captWorker2_metaBram_serverAdapterB_2_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_2_s1_1$wget = 2'd3 ;
  assign captWorker2_metaBram_serverAdapterB_2_s1_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterA_3_outData_enqData$wget =
	     captWorker2_metaBram_memory_3$DOA ;
  assign captWorker2_metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterA_3_s1[0] ||
	      captWorker2_metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterA_3_s1[1] &&
	     captWorker2_metaBram_serverAdapterA_3_s1[0] ;
  assign captWorker2_metaBram_serverAdapterA_3_outData_outData$wget =
	     captWorker2_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       captWorker2_metaBram_memory_3$DOA ;
  assign captWorker2_metaBram_serverAdapterA_3_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterA_3_cnt_1$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_3_cnt_2$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_3_cnt_2$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_3_writeWithResp$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_3_writeWithResp$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterA_3_s1_1$wget = 2'd2 ;
  assign captWorker2_metaBram_serverAdapterA_3_s1_1$whas =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_serverAdapterB_3_outData_enqData$wget =
	     captWorker2_metaBram_memory_3$DOB ;
  assign captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!captWorker2_metaBram_serverAdapterB_3_s1[0] ||
	      captWorker2_metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     captWorker2_metaBram_serverAdapterB_3_s1[1] &&
	     captWorker2_metaBram_serverAdapterB_3_s1[0] ;
  assign captWorker2_metaBram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h100361 ;
  assign captWorker2_metaBram_serverAdapterB_3_outData_outData$whas =
	     captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt_2$whas =
	     captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_3_writeWithResp$wget = 2'd0 ;
  assign captWorker2_metaBram_serverAdapterB_3_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker2_metaBram_serverAdapterB_3_s1_1$wget = 2'd3 ;
  assign captWorker2_metaBram_serverAdapterB_3_s1_1$whas =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker2_wsi_Es_mCmd_w$wget =
	     wsimMonW3_pmsender_wsiM_sThreadBusy_d ?
	       3'd0 :
	       wsimMonW3_pmsender_wsiM_reqFifo_q_0[60:58] ;
  assign captWorker2_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker2_wsi_Es_mBurstLength_w$wget =
	     wsimMonW3_pmsender_wsiM_sThreadBusy_d ?
	       12'd0 :
	       wsimMonW3_pmsender_wsiM_reqFifo_q_0[55:44] ;
  assign captWorker2_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign captWorker2_wsi_Es_mData_w$wget =
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[43:12] ;
  assign captWorker2_wsi_Es_mData_w$whas = 1'd1 ;
  assign captWorker2_wsi_Es_mByteEn_w$wget =
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[11:8] ;
  assign captWorker2_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker2_wsi_Es_mReqInfo_w$wget =
	     wsimMonW3_pmsender_wsiM_sThreadBusy_d ?
	       8'd0 :
	       wsimMonW3_pmsender_wsiM_reqFifo_q_0[7:0] ;
  assign captWorker2_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign captWorker2_wti_Es_mCmd_w$wget = wti_s_2_MCmd ;
  assign captWorker2_wti_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker2_wti_Es_mData_w$wget = wti_s_2_MData ;
  assign captWorker2_wti_Es_mData_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mCmd_w$wget = wci_s_0_MCmd ;
  assign tieOff0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddrSpace_w$wget = wci_s_0_MAddrSpace ;
  assign tieOff0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddr_w$wget = wci_s_0_MAddr ;
  assign tieOff0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mData_w$wget = wci_s_0_MData ;
  assign tieOff0_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mByteEn_w$wget = wci_s_0_MByteEn ;
  assign tieOff0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker0_wci_wslv_reqF_r_enq$whas =
	     captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker0_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_captWorker0_wci_cfrd ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;
  assign captWorker0_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign captWorker0_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_captWorker0_advance_split_response ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;
  assign captWorker0_wci_wslv_respF_dequeueing$whas =
	     captWorker0_wci_wslv_respF_c_r != 2'd0 ;
  assign captWorker0_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign captWorker0_wci_wslv_wci_cfwr_pw$whas =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_reqF$D_OUT[68] &&
	     captWorker0_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign captWorker0_wci_wslv_wci_cfrd_pw$whas =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_reqF$D_OUT[68] &&
	     captWorker0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker0_wci_wslv_wci_ctrl_pw$whas =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     !captWorker0_wci_wslv_reqF$D_OUT[68] &&
	     captWorker0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker0_wsiS_reqFifo_r_enq$whas =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;
  assign captWorker0_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;
  assign captWorker0_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign captWorker0_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;
  assign captWorker0_wsiS_reqFifo_doResetDeq$whas =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;
  assign captWorker0_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker0_metaBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     captWorker0_metaBram_serverAdapterB_1_cnt_2$whas ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd3 ;
  assign captWorker0_wsi_Es_mReqLast_w$whas = wciMonW3$pmem_MReqLast ;
  assign captWorker0_wsi_Es_mBurstPrecise_w$whas =
	     wciMonW3$pmem_MBurstPrecise ;
  assign captWorker0_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsisMonW3_pmsender_wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message ;
  assign wsisMonW3_pmsender_wsiM_reqFifo_dequeueing$whas =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq ;
  assign wsisMonW3_pmsender_wsiM_sThreadBusy_pw$whas =
	     !captWorker1_wsiS_sThreadBusy_dw$whas ||
	     captWorker1_wsiS_sThreadBusy_dw$wget ;
  assign captWorker1_wci_wslv_reqF_r_enq$whas =
	     captWorker1_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker1_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_captWorker1_wci_cfrd ||
	     WILL_FIRE_RL_captWorker1_wci_cfwr ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start ;
  assign captWorker1_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign captWorker1_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker1_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_captWorker1_advance_split_response ||
	     WILL_FIRE_RL_captWorker1_wci_cfwr ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ;
  assign captWorker1_wci_wslv_respF_dequeueing$whas =
	     captWorker1_wci_wslv_respF_c_r != 2'd0 ;
  assign captWorker1_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign captWorker1_wci_wslv_wci_cfwr_pw$whas =
	     captWorker1_wci_wslv_reqF$EMPTY_N &&
	     captWorker1_wci_wslv_reqF$D_OUT[68] &&
	     captWorker1_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign captWorker1_wci_wslv_wci_cfrd_pw$whas =
	     captWorker1_wci_wslv_reqF$EMPTY_N &&
	     captWorker1_wci_wslv_reqF$D_OUT[68] &&
	     captWorker1_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker1_wci_wslv_wci_ctrl_pw$whas =
	     captWorker1_wci_wslv_reqF$EMPTY_N &&
	     !captWorker1_wci_wslv_reqF$D_OUT[68] &&
	     captWorker1_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker1_wsiS_reqFifo_r_enq$whas =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ;
  assign captWorker1_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_captWorker1_doMessageAccept ;
  assign captWorker1_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign captWorker1_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ;
  assign captWorker1_wsiS_reqFifo_doResetDeq$whas =
	     WILL_FIRE_RL_captWorker1_doMessageAccept ;
  assign captWorker1_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign captWorker1_dataBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker1_advance_split_response &&
	     captWorker1_splaF$D_OUT[2] &&
	     captWorker1_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker1_metaBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker1_advance_split_response &&
	     !captWorker1_splaF$D_OUT[2] &&
	     captWorker1_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker1_metaBram_serverAdapterA_1_outData_deqCalled$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker1_advance_split_response &&
	     !captWorker1_splaF$D_OUT[2] &&
	     captWorker1_splaF$D_OUT[1:0] == 2'd1 ;
  assign captWorker1_metaBram_serverAdapterA_2_outData_deqCalled$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker1_advance_split_response &&
	     !captWorker1_splaF$D_OUT[2] &&
	     captWorker1_splaF$D_OUT[1:0] == 2'd2 ;
  assign captWorker1_metaBram_serverAdapterA_3_outData_deqCalled$whas = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker1_advance_split_response &&
	     !captWorker1_splaF$D_OUT[2] &&
	     captWorker1_splaF$D_OUT[1:0] == 2'd3 ;
  assign captWorker1_wsi_Es_mReqLast_w$whas =
	     !wsisMonW3_pmsender_wsiM_sThreadBusy_d &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[57] ;
  assign captWorker1_wsi_Es_mBurstPrecise_w$whas =
	     !wsisMonW3_pmsender_wsiM_sThreadBusy_d &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[56] ;
  assign captWorker1_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsimMonW3_pmsender_wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message ;
  assign wsimMonW3_pmsender_wsiM_reqFifo_dequeueing$whas =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq ;
  assign wsimMonW3_pmsender_wsiM_sThreadBusy_pw$whas =
	     !captWorker2_wsiS_sThreadBusy_dw$whas ||
	     captWorker2_wsiS_sThreadBusy_dw$wget ;
  assign captWorker2_wci_wslv_reqF_r_enq$whas =
	     captWorker2_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker2_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_captWorker2_wci_cfrd ||
	     WILL_FIRE_RL_captWorker2_wci_cfwr ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start ;
  assign captWorker2_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign captWorker2_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     captWorker2_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_captWorker2_advance_split_response ||
	     WILL_FIRE_RL_captWorker2_wci_cfwr ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ;
  assign captWorker2_wci_wslv_respF_dequeueing$whas =
	     captWorker2_wci_wslv_respF_c_r != 2'd0 ;
  assign captWorker2_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign captWorker2_wci_wslv_wci_cfwr_pw$whas =
	     captWorker2_wci_wslv_reqF$EMPTY_N &&
	     captWorker2_wci_wslv_reqF$D_OUT[68] &&
	     captWorker2_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign captWorker2_wci_wslv_wci_cfrd_pw$whas =
	     captWorker2_wci_wslv_reqF$EMPTY_N &&
	     captWorker2_wci_wslv_reqF$D_OUT[68] &&
	     captWorker2_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker2_wci_wslv_wci_ctrl_pw$whas =
	     captWorker2_wci_wslv_reqF$EMPTY_N &&
	     !captWorker2_wci_wslv_reqF$D_OUT[68] &&
	     captWorker2_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker2_wsiS_reqFifo_r_enq$whas =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ;
  assign captWorker2_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_captWorker2_doMessageAccept ;
  assign captWorker2_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign captWorker2_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ;
  assign captWorker2_wsiS_reqFifo_doResetDeq$whas =
	     WILL_FIRE_RL_captWorker2_doMessageAccept ;
  assign captWorker2_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign captWorker2_dataBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker2_advance_split_response &&
	     captWorker2_splaF$D_OUT[2] &&
	     captWorker2_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker2_metaBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker2_advance_split_response &&
	     !captWorker2_splaF$D_OUT[2] &&
	     captWorker2_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker2_metaBram_serverAdapterA_1_outData_deqCalled$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker2_advance_split_response &&
	     !captWorker2_splaF$D_OUT[2] &&
	     captWorker2_splaF$D_OUT[1:0] == 2'd1 ;
  assign captWorker2_metaBram_serverAdapterA_2_outData_deqCalled$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     captWorker2_metaBram_serverAdapterB_2_cnt_2$whas ;
  assign captWorker2_metaBram_serverAdapterA_3_outData_deqCalled$whas = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker2_advance_split_response &&
	     !captWorker2_splaF$D_OUT[2] &&
	     captWorker2_splaF$D_OUT[1:0] == 2'd3 ;
  assign captWorker2_wsi_Es_mReqLast_w$whas =
	     !wsimMonW3_pmsender_wsiM_sThreadBusy_d &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[57] ;
  assign captWorker2_wsi_Es_mBurstPrecise_w$whas =
	     !wsimMonW3_pmsender_wsiM_sThreadBusy_d &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[56] ;
  assign captWorker2_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign captWorker0_wsiS_extStatusW$wget =
	     { captWorker0_wsiS_pMesgCount,
	       captWorker0_wsiS_iMesgCount,
	       captWorker0_wsiS_tBusyCount } ;
  assign wsisMonW3_pmsender_wsiM_extStatusW$wget =
	     { wsisMonW3_pmsender_wsiM_pMesgCount,
	       wsisMonW3_pmsender_wsiM_iMesgCount,
	       wsisMonW3_pmsender_wsiM_tBusyCount } ;
  assign captWorker1_wsiS_extStatusW$wget =
	     { captWorker1_wsiS_pMesgCount,
	       captWorker1_wsiS_iMesgCount,
	       captWorker1_wsiS_tBusyCount } ;
  assign wsimMonW3_pmsender_wsiM_extStatusW$wget =
	     { wsimMonW3_pmsender_wsiM_pMesgCount,
	       wsimMonW3_pmsender_wsiM_iMesgCount,
	       wsimMonW3_pmsender_wsiM_tBusyCount } ;
  assign captWorker2_wsiS_extStatusW$wget =
	     { captWorker2_wsiS_pMesgCount,
	       captWorker2_wsiS_iMesgCount,
	       captWorker2_wsiS_tBusyCount } ;

  // register captWorker0_controlReg
  assign captWorker0_controlReg$D_IN =
	     MUX_captWorker0_controlReg$write_1__SEL_1 ?
	       captWorker0_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign captWorker0_controlReg$EN =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;

  // register captWorker0_dataBram_serverAdapterA_cnt
  assign captWorker0_dataBram_serverAdapterA_cnt$D_IN =
	     captWorker0_dataBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker0_dataBram_serverAdapterA_s1
  assign captWorker0_dataBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker0_dataCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker0_dataBram_serverAdapterB_cnt
  assign captWorker0_dataBram_serverAdapterB_cnt$D_IN =
	     captWorker0_dataBram_serverAdapterB_cnt_21_PLU_ETC___d327 ;
  assign captWorker0_dataBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker0_dataBram_serverAdapterB_s1
  assign captWorker0_dataBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker0_dataCount
  always@(MUX_captWorker0_dataCount$write_1__SEL_1 or
	  captWorker0_wci_wslv_reqF$D_OUT or
	  MUX_captWorker0_dataCount$write_1__SEL_2 or
	  MUX_captWorker0_dataCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker0_dataCount$write_1__SEL_1:
	captWorker0_dataCount$D_IN = captWorker0_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker0_dataCount$write_1__SEL_2:
	captWorker0_dataCount$D_IN = MUX_captWorker0_dataCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker0_wci_ctrl_EiI: captWorker0_dataCount$D_IN = 32'd0;
    default: captWorker0_dataCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker0_dataCount$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878 ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;

  // register captWorker0_isFirst
  assign captWorker0_isFirst$D_IN = 1'b0 ;
  assign captWorker0_isFirst$EN = 1'b0 ;

  // register captWorker0_mesgLengthSoFar
  assign captWorker0_mesgLengthSoFar$D_IN =
	     captWorker0_wsiS_reqFifo$D_OUT[57] ? 14'd0 : mlB__h23537 ;
  assign captWorker0_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;

  // register captWorker0_metaBram_serverAdapterA_1_cnt
  assign captWorker0_metaBram_serverAdapterA_1_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_1_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_1_s1
  assign captWorker0_metaBram_serverAdapterA_1_s1$D_IN =
	     { MUX_captWorker0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterA_2_cnt
  assign captWorker0_metaBram_serverAdapterA_2_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_2_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_2_s1
  assign captWorker0_metaBram_serverAdapterA_2_s1$D_IN =
	     { MUX_captWorker0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterA_3_cnt
  assign captWorker0_metaBram_serverAdapterA_3_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_3_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_3_s1
  assign captWorker0_metaBram_serverAdapterA_3_s1$D_IN =
	     { MUX_captWorker0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterA_cnt
  assign captWorker0_metaBram_serverAdapterA_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_s1
  assign captWorker0_metaBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_1_cnt
  assign captWorker0_metaBram_serverAdapterB_1_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_1_cnt_57_P_ETC___d563 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_1_cnt_2$whas ;

  // register captWorker0_metaBram_serverAdapterB_1_s1
  assign captWorker0_metaBram_serverAdapterB_1_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_2_cnt
  assign captWorker0_metaBram_serverAdapterB_2_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_2_cnt_75_P_ETC___d681 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;

  // register captWorker0_metaBram_serverAdapterB_2_s1
  assign captWorker0_metaBram_serverAdapterB_2_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_3_cnt
  assign captWorker0_metaBram_serverAdapterB_3_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_3_cnt_93_P_ETC___d799 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register captWorker0_metaBram_serverAdapterB_3_s1
  assign captWorker0_metaBram_serverAdapterB_3_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_cnt
  assign captWorker0_metaBram_serverAdapterB_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_cnt_39_PLU_ETC___d445 ;
  assign captWorker0_metaBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker0_metaBram_serverAdapterB_s1
  assign captWorker0_metaBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker0_metaCount
  always@(MUX_captWorker0_metaCount$write_1__SEL_1 or
	  captWorker0_wci_wslv_reqF$D_OUT or
	  MUX_captWorker0_metaCount$write_1__SEL_2 or
	  MUX_captWorker0_metaCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker0_metaCount$write_1__SEL_1:
	captWorker0_metaCount$D_IN = captWorker0_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker0_metaCount$write_1__SEL_2:
	captWorker0_metaCount$D_IN = MUX_captWorker0_metaCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker0_wci_ctrl_EiI: captWorker0_metaCount$D_IN = 32'd0;
    default: captWorker0_metaCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker0_metaCount$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878 &&
	     captWorker0_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;

  // register captWorker0_splitReadInFlight
  assign captWorker0_splitReadInFlight$D_IN =
	     MUX_captWorker0_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker0_splitReadInFlight$EN =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ||
	     WILL_FIRE_RL_captWorker0_advance_split_response ;

  // register captWorker0_wci_wslv_cEdge
  assign captWorker0_wci_wslv_cEdge$D_IN =
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker0_wci_wslv_cEdge$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;

  // register captWorker0_wci_wslv_cState
  assign captWorker0_wci_wslv_cState$D_IN = captWorker0_wci_wslv_nState ;
  assign captWorker0_wci_wslv_cState$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	     !captWorker0_wci_wslv_illegalEdge ;

  // register captWorker0_wci_wslv_ctlAckReg
  assign captWorker0_wci_wslv_ctlAckReg$D_IN =
	     captWorker0_wci_wslv_ctlAckReg_1$whas ;
  assign captWorker0_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register captWorker0_wci_wslv_ctlOpActive
  assign captWorker0_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;
  assign captWorker0_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;

  // register captWorker0_wci_wslv_illegalEdge
  assign captWorker0_wci_wslv_illegalEdge$D_IN =
	     !MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_captWorker0_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign captWorker0_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	     captWorker0_wci_wslv_illegalEdge ||
	     MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register captWorker0_wci_wslv_isReset_isInReset
  assign captWorker0_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker0_wci_wslv_isReset_isInReset$EN =
	     captWorker0_wci_wslv_isReset_isInReset ;

  // register captWorker0_wci_wslv_nState
  always@(captWorker0_wci_wslv_reqF$D_OUT)
  begin
    case (captWorker0_wci_wslv_reqF$D_OUT[36:34])
      3'd0: captWorker0_wci_wslv_nState$D_IN = 3'd1;
      3'd1: captWorker0_wci_wslv_nState$D_IN = 3'd2;
      3'd2: captWorker0_wci_wslv_nState$D_IN = 3'd3;
      default: captWorker0_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign captWorker0_wci_wslv_nState$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     (captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker0_wci_wslv_cState == 3'd0 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (captWorker0_wci_wslv_cState == 3'd1 ||
	       captWorker0_wci_wslv_cState == 3'd3) ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker0_wci_wslv_cState == 3'd2 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (captWorker0_wci_wslv_cState == 3'd3 ||
	       captWorker0_wci_wslv_cState == 3'd2 ||
	       captWorker0_wci_wslv_cState == 3'd1)) ;

  // register captWorker0_wci_wslv_reqF_countReg
  assign captWorker0_wci_wslv_reqF_countReg$D_IN =
	     (captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       captWorker0_wci_wslv_reqF_countReg + 2'd1 :
	       captWorker0_wci_wslv_reqF_countReg - 2'd1 ;
  assign captWorker0_wci_wslv_reqF_countReg$EN =
	     (captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     captWorker0_wci_wslv_reqF_r_deq$whas ;

  // register captWorker0_wci_wslv_respF_c_r
  assign captWorker0_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr ?
	       MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign captWorker0_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr ;

  // register captWorker0_wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_captWorker0_wci_wslv_respF_both or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr or
	  captWorker0_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_both:
	  captWorker0_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2:
	  captWorker0_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr:
	  captWorker0_wci_wslv_respF_q_0$D_IN =
	      captWorker0_wci_wslv_respF_q_1;
      default: captWorker0_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker0_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr ;

  // register captWorker0_wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_captWorker0_wci_wslv_respF_both or
	  MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_both:
	  captWorker0_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2:
	  captWorker0_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr:
	  captWorker0_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: captWorker0_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker0_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr ;

  // register captWorker0_wci_wslv_sFlagReg
  assign captWorker0_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign captWorker0_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register captWorker0_wci_wslv_sThreadBusy_d
  assign captWorker0_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign captWorker0_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register captWorker0_wsiS_burstKind
  assign captWorker0_wsiS_burstKind$D_IN =
	     (captWorker0_wsiS_burstKind == 2'd0) ?
	       (captWorker0_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign captWorker0_wsiS_burstKind$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     (captWorker0_wsiS_burstKind == 2'd0 ||
	      (captWorker0_wsiS_burstKind == 2'd1 ||
	       captWorker0_wsiS_burstKind == 2'd2) &&
	      captWorker0_wsiS_wsiReq$wget[57]) ;

  // register captWorker0_wsiS_errorSticky
  assign captWorker0_wsiS_errorSticky$D_IN = 1'b0 ;
  assign captWorker0_wsiS_errorSticky$EN = 1'b0 ;

  // register captWorker0_wsiS_iMesgCount
  assign captWorker0_wsiS_iMesgCount$D_IN =
	     captWorker0_wsiS_iMesgCount + 32'd1 ;
  assign captWorker0_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     captWorker0_wsiS_burstKind == 2'd2 &&
	     captWorker0_wsiS_wsiReq$wget[57] ;

  // register captWorker0_wsiS_isReset_isInReset
  assign captWorker0_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker0_wsiS_isReset_isInReset$EN =
	     captWorker0_wsiS_isReset_isInReset ;

  // register captWorker0_wsiS_mesgWordLength
  assign captWorker0_wsiS_mesgWordLength$D_IN = captWorker0_wsiS_wordCount ;
  assign captWorker0_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     captWorker0_wsiS_wsiReq$wget[57] ;

  // register captWorker0_wsiS_operateD
  assign captWorker0_wsiS_operateD$D_IN =
	     captWorker0_wci_wslv_cState == 3'd2 ;
  assign captWorker0_wsiS_operateD$EN = 1'd1 ;

  // register captWorker0_wsiS_pMesgCount
  assign captWorker0_wsiS_pMesgCount$D_IN =
	     captWorker0_wsiS_pMesgCount + 32'd1 ;
  assign captWorker0_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     captWorker0_wsiS_burstKind == 2'd1 &&
	     captWorker0_wsiS_wsiReq$wget[57] ;

  // register captWorker0_wsiS_peerIsReady
  assign captWorker0_wsiS_peerIsReady$D_IN = wciMonW3$pmem_MReset_n ;
  assign captWorker0_wsiS_peerIsReady$EN = 1'd1 ;

  // register captWorker0_wsiS_reqFifo_countReg
  assign captWorker0_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ?
	       captWorker0_wsiS_reqFifo_countReg + 2'd1 :
	       captWorker0_wsiS_reqFifo_countReg - 2'd1 ;
  assign captWorker0_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq !=
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;

  // register captWorker0_wsiS_reqFifo_levelsValid
  assign captWorker0_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset ;
  assign captWorker0_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ||
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset ;

  // register captWorker0_wsiS_statusR
  assign captWorker0_wsiS_statusR$D_IN =
	     { captWorker0_wsiS_isReset_isInReset,
	       !captWorker0_wsiS_peerIsReady,
	       !captWorker0_wsiS_operateD,
	       captWorker0_wsiS_errorSticky,
	       captWorker0_wsiS_burstKind != 2'd0,
	       !captWorker0_wsiS_sThreadBusy_dw$whas ||
	       captWorker0_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       captWorker0_wsiS_trafficSticky } ;
  assign captWorker0_wsiS_statusR$EN = 1'd1 ;

  // register captWorker0_wsiS_tBusyCount
  assign captWorker0_wsiS_tBusyCount$D_IN =
	     captWorker0_wsiS_tBusyCount + 32'd1 ;
  assign captWorker0_wsiS_tBusyCount$EN =
	     captWorker0_wsiS_operateD && captWorker0_wsiS_peerIsReady &&
	     (!captWorker0_wsiS_sThreadBusy_dw$whas ||
	      captWorker0_wsiS_sThreadBusy_dw$wget) ;

  // register captWorker0_wsiS_trafficSticky
  assign captWorker0_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign captWorker0_wsiS_trafficSticky$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;

  // register captWorker0_wsiS_wordCount
  assign captWorker0_wsiS_wordCount$D_IN =
	     captWorker0_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       captWorker0_wsiS_wordCount + 12'd1 ;
  assign captWorker0_wsiS_wordCount$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;

  // register captWorker0_wtiS_isReset_isInReset
  assign captWorker0_wtiS_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker0_wtiS_isReset_isInReset$EN =
	     captWorker0_wtiS_isReset_isInReset ;

  // register captWorker0_wtiS_nowReq
  assign captWorker0_wtiS_nowReq$D_IN = { wti_s_0_MCmd, wti_s_0_MData } ;
  assign captWorker0_wtiS_nowReq$EN = 1'd1 ;

  // register captWorker0_wtiS_operateD
  assign captWorker0_wtiS_operateD$D_IN = 1'b1 ;
  assign captWorker0_wtiS_operateD$EN = 1'd1 ;

  // register captWorker1_controlReg
  assign captWorker1_controlReg$D_IN =
	     MUX_captWorker1_controlReg$write_1__SEL_1 ?
	       captWorker1_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign captWorker1_controlReg$EN =
	     WILL_FIRE_RL_captWorker1_wci_cfwr &&
	     captWorker1_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_captWorker1_wci_ctrl_EiI ;

  // register captWorker1_dataBram_serverAdapterA_cnt
  assign captWorker1_dataBram_serverAdapterA_cnt$D_IN =
	     captWorker1_dataBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker1_dataBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker1_dataBram_serverAdapterA_s1
  assign captWorker1_dataBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker1_dataCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker1_dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker1_dataBram_serverAdapterB_cnt
  assign captWorker1_dataBram_serverAdapterB_cnt$D_IN =
	     captWorker1_dataBram_serverAdapterB_cnt_016_PL_ETC___d2022 ;
  assign captWorker1_dataBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker1_dataBram_serverAdapterB_s1
  assign captWorker1_dataBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker1_dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker1_dataCount
  always@(MUX_captWorker1_dataCount$write_1__SEL_1 or
	  captWorker1_wci_wslv_reqF$D_OUT or
	  MUX_captWorker1_dataCount$write_1__SEL_2 or
	  MUX_captWorker1_dataCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker1_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker1_dataCount$write_1__SEL_1:
	captWorker1_dataCount$D_IN = captWorker1_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker1_dataCount$write_1__SEL_2:
	captWorker1_dataCount$D_IN = MUX_captWorker1_dataCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker1_wci_ctrl_EiI: captWorker1_dataCount$D_IN = 32'd0;
    default: captWorker1_dataCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker1_dataCount$EN =
	     WILL_FIRE_RL_captWorker1_doMessageAccept &&
	     captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573 ||
	     WILL_FIRE_RL_captWorker1_wci_cfwr &&
	     captWorker1_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     WILL_FIRE_RL_captWorker1_wci_ctrl_EiI ;

  // register captWorker1_isFirst
  assign captWorker1_isFirst$D_IN = 1'b0 ;
  assign captWorker1_isFirst$EN = 1'b0 ;

  // register captWorker1_mesgLengthSoFar
  assign captWorker1_mesgLengthSoFar$D_IN =
	     captWorker1_wsiS_reqFifo$D_OUT[57] ? 14'd0 : mlB__h60440 ;
  assign captWorker1_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_captWorker1_doMessageAccept ;

  // register captWorker1_metaBram_serverAdapterA_1_cnt
  assign captWorker1_metaBram_serverAdapterA_1_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterA_1_cnt + 3'd0 + 3'd0 ;
  assign captWorker1_metaBram_serverAdapterA_1_cnt$EN = 1'b0 ;

  // register captWorker1_metaBram_serverAdapterA_1_s1
  assign captWorker1_metaBram_serverAdapterA_1_s1$D_IN =
	     { MUX_captWorker1_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker1_metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register captWorker1_metaBram_serverAdapterA_2_cnt
  assign captWorker1_metaBram_serverAdapterA_2_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterA_2_cnt + 3'd0 + 3'd0 ;
  assign captWorker1_metaBram_serverAdapterA_2_cnt$EN = 1'b0 ;

  // register captWorker1_metaBram_serverAdapterA_2_s1
  assign captWorker1_metaBram_serverAdapterA_2_s1$D_IN =
	     { MUX_captWorker1_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker1_metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register captWorker1_metaBram_serverAdapterA_3_cnt
  assign captWorker1_metaBram_serverAdapterA_3_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterA_3_cnt + 3'd0 + 3'd0 ;
  assign captWorker1_metaBram_serverAdapterA_3_cnt$EN = 1'b0 ;

  // register captWorker1_metaBram_serverAdapterA_3_s1
  assign captWorker1_metaBram_serverAdapterA_3_s1$D_IN =
	     { MUX_captWorker1_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker1_metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register captWorker1_metaBram_serverAdapterA_cnt
  assign captWorker1_metaBram_serverAdapterA_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker1_metaBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker1_metaBram_serverAdapterA_s1
  assign captWorker1_metaBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker1_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker1_metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker1_metaBram_serverAdapterB_1_cnt
  assign captWorker1_metaBram_serverAdapterB_1_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterB_1_cnt_252__ETC___d2258 ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt$EN =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways ||
	     captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas ;

  // register captWorker1_metaBram_serverAdapterB_1_s1
  assign captWorker1_metaBram_serverAdapterB_1_s1$D_IN =
	     { WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker1_metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register captWorker1_metaBram_serverAdapterB_2_cnt
  assign captWorker1_metaBram_serverAdapterB_2_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterB_2_cnt_370__ETC___d2376 ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt$EN =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways ||
	     captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas ;

  // register captWorker1_metaBram_serverAdapterB_2_s1
  assign captWorker1_metaBram_serverAdapterB_2_s1$D_IN =
	     { WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker1_metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register captWorker1_metaBram_serverAdapterB_3_cnt
  assign captWorker1_metaBram_serverAdapterB_3_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterB_3_cnt_488__ETC___d2494 ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt$EN =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways ||
	     captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register captWorker1_metaBram_serverAdapterB_3_s1
  assign captWorker1_metaBram_serverAdapterB_3_s1$D_IN =
	     { WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker1_metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register captWorker1_metaBram_serverAdapterB_cnt
  assign captWorker1_metaBram_serverAdapterB_cnt$D_IN =
	     captWorker1_metaBram_serverAdapterB_cnt_134_PL_ETC___d2140 ;
  assign captWorker1_metaBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker1_metaBram_serverAdapterB_s1
  assign captWorker1_metaBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker1_metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker1_metaCount
  always@(MUX_captWorker1_metaCount$write_1__SEL_1 or
	  captWorker1_wci_wslv_reqF$D_OUT or
	  MUX_captWorker1_metaCount$write_1__SEL_2 or
	  MUX_captWorker1_metaCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker1_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker1_metaCount$write_1__SEL_1:
	captWorker1_metaCount$D_IN = captWorker1_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker1_metaCount$write_1__SEL_2:
	captWorker1_metaCount$D_IN = MUX_captWorker1_metaCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker1_wci_ctrl_EiI: captWorker1_metaCount$D_IN = 32'd0;
    default: captWorker1_metaCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker1_metaCount$EN =
	     WILL_FIRE_RL_captWorker1_doMessageAccept &&
	     captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573 &&
	     captWorker1_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_captWorker1_wci_cfwr &&
	     captWorker1_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_captWorker1_wci_ctrl_EiI ;

  // register captWorker1_splitReadInFlight
  assign captWorker1_splitReadInFlight$D_IN =
	     MUX_captWorker1_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker1_splitReadInFlight$EN =
	     WILL_FIRE_RL_captWorker1_wci_cfrd &&
	     (captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ||
	     WILL_FIRE_RL_captWorker1_advance_split_response ;

  // register captWorker1_wci_wslv_cEdge
  assign captWorker1_wci_wslv_cEdge$D_IN =
	     captWorker1_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker1_wci_wslv_cEdge$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start ;

  // register captWorker1_wci_wslv_cState
  assign captWorker1_wci_wslv_cState$D_IN = captWorker1_wci_wslv_nState ;
  assign captWorker1_wci_wslv_cState$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete &&
	     !captWorker1_wci_wslv_illegalEdge ;

  // register captWorker1_wci_wslv_ctlAckReg
  assign captWorker1_wci_wslv_ctlAckReg$D_IN =
	     captWorker1_wci_wslv_ctlAckReg_1$whas ;
  assign captWorker1_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register captWorker1_wci_wslv_ctlOpActive
  assign captWorker1_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ;
  assign captWorker1_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start ;

  // register captWorker1_wci_wslv_illegalEdge
  assign captWorker1_wci_wslv_illegalEdge$D_IN =
	     !MUX_captWorker1_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_captWorker1_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign captWorker1_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete &&
	     captWorker1_wci_wslv_illegalEdge ||
	     MUX_captWorker1_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register captWorker1_wci_wslv_isReset_isInReset
  assign captWorker1_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker1_wci_wslv_isReset_isInReset$EN =
	     captWorker1_wci_wslv_isReset_isInReset ;

  // register captWorker1_wci_wslv_nState
  always@(captWorker1_wci_wslv_reqF$D_OUT)
  begin
    case (captWorker1_wci_wslv_reqF$D_OUT[36:34])
      3'd0: captWorker1_wci_wslv_nState$D_IN = 3'd1;
      3'd1: captWorker1_wci_wslv_nState$D_IN = 3'd2;
      3'd2: captWorker1_wci_wslv_nState$D_IN = 3'd3;
      default: captWorker1_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign captWorker1_wci_wslv_nState$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start &&
	     (captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker1_wci_wslv_cState == 3'd0 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (captWorker1_wci_wslv_cState == 3'd1 ||
	       captWorker1_wci_wslv_cState == 3'd3) ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker1_wci_wslv_cState == 3'd2 ||
	      captWorker1_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (captWorker1_wci_wslv_cState == 3'd3 ||
	       captWorker1_wci_wslv_cState == 3'd2 ||
	       captWorker1_wci_wslv_cState == 3'd1)) ;

  // register captWorker1_wci_wslv_reqF_countReg
  assign captWorker1_wci_wslv_reqF_countReg$D_IN =
	     (captWorker1_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       captWorker1_wci_wslv_reqF_countReg + 2'd1 :
	       captWorker1_wci_wslv_reqF_countReg - 2'd1 ;
  assign captWorker1_wci_wslv_reqF_countReg$EN =
	     (captWorker1_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     captWorker1_wci_wslv_reqF_r_deq$whas ;

  // register captWorker1_wci_wslv_respF_c_r
  assign captWorker1_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr ?
	       MUX_captWorker1_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_captWorker1_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign captWorker1_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr ;

  // register captWorker1_wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_captWorker1_wci_wslv_respF_both or
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr or
	  captWorker1_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker1_wci_wslv_respF_both:
	  captWorker1_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_captWorker1_wci_wslv_respF_q_0$write_1__SEL_2:
	  captWorker1_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr:
	  captWorker1_wci_wslv_respF_q_0$D_IN =
	      captWorker1_wci_wslv_respF_q_1;
      default: captWorker1_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker1_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr &&
	     captWorker1_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr ;

  // register captWorker1_wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_captWorker1_wci_wslv_respF_both or
	  MUX_captWorker1_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_captWorker1_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker1_wci_wslv_respF_both:
	  captWorker1_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker1_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_captWorker1_wci_wslv_respF_q_1$write_1__SEL_2:
	  captWorker1_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker1_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr:
	  captWorker1_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: captWorker1_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker1_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_incCtr &&
	     captWorker1_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_captWorker1_wci_wslv_respF_decCtr ;

  // register captWorker1_wci_wslv_sFlagReg
  assign captWorker1_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign captWorker1_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register captWorker1_wci_wslv_sThreadBusy_d
  assign captWorker1_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign captWorker1_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register captWorker1_wsiS_burstKind
  assign captWorker1_wsiS_burstKind$D_IN =
	     (captWorker1_wsiS_burstKind == 2'd0) ?
	       (captWorker1_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign captWorker1_wsiS_burstKind$EN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq &&
	     (captWorker1_wsiS_burstKind == 2'd0 ||
	      (captWorker1_wsiS_burstKind == 2'd1 ||
	       captWorker1_wsiS_burstKind == 2'd2) &&
	      captWorker1_wsiS_wsiReq$wget[57]) ;

  // register captWorker1_wsiS_errorSticky
  assign captWorker1_wsiS_errorSticky$D_IN = 1'b0 ;
  assign captWorker1_wsiS_errorSticky$EN = 1'b0 ;

  // register captWorker1_wsiS_iMesgCount
  assign captWorker1_wsiS_iMesgCount$D_IN =
	     captWorker1_wsiS_iMesgCount + 32'd1 ;
  assign captWorker1_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq &&
	     captWorker1_wsiS_burstKind == 2'd2 &&
	     captWorker1_wsiS_wsiReq$wget[57] ;

  // register captWorker1_wsiS_isReset_isInReset
  assign captWorker1_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker1_wsiS_isReset_isInReset$EN =
	     captWorker1_wsiS_isReset_isInReset ;

  // register captWorker1_wsiS_mesgWordLength
  assign captWorker1_wsiS_mesgWordLength$D_IN = captWorker1_wsiS_wordCount ;
  assign captWorker1_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq &&
	     captWorker1_wsiS_wsiReq$wget[57] ;

  // register captWorker1_wsiS_operateD
  assign captWorker1_wsiS_operateD$D_IN =
	     captWorker1_wci_wslv_cState == 3'd2 ;
  assign captWorker1_wsiS_operateD$EN = 1'd1 ;

  // register captWorker1_wsiS_pMesgCount
  assign captWorker1_wsiS_pMesgCount$D_IN =
	     captWorker1_wsiS_pMesgCount + 32'd1 ;
  assign captWorker1_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq &&
	     captWorker1_wsiS_burstKind == 2'd1 &&
	     captWorker1_wsiS_wsiReq$wget[57] ;

  // register captWorker1_wsiS_peerIsReady
  assign captWorker1_wsiS_peerIsReady$D_IN =
	     captWorker1_wsiS_peerIsReady_1$whas ;
  assign captWorker1_wsiS_peerIsReady$EN = 1'd1 ;

  // register captWorker1_wsiS_reqFifo_countReg
  assign captWorker1_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ?
	       captWorker1_wsiS_reqFifo_countReg + 2'd1 :
	       captWorker1_wsiS_reqFifo_countReg - 2'd1 ;
  assign captWorker1_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq !=
	     WILL_FIRE_RL_captWorker1_doMessageAccept ;

  // register captWorker1_wsiS_reqFifo_levelsValid
  assign captWorker1_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_reset ;
  assign captWorker1_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_captWorker1_doMessageAccept ||
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_reset ;

  // register captWorker1_wsiS_statusR
  assign captWorker1_wsiS_statusR$D_IN =
	     { captWorker1_wsiS_isReset_isInReset,
	       !captWorker1_wsiS_peerIsReady,
	       !captWorker1_wsiS_operateD,
	       captWorker1_wsiS_errorSticky,
	       captWorker1_wsiS_burstKind != 2'd0,
	       !captWorker1_wsiS_sThreadBusy_dw$whas ||
	       captWorker1_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       captWorker1_wsiS_trafficSticky } ;
  assign captWorker1_wsiS_statusR$EN = 1'd1 ;

  // register captWorker1_wsiS_tBusyCount
  assign captWorker1_wsiS_tBusyCount$D_IN =
	     captWorker1_wsiS_tBusyCount + 32'd1 ;
  assign captWorker1_wsiS_tBusyCount$EN =
	     captWorker1_wsiS_operateD && captWorker1_wsiS_peerIsReady &&
	     (!captWorker1_wsiS_sThreadBusy_dw$whas ||
	      captWorker1_wsiS_sThreadBusy_dw$wget) ;

  // register captWorker1_wsiS_trafficSticky
  assign captWorker1_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign captWorker1_wsiS_trafficSticky$EN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ;

  // register captWorker1_wsiS_wordCount
  assign captWorker1_wsiS_wordCount$D_IN =
	     captWorker1_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       captWorker1_wsiS_wordCount + 12'd1 ;
  assign captWorker1_wsiS_wordCount$EN =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ;

  // register captWorker1_wtiS_isReset_isInReset
  assign captWorker1_wtiS_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker1_wtiS_isReset_isInReset$EN =
	     captWorker1_wtiS_isReset_isInReset ;

  // register captWorker1_wtiS_nowReq
  assign captWorker1_wtiS_nowReq$D_IN = { wti_s_1_MCmd, wti_s_1_MData } ;
  assign captWorker1_wtiS_nowReq$EN = 1'd1 ;

  // register captWorker1_wtiS_operateD
  assign captWorker1_wtiS_operateD$D_IN = 1'b1 ;
  assign captWorker1_wtiS_operateD$EN = 1'd1 ;

  // register captWorker2_controlReg
  assign captWorker2_controlReg$D_IN =
	     MUX_captWorker2_controlReg$write_1__SEL_1 ?
	       captWorker2_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign captWorker2_controlReg$EN =
	     WILL_FIRE_RL_captWorker2_wci_cfwr &&
	     captWorker2_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_captWorker2_wci_ctrl_EiI ;

  // register captWorker2_dataBram_serverAdapterA_cnt
  assign captWorker2_dataBram_serverAdapterA_cnt$D_IN =
	     captWorker2_dataBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker2_dataBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker2_dataBram_serverAdapterA_s1
  assign captWorker2_dataBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker2_dataCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker2_dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker2_dataBram_serverAdapterB_cnt
  assign captWorker2_dataBram_serverAdapterB_cnt$D_IN =
	     captWorker2_dataBram_serverAdapterB_cnt_714_PL_ETC___d3720 ;
  assign captWorker2_dataBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker2_dataBram_serverAdapterB_s1
  assign captWorker2_dataBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker2_dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker2_dataCount
  always@(MUX_captWorker2_dataCount$write_1__SEL_1 or
	  captWorker2_wci_wslv_reqF$D_OUT or
	  MUX_captWorker2_dataCount$write_1__SEL_2 or
	  MUX_captWorker2_dataCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker2_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker2_dataCount$write_1__SEL_1:
	captWorker2_dataCount$D_IN = captWorker2_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker2_dataCount$write_1__SEL_2:
	captWorker2_dataCount$D_IN = MUX_captWorker2_dataCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker2_wci_ctrl_EiI: captWorker2_dataCount$D_IN = 32'd0;
    default: captWorker2_dataCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker2_dataCount$EN =
	     WILL_FIRE_RL_captWorker2_doMessageAccept &&
	     captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271 ||
	     WILL_FIRE_RL_captWorker2_wci_cfwr &&
	     captWorker2_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     WILL_FIRE_RL_captWorker2_wci_ctrl_EiI ;

  // register captWorker2_isFirst
  assign captWorker2_isFirst$D_IN = 1'b0 ;
  assign captWorker2_isFirst$EN = 1'b0 ;

  // register captWorker2_mesgLengthSoFar
  assign captWorker2_mesgLengthSoFar$D_IN =
	     captWorker2_wsiS_reqFifo$D_OUT[57] ? 14'd0 : mlB__h97342 ;
  assign captWorker2_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_captWorker2_doMessageAccept ;

  // register captWorker2_metaBram_serverAdapterA_1_cnt
  assign captWorker2_metaBram_serverAdapterA_1_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterA_1_cnt + 3'd0 + 3'd0 ;
  assign captWorker2_metaBram_serverAdapterA_1_cnt$EN = 1'b0 ;

  // register captWorker2_metaBram_serverAdapterA_1_s1
  assign captWorker2_metaBram_serverAdapterA_1_s1$D_IN =
	     { MUX_captWorker2_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker2_metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register captWorker2_metaBram_serverAdapterA_2_cnt
  assign captWorker2_metaBram_serverAdapterA_2_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterA_2_cnt + 3'd0 + 3'd0 ;
  assign captWorker2_metaBram_serverAdapterA_2_cnt$EN = 1'b0 ;

  // register captWorker2_metaBram_serverAdapterA_2_s1
  assign captWorker2_metaBram_serverAdapterA_2_s1$D_IN =
	     { MUX_captWorker2_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker2_metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register captWorker2_metaBram_serverAdapterA_3_cnt
  assign captWorker2_metaBram_serverAdapterA_3_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterA_3_cnt + 3'd0 + 3'd0 ;
  assign captWorker2_metaBram_serverAdapterA_3_cnt$EN = 1'b0 ;

  // register captWorker2_metaBram_serverAdapterA_3_s1
  assign captWorker2_metaBram_serverAdapterA_3_s1$D_IN =
	     { MUX_captWorker2_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker2_metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register captWorker2_metaBram_serverAdapterA_cnt
  assign captWorker2_metaBram_serverAdapterA_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker2_metaBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker2_metaBram_serverAdapterA_s1
  assign captWorker2_metaBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker2_metaCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker2_metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker2_metaBram_serverAdapterB_1_cnt
  assign captWorker2_metaBram_serverAdapterB_1_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterB_1_cnt_950__ETC___d3956 ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt$EN =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways ||
	     captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas ;

  // register captWorker2_metaBram_serverAdapterB_1_s1
  assign captWorker2_metaBram_serverAdapterB_1_s1$D_IN =
	     { WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker2_metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register captWorker2_metaBram_serverAdapterB_2_cnt
  assign captWorker2_metaBram_serverAdapterB_2_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterB_2_cnt_068__ETC___d4074 ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt$EN =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways ||
	     captWorker2_metaBram_serverAdapterB_2_cnt_2$whas ;

  // register captWorker2_metaBram_serverAdapterB_2_s1
  assign captWorker2_metaBram_serverAdapterB_2_s1$D_IN =
	     { WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker2_metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register captWorker2_metaBram_serverAdapterB_3_cnt
  assign captWorker2_metaBram_serverAdapterB_3_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterB_3_cnt_186__ETC___d4192 ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt$EN =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways ||
	     captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register captWorker2_metaBram_serverAdapterB_3_s1
  assign captWorker2_metaBram_serverAdapterB_3_s1$D_IN =
	     { WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker2_metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register captWorker2_metaBram_serverAdapterB_cnt
  assign captWorker2_metaBram_serverAdapterB_cnt$D_IN =
	     captWorker2_metaBram_serverAdapterB_cnt_832_PL_ETC___d3838 ;
  assign captWorker2_metaBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker2_metaBram_serverAdapterB_s1
  assign captWorker2_metaBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker2_metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker2_metaCount
  always@(MUX_captWorker2_metaCount$write_1__SEL_1 or
	  captWorker2_wci_wslv_reqF$D_OUT or
	  MUX_captWorker2_metaCount$write_1__SEL_2 or
	  MUX_captWorker2_metaCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker2_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker2_metaCount$write_1__SEL_1:
	captWorker2_metaCount$D_IN = captWorker2_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker2_metaCount$write_1__SEL_2:
	captWorker2_metaCount$D_IN = MUX_captWorker2_metaCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker2_wci_ctrl_EiI: captWorker2_metaCount$D_IN = 32'd0;
    default: captWorker2_metaCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker2_metaCount$EN =
	     WILL_FIRE_RL_captWorker2_doMessageAccept &&
	     captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271 &&
	     captWorker2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_captWorker2_wci_cfwr &&
	     captWorker2_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_captWorker2_wci_ctrl_EiI ;

  // register captWorker2_splitReadInFlight
  assign captWorker2_splitReadInFlight$D_IN =
	     MUX_captWorker2_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker2_splitReadInFlight$EN =
	     WILL_FIRE_RL_captWorker2_wci_cfrd &&
	     (captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ||
	     WILL_FIRE_RL_captWorker2_advance_split_response ;

  // register captWorker2_wci_wslv_cEdge
  assign captWorker2_wci_wslv_cEdge$D_IN =
	     captWorker2_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker2_wci_wslv_cEdge$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start ;

  // register captWorker2_wci_wslv_cState
  assign captWorker2_wci_wslv_cState$D_IN = captWorker2_wci_wslv_nState ;
  assign captWorker2_wci_wslv_cState$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete &&
	     !captWorker2_wci_wslv_illegalEdge ;

  // register captWorker2_wci_wslv_ctlAckReg
  assign captWorker2_wci_wslv_ctlAckReg$D_IN =
	     captWorker2_wci_wslv_ctlAckReg_1$whas ;
  assign captWorker2_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register captWorker2_wci_wslv_ctlOpActive
  assign captWorker2_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ;
  assign captWorker2_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start ;

  // register captWorker2_wci_wslv_illegalEdge
  assign captWorker2_wci_wslv_illegalEdge$D_IN =
	     !MUX_captWorker2_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_captWorker2_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign captWorker2_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete &&
	     captWorker2_wci_wslv_illegalEdge ||
	     MUX_captWorker2_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register captWorker2_wci_wslv_isReset_isInReset
  assign captWorker2_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker2_wci_wslv_isReset_isInReset$EN =
	     captWorker2_wci_wslv_isReset_isInReset ;

  // register captWorker2_wci_wslv_nState
  always@(captWorker2_wci_wslv_reqF$D_OUT)
  begin
    case (captWorker2_wci_wslv_reqF$D_OUT[36:34])
      3'd0: captWorker2_wci_wslv_nState$D_IN = 3'd1;
      3'd1: captWorker2_wci_wslv_nState$D_IN = 3'd2;
      3'd2: captWorker2_wci_wslv_nState$D_IN = 3'd3;
      default: captWorker2_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign captWorker2_wci_wslv_nState$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start &&
	     (captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker2_wci_wslv_cState == 3'd0 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (captWorker2_wci_wslv_cState == 3'd1 ||
	       captWorker2_wci_wslv_cState == 3'd3) ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker2_wci_wslv_cState == 3'd2 ||
	      captWorker2_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (captWorker2_wci_wslv_cState == 3'd3 ||
	       captWorker2_wci_wslv_cState == 3'd2 ||
	       captWorker2_wci_wslv_cState == 3'd1)) ;

  // register captWorker2_wci_wslv_reqF_countReg
  assign captWorker2_wci_wslv_reqF_countReg$D_IN =
	     (captWorker2_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       captWorker2_wci_wslv_reqF_countReg + 2'd1 :
	       captWorker2_wci_wslv_reqF_countReg - 2'd1 ;
  assign captWorker2_wci_wslv_reqF_countReg$EN =
	     (captWorker2_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     captWorker2_wci_wslv_reqF_r_deq$whas ;

  // register captWorker2_wci_wslv_respF_c_r
  assign captWorker2_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr ?
	       MUX_captWorker2_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_captWorker2_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign captWorker2_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr ;

  // register captWorker2_wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_captWorker2_wci_wslv_respF_both or
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr or
	  captWorker2_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker2_wci_wslv_respF_both:
	  captWorker2_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_captWorker2_wci_wslv_respF_q_0$write_1__SEL_2:
	  captWorker2_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr:
	  captWorker2_wci_wslv_respF_q_0$D_IN =
	      captWorker2_wci_wslv_respF_q_1;
      default: captWorker2_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker2_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr &&
	     captWorker2_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr ;

  // register captWorker2_wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_captWorker2_wci_wslv_respF_both or
	  MUX_captWorker2_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_captWorker2_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker2_wci_wslv_respF_both:
	  captWorker2_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker2_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_captWorker2_wci_wslv_respF_q_1$write_1__SEL_2:
	  captWorker2_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker2_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr:
	  captWorker2_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: captWorker2_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker2_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_incCtr &&
	     captWorker2_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_captWorker2_wci_wslv_respF_decCtr ;

  // register captWorker2_wci_wslv_sFlagReg
  assign captWorker2_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign captWorker2_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register captWorker2_wci_wslv_sThreadBusy_d
  assign captWorker2_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign captWorker2_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register captWorker2_wsiS_burstKind
  assign captWorker2_wsiS_burstKind$D_IN =
	     (captWorker2_wsiS_burstKind == 2'd0) ?
	       (captWorker2_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign captWorker2_wsiS_burstKind$EN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq &&
	     (captWorker2_wsiS_burstKind == 2'd0 ||
	      (captWorker2_wsiS_burstKind == 2'd1 ||
	       captWorker2_wsiS_burstKind == 2'd2) &&
	      captWorker2_wsiS_wsiReq$wget[57]) ;

  // register captWorker2_wsiS_errorSticky
  assign captWorker2_wsiS_errorSticky$D_IN = 1'b0 ;
  assign captWorker2_wsiS_errorSticky$EN = 1'b0 ;

  // register captWorker2_wsiS_iMesgCount
  assign captWorker2_wsiS_iMesgCount$D_IN =
	     captWorker2_wsiS_iMesgCount + 32'd1 ;
  assign captWorker2_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq &&
	     captWorker2_wsiS_burstKind == 2'd2 &&
	     captWorker2_wsiS_wsiReq$wget[57] ;

  // register captWorker2_wsiS_isReset_isInReset
  assign captWorker2_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker2_wsiS_isReset_isInReset$EN =
	     captWorker2_wsiS_isReset_isInReset ;

  // register captWorker2_wsiS_mesgWordLength
  assign captWorker2_wsiS_mesgWordLength$D_IN = captWorker2_wsiS_wordCount ;
  assign captWorker2_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq &&
	     captWorker2_wsiS_wsiReq$wget[57] ;

  // register captWorker2_wsiS_operateD
  assign captWorker2_wsiS_operateD$D_IN =
	     captWorker2_wci_wslv_cState == 3'd2 ;
  assign captWorker2_wsiS_operateD$EN = 1'd1 ;

  // register captWorker2_wsiS_pMesgCount
  assign captWorker2_wsiS_pMesgCount$D_IN =
	     captWorker2_wsiS_pMesgCount + 32'd1 ;
  assign captWorker2_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq &&
	     captWorker2_wsiS_burstKind == 2'd1 &&
	     captWorker2_wsiS_wsiReq$wget[57] ;

  // register captWorker2_wsiS_peerIsReady
  assign captWorker2_wsiS_peerIsReady$D_IN =
	     captWorker2_wsiS_peerIsReady_1$whas ;
  assign captWorker2_wsiS_peerIsReady$EN = 1'd1 ;

  // register captWorker2_wsiS_reqFifo_countReg
  assign captWorker2_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ?
	       captWorker2_wsiS_reqFifo_countReg + 2'd1 :
	       captWorker2_wsiS_reqFifo_countReg - 2'd1 ;
  assign captWorker2_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq !=
	     WILL_FIRE_RL_captWorker2_doMessageAccept ;

  // register captWorker2_wsiS_reqFifo_levelsValid
  assign captWorker2_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_reset ;
  assign captWorker2_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_captWorker2_doMessageAccept ||
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_reset ;

  // register captWorker2_wsiS_statusR
  assign captWorker2_wsiS_statusR$D_IN =
	     { captWorker2_wsiS_isReset_isInReset,
	       !captWorker2_wsiS_peerIsReady,
	       !captWorker2_wsiS_operateD,
	       captWorker2_wsiS_errorSticky,
	       captWorker2_wsiS_burstKind != 2'd0,
	       !captWorker2_wsiS_sThreadBusy_dw$whas ||
	       captWorker2_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       captWorker2_wsiS_trafficSticky } ;
  assign captWorker2_wsiS_statusR$EN = 1'd1 ;

  // register captWorker2_wsiS_tBusyCount
  assign captWorker2_wsiS_tBusyCount$D_IN =
	     captWorker2_wsiS_tBusyCount + 32'd1 ;
  assign captWorker2_wsiS_tBusyCount$EN =
	     captWorker2_wsiS_operateD && captWorker2_wsiS_peerIsReady &&
	     (!captWorker2_wsiS_sThreadBusy_dw$whas ||
	      captWorker2_wsiS_sThreadBusy_dw$wget) ;

  // register captWorker2_wsiS_trafficSticky
  assign captWorker2_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign captWorker2_wsiS_trafficSticky$EN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ;

  // register captWorker2_wsiS_wordCount
  assign captWorker2_wsiS_wordCount$D_IN =
	     captWorker2_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       captWorker2_wsiS_wordCount + 12'd1 ;
  assign captWorker2_wsiS_wordCount$EN =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ;

  // register captWorker2_wtiS_isReset_isInReset
  assign captWorker2_wtiS_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker2_wtiS_isReset_isInReset$EN =
	     captWorker2_wtiS_isReset_isInReset ;

  // register captWorker2_wtiS_nowReq
  assign captWorker2_wtiS_nowReq$D_IN = { wti_s_2_MCmd, wti_s_2_MData } ;
  assign captWorker2_wtiS_nowReq$EN = 1'd1 ;

  // register captWorker2_wtiS_operateD
  assign captWorker2_wtiS_operateD$D_IN = 1'b1 ;
  assign captWorker2_wtiS_operateD$EN = 1'd1 ;

  // register wsimMonW3_observer_e_sThreadBusy_srcD
  assign wsimMonW3_observer_e_sThreadBusy_srcD$D_IN =
	     wsimMonW3_observer_r_sThreadBusy ;
  assign wsimMonW3_observer_e_sThreadBusy_srcD$EN = 1'd1 ;

  // register wsimMonW3_observer_mesgInFlight
  assign wsimMonW3_observer_mesgInFlight$D_IN =
	     !wsimMonW3_observer_r_mReqLast ;
  assign wsimMonW3_observer_mesgInFlight$EN =
	     IF_wsimMonW3_observer_mesgInFlight_814_THEN_0__ETC___d2820 &&
	     wsimMonW3_observer_r_mCmd == 3'd1 ;

  // register wsimMonW3_observer_mesgLengthSoFar
  assign wsimMonW3_observer_mesgLengthSoFar$D_IN =
	     wsimMonW3_observer_r_mReqLast ? 14'd0 : mlB__h67987 ;
  assign wsimMonW3_observer_mesgLengthSoFar$EN =
	     IF_wsimMonW3_observer_mesgInFlight_814_THEN_0__ETC___d2820 &&
	     wsimMonW3_observer_r_mCmd == 3'd1 ;

  // register wsimMonW3_observer_r_mBurstLength
  assign wsimMonW3_observer_r_mBurstLength$D_IN = appW3$wsiM0_MBurstLength ;
  assign wsimMonW3_observer_r_mBurstLength$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mBurstPrecise
  assign wsimMonW3_observer_r_mBurstPrecise$D_IN = appW3$wsiM0_MBurstPrecise ;
  assign wsimMonW3_observer_r_mBurstPrecise$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mByteEn
  assign wsimMonW3_observer_r_mByteEn$D_IN = appW3$wsiM0_MByteEn ;
  assign wsimMonW3_observer_r_mByteEn$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mCmd
  assign wsimMonW3_observer_r_mCmd$D_IN = appW3$wsiM0_MCmd ;
  assign wsimMonW3_observer_r_mCmd$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mCmdD
  assign wsimMonW3_observer_r_mCmdD$D_IN = wsimMonW3_observer_r_mCmd ;
  assign wsimMonW3_observer_r_mCmdD$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mData
  assign wsimMonW3_observer_r_mData$D_IN = appW3$wsiM0_MData ;
  assign wsimMonW3_observer_r_mData$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mReqInfo
  assign wsimMonW3_observer_r_mReqInfo$D_IN = appW3$wsiM0_MReqInfo ;
  assign wsimMonW3_observer_r_mReqInfo$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mReqLast
  assign wsimMonW3_observer_r_mReqLast$D_IN = appW3$wsiM0_MReqLast ;
  assign wsimMonW3_observer_r_mReqLast$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mReset_n
  assign wsimMonW3_observer_r_mReset_n$D_IN = appW3$wsiM0_MReset_n ;
  assign wsimMonW3_observer_r_mReset_n$EN = 1'd1 ;

  // register wsimMonW3_observer_r_mResetnD
  assign wsimMonW3_observer_r_mResetnD$D_IN = wsimMonW3_observer_r_mReset_n ;
  assign wsimMonW3_observer_r_mResetnD$EN = 1'd1 ;

  // register wsimMonW3_observer_r_sReset_n
  assign wsimMonW3_observer_r_sReset_n$D_IN = appW4$wsiS0_SReset_n ;
  assign wsimMonW3_observer_r_sReset_n$EN = 1'd1 ;

  // register wsimMonW3_observer_r_sResetnD
  assign wsimMonW3_observer_r_sResetnD$D_IN = wsimMonW3_observer_r_sReset_n ;
  assign wsimMonW3_observer_r_sResetnD$EN = 1'd1 ;

  // register wsimMonW3_observer_r_sThreadBusy
  assign wsimMonW3_observer_r_sThreadBusy$D_IN = appW4$wsiS0_SThreadBusy ;
  assign wsimMonW3_observer_r_sThreadBusy$EN = 1'd1 ;

  // register wsimMonW3_pmsender_idx
  assign wsimMonW3_pmsender_idx$D_IN =
	     wsimMonW3_pmsender_idx_928_EQ_IF_wsimMonW3_pms_ETC___d4616 ?
	       3'd1 :
	       wsimMonW3_pmsender_idx + 3'd1 ;
  assign wsimMonW3_pmsender_idx$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message ;

  // register wsimMonW3_pmsender_isHead
  assign wsimMonW3_pmsender_isHead$D_IN = 1'b0 ;
  assign wsimMonW3_pmsender_isHead$EN = 1'b0 ;

  // register wsimMonW3_pmsender_srcTag
  assign wsimMonW3_pmsender_srcTag$D_IN = wsimMonW3_pmsender_srcTag + 8'd1 ;
  assign wsimMonW3_pmsender_srcTag$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message &&
	     wsimMonW3_pmsender_idx_928_EQ_IF_wsimMonW3_pms_ETC___d4616 ;

  // register wsimMonW3_pmsender_wsiM_burstKind
  assign wsimMonW3_pmsender_wsiM_burstKind$D_IN =
	     (wsimMonW3_pmsender_wsiM_burstKind == 2'd0) ?
	       (wsimMonW3_pmsender_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsimMonW3_pmsender_wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsimMonW3_pmsender_wsiM_burstKind == 2'd0 ||
	      (wsimMonW3_pmsender_wsiM_burstKind == 2'd1 ||
	       wsimMonW3_pmsender_wsiM_burstKind == 2'd2) &&
	      wsimMonW3_pmsender_wsiM_reqFifo_q_0[57]) ;

  // register wsimMonW3_pmsender_wsiM_errorSticky
  assign wsimMonW3_pmsender_wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsimMonW3_pmsender_wsiM_errorSticky$EN = 1'b0 ;

  // register wsimMonW3_pmsender_wsiM_iMesgCount
  assign wsimMonW3_pmsender_wsiM_iMesgCount$D_IN =
	     wsimMonW3_pmsender_wsiM_iMesgCount + 32'd1 ;
  assign wsimMonW3_pmsender_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsimMonW3_pmsender_wsiM_burstKind == 2'd2 &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[57] ;

  // register wsimMonW3_pmsender_wsiM_isReset_isInReset
  assign wsimMonW3_pmsender_wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign wsimMonW3_pmsender_wsiM_isReset_isInReset$EN =
	     wsimMonW3_pmsender_wsiM_isReset_isInReset ;

  // register wsimMonW3_pmsender_wsiM_operateD
  assign wsimMonW3_pmsender_wsiM_operateD$D_IN = 1'b1 ;
  assign wsimMonW3_pmsender_wsiM_operateD$EN = 1'd1 ;

  // register wsimMonW3_pmsender_wsiM_pMesgCount
  assign wsimMonW3_pmsender_wsiM_pMesgCount$D_IN =
	     wsimMonW3_pmsender_wsiM_pMesgCount + 32'd1 ;
  assign wsimMonW3_pmsender_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsimMonW3_pmsender_wsiM_burstKind == 2'd1 &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[57] ;

  // register wsimMonW3_pmsender_wsiM_peerIsReady
  assign wsimMonW3_pmsender_wsiM_peerIsReady$D_IN =
	     wsimMonW3_pmsender_wsiM_peerIsReady_1$whas ;
  assign wsimMonW3_pmsender_wsiM_peerIsReady$EN = 1'd1 ;

  // register wsimMonW3_pmsender_wsiM_reqFifo_c_r
  assign wsimMonW3_pmsender_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr ?
	       MUX_wsimMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsimMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsimMonW3_pmsender_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr ;

  // register wsimMonW3_pmsender_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both or
	  MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr or
	  wsimMonW3_pmsender_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both:
	  wsimMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
	      MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2:
	  wsimMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
	      MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr:
	  wsimMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
	      wsimMonW3_pmsender_wsiM_reqFifo_q_1;
      default: wsimMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsimMonW3_pmsender_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr ;

  // register wsimMonW3_pmsender_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both or
	  MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both:
	  wsimMonW3_pmsender_wsiM_reqFifo_q_1$D_IN =
	      MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsimMonW3_pmsender_wsiM_reqFifo_q_1$D_IN =
	      MUX_wsimMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr:
	  wsimMonW3_pmsender_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsimMonW3_pmsender_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsimMonW3_pmsender_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsimMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_decCtr ;

  // register wsimMonW3_pmsender_wsiM_sThreadBusy_d
  assign wsimMonW3_pmsender_wsiM_sThreadBusy_d$D_IN =
	     wsimMonW3_pmsender_wsiM_sThreadBusy_pw$whas ;
  assign wsimMonW3_pmsender_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsimMonW3_pmsender_wsiM_statusR
  assign wsimMonW3_pmsender_wsiM_statusR$D_IN =
	     { wsimMonW3_pmsender_wsiM_isReset_isInReset,
	       !wsimMonW3_pmsender_wsiM_peerIsReady,
	       !wsimMonW3_pmsender_wsiM_operateD,
	       wsimMonW3_pmsender_wsiM_errorSticky,
	       wsimMonW3_pmsender_wsiM_burstKind != 2'd0,
	       wsimMonW3_pmsender_wsiM_sThreadBusy_d,
	       1'd0,
	       wsimMonW3_pmsender_wsiM_trafficSticky } ;
  assign wsimMonW3_pmsender_wsiM_statusR$EN = 1'd1 ;

  // register wsimMonW3_pmsender_wsiM_tBusyCount
  assign wsimMonW3_pmsender_wsiM_tBusyCount$D_IN =
	     wsimMonW3_pmsender_wsiM_tBusyCount + 32'd1 ;
  assign wsimMonW3_pmsender_wsiM_tBusyCount$EN =
	     wsimMonW3_pmsender_wsiM_operateD &&
	     wsimMonW3_pmsender_wsiM_peerIsReady &&
	     wsimMonW3_pmsender_wsiM_sThreadBusy_d ;

  // register wsimMonW3_pmsender_wsiM_trafficSticky
  assign wsimMonW3_pmsender_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsimMonW3_pmsender_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsimMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsimMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsisMonW3_observer_e_sThreadBusy_srcD
  assign wsisMonW3_observer_e_sThreadBusy_srcD$D_IN =
	     wsisMonW3_observer_r_sThreadBusy ;
  assign wsisMonW3_observer_e_sThreadBusy_srcD$EN = 1'd1 ;

  // register wsisMonW3_observer_mesgInFlight
  assign wsisMonW3_observer_mesgInFlight$D_IN =
	     !wsisMonW3_observer_r_mReqLast ;
  assign wsisMonW3_observer_mesgInFlight$EN =
	     IF_wsisMonW3_observer_mesgInFlight_114_THEN_0__ETC___d1120 &&
	     wsisMonW3_observer_r_mCmd == 3'd1 ;

  // register wsisMonW3_observer_mesgLengthSoFar
  assign wsisMonW3_observer_mesgLengthSoFar$D_IN =
	     wsisMonW3_observer_r_mReqLast ? 14'd0 : mlB__h31076 ;
  assign wsisMonW3_observer_mesgLengthSoFar$EN =
	     IF_wsisMonW3_observer_mesgInFlight_114_THEN_0__ETC___d1120 &&
	     wsisMonW3_observer_r_mCmd == 3'd1 ;

  // register wsisMonW3_observer_r_mBurstLength
  assign wsisMonW3_observer_r_mBurstLength$D_IN = appW2$wsiM0_MBurstLength ;
  assign wsisMonW3_observer_r_mBurstLength$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mBurstPrecise
  assign wsisMonW3_observer_r_mBurstPrecise$D_IN = appW2$wsiM0_MBurstPrecise ;
  assign wsisMonW3_observer_r_mBurstPrecise$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mByteEn
  assign wsisMonW3_observer_r_mByteEn$D_IN = appW2$wsiM0_MByteEn ;
  assign wsisMonW3_observer_r_mByteEn$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mCmd
  assign wsisMonW3_observer_r_mCmd$D_IN = appW2$wsiM0_MCmd ;
  assign wsisMonW3_observer_r_mCmd$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mCmdD
  assign wsisMonW3_observer_r_mCmdD$D_IN = wsisMonW3_observer_r_mCmd ;
  assign wsisMonW3_observer_r_mCmdD$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mData
  assign wsisMonW3_observer_r_mData$D_IN = appW2$wsiM0_MData ;
  assign wsisMonW3_observer_r_mData$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mReqInfo
  assign wsisMonW3_observer_r_mReqInfo$D_IN = appW2$wsiM0_MReqInfo ;
  assign wsisMonW3_observer_r_mReqInfo$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mReqLast
  assign wsisMonW3_observer_r_mReqLast$D_IN = appW2$wsiM0_MReqLast ;
  assign wsisMonW3_observer_r_mReqLast$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mReset_n
  assign wsisMonW3_observer_r_mReset_n$D_IN = appW2$wsiM0_MReset_n ;
  assign wsisMonW3_observer_r_mReset_n$EN = 1'd1 ;

  // register wsisMonW3_observer_r_mResetnD
  assign wsisMonW3_observer_r_mResetnD$D_IN = wsisMonW3_observer_r_mReset_n ;
  assign wsisMonW3_observer_r_mResetnD$EN = 1'd1 ;

  // register wsisMonW3_observer_r_sReset_n
  assign wsisMonW3_observer_r_sReset_n$D_IN = appW3$wsiS0_SReset_n ;
  assign wsisMonW3_observer_r_sReset_n$EN = 1'd1 ;

  // register wsisMonW3_observer_r_sResetnD
  assign wsisMonW3_observer_r_sResetnD$D_IN = wsisMonW3_observer_r_sReset_n ;
  assign wsisMonW3_observer_r_sResetnD$EN = 1'd1 ;

  // register wsisMonW3_observer_r_sThreadBusy
  assign wsisMonW3_observer_r_sThreadBusy$D_IN = appW3$wsiS0_SThreadBusy ;
  assign wsisMonW3_observer_r_sThreadBusy$EN = 1'd1 ;

  // register wsisMonW3_pmsender_idx
  assign wsisMonW3_pmsender_idx$D_IN =
	     wsisMonW3_pmsender_idx_230_EQ_IF_wsisMonW3_pms_ETC___d4615 ?
	       3'd1 :
	       wsisMonW3_pmsender_idx + 3'd1 ;
  assign wsisMonW3_pmsender_idx$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message ;

  // register wsisMonW3_pmsender_isHead
  assign wsisMonW3_pmsender_isHead$D_IN = 1'b0 ;
  assign wsisMonW3_pmsender_isHead$EN = 1'b0 ;

  // register wsisMonW3_pmsender_srcTag
  assign wsisMonW3_pmsender_srcTag$D_IN = wsisMonW3_pmsender_srcTag + 8'd1 ;
  assign wsisMonW3_pmsender_srcTag$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message &&
	     wsisMonW3_pmsender_idx_230_EQ_IF_wsisMonW3_pms_ETC___d4615 ;

  // register wsisMonW3_pmsender_wsiM_burstKind
  assign wsisMonW3_pmsender_wsiM_burstKind$D_IN =
	     (wsisMonW3_pmsender_wsiM_burstKind == 2'd0) ?
	       (wsisMonW3_pmsender_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsisMonW3_pmsender_wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsisMonW3_pmsender_wsiM_burstKind == 2'd0 ||
	      (wsisMonW3_pmsender_wsiM_burstKind == 2'd1 ||
	       wsisMonW3_pmsender_wsiM_burstKind == 2'd2) &&
	      wsisMonW3_pmsender_wsiM_reqFifo_q_0[57]) ;

  // register wsisMonW3_pmsender_wsiM_errorSticky
  assign wsisMonW3_pmsender_wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsisMonW3_pmsender_wsiM_errorSticky$EN = 1'b0 ;

  // register wsisMonW3_pmsender_wsiM_iMesgCount
  assign wsisMonW3_pmsender_wsiM_iMesgCount$D_IN =
	     wsisMonW3_pmsender_wsiM_iMesgCount + 32'd1 ;
  assign wsisMonW3_pmsender_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsisMonW3_pmsender_wsiM_burstKind == 2'd2 &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[57] ;

  // register wsisMonW3_pmsender_wsiM_isReset_isInReset
  assign wsisMonW3_pmsender_wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign wsisMonW3_pmsender_wsiM_isReset_isInReset$EN =
	     wsisMonW3_pmsender_wsiM_isReset_isInReset ;

  // register wsisMonW3_pmsender_wsiM_operateD
  assign wsisMonW3_pmsender_wsiM_operateD$D_IN = 1'b1 ;
  assign wsisMonW3_pmsender_wsiM_operateD$EN = 1'd1 ;

  // register wsisMonW3_pmsender_wsiM_pMesgCount
  assign wsisMonW3_pmsender_wsiM_pMesgCount$D_IN =
	     wsisMonW3_pmsender_wsiM_pMesgCount + 32'd1 ;
  assign wsisMonW3_pmsender_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsisMonW3_pmsender_wsiM_burstKind == 2'd1 &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[57] ;

  // register wsisMonW3_pmsender_wsiM_peerIsReady
  assign wsisMonW3_pmsender_wsiM_peerIsReady$D_IN =
	     wsisMonW3_pmsender_wsiM_peerIsReady_1$whas ;
  assign wsisMonW3_pmsender_wsiM_peerIsReady$EN = 1'd1 ;

  // register wsisMonW3_pmsender_wsiM_reqFifo_c_r
  assign wsisMonW3_pmsender_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr ?
	       MUX_wsisMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsisMonW3_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsisMonW3_pmsender_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr ;

  // register wsisMonW3_pmsender_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both or
	  MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr or
	  wsisMonW3_pmsender_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both:
	  wsisMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
	      MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__SEL_2:
	  wsisMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
	      MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr:
	  wsisMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
	      wsisMonW3_pmsender_wsiM_reqFifo_q_1;
      default: wsisMonW3_pmsender_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsisMonW3_pmsender_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr ;

  // register wsisMonW3_pmsender_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both or
	  MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both:
	  wsisMonW3_pmsender_wsiM_reqFifo_q_1$D_IN =
	      MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsisMonW3_pmsender_wsiM_reqFifo_q_1$D_IN =
	      MUX_wsisMonW3_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr:
	  wsisMonW3_pmsender_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsisMonW3_pmsender_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsisMonW3_pmsender_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_incCtr &&
	     wsisMonW3_pmsender_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_decCtr ;

  // register wsisMonW3_pmsender_wsiM_sThreadBusy_d
  assign wsisMonW3_pmsender_wsiM_sThreadBusy_d$D_IN =
	     wsisMonW3_pmsender_wsiM_sThreadBusy_pw$whas ;
  assign wsisMonW3_pmsender_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsisMonW3_pmsender_wsiM_statusR
  assign wsisMonW3_pmsender_wsiM_statusR$D_IN =
	     { wsisMonW3_pmsender_wsiM_isReset_isInReset,
	       !wsisMonW3_pmsender_wsiM_peerIsReady,
	       !wsisMonW3_pmsender_wsiM_operateD,
	       wsisMonW3_pmsender_wsiM_errorSticky,
	       wsisMonW3_pmsender_wsiM_burstKind != 2'd0,
	       wsisMonW3_pmsender_wsiM_sThreadBusy_d,
	       1'd0,
	       wsisMonW3_pmsender_wsiM_trafficSticky } ;
  assign wsisMonW3_pmsender_wsiM_statusR$EN = 1'd1 ;

  // register wsisMonW3_pmsender_wsiM_tBusyCount
  assign wsisMonW3_pmsender_wsiM_tBusyCount$D_IN =
	     wsisMonW3_pmsender_wsiM_tBusyCount + 32'd1 ;
  assign wsisMonW3_pmsender_wsiM_tBusyCount$EN =
	     wsisMonW3_pmsender_wsiM_operateD &&
	     wsisMonW3_pmsender_wsiM_peerIsReady &&
	     wsisMonW3_pmsender_wsiM_sThreadBusy_d ;

  // register wsisMonW3_pmsender_wsiM_trafficSticky
  assign wsisMonW3_pmsender_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsisMonW3_pmsender_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsisMonW3_pmsender_wsiM_reqFifo_deq &&
	     wsisMonW3_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // submodule appW1
  assign appW1$wciS0_MAddr = wci_s_1_MAddr ;
  assign appW1$wciS0_MAddrSpace = wci_s_1_MAddrSpace ;
  assign appW1$wciS0_MByteEn = wci_s_1_MByteEn ;
  assign appW1$wciS0_MCmd = wci_s_1_MCmd ;
  assign appW1$wciS0_MData = wci_s_1_MData ;
  assign appW1$wciS0_MFlag = wci_s_1_MFlag ;
  assign appW1$wmemiM0_SData = wmemiM0_SData ;
  assign appW1$wmemiM0_SResp = wmemiM0_SResp ;
  assign appW1$wmemiM0_SRespLast = wmemiM0_SRespLast ;
  assign appW1$wmemiM0_SCmdAccept = wmemiM0_SCmdAccept ;
  assign appW1$wmemiM0_SDataAccept = wmemiM0_SDataAccept ;

  // submodule appW2
  assign appW2$wciS0_MAddr = wci_s_2_MAddr ;
  assign appW2$wciS0_MAddrSpace = wci_s_2_MAddrSpace ;
  assign appW2$wciS0_MByteEn = wci_s_2_MByteEn ;
  assign appW2$wciS0_MCmd = wci_s_2_MCmd ;
  assign appW2$wciS0_MData = wci_s_2_MData ;
  assign appW2$wciS0_MFlag = wci_s_2_MFlag ;
  assign appW2$wmiM0_SData = wmiM0_SData ;
  assign appW2$wmiM0_SFlag = wmiM0_SFlag ;
  assign appW2$wmiM0_SResp = wmiM0_SResp ;
  assign appW2$wsiS0_MBurstLength = wsi_s_adc_MBurstLength ;
  assign appW2$wsiS0_MByteEn = wsi_s_adc_MByteEn ;
  assign appW2$wsiS0_MCmd = wsi_s_adc_MCmd ;
  assign appW2$wsiS0_MData = wsi_s_adc_MData ;
  assign appW2$wsiS0_MReqInfo = wsi_s_adc_MReqInfo ;
  assign appW2$wmiM0_SThreadBusy = wmiM0_SThreadBusy ;
  assign appW2$wmiM0_SDataThreadBusy = wmiM0_SDataThreadBusy ;
  assign appW2$wmiM0_SRespLast = wmiM0_SRespLast ;
  assign appW2$wmiM0_SReset_n = wmiM0_SReset_n ;
  assign appW2$wsiM0_SThreadBusy = appW3$wsiS0_SThreadBusy ;
  assign appW2$wsiM0_SReset_n = appW3$wsiS0_SReset_n ;
  assign appW2$wsiS0_MReqLast = wsi_s_adc_MReqLast ;
  assign appW2$wsiS0_MBurstPrecise = wsi_s_adc_MBurstPrecise ;
  assign appW2$wsiS0_MReset_n = wsi_s_adc_MReset_n ;

  // submodule appW3
  assign appW3$wciS0_MAddr = wci_s_3_MAddr ;
  assign appW3$wciS0_MAddrSpace = wci_s_3_MAddrSpace ;
  assign appW3$wciS0_MByteEn = wci_s_3_MByteEn ;
  assign appW3$wciS0_MCmd = wci_s_3_MCmd ;
  assign appW3$wciS0_MData = wci_s_3_MData ;
  assign appW3$wciS0_MFlag = wci_s_3_MFlag ;
  assign appW3$wsiS0_MBurstLength = appW2$wsiM0_MBurstLength ;
  assign appW3$wsiS0_MByteEn = appW2$wsiM0_MByteEn ;
  assign appW3$wsiS0_MCmd = appW2$wsiM0_MCmd ;
  assign appW3$wsiS0_MData = appW2$wsiM0_MData ;
  assign appW3$wsiS0_MReqInfo = appW2$wsiM0_MReqInfo ;
  assign appW3$wsiS0_MReqLast = appW2$wsiM0_MReqLast ;
  assign appW3$wsiS0_MBurstPrecise = appW2$wsiM0_MBurstPrecise ;
  assign appW3$wsiS0_MReset_n = appW2$wsiM0_MReset_n ;
  assign appW3$wsiM0_SThreadBusy = appW4$wsiS0_SThreadBusy ;
  assign appW3$wsiM0_SReset_n = appW4$wsiS0_SReset_n ;

  // submodule appW4
  assign appW4$wciS0_MAddr = wci_s_4_MAddr ;
  assign appW4$wciS0_MAddrSpace = wci_s_4_MAddrSpace ;
  assign appW4$wciS0_MByteEn = wci_s_4_MByteEn ;
  assign appW4$wciS0_MCmd = wci_s_4_MCmd ;
  assign appW4$wciS0_MData = wci_s_4_MData ;
  assign appW4$wciS0_MFlag = wci_s_4_MFlag ;
  assign appW4$wmiM0_SData = wmiM1_SData ;
  assign appW4$wmiM0_SFlag = wmiM1_SFlag ;
  assign appW4$wmiM0_SResp = wmiM1_SResp ;
  assign appW4$wsiS0_MBurstLength = appW3$wsiM0_MBurstLength ;
  assign appW4$wsiS0_MByteEn = appW3$wsiM0_MByteEn ;
  assign appW4$wsiS0_MCmd = appW3$wsiM0_MCmd ;
  assign appW4$wsiS0_MData = appW3$wsiM0_MData ;
  assign appW4$wsiS0_MReqInfo = appW3$wsiM0_MReqInfo ;
  assign appW4$wmiM0_SThreadBusy = wmiM1_SThreadBusy ;
  assign appW4$wmiM0_SDataThreadBusy = wmiM1_SDataThreadBusy ;
  assign appW4$wmiM0_SRespLast = wmiM1_SRespLast ;
  assign appW4$wmiM0_SReset_n = wmiM1_SReset_n ;
  assign appW4$wsiM0_SThreadBusy = wsi_m_dac_SThreadBusy ;
  assign appW4$wsiM0_SReset_n = wsi_m_dac_SReset_n ;
  assign appW4$wsiS0_MReqLast = appW3$wsiM0_MReqLast ;
  assign appW4$wsiS0_MBurstPrecise = appW3$wsiM0_MBurstPrecise ;
  assign appW4$wsiS0_MReset_n = appW3$wsiM0_MReset_n ;

  // submodule captWorker0_dataBram_memory
  assign captWorker0_dataBram_memory$ADDRA = captWorker0_dataCount[9:0] ;
  assign captWorker0_dataBram_memory$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[43:34] ;
  assign captWorker0_dataBram_memory$DIA =
	     captWorker0_wsiS_reqFifo$D_OUT[43:12] ;
  assign captWorker0_dataBram_memory$DIB = 32'd0 ;
  assign captWorker0_dataBram_memory$WEA = 1'd1 ;
  assign captWorker0_dataBram_memory$WEB = 1'd0 ;
  assign captWorker0_dataBram_memory$ENA =
	     MUX_captWorker0_dataCount$write_1__SEL_2 ;
  assign captWorker0_dataBram_memory$ENB =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker0_dataBram_serverAdapterA_outDataCore
  assign captWorker0_dataBram_serverAdapterA_outDataCore$D_IN =
	     captWorker0_dataBram_memory$DOA ;
  assign captWorker0_dataBram_serverAdapterA_outDataCore$ENQ =
	     captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_dataBram_serverAdapterB_outDataCore
  assign captWorker0_dataBram_serverAdapterB_outDataCore$D_IN =
	     captWorker0_dataBram_memory$DOB ;
  assign captWorker0_dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_memory
  assign captWorker0_metaBram_memory$ADDRA = captWorker0_metaCount[9:0] ;
  assign captWorker0_metaBram_memory$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory$DIA = { 18'd0, mlB__h23537 } ;
  assign captWorker0_metaBram_memory$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory$ENA =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_memory_1
  assign captWorker0_metaBram_memory_1$ADDRA = captWorker0_metaCount[9:0] ;
  assign captWorker0_metaBram_memory_1$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory_1$DIA =
	     { 24'd0, captWorker0_wsiS_reqFifo$D_OUT[7:0] } ;
  assign captWorker0_metaBram_memory_1$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory_1$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory_1$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory_1$ENA =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory_1$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_memory_2
  assign captWorker0_metaBram_memory_2$ADDRA = captWorker0_metaCount[9:0] ;
  assign captWorker0_metaBram_memory_2$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory_2$DIA = captWorker0_nowW$wget[63:32] ;
  assign captWorker0_metaBram_memory_2$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory_2$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory_2$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory_2$ENA =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory_2$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_memory_3
  assign captWorker0_metaBram_memory_3$ADDRA = captWorker0_metaCount[9:0] ;
  assign captWorker0_metaBram_memory_3$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory_3$DIA = captWorker0_nowW$wget[31:0] ;
  assign captWorker0_metaBram_memory_3$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory_3$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory_3$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory_3$ENA =
	     MUX_captWorker0_metaCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory_3$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_serverAdapterA_1_outDataCore
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$D_IN =
	     captWorker0_metaBram_memory_1$DOA ;
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterA_2_outDataCore
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$D_IN =
	     captWorker0_metaBram_memory_2$DOA ;
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterA_3_outDataCore
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$D_IN =
	     captWorker0_metaBram_memory_3$DOA ;
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterA_outDataCore
  assign captWorker0_metaBram_serverAdapterA_outDataCore$D_IN =
	     captWorker0_metaBram_memory$DOA ;
  assign captWorker0_metaBram_serverAdapterA_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_1_outDataCore
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$D_IN =
	     captWorker0_metaBram_memory_1$DOB ;
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_1_cnt_2$whas &&
	     captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_1_cnt_2$whas &&
	     !captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_2_outDataCore
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$D_IN =
	     captWorker0_metaBram_memory_2$DOB ;
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     !captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_3_outDataCore
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$D_IN =
	     captWorker0_metaBram_memory_3$DOB ;
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_outDataCore
  assign captWorker0_metaBram_serverAdapterB_outDataCore$D_IN =
	     captWorker0_metaBram_memory$DOB ;
  assign captWorker0_metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_splaF
  assign captWorker0_splaF$D_IN =
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
	       3'd4 :
	       { 1'd0, captWorker0_wci_wslv_reqF$D_OUT[35:34] } ;
  assign captWorker0_splaF$ENQ =
	     MUX_captWorker0_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker0_splaF$DEQ =
	     WILL_FIRE_RL_captWorker0_advance_split_response ;
  assign captWorker0_splaF$CLR = 1'b0 ;

  // submodule captWorker0_wci_wslv_reqF
  assign captWorker0_wci_wslv_reqF$D_IN = captWorker0_wci_wslv_wciReq$wget ;
  assign captWorker0_wci_wslv_reqF$ENQ =
	     captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker0_wci_wslv_reqF$DEQ =
	     captWorker0_wci_wslv_reqF_r_deq$whas ;
  assign captWorker0_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule captWorker0_wsiS_reqFifo
  assign captWorker0_wsiS_reqFifo$D_IN = captWorker0_wsiS_wsiReq$wget ;
  assign captWorker0_wsiS_reqFifo$ENQ =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;
  assign captWorker0_wsiS_reqFifo$DEQ =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;
  assign captWorker0_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule captWorker1_dataBram_memory
  assign captWorker1_dataBram_memory$ADDRA = captWorker1_dataCount[9:0] ;
  assign captWorker1_dataBram_memory$ADDRB =
	     captWorker1_wci_wslv_reqF$D_OUT[43:34] ;
  assign captWorker1_dataBram_memory$DIA =
	     captWorker1_wsiS_reqFifo$D_OUT[43:12] ;
  assign captWorker1_dataBram_memory$DIB = 32'd0 ;
  assign captWorker1_dataBram_memory$WEA = 1'd1 ;
  assign captWorker1_dataBram_memory$WEB = 1'd0 ;
  assign captWorker1_dataBram_memory$ENA =
	     MUX_captWorker1_dataCount$write_1__SEL_2 ;
  assign captWorker1_dataBram_memory$ENB =
	     WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker1_dataBram_serverAdapterA_outDataCore
  assign captWorker1_dataBram_serverAdapterA_outDataCore$D_IN =
	     captWorker1_dataBram_memory$DOA ;
  assign captWorker1_dataBram_serverAdapterA_outDataCore$ENQ =
	     captWorker1_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker1_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker1_dataBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker1_dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_dataBram_serverAdapterB_outDataCore
  assign captWorker1_dataBram_serverAdapterB_outDataCore$D_IN =
	     captWorker1_dataBram_memory$DOB ;
  assign captWorker1_dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker1_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker1_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker1_dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker1_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker1_dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_memory
  assign captWorker1_metaBram_memory$ADDRA = captWorker1_metaCount[9:0] ;
  assign captWorker1_metaBram_memory$ADDRB =
	     captWorker1_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker1_metaBram_memory$DIA = { 18'd0, mlB__h60440 } ;
  assign captWorker1_metaBram_memory$DIB = 32'd0 ;
  assign captWorker1_metaBram_memory$WEA = 1'd1 ;
  assign captWorker1_metaBram_memory$WEB = 1'd0 ;
  assign captWorker1_metaBram_memory$ENA =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_memory$ENB =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker1_metaBram_memory_1
  assign captWorker1_metaBram_memory_1$ADDRA = captWorker1_metaCount[9:0] ;
  assign captWorker1_metaBram_memory_1$ADDRB =
	     captWorker1_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker1_metaBram_memory_1$DIA =
	     { 24'd0, captWorker1_wsiS_reqFifo$D_OUT[7:0] } ;
  assign captWorker1_metaBram_memory_1$DIB = 32'd0 ;
  assign captWorker1_metaBram_memory_1$WEA = 1'd1 ;
  assign captWorker1_metaBram_memory_1$WEB = 1'd0 ;
  assign captWorker1_metaBram_memory_1$ENA =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_memory_1$ENB =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways ;

  // submodule captWorker1_metaBram_memory_2
  assign captWorker1_metaBram_memory_2$ADDRA = captWorker1_metaCount[9:0] ;
  assign captWorker1_metaBram_memory_2$ADDRB =
	     captWorker1_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker1_metaBram_memory_2$DIA = captWorker1_nowW$wget[63:32] ;
  assign captWorker1_metaBram_memory_2$DIB = 32'd0 ;
  assign captWorker1_metaBram_memory_2$WEA = 1'd1 ;
  assign captWorker1_metaBram_memory_2$WEB = 1'd0 ;
  assign captWorker1_metaBram_memory_2$ENA =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_memory_2$ENB =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways ;

  // submodule captWorker1_metaBram_memory_3
  assign captWorker1_metaBram_memory_3$ADDRA = captWorker1_metaCount[9:0] ;
  assign captWorker1_metaBram_memory_3$ADDRB =
	     captWorker1_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker1_metaBram_memory_3$DIA = captWorker1_nowW$wget[31:0] ;
  assign captWorker1_metaBram_memory_3$DIB = 32'd0 ;
  assign captWorker1_metaBram_memory_3$WEA = 1'd1 ;
  assign captWorker1_metaBram_memory_3$WEB = 1'd0 ;
  assign captWorker1_metaBram_memory_3$ENA =
	     MUX_captWorker1_metaCount$write_1__SEL_2 ;
  assign captWorker1_metaBram_memory_3$ENB =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways ;

  // submodule captWorker1_metaBram_serverAdapterA_1_outDataCore
  assign captWorker1_metaBram_serverAdapterA_1_outDataCore$D_IN =
	     captWorker1_metaBram_memory_1$DOA ;
  assign captWorker1_metaBram_serverAdapterA_1_outDataCore$ENQ =
	     captWorker1_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_1_outDataCore$DEQ = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_serverAdapterA_2_outDataCore
  assign captWorker1_metaBram_serverAdapterA_2_outDataCore$D_IN =
	     captWorker1_metaBram_memory_2$DOA ;
  assign captWorker1_metaBram_serverAdapterA_2_outDataCore$ENQ =
	     captWorker1_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_2_outDataCore$DEQ = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_serverAdapterA_3_outDataCore
  assign captWorker1_metaBram_serverAdapterA_3_outDataCore$D_IN =
	     captWorker1_metaBram_memory_3$DOA ;
  assign captWorker1_metaBram_serverAdapterA_3_outDataCore$ENQ =
	     captWorker1_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_3_outDataCore$DEQ = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_serverAdapterA_outDataCore
  assign captWorker1_metaBram_serverAdapterA_outDataCore$D_IN =
	     captWorker1_metaBram_memory$DOA ;
  assign captWorker1_metaBram_serverAdapterA_outDataCore$ENQ =
	     captWorker1_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker1_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker1_metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_serverAdapterB_1_outDataCore
  assign captWorker1_metaBram_serverAdapterB_1_outDataCore$D_IN =
	     captWorker1_metaBram_memory_1$DOB ;
  assign captWorker1_metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     !captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_serverAdapterB_2_outDataCore
  assign captWorker1_metaBram_serverAdapterB_2_outDataCore$D_IN =
	     captWorker1_metaBram_memory_2$DOB ;
  assign captWorker1_metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     !captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_serverAdapterB_3_outDataCore
  assign captWorker1_metaBram_serverAdapterB_3_outDataCore$D_IN =
	     captWorker1_metaBram_memory_3$DOB ;
  assign captWorker1_metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_metaBram_serverAdapterB_outDataCore
  assign captWorker1_metaBram_serverAdapterB_outDataCore$D_IN =
	     captWorker1_metaBram_memory$DOB ;
  assign captWorker1_metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker1_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker1_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker1_metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker1_splaF
  assign captWorker1_splaF$D_IN =
	     (captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
	       3'd4 :
	       { 1'd0, captWorker1_wci_wslv_reqF$D_OUT[35:34] } ;
  assign captWorker1_splaF$ENQ =
	     MUX_captWorker1_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker1_splaF$DEQ =
	     WILL_FIRE_RL_captWorker1_advance_split_response ;
  assign captWorker1_splaF$CLR = 1'b0 ;

  // submodule captWorker1_wci_wslv_reqF
  assign captWorker1_wci_wslv_reqF$D_IN = captWorker1_wci_wslv_wciReq$wget ;
  assign captWorker1_wci_wslv_reqF$ENQ =
	     captWorker1_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker1_wci_wslv_reqF$DEQ =
	     captWorker1_wci_wslv_reqF_r_deq$whas ;
  assign captWorker1_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule captWorker1_wsiS_reqFifo
  assign captWorker1_wsiS_reqFifo$D_IN = captWorker1_wsiS_wsiReq$wget ;
  assign captWorker1_wsiS_reqFifo$ENQ =
	     WILL_FIRE_RL_captWorker1_wsiS_reqFifo_enq ;
  assign captWorker1_wsiS_reqFifo$DEQ =
	     WILL_FIRE_RL_captWorker1_doMessageAccept ;
  assign captWorker1_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule captWorker2_dataBram_memory
  assign captWorker2_dataBram_memory$ADDRA = captWorker2_dataCount[9:0] ;
  assign captWorker2_dataBram_memory$ADDRB =
	     captWorker2_wci_wslv_reqF$D_OUT[43:34] ;
  assign captWorker2_dataBram_memory$DIA =
	     captWorker2_wsiS_reqFifo$D_OUT[43:12] ;
  assign captWorker2_dataBram_memory$DIB = 32'd0 ;
  assign captWorker2_dataBram_memory$WEA = 1'd1 ;
  assign captWorker2_dataBram_memory$WEB = 1'd0 ;
  assign captWorker2_dataBram_memory$ENA =
	     MUX_captWorker2_dataCount$write_1__SEL_2 ;
  assign captWorker2_dataBram_memory$ENB =
	     WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker2_dataBram_serverAdapterA_outDataCore
  assign captWorker2_dataBram_serverAdapterA_outDataCore$D_IN =
	     captWorker2_dataBram_memory$DOA ;
  assign captWorker2_dataBram_serverAdapterA_outDataCore$ENQ =
	     captWorker2_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker2_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker2_dataBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker2_dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_dataBram_serverAdapterB_outDataCore
  assign captWorker2_dataBram_serverAdapterB_outDataCore$D_IN =
	     captWorker2_dataBram_memory$DOB ;
  assign captWorker2_dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker2_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker2_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker2_dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker2_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker2_dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_memory
  assign captWorker2_metaBram_memory$ADDRA = captWorker2_metaCount[9:0] ;
  assign captWorker2_metaBram_memory$ADDRB =
	     captWorker2_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker2_metaBram_memory$DIA = { 18'd0, mlB__h97342 } ;
  assign captWorker2_metaBram_memory$DIB = 32'd0 ;
  assign captWorker2_metaBram_memory$WEA = 1'd1 ;
  assign captWorker2_metaBram_memory$WEB = 1'd0 ;
  assign captWorker2_metaBram_memory$ENA =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_memory$ENB =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker2_metaBram_memory_1
  assign captWorker2_metaBram_memory_1$ADDRA = captWorker2_metaCount[9:0] ;
  assign captWorker2_metaBram_memory_1$ADDRB =
	     captWorker2_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker2_metaBram_memory_1$DIA =
	     { 24'd0, captWorker2_wsiS_reqFifo$D_OUT[7:0] } ;
  assign captWorker2_metaBram_memory_1$DIB = 32'd0 ;
  assign captWorker2_metaBram_memory_1$WEA = 1'd1 ;
  assign captWorker2_metaBram_memory_1$WEB = 1'd0 ;
  assign captWorker2_metaBram_memory_1$ENA =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_memory_1$ENB =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways ;

  // submodule captWorker2_metaBram_memory_2
  assign captWorker2_metaBram_memory_2$ADDRA = captWorker2_metaCount[9:0] ;
  assign captWorker2_metaBram_memory_2$ADDRB =
	     captWorker2_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker2_metaBram_memory_2$DIA = captWorker2_nowW$wget[63:32] ;
  assign captWorker2_metaBram_memory_2$DIB = 32'd0 ;
  assign captWorker2_metaBram_memory_2$WEA = 1'd1 ;
  assign captWorker2_metaBram_memory_2$WEB = 1'd0 ;
  assign captWorker2_metaBram_memory_2$ENA =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_memory_2$ENB =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways ;

  // submodule captWorker2_metaBram_memory_3
  assign captWorker2_metaBram_memory_3$ADDRA = captWorker2_metaCount[9:0] ;
  assign captWorker2_metaBram_memory_3$ADDRB =
	     captWorker2_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker2_metaBram_memory_3$DIA = captWorker2_nowW$wget[31:0] ;
  assign captWorker2_metaBram_memory_3$DIB = 32'd0 ;
  assign captWorker2_metaBram_memory_3$WEA = 1'd1 ;
  assign captWorker2_metaBram_memory_3$WEB = 1'd0 ;
  assign captWorker2_metaBram_memory_3$ENA =
	     MUX_captWorker2_metaCount$write_1__SEL_2 ;
  assign captWorker2_metaBram_memory_3$ENB =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways ;

  // submodule captWorker2_metaBram_serverAdapterA_1_outDataCore
  assign captWorker2_metaBram_serverAdapterA_1_outDataCore$D_IN =
	     captWorker2_metaBram_memory_1$DOA ;
  assign captWorker2_metaBram_serverAdapterA_1_outDataCore$ENQ =
	     captWorker2_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_1_outDataCore$DEQ = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_serverAdapterA_2_outDataCore
  assign captWorker2_metaBram_serverAdapterA_2_outDataCore$D_IN =
	     captWorker2_metaBram_memory_2$DOA ;
  assign captWorker2_metaBram_serverAdapterA_2_outDataCore$ENQ =
	     captWorker2_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_2_outDataCore$DEQ = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_serverAdapterA_3_outDataCore
  assign captWorker2_metaBram_serverAdapterA_3_outDataCore$D_IN =
	     captWorker2_metaBram_memory_3$DOA ;
  assign captWorker2_metaBram_serverAdapterA_3_outDataCore$ENQ =
	     captWorker2_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_3_outDataCore$DEQ = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_serverAdapterA_outDataCore
  assign captWorker2_metaBram_serverAdapterA_outDataCore$D_IN =
	     captWorker2_metaBram_memory$DOA ;
  assign captWorker2_metaBram_serverAdapterA_outDataCore$ENQ =
	     captWorker2_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker2_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker2_metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_serverAdapterB_1_outDataCore
  assign captWorker2_metaBram_serverAdapterB_1_outDataCore$D_IN =
	     captWorker2_metaBram_memory_1$DOB ;
  assign captWorker2_metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     !captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_serverAdapterB_2_outDataCore
  assign captWorker2_metaBram_serverAdapterB_2_outDataCore$D_IN =
	     captWorker2_metaBram_memory_2$DOB ;
  assign captWorker2_metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !captWorker2_metaBram_serverAdapterB_2_cnt_2$whas &&
	     captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_2_cnt_2$whas &&
	     !captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_serverAdapterB_3_outDataCore
  assign captWorker2_metaBram_serverAdapterB_3_outDataCore$D_IN =
	     captWorker2_metaBram_memory_3$DOB ;
  assign captWorker2_metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_metaBram_serverAdapterB_outDataCore
  assign captWorker2_metaBram_serverAdapterB_outDataCore$D_IN =
	     captWorker2_metaBram_memory$DOB ;
  assign captWorker2_metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker2_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker2_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker2_metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker2_splaF
  assign captWorker2_splaF$D_IN =
	     (captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
	       3'd4 :
	       { 1'd0, captWorker2_wci_wslv_reqF$D_OUT[35:34] } ;
  assign captWorker2_splaF$ENQ =
	     MUX_captWorker2_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker2_splaF$DEQ =
	     WILL_FIRE_RL_captWorker2_advance_split_response ;
  assign captWorker2_splaF$CLR = 1'b0 ;

  // submodule captWorker2_wci_wslv_reqF
  assign captWorker2_wci_wslv_reqF$D_IN = captWorker2_wci_wslv_wciReq$wget ;
  assign captWorker2_wci_wslv_reqF$ENQ =
	     captWorker2_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker2_wci_wslv_reqF$DEQ =
	     captWorker2_wci_wslv_reqF_r_deq$whas ;
  assign captWorker2_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule captWorker2_wsiS_reqFifo
  assign captWorker2_wsiS_reqFifo$D_IN = captWorker2_wsiS_wsiReq$wget ;
  assign captWorker2_wsiS_reqFifo$ENQ =
	     WILL_FIRE_RL_captWorker2_wsiS_reqFifo_enq ;
  assign captWorker2_wsiS_reqFifo$DEQ =
	     WILL_FIRE_RL_captWorker2_doMessageAccept ;
  assign captWorker2_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule wciMonW3
  assign wciMonW3$observe_MAddr = 32'h0 ;
  assign wciMonW3$observe_MAddrSpace = 1'b0 ;
  assign wciMonW3$observe_MByteEn = 4'h0 ;
  assign wciMonW3$observe_MCmd = 3'h0 ;
  assign wciMonW3$observe_MData = 32'h0 ;
  assign wciMonW3$observe_MFlag = 2'h0 ;
  assign wciMonW3$observe_MReset_n = 1'b0 ;
  assign wciMonW3$observe_SData = 32'h0 ;
  assign wciMonW3$observe_SFlag = 2'h0 ;
  assign wciMonW3$observe_SResp = 2'h0 ;
  assign wciMonW3$observe_SThreadBusy = 1'b0 ;
  assign wciMonW3$pmem_SThreadBusy =
	     !captWorker0_wsiS_sThreadBusy_dw$whas ||
	     captWorker0_wsiS_sThreadBusy_dw$wget ;
  assign wciMonW3$pmem_SReset_n =
	     !captWorker0_wsiS_isReset_isInReset &&
	     captWorker0_wsiS_operateD ;

  // submodule wsimMonW3_observer_evF
  assign wsimMonW3_observer_evF$D_IN =
	     { 59'h1AAAAAAAAAAAAAA,
	       IF_NOT_wsimMonW3_observer_mesgInFlight_814_840_ETC___d2849 } ;
  assign wsimMonW3_observer_evF$ENQ =
	     IF_wsimMonW3_observer_mesgInFlight_814_THEN_0__ETC___d2820 &&
	     wsimMonW3_observer_r_mCmd == 3'd1 &&
	     (!wsimMonW3_observer_mesgInFlight ||
	      wsimMonW3_observer_r_mReqLast) ;
  assign wsimMonW3_observer_evF$DEQ =
	     wsimMonW3_observer_evF$EMPTY_N && wsimMonW3_pmsender_evF$FULL_N ;
  assign wsimMonW3_observer_evF$CLR = 1'b0 ;

  // submodule wsimMonW3_pmsender_evF
  assign wsimMonW3_pmsender_evF$D_IN =
	     { CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q14,
	       CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q18 } ;
  assign wsimMonW3_pmsender_evF$ENQ =
	     wsimMonW3_observer_evF$EMPTY_N && wsimMonW3_pmsender_evF$FULL_N ;
  assign wsimMonW3_pmsender_evF$DEQ =
	     WILL_FIRE_RL_wsimMonW3_pmsender_serialize_message &&
	     wsimMonW3_pmsender_idx_928_EQ_IF_wsimMonW3_pms_ETC___d4616 ;
  assign wsimMonW3_pmsender_evF$CLR = 1'b0 ;

  // submodule wsisMonW3_observer_evF
  assign wsisMonW3_observer_evF$D_IN =
	     { 59'h1AAAAAAAAAAAAAA,
	       IF_NOT_wsisMonW3_observer_mesgInFlight_114_140_ETC___d1149 } ;
  assign wsisMonW3_observer_evF$ENQ =
	     IF_wsisMonW3_observer_mesgInFlight_114_THEN_0__ETC___d1120 &&
	     wsisMonW3_observer_r_mCmd == 3'd1 &&
	     (!wsisMonW3_observer_mesgInFlight ||
	      wsisMonW3_observer_r_mReqLast) ;
  assign wsisMonW3_observer_evF$DEQ =
	     wsisMonW3_observer_evF$EMPTY_N && wsisMonW3_pmsender_evF$FULL_N ;
  assign wsisMonW3_observer_evF$CLR = 1'b0 ;

  // submodule wsisMonW3_pmsender_evF
  assign wsisMonW3_pmsender_evF$D_IN =
	     { CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q19,
	       CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q23 } ;
  assign wsisMonW3_pmsender_evF$ENQ =
	     wsisMonW3_observer_evF$EMPTY_N && wsisMonW3_pmsender_evF$FULL_N ;
  assign wsisMonW3_pmsender_evF$DEQ =
	     WILL_FIRE_RL_wsisMonW3_pmsender_serialize_message &&
	     wsisMonW3_pmsender_idx_230_EQ_IF_wsisMonW3_pms_ETC___d4615 ;
  assign wsisMonW3_pmsender_evF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_wsimMonW3_observer_mesgInFlight_814_840_ETC___d2848 =
	     (!wsimMonW3_observer_mesgInFlight &&
	      wsimMonW3_observer_r_mReqLast) ?
	       { 32'hD0000000, wsimMonW3_observer_r_mReqInfo } :
	       { 26'd50331648, mlB__h67987 } ;
  assign IF_NOT_wsimMonW3_observer_mesgInFlight_814_840_ETC___d2849 =
	     (!wsimMonW3_observer_mesgInFlight &&
	      !wsimMonW3_observer_r_mReqLast) ?
	       { 32'hB0000000, wsimMonW3_observer_r_mReqInfo } :
	       IF_NOT_wsimMonW3_observer_mesgInFlight_814_840_ETC___d2848 ;
  assign IF_NOT_wsisMonW3_observer_mesgInFlight_114_140_ETC___d1148 =
	     (!wsisMonW3_observer_mesgInFlight &&
	      wsisMonW3_observer_r_mReqLast) ?
	       { 32'hD0000000, wsisMonW3_observer_r_mReqInfo } :
	       { 26'd50331648, mlB__h31076 } ;
  assign IF_NOT_wsisMonW3_observer_mesgInFlight_114_140_ETC___d1149 =
	     (!wsisMonW3_observer_mesgInFlight &&
	      !wsisMonW3_observer_r_mReqLast) ?
	       { 32'hB0000000, wsisMonW3_observer_r_mReqInfo } :
	       IF_NOT_wsisMonW3_observer_mesgInFlight_114_140_ETC___d1148 ;
  assign IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d927 =
	     IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d918 &&
	     CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q11 ;
  assign IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2622 =
	     IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2613 &&
	     CASE_captWorker1_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q12 ;
  assign IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4320 =
	     IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4311 &&
	     CASE_captWorker2_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q13 ;
  assign IF_wsimMonW3_observer_mesgInFlight_814_THEN_0__ETC___d2820 =
	     wsimMonW3_observer_mesgInFlight ?
	       !wsimMonW3_observer_r_mReqLast ||
	       wsimMonW3_observer_evF$FULL_N :
	       wsimMonW3_observer_evF$FULL_N ;
  assign IF_wsisMonW3_observer_mesgInFlight_114_THEN_0__ETC___d1120 =
	     wsisMonW3_observer_mesgInFlight ?
	       !wsisMonW3_observer_r_mReqLast ||
	       wsisMonW3_observer_evF$FULL_N :
	       wsisMonW3_observer_evF$FULL_N ;
  assign NOT_captWorker0_controlReg_30_BIT_0_31_32_OR_c_ETC___d856 =
	     !captWorker0_controlReg[0] ||
	     captWorker0_controlReg[1] &&
	     (!captWorker0_metaCount_34_ULT_1024___d4584 ||
	      !captWorker0_dataCount_37_ULT_1024___d4771) ||
	     (captWorker0_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!captWorker0_wsiS_reqFifo$D_OUT[57] ||
	      (captWorker0_metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker0_metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker0_metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker0_metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7) ;
  assign NOT_captWorker1_controlReg_525_BIT_0_526_527_O_ETC___d2551 =
	     !captWorker1_controlReg[0] ||
	     captWorker1_controlReg[1] &&
	     (!captWorker1_metaCount_529_ULT_1024___d4772 ||
	      !captWorker1_dataCount_532_ULT_1024___d4773) ||
	     (captWorker1_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!captWorker1_wsiS_reqFifo$D_OUT[57] ||
	      (captWorker1_metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker1_metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker1_metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker1_metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7) ;
  assign NOT_captWorker2_controlReg_223_BIT_0_224_225_O_ETC___d4249 =
	     !captWorker2_controlReg[0] ||
	     captWorker2_controlReg[1] &&
	     (!captWorker2_metaCount_227_ULT_1024___d4774 ||
	      !captWorker2_dataCount_230_ULT_1024___d4775) ||
	     (captWorker2_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!captWorker2_wsiS_reqFifo$D_OUT[57] ||
	      (captWorker2_metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker2_metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker2_metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker2_metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7) ;
  assign _0x81_CONCAT_IF_IF_wsisMonW3_pmsender_evF_first_ETC___d1482 =
	     { 8'h81,
	       CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5,
	       wsisMonW3_pmsender_srcTag,
	       x__h35872 } ;
  assign _0x82_CONCAT_IF_IF_wsimMonW3_pmsender_evF_first_ETC___d3180 =
	     { 8'h82,
	       CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10,
	       wsimMonW3_pmsender_srcTag,
	       x__h72774 } ;
  assign captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878 =
	     captWorker0_controlReg[0] &&
	     (!captWorker0_controlReg[1] ||
	      captWorker0_metaCount_34_ULT_1024___d4584 &&
	      captWorker0_dataCount_37_ULT_1024___d4771) ;
  assign captWorker0_dataBram_serverAdapterB_cnt_21_PLU_ETC___d327 =
	     captWorker0_dataBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_dataCount_37_ULT_1024___d4771 =
	     captWorker0_dataCount < 32'd1024 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_57_P_ETC___d563 =
	     captWorker0_metaBram_serverAdapterB_1_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_1_cnt_2$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_75_P_ETC___d681 =
	     captWorker0_metaBram_serverAdapterB_2_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_93_P_ETC___d799 =
	     captWorker0_metaBram_serverAdapterB_3_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_metaBram_serverAdapterB_cnt_39_PLU_ETC___d445 =
	     captWorker0_metaBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_metaCount_34_ULT_1024___d4584 =
	     captWorker0_metaCount < 32'd1024 ;
  assign captWorker0_splaF_i_notEmpty__96_AND_IF_captWo_ETC___d929 =
	     captWorker0_splaF$EMPTY_N &&
	     (captWorker0_splaF$D_OUT[2] ?
		(captWorker0_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 captWorker0_dataBram_serverAdapterB_outData_enqData$whas) &&
		(captWorker0_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker0_dataBram_serverAdapterB_outData_outData$whas) :
		IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d927) ;
  assign captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573 =
	     captWorker1_controlReg[0] &&
	     (!captWorker1_controlReg[1] ||
	      captWorker1_metaCount_529_ULT_1024___d4772 &&
	      captWorker1_dataCount_532_ULT_1024___d4773) ;
  assign captWorker1_dataBram_serverAdapterB_cnt_016_PL_ETC___d2022 =
	     captWorker1_dataBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker1_dataBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker1_dataBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker1_dataCount_532_ULT_1024___d4773 =
	     captWorker1_dataCount < 32'd1024 ;
  assign captWorker1_metaBram_serverAdapterB_1_cnt_252__ETC___d2258 =
	     captWorker1_metaBram_serverAdapterB_1_cnt +
	     (WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker1_metaBram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker1_metaBram_serverAdapterB_2_cnt_370__ETC___d2376 =
	     captWorker1_metaBram_serverAdapterB_2_cnt +
	     (WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_2_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker1_metaBram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker1_metaBram_serverAdapterB_3_cnt_488__ETC___d2494 =
	     captWorker1_metaBram_serverAdapterB_3_cnt +
	     (WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_3_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker1_metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker1_metaBram_serverAdapterB_cnt_134_PL_ETC___d2140 =
	     captWorker1_metaBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker1_metaBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker1_metaBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker1_metaCount_529_ULT_1024___d4772 =
	     captWorker1_metaCount < 32'd1024 ;
  assign captWorker1_splaF_i_notEmpty__591_AND_IF_captW_ETC___d2624 =
	     captWorker1_splaF$EMPTY_N &&
	     (captWorker1_splaF$D_OUT[2] ?
		(captWorker1_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 captWorker1_dataBram_serverAdapterB_outData_enqData$whas) &&
		(captWorker1_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker1_dataBram_serverAdapterB_outData_outData$whas) :
		IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2622) ;
  assign captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271 =
	     captWorker2_controlReg[0] &&
	     (!captWorker2_controlReg[1] ||
	      captWorker2_metaCount_227_ULT_1024___d4774 &&
	      captWorker2_dataCount_230_ULT_1024___d4775) ;
  assign captWorker2_dataBram_serverAdapterB_cnt_714_PL_ETC___d3720 =
	     captWorker2_dataBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker2_dataBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker2_dataBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker2_dataCount_230_ULT_1024___d4775 =
	     captWorker2_dataCount < 32'd1024 ;
  assign captWorker2_metaBram_serverAdapterB_1_cnt_950__ETC___d3956 =
	     captWorker2_metaBram_serverAdapterB_1_cnt +
	     (WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker2_metaBram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker2_metaBram_serverAdapterB_2_cnt_068__ETC___d4074 =
	     captWorker2_metaBram_serverAdapterB_2_cnt +
	     (WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_2_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker2_metaBram_serverAdapterB_2_cnt_2$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker2_metaBram_serverAdapterB_3_cnt_186__ETC___d4192 =
	     captWorker2_metaBram_serverAdapterB_3_cnt +
	     (WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_3_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker2_metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker2_metaBram_serverAdapterB_cnt_832_PL_ETC___d3838 =
	     captWorker2_metaBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker2_metaBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker2_metaBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker2_metaCount_227_ULT_1024___d4774 =
	     captWorker2_metaCount < 32'd1024 ;
  assign captWorker2_splaF_i_notEmpty__289_AND_IF_captW_ETC___d4322 =
	     captWorker2_splaF$EMPTY_N &&
	     (captWorker2_splaF$D_OUT[2] ?
		(captWorker2_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 captWorker2_dataBram_serverAdapterB_outData_enqData$whas) &&
		(captWorker2_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker2_dataBram_serverAdapterB_outData_outData$whas) :
		IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4320) ;
  assign g_data__h102031 =
	     (captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h0) ?
	       v__h100956 :
	       32'd0 ;
  assign g_data__h28226 =
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h0) ?
	       v__h27151 :
	       32'd0 ;
  assign g_data__h65129 =
	     (captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h0) ?
	       v__h64054 :
	       32'd0 ;
  assign mlB__h23537 = captWorker0_mesgLengthSoFar + mlInc__h23536 ;
  assign mlB__h31076 = wsisMonW3_observer_mesgLengthSoFar + mlInc__h31075 ;
  assign mlB__h60440 = captWorker1_mesgLengthSoFar + mlInc__h60439 ;
  assign mlB__h67987 = wsimMonW3_observer_mesgLengthSoFar + mlInc__h67986 ;
  assign mlB__h97342 = captWorker2_mesgLengthSoFar + mlInc__h97341 ;
  assign mlInc__h23536 =
	     captWorker0_wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h23585 + y__h23586 } :
	       14'd4 ;
  assign mlInc__h31075 =
	     wsisMonW3_observer_r_mReqLast ?
	       { 11'd0, x__h31122 + y__h31123 } :
	       14'd4 ;
  assign mlInc__h60439 =
	     captWorker1_wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h60488 + y__h60489 } :
	       14'd4 ;
  assign mlInc__h67986 =
	     wsimMonW3_observer_r_mReqLast ?
	       { 11'd0, x__h68033 + y__h68034 } :
	       14'd4 ;
  assign mlInc__h97341 =
	     captWorker2_wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h97390 + y__h97391 } :
	       14'd4 ;
  assign rdat___1__h101053 =
	     { 6'd40,
	       !captWorker2_metaCount_227_ULT_1024___d4774,
	       !captWorker2_dataCount_230_ULT_1024___d4775,
	       24'd2361866 } ;
  assign rdat___1__h101127 = { 24'd0, captWorker2_wsiS_statusR } ;
  assign rdat___1__h27248 =
	     { 6'd40,
	       !captWorker0_metaCount_34_ULT_1024___d4584,
	       !captWorker0_dataCount_37_ULT_1024___d4771,
	       24'd2361866 } ;
  assign rdat___1__h27322 = { 24'd0, captWorker0_wsiS_statusR } ;
  assign rdat___1__h64151 =
	     { 6'd40,
	       !captWorker1_metaCount_529_ULT_1024___d4772,
	       !captWorker1_dataCount_532_ULT_1024___d4773,
	       24'd2361866 } ;
  assign rdat___1__h64225 = { 24'd0, captWorker1_wsiS_statusR } ;
  assign v__h25765 =
	     captWorker0_splaF$D_OUT[2] ?
	       y_avValue__h26392 :
	       IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d951 ;
  assign v__h62668 =
	     captWorker1_splaF$D_OUT[2] ?
	       y_avValue__h63295 :
	       IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2646 ;
  assign v__h99570 =
	     captWorker2_splaF$D_OUT[2] ?
	       y_avValue__h100197 :
	       IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4344 ;
  assign wsimMonW3_pmsender_idx_928_EQ_IF_wsimMonW3_pms_ETC___d4616 =
	     wsimMonW3_pmsender_idx == len__h71697 ;
  assign wsisMonW3_pmsender_idx_230_EQ_IF_wsisMonW3_pms_ETC___d4615 =
	     wsisMonW3_pmsender_idx == len__h34789 ;
  assign x__h23585 = x__h23597 + y__h23598 ;
  assign x__h23597 = x__h23609 + y__h23610 ;
  assign x__h23609 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[11] } ;
  assign x__h31122 = x__h31134 + y__h31135 ;
  assign x__h31134 = x__h31146 + y__h31147 ;
  assign x__h31146 = { 2'd0, wsisMonW3_observer_r_mByteEn[3] } ;
  assign x__h60488 = x__h60500 + y__h60501 ;
  assign x__h60500 = x__h60512 + y__h60513 ;
  assign x__h60512 = { 2'd0, captWorker1_wsiS_reqFifo$D_OUT[11] } ;
  assign x__h68033 = x__h68045 + y__h68046 ;
  assign x__h68045 = x__h68057 + y__h68058 ;
  assign x__h68057 = { 2'd0, wsimMonW3_observer_r_mByteEn[3] } ;
  assign x__h97390 = x__h97402 + y__h97403 ;
  assign x__h97402 = x__h97414 + y__h97415 ;
  assign x__h97414 = { 2'd0, captWorker2_wsiS_reqFifo$D_OUT[11] } ;
  assign x_burstLength__h34857 = { 9'd0, len__h34789 } ;
  assign x_burstLength__h71765 = { 9'd0, len__h71697 } ;
  assign y__h23586 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[8] } ;
  assign y__h23598 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[9] } ;
  assign y__h23610 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[10] } ;
  assign y__h31123 = { 2'd0, wsisMonW3_observer_r_mByteEn[0] } ;
  assign y__h31135 = { 2'd0, wsisMonW3_observer_r_mByteEn[1] } ;
  assign y__h31147 = { 2'd0, wsisMonW3_observer_r_mByteEn[2] } ;
  assign y__h60489 = { 2'd0, captWorker1_wsiS_reqFifo$D_OUT[8] } ;
  assign y__h60501 = { 2'd0, captWorker1_wsiS_reqFifo$D_OUT[9] } ;
  assign y__h60513 = { 2'd0, captWorker1_wsiS_reqFifo$D_OUT[10] } ;
  assign y__h68034 = { 2'd0, wsimMonW3_observer_r_mByteEn[0] } ;
  assign y__h68046 = { 2'd0, wsimMonW3_observer_r_mByteEn[1] } ;
  assign y__h68058 = { 2'd0, wsimMonW3_observer_r_mByteEn[2] } ;
  assign y__h97391 = { 2'd0, captWorker2_wsiS_reqFifo$D_OUT[8] } ;
  assign y__h97403 = { 2'd0, captWorker2_wsiS_reqFifo$D_OUT[9] } ;
  assign y__h97415 = { 2'd0, captWorker2_wsiS_reqFifo$D_OUT[10] } ;
  assign y_avValue__h100197 =
	     captWorker2_dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker2_dataBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker2_dataBram_memory$DOB ;
  assign y_avValue__h100241 =
	     captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker2_metaBram_memory$DOB ;
  assign y_avValue__h100281 =
	     captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       captWorker2_metaBram_memory_1$DOB ;
  assign y_avValue__h100321 =
	     captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       captWorker2_metaBram_memory_2$DOB ;
  assign y_avValue__h100361 =
	     captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       captWorker2_metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       captWorker2_metaBram_memory_3$DOB ;
  assign y_avValue__h26392 =
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker0_dataBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker0_dataBram_memory$DOB ;
  assign y_avValue__h26436 =
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker0_metaBram_memory$DOB ;
  assign y_avValue__h26476 =
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_1$DOB ;
  assign y_avValue__h26516 =
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_2$DOB ;
  assign y_avValue__h26556 =
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_3$DOB ;
  assign y_avValue__h63295 =
	     captWorker1_dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker1_dataBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker1_dataBram_memory$DOB ;
  assign y_avValue__h63339 =
	     captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker1_metaBram_memory$DOB ;
  assign y_avValue__h63379 =
	     captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       captWorker1_metaBram_memory_1$DOB ;
  assign y_avValue__h63419 =
	     captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       captWorker1_metaBram_memory_2$DOB ;
  assign y_avValue__h63459 =
	     captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       captWorker1_metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       captWorker1_metaBram_memory_3$DOB ;
  always@(wsisMonW3_pmsender_evF$D_OUT)
  begin
    case (wsisMonW3_pmsender_evF$D_OUT[98:96])
      3'd0: len__h34789 = 3'd1;
      3'd1: len__h34789 = 3'd2;
      3'd2: len__h34789 = 3'd3;
      default: len__h34789 = 3'd7;
    endcase
  end
  always@(wsimMonW3_pmsender_evF$D_OUT)
  begin
    case (wsimMonW3_pmsender_evF$D_OUT[98:96])
      3'd0: len__h71697 = 3'd1;
      3'd1: len__h71697 = 3'd2;
      3'd2: len__h71697 = 3'd3;
      default: len__h71697 = 3'd7;
    endcase
  end
  always@(wsisMonW3_pmsender_evF$D_OUT)
  begin
    case (wsisMonW3_pmsender_evF$D_OUT[98:96])
      3'd0: x__h35872 = 8'd1;
      3'd1: x__h35872 = 8'd2;
      3'd2: x__h35872 = 8'd3;
      3'd3: x__h35872 = 8'd4;
      3'd4: x__h35872 = 8'd5;
      default: x__h35872 = 8'd6;
    endcase
  end
  always@(wsimMonW3_pmsender_evF$D_OUT)
  begin
    case (wsimMonW3_pmsender_evF$D_OUT[98:96])
      3'd0: x__h72774 = 8'd1;
      3'd1: x__h72774 = 8'd2;
      3'd2: x__h72774 = 8'd3;
      3'd3: x__h72774 = 8'd4;
      3'd4: x__h72774 = 8'd5;
      default: x__h72774 = 8'd6;
    endcase
  end
  always@(captWorker0_wci_wslv_reqF$D_OUT or
	  captWorker0_metaBram_serverAdapterB_3_cnt or
	  captWorker0_metaBram_serverAdapterB_cnt or
	  captWorker0_metaBram_serverAdapterB_1_cnt or
	  captWorker0_metaBram_serverAdapterB_2_cnt)
  begin
    case (captWorker0_wci_wslv_reqF$D_OUT[35:34])
      2'd0:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d993 =
	      (captWorker0_metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7;
      2'd1:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d993 =
	      (captWorker0_metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7;
      2'd2:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d993 =
	      (captWorker0_metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7;
      2'd3:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d993 =
	      captWorker0_wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	      (captWorker0_metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7;
    endcase
  end
  always@(captWorker0_wci_wslv_reqF$D_OUT or
	  captWorker0_splaF$FULL_N or
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d993 or
	  captWorker0_dataBram_serverAdapterB_cnt)
  begin
    case (captWorker0_wci_wslv_reqF$D_OUT[63:52])
      12'h0: IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d997 = 1'b1;
      12'h800:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d997 =
	      (captWorker0_dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	      captWorker0_splaF$FULL_N;
      default: IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d997 =
		   captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		   captWorker0_splaF$FULL_N &&
		   IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d993;
    endcase
  end
  always@(captWorker0_splaF$D_OUT or
	  y_avValue__h26556 or
	  y_avValue__h26436 or y_avValue__h26476 or y_avValue__h26516)
  begin
    case (captWorker0_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d951 =
	      y_avValue__h26436;
      2'd1:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d951 =
	      y_avValue__h26476;
      2'd2:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d951 =
	      y_avValue__h26516;
      2'd3:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d951 =
	      y_avValue__h26556;
    endcase
  end
  always@(wsisMonW3_pmsender_evF$D_OUT)
  begin
    case (wsisMonW3_pmsender_evF$D_OUT[71:64])
      8'd0: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd0;
      8'd1: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd1;
      8'd2: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd2;
      8'd3: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd3;
      8'd4: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd4;
      8'd5: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd5;
      8'd6: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd6;
      8'd7: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd7;
      8'd8: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd8;
      8'd9: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd9;
      8'd10: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd10;
      8'd11: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd11;
      8'd12: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd12;
      8'd13: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd13;
      8'd14: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd14;
      8'd16: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd15;
      8'd32: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd16;
      8'd48: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd17;
      8'd64: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd18;
      8'd80: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd19;
      8'd96: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd20;
      8'd97: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd21;
      8'd128: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd22;
      8'd144: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd23;
      8'd160: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd24;
      8'd176: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd25;
      8'd192: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd26;
      8'd208: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd27;
      default: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 = 5'd28;
    endcase
  end
  always@(wsisMonW3_pmsender_evF$D_OUT)
  begin
    case (wsisMonW3_pmsender_evF$D_OUT[7:0])
      8'd0: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd0;
      8'd1: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd1;
      8'd2: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd2;
      8'd3: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd3;
      8'd4: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd4;
      8'd5: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd5;
      8'd6: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd6;
      8'd7: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd7;
      8'd8: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd8;
      8'd9: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd9;
      8'd10: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd10;
      8'd11: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd11;
      8'd12: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd12;
      8'd13: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd13;
      8'd14: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd14;
      8'd16: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd15;
      8'd32: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd16;
      8'd48: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd17;
      8'd64: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd18;
      8'd80: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd19;
      8'd96: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd20;
      8'd97: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd21;
      8'd128: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd22;
      8'd144: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd23;
      8'd160: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd24;
      8'd176: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd25;
      8'd192: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd26;
      8'd208: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd27;
      default: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 = 5'd28;
    endcase
  end
  always@(wsisMonW3_pmsender_evF$D_OUT)
  begin
    case (wsisMonW3_pmsender_evF$D_OUT[39:32])
      8'd0: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd0;
      8'd1: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd1;
      8'd2: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd2;
      8'd3: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd3;
      8'd4: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd4;
      8'd5: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd5;
      8'd6: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd6;
      8'd7: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd7;
      8'd8: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd8;
      8'd9: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd9;
      8'd10: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd10;
      8'd11: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd11;
      8'd12: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd12;
      8'd13: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd13;
      8'd14: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd14;
      8'd16: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd15;
      8'd32: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd16;
      8'd48: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd17;
      8'd64: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd18;
      8'd80: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd19;
      8'd96: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd20;
      8'd97: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd21;
      8'd128: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd22;
      8'd144: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd23;
      8'd160: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd24;
      8'd176: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd25;
      8'd192: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd26;
      8'd208: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd27;
      default: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3 = 5'd28;
    endcase
  end
  always@(wsisMonW3_pmsender_evF$D_OUT or
	  CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1 or
	  CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2 or
	  CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3)
  begin
    case (wsisMonW3_pmsender_evF$D_OUT[98:96])
      3'd0:
	  CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q4 =
	      CASE_wsisMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q2;
      3'd1:
	  CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q4 =
	      CASE_wsisMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q3;
      default: CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q4 =
		   CASE_wsisMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q1;
    endcase
  end
  always@(CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q4)
  begin
    case (CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q4)
      5'd0: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd0;
      5'd1: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd1;
      5'd2: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd2;
      5'd3: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd3;
      5'd4: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd4;
      5'd5: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd5;
      5'd6: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd6;
      5'd7: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd7;
      5'd8: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd8;
      5'd9: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd9;
      5'd10: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd10;
      5'd11: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd11;
      5'd12: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd12;
      5'd13: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd13;
      5'd14: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd14;
      5'd15: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd16;
      5'd16: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd32;
      5'd17: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd48;
      5'd18: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd64;
      5'd19: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd80;
      5'd20: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd96;
      5'd21: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd97;
      5'd22: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd128;
      5'd23: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd144;
      5'd24: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd160;
      5'd25: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd176;
      5'd26: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd192;
      5'd27: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 = 8'd208;
      default: CASE_CASE_wsisMonW3_pmsender_evFD_OUT_BITS_98__ETC__q5 =
		   8'd255;
    endcase
  end
  always@(wsisMonW3_pmsender_idx or
	  wsisMonW3_pmsender_evF$D_OUT or
	  _0x81_CONCAT_IF_IF_wsisMonW3_pmsender_evF_first_ETC___d1482)
  begin
    case (wsisMonW3_pmsender_idx)
      3'd1:
	  x_data__h34858 =
	      _0x81_CONCAT_IF_IF_wsisMonW3_pmsender_evF_first_ETC___d1482;
      3'd2:
	  x_data__h34858 =
	      (wsisMonW3_pmsender_evF$D_OUT[98:96] == 3'd1) ?
		wsisMonW3_pmsender_evF$D_OUT[31:0] :
		wsisMonW3_pmsender_evF$D_OUT[63:32];
      default: x_data__h34858 = wsisMonW3_pmsender_evF$D_OUT[31:0];
    endcase
  end
  always@(captWorker1_splaF$D_OUT or
	  y_avValue__h63459 or
	  y_avValue__h63339 or y_avValue__h63379 or y_avValue__h63419)
  begin
    case (captWorker1_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2646 =
	      y_avValue__h63339;
      2'd1:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2646 =
	      y_avValue__h63379;
      2'd2:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2646 =
	      y_avValue__h63419;
      2'd3:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2646 =
	      y_avValue__h63459;
    endcase
  end
  always@(captWorker1_wci_wslv_reqF$D_OUT or
	  captWorker1_metaBram_serverAdapterB_3_cnt or
	  captWorker1_metaBram_serverAdapterB_cnt or
	  captWorker1_metaBram_serverAdapterB_1_cnt or
	  captWorker1_metaBram_serverAdapterB_2_cnt)
  begin
    case (captWorker1_wci_wslv_reqF$D_OUT[35:34])
      2'd0:
	  IF_captWorker1_wci_wslv_reqF_first__740_BITS_3_ETC___d2688 =
	      (captWorker1_metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7;
      2'd1:
	  IF_captWorker1_wci_wslv_reqF_first__740_BITS_3_ETC___d2688 =
	      (captWorker1_metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7;
      2'd2:
	  IF_captWorker1_wci_wslv_reqF_first__740_BITS_3_ETC___d2688 =
	      (captWorker1_metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7;
      2'd3:
	  IF_captWorker1_wci_wslv_reqF_first__740_BITS_3_ETC___d2688 =
	      captWorker1_wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	      (captWorker1_metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7;
    endcase
  end
  always@(captWorker1_wci_wslv_reqF$D_OUT or
	  captWorker1_splaF$FULL_N or
	  IF_captWorker1_wci_wslv_reqF_first__740_BITS_3_ETC___d2688 or
	  captWorker1_dataBram_serverAdapterB_cnt)
  begin
    case (captWorker1_wci_wslv_reqF$D_OUT[63:52])
      12'h0:
	  IF_captWorker1_wci_wslv_reqF_first__740_BITS_6_ETC___d2692 = 1'b1;
      12'h800:
	  IF_captWorker1_wci_wslv_reqF_first__740_BITS_6_ETC___d2692 =
	      (captWorker1_dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	      captWorker1_splaF$FULL_N;
      default: IF_captWorker1_wci_wslv_reqF_first__740_BITS_6_ETC___d2692 =
		   captWorker1_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		   captWorker1_splaF$FULL_N &&
		   IF_captWorker1_wci_wslv_reqF_first__740_BITS_3_ETC___d2688;
    endcase
  end
  always@(wsimMonW3_pmsender_evF$D_OUT)
  begin
    case (wsimMonW3_pmsender_evF$D_OUT[71:64])
      8'd0: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd0;
      8'd1: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd1;
      8'd2: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd2;
      8'd3: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd3;
      8'd4: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd4;
      8'd5: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd5;
      8'd6: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd6;
      8'd7: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd7;
      8'd8: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd8;
      8'd9: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd9;
      8'd10: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd10;
      8'd11: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd11;
      8'd12: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd12;
      8'd13: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd13;
      8'd14: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd14;
      8'd16: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd15;
      8'd32: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd16;
      8'd48: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd17;
      8'd64: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd18;
      8'd80: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd19;
      8'd96: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd20;
      8'd97: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd21;
      8'd128: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd22;
      8'd144: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd23;
      8'd160: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd24;
      8'd176: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd25;
      8'd192: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd26;
      8'd208: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd27;
      default: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 = 5'd28;
    endcase
  end
  always@(wsimMonW3_pmsender_evF$D_OUT)
  begin
    case (wsimMonW3_pmsender_evF$D_OUT[7:0])
      8'd0: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd0;
      8'd1: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd1;
      8'd2: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd2;
      8'd3: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd3;
      8'd4: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd4;
      8'd5: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd5;
      8'd6: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd6;
      8'd7: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd7;
      8'd8: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd8;
      8'd9: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd9;
      8'd10: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd10;
      8'd11: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd11;
      8'd12: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd12;
      8'd13: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd13;
      8'd14: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd14;
      8'd16: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd15;
      8'd32: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd16;
      8'd48: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd17;
      8'd64: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd18;
      8'd80: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd19;
      8'd96: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd20;
      8'd97: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd21;
      8'd128: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd22;
      8'd144: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd23;
      8'd160: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd24;
      8'd176: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd25;
      8'd192: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd26;
      8'd208: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd27;
      default: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 = 5'd28;
    endcase
  end
  always@(wsimMonW3_pmsender_evF$D_OUT)
  begin
    case (wsimMonW3_pmsender_evF$D_OUT[39:32])
      8'd0: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd0;
      8'd1: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd1;
      8'd2: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd2;
      8'd3: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd3;
      8'd4: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd4;
      8'd5: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd5;
      8'd6: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd6;
      8'd7: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd7;
      8'd8: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd8;
      8'd9: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd9;
      8'd10: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd10;
      8'd11: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd11;
      8'd12: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd12;
      8'd13: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd13;
      8'd14: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd14;
      8'd16: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd15;
      8'd32: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd16;
      8'd48: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd17;
      8'd64: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd18;
      8'd80: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd19;
      8'd96: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd20;
      8'd97: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd21;
      8'd128: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd22;
      8'd144: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd23;
      8'd160: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd24;
      8'd176: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd25;
      8'd192: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd26;
      8'd208: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd27;
      default: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8 = 5'd28;
    endcase
  end
  always@(wsimMonW3_pmsender_evF$D_OUT or
	  CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6 or
	  CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7 or
	  CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8)
  begin
    case (wsimMonW3_pmsender_evF$D_OUT[98:96])
      3'd0:
	  CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q9 =
	      CASE_wsimMonW3_pmsender_evFD_OUT_BITS_7_TO_0__ETC__q7;
      3'd1:
	  CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q9 =
	      CASE_wsimMonW3_pmsender_evFD_OUT_BITS_39_TO_3_ETC__q8;
      default: CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q9 =
		   CASE_wsimMonW3_pmsender_evFD_OUT_BITS_71_TO_6_ETC__q6;
    endcase
  end
  always@(CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q9)
  begin
    case (CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98_TO_9_ETC__q9)
      5'd0: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd0;
      5'd1: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd1;
      5'd2: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd2;
      5'd3: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd3;
      5'd4: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd4;
      5'd5: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd5;
      5'd6: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd6;
      5'd7: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd7;
      5'd8: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd8;
      5'd9: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd9;
      5'd10: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd10;
      5'd11: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd11;
      5'd12: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd12;
      5'd13: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd13;
      5'd14: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd14;
      5'd15: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd16;
      5'd16: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd32;
      5'd17: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd48;
      5'd18: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd64;
      5'd19: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd80;
      5'd20: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd96;
      5'd21: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd97;
      5'd22: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd128;
      5'd23: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd144;
      5'd24: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd160;
      5'd25: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd176;
      5'd26: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd192;
      5'd27: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 = 8'd208;
      default: CASE_CASE_wsimMonW3_pmsender_evFD_OUT_BITS_98__ETC__q10 =
		   8'd255;
    endcase
  end
  always@(wsimMonW3_pmsender_idx or
	  wsimMonW3_pmsender_evF$D_OUT or
	  _0x82_CONCAT_IF_IF_wsimMonW3_pmsender_evF_first_ETC___d3180)
  begin
    case (wsimMonW3_pmsender_idx)
      3'd1:
	  x_data__h71766 =
	      _0x82_CONCAT_IF_IF_wsimMonW3_pmsender_evF_first_ETC___d3180;
      3'd2:
	  x_data__h71766 =
	      (wsimMonW3_pmsender_evF$D_OUT[98:96] == 3'd1) ?
		wsimMonW3_pmsender_evF$D_OUT[31:0] :
		wsimMonW3_pmsender_evF$D_OUT[63:32];
      default: x_data__h71766 = wsimMonW3_pmsender_evF$D_OUT[31:0];
    endcase
  end
  always@(captWorker2_splaF$D_OUT or
	  y_avValue__h100361 or
	  y_avValue__h100241 or y_avValue__h100281 or y_avValue__h100321)
  begin
    case (captWorker2_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4344 =
	      y_avValue__h100241;
      2'd1:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4344 =
	      y_avValue__h100281;
      2'd2:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4344 =
	      y_avValue__h100321;
      2'd3:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4344 =
	      y_avValue__h100361;
    endcase
  end
  always@(captWorker2_wci_wslv_reqF$D_OUT or
	  captWorker2_metaBram_serverAdapterB_3_cnt or
	  captWorker2_metaBram_serverAdapterB_cnt or
	  captWorker2_metaBram_serverAdapterB_1_cnt or
	  captWorker2_metaBram_serverAdapterB_2_cnt)
  begin
    case (captWorker2_wci_wslv_reqF$D_OUT[35:34])
      2'd0:
	  IF_captWorker2_wci_wslv_reqF_first__438_BITS_3_ETC___d4386 =
	      (captWorker2_metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7;
      2'd1:
	  IF_captWorker2_wci_wslv_reqF_first__438_BITS_3_ETC___d4386 =
	      (captWorker2_metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7;
      2'd2:
	  IF_captWorker2_wci_wslv_reqF_first__438_BITS_3_ETC___d4386 =
	      (captWorker2_metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7;
      2'd3:
	  IF_captWorker2_wci_wslv_reqF_first__438_BITS_3_ETC___d4386 =
	      captWorker2_wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	      (captWorker2_metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7;
    endcase
  end
  always@(captWorker2_wci_wslv_reqF$D_OUT or
	  captWorker2_splaF$FULL_N or
	  IF_captWorker2_wci_wslv_reqF_first__438_BITS_3_ETC___d4386 or
	  captWorker2_dataBram_serverAdapterB_cnt)
  begin
    case (captWorker2_wci_wslv_reqF$D_OUT[63:52])
      12'h0:
	  IF_captWorker2_wci_wslv_reqF_first__438_BITS_6_ETC___d4390 = 1'b1;
      12'h800:
	  IF_captWorker2_wci_wslv_reqF_first__438_BITS_6_ETC___d4390 =
	      (captWorker2_dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	      captWorker2_splaF$FULL_N;
      default: IF_captWorker2_wci_wslv_reqF_first__438_BITS_6_ETC___d4390 =
		   captWorker2_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		   captWorker2_splaF$FULL_N &&
		   IF_captWorker2_wci_wslv_reqF_first__438_BITS_3_ETC___d4386;
    endcase
  end
  always@(captWorker0_wci_wslv_reqF$D_OUT or
	  captWorker0_controlReg or
	  captWorker0_metaCount or
	  captWorker0_dataCount or
	  rdat___1__h27248 or
	  rdat___1__h27322 or captWorker0_wsiS_extStatusW$wget)
  begin
    case (captWorker0_wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h27151 = captWorker0_controlReg;
      8'h04: v__h27151 = captWorker0_metaCount;
      8'h08: v__h27151 = captWorker0_dataCount;
      8'h0C: v__h27151 = rdat___1__h27248;
      8'h10: v__h27151 = rdat___1__h27322;
      8'h14: v__h27151 = captWorker0_wsiS_extStatusW$wget[95:64];
      8'h18: v__h27151 = captWorker0_wsiS_extStatusW$wget[63:32];
      8'h1C: v__h27151 = captWorker0_wsiS_extStatusW$wget[31:0];
      default: v__h27151 = 32'd0;
    endcase
  end
  always@(captWorker0_splaF$D_OUT or
	  captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas or
	  captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_outData_enqData$whas or
	  captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas or
	  captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (captWorker0_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d918 =
	      captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d918 =
	      captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d918 =
	      captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_captWorker0_splaF_first__97_BITS_1_TO_0_99__ETC___d918 =
	      captWorker0_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(captWorker0_splaF$D_OUT or
	  captWorker0_metaBram_serverAdapterB_3_outData_outData$whas or
	  captWorker0_metaBram_serverAdapterB_outData_outData$whas or
	  captWorker0_metaBram_serverAdapterB_1_outData_outData$whas or
	  captWorker0_metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (captWorker0_splaF$D_OUT[1:0])
      2'd0:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q11 =
	      captWorker0_metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q11 =
	      captWorker0_metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q11 =
	      captWorker0_metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q11 =
	      captWorker0_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker0_metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(captWorker1_wci_wslv_reqF$D_OUT or
	  captWorker1_controlReg or
	  captWorker1_metaCount or
	  captWorker1_dataCount or
	  rdat___1__h64151 or
	  rdat___1__h64225 or captWorker1_wsiS_extStatusW$wget)
  begin
    case (captWorker1_wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h64054 = captWorker1_controlReg;
      8'h04: v__h64054 = captWorker1_metaCount;
      8'h08: v__h64054 = captWorker1_dataCount;
      8'h0C: v__h64054 = rdat___1__h64151;
      8'h10: v__h64054 = rdat___1__h64225;
      8'h14: v__h64054 = captWorker1_wsiS_extStatusW$wget[95:64];
      8'h18: v__h64054 = captWorker1_wsiS_extStatusW$wget[63:32];
      8'h1C: v__h64054 = captWorker1_wsiS_extStatusW$wget[31:0];
      default: v__h64054 = 32'd0;
    endcase
  end
  always@(captWorker1_splaF$D_OUT or
	  captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas or
	  captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  captWorker1_metaBram_serverAdapterB_outData_enqData$whas or
	  captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas or
	  captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (captWorker1_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2613 =
	      captWorker1_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      captWorker1_metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2613 =
	      captWorker1_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      captWorker1_metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2613 =
	      captWorker1_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      captWorker1_metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_captWorker1_splaF_first__592_BITS_1_TO_0_59_ETC___d2613 =
	      captWorker1_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker1_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      captWorker1_metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(captWorker1_splaF$D_OUT or
	  captWorker1_metaBram_serverAdapterB_3_outData_outData$whas or
	  captWorker1_metaBram_serverAdapterB_outData_outData$whas or
	  captWorker1_metaBram_serverAdapterB_1_outData_outData$whas or
	  captWorker1_metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (captWorker1_splaF$D_OUT[1:0])
      2'd0:
	  CASE_captWorker1_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q12 =
	      captWorker1_metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_captWorker1_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q12 =
	      captWorker1_metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_captWorker1_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q12 =
	      captWorker1_metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_captWorker1_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q12 =
	      captWorker1_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker1_metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(captWorker2_wci_wslv_reqF$D_OUT or
	  captWorker2_controlReg or
	  captWorker2_metaCount or
	  captWorker2_dataCount or
	  rdat___1__h101053 or
	  rdat___1__h101127 or captWorker2_wsiS_extStatusW$wget)
  begin
    case (captWorker2_wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h100956 = captWorker2_controlReg;
      8'h04: v__h100956 = captWorker2_metaCount;
      8'h08: v__h100956 = captWorker2_dataCount;
      8'h0C: v__h100956 = rdat___1__h101053;
      8'h10: v__h100956 = rdat___1__h101127;
      8'h14: v__h100956 = captWorker2_wsiS_extStatusW$wget[95:64];
      8'h18: v__h100956 = captWorker2_wsiS_extStatusW$wget[63:32];
      8'h1C: v__h100956 = captWorker2_wsiS_extStatusW$wget[31:0];
      default: v__h100956 = 32'd0;
    endcase
  end
  always@(captWorker2_splaF$D_OUT or
	  captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas or
	  captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  captWorker2_metaBram_serverAdapterB_outData_enqData$whas or
	  captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas or
	  captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (captWorker2_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4311 =
	      captWorker2_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      captWorker2_metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4311 =
	      captWorker2_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      captWorker2_metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4311 =
	      captWorker2_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      captWorker2_metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_captWorker2_splaF_first__290_BITS_1_TO_0_29_ETC___d4311 =
	      captWorker2_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker2_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      captWorker2_metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(captWorker2_splaF$D_OUT or
	  captWorker2_metaBram_serverAdapterB_3_outData_outData$whas or
	  captWorker2_metaBram_serverAdapterB_outData_outData$whas or
	  captWorker2_metaBram_serverAdapterB_1_outData_outData$whas or
	  captWorker2_metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (captWorker2_splaF$D_OUT[1:0])
      2'd0:
	  CASE_captWorker2_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q13 =
	      captWorker2_metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_captWorker2_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q13 =
	      captWorker2_metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_captWorker2_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q13 =
	      captWorker2_metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_captWorker2_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q13 =
	      captWorker2_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker2_metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(wsimMonW3_observer_evF$D_OUT)
  begin
    case (wsimMonW3_observer_evF$D_OUT[98:96])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q14 =
	      wsimMonW3_observer_evF$D_OUT[98:96];
      default: CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q14 = 3'd5;
    endcase
  end
  always@(wsimMonW3_observer_evF$D_OUT)
  begin
    case (wsimMonW3_observer_evF$D_OUT[7:0])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160,
      8'd176,
      8'd192,
      8'd208:
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q15 =
	      wsimMonW3_observer_evF$D_OUT[7:0];
      default: CASE_wsimMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q15 =
		   8'd255;
    endcase
  end
  always@(wsimMonW3_observer_evF$D_OUT)
  begin
    case (wsimMonW3_observer_evF$D_OUT[39:32])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160,
      8'd176,
      8'd192,
      8'd208:
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q16 =
	      wsimMonW3_observer_evF$D_OUT[39:32];
      default: CASE_wsimMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q16 =
		   8'd255;
    endcase
  end
  always@(wsimMonW3_observer_evF$D_OUT)
  begin
    case (wsimMonW3_observer_evF$D_OUT[71:64])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160,
      8'd176,
      8'd192,
      8'd208:
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q17 =
	      wsimMonW3_observer_evF$D_OUT[71:64];
      default: CASE_wsimMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q17 =
		   8'd255;
    endcase
  end
  always@(wsimMonW3_observer_evF$D_OUT or
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q15 or
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q16 or
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q17)
  begin
    case (wsimMonW3_observer_evF$D_OUT[98:96])
      3'd0:
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q18 =
	      { 88'hAAAAAAAAAAAAAAAAAAAAAA,
		CASE_wsimMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q15 };
      3'd1:
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q18 =
	      { 56'hAAAAAAAAAAAAAA,
		CASE_wsimMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q16,
		wsimMonW3_observer_evF$D_OUT[31:0] };
      3'd2, 3'd3:
	  CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q18 =
	      { 24'hAAAAAA,
		CASE_wsimMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q17,
		wsimMonW3_observer_evF$D_OUT[63:0] };
      default: CASE_wsimMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q18 =
		   wsimMonW3_observer_evF$D_OUT[95:0];
    endcase
  end
  always@(wsisMonW3_observer_evF$D_OUT)
  begin
    case (wsisMonW3_observer_evF$D_OUT[98:96])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q19 =
	      wsisMonW3_observer_evF$D_OUT[98:96];
      default: CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q19 = 3'd5;
    endcase
  end
  always@(wsisMonW3_observer_evF$D_OUT)
  begin
    case (wsisMonW3_observer_evF$D_OUT[7:0])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160,
      8'd176,
      8'd192,
      8'd208:
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q20 =
	      wsisMonW3_observer_evF$D_OUT[7:0];
      default: CASE_wsisMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q20 =
		   8'd255;
    endcase
  end
  always@(wsisMonW3_observer_evF$D_OUT)
  begin
    case (wsisMonW3_observer_evF$D_OUT[39:32])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160,
      8'd176,
      8'd192,
      8'd208:
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q21 =
	      wsisMonW3_observer_evF$D_OUT[39:32];
      default: CASE_wsisMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q21 =
		   8'd255;
    endcase
  end
  always@(wsisMonW3_observer_evF$D_OUT)
  begin
    case (wsisMonW3_observer_evF$D_OUT[71:64])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160,
      8'd176,
      8'd192,
      8'd208:
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q22 =
	      wsisMonW3_observer_evF$D_OUT[71:64];
      default: CASE_wsisMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q22 =
		   8'd255;
    endcase
  end
  always@(wsisMonW3_observer_evF$D_OUT or
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q20 or
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q21 or
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q22)
  begin
    case (wsisMonW3_observer_evF$D_OUT[98:96])
      3'd0:
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q23 =
	      { 88'hAAAAAAAAAAAAAAAAAAAAAA,
		CASE_wsisMonW3_observer_evFD_OUT_BITS_7_TO_0__ETC__q20 };
      3'd1:
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q23 =
	      { 56'hAAAAAAAAAAAAAA,
		CASE_wsisMonW3_observer_evFD_OUT_BITS_39_TO_3_ETC__q21,
		wsisMonW3_observer_evF$D_OUT[31:0] };
      3'd2, 3'd3:
	  CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q23 =
	      { 24'hAAAAAA,
		CASE_wsisMonW3_observer_evFD_OUT_BITS_71_TO_6_ETC__q22,
		wsisMonW3_observer_evF$D_OUT[63:0] };
      default: CASE_wsisMonW3_observer_evFD_OUT_BITS_98_TO_9_ETC__q23 =
		   wsisMonW3_observer_evF$D_OUT[95:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        wsimMonW3_observer_mesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_observer_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	wsimMonW3_observer_r_mBurstLength <= `BSV_ASSIGNMENT_DELAY 12'd0;
	wsimMonW3_observer_r_mBurstPrecise <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY 4'd0;
	wsimMonW3_observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wsimMonW3_observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wsimMonW3_observer_r_mData <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsimMonW3_observer_r_mReqInfo <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wsimMonW3_observer_r_mReqLast <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_observer_r_mReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_observer_r_sReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_observer_r_sResetnD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_pmsender_idx <= `BSV_ASSIGNMENT_DELAY 3'd1;
	wsimMonW3_pmsender_isHead <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsimMonW3_pmsender_srcTag <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wsimMonW3_pmsender_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsimMonW3_pmsender_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_pmsender_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsimMonW3_pmsender_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_pmsender_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsimMonW3_pmsender_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsimMonW3_pmsender_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsimMonW3_pmsender_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	wsimMonW3_pmsender_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	wsimMonW3_pmsender_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsimMonW3_pmsender_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsimMonW3_pmsender_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_mesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	wsisMonW3_observer_r_mBurstLength <= `BSV_ASSIGNMENT_DELAY 12'd0;
	wsisMonW3_observer_r_mBurstPrecise <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY 4'd0;
	wsisMonW3_observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wsisMonW3_observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wsisMonW3_observer_r_mData <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsisMonW3_observer_r_mReqInfo <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wsisMonW3_observer_r_mReqLast <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_r_mReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_r_sReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_r_sResetnD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_pmsender_idx <= `BSV_ASSIGNMENT_DELAY 3'd1;
	wsisMonW3_pmsender_isHead <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsisMonW3_pmsender_srcTag <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wsisMonW3_pmsender_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsisMonW3_pmsender_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_pmsender_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsisMonW3_pmsender_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_pmsender_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsisMonW3_pmsender_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsisMonW3_pmsender_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsisMonW3_pmsender_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	wsisMonW3_pmsender_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	wsisMonW3_pmsender_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsisMonW3_pmsender_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsisMonW3_pmsender_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (wsimMonW3_observer_mesgInFlight$EN)
	  wsimMonW3_observer_mesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_mesgInFlight$D_IN;
	if (wsimMonW3_observer_mesgLengthSoFar$EN)
	  wsimMonW3_observer_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_mesgLengthSoFar$D_IN;
	if (wsimMonW3_observer_r_mBurstLength$EN)
	  wsimMonW3_observer_r_mBurstLength <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mBurstLength$D_IN;
	if (wsimMonW3_observer_r_mBurstPrecise$EN)
	  wsimMonW3_observer_r_mBurstPrecise <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mBurstPrecise$D_IN;
	if (wsimMonW3_observer_r_mByteEn$EN)
	  wsimMonW3_observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mByteEn$D_IN;
	if (wsimMonW3_observer_r_mCmd$EN)
	  wsimMonW3_observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mCmd$D_IN;
	if (wsimMonW3_observer_r_mCmdD$EN)
	  wsimMonW3_observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mCmdD$D_IN;
	if (wsimMonW3_observer_r_mData$EN)
	  wsimMonW3_observer_r_mData <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mData$D_IN;
	if (wsimMonW3_observer_r_mReqInfo$EN)
	  wsimMonW3_observer_r_mReqInfo <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mReqInfo$D_IN;
	if (wsimMonW3_observer_r_mReqLast$EN)
	  wsimMonW3_observer_r_mReqLast <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mReqLast$D_IN;
	if (wsimMonW3_observer_r_mReset_n$EN)
	  wsimMonW3_observer_r_mReset_n <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mReset_n$D_IN;
	if (wsimMonW3_observer_r_mResetnD$EN)
	  wsimMonW3_observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_mResetnD$D_IN;
	if (wsimMonW3_observer_r_sReset_n$EN)
	  wsimMonW3_observer_r_sReset_n <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_sReset_n$D_IN;
	if (wsimMonW3_observer_r_sResetnD$EN)
	  wsimMonW3_observer_r_sResetnD <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_sResetnD$D_IN;
	if (wsimMonW3_observer_r_sThreadBusy$EN)
	  wsimMonW3_observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_observer_r_sThreadBusy$D_IN;
	if (wsimMonW3_pmsender_idx$EN)
	  wsimMonW3_pmsender_idx <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_idx$D_IN;
	if (wsimMonW3_pmsender_isHead$EN)
	  wsimMonW3_pmsender_isHead <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_isHead$D_IN;
	if (wsimMonW3_pmsender_srcTag$EN)
	  wsimMonW3_pmsender_srcTag <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_srcTag$D_IN;
	if (wsimMonW3_pmsender_wsiM_burstKind$EN)
	  wsimMonW3_pmsender_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_burstKind$D_IN;
	if (wsimMonW3_pmsender_wsiM_errorSticky$EN)
	  wsimMonW3_pmsender_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_errorSticky$D_IN;
	if (wsimMonW3_pmsender_wsiM_iMesgCount$EN)
	  wsimMonW3_pmsender_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_iMesgCount$D_IN;
	if (wsimMonW3_pmsender_wsiM_operateD$EN)
	  wsimMonW3_pmsender_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_operateD$D_IN;
	if (wsimMonW3_pmsender_wsiM_pMesgCount$EN)
	  wsimMonW3_pmsender_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_pMesgCount$D_IN;
	if (wsimMonW3_pmsender_wsiM_peerIsReady$EN)
	  wsimMonW3_pmsender_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_peerIsReady$D_IN;
	if (wsimMonW3_pmsender_wsiM_reqFifo_c_r$EN)
	  wsimMonW3_pmsender_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_reqFifo_c_r$D_IN;
	if (wsimMonW3_pmsender_wsiM_reqFifo_q_0$EN)
	  wsimMonW3_pmsender_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_reqFifo_q_0$D_IN;
	if (wsimMonW3_pmsender_wsiM_reqFifo_q_1$EN)
	  wsimMonW3_pmsender_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_reqFifo_q_1$D_IN;
	if (wsimMonW3_pmsender_wsiM_sThreadBusy_d$EN)
	  wsimMonW3_pmsender_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_sThreadBusy_d$D_IN;
	if (wsimMonW3_pmsender_wsiM_tBusyCount$EN)
	  wsimMonW3_pmsender_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_tBusyCount$D_IN;
	if (wsimMonW3_pmsender_wsiM_trafficSticky$EN)
	  wsimMonW3_pmsender_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wsimMonW3_pmsender_wsiM_trafficSticky$D_IN;
	if (wsisMonW3_observer_mesgInFlight$EN)
	  wsisMonW3_observer_mesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_mesgInFlight$D_IN;
	if (wsisMonW3_observer_mesgLengthSoFar$EN)
	  wsisMonW3_observer_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_mesgLengthSoFar$D_IN;
	if (wsisMonW3_observer_r_mBurstLength$EN)
	  wsisMonW3_observer_r_mBurstLength <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mBurstLength$D_IN;
	if (wsisMonW3_observer_r_mBurstPrecise$EN)
	  wsisMonW3_observer_r_mBurstPrecise <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mBurstPrecise$D_IN;
	if (wsisMonW3_observer_r_mByteEn$EN)
	  wsisMonW3_observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mByteEn$D_IN;
	if (wsisMonW3_observer_r_mCmd$EN)
	  wsisMonW3_observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mCmd$D_IN;
	if (wsisMonW3_observer_r_mCmdD$EN)
	  wsisMonW3_observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mCmdD$D_IN;
	if (wsisMonW3_observer_r_mData$EN)
	  wsisMonW3_observer_r_mData <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mData$D_IN;
	if (wsisMonW3_observer_r_mReqInfo$EN)
	  wsisMonW3_observer_r_mReqInfo <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mReqInfo$D_IN;
	if (wsisMonW3_observer_r_mReqLast$EN)
	  wsisMonW3_observer_r_mReqLast <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mReqLast$D_IN;
	if (wsisMonW3_observer_r_mReset_n$EN)
	  wsisMonW3_observer_r_mReset_n <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mReset_n$D_IN;
	if (wsisMonW3_observer_r_mResetnD$EN)
	  wsisMonW3_observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_mResetnD$D_IN;
	if (wsisMonW3_observer_r_sReset_n$EN)
	  wsisMonW3_observer_r_sReset_n <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_sReset_n$D_IN;
	if (wsisMonW3_observer_r_sResetnD$EN)
	  wsisMonW3_observer_r_sResetnD <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_sResetnD$D_IN;
	if (wsisMonW3_observer_r_sThreadBusy$EN)
	  wsisMonW3_observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_observer_r_sThreadBusy$D_IN;
	if (wsisMonW3_pmsender_idx$EN)
	  wsisMonW3_pmsender_idx <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_idx$D_IN;
	if (wsisMonW3_pmsender_isHead$EN)
	  wsisMonW3_pmsender_isHead <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_isHead$D_IN;
	if (wsisMonW3_pmsender_srcTag$EN)
	  wsisMonW3_pmsender_srcTag <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_srcTag$D_IN;
	if (wsisMonW3_pmsender_wsiM_burstKind$EN)
	  wsisMonW3_pmsender_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_burstKind$D_IN;
	if (wsisMonW3_pmsender_wsiM_errorSticky$EN)
	  wsisMonW3_pmsender_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_errorSticky$D_IN;
	if (wsisMonW3_pmsender_wsiM_iMesgCount$EN)
	  wsisMonW3_pmsender_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_iMesgCount$D_IN;
	if (wsisMonW3_pmsender_wsiM_operateD$EN)
	  wsisMonW3_pmsender_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_operateD$D_IN;
	if (wsisMonW3_pmsender_wsiM_pMesgCount$EN)
	  wsisMonW3_pmsender_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_pMesgCount$D_IN;
	if (wsisMonW3_pmsender_wsiM_peerIsReady$EN)
	  wsisMonW3_pmsender_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_peerIsReady$D_IN;
	if (wsisMonW3_pmsender_wsiM_reqFifo_c_r$EN)
	  wsisMonW3_pmsender_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_reqFifo_c_r$D_IN;
	if (wsisMonW3_pmsender_wsiM_reqFifo_q_0$EN)
	  wsisMonW3_pmsender_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_reqFifo_q_0$D_IN;
	if (wsisMonW3_pmsender_wsiM_reqFifo_q_1$EN)
	  wsisMonW3_pmsender_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_reqFifo_q_1$D_IN;
	if (wsisMonW3_pmsender_wsiM_sThreadBusy_d$EN)
	  wsisMonW3_pmsender_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_sThreadBusy_d$D_IN;
	if (wsisMonW3_pmsender_wsiM_tBusyCount$EN)
	  wsisMonW3_pmsender_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_tBusyCount$D_IN;
	if (wsisMonW3_pmsender_wsiM_trafficSticky$EN)
	  wsisMonW3_pmsender_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wsisMonW3_pmsender_wsiM_trafficSticky$D_IN;
      end
    if (!RST_N_rst_5)
      begin
        captWorker0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	captWorker0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	captWorker0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	captWorker0_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	captWorker0_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (captWorker0_dataBram_serverAdapterA_cnt$EN)
	  captWorker0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterA_cnt$D_IN;
	if (captWorker0_dataBram_serverAdapterA_s1$EN)
	  captWorker0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterA_s1$D_IN;
	if (captWorker0_dataBram_serverAdapterB_cnt$EN)
	  captWorker0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterB_cnt$D_IN;
	if (captWorker0_dataBram_serverAdapterB_s1$EN)
	  captWorker0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterB_s1$D_IN;
	if (captWorker0_isFirst$EN)
	  captWorker0_isFirst <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_isFirst$D_IN;
	if (captWorker0_mesgLengthSoFar$EN)
	  captWorker0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_mesgLengthSoFar$D_IN;
	if (captWorker0_metaBram_serverAdapterA_1_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_1_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_1_s1$EN)
	  captWorker0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_1_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterA_2_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_2_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_2_s1$EN)
	  captWorker0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_2_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterA_3_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_3_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_3_s1$EN)
	  captWorker0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_3_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterA_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_s1$EN)
	  captWorker0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_1_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_1_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_1_s1$EN)
	  captWorker0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_1_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_2_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_2_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_2_s1$EN)
	  captWorker0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_2_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_3_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_3_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_3_s1$EN)
	  captWorker0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_3_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_s1$EN)
	  captWorker0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_s1$D_IN;
	if (captWorker0_splitReadInFlight$EN)
	  captWorker0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_splitReadInFlight$D_IN;
	if (captWorker0_wci_wslv_cEdge$EN)
	  captWorker0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_cEdge$D_IN;
	if (captWorker0_wci_wslv_cState$EN)
	  captWorker0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_cState$D_IN;
	if (captWorker0_wci_wslv_ctlAckReg$EN)
	  captWorker0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_ctlAckReg$D_IN;
	if (captWorker0_wci_wslv_ctlOpActive$EN)
	  captWorker0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_ctlOpActive$D_IN;
	if (captWorker0_wci_wslv_illegalEdge$EN)
	  captWorker0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_illegalEdge$D_IN;
	if (captWorker0_wci_wslv_nState$EN)
	  captWorker0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_nState$D_IN;
	if (captWorker0_wci_wslv_reqF_countReg$EN)
	  captWorker0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_reqF_countReg$D_IN;
	if (captWorker0_wci_wslv_respF_c_r$EN)
	  captWorker0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_respF_c_r$D_IN;
	if (captWorker0_wci_wslv_respF_q_0$EN)
	  captWorker0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_respF_q_0$D_IN;
	if (captWorker0_wci_wslv_respF_q_1$EN)
	  captWorker0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_respF_q_1$D_IN;
	if (captWorker0_wci_wslv_sFlagReg$EN)
	  captWorker0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_sFlagReg$D_IN;
	if (captWorker0_wci_wslv_sThreadBusy_d$EN)
	  captWorker0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_sThreadBusy_d$D_IN;
	if (captWorker0_wsiS_burstKind$EN)
	  captWorker0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_burstKind$D_IN;
	if (captWorker0_wsiS_errorSticky$EN)
	  captWorker0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_errorSticky$D_IN;
	if (captWorker0_wsiS_iMesgCount$EN)
	  captWorker0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_iMesgCount$D_IN;
	if (captWorker0_wsiS_operateD$EN)
	  captWorker0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_operateD$D_IN;
	if (captWorker0_wsiS_pMesgCount$EN)
	  captWorker0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_pMesgCount$D_IN;
	if (captWorker0_wsiS_peerIsReady$EN)
	  captWorker0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_peerIsReady$D_IN;
	if (captWorker0_wsiS_reqFifo_countReg$EN)
	  captWorker0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_reqFifo_countReg$D_IN;
	if (captWorker0_wsiS_reqFifo_levelsValid$EN)
	  captWorker0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_reqFifo_levelsValid$D_IN;
	if (captWorker0_wsiS_tBusyCount$EN)
	  captWorker0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_tBusyCount$D_IN;
	if (captWorker0_wsiS_trafficSticky$EN)
	  captWorker0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_trafficSticky$D_IN;
	if (captWorker0_wsiS_wordCount$EN)
	  captWorker0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_wordCount$D_IN;
	if (captWorker0_wtiS_nowReq$EN)
	  captWorker0_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wtiS_nowReq$D_IN;
	if (captWorker0_wtiS_operateD$EN)
	  captWorker0_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wtiS_operateD$D_IN;
      end
    if (!RST_N_rst_6)
      begin
        captWorker1_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker1_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker1_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker1_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	captWorker1_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker1_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker1_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker1_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker1_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker1_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker1_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker1_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker1_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker1_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker1_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker1_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker1_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker1_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker1_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	captWorker1_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker1_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker1_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker1_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker1_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker1_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker1_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker1_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker1_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker1_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker1_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker1_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	captWorker1_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	captWorker1_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (captWorker1_dataBram_serverAdapterA_cnt$EN)
	  captWorker1_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_dataBram_serverAdapterA_cnt$D_IN;
	if (captWorker1_dataBram_serverAdapterA_s1$EN)
	  captWorker1_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_dataBram_serverAdapterA_s1$D_IN;
	if (captWorker1_dataBram_serverAdapterB_cnt$EN)
	  captWorker1_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_dataBram_serverAdapterB_cnt$D_IN;
	if (captWorker1_dataBram_serverAdapterB_s1$EN)
	  captWorker1_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_dataBram_serverAdapterB_s1$D_IN;
	if (captWorker1_isFirst$EN)
	  captWorker1_isFirst <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_isFirst$D_IN;
	if (captWorker1_mesgLengthSoFar$EN)
	  captWorker1_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_mesgLengthSoFar$D_IN;
	if (captWorker1_metaBram_serverAdapterA_1_cnt$EN)
	  captWorker1_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_1_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterA_1_s1$EN)
	  captWorker1_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_1_s1$D_IN;
	if (captWorker1_metaBram_serverAdapterA_2_cnt$EN)
	  captWorker1_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_2_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterA_2_s1$EN)
	  captWorker1_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_2_s1$D_IN;
	if (captWorker1_metaBram_serverAdapterA_3_cnt$EN)
	  captWorker1_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_3_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterA_3_s1$EN)
	  captWorker1_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_3_s1$D_IN;
	if (captWorker1_metaBram_serverAdapterA_cnt$EN)
	  captWorker1_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterA_s1$EN)
	  captWorker1_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterA_s1$D_IN;
	if (captWorker1_metaBram_serverAdapterB_1_cnt$EN)
	  captWorker1_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_1_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterB_1_s1$EN)
	  captWorker1_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_1_s1$D_IN;
	if (captWorker1_metaBram_serverAdapterB_2_cnt$EN)
	  captWorker1_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_2_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterB_2_s1$EN)
	  captWorker1_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_2_s1$D_IN;
	if (captWorker1_metaBram_serverAdapterB_3_cnt$EN)
	  captWorker1_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_3_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterB_3_s1$EN)
	  captWorker1_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_3_s1$D_IN;
	if (captWorker1_metaBram_serverAdapterB_cnt$EN)
	  captWorker1_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_cnt$D_IN;
	if (captWorker1_metaBram_serverAdapterB_s1$EN)
	  captWorker1_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_metaBram_serverAdapterB_s1$D_IN;
	if (captWorker1_splitReadInFlight$EN)
	  captWorker1_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_splitReadInFlight$D_IN;
	if (captWorker1_wci_wslv_cEdge$EN)
	  captWorker1_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_cEdge$D_IN;
	if (captWorker1_wci_wslv_cState$EN)
	  captWorker1_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_cState$D_IN;
	if (captWorker1_wci_wslv_ctlAckReg$EN)
	  captWorker1_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_ctlAckReg$D_IN;
	if (captWorker1_wci_wslv_ctlOpActive$EN)
	  captWorker1_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_ctlOpActive$D_IN;
	if (captWorker1_wci_wslv_illegalEdge$EN)
	  captWorker1_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_illegalEdge$D_IN;
	if (captWorker1_wci_wslv_nState$EN)
	  captWorker1_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_nState$D_IN;
	if (captWorker1_wci_wslv_reqF_countReg$EN)
	  captWorker1_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_reqF_countReg$D_IN;
	if (captWorker1_wci_wslv_respF_c_r$EN)
	  captWorker1_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_respF_c_r$D_IN;
	if (captWorker1_wci_wslv_respF_q_0$EN)
	  captWorker1_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_respF_q_0$D_IN;
	if (captWorker1_wci_wslv_respF_q_1$EN)
	  captWorker1_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_respF_q_1$D_IN;
	if (captWorker1_wci_wslv_sFlagReg$EN)
	  captWorker1_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_sFlagReg$D_IN;
	if (captWorker1_wci_wslv_sThreadBusy_d$EN)
	  captWorker1_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wci_wslv_sThreadBusy_d$D_IN;
	if (captWorker1_wsiS_burstKind$EN)
	  captWorker1_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_burstKind$D_IN;
	if (captWorker1_wsiS_errorSticky$EN)
	  captWorker1_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_errorSticky$D_IN;
	if (captWorker1_wsiS_iMesgCount$EN)
	  captWorker1_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_iMesgCount$D_IN;
	if (captWorker1_wsiS_operateD$EN)
	  captWorker1_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_operateD$D_IN;
	if (captWorker1_wsiS_pMesgCount$EN)
	  captWorker1_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_pMesgCount$D_IN;
	if (captWorker1_wsiS_peerIsReady$EN)
	  captWorker1_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_peerIsReady$D_IN;
	if (captWorker1_wsiS_reqFifo_countReg$EN)
	  captWorker1_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_reqFifo_countReg$D_IN;
	if (captWorker1_wsiS_reqFifo_levelsValid$EN)
	  captWorker1_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_reqFifo_levelsValid$D_IN;
	if (captWorker1_wsiS_tBusyCount$EN)
	  captWorker1_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_tBusyCount$D_IN;
	if (captWorker1_wsiS_trafficSticky$EN)
	  captWorker1_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_trafficSticky$D_IN;
	if (captWorker1_wsiS_wordCount$EN)
	  captWorker1_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wsiS_wordCount$D_IN;
	if (captWorker1_wtiS_nowReq$EN)
	  captWorker1_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wtiS_nowReq$D_IN;
	if (captWorker1_wtiS_operateD$EN)
	  captWorker1_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      captWorker1_wtiS_operateD$D_IN;
      end
    if (!RST_N_rst_7)
      begin
        captWorker2_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker2_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker2_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	captWorker2_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker2_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker2_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker2_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker2_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker2_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker2_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker2_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker2_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker2_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker2_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker2_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker2_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker2_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker2_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	captWorker2_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker2_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker2_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker2_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker2_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	captWorker2_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	captWorker2_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (captWorker2_dataBram_serverAdapterA_cnt$EN)
	  captWorker2_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_dataBram_serverAdapterA_cnt$D_IN;
	if (captWorker2_dataBram_serverAdapterA_s1$EN)
	  captWorker2_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_dataBram_serverAdapterA_s1$D_IN;
	if (captWorker2_dataBram_serverAdapterB_cnt$EN)
	  captWorker2_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_dataBram_serverAdapterB_cnt$D_IN;
	if (captWorker2_dataBram_serverAdapterB_s1$EN)
	  captWorker2_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_dataBram_serverAdapterB_s1$D_IN;
	if (captWorker2_isFirst$EN)
	  captWorker2_isFirst <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_isFirst$D_IN;
	if (captWorker2_mesgLengthSoFar$EN)
	  captWorker2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_mesgLengthSoFar$D_IN;
	if (captWorker2_metaBram_serverAdapterA_1_cnt$EN)
	  captWorker2_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_1_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterA_1_s1$EN)
	  captWorker2_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_1_s1$D_IN;
	if (captWorker2_metaBram_serverAdapterA_2_cnt$EN)
	  captWorker2_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_2_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterA_2_s1$EN)
	  captWorker2_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_2_s1$D_IN;
	if (captWorker2_metaBram_serverAdapterA_3_cnt$EN)
	  captWorker2_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_3_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterA_3_s1$EN)
	  captWorker2_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_3_s1$D_IN;
	if (captWorker2_metaBram_serverAdapterA_cnt$EN)
	  captWorker2_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterA_s1$EN)
	  captWorker2_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterA_s1$D_IN;
	if (captWorker2_metaBram_serverAdapterB_1_cnt$EN)
	  captWorker2_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_1_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterB_1_s1$EN)
	  captWorker2_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_1_s1$D_IN;
	if (captWorker2_metaBram_serverAdapterB_2_cnt$EN)
	  captWorker2_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_2_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterB_2_s1$EN)
	  captWorker2_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_2_s1$D_IN;
	if (captWorker2_metaBram_serverAdapterB_3_cnt$EN)
	  captWorker2_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_3_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterB_3_s1$EN)
	  captWorker2_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_3_s1$D_IN;
	if (captWorker2_metaBram_serverAdapterB_cnt$EN)
	  captWorker2_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_cnt$D_IN;
	if (captWorker2_metaBram_serverAdapterB_s1$EN)
	  captWorker2_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_metaBram_serverAdapterB_s1$D_IN;
	if (captWorker2_splitReadInFlight$EN)
	  captWorker2_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_splitReadInFlight$D_IN;
	if (captWorker2_wci_wslv_cEdge$EN)
	  captWorker2_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_cEdge$D_IN;
	if (captWorker2_wci_wslv_cState$EN)
	  captWorker2_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_cState$D_IN;
	if (captWorker2_wci_wslv_ctlAckReg$EN)
	  captWorker2_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_ctlAckReg$D_IN;
	if (captWorker2_wci_wslv_ctlOpActive$EN)
	  captWorker2_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_ctlOpActive$D_IN;
	if (captWorker2_wci_wslv_illegalEdge$EN)
	  captWorker2_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_illegalEdge$D_IN;
	if (captWorker2_wci_wslv_nState$EN)
	  captWorker2_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_nState$D_IN;
	if (captWorker2_wci_wslv_reqF_countReg$EN)
	  captWorker2_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_reqF_countReg$D_IN;
	if (captWorker2_wci_wslv_respF_c_r$EN)
	  captWorker2_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_respF_c_r$D_IN;
	if (captWorker2_wci_wslv_respF_q_0$EN)
	  captWorker2_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_respF_q_0$D_IN;
	if (captWorker2_wci_wslv_respF_q_1$EN)
	  captWorker2_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_respF_q_1$D_IN;
	if (captWorker2_wci_wslv_sFlagReg$EN)
	  captWorker2_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_sFlagReg$D_IN;
	if (captWorker2_wci_wslv_sThreadBusy_d$EN)
	  captWorker2_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wci_wslv_sThreadBusy_d$D_IN;
	if (captWorker2_wsiS_burstKind$EN)
	  captWorker2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_burstKind$D_IN;
	if (captWorker2_wsiS_errorSticky$EN)
	  captWorker2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_errorSticky$D_IN;
	if (captWorker2_wsiS_iMesgCount$EN)
	  captWorker2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_iMesgCount$D_IN;
	if (captWorker2_wsiS_operateD$EN)
	  captWorker2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_operateD$D_IN;
	if (captWorker2_wsiS_pMesgCount$EN)
	  captWorker2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_pMesgCount$D_IN;
	if (captWorker2_wsiS_peerIsReady$EN)
	  captWorker2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_peerIsReady$D_IN;
	if (captWorker2_wsiS_reqFifo_countReg$EN)
	  captWorker2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_reqFifo_countReg$D_IN;
	if (captWorker2_wsiS_reqFifo_levelsValid$EN)
	  captWorker2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_reqFifo_levelsValid$D_IN;
	if (captWorker2_wsiS_tBusyCount$EN)
	  captWorker2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_tBusyCount$D_IN;
	if (captWorker2_wsiS_trafficSticky$EN)
	  captWorker2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_trafficSticky$D_IN;
	if (captWorker2_wsiS_wordCount$EN)
	  captWorker2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wsiS_wordCount$D_IN;
	if (captWorker2_wtiS_nowReq$EN)
	  captWorker2_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wtiS_nowReq$D_IN;
	if (captWorker2_wtiS_operateD$EN)
	  captWorker2_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      captWorker2_wtiS_operateD$D_IN;
      end
    if (captWorker0_controlReg$EN)
      captWorker0_controlReg <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_controlReg$D_IN;
    if (captWorker0_dataCount$EN)
      captWorker0_dataCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_dataCount$D_IN;
    if (captWorker0_metaCount$EN)
      captWorker0_metaCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_metaCount$D_IN;
    if (captWorker0_wsiS_mesgWordLength$EN)
      captWorker0_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_wsiS_mesgWordLength$D_IN;
    if (captWorker0_wsiS_statusR$EN)
      captWorker0_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_wsiS_statusR$D_IN;
    if (captWorker1_controlReg$EN)
      captWorker1_controlReg <= `BSV_ASSIGNMENT_DELAY
	  captWorker1_controlReg$D_IN;
    if (captWorker1_dataCount$EN)
      captWorker1_dataCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker1_dataCount$D_IN;
    if (captWorker1_metaCount$EN)
      captWorker1_metaCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker1_metaCount$D_IN;
    if (captWorker1_wsiS_mesgWordLength$EN)
      captWorker1_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  captWorker1_wsiS_mesgWordLength$D_IN;
    if (captWorker1_wsiS_statusR$EN)
      captWorker1_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  captWorker1_wsiS_statusR$D_IN;
    if (captWorker2_controlReg$EN)
      captWorker2_controlReg <= `BSV_ASSIGNMENT_DELAY
	  captWorker2_controlReg$D_IN;
    if (captWorker2_dataCount$EN)
      captWorker2_dataCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker2_dataCount$D_IN;
    if (captWorker2_metaCount$EN)
      captWorker2_metaCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker2_metaCount$D_IN;
    if (captWorker2_wsiS_mesgWordLength$EN)
      captWorker2_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  captWorker2_wsiS_mesgWordLength$D_IN;
    if (captWorker2_wsiS_statusR$EN)
      captWorker2_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  captWorker2_wsiS_statusR$D_IN;
    if (wsimMonW3_observer_e_sThreadBusy_srcD$EN)
      wsimMonW3_observer_e_sThreadBusy_srcD <= `BSV_ASSIGNMENT_DELAY
	  wsimMonW3_observer_e_sThreadBusy_srcD$D_IN;
    if (wsimMonW3_pmsender_wsiM_statusR$EN)
      wsimMonW3_pmsender_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  wsimMonW3_pmsender_wsiM_statusR$D_IN;
    if (wsisMonW3_observer_e_sThreadBusy_srcD$EN)
      wsisMonW3_observer_e_sThreadBusy_srcD <= `BSV_ASSIGNMENT_DELAY
	  wsisMonW3_observer_e_sThreadBusy_srcD$D_IN;
    if (wsisMonW3_pmsender_wsiM_statusR$EN)
      wsisMonW3_pmsender_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  wsisMonW3_pmsender_wsiM_statusR$D_IN;
  end

  always@(posedge CLK or negedge RST_N)
  if (!RST_N)
    begin
      wsimMonW3_pmsender_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsisMonW3_pmsender_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wsimMonW3_pmsender_wsiM_isReset_isInReset$EN)
	wsimMonW3_pmsender_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsimMonW3_pmsender_wsiM_isReset_isInReset$D_IN;
      if (wsisMonW3_pmsender_wsiM_isReset_isInReset$EN)
	wsisMonW3_pmsender_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsisMonW3_pmsender_wsiM_isReset_isInReset$D_IN;
    end

  always@(posedge CLK or negedge RST_N_rst_5)
  if (!RST_N_rst_5)
    begin
      captWorker0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      captWorker0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      captWorker0_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (captWorker0_wci_wslv_isReset_isInReset$EN)
	captWorker0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker0_wci_wslv_isReset_isInReset$D_IN;
      if (captWorker0_wsiS_isReset_isInReset$EN)
	captWorker0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker0_wsiS_isReset_isInReset$D_IN;
      if (captWorker0_wtiS_isReset_isInReset$EN)
	captWorker0_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker0_wtiS_isReset_isInReset$D_IN;
    end

  always@(posedge CLK or negedge RST_N_rst_6)
  if (!RST_N_rst_6)
    begin
      captWorker1_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      captWorker1_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      captWorker1_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (captWorker1_wci_wslv_isReset_isInReset$EN)
	captWorker1_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker1_wci_wslv_isReset_isInReset$D_IN;
      if (captWorker1_wsiS_isReset_isInReset$EN)
	captWorker1_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker1_wsiS_isReset_isInReset$D_IN;
      if (captWorker1_wtiS_isReset_isInReset$EN)
	captWorker1_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker1_wtiS_isReset_isInReset$D_IN;
    end

  always@(posedge CLK or negedge RST_N_rst_7)
  if (!RST_N_rst_7)
    begin
      captWorker2_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      captWorker2_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      captWorker2_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (captWorker2_wci_wslv_isReset_isInReset$EN)
	captWorker2_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker2_wci_wslv_isReset_isInReset$D_IN;
      if (captWorker2_wsiS_isReset_isInReset$EN)
	captWorker2_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker2_wsiS_isReset_isInReset$D_IN;
      if (captWorker2_wtiS_isReset_isInReset$EN)
	captWorker2_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker2_wtiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    captWorker0_controlReg = 32'hAAAAAAAA;
    captWorker0_dataBram_serverAdapterA_cnt = 3'h2;
    captWorker0_dataBram_serverAdapterA_s1 = 2'h2;
    captWorker0_dataBram_serverAdapterB_cnt = 3'h2;
    captWorker0_dataBram_serverAdapterB_s1 = 2'h2;
    captWorker0_dataCount = 32'hAAAAAAAA;
    captWorker0_isFirst = 1'h0;
    captWorker0_mesgLengthSoFar = 14'h2AAA;
    captWorker0_metaBram_serverAdapterA_1_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_1_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterA_2_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_2_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterA_3_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_3_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterA_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_1_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_1_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_2_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_2_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_3_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_3_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_s1 = 2'h2;
    captWorker0_metaCount = 32'hAAAAAAAA;
    captWorker0_splitReadInFlight = 1'h0;
    captWorker0_wci_wslv_cEdge = 3'h2;
    captWorker0_wci_wslv_cState = 3'h2;
    captWorker0_wci_wslv_ctlAckReg = 1'h0;
    captWorker0_wci_wslv_ctlOpActive = 1'h0;
    captWorker0_wci_wslv_illegalEdge = 1'h0;
    captWorker0_wci_wslv_isReset_isInReset = 1'h0;
    captWorker0_wci_wslv_nState = 3'h2;
    captWorker0_wci_wslv_reqF_countReg = 2'h2;
    captWorker0_wci_wslv_respF_c_r = 2'h2;
    captWorker0_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    captWorker0_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    captWorker0_wci_wslv_sFlagReg = 1'h0;
    captWorker0_wci_wslv_sThreadBusy_d = 1'h0;
    captWorker0_wsiS_burstKind = 2'h2;
    captWorker0_wsiS_errorSticky = 1'h0;
    captWorker0_wsiS_iMesgCount = 32'hAAAAAAAA;
    captWorker0_wsiS_isReset_isInReset = 1'h0;
    captWorker0_wsiS_mesgWordLength = 12'hAAA;
    captWorker0_wsiS_operateD = 1'h0;
    captWorker0_wsiS_pMesgCount = 32'hAAAAAAAA;
    captWorker0_wsiS_peerIsReady = 1'h0;
    captWorker0_wsiS_reqFifo_countReg = 2'h2;
    captWorker0_wsiS_reqFifo_levelsValid = 1'h0;
    captWorker0_wsiS_statusR = 8'hAA;
    captWorker0_wsiS_tBusyCount = 32'hAAAAAAAA;
    captWorker0_wsiS_trafficSticky = 1'h0;
    captWorker0_wsiS_wordCount = 12'hAAA;
    captWorker0_wtiS_isReset_isInReset = 1'h0;
    captWorker0_wtiS_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    captWorker0_wtiS_operateD = 1'h0;
    captWorker1_controlReg = 32'hAAAAAAAA;
    captWorker1_dataBram_serverAdapterA_cnt = 3'h2;
    captWorker1_dataBram_serverAdapterA_s1 = 2'h2;
    captWorker1_dataBram_serverAdapterB_cnt = 3'h2;
    captWorker1_dataBram_serverAdapterB_s1 = 2'h2;
    captWorker1_dataCount = 32'hAAAAAAAA;
    captWorker1_isFirst = 1'h0;
    captWorker1_mesgLengthSoFar = 14'h2AAA;
    captWorker1_metaBram_serverAdapterA_1_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterA_1_s1 = 2'h2;
    captWorker1_metaBram_serverAdapterA_2_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterA_2_s1 = 2'h2;
    captWorker1_metaBram_serverAdapterA_3_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterA_3_s1 = 2'h2;
    captWorker1_metaBram_serverAdapterA_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterA_s1 = 2'h2;
    captWorker1_metaBram_serverAdapterB_1_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterB_1_s1 = 2'h2;
    captWorker1_metaBram_serverAdapterB_2_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterB_2_s1 = 2'h2;
    captWorker1_metaBram_serverAdapterB_3_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterB_3_s1 = 2'h2;
    captWorker1_metaBram_serverAdapterB_cnt = 3'h2;
    captWorker1_metaBram_serverAdapterB_s1 = 2'h2;
    captWorker1_metaCount = 32'hAAAAAAAA;
    captWorker1_splitReadInFlight = 1'h0;
    captWorker1_wci_wslv_cEdge = 3'h2;
    captWorker1_wci_wslv_cState = 3'h2;
    captWorker1_wci_wslv_ctlAckReg = 1'h0;
    captWorker1_wci_wslv_ctlOpActive = 1'h0;
    captWorker1_wci_wslv_illegalEdge = 1'h0;
    captWorker1_wci_wslv_isReset_isInReset = 1'h0;
    captWorker1_wci_wslv_nState = 3'h2;
    captWorker1_wci_wslv_reqF_countReg = 2'h2;
    captWorker1_wci_wslv_respF_c_r = 2'h2;
    captWorker1_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    captWorker1_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    captWorker1_wci_wslv_sFlagReg = 1'h0;
    captWorker1_wci_wslv_sThreadBusy_d = 1'h0;
    captWorker1_wsiS_burstKind = 2'h2;
    captWorker1_wsiS_errorSticky = 1'h0;
    captWorker1_wsiS_iMesgCount = 32'hAAAAAAAA;
    captWorker1_wsiS_isReset_isInReset = 1'h0;
    captWorker1_wsiS_mesgWordLength = 12'hAAA;
    captWorker1_wsiS_operateD = 1'h0;
    captWorker1_wsiS_pMesgCount = 32'hAAAAAAAA;
    captWorker1_wsiS_peerIsReady = 1'h0;
    captWorker1_wsiS_reqFifo_countReg = 2'h2;
    captWorker1_wsiS_reqFifo_levelsValid = 1'h0;
    captWorker1_wsiS_statusR = 8'hAA;
    captWorker1_wsiS_tBusyCount = 32'hAAAAAAAA;
    captWorker1_wsiS_trafficSticky = 1'h0;
    captWorker1_wsiS_wordCount = 12'hAAA;
    captWorker1_wtiS_isReset_isInReset = 1'h0;
    captWorker1_wtiS_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    captWorker1_wtiS_operateD = 1'h0;
    captWorker2_controlReg = 32'hAAAAAAAA;
    captWorker2_dataBram_serverAdapterA_cnt = 3'h2;
    captWorker2_dataBram_serverAdapterA_s1 = 2'h2;
    captWorker2_dataBram_serverAdapterB_cnt = 3'h2;
    captWorker2_dataBram_serverAdapterB_s1 = 2'h2;
    captWorker2_dataCount = 32'hAAAAAAAA;
    captWorker2_isFirst = 1'h0;
    captWorker2_mesgLengthSoFar = 14'h2AAA;
    captWorker2_metaBram_serverAdapterA_1_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterA_1_s1 = 2'h2;
    captWorker2_metaBram_serverAdapterA_2_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterA_2_s1 = 2'h2;
    captWorker2_metaBram_serverAdapterA_3_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterA_3_s1 = 2'h2;
    captWorker2_metaBram_serverAdapterA_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterA_s1 = 2'h2;
    captWorker2_metaBram_serverAdapterB_1_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterB_1_s1 = 2'h2;
    captWorker2_metaBram_serverAdapterB_2_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterB_2_s1 = 2'h2;
    captWorker2_metaBram_serverAdapterB_3_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterB_3_s1 = 2'h2;
    captWorker2_metaBram_serverAdapterB_cnt = 3'h2;
    captWorker2_metaBram_serverAdapterB_s1 = 2'h2;
    captWorker2_metaCount = 32'hAAAAAAAA;
    captWorker2_splitReadInFlight = 1'h0;
    captWorker2_wci_wslv_cEdge = 3'h2;
    captWorker2_wci_wslv_cState = 3'h2;
    captWorker2_wci_wslv_ctlAckReg = 1'h0;
    captWorker2_wci_wslv_ctlOpActive = 1'h0;
    captWorker2_wci_wslv_illegalEdge = 1'h0;
    captWorker2_wci_wslv_isReset_isInReset = 1'h0;
    captWorker2_wci_wslv_nState = 3'h2;
    captWorker2_wci_wslv_reqF_countReg = 2'h2;
    captWorker2_wci_wslv_respF_c_r = 2'h2;
    captWorker2_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    captWorker2_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    captWorker2_wci_wslv_sFlagReg = 1'h0;
    captWorker2_wci_wslv_sThreadBusy_d = 1'h0;
    captWorker2_wsiS_burstKind = 2'h2;
    captWorker2_wsiS_errorSticky = 1'h0;
    captWorker2_wsiS_iMesgCount = 32'hAAAAAAAA;
    captWorker2_wsiS_isReset_isInReset = 1'h0;
    captWorker2_wsiS_mesgWordLength = 12'hAAA;
    captWorker2_wsiS_operateD = 1'h0;
    captWorker2_wsiS_pMesgCount = 32'hAAAAAAAA;
    captWorker2_wsiS_peerIsReady = 1'h0;
    captWorker2_wsiS_reqFifo_countReg = 2'h2;
    captWorker2_wsiS_reqFifo_levelsValid = 1'h0;
    captWorker2_wsiS_statusR = 8'hAA;
    captWorker2_wsiS_tBusyCount = 32'hAAAAAAAA;
    captWorker2_wsiS_trafficSticky = 1'h0;
    captWorker2_wsiS_wordCount = 12'hAAA;
    captWorker2_wtiS_isReset_isInReset = 1'h0;
    captWorker2_wtiS_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    captWorker2_wtiS_operateD = 1'h0;
    wsimMonW3_observer_e_sThreadBusy_srcD = 1'h0;
    wsimMonW3_observer_mesgInFlight = 1'h0;
    wsimMonW3_observer_mesgLengthSoFar = 14'h2AAA;
    wsimMonW3_observer_r_mBurstLength = 12'hAAA;
    wsimMonW3_observer_r_mBurstPrecise = 1'h0;
    wsimMonW3_observer_r_mByteEn = 4'hA;
    wsimMonW3_observer_r_mCmd = 3'h2;
    wsimMonW3_observer_r_mCmdD = 3'h2;
    wsimMonW3_observer_r_mData = 32'hAAAAAAAA;
    wsimMonW3_observer_r_mReqInfo = 8'hAA;
    wsimMonW3_observer_r_mReqLast = 1'h0;
    wsimMonW3_observer_r_mReset_n = 1'h0;
    wsimMonW3_observer_r_mResetnD = 1'h0;
    wsimMonW3_observer_r_sReset_n = 1'h0;
    wsimMonW3_observer_r_sResetnD = 1'h0;
    wsimMonW3_observer_r_sThreadBusy = 1'h0;
    wsimMonW3_pmsender_idx = 3'h2;
    wsimMonW3_pmsender_isHead = 1'h0;
    wsimMonW3_pmsender_srcTag = 8'hAA;
    wsimMonW3_pmsender_wsiM_burstKind = 2'h2;
    wsimMonW3_pmsender_wsiM_errorSticky = 1'h0;
    wsimMonW3_pmsender_wsiM_iMesgCount = 32'hAAAAAAAA;
    wsimMonW3_pmsender_wsiM_isReset_isInReset = 1'h0;
    wsimMonW3_pmsender_wsiM_operateD = 1'h0;
    wsimMonW3_pmsender_wsiM_pMesgCount = 32'hAAAAAAAA;
    wsimMonW3_pmsender_wsiM_peerIsReady = 1'h0;
    wsimMonW3_pmsender_wsiM_reqFifo_c_r = 2'h2;
    wsimMonW3_pmsender_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsimMonW3_pmsender_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsimMonW3_pmsender_wsiM_sThreadBusy_d = 1'h0;
    wsimMonW3_pmsender_wsiM_statusR = 8'hAA;
    wsimMonW3_pmsender_wsiM_tBusyCount = 32'hAAAAAAAA;
    wsimMonW3_pmsender_wsiM_trafficSticky = 1'h0;
    wsisMonW3_observer_e_sThreadBusy_srcD = 1'h0;
    wsisMonW3_observer_mesgInFlight = 1'h0;
    wsisMonW3_observer_mesgLengthSoFar = 14'h2AAA;
    wsisMonW3_observer_r_mBurstLength = 12'hAAA;
    wsisMonW3_observer_r_mBurstPrecise = 1'h0;
    wsisMonW3_observer_r_mByteEn = 4'hA;
    wsisMonW3_observer_r_mCmd = 3'h2;
    wsisMonW3_observer_r_mCmdD = 3'h2;
    wsisMonW3_observer_r_mData = 32'hAAAAAAAA;
    wsisMonW3_observer_r_mReqInfo = 8'hAA;
    wsisMonW3_observer_r_mReqLast = 1'h0;
    wsisMonW3_observer_r_mReset_n = 1'h0;
    wsisMonW3_observer_r_mResetnD = 1'h0;
    wsisMonW3_observer_r_sReset_n = 1'h0;
    wsisMonW3_observer_r_sResetnD = 1'h0;
    wsisMonW3_observer_r_sThreadBusy = 1'h0;
    wsisMonW3_pmsender_idx = 3'h2;
    wsisMonW3_pmsender_isHead = 1'h0;
    wsisMonW3_pmsender_srcTag = 8'hAA;
    wsisMonW3_pmsender_wsiM_burstKind = 2'h2;
    wsisMonW3_pmsender_wsiM_errorSticky = 1'h0;
    wsisMonW3_pmsender_wsiM_iMesgCount = 32'hAAAAAAAA;
    wsisMonW3_pmsender_wsiM_isReset_isInReset = 1'h0;
    wsisMonW3_pmsender_wsiM_operateD = 1'h0;
    wsisMonW3_pmsender_wsiM_pMesgCount = 32'hAAAAAAAA;
    wsisMonW3_pmsender_wsiM_peerIsReady = 1'h0;
    wsisMonW3_pmsender_wsiM_reqFifo_c_r = 2'h2;
    wsisMonW3_pmsender_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsisMonW3_pmsender_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsisMonW3_pmsender_wsiM_sThreadBusy_d = 1'h0;
    wsisMonW3_pmsender_wsiM_statusR = 8'hAA;
    wsisMonW3_pmsender_wsiM_tBusyCount = 32'hAAAAAAAA;
    wsisMonW3_pmsender_wsiM_trafficSticky = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start)
	begin
	  v__h4111 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h4111,
		 captWorker0_wci_wslv_reqF$D_OUT[36:34],
		 captWorker0_wci_wslv_cState);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_ctrl_EiI] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_ctrl_EiI] and\n  [RL_captWorker0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_ctrl_IsO &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_ctrl_IsO] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h27170 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h27170,
		 captWorker0_wci_wslv_reqF$D_OUT[63:32],
		 captWorker0_wci_wslv_reqF$D_OUT[67:64],
		 v__h27151);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_doMessageAccept &&
	  captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878 &&
	  captWorker0_wsiS_reqFifo$D_OUT[57])
	begin
	  v__h25641 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_doMessageAccept &&
	  captWorker0_controlReg_30_BIT_0_31_AND_NOT_cap_ETC___d878 &&
	  captWorker0_wsiS_reqFifo$D_OUT[57])
	$display("[%0d]: %m: doMessageAccept DWM metaCount:%0x WSI opcode:%0x length:%0x",
		 v__h25641,
		 captWorker0_metaCount,
		 captWorker0_wsiS_reqFifo$D_OUT[7:0],
		 mlB__h23537);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr)
	begin
	  v__h26967 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h26967,
		 captWorker0_wci_wslv_reqF$D_OUT[63:32],
		 captWorker0_wci_wslv_reqF$D_OUT[67:64],
		 captWorker0_wci_wslv_reqF$D_OUT[31:0]);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  captWorker0_wci_wslv_illegalEdge)
	begin
	  v__h4429 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  captWorker0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h4429,
		 captWorker0_wci_wslv_cEdge,
		 captWorker0_wci_wslv_cState);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  !captWorker0_wci_wslv_illegalEdge)
	begin
	  v__h4285 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  !captWorker0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h4285,
		 captWorker0_wci_wslv_cEdge,
		 captWorker0_wci_wslv_cState,
		 captWorker0_wci_wslv_nState);
    if (RST_N_rst_5)
      if (captWorker0_dataBram_serverAdapterA_s1[1] &&
	  !captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_dataBram_serverAdapterB_s1[1] &&
	  !captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_1_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_1_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_2_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_2_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_3_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_3_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response)
	begin
	  v__h26684 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h26684, v__h25765);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker0_advance_split_response] and [RL_captWorker0_wci_ctrl_OrE] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker0_advance_split_response] and [RL_captWorker0_wci_ctrl_IsO] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker0_advance_split_response] and [RL_captWorker0_wci_ctrl_EiI] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_cfrd)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_cfrd] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start)
	begin
	  v__h41017 = $time;
	  #0;
	end
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h41017,
		 captWorker1_wci_wslv_reqF$D_OUT[36:34],
		 captWorker1_wci_wslv_cState);
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_ctrl_EiI] and\n  [RL_captWorker1_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_ctrl_EiI] and\n  [RL_captWorker1_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_ctrl_IsO &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_ctrl_IsO] and\n  [RL_captWorker1_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfrd &&
	  captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h64073 = $time;
	  #0;
	end
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfrd &&
	  captWorker1_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h64073,
		 captWorker1_wci_wslv_reqF$D_OUT[63:32],
		 captWorker1_wci_wslv_reqF$D_OUT[67:64],
		 v__h64054);
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_doMessageAccept &&
	  captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573 &&
	  captWorker1_wsiS_reqFifo$D_OUT[57])
	begin
	  v__h62544 = $time;
	  #0;
	end
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_doMessageAccept &&
	  captWorker1_controlReg_525_BIT_0_526_AND_NOT_c_ETC___d2573 &&
	  captWorker1_wsiS_reqFifo$D_OUT[57])
	$display("[%0d]: %m: doMessageAccept DWM metaCount:%0x WSI opcode:%0x length:%0x",
		 v__h62544,
		 captWorker1_metaCount,
		 captWorker1_wsiS_reqFifo$D_OUT[7:0],
		 mlB__h60440);
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfwr)
	begin
	  v__h63870 = $time;
	  #0;
	end
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h63870,
		 captWorker1_wci_wslv_reqF$D_OUT[63:32],
		 captWorker1_wci_wslv_reqF$D_OUT[67:64],
		 captWorker1_wci_wslv_reqF$D_OUT[31:0]);
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete &&
	  captWorker1_wci_wslv_illegalEdge)
	begin
	  v__h41335 = $time;
	  #0;
	end
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete &&
	  captWorker1_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h41335,
		 captWorker1_wci_wslv_cEdge,
		 captWorker1_wci_wslv_cState);
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete &&
	  !captWorker1_wci_wslv_illegalEdge)
	begin
	  v__h41191 = $time;
	  #0;
	end
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_wslv_ctl_op_complete &&
	  !captWorker1_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h41191,
		 captWorker1_wci_wslv_cEdge,
		 captWorker1_wci_wslv_cState,
		 captWorker1_wci_wslv_nState);
    if (RST_N_rst_6)
      if (captWorker1_dataBram_serverAdapterA_s1[1] &&
	  !captWorker1_dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_dataBram_serverAdapterB_s1[1] &&
	  !captWorker1_dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterA_s1[1] &&
	  !captWorker1_metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterB_s1[1] &&
	  !captWorker1_metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterA_1_s1[1] &&
	  !captWorker1_metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterB_1_s1[1] &&
	  !captWorker1_metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterA_2_s1[1] &&
	  !captWorker1_metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterB_2_s1[1] &&
	  !captWorker1_metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterA_3_s1[1] &&
	  !captWorker1_metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (captWorker1_metaBram_serverAdapterB_3_s1[1] &&
	  !captWorker1_metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_advance_split_response)
	begin
	  v__h63587 = $time;
	  #0;
	end
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_advance_split_response)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h63587, v__h62668);
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_advance_split_response &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker1_advance_split_response] and [RL_captWorker1_wci_ctrl_OrE] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_advance_split_response &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker1_advance_split_response] and [RL_captWorker1_wci_ctrl_IsO] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_advance_split_response &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker1_advance_split_response] and [RL_captWorker1_wci_ctrl_EiI] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfwr &&
	  WILL_FIRE_RL_captWorker1_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfwr] and\n  [RL_captWorker1_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfwr &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfwr] and\n  [RL_captWorker1_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfwr &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfwr] and\n  [RL_captWorker1_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfwr &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfwr] and\n  [RL_captWorker1_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfwr &&
	  WILL_FIRE_RL_captWorker1_wci_cfrd)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfwr] and\n  [RL_captWorker1_wci_cfrd] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfrd &&
	  WILL_FIRE_RL_captWorker1_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfrd] and\n  [RL_captWorker1_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfrd &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfrd] and\n  [RL_captWorker1_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfrd &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfrd] and\n  [RL_captWorker1_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_6)
      if (WILL_FIRE_RL_captWorker1_wci_cfrd &&
	  WILL_FIRE_RL_captWorker1_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker1_wci_cfrd] and\n  [RL_captWorker1_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start)
	begin
	  v__h77919 = $time;
	  #0;
	end
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h77919,
		 captWorker2_wci_wslv_reqF$D_OUT[36:34],
		 captWorker2_wci_wslv_cState);
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_ctrl_EiI] and\n  [RL_captWorker2_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_ctrl_EiI] and\n  [RL_captWorker2_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_ctrl_IsO &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_ctrl_IsO] and\n  [RL_captWorker2_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfrd &&
	  captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h100975 = $time;
	  #0;
	end
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfrd &&
	  captWorker2_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h100975,
		 captWorker2_wci_wslv_reqF$D_OUT[63:32],
		 captWorker2_wci_wslv_reqF$D_OUT[67:64],
		 v__h100956);
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_doMessageAccept &&
	  captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271 &&
	  captWorker2_wsiS_reqFifo$D_OUT[57])
	begin
	  v__h99446 = $time;
	  #0;
	end
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_doMessageAccept &&
	  captWorker2_controlReg_223_BIT_0_224_AND_NOT_c_ETC___d4271 &&
	  captWorker2_wsiS_reqFifo$D_OUT[57])
	$display("[%0d]: %m: doMessageAccept DWM metaCount:%0x WSI opcode:%0x length:%0x",
		 v__h99446,
		 captWorker2_metaCount,
		 captWorker2_wsiS_reqFifo$D_OUT[7:0],
		 mlB__h97342);
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfwr)
	begin
	  v__h100772 = $time;
	  #0;
	end
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h100772,
		 captWorker2_wci_wslv_reqF$D_OUT[63:32],
		 captWorker2_wci_wslv_reqF$D_OUT[67:64],
		 captWorker2_wci_wslv_reqF$D_OUT[31:0]);
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete &&
	  captWorker2_wci_wslv_illegalEdge)
	begin
	  v__h78237 = $time;
	  #0;
	end
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete &&
	  captWorker2_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h78237,
		 captWorker2_wci_wslv_cEdge,
		 captWorker2_wci_wslv_cState);
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete &&
	  !captWorker2_wci_wslv_illegalEdge)
	begin
	  v__h78093 = $time;
	  #0;
	end
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_wslv_ctl_op_complete &&
	  !captWorker2_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h78093,
		 captWorker2_wci_wslv_cEdge,
		 captWorker2_wci_wslv_cState,
		 captWorker2_wci_wslv_nState);
    if (RST_N_rst_7)
      if (captWorker2_dataBram_serverAdapterA_s1[1] &&
	  !captWorker2_dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_dataBram_serverAdapterB_s1[1] &&
	  !captWorker2_dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterA_s1[1] &&
	  !captWorker2_metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterB_s1[1] &&
	  !captWorker2_metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterA_1_s1[1] &&
	  !captWorker2_metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterB_1_s1[1] &&
	  !captWorker2_metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterA_2_s1[1] &&
	  !captWorker2_metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterB_2_s1[1] &&
	  !captWorker2_metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterA_3_s1[1] &&
	  !captWorker2_metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (captWorker2_metaBram_serverAdapterB_3_s1[1] &&
	  !captWorker2_metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_advance_split_response)
	begin
	  v__h100489 = $time;
	  #0;
	end
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_advance_split_response)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h100489, v__h99570);
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_advance_split_response &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker2_advance_split_response] and [RL_captWorker2_wci_ctrl_OrE] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_advance_split_response &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker2_advance_split_response] and [RL_captWorker2_wci_ctrl_IsO] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_advance_split_response &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker2_advance_split_response] and [RL_captWorker2_wci_ctrl_EiI] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfwr &&
	  WILL_FIRE_RL_captWorker2_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfwr] and\n  [RL_captWorker2_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfwr &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfwr] and\n  [RL_captWorker2_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfwr &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfwr] and\n  [RL_captWorker2_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfwr &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfwr] and\n  [RL_captWorker2_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfwr &&
	  WILL_FIRE_RL_captWorker2_wci_cfrd)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfwr] and\n  [RL_captWorker2_wci_cfrd] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfrd &&
	  WILL_FIRE_RL_captWorker2_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfrd] and\n  [RL_captWorker2_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfrd &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfrd] and\n  [RL_captWorker2_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfrd &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfrd] and\n  [RL_captWorker2_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_7)
      if (WILL_FIRE_RL_captWorker2_wci_cfrd &&
	  WILL_FIRE_RL_captWorker2_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker2_wci_cfrd] and\n  [RL_captWorker2_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkOCApp4B

