//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Tue Jan 10 09:44:15 EST 2012
//
//
// Ports:
// Name                         I/O  size props
// wci_s_0_SResp                  O     2 const
// wci_s_0_SData                  O    32 const
// wci_s_0_SThreadBusy            O     1 const
// wci_s_0_SFlag                  O     2 const
// wci_s_1_SResp                  O     2 const
// wci_s_1_SData                  O    32 const
// wci_s_1_SThreadBusy            O     1 const
// wci_s_1_SFlag                  O     2 const
// wci_s_2_SResp                  O     2 reg
// wci_s_2_SData                  O    32 reg
// wci_s_2_SThreadBusy            O     1
// wci_s_2_SFlag                  O     2
// wci_s_3_SResp                  O     2 reg
// wci_s_3_SData                  O    32 reg
// wci_s_3_SThreadBusy            O     1
// wci_s_3_SFlag                  O     2
// wci_s_4_SResp                  O     2 reg
// wci_s_4_SData                  O    32 reg
// wci_s_4_SThreadBusy            O     1
// wci_s_4_SFlag                  O     2
// wci_s_5_SResp                  O     2 reg
// wci_s_5_SData                  O    32 reg
// wci_s_5_SThreadBusy            O     1
// wci_s_5_SFlag                  O     2
// wci_s_6_SResp                  O     2 const
// wci_s_6_SData                  O    32 const
// wci_s_6_SThreadBusy            O     1 const
// wci_s_6_SFlag                  O     2 const
// wci_s_7_SResp                  O     2 const
// wci_s_7_SData                  O    32 const
// wci_s_7_SThreadBusy            O     1 const
// wci_s_7_SFlag                  O     2 const
// wmiM0_MCmd                     O     3
// wmiM0_MReqLast                 O     1
// wmiM0_MReqInfo                 O     1
// wmiM0_MAddrSpace               O     1
// wmiM0_MAddr                    O    14
// wmiM0_MBurstLength             O    12
// wmiM0_MDataValid               O     1
// wmiM0_MDataLast                O     1
// wmiM0_MData                    O    32
// wmiM0_MDataByteEn              O     4
// wmiM0_MFlag                    O    32
// wmiM0_MReset_n                 O     1
// wmiM1_MCmd                     O     3
// wmiM1_MReqLast                 O     1
// wmiM1_MReqInfo                 O     1
// wmiM1_MAddrSpace               O     1
// wmiM1_MAddr                    O    14
// wmiM1_MBurstLength             O    12
// wmiM1_MDataValid               O     1
// wmiM1_MDataLast                O     1
// wmiM1_MData                    O    32
// wmiM1_MDataByteEn              O     4
// wmiM1_MFlag                    O    32
// wmiM1_MReset_n                 O     1
// wmemiM0_MCmd                   O     3 const
// wmemiM0_MReqLast               O     1 const
// wmemiM0_MAddr                  O    36 const
// wmemiM0_MBurstLength           O    12 const
// wmemiM0_MDataValid             O     1 const
// wmemiM0_MDataLast              O     1 const
// wmemiM0_MData                  O   128 const
// wmemiM0_MDataByteEn            O    16 const
// wmemiM0_MReset_n               O     1 const
// wsi_s_adc_SThreadBusy          O     1
// wsi_s_adc_SReset_n             O     1
// wsi_m_dac_MCmd                 O     3
// wsi_m_dac_MReqLast             O     1
// wsi_m_dac_MBurstPrecise        O     1
// wsi_m_dac_MBurstLength         O    12
// wsi_m_dac_MData                O    32 reg
// wsi_m_dac_MByteEn              O     4 reg
// wsi_m_dac_MReqInfo             O     8
// wsi_m_dac_MReset_n             O     1
// uuid                           O   512 const
// RST_N_rst_0                    I     1 unused
// RST_N_rst_1                    I     1 unused
// RST_N_rst_2                    I     1 reset
// RST_N_rst_3                    I     1 reset
// RST_N_rst_4                    I     1 reset
// RST_N_rst_5                    I     1 reset
// RST_N_rst_6                    I     1 unused
// RST_N_rst_7                    I     1 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wci_s_0_MCmd                   I     3 unused
// wci_s_0_MAddrSpace             I     1 unused
// wci_s_0_MByteEn                I     4 unused
// wci_s_0_MAddr                  I    32 unused
// wci_s_0_MData                  I    32 unused
// wci_s_0_MFlag                  I     2 unused
// wci_s_1_MCmd                   I     3 unused
// wci_s_1_MAddrSpace             I     1 unused
// wci_s_1_MByteEn                I     4 unused
// wci_s_1_MAddr                  I    32 unused
// wci_s_1_MData                  I    32 unused
// wci_s_1_MFlag                  I     2 unused
// wci_s_2_MCmd                   I     3
// wci_s_2_MAddrSpace             I     1
// wci_s_2_MByteEn                I     4
// wci_s_2_MAddr                  I    32
// wci_s_2_MData                  I    32
// wci_s_2_MFlag                  I     2 unused
// wci_s_3_MCmd                   I     3
// wci_s_3_MAddrSpace             I     1
// wci_s_3_MByteEn                I     4
// wci_s_3_MAddr                  I    32
// wci_s_3_MData                  I    32
// wci_s_3_MFlag                  I     2 unused
// wci_s_4_MCmd                   I     3
// wci_s_4_MAddrSpace             I     1
// wci_s_4_MByteEn                I     4
// wci_s_4_MAddr                  I    32
// wci_s_4_MData                  I    32
// wci_s_4_MFlag                  I     2 unused
// wci_s_5_MCmd                   I     3
// wci_s_5_MAddrSpace             I     1
// wci_s_5_MByteEn                I     4
// wci_s_5_MAddr                  I    32
// wci_s_5_MData                  I    32
// wci_s_5_MFlag                  I     2 unused
// wci_s_6_MCmd                   I     3 unused
// wci_s_6_MAddrSpace             I     1 unused
// wci_s_6_MByteEn                I     4 unused
// wci_s_6_MAddr                  I    32 unused
// wci_s_6_MData                  I    32 unused
// wci_s_6_MFlag                  I     2 unused
// wci_s_7_MCmd                   I     3 unused
// wci_s_7_MAddrSpace             I     1 unused
// wci_s_7_MByteEn                I     4 unused
// wci_s_7_MAddr                  I    32 unused
// wci_s_7_MData                  I    32 unused
// wci_s_7_MFlag                  I     2 unused
// wmiM0_SResp                    I     2
// wmiM0_SData                    I    32
// wmiM0_SFlag                    I    32 reg
// wmiM1_SResp                    I     2
// wmiM1_SData                    I    32
// wmiM1_SFlag                    I    32 reg
// wmemiM0_SResp                  I     2 unused
// wmemiM0_SData                  I   128 unused
// wsi_s_adc_MCmd                 I     3
// wsi_s_adc_MBurstLength         I    12
// wsi_s_adc_MData                I    32
// wsi_s_adc_MByteEn              I     4
// wsi_s_adc_MReqInfo             I     8
// wmiM0_SThreadBusy              I     1 reg
// wmiM0_SDataThreadBusy          I     1 reg
// wmiM0_SRespLast                I     1 unused
// wmiM0_SReset_n                 I     1 reg
// wmiM1_SThreadBusy              I     1 reg
// wmiM1_SDataThreadBusy          I     1 reg
// wmiM1_SRespLast                I     1 unused
// wmiM1_SReset_n                 I     1 reg
// wmemiM0_SRespLast              I     1 unused
// wmemiM0_SCmdAccept             I     1 unused
// wmemiM0_SDataAccept            I     1 unused
// wsi_s_adc_MReqLast             I     1
// wsi_s_adc_MBurstPrecise        I     1
// wsi_s_adc_MReset_n             I     1 reg
// wsi_m_dac_SThreadBusy          I     1 reg
// wsi_m_dac_SReset_n             I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCApp4B(RST_N_rst_0,
		 RST_N_rst_1,
		 RST_N_rst_2,
		 RST_N_rst_3,
		 RST_N_rst_4,
		 RST_N_rst_5,
		 RST_N_rst_6,
		 RST_N_rst_7,
		 CLK,
		 RST_N,

		 wci_s_0_MCmd,

		 wci_s_0_MAddrSpace,

		 wci_s_0_MByteEn,

		 wci_s_0_MAddr,

		 wci_s_0_MData,

		 wci_s_0_SResp,

		 wci_s_0_SData,

		 wci_s_0_SThreadBusy,

		 wci_s_0_SFlag,

		 wci_s_0_MFlag,

		 wci_s_1_MCmd,

		 wci_s_1_MAddrSpace,

		 wci_s_1_MByteEn,

		 wci_s_1_MAddr,

		 wci_s_1_MData,

		 wci_s_1_SResp,

		 wci_s_1_SData,

		 wci_s_1_SThreadBusy,

		 wci_s_1_SFlag,

		 wci_s_1_MFlag,

		 wci_s_2_MCmd,

		 wci_s_2_MAddrSpace,

		 wci_s_2_MByteEn,

		 wci_s_2_MAddr,

		 wci_s_2_MData,

		 wci_s_2_SResp,

		 wci_s_2_SData,

		 wci_s_2_SThreadBusy,

		 wci_s_2_SFlag,

		 wci_s_2_MFlag,

		 wci_s_3_MCmd,

		 wci_s_3_MAddrSpace,

		 wci_s_3_MByteEn,

		 wci_s_3_MAddr,

		 wci_s_3_MData,

		 wci_s_3_SResp,

		 wci_s_3_SData,

		 wci_s_3_SThreadBusy,

		 wci_s_3_SFlag,

		 wci_s_3_MFlag,

		 wci_s_4_MCmd,

		 wci_s_4_MAddrSpace,

		 wci_s_4_MByteEn,

		 wci_s_4_MAddr,

		 wci_s_4_MData,

		 wci_s_4_SResp,

		 wci_s_4_SData,

		 wci_s_4_SThreadBusy,

		 wci_s_4_SFlag,

		 wci_s_4_MFlag,

		 wci_s_5_MCmd,

		 wci_s_5_MAddrSpace,

		 wci_s_5_MByteEn,

		 wci_s_5_MAddr,

		 wci_s_5_MData,

		 wci_s_5_SResp,

		 wci_s_5_SData,

		 wci_s_5_SThreadBusy,

		 wci_s_5_SFlag,

		 wci_s_5_MFlag,

		 wci_s_6_MCmd,

		 wci_s_6_MAddrSpace,

		 wci_s_6_MByteEn,

		 wci_s_6_MAddr,

		 wci_s_6_MData,

		 wci_s_6_SResp,

		 wci_s_6_SData,

		 wci_s_6_SThreadBusy,

		 wci_s_6_SFlag,

		 wci_s_6_MFlag,

		 wci_s_7_MCmd,

		 wci_s_7_MAddrSpace,

		 wci_s_7_MByteEn,

		 wci_s_7_MAddr,

		 wci_s_7_MData,

		 wci_s_7_SResp,

		 wci_s_7_SData,

		 wci_s_7_SThreadBusy,

		 wci_s_7_SFlag,

		 wci_s_7_MFlag,

		 wmiM0_MCmd,

		 wmiM0_MReqLast,

		 wmiM0_MReqInfo,

		 wmiM0_MAddrSpace,

		 wmiM0_MAddr,

		 wmiM0_MBurstLength,

		 wmiM0_MDataValid,

		 wmiM0_MDataLast,

		 wmiM0_MData,

		 wmiM0_MDataByteEn,

		 wmiM0_SResp,

		 wmiM0_SData,

		 wmiM0_SThreadBusy,

		 wmiM0_SDataThreadBusy,

		 wmiM0_SRespLast,

		 wmiM0_SFlag,

		 wmiM0_MFlag,

		 wmiM0_MReset_n,

		 wmiM0_SReset_n,

		 wmiM1_MCmd,

		 wmiM1_MReqLast,

		 wmiM1_MReqInfo,

		 wmiM1_MAddrSpace,

		 wmiM1_MAddr,

		 wmiM1_MBurstLength,

		 wmiM1_MDataValid,

		 wmiM1_MDataLast,

		 wmiM1_MData,

		 wmiM1_MDataByteEn,

		 wmiM1_SResp,

		 wmiM1_SData,

		 wmiM1_SThreadBusy,

		 wmiM1_SDataThreadBusy,

		 wmiM1_SRespLast,

		 wmiM1_SFlag,

		 wmiM1_MFlag,

		 wmiM1_MReset_n,

		 wmiM1_SReset_n,

		 wmemiM0_MCmd,

		 wmemiM0_MReqLast,

		 wmemiM0_MAddr,

		 wmemiM0_MBurstLength,

		 wmemiM0_MDataValid,

		 wmemiM0_MDataLast,

		 wmemiM0_MData,

		 wmemiM0_MDataByteEn,

		 wmemiM0_SResp,

		 wmemiM0_SRespLast,

		 wmemiM0_SData,

		 wmemiM0_SCmdAccept,

		 wmemiM0_SDataAccept,

		 wmemiM0_MReset_n,

		 wsi_s_adc_MCmd,

		 wsi_s_adc_MReqLast,

		 wsi_s_adc_MBurstPrecise,

		 wsi_s_adc_MBurstLength,

		 wsi_s_adc_MData,

		 wsi_s_adc_MByteEn,

		 wsi_s_adc_MReqInfo,

		 wsi_s_adc_SThreadBusy,

		 wsi_s_adc_SReset_n,

		 wsi_s_adc_MReset_n,

		 wsi_m_dac_MCmd,

		 wsi_m_dac_MReqLast,

		 wsi_m_dac_MBurstPrecise,

		 wsi_m_dac_MBurstLength,

		 wsi_m_dac_MData,

		 wsi_m_dac_MByteEn,

		 wsi_m_dac_MReqInfo,

		 wsi_m_dac_SThreadBusy,

		 wsi_m_dac_MReset_n,

		 wsi_m_dac_SReset_n,

		 uuid);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  RST_N_rst_0;
  input  RST_N_rst_1;
  input  RST_N_rst_2;
  input  RST_N_rst_3;
  input  RST_N_rst_4;
  input  RST_N_rst_5;
  input  RST_N_rst_6;
  input  RST_N_rst_7;
  input  CLK;
  input  RST_N;

  // action method wci_s_0_mCmd
  input  [2 : 0] wci_s_0_MCmd;

  // action method wci_s_0_mAddrSpace
  input  wci_s_0_MAddrSpace;

  // action method wci_s_0_mByteEn
  input  [3 : 0] wci_s_0_MByteEn;

  // action method wci_s_0_mAddr
  input  [31 : 0] wci_s_0_MAddr;

  // action method wci_s_0_mData
  input  [31 : 0] wci_s_0_MData;

  // value method wci_s_0_sResp
  output [1 : 0] wci_s_0_SResp;

  // value method wci_s_0_sData
  output [31 : 0] wci_s_0_SData;

  // value method wci_s_0_sThreadBusy
  output wci_s_0_SThreadBusy;

  // value method wci_s_0_sFlag
  output [1 : 0] wci_s_0_SFlag;

  // action method wci_s_0_mFlag
  input  [1 : 0] wci_s_0_MFlag;

  // action method wci_s_1_mCmd
  input  [2 : 0] wci_s_1_MCmd;

  // action method wci_s_1_mAddrSpace
  input  wci_s_1_MAddrSpace;

  // action method wci_s_1_mByteEn
  input  [3 : 0] wci_s_1_MByteEn;

  // action method wci_s_1_mAddr
  input  [31 : 0] wci_s_1_MAddr;

  // action method wci_s_1_mData
  input  [31 : 0] wci_s_1_MData;

  // value method wci_s_1_sResp
  output [1 : 0] wci_s_1_SResp;

  // value method wci_s_1_sData
  output [31 : 0] wci_s_1_SData;

  // value method wci_s_1_sThreadBusy
  output wci_s_1_SThreadBusy;

  // value method wci_s_1_sFlag
  output [1 : 0] wci_s_1_SFlag;

  // action method wci_s_1_mFlag
  input  [1 : 0] wci_s_1_MFlag;

  // action method wci_s_2_mCmd
  input  [2 : 0] wci_s_2_MCmd;

  // action method wci_s_2_mAddrSpace
  input  wci_s_2_MAddrSpace;

  // action method wci_s_2_mByteEn
  input  [3 : 0] wci_s_2_MByteEn;

  // action method wci_s_2_mAddr
  input  [31 : 0] wci_s_2_MAddr;

  // action method wci_s_2_mData
  input  [31 : 0] wci_s_2_MData;

  // value method wci_s_2_sResp
  output [1 : 0] wci_s_2_SResp;

  // value method wci_s_2_sData
  output [31 : 0] wci_s_2_SData;

  // value method wci_s_2_sThreadBusy
  output wci_s_2_SThreadBusy;

  // value method wci_s_2_sFlag
  output [1 : 0] wci_s_2_SFlag;

  // action method wci_s_2_mFlag
  input  [1 : 0] wci_s_2_MFlag;

  // action method wci_s_3_mCmd
  input  [2 : 0] wci_s_3_MCmd;

  // action method wci_s_3_mAddrSpace
  input  wci_s_3_MAddrSpace;

  // action method wci_s_3_mByteEn
  input  [3 : 0] wci_s_3_MByteEn;

  // action method wci_s_3_mAddr
  input  [31 : 0] wci_s_3_MAddr;

  // action method wci_s_3_mData
  input  [31 : 0] wci_s_3_MData;

  // value method wci_s_3_sResp
  output [1 : 0] wci_s_3_SResp;

  // value method wci_s_3_sData
  output [31 : 0] wci_s_3_SData;

  // value method wci_s_3_sThreadBusy
  output wci_s_3_SThreadBusy;

  // value method wci_s_3_sFlag
  output [1 : 0] wci_s_3_SFlag;

  // action method wci_s_3_mFlag
  input  [1 : 0] wci_s_3_MFlag;

  // action method wci_s_4_mCmd
  input  [2 : 0] wci_s_4_MCmd;

  // action method wci_s_4_mAddrSpace
  input  wci_s_4_MAddrSpace;

  // action method wci_s_4_mByteEn
  input  [3 : 0] wci_s_4_MByteEn;

  // action method wci_s_4_mAddr
  input  [31 : 0] wci_s_4_MAddr;

  // action method wci_s_4_mData
  input  [31 : 0] wci_s_4_MData;

  // value method wci_s_4_sResp
  output [1 : 0] wci_s_4_SResp;

  // value method wci_s_4_sData
  output [31 : 0] wci_s_4_SData;

  // value method wci_s_4_sThreadBusy
  output wci_s_4_SThreadBusy;

  // value method wci_s_4_sFlag
  output [1 : 0] wci_s_4_SFlag;

  // action method wci_s_4_mFlag
  input  [1 : 0] wci_s_4_MFlag;

  // action method wci_s_5_mCmd
  input  [2 : 0] wci_s_5_MCmd;

  // action method wci_s_5_mAddrSpace
  input  wci_s_5_MAddrSpace;

  // action method wci_s_5_mByteEn
  input  [3 : 0] wci_s_5_MByteEn;

  // action method wci_s_5_mAddr
  input  [31 : 0] wci_s_5_MAddr;

  // action method wci_s_5_mData
  input  [31 : 0] wci_s_5_MData;

  // value method wci_s_5_sResp
  output [1 : 0] wci_s_5_SResp;

  // value method wci_s_5_sData
  output [31 : 0] wci_s_5_SData;

  // value method wci_s_5_sThreadBusy
  output wci_s_5_SThreadBusy;

  // value method wci_s_5_sFlag
  output [1 : 0] wci_s_5_SFlag;

  // action method wci_s_5_mFlag
  input  [1 : 0] wci_s_5_MFlag;

  // action method wci_s_6_mCmd
  input  [2 : 0] wci_s_6_MCmd;

  // action method wci_s_6_mAddrSpace
  input  wci_s_6_MAddrSpace;

  // action method wci_s_6_mByteEn
  input  [3 : 0] wci_s_6_MByteEn;

  // action method wci_s_6_mAddr
  input  [31 : 0] wci_s_6_MAddr;

  // action method wci_s_6_mData
  input  [31 : 0] wci_s_6_MData;

  // value method wci_s_6_sResp
  output [1 : 0] wci_s_6_SResp;

  // value method wci_s_6_sData
  output [31 : 0] wci_s_6_SData;

  // value method wci_s_6_sThreadBusy
  output wci_s_6_SThreadBusy;

  // value method wci_s_6_sFlag
  output [1 : 0] wci_s_6_SFlag;

  // action method wci_s_6_mFlag
  input  [1 : 0] wci_s_6_MFlag;

  // action method wci_s_7_mCmd
  input  [2 : 0] wci_s_7_MCmd;

  // action method wci_s_7_mAddrSpace
  input  wci_s_7_MAddrSpace;

  // action method wci_s_7_mByteEn
  input  [3 : 0] wci_s_7_MByteEn;

  // action method wci_s_7_mAddr
  input  [31 : 0] wci_s_7_MAddr;

  // action method wci_s_7_mData
  input  [31 : 0] wci_s_7_MData;

  // value method wci_s_7_sResp
  output [1 : 0] wci_s_7_SResp;

  // value method wci_s_7_sData
  output [31 : 0] wci_s_7_SData;

  // value method wci_s_7_sThreadBusy
  output wci_s_7_SThreadBusy;

  // value method wci_s_7_sFlag
  output [1 : 0] wci_s_7_SFlag;

  // action method wci_s_7_mFlag
  input  [1 : 0] wci_s_7_MFlag;

  // value method wmiM0_mCmd
  output [2 : 0] wmiM0_MCmd;

  // value method wmiM0_mReqLast
  output wmiM0_MReqLast;

  // value method wmiM0_mReqInfo
  output wmiM0_MReqInfo;

  // value method wmiM0_mAddrSpace
  output wmiM0_MAddrSpace;

  // value method wmiM0_mAddr
  output [13 : 0] wmiM0_MAddr;

  // value method wmiM0_mBurstLength
  output [11 : 0] wmiM0_MBurstLength;

  // value method wmiM0_mDataValid
  output wmiM0_MDataValid;

  // value method wmiM0_mDataLast
  output wmiM0_MDataLast;

  // value method wmiM0_mData
  output [31 : 0] wmiM0_MData;

  // value method wmiM0_mDataInfo

  // value method wmiM0_mDataByteEn
  output [3 : 0] wmiM0_MDataByteEn;

  // action method wmiM0_sResp
  input  [1 : 0] wmiM0_SResp;

  // action method wmiM0_sData
  input  [31 : 0] wmiM0_SData;

  // action method wmiM0_sThreadBusy
  input  wmiM0_SThreadBusy;

  // action method wmiM0_sDataThreadBusy
  input  wmiM0_SDataThreadBusy;

  // action method wmiM0_sRespLast
  input  wmiM0_SRespLast;

  // action method wmiM0_sFlag
  input  [31 : 0] wmiM0_SFlag;

  // value method wmiM0_mFlag
  output [31 : 0] wmiM0_MFlag;

  // value method wmiM0_mReset_n
  output wmiM0_MReset_n;

  // action method wmiM0_sReset_n
  input  wmiM0_SReset_n;

  // value method wmiM1_mCmd
  output [2 : 0] wmiM1_MCmd;

  // value method wmiM1_mReqLast
  output wmiM1_MReqLast;

  // value method wmiM1_mReqInfo
  output wmiM1_MReqInfo;

  // value method wmiM1_mAddrSpace
  output wmiM1_MAddrSpace;

  // value method wmiM1_mAddr
  output [13 : 0] wmiM1_MAddr;

  // value method wmiM1_mBurstLength
  output [11 : 0] wmiM1_MBurstLength;

  // value method wmiM1_mDataValid
  output wmiM1_MDataValid;

  // value method wmiM1_mDataLast
  output wmiM1_MDataLast;

  // value method wmiM1_mData
  output [31 : 0] wmiM1_MData;

  // value method wmiM1_mDataInfo

  // value method wmiM1_mDataByteEn
  output [3 : 0] wmiM1_MDataByteEn;

  // action method wmiM1_sResp
  input  [1 : 0] wmiM1_SResp;

  // action method wmiM1_sData
  input  [31 : 0] wmiM1_SData;

  // action method wmiM1_sThreadBusy
  input  wmiM1_SThreadBusy;

  // action method wmiM1_sDataThreadBusy
  input  wmiM1_SDataThreadBusy;

  // action method wmiM1_sRespLast
  input  wmiM1_SRespLast;

  // action method wmiM1_sFlag
  input  [31 : 0] wmiM1_SFlag;

  // value method wmiM1_mFlag
  output [31 : 0] wmiM1_MFlag;

  // value method wmiM1_mReset_n
  output wmiM1_MReset_n;

  // action method wmiM1_sReset_n
  input  wmiM1_SReset_n;

  // value method wmemiM0_mCmd
  output [2 : 0] wmemiM0_MCmd;

  // value method wmemiM0_mReqLast
  output wmemiM0_MReqLast;

  // value method wmemiM0_mAddr
  output [35 : 0] wmemiM0_MAddr;

  // value method wmemiM0_mBurstLength
  output [11 : 0] wmemiM0_MBurstLength;

  // value method wmemiM0_mDataValid
  output wmemiM0_MDataValid;

  // value method wmemiM0_mDataLast
  output wmemiM0_MDataLast;

  // value method wmemiM0_mData
  output [127 : 0] wmemiM0_MData;

  // value method wmemiM0_mDataByteEn
  output [15 : 0] wmemiM0_MDataByteEn;

  // action method wmemiM0_sResp
  input  [1 : 0] wmemiM0_SResp;

  // action method wmemiM0_sRespLast
  input  wmemiM0_SRespLast;

  // action method wmemiM0_sData
  input  [127 : 0] wmemiM0_SData;

  // action method wmemiM0_sCmdAccept
  input  wmemiM0_SCmdAccept;

  // action method wmemiM0_sDataAccept
  input  wmemiM0_SDataAccept;

  // value method wmemiM0_mReset_n
  output wmemiM0_MReset_n;

  // action method wsi_s_adc_mCmd
  input  [2 : 0] wsi_s_adc_MCmd;

  // action method wsi_s_adc_mReqLast
  input  wsi_s_adc_MReqLast;

  // action method wsi_s_adc_mBurstPrecise
  input  wsi_s_adc_MBurstPrecise;

  // action method wsi_s_adc_mBurstLength
  input  [11 : 0] wsi_s_adc_MBurstLength;

  // action method wsi_s_adc_mData
  input  [31 : 0] wsi_s_adc_MData;

  // action method wsi_s_adc_mByteEn
  input  [3 : 0] wsi_s_adc_MByteEn;

  // action method wsi_s_adc_mReqInfo
  input  [7 : 0] wsi_s_adc_MReqInfo;

  // action method wsi_s_adc_mDataInfo

  // value method wsi_s_adc_sThreadBusy
  output wsi_s_adc_SThreadBusy;

  // value method wsi_s_adc_sReset_n
  output wsi_s_adc_SReset_n;

  // action method wsi_s_adc_mReset_n
  input  wsi_s_adc_MReset_n;

  // value method wsi_m_dac_mCmd
  output [2 : 0] wsi_m_dac_MCmd;

  // value method wsi_m_dac_mReqLast
  output wsi_m_dac_MReqLast;

  // value method wsi_m_dac_mBurstPrecise
  output wsi_m_dac_MBurstPrecise;

  // value method wsi_m_dac_mBurstLength
  output [11 : 0] wsi_m_dac_MBurstLength;

  // value method wsi_m_dac_mData
  output [31 : 0] wsi_m_dac_MData;

  // value method wsi_m_dac_mByteEn
  output [3 : 0] wsi_m_dac_MByteEn;

  // value method wsi_m_dac_mReqInfo
  output [7 : 0] wsi_m_dac_MReqInfo;

  // value method wsi_m_dac_mDataInfo

  // action method wsi_m_dac_sThreadBusy
  input  wsi_m_dac_SThreadBusy;

  // value method wsi_m_dac_mReset_n
  output wsi_m_dac_MReset_n;

  // action method wsi_m_dac_sReset_n
  input  wsi_m_dac_SReset_n;

  // value method uuid
  output [511 : 0] uuid;

  // signals for module outputs
  wire [511 : 0] uuid;
  wire [127 : 0] wmemiM0_MData;
  wire [35 : 0] wmemiM0_MAddr;
  wire [31 : 0] wci_s_0_SData,
		wci_s_1_SData,
		wci_s_2_SData,
		wci_s_3_SData,
		wci_s_4_SData,
		wci_s_5_SData,
		wci_s_6_SData,
		wci_s_7_SData,
		wmiM0_MData,
		wmiM0_MFlag,
		wmiM1_MData,
		wmiM1_MFlag,
		wsi_m_dac_MData;
  wire [15 : 0] wmemiM0_MDataByteEn;
  wire [13 : 0] wmiM0_MAddr, wmiM1_MAddr;
  wire [11 : 0] wmemiM0_MBurstLength,
		wmiM0_MBurstLength,
		wmiM1_MBurstLength,
		wsi_m_dac_MBurstLength;
  wire [7 : 0] wsi_m_dac_MReqInfo;
  wire [3 : 0] wmiM0_MDataByteEn, wmiM1_MDataByteEn, wsi_m_dac_MByteEn;
  wire [2 : 0] wmemiM0_MCmd, wmiM0_MCmd, wmiM1_MCmd, wsi_m_dac_MCmd;
  wire [1 : 0] wci_s_0_SFlag,
	       wci_s_0_SResp,
	       wci_s_1_SFlag,
	       wci_s_1_SResp,
	       wci_s_2_SFlag,
	       wci_s_2_SResp,
	       wci_s_3_SFlag,
	       wci_s_3_SResp,
	       wci_s_4_SFlag,
	       wci_s_4_SResp,
	       wci_s_5_SFlag,
	       wci_s_5_SResp,
	       wci_s_6_SFlag,
	       wci_s_6_SResp,
	       wci_s_7_SFlag,
	       wci_s_7_SResp;
  wire wci_s_0_SThreadBusy,
       wci_s_1_SThreadBusy,
       wci_s_2_SThreadBusy,
       wci_s_3_SThreadBusy,
       wci_s_4_SThreadBusy,
       wci_s_5_SThreadBusy,
       wci_s_6_SThreadBusy,
       wci_s_7_SThreadBusy,
       wmemiM0_MDataLast,
       wmemiM0_MDataValid,
       wmemiM0_MReqLast,
       wmemiM0_MReset_n,
       wmiM0_MAddrSpace,
       wmiM0_MDataLast,
       wmiM0_MDataValid,
       wmiM0_MReqInfo,
       wmiM0_MReqLast,
       wmiM0_MReset_n,
       wmiM1_MAddrSpace,
       wmiM1_MDataLast,
       wmiM1_MDataValid,
       wmiM1_MReqInfo,
       wmiM1_MReqLast,
       wmiM1_MReset_n,
       wsi_m_dac_MBurstPrecise,
       wsi_m_dac_MReqLast,
       wsi_m_dac_MReset_n,
       wsi_s_adc_SReset_n,
       wsi_s_adc_SThreadBusy;

  // inlined wires
  wire [95 : 0] captWorker0_wsiS_extStatusW$wget;
  wire [71 : 0] captWorker0_wci_wslv_wciReq$wget;
  wire [63 : 0] captWorker0_nowW$wget;
  wire [60 : 0] captWorker0_wsiS_wsiReq$wget;
  wire [33 : 0] captWorker0_wci_wslv_respF_x_wire$wget;
  wire [31 : 0] captWorker0_dataBram_serverAdapterA_outData_enqData$wget,
		captWorker0_dataBram_serverAdapterA_outData_outData$wget,
		captWorker0_dataBram_serverAdapterB_outData_enqData$wget,
		captWorker0_dataBram_serverAdapterB_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_1_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_1_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_2_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_2_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_3_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_3_outData_outData$wget,
		captWorker0_metaBram_serverAdapterA_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterA_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_1_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_1_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_2_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_2_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_3_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_3_outData_outData$wget,
		captWorker0_metaBram_serverAdapterB_outData_enqData$wget,
		captWorker0_metaBram_serverAdapterB_outData_outData$wget,
		captWorker0_wci_wci_Es_mAddr_w$wget,
		captWorker0_wci_wci_Es_mData_w$wget,
		captWorker0_wsi_Es_mData_w$wget,
		tieOff0_wci_Es_mAddr_w$wget,
		tieOff0_wci_Es_mData_w$wget,
		tieOff1_wci_Es_mAddr_w$wget,
		tieOff1_wci_Es_mData_w$wget,
		tieOff6_wci_Es_mAddr_w$wget,
		tieOff6_wci_Es_mData_w$wget,
		tieOff7_wci_Es_mAddr_w$wget,
		tieOff7_wci_Es_mData_w$wget;
  wire [11 : 0] captWorker0_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] captWorker0_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] captWorker0_wci_wci_Es_mByteEn_w$wget,
	       captWorker0_wsi_Es_mByteEn_w$wget,
	       tieOff0_wci_Es_mByteEn_w$wget,
	       tieOff1_wci_Es_mByteEn_w$wget,
	       tieOff6_wci_Es_mByteEn_w$wget,
	       tieOff7_wci_Es_mByteEn_w$wget;
  wire [2 : 0] captWorker0_dataBram_serverAdapterA_cnt_1$wget,
	       captWorker0_dataBram_serverAdapterA_cnt_2$wget,
	       captWorker0_dataBram_serverAdapterA_cnt_3$wget,
	       captWorker0_dataBram_serverAdapterB_cnt_1$wget,
	       captWorker0_dataBram_serverAdapterB_cnt_2$wget,
	       captWorker0_dataBram_serverAdapterB_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_1_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_1_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_1_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_2_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_2_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_2_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_3_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_3_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_3_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterA_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterA_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterA_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_1_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_1_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_1_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_2_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_2_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_2_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_3_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_3_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_3_cnt_3$wget,
	       captWorker0_metaBram_serverAdapterB_cnt_1$wget,
	       captWorker0_metaBram_serverAdapterB_cnt_2$wget,
	       captWorker0_metaBram_serverAdapterB_cnt_3$wget,
	       captWorker0_wci_wci_Es_mCmd_w$wget,
	       captWorker0_wci_wslv_wEdge$wget,
	       captWorker0_wsi_Es_mCmd_w$wget,
	       tieOff0_wci_Es_mCmd_w$wget,
	       tieOff1_wci_Es_mCmd_w$wget,
	       tieOff6_wci_Es_mCmd_w$wget,
	       tieOff7_wci_Es_mCmd_w$wget;
  wire [1 : 0] captWorker0_dataBram_serverAdapterA_s1_1$wget,
	       captWorker0_dataBram_serverAdapterA_writeWithResp$wget,
	       captWorker0_dataBram_serverAdapterB_s1_1$wget,
	       captWorker0_dataBram_serverAdapterB_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_1_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_1_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_2_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_2_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_3_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_3_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterA_s1_1$wget,
	       captWorker0_metaBram_serverAdapterA_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_1_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_1_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_2_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_2_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_3_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_3_writeWithResp$wget,
	       captWorker0_metaBram_serverAdapterB_s1_1$wget,
	       captWorker0_metaBram_serverAdapterB_writeWithResp$wget;
  wire captWorker0_dataBram_serverAdapterA_cnt_1$whas,
       captWorker0_dataBram_serverAdapterA_cnt_2$whas,
       captWorker0_dataBram_serverAdapterA_cnt_3$whas,
       captWorker0_dataBram_serverAdapterA_outData_deqCalled$whas,
       captWorker0_dataBram_serverAdapterA_outData_enqData$whas,
       captWorker0_dataBram_serverAdapterA_outData_outData$whas,
       captWorker0_dataBram_serverAdapterA_s1_1$whas,
       captWorker0_dataBram_serverAdapterA_writeWithResp$whas,
       captWorker0_dataBram_serverAdapterB_cnt_1$whas,
       captWorker0_dataBram_serverAdapterB_cnt_2$whas,
       captWorker0_dataBram_serverAdapterB_cnt_3$whas,
       captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas,
       captWorker0_dataBram_serverAdapterB_outData_enqData$whas,
       captWorker0_dataBram_serverAdapterB_outData_outData$whas,
       captWorker0_dataBram_serverAdapterB_s1_1$whas,
       captWorker0_dataBram_serverAdapterB_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_1_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_1_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_1_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_1_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_1_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_1_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_1_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_2_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_2_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_2_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_2_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_2_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_2_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_2_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_3_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_3_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_3_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_3_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_3_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_3_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_3_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterA_cnt_1$whas,
       captWorker0_metaBram_serverAdapterA_cnt_2$whas,
       captWorker0_metaBram_serverAdapterA_cnt_3$whas,
       captWorker0_metaBram_serverAdapterA_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterA_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterA_outData_outData$whas,
       captWorker0_metaBram_serverAdapterA_s1_1$whas,
       captWorker0_metaBram_serverAdapterA_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_1_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_1_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_1_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_1_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_1_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_1_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_2_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_2_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_2_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_2_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_2_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_2_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_3_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_3_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_3_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_3_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_3_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_3_writeWithResp$whas,
       captWorker0_metaBram_serverAdapterB_cnt_1$whas,
       captWorker0_metaBram_serverAdapterB_cnt_2$whas,
       captWorker0_metaBram_serverAdapterB_cnt_3$whas,
       captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas,
       captWorker0_metaBram_serverAdapterB_outData_enqData$whas,
       captWorker0_metaBram_serverAdapterB_outData_outData$whas,
       captWorker0_metaBram_serverAdapterB_s1_1$whas,
       captWorker0_metaBram_serverAdapterB_writeWithResp$whas,
       captWorker0_nowW$whas,
       captWorker0_wci_wci_Es_mAddrSpace_w$wget,
       captWorker0_wci_wci_Es_mAddrSpace_w$whas,
       captWorker0_wci_wci_Es_mAddr_w$whas,
       captWorker0_wci_wci_Es_mByteEn_w$whas,
       captWorker0_wci_wci_Es_mCmd_w$whas,
       captWorker0_wci_wci_Es_mData_w$whas,
       captWorker0_wci_wslv_ctlAckReg_1$wget,
       captWorker0_wci_wslv_ctlAckReg_1$whas,
       captWorker0_wci_wslv_reqF_r_clr$whas,
       captWorker0_wci_wslv_reqF_r_deq$whas,
       captWorker0_wci_wslv_reqF_r_enq$whas,
       captWorker0_wci_wslv_respF_dequeueing$whas,
       captWorker0_wci_wslv_respF_enqueueing$whas,
       captWorker0_wci_wslv_respF_x_wire$whas,
       captWorker0_wci_wslv_sFlagReg_1$wget,
       captWorker0_wci_wslv_sFlagReg_1$whas,
       captWorker0_wci_wslv_sThreadBusy_pw$whas,
       captWorker0_wci_wslv_wEdge$whas,
       captWorker0_wci_wslv_wciReq$whas,
       captWorker0_wci_wslv_wci_cfrd_pw$whas,
       captWorker0_wci_wslv_wci_cfwr_pw$whas,
       captWorker0_wci_wslv_wci_ctrl_pw$whas,
       captWorker0_wsiS_operateD_1$wget,
       captWorker0_wsiS_operateD_1$whas,
       captWorker0_wsiS_peerIsReady_1$wget,
       captWorker0_wsiS_peerIsReady_1$whas,
       captWorker0_wsiS_reqFifo_doResetClr$whas,
       captWorker0_wsiS_reqFifo_doResetDeq$whas,
       captWorker0_wsiS_reqFifo_doResetEnq$whas,
       captWorker0_wsiS_reqFifo_r_clr$whas,
       captWorker0_wsiS_reqFifo_r_deq$whas,
       captWorker0_wsiS_reqFifo_r_enq$whas,
       captWorker0_wsiS_sThreadBusy_dw$wget,
       captWorker0_wsiS_sThreadBusy_dw$whas,
       captWorker0_wsiS_wsiReq$whas,
       captWorker0_wsi_Es_mBurstLength_w$whas,
       captWorker0_wsi_Es_mBurstPrecise_w$whas,
       captWorker0_wsi_Es_mByteEn_w$whas,
       captWorker0_wsi_Es_mCmd_w$whas,
       captWorker0_wsi_Es_mDataInfo_w$whas,
       captWorker0_wsi_Es_mData_w$whas,
       captWorker0_wsi_Es_mReqInfo_w$whas,
       captWorker0_wsi_Es_mReqLast_w$whas,
       tieOff0_wci_Es_mAddrSpace_w$wget,
       tieOff0_wci_Es_mAddrSpace_w$whas,
       tieOff0_wci_Es_mAddr_w$whas,
       tieOff0_wci_Es_mByteEn_w$whas,
       tieOff0_wci_Es_mCmd_w$whas,
       tieOff0_wci_Es_mData_w$whas,
       tieOff1_wci_Es_mAddrSpace_w$wget,
       tieOff1_wci_Es_mAddrSpace_w$whas,
       tieOff1_wci_Es_mAddr_w$whas,
       tieOff1_wci_Es_mByteEn_w$whas,
       tieOff1_wci_Es_mCmd_w$whas,
       tieOff1_wci_Es_mData_w$whas,
       tieOff6_wci_Es_mAddrSpace_w$wget,
       tieOff6_wci_Es_mAddrSpace_w$whas,
       tieOff6_wci_Es_mAddr_w$whas,
       tieOff6_wci_Es_mByteEn_w$whas,
       tieOff6_wci_Es_mCmd_w$whas,
       tieOff6_wci_Es_mData_w$whas,
       tieOff7_wci_Es_mAddrSpace_w$wget,
       tieOff7_wci_Es_mAddrSpace_w$whas,
       tieOff7_wci_Es_mAddr_w$whas,
       tieOff7_wci_Es_mByteEn_w$whas,
       tieOff7_wci_Es_mCmd_w$whas,
       tieOff7_wci_Es_mData_w$whas;

  // register captWorker0_controlReg
  reg [31 : 0] captWorker0_controlReg;
  wire [31 : 0] captWorker0_controlReg$D_IN;
  wire captWorker0_controlReg$EN;

  // register captWorker0_dataBram_serverAdapterA_cnt
  reg [2 : 0] captWorker0_dataBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker0_dataBram_serverAdapterA_cnt$D_IN;
  wire captWorker0_dataBram_serverAdapterA_cnt$EN;

  // register captWorker0_dataBram_serverAdapterA_s1
  reg [1 : 0] captWorker0_dataBram_serverAdapterA_s1;
  wire [1 : 0] captWorker0_dataBram_serverAdapterA_s1$D_IN;
  wire captWorker0_dataBram_serverAdapterA_s1$EN;

  // register captWorker0_dataBram_serverAdapterB_cnt
  reg [2 : 0] captWorker0_dataBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker0_dataBram_serverAdapterB_cnt$D_IN;
  wire captWorker0_dataBram_serverAdapterB_cnt$EN;

  // register captWorker0_dataBram_serverAdapterB_s1
  reg [1 : 0] captWorker0_dataBram_serverAdapterB_s1;
  wire [1 : 0] captWorker0_dataBram_serverAdapterB_s1$D_IN;
  wire captWorker0_dataBram_serverAdapterB_s1$EN;

  // register captWorker0_dataCount
  reg [31 : 0] captWorker0_dataCount;
  reg [31 : 0] captWorker0_dataCount$D_IN;
  wire captWorker0_dataCount$EN;

  // register captWorker0_isFirst
  reg captWorker0_isFirst;
  wire captWorker0_isFirst$D_IN, captWorker0_isFirst$EN;

  // register captWorker0_mesgCount
  reg [31 : 0] captWorker0_mesgCount;
  reg [31 : 0] captWorker0_mesgCount$D_IN;
  wire captWorker0_mesgCount$EN;

  // register captWorker0_mesgLengthSoFar
  reg [13 : 0] captWorker0_mesgLengthSoFar;
  wire [13 : 0] captWorker0_mesgLengthSoFar$D_IN;
  wire captWorker0_mesgLengthSoFar$EN;

  // register captWorker0_metaBram_serverAdapterA_1_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_1_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_1_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_1_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_1_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_1_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_1_s1$EN;

  // register captWorker0_metaBram_serverAdapterA_2_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_2_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_2_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_2_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_2_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_2_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_2_s1$EN;

  // register captWorker0_metaBram_serverAdapterA_3_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_3_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_3_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_3_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_3_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_3_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_3_s1$EN;

  // register captWorker0_metaBram_serverAdapterA_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterA_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterA_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterA_cnt$EN;

  // register captWorker0_metaBram_serverAdapterA_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterA_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterA_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterA_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_1_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_1_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_1_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_1_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_1_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_1_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_1_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_2_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_2_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_2_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_2_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_2_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_2_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_2_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_3_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_3_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_3_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_3_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_3_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_3_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_3_s1$EN;

  // register captWorker0_metaBram_serverAdapterB_cnt
  reg [2 : 0] captWorker0_metaBram_serverAdapterB_cnt;
  wire [2 : 0] captWorker0_metaBram_serverAdapterB_cnt$D_IN;
  wire captWorker0_metaBram_serverAdapterB_cnt$EN;

  // register captWorker0_metaBram_serverAdapterB_s1
  reg [1 : 0] captWorker0_metaBram_serverAdapterB_s1;
  wire [1 : 0] captWorker0_metaBram_serverAdapterB_s1$D_IN;
  wire captWorker0_metaBram_serverAdapterB_s1$EN;

  // register captWorker0_splitReadInFlight
  reg captWorker0_splitReadInFlight;
  wire captWorker0_splitReadInFlight$D_IN, captWorker0_splitReadInFlight$EN;

  // register captWorker0_wci_wslv_cEdge
  reg [2 : 0] captWorker0_wci_wslv_cEdge;
  wire [2 : 0] captWorker0_wci_wslv_cEdge$D_IN;
  wire captWorker0_wci_wslv_cEdge$EN;

  // register captWorker0_wci_wslv_cState
  reg [2 : 0] captWorker0_wci_wslv_cState;
  wire [2 : 0] captWorker0_wci_wslv_cState$D_IN;
  wire captWorker0_wci_wslv_cState$EN;

  // register captWorker0_wci_wslv_ctlAckReg
  reg captWorker0_wci_wslv_ctlAckReg;
  wire captWorker0_wci_wslv_ctlAckReg$D_IN, captWorker0_wci_wslv_ctlAckReg$EN;

  // register captWorker0_wci_wslv_ctlOpActive
  reg captWorker0_wci_wslv_ctlOpActive;
  wire captWorker0_wci_wslv_ctlOpActive$D_IN,
       captWorker0_wci_wslv_ctlOpActive$EN;

  // register captWorker0_wci_wslv_illegalEdge
  reg captWorker0_wci_wslv_illegalEdge;
  wire captWorker0_wci_wslv_illegalEdge$D_IN,
       captWorker0_wci_wslv_illegalEdge$EN;

  // register captWorker0_wci_wslv_isReset_isInReset
  reg captWorker0_wci_wslv_isReset_isInReset;
  wire captWorker0_wci_wslv_isReset_isInReset$D_IN,
       captWorker0_wci_wslv_isReset_isInReset$EN;

  // register captWorker0_wci_wslv_nState
  reg [2 : 0] captWorker0_wci_wslv_nState;
  reg [2 : 0] captWorker0_wci_wslv_nState$D_IN;
  wire captWorker0_wci_wslv_nState$EN;

  // register captWorker0_wci_wslv_reqF_countReg
  reg [1 : 0] captWorker0_wci_wslv_reqF_countReg;
  wire [1 : 0] captWorker0_wci_wslv_reqF_countReg$D_IN;
  wire captWorker0_wci_wslv_reqF_countReg$EN;

  // register captWorker0_wci_wslv_respF_c_r
  reg [1 : 0] captWorker0_wci_wslv_respF_c_r;
  wire [1 : 0] captWorker0_wci_wslv_respF_c_r$D_IN;
  wire captWorker0_wci_wslv_respF_c_r$EN;

  // register captWorker0_wci_wslv_respF_q_0
  reg [33 : 0] captWorker0_wci_wslv_respF_q_0;
  reg [33 : 0] captWorker0_wci_wslv_respF_q_0$D_IN;
  wire captWorker0_wci_wslv_respF_q_0$EN;

  // register captWorker0_wci_wslv_respF_q_1
  reg [33 : 0] captWorker0_wci_wslv_respF_q_1;
  reg [33 : 0] captWorker0_wci_wslv_respF_q_1$D_IN;
  wire captWorker0_wci_wslv_respF_q_1$EN;

  // register captWorker0_wci_wslv_sFlagReg
  reg captWorker0_wci_wslv_sFlagReg;
  wire captWorker0_wci_wslv_sFlagReg$D_IN, captWorker0_wci_wslv_sFlagReg$EN;

  // register captWorker0_wci_wslv_sThreadBusy_d
  reg captWorker0_wci_wslv_sThreadBusy_d;
  wire captWorker0_wci_wslv_sThreadBusy_d$D_IN,
       captWorker0_wci_wslv_sThreadBusy_d$EN;

  // register captWorker0_wsiS_burstKind
  reg [1 : 0] captWorker0_wsiS_burstKind;
  wire [1 : 0] captWorker0_wsiS_burstKind$D_IN;
  wire captWorker0_wsiS_burstKind$EN;

  // register captWorker0_wsiS_errorSticky
  reg captWorker0_wsiS_errorSticky;
  wire captWorker0_wsiS_errorSticky$D_IN, captWorker0_wsiS_errorSticky$EN;

  // register captWorker0_wsiS_iMesgCount
  reg [31 : 0] captWorker0_wsiS_iMesgCount;
  wire [31 : 0] captWorker0_wsiS_iMesgCount$D_IN;
  wire captWorker0_wsiS_iMesgCount$EN;

  // register captWorker0_wsiS_isReset_isInReset
  reg captWorker0_wsiS_isReset_isInReset;
  wire captWorker0_wsiS_isReset_isInReset$D_IN,
       captWorker0_wsiS_isReset_isInReset$EN;

  // register captWorker0_wsiS_mesgWordLength
  reg [11 : 0] captWorker0_wsiS_mesgWordLength;
  wire [11 : 0] captWorker0_wsiS_mesgWordLength$D_IN;
  wire captWorker0_wsiS_mesgWordLength$EN;

  // register captWorker0_wsiS_operateD
  reg captWorker0_wsiS_operateD;
  wire captWorker0_wsiS_operateD$D_IN, captWorker0_wsiS_operateD$EN;

  // register captWorker0_wsiS_pMesgCount
  reg [31 : 0] captWorker0_wsiS_pMesgCount;
  wire [31 : 0] captWorker0_wsiS_pMesgCount$D_IN;
  wire captWorker0_wsiS_pMesgCount$EN;

  // register captWorker0_wsiS_peerIsReady
  reg captWorker0_wsiS_peerIsReady;
  wire captWorker0_wsiS_peerIsReady$D_IN, captWorker0_wsiS_peerIsReady$EN;

  // register captWorker0_wsiS_reqFifo_countReg
  reg [1 : 0] captWorker0_wsiS_reqFifo_countReg;
  wire [1 : 0] captWorker0_wsiS_reqFifo_countReg$D_IN;
  wire captWorker0_wsiS_reqFifo_countReg$EN;

  // register captWorker0_wsiS_reqFifo_levelsValid
  reg captWorker0_wsiS_reqFifo_levelsValid;
  wire captWorker0_wsiS_reqFifo_levelsValid$D_IN,
       captWorker0_wsiS_reqFifo_levelsValid$EN;

  // register captWorker0_wsiS_statusR
  reg [7 : 0] captWorker0_wsiS_statusR;
  wire [7 : 0] captWorker0_wsiS_statusR$D_IN;
  wire captWorker0_wsiS_statusR$EN;

  // register captWorker0_wsiS_tBusyCount
  reg [31 : 0] captWorker0_wsiS_tBusyCount;
  wire [31 : 0] captWorker0_wsiS_tBusyCount$D_IN;
  wire captWorker0_wsiS_tBusyCount$EN;

  // register captWorker0_wsiS_trafficSticky
  reg captWorker0_wsiS_trafficSticky;
  wire captWorker0_wsiS_trafficSticky$D_IN, captWorker0_wsiS_trafficSticky$EN;

  // register captWorker0_wsiS_wordCount
  reg [11 : 0] captWorker0_wsiS_wordCount;
  wire [11 : 0] captWorker0_wsiS_wordCount$D_IN;
  wire captWorker0_wsiS_wordCount$EN;

  // ports of submodule appW2
  wire [31 : 0] appW2$wciS0_MAddr,
		appW2$wciS0_MData,
		appW2$wciS0_SData,
		appW2$wmiM0_MData,
		appW2$wmiM0_MFlag,
		appW2$wmiM0_SData,
		appW2$wmiM0_SFlag,
		appW2$wsiM0_MData,
		appW2$wsiS0_MData;
  wire [13 : 0] appW2$wmiM0_MAddr;
  wire [11 : 0] appW2$wmiM0_MBurstLength,
		appW2$wsiM0_MBurstLength,
		appW2$wsiS0_MBurstLength;
  wire [7 : 0] appW2$wsiM0_MReqInfo, appW2$wsiS0_MReqInfo;
  wire [3 : 0] appW2$wciS0_MByteEn,
	       appW2$wmiM0_MDataByteEn,
	       appW2$wsiM0_MByteEn,
	       appW2$wsiS0_MByteEn;
  wire [2 : 0] appW2$wciS0_MCmd,
	       appW2$wmiM0_MCmd,
	       appW2$wsiM0_MCmd,
	       appW2$wsiS0_MCmd;
  wire [1 : 0] appW2$wciS0_MFlag,
	       appW2$wciS0_SFlag,
	       appW2$wciS0_SResp,
	       appW2$wmiM0_SResp;
  wire appW2$wciS0_MAddrSpace,
       appW2$wciS0_SThreadBusy,
       appW2$wmiM0_MAddrSpace,
       appW2$wmiM0_MDataLast,
       appW2$wmiM0_MDataValid,
       appW2$wmiM0_MReqInfo,
       appW2$wmiM0_MReqLast,
       appW2$wmiM0_MReset_n,
       appW2$wmiM0_SDataThreadBusy,
       appW2$wmiM0_SReset_n,
       appW2$wmiM0_SRespLast,
       appW2$wmiM0_SThreadBusy,
       appW2$wsiM0_MBurstPrecise,
       appW2$wsiM0_MReqLast,
       appW2$wsiM0_MReset_n,
       appW2$wsiM0_SReset_n,
       appW2$wsiM0_SThreadBusy,
       appW2$wsiS0_MBurstPrecise,
       appW2$wsiS0_MReqLast,
       appW2$wsiS0_MReset_n,
       appW2$wsiS0_SReset_n,
       appW2$wsiS0_SThreadBusy;

  // ports of submodule appW3
  wire [31 : 0] appW3$wciS0_MAddr,
		appW3$wciS0_MData,
		appW3$wciS0_SData,
		appW3$wsiM0_MData,
		appW3$wsiS0_MData;
  wire [11 : 0] appW3$wsiM0_MBurstLength, appW3$wsiS0_MBurstLength;
  wire [7 : 0] appW3$wsiM0_MReqInfo, appW3$wsiS0_MReqInfo;
  wire [3 : 0] appW3$wciS0_MByteEn, appW3$wsiM0_MByteEn, appW3$wsiS0_MByteEn;
  wire [2 : 0] appW3$wciS0_MCmd, appW3$wsiM0_MCmd, appW3$wsiS0_MCmd;
  wire [1 : 0] appW3$wciS0_MFlag, appW3$wciS0_SFlag, appW3$wciS0_SResp;
  wire appW3$wciS0_MAddrSpace,
       appW3$wciS0_SThreadBusy,
       appW3$wsiM0_MBurstPrecise,
       appW3$wsiM0_MReqLast,
       appW3$wsiM0_MReset_n,
       appW3$wsiM0_SReset_n,
       appW3$wsiM0_SThreadBusy,
       appW3$wsiS0_MBurstPrecise,
       appW3$wsiS0_MReqLast,
       appW3$wsiS0_MReset_n,
       appW3$wsiS0_SReset_n,
       appW3$wsiS0_SThreadBusy;

  // ports of submodule appW4
  wire [31 : 0] appW4$wciS0_MAddr,
		appW4$wciS0_MData,
		appW4$wciS0_SData,
		appW4$wmiM0_MData,
		appW4$wmiM0_MFlag,
		appW4$wmiM0_SData,
		appW4$wmiM0_SFlag,
		appW4$wsiM0_MData,
		appW4$wsiS0_MData;
  wire [13 : 0] appW4$wmiM0_MAddr;
  wire [11 : 0] appW4$wmiM0_MBurstLength,
		appW4$wsiM0_MBurstLength,
		appW4$wsiS0_MBurstLength;
  wire [7 : 0] appW4$wsiM0_MReqInfo, appW4$wsiS0_MReqInfo;
  wire [3 : 0] appW4$wciS0_MByteEn,
	       appW4$wmiM0_MDataByteEn,
	       appW4$wsiM0_MByteEn,
	       appW4$wsiS0_MByteEn;
  wire [2 : 0] appW4$wciS0_MCmd,
	       appW4$wmiM0_MCmd,
	       appW4$wsiM0_MCmd,
	       appW4$wsiS0_MCmd;
  wire [1 : 0] appW4$wciS0_MFlag,
	       appW4$wciS0_SFlag,
	       appW4$wciS0_SResp,
	       appW4$wmiM0_SResp;
  wire appW4$wciS0_MAddrSpace,
       appW4$wciS0_SThreadBusy,
       appW4$wmiM0_MAddrSpace,
       appW4$wmiM0_MDataLast,
       appW4$wmiM0_MDataValid,
       appW4$wmiM0_MReqInfo,
       appW4$wmiM0_MReqLast,
       appW4$wmiM0_MReset_n,
       appW4$wmiM0_SDataThreadBusy,
       appW4$wmiM0_SReset_n,
       appW4$wmiM0_SRespLast,
       appW4$wmiM0_SThreadBusy,
       appW4$wsiM0_MBurstPrecise,
       appW4$wsiM0_MReqLast,
       appW4$wsiM0_MReset_n,
       appW4$wsiM0_SReset_n,
       appW4$wsiM0_SThreadBusy,
       appW4$wsiS0_MBurstPrecise,
       appW4$wsiS0_MReqLast,
       appW4$wsiS0_MReset_n,
       appW4$wsiS0_SReset_n,
       appW4$wsiS0_SThreadBusy;

  // ports of submodule captWorker0_dataBram_memory
  wire [31 : 0] captWorker0_dataBram_memory$DIA,
		captWorker0_dataBram_memory$DIB,
		captWorker0_dataBram_memory$DOA,
		captWorker0_dataBram_memory$DOB;
  wire [9 : 0] captWorker0_dataBram_memory$ADDRA,
	       captWorker0_dataBram_memory$ADDRB;
  wire captWorker0_dataBram_memory$ENA,
       captWorker0_dataBram_memory$ENB,
       captWorker0_dataBram_memory$WEA,
       captWorker0_dataBram_memory$WEB;

  // ports of submodule captWorker0_dataBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker0_dataBram_serverAdapterA_outDataCore$D_IN,
		captWorker0_dataBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker0_dataBram_serverAdapterA_outDataCore$CLR,
       captWorker0_dataBram_serverAdapterA_outDataCore$DEQ,
       captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker0_dataBram_serverAdapterA_outDataCore$ENQ,
       captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker0_dataBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker0_dataBram_serverAdapterB_outDataCore$D_IN,
		captWorker0_dataBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker0_dataBram_serverAdapterB_outDataCore$CLR,
       captWorker0_dataBram_serverAdapterB_outDataCore$DEQ,
       captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker0_dataBram_serverAdapterB_outDataCore$ENQ,
       captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_memory
  wire [31 : 0] captWorker0_metaBram_memory$DIA,
		captWorker0_metaBram_memory$DIB,
		captWorker0_metaBram_memory$DOA,
		captWorker0_metaBram_memory$DOB;
  wire [9 : 0] captWorker0_metaBram_memory$ADDRA,
	       captWorker0_metaBram_memory$ADDRB;
  wire captWorker0_metaBram_memory$ENA,
       captWorker0_metaBram_memory$ENB,
       captWorker0_metaBram_memory$WEA,
       captWorker0_metaBram_memory$WEB;

  // ports of submodule captWorker0_metaBram_memory_1
  wire [31 : 0] captWorker0_metaBram_memory_1$DIA,
		captWorker0_metaBram_memory_1$DIB,
		captWorker0_metaBram_memory_1$DOA,
		captWorker0_metaBram_memory_1$DOB;
  wire [9 : 0] captWorker0_metaBram_memory_1$ADDRA,
	       captWorker0_metaBram_memory_1$ADDRB;
  wire captWorker0_metaBram_memory_1$ENA,
       captWorker0_metaBram_memory_1$ENB,
       captWorker0_metaBram_memory_1$WEA,
       captWorker0_metaBram_memory_1$WEB;

  // ports of submodule captWorker0_metaBram_memory_2
  wire [31 : 0] captWorker0_metaBram_memory_2$DIA,
		captWorker0_metaBram_memory_2$DIB,
		captWorker0_metaBram_memory_2$DOA,
		captWorker0_metaBram_memory_2$DOB;
  wire [9 : 0] captWorker0_metaBram_memory_2$ADDRA,
	       captWorker0_metaBram_memory_2$ADDRB;
  wire captWorker0_metaBram_memory_2$ENA,
       captWorker0_metaBram_memory_2$ENB,
       captWorker0_metaBram_memory_2$WEA,
       captWorker0_metaBram_memory_2$WEB;

  // ports of submodule captWorker0_metaBram_memory_3
  wire [31 : 0] captWorker0_metaBram_memory_3$DIA,
		captWorker0_metaBram_memory_3$DIB,
		captWorker0_metaBram_memory_3$DOA,
		captWorker0_metaBram_memory_3$DOB;
  wire [9 : 0] captWorker0_metaBram_memory_3$ADDRA,
	       captWorker0_metaBram_memory_3$ADDRB;
  wire captWorker0_metaBram_memory_3$ENA,
       captWorker0_metaBram_memory_3$ENB,
       captWorker0_metaBram_memory_3$WEA,
       captWorker0_metaBram_memory_3$WEB;

  // ports of submodule captWorker0_metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_1_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_1_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_2_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_2_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_3_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_3_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterA_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterA_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterA_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterA_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterA_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterA_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_1_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_1_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_2_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_2_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_3_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_3_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule captWorker0_metaBram_serverAdapterB_outDataCore
  wire [31 : 0] captWorker0_metaBram_serverAdapterB_outDataCore$D_IN,
		captWorker0_metaBram_serverAdapterB_outDataCore$D_OUT;
  wire captWorker0_metaBram_serverAdapterB_outDataCore$CLR,
       captWorker0_metaBram_serverAdapterB_outDataCore$DEQ,
       captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N,
       captWorker0_metaBram_serverAdapterB_outDataCore$ENQ,
       captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule captWorker0_splaF
  wire [2 : 0] captWorker0_splaF$D_IN, captWorker0_splaF$D_OUT;
  wire captWorker0_splaF$CLR,
       captWorker0_splaF$DEQ,
       captWorker0_splaF$EMPTY_N,
       captWorker0_splaF$ENQ,
       captWorker0_splaF$FULL_N;

  // ports of submodule captWorker0_wci_wslv_reqF
  wire [71 : 0] captWorker0_wci_wslv_reqF$D_IN,
		captWorker0_wci_wslv_reqF$D_OUT;
  wire captWorker0_wci_wslv_reqF$CLR,
       captWorker0_wci_wslv_reqF$DEQ,
       captWorker0_wci_wslv_reqF$EMPTY_N,
       captWorker0_wci_wslv_reqF$ENQ;

  // ports of submodule captWorker0_wsiS_reqFifo
  wire [60 : 0] captWorker0_wsiS_reqFifo$D_IN, captWorker0_wsiS_reqFifo$D_OUT;
  wire captWorker0_wsiS_reqFifo$CLR,
       captWorker0_wsiS_reqFifo$DEQ,
       captWorker0_wsiS_reqFifo$EMPTY_N,
       captWorker0_wsiS_reqFifo$ENQ,
       captWorker0_wsiS_reqFifo$FULL_N;

  // ports of submodule id
  wire [511 : 0] id$uuid;

  // ports of submodule wciMonW3
  wire [31 : 0] wciMonW3$observe_MAddr,
		wciMonW3$observe_MData,
		wciMonW3$observe_SData,
		wciMonW3$pmem_MData;
  wire [11 : 0] wciMonW3$pmem_MBurstLength;
  wire [7 : 0] wciMonW3$pmem_MReqInfo;
  wire [3 : 0] wciMonW3$observe_MByteEn, wciMonW3$pmem_MByteEn;
  wire [2 : 0] wciMonW3$observe_MCmd, wciMonW3$pmem_MCmd;
  wire [1 : 0] wciMonW3$observe_MFlag,
	       wciMonW3$observe_SFlag,
	       wciMonW3$observe_SResp;
  wire wciMonW3$observe_MAddrSpace,
       wciMonW3$observe_MReset_n,
       wciMonW3$observe_SThreadBusy,
       wciMonW3$pmem_MBurstPrecise,
       wciMonW3$pmem_MReqLast,
       wciMonW3$pmem_MReset_n,
       wciMonW3$pmem_SReset_n,
       wciMonW3$pmem_SThreadBusy;

  // rule scheduling signals
  wire CAN_FIRE_RL_captWorker0_wci_cfrd,
       WILL_FIRE_RL_captWorker0_advance_split_response,
       WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_doMessageAccept,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_captWorker0_wci_cfrd,
       WILL_FIRE_RL_captWorker0_wci_cfwr,
       WILL_FIRE_RL_captWorker0_wci_ctrl_EiI,
       WILL_FIRE_RL_captWorker0_wci_ctrl_IsO,
       WILL_FIRE_RL_captWorker0_wci_ctrl_OrE,
       WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_captWorker0_wci_wslv_respF_both,
       WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq,
       WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [33 : 0] MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [31 : 0] MUX_captWorker0_dataCount$write_1__VAL_2,
		MUX_captWorker0_mesgCount$write_1__VAL_2;
  wire [1 : 0] MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_2;
  wire MUX_captWorker0_controlReg$write_1__SEL_1,
       MUX_captWorker0_dataCount$write_1__SEL_1,
       MUX_captWorker0_dataCount$write_1__SEL_2,
       MUX_captWorker0_mesgCount$write_1__SEL_1,
       MUX_captWorker0_mesgCount$write_1__SEL_2,
       MUX_captWorker0_splitReadInFlight$write_1__SEL_1,
       MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_captWorker0_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h25124,
	       v__h26132,
	       v__h26415,
	       v__h26618,
	       v__h4105,
	       v__h4279,
	       v__h4423;
  reg [31 : 0] IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d942,
	       v__h26599;
  reg CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q1,
      IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d909,
      IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d977;
  wire [31 : 0] g_data__h27626,
		rdat___1__h26721,
		v__h25213,
		y_avValue__h25840,
		y_avValue__h25884,
		y_avValue__h25924,
		y_avValue__h25964,
		y_avValue__h26004;
  wire [13 : 0] mlB__h23006, mlInc__h23005;
  wire [2 : 0] captWorker0_dataBram_serverAdapterB_cnt_16_PLU_ETC___d322,
	       captWorker0_metaBram_serverAdapterB_1_cnt_52_P_ETC___d558,
	       captWorker0_metaBram_serverAdapterB_2_cnt_70_P_ETC___d676,
	       captWorker0_metaBram_serverAdapterB_3_cnt_88_P_ETC___d794,
	       captWorker0_metaBram_serverAdapterB_cnt_34_PLU_ETC___d440,
	       x__h23054,
	       x__h23066,
	       x__h23078,
	       y__h23055,
	       y__h23067,
	       y__h23079;
  wire IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d918,
       IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d980,
       NOT_captWorker0_controlReg_23_BIT_0_24_25_OR_c_ETC___d849,
       captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871,
       captWorker0_dataCount_30_ULT_1024___d831,
       captWorker0_mesgCount_27_ULT_1024___d828,
       captWorker0_splaF_i_notEmpty__87_AND_IF_captWo_ETC___d920;

  // value method wci_s_0_sResp
  assign wci_s_0_SResp = 2'd0 ;

  // value method wci_s_0_sData
  assign wci_s_0_SData = 32'hAAAAAAAA ;

  // value method wci_s_0_sThreadBusy
  assign wci_s_0_SThreadBusy = 1'd1 ;

  // value method wci_s_0_sFlag
  assign wci_s_0_SFlag = 2'b0 ;

  // value method wci_s_1_sResp
  assign wci_s_1_SResp = 2'd0 ;

  // value method wci_s_1_sData
  assign wci_s_1_SData = 32'hAAAAAAAA ;

  // value method wci_s_1_sThreadBusy
  assign wci_s_1_SThreadBusy = 1'd1 ;

  // value method wci_s_1_sFlag
  assign wci_s_1_SFlag = 2'b0 ;

  // value method wci_s_2_sResp
  assign wci_s_2_SResp = appW2$wciS0_SResp ;

  // value method wci_s_2_sData
  assign wci_s_2_SData = appW2$wciS0_SData ;

  // value method wci_s_2_sThreadBusy
  assign wci_s_2_SThreadBusy = appW2$wciS0_SThreadBusy ;

  // value method wci_s_2_sFlag
  assign wci_s_2_SFlag = appW2$wciS0_SFlag ;

  // value method wci_s_3_sResp
  assign wci_s_3_SResp = appW3$wciS0_SResp ;

  // value method wci_s_3_sData
  assign wci_s_3_SData = appW3$wciS0_SData ;

  // value method wci_s_3_sThreadBusy
  assign wci_s_3_SThreadBusy = appW3$wciS0_SThreadBusy ;

  // value method wci_s_3_sFlag
  assign wci_s_3_SFlag = appW3$wciS0_SFlag ;

  // value method wci_s_4_sResp
  assign wci_s_4_SResp = appW4$wciS0_SResp ;

  // value method wci_s_4_sData
  assign wci_s_4_SData = appW4$wciS0_SData ;

  // value method wci_s_4_sThreadBusy
  assign wci_s_4_SThreadBusy = appW4$wciS0_SThreadBusy ;

  // value method wci_s_4_sFlag
  assign wci_s_4_SFlag = appW4$wciS0_SFlag ;

  // value method wci_s_5_sResp
  assign wci_s_5_SResp = captWorker0_wci_wslv_respF_q_0[33:32] ;

  // value method wci_s_5_sData
  assign wci_s_5_SData = captWorker0_wci_wslv_respF_q_0[31:0] ;

  // value method wci_s_5_sThreadBusy
  assign wci_s_5_SThreadBusy =
	     captWorker0_wci_wslv_reqF_countReg > 2'd1 ||
	     captWorker0_wci_wslv_isReset_isInReset ;

  // value method wci_s_5_sFlag
  assign wci_s_5_SFlag = { 1'd1, captWorker0_wci_wslv_sFlagReg } ;

  // value method wci_s_6_sResp
  assign wci_s_6_SResp = 2'd0 ;

  // value method wci_s_6_sData
  assign wci_s_6_SData = 32'hAAAAAAAA ;

  // value method wci_s_6_sThreadBusy
  assign wci_s_6_SThreadBusy = 1'd1 ;

  // value method wci_s_6_sFlag
  assign wci_s_6_SFlag = 2'b0 ;

  // value method wci_s_7_sResp
  assign wci_s_7_SResp = 2'd0 ;

  // value method wci_s_7_sData
  assign wci_s_7_SData = 32'hAAAAAAAA ;

  // value method wci_s_7_sThreadBusy
  assign wci_s_7_SThreadBusy = 1'd1 ;

  // value method wci_s_7_sFlag
  assign wci_s_7_SFlag = 2'b0 ;

  // value method wmiM0_mCmd
  assign wmiM0_MCmd = appW2$wmiM0_MCmd ;

  // value method wmiM0_mReqLast
  assign wmiM0_MReqLast = appW2$wmiM0_MReqLast ;

  // value method wmiM0_mReqInfo
  assign wmiM0_MReqInfo = appW2$wmiM0_MReqInfo ;

  // value method wmiM0_mAddrSpace
  assign wmiM0_MAddrSpace = appW2$wmiM0_MAddrSpace ;

  // value method wmiM0_mAddr
  assign wmiM0_MAddr = appW2$wmiM0_MAddr ;

  // value method wmiM0_mBurstLength
  assign wmiM0_MBurstLength = appW2$wmiM0_MBurstLength ;

  // value method wmiM0_mDataValid
  assign wmiM0_MDataValid = appW2$wmiM0_MDataValid ;

  // value method wmiM0_mDataLast
  assign wmiM0_MDataLast = appW2$wmiM0_MDataLast ;

  // value method wmiM0_mData
  assign wmiM0_MData = appW2$wmiM0_MData ;

  // value method wmiM0_mDataByteEn
  assign wmiM0_MDataByteEn = appW2$wmiM0_MDataByteEn ;

  // value method wmiM0_mFlag
  assign wmiM0_MFlag = appW2$wmiM0_MFlag ;

  // value method wmiM0_mReset_n
  assign wmiM0_MReset_n = appW2$wmiM0_MReset_n ;

  // value method wmiM1_mCmd
  assign wmiM1_MCmd = appW4$wmiM0_MCmd ;

  // value method wmiM1_mReqLast
  assign wmiM1_MReqLast = appW4$wmiM0_MReqLast ;

  // value method wmiM1_mReqInfo
  assign wmiM1_MReqInfo = appW4$wmiM0_MReqInfo ;

  // value method wmiM1_mAddrSpace
  assign wmiM1_MAddrSpace = appW4$wmiM0_MAddrSpace ;

  // value method wmiM1_mAddr
  assign wmiM1_MAddr = appW4$wmiM0_MAddr ;

  // value method wmiM1_mBurstLength
  assign wmiM1_MBurstLength = appW4$wmiM0_MBurstLength ;

  // value method wmiM1_mDataValid
  assign wmiM1_MDataValid = appW4$wmiM0_MDataValid ;

  // value method wmiM1_mDataLast
  assign wmiM1_MDataLast = appW4$wmiM0_MDataLast ;

  // value method wmiM1_mData
  assign wmiM1_MData = appW4$wmiM0_MData ;

  // value method wmiM1_mDataByteEn
  assign wmiM1_MDataByteEn = appW4$wmiM0_MDataByteEn ;

  // value method wmiM1_mFlag
  assign wmiM1_MFlag = appW4$wmiM0_MFlag ;

  // value method wmiM1_mReset_n
  assign wmiM1_MReset_n = appW4$wmiM0_MReset_n ;

  // value method wmemiM0_mCmd
  assign wmemiM0_MCmd = 3'h2 ;

  // value method wmemiM0_mReqLast
  assign wmemiM0_MReqLast = 1'h0 ;

  // value method wmemiM0_mAddr
  assign wmemiM0_MAddr = 36'hAAAAAAAAA ;

  // value method wmemiM0_mBurstLength
  assign wmemiM0_MBurstLength = 12'hAAA ;

  // value method wmemiM0_mDataValid
  assign wmemiM0_MDataValid = 1'h0 ;

  // value method wmemiM0_mDataLast
  assign wmemiM0_MDataLast = 1'h0 ;

  // value method wmemiM0_mData
  assign wmemiM0_MData = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;

  // value method wmemiM0_mDataByteEn
  assign wmemiM0_MDataByteEn = 16'hAAAA ;

  // value method wmemiM0_mReset_n
  assign wmemiM0_MReset_n = 1'h0 ;

  // value method wsi_s_adc_sThreadBusy
  assign wsi_s_adc_SThreadBusy = appW2$wsiS0_SThreadBusy ;

  // value method wsi_s_adc_sReset_n
  assign wsi_s_adc_SReset_n = appW2$wsiS0_SReset_n ;

  // value method wsi_m_dac_mCmd
  assign wsi_m_dac_MCmd = appW4$wsiM0_MCmd ;

  // value method wsi_m_dac_mReqLast
  assign wsi_m_dac_MReqLast = appW4$wsiM0_MReqLast ;

  // value method wsi_m_dac_mBurstPrecise
  assign wsi_m_dac_MBurstPrecise = appW4$wsiM0_MBurstPrecise ;

  // value method wsi_m_dac_mBurstLength
  assign wsi_m_dac_MBurstLength = appW4$wsiM0_MBurstLength ;

  // value method wsi_m_dac_mData
  assign wsi_m_dac_MData = appW4$wsiM0_MData ;

  // value method wsi_m_dac_mByteEn
  assign wsi_m_dac_MByteEn = appW4$wsiM0_MByteEn ;

  // value method wsi_m_dac_mReqInfo
  assign wsi_m_dac_MReqInfo = appW4$wsiM0_MReqInfo ;

  // value method wsi_m_dac_mReset_n
  assign wsi_m_dac_MReset_n = appW4$wsiM0_MReset_n ;

  // value method uuid
  assign uuid = id$uuid ;

  // submodule appW2
  mkSMAdapter4B #(.smaCtrlInit(32'h00000001),
		  .hasDebugLogic(hasDebugLogic)) appW2(.wciS0_Clk(CLK),
						       .wciS0_MReset_n(RST_N_rst_2),
						       .wciS0_MAddr(appW2$wciS0_MAddr),
						       .wciS0_MAddrSpace(appW2$wciS0_MAddrSpace),
						       .wciS0_MByteEn(appW2$wciS0_MByteEn),
						       .wciS0_MCmd(appW2$wciS0_MCmd),
						       .wciS0_MData(appW2$wciS0_MData),
						       .wciS0_MFlag(appW2$wciS0_MFlag),
						       .wmiM0_SData(appW2$wmiM0_SData),
						       .wmiM0_SFlag(appW2$wmiM0_SFlag),
						       .wmiM0_SResp(appW2$wmiM0_SResp),
						       .wsiS0_MBurstLength(appW2$wsiS0_MBurstLength),
						       .wsiS0_MByteEn(appW2$wsiS0_MByteEn),
						       .wsiS0_MCmd(appW2$wsiS0_MCmd),
						       .wsiS0_MData(appW2$wsiS0_MData),
						       .wsiS0_MReqInfo(appW2$wsiS0_MReqInfo),
						       .wmiM0_SThreadBusy(appW2$wmiM0_SThreadBusy),
						       .wmiM0_SDataThreadBusy(appW2$wmiM0_SDataThreadBusy),
						       .wmiM0_SRespLast(appW2$wmiM0_SRespLast),
						       .wmiM0_SReset_n(appW2$wmiM0_SReset_n),
						       .wsiM0_SThreadBusy(appW2$wsiM0_SThreadBusy),
						       .wsiM0_SReset_n(appW2$wsiM0_SReset_n),
						       .wsiS0_MReqLast(appW2$wsiS0_MReqLast),
						       .wsiS0_MBurstPrecise(appW2$wsiS0_MBurstPrecise),
						       .wsiS0_MReset_n(appW2$wsiS0_MReset_n),
						       .wciS0_SResp(appW2$wciS0_SResp),
						       .wciS0_SData(appW2$wciS0_SData),
						       .wciS0_SThreadBusy(appW2$wciS0_SThreadBusy),
						       .wciS0_SFlag(appW2$wciS0_SFlag),
						       .wmiM0_MCmd(appW2$wmiM0_MCmd),
						       .wmiM0_MReqLast(appW2$wmiM0_MReqLast),
						       .wmiM0_MReqInfo(appW2$wmiM0_MReqInfo),
						       .wmiM0_MAddrSpace(appW2$wmiM0_MAddrSpace),
						       .wmiM0_MAddr(appW2$wmiM0_MAddr),
						       .wmiM0_MBurstLength(appW2$wmiM0_MBurstLength),
						       .wmiM0_MDataValid(appW2$wmiM0_MDataValid),
						       .wmiM0_MDataLast(appW2$wmiM0_MDataLast),
						       .wmiM0_MData(appW2$wmiM0_MData),
						       .wmiM0_MDataByteEn(appW2$wmiM0_MDataByteEn),
						       .wmiM0_MFlag(appW2$wmiM0_MFlag),
						       .wmiM0_MReset_n(appW2$wmiM0_MReset_n),
						       .wsiM0_MCmd(appW2$wsiM0_MCmd),
						       .wsiM0_MReqLast(appW2$wsiM0_MReqLast),
						       .wsiM0_MBurstPrecise(appW2$wsiM0_MBurstPrecise),
						       .wsiM0_MBurstLength(appW2$wsiM0_MBurstLength),
						       .wsiM0_MData(appW2$wsiM0_MData),
						       .wsiM0_MByteEn(appW2$wsiM0_MByteEn),
						       .wsiM0_MReqInfo(appW2$wsiM0_MReqInfo),
						       .wsiM0_MReset_n(appW2$wsiM0_MReset_n),
						       .wsiS0_SThreadBusy(appW2$wsiS0_SThreadBusy),
						       .wsiS0_SReset_n(appW2$wsiS0_SReset_n));

  // submodule appW3
  mkBiasWorker4B #(.hasDebugLogic(hasDebugLogic)) appW3(.wciS0_Clk(CLK),
							.wciS0_MReset_n(RST_N_rst_3),
							.wciS0_MAddr(appW3$wciS0_MAddr),
							.wciS0_MAddrSpace(appW3$wciS0_MAddrSpace),
							.wciS0_MByteEn(appW3$wciS0_MByteEn),
							.wciS0_MCmd(appW3$wciS0_MCmd),
							.wciS0_MData(appW3$wciS0_MData),
							.wciS0_MFlag(appW3$wciS0_MFlag),
							.wsiS0_MBurstLength(appW3$wsiS0_MBurstLength),
							.wsiS0_MByteEn(appW3$wsiS0_MByteEn),
							.wsiS0_MCmd(appW3$wsiS0_MCmd),
							.wsiS0_MData(appW3$wsiS0_MData),
							.wsiS0_MReqInfo(appW3$wsiS0_MReqInfo),
							.wsiS0_MReqLast(appW3$wsiS0_MReqLast),
							.wsiS0_MBurstPrecise(appW3$wsiS0_MBurstPrecise),
							.wsiS0_MReset_n(appW3$wsiS0_MReset_n),
							.wsiM0_SThreadBusy(appW3$wsiM0_SThreadBusy),
							.wsiM0_SReset_n(appW3$wsiM0_SReset_n),
							.wciS0_SResp(appW3$wciS0_SResp),
							.wciS0_SData(appW3$wciS0_SData),
							.wciS0_SThreadBusy(appW3$wciS0_SThreadBusy),
							.wciS0_SFlag(appW3$wciS0_SFlag),
							.wsiS0_SThreadBusy(appW3$wsiS0_SThreadBusy),
							.wsiS0_SReset_n(appW3$wsiS0_SReset_n),
							.wsiM0_MCmd(appW3$wsiM0_MCmd),
							.wsiM0_MReqLast(appW3$wsiM0_MReqLast),
							.wsiM0_MBurstPrecise(appW3$wsiM0_MBurstPrecise),
							.wsiM0_MBurstLength(appW3$wsiM0_MBurstLength),
							.wsiM0_MData(appW3$wsiM0_MData),
							.wsiM0_MByteEn(appW3$wsiM0_MByteEn),
							.wsiM0_MReqInfo(appW3$wsiM0_MReqInfo),
							.wsiM0_MReset_n(appW3$wsiM0_MReset_n));

  // submodule appW4
  mkSMAdapter4B #(.smaCtrlInit(32'h00000002),
		  .hasDebugLogic(hasDebugLogic)) appW4(.wciS0_Clk(CLK),
						       .wciS0_MReset_n(RST_N_rst_4),
						       .wciS0_MAddr(appW4$wciS0_MAddr),
						       .wciS0_MAddrSpace(appW4$wciS0_MAddrSpace),
						       .wciS0_MByteEn(appW4$wciS0_MByteEn),
						       .wciS0_MCmd(appW4$wciS0_MCmd),
						       .wciS0_MData(appW4$wciS0_MData),
						       .wciS0_MFlag(appW4$wciS0_MFlag),
						       .wmiM0_SData(appW4$wmiM0_SData),
						       .wmiM0_SFlag(appW4$wmiM0_SFlag),
						       .wmiM0_SResp(appW4$wmiM0_SResp),
						       .wsiS0_MBurstLength(appW4$wsiS0_MBurstLength),
						       .wsiS0_MByteEn(appW4$wsiS0_MByteEn),
						       .wsiS0_MCmd(appW4$wsiS0_MCmd),
						       .wsiS0_MData(appW4$wsiS0_MData),
						       .wsiS0_MReqInfo(appW4$wsiS0_MReqInfo),
						       .wmiM0_SThreadBusy(appW4$wmiM0_SThreadBusy),
						       .wmiM0_SDataThreadBusy(appW4$wmiM0_SDataThreadBusy),
						       .wmiM0_SRespLast(appW4$wmiM0_SRespLast),
						       .wmiM0_SReset_n(appW4$wmiM0_SReset_n),
						       .wsiM0_SThreadBusy(appW4$wsiM0_SThreadBusy),
						       .wsiM0_SReset_n(appW4$wsiM0_SReset_n),
						       .wsiS0_MReqLast(appW4$wsiS0_MReqLast),
						       .wsiS0_MBurstPrecise(appW4$wsiS0_MBurstPrecise),
						       .wsiS0_MReset_n(appW4$wsiS0_MReset_n),
						       .wciS0_SResp(appW4$wciS0_SResp),
						       .wciS0_SData(appW4$wciS0_SData),
						       .wciS0_SThreadBusy(appW4$wciS0_SThreadBusy),
						       .wciS0_SFlag(appW4$wciS0_SFlag),
						       .wmiM0_MCmd(appW4$wmiM0_MCmd),
						       .wmiM0_MReqLast(appW4$wmiM0_MReqLast),
						       .wmiM0_MReqInfo(appW4$wmiM0_MReqInfo),
						       .wmiM0_MAddrSpace(appW4$wmiM0_MAddrSpace),
						       .wmiM0_MAddr(appW4$wmiM0_MAddr),
						       .wmiM0_MBurstLength(appW4$wmiM0_MBurstLength),
						       .wmiM0_MDataValid(appW4$wmiM0_MDataValid),
						       .wmiM0_MDataLast(appW4$wmiM0_MDataLast),
						       .wmiM0_MData(appW4$wmiM0_MData),
						       .wmiM0_MDataByteEn(appW4$wmiM0_MDataByteEn),
						       .wmiM0_MFlag(appW4$wmiM0_MFlag),
						       .wmiM0_MReset_n(appW4$wmiM0_MReset_n),
						       .wsiM0_MCmd(appW4$wsiM0_MCmd),
						       .wsiM0_MReqLast(appW4$wsiM0_MReqLast),
						       .wsiM0_MBurstPrecise(appW4$wsiM0_MBurstPrecise),
						       .wsiM0_MBurstLength(appW4$wsiM0_MBurstLength),
						       .wsiM0_MData(appW4$wsiM0_MData),
						       .wsiM0_MByteEn(appW4$wsiM0_MByteEn),
						       .wsiM0_MReqInfo(appW4$wsiM0_MReqInfo),
						       .wsiM0_MReset_n(appW4$wsiM0_MReset_n),
						       .wsiS0_SThreadBusy(appW4$wsiS0_SThreadBusy),
						       .wsiS0_SReset_n(appW4$wsiS0_SReset_n));

  // submodule captWorker0_dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_dataBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker0_dataBram_memory$ADDRA),
							  .ADDRB(captWorker0_dataBram_memory$ADDRB),
							  .DIA(captWorker0_dataBram_memory$DIA),
							  .DIB(captWorker0_dataBram_memory$DIB),
							  .WEA(captWorker0_dataBram_memory$WEA),
							  .WEB(captWorker0_dataBram_memory$WEB),
							  .ENA(captWorker0_dataBram_memory$ENA),
							  .ENB(captWorker0_dataBram_memory$ENB),
							  .DOA(captWorker0_dataBram_memory$DOA),
							  .DOB(captWorker0_dataBram_memory$DOB));

  // submodule captWorker0_dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_dataBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_dataBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker0_dataBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker0_dataBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker0_dataBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker0_dataBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker0_dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_dataBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_dataBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker0_dataBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker0_dataBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker0_dataBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker0_dataBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(captWorker0_metaBram_memory$ADDRA),
							  .ADDRB(captWorker0_metaBram_memory$ADDRB),
							  .DIA(captWorker0_metaBram_memory$DIA),
							  .DIB(captWorker0_metaBram_memory$DIB),
							  .WEA(captWorker0_metaBram_memory$WEA),
							  .WEB(captWorker0_metaBram_memory$WEB),
							  .ENA(captWorker0_metaBram_memory$ENA),
							  .ENB(captWorker0_metaBram_memory$ENB),
							  .DOA(captWorker0_metaBram_memory$DOA),
							  .DOB(captWorker0_metaBram_memory$DOB));

  // submodule captWorker0_metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory_1(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker0_metaBram_memory_1$ADDRA),
							    .ADDRB(captWorker0_metaBram_memory_1$ADDRB),
							    .DIA(captWorker0_metaBram_memory_1$DIA),
							    .DIB(captWorker0_metaBram_memory_1$DIB),
							    .WEA(captWorker0_metaBram_memory_1$WEA),
							    .WEB(captWorker0_metaBram_memory_1$WEB),
							    .ENA(captWorker0_metaBram_memory_1$ENA),
							    .ENB(captWorker0_metaBram_memory_1$ENB),
							    .DOA(captWorker0_metaBram_memory_1$DOA),
							    .DOB(captWorker0_metaBram_memory_1$DOB));

  // submodule captWorker0_metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory_2(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker0_metaBram_memory_2$ADDRA),
							    .ADDRB(captWorker0_metaBram_memory_2$ADDRB),
							    .DIA(captWorker0_metaBram_memory_2$DIA),
							    .DIB(captWorker0_metaBram_memory_2$DIB),
							    .WEA(captWorker0_metaBram_memory_2$WEA),
							    .WEB(captWorker0_metaBram_memory_2$WEB),
							    .ENA(captWorker0_metaBram_memory_2$ENA),
							    .ENB(captWorker0_metaBram_memory_2$ENB),
							    .DOA(captWorker0_metaBram_memory_2$DOA),
							    .DOB(captWorker0_metaBram_memory_2$DOB));

  // submodule captWorker0_metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) captWorker0_metaBram_memory_3(.CLKA(CLK),
							    .CLKB(CLK),
							    .ADDRA(captWorker0_metaBram_memory_3$ADDRA),
							    .ADDRB(captWorker0_metaBram_memory_3$ADDRB),
							    .DIA(captWorker0_metaBram_memory_3$DIA),
							    .DIB(captWorker0_metaBram_memory_3$DIB),
							    .WEA(captWorker0_metaBram_memory_3$WEA),
							    .WEB(captWorker0_metaBram_memory_3$WEB),
							    .ENA(captWorker0_metaBram_memory_3$ENA),
							    .ENB(captWorker0_metaBram_memory_3$ENB),
							    .DOA(captWorker0_metaBram_memory_3$DOA),
							    .DOB(captWorker0_metaBram_memory_3$DOB));

  // submodule captWorker0_metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_1_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterA_1_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterA_1_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterA_1_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterA_1_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterA_1_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_2_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterA_2_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterA_2_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterA_2_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterA_2_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterA_2_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_3_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterA_3_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterA_3_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterA_3_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterA_3_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterA_3_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterA_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_metaBram_serverAdapterA_outDataCore$D_IN),
									       .ENQ(captWorker0_metaBram_serverAdapterA_outDataCore$ENQ),
									       .DEQ(captWorker0_metaBram_serverAdapterA_outDataCore$DEQ),
									       .CLR(captWorker0_metaBram_serverAdapterA_outDataCore$CLR),
									       .D_OUT(captWorker0_metaBram_serverAdapterA_outDataCore$D_OUT),
									       .FULL_N(captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_1_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterB_1_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterB_1_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterB_1_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterB_1_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterB_1_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_2_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterB_2_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterB_2_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterB_2_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterB_2_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterB_2_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_3_outDataCore(.RST_N(RST_N_rst_5),
										 .CLK(CLK),
										 .D_IN(captWorker0_metaBram_serverAdapterB_3_outDataCore$D_IN),
										 .ENQ(captWorker0_metaBram_serverAdapterB_3_outDataCore$ENQ),
										 .DEQ(captWorker0_metaBram_serverAdapterB_3_outDataCore$DEQ),
										 .CLR(captWorker0_metaBram_serverAdapterB_3_outDataCore$CLR),
										 .D_OUT(captWorker0_metaBram_serverAdapterB_3_outDataCore$D_OUT),
										 .FULL_N(captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N),
										 .EMPTY_N(captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule captWorker0_metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_metaBram_serverAdapterB_outDataCore(.RST_N(RST_N_rst_5),
									       .CLK(CLK),
									       .D_IN(captWorker0_metaBram_serverAdapterB_outDataCore$D_IN),
									       .ENQ(captWorker0_metaBram_serverAdapterB_outDataCore$ENQ),
									       .DEQ(captWorker0_metaBram_serverAdapterB_outDataCore$DEQ),
									       .CLR(captWorker0_metaBram_serverAdapterB_outDataCore$CLR),
									       .D_OUT(captWorker0_metaBram_serverAdapterB_outDataCore$D_OUT),
									       .FULL_N(captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N),
									       .EMPTY_N(captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule captWorker0_splaF
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) captWorker0_splaF(.RST_N(RST_N_rst_5),
					     .CLK(CLK),
					     .D_IN(captWorker0_splaF$D_IN),
					     .ENQ(captWorker0_splaF$ENQ),
					     .DEQ(captWorker0_splaF$DEQ),
					     .CLR(captWorker0_splaF$CLR),
					     .D_OUT(captWorker0_splaF$D_OUT),
					     .FULL_N(captWorker0_splaF$FULL_N),
					     .EMPTY_N(captWorker0_splaF$EMPTY_N));

  // submodule captWorker0_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_wci_wslv_reqF(.RST_N(RST_N_rst_5),
							 .CLK(CLK),
							 .D_IN(captWorker0_wci_wslv_reqF$D_IN),
							 .ENQ(captWorker0_wci_wslv_reqF$ENQ),
							 .DEQ(captWorker0_wci_wslv_reqF$DEQ),
							 .CLR(captWorker0_wci_wslv_reqF$CLR),
							 .D_OUT(captWorker0_wci_wslv_reqF$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(captWorker0_wci_wslv_reqF$EMPTY_N));

  // submodule captWorker0_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) captWorker0_wsiS_reqFifo(.RST_N(RST_N_rst_5),
							.CLK(CLK),
							.D_IN(captWorker0_wsiS_reqFifo$D_IN),
							.ENQ(captWorker0_wsiS_reqFifo$ENQ),
							.DEQ(captWorker0_wsiS_reqFifo$DEQ),
							.CLR(captWorker0_wsiS_reqFifo$CLR),
							.D_OUT(captWorker0_wsiS_reqFifo$D_OUT),
							.FULL_N(captWorker0_wsiS_reqFifo$FULL_N),
							.EMPTY_N(captWorker0_wsiS_reqFifo$EMPTY_N));

  // submodule id
  mkUUID id(.uuid(id$uuid));

  // submodule wciMonW3
  mkWciMonitor #(.monId(8'h42)) wciMonW3(.CLK(CLK),
					 .RST_N(RST_N),
					 .observe_MAddr(wciMonW3$observe_MAddr),
					 .observe_MAddrSpace(wciMonW3$observe_MAddrSpace),
					 .observe_MByteEn(wciMonW3$observe_MByteEn),
					 .observe_MCmd(wciMonW3$observe_MCmd),
					 .observe_MData(wciMonW3$observe_MData),
					 .observe_MFlag(wciMonW3$observe_MFlag),
					 .observe_MReset_n(wciMonW3$observe_MReset_n),
					 .observe_SData(wciMonW3$observe_SData),
					 .observe_SFlag(wciMonW3$observe_SFlag),
					 .observe_SResp(wciMonW3$observe_SResp),
					 .observe_SThreadBusy(wciMonW3$observe_SThreadBusy),
					 .pmem_SThreadBusy(wciMonW3$pmem_SThreadBusy),
					 .pmem_SReset_n(wciMonW3$pmem_SReset_n),
					 .pmem_MCmd(wciMonW3$pmem_MCmd),
					 .pmem_MReqLast(wciMonW3$pmem_MReqLast),
					 .pmem_MBurstPrecise(wciMonW3$pmem_MBurstPrecise),
					 .pmem_MBurstLength(wciMonW3$pmem_MBurstLength),
					 .pmem_MData(wciMonW3$pmem_MData),
					 .pmem_MByteEn(wciMonW3$pmem_MByteEn),
					 .pmem_MReqInfo(wciMonW3$pmem_MReqInfo),
					 .pmem_MReset_n(wciMonW3$pmem_MReset_n));

  // rule RL_captWorker0_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_wci_ctrl_EiI
  assign WILL_FIRE_RL_captWorker0_wci_ctrl_EiI =
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     captWorker0_wci_wslv_cState == 3'd0 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_captWorker0_wci_ctrl_IsO
  assign WILL_FIRE_RL_captWorker0_wci_ctrl_IsO =
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     captWorker0_wci_wslv_cState == 3'd1 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_captWorker0_wci_ctrl_OrE
  assign WILL_FIRE_RL_captWorker0_wci_ctrl_OrE =
	     captWorker0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     captWorker0_wci_wslv_cState == 3'd2 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_captWorker0_wci_cfrd
  assign CAN_FIRE_RL_captWorker0_wci_cfrd =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 ||
	      IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d980) &&
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h001 ||
	      captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h002 ||
	      captWorker0_wci_wslv_respF_c_r != 2'd2) &&
	     captWorker0_wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_captWorker0_wci_cfrd =
	     CAN_FIRE_RL_captWorker0_wci_cfrd &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_doMessageAccept
  assign WILL_FIRE_RL_captWorker0_doMessageAccept =
	     captWorker0_wsiS_reqFifo$EMPTY_N &&
	     NOT_captWorker0_controlReg_23_BIT_0_24_25_OR_c_ETC___d849 &&
	     captWorker0_wci_wslv_cState == 3'd2 ;

  // rule RL_captWorker0_wci_cfwr
  assign WILL_FIRE_RL_captWorker0_wci_cfwr =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker0_wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete =
	     captWorker0_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker0_wci_wslv_ctlOpActive &&
	     captWorker0_wci_wslv_ctlAckReg ;

  // rule RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h001 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h002 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h002 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h002 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // rule RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h002 &&
	     captWorker0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // rule RL_captWorker0_advance_split_response
  assign WILL_FIRE_RL_captWorker0_advance_split_response =
	     captWorker0_wci_wslv_respF_c_r != 2'd2 &&
	     captWorker0_splaF_i_notEmpty__87_AND_IF_captWo_ETC___d920 &&
	     !captWorker0_wci_wslv_wci_cfwr_pw$whas &&
	     captWorker0_splitReadInFlight &&
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;

  // rule RL_captWorker0_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr =
	     ((captWorker0_wci_wslv_respF_c_r == 2'd0) ?
		captWorker0_wci_wslv_respF_x_wire$whas :
		captWorker0_wci_wslv_respF_c_r != 2'd1 ||
		captWorker0_wci_wslv_respF_x_wire$whas) &&
	     captWorker0_wci_wslv_respF_enqueueing$whas &&
	     !(captWorker0_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_captWorker0_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr =
	     captWorker0_wci_wslv_respF_c_r != 2'd0 &&
	     !captWorker0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker0_wci_wslv_respF_both
  assign WILL_FIRE_RL_captWorker0_wci_wslv_respF_both =
	     ((captWorker0_wci_wslv_respF_c_r == 2'd1) ?
		captWorker0_wci_wslv_respF_x_wire$whas :
		captWorker0_wci_wslv_respF_c_r != 2'd2 ||
		captWorker0_wci_wslv_respF_x_wire$whas) &&
	     captWorker0_wci_wslv_respF_c_r != 2'd0 &&
	     captWorker0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq =
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_captWorker0_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq =
	     captWorker0_wsiS_reqFifo$FULL_N && captWorker0_wsiS_operateD &&
	     captWorker0_wsiS_peerIsReady &&
	     captWorker0_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_captWorker0_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;

  // inputs to muxes for submodule ports
  assign MUX_captWorker0_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_captWorker0_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_captWorker0_dataCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871 ;
  assign MUX_captWorker0_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_captWorker0_mesgCount$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871 &&
	     captWorker0_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_captWorker0_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h001 ||
	      captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h002) ;
  assign MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	     captWorker0_wci_wslv_illegalEdge ;
  assign MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     (captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker0_wci_wslv_cState != 3'd0 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      captWorker0_wci_wslv_cState != 3'd1 &&
	      captWorker0_wci_wslv_cState != 3'd3 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker0_wci_wslv_cState != 3'd2 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      captWorker0_wci_wslv_cState != 3'd3 &&
	      captWorker0_wci_wslv_cState != 3'd2 &&
	      captWorker0_wci_wslv_cState != 3'd1 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h001 &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h002 ;
  assign MUX_captWorker0_dataCount$write_1__VAL_2 =
	     captWorker0_dataCount + 32'd1 ;
  assign MUX_captWorker0_mesgCount$write_1__VAL_2 =
	     captWorker0_mesgCount + 32'd1 ;
  assign MUX_captWorker0_wci_wslv_illegalEdge$write_1__VAL_2 =
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_1 =
	     captWorker0_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_2 =
	     captWorker0_wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (captWorker0_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       captWorker0_wci_wslv_respF_q_1 ;
  always@(MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete or
	  MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_advance_split_response or
	  MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3 or
	  WILL_FIRE_RL_captWorker0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_captWorker0_advance_split_response:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_captWorker0_wci_cfwr:
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (captWorker0_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, g_data__h27626 } ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     captWorker0_wci_wslv_illegalEdge ?
	       34'h3C0DE4202 :
	       34'h1C0DE4201 ;
  assign MUX_captWorker0_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     { 2'd1, v__h25213 } ;

  // inlined wires
  assign captWorker0_wci_wslv_wciReq$wget =
	     { wci_s_5_MCmd,
	       wci_s_5_MAddrSpace,
	       wci_s_5_MByteEn,
	       wci_s_5_MAddr,
	       wci_s_5_MData } ;
  assign captWorker0_wci_wslv_wciReq$whas = 1'd1 ;
  assign captWorker0_wci_wslv_respF_x_wire$wget =
	     MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign captWorker0_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h001 &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h002 ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker0_advance_split_response ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr ;
  assign captWorker0_wci_wslv_wEdge$wget =
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker0_wci_wslv_wEdge$whas =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;
  assign captWorker0_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign captWorker0_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign captWorker0_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign captWorker0_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_captWorker0_wci_ctrl_OrE ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_IsO ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;
  assign captWorker0_wci_wci_Es_mCmd_w$wget = wci_s_5_MCmd ;
  assign captWorker0_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mAddrSpace_w$wget = wci_s_5_MAddrSpace ;
  assign captWorker0_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mAddr_w$wget = wci_s_5_MAddr ;
  assign captWorker0_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mData_w$wget = wci_s_5_MData ;
  assign captWorker0_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign captWorker0_wci_wci_Es_mByteEn_w$wget = wci_s_5_MByteEn ;
  assign captWorker0_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker0_wsiS_wsiReq$wget =
	     { wciMonW3$pmem_MCmd,
	       wciMonW3$pmem_MReqLast,
	       wciMonW3$pmem_MBurstPrecise,
	       wciMonW3$pmem_MBurstLength,
	       wciMonW3$pmem_MData,
	       wciMonW3$pmem_MByteEn,
	       wciMonW3$pmem_MReqInfo } ;
  assign captWorker0_wsiS_wsiReq$whas = 1'd1 ;
  assign captWorker0_wsiS_operateD_1$wget = 1'd1 ;
  assign captWorker0_wsiS_operateD_1$whas =
	     captWorker0_wci_wslv_cState == 3'd2 ;
  assign captWorker0_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign captWorker0_wsiS_peerIsReady_1$whas = wciMonW3$pmem_MReset_n ;
  assign captWorker0_wsiS_sThreadBusy_dw$wget =
	     captWorker0_wsiS_reqFifo_countReg > 2'd1 ;
  assign captWorker0_wsiS_sThreadBusy_dw$whas =
	     captWorker0_wsiS_reqFifo_levelsValid &&
	     captWorker0_wsiS_operateD &&
	     captWorker0_wsiS_peerIsReady ;
  assign captWorker0_nowW$wget = 64'h0 ;
  assign captWorker0_nowW$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_outData_enqData$wget =
	     captWorker0_dataBram_memory$DOA ;
  assign captWorker0_dataBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker0_dataBram_serverAdapterA_s1[0] ||
	      captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker0_dataBram_serverAdapterA_s1[1] &&
	     captWorker0_dataBram_serverAdapterA_s1[0] ;
  assign captWorker0_dataBram_serverAdapterA_outData_outData$wget =
	     captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker0_dataBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker0_dataBram_memory$DOA ;
  assign captWorker0_dataBram_serverAdapterA_outData_outData$whas =
	     captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker0_dataBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker0_dataCount$write_1__SEL_2 ;
  assign captWorker0_dataBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker0_dataBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker0_dataCount$write_1__SEL_2 ;
  assign captWorker0_dataBram_serverAdapterB_outData_enqData$wget =
	     captWorker0_dataBram_memory$DOB ;
  assign captWorker0_dataBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker0_dataBram_serverAdapterB_s1[0] ||
	      captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker0_dataBram_serverAdapterB_s1[1] &&
	     captWorker0_dataBram_serverAdapterB_s1[0] ;
  assign captWorker0_dataBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h25840 ;
  assign captWorker0_dataBram_serverAdapterB_outData_outData$whas =
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker0_dataBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker0_dataBram_serverAdapterB_cnt_2$whas =
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker0_dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker0_dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker0_dataBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_dataBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker0_dataBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_outData_enqData$wget =
	     captWorker0_metaBram_memory$DOA ;
  assign captWorker0_metaBram_serverAdapterA_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_outDataCore$D_OUT :
	       captWorker0_metaBram_memory$DOA ;
  assign captWorker0_metaBram_serverAdapterA_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_writeWithResp$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_s1_1$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_outData_enqData$wget =
	     captWorker0_metaBram_memory$DOB ;
  assign captWorker0_metaBram_serverAdapterB_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h25884 ;
  assign captWorker0_metaBram_serverAdapterB_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_cnt_2$whas =
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign captWorker0_metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_enqData$wget =
	     captWorker0_metaBram_memory_1$DOA ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_1_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_1_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_1_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_1$DOA ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_1_writeWithResp$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_1_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_1_s1_1$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_enqData$wget =
	     captWorker0_metaBram_memory_1$DOB ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_1_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_1_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_1_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h25924 ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_2$whas =
	     captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_1_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_1_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_1_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_1_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_enqData$wget =
	     captWorker0_metaBram_memory_2$DOA ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_2_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_2_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_2_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_2$DOA ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_2_writeWithResp$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_2_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_2_s1_1$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_enqData$wget =
	     captWorker0_metaBram_memory_2$DOB ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_2_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_2_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_2_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h25964 ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_2$whas =
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_2_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_2_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_2_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_2_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_enqData$wget =
	     captWorker0_metaBram_memory_3$DOA ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterA_3_s1[0] ||
	      captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterA_3_s1[1] &&
	     captWorker0_metaBram_serverAdapterA_3_s1[0] ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_outData$wget =
	     captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_3$DOA ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_1$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_2$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_2$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_writeWithResp$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_3_writeWithResp$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterA_3_s1_1$wget = 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_3_s1_1$whas =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_enqData$wget =
	     captWorker0_metaBram_memory_3$DOB ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!captWorker0_metaBram_serverAdapterB_3_s1[0] ||
	      captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     captWorker0_metaBram_serverAdapterB_3_s1[1] &&
	     captWorker0_metaBram_serverAdapterB_3_s1[0] ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h26004 ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_outData$whas =
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_2$whas =
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_3_writeWithResp$wget = 2'd0 ;
  assign captWorker0_metaBram_serverAdapterB_3_writeWithResp$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker0_metaBram_serverAdapterB_3_s1_1$wget = 2'd3 ;
  assign captWorker0_metaBram_serverAdapterB_3_s1_1$whas =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign captWorker0_wsi_Es_mCmd_w$wget = wciMonW3$pmem_MCmd ;
  assign captWorker0_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mBurstLength_w$wget = wciMonW3$pmem_MBurstLength ;
  assign captWorker0_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mData_w$wget = wciMonW3$pmem_MData ;
  assign captWorker0_wsi_Es_mData_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mByteEn_w$wget = wciMonW3$pmem_MByteEn ;
  assign captWorker0_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker0_wsi_Es_mReqInfo_w$wget = wciMonW3$pmem_MReqInfo ;
  assign captWorker0_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mCmd_w$wget = wci_s_0_MCmd ;
  assign tieOff0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddrSpace_w$wget = wci_s_0_MAddrSpace ;
  assign tieOff0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddr_w$wget = wci_s_0_MAddr ;
  assign tieOff0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mData_w$wget = wci_s_0_MData ;
  assign tieOff0_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mByteEn_w$wget = wci_s_0_MByteEn ;
  assign tieOff0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mCmd_w$wget = wci_s_1_MCmd ;
  assign tieOff1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mAddrSpace_w$wget = wci_s_1_MAddrSpace ;
  assign tieOff1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mAddr_w$wget = wci_s_1_MAddr ;
  assign tieOff1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mData_w$wget = wci_s_1_MData ;
  assign tieOff1_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mByteEn_w$wget = wci_s_1_MByteEn ;
  assign tieOff1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mCmd_w$wget = wci_s_6_MCmd ;
  assign tieOff6_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mAddrSpace_w$wget = wci_s_6_MAddrSpace ;
  assign tieOff6_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mAddr_w$wget = wci_s_6_MAddr ;
  assign tieOff6_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mData_w$wget = wci_s_6_MData ;
  assign tieOff6_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mByteEn_w$wget = wci_s_6_MByteEn ;
  assign tieOff6_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mCmd_w$wget = wci_s_7_MCmd ;
  assign tieOff7_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mAddrSpace_w$wget = wci_s_7_MAddrSpace ;
  assign tieOff7_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mAddr_w$wget = wci_s_7_MAddr ;
  assign tieOff7_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mData_w$wget = wci_s_7_MData ;
  assign tieOff7_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mByteEn_w$wget = wci_s_7_MByteEn ;
  assign tieOff7_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign captWorker0_wci_wslv_reqF_r_enq$whas =
	     captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker0_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_captWorker0_wci_cfrd ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;
  assign captWorker0_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign captWorker0_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h001 &&
	     captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h002 ||
	     WILL_FIRE_RL_captWorker0_advance_split_response ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;
  assign captWorker0_wci_wslv_respF_dequeueing$whas =
	     captWorker0_wci_wslv_respF_c_r != 2'd0 ;
  assign captWorker0_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign captWorker0_wci_wslv_wci_cfwr_pw$whas =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_reqF$D_OUT[68] &&
	     captWorker0_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign captWorker0_wci_wslv_wci_cfrd_pw$whas =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     captWorker0_wci_wslv_reqF$D_OUT[68] &&
	     captWorker0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker0_wci_wslv_wci_ctrl_pw$whas =
	     captWorker0_wci_wslv_reqF$EMPTY_N &&
	     !captWorker0_wci_wslv_reqF$D_OUT[68] &&
	     captWorker0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign captWorker0_wsiS_reqFifo_r_enq$whas =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;
  assign captWorker0_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;
  assign captWorker0_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign captWorker0_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;
  assign captWorker0_wsiS_reqFifo_doResetDeq$whas =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;
  assign captWorker0_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker0_metaBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd0 ;
  assign captWorker0_metaBram_serverAdapterA_1_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd1 ;
  assign captWorker0_metaBram_serverAdapterA_2_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd2 ;
  assign captWorker0_metaBram_serverAdapterA_3_outData_deqCalled$whas = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_captWorker0_advance_split_response &&
	     !captWorker0_splaF$D_OUT[2] &&
	     captWorker0_splaF$D_OUT[1:0] == 2'd3 ;
  assign captWorker0_wsi_Es_mReqLast_w$whas = wciMonW3$pmem_MReqLast ;
  assign captWorker0_wsi_Es_mBurstPrecise_w$whas =
	     wciMonW3$pmem_MBurstPrecise ;
  assign captWorker0_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign captWorker0_wsiS_extStatusW$wget =
	     { captWorker0_wsiS_pMesgCount,
	       captWorker0_wsiS_iMesgCount,
	       captWorker0_wsiS_tBusyCount } ;

  // register captWorker0_controlReg
  assign captWorker0_controlReg$D_IN =
	     MUX_captWorker0_controlReg$write_1__SEL_1 ?
	       captWorker0_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign captWorker0_controlReg$EN =
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;

  // register captWorker0_dataBram_serverAdapterA_cnt
  assign captWorker0_dataBram_serverAdapterA_cnt$D_IN =
	     captWorker0_dataBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_dataBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker0_dataBram_serverAdapterA_s1
  assign captWorker0_dataBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker0_dataCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker0_dataBram_serverAdapterB_cnt
  assign captWorker0_dataBram_serverAdapterB_cnt$D_IN =
	     captWorker0_dataBram_serverAdapterB_cnt_16_PLU_ETC___d322 ;
  assign captWorker0_dataBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker0_dataBram_serverAdapterB_s1
  assign captWorker0_dataBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker0_dataCount
  always@(MUX_captWorker0_dataCount$write_1__SEL_1 or
	  captWorker0_wci_wslv_reqF$D_OUT or
	  MUX_captWorker0_dataCount$write_1__SEL_2 or
	  MUX_captWorker0_dataCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker0_dataCount$write_1__SEL_1:
	captWorker0_dataCount$D_IN = captWorker0_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker0_dataCount$write_1__SEL_2:
	captWorker0_dataCount$D_IN = MUX_captWorker0_dataCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker0_wci_ctrl_EiI: captWorker0_dataCount$D_IN = 32'd0;
    default: captWorker0_dataCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker0_dataCount$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871 ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;

  // register captWorker0_isFirst
  assign captWorker0_isFirst$D_IN = 1'b0 ;
  assign captWorker0_isFirst$EN = 1'b0 ;

  // register captWorker0_mesgCount
  always@(MUX_captWorker0_mesgCount$write_1__SEL_1 or
	  captWorker0_wci_wslv_reqF$D_OUT or
	  MUX_captWorker0_mesgCount$write_1__SEL_2 or
	  MUX_captWorker0_mesgCount$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
  case (1'b1)
    MUX_captWorker0_mesgCount$write_1__SEL_1:
	captWorker0_mesgCount$D_IN = captWorker0_wci_wslv_reqF$D_OUT[31:0];
    MUX_captWorker0_mesgCount$write_1__SEL_2:
	captWorker0_mesgCount$D_IN = MUX_captWorker0_mesgCount$write_1__VAL_2;
    WILL_FIRE_RL_captWorker0_wci_ctrl_EiI: captWorker0_mesgCount$D_IN = 32'd0;
    default: captWorker0_mesgCount$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign captWorker0_mesgCount$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept &&
	     captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871 &&
	     captWorker0_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_captWorker0_wci_cfwr &&
	     captWorker0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_captWorker0_wci_ctrl_EiI ;

  // register captWorker0_mesgLengthSoFar
  assign captWorker0_mesgLengthSoFar$D_IN =
	     captWorker0_wsiS_reqFifo$D_OUT[57] ? 14'd0 : mlB__h23006 ;
  assign captWorker0_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;

  // register captWorker0_metaBram_serverAdapterA_1_cnt
  assign captWorker0_metaBram_serverAdapterA_1_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_1_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_1_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_1_s1
  assign captWorker0_metaBram_serverAdapterA_1_s1$D_IN =
	     { MUX_captWorker0_mesgCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterA_2_cnt
  assign captWorker0_metaBram_serverAdapterA_2_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_2_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_2_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_2_s1
  assign captWorker0_metaBram_serverAdapterA_2_s1$D_IN =
	     { MUX_captWorker0_mesgCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterA_3_cnt
  assign captWorker0_metaBram_serverAdapterA_3_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_3_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_3_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_3_s1
  assign captWorker0_metaBram_serverAdapterA_3_s1$D_IN =
	     { MUX_captWorker0_mesgCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterA_cnt
  assign captWorker0_metaBram_serverAdapterA_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign captWorker0_metaBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register captWorker0_metaBram_serverAdapterA_s1
  assign captWorker0_metaBram_serverAdapterA_s1$D_IN =
	     { MUX_captWorker0_mesgCount$write_1__SEL_2, 1'b0 } ;
  assign captWorker0_metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_1_cnt
  assign captWorker0_metaBram_serverAdapterB_1_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_1_cnt_52_P_ETC___d558 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;

  // register captWorker0_metaBram_serverAdapterB_1_s1
  assign captWorker0_metaBram_serverAdapterB_1_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_2_cnt
  assign captWorker0_metaBram_serverAdapterB_2_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_2_cnt_70_P_ETC___d676 ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;

  // register captWorker0_metaBram_serverAdapterB_2_s1
  assign captWorker0_metaBram_serverAdapterB_2_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_3_cnt
  assign captWorker0_metaBram_serverAdapterB_3_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_3_cnt_88_P_ETC___d794 ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register captWorker0_metaBram_serverAdapterB_3_s1
  assign captWorker0_metaBram_serverAdapterB_3_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register captWorker0_metaBram_serverAdapterB_cnt
  assign captWorker0_metaBram_serverAdapterB_cnt$D_IN =
	     captWorker0_metaBram_serverAdapterB_cnt_34_PLU_ETC___d440 ;
  assign captWorker0_metaBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ||
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register captWorker0_metaBram_serverAdapterB_s1
  assign captWorker0_metaBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign captWorker0_metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register captWorker0_splitReadInFlight
  assign captWorker0_splitReadInFlight$D_IN =
	     MUX_captWorker0_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker0_splitReadInFlight$EN =
	     WILL_FIRE_RL_captWorker0_wci_cfrd &&
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h001 ||
	      captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h002) ||
	     WILL_FIRE_RL_captWorker0_advance_split_response ;

  // register captWorker0_wci_wslv_cEdge
  assign captWorker0_wci_wslv_cEdge$D_IN =
	     captWorker0_wci_wslv_reqF$D_OUT[36:34] ;
  assign captWorker0_wci_wslv_cEdge$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;

  // register captWorker0_wci_wslv_cState
  assign captWorker0_wci_wslv_cState$D_IN = captWorker0_wci_wslv_nState ;
  assign captWorker0_wci_wslv_cState$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	     !captWorker0_wci_wslv_illegalEdge ;

  // register captWorker0_wci_wslv_ctlAckReg
  assign captWorker0_wci_wslv_ctlAckReg$D_IN =
	     captWorker0_wci_wslv_ctlAckReg_1$whas ;
  assign captWorker0_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register captWorker0_wci_wslv_ctlOpActive
  assign captWorker0_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ;
  assign captWorker0_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start ;

  // register captWorker0_wci_wslv_illegalEdge
  assign captWorker0_wci_wslv_illegalEdge$D_IN =
	     !MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_captWorker0_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign captWorker0_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	     captWorker0_wci_wslv_illegalEdge ||
	     MUX_captWorker0_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register captWorker0_wci_wslv_isReset_isInReset
  assign captWorker0_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker0_wci_wslv_isReset_isInReset$EN =
	     captWorker0_wci_wslv_isReset_isInReset ;

  // register captWorker0_wci_wslv_nState
  always@(captWorker0_wci_wslv_reqF$D_OUT)
  begin
    case (captWorker0_wci_wslv_reqF$D_OUT[36:34])
      3'd0: captWorker0_wci_wslv_nState$D_IN = 3'd1;
      3'd1: captWorker0_wci_wslv_nState$D_IN = 3'd2;
      3'd2: captWorker0_wci_wslv_nState$D_IN = 3'd3;
      default: captWorker0_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign captWorker0_wci_wslv_nState$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start &&
	     (captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      captWorker0_wci_wslv_cState == 3'd0 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (captWorker0_wci_wslv_cState == 3'd1 ||
	       captWorker0_wci_wslv_cState == 3'd3) ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      captWorker0_wci_wslv_cState == 3'd2 ||
	      captWorker0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (captWorker0_wci_wslv_cState == 3'd3 ||
	       captWorker0_wci_wslv_cState == 3'd2 ||
	       captWorker0_wci_wslv_cState == 3'd1)) ;

  // register captWorker0_wci_wslv_reqF_countReg
  assign captWorker0_wci_wslv_reqF_countReg$D_IN =
	     (captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       captWorker0_wci_wslv_reqF_countReg + 2'd1 :
	       captWorker0_wci_wslv_reqF_countReg - 2'd1 ;
  assign captWorker0_wci_wslv_reqF_countReg$EN =
	     (captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     captWorker0_wci_wslv_reqF_r_deq$whas ;

  // register captWorker0_wci_wslv_respF_c_r
  assign captWorker0_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr ?
	       MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_captWorker0_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign captWorker0_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr ;

  // register captWorker0_wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_captWorker0_wci_wslv_respF_both or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr or
	  captWorker0_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_both:
	  captWorker0_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_captWorker0_wci_wslv_respF_q_0$write_1__SEL_2:
	  captWorker0_wci_wslv_respF_q_0$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr:
	  captWorker0_wci_wslv_respF_q_0$D_IN =
	      captWorker0_wci_wslv_respF_q_1;
      default: captWorker0_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker0_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr ;

  // register captWorker0_wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_captWorker0_wci_wslv_respF_both or
	  MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_both:
	  captWorker0_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_captWorker0_wci_wslv_respF_q_1$write_1__SEL_2:
	  captWorker0_wci_wslv_respF_q_1$D_IN =
	      MUX_captWorker0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr:
	  captWorker0_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: captWorker0_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign captWorker0_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_incCtr &&
	     captWorker0_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_captWorker0_wci_wslv_respF_decCtr ;

  // register captWorker0_wci_wslv_sFlagReg
  assign captWorker0_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign captWorker0_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register captWorker0_wci_wslv_sThreadBusy_d
  assign captWorker0_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign captWorker0_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register captWorker0_wsiS_burstKind
  assign captWorker0_wsiS_burstKind$D_IN =
	     (captWorker0_wsiS_burstKind == 2'd0) ?
	       (captWorker0_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign captWorker0_wsiS_burstKind$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     (captWorker0_wsiS_burstKind == 2'd0 ||
	      (captWorker0_wsiS_burstKind == 2'd1 ||
	       captWorker0_wsiS_burstKind == 2'd2) &&
	      captWorker0_wsiS_wsiReq$wget[57]) ;

  // register captWorker0_wsiS_errorSticky
  assign captWorker0_wsiS_errorSticky$D_IN = 1'b0 ;
  assign captWorker0_wsiS_errorSticky$EN = 1'b0 ;

  // register captWorker0_wsiS_iMesgCount
  assign captWorker0_wsiS_iMesgCount$D_IN =
	     captWorker0_wsiS_iMesgCount + 32'd1 ;
  assign captWorker0_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     captWorker0_wsiS_burstKind == 2'd2 &&
	     captWorker0_wsiS_wsiReq$wget[57] ;

  // register captWorker0_wsiS_isReset_isInReset
  assign captWorker0_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign captWorker0_wsiS_isReset_isInReset$EN =
	     captWorker0_wsiS_isReset_isInReset ;

  // register captWorker0_wsiS_mesgWordLength
  assign captWorker0_wsiS_mesgWordLength$D_IN = captWorker0_wsiS_wordCount ;
  assign captWorker0_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     captWorker0_wsiS_wsiReq$wget[57] ;

  // register captWorker0_wsiS_operateD
  assign captWorker0_wsiS_operateD$D_IN =
	     captWorker0_wci_wslv_cState == 3'd2 ;
  assign captWorker0_wsiS_operateD$EN = 1'd1 ;

  // register captWorker0_wsiS_pMesgCount
  assign captWorker0_wsiS_pMesgCount$D_IN =
	     captWorker0_wsiS_pMesgCount + 32'd1 ;
  assign captWorker0_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq &&
	     captWorker0_wsiS_burstKind == 2'd1 &&
	     captWorker0_wsiS_wsiReq$wget[57] ;

  // register captWorker0_wsiS_peerIsReady
  assign captWorker0_wsiS_peerIsReady$D_IN = wciMonW3$pmem_MReset_n ;
  assign captWorker0_wsiS_peerIsReady$EN = 1'd1 ;

  // register captWorker0_wsiS_reqFifo_countReg
  assign captWorker0_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ?
	       captWorker0_wsiS_reqFifo_countReg + 2'd1 :
	       captWorker0_wsiS_reqFifo_countReg - 2'd1 ;
  assign captWorker0_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq !=
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;

  // register captWorker0_wsiS_reqFifo_levelsValid
  assign captWorker0_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset ;
  assign captWorker0_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ||
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_reset ;

  // register captWorker0_wsiS_statusR
  assign captWorker0_wsiS_statusR$D_IN =
	     { captWorker0_wsiS_isReset_isInReset,
	       !captWorker0_wsiS_peerIsReady,
	       !captWorker0_wsiS_operateD,
	       captWorker0_wsiS_errorSticky,
	       captWorker0_wsiS_burstKind != 2'd0,
	       !captWorker0_wsiS_sThreadBusy_dw$whas ||
	       captWorker0_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       captWorker0_wsiS_trafficSticky } ;
  assign captWorker0_wsiS_statusR$EN = 1'd1 ;

  // register captWorker0_wsiS_tBusyCount
  assign captWorker0_wsiS_tBusyCount$D_IN =
	     captWorker0_wsiS_tBusyCount + 32'd1 ;
  assign captWorker0_wsiS_tBusyCount$EN =
	     captWorker0_wsiS_operateD && captWorker0_wsiS_peerIsReady &&
	     (!captWorker0_wsiS_sThreadBusy_dw$whas ||
	      captWorker0_wsiS_sThreadBusy_dw$wget) ;

  // register captWorker0_wsiS_trafficSticky
  assign captWorker0_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign captWorker0_wsiS_trafficSticky$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;

  // register captWorker0_wsiS_wordCount
  assign captWorker0_wsiS_wordCount$D_IN =
	     captWorker0_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       captWorker0_wsiS_wordCount + 12'd1 ;
  assign captWorker0_wsiS_wordCount$EN =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;

  // submodule appW2
  assign appW2$wciS0_MAddr = wci_s_2_MAddr ;
  assign appW2$wciS0_MAddrSpace = wci_s_2_MAddrSpace ;
  assign appW2$wciS0_MByteEn = wci_s_2_MByteEn ;
  assign appW2$wciS0_MCmd = wci_s_2_MCmd ;
  assign appW2$wciS0_MData = wci_s_2_MData ;
  assign appW2$wciS0_MFlag = wci_s_2_MFlag ;
  assign appW2$wmiM0_SData = wmiM0_SData ;
  assign appW2$wmiM0_SFlag = wmiM0_SFlag ;
  assign appW2$wmiM0_SResp = wmiM0_SResp ;
  assign appW2$wsiS0_MBurstLength = wsi_s_adc_MBurstLength ;
  assign appW2$wsiS0_MByteEn = wsi_s_adc_MByteEn ;
  assign appW2$wsiS0_MCmd = wsi_s_adc_MCmd ;
  assign appW2$wsiS0_MData = wsi_s_adc_MData ;
  assign appW2$wsiS0_MReqInfo = wsi_s_adc_MReqInfo ;
  assign appW2$wmiM0_SThreadBusy = wmiM0_SThreadBusy ;
  assign appW2$wmiM0_SDataThreadBusy = wmiM0_SDataThreadBusy ;
  assign appW2$wmiM0_SRespLast = wmiM0_SRespLast ;
  assign appW2$wmiM0_SReset_n = wmiM0_SReset_n ;
  assign appW2$wsiM0_SThreadBusy = appW3$wsiS0_SThreadBusy ;
  assign appW2$wsiM0_SReset_n = appW3$wsiS0_SReset_n ;
  assign appW2$wsiS0_MReqLast = wsi_s_adc_MReqLast ;
  assign appW2$wsiS0_MBurstPrecise = wsi_s_adc_MBurstPrecise ;
  assign appW2$wsiS0_MReset_n = wsi_s_adc_MReset_n ;

  // submodule appW3
  assign appW3$wciS0_MAddr = wci_s_3_MAddr ;
  assign appW3$wciS0_MAddrSpace = wci_s_3_MAddrSpace ;
  assign appW3$wciS0_MByteEn = wci_s_3_MByteEn ;
  assign appW3$wciS0_MCmd = wci_s_3_MCmd ;
  assign appW3$wciS0_MData = wci_s_3_MData ;
  assign appW3$wciS0_MFlag = wci_s_3_MFlag ;
  assign appW3$wsiS0_MBurstLength = appW2$wsiM0_MBurstLength ;
  assign appW3$wsiS0_MByteEn = appW2$wsiM0_MByteEn ;
  assign appW3$wsiS0_MCmd = appW2$wsiM0_MCmd ;
  assign appW3$wsiS0_MData = appW2$wsiM0_MData ;
  assign appW3$wsiS0_MReqInfo = appW2$wsiM0_MReqInfo ;
  assign appW3$wsiS0_MReqLast = appW2$wsiM0_MReqLast ;
  assign appW3$wsiS0_MBurstPrecise = appW2$wsiM0_MBurstPrecise ;
  assign appW3$wsiS0_MReset_n = appW2$wsiM0_MReset_n ;
  assign appW3$wsiM0_SThreadBusy = appW4$wsiS0_SThreadBusy ;
  assign appW3$wsiM0_SReset_n = appW4$wsiS0_SReset_n ;

  // submodule appW4
  assign appW4$wciS0_MAddr = wci_s_4_MAddr ;
  assign appW4$wciS0_MAddrSpace = wci_s_4_MAddrSpace ;
  assign appW4$wciS0_MByteEn = wci_s_4_MByteEn ;
  assign appW4$wciS0_MCmd = wci_s_4_MCmd ;
  assign appW4$wciS0_MData = wci_s_4_MData ;
  assign appW4$wciS0_MFlag = wci_s_4_MFlag ;
  assign appW4$wmiM0_SData = wmiM1_SData ;
  assign appW4$wmiM0_SFlag = wmiM1_SFlag ;
  assign appW4$wmiM0_SResp = wmiM1_SResp ;
  assign appW4$wsiS0_MBurstLength = appW3$wsiM0_MBurstLength ;
  assign appW4$wsiS0_MByteEn = appW3$wsiM0_MByteEn ;
  assign appW4$wsiS0_MCmd = appW3$wsiM0_MCmd ;
  assign appW4$wsiS0_MData = appW3$wsiM0_MData ;
  assign appW4$wsiS0_MReqInfo = appW3$wsiM0_MReqInfo ;
  assign appW4$wmiM0_SThreadBusy = wmiM1_SThreadBusy ;
  assign appW4$wmiM0_SDataThreadBusy = wmiM1_SDataThreadBusy ;
  assign appW4$wmiM0_SRespLast = wmiM1_SRespLast ;
  assign appW4$wmiM0_SReset_n = wmiM1_SReset_n ;
  assign appW4$wsiM0_SThreadBusy = wsi_m_dac_SThreadBusy ;
  assign appW4$wsiM0_SReset_n = wsi_m_dac_SReset_n ;
  assign appW4$wsiS0_MReqLast = appW3$wsiM0_MReqLast ;
  assign appW4$wsiS0_MBurstPrecise = appW3$wsiM0_MBurstPrecise ;
  assign appW4$wsiS0_MReset_n = appW3$wsiM0_MReset_n ;

  // submodule captWorker0_dataBram_memory
  assign captWorker0_dataBram_memory$ADDRA = captWorker0_dataCount[9:0] ;
  assign captWorker0_dataBram_memory$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[43:34] ;
  assign captWorker0_dataBram_memory$DIA =
	     captWorker0_wsiS_reqFifo$D_OUT[43:12] ;
  assign captWorker0_dataBram_memory$DIB = 32'd0 ;
  assign captWorker0_dataBram_memory$WEA = 1'd1 ;
  assign captWorker0_dataBram_memory$WEB = 1'd0 ;
  assign captWorker0_dataBram_memory$ENA =
	     MUX_captWorker0_dataCount$write_1__SEL_2 ;
  assign captWorker0_dataBram_memory$ENB =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker0_dataBram_serverAdapterA_outDataCore
  assign captWorker0_dataBram_serverAdapterA_outDataCore$D_IN =
	     captWorker0_dataBram_memory$DOA ;
  assign captWorker0_dataBram_serverAdapterA_outDataCore$ENQ =
	     captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_dataBram_serverAdapterB_outDataCore
  assign captWorker0_dataBram_serverAdapterB_outDataCore$D_IN =
	     captWorker0_dataBram_memory$DOB ;
  assign captWorker0_dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_memory
  assign captWorker0_metaBram_memory$ADDRA = captWorker0_mesgCount[9:0] ;
  assign captWorker0_metaBram_memory$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory$DIA = { 18'd0, mlB__h23006 } ;
  assign captWorker0_metaBram_memory$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory$ENA =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_memory_1
  assign captWorker0_metaBram_memory_1$ADDRA = captWorker0_mesgCount[9:0] ;
  assign captWorker0_metaBram_memory_1$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory_1$DIA =
	     { 24'd0, captWorker0_wsiS_reqFifo$D_OUT[7:0] } ;
  assign captWorker0_metaBram_memory_1$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory_1$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory_1$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory_1$ENA =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory_1$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_memory_2
  assign captWorker0_metaBram_memory_2$ADDRA = captWorker0_mesgCount[9:0] ;
  assign captWorker0_metaBram_memory_2$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory_2$DIA = 32'b0 ;
  assign captWorker0_metaBram_memory_2$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory_2$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory_2$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory_2$ENA =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory_2$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_memory_3
  assign captWorker0_metaBram_memory_3$ADDRA = captWorker0_mesgCount[9:0] ;
  assign captWorker0_metaBram_memory_3$ADDRB =
	     captWorker0_wci_wslv_reqF$D_OUT[45:36] ;
  assign captWorker0_metaBram_memory_3$DIA = 32'b0 ;
  assign captWorker0_metaBram_memory_3$DIB = 32'd0 ;
  assign captWorker0_metaBram_memory_3$WEA = 1'd1 ;
  assign captWorker0_metaBram_memory_3$WEB = 1'd0 ;
  assign captWorker0_metaBram_memory_3$ENA =
	     MUX_captWorker0_mesgCount$write_1__SEL_2 ;
  assign captWorker0_metaBram_memory_3$ENB =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ;

  // submodule captWorker0_metaBram_serverAdapterA_1_outDataCore
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$D_IN =
	     captWorker0_metaBram_memory_1$DOA ;
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterA_2_outDataCore
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$D_IN =
	     captWorker0_metaBram_memory_2$DOA ;
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterA_3_outDataCore
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$D_IN =
	     captWorker0_metaBram_memory_3$DOA ;
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterA_outDataCore
  assign captWorker0_metaBram_serverAdapterA_outDataCore$D_IN =
	     captWorker0_metaBram_memory$DOA ;
  assign captWorker0_metaBram_serverAdapterA_outDataCore$ENQ =
	     captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     captWorker0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign captWorker0_metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_1_outDataCore
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$D_IN =
	     captWorker0_metaBram_memory_1$DOB ;
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     !captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_2_outDataCore
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$D_IN =
	     captWorker0_metaBram_memory_2$DOB ;
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     !captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_3_outDataCore
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$D_IN =
	     captWorker0_metaBram_memory_3$DOB ;
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_metaBram_serverAdapterB_outDataCore
  assign captWorker0_metaBram_serverAdapterB_outDataCore$D_IN =
	     captWorker0_metaBram_memory$DOB ;
  assign captWorker0_metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !captWorker0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign captWorker0_metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule captWorker0_splaF
  assign captWorker0_splaF$D_IN =
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h001) ?
	       3'd4 :
	       { 1'd0, captWorker0_wci_wslv_reqF$D_OUT[35:34] } ;
  assign captWorker0_splaF$ENQ =
	     MUX_captWorker0_splitReadInFlight$write_1__SEL_1 ;
  assign captWorker0_splaF$DEQ =
	     WILL_FIRE_RL_captWorker0_advance_split_response ;
  assign captWorker0_splaF$CLR = 1'b0 ;

  // submodule captWorker0_wci_wslv_reqF
  assign captWorker0_wci_wslv_reqF$D_IN = captWorker0_wci_wslv_wciReq$wget ;
  assign captWorker0_wci_wslv_reqF$ENQ =
	     captWorker0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign captWorker0_wci_wslv_reqF$DEQ =
	     captWorker0_wci_wslv_reqF_r_deq$whas ;
  assign captWorker0_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule captWorker0_wsiS_reqFifo
  assign captWorker0_wsiS_reqFifo$D_IN = captWorker0_wsiS_wsiReq$wget ;
  assign captWorker0_wsiS_reqFifo$ENQ =
	     WILL_FIRE_RL_captWorker0_wsiS_reqFifo_enq ;
  assign captWorker0_wsiS_reqFifo$DEQ =
	     WILL_FIRE_RL_captWorker0_doMessageAccept ;
  assign captWorker0_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule wciMonW3
  assign wciMonW3$observe_MAddr = 32'h0 ;
  assign wciMonW3$observe_MAddrSpace = 1'b0 ;
  assign wciMonW3$observe_MByteEn = 4'h0 ;
  assign wciMonW3$observe_MCmd = 3'h0 ;
  assign wciMonW3$observe_MData = 32'h0 ;
  assign wciMonW3$observe_MFlag = 2'h0 ;
  assign wciMonW3$observe_MReset_n = 1'b0 ;
  assign wciMonW3$observe_SData = 32'h0 ;
  assign wciMonW3$observe_SFlag = 2'h0 ;
  assign wciMonW3$observe_SResp = 2'h0 ;
  assign wciMonW3$observe_SThreadBusy = 1'b0 ;
  assign wciMonW3$pmem_SThreadBusy =
	     !captWorker0_wsiS_sThreadBusy_dw$whas ||
	     captWorker0_wsiS_sThreadBusy_dw$wget ;
  assign wciMonW3$pmem_SReset_n =
	     !captWorker0_wsiS_isReset_isInReset &&
	     captWorker0_wsiS_operateD ;

  // remaining internal signals
  assign IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d918 =
	     IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d909 &&
	     CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q1 ;
  assign IF_captWorker0_wci_wslv_reqF_first__5_BITS_63__ETC___d980 =
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h001) ?
	       (captWorker0_dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	       captWorker0_splaF$FULL_N :
	       captWorker0_wci_wslv_reqF$D_OUT[63:52] != 12'h002 ||
	       captWorker0_splaF$FULL_N &&
	       IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d977 ;
  assign NOT_captWorker0_controlReg_23_BIT_0_24_25_OR_c_ETC___d849 =
	     !captWorker0_controlReg[0] ||
	     captWorker0_controlReg[1] &&
	     !captWorker0_mesgCount_27_ULT_1024___d828 &&
	     !captWorker0_dataCount_30_ULT_1024___d831 ||
	     (captWorker0_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!captWorker0_wsiS_reqFifo$D_OUT[57] ||
	      (captWorker0_metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker0_metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker0_metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	      (captWorker0_metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7) ;
  assign captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871 =
	     captWorker0_controlReg[0] &&
	     (!captWorker0_controlReg[1] ||
	      captWorker0_mesgCount_27_ULT_1024___d828 ||
	      captWorker0_dataCount_30_ULT_1024___d831) ;
  assign captWorker0_dataBram_serverAdapterB_cnt_16_PLU_ETC___d322 =
	     captWorker0_dataBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker0_dataBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_dataBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_dataCount_30_ULT_1024___d831 =
	     captWorker0_dataCount < 32'd1024 ;
  assign captWorker0_mesgCount_27_ULT_1024___d828 =
	     captWorker0_mesgCount < 32'd1024 ;
  assign captWorker0_metaBram_serverAdapterB_1_cnt_52_P_ETC___d558 =
	     captWorker0_metaBram_serverAdapterB_1_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_metaBram_serverAdapterB_2_cnt_70_P_ETC___d676 =
	     captWorker0_metaBram_serverAdapterB_2_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_2_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_metaBram_serverAdapterB_3_cnt_88_P_ETC___d794 =
	     captWorker0_metaBram_serverAdapterB_3_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_3_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_metaBram_serverAdapterB_cnt_34_PLU_ETC___d440 =
	     captWorker0_metaBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_captWorker0_metaBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (captWorker0_metaBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign captWorker0_splaF_i_notEmpty__87_AND_IF_captWo_ETC___d920 =
	     captWorker0_splaF$EMPTY_N &&
	     (captWorker0_splaF$D_OUT[2] ?
		(captWorker0_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 captWorker0_dataBram_serverAdapterB_outData_enqData$whas) &&
		(captWorker0_splaF$D_OUT[1:0] != 2'd0 ||
		 captWorker0_dataBram_serverAdapterB_outData_outData$whas) :
		IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d918) ;
  assign g_data__h27626 =
	     (captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h0) ?
	       v__h26599 :
	       32'd0 ;
  assign mlB__h23006 = captWorker0_mesgLengthSoFar + mlInc__h23005 ;
  assign mlInc__h23005 =
	     captWorker0_wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h23054 + y__h23055 } :
	       14'd4 ;
  assign rdat___1__h26721 = { 24'd0, captWorker0_wsiS_statusR } ;
  assign v__h25213 =
	     captWorker0_splaF$D_OUT[2] ?
	       y_avValue__h25840 :
	       IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d942 ;
  assign x__h23054 = x__h23066 + y__h23067 ;
  assign x__h23066 = x__h23078 + y__h23079 ;
  assign x__h23078 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[11] } ;
  assign y__h23055 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[8] } ;
  assign y__h23067 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[9] } ;
  assign y__h23079 = { 2'd0, captWorker0_wsiS_reqFifo$D_OUT[10] } ;
  assign y_avValue__h25840 =
	     captWorker0_dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker0_dataBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker0_dataBram_memory$DOB ;
  assign y_avValue__h25884 =
	     captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_outDataCore$D_OUT :
	       captWorker0_metaBram_memory$DOB ;
  assign y_avValue__h25924 =
	     captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_1$DOB ;
  assign y_avValue__h25964 =
	     captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_2$DOB ;
  assign y_avValue__h26004 =
	     captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       captWorker0_metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       captWorker0_metaBram_memory_3$DOB ;
  always@(captWorker0_wci_wslv_reqF$D_OUT or
	  captWorker0_metaBram_serverAdapterB_3_cnt or
	  captWorker0_metaBram_serverAdapterB_cnt or
	  captWorker0_metaBram_serverAdapterB_1_cnt or
	  captWorker0_metaBram_serverAdapterB_2_cnt)
  begin
    case (captWorker0_wci_wslv_reqF$D_OUT[35:34])
      2'd0:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d977 =
	      (captWorker0_metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7;
      2'd1:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d977 =
	      (captWorker0_metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7;
      2'd2:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d977 =
	      (captWorker0_metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7;
      2'd3:
	  IF_captWorker0_wci_wslv_reqF_first__5_BITS_35__ETC___d977 =
	      captWorker0_wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	      (captWorker0_metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7;
    endcase
  end
  always@(captWorker0_splaF$D_OUT or
	  y_avValue__h26004 or
	  y_avValue__h25884 or y_avValue__h25924 or y_avValue__h25964)
  begin
    case (captWorker0_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d942 =
	      y_avValue__h25884;
      2'd1:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d942 =
	      y_avValue__h25924;
      2'd2:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d942 =
	      y_avValue__h25964;
      2'd3:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d942 =
	      y_avValue__h26004;
    endcase
  end
  always@(captWorker0_wci_wslv_reqF$D_OUT or
	  captWorker0_controlReg or
	  captWorker0_mesgCount or
	  captWorker0_dataCount or
	  rdat___1__h26721 or captWorker0_wsiS_extStatusW$wget)
  begin
    case (captWorker0_wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h26599 = captWorker0_controlReg;
      8'h04: v__h26599 = captWorker0_mesgCount;
      8'h08: v__h26599 = captWorker0_dataCount;
      8'h10: v__h26599 = 32'd2361866;
      8'h1C: v__h26599 = 32'hFEEDC0DE;
      8'h20: v__h26599 = rdat___1__h26721;
      8'h24: v__h26599 = captWorker0_wsiS_extStatusW$wget[95:64];
      8'h28: v__h26599 = captWorker0_wsiS_extStatusW$wget[63:32];
      8'h2C: v__h26599 = captWorker0_wsiS_extStatusW$wget[31:0];
      default: v__h26599 = 32'd0;
    endcase
  end
  always@(captWorker0_splaF$D_OUT or
	  captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas or
	  captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_outData_enqData$whas or
	  captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas or
	  captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (captWorker0_splaF$D_OUT[1:0])
      2'd0:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d909 =
	      captWorker0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d909 =
	      captWorker0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d909 =
	      captWorker0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_captWorker0_splaF_first__88_BITS_1_TO_0_90__ETC___d909 =
	      captWorker0_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      captWorker0_metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(captWorker0_splaF$D_OUT or
	  captWorker0_metaBram_serverAdapterB_3_outData_outData$whas or
	  captWorker0_metaBram_serverAdapterB_outData_outData$whas or
	  captWorker0_metaBram_serverAdapterB_1_outData_outData$whas or
	  captWorker0_metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (captWorker0_splaF$D_OUT[1:0])
      2'd0:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q1 =
	      captWorker0_metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q1 =
	      captWorker0_metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q1 =
	      captWorker0_metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_captWorker0_splaFD_OUT_BITS_1_TO_0_NOT_c_ETC__q1 =
	      captWorker0_splaF$D_OUT[1:0] != 2'd3 ||
	      captWorker0_metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N_rst_5)
      begin
        captWorker0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	captWorker0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	captWorker0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	captWorker0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	captWorker0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	captWorker0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	captWorker0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	captWorker0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	captWorker0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	captWorker0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	captWorker0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (captWorker0_dataBram_serverAdapterA_cnt$EN)
	  captWorker0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterA_cnt$D_IN;
	if (captWorker0_dataBram_serverAdapterA_s1$EN)
	  captWorker0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterA_s1$D_IN;
	if (captWorker0_dataBram_serverAdapterB_cnt$EN)
	  captWorker0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterB_cnt$D_IN;
	if (captWorker0_dataBram_serverAdapterB_s1$EN)
	  captWorker0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_dataBram_serverAdapterB_s1$D_IN;
	if (captWorker0_isFirst$EN)
	  captWorker0_isFirst <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_isFirst$D_IN;
	if (captWorker0_mesgLengthSoFar$EN)
	  captWorker0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_mesgLengthSoFar$D_IN;
	if (captWorker0_metaBram_serverAdapterA_1_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_1_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_1_s1$EN)
	  captWorker0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_1_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterA_2_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_2_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_2_s1$EN)
	  captWorker0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_2_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterA_3_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_3_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_3_s1$EN)
	  captWorker0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_3_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterA_cnt$EN)
	  captWorker0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterA_s1$EN)
	  captWorker0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterA_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_1_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_1_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_1_s1$EN)
	  captWorker0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_1_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_2_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_2_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_2_s1$EN)
	  captWorker0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_2_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_3_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_3_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_3_s1$EN)
	  captWorker0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_3_s1$D_IN;
	if (captWorker0_metaBram_serverAdapterB_cnt$EN)
	  captWorker0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_cnt$D_IN;
	if (captWorker0_metaBram_serverAdapterB_s1$EN)
	  captWorker0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_metaBram_serverAdapterB_s1$D_IN;
	if (captWorker0_splitReadInFlight$EN)
	  captWorker0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_splitReadInFlight$D_IN;
	if (captWorker0_wci_wslv_cEdge$EN)
	  captWorker0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_cEdge$D_IN;
	if (captWorker0_wci_wslv_cState$EN)
	  captWorker0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_cState$D_IN;
	if (captWorker0_wci_wslv_ctlAckReg$EN)
	  captWorker0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_ctlAckReg$D_IN;
	if (captWorker0_wci_wslv_ctlOpActive$EN)
	  captWorker0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_ctlOpActive$D_IN;
	if (captWorker0_wci_wslv_illegalEdge$EN)
	  captWorker0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_illegalEdge$D_IN;
	if (captWorker0_wci_wslv_nState$EN)
	  captWorker0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_nState$D_IN;
	if (captWorker0_wci_wslv_reqF_countReg$EN)
	  captWorker0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_reqF_countReg$D_IN;
	if (captWorker0_wci_wslv_respF_c_r$EN)
	  captWorker0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_respF_c_r$D_IN;
	if (captWorker0_wci_wslv_respF_q_0$EN)
	  captWorker0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_respF_q_0$D_IN;
	if (captWorker0_wci_wslv_respF_q_1$EN)
	  captWorker0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_respF_q_1$D_IN;
	if (captWorker0_wci_wslv_sFlagReg$EN)
	  captWorker0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_sFlagReg$D_IN;
	if (captWorker0_wci_wslv_sThreadBusy_d$EN)
	  captWorker0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wci_wslv_sThreadBusy_d$D_IN;
	if (captWorker0_wsiS_burstKind$EN)
	  captWorker0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_burstKind$D_IN;
	if (captWorker0_wsiS_errorSticky$EN)
	  captWorker0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_errorSticky$D_IN;
	if (captWorker0_wsiS_iMesgCount$EN)
	  captWorker0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_iMesgCount$D_IN;
	if (captWorker0_wsiS_operateD$EN)
	  captWorker0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_operateD$D_IN;
	if (captWorker0_wsiS_pMesgCount$EN)
	  captWorker0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_pMesgCount$D_IN;
	if (captWorker0_wsiS_peerIsReady$EN)
	  captWorker0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_peerIsReady$D_IN;
	if (captWorker0_wsiS_reqFifo_countReg$EN)
	  captWorker0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_reqFifo_countReg$D_IN;
	if (captWorker0_wsiS_reqFifo_levelsValid$EN)
	  captWorker0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_reqFifo_levelsValid$D_IN;
	if (captWorker0_wsiS_tBusyCount$EN)
	  captWorker0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_tBusyCount$D_IN;
	if (captWorker0_wsiS_trafficSticky$EN)
	  captWorker0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_trafficSticky$D_IN;
	if (captWorker0_wsiS_wordCount$EN)
	  captWorker0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      captWorker0_wsiS_wordCount$D_IN;
      end
    if (captWorker0_controlReg$EN)
      captWorker0_controlReg <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_controlReg$D_IN;
    if (captWorker0_dataCount$EN)
      captWorker0_dataCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_dataCount$D_IN;
    if (captWorker0_mesgCount$EN)
      captWorker0_mesgCount <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_mesgCount$D_IN;
    if (captWorker0_wsiS_mesgWordLength$EN)
      captWorker0_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_wsiS_mesgWordLength$D_IN;
    if (captWorker0_wsiS_statusR$EN)
      captWorker0_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  captWorker0_wsiS_statusR$D_IN;
  end

  always@(posedge CLK or negedge RST_N_rst_5)
  if (!RST_N_rst_5)
    begin
      captWorker0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      captWorker0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (captWorker0_wci_wslv_isReset_isInReset$EN)
	captWorker0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker0_wci_wslv_isReset_isInReset$D_IN;
      if (captWorker0_wsiS_isReset_isInReset$EN)
	captWorker0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    captWorker0_wsiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    captWorker0_controlReg = 32'hAAAAAAAA;
    captWorker0_dataBram_serverAdapterA_cnt = 3'h2;
    captWorker0_dataBram_serverAdapterA_s1 = 2'h2;
    captWorker0_dataBram_serverAdapterB_cnt = 3'h2;
    captWorker0_dataBram_serverAdapterB_s1 = 2'h2;
    captWorker0_dataCount = 32'hAAAAAAAA;
    captWorker0_isFirst = 1'h0;
    captWorker0_mesgCount = 32'hAAAAAAAA;
    captWorker0_mesgLengthSoFar = 14'h2AAA;
    captWorker0_metaBram_serverAdapterA_1_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_1_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterA_2_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_2_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterA_3_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_3_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterA_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterA_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_1_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_1_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_2_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_2_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_3_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_3_s1 = 2'h2;
    captWorker0_metaBram_serverAdapterB_cnt = 3'h2;
    captWorker0_metaBram_serverAdapterB_s1 = 2'h2;
    captWorker0_splitReadInFlight = 1'h0;
    captWorker0_wci_wslv_cEdge = 3'h2;
    captWorker0_wci_wslv_cState = 3'h2;
    captWorker0_wci_wslv_ctlAckReg = 1'h0;
    captWorker0_wci_wslv_ctlOpActive = 1'h0;
    captWorker0_wci_wslv_illegalEdge = 1'h0;
    captWorker0_wci_wslv_isReset_isInReset = 1'h0;
    captWorker0_wci_wslv_nState = 3'h2;
    captWorker0_wci_wslv_reqF_countReg = 2'h2;
    captWorker0_wci_wslv_respF_c_r = 2'h2;
    captWorker0_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    captWorker0_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    captWorker0_wci_wslv_sFlagReg = 1'h0;
    captWorker0_wci_wslv_sThreadBusy_d = 1'h0;
    captWorker0_wsiS_burstKind = 2'h2;
    captWorker0_wsiS_errorSticky = 1'h0;
    captWorker0_wsiS_iMesgCount = 32'hAAAAAAAA;
    captWorker0_wsiS_isReset_isInReset = 1'h0;
    captWorker0_wsiS_mesgWordLength = 12'hAAA;
    captWorker0_wsiS_operateD = 1'h0;
    captWorker0_wsiS_pMesgCount = 32'hAAAAAAAA;
    captWorker0_wsiS_peerIsReady = 1'h0;
    captWorker0_wsiS_reqFifo_countReg = 2'h2;
    captWorker0_wsiS_reqFifo_levelsValid = 1'h0;
    captWorker0_wsiS_statusR = 8'hAA;
    captWorker0_wsiS_tBusyCount = 32'hAAAAAAAA;
    captWorker0_wsiS_trafficSticky = 1'h0;
    captWorker0_wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start)
	begin
	  v__h4105 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h4105,
		 captWorker0_wci_wslv_reqF$D_OUT[36:34],
		 captWorker0_wci_wslv_cState);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_ctrl_EiI] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_ctrl_EiI &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_ctrl_EiI] and\n  [RL_captWorker0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_ctrl_IsO &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_ctrl_IsO] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h26618 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  captWorker0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h26618,
		 captWorker0_wci_wslv_reqF$D_OUT[63:32],
		 captWorker0_wci_wslv_reqF$D_OUT[67:64],
		 v__h26599);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_doMessageAccept &&
	  captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871 &&
	  captWorker0_wsiS_reqFifo$D_OUT[57])
	begin
	  v__h25124 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_doMessageAccept &&
	  captWorker0_controlReg_23_BIT_0_24_AND_NOT_cap_ETC___d871 &&
	  captWorker0_wsiS_reqFifo$D_OUT[57])
	$display("[%0d]: %m: doMessageAccept DWM mesgCount:%0x WSI opcode:%0x length:%0x",
		 v__h25124,
		 captWorker0_mesgCount,
		 captWorker0_wsiS_reqFifo$D_OUT[7:0],
		 mlB__h23006);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr)
	begin
	  v__h26415 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h26415,
		 captWorker0_wci_wslv_reqF$D_OUT[63:32],
		 captWorker0_wci_wslv_reqF$D_OUT[67:64],
		 captWorker0_wci_wslv_reqF$D_OUT[31:0]);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  captWorker0_wci_wslv_illegalEdge)
	begin
	  v__h4423 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  captWorker0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h4423,
		 captWorker0_wci_wslv_cEdge,
		 captWorker0_wci_wslv_cState);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  !captWorker0_wci_wslv_illegalEdge)
	begin
	  v__h4279 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_wslv_ctl_op_complete &&
	  !captWorker0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h4279,
		 captWorker0_wci_wslv_cEdge,
		 captWorker0_wci_wslv_cState,
		 captWorker0_wci_wslv_nState);
    if (RST_N_rst_5)
      if (captWorker0_dataBram_serverAdapterA_s1[1] &&
	  !captWorker0_dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_dataBram_serverAdapterB_s1[1] &&
	  !captWorker0_dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_1_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_1_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_2_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_2_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterA_3_s1[1] &&
	  !captWorker0_metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (captWorker0_metaBram_serverAdapterB_3_s1[1] &&
	  !captWorker0_metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response)
	begin
	  v__h26132 = $time;
	  #0;
	end
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h26132, v__h25213);
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker0_advance_split_response] and [RL_captWorker0_wci_ctrl_OrE] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker0_advance_split_response] and [RL_captWorker0_wci_ctrl_IsO] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_advance_split_response &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_captWorker0_advance_split_response] and [RL_captWorker0_wci_ctrl_EiI] )\n  fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfwr &&
	  WILL_FIRE_RL_captWorker0_wci_cfrd)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfwr] and\n  [RL_captWorker0_wci_cfrd] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_advance_split_response] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (RST_N_rst_5)
      if (WILL_FIRE_RL_captWorker0_wci_cfrd &&
	  WILL_FIRE_RL_captWorker0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 135, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_captWorker0_wci_cfrd] and\n  [RL_captWorker0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkOCApp4B

