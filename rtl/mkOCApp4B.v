//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Sat Nov 13 15:42:26 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// wci_s_0_SResp                  O     2 const
// wci_s_0_SData                  O    32 const
// wci_s_0_SThreadBusy            O     1 const
// wci_s_0_SFlag                  O     2 const
// wci_s_1_SResp                  O     2 const
// wci_s_1_SData                  O    32 const
// wci_s_1_SThreadBusy            O     1 const
// wci_s_1_SFlag                  O     2 const
// wci_s_2_SResp                  O     2 reg
// wci_s_2_SData                  O    32 reg
// wci_s_2_SThreadBusy            O     1
// wci_s_2_SFlag                  O     2
// wci_s_3_SResp                  O     2 reg
// wci_s_3_SData                  O    32 reg
// wci_s_3_SThreadBusy            O     1
// wci_s_3_SFlag                  O     2
// wci_s_4_SResp                  O     2 reg
// wci_s_4_SData                  O    32 reg
// wci_s_4_SThreadBusy            O     1
// wci_s_4_SFlag                  O     2
// wci_s_5_SResp                  O     2 const
// wci_s_5_SData                  O    32 const
// wci_s_5_SThreadBusy            O     1 const
// wci_s_5_SFlag                  O     2 const
// wci_s_6_SResp                  O     2 const
// wci_s_6_SData                  O    32 const
// wci_s_6_SThreadBusy            O     1 const
// wci_s_6_SFlag                  O     2 const
// wci_s_7_SResp                  O     2 const
// wci_s_7_SData                  O    32 const
// wci_s_7_SThreadBusy            O     1 const
// wci_s_7_SFlag                  O     2 const
// wmiM0_MCmd                     O     3
// wmiM0_MReqLast                 O     1 reg
// wmiM0_MReqInfo                 O     1 reg
// wmiM0_MAddrSpace               O     1 reg
// wmiM0_MAddr                    O    14 reg
// wmiM0_MBurstLength             O    12 reg
// wmiM0_MDataValid               O     1
// wmiM0_MDataLast                O     1 reg
// wmiM0_MData                    O    32 reg
// wmiM0_MDataByteEn              O     4 reg
// wmiM0_MFlag                    O    32
// wmiM0_MReset_n                 O     1
// wmiM1_MCmd                     O     3
// wmiM1_MReqLast                 O     1 reg
// wmiM1_MReqInfo                 O     1 reg
// wmiM1_MAddrSpace               O     1 reg
// wmiM1_MAddr                    O    14 reg
// wmiM1_MBurstLength             O    12 reg
// wmiM1_MDataValid               O     1
// wmiM1_MDataLast                O     1 reg
// wmiM1_MData                    O    32 reg
// wmiM1_MDataByteEn              O     4 reg
// wmiM1_MFlag                    O    32
// wmiM1_MReset_n                 O     1
// wmemiM_MCmd                    O     3 reg
// wmemiM_MReqLast                O     1 reg
// wmemiM_MAddr                   O    36 reg
// wmemiM_MBurstLength            O    12 reg
// wmemiM_MDataValid              O     1 reg
// wmemiM_MDataLast               O     1 reg
// wmemiM_MData                   O   128 reg
// wmemiM_MDataByteEn             O    16 reg
// wmemiM_MReset_n                O     1
// wsi_s_adc_SThreadBusy          O     1
// wsi_s_adc_SReset_n             O     1
// wsi_m_dac_MCmd                 O     3
// wsi_m_dac_MReqLast             O     1
// wsi_m_dac_MBurstPrecise        O     1
// wsi_m_dac_MBurstLength         O    12
// wsi_m_dac_MData                O    32 reg
// wsi_m_dac_MByteEn              O     4 reg
// wsi_m_dac_MReqInfo             O     8
// wsi_m_dac_MReset_n             O     1
// RST_N_rst_0                    I     1 unused
// RST_N_rst_1                    I     1 unused
// RST_N_rst_2                    I     1 reset
// RST_N_rst_3                    I     1 reset
// RST_N_rst_4                    I     1 reset
// RST_N_rst_5                    I     1 unused
// RST_N_rst_6                    I     1 unused
// RST_N_rst_7                    I     1 unused
// CLK                            I     1 clock
// RST_N                          I     1 unused
// wci_s_0_MCmd                   I     3 unused
// wci_s_0_MAddrSpace             I     1 unused
// wci_s_0_MByteEn                I     4 unused
// wci_s_0_MAddr                  I    20 unused
// wci_s_0_MData                  I    32 unused
// wci_s_0_MFlag                  I     2 unused
// wci_s_1_MCmd                   I     3 unused
// wci_s_1_MAddrSpace             I     1 unused
// wci_s_1_MByteEn                I     4 unused
// wci_s_1_MAddr                  I    20 unused
// wci_s_1_MData                  I    32 unused
// wci_s_1_MFlag                  I     2 unused
// wci_s_2_MCmd                   I     3
// wci_s_2_MAddrSpace             I     1
// wci_s_2_MByteEn                I     4
// wci_s_2_MAddr                  I    20
// wci_s_2_MData                  I    32
// wci_s_2_MFlag                  I     2 unused
// wci_s_3_MCmd                   I     3
// wci_s_3_MAddrSpace             I     1
// wci_s_3_MByteEn                I     4
// wci_s_3_MAddr                  I    20
// wci_s_3_MData                  I    32
// wci_s_3_MFlag                  I     2 unused
// wci_s_4_MCmd                   I     3
// wci_s_4_MAddrSpace             I     1
// wci_s_4_MByteEn                I     4
// wci_s_4_MAddr                  I    20
// wci_s_4_MData                  I    32
// wci_s_4_MFlag                  I     2 unused
// wci_s_5_MCmd                   I     3 unused
// wci_s_5_MAddrSpace             I     1 unused
// wci_s_5_MByteEn                I     4 unused
// wci_s_5_MAddr                  I    20 unused
// wci_s_5_MData                  I    32 unused
// wci_s_5_MFlag                  I     2 unused
// wci_s_6_MCmd                   I     3 unused
// wci_s_6_MAddrSpace             I     1 unused
// wci_s_6_MByteEn                I     4 unused
// wci_s_6_MAddr                  I    20 unused
// wci_s_6_MData                  I    32 unused
// wci_s_6_MFlag                  I     2 unused
// wci_s_7_MCmd                   I     3 unused
// wci_s_7_MAddrSpace             I     1 unused
// wci_s_7_MByteEn                I     4 unused
// wci_s_7_MAddr                  I    20 unused
// wci_s_7_MData                  I    32 unused
// wci_s_7_MFlag                  I     2 unused
// wmiM0_SResp                    I     2
// wmiM0_SData                    I    32
// wmiM0_SFlag                    I    32 reg
// wmiM1_SResp                    I     2
// wmiM1_SData                    I    32
// wmiM1_SFlag                    I    32 reg
// wmemiM_SResp                   I     2
// wmemiM_SData                   I   128
// wsi_s_adc_MCmd                 I     3
// wsi_s_adc_MBurstLength         I    12
// wsi_s_adc_MData                I    32
// wsi_s_adc_MByteEn              I     4
// wsi_s_adc_MReqInfo             I     8
// wmiM0_SThreadBusy              I     1 reg
// wmiM0_SDataThreadBusy          I     1 reg
// wmiM0_SRespLast                I     1 unused
// wmiM0_SReset_n                 I     1 reg
// wmiM1_SThreadBusy              I     1 reg
// wmiM1_SDataThreadBusy          I     1 reg
// wmiM1_SRespLast                I     1 unused
// wmiM1_SReset_n                 I     1 reg
// wmemiM_SRespLast               I     1
// wmemiM_SCmdAccept              I     1
// wmemiM_SDataAccept             I     1
// wsi_s_adc_MReqLast             I     1
// wsi_s_adc_MBurstPrecise        I     1
// wsi_s_adc_MReset_n             I     1 reg
// wsi_m_dac_SThreadBusy          I     1 reg
// wsi_m_dac_SReset_n             I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCApp4B(RST_N_rst_0,
		 RST_N_rst_1,
		 RST_N_rst_2,
		 RST_N_rst_3,
		 RST_N_rst_4,
		 RST_N_rst_5,
		 RST_N_rst_6,
		 RST_N_rst_7,
		 CLK,
		 RST_N,

		 wci_s_0_MCmd,

		 wci_s_0_MAddrSpace,

		 wci_s_0_MByteEn,

		 wci_s_0_MAddr,

		 wci_s_0_MData,

		 wci_s_0_SResp,

		 wci_s_0_SData,

		 wci_s_0_SThreadBusy,

		 wci_s_0_SFlag,

		 wci_s_0_MFlag,

		 wci_s_1_MCmd,

		 wci_s_1_MAddrSpace,

		 wci_s_1_MByteEn,

		 wci_s_1_MAddr,

		 wci_s_1_MData,

		 wci_s_1_SResp,

		 wci_s_1_SData,

		 wci_s_1_SThreadBusy,

		 wci_s_1_SFlag,

		 wci_s_1_MFlag,

		 wci_s_2_MCmd,

		 wci_s_2_MAddrSpace,

		 wci_s_2_MByteEn,

		 wci_s_2_MAddr,

		 wci_s_2_MData,

		 wci_s_2_SResp,

		 wci_s_2_SData,

		 wci_s_2_SThreadBusy,

		 wci_s_2_SFlag,

		 wci_s_2_MFlag,

		 wci_s_3_MCmd,

		 wci_s_3_MAddrSpace,

		 wci_s_3_MByteEn,

		 wci_s_3_MAddr,

		 wci_s_3_MData,

		 wci_s_3_SResp,

		 wci_s_3_SData,

		 wci_s_3_SThreadBusy,

		 wci_s_3_SFlag,

		 wci_s_3_MFlag,

		 wci_s_4_MCmd,

		 wci_s_4_MAddrSpace,

		 wci_s_4_MByteEn,

		 wci_s_4_MAddr,

		 wci_s_4_MData,

		 wci_s_4_SResp,

		 wci_s_4_SData,

		 wci_s_4_SThreadBusy,

		 wci_s_4_SFlag,

		 wci_s_4_MFlag,

		 wci_s_5_MCmd,

		 wci_s_5_MAddrSpace,

		 wci_s_5_MByteEn,

		 wci_s_5_MAddr,

		 wci_s_5_MData,

		 wci_s_5_SResp,

		 wci_s_5_SData,

		 wci_s_5_SThreadBusy,

		 wci_s_5_SFlag,

		 wci_s_5_MFlag,

		 wci_s_6_MCmd,

		 wci_s_6_MAddrSpace,

		 wci_s_6_MByteEn,

		 wci_s_6_MAddr,

		 wci_s_6_MData,

		 wci_s_6_SResp,

		 wci_s_6_SData,

		 wci_s_6_SThreadBusy,

		 wci_s_6_SFlag,

		 wci_s_6_MFlag,

		 wci_s_7_MCmd,

		 wci_s_7_MAddrSpace,

		 wci_s_7_MByteEn,

		 wci_s_7_MAddr,

		 wci_s_7_MData,

		 wci_s_7_SResp,

		 wci_s_7_SData,

		 wci_s_7_SThreadBusy,

		 wci_s_7_SFlag,

		 wci_s_7_MFlag,

		 wmiM0_MCmd,

		 wmiM0_MReqLast,

		 wmiM0_MReqInfo,

		 wmiM0_MAddrSpace,

		 wmiM0_MAddr,

		 wmiM0_MBurstLength,

		 wmiM0_MDataValid,

		 wmiM0_MDataLast,

		 wmiM0_MData,

		 wmiM0_MDataByteEn,

		 wmiM0_SResp,

		 wmiM0_SData,

		 wmiM0_SThreadBusy,

		 wmiM0_SDataThreadBusy,

		 wmiM0_SRespLast,

		 wmiM0_SFlag,

		 wmiM0_MFlag,

		 wmiM0_MReset_n,

		 wmiM0_SReset_n,

		 wmiM1_MCmd,

		 wmiM1_MReqLast,

		 wmiM1_MReqInfo,

		 wmiM1_MAddrSpace,

		 wmiM1_MAddr,

		 wmiM1_MBurstLength,

		 wmiM1_MDataValid,

		 wmiM1_MDataLast,

		 wmiM1_MData,

		 wmiM1_MDataByteEn,

		 wmiM1_SResp,

		 wmiM1_SData,

		 wmiM1_SThreadBusy,

		 wmiM1_SDataThreadBusy,

		 wmiM1_SRespLast,

		 wmiM1_SFlag,

		 wmiM1_MFlag,

		 wmiM1_MReset_n,

		 wmiM1_SReset_n,

		 wmemiM_MCmd,

		 wmemiM_MReqLast,

		 wmemiM_MAddr,

		 wmemiM_MBurstLength,

		 wmemiM_MDataValid,

		 wmemiM_MDataLast,

		 wmemiM_MData,

		 wmemiM_MDataByteEn,

		 wmemiM_SResp,

		 wmemiM_SRespLast,

		 wmemiM_SData,

		 wmemiM_SCmdAccept,

		 wmemiM_SDataAccept,

		 wmemiM_MReset_n,

		 wsi_s_adc_MCmd,

		 wsi_s_adc_MReqLast,

		 wsi_s_adc_MBurstPrecise,

		 wsi_s_adc_MBurstLength,

		 wsi_s_adc_MData,

		 wsi_s_adc_MByteEn,

		 wsi_s_adc_MReqInfo,

		 wsi_s_adc_SThreadBusy,

		 wsi_s_adc_SReset_n,

		 wsi_s_adc_MReset_n,

		 wsi_m_dac_MCmd,

		 wsi_m_dac_MReqLast,

		 wsi_m_dac_MBurstPrecise,

		 wsi_m_dac_MBurstLength,

		 wsi_m_dac_MData,

		 wsi_m_dac_MByteEn,

		 wsi_m_dac_MReqInfo,

		 wsi_m_dac_SThreadBusy,

		 wsi_m_dac_MReset_n,

		 wsi_m_dac_SReset_n);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  RST_N_rst_0;
  input  RST_N_rst_1;
  input  RST_N_rst_2;
  input  RST_N_rst_3;
  input  RST_N_rst_4;
  input  RST_N_rst_5;
  input  RST_N_rst_6;
  input  RST_N_rst_7;
  input  CLK;
  input  RST_N;

  // action method wci_s_0_mCmd
  input  [2 : 0] wci_s_0_MCmd;

  // action method wci_s_0_mAddrSpace
  input  wci_s_0_MAddrSpace;

  // action method wci_s_0_mByteEn
  input  [3 : 0] wci_s_0_MByteEn;

  // action method wci_s_0_mAddr
  input  [19 : 0] wci_s_0_MAddr;

  // action method wci_s_0_mData
  input  [31 : 0] wci_s_0_MData;

  // value method wci_s_0_sResp
  output [1 : 0] wci_s_0_SResp;

  // value method wci_s_0_sData
  output [31 : 0] wci_s_0_SData;

  // value method wci_s_0_sThreadBusy
  output wci_s_0_SThreadBusy;

  // value method wci_s_0_sFlag
  output [1 : 0] wci_s_0_SFlag;

  // action method wci_s_0_mFlag
  input  [1 : 0] wci_s_0_MFlag;

  // action method wci_s_1_mCmd
  input  [2 : 0] wci_s_1_MCmd;

  // action method wci_s_1_mAddrSpace
  input  wci_s_1_MAddrSpace;

  // action method wci_s_1_mByteEn
  input  [3 : 0] wci_s_1_MByteEn;

  // action method wci_s_1_mAddr
  input  [19 : 0] wci_s_1_MAddr;

  // action method wci_s_1_mData
  input  [31 : 0] wci_s_1_MData;

  // value method wci_s_1_sResp
  output [1 : 0] wci_s_1_SResp;

  // value method wci_s_1_sData
  output [31 : 0] wci_s_1_SData;

  // value method wci_s_1_sThreadBusy
  output wci_s_1_SThreadBusy;

  // value method wci_s_1_sFlag
  output [1 : 0] wci_s_1_SFlag;

  // action method wci_s_1_mFlag
  input  [1 : 0] wci_s_1_MFlag;

  // action method wci_s_2_mCmd
  input  [2 : 0] wci_s_2_MCmd;

  // action method wci_s_2_mAddrSpace
  input  wci_s_2_MAddrSpace;

  // action method wci_s_2_mByteEn
  input  [3 : 0] wci_s_2_MByteEn;

  // action method wci_s_2_mAddr
  input  [19 : 0] wci_s_2_MAddr;

  // action method wci_s_2_mData
  input  [31 : 0] wci_s_2_MData;

  // value method wci_s_2_sResp
  output [1 : 0] wci_s_2_SResp;

  // value method wci_s_2_sData
  output [31 : 0] wci_s_2_SData;

  // value method wci_s_2_sThreadBusy
  output wci_s_2_SThreadBusy;

  // value method wci_s_2_sFlag
  output [1 : 0] wci_s_2_SFlag;

  // action method wci_s_2_mFlag
  input  [1 : 0] wci_s_2_MFlag;

  // action method wci_s_3_mCmd
  input  [2 : 0] wci_s_3_MCmd;

  // action method wci_s_3_mAddrSpace
  input  wci_s_3_MAddrSpace;

  // action method wci_s_3_mByteEn
  input  [3 : 0] wci_s_3_MByteEn;

  // action method wci_s_3_mAddr
  input  [19 : 0] wci_s_3_MAddr;

  // action method wci_s_3_mData
  input  [31 : 0] wci_s_3_MData;

  // value method wci_s_3_sResp
  output [1 : 0] wci_s_3_SResp;

  // value method wci_s_3_sData
  output [31 : 0] wci_s_3_SData;

  // value method wci_s_3_sThreadBusy
  output wci_s_3_SThreadBusy;

  // value method wci_s_3_sFlag
  output [1 : 0] wci_s_3_SFlag;

  // action method wci_s_3_mFlag
  input  [1 : 0] wci_s_3_MFlag;

  // action method wci_s_4_mCmd
  input  [2 : 0] wci_s_4_MCmd;

  // action method wci_s_4_mAddrSpace
  input  wci_s_4_MAddrSpace;

  // action method wci_s_4_mByteEn
  input  [3 : 0] wci_s_4_MByteEn;

  // action method wci_s_4_mAddr
  input  [19 : 0] wci_s_4_MAddr;

  // action method wci_s_4_mData
  input  [31 : 0] wci_s_4_MData;

  // value method wci_s_4_sResp
  output [1 : 0] wci_s_4_SResp;

  // value method wci_s_4_sData
  output [31 : 0] wci_s_4_SData;

  // value method wci_s_4_sThreadBusy
  output wci_s_4_SThreadBusy;

  // value method wci_s_4_sFlag
  output [1 : 0] wci_s_4_SFlag;

  // action method wci_s_4_mFlag
  input  [1 : 0] wci_s_4_MFlag;

  // action method wci_s_5_mCmd
  input  [2 : 0] wci_s_5_MCmd;

  // action method wci_s_5_mAddrSpace
  input  wci_s_5_MAddrSpace;

  // action method wci_s_5_mByteEn
  input  [3 : 0] wci_s_5_MByteEn;

  // action method wci_s_5_mAddr
  input  [19 : 0] wci_s_5_MAddr;

  // action method wci_s_5_mData
  input  [31 : 0] wci_s_5_MData;

  // value method wci_s_5_sResp
  output [1 : 0] wci_s_5_SResp;

  // value method wci_s_5_sData
  output [31 : 0] wci_s_5_SData;

  // value method wci_s_5_sThreadBusy
  output wci_s_5_SThreadBusy;

  // value method wci_s_5_sFlag
  output [1 : 0] wci_s_5_SFlag;

  // action method wci_s_5_mFlag
  input  [1 : 0] wci_s_5_MFlag;

  // action method wci_s_6_mCmd
  input  [2 : 0] wci_s_6_MCmd;

  // action method wci_s_6_mAddrSpace
  input  wci_s_6_MAddrSpace;

  // action method wci_s_6_mByteEn
  input  [3 : 0] wci_s_6_MByteEn;

  // action method wci_s_6_mAddr
  input  [19 : 0] wci_s_6_MAddr;

  // action method wci_s_6_mData
  input  [31 : 0] wci_s_6_MData;

  // value method wci_s_6_sResp
  output [1 : 0] wci_s_6_SResp;

  // value method wci_s_6_sData
  output [31 : 0] wci_s_6_SData;

  // value method wci_s_6_sThreadBusy
  output wci_s_6_SThreadBusy;

  // value method wci_s_6_sFlag
  output [1 : 0] wci_s_6_SFlag;

  // action method wci_s_6_mFlag
  input  [1 : 0] wci_s_6_MFlag;

  // action method wci_s_7_mCmd
  input  [2 : 0] wci_s_7_MCmd;

  // action method wci_s_7_mAddrSpace
  input  wci_s_7_MAddrSpace;

  // action method wci_s_7_mByteEn
  input  [3 : 0] wci_s_7_MByteEn;

  // action method wci_s_7_mAddr
  input  [19 : 0] wci_s_7_MAddr;

  // action method wci_s_7_mData
  input  [31 : 0] wci_s_7_MData;

  // value method wci_s_7_sResp
  output [1 : 0] wci_s_7_SResp;

  // value method wci_s_7_sData
  output [31 : 0] wci_s_7_SData;

  // value method wci_s_7_sThreadBusy
  output wci_s_7_SThreadBusy;

  // value method wci_s_7_sFlag
  output [1 : 0] wci_s_7_SFlag;

  // action method wci_s_7_mFlag
  input  [1 : 0] wci_s_7_MFlag;

  // value method wmiM0_mCmd
  output [2 : 0] wmiM0_MCmd;

  // value method wmiM0_mReqLast
  output wmiM0_MReqLast;

  // value method wmiM0_mReqInfo
  output wmiM0_MReqInfo;

  // value method wmiM0_mAddrSpace
  output wmiM0_MAddrSpace;

  // value method wmiM0_mAddr
  output [13 : 0] wmiM0_MAddr;

  // value method wmiM0_mBurstLength
  output [11 : 0] wmiM0_MBurstLength;

  // value method wmiM0_mDataValid
  output wmiM0_MDataValid;

  // value method wmiM0_mDataLast
  output wmiM0_MDataLast;

  // value method wmiM0_mData
  output [31 : 0] wmiM0_MData;

  // value method wmiM0_mDataInfo

  // value method wmiM0_mDataByteEn
  output [3 : 0] wmiM0_MDataByteEn;

  // action method wmiM0_sResp
  input  [1 : 0] wmiM0_SResp;

  // action method wmiM0_sData
  input  [31 : 0] wmiM0_SData;

  // action method wmiM0_sThreadBusy
  input  wmiM0_SThreadBusy;

  // action method wmiM0_sDataThreadBusy
  input  wmiM0_SDataThreadBusy;

  // action method wmiM0_sRespLast
  input  wmiM0_SRespLast;

  // action method wmiM0_sFlag
  input  [31 : 0] wmiM0_SFlag;

  // value method wmiM0_mFlag
  output [31 : 0] wmiM0_MFlag;

  // value method wmiM0_mReset_n
  output wmiM0_MReset_n;

  // action method wmiM0_sReset_n
  input  wmiM0_SReset_n;

  // value method wmiM1_mCmd
  output [2 : 0] wmiM1_MCmd;

  // value method wmiM1_mReqLast
  output wmiM1_MReqLast;

  // value method wmiM1_mReqInfo
  output wmiM1_MReqInfo;

  // value method wmiM1_mAddrSpace
  output wmiM1_MAddrSpace;

  // value method wmiM1_mAddr
  output [13 : 0] wmiM1_MAddr;

  // value method wmiM1_mBurstLength
  output [11 : 0] wmiM1_MBurstLength;

  // value method wmiM1_mDataValid
  output wmiM1_MDataValid;

  // value method wmiM1_mDataLast
  output wmiM1_MDataLast;

  // value method wmiM1_mData
  output [31 : 0] wmiM1_MData;

  // value method wmiM1_mDataInfo

  // value method wmiM1_mDataByteEn
  output [3 : 0] wmiM1_MDataByteEn;

  // action method wmiM1_sResp
  input  [1 : 0] wmiM1_SResp;

  // action method wmiM1_sData
  input  [31 : 0] wmiM1_SData;

  // action method wmiM1_sThreadBusy
  input  wmiM1_SThreadBusy;

  // action method wmiM1_sDataThreadBusy
  input  wmiM1_SDataThreadBusy;

  // action method wmiM1_sRespLast
  input  wmiM1_SRespLast;

  // action method wmiM1_sFlag
  input  [31 : 0] wmiM1_SFlag;

  // value method wmiM1_mFlag
  output [31 : 0] wmiM1_MFlag;

  // value method wmiM1_mReset_n
  output wmiM1_MReset_n;

  // action method wmiM1_sReset_n
  input  wmiM1_SReset_n;

  // value method wmemiM_mCmd
  output [2 : 0] wmemiM_MCmd;

  // value method wmemiM_mReqLast
  output wmemiM_MReqLast;

  // value method wmemiM_mAddr
  output [35 : 0] wmemiM_MAddr;

  // value method wmemiM_mBurstLength
  output [11 : 0] wmemiM_MBurstLength;

  // value method wmemiM_mDataValid
  output wmemiM_MDataValid;

  // value method wmemiM_mDataLast
  output wmemiM_MDataLast;

  // value method wmemiM_mData
  output [127 : 0] wmemiM_MData;

  // value method wmemiM_mDataByteEn
  output [15 : 0] wmemiM_MDataByteEn;

  // action method wmemiM_sResp
  input  [1 : 0] wmemiM_SResp;

  // action method wmemiM_sRespLast
  input  wmemiM_SRespLast;

  // action method wmemiM_sData
  input  [127 : 0] wmemiM_SData;

  // action method wmemiM_sCmdAccept
  input  wmemiM_SCmdAccept;

  // action method wmemiM_sDataAccept
  input  wmemiM_SDataAccept;

  // value method wmemiM_mReset_n
  output wmemiM_MReset_n;

  // action method wsi_s_adc_mCmd
  input  [2 : 0] wsi_s_adc_MCmd;

  // action method wsi_s_adc_mReqLast
  input  wsi_s_adc_MReqLast;

  // action method wsi_s_adc_mBurstPrecise
  input  wsi_s_adc_MBurstPrecise;

  // action method wsi_s_adc_mBurstLength
  input  [11 : 0] wsi_s_adc_MBurstLength;

  // action method wsi_s_adc_mData
  input  [31 : 0] wsi_s_adc_MData;

  // action method wsi_s_adc_mByteEn
  input  [3 : 0] wsi_s_adc_MByteEn;

  // action method wsi_s_adc_mReqInfo
  input  [7 : 0] wsi_s_adc_MReqInfo;

  // action method wsi_s_adc_mDataInfo

  // value method wsi_s_adc_sThreadBusy
  output wsi_s_adc_SThreadBusy;

  // value method wsi_s_adc_sReset_n
  output wsi_s_adc_SReset_n;

  // action method wsi_s_adc_mReset_n
  input  wsi_s_adc_MReset_n;

  // value method wsi_m_dac_mCmd
  output [2 : 0] wsi_m_dac_MCmd;

  // value method wsi_m_dac_mReqLast
  output wsi_m_dac_MReqLast;

  // value method wsi_m_dac_mBurstPrecise
  output wsi_m_dac_MBurstPrecise;

  // value method wsi_m_dac_mBurstLength
  output [11 : 0] wsi_m_dac_MBurstLength;

  // value method wsi_m_dac_mData
  output [31 : 0] wsi_m_dac_MData;

  // value method wsi_m_dac_mByteEn
  output [3 : 0] wsi_m_dac_MByteEn;

  // value method wsi_m_dac_mReqInfo
  output [7 : 0] wsi_m_dac_MReqInfo;

  // value method wsi_m_dac_mDataInfo

  // action method wsi_m_dac_sThreadBusy
  input  wsi_m_dac_SThreadBusy;

  // value method wsi_m_dac_mReset_n
  output wsi_m_dac_MReset_n;

  // action method wsi_m_dac_sReset_n
  input  wsi_m_dac_SReset_n;

  // signals for module outputs
  wire [127 : 0] wmemiM_MData;
  wire [35 : 0] wmemiM_MAddr;
  wire [31 : 0] wci_s_0_SData,
		wci_s_1_SData,
		wci_s_2_SData,
		wci_s_3_SData,
		wci_s_4_SData,
		wci_s_5_SData,
		wci_s_6_SData,
		wci_s_7_SData,
		wmiM0_MData,
		wmiM0_MFlag,
		wmiM1_MData,
		wmiM1_MFlag,
		wsi_m_dac_MData;
  wire [15 : 0] wmemiM_MDataByteEn;
  wire [13 : 0] wmiM0_MAddr, wmiM1_MAddr;
  wire [11 : 0] wmemiM_MBurstLength,
		wmiM0_MBurstLength,
		wmiM1_MBurstLength,
		wsi_m_dac_MBurstLength;
  wire [7 : 0] wsi_m_dac_MReqInfo;
  wire [3 : 0] wmiM0_MDataByteEn, wmiM1_MDataByteEn, wsi_m_dac_MByteEn;
  wire [2 : 0] wmemiM_MCmd, wmiM0_MCmd, wmiM1_MCmd, wsi_m_dac_MCmd;
  wire [1 : 0] wci_s_0_SFlag,
	       wci_s_0_SResp,
	       wci_s_1_SFlag,
	       wci_s_1_SResp,
	       wci_s_2_SFlag,
	       wci_s_2_SResp,
	       wci_s_3_SFlag,
	       wci_s_3_SResp,
	       wci_s_4_SFlag,
	       wci_s_4_SResp,
	       wci_s_5_SFlag,
	       wci_s_5_SResp,
	       wci_s_6_SFlag,
	       wci_s_6_SResp,
	       wci_s_7_SFlag,
	       wci_s_7_SResp;
  wire wci_s_0_SThreadBusy,
       wci_s_1_SThreadBusy,
       wci_s_2_SThreadBusy,
       wci_s_3_SThreadBusy,
       wci_s_4_SThreadBusy,
       wci_s_5_SThreadBusy,
       wci_s_6_SThreadBusy,
       wci_s_7_SThreadBusy,
       wmemiM_MDataLast,
       wmemiM_MDataValid,
       wmemiM_MReqLast,
       wmemiM_MReset_n,
       wmiM0_MAddrSpace,
       wmiM0_MDataLast,
       wmiM0_MDataValid,
       wmiM0_MReqInfo,
       wmiM0_MReqLast,
       wmiM0_MReset_n,
       wmiM1_MAddrSpace,
       wmiM1_MDataLast,
       wmiM1_MDataValid,
       wmiM1_MReqInfo,
       wmiM1_MReqLast,
       wmiM1_MReset_n,
       wsi_m_dac_MBurstPrecise,
       wsi_m_dac_MReqLast,
       wsi_m_dac_MReset_n,
       wsi_s_adc_SReset_n,
       wsi_s_adc_SThreadBusy;

  // inlined wires
  wire [145 : 0] appW3_wmemi_dhF_x_wire$wget;
  wire [130 : 0] appW3_wmemi_wmemiResponse$wget;
  wire [127 : 0] appW3_wmemi_Em_sData_w$wget;
  wire [95 : 0] appW2_wsiM_extStatusW$wget,
		appW2_wsiS_extStatusW$wget,
		appW3_wsiM_extStatusW$wget,
		appW3_wsiS_extStatusW$wget,
		appW4_wsiM_extStatusW$wget,
		appW4_wsiS_extStatusW$wget;
  wire [60 : 0] appW2_respF_wDataIn$wget,
		appW2_respF_wDataOut$wget,
		appW2_wsiM_reqFifo_x_wire$wget,
		appW2_wsiS_wsiReq$wget,
		appW3_wsiM_reqFifo_x_wire$wget,
		appW3_wsiS_wsiReq$wget,
		appW4_respF_wDataIn$wget,
		appW4_respF_wDataOut$wget,
		appW4_wsiM_reqFifo_x_wire$wget,
		appW4_wsiS_wsiReq$wget;
  wire [59 : 0] appW2_wci_wciReq$wget,
		appW3_wci_wciReq$wget,
		appW4_wci_wciReq$wget;
  wire [51 : 0] appW3_wmemi_reqF_x_wire$wget;
  wire [37 : 0] appW2_wmi_dhF_x_wire$wget, appW4_wmi_dhF_x_wire$wget;
  wire [33 : 0] appW2_wci_respF_x_wire$wget,
		appW2_wmi_wmiResponse$wget,
		appW3_wci_respF_x_wire$wget,
		appW4_wci_respF_x_wire$wget,
		appW4_wmi_wmiResponse$wget;
  wire [31 : 0] appW2_wci_Es_mData_w$wget,
		appW2_wmi_Em_sData_w$wget,
		appW2_wmi_mFlagF_x_wire$wget,
		appW2_wmi_reqF_x_wire$wget,
		appW2_wsi_Es_mData_w$wget,
		appW3_mesgWF_wDataIn$wget,
		appW3_mesgWF_wDataOut$wget,
		appW3_wci_Es_mData_w$wget,
		appW3_wsi_Es_mData_w$wget,
		appW4_wci_Es_mData_w$wget,
		appW4_wmi_Em_sData_w$wget,
		appW4_wmi_mFlagF_x_wire$wget,
		appW4_wmi_reqF_x_wire$wget,
		appW4_wsi_Es_mData_w$wget,
		tieOff0_wci_Es_mData_w$wget,
		tieOff1_wci_Es_mData_w$wget,
		tieOff5_wci_Es_mData_w$wget,
		tieOff6_wci_Es_mData_w$wget,
		tieOff7_wci_Es_mData_w$wget;
  wire [24 : 0] appW3_dlyWordsStored_acc_v1$wget,
		appW3_dlyWordsStored_acc_v2$wget;
  wire [19 : 0] appW2_wci_Es_mAddr_w$wget,
		appW3_wci_Es_mAddr_w$wget,
		appW4_wci_Es_mAddr_w$wget,
		tieOff0_wci_Es_mAddr_w$wget,
		tieOff1_wci_Es_mAddr_w$wget,
		tieOff5_wci_Es_mAddr_w$wget,
		tieOff6_wci_Es_mAddr_w$wget,
		tieOff7_wci_Es_mAddr_w$wget;
  wire [15 : 0] appW3_dlyReadyToWrite_acc_v1$wget,
		appW3_dlyReadyToWrite_acc_v2$wget;
  wire [11 : 0] appW2_fabRespCredit_acc_v1$wget,
		appW2_fabRespCredit_acc_v2$wget,
		appW2_wsi_Es_mBurstLength_w$wget,
		appW3_wsi_Es_mBurstLength_w$wget,
		appW4_fabRespCredit_acc_v1$wget,
		appW4_fabRespCredit_acc_v2$wget,
		appW4_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] appW2_wsi_Es_mReqInfo_w$wget,
	       appW3_dlyReadCredit_acc_v1$wget,
	       appW3_dlyReadCredit_acc_v2$wget,
	       appW3_wsi_Es_mReqInfo_w$wget,
	       appW4_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] appW2_wci_Es_mByteEn_w$wget,
	       appW2_wsi_Es_mByteEn_w$wget,
	       appW3_wci_Es_mByteEn_w$wget,
	       appW3_wsi_Es_mByteEn_w$wget,
	       appW4_wci_Es_mByteEn_w$wget,
	       appW4_wsi_Es_mByteEn_w$wget,
	       tieOff0_wci_Es_mByteEn_w$wget,
	       tieOff1_wci_Es_mByteEn_w$wget,
	       tieOff5_wci_Es_mByteEn_w$wget,
	       tieOff6_wci_Es_mByteEn_w$wget,
	       tieOff7_wci_Es_mByteEn_w$wget;
  wire [2 : 0] appW2_wci_Es_mCmd_w$wget,
	       appW2_wci_wEdge$wget,
	       appW2_wsi_Es_mCmd_w$wget,
	       appW3_wci_Es_mCmd_w$wget,
	       appW3_wci_wEdge$wget,
	       appW3_wsi_Es_mCmd_w$wget,
	       appW4_wci_Es_mCmd_w$wget,
	       appW4_wci_wEdge$wget,
	       appW4_wsi_Es_mCmd_w$wget,
	       tieOff0_wci_Es_mCmd_w$wget,
	       tieOff1_wci_Es_mCmd_w$wget,
	       tieOff5_wci_Es_mCmd_w$wget,
	       tieOff6_wci_Es_mCmd_w$wget,
	       tieOff7_wci_Es_mCmd_w$wget;
  wire [1 : 0] appW2_wmi_Em_sResp_w$wget,
	       appW3_wmemi_Em_sResp_w$wget,
	       appW4_wmi_Em_sResp_w$wget;
  wire appW2_fabRespCredit_acc_v1$whas,
       appW2_fabRespCredit_acc_v2$whas,
       appW2_mesgPreRequest_1$wget,
       appW2_mesgPreRequest_1$whas,
       appW2_respF_pwDequeue$whas,
       appW2_respF_pwEnqueue$whas,
       appW2_respF_wDataIn$whas,
       appW2_respF_wDataOut$whas,
       appW2_wci_Es_mAddrSpace_w$wget,
       appW2_wci_Es_mAddrSpace_w$whas,
       appW2_wci_Es_mAddr_w$whas,
       appW2_wci_Es_mByteEn_w$whas,
       appW2_wci_Es_mCmd_w$whas,
       appW2_wci_Es_mData_w$whas,
       appW2_wci_ctlAckReg_1$wget,
       appW2_wci_ctlAckReg_1$whas,
       appW2_wci_reqF_r_clr$whas,
       appW2_wci_reqF_r_deq$whas,
       appW2_wci_reqF_r_enq$whas,
       appW2_wci_respF_dequeueing$whas,
       appW2_wci_respF_enqueueing$whas,
       appW2_wci_respF_x_wire$whas,
       appW2_wci_sFlagReg_1$wget,
       appW2_wci_sFlagReg_1$whas,
       appW2_wci_sThreadBusy_pw$whas,
       appW2_wci_wEdge$whas,
       appW2_wci_wciReq$whas,
       appW2_wci_wci_cfrd_pw$whas,
       appW2_wci_wci_cfwr_pw$whas,
       appW2_wci_wci_ctrl_pw$whas,
       appW2_wmi_Em_sData_w$whas,
       appW2_wmi_Em_sResp_w$whas,
       appW2_wmi_dhF_dequeueing$whas,
       appW2_wmi_dhF_enqueueing$whas,
       appW2_wmi_dhF_x_wire$whas,
       appW2_wmi_mFlagF_dequeueing$whas,
       appW2_wmi_mFlagF_enqueueing$whas,
       appW2_wmi_mFlagF_x_wire$whas,
       appW2_wmi_operateD_1$wget,
       appW2_wmi_operateD_1$whas,
       appW2_wmi_peerIsReady_1$wget,
       appW2_wmi_peerIsReady_1$whas,
       appW2_wmi_reqF_dequeueing$whas,
       appW2_wmi_reqF_enqueueing$whas,
       appW2_wmi_reqF_x_wire$whas,
       appW2_wmi_sDataThreadBusy_d_1$wget,
       appW2_wmi_sDataThreadBusy_d_1$whas,
       appW2_wmi_sThreadBusy_d_1$wget,
       appW2_wmi_sThreadBusy_d_1$whas,
       appW2_wmi_wmiResponse$whas,
       appW2_wsiM_operateD_1$wget,
       appW2_wsiM_operateD_1$whas,
       appW2_wsiM_peerIsReady_1$wget,
       appW2_wsiM_peerIsReady_1$whas,
       appW2_wsiM_reqFifo_dequeueing$whas,
       appW2_wsiM_reqFifo_enqueueing$whas,
       appW2_wsiM_reqFifo_x_wire$whas,
       appW2_wsiM_sThreadBusy_pw$whas,
       appW2_wsiS_operateD_1$wget,
       appW2_wsiS_operateD_1$whas,
       appW2_wsiS_peerIsReady_1$wget,
       appW2_wsiS_peerIsReady_1$whas,
       appW2_wsiS_reqFifo_doResetClr$whas,
       appW2_wsiS_reqFifo_doResetDeq$whas,
       appW2_wsiS_reqFifo_doResetEnq$whas,
       appW2_wsiS_reqFifo_r_clr$whas,
       appW2_wsiS_reqFifo_r_deq$whas,
       appW2_wsiS_reqFifo_r_enq$whas,
       appW2_wsiS_sThreadBusy_dw$wget,
       appW2_wsiS_sThreadBusy_dw$whas,
       appW2_wsiS_wsiReq$whas,
       appW2_wsi_Es_mBurstLength_w$whas,
       appW2_wsi_Es_mBurstPrecise_w$whas,
       appW2_wsi_Es_mByteEn_w$whas,
       appW2_wsi_Es_mCmd_w$whas,
       appW2_wsi_Es_mDataInfo_w$whas,
       appW2_wsi_Es_mData_w$whas,
       appW2_wsi_Es_mReqInfo_w$whas,
       appW2_wsi_Es_mReqLast_w$whas,
       appW3_dlyReadCredit_acc_v1$whas,
       appW3_dlyReadCredit_acc_v2$whas,
       appW3_dlyReadyToWrite_acc_v1$whas,
       appW3_dlyReadyToWrite_acc_v2$whas,
       appW3_dlyWordsStored_acc_v1$whas,
       appW3_dlyWordsStored_acc_v2$whas,
       appW3_mesgWF_pwDequeue$whas,
       appW3_mesgWF_pwEnqueue$whas,
       appW3_mesgWF_wDataIn$whas,
       appW3_mesgWF_wDataOut$whas,
       appW3_wci_Es_mAddrSpace_w$wget,
       appW3_wci_Es_mAddrSpace_w$whas,
       appW3_wci_Es_mAddr_w$whas,
       appW3_wci_Es_mByteEn_w$whas,
       appW3_wci_Es_mCmd_w$whas,
       appW3_wci_Es_mData_w$whas,
       appW3_wci_ctlAckReg_1$wget,
       appW3_wci_ctlAckReg_1$whas,
       appW3_wci_reqF_r_clr$whas,
       appW3_wci_reqF_r_deq$whas,
       appW3_wci_reqF_r_enq$whas,
       appW3_wci_respF_dequeueing$whas,
       appW3_wci_respF_enqueueing$whas,
       appW3_wci_respF_x_wire$whas,
       appW3_wci_sFlagReg_1$wget,
       appW3_wci_sFlagReg_1$whas,
       appW3_wci_sThreadBusy_pw$whas,
       appW3_wci_wEdge$whas,
       appW3_wci_wciReq$whas,
       appW3_wci_wci_cfrd_pw$whas,
       appW3_wci_wci_cfwr_pw$whas,
       appW3_wci_wci_ctrl_pw$whas,
       appW3_wmemi_Em_sData_w$whas,
       appW3_wmemi_Em_sRespLast_w$whas,
       appW3_wmemi_Em_sResp_w$whas,
       appW3_wmemi_dhF_dequeueing$whas,
       appW3_wmemi_dhF_enqueueing$whas,
       appW3_wmemi_dhF_x_wire$whas,
       appW3_wmemi_operateD_1$wget,
       appW3_wmemi_operateD_1$whas,
       appW3_wmemi_peerIsReady_1$wget,
       appW3_wmemi_peerIsReady_1$whas,
       appW3_wmemi_reqF_dequeueing$whas,
       appW3_wmemi_reqF_enqueueing$whas,
       appW3_wmemi_reqF_x_wire$whas,
       appW3_wmemi_sCmdAccept_w$wget,
       appW3_wmemi_sCmdAccept_w$whas,
       appW3_wmemi_sDataAccept_w$wget,
       appW3_wmemi_sDataAccept_w$whas,
       appW3_wmemi_wmemiResponse$whas,
       appW3_wsiM_operateD_1$wget,
       appW3_wsiM_operateD_1$whas,
       appW3_wsiM_peerIsReady_1$wget,
       appW3_wsiM_peerIsReady_1$whas,
       appW3_wsiM_reqFifo_dequeueing$whas,
       appW3_wsiM_reqFifo_enqueueing$whas,
       appW3_wsiM_reqFifo_x_wire$whas,
       appW3_wsiM_sThreadBusy_pw$whas,
       appW3_wsiS_operateD_1$wget,
       appW3_wsiS_operateD_1$whas,
       appW3_wsiS_peerIsReady_1$wget,
       appW3_wsiS_peerIsReady_1$whas,
       appW3_wsiS_reqFifo_doResetClr$whas,
       appW3_wsiS_reqFifo_doResetDeq$whas,
       appW3_wsiS_reqFifo_doResetEnq$whas,
       appW3_wsiS_reqFifo_r_clr$whas,
       appW3_wsiS_reqFifo_r_deq$whas,
       appW3_wsiS_reqFifo_r_enq$whas,
       appW3_wsiS_sThreadBusy_dw$wget,
       appW3_wsiS_sThreadBusy_dw$whas,
       appW3_wsiS_wsiReq$whas,
       appW3_wsi_Es_mBurstLength_w$whas,
       appW3_wsi_Es_mBurstPrecise_w$whas,
       appW3_wsi_Es_mByteEn_w$whas,
       appW3_wsi_Es_mCmd_w$whas,
       appW3_wsi_Es_mDataInfo_w$whas,
       appW3_wsi_Es_mData_w$whas,
       appW3_wsi_Es_mReqInfo_w$whas,
       appW3_wsi_Es_mReqLast_w$whas,
       appW4_fabRespCredit_acc_v1$whas,
       appW4_fabRespCredit_acc_v2$whas,
       appW4_mesgPreRequest_1$wget,
       appW4_mesgPreRequest_1$whas,
       appW4_respF_pwDequeue$whas,
       appW4_respF_pwEnqueue$whas,
       appW4_respF_wDataIn$whas,
       appW4_respF_wDataOut$whas,
       appW4_wci_Es_mAddrSpace_w$wget,
       appW4_wci_Es_mAddrSpace_w$whas,
       appW4_wci_Es_mAddr_w$whas,
       appW4_wci_Es_mByteEn_w$whas,
       appW4_wci_Es_mCmd_w$whas,
       appW4_wci_Es_mData_w$whas,
       appW4_wci_ctlAckReg_1$wget,
       appW4_wci_ctlAckReg_1$whas,
       appW4_wci_reqF_r_clr$whas,
       appW4_wci_reqF_r_deq$whas,
       appW4_wci_reqF_r_enq$whas,
       appW4_wci_respF_dequeueing$whas,
       appW4_wci_respF_enqueueing$whas,
       appW4_wci_respF_x_wire$whas,
       appW4_wci_sFlagReg_1$wget,
       appW4_wci_sFlagReg_1$whas,
       appW4_wci_sThreadBusy_pw$whas,
       appW4_wci_wEdge$whas,
       appW4_wci_wciReq$whas,
       appW4_wci_wci_cfrd_pw$whas,
       appW4_wci_wci_cfwr_pw$whas,
       appW4_wci_wci_ctrl_pw$whas,
       appW4_wmi_Em_sData_w$whas,
       appW4_wmi_Em_sResp_w$whas,
       appW4_wmi_dhF_dequeueing$whas,
       appW4_wmi_dhF_enqueueing$whas,
       appW4_wmi_dhF_x_wire$whas,
       appW4_wmi_mFlagF_dequeueing$whas,
       appW4_wmi_mFlagF_enqueueing$whas,
       appW4_wmi_mFlagF_x_wire$whas,
       appW4_wmi_operateD_1$wget,
       appW4_wmi_operateD_1$whas,
       appW4_wmi_peerIsReady_1$wget,
       appW4_wmi_peerIsReady_1$whas,
       appW4_wmi_reqF_dequeueing$whas,
       appW4_wmi_reqF_enqueueing$whas,
       appW4_wmi_reqF_x_wire$whas,
       appW4_wmi_sDataThreadBusy_d_1$wget,
       appW4_wmi_sDataThreadBusy_d_1$whas,
       appW4_wmi_sThreadBusy_d_1$wget,
       appW4_wmi_sThreadBusy_d_1$whas,
       appW4_wmi_wmiResponse$whas,
       appW4_wsiM_operateD_1$wget,
       appW4_wsiM_operateD_1$whas,
       appW4_wsiM_peerIsReady_1$wget,
       appW4_wsiM_peerIsReady_1$whas,
       appW4_wsiM_reqFifo_dequeueing$whas,
       appW4_wsiM_reqFifo_enqueueing$whas,
       appW4_wsiM_reqFifo_x_wire$whas,
       appW4_wsiM_sThreadBusy_pw$whas,
       appW4_wsiS_operateD_1$wget,
       appW4_wsiS_operateD_1$whas,
       appW4_wsiS_peerIsReady_1$wget,
       appW4_wsiS_peerIsReady_1$whas,
       appW4_wsiS_reqFifo_doResetClr$whas,
       appW4_wsiS_reqFifo_doResetDeq$whas,
       appW4_wsiS_reqFifo_doResetEnq$whas,
       appW4_wsiS_reqFifo_r_clr$whas,
       appW4_wsiS_reqFifo_r_deq$whas,
       appW4_wsiS_reqFifo_r_enq$whas,
       appW4_wsiS_sThreadBusy_dw$wget,
       appW4_wsiS_sThreadBusy_dw$whas,
       appW4_wsiS_wsiReq$whas,
       appW4_wsi_Es_mBurstLength_w$whas,
       appW4_wsi_Es_mBurstPrecise_w$whas,
       appW4_wsi_Es_mByteEn_w$whas,
       appW4_wsi_Es_mCmd_w$whas,
       appW4_wsi_Es_mDataInfo_w$whas,
       appW4_wsi_Es_mData_w$whas,
       appW4_wsi_Es_mReqInfo_w$whas,
       appW4_wsi_Es_mReqLast_w$whas,
       tieOff0_wci_Es_mAddrSpace_w$wget,
       tieOff0_wci_Es_mAddrSpace_w$whas,
       tieOff0_wci_Es_mAddr_w$whas,
       tieOff0_wci_Es_mByteEn_w$whas,
       tieOff0_wci_Es_mCmd_w$whas,
       tieOff0_wci_Es_mData_w$whas,
       tieOff1_wci_Es_mAddrSpace_w$wget,
       tieOff1_wci_Es_mAddrSpace_w$whas,
       tieOff1_wci_Es_mAddr_w$whas,
       tieOff1_wci_Es_mByteEn_w$whas,
       tieOff1_wci_Es_mCmd_w$whas,
       tieOff1_wci_Es_mData_w$whas,
       tieOff5_wci_Es_mAddrSpace_w$wget,
       tieOff5_wci_Es_mAddrSpace_w$whas,
       tieOff5_wci_Es_mAddr_w$whas,
       tieOff5_wci_Es_mByteEn_w$whas,
       tieOff5_wci_Es_mCmd_w$whas,
       tieOff5_wci_Es_mData_w$whas,
       tieOff6_wci_Es_mAddrSpace_w$wget,
       tieOff6_wci_Es_mAddrSpace_w$whas,
       tieOff6_wci_Es_mAddr_w$whas,
       tieOff6_wci_Es_mByteEn_w$whas,
       tieOff6_wci_Es_mCmd_w$whas,
       tieOff6_wci_Es_mData_w$whas,
       tieOff7_wci_Es_mAddrSpace_w$wget,
       tieOff7_wci_Es_mAddrSpace_w$whas,
       tieOff7_wci_Es_mAddr_w$whas,
       tieOff7_wci_Es_mByteEn_w$whas,
       tieOff7_wci_Es_mCmd_w$whas,
       tieOff7_wci_Es_mData_w$whas;

  // register appW2_abortCount
  reg [31 : 0] appW2_abortCount;
  wire [31 : 0] appW2_abortCount$D_IN;
  wire appW2_abortCount$EN;

  // register appW2_doAbort
  reg appW2_doAbort;
  wire appW2_doAbort$D_IN, appW2_doAbort$EN;

  // register appW2_endOfMessage
  reg appW2_endOfMessage;
  wire appW2_endOfMessage$D_IN, appW2_endOfMessage$EN;

  // register appW2_errCount
  reg [31 : 0] appW2_errCount;
  wire [31 : 0] appW2_errCount$D_IN;
  wire appW2_errCount$EN;

  // register appW2_fabRespCredit_value
  reg [11 : 0] appW2_fabRespCredit_value;
  wire [11 : 0] appW2_fabRespCredit_value$D_IN;
  wire appW2_fabRespCredit_value$EN;

  // register appW2_fabWordsCurReq
  reg [13 : 0] appW2_fabWordsCurReq;
  wire [13 : 0] appW2_fabWordsCurReq$D_IN;
  wire appW2_fabWordsCurReq$EN;

  // register appW2_fabWordsRemain
  reg [13 : 0] appW2_fabWordsRemain;
  wire [13 : 0] appW2_fabWordsRemain$D_IN;
  wire appW2_fabWordsRemain$EN;

  // register appW2_firstMsgReq
  reg appW2_firstMsgReq;
  wire appW2_firstMsgReq$D_IN, appW2_firstMsgReq$EN;

  // register appW2_impreciseBurst
  reg appW2_impreciseBurst;
  wire appW2_impreciseBurst$D_IN, appW2_impreciseBurst$EN;

  // register appW2_lastMesg
  reg [31 : 0] appW2_lastMesg;
  wire [31 : 0] appW2_lastMesg$D_IN;
  wire appW2_lastMesg$EN;

  // register appW2_mesgCount
  reg [31 : 0] appW2_mesgCount;
  reg [31 : 0] appW2_mesgCount$D_IN;
  wire appW2_mesgCount$EN;

  // register appW2_mesgLength
  reg [14 : 0] appW2_mesgLength;
  reg [14 : 0] appW2_mesgLength$D_IN;
  wire appW2_mesgLength$EN;

  // register appW2_mesgLengthSoFar
  reg [13 : 0] appW2_mesgLengthSoFar;
  wire [13 : 0] appW2_mesgLengthSoFar$D_IN;
  wire appW2_mesgLengthSoFar$EN;

  // register appW2_mesgPreRequest
  reg appW2_mesgPreRequest;
  wire appW2_mesgPreRequest$D_IN, appW2_mesgPreRequest$EN;

  // register appW2_mesgReqAddr
  reg [13 : 0] appW2_mesgReqAddr;
  wire [13 : 0] appW2_mesgReqAddr$D_IN;
  wire appW2_mesgReqAddr$EN;

  // register appW2_mesgReqOK
  reg appW2_mesgReqOK;
  wire appW2_mesgReqOK$D_IN, appW2_mesgReqOK$EN;

  // register appW2_mesgReqValid
  reg appW2_mesgReqValid;
  wire appW2_mesgReqValid$D_IN, appW2_mesgReqValid$EN;

  // register appW2_opcode
  reg [8 : 0] appW2_opcode;
  wire [8 : 0] appW2_opcode$D_IN;
  wire appW2_opcode$EN;

  // register appW2_preciseBurst
  reg appW2_preciseBurst;
  wire appW2_preciseBurst$D_IN, appW2_preciseBurst$EN;

  // register appW2_readyToPush
  reg appW2_readyToPush;
  wire appW2_readyToPush$D_IN, appW2_readyToPush$EN;

  // register appW2_readyToRequest
  reg appW2_readyToRequest;
  wire appW2_readyToRequest$D_IN, appW2_readyToRequest$EN;

  // register appW2_respF_rCache
  reg [73 : 0] appW2_respF_rCache;
  wire [73 : 0] appW2_respF_rCache$D_IN;
  wire appW2_respF_rCache$EN;

  // register appW2_respF_rRdPtr
  reg [11 : 0] appW2_respF_rRdPtr;
  wire [11 : 0] appW2_respF_rRdPtr$D_IN;
  wire appW2_respF_rRdPtr$EN;

  // register appW2_respF_rWrPtr
  reg [11 : 0] appW2_respF_rWrPtr;
  wire [11 : 0] appW2_respF_rWrPtr$D_IN;
  wire appW2_respF_rWrPtr$EN;

  // register appW2_smaCtrl
  reg [31 : 0] appW2_smaCtrl;
  wire [31 : 0] appW2_smaCtrl$D_IN;
  wire appW2_smaCtrl$EN;

  // register appW2_thisMesg
  reg [31 : 0] appW2_thisMesg;
  reg [31 : 0] appW2_thisMesg$D_IN;
  wire appW2_thisMesg$EN;

  // register appW2_unrollCnt
  reg [15 : 0] appW2_unrollCnt;
  wire [15 : 0] appW2_unrollCnt$D_IN;
  wire appW2_unrollCnt$EN;

  // register appW2_valExpect
  reg [31 : 0] appW2_valExpect;
  wire [31 : 0] appW2_valExpect$D_IN;
  wire appW2_valExpect$EN;

  // register appW2_wci_cEdge
  reg [2 : 0] appW2_wci_cEdge;
  wire [2 : 0] appW2_wci_cEdge$D_IN;
  wire appW2_wci_cEdge$EN;

  // register appW2_wci_cState
  reg [2 : 0] appW2_wci_cState;
  wire [2 : 0] appW2_wci_cState$D_IN;
  wire appW2_wci_cState$EN;

  // register appW2_wci_ctlAckReg
  reg appW2_wci_ctlAckReg;
  wire appW2_wci_ctlAckReg$D_IN, appW2_wci_ctlAckReg$EN;

  // register appW2_wci_ctlOpActive
  reg appW2_wci_ctlOpActive;
  wire appW2_wci_ctlOpActive$D_IN, appW2_wci_ctlOpActive$EN;

  // register appW2_wci_illegalEdge
  reg appW2_wci_illegalEdge;
  wire appW2_wci_illegalEdge$D_IN, appW2_wci_illegalEdge$EN;

  // register appW2_wci_nState
  reg [2 : 0] appW2_wci_nState;
  reg [2 : 0] appW2_wci_nState$D_IN;
  wire appW2_wci_nState$EN;

  // register appW2_wci_reqF_countReg
  reg [1 : 0] appW2_wci_reqF_countReg;
  wire [1 : 0] appW2_wci_reqF_countReg$D_IN;
  wire appW2_wci_reqF_countReg$EN;

  // register appW2_wci_respF_c_r
  reg [1 : 0] appW2_wci_respF_c_r;
  wire [1 : 0] appW2_wci_respF_c_r$D_IN;
  wire appW2_wci_respF_c_r$EN;

  // register appW2_wci_respF_q_0
  reg [33 : 0] appW2_wci_respF_q_0;
  reg [33 : 0] appW2_wci_respF_q_0$D_IN;
  wire appW2_wci_respF_q_0$EN;

  // register appW2_wci_respF_q_1
  reg [33 : 0] appW2_wci_respF_q_1;
  reg [33 : 0] appW2_wci_respF_q_1$D_IN;
  wire appW2_wci_respF_q_1$EN;

  // register appW2_wci_sFlagReg
  reg appW2_wci_sFlagReg;
  wire appW2_wci_sFlagReg$D_IN, appW2_wci_sFlagReg$EN;

  // register appW2_wci_sThreadBusy_d
  reg appW2_wci_sThreadBusy_d;
  wire appW2_wci_sThreadBusy_d$D_IN, appW2_wci_sThreadBusy_d$EN;

  // register appW2_wmi_busyWithMessage
  reg appW2_wmi_busyWithMessage;
  wire appW2_wmi_busyWithMessage$D_IN, appW2_wmi_busyWithMessage$EN;

  // register appW2_wmi_dhF_c_r
  reg [1 : 0] appW2_wmi_dhF_c_r;
  wire [1 : 0] appW2_wmi_dhF_c_r$D_IN;
  wire appW2_wmi_dhF_c_r$EN;

  // register appW2_wmi_dhF_q_0
  reg [37 : 0] appW2_wmi_dhF_q_0;
  reg [37 : 0] appW2_wmi_dhF_q_0$D_IN;
  wire appW2_wmi_dhF_q_0$EN;

  // register appW2_wmi_dhF_q_1
  reg [37 : 0] appW2_wmi_dhF_q_1;
  reg [37 : 0] appW2_wmi_dhF_q_1$D_IN;
  wire appW2_wmi_dhF_q_1$EN;

  // register appW2_wmi_errorSticky
  reg appW2_wmi_errorSticky;
  wire appW2_wmi_errorSticky$D_IN, appW2_wmi_errorSticky$EN;

  // register appW2_wmi_mFlagF_c_r
  reg [1 : 0] appW2_wmi_mFlagF_c_r;
  wire [1 : 0] appW2_wmi_mFlagF_c_r$D_IN;
  wire appW2_wmi_mFlagF_c_r$EN;

  // register appW2_wmi_mFlagF_q_0
  reg [31 : 0] appW2_wmi_mFlagF_q_0;
  reg [31 : 0] appW2_wmi_mFlagF_q_0$D_IN;
  wire appW2_wmi_mFlagF_q_0$EN;

  // register appW2_wmi_mFlagF_q_1
  reg [31 : 0] appW2_wmi_mFlagF_q_1;
  reg [31 : 0] appW2_wmi_mFlagF_q_1$D_IN;
  wire appW2_wmi_mFlagF_q_1$EN;

  // register appW2_wmi_operateD
  reg appW2_wmi_operateD;
  wire appW2_wmi_operateD$D_IN, appW2_wmi_operateD$EN;

  // register appW2_wmi_peerIsReady
  reg appW2_wmi_peerIsReady;
  wire appW2_wmi_peerIsReady$D_IN, appW2_wmi_peerIsReady$EN;

  // register appW2_wmi_reqF_c_r
  reg [1 : 0] appW2_wmi_reqF_c_r;
  wire [1 : 0] appW2_wmi_reqF_c_r$D_IN;
  wire appW2_wmi_reqF_c_r$EN;

  // register appW2_wmi_reqF_q_0
  reg [31 : 0] appW2_wmi_reqF_q_0;
  reg [31 : 0] appW2_wmi_reqF_q_0$D_IN;
  wire appW2_wmi_reqF_q_0$EN;

  // register appW2_wmi_reqF_q_1
  reg [31 : 0] appW2_wmi_reqF_q_1;
  reg [31 : 0] appW2_wmi_reqF_q_1$D_IN;
  wire appW2_wmi_reqF_q_1$EN;

  // register appW2_wmi_sDataThreadBusy_d
  reg appW2_wmi_sDataThreadBusy_d;
  wire appW2_wmi_sDataThreadBusy_d$D_IN, appW2_wmi_sDataThreadBusy_d$EN;

  // register appW2_wmi_sFlagReg
  reg [31 : 0] appW2_wmi_sFlagReg;
  wire [31 : 0] appW2_wmi_sFlagReg$D_IN;
  wire appW2_wmi_sFlagReg$EN;

  // register appW2_wmi_sThreadBusy_d
  reg appW2_wmi_sThreadBusy_d;
  wire appW2_wmi_sThreadBusy_d$D_IN, appW2_wmi_sThreadBusy_d$EN;

  // register appW2_wmi_statusR
  reg [7 : 0] appW2_wmi_statusR;
  wire [7 : 0] appW2_wmi_statusR$D_IN;
  wire appW2_wmi_statusR$EN;

  // register appW2_wmi_trafficSticky
  reg appW2_wmi_trafficSticky;
  wire appW2_wmi_trafficSticky$D_IN, appW2_wmi_trafficSticky$EN;

  // register appW2_wsiM_burstKind
  reg [1 : 0] appW2_wsiM_burstKind;
  wire [1 : 0] appW2_wsiM_burstKind$D_IN;
  wire appW2_wsiM_burstKind$EN;

  // register appW2_wsiM_errorSticky
  reg appW2_wsiM_errorSticky;
  wire appW2_wsiM_errorSticky$D_IN, appW2_wsiM_errorSticky$EN;

  // register appW2_wsiM_iMesgCount
  reg [31 : 0] appW2_wsiM_iMesgCount;
  wire [31 : 0] appW2_wsiM_iMesgCount$D_IN;
  wire appW2_wsiM_iMesgCount$EN;

  // register appW2_wsiM_operateD
  reg appW2_wsiM_operateD;
  wire appW2_wsiM_operateD$D_IN, appW2_wsiM_operateD$EN;

  // register appW2_wsiM_pMesgCount
  reg [31 : 0] appW2_wsiM_pMesgCount;
  wire [31 : 0] appW2_wsiM_pMesgCount$D_IN;
  wire appW2_wsiM_pMesgCount$EN;

  // register appW2_wsiM_peerIsReady
  reg appW2_wsiM_peerIsReady;
  wire appW2_wsiM_peerIsReady$D_IN, appW2_wsiM_peerIsReady$EN;

  // register appW2_wsiM_reqFifo_c_r
  reg [1 : 0] appW2_wsiM_reqFifo_c_r;
  wire [1 : 0] appW2_wsiM_reqFifo_c_r$D_IN;
  wire appW2_wsiM_reqFifo_c_r$EN;

  // register appW2_wsiM_reqFifo_q_0
  reg [60 : 0] appW2_wsiM_reqFifo_q_0;
  reg [60 : 0] appW2_wsiM_reqFifo_q_0$D_IN;
  wire appW2_wsiM_reqFifo_q_0$EN;

  // register appW2_wsiM_reqFifo_q_1
  reg [60 : 0] appW2_wsiM_reqFifo_q_1;
  reg [60 : 0] appW2_wsiM_reqFifo_q_1$D_IN;
  wire appW2_wsiM_reqFifo_q_1$EN;

  // register appW2_wsiM_sThreadBusy_d
  reg appW2_wsiM_sThreadBusy_d;
  wire appW2_wsiM_sThreadBusy_d$D_IN, appW2_wsiM_sThreadBusy_d$EN;

  // register appW2_wsiM_statusR
  reg [7 : 0] appW2_wsiM_statusR;
  wire [7 : 0] appW2_wsiM_statusR$D_IN;
  wire appW2_wsiM_statusR$EN;

  // register appW2_wsiM_tBusyCount
  reg [31 : 0] appW2_wsiM_tBusyCount;
  wire [31 : 0] appW2_wsiM_tBusyCount$D_IN;
  wire appW2_wsiM_tBusyCount$EN;

  // register appW2_wsiM_trafficSticky
  reg appW2_wsiM_trafficSticky;
  wire appW2_wsiM_trafficSticky$D_IN, appW2_wsiM_trafficSticky$EN;

  // register appW2_wsiS_burstKind
  reg [1 : 0] appW2_wsiS_burstKind;
  wire [1 : 0] appW2_wsiS_burstKind$D_IN;
  wire appW2_wsiS_burstKind$EN;

  // register appW2_wsiS_errorSticky
  reg appW2_wsiS_errorSticky;
  wire appW2_wsiS_errorSticky$D_IN, appW2_wsiS_errorSticky$EN;

  // register appW2_wsiS_iMesgCount
  reg [31 : 0] appW2_wsiS_iMesgCount;
  wire [31 : 0] appW2_wsiS_iMesgCount$D_IN;
  wire appW2_wsiS_iMesgCount$EN;

  // register appW2_wsiS_mesgWordLength
  reg [11 : 0] appW2_wsiS_mesgWordLength;
  wire [11 : 0] appW2_wsiS_mesgWordLength$D_IN;
  wire appW2_wsiS_mesgWordLength$EN;

  // register appW2_wsiS_operateD
  reg appW2_wsiS_operateD;
  wire appW2_wsiS_operateD$D_IN, appW2_wsiS_operateD$EN;

  // register appW2_wsiS_pMesgCount
  reg [31 : 0] appW2_wsiS_pMesgCount;
  wire [31 : 0] appW2_wsiS_pMesgCount$D_IN;
  wire appW2_wsiS_pMesgCount$EN;

  // register appW2_wsiS_peerIsReady
  reg appW2_wsiS_peerIsReady;
  wire appW2_wsiS_peerIsReady$D_IN, appW2_wsiS_peerIsReady$EN;

  // register appW2_wsiS_reqFifo_countReg
  reg [1 : 0] appW2_wsiS_reqFifo_countReg;
  wire [1 : 0] appW2_wsiS_reqFifo_countReg$D_IN;
  wire appW2_wsiS_reqFifo_countReg$EN;

  // register appW2_wsiS_reqFifo_levelsValid
  reg appW2_wsiS_reqFifo_levelsValid;
  wire appW2_wsiS_reqFifo_levelsValid$D_IN, appW2_wsiS_reqFifo_levelsValid$EN;

  // register appW2_wsiS_statusR
  reg [7 : 0] appW2_wsiS_statusR;
  wire [7 : 0] appW2_wsiS_statusR$D_IN;
  wire appW2_wsiS_statusR$EN;

  // register appW2_wsiS_tBusyCount
  reg [31 : 0] appW2_wsiS_tBusyCount;
  wire [31 : 0] appW2_wsiS_tBusyCount$D_IN;
  wire appW2_wsiS_tBusyCount$EN;

  // register appW2_wsiS_trafficSticky
  reg appW2_wsiS_trafficSticky;
  wire appW2_wsiS_trafficSticky$D_IN, appW2_wsiS_trafficSticky$EN;

  // register appW2_wsiS_wordCount
  reg [11 : 0] appW2_wsiS_wordCount;
  wire [11 : 0] appW2_wsiS_wordCount$D_IN;
  wire appW2_wsiS_wordCount$EN;

  // register appW2_wsiWordsRemain
  reg [11 : 0] appW2_wsiWordsRemain;
  wire [11 : 0] appW2_wsiWordsRemain$D_IN;
  wire appW2_wsiWordsRemain$EN;

  // register appW2_zeroLengthMesg
  reg appW2_zeroLengthMesg;
  wire appW2_zeroLengthMesg$D_IN, appW2_zeroLengthMesg$EN;

  // register appW3_bytesRead
  reg [31 : 0] appW3_bytesRead;
  wire [31 : 0] appW3_bytesRead$D_IN;
  wire appW3_bytesRead$EN;

  // register appW3_bytesThisMessage
  reg [23 : 0] appW3_bytesThisMessage;
  wire [23 : 0] appW3_bytesThisMessage$D_IN;
  wire appW3_bytesThisMessage$EN;

  // register appW3_bytesWritten
  reg [31 : 0] appW3_bytesWritten;
  wire [31 : 0] appW3_bytesWritten$D_IN;
  wire appW3_bytesWritten$EN;

  // register appW3_cyclesPassed
  reg [31 : 0] appW3_cyclesPassed;
  wire [31 : 0] appW3_cyclesPassed$D_IN;
  wire appW3_cyclesPassed$EN;

  // register appW3_dlyCtrl
  reg [31 : 0] appW3_dlyCtrl;
  wire [31 : 0] appW3_dlyCtrl$D_IN;
  wire appW3_dlyCtrl$EN;

  // register appW3_dlyHoldoffBytes
  reg [31 : 0] appW3_dlyHoldoffBytes;
  wire [31 : 0] appW3_dlyHoldoffBytes$D_IN;
  wire appW3_dlyHoldoffBytes$EN;

  // register appW3_dlyHoldoffCycles
  reg [31 : 0] appW3_dlyHoldoffCycles;
  wire [31 : 0] appW3_dlyHoldoffCycles$D_IN;
  wire appW3_dlyHoldoffCycles$EN;

  // register appW3_dlyRAG
  reg [22 : 0] appW3_dlyRAG;
  wire [22 : 0] appW3_dlyRAG$D_IN;
  wire appW3_dlyRAG$EN;

  // register appW3_dlyRdOpOther
  reg [31 : 0] appW3_dlyRdOpOther;
  wire [31 : 0] appW3_dlyRdOpOther$D_IN;
  wire appW3_dlyRdOpOther$EN;

  // register appW3_dlyRdOpZero
  reg [31 : 0] appW3_dlyRdOpZero;
  wire [31 : 0] appW3_dlyRdOpZero$D_IN;
  wire appW3_dlyRdOpZero$EN;

  // register appW3_dlyReadCredit_value
  reg [7 : 0] appW3_dlyReadCredit_value;
  wire [7 : 0] appW3_dlyReadCredit_value$D_IN;
  wire appW3_dlyReadCredit_value$EN;

  // register appW3_dlyReadyToWrite_value
  reg [15 : 0] appW3_dlyReadyToWrite_value;
  wire [15 : 0] appW3_dlyReadyToWrite_value$D_IN;
  wire appW3_dlyReadyToWrite_value$EN;

  // register appW3_dlyWAG
  reg [22 : 0] appW3_dlyWAG;
  wire [22 : 0] appW3_dlyWAG$D_IN;
  wire appW3_dlyWAG$EN;

  // register appW3_dlyWordsStored_value
  reg [24 : 0] appW3_dlyWordsStored_value;
  wire [24 : 0] appW3_dlyWordsStored_value$D_IN;
  wire appW3_dlyWordsStored_value$EN;

  // register appW3_mesgLengthSoFar
  reg [13 : 0] appW3_mesgLengthSoFar;
  wire [13 : 0] appW3_mesgLengthSoFar$D_IN;
  wire appW3_mesgLengthSoFar$EN;

  // register appW3_mesgRdCount
  reg [31 : 0] appW3_mesgRdCount;
  wire [31 : 0] appW3_mesgRdCount$D_IN;
  wire appW3_mesgRdCount$EN;

  // register appW3_mesgWF_rCache
  reg [45 : 0] appW3_mesgWF_rCache;
  wire [45 : 0] appW3_mesgWF_rCache$D_IN;
  wire appW3_mesgWF_rCache$EN;

  // register appW3_mesgWF_rRdPtr
  reg [12 : 0] appW3_mesgWF_rRdPtr;
  wire [12 : 0] appW3_mesgWF_rRdPtr$D_IN;
  wire appW3_mesgWF_rRdPtr$EN;

  // register appW3_mesgWF_rWrPtr
  reg [12 : 0] appW3_mesgWF_rWrPtr;
  wire [12 : 0] appW3_mesgWF_rWrPtr$D_IN;
  wire appW3_mesgWF_rWrPtr$EN;

  // register appW3_mesgWtCount
  reg [31 : 0] appW3_mesgWtCount;
  wire [31 : 0] appW3_mesgWtCount$D_IN;
  wire appW3_mesgWtCount$EN;

  // register appW3_rdSerAddr
  reg [31 : 0] appW3_rdSerAddr;
  wire [31 : 0] appW3_rdSerAddr$D_IN;
  wire appW3_rdSerAddr$EN;

  // register appW3_rdSerEmpty
  reg appW3_rdSerEmpty;
  wire appW3_rdSerEmpty$D_IN, appW3_rdSerEmpty$EN;

  // register appW3_rdSerMeta
  reg [31 : 0] appW3_rdSerMeta;
  wire [31 : 0] appW3_rdSerMeta$D_IN;
  wire appW3_rdSerMeta$EN;

  // register appW3_rdSerPos
  reg [1 : 0] appW3_rdSerPos;
  wire [1 : 0] appW3_rdSerPos$D_IN;
  wire appW3_rdSerPos$EN;

  // register appW3_rdSerStage
  reg [31 : 0] appW3_rdSerStage;
  wire [31 : 0] appW3_rdSerStage$D_IN;
  wire appW3_rdSerStage$EN;

  // register appW3_rdSerStage_1
  reg [31 : 0] appW3_rdSerStage_1;
  wire [31 : 0] appW3_rdSerStage_1$D_IN;
  wire appW3_rdSerStage_1$EN;

  // register appW3_rdSerStage_2
  reg [31 : 0] appW3_rdSerStage_2;
  wire [31 : 0] appW3_rdSerStage_2$D_IN;
  wire appW3_rdSerStage_2$EN;

  // register appW3_rdSerStage_3
  reg [31 : 0] appW3_rdSerStage_3;
  wire [31 : 0] appW3_rdSerStage_3$D_IN;
  wire appW3_rdSerStage_3$EN;

  // register appW3_rdSerUnroll
  reg [15 : 0] appW3_rdSerUnroll;
  wire [15 : 0] appW3_rdSerUnroll$D_IN;
  wire appW3_rdSerUnroll$EN;

  // register appW3_rdSyncWord
  reg appW3_rdSyncWord;
  reg appW3_rdSyncWord$D_IN;
  wire appW3_rdSyncWord$EN;

  // register appW3_readMeta
  reg [31 : 0] appW3_readMeta;
  wire [31 : 0] appW3_readMeta$D_IN;
  wire appW3_readMeta$EN;

  // register appW3_tog50
  reg appW3_tog50;
  wire appW3_tog50$D_IN, appW3_tog50$EN;

  // register appW3_unrollCnt
  reg [15 : 0] appW3_unrollCnt;
  wire [15 : 0] appW3_unrollCnt$D_IN;
  wire appW3_unrollCnt$EN;

  // register appW3_wci_cEdge
  reg [2 : 0] appW3_wci_cEdge;
  wire [2 : 0] appW3_wci_cEdge$D_IN;
  wire appW3_wci_cEdge$EN;

  // register appW3_wci_cState
  reg [2 : 0] appW3_wci_cState;
  wire [2 : 0] appW3_wci_cState$D_IN;
  wire appW3_wci_cState$EN;

  // register appW3_wci_ctlAckReg
  reg appW3_wci_ctlAckReg;
  wire appW3_wci_ctlAckReg$D_IN, appW3_wci_ctlAckReg$EN;

  // register appW3_wci_ctlOpActive
  reg appW3_wci_ctlOpActive;
  wire appW3_wci_ctlOpActive$D_IN, appW3_wci_ctlOpActive$EN;

  // register appW3_wci_illegalEdge
  reg appW3_wci_illegalEdge;
  wire appW3_wci_illegalEdge$D_IN, appW3_wci_illegalEdge$EN;

  // register appW3_wci_nState
  reg [2 : 0] appW3_wci_nState;
  reg [2 : 0] appW3_wci_nState$D_IN;
  wire appW3_wci_nState$EN;

  // register appW3_wci_reqF_countReg
  reg [1 : 0] appW3_wci_reqF_countReg;
  wire [1 : 0] appW3_wci_reqF_countReg$D_IN;
  wire appW3_wci_reqF_countReg$EN;

  // register appW3_wci_respF_c_r
  reg [1 : 0] appW3_wci_respF_c_r;
  wire [1 : 0] appW3_wci_respF_c_r$D_IN;
  wire appW3_wci_respF_c_r$EN;

  // register appW3_wci_respF_q_0
  reg [33 : 0] appW3_wci_respF_q_0;
  reg [33 : 0] appW3_wci_respF_q_0$D_IN;
  wire appW3_wci_respF_q_0$EN;

  // register appW3_wci_respF_q_1
  reg [33 : 0] appW3_wci_respF_q_1;
  reg [33 : 0] appW3_wci_respF_q_1$D_IN;
  wire appW3_wci_respF_q_1$EN;

  // register appW3_wci_sFlagReg
  reg appW3_wci_sFlagReg;
  wire appW3_wci_sFlagReg$D_IN, appW3_wci_sFlagReg$EN;

  // register appW3_wci_sThreadBusy_d
  reg appW3_wci_sThreadBusy_d;
  wire appW3_wci_sThreadBusy_d$D_IN, appW3_wci_sThreadBusy_d$EN;

  // register appW3_wmemiRdReq
  reg [31 : 0] appW3_wmemiRdReq;
  wire [31 : 0] appW3_wmemiRdReq$D_IN;
  wire appW3_wmemiRdReq$EN;

  // register appW3_wmemiRdResp1
  reg [31 : 0] appW3_wmemiRdResp1;
  wire [31 : 0] appW3_wmemiRdResp1$D_IN;
  wire appW3_wmemiRdResp1$EN;

  // register appW3_wmemiRdResp2
  reg [31 : 0] appW3_wmemiRdResp2;
  wire [31 : 0] appW3_wmemiRdResp2$D_IN;
  wire appW3_wmemiRdResp2$EN;

  // register appW3_wmemiWrReq
  reg [31 : 0] appW3_wmemiWrReq;
  wire [31 : 0] appW3_wmemiWrReq$D_IN;
  wire appW3_wmemiWrReq$EN;

  // register appW3_wmemi_busyWithMessage
  reg appW3_wmemi_busyWithMessage;
  wire appW3_wmemi_busyWithMessage$D_IN, appW3_wmemi_busyWithMessage$EN;

  // register appW3_wmemi_dhF_c_r
  reg [1 : 0] appW3_wmemi_dhF_c_r;
  wire [1 : 0] appW3_wmemi_dhF_c_r$D_IN;
  wire appW3_wmemi_dhF_c_r$EN;

  // register appW3_wmemi_dhF_q_0
  reg [145 : 0] appW3_wmemi_dhF_q_0;
  reg [145 : 0] appW3_wmemi_dhF_q_0$D_IN;
  wire appW3_wmemi_dhF_q_0$EN;

  // register appW3_wmemi_dhF_q_1
  reg [145 : 0] appW3_wmemi_dhF_q_1;
  reg [145 : 0] appW3_wmemi_dhF_q_1$D_IN;
  wire appW3_wmemi_dhF_q_1$EN;

  // register appW3_wmemi_errorSticky
  reg appW3_wmemi_errorSticky;
  wire appW3_wmemi_errorSticky$D_IN, appW3_wmemi_errorSticky$EN;

  // register appW3_wmemi_operateD
  reg appW3_wmemi_operateD;
  wire appW3_wmemi_operateD$D_IN, appW3_wmemi_operateD$EN;

  // register appW3_wmemi_peerIsReady
  reg appW3_wmemi_peerIsReady;
  wire appW3_wmemi_peerIsReady$D_IN, appW3_wmemi_peerIsReady$EN;

  // register appW3_wmemi_reqF_c_r
  reg [1 : 0] appW3_wmemi_reqF_c_r;
  wire [1 : 0] appW3_wmemi_reqF_c_r$D_IN;
  wire appW3_wmemi_reqF_c_r$EN;

  // register appW3_wmemi_reqF_q_0
  reg [51 : 0] appW3_wmemi_reqF_q_0;
  reg [51 : 0] appW3_wmemi_reqF_q_0$D_IN;
  wire appW3_wmemi_reqF_q_0$EN;

  // register appW3_wmemi_reqF_q_1
  reg [51 : 0] appW3_wmemi_reqF_q_1;
  reg [51 : 0] appW3_wmemi_reqF_q_1$D_IN;
  wire appW3_wmemi_reqF_q_1$EN;

  // register appW3_wmemi_statusR
  reg [7 : 0] appW3_wmemi_statusR;
  wire [7 : 0] appW3_wmemi_statusR$D_IN;
  wire appW3_wmemi_statusR$EN;

  // register appW3_wmemi_trafficSticky
  reg appW3_wmemi_trafficSticky;
  wire appW3_wmemi_trafficSticky$D_IN, appW3_wmemi_trafficSticky$EN;

  // register appW3_wrtSerAddr
  reg [31 : 0] appW3_wrtSerAddr;
  wire [31 : 0] appW3_wrtSerAddr$D_IN;
  wire appW3_wrtSerAddr$EN;

  // register appW3_wrtSerPos
  reg [1 : 0] appW3_wrtSerPos;
  wire [1 : 0] appW3_wrtSerPos$D_IN;
  wire appW3_wrtSerPos$EN;

  // register appW3_wrtSerStage
  reg [31 : 0] appW3_wrtSerStage;
  wire [31 : 0] appW3_wrtSerStage$D_IN;
  wire appW3_wrtSerStage$EN;

  // register appW3_wrtSerStage_1
  reg [31 : 0] appW3_wrtSerStage_1;
  wire [31 : 0] appW3_wrtSerStage_1$D_IN;
  wire appW3_wrtSerStage_1$EN;

  // register appW3_wrtSerStage_2
  reg [31 : 0] appW3_wrtSerStage_2;
  wire [31 : 0] appW3_wrtSerStage_2$D_IN;
  wire appW3_wrtSerStage_2$EN;

  // register appW3_wrtSerStage_3
  reg [31 : 0] appW3_wrtSerStage_3;
  wire [31 : 0] appW3_wrtSerStage_3$D_IN;
  wire appW3_wrtSerStage_3$EN;

  // register appW3_wrtSerUnroll
  reg [15 : 0] appW3_wrtSerUnroll;
  wire [15 : 0] appW3_wrtSerUnroll$D_IN;
  wire appW3_wrtSerUnroll$EN;

  // register appW3_wsiM_burstKind
  reg [1 : 0] appW3_wsiM_burstKind;
  wire [1 : 0] appW3_wsiM_burstKind$D_IN;
  wire appW3_wsiM_burstKind$EN;

  // register appW3_wsiM_errorSticky
  reg appW3_wsiM_errorSticky;
  wire appW3_wsiM_errorSticky$D_IN, appW3_wsiM_errorSticky$EN;

  // register appW3_wsiM_iMesgCount
  reg [31 : 0] appW3_wsiM_iMesgCount;
  wire [31 : 0] appW3_wsiM_iMesgCount$D_IN;
  wire appW3_wsiM_iMesgCount$EN;

  // register appW3_wsiM_operateD
  reg appW3_wsiM_operateD;
  wire appW3_wsiM_operateD$D_IN, appW3_wsiM_operateD$EN;

  // register appW3_wsiM_pMesgCount
  reg [31 : 0] appW3_wsiM_pMesgCount;
  wire [31 : 0] appW3_wsiM_pMesgCount$D_IN;
  wire appW3_wsiM_pMesgCount$EN;

  // register appW3_wsiM_peerIsReady
  reg appW3_wsiM_peerIsReady;
  wire appW3_wsiM_peerIsReady$D_IN, appW3_wsiM_peerIsReady$EN;

  // register appW3_wsiM_reqFifo_c_r
  reg [1 : 0] appW3_wsiM_reqFifo_c_r;
  wire [1 : 0] appW3_wsiM_reqFifo_c_r$D_IN;
  wire appW3_wsiM_reqFifo_c_r$EN;

  // register appW3_wsiM_reqFifo_q_0
  reg [60 : 0] appW3_wsiM_reqFifo_q_0;
  reg [60 : 0] appW3_wsiM_reqFifo_q_0$D_IN;
  wire appW3_wsiM_reqFifo_q_0$EN;

  // register appW3_wsiM_reqFifo_q_1
  reg [60 : 0] appW3_wsiM_reqFifo_q_1;
  reg [60 : 0] appW3_wsiM_reqFifo_q_1$D_IN;
  wire appW3_wsiM_reqFifo_q_1$EN;

  // register appW3_wsiM_sThreadBusy_d
  reg appW3_wsiM_sThreadBusy_d;
  wire appW3_wsiM_sThreadBusy_d$D_IN, appW3_wsiM_sThreadBusy_d$EN;

  // register appW3_wsiM_statusR
  reg [7 : 0] appW3_wsiM_statusR;
  wire [7 : 0] appW3_wsiM_statusR$D_IN;
  wire appW3_wsiM_statusR$EN;

  // register appW3_wsiM_tBusyCount
  reg [31 : 0] appW3_wsiM_tBusyCount;
  wire [31 : 0] appW3_wsiM_tBusyCount$D_IN;
  wire appW3_wsiM_tBusyCount$EN;

  // register appW3_wsiM_trafficSticky
  reg appW3_wsiM_trafficSticky;
  wire appW3_wsiM_trafficSticky$D_IN, appW3_wsiM_trafficSticky$EN;

  // register appW3_wsiS_burstKind
  reg [1 : 0] appW3_wsiS_burstKind;
  wire [1 : 0] appW3_wsiS_burstKind$D_IN;
  wire appW3_wsiS_burstKind$EN;

  // register appW3_wsiS_errorSticky
  reg appW3_wsiS_errorSticky;
  wire appW3_wsiS_errorSticky$D_IN, appW3_wsiS_errorSticky$EN;

  // register appW3_wsiS_iMesgCount
  reg [31 : 0] appW3_wsiS_iMesgCount;
  wire [31 : 0] appW3_wsiS_iMesgCount$D_IN;
  wire appW3_wsiS_iMesgCount$EN;

  // register appW3_wsiS_mesgWordLength
  reg [11 : 0] appW3_wsiS_mesgWordLength;
  wire [11 : 0] appW3_wsiS_mesgWordLength$D_IN;
  wire appW3_wsiS_mesgWordLength$EN;

  // register appW3_wsiS_operateD
  reg appW3_wsiS_operateD;
  wire appW3_wsiS_operateD$D_IN, appW3_wsiS_operateD$EN;

  // register appW3_wsiS_pMesgCount
  reg [31 : 0] appW3_wsiS_pMesgCount;
  wire [31 : 0] appW3_wsiS_pMesgCount$D_IN;
  wire appW3_wsiS_pMesgCount$EN;

  // register appW3_wsiS_peerIsReady
  reg appW3_wsiS_peerIsReady;
  wire appW3_wsiS_peerIsReady$D_IN, appW3_wsiS_peerIsReady$EN;

  // register appW3_wsiS_reqFifo_countReg
  reg [1 : 0] appW3_wsiS_reqFifo_countReg;
  wire [1 : 0] appW3_wsiS_reqFifo_countReg$D_IN;
  wire appW3_wsiS_reqFifo_countReg$EN;

  // register appW3_wsiS_reqFifo_levelsValid
  reg appW3_wsiS_reqFifo_levelsValid;
  wire appW3_wsiS_reqFifo_levelsValid$D_IN, appW3_wsiS_reqFifo_levelsValid$EN;

  // register appW3_wsiS_statusR
  reg [7 : 0] appW3_wsiS_statusR;
  wire [7 : 0] appW3_wsiS_statusR$D_IN;
  wire appW3_wsiS_statusR$EN;

  // register appW3_wsiS_tBusyCount
  reg [31 : 0] appW3_wsiS_tBusyCount;
  wire [31 : 0] appW3_wsiS_tBusyCount$D_IN;
  wire appW3_wsiS_tBusyCount$EN;

  // register appW3_wsiS_trafficSticky
  reg appW3_wsiS_trafficSticky;
  wire appW3_wsiS_trafficSticky$D_IN, appW3_wsiS_trafficSticky$EN;

  // register appW3_wsiS_wordCount
  reg [11 : 0] appW3_wsiS_wordCount;
  wire [11 : 0] appW3_wsiS_wordCount$D_IN;
  wire appW3_wsiS_wordCount$EN;

  // register appW4_abortCount
  reg [31 : 0] appW4_abortCount;
  wire [31 : 0] appW4_abortCount$D_IN;
  wire appW4_abortCount$EN;

  // register appW4_doAbort
  reg appW4_doAbort;
  wire appW4_doAbort$D_IN, appW4_doAbort$EN;

  // register appW4_endOfMessage
  reg appW4_endOfMessage;
  wire appW4_endOfMessage$D_IN, appW4_endOfMessage$EN;

  // register appW4_errCount
  reg [31 : 0] appW4_errCount;
  wire [31 : 0] appW4_errCount$D_IN;
  wire appW4_errCount$EN;

  // register appW4_fabRespCredit_value
  reg [11 : 0] appW4_fabRespCredit_value;
  wire [11 : 0] appW4_fabRespCredit_value$D_IN;
  wire appW4_fabRespCredit_value$EN;

  // register appW4_fabWordsCurReq
  reg [13 : 0] appW4_fabWordsCurReq;
  wire [13 : 0] appW4_fabWordsCurReq$D_IN;
  wire appW4_fabWordsCurReq$EN;

  // register appW4_fabWordsRemain
  reg [13 : 0] appW4_fabWordsRemain;
  wire [13 : 0] appW4_fabWordsRemain$D_IN;
  wire appW4_fabWordsRemain$EN;

  // register appW4_firstMsgReq
  reg appW4_firstMsgReq;
  wire appW4_firstMsgReq$D_IN, appW4_firstMsgReq$EN;

  // register appW4_impreciseBurst
  reg appW4_impreciseBurst;
  wire appW4_impreciseBurst$D_IN, appW4_impreciseBurst$EN;

  // register appW4_lastMesg
  reg [31 : 0] appW4_lastMesg;
  wire [31 : 0] appW4_lastMesg$D_IN;
  wire appW4_lastMesg$EN;

  // register appW4_mesgCount
  reg [31 : 0] appW4_mesgCount;
  reg [31 : 0] appW4_mesgCount$D_IN;
  wire appW4_mesgCount$EN;

  // register appW4_mesgLength
  reg [14 : 0] appW4_mesgLength;
  reg [14 : 0] appW4_mesgLength$D_IN;
  wire appW4_mesgLength$EN;

  // register appW4_mesgLengthSoFar
  reg [13 : 0] appW4_mesgLengthSoFar;
  wire [13 : 0] appW4_mesgLengthSoFar$D_IN;
  wire appW4_mesgLengthSoFar$EN;

  // register appW4_mesgPreRequest
  reg appW4_mesgPreRequest;
  wire appW4_mesgPreRequest$D_IN, appW4_mesgPreRequest$EN;

  // register appW4_mesgReqAddr
  reg [13 : 0] appW4_mesgReqAddr;
  wire [13 : 0] appW4_mesgReqAddr$D_IN;
  wire appW4_mesgReqAddr$EN;

  // register appW4_mesgReqOK
  reg appW4_mesgReqOK;
  wire appW4_mesgReqOK$D_IN, appW4_mesgReqOK$EN;

  // register appW4_mesgReqValid
  reg appW4_mesgReqValid;
  wire appW4_mesgReqValid$D_IN, appW4_mesgReqValid$EN;

  // register appW4_opcode
  reg [8 : 0] appW4_opcode;
  wire [8 : 0] appW4_opcode$D_IN;
  wire appW4_opcode$EN;

  // register appW4_preciseBurst
  reg appW4_preciseBurst;
  wire appW4_preciseBurst$D_IN, appW4_preciseBurst$EN;

  // register appW4_readyToPush
  reg appW4_readyToPush;
  wire appW4_readyToPush$D_IN, appW4_readyToPush$EN;

  // register appW4_readyToRequest
  reg appW4_readyToRequest;
  wire appW4_readyToRequest$D_IN, appW4_readyToRequest$EN;

  // register appW4_respF_rCache
  reg [73 : 0] appW4_respF_rCache;
  wire [73 : 0] appW4_respF_rCache$D_IN;
  wire appW4_respF_rCache$EN;

  // register appW4_respF_rRdPtr
  reg [11 : 0] appW4_respF_rRdPtr;
  wire [11 : 0] appW4_respF_rRdPtr$D_IN;
  wire appW4_respF_rRdPtr$EN;

  // register appW4_respF_rWrPtr
  reg [11 : 0] appW4_respF_rWrPtr;
  wire [11 : 0] appW4_respF_rWrPtr$D_IN;
  wire appW4_respF_rWrPtr$EN;

  // register appW4_smaCtrl
  reg [31 : 0] appW4_smaCtrl;
  wire [31 : 0] appW4_smaCtrl$D_IN;
  wire appW4_smaCtrl$EN;

  // register appW4_thisMesg
  reg [31 : 0] appW4_thisMesg;
  reg [31 : 0] appW4_thisMesg$D_IN;
  wire appW4_thisMesg$EN;

  // register appW4_unrollCnt
  reg [15 : 0] appW4_unrollCnt;
  wire [15 : 0] appW4_unrollCnt$D_IN;
  wire appW4_unrollCnt$EN;

  // register appW4_valExpect
  reg [31 : 0] appW4_valExpect;
  wire [31 : 0] appW4_valExpect$D_IN;
  wire appW4_valExpect$EN;

  // register appW4_wci_cEdge
  reg [2 : 0] appW4_wci_cEdge;
  wire [2 : 0] appW4_wci_cEdge$D_IN;
  wire appW4_wci_cEdge$EN;

  // register appW4_wci_cState
  reg [2 : 0] appW4_wci_cState;
  wire [2 : 0] appW4_wci_cState$D_IN;
  wire appW4_wci_cState$EN;

  // register appW4_wci_ctlAckReg
  reg appW4_wci_ctlAckReg;
  wire appW4_wci_ctlAckReg$D_IN, appW4_wci_ctlAckReg$EN;

  // register appW4_wci_ctlOpActive
  reg appW4_wci_ctlOpActive;
  wire appW4_wci_ctlOpActive$D_IN, appW4_wci_ctlOpActive$EN;

  // register appW4_wci_illegalEdge
  reg appW4_wci_illegalEdge;
  wire appW4_wci_illegalEdge$D_IN, appW4_wci_illegalEdge$EN;

  // register appW4_wci_nState
  reg [2 : 0] appW4_wci_nState;
  reg [2 : 0] appW4_wci_nState$D_IN;
  wire appW4_wci_nState$EN;

  // register appW4_wci_reqF_countReg
  reg [1 : 0] appW4_wci_reqF_countReg;
  wire [1 : 0] appW4_wci_reqF_countReg$D_IN;
  wire appW4_wci_reqF_countReg$EN;

  // register appW4_wci_respF_c_r
  reg [1 : 0] appW4_wci_respF_c_r;
  wire [1 : 0] appW4_wci_respF_c_r$D_IN;
  wire appW4_wci_respF_c_r$EN;

  // register appW4_wci_respF_q_0
  reg [33 : 0] appW4_wci_respF_q_0;
  reg [33 : 0] appW4_wci_respF_q_0$D_IN;
  wire appW4_wci_respF_q_0$EN;

  // register appW4_wci_respF_q_1
  reg [33 : 0] appW4_wci_respF_q_1;
  reg [33 : 0] appW4_wci_respF_q_1$D_IN;
  wire appW4_wci_respF_q_1$EN;

  // register appW4_wci_sFlagReg
  reg appW4_wci_sFlagReg;
  wire appW4_wci_sFlagReg$D_IN, appW4_wci_sFlagReg$EN;

  // register appW4_wci_sThreadBusy_d
  reg appW4_wci_sThreadBusy_d;
  wire appW4_wci_sThreadBusy_d$D_IN, appW4_wci_sThreadBusy_d$EN;

  // register appW4_wmi_busyWithMessage
  reg appW4_wmi_busyWithMessage;
  wire appW4_wmi_busyWithMessage$D_IN, appW4_wmi_busyWithMessage$EN;

  // register appW4_wmi_dhF_c_r
  reg [1 : 0] appW4_wmi_dhF_c_r;
  wire [1 : 0] appW4_wmi_dhF_c_r$D_IN;
  wire appW4_wmi_dhF_c_r$EN;

  // register appW4_wmi_dhF_q_0
  reg [37 : 0] appW4_wmi_dhF_q_0;
  reg [37 : 0] appW4_wmi_dhF_q_0$D_IN;
  wire appW4_wmi_dhF_q_0$EN;

  // register appW4_wmi_dhF_q_1
  reg [37 : 0] appW4_wmi_dhF_q_1;
  reg [37 : 0] appW4_wmi_dhF_q_1$D_IN;
  wire appW4_wmi_dhF_q_1$EN;

  // register appW4_wmi_errorSticky
  reg appW4_wmi_errorSticky;
  wire appW4_wmi_errorSticky$D_IN, appW4_wmi_errorSticky$EN;

  // register appW4_wmi_mFlagF_c_r
  reg [1 : 0] appW4_wmi_mFlagF_c_r;
  wire [1 : 0] appW4_wmi_mFlagF_c_r$D_IN;
  wire appW4_wmi_mFlagF_c_r$EN;

  // register appW4_wmi_mFlagF_q_0
  reg [31 : 0] appW4_wmi_mFlagF_q_0;
  reg [31 : 0] appW4_wmi_mFlagF_q_0$D_IN;
  wire appW4_wmi_mFlagF_q_0$EN;

  // register appW4_wmi_mFlagF_q_1
  reg [31 : 0] appW4_wmi_mFlagF_q_1;
  reg [31 : 0] appW4_wmi_mFlagF_q_1$D_IN;
  wire appW4_wmi_mFlagF_q_1$EN;

  // register appW4_wmi_operateD
  reg appW4_wmi_operateD;
  wire appW4_wmi_operateD$D_IN, appW4_wmi_operateD$EN;

  // register appW4_wmi_peerIsReady
  reg appW4_wmi_peerIsReady;
  wire appW4_wmi_peerIsReady$D_IN, appW4_wmi_peerIsReady$EN;

  // register appW4_wmi_reqF_c_r
  reg [1 : 0] appW4_wmi_reqF_c_r;
  wire [1 : 0] appW4_wmi_reqF_c_r$D_IN;
  wire appW4_wmi_reqF_c_r$EN;

  // register appW4_wmi_reqF_q_0
  reg [31 : 0] appW4_wmi_reqF_q_0;
  reg [31 : 0] appW4_wmi_reqF_q_0$D_IN;
  wire appW4_wmi_reqF_q_0$EN;

  // register appW4_wmi_reqF_q_1
  reg [31 : 0] appW4_wmi_reqF_q_1;
  reg [31 : 0] appW4_wmi_reqF_q_1$D_IN;
  wire appW4_wmi_reqF_q_1$EN;

  // register appW4_wmi_sDataThreadBusy_d
  reg appW4_wmi_sDataThreadBusy_d;
  wire appW4_wmi_sDataThreadBusy_d$D_IN, appW4_wmi_sDataThreadBusy_d$EN;

  // register appW4_wmi_sFlagReg
  reg [31 : 0] appW4_wmi_sFlagReg;
  wire [31 : 0] appW4_wmi_sFlagReg$D_IN;
  wire appW4_wmi_sFlagReg$EN;

  // register appW4_wmi_sThreadBusy_d
  reg appW4_wmi_sThreadBusy_d;
  wire appW4_wmi_sThreadBusy_d$D_IN, appW4_wmi_sThreadBusy_d$EN;

  // register appW4_wmi_statusR
  reg [7 : 0] appW4_wmi_statusR;
  wire [7 : 0] appW4_wmi_statusR$D_IN;
  wire appW4_wmi_statusR$EN;

  // register appW4_wmi_trafficSticky
  reg appW4_wmi_trafficSticky;
  wire appW4_wmi_trafficSticky$D_IN, appW4_wmi_trafficSticky$EN;

  // register appW4_wsiM_burstKind
  reg [1 : 0] appW4_wsiM_burstKind;
  wire [1 : 0] appW4_wsiM_burstKind$D_IN;
  wire appW4_wsiM_burstKind$EN;

  // register appW4_wsiM_errorSticky
  reg appW4_wsiM_errorSticky;
  wire appW4_wsiM_errorSticky$D_IN, appW4_wsiM_errorSticky$EN;

  // register appW4_wsiM_iMesgCount
  reg [31 : 0] appW4_wsiM_iMesgCount;
  wire [31 : 0] appW4_wsiM_iMesgCount$D_IN;
  wire appW4_wsiM_iMesgCount$EN;

  // register appW4_wsiM_operateD
  reg appW4_wsiM_operateD;
  wire appW4_wsiM_operateD$D_IN, appW4_wsiM_operateD$EN;

  // register appW4_wsiM_pMesgCount
  reg [31 : 0] appW4_wsiM_pMesgCount;
  wire [31 : 0] appW4_wsiM_pMesgCount$D_IN;
  wire appW4_wsiM_pMesgCount$EN;

  // register appW4_wsiM_peerIsReady
  reg appW4_wsiM_peerIsReady;
  wire appW4_wsiM_peerIsReady$D_IN, appW4_wsiM_peerIsReady$EN;

  // register appW4_wsiM_reqFifo_c_r
  reg [1 : 0] appW4_wsiM_reqFifo_c_r;
  wire [1 : 0] appW4_wsiM_reqFifo_c_r$D_IN;
  wire appW4_wsiM_reqFifo_c_r$EN;

  // register appW4_wsiM_reqFifo_q_0
  reg [60 : 0] appW4_wsiM_reqFifo_q_0;
  reg [60 : 0] appW4_wsiM_reqFifo_q_0$D_IN;
  wire appW4_wsiM_reqFifo_q_0$EN;

  // register appW4_wsiM_reqFifo_q_1
  reg [60 : 0] appW4_wsiM_reqFifo_q_1;
  reg [60 : 0] appW4_wsiM_reqFifo_q_1$D_IN;
  wire appW4_wsiM_reqFifo_q_1$EN;

  // register appW4_wsiM_sThreadBusy_d
  reg appW4_wsiM_sThreadBusy_d;
  wire appW4_wsiM_sThreadBusy_d$D_IN, appW4_wsiM_sThreadBusy_d$EN;

  // register appW4_wsiM_statusR
  reg [7 : 0] appW4_wsiM_statusR;
  wire [7 : 0] appW4_wsiM_statusR$D_IN;
  wire appW4_wsiM_statusR$EN;

  // register appW4_wsiM_tBusyCount
  reg [31 : 0] appW4_wsiM_tBusyCount;
  wire [31 : 0] appW4_wsiM_tBusyCount$D_IN;
  wire appW4_wsiM_tBusyCount$EN;

  // register appW4_wsiM_trafficSticky
  reg appW4_wsiM_trafficSticky;
  wire appW4_wsiM_trafficSticky$D_IN, appW4_wsiM_trafficSticky$EN;

  // register appW4_wsiS_burstKind
  reg [1 : 0] appW4_wsiS_burstKind;
  wire [1 : 0] appW4_wsiS_burstKind$D_IN;
  wire appW4_wsiS_burstKind$EN;

  // register appW4_wsiS_errorSticky
  reg appW4_wsiS_errorSticky;
  wire appW4_wsiS_errorSticky$D_IN, appW4_wsiS_errorSticky$EN;

  // register appW4_wsiS_iMesgCount
  reg [31 : 0] appW4_wsiS_iMesgCount;
  wire [31 : 0] appW4_wsiS_iMesgCount$D_IN;
  wire appW4_wsiS_iMesgCount$EN;

  // register appW4_wsiS_mesgWordLength
  reg [11 : 0] appW4_wsiS_mesgWordLength;
  wire [11 : 0] appW4_wsiS_mesgWordLength$D_IN;
  wire appW4_wsiS_mesgWordLength$EN;

  // register appW4_wsiS_operateD
  reg appW4_wsiS_operateD;
  wire appW4_wsiS_operateD$D_IN, appW4_wsiS_operateD$EN;

  // register appW4_wsiS_pMesgCount
  reg [31 : 0] appW4_wsiS_pMesgCount;
  wire [31 : 0] appW4_wsiS_pMesgCount$D_IN;
  wire appW4_wsiS_pMesgCount$EN;

  // register appW4_wsiS_peerIsReady
  reg appW4_wsiS_peerIsReady;
  wire appW4_wsiS_peerIsReady$D_IN, appW4_wsiS_peerIsReady$EN;

  // register appW4_wsiS_reqFifo_countReg
  reg [1 : 0] appW4_wsiS_reqFifo_countReg;
  wire [1 : 0] appW4_wsiS_reqFifo_countReg$D_IN;
  wire appW4_wsiS_reqFifo_countReg$EN;

  // register appW4_wsiS_reqFifo_levelsValid
  reg appW4_wsiS_reqFifo_levelsValid;
  wire appW4_wsiS_reqFifo_levelsValid$D_IN, appW4_wsiS_reqFifo_levelsValid$EN;

  // register appW4_wsiS_statusR
  reg [7 : 0] appW4_wsiS_statusR;
  wire [7 : 0] appW4_wsiS_statusR$D_IN;
  wire appW4_wsiS_statusR$EN;

  // register appW4_wsiS_tBusyCount
  reg [31 : 0] appW4_wsiS_tBusyCount;
  wire [31 : 0] appW4_wsiS_tBusyCount$D_IN;
  wire appW4_wsiS_tBusyCount$EN;

  // register appW4_wsiS_trafficSticky
  reg appW4_wsiS_trafficSticky;
  wire appW4_wsiS_trafficSticky$D_IN, appW4_wsiS_trafficSticky$EN;

  // register appW4_wsiS_wordCount
  reg [11 : 0] appW4_wsiS_wordCount;
  wire [11 : 0] appW4_wsiS_wordCount$D_IN;
  wire appW4_wsiS_wordCount$EN;

  // register appW4_wsiWordsRemain
  reg [11 : 0] appW4_wsiWordsRemain;
  wire [11 : 0] appW4_wsiWordsRemain$D_IN;
  wire appW4_wsiWordsRemain$EN;

  // register appW4_zeroLengthMesg
  reg appW4_zeroLengthMesg;
  wire appW4_zeroLengthMesg$D_IN, appW4_zeroLengthMesg$EN;

  // ports of submodule appW2_respF_memory
  wire [60 : 0] appW2_respF_memory$DIA,
		appW2_respF_memory$DIB,
		appW2_respF_memory$DOB;
  wire [10 : 0] appW2_respF_memory$ADDRA, appW2_respF_memory$ADDRB;
  wire appW2_respF_memory$ENA,
       appW2_respF_memory$ENB,
       appW2_respF_memory$WEA,
       appW2_respF_memory$WEB;

  // ports of submodule appW2_wci_isReset
  wire appW2_wci_isReset$VAL;

  // ports of submodule appW2_wci_reqF
  wire [59 : 0] appW2_wci_reqF$D_IN, appW2_wci_reqF$D_OUT;
  wire appW2_wci_reqF$CLR,
       appW2_wci_reqF$DEQ,
       appW2_wci_reqF$EMPTY_N,
       appW2_wci_reqF$ENQ;

  // ports of submodule appW2_wmi_isReset
  wire appW2_wmi_isReset$VAL;

  // ports of submodule appW2_wmi_respF
  wire [33 : 0] appW2_wmi_respF$D_IN, appW2_wmi_respF$D_OUT;
  wire appW2_wmi_respF$CLR,
       appW2_wmi_respF$DEQ,
       appW2_wmi_respF$EMPTY_N,
       appW2_wmi_respF$ENQ,
       appW2_wmi_respF$FULL_N;

  // ports of submodule appW2_wsiM_isReset
  wire appW2_wsiM_isReset$VAL;

  // ports of submodule appW2_wsiS_isReset
  wire appW2_wsiS_isReset$VAL;

  // ports of submodule appW2_wsiS_reqFifo
  wire [60 : 0] appW2_wsiS_reqFifo$D_IN, appW2_wsiS_reqFifo$D_OUT;
  wire appW2_wsiS_reqFifo$CLR,
       appW2_wsiS_reqFifo$DEQ,
       appW2_wsiS_reqFifo$EMPTY_N,
       appW2_wsiS_reqFifo$ENQ,
       appW2_wsiS_reqFifo$FULL_N;

  // ports of submodule appW3_mesgRF
  wire [31 : 0] appW3_mesgRF$D_IN, appW3_mesgRF$D_OUT;
  wire appW3_mesgRF$CLR,
       appW3_mesgRF$DEQ,
       appW3_mesgRF$EMPTY_N,
       appW3_mesgRF$ENQ,
       appW3_mesgRF$FULL_N;

  // ports of submodule appW3_mesgWF_memory
  wire [31 : 0] appW3_mesgWF_memory$DIA,
		appW3_mesgWF_memory$DIB,
		appW3_mesgWF_memory$DOB;
  wire [11 : 0] appW3_mesgWF_memory$ADDRA, appW3_mesgWF_memory$ADDRB;
  wire appW3_mesgWF_memory$ENA,
       appW3_mesgWF_memory$ENB,
       appW3_mesgWF_memory$WEA,
       appW3_mesgWF_memory$WEB;

  // ports of submodule appW3_metaRF
  wire [31 : 0] appW3_metaRF$D_IN, appW3_metaRF$D_OUT;
  wire appW3_metaRF$CLR,
       appW3_metaRF$DEQ,
       appW3_metaRF$EMPTY_N,
       appW3_metaRF$ENQ,
       appW3_metaRF$FULL_N;

  // ports of submodule appW3_metaWF
  wire [31 : 0] appW3_metaWF$D_IN, appW3_metaWF$D_OUT;
  wire appW3_metaWF$CLR,
       appW3_metaWF$DEQ,
       appW3_metaWF$EMPTY_N,
       appW3_metaWF$ENQ,
       appW3_metaWF$FULL_N;

  // ports of submodule appW3_wci_isReset
  wire appW3_wci_isReset$VAL;

  // ports of submodule appW3_wci_reqF
  wire [59 : 0] appW3_wci_reqF$D_IN, appW3_wci_reqF$D_OUT;
  wire appW3_wci_reqF$CLR,
       appW3_wci_reqF$DEQ,
       appW3_wci_reqF$EMPTY_N,
       appW3_wci_reqF$ENQ;

  // ports of submodule appW3_wide16Fa
  wire [127 : 0] appW3_wide16Fa$D_IN, appW3_wide16Fa$D_OUT;
  wire appW3_wide16Fa$CLR,
       appW3_wide16Fa$DEQ,
       appW3_wide16Fa$EMPTY_N,
       appW3_wide16Fa$ENQ,
       appW3_wide16Fa$FULL_N;

  // ports of submodule appW3_wide16Fb
  wire [127 : 0] appW3_wide16Fb$D_IN, appW3_wide16Fb$D_OUT;
  wire appW3_wide16Fb$CLR,
       appW3_wide16Fb$DEQ,
       appW3_wide16Fb$EMPTY_N,
       appW3_wide16Fb$ENQ,
       appW3_wide16Fb$FULL_N;

  // ports of submodule appW3_wide16Fc
  wire [127 : 0] appW3_wide16Fc$D_IN, appW3_wide16Fc$D_OUT;
  wire appW3_wide16Fc$CLR,
       appW3_wide16Fc$DEQ,
       appW3_wide16Fc$EMPTY_N,
       appW3_wide16Fc$ENQ,
       appW3_wide16Fc$FULL_N;

  // ports of submodule appW3_wmemi_isReset
  wire appW3_wmemi_isReset$VAL;

  // ports of submodule appW3_wmemi_respF
  wire [130 : 0] appW3_wmemi_respF$D_IN, appW3_wmemi_respF$D_OUT;
  wire appW3_wmemi_respF$CLR,
       appW3_wmemi_respF$DEQ,
       appW3_wmemi_respF$EMPTY_N,
       appW3_wmemi_respF$ENQ,
       appW3_wmemi_respF$FULL_N;

  // ports of submodule appW3_wsiM_isReset
  wire appW3_wsiM_isReset$VAL;

  // ports of submodule appW3_wsiS_isReset
  wire appW3_wsiS_isReset$VAL;

  // ports of submodule appW3_wsiS_reqFifo
  wire [60 : 0] appW3_wsiS_reqFifo$D_IN, appW3_wsiS_reqFifo$D_OUT;
  wire appW3_wsiS_reqFifo$CLR,
       appW3_wsiS_reqFifo$DEQ,
       appW3_wsiS_reqFifo$EMPTY_N,
       appW3_wsiS_reqFifo$ENQ,
       appW3_wsiS_reqFifo$FULL_N;

  // ports of submodule appW4_respF_memory
  wire [60 : 0] appW4_respF_memory$DIA,
		appW4_respF_memory$DIB,
		appW4_respF_memory$DOB;
  wire [10 : 0] appW4_respF_memory$ADDRA, appW4_respF_memory$ADDRB;
  wire appW4_respF_memory$ENA,
       appW4_respF_memory$ENB,
       appW4_respF_memory$WEA,
       appW4_respF_memory$WEB;

  // ports of submodule appW4_wci_isReset
  wire appW4_wci_isReset$VAL;

  // ports of submodule appW4_wci_reqF
  wire [59 : 0] appW4_wci_reqF$D_IN, appW4_wci_reqF$D_OUT;
  wire appW4_wci_reqF$CLR,
       appW4_wci_reqF$DEQ,
       appW4_wci_reqF$EMPTY_N,
       appW4_wci_reqF$ENQ;

  // ports of submodule appW4_wmi_isReset
  wire appW4_wmi_isReset$VAL;

  // ports of submodule appW4_wmi_respF
  wire [33 : 0] appW4_wmi_respF$D_IN, appW4_wmi_respF$D_OUT;
  wire appW4_wmi_respF$CLR,
       appW4_wmi_respF$DEQ,
       appW4_wmi_respF$EMPTY_N,
       appW4_wmi_respF$ENQ,
       appW4_wmi_respF$FULL_N;

  // ports of submodule appW4_wsiM_isReset
  wire appW4_wsiM_isReset$VAL;

  // ports of submodule appW4_wsiS_isReset
  wire appW4_wsiS_isReset$VAL;

  // ports of submodule appW4_wsiS_reqFifo
  wire [60 : 0] appW4_wsiS_reqFifo$D_IN, appW4_wsiS_reqFifo$D_OUT;
  wire appW4_wsiS_reqFifo$CLR,
       appW4_wsiS_reqFifo$DEQ,
       appW4_wsiS_reqFifo$EMPTY_N,
       appW4_wsiS_reqFifo$ENQ,
       appW4_wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_appW2_fabRespCredit_accumulate,
       CAN_FIRE_RL_appW2_mesgPreRequest__dreg_update,
       CAN_FIRE_RL_appW2_operating_actions,
       CAN_FIRE_RL_appW2_respF_portA,
       CAN_FIRE_RL_appW2_respF_portB,
       CAN_FIRE_RL_appW2_respF_portB_read_data,
       CAN_FIRE_RL_appW2_wci_Es_doAlways_Req,
       CAN_FIRE_RL_appW2_wci_cfrd,
       CAN_FIRE_RL_appW2_wci_cfwr,
       CAN_FIRE_RL_appW2_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_appW2_wci_ctl_op_complete,
       CAN_FIRE_RL_appW2_wci_ctl_op_start,
       CAN_FIRE_RL_appW2_wci_ctrl_EiI,
       CAN_FIRE_RL_appW2_wci_ctrl_IsO,
       CAN_FIRE_RL_appW2_wci_ctrl_OrE,
       CAN_FIRE_RL_appW2_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_appW2_wci_reqF_enq,
       CAN_FIRE_RL_appW2_wci_request_decode,
       CAN_FIRE_RL_appW2_wci_respF_both,
       CAN_FIRE_RL_appW2_wci_respF_decCtr,
       CAN_FIRE_RL_appW2_wci_respF_deq,
       CAN_FIRE_RL_appW2_wci_respF_incCtr,
       CAN_FIRE_RL_appW2_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_appW2_wci_sThreadBusy_reg,
       CAN_FIRE_RL_appW2_wmi_Em_doAlways,
       CAN_FIRE_RL_appW2_wmi_dhF_both,
       CAN_FIRE_RL_appW2_wmi_dhF_decCtr,
       CAN_FIRE_RL_appW2_wmi_dhF_deq,
       CAN_FIRE_RL_appW2_wmi_dhF_incCtr,
       CAN_FIRE_RL_appW2_wmi_mFlagF_both,
       CAN_FIRE_RL_appW2_wmi_mFlagF_decCtr,
       CAN_FIRE_RL_appW2_wmi_mFlagF_incCtr,
       CAN_FIRE_RL_appW2_wmi_operateD__dreg_update,
       CAN_FIRE_RL_appW2_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW2_wmi_reqF_both,
       CAN_FIRE_RL_appW2_wmi_reqF_decCtr,
       CAN_FIRE_RL_appW2_wmi_reqF_deq,
       CAN_FIRE_RL_appW2_wmi_reqF_incCtr,
       CAN_FIRE_RL_appW2_wmi_respAdvance,
       CAN_FIRE_RL_appW2_wmi_sDataThreadBusy_d__dreg_update,
       CAN_FIRE_RL_appW2_wmi_sThreadBusy_d__dreg_update,
       CAN_FIRE_RL_appW2_wmrd_mesgBegin,
       CAN_FIRE_RL_appW2_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_appW2_wmrd_mesgBodyRequest,
       CAN_FIRE_RL_appW2_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi,
       CAN_FIRE_RL_appW2_wmwt_doAbort,
       CAN_FIRE_RL_appW2_wmwt_mesgBegin,
       CAN_FIRE_RL_appW2_wmwt_messageFinalize,
       CAN_FIRE_RL_appW2_wmwt_messagePushImprecise,
       CAN_FIRE_RL_appW2_wmwt_messagePushPrecise,
       CAN_FIRE_RL_appW2_wmwt_requestPrecise,
       CAN_FIRE_RL_appW2_wsiM_ext_status_assign,
       CAN_FIRE_RL_appW2_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_appW2_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_appW2_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW2_wsiM_reqFifo_both,
       CAN_FIRE_RL_appW2_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_appW2_wsiM_reqFifo_deq,
       CAN_FIRE_RL_appW2_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_appW2_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_appW2_wsiM_update_statusR,
       CAN_FIRE_RL_appW2_wsiS_backpressure,
       CAN_FIRE_RL_appW2_wsiS_ext_status_assign,
       CAN_FIRE_RL_appW2_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_appW2_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_appW2_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW2_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_appW2_wsiS_reqFifo_enq,
       CAN_FIRE_RL_appW2_wsiS_reqFifo_reset,
       CAN_FIRE_RL_appW2_wsiS_update_statusR,
       CAN_FIRE_RL_appW2_wsi_Es_doAlways,
       CAN_FIRE_RL_appW2_wsipass_doMessagePush,
       CAN_FIRE_RL_appW3_cycles_passed_count,
       CAN_FIRE_RL_appW3_delay_Fb2Fc,
       CAN_FIRE_RL_appW3_delay_read_req,
       CAN_FIRE_RL_appW3_delay_read_resp,
       CAN_FIRE_RL_appW3_delay_write_req,
       CAN_FIRE_RL_appW3_dlyReadCredit_accumulate,
       CAN_FIRE_RL_appW3_dlyReadyToWrite_accumulate,
       CAN_FIRE_RL_appW3_dlyWordsStored_accumulate,
       CAN_FIRE_RL_appW3_mesgWF_portA,
       CAN_FIRE_RL_appW3_mesgWF_portB,
       CAN_FIRE_RL_appW3_mesgWF_portB_read_data,
       CAN_FIRE_RL_appW3_operating_actions,
       CAN_FIRE_RL_appW3_rdSer_begin,
       CAN_FIRE_RL_appW3_rdSer_body,
       CAN_FIRE_RL_appW3_rdSer_sync,
       CAN_FIRE_RL_appW3_wci_Es_doAlways_Req,
       CAN_FIRE_RL_appW3_wci_cfrd,
       CAN_FIRE_RL_appW3_wci_cfwr,
       CAN_FIRE_RL_appW3_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_appW3_wci_ctl_op_complete,
       CAN_FIRE_RL_appW3_wci_ctl_op_start,
       CAN_FIRE_RL_appW3_wci_ctrl_EiI,
       CAN_FIRE_RL_appW3_wci_ctrl_IsO,
       CAN_FIRE_RL_appW3_wci_ctrl_OrE,
       CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_appW3_wci_reqF_enq,
       CAN_FIRE_RL_appW3_wci_request_decode,
       CAN_FIRE_RL_appW3_wci_respF_both,
       CAN_FIRE_RL_appW3_wci_respF_decCtr,
       CAN_FIRE_RL_appW3_wci_respF_deq,
       CAN_FIRE_RL_appW3_wci_respF_incCtr,
       CAN_FIRE_RL_appW3_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_appW3_wci_sThreadBusy_reg,
       CAN_FIRE_RL_appW3_wmemi_Em_doAlways,
       CAN_FIRE_RL_appW3_wmemi_dhF_both,
       CAN_FIRE_RL_appW3_wmemi_dhF_decCtr,
       CAN_FIRE_RL_appW3_wmemi_dhF_deq,
       CAN_FIRE_RL_appW3_wmemi_dhF_incCtr,
       CAN_FIRE_RL_appW3_wmemi_operateD__dreg_update,
       CAN_FIRE_RL_appW3_wmemi_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW3_wmemi_reqF_both,
       CAN_FIRE_RL_appW3_wmemi_reqF_decCtr,
       CAN_FIRE_RL_appW3_wmemi_reqF_deq,
       CAN_FIRE_RL_appW3_wmemi_reqF_incCtr,
       CAN_FIRE_RL_appW3_wmemi_respAdvance,
       CAN_FIRE_RL_appW3_wmemi_update_statusR,
       CAN_FIRE_RL_appW3_wmrd_mesgBegin,
       CAN_FIRE_RL_appW3_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_appW3_wmwt_mesg_ingress,
       CAN_FIRE_RL_appW3_wrtSer_begin,
       CAN_FIRE_RL_appW3_wrtSer_body,
       CAN_FIRE_RL_appW3_wsiM_ext_status_assign,
       CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_appW3_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_both,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_deq,
       CAN_FIRE_RL_appW3_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_appW3_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_appW3_wsiM_update_statusR,
       CAN_FIRE_RL_appW3_wsiS_backpressure,
       CAN_FIRE_RL_appW3_wsiS_ext_status_assign,
       CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_appW3_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_appW3_wsiS_reqFifo_enq,
       CAN_FIRE_RL_appW3_wsiS_reqFifo_reset,
       CAN_FIRE_RL_appW3_wsiS_update_statusR,
       CAN_FIRE_RL_appW3_wsi_Es_doAlways,
       CAN_FIRE_RL_appW3_wsipass_doMessagePush,
       CAN_FIRE_RL_appW4_fabRespCredit_accumulate,
       CAN_FIRE_RL_appW4_mesgPreRequest__dreg_update,
       CAN_FIRE_RL_appW4_operating_actions,
       CAN_FIRE_RL_appW4_respF_portA,
       CAN_FIRE_RL_appW4_respF_portB,
       CAN_FIRE_RL_appW4_respF_portB_read_data,
       CAN_FIRE_RL_appW4_wci_Es_doAlways_Req,
       CAN_FIRE_RL_appW4_wci_cfrd,
       CAN_FIRE_RL_appW4_wci_cfwr,
       CAN_FIRE_RL_appW4_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_appW4_wci_ctl_op_complete,
       CAN_FIRE_RL_appW4_wci_ctl_op_start,
       CAN_FIRE_RL_appW4_wci_ctrl_EiI,
       CAN_FIRE_RL_appW4_wci_ctrl_IsO,
       CAN_FIRE_RL_appW4_wci_ctrl_OrE,
       CAN_FIRE_RL_appW4_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_appW4_wci_reqF_enq,
       CAN_FIRE_RL_appW4_wci_request_decode,
       CAN_FIRE_RL_appW4_wci_respF_both,
       CAN_FIRE_RL_appW4_wci_respF_decCtr,
       CAN_FIRE_RL_appW4_wci_respF_deq,
       CAN_FIRE_RL_appW4_wci_respF_incCtr,
       CAN_FIRE_RL_appW4_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_appW4_wci_sThreadBusy_reg,
       CAN_FIRE_RL_appW4_wmi_Em_doAlways,
       CAN_FIRE_RL_appW4_wmi_dhF_both,
       CAN_FIRE_RL_appW4_wmi_dhF_decCtr,
       CAN_FIRE_RL_appW4_wmi_dhF_deq,
       CAN_FIRE_RL_appW4_wmi_dhF_incCtr,
       CAN_FIRE_RL_appW4_wmi_mFlagF_both,
       CAN_FIRE_RL_appW4_wmi_mFlagF_decCtr,
       CAN_FIRE_RL_appW4_wmi_mFlagF_incCtr,
       CAN_FIRE_RL_appW4_wmi_operateD__dreg_update,
       CAN_FIRE_RL_appW4_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW4_wmi_reqF_both,
       CAN_FIRE_RL_appW4_wmi_reqF_decCtr,
       CAN_FIRE_RL_appW4_wmi_reqF_deq,
       CAN_FIRE_RL_appW4_wmi_reqF_incCtr,
       CAN_FIRE_RL_appW4_wmi_respAdvance,
       CAN_FIRE_RL_appW4_wmi_sDataThreadBusy_d__dreg_update,
       CAN_FIRE_RL_appW4_wmi_sThreadBusy_d__dreg_update,
       CAN_FIRE_RL_appW4_wmrd_mesgBegin,
       CAN_FIRE_RL_appW4_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_appW4_wmrd_mesgBodyRequest,
       CAN_FIRE_RL_appW4_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi,
       CAN_FIRE_RL_appW4_wmwt_doAbort,
       CAN_FIRE_RL_appW4_wmwt_mesgBegin,
       CAN_FIRE_RL_appW4_wmwt_messageFinalize,
       CAN_FIRE_RL_appW4_wmwt_messagePushImprecise,
       CAN_FIRE_RL_appW4_wmwt_messagePushPrecise,
       CAN_FIRE_RL_appW4_wmwt_requestPrecise,
       CAN_FIRE_RL_appW4_wsiM_ext_status_assign,
       CAN_FIRE_RL_appW4_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_appW4_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_appW4_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW4_wsiM_reqFifo_both,
       CAN_FIRE_RL_appW4_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_appW4_wsiM_reqFifo_deq,
       CAN_FIRE_RL_appW4_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_appW4_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_appW4_wsiM_update_statusR,
       CAN_FIRE_RL_appW4_wsiS_backpressure,
       CAN_FIRE_RL_appW4_wsiS_ext_status_assign,
       CAN_FIRE_RL_appW4_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_appW4_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_appW4_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_appW4_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_appW4_wsiS_reqFifo_enq,
       CAN_FIRE_RL_appW4_wsiS_reqFifo_reset,
       CAN_FIRE_RL_appW4_wsiS_update_statusR,
       CAN_FIRE_RL_appW4_wsi_Es_doAlways,
       CAN_FIRE_RL_appW4_wsipass_doMessagePush,
       CAN_FIRE_RL_mBurstLConnect,
       CAN_FIRE_RL_mBurstLConnect_1,
       CAN_FIRE_RL_mBurstPConnect,
       CAN_FIRE_RL_mBurstPConnect_1,
       CAN_FIRE_RL_mByteEnConnect,
       CAN_FIRE_RL_mByteEnConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mDataIConnect,
       CAN_FIRE_RL_mDataIConnect_1,
       CAN_FIRE_RL_mReqIConnect,
       CAN_FIRE_RL_mReqIConnect_1,
       CAN_FIRE_RL_mReqLConnect,
       CAN_FIRE_RL_mReqLConnect_1,
       CAN_FIRE_RL_mRstConnect,
       CAN_FIRE_RL_mRstConnect_1,
       CAN_FIRE_RL_sRstConnect,
       CAN_FIRE_RL_sRstConnect_1,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_wci_s_0_mAddr,
       CAN_FIRE_wci_s_0_mAddrSpace,
       CAN_FIRE_wci_s_0_mByteEn,
       CAN_FIRE_wci_s_0_mCmd,
       CAN_FIRE_wci_s_0_mData,
       CAN_FIRE_wci_s_0_mFlag,
       CAN_FIRE_wci_s_1_mAddr,
       CAN_FIRE_wci_s_1_mAddrSpace,
       CAN_FIRE_wci_s_1_mByteEn,
       CAN_FIRE_wci_s_1_mCmd,
       CAN_FIRE_wci_s_1_mData,
       CAN_FIRE_wci_s_1_mFlag,
       CAN_FIRE_wci_s_2_mAddr,
       CAN_FIRE_wci_s_2_mAddrSpace,
       CAN_FIRE_wci_s_2_mByteEn,
       CAN_FIRE_wci_s_2_mCmd,
       CAN_FIRE_wci_s_2_mData,
       CAN_FIRE_wci_s_2_mFlag,
       CAN_FIRE_wci_s_3_mAddr,
       CAN_FIRE_wci_s_3_mAddrSpace,
       CAN_FIRE_wci_s_3_mByteEn,
       CAN_FIRE_wci_s_3_mCmd,
       CAN_FIRE_wci_s_3_mData,
       CAN_FIRE_wci_s_3_mFlag,
       CAN_FIRE_wci_s_4_mAddr,
       CAN_FIRE_wci_s_4_mAddrSpace,
       CAN_FIRE_wci_s_4_mByteEn,
       CAN_FIRE_wci_s_4_mCmd,
       CAN_FIRE_wci_s_4_mData,
       CAN_FIRE_wci_s_4_mFlag,
       CAN_FIRE_wci_s_5_mAddr,
       CAN_FIRE_wci_s_5_mAddrSpace,
       CAN_FIRE_wci_s_5_mByteEn,
       CAN_FIRE_wci_s_5_mCmd,
       CAN_FIRE_wci_s_5_mData,
       CAN_FIRE_wci_s_5_mFlag,
       CAN_FIRE_wci_s_6_mAddr,
       CAN_FIRE_wci_s_6_mAddrSpace,
       CAN_FIRE_wci_s_6_mByteEn,
       CAN_FIRE_wci_s_6_mCmd,
       CAN_FIRE_wci_s_6_mData,
       CAN_FIRE_wci_s_6_mFlag,
       CAN_FIRE_wci_s_7_mAddr,
       CAN_FIRE_wci_s_7_mAddrSpace,
       CAN_FIRE_wci_s_7_mByteEn,
       CAN_FIRE_wci_s_7_mCmd,
       CAN_FIRE_wci_s_7_mData,
       CAN_FIRE_wci_s_7_mFlag,
       CAN_FIRE_wmemiM_sCmdAccept,
       CAN_FIRE_wmemiM_sData,
       CAN_FIRE_wmemiM_sDataAccept,
       CAN_FIRE_wmemiM_sResp,
       CAN_FIRE_wmemiM_sRespLast,
       CAN_FIRE_wmiM0_sData,
       CAN_FIRE_wmiM0_sDataThreadBusy,
       CAN_FIRE_wmiM0_sFlag,
       CAN_FIRE_wmiM0_sReset_n,
       CAN_FIRE_wmiM0_sResp,
       CAN_FIRE_wmiM0_sRespLast,
       CAN_FIRE_wmiM0_sThreadBusy,
       CAN_FIRE_wmiM1_sData,
       CAN_FIRE_wmiM1_sDataThreadBusy,
       CAN_FIRE_wmiM1_sFlag,
       CAN_FIRE_wmiM1_sReset_n,
       CAN_FIRE_wmiM1_sResp,
       CAN_FIRE_wmiM1_sRespLast,
       CAN_FIRE_wmiM1_sThreadBusy,
       CAN_FIRE_wsi_m_dac_sReset_n,
       CAN_FIRE_wsi_m_dac_sThreadBusy,
       CAN_FIRE_wsi_s_adc_mBurstLength,
       CAN_FIRE_wsi_s_adc_mBurstPrecise,
       CAN_FIRE_wsi_s_adc_mByteEn,
       CAN_FIRE_wsi_s_adc_mCmd,
       CAN_FIRE_wsi_s_adc_mData,
       CAN_FIRE_wsi_s_adc_mDataInfo,
       CAN_FIRE_wsi_s_adc_mReqInfo,
       CAN_FIRE_wsi_s_adc_mReqLast,
       CAN_FIRE_wsi_s_adc_mReset_n,
       WILL_FIRE_RL_appW2_fabRespCredit_accumulate,
       WILL_FIRE_RL_appW2_mesgPreRequest__dreg_update,
       WILL_FIRE_RL_appW2_operating_actions,
       WILL_FIRE_RL_appW2_respF_portA,
       WILL_FIRE_RL_appW2_respF_portB,
       WILL_FIRE_RL_appW2_respF_portB_read_data,
       WILL_FIRE_RL_appW2_wci_Es_doAlways_Req,
       WILL_FIRE_RL_appW2_wci_cfrd,
       WILL_FIRE_RL_appW2_wci_cfwr,
       WILL_FIRE_RL_appW2_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_appW2_wci_ctl_op_complete,
       WILL_FIRE_RL_appW2_wci_ctl_op_start,
       WILL_FIRE_RL_appW2_wci_ctrl_EiI,
       WILL_FIRE_RL_appW2_wci_ctrl_IsO,
       WILL_FIRE_RL_appW2_wci_ctrl_OrE,
       WILL_FIRE_RL_appW2_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_appW2_wci_reqF_enq,
       WILL_FIRE_RL_appW2_wci_request_decode,
       WILL_FIRE_RL_appW2_wci_respF_both,
       WILL_FIRE_RL_appW2_wci_respF_decCtr,
       WILL_FIRE_RL_appW2_wci_respF_deq,
       WILL_FIRE_RL_appW2_wci_respF_incCtr,
       WILL_FIRE_RL_appW2_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_appW2_wci_sThreadBusy_reg,
       WILL_FIRE_RL_appW2_wmi_Em_doAlways,
       WILL_FIRE_RL_appW2_wmi_dhF_both,
       WILL_FIRE_RL_appW2_wmi_dhF_decCtr,
       WILL_FIRE_RL_appW2_wmi_dhF_deq,
       WILL_FIRE_RL_appW2_wmi_dhF_incCtr,
       WILL_FIRE_RL_appW2_wmi_mFlagF_both,
       WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_appW2_wmi_operateD__dreg_update,
       WILL_FIRE_RL_appW2_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW2_wmi_reqF_both,
       WILL_FIRE_RL_appW2_wmi_reqF_decCtr,
       WILL_FIRE_RL_appW2_wmi_reqF_deq,
       WILL_FIRE_RL_appW2_wmi_reqF_incCtr,
       WILL_FIRE_RL_appW2_wmi_respAdvance,
       WILL_FIRE_RL_appW2_wmi_sDataThreadBusy_d__dreg_update,
       WILL_FIRE_RL_appW2_wmi_sThreadBusy_d__dreg_update,
       WILL_FIRE_RL_appW2_wmrd_mesgBegin,
       WILL_FIRE_RL_appW2_wmrd_mesgBodyPreRequest,
       WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_appW2_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_appW2_wmwt_doAbort,
       WILL_FIRE_RL_appW2_wmwt_mesgBegin,
       WILL_FIRE_RL_appW2_wmwt_messageFinalize,
       WILL_FIRE_RL_appW2_wmwt_messagePushImprecise,
       WILL_FIRE_RL_appW2_wmwt_messagePushPrecise,
       WILL_FIRE_RL_appW2_wmwt_requestPrecise,
       WILL_FIRE_RL_appW2_wsiM_ext_status_assign,
       WILL_FIRE_RL_appW2_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_appW2_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_appW2_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW2_wsiM_reqFifo_both,
       WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_appW2_wsiM_reqFifo_deq,
       WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_appW2_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_appW2_wsiM_update_statusR,
       WILL_FIRE_RL_appW2_wsiS_backpressure,
       WILL_FIRE_RL_appW2_wsiS_ext_status_assign,
       WILL_FIRE_RL_appW2_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_appW2_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_appW2_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW2_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_appW2_wsiS_reqFifo_enq,
       WILL_FIRE_RL_appW2_wsiS_reqFifo_reset,
       WILL_FIRE_RL_appW2_wsiS_update_statusR,
       WILL_FIRE_RL_appW2_wsi_Es_doAlways,
       WILL_FIRE_RL_appW2_wsipass_doMessagePush,
       WILL_FIRE_RL_appW3_cycles_passed_count,
       WILL_FIRE_RL_appW3_delay_Fb2Fc,
       WILL_FIRE_RL_appW3_delay_read_req,
       WILL_FIRE_RL_appW3_delay_read_resp,
       WILL_FIRE_RL_appW3_delay_write_req,
       WILL_FIRE_RL_appW3_dlyReadCredit_accumulate,
       WILL_FIRE_RL_appW3_dlyReadyToWrite_accumulate,
       WILL_FIRE_RL_appW3_dlyWordsStored_accumulate,
       WILL_FIRE_RL_appW3_mesgWF_portA,
       WILL_FIRE_RL_appW3_mesgWF_portB,
       WILL_FIRE_RL_appW3_mesgWF_portB_read_data,
       WILL_FIRE_RL_appW3_operating_actions,
       WILL_FIRE_RL_appW3_rdSer_begin,
       WILL_FIRE_RL_appW3_rdSer_body,
       WILL_FIRE_RL_appW3_rdSer_sync,
       WILL_FIRE_RL_appW3_wci_Es_doAlways_Req,
       WILL_FIRE_RL_appW3_wci_cfrd,
       WILL_FIRE_RL_appW3_wci_cfwr,
       WILL_FIRE_RL_appW3_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_appW3_wci_ctl_op_complete,
       WILL_FIRE_RL_appW3_wci_ctl_op_start,
       WILL_FIRE_RL_appW3_wci_ctrl_EiI,
       WILL_FIRE_RL_appW3_wci_ctrl_IsO,
       WILL_FIRE_RL_appW3_wci_ctrl_OrE,
       WILL_FIRE_RL_appW3_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_appW3_wci_reqF_enq,
       WILL_FIRE_RL_appW3_wci_request_decode,
       WILL_FIRE_RL_appW3_wci_respF_both,
       WILL_FIRE_RL_appW3_wci_respF_decCtr,
       WILL_FIRE_RL_appW3_wci_respF_deq,
       WILL_FIRE_RL_appW3_wci_respF_incCtr,
       WILL_FIRE_RL_appW3_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_appW3_wci_sThreadBusy_reg,
       WILL_FIRE_RL_appW3_wmemi_Em_doAlways,
       WILL_FIRE_RL_appW3_wmemi_dhF_both,
       WILL_FIRE_RL_appW3_wmemi_dhF_decCtr,
       WILL_FIRE_RL_appW3_wmemi_dhF_deq,
       WILL_FIRE_RL_appW3_wmemi_dhF_incCtr,
       WILL_FIRE_RL_appW3_wmemi_operateD__dreg_update,
       WILL_FIRE_RL_appW3_wmemi_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW3_wmemi_reqF_both,
       WILL_FIRE_RL_appW3_wmemi_reqF_decCtr,
       WILL_FIRE_RL_appW3_wmemi_reqF_deq,
       WILL_FIRE_RL_appW3_wmemi_reqF_incCtr,
       WILL_FIRE_RL_appW3_wmemi_respAdvance,
       WILL_FIRE_RL_appW3_wmemi_update_statusR,
       WILL_FIRE_RL_appW3_wmrd_mesgBegin,
       WILL_FIRE_RL_appW3_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_appW3_wmwt_mesg_ingress,
       WILL_FIRE_RL_appW3_wrtSer_begin,
       WILL_FIRE_RL_appW3_wrtSer_body,
       WILL_FIRE_RL_appW3_wsiM_ext_status_assign,
       WILL_FIRE_RL_appW3_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_appW3_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_both,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_deq,
       WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_appW3_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_appW3_wsiM_update_statusR,
       WILL_FIRE_RL_appW3_wsiS_backpressure,
       WILL_FIRE_RL_appW3_wsiS_ext_status_assign,
       WILL_FIRE_RL_appW3_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_appW3_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_appW3_wsiS_reqFifo_enq,
       WILL_FIRE_RL_appW3_wsiS_reqFifo_reset,
       WILL_FIRE_RL_appW3_wsiS_update_statusR,
       WILL_FIRE_RL_appW3_wsi_Es_doAlways,
       WILL_FIRE_RL_appW3_wsipass_doMessagePush,
       WILL_FIRE_RL_appW4_fabRespCredit_accumulate,
       WILL_FIRE_RL_appW4_mesgPreRequest__dreg_update,
       WILL_FIRE_RL_appW4_operating_actions,
       WILL_FIRE_RL_appW4_respF_portA,
       WILL_FIRE_RL_appW4_respF_portB,
       WILL_FIRE_RL_appW4_respF_portB_read_data,
       WILL_FIRE_RL_appW4_wci_Es_doAlways_Req,
       WILL_FIRE_RL_appW4_wci_cfrd,
       WILL_FIRE_RL_appW4_wci_cfwr,
       WILL_FIRE_RL_appW4_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_appW4_wci_ctl_op_complete,
       WILL_FIRE_RL_appW4_wci_ctl_op_start,
       WILL_FIRE_RL_appW4_wci_ctrl_EiI,
       WILL_FIRE_RL_appW4_wci_ctrl_IsO,
       WILL_FIRE_RL_appW4_wci_ctrl_OrE,
       WILL_FIRE_RL_appW4_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_appW4_wci_reqF_enq,
       WILL_FIRE_RL_appW4_wci_request_decode,
       WILL_FIRE_RL_appW4_wci_respF_both,
       WILL_FIRE_RL_appW4_wci_respF_decCtr,
       WILL_FIRE_RL_appW4_wci_respF_deq,
       WILL_FIRE_RL_appW4_wci_respF_incCtr,
       WILL_FIRE_RL_appW4_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_appW4_wci_sThreadBusy_reg,
       WILL_FIRE_RL_appW4_wmi_Em_doAlways,
       WILL_FIRE_RL_appW4_wmi_dhF_both,
       WILL_FIRE_RL_appW4_wmi_dhF_decCtr,
       WILL_FIRE_RL_appW4_wmi_dhF_deq,
       WILL_FIRE_RL_appW4_wmi_dhF_incCtr,
       WILL_FIRE_RL_appW4_wmi_mFlagF_both,
       WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_appW4_wmi_operateD__dreg_update,
       WILL_FIRE_RL_appW4_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW4_wmi_reqF_both,
       WILL_FIRE_RL_appW4_wmi_reqF_decCtr,
       WILL_FIRE_RL_appW4_wmi_reqF_deq,
       WILL_FIRE_RL_appW4_wmi_reqF_incCtr,
       WILL_FIRE_RL_appW4_wmi_respAdvance,
       WILL_FIRE_RL_appW4_wmi_sDataThreadBusy_d__dreg_update,
       WILL_FIRE_RL_appW4_wmi_sThreadBusy_d__dreg_update,
       WILL_FIRE_RL_appW4_wmrd_mesgBegin,
       WILL_FIRE_RL_appW4_wmrd_mesgBodyPreRequest,
       WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_appW4_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_appW4_wmwt_doAbort,
       WILL_FIRE_RL_appW4_wmwt_mesgBegin,
       WILL_FIRE_RL_appW4_wmwt_messageFinalize,
       WILL_FIRE_RL_appW4_wmwt_messagePushImprecise,
       WILL_FIRE_RL_appW4_wmwt_messagePushPrecise,
       WILL_FIRE_RL_appW4_wmwt_requestPrecise,
       WILL_FIRE_RL_appW4_wsiM_ext_status_assign,
       WILL_FIRE_RL_appW4_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_appW4_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_appW4_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW4_wsiM_reqFifo_both,
       WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_appW4_wsiM_reqFifo_deq,
       WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_appW4_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_appW4_wsiM_update_statusR,
       WILL_FIRE_RL_appW4_wsiS_backpressure,
       WILL_FIRE_RL_appW4_wsiS_ext_status_assign,
       WILL_FIRE_RL_appW4_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_appW4_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_appW4_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_appW4_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_appW4_wsiS_reqFifo_enq,
       WILL_FIRE_RL_appW4_wsiS_reqFifo_reset,
       WILL_FIRE_RL_appW4_wsiS_update_statusR,
       WILL_FIRE_RL_appW4_wsi_Es_doAlways,
       WILL_FIRE_RL_appW4_wsipass_doMessagePush,
       WILL_FIRE_RL_mBurstLConnect,
       WILL_FIRE_RL_mBurstLConnect_1,
       WILL_FIRE_RL_mBurstPConnect,
       WILL_FIRE_RL_mBurstPConnect_1,
       WILL_FIRE_RL_mByteEnConnect,
       WILL_FIRE_RL_mByteEnConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mDataIConnect,
       WILL_FIRE_RL_mDataIConnect_1,
       WILL_FIRE_RL_mReqIConnect,
       WILL_FIRE_RL_mReqIConnect_1,
       WILL_FIRE_RL_mReqLConnect,
       WILL_FIRE_RL_mReqLConnect_1,
       WILL_FIRE_RL_mRstConnect,
       WILL_FIRE_RL_mRstConnect_1,
       WILL_FIRE_RL_sRstConnect,
       WILL_FIRE_RL_sRstConnect_1,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_wci_s_0_mAddr,
       WILL_FIRE_wci_s_0_mAddrSpace,
       WILL_FIRE_wci_s_0_mByteEn,
       WILL_FIRE_wci_s_0_mCmd,
       WILL_FIRE_wci_s_0_mData,
       WILL_FIRE_wci_s_0_mFlag,
       WILL_FIRE_wci_s_1_mAddr,
       WILL_FIRE_wci_s_1_mAddrSpace,
       WILL_FIRE_wci_s_1_mByteEn,
       WILL_FIRE_wci_s_1_mCmd,
       WILL_FIRE_wci_s_1_mData,
       WILL_FIRE_wci_s_1_mFlag,
       WILL_FIRE_wci_s_2_mAddr,
       WILL_FIRE_wci_s_2_mAddrSpace,
       WILL_FIRE_wci_s_2_mByteEn,
       WILL_FIRE_wci_s_2_mCmd,
       WILL_FIRE_wci_s_2_mData,
       WILL_FIRE_wci_s_2_mFlag,
       WILL_FIRE_wci_s_3_mAddr,
       WILL_FIRE_wci_s_3_mAddrSpace,
       WILL_FIRE_wci_s_3_mByteEn,
       WILL_FIRE_wci_s_3_mCmd,
       WILL_FIRE_wci_s_3_mData,
       WILL_FIRE_wci_s_3_mFlag,
       WILL_FIRE_wci_s_4_mAddr,
       WILL_FIRE_wci_s_4_mAddrSpace,
       WILL_FIRE_wci_s_4_mByteEn,
       WILL_FIRE_wci_s_4_mCmd,
       WILL_FIRE_wci_s_4_mData,
       WILL_FIRE_wci_s_4_mFlag,
       WILL_FIRE_wci_s_5_mAddr,
       WILL_FIRE_wci_s_5_mAddrSpace,
       WILL_FIRE_wci_s_5_mByteEn,
       WILL_FIRE_wci_s_5_mCmd,
       WILL_FIRE_wci_s_5_mData,
       WILL_FIRE_wci_s_5_mFlag,
       WILL_FIRE_wci_s_6_mAddr,
       WILL_FIRE_wci_s_6_mAddrSpace,
       WILL_FIRE_wci_s_6_mByteEn,
       WILL_FIRE_wci_s_6_mCmd,
       WILL_FIRE_wci_s_6_mData,
       WILL_FIRE_wci_s_6_mFlag,
       WILL_FIRE_wci_s_7_mAddr,
       WILL_FIRE_wci_s_7_mAddrSpace,
       WILL_FIRE_wci_s_7_mByteEn,
       WILL_FIRE_wci_s_7_mCmd,
       WILL_FIRE_wci_s_7_mData,
       WILL_FIRE_wci_s_7_mFlag,
       WILL_FIRE_wmemiM_sCmdAccept,
       WILL_FIRE_wmemiM_sData,
       WILL_FIRE_wmemiM_sDataAccept,
       WILL_FIRE_wmemiM_sResp,
       WILL_FIRE_wmemiM_sRespLast,
       WILL_FIRE_wmiM0_sData,
       WILL_FIRE_wmiM0_sDataThreadBusy,
       WILL_FIRE_wmiM0_sFlag,
       WILL_FIRE_wmiM0_sReset_n,
       WILL_FIRE_wmiM0_sResp,
       WILL_FIRE_wmiM0_sRespLast,
       WILL_FIRE_wmiM0_sThreadBusy,
       WILL_FIRE_wmiM1_sData,
       WILL_FIRE_wmiM1_sDataThreadBusy,
       WILL_FIRE_wmiM1_sFlag,
       WILL_FIRE_wmiM1_sReset_n,
       WILL_FIRE_wmiM1_sResp,
       WILL_FIRE_wmiM1_sRespLast,
       WILL_FIRE_wmiM1_sThreadBusy,
       WILL_FIRE_wsi_m_dac_sReset_n,
       WILL_FIRE_wsi_m_dac_sThreadBusy,
       WILL_FIRE_wsi_s_adc_mBurstLength,
       WILL_FIRE_wsi_s_adc_mBurstPrecise,
       WILL_FIRE_wsi_s_adc_mByteEn,
       WILL_FIRE_wsi_s_adc_mCmd,
       WILL_FIRE_wsi_s_adc_mData,
       WILL_FIRE_wsi_s_adc_mDataInfo,
       WILL_FIRE_wsi_s_adc_mReqInfo,
       WILL_FIRE_wsi_s_adc_mReqLast,
       WILL_FIRE_wsi_s_adc_mReset_n;

  // inputs to muxes for submodule ports
  reg [127 : 0] MUX_appW3_wide16Fa$enq_1__VAL_1,
		MUX_appW3_wide16Fa$enq_1__VAL_2;
  reg [33 : 0] MUX_appW2_wci_respF_q_0$write_1__VAL_1,
	       MUX_appW3_wci_respF_q_0$write_1__VAL_1,
	       MUX_appW4_wci_respF_q_0$write_1__VAL_1;
  reg [31 : 0] MUX_appW2_wmi_reqF_q_0$write_1__VAL_1,
	       MUX_appW4_wmi_reqF_q_0$write_1__VAL_1;
  wire [145 : 0] MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1,
		 MUX_appW3_wmemi_dhF_q_0$write_1__VAL_2,
		 MUX_appW3_wmemi_dhF_q_1$write_1__VAL_2;
  wire [60 : 0] MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_appW2_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3,
		MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1,
		MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_appW4_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3;
  wire [51 : 0] MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1,
		MUX_appW3_wmemi_reqF_q_0$write_1__VAL_2,
		MUX_appW3_wmemi_reqF_q_1$write_1__VAL_2,
		MUX_appW3_wmemi_reqF_x_wire$wset_1__VAL_1,
		MUX_appW3_wmemi_reqF_x_wire$wset_1__VAL_2;
  wire [37 : 0] MUX_appW2_wmi_dhF_q_0$write_1__VAL_1,
		MUX_appW2_wmi_dhF_q_0$write_1__VAL_2,
		MUX_appW2_wmi_dhF_q_1$write_1__VAL_2,
		MUX_appW2_wmi_dhF_x_wire$wset_1__VAL_1,
		MUX_appW2_wmi_dhF_x_wire$wset_1__VAL_2,
		MUX_appW4_wmi_dhF_q_0$write_1__VAL_1,
		MUX_appW4_wmi_dhF_q_0$write_1__VAL_2,
		MUX_appW4_wmi_dhF_q_1$write_1__VAL_2,
		MUX_appW4_wmi_dhF_x_wire$wset_1__VAL_1,
		MUX_appW4_wmi_dhF_x_wire$wset_1__VAL_2;
  wire [33 : 0] MUX_appW2_wci_respF_q_0$write_1__VAL_2,
		MUX_appW2_wci_respF_q_1$write_1__VAL_2,
		MUX_appW2_wci_respF_x_wire$wset_1__VAL_1,
		MUX_appW2_wci_respF_x_wire$wset_1__VAL_2,
		MUX_appW3_wci_respF_q_0$write_1__VAL_2,
		MUX_appW3_wci_respF_q_1$write_1__VAL_2,
		MUX_appW3_wci_respF_x_wire$wset_1__VAL_1,
		MUX_appW3_wci_respF_x_wire$wset_1__VAL_2,
		MUX_appW4_wci_respF_q_0$write_1__VAL_2,
		MUX_appW4_wci_respF_q_1$write_1__VAL_2,
		MUX_appW4_wci_respF_x_wire$wset_1__VAL_1,
		MUX_appW4_wci_respF_x_wire$wset_1__VAL_2;
  wire [31 : 0] MUX_appW2_mesgCount$write_1__VAL_1,
		MUX_appW2_thisMesg$write_1__VAL_1,
		MUX_appW2_thisMesg$write_1__VAL_2,
		MUX_appW2_wmi_mFlagF_q_0$write_1__VAL_2,
		MUX_appW2_wmi_mFlagF_q_1$write_1__VAL_2,
		MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3,
		MUX_appW2_wmi_reqF_q_0$write_1__VAL_2,
		MUX_appW2_wmi_reqF_q_1$write_1__VAL_2,
		MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_2,
		MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_3,
		MUX_appW3_mesgRdCount$write_1__VAL_1,
		MUX_appW3_mesgWtCount$write_1__VAL_1,
		MUX_appW4_mesgCount$write_1__VAL_1,
		MUX_appW4_thisMesg$write_1__VAL_1,
		MUX_appW4_thisMesg$write_1__VAL_2,
		MUX_appW4_wmi_mFlagF_q_0$write_1__VAL_2,
		MUX_appW4_wmi_mFlagF_q_1$write_1__VAL_2,
		MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3,
		MUX_appW4_wmi_reqF_q_0$write_1__VAL_2,
		MUX_appW4_wmi_reqF_q_1$write_1__VAL_2,
		MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_2,
		MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_3;
  wire [24 : 0] MUX_appW3_dlyWordsStored_value$write_1__VAL_2;
  wire [22 : 0] MUX_appW3_dlyRAG$write_1__VAL_1,
		MUX_appW3_dlyWAG$write_1__VAL_1;
  wire [15 : 0] MUX_appW2_unrollCnt$write_1__VAL_1,
		MUX_appW2_unrollCnt$write_1__VAL_2,
		MUX_appW3_dlyReadyToWrite_value$write_1__VAL_2,
		MUX_appW3_rdSerUnroll$write_1__VAL_2,
		MUX_appW3_unrollCnt$write_1__VAL_1,
		MUX_appW3_unrollCnt$write_1__VAL_2,
		MUX_appW3_wrtSerUnroll$write_1__VAL_2,
		MUX_appW4_unrollCnt$write_1__VAL_1,
		MUX_appW4_unrollCnt$write_1__VAL_2;
  wire [14 : 0] MUX_appW2_mesgLength$write_1__VAL_3,
		MUX_appW2_mesgLength$write_1__VAL_4,
		MUX_appW4_mesgLength$write_1__VAL_3,
		MUX_appW4_mesgLength$write_1__VAL_4;
  wire [13 : 0] MUX_appW2_fabWordsRemain$write_1__VAL_1,
		MUX_appW2_fabWordsRemain$write_1__VAL_2,
		MUX_appW2_mesgReqAddr$write_1__VAL_2,
		MUX_appW4_fabWordsRemain$write_1__VAL_1,
		MUX_appW4_fabWordsRemain$write_1__VAL_2,
		MUX_appW4_mesgReqAddr$write_1__VAL_2;
  wire [11 : 0] MUX_appW2_fabRespCredit_value$write_1__VAL_2,
		MUX_appW2_wsiWordsRemain$write_1__VAL_2,
		MUX_appW4_fabRespCredit_value$write_1__VAL_2,
		MUX_appW4_wsiWordsRemain$write_1__VAL_2;
  wire [8 : 0] MUX_appW2_opcode$write_1__VAL_3,
	       MUX_appW4_opcode$write_1__VAL_3;
  wire [7 : 0] MUX_appW3_dlyReadCredit_value$write_1__VAL_2;
  wire [1 : 0] MUX_appW2_wci_respF_c_r$write_1__VAL_1,
	       MUX_appW2_wci_respF_c_r$write_1__VAL_2,
	       MUX_appW2_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_appW2_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_appW2_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_appW2_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_appW2_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_appW2_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_appW2_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_appW2_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_appW3_rdSerPos$write_1__VAL_1,
	       MUX_appW3_wci_respF_c_r$write_1__VAL_1,
	       MUX_appW3_wci_respF_c_r$write_1__VAL_2,
	       MUX_appW3_wmemi_dhF_c_r$write_1__VAL_1,
	       MUX_appW3_wmemi_dhF_c_r$write_1__VAL_2,
	       MUX_appW3_wmemi_reqF_c_r$write_1__VAL_1,
	       MUX_appW3_wmemi_reqF_c_r$write_1__VAL_2,
	       MUX_appW3_wrtSerPos$write_1__VAL_1,
	       MUX_appW3_wrtSerPos$write_1__VAL_2,
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_appW4_wci_respF_c_r$write_1__VAL_1,
	       MUX_appW4_wci_respF_c_r$write_1__VAL_2,
	       MUX_appW4_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_appW4_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_appW4_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_appW4_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_appW4_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_appW4_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_appW4_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_appW4_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_appW2_endOfMessage$write_1__SEL_1,
       MUX_appW2_impreciseBurst$write_1__SEL_3,
       MUX_appW2_lastMesg$write_1__SEL_2,
       MUX_appW2_mesgCount$write_1__SEL_1,
       MUX_appW2_mesgLength$write_1__SEL_4,
       MUX_appW2_wci_illegalEdge$write_1__SEL_1,
       MUX_appW2_wci_illegalEdge$write_1__SEL_2,
       MUX_appW2_wci_illegalEdge$write_1__VAL_2,
       MUX_appW2_wci_respF_q_0$write_1__SEL_1,
       MUX_appW2_wci_respF_q_1$write_1__SEL_1,
       MUX_appW2_wmi_dhF_q_0$write_1__SEL_1,
       MUX_appW2_wmi_dhF_q_1$write_1__SEL_1,
       MUX_appW2_wmi_mFlagF_q_0$write_1__SEL_1,
       MUX_appW2_wmi_mFlagF_q_1$write_1__SEL_1,
       MUX_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_appW2_wmi_reqF_q_0$write_1__SEL_1,
       MUX_appW2_wmi_reqF_q_1$write_1__SEL_1,
       MUX_appW2_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_appW2_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1,
       MUX_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2,
       MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5,
       MUX_appW3_mesgRdCount$write_1__SEL_1,
       MUX_appW3_mesgWtCount$write_1__SEL_1,
       MUX_appW3_rdSerEmpty$write_1__PSEL_1,
       MUX_appW3_rdSerEmpty$write_1__SEL_1,
       MUX_appW3_rdSyncWord$write_1__VAL_1,
       MUX_appW3_rdSyncWord$write_1__VAL_2,
       MUX_appW3_wci_illegalEdge$write_1__SEL_1,
       MUX_appW3_wci_illegalEdge$write_1__SEL_2,
       MUX_appW3_wci_illegalEdge$write_1__VAL_2,
       MUX_appW3_wci_respF_q_0$write_1__SEL_1,
       MUX_appW3_wci_respF_q_1$write_1__SEL_1,
       MUX_appW3_wide16Fa$enq_1__SEL_1,
       MUX_appW3_wmemi_dhF_q_0$write_1__SEL_1,
       MUX_appW3_wmemi_dhF_q_1$write_1__SEL_1,
       MUX_appW3_wmemi_reqF_q_0$write_1__SEL_1,
       MUX_appW3_wmemi_reqF_q_1$write_1__SEL_1,
       MUX_appW3_wrtSerStage$write_1__SEL_1,
       MUX_appW3_wrtSerStage_1$write_1__SEL_1,
       MUX_appW3_wrtSerStage_2$write_1__SEL_1,
       MUX_appW3_wrtSerStage_3$write_1__SEL_1,
       MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4,
       MUX_appW4_endOfMessage$write_1__SEL_1,
       MUX_appW4_impreciseBurst$write_1__SEL_3,
       MUX_appW4_lastMesg$write_1__SEL_2,
       MUX_appW4_mesgCount$write_1__SEL_1,
       MUX_appW4_mesgLength$write_1__SEL_4,
       MUX_appW4_wci_illegalEdge$write_1__SEL_1,
       MUX_appW4_wci_illegalEdge$write_1__SEL_2,
       MUX_appW4_wci_illegalEdge$write_1__VAL_2,
       MUX_appW4_wci_respF_q_0$write_1__SEL_1,
       MUX_appW4_wci_respF_q_1$write_1__SEL_1,
       MUX_appW4_wmi_dhF_q_0$write_1__SEL_1,
       MUX_appW4_wmi_dhF_q_1$write_1__SEL_1,
       MUX_appW4_wmi_mFlagF_q_0$write_1__SEL_1,
       MUX_appW4_wmi_mFlagF_q_1$write_1__SEL_1,
       MUX_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_appW4_wmi_reqF_q_0$write_1__SEL_1,
       MUX_appW4_wmi_reqF_q_1$write_1__SEL_1,
       MUX_appW4_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_appW4_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1,
       MUX_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2,
       MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5;

  // remaining internal signals
  reg [63 : 0] v__h17905,
	       v__h19322,
	       v__h19399,
	       v__h21119,
	       v__h21380,
	       v__h22177,
	       v__h27090,
	       v__h27272,
	       v__h27427,
	       v__h3880,
	       v__h4065,
	       v__h4220,
	       v__h46352,
	       v__h51285,
	       v__h51467,
	       v__h51622,
	       v__h65300,
	       v__h66717,
	       v__h66794,
	       v__h68514,
	       v__h68775,
	       v__h69569;
  reg [31 : 0] v__h43330,
	       value__h53813,
	       value__h6411,
	       x_data__h21722,
	       x_data__h45685,
	       x_data__h69117;
  reg CASE_appW3_wrtSerPos_0b1_0_1_1_1_2_1_3_0b1__q2,
      CASE_appW3_wrtSerPos_NOT_appW3_wrtSerPos_EQ_3__ETC__q1;
  wire [127 : 0] IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1300,
		 IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1329,
		 x__h41591,
		 x__h41618,
		 x__h42241,
		 x__h42265;
  wire [55 : 0] IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2867,
		IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2888;
  wire [35 : 0] addr__h42665, addr__h43015;
  wire [31 : 0] data__h41956,
		delayStatus__h45295,
		rdat__h21771,
		rdat__h21777,
		rdat__h21783,
		rdat__h21796,
		rdat__h21819,
		rdat__h21919,
		rdat__h21933,
		rdat__h21941,
		rdat__h21947,
		rdat__h21961,
		rdat__h21969,
		rdat__h45718,
		rdat__h45724,
		rdat__h45730,
		rdat__h45736,
		rdat__h45860,
		rdat__h45874,
		rdat__h45882,
		rdat__h45888,
		rdat__h45902,
		rdat__h45910,
		rdat__h45916,
		rdat__h45922,
		rdat__h45928,
		rdat__h45934,
		rdat__h45945,
		rdat__h45956,
		rdat__h45967,
		rdat__h45988,
		rdat__h46043,
		rdat__h46052,
		rdat__h46061,
		rdat__h46070,
		rdat__h69166,
		rdat__h69172,
		rdat__h69178,
		rdat__h69191,
		rdat__h69214,
		rdat__h69314,
		rdat__h69328,
		rdat__h69336,
		rdat__h69342,
		rdat__h69356,
		rdat__h69364,
		x__h38355;
  wire [26 : 0] x__h42723, x__h43060;
  wire [23 : 0] btm__h40844,
		mesgMetaF_length__h19700,
		mesgMetaF_length__h20436,
		mesgMetaF_length__h67095,
		mesgMetaF_length__h67831,
		x__h45740;
  wire [15 : 0] wsiBurstLength__h18367,
		wsiBurstLength__h65762,
		x__h21823,
		x__h69218,
		x_length__h19455,
		x_length__h66850;
  wire [13 : 0] addr__h20306,
		addr__h67701,
		appW3_mesgLengthSoFar_245_PLUS_1___d2720,
		b__h17989,
		b__h65384,
		mlp1B__h20290,
		mlp1B__h67685,
		mlp1__h20289,
		mlp1__h67684,
		x__h19473,
		x__h66868;
  wire [12 : 0] x__h38456;
  wire [11 : 0] b__h14801,
		b__h62196,
		bl__h19562,
		bl__h66957,
		sendData_burstLength__h18449,
		sendData_burstLength__h65844,
		x__h16155,
		x__h63550,
		x_burstLength__h45202;
  wire [7 : 0] x__h19459, x__h66854;
  wire [3 : 0] sendData_byteEn__h18451,
	       sendData_byteEn__h65846,
	       x_byteEn__h45203;
  wire [2 : 0] IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2855,
	       IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2858;
  wire [1 : 0] appW3_wrtSerPos_262_PLUS_1___d2719;
  wire IF_appW3_wrtSerPos_262_EQ_0_270_OR_appW3_wrtSe_ETC___d1315,
       NOT_appW2_wmi_reqF_c_r_39_EQ_2_58_59_AND_appW2_ETC___d510,
       NOT_appW3_mesgWF_rRdPtr_176_EQ_appW3_mesgWF_rW_ETC___d1304,
       NOT_appW3_mesgWF_rRdPtr_176_PLUS_2048_232_EQ_a_ETC___d1234,
       NOT_appW3_wrtSerPos_262_EQ_3_263_264_AND_NOT_a_ETC___d1278,
       NOT_appW4_wmi_reqF_c_r_804_EQ_2_822_823_AND_ap_ETC___d2171,
       appW2_wmi_operateD_25_AND_appW2_wmi_peerIsRead_ETC___d605,
       appW2_wmi_respF_i_notEmpty__22_AND_appW2_smaCt_ETC___d527,
       appW2_wsiS_reqFifo_i_notEmpty__57_AND_NOT_appW_ETC___d624,
       appW2_wsiS_reqFifo_notFull__59_AND_appW2_wsiS__ETC___d381,
       appW3_bytesWritten_258_ULT_appW3_dlyHoldoffByt_ETC___d2846,
       appW3_cyclesPassed_228_ULT_appW3_dlyHoldoffCyc_ETC___d2844,
       appW3_dlyWordsStored_value_189_SLE_0_336_OR_ap_ETC___d1344,
       appW3_dlyWordsStored_value_189_SLE_0___d2845,
       appW3_dlyWordsStored_value_189_SLT_8388608___d1346,
       appW3_mesgRF_i_notFull__443_AND_NOT_appW3_rdSe_ETC___d1444,
       appW3_metaRF_i_notFull__392_AND_NOT_appW3_rdSe_ETC___d1403,
       appW3_wci_cState_47_EQ_2_58_AND_appW3_dlyCtrl__ETC___d1364,
       appW3_wsiS_reqFifo_notFull__51_AND_appW3_wsiS__ETC___d973,
       appW4_wmi_operateD_888_AND_appW4_wmi_peerIsRea_ETC___d2266,
       appW4_wmi_respF_i_notEmpty__183_AND_appW4_smaC_ETC___d2188,
       appW4_wsiS_reqFifo_i_notEmpty__118_AND_NOT_app_ETC___d2285,
       appW4_wsiS_reqFifo_notFull__020_AND_appW4_wsiS_ETC___d2042,
       x__h18160,
       x__h65555;

  // action method wci_s_0_mCmd
  assign CAN_FIRE_wci_s_0_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mCmd = 1'd1 ;

  // action method wci_s_0_mAddrSpace
  assign CAN_FIRE_wci_s_0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mAddrSpace = 1'd1 ;

  // action method wci_s_0_mByteEn
  assign CAN_FIRE_wci_s_0_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mByteEn = 1'd1 ;

  // action method wci_s_0_mAddr
  assign CAN_FIRE_wci_s_0_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mAddr = 1'd1 ;

  // action method wci_s_0_mData
  assign CAN_FIRE_wci_s_0_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mData = 1'd1 ;

  // value method wci_s_0_sResp
  assign wci_s_0_SResp = 2'd0 ;

  // value method wci_s_0_sData
  assign wci_s_0_SData = 32'hAAAAAAAA ;

  // value method wci_s_0_sThreadBusy
  assign wci_s_0_SThreadBusy = 1'd1 ;

  // value method wci_s_0_sFlag
  assign wci_s_0_SFlag = 2'b0 ;

  // action method wci_s_0_mFlag
  assign CAN_FIRE_wci_s_0_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_0_mFlag = 1'd1 ;

  // action method wci_s_1_mCmd
  assign CAN_FIRE_wci_s_1_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mCmd = 1'd1 ;

  // action method wci_s_1_mAddrSpace
  assign CAN_FIRE_wci_s_1_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mAddrSpace = 1'd1 ;

  // action method wci_s_1_mByteEn
  assign CAN_FIRE_wci_s_1_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mByteEn = 1'd1 ;

  // action method wci_s_1_mAddr
  assign CAN_FIRE_wci_s_1_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mAddr = 1'd1 ;

  // action method wci_s_1_mData
  assign CAN_FIRE_wci_s_1_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mData = 1'd1 ;

  // value method wci_s_1_sResp
  assign wci_s_1_SResp = 2'd0 ;

  // value method wci_s_1_sData
  assign wci_s_1_SData = 32'hAAAAAAAA ;

  // value method wci_s_1_sThreadBusy
  assign wci_s_1_SThreadBusy = 1'd1 ;

  // value method wci_s_1_sFlag
  assign wci_s_1_SFlag = 2'b0 ;

  // action method wci_s_1_mFlag
  assign CAN_FIRE_wci_s_1_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_1_mFlag = 1'd1 ;

  // action method wci_s_2_mCmd
  assign CAN_FIRE_wci_s_2_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mCmd = 1'd1 ;

  // action method wci_s_2_mAddrSpace
  assign CAN_FIRE_wci_s_2_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mAddrSpace = 1'd1 ;

  // action method wci_s_2_mByteEn
  assign CAN_FIRE_wci_s_2_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mByteEn = 1'd1 ;

  // action method wci_s_2_mAddr
  assign CAN_FIRE_wci_s_2_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mAddr = 1'd1 ;

  // action method wci_s_2_mData
  assign CAN_FIRE_wci_s_2_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mData = 1'd1 ;

  // value method wci_s_2_sResp
  assign wci_s_2_SResp = appW2_wci_respF_q_0[33:32] ;

  // value method wci_s_2_sData
  assign wci_s_2_SData = appW2_wci_respF_q_0[31:0] ;

  // value method wci_s_2_sThreadBusy
  assign wci_s_2_SThreadBusy =
	     appW2_wci_reqF_countReg > 2'd1 || appW2_wci_isReset$VAL ;

  // value method wci_s_2_sFlag
  assign wci_s_2_SFlag = { 1'd1, appW2_wci_sFlagReg } ;

  // action method wci_s_2_mFlag
  assign CAN_FIRE_wci_s_2_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_2_mFlag = 1'd1 ;

  // action method wci_s_3_mCmd
  assign CAN_FIRE_wci_s_3_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mCmd = 1'd1 ;

  // action method wci_s_3_mAddrSpace
  assign CAN_FIRE_wci_s_3_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mAddrSpace = 1'd1 ;

  // action method wci_s_3_mByteEn
  assign CAN_FIRE_wci_s_3_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mByteEn = 1'd1 ;

  // action method wci_s_3_mAddr
  assign CAN_FIRE_wci_s_3_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mAddr = 1'd1 ;

  // action method wci_s_3_mData
  assign CAN_FIRE_wci_s_3_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mData = 1'd1 ;

  // value method wci_s_3_sResp
  assign wci_s_3_SResp = appW3_wci_respF_q_0[33:32] ;

  // value method wci_s_3_sData
  assign wci_s_3_SData = appW3_wci_respF_q_0[31:0] ;

  // value method wci_s_3_sThreadBusy
  assign wci_s_3_SThreadBusy =
	     appW3_wci_reqF_countReg > 2'd1 || appW3_wci_isReset$VAL ;

  // value method wci_s_3_sFlag
  assign wci_s_3_SFlag = { 1'd1, appW3_wci_sFlagReg } ;

  // action method wci_s_3_mFlag
  assign CAN_FIRE_wci_s_3_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_3_mFlag = 1'd1 ;

  // action method wci_s_4_mCmd
  assign CAN_FIRE_wci_s_4_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mCmd = 1'd1 ;

  // action method wci_s_4_mAddrSpace
  assign CAN_FIRE_wci_s_4_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mAddrSpace = 1'd1 ;

  // action method wci_s_4_mByteEn
  assign CAN_FIRE_wci_s_4_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mByteEn = 1'd1 ;

  // action method wci_s_4_mAddr
  assign CAN_FIRE_wci_s_4_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mAddr = 1'd1 ;

  // action method wci_s_4_mData
  assign CAN_FIRE_wci_s_4_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mData = 1'd1 ;

  // value method wci_s_4_sResp
  assign wci_s_4_SResp = appW4_wci_respF_q_0[33:32] ;

  // value method wci_s_4_sData
  assign wci_s_4_SData = appW4_wci_respF_q_0[31:0] ;

  // value method wci_s_4_sThreadBusy
  assign wci_s_4_SThreadBusy =
	     appW4_wci_reqF_countReg > 2'd1 || appW4_wci_isReset$VAL ;

  // value method wci_s_4_sFlag
  assign wci_s_4_SFlag = { 1'd1, appW4_wci_sFlagReg } ;

  // action method wci_s_4_mFlag
  assign CAN_FIRE_wci_s_4_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_4_mFlag = 1'd1 ;

  // action method wci_s_5_mCmd
  assign CAN_FIRE_wci_s_5_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mCmd = 1'd1 ;

  // action method wci_s_5_mAddrSpace
  assign CAN_FIRE_wci_s_5_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mAddrSpace = 1'd1 ;

  // action method wci_s_5_mByteEn
  assign CAN_FIRE_wci_s_5_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mByteEn = 1'd1 ;

  // action method wci_s_5_mAddr
  assign CAN_FIRE_wci_s_5_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mAddr = 1'd1 ;

  // action method wci_s_5_mData
  assign CAN_FIRE_wci_s_5_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mData = 1'd1 ;

  // value method wci_s_5_sResp
  assign wci_s_5_SResp = 2'd0 ;

  // value method wci_s_5_sData
  assign wci_s_5_SData = 32'hAAAAAAAA ;

  // value method wci_s_5_sThreadBusy
  assign wci_s_5_SThreadBusy = 1'd1 ;

  // value method wci_s_5_sFlag
  assign wci_s_5_SFlag = 2'b0 ;

  // action method wci_s_5_mFlag
  assign CAN_FIRE_wci_s_5_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_5_mFlag = 1'd1 ;

  // action method wci_s_6_mCmd
  assign CAN_FIRE_wci_s_6_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mCmd = 1'd1 ;

  // action method wci_s_6_mAddrSpace
  assign CAN_FIRE_wci_s_6_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mAddrSpace = 1'd1 ;

  // action method wci_s_6_mByteEn
  assign CAN_FIRE_wci_s_6_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mByteEn = 1'd1 ;

  // action method wci_s_6_mAddr
  assign CAN_FIRE_wci_s_6_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mAddr = 1'd1 ;

  // action method wci_s_6_mData
  assign CAN_FIRE_wci_s_6_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mData = 1'd1 ;

  // value method wci_s_6_sResp
  assign wci_s_6_SResp = 2'd0 ;

  // value method wci_s_6_sData
  assign wci_s_6_SData = 32'hAAAAAAAA ;

  // value method wci_s_6_sThreadBusy
  assign wci_s_6_SThreadBusy = 1'd1 ;

  // value method wci_s_6_sFlag
  assign wci_s_6_SFlag = 2'b0 ;

  // action method wci_s_6_mFlag
  assign CAN_FIRE_wci_s_6_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_6_mFlag = 1'd1 ;

  // action method wci_s_7_mCmd
  assign CAN_FIRE_wci_s_7_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mCmd = 1'd1 ;

  // action method wci_s_7_mAddrSpace
  assign CAN_FIRE_wci_s_7_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mAddrSpace = 1'd1 ;

  // action method wci_s_7_mByteEn
  assign CAN_FIRE_wci_s_7_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mByteEn = 1'd1 ;

  // action method wci_s_7_mAddr
  assign CAN_FIRE_wci_s_7_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mAddr = 1'd1 ;

  // action method wci_s_7_mData
  assign CAN_FIRE_wci_s_7_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mData = 1'd1 ;

  // value method wci_s_7_sResp
  assign wci_s_7_SResp = 2'd0 ;

  // value method wci_s_7_sData
  assign wci_s_7_SData = 32'hAAAAAAAA ;

  // value method wci_s_7_sThreadBusy
  assign wci_s_7_SThreadBusy = 1'd1 ;

  // value method wci_s_7_sFlag
  assign wci_s_7_SFlag = 2'b0 ;

  // action method wci_s_7_mFlag
  assign CAN_FIRE_wci_s_7_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_7_mFlag = 1'd1 ;

  // value method wmiM0_mCmd
  assign wmiM0_MCmd =
	     appW2_wmi_sThreadBusy_d ? 3'd0 : appW2_wmi_reqF_q_0[31:29] ;

  // value method wmiM0_mReqLast
  assign wmiM0_MReqLast = appW2_wmi_reqF_q_0[28] ;

  // value method wmiM0_mReqInfo
  assign wmiM0_MReqInfo = appW2_wmi_reqF_q_0[27] ;

  // value method wmiM0_mAddrSpace
  assign wmiM0_MAddrSpace = appW2_wmi_reqF_q_0[26] ;

  // value method wmiM0_mAddr
  assign wmiM0_MAddr = appW2_wmi_reqF_q_0[25:12] ;

  // value method wmiM0_mBurstLength
  assign wmiM0_MBurstLength = appW2_wmi_reqF_q_0[11:0] ;

  // value method wmiM0_mDataValid
  assign wmiM0_MDataValid =
	     !appW2_wmi_sDataThreadBusy_d && appW2_wmi_dhF_q_0[37] ;

  // value method wmiM0_mDataLast
  assign wmiM0_MDataLast = appW2_wmi_dhF_q_0[36] ;

  // value method wmiM0_mData
  assign wmiM0_MData = appW2_wmi_dhF_q_0[35:4] ;

  // value method wmiM0_mDataByteEn
  assign wmiM0_MDataByteEn = appW2_wmi_dhF_q_0[3:0] ;

  // action method wmiM0_sResp
  assign CAN_FIRE_wmiM0_sResp = 1'd1 ;
  assign WILL_FIRE_wmiM0_sResp = 1'd1 ;

  // action method wmiM0_sData
  assign CAN_FIRE_wmiM0_sData = 1'd1 ;
  assign WILL_FIRE_wmiM0_sData = 1'd1 ;

  // action method wmiM0_sThreadBusy
  assign CAN_FIRE_wmiM0_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM0_sThreadBusy = wmiM0_SThreadBusy ;

  // action method wmiM0_sDataThreadBusy
  assign CAN_FIRE_wmiM0_sDataThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM0_sDataThreadBusy = wmiM0_SDataThreadBusy ;

  // action method wmiM0_sRespLast
  assign CAN_FIRE_wmiM0_sRespLast = 1'd1 ;
  assign WILL_FIRE_wmiM0_sRespLast = wmiM0_SRespLast ;

  // action method wmiM0_sFlag
  assign CAN_FIRE_wmiM0_sFlag = 1'd1 ;
  assign WILL_FIRE_wmiM0_sFlag = 1'd1 ;

  // value method wmiM0_mFlag
  assign wmiM0_MFlag =
	     appW2_wmi_sThreadBusy_d ? 32'd0 : appW2_wmi_mFlagF_q_0 ;

  // value method wmiM0_mReset_n
  assign wmiM0_MReset_n = !appW2_wmi_isReset$VAL && appW2_wmi_operateD ;

  // action method wmiM0_sReset_n
  assign CAN_FIRE_wmiM0_sReset_n = 1'd1 ;
  assign WILL_FIRE_wmiM0_sReset_n = wmiM0_SReset_n ;

  // value method wmiM1_mCmd
  assign wmiM1_MCmd =
	     appW4_wmi_sThreadBusy_d ? 3'd0 : appW4_wmi_reqF_q_0[31:29] ;

  // value method wmiM1_mReqLast
  assign wmiM1_MReqLast = appW4_wmi_reqF_q_0[28] ;

  // value method wmiM1_mReqInfo
  assign wmiM1_MReqInfo = appW4_wmi_reqF_q_0[27] ;

  // value method wmiM1_mAddrSpace
  assign wmiM1_MAddrSpace = appW4_wmi_reqF_q_0[26] ;

  // value method wmiM1_mAddr
  assign wmiM1_MAddr = appW4_wmi_reqF_q_0[25:12] ;

  // value method wmiM1_mBurstLength
  assign wmiM1_MBurstLength = appW4_wmi_reqF_q_0[11:0] ;

  // value method wmiM1_mDataValid
  assign wmiM1_MDataValid =
	     !appW4_wmi_sDataThreadBusy_d && appW4_wmi_dhF_q_0[37] ;

  // value method wmiM1_mDataLast
  assign wmiM1_MDataLast = appW4_wmi_dhF_q_0[36] ;

  // value method wmiM1_mData
  assign wmiM1_MData = appW4_wmi_dhF_q_0[35:4] ;

  // value method wmiM1_mDataByteEn
  assign wmiM1_MDataByteEn = appW4_wmi_dhF_q_0[3:0] ;

  // action method wmiM1_sResp
  assign CAN_FIRE_wmiM1_sResp = 1'd1 ;
  assign WILL_FIRE_wmiM1_sResp = 1'd1 ;

  // action method wmiM1_sData
  assign CAN_FIRE_wmiM1_sData = 1'd1 ;
  assign WILL_FIRE_wmiM1_sData = 1'd1 ;

  // action method wmiM1_sThreadBusy
  assign CAN_FIRE_wmiM1_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM1_sThreadBusy = wmiM1_SThreadBusy ;

  // action method wmiM1_sDataThreadBusy
  assign CAN_FIRE_wmiM1_sDataThreadBusy = 1'd1 ;
  assign WILL_FIRE_wmiM1_sDataThreadBusy = wmiM1_SDataThreadBusy ;

  // action method wmiM1_sRespLast
  assign CAN_FIRE_wmiM1_sRespLast = 1'd1 ;
  assign WILL_FIRE_wmiM1_sRespLast = wmiM1_SRespLast ;

  // action method wmiM1_sFlag
  assign CAN_FIRE_wmiM1_sFlag = 1'd1 ;
  assign WILL_FIRE_wmiM1_sFlag = 1'd1 ;

  // value method wmiM1_mFlag
  assign wmiM1_MFlag =
	     appW4_wmi_sThreadBusy_d ? 32'd0 : appW4_wmi_mFlagF_q_0 ;

  // value method wmiM1_mReset_n
  assign wmiM1_MReset_n = !appW4_wmi_isReset$VAL && appW4_wmi_operateD ;

  // action method wmiM1_sReset_n
  assign CAN_FIRE_wmiM1_sReset_n = 1'd1 ;
  assign WILL_FIRE_wmiM1_sReset_n = wmiM1_SReset_n ;

  // value method wmemiM_mCmd
  assign wmemiM_MCmd = appW3_wmemi_reqF_q_0[51:49] ;

  // value method wmemiM_mReqLast
  assign wmemiM_MReqLast = appW3_wmemi_reqF_q_0[48] ;

  // value method wmemiM_mAddr
  assign wmemiM_MAddr = appW3_wmemi_reqF_q_0[47:12] ;

  // value method wmemiM_mBurstLength
  assign wmemiM_MBurstLength = appW3_wmemi_reqF_q_0[11:0] ;

  // value method wmemiM_mDataValid
  assign wmemiM_MDataValid = appW3_wmemi_dhF_q_0[145] ;

  // value method wmemiM_mDataLast
  assign wmemiM_MDataLast = appW3_wmemi_dhF_q_0[144] ;

  // value method wmemiM_mData
  assign wmemiM_MData = appW3_wmemi_dhF_q_0[143:16] ;

  // value method wmemiM_mDataByteEn
  assign wmemiM_MDataByteEn = appW3_wmemi_dhF_q_0[15:0] ;

  // action method wmemiM_sResp
  assign CAN_FIRE_wmemiM_sResp = 1'd1 ;
  assign WILL_FIRE_wmemiM_sResp = 1'd1 ;

  // action method wmemiM_sRespLast
  assign CAN_FIRE_wmemiM_sRespLast = 1'd1 ;
  assign WILL_FIRE_wmemiM_sRespLast = wmemiM_SRespLast ;

  // action method wmemiM_sData
  assign CAN_FIRE_wmemiM_sData = 1'd1 ;
  assign WILL_FIRE_wmemiM_sData = 1'd1 ;

  // action method wmemiM_sCmdAccept
  assign CAN_FIRE_wmemiM_sCmdAccept = 1'd1 ;
  assign WILL_FIRE_wmemiM_sCmdAccept = wmemiM_SCmdAccept ;

  // action method wmemiM_sDataAccept
  assign CAN_FIRE_wmemiM_sDataAccept = 1'd1 ;
  assign WILL_FIRE_wmemiM_sDataAccept = wmemiM_SDataAccept ;

  // value method wmemiM_mReset_n
  assign wmemiM_MReset_n = !appW3_wmemi_isReset$VAL && appW3_wmemi_operateD ;

  // action method wsi_s_adc_mCmd
  assign CAN_FIRE_wsi_s_adc_mCmd = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mCmd = 1'd1 ;

  // action method wsi_s_adc_mReqLast
  assign CAN_FIRE_wsi_s_adc_mReqLast = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReqLast = wsi_s_adc_MReqLast ;

  // action method wsi_s_adc_mBurstPrecise
  assign CAN_FIRE_wsi_s_adc_mBurstPrecise = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mBurstPrecise = wsi_s_adc_MBurstPrecise ;

  // action method wsi_s_adc_mBurstLength
  assign CAN_FIRE_wsi_s_adc_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mBurstLength = 1'd1 ;

  // action method wsi_s_adc_mData
  assign CAN_FIRE_wsi_s_adc_mData = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mData = 1'd1 ;

  // action method wsi_s_adc_mByteEn
  assign CAN_FIRE_wsi_s_adc_mByteEn = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mByteEn = 1'd1 ;

  // action method wsi_s_adc_mReqInfo
  assign CAN_FIRE_wsi_s_adc_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReqInfo = 1'd1 ;

  // action method wsi_s_adc_mDataInfo
  assign CAN_FIRE_wsi_s_adc_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mDataInfo = 1'd1 ;

  // value method wsi_s_adc_sThreadBusy
  assign wsi_s_adc_SThreadBusy =
	     !CAN_FIRE_RL_appW2_wsiS_backpressure ||
	     appW2_wsiS_sThreadBusy_dw$wget ;

  // value method wsi_s_adc_sReset_n
  assign wsi_s_adc_SReset_n = !appW2_wsiS_isReset$VAL && appW2_wsiS_operateD ;

  // action method wsi_s_adc_mReset_n
  assign CAN_FIRE_wsi_s_adc_mReset_n = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReset_n = wsi_s_adc_MReset_n ;

  // value method wsi_m_dac_mCmd
  assign wsi_m_dac_MCmd =
	     appW4_wsiM_sThreadBusy_d ? 3'd0 : appW4_wsiM_reqFifo_q_0[60:58] ;

  // value method wsi_m_dac_mReqLast
  assign wsi_m_dac_MReqLast =
	     !appW4_wsiM_sThreadBusy_d && appW4_wsiM_reqFifo_q_0[57] ;

  // value method wsi_m_dac_mBurstPrecise
  assign wsi_m_dac_MBurstPrecise =
	     !appW4_wsiM_sThreadBusy_d && appW4_wsiM_reqFifo_q_0[56] ;

  // value method wsi_m_dac_mBurstLength
  assign wsi_m_dac_MBurstLength =
	     appW4_wsiM_sThreadBusy_d ?
	       12'd0 :
	       appW4_wsiM_reqFifo_q_0[55:44] ;

  // value method wsi_m_dac_mData
  assign wsi_m_dac_MData = appW4_wsiM_reqFifo_q_0[43:12] ;

  // value method wsi_m_dac_mByteEn
  assign wsi_m_dac_MByteEn = appW4_wsiM_reqFifo_q_0[11:8] ;

  // value method wsi_m_dac_mReqInfo
  assign wsi_m_dac_MReqInfo =
	     appW4_wsiM_sThreadBusy_d ? 8'd0 : appW4_wsiM_reqFifo_q_0[7:0] ;

  // action method wsi_m_dac_sThreadBusy
  assign CAN_FIRE_wsi_m_dac_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wsi_m_dac_sThreadBusy = wsi_m_dac_SThreadBusy ;

  // value method wsi_m_dac_mReset_n
  assign wsi_m_dac_MReset_n = !appW4_wsiM_isReset$VAL && appW4_wsiM_operateD ;

  // action method wsi_m_dac_sReset_n
  assign CAN_FIRE_wsi_m_dac_sReset_n = 1'd1 ;
  assign WILL_FIRE_wsi_m_dac_sReset_n = wsi_m_dac_SReset_n ;

  // submodule appW2_respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) appW2_respF_memory(.CLKA(CLK),
						 .CLKB(CLK),
						 .ADDRA(appW2_respF_memory$ADDRA),
						 .ADDRB(appW2_respF_memory$ADDRB),
						 .DIA(appW2_respF_memory$DIA),
						 .DIB(appW2_respF_memory$DIB),
						 .WEA(appW2_respF_memory$WEA),
						 .WEB(appW2_respF_memory$WEB),
						 .ENA(appW2_respF_memory$ENA),
						 .ENB(appW2_respF_memory$ENB),
						 .DOA(),
						 .DOB(appW2_respF_memory$DOB));

  // submodule appW2_wci_isReset
  ResetToBool appW2_wci_isReset(.RST(RST_N_rst_2),
				.VAL(appW2_wci_isReset$VAL));

  // submodule appW2_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW2_wci_reqF(.RST_N(RST_N_rst_2),
					      .CLK(CLK),
					      .D_IN(appW2_wci_reqF$D_IN),
					      .ENQ(appW2_wci_reqF$ENQ),
					      .DEQ(appW2_wci_reqF$DEQ),
					      .CLR(appW2_wci_reqF$CLR),
					      .D_OUT(appW2_wci_reqF$D_OUT),
					      .FULL_N(),
					      .EMPTY_N(appW2_wci_reqF$EMPTY_N));

  // submodule appW2_wmi_isReset
  ResetToBool appW2_wmi_isReset(.RST(RST_N_rst_2),
				.VAL(appW2_wmi_isReset$VAL));

  // submodule appW2_wmi_respF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) appW2_wmi_respF(.RST_N(RST_N_rst_2),
					   .CLK(CLK),
					   .D_IN(appW2_wmi_respF$D_IN),
					   .ENQ(appW2_wmi_respF$ENQ),
					   .DEQ(appW2_wmi_respF$DEQ),
					   .CLR(appW2_wmi_respF$CLR),
					   .D_OUT(appW2_wmi_respF$D_OUT),
					   .FULL_N(appW2_wmi_respF$FULL_N),
					   .EMPTY_N(appW2_wmi_respF$EMPTY_N));

  // submodule appW2_wsiM_isReset
  ResetToBool appW2_wsiM_isReset(.RST(RST_N_rst_2),
				 .VAL(appW2_wsiM_isReset$VAL));

  // submodule appW2_wsiS_isReset
  ResetToBool appW2_wsiS_isReset(.RST(RST_N_rst_2),
				 .VAL(appW2_wsiS_isReset$VAL));

  // submodule appW2_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW2_wsiS_reqFifo(.RST_N(RST_N_rst_2),
						  .CLK(CLK),
						  .D_IN(appW2_wsiS_reqFifo$D_IN),
						  .ENQ(appW2_wsiS_reqFifo$ENQ),
						  .DEQ(appW2_wsiS_reqFifo$DEQ),
						  .CLR(appW2_wsiS_reqFifo$CLR),
						  .D_OUT(appW2_wsiS_reqFifo$D_OUT),
						  .FULL_N(appW2_wsiS_reqFifo$FULL_N),
						  .EMPTY_N(appW2_wsiS_reqFifo$EMPTY_N));

  // submodule appW3_mesgRF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) appW3_mesgRF(.RST_N(RST_N_rst_3),
					    .CLK(CLK),
					    .D_IN(appW3_mesgRF$D_IN),
					    .ENQ(appW3_mesgRF$ENQ),
					    .DEQ(appW3_mesgRF$DEQ),
					    .CLR(appW3_mesgRF$CLR),
					    .D_OUT(appW3_mesgRF$D_OUT),
					    .FULL_N(appW3_mesgRF$FULL_N),
					    .EMPTY_N(appW3_mesgRF$EMPTY_N));

  // submodule appW3_mesgWF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(13'd4096)) appW3_mesgWF_memory(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(appW3_mesgWF_memory$ADDRA),
						  .ADDRB(appW3_mesgWF_memory$ADDRB),
						  .DIA(appW3_mesgWF_memory$DIA),
						  .DIB(appW3_mesgWF_memory$DIB),
						  .WEA(appW3_mesgWF_memory$WEA),
						  .WEB(appW3_mesgWF_memory$WEB),
						  .ENA(appW3_mesgWF_memory$ENA),
						  .ENB(appW3_mesgWF_memory$ENB),
						  .DOA(),
						  .DOB(appW3_mesgWF_memory$DOB));

  // submodule appW3_metaRF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) appW3_metaRF(.RST_N(RST_N_rst_3),
					    .CLK(CLK),
					    .D_IN(appW3_metaRF$D_IN),
					    .ENQ(appW3_metaRF$ENQ),
					    .DEQ(appW3_metaRF$DEQ),
					    .CLR(appW3_metaRF$CLR),
					    .D_OUT(appW3_metaRF$D_OUT),
					    .FULL_N(appW3_metaRF$FULL_N),
					    .EMPTY_N(appW3_metaRF$EMPTY_N));

  // submodule appW3_metaWF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) appW3_metaWF(.RST_N(RST_N_rst_3),
					    .CLK(CLK),
					    .D_IN(appW3_metaWF$D_IN),
					    .ENQ(appW3_metaWF$ENQ),
					    .DEQ(appW3_metaWF$DEQ),
					    .CLR(appW3_metaWF$CLR),
					    .D_OUT(appW3_metaWF$D_OUT),
					    .FULL_N(appW3_metaWF$FULL_N),
					    .EMPTY_N(appW3_metaWF$EMPTY_N));

  // submodule appW3_wci_isReset
  ResetToBool appW3_wci_isReset(.RST(RST_N_rst_3),
				.VAL(appW3_wci_isReset$VAL));

  // submodule appW3_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW3_wci_reqF(.RST_N(RST_N_rst_3),
					      .CLK(CLK),
					      .D_IN(appW3_wci_reqF$D_IN),
					      .ENQ(appW3_wci_reqF$ENQ),
					      .DEQ(appW3_wci_reqF$DEQ),
					      .CLR(appW3_wci_reqF$CLR),
					      .D_OUT(appW3_wci_reqF$D_OUT),
					      .FULL_N(),
					      .EMPTY_N(appW3_wci_reqF$EMPTY_N));

  // submodule appW3_wide16Fa
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) appW3_wide16Fa(.RST_N(RST_N_rst_3),
					      .CLK(CLK),
					      .D_IN(appW3_wide16Fa$D_IN),
					      .ENQ(appW3_wide16Fa$ENQ),
					      .DEQ(appW3_wide16Fa$DEQ),
					      .CLR(appW3_wide16Fa$CLR),
					      .D_OUT(appW3_wide16Fa$D_OUT),
					      .FULL_N(appW3_wide16Fa$FULL_N),
					      .EMPTY_N(appW3_wide16Fa$EMPTY_N));

  // submodule appW3_wide16Fb
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) appW3_wide16Fb(.RST_N(RST_N_rst_3),
					      .CLK(CLK),
					      .D_IN(appW3_wide16Fb$D_IN),
					      .ENQ(appW3_wide16Fb$ENQ),
					      .DEQ(appW3_wide16Fb$DEQ),
					      .CLR(appW3_wide16Fb$CLR),
					      .D_OUT(appW3_wide16Fb$D_OUT),
					      .FULL_N(appW3_wide16Fb$FULL_N),
					      .EMPTY_N(appW3_wide16Fb$EMPTY_N));

  // submodule appW3_wide16Fc
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) appW3_wide16Fc(.RST_N(RST_N_rst_3),
					      .CLK(CLK),
					      .D_IN(appW3_wide16Fc$D_IN),
					      .ENQ(appW3_wide16Fc$ENQ),
					      .DEQ(appW3_wide16Fc$DEQ),
					      .CLR(appW3_wide16Fc$CLR),
					      .D_OUT(appW3_wide16Fc$D_OUT),
					      .FULL_N(appW3_wide16Fc$FULL_N),
					      .EMPTY_N(appW3_wide16Fc$EMPTY_N));

  // submodule appW3_wmemi_isReset
  ResetToBool appW3_wmemi_isReset(.RST(RST_N_rst_3),
				  .VAL(appW3_wmemi_isReset$VAL));

  // submodule appW3_wmemi_respF
  FIFO2 #(.width(32'd131),
	  .guarded(32'd1)) appW3_wmemi_respF(.RST_N(RST_N_rst_3),
					     .CLK(CLK),
					     .D_IN(appW3_wmemi_respF$D_IN),
					     .ENQ(appW3_wmemi_respF$ENQ),
					     .DEQ(appW3_wmemi_respF$DEQ),
					     .CLR(appW3_wmemi_respF$CLR),
					     .D_OUT(appW3_wmemi_respF$D_OUT),
					     .FULL_N(appW3_wmemi_respF$FULL_N),
					     .EMPTY_N(appW3_wmemi_respF$EMPTY_N));

  // submodule appW3_wsiM_isReset
  ResetToBool appW3_wsiM_isReset(.RST(RST_N_rst_3),
				 .VAL(appW3_wsiM_isReset$VAL));

  // submodule appW3_wsiS_isReset
  ResetToBool appW3_wsiS_isReset(.RST(RST_N_rst_3),
				 .VAL(appW3_wsiS_isReset$VAL));

  // submodule appW3_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW3_wsiS_reqFifo(.RST_N(RST_N_rst_3),
						  .CLK(CLK),
						  .D_IN(appW3_wsiS_reqFifo$D_IN),
						  .ENQ(appW3_wsiS_reqFifo$ENQ),
						  .DEQ(appW3_wsiS_reqFifo$DEQ),
						  .CLR(appW3_wsiS_reqFifo$CLR),
						  .D_OUT(appW3_wsiS_reqFifo$D_OUT),
						  .FULL_N(appW3_wsiS_reqFifo$FULL_N),
						  .EMPTY_N(appW3_wsiS_reqFifo$EMPTY_N));

  // submodule appW4_respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) appW4_respF_memory(.CLKA(CLK),
						 .CLKB(CLK),
						 .ADDRA(appW4_respF_memory$ADDRA),
						 .ADDRB(appW4_respF_memory$ADDRB),
						 .DIA(appW4_respF_memory$DIA),
						 .DIB(appW4_respF_memory$DIB),
						 .WEA(appW4_respF_memory$WEA),
						 .WEB(appW4_respF_memory$WEB),
						 .ENA(appW4_respF_memory$ENA),
						 .ENB(appW4_respF_memory$ENB),
						 .DOA(),
						 .DOB(appW4_respF_memory$DOB));

  // submodule appW4_wci_isReset
  ResetToBool appW4_wci_isReset(.RST(RST_N_rst_4),
				.VAL(appW4_wci_isReset$VAL));

  // submodule appW4_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW4_wci_reqF(.RST_N(RST_N_rst_4),
					      .CLK(CLK),
					      .D_IN(appW4_wci_reqF$D_IN),
					      .ENQ(appW4_wci_reqF$ENQ),
					      .DEQ(appW4_wci_reqF$DEQ),
					      .CLR(appW4_wci_reqF$CLR),
					      .D_OUT(appW4_wci_reqF$D_OUT),
					      .FULL_N(),
					      .EMPTY_N(appW4_wci_reqF$EMPTY_N));

  // submodule appW4_wmi_isReset
  ResetToBool appW4_wmi_isReset(.RST(RST_N_rst_4),
				.VAL(appW4_wmi_isReset$VAL));

  // submodule appW4_wmi_respF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) appW4_wmi_respF(.RST_N(RST_N_rst_4),
					   .CLK(CLK),
					   .D_IN(appW4_wmi_respF$D_IN),
					   .ENQ(appW4_wmi_respF$ENQ),
					   .DEQ(appW4_wmi_respF$DEQ),
					   .CLR(appW4_wmi_respF$CLR),
					   .D_OUT(appW4_wmi_respF$D_OUT),
					   .FULL_N(appW4_wmi_respF$FULL_N),
					   .EMPTY_N(appW4_wmi_respF$EMPTY_N));

  // submodule appW4_wsiM_isReset
  ResetToBool appW4_wsiM_isReset(.RST(RST_N_rst_4),
				 .VAL(appW4_wsiM_isReset$VAL));

  // submodule appW4_wsiS_isReset
  ResetToBool appW4_wsiS_isReset(.RST(RST_N_rst_4),
				 .VAL(appW4_wsiS_isReset$VAL));

  // submodule appW4_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) appW4_wsiS_reqFifo(.RST_N(RST_N_rst_4),
						  .CLK(CLK),
						  .D_IN(appW4_wsiS_reqFifo$D_IN),
						  .ENQ(appW4_wsiS_reqFifo$ENQ),
						  .DEQ(appW4_wsiS_reqFifo$DEQ),
						  .CLR(appW4_wsiS_reqFifo$CLR),
						  .D_OUT(appW4_wsiS_reqFifo$D_OUT),
						  .FULL_N(appW4_wsiS_reqFifo$FULL_N),
						  .EMPTY_N(appW4_wsiS_reqFifo$EMPTY_N));

  // rule RL_appW2_wsiS_backpressure
  assign CAN_FIRE_RL_appW2_wsiS_backpressure =
	     appW2_wsiS_reqFifo_levelsValid && appW2_wsiS_operateD &&
	     appW2_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_appW2_wsiS_backpressure =
	     CAN_FIRE_RL_appW2_wsiS_backpressure ;

  // rule RL_appW2_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_appW2_wmrd_mesgBodyPreRequest =
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h1 || appW2_smaCtrl[3:0] == 4'h4 ||
	      appW2_smaCtrl[3:0] == 4'h9) &&
	     appW2_fabWordsRemain != 14'd0 &&
	     (appW2_fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     appW2_mesgReqOK ;
  assign WILL_FIRE_RL_appW2_wmrd_mesgBodyPreRequest =
	     CAN_FIRE_RL_appW2_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest ;

  // rule RL_appW2_wmrd_mesgBodyRequest
  assign CAN_FIRE_RL_appW2_wmrd_mesgBodyRequest =
	     NOT_appW2_wmi_reqF_c_r_39_EQ_2_58_59_AND_appW2_ETC___d510 &&
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h1 || appW2_smaCtrl[3:0] == 4'h4 ||
	      appW2_smaCtrl[3:0] == 4'h9) &&
	     appW2_mesgPreRequest ;
  assign WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest =
	     CAN_FIRE_RL_appW2_wmrd_mesgBodyRequest ;

  // rule RL_appW2_wci_request_decode
  assign CAN_FIRE_RL_appW2_wci_request_decode = appW2_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_appW2_wci_request_decode = appW2_wci_reqF$EMPTY_N ;

  // rule RL_appW2_wsiM_ext_status_assign
  assign CAN_FIRE_RL_appW2_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_appW2_wsiS_ext_status_assign
  assign CAN_FIRE_RL_appW2_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_appW2_wci_cfrd
  assign CAN_FIRE_RL_appW2_wci_cfrd =
	     appW2_wci_reqF$EMPTY_N && appW2_wci_respF_c_r != 2'd2 &&
	     appW2_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_appW2_wci_cfrd =
	     CAN_FIRE_RL_appW2_wci_cfrd &&
	     !WILL_FIRE_RL_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW2_wci_ctl_op_complete ;

  // rule RL_appW2_wmrd_mesgBegin
  assign CAN_FIRE_RL_appW2_wmrd_mesgBegin =
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h1 || appW2_smaCtrl[3:0] == 4'h4 ||
	      appW2_smaCtrl[3:0] == 4'h9) &&
	     !appW2_wmi_sThreadBusy_d &&
	     !appW2_wmi_sDataThreadBusy_d &&
	     appW2_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_appW2_wmrd_mesgBegin =
	     CAN_FIRE_RL_appW2_wmrd_mesgBegin ;

  // rule RL_appW4_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_appW4_wmrd_mesgBodyPreRequest =
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h1 || appW4_smaCtrl[3:0] == 4'h4 ||
	      appW4_smaCtrl[3:0] == 4'h9) &&
	     appW4_fabWordsRemain != 14'd0 &&
	     (appW4_fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     appW4_mesgReqOK ;
  assign WILL_FIRE_RL_appW4_wmrd_mesgBodyPreRequest =
	     CAN_FIRE_RL_appW4_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest ;

  // rule RL_appW4_wmrd_mesgBodyRequest
  assign CAN_FIRE_RL_appW4_wmrd_mesgBodyRequest =
	     NOT_appW4_wmi_reqF_c_r_804_EQ_2_822_823_AND_ap_ETC___d2171 &&
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h1 || appW4_smaCtrl[3:0] == 4'h4 ||
	      appW4_smaCtrl[3:0] == 4'h9) &&
	     appW4_mesgPreRequest ;
  assign WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest =
	     CAN_FIRE_RL_appW4_wmrd_mesgBodyRequest ;

  // rule RL_appW4_wci_request_decode
  assign CAN_FIRE_RL_appW4_wci_request_decode = appW4_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_appW4_wci_request_decode = appW4_wci_reqF$EMPTY_N ;

  // rule RL_appW4_wsiM_ext_status_assign
  assign CAN_FIRE_RL_appW4_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_appW4_wsiS_ext_status_assign
  assign CAN_FIRE_RL_appW4_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_appW4_wci_cfrd
  assign CAN_FIRE_RL_appW4_wci_cfrd =
	     appW4_wci_reqF$EMPTY_N && appW4_wci_respF_c_r != 2'd2 &&
	     appW4_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_appW4_wci_cfrd =
	     CAN_FIRE_RL_appW4_wci_cfrd &&
	     !WILL_FIRE_RL_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW4_wci_ctl_op_complete ;

  // rule RL_appW4_wmrd_mesgBegin
  assign CAN_FIRE_RL_appW4_wmrd_mesgBegin =
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h1 || appW4_smaCtrl[3:0] == 4'h4 ||
	      appW4_smaCtrl[3:0] == 4'h9) &&
	     !appW4_wmi_sThreadBusy_d &&
	     !appW4_wmi_sDataThreadBusy_d &&
	     appW4_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_appW4_wmrd_mesgBegin =
	     CAN_FIRE_RL_appW4_wmrd_mesgBegin ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mReqLConnect
  assign CAN_FIRE_RL_mReqLConnect =
	     !appW2_wsiM_sThreadBusy_d && appW2_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_mReqLConnect = CAN_FIRE_RL_mReqLConnect ;

  // rule RL_mBurstPConnect
  assign CAN_FIRE_RL_mBurstPConnect =
	     !appW2_wsiM_sThreadBusy_d && appW2_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_mBurstPConnect = CAN_FIRE_RL_mBurstPConnect ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mBurstLConnect
  assign CAN_FIRE_RL_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect = 1'd1 ;

  // rule RL_mByteEnConnect
  assign CAN_FIRE_RL_mByteEnConnect = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect = 1'd1 ;

  // rule RL_mReqIConnect
  assign CAN_FIRE_RL_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect = 1'd1 ;

  // rule RL_mDataIConnect
  assign CAN_FIRE_RL_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect = 1'd1 ;

  // rule RL_mRstConnect
  assign CAN_FIRE_RL_mRstConnect =
	     !appW2_wsiM_isReset$VAL && appW2_wsiM_operateD ;
  assign WILL_FIRE_RL_mRstConnect = CAN_FIRE_RL_mRstConnect ;

  // rule RL_sRstConnect
  assign CAN_FIRE_RL_sRstConnect =
	     !appW3_wsiS_isReset$VAL && appW3_wsiS_operateD ;
  assign WILL_FIRE_RL_sRstConnect = CAN_FIRE_RL_sRstConnect ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_mReqLConnect_1
  assign CAN_FIRE_RL_mReqLConnect_1 =
	     !appW3_wsiM_sThreadBusy_d && appW3_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_mReqLConnect_1 = CAN_FIRE_RL_mReqLConnect_1 ;

  // rule RL_mBurstLConnect_1
  assign CAN_FIRE_RL_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_1 = 1'd1 ;

  // rule RL_mBurstPConnect_1
  assign CAN_FIRE_RL_mBurstPConnect_1 =
	     !appW3_wsiM_sThreadBusy_d && appW3_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_mBurstPConnect_1 = CAN_FIRE_RL_mBurstPConnect_1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mByteEnConnect_1
  assign CAN_FIRE_RL_mByteEnConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect_1 = 1'd1 ;

  // rule RL_mReqIConnect_1
  assign CAN_FIRE_RL_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_1 = 1'd1 ;

  // rule RL_mDataIConnect_1
  assign CAN_FIRE_RL_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect_1 = 1'd1 ;

  // rule RL_sRstConnect_1
  assign CAN_FIRE_RL_sRstConnect_1 =
	     !appW4_wsiS_isReset$VAL && appW4_wsiS_operateD ;
  assign WILL_FIRE_RL_sRstConnect_1 = CAN_FIRE_RL_sRstConnect_1 ;

  // rule RL_mRstConnect_1
  assign CAN_FIRE_RL_mRstConnect_1 =
	     !appW3_wsiM_isReset$VAL && appW3_wsiM_operateD ;
  assign WILL_FIRE_RL_mRstConnect_1 = CAN_FIRE_RL_mRstConnect_1 ;

  // rule RL_appW2_operating_actions
  assign CAN_FIRE_RL_appW2_operating_actions = appW2_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_appW2_operating_actions =
	     CAN_FIRE_RL_appW2_operating_actions ;

  // rule RL_appW2_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_appW2_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW2_wci_respF_deq
  assign CAN_FIRE_RL_appW2_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wci_respF_deq = 1'd1 ;

  // rule RL_appW2_wci_ctl_op_start
  assign CAN_FIRE_RL_appW2_wci_ctl_op_start =
	     appW2_wci_reqF$EMPTY_N && appW2_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_appW2_wci_ctl_op_start =
	     CAN_FIRE_RL_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW2_wci_ctl_op_complete ;

  // rule RL_appW2_wci_ctrl_EiI
  assign CAN_FIRE_RL_appW2_wci_ctrl_EiI =
	     appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW2_wci_ctl_op_start &&
	     appW2_wci_cState == 3'd0 &&
	     appW2_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_appW2_wci_ctrl_EiI = CAN_FIRE_RL_appW2_wci_ctrl_EiI ;

  // rule RL_appW2_wci_ctrl_OrE
  assign CAN_FIRE_RL_appW2_wci_ctrl_OrE =
	     appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW2_wci_ctl_op_start &&
	     appW2_wci_cState == 3'd2 &&
	     appW2_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_appW2_wci_ctrl_OrE = CAN_FIRE_RL_appW2_wci_ctrl_OrE ;

  // rule RL_appW2_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_appW2_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_appW2_wmi_reqF_deq
  assign CAN_FIRE_RL_appW2_wmi_reqF_deq =
	     appW2_wmi_operateD && appW2_wmi_peerIsReady &&
	     !appW2_wmi_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW2_wmi_reqF_deq = CAN_FIRE_RL_appW2_wmi_reqF_deq ;

  // rule RL_appW2_wmi_dhF_deq
  assign CAN_FIRE_RL_appW2_wmi_dhF_deq =
	     appW2_wmi_operateD && appW2_wmi_peerIsReady &&
	     !appW2_wmi_sDataThreadBusy_d ;
  assign WILL_FIRE_RL_appW2_wmi_dhF_deq = CAN_FIRE_RL_appW2_wmi_dhF_deq ;

  // rule RL_appW2_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_appW2_wsiM_inc_tBusyCount =
	     appW2_wsiM_operateD && appW2_wsiM_peerIsReady &&
	     appW2_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW2_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_appW2_wsiM_inc_tBusyCount ;

  // rule RL_appW2_wsiM_update_statusR
  assign CAN_FIRE_RL_appW2_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiM_update_statusR = 1'd1 ;

  // rule RL_appW2_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_appW2_wsiM_reqFifo_deq =
	     appW2_wsiM_reqFifo_c_r != 2'd0 && !appW2_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW2_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_appW2_wsiM_reqFifo_deq ;

  // rule RL_appW2_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_appW2_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_appW2_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW2_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW2_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_appW2_wsiS_inc_tBusyCount =
	     appW2_wsiS_operateD && appW2_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_appW2_wsiS_backpressure ||
	      appW2_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_appW2_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_appW2_wsiS_inc_tBusyCount ;

  // rule RL_appW2_wsiS_update_statusR
  assign CAN_FIRE_RL_appW2_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiS_update_statusR = 1'd1 ;

  // rule RL_appW2_mesgPreRequest__dreg_update
  assign CAN_FIRE_RL_appW2_mesgPreRequest__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_mesgPreRequest__dreg_update = 1'd1 ;

  // rule RL_appW2_respF_portB_read_data
  assign CAN_FIRE_RL_appW2_respF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_appW2_respF_portB_read_data = 1'd1 ;

  // rule RL_appW2_wmrd_mesgResptoWsi
  assign CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi =
	     appW2_wsiM_reqFifo_c_r != 2'd2 &&
	     appW2_respF_rRdPtr != appW2_respF_rWrPtr &&
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h1 || appW2_smaCtrl[3:0] == 4'h4 ||
	      appW2_smaCtrl[3:0] == 4'h9) ;
  assign WILL_FIRE_RL_appW2_wmrd_mesgResptoWsi =
	     CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi ;

  // rule RL_appW2_fabRespCredit_accumulate
  assign CAN_FIRE_RL_appW2_fabRespCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_appW2_fabRespCredit_accumulate = 1'd1 ;

  // rule RL_appW2_wci_ctrl_IsO
  assign CAN_FIRE_RL_appW2_wci_ctrl_IsO =
	     appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW2_wci_ctl_op_start &&
	     appW2_wci_cState == 3'd1 &&
	     appW2_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_appW2_wci_ctrl_IsO = CAN_FIRE_RL_appW2_wci_ctrl_IsO ;

  // rule RL_appW2_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_appW2_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_appW2_wci_reqF_enq
  assign CAN_FIRE_RL_appW2_wci_reqF_enq =
	     appW2_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_appW2_wci_reqF_enq = CAN_FIRE_RL_appW2_wci_reqF_enq ;

  // rule RL_appW2_wsi_Es_doAlways
  assign CAN_FIRE_RL_appW2_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsi_Es_doAlways = 1'd1 ;

  // rule RL_appW2_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_appW2_wsiS_reqFifo_enq =
	     appW2_wsiS_operateD && appW2_wsiS_peerIsReady &&
	     appW2_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_appW2_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_appW2_wsiS_reqFifo_enq ;

  // rule RL_appW2_wsipass_doMessagePush
  assign CAN_FIRE_RL_appW2_wsipass_doMessagePush =
	     appW2_wsiS_reqFifo$EMPTY_N &&
	     (appW2_smaCtrl[4] || appW2_wsiM_reqFifo_c_r != 2'd2) &&
	     appW2_wci_cState == 3'd2 &&
	     appW2_smaCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_appW2_wsipass_doMessagePush =
	     CAN_FIRE_RL_appW2_wsipass_doMessagePush ;

  // rule RL_appW2_wmwt_messagePushPrecise
  assign CAN_FIRE_RL_appW2_wmwt_messagePushPrecise =
	     appW2_wmi_dhF_c_r != 2'd2 &&
	     appW2_wmi_operateD_25_AND_appW2_wmi_peerIsRead_ETC___d605 &&
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h2 || appW2_smaCtrl[3:0] == 4'h3) &&
	     appW2_wsiWordsRemain != 12'd0 &&
	     appW2_mesgReqValid &&
	     appW2_preciseBurst ;
  assign WILL_FIRE_RL_appW2_wmwt_messagePushPrecise =
	     CAN_FIRE_RL_appW2_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_appW2_wmwt_messageFinalize ;

  // rule RL_appW2_wmwt_requestPrecise
  assign CAN_FIRE_RL_appW2_wmwt_requestPrecise =
	     appW2_wmi_reqF_c_r != 2'd2 && appW2_wmi_mFlagF_c_r != 2'd2 &&
	     appW2_wmi_operateD &&
	     appW2_wmi_peerIsReady &&
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h2 || appW2_smaCtrl[3:0] == 4'h3) &&
	     appW2_readyToRequest &&
	     appW2_preciseBurst ;
  assign WILL_FIRE_RL_appW2_wmwt_requestPrecise =
	     CAN_FIRE_RL_appW2_wmwt_requestPrecise &&
	     !WILL_FIRE_RL_appW2_wmwt_messagePushImprecise ;

  // rule RL_appW2_wmwt_mesgBegin
  assign CAN_FIRE_RL_appW2_wmwt_mesgBegin =
	     appW2_wsiS_reqFifo$EMPTY_N && appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h2 || appW2_smaCtrl[3:0] == 4'h3) &&
	     !appW2_wmi_sThreadBusy_d &&
	     !appW2_wmi_sDataThreadBusy_d &&
	     !appW2_opcode[8] ;
  assign WILL_FIRE_RL_appW2_wmwt_mesgBegin =
	     CAN_FIRE_RL_appW2_wmwt_mesgBegin &&
	     !WILL_FIRE_RL_appW2_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_appW2_wmwt_messageFinalize ;

  // rule RL_appW2_wmwt_messagePushImprecise
  assign CAN_FIRE_RL_appW2_wmwt_messagePushImprecise =
	     appW2_wmi_reqF_c_r != 2'd2 && appW2_wmi_dhF_c_r != 2'd2 &&
	     appW2_wmi_operateD &&
	     appW2_wmi_peerIsReady &&
	     appW2_wsiS_reqFifo_i_notEmpty__57_AND_NOT_appW_ETC___d624 &&
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h2 || appW2_smaCtrl[3:0] == 4'h3) &&
	     appW2_readyToPush &&
	     appW2_impreciseBurst ;
  assign WILL_FIRE_RL_appW2_wmwt_messagePushImprecise =
	     CAN_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_appW2_wmwt_messageFinalize ;

  // rule RL_appW2_wmwt_doAbort
  assign CAN_FIRE_RL_appW2_wmwt_doAbort =
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h2 || appW2_smaCtrl[3:0] == 4'h3) &&
	     appW2_doAbort ;
  assign WILL_FIRE_RL_appW2_wmwt_doAbort = CAN_FIRE_RL_appW2_wmwt_doAbort ;

  // rule RL_appW2_wmwt_messageFinalize
  assign CAN_FIRE_RL_appW2_wmwt_messageFinalize =
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h2 || appW2_smaCtrl[3:0] == 4'h3) &&
	     appW2_mesgLength[14] &&
	     !appW2_doAbort &&
	     (appW2_preciseBurst && appW2_wsiWordsRemain == 12'd0 ||
	      appW2_impreciseBurst && appW2_endOfMessage) ;
  assign WILL_FIRE_RL_appW2_wmwt_messageFinalize =
	     CAN_FIRE_RL_appW2_wmwt_messageFinalize ;

  // rule RL_appW2_wmi_reqF_incCtr
  assign CAN_FIRE_RL_appW2_wmi_reqF_incCtr =
	     ((appW2_wmi_reqF_c_r == 2'd0) ?
		appW2_wmi_reqF_x_wire$whas :
		appW2_wmi_reqF_c_r != 2'd1 || appW2_wmi_reqF_x_wire$whas) &&
	     appW2_wmi_reqF_enqueueing$whas &&
	     !appW2_wmi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW2_wmi_reqF_incCtr =
	     CAN_FIRE_RL_appW2_wmi_reqF_incCtr ;

  // rule RL_appW2_wmi_reqF_decCtr
  assign CAN_FIRE_RL_appW2_wmi_reqF_decCtr =
	     appW2_wmi_reqF_dequeueing$whas &&
	     !appW2_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wmi_reqF_decCtr =
	     CAN_FIRE_RL_appW2_wmi_reqF_decCtr ;

  // rule RL_appW2_wmi_reqF_both
  assign CAN_FIRE_RL_appW2_wmi_reqF_both =
	     ((appW2_wmi_reqF_c_r == 2'd1) ?
		appW2_wmi_reqF_x_wire$whas :
		appW2_wmi_reqF_c_r != 2'd2 || appW2_wmi_reqF_x_wire$whas) &&
	     appW2_wmi_reqF_dequeueing$whas &&
	     appW2_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wmi_reqF_both = CAN_FIRE_RL_appW2_wmi_reqF_both ;

  // rule RL_appW2_wmi_mFlagF_incCtr
  assign CAN_FIRE_RL_appW2_wmi_mFlagF_incCtr =
	     ((appW2_wmi_mFlagF_c_r == 2'd0) ?
		appW2_wmi_mFlagF_enqueueing$whas :
		appW2_wmi_mFlagF_c_r != 2'd1 ||
		appW2_wmi_mFlagF_enqueueing$whas) &&
	     appW2_wmi_mFlagF_enqueueing$whas &&
	     !appW2_wmi_mFlagF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr =
	     CAN_FIRE_RL_appW2_wmi_mFlagF_incCtr ;

  // rule RL_appW2_wmi_mFlagF_decCtr
  assign CAN_FIRE_RL_appW2_wmi_mFlagF_decCtr =
	     appW2_wmi_mFlagF_dequeueing$whas &&
	     !appW2_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr =
	     CAN_FIRE_RL_appW2_wmi_mFlagF_decCtr ;

  // rule RL_appW2_wmi_mFlagF_both
  assign CAN_FIRE_RL_appW2_wmi_mFlagF_both =
	     ((appW2_wmi_mFlagF_c_r == 2'd1) ?
		appW2_wmi_mFlagF_enqueueing$whas :
		appW2_wmi_mFlagF_c_r != 2'd2 ||
		appW2_wmi_mFlagF_enqueueing$whas) &&
	     appW2_wmi_mFlagF_dequeueing$whas &&
	     appW2_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wmi_mFlagF_both =
	     CAN_FIRE_RL_appW2_wmi_mFlagF_both ;

  // rule RL_appW2_wmi_dhF_incCtr
  assign CAN_FIRE_RL_appW2_wmi_dhF_incCtr =
	     ((appW2_wmi_dhF_c_r == 2'd0) ?
		MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		appW2_wmi_dhF_c_r != 2'd1 ||
		MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     !appW2_wmi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW2_wmi_dhF_incCtr =
	     CAN_FIRE_RL_appW2_wmi_dhF_incCtr ;

  // rule RL_appW2_wmi_dhF_decCtr
  assign CAN_FIRE_RL_appW2_wmi_dhF_decCtr =
	     appW2_wmi_dhF_dequeueing$whas &&
	     !MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_appW2_wmi_dhF_decCtr =
	     CAN_FIRE_RL_appW2_wmi_dhF_decCtr ;

  // rule RL_appW2_wmi_dhF_both
  assign CAN_FIRE_RL_appW2_wmi_dhF_both =
	     ((appW2_wmi_dhF_c_r == 2'd1) ?
		MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		appW2_wmi_dhF_c_r != 2'd2 ||
		MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     appW2_wmi_dhF_dequeueing$whas &&
	     MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_appW2_wmi_dhF_both = CAN_FIRE_RL_appW2_wmi_dhF_both ;

  // rule RL_appW2_wmi_sThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_appW2_wmi_sThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wmi_sThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_appW2_wmi_sDataThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_appW2_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_appW2_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_appW2_wsiM_reqFifo_incCtr =
	     ((appW2_wsiM_reqFifo_c_r == 2'd0) ?
		appW2_wsiM_reqFifo_enqueueing$whas :
		appW2_wsiM_reqFifo_c_r != 2'd1 ||
		appW2_wsiM_reqFifo_enqueueing$whas) &&
	     appW2_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_appW2_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_appW2_wsiM_reqFifo_incCtr ;

  // rule RL_appW2_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_appW2_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW2_wsiM_reqFifo_deq &&
	     !appW2_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW2_wsiM_reqFifo_decCtr ;

  // rule RL_appW2_wsiM_reqFifo_both
  assign CAN_FIRE_RL_appW2_wsiM_reqFifo_both =
	     ((appW2_wsiM_reqFifo_c_r == 2'd1) ?
		appW2_wsiM_reqFifo_enqueueing$whas :
		appW2_wsiM_reqFifo_c_r != 2'd2 ||
		appW2_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_appW2_wsiM_reqFifo_deq &&
	     appW2_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wsiM_reqFifo_both =
	     CAN_FIRE_RL_appW2_wsiM_reqFifo_both ;

  // rule RL_appW2_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_appW2_wsiS_reqFifo__updateLevelCounter =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 !=
	     appW2_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_appW2_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_appW2_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_appW2_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_appW2_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_appW2_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_appW2_wsiS_reqFifo_reset =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 ||
	     appW2_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_appW2_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_appW2_wsiS_reqFifo_reset ;

  // rule RL_appW2_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW2_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW2_wmi_Em_doAlways
  assign CAN_FIRE_RL_appW2_wmi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wmi_Em_doAlways = 1'd1 ;

  // rule RL_appW2_wmi_respAdvance
  assign CAN_FIRE_RL_appW2_wmi_respAdvance =
	     appW2_wmi_operateD && appW2_wmi_peerIsReady &&
	     appW2_wmi_wmiResponse$wget[33:32] != 2'd0 ;
  assign WILL_FIRE_RL_appW2_wmi_respAdvance =
	     CAN_FIRE_RL_appW2_wmi_respAdvance ;

  // rule RL_appW2_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_appW2_wmrd_mesgBodyResponse =
	     appW2_wmi_respF_i_notEmpty__22_AND_appW2_smaCt_ETC___d527 &&
	     appW2_wci_cState == 3'd2 &&
	     (appW2_smaCtrl[3:0] == 4'h1 || appW2_smaCtrl[3:0] == 4'h4 ||
	      appW2_smaCtrl[3:0] == 4'h9) &&
	     appW2_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_appW2_wmrd_mesgBodyResponse ;

  // rule RL_appW2_wci_cfwr
  assign CAN_FIRE_RL_appW2_wci_cfwr =
	     appW2_wci_reqF$EMPTY_N && appW2_wci_respF_c_r != 2'd2 &&
	     appW2_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_appW2_wci_cfwr =
	     CAN_FIRE_RL_appW2_wci_cfwr &&
	     !WILL_FIRE_RL_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW2_wci_ctl_op_complete ;

  // rule RL_appW2_wci_ctl_op_complete
  assign CAN_FIRE_RL_appW2_wci_ctl_op_complete =
	     appW2_wci_respF_c_r != 2'd2 && appW2_wci_ctlOpActive &&
	     appW2_wci_ctlAckReg ;
  assign WILL_FIRE_RL_appW2_wci_ctl_op_complete =
	     CAN_FIRE_RL_appW2_wci_ctl_op_complete ;

  // rule RL_appW2_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_appW2_wci_reqF__updateLevelCounter =
	     (appW2_wci_wciReq$wget[59:57] != 3'd0) !=
	     appW2_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_appW2_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_appW2_wci_reqF__updateLevelCounter ;

  // rule RL_appW2_wci_respF_incCtr
  assign CAN_FIRE_RL_appW2_wci_respF_incCtr =
	     ((appW2_wci_respF_c_r == 2'd0) ?
		appW2_wci_respF_x_wire$whas :
		appW2_wci_respF_c_r != 2'd1 || appW2_wci_respF_x_wire$whas) &&
	     appW2_wci_respF_enqueueing$whas &&
	     !(appW2_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_appW2_wci_respF_incCtr =
	     CAN_FIRE_RL_appW2_wci_respF_incCtr ;

  // rule RL_appW2_wci_respF_decCtr
  assign CAN_FIRE_RL_appW2_wci_respF_decCtr =
	     appW2_wci_respF_c_r != 2'd0 && !appW2_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wci_respF_decCtr =
	     CAN_FIRE_RL_appW2_wci_respF_decCtr ;

  // rule RL_appW2_wci_respF_both
  assign CAN_FIRE_RL_appW2_wci_respF_both =
	     ((appW2_wci_respF_c_r == 2'd1) ?
		appW2_wci_respF_x_wire$whas :
		appW2_wci_respF_c_r != 2'd2 || appW2_wci_respF_x_wire$whas) &&
	     appW2_wci_respF_c_r != 2'd0 &&
	     appW2_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW2_wci_respF_both =
	     CAN_FIRE_RL_appW2_wci_respF_both ;

  // rule RL_appW2_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_appW2_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_appW2_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_appW2_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_appW2_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW2_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW2_respF_portA
  assign CAN_FIRE_RL_appW2_respF_portA = 1'd1 ;
  assign WILL_FIRE_RL_appW2_respF_portA = 1'd1 ;

  // rule RL_appW2_respF_portB
  assign CAN_FIRE_RL_appW2_respF_portB = 1'd1 ;
  assign WILL_FIRE_RL_appW2_respF_portB = 1'd1 ;

  // rule RL_appW3_rdSer_sync
  assign CAN_FIRE_RL_appW3_rdSer_sync =
	     appW3_wci_cState == 3'd2 && appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_rdSyncWord ;
  assign WILL_FIRE_RL_appW3_rdSer_sync = CAN_FIRE_RL_appW3_rdSer_sync ;

  // rule RL_appW3_wci_request_decode
  assign CAN_FIRE_RL_appW3_wci_request_decode = appW3_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_appW3_wci_request_decode = appW3_wci_reqF$EMPTY_N ;

  // rule RL_appW3_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_appW3_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW3_wci_respF_deq
  assign CAN_FIRE_RL_appW3_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_respF_deq = 1'd1 ;

  // rule RL_appW3_wci_ctl_op_start
  assign CAN_FIRE_RL_appW3_wci_ctl_op_start =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_appW3_wci_ctl_op_start =
	     CAN_FIRE_RL_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wci_ctrl_EiI
  assign CAN_FIRE_RL_appW3_wci_ctrl_EiI =
	     appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     appW3_wci_cState == 3'd0 &&
	     appW3_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_appW3_wci_ctrl_EiI = CAN_FIRE_RL_appW3_wci_ctrl_EiI ;

  // rule RL_appW3_wci_ctrl_OrE
  assign CAN_FIRE_RL_appW3_wci_ctrl_OrE =
	     appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_appW3_wci_ctrl_OrE = CAN_FIRE_RL_appW3_wci_ctrl_OrE ;

  // rule RL_appW3_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_appW3_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiS_backpressure
  assign CAN_FIRE_RL_appW3_wsiS_backpressure =
	     appW3_wsiS_reqFifo_levelsValid && appW3_wsiS_operateD &&
	     appW3_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_appW3_wsiS_backpressure =
	     CAN_FIRE_RL_appW3_wsiS_backpressure ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect =
	     !CAN_FIRE_RL_appW3_wsiS_backpressure ||
	     appW3_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect = CAN_FIRE_RL_stbConnect ;

  // rule RL_appW2_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_appW2_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW2_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW3_wsiS_ext_status_assign
  assign CAN_FIRE_RL_appW3_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_appW3_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount =
	     appW3_wsiS_operateD && appW3_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_appW3_wsiS_backpressure ||
	      appW3_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_appW3_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount ;

  // rule RL_appW3_wsiS_update_statusR
  assign CAN_FIRE_RL_appW3_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_update_statusR = 1'd1 ;

  // rule RL_appW3_wsiM_ext_status_assign
  assign CAN_FIRE_RL_appW3_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_appW3_wci_cfrd
  assign CAN_FIRE_RL_appW3_wci_cfrd =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_respF_c_r != 2'd2 &&
	     appW3_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_appW3_wci_cfrd =
	     CAN_FIRE_RL_appW3_wci_cfrd &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wrtSer_begin
  assign CAN_FIRE_RL_appW3_wrtSer_begin =
	     appW3_metaWF$EMPTY_N &&
	     NOT_appW3_wrtSerPos_262_EQ_3_263_264_AND_NOT_a_ETC___d1278 &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_wrtSerUnroll == 16'd0 ;
  assign WILL_FIRE_RL_appW3_wrtSer_begin = CAN_FIRE_RL_appW3_wrtSer_begin ;

  // rule RL_appW3_delay_write_req
  assign CAN_FIRE_RL_appW3_delay_write_req =
	     appW3_wmemi_reqF_c_r != 2'd2 && appW3_wmemi_dhF_c_r != 2'd2 &&
	     appW3_wmemi_operateD &&
	     appW3_wmemi_peerIsReady &&
	     appW3_wide16Fa$EMPTY_N &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_dlyWordsStored_value_189_SLE_0_336_OR_ap_ETC___d1344 &&
	     appW3_dlyWordsStored_value_189_SLT_8388608___d1346 ;
  assign WILL_FIRE_RL_appW3_delay_write_req =
	     CAN_FIRE_RL_appW3_delay_write_req ;

  // rule RL_appW3_operating_actions
  assign CAN_FIRE_RL_appW3_operating_actions = appW3_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_appW3_operating_actions =
	     CAN_FIRE_RL_appW3_operating_actions ;

  // rule RL_appW3_delay_read_req
  assign CAN_FIRE_RL_appW3_delay_read_req =
	     appW3_wmemi_reqF_c_r != 2'd2 && appW3_wmemi_operateD &&
	     appW3_wmemi_peerIsReady &&
	     appW3_wci_cState_47_EQ_2_58_AND_appW3_dlyCtrl__ETC___d1364 &&
	     (appW3_dlyReadCredit_value ^ 8'h80) > 8'd128 &&
	     appW3_wsiM_reqFifo_c_r != 2'd2 ;
  assign WILL_FIRE_RL_appW3_delay_read_req =
	     CAN_FIRE_RL_appW3_delay_read_req &&
	     !WILL_FIRE_RL_appW3_delay_write_req ;

  // rule RL_appW3_cycles_passed_count
  assign CAN_FIRE_RL_appW3_cycles_passed_count = appW3_wsiS_statusR[0] ;
  assign WILL_FIRE_RL_appW3_cycles_passed_count =
	     CAN_FIRE_RL_appW3_cycles_passed_count ;

  // rule RL_appW3_delay_Fb2Fc
  assign CAN_FIRE_RL_appW3_delay_Fb2Fc =
	     appW3_wide16Fc$FULL_N && appW3_wide16Fb$EMPTY_N &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_appW3_delay_Fb2Fc = CAN_FIRE_RL_appW3_delay_Fb2Fc ;

  // rule RL_appW3_rdSer_begin
  assign CAN_FIRE_RL_appW3_rdSer_begin =
	     appW3_metaRF_i_notFull__392_AND_NOT_appW3_rdSe_ETC___d1403 &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_rdSerUnroll == 16'd0 &&
	     !appW3_rdSyncWord ;
  assign WILL_FIRE_RL_appW3_rdSer_begin = CAN_FIRE_RL_appW3_rdSer_begin ;

  // rule RL_appW3_rdSer_body
  assign CAN_FIRE_RL_appW3_rdSer_body =
	     appW3_mesgRF_i_notFull__443_AND_NOT_appW3_rdSe_ETC___d1444 &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_rdSerUnroll != 16'd0 &&
	     !appW3_rdSyncWord ;
  assign WILL_FIRE_RL_appW3_rdSer_body = CAN_FIRE_RL_appW3_rdSer_body ;

  // rule RL_appW3_wmrd_mesgBegin
  assign CAN_FIRE_RL_appW3_wmrd_mesgBegin =
	     appW3_metaRF$EMPTY_N && appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_appW3_wmrd_mesgBegin =
	     CAN_FIRE_RL_appW3_wmrd_mesgBegin ;

  // rule RL_appW3_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_appW3_wmrd_mesgBodyResponse =
	     appW3_wsiM_reqFifo_c_r != 2'd2 && appW3_mesgRF$EMPTY_N &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_appW3_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_appW3_wmrd_mesgBodyResponse ;

  // rule RL_appW3_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount =
	     appW3_wsiM_operateD && appW3_wsiM_peerIsReady &&
	     appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW3_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount ;

  // rule RL_appW3_wsiM_update_statusR
  assign CAN_FIRE_RL_appW3_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_update_statusR = 1'd1 ;

  // rule RL_appW3_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_deq =
	     appW3_wsiM_reqFifo_c_r != 2'd0 && !appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq ;

  // rule RL_appW3_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_appW3_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW3_wmemi_dhF_deq
  assign CAN_FIRE_RL_appW3_wmemi_dhF_deq = wmemiM_SDataAccept ;
  assign WILL_FIRE_RL_appW3_wmemi_dhF_deq = wmemiM_SDataAccept ;

  // rule RL_appW3_wmemi_update_statusR
  assign CAN_FIRE_RL_appW3_wmemi_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wmemi_update_statusR = 1'd1 ;

  // rule RL_appW3_wmemi_reqF_deq
  assign CAN_FIRE_RL_appW3_wmemi_reqF_deq = wmemiM_SCmdAccept ;
  assign WILL_FIRE_RL_appW3_wmemi_reqF_deq = wmemiM_SCmdAccept ;

  // rule RL_appW3_wmemi_reqF_incCtr
  assign CAN_FIRE_RL_appW3_wmemi_reqF_incCtr =
	     ((appW3_wmemi_reqF_c_r == 2'd0) ?
		appW3_wmemi_reqF_x_wire$whas :
		appW3_wmemi_reqF_c_r != 2'd1 ||
		appW3_wmemi_reqF_x_wire$whas) &&
	     appW3_wmemi_reqF_enqueueing$whas &&
	     !appW3_wmemi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW3_wmemi_reqF_incCtr =
	     CAN_FIRE_RL_appW3_wmemi_reqF_incCtr ;

  // rule RL_appW3_wmemi_reqF_decCtr
  assign CAN_FIRE_RL_appW3_wmemi_reqF_decCtr =
	     appW3_wmemi_reqF_dequeueing$whas &&
	     !appW3_wmemi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wmemi_reqF_decCtr =
	     CAN_FIRE_RL_appW3_wmemi_reqF_decCtr ;

  // rule RL_appW3_wmemi_reqF_both
  assign CAN_FIRE_RL_appW3_wmemi_reqF_both =
	     ((appW3_wmemi_reqF_c_r == 2'd1) ?
		appW3_wmemi_reqF_x_wire$whas :
		appW3_wmemi_reqF_c_r != 2'd2 ||
		appW3_wmemi_reqF_x_wire$whas) &&
	     appW3_wmemi_reqF_dequeueing$whas &&
	     appW3_wmemi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wmemi_reqF_both =
	     CAN_FIRE_RL_appW3_wmemi_reqF_both ;

  // rule RL_appW3_wmemi_dhF_incCtr
  assign CAN_FIRE_RL_appW3_wmemi_dhF_incCtr =
	     ((appW3_wmemi_dhF_c_r == 2'd0) ?
		CAN_FIRE_RL_appW3_delay_write_req :
		appW3_wmemi_dhF_c_r != 2'd1 ||
		CAN_FIRE_RL_appW3_delay_write_req) &&
	     CAN_FIRE_RL_appW3_delay_write_req &&
	     !appW3_wmemi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW3_wmemi_dhF_incCtr =
	     CAN_FIRE_RL_appW3_wmemi_dhF_incCtr ;

  // rule RL_appW3_wmemi_dhF_decCtr
  assign CAN_FIRE_RL_appW3_wmemi_dhF_decCtr =
	     appW3_wmemi_dhF_dequeueing$whas &&
	     !CAN_FIRE_RL_appW3_delay_write_req ;
  assign WILL_FIRE_RL_appW3_wmemi_dhF_decCtr =
	     CAN_FIRE_RL_appW3_wmemi_dhF_decCtr ;

  // rule RL_appW3_wmemi_dhF_both
  assign CAN_FIRE_RL_appW3_wmemi_dhF_both =
	     ((appW3_wmemi_dhF_c_r == 2'd1) ?
		CAN_FIRE_RL_appW3_delay_write_req :
		appW3_wmemi_dhF_c_r != 2'd2 ||
		CAN_FIRE_RL_appW3_delay_write_req) &&
	     appW3_wmemi_dhF_dequeueing$whas &&
	     CAN_FIRE_RL_appW3_delay_write_req ;
  assign WILL_FIRE_RL_appW3_wmemi_dhF_both =
	     CAN_FIRE_RL_appW3_wmemi_dhF_both ;

  // rule RL_appW3_mesgWF_portB_read_data
  assign CAN_FIRE_RL_appW3_mesgWF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_appW3_mesgWF_portB_read_data = 1'd1 ;

  // rule RL_appW3_wrtSer_body
  assign CAN_FIRE_RL_appW3_wrtSer_body =
	     NOT_appW3_mesgWF_rRdPtr_176_EQ_appW3_mesgWF_rW_ETC___d1304 &&
	     IF_appW3_wrtSerPos_262_EQ_0_270_OR_appW3_wrtSe_ETC___d1315 &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 &&
	     appW3_wrtSerUnroll != 16'd0 ;
  assign WILL_FIRE_RL_appW3_wrtSer_body = CAN_FIRE_RL_appW3_wrtSer_body ;

  // rule RL_appW3_dlyWordsStored_accumulate
  assign CAN_FIRE_RL_appW3_dlyWordsStored_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_appW3_dlyWordsStored_accumulate = 1'd1 ;

  // rule RL_appW3_dlyReadCredit_accumulate
  assign CAN_FIRE_RL_appW3_dlyReadCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_appW3_dlyReadCredit_accumulate = 1'd1 ;

  // rule RL_appW3_dlyReadyToWrite_accumulate
  assign CAN_FIRE_RL_appW3_dlyReadyToWrite_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_appW3_dlyReadyToWrite_accumulate = 1'd1 ;

  // rule RL_appW3_wci_ctrl_IsO
  assign CAN_FIRE_RL_appW3_wci_ctrl_IsO =
	     appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     appW3_wci_cState == 3'd1 &&
	     appW3_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_appW3_wci_ctrl_IsO = CAN_FIRE_RL_appW3_wci_ctrl_IsO ;

  // rule RL_appW3_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_appW3_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_appW3_wci_reqF_enq
  assign CAN_FIRE_RL_appW3_wci_reqF_enq =
	     appW3_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_appW3_wci_reqF_enq = CAN_FIRE_RL_appW3_wci_reqF_enq ;

  // rule RL_appW3_wsi_Es_doAlways
  assign CAN_FIRE_RL_appW3_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsi_Es_doAlways = 1'd1 ;

  // rule RL_appW3_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_appW3_wsiS_reqFifo_enq =
	     appW3_wsiS_operateD && appW3_wsiS_peerIsReady &&
	     appW3_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo_enq ;

  // rule RL_appW3_wsipass_doMessagePush
  assign CAN_FIRE_RL_appW3_wsipass_doMessagePush =
	     appW3_wsiM_reqFifo_c_r != 2'd2 && appW3_wsiS_reqFifo$EMPTY_N &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_appW3_wsipass_doMessagePush =
	     CAN_FIRE_RL_appW3_wsipass_doMessagePush ;

  // rule RL_appW3_wmwt_mesg_ingress
  assign CAN_FIRE_RL_appW3_wmwt_mesg_ingress =
	     NOT_appW3_mesgWF_rRdPtr_176_PLUS_2048_232_EQ_a_ETC___d1234 &&
	     appW3_wsiS_reqFifo$EMPTY_N &&
	     (!appW3_wsiS_reqFifo$D_OUT[57] || appW3_metaWF$FULL_N) &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_appW3_wmwt_mesg_ingress =
	     CAN_FIRE_RL_appW3_wmwt_mesg_ingress ;

  // rule RL_appW3_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 !=
	     appW3_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_appW3_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_appW3_wsiS_reqFifo_reset =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ||
	     appW3_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_appW3_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo_reset ;

  // rule RL_appW3_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_appW3_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW3_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_incCtr =
	     ((appW3_wsiM_reqFifo_c_r == 2'd0) ?
		appW3_wsiM_reqFifo_enqueueing$whas :
		appW3_wsiM_reqFifo_c_r != 2'd1 ||
		appW3_wsiM_reqFifo_enqueueing$whas) &&
	     appW3_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_appW3_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_incCtr ;

  // rule RL_appW3_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     !appW3_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // rule RL_appW3_wsiM_reqFifo_both
  assign CAN_FIRE_RL_appW3_wsiM_reqFifo_both =
	     ((appW3_wsiM_reqFifo_c_r == 2'd1) ?
		appW3_wsiM_reqFifo_enqueueing$whas :
		appW3_wsiM_reqFifo_c_r != 2'd2 ||
		appW3_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wsiM_reqFifo_both =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_both ;

  // rule RL_appW4_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_appW4_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW3_mesgWF_portA
  assign CAN_FIRE_RL_appW3_mesgWF_portA = 1'd1 ;
  assign WILL_FIRE_RL_appW3_mesgWF_portA = 1'd1 ;

  // rule RL_appW3_mesgWF_portB
  assign CAN_FIRE_RL_appW3_mesgWF_portB = 1'd1 ;
  assign WILL_FIRE_RL_appW3_mesgWF_portB = 1'd1 ;

  // rule RL_appW3_wmemi_Em_doAlways
  assign CAN_FIRE_RL_appW3_wmemi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wmemi_Em_doAlways = 1'd1 ;

  // rule RL_appW3_wmemi_respAdvance
  assign CAN_FIRE_RL_appW3_wmemi_respAdvance =
	     appW3_wmemi_operateD && appW3_wmemi_peerIsReady &&
	     appW3_wmemi_wmemiResponse$wget[130:129] != 2'd0 ;
  assign WILL_FIRE_RL_appW3_wmemi_respAdvance =
	     CAN_FIRE_RL_appW3_wmemi_respAdvance ;

  // rule RL_appW3_delay_read_resp
  assign CAN_FIRE_RL_appW3_delay_read_resp =
	     appW3_wmemi_respF$EMPTY_N && appW3_wide16Fb$FULL_N &&
	     appW3_wci_cState == 3'd2 &&
	     appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_appW3_delay_read_resp =
	     CAN_FIRE_RL_appW3_delay_read_resp ;

  // rule RL_appW3_wci_cfwr
  assign CAN_FIRE_RL_appW3_wci_cfwr =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_respF_c_r != 2'd2 &&
	     appW3_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_appW3_wci_cfwr =
	     CAN_FIRE_RL_appW3_wci_cfwr &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wci_ctl_op_complete
  assign CAN_FIRE_RL_appW3_wci_ctl_op_complete =
	     appW3_wci_respF_c_r != 2'd2 && appW3_wci_ctlOpActive &&
	     appW3_wci_ctlAckReg ;
  assign WILL_FIRE_RL_appW3_wci_ctl_op_complete =
	     CAN_FIRE_RL_appW3_wci_ctl_op_complete ;

  // rule RL_appW3_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter =
	     (appW3_wci_wciReq$wget[59:57] != 3'd0) !=
	     appW3_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_appW3_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter ;

  // rule RL_appW3_wci_respF_incCtr
  assign CAN_FIRE_RL_appW3_wci_respF_incCtr =
	     ((appW3_wci_respF_c_r == 2'd0) ?
		appW3_wci_respF_x_wire$whas :
		appW3_wci_respF_c_r != 2'd1 || appW3_wci_respF_x_wire$whas) &&
	     appW3_wci_respF_enqueueing$whas &&
	     !(appW3_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_appW3_wci_respF_incCtr =
	     CAN_FIRE_RL_appW3_wci_respF_incCtr ;

  // rule RL_appW3_wci_respF_decCtr
  assign CAN_FIRE_RL_appW3_wci_respF_decCtr =
	     appW3_wci_respF_c_r != 2'd0 && !appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wci_respF_decCtr =
	     CAN_FIRE_RL_appW3_wci_respF_decCtr ;

  // rule RL_appW3_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_appW3_wci_respF_both
  assign CAN_FIRE_RL_appW3_wci_respF_both =
	     ((appW3_wci_respF_c_r == 2'd1) ?
		appW3_wci_respF_x_wire$whas :
		appW3_wci_respF_c_r != 2'd2 || appW3_wci_respF_x_wire$whas) &&
	     appW3_wci_respF_c_r != 2'd0 &&
	     appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW3_wci_respF_both =
	     CAN_FIRE_RL_appW3_wci_respF_both ;

  // rule RL_appW3_wmemi_operateD__dreg_update
  assign CAN_FIRE_RL_appW3_wmemi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wmemi_operateD__dreg_update = 1'd1 ;

  // rule RL_appW3_wmemi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW3_wmemi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wmemi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW4_operating_actions
  assign CAN_FIRE_RL_appW4_operating_actions = appW4_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_appW4_operating_actions =
	     CAN_FIRE_RL_appW4_operating_actions ;

  // rule RL_appW4_wci_respF_deq
  assign CAN_FIRE_RL_appW4_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wci_respF_deq = 1'd1 ;

  // rule RL_appW4_wci_ctl_op_start
  assign CAN_FIRE_RL_appW4_wci_ctl_op_start =
	     appW4_wci_reqF$EMPTY_N && appW4_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_appW4_wci_ctl_op_start =
	     CAN_FIRE_RL_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW4_wci_ctl_op_complete ;

  // rule RL_appW4_wci_ctrl_EiI
  assign CAN_FIRE_RL_appW4_wci_ctrl_EiI =
	     appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW4_wci_ctl_op_start &&
	     appW4_wci_cState == 3'd0 &&
	     appW4_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_appW4_wci_ctrl_EiI = CAN_FIRE_RL_appW4_wci_ctrl_EiI ;

  // rule RL_appW4_wci_ctrl_OrE
  assign CAN_FIRE_RL_appW4_wci_ctrl_OrE =
	     appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW4_wci_ctl_op_start &&
	     appW4_wci_cState == 3'd2 &&
	     appW4_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_appW4_wci_ctrl_OrE = CAN_FIRE_RL_appW4_wci_ctrl_OrE ;

  // rule RL_appW4_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_appW4_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_appW4_wmi_reqF_deq
  assign CAN_FIRE_RL_appW4_wmi_reqF_deq =
	     appW4_wmi_operateD && appW4_wmi_peerIsReady &&
	     !appW4_wmi_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW4_wmi_reqF_deq = CAN_FIRE_RL_appW4_wmi_reqF_deq ;

  // rule RL_appW4_wmi_dhF_deq
  assign CAN_FIRE_RL_appW4_wmi_dhF_deq =
	     appW4_wmi_operateD && appW4_wmi_peerIsReady &&
	     !appW4_wmi_sDataThreadBusy_d ;
  assign WILL_FIRE_RL_appW4_wmi_dhF_deq = CAN_FIRE_RL_appW4_wmi_dhF_deq ;

  // rule RL_appW4_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_appW4_wsiM_inc_tBusyCount =
	     appW4_wsiM_operateD && appW4_wsiM_peerIsReady &&
	     appW4_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW4_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_appW4_wsiM_inc_tBusyCount ;

  // rule RL_appW4_wsiM_update_statusR
  assign CAN_FIRE_RL_appW4_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiM_update_statusR = 1'd1 ;

  // rule RL_appW4_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_appW4_wsiM_reqFifo_deq =
	     appW4_wsiM_reqFifo_c_r != 2'd0 && !appW4_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_appW4_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_appW4_wsiM_reqFifo_deq ;

  // rule RL_appW4_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_appW4_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW4_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_appW4_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_appW4_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW4_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW4_wsiS_backpressure
  assign CAN_FIRE_RL_appW4_wsiS_backpressure =
	     appW4_wsiS_reqFifo_levelsValid && appW4_wsiS_operateD &&
	     appW4_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_appW4_wsiS_backpressure =
	     CAN_FIRE_RL_appW4_wsiS_backpressure ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 =
	     !CAN_FIRE_RL_appW4_wsiS_backpressure ||
	     appW4_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect_1 = CAN_FIRE_RL_stbConnect_1 ;

  // rule RL_appW3_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_appW3_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_appW3_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_appW4_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_appW4_wsiS_inc_tBusyCount =
	     appW4_wsiS_operateD && appW4_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_appW4_wsiS_backpressure ||
	      appW4_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_appW4_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_appW4_wsiS_inc_tBusyCount ;

  // rule RL_appW4_wsiS_update_statusR
  assign CAN_FIRE_RL_appW4_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiS_update_statusR = 1'd1 ;

  // rule RL_appW4_mesgPreRequest__dreg_update
  assign CAN_FIRE_RL_appW4_mesgPreRequest__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_mesgPreRequest__dreg_update = 1'd1 ;

  // rule RL_appW4_respF_portB_read_data
  assign CAN_FIRE_RL_appW4_respF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_appW4_respF_portB_read_data = 1'd1 ;

  // rule RL_appW4_wmrd_mesgResptoWsi
  assign CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi =
	     appW4_wsiM_reqFifo_c_r != 2'd2 &&
	     appW4_respF_rRdPtr != appW4_respF_rWrPtr &&
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h1 || appW4_smaCtrl[3:0] == 4'h4 ||
	      appW4_smaCtrl[3:0] == 4'h9) ;
  assign WILL_FIRE_RL_appW4_wmrd_mesgResptoWsi =
	     CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi ;

  // rule RL_appW4_fabRespCredit_accumulate
  assign CAN_FIRE_RL_appW4_fabRespCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_appW4_fabRespCredit_accumulate = 1'd1 ;

  // rule RL_appW4_wci_ctrl_IsO
  assign CAN_FIRE_RL_appW4_wci_ctrl_IsO =
	     appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_appW4_wci_ctl_op_start &&
	     appW4_wci_cState == 3'd1 &&
	     appW4_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_appW4_wci_ctrl_IsO = CAN_FIRE_RL_appW4_wci_ctrl_IsO ;

  // rule RL_appW4_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_appW4_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_appW4_wci_reqF_enq
  assign CAN_FIRE_RL_appW4_wci_reqF_enq =
	     appW4_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_appW4_wci_reqF_enq = CAN_FIRE_RL_appW4_wci_reqF_enq ;

  // rule RL_appW4_wsi_Es_doAlways
  assign CAN_FIRE_RL_appW4_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsi_Es_doAlways = 1'd1 ;

  // rule RL_appW4_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_appW4_wsiS_reqFifo_enq =
	     appW4_wsiS_operateD && appW4_wsiS_peerIsReady &&
	     appW4_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_appW4_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_appW4_wsiS_reqFifo_enq ;

  // rule RL_appW4_wsipass_doMessagePush
  assign CAN_FIRE_RL_appW4_wsipass_doMessagePush =
	     appW4_wsiS_reqFifo$EMPTY_N &&
	     (appW4_smaCtrl[4] || appW4_wsiM_reqFifo_c_r != 2'd2) &&
	     appW4_wci_cState == 3'd2 &&
	     appW4_smaCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_appW4_wsipass_doMessagePush =
	     CAN_FIRE_RL_appW4_wsipass_doMessagePush ;

  // rule RL_appW4_wmwt_messagePushPrecise
  assign CAN_FIRE_RL_appW4_wmwt_messagePushPrecise =
	     appW4_wmi_dhF_c_r != 2'd2 &&
	     appW4_wmi_operateD_888_AND_appW4_wmi_peerIsRea_ETC___d2266 &&
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h2 || appW4_smaCtrl[3:0] == 4'h3) &&
	     appW4_wsiWordsRemain != 12'd0 &&
	     appW4_mesgReqValid &&
	     appW4_preciseBurst ;
  assign WILL_FIRE_RL_appW4_wmwt_messagePushPrecise =
	     CAN_FIRE_RL_appW4_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_appW4_wmwt_messageFinalize ;

  // rule RL_appW4_wmwt_requestPrecise
  assign CAN_FIRE_RL_appW4_wmwt_requestPrecise =
	     appW4_wmi_reqF_c_r != 2'd2 && appW4_wmi_mFlagF_c_r != 2'd2 &&
	     appW4_wmi_operateD &&
	     appW4_wmi_peerIsReady &&
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h2 || appW4_smaCtrl[3:0] == 4'h3) &&
	     appW4_readyToRequest &&
	     appW4_preciseBurst ;
  assign WILL_FIRE_RL_appW4_wmwt_requestPrecise =
	     CAN_FIRE_RL_appW4_wmwt_requestPrecise &&
	     !WILL_FIRE_RL_appW4_wmwt_messagePushImprecise ;

  // rule RL_appW4_wmwt_mesgBegin
  assign CAN_FIRE_RL_appW4_wmwt_mesgBegin =
	     appW4_wsiS_reqFifo$EMPTY_N && appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h2 || appW4_smaCtrl[3:0] == 4'h3) &&
	     !appW4_wmi_sThreadBusy_d &&
	     !appW4_wmi_sDataThreadBusy_d &&
	     !appW4_opcode[8] ;
  assign WILL_FIRE_RL_appW4_wmwt_mesgBegin =
	     CAN_FIRE_RL_appW4_wmwt_mesgBegin &&
	     !WILL_FIRE_RL_appW4_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_appW4_wmwt_messageFinalize ;

  // rule RL_appW4_wmwt_messagePushImprecise
  assign CAN_FIRE_RL_appW4_wmwt_messagePushImprecise =
	     appW4_wmi_reqF_c_r != 2'd2 && appW4_wmi_dhF_c_r != 2'd2 &&
	     appW4_wmi_operateD &&
	     appW4_wmi_peerIsReady &&
	     appW4_wsiS_reqFifo_i_notEmpty__118_AND_NOT_app_ETC___d2285 &&
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h2 || appW4_smaCtrl[3:0] == 4'h3) &&
	     appW4_readyToPush &&
	     appW4_impreciseBurst ;
  assign WILL_FIRE_RL_appW4_wmwt_messagePushImprecise =
	     CAN_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_appW4_wmwt_messageFinalize ;

  // rule RL_appW4_wmwt_doAbort
  assign CAN_FIRE_RL_appW4_wmwt_doAbort =
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h2 || appW4_smaCtrl[3:0] == 4'h3) &&
	     appW4_doAbort ;
  assign WILL_FIRE_RL_appW4_wmwt_doAbort = CAN_FIRE_RL_appW4_wmwt_doAbort ;

  // rule RL_appW4_wmwt_messageFinalize
  assign CAN_FIRE_RL_appW4_wmwt_messageFinalize =
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h2 || appW4_smaCtrl[3:0] == 4'h3) &&
	     appW4_mesgLength[14] &&
	     !appW4_doAbort &&
	     (appW4_preciseBurst && appW4_wsiWordsRemain == 12'd0 ||
	      appW4_impreciseBurst && appW4_endOfMessage) ;
  assign WILL_FIRE_RL_appW4_wmwt_messageFinalize =
	     CAN_FIRE_RL_appW4_wmwt_messageFinalize ;

  // rule RL_appW4_wmi_reqF_incCtr
  assign CAN_FIRE_RL_appW4_wmi_reqF_incCtr =
	     ((appW4_wmi_reqF_c_r == 2'd0) ?
		appW4_wmi_reqF_x_wire$whas :
		appW4_wmi_reqF_c_r != 2'd1 || appW4_wmi_reqF_x_wire$whas) &&
	     appW4_wmi_reqF_enqueueing$whas &&
	     !appW4_wmi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW4_wmi_reqF_incCtr =
	     CAN_FIRE_RL_appW4_wmi_reqF_incCtr ;

  // rule RL_appW4_wmi_reqF_decCtr
  assign CAN_FIRE_RL_appW4_wmi_reqF_decCtr =
	     appW4_wmi_reqF_dequeueing$whas &&
	     !appW4_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wmi_reqF_decCtr =
	     CAN_FIRE_RL_appW4_wmi_reqF_decCtr ;

  // rule RL_appW4_wmi_reqF_both
  assign CAN_FIRE_RL_appW4_wmi_reqF_both =
	     ((appW4_wmi_reqF_c_r == 2'd1) ?
		appW4_wmi_reqF_x_wire$whas :
		appW4_wmi_reqF_c_r != 2'd2 || appW4_wmi_reqF_x_wire$whas) &&
	     appW4_wmi_reqF_dequeueing$whas &&
	     appW4_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wmi_reqF_both = CAN_FIRE_RL_appW4_wmi_reqF_both ;

  // rule RL_appW4_wmi_mFlagF_incCtr
  assign CAN_FIRE_RL_appW4_wmi_mFlagF_incCtr =
	     ((appW4_wmi_mFlagF_c_r == 2'd0) ?
		appW4_wmi_mFlagF_enqueueing$whas :
		appW4_wmi_mFlagF_c_r != 2'd1 ||
		appW4_wmi_mFlagF_enqueueing$whas) &&
	     appW4_wmi_mFlagF_enqueueing$whas &&
	     !appW4_wmi_mFlagF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr =
	     CAN_FIRE_RL_appW4_wmi_mFlagF_incCtr ;

  // rule RL_appW4_wmi_mFlagF_decCtr
  assign CAN_FIRE_RL_appW4_wmi_mFlagF_decCtr =
	     appW4_wmi_mFlagF_dequeueing$whas &&
	     !appW4_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr =
	     CAN_FIRE_RL_appW4_wmi_mFlagF_decCtr ;

  // rule RL_appW4_wmi_mFlagF_both
  assign CAN_FIRE_RL_appW4_wmi_mFlagF_both =
	     ((appW4_wmi_mFlagF_c_r == 2'd1) ?
		appW4_wmi_mFlagF_enqueueing$whas :
		appW4_wmi_mFlagF_c_r != 2'd2 ||
		appW4_wmi_mFlagF_enqueueing$whas) &&
	     appW4_wmi_mFlagF_dequeueing$whas &&
	     appW4_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wmi_mFlagF_both =
	     CAN_FIRE_RL_appW4_wmi_mFlagF_both ;

  // rule RL_appW4_wmi_dhF_incCtr
  assign CAN_FIRE_RL_appW4_wmi_dhF_incCtr =
	     ((appW4_wmi_dhF_c_r == 2'd0) ?
		MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		appW4_wmi_dhF_c_r != 2'd1 ||
		MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     !appW4_wmi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_appW4_wmi_dhF_incCtr =
	     CAN_FIRE_RL_appW4_wmi_dhF_incCtr ;

  // rule RL_appW4_wmi_dhF_decCtr
  assign CAN_FIRE_RL_appW4_wmi_dhF_decCtr =
	     appW4_wmi_dhF_dequeueing$whas &&
	     !MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_appW4_wmi_dhF_decCtr =
	     CAN_FIRE_RL_appW4_wmi_dhF_decCtr ;

  // rule RL_appW4_wmi_dhF_both
  assign CAN_FIRE_RL_appW4_wmi_dhF_both =
	     ((appW4_wmi_dhF_c_r == 2'd1) ?
		MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		appW4_wmi_dhF_c_r != 2'd2 ||
		MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     appW4_wmi_dhF_dequeueing$whas &&
	     MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_appW4_wmi_dhF_both = CAN_FIRE_RL_appW4_wmi_dhF_both ;

  // rule RL_appW4_wmi_sThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_appW4_wmi_sThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wmi_sThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_appW4_wmi_sDataThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_appW4_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_appW4_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_appW4_wsiM_reqFifo_incCtr =
	     ((appW4_wsiM_reqFifo_c_r == 2'd0) ?
		appW4_wsiM_reqFifo_enqueueing$whas :
		appW4_wsiM_reqFifo_c_r != 2'd1 ||
		appW4_wsiM_reqFifo_enqueueing$whas) &&
	     appW4_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_appW4_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_appW4_wsiM_reqFifo_incCtr ;

  // rule RL_appW4_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_appW4_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW4_wsiM_reqFifo_deq &&
	     !appW4_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_appW4_wsiM_reqFifo_decCtr ;

  // rule RL_appW4_wsiM_reqFifo_both
  assign CAN_FIRE_RL_appW4_wsiM_reqFifo_both =
	     ((appW4_wsiM_reqFifo_c_r == 2'd1) ?
		appW4_wsiM_reqFifo_enqueueing$whas :
		appW4_wsiM_reqFifo_c_r != 2'd2 ||
		appW4_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_appW4_wsiM_reqFifo_deq &&
	     appW4_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wsiM_reqFifo_both =
	     CAN_FIRE_RL_appW4_wsiM_reqFifo_both ;

  // rule RL_appW4_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_appW4_wsiS_reqFifo__updateLevelCounter =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 !=
	     appW4_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_appW4_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_appW4_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_appW4_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_appW4_wsiS_reqFifo_reset =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ||
	     appW4_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_appW4_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_appW4_wsiS_reqFifo_reset ;

  // rule RL_appW4_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_appW4_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_appW4_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW4_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW4_wmi_Em_doAlways
  assign CAN_FIRE_RL_appW4_wmi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wmi_Em_doAlways = 1'd1 ;

  // rule RL_appW4_wmi_respAdvance
  assign CAN_FIRE_RL_appW4_wmi_respAdvance =
	     appW4_wmi_operateD && appW4_wmi_peerIsReady &&
	     appW4_wmi_wmiResponse$wget[33:32] != 2'd0 ;
  assign WILL_FIRE_RL_appW4_wmi_respAdvance =
	     CAN_FIRE_RL_appW4_wmi_respAdvance ;

  // rule RL_appW4_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_appW4_wmrd_mesgBodyResponse =
	     appW4_wmi_respF_i_notEmpty__183_AND_appW4_smaC_ETC___d2188 &&
	     appW4_wci_cState == 3'd2 &&
	     (appW4_smaCtrl[3:0] == 4'h1 || appW4_smaCtrl[3:0] == 4'h4 ||
	      appW4_smaCtrl[3:0] == 4'h9) &&
	     appW4_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_appW4_wmrd_mesgBodyResponse ;

  // rule RL_appW4_wci_cfwr
  assign CAN_FIRE_RL_appW4_wci_cfwr =
	     appW4_wci_reqF$EMPTY_N && appW4_wci_respF_c_r != 2'd2 &&
	     appW4_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_appW4_wci_cfwr =
	     CAN_FIRE_RL_appW4_wci_cfwr &&
	     !WILL_FIRE_RL_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_appW4_wci_ctl_op_complete ;

  // rule RL_appW4_wci_ctl_op_complete
  assign CAN_FIRE_RL_appW4_wci_ctl_op_complete =
	     appW4_wci_respF_c_r != 2'd2 && appW4_wci_ctlOpActive &&
	     appW4_wci_ctlAckReg ;
  assign WILL_FIRE_RL_appW4_wci_ctl_op_complete =
	     CAN_FIRE_RL_appW4_wci_ctl_op_complete ;

  // rule RL_appW4_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_appW4_wci_reqF__updateLevelCounter =
	     (appW4_wci_wciReq$wget[59:57] != 3'd0) !=
	     appW4_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_appW4_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_appW4_wci_reqF__updateLevelCounter ;

  // rule RL_appW4_wci_respF_incCtr
  assign CAN_FIRE_RL_appW4_wci_respF_incCtr =
	     ((appW4_wci_respF_c_r == 2'd0) ?
		appW4_wci_respF_x_wire$whas :
		appW4_wci_respF_c_r != 2'd1 || appW4_wci_respF_x_wire$whas) &&
	     appW4_wci_respF_enqueueing$whas &&
	     !(appW4_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_appW4_wci_respF_incCtr =
	     CAN_FIRE_RL_appW4_wci_respF_incCtr ;

  // rule RL_appW4_wci_respF_decCtr
  assign CAN_FIRE_RL_appW4_wci_respF_decCtr =
	     appW4_wci_respF_c_r != 2'd0 && !appW4_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wci_respF_decCtr =
	     CAN_FIRE_RL_appW4_wci_respF_decCtr ;

  // rule RL_appW4_wci_respF_both
  assign CAN_FIRE_RL_appW4_wci_respF_both =
	     ((appW4_wci_respF_c_r == 2'd1) ?
		appW4_wci_respF_x_wire$whas :
		appW4_wci_respF_c_r != 2'd2 || appW4_wci_respF_x_wire$whas) &&
	     appW4_wci_respF_c_r != 2'd0 &&
	     appW4_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_appW4_wci_respF_both =
	     CAN_FIRE_RL_appW4_wci_respF_both ;

  // rule RL_appW4_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_appW4_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_appW4_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_appW4_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_appW4_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_appW4_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_appW4_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_appW4_respF_portA
  assign CAN_FIRE_RL_appW4_respF_portA = 1'd1 ;
  assign WILL_FIRE_RL_appW4_respF_portA = 1'd1 ;

  // rule RL_appW4_respF_portB
  assign CAN_FIRE_RL_appW4_respF_portB = 1'd1 ;
  assign WILL_FIRE_RL_appW4_respF_portB = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_appW2_endOfMessage$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_appW2_impreciseBurst$write_1__SEL_3 =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     !appW2_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_appW2_lastMesg$write_1__SEL_2 =
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ;
  assign MUX_appW2_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse &&
	     appW2_unrollCnt == 16'd1 ;
  assign MUX_appW2_mesgLength$write_1__SEL_4 =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     appW2_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_appW2_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wci_ctl_op_complete && appW2_wci_illegalEdge ;
  assign MUX_appW2_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_appW2_wci_ctl_op_start &&
	     (appW2_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW2_wci_cState != 3'd0 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      appW2_wci_cState != 3'd1 &&
	      appW2_wci_cState != 3'd3 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW2_wci_cState != 3'd2 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      appW2_wci_cState != 3'd3 &&
	      appW2_wci_cState != 3'd2 &&
	      appW2_wci_cState != 3'd1 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_appW2_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wci_respF_incCtr &&
	     appW2_wci_respF_c_r == 2'd0 ;
  assign MUX_appW2_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wci_respF_incCtr &&
	     appW2_wci_respF_c_r == 2'd1 ;
  assign MUX_appW2_wmi_dhF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmi_dhF_incCtr && appW2_wmi_dhF_c_r == 2'd0 ;
  assign MUX_appW2_wmi_dhF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmi_dhF_incCtr && appW2_wmi_dhF_c_r == 2'd1 ;
  assign MUX_appW2_wmi_mFlagF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr &&
	     appW2_wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_appW2_wmi_mFlagF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr &&
	     appW2_wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest && x__h18160 ;
  assign MUX_appW2_wmi_reqF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmi_reqF_incCtr &&
	     appW2_wmi_reqF_c_r == 2'd0 ;
  assign MUX_appW2_wmi_reqF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wmi_reqF_incCtr &&
	     appW2_wmi_reqF_c_r == 2'd1 ;
  assign MUX_appW2_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr &&
	     appW2_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_appW2_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr &&
	     appW2_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise ;
  assign MUX_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     appW2_smaCtrl[3:0] == 4'h3 ;
  assign MUX_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_appW2_wsipass_doMessagePush && !appW2_smaCtrl[4] ;
  assign MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_enq &&
	     appW2_wsiS_reqFifo$FULL_N ;
  assign MUX_appW3_mesgRdCount$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wmrd_mesgBodyResponse &&
	     appW3_unrollCnt == 16'd1 ;
  assign MUX_appW3_mesgWtCount$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wmwt_mesg_ingress &&
	     appW3_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_appW3_rdSerEmpty$write_1__PSEL_1 =
	     WILL_FIRE_RL_appW3_rdSer_body || WILL_FIRE_RL_appW3_rdSer_begin ;
  assign MUX_appW3_rdSerEmpty$write_1__SEL_1 =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (appW3_rdSerEmpty || appW3_rdSerPos == 2'd0) ;
  assign MUX_appW3_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete && appW3_wci_illegalEdge ;
  assign MUX_appW3_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     (appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW3_wci_cState != 3'd0 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      appW3_wci_cState != 3'd1 &&
	      appW3_wci_cState != 3'd3 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW3_wci_cState != 3'd2 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      appW3_wci_cState != 3'd3 &&
	      appW3_wci_cState != 3'd2 &&
	      appW3_wci_cState != 3'd1 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_appW3_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd0 ;
  assign MUX_appW3_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd1 ;
  assign MUX_appW3_wide16Fa$enq_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wrtSer_begin &&
	     (appW3_wrtSerPos == 2'd3 || appW3_metaWF$D_OUT[23:0] == 24'd0) ;
  assign MUX_appW3_wmemi_dhF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wmemi_dhF_incCtr &&
	     appW3_wmemi_dhF_c_r == 2'd0 ;
  assign MUX_appW3_wmemi_dhF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wmemi_dhF_incCtr &&
	     appW3_wmemi_dhF_c_r == 2'd1 ;
  assign MUX_appW3_wmemi_reqF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wmemi_reqF_incCtr &&
	     appW3_wmemi_reqF_c_r == 2'd0 ;
  assign MUX_appW3_wmemi_reqF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wmemi_reqF_incCtr &&
	     appW3_wmemi_reqF_c_r == 2'd1 ;
  assign MUX_appW3_wrtSerStage$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd0 ;
  assign MUX_appW3_wrtSerStage_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd1 ;
  assign MUX_appW3_wrtSerStage_2$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd2 ;
  assign MUX_appW3_wrtSerStage_3$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd3 ;
  assign MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N ;
  assign MUX_appW4_endOfMessage$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_appW4_impreciseBurst$write_1__SEL_3 =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     !appW4_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_appW4_lastMesg$write_1__SEL_2 =
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ;
  assign MUX_appW4_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse &&
	     appW4_unrollCnt == 16'd1 ;
  assign MUX_appW4_mesgLength$write_1__SEL_4 =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     appW4_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_appW4_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wci_ctl_op_complete && appW4_wci_illegalEdge ;
  assign MUX_appW4_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_appW4_wci_ctl_op_start &&
	     (appW4_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW4_wci_cState != 3'd0 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      appW4_wci_cState != 3'd1 &&
	      appW4_wci_cState != 3'd3 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW4_wci_cState != 3'd2 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      appW4_wci_cState != 3'd3 &&
	      appW4_wci_cState != 3'd2 &&
	      appW4_wci_cState != 3'd1 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_appW4_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wci_respF_incCtr &&
	     appW4_wci_respF_c_r == 2'd0 ;
  assign MUX_appW4_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wci_respF_incCtr &&
	     appW4_wci_respF_c_r == 2'd1 ;
  assign MUX_appW4_wmi_dhF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmi_dhF_incCtr && appW4_wmi_dhF_c_r == 2'd0 ;
  assign MUX_appW4_wmi_dhF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmi_dhF_incCtr && appW4_wmi_dhF_c_r == 2'd1 ;
  assign MUX_appW4_wmi_mFlagF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr &&
	     appW4_wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_appW4_wmi_mFlagF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr &&
	     appW4_wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest && x__h65555 ;
  assign MUX_appW4_wmi_reqF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmi_reqF_incCtr &&
	     appW4_wmi_reqF_c_r == 2'd0 ;
  assign MUX_appW4_wmi_reqF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wmi_reqF_incCtr &&
	     appW4_wmi_reqF_c_r == 2'd1 ;
  assign MUX_appW4_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr &&
	     appW4_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_appW4_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr &&
	     appW4_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise ;
  assign MUX_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     appW4_smaCtrl[3:0] == 4'h3 ;
  assign MUX_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_appW4_wsipass_doMessagePush && !appW4_smaCtrl[4] ;
  assign MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_enq &&
	     appW4_wsiS_reqFifo$FULL_N ;
  assign MUX_appW2_fabRespCredit_value$write_1__VAL_2 =
	     appW2_fabRespCredit_value +
	     (CAN_FIRE_RL_appW2_wmrd_mesgBodyRequest ? b__h14801 : 12'd0) +
	     (CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_appW2_fabWordsRemain$write_1__VAL_1 =
	     (appW2_wmi_sFlagReg[23:0] == 24'd0) ?
	       14'd1 :
	       appW2_wmi_sFlagReg[15:2] ;
  assign MUX_appW2_fabWordsRemain$write_1__VAL_2 =
	     appW2_fabWordsRemain - appW2_fabWordsCurReq ;
  assign MUX_appW2_mesgCount$write_1__VAL_1 = appW2_mesgCount + 32'd1 ;
  assign MUX_appW2_mesgLength$write_1__VAL_3 = { 1'd1, mlp1B__h20290 } ;
  assign MUX_appW2_mesgLength$write_1__VAL_4 =
	     (appW2_wsiS_reqFifo$D_OUT[11:8] == 4'd0) ?
	       15'd16384 :
	       { 1'd1, appW2_wsiS_reqFifo$D_OUT[55:44], 2'd0 } ;
  assign MUX_appW2_mesgReqAddr$write_1__VAL_2 =
	     appW2_mesgReqAddr + { appW2_fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_appW2_opcode$write_1__VAL_3 =
	     { 1'd1, appW2_wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_appW2_thisMesg$write_1__VAL_1 =
	     { appW2_mesgCount[7:0], x__h19459, x_length__h19455 } ;
  assign MUX_appW2_thisMesg$write_1__VAL_2 =
	     { appW2_mesgCount[7:0],
	       appW2_wmi_sFlagReg[31:24],
	       appW2_wmi_sFlagReg[15:0] } ;
  assign MUX_appW2_unrollCnt$write_1__VAL_1 =
	     (appW2_wmi_sFlagReg[23:0] == 24'd0) ?
	       16'd1 :
	       appW2_wmi_sFlagReg[17:2] ;
  assign MUX_appW2_unrollCnt$write_1__VAL_2 = appW2_unrollCnt - 16'd1 ;
  assign MUX_appW2_wci_illegalEdge$write_1__VAL_2 =
	     appW2_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     appW2_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     appW2_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_appW2_wci_respF_c_r$write_1__VAL_1 = appW2_wci_respF_c_r + 2'd1 ;
  assign MUX_appW2_wci_respF_c_r$write_1__VAL_2 = appW2_wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_appW2_wci_ctl_op_complete or
	  MUX_appW2_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wci_cfrd or
	  MUX_appW2_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW2_wci_ctl_op_complete:
	  MUX_appW2_wci_respF_q_0$write_1__VAL_1 =
	      MUX_appW2_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_appW2_wci_cfrd:
	  MUX_appW2_wci_respF_q_0$write_1__VAL_1 =
	      MUX_appW2_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW2_wci_cfwr:
	  MUX_appW2_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_appW2_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_appW2_wci_respF_q_0$write_1__VAL_2 =
	     (appW2_wci_respF_c_r == 2'd1) ?
	       MUX_appW2_wci_respF_q_0$write_1__VAL_1 :
	       appW2_wci_respF_q_1 ;
  assign MUX_appW2_wci_respF_q_1$write_1__VAL_2 =
	     (appW2_wci_respF_c_r == 2'd2) ?
	       MUX_appW2_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_appW2_wci_respF_x_wire$wset_1__VAL_1 =
	     appW2_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_appW2_wci_respF_x_wire$wset_1__VAL_2 = { 2'd1, x_data__h21722 } ;
  assign MUX_appW2_wmi_dhF_c_r$write_1__VAL_1 = appW2_wmi_dhF_c_r + 2'd1 ;
  assign MUX_appW2_wmi_dhF_c_r$write_1__VAL_2 = appW2_wmi_dhF_c_r - 2'd1 ;
  assign MUX_appW2_wmi_dhF_q_0$write_1__VAL_1 =
	     WILL_FIRE_RL_appW2_wmwt_messagePushPrecise ?
	       MUX_appW2_wmi_dhF_x_wire$wset_1__VAL_1 :
	       MUX_appW2_wmi_dhF_x_wire$wset_1__VAL_2 ;
  assign MUX_appW2_wmi_dhF_q_0$write_1__VAL_2 =
	     (appW2_wmi_dhF_c_r == 2'd1) ?
	       MUX_appW2_wmi_dhF_q_0$write_1__VAL_1 :
	       appW2_wmi_dhF_q_1 ;
  assign MUX_appW2_wmi_dhF_q_1$write_1__VAL_2 =
	     (appW2_wmi_dhF_c_r == 2'd2) ?
	       MUX_appW2_wmi_dhF_q_0$write_1__VAL_1 :
	       38'h0AAAAAAAAA ;
  assign MUX_appW2_wmi_dhF_x_wire$wset_1__VAL_1 =
	     { 1'd1,
	       appW2_wsiWordsRemain == 12'd1,
	       appW2_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_appW2_wmi_dhF_x_wire$wset_1__VAL_2 =
	     { 1'd1,
	       appW2_wsiS_reqFifo$D_OUT[57],
	       appW2_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_appW2_wmi_mFlagF_c_r$write_1__VAL_1 =
	     appW2_wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_appW2_wmi_mFlagF_c_r$write_1__VAL_2 =
	     appW2_wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_appW2_wmi_mFlagF_q_0$write_1__VAL_2 =
	     (appW2_wmi_mFlagF_c_r == 2'd1) ?
	       value__h6411 :
	       appW2_wmi_mFlagF_q_1 ;
  assign MUX_appW2_wmi_mFlagF_q_1$write_1__VAL_2 =
	     (appW2_wmi_mFlagF_c_r == 2'd2) ? value__h6411 : 32'd0 ;
  assign MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { x__h19459, mesgMetaF_length__h20436 } ;
  assign MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3 =
	     { x__h19459, mesgMetaF_length__h19700 } ;
  assign MUX_appW2_wmi_reqF_c_r$write_1__VAL_1 = appW2_wmi_reqF_c_r + 2'd1 ;
  assign MUX_appW2_wmi_reqF_c_r$write_1__VAL_2 = appW2_wmi_reqF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest or
	  MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wmwt_requestPrecise or
	  MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmwt_messagePushImprecise or
	  MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest:
	  MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_appW2_wmwt_requestPrecise:
	  MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW2_wmwt_messagePushImprecise:
	  MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_3;
      default: MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_appW2_wmi_reqF_q_0$write_1__VAL_2 =
	     (appW2_wmi_reqF_c_r == 2'd1) ?
	       MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 :
	       appW2_wmi_reqF_q_1 ;
  assign MUX_appW2_wmi_reqF_q_1$write_1__VAL_2 =
	     (appW2_wmi_reqF_c_r == 2'd2) ?
	       MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 :
	       32'd178956970 ;
  assign MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5,
	       x__h18160,
	       1'b0,
	       appW2_mesgReqAddr,
	       appW2_fabWordsCurReq[11:0] } ;
  assign MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 20'd229376, bl__h19562 } ;
  assign MUX_appW2_wmi_reqF_x_wire$wset_1__VAL_3 =
	     { 4'd3,
	       appW2_wsiS_reqFifo$D_OUT[57],
	       1'b0,
	       addr__h20306,
	       12'd1 } ;
  assign MUX_appW2_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     appW2_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_appW2_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     appW2_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (MUX_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       appW2_wsiS_reqFifo$D_OUT :
	       MUX_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (appW2_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       appW2_wsiM_reqFifo_q_1 ;
  assign MUX_appW2_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (appW2_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (appW2_respF_rCache[73] &&
	      appW2_respF_rCache[72:61] == appW2_respF_rRdPtr) ?
	       appW2_respF_rCache[60:0] :
	       appW2_respF_memory$DOB ;
  assign MUX_appW2_wsiWordsRemain$write_1__VAL_2 =
	     appW2_wsiWordsRemain - 12'd1 ;
  assign MUX_appW3_dlyRAG$write_1__VAL_1 = appW3_dlyRAG + 23'd1 ;
  assign MUX_appW3_dlyReadCredit_value$write_1__VAL_2 =
	     appW3_dlyReadCredit_value +
	     (WILL_FIRE_RL_appW3_delay_read_req ? 8'd255 : 8'd0) +
	     (CAN_FIRE_RL_appW3_delay_Fb2Fc ? 8'd1 : 8'd0) ;
  assign MUX_appW3_dlyReadyToWrite_value$write_1__VAL_2 =
	     appW3_dlyReadyToWrite_value +
	     (appW3_dlyReadyToWrite_acc_v1$whas ? 16'd1 : 16'd0) +
	     (CAN_FIRE_RL_appW3_delay_write_req ? 16'd65535 : 16'd0) ;
  assign MUX_appW3_dlyWAG$write_1__VAL_1 = appW3_dlyWAG + 23'd1 ;
  assign MUX_appW3_dlyWordsStored_value$write_1__VAL_2 =
	     appW3_dlyWordsStored_value +
	     (CAN_FIRE_RL_appW3_delay_write_req ? 25'd1 : 25'd0) +
	     (WILL_FIRE_RL_appW3_delay_read_req ? 25'd33554431 : 25'd0) ;
  assign MUX_appW3_mesgRdCount$write_1__VAL_1 = appW3_mesgRdCount + 32'd1 ;
  assign MUX_appW3_mesgWtCount$write_1__VAL_1 = appW3_mesgWtCount + 32'd1 ;
  assign MUX_appW3_rdSerPos$write_1__VAL_1 = appW3_rdSerPos + 2'd1 ;
  assign MUX_appW3_rdSerUnroll$write_1__VAL_2 = appW3_rdSerUnroll - 16'd1 ;
  assign MUX_appW3_rdSyncWord$write_1__VAL_1 =
	     appW3_rdSerPos != 2'd3 && v__h43330[23:0] == 24'd0 ;
  assign MUX_appW3_rdSyncWord$write_1__VAL_2 =
	     appW3_rdSerPos != 2'd3 && appW3_rdSerUnroll == 16'd1 ;
  assign MUX_appW3_unrollCnt$write_1__VAL_1 =
	     (appW3_metaRF$D_OUT[23:0] == 24'd0) ?
	       16'd1 :
	       appW3_metaRF$D_OUT[17:2] ;
  assign MUX_appW3_unrollCnt$write_1__VAL_2 = appW3_unrollCnt - 16'd1 ;
  assign MUX_appW3_wci_illegalEdge$write_1__VAL_2 =
	     appW3_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     appW3_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     appW3_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_appW3_wci_respF_c_r$write_1__VAL_1 = appW3_wci_respF_c_r + 2'd1 ;
  assign MUX_appW3_wci_respF_c_r$write_1__VAL_2 = appW3_wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_appW3_wci_ctl_op_complete or
	  MUX_appW3_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wci_cfrd or
	  MUX_appW3_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW3_wci_ctl_op_complete:
	  MUX_appW3_wci_respF_q_0$write_1__VAL_1 =
	      MUX_appW3_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_appW3_wci_cfrd:
	  MUX_appW3_wci_respF_q_0$write_1__VAL_1 =
	      MUX_appW3_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW3_wci_cfwr:
	  MUX_appW3_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_appW3_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_appW3_wci_respF_q_0$write_1__VAL_2 =
	     (appW3_wci_respF_c_r == 2'd1) ?
	       MUX_appW3_wci_respF_q_0$write_1__VAL_1 :
	       appW3_wci_respF_q_1 ;
  assign MUX_appW3_wci_respF_q_1$write_1__VAL_2 =
	     (appW3_wci_respF_c_r == 2'd2) ?
	       MUX_appW3_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_appW3_wci_respF_x_wire$wset_1__VAL_1 =
	     appW3_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_appW3_wci_respF_x_wire$wset_1__VAL_2 = { 2'd1, x_data__h45685 } ;
  always@(appW3_wrtSerPos or
	  IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1300 or
	  x__h41591 or x__h41618)
  begin
    case (appW3_wrtSerPos)
      2'd0: MUX_appW3_wide16Fa$enq_1__VAL_1 = x__h41591;
      2'd1: MUX_appW3_wide16Fa$enq_1__VAL_1 = x__h41618;
      default: MUX_appW3_wide16Fa$enq_1__VAL_1 =
		   IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1300;
    endcase
  end
  always@(appW3_wrtSerPos or
	  IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1329 or
	  x__h42241 or x__h42265)
  begin
    case (appW3_wrtSerPos)
      2'd0: MUX_appW3_wide16Fa$enq_1__VAL_2 = x__h42241;
      2'd1: MUX_appW3_wide16Fa$enq_1__VAL_2 = x__h42265;
      default: MUX_appW3_wide16Fa$enq_1__VAL_2 =
		   IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1329;
    endcase
  end
  assign MUX_appW3_wmemi_dhF_c_r$write_1__VAL_1 = appW3_wmemi_dhF_c_r + 2'd1 ;
  assign MUX_appW3_wmemi_dhF_c_r$write_1__VAL_2 = appW3_wmemi_dhF_c_r - 2'd1 ;
  assign MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1 =
	     { 2'd3, appW3_wide16Fa$D_OUT, 16'd65535 } ;
  assign MUX_appW3_wmemi_dhF_q_0$write_1__VAL_2 =
	     (appW3_wmemi_dhF_c_r == 2'd1) ?
	       MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1 :
	       appW3_wmemi_dhF_q_1 ;
  assign MUX_appW3_wmemi_dhF_q_1$write_1__VAL_2 =
	     (appW3_wmemi_dhF_c_r == 2'd2) ?
	       MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1 :
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_appW3_wmemi_reqF_c_r$write_1__VAL_1 =
	     appW3_wmemi_reqF_c_r + 2'd1 ;
  assign MUX_appW3_wmemi_reqF_c_r$write_1__VAL_2 =
	     appW3_wmemi_reqF_c_r - 2'd1 ;
  assign MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1 =
	     WILL_FIRE_RL_appW3_delay_write_req ?
	       MUX_appW3_wmemi_reqF_x_wire$wset_1__VAL_1 :
	       MUX_appW3_wmemi_reqF_x_wire$wset_1__VAL_2 ;
  assign MUX_appW3_wmemi_reqF_q_0$write_1__VAL_2 =
	     (appW3_wmemi_reqF_c_r == 2'd1) ?
	       MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1 :
	       appW3_wmemi_reqF_q_1 ;
  assign MUX_appW3_wmemi_reqF_q_1$write_1__VAL_2 =
	     (appW3_wmemi_reqF_c_r == 2'd2) ?
	       MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1 :
	       52'h0AAAAAAAAAAAA ;
  assign MUX_appW3_wmemi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd3, addr__h42665, 12'd1 } ;
  assign MUX_appW3_wmemi_reqF_x_wire$wset_1__VAL_2 =
	     { 4'd5, addr__h43015, 12'd1 } ;
  assign MUX_appW3_wrtSerPos$write_1__VAL_1 =
	     (appW3_metaWF$D_OUT[23:0] == 24'd0) ?
	       2'd0 :
	       appW3_wrtSerPos_262_PLUS_1___d2719 ;
  assign MUX_appW3_wrtSerPos$write_1__VAL_2 =
	     (appW3_wrtSerUnroll == 16'd1) ?
	       2'd0 :
	       appW3_wrtSerPos_262_PLUS_1___d2719 ;
  assign MUX_appW3_wrtSerUnroll$write_1__VAL_2 = appW3_wrtSerUnroll - 16'd1 ;
  assign MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     appW3_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     appW3_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     WILL_FIRE_RL_appW3_wmrd_mesgBodyResponse ?
	       MUX_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1 :
	       appW3_wsiS_reqFifo$D_OUT ;
  assign MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (appW3_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       appW3_wsiM_reqFifo_q_1 ;
  assign MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (appW3_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1 =
	     { 3'd1,
	       appW3_unrollCnt == 16'd1,
	       1'd1,
	       x_burstLength__h45202,
	       appW3_mesgRF$D_OUT,
	       x_byteEn__h45203,
	       appW3_readMeta[31:24] } ;
  assign MUX_appW4_fabRespCredit_value$write_1__VAL_2 =
	     appW4_fabRespCredit_value +
	     (CAN_FIRE_RL_appW4_wmrd_mesgBodyRequest ? b__h62196 : 12'd0) +
	     (CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_appW4_fabWordsRemain$write_1__VAL_1 =
	     (appW4_wmi_sFlagReg[23:0] == 24'd0) ?
	       14'd1 :
	       appW4_wmi_sFlagReg[15:2] ;
  assign MUX_appW4_fabWordsRemain$write_1__VAL_2 =
	     appW4_fabWordsRemain - appW4_fabWordsCurReq ;
  assign MUX_appW4_mesgCount$write_1__VAL_1 = appW4_mesgCount + 32'd1 ;
  assign MUX_appW4_mesgLength$write_1__VAL_3 = { 1'd1, mlp1B__h67685 } ;
  assign MUX_appW4_mesgLength$write_1__VAL_4 =
	     (appW4_wsiS_reqFifo$D_OUT[11:8] == 4'd0) ?
	       15'd16384 :
	       { 1'd1, appW4_wsiS_reqFifo$D_OUT[55:44], 2'd0 } ;
  assign MUX_appW4_mesgReqAddr$write_1__VAL_2 =
	     appW4_mesgReqAddr + { appW4_fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_appW4_opcode$write_1__VAL_3 =
	     { 1'd1, appW4_wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_appW4_thisMesg$write_1__VAL_1 =
	     { appW4_mesgCount[7:0], x__h66854, x_length__h66850 } ;
  assign MUX_appW4_thisMesg$write_1__VAL_2 =
	     { appW4_mesgCount[7:0],
	       appW4_wmi_sFlagReg[31:24],
	       appW4_wmi_sFlagReg[15:0] } ;
  assign MUX_appW4_unrollCnt$write_1__VAL_1 =
	     (appW4_wmi_sFlagReg[23:0] == 24'd0) ?
	       16'd1 :
	       appW4_wmi_sFlagReg[17:2] ;
  assign MUX_appW4_unrollCnt$write_1__VAL_2 = appW4_unrollCnt - 16'd1 ;
  assign MUX_appW4_wci_illegalEdge$write_1__VAL_2 =
	     appW4_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     appW4_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     appW4_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_appW4_wci_respF_c_r$write_1__VAL_1 = appW4_wci_respF_c_r + 2'd1 ;
  assign MUX_appW4_wci_respF_c_r$write_1__VAL_2 = appW4_wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_appW4_wci_ctl_op_complete or
	  MUX_appW4_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wci_cfrd or
	  MUX_appW4_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW4_wci_ctl_op_complete:
	  MUX_appW4_wci_respF_q_0$write_1__VAL_1 =
	      MUX_appW4_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_appW4_wci_cfrd:
	  MUX_appW4_wci_respF_q_0$write_1__VAL_1 =
	      MUX_appW4_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW4_wci_cfwr:
	  MUX_appW4_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_appW4_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_appW4_wci_respF_q_0$write_1__VAL_2 =
	     (appW4_wci_respF_c_r == 2'd1) ?
	       MUX_appW4_wci_respF_q_0$write_1__VAL_1 :
	       appW4_wci_respF_q_1 ;
  assign MUX_appW4_wci_respF_q_1$write_1__VAL_2 =
	     (appW4_wci_respF_c_r == 2'd2) ?
	       MUX_appW4_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_appW4_wci_respF_x_wire$wset_1__VAL_1 =
	     appW4_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_appW4_wci_respF_x_wire$wset_1__VAL_2 = { 2'd1, x_data__h69117 } ;
  assign MUX_appW4_wmi_dhF_c_r$write_1__VAL_1 = appW4_wmi_dhF_c_r + 2'd1 ;
  assign MUX_appW4_wmi_dhF_c_r$write_1__VAL_2 = appW4_wmi_dhF_c_r - 2'd1 ;
  assign MUX_appW4_wmi_dhF_q_0$write_1__VAL_1 =
	     WILL_FIRE_RL_appW4_wmwt_messagePushPrecise ?
	       MUX_appW4_wmi_dhF_x_wire$wset_1__VAL_1 :
	       MUX_appW4_wmi_dhF_x_wire$wset_1__VAL_2 ;
  assign MUX_appW4_wmi_dhF_q_0$write_1__VAL_2 =
	     (appW4_wmi_dhF_c_r == 2'd1) ?
	       MUX_appW4_wmi_dhF_q_0$write_1__VAL_1 :
	       appW4_wmi_dhF_q_1 ;
  assign MUX_appW4_wmi_dhF_q_1$write_1__VAL_2 =
	     (appW4_wmi_dhF_c_r == 2'd2) ?
	       MUX_appW4_wmi_dhF_q_0$write_1__VAL_1 :
	       38'h0AAAAAAAAA ;
  assign MUX_appW4_wmi_dhF_x_wire$wset_1__VAL_1 =
	     { 1'd1,
	       appW4_wsiWordsRemain == 12'd1,
	       appW4_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_appW4_wmi_dhF_x_wire$wset_1__VAL_2 =
	     { 1'd1,
	       appW4_wsiS_reqFifo$D_OUT[57],
	       appW4_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_appW4_wmi_mFlagF_c_r$write_1__VAL_1 =
	     appW4_wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_appW4_wmi_mFlagF_c_r$write_1__VAL_2 =
	     appW4_wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_appW4_wmi_mFlagF_q_0$write_1__VAL_2 =
	     (appW4_wmi_mFlagF_c_r == 2'd1) ?
	       value__h53813 :
	       appW4_wmi_mFlagF_q_1 ;
  assign MUX_appW4_wmi_mFlagF_q_1$write_1__VAL_2 =
	     (appW4_wmi_mFlagF_c_r == 2'd2) ? value__h53813 : 32'd0 ;
  assign MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { x__h66854, mesgMetaF_length__h67831 } ;
  assign MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3 =
	     { x__h66854, mesgMetaF_length__h67095 } ;
  assign MUX_appW4_wmi_reqF_c_r$write_1__VAL_1 = appW4_wmi_reqF_c_r + 2'd1 ;
  assign MUX_appW4_wmi_reqF_c_r$write_1__VAL_2 = appW4_wmi_reqF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest or
	  MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wmwt_requestPrecise or
	  MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmwt_messagePushImprecise or
	  MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest:
	  MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_appW4_wmwt_requestPrecise:
	  MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW4_wmwt_messagePushImprecise:
	  MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_3;
      default: MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_appW4_wmi_reqF_q_0$write_1__VAL_2 =
	     (appW4_wmi_reqF_c_r == 2'd1) ?
	       MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 :
	       appW4_wmi_reqF_q_1 ;
  assign MUX_appW4_wmi_reqF_q_1$write_1__VAL_2 =
	     (appW4_wmi_reqF_c_r == 2'd2) ?
	       MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 :
	       32'd178956970 ;
  assign MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5,
	       x__h65555,
	       1'b0,
	       appW4_mesgReqAddr,
	       appW4_fabWordsCurReq[11:0] } ;
  assign MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 20'd229376, bl__h66957 } ;
  assign MUX_appW4_wmi_reqF_x_wire$wset_1__VAL_3 =
	     { 4'd3,
	       appW4_wsiS_reqFifo$D_OUT[57],
	       1'b0,
	       addr__h67701,
	       12'd1 } ;
  assign MUX_appW4_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     appW4_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_appW4_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     appW4_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (MUX_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       appW4_wsiS_reqFifo$D_OUT :
	       MUX_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (appW4_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       appW4_wsiM_reqFifo_q_1 ;
  assign MUX_appW4_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (appW4_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (appW4_respF_rCache[73] &&
	      appW4_respF_rCache[72:61] == appW4_respF_rRdPtr) ?
	       appW4_respF_rCache[60:0] :
	       appW4_respF_memory$DOB ;
  assign MUX_appW4_wsiWordsRemain$write_1__VAL_2 =
	     appW4_wsiWordsRemain - 12'd1 ;

  // inlined wires
  assign appW2_wci_wciReq$wget =
	     { wci_s_2_MCmd,
	       wci_s_2_MAddrSpace,
	       wci_s_2_MByteEn,
	       wci_s_2_MAddr,
	       wci_s_2_MData } ;
  assign appW2_wci_wciReq$whas = 1'd1 ;
  assign appW2_wci_respF_x_wire$wget =
	     MUX_appW2_wci_respF_q_0$write_1__VAL_1 ;
  assign appW2_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_appW2_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW2_wci_cfrd ||
	     WILL_FIRE_RL_appW2_wci_cfwr ;
  assign appW2_wci_wEdge$wget = appW2_wci_reqF$D_OUT[36:34] ;
  assign appW2_wci_wEdge$whas = WILL_FIRE_RL_appW2_wci_ctl_op_start ;
  assign appW2_wci_sFlagReg_1$wget = 1'b0 ;
  assign appW2_wci_sFlagReg_1$whas = 1'b0 ;
  assign appW2_wci_ctlAckReg_1$wget = 1'd1 ;
  assign appW2_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_appW2_wci_ctrl_OrE ||
	     WILL_FIRE_RL_appW2_wci_ctrl_IsO ||
	     WILL_FIRE_RL_appW2_wci_ctrl_EiI ;
  assign appW2_wmi_reqF_x_wire$wget = MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 ;
  assign appW2_wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise ;
  assign appW2_wmi_mFlagF_x_wire$wget = value__h6411 ;
  assign appW2_wmi_mFlagF_x_wire$whas = appW2_wmi_mFlagF_enqueueing$whas ;
  assign appW2_wmi_dhF_x_wire$wget = MUX_appW2_wmi_dhF_q_0$write_1__VAL_1 ;
  assign appW2_wmi_dhF_x_wire$whas =
	     MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign appW2_wmi_wmiResponse$wget = { wmiM0_SResp, wmiM0_SData } ;
  assign appW2_wmi_wmiResponse$whas = 1'd1 ;
  assign appW2_wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign appW2_wmi_sThreadBusy_d_1$whas = wmiM0_SThreadBusy ;
  assign appW2_wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign appW2_wmi_sDataThreadBusy_d_1$whas = wmiM0_SDataThreadBusy ;
  assign appW2_wmi_operateD_1$wget = 1'd1 ;
  assign appW2_wmi_operateD_1$whas = CAN_FIRE_RL_appW2_operating_actions ;
  assign appW2_wmi_peerIsReady_1$wget = 1'd1 ;
  assign appW2_wmi_peerIsReady_1$whas = wmiM0_SReset_n ;
  assign appW2_wsiM_reqFifo_x_wire$wget =
	     MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign appW2_wsiM_reqFifo_x_wire$whas = appW2_wsiM_reqFifo_enqueueing$whas ;
  assign appW2_wsiM_operateD_1$wget = 1'd1 ;
  assign appW2_wsiM_operateD_1$whas = CAN_FIRE_RL_appW2_operating_actions ;
  assign appW2_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign appW2_wsiM_peerIsReady_1$whas = CAN_FIRE_RL_sRstConnect ;
  assign appW2_wsiS_wsiReq$wget =
	     { wsi_s_adc_MCmd,
	       wsi_s_adc_MReqLast,
	       wsi_s_adc_MBurstPrecise,
	       wsi_s_adc_MBurstLength,
	       wsi_s_adc_MData,
	       wsi_s_adc_MByteEn,
	       wsi_s_adc_MReqInfo } ;
  assign appW2_wsiS_wsiReq$whas = 1'd1 ;
  assign appW2_wsiS_operateD_1$wget = 1'd1 ;
  assign appW2_wsiS_operateD_1$whas = CAN_FIRE_RL_appW2_operating_actions ;
  assign appW2_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign appW2_wsiS_peerIsReady_1$whas = wsi_s_adc_MReset_n ;
  assign appW2_wsiS_sThreadBusy_dw$wget = appW2_wsiS_reqFifo_countReg > 2'd1 ;
  assign appW2_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_appW2_wsiS_backpressure ;
  assign appW2_fabRespCredit_acc_v1$wget = b__h14801 ;
  assign appW2_fabRespCredit_acc_v1$whas =
	     CAN_FIRE_RL_appW2_wmrd_mesgBodyRequest ;
  assign appW2_fabRespCredit_acc_v2$wget = 12'd1 ;
  assign appW2_fabRespCredit_acc_v2$whas =
	     CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi ;
  assign appW2_mesgPreRequest_1$wget = 1'd1 ;
  assign appW2_mesgPreRequest_1$whas =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyPreRequest ;
  assign appW2_respF_wDataIn$wget =
	     { 3'd1,
	       appW2_unrollCnt == 16'd1,
	       !appW2_smaCtrl[5],
	       sendData_burstLength__h18449,
	       appW2_wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h18451,
	       appW2_thisMesg[23:16] } ;
  assign appW2_respF_wDataIn$whas = appW2_respF_pwEnqueue$whas ;
  assign appW2_respF_wDataOut$wget =
	     MUX_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign appW2_respF_wDataOut$whas = 1'd1 ;
  assign appW2_wci_Es_mCmd_w$wget = wci_s_2_MCmd ;
  assign appW2_wci_Es_mCmd_w$whas = 1'd1 ;
  assign appW2_wci_Es_mAddrSpace_w$wget = wci_s_2_MAddrSpace ;
  assign appW2_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign appW2_wci_Es_mAddr_w$wget = wci_s_2_MAddr ;
  assign appW2_wci_Es_mAddr_w$whas = 1'd1 ;
  assign appW2_wci_Es_mData_w$wget = wci_s_2_MData ;
  assign appW2_wci_Es_mData_w$whas = 1'd1 ;
  assign appW2_wci_Es_mByteEn_w$wget = wci_s_2_MByteEn ;
  assign appW2_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign appW2_wsi_Es_mCmd_w$wget = wsi_s_adc_MCmd ;
  assign appW2_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign appW2_wsi_Es_mBurstLength_w$wget = wsi_s_adc_MBurstLength ;
  assign appW2_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign appW2_wsi_Es_mData_w$wget = wsi_s_adc_MData ;
  assign appW2_wsi_Es_mData_w$whas = 1'd1 ;
  assign appW2_wsi_Es_mByteEn_w$wget = wsi_s_adc_MByteEn ;
  assign appW2_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign appW2_wsi_Es_mReqInfo_w$wget = wsi_s_adc_MReqInfo ;
  assign appW2_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign appW2_wmi_Em_sResp_w$wget = wmiM0_SResp ;
  assign appW2_wmi_Em_sResp_w$whas = 1'd1 ;
  assign appW2_wmi_Em_sData_w$wget = wmiM0_SData ;
  assign appW2_wmi_Em_sData_w$whas = 1'd1 ;
  assign appW3_wci_wciReq$wget =
	     { wci_s_3_MCmd,
	       wci_s_3_MAddrSpace,
	       wci_s_3_MByteEn,
	       wci_s_3_MAddr,
	       wci_s_3_MData } ;
  assign appW3_wci_wciReq$whas = 1'd1 ;
  assign appW3_wci_respF_x_wire$wget =
	     MUX_appW3_wci_respF_q_0$write_1__VAL_1 ;
  assign appW3_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW3_wci_cfrd ||
	     WILL_FIRE_RL_appW3_wci_cfwr ;
  assign appW3_wci_wEdge$wget = appW3_wci_reqF$D_OUT[36:34] ;
  assign appW3_wci_wEdge$whas = WILL_FIRE_RL_appW3_wci_ctl_op_start ;
  assign appW3_wci_sFlagReg_1$wget = 1'b0 ;
  assign appW3_wci_sFlagReg_1$whas = 1'b0 ;
  assign appW3_wci_ctlAckReg_1$wget = 1'd1 ;
  assign appW3_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_appW3_wci_ctrl_OrE ||
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ||
	     WILL_FIRE_RL_appW3_wci_ctrl_EiI ;
  assign appW3_wsiS_wsiReq$wget =
	     { appW3_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_mReqLConnect,
	       CAN_FIRE_RL_mBurstPConnect,
	       appW3_wsi_Es_mBurstLength_w$wget,
	       appW2_wsiM_reqFifo_q_0[43:8],
	       appW3_wsi_Es_mReqInfo_w$wget } ;
  assign appW3_wsiS_wsiReq$whas = 1'd1 ;
  assign appW3_wsiS_operateD_1$wget = 1'd1 ;
  assign appW3_wsiS_operateD_1$whas = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign appW3_wsiS_peerIsReady_1$whas = CAN_FIRE_RL_mRstConnect ;
  assign appW3_wsiS_sThreadBusy_dw$wget = appW3_wsiS_reqFifo_countReg > 2'd1 ;
  assign appW3_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_appW3_wsiS_backpressure ;
  assign appW3_wsiM_reqFifo_x_wire$wget =
	     MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign appW3_wsiM_reqFifo_x_wire$whas = appW3_wsiM_reqFifo_enqueueing$whas ;
  assign appW3_wsiM_operateD_1$wget = 1'd1 ;
  assign appW3_wsiM_operateD_1$whas = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign appW3_wsiM_peerIsReady_1$whas = CAN_FIRE_RL_sRstConnect_1 ;
  assign appW3_wmemi_reqF_x_wire$wget =
	     MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1 ;
  assign appW3_wmemi_reqF_x_wire$whas =
	     WILL_FIRE_RL_appW3_delay_write_req ||
	     WILL_FIRE_RL_appW3_delay_read_req ;
  assign appW3_wmemi_dhF_x_wire$wget =
	     MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1 ;
  assign appW3_wmemi_dhF_x_wire$whas = CAN_FIRE_RL_appW3_delay_write_req ;
  assign appW3_wmemi_wmemiResponse$wget =
	     { wmemiM_SResp, wmemiM_SRespLast, wmemiM_SData } ;
  assign appW3_wmemi_wmemiResponse$whas = 1'd1 ;
  assign appW3_wmemi_sCmdAccept_w$wget = 1'd1 ;
  assign appW3_wmemi_sCmdAccept_w$whas = wmemiM_SCmdAccept ;
  assign appW3_wmemi_sDataAccept_w$wget = 1'd1 ;
  assign appW3_wmemi_sDataAccept_w$whas = wmemiM_SDataAccept ;
  assign appW3_wmemi_operateD_1$wget = 1'd1 ;
  assign appW3_wmemi_operateD_1$whas = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wmemi_peerIsReady_1$wget = 1'b0 ;
  assign appW3_wmemi_peerIsReady_1$whas = 1'b0 ;
  assign appW3_mesgWF_wDataIn$wget = appW3_wsiS_reqFifo$D_OUT[43:12] ;
  assign appW3_mesgWF_wDataIn$whas = CAN_FIRE_RL_appW3_wmwt_mesg_ingress ;
  assign appW3_mesgWF_wDataOut$wget = data__h41956 ;
  assign appW3_mesgWF_wDataOut$whas = 1'd1 ;
  assign appW3_dlyWordsStored_acc_v1$wget = 25'd1 ;
  assign appW3_dlyWordsStored_acc_v1$whas =
	     CAN_FIRE_RL_appW3_delay_write_req ;
  assign appW3_dlyWordsStored_acc_v2$wget = 25'd33554431 ;
  assign appW3_dlyWordsStored_acc_v2$whas =
	     WILL_FIRE_RL_appW3_delay_read_req ;
  assign appW3_dlyReadCredit_acc_v1$wget = 8'd255 ;
  assign appW3_dlyReadCredit_acc_v1$whas = WILL_FIRE_RL_appW3_delay_read_req ;
  assign appW3_dlyReadCredit_acc_v2$wget = 8'd1 ;
  assign appW3_dlyReadCredit_acc_v2$whas = CAN_FIRE_RL_appW3_delay_Fb2Fc ;
  assign appW3_dlyReadyToWrite_acc_v1$wget = 16'd1 ;
  assign appW3_dlyReadyToWrite_acc_v1$whas =
	     WILL_FIRE_RL_appW3_wrtSer_body ||
	     WILL_FIRE_RL_appW3_wrtSer_begin ;
  assign appW3_dlyReadyToWrite_acc_v2$wget = 16'd65535 ;
  assign appW3_dlyReadyToWrite_acc_v2$whas =
	     CAN_FIRE_RL_appW3_delay_write_req ;
  assign appW3_wci_Es_mCmd_w$wget = wci_s_3_MCmd ;
  assign appW3_wci_Es_mCmd_w$whas = 1'd1 ;
  assign appW3_wci_Es_mAddrSpace_w$wget = wci_s_3_MAddrSpace ;
  assign appW3_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign appW3_wci_Es_mAddr_w$wget = wci_s_3_MAddr ;
  assign appW3_wci_Es_mAddr_w$whas = 1'd1 ;
  assign appW3_wci_Es_mData_w$wget = wci_s_3_MData ;
  assign appW3_wci_Es_mData_w$whas = 1'd1 ;
  assign appW3_wci_Es_mByteEn_w$wget = wci_s_3_MByteEn ;
  assign appW3_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mCmd_w$wget =
	     appW2_wsiM_sThreadBusy_d ? 3'd0 : appW2_wsiM_reqFifo_q_0[60:58] ;
  assign appW3_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mBurstLength_w$wget =
	     appW2_wsiM_sThreadBusy_d ?
	       12'd0 :
	       appW2_wsiM_reqFifo_q_0[55:44] ;
  assign appW3_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mData_w$wget = appW2_wsiM_reqFifo_q_0[43:12] ;
  assign appW3_wsi_Es_mData_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mByteEn_w$wget = appW2_wsiM_reqFifo_q_0[11:8] ;
  assign appW3_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign appW3_wsi_Es_mReqInfo_w$wget =
	     appW2_wsiM_sThreadBusy_d ? 8'd0 : appW2_wsiM_reqFifo_q_0[7:0] ;
  assign appW3_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign appW3_wmemi_Em_sResp_w$wget = wmemiM_SResp ;
  assign appW3_wmemi_Em_sResp_w$whas = 1'd1 ;
  assign appW3_wmemi_Em_sData_w$wget = wmemiM_SData ;
  assign appW3_wmemi_Em_sData_w$whas = 1'd1 ;
  assign appW4_wci_wciReq$wget =
	     { wci_s_4_MCmd,
	       wci_s_4_MAddrSpace,
	       wci_s_4_MByteEn,
	       wci_s_4_MAddr,
	       wci_s_4_MData } ;
  assign appW4_wci_wciReq$whas = 1'd1 ;
  assign appW4_wci_respF_x_wire$wget =
	     MUX_appW4_wci_respF_q_0$write_1__VAL_1 ;
  assign appW4_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_appW4_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW4_wci_cfrd ||
	     WILL_FIRE_RL_appW4_wci_cfwr ;
  assign appW4_wci_wEdge$wget = appW4_wci_reqF$D_OUT[36:34] ;
  assign appW4_wci_wEdge$whas = WILL_FIRE_RL_appW4_wci_ctl_op_start ;
  assign appW4_wci_sFlagReg_1$wget = 1'b0 ;
  assign appW4_wci_sFlagReg_1$whas = 1'b0 ;
  assign appW4_wci_ctlAckReg_1$wget = 1'd1 ;
  assign appW4_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_appW4_wci_ctrl_OrE ||
	     WILL_FIRE_RL_appW4_wci_ctrl_IsO ||
	     WILL_FIRE_RL_appW4_wci_ctrl_EiI ;
  assign appW4_wmi_reqF_x_wire$wget = MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 ;
  assign appW4_wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise ;
  assign appW4_wmi_mFlagF_x_wire$wget = value__h53813 ;
  assign appW4_wmi_mFlagF_x_wire$whas = appW4_wmi_mFlagF_enqueueing$whas ;
  assign appW4_wmi_dhF_x_wire$wget = MUX_appW4_wmi_dhF_q_0$write_1__VAL_1 ;
  assign appW4_wmi_dhF_x_wire$whas =
	     MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign appW4_wmi_wmiResponse$wget = { wmiM1_SResp, wmiM1_SData } ;
  assign appW4_wmi_wmiResponse$whas = 1'd1 ;
  assign appW4_wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign appW4_wmi_sThreadBusy_d_1$whas = wmiM1_SThreadBusy ;
  assign appW4_wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign appW4_wmi_sDataThreadBusy_d_1$whas = wmiM1_SDataThreadBusy ;
  assign appW4_wmi_operateD_1$wget = 1'd1 ;
  assign appW4_wmi_operateD_1$whas = CAN_FIRE_RL_appW4_operating_actions ;
  assign appW4_wmi_peerIsReady_1$wget = 1'd1 ;
  assign appW4_wmi_peerIsReady_1$whas = wmiM1_SReset_n ;
  assign appW4_wsiM_reqFifo_x_wire$wget =
	     MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign appW4_wsiM_reqFifo_x_wire$whas = appW4_wsiM_reqFifo_enqueueing$whas ;
  assign appW4_wsiM_operateD_1$wget = 1'd1 ;
  assign appW4_wsiM_operateD_1$whas = CAN_FIRE_RL_appW4_operating_actions ;
  assign appW4_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign appW4_wsiM_peerIsReady_1$whas = wsi_m_dac_SReset_n ;
  assign appW4_wsiS_wsiReq$wget =
	     { appW4_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_mReqLConnect_1,
	       CAN_FIRE_RL_mBurstPConnect_1,
	       appW4_wsi_Es_mBurstLength_w$wget,
	       appW3_wsiM_reqFifo_q_0[43:8],
	       appW4_wsi_Es_mReqInfo_w$wget } ;
  assign appW4_wsiS_wsiReq$whas = 1'd1 ;
  assign appW4_wsiS_operateD_1$wget = 1'd1 ;
  assign appW4_wsiS_operateD_1$whas = CAN_FIRE_RL_appW4_operating_actions ;
  assign appW4_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign appW4_wsiS_peerIsReady_1$whas = CAN_FIRE_RL_mRstConnect_1 ;
  assign appW4_wsiS_sThreadBusy_dw$wget = appW4_wsiS_reqFifo_countReg > 2'd1 ;
  assign appW4_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_appW4_wsiS_backpressure ;
  assign appW4_fabRespCredit_acc_v1$wget = b__h62196 ;
  assign appW4_fabRespCredit_acc_v1$whas =
	     CAN_FIRE_RL_appW4_wmrd_mesgBodyRequest ;
  assign appW4_fabRespCredit_acc_v2$wget = 12'd1 ;
  assign appW4_fabRespCredit_acc_v2$whas =
	     CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi ;
  assign appW4_mesgPreRequest_1$wget = 1'd1 ;
  assign appW4_mesgPreRequest_1$whas =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyPreRequest ;
  assign appW4_respF_wDataIn$wget =
	     { 3'd1,
	       appW4_unrollCnt == 16'd1,
	       !appW4_smaCtrl[5],
	       sendData_burstLength__h65844,
	       appW4_wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h65846,
	       appW4_thisMesg[23:16] } ;
  assign appW4_respF_wDataIn$whas = appW4_respF_pwEnqueue$whas ;
  assign appW4_respF_wDataOut$wget =
	     MUX_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign appW4_respF_wDataOut$whas = 1'd1 ;
  assign appW4_wci_Es_mCmd_w$wget = wci_s_4_MCmd ;
  assign appW4_wci_Es_mCmd_w$whas = 1'd1 ;
  assign appW4_wci_Es_mAddrSpace_w$wget = wci_s_4_MAddrSpace ;
  assign appW4_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign appW4_wci_Es_mAddr_w$wget = wci_s_4_MAddr ;
  assign appW4_wci_Es_mAddr_w$whas = 1'd1 ;
  assign appW4_wci_Es_mData_w$wget = wci_s_4_MData ;
  assign appW4_wci_Es_mData_w$whas = 1'd1 ;
  assign appW4_wci_Es_mByteEn_w$wget = wci_s_4_MByteEn ;
  assign appW4_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign appW4_wsi_Es_mCmd_w$wget =
	     appW3_wsiM_sThreadBusy_d ? 3'd0 : appW3_wsiM_reqFifo_q_0[60:58] ;
  assign appW4_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign appW4_wsi_Es_mBurstLength_w$wget =
	     appW3_wsiM_sThreadBusy_d ?
	       12'd0 :
	       appW3_wsiM_reqFifo_q_0[55:44] ;
  assign appW4_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign appW4_wsi_Es_mData_w$wget = appW3_wsiM_reqFifo_q_0[43:12] ;
  assign appW4_wsi_Es_mData_w$whas = 1'd1 ;
  assign appW4_wsi_Es_mByteEn_w$wget = appW3_wsiM_reqFifo_q_0[11:8] ;
  assign appW4_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign appW4_wsi_Es_mReqInfo_w$wget =
	     appW3_wsiM_sThreadBusy_d ? 8'd0 : appW3_wsiM_reqFifo_q_0[7:0] ;
  assign appW4_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign appW4_wmi_Em_sResp_w$wget = wmiM1_SResp ;
  assign appW4_wmi_Em_sResp_w$whas = 1'd1 ;
  assign appW4_wmi_Em_sData_w$wget = wmiM1_SData ;
  assign appW4_wmi_Em_sData_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mCmd_w$wget = wci_s_0_MCmd ;
  assign tieOff0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddrSpace_w$wget = wci_s_0_MAddrSpace ;
  assign tieOff0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mAddr_w$wget = wci_s_0_MAddr ;
  assign tieOff0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mData_w$wget = wci_s_0_MData ;
  assign tieOff0_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff0_wci_Es_mByteEn_w$wget = wci_s_0_MByteEn ;
  assign tieOff0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mCmd_w$wget = wci_s_1_MCmd ;
  assign tieOff1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mAddrSpace_w$wget = wci_s_1_MAddrSpace ;
  assign tieOff1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mAddr_w$wget = wci_s_1_MAddr ;
  assign tieOff1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mData_w$wget = wci_s_1_MData ;
  assign tieOff1_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff1_wci_Es_mByteEn_w$wget = wci_s_1_MByteEn ;
  assign tieOff1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mCmd_w$wget = wci_s_5_MCmd ;
  assign tieOff5_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mAddrSpace_w$wget = wci_s_5_MAddrSpace ;
  assign tieOff5_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mAddr_w$wget = wci_s_5_MAddr ;
  assign tieOff5_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mData_w$wget = wci_s_5_MData ;
  assign tieOff5_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff5_wci_Es_mByteEn_w$wget = wci_s_5_MByteEn ;
  assign tieOff5_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mCmd_w$wget = wci_s_6_MCmd ;
  assign tieOff6_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mAddrSpace_w$wget = wci_s_6_MAddrSpace ;
  assign tieOff6_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mAddr_w$wget = wci_s_6_MAddr ;
  assign tieOff6_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mData_w$wget = wci_s_6_MData ;
  assign tieOff6_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff6_wci_Es_mByteEn_w$wget = wci_s_6_MByteEn ;
  assign tieOff6_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mCmd_w$wget = wci_s_7_MCmd ;
  assign tieOff7_wci_Es_mCmd_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mAddrSpace_w$wget = wci_s_7_MAddrSpace ;
  assign tieOff7_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mAddr_w$wget = wci_s_7_MAddr ;
  assign tieOff7_wci_Es_mAddr_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mData_w$wget = wci_s_7_MData ;
  assign tieOff7_wci_Es_mData_w$whas = 1'd1 ;
  assign tieOff7_wci_Es_mByteEn_w$wget = wci_s_7_MByteEn ;
  assign tieOff7_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign appW2_wci_reqF_r_enq$whas = CAN_FIRE_RL_appW2_wci_reqF_enq ;
  assign appW2_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_appW2_wci_cfrd || WILL_FIRE_RL_appW2_wci_cfwr ||
	     WILL_FIRE_RL_appW2_wci_ctl_op_start ;
  assign appW2_wci_reqF_r_clr$whas = 1'b0 ;
  assign appW2_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_appW2_wci_cfrd || WILL_FIRE_RL_appW2_wci_cfwr ||
	     WILL_FIRE_RL_appW2_wci_ctl_op_complete ;
  assign appW2_wci_respF_dequeueing$whas = appW2_wci_respF_c_r != 2'd0 ;
  assign appW2_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign appW2_wci_wci_cfwr_pw$whas =
	     appW2_wci_reqF$EMPTY_N && appW2_wci_reqF$D_OUT[56] &&
	     appW2_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign appW2_wci_wci_cfrd_pw$whas =
	     appW2_wci_reqF$EMPTY_N && appW2_wci_reqF$D_OUT[56] &&
	     appW2_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW2_wci_wci_ctrl_pw$whas =
	     appW2_wci_reqF$EMPTY_N && !appW2_wci_reqF$D_OUT[56] &&
	     appW2_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW2_wmi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest ;
  assign appW2_wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_appW2_wmi_reqF_deq && appW2_wmi_reqF_c_r != 2'd0 ;
  assign appW2_wmi_mFlagF_enqueueing$whas =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest && x__h18160 ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ;
  assign appW2_wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_appW2_wmi_reqF_deq && appW2_wmi_reqF_q_0[27] &&
	     appW2_wmi_mFlagF_c_r != 2'd0 ;
  assign appW2_wmi_dhF_enqueueing$whas =
	     MUX_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign appW2_wmi_dhF_dequeueing$whas =
	     WILL_FIRE_RL_appW2_wmi_dhF_deq && appW2_wmi_dhF_c_r != 2'd0 ;
  assign appW2_wsiM_reqFifo_enqueueing$whas =
	     (WILL_FIRE_RL_appW2_wmwt_messagePushPrecise ||
	      WILL_FIRE_RL_appW2_wmwt_messagePushImprecise) &&
	     appW2_smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_appW2_wsipass_doMessagePush && !appW2_smaCtrl[4] ||
	     WILL_FIRE_RL_appW2_wmrd_mesgResptoWsi ;
  assign appW2_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_appW2_wsiM_reqFifo_deq ;
  assign appW2_wsiM_sThreadBusy_pw$whas = CAN_FIRE_RL_stbConnect ;
  assign appW2_wsiS_reqFifo_r_enq$whas =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign appW2_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_appW2_wsipass_doMessagePush ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise ;
  assign appW2_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign appW2_wsiS_reqFifo_doResetEnq$whas =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign appW2_wsiS_reqFifo_doResetDeq$whas = appW2_wsiS_reqFifo_r_deq$whas ;
  assign appW2_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign appW2_respF_pwDequeue$whas = CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi ;
  assign appW2_respF_pwEnqueue$whas =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse && !appW2_smaCtrl[4] ;
  assign appW2_wsi_Es_mReqLast_w$whas = wsi_s_adc_MReqLast ;
  assign appW2_wsi_Es_mBurstPrecise_w$whas = wsi_s_adc_MBurstPrecise ;
  assign appW2_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign appW3_wci_reqF_r_enq$whas = CAN_FIRE_RL_appW3_wci_reqF_enq ;
  assign appW3_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_appW3_wci_cfrd || WILL_FIRE_RL_appW3_wci_cfwr ||
	     WILL_FIRE_RL_appW3_wci_ctl_op_start ;
  assign appW3_wci_reqF_r_clr$whas = 1'b0 ;
  assign appW3_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_appW3_wci_cfrd || WILL_FIRE_RL_appW3_wci_cfwr ||
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete ;
  assign appW3_wci_respF_dequeueing$whas = appW3_wci_respF_c_r != 2'd0 ;
  assign appW3_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign appW3_wci_wci_cfwr_pw$whas =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_reqF$D_OUT[56] &&
	     appW3_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign appW3_wci_wci_cfrd_pw$whas =
	     appW3_wci_reqF$EMPTY_N && appW3_wci_reqF$D_OUT[56] &&
	     appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW3_wci_wci_ctrl_pw$whas =
	     appW3_wci_reqF$EMPTY_N && !appW3_wci_reqF$D_OUT[56] &&
	     appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW3_wsiS_reqFifo_r_enq$whas =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign appW3_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_appW3_wmwt_mesg_ingress ||
	     WILL_FIRE_RL_appW3_wsipass_doMessagePush ;
  assign appW3_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign appW3_wsiS_reqFifo_doResetEnq$whas =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign appW3_wsiS_reqFifo_doResetDeq$whas = appW3_wsiS_reqFifo_r_deq$whas ;
  assign appW3_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign appW3_wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_appW3_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_appW3_wsipass_doMessagePush ;
  assign appW3_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_appW3_wsiM_reqFifo_deq ;
  assign appW3_wsiM_sThreadBusy_pw$whas = CAN_FIRE_RL_stbConnect_1 ;
  assign appW3_wmemi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_appW3_delay_read_req ||
	     WILL_FIRE_RL_appW3_delay_write_req ;
  assign appW3_wmemi_reqF_dequeueing$whas =
	     wmemiM_SCmdAccept && appW3_wmemi_reqF_c_r != 2'd0 ;
  assign appW3_wmemi_dhF_enqueueing$whas = CAN_FIRE_RL_appW3_delay_write_req ;
  assign appW3_wmemi_dhF_dequeueing$whas =
	     wmemiM_SDataAccept && appW3_wmemi_dhF_c_r != 2'd0 ;
  assign appW3_mesgWF_pwDequeue$whas = CAN_FIRE_RL_appW3_wrtSer_body ;
  assign appW3_mesgWF_pwEnqueue$whas = CAN_FIRE_RL_appW3_wmwt_mesg_ingress ;
  assign appW3_wsi_Es_mReqLast_w$whas = CAN_FIRE_RL_mReqLConnect ;
  assign appW3_wsi_Es_mBurstPrecise_w$whas = CAN_FIRE_RL_mBurstPConnect ;
  assign appW3_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign appW3_wmemi_Em_sRespLast_w$whas = wmemiM_SRespLast ;
  assign appW4_wci_reqF_r_enq$whas = CAN_FIRE_RL_appW4_wci_reqF_enq ;
  assign appW4_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_appW4_wci_cfrd || WILL_FIRE_RL_appW4_wci_cfwr ||
	     WILL_FIRE_RL_appW4_wci_ctl_op_start ;
  assign appW4_wci_reqF_r_clr$whas = 1'b0 ;
  assign appW4_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_appW4_wci_cfrd || WILL_FIRE_RL_appW4_wci_cfwr ||
	     WILL_FIRE_RL_appW4_wci_ctl_op_complete ;
  assign appW4_wci_respF_dequeueing$whas = appW4_wci_respF_c_r != 2'd0 ;
  assign appW4_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign appW4_wci_wci_cfwr_pw$whas =
	     appW4_wci_reqF$EMPTY_N && appW4_wci_reqF$D_OUT[56] &&
	     appW4_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign appW4_wci_wci_cfrd_pw$whas =
	     appW4_wci_reqF$EMPTY_N && appW4_wci_reqF$D_OUT[56] &&
	     appW4_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW4_wci_wci_ctrl_pw$whas =
	     appW4_wci_reqF$EMPTY_N && !appW4_wci_reqF$D_OUT[56] &&
	     appW4_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign appW4_wmi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest ;
  assign appW4_wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_appW4_wmi_reqF_deq && appW4_wmi_reqF_c_r != 2'd0 ;
  assign appW4_wmi_mFlagF_enqueueing$whas =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest && x__h65555 ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ;
  assign appW4_wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_appW4_wmi_reqF_deq && appW4_wmi_reqF_q_0[27] &&
	     appW4_wmi_mFlagF_c_r != 2'd0 ;
  assign appW4_wmi_dhF_enqueueing$whas =
	     MUX_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign appW4_wmi_dhF_dequeueing$whas =
	     WILL_FIRE_RL_appW4_wmi_dhF_deq && appW4_wmi_dhF_c_r != 2'd0 ;
  assign appW4_wsiM_reqFifo_enqueueing$whas =
	     (WILL_FIRE_RL_appW4_wmwt_messagePushPrecise ||
	      WILL_FIRE_RL_appW4_wmwt_messagePushImprecise) &&
	     appW4_smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_appW4_wsipass_doMessagePush && !appW4_smaCtrl[4] ||
	     WILL_FIRE_RL_appW4_wmrd_mesgResptoWsi ;
  assign appW4_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_appW4_wsiM_reqFifo_deq ;
  assign appW4_wsiM_sThreadBusy_pw$whas = wsi_m_dac_SThreadBusy ;
  assign appW4_wsiS_reqFifo_r_enq$whas =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign appW4_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_appW4_wsipass_doMessagePush ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise ;
  assign appW4_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign appW4_wsiS_reqFifo_doResetEnq$whas =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign appW4_wsiS_reqFifo_doResetDeq$whas = appW4_wsiS_reqFifo_r_deq$whas ;
  assign appW4_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign appW4_respF_pwDequeue$whas = CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi ;
  assign appW4_respF_pwEnqueue$whas =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse && !appW4_smaCtrl[4] ;
  assign appW4_wsi_Es_mReqLast_w$whas = CAN_FIRE_RL_mReqLConnect_1 ;
  assign appW4_wsi_Es_mBurstPrecise_w$whas = CAN_FIRE_RL_mBurstPConnect_1 ;
  assign appW4_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign appW2_wsiM_extStatusW$wget =
	     { appW2_wsiM_pMesgCount,
	       appW2_wsiM_iMesgCount,
	       appW2_wsiM_tBusyCount } ;
  assign appW2_wsiS_extStatusW$wget =
	     { appW2_wsiS_pMesgCount,
	       appW2_wsiS_iMesgCount,
	       appW2_wsiS_tBusyCount } ;
  assign appW3_wsiS_extStatusW$wget =
	     { appW3_wsiS_pMesgCount,
	       appW3_wsiS_iMesgCount,
	       appW3_wsiS_tBusyCount } ;
  assign appW3_wsiM_extStatusW$wget =
	     { appW3_wsiM_pMesgCount,
	       appW3_wsiM_iMesgCount,
	       appW3_wsiM_tBusyCount } ;
  assign appW4_wsiM_extStatusW$wget =
	     { appW4_wsiM_pMesgCount,
	       appW4_wsiM_iMesgCount,
	       appW4_wsiM_tBusyCount } ;
  assign appW4_wsiS_extStatusW$wget =
	     { appW4_wsiS_pMesgCount,
	       appW4_wsiS_iMesgCount,
	       appW4_wsiS_tBusyCount } ;

  // register appW2_abortCount
  assign appW2_abortCount$D_IN = appW2_abortCount + 32'd1 ;
  assign appW2_abortCount$EN = CAN_FIRE_RL_appW2_wmwt_doAbort ;

  // register appW2_doAbort
  assign appW2_doAbort$D_IN = 1'd0 ;
  assign appW2_doAbort$EN = CAN_FIRE_RL_appW2_wmwt_doAbort ;

  // register appW2_endOfMessage
  assign appW2_endOfMessage$D_IN = MUX_appW2_endOfMessage$write_1__SEL_1 ;
  assign appW2_endOfMessage$EN =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW2_wmwt_messageFinalize ;

  // register appW2_errCount
  assign appW2_errCount$D_IN = appW2_errCount + 32'd1 ;
  assign appW2_errCount$EN =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[43:12] != appW2_valExpect &&
	     (!appW2_wsiS_reqFifo$D_OUT[57] ||
	      appW2_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register appW2_fabRespCredit_value
  assign appW2_fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_appW2_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_appW2_fabRespCredit_value$write_1__VAL_2 ;
  assign appW2_fabRespCredit_value$EN = 1'b1 ;

  // register appW2_fabWordsCurReq
  assign appW2_fabWordsCurReq$D_IN =
	     (appW2_fabWordsRemain <= b__h17989) ?
	       appW2_fabWordsRemain :
	       b__h17989 ;
  assign appW2_fabWordsCurReq$EN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyPreRequest ;

  // register appW2_fabWordsRemain
  assign appW2_fabWordsRemain$D_IN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ?
	       MUX_appW2_fabWordsRemain$write_1__VAL_1 :
	       MUX_appW2_fabWordsRemain$write_1__VAL_2 ;
  assign appW2_fabWordsRemain$EN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest ;

  // register appW2_firstMsgReq
  assign appW2_firstMsgReq$D_IN = 1'b0 ;
  assign appW2_firstMsgReq$EN = 1'b0 ;

  // register appW2_impreciseBurst
  assign appW2_impreciseBurst$D_IN =
	     !WILL_FIRE_RL_appW2_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_appW2_wmwt_doAbort ;
  assign appW2_impreciseBurst$EN =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     !appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW2_wmwt_doAbort ;

  // register appW2_lastMesg
  assign appW2_lastMesg$D_IN =
	     (MUX_appW2_endOfMessage$write_1__SEL_1 ||
	      MUX_appW2_lastMesg$write_1__SEL_2) ?
	       appW2_thisMesg :
	       32'hFEFEFFFE ;
  assign appW2_lastMesg$EN =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW2_wci_ctrl_IsO ;

  // register appW2_mesgCount
  always@(MUX_appW2_mesgCount$write_1__SEL_1 or
	  MUX_appW2_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wmwt_messageFinalize or
	  WILL_FIRE_RL_appW2_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_mesgCount$write_1__SEL_1:
	  appW2_mesgCount$D_IN = MUX_appW2_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wmwt_messageFinalize:
	  appW2_mesgCount$D_IN = MUX_appW2_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wci_ctrl_IsO: appW2_mesgCount$D_IN = 32'd0;
      default: appW2_mesgCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_mesgCount$EN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse &&
	     appW2_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW2_wci_ctrl_IsO ;

  // register appW2_mesgLength
  always@(WILL_FIRE_RL_appW2_wmwt_messageFinalize or
	  WILL_FIRE_RL_appW2_wmwt_doAbort or
	  MUX_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_appW2_mesgLength$write_1__VAL_3 or
	  MUX_appW2_mesgLength$write_1__SEL_4 or
	  MUX_appW2_mesgLength$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
    WILL_FIRE_RL_appW2_wmwt_doAbort:
	appW2_mesgLength$D_IN = 15'd10922;
    MUX_appW2_endOfMessage$write_1__SEL_1:
	appW2_mesgLength$D_IN = MUX_appW2_mesgLength$write_1__VAL_3;
    MUX_appW2_mesgLength$write_1__SEL_4:
	appW2_mesgLength$D_IN = MUX_appW2_mesgLength$write_1__VAL_4;
    default: appW2_mesgLength$D_IN =
		 15'b010101010101010 /* unspecified value */ ;
  endcase
  assign appW2_mesgLength$EN =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW2_wmwt_doAbort ;

  // register appW2_mesgLengthSoFar
  assign appW2_mesgLengthSoFar$D_IN =
	     MUX_appW2_impreciseBurst$write_1__SEL_3 ? 14'd0 : mlp1__h20289 ;
  assign appW2_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     !appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise ;

  // register appW2_mesgPreRequest
  assign appW2_mesgPreRequest$D_IN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyPreRequest ;
  assign appW2_mesgPreRequest$EN = 1'd1 ;

  // register appW2_mesgReqAddr
  assign appW2_mesgReqAddr$D_IN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_appW2_mesgReqAddr$write_1__VAL_2 ;
  assign appW2_mesgReqAddr$EN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ;

  // register appW2_mesgReqOK
  assign appW2_mesgReqOK$D_IN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ;
  assign appW2_mesgReqOK$EN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyPreRequest ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse ;

  // register appW2_mesgReqValid
  assign appW2_mesgReqValid$D_IN = !WILL_FIRE_RL_appW2_wmwt_messageFinalize ;
  assign appW2_mesgReqValid$EN =
	     WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ;

  // register appW2_opcode
  assign appW2_opcode$D_IN =
	     (WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
	      WILL_FIRE_RL_appW2_wmwt_doAbort) ?
	       9'd170 :
	       MUX_appW2_opcode$write_1__VAL_3 ;
  assign appW2_opcode$EN =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin ||
	     WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW2_wmwt_doAbort ;

  // register appW2_preciseBurst
  assign appW2_preciseBurst$D_IN =
	     !WILL_FIRE_RL_appW2_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_appW2_wmwt_doAbort ;
  assign appW2_preciseBurst$EN =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW2_wmwt_doAbort ;

  // register appW2_readyToPush
  assign appW2_readyToPush$D_IN =
	     !WILL_FIRE_RL_appW2_wmwt_doAbort &&
	     !MUX_appW2_endOfMessage$write_1__SEL_1 ;
  assign appW2_readyToPush$EN =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     !appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW2_wmwt_doAbort ;

  // register appW2_readyToRequest
  assign appW2_readyToRequest$D_IN = MUX_appW2_mesgLength$write_1__SEL_4 ;
  assign appW2_readyToRequest$EN =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ;

  // register appW2_respF_rCache
  assign appW2_respF_rCache$D_IN =
	     { 1'd1,
	       appW2_respF_rWrPtr,
	       IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2855,
	       appW2_respF_pwEnqueue$whas && appW2_respF_wDataIn$wget[57],
	       appW2_respF_pwEnqueue$whas && appW2_respF_wDataIn$wget[56],
	       IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2867 } ;
  assign appW2_respF_rCache$EN = appW2_respF_pwEnqueue$whas ;

  // register appW2_respF_rRdPtr
  assign appW2_respF_rRdPtr$D_IN = x__h16155 ;
  assign appW2_respF_rRdPtr$EN = CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi ;

  // register appW2_respF_rWrPtr
  assign appW2_respF_rWrPtr$D_IN = appW2_respF_rWrPtr + 12'd1 ;
  assign appW2_respF_rWrPtr$EN = appW2_respF_pwEnqueue$whas ;

  // register appW2_smaCtrl
  assign appW2_smaCtrl$D_IN = appW2_wci_reqF$D_OUT[31:0] ;
  assign appW2_smaCtrl$EN =
	     WILL_FIRE_RL_appW2_wci_cfwr &&
	     appW2_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register appW2_thisMesg
  always@(MUX_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_appW2_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wmrd_mesgBegin or
	  MUX_appW2_thisMesg$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmwt_requestPrecise or
	  WILL_FIRE_RL_appW2_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_endOfMessage$write_1__SEL_1:
	  appW2_thisMesg$D_IN = MUX_appW2_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wmrd_mesgBegin:
	  appW2_thisMesg$D_IN = MUX_appW2_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wmwt_requestPrecise:
	  appW2_thisMesg$D_IN = MUX_appW2_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wci_ctrl_IsO: appW2_thisMesg$D_IN = 32'hFEFEFFFE;
      default: appW2_thisMesg$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_thisMesg$EN =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW2_wci_ctrl_IsO ;

  // register appW2_unrollCnt
  assign appW2_unrollCnt$D_IN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ?
	       MUX_appW2_unrollCnt$write_1__VAL_1 :
	       MUX_appW2_unrollCnt$write_1__VAL_2 ;
  assign appW2_unrollCnt$EN =
	     WILL_FIRE_RL_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW2_wmrd_mesgBodyResponse ;

  // register appW2_valExpect
  assign appW2_valExpect$D_IN = appW2_valExpect + 32'd1 ;
  assign appW2_valExpect$EN =
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise &&
	     (!appW2_wsiS_reqFifo$D_OUT[57] ||
	      appW2_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register appW2_wci_cEdge
  assign appW2_wci_cEdge$D_IN = appW2_wci_reqF$D_OUT[36:34] ;
  assign appW2_wci_cEdge$EN = WILL_FIRE_RL_appW2_wci_ctl_op_start ;

  // register appW2_wci_cState
  assign appW2_wci_cState$D_IN = appW2_wci_nState ;
  assign appW2_wci_cState$EN =
	     WILL_FIRE_RL_appW2_wci_ctl_op_complete &&
	     !appW2_wci_illegalEdge ;

  // register appW2_wci_ctlAckReg
  assign appW2_wci_ctlAckReg$D_IN = appW2_wci_ctlAckReg_1$whas ;
  assign appW2_wci_ctlAckReg$EN = 1'd1 ;

  // register appW2_wci_ctlOpActive
  assign appW2_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_appW2_wci_ctl_op_complete ;
  assign appW2_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_appW2_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW2_wci_ctl_op_start ;

  // register appW2_wci_illegalEdge
  assign appW2_wci_illegalEdge$D_IN =
	     !MUX_appW2_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_appW2_wci_illegalEdge$write_1__VAL_2 ;
  assign appW2_wci_illegalEdge$EN =
	     WILL_FIRE_RL_appW2_wci_ctl_op_complete &&
	     appW2_wci_illegalEdge ||
	     MUX_appW2_wci_illegalEdge$write_1__SEL_2 ;

  // register appW2_wci_nState
  always@(appW2_wci_reqF$D_OUT)
  begin
    case (appW2_wci_reqF$D_OUT[36:34])
      3'd0: appW2_wci_nState$D_IN = 3'd1;
      3'd1: appW2_wci_nState$D_IN = 3'd2;
      3'd2: appW2_wci_nState$D_IN = 3'd3;
      default: appW2_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign appW2_wci_nState$EN =
	     WILL_FIRE_RL_appW2_wci_ctl_op_start &&
	     (appW2_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW2_wci_cState == 3'd0 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (appW2_wci_cState == 3'd1 || appW2_wci_cState == 3'd3) ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW2_wci_cState == 3'd2 ||
	      appW2_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (appW2_wci_cState == 3'd3 || appW2_wci_cState == 3'd2 ||
	       appW2_wci_cState == 3'd1)) ;

  // register appW2_wci_reqF_countReg
  assign appW2_wci_reqF_countReg$D_IN =
	     (appW2_wci_wciReq$wget[59:57] != 3'd0) ?
	       appW2_wci_reqF_countReg + 2'd1 :
	       appW2_wci_reqF_countReg - 2'd1 ;
  assign appW2_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_appW2_wci_reqF__updateLevelCounter ;

  // register appW2_wci_respF_c_r
  assign appW2_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_appW2_wci_respF_incCtr ?
	       MUX_appW2_wci_respF_c_r$write_1__VAL_1 :
	       MUX_appW2_wci_respF_c_r$write_1__VAL_2 ;
  assign appW2_wci_respF_c_r$EN =
	     WILL_FIRE_RL_appW2_wci_respF_incCtr ||
	     WILL_FIRE_RL_appW2_wci_respF_decCtr ;

  // register appW2_wci_respF_q_0
  always@(MUX_appW2_wci_respF_q_0$write_1__SEL_1 or
	  MUX_appW2_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wci_respF_both or
	  MUX_appW2_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wci_respF_decCtr or appW2_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wci_respF_q_0$write_1__SEL_1:
	  appW2_wci_respF_q_0$D_IN = MUX_appW2_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wci_respF_both:
	  appW2_wci_respF_q_0$D_IN = MUX_appW2_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wci_respF_decCtr:
	  appW2_wci_respF_q_0$D_IN = appW2_wci_respF_q_1;
      default: appW2_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wci_respF_q_0$EN =
	     WILL_FIRE_RL_appW2_wci_respF_incCtr &&
	     appW2_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW2_wci_respF_both ||
	     WILL_FIRE_RL_appW2_wci_respF_decCtr ;

  // register appW2_wci_respF_q_1
  always@(MUX_appW2_wci_respF_q_1$write_1__SEL_1 or
	  MUX_appW2_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wci_respF_both or
	  MUX_appW2_wci_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wci_respF_q_1$write_1__SEL_1:
	  appW2_wci_respF_q_1$D_IN = MUX_appW2_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wci_respF_both:
	  appW2_wci_respF_q_1$D_IN = MUX_appW2_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wci_respF_decCtr:
	  appW2_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: appW2_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wci_respF_q_1$EN =
	     WILL_FIRE_RL_appW2_wci_respF_incCtr &&
	     appW2_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW2_wci_respF_both ||
	     WILL_FIRE_RL_appW2_wci_respF_decCtr ;

  // register appW2_wci_sFlagReg
  assign appW2_wci_sFlagReg$D_IN = 1'b0 ;
  assign appW2_wci_sFlagReg$EN = 1'd1 ;

  // register appW2_wci_sThreadBusy_d
  assign appW2_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign appW2_wci_sThreadBusy_d$EN = 1'd1 ;

  // register appW2_wmi_busyWithMessage
  assign appW2_wmi_busyWithMessage$D_IN = 1'b0 ;
  assign appW2_wmi_busyWithMessage$EN = 1'b0 ;

  // register appW2_wmi_dhF_c_r
  assign appW2_wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_appW2_wmi_dhF_incCtr ?
	       MUX_appW2_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_appW2_wmi_dhF_c_r$write_1__VAL_2 ;
  assign appW2_wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_appW2_wmi_dhF_incCtr ||
	     WILL_FIRE_RL_appW2_wmi_dhF_decCtr ;

  // register appW2_wmi_dhF_q_0
  always@(MUX_appW2_wmi_dhF_q_0$write_1__SEL_1 or
	  MUX_appW2_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wmi_dhF_both or
	  MUX_appW2_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmi_dhF_decCtr or appW2_wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wmi_dhF_q_0$write_1__SEL_1:
	  appW2_wmi_dhF_q_0$D_IN = MUX_appW2_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wmi_dhF_both:
	  appW2_wmi_dhF_q_0$D_IN = MUX_appW2_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wmi_dhF_decCtr:
	  appW2_wmi_dhF_q_0$D_IN = appW2_wmi_dhF_q_1;
      default: appW2_wmi_dhF_q_0$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_appW2_wmi_dhF_incCtr && appW2_wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW2_wmi_dhF_both ||
	     WILL_FIRE_RL_appW2_wmi_dhF_decCtr ;

  // register appW2_wmi_dhF_q_1
  always@(MUX_appW2_wmi_dhF_q_1$write_1__SEL_1 or
	  MUX_appW2_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wmi_dhF_both or
	  MUX_appW2_wmi_dhF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wmi_dhF_q_1$write_1__SEL_1:
	  appW2_wmi_dhF_q_1$D_IN = MUX_appW2_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wmi_dhF_both:
	  appW2_wmi_dhF_q_1$D_IN = MUX_appW2_wmi_dhF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wmi_dhF_decCtr:
	  appW2_wmi_dhF_q_1$D_IN = 38'h0AAAAAAAAA;
      default: appW2_wmi_dhF_q_1$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_appW2_wmi_dhF_incCtr && appW2_wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW2_wmi_dhF_both ||
	     WILL_FIRE_RL_appW2_wmi_dhF_decCtr ;

  // register appW2_wmi_errorSticky
  assign appW2_wmi_errorSticky$D_IN = 1'd1 ;
  assign appW2_wmi_errorSticky$EN =
	     WILL_FIRE_RL_appW2_wmi_respAdvance && !appW2_wmi_respF$FULL_N ;

  // register appW2_wmi_mFlagF_c_r
  assign appW2_wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr ?
	       MUX_appW2_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_appW2_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign appW2_wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr ;

  // register appW2_wmi_mFlagF_q_0
  always@(MUX_appW2_wmi_mFlagF_q_0$write_1__SEL_1 or
	  value__h6411 or
	  WILL_FIRE_RL_appW2_wmi_mFlagF_both or
	  MUX_appW2_wmi_mFlagF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr or appW2_wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wmi_mFlagF_q_0$write_1__SEL_1:
	  appW2_wmi_mFlagF_q_0$D_IN = value__h6411;
      WILL_FIRE_RL_appW2_wmi_mFlagF_both:
	  appW2_wmi_mFlagF_q_0$D_IN = MUX_appW2_wmi_mFlagF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr:
	  appW2_wmi_mFlagF_q_0$D_IN = appW2_wmi_mFlagF_q_1;
      default: appW2_wmi_mFlagF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr &&
	     appW2_wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW2_wmi_mFlagF_both ||
	     WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr ;

  // register appW2_wmi_mFlagF_q_1
  always@(MUX_appW2_wmi_mFlagF_q_1$write_1__SEL_1 or
	  value__h6411 or
	  WILL_FIRE_RL_appW2_wmi_mFlagF_both or
	  MUX_appW2_wmi_mFlagF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wmi_mFlagF_q_1$write_1__SEL_1:
	  appW2_wmi_mFlagF_q_1$D_IN = value__h6411;
      WILL_FIRE_RL_appW2_wmi_mFlagF_both:
	  appW2_wmi_mFlagF_q_1$D_IN = MUX_appW2_wmi_mFlagF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr: appW2_wmi_mFlagF_q_1$D_IN = 32'd0;
      default: appW2_wmi_mFlagF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_appW2_wmi_mFlagF_incCtr &&
	     appW2_wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW2_wmi_mFlagF_both ||
	     WILL_FIRE_RL_appW2_wmi_mFlagF_decCtr ;

  // register appW2_wmi_operateD
  assign appW2_wmi_operateD$D_IN = CAN_FIRE_RL_appW2_operating_actions ;
  assign appW2_wmi_operateD$EN = 1'd1 ;

  // register appW2_wmi_peerIsReady
  assign appW2_wmi_peerIsReady$D_IN = wmiM0_SReset_n ;
  assign appW2_wmi_peerIsReady$EN = 1'd1 ;

  // register appW2_wmi_reqF_c_r
  assign appW2_wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_appW2_wmi_reqF_incCtr ?
	       MUX_appW2_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_appW2_wmi_reqF_c_r$write_1__VAL_2 ;
  assign appW2_wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_appW2_wmi_reqF_incCtr ||
	     WILL_FIRE_RL_appW2_wmi_reqF_decCtr ;

  // register appW2_wmi_reqF_q_0
  always@(MUX_appW2_wmi_reqF_q_0$write_1__SEL_1 or
	  MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wmi_reqF_both or
	  MUX_appW2_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmi_reqF_decCtr or appW2_wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wmi_reqF_q_0$write_1__SEL_1:
	  appW2_wmi_reqF_q_0$D_IN = MUX_appW2_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wmi_reqF_both:
	  appW2_wmi_reqF_q_0$D_IN = MUX_appW2_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wmi_reqF_decCtr:
	  appW2_wmi_reqF_q_0$D_IN = appW2_wmi_reqF_q_1;
      default: appW2_wmi_reqF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_appW2_wmi_reqF_incCtr &&
	     appW2_wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW2_wmi_reqF_both ||
	     WILL_FIRE_RL_appW2_wmi_reqF_decCtr ;

  // register appW2_wmi_reqF_q_1
  always@(MUX_appW2_wmi_reqF_q_1$write_1__SEL_1 or
	  MUX_appW2_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wmi_reqF_both or
	  MUX_appW2_wmi_reqF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wmi_reqF_q_1$write_1__SEL_1:
	  appW2_wmi_reqF_q_1$D_IN = MUX_appW2_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wmi_reqF_both:
	  appW2_wmi_reqF_q_1$D_IN = MUX_appW2_wmi_reqF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wmi_reqF_decCtr:
	  appW2_wmi_reqF_q_1$D_IN = 32'd178956970;
      default: appW2_wmi_reqF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_appW2_wmi_reqF_incCtr &&
	     appW2_wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW2_wmi_reqF_both ||
	     WILL_FIRE_RL_appW2_wmi_reqF_decCtr ;

  // register appW2_wmi_sDataThreadBusy_d
  assign appW2_wmi_sDataThreadBusy_d$D_IN = wmiM0_SDataThreadBusy ;
  assign appW2_wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register appW2_wmi_sFlagReg
  assign appW2_wmi_sFlagReg$D_IN = wmiM0_SFlag ;
  assign appW2_wmi_sFlagReg$EN = 1'd1 ;

  // register appW2_wmi_sThreadBusy_d
  assign appW2_wmi_sThreadBusy_d$D_IN = wmiM0_SThreadBusy ;
  assign appW2_wmi_sThreadBusy_d$EN = 1'd1 ;

  // register appW2_wmi_statusR
  assign appW2_wmi_statusR$D_IN = 8'h0 ;
  assign appW2_wmi_statusR$EN = 1'b0 ;

  // register appW2_wmi_trafficSticky
  assign appW2_wmi_trafficSticky$D_IN = 1'b0 ;
  assign appW2_wmi_trafficSticky$EN = 1'b0 ;

  // register appW2_wsiM_burstKind
  assign appW2_wsiM_burstKind$D_IN =
	     (appW2_wsiM_burstKind == 2'd0) ?
	       (appW2_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW2_wsiM_burstKind$EN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_deq &&
	     appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (appW2_wsiM_burstKind == 2'd0 ||
	      (appW2_wsiM_burstKind == 2'd1 ||
	       appW2_wsiM_burstKind == 2'd2) &&
	      appW2_wsiM_reqFifo_q_0[57]) ;

  // register appW2_wsiM_errorSticky
  assign appW2_wsiM_errorSticky$D_IN = 1'b0 ;
  assign appW2_wsiM_errorSticky$EN = 1'b0 ;

  // register appW2_wsiM_iMesgCount
  assign appW2_wsiM_iMesgCount$D_IN = appW2_wsiM_iMesgCount + 32'd1 ;
  assign appW2_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_deq &&
	     appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW2_wsiM_burstKind == 2'd2 &&
	     appW2_wsiM_reqFifo_q_0[57] ;

  // register appW2_wsiM_operateD
  assign appW2_wsiM_operateD$D_IN = CAN_FIRE_RL_appW2_operating_actions ;
  assign appW2_wsiM_operateD$EN = 1'd1 ;

  // register appW2_wsiM_pMesgCount
  assign appW2_wsiM_pMesgCount$D_IN = appW2_wsiM_pMesgCount + 32'd1 ;
  assign appW2_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_deq &&
	     appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW2_wsiM_burstKind == 2'd1 &&
	     appW2_wsiM_reqFifo_q_0[57] ;

  // register appW2_wsiM_peerIsReady
  assign appW2_wsiM_peerIsReady$D_IN = CAN_FIRE_RL_sRstConnect ;
  assign appW2_wsiM_peerIsReady$EN = 1'd1 ;

  // register appW2_wsiM_reqFifo_c_r
  assign appW2_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr ?
	       MUX_appW2_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_appW2_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign appW2_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr ;

  // register appW2_wsiM_reqFifo_q_0
  always@(MUX_appW2_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wsiM_reqFifo_both or
	  MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr or appW2_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wsiM_reqFifo_q_0$write_1__SEL_1:
	  appW2_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wsiM_reqFifo_both:
	  appW2_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr:
	  appW2_wsiM_reqFifo_q_0$D_IN = appW2_wsiM_reqFifo_q_1;
      default: appW2_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr &&
	     appW2_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr ;

  // register appW2_wsiM_reqFifo_q_1
  always@(MUX_appW2_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW2_wsiM_reqFifo_both or
	  MUX_appW2_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wsiM_reqFifo_q_1$write_1__SEL_1:
	  appW2_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW2_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW2_wsiM_reqFifo_both:
	  appW2_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW2_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr:
	  appW2_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: appW2_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW2_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_incCtr &&
	     appW2_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_decCtr ;

  // register appW2_wsiM_sThreadBusy_d
  assign appW2_wsiM_sThreadBusy_d$D_IN = CAN_FIRE_RL_stbConnect ;
  assign appW2_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register appW2_wsiM_statusR
  assign appW2_wsiM_statusR$D_IN =
	     { appW2_wsiM_isReset$VAL,
	       !appW2_wsiM_peerIsReady,
	       !appW2_wsiM_operateD,
	       appW2_wsiM_errorSticky,
	       appW2_wsiM_burstKind != 2'd0,
	       appW2_wsiM_sThreadBusy_d,
	       1'd0,
	       appW2_wsiM_trafficSticky } ;
  assign appW2_wsiM_statusR$EN = 1'd1 ;

  // register appW2_wsiM_tBusyCount
  assign appW2_wsiM_tBusyCount$D_IN = appW2_wsiM_tBusyCount + 32'd1 ;
  assign appW2_wsiM_tBusyCount$EN = CAN_FIRE_RL_appW2_wsiM_inc_tBusyCount ;

  // register appW2_wsiM_trafficSticky
  assign appW2_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign appW2_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_appW2_wsiM_reqFifo_deq &&
	     appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register appW2_wsiS_burstKind
  assign appW2_wsiS_burstKind$D_IN =
	     (appW2_wsiS_burstKind == 2'd0) ?
	       (appW2_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW2_wsiS_burstKind$EN =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_enq &&
	     appW2_wsiS_reqFifo_notFull__59_AND_appW2_wsiS__ETC___d381 ;

  // register appW2_wsiS_errorSticky
  assign appW2_wsiS_errorSticky$D_IN = 1'd1 ;
  assign appW2_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_enq &&
	     !appW2_wsiS_reqFifo$FULL_N ;

  // register appW2_wsiS_iMesgCount
  assign appW2_wsiS_iMesgCount$D_IN = appW2_wsiS_iMesgCount + 32'd1 ;
  assign appW2_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_enq &&
	     appW2_wsiS_reqFifo$FULL_N &&
	     appW2_wsiS_burstKind == 2'd2 &&
	     appW2_wsiS_wsiReq$wget[57] ;

  // register appW2_wsiS_mesgWordLength
  assign appW2_wsiS_mesgWordLength$D_IN = appW2_wsiS_wordCount ;
  assign appW2_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_enq &&
	     appW2_wsiS_reqFifo$FULL_N &&
	     appW2_wsiS_wsiReq$wget[57] ;

  // register appW2_wsiS_operateD
  assign appW2_wsiS_operateD$D_IN = CAN_FIRE_RL_appW2_operating_actions ;
  assign appW2_wsiS_operateD$EN = 1'd1 ;

  // register appW2_wsiS_pMesgCount
  assign appW2_wsiS_pMesgCount$D_IN = appW2_wsiS_pMesgCount + 32'd1 ;
  assign appW2_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_enq &&
	     appW2_wsiS_reqFifo$FULL_N &&
	     appW2_wsiS_burstKind == 2'd1 &&
	     appW2_wsiS_wsiReq$wget[57] ;

  // register appW2_wsiS_peerIsReady
  assign appW2_wsiS_peerIsReady$D_IN = wsi_s_adc_MReset_n ;
  assign appW2_wsiS_peerIsReady$EN = 1'd1 ;

  // register appW2_wsiS_reqFifo_countReg
  assign appW2_wsiS_reqFifo_countReg$D_IN =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 ?
	       appW2_wsiS_reqFifo_countReg + 2'd1 :
	       appW2_wsiS_reqFifo_countReg - 2'd1 ;
  assign appW2_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_appW2_wsiS_reqFifo__updateLevelCounter ;

  // register appW2_wsiS_reqFifo_levelsValid
  assign appW2_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_reset ;
  assign appW2_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_enq &&
	     appW2_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_appW2_wsipass_doMessagePush ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_appW2_wsiS_reqFifo_reset ;

  // register appW2_wsiS_statusR
  assign appW2_wsiS_statusR$D_IN =
	     { appW2_wsiS_isReset$VAL,
	       !appW2_wsiS_peerIsReady,
	       !appW2_wsiS_operateD,
	       appW2_wsiS_errorSticky,
	       appW2_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_appW2_wsiS_backpressure ||
	       appW2_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       appW2_wsiS_trafficSticky } ;
  assign appW2_wsiS_statusR$EN = 1'd1 ;

  // register appW2_wsiS_tBusyCount
  assign appW2_wsiS_tBusyCount$D_IN = appW2_wsiS_tBusyCount + 32'd1 ;
  assign appW2_wsiS_tBusyCount$EN = CAN_FIRE_RL_appW2_wsiS_inc_tBusyCount ;

  // register appW2_wsiS_trafficSticky
  assign appW2_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign appW2_wsiS_trafficSticky$EN =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register appW2_wsiS_wordCount
  assign appW2_wsiS_wordCount$D_IN =
	     appW2_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       appW2_wsiS_wordCount + 12'd1 ;
  assign appW2_wsiS_wordCount$EN =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register appW2_wsiWordsRemain
  assign appW2_wsiWordsRemain$D_IN =
	     MUX_appW2_mesgLength$write_1__SEL_4 ?
	       appW2_wsiS_reqFifo$D_OUT[55:44] :
	       MUX_appW2_wsiWordsRemain$write_1__VAL_2 ;
  assign appW2_wsiWordsRemain$EN =
	     WILL_FIRE_RL_appW2_wmwt_mesgBegin &&
	     appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW2_wmwt_messagePushPrecise ;

  // register appW2_zeroLengthMesg
  assign appW2_zeroLengthMesg$D_IN = appW2_wsiS_reqFifo$D_OUT[11:8] == 4'd0 ;
  assign appW2_zeroLengthMesg$EN = MUX_appW2_mesgLength$write_1__SEL_4 ;

  // register appW3_bytesRead
  assign appW3_bytesRead$D_IN = appW3_bytesRead + 32'd4 ;
  assign appW3_bytesRead$EN =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     appW3_bytesRead != 32'hFFFFFFFF ;

  // register appW3_bytesThisMessage
  assign appW3_bytesThisMessage$D_IN = btm__h40844 ;
  assign appW3_bytesThisMessage$EN = MUX_appW3_mesgWtCount$write_1__SEL_1 ;

  // register appW3_bytesWritten
  assign appW3_bytesWritten$D_IN = appW3_bytesWritten + 32'd4 ;
  assign appW3_bytesWritten$EN =
	     WILL_FIRE_RL_appW3_wmwt_mesg_ingress &&
	     appW3_bytesWritten < 32'hFFFFFFFB ;

  // register appW3_cyclesPassed
  assign appW3_cyclesPassed$D_IN = appW3_cyclesPassed + 32'd1 ;
  assign appW3_cyclesPassed$EN =
	     appW3_wsiS_statusR[0] && appW3_cyclesPassed != 32'hFFFFFFFF ;

  // register appW3_dlyCtrl
  assign appW3_dlyCtrl$D_IN = appW3_wci_reqF$D_OUT[31:0] ;
  assign appW3_dlyCtrl$EN =
	     WILL_FIRE_RL_appW3_wci_cfwr &&
	     appW3_wci_reqF$D_OUT[51:32] == 20'h0 ;

  // register appW3_dlyHoldoffBytes
  assign appW3_dlyHoldoffBytes$D_IN = appW3_wci_reqF$D_OUT[31:0] ;
  assign appW3_dlyHoldoffBytes$EN =
	     WILL_FIRE_RL_appW3_wci_cfwr &&
	     appW3_wci_reqF$D_OUT[51:32] == 20'h00004 ;

  // register appW3_dlyHoldoffCycles
  assign appW3_dlyHoldoffCycles$D_IN = appW3_wci_reqF$D_OUT[31:0] ;
  assign appW3_dlyHoldoffCycles$EN =
	     WILL_FIRE_RL_appW3_wci_cfwr &&
	     appW3_wci_reqF$D_OUT[51:32] == 20'h00008 ;

  // register appW3_dlyRAG
  assign appW3_dlyRAG$D_IN =
	     WILL_FIRE_RL_appW3_delay_read_req ?
	       MUX_appW3_dlyRAG$write_1__VAL_1 :
	       23'd0 ;
  assign appW3_dlyRAG$EN =
	     WILL_FIRE_RL_appW3_delay_read_req ||
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ;

  // register appW3_dlyRdOpOther
  assign appW3_dlyRdOpOther$D_IN = appW3_dlyRdOpOther + 32'd1 ;
  assign appW3_dlyRdOpOther$EN =
	     WILL_FIRE_RL_appW3_rdSer_begin && v__h43330[31:24] != 8'd0 ;

  // register appW3_dlyRdOpZero
  assign appW3_dlyRdOpZero$D_IN = appW3_dlyRdOpZero + 32'd1 ;
  assign appW3_dlyRdOpZero$EN =
	     WILL_FIRE_RL_appW3_rdSer_begin && v__h43330[31:24] == 8'd0 ;

  // register appW3_dlyReadCredit_value
  assign appW3_dlyReadCredit_value$D_IN =
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ?
	       8'd12 :
	       MUX_appW3_dlyReadCredit_value$write_1__VAL_2 ;
  assign appW3_dlyReadCredit_value$EN = 1'b1 ;

  // register appW3_dlyReadyToWrite_value
  assign appW3_dlyReadyToWrite_value$D_IN =
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ?
	       16'd0 :
	       MUX_appW3_dlyReadyToWrite_value$write_1__VAL_2 ;
  assign appW3_dlyReadyToWrite_value$EN = 1'b1 ;

  // register appW3_dlyWAG
  assign appW3_dlyWAG$D_IN =
	     WILL_FIRE_RL_appW3_delay_write_req ?
	       MUX_appW3_dlyWAG$write_1__VAL_1 :
	       23'd0 ;
  assign appW3_dlyWAG$EN =
	     WILL_FIRE_RL_appW3_delay_write_req ||
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ;

  // register appW3_dlyWordsStored_value
  assign appW3_dlyWordsStored_value$D_IN =
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ?
	       25'd0 :
	       MUX_appW3_dlyWordsStored_value$write_1__VAL_2 ;
  assign appW3_dlyWordsStored_value$EN = 1'b1 ;

  // register appW3_mesgLengthSoFar
  assign appW3_mesgLengthSoFar$D_IN =
	     appW3_wsiS_reqFifo$D_OUT[57] ?
	       14'd0 :
	       appW3_mesgLengthSoFar_245_PLUS_1___d2720 ;
  assign appW3_mesgLengthSoFar$EN = CAN_FIRE_RL_appW3_wmwt_mesg_ingress ;

  // register appW3_mesgRdCount
  assign appW3_mesgRdCount$D_IN =
	     MUX_appW3_mesgRdCount$write_1__SEL_1 ?
	       MUX_appW3_mesgRdCount$write_1__VAL_1 :
	       32'd0 ;
  assign appW3_mesgRdCount$EN =
	     WILL_FIRE_RL_appW3_wmrd_mesgBodyResponse &&
	     appW3_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ;

  // register appW3_mesgWF_rCache
  assign appW3_mesgWF_rCache$D_IN = { 1'd1, appW3_mesgWF_rWrPtr, x__h38355 } ;
  assign appW3_mesgWF_rCache$EN = CAN_FIRE_RL_appW3_wmwt_mesg_ingress ;

  // register appW3_mesgWF_rRdPtr
  assign appW3_mesgWF_rRdPtr$D_IN = x__h38456 ;
  assign appW3_mesgWF_rRdPtr$EN = CAN_FIRE_RL_appW3_wrtSer_body ;

  // register appW3_mesgWF_rWrPtr
  assign appW3_mesgWF_rWrPtr$D_IN = appW3_mesgWF_rWrPtr + 13'd1 ;
  assign appW3_mesgWF_rWrPtr$EN = CAN_FIRE_RL_appW3_wmwt_mesg_ingress ;

  // register appW3_mesgWtCount
  assign appW3_mesgWtCount$D_IN =
	     MUX_appW3_mesgWtCount$write_1__SEL_1 ?
	       MUX_appW3_mesgWtCount$write_1__VAL_1 :
	       32'd0 ;
  assign appW3_mesgWtCount$EN =
	     WILL_FIRE_RL_appW3_wmwt_mesg_ingress &&
	     appW3_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW3_wci_ctrl_IsO ;

  // register appW3_rdSerAddr
  assign appW3_rdSerAddr$D_IN = 32'h0 ;
  assign appW3_rdSerAddr$EN = 1'b0 ;

  // register appW3_rdSerEmpty
  assign appW3_rdSerEmpty$D_IN = !MUX_appW3_rdSerEmpty$write_1__SEL_1 ;
  assign appW3_rdSerEmpty$EN =
	     (WILL_FIRE_RL_appW3_rdSer_body ||
	      WILL_FIRE_RL_appW3_rdSer_begin) &&
	     (appW3_rdSerEmpty || appW3_rdSerPos == 2'd0) ||
	     WILL_FIRE_RL_appW3_rdSer_sync ;

  // register appW3_rdSerMeta
  assign appW3_rdSerMeta$D_IN = v__h43330 ;
  assign appW3_rdSerMeta$EN = CAN_FIRE_RL_appW3_rdSer_begin ;

  // register appW3_rdSerPos
  assign appW3_rdSerPos$D_IN =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 ?
	       MUX_appW3_rdSerPos$write_1__VAL_1 :
	       2'd0 ;
  assign appW3_rdSerPos$EN =
	     WILL_FIRE_RL_appW3_rdSer_body ||
	     WILL_FIRE_RL_appW3_rdSer_begin ||
	     WILL_FIRE_RL_appW3_rdSer_sync ;

  // register appW3_rdSerStage
  assign appW3_rdSerStage$D_IN = appW3_wide16Fc$D_OUT[31:0] ;
  assign appW3_rdSerStage$EN =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (appW3_rdSerEmpty || appW3_rdSerPos == 2'd0) ;

  // register appW3_rdSerStage_1
  assign appW3_rdSerStage_1$D_IN = appW3_wide16Fc$D_OUT[63:32] ;
  assign appW3_rdSerStage_1$EN =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (appW3_rdSerEmpty || appW3_rdSerPos == 2'd0) ;

  // register appW3_rdSerStage_2
  assign appW3_rdSerStage_2$D_IN = appW3_wide16Fc$D_OUT[95:64] ;
  assign appW3_rdSerStage_2$EN =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (appW3_rdSerEmpty || appW3_rdSerPos == 2'd0) ;

  // register appW3_rdSerStage_3
  assign appW3_rdSerStage_3$D_IN = appW3_wide16Fc$D_OUT[127:96] ;
  assign appW3_rdSerStage_3$EN =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (appW3_rdSerEmpty || appW3_rdSerPos == 2'd0) ;

  // register appW3_rdSerUnroll
  assign appW3_rdSerUnroll$D_IN =
	     WILL_FIRE_RL_appW3_rdSer_begin ?
	       v__h43330[17:2] :
	       MUX_appW3_rdSerUnroll$write_1__VAL_2 ;
  assign appW3_rdSerUnroll$EN =
	     WILL_FIRE_RL_appW3_rdSer_begin || WILL_FIRE_RL_appW3_rdSer_body ;

  // register appW3_rdSyncWord
  always@(WILL_FIRE_RL_appW3_rdSer_begin or
	  MUX_appW3_rdSyncWord$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_rdSer_body or
	  MUX_appW3_rdSyncWord$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_rdSer_sync)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_appW3_rdSer_begin:
	  appW3_rdSyncWord$D_IN = MUX_appW3_rdSyncWord$write_1__VAL_1;
      WILL_FIRE_RL_appW3_rdSer_body:
	  appW3_rdSyncWord$D_IN = MUX_appW3_rdSyncWord$write_1__VAL_2;
      WILL_FIRE_RL_appW3_rdSer_sync: appW3_rdSyncWord$D_IN = 1'd0;
      default: appW3_rdSyncWord$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign appW3_rdSyncWord$EN =
	     WILL_FIRE_RL_appW3_rdSer_begin ||
	     WILL_FIRE_RL_appW3_rdSer_body ||
	     WILL_FIRE_RL_appW3_rdSer_sync ;

  // register appW3_readMeta
  assign appW3_readMeta$D_IN = appW3_metaRF$D_OUT ;
  assign appW3_readMeta$EN = CAN_FIRE_RL_appW3_wmrd_mesgBegin ;

  // register appW3_tog50
  assign appW3_tog50$D_IN = !appW3_tog50 ;
  assign appW3_tog50$EN = CAN_FIRE_RL_appW3_operating_actions ;

  // register appW3_unrollCnt
  assign appW3_unrollCnt$D_IN =
	     WILL_FIRE_RL_appW3_wmrd_mesgBegin ?
	       MUX_appW3_unrollCnt$write_1__VAL_1 :
	       MUX_appW3_unrollCnt$write_1__VAL_2 ;
  assign appW3_unrollCnt$EN =
	     WILL_FIRE_RL_appW3_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW3_wmrd_mesgBodyResponse ;

  // register appW3_wci_cEdge
  assign appW3_wci_cEdge$D_IN = appW3_wci_reqF$D_OUT[36:34] ;
  assign appW3_wci_cEdge$EN = WILL_FIRE_RL_appW3_wci_ctl_op_start ;

  // register appW3_wci_cState
  assign appW3_wci_cState$D_IN = appW3_wci_nState ;
  assign appW3_wci_cState$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete &&
	     !appW3_wci_illegalEdge ;

  // register appW3_wci_ctlAckReg
  assign appW3_wci_ctlAckReg$D_IN = appW3_wci_ctlAckReg_1$whas ;
  assign appW3_wci_ctlAckReg$EN = 1'd1 ;

  // register appW3_wci_ctlOpActive
  assign appW3_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_appW3_wci_ctl_op_complete ;
  assign appW3_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW3_wci_ctl_op_start ;

  // register appW3_wci_illegalEdge
  assign appW3_wci_illegalEdge$D_IN =
	     !MUX_appW3_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_appW3_wci_illegalEdge$write_1__VAL_2 ;
  assign appW3_wci_illegalEdge$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_complete &&
	     appW3_wci_illegalEdge ||
	     MUX_appW3_wci_illegalEdge$write_1__SEL_2 ;

  // register appW3_wci_nState
  always@(appW3_wci_reqF$D_OUT)
  begin
    case (appW3_wci_reqF$D_OUT[36:34])
      3'd0: appW3_wci_nState$D_IN = 3'd1;
      3'd1: appW3_wci_nState$D_IN = 3'd2;
      3'd2: appW3_wci_nState$D_IN = 3'd3;
      default: appW3_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign appW3_wci_nState$EN =
	     WILL_FIRE_RL_appW3_wci_ctl_op_start &&
	     (appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW3_wci_cState == 3'd0 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (appW3_wci_cState == 3'd1 || appW3_wci_cState == 3'd3) ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW3_wci_cState == 3'd2 ||
	      appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (appW3_wci_cState == 3'd3 || appW3_wci_cState == 3'd2 ||
	       appW3_wci_cState == 3'd1)) ;

  // register appW3_wci_reqF_countReg
  assign appW3_wci_reqF_countReg$D_IN =
	     (appW3_wci_wciReq$wget[59:57] != 3'd0) ?
	       appW3_wci_reqF_countReg + 2'd1 :
	       appW3_wci_reqF_countReg - 2'd1 ;
  assign appW3_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_appW3_wci_reqF__updateLevelCounter ;

  // register appW3_wci_respF_c_r
  assign appW3_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr ?
	       MUX_appW3_wci_respF_c_r$write_1__VAL_1 :
	       MUX_appW3_wci_respF_c_r$write_1__VAL_2 ;
  assign appW3_wci_respF_c_r$EN =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr ||
	     WILL_FIRE_RL_appW3_wci_respF_decCtr ;

  // register appW3_wci_respF_q_0
  always@(MUX_appW3_wci_respF_q_0$write_1__SEL_1 or
	  MUX_appW3_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wci_respF_both or
	  MUX_appW3_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wci_respF_decCtr or appW3_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wci_respF_q_0$write_1__SEL_1:
	  appW3_wci_respF_q_0$D_IN = MUX_appW3_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wci_respF_both:
	  appW3_wci_respF_q_0$D_IN = MUX_appW3_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wci_respF_decCtr:
	  appW3_wci_respF_q_0$D_IN = appW3_wci_respF_q_1;
      default: appW3_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wci_respF_q_0$EN =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW3_wci_respF_both ||
	     WILL_FIRE_RL_appW3_wci_respF_decCtr ;

  // register appW3_wci_respF_q_1
  always@(MUX_appW3_wci_respF_q_1$write_1__SEL_1 or
	  MUX_appW3_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wci_respF_both or
	  MUX_appW3_wci_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wci_respF_q_1$write_1__SEL_1:
	  appW3_wci_respF_q_1$D_IN = MUX_appW3_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wci_respF_both:
	  appW3_wci_respF_q_1$D_IN = MUX_appW3_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wci_respF_decCtr:
	  appW3_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: appW3_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wci_respF_q_1$EN =
	     WILL_FIRE_RL_appW3_wci_respF_incCtr &&
	     appW3_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW3_wci_respF_both ||
	     WILL_FIRE_RL_appW3_wci_respF_decCtr ;

  // register appW3_wci_sFlagReg
  assign appW3_wci_sFlagReg$D_IN = 1'b0 ;
  assign appW3_wci_sFlagReg$EN = 1'd1 ;

  // register appW3_wci_sThreadBusy_d
  assign appW3_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign appW3_wci_sThreadBusy_d$EN = 1'd1 ;

  // register appW3_wmemiRdReq
  assign appW3_wmemiRdReq$D_IN = appW3_wmemiRdReq + 32'd1 ;
  assign appW3_wmemiRdReq$EN = WILL_FIRE_RL_appW3_delay_read_req ;

  // register appW3_wmemiRdResp1
  assign appW3_wmemiRdResp1$D_IN = appW3_wmemiRdResp1 + 32'd1 ;
  assign appW3_wmemiRdResp1$EN = CAN_FIRE_RL_appW3_delay_read_resp ;

  // register appW3_wmemiRdResp2
  assign appW3_wmemiRdResp2$D_IN = appW3_wmemiRdResp2 + 32'd1 ;
  assign appW3_wmemiRdResp2$EN = CAN_FIRE_RL_appW3_delay_Fb2Fc ;

  // register appW3_wmemiWrReq
  assign appW3_wmemiWrReq$D_IN = appW3_wmemiWrReq + 32'd1 ;
  assign appW3_wmemiWrReq$EN = CAN_FIRE_RL_appW3_delay_write_req ;

  // register appW3_wmemi_busyWithMessage
  assign appW3_wmemi_busyWithMessage$D_IN = 1'b0 ;
  assign appW3_wmemi_busyWithMessage$EN = 1'b0 ;

  // register appW3_wmemi_dhF_c_r
  assign appW3_wmemi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_appW3_wmemi_dhF_incCtr ?
	       MUX_appW3_wmemi_dhF_c_r$write_1__VAL_1 :
	       MUX_appW3_wmemi_dhF_c_r$write_1__VAL_2 ;
  assign appW3_wmemi_dhF_c_r$EN =
	     WILL_FIRE_RL_appW3_wmemi_dhF_incCtr ||
	     WILL_FIRE_RL_appW3_wmemi_dhF_decCtr ;

  // register appW3_wmemi_dhF_q_0
  always@(MUX_appW3_wmemi_dhF_q_0$write_1__SEL_1 or
	  MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wmemi_dhF_both or
	  MUX_appW3_wmemi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wmemi_dhF_decCtr or appW3_wmemi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wmemi_dhF_q_0$write_1__SEL_1:
	  appW3_wmemi_dhF_q_0$D_IN = MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wmemi_dhF_both:
	  appW3_wmemi_dhF_q_0$D_IN = MUX_appW3_wmemi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wmemi_dhF_decCtr:
	  appW3_wmemi_dhF_q_0$D_IN = appW3_wmemi_dhF_q_1;
      default: appW3_wmemi_dhF_q_0$D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wmemi_dhF_q_0$EN =
	     WILL_FIRE_RL_appW3_wmemi_dhF_incCtr &&
	     appW3_wmemi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW3_wmemi_dhF_both ||
	     WILL_FIRE_RL_appW3_wmemi_dhF_decCtr ;

  // register appW3_wmemi_dhF_q_1
  always@(MUX_appW3_wmemi_dhF_q_1$write_1__SEL_1 or
	  MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wmemi_dhF_both or
	  MUX_appW3_wmemi_dhF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wmemi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wmemi_dhF_q_1$write_1__SEL_1:
	  appW3_wmemi_dhF_q_1$D_IN = MUX_appW3_wmemi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wmemi_dhF_both:
	  appW3_wmemi_dhF_q_1$D_IN = MUX_appW3_wmemi_dhF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wmemi_dhF_decCtr:
	  appW3_wmemi_dhF_q_1$D_IN =
	      146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: appW3_wmemi_dhF_q_1$D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wmemi_dhF_q_1$EN =
	     WILL_FIRE_RL_appW3_wmemi_dhF_incCtr &&
	     appW3_wmemi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW3_wmemi_dhF_both ||
	     WILL_FIRE_RL_appW3_wmemi_dhF_decCtr ;

  // register appW3_wmemi_errorSticky
  assign appW3_wmemi_errorSticky$D_IN = 1'd1 ;
  assign appW3_wmemi_errorSticky$EN =
	     WILL_FIRE_RL_appW3_wmemi_respAdvance &&
	     !appW3_wmemi_respF$FULL_N ;

  // register appW3_wmemi_operateD
  assign appW3_wmemi_operateD$D_IN = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wmemi_operateD$EN = 1'd1 ;

  // register appW3_wmemi_peerIsReady
  assign appW3_wmemi_peerIsReady$D_IN = 1'b1 ;
  assign appW3_wmemi_peerIsReady$EN = 1'd1 ;

  // register appW3_wmemi_reqF_c_r
  assign appW3_wmemi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_appW3_wmemi_reqF_incCtr ?
	       MUX_appW3_wmemi_reqF_c_r$write_1__VAL_1 :
	       MUX_appW3_wmemi_reqF_c_r$write_1__VAL_2 ;
  assign appW3_wmemi_reqF_c_r$EN =
	     WILL_FIRE_RL_appW3_wmemi_reqF_incCtr ||
	     WILL_FIRE_RL_appW3_wmemi_reqF_decCtr ;

  // register appW3_wmemi_reqF_q_0
  always@(MUX_appW3_wmemi_reqF_q_0$write_1__SEL_1 or
	  MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wmemi_reqF_both or
	  MUX_appW3_wmemi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wmemi_reqF_decCtr or appW3_wmemi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wmemi_reqF_q_0$write_1__SEL_1:
	  appW3_wmemi_reqF_q_0$D_IN = MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wmemi_reqF_both:
	  appW3_wmemi_reqF_q_0$D_IN = MUX_appW3_wmemi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wmemi_reqF_decCtr:
	  appW3_wmemi_reqF_q_0$D_IN = appW3_wmemi_reqF_q_1;
      default: appW3_wmemi_reqF_q_0$D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wmemi_reqF_q_0$EN =
	     WILL_FIRE_RL_appW3_wmemi_reqF_incCtr &&
	     appW3_wmemi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW3_wmemi_reqF_both ||
	     WILL_FIRE_RL_appW3_wmemi_reqF_decCtr ;

  // register appW3_wmemi_reqF_q_1
  always@(MUX_appW3_wmemi_reqF_q_1$write_1__SEL_1 or
	  MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wmemi_reqF_both or
	  MUX_appW3_wmemi_reqF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wmemi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wmemi_reqF_q_1$write_1__SEL_1:
	  appW3_wmemi_reqF_q_1$D_IN = MUX_appW3_wmemi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wmemi_reqF_both:
	  appW3_wmemi_reqF_q_1$D_IN = MUX_appW3_wmemi_reqF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wmemi_reqF_decCtr:
	  appW3_wmemi_reqF_q_1$D_IN = 52'h0AAAAAAAAAAAA;
      default: appW3_wmemi_reqF_q_1$D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wmemi_reqF_q_1$EN =
	     WILL_FIRE_RL_appW3_wmemi_reqF_incCtr &&
	     appW3_wmemi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW3_wmemi_reqF_both ||
	     WILL_FIRE_RL_appW3_wmemi_reqF_decCtr ;

  // register appW3_wmemi_statusR
  assign appW3_wmemi_statusR$D_IN =
	     { appW3_wmemi_isReset$VAL,
	       !appW3_wmemi_peerIsReady,
	       !appW3_wmemi_operateD,
	       appW3_wmemi_errorSticky,
	       3'd0,
	       appW3_wmemi_trafficSticky } ;
  assign appW3_wmemi_statusR$EN = 1'd1 ;

  // register appW3_wmemi_trafficSticky
  assign appW3_wmemi_trafficSticky$D_IN = 1'd1 ;
  assign appW3_wmemi_trafficSticky$EN = wmemiM_SCmdAccept ;

  // register appW3_wrtSerAddr
  assign appW3_wrtSerAddr$D_IN = 32'h0 ;
  assign appW3_wrtSerAddr$EN = 1'b0 ;

  // register appW3_wrtSerPos
  assign appW3_wrtSerPos$D_IN =
	     WILL_FIRE_RL_appW3_wrtSer_begin ?
	       MUX_appW3_wrtSerPos$write_1__VAL_1 :
	       MUX_appW3_wrtSerPos$write_1__VAL_2 ;
  assign appW3_wrtSerPos$EN =
	     WILL_FIRE_RL_appW3_wrtSer_begin ||
	     WILL_FIRE_RL_appW3_wrtSer_body ;

  // register appW3_wrtSerStage
  assign appW3_wrtSerStage$D_IN =
	     MUX_appW3_wrtSerStage$write_1__SEL_1 ?
	       data__h41956 :
	       appW3_metaWF$D_OUT ;
  assign appW3_wrtSerStage$EN =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd0 ||
	     WILL_FIRE_RL_appW3_wrtSer_begin && appW3_wrtSerPos == 2'd0 ;

  // register appW3_wrtSerStage_1
  assign appW3_wrtSerStage_1$D_IN =
	     MUX_appW3_wrtSerStage_1$write_1__SEL_1 ?
	       data__h41956 :
	       appW3_metaWF$D_OUT ;
  assign appW3_wrtSerStage_1$EN =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd1 ||
	     WILL_FIRE_RL_appW3_wrtSer_begin && appW3_wrtSerPos == 2'd1 ;

  // register appW3_wrtSerStage_2
  assign appW3_wrtSerStage_2$D_IN =
	     MUX_appW3_wrtSerStage_2$write_1__SEL_1 ?
	       data__h41956 :
	       appW3_metaWF$D_OUT ;
  assign appW3_wrtSerStage_2$EN =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd2 ||
	     WILL_FIRE_RL_appW3_wrtSer_begin && appW3_wrtSerPos == 2'd2 ;

  // register appW3_wrtSerStage_3
  assign appW3_wrtSerStage_3$D_IN =
	     MUX_appW3_wrtSerStage_3$write_1__SEL_1 ?
	       data__h41956 :
	       appW3_metaWF$D_OUT ;
  assign appW3_wrtSerStage_3$EN =
	     WILL_FIRE_RL_appW3_wrtSer_body && appW3_wrtSerPos == 2'd3 ||
	     WILL_FIRE_RL_appW3_wrtSer_begin && appW3_wrtSerPos == 2'd3 ;

  // register appW3_wrtSerUnroll
  assign appW3_wrtSerUnroll$D_IN =
	     WILL_FIRE_RL_appW3_wrtSer_begin ?
	       appW3_metaWF$D_OUT[17:2] :
	       MUX_appW3_wrtSerUnroll$write_1__VAL_2 ;
  assign appW3_wrtSerUnroll$EN =
	     WILL_FIRE_RL_appW3_wrtSer_begin ||
	     WILL_FIRE_RL_appW3_wrtSer_body ;

  // register appW3_wsiM_burstKind
  assign appW3_wsiM_burstKind$D_IN =
	     (appW3_wsiM_burstKind == 2'd0) ?
	       (appW3_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW3_wsiM_burstKind$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (appW3_wsiM_burstKind == 2'd0 ||
	      (appW3_wsiM_burstKind == 2'd1 ||
	       appW3_wsiM_burstKind == 2'd2) &&
	      appW3_wsiM_reqFifo_q_0[57]) ;

  // register appW3_wsiM_errorSticky
  assign appW3_wsiM_errorSticky$D_IN = 1'b0 ;
  assign appW3_wsiM_errorSticky$EN = 1'b0 ;

  // register appW3_wsiM_iMesgCount
  assign appW3_wsiM_iMesgCount$D_IN = appW3_wsiM_iMesgCount + 32'd1 ;
  assign appW3_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW3_wsiM_burstKind == 2'd2 &&
	     appW3_wsiM_reqFifo_q_0[57] ;

  // register appW3_wsiM_operateD
  assign appW3_wsiM_operateD$D_IN = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiM_operateD$EN = 1'd1 ;

  // register appW3_wsiM_pMesgCount
  assign appW3_wsiM_pMesgCount$D_IN = appW3_wsiM_pMesgCount + 32'd1 ;
  assign appW3_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW3_wsiM_burstKind == 2'd1 &&
	     appW3_wsiM_reqFifo_q_0[57] ;

  // register appW3_wsiM_peerIsReady
  assign appW3_wsiM_peerIsReady$D_IN = CAN_FIRE_RL_sRstConnect_1 ;
  assign appW3_wsiM_peerIsReady$EN = 1'd1 ;

  // register appW3_wsiM_reqFifo_c_r
  assign appW3_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr ?
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign appW3_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // register appW3_wsiM_reqFifo_q_0
  always@(MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wsiM_reqFifo_both or
	  MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr or appW3_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wsiM_reqFifo_q_0$write_1__SEL_1:
	  appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wsiM_reqFifo_both:
	  appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr:
	  appW3_wsiM_reqFifo_q_0$D_IN = appW3_wsiM_reqFifo_q_1;
      default: appW3_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // register appW3_wsiM_reqFifo_q_1
  always@(MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW3_wsiM_reqFifo_both or
	  MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW3_wsiM_reqFifo_q_1$write_1__SEL_1:
	  appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW3_wsiM_reqFifo_both:
	  appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW3_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr:
	  appW3_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: appW3_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW3_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_incCtr &&
	     appW3_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_decCtr ;

  // register appW3_wsiM_sThreadBusy_d
  assign appW3_wsiM_sThreadBusy_d$D_IN = CAN_FIRE_RL_stbConnect_1 ;
  assign appW3_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register appW3_wsiM_statusR
  assign appW3_wsiM_statusR$D_IN =
	     { appW3_wsiM_isReset$VAL,
	       !appW3_wsiM_peerIsReady,
	       !appW3_wsiM_operateD,
	       appW3_wsiM_errorSticky,
	       appW3_wsiM_burstKind != 2'd0,
	       appW3_wsiM_sThreadBusy_d,
	       1'd0,
	       appW3_wsiM_trafficSticky } ;
  assign appW3_wsiM_statusR$EN = 1'd1 ;

  // register appW3_wsiM_tBusyCount
  assign appW3_wsiM_tBusyCount$D_IN = appW3_wsiM_tBusyCount + 32'd1 ;
  assign appW3_wsiM_tBusyCount$EN = CAN_FIRE_RL_appW3_wsiM_inc_tBusyCount ;

  // register appW3_wsiM_trafficSticky
  assign appW3_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign appW3_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_appW3_wsiM_reqFifo_deq &&
	     appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register appW3_wsiS_burstKind
  assign appW3_wsiS_burstKind$D_IN =
	     (appW3_wsiS_burstKind == 2'd0) ?
	       (appW3_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW3_wsiS_burstKind$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo_notFull__51_AND_appW3_wsiS__ETC___d973 ;

  // register appW3_wsiS_errorSticky
  assign appW3_wsiS_errorSticky$D_IN = 1'd1 ;
  assign appW3_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     !appW3_wsiS_reqFifo$FULL_N ;

  // register appW3_wsiS_iMesgCount
  assign appW3_wsiS_iMesgCount$D_IN = appW3_wsiS_iMesgCount + 32'd1 ;
  assign appW3_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N &&
	     appW3_wsiS_burstKind == 2'd2 &&
	     appW3_wsiS_wsiReq$wget[57] ;

  // register appW3_wsiS_mesgWordLength
  assign appW3_wsiS_mesgWordLength$D_IN = appW3_wsiS_wordCount ;
  assign appW3_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N &&
	     appW3_wsiS_wsiReq$wget[57] ;

  // register appW3_wsiS_operateD
  assign appW3_wsiS_operateD$D_IN = CAN_FIRE_RL_appW3_operating_actions ;
  assign appW3_wsiS_operateD$EN = 1'd1 ;

  // register appW3_wsiS_pMesgCount
  assign appW3_wsiS_pMesgCount$D_IN = appW3_wsiS_pMesgCount + 32'd1 ;
  assign appW3_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N &&
	     appW3_wsiS_burstKind == 2'd1 &&
	     appW3_wsiS_wsiReq$wget[57] ;

  // register appW3_wsiS_peerIsReady
  assign appW3_wsiS_peerIsReady$D_IN = CAN_FIRE_RL_mRstConnect ;
  assign appW3_wsiS_peerIsReady$EN = 1'd1 ;

  // register appW3_wsiS_reqFifo_countReg
  assign appW3_wsiS_reqFifo_countReg$D_IN =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ?
	       appW3_wsiS_reqFifo_countReg + 2'd1 :
	       appW3_wsiS_reqFifo_countReg - 2'd1 ;
  assign appW3_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_appW3_wsiS_reqFifo__updateLevelCounter ;

  // register appW3_wsiS_reqFifo_levelsValid
  assign appW3_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_reset ;
  assign appW3_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_enq &&
	     appW3_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_appW3_wmwt_mesg_ingress ||
	     WILL_FIRE_RL_appW3_wsipass_doMessagePush ||
	     WILL_FIRE_RL_appW3_wsiS_reqFifo_reset ;

  // register appW3_wsiS_statusR
  assign appW3_wsiS_statusR$D_IN =
	     { appW3_wsiS_isReset$VAL,
	       !appW3_wsiS_peerIsReady,
	       !appW3_wsiS_operateD,
	       appW3_wsiS_errorSticky,
	       appW3_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_appW3_wsiS_backpressure ||
	       appW3_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       appW3_wsiS_trafficSticky } ;
  assign appW3_wsiS_statusR$EN = 1'd1 ;

  // register appW3_wsiS_tBusyCount
  assign appW3_wsiS_tBusyCount$D_IN = appW3_wsiS_tBusyCount + 32'd1 ;
  assign appW3_wsiS_tBusyCount$EN = CAN_FIRE_RL_appW3_wsiS_inc_tBusyCount ;

  // register appW3_wsiS_trafficSticky
  assign appW3_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign appW3_wsiS_trafficSticky$EN =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // register appW3_wsiS_wordCount
  assign appW3_wsiS_wordCount$D_IN =
	     appW3_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       appW3_wsiS_wordCount + 12'd1 ;
  assign appW3_wsiS_wordCount$EN =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // register appW4_abortCount
  assign appW4_abortCount$D_IN = appW4_abortCount + 32'd1 ;
  assign appW4_abortCount$EN = CAN_FIRE_RL_appW4_wmwt_doAbort ;

  // register appW4_doAbort
  assign appW4_doAbort$D_IN = 1'd0 ;
  assign appW4_doAbort$EN = CAN_FIRE_RL_appW4_wmwt_doAbort ;

  // register appW4_endOfMessage
  assign appW4_endOfMessage$D_IN = MUX_appW4_endOfMessage$write_1__SEL_1 ;
  assign appW4_endOfMessage$EN =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW4_wmwt_messageFinalize ;

  // register appW4_errCount
  assign appW4_errCount$D_IN = appW4_errCount + 32'd1 ;
  assign appW4_errCount$EN =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[43:12] != appW4_valExpect &&
	     (!appW4_wsiS_reqFifo$D_OUT[57] ||
	      appW4_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register appW4_fabRespCredit_value
  assign appW4_fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_appW4_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_appW4_fabRespCredit_value$write_1__VAL_2 ;
  assign appW4_fabRespCredit_value$EN = 1'b1 ;

  // register appW4_fabWordsCurReq
  assign appW4_fabWordsCurReq$D_IN =
	     (appW4_fabWordsRemain <= b__h65384) ?
	       appW4_fabWordsRemain :
	       b__h65384 ;
  assign appW4_fabWordsCurReq$EN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyPreRequest ;

  // register appW4_fabWordsRemain
  assign appW4_fabWordsRemain$D_IN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ?
	       MUX_appW4_fabWordsRemain$write_1__VAL_1 :
	       MUX_appW4_fabWordsRemain$write_1__VAL_2 ;
  assign appW4_fabWordsRemain$EN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest ;

  // register appW4_firstMsgReq
  assign appW4_firstMsgReq$D_IN = 1'b0 ;
  assign appW4_firstMsgReq$EN = 1'b0 ;

  // register appW4_impreciseBurst
  assign appW4_impreciseBurst$D_IN =
	     !WILL_FIRE_RL_appW4_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_appW4_wmwt_doAbort ;
  assign appW4_impreciseBurst$EN =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     !appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW4_wmwt_doAbort ;

  // register appW4_lastMesg
  assign appW4_lastMesg$D_IN =
	     (MUX_appW4_endOfMessage$write_1__SEL_1 ||
	      MUX_appW4_lastMesg$write_1__SEL_2) ?
	       appW4_thisMesg :
	       32'hFEFEFFFE ;
  assign appW4_lastMesg$EN =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW4_wci_ctrl_IsO ;

  // register appW4_mesgCount
  always@(MUX_appW4_mesgCount$write_1__SEL_1 or
	  MUX_appW4_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wmwt_messageFinalize or
	  WILL_FIRE_RL_appW4_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_mesgCount$write_1__SEL_1:
	  appW4_mesgCount$D_IN = MUX_appW4_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wmwt_messageFinalize:
	  appW4_mesgCount$D_IN = MUX_appW4_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wci_ctrl_IsO: appW4_mesgCount$D_IN = 32'd0;
      default: appW4_mesgCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_mesgCount$EN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse &&
	     appW4_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW4_wci_ctrl_IsO ;

  // register appW4_mesgLength
  always@(WILL_FIRE_RL_appW4_wmwt_messageFinalize or
	  WILL_FIRE_RL_appW4_wmwt_doAbort or
	  MUX_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_appW4_mesgLength$write_1__VAL_3 or
	  MUX_appW4_mesgLength$write_1__SEL_4 or
	  MUX_appW4_mesgLength$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
    WILL_FIRE_RL_appW4_wmwt_doAbort:
	appW4_mesgLength$D_IN = 15'd10922;
    MUX_appW4_endOfMessage$write_1__SEL_1:
	appW4_mesgLength$D_IN = MUX_appW4_mesgLength$write_1__VAL_3;
    MUX_appW4_mesgLength$write_1__SEL_4:
	appW4_mesgLength$D_IN = MUX_appW4_mesgLength$write_1__VAL_4;
    default: appW4_mesgLength$D_IN =
		 15'b010101010101010 /* unspecified value */ ;
  endcase
  assign appW4_mesgLength$EN =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW4_wmwt_doAbort ;

  // register appW4_mesgLengthSoFar
  assign appW4_mesgLengthSoFar$D_IN =
	     MUX_appW4_impreciseBurst$write_1__SEL_3 ? 14'd0 : mlp1__h67684 ;
  assign appW4_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     !appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise ;

  // register appW4_mesgPreRequest
  assign appW4_mesgPreRequest$D_IN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyPreRequest ;
  assign appW4_mesgPreRequest$EN = 1'd1 ;

  // register appW4_mesgReqAddr
  assign appW4_mesgReqAddr$D_IN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_appW4_mesgReqAddr$write_1__VAL_2 ;
  assign appW4_mesgReqAddr$EN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ;

  // register appW4_mesgReqOK
  assign appW4_mesgReqOK$D_IN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ;
  assign appW4_mesgReqOK$EN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyPreRequest ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse ;

  // register appW4_mesgReqValid
  assign appW4_mesgReqValid$D_IN = !WILL_FIRE_RL_appW4_wmwt_messageFinalize ;
  assign appW4_mesgReqValid$EN =
	     WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ;

  // register appW4_opcode
  assign appW4_opcode$D_IN =
	     (WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
	      WILL_FIRE_RL_appW4_wmwt_doAbort) ?
	       9'd170 :
	       MUX_appW4_opcode$write_1__VAL_3 ;
  assign appW4_opcode$EN =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin ||
	     WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW4_wmwt_doAbort ;

  // register appW4_preciseBurst
  assign appW4_preciseBurst$D_IN =
	     !WILL_FIRE_RL_appW4_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_appW4_wmwt_doAbort ;
  assign appW4_preciseBurst$EN =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_appW4_wmwt_doAbort ;

  // register appW4_readyToPush
  assign appW4_readyToPush$D_IN =
	     !WILL_FIRE_RL_appW4_wmwt_doAbort &&
	     !MUX_appW4_endOfMessage$write_1__SEL_1 ;
  assign appW4_readyToPush$EN =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     !appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW4_wmwt_doAbort ;

  // register appW4_readyToRequest
  assign appW4_readyToRequest$D_IN = MUX_appW4_mesgLength$write_1__SEL_4 ;
  assign appW4_readyToRequest$EN =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ;

  // register appW4_respF_rCache
  assign appW4_respF_rCache$D_IN =
	     { 1'd1,
	       appW4_respF_rWrPtr,
	       IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2858,
	       appW4_respF_pwEnqueue$whas && appW4_respF_wDataIn$wget[57],
	       appW4_respF_pwEnqueue$whas && appW4_respF_wDataIn$wget[56],
	       IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2888 } ;
  assign appW4_respF_rCache$EN = appW4_respF_pwEnqueue$whas ;

  // register appW4_respF_rRdPtr
  assign appW4_respF_rRdPtr$D_IN = x__h63550 ;
  assign appW4_respF_rRdPtr$EN = CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi ;

  // register appW4_respF_rWrPtr
  assign appW4_respF_rWrPtr$D_IN = appW4_respF_rWrPtr + 12'd1 ;
  assign appW4_respF_rWrPtr$EN = appW4_respF_pwEnqueue$whas ;

  // register appW4_smaCtrl
  assign appW4_smaCtrl$D_IN = appW4_wci_reqF$D_OUT[31:0] ;
  assign appW4_smaCtrl$EN =
	     WILL_FIRE_RL_appW4_wci_cfwr &&
	     appW4_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register appW4_thisMesg
  always@(MUX_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_appW4_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wmrd_mesgBegin or
	  MUX_appW4_thisMesg$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmwt_requestPrecise or
	  WILL_FIRE_RL_appW4_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_endOfMessage$write_1__SEL_1:
	  appW4_thisMesg$D_IN = MUX_appW4_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wmrd_mesgBegin:
	  appW4_thisMesg$D_IN = MUX_appW4_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wmwt_requestPrecise:
	  appW4_thisMesg$D_IN = MUX_appW4_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wci_ctrl_IsO: appW4_thisMesg$D_IN = 32'hFEFEFFFE;
      default: appW4_thisMesg$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_thisMesg$EN =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_appW4_wci_ctrl_IsO ;

  // register appW4_unrollCnt
  assign appW4_unrollCnt$D_IN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ?
	       MUX_appW4_unrollCnt$write_1__VAL_1 :
	       MUX_appW4_unrollCnt$write_1__VAL_2 ;
  assign appW4_unrollCnt$EN =
	     WILL_FIRE_RL_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_appW4_wmrd_mesgBodyResponse ;

  // register appW4_valExpect
  assign appW4_valExpect$D_IN = appW4_valExpect + 32'd1 ;
  assign appW4_valExpect$EN =
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise &&
	     (!appW4_wsiS_reqFifo$D_OUT[57] ||
	      appW4_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register appW4_wci_cEdge
  assign appW4_wci_cEdge$D_IN = appW4_wci_reqF$D_OUT[36:34] ;
  assign appW4_wci_cEdge$EN = WILL_FIRE_RL_appW4_wci_ctl_op_start ;

  // register appW4_wci_cState
  assign appW4_wci_cState$D_IN = appW4_wci_nState ;
  assign appW4_wci_cState$EN =
	     WILL_FIRE_RL_appW4_wci_ctl_op_complete &&
	     !appW4_wci_illegalEdge ;

  // register appW4_wci_ctlAckReg
  assign appW4_wci_ctlAckReg$D_IN = appW4_wci_ctlAckReg_1$whas ;
  assign appW4_wci_ctlAckReg$EN = 1'd1 ;

  // register appW4_wci_ctlOpActive
  assign appW4_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_appW4_wci_ctl_op_complete ;
  assign appW4_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_appW4_wci_ctl_op_complete ||
	     WILL_FIRE_RL_appW4_wci_ctl_op_start ;

  // register appW4_wci_illegalEdge
  assign appW4_wci_illegalEdge$D_IN =
	     !MUX_appW4_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_appW4_wci_illegalEdge$write_1__VAL_2 ;
  assign appW4_wci_illegalEdge$EN =
	     WILL_FIRE_RL_appW4_wci_ctl_op_complete &&
	     appW4_wci_illegalEdge ||
	     MUX_appW4_wci_illegalEdge$write_1__SEL_2 ;

  // register appW4_wci_nState
  always@(appW4_wci_reqF$D_OUT)
  begin
    case (appW4_wci_reqF$D_OUT[36:34])
      3'd0: appW4_wci_nState$D_IN = 3'd1;
      3'd1: appW4_wci_nState$D_IN = 3'd2;
      3'd2: appW4_wci_nState$D_IN = 3'd3;
      default: appW4_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign appW4_wci_nState$EN =
	     WILL_FIRE_RL_appW4_wci_ctl_op_start &&
	     (appW4_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      appW4_wci_cState == 3'd0 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (appW4_wci_cState == 3'd1 || appW4_wci_cState == 3'd3) ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      appW4_wci_cState == 3'd2 ||
	      appW4_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (appW4_wci_cState == 3'd3 || appW4_wci_cState == 3'd2 ||
	       appW4_wci_cState == 3'd1)) ;

  // register appW4_wci_reqF_countReg
  assign appW4_wci_reqF_countReg$D_IN =
	     (appW4_wci_wciReq$wget[59:57] != 3'd0) ?
	       appW4_wci_reqF_countReg + 2'd1 :
	       appW4_wci_reqF_countReg - 2'd1 ;
  assign appW4_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_appW4_wci_reqF__updateLevelCounter ;

  // register appW4_wci_respF_c_r
  assign appW4_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_appW4_wci_respF_incCtr ?
	       MUX_appW4_wci_respF_c_r$write_1__VAL_1 :
	       MUX_appW4_wci_respF_c_r$write_1__VAL_2 ;
  assign appW4_wci_respF_c_r$EN =
	     WILL_FIRE_RL_appW4_wci_respF_incCtr ||
	     WILL_FIRE_RL_appW4_wci_respF_decCtr ;

  // register appW4_wci_respF_q_0
  always@(MUX_appW4_wci_respF_q_0$write_1__SEL_1 or
	  MUX_appW4_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wci_respF_both or
	  MUX_appW4_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wci_respF_decCtr or appW4_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wci_respF_q_0$write_1__SEL_1:
	  appW4_wci_respF_q_0$D_IN = MUX_appW4_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wci_respF_both:
	  appW4_wci_respF_q_0$D_IN = MUX_appW4_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wci_respF_decCtr:
	  appW4_wci_respF_q_0$D_IN = appW4_wci_respF_q_1;
      default: appW4_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wci_respF_q_0$EN =
	     WILL_FIRE_RL_appW4_wci_respF_incCtr &&
	     appW4_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW4_wci_respF_both ||
	     WILL_FIRE_RL_appW4_wci_respF_decCtr ;

  // register appW4_wci_respF_q_1
  always@(MUX_appW4_wci_respF_q_1$write_1__SEL_1 or
	  MUX_appW4_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wci_respF_both or
	  MUX_appW4_wci_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wci_respF_q_1$write_1__SEL_1:
	  appW4_wci_respF_q_1$D_IN = MUX_appW4_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wci_respF_both:
	  appW4_wci_respF_q_1$D_IN = MUX_appW4_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wci_respF_decCtr:
	  appW4_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: appW4_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wci_respF_q_1$EN =
	     WILL_FIRE_RL_appW4_wci_respF_incCtr &&
	     appW4_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW4_wci_respF_both ||
	     WILL_FIRE_RL_appW4_wci_respF_decCtr ;

  // register appW4_wci_sFlagReg
  assign appW4_wci_sFlagReg$D_IN = 1'b0 ;
  assign appW4_wci_sFlagReg$EN = 1'd1 ;

  // register appW4_wci_sThreadBusy_d
  assign appW4_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign appW4_wci_sThreadBusy_d$EN = 1'd1 ;

  // register appW4_wmi_busyWithMessage
  assign appW4_wmi_busyWithMessage$D_IN = 1'b0 ;
  assign appW4_wmi_busyWithMessage$EN = 1'b0 ;

  // register appW4_wmi_dhF_c_r
  assign appW4_wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_appW4_wmi_dhF_incCtr ?
	       MUX_appW4_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_appW4_wmi_dhF_c_r$write_1__VAL_2 ;
  assign appW4_wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_appW4_wmi_dhF_incCtr ||
	     WILL_FIRE_RL_appW4_wmi_dhF_decCtr ;

  // register appW4_wmi_dhF_q_0
  always@(MUX_appW4_wmi_dhF_q_0$write_1__SEL_1 or
	  MUX_appW4_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wmi_dhF_both or
	  MUX_appW4_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmi_dhF_decCtr or appW4_wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wmi_dhF_q_0$write_1__SEL_1:
	  appW4_wmi_dhF_q_0$D_IN = MUX_appW4_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wmi_dhF_both:
	  appW4_wmi_dhF_q_0$D_IN = MUX_appW4_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wmi_dhF_decCtr:
	  appW4_wmi_dhF_q_0$D_IN = appW4_wmi_dhF_q_1;
      default: appW4_wmi_dhF_q_0$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_appW4_wmi_dhF_incCtr && appW4_wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW4_wmi_dhF_both ||
	     WILL_FIRE_RL_appW4_wmi_dhF_decCtr ;

  // register appW4_wmi_dhF_q_1
  always@(MUX_appW4_wmi_dhF_q_1$write_1__SEL_1 or
	  MUX_appW4_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wmi_dhF_both or
	  MUX_appW4_wmi_dhF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wmi_dhF_q_1$write_1__SEL_1:
	  appW4_wmi_dhF_q_1$D_IN = MUX_appW4_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wmi_dhF_both:
	  appW4_wmi_dhF_q_1$D_IN = MUX_appW4_wmi_dhF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wmi_dhF_decCtr:
	  appW4_wmi_dhF_q_1$D_IN = 38'h0AAAAAAAAA;
      default: appW4_wmi_dhF_q_1$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_appW4_wmi_dhF_incCtr && appW4_wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW4_wmi_dhF_both ||
	     WILL_FIRE_RL_appW4_wmi_dhF_decCtr ;

  // register appW4_wmi_errorSticky
  assign appW4_wmi_errorSticky$D_IN = 1'd1 ;
  assign appW4_wmi_errorSticky$EN =
	     WILL_FIRE_RL_appW4_wmi_respAdvance && !appW4_wmi_respF$FULL_N ;

  // register appW4_wmi_mFlagF_c_r
  assign appW4_wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr ?
	       MUX_appW4_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_appW4_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign appW4_wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr ;

  // register appW4_wmi_mFlagF_q_0
  always@(MUX_appW4_wmi_mFlagF_q_0$write_1__SEL_1 or
	  value__h53813 or
	  WILL_FIRE_RL_appW4_wmi_mFlagF_both or
	  MUX_appW4_wmi_mFlagF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr or appW4_wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wmi_mFlagF_q_0$write_1__SEL_1:
	  appW4_wmi_mFlagF_q_0$D_IN = value__h53813;
      WILL_FIRE_RL_appW4_wmi_mFlagF_both:
	  appW4_wmi_mFlagF_q_0$D_IN = MUX_appW4_wmi_mFlagF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr:
	  appW4_wmi_mFlagF_q_0$D_IN = appW4_wmi_mFlagF_q_1;
      default: appW4_wmi_mFlagF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr &&
	     appW4_wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW4_wmi_mFlagF_both ||
	     WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr ;

  // register appW4_wmi_mFlagF_q_1
  always@(MUX_appW4_wmi_mFlagF_q_1$write_1__SEL_1 or
	  value__h53813 or
	  WILL_FIRE_RL_appW4_wmi_mFlagF_both or
	  MUX_appW4_wmi_mFlagF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wmi_mFlagF_q_1$write_1__SEL_1:
	  appW4_wmi_mFlagF_q_1$D_IN = value__h53813;
      WILL_FIRE_RL_appW4_wmi_mFlagF_both:
	  appW4_wmi_mFlagF_q_1$D_IN = MUX_appW4_wmi_mFlagF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr: appW4_wmi_mFlagF_q_1$D_IN = 32'd0;
      default: appW4_wmi_mFlagF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_appW4_wmi_mFlagF_incCtr &&
	     appW4_wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW4_wmi_mFlagF_both ||
	     WILL_FIRE_RL_appW4_wmi_mFlagF_decCtr ;

  // register appW4_wmi_operateD
  assign appW4_wmi_operateD$D_IN = CAN_FIRE_RL_appW4_operating_actions ;
  assign appW4_wmi_operateD$EN = 1'd1 ;

  // register appW4_wmi_peerIsReady
  assign appW4_wmi_peerIsReady$D_IN = wmiM1_SReset_n ;
  assign appW4_wmi_peerIsReady$EN = 1'd1 ;

  // register appW4_wmi_reqF_c_r
  assign appW4_wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_appW4_wmi_reqF_incCtr ?
	       MUX_appW4_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_appW4_wmi_reqF_c_r$write_1__VAL_2 ;
  assign appW4_wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_appW4_wmi_reqF_incCtr ||
	     WILL_FIRE_RL_appW4_wmi_reqF_decCtr ;

  // register appW4_wmi_reqF_q_0
  always@(MUX_appW4_wmi_reqF_q_0$write_1__SEL_1 or
	  MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wmi_reqF_both or
	  MUX_appW4_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmi_reqF_decCtr or appW4_wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wmi_reqF_q_0$write_1__SEL_1:
	  appW4_wmi_reqF_q_0$D_IN = MUX_appW4_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wmi_reqF_both:
	  appW4_wmi_reqF_q_0$D_IN = MUX_appW4_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wmi_reqF_decCtr:
	  appW4_wmi_reqF_q_0$D_IN = appW4_wmi_reqF_q_1;
      default: appW4_wmi_reqF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_appW4_wmi_reqF_incCtr &&
	     appW4_wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW4_wmi_reqF_both ||
	     WILL_FIRE_RL_appW4_wmi_reqF_decCtr ;

  // register appW4_wmi_reqF_q_1
  always@(MUX_appW4_wmi_reqF_q_1$write_1__SEL_1 or
	  MUX_appW4_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wmi_reqF_both or
	  MUX_appW4_wmi_reqF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wmi_reqF_q_1$write_1__SEL_1:
	  appW4_wmi_reqF_q_1$D_IN = MUX_appW4_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wmi_reqF_both:
	  appW4_wmi_reqF_q_1$D_IN = MUX_appW4_wmi_reqF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wmi_reqF_decCtr:
	  appW4_wmi_reqF_q_1$D_IN = 32'd178956970;
      default: appW4_wmi_reqF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_appW4_wmi_reqF_incCtr &&
	     appW4_wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW4_wmi_reqF_both ||
	     WILL_FIRE_RL_appW4_wmi_reqF_decCtr ;

  // register appW4_wmi_sDataThreadBusy_d
  assign appW4_wmi_sDataThreadBusy_d$D_IN = wmiM1_SDataThreadBusy ;
  assign appW4_wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register appW4_wmi_sFlagReg
  assign appW4_wmi_sFlagReg$D_IN = wmiM1_SFlag ;
  assign appW4_wmi_sFlagReg$EN = 1'd1 ;

  // register appW4_wmi_sThreadBusy_d
  assign appW4_wmi_sThreadBusy_d$D_IN = wmiM1_SThreadBusy ;
  assign appW4_wmi_sThreadBusy_d$EN = 1'd1 ;

  // register appW4_wmi_statusR
  assign appW4_wmi_statusR$D_IN = 8'h0 ;
  assign appW4_wmi_statusR$EN = 1'b0 ;

  // register appW4_wmi_trafficSticky
  assign appW4_wmi_trafficSticky$D_IN = 1'b0 ;
  assign appW4_wmi_trafficSticky$EN = 1'b0 ;

  // register appW4_wsiM_burstKind
  assign appW4_wsiM_burstKind$D_IN =
	     (appW4_wsiM_burstKind == 2'd0) ?
	       (appW4_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW4_wsiM_burstKind$EN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_deq &&
	     appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (appW4_wsiM_burstKind == 2'd0 ||
	      (appW4_wsiM_burstKind == 2'd1 ||
	       appW4_wsiM_burstKind == 2'd2) &&
	      appW4_wsiM_reqFifo_q_0[57]) ;

  // register appW4_wsiM_errorSticky
  assign appW4_wsiM_errorSticky$D_IN = 1'b0 ;
  assign appW4_wsiM_errorSticky$EN = 1'b0 ;

  // register appW4_wsiM_iMesgCount
  assign appW4_wsiM_iMesgCount$D_IN = appW4_wsiM_iMesgCount + 32'd1 ;
  assign appW4_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_deq &&
	     appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW4_wsiM_burstKind == 2'd2 &&
	     appW4_wsiM_reqFifo_q_0[57] ;

  // register appW4_wsiM_operateD
  assign appW4_wsiM_operateD$D_IN = CAN_FIRE_RL_appW4_operating_actions ;
  assign appW4_wsiM_operateD$EN = 1'd1 ;

  // register appW4_wsiM_pMesgCount
  assign appW4_wsiM_pMesgCount$D_IN = appW4_wsiM_pMesgCount + 32'd1 ;
  assign appW4_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_deq &&
	     appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     appW4_wsiM_burstKind == 2'd1 &&
	     appW4_wsiM_reqFifo_q_0[57] ;

  // register appW4_wsiM_peerIsReady
  assign appW4_wsiM_peerIsReady$D_IN = wsi_m_dac_SReset_n ;
  assign appW4_wsiM_peerIsReady$EN = 1'd1 ;

  // register appW4_wsiM_reqFifo_c_r
  assign appW4_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr ?
	       MUX_appW4_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_appW4_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign appW4_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr ;

  // register appW4_wsiM_reqFifo_q_0
  always@(MUX_appW4_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wsiM_reqFifo_both or
	  MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr or appW4_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wsiM_reqFifo_q_0$write_1__SEL_1:
	  appW4_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wsiM_reqFifo_both:
	  appW4_wsiM_reqFifo_q_0$D_IN =
	      MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr:
	  appW4_wsiM_reqFifo_q_0$D_IN = appW4_wsiM_reqFifo_q_1;
      default: appW4_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr &&
	     appW4_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr ;

  // register appW4_wsiM_reqFifo_q_1
  always@(MUX_appW4_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_appW4_wsiM_reqFifo_both or
	  MUX_appW4_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wsiM_reqFifo_q_1$write_1__SEL_1:
	  appW4_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW4_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_appW4_wsiM_reqFifo_both:
	  appW4_wsiM_reqFifo_q_1$D_IN =
	      MUX_appW4_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr:
	  appW4_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: appW4_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign appW4_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_incCtr &&
	     appW4_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_decCtr ;

  // register appW4_wsiM_sThreadBusy_d
  assign appW4_wsiM_sThreadBusy_d$D_IN = wsi_m_dac_SThreadBusy ;
  assign appW4_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register appW4_wsiM_statusR
  assign appW4_wsiM_statusR$D_IN =
	     { appW4_wsiM_isReset$VAL,
	       !appW4_wsiM_peerIsReady,
	       !appW4_wsiM_operateD,
	       appW4_wsiM_errorSticky,
	       appW4_wsiM_burstKind != 2'd0,
	       appW4_wsiM_sThreadBusy_d,
	       1'd0,
	       appW4_wsiM_trafficSticky } ;
  assign appW4_wsiM_statusR$EN = 1'd1 ;

  // register appW4_wsiM_tBusyCount
  assign appW4_wsiM_tBusyCount$D_IN = appW4_wsiM_tBusyCount + 32'd1 ;
  assign appW4_wsiM_tBusyCount$EN = CAN_FIRE_RL_appW4_wsiM_inc_tBusyCount ;

  // register appW4_wsiM_trafficSticky
  assign appW4_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign appW4_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_appW4_wsiM_reqFifo_deq &&
	     appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register appW4_wsiS_burstKind
  assign appW4_wsiS_burstKind$D_IN =
	     (appW4_wsiS_burstKind == 2'd0) ?
	       (appW4_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign appW4_wsiS_burstKind$EN =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_enq &&
	     appW4_wsiS_reqFifo_notFull__020_AND_appW4_wsiS_ETC___d2042 ;

  // register appW4_wsiS_errorSticky
  assign appW4_wsiS_errorSticky$D_IN = 1'd1 ;
  assign appW4_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_enq &&
	     !appW4_wsiS_reqFifo$FULL_N ;

  // register appW4_wsiS_iMesgCount
  assign appW4_wsiS_iMesgCount$D_IN = appW4_wsiS_iMesgCount + 32'd1 ;
  assign appW4_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_enq &&
	     appW4_wsiS_reqFifo$FULL_N &&
	     appW4_wsiS_burstKind == 2'd2 &&
	     appW4_wsiS_wsiReq$wget[57] ;

  // register appW4_wsiS_mesgWordLength
  assign appW4_wsiS_mesgWordLength$D_IN = appW4_wsiS_wordCount ;
  assign appW4_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_enq &&
	     appW4_wsiS_reqFifo$FULL_N &&
	     appW4_wsiS_wsiReq$wget[57] ;

  // register appW4_wsiS_operateD
  assign appW4_wsiS_operateD$D_IN = CAN_FIRE_RL_appW4_operating_actions ;
  assign appW4_wsiS_operateD$EN = 1'd1 ;

  // register appW4_wsiS_pMesgCount
  assign appW4_wsiS_pMesgCount$D_IN = appW4_wsiS_pMesgCount + 32'd1 ;
  assign appW4_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_enq &&
	     appW4_wsiS_reqFifo$FULL_N &&
	     appW4_wsiS_burstKind == 2'd1 &&
	     appW4_wsiS_wsiReq$wget[57] ;

  // register appW4_wsiS_peerIsReady
  assign appW4_wsiS_peerIsReady$D_IN = CAN_FIRE_RL_mRstConnect_1 ;
  assign appW4_wsiS_peerIsReady$EN = 1'd1 ;

  // register appW4_wsiS_reqFifo_countReg
  assign appW4_wsiS_reqFifo_countReg$D_IN =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ?
	       appW4_wsiS_reqFifo_countReg + 2'd1 :
	       appW4_wsiS_reqFifo_countReg - 2'd1 ;
  assign appW4_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_appW4_wsiS_reqFifo__updateLevelCounter ;

  // register appW4_wsiS_reqFifo_levelsValid
  assign appW4_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_reset ;
  assign appW4_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_enq &&
	     appW4_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_appW4_wsipass_doMessagePush ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_appW4_wsiS_reqFifo_reset ;

  // register appW4_wsiS_statusR
  assign appW4_wsiS_statusR$D_IN =
	     { appW4_wsiS_isReset$VAL,
	       !appW4_wsiS_peerIsReady,
	       !appW4_wsiS_operateD,
	       appW4_wsiS_errorSticky,
	       appW4_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_appW4_wsiS_backpressure ||
	       appW4_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       appW4_wsiS_trafficSticky } ;
  assign appW4_wsiS_statusR$EN = 1'd1 ;

  // register appW4_wsiS_tBusyCount
  assign appW4_wsiS_tBusyCount$D_IN = appW4_wsiS_tBusyCount + 32'd1 ;
  assign appW4_wsiS_tBusyCount$EN = CAN_FIRE_RL_appW4_wsiS_inc_tBusyCount ;

  // register appW4_wsiS_trafficSticky
  assign appW4_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign appW4_wsiS_trafficSticky$EN =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register appW4_wsiS_wordCount
  assign appW4_wsiS_wordCount$D_IN =
	     appW4_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       appW4_wsiS_wordCount + 12'd1 ;
  assign appW4_wsiS_wordCount$EN =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register appW4_wsiWordsRemain
  assign appW4_wsiWordsRemain$D_IN =
	     MUX_appW4_mesgLength$write_1__SEL_4 ?
	       appW4_wsiS_reqFifo$D_OUT[55:44] :
	       MUX_appW4_wsiWordsRemain$write_1__VAL_2 ;
  assign appW4_wsiWordsRemain$EN =
	     WILL_FIRE_RL_appW4_wmwt_mesgBegin &&
	     appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_appW4_wmwt_messagePushPrecise ;

  // register appW4_zeroLengthMesg
  assign appW4_zeroLengthMesg$D_IN = appW4_wsiS_reqFifo$D_OUT[11:8] == 4'd0 ;
  assign appW4_zeroLengthMesg$EN = MUX_appW4_mesgLength$write_1__SEL_4 ;

  // submodule appW2_respF_memory
  assign appW2_respF_memory$ADDRA = appW2_respF_rWrPtr[10:0] ;
  assign appW2_respF_memory$ADDRB =
	     CAN_FIRE_RL_appW2_wmrd_mesgResptoWsi ?
	       x__h16155[10:0] :
	       appW2_respF_rRdPtr[10:0] ;
  assign appW2_respF_memory$DIA =
	     { IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2855,
	       appW2_respF_pwEnqueue$whas && appW2_respF_wDataIn$wget[57],
	       appW2_respF_pwEnqueue$whas && appW2_respF_wDataIn$wget[56],
	       IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2867 } ;
  assign appW2_respF_memory$DIB =
	     61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign appW2_respF_memory$WEA = appW2_respF_pwEnqueue$whas ;
  assign appW2_respF_memory$WEB = 1'd0 ;
  assign appW2_respF_memory$ENA = 1'd1 ;
  assign appW2_respF_memory$ENB = 1'd1 ;

  // submodule appW2_wci_reqF
  assign appW2_wci_reqF$D_IN = appW2_wci_wciReq$wget ;
  assign appW2_wci_reqF$ENQ = CAN_FIRE_RL_appW2_wci_reqF_enq ;
  assign appW2_wci_reqF$DEQ = appW2_wci_reqF_r_deq$whas ;
  assign appW2_wci_reqF$CLR = 1'b0 ;

  // submodule appW2_wmi_respF
  assign appW2_wmi_respF$D_IN = appW2_wmi_wmiResponse$wget ;
  assign appW2_wmi_respF$ENQ =
	     WILL_FIRE_RL_appW2_wmi_respAdvance && appW2_wmi_respF$FULL_N ;
  assign appW2_wmi_respF$DEQ = CAN_FIRE_RL_appW2_wmrd_mesgBodyResponse ;
  assign appW2_wmi_respF$CLR = 1'b0 ;

  // submodule appW2_wsiS_reqFifo
  assign appW2_wsiS_reqFifo$D_IN = appW2_wsiS_wsiReq$wget ;
  assign appW2_wsiS_reqFifo$ENQ =
	     MUX_appW2_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign appW2_wsiS_reqFifo$DEQ = appW2_wsiS_reqFifo_r_deq$whas ;
  assign appW2_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule appW3_mesgRF
  assign appW3_mesgRF$D_IN = v__h43330 ;
  assign appW3_mesgRF$ENQ = CAN_FIRE_RL_appW3_rdSer_body ;
  assign appW3_mesgRF$DEQ = CAN_FIRE_RL_appW3_wmrd_mesgBodyResponse ;
  assign appW3_mesgRF$CLR = 1'b0 ;

  // submodule appW3_mesgWF_memory
  assign appW3_mesgWF_memory$ADDRA = appW3_mesgWF_rWrPtr[11:0] ;
  assign appW3_mesgWF_memory$ADDRB =
	     CAN_FIRE_RL_appW3_wrtSer_body ?
	       x__h38456[11:0] :
	       appW3_mesgWF_rRdPtr[11:0] ;
  assign appW3_mesgWF_memory$DIA = x__h38355 ;
  assign appW3_mesgWF_memory$DIB = 32'hAAAAAAAA /* unspecified value */  ;
  assign appW3_mesgWF_memory$WEA = CAN_FIRE_RL_appW3_wmwt_mesg_ingress ;
  assign appW3_mesgWF_memory$WEB = 1'd0 ;
  assign appW3_mesgWF_memory$ENA = 1'd1 ;
  assign appW3_mesgWF_memory$ENB = 1'd1 ;

  // submodule appW3_metaRF
  assign appW3_metaRF$D_IN = v__h43330 ;
  assign appW3_metaRF$ENQ = CAN_FIRE_RL_appW3_rdSer_begin ;
  assign appW3_metaRF$DEQ = CAN_FIRE_RL_appW3_wmrd_mesgBegin ;
  assign appW3_metaRF$CLR = 1'b0 ;

  // submodule appW3_metaWF
  assign appW3_metaWF$D_IN = { appW3_wsiS_reqFifo$D_OUT[7:0], btm__h40844 } ;
  assign appW3_metaWF$ENQ = MUX_appW3_mesgWtCount$write_1__SEL_1 ;
  assign appW3_metaWF$DEQ = CAN_FIRE_RL_appW3_wrtSer_begin ;
  assign appW3_metaWF$CLR = 1'b0 ;

  // submodule appW3_wci_reqF
  assign appW3_wci_reqF$D_IN = appW3_wci_wciReq$wget ;
  assign appW3_wci_reqF$ENQ = CAN_FIRE_RL_appW3_wci_reqF_enq ;
  assign appW3_wci_reqF$DEQ = appW3_wci_reqF_r_deq$whas ;
  assign appW3_wci_reqF$CLR = 1'b0 ;

  // submodule appW3_wide16Fa
  assign appW3_wide16Fa$D_IN =
	     MUX_appW3_wide16Fa$enq_1__SEL_1 ?
	       MUX_appW3_wide16Fa$enq_1__VAL_1 :
	       MUX_appW3_wide16Fa$enq_1__VAL_2 ;
  assign appW3_wide16Fa$ENQ =
	     WILL_FIRE_RL_appW3_wrtSer_begin &&
	     (appW3_wrtSerPos == 2'd3 || appW3_metaWF$D_OUT[23:0] == 24'd0) ||
	     WILL_FIRE_RL_appW3_wrtSer_body &&
	     (appW3_wrtSerPos == 2'd3 || appW3_wrtSerUnroll == 16'd1) ;
  assign appW3_wide16Fa$DEQ = CAN_FIRE_RL_appW3_delay_write_req ;
  assign appW3_wide16Fa$CLR = 1'b0 ;

  // submodule appW3_wide16Fb
  assign appW3_wide16Fb$D_IN = appW3_wmemi_respF$D_OUT[127:0] ;
  assign appW3_wide16Fb$ENQ = CAN_FIRE_RL_appW3_delay_read_resp ;
  assign appW3_wide16Fb$DEQ = CAN_FIRE_RL_appW3_delay_Fb2Fc ;
  assign appW3_wide16Fb$CLR = 1'b0 ;

  // submodule appW3_wide16Fc
  assign appW3_wide16Fc$D_IN = appW3_wide16Fb$D_OUT ;
  assign appW3_wide16Fc$ENQ = CAN_FIRE_RL_appW3_delay_Fb2Fc ;
  assign appW3_wide16Fc$DEQ =
	     MUX_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (appW3_rdSerEmpty || appW3_rdSerPos == 2'd0) ;
  assign appW3_wide16Fc$CLR = 1'b0 ;

  // submodule appW3_wmemi_respF
  assign appW3_wmemi_respF$D_IN = appW3_wmemi_wmemiResponse$wget ;
  assign appW3_wmemi_respF$ENQ =
	     WILL_FIRE_RL_appW3_wmemi_respAdvance &&
	     appW3_wmemi_respF$FULL_N ;
  assign appW3_wmemi_respF$DEQ = CAN_FIRE_RL_appW3_delay_read_resp ;
  assign appW3_wmemi_respF$CLR = 1'b0 ;

  // submodule appW3_wsiS_reqFifo
  assign appW3_wsiS_reqFifo$D_IN = appW3_wsiS_wsiReq$wget ;
  assign appW3_wsiS_reqFifo$ENQ =
	     MUX_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign appW3_wsiS_reqFifo$DEQ = appW3_wsiS_reqFifo_r_deq$whas ;
  assign appW3_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule appW4_respF_memory
  assign appW4_respF_memory$ADDRA = appW4_respF_rWrPtr[10:0] ;
  assign appW4_respF_memory$ADDRB =
	     CAN_FIRE_RL_appW4_wmrd_mesgResptoWsi ?
	       x__h63550[10:0] :
	       appW4_respF_rRdPtr[10:0] ;
  assign appW4_respF_memory$DIA =
	     { IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2858,
	       appW4_respF_pwEnqueue$whas && appW4_respF_wDataIn$wget[57],
	       appW4_respF_pwEnqueue$whas && appW4_respF_wDataIn$wget[56],
	       IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2888 } ;
  assign appW4_respF_memory$DIB =
	     61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign appW4_respF_memory$WEA = appW4_respF_pwEnqueue$whas ;
  assign appW4_respF_memory$WEB = 1'd0 ;
  assign appW4_respF_memory$ENA = 1'd1 ;
  assign appW4_respF_memory$ENB = 1'd1 ;

  // submodule appW4_wci_reqF
  assign appW4_wci_reqF$D_IN = appW4_wci_wciReq$wget ;
  assign appW4_wci_reqF$ENQ = CAN_FIRE_RL_appW4_wci_reqF_enq ;
  assign appW4_wci_reqF$DEQ = appW4_wci_reqF_r_deq$whas ;
  assign appW4_wci_reqF$CLR = 1'b0 ;

  // submodule appW4_wmi_respF
  assign appW4_wmi_respF$D_IN = appW4_wmi_wmiResponse$wget ;
  assign appW4_wmi_respF$ENQ =
	     WILL_FIRE_RL_appW4_wmi_respAdvance && appW4_wmi_respF$FULL_N ;
  assign appW4_wmi_respF$DEQ = CAN_FIRE_RL_appW4_wmrd_mesgBodyResponse ;
  assign appW4_wmi_respF$CLR = 1'b0 ;

  // submodule appW4_wsiS_reqFifo
  assign appW4_wsiS_reqFifo$D_IN = appW4_wsiS_wsiReq$wget ;
  assign appW4_wsiS_reqFifo$ENQ =
	     MUX_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign appW4_wsiS_reqFifo$DEQ = appW4_wsiS_reqFifo_r_deq$whas ;
  assign appW4_wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2855 =
	     appW2_respF_pwEnqueue$whas ?
	       appW2_respF_wDataIn$wget[60:58] :
	       3'd0 ;
  assign IF_appW2_respF_wDataIn_whas__26_THEN_appW2_res_ETC___d2867 =
	     appW2_respF_pwEnqueue$whas ?
	       appW2_respF_wDataIn$wget[55:0] :
	       56'd0 ;
  assign IF_appW3_wrtSerPos_262_EQ_0_270_OR_appW3_wrtSe_ETC___d1315 =
	     CASE_appW3_wrtSerPos_0b1_0_1_1_1_2_1_3_0b1__q2 &&
	     (appW3_wrtSerPos != 2'd3 && appW3_wrtSerUnroll != 16'd1 ||
	      CASE_appW3_wrtSerPos_NOT_appW3_wrtSerPos_EQ_3__ETC__q1) ;
  assign IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1300 =
	     { (appW3_wrtSerPos == 2'd2) ? 32'h0 : appW3_metaWF$D_OUT,
	       (appW3_wrtSerPos == 2'd2) ?
		 appW3_metaWF$D_OUT :
		 appW3_wrtSerStage_2,
	       appW3_wrtSerStage_1,
	       appW3_wrtSerStage } ;
  assign IF_appW3_wrtSerPos_262_EQ_2_272_THEN_0x0_ELSE__ETC___d1329 =
	     { (appW3_wrtSerPos == 2'd2) ? 32'h0 : data__h41956,
	       (appW3_wrtSerPos == 2'd2) ? data__h41956 : appW3_wrtSerStage_2,
	       appW3_wrtSerStage_1,
	       appW3_wrtSerStage } ;
  assign IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2858 =
	     appW4_respF_pwEnqueue$whas ?
	       appW4_respF_wDataIn$wget[60:58] :
	       3'd0 ;
  assign IF_appW4_respF_wDataIn_whas__087_THEN_appW4_re_ETC___d2888 =
	     appW4_respF_pwEnqueue$whas ?
	       appW4_respF_wDataIn$wget[55:0] :
	       56'd0 ;
  assign NOT_appW2_wmi_reqF_c_r_39_EQ_2_58_59_AND_appW2_ETC___d510 =
	     appW2_wmi_reqF_c_r != 2'd2 && appW2_wmi_operateD &&
	     appW2_wmi_peerIsReady &&
	     (!x__h18160 || appW2_wmi_mFlagF_c_r != 2'd2) ;
  assign NOT_appW3_mesgWF_rRdPtr_176_EQ_appW3_mesgWF_rW_ETC___d1304 =
	     appW3_mesgWF_rRdPtr != appW3_mesgWF_rWrPtr ;
  assign NOT_appW3_mesgWF_rRdPtr_176_PLUS_2048_232_EQ_a_ETC___d1234 =
	     appW3_mesgWF_rRdPtr + 13'd2048 != appW3_mesgWF_rWrPtr ;
  assign NOT_appW3_wrtSerPos_262_EQ_3_263_264_AND_NOT_a_ETC___d1278 =
	     appW3_wrtSerPos != 2'd3 && appW3_metaWF$D_OUT[23:0] != 24'd0 ||
	     CASE_appW3_wrtSerPos_NOT_appW3_wrtSerPos_EQ_3__ETC__q1 ;
  assign NOT_appW4_wmi_reqF_c_r_804_EQ_2_822_823_AND_ap_ETC___d2171 =
	     appW4_wmi_reqF_c_r != 2'd2 && appW4_wmi_operateD &&
	     appW4_wmi_peerIsReady &&
	     (!x__h65555 || appW4_wmi_mFlagF_c_r != 2'd2) ;
  assign addr__h20306 = { appW2_mesgLengthSoFar[11:0], 2'd0 } ;
  assign addr__h42665 = { 9'd0, x__h42723 } ;
  assign addr__h43015 = { 9'd0, x__h43060 } ;
  assign addr__h67701 = { appW4_mesgLengthSoFar[11:0], 2'd0 } ;
  assign appW2_wmi_operateD_25_AND_appW2_wmi_peerIsRead_ETC___d605 =
	     appW2_wmi_operateD && appW2_wmi_peerIsReady &&
	     appW2_wsiS_reqFifo$EMPTY_N &&
	     (appW2_smaCtrl[3:0] != 4'h3 || appW2_wsiM_reqFifo_c_r != 2'd2) ;
  assign appW2_wmi_respF_i_notEmpty__22_AND_appW2_smaCt_ETC___d527 =
	     appW2_wmi_respF$EMPTY_N &&
	     (appW2_smaCtrl[4] ||
	      appW2_respF_rRdPtr + 12'd1024 != appW2_respF_rWrPtr) ;
  assign appW2_wsiS_reqFifo_i_notEmpty__57_AND_NOT_appW_ETC___d624 =
	     appW2_wsiS_reqFifo$EMPTY_N &&
	     (appW2_smaCtrl[3:0] != 4'h3 || appW2_wsiM_reqFifo_c_r != 2'd2) &&
	     (!appW2_wsiS_reqFifo$D_OUT[57] || appW2_wmi_mFlagF_c_r != 2'd2) ;
  assign appW2_wsiS_reqFifo_notFull__59_AND_appW2_wsiS__ETC___d381 =
	     appW2_wsiS_reqFifo$FULL_N &&
	     (appW2_wsiS_burstKind == 2'd0 ||
	      (appW2_wsiS_burstKind == 2'd1 ||
	       appW2_wsiS_burstKind == 2'd2) &&
	      appW2_wsiS_wsiReq$wget[57]) ;
  assign appW3_bytesWritten_258_ULT_appW3_dlyHoldoffByt_ETC___d2846 =
	     appW3_bytesWritten < appW3_dlyHoldoffBytes ;
  assign appW3_cyclesPassed_228_ULT_appW3_dlyHoldoffCyc_ETC___d2844 =
	     appW3_cyclesPassed < appW3_dlyHoldoffCycles ;
  assign appW3_dlyWordsStored_value_189_SLE_0_336_OR_ap_ETC___d1344 =
	     appW3_dlyWordsStored_value_189_SLE_0___d2845 ||
	     appW3_bytesWritten_258_ULT_appW3_dlyHoldoffByt_ETC___d2846 ||
	     appW3_cyclesPassed_228_ULT_appW3_dlyHoldoffCyc_ETC___d2844 ||
	     appW3_wsiM_reqFifo_c_r == 2'd2 ||
	     appW3_tog50 ;
  assign appW3_dlyWordsStored_value_189_SLE_0___d2845 =
	     (appW3_dlyWordsStored_value ^ 25'h1000000) <= 25'd16777216 ;
  assign appW3_dlyWordsStored_value_189_SLT_8388608___d1346 =
	     (appW3_dlyWordsStored_value ^ 25'h1000000) < 25'd25165824 ;
  assign appW3_mesgLengthSoFar_245_PLUS_1___d2720 =
	     appW3_mesgLengthSoFar + 14'd1 ;
  assign appW3_mesgRF_i_notFull__443_AND_NOT_appW3_rdSe_ETC___d1444 =
	     appW3_mesgRF$FULL_N &&
	     (!appW3_rdSerEmpty && appW3_rdSerPos != 2'd0 ||
	      appW3_wide16Fc$EMPTY_N) ;
  assign appW3_metaRF_i_notFull__392_AND_NOT_appW3_rdSe_ETC___d1403 =
	     appW3_metaRF$FULL_N &&
	     (!appW3_rdSerEmpty && appW3_rdSerPos != 2'd0 ||
	      appW3_wide16Fc$EMPTY_N) ;
  assign appW3_wci_cState_47_EQ_2_58_AND_appW3_dlyCtrl__ETC___d1364 =
	     appW3_wci_cState == 3'd2 && appW3_dlyCtrl[3:0] == 4'h7 &&
	     !appW3_dlyWordsStored_value_189_SLE_0___d2845 &&
	     !appW3_bytesWritten_258_ULT_appW3_dlyHoldoffByt_ETC___d2846 &&
	     !appW3_cyclesPassed_228_ULT_appW3_dlyHoldoffCyc_ETC___d2844 ;
  assign appW3_wrtSerPos_262_PLUS_1___d2719 = appW3_wrtSerPos + 2'd1 ;
  assign appW3_wsiS_reqFifo_notFull__51_AND_appW3_wsiS__ETC___d973 =
	     appW3_wsiS_reqFifo$FULL_N &&
	     (appW3_wsiS_burstKind == 2'd0 ||
	      (appW3_wsiS_burstKind == 2'd1 ||
	       appW3_wsiS_burstKind == 2'd2) &&
	      appW3_wsiS_wsiReq$wget[57]) ;
  assign appW4_wmi_operateD_888_AND_appW4_wmi_peerIsRea_ETC___d2266 =
	     appW4_wmi_operateD && appW4_wmi_peerIsReady &&
	     appW4_wsiS_reqFifo$EMPTY_N &&
	     (appW4_smaCtrl[3:0] != 4'h3 || appW4_wsiM_reqFifo_c_r != 2'd2) ;
  assign appW4_wmi_respF_i_notEmpty__183_AND_appW4_smaC_ETC___d2188 =
	     appW4_wmi_respF$EMPTY_N &&
	     (appW4_smaCtrl[4] ||
	      appW4_respF_rRdPtr + 12'd1024 != appW4_respF_rWrPtr) ;
  assign appW4_wsiS_reqFifo_i_notEmpty__118_AND_NOT_app_ETC___d2285 =
	     appW4_wsiS_reqFifo$EMPTY_N &&
	     (appW4_smaCtrl[3:0] != 4'h3 || appW4_wsiM_reqFifo_c_r != 2'd2) &&
	     (!appW4_wsiS_reqFifo$D_OUT[57] || appW4_wmi_mFlagF_c_r != 2'd2) ;
  assign appW4_wsiS_reqFifo_notFull__020_AND_appW4_wsiS_ETC___d2042 =
	     appW4_wsiS_reqFifo$FULL_N &&
	     (appW4_wsiS_burstKind == 2'd0 ||
	      (appW4_wsiS_burstKind == 2'd1 ||
	       appW4_wsiS_burstKind == 2'd2) &&
	      appW4_wsiS_wsiReq$wget[57]) ;
  assign b__h14801 = -appW2_fabWordsCurReq[11:0] ;
  assign b__h17989 =
	     { {2{appW2_fabRespCredit_value[11]}},
	       appW2_fabRespCredit_value } ;
  assign b__h62196 = -appW4_fabWordsCurReq[11:0] ;
  assign b__h65384 =
	     { {2{appW4_fabRespCredit_value[11]}},
	       appW4_fabRespCredit_value } ;
  assign bl__h19562 = appW2_zeroLengthMesg ? 12'd1 : x__h19473[13:2] ;
  assign bl__h66957 = appW4_zeroLengthMesg ? 12'd1 : x__h66868[13:2] ;
  assign btm__h40844 =
	     { appW3_wsiS_reqFifo$D_OUT[56] ?
		 { 10'd0, appW3_wsiS_reqFifo$D_OUT[55:44] } :
		 { 8'd0, appW3_mesgLengthSoFar_245_PLUS_1___d2720 },
	       2'd0 } ;
  assign data__h41956 =
	     (appW3_mesgWF_rCache[45] &&
	      appW3_mesgWF_rCache[44:32] == appW3_mesgWF_rRdPtr) ?
	       appW3_mesgWF_rCache[31:0] :
	       appW3_mesgWF_memory$DOB ;
  assign delayStatus__h45295 =
	     { 14'h0,
	       !appW3_dlyWordsStored_value_189_SLE_0___d2845 &&
	       !appW3_bytesWritten_258_ULT_appW3_dlyHoldoffByt_ETC___d2846 &&
	       !appW3_cyclesPassed_228_ULT_appW3_dlyHoldoffCyc_ETC___d2844,
	       appW3_dlyWordsStored_value_189_SLE_0_336_OR_ap_ETC___d1344,
	       appW3_dlyWordsStored_value_189_SLT_8388608___d1346,
	       appW3_wsiM_reqFifo_c_r != 2'd2,
	       appW3_metaWF$FULL_N,
	       appW3_metaWF$EMPTY_N,
	       NOT_appW3_mesgWF_rRdPtr_176_PLUS_2048_232_EQ_a_ETC___d1234,
	       NOT_appW3_mesgWF_rRdPtr_176_EQ_appW3_mesgWF_rW_ETC___d1304,
	       appW3_metaRF$FULL_N,
	       appW3_metaRF$EMPTY_N,
	       appW3_mesgRF$FULL_N,
	       appW3_mesgRF$EMPTY_N,
	       appW3_wide16Fa$FULL_N,
	       appW3_wide16Fa$EMPTY_N,
	       appW3_wide16Fb$FULL_N,
	       appW3_wide16Fb$EMPTY_N,
	       appW3_wide16Fc$FULL_N,
	       appW3_wide16Fc$EMPTY_N } ;
  assign mesgMetaF_length__h19700 = { 10'd0, x__h19473 } ;
  assign mesgMetaF_length__h20436 = { 10'd0, mlp1B__h20290 } ;
  assign mesgMetaF_length__h67095 = { 10'd0, x__h66868 } ;
  assign mesgMetaF_length__h67831 = { 10'd0, mlp1B__h67685 } ;
  assign mlp1B__h20290 = { mlp1__h20289[11:0], 2'd0 } ;
  assign mlp1B__h67685 = { mlp1__h67684[11:0], 2'd0 } ;
  assign mlp1__h20289 = appW2_mesgLengthSoFar + 14'd1 ;
  assign mlp1__h67684 = appW4_mesgLengthSoFar + 14'd1 ;
  assign rdat__h21771 = hasDebugLogic ? appW2_mesgCount : 32'd0 ;
  assign rdat__h21777 = hasDebugLogic ? appW2_abortCount : 32'd0 ;
  assign rdat__h21783 = hasDebugLogic ? appW2_thisMesg : 32'd0 ;
  assign rdat__h21796 = hasDebugLogic ? appW2_lastMesg : 32'd0 ;
  assign rdat__h21819 = hasDebugLogic ? { 16'd0, x__h21823 } : 32'd0 ;
  assign rdat__h21919 =
	     hasDebugLogic ? appW2_wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h21933 =
	     hasDebugLogic ? appW2_wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h21941 =
	     hasDebugLogic ? appW2_wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h21947 =
	     hasDebugLogic ? appW2_wsiM_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h21961 =
	     hasDebugLogic ? appW2_wsiM_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h21969 =
	     hasDebugLogic ? appW2_wsiM_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h45718 = hasDebugLogic ? appW3_mesgWtCount : 32'd0 ;
  assign rdat__h45724 = hasDebugLogic ? appW3_mesgRdCount : 32'd0 ;
  assign rdat__h45730 = hasDebugLogic ? appW3_bytesWritten : 32'd0 ;
  assign rdat__h45736 = hasDebugLogic ? { 8'd0, x__h45740 } : 32'd0 ;
  assign rdat__h45860 =
	     hasDebugLogic ? appW3_wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h45874 =
	     hasDebugLogic ? appW3_wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h45882 =
	     hasDebugLogic ? appW3_wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h45888 =
	     hasDebugLogic ? appW3_wsiM_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h45902 =
	     hasDebugLogic ? appW3_wsiM_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h45910 =
	     hasDebugLogic ? appW3_wsiM_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h45916 = hasDebugLogic ? appW3_wmemiWrReq : 32'd0 ;
  assign rdat__h45922 = hasDebugLogic ? appW3_wmemiRdReq : 32'd0 ;
  assign rdat__h45928 = hasDebugLogic ? appW3_wmemiRdResp1 : 32'd0 ;
  assign rdat__h45934 =
	     hasDebugLogic ?
	       { {7{appW3_dlyWordsStored_value[24]}},
		 appW3_dlyWordsStored_value } :
	       32'd0 ;
  assign rdat__h45945 =
	     hasDebugLogic ?
	       { {24{appW3_dlyReadCredit_value[7]}},
		 appW3_dlyReadCredit_value } :
	       32'd0 ;
  assign rdat__h45956 = hasDebugLogic ? { 9'd0, appW3_dlyWAG } : 32'd0 ;
  assign rdat__h45967 = hasDebugLogic ? { 9'd0, appW3_dlyRAG } : 32'd0 ;
  assign rdat__h45988 = hasDebugLogic ? appW3_wmemiRdResp2 : 32'd0 ;
  assign rdat__h46043 =
	     { {16{appW3_dlyReadyToWrite_value[15]}},
	       appW3_dlyReadyToWrite_value } ;
  assign rdat__h46052 = { 16'd0, appW3_wrtSerUnroll } ;
  assign rdat__h46061 = { 8'd0, appW3_bytesThisMessage } ;
  assign rdat__h46070 = { 18'd0, appW3_mesgLengthSoFar } ;
  assign rdat__h69166 = hasDebugLogic ? appW4_mesgCount : 32'd0 ;
  assign rdat__h69172 = hasDebugLogic ? appW4_abortCount : 32'd0 ;
  assign rdat__h69178 = hasDebugLogic ? appW4_thisMesg : 32'd0 ;
  assign rdat__h69191 = hasDebugLogic ? appW4_lastMesg : 32'd0 ;
  assign rdat__h69214 = hasDebugLogic ? { 16'd0, x__h69218 } : 32'd0 ;
  assign rdat__h69314 =
	     hasDebugLogic ? appW4_wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h69328 =
	     hasDebugLogic ? appW4_wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h69336 =
	     hasDebugLogic ? appW4_wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h69342 =
	     hasDebugLogic ? appW4_wsiM_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h69356 =
	     hasDebugLogic ? appW4_wsiM_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h69364 =
	     hasDebugLogic ? appW4_wsiM_extStatusW$wget[31:0] : 32'd0 ;
  assign sendData_burstLength__h18449 =
	     (appW2_thisMesg[15:0] == 16'd0 ||
	      appW2_smaCtrl[5] && appW2_unrollCnt == 16'd1) ?
	       12'd1 :
	       (appW2_smaCtrl[5] ? 12'd4095 : wsiBurstLength__h18367[11:0]) ;
  assign sendData_burstLength__h65844 =
	     (appW4_thisMesg[15:0] == 16'd0 ||
	      appW4_smaCtrl[5] && appW4_unrollCnt == 16'd1) ?
	       12'd1 :
	       (appW4_smaCtrl[5] ? 12'd4095 : wsiBurstLength__h65762[11:0]) ;
  assign sendData_byteEn__h18451 =
	     (appW2_thisMesg[15:0] == 16'd0) ? 4'd0 : 4'd15 ;
  assign sendData_byteEn__h65846 =
	     (appW4_thisMesg[15:0] == 16'd0) ? 4'd0 : 4'd15 ;
  assign wsiBurstLength__h18367 =
	     appW2_smaCtrl[5] ? 16'd2 : { 2'd0, appW2_thisMesg[15:2] } ;
  assign wsiBurstLength__h65762 =
	     appW4_smaCtrl[5] ? 16'd2 : { 2'd0, appW4_thisMesg[15:2] } ;
  assign x__h16155 = appW2_respF_rRdPtr + 12'd1 ;
  assign x__h18160 = appW2_fabWordsRemain == appW2_fabWordsCurReq ;
  assign x__h19459 = appW2_opcode[8] ? appW2_opcode[7:0] : 8'd0 ;
  assign x__h19473 = appW2_mesgLength[14] ? appW2_mesgLength[13:0] : 14'd0 ;
  assign x__h21823 = { appW2_wsiS_statusR, appW2_wsiM_statusR } ;
  assign x__h38355 =
	     CAN_FIRE_RL_appW3_wmwt_mesg_ingress ?
	       appW3_wsiS_reqFifo$D_OUT[43:12] :
	       32'd0 ;
  assign x__h38456 = appW3_mesgWF_rRdPtr + 13'd1 ;
  assign x__h41591 = { 96'd0, appW3_metaWF$D_OUT } ;
  assign x__h41618 = { 64'd0, appW3_metaWF$D_OUT, appW3_wrtSerStage } ;
  assign x__h42241 = { 96'd0, data__h41956 } ;
  assign x__h42265 = { 64'd0, data__h41956, appW3_wrtSerStage } ;
  assign x__h42723 = { appW3_dlyWAG, 4'h0 } ;
  assign x__h43060 = { appW3_dlyRAG, 4'h0 } ;
  assign x__h45740 =
	     { appW3_wmemi_statusR, appW3_wsiS_statusR, appW3_wsiM_statusR } ;
  assign x__h63550 = appW4_respF_rRdPtr + 12'd1 ;
  assign x__h65555 = appW4_fabWordsRemain == appW4_fabWordsCurReq ;
  assign x__h66854 = appW4_opcode[8] ? appW4_opcode[7:0] : 8'd0 ;
  assign x__h66868 = appW4_mesgLength[14] ? appW4_mesgLength[13:0] : 14'd0 ;
  assign x__h69218 = { appW4_wsiS_statusR, appW4_wsiM_statusR } ;
  assign x_burstLength__h45202 =
	     (appW3_readMeta[23:0] == 24'd0) ? 12'd1 : appW3_readMeta[13:2] ;
  assign x_byteEn__h45203 = (appW3_readMeta[23:0] == 24'd0) ? 4'd0 : 4'd15 ;
  assign x_length__h19455 = { 2'd0, x__h19473 } ;
  assign x_length__h66850 = { 2'd0, x__h66868 } ;
  always@(appW3_rdSerPos or
	  appW3_rdSerStage_3 or
	  appW3_wide16Fc$D_OUT or appW3_rdSerStage_1 or appW3_rdSerStage_2)
  begin
    case (appW3_rdSerPos)
      2'd0: v__h43330 = appW3_wide16Fc$D_OUT[31:0];
      2'd1: v__h43330 = appW3_rdSerStage_1;
      2'd2: v__h43330 = appW3_rdSerStage_2;
      2'd3: v__h43330 = appW3_rdSerStage_3;
    endcase
  end
  always@(appW3_wrtSerPos or appW3_wide16Fa$FULL_N)
  begin
    case (appW3_wrtSerPos)
      2'd0, 2'd1, 2'd2:
	  CASE_appW3_wrtSerPos_NOT_appW3_wrtSerPos_EQ_3__ETC__q1 =
	      appW3_wide16Fa$FULL_N;
      2'd3:
	  CASE_appW3_wrtSerPos_NOT_appW3_wrtSerPos_EQ_3__ETC__q1 =
	      appW3_wrtSerPos != 2'd3 || appW3_wide16Fa$FULL_N;
    endcase
  end
  always@(appW3_wrtSerPos)
  begin
    case (appW3_wrtSerPos)
      2'd0, 2'd1, 2'd2, 2'd3:
	  CASE_appW3_wrtSerPos_0b1_0_1_1_1_2_1_3_0b1__q2 = 1'd1;
    endcase
  end
  always@(MUX_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1 or
	  MUX_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW2_wmwt_requestPrecise or
	  MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1:
	  value__h6411 = 32'hAAAAAAAA /* unspecified value */ ;
      MUX_appW2_endOfMessage$write_1__SEL_1:
	  value__h6411 = MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW2_wmwt_requestPrecise:
	  value__h6411 = MUX_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3;
      default: value__h6411 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1 or
	  MUX_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_appW4_wmwt_requestPrecise or
	  MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1:
	  value__h53813 = 32'hAAAAAAAA /* unspecified value */ ;
      MUX_appW4_endOfMessage$write_1__SEL_1:
	  value__h53813 = MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_appW4_wmwt_requestPrecise:
	  value__h53813 = MUX_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3;
      default: value__h53813 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(appW2_wci_reqF$D_OUT or
	  appW2_smaCtrl or
	  rdat__h21771 or
	  rdat__h21777 or
	  rdat__h21783 or
	  rdat__h21796 or
	  rdat__h21819 or
	  rdat__h21919 or
	  rdat__h21933 or
	  rdat__h21941 or rdat__h21947 or rdat__h21961 or rdat__h21969)
  begin
    case (appW2_wci_reqF$D_OUT[39:32])
      8'h0: x_data__h21722 = appW2_smaCtrl;
      8'h04: x_data__h21722 = rdat__h21771;
      8'h08: x_data__h21722 = rdat__h21777;
      8'h10: x_data__h21722 = rdat__h21783;
      8'h14: x_data__h21722 = rdat__h21796;
      8'h18: x_data__h21722 = rdat__h21819;
      8'h20: x_data__h21722 = rdat__h21919;
      8'h24: x_data__h21722 = rdat__h21933;
      8'h28: x_data__h21722 = rdat__h21941;
      8'h2C: x_data__h21722 = rdat__h21947;
      8'h30: x_data__h21722 = rdat__h21961;
      8'h34: x_data__h21722 = rdat__h21969;
      default: x_data__h21722 = 32'd0;
    endcase
  end
  always@(appW3_wci_reqF$D_OUT or
	  appW3_dlyCtrl or
	  appW3_dlyHoldoffBytes or
	  appW3_dlyHoldoffCycles or
	  rdat__h45718 or
	  rdat__h45724 or
	  rdat__h45730 or
	  rdat__h45736 or
	  rdat__h45860 or
	  rdat__h45874 or
	  rdat__h45882 or
	  rdat__h45888 or
	  rdat__h45902 or
	  rdat__h45910 or
	  rdat__h45916 or
	  rdat__h45922 or
	  rdat__h45928 or
	  rdat__h45934 or
	  rdat__h45945 or
	  rdat__h45956 or
	  rdat__h45967 or
	  appW3_dlyRdOpZero or
	  appW3_dlyRdOpOther or
	  rdat__h45988 or
	  delayStatus__h45295 or
	  rdat__h46043 or rdat__h46052 or rdat__h46061 or rdat__h46070)
  begin
    case (appW3_wci_reqF$D_OUT[51:32])
      20'h0: x_data__h45685 = appW3_dlyCtrl;
      20'h00004: x_data__h45685 = appW3_dlyHoldoffBytes;
      20'h00008: x_data__h45685 = appW3_dlyHoldoffCycles;
      20'h0000C: x_data__h45685 = rdat__h45718;
      20'h00010: x_data__h45685 = rdat__h45724;
      20'h00014: x_data__h45685 = rdat__h45730;
      20'h00018: x_data__h45685 = rdat__h45736;
      20'h0001C: x_data__h45685 = 32'd0;
      20'h00020: x_data__h45685 = rdat__h45860;
      20'h00024: x_data__h45685 = rdat__h45874;
      20'h00028: x_data__h45685 = rdat__h45882;
      20'h0002C: x_data__h45685 = rdat__h45888;
      20'h00030: x_data__h45685 = rdat__h45902;
      20'h00034: x_data__h45685 = rdat__h45910;
      20'h00038: x_data__h45685 = rdat__h45916;
      20'h0003C: x_data__h45685 = rdat__h45922;
      20'h00040: x_data__h45685 = rdat__h45928;
      20'h00044: x_data__h45685 = rdat__h45934;
      20'h00048: x_data__h45685 = rdat__h45945;
      20'h0004C: x_data__h45685 = rdat__h45956;
      20'h00050: x_data__h45685 = rdat__h45967;
      20'h00058: x_data__h45685 = appW3_dlyRdOpZero;
      20'h0005C: x_data__h45685 = appW3_dlyRdOpOther;
      20'h00060: x_data__h45685 = rdat__h45988;
      20'h00064: x_data__h45685 = delayStatus__h45295;
      20'h00068: x_data__h45685 = rdat__h46043;
      20'h0006C: x_data__h45685 = rdat__h46052;
      20'h00070: x_data__h45685 = rdat__h46061;
      20'h00074: x_data__h45685 = rdat__h46070;
      default: x_data__h45685 = 32'd0;
    endcase
  end
  always@(appW4_wci_reqF$D_OUT or
	  appW4_smaCtrl or
	  rdat__h69166 or
	  rdat__h69172 or
	  rdat__h69178 or
	  rdat__h69191 or
	  rdat__h69214 or
	  rdat__h69314 or
	  rdat__h69328 or
	  rdat__h69336 or rdat__h69342 or rdat__h69356 or rdat__h69364)
  begin
    case (appW4_wci_reqF$D_OUT[39:32])
      8'h0: x_data__h69117 = appW4_smaCtrl;
      8'h04: x_data__h69117 = rdat__h69166;
      8'h08: x_data__h69117 = rdat__h69172;
      8'h10: x_data__h69117 = rdat__h69178;
      8'h14: x_data__h69117 = rdat__h69191;
      8'h18: x_data__h69117 = rdat__h69214;
      8'h20: x_data__h69117 = rdat__h69314;
      8'h24: x_data__h69117 = rdat__h69328;
      8'h28: x_data__h69117 = rdat__h69336;
      8'h2C: x_data__h69117 = rdat__h69342;
      8'h30: x_data__h69117 = rdat__h69356;
      8'h34: x_data__h69117 = rdat__h69364;
      default: x_data__h69117 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N_rst_4)
      begin
        appW4_abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW4_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	appW4_firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_impreciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	appW4_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_mesgLength <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	appW4_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	appW4_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_mesgReqValid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	appW4_preciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_respF_rCache <= `BSV_ASSIGNMENT_DELAY 74'h0AAAAAAAAAAAAAAAAAA;
	appW4_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW4_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW4_smaCtrl <= `BSV_ASSIGNMENT_DELAY 32'h00000002;
	appW4_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	appW4_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	appW4_valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	appW4_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW4_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW4_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW4_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW4_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW4_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	appW4_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	appW4_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	appW4_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	appW4_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW4_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW4_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW4_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW4_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW4_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW4_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW4_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	appW4_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW4_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (appW4_abortCount$EN)
	  appW4_abortCount <= `BSV_ASSIGNMENT_DELAY appW4_abortCount$D_IN;
	if (appW4_doAbort$EN)
	  appW4_doAbort <= `BSV_ASSIGNMENT_DELAY appW4_doAbort$D_IN;
	if (appW4_endOfMessage$EN)
	  appW4_endOfMessage <= `BSV_ASSIGNMENT_DELAY appW4_endOfMessage$D_IN;
	if (appW4_errCount$EN)
	  appW4_errCount <= `BSV_ASSIGNMENT_DELAY appW4_errCount$D_IN;
	if (appW4_fabRespCredit_value$EN)
	  appW4_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      appW4_fabRespCredit_value$D_IN;
	if (appW4_fabWordsRemain$EN)
	  appW4_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      appW4_fabWordsRemain$D_IN;
	if (appW4_firstMsgReq$EN)
	  appW4_firstMsgReq <= `BSV_ASSIGNMENT_DELAY appW4_firstMsgReq$D_IN;
	if (appW4_impreciseBurst$EN)
	  appW4_impreciseBurst <= `BSV_ASSIGNMENT_DELAY
	      appW4_impreciseBurst$D_IN;
	if (appW4_lastMesg$EN)
	  appW4_lastMesg <= `BSV_ASSIGNMENT_DELAY appW4_lastMesg$D_IN;
	if (appW4_mesgCount$EN)
	  appW4_mesgCount <= `BSV_ASSIGNMENT_DELAY appW4_mesgCount$D_IN;
	if (appW4_mesgLength$EN)
	  appW4_mesgLength <= `BSV_ASSIGNMENT_DELAY appW4_mesgLength$D_IN;
	if (appW4_mesgLengthSoFar$EN)
	  appW4_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      appW4_mesgLengthSoFar$D_IN;
	if (appW4_mesgPreRequest$EN)
	  appW4_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY
	      appW4_mesgPreRequest$D_IN;
	if (appW4_mesgReqOK$EN)
	  appW4_mesgReqOK <= `BSV_ASSIGNMENT_DELAY appW4_mesgReqOK$D_IN;
	if (appW4_mesgReqValid$EN)
	  appW4_mesgReqValid <= `BSV_ASSIGNMENT_DELAY appW4_mesgReqValid$D_IN;
	if (appW4_opcode$EN)
	  appW4_opcode <= `BSV_ASSIGNMENT_DELAY appW4_opcode$D_IN;
	if (appW4_preciseBurst$EN)
	  appW4_preciseBurst <= `BSV_ASSIGNMENT_DELAY appW4_preciseBurst$D_IN;
	if (appW4_readyToPush$EN)
	  appW4_readyToPush <= `BSV_ASSIGNMENT_DELAY appW4_readyToPush$D_IN;
	if (appW4_readyToRequest$EN)
	  appW4_readyToRequest <= `BSV_ASSIGNMENT_DELAY
	      appW4_readyToRequest$D_IN;
	if (appW4_respF_rCache$EN)
	  appW4_respF_rCache <= `BSV_ASSIGNMENT_DELAY appW4_respF_rCache$D_IN;
	if (appW4_respF_rRdPtr$EN)
	  appW4_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY appW4_respF_rRdPtr$D_IN;
	if (appW4_respF_rWrPtr$EN)
	  appW4_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY appW4_respF_rWrPtr$D_IN;
	if (appW4_smaCtrl$EN)
	  appW4_smaCtrl <= `BSV_ASSIGNMENT_DELAY appW4_smaCtrl$D_IN;
	if (appW4_thisMesg$EN)
	  appW4_thisMesg <= `BSV_ASSIGNMENT_DELAY appW4_thisMesg$D_IN;
	if (appW4_unrollCnt$EN)
	  appW4_unrollCnt <= `BSV_ASSIGNMENT_DELAY appW4_unrollCnt$D_IN;
	if (appW4_valExpect$EN)
	  appW4_valExpect <= `BSV_ASSIGNMENT_DELAY appW4_valExpect$D_IN;
	if (appW4_wci_cEdge$EN)
	  appW4_wci_cEdge <= `BSV_ASSIGNMENT_DELAY appW4_wci_cEdge$D_IN;
	if (appW4_wci_cState$EN)
	  appW4_wci_cState <= `BSV_ASSIGNMENT_DELAY appW4_wci_cState$D_IN;
	if (appW4_wci_ctlAckReg$EN)
	  appW4_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_ctlAckReg$D_IN;
	if (appW4_wci_ctlOpActive$EN)
	  appW4_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_ctlOpActive$D_IN;
	if (appW4_wci_illegalEdge$EN)
	  appW4_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_illegalEdge$D_IN;
	if (appW4_wci_nState$EN)
	  appW4_wci_nState <= `BSV_ASSIGNMENT_DELAY appW4_wci_nState$D_IN;
	if (appW4_wci_reqF_countReg$EN)
	  appW4_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_reqF_countReg$D_IN;
	if (appW4_wci_respF_c_r$EN)
	  appW4_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_respF_c_r$D_IN;
	if (appW4_wci_respF_q_0$EN)
	  appW4_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_respF_q_0$D_IN;
	if (appW4_wci_respF_q_1$EN)
	  appW4_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_respF_q_1$D_IN;
	if (appW4_wci_sFlagReg$EN)
	  appW4_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY appW4_wci_sFlagReg$D_IN;
	if (appW4_wci_sThreadBusy_d$EN)
	  appW4_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW4_wci_sThreadBusy_d$D_IN;
	if (appW4_wmi_busyWithMessage$EN)
	  appW4_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_busyWithMessage$D_IN;
	if (appW4_wmi_dhF_c_r$EN)
	  appW4_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY appW4_wmi_dhF_c_r$D_IN;
	if (appW4_wmi_dhF_q_0$EN)
	  appW4_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY appW4_wmi_dhF_q_0$D_IN;
	if (appW4_wmi_dhF_q_1$EN)
	  appW4_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY appW4_wmi_dhF_q_1$D_IN;
	if (appW4_wmi_errorSticky$EN)
	  appW4_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_errorSticky$D_IN;
	if (appW4_wmi_mFlagF_c_r$EN)
	  appW4_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_mFlagF_c_r$D_IN;
	if (appW4_wmi_mFlagF_q_0$EN)
	  appW4_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_mFlagF_q_0$D_IN;
	if (appW4_wmi_mFlagF_q_1$EN)
	  appW4_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_mFlagF_q_1$D_IN;
	if (appW4_wmi_operateD$EN)
	  appW4_wmi_operateD <= `BSV_ASSIGNMENT_DELAY appW4_wmi_operateD$D_IN;
	if (appW4_wmi_peerIsReady$EN)
	  appW4_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_peerIsReady$D_IN;
	if (appW4_wmi_reqF_c_r$EN)
	  appW4_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY appW4_wmi_reqF_c_r$D_IN;
	if (appW4_wmi_reqF_q_0$EN)
	  appW4_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY appW4_wmi_reqF_q_0$D_IN;
	if (appW4_wmi_reqF_q_1$EN)
	  appW4_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY appW4_wmi_reqF_q_1$D_IN;
	if (appW4_wmi_sDataThreadBusy_d$EN)
	  appW4_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_sDataThreadBusy_d$D_IN;
	if (appW4_wmi_sFlagReg$EN)
	  appW4_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY appW4_wmi_sFlagReg$D_IN;
	if (appW4_wmi_sThreadBusy_d$EN)
	  appW4_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_sThreadBusy_d$D_IN;
	if (appW4_wmi_trafficSticky$EN)
	  appW4_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW4_wmi_trafficSticky$D_IN;
	if (appW4_wsiM_burstKind$EN)
	  appW4_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_burstKind$D_IN;
	if (appW4_wsiM_errorSticky$EN)
	  appW4_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_errorSticky$D_IN;
	if (appW4_wsiM_iMesgCount$EN)
	  appW4_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_iMesgCount$D_IN;
	if (appW4_wsiM_operateD$EN)
	  appW4_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_operateD$D_IN;
	if (appW4_wsiM_pMesgCount$EN)
	  appW4_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_pMesgCount$D_IN;
	if (appW4_wsiM_peerIsReady$EN)
	  appW4_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_peerIsReady$D_IN;
	if (appW4_wsiM_reqFifo_c_r$EN)
	  appW4_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_reqFifo_c_r$D_IN;
	if (appW4_wsiM_reqFifo_q_0$EN)
	  appW4_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_reqFifo_q_0$D_IN;
	if (appW4_wsiM_reqFifo_q_1$EN)
	  appW4_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_reqFifo_q_1$D_IN;
	if (appW4_wsiM_sThreadBusy_d$EN)
	  appW4_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_sThreadBusy_d$D_IN;
	if (appW4_wsiM_tBusyCount$EN)
	  appW4_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_tBusyCount$D_IN;
	if (appW4_wsiM_trafficSticky$EN)
	  appW4_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiM_trafficSticky$D_IN;
	if (appW4_wsiS_burstKind$EN)
	  appW4_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_burstKind$D_IN;
	if (appW4_wsiS_errorSticky$EN)
	  appW4_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_errorSticky$D_IN;
	if (appW4_wsiS_iMesgCount$EN)
	  appW4_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_iMesgCount$D_IN;
	if (appW4_wsiS_operateD$EN)
	  appW4_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_operateD$D_IN;
	if (appW4_wsiS_pMesgCount$EN)
	  appW4_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_pMesgCount$D_IN;
	if (appW4_wsiS_peerIsReady$EN)
	  appW4_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_peerIsReady$D_IN;
	if (appW4_wsiS_reqFifo_countReg$EN)
	  appW4_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_reqFifo_countReg$D_IN;
	if (appW4_wsiS_reqFifo_levelsValid$EN)
	  appW4_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_reqFifo_levelsValid$D_IN;
	if (appW4_wsiS_tBusyCount$EN)
	  appW4_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_tBusyCount$D_IN;
	if (appW4_wsiS_trafficSticky$EN)
	  appW4_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_trafficSticky$D_IN;
	if (appW4_wsiS_wordCount$EN)
	  appW4_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiS_wordCount$D_IN;
	if (appW4_wsiWordsRemain$EN)
	  appW4_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      appW4_wsiWordsRemain$D_IN;
	if (appW4_zeroLengthMesg$EN)
	  appW4_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY
	      appW4_zeroLengthMesg$D_IN;
      end
    if (!RST_N_rst_2)
      begin
        appW2_abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW2_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	appW2_firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_impreciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	appW2_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_mesgLength <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	appW2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	appW2_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_mesgReqValid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	appW2_preciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_respF_rCache <= `BSV_ASSIGNMENT_DELAY 74'h0AAAAAAAAAAAAAAAAAA;
	appW2_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW2_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW2_smaCtrl <= `BSV_ASSIGNMENT_DELAY 32'h00000001;
	appW2_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	appW2_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	appW2_valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	appW2_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW2_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW2_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW2_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW2_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW2_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	appW2_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	appW2_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	appW2_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	appW2_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW2_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW2_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW2_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	appW2_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	appW2_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (appW2_abortCount$EN)
	  appW2_abortCount <= `BSV_ASSIGNMENT_DELAY appW2_abortCount$D_IN;
	if (appW2_doAbort$EN)
	  appW2_doAbort <= `BSV_ASSIGNMENT_DELAY appW2_doAbort$D_IN;
	if (appW2_endOfMessage$EN)
	  appW2_endOfMessage <= `BSV_ASSIGNMENT_DELAY appW2_endOfMessage$D_IN;
	if (appW2_errCount$EN)
	  appW2_errCount <= `BSV_ASSIGNMENT_DELAY appW2_errCount$D_IN;
	if (appW2_fabRespCredit_value$EN)
	  appW2_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      appW2_fabRespCredit_value$D_IN;
	if (appW2_fabWordsRemain$EN)
	  appW2_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      appW2_fabWordsRemain$D_IN;
	if (appW2_firstMsgReq$EN)
	  appW2_firstMsgReq <= `BSV_ASSIGNMENT_DELAY appW2_firstMsgReq$D_IN;
	if (appW2_impreciseBurst$EN)
	  appW2_impreciseBurst <= `BSV_ASSIGNMENT_DELAY
	      appW2_impreciseBurst$D_IN;
	if (appW2_lastMesg$EN)
	  appW2_lastMesg <= `BSV_ASSIGNMENT_DELAY appW2_lastMesg$D_IN;
	if (appW2_mesgCount$EN)
	  appW2_mesgCount <= `BSV_ASSIGNMENT_DELAY appW2_mesgCount$D_IN;
	if (appW2_mesgLength$EN)
	  appW2_mesgLength <= `BSV_ASSIGNMENT_DELAY appW2_mesgLength$D_IN;
	if (appW2_mesgLengthSoFar$EN)
	  appW2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      appW2_mesgLengthSoFar$D_IN;
	if (appW2_mesgPreRequest$EN)
	  appW2_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY
	      appW2_mesgPreRequest$D_IN;
	if (appW2_mesgReqOK$EN)
	  appW2_mesgReqOK <= `BSV_ASSIGNMENT_DELAY appW2_mesgReqOK$D_IN;
	if (appW2_mesgReqValid$EN)
	  appW2_mesgReqValid <= `BSV_ASSIGNMENT_DELAY appW2_mesgReqValid$D_IN;
	if (appW2_opcode$EN)
	  appW2_opcode <= `BSV_ASSIGNMENT_DELAY appW2_opcode$D_IN;
	if (appW2_preciseBurst$EN)
	  appW2_preciseBurst <= `BSV_ASSIGNMENT_DELAY appW2_preciseBurst$D_IN;
	if (appW2_readyToPush$EN)
	  appW2_readyToPush <= `BSV_ASSIGNMENT_DELAY appW2_readyToPush$D_IN;
	if (appW2_readyToRequest$EN)
	  appW2_readyToRequest <= `BSV_ASSIGNMENT_DELAY
	      appW2_readyToRequest$D_IN;
	if (appW2_respF_rCache$EN)
	  appW2_respF_rCache <= `BSV_ASSIGNMENT_DELAY appW2_respF_rCache$D_IN;
	if (appW2_respF_rRdPtr$EN)
	  appW2_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY appW2_respF_rRdPtr$D_IN;
	if (appW2_respF_rWrPtr$EN)
	  appW2_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY appW2_respF_rWrPtr$D_IN;
	if (appW2_smaCtrl$EN)
	  appW2_smaCtrl <= `BSV_ASSIGNMENT_DELAY appW2_smaCtrl$D_IN;
	if (appW2_thisMesg$EN)
	  appW2_thisMesg <= `BSV_ASSIGNMENT_DELAY appW2_thisMesg$D_IN;
	if (appW2_unrollCnt$EN)
	  appW2_unrollCnt <= `BSV_ASSIGNMENT_DELAY appW2_unrollCnt$D_IN;
	if (appW2_valExpect$EN)
	  appW2_valExpect <= `BSV_ASSIGNMENT_DELAY appW2_valExpect$D_IN;
	if (appW2_wci_cEdge$EN)
	  appW2_wci_cEdge <= `BSV_ASSIGNMENT_DELAY appW2_wci_cEdge$D_IN;
	if (appW2_wci_cState$EN)
	  appW2_wci_cState <= `BSV_ASSIGNMENT_DELAY appW2_wci_cState$D_IN;
	if (appW2_wci_ctlAckReg$EN)
	  appW2_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_ctlAckReg$D_IN;
	if (appW2_wci_ctlOpActive$EN)
	  appW2_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_ctlOpActive$D_IN;
	if (appW2_wci_illegalEdge$EN)
	  appW2_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_illegalEdge$D_IN;
	if (appW2_wci_nState$EN)
	  appW2_wci_nState <= `BSV_ASSIGNMENT_DELAY appW2_wci_nState$D_IN;
	if (appW2_wci_reqF_countReg$EN)
	  appW2_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_reqF_countReg$D_IN;
	if (appW2_wci_respF_c_r$EN)
	  appW2_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_respF_c_r$D_IN;
	if (appW2_wci_respF_q_0$EN)
	  appW2_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_respF_q_0$D_IN;
	if (appW2_wci_respF_q_1$EN)
	  appW2_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_respF_q_1$D_IN;
	if (appW2_wci_sFlagReg$EN)
	  appW2_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY appW2_wci_sFlagReg$D_IN;
	if (appW2_wci_sThreadBusy_d$EN)
	  appW2_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW2_wci_sThreadBusy_d$D_IN;
	if (appW2_wmi_busyWithMessage$EN)
	  appW2_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_busyWithMessage$D_IN;
	if (appW2_wmi_dhF_c_r$EN)
	  appW2_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY appW2_wmi_dhF_c_r$D_IN;
	if (appW2_wmi_dhF_q_0$EN)
	  appW2_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY appW2_wmi_dhF_q_0$D_IN;
	if (appW2_wmi_dhF_q_1$EN)
	  appW2_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY appW2_wmi_dhF_q_1$D_IN;
	if (appW2_wmi_errorSticky$EN)
	  appW2_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_errorSticky$D_IN;
	if (appW2_wmi_mFlagF_c_r$EN)
	  appW2_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_mFlagF_c_r$D_IN;
	if (appW2_wmi_mFlagF_q_0$EN)
	  appW2_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_mFlagF_q_0$D_IN;
	if (appW2_wmi_mFlagF_q_1$EN)
	  appW2_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_mFlagF_q_1$D_IN;
	if (appW2_wmi_operateD$EN)
	  appW2_wmi_operateD <= `BSV_ASSIGNMENT_DELAY appW2_wmi_operateD$D_IN;
	if (appW2_wmi_peerIsReady$EN)
	  appW2_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_peerIsReady$D_IN;
	if (appW2_wmi_reqF_c_r$EN)
	  appW2_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY appW2_wmi_reqF_c_r$D_IN;
	if (appW2_wmi_reqF_q_0$EN)
	  appW2_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY appW2_wmi_reqF_q_0$D_IN;
	if (appW2_wmi_reqF_q_1$EN)
	  appW2_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY appW2_wmi_reqF_q_1$D_IN;
	if (appW2_wmi_sDataThreadBusy_d$EN)
	  appW2_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_sDataThreadBusy_d$D_IN;
	if (appW2_wmi_sFlagReg$EN)
	  appW2_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY appW2_wmi_sFlagReg$D_IN;
	if (appW2_wmi_sThreadBusy_d$EN)
	  appW2_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_sThreadBusy_d$D_IN;
	if (appW2_wmi_trafficSticky$EN)
	  appW2_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW2_wmi_trafficSticky$D_IN;
	if (appW2_wsiM_burstKind$EN)
	  appW2_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_burstKind$D_IN;
	if (appW2_wsiM_errorSticky$EN)
	  appW2_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_errorSticky$D_IN;
	if (appW2_wsiM_iMesgCount$EN)
	  appW2_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_iMesgCount$D_IN;
	if (appW2_wsiM_operateD$EN)
	  appW2_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_operateD$D_IN;
	if (appW2_wsiM_pMesgCount$EN)
	  appW2_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_pMesgCount$D_IN;
	if (appW2_wsiM_peerIsReady$EN)
	  appW2_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_peerIsReady$D_IN;
	if (appW2_wsiM_reqFifo_c_r$EN)
	  appW2_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_reqFifo_c_r$D_IN;
	if (appW2_wsiM_reqFifo_q_0$EN)
	  appW2_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_reqFifo_q_0$D_IN;
	if (appW2_wsiM_reqFifo_q_1$EN)
	  appW2_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_reqFifo_q_1$D_IN;
	if (appW2_wsiM_sThreadBusy_d$EN)
	  appW2_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_sThreadBusy_d$D_IN;
	if (appW2_wsiM_tBusyCount$EN)
	  appW2_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_tBusyCount$D_IN;
	if (appW2_wsiM_trafficSticky$EN)
	  appW2_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiM_trafficSticky$D_IN;
	if (appW2_wsiS_burstKind$EN)
	  appW2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_burstKind$D_IN;
	if (appW2_wsiS_errorSticky$EN)
	  appW2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_errorSticky$D_IN;
	if (appW2_wsiS_iMesgCount$EN)
	  appW2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_iMesgCount$D_IN;
	if (appW2_wsiS_operateD$EN)
	  appW2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_operateD$D_IN;
	if (appW2_wsiS_pMesgCount$EN)
	  appW2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_pMesgCount$D_IN;
	if (appW2_wsiS_peerIsReady$EN)
	  appW2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_peerIsReady$D_IN;
	if (appW2_wsiS_reqFifo_countReg$EN)
	  appW2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_reqFifo_countReg$D_IN;
	if (appW2_wsiS_reqFifo_levelsValid$EN)
	  appW2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_reqFifo_levelsValid$D_IN;
	if (appW2_wsiS_tBusyCount$EN)
	  appW2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_tBusyCount$D_IN;
	if (appW2_wsiS_trafficSticky$EN)
	  appW2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_trafficSticky$D_IN;
	if (appW2_wsiS_wordCount$EN)
	  appW2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiS_wordCount$D_IN;
	if (appW2_wsiWordsRemain$EN)
	  appW2_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      appW2_wsiWordsRemain$D_IN;
	if (appW2_zeroLengthMesg$EN)
	  appW2_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY
	      appW2_zeroLengthMesg$D_IN;
      end
    if (!RST_N_rst_3)
      begin
        appW3_bytesRead <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_bytesThisMessage <= `BSV_ASSIGNMENT_DELAY 24'd0;
	appW3_bytesWritten <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_cyclesPassed <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_dlyCtrl <= `BSV_ASSIGNMENT_DELAY 32'h0;
	appW3_dlyHoldoffBytes <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_dlyHoldoffCycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_dlyRAG <= `BSV_ASSIGNMENT_DELAY 23'd0;
	appW3_dlyRdOpOther <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_dlyRdOpZero <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_dlyReadCredit_value <= `BSV_ASSIGNMENT_DELAY 8'd0;
	appW3_dlyReadyToWrite_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	appW3_dlyWAG <= `BSV_ASSIGNMENT_DELAY 23'd0;
	appW3_dlyWordsStored_value <= `BSV_ASSIGNMENT_DELAY 25'd0;
	appW3_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	appW3_mesgRdCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_mesgWF_rCache <= `BSV_ASSIGNMENT_DELAY 46'h0AAAAAAAAAAA;
	appW3_mesgWF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	appW3_mesgWF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	appW3_mesgWtCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_rdSerAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_rdSerEmpty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_rdSerPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_rdSerUnroll <= `BSV_ASSIGNMENT_DELAY 16'd0;
	appW3_rdSyncWord <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_tog50 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_wmemiRdReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wmemiRdResp1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wmemiRdResp2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wmemiWrReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wmemi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	appW3_wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	appW3_wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wmemi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_wmemi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	appW3_wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	appW3_wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wrtSerAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wrtSerPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wrtSerUnroll <= `BSV_ASSIGNMENT_DELAY 16'd0;
	appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (appW3_bytesRead$EN)
	  appW3_bytesRead <= `BSV_ASSIGNMENT_DELAY appW3_bytesRead$D_IN;
	if (appW3_bytesThisMessage$EN)
	  appW3_bytesThisMessage <= `BSV_ASSIGNMENT_DELAY
	      appW3_bytesThisMessage$D_IN;
	if (appW3_bytesWritten$EN)
	  appW3_bytesWritten <= `BSV_ASSIGNMENT_DELAY appW3_bytesWritten$D_IN;
	if (appW3_cyclesPassed$EN)
	  appW3_cyclesPassed <= `BSV_ASSIGNMENT_DELAY appW3_cyclesPassed$D_IN;
	if (appW3_dlyCtrl$EN)
	  appW3_dlyCtrl <= `BSV_ASSIGNMENT_DELAY appW3_dlyCtrl$D_IN;
	if (appW3_dlyHoldoffBytes$EN)
	  appW3_dlyHoldoffBytes <= `BSV_ASSIGNMENT_DELAY
	      appW3_dlyHoldoffBytes$D_IN;
	if (appW3_dlyHoldoffCycles$EN)
	  appW3_dlyHoldoffCycles <= `BSV_ASSIGNMENT_DELAY
	      appW3_dlyHoldoffCycles$D_IN;
	if (appW3_dlyRAG$EN)
	  appW3_dlyRAG <= `BSV_ASSIGNMENT_DELAY appW3_dlyRAG$D_IN;
	if (appW3_dlyRdOpOther$EN)
	  appW3_dlyRdOpOther <= `BSV_ASSIGNMENT_DELAY appW3_dlyRdOpOther$D_IN;
	if (appW3_dlyRdOpZero$EN)
	  appW3_dlyRdOpZero <= `BSV_ASSIGNMENT_DELAY appW3_dlyRdOpZero$D_IN;
	if (appW3_dlyReadCredit_value$EN)
	  appW3_dlyReadCredit_value <= `BSV_ASSIGNMENT_DELAY
	      appW3_dlyReadCredit_value$D_IN;
	if (appW3_dlyReadyToWrite_value$EN)
	  appW3_dlyReadyToWrite_value <= `BSV_ASSIGNMENT_DELAY
	      appW3_dlyReadyToWrite_value$D_IN;
	if (appW3_dlyWAG$EN)
	  appW3_dlyWAG <= `BSV_ASSIGNMENT_DELAY appW3_dlyWAG$D_IN;
	if (appW3_dlyWordsStored_value$EN)
	  appW3_dlyWordsStored_value <= `BSV_ASSIGNMENT_DELAY
	      appW3_dlyWordsStored_value$D_IN;
	if (appW3_mesgLengthSoFar$EN)
	  appW3_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      appW3_mesgLengthSoFar$D_IN;
	if (appW3_mesgRdCount$EN)
	  appW3_mesgRdCount <= `BSV_ASSIGNMENT_DELAY appW3_mesgRdCount$D_IN;
	if (appW3_mesgWF_rCache$EN)
	  appW3_mesgWF_rCache <= `BSV_ASSIGNMENT_DELAY
	      appW3_mesgWF_rCache$D_IN;
	if (appW3_mesgWF_rRdPtr$EN)
	  appW3_mesgWF_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      appW3_mesgWF_rRdPtr$D_IN;
	if (appW3_mesgWF_rWrPtr$EN)
	  appW3_mesgWF_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      appW3_mesgWF_rWrPtr$D_IN;
	if (appW3_mesgWtCount$EN)
	  appW3_mesgWtCount <= `BSV_ASSIGNMENT_DELAY appW3_mesgWtCount$D_IN;
	if (appW3_rdSerAddr$EN)
	  appW3_rdSerAddr <= `BSV_ASSIGNMENT_DELAY appW3_rdSerAddr$D_IN;
	if (appW3_rdSerEmpty$EN)
	  appW3_rdSerEmpty <= `BSV_ASSIGNMENT_DELAY appW3_rdSerEmpty$D_IN;
	if (appW3_rdSerPos$EN)
	  appW3_rdSerPos <= `BSV_ASSIGNMENT_DELAY appW3_rdSerPos$D_IN;
	if (appW3_rdSerUnroll$EN)
	  appW3_rdSerUnroll <= `BSV_ASSIGNMENT_DELAY appW3_rdSerUnroll$D_IN;
	if (appW3_rdSyncWord$EN)
	  appW3_rdSyncWord <= `BSV_ASSIGNMENT_DELAY appW3_rdSyncWord$D_IN;
	if (appW3_tog50$EN)
	  appW3_tog50 <= `BSV_ASSIGNMENT_DELAY appW3_tog50$D_IN;
	if (appW3_unrollCnt$EN)
	  appW3_unrollCnt <= `BSV_ASSIGNMENT_DELAY appW3_unrollCnt$D_IN;
	if (appW3_wci_cEdge$EN)
	  appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY appW3_wci_cEdge$D_IN;
	if (appW3_wci_cState$EN)
	  appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY appW3_wci_cState$D_IN;
	if (appW3_wci_ctlAckReg$EN)
	  appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_ctlAckReg$D_IN;
	if (appW3_wci_ctlOpActive$EN)
	  appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_ctlOpActive$D_IN;
	if (appW3_wci_illegalEdge$EN)
	  appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_illegalEdge$D_IN;
	if (appW3_wci_nState$EN)
	  appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY appW3_wci_nState$D_IN;
	if (appW3_wci_reqF_countReg$EN)
	  appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_reqF_countReg$D_IN;
	if (appW3_wci_respF_c_r$EN)
	  appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_respF_c_r$D_IN;
	if (appW3_wci_respF_q_0$EN)
	  appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_respF_q_0$D_IN;
	if (appW3_wci_respF_q_1$EN)
	  appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_respF_q_1$D_IN;
	if (appW3_wci_sFlagReg$EN)
	  appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY appW3_wci_sFlagReg$D_IN;
	if (appW3_wci_sThreadBusy_d$EN)
	  appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW3_wci_sThreadBusy_d$D_IN;
	if (appW3_wmemiRdReq$EN)
	  appW3_wmemiRdReq <= `BSV_ASSIGNMENT_DELAY appW3_wmemiRdReq$D_IN;
	if (appW3_wmemiRdResp1$EN)
	  appW3_wmemiRdResp1 <= `BSV_ASSIGNMENT_DELAY appW3_wmemiRdResp1$D_IN;
	if (appW3_wmemiRdResp2$EN)
	  appW3_wmemiRdResp2 <= `BSV_ASSIGNMENT_DELAY appW3_wmemiRdResp2$D_IN;
	if (appW3_wmemiWrReq$EN)
	  appW3_wmemiWrReq <= `BSV_ASSIGNMENT_DELAY appW3_wmemiWrReq$D_IN;
	if (appW3_wmemi_busyWithMessage$EN)
	  appW3_wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_busyWithMessage$D_IN;
	if (appW3_wmemi_dhF_c_r$EN)
	  appW3_wmemi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_dhF_c_r$D_IN;
	if (appW3_wmemi_dhF_q_0$EN)
	  appW3_wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_dhF_q_0$D_IN;
	if (appW3_wmemi_dhF_q_1$EN)
	  appW3_wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_dhF_q_1$D_IN;
	if (appW3_wmemi_errorSticky$EN)
	  appW3_wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_errorSticky$D_IN;
	if (appW3_wmemi_operateD$EN)
	  appW3_wmemi_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_operateD$D_IN;
	if (appW3_wmemi_peerIsReady$EN)
	  appW3_wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_peerIsReady$D_IN;
	if (appW3_wmemi_reqF_c_r$EN)
	  appW3_wmemi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_reqF_c_r$D_IN;
	if (appW3_wmemi_reqF_q_0$EN)
	  appW3_wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_reqF_q_0$D_IN;
	if (appW3_wmemi_reqF_q_1$EN)
	  appW3_wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_reqF_q_1$D_IN;
	if (appW3_wmemi_trafficSticky$EN)
	  appW3_wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wmemi_trafficSticky$D_IN;
	if (appW3_wrtSerAddr$EN)
	  appW3_wrtSerAddr <= `BSV_ASSIGNMENT_DELAY appW3_wrtSerAddr$D_IN;
	if (appW3_wrtSerPos$EN)
	  appW3_wrtSerPos <= `BSV_ASSIGNMENT_DELAY appW3_wrtSerPos$D_IN;
	if (appW3_wrtSerUnroll$EN)
	  appW3_wrtSerUnroll <= `BSV_ASSIGNMENT_DELAY appW3_wrtSerUnroll$D_IN;
	if (appW3_wsiM_burstKind$EN)
	  appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_burstKind$D_IN;
	if (appW3_wsiM_errorSticky$EN)
	  appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_errorSticky$D_IN;
	if (appW3_wsiM_iMesgCount$EN)
	  appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_iMesgCount$D_IN;
	if (appW3_wsiM_operateD$EN)
	  appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_operateD$D_IN;
	if (appW3_wsiM_pMesgCount$EN)
	  appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_pMesgCount$D_IN;
	if (appW3_wsiM_peerIsReady$EN)
	  appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_peerIsReady$D_IN;
	if (appW3_wsiM_reqFifo_c_r$EN)
	  appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_reqFifo_c_r$D_IN;
	if (appW3_wsiM_reqFifo_q_0$EN)
	  appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_reqFifo_q_0$D_IN;
	if (appW3_wsiM_reqFifo_q_1$EN)
	  appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_reqFifo_q_1$D_IN;
	if (appW3_wsiM_sThreadBusy_d$EN)
	  appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_sThreadBusy_d$D_IN;
	if (appW3_wsiM_tBusyCount$EN)
	  appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_tBusyCount$D_IN;
	if (appW3_wsiM_trafficSticky$EN)
	  appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiM_trafficSticky$D_IN;
	if (appW3_wsiS_burstKind$EN)
	  appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_burstKind$D_IN;
	if (appW3_wsiS_errorSticky$EN)
	  appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_errorSticky$D_IN;
	if (appW3_wsiS_iMesgCount$EN)
	  appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_iMesgCount$D_IN;
	if (appW3_wsiS_operateD$EN)
	  appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_operateD$D_IN;
	if (appW3_wsiS_pMesgCount$EN)
	  appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_pMesgCount$D_IN;
	if (appW3_wsiS_peerIsReady$EN)
	  appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_peerIsReady$D_IN;
	if (appW3_wsiS_reqFifo_countReg$EN)
	  appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_reqFifo_countReg$D_IN;
	if (appW3_wsiS_reqFifo_levelsValid$EN)
	  appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_reqFifo_levelsValid$D_IN;
	if (appW3_wsiS_tBusyCount$EN)
	  appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_tBusyCount$D_IN;
	if (appW3_wsiS_trafficSticky$EN)
	  appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_trafficSticky$D_IN;
	if (appW3_wsiS_wordCount$EN)
	  appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      appW3_wsiS_wordCount$D_IN;
      end
    if (appW2_fabWordsCurReq$EN)
      appW2_fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY appW2_fabWordsCurReq$D_IN;
    if (appW2_mesgReqAddr$EN)
      appW2_mesgReqAddr <= `BSV_ASSIGNMENT_DELAY appW2_mesgReqAddr$D_IN;
    if (appW2_wmi_statusR$EN)
      appW2_wmi_statusR <= `BSV_ASSIGNMENT_DELAY appW2_wmi_statusR$D_IN;
    if (appW2_wsiM_statusR$EN)
      appW2_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY appW2_wsiM_statusR$D_IN;
    if (appW2_wsiS_mesgWordLength$EN)
      appW2_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  appW2_wsiS_mesgWordLength$D_IN;
    if (appW2_wsiS_statusR$EN)
      appW2_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY appW2_wsiS_statusR$D_IN;
    if (appW3_rdSerMeta$EN)
      appW3_rdSerMeta <= `BSV_ASSIGNMENT_DELAY appW3_rdSerMeta$D_IN;
    if (appW3_rdSerStage$EN)
      appW3_rdSerStage <= `BSV_ASSIGNMENT_DELAY appW3_rdSerStage$D_IN;
    if (appW3_rdSerStage_1$EN)
      appW3_rdSerStage_1 <= `BSV_ASSIGNMENT_DELAY appW3_rdSerStage_1$D_IN;
    if (appW3_rdSerStage_2$EN)
      appW3_rdSerStage_2 <= `BSV_ASSIGNMENT_DELAY appW3_rdSerStage_2$D_IN;
    if (appW3_rdSerStage_3$EN)
      appW3_rdSerStage_3 <= `BSV_ASSIGNMENT_DELAY appW3_rdSerStage_3$D_IN;
    if (appW3_readMeta$EN)
      appW3_readMeta <= `BSV_ASSIGNMENT_DELAY appW3_readMeta$D_IN;
    if (appW3_wmemi_statusR$EN)
      appW3_wmemi_statusR <= `BSV_ASSIGNMENT_DELAY appW3_wmemi_statusR$D_IN;
    if (appW3_wrtSerStage$EN)
      appW3_wrtSerStage <= `BSV_ASSIGNMENT_DELAY appW3_wrtSerStage$D_IN;
    if (appW3_wrtSerStage_1$EN)
      appW3_wrtSerStage_1 <= `BSV_ASSIGNMENT_DELAY appW3_wrtSerStage_1$D_IN;
    if (appW3_wrtSerStage_2$EN)
      appW3_wrtSerStage_2 <= `BSV_ASSIGNMENT_DELAY appW3_wrtSerStage_2$D_IN;
    if (appW3_wrtSerStage_3$EN)
      appW3_wrtSerStage_3 <= `BSV_ASSIGNMENT_DELAY appW3_wrtSerStage_3$D_IN;
    if (appW3_wsiM_statusR$EN)
      appW3_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY appW3_wsiM_statusR$D_IN;
    if (appW3_wsiS_mesgWordLength$EN)
      appW3_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  appW3_wsiS_mesgWordLength$D_IN;
    if (appW3_wsiS_statusR$EN)
      appW3_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY appW3_wsiS_statusR$D_IN;
    if (appW4_fabWordsCurReq$EN)
      appW4_fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY appW4_fabWordsCurReq$D_IN;
    if (appW4_mesgReqAddr$EN)
      appW4_mesgReqAddr <= `BSV_ASSIGNMENT_DELAY appW4_mesgReqAddr$D_IN;
    if (appW4_wmi_statusR$EN)
      appW4_wmi_statusR <= `BSV_ASSIGNMENT_DELAY appW4_wmi_statusR$D_IN;
    if (appW4_wsiM_statusR$EN)
      appW4_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY appW4_wsiM_statusR$D_IN;
    if (appW4_wsiS_mesgWordLength$EN)
      appW4_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  appW4_wsiS_mesgWordLength$D_IN;
    if (appW4_wsiS_statusR$EN)
      appW4_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY appW4_wsiS_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    appW2_abortCount = 32'hAAAAAAAA;
    appW2_doAbort = 1'h0;
    appW2_endOfMessage = 1'h0;
    appW2_errCount = 32'hAAAAAAAA;
    appW2_fabRespCredit_value = 12'hAAA;
    appW2_fabWordsCurReq = 14'h2AAA;
    appW2_fabWordsRemain = 14'h2AAA;
    appW2_firstMsgReq = 1'h0;
    appW2_impreciseBurst = 1'h0;
    appW2_lastMesg = 32'hAAAAAAAA;
    appW2_mesgCount = 32'hAAAAAAAA;
    appW2_mesgLength = 15'h2AAA;
    appW2_mesgLengthSoFar = 14'h2AAA;
    appW2_mesgPreRequest = 1'h0;
    appW2_mesgReqAddr = 14'h2AAA;
    appW2_mesgReqOK = 1'h0;
    appW2_mesgReqValid = 1'h0;
    appW2_opcode = 9'h0AA;
    appW2_preciseBurst = 1'h0;
    appW2_readyToPush = 1'h0;
    appW2_readyToRequest = 1'h0;
    appW2_respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    appW2_respF_rRdPtr = 12'hAAA;
    appW2_respF_rWrPtr = 12'hAAA;
    appW2_smaCtrl = 32'hAAAAAAAA;
    appW2_thisMesg = 32'hAAAAAAAA;
    appW2_unrollCnt = 16'hAAAA;
    appW2_valExpect = 32'hAAAAAAAA;
    appW2_wci_cEdge = 3'h2;
    appW2_wci_cState = 3'h2;
    appW2_wci_ctlAckReg = 1'h0;
    appW2_wci_ctlOpActive = 1'h0;
    appW2_wci_illegalEdge = 1'h0;
    appW2_wci_nState = 3'h2;
    appW2_wci_reqF_countReg = 2'h2;
    appW2_wci_respF_c_r = 2'h2;
    appW2_wci_respF_q_0 = 34'h2AAAAAAAA;
    appW2_wci_respF_q_1 = 34'h2AAAAAAAA;
    appW2_wci_sFlagReg = 1'h0;
    appW2_wci_sThreadBusy_d = 1'h0;
    appW2_wmi_busyWithMessage = 1'h0;
    appW2_wmi_dhF_c_r = 2'h2;
    appW2_wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    appW2_wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    appW2_wmi_errorSticky = 1'h0;
    appW2_wmi_mFlagF_c_r = 2'h2;
    appW2_wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    appW2_wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    appW2_wmi_operateD = 1'h0;
    appW2_wmi_peerIsReady = 1'h0;
    appW2_wmi_reqF_c_r = 2'h2;
    appW2_wmi_reqF_q_0 = 32'hAAAAAAAA;
    appW2_wmi_reqF_q_1 = 32'hAAAAAAAA;
    appW2_wmi_sDataThreadBusy_d = 1'h0;
    appW2_wmi_sFlagReg = 32'hAAAAAAAA;
    appW2_wmi_sThreadBusy_d = 1'h0;
    appW2_wmi_statusR = 8'hAA;
    appW2_wmi_trafficSticky = 1'h0;
    appW2_wsiM_burstKind = 2'h2;
    appW2_wsiM_errorSticky = 1'h0;
    appW2_wsiM_iMesgCount = 32'hAAAAAAAA;
    appW2_wsiM_operateD = 1'h0;
    appW2_wsiM_pMesgCount = 32'hAAAAAAAA;
    appW2_wsiM_peerIsReady = 1'h0;
    appW2_wsiM_reqFifo_c_r = 2'h2;
    appW2_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    appW2_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    appW2_wsiM_sThreadBusy_d = 1'h0;
    appW2_wsiM_statusR = 8'hAA;
    appW2_wsiM_tBusyCount = 32'hAAAAAAAA;
    appW2_wsiM_trafficSticky = 1'h0;
    appW2_wsiS_burstKind = 2'h2;
    appW2_wsiS_errorSticky = 1'h0;
    appW2_wsiS_iMesgCount = 32'hAAAAAAAA;
    appW2_wsiS_mesgWordLength = 12'hAAA;
    appW2_wsiS_operateD = 1'h0;
    appW2_wsiS_pMesgCount = 32'hAAAAAAAA;
    appW2_wsiS_peerIsReady = 1'h0;
    appW2_wsiS_reqFifo_countReg = 2'h2;
    appW2_wsiS_reqFifo_levelsValid = 1'h0;
    appW2_wsiS_statusR = 8'hAA;
    appW2_wsiS_tBusyCount = 32'hAAAAAAAA;
    appW2_wsiS_trafficSticky = 1'h0;
    appW2_wsiS_wordCount = 12'hAAA;
    appW2_wsiWordsRemain = 12'hAAA;
    appW2_zeroLengthMesg = 1'h0;
    appW3_bytesRead = 32'hAAAAAAAA;
    appW3_bytesThisMessage = 24'hAAAAAA;
    appW3_bytesWritten = 32'hAAAAAAAA;
    appW3_cyclesPassed = 32'hAAAAAAAA;
    appW3_dlyCtrl = 32'hAAAAAAAA;
    appW3_dlyHoldoffBytes = 32'hAAAAAAAA;
    appW3_dlyHoldoffCycles = 32'hAAAAAAAA;
    appW3_dlyRAG = 23'h2AAAAA;
    appW3_dlyRdOpOther = 32'hAAAAAAAA;
    appW3_dlyRdOpZero = 32'hAAAAAAAA;
    appW3_dlyReadCredit_value = 8'hAA;
    appW3_dlyReadyToWrite_value = 16'hAAAA;
    appW3_dlyWAG = 23'h2AAAAA;
    appW3_dlyWordsStored_value = 25'h0AAAAAA;
    appW3_mesgLengthSoFar = 14'h2AAA;
    appW3_mesgRdCount = 32'hAAAAAAAA;
    appW3_mesgWF_rCache = 46'h2AAAAAAAAAAA;
    appW3_mesgWF_rRdPtr = 13'h0AAA;
    appW3_mesgWF_rWrPtr = 13'h0AAA;
    appW3_mesgWtCount = 32'hAAAAAAAA;
    appW3_rdSerAddr = 32'hAAAAAAAA;
    appW3_rdSerEmpty = 1'h0;
    appW3_rdSerMeta = 32'hAAAAAAAA;
    appW3_rdSerPos = 2'h2;
    appW3_rdSerStage = 32'hAAAAAAAA;
    appW3_rdSerStage_1 = 32'hAAAAAAAA;
    appW3_rdSerStage_2 = 32'hAAAAAAAA;
    appW3_rdSerStage_3 = 32'hAAAAAAAA;
    appW3_rdSerUnroll = 16'hAAAA;
    appW3_rdSyncWord = 1'h0;
    appW3_readMeta = 32'hAAAAAAAA;
    appW3_tog50 = 1'h0;
    appW3_unrollCnt = 16'hAAAA;
    appW3_wci_cEdge = 3'h2;
    appW3_wci_cState = 3'h2;
    appW3_wci_ctlAckReg = 1'h0;
    appW3_wci_ctlOpActive = 1'h0;
    appW3_wci_illegalEdge = 1'h0;
    appW3_wci_nState = 3'h2;
    appW3_wci_reqF_countReg = 2'h2;
    appW3_wci_respF_c_r = 2'h2;
    appW3_wci_respF_q_0 = 34'h2AAAAAAAA;
    appW3_wci_respF_q_1 = 34'h2AAAAAAAA;
    appW3_wci_sFlagReg = 1'h0;
    appW3_wci_sThreadBusy_d = 1'h0;
    appW3_wmemiRdReq = 32'hAAAAAAAA;
    appW3_wmemiRdResp1 = 32'hAAAAAAAA;
    appW3_wmemiRdResp2 = 32'hAAAAAAAA;
    appW3_wmemiWrReq = 32'hAAAAAAAA;
    appW3_wmemi_busyWithMessage = 1'h0;
    appW3_wmemi_dhF_c_r = 2'h2;
    appW3_wmemi_dhF_q_0 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    appW3_wmemi_dhF_q_1 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    appW3_wmemi_errorSticky = 1'h0;
    appW3_wmemi_operateD = 1'h0;
    appW3_wmemi_peerIsReady = 1'h0;
    appW3_wmemi_reqF_c_r = 2'h2;
    appW3_wmemi_reqF_q_0 = 52'hAAAAAAAAAAAAA;
    appW3_wmemi_reqF_q_1 = 52'hAAAAAAAAAAAAA;
    appW3_wmemi_statusR = 8'hAA;
    appW3_wmemi_trafficSticky = 1'h0;
    appW3_wrtSerAddr = 32'hAAAAAAAA;
    appW3_wrtSerPos = 2'h2;
    appW3_wrtSerStage = 32'hAAAAAAAA;
    appW3_wrtSerStage_1 = 32'hAAAAAAAA;
    appW3_wrtSerStage_2 = 32'hAAAAAAAA;
    appW3_wrtSerStage_3 = 32'hAAAAAAAA;
    appW3_wrtSerUnroll = 16'hAAAA;
    appW3_wsiM_burstKind = 2'h2;
    appW3_wsiM_errorSticky = 1'h0;
    appW3_wsiM_iMesgCount = 32'hAAAAAAAA;
    appW3_wsiM_operateD = 1'h0;
    appW3_wsiM_pMesgCount = 32'hAAAAAAAA;
    appW3_wsiM_peerIsReady = 1'h0;
    appW3_wsiM_reqFifo_c_r = 2'h2;
    appW3_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    appW3_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    appW3_wsiM_sThreadBusy_d = 1'h0;
    appW3_wsiM_statusR = 8'hAA;
    appW3_wsiM_tBusyCount = 32'hAAAAAAAA;
    appW3_wsiM_trafficSticky = 1'h0;
    appW3_wsiS_burstKind = 2'h2;
    appW3_wsiS_errorSticky = 1'h0;
    appW3_wsiS_iMesgCount = 32'hAAAAAAAA;
    appW3_wsiS_mesgWordLength = 12'hAAA;
    appW3_wsiS_operateD = 1'h0;
    appW3_wsiS_pMesgCount = 32'hAAAAAAAA;
    appW3_wsiS_peerIsReady = 1'h0;
    appW3_wsiS_reqFifo_countReg = 2'h2;
    appW3_wsiS_reqFifo_levelsValid = 1'h0;
    appW3_wsiS_statusR = 8'hAA;
    appW3_wsiS_tBusyCount = 32'hAAAAAAAA;
    appW3_wsiS_trafficSticky = 1'h0;
    appW3_wsiS_wordCount = 12'hAAA;
    appW4_abortCount = 32'hAAAAAAAA;
    appW4_doAbort = 1'h0;
    appW4_endOfMessage = 1'h0;
    appW4_errCount = 32'hAAAAAAAA;
    appW4_fabRespCredit_value = 12'hAAA;
    appW4_fabWordsCurReq = 14'h2AAA;
    appW4_fabWordsRemain = 14'h2AAA;
    appW4_firstMsgReq = 1'h0;
    appW4_impreciseBurst = 1'h0;
    appW4_lastMesg = 32'hAAAAAAAA;
    appW4_mesgCount = 32'hAAAAAAAA;
    appW4_mesgLength = 15'h2AAA;
    appW4_mesgLengthSoFar = 14'h2AAA;
    appW4_mesgPreRequest = 1'h0;
    appW4_mesgReqAddr = 14'h2AAA;
    appW4_mesgReqOK = 1'h0;
    appW4_mesgReqValid = 1'h0;
    appW4_opcode = 9'h0AA;
    appW4_preciseBurst = 1'h0;
    appW4_readyToPush = 1'h0;
    appW4_readyToRequest = 1'h0;
    appW4_respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    appW4_respF_rRdPtr = 12'hAAA;
    appW4_respF_rWrPtr = 12'hAAA;
    appW4_smaCtrl = 32'hAAAAAAAA;
    appW4_thisMesg = 32'hAAAAAAAA;
    appW4_unrollCnt = 16'hAAAA;
    appW4_valExpect = 32'hAAAAAAAA;
    appW4_wci_cEdge = 3'h2;
    appW4_wci_cState = 3'h2;
    appW4_wci_ctlAckReg = 1'h0;
    appW4_wci_ctlOpActive = 1'h0;
    appW4_wci_illegalEdge = 1'h0;
    appW4_wci_nState = 3'h2;
    appW4_wci_reqF_countReg = 2'h2;
    appW4_wci_respF_c_r = 2'h2;
    appW4_wci_respF_q_0 = 34'h2AAAAAAAA;
    appW4_wci_respF_q_1 = 34'h2AAAAAAAA;
    appW4_wci_sFlagReg = 1'h0;
    appW4_wci_sThreadBusy_d = 1'h0;
    appW4_wmi_busyWithMessage = 1'h0;
    appW4_wmi_dhF_c_r = 2'h2;
    appW4_wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    appW4_wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    appW4_wmi_errorSticky = 1'h0;
    appW4_wmi_mFlagF_c_r = 2'h2;
    appW4_wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    appW4_wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    appW4_wmi_operateD = 1'h0;
    appW4_wmi_peerIsReady = 1'h0;
    appW4_wmi_reqF_c_r = 2'h2;
    appW4_wmi_reqF_q_0 = 32'hAAAAAAAA;
    appW4_wmi_reqF_q_1 = 32'hAAAAAAAA;
    appW4_wmi_sDataThreadBusy_d = 1'h0;
    appW4_wmi_sFlagReg = 32'hAAAAAAAA;
    appW4_wmi_sThreadBusy_d = 1'h0;
    appW4_wmi_statusR = 8'hAA;
    appW4_wmi_trafficSticky = 1'h0;
    appW4_wsiM_burstKind = 2'h2;
    appW4_wsiM_errorSticky = 1'h0;
    appW4_wsiM_iMesgCount = 32'hAAAAAAAA;
    appW4_wsiM_operateD = 1'h0;
    appW4_wsiM_pMesgCount = 32'hAAAAAAAA;
    appW4_wsiM_peerIsReady = 1'h0;
    appW4_wsiM_reqFifo_c_r = 2'h2;
    appW4_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    appW4_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    appW4_wsiM_sThreadBusy_d = 1'h0;
    appW4_wsiM_statusR = 8'hAA;
    appW4_wsiM_tBusyCount = 32'hAAAAAAAA;
    appW4_wsiM_trafficSticky = 1'h0;
    appW4_wsiS_burstKind = 2'h2;
    appW4_wsiS_errorSticky = 1'h0;
    appW4_wsiS_iMesgCount = 32'hAAAAAAAA;
    appW4_wsiS_mesgWordLength = 12'hAAA;
    appW4_wsiS_operateD = 1'h0;
    appW4_wsiS_pMesgCount = 32'hAAAAAAAA;
    appW4_wsiS_peerIsReady = 1'h0;
    appW4_wsiS_reqFifo_countReg = 2'h2;
    appW4_wsiS_reqFifo_levelsValid = 1'h0;
    appW4_wsiS_statusR = 8'hAA;
    appW4_wsiS_tBusyCount = 32'hAAAAAAAA;
    appW4_wsiS_trafficSticky = 1'h0;
    appW4_wsiS_wordCount = 12'hAAA;
    appW4_wsiWordsRemain = 12'hAAA;
    appW4_zeroLengthMesg = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmrd_mesgBegin)
	begin
	  v__h17905 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h17905,
		 appW2_mesgCount,
		 appW2_wmi_sFlagReg[23:0],
		 appW2_wmi_sFlagReg[31:24]);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmrd_mesgBegin)
	begin
	  v__h65300 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h65300,
		 appW4_mesgCount,
		 appW4_wmi_sFlagReg[23:0],
		 appW4_wmi_sFlagReg[31:24]);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctl_op_start)
	begin
	  v__h3880 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3880,
		 appW2_wci_reqF$D_OUT[36:34],
		 appW2_wci_cState);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_EiI && WILL_FIRE_RL_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 323, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_ctrl_EiI and RL_appW2_wci_cfrd fired\n  in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_OrE && WILL_FIRE_RL_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_ctrl_OrE and RL_appW2_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_OrE && WILL_FIRE_RL_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_ctrl_OrE and RL_appW2_wci_cfrd fired\n  in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_IsO)
	begin
	  v__h22177 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h22177,
		 appW2_smaCtrl);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_IsO && WILL_FIRE_RL_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_ctrl_IsO and RL_appW2_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_IsO && WILL_FIRE_RL_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_ctrl_IsO and RL_appW2_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctrl_IsO && WILL_FIRE_RL_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_ctrl_IsO and RL_appW2_wci_cfrd fired\n  in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_mesgBegin && appW2_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h19322 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_mesgBegin && appW2_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h19322,
		 appW2_mesgCount,
		 appW2_wsiS_reqFifo$D_OUT[55:44],
		 appW2_wsiS_reqFifo$D_OUT[7:0]);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_mesgBegin && !appW2_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h19399 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_mesgBegin && !appW2_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h19399,
		 appW2_mesgCount);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_doAbort)
	begin
	  v__h21119 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h21119);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_messageFinalize)
	begin
	  v__h21380 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h21380,
		 appW2_mesgCount,
		 x__h19473);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_cfwr && WILL_FIRE_RL_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_cfwr and RL_appW2_wci_ctrl_OrE fired\n  in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_cfwr && WILL_FIRE_RL_appW2_wci_ctrl_IsO)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_cfwr and RL_appW2_wci_ctrl_IsO fired\n  in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_cfwr && WILL_FIRE_RL_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_cfwr and RL_appW2_wci_ctrl_EiI fired\n  in the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_cfwr && WILL_FIRE_RL_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW2_wci_cfwr and RL_appW2_wci_cfrd fired in\n  the same clock cycle.\n");
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctl_op_complete && appW2_wci_illegalEdge)
	begin
	  v__h4220 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctl_op_complete && appW2_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h4220,
		 appW2_wci_cEdge,
		 appW2_wci_cState);
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctl_op_complete && !appW2_wci_illegalEdge)
	begin
	  v__h4065 = $time;
	  #0;
	end
    if (RST_N_rst_2)
      if (WILL_FIRE_RL_appW2_wci_ctl_op_complete && !appW2_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h4065,
		 appW2_wci_cEdge,
		 appW2_wci_cState,
		 appW2_wci_nState);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_start)
	begin
	  v__h27090 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h27090,
		 appW3_wci_reqF$D_OUT[36:34],
		 appW3_wci_cState);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_OrE && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 443, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_ctrl_OrE and RL_appW3_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfrd && WILL_FIRE_RL_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 392, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfrd and RL_appW3_wci_ctrl_OrE fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfrd && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 392, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfrd and RL_appW3_wci_ctrl_EiI fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_IsO)
	begin
	  v__h46352 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting DelayWorker dlyCtrl:%0x",
		 v__h46352,
		 appW3_dlyCtrl);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_IsO && WILL_FIRE_RL_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_ctrl_IsO and RL_appW3_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_IsO && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_ctrl_IsO and RL_appW3_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctrl_IsO && WILL_FIRE_RL_appW3_wci_cfrd)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_ctrl_IsO and RL_appW3_wci_cfrd fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_ctrl_OrE fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_ctrl_IsO)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_ctrl_IsO fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_ctrl_EiI fired\n  in the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_cfwr && WILL_FIRE_RL_appW3_wci_cfrd)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_appW3_wci_cfwr and RL_appW3_wci_cfrd fired in\n  the same clock cycle.\n");
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && appW3_wci_illegalEdge)
	begin
	  v__h27427 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h27427,
		 appW3_wci_cEdge,
		 appW3_wci_cState);
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && !appW3_wci_illegalEdge)
	begin
	  v__h27272 = $time;
	  #0;
	end
    if (RST_N_rst_3)
      if (WILL_FIRE_RL_appW3_wci_ctl_op_complete && !appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h27272,
		 appW3_wci_cEdge,
		 appW3_wci_cState,
		 appW3_wci_nState);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctl_op_start)
	begin
	  v__h51285 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h51285,
		 appW4_wci_reqF$D_OUT[36:34],
		 appW4_wci_cState);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_EiI && WILL_FIRE_RL_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 323, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_ctrl_EiI and RL_appW4_wci_cfrd fired\n  in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_OrE && WILL_FIRE_RL_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_ctrl_OrE and RL_appW4_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_OrE && WILL_FIRE_RL_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_ctrl_OrE and RL_appW4_wci_cfrd fired\n  in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_IsO)
	begin
	  v__h69569 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h69569,
		 appW4_smaCtrl);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_IsO && WILL_FIRE_RL_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_ctrl_IsO and RL_appW4_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_IsO && WILL_FIRE_RL_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_ctrl_IsO and RL_appW4_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctrl_IsO && WILL_FIRE_RL_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_ctrl_IsO and RL_appW4_wci_cfrd fired\n  in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_mesgBegin && appW4_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h66717 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_mesgBegin && appW4_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h66717,
		 appW4_mesgCount,
		 appW4_wsiS_reqFifo$D_OUT[55:44],
		 appW4_wsiS_reqFifo$D_OUT[7:0]);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_mesgBegin && !appW4_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h66794 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_mesgBegin && !appW4_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h66794,
		 appW4_mesgCount);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_doAbort)
	begin
	  v__h68514 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h68514);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_messageFinalize)
	begin
	  v__h68775 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h68775,
		 appW4_mesgCount,
		 x__h66868);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_cfwr && WILL_FIRE_RL_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_cfwr and RL_appW4_wci_ctrl_OrE fired\n  in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_cfwr && WILL_FIRE_RL_appW4_wci_ctrl_IsO)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_cfwr and RL_appW4_wci_ctrl_IsO fired\n  in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_cfwr && WILL_FIRE_RL_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_cfwr and RL_appW4_wci_ctrl_EiI fired\n  in the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_cfwr && WILL_FIRE_RL_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_appW4_wci_cfwr and RL_appW4_wci_cfrd fired in\n  the same clock cycle.\n");
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctl_op_complete && appW4_wci_illegalEdge)
	begin
	  v__h51622 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctl_op_complete && appW4_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h51622,
		 appW4_wci_cEdge,
		 appW4_wci_cState);
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctl_op_complete && !appW4_wci_illegalEdge)
	begin
	  v__h51467 = $time;
	  #0;
	end
    if (RST_N_rst_4)
      if (WILL_FIRE_RL_appW4_wci_ctl_op_complete && !appW4_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h51467,
		 appW4_wci_cEdge,
		 appW4_wci_cState,
		 appW4_wci_nState);
  end
  // synopsys translate_on
endmodule  // mkOCApp4B

