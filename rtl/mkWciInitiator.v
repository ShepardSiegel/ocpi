//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Thu Oct 31 08:59:12 EDT 2013
//
//
// Ports:
// Name                         I/O  size props
// wciM0_MCmd                     O     3
// wciM0_MAddrSpace               O     1
// wciM0_MByteEn                  O     4
// wciM0_MAddr                    O    32
// wciM0_MData                    O    32 reg
// wciM0_MFlag                    O     2 reg
// RST_N_wciM0                    O     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wciM0_SResp                    I     2
// wciM0_SData                    I    32
// wciM0_SFlag                    I     2 reg
// wciM0_SThreadBusy              I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkWciInitiator(CLK,
		      RST_N,

		      wciM0_MCmd,

		      wciM0_MAddrSpace,

		      wciM0_MByteEn,

		      wciM0_MAddr,

		      wciM0_MData,

		      wciM0_SResp,

		      wciM0_SData,

		      wciM0_SThreadBusy,

		      wciM0_SFlag,

		      wciM0_MFlag,

		      RST_N_wciM0);
  input  CLK;
  input  RST_N;

  // value method wciM0_mCmd
  output [2 : 0] wciM0_MCmd;

  // value method wciM0_mAddrSpace
  output wciM0_MAddrSpace;

  // value method wciM0_mByteEn
  output [3 : 0] wciM0_MByteEn;

  // value method wciM0_mAddr
  output [31 : 0] wciM0_MAddr;

  // value method wciM0_mData
  output [31 : 0] wciM0_MData;

  // action method wciM0_sResp
  input  [1 : 0] wciM0_SResp;

  // action method wciM0_sData
  input  [31 : 0] wciM0_SData;

  // action method wciM0_sThreadBusy
  input  wciM0_SThreadBusy;

  // action method wciM0_sFlag
  input  [1 : 0] wciM0_SFlag;

  // value method wciM0_mFlag
  output [1 : 0] wciM0_MFlag;

  // output resets
  output RST_N_wciM0;

  // signals for module outputs
  wire [31 : 0] wciM0_MAddr, wciM0_MData;
  wire [3 : 0] wciM0_MByteEn;
  wire [2 : 0] wciM0_MCmd;
  wire [1 : 0] wciM0_MFlag;
  wire RST_N_wciM0, wciM0_MAddrSpace;

  // inlined wires
  wire [71 : 0] initiator_reqF_x_wire_wget;
  wire [33 : 0] initiator_wciResponse_wget;
  wire [31 : 0] wci_Em_respData_w_wget;
  wire [1 : 0] wci_Em_resp_w_wget;
  wire initFsm_abort_wget,
       initFsm_abort_whas,
       initFsm_start_reg_2_wget,
       initFsm_start_reg_2_whas,
       initFsm_start_wire_wget,
       initFsm_start_wire_whas,
       initFsm_state_fired_1_wget,
       initFsm_state_fired_1_whas,
       initFsm_state_overlap_pw_whas,
       initFsm_state_set_pw_whas,
       initiator_reqF_dequeueing_whas,
       initiator_reqF_enqueueing_whas,
       initiator_reqF_x_wire_whas,
       initiator_sThreadBusy_pw_whas,
       initiator_sfCapClear_1_wget,
       initiator_sfCapClear_1_whas,
       initiator_sfCapSet_1_wget,
       initiator_sfCapSet_1_whas,
       initiator_wciResponse_whas,
       wci_Em_respData_w_whas,
       wci_Em_resp_w_whas;

  // register initFsm_start_reg
  reg initFsm_start_reg;
  wire initFsm_start_reg_D_IN, initFsm_start_reg_EN;

  // register initFsm_start_reg_1
  reg initFsm_start_reg_1;
  wire initFsm_start_reg_1_D_IN, initFsm_start_reg_1_EN;

  // register initFsm_state_can_overlap
  reg initFsm_state_can_overlap;
  wire initFsm_state_can_overlap_D_IN, initFsm_state_can_overlap_EN;

  // register initFsm_state_fired
  reg initFsm_state_fired;
  wire initFsm_state_fired_D_IN, initFsm_state_fired_EN;

  // register initFsm_state_mkFSMstate
  reg [3 : 0] initFsm_state_mkFSMstate;
  reg [3 : 0] initFsm_state_mkFSMstate_D_IN;
  wire initFsm_state_mkFSMstate_EN;

  // register initiator_busy
  reg initiator_busy;
  wire initiator_busy_D_IN, initiator_busy_EN;

  // register initiator_lastConfigAddr
  reg [32 : 0] initiator_lastConfigAddr;
  wire [32 : 0] initiator_lastConfigAddr_D_IN;
  wire initiator_lastConfigAddr_EN;

  // register initiator_lastConfigBE
  reg [4 : 0] initiator_lastConfigBE;
  wire [4 : 0] initiator_lastConfigBE_D_IN;
  wire initiator_lastConfigBE_EN;

  // register initiator_lastControlOp
  reg [3 : 0] initiator_lastControlOp;
  wire [3 : 0] initiator_lastControlOp_D_IN;
  wire initiator_lastControlOp_EN;

  // register initiator_lastOpWrite
  reg [1 : 0] initiator_lastOpWrite;
  wire [1 : 0] initiator_lastOpWrite_D_IN;
  wire initiator_lastOpWrite_EN;

  // register initiator_mFlagReg
  reg [1 : 0] initiator_mFlagReg;
  wire [1 : 0] initiator_mFlagReg_D_IN;
  wire initiator_mFlagReg_EN;

  // register initiator_pageWindow
  reg [11 : 0] initiator_pageWindow;
  wire [11 : 0] initiator_pageWindow_D_IN;
  wire initiator_pageWindow_EN;

  // register initiator_reqERR
  reg [2 : 0] initiator_reqERR;
  reg [2 : 0] initiator_reqERR_D_IN;
  wire initiator_reqERR_EN;

  // register initiator_reqFAIL
  reg [2 : 0] initiator_reqFAIL;
  reg [2 : 0] initiator_reqFAIL_D_IN;
  wire initiator_reqFAIL_EN;

  // register initiator_reqF_cntr_r
  reg initiator_reqF_cntr_r;
  wire initiator_reqF_cntr_r_D_IN, initiator_reqF_cntr_r_EN;

  // register initiator_reqF_q_0
  reg [71 : 0] initiator_reqF_q_0;
  reg [71 : 0] initiator_reqF_q_0_D_IN;
  wire initiator_reqF_q_0_EN;

  // register initiator_reqPend
  reg [1 : 0] initiator_reqPend;
  reg [1 : 0] initiator_reqPend_D_IN;
  wire initiator_reqPend_EN;

  // register initiator_reqTO
  reg [2 : 0] initiator_reqTO;
  reg [2 : 0] initiator_reqTO_D_IN;
  wire initiator_reqTO_EN;

  // register initiator_respTimr
  reg [31 : 0] initiator_respTimr;
  wire [31 : 0] initiator_respTimr_D_IN;
  wire initiator_respTimr_EN;

  // register initiator_respTimrAct
  reg initiator_respTimrAct;
  wire initiator_respTimrAct_D_IN, initiator_respTimrAct_EN;

  // register initiator_sThreadBusy_d
  reg initiator_sThreadBusy_d;
  wire initiator_sThreadBusy_d_D_IN, initiator_sThreadBusy_d_EN;

  // register initiator_sfCap
  reg initiator_sfCap;
  wire initiator_sfCap_D_IN, initiator_sfCap_EN;

  // register initiator_sfCapClear
  reg initiator_sfCapClear;
  wire initiator_sfCapClear_D_IN, initiator_sfCapClear_EN;

  // register initiator_sfCapSet
  reg initiator_sfCapSet;
  wire initiator_sfCapSet_D_IN, initiator_sfCapSet_EN;

  // register initiator_slvPresent
  reg initiator_slvPresent;
  wire initiator_slvPresent_D_IN, initiator_slvPresent_EN;

  // register initiator_wReset_n
  reg initiator_wReset_n;
  wire initiator_wReset_n_D_IN, initiator_wReset_n_EN;

  // register initiator_wStatus
  reg [31 : 0] initiator_wStatus;
  wire [31 : 0] initiator_wStatus_D_IN;
  wire initiator_wStatus_EN;

  // register initiator_wTimeout
  reg [4 : 0] initiator_wTimeout;
  wire [4 : 0] initiator_wTimeout_D_IN;
  wire initiator_wTimeout_EN;

  // register started
  reg started;
  wire started_D_IN, started_EN;

  // ports of submodule initiator_mReset
  wire initiator_mReset_ASSERT_IN, initiator_mReset_OUT_RST;

  // ports of submodule initiator_respF
  reg [33 : 0] initiator_respF_D_IN;
  wire [33 : 0] initiator_respF_D_OUT;
  wire initiator_respF_CLR,
       initiator_respF_DEQ,
       initiator_respF_EMPTY_N,
       initiator_respF_ENQ,
       initiator_respF_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_initFsm_action_l1109c5,
       WILL_FIRE_RL_initFsm_action_l1110c14,
       WILL_FIRE_RL_initFsm_action_l1111c5,
       WILL_FIRE_RL_initFsm_action_l1112c14,
       WILL_FIRE_RL_initFsm_action_l1113c5,
       WILL_FIRE_RL_initFsm_action_l1114c14,
       WILL_FIRE_RL_initFsm_action_l1115c5,
       WILL_FIRE_RL_initFsm_action_l1116c14,
       WILL_FIRE_RL_initFsm_action_l1117c5,
       WILL_FIRE_RL_initFsm_action_l1118c14,
       WILL_FIRE_RL_initFsm_action_l1119c5,
       WILL_FIRE_RL_initFsm_fsm_start,
       WILL_FIRE_RL_initFsm_idle_l1108c3,
       WILL_FIRE_RL_initiator_reqF_both,
       WILL_FIRE_RL_initiator_reqF_decCtr,
       WILL_FIRE_RL_initiator_reqF_incCtr,
       WILL_FIRE_RL_initiator_wrkBusy;

  // inputs to muxes for submodule ports
  reg [71 : 0] MUX_initiator_reqF_q_0_write_1__VAL_1;
  wire [71 : 0] MUX_initiator_reqF_q_0_write_1__VAL_2,
		MUX_initiator_reqF_x_wire_wset_1__VAL_1,
		MUX_initiator_reqF_x_wire_wset_1__VAL_2;
  wire [33 : 0] MUX_initiator_respF_enq_1__VAL_2;
  wire [31 : 0] MUX_initiator_respTimr_write_1__VAL_2;
  wire MUX_initFsm_start_reg_write_1__SEL_2,
       MUX_initiator_busy_write_1__PSEL_1,
       MUX_initiator_busy_write_1__SEL_1,
       MUX_initiator_busy_write_1__SEL_2,
       MUX_initiator_lastControlOp_write_1__SEL_1,
       MUX_initiator_lastControlOp_write_1__SEL_2,
       MUX_initiator_lastOpWrite_write_1__SEL_1,
       MUX_initiator_lastOpWrite_write_1__SEL_2,
       MUX_initiator_reqF_cntr_r_write_1__VAL_1,
       MUX_initiator_reqF_cntr_r_write_1__VAL_2,
       MUX_initiator_reqF_q_0_write_1__SEL_1,
       MUX_initiator_reqPend_write_1__PSEL_3,
       MUX_initiator_reqPend_write_1__SEL_3,
       MUX_initiator_reqPend_write_1__SEL_4,
       MUX_initiator_respF_enq_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h22302,
	       v__h23090,
	       v__h23380,
	       v__h23876,
	       v__h24178,
	       v__h24682,
	       v__h25464,
	       v__h26268,
	       v__h2800,
	       v__h2890,
	       v__h2979,
	       v__h3212,
	       v__h3302,
	       v__h3391,
	       v__h3629,
	       v__h3719,
	       v__h3808;
  wire [31 : 0] toCount__h2495, x__h25157, x__h2658;
  wire [26 : 0] IF_initiator_lastControlOp_22_BIT_3_23_THEN_in_ETC___d137;
  wire NOT_initiator_busy_5_79_AND_IF_initiator_wRese_ETC___d192,
       _dand1initiator_busy_EN_write,
       _dand1initiator_respF_EN_enq,
       _dor1initiator_lastConfigAddr_EN_write,
       _dor1initiator_lastConfigBE_EN_write,
       initFsm_abort_whas__45_AND_initFsm_abort_wget__ETC___d231,
       initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40;

  // output resets
  assign RST_N_wciM0 = initiator_mReset_OUT_RST ;

  // value method wciM0_mCmd
  assign wciM0_MCmd =
	     initiator_sThreadBusy_d ? 3'd0 : initiator_reqF_q_0[71:69] ;

  // value method wciM0_mAddrSpace
  assign wciM0_MAddrSpace =
	     !initiator_sThreadBusy_d && initiator_reqF_q_0[68] ;

  // value method wciM0_mByteEn
  assign wciM0_MByteEn =
	     initiator_sThreadBusy_d ? 4'd0 : initiator_reqF_q_0[67:64] ;

  // value method wciM0_mAddr
  assign wciM0_MAddr =
	     initiator_sThreadBusy_d ? 32'd0 : initiator_reqF_q_0[63:32] ;

  // value method wciM0_mData
  assign wciM0_MData = initiator_reqF_q_0[31:0] ;

  // value method wciM0_mFlag
  assign wciM0_MFlag = initiator_mFlagReg ;

  // submodule initiator_mReset
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) initiator_mReset(.CLK(CLK),
								.RST(RST_N),
								.DST_CLK(CLK),
								.ASSERT_IN(initiator_mReset_ASSERT_IN),
								.ASSERT_OUT(),
								.OUT_RST(initiator_mReset_OUT_RST));

  // submodule initiator_respF
  FIFO1 #(.width(32'd34), .guarded(32'd1)) initiator_respF(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(initiator_respF_D_IN),
							   .ENQ(initiator_respF_ENQ),
							   .DEQ(initiator_respF_DEQ),
							   .CLR(initiator_respF_CLR),
							   .D_OUT(initiator_respF_D_OUT),
							   .FULL_N(initiator_respF_FULL_N),
							   .EMPTY_N(initiator_respF_EMPTY_N));

  // rule RL_initFsm_action_l1110c14
  assign WILL_FIRE_RL_initFsm_action_l1110c14 =
	     !initiator_busy && initiator_respF_FULL_N &&
	     initFsm_state_mkFSMstate == 4'd1 ;

  // rule RL_initFsm_action_l1111c5
  assign WILL_FIRE_RL_initFsm_action_l1111c5 =
	     initiator_respF_EMPTY_N && initFsm_state_mkFSMstate == 4'd2 ;

  // rule RL_initFsm_action_l1112c14
  assign WILL_FIRE_RL_initFsm_action_l1112c14 =
	     NOT_initiator_busy_5_79_AND_IF_initiator_wRese_ETC___d192 &&
	     initFsm_state_mkFSMstate == 4'd3 ;

  // rule RL_initFsm_action_l1113c5
  assign WILL_FIRE_RL_initFsm_action_l1113c5 =
	     initiator_respF_EMPTY_N && initFsm_state_mkFSMstate == 4'd4 ;

  // rule RL_initFsm_action_l1114c14
  assign WILL_FIRE_RL_initFsm_action_l1114c14 =
	     NOT_initiator_busy_5_79_AND_IF_initiator_wRese_ETC___d192 &&
	     initFsm_state_mkFSMstate == 4'd5 ;

  // rule RL_initFsm_action_l1115c5
  assign WILL_FIRE_RL_initFsm_action_l1115c5 =
	     initiator_respF_EMPTY_N && initFsm_state_mkFSMstate == 4'd6 ;

  // rule RL_initFsm_action_l1116c14
  assign WILL_FIRE_RL_initFsm_action_l1116c14 =
	     NOT_initiator_busy_5_79_AND_IF_initiator_wRese_ETC___d192 &&
	     initFsm_state_mkFSMstate == 4'd7 ;

  // rule RL_initFsm_action_l1117c5
  assign WILL_FIRE_RL_initFsm_action_l1117c5 =
	     initiator_respF_EMPTY_N && initFsm_state_mkFSMstate == 4'd8 ;

  // rule RL_initFsm_action_l1118c14
  assign WILL_FIRE_RL_initFsm_action_l1118c14 =
	     NOT_initiator_busy_5_79_AND_IF_initiator_wRese_ETC___d192 &&
	     initFsm_state_mkFSMstate == 4'd9 ;

  // rule RL_initFsm_action_l1119c5
  assign WILL_FIRE_RL_initFsm_action_l1119c5 =
	     initiator_respF_EMPTY_N && initFsm_state_mkFSMstate == 4'd10 ;

  // rule RL_initFsm_fsm_start
  assign WILL_FIRE_RL_initFsm_fsm_start =
	     initFsm_abort_whas__45_AND_initFsm_abort_wget__ETC___d231 &&
	     initFsm_start_reg ;

  // rule RL_initFsm_action_l1109c5
  assign WILL_FIRE_RL_initFsm_action_l1109c5 =
	     initFsm_start_wire_whas &&
	     (initFsm_state_mkFSMstate == 4'd0 ||
	      initFsm_state_mkFSMstate == 4'd11) ;

  // rule RL_initFsm_idle_l1108c3
  assign WILL_FIRE_RL_initFsm_idle_l1108c3 =
	     !initFsm_start_wire_whas && initFsm_state_mkFSMstate == 4'd11 ;

  // rule RL_initiator_wrkBusy
  assign WILL_FIRE_RL_initiator_wrkBusy =
	     ((initiator_wciResponse_wget[33:32] == 2'd0) ?
		initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 ||
		initiator_respF_FULL_N :
		initiator_respF_FULL_N) &&
	     initiator_busy ;

  // rule RL_initiator_reqF_incCtr
  assign WILL_FIRE_RL_initiator_reqF_incCtr =
	     (initiator_reqF_cntr_r || initiator_reqF_x_wire_whas) &&
	     initiator_reqF_enqueueing_whas &&
	     !initiator_reqF_dequeueing_whas ;

  // rule RL_initiator_reqF_decCtr
  assign WILL_FIRE_RL_initiator_reqF_decCtr =
	     initiator_reqF_dequeueing_whas &&
	     !initiator_reqF_enqueueing_whas ;

  // rule RL_initiator_reqF_both
  assign WILL_FIRE_RL_initiator_reqF_both =
	     (!initiator_reqF_cntr_r || initiator_reqF_x_wire_whas) &&
	     initiator_reqF_dequeueing_whas &&
	     initiator_reqF_enqueueing_whas ;

  // inputs to muxes for submodule ports
  assign MUX_initFsm_start_reg_write_1__SEL_2 =
	     initFsm_abort_whas__45_AND_initFsm_abort_wget__ETC___d231 &&
	     !initFsm_start_reg &&
	     !started ;
  assign MUX_initiator_busy_write_1__PSEL_1 =
	     WILL_FIRE_RL_initFsm_action_l1118c14 ||
	     WILL_FIRE_RL_initFsm_action_l1116c14 ||
	     WILL_FIRE_RL_initFsm_action_l1114c14 ||
	     WILL_FIRE_RL_initFsm_action_l1112c14 ;
  assign MUX_initiator_busy_write_1__SEL_1 =
	     MUX_initiator_busy_write_1__PSEL_1 && initiator_wReset_n ;
  assign MUX_initiator_busy_write_1__SEL_2 =
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     (!initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 ||
	      initiator_wciResponse_wget[33:32] != 2'd0) ;
  assign MUX_initiator_lastControlOp_write_1__SEL_1 =
	     WILL_FIRE_RL_initFsm_action_l1112c14 && initiator_wReset_n ;
  assign MUX_initiator_lastControlOp_write_1__SEL_2 =
	     WILL_FIRE_RL_initFsm_action_l1114c14 && initiator_wReset_n ;
  assign MUX_initiator_lastOpWrite_write_1__SEL_1 =
	     WILL_FIRE_RL_initFsm_action_l1118c14 && initiator_wReset_n ;
  assign MUX_initiator_lastOpWrite_write_1__SEL_2 =
	     WILL_FIRE_RL_initFsm_action_l1116c14 && initiator_wReset_n ;
  assign MUX_initiator_reqF_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_initiator_reqF_incCtr && !initiator_reqF_cntr_r ;
  assign MUX_initiator_reqPend_write_1__PSEL_3 =
	     WILL_FIRE_RL_initFsm_action_l1114c14 ||
	     WILL_FIRE_RL_initFsm_action_l1112c14 ;
  assign MUX_initiator_reqPend_write_1__SEL_3 =
	     MUX_initiator_reqPend_write_1__PSEL_3 && initiator_wReset_n ;
  assign MUX_initiator_reqPend_write_1__SEL_4 =
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     initiator_wciResponse_wget[33:32] != 2'd0 ;
  assign MUX_initiator_respF_enq_1__SEL_1 =
	     MUX_initiator_busy_write_1__PSEL_1 && !initiator_wReset_n ;
  assign MUX_initiator_reqF_cntr_r_write_1__VAL_1 =
	     initiator_reqF_cntr_r + 1'd1 ;
  assign MUX_initiator_reqF_cntr_r_write_1__VAL_2 =
	     initiator_reqF_cntr_r - 1'd1 ;
  always@(MUX_initiator_lastOpWrite_write_1__SEL_2 or
	  MUX_initiator_reqF_x_wire_wset_1__VAL_1 or
	  MUX_initiator_lastOpWrite_write_1__SEL_1 or
	  MUX_initiator_reqF_x_wire_wset_1__VAL_2 or
	  MUX_initiator_lastControlOp_write_1__SEL_1 or
	  MUX_initiator_lastControlOp_write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_initiator_lastOpWrite_write_1__SEL_2:
	  MUX_initiator_reqF_q_0_write_1__VAL_1 =
	      MUX_initiator_reqF_x_wire_wset_1__VAL_1;
      MUX_initiator_lastOpWrite_write_1__SEL_1:
	  MUX_initiator_reqF_q_0_write_1__VAL_1 =
	      MUX_initiator_reqF_x_wire_wset_1__VAL_2;
      MUX_initiator_lastControlOp_write_1__SEL_1:
	  MUX_initiator_reqF_q_0_write_1__VAL_1 = 72'h4F0000000080000000;
      MUX_initiator_lastControlOp_write_1__SEL_2:
	  MUX_initiator_reqF_q_0_write_1__VAL_1 = 72'h4F0000000480000000;
      default: MUX_initiator_reqF_q_0_write_1__VAL_1 =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_initiator_reqF_q_0_write_1__VAL_2 =
	     initiator_reqF_cntr_r ?
	       MUX_initiator_reqF_q_0_write_1__VAL_1 :
	       72'h0000000000AAAAAAAA ;
  assign MUX_initiator_reqF_x_wire_wset_1__VAL_1 =
	     { 8'd63, x__h25157, 32'h80000042 } ;
  assign MUX_initiator_reqF_x_wire_wset_1__VAL_2 =
	     { 8'd95, x__h25157, 32'h80000000 } ;
  assign MUX_initiator_respF_enq_1__VAL_2 =
	     (initiator_wciResponse_wget[33:32] == 2'd0) ?
	       34'h1C0DE4203 :
	       initiator_wciResponse_wget ;
  assign MUX_initiator_respTimr_write_1__VAL_2 =
	     (initiator_wciResponse_wget[33:32] == 2'd0) ?
	       (initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 ?
		  x__h2658 :
		  32'd0) :
	       32'd0 ;

  // inlined wires
  assign initiator_reqF_x_wire_wget = MUX_initiator_reqF_q_0_write_1__VAL_1 ;
  assign initiator_reqF_x_wire_whas =
	     WILL_FIRE_RL_initFsm_action_l1116c14 && initiator_wReset_n ||
	     WILL_FIRE_RL_initFsm_action_l1118c14 && initiator_wReset_n ||
	     WILL_FIRE_RL_initFsm_action_l1112c14 && initiator_wReset_n ||
	     WILL_FIRE_RL_initFsm_action_l1114c14 && initiator_wReset_n ;
  assign initiator_wciResponse_wget = { wciM0_SResp, wciM0_SData } ;
  assign initiator_wciResponse_whas = 1'd1 ;
  assign initiator_sfCapSet_1_wget = wciM0_SFlag[0] ;
  assign initiator_sfCapSet_1_whas = 1'd1 ;
  assign initiator_sfCapClear_1_wget = 1'b0 ;
  assign initiator_sfCapClear_1_whas = 1'b0 ;
  assign initFsm_start_wire_wget = 1'd1 ;
  assign initFsm_start_wire_whas =
	     WILL_FIRE_RL_initFsm_fsm_start ||
	     initFsm_start_reg_1 && !initFsm_state_fired ;
  assign initFsm_start_reg_2_wget = 1'd1 ;
  assign initFsm_start_reg_2_whas = initFsm_start_wire_whas ;
  assign initFsm_abort_wget = 1'b0 ;
  assign initFsm_abort_whas = 1'b0 ;
  assign initFsm_state_fired_1_wget = 1'd1 ;
  assign initFsm_state_fired_1_whas = initFsm_state_set_pw_whas ;
  assign wci_Em_resp_w_wget = wciM0_SResp ;
  assign wci_Em_resp_w_whas = 1'd1 ;
  assign wci_Em_respData_w_wget = wciM0_SData ;
  assign wci_Em_respData_w_whas = 1'd1 ;
  assign initiator_reqF_enqueueing_whas =
	     MUX_initiator_busy_write_1__PSEL_1 && initiator_wReset_n ;
  assign initiator_reqF_dequeueing_whas =
	     !initiator_sThreadBusy_d &&
	     initiator_wciResponse_wget[33:32] == 2'd0 &&
	     initiator_reqF_cntr_r ;
  assign initiator_sThreadBusy_pw_whas = wciM0_SThreadBusy ;
  assign initFsm_state_set_pw_whas =
	     WILL_FIRE_RL_initFsm_idle_l1108c3 ||
	     WILL_FIRE_RL_initFsm_action_l1119c5 ||
	     WILL_FIRE_RL_initFsm_action_l1118c14 ||
	     WILL_FIRE_RL_initFsm_action_l1117c5 ||
	     WILL_FIRE_RL_initFsm_action_l1116c14 ||
	     WILL_FIRE_RL_initFsm_action_l1115c5 ||
	     WILL_FIRE_RL_initFsm_action_l1114c14 ||
	     WILL_FIRE_RL_initFsm_action_l1113c5 ||
	     WILL_FIRE_RL_initFsm_action_l1112c14 ||
	     WILL_FIRE_RL_initFsm_action_l1111c5 ||
	     WILL_FIRE_RL_initFsm_action_l1110c14 ||
	     WILL_FIRE_RL_initFsm_action_l1109c5 ;
  assign initFsm_state_overlap_pw_whas = 1'b0 ;

  // register initFsm_start_reg
  assign initFsm_start_reg_D_IN = !WILL_FIRE_RL_initFsm_fsm_start ;
  assign initFsm_start_reg_EN =
	     WILL_FIRE_RL_initFsm_fsm_start ||
	     initFsm_abort_whas__45_AND_initFsm_abort_wget__ETC___d231 &&
	     !initFsm_start_reg &&
	     !started ;

  // register initFsm_start_reg_1
  assign initFsm_start_reg_1_D_IN = initFsm_start_wire_whas ;
  assign initFsm_start_reg_1_EN = 1'd1 ;

  // register initFsm_state_can_overlap
  assign initFsm_state_can_overlap_D_IN =
	     initFsm_state_set_pw_whas || initFsm_state_can_overlap ;
  assign initFsm_state_can_overlap_EN = 1'd1 ;

  // register initFsm_state_fired
  assign initFsm_state_fired_D_IN = initFsm_state_set_pw_whas ;
  assign initFsm_state_fired_EN = 1'd1 ;

  // register initFsm_state_mkFSMstate
  always@(WILL_FIRE_RL_initFsm_idle_l1108c3 or
	  WILL_FIRE_RL_initFsm_action_l1109c5 or
	  WILL_FIRE_RL_initFsm_action_l1110c14 or
	  WILL_FIRE_RL_initFsm_action_l1111c5 or
	  WILL_FIRE_RL_initFsm_action_l1112c14 or
	  WILL_FIRE_RL_initFsm_action_l1113c5 or
	  WILL_FIRE_RL_initFsm_action_l1114c14 or
	  WILL_FIRE_RL_initFsm_action_l1115c5 or
	  WILL_FIRE_RL_initFsm_action_l1116c14 or
	  WILL_FIRE_RL_initFsm_action_l1117c5 or
	  WILL_FIRE_RL_initFsm_action_l1118c14 or
	  WILL_FIRE_RL_initFsm_action_l1119c5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_initFsm_idle_l1108c3: initFsm_state_mkFSMstate_D_IN = 4'd0;
      WILL_FIRE_RL_initFsm_action_l1109c5:
	  initFsm_state_mkFSMstate_D_IN = 4'd1;
      WILL_FIRE_RL_initFsm_action_l1110c14:
	  initFsm_state_mkFSMstate_D_IN = 4'd2;
      WILL_FIRE_RL_initFsm_action_l1111c5:
	  initFsm_state_mkFSMstate_D_IN = 4'd3;
      WILL_FIRE_RL_initFsm_action_l1112c14:
	  initFsm_state_mkFSMstate_D_IN = 4'd4;
      WILL_FIRE_RL_initFsm_action_l1113c5:
	  initFsm_state_mkFSMstate_D_IN = 4'd5;
      WILL_FIRE_RL_initFsm_action_l1114c14:
	  initFsm_state_mkFSMstate_D_IN = 4'd6;
      WILL_FIRE_RL_initFsm_action_l1115c5:
	  initFsm_state_mkFSMstate_D_IN = 4'd7;
      WILL_FIRE_RL_initFsm_action_l1116c14:
	  initFsm_state_mkFSMstate_D_IN = 4'd8;
      WILL_FIRE_RL_initFsm_action_l1117c5:
	  initFsm_state_mkFSMstate_D_IN = 4'd9;
      WILL_FIRE_RL_initFsm_action_l1118c14:
	  initFsm_state_mkFSMstate_D_IN = 4'd10;
      WILL_FIRE_RL_initFsm_action_l1119c5:
	  initFsm_state_mkFSMstate_D_IN = 4'd11;
      default: initFsm_state_mkFSMstate_D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign initFsm_state_mkFSMstate_EN =
	     WILL_FIRE_RL_initFsm_idle_l1108c3 ||
	     WILL_FIRE_RL_initFsm_action_l1109c5 ||
	     WILL_FIRE_RL_initFsm_action_l1110c14 ||
	     WILL_FIRE_RL_initFsm_action_l1111c5 ||
	     WILL_FIRE_RL_initFsm_action_l1112c14 ||
	     WILL_FIRE_RL_initFsm_action_l1113c5 ||
	     WILL_FIRE_RL_initFsm_action_l1114c14 ||
	     WILL_FIRE_RL_initFsm_action_l1115c5 ||
	     WILL_FIRE_RL_initFsm_action_l1116c14 ||
	     WILL_FIRE_RL_initFsm_action_l1117c5 ||
	     WILL_FIRE_RL_initFsm_action_l1118c14 ||
	     WILL_FIRE_RL_initFsm_action_l1119c5 ;

  // register initiator_busy
  assign initiator_busy_D_IN = MUX_initiator_busy_write_1__SEL_1 ;
  assign initiator_busy_EN =
	     _dand1initiator_busy_EN_write ||
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     (!initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 ||
	      initiator_wciResponse_wget[33:32] != 2'd0) ;

  // register initiator_lastConfigAddr
  assign initiator_lastConfigAddr_D_IN = 33'h100000000 ;
  assign initiator_lastConfigAddr_EN =
	     _dor1initiator_lastConfigAddr_EN_write && initiator_wReset_n ;

  // register initiator_lastConfigBE
  assign initiator_lastConfigBE_D_IN = 5'd31 ;
  assign initiator_lastConfigBE_EN =
	     _dor1initiator_lastConfigBE_EN_write && initiator_wReset_n ;

  // register initiator_lastControlOp
  assign initiator_lastControlOp_D_IN =
	     MUX_initiator_lastControlOp_write_1__SEL_1 ? 4'd8 : 4'd9 ;
  assign initiator_lastControlOp_EN =
	     WILL_FIRE_RL_initFsm_action_l1112c14 && initiator_wReset_n ||
	     WILL_FIRE_RL_initFsm_action_l1114c14 && initiator_wReset_n ;

  // register initiator_lastOpWrite
  assign initiator_lastOpWrite_D_IN =
	     MUX_initiator_lastOpWrite_write_1__SEL_1 ? 2'd2 : 2'd3 ;
  assign initiator_lastOpWrite_EN =
	     WILL_FIRE_RL_initFsm_action_l1118c14 && initiator_wReset_n ||
	     WILL_FIRE_RL_initFsm_action_l1116c14 && initiator_wReset_n ;

  // register initiator_mFlagReg
  assign initiator_mFlagReg_D_IN = 2'h0 ;
  assign initiator_mFlagReg_EN = 1'b0 ;

  // register initiator_pageWindow
  assign initiator_pageWindow_D_IN = 12'h0 ;
  assign initiator_pageWindow_EN = 1'b0 ;

  // register initiator_reqERR
  always@(initiator_reqPend or initiator_reqERR)
  begin
    case (initiator_reqPend)
      2'd1: initiator_reqERR_D_IN = { 1'd1, initiator_reqERR[1:0] };
      2'd2:
	  initiator_reqERR_D_IN =
	      { initiator_reqERR[2], 1'd1, initiator_reqERR[0] };
      default: initiator_reqERR_D_IN = { initiator_reqERR[2:1], 1'd1 };
    endcase
  end
  assign initiator_reqERR_EN =
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     initiator_wciResponse_wget[33:32] == 2'd3 &&
	     (initiator_reqPend == 2'd1 || initiator_reqPend == 2'd2 ||
	      initiator_reqPend == 2'd3) ;

  // register initiator_reqFAIL
  always@(initiator_reqPend or initiator_reqFAIL)
  begin
    case (initiator_reqPend)
      2'd1: initiator_reqFAIL_D_IN = { 1'd1, initiator_reqFAIL[1:0] };
      2'd2:
	  initiator_reqFAIL_D_IN =
	      { initiator_reqFAIL[2], 1'd1, initiator_reqFAIL[0] };
      default: initiator_reqFAIL_D_IN = { initiator_reqFAIL[2:1], 1'd1 };
    endcase
  end
  assign initiator_reqFAIL_EN =
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     initiator_wciResponse_wget[33:32] == 2'd2 &&
	     (initiator_reqPend == 2'd1 || initiator_reqPend == 2'd2 ||
	      initiator_reqPend == 2'd3) ;

  // register initiator_reqF_cntr_r
  assign initiator_reqF_cntr_r_D_IN =
	     WILL_FIRE_RL_initiator_reqF_incCtr ?
	       MUX_initiator_reqF_cntr_r_write_1__VAL_1 :
	       MUX_initiator_reqF_cntr_r_write_1__VAL_2 ;
  assign initiator_reqF_cntr_r_EN =
	     WILL_FIRE_RL_initiator_reqF_incCtr ||
	     WILL_FIRE_RL_initiator_reqF_decCtr ;

  // register initiator_reqF_q_0
  always@(MUX_initiator_reqF_q_0_write_1__SEL_1 or
	  MUX_initiator_reqF_q_0_write_1__VAL_1 or
	  WILL_FIRE_RL_initiator_reqF_both or
	  MUX_initiator_reqF_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_initiator_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_initiator_reqF_q_0_write_1__SEL_1:
	  initiator_reqF_q_0_D_IN = MUX_initiator_reqF_q_0_write_1__VAL_1;
      WILL_FIRE_RL_initiator_reqF_both:
	  initiator_reqF_q_0_D_IN = MUX_initiator_reqF_q_0_write_1__VAL_2;
      WILL_FIRE_RL_initiator_reqF_decCtr:
	  initiator_reqF_q_0_D_IN = 72'h0000000000AAAAAAAA;
      default: initiator_reqF_q_0_D_IN =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign initiator_reqF_q_0_EN =
	     WILL_FIRE_RL_initiator_reqF_incCtr && !initiator_reqF_cntr_r ||
	     WILL_FIRE_RL_initiator_reqF_both ||
	     WILL_FIRE_RL_initiator_reqF_decCtr ;

  // register initiator_reqPend
  always@(MUX_initiator_lastOpWrite_write_1__SEL_2 or
	  MUX_initiator_lastOpWrite_write_1__SEL_1 or
	  MUX_initiator_reqPend_write_1__SEL_3 or
	  MUX_initiator_reqPend_write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_initiator_lastOpWrite_write_1__SEL_2: initiator_reqPend_D_IN = 2'd1;
      MUX_initiator_lastOpWrite_write_1__SEL_1: initiator_reqPend_D_IN = 2'd2;
      MUX_initiator_reqPend_write_1__SEL_3: initiator_reqPend_D_IN = 2'd3;
      MUX_initiator_reqPend_write_1__SEL_4: initiator_reqPend_D_IN = 2'd0;
      default: initiator_reqPend_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign initiator_reqPend_EN =
	     WILL_FIRE_RL_initFsm_action_l1116c14 && initiator_wReset_n ||
	     WILL_FIRE_RL_initFsm_action_l1118c14 && initiator_wReset_n ||
	     (WILL_FIRE_RL_initFsm_action_l1114c14 ||
	      WILL_FIRE_RL_initFsm_action_l1112c14) &&
	     initiator_wReset_n ||
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     initiator_wciResponse_wget[33:32] != 2'd0 ;

  // register initiator_reqTO
  always@(initiator_reqPend or initiator_reqTO)
  begin
    case (initiator_reqPend)
      2'd1: initiator_reqTO_D_IN = { 1'd1, initiator_reqTO[1:0] };
      2'd2:
	  initiator_reqTO_D_IN =
	      { initiator_reqTO[2], 1'd1, initiator_reqTO[0] };
      default: initiator_reqTO_D_IN = { initiator_reqTO[2:1], 1'd1 };
    endcase
  end
  assign initiator_reqTO_EN =
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     initiator_wciResponse_wget[33:32] == 2'd0 &&
	     !initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 &&
	     (initiator_reqPend == 2'd1 || initiator_reqPend == 2'd2 ||
	      initiator_reqPend == 2'd3) ;

  // register initiator_respTimr
  assign initiator_respTimr_D_IN =
	     initiator_reqF_cntr_r ?
	       32'd0 :
	       MUX_initiator_respTimr_write_1__VAL_2 ;
  assign initiator_respTimr_EN =
	     WILL_FIRE_RL_initiator_wrkBusy || initiator_reqF_cntr_r ;

  // register initiator_respTimrAct
  assign initiator_respTimrAct_D_IN = initiator_reqF_cntr_r ;
  assign initiator_respTimrAct_EN =
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     (!initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 ||
	      initiator_wciResponse_wget[33:32] != 2'd0) ||
	     initiator_reqF_cntr_r ;

  // register initiator_sThreadBusy_d
  assign initiator_sThreadBusy_d_D_IN = wciM0_SThreadBusy ;
  assign initiator_sThreadBusy_d_EN = 1'd1 ;

  // register initiator_sfCap
  assign initiator_sfCap_D_IN = initiator_sfCapSet ;
  assign initiator_sfCap_EN = initiator_sfCapSet || initiator_sfCapClear ;

  // register initiator_sfCapClear
  assign initiator_sfCapClear_D_IN = 1'b0 ;
  assign initiator_sfCapClear_EN = 1'd1 ;

  // register initiator_sfCapSet
  assign initiator_sfCapSet_D_IN = wciM0_SFlag[0] ;
  assign initiator_sfCapSet_EN = 1'd1 ;

  // register initiator_slvPresent
  assign initiator_slvPresent_D_IN = wciM0_SFlag[1] ;
  assign initiator_slvPresent_EN = 1'd1 ;

  // register initiator_wReset_n
  assign initiator_wReset_n_D_IN = 1'd1 ;
  assign initiator_wReset_n_EN = WILL_FIRE_RL_initFsm_action_l1110c14 ;

  // register initiator_wStatus
  assign initiator_wStatus_D_IN =
	     { 4'b0,
	       !initiator_lastOpWrite[1] || initiator_lastOpWrite[0],
	       IF_initiator_lastControlOp_22_BIT_3_23_THEN_in_ETC___d137 } ;
  assign initiator_wStatus_EN = 1'd1 ;

  // register initiator_wTimeout
  assign initiator_wTimeout_D_IN = 5'd4 ;
  assign initiator_wTimeout_EN = WILL_FIRE_RL_initFsm_action_l1110c14 ;

  // register started
  assign started_D_IN = 1'd1 ;
  assign started_EN = MUX_initFsm_start_reg_write_1__SEL_2 ;

  // submodule initiator_mReset
  assign initiator_mReset_ASSERT_IN = !initiator_wReset_n ;

  // submodule initiator_respF
  always@(MUX_initiator_respF_enq_1__SEL_1 or
	  MUX_initiator_busy_write_1__SEL_2 or
	  MUX_initiator_respF_enq_1__VAL_2 or
	  WILL_FIRE_RL_initFsm_action_l1110c14)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_initiator_respF_enq_1__SEL_1: initiator_respF_D_IN = 34'h1C0DE4204;
      MUX_initiator_busy_write_1__SEL_2:
	  initiator_respF_D_IN = MUX_initiator_respF_enq_1__VAL_2;
      WILL_FIRE_RL_initFsm_action_l1110c14:
	  initiator_respF_D_IN = 34'h100000000;
      default: initiator_respF_D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign initiator_respF_ENQ =
	     _dand1initiator_respF_EN_enq ||
	     WILL_FIRE_RL_initiator_wrkBusy &&
	     (!initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 ||
	      initiator_wciResponse_wget[33:32] != 2'd0) ||
	     WILL_FIRE_RL_initFsm_action_l1110c14 ;
  assign initiator_respF_DEQ =
	     WILL_FIRE_RL_initFsm_action_l1119c5 ||
	     WILL_FIRE_RL_initFsm_action_l1117c5 ||
	     WILL_FIRE_RL_initFsm_action_l1115c5 ||
	     WILL_FIRE_RL_initFsm_action_l1113c5 ||
	     WILL_FIRE_RL_initFsm_action_l1111c5 ;
  assign initiator_respF_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_initiator_lastControlOp_22_BIT_3_23_THEN_in_ETC___d137 =
	     { initiator_lastControlOp[3] ?
		 initiator_lastControlOp[2:0] :
		 3'b111,
	       initiator_lastConfigBE[4] ? initiator_lastConfigBE[3:0] : 4'hF,
	       initiator_lastOpWrite[1],
	       initiator_lastControlOp[3],
	       initiator_lastConfigBE[4],
	       initiator_lastConfigAddr[32],
	       6'b0,
	       initiator_sfCap,
	       initiator_reqTO,
	       initiator_reqFAIL,
	       initiator_reqERR } ;
  assign NOT_initiator_busy_5_79_AND_IF_initiator_wRese_ETC___d192 =
	     !initiator_busy &&
	     (initiator_wReset_n ?
		!initiator_reqF_cntr_r :
		initiator_respF_FULL_N) ;
  assign _dand1initiator_busy_EN_write =
	     (WILL_FIRE_RL_initFsm_action_l1118c14 ||
	      WILL_FIRE_RL_initFsm_action_l1116c14 ||
	      WILL_FIRE_RL_initFsm_action_l1114c14 ||
	      WILL_FIRE_RL_initFsm_action_l1112c14) &&
	     initiator_wReset_n ;
  assign _dand1initiator_respF_EN_enq =
	     (WILL_FIRE_RL_initFsm_action_l1118c14 ||
	      WILL_FIRE_RL_initFsm_action_l1116c14 ||
	      WILL_FIRE_RL_initFsm_action_l1114c14 ||
	      WILL_FIRE_RL_initFsm_action_l1112c14) &&
	     !initiator_wReset_n ;
  assign _dor1initiator_lastConfigAddr_EN_write =
	     WILL_FIRE_RL_initFsm_action_l1118c14 ||
	     WILL_FIRE_RL_initFsm_action_l1116c14 ;
  assign _dor1initiator_lastConfigBE_EN_write =
	     WILL_FIRE_RL_initFsm_action_l1118c14 ||
	     WILL_FIRE_RL_initFsm_action_l1116c14 ;
  assign initFsm_abort_whas__45_AND_initFsm_abort_wget__ETC___d231 =
	     (initFsm_state_mkFSMstate == 4'd0 ||
	      initFsm_state_mkFSMstate == 4'd11) &&
	     (!initFsm_start_reg_1 || initFsm_state_fired) ;
  assign initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 =
	     initiator_respTimr < toCount__h2495 ;
  assign toCount__h2495 = 32'd1 << initiator_wTimeout ;
  assign x__h25157 = { initiator_pageWindow, 20'h0 } ;
  assign x__h2658 = initiator_respTimr + 32'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        initFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	initFsm_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	initiator_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	initiator_lastConfigBE <= `BSV_ASSIGNMENT_DELAY 5'd10;
	initiator_lastControlOp <= `BSV_ASSIGNMENT_DELAY 4'd2;
	initiator_lastOpWrite <= `BSV_ASSIGNMENT_DELAY 2'd0;
	initiator_mFlagReg <= `BSV_ASSIGNMENT_DELAY 2'b10;
	initiator_pageWindow <= `BSV_ASSIGNMENT_DELAY 12'd0;
	initiator_reqERR <= `BSV_ASSIGNMENT_DELAY 3'd0;
	initiator_reqFAIL <= `BSV_ASSIGNMENT_DELAY 3'd0;
	initiator_reqF_cntr_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 72'h0000000000AAAAAAAA;
	initiator_reqPend <= `BSV_ASSIGNMENT_DELAY 2'd0;
	initiator_reqTO <= `BSV_ASSIGNMENT_DELAY 3'd0;
	initiator_respTimr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	initiator_respTimrAct <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	initiator_sfCap <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_sfCapClear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_sfCapSet <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_slvPresent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_wReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initiator_wTimeout <= `BSV_ASSIGNMENT_DELAY 5'h04;
	started <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (initFsm_start_reg_EN)
	  initFsm_start_reg <= `BSV_ASSIGNMENT_DELAY initFsm_start_reg_D_IN;
	if (initFsm_start_reg_1_EN)
	  initFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      initFsm_start_reg_1_D_IN;
	if (initFsm_state_can_overlap_EN)
	  initFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      initFsm_state_can_overlap_D_IN;
	if (initFsm_state_fired_EN)
	  initFsm_state_fired <= `BSV_ASSIGNMENT_DELAY
	      initFsm_state_fired_D_IN;
	if (initFsm_state_mkFSMstate_EN)
	  initFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      initFsm_state_mkFSMstate_D_IN;
	if (initiator_busy_EN)
	  initiator_busy <= `BSV_ASSIGNMENT_DELAY initiator_busy_D_IN;
	if (initiator_lastConfigAddr_EN)
	  initiator_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY
	      initiator_lastConfigAddr_D_IN;
	if (initiator_lastConfigBE_EN)
	  initiator_lastConfigBE <= `BSV_ASSIGNMENT_DELAY
	      initiator_lastConfigBE_D_IN;
	if (initiator_lastControlOp_EN)
	  initiator_lastControlOp <= `BSV_ASSIGNMENT_DELAY
	      initiator_lastControlOp_D_IN;
	if (initiator_lastOpWrite_EN)
	  initiator_lastOpWrite <= `BSV_ASSIGNMENT_DELAY
	      initiator_lastOpWrite_D_IN;
	if (initiator_mFlagReg_EN)
	  initiator_mFlagReg <= `BSV_ASSIGNMENT_DELAY initiator_mFlagReg_D_IN;
	if (initiator_pageWindow_EN)
	  initiator_pageWindow <= `BSV_ASSIGNMENT_DELAY
	      initiator_pageWindow_D_IN;
	if (initiator_reqERR_EN)
	  initiator_reqERR <= `BSV_ASSIGNMENT_DELAY initiator_reqERR_D_IN;
	if (initiator_reqFAIL_EN)
	  initiator_reqFAIL <= `BSV_ASSIGNMENT_DELAY initiator_reqFAIL_D_IN;
	if (initiator_reqF_cntr_r_EN)
	  initiator_reqF_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      initiator_reqF_cntr_r_D_IN;
	if (initiator_reqF_q_0_EN)
	  initiator_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY initiator_reqF_q_0_D_IN;
	if (initiator_reqPend_EN)
	  initiator_reqPend <= `BSV_ASSIGNMENT_DELAY initiator_reqPend_D_IN;
	if (initiator_reqTO_EN)
	  initiator_reqTO <= `BSV_ASSIGNMENT_DELAY initiator_reqTO_D_IN;
	if (initiator_respTimr_EN)
	  initiator_respTimr <= `BSV_ASSIGNMENT_DELAY initiator_respTimr_D_IN;
	if (initiator_respTimrAct_EN)
	  initiator_respTimrAct <= `BSV_ASSIGNMENT_DELAY
	      initiator_respTimrAct_D_IN;
	if (initiator_sThreadBusy_d_EN)
	  initiator_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      initiator_sThreadBusy_d_D_IN;
	if (initiator_sfCap_EN)
	  initiator_sfCap <= `BSV_ASSIGNMENT_DELAY initiator_sfCap_D_IN;
	if (initiator_sfCapClear_EN)
	  initiator_sfCapClear <= `BSV_ASSIGNMENT_DELAY
	      initiator_sfCapClear_D_IN;
	if (initiator_sfCapSet_EN)
	  initiator_sfCapSet <= `BSV_ASSIGNMENT_DELAY initiator_sfCapSet_D_IN;
	if (initiator_slvPresent_EN)
	  initiator_slvPresent <= `BSV_ASSIGNMENT_DELAY
	      initiator_slvPresent_D_IN;
	if (initiator_wReset_n_EN)
	  initiator_wReset_n <= `BSV_ASSIGNMENT_DELAY initiator_wReset_n_D_IN;
	if (initiator_wTimeout_EN)
	  initiator_wTimeout <= `BSV_ASSIGNMENT_DELAY initiator_wTimeout_D_IN;
	if (started_EN) started <= `BSV_ASSIGNMENT_DELAY started_D_IN;
      end
    if (initiator_wStatus_EN)
      initiator_wStatus <= `BSV_ASSIGNMENT_DELAY initiator_wStatus_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    initFsm_start_reg = 1'h0;
    initFsm_start_reg_1 = 1'h0;
    initFsm_state_can_overlap = 1'h0;
    initFsm_state_fired = 1'h0;
    initFsm_state_mkFSMstate = 4'hA;
    initiator_busy = 1'h0;
    initiator_lastConfigAddr = 33'h0AAAAAAAA;
    initiator_lastConfigBE = 5'h0A;
    initiator_lastControlOp = 4'hA;
    initiator_lastOpWrite = 2'h2;
    initiator_mFlagReg = 2'h2;
    initiator_pageWindow = 12'hAAA;
    initiator_reqERR = 3'h2;
    initiator_reqFAIL = 3'h2;
    initiator_reqF_cntr_r = 1'h0;
    initiator_reqF_q_0 = 72'hAAAAAAAAAAAAAAAAAA;
    initiator_reqPend = 2'h2;
    initiator_reqTO = 3'h2;
    initiator_respTimr = 32'hAAAAAAAA;
    initiator_respTimrAct = 1'h0;
    initiator_sThreadBusy_d = 1'h0;
    initiator_sfCap = 1'h0;
    initiator_sfCapClear = 1'h0;
    initiator_sfCapSet = 1'h0;
    initiator_slvPresent = 1'h0;
    initiator_wReset_n = 1'h0;
    initiator_wStatus = 32'hAAAAAAAA;
    initiator_wTimeout = 5'h0A;
    started = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1111c5)
	begin
	  v__h23090 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1111c5)
	$display("[%0d]: %m: WCI Initiator received response %0x",
		 v__h23090,
		 initiator_respF_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1112c14)
	begin
	  v__h23380 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1112c14)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h23380);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1113c5)
	begin
	  v__h23876 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1113c5)
	$display("[%0d]: %m: WCI Initiator received response %0x",
		 v__h23876,
		 initiator_respF_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1114c14)
	begin
	  v__h24178 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1114c14)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h24178);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1115c5)
	begin
	  v__h24682 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1115c5)
	$display("[%0d]: %m: WCI Initiator received response %0x",
		 v__h24682,
		 initiator_respF_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1117c5)
	begin
	  v__h25464 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1117c5)
	$display("[%0d]: %m: WCI Initiator received response %0x",
		 v__h25464,
		 initiator_respF_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1119c5)
	begin
	  v__h26268 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1119c5)
	$display("[%0d]: %m: WCI Initiator received response %0x",
		 v__h26268,
		 initiator_respF_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1110c14 &&
	  (WILL_FIRE_RL_initFsm_action_l1111c5 ||
	   WILL_FIRE_RL_initFsm_action_l1112c14 ||
	   WILL_FIRE_RL_initFsm_action_l1113c5 ||
	   WILL_FIRE_RL_initFsm_action_l1114c14 ||
	   WILL_FIRE_RL_initFsm_action_l1115c5 ||
	   WILL_FIRE_RL_initFsm_action_l1116c14 ||
	   WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1110, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1110c14] and\n  [RL_initFsm_action_l1111c5, RL_initFsm_action_l1112c14,\n  RL_initFsm_action_l1113c5, RL_initFsm_action_l1114c14,\n  RL_initFsm_action_l1115c5, RL_initFsm_action_l1116c14,\n  RL_initFsm_action_l1117c5, RL_initFsm_action_l1118c14,\n  RL_initFsm_action_l1119c5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1111c5 &&
	  (WILL_FIRE_RL_initFsm_action_l1112c14 ||
	   WILL_FIRE_RL_initFsm_action_l1113c5 ||
	   WILL_FIRE_RL_initFsm_action_l1114c14 ||
	   WILL_FIRE_RL_initFsm_action_l1115c5 ||
	   WILL_FIRE_RL_initFsm_action_l1116c14 ||
	   WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1111, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1111c5] and\n  [RL_initFsm_action_l1112c14, RL_initFsm_action_l1113c5,\n  RL_initFsm_action_l1114c14, RL_initFsm_action_l1115c5,\n  RL_initFsm_action_l1116c14, RL_initFsm_action_l1117c5,\n  RL_initFsm_action_l1118c14, RL_initFsm_action_l1119c5] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1112c14 &&
	  (WILL_FIRE_RL_initFsm_action_l1113c5 ||
	   WILL_FIRE_RL_initFsm_action_l1114c14 ||
	   WILL_FIRE_RL_initFsm_action_l1115c5 ||
	   WILL_FIRE_RL_initFsm_action_l1116c14 ||
	   WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1112, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1112c14] and\n  [RL_initFsm_action_l1113c5, RL_initFsm_action_l1114c14,\n  RL_initFsm_action_l1115c5, RL_initFsm_action_l1116c14,\n  RL_initFsm_action_l1117c5, RL_initFsm_action_l1118c14,\n  RL_initFsm_action_l1119c5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1113c5 &&
	  (WILL_FIRE_RL_initFsm_action_l1114c14 ||
	   WILL_FIRE_RL_initFsm_action_l1115c5 ||
	   WILL_FIRE_RL_initFsm_action_l1116c14 ||
	   WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1113, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1113c5] and\n  [RL_initFsm_action_l1114c14, RL_initFsm_action_l1115c5,\n  RL_initFsm_action_l1116c14, RL_initFsm_action_l1117c5,\n  RL_initFsm_action_l1118c14, RL_initFsm_action_l1119c5] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1114c14 &&
	  (WILL_FIRE_RL_initFsm_action_l1115c5 ||
	   WILL_FIRE_RL_initFsm_action_l1116c14 ||
	   WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1114, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1114c14] and\n  [RL_initFsm_action_l1115c5, RL_initFsm_action_l1116c14,\n  RL_initFsm_action_l1117c5, RL_initFsm_action_l1118c14,\n  RL_initFsm_action_l1119c5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1115c5 &&
	  (WILL_FIRE_RL_initFsm_action_l1116c14 ||
	   WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1115, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1115c5] and\n  [RL_initFsm_action_l1116c14, RL_initFsm_action_l1117c5,\n  RL_initFsm_action_l1118c14, RL_initFsm_action_l1119c5] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1117c5 &&
	  (WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1117, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1117c5] and\n  [RL_initFsm_action_l1118c14, RL_initFsm_action_l1119c5] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1116c14 &&
	  (WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1116, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1116c14] and\n  [RL_initFsm_action_l1117c5, RL_initFsm_action_l1118c14,\n  RL_initFsm_action_l1119c5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1118c14 &&
	  WILL_FIRE_RL_initFsm_action_l1119c5)
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1118, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1118c14] and\n  [RL_initFsm_action_l1119c5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1109c5)
	begin
	  v__h22302 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1109c5)
	$display("[%0d]: %m: WCI Initiator Taking Worker out of Reset...",
		 v__h22302);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initFsm_action_l1109c5 &&
	  (WILL_FIRE_RL_initFsm_action_l1110c14 ||
	   WILL_FIRE_RL_initFsm_action_l1111c5 ||
	   WILL_FIRE_RL_initFsm_action_l1112c14 ||
	   WILL_FIRE_RL_initFsm_action_l1113c5 ||
	   WILL_FIRE_RL_initFsm_action_l1114c14 ||
	   WILL_FIRE_RL_initFsm_action_l1115c5 ||
	   WILL_FIRE_RL_initFsm_action_l1116c14 ||
	   WILL_FIRE_RL_initFsm_action_l1117c5 ||
	   WILL_FIRE_RL_initFsm_action_l1118c14 ||
	   WILL_FIRE_RL_initFsm_action_l1119c5))
	$display("Error: \"bsv/wip/OCWci.bsv\", line 1109, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_initFsm_action_l1109c5] and\n  [RL_initFsm_action_l1110c14, RL_initFsm_action_l1111c5,\n  RL_initFsm_action_l1112c14, RL_initFsm_action_l1113c5,\n  RL_initFsm_action_l1114c14, RL_initFsm_action_l1115c5,\n  RL_initFsm_action_l1116c14, RL_initFsm_action_l1117c5,\n  RL_initFsm_action_l1118c14, RL_initFsm_action_l1119c5] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd0 &&
	  !initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 &&
	  initiator_reqPend == 2'd1)
	begin
	  v__h2800 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd0 &&
	  !initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 &&
	  initiator_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE TIMEOUT", v__h2800);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd0 &&
	  !initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 &&
	  initiator_reqPend == 2'd2)
	begin
	  v__h2890 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd0 &&
	  !initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 &&
	  initiator_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  TIMEOUT", v__h2890);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd0 &&
	  !initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 &&
	  initiator_reqPend == 2'd3)
	begin
	  v__h2979 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd0 &&
	  !initiator_respTimr_7_ULT_1_SL_initiator_wTimeo_ETC___d40 &&
	  initiator_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   TIMEOUT", v__h2979);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd2 &&
	  initiator_reqPend == 2'd1)
	begin
	  v__h3212 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd2 &&
	  initiator_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-FAIL", v__h3212);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd2 &&
	  initiator_reqPend == 2'd2)
	begin
	  v__h3302 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd2 &&
	  initiator_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-FAIL", v__h3302);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd2 &&
	  initiator_reqPend == 2'd3)
	begin
	  v__h3391 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd2 &&
	  initiator_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-FAIL", v__h3391);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd3 &&
	  initiator_reqPend == 2'd1)
	begin
	  v__h3629 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd3 &&
	  initiator_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-ERR", v__h3629);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd3 &&
	  initiator_reqPend == 2'd2)
	begin
	  v__h3719 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd3 &&
	  initiator_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-ERR", v__h3719);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd3 &&
	  initiator_reqPend == 2'd3)
	begin
	  v__h3808 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_initiator_wrkBusy &&
	  initiator_wciResponse_wget[33:32] == 2'd3 &&
	  initiator_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-ERR", v__h3808);
  end
  // synopsys translate_on
endmodule  // mkWciInitiator

