//
// Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
//
// On Sat Sep 29 15:58:42 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTB18(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [95 : 0] cap0_wsiS_extStatusW$wget, pat0_wsiM_extStatusW$wget;
  wire [71 : 0] cap0_wci_wslv_wciReq$wget, pat0_wci_wslv_wciReq$wget;
  wire [66 : 0] cap0_wtiS_wtiReq$wget;
  wire [63 : 0] cap0_nowW$wget, cap0_wti_Es_mData_w$wget;
  wire [60 : 0] cap0_wsiS_wsiReq$wget, pat0_wsiM_reqFifo_x_wire$wget;
  wire [33 : 0] cap0_wci_wslv_respF_x_wire$wget,
		pat0_wci_wslv_respF_x_wire$wget;
  wire [31 : 0] cap0_dataBram_serverAdapterA_outData_enqData$wget,
		cap0_dataBram_serverAdapterA_outData_outData$wget,
		cap0_dataBram_serverAdapterB_outData_enqData$wget,
		cap0_dataBram_serverAdapterB_outData_outData$wget,
		cap0_metaBram_serverAdapterA_1_outData_enqData$wget,
		cap0_metaBram_serverAdapterA_1_outData_outData$wget,
		cap0_metaBram_serverAdapterA_2_outData_enqData$wget,
		cap0_metaBram_serverAdapterA_2_outData_outData$wget,
		cap0_metaBram_serverAdapterA_3_outData_enqData$wget,
		cap0_metaBram_serverAdapterA_3_outData_outData$wget,
		cap0_metaBram_serverAdapterA_outData_enqData$wget,
		cap0_metaBram_serverAdapterA_outData_outData$wget,
		cap0_metaBram_serverAdapterB_1_outData_enqData$wget,
		cap0_metaBram_serverAdapterB_1_outData_outData$wget,
		cap0_metaBram_serverAdapterB_2_outData_enqData$wget,
		cap0_metaBram_serverAdapterB_2_outData_outData$wget,
		cap0_metaBram_serverAdapterB_3_outData_enqData$wget,
		cap0_metaBram_serverAdapterB_3_outData_outData$wget,
		cap0_metaBram_serverAdapterB_outData_enqData$wget,
		cap0_metaBram_serverAdapterB_outData_outData$wget,
		cap0_statusReg_w$wget,
		cap0_wci_wci_Es_mAddr_w$wget,
		cap0_wci_wci_Es_mData_w$wget,
		cap0_wsi_Es_mData_w$wget,
		pat0_dataBram_serverAdapterA_outData_enqData$wget,
		pat0_dataBram_serverAdapterA_outData_outData$wget,
		pat0_dataBram_serverAdapterB_outData_enqData$wget,
		pat0_dataBram_serverAdapterB_outData_outData$wget,
		pat0_metaBram_serverAdapterA_1_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_1_outData_outData$wget,
		pat0_metaBram_serverAdapterA_2_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_2_outData_outData$wget,
		pat0_metaBram_serverAdapterA_3_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_3_outData_outData$wget,
		pat0_metaBram_serverAdapterA_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_outData_outData$wget,
		pat0_metaBram_serverAdapterB_1_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_1_outData_outData$wget,
		pat0_metaBram_serverAdapterB_2_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_2_outData_outData$wget,
		pat0_metaBram_serverAdapterB_3_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_3_outData_outData$wget,
		pat0_metaBram_serverAdapterB_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_outData_outData$wget,
		pat0_statusReg_w$wget,
		pat0_wci_wci_Es_mAddr_w$wget,
		pat0_wci_wci_Es_mData_w$wget;
  wire [15 : 0] pat0_metaPtr_modulus_bw$wget;
  wire [11 : 0] cap0_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] cap0_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] cap0_wci_wci_Es_mByteEn_w$wget,
	       cap0_wsi_Es_mByteEn_w$wget,
	       pat0_wci_wci_Es_mByteEn_w$wget;
  wire [2 : 0] cap0_dataBram_serverAdapterA_cnt_1$wget,
	       cap0_dataBram_serverAdapterA_cnt_2$wget,
	       cap0_dataBram_serverAdapterA_cnt_3$wget,
	       cap0_dataBram_serverAdapterB_cnt_1$wget,
	       cap0_dataBram_serverAdapterB_cnt_2$wget,
	       cap0_dataBram_serverAdapterB_cnt_3$wget,
	       cap0_metaBram_serverAdapterA_1_cnt_1$wget,
	       cap0_metaBram_serverAdapterA_1_cnt_2$wget,
	       cap0_metaBram_serverAdapterA_1_cnt_3$wget,
	       cap0_metaBram_serverAdapterA_2_cnt_1$wget,
	       cap0_metaBram_serverAdapterA_2_cnt_2$wget,
	       cap0_metaBram_serverAdapterA_2_cnt_3$wget,
	       cap0_metaBram_serverAdapterA_3_cnt_1$wget,
	       cap0_metaBram_serverAdapterA_3_cnt_2$wget,
	       cap0_metaBram_serverAdapterA_3_cnt_3$wget,
	       cap0_metaBram_serverAdapterA_cnt_1$wget,
	       cap0_metaBram_serverAdapterA_cnt_2$wget,
	       cap0_metaBram_serverAdapterA_cnt_3$wget,
	       cap0_metaBram_serverAdapterB_1_cnt_1$wget,
	       cap0_metaBram_serverAdapterB_1_cnt_2$wget,
	       cap0_metaBram_serverAdapterB_1_cnt_3$wget,
	       cap0_metaBram_serverAdapterB_2_cnt_1$wget,
	       cap0_metaBram_serverAdapterB_2_cnt_2$wget,
	       cap0_metaBram_serverAdapterB_2_cnt_3$wget,
	       cap0_metaBram_serverAdapterB_3_cnt_1$wget,
	       cap0_metaBram_serverAdapterB_3_cnt_2$wget,
	       cap0_metaBram_serverAdapterB_3_cnt_3$wget,
	       cap0_metaBram_serverAdapterB_cnt_1$wget,
	       cap0_metaBram_serverAdapterB_cnt_2$wget,
	       cap0_metaBram_serverAdapterB_cnt_3$wget,
	       cap0_wci_wci_Es_mCmd_w$wget,
	       cap0_wci_wslv_wEdge$wget,
	       cap0_wsi_Es_mCmd_w$wget,
	       cap0_wti_Es_mCmd_w$wget,
	       pat0_dataBram_serverAdapterA_cnt_1$wget,
	       pat0_dataBram_serverAdapterA_cnt_2$wget,
	       pat0_dataBram_serverAdapterA_cnt_3$wget,
	       pat0_dataBram_serverAdapterB_cnt_1$wget,
	       pat0_dataBram_serverAdapterB_cnt_2$wget,
	       pat0_dataBram_serverAdapterB_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_1_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_1_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_1_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_2_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_2_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_2_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_3_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_3_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_3_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_1_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_1_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_1_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_2_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_2_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_2_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_3_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_3_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_3_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_cnt_3$wget,
	       pat0_wci_wci_Es_mCmd_w$wget,
	       pat0_wci_wslv_wEdge$wget;
  wire [1 : 0] cap0_dataBram_serverAdapterA_s1_1$wget,
	       cap0_dataBram_serverAdapterA_writeWithResp$wget,
	       cap0_dataBram_serverAdapterB_s1_1$wget,
	       cap0_dataBram_serverAdapterB_writeWithResp$wget,
	       cap0_metaBram_serverAdapterA_1_s1_1$wget,
	       cap0_metaBram_serverAdapterA_1_writeWithResp$wget,
	       cap0_metaBram_serverAdapterA_2_s1_1$wget,
	       cap0_metaBram_serverAdapterA_2_writeWithResp$wget,
	       cap0_metaBram_serverAdapterA_3_s1_1$wget,
	       cap0_metaBram_serverAdapterA_3_writeWithResp$wget,
	       cap0_metaBram_serverAdapterA_s1_1$wget,
	       cap0_metaBram_serverAdapterA_writeWithResp$wget,
	       cap0_metaBram_serverAdapterB_1_s1_1$wget,
	       cap0_metaBram_serverAdapterB_1_writeWithResp$wget,
	       cap0_metaBram_serverAdapterB_2_s1_1$wget,
	       cap0_metaBram_serverAdapterB_2_writeWithResp$wget,
	       cap0_metaBram_serverAdapterB_3_s1_1$wget,
	       cap0_metaBram_serverAdapterB_3_writeWithResp$wget,
	       cap0_metaBram_serverAdapterB_s1_1$wget,
	       cap0_metaBram_serverAdapterB_writeWithResp$wget,
	       pat0_dataBram_serverAdapterA_s1_1$wget,
	       pat0_dataBram_serverAdapterA_writeWithResp$wget,
	       pat0_dataBram_serverAdapterB_s1_1$wget,
	       pat0_dataBram_serverAdapterB_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_1_s1_1$wget,
	       pat0_metaBram_serverAdapterA_1_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_2_s1_1$wget,
	       pat0_metaBram_serverAdapterA_2_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_3_s1_1$wget,
	       pat0_metaBram_serverAdapterA_3_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_s1_1$wget,
	       pat0_metaBram_serverAdapterA_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_1_s1_1$wget,
	       pat0_metaBram_serverAdapterB_1_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_2_s1_1$wget,
	       pat0_metaBram_serverAdapterB_2_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_3_s1_1$wget,
	       pat0_metaBram_serverAdapterB_3_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_s1_1$wget,
	       pat0_metaBram_serverAdapterB_writeWithResp$wget;
  wire cap0_dataBram_serverAdapterA_cnt_1$whas,
       cap0_dataBram_serverAdapterA_cnt_2$whas,
       cap0_dataBram_serverAdapterA_cnt_3$whas,
       cap0_dataBram_serverAdapterA_outData_deqCalled$whas,
       cap0_dataBram_serverAdapterA_outData_enqData$whas,
       cap0_dataBram_serverAdapterA_outData_outData$whas,
       cap0_dataBram_serverAdapterA_s1_1$whas,
       cap0_dataBram_serverAdapterA_writeWithResp$whas,
       cap0_dataBram_serverAdapterB_cnt_1$whas,
       cap0_dataBram_serverAdapterB_cnt_2$whas,
       cap0_dataBram_serverAdapterB_cnt_3$whas,
       cap0_dataBram_serverAdapterB_outData_deqCalled$whas,
       cap0_dataBram_serverAdapterB_outData_enqData$whas,
       cap0_dataBram_serverAdapterB_outData_outData$whas,
       cap0_dataBram_serverAdapterB_s1_1$whas,
       cap0_dataBram_serverAdapterB_writeWithResp$whas,
       cap0_metaBram_serverAdapterA_1_cnt_1$whas,
       cap0_metaBram_serverAdapterA_1_cnt_2$whas,
       cap0_metaBram_serverAdapterA_1_cnt_3$whas,
       cap0_metaBram_serverAdapterA_1_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterA_1_outData_enqData$whas,
       cap0_metaBram_serverAdapterA_1_outData_outData$whas,
       cap0_metaBram_serverAdapterA_1_s1_1$whas,
       cap0_metaBram_serverAdapterA_1_writeWithResp$whas,
       cap0_metaBram_serverAdapterA_2_cnt_1$whas,
       cap0_metaBram_serverAdapterA_2_cnt_2$whas,
       cap0_metaBram_serverAdapterA_2_cnt_3$whas,
       cap0_metaBram_serverAdapterA_2_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterA_2_outData_enqData$whas,
       cap0_metaBram_serverAdapterA_2_outData_outData$whas,
       cap0_metaBram_serverAdapterA_2_s1_1$whas,
       cap0_metaBram_serverAdapterA_2_writeWithResp$whas,
       cap0_metaBram_serverAdapterA_3_cnt_1$whas,
       cap0_metaBram_serverAdapterA_3_cnt_2$whas,
       cap0_metaBram_serverAdapterA_3_cnt_3$whas,
       cap0_metaBram_serverAdapterA_3_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterA_3_outData_enqData$whas,
       cap0_metaBram_serverAdapterA_3_outData_outData$whas,
       cap0_metaBram_serverAdapterA_3_s1_1$whas,
       cap0_metaBram_serverAdapterA_3_writeWithResp$whas,
       cap0_metaBram_serverAdapterA_cnt_1$whas,
       cap0_metaBram_serverAdapterA_cnt_2$whas,
       cap0_metaBram_serverAdapterA_cnt_3$whas,
       cap0_metaBram_serverAdapterA_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterA_outData_enqData$whas,
       cap0_metaBram_serverAdapterA_outData_outData$whas,
       cap0_metaBram_serverAdapterA_s1_1$whas,
       cap0_metaBram_serverAdapterA_writeWithResp$whas,
       cap0_metaBram_serverAdapterB_1_cnt_1$whas,
       cap0_metaBram_serverAdapterB_1_cnt_2$whas,
       cap0_metaBram_serverAdapterB_1_cnt_3$whas,
       cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterB_1_outData_enqData$whas,
       cap0_metaBram_serverAdapterB_1_outData_outData$whas,
       cap0_metaBram_serverAdapterB_1_s1_1$whas,
       cap0_metaBram_serverAdapterB_1_writeWithResp$whas,
       cap0_metaBram_serverAdapterB_2_cnt_1$whas,
       cap0_metaBram_serverAdapterB_2_cnt_2$whas,
       cap0_metaBram_serverAdapterB_2_cnt_3$whas,
       cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterB_2_outData_enqData$whas,
       cap0_metaBram_serverAdapterB_2_outData_outData$whas,
       cap0_metaBram_serverAdapterB_2_s1_1$whas,
       cap0_metaBram_serverAdapterB_2_writeWithResp$whas,
       cap0_metaBram_serverAdapterB_3_cnt_1$whas,
       cap0_metaBram_serverAdapterB_3_cnt_2$whas,
       cap0_metaBram_serverAdapterB_3_cnt_3$whas,
       cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterB_3_outData_enqData$whas,
       cap0_metaBram_serverAdapterB_3_outData_outData$whas,
       cap0_metaBram_serverAdapterB_3_s1_1$whas,
       cap0_metaBram_serverAdapterB_3_writeWithResp$whas,
       cap0_metaBram_serverAdapterB_cnt_1$whas,
       cap0_metaBram_serverAdapterB_cnt_2$whas,
       cap0_metaBram_serverAdapterB_cnt_3$whas,
       cap0_metaBram_serverAdapterB_outData_deqCalled$whas,
       cap0_metaBram_serverAdapterB_outData_enqData$whas,
       cap0_metaBram_serverAdapterB_outData_outData$whas,
       cap0_metaBram_serverAdapterB_s1_1$whas,
       cap0_metaBram_serverAdapterB_writeWithResp$whas,
       cap0_nowW$whas,
       cap0_statusReg_w$whas,
       cap0_wci_wci_Es_mAddrSpace_w$wget,
       cap0_wci_wci_Es_mAddrSpace_w$whas,
       cap0_wci_wci_Es_mAddr_w$whas,
       cap0_wci_wci_Es_mByteEn_w$whas,
       cap0_wci_wci_Es_mCmd_w$whas,
       cap0_wci_wci_Es_mData_w$whas,
       cap0_wci_wslv_ctlAckReg_1$wget,
       cap0_wci_wslv_ctlAckReg_1$whas,
       cap0_wci_wslv_reqF_r_clr$whas,
       cap0_wci_wslv_reqF_r_deq$whas,
       cap0_wci_wslv_reqF_r_enq$whas,
       cap0_wci_wslv_respF_dequeueing$whas,
       cap0_wci_wslv_respF_enqueueing$whas,
       cap0_wci_wslv_respF_x_wire$whas,
       cap0_wci_wslv_sFlagReg_1$wget,
       cap0_wci_wslv_sFlagReg_1$whas,
       cap0_wci_wslv_sThreadBusy_pw$whas,
       cap0_wci_wslv_wEdge$whas,
       cap0_wci_wslv_wciReq$whas,
       cap0_wci_wslv_wci_cfrd_pw$whas,
       cap0_wci_wslv_wci_cfwr_pw$whas,
       cap0_wci_wslv_wci_ctrl_pw$whas,
       cap0_wsiS_operateD_1$wget,
       cap0_wsiS_operateD_1$whas,
       cap0_wsiS_peerIsReady_1$wget,
       cap0_wsiS_peerIsReady_1$whas,
       cap0_wsiS_reqFifo_doResetClr$whas,
       cap0_wsiS_reqFifo_doResetDeq$whas,
       cap0_wsiS_reqFifo_doResetEnq$whas,
       cap0_wsiS_reqFifo_r_clr$whas,
       cap0_wsiS_reqFifo_r_deq$whas,
       cap0_wsiS_reqFifo_r_enq$whas,
       cap0_wsiS_sThreadBusy_dw$wget,
       cap0_wsiS_sThreadBusy_dw$whas,
       cap0_wsiS_wsiReq$whas,
       cap0_wsi_Es_mBurstLength_w$whas,
       cap0_wsi_Es_mBurstPrecise_w$whas,
       cap0_wsi_Es_mByteEn_w$whas,
       cap0_wsi_Es_mCmd_w$whas,
       cap0_wsi_Es_mDataInfo_w$whas,
       cap0_wsi_Es_mData_w$whas,
       cap0_wsi_Es_mReqInfo_w$whas,
       cap0_wsi_Es_mReqLast_w$whas,
       cap0_wtiS_operateD_1$wget,
       cap0_wtiS_operateD_1$whas,
       cap0_wtiS_wtiReq$whas,
       cap0_wti_Es_mCmd_w$whas,
       cap0_wti_Es_mData_w$whas,
       pat0_dataBram_serverAdapterA_cnt_1$whas,
       pat0_dataBram_serverAdapterA_cnt_2$whas,
       pat0_dataBram_serverAdapterA_cnt_3$whas,
       pat0_dataBram_serverAdapterA_outData_deqCalled$whas,
       pat0_dataBram_serverAdapterA_outData_enqData$whas,
       pat0_dataBram_serverAdapterA_outData_outData$whas,
       pat0_dataBram_serverAdapterA_s1_1$whas,
       pat0_dataBram_serverAdapterA_writeWithResp$whas,
       pat0_dataBram_serverAdapterB_cnt_1$whas,
       pat0_dataBram_serverAdapterB_cnt_2$whas,
       pat0_dataBram_serverAdapterB_cnt_3$whas,
       pat0_dataBram_serverAdapterB_outData_deqCalled$whas,
       pat0_dataBram_serverAdapterB_outData_enqData$whas,
       pat0_dataBram_serverAdapterB_outData_outData$whas,
       pat0_dataBram_serverAdapterB_s1_1$whas,
       pat0_dataBram_serverAdapterB_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_1_cnt_1$whas,
       pat0_metaBram_serverAdapterA_1_cnt_2$whas,
       pat0_metaBram_serverAdapterA_1_cnt_3$whas,
       pat0_metaBram_serverAdapterA_1_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_1_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_1_outData_outData$whas,
       pat0_metaBram_serverAdapterA_1_s1_1$whas,
       pat0_metaBram_serverAdapterA_1_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_2_cnt_1$whas,
       pat0_metaBram_serverAdapterA_2_cnt_2$whas,
       pat0_metaBram_serverAdapterA_2_cnt_3$whas,
       pat0_metaBram_serverAdapterA_2_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_2_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_2_outData_outData$whas,
       pat0_metaBram_serverAdapterA_2_s1_1$whas,
       pat0_metaBram_serverAdapterA_2_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_3_cnt_1$whas,
       pat0_metaBram_serverAdapterA_3_cnt_2$whas,
       pat0_metaBram_serverAdapterA_3_cnt_3$whas,
       pat0_metaBram_serverAdapterA_3_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_3_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_3_outData_outData$whas,
       pat0_metaBram_serverAdapterA_3_s1_1$whas,
       pat0_metaBram_serverAdapterA_3_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_cnt_1$whas,
       pat0_metaBram_serverAdapterA_cnt_2$whas,
       pat0_metaBram_serverAdapterA_cnt_3$whas,
       pat0_metaBram_serverAdapterA_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_outData_outData$whas,
       pat0_metaBram_serverAdapterA_s1_1$whas,
       pat0_metaBram_serverAdapterA_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_1_cnt_1$whas,
       pat0_metaBram_serverAdapterB_1_cnt_2$whas,
       pat0_metaBram_serverAdapterB_1_cnt_3$whas,
       pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_1_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_1_outData_outData$whas,
       pat0_metaBram_serverAdapterB_1_s1_1$whas,
       pat0_metaBram_serverAdapterB_1_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_2_cnt_1$whas,
       pat0_metaBram_serverAdapterB_2_cnt_2$whas,
       pat0_metaBram_serverAdapterB_2_cnt_3$whas,
       pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_2_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_2_outData_outData$whas,
       pat0_metaBram_serverAdapterB_2_s1_1$whas,
       pat0_metaBram_serverAdapterB_2_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_3_cnt_1$whas,
       pat0_metaBram_serverAdapterB_3_cnt_2$whas,
       pat0_metaBram_serverAdapterB_3_cnt_3$whas,
       pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_3_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_3_outData_outData$whas,
       pat0_metaBram_serverAdapterB_3_s1_1$whas,
       pat0_metaBram_serverAdapterB_3_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_cnt_1$whas,
       pat0_metaBram_serverAdapterB_cnt_2$whas,
       pat0_metaBram_serverAdapterB_cnt_3$whas,
       pat0_metaBram_serverAdapterB_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_outData_outData$whas,
       pat0_metaBram_serverAdapterB_s1_1$whas,
       pat0_metaBram_serverAdapterB_writeWithResp$whas,
       pat0_metaPtr_decAction$whas,
       pat0_metaPtr_incAction$whas,
       pat0_statusReg_w$whas,
       pat0_wci_wci_Es_mAddrSpace_w$wget,
       pat0_wci_wci_Es_mAddrSpace_w$whas,
       pat0_wci_wci_Es_mAddr_w$whas,
       pat0_wci_wci_Es_mByteEn_w$whas,
       pat0_wci_wci_Es_mCmd_w$whas,
       pat0_wci_wci_Es_mData_w$whas,
       pat0_wci_wslv_ctlAckReg_1$wget,
       pat0_wci_wslv_ctlAckReg_1$whas,
       pat0_wci_wslv_reqF_r_clr$whas,
       pat0_wci_wslv_reqF_r_deq$whas,
       pat0_wci_wslv_reqF_r_enq$whas,
       pat0_wci_wslv_respF_dequeueing$whas,
       pat0_wci_wslv_respF_enqueueing$whas,
       pat0_wci_wslv_respF_x_wire$whas,
       pat0_wci_wslv_sFlagReg_1$wget,
       pat0_wci_wslv_sFlagReg_1$whas,
       pat0_wci_wslv_sThreadBusy_pw$whas,
       pat0_wci_wslv_wEdge$whas,
       pat0_wci_wslv_wciReq$whas,
       pat0_wci_wslv_wci_cfrd_pw$whas,
       pat0_wci_wslv_wci_cfwr_pw$whas,
       pat0_wci_wslv_wci_ctrl_pw$whas,
       pat0_wsiM_operateD_1$wget,
       pat0_wsiM_operateD_1$whas,
       pat0_wsiM_peerIsReady_1$wget,
       pat0_wsiM_peerIsReady_1$whas,
       pat0_wsiM_reqFifo_dequeueing$whas,
       pat0_wsiM_reqFifo_enqueueing$whas,
       pat0_wsiM_reqFifo_x_wire$whas,
       pat0_wsiM_sThreadBusy_pw$whas;

  // register cap0_controlReg
  reg [31 : 0] cap0_controlReg;
  wire [31 : 0] cap0_controlReg$D_IN;
  wire cap0_controlReg$EN;

  // register cap0_dataBram_serverAdapterA_cnt
  reg [2 : 0] cap0_dataBram_serverAdapterA_cnt;
  wire [2 : 0] cap0_dataBram_serverAdapterA_cnt$D_IN;
  wire cap0_dataBram_serverAdapterA_cnt$EN;

  // register cap0_dataBram_serverAdapterA_s1
  reg [1 : 0] cap0_dataBram_serverAdapterA_s1;
  wire [1 : 0] cap0_dataBram_serverAdapterA_s1$D_IN;
  wire cap0_dataBram_serverAdapterA_s1$EN;

  // register cap0_dataBram_serverAdapterB_cnt
  reg [2 : 0] cap0_dataBram_serverAdapterB_cnt;
  wire [2 : 0] cap0_dataBram_serverAdapterB_cnt$D_IN;
  wire cap0_dataBram_serverAdapterB_cnt$EN;

  // register cap0_dataBram_serverAdapterB_s1
  reg [1 : 0] cap0_dataBram_serverAdapterB_s1;
  wire [1 : 0] cap0_dataBram_serverAdapterB_s1$D_IN;
  wire cap0_dataBram_serverAdapterB_s1$EN;

  // register cap0_dataCount
  reg [31 : 0] cap0_dataCount;
  reg [31 : 0] cap0_dataCount$D_IN;
  wire cap0_dataCount$EN;

  // register cap0_isFirst
  reg cap0_isFirst;
  wire cap0_isFirst$D_IN, cap0_isFirst$EN;

  // register cap0_mesgLengthSoFar
  reg [13 : 0] cap0_mesgLengthSoFar;
  wire [13 : 0] cap0_mesgLengthSoFar$D_IN;
  wire cap0_mesgLengthSoFar$EN;

  // register cap0_metaBram_serverAdapterA_1_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterA_1_cnt$D_IN;
  wire cap0_metaBram_serverAdapterA_1_cnt$EN;

  // register cap0_metaBram_serverAdapterA_1_s1
  reg [1 : 0] cap0_metaBram_serverAdapterA_1_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterA_1_s1$D_IN;
  wire cap0_metaBram_serverAdapterA_1_s1$EN;

  // register cap0_metaBram_serverAdapterA_2_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterA_2_cnt$D_IN;
  wire cap0_metaBram_serverAdapterA_2_cnt$EN;

  // register cap0_metaBram_serverAdapterA_2_s1
  reg [1 : 0] cap0_metaBram_serverAdapterA_2_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterA_2_s1$D_IN;
  wire cap0_metaBram_serverAdapterA_2_s1$EN;

  // register cap0_metaBram_serverAdapterA_3_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterA_3_cnt$D_IN;
  wire cap0_metaBram_serverAdapterA_3_cnt$EN;

  // register cap0_metaBram_serverAdapterA_3_s1
  reg [1 : 0] cap0_metaBram_serverAdapterA_3_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterA_3_s1$D_IN;
  wire cap0_metaBram_serverAdapterA_3_s1$EN;

  // register cap0_metaBram_serverAdapterA_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterA_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterA_cnt$D_IN;
  wire cap0_metaBram_serverAdapterA_cnt$EN;

  // register cap0_metaBram_serverAdapterA_s1
  reg [1 : 0] cap0_metaBram_serverAdapterA_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterA_s1$D_IN;
  wire cap0_metaBram_serverAdapterA_s1$EN;

  // register cap0_metaBram_serverAdapterB_1_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterB_1_cnt$D_IN;
  wire cap0_metaBram_serverAdapterB_1_cnt$EN;

  // register cap0_metaBram_serverAdapterB_1_s1
  reg [1 : 0] cap0_metaBram_serverAdapterB_1_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterB_1_s1$D_IN;
  wire cap0_metaBram_serverAdapterB_1_s1$EN;

  // register cap0_metaBram_serverAdapterB_2_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterB_2_cnt$D_IN;
  wire cap0_metaBram_serverAdapterB_2_cnt$EN;

  // register cap0_metaBram_serverAdapterB_2_s1
  reg [1 : 0] cap0_metaBram_serverAdapterB_2_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterB_2_s1$D_IN;
  wire cap0_metaBram_serverAdapterB_2_s1$EN;

  // register cap0_metaBram_serverAdapterB_3_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterB_3_cnt$D_IN;
  wire cap0_metaBram_serverAdapterB_3_cnt$EN;

  // register cap0_metaBram_serverAdapterB_3_s1
  reg [1 : 0] cap0_metaBram_serverAdapterB_3_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterB_3_s1$D_IN;
  wire cap0_metaBram_serverAdapterB_3_s1$EN;

  // register cap0_metaBram_serverAdapterB_cnt
  reg [2 : 0] cap0_metaBram_serverAdapterB_cnt;
  wire [2 : 0] cap0_metaBram_serverAdapterB_cnt$D_IN;
  wire cap0_metaBram_serverAdapterB_cnt$EN;

  // register cap0_metaBram_serverAdapterB_s1
  reg [1 : 0] cap0_metaBram_serverAdapterB_s1;
  wire [1 : 0] cap0_metaBram_serverAdapterB_s1$D_IN;
  wire cap0_metaBram_serverAdapterB_s1$EN;

  // register cap0_metaCount
  reg [31 : 0] cap0_metaCount;
  reg [31 : 0] cap0_metaCount$D_IN;
  wire cap0_metaCount$EN;

  // register cap0_splitReadInFlight
  reg cap0_splitReadInFlight;
  wire cap0_splitReadInFlight$D_IN, cap0_splitReadInFlight$EN;

  // register cap0_wci_wslv_cEdge
  reg [2 : 0] cap0_wci_wslv_cEdge;
  wire [2 : 0] cap0_wci_wslv_cEdge$D_IN;
  wire cap0_wci_wslv_cEdge$EN;

  // register cap0_wci_wslv_cState
  reg [2 : 0] cap0_wci_wslv_cState;
  wire [2 : 0] cap0_wci_wslv_cState$D_IN;
  wire cap0_wci_wslv_cState$EN;

  // register cap0_wci_wslv_ctlAckReg
  reg cap0_wci_wslv_ctlAckReg;
  wire cap0_wci_wslv_ctlAckReg$D_IN, cap0_wci_wslv_ctlAckReg$EN;

  // register cap0_wci_wslv_ctlOpActive
  reg cap0_wci_wslv_ctlOpActive;
  wire cap0_wci_wslv_ctlOpActive$D_IN, cap0_wci_wslv_ctlOpActive$EN;

  // register cap0_wci_wslv_illegalEdge
  reg cap0_wci_wslv_illegalEdge;
  wire cap0_wci_wslv_illegalEdge$D_IN, cap0_wci_wslv_illegalEdge$EN;

  // register cap0_wci_wslv_isReset_isInReset
  reg cap0_wci_wslv_isReset_isInReset;
  wire cap0_wci_wslv_isReset_isInReset$D_IN,
       cap0_wci_wslv_isReset_isInReset$EN;

  // register cap0_wci_wslv_nState
  reg [2 : 0] cap0_wci_wslv_nState;
  reg [2 : 0] cap0_wci_wslv_nState$D_IN;
  wire cap0_wci_wslv_nState$EN;

  // register cap0_wci_wslv_reqF_countReg
  reg [1 : 0] cap0_wci_wslv_reqF_countReg;
  wire [1 : 0] cap0_wci_wslv_reqF_countReg$D_IN;
  wire cap0_wci_wslv_reqF_countReg$EN;

  // register cap0_wci_wslv_respF_c_r
  reg [1 : 0] cap0_wci_wslv_respF_c_r;
  wire [1 : 0] cap0_wci_wslv_respF_c_r$D_IN;
  wire cap0_wci_wslv_respF_c_r$EN;

  // register cap0_wci_wslv_respF_q_0
  reg [33 : 0] cap0_wci_wslv_respF_q_0;
  reg [33 : 0] cap0_wci_wslv_respF_q_0$D_IN;
  wire cap0_wci_wslv_respF_q_0$EN;

  // register cap0_wci_wslv_respF_q_1
  reg [33 : 0] cap0_wci_wslv_respF_q_1;
  reg [33 : 0] cap0_wci_wslv_respF_q_1$D_IN;
  wire cap0_wci_wslv_respF_q_1$EN;

  // register cap0_wci_wslv_sFlagReg
  reg cap0_wci_wslv_sFlagReg;
  wire cap0_wci_wslv_sFlagReg$D_IN, cap0_wci_wslv_sFlagReg$EN;

  // register cap0_wci_wslv_sThreadBusy_d
  reg cap0_wci_wslv_sThreadBusy_d;
  wire cap0_wci_wslv_sThreadBusy_d$D_IN, cap0_wci_wslv_sThreadBusy_d$EN;

  // register cap0_wsiS_burstKind
  reg [1 : 0] cap0_wsiS_burstKind;
  wire [1 : 0] cap0_wsiS_burstKind$D_IN;
  wire cap0_wsiS_burstKind$EN;

  // register cap0_wsiS_errorSticky
  reg cap0_wsiS_errorSticky;
  wire cap0_wsiS_errorSticky$D_IN, cap0_wsiS_errorSticky$EN;

  // register cap0_wsiS_iMesgCount
  reg [31 : 0] cap0_wsiS_iMesgCount;
  wire [31 : 0] cap0_wsiS_iMesgCount$D_IN;
  wire cap0_wsiS_iMesgCount$EN;

  // register cap0_wsiS_isReset_isInReset
  reg cap0_wsiS_isReset_isInReset;
  wire cap0_wsiS_isReset_isInReset$D_IN, cap0_wsiS_isReset_isInReset$EN;

  // register cap0_wsiS_mesgWordLength
  reg [11 : 0] cap0_wsiS_mesgWordLength;
  wire [11 : 0] cap0_wsiS_mesgWordLength$D_IN;
  wire cap0_wsiS_mesgWordLength$EN;

  // register cap0_wsiS_operateD
  reg cap0_wsiS_operateD;
  wire cap0_wsiS_operateD$D_IN, cap0_wsiS_operateD$EN;

  // register cap0_wsiS_pMesgCount
  reg [31 : 0] cap0_wsiS_pMesgCount;
  wire [31 : 0] cap0_wsiS_pMesgCount$D_IN;
  wire cap0_wsiS_pMesgCount$EN;

  // register cap0_wsiS_peerIsReady
  reg cap0_wsiS_peerIsReady;
  wire cap0_wsiS_peerIsReady$D_IN, cap0_wsiS_peerIsReady$EN;

  // register cap0_wsiS_reqFifo_countReg
  reg [1 : 0] cap0_wsiS_reqFifo_countReg;
  wire [1 : 0] cap0_wsiS_reqFifo_countReg$D_IN;
  wire cap0_wsiS_reqFifo_countReg$EN;

  // register cap0_wsiS_reqFifo_levelsValid
  reg cap0_wsiS_reqFifo_levelsValid;
  wire cap0_wsiS_reqFifo_levelsValid$D_IN, cap0_wsiS_reqFifo_levelsValid$EN;

  // register cap0_wsiS_statusR
  reg [7 : 0] cap0_wsiS_statusR;
  wire [7 : 0] cap0_wsiS_statusR$D_IN;
  wire cap0_wsiS_statusR$EN;

  // register cap0_wsiS_tBusyCount
  reg [31 : 0] cap0_wsiS_tBusyCount;
  wire [31 : 0] cap0_wsiS_tBusyCount$D_IN;
  wire cap0_wsiS_tBusyCount$EN;

  // register cap0_wsiS_trafficSticky
  reg cap0_wsiS_trafficSticky;
  wire cap0_wsiS_trafficSticky$D_IN, cap0_wsiS_trafficSticky$EN;

  // register cap0_wsiS_wordCount
  reg [11 : 0] cap0_wsiS_wordCount;
  wire [11 : 0] cap0_wsiS_wordCount$D_IN;
  wire cap0_wsiS_wordCount$EN;

  // register cap0_wtiS_isReset_isInReset
  reg cap0_wtiS_isReset_isInReset;
  wire cap0_wtiS_isReset_isInReset$D_IN, cap0_wtiS_isReset_isInReset$EN;

  // register cap0_wtiS_nowReq
  reg [66 : 0] cap0_wtiS_nowReq;
  wire [66 : 0] cap0_wtiS_nowReq$D_IN;
  wire cap0_wtiS_nowReq$EN;

  // register cap0_wtiS_operateD
  reg cap0_wtiS_operateD;
  wire cap0_wtiS_operateD$D_IN, cap0_wtiS_operateD$EN;

  // register pat0_bytesRemain
  reg [31 : 0] pat0_bytesRemain;
  wire [31 : 0] pat0_bytesRemain$D_IN;
  wire pat0_bytesRemain$EN;

  // register pat0_controlReg
  reg [31 : 0] pat0_controlReg;
  wire [31 : 0] pat0_controlReg$D_IN;
  wire pat0_controlReg$EN;

  // register pat0_dataBram_serverAdapterA_cnt
  reg [2 : 0] pat0_dataBram_serverAdapterA_cnt;
  wire [2 : 0] pat0_dataBram_serverAdapterA_cnt$D_IN;
  wire pat0_dataBram_serverAdapterA_cnt$EN;

  // register pat0_dataBram_serverAdapterA_s1
  reg [1 : 0] pat0_dataBram_serverAdapterA_s1;
  wire [1 : 0] pat0_dataBram_serverAdapterA_s1$D_IN;
  wire pat0_dataBram_serverAdapterA_s1$EN;

  // register pat0_dataBram_serverAdapterB_cnt
  reg [2 : 0] pat0_dataBram_serverAdapterB_cnt;
  wire [2 : 0] pat0_dataBram_serverAdapterB_cnt$D_IN;
  wire pat0_dataBram_serverAdapterB_cnt$EN;

  // register pat0_dataBram_serverAdapterB_s1
  reg [1 : 0] pat0_dataBram_serverAdapterB_s1;
  wire [1 : 0] pat0_dataBram_serverAdapterB_s1$D_IN;
  wire pat0_dataBram_serverAdapterB_s1$EN;

  // register pat0_dataCount
  reg [31 : 0] pat0_dataCount;
  reg [31 : 0] pat0_dataCount$D_IN;
  wire pat0_dataCount$EN;

  // register pat0_dataPtr
  reg [31 : 0] pat0_dataPtr;
  wire [31 : 0] pat0_dataPtr$D_IN;
  wire pat0_dataPtr$EN;

  // register pat0_doZLM
  reg pat0_doZLM;
  wire pat0_doZLM$D_IN, pat0_doZLM$EN;

  // register pat0_isFirst
  reg pat0_isFirst;
  wire pat0_isFirst$D_IN, pat0_isFirst$EN;

  // register pat0_mesgCount
  reg [31 : 0] pat0_mesgCount;
  reg [31 : 0] pat0_mesgCount$D_IN;
  wire pat0_mesgCount$EN;

  // register pat0_mesgLengthSoFar
  reg [13 : 0] pat0_mesgLengthSoFar;
  wire [13 : 0] pat0_mesgLengthSoFar$D_IN;
  wire pat0_mesgLengthSoFar$EN;

  // register pat0_mesgRemain
  reg [31 : 0] pat0_mesgRemain;
  wire [31 : 0] pat0_mesgRemain$D_IN;
  wire pat0_mesgRemain$EN;

  // register pat0_metaBram_serverAdapterA_1_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_1_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_1_cnt$EN;

  // register pat0_metaBram_serverAdapterA_1_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_1_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_1_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_1_s1$EN;

  // register pat0_metaBram_serverAdapterA_2_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_2_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_2_cnt$EN;

  // register pat0_metaBram_serverAdapterA_2_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_2_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_2_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_2_s1$EN;

  // register pat0_metaBram_serverAdapterA_3_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_3_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_3_cnt$EN;

  // register pat0_metaBram_serverAdapterA_3_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_3_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_3_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_3_s1$EN;

  // register pat0_metaBram_serverAdapterA_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_cnt$EN;

  // register pat0_metaBram_serverAdapterA_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_s1$EN;

  // register pat0_metaBram_serverAdapterB_1_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_1_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_1_cnt$EN;

  // register pat0_metaBram_serverAdapterB_1_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_1_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_1_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_1_s1$EN;

  // register pat0_metaBram_serverAdapterB_2_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_2_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_2_cnt$EN;

  // register pat0_metaBram_serverAdapterB_2_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_2_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_2_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_2_s1$EN;

  // register pat0_metaBram_serverAdapterB_3_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_3_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_3_cnt$EN;

  // register pat0_metaBram_serverAdapterB_3_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_3_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_3_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_3_s1$EN;

  // register pat0_metaBram_serverAdapterB_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_cnt$EN;

  // register pat0_metaBram_serverAdapterB_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_s1$EN;

  // register pat0_metaPtr_modulus
  reg [15 : 0] pat0_metaPtr_modulus;
  wire [15 : 0] pat0_metaPtr_modulus$D_IN;
  wire pat0_metaPtr_modulus$EN;

  // register pat0_metaPtr_value
  reg [15 : 0] pat0_metaPtr_value;
  wire [15 : 0] pat0_metaPtr_value$D_IN;
  wire pat0_metaPtr_value$EN;

  // register pat0_splitReadInFlight
  reg pat0_splitReadInFlight;
  wire pat0_splitReadInFlight$D_IN, pat0_splitReadInFlight$EN;

  // register pat0_thisLength
  reg [31 : 0] pat0_thisLength;
  wire [31 : 0] pat0_thisLength$D_IN;
  wire pat0_thisLength$EN;

  // register pat0_thisOpcode
  reg [31 : 0] pat0_thisOpcode;
  wire [31 : 0] pat0_thisOpcode$D_IN;
  wire pat0_thisOpcode$EN;

  // register pat0_thisTLS
  reg [31 : 0] pat0_thisTLS;
  wire [31 : 0] pat0_thisTLS$D_IN;
  wire pat0_thisTLS$EN;

  // register pat0_thisTMS
  reg [31 : 0] pat0_thisTMS;
  wire [31 : 0] pat0_thisTMS$D_IN;
  wire pat0_thisTMS$EN;

  // register pat0_unrollCnt
  reg [15 : 0] pat0_unrollCnt;
  wire [15 : 0] pat0_unrollCnt$D_IN;
  wire pat0_unrollCnt$EN;

  // register pat0_wci_wslv_cEdge
  reg [2 : 0] pat0_wci_wslv_cEdge;
  wire [2 : 0] pat0_wci_wslv_cEdge$D_IN;
  wire pat0_wci_wslv_cEdge$EN;

  // register pat0_wci_wslv_cState
  reg [2 : 0] pat0_wci_wslv_cState;
  wire [2 : 0] pat0_wci_wslv_cState$D_IN;
  wire pat0_wci_wslv_cState$EN;

  // register pat0_wci_wslv_ctlAckReg
  reg pat0_wci_wslv_ctlAckReg;
  wire pat0_wci_wslv_ctlAckReg$D_IN, pat0_wci_wslv_ctlAckReg$EN;

  // register pat0_wci_wslv_ctlOpActive
  reg pat0_wci_wslv_ctlOpActive;
  wire pat0_wci_wslv_ctlOpActive$D_IN, pat0_wci_wslv_ctlOpActive$EN;

  // register pat0_wci_wslv_illegalEdge
  reg pat0_wci_wslv_illegalEdge;
  wire pat0_wci_wslv_illegalEdge$D_IN, pat0_wci_wslv_illegalEdge$EN;

  // register pat0_wci_wslv_isReset_isInReset
  reg pat0_wci_wslv_isReset_isInReset;
  wire pat0_wci_wslv_isReset_isInReset$D_IN,
       pat0_wci_wslv_isReset_isInReset$EN;

  // register pat0_wci_wslv_nState
  reg [2 : 0] pat0_wci_wslv_nState;
  reg [2 : 0] pat0_wci_wslv_nState$D_IN;
  wire pat0_wci_wslv_nState$EN;

  // register pat0_wci_wslv_reqF_countReg
  reg [1 : 0] pat0_wci_wslv_reqF_countReg;
  wire [1 : 0] pat0_wci_wslv_reqF_countReg$D_IN;
  wire pat0_wci_wslv_reqF_countReg$EN;

  // register pat0_wci_wslv_respF_c_r
  reg [1 : 0] pat0_wci_wslv_respF_c_r;
  wire [1 : 0] pat0_wci_wslv_respF_c_r$D_IN;
  wire pat0_wci_wslv_respF_c_r$EN;

  // register pat0_wci_wslv_respF_q_0
  reg [33 : 0] pat0_wci_wslv_respF_q_0;
  reg [33 : 0] pat0_wci_wslv_respF_q_0$D_IN;
  wire pat0_wci_wslv_respF_q_0$EN;

  // register pat0_wci_wslv_respF_q_1
  reg [33 : 0] pat0_wci_wslv_respF_q_1;
  reg [33 : 0] pat0_wci_wslv_respF_q_1$D_IN;
  wire pat0_wci_wslv_respF_q_1$EN;

  // register pat0_wci_wslv_sFlagReg
  reg pat0_wci_wslv_sFlagReg;
  wire pat0_wci_wslv_sFlagReg$D_IN, pat0_wci_wslv_sFlagReg$EN;

  // register pat0_wci_wslv_sThreadBusy_d
  reg pat0_wci_wslv_sThreadBusy_d;
  wire pat0_wci_wslv_sThreadBusy_d$D_IN, pat0_wci_wslv_sThreadBusy_d$EN;

  // register pat0_wsiM_burstKind
  reg [1 : 0] pat0_wsiM_burstKind;
  wire [1 : 0] pat0_wsiM_burstKind$D_IN;
  wire pat0_wsiM_burstKind$EN;

  // register pat0_wsiM_errorSticky
  reg pat0_wsiM_errorSticky;
  wire pat0_wsiM_errorSticky$D_IN, pat0_wsiM_errorSticky$EN;

  // register pat0_wsiM_iMesgCount
  reg [31 : 0] pat0_wsiM_iMesgCount;
  wire [31 : 0] pat0_wsiM_iMesgCount$D_IN;
  wire pat0_wsiM_iMesgCount$EN;

  // register pat0_wsiM_isReset_isInReset
  reg pat0_wsiM_isReset_isInReset;
  wire pat0_wsiM_isReset_isInReset$D_IN, pat0_wsiM_isReset_isInReset$EN;

  // register pat0_wsiM_operateD
  reg pat0_wsiM_operateD;
  wire pat0_wsiM_operateD$D_IN, pat0_wsiM_operateD$EN;

  // register pat0_wsiM_pMesgCount
  reg [31 : 0] pat0_wsiM_pMesgCount;
  wire [31 : 0] pat0_wsiM_pMesgCount$D_IN;
  wire pat0_wsiM_pMesgCount$EN;

  // register pat0_wsiM_peerIsReady
  reg pat0_wsiM_peerIsReady;
  wire pat0_wsiM_peerIsReady$D_IN, pat0_wsiM_peerIsReady$EN;

  // register pat0_wsiM_reqFifo_c_r
  reg [1 : 0] pat0_wsiM_reqFifo_c_r;
  wire [1 : 0] pat0_wsiM_reqFifo_c_r$D_IN;
  wire pat0_wsiM_reqFifo_c_r$EN;

  // register pat0_wsiM_reqFifo_q_0
  reg [60 : 0] pat0_wsiM_reqFifo_q_0;
  reg [60 : 0] pat0_wsiM_reqFifo_q_0$D_IN;
  wire pat0_wsiM_reqFifo_q_0$EN;

  // register pat0_wsiM_reqFifo_q_1
  reg [60 : 0] pat0_wsiM_reqFifo_q_1;
  reg [60 : 0] pat0_wsiM_reqFifo_q_1$D_IN;
  wire pat0_wsiM_reqFifo_q_1$EN;

  // register pat0_wsiM_sThreadBusy_d
  reg pat0_wsiM_sThreadBusy_d;
  wire pat0_wsiM_sThreadBusy_d$D_IN, pat0_wsiM_sThreadBusy_d$EN;

  // register pat0_wsiM_statusR
  reg [7 : 0] pat0_wsiM_statusR;
  wire [7 : 0] pat0_wsiM_statusR$D_IN;
  wire pat0_wsiM_statusR$EN;

  // register pat0_wsiM_tBusyCount
  reg [31 : 0] pat0_wsiM_tBusyCount;
  wire [31 : 0] pat0_wsiM_tBusyCount$D_IN;
  wire pat0_wsiM_tBusyCount$EN;

  // register pat0_wsiM_trafficSticky
  reg pat0_wsiM_trafficSticky;
  wire pat0_wsiM_trafficSticky$D_IN, pat0_wsiM_trafficSticky$EN;

  // register simCycle
  reg [15 : 0] simCycle;
  wire [15 : 0] simCycle$D_IN;
  wire simCycle$EN;

  // ports of submodule bias
  wire [31 : 0] bias$wciS0_MAddr,
		bias$wciS0_MData,
		bias$wciS0_SData,
		bias$wsiM0_MData,
		bias$wsiS0_MData;
  wire [11 : 0] bias$wsiM0_MBurstLength, bias$wsiS0_MBurstLength;
  wire [7 : 0] bias$wsiM0_MReqInfo, bias$wsiS0_MReqInfo;
  wire [3 : 0] bias$wciS0_MByteEn, bias$wsiM0_MByteEn, bias$wsiS0_MByteEn;
  wire [2 : 0] bias$wciS0_MCmd, bias$wsiM0_MCmd, bias$wsiS0_MCmd;
  wire [1 : 0] bias$wciS0_MFlag, bias$wciS0_SFlag, bias$wciS0_SResp;
  wire bias$wciS0_MAddrSpace,
       bias$wciS0_SThreadBusy,
       bias$wsiM0_MBurstPrecise,
       bias$wsiM0_MReqLast,
       bias$wsiM0_MReset_n,
       bias$wsiM0_SReset_n,
       bias$wsiM0_SThreadBusy,
       bias$wsiS0_MBurstPrecise,
       bias$wsiS0_MReqLast,
       bias$wsiS0_MReset_n,
       bias$wsiS0_SReset_n,
       bias$wsiS0_SThreadBusy;

  // ports of submodule cap0_dataBram_memory
  wire [31 : 0] cap0_dataBram_memory$DIA,
		cap0_dataBram_memory$DIB,
		cap0_dataBram_memory$DOA,
		cap0_dataBram_memory$DOB;
  wire [9 : 0] cap0_dataBram_memory$ADDRA, cap0_dataBram_memory$ADDRB;
  wire cap0_dataBram_memory$ENA,
       cap0_dataBram_memory$ENB,
       cap0_dataBram_memory$WEA,
       cap0_dataBram_memory$WEB;

  // ports of submodule cap0_dataBram_serverAdapterA_outDataCore
  wire [31 : 0] cap0_dataBram_serverAdapterA_outDataCore$D_IN,
		cap0_dataBram_serverAdapterA_outDataCore$D_OUT;
  wire cap0_dataBram_serverAdapterA_outDataCore$CLR,
       cap0_dataBram_serverAdapterA_outDataCore$DEQ,
       cap0_dataBram_serverAdapterA_outDataCore$EMPTY_N,
       cap0_dataBram_serverAdapterA_outDataCore$ENQ,
       cap0_dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule cap0_dataBram_serverAdapterB_outDataCore
  wire [31 : 0] cap0_dataBram_serverAdapterB_outDataCore$D_IN,
		cap0_dataBram_serverAdapterB_outDataCore$D_OUT;
  wire cap0_dataBram_serverAdapterB_outDataCore$CLR,
       cap0_dataBram_serverAdapterB_outDataCore$DEQ,
       cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N,
       cap0_dataBram_serverAdapterB_outDataCore$ENQ,
       cap0_dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_memory
  wire [31 : 0] cap0_metaBram_memory$DIA,
		cap0_metaBram_memory$DIB,
		cap0_metaBram_memory$DOA,
		cap0_metaBram_memory$DOB;
  wire [9 : 0] cap0_metaBram_memory$ADDRA, cap0_metaBram_memory$ADDRB;
  wire cap0_metaBram_memory$ENA,
       cap0_metaBram_memory$ENB,
       cap0_metaBram_memory$WEA,
       cap0_metaBram_memory$WEB;

  // ports of submodule cap0_metaBram_memory_1
  wire [31 : 0] cap0_metaBram_memory_1$DIA,
		cap0_metaBram_memory_1$DIB,
		cap0_metaBram_memory_1$DOA,
		cap0_metaBram_memory_1$DOB;
  wire [9 : 0] cap0_metaBram_memory_1$ADDRA, cap0_metaBram_memory_1$ADDRB;
  wire cap0_metaBram_memory_1$ENA,
       cap0_metaBram_memory_1$ENB,
       cap0_metaBram_memory_1$WEA,
       cap0_metaBram_memory_1$WEB;

  // ports of submodule cap0_metaBram_memory_2
  wire [31 : 0] cap0_metaBram_memory_2$DIA,
		cap0_metaBram_memory_2$DIB,
		cap0_metaBram_memory_2$DOA,
		cap0_metaBram_memory_2$DOB;
  wire [9 : 0] cap0_metaBram_memory_2$ADDRA, cap0_metaBram_memory_2$ADDRB;
  wire cap0_metaBram_memory_2$ENA,
       cap0_metaBram_memory_2$ENB,
       cap0_metaBram_memory_2$WEA,
       cap0_metaBram_memory_2$WEB;

  // ports of submodule cap0_metaBram_memory_3
  wire [31 : 0] cap0_metaBram_memory_3$DIA,
		cap0_metaBram_memory_3$DIB,
		cap0_metaBram_memory_3$DOA,
		cap0_metaBram_memory_3$DOB;
  wire [9 : 0] cap0_metaBram_memory_3$ADDRA, cap0_metaBram_memory_3$ADDRB;
  wire cap0_metaBram_memory_3$ENA,
       cap0_metaBram_memory_3$ENB,
       cap0_metaBram_memory_3$WEA,
       cap0_metaBram_memory_3$WEB;

  // ports of submodule cap0_metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterA_1_outDataCore$D_IN,
		cap0_metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterA_1_outDataCore$CLR,
       cap0_metaBram_serverAdapterA_1_outDataCore$DEQ,
       cap0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterA_1_outDataCore$ENQ,
       cap0_metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterA_2_outDataCore$D_IN,
		cap0_metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterA_2_outDataCore$CLR,
       cap0_metaBram_serverAdapterA_2_outDataCore$DEQ,
       cap0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterA_2_outDataCore$ENQ,
       cap0_metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterA_3_outDataCore$D_IN,
		cap0_metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterA_3_outDataCore$CLR,
       cap0_metaBram_serverAdapterA_3_outDataCore$DEQ,
       cap0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterA_3_outDataCore$ENQ,
       cap0_metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_serverAdapterA_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterA_outDataCore$D_IN,
		cap0_metaBram_serverAdapterA_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterA_outDataCore$CLR,
       cap0_metaBram_serverAdapterA_outDataCore$DEQ,
       cap0_metaBram_serverAdapterA_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterA_outDataCore$ENQ,
       cap0_metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterB_1_outDataCore$D_IN,
		cap0_metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterB_1_outDataCore$CLR,
       cap0_metaBram_serverAdapterB_1_outDataCore$DEQ,
       cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterB_1_outDataCore$ENQ,
       cap0_metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterB_2_outDataCore$D_IN,
		cap0_metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterB_2_outDataCore$CLR,
       cap0_metaBram_serverAdapterB_2_outDataCore$DEQ,
       cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterB_2_outDataCore$ENQ,
       cap0_metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterB_3_outDataCore$D_IN,
		cap0_metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterB_3_outDataCore$CLR,
       cap0_metaBram_serverAdapterB_3_outDataCore$DEQ,
       cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterB_3_outDataCore$ENQ,
       cap0_metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule cap0_metaBram_serverAdapterB_outDataCore
  wire [31 : 0] cap0_metaBram_serverAdapterB_outDataCore$D_IN,
		cap0_metaBram_serverAdapterB_outDataCore$D_OUT;
  wire cap0_metaBram_serverAdapterB_outDataCore$CLR,
       cap0_metaBram_serverAdapterB_outDataCore$DEQ,
       cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N,
       cap0_metaBram_serverAdapterB_outDataCore$ENQ,
       cap0_metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule cap0_splaF
  wire [2 : 0] cap0_splaF$D_IN, cap0_splaF$D_OUT;
  wire cap0_splaF$CLR,
       cap0_splaF$DEQ,
       cap0_splaF$EMPTY_N,
       cap0_splaF$ENQ,
       cap0_splaF$FULL_N;

  // ports of submodule cap0_wci_wslv_reqF
  wire [71 : 0] cap0_wci_wslv_reqF$D_IN, cap0_wci_wslv_reqF$D_OUT;
  wire cap0_wci_wslv_reqF$CLR,
       cap0_wci_wslv_reqF$DEQ,
       cap0_wci_wslv_reqF$EMPTY_N,
       cap0_wci_wslv_reqF$ENQ;

  // ports of submodule cap0_wsiS_reqFifo
  wire [60 : 0] cap0_wsiS_reqFifo$D_IN, cap0_wsiS_reqFifo$D_OUT;
  wire cap0_wsiS_reqFifo$CLR,
       cap0_wsiS_reqFifo$DEQ,
       cap0_wsiS_reqFifo$EMPTY_N,
       cap0_wsiS_reqFifo$ENQ,
       cap0_wsiS_reqFifo$FULL_N;

  // ports of submodule cp
  wire [511 : 0] cp$uuid_arg;
  wire [58 : 0] cp$server_request_put;
  wire [39 : 0] cp$server_response_get;
  wire [31 : 0] cp$wci_Vm_0_SData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_MAddr,
		cp$wci_Vm_2_MData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_MAddr,
		cp$wci_Vm_3_MData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_MAddr,
		cp$wci_Vm_4_MData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_SData;
  wire [3 : 0] cp$wci_Vm_2_MByteEn, cp$wci_Vm_3_MByteEn, cp$wci_Vm_4_MByteEn;
  wire [2 : 0] cp$switch_x,
	       cp$wci_Vm_2_MCmd,
	       cp$wci_Vm_3_MCmd,
	       cp$wci_Vm_4_MCmd;
  wire [1 : 0] cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_MFlag,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_2,
       cp$RST_N_wci_Vm_3,
       cp$RST_N_wci_Vm_4,
       cp$gps_ppsSyncIn_x,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_MAddrSpace,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_MAddrSpace,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_MAddrSpace,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule pat0_dataBram_memory
  wire [31 : 0] pat0_dataBram_memory$DIA,
		pat0_dataBram_memory$DIB,
		pat0_dataBram_memory$DOA,
		pat0_dataBram_memory$DOB;
  wire [9 : 0] pat0_dataBram_memory$ADDRA, pat0_dataBram_memory$ADDRB;
  wire pat0_dataBram_memory$ENA,
       pat0_dataBram_memory$ENB,
       pat0_dataBram_memory$WEA,
       pat0_dataBram_memory$WEB;

  // ports of submodule pat0_dataBram_serverAdapterA_outDataCore
  wire [31 : 0] pat0_dataBram_serverAdapterA_outDataCore$D_IN,
		pat0_dataBram_serverAdapterA_outDataCore$D_OUT;
  wire pat0_dataBram_serverAdapterA_outDataCore$CLR,
       pat0_dataBram_serverAdapterA_outDataCore$DEQ,
       pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N,
       pat0_dataBram_serverAdapterA_outDataCore$ENQ,
       pat0_dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule pat0_dataBram_serverAdapterB_outDataCore
  wire [31 : 0] pat0_dataBram_serverAdapterB_outDataCore$D_IN,
		pat0_dataBram_serverAdapterB_outDataCore$D_OUT;
  wire pat0_dataBram_serverAdapterB_outDataCore$CLR,
       pat0_dataBram_serverAdapterB_outDataCore$DEQ,
       pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N,
       pat0_dataBram_serverAdapterB_outDataCore$ENQ,
       pat0_dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule pat0_loopReqInFlightF
  wire pat0_loopReqInFlightF$CLR,
       pat0_loopReqInFlightF$DEQ,
       pat0_loopReqInFlightF$EMPTY_N,
       pat0_loopReqInFlightF$ENQ,
       pat0_loopReqInFlightF$FULL_N;

  // ports of submodule pat0_metaBram_memory
  wire [31 : 0] pat0_metaBram_memory$DIA,
		pat0_metaBram_memory$DIB,
		pat0_metaBram_memory$DOA,
		pat0_metaBram_memory$DOB;
  wire [9 : 0] pat0_metaBram_memory$ADDRA, pat0_metaBram_memory$ADDRB;
  wire pat0_metaBram_memory$ENA,
       pat0_metaBram_memory$ENB,
       pat0_metaBram_memory$WEA,
       pat0_metaBram_memory$WEB;

  // ports of submodule pat0_metaBram_memory_1
  wire [31 : 0] pat0_metaBram_memory_1$DIA,
		pat0_metaBram_memory_1$DIB,
		pat0_metaBram_memory_1$DOA,
		pat0_metaBram_memory_1$DOB;
  wire [9 : 0] pat0_metaBram_memory_1$ADDRA, pat0_metaBram_memory_1$ADDRB;
  wire pat0_metaBram_memory_1$ENA,
       pat0_metaBram_memory_1$ENB,
       pat0_metaBram_memory_1$WEA,
       pat0_metaBram_memory_1$WEB;

  // ports of submodule pat0_metaBram_memory_2
  wire [31 : 0] pat0_metaBram_memory_2$DIA,
		pat0_metaBram_memory_2$DIB,
		pat0_metaBram_memory_2$DOA,
		pat0_metaBram_memory_2$DOB;
  wire [9 : 0] pat0_metaBram_memory_2$ADDRA, pat0_metaBram_memory_2$ADDRB;
  wire pat0_metaBram_memory_2$ENA,
       pat0_metaBram_memory_2$ENB,
       pat0_metaBram_memory_2$WEA,
       pat0_metaBram_memory_2$WEB;

  // ports of submodule pat0_metaBram_memory_3
  wire [31 : 0] pat0_metaBram_memory_3$DIA,
		pat0_metaBram_memory_3$DIB,
		pat0_metaBram_memory_3$DOA,
		pat0_metaBram_memory_3$DOB;
  wire [9 : 0] pat0_metaBram_memory_3$ADDRA, pat0_metaBram_memory_3$ADDRB;
  wire pat0_metaBram_memory_3$ENA,
       pat0_metaBram_memory_3$ENB,
       pat0_metaBram_memory_3$WEA,
       pat0_metaBram_memory_3$WEB;

  // ports of submodule pat0_metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_1_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_1_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_1_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_1_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_2_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_2_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_2_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_2_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_3_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_3_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_3_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_3_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterA_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_1_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_1_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_1_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_1_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_2_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_2_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_2_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_2_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_3_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_3_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_3_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_3_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule pat0_metaReqInFlightF
  wire pat0_metaReqInFlightF$CLR,
       pat0_metaReqInFlightF$DEQ,
       pat0_metaReqInFlightF$EMPTY_N,
       pat0_metaReqInFlightF$ENQ,
       pat0_metaReqInFlightF$FULL_N;

  // ports of submodule pat0_splaF
  wire [2 : 0] pat0_splaF$D_IN, pat0_splaF$D_OUT;
  wire pat0_splaF$CLR,
       pat0_splaF$DEQ,
       pat0_splaF$EMPTY_N,
       pat0_splaF$ENQ,
       pat0_splaF$FULL_N;

  // ports of submodule pat0_wci_wslv_reqF
  wire [71 : 0] pat0_wci_wslv_reqF$D_IN, pat0_wci_wslv_reqF$D_OUT;
  wire pat0_wci_wslv_reqF$CLR,
       pat0_wci_wslv_reqF$DEQ,
       pat0_wci_wslv_reqF$EMPTY_N,
       pat0_wci_wslv_reqF$ENQ;

  // ports of submodule simDCP
  wire [58 : 0] simDCP$client_request_get;
  wire [39 : 0] simDCP$client_response_put;
  wire [7 : 0] simDCP$host_request_put, simDCP$host_response_get;
  wire simDCP$EN_client_request_get,
       simDCP$EN_client_response_put,
       simDCP$EN_host_request_put,
       simDCP$EN_host_response_get,
       simDCP$RDY_client_request_get,
       simDCP$RDY_client_response_put,
       simDCP$RDY_host_request_put,
       simDCP$RDY_host_response_get;

  // ports of submodule simIO
  wire [7 : 0] simIO$host_request_get, simIO$host_response_put;
  wire simIO$EN_host_request_get,
       simIO$EN_host_response_put,
       simIO$RDY_host_request_get,
       simIO$RDY_host_response_put;

  // rule scheduling signals
  wire CAN_FIRE_RL_cap0_wci_cfrd,
       CAN_FIRE_RL_pat0_wci_cfrd,
       CAN_FIRE_RL_pat0_wci_cfwr,
       WILL_FIRE_RL_cap0_advance_split_response,
       WILL_FIRE_RL_cap0_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_cap0_doMessageAccept,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_cap0_wci_cfrd,
       WILL_FIRE_RL_cap0_wci_cfwr,
       WILL_FIRE_RL_cap0_wci_ctrl_EiI,
       WILL_FIRE_RL_cap0_wci_ctrl_IsO,
       WILL_FIRE_RL_cap0_wci_ctrl_OrE,
       WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_cap0_wci_wslv_respF_both,
       WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_cap0_wsiS_reqFifo_enq,
       WILL_FIRE_RL_cap0_wsiS_reqFifo_reset,
       WILL_FIRE_RL_pat0_advance_split_response,
       WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_doMessageEmit,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_resp_meta,
       WILL_FIRE_RL_pat0_wci_cfrd,
       WILL_FIRE_RL_pat0_wci_cfwr,
       WILL_FIRE_RL_pat0_wci_ctrl_EiI,
       WILL_FIRE_RL_pat0_wci_ctrl_IsO,
       WILL_FIRE_RL_pat0_wci_ctrl_OrE,
       WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_pat0_wci_wslv_respF_both,
       WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_both,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_deq,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2,
	       MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [60 : 0] MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_1;
  wire [33 : 0] MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_cap0_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_3,
		MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [31 : 0] MUX_cap0_dataCount$write_1__VAL_2,
		MUX_cap0_metaCount$write_1__VAL_2,
		MUX_pat0_bytesRemain$write_1__VAL_2,
		MUX_pat0_dataCount$write_1__VAL_2,
		MUX_pat0_mesgCount$write_1__VAL_2,
		MUX_pat0_mesgRemain$write_1__VAL_2;
  wire [15 : 0] MUX_pat0_metaPtr_modulus$write_1__VAL_1,
		MUX_pat0_metaPtr_value$write_1__VAL_3,
		MUX_pat0_unrollCnt$write_1__VAL_1,
		MUX_pat0_unrollCnt$write_1__VAL_2;
  wire [1 : 0] MUX_cap0_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_cap0_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_cap0_controlReg$write_1__SEL_1,
       MUX_cap0_dataCount$write_1__SEL_1,
       MUX_cap0_dataCount$write_1__SEL_2,
       MUX_cap0_metaCount$write_1__SEL_1,
       MUX_cap0_metaCount$write_1__SEL_2,
       MUX_cap0_splitReadInFlight$write_1__SEL_1,
       MUX_cap0_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_cap0_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_cap0_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_cap0_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_cap0_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_cap0_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_pat0_controlReg$write_1__SEL_1,
       MUX_pat0_dataBram_memory$b_put_1__SEL_1,
       MUX_pat0_dataBram_memory$b_put_1__SEL_2,
       MUX_pat0_dataCount$write_1__SEL_1,
       MUX_pat0_mesgCount$write_1__SEL_1,
       MUX_pat0_mesgCount$write_1__SEL_2,
       MUX_pat0_mesgRemain$write_1__SEL_1,
       MUX_pat0_metaBram_memory$b_put_1__SEL_1,
       MUX_pat0_metaBram_memory$b_put_1__SEL_2,
       MUX_pat0_metaBram_memory_1$b_put_1__SEL_1,
       MUX_pat0_metaBram_memory_1$b_put_2__SEL_2,
       MUX_pat0_metaBram_memory_2$b_put_1__SEL_1,
       MUX_pat0_metaBram_memory_2$b_put_1__SEL_2,
       MUX_pat0_metaBram_memory_3$b_put_1__SEL_1,
       MUX_pat0_metaBram_memory_3$b_put_1__SEL_2,
       MUX_pat0_metaPtr_value$write_1__SEL_1,
       MUX_pat0_splitReadInFlight$write_1__SEL_1,
       MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_pat0_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h30679,
	       v__h31775,
	       v__h32277,
	       v__h33273,
	       v__h38445,
	       v__h38620,
	       v__h38764,
	       v__h5385,
	       v__h5560,
	       v__h5704,
	       v__h60176,
	       v__h61221,
	       v__h61516,
	       v__h61721,
	       v__h65486;
  reg [31 : 0] IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2139,
	       IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1066,
	       v__h33254,
	       v__h61702;
  reg CASE_cap0_splaFD_OUT_BITS_1_TO_0_NOT_cap0_spl_ETC__q2,
      CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1,
      IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2106,
      IF_cap0_wci_wslv_reqF_first__233_BITS_35_TO_34_ETC___d2182,
      IF_cap0_wci_wslv_reqF_first__233_BITS_63_TO_52_ETC___d2186,
      IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1033,
      IF_pat0_wci_wslv_reqF_first__5_BITS_63_TO_52_0_ETC___d1138;
  wire [31 : 0] b__h27074,
		g_data__h34265,
		g_data__h62777,
		rdat___1__h33430,
		rdat___1__h61799,
		rdat___1__h61873,
		residue__h27063,
		v__h26457,
		v__h30857,
		v__h60302,
		x__h27090,
		x__h28048,
		y_avValue__h31483,
		y_avValue__h31527,
		y_avValue__h31567,
		y_avValue__h31607,
		y_avValue__h31647,
		y_avValue__h60929,
		y_avValue__h60973,
		y_avValue__h61013,
		y_avValue__h61053,
		y_avValue__h61093;
  wire [13 : 0] mlB__h58072, mlInc__h58071;
  wire [11 : 0] x_burstLength__h27882;
  wire [3 : 0] x_byteEn__h27884;
  wire [2 : 0] cap0_dataBram_serverAdapterB_cnt_509_PLUS_IF_c_ETC___d1515,
	       cap0_metaBram_serverAdapterB_1_cnt_745_PLUS_IF_ETC___d1751,
	       cap0_metaBram_serverAdapterB_2_cnt_863_PLUS_IF_ETC___d1869,
	       cap0_metaBram_serverAdapterB_3_cnt_981_PLUS_IF_ETC___d1987,
	       cap0_metaBram_serverAdapterB_cnt_627_PLUS_IF_c_ETC___d1633,
	       pat0_dataBram_serverAdapterA_cnt_74_PLUS_IF_pa_ETC___d280,
	       pat0_dataBram_serverAdapterB_cnt_33_PLUS_IF_pa_ETC___d339,
	       pat0_metaBram_serverAdapterA_1_cnt_10_PLUS_IF__ETC___d516,
	       pat0_metaBram_serverAdapterA_2_cnt_28_PLUS_IF__ETC___d634,
	       pat0_metaBram_serverAdapterA_3_cnt_46_PLUS_IF__ETC___d752,
	       pat0_metaBram_serverAdapterA_cnt_92_PLUS_IF_pa_ETC___d398,
	       pat0_metaBram_serverAdapterB_1_cnt_69_PLUS_IF__ETC___d575,
	       pat0_metaBram_serverAdapterB_2_cnt_87_PLUS_IF__ETC___d693,
	       pat0_metaBram_serverAdapterB_3_cnt_05_PLUS_IF__ETC___d811,
	       pat0_metaBram_serverAdapterB_cnt_51_PLUS_IF_pa_ETC___d457,
	       x__h58120,
	       x__h58132,
	       x__h58144,
	       y__h58121,
	       y__h58133,
	       y__h58145;
  wire [1 : 0] ab__h13384, ab__h16502, ab__h19448, ab__h22394, ab__h25340;
  wire IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2115,
       IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1042,
       IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d1092,
       IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d1093,
       IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d2770,
       NOT_cap0_controlReg_018_BIT_0_019_020_OR_cap0__ETC___d2044,
       cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066,
       cap0_dataCount_025_ULT_1024___d2557,
       cap0_metaCount_022_ULT_1024___d2556,
       cap0_splaF_i_notEmpty__084_AND_IF_cap0_splaF_f_ETC___d2117,
       pat0_dataBram_serverAdapterB_cnt_33_SLT_3___d2558,
       pat0_doZLM_09_OR_pat0_dataBram_serverAdapterA__ETC___d913,
       pat0_doZLM_09_OR_pat0_dataBram_serverAdapterA__ETC___d923,
       pat0_metaBram_serverAdapterA_1_outData_outData_ETC___d871,
       pat0_metaReqInFlightF_i_notEmpty__59_AND_pat0__ETC___d875,
       pat0_splaF_i_notEmpty__011_AND_IF_pat0_splaF_f_ETC___d1044;

  // submodule bias
  mkBiasWorker4B #(.hasDebugLogic(1'd1)) bias(.wciS0_Clk(CLK),
					      .wciS0_MReset_n(cp$RST_N_wci_Vm_3),
					      .wciS0_MAddr(bias$wciS0_MAddr),
					      .wciS0_MAddrSpace(bias$wciS0_MAddrSpace),
					      .wciS0_MByteEn(bias$wciS0_MByteEn),
					      .wciS0_MCmd(bias$wciS0_MCmd),
					      .wciS0_MData(bias$wciS0_MData),
					      .wciS0_MFlag(bias$wciS0_MFlag),
					      .wsiS0_MBurstLength(bias$wsiS0_MBurstLength),
					      .wsiS0_MByteEn(bias$wsiS0_MByteEn),
					      .wsiS0_MCmd(bias$wsiS0_MCmd),
					      .wsiS0_MData(bias$wsiS0_MData),
					      .wsiS0_MReqInfo(bias$wsiS0_MReqInfo),
					      .wsiS0_MReqLast(bias$wsiS0_MReqLast),
					      .wsiS0_MBurstPrecise(bias$wsiS0_MBurstPrecise),
					      .wsiS0_MReset_n(bias$wsiS0_MReset_n),
					      .wsiM0_SThreadBusy(bias$wsiM0_SThreadBusy),
					      .wsiM0_SReset_n(bias$wsiM0_SReset_n),
					      .wciS0_SResp(bias$wciS0_SResp),
					      .wciS0_SData(bias$wciS0_SData),
					      .wciS0_SThreadBusy(bias$wciS0_SThreadBusy),
					      .wciS0_SFlag(bias$wciS0_SFlag),
					      .wsiS0_SThreadBusy(bias$wsiS0_SThreadBusy),
					      .wsiS0_SReset_n(bias$wsiS0_SReset_n),
					      .wsiM0_MCmd(bias$wsiM0_MCmd),
					      .wsiM0_MReqLast(bias$wsiM0_MReqLast),
					      .wsiM0_MBurstPrecise(bias$wsiM0_MBurstPrecise),
					      .wsiM0_MBurstLength(bias$wsiM0_MBurstLength),
					      .wsiM0_MData(bias$wsiM0_MData),
					      .wsiM0_MByteEn(bias$wsiM0_MByteEn),
					      .wsiM0_MReqInfo(bias$wsiM0_MReqInfo),
					      .wsiM0_MReset_n(bias$wsiM0_MReset_n));

  // submodule cap0_dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) cap0_dataBram_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(cap0_dataBram_memory$ADDRA),
						   .ADDRB(cap0_dataBram_memory$ADDRB),
						   .DIA(cap0_dataBram_memory$DIA),
						   .DIB(cap0_dataBram_memory$DIB),
						   .WEA(cap0_dataBram_memory$WEA),
						   .WEB(cap0_dataBram_memory$WEB),
						   .ENA(cap0_dataBram_memory$ENA),
						   .ENB(cap0_dataBram_memory$ENB),
						   .DOA(cap0_dataBram_memory$DOA),
						   .DOB(cap0_dataBram_memory$DOB));

  // submodule cap0_dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_dataBram_serverAdapterA_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									.CLK(CLK),
									.D_IN(cap0_dataBram_serverAdapterA_outDataCore$D_IN),
									.ENQ(cap0_dataBram_serverAdapterA_outDataCore$ENQ),
									.DEQ(cap0_dataBram_serverAdapterA_outDataCore$DEQ),
									.CLR(cap0_dataBram_serverAdapterA_outDataCore$CLR),
									.D_OUT(cap0_dataBram_serverAdapterA_outDataCore$D_OUT),
									.FULL_N(cap0_dataBram_serverAdapterA_outDataCore$FULL_N),
									.EMPTY_N(cap0_dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule cap0_dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_dataBram_serverAdapterB_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									.CLK(CLK),
									.D_IN(cap0_dataBram_serverAdapterB_outDataCore$D_IN),
									.ENQ(cap0_dataBram_serverAdapterB_outDataCore$ENQ),
									.DEQ(cap0_dataBram_serverAdapterB_outDataCore$DEQ),
									.CLR(cap0_dataBram_serverAdapterB_outDataCore$CLR),
									.D_OUT(cap0_dataBram_serverAdapterB_outDataCore$D_OUT),
									.FULL_N(cap0_dataBram_serverAdapterB_outDataCore$FULL_N),
									.EMPTY_N(cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) cap0_metaBram_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(cap0_metaBram_memory$ADDRA),
						   .ADDRB(cap0_metaBram_memory$ADDRB),
						   .DIA(cap0_metaBram_memory$DIA),
						   .DIB(cap0_metaBram_memory$DIB),
						   .WEA(cap0_metaBram_memory$WEA),
						   .WEB(cap0_metaBram_memory$WEB),
						   .ENA(cap0_metaBram_memory$ENA),
						   .ENB(cap0_metaBram_memory$ENB),
						   .DOA(cap0_metaBram_memory$DOA),
						   .DOB(cap0_metaBram_memory$DOB));

  // submodule cap0_metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) cap0_metaBram_memory_1(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(cap0_metaBram_memory_1$ADDRA),
						     .ADDRB(cap0_metaBram_memory_1$ADDRB),
						     .DIA(cap0_metaBram_memory_1$DIA),
						     .DIB(cap0_metaBram_memory_1$DIB),
						     .WEA(cap0_metaBram_memory_1$WEA),
						     .WEB(cap0_metaBram_memory_1$WEB),
						     .ENA(cap0_metaBram_memory_1$ENA),
						     .ENB(cap0_metaBram_memory_1$ENB),
						     .DOA(cap0_metaBram_memory_1$DOA),
						     .DOB(cap0_metaBram_memory_1$DOB));

  // submodule cap0_metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) cap0_metaBram_memory_2(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(cap0_metaBram_memory_2$ADDRA),
						     .ADDRB(cap0_metaBram_memory_2$ADDRB),
						     .DIA(cap0_metaBram_memory_2$DIA),
						     .DIB(cap0_metaBram_memory_2$DIB),
						     .WEA(cap0_metaBram_memory_2$WEA),
						     .WEB(cap0_metaBram_memory_2$WEB),
						     .ENA(cap0_metaBram_memory_2$ENA),
						     .ENB(cap0_metaBram_memory_2$ENB),
						     .DOA(cap0_metaBram_memory_2$DOA),
						     .DOB(cap0_metaBram_memory_2$DOB));

  // submodule cap0_metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) cap0_metaBram_memory_3(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(cap0_metaBram_memory_3$ADDRA),
						     .ADDRB(cap0_metaBram_memory_3$ADDRB),
						     .DIA(cap0_metaBram_memory_3$DIA),
						     .DIB(cap0_metaBram_memory_3$DIB),
						     .WEA(cap0_metaBram_memory_3$WEA),
						     .WEB(cap0_metaBram_memory_3$WEB),
						     .ENA(cap0_metaBram_memory_3$ENA),
						     .ENB(cap0_metaBram_memory_3$ENB),
						     .DOA(cap0_metaBram_memory_3$DOA),
						     .DOB(cap0_metaBram_memory_3$DOB));

  // submodule cap0_metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterA_1_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									  .CLK(CLK),
									  .D_IN(cap0_metaBram_serverAdapterA_1_outDataCore$D_IN),
									  .ENQ(cap0_metaBram_serverAdapterA_1_outDataCore$ENQ),
									  .DEQ(cap0_metaBram_serverAdapterA_1_outDataCore$DEQ),
									  .CLR(cap0_metaBram_serverAdapterA_1_outDataCore$CLR),
									  .D_OUT(cap0_metaBram_serverAdapterA_1_outDataCore$D_OUT),
									  .FULL_N(cap0_metaBram_serverAdapterA_1_outDataCore$FULL_N),
									  .EMPTY_N(cap0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterA_2_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									  .CLK(CLK),
									  .D_IN(cap0_metaBram_serverAdapterA_2_outDataCore$D_IN),
									  .ENQ(cap0_metaBram_serverAdapterA_2_outDataCore$ENQ),
									  .DEQ(cap0_metaBram_serverAdapterA_2_outDataCore$DEQ),
									  .CLR(cap0_metaBram_serverAdapterA_2_outDataCore$CLR),
									  .D_OUT(cap0_metaBram_serverAdapterA_2_outDataCore$D_OUT),
									  .FULL_N(cap0_metaBram_serverAdapterA_2_outDataCore$FULL_N),
									  .EMPTY_N(cap0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterA_3_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									  .CLK(CLK),
									  .D_IN(cap0_metaBram_serverAdapterA_3_outDataCore$D_IN),
									  .ENQ(cap0_metaBram_serverAdapterA_3_outDataCore$ENQ),
									  .DEQ(cap0_metaBram_serverAdapterA_3_outDataCore$DEQ),
									  .CLR(cap0_metaBram_serverAdapterA_3_outDataCore$CLR),
									  .D_OUT(cap0_metaBram_serverAdapterA_3_outDataCore$D_OUT),
									  .FULL_N(cap0_metaBram_serverAdapterA_3_outDataCore$FULL_N),
									  .EMPTY_N(cap0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterA_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									.CLK(CLK),
									.D_IN(cap0_metaBram_serverAdapterA_outDataCore$D_IN),
									.ENQ(cap0_metaBram_serverAdapterA_outDataCore$ENQ),
									.DEQ(cap0_metaBram_serverAdapterA_outDataCore$DEQ),
									.CLR(cap0_metaBram_serverAdapterA_outDataCore$CLR),
									.D_OUT(cap0_metaBram_serverAdapterA_outDataCore$D_OUT),
									.FULL_N(cap0_metaBram_serverAdapterA_outDataCore$FULL_N),
									.EMPTY_N(cap0_metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterB_1_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									  .CLK(CLK),
									  .D_IN(cap0_metaBram_serverAdapterB_1_outDataCore$D_IN),
									  .ENQ(cap0_metaBram_serverAdapterB_1_outDataCore$ENQ),
									  .DEQ(cap0_metaBram_serverAdapterB_1_outDataCore$DEQ),
									  .CLR(cap0_metaBram_serverAdapterB_1_outDataCore$CLR),
									  .D_OUT(cap0_metaBram_serverAdapterB_1_outDataCore$D_OUT),
									  .FULL_N(cap0_metaBram_serverAdapterB_1_outDataCore$FULL_N),
									  .EMPTY_N(cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterB_2_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									  .CLK(CLK),
									  .D_IN(cap0_metaBram_serverAdapterB_2_outDataCore$D_IN),
									  .ENQ(cap0_metaBram_serverAdapterB_2_outDataCore$ENQ),
									  .DEQ(cap0_metaBram_serverAdapterB_2_outDataCore$DEQ),
									  .CLR(cap0_metaBram_serverAdapterB_2_outDataCore$CLR),
									  .D_OUT(cap0_metaBram_serverAdapterB_2_outDataCore$D_OUT),
									  .FULL_N(cap0_metaBram_serverAdapterB_2_outDataCore$FULL_N),
									  .EMPTY_N(cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterB_3_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									  .CLK(CLK),
									  .D_IN(cap0_metaBram_serverAdapterB_3_outDataCore$D_IN),
									  .ENQ(cap0_metaBram_serverAdapterB_3_outDataCore$ENQ),
									  .DEQ(cap0_metaBram_serverAdapterB_3_outDataCore$DEQ),
									  .CLR(cap0_metaBram_serverAdapterB_3_outDataCore$CLR),
									  .D_OUT(cap0_metaBram_serverAdapterB_3_outDataCore$D_OUT),
									  .FULL_N(cap0_metaBram_serverAdapterB_3_outDataCore$FULL_N),
									  .EMPTY_N(cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule cap0_metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_metaBram_serverAdapterB_outDataCore(.RST(cp$RST_N_wci_Vm_4),
									.CLK(CLK),
									.D_IN(cap0_metaBram_serverAdapterB_outDataCore$D_IN),
									.ENQ(cap0_metaBram_serverAdapterB_outDataCore$ENQ),
									.DEQ(cap0_metaBram_serverAdapterB_outDataCore$DEQ),
									.CLR(cap0_metaBram_serverAdapterB_outDataCore$CLR),
									.D_OUT(cap0_metaBram_serverAdapterB_outDataCore$D_OUT),
									.FULL_N(cap0_metaBram_serverAdapterB_outDataCore$FULL_N),
									.EMPTY_N(cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule cap0_splaF
  FIFO2 #(.width(32'd3), .guarded(32'd1)) cap0_splaF(.RST(cp$RST_N_wci_Vm_4),
						     .CLK(CLK),
						     .D_IN(cap0_splaF$D_IN),
						     .ENQ(cap0_splaF$ENQ),
						     .DEQ(cap0_splaF$DEQ),
						     .CLR(cap0_splaF$CLR),
						     .D_OUT(cap0_splaF$D_OUT),
						     .FULL_N(cap0_splaF$FULL_N),
						     .EMPTY_N(cap0_splaF$EMPTY_N));

  // submodule cap0_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_wci_wslv_reqF(.RST(cp$RST_N_wci_Vm_4),
						  .CLK(CLK),
						  .D_IN(cap0_wci_wslv_reqF$D_IN),
						  .ENQ(cap0_wci_wslv_reqF$ENQ),
						  .DEQ(cap0_wci_wslv_reqF$DEQ),
						  .CLR(cap0_wci_wslv_reqF$CLR),
						  .D_OUT(cap0_wci_wslv_reqF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(cap0_wci_wslv_reqF$EMPTY_N));

  // submodule cap0_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cap0_wsiS_reqFifo(.RST(cp$RST_N_wci_Vm_4),
						 .CLK(CLK),
						 .D_IN(cap0_wsiS_reqFifo$D_IN),
						 .ENQ(cap0_wsiS_reqFifo$ENQ),
						 .DEQ(cap0_wsiS_reqFifo$DEQ),
						 .CLR(cap0_wsiS_reqFifo$CLR),
						 .D_OUT(cap0_wsiS_reqFifo$D_OUT),
						 .FULL_N(cap0_wsiS_reqFifo$FULL_N),
						 .EMPTY_N(cap0_wsiS_reqFifo$EMPTY_N));

  // submodule cp
  mkOCCP cp(.pciDevice(16'hAAAA),
	    .CLK_time_clk(CLK),
	    .RST_N_time_rst(RST_N),
	    .CLK(CLK),
	    .RST_N(RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .uuid_arg(cp$uuid_arg),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .wci_Vm_0_MCmd(),
	    .wci_Vm_0_MAddrSpace(),
	    .wci_Vm_0_MByteEn(),
	    .wci_Vm_0_MAddr(),
	    .wci_Vm_0_MData(),
	    .wci_Vm_0_MFlag(),
	    .wci_Vm_1_MCmd(),
	    .wci_Vm_1_MAddrSpace(),
	    .wci_Vm_1_MByteEn(),
	    .wci_Vm_1_MAddr(),
	    .wci_Vm_1_MData(),
	    .wci_Vm_1_MFlag(),
	    .wci_Vm_2_MCmd(cp$wci_Vm_2_MCmd),
	    .wci_Vm_2_MAddrSpace(cp$wci_Vm_2_MAddrSpace),
	    .wci_Vm_2_MByteEn(cp$wci_Vm_2_MByteEn),
	    .wci_Vm_2_MAddr(cp$wci_Vm_2_MAddr),
	    .wci_Vm_2_MData(cp$wci_Vm_2_MData),
	    .wci_Vm_2_MFlag(),
	    .wci_Vm_3_MCmd(cp$wci_Vm_3_MCmd),
	    .wci_Vm_3_MAddrSpace(cp$wci_Vm_3_MAddrSpace),
	    .wci_Vm_3_MByteEn(cp$wci_Vm_3_MByteEn),
	    .wci_Vm_3_MAddr(cp$wci_Vm_3_MAddr),
	    .wci_Vm_3_MData(cp$wci_Vm_3_MData),
	    .wci_Vm_3_MFlag(cp$wci_Vm_3_MFlag),
	    .wci_Vm_4_MCmd(cp$wci_Vm_4_MCmd),
	    .wci_Vm_4_MAddrSpace(cp$wci_Vm_4_MAddrSpace),
	    .wci_Vm_4_MByteEn(cp$wci_Vm_4_MByteEn),
	    .wci_Vm_4_MAddr(cp$wci_Vm_4_MAddr),
	    .wci_Vm_4_MData(cp$wci_Vm_4_MData),
	    .wci_Vm_4_MFlag(),
	    .wci_Vm_5_MCmd(),
	    .wci_Vm_5_MAddrSpace(),
	    .wci_Vm_5_MByteEn(),
	    .wci_Vm_5_MAddr(),
	    .wci_Vm_5_MData(),
	    .wci_Vm_5_MFlag(),
	    .wci_Vm_6_MCmd(),
	    .wci_Vm_6_MAddrSpace(),
	    .wci_Vm_6_MByteEn(),
	    .wci_Vm_6_MAddr(),
	    .wci_Vm_6_MData(),
	    .wci_Vm_6_MFlag(),
	    .wci_Vm_7_MCmd(),
	    .wci_Vm_7_MAddrSpace(),
	    .wci_Vm_7_MByteEn(),
	    .wci_Vm_7_MAddr(),
	    .wci_Vm_7_MData(),
	    .wci_Vm_7_MFlag(),
	    .wci_Vm_8_MCmd(),
	    .wci_Vm_8_MAddrSpace(),
	    .wci_Vm_8_MByteEn(),
	    .wci_Vm_8_MAddr(),
	    .wci_Vm_8_MData(),
	    .wci_Vm_8_MFlag(),
	    .wci_Vm_9_MCmd(),
	    .wci_Vm_9_MAddrSpace(),
	    .wci_Vm_9_MByteEn(),
	    .wci_Vm_9_MAddr(),
	    .wci_Vm_9_MData(),
	    .wci_Vm_9_MFlag(),
	    .wci_Vm_10_MCmd(),
	    .wci_Vm_10_MAddrSpace(),
	    .wci_Vm_10_MByteEn(),
	    .wci_Vm_10_MAddr(),
	    .wci_Vm_10_MData(),
	    .wci_Vm_10_MFlag(),
	    .wci_Vm_11_MCmd(),
	    .wci_Vm_11_MAddrSpace(),
	    .wci_Vm_11_MByteEn(),
	    .wci_Vm_11_MAddr(),
	    .wci_Vm_11_MData(),
	    .wci_Vm_11_MFlag(),
	    .wci_Vm_12_MCmd(),
	    .wci_Vm_12_MAddrSpace(),
	    .wci_Vm_12_MByteEn(),
	    .wci_Vm_12_MAddr(),
	    .wci_Vm_12_MData(),
	    .wci_Vm_12_MFlag(),
	    .wci_Vm_13_MCmd(),
	    .wci_Vm_13_MAddrSpace(),
	    .wci_Vm_13_MByteEn(),
	    .wci_Vm_13_MAddr(),
	    .wci_Vm_13_MData(),
	    .wci_Vm_13_MFlag(),
	    .wci_Vm_14_MCmd(),
	    .wci_Vm_14_MAddrSpace(),
	    .wci_Vm_14_MByteEn(),
	    .wci_Vm_14_MAddr(),
	    .wci_Vm_14_MData(),
	    .wci_Vm_14_MFlag(),
	    .cpNow(),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(),
	    .led(),
	    .RST_N_wci_Vm_0(),
	    .RST_N_wci_Vm_1(),
	    .RST_N_wci_Vm_2(cp$RST_N_wci_Vm_2),
	    .RST_N_wci_Vm_3(cp$RST_N_wci_Vm_3),
	    .RST_N_wci_Vm_4(cp$RST_N_wci_Vm_4),
	    .RST_N_wci_Vm_5(),
	    .RST_N_wci_Vm_6(),
	    .RST_N_wci_Vm_7(),
	    .RST_N_wci_Vm_8(),
	    .RST_N_wci_Vm_9(),
	    .RST_N_wci_Vm_10(),
	    .RST_N_wci_Vm_11(),
	    .RST_N_wci_Vm_12(),
	    .RST_N_wci_Vm_13(),
	    .RST_N_wci_Vm_14());

  // submodule pat0_dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_dataBram_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(pat0_dataBram_memory$ADDRA),
						   .ADDRB(pat0_dataBram_memory$ADDRB),
						   .DIA(pat0_dataBram_memory$DIA),
						   .DIB(pat0_dataBram_memory$DIB),
						   .WEA(pat0_dataBram_memory$WEA),
						   .WEB(pat0_dataBram_memory$WEB),
						   .ENA(pat0_dataBram_memory$ENA),
						   .ENB(pat0_dataBram_memory$ENB),
						   .DOA(pat0_dataBram_memory$DOA),
						   .DOB(pat0_dataBram_memory$DOB));

  // submodule pat0_dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_dataBram_serverAdapterA_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									.CLK(CLK),
									.D_IN(pat0_dataBram_serverAdapterA_outDataCore$D_IN),
									.ENQ(pat0_dataBram_serverAdapterA_outDataCore$ENQ),
									.DEQ(pat0_dataBram_serverAdapterA_outDataCore$DEQ),
									.CLR(pat0_dataBram_serverAdapterA_outDataCore$CLR),
									.D_OUT(pat0_dataBram_serverAdapterA_outDataCore$D_OUT),
									.FULL_N(pat0_dataBram_serverAdapterA_outDataCore$FULL_N),
									.EMPTY_N(pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule pat0_dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_dataBram_serverAdapterB_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									.CLK(CLK),
									.D_IN(pat0_dataBram_serverAdapterB_outDataCore$D_IN),
									.ENQ(pat0_dataBram_serverAdapterB_outDataCore$ENQ),
									.DEQ(pat0_dataBram_serverAdapterB_outDataCore$DEQ),
									.CLR(pat0_dataBram_serverAdapterB_outDataCore$CLR),
									.D_OUT(pat0_dataBram_serverAdapterB_outDataCore$D_OUT),
									.FULL_N(pat0_dataBram_serverAdapterB_outDataCore$FULL_N),
									.EMPTY_N(pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule pat0_loopReqInFlightF
  FIFO10 #(.guarded(32'd1)) pat0_loopReqInFlightF(.RST(cp$RST_N_wci_Vm_2),
						  .CLK(CLK),
						  .ENQ(pat0_loopReqInFlightF$ENQ),
						  .DEQ(pat0_loopReqInFlightF$DEQ),
						  .CLR(pat0_loopReqInFlightF$CLR),
						  .FULL_N(pat0_loopReqInFlightF$FULL_N),
						  .EMPTY_N(pat0_loopReqInFlightF$EMPTY_N));

  // submodule pat0_metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(pat0_metaBram_memory$ADDRA),
						   .ADDRB(pat0_metaBram_memory$ADDRB),
						   .DIA(pat0_metaBram_memory$DIA),
						   .DIB(pat0_metaBram_memory$DIB),
						   .WEA(pat0_metaBram_memory$WEA),
						   .WEB(pat0_metaBram_memory$WEB),
						   .ENA(pat0_metaBram_memory$ENA),
						   .ENB(pat0_metaBram_memory$ENB),
						   .DOA(pat0_metaBram_memory$DOA),
						   .DOB(pat0_metaBram_memory$DOB));

  // submodule pat0_metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory_1(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(pat0_metaBram_memory_1$ADDRA),
						     .ADDRB(pat0_metaBram_memory_1$ADDRB),
						     .DIA(pat0_metaBram_memory_1$DIA),
						     .DIB(pat0_metaBram_memory_1$DIB),
						     .WEA(pat0_metaBram_memory_1$WEA),
						     .WEB(pat0_metaBram_memory_1$WEB),
						     .ENA(pat0_metaBram_memory_1$ENA),
						     .ENB(pat0_metaBram_memory_1$ENB),
						     .DOA(pat0_metaBram_memory_1$DOA),
						     .DOB(pat0_metaBram_memory_1$DOB));

  // submodule pat0_metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory_2(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(pat0_metaBram_memory_2$ADDRA),
						     .ADDRB(pat0_metaBram_memory_2$ADDRB),
						     .DIA(pat0_metaBram_memory_2$DIA),
						     .DIB(pat0_metaBram_memory_2$DIB),
						     .WEA(pat0_metaBram_memory_2$WEA),
						     .WEB(pat0_metaBram_memory_2$WEB),
						     .ENA(pat0_metaBram_memory_2$ENA),
						     .ENB(pat0_metaBram_memory_2$ENB),
						     .DOA(pat0_metaBram_memory_2$DOA),
						     .DOB(pat0_metaBram_memory_2$DOB));

  // submodule pat0_metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory_3(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(pat0_metaBram_memory_3$ADDRA),
						     .ADDRB(pat0_metaBram_memory_3$ADDRB),
						     .DIA(pat0_metaBram_memory_3$DIA),
						     .DIB(pat0_metaBram_memory_3$DIB),
						     .WEA(pat0_metaBram_memory_3$WEA),
						     .WEB(pat0_metaBram_memory_3$WEB),
						     .ENA(pat0_metaBram_memory_3$ENA),
						     .ENB(pat0_metaBram_memory_3$ENB),
						     .DOA(pat0_metaBram_memory_3$DOA),
						     .DOB(pat0_metaBram_memory_3$DOB));

  // submodule pat0_metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_1_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									  .CLK(CLK),
									  .D_IN(pat0_metaBram_serverAdapterA_1_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterA_1_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterA_1_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterA_1_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterA_1_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_2_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									  .CLK(CLK),
									  .D_IN(pat0_metaBram_serverAdapterA_2_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterA_2_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterA_2_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterA_2_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterA_2_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_3_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									  .CLK(CLK),
									  .D_IN(pat0_metaBram_serverAdapterA_3_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterA_3_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterA_3_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterA_3_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterA_3_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									.CLK(CLK),
									.D_IN(pat0_metaBram_serverAdapterA_outDataCore$D_IN),
									.ENQ(pat0_metaBram_serverAdapterA_outDataCore$ENQ),
									.DEQ(pat0_metaBram_serverAdapterA_outDataCore$DEQ),
									.CLR(pat0_metaBram_serverAdapterA_outDataCore$CLR),
									.D_OUT(pat0_metaBram_serverAdapterA_outDataCore$D_OUT),
									.FULL_N(pat0_metaBram_serverAdapterA_outDataCore$FULL_N),
									.EMPTY_N(pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_1_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									  .CLK(CLK),
									  .D_IN(pat0_metaBram_serverAdapterB_1_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterB_1_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterB_1_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterB_1_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterB_1_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_2_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									  .CLK(CLK),
									  .D_IN(pat0_metaBram_serverAdapterB_2_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterB_2_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterB_2_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterB_2_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterB_2_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_3_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									  .CLK(CLK),
									  .D_IN(pat0_metaBram_serverAdapterB_3_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterB_3_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterB_3_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterB_3_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterB_3_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_outDataCore(.RST(cp$RST_N_wci_Vm_2),
									.CLK(CLK),
									.D_IN(pat0_metaBram_serverAdapterB_outDataCore$D_IN),
									.ENQ(pat0_metaBram_serverAdapterB_outDataCore$ENQ),
									.DEQ(pat0_metaBram_serverAdapterB_outDataCore$DEQ),
									.CLR(pat0_metaBram_serverAdapterB_outDataCore$CLR),
									.D_OUT(pat0_metaBram_serverAdapterB_outDataCore$D_OUT),
									.FULL_N(pat0_metaBram_serverAdapterB_outDataCore$FULL_N),
									.EMPTY_N(pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule pat0_metaReqInFlightF
  FIFO10 #(.guarded(32'd1)) pat0_metaReqInFlightF(.RST(cp$RST_N_wci_Vm_2),
						  .CLK(CLK),
						  .ENQ(pat0_metaReqInFlightF$ENQ),
						  .DEQ(pat0_metaReqInFlightF$DEQ),
						  .CLR(pat0_metaReqInFlightF$CLR),
						  .FULL_N(pat0_metaReqInFlightF$FULL_N),
						  .EMPTY_N(pat0_metaReqInFlightF$EMPTY_N));

  // submodule pat0_splaF
  FIFO2 #(.width(32'd3), .guarded(32'd1)) pat0_splaF(.RST(cp$RST_N_wci_Vm_2),
						     .CLK(CLK),
						     .D_IN(pat0_splaF$D_IN),
						     .ENQ(pat0_splaF$ENQ),
						     .DEQ(pat0_splaF$DEQ),
						     .CLR(pat0_splaF$CLR),
						     .D_OUT(pat0_splaF$D_OUT),
						     .FULL_N(pat0_splaF$FULL_N),
						     .EMPTY_N(pat0_splaF$EMPTY_N));

  // submodule pat0_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_wci_wslv_reqF(.RST(cp$RST_N_wci_Vm_2),
						  .CLK(CLK),
						  .D_IN(pat0_wci_wslv_reqF$D_IN),
						  .ENQ(pat0_wci_wslv_reqF$ENQ),
						  .DEQ(pat0_wci_wslv_reqF$DEQ),
						  .CLR(pat0_wci_wslv_reqF$CLR),
						  .D_OUT(pat0_wci_wslv_reqF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(pat0_wci_wslv_reqF$EMPTY_N));

  // submodule simDCP
  mkSimDCP simDCP(.CLK(CLK),
		  .RST_N(RST_N),
		  .client_response_put(simDCP$client_response_put),
		  .host_request_put(simDCP$host_request_put),
		  .EN_host_request_put(simDCP$EN_host_request_put),
		  .EN_host_response_get(simDCP$EN_host_response_get),
		  .EN_client_request_get(simDCP$EN_client_request_get),
		  .EN_client_response_put(simDCP$EN_client_response_put),
		  .RDY_host_request_put(simDCP$RDY_host_request_put),
		  .host_response_get(simDCP$host_response_get),
		  .RDY_host_response_get(simDCP$RDY_host_response_get),
		  .client_request_get(simDCP$client_request_get),
		  .RDY_client_request_get(simDCP$RDY_client_request_get),
		  .RDY_client_response_put(simDCP$RDY_client_response_put));

  // submodule simIO
  mkSimIO simIO(.CLK(CLK),
		.RST_N(RST_N),
		.host_response_put(simIO$host_response_put),
		.EN_host_request_get(simIO$EN_host_request_get),
		.EN_host_response_put(simIO$EN_host_response_put),
		.host_request_get(simIO$host_request_get),
		.RDY_host_request_get(simIO$RDY_host_request_get),
		.RDY_host_response_put(simIO$RDY_host_response_put));

  // rule RL_pat0_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start =
	     pat0_wci_wslv_reqF$EMPTY_N && pat0_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wci_ctrl_IsO
  assign WILL_FIRE_RL_pat0_wci_ctrl_IsO =
	     pat0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     pat0_wci_wslv_cState == 3'd1 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_pat0_wci_ctrl_OrE
  assign WILL_FIRE_RL_pat0_wci_ctrl_OrE =
	     pat0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     pat0_wci_wslv_cState == 3'd2 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_pat0_wci_cfrd
  assign CAN_FIRE_RL_pat0_wci_cfrd =
	     pat0_wci_wslv_reqF$EMPTY_N &&
	     IF_pat0_wci_wslv_reqF_first__5_BITS_63_TO_52_0_ETC___d1138 &&
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 ||
	      pat0_wci_wslv_respF_c_r != 2'd2) &&
	     pat0_wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_pat0_wci_cfrd =
	     CAN_FIRE_RL_pat0_wci_cfrd &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_deq =
	     pat0_wsiM_reqFifo_c_r != 2'd0 && !pat0_wsiM_sThreadBusy_d ;

  // rule RL_pat0_wci_ctrl_EiI
  assign WILL_FIRE_RL_pat0_wci_ctrl_EiI =
	     pat0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     pat0_wci_wslv_cState == 3'd0 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways
  assign WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways =
	     (pat0_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     pat0_bytesRemain != 32'd0 ;

  // rule RL_pat0_doMessageEmit
  assign WILL_FIRE_RL_pat0_doMessageEmit =
	     pat0_wsiM_reqFifo_c_r != 2'd2 &&
	     pat0_doZLM_09_OR_pat0_dataBram_serverAdapterA__ETC___d923 &&
	     pat0_wci_wslv_cState == 3'd2 ;

  // rule RL_pat0_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr =
	     ((pat0_wsiM_reqFifo_c_r == 2'd0) ?
		WILL_FIRE_RL_pat0_doMessageEmit :
		pat0_wsiM_reqFifo_c_r != 2'd1 ||
		WILL_FIRE_RL_pat0_doMessageEmit) &&
	     WILL_FIRE_RL_pat0_doMessageEmit &&
	     !WILL_FIRE_RL_pat0_wsiM_reqFifo_deq ;

  // rule RL_pat0_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     !WILL_FIRE_RL_pat0_doMessageEmit ;

  // rule RL_pat0_wsiM_reqFifo_both
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_both =
	     ((pat0_wsiM_reqFifo_c_r == 2'd1) ?
		WILL_FIRE_RL_pat0_doMessageEmit :
		pat0_wsiM_reqFifo_c_r != 2'd2 ||
		WILL_FIRE_RL_pat0_doMessageEmit) &&
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     WILL_FIRE_RL_pat0_doMessageEmit ;

  // rule RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq =
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterA_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways =
	     (pat0_metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (pat0_metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	     (pat0_metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	     (pat0_metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 &&
	     pat0_metaReqInFlightF$FULL_N &&
	     pat0_loopReqInFlightF$FULL_N &&
	     pat0_wci_wslv_cState == 3'd2 &&
	     pat0_controlReg[0] &&
	     pat0_mesgRemain != 32'd0 ;

  // rule RL_pat0_resp_meta
  assign WILL_FIRE_RL_pat0_resp_meta =
	     pat0_metaReqInFlightF_i_notEmpty__59_AND_pat0__ETC___d875 &&
	     pat0_wci_wslv_cState == 3'd2 &&
	     pat0_mesgRemain != 32'd0 ;

  // rule RL_pat0_wci_cfwr
  assign CAN_FIRE_RL_pat0_wci_cfwr =
	     pat0_wci_wslv_respF_c_r != 2'd2 && pat0_wci_wslv_reqF$EMPTY_N &&
	     ((pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
		pat0_dataBram_serverAdapterB_cnt_33_SLT_3___d2558 :
		pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d2770) &&
	     pat0_wci_wslv_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_pat0_wci_cfwr =
	     CAN_FIRE_RL_pat0_wci_cfwr &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete =
	     pat0_wci_wslv_respF_c_r != 2'd2 && pat0_wci_wslv_ctlOpActive &&
	     pat0_wci_wslv_ctlAckReg ;

  // rule RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;

  // rule RL_pat0_advance_split_response
  assign WILL_FIRE_RL_pat0_advance_split_response =
	     pat0_wci_wslv_respF_c_r != 2'd2 &&
	     pat0_splaF_i_notEmpty__011_AND_IF_pat0_splaF_f_ETC___d1044 &&
	     !pat0_wci_wslv_wci_cfwr_pw$whas &&
	     pat0_splitReadInFlight &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr =
	     ((pat0_wci_wslv_respF_c_r == 2'd0) ?
		pat0_wci_wslv_respF_x_wire$whas :
		pat0_wci_wslv_respF_c_r != 2'd1 ||
		pat0_wci_wslv_respF_x_wire$whas) &&
	     pat0_wci_wslv_respF_enqueueing$whas &&
	     !(pat0_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_pat0_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr =
	     pat0_wci_wslv_respF_c_r != 2'd0 &&
	     !pat0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_pat0_wci_wslv_respF_both
  assign WILL_FIRE_RL_pat0_wci_wslv_respF_both =
	     ((pat0_wci_wslv_respF_c_r == 2'd1) ?
		pat0_wci_wslv_respF_x_wire$whas :
		pat0_wci_wslv_respF_c_r != 2'd2 ||
		pat0_wci_wslv_respF_x_wire$whas) &&
	     pat0_wci_wslv_respF_c_r != 2'd0 &&
	     pat0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq =
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_cap0_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start =
	     cap0_wci_wslv_reqF$EMPTY_N && cap0_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ;

  // rule RL_cap0_wci_ctrl_EiI
  assign WILL_FIRE_RL_cap0_wci_ctrl_EiI =
	     cap0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start &&
	     cap0_wci_wslv_cState == 3'd0 &&
	     cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_cap0_wci_ctrl_IsO
  assign WILL_FIRE_RL_cap0_wci_ctrl_IsO =
	     cap0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start &&
	     cap0_wci_wslv_cState == 3'd1 &&
	     cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_cap0_wci_ctrl_OrE
  assign WILL_FIRE_RL_cap0_wci_ctrl_OrE =
	     cap0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start &&
	     cap0_wci_wslv_cState == 3'd2 &&
	     cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_cap0_wci_cfrd
  assign CAN_FIRE_RL_cap0_wci_cfrd =
	     cap0_wci_wslv_reqF$EMPTY_N &&
	     IF_cap0_wci_wslv_reqF_first__233_BITS_63_TO_52_ETC___d2186 &&
	     (cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 ||
	      cap0_wci_wslv_respF_c_r != 2'd2) &&
	     cap0_wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_cap0_wci_cfrd =
	     CAN_FIRE_RL_cap0_wci_cfrd &&
	     !WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ;

  // rule RL_cap0_doMessageAccept
  assign WILL_FIRE_RL_cap0_doMessageAccept =
	     cap0_wsiS_reqFifo$EMPTY_N &&
	     NOT_cap0_controlReg_018_BIT_0_019_020_OR_cap0__ETC___d2044 &&
	     cap0_wci_wslv_cState == 3'd2 ;

  // rule RL_cap0_wci_cfwr
  assign WILL_FIRE_RL_cap0_wci_cfwr =
	     cap0_wci_wslv_respF_c_r != 2'd2 && cap0_wci_wslv_reqF$EMPTY_N &&
	     cap0_wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ;

  // rule RL_cap0_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete =
	     cap0_wci_wslv_respF_c_r != 2'd2 && cap0_wci_wslv_ctlOpActive &&
	     cap0_wci_wslv_ctlAckReg ;

  // rule RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;

  // rule RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     cap0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // rule RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     cap0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // rule RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     cap0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // rule RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     cap0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // rule RL_cap0_advance_split_response
  assign WILL_FIRE_RL_cap0_advance_split_response =
	     cap0_wci_wslv_respF_c_r != 2'd2 &&
	     cap0_splaF_i_notEmpty__084_AND_IF_cap0_splaF_f_ETC___d2117 &&
	     !cap0_wci_wslv_wci_cfwr_pw$whas &&
	     cap0_splitReadInFlight &&
	     !WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ;

  // rule RL_cap0_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr =
	     ((cap0_wci_wslv_respF_c_r == 2'd0) ?
		cap0_wci_wslv_respF_x_wire$whas :
		cap0_wci_wslv_respF_c_r != 2'd1 ||
		cap0_wci_wslv_respF_x_wire$whas) &&
	     cap0_wci_wslv_respF_enqueueing$whas &&
	     !(cap0_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_cap0_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr =
	     cap0_wci_wslv_respF_c_r != 2'd0 &&
	     !cap0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_cap0_wci_wslv_respF_both
  assign WILL_FIRE_RL_cap0_wci_wslv_respF_both =
	     ((cap0_wci_wslv_respF_c_r == 2'd1) ?
		cap0_wci_wslv_respF_x_wire$whas :
		cap0_wci_wslv_respF_c_r != 2'd2 ||
		cap0_wci_wslv_respF_x_wire$whas) &&
	     cap0_wci_wslv_respF_c_r != 2'd0 &&
	     cap0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_cap0_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_cap0_dataBram_serverAdapterB_outData_enqAndDeq =
	     cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     cap0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     cap0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     cap0_dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_cap0_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_outData_enqAndDeq =
	     cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_cap0_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_cap0_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_cap0_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_cap0_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_cap0_wsiS_reqFifo_enq =
	     cap0_wsiS_reqFifo$FULL_N && cap0_wsiS_operateD &&
	     cap0_wsiS_peerIsReady &&
	     cap0_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_cap0_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_cap0_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_cap0_doMessageAccept ;

  // inputs to muxes for submodule ports
  assign MUX_cap0_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_cap0_wci_cfwr &&
	     cap0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_cap0_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_cap0_wci_cfwr &&
	     cap0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_cap0_dataCount$write_1__SEL_2 =
	     WILL_FIRE_RL_cap0_doMessageAccept &&
	     cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066 ;
  assign MUX_cap0_metaCount$write_1__SEL_1 =
	     WILL_FIRE_RL_cap0_wci_cfwr &&
	     cap0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_cap0_metaCount$write_1__SEL_2 =
	     WILL_FIRE_RL_cap0_doMessageAccept &&
	     cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066 &&
	     cap0_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_cap0_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     (cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ;
  assign MUX_cap0_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete &&
	     cap0_wci_wslv_illegalEdge ;
  assign MUX_cap0_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start &&
	     (cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      cap0_wci_wslv_cState != 3'd0 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      cap0_wci_wslv_cState != 3'd1 &&
	      cap0_wci_wslv_cState != 3'd3 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      cap0_wci_wslv_cState != 3'd2 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      cap0_wci_wslv_cState != 3'd3 &&
	      cap0_wci_wslv_cState != 3'd2 &&
	      cap0_wci_wslv_cState != 3'd1 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_cap0_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr &&
	     cap0_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_cap0_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr &&
	     cap0_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_cap0_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ;
  assign MUX_pat0_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_pat0_dataBram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;
  assign MUX_pat0_dataBram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;
  assign MUX_pat0_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0C ;
  assign MUX_pat0_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_pat0_mesgCount$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1 ;
  assign MUX_pat0_mesgRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h10 ;
  assign MUX_pat0_metaBram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;
  assign MUX_pat0_metaBram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;
  assign MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;
  assign MUX_pat0_metaBram_memory_1$b_put_2__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;
  assign MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;
  assign MUX_pat0_metaBram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;
  assign MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;
  assign MUX_pat0_metaBram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;
  assign MUX_pat0_metaPtr_value$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_pat0_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ;
  assign MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	     pat0_wci_wslv_illegalEdge ;
  assign MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     (pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      pat0_wci_wslv_cState != 3'd0 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      pat0_wci_wslv_cState != 3'd1 &&
	      pat0_wci_wslv_cState != 3'd3 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      pat0_wci_wslv_cState != 3'd2 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      pat0_wci_wslv_cState != 3'd3 &&
	      pat0_wci_wslv_cState != 3'd2 &&
	      pat0_wci_wslv_cState != 3'd1 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ;
  assign MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_cap0_dataCount$write_1__VAL_2 = cap0_dataCount + 32'd1 ;
  assign MUX_cap0_metaCount$write_1__VAL_2 = cap0_metaCount + 32'd1 ;
  assign MUX_cap0_wci_wslv_illegalEdge$write_1__VAL_2 =
	     cap0_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     cap0_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     cap0_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_cap0_wci_wslv_respF_c_r$write_1__VAL_1 =
	     cap0_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_cap0_wci_wslv_respF_c_r$write_1__VAL_2 =
	     cap0_wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (cap0_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       cap0_wci_wslv_respF_q_1 ;
  always@(MUX_cap0_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete or
	  MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_cap0_advance_split_response or
	  MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_3 or
	  WILL_FIRE_RL_cap0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cap0_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete:
	  MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_cap0_advance_split_response:
	  MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_cap0_wci_cfwr:
	  MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_cap0_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (cap0_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, g_data__h62777 } ;
  assign MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     cap0_wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_cap0_wci_wslv_respF_x_wire$wset_1__VAL_3 = { 2'd1, v__h60302 } ;
  assign MUX_pat0_bytesRemain$write_1__VAL_2 =
	     (pat0_bytesRemain < 32'd4) ? 32'd0 : pat0_bytesRemain - 32'd4 ;
  assign MUX_pat0_dataCount$write_1__VAL_2 = pat0_dataCount + 32'd1 ;
  assign MUX_pat0_mesgCount$write_1__VAL_2 = pat0_mesgCount + 32'd1 ;
  assign MUX_pat0_mesgRemain$write_1__VAL_2 = pat0_mesgRemain - 32'd1 ;
  assign MUX_pat0_metaPtr_modulus$write_1__VAL_1 =
	     pat0_wci_wslv_reqF$D_OUT[15:0] - 16'd1 ;
  assign MUX_pat0_metaPtr_value$write_1__VAL_3 =
	     (pat0_metaPtr_value == pat0_metaPtr_modulus) ?
	       16'd0 :
	       pat0_metaPtr_value + 16'd1 ;
  assign MUX_pat0_unrollCnt$write_1__VAL_1 =
	     (v__h26457 == 32'd0) ? 16'd1 : b__h27074[15:0] ;
  assign MUX_pat0_unrollCnt$write_1__VAL_2 = pat0_unrollCnt - 16'd1 ;
  assign MUX_pat0_wci_wslv_illegalEdge$write_1__VAL_2 =
	     pat0_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_1 =
	     pat0_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_2 =
	     pat0_wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (pat0_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       pat0_wci_wslv_respF_q_1 ;
  always@(MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete or
	  MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_pat0_advance_split_response or
	  MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3 or
	  WILL_FIRE_RL_pat0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_pat0_advance_split_response:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_pat0_wci_cfwr:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (pat0_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, g_data__h34265 } ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     pat0_wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3 = { 2'd1, v__h30857 } ;
  assign MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     pat0_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     pat0_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (pat0_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       pat0_wsiM_reqFifo_q_1 ;
  assign MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     { 3'd1,
	       pat0_unrollCnt == 16'd1,
	       1'd0,
	       x_burstLength__h27882,
	       pat0_dataBram_serverAdapterA_outData_outData$wget,
	       x_byteEn__h27884,
	       pat0_thisOpcode[7:0] } ;
  assign MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (pat0_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign pat0_wci_wslv_wciReq$wget =
	     { cp$wci_Vm_2_MCmd,
	       cp$wci_Vm_2_MAddrSpace,
	       cp$wci_Vm_2_MByteEn,
	       cp$wci_Vm_2_MAddr,
	       cp$wci_Vm_2_MData } ;
  assign pat0_wci_wslv_wciReq$whas = 1'd1 ;
  assign pat0_wci_wslv_respF_x_wire$wget =
	     MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign pat0_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_pat0_advance_split_response ||
	     WILL_FIRE_RL_pat0_wci_cfwr ;
  assign pat0_wci_wslv_wEdge$wget = pat0_wci_wslv_reqF$D_OUT[36:34] ;
  assign pat0_wci_wslv_wEdge$whas = WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;
  assign pat0_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign pat0_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign pat0_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign pat0_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_pat0_wci_ctrl_OrE ||
	     WILL_FIRE_RL_pat0_wci_ctrl_IsO ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;
  assign pat0_wci_wci_Es_mCmd_w$wget = cp$wci_Vm_2_MCmd ;
  assign pat0_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_2_MAddrSpace ;
  assign pat0_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mByteEn_w$wget = cp$wci_Vm_2_MByteEn ;
  assign pat0_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mAddr_w$wget = cp$wci_Vm_2_MAddr ;
  assign pat0_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mData_w$wget = cp$wci_Vm_2_MData ;
  assign pat0_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign pat0_wsiM_reqFifo_x_wire$wget =
	     MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign pat0_wsiM_reqFifo_x_wire$whas = WILL_FIRE_RL_pat0_doMessageEmit ;
  assign pat0_wsiM_operateD_1$wget = 1'd1 ;
  assign pat0_wsiM_operateD_1$whas = pat0_wci_wslv_cState == 3'd2 ;
  assign pat0_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign pat0_wsiM_peerIsReady_1$whas = bias$wsiS0_SReset_n ;
  assign pat0_statusReg_w$wget = 32'hA0240A0A ;
  assign pat0_statusReg_w$whas = 1'd1 ;
  assign pat0_dataBram_serverAdapterA_outData_enqData$wget =
	     pat0_dataBram_memory$DOA ;
  assign pat0_dataBram_serverAdapterA_outData_enqData$whas =
	     (!pat0_dataBram_serverAdapterA_s1[0] ||
	      pat0_dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     pat0_dataBram_serverAdapterA_s1[1] &&
	     pat0_dataBram_serverAdapterA_s1[0] ;
  assign pat0_dataBram_serverAdapterA_outData_outData$wget =
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       pat0_dataBram_serverAdapterA_outDataCore$D_OUT :
	       pat0_dataBram_memory$DOA ;
  assign pat0_dataBram_serverAdapterA_outData_outData$whas =
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign pat0_dataBram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign pat0_dataBram_serverAdapterA_cnt_2$whas =
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas ;
  assign pat0_dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign pat0_dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign pat0_dataBram_serverAdapterA_writeWithResp$wget = 2'd0 ;
  assign pat0_dataBram_serverAdapterA_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_serverAdapterA_s1_1$wget = 2'd3 ;
  assign pat0_dataBram_serverAdapterA_s1_1$whas =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_serverAdapterB_outData_enqData$wget =
	     pat0_dataBram_memory$DOB ;
  assign pat0_dataBram_serverAdapterB_outData_enqData$whas =
	     (!pat0_dataBram_serverAdapterB_s1[0] ||
	      pat0_dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     pat0_dataBram_serverAdapterB_s1[1] &&
	     pat0_dataBram_serverAdapterB_s1[0] ;
  assign pat0_dataBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h31483 ;
  assign pat0_dataBram_serverAdapterB_outData_outData$whas =
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign pat0_dataBram_serverAdapterB_cnt_1$whas =
	     (MUX_pat0_dataBram_memory$b_put_1__SEL_1 ||
	      MUX_pat0_dataBram_memory$b_put_1__SEL_2) &&
	     (!ab__h13384[1] || ab__h13384[0]) ;
  assign pat0_dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign pat0_dataBram_serverAdapterB_cnt_2$whas =
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign pat0_dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign pat0_dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign pat0_dataBram_serverAdapterB_writeWithResp$wget = ab__h13384 ;
  assign pat0_dataBram_serverAdapterB_writeWithResp$whas =
	     MUX_pat0_dataBram_memory$b_put_1__SEL_1 ||
	     MUX_pat0_dataBram_memory$b_put_1__SEL_2 ;
  assign pat0_dataBram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h13384[1] || ab__h13384[0] } ;
  assign pat0_dataBram_serverAdapterB_s1_1$whas =
	     pat0_dataBram_serverAdapterB_writeWithResp$whas ;
  assign pat0_metaBram_serverAdapterA_outData_enqData$wget =
	     pat0_metaBram_memory$DOA ;
  assign pat0_metaBram_serverAdapterA_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_s1[0] ||
	      pat0_metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_s1[1] &&
	     pat0_metaBram_serverAdapterA_s1[0] ;
  assign pat0_metaBram_serverAdapterA_outData_outData$wget = v__h26457 ;
  assign pat0_metaBram_serverAdapterA_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_outData_enqData$wget =
	     pat0_metaBram_memory$DOB ;
  assign pat0_metaBram_serverAdapterB_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_s1[0] ||
	      pat0_metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_s1[1] &&
	     pat0_metaBram_serverAdapterB_s1[0] ;
  assign pat0_metaBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h31527 ;
  assign pat0_metaBram_serverAdapterB_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_cnt_1$whas =
	     (MUX_pat0_metaBram_memory$b_put_1__SEL_1 ||
	      MUX_pat0_metaBram_memory$b_put_1__SEL_2) &&
	     (!ab__h16502[1] || ab__h16502[0]) ;
  assign pat0_metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_writeWithResp$wget = ab__h16502 ;
  assign pat0_metaBram_serverAdapterB_writeWithResp$whas =
	     MUX_pat0_metaBram_memory$b_put_1__SEL_1 ||
	     MUX_pat0_metaBram_memory$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h16502[1] || ab__h16502[0] } ;
  assign pat0_metaBram_serverAdapterB_s1_1$whas =
	     pat0_metaBram_serverAdapterB_writeWithResp$whas ;
  assign pat0_metaBram_serverAdapterA_1_outData_enqData$wget =
	     pat0_metaBram_memory_1$DOA ;
  assign pat0_metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_1_s1[0] ||
	      pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_1_s1[1] &&
	     pat0_metaBram_serverAdapterA_1_s1[0] ;
  assign pat0_metaBram_serverAdapterA_1_outData_outData$wget =
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       pat0_metaBram_memory_1$DOA ;
  assign pat0_metaBram_serverAdapterA_1_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_1_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_1_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_1_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_1_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_1_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_1_outData_enqData$wget =
	     pat0_metaBram_memory_1$DOB ;
  assign pat0_metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_1_s1[0] ||
	      pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_1_s1[1] &&
	     pat0_metaBram_serverAdapterB_1_s1[0] ;
  assign pat0_metaBram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h31567 ;
  assign pat0_metaBram_serverAdapterB_1_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_1_cnt_1$whas =
	     (MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ||
	      MUX_pat0_metaBram_memory_1$b_put_2__SEL_2) &&
	     (!ab__h19448[1] || ab__h19448[0]) ;
  assign pat0_metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_1_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_1_writeWithResp$wget = ab__h19448 ;
  assign pat0_metaBram_serverAdapterB_1_writeWithResp$whas =
	     MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ||
	     MUX_pat0_metaBram_memory_1$b_put_2__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h19448[1] || ab__h19448[0] } ;
  assign pat0_metaBram_serverAdapterB_1_s1_1$whas =
	     pat0_metaBram_serverAdapterB_1_writeWithResp$whas ;
  assign pat0_metaBram_serverAdapterA_2_outData_enqData$wget =
	     pat0_metaBram_memory_2$DOA ;
  assign pat0_metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_2_s1[0] ||
	      pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_2_s1[1] &&
	     pat0_metaBram_serverAdapterA_2_s1[0] ;
  assign pat0_metaBram_serverAdapterA_2_outData_outData$wget =
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       pat0_metaBram_memory_2$DOA ;
  assign pat0_metaBram_serverAdapterA_2_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_2_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_2_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_2_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_2_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_2_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_2_outData_enqData$wget =
	     pat0_metaBram_memory_2$DOB ;
  assign pat0_metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_2_s1[0] ||
	      pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_2_s1[1] &&
	     pat0_metaBram_serverAdapterB_2_s1[0] ;
  assign pat0_metaBram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h31607 ;
  assign pat0_metaBram_serverAdapterB_2_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_2_cnt_1$whas =
	     (MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ||
	      MUX_pat0_metaBram_memory_2$b_put_1__SEL_2) &&
	     (!ab__h22394[1] || ab__h22394[0]) ;
  assign pat0_metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_2_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_2_writeWithResp$wget = ab__h22394 ;
  assign pat0_metaBram_serverAdapterB_2_writeWithResp$whas =
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ||
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h22394[1] || ab__h22394[0] } ;
  assign pat0_metaBram_serverAdapterB_2_s1_1$whas =
	     pat0_metaBram_serverAdapterB_2_writeWithResp$whas ;
  assign pat0_metaBram_serverAdapterA_3_outData_enqData$wget =
	     pat0_metaBram_memory_3$DOA ;
  assign pat0_metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_3_s1[0] ||
	      pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_3_s1[1] &&
	     pat0_metaBram_serverAdapterA_3_s1[0] ;
  assign pat0_metaBram_serverAdapterA_3_outData_outData$wget =
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       pat0_metaBram_memory_3$DOA ;
  assign pat0_metaBram_serverAdapterA_3_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_3_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_3_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_3_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_3_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_3_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_3_outData_enqData$wget =
	     pat0_metaBram_memory_3$DOB ;
  assign pat0_metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_3_s1[0] ||
	      pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_3_s1[1] &&
	     pat0_metaBram_serverAdapterB_3_s1[0] ;
  assign pat0_metaBram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h31647 ;
  assign pat0_metaBram_serverAdapterB_3_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_3_cnt_1$whas =
	     (MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ||
	      MUX_pat0_metaBram_memory_3$b_put_1__SEL_2) &&
	     (!ab__h25340[1] || ab__h25340[0]) ;
  assign pat0_metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_3_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_3_writeWithResp$wget = ab__h25340 ;
  assign pat0_metaBram_serverAdapterB_3_writeWithResp$whas =
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ||
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h25340[1] || ab__h25340[0] } ;
  assign pat0_metaBram_serverAdapterB_3_s1_1$whas =
	     pat0_metaBram_serverAdapterB_3_writeWithResp$whas ;
  assign cap0_wci_wslv_wciReq$wget =
	     { cp$wci_Vm_4_MCmd,
	       cp$wci_Vm_4_MAddrSpace,
	       cp$wci_Vm_4_MByteEn,
	       cp$wci_Vm_4_MAddr,
	       cp$wci_Vm_4_MData } ;
  assign cap0_wci_wslv_wciReq$whas = 1'd1 ;
  assign cap0_wci_wslv_respF_x_wire$wget =
	     MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign cap0_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_cap0_advance_split_response ||
	     WILL_FIRE_RL_cap0_wci_cfwr ;
  assign cap0_wci_wslv_wEdge$wget = cap0_wci_wslv_reqF$D_OUT[36:34] ;
  assign cap0_wci_wslv_wEdge$whas = WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start ;
  assign cap0_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign cap0_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign cap0_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign cap0_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_cap0_wci_ctrl_OrE ||
	     WILL_FIRE_RL_cap0_wci_ctrl_IsO ||
	     WILL_FIRE_RL_cap0_wci_ctrl_EiI ;
  assign cap0_wci_wci_Es_mCmd_w$wget = cp$wci_Vm_4_MCmd ;
  assign cap0_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign cap0_wci_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_4_MAddrSpace ;
  assign cap0_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign cap0_wci_wci_Es_mByteEn_w$wget = cp$wci_Vm_4_MByteEn ;
  assign cap0_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign cap0_wci_wci_Es_mAddr_w$wget = cp$wci_Vm_4_MAddr ;
  assign cap0_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign cap0_wci_wci_Es_mData_w$wget = cp$wci_Vm_4_MData ;
  assign cap0_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign cap0_wsiS_wsiReq$wget =
	     { bias$wsiM0_MCmd,
	       bias$wsiM0_MReqLast,
	       bias$wsiM0_MBurstPrecise,
	       bias$wsiM0_MBurstLength,
	       bias$wsiM0_MData,
	       bias$wsiM0_MByteEn,
	       bias$wsiM0_MReqInfo } ;
  assign cap0_wsiS_wsiReq$whas = 1'd1 ;
  assign cap0_wsiS_operateD_1$wget = 1'd1 ;
  assign cap0_wsiS_operateD_1$whas = cap0_wci_wslv_cState == 3'd2 ;
  assign cap0_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign cap0_wsiS_peerIsReady_1$whas = bias$wsiM0_MReset_n ;
  assign cap0_wsiS_sThreadBusy_dw$wget = cap0_wsiS_reqFifo_countReg > 2'd1 ;
  assign cap0_wsiS_sThreadBusy_dw$whas =
	     cap0_wsiS_reqFifo_levelsValid && cap0_wsiS_operateD &&
	     cap0_wsiS_peerIsReady ;
  assign cap0_wtiS_wtiReq$wget = 67'h0 ;
  assign cap0_wtiS_wtiReq$whas = 1'b0 ;
  assign cap0_wtiS_operateD_1$wget = 1'b0 ;
  assign cap0_wtiS_operateD_1$whas = 1'b0 ;
  assign cap0_nowW$wget = cap0_wtiS_nowReq[63:0] ;
  assign cap0_nowW$whas = 1'd1 ;
  assign cap0_statusReg_w$wget = rdat___1__h61799 ;
  assign cap0_statusReg_w$whas = 1'd1 ;
  assign cap0_dataBram_serverAdapterA_outData_enqData$wget =
	     cap0_dataBram_memory$DOA ;
  assign cap0_dataBram_serverAdapterA_outData_enqData$whas =
	     (!cap0_dataBram_serverAdapterA_s1[0] ||
	      cap0_dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     cap0_dataBram_serverAdapterA_s1[1] &&
	     cap0_dataBram_serverAdapterA_s1[0] ;
  assign cap0_dataBram_serverAdapterA_outData_outData$wget =
	     cap0_dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       cap0_dataBram_serverAdapterA_outDataCore$D_OUT :
	       cap0_dataBram_memory$DOA ;
  assign cap0_dataBram_serverAdapterA_outData_outData$whas =
	     cap0_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !cap0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     cap0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign cap0_dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign cap0_dataBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign cap0_dataBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign cap0_dataBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign cap0_dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign cap0_dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign cap0_dataBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign cap0_dataBram_serverAdapterA_writeWithResp$whas =
	     MUX_cap0_dataCount$write_1__SEL_2 ;
  assign cap0_dataBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign cap0_dataBram_serverAdapterA_s1_1$whas =
	     MUX_cap0_dataCount$write_1__SEL_2 ;
  assign cap0_dataBram_serverAdapterB_outData_enqData$wget =
	     cap0_dataBram_memory$DOB ;
  assign cap0_dataBram_serverAdapterB_outData_enqData$whas =
	     (!cap0_dataBram_serverAdapterB_s1[0] ||
	      cap0_dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     cap0_dataBram_serverAdapterB_s1[1] &&
	     cap0_dataBram_serverAdapterB_s1[0] ;
  assign cap0_dataBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h60929 ;
  assign cap0_dataBram_serverAdapterB_outData_outData$whas =
	     cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     cap0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign cap0_dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign cap0_dataBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign cap0_dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign cap0_dataBram_serverAdapterB_cnt_2$whas =
	     cap0_dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign cap0_dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign cap0_dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign cap0_dataBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign cap0_dataBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign cap0_dataBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign cap0_dataBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterA_outData_enqData$wget =
	     cap0_metaBram_memory$DOA ;
  assign cap0_metaBram_serverAdapterA_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterA_s1[0] ||
	      cap0_metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterA_s1[1] &&
	     cap0_metaBram_serverAdapterA_s1[0] ;
  assign cap0_metaBram_serverAdapterA_outData_outData$wget =
	     cap0_metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterA_outDataCore$D_OUT :
	       cap0_metaBram_memory$DOA ;
  assign cap0_metaBram_serverAdapterA_outData_outData$whas =
	     cap0_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_writeWithResp$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterA_s1_1$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_s1_1$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterB_outData_enqData$wget =
	     cap0_metaBram_memory$DOB ;
  assign cap0_metaBram_serverAdapterB_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterB_s1[0] ||
	      cap0_metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterB_s1[1] &&
	     cap0_metaBram_serverAdapterB_s1[0] ;
  assign cap0_metaBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h60973 ;
  assign cap0_metaBram_serverAdapterB_outData_outData$whas =
	     cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign cap0_metaBram_serverAdapterB_cnt_2$whas =
	     cap0_metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign cap0_metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign cap0_metaBram_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_s1_1$wget = 2'd3 ;
  assign cap0_metaBram_serverAdapterB_s1_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterA_1_outData_enqData$wget =
	     cap0_metaBram_memory_1$DOA ;
  assign cap0_metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterA_1_s1[0] ||
	      cap0_metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterA_1_s1[1] &&
	     cap0_metaBram_serverAdapterA_1_s1[0] ;
  assign cap0_metaBram_serverAdapterA_1_outData_outData$wget =
	     cap0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       cap0_metaBram_memory_1$DOA ;
  assign cap0_metaBram_serverAdapterA_1_outData_outData$whas =
	     cap0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterA_1_cnt_1$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_1_cnt_2$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_1_cnt_2$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_1_writeWithResp$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_1_writeWithResp$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterA_1_s1_1$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_1_s1_1$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterB_1_outData_enqData$wget =
	     cap0_metaBram_memory_1$DOB ;
  assign cap0_metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterB_1_s1[0] ||
	      cap0_metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterB_1_s1[1] &&
	     cap0_metaBram_serverAdapterB_1_s1[0] ;
  assign cap0_metaBram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h61013 ;
  assign cap0_metaBram_serverAdapterB_1_outData_outData$whas =
	     cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign cap0_metaBram_serverAdapterB_1_cnt_2$whas =
	     cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;
  assign cap0_metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_1_writeWithResp$wget = 2'd0 ;
  assign cap0_metaBram_serverAdapterB_1_writeWithResp$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_1_s1_1$wget = 2'd3 ;
  assign cap0_metaBram_serverAdapterB_1_s1_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterA_2_outData_enqData$wget =
	     cap0_metaBram_memory_2$DOA ;
  assign cap0_metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterA_2_s1[0] ||
	      cap0_metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterA_2_s1[1] &&
	     cap0_metaBram_serverAdapterA_2_s1[0] ;
  assign cap0_metaBram_serverAdapterA_2_outData_outData$wget =
	     cap0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       cap0_metaBram_memory_2$DOA ;
  assign cap0_metaBram_serverAdapterA_2_outData_outData$whas =
	     cap0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterA_2_cnt_1$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_2_cnt_2$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_2_cnt_2$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_2_writeWithResp$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_2_writeWithResp$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterA_2_s1_1$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_2_s1_1$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterB_2_outData_enqData$wget =
	     cap0_metaBram_memory_2$DOB ;
  assign cap0_metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterB_2_s1[0] ||
	      cap0_metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterB_2_s1[1] &&
	     cap0_metaBram_serverAdapterB_2_s1[0] ;
  assign cap0_metaBram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h61053 ;
  assign cap0_metaBram_serverAdapterB_2_outData_outData$whas =
	     cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign cap0_metaBram_serverAdapterB_2_cnt_2$whas =
	     cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;
  assign cap0_metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_2_writeWithResp$wget = 2'd0 ;
  assign cap0_metaBram_serverAdapterB_2_writeWithResp$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_2_s1_1$wget = 2'd3 ;
  assign cap0_metaBram_serverAdapterB_2_s1_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterA_3_outData_enqData$wget =
	     cap0_metaBram_memory_3$DOA ;
  assign cap0_metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterA_3_s1[0] ||
	      cap0_metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterA_3_s1[1] &&
	     cap0_metaBram_serverAdapterA_3_s1[0] ;
  assign cap0_metaBram_serverAdapterA_3_outData_outData$wget =
	     cap0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       cap0_metaBram_memory_3$DOA ;
  assign cap0_metaBram_serverAdapterA_3_outData_outData$whas =
	     cap0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterA_3_cnt_1$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_3_cnt_2$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_3_cnt_2$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_3_writeWithResp$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_3_writeWithResp$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterA_3_s1_1$wget = 2'd2 ;
  assign cap0_metaBram_serverAdapterA_3_s1_1$whas =
	     MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_serverAdapterB_3_outData_enqData$wget =
	     cap0_metaBram_memory_3$DOB ;
  assign cap0_metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!cap0_metaBram_serverAdapterB_3_s1[0] ||
	      cap0_metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     cap0_metaBram_serverAdapterB_3_s1[1] &&
	     cap0_metaBram_serverAdapterB_3_s1[0] ;
  assign cap0_metaBram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h61093 ;
  assign cap0_metaBram_serverAdapterB_3_outData_outData$whas =
	     cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign cap0_metaBram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign cap0_metaBram_serverAdapterB_3_cnt_2$whas =
	     cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign cap0_metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign cap0_metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_3_writeWithResp$wget = 2'd0 ;
  assign cap0_metaBram_serverAdapterB_3_writeWithResp$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign cap0_metaBram_serverAdapterB_3_s1_1$wget = 2'd3 ;
  assign cap0_metaBram_serverAdapterB_3_s1_1$whas =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways ;
  assign cap0_wsi_Es_mCmd_w$wget = bias$wsiM0_MCmd ;
  assign cap0_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign cap0_wsi_Es_mBurstLength_w$wget = bias$wsiM0_MBurstLength ;
  assign cap0_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign cap0_wsi_Es_mData_w$wget = bias$wsiM0_MData ;
  assign cap0_wsi_Es_mData_w$whas = 1'd1 ;
  assign cap0_wsi_Es_mByteEn_w$wget = bias$wsiM0_MByteEn ;
  assign cap0_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign cap0_wsi_Es_mReqInfo_w$wget = bias$wsiM0_MReqInfo ;
  assign cap0_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign cap0_wti_Es_mCmd_w$wget = 3'h0 ;
  assign cap0_wti_Es_mCmd_w$whas = 1'b0 ;
  assign cap0_wti_Es_mData_w$wget = 64'h0 ;
  assign cap0_wti_Es_mData_w$whas = 1'b0 ;
  assign pat0_wci_wslv_reqF_r_enq$whas =
	     pat0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign pat0_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_pat0_wci_cfrd || WILL_FIRE_RL_pat0_wci_cfwr ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;
  assign pat0_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign pat0_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_pat0_advance_split_response ||
	     WILL_FIRE_RL_pat0_wci_cfwr ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;
  assign pat0_wci_wslv_respF_dequeueing$whas =
	     pat0_wci_wslv_respF_c_r != 2'd0 ;
  assign pat0_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign pat0_wci_wslv_wci_cfwr_pw$whas =
	     pat0_wci_wslv_reqF$EMPTY_N && pat0_wci_wslv_reqF$D_OUT[68] &&
	     pat0_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign pat0_wci_wslv_wci_cfrd_pw$whas =
	     pat0_wci_wslv_reqF$EMPTY_N && pat0_wci_wslv_reqF$D_OUT[68] &&
	     pat0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign pat0_wci_wslv_wci_ctrl_pw$whas =
	     pat0_wci_wslv_reqF$EMPTY_N && !pat0_wci_wslv_reqF$D_OUT[68] &&
	     pat0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign pat0_wsiM_reqFifo_enqueueing$whas = WILL_FIRE_RL_pat0_doMessageEmit ;
  assign pat0_wsiM_reqFifo_dequeueing$whas =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq ;
  assign pat0_wsiM_sThreadBusy_pw$whas = bias$wsiS0_SThreadBusy ;
  assign pat0_metaPtr_incAction$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaPtr_decAction$whas = 1'b0 ;
  assign pat0_dataBram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_doMessageEmit && !pat0_doZLM ;
  assign pat0_dataBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd0 ;
  assign pat0_metaBram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd0 ;
  assign pat0_metaBram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd1 ;
  assign pat0_metaBram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd2 ;
  assign pat0_metaBram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd3 ;
  assign cap0_wci_wslv_reqF_r_enq$whas =
	     cap0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign cap0_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_cap0_wci_cfrd || WILL_FIRE_RL_cap0_wci_cfwr ||
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start ;
  assign cap0_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign cap0_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     cap0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_cap0_advance_split_response ||
	     WILL_FIRE_RL_cap0_wci_cfwr ||
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ;
  assign cap0_wci_wslv_respF_dequeueing$whas =
	     cap0_wci_wslv_respF_c_r != 2'd0 ;
  assign cap0_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign cap0_wci_wslv_wci_cfwr_pw$whas =
	     cap0_wci_wslv_reqF$EMPTY_N && cap0_wci_wslv_reqF$D_OUT[68] &&
	     cap0_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign cap0_wci_wslv_wci_cfrd_pw$whas =
	     cap0_wci_wslv_reqF$EMPTY_N && cap0_wci_wslv_reqF$D_OUT[68] &&
	     cap0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign cap0_wci_wslv_wci_ctrl_pw$whas =
	     cap0_wci_wslv_reqF$EMPTY_N && !cap0_wci_wslv_reqF$D_OUT[68] &&
	     cap0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign cap0_wsiS_reqFifo_r_enq$whas = WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ;
  assign cap0_wsiS_reqFifo_r_deq$whas = WILL_FIRE_RL_cap0_doMessageAccept ;
  assign cap0_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign cap0_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ;
  assign cap0_wsiS_reqFifo_doResetDeq$whas =
	     WILL_FIRE_RL_cap0_doMessageAccept ;
  assign cap0_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign cap0_dataBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign cap0_dataBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_cap0_advance_split_response &&
	     cap0_splaF$D_OUT[2] &&
	     cap0_splaF$D_OUT[1:0] == 2'd0 ;
  assign cap0_metaBram_serverAdapterA_outData_deqCalled$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_cap0_advance_split_response &&
	     !cap0_splaF$D_OUT[2] &&
	     cap0_splaF$D_OUT[1:0] == 2'd0 ;
  assign cap0_metaBram_serverAdapterA_1_outData_deqCalled$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_cap0_advance_split_response &&
	     !cap0_splaF$D_OUT[2] &&
	     cap0_splaF$D_OUT[1:0] == 2'd1 ;
  assign cap0_metaBram_serverAdapterA_2_outData_deqCalled$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_cap0_advance_split_response &&
	     !cap0_splaF$D_OUT[2] &&
	     cap0_splaF$D_OUT[1:0] == 2'd2 ;
  assign cap0_metaBram_serverAdapterA_3_outData_deqCalled$whas = 1'b0 ;
  assign cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_cap0_advance_split_response &&
	     !cap0_splaF$D_OUT[2] &&
	     cap0_splaF$D_OUT[1:0] == 2'd3 ;
  assign cap0_wsi_Es_mReqLast_w$whas = bias$wsiM0_MReqLast ;
  assign cap0_wsi_Es_mBurstPrecise_w$whas = bias$wsiM0_MBurstPrecise ;
  assign cap0_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign pat0_wsiM_extStatusW$wget =
	     { pat0_wsiM_pMesgCount,
	       pat0_wsiM_iMesgCount,
	       pat0_wsiM_tBusyCount } ;
  assign pat0_metaPtr_modulus_bw$wget = pat0_metaPtr_modulus ;
  assign cap0_wsiS_extStatusW$wget =
	     { cap0_wsiS_pMesgCount,
	       cap0_wsiS_iMesgCount,
	       cap0_wsiS_tBusyCount } ;

  // register cap0_controlReg
  assign cap0_controlReg$D_IN =
	     MUX_cap0_controlReg$write_1__SEL_1 ?
	       cap0_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign cap0_controlReg$EN =
	     WILL_FIRE_RL_cap0_wci_cfwr &&
	     cap0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_cap0_wci_ctrl_EiI ;

  // register cap0_dataBram_serverAdapterA_cnt
  assign cap0_dataBram_serverAdapterA_cnt$D_IN =
	     cap0_dataBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign cap0_dataBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register cap0_dataBram_serverAdapterA_s1
  assign cap0_dataBram_serverAdapterA_s1$D_IN =
	     { MUX_cap0_dataCount$write_1__SEL_2, 1'b0 } ;
  assign cap0_dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register cap0_dataBram_serverAdapterB_cnt
  assign cap0_dataBram_serverAdapterB_cnt$D_IN =
	     cap0_dataBram_serverAdapterB_cnt_509_PLUS_IF_c_ETC___d1515 ;
  assign cap0_dataBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways ||
	     cap0_dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register cap0_dataBram_serverAdapterB_s1
  assign cap0_dataBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign cap0_dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register cap0_dataCount
  always@(MUX_cap0_dataCount$write_1__SEL_1 or
	  cap0_wci_wslv_reqF$D_OUT or
	  MUX_cap0_dataCount$write_1__SEL_2 or
	  MUX_cap0_dataCount$write_1__VAL_2 or WILL_FIRE_RL_cap0_wci_ctrl_EiI)
  case (1'b1)
    MUX_cap0_dataCount$write_1__SEL_1:
	cap0_dataCount$D_IN = cap0_wci_wslv_reqF$D_OUT[31:0];
    MUX_cap0_dataCount$write_1__SEL_2:
	cap0_dataCount$D_IN = MUX_cap0_dataCount$write_1__VAL_2;
    WILL_FIRE_RL_cap0_wci_ctrl_EiI: cap0_dataCount$D_IN = 32'd0;
    default: cap0_dataCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign cap0_dataCount$EN =
	     WILL_FIRE_RL_cap0_doMessageAccept &&
	     cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066 ||
	     WILL_FIRE_RL_cap0_wci_cfwr &&
	     cap0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     WILL_FIRE_RL_cap0_wci_ctrl_EiI ;

  // register cap0_isFirst
  assign cap0_isFirst$D_IN = 1'b0 ;
  assign cap0_isFirst$EN = 1'b0 ;

  // register cap0_mesgLengthSoFar
  assign cap0_mesgLengthSoFar$D_IN =
	     cap0_wsiS_reqFifo$D_OUT[57] ? 14'd0 : mlB__h58072 ;
  assign cap0_mesgLengthSoFar$EN = WILL_FIRE_RL_cap0_doMessageAccept ;

  // register cap0_metaBram_serverAdapterA_1_cnt
  assign cap0_metaBram_serverAdapterA_1_cnt$D_IN =
	     cap0_metaBram_serverAdapterA_1_cnt + 3'd0 + 3'd0 ;
  assign cap0_metaBram_serverAdapterA_1_cnt$EN = 1'b0 ;

  // register cap0_metaBram_serverAdapterA_1_s1
  assign cap0_metaBram_serverAdapterA_1_s1$D_IN =
	     { MUX_cap0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign cap0_metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register cap0_metaBram_serverAdapterA_2_cnt
  assign cap0_metaBram_serverAdapterA_2_cnt$D_IN =
	     cap0_metaBram_serverAdapterA_2_cnt + 3'd0 + 3'd0 ;
  assign cap0_metaBram_serverAdapterA_2_cnt$EN = 1'b0 ;

  // register cap0_metaBram_serverAdapterA_2_s1
  assign cap0_metaBram_serverAdapterA_2_s1$D_IN =
	     { MUX_cap0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign cap0_metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register cap0_metaBram_serverAdapterA_3_cnt
  assign cap0_metaBram_serverAdapterA_3_cnt$D_IN =
	     cap0_metaBram_serverAdapterA_3_cnt + 3'd0 + 3'd0 ;
  assign cap0_metaBram_serverAdapterA_3_cnt$EN = 1'b0 ;

  // register cap0_metaBram_serverAdapterA_3_s1
  assign cap0_metaBram_serverAdapterA_3_s1$D_IN =
	     { MUX_cap0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign cap0_metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register cap0_metaBram_serverAdapterA_cnt
  assign cap0_metaBram_serverAdapterA_cnt$D_IN =
	     cap0_metaBram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign cap0_metaBram_serverAdapterA_cnt$EN = 1'b0 ;

  // register cap0_metaBram_serverAdapterA_s1
  assign cap0_metaBram_serverAdapterA_s1$D_IN =
	     { MUX_cap0_metaCount$write_1__SEL_2, 1'b0 } ;
  assign cap0_metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register cap0_metaBram_serverAdapterB_1_cnt
  assign cap0_metaBram_serverAdapterB_1_cnt$D_IN =
	     cap0_metaBram_serverAdapterB_1_cnt_745_PLUS_IF_ETC___d1751 ;
  assign cap0_metaBram_serverAdapterB_1_cnt$EN =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways ||
	     cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;

  // register cap0_metaBram_serverAdapterB_1_s1
  assign cap0_metaBram_serverAdapterB_1_s1$D_IN =
	     { WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways,
	       1'b1 } ;
  assign cap0_metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register cap0_metaBram_serverAdapterB_2_cnt
  assign cap0_metaBram_serverAdapterB_2_cnt$D_IN =
	     cap0_metaBram_serverAdapterB_2_cnt_863_PLUS_IF_ETC___d1869 ;
  assign cap0_metaBram_serverAdapterB_2_cnt$EN =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways ||
	     cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;

  // register cap0_metaBram_serverAdapterB_2_s1
  assign cap0_metaBram_serverAdapterB_2_s1$D_IN =
	     { WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways,
	       1'b1 } ;
  assign cap0_metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register cap0_metaBram_serverAdapterB_3_cnt
  assign cap0_metaBram_serverAdapterB_3_cnt$D_IN =
	     cap0_metaBram_serverAdapterB_3_cnt_981_PLUS_IF_ETC___d1987 ;
  assign cap0_metaBram_serverAdapterB_3_cnt$EN =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways ||
	     cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register cap0_metaBram_serverAdapterB_3_s1
  assign cap0_metaBram_serverAdapterB_3_s1$D_IN =
	     { WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways,
	       1'b1 } ;
  assign cap0_metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register cap0_metaBram_serverAdapterB_cnt
  assign cap0_metaBram_serverAdapterB_cnt$D_IN =
	     cap0_metaBram_serverAdapterB_cnt_627_PLUS_IF_c_ETC___d1633 ;
  assign cap0_metaBram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways ||
	     cap0_metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register cap0_metaBram_serverAdapterB_s1
  assign cap0_metaBram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign cap0_metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register cap0_metaCount
  always@(MUX_cap0_metaCount$write_1__SEL_1 or
	  cap0_wci_wslv_reqF$D_OUT or
	  MUX_cap0_metaCount$write_1__SEL_2 or
	  MUX_cap0_metaCount$write_1__VAL_2 or WILL_FIRE_RL_cap0_wci_ctrl_EiI)
  case (1'b1)
    MUX_cap0_metaCount$write_1__SEL_1:
	cap0_metaCount$D_IN = cap0_wci_wslv_reqF$D_OUT[31:0];
    MUX_cap0_metaCount$write_1__SEL_2:
	cap0_metaCount$D_IN = MUX_cap0_metaCount$write_1__VAL_2;
    WILL_FIRE_RL_cap0_wci_ctrl_EiI: cap0_metaCount$D_IN = 32'd0;
    default: cap0_metaCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign cap0_metaCount$EN =
	     WILL_FIRE_RL_cap0_doMessageAccept &&
	     cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066 &&
	     cap0_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_cap0_wci_cfwr &&
	     cap0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_cap0_wci_ctrl_EiI ;

  // register cap0_splitReadInFlight
  assign cap0_splitReadInFlight$D_IN =
	     MUX_cap0_splitReadInFlight$write_1__SEL_1 ;
  assign cap0_splitReadInFlight$EN =
	     WILL_FIRE_RL_cap0_wci_cfrd &&
	     (cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ||
	     WILL_FIRE_RL_cap0_advance_split_response ;

  // register cap0_wci_wslv_cEdge
  assign cap0_wci_wslv_cEdge$D_IN = cap0_wci_wslv_reqF$D_OUT[36:34] ;
  assign cap0_wci_wslv_cEdge$EN = WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start ;

  // register cap0_wci_wslv_cState
  assign cap0_wci_wslv_cState$D_IN = cap0_wci_wslv_nState ;
  assign cap0_wci_wslv_cState$EN =
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete &&
	     !cap0_wci_wslv_illegalEdge ;

  // register cap0_wci_wslv_ctlAckReg
  assign cap0_wci_wslv_ctlAckReg$D_IN = cap0_wci_wslv_ctlAckReg_1$whas ;
  assign cap0_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register cap0_wci_wslv_ctlOpActive
  assign cap0_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ;
  assign cap0_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start ;

  // register cap0_wci_wslv_illegalEdge
  assign cap0_wci_wslv_illegalEdge$D_IN =
	     !MUX_cap0_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_cap0_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign cap0_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete &&
	     cap0_wci_wslv_illegalEdge ||
	     MUX_cap0_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register cap0_wci_wslv_isReset_isInReset
  assign cap0_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign cap0_wci_wslv_isReset_isInReset$EN =
	     cap0_wci_wslv_isReset_isInReset ;

  // register cap0_wci_wslv_nState
  always@(cap0_wci_wslv_reqF$D_OUT)
  begin
    case (cap0_wci_wslv_reqF$D_OUT[36:34])
      3'd0: cap0_wci_wslv_nState$D_IN = 3'd1;
      3'd1: cap0_wci_wslv_nState$D_IN = 3'd2;
      3'd2: cap0_wci_wslv_nState$D_IN = 3'd3;
      default: cap0_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign cap0_wci_wslv_nState$EN =
	     WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start &&
	     (cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      cap0_wci_wslv_cState == 3'd0 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (cap0_wci_wslv_cState == 3'd1 ||
	       cap0_wci_wslv_cState == 3'd3) ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      cap0_wci_wslv_cState == 3'd2 ||
	      cap0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (cap0_wci_wslv_cState == 3'd3 || cap0_wci_wslv_cState == 3'd2 ||
	       cap0_wci_wslv_cState == 3'd1)) ;

  // register cap0_wci_wslv_reqF_countReg
  assign cap0_wci_wslv_reqF_countReg$D_IN =
	     (cap0_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       cap0_wci_wslv_reqF_countReg + 2'd1 :
	       cap0_wci_wslv_reqF_countReg - 2'd1 ;
  assign cap0_wci_wslv_reqF_countReg$EN =
	     (cap0_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     cap0_wci_wslv_reqF_r_deq$whas ;

  // register cap0_wci_wslv_respF_c_r
  assign cap0_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr ?
	       MUX_cap0_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_cap0_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign cap0_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr ;

  // register cap0_wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_cap0_wci_wslv_respF_both or
	  MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_cap0_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr or cap0_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cap0_wci_wslv_respF_both:
	  cap0_wci_wslv_respF_q_0$D_IN =
	      MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_cap0_wci_wslv_respF_q_0$write_1__SEL_2:
	  cap0_wci_wslv_respF_q_0$D_IN =
	      MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr:
	  cap0_wci_wslv_respF_q_0$D_IN = cap0_wci_wslv_respF_q_1;
      default: cap0_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cap0_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_cap0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr &&
	     cap0_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr ;

  // register cap0_wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_cap0_wci_wslv_respF_both or
	  MUX_cap0_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_cap0_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cap0_wci_wslv_respF_both:
	  cap0_wci_wslv_respF_q_1$D_IN =
	      MUX_cap0_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_cap0_wci_wslv_respF_q_1$write_1__SEL_2:
	  cap0_wci_wslv_respF_q_1$D_IN =
	      MUX_cap0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr:
	  cap0_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: cap0_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cap0_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_cap0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_cap0_wci_wslv_respF_incCtr &&
	     cap0_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_cap0_wci_wslv_respF_decCtr ;

  // register cap0_wci_wslv_sFlagReg
  assign cap0_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign cap0_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register cap0_wci_wslv_sThreadBusy_d
  assign cap0_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign cap0_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register cap0_wsiS_burstKind
  assign cap0_wsiS_burstKind$D_IN =
	     (cap0_wsiS_burstKind == 2'd0) ?
	       (cap0_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign cap0_wsiS_burstKind$EN =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq &&
	     (cap0_wsiS_burstKind == 2'd0 ||
	      (cap0_wsiS_burstKind == 2'd1 || cap0_wsiS_burstKind == 2'd2) &&
	      cap0_wsiS_wsiReq$wget[57]) ;

  // register cap0_wsiS_errorSticky
  assign cap0_wsiS_errorSticky$D_IN = 1'b0 ;
  assign cap0_wsiS_errorSticky$EN = 1'b0 ;

  // register cap0_wsiS_iMesgCount
  assign cap0_wsiS_iMesgCount$D_IN = cap0_wsiS_iMesgCount + 32'd1 ;
  assign cap0_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq &&
	     cap0_wsiS_burstKind == 2'd2 &&
	     cap0_wsiS_wsiReq$wget[57] ;

  // register cap0_wsiS_isReset_isInReset
  assign cap0_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign cap0_wsiS_isReset_isInReset$EN = cap0_wsiS_isReset_isInReset ;

  // register cap0_wsiS_mesgWordLength
  assign cap0_wsiS_mesgWordLength$D_IN = cap0_wsiS_wordCount ;
  assign cap0_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq && cap0_wsiS_wsiReq$wget[57] ;

  // register cap0_wsiS_operateD
  assign cap0_wsiS_operateD$D_IN = cap0_wci_wslv_cState == 3'd2 ;
  assign cap0_wsiS_operateD$EN = 1'd1 ;

  // register cap0_wsiS_pMesgCount
  assign cap0_wsiS_pMesgCount$D_IN = cap0_wsiS_pMesgCount + 32'd1 ;
  assign cap0_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq &&
	     cap0_wsiS_burstKind == 2'd1 &&
	     cap0_wsiS_wsiReq$wget[57] ;

  // register cap0_wsiS_peerIsReady
  assign cap0_wsiS_peerIsReady$D_IN = bias$wsiM0_MReset_n ;
  assign cap0_wsiS_peerIsReady$EN = 1'd1 ;

  // register cap0_wsiS_reqFifo_countReg
  assign cap0_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ?
	       cap0_wsiS_reqFifo_countReg + 2'd1 :
	       cap0_wsiS_reqFifo_countReg - 2'd1 ;
  assign cap0_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq !=
	     WILL_FIRE_RL_cap0_doMessageAccept ;

  // register cap0_wsiS_reqFifo_levelsValid
  assign cap0_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_reset ;
  assign cap0_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_cap0_doMessageAccept ||
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_cap0_wsiS_reqFifo_reset ;

  // register cap0_wsiS_statusR
  assign cap0_wsiS_statusR$D_IN =
	     { cap0_wsiS_isReset_isInReset,
	       !cap0_wsiS_peerIsReady,
	       !cap0_wsiS_operateD,
	       cap0_wsiS_errorSticky,
	       cap0_wsiS_burstKind != 2'd0,
	       !cap0_wsiS_sThreadBusy_dw$whas ||
	       cap0_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       cap0_wsiS_trafficSticky } ;
  assign cap0_wsiS_statusR$EN = 1'd1 ;

  // register cap0_wsiS_tBusyCount
  assign cap0_wsiS_tBusyCount$D_IN = cap0_wsiS_tBusyCount + 32'd1 ;
  assign cap0_wsiS_tBusyCount$EN =
	     cap0_wsiS_operateD && cap0_wsiS_peerIsReady &&
	     (!cap0_wsiS_sThreadBusy_dw$whas ||
	      cap0_wsiS_sThreadBusy_dw$wget) ;

  // register cap0_wsiS_trafficSticky
  assign cap0_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign cap0_wsiS_trafficSticky$EN = WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ;

  // register cap0_wsiS_wordCount
  assign cap0_wsiS_wordCount$D_IN =
	     cap0_wsiS_wsiReq$wget[57] ? 12'd1 : cap0_wsiS_wordCount + 12'd1 ;
  assign cap0_wsiS_wordCount$EN = WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ;

  // register cap0_wtiS_isReset_isInReset
  assign cap0_wtiS_isReset_isInReset$D_IN = 1'd0 ;
  assign cap0_wtiS_isReset_isInReset$EN = cap0_wtiS_isReset_isInReset ;

  // register cap0_wtiS_nowReq
  assign cap0_wtiS_nowReq$D_IN = 67'd0 ;
  assign cap0_wtiS_nowReq$EN = 1'd1 ;

  // register cap0_wtiS_operateD
  assign cap0_wtiS_operateD$D_IN = 1'b1 ;
  assign cap0_wtiS_operateD$EN = 1'd1 ;

  // register pat0_bytesRemain
  assign pat0_bytesRemain$D_IN =
	     WILL_FIRE_RL_pat0_resp_meta ?
	       v__h26457 :
	       MUX_pat0_bytesRemain$write_1__VAL_2 ;
  assign pat0_bytesRemain$EN =
	     WILL_FIRE_RL_pat0_resp_meta ||
	     (pat0_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     pat0_bytesRemain != 32'd0 ;

  // register pat0_controlReg
  assign pat0_controlReg$D_IN =
	     MUX_pat0_controlReg$write_1__SEL_1 ?
	       pat0_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign pat0_controlReg$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_dataBram_serverAdapterA_cnt
  assign pat0_dataBram_serverAdapterA_cnt$D_IN =
	     pat0_dataBram_serverAdapterA_cnt_74_PLUS_IF_pa_ETC___d280 ;
  assign pat0_dataBram_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ||
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas ;

  // register pat0_dataBram_serverAdapterA_s1
  assign pat0_dataBram_serverAdapterA_s1$D_IN =
	     { WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register pat0_dataBram_serverAdapterB_cnt
  assign pat0_dataBram_serverAdapterB_cnt$D_IN =
	     pat0_dataBram_serverAdapterB_cnt_33_PLUS_IF_pa_ETC___d339 ;
  assign pat0_dataBram_serverAdapterB_cnt$EN =
	     pat0_dataBram_serverAdapterB_cnt_1$whas ||
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register pat0_dataBram_serverAdapterB_s1
  assign pat0_dataBram_serverAdapterB_s1$D_IN =
	     { pat0_dataBram_serverAdapterB_writeWithResp$whas &&
	       pat0_dataBram_serverAdapterB_s1_1$wget[1],
	       pat0_dataBram_serverAdapterB_s1_1$wget[0] } ;
  assign pat0_dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register pat0_dataCount
  always@(MUX_pat0_dataCount$write_1__SEL_1 or
	  pat0_wci_wslv_reqF$D_OUT or
	  WILL_FIRE_RL_pat0_doMessageEmit or
	  MUX_pat0_dataCount$write_1__VAL_2 or WILL_FIRE_RL_pat0_wci_ctrl_EiI)
  case (1'b1)
    MUX_pat0_dataCount$write_1__SEL_1:
	pat0_dataCount$D_IN = pat0_wci_wslv_reqF$D_OUT[31:0];
    WILL_FIRE_RL_pat0_doMessageEmit:
	pat0_dataCount$D_IN = MUX_pat0_dataCount$write_1__VAL_2;
    WILL_FIRE_RL_pat0_wci_ctrl_EiI: pat0_dataCount$D_IN = 32'd0;
    default: pat0_dataCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign pat0_dataCount$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0C ||
	     WILL_FIRE_RL_pat0_doMessageEmit ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_dataPtr
  assign pat0_dataPtr$D_IN =
	     (pat0_bytesRemain == 32'd4 && !pat0_controlReg[1]) ?
	       32'd0 :
	       pat0_dataPtr + 32'd1 ;
  assign pat0_dataPtr$EN =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;

  // register pat0_doZLM
  assign pat0_doZLM$D_IN = WILL_FIRE_RL_pat0_resp_meta && v__h26457 == 32'd0 ;
  assign pat0_doZLM$EN =
	     WILL_FIRE_RL_pat0_doMessageEmit && pat0_doZLM ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_isFirst
  assign pat0_isFirst$D_IN = 1'b0 ;
  assign pat0_isFirst$EN = 1'b0 ;

  // register pat0_mesgCount
  always@(MUX_pat0_mesgCount$write_1__SEL_1 or
	  pat0_wci_wslv_reqF$D_OUT or
	  MUX_pat0_mesgCount$write_1__SEL_2 or
	  MUX_pat0_mesgCount$write_1__VAL_2 or WILL_FIRE_RL_pat0_wci_ctrl_EiI)
  case (1'b1)
    MUX_pat0_mesgCount$write_1__SEL_1:
	pat0_mesgCount$D_IN = pat0_wci_wslv_reqF$D_OUT[31:0];
    MUX_pat0_mesgCount$write_1__SEL_2:
	pat0_mesgCount$D_IN = MUX_pat0_mesgCount$write_1__VAL_2;
    WILL_FIRE_RL_pat0_wci_ctrl_EiI: pat0_mesgCount$D_IN = 32'd0;
    default: pat0_mesgCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign pat0_mesgCount$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_mesgLengthSoFar
  assign pat0_mesgLengthSoFar$D_IN = 14'h0 ;
  assign pat0_mesgLengthSoFar$EN = 1'b0 ;

  // register pat0_mesgRemain
  assign pat0_mesgRemain$D_IN =
	     MUX_pat0_mesgRemain$write_1__SEL_1 ?
	       pat0_wci_wslv_reqF$D_OUT[31:0] :
	       MUX_pat0_mesgRemain$write_1__VAL_2 ;
  assign pat0_mesgRemain$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h10 ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_1_cnt
  assign pat0_metaBram_serverAdapterA_1_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_1_cnt_10_PLUS_IF__ETC___d516 ;
  assign pat0_metaBram_serverAdapterA_1_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_1_s1
  assign pat0_metaBram_serverAdapterA_1_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterA_2_cnt
  assign pat0_metaBram_serverAdapterA_2_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_2_cnt_28_PLUS_IF__ETC___d634 ;
  assign pat0_metaBram_serverAdapterA_2_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_2_s1
  assign pat0_metaBram_serverAdapterA_2_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterA_3_cnt
  assign pat0_metaBram_serverAdapterA_3_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_3_cnt_46_PLUS_IF__ETC___d752 ;
  assign pat0_metaBram_serverAdapterA_3_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_3_s1
  assign pat0_metaBram_serverAdapterA_3_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterA_cnt
  assign pat0_metaBram_serverAdapterA_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_cnt_92_PLUS_IF_pa_ETC___d398 ;
  assign pat0_metaBram_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_s1
  assign pat0_metaBram_serverAdapterA_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_1_cnt
  assign pat0_metaBram_serverAdapterB_1_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_1_cnt_69_PLUS_IF__ETC___d575 ;
  assign pat0_metaBram_serverAdapterB_1_cnt$EN =
	     pat0_metaBram_serverAdapterB_1_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_1_s1
  assign pat0_metaBram_serverAdapterB_1_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_1_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_1_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_1_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_2_cnt
  assign pat0_metaBram_serverAdapterB_2_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_2_cnt_87_PLUS_IF__ETC___d693 ;
  assign pat0_metaBram_serverAdapterB_2_cnt$EN =
	     pat0_metaBram_serverAdapterB_2_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_2_s1
  assign pat0_metaBram_serverAdapterB_2_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_2_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_2_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_2_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_3_cnt
  assign pat0_metaBram_serverAdapterB_3_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_3_cnt_05_PLUS_IF__ETC___d811 ;
  assign pat0_metaBram_serverAdapterB_3_cnt$EN =
	     pat0_metaBram_serverAdapterB_3_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_3_s1
  assign pat0_metaBram_serverAdapterB_3_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_3_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_3_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_3_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_cnt
  assign pat0_metaBram_serverAdapterB_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_cnt_51_PLUS_IF_pa_ETC___d457 ;
  assign pat0_metaBram_serverAdapterB_cnt$EN =
	     pat0_metaBram_serverAdapterB_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_s1
  assign pat0_metaBram_serverAdapterB_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register pat0_metaPtr_modulus
  assign pat0_metaPtr_modulus$D_IN =
	     MUX_pat0_metaPtr_value$write_1__SEL_1 ?
	       MUX_pat0_metaPtr_modulus$write_1__VAL_1 :
	       16'd0 ;
  assign pat0_metaPtr_modulus$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_metaPtr_value
  assign pat0_metaPtr_value$D_IN =
	     MUX_pat0_metaPtr_value$write_1__SEL_1 ?
	       16'd0 :
	       MUX_pat0_metaPtr_value$write_1__VAL_3 ;
  assign pat0_metaPtr_value$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;

  // register pat0_splitReadInFlight
  assign pat0_splitReadInFlight$D_IN =
	     MUX_pat0_splitReadInFlight$write_1__SEL_1 ;
  assign pat0_splitReadInFlight$EN =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ||
	     WILL_FIRE_RL_pat0_advance_split_response ;

  // register pat0_thisLength
  assign pat0_thisLength$D_IN = v__h26457 ;
  assign pat0_thisLength$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_thisOpcode
  assign pat0_thisOpcode$D_IN =
	     pat0_metaBram_serverAdapterA_1_outData_outData$wget ;
  assign pat0_thisOpcode$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_thisTLS
  assign pat0_thisTLS$D_IN =
	     pat0_metaBram_serverAdapterA_3_outData_outData$wget ;
  assign pat0_thisTLS$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_thisTMS
  assign pat0_thisTMS$D_IN =
	     pat0_metaBram_serverAdapterA_2_outData_outData$wget ;
  assign pat0_thisTMS$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_unrollCnt
  assign pat0_unrollCnt$D_IN =
	     WILL_FIRE_RL_pat0_resp_meta ?
	       MUX_pat0_unrollCnt$write_1__VAL_1 :
	       MUX_pat0_unrollCnt$write_1__VAL_2 ;
  assign pat0_unrollCnt$EN =
	     WILL_FIRE_RL_pat0_resp_meta || WILL_FIRE_RL_pat0_doMessageEmit ;

  // register pat0_wci_wslv_cEdge
  assign pat0_wci_wslv_cEdge$D_IN = pat0_wci_wslv_reqF$D_OUT[36:34] ;
  assign pat0_wci_wslv_cEdge$EN = WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;

  // register pat0_wci_wslv_cState
  assign pat0_wci_wslv_cState$D_IN = pat0_wci_wslv_nState ;
  assign pat0_wci_wslv_cState$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	     !pat0_wci_wslv_illegalEdge ;

  // register pat0_wci_wslv_ctlAckReg
  assign pat0_wci_wslv_ctlAckReg$D_IN = pat0_wci_wslv_ctlAckReg_1$whas ;
  assign pat0_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register pat0_wci_wslv_ctlOpActive
  assign pat0_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;
  assign pat0_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;

  // register pat0_wci_wslv_illegalEdge
  assign pat0_wci_wslv_illegalEdge$D_IN =
	     !MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_pat0_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign pat0_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	     pat0_wci_wslv_illegalEdge ||
	     MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register pat0_wci_wslv_isReset_isInReset
  assign pat0_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign pat0_wci_wslv_isReset_isInReset$EN =
	     pat0_wci_wslv_isReset_isInReset ;

  // register pat0_wci_wslv_nState
  always@(pat0_wci_wslv_reqF$D_OUT)
  begin
    case (pat0_wci_wslv_reqF$D_OUT[36:34])
      3'd0: pat0_wci_wslv_nState$D_IN = 3'd1;
      3'd1: pat0_wci_wslv_nState$D_IN = 3'd2;
      3'd2: pat0_wci_wslv_nState$D_IN = 3'd3;
      default: pat0_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign pat0_wci_wslv_nState$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     (pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      pat0_wci_wslv_cState == 3'd0 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (pat0_wci_wslv_cState == 3'd1 ||
	       pat0_wci_wslv_cState == 3'd3) ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      pat0_wci_wslv_cState == 3'd2 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (pat0_wci_wslv_cState == 3'd3 || pat0_wci_wslv_cState == 3'd2 ||
	       pat0_wci_wslv_cState == 3'd1)) ;

  // register pat0_wci_wslv_reqF_countReg
  assign pat0_wci_wslv_reqF_countReg$D_IN =
	     (pat0_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       pat0_wci_wslv_reqF_countReg + 2'd1 :
	       pat0_wci_wslv_reqF_countReg - 2'd1 ;
  assign pat0_wci_wslv_reqF_countReg$EN =
	     (pat0_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     pat0_wci_wslv_reqF_r_deq$whas ;

  // register pat0_wci_wslv_respF_c_r
  assign pat0_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr ?
	       MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign pat0_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr ;

  // register pat0_wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_pat0_wci_wslv_respF_both or
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr or pat0_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_pat0_wci_wslv_respF_both:
	  pat0_wci_wslv_respF_q_0$D_IN =
	      MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_2:
	  pat0_wci_wslv_respF_q_0$D_IN =
	      MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr:
	  pat0_wci_wslv_respF_q_0$D_IN = pat0_wci_wslv_respF_q_1;
      default: pat0_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr ;

  // register pat0_wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_pat0_wci_wslv_respF_both or
	  MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_pat0_wci_wslv_respF_both:
	  pat0_wci_wslv_respF_q_1$D_IN =
	      MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_2:
	  pat0_wci_wslv_respF_q_1$D_IN =
	      MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr:
	  pat0_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: pat0_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr ;

  // register pat0_wci_wslv_sFlagReg
  assign pat0_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign pat0_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register pat0_wci_wslv_sThreadBusy_d
  assign pat0_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign pat0_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register pat0_wsiM_burstKind
  assign pat0_wsiM_burstKind$D_IN =
	     (pat0_wsiM_burstKind == 2'd0) ?
	       (pat0_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign pat0_wsiM_burstKind$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (pat0_wsiM_burstKind == 2'd0 ||
	      (pat0_wsiM_burstKind == 2'd1 || pat0_wsiM_burstKind == 2'd2) &&
	      pat0_wsiM_reqFifo_q_0[57]) ;

  // register pat0_wsiM_errorSticky
  assign pat0_wsiM_errorSticky$D_IN = 1'b0 ;
  assign pat0_wsiM_errorSticky$EN = 1'b0 ;

  // register pat0_wsiM_iMesgCount
  assign pat0_wsiM_iMesgCount$D_IN = pat0_wsiM_iMesgCount + 32'd1 ;
  assign pat0_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     pat0_wsiM_burstKind == 2'd2 &&
	     pat0_wsiM_reqFifo_q_0[57] ;

  // register pat0_wsiM_isReset_isInReset
  assign pat0_wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign pat0_wsiM_isReset_isInReset$EN = pat0_wsiM_isReset_isInReset ;

  // register pat0_wsiM_operateD
  assign pat0_wsiM_operateD$D_IN = pat0_wci_wslv_cState == 3'd2 ;
  assign pat0_wsiM_operateD$EN = 1'd1 ;

  // register pat0_wsiM_pMesgCount
  assign pat0_wsiM_pMesgCount$D_IN = pat0_wsiM_pMesgCount + 32'd1 ;
  assign pat0_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     pat0_wsiM_burstKind == 2'd1 &&
	     pat0_wsiM_reqFifo_q_0[57] ;

  // register pat0_wsiM_peerIsReady
  assign pat0_wsiM_peerIsReady$D_IN = bias$wsiS0_SReset_n ;
  assign pat0_wsiM_peerIsReady$EN = 1'd1 ;

  // register pat0_wsiM_reqFifo_c_r
  assign pat0_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr ?
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign pat0_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr ;

  // register pat0_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_pat0_wsiM_reqFifo_both or
	  MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr or pat0_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_pat0_wsiM_reqFifo_both:
	  pat0_wsiM_reqFifo_q_0$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_2:
	  pat0_wsiM_reqFifo_q_0$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr:
	  pat0_wsiM_reqFifo_q_0$D_IN = pat0_wsiM_reqFifo_q_1;
      default: pat0_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr ;

  // register pat0_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_pat0_wsiM_reqFifo_both or
	  MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_pat0_wsiM_reqFifo_both:
	  pat0_wsiM_reqFifo_q_1$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_2:
	  pat0_wsiM_reqFifo_q_1$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr:
	  pat0_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: pat0_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr ;

  // register pat0_wsiM_sThreadBusy_d
  assign pat0_wsiM_sThreadBusy_d$D_IN = bias$wsiS0_SThreadBusy ;
  assign pat0_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register pat0_wsiM_statusR
  assign pat0_wsiM_statusR$D_IN =
	     { pat0_wsiM_isReset_isInReset,
	       !pat0_wsiM_peerIsReady,
	       !pat0_wsiM_operateD,
	       pat0_wsiM_errorSticky,
	       pat0_wsiM_burstKind != 2'd0,
	       pat0_wsiM_sThreadBusy_d,
	       1'd0,
	       pat0_wsiM_trafficSticky } ;
  assign pat0_wsiM_statusR$EN = 1'd1 ;

  // register pat0_wsiM_tBusyCount
  assign pat0_wsiM_tBusyCount$D_IN = pat0_wsiM_tBusyCount + 32'd1 ;
  assign pat0_wsiM_tBusyCount$EN =
	     pat0_wsiM_operateD && pat0_wsiM_peerIsReady &&
	     pat0_wsiM_sThreadBusy_d ;

  // register pat0_wsiM_trafficSticky
  assign pat0_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign pat0_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register simCycle
  assign simCycle$D_IN = simCycle + 16'd1 ;
  assign simCycle$EN = 1'd1 ;

  // submodule bias
  assign bias$wciS0_MAddr = cp$wci_Vm_3_MAddr ;
  assign bias$wciS0_MAddrSpace = cp$wci_Vm_3_MAddrSpace ;
  assign bias$wciS0_MByteEn = cp$wci_Vm_3_MByteEn ;
  assign bias$wciS0_MCmd = cp$wci_Vm_3_MCmd ;
  assign bias$wciS0_MData = cp$wci_Vm_3_MData ;
  assign bias$wciS0_MFlag = cp$wci_Vm_3_MFlag ;
  assign bias$wsiS0_MBurstLength =
	     pat0_wsiM_sThreadBusy_d ? 12'd0 : pat0_wsiM_reqFifo_q_0[55:44] ;
  assign bias$wsiS0_MByteEn = pat0_wsiM_reqFifo_q_0[11:8] ;
  assign bias$wsiS0_MCmd =
	     pat0_wsiM_sThreadBusy_d ? 3'd0 : pat0_wsiM_reqFifo_q_0[60:58] ;
  assign bias$wsiS0_MData = pat0_wsiM_reqFifo_q_0[43:12] ;
  assign bias$wsiS0_MReqInfo =
	     pat0_wsiM_sThreadBusy_d ? 8'd0 : pat0_wsiM_reqFifo_q_0[7:0] ;
  assign bias$wsiS0_MReqLast =
	     !pat0_wsiM_sThreadBusy_d && pat0_wsiM_reqFifo_q_0[57] ;
  assign bias$wsiS0_MBurstPrecise =
	     !pat0_wsiM_sThreadBusy_d && pat0_wsiM_reqFifo_q_0[56] ;
  assign bias$wsiS0_MReset_n =
	     !pat0_wsiM_isReset_isInReset && pat0_wsiM_operateD ;
  assign bias$wsiM0_SThreadBusy =
	     !cap0_wsiS_sThreadBusy_dw$whas || cap0_wsiS_sThreadBusy_dw$wget ;
  assign bias$wsiM0_SReset_n =
	     !cap0_wsiS_isReset_isInReset && cap0_wsiS_operateD ;

  // submodule cap0_dataBram_memory
  assign cap0_dataBram_memory$ADDRA = cap0_dataCount[9:0] ;
  assign cap0_dataBram_memory$ADDRB = cap0_wci_wslv_reqF$D_OUT[43:34] ;
  assign cap0_dataBram_memory$DIA = cap0_wsiS_reqFifo$D_OUT[43:12] ;
  assign cap0_dataBram_memory$DIB = 32'd0 ;
  assign cap0_dataBram_memory$WEA = 1'd1 ;
  assign cap0_dataBram_memory$WEB = 1'd0 ;
  assign cap0_dataBram_memory$ENA = MUX_cap0_dataCount$write_1__SEL_2 ;
  assign cap0_dataBram_memory$ENB =
	     WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways ;

  // submodule cap0_dataBram_serverAdapterA_outDataCore
  assign cap0_dataBram_serverAdapterA_outDataCore$D_IN =
	     cap0_dataBram_memory$DOA ;
  assign cap0_dataBram_serverAdapterA_outDataCore$ENQ =
	     cap0_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     cap0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign cap0_dataBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign cap0_dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule cap0_dataBram_serverAdapterB_outDataCore
  assign cap0_dataBram_serverAdapterB_outDataCore$D_IN =
	     cap0_dataBram_memory$DOB ;
  assign cap0_dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_cap0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     cap0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !cap0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     cap0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign cap0_dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_cap0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     cap0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !cap0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign cap0_dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_memory
  assign cap0_metaBram_memory$ADDRA = cap0_metaCount[9:0] ;
  assign cap0_metaBram_memory$ADDRB = cap0_wci_wslv_reqF$D_OUT[45:36] ;
  assign cap0_metaBram_memory$DIA = { 18'd0, mlB__h58072 } ;
  assign cap0_metaBram_memory$DIB = 32'd0 ;
  assign cap0_metaBram_memory$WEA = 1'd1 ;
  assign cap0_metaBram_memory$WEB = 1'd0 ;
  assign cap0_metaBram_memory$ENA = MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_memory$ENB =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways ;

  // submodule cap0_metaBram_memory_1
  assign cap0_metaBram_memory_1$ADDRA = cap0_metaCount[9:0] ;
  assign cap0_metaBram_memory_1$ADDRB = cap0_wci_wslv_reqF$D_OUT[45:36] ;
  assign cap0_metaBram_memory_1$DIA =
	     { 24'd0, cap0_wsiS_reqFifo$D_OUT[7:0] } ;
  assign cap0_metaBram_memory_1$DIB = 32'd0 ;
  assign cap0_metaBram_memory_1$WEA = 1'd1 ;
  assign cap0_metaBram_memory_1$WEB = 1'd0 ;
  assign cap0_metaBram_memory_1$ENA = MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_memory_1$ENB =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways ;

  // submodule cap0_metaBram_memory_2
  assign cap0_metaBram_memory_2$ADDRA = cap0_metaCount[9:0] ;
  assign cap0_metaBram_memory_2$ADDRB = cap0_wci_wslv_reqF$D_OUT[45:36] ;
  assign cap0_metaBram_memory_2$DIA = cap0_nowW$wget[63:32] ;
  assign cap0_metaBram_memory_2$DIB = 32'd0 ;
  assign cap0_metaBram_memory_2$WEA = 1'd1 ;
  assign cap0_metaBram_memory_2$WEB = 1'd0 ;
  assign cap0_metaBram_memory_2$ENA = MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_memory_2$ENB =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways ;

  // submodule cap0_metaBram_memory_3
  assign cap0_metaBram_memory_3$ADDRA = cap0_metaCount[9:0] ;
  assign cap0_metaBram_memory_3$ADDRB = cap0_wci_wslv_reqF$D_OUT[45:36] ;
  assign cap0_metaBram_memory_3$DIA = cap0_nowW$wget[31:0] ;
  assign cap0_metaBram_memory_3$DIB = 32'd0 ;
  assign cap0_metaBram_memory_3$WEA = 1'd1 ;
  assign cap0_metaBram_memory_3$WEB = 1'd0 ;
  assign cap0_metaBram_memory_3$ENA = MUX_cap0_metaCount$write_1__SEL_2 ;
  assign cap0_metaBram_memory_3$ENB =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways ;

  // submodule cap0_metaBram_serverAdapterA_1_outDataCore
  assign cap0_metaBram_serverAdapterA_1_outDataCore$D_IN =
	     cap0_metaBram_memory_1$DOA ;
  assign cap0_metaBram_serverAdapterA_1_outDataCore$ENQ =
	     cap0_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_1_outDataCore$DEQ = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_serverAdapterA_2_outDataCore
  assign cap0_metaBram_serverAdapterA_2_outDataCore$D_IN =
	     cap0_metaBram_memory_2$DOA ;
  assign cap0_metaBram_serverAdapterA_2_outDataCore$ENQ =
	     cap0_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_2_outDataCore$DEQ = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_serverAdapterA_3_outDataCore
  assign cap0_metaBram_serverAdapterA_3_outDataCore$D_IN =
	     cap0_metaBram_memory_3$DOA ;
  assign cap0_metaBram_serverAdapterA_3_outDataCore$ENQ =
	     cap0_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_3_outDataCore$DEQ = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_serverAdapterA_outDataCore
  assign cap0_metaBram_serverAdapterA_outDataCore$D_IN =
	     cap0_metaBram_memory$DOA ;
  assign cap0_metaBram_serverAdapterA_outDataCore$ENQ =
	     cap0_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     cap0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign cap0_metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_serverAdapterB_1_outDataCore
  assign cap0_metaBram_serverAdapterB_1_outDataCore$D_IN =
	     cap0_metaBram_memory_1$DOB ;
  assign cap0_metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     !cap0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_serverAdapterB_2_outDataCore
  assign cap0_metaBram_serverAdapterB_2_outDataCore$D_IN =
	     cap0_metaBram_memory_2$DOB ;
  assign cap0_metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     !cap0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_serverAdapterB_3_outDataCore
  assign cap0_metaBram_serverAdapterB_3_outDataCore$D_IN =
	     cap0_metaBram_memory_3$DOB ;
  assign cap0_metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !cap0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule cap0_metaBram_serverAdapterB_outDataCore
  assign cap0_metaBram_serverAdapterB_outDataCore$D_IN =
	     cap0_metaBram_memory$DOB ;
  assign cap0_metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !cap0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     cap0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_cap0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     cap0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !cap0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign cap0_metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule cap0_splaF
  assign cap0_splaF$D_IN =
	     (cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
	       3'd4 :
	       { 1'd0, cap0_wci_wslv_reqF$D_OUT[35:34] } ;
  assign cap0_splaF$ENQ = MUX_cap0_splitReadInFlight$write_1__SEL_1 ;
  assign cap0_splaF$DEQ = WILL_FIRE_RL_cap0_advance_split_response ;
  assign cap0_splaF$CLR = 1'b0 ;

  // submodule cap0_wci_wslv_reqF
  assign cap0_wci_wslv_reqF$D_IN = cap0_wci_wslv_wciReq$wget ;
  assign cap0_wci_wslv_reqF$ENQ = cap0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign cap0_wci_wslv_reqF$DEQ = cap0_wci_wslv_reqF_r_deq$whas ;
  assign cap0_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule cap0_wsiS_reqFifo
  assign cap0_wsiS_reqFifo$D_IN = cap0_wsiS_wsiReq$wget ;
  assign cap0_wsiS_reqFifo$ENQ = WILL_FIRE_RL_cap0_wsiS_reqFifo_enq ;
  assign cap0_wsiS_reqFifo$DEQ = WILL_FIRE_RL_cap0_doMessageAccept ;
  assign cap0_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule cp
  assign cp$gps_ppsSyncIn_x = 1'b0 ;
  assign cp$server_request_put = simDCP$client_request_get ;
  assign cp$switch_x = 3'h0 ;
  assign cp$uuid_arg = 512'h0 ;
  assign cp$wci_Vm_0_SData = 32'h0 ;
  assign cp$wci_Vm_0_SFlag = 2'h0 ;
  assign cp$wci_Vm_0_SResp = 2'h0 ;
  assign cp$wci_Vm_10_SData = 32'h0 ;
  assign cp$wci_Vm_10_SFlag = 2'h0 ;
  assign cp$wci_Vm_10_SResp = 2'h0 ;
  assign cp$wci_Vm_11_SData = 32'h0 ;
  assign cp$wci_Vm_11_SFlag = 2'h0 ;
  assign cp$wci_Vm_11_SResp = 2'h0 ;
  assign cp$wci_Vm_12_SData = 32'h0 ;
  assign cp$wci_Vm_12_SFlag = 2'h0 ;
  assign cp$wci_Vm_12_SResp = 2'h0 ;
  assign cp$wci_Vm_13_SData = 32'h0 ;
  assign cp$wci_Vm_13_SFlag = 2'h0 ;
  assign cp$wci_Vm_13_SResp = 2'h0 ;
  assign cp$wci_Vm_14_SData = 32'h0 ;
  assign cp$wci_Vm_14_SFlag = 2'h0 ;
  assign cp$wci_Vm_14_SResp = 2'h0 ;
  assign cp$wci_Vm_1_SData = 32'h0 ;
  assign cp$wci_Vm_1_SFlag = 2'h0 ;
  assign cp$wci_Vm_1_SResp = 2'h0 ;
  assign cp$wci_Vm_2_SData = pat0_wci_wslv_respF_q_0[31:0] ;
  assign cp$wci_Vm_2_SFlag = { 1'd1, pat0_wci_wslv_sFlagReg } ;
  assign cp$wci_Vm_2_SResp = pat0_wci_wslv_respF_q_0[33:32] ;
  assign cp$wci_Vm_3_SData = bias$wciS0_SData ;
  assign cp$wci_Vm_3_SFlag = bias$wciS0_SFlag ;
  assign cp$wci_Vm_3_SResp = bias$wciS0_SResp ;
  assign cp$wci_Vm_4_SData = cap0_wci_wslv_respF_q_0[31:0] ;
  assign cp$wci_Vm_4_SFlag = { 1'd1, cap0_wci_wslv_sFlagReg } ;
  assign cp$wci_Vm_4_SResp = cap0_wci_wslv_respF_q_0[33:32] ;
  assign cp$wci_Vm_5_SData = 32'h0 ;
  assign cp$wci_Vm_5_SFlag = 2'h0 ;
  assign cp$wci_Vm_5_SResp = 2'h0 ;
  assign cp$wci_Vm_6_SData = 32'h0 ;
  assign cp$wci_Vm_6_SFlag = 2'h0 ;
  assign cp$wci_Vm_6_SResp = 2'h0 ;
  assign cp$wci_Vm_7_SData = 32'h0 ;
  assign cp$wci_Vm_7_SFlag = 2'h0 ;
  assign cp$wci_Vm_7_SResp = 2'h0 ;
  assign cp$wci_Vm_8_SData = 32'h0 ;
  assign cp$wci_Vm_8_SFlag = 2'h0 ;
  assign cp$wci_Vm_8_SResp = 2'h0 ;
  assign cp$wci_Vm_9_SData = 32'h0 ;
  assign cp$wci_Vm_9_SFlag = 2'h0 ;
  assign cp$wci_Vm_9_SResp = 2'h0 ;
  assign cp$EN_server_request_put =
	     simDCP$RDY_client_request_get && cp$RDY_server_request_put ;
  assign cp$EN_server_response_get =
	     simDCP$RDY_client_response_put && cp$RDY_server_response_get ;
  assign cp$wci_Vm_0_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_1_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_2_SThreadBusy =
	     pat0_wci_wslv_reqF_countReg > 2'd1 ||
	     pat0_wci_wslv_isReset_isInReset ;
  assign cp$wci_Vm_3_SThreadBusy = bias$wciS0_SThreadBusy ;
  assign cp$wci_Vm_4_SThreadBusy =
	     cap0_wci_wslv_reqF_countReg > 2'd1 ||
	     cap0_wci_wslv_isReset_isInReset ;
  assign cp$wci_Vm_5_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_6_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_7_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_8_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_9_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_10_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_11_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_12_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_13_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_14_SThreadBusy = 1'b0 ;

  // submodule pat0_dataBram_memory
  assign pat0_dataBram_memory$ADDRA = pat0_dataPtr[9:0] ;
  assign pat0_dataBram_memory$ADDRB = pat0_wci_wslv_reqF$D_OUT[43:34] ;
  assign pat0_dataBram_memory$DIA = 32'd0 ;
  assign pat0_dataBram_memory$DIB =
	     MUX_pat0_dataBram_memory$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_dataBram_memory$WEA = 1'd0 ;
  assign pat0_dataBram_memory$WEB = !MUX_pat0_dataBram_memory$b_put_1__SEL_1 ;
  assign pat0_dataBram_memory$ENA =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_memory$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;

  // submodule pat0_dataBram_serverAdapterA_outDataCore
  assign pat0_dataBram_serverAdapterA_outDataCore$D_IN =
	     pat0_dataBram_memory$DOA ;
  assign pat0_dataBram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     !pat0_dataBram_serverAdapterA_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas &&
	     !pat0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule pat0_dataBram_serverAdapterB_outDataCore
  assign pat0_dataBram_serverAdapterB_outDataCore$D_IN =
	     pat0_dataBram_memory$DOB ;
  assign pat0_dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !pat0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !pat0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule pat0_loopReqInFlightF
  assign pat0_loopReqInFlightF$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_loopReqInFlightF$DEQ =
	     WILL_FIRE_RL_pat0_doMessageEmit &&
	     (pat0_thisLength == 32'd0 || pat0_unrollCnt == 16'd1) ;
  assign pat0_loopReqInFlightF$CLR = 1'b0 ;

  // submodule pat0_metaBram_memory
  assign pat0_metaBram_memory$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory$DIA = 32'd0 ;
  assign pat0_metaBram_memory$DIB =
	     MUX_pat0_metaBram_memory$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory$WEA = 1'd0 ;
  assign pat0_metaBram_memory$WEB = !MUX_pat0_metaBram_memory$b_put_1__SEL_1 ;
  assign pat0_metaBram_memory$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_memory$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // submodule pat0_metaBram_memory_1
  assign pat0_metaBram_memory_1$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory_1$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory_1$DIA = 32'd0 ;
  assign pat0_metaBram_memory_1$DIB =
	     MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory_1$WEA = 1'd0 ;
  assign pat0_metaBram_memory_1$WEB =
	     !MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ;
  assign pat0_metaBram_memory_1$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_memory_1$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // submodule pat0_metaBram_memory_2
  assign pat0_metaBram_memory_2$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory_2$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory_2$DIA = 32'd0 ;
  assign pat0_metaBram_memory_2$DIB =
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory_2$WEA = 1'd0 ;
  assign pat0_metaBram_memory_2$WEB =
	     !MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ;
  assign pat0_metaBram_memory_2$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_memory_2$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // submodule pat0_metaBram_memory_3
  assign pat0_metaBram_memory_3$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory_3$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory_3$DIA = 32'd0 ;
  assign pat0_metaBram_memory_3$DIB =
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory_3$WEA = 1'd0 ;
  assign pat0_metaBram_memory_3$WEB =
	     !MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ;
  assign pat0_metaBram_memory_3$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaBram_memory_3$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // submodule pat0_metaBram_serverAdapterA_1_outDataCore
  assign pat0_metaBram_serverAdapterA_1_outDataCore$D_IN =
	     pat0_metaBram_memory_1$DOA ;
  assign pat0_metaBram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterA_2_outDataCore
  assign pat0_metaBram_serverAdapterA_2_outDataCore$D_IN =
	     pat0_metaBram_memory_2$DOA ;
  assign pat0_metaBram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterA_3_outDataCore
  assign pat0_metaBram_serverAdapterA_3_outDataCore$D_IN =
	     pat0_metaBram_memory_3$DOA ;
  assign pat0_metaBram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterA_outDataCore
  assign pat0_metaBram_serverAdapterA_outDataCore$D_IN =
	     pat0_metaBram_memory$DOA ;
  assign pat0_metaBram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_1_outDataCore
  assign pat0_metaBram_serverAdapterB_1_outDataCore$D_IN =
	     pat0_metaBram_memory_1$DOB ;
  assign pat0_metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_2_outDataCore
  assign pat0_metaBram_serverAdapterB_2_outDataCore$D_IN =
	     pat0_metaBram_memory_2$DOB ;
  assign pat0_metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_3_outDataCore
  assign pat0_metaBram_serverAdapterB_3_outDataCore$D_IN =
	     pat0_metaBram_memory_3$DOB ;
  assign pat0_metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_outDataCore
  assign pat0_metaBram_serverAdapterB_outDataCore$D_IN =
	     pat0_metaBram_memory$DOB ;
  assign pat0_metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaReqInFlightF
  assign pat0_metaReqInFlightF$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_metaReqInFlightF$DEQ = WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaReqInFlightF$CLR = 1'b0 ;

  // submodule pat0_splaF
  assign pat0_splaF$D_IN =
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
	       3'd4 :
	       { 1'd0, pat0_wci_wslv_reqF$D_OUT[35:34] } ;
  assign pat0_splaF$ENQ = MUX_pat0_splitReadInFlight$write_1__SEL_1 ;
  assign pat0_splaF$DEQ = WILL_FIRE_RL_pat0_advance_split_response ;
  assign pat0_splaF$CLR = 1'b0 ;

  // submodule pat0_wci_wslv_reqF
  assign pat0_wci_wslv_reqF$D_IN = pat0_wci_wslv_wciReq$wget ;
  assign pat0_wci_wslv_reqF$ENQ = pat0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign pat0_wci_wslv_reqF$DEQ = pat0_wci_wslv_reqF_r_deq$whas ;
  assign pat0_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule simDCP
  assign simDCP$client_response_put = cp$server_response_get ;
  assign simDCP$host_request_put = simIO$host_request_get ;
  assign simDCP$EN_host_request_put =
	     simIO$RDY_host_request_get && simDCP$RDY_host_request_put ;
  assign simDCP$EN_host_response_get =
	     simIO$RDY_host_response_put && simDCP$RDY_host_response_get ;
  assign simDCP$EN_client_request_get =
	     simDCP$RDY_client_request_get && cp$RDY_server_request_put ;
  assign simDCP$EN_client_response_put =
	     simDCP$RDY_client_response_put && cp$RDY_server_response_get ;

  // submodule simIO
  assign simIO$host_response_put = simDCP$host_response_get ;
  assign simIO$EN_host_request_get =
	     simIO$RDY_host_request_get && simDCP$RDY_host_request_put ;
  assign simIO$EN_host_response_put =
	     simIO$RDY_host_response_put && simDCP$RDY_host_response_get ;

  // remaining internal signals
  assign IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2115 =
	     IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2106 &&
	     CASE_cap0_splaFD_OUT_BITS_1_TO_0_NOT_cap0_spl_ETC__q2 ;
  assign IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1042 =
	     IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1033 &&
	     CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 ;
  assign IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d1092 =
	     (pat0_wci_wslv_reqF$EMPTY_N &&
	      pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2) ?
	       (pat0_metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 :
	       !pat0_wci_wslv_reqF$EMPTY_N ||
	       pat0_wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	       (pat0_metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d1093 =
	     (pat0_wci_wslv_reqF$EMPTY_N &&
	      pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1) ?
	       (pat0_metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 :
	       IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d1092 ;
  assign IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d2770 =
	     (pat0_wci_wslv_reqF$EMPTY_N &&
	      pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0) ?
	       (pat0_metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 :
	       IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d1093 ;
  assign NOT_cap0_controlReg_018_BIT_0_019_020_OR_cap0__ETC___d2044 =
	     !cap0_controlReg[0] ||
	     cap0_controlReg[1] &&
	     (!cap0_metaCount_022_ULT_1024___d2556 ||
	      !cap0_dataCount_025_ULT_1024___d2557) ||
	     (cap0_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (!cap0_wsiS_reqFifo$D_OUT[57] ||
	      (cap0_metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	      (cap0_metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	      (cap0_metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	      (cap0_metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7) ;
  assign ab__h13384 = MUX_pat0_dataBram_memory$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h16502 = MUX_pat0_metaBram_memory$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h19448 =
	     MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h22394 =
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h25340 =
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign b__h27074 = x__h27090 + residue__h27063 ;
  assign cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066 =
	     cap0_controlReg[0] &&
	     (!cap0_controlReg[1] ||
	      cap0_metaCount_022_ULT_1024___d2556 &&
	      cap0_dataCount_025_ULT_1024___d2557) ;
  assign cap0_dataBram_serverAdapterB_cnt_509_PLUS_IF_c_ETC___d1515 =
	     cap0_dataBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_cap0_dataBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (cap0_dataBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign cap0_dataCount_025_ULT_1024___d2557 = cap0_dataCount < 32'd1024 ;
  assign cap0_metaBram_serverAdapterB_1_cnt_745_PLUS_IF_ETC___d1751 =
	     cap0_metaBram_serverAdapterB_1_cnt +
	     (WILL_FIRE_RL_cap0_metaBram_serverAdapterB_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (cap0_metaBram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign cap0_metaBram_serverAdapterB_2_cnt_863_PLUS_IF_ETC___d1869 =
	     cap0_metaBram_serverAdapterB_2_cnt +
	     (WILL_FIRE_RL_cap0_metaBram_serverAdapterB_2_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (cap0_metaBram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign cap0_metaBram_serverAdapterB_3_cnt_981_PLUS_IF_ETC___d1987 =
	     cap0_metaBram_serverAdapterB_3_cnt +
	     (WILL_FIRE_RL_cap0_metaBram_serverAdapterB_3_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (cap0_metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign cap0_metaBram_serverAdapterB_cnt_627_PLUS_IF_c_ETC___d1633 =
	     cap0_metaBram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_cap0_metaBram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (cap0_metaBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign cap0_metaCount_022_ULT_1024___d2556 = cap0_metaCount < 32'd1024 ;
  assign cap0_splaF_i_notEmpty__084_AND_IF_cap0_splaF_f_ETC___d2117 =
	     cap0_splaF$EMPTY_N &&
	     (cap0_splaF$D_OUT[2] ?
		(cap0_splaF$D_OUT[1:0] != 2'd0 ||
		 cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 cap0_dataBram_serverAdapterB_outData_enqData$whas) &&
		(cap0_splaF$D_OUT[1:0] != 2'd0 ||
		 cap0_dataBram_serverAdapterB_outData_outData$whas) :
		IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2115) ;
  assign g_data__h34265 =
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0) ? v__h33254 : 32'd0 ;
  assign g_data__h62777 =
	     (cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h0) ? v__h61702 : 32'd0 ;
  assign mlB__h58072 = cap0_mesgLengthSoFar + mlInc__h58071 ;
  assign mlInc__h58071 =
	     cap0_wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h58120 + y__h58121 } :
	       14'd4 ;
  assign pat0_dataBram_serverAdapterA_cnt_74_PLUS_IF_pa_ETC___d280 =
	     pat0_dataBram_serverAdapterA_cnt +
	     (WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (pat0_dataBram_serverAdapterA_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_dataBram_serverAdapterB_cnt_33_PLUS_IF_pa_ETC___d339 =
	     pat0_dataBram_serverAdapterB_cnt +
	     (pat0_dataBram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_dataBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_dataBram_serverAdapterB_cnt_33_SLT_3___d2558 =
	     (pat0_dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pat0_doZLM_09_OR_pat0_dataBram_serverAdapterA__ETC___d913 =
	     pat0_doZLM ||
	     (pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	      pat0_dataBram_serverAdapterA_outData_enqData$whas) &&
	     pat0_dataBram_serverAdapterA_outData_outData$whas ;
  assign pat0_doZLM_09_OR_pat0_dataBram_serverAdapterA__ETC___d923 =
	     pat0_doZLM_09_OR_pat0_dataBram_serverAdapterA__ETC___d913 &&
	     (pat0_thisLength != 32'd0 && pat0_unrollCnt != 16'd1 ||
	      pat0_loopReqInFlightF$EMPTY_N) ;
  assign pat0_metaBram_serverAdapterA_1_cnt_10_PLUS_IF__ETC___d516 =
	     pat0_metaBram_serverAdapterA_1_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterA_1_outData_outData_ETC___d871 =
	     pat0_metaBram_serverAdapterA_1_outData_outData$whas &&
	     (pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_2_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_2_outData_outData$whas &&
	     (pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_3_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_3_outData_outData$whas ;
  assign pat0_metaBram_serverAdapterA_2_cnt_28_PLUS_IF__ETC___d634 =
	     pat0_metaBram_serverAdapterA_2_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterA_3_cnt_46_PLUS_IF__ETC___d752 =
	     pat0_metaBram_serverAdapterA_3_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterA_cnt_92_PLUS_IF_pa_ETC___d398 =
	     pat0_metaBram_serverAdapterA_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterB_1_cnt_69_PLUS_IF__ETC___d575 =
	     pat0_metaBram_serverAdapterB_1_cnt +
	     (pat0_metaBram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaBram_serverAdapterB_2_cnt_87_PLUS_IF__ETC___d693 =
	     pat0_metaBram_serverAdapterB_2_cnt +
	     (pat0_metaBram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaBram_serverAdapterB_3_cnt_05_PLUS_IF__ETC___d811 =
	     pat0_metaBram_serverAdapterB_3_cnt +
	     (pat0_metaBram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaBram_serverAdapterB_cnt_51_PLUS_IF_pa_ETC___d457 =
	     pat0_metaBram_serverAdapterB_cnt +
	     (pat0_metaBram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaReqInFlightF_i_notEmpty__59_AND_pat0__ETC___d875 =
	     pat0_metaReqInFlightF$EMPTY_N &&
	     (pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_outData_outData$whas &&
	     (pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_1_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_1_outData_outData_ETC___d871 ;
  assign pat0_splaF_i_notEmpty__011_AND_IF_pat0_splaF_f_ETC___d1044 =
	     pat0_splaF$EMPTY_N &&
	     (pat0_splaF$D_OUT[2] ?
		(pat0_splaF$D_OUT[1:0] != 2'd0 ||
		 pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 pat0_dataBram_serverAdapterB_outData_enqData$whas) &&
		(pat0_splaF$D_OUT[1:0] != 2'd0 ||
		 pat0_dataBram_serverAdapterB_outData_outData$whas) :
		IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1042) ;
  assign rdat___1__h33430 = { 24'd0, pat0_wsiM_statusR } ;
  assign rdat___1__h61799 =
	     { 6'd40,
	       !cap0_metaCount_022_ULT_1024___d2556,
	       !cap0_dataCount_025_ULT_1024___d2557,
	       24'd2361866 } ;
  assign rdat___1__h61873 = { 24'd0, cap0_wsiS_statusR } ;
  assign residue__h27063 =
	     ({ 4'd0, v__h26457[1:0] } == 6'd0) ? 32'd0 : 32'd1 ;
  assign v__h26457 =
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_outDataCore$D_OUT :
	       pat0_metaBram_memory$DOA ;
  assign v__h30857 =
	     pat0_splaF$D_OUT[2] ?
	       y_avValue__h31483 :
	       IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1066 ;
  assign v__h60302 =
	     cap0_splaF$D_OUT[2] ?
	       y_avValue__h60929 :
	       IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2139 ;
  assign x__h27090 = { 2'd0, v__h26457[31:2] } ;
  assign x__h28048 =
	     ({ 4'd0, pat0_thisLength[1:0] } == 6'd0) ?
	       32'hFFFFFFFF :
	       (({ 4'd0, pat0_thisLength[1:0] } <= 6'd1) ?
		  32'd1 :
		  (({ 4'd0, pat0_thisLength[1:0] } <= 6'd2) ?
		     32'd3 :
		     (({ 4'd0, pat0_thisLength[1:0] } <= 6'd3) ?
			32'd7 :
			(({ 4'd0, pat0_thisLength[1:0] } <= 6'd4) ?
			   32'd15 :
			   (({ 4'd0, pat0_thisLength[1:0] } <= 6'd5) ?
			      32'd31 :
			      (({ 4'd0, pat0_thisLength[1:0] } <= 6'd6) ?
				 32'd63 :
				 (({ 4'd0, pat0_thisLength[1:0] } <= 6'd7) ?
				    32'd127 :
				    (({ 4'd0, pat0_thisLength[1:0] } <=
				      6'd8) ?
				       32'd255 :
				       (({ 4'd0, pat0_thisLength[1:0] } <=
					 6'd9) ?
					  32'd511 :
					  (({ 4'd0, pat0_thisLength[1:0] } <=
					    6'd10) ?
					     32'd1023 :
					     (({ 4'd0,
						 pat0_thisLength[1:0] } <=
					       6'd11) ?
						32'd2047 :
						(({ 4'd0,
						    pat0_thisLength[1:0] } <=
						  6'd12) ?
						   32'd4095 :
						   (({ 4'd0,
						       pat0_thisLength[1:0] } <=
						     6'd13) ?
						      32'd8191 :
						      (({ 4'd0,
							  pat0_thisLength[1:0] } <=
							6'd14) ?
							 32'd16383 :
							 (({ 4'd0,
							     pat0_thisLength[1:0] } <=
							   6'd15) ?
							    32'd32767 :
							    (({ 4'd0,
								pat0_thisLength[1:0] } <=
							      6'd16) ?
							       32'd65535 :
							       (({ 4'd0,
								   pat0_thisLength[1:0] } <=
								 6'd17) ?
								  32'd131071 :
								  (({ 4'd0,
								      pat0_thisLength[1:0] } <=
								    6'd18) ?
								     32'd262143 :
								     (({ 4'd0,
									 pat0_thisLength[1:0] } <=
								       6'd19) ?
									32'd524287 :
									(({ 4'd0,
									    pat0_thisLength[1:0] } <=
									  6'd20) ?
									   32'd1048575 :
									   (({ 4'd0,
									       pat0_thisLength[1:0] } <=
									     6'd21) ?
									      32'd2097151 :
									      (({ 4'd0,
										  pat0_thisLength[1:0] } <=
										6'd22) ?
										 32'd4194303 :
										 (({ 4'd0,
										     pat0_thisLength[1:0] } <=
										   6'd23) ?
										    32'd8388607 :
										    (({ 4'd0,
											pat0_thisLength[1:0] } <=
										      6'd24) ?
										       32'd16777215 :
										       (({ 4'd0,
											   pat0_thisLength[1:0] } <=
											 6'd25) ?
											  32'd33554431 :
											  (({ 4'd0,
											      pat0_thisLength[1:0] } <=
											    6'd26) ?
											     32'd67108863 :
											     (({ 4'd0,
												 pat0_thisLength[1:0] } <=
											       6'd27) ?
												32'd134217727 :
												(({ 4'd0,
												    pat0_thisLength[1:0] } <=
												  6'd28) ?
												   32'd268435455 :
												   (({ 4'd0,
												       pat0_thisLength[1:0] } <=
												     6'd29) ?
												      32'd536870911 :
												      (({ 4'd0,
													  pat0_thisLength[1:0] } <=
													6'd30) ?
													 32'd1073741823 :
													 (({ 4'd0,
													     pat0_thisLength[1:0] } <=
													   6'd31) ?
													    32'h7FFFFFFF :
													    32'hFFFFFFFF))))))))))))))))))))))))))))))) ;
  assign x__h58120 = x__h58132 + y__h58133 ;
  assign x__h58132 = x__h58144 + y__h58145 ;
  assign x__h58144 = { 2'd0, cap0_wsiS_reqFifo$D_OUT[11] } ;
  assign x_burstLength__h27882 =
	     (pat0_thisLength == 32'd0 || pat0_unrollCnt == 16'd1) ?
	       12'd1 :
	       12'd4095 ;
  assign x_byteEn__h27884 =
	     (pat0_thisLength == 32'd0) ?
	       4'd0 :
	       ((pat0_unrollCnt == 16'd1) ? x__h28048[3:0] : 4'd15) ;
  assign y__h58121 = { 2'd0, cap0_wsiS_reqFifo$D_OUT[8] } ;
  assign y__h58133 = { 2'd0, cap0_wsiS_reqFifo$D_OUT[9] } ;
  assign y__h58145 = { 2'd0, cap0_wsiS_reqFifo$D_OUT[10] } ;
  assign y_avValue__h31483 =
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       pat0_dataBram_serverAdapterB_outDataCore$D_OUT :
	       pat0_dataBram_memory$DOB ;
  assign y_avValue__h31527 =
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_outDataCore$D_OUT :
	       pat0_metaBram_memory$DOB ;
  assign y_avValue__h31567 =
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       pat0_metaBram_memory_1$DOB ;
  assign y_avValue__h31607 =
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       pat0_metaBram_memory_2$DOB ;
  assign y_avValue__h31647 =
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       pat0_metaBram_memory_3$DOB ;
  assign y_avValue__h60929 =
	     cap0_dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       cap0_dataBram_serverAdapterB_outDataCore$D_OUT :
	       cap0_dataBram_memory$DOB ;
  assign y_avValue__h60973 =
	     cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterB_outDataCore$D_OUT :
	       cap0_metaBram_memory$DOB ;
  assign y_avValue__h61013 =
	     cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       cap0_metaBram_memory_1$DOB ;
  assign y_avValue__h61053 =
	     cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       cap0_metaBram_memory_2$DOB ;
  assign y_avValue__h61093 =
	     cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       cap0_metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       cap0_metaBram_memory_3$DOB ;
  always@(pat0_splaF$D_OUT or
	  y_avValue__h31647 or
	  y_avValue__h31527 or y_avValue__h31567 or y_avValue__h31607)
  begin
    case (pat0_splaF$D_OUT[1:0])
      2'd0:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1066 =
	      y_avValue__h31527;
      2'd1:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1066 =
	      y_avValue__h31567;
      2'd2:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1066 =
	      y_avValue__h31607;
      2'd3:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1066 =
	      y_avValue__h31647;
    endcase
  end
  always@(cap0_splaF$D_OUT or
	  y_avValue__h61093 or
	  y_avValue__h60973 or y_avValue__h61013 or y_avValue__h61053)
  begin
    case (cap0_splaF$D_OUT[1:0])
      2'd0:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2139 =
	      y_avValue__h60973;
      2'd1:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2139 =
	      y_avValue__h61013;
      2'd2:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2139 =
	      y_avValue__h61053;
      2'd3:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2139 =
	      y_avValue__h61093;
    endcase
  end
  always@(cap0_wci_wslv_reqF$D_OUT or
	  cap0_metaBram_serverAdapterB_3_cnt or
	  cap0_metaBram_serverAdapterB_cnt or
	  cap0_metaBram_serverAdapterB_1_cnt or
	  cap0_metaBram_serverAdapterB_2_cnt)
  begin
    case (cap0_wci_wslv_reqF$D_OUT[35:34])
      2'd0:
	  IF_cap0_wci_wslv_reqF_first__233_BITS_35_TO_34_ETC___d2182 =
	      (cap0_metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7;
      2'd1:
	  IF_cap0_wci_wslv_reqF_first__233_BITS_35_TO_34_ETC___d2182 =
	      (cap0_metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7;
      2'd2:
	  IF_cap0_wci_wslv_reqF_first__233_BITS_35_TO_34_ETC___d2182 =
	      (cap0_metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7;
      2'd3:
	  IF_cap0_wci_wslv_reqF_first__233_BITS_35_TO_34_ETC___d2182 =
	      cap0_wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	      (cap0_metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7;
    endcase
  end
  always@(cap0_wci_wslv_reqF$D_OUT or
	  cap0_splaF$FULL_N or
	  IF_cap0_wci_wslv_reqF_first__233_BITS_35_TO_34_ETC___d2182 or
	  cap0_dataBram_serverAdapterB_cnt)
  begin
    case (cap0_wci_wslv_reqF$D_OUT[63:52])
      12'h0:
	  IF_cap0_wci_wslv_reqF_first__233_BITS_63_TO_52_ETC___d2186 = 1'b1;
      12'h800:
	  IF_cap0_wci_wslv_reqF_first__233_BITS_63_TO_52_ETC___d2186 =
	      (cap0_dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	      cap0_splaF$FULL_N;
      default: IF_cap0_wci_wslv_reqF_first__233_BITS_63_TO_52_ETC___d2186 =
		   cap0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		   cap0_splaF$FULL_N &&
		   IF_cap0_wci_wslv_reqF_first__233_BITS_35_TO_34_ETC___d2182;
    endcase
  end
  always@(pat0_wci_wslv_reqF$D_OUT or
	  pat0_splaF$FULL_N or
	  IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d2770 or
	  pat0_dataBram_serverAdapterB_cnt_33_SLT_3___d2558)
  begin
    case (pat0_wci_wslv_reqF$D_OUT[63:52])
      12'h0:
	  IF_pat0_wci_wslv_reqF_first__5_BITS_63_TO_52_0_ETC___d1138 = 1'b1;
      12'h800:
	  IF_pat0_wci_wslv_reqF_first__5_BITS_63_TO_52_0_ETC___d1138 =
	      pat0_dataBram_serverAdapterB_cnt_33_SLT_3___d2558 &&
	      pat0_splaF$FULL_N;
      default: IF_pat0_wci_wslv_reqF_first__5_BITS_63_TO_52_0_ETC___d1138 =
		   pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		   pat0_splaF$FULL_N &&
		   IF_pat0_wci_wslv_reqF_i_notEmpty__4_AND_pat0_w_ETC___d2770;
    endcase
  end
  always@(pat0_wci_wslv_reqF$D_OUT or
	  pat0_controlReg or
	  pat0_mesgCount or
	  pat0_dataCount or
	  pat0_mesgRemain or rdat___1__h33430 or pat0_wsiM_extStatusW$wget)
  begin
    case (pat0_wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h33254 = pat0_controlReg;
      8'h08: v__h33254 = pat0_mesgCount;
      8'h0C: v__h33254 = pat0_dataCount;
      8'h10: v__h33254 = pat0_mesgRemain;
      8'h1C: v__h33254 = 32'hA0240A0A;
      8'h20: v__h33254 = rdat___1__h33430;
      8'h24: v__h33254 = pat0_wsiM_extStatusW$wget[95:64];
      8'h28: v__h33254 = pat0_wsiM_extStatusW$wget[63:32];
      8'h2C: v__h33254 = pat0_wsiM_extStatusW$wget[31:0];
      default: v__h33254 = 32'd0;
    endcase
  end
  always@(pat0_splaF$D_OUT or
	  pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_3_outData_enqData$whas or
	  pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_outData_enqData$whas or
	  pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_1_outData_enqData$whas or
	  pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (pat0_splaF$D_OUT[1:0])
      2'd0:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1033 =
	      pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1033 =
	      pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1033 =
	      pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_pat0_splaF_first__012_BITS_1_TO_0_014_EQ_0__ETC___d1033 =
	      pat0_splaF$D_OUT[1:0] != 2'd3 ||
	      pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(pat0_splaF$D_OUT or
	  pat0_metaBram_serverAdapterB_3_outData_outData$whas or
	  pat0_metaBram_serverAdapterB_outData_outData$whas or
	  pat0_metaBram_serverAdapterB_1_outData_outData$whas or
	  pat0_metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (pat0_splaF$D_OUT[1:0])
      2'd0:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_splaF$D_OUT[1:0] != 2'd3 ||
	      pat0_metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(cap0_wci_wslv_reqF$D_OUT or
	  cap0_controlReg or
	  cap0_metaCount or
	  cap0_dataCount or
	  rdat___1__h61799 or rdat___1__h61873 or cap0_wsiS_extStatusW$wget)
  begin
    case (cap0_wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h61702 = cap0_controlReg;
      8'h04: v__h61702 = cap0_metaCount;
      8'h08: v__h61702 = cap0_dataCount;
      8'h0C: v__h61702 = rdat___1__h61799;
      8'h10: v__h61702 = rdat___1__h61873;
      8'h14: v__h61702 = cap0_wsiS_extStatusW$wget[95:64];
      8'h18: v__h61702 = cap0_wsiS_extStatusW$wget[63:32];
      8'h1C: v__h61702 = cap0_wsiS_extStatusW$wget[31:0];
      default: v__h61702 = 32'd0;
    endcase
  end
  always@(cap0_splaF$D_OUT or
	  cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  cap0_metaBram_serverAdapterB_3_outData_enqData$whas or
	  cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  cap0_metaBram_serverAdapterB_outData_enqData$whas or
	  cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  cap0_metaBram_serverAdapterB_1_outData_enqData$whas or
	  cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  cap0_metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (cap0_splaF$D_OUT[1:0])
      2'd0:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2106 =
	      cap0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      cap0_metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2106 =
	      cap0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      cap0_metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2106 =
	      cap0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      cap0_metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_cap0_splaF_first__085_BITS_1_TO_0_087_EQ_0__ETC___d2106 =
	      cap0_splaF$D_OUT[1:0] != 2'd3 ||
	      cap0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      cap0_metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(cap0_splaF$D_OUT or
	  cap0_metaBram_serverAdapterB_3_outData_outData$whas or
	  cap0_metaBram_serverAdapterB_outData_outData$whas or
	  cap0_metaBram_serverAdapterB_1_outData_outData$whas or
	  cap0_metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (cap0_splaF$D_OUT[1:0])
      2'd0:
	  CASE_cap0_splaFD_OUT_BITS_1_TO_0_NOT_cap0_spl_ETC__q2 =
	      cap0_metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_cap0_splaFD_OUT_BITS_1_TO_0_NOT_cap0_spl_ETC__q2 =
	      cap0_metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_cap0_splaFD_OUT_BITS_1_TO_0_NOT_cap0_spl_ETC__q2 =
	      cap0_metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_cap0_splaFD_OUT_BITS_1_TO_0_NOT_cap0_spl_ETC__q2 =
	      cap0_splaF$D_OUT[1:0] != 2'd3 ||
	      cap0_metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        simCycle <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (simCycle$EN) simCycle <= `BSV_ASSIGNMENT_DELAY simCycle$D_IN;
      end
    if (cp$RST_N_wci_Vm_4 == `BSV_RESET_VALUE)
      begin
        cap0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cap0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	cap0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	cap0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cap0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	cap0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	cap0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cap0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cap0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cap0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cap0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cap0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cap0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cap0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	cap0_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	cap0_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (cap0_dataBram_serverAdapterA_cnt$EN)
	  cap0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_dataBram_serverAdapterA_cnt$D_IN;
	if (cap0_dataBram_serverAdapterA_s1$EN)
	  cap0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_dataBram_serverAdapterA_s1$D_IN;
	if (cap0_dataBram_serverAdapterB_cnt$EN)
	  cap0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_dataBram_serverAdapterB_cnt$D_IN;
	if (cap0_dataBram_serverAdapterB_s1$EN)
	  cap0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_dataBram_serverAdapterB_s1$D_IN;
	if (cap0_isFirst$EN)
	  cap0_isFirst <= `BSV_ASSIGNMENT_DELAY cap0_isFirst$D_IN;
	if (cap0_mesgLengthSoFar$EN)
	  cap0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      cap0_mesgLengthSoFar$D_IN;
	if (cap0_metaBram_serverAdapterA_1_cnt$EN)
	  cap0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_1_cnt$D_IN;
	if (cap0_metaBram_serverAdapterA_1_s1$EN)
	  cap0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_1_s1$D_IN;
	if (cap0_metaBram_serverAdapterA_2_cnt$EN)
	  cap0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_2_cnt$D_IN;
	if (cap0_metaBram_serverAdapterA_2_s1$EN)
	  cap0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_2_s1$D_IN;
	if (cap0_metaBram_serverAdapterA_3_cnt$EN)
	  cap0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_3_cnt$D_IN;
	if (cap0_metaBram_serverAdapterA_3_s1$EN)
	  cap0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_3_s1$D_IN;
	if (cap0_metaBram_serverAdapterA_cnt$EN)
	  cap0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_cnt$D_IN;
	if (cap0_metaBram_serverAdapterA_s1$EN)
	  cap0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterA_s1$D_IN;
	if (cap0_metaBram_serverAdapterB_1_cnt$EN)
	  cap0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_1_cnt$D_IN;
	if (cap0_metaBram_serverAdapterB_1_s1$EN)
	  cap0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_1_s1$D_IN;
	if (cap0_metaBram_serverAdapterB_2_cnt$EN)
	  cap0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_2_cnt$D_IN;
	if (cap0_metaBram_serverAdapterB_2_s1$EN)
	  cap0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_2_s1$D_IN;
	if (cap0_metaBram_serverAdapterB_3_cnt$EN)
	  cap0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_3_cnt$D_IN;
	if (cap0_metaBram_serverAdapterB_3_s1$EN)
	  cap0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_3_s1$D_IN;
	if (cap0_metaBram_serverAdapterB_cnt$EN)
	  cap0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_cnt$D_IN;
	if (cap0_metaBram_serverAdapterB_s1$EN)
	  cap0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_metaBram_serverAdapterB_s1$D_IN;
	if (cap0_splitReadInFlight$EN)
	  cap0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY
	      cap0_splitReadInFlight$D_IN;
	if (cap0_wci_wslv_cEdge$EN)
	  cap0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_cEdge$D_IN;
	if (cap0_wci_wslv_cState$EN)
	  cap0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_cState$D_IN;
	if (cap0_wci_wslv_ctlAckReg$EN)
	  cap0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_ctlAckReg$D_IN;
	if (cap0_wci_wslv_ctlOpActive$EN)
	  cap0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_ctlOpActive$D_IN;
	if (cap0_wci_wslv_illegalEdge$EN)
	  cap0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_illegalEdge$D_IN;
	if (cap0_wci_wslv_nState$EN)
	  cap0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_nState$D_IN;
	if (cap0_wci_wslv_reqF_countReg$EN)
	  cap0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_reqF_countReg$D_IN;
	if (cap0_wci_wslv_respF_c_r$EN)
	  cap0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_respF_c_r$D_IN;
	if (cap0_wci_wslv_respF_q_0$EN)
	  cap0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_respF_q_0$D_IN;
	if (cap0_wci_wslv_respF_q_1$EN)
	  cap0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_respF_q_1$D_IN;
	if (cap0_wci_wslv_sFlagReg$EN)
	  cap0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_sFlagReg$D_IN;
	if (cap0_wci_wslv_sThreadBusy_d$EN)
	  cap0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      cap0_wci_wslv_sThreadBusy_d$D_IN;
	if (cap0_wsiS_burstKind$EN)
	  cap0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_burstKind$D_IN;
	if (cap0_wsiS_errorSticky$EN)
	  cap0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_errorSticky$D_IN;
	if (cap0_wsiS_iMesgCount$EN)
	  cap0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_iMesgCount$D_IN;
	if (cap0_wsiS_operateD$EN)
	  cap0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY cap0_wsiS_operateD$D_IN;
	if (cap0_wsiS_pMesgCount$EN)
	  cap0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_pMesgCount$D_IN;
	if (cap0_wsiS_peerIsReady$EN)
	  cap0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_peerIsReady$D_IN;
	if (cap0_wsiS_reqFifo_countReg$EN)
	  cap0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_reqFifo_countReg$D_IN;
	if (cap0_wsiS_reqFifo_levelsValid$EN)
	  cap0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_reqFifo_levelsValid$D_IN;
	if (cap0_wsiS_tBusyCount$EN)
	  cap0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_tBusyCount$D_IN;
	if (cap0_wsiS_trafficSticky$EN)
	  cap0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_trafficSticky$D_IN;
	if (cap0_wsiS_wordCount$EN)
	  cap0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      cap0_wsiS_wordCount$D_IN;
	if (cap0_wtiS_nowReq$EN)
	  cap0_wtiS_nowReq <= `BSV_ASSIGNMENT_DELAY cap0_wtiS_nowReq$D_IN;
	if (cap0_wtiS_operateD$EN)
	  cap0_wtiS_operateD <= `BSV_ASSIGNMENT_DELAY cap0_wtiS_operateD$D_IN;
      end
    if (cp$RST_N_wci_Vm_2 == `BSV_RESET_VALUE)
      begin
        pat0_bytesRemain <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_dataPtr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_doZLM <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pat0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pat0_mesgRemain <= `BSV_ASSIGNMENT_DELAY 32'd1;
	pat0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaPtr_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	pat0_metaPtr_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pat0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_thisLength <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_thisOpcode <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_thisTLS <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_thisTMS <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pat0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	pat0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	pat0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	pat0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pat0_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	pat0_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	pat0_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pat0_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (pat0_bytesRemain$EN)
	  pat0_bytesRemain <= `BSV_ASSIGNMENT_DELAY pat0_bytesRemain$D_IN;
	if (pat0_dataBram_serverAdapterA_cnt$EN)
	  pat0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterA_cnt$D_IN;
	if (pat0_dataBram_serverAdapterA_s1$EN)
	  pat0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterA_s1$D_IN;
	if (pat0_dataBram_serverAdapterB_cnt$EN)
	  pat0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterB_cnt$D_IN;
	if (pat0_dataBram_serverAdapterB_s1$EN)
	  pat0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterB_s1$D_IN;
	if (pat0_dataPtr$EN)
	  pat0_dataPtr <= `BSV_ASSIGNMENT_DELAY pat0_dataPtr$D_IN;
	if (pat0_doZLM$EN)
	  pat0_doZLM <= `BSV_ASSIGNMENT_DELAY pat0_doZLM$D_IN;
	if (pat0_isFirst$EN)
	  pat0_isFirst <= `BSV_ASSIGNMENT_DELAY pat0_isFirst$D_IN;
	if (pat0_mesgLengthSoFar$EN)
	  pat0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      pat0_mesgLengthSoFar$D_IN;
	if (pat0_mesgRemain$EN)
	  pat0_mesgRemain <= `BSV_ASSIGNMENT_DELAY pat0_mesgRemain$D_IN;
	if (pat0_metaBram_serverAdapterA_1_cnt$EN)
	  pat0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_1_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_1_s1$EN)
	  pat0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_1_s1$D_IN;
	if (pat0_metaBram_serverAdapterA_2_cnt$EN)
	  pat0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_2_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_2_s1$EN)
	  pat0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_2_s1$D_IN;
	if (pat0_metaBram_serverAdapterA_3_cnt$EN)
	  pat0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_3_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_3_s1$EN)
	  pat0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_3_s1$D_IN;
	if (pat0_metaBram_serverAdapterA_cnt$EN)
	  pat0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_s1$EN)
	  pat0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_1_cnt$EN)
	  pat0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_1_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_1_s1$EN)
	  pat0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_1_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_2_cnt$EN)
	  pat0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_2_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_2_s1$EN)
	  pat0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_2_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_3_cnt$EN)
	  pat0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_3_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_3_s1$EN)
	  pat0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_3_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_cnt$EN)
	  pat0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_s1$EN)
	  pat0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_s1$D_IN;
	if (pat0_metaPtr_modulus$EN)
	  pat0_metaPtr_modulus <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaPtr_modulus$D_IN;
	if (pat0_metaPtr_value$EN)
	  pat0_metaPtr_value <= `BSV_ASSIGNMENT_DELAY pat0_metaPtr_value$D_IN;
	if (pat0_splitReadInFlight$EN)
	  pat0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY
	      pat0_splitReadInFlight$D_IN;
	if (pat0_thisLength$EN)
	  pat0_thisLength <= `BSV_ASSIGNMENT_DELAY pat0_thisLength$D_IN;
	if (pat0_thisOpcode$EN)
	  pat0_thisOpcode <= `BSV_ASSIGNMENT_DELAY pat0_thisOpcode$D_IN;
	if (pat0_thisTLS$EN)
	  pat0_thisTLS <= `BSV_ASSIGNMENT_DELAY pat0_thisTLS$D_IN;
	if (pat0_thisTMS$EN)
	  pat0_thisTMS <= `BSV_ASSIGNMENT_DELAY pat0_thisTMS$D_IN;
	if (pat0_unrollCnt$EN)
	  pat0_unrollCnt <= `BSV_ASSIGNMENT_DELAY pat0_unrollCnt$D_IN;
	if (pat0_wci_wslv_cEdge$EN)
	  pat0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_cEdge$D_IN;
	if (pat0_wci_wslv_cState$EN)
	  pat0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_cState$D_IN;
	if (pat0_wci_wslv_ctlAckReg$EN)
	  pat0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_ctlAckReg$D_IN;
	if (pat0_wci_wslv_ctlOpActive$EN)
	  pat0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_ctlOpActive$D_IN;
	if (pat0_wci_wslv_illegalEdge$EN)
	  pat0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_illegalEdge$D_IN;
	if (pat0_wci_wslv_nState$EN)
	  pat0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_nState$D_IN;
	if (pat0_wci_wslv_reqF_countReg$EN)
	  pat0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_reqF_countReg$D_IN;
	if (pat0_wci_wslv_respF_c_r$EN)
	  pat0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_respF_c_r$D_IN;
	if (pat0_wci_wslv_respF_q_0$EN)
	  pat0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_respF_q_0$D_IN;
	if (pat0_wci_wslv_respF_q_1$EN)
	  pat0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_respF_q_1$D_IN;
	if (pat0_wci_wslv_sFlagReg$EN)
	  pat0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_sFlagReg$D_IN;
	if (pat0_wci_wslv_sThreadBusy_d$EN)
	  pat0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_sThreadBusy_d$D_IN;
	if (pat0_wsiM_burstKind$EN)
	  pat0_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_burstKind$D_IN;
	if (pat0_wsiM_errorSticky$EN)
	  pat0_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_errorSticky$D_IN;
	if (pat0_wsiM_iMesgCount$EN)
	  pat0_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_iMesgCount$D_IN;
	if (pat0_wsiM_operateD$EN)
	  pat0_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY pat0_wsiM_operateD$D_IN;
	if (pat0_wsiM_pMesgCount$EN)
	  pat0_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_pMesgCount$D_IN;
	if (pat0_wsiM_peerIsReady$EN)
	  pat0_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_peerIsReady$D_IN;
	if (pat0_wsiM_reqFifo_c_r$EN)
	  pat0_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_reqFifo_c_r$D_IN;
	if (pat0_wsiM_reqFifo_q_0$EN)
	  pat0_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_reqFifo_q_0$D_IN;
	if (pat0_wsiM_reqFifo_q_1$EN)
	  pat0_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_reqFifo_q_1$D_IN;
	if (pat0_wsiM_sThreadBusy_d$EN)
	  pat0_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_sThreadBusy_d$D_IN;
	if (pat0_wsiM_tBusyCount$EN)
	  pat0_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_tBusyCount$D_IN;
	if (pat0_wsiM_trafficSticky$EN)
	  pat0_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_trafficSticky$D_IN;
      end
    if (cap0_controlReg$EN)
      cap0_controlReg <= `BSV_ASSIGNMENT_DELAY cap0_controlReg$D_IN;
    if (cap0_dataCount$EN)
      cap0_dataCount <= `BSV_ASSIGNMENT_DELAY cap0_dataCount$D_IN;
    if (cap0_metaCount$EN)
      cap0_metaCount <= `BSV_ASSIGNMENT_DELAY cap0_metaCount$D_IN;
    if (cap0_wsiS_mesgWordLength$EN)
      cap0_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  cap0_wsiS_mesgWordLength$D_IN;
    if (cap0_wsiS_statusR$EN)
      cap0_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY cap0_wsiS_statusR$D_IN;
    if (pat0_controlReg$EN)
      pat0_controlReg <= `BSV_ASSIGNMENT_DELAY pat0_controlReg$D_IN;
    if (pat0_dataCount$EN)
      pat0_dataCount <= `BSV_ASSIGNMENT_DELAY pat0_dataCount$D_IN;
    if (pat0_mesgCount$EN)
      pat0_mesgCount <= `BSV_ASSIGNMENT_DELAY pat0_mesgCount$D_IN;
    if (pat0_wsiM_statusR$EN)
      pat0_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY pat0_wsiM_statusR$D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE cp$RST_N_wci_Vm_4)
  if (cp$RST_N_wci_Vm_4 == `BSV_RESET_VALUE)
    begin
      cap0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      cap0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      cap0_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (cap0_wci_wslv_isReset_isInReset$EN)
	cap0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    cap0_wci_wslv_isReset_isInReset$D_IN;
      if (cap0_wsiS_isReset_isInReset$EN)
	cap0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    cap0_wsiS_isReset_isInReset$D_IN;
      if (cap0_wtiS_isReset_isInReset$EN)
	cap0_wtiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    cap0_wtiS_isReset_isInReset$D_IN;
    end

  always@(posedge CLK or `BSV_RESET_EDGE cp$RST_N_wci_Vm_2)
  if (cp$RST_N_wci_Vm_2 == `BSV_RESET_VALUE)
    begin
      pat0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      pat0_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pat0_wci_wslv_isReset_isInReset$EN)
	pat0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pat0_wci_wslv_isReset_isInReset$D_IN;
      if (pat0_wsiM_isReset_isInReset$EN)
	pat0_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pat0_wsiM_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cap0_controlReg = 32'hAAAAAAAA;
    cap0_dataBram_serverAdapterA_cnt = 3'h2;
    cap0_dataBram_serverAdapterA_s1 = 2'h2;
    cap0_dataBram_serverAdapterB_cnt = 3'h2;
    cap0_dataBram_serverAdapterB_s1 = 2'h2;
    cap0_dataCount = 32'hAAAAAAAA;
    cap0_isFirst = 1'h0;
    cap0_mesgLengthSoFar = 14'h2AAA;
    cap0_metaBram_serverAdapterA_1_cnt = 3'h2;
    cap0_metaBram_serverAdapterA_1_s1 = 2'h2;
    cap0_metaBram_serverAdapterA_2_cnt = 3'h2;
    cap0_metaBram_serverAdapterA_2_s1 = 2'h2;
    cap0_metaBram_serverAdapterA_3_cnt = 3'h2;
    cap0_metaBram_serverAdapterA_3_s1 = 2'h2;
    cap0_metaBram_serverAdapterA_cnt = 3'h2;
    cap0_metaBram_serverAdapterA_s1 = 2'h2;
    cap0_metaBram_serverAdapterB_1_cnt = 3'h2;
    cap0_metaBram_serverAdapterB_1_s1 = 2'h2;
    cap0_metaBram_serverAdapterB_2_cnt = 3'h2;
    cap0_metaBram_serverAdapterB_2_s1 = 2'h2;
    cap0_metaBram_serverAdapterB_3_cnt = 3'h2;
    cap0_metaBram_serverAdapterB_3_s1 = 2'h2;
    cap0_metaBram_serverAdapterB_cnt = 3'h2;
    cap0_metaBram_serverAdapterB_s1 = 2'h2;
    cap0_metaCount = 32'hAAAAAAAA;
    cap0_splitReadInFlight = 1'h0;
    cap0_wci_wslv_cEdge = 3'h2;
    cap0_wci_wslv_cState = 3'h2;
    cap0_wci_wslv_ctlAckReg = 1'h0;
    cap0_wci_wslv_ctlOpActive = 1'h0;
    cap0_wci_wslv_illegalEdge = 1'h0;
    cap0_wci_wslv_isReset_isInReset = 1'h0;
    cap0_wci_wslv_nState = 3'h2;
    cap0_wci_wslv_reqF_countReg = 2'h2;
    cap0_wci_wslv_respF_c_r = 2'h2;
    cap0_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    cap0_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    cap0_wci_wslv_sFlagReg = 1'h0;
    cap0_wci_wslv_sThreadBusy_d = 1'h0;
    cap0_wsiS_burstKind = 2'h2;
    cap0_wsiS_errorSticky = 1'h0;
    cap0_wsiS_iMesgCount = 32'hAAAAAAAA;
    cap0_wsiS_isReset_isInReset = 1'h0;
    cap0_wsiS_mesgWordLength = 12'hAAA;
    cap0_wsiS_operateD = 1'h0;
    cap0_wsiS_pMesgCount = 32'hAAAAAAAA;
    cap0_wsiS_peerIsReady = 1'h0;
    cap0_wsiS_reqFifo_countReg = 2'h2;
    cap0_wsiS_reqFifo_levelsValid = 1'h0;
    cap0_wsiS_statusR = 8'hAA;
    cap0_wsiS_tBusyCount = 32'hAAAAAAAA;
    cap0_wsiS_trafficSticky = 1'h0;
    cap0_wsiS_wordCount = 12'hAAA;
    cap0_wtiS_isReset_isInReset = 1'h0;
    cap0_wtiS_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    cap0_wtiS_operateD = 1'h0;
    pat0_bytesRemain = 32'hAAAAAAAA;
    pat0_controlReg = 32'hAAAAAAAA;
    pat0_dataBram_serverAdapterA_cnt = 3'h2;
    pat0_dataBram_serverAdapterA_s1 = 2'h2;
    pat0_dataBram_serverAdapterB_cnt = 3'h2;
    pat0_dataBram_serverAdapterB_s1 = 2'h2;
    pat0_dataCount = 32'hAAAAAAAA;
    pat0_dataPtr = 32'hAAAAAAAA;
    pat0_doZLM = 1'h0;
    pat0_isFirst = 1'h0;
    pat0_mesgCount = 32'hAAAAAAAA;
    pat0_mesgLengthSoFar = 14'h2AAA;
    pat0_mesgRemain = 32'hAAAAAAAA;
    pat0_metaBram_serverAdapterA_1_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_1_s1 = 2'h2;
    pat0_metaBram_serverAdapterA_2_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_2_s1 = 2'h2;
    pat0_metaBram_serverAdapterA_3_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_3_s1 = 2'h2;
    pat0_metaBram_serverAdapterA_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_1_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_1_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_2_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_2_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_3_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_3_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_s1 = 2'h2;
    pat0_metaPtr_modulus = 16'hAAAA;
    pat0_metaPtr_value = 16'hAAAA;
    pat0_splitReadInFlight = 1'h0;
    pat0_thisLength = 32'hAAAAAAAA;
    pat0_thisOpcode = 32'hAAAAAAAA;
    pat0_thisTLS = 32'hAAAAAAAA;
    pat0_thisTMS = 32'hAAAAAAAA;
    pat0_unrollCnt = 16'hAAAA;
    pat0_wci_wslv_cEdge = 3'h2;
    pat0_wci_wslv_cState = 3'h2;
    pat0_wci_wslv_ctlAckReg = 1'h0;
    pat0_wci_wslv_ctlOpActive = 1'h0;
    pat0_wci_wslv_illegalEdge = 1'h0;
    pat0_wci_wslv_isReset_isInReset = 1'h0;
    pat0_wci_wslv_nState = 3'h2;
    pat0_wci_wslv_reqF_countReg = 2'h2;
    pat0_wci_wslv_respF_c_r = 2'h2;
    pat0_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    pat0_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    pat0_wci_wslv_sFlagReg = 1'h0;
    pat0_wci_wslv_sThreadBusy_d = 1'h0;
    pat0_wsiM_burstKind = 2'h2;
    pat0_wsiM_errorSticky = 1'h0;
    pat0_wsiM_iMesgCount = 32'hAAAAAAAA;
    pat0_wsiM_isReset_isInReset = 1'h0;
    pat0_wsiM_operateD = 1'h0;
    pat0_wsiM_pMesgCount = 32'hAAAAAAAA;
    pat0_wsiM_peerIsReady = 1'h0;
    pat0_wsiM_reqFifo_c_r = 2'h2;
    pat0_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    pat0_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    pat0_wsiM_sThreadBusy_d = 1'h0;
    pat0_wsiM_statusR = 8'hAA;
    pat0_wsiM_tBusyCount = 32'hAAAAAAAA;
    pat0_wsiM_trafficSticky = 1'h0;
    simCycle = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (simCycle == 16'd10000)
	begin
	  v__h65486 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (simCycle == 16'd10000)
	$display("[%0d]: %m: mkTB18 termination by terminate rule (timeout)",
		 v__h65486);
    if (RST_N != `BSV_RESET_VALUE) if (simCycle == 16'd10000) $finish(32'd1);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start)
	begin
	  v__h5385 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h5385,
		 pat0_wci_wslv_reqF$D_OUT[36:34],
		 pat0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_ctrl_IsO && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_ctrl_IsO] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfrd &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h33273 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfrd &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h33273,
		 pat0_wci_wslv_reqF$D_OUT[63:32],
		 pat0_wci_wslv_reqF$D_OUT[67:64],
		 v__h33254);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_ctrl_EiI && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_ctrl_EiI] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_ctrl_EiI && WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_ctrl_EiI] and\n  [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_dataBram_serverAdapterA_s1[1] &&
	  !pat0_dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1)
	begin
	  v__h30679 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Producer Egress: mesgCount:%0x thisOpcode:%0x thisLength:%0x",
		 v__h30679,
		 pat0_mesgCount,
		 pat0_thisOpcode,
		 pat0_thisLength);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_dataBram_serverAdapterB_s1[1] &&
	  !pat0_dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterA_s1[1] &&
	  !pat0_metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterB_s1[1] &&
	  !pat0_metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterA_1_s1[1] &&
	  !pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterB_1_s1[1] &&
	  !pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterA_2_s1[1] &&
	  !pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterB_2_s1[1] &&
	  !pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterA_3_s1[1] &&
	  !pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfwr &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h32277 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfwr &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h32277,
		 pat0_wci_wslv_reqF$D_OUT[63:32],
		 pat0_wci_wslv_reqF$D_OUT[67:64],
		 pat0_wci_wslv_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  pat0_wci_wslv_illegalEdge)
	begin
	  v__h5704 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  pat0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h5704,
		 pat0_wci_wslv_cEdge,
		 pat0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  !pat0_wci_wslv_illegalEdge)
	begin
	  v__h5560 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  !pat0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h5560,
		 pat0_wci_wslv_cEdge,
		 pat0_wci_wslv_cState,
		 pat0_wci_wslv_nState);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (pat0_metaBram_serverAdapterB_3_s1[1] &&
	  !pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_advance_split_response)
	begin
	  v__h31775 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_advance_split_response)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h31775, v__h30857);
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_advance_split_response &&
	  WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_advance_split_response]\n  and [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_advance_split_response &&
	  WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_advance_split_response]\n  and [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_advance_split_response &&
	  WILL_FIRE_RL_pat0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_advance_split_response]\n  and [RL_pat0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfwr &&
	  WILL_FIRE_RL_pat0_advance_split_response)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_advance_split_response] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_cfrd)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_cfrd] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfrd &&
	  WILL_FIRE_RL_pat0_advance_split_response)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_advance_split_response] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfrd && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfrd && WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_2 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_pat0_wci_cfrd && WILL_FIRE_RL_pat0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 227, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start)
	begin
	  v__h38445 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h38445,
		 cap0_wci_wslv_reqF$D_OUT[36:34],
		 cap0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_ctrl_EiI && WILL_FIRE_RL_cap0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_ctrl_EiI] and\n  [RL_cap0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_ctrl_EiI && WILL_FIRE_RL_cap0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_ctrl_EiI] and\n  [RL_cap0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_ctrl_IsO && WILL_FIRE_RL_cap0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_ctrl_IsO] and\n  [RL_cap0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfrd &&
	  cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h61721 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfrd &&
	  cap0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h61721,
		 cap0_wci_wslv_reqF$D_OUT[63:32],
		 cap0_wci_wslv_reqF$D_OUT[67:64],
		 v__h61702);
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_doMessageAccept &&
	  cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066 &&
	  cap0_wsiS_reqFifo$D_OUT[57])
	begin
	  v__h60176 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_doMessageAccept &&
	  cap0_controlReg_018_BIT_0_019_AND_NOT_cap0_con_ETC___d2066 &&
	  cap0_wsiS_reqFifo$D_OUT[57])
	$display("[%0d]: %m: doMessageAccept DWM metaCount:%0x WSI opcode:%0x length:%0x",
		 v__h60176,
		 cap0_metaCount,
		 cap0_wsiS_reqFifo$D_OUT[7:0],
		 mlB__h58072);
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfwr)
	begin
	  v__h61516 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h61516,
		 cap0_wci_wslv_reqF$D_OUT[63:32],
		 cap0_wci_wslv_reqF$D_OUT[67:64],
		 cap0_wci_wslv_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete &&
	  cap0_wci_wslv_illegalEdge)
	begin
	  v__h38764 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete &&
	  cap0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h38764,
		 cap0_wci_wslv_cEdge,
		 cap0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete &&
	  !cap0_wci_wslv_illegalEdge)
	begin
	  v__h38620 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_wslv_ctl_op_complete &&
	  !cap0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h38620,
		 cap0_wci_wslv_cEdge,
		 cap0_wci_wslv_cState,
		 cap0_wci_wslv_nState);
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_dataBram_serverAdapterA_s1[1] &&
	  !cap0_dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_dataBram_serverAdapterB_s1[1] &&
	  !cap0_dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterA_s1[1] &&
	  !cap0_metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterB_s1[1] &&
	  !cap0_metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterA_1_s1[1] &&
	  !cap0_metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterB_1_s1[1] &&
	  !cap0_metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterA_2_s1[1] &&
	  !cap0_metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterB_2_s1[1] &&
	  !cap0_metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterA_3_s1[1] &&
	  !cap0_metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (cap0_metaBram_serverAdapterB_3_s1[1] &&
	  !cap0_metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_advance_split_response)
	begin
	  v__h61221 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_advance_split_response)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h61221, v__h60302);
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_advance_split_response &&
	  WILL_FIRE_RL_cap0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_advance_split_response]\n  and [RL_cap0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_advance_split_response &&
	  WILL_FIRE_RL_cap0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_advance_split_response]\n  and [RL_cap0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_advance_split_response &&
	  WILL_FIRE_RL_cap0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_advance_split_response]\n  and [RL_cap0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfwr &&
	  WILL_FIRE_RL_cap0_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfwr] and\n  [RL_cap0_advance_split_response] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfwr && WILL_FIRE_RL_cap0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfwr] and\n  [RL_cap0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfwr && WILL_FIRE_RL_cap0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfwr] and\n  [RL_cap0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfwr && WILL_FIRE_RL_cap0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfwr] and\n  [RL_cap0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfwr && WILL_FIRE_RL_cap0_wci_cfrd)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfwr] and\n  [RL_cap0_wci_cfrd] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfrd &&
	  WILL_FIRE_RL_cap0_advance_split_response)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfrd] and\n  [RL_cap0_advance_split_response] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfrd && WILL_FIRE_RL_cap0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfrd] and\n  [RL_cap0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfrd && WILL_FIRE_RL_cap0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfrd] and\n  [RL_cap0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_4 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cap0_wci_cfrd && WILL_FIRE_RL_cap0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSICaptureWorker.bsv\", line 157, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cap0_wci_cfrd] and\n  [RL_cap0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTB18

