//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Mon Nov  4 17:07:37 EST 2013
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1
// server_response_get            O   153
// RDY_server_response_get        O     1
// RDY_cpServer_request_put       O     1 reg
// cpServer_response_get          O    40 reg
// RDY_cpServer_response_get      O     1 reg
// led                            O     2 reg
// wci_m_0_MCmd                   O     3
// wci_m_0_MAddrSpace             O     1
// wci_m_0_MByteEn                O     4
// wci_m_0_MAddr                  O    32
// wci_m_0_MData                  O    32 reg
// wci_m_0_MFlag                  O     2 reg
// wci_m_1_MCmd                   O     3
// wci_m_1_MAddrSpace             O     1
// wci_m_1_MByteEn                O     4
// wci_m_1_MAddr                  O    32
// wci_m_1_MData                  O    32 reg
// wci_m_1_MFlag                  O     2 reg
// wci_m_2_MCmd                   O     3
// wci_m_2_MAddrSpace             O     1
// wci_m_2_MByteEn                O     4
// wci_m_2_MAddr                  O    32
// wci_m_2_MData                  O    32 reg
// wci_m_2_MFlag                  O     2 reg
// wci_m_3_MCmd                   O     3
// wci_m_3_MAddrSpace             O     1
// wci_m_3_MByteEn                O     4
// wci_m_3_MAddr                  O    32
// wci_m_3_MData                  O    32 reg
// wci_m_3_MFlag                  O     2 reg
// wci_m_4_MCmd                   O     3
// wci_m_4_MAddrSpace             O     1
// wci_m_4_MByteEn                O     4
// wci_m_4_MAddr                  O    32
// wci_m_4_MData                  O    32 reg
// wci_m_4_MFlag                  O     2 reg
// wci_m_5_MCmd                   O     3
// wci_m_5_MAddrSpace             O     1
// wci_m_5_MByteEn                O     4
// wci_m_5_MAddr                  O    32
// wci_m_5_MData                  O    32 reg
// wci_m_5_MFlag                  O     2 reg
// wci_m_6_MCmd                   O     3
// wci_m_6_MAddrSpace             O     1
// wci_m_6_MByteEn                O     4
// wci_m_6_MAddr                  O    32
// wci_m_6_MData                  O    32 reg
// wci_m_6_MFlag                  O     2 reg
// wci_m_7_MCmd                   O     3
// wci_m_7_MAddrSpace             O     1
// wci_m_7_MByteEn                O     4
// wci_m_7_MAddr                  O    32
// wci_m_7_MData                  O    32 reg
// wci_m_7_MFlag                  O     2 reg
// wci_m_8_MCmd                   O     3
// wci_m_8_MAddrSpace             O     1
// wci_m_8_MByteEn                O     4
// wci_m_8_MAddr                  O    32
// wci_m_8_MData                  O    32 reg
// wci_m_8_MFlag                  O     2 reg
// wci_m_9_MCmd                   O     3
// wci_m_9_MAddrSpace             O     1
// wci_m_9_MByteEn                O     4
// wci_m_9_MAddr                  O    32
// wci_m_9_MData                  O    32 reg
// wci_m_9_MFlag                  O     2 reg
// wci_m_10_MCmd                  O     3
// wci_m_10_MAddrSpace            O     1
// wci_m_10_MByteEn               O     4
// wci_m_10_MAddr                 O    32
// wci_m_10_MData                 O    32 reg
// wci_m_10_MFlag                 O     2 reg
// wci_m_11_MCmd                  O     3
// wci_m_11_MAddrSpace            O     1
// wci_m_11_MByteEn               O     4
// wci_m_11_MAddr                 O    32
// wci_m_11_MData                 O    32 reg
// wci_m_11_MFlag                 O     2 reg
// wci_m_12_MCmd                  O     3
// wci_m_12_MAddrSpace            O     1
// wci_m_12_MByteEn               O     4
// wci_m_12_MAddr                 O    32
// wci_m_12_MData                 O    32 reg
// wci_m_12_MFlag                 O     2 reg
// wmiDP0_SResp                   O     2 reg
// wmiDP0_SData                   O   128 reg
// wmiDP0_SThreadBusy             O     1
// wmiDP0_SDataThreadBusy         O     1
// wmiDP0_SRespLast               O     1 const
// wmiDP0_SFlag                   O    32 reg
// wmiDP0_SReset_n                O     1
// wmiDP1_SResp                   O     2 reg
// wmiDP1_SData                   O   128 reg
// wmiDP1_SThreadBusy             O     1
// wmiDP1_SDataThreadBusy         O     1
// wmiDP1_SRespLast               O     1 const
// wmiDP1_SFlag                   O    32 reg
// wmiDP1_SReset_n                O     1
// cpNow                          O    64 reg
// RDY_cpNow                      O     1 const
// gps_ppsSyncOut                 O     1
// RDY_uuid                       O     1 const
// RST_N_wci_m_0                  O     1 reset
// RST_N_wci_m_1                  O     1 reset
// RST_N_wci_m_2                  O     1 reset
// RST_N_wci_m_3                  O     1 reset
// RST_N_wci_m_4                  O     1 reset
// RST_N_wci_m_5                  O     1 reset
// RST_N_wci_m_6                  O     1 reset
// RST_N_wci_m_7                  O     1 reset
// RST_N_wci_m_8                  O     1 reset
// RST_N_wci_m_9                  O     1 reset
// RST_N_wci_m_10                 O     1 reset
// RST_N_wci_m_11                 O     1 reset
// RST_N_wci_m_12                 O     1 reset
// pciDevice                      I    16
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rst                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I   153
// cpServer_request_put           I    59 reg
// switch_x                       I     3 reg
// wci_m_0_SResp                  I     2
// wci_m_0_SData                  I    32
// wci_m_0_SFlag                  I     2 reg
// wci_m_1_SResp                  I     2
// wci_m_1_SData                  I    32
// wci_m_1_SFlag                  I     2 reg
// wci_m_2_SResp                  I     2
// wci_m_2_SData                  I    32
// wci_m_2_SFlag                  I     2 reg
// wci_m_3_SResp                  I     2
// wci_m_3_SData                  I    32
// wci_m_3_SFlag                  I     2 reg
// wci_m_4_SResp                  I     2
// wci_m_4_SData                  I    32
// wci_m_4_SFlag                  I     2 reg
// wci_m_5_SResp                  I     2
// wci_m_5_SData                  I    32
// wci_m_5_SFlag                  I     2 reg
// wci_m_6_SResp                  I     2
// wci_m_6_SData                  I    32
// wci_m_6_SFlag                  I     2 reg
// wci_m_7_SResp                  I     2
// wci_m_7_SData                  I    32
// wci_m_7_SFlag                  I     2 reg
// wci_m_8_SResp                  I     2
// wci_m_8_SData                  I    32
// wci_m_8_SFlag                  I     2 reg
// wci_m_9_SResp                  I     2
// wci_m_9_SData                  I    32
// wci_m_9_SFlag                  I     2 reg
// wci_m_10_SResp                 I     2
// wci_m_10_SData                 I    32
// wci_m_10_SFlag                 I     2 reg
// wci_m_11_SResp                 I     2
// wci_m_11_SData                 I    32
// wci_m_11_SFlag                 I     2 reg
// wci_m_12_SResp                 I     2
// wci_m_12_SData                 I    32
// wci_m_12_SFlag                 I     2 reg
// wmiDP0_MCmd                    I     3
// wmiDP0_MReqInfo                I     1
// wmiDP0_MAddrSpace              I     1
// wmiDP0_MAddr                   I    14
// wmiDP0_MBurstLength            I    12
// wmiDP0_MData                   I   128
// wmiDP0_MDataByteEn             I    16
// wmiDP0_arg_mFlag               I    32 reg
// wmiDP1_MCmd                    I     3
// wmiDP1_MReqInfo                I     1
// wmiDP1_MAddrSpace              I     1
// wmiDP1_MAddr                   I    14
// wmiDP1_MBurstLength            I    12
// wmiDP1_MData                   I   128
// wmiDP1_MDataByteEn             I    16
// wmiDP1_arg_mFlag               I    32 reg
// gps_ppsSyncIn_x                I     1 reg
// uuid_arg                       I   512
// EN_server_request_put          I     1
// EN_cpServer_request_put        I     1
// wci_m_0_SThreadBusy            I     1 reg
// wci_m_1_SThreadBusy            I     1 reg
// wci_m_2_SThreadBusy            I     1 reg
// wci_m_3_SThreadBusy            I     1 reg
// wci_m_4_SThreadBusy            I     1 reg
// wci_m_5_SThreadBusy            I     1 reg
// wci_m_6_SThreadBusy            I     1 reg
// wci_m_7_SThreadBusy            I     1 reg
// wci_m_8_SThreadBusy            I     1 reg
// wci_m_9_SThreadBusy            I     1 reg
// wci_m_10_SThreadBusy           I     1 reg
// wci_m_11_SThreadBusy           I     1 reg
// wci_m_12_SThreadBusy           I     1 reg
// wmiDP0_MReqLast                I     1
// wmiDP0_MDataValid              I     1
// wmiDP0_MDataLast               I     1
// wmiDP0_MReset_n                I     1 reg
// wmiDP1_MReqLast                I     1
// wmiDP1_MDataValid              I     1
// wmiDP1_MDataLast               I     1
// wmiDP1_MReset_n                I     1 reg
// EN_uuid                        I     1 inhigh
// EN_server_response_get         I     1
// EN_cpServer_response_get       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkOCInf16B(pciDevice,
		  CLK_sys0_clk,
		  RST_N_sys0_rst,
		  CLK,
		  RST_N,

		  server_request_put,
		  EN_server_request_put,
		  RDY_server_request_put,

		  EN_server_response_get,
		  server_response_get,
		  RDY_server_response_get,

		  cpServer_request_put,
		  EN_cpServer_request_put,
		  RDY_cpServer_request_put,

		  EN_cpServer_response_get,
		  cpServer_response_get,
		  RDY_cpServer_response_get,

		  led,

		  switch_x,

		  wci_m_0_MCmd,

		  wci_m_0_MAddrSpace,

		  wci_m_0_MByteEn,

		  wci_m_0_MAddr,

		  wci_m_0_MData,

		  wci_m_0_SResp,

		  wci_m_0_SData,

		  wci_m_0_SThreadBusy,

		  wci_m_0_SFlag,

		  wci_m_0_MFlag,

		  wci_m_1_MCmd,

		  wci_m_1_MAddrSpace,

		  wci_m_1_MByteEn,

		  wci_m_1_MAddr,

		  wci_m_1_MData,

		  wci_m_1_SResp,

		  wci_m_1_SData,

		  wci_m_1_SThreadBusy,

		  wci_m_1_SFlag,

		  wci_m_1_MFlag,

		  wci_m_2_MCmd,

		  wci_m_2_MAddrSpace,

		  wci_m_2_MByteEn,

		  wci_m_2_MAddr,

		  wci_m_2_MData,

		  wci_m_2_SResp,

		  wci_m_2_SData,

		  wci_m_2_SThreadBusy,

		  wci_m_2_SFlag,

		  wci_m_2_MFlag,

		  wci_m_3_MCmd,

		  wci_m_3_MAddrSpace,

		  wci_m_3_MByteEn,

		  wci_m_3_MAddr,

		  wci_m_3_MData,

		  wci_m_3_SResp,

		  wci_m_3_SData,

		  wci_m_3_SThreadBusy,

		  wci_m_3_SFlag,

		  wci_m_3_MFlag,

		  wci_m_4_MCmd,

		  wci_m_4_MAddrSpace,

		  wci_m_4_MByteEn,

		  wci_m_4_MAddr,

		  wci_m_4_MData,

		  wci_m_4_SResp,

		  wci_m_4_SData,

		  wci_m_4_SThreadBusy,

		  wci_m_4_SFlag,

		  wci_m_4_MFlag,

		  wci_m_5_MCmd,

		  wci_m_5_MAddrSpace,

		  wci_m_5_MByteEn,

		  wci_m_5_MAddr,

		  wci_m_5_MData,

		  wci_m_5_SResp,

		  wci_m_5_SData,

		  wci_m_5_SThreadBusy,

		  wci_m_5_SFlag,

		  wci_m_5_MFlag,

		  wci_m_6_MCmd,

		  wci_m_6_MAddrSpace,

		  wci_m_6_MByteEn,

		  wci_m_6_MAddr,

		  wci_m_6_MData,

		  wci_m_6_SResp,

		  wci_m_6_SData,

		  wci_m_6_SThreadBusy,

		  wci_m_6_SFlag,

		  wci_m_6_MFlag,

		  wci_m_7_MCmd,

		  wci_m_7_MAddrSpace,

		  wci_m_7_MByteEn,

		  wci_m_7_MAddr,

		  wci_m_7_MData,

		  wci_m_7_SResp,

		  wci_m_7_SData,

		  wci_m_7_SThreadBusy,

		  wci_m_7_SFlag,

		  wci_m_7_MFlag,

		  wci_m_8_MCmd,

		  wci_m_8_MAddrSpace,

		  wci_m_8_MByteEn,

		  wci_m_8_MAddr,

		  wci_m_8_MData,

		  wci_m_8_SResp,

		  wci_m_8_SData,

		  wci_m_8_SThreadBusy,

		  wci_m_8_SFlag,

		  wci_m_8_MFlag,

		  wci_m_9_MCmd,

		  wci_m_9_MAddrSpace,

		  wci_m_9_MByteEn,

		  wci_m_9_MAddr,

		  wci_m_9_MData,

		  wci_m_9_SResp,

		  wci_m_9_SData,

		  wci_m_9_SThreadBusy,

		  wci_m_9_SFlag,

		  wci_m_9_MFlag,

		  wci_m_10_MCmd,

		  wci_m_10_MAddrSpace,

		  wci_m_10_MByteEn,

		  wci_m_10_MAddr,

		  wci_m_10_MData,

		  wci_m_10_SResp,

		  wci_m_10_SData,

		  wci_m_10_SThreadBusy,

		  wci_m_10_SFlag,

		  wci_m_10_MFlag,

		  wci_m_11_MCmd,

		  wci_m_11_MAddrSpace,

		  wci_m_11_MByteEn,

		  wci_m_11_MAddr,

		  wci_m_11_MData,

		  wci_m_11_SResp,

		  wci_m_11_SData,

		  wci_m_11_SThreadBusy,

		  wci_m_11_SFlag,

		  wci_m_11_MFlag,

		  wci_m_12_MCmd,

		  wci_m_12_MAddrSpace,

		  wci_m_12_MByteEn,

		  wci_m_12_MAddr,

		  wci_m_12_MData,

		  wci_m_12_SResp,

		  wci_m_12_SData,

		  wci_m_12_SThreadBusy,

		  wci_m_12_SFlag,

		  wci_m_12_MFlag,

		  wmiDP0_MCmd,

		  wmiDP0_MReqLast,

		  wmiDP0_MReqInfo,

		  wmiDP0_MAddrSpace,

		  wmiDP0_MAddr,

		  wmiDP0_MBurstLength,

		  wmiDP0_MDataValid,

		  wmiDP0_MDataLast,

		  wmiDP0_MData,

		  wmiDP0_MDataByteEn,

		  wmiDP0_SResp,

		  wmiDP0_SData,

		  wmiDP0_SThreadBusy,

		  wmiDP0_SDataThreadBusy,

		  wmiDP0_SRespLast,

		  wmiDP0_SFlag,

		  wmiDP0_arg_mFlag,

		  wmiDP0_SReset_n,

		  wmiDP0_MReset_n,

		  wmiDP1_MCmd,

		  wmiDP1_MReqLast,

		  wmiDP1_MReqInfo,

		  wmiDP1_MAddrSpace,

		  wmiDP1_MAddr,

		  wmiDP1_MBurstLength,

		  wmiDP1_MDataValid,

		  wmiDP1_MDataLast,

		  wmiDP1_MData,

		  wmiDP1_MDataByteEn,

		  wmiDP1_SResp,

		  wmiDP1_SData,

		  wmiDP1_SThreadBusy,

		  wmiDP1_SDataThreadBusy,

		  wmiDP1_SRespLast,

		  wmiDP1_SFlag,

		  wmiDP1_arg_mFlag,

		  wmiDP1_SReset_n,

		  wmiDP1_MReset_n,

		  cpNow,
		  RDY_cpNow,

		  gps_ppsSyncIn_x,

		  gps_ppsSyncOut,

		  uuid_arg,
		  EN_uuid,
		  RDY_uuid,

		  RST_N_wci_m_0,
		  RST_N_wci_m_1,
		  RST_N_wci_m_2,
		  RST_N_wci_m_3,
		  RST_N_wci_m_4,
		  RST_N_wci_m_5,
		  RST_N_wci_m_6,
		  RST_N_wci_m_7,
		  RST_N_wci_m_8,
		  RST_N_wci_m_9,
		  RST_N_wci_m_10,
		  RST_N_wci_m_11,
		  RST_N_wci_m_12);
  input  [15 : 0] pciDevice;
  input  CLK_sys0_clk;
  input  RST_N_sys0_rst;
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [152 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [152 : 0] server_response_get;
  output RDY_server_response_get;

  // action method cpServer_request_put
  input  [58 : 0] cpServer_request_put;
  input  EN_cpServer_request_put;
  output RDY_cpServer_request_put;

  // actionvalue method cpServer_response_get
  input  EN_cpServer_response_get;
  output [39 : 0] cpServer_response_get;
  output RDY_cpServer_response_get;

  // value method led
  output [1 : 0] led;

  // action method switch
  input  [2 : 0] switch_x;

  // value method wci_m_0_mCmd
  output [2 : 0] wci_m_0_MCmd;

  // value method wci_m_0_mAddrSpace
  output wci_m_0_MAddrSpace;

  // value method wci_m_0_mByteEn
  output [3 : 0] wci_m_0_MByteEn;

  // value method wci_m_0_mAddr
  output [31 : 0] wci_m_0_MAddr;

  // value method wci_m_0_mData
  output [31 : 0] wci_m_0_MData;

  // action method wci_m_0_sResp
  input  [1 : 0] wci_m_0_SResp;

  // action method wci_m_0_sData
  input  [31 : 0] wci_m_0_SData;

  // action method wci_m_0_sThreadBusy
  input  wci_m_0_SThreadBusy;

  // action method wci_m_0_sFlag
  input  [1 : 0] wci_m_0_SFlag;

  // value method wci_m_0_mFlag
  output [1 : 0] wci_m_0_MFlag;

  // value method wci_m_1_mCmd
  output [2 : 0] wci_m_1_MCmd;

  // value method wci_m_1_mAddrSpace
  output wci_m_1_MAddrSpace;

  // value method wci_m_1_mByteEn
  output [3 : 0] wci_m_1_MByteEn;

  // value method wci_m_1_mAddr
  output [31 : 0] wci_m_1_MAddr;

  // value method wci_m_1_mData
  output [31 : 0] wci_m_1_MData;

  // action method wci_m_1_sResp
  input  [1 : 0] wci_m_1_SResp;

  // action method wci_m_1_sData
  input  [31 : 0] wci_m_1_SData;

  // action method wci_m_1_sThreadBusy
  input  wci_m_1_SThreadBusy;

  // action method wci_m_1_sFlag
  input  [1 : 0] wci_m_1_SFlag;

  // value method wci_m_1_mFlag
  output [1 : 0] wci_m_1_MFlag;

  // value method wci_m_2_mCmd
  output [2 : 0] wci_m_2_MCmd;

  // value method wci_m_2_mAddrSpace
  output wci_m_2_MAddrSpace;

  // value method wci_m_2_mByteEn
  output [3 : 0] wci_m_2_MByteEn;

  // value method wci_m_2_mAddr
  output [31 : 0] wci_m_2_MAddr;

  // value method wci_m_2_mData
  output [31 : 0] wci_m_2_MData;

  // action method wci_m_2_sResp
  input  [1 : 0] wci_m_2_SResp;

  // action method wci_m_2_sData
  input  [31 : 0] wci_m_2_SData;

  // action method wci_m_2_sThreadBusy
  input  wci_m_2_SThreadBusy;

  // action method wci_m_2_sFlag
  input  [1 : 0] wci_m_2_SFlag;

  // value method wci_m_2_mFlag
  output [1 : 0] wci_m_2_MFlag;

  // value method wci_m_3_mCmd
  output [2 : 0] wci_m_3_MCmd;

  // value method wci_m_3_mAddrSpace
  output wci_m_3_MAddrSpace;

  // value method wci_m_3_mByteEn
  output [3 : 0] wci_m_3_MByteEn;

  // value method wci_m_3_mAddr
  output [31 : 0] wci_m_3_MAddr;

  // value method wci_m_3_mData
  output [31 : 0] wci_m_3_MData;

  // action method wci_m_3_sResp
  input  [1 : 0] wci_m_3_SResp;

  // action method wci_m_3_sData
  input  [31 : 0] wci_m_3_SData;

  // action method wci_m_3_sThreadBusy
  input  wci_m_3_SThreadBusy;

  // action method wci_m_3_sFlag
  input  [1 : 0] wci_m_3_SFlag;

  // value method wci_m_3_mFlag
  output [1 : 0] wci_m_3_MFlag;

  // value method wci_m_4_mCmd
  output [2 : 0] wci_m_4_MCmd;

  // value method wci_m_4_mAddrSpace
  output wci_m_4_MAddrSpace;

  // value method wci_m_4_mByteEn
  output [3 : 0] wci_m_4_MByteEn;

  // value method wci_m_4_mAddr
  output [31 : 0] wci_m_4_MAddr;

  // value method wci_m_4_mData
  output [31 : 0] wci_m_4_MData;

  // action method wci_m_4_sResp
  input  [1 : 0] wci_m_4_SResp;

  // action method wci_m_4_sData
  input  [31 : 0] wci_m_4_SData;

  // action method wci_m_4_sThreadBusy
  input  wci_m_4_SThreadBusy;

  // action method wci_m_4_sFlag
  input  [1 : 0] wci_m_4_SFlag;

  // value method wci_m_4_mFlag
  output [1 : 0] wci_m_4_MFlag;

  // value method wci_m_5_mCmd
  output [2 : 0] wci_m_5_MCmd;

  // value method wci_m_5_mAddrSpace
  output wci_m_5_MAddrSpace;

  // value method wci_m_5_mByteEn
  output [3 : 0] wci_m_5_MByteEn;

  // value method wci_m_5_mAddr
  output [31 : 0] wci_m_5_MAddr;

  // value method wci_m_5_mData
  output [31 : 0] wci_m_5_MData;

  // action method wci_m_5_sResp
  input  [1 : 0] wci_m_5_SResp;

  // action method wci_m_5_sData
  input  [31 : 0] wci_m_5_SData;

  // action method wci_m_5_sThreadBusy
  input  wci_m_5_SThreadBusy;

  // action method wci_m_5_sFlag
  input  [1 : 0] wci_m_5_SFlag;

  // value method wci_m_5_mFlag
  output [1 : 0] wci_m_5_MFlag;

  // value method wci_m_6_mCmd
  output [2 : 0] wci_m_6_MCmd;

  // value method wci_m_6_mAddrSpace
  output wci_m_6_MAddrSpace;

  // value method wci_m_6_mByteEn
  output [3 : 0] wci_m_6_MByteEn;

  // value method wci_m_6_mAddr
  output [31 : 0] wci_m_6_MAddr;

  // value method wci_m_6_mData
  output [31 : 0] wci_m_6_MData;

  // action method wci_m_6_sResp
  input  [1 : 0] wci_m_6_SResp;

  // action method wci_m_6_sData
  input  [31 : 0] wci_m_6_SData;

  // action method wci_m_6_sThreadBusy
  input  wci_m_6_SThreadBusy;

  // action method wci_m_6_sFlag
  input  [1 : 0] wci_m_6_SFlag;

  // value method wci_m_6_mFlag
  output [1 : 0] wci_m_6_MFlag;

  // value method wci_m_7_mCmd
  output [2 : 0] wci_m_7_MCmd;

  // value method wci_m_7_mAddrSpace
  output wci_m_7_MAddrSpace;

  // value method wci_m_7_mByteEn
  output [3 : 0] wci_m_7_MByteEn;

  // value method wci_m_7_mAddr
  output [31 : 0] wci_m_7_MAddr;

  // value method wci_m_7_mData
  output [31 : 0] wci_m_7_MData;

  // action method wci_m_7_sResp
  input  [1 : 0] wci_m_7_SResp;

  // action method wci_m_7_sData
  input  [31 : 0] wci_m_7_SData;

  // action method wci_m_7_sThreadBusy
  input  wci_m_7_SThreadBusy;

  // action method wci_m_7_sFlag
  input  [1 : 0] wci_m_7_SFlag;

  // value method wci_m_7_mFlag
  output [1 : 0] wci_m_7_MFlag;

  // value method wci_m_8_mCmd
  output [2 : 0] wci_m_8_MCmd;

  // value method wci_m_8_mAddrSpace
  output wci_m_8_MAddrSpace;

  // value method wci_m_8_mByteEn
  output [3 : 0] wci_m_8_MByteEn;

  // value method wci_m_8_mAddr
  output [31 : 0] wci_m_8_MAddr;

  // value method wci_m_8_mData
  output [31 : 0] wci_m_8_MData;

  // action method wci_m_8_sResp
  input  [1 : 0] wci_m_8_SResp;

  // action method wci_m_8_sData
  input  [31 : 0] wci_m_8_SData;

  // action method wci_m_8_sThreadBusy
  input  wci_m_8_SThreadBusy;

  // action method wci_m_8_sFlag
  input  [1 : 0] wci_m_8_SFlag;

  // value method wci_m_8_mFlag
  output [1 : 0] wci_m_8_MFlag;

  // value method wci_m_9_mCmd
  output [2 : 0] wci_m_9_MCmd;

  // value method wci_m_9_mAddrSpace
  output wci_m_9_MAddrSpace;

  // value method wci_m_9_mByteEn
  output [3 : 0] wci_m_9_MByteEn;

  // value method wci_m_9_mAddr
  output [31 : 0] wci_m_9_MAddr;

  // value method wci_m_9_mData
  output [31 : 0] wci_m_9_MData;

  // action method wci_m_9_sResp
  input  [1 : 0] wci_m_9_SResp;

  // action method wci_m_9_sData
  input  [31 : 0] wci_m_9_SData;

  // action method wci_m_9_sThreadBusy
  input  wci_m_9_SThreadBusy;

  // action method wci_m_9_sFlag
  input  [1 : 0] wci_m_9_SFlag;

  // value method wci_m_9_mFlag
  output [1 : 0] wci_m_9_MFlag;

  // value method wci_m_10_mCmd
  output [2 : 0] wci_m_10_MCmd;

  // value method wci_m_10_mAddrSpace
  output wci_m_10_MAddrSpace;

  // value method wci_m_10_mByteEn
  output [3 : 0] wci_m_10_MByteEn;

  // value method wci_m_10_mAddr
  output [31 : 0] wci_m_10_MAddr;

  // value method wci_m_10_mData
  output [31 : 0] wci_m_10_MData;

  // action method wci_m_10_sResp
  input  [1 : 0] wci_m_10_SResp;

  // action method wci_m_10_sData
  input  [31 : 0] wci_m_10_SData;

  // action method wci_m_10_sThreadBusy
  input  wci_m_10_SThreadBusy;

  // action method wci_m_10_sFlag
  input  [1 : 0] wci_m_10_SFlag;

  // value method wci_m_10_mFlag
  output [1 : 0] wci_m_10_MFlag;

  // value method wci_m_11_mCmd
  output [2 : 0] wci_m_11_MCmd;

  // value method wci_m_11_mAddrSpace
  output wci_m_11_MAddrSpace;

  // value method wci_m_11_mByteEn
  output [3 : 0] wci_m_11_MByteEn;

  // value method wci_m_11_mAddr
  output [31 : 0] wci_m_11_MAddr;

  // value method wci_m_11_mData
  output [31 : 0] wci_m_11_MData;

  // action method wci_m_11_sResp
  input  [1 : 0] wci_m_11_SResp;

  // action method wci_m_11_sData
  input  [31 : 0] wci_m_11_SData;

  // action method wci_m_11_sThreadBusy
  input  wci_m_11_SThreadBusy;

  // action method wci_m_11_sFlag
  input  [1 : 0] wci_m_11_SFlag;

  // value method wci_m_11_mFlag
  output [1 : 0] wci_m_11_MFlag;

  // value method wci_m_12_mCmd
  output [2 : 0] wci_m_12_MCmd;

  // value method wci_m_12_mAddrSpace
  output wci_m_12_MAddrSpace;

  // value method wci_m_12_mByteEn
  output [3 : 0] wci_m_12_MByteEn;

  // value method wci_m_12_mAddr
  output [31 : 0] wci_m_12_MAddr;

  // value method wci_m_12_mData
  output [31 : 0] wci_m_12_MData;

  // action method wci_m_12_sResp
  input  [1 : 0] wci_m_12_SResp;

  // action method wci_m_12_sData
  input  [31 : 0] wci_m_12_SData;

  // action method wci_m_12_sThreadBusy
  input  wci_m_12_SThreadBusy;

  // action method wci_m_12_sFlag
  input  [1 : 0] wci_m_12_SFlag;

  // value method wci_m_12_mFlag
  output [1 : 0] wci_m_12_MFlag;

  // action method wmiDP0_mCmd
  input  [2 : 0] wmiDP0_MCmd;

  // action method wmiDP0_mReqLast
  input  wmiDP0_MReqLast;

  // action method wmiDP0_mReqInfo
  input  wmiDP0_MReqInfo;

  // action method wmiDP0_mAddrSpace
  input  wmiDP0_MAddrSpace;

  // action method wmiDP0_mAddr
  input  [13 : 0] wmiDP0_MAddr;

  // action method wmiDP0_mBurstLength
  input  [11 : 0] wmiDP0_MBurstLength;

  // action method wmiDP0_mDataValid
  input  wmiDP0_MDataValid;

  // action method wmiDP0_mDataLast
  input  wmiDP0_MDataLast;

  // action method wmiDP0_mData
  input  [127 : 0] wmiDP0_MData;

  // action method wmiDP0_mDataInfo

  // action method wmiDP0_mDataByteEn
  input  [15 : 0] wmiDP0_MDataByteEn;

  // value method wmiDP0_sResp
  output [1 : 0] wmiDP0_SResp;

  // value method wmiDP0_sData
  output [127 : 0] wmiDP0_SData;

  // value method wmiDP0_sThreadBusy
  output wmiDP0_SThreadBusy;

  // value method wmiDP0_sDataThreadBusy
  output wmiDP0_SDataThreadBusy;

  // value method wmiDP0_sRespLast
  output wmiDP0_SRespLast;

  // value method wmiDP0_sFlag
  output [31 : 0] wmiDP0_SFlag;

  // action method wmiDP0_mFlag
  input  [31 : 0] wmiDP0_arg_mFlag;

  // value method wmiDP0_sReset_n
  output wmiDP0_SReset_n;

  // action method wmiDP0_mReset_n
  input  wmiDP0_MReset_n;

  // action method wmiDP1_mCmd
  input  [2 : 0] wmiDP1_MCmd;

  // action method wmiDP1_mReqLast
  input  wmiDP1_MReqLast;

  // action method wmiDP1_mReqInfo
  input  wmiDP1_MReqInfo;

  // action method wmiDP1_mAddrSpace
  input  wmiDP1_MAddrSpace;

  // action method wmiDP1_mAddr
  input  [13 : 0] wmiDP1_MAddr;

  // action method wmiDP1_mBurstLength
  input  [11 : 0] wmiDP1_MBurstLength;

  // action method wmiDP1_mDataValid
  input  wmiDP1_MDataValid;

  // action method wmiDP1_mDataLast
  input  wmiDP1_MDataLast;

  // action method wmiDP1_mData
  input  [127 : 0] wmiDP1_MData;

  // action method wmiDP1_mDataInfo

  // action method wmiDP1_mDataByteEn
  input  [15 : 0] wmiDP1_MDataByteEn;

  // value method wmiDP1_sResp
  output [1 : 0] wmiDP1_SResp;

  // value method wmiDP1_sData
  output [127 : 0] wmiDP1_SData;

  // value method wmiDP1_sThreadBusy
  output wmiDP1_SThreadBusy;

  // value method wmiDP1_sDataThreadBusy
  output wmiDP1_SDataThreadBusy;

  // value method wmiDP1_sRespLast
  output wmiDP1_SRespLast;

  // value method wmiDP1_sFlag
  output [31 : 0] wmiDP1_SFlag;

  // action method wmiDP1_mFlag
  input  [31 : 0] wmiDP1_arg_mFlag;

  // value method wmiDP1_sReset_n
  output wmiDP1_SReset_n;

  // action method wmiDP1_mReset_n
  input  wmiDP1_MReset_n;

  // value method cpNow
  output [63 : 0] cpNow;
  output RDY_cpNow;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // action method uuid
  input  [511 : 0] uuid_arg;
  input  EN_uuid;
  output RDY_uuid;

  // output resets
  output RST_N_wci_m_0;
  output RST_N_wci_m_1;
  output RST_N_wci_m_2;
  output RST_N_wci_m_3;
  output RST_N_wci_m_4;
  output RST_N_wci_m_5;
  output RST_N_wci_m_6;
  output RST_N_wci_m_7;
  output RST_N_wci_m_8;
  output RST_N_wci_m_9;
  output RST_N_wci_m_10;
  output RST_N_wci_m_11;
  output RST_N_wci_m_12;

  // signals for module outputs
  wire [152 : 0] server_response_get;
  wire [127 : 0] wmiDP0_SData, wmiDP1_SData;
  wire [63 : 0] cpNow;
  wire [39 : 0] cpServer_response_get;
  wire [31 : 0] wci_m_0_MAddr,
		wci_m_0_MData,
		wci_m_10_MAddr,
		wci_m_10_MData,
		wci_m_11_MAddr,
		wci_m_11_MData,
		wci_m_12_MAddr,
		wci_m_12_MData,
		wci_m_1_MAddr,
		wci_m_1_MData,
		wci_m_2_MAddr,
		wci_m_2_MData,
		wci_m_3_MAddr,
		wci_m_3_MData,
		wci_m_4_MAddr,
		wci_m_4_MData,
		wci_m_5_MAddr,
		wci_m_5_MData,
		wci_m_6_MAddr,
		wci_m_6_MData,
		wci_m_7_MAddr,
		wci_m_7_MData,
		wci_m_8_MAddr,
		wci_m_8_MData,
		wci_m_9_MAddr,
		wci_m_9_MData,
		wmiDP0_SFlag,
		wmiDP1_SFlag;
  wire [3 : 0] wci_m_0_MByteEn,
	       wci_m_10_MByteEn,
	       wci_m_11_MByteEn,
	       wci_m_12_MByteEn,
	       wci_m_1_MByteEn,
	       wci_m_2_MByteEn,
	       wci_m_3_MByteEn,
	       wci_m_4_MByteEn,
	       wci_m_5_MByteEn,
	       wci_m_6_MByteEn,
	       wci_m_7_MByteEn,
	       wci_m_8_MByteEn,
	       wci_m_9_MByteEn;
  wire [2 : 0] wci_m_0_MCmd,
	       wci_m_10_MCmd,
	       wci_m_11_MCmd,
	       wci_m_12_MCmd,
	       wci_m_1_MCmd,
	       wci_m_2_MCmd,
	       wci_m_3_MCmd,
	       wci_m_4_MCmd,
	       wci_m_5_MCmd,
	       wci_m_6_MCmd,
	       wci_m_7_MCmd,
	       wci_m_8_MCmd,
	       wci_m_9_MCmd;
  wire [1 : 0] led,
	       wci_m_0_MFlag,
	       wci_m_10_MFlag,
	       wci_m_11_MFlag,
	       wci_m_12_MFlag,
	       wci_m_1_MFlag,
	       wci_m_2_MFlag,
	       wci_m_3_MFlag,
	       wci_m_4_MFlag,
	       wci_m_5_MFlag,
	       wci_m_6_MFlag,
	       wci_m_7_MFlag,
	       wci_m_8_MFlag,
	       wci_m_9_MFlag,
	       wmiDP0_SResp,
	       wmiDP1_SResp;
  wire RDY_cpNow,
       RDY_cpServer_request_put,
       RDY_cpServer_response_get,
       RDY_server_request_put,
       RDY_server_response_get,
       RDY_uuid,
       RST_N_wci_m_0,
       RST_N_wci_m_1,
       RST_N_wci_m_10,
       RST_N_wci_m_11,
       RST_N_wci_m_12,
       RST_N_wci_m_2,
       RST_N_wci_m_3,
       RST_N_wci_m_4,
       RST_N_wci_m_5,
       RST_N_wci_m_6,
       RST_N_wci_m_7,
       RST_N_wci_m_8,
       RST_N_wci_m_9,
       gps_ppsSyncOut,
       wci_m_0_MAddrSpace,
       wci_m_10_MAddrSpace,
       wci_m_11_MAddrSpace,
       wci_m_12_MAddrSpace,
       wci_m_1_MAddrSpace,
       wci_m_2_MAddrSpace,
       wci_m_3_MAddrSpace,
       wci_m_4_MAddrSpace,
       wci_m_5_MAddrSpace,
       wci_m_6_MAddrSpace,
       wci_m_7_MAddrSpace,
       wci_m_8_MAddrSpace,
       wci_m_9_MAddrSpace,
       wmiDP0_SDataThreadBusy,
       wmiDP0_SReset_n,
       wmiDP0_SRespLast,
       wmiDP0_SThreadBusy,
       wmiDP1_SDataThreadBusy,
       wmiDP1_SReset_n,
       wmiDP1_SRespLast,
       wmiDP1_SThreadBusy;

  // register noc_chompCnt
  reg [7 : 0] noc_chompCnt;
  wire [7 : 0] noc_chompCnt_D_IN;
  wire noc_chompCnt_EN;

  // ports of submodule cp
  wire [511 : 0] cp_uuid_arg;
  wire [63 : 0] cp_cpNow;
  wire [58 : 0] cp_server_request_put;
  wire [39 : 0] cp_server_response_get;
  wire [31 : 0] cp_wci_Vm_0_MAddr,
		cp_wci_Vm_0_MData,
		cp_wci_Vm_0_SData,
		cp_wci_Vm_10_MAddr,
		cp_wci_Vm_10_MData,
		cp_wci_Vm_10_SData,
		cp_wci_Vm_11_MAddr,
		cp_wci_Vm_11_MData,
		cp_wci_Vm_11_SData,
		cp_wci_Vm_12_MAddr,
		cp_wci_Vm_12_MData,
		cp_wci_Vm_12_SData,
		cp_wci_Vm_13_MAddr,
		cp_wci_Vm_13_MData,
		cp_wci_Vm_13_SData,
		cp_wci_Vm_14_MAddr,
		cp_wci_Vm_14_MData,
		cp_wci_Vm_14_SData,
		cp_wci_Vm_1_MAddr,
		cp_wci_Vm_1_MData,
		cp_wci_Vm_1_SData,
		cp_wci_Vm_2_MAddr,
		cp_wci_Vm_2_MData,
		cp_wci_Vm_2_SData,
		cp_wci_Vm_3_MAddr,
		cp_wci_Vm_3_MData,
		cp_wci_Vm_3_SData,
		cp_wci_Vm_4_MAddr,
		cp_wci_Vm_4_MData,
		cp_wci_Vm_4_SData,
		cp_wci_Vm_5_MAddr,
		cp_wci_Vm_5_MData,
		cp_wci_Vm_5_SData,
		cp_wci_Vm_6_MAddr,
		cp_wci_Vm_6_MData,
		cp_wci_Vm_6_SData,
		cp_wci_Vm_7_MAddr,
		cp_wci_Vm_7_MData,
		cp_wci_Vm_7_SData,
		cp_wci_Vm_8_MAddr,
		cp_wci_Vm_8_MData,
		cp_wci_Vm_8_SData,
		cp_wci_Vm_9_MAddr,
		cp_wci_Vm_9_MData,
		cp_wci_Vm_9_SData;
  wire [3 : 0] cp_wci_Vm_0_MByteEn,
	       cp_wci_Vm_10_MByteEn,
	       cp_wci_Vm_11_MByteEn,
	       cp_wci_Vm_12_MByteEn,
	       cp_wci_Vm_13_MByteEn,
	       cp_wci_Vm_14_MByteEn,
	       cp_wci_Vm_1_MByteEn,
	       cp_wci_Vm_2_MByteEn,
	       cp_wci_Vm_3_MByteEn,
	       cp_wci_Vm_4_MByteEn,
	       cp_wci_Vm_5_MByteEn,
	       cp_wci_Vm_6_MByteEn,
	       cp_wci_Vm_7_MByteEn,
	       cp_wci_Vm_8_MByteEn,
	       cp_wci_Vm_9_MByteEn;
  wire [2 : 0] cp_switch_x,
	       cp_wci_Vm_0_MCmd,
	       cp_wci_Vm_10_MCmd,
	       cp_wci_Vm_11_MCmd,
	       cp_wci_Vm_12_MCmd,
	       cp_wci_Vm_13_MCmd,
	       cp_wci_Vm_14_MCmd,
	       cp_wci_Vm_1_MCmd,
	       cp_wci_Vm_2_MCmd,
	       cp_wci_Vm_3_MCmd,
	       cp_wci_Vm_4_MCmd,
	       cp_wci_Vm_5_MCmd,
	       cp_wci_Vm_6_MCmd,
	       cp_wci_Vm_7_MCmd,
	       cp_wci_Vm_8_MCmd,
	       cp_wci_Vm_9_MCmd;
  wire [1 : 0] cp_led,
	       cp_wci_Vm_0_MFlag,
	       cp_wci_Vm_0_SFlag,
	       cp_wci_Vm_0_SResp,
	       cp_wci_Vm_10_MFlag,
	       cp_wci_Vm_10_SFlag,
	       cp_wci_Vm_10_SResp,
	       cp_wci_Vm_11_MFlag,
	       cp_wci_Vm_11_SFlag,
	       cp_wci_Vm_11_SResp,
	       cp_wci_Vm_12_MFlag,
	       cp_wci_Vm_12_SFlag,
	       cp_wci_Vm_12_SResp,
	       cp_wci_Vm_13_MFlag,
	       cp_wci_Vm_13_SFlag,
	       cp_wci_Vm_13_SResp,
	       cp_wci_Vm_14_MFlag,
	       cp_wci_Vm_14_SFlag,
	       cp_wci_Vm_14_SResp,
	       cp_wci_Vm_1_MFlag,
	       cp_wci_Vm_1_SFlag,
	       cp_wci_Vm_1_SResp,
	       cp_wci_Vm_2_MFlag,
	       cp_wci_Vm_2_SFlag,
	       cp_wci_Vm_2_SResp,
	       cp_wci_Vm_3_MFlag,
	       cp_wci_Vm_3_SFlag,
	       cp_wci_Vm_3_SResp,
	       cp_wci_Vm_4_MFlag,
	       cp_wci_Vm_4_SFlag,
	       cp_wci_Vm_4_SResp,
	       cp_wci_Vm_5_MFlag,
	       cp_wci_Vm_5_SFlag,
	       cp_wci_Vm_5_SResp,
	       cp_wci_Vm_6_MFlag,
	       cp_wci_Vm_6_SFlag,
	       cp_wci_Vm_6_SResp,
	       cp_wci_Vm_7_MFlag,
	       cp_wci_Vm_7_SFlag,
	       cp_wci_Vm_7_SResp,
	       cp_wci_Vm_8_MFlag,
	       cp_wci_Vm_8_SFlag,
	       cp_wci_Vm_8_SResp,
	       cp_wci_Vm_9_MFlag,
	       cp_wci_Vm_9_SFlag,
	       cp_wci_Vm_9_SResp;
  wire cp_EN_server_request_put,
       cp_EN_server_response_get,
       cp_RDY_server_request_put,
       cp_RDY_server_response_get,
       cp_RST_N_wci_Vm_0,
       cp_RST_N_wci_Vm_1,
       cp_RST_N_wci_Vm_10,
       cp_RST_N_wci_Vm_11,
       cp_RST_N_wci_Vm_12,
       cp_RST_N_wci_Vm_13,
       cp_RST_N_wci_Vm_14,
       cp_RST_N_wci_Vm_2,
       cp_RST_N_wci_Vm_3,
       cp_RST_N_wci_Vm_4,
       cp_RST_N_wci_Vm_5,
       cp_RST_N_wci_Vm_6,
       cp_RST_N_wci_Vm_7,
       cp_RST_N_wci_Vm_8,
       cp_RST_N_wci_Vm_9,
       cp_gps_ppsSyncIn_x,
       cp_gps_ppsSyncOut,
       cp_wci_Vm_0_MAddrSpace,
       cp_wci_Vm_0_SThreadBusy,
       cp_wci_Vm_10_MAddrSpace,
       cp_wci_Vm_10_SThreadBusy,
       cp_wci_Vm_11_MAddrSpace,
       cp_wci_Vm_11_SThreadBusy,
       cp_wci_Vm_12_MAddrSpace,
       cp_wci_Vm_12_SThreadBusy,
       cp_wci_Vm_13_MAddrSpace,
       cp_wci_Vm_13_SThreadBusy,
       cp_wci_Vm_14_MAddrSpace,
       cp_wci_Vm_14_SThreadBusy,
       cp_wci_Vm_1_MAddrSpace,
       cp_wci_Vm_1_SThreadBusy,
       cp_wci_Vm_2_MAddrSpace,
       cp_wci_Vm_2_SThreadBusy,
       cp_wci_Vm_3_MAddrSpace,
       cp_wci_Vm_3_SThreadBusy,
       cp_wci_Vm_4_MAddrSpace,
       cp_wci_Vm_4_SThreadBusy,
       cp_wci_Vm_5_MAddrSpace,
       cp_wci_Vm_5_SThreadBusy,
       cp_wci_Vm_6_MAddrSpace,
       cp_wci_Vm_6_SThreadBusy,
       cp_wci_Vm_7_MAddrSpace,
       cp_wci_Vm_7_SThreadBusy,
       cp_wci_Vm_8_MAddrSpace,
       cp_wci_Vm_8_SThreadBusy,
       cp_wci_Vm_9_MAddrSpace,
       cp_wci_Vm_9_SThreadBusy;

  // ports of submodule cpMux_aActF
  wire cpMux_aActF_CLR,
       cpMux_aActF_DEQ,
       cpMux_aActF_D_IN,
       cpMux_aActF_D_OUT,
       cpMux_aActF_EMPTY_N,
       cpMux_aActF_ENQ,
       cpMux_aActF_FULL_N;

  // ports of submodule cpMux_cpReqF
  wire [58 : 0] cpMux_cpReqF_D_IN, cpMux_cpReqF_D_OUT;
  wire cpMux_cpReqF_CLR,
       cpMux_cpReqF_DEQ,
       cpMux_cpReqF_EMPTY_N,
       cpMux_cpReqF_ENQ,
       cpMux_cpReqF_FULL_N;

  // ports of submodule cpMux_cpRespF
  wire [39 : 0] cpMux_cpRespF_D_IN, cpMux_cpRespF_D_OUT;
  wire cpMux_cpRespF_CLR,
       cpMux_cpRespF_DEQ,
       cpMux_cpRespF_EMPTY_N,
       cpMux_cpRespF_ENQ,
       cpMux_cpRespF_FULL_N;

  // ports of submodule cpMux_reqAF
  wire [58 : 0] cpMux_reqAF_D_IN, cpMux_reqAF_D_OUT;
  wire cpMux_reqAF_CLR,
       cpMux_reqAF_DEQ,
       cpMux_reqAF_EMPTY_N,
       cpMux_reqAF_ENQ,
       cpMux_reqAF_FULL_N;

  // ports of submodule cpMux_reqBF
  wire [58 : 0] cpMux_reqBF_D_IN, cpMux_reqBF_D_OUT;
  wire cpMux_reqBF_CLR,
       cpMux_reqBF_DEQ,
       cpMux_reqBF_EMPTY_N,
       cpMux_reqBF_ENQ,
       cpMux_reqBF_FULL_N;

  // ports of submodule cpMux_respAF
  wire [39 : 0] cpMux_respAF_D_IN, cpMux_respAF_D_OUT;
  wire cpMux_respAF_CLR,
       cpMux_respAF_DEQ,
       cpMux_respAF_EMPTY_N,
       cpMux_respAF_ENQ,
       cpMux_respAF_FULL_N;

  // ports of submodule cpMux_respBF
  wire [39 : 0] cpMux_respBF_D_IN, cpMux_respBF_D_OUT;
  wire cpMux_respBF_CLR,
       cpMux_respBF_DEQ,
       cpMux_respBF_EMPTY_N,
       cpMux_respBF_ENQ,
       cpMux_respBF_FULL_N;

  // ports of submodule cpTlp
  wire [152 : 0] cpTlp_server_request_put, cpTlp_server_response_get;
  wire [58 : 0] cpTlp_client_request_get;
  wire [39 : 0] cpTlp_client_response_put;
  wire cpTlp_EN_client_request_get,
       cpTlp_EN_client_response_put,
       cpTlp_EN_server_request_put,
       cpTlp_EN_server_response_get,
       cpTlp_RDY_client_request_get,
       cpTlp_RDY_client_response_put,
       cpTlp_RDY_server_request_put,
       cpTlp_RDY_server_response_get;

  // ports of submodule dp0
  wire [152 : 0] dp0_server_request_put, dp0_server_response_get;
  wire [127 : 0] dp0_wmiS0_MData, dp0_wmiS0_SData;
  wire [66 : 0] dp0_wti_s_req;
  wire [31 : 0] dp0_wci_s_MAddr,
		dp0_wci_s_MData,
		dp0_wci_s_SData,
		dp0_wmiS0_SFlag,
		dp0_wmiS0_arg_mFlag;
  wire [15 : 0] dp0_wmiS0_MDataByteEn;
  wire [13 : 0] dp0_wmiS0_MAddr;
  wire [11 : 0] dp0_wmiS0_MBurstLength;
  wire [3 : 0] dp0_wci_s_MByteEn;
  wire [2 : 0] dp0_wci_s_MCmd, dp0_wmiS0_MCmd;
  wire [1 : 0] dp0_wci_s_MFlag,
	       dp0_wci_s_SFlag,
	       dp0_wci_s_SResp,
	       dp0_wmiS0_SResp;
  wire dp0_EN_server_request_put,
       dp0_EN_server_response_get,
       dp0_RDY_server_request_put,
       dp0_RDY_server_response_get,
       dp0_wci_s_MAddrSpace,
       dp0_wci_s_SThreadBusy,
       dp0_wmiS0_MAddrSpace,
       dp0_wmiS0_MDataLast,
       dp0_wmiS0_MDataValid,
       dp0_wmiS0_MReqInfo,
       dp0_wmiS0_MReqLast,
       dp0_wmiS0_MReset_n,
       dp0_wmiS0_SDataThreadBusy,
       dp0_wmiS0_SReset_n,
       dp0_wmiS0_SRespLast,
       dp0_wmiS0_SThreadBusy,
       dp0_wti_s_SReset_n,
       dp0_wti_s_SThreadBusy;

  // ports of submodule dp1
  wire [152 : 0] dp1_server_request_put, dp1_server_response_get;
  wire [127 : 0] dp1_wmiS0_MData, dp1_wmiS0_SData;
  wire [66 : 0] dp1_wti_s_req;
  wire [31 : 0] dp1_wci_s_MAddr,
		dp1_wci_s_MData,
		dp1_wci_s_SData,
		dp1_wmiS0_SFlag,
		dp1_wmiS0_arg_mFlag;
  wire [15 : 0] dp1_wmiS0_MDataByteEn;
  wire [13 : 0] dp1_wmiS0_MAddr;
  wire [11 : 0] dp1_wmiS0_MBurstLength;
  wire [3 : 0] dp1_wci_s_MByteEn;
  wire [2 : 0] dp1_wci_s_MCmd, dp1_wmiS0_MCmd;
  wire [1 : 0] dp1_wci_s_MFlag,
	       dp1_wci_s_SFlag,
	       dp1_wci_s_SResp,
	       dp1_wmiS0_SResp;
  wire dp1_EN_server_request_put,
       dp1_EN_server_response_get,
       dp1_RDY_server_request_put,
       dp1_RDY_server_response_get,
       dp1_wci_s_MAddrSpace,
       dp1_wci_s_SThreadBusy,
       dp1_wmiS0_MAddrSpace,
       dp1_wmiS0_MDataLast,
       dp1_wmiS0_MDataValid,
       dp1_wmiS0_MReqInfo,
       dp1_wmiS0_MReqLast,
       dp1_wmiS0_MReset_n,
       dp1_wmiS0_SDataThreadBusy,
       dp1_wmiS0_SReset_n,
       dp1_wmiS0_SRespLast,
       dp1_wmiS0_SThreadBusy,
       dp1_wti_s_SReset_n,
       dp1_wti_s_SThreadBusy;

  // ports of submodule itc0
  wire [66 : 0] itc0_wti_m_req;
  wire [63 : 0] itc0_gpsTime_arg;
  wire itc0_EN_gpsTime,
       itc0_RDY_gpsTime,
       itc0_wti_m_SReset_n,
       itc0_wti_m_SThreadBusy;

  // ports of submodule itc1
  wire [66 : 0] itc1_wti_m_req;
  wire [63 : 0] itc1_gpsTime_arg;
  wire itc1_EN_gpsTime,
       itc1_RDY_gpsTime,
       itc1_wti_m_SReset_n,
       itc1_wti_m_SThreadBusy;

  // ports of submodule noc_sm0
  wire [152 : 0] noc_sm0_c0_request_get,
		 noc_sm0_c0_response_put,
		 noc_sm0_c1_request_get,
		 noc_sm0_c1_response_put,
		 noc_sm0_s_request_put,
		 noc_sm0_s_response_get;
  wire noc_sm0_EN_c0_request_get,
       noc_sm0_EN_c0_response_put,
       noc_sm0_EN_c1_request_get,
       noc_sm0_EN_c1_response_put,
       noc_sm0_EN_s_request_put,
       noc_sm0_EN_s_response_get,
       noc_sm0_RDY_c0_request_get,
       noc_sm0_RDY_c0_response_put,
       noc_sm0_RDY_c1_request_get,
       noc_sm0_RDY_c1_response_put,
       noc_sm0_RDY_s_request_put,
       noc_sm0_RDY_s_response_get;

  // ports of submodule noc_sm1
  wire [152 : 0] noc_sm1_c0_request_get,
		 noc_sm1_c0_response_put,
		 noc_sm1_c1_request_get,
		 noc_sm1_c1_response_put,
		 noc_sm1_s_request_put,
		 noc_sm1_s_response_get;
  wire noc_sm1_EN_c0_request_get,
       noc_sm1_EN_c0_response_put,
       noc_sm1_EN_c1_request_get,
       noc_sm1_EN_c1_response_put,
       noc_sm1_EN_s_request_put,
       noc_sm1_EN_s_response_get,
       noc_sm1_RDY_c0_request_get,
       noc_sm1_RDY_c0_response_put,
       noc_sm1_RDY_c1_request_get,
       noc_sm1_RDY_c1_response_put,
       noc_sm1_RDY_s_request_put,
       noc_sm1_RDY_s_response_get;

  // ports of submodule noc_sm2
  wire [152 : 0] noc_sm2_c0_request_get,
		 noc_sm2_c0_response_put,
		 noc_sm2_c1_response_put,
		 noc_sm2_s_request_put,
		 noc_sm2_s_response_get;
  wire noc_sm2_EN_c0_request_get,
       noc_sm2_EN_c0_response_put,
       noc_sm2_EN_c1_request_get,
       noc_sm2_EN_c1_response_put,
       noc_sm2_EN_s_request_put,
       noc_sm2_EN_s_response_get,
       noc_sm2_RDY_c0_request_get,
       noc_sm2_RDY_c0_response_put,
       noc_sm2_RDY_c1_request_get,
       noc_sm2_RDY_s_request_put,
       noc_sm2_RDY_s_response_get;

  // rule scheduling signals
  wire WILL_FIRE_RL_cpMux_request_portA,
       WILL_FIRE_RL_cpMux_request_portB,
       WILL_FIRE_RL_cpMux_response_cp;

  // inputs to muxes for submodule ports
  wire MUX_cpMux_aActF_enq_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h1839;
  wire [15 : 0] x__h2806, x__h3100;
  wire cpMux_aActF_i_notEmpty__1_AND_IF_cpMux_aActF_f_ETC___d46;

  // output resets
  assign RST_N_wci_m_0 = cp_RST_N_wci_Vm_0 ;
  assign RST_N_wci_m_1 = cp_RST_N_wci_Vm_1 ;
  assign RST_N_wci_m_2 = cp_RST_N_wci_Vm_2 ;
  assign RST_N_wci_m_3 = cp_RST_N_wci_Vm_3 ;
  assign RST_N_wci_m_4 = cp_RST_N_wci_Vm_4 ;
  assign RST_N_wci_m_5 = cp_RST_N_wci_Vm_5 ;
  assign RST_N_wci_m_6 = cp_RST_N_wci_Vm_6 ;
  assign RST_N_wci_m_7 = cp_RST_N_wci_Vm_7 ;
  assign RST_N_wci_m_8 = cp_RST_N_wci_Vm_8 ;
  assign RST_N_wci_m_9 = cp_RST_N_wci_Vm_9 ;
  assign RST_N_wci_m_10 = cp_RST_N_wci_Vm_10 ;
  assign RST_N_wci_m_11 = cp_RST_N_wci_Vm_11 ;
  assign RST_N_wci_m_12 = cp_RST_N_wci_Vm_12 ;

  // action method server_request_put
  assign RDY_server_request_put = noc_sm0_RDY_s_request_put ;

  // actionvalue method server_response_get
  assign server_response_get = noc_sm0_s_response_get ;
  assign RDY_server_response_get = noc_sm0_RDY_s_response_get ;

  // action method cpServer_request_put
  assign RDY_cpServer_request_put = cpMux_reqBF_FULL_N ;

  // actionvalue method cpServer_response_get
  assign cpServer_response_get = cpMux_respBF_D_OUT ;
  assign RDY_cpServer_response_get = cpMux_respBF_EMPTY_N ;

  // value method led
  assign led = cp_led ;

  // value method wci_m_0_mCmd
  assign wci_m_0_MCmd = cp_wci_Vm_0_MCmd ;

  // value method wci_m_0_mAddrSpace
  assign wci_m_0_MAddrSpace = cp_wci_Vm_0_MAddrSpace ;

  // value method wci_m_0_mByteEn
  assign wci_m_0_MByteEn = cp_wci_Vm_0_MByteEn ;

  // value method wci_m_0_mAddr
  assign wci_m_0_MAddr = cp_wci_Vm_0_MAddr ;

  // value method wci_m_0_mData
  assign wci_m_0_MData = cp_wci_Vm_0_MData ;

  // value method wci_m_0_mFlag
  assign wci_m_0_MFlag = cp_wci_Vm_0_MFlag ;

  // value method wci_m_1_mCmd
  assign wci_m_1_MCmd = cp_wci_Vm_1_MCmd ;

  // value method wci_m_1_mAddrSpace
  assign wci_m_1_MAddrSpace = cp_wci_Vm_1_MAddrSpace ;

  // value method wci_m_1_mByteEn
  assign wci_m_1_MByteEn = cp_wci_Vm_1_MByteEn ;

  // value method wci_m_1_mAddr
  assign wci_m_1_MAddr = cp_wci_Vm_1_MAddr ;

  // value method wci_m_1_mData
  assign wci_m_1_MData = cp_wci_Vm_1_MData ;

  // value method wci_m_1_mFlag
  assign wci_m_1_MFlag = cp_wci_Vm_1_MFlag ;

  // value method wci_m_2_mCmd
  assign wci_m_2_MCmd = cp_wci_Vm_2_MCmd ;

  // value method wci_m_2_mAddrSpace
  assign wci_m_2_MAddrSpace = cp_wci_Vm_2_MAddrSpace ;

  // value method wci_m_2_mByteEn
  assign wci_m_2_MByteEn = cp_wci_Vm_2_MByteEn ;

  // value method wci_m_2_mAddr
  assign wci_m_2_MAddr = cp_wci_Vm_2_MAddr ;

  // value method wci_m_2_mData
  assign wci_m_2_MData = cp_wci_Vm_2_MData ;

  // value method wci_m_2_mFlag
  assign wci_m_2_MFlag = cp_wci_Vm_2_MFlag ;

  // value method wci_m_3_mCmd
  assign wci_m_3_MCmd = cp_wci_Vm_3_MCmd ;

  // value method wci_m_3_mAddrSpace
  assign wci_m_3_MAddrSpace = cp_wci_Vm_3_MAddrSpace ;

  // value method wci_m_3_mByteEn
  assign wci_m_3_MByteEn = cp_wci_Vm_3_MByteEn ;

  // value method wci_m_3_mAddr
  assign wci_m_3_MAddr = cp_wci_Vm_3_MAddr ;

  // value method wci_m_3_mData
  assign wci_m_3_MData = cp_wci_Vm_3_MData ;

  // value method wci_m_3_mFlag
  assign wci_m_3_MFlag = cp_wci_Vm_3_MFlag ;

  // value method wci_m_4_mCmd
  assign wci_m_4_MCmd = cp_wci_Vm_4_MCmd ;

  // value method wci_m_4_mAddrSpace
  assign wci_m_4_MAddrSpace = cp_wci_Vm_4_MAddrSpace ;

  // value method wci_m_4_mByteEn
  assign wci_m_4_MByteEn = cp_wci_Vm_4_MByteEn ;

  // value method wci_m_4_mAddr
  assign wci_m_4_MAddr = cp_wci_Vm_4_MAddr ;

  // value method wci_m_4_mData
  assign wci_m_4_MData = cp_wci_Vm_4_MData ;

  // value method wci_m_4_mFlag
  assign wci_m_4_MFlag = cp_wci_Vm_4_MFlag ;

  // value method wci_m_5_mCmd
  assign wci_m_5_MCmd = cp_wci_Vm_5_MCmd ;

  // value method wci_m_5_mAddrSpace
  assign wci_m_5_MAddrSpace = cp_wci_Vm_5_MAddrSpace ;

  // value method wci_m_5_mByteEn
  assign wci_m_5_MByteEn = cp_wci_Vm_5_MByteEn ;

  // value method wci_m_5_mAddr
  assign wci_m_5_MAddr = cp_wci_Vm_5_MAddr ;

  // value method wci_m_5_mData
  assign wci_m_5_MData = cp_wci_Vm_5_MData ;

  // value method wci_m_5_mFlag
  assign wci_m_5_MFlag = cp_wci_Vm_5_MFlag ;

  // value method wci_m_6_mCmd
  assign wci_m_6_MCmd = cp_wci_Vm_6_MCmd ;

  // value method wci_m_6_mAddrSpace
  assign wci_m_6_MAddrSpace = cp_wci_Vm_6_MAddrSpace ;

  // value method wci_m_6_mByteEn
  assign wci_m_6_MByteEn = cp_wci_Vm_6_MByteEn ;

  // value method wci_m_6_mAddr
  assign wci_m_6_MAddr = cp_wci_Vm_6_MAddr ;

  // value method wci_m_6_mData
  assign wci_m_6_MData = cp_wci_Vm_6_MData ;

  // value method wci_m_6_mFlag
  assign wci_m_6_MFlag = cp_wci_Vm_6_MFlag ;

  // value method wci_m_7_mCmd
  assign wci_m_7_MCmd = cp_wci_Vm_7_MCmd ;

  // value method wci_m_7_mAddrSpace
  assign wci_m_7_MAddrSpace = cp_wci_Vm_7_MAddrSpace ;

  // value method wci_m_7_mByteEn
  assign wci_m_7_MByteEn = cp_wci_Vm_7_MByteEn ;

  // value method wci_m_7_mAddr
  assign wci_m_7_MAddr = cp_wci_Vm_7_MAddr ;

  // value method wci_m_7_mData
  assign wci_m_7_MData = cp_wci_Vm_7_MData ;

  // value method wci_m_7_mFlag
  assign wci_m_7_MFlag = cp_wci_Vm_7_MFlag ;

  // value method wci_m_8_mCmd
  assign wci_m_8_MCmd = cp_wci_Vm_8_MCmd ;

  // value method wci_m_8_mAddrSpace
  assign wci_m_8_MAddrSpace = cp_wci_Vm_8_MAddrSpace ;

  // value method wci_m_8_mByteEn
  assign wci_m_8_MByteEn = cp_wci_Vm_8_MByteEn ;

  // value method wci_m_8_mAddr
  assign wci_m_8_MAddr = cp_wci_Vm_8_MAddr ;

  // value method wci_m_8_mData
  assign wci_m_8_MData = cp_wci_Vm_8_MData ;

  // value method wci_m_8_mFlag
  assign wci_m_8_MFlag = cp_wci_Vm_8_MFlag ;

  // value method wci_m_9_mCmd
  assign wci_m_9_MCmd = cp_wci_Vm_9_MCmd ;

  // value method wci_m_9_mAddrSpace
  assign wci_m_9_MAddrSpace = cp_wci_Vm_9_MAddrSpace ;

  // value method wci_m_9_mByteEn
  assign wci_m_9_MByteEn = cp_wci_Vm_9_MByteEn ;

  // value method wci_m_9_mAddr
  assign wci_m_9_MAddr = cp_wci_Vm_9_MAddr ;

  // value method wci_m_9_mData
  assign wci_m_9_MData = cp_wci_Vm_9_MData ;

  // value method wci_m_9_mFlag
  assign wci_m_9_MFlag = cp_wci_Vm_9_MFlag ;

  // value method wci_m_10_mCmd
  assign wci_m_10_MCmd = cp_wci_Vm_10_MCmd ;

  // value method wci_m_10_mAddrSpace
  assign wci_m_10_MAddrSpace = cp_wci_Vm_10_MAddrSpace ;

  // value method wci_m_10_mByteEn
  assign wci_m_10_MByteEn = cp_wci_Vm_10_MByteEn ;

  // value method wci_m_10_mAddr
  assign wci_m_10_MAddr = cp_wci_Vm_10_MAddr ;

  // value method wci_m_10_mData
  assign wci_m_10_MData = cp_wci_Vm_10_MData ;

  // value method wci_m_10_mFlag
  assign wci_m_10_MFlag = cp_wci_Vm_10_MFlag ;

  // value method wci_m_11_mCmd
  assign wci_m_11_MCmd = cp_wci_Vm_11_MCmd ;

  // value method wci_m_11_mAddrSpace
  assign wci_m_11_MAddrSpace = cp_wci_Vm_11_MAddrSpace ;

  // value method wci_m_11_mByteEn
  assign wci_m_11_MByteEn = cp_wci_Vm_11_MByteEn ;

  // value method wci_m_11_mAddr
  assign wci_m_11_MAddr = cp_wci_Vm_11_MAddr ;

  // value method wci_m_11_mData
  assign wci_m_11_MData = cp_wci_Vm_11_MData ;

  // value method wci_m_11_mFlag
  assign wci_m_11_MFlag = cp_wci_Vm_11_MFlag ;

  // value method wci_m_12_mCmd
  assign wci_m_12_MCmd = cp_wci_Vm_12_MCmd ;

  // value method wci_m_12_mAddrSpace
  assign wci_m_12_MAddrSpace = cp_wci_Vm_12_MAddrSpace ;

  // value method wci_m_12_mByteEn
  assign wci_m_12_MByteEn = cp_wci_Vm_12_MByteEn ;

  // value method wci_m_12_mAddr
  assign wci_m_12_MAddr = cp_wci_Vm_12_MAddr ;

  // value method wci_m_12_mData
  assign wci_m_12_MData = cp_wci_Vm_12_MData ;

  // value method wci_m_12_mFlag
  assign wci_m_12_MFlag = cp_wci_Vm_12_MFlag ;

  // value method wmiDP0_sResp
  assign wmiDP0_SResp = dp0_wmiS0_SResp ;

  // value method wmiDP0_sData
  assign wmiDP0_SData = dp0_wmiS0_SData ;

  // value method wmiDP0_sThreadBusy
  assign wmiDP0_SThreadBusy = dp0_wmiS0_SThreadBusy ;

  // value method wmiDP0_sDataThreadBusy
  assign wmiDP0_SDataThreadBusy = dp0_wmiS0_SDataThreadBusy ;

  // value method wmiDP0_sRespLast
  assign wmiDP0_SRespLast = dp0_wmiS0_SRespLast ;

  // value method wmiDP0_sFlag
  assign wmiDP0_SFlag = dp0_wmiS0_SFlag ;

  // value method wmiDP0_sReset_n
  assign wmiDP0_SReset_n = dp0_wmiS0_SReset_n ;

  // value method wmiDP1_sResp
  assign wmiDP1_SResp = dp1_wmiS0_SResp ;

  // value method wmiDP1_sData
  assign wmiDP1_SData = dp1_wmiS0_SData ;

  // value method wmiDP1_sThreadBusy
  assign wmiDP1_SThreadBusy = dp1_wmiS0_SThreadBusy ;

  // value method wmiDP1_sDataThreadBusy
  assign wmiDP1_SDataThreadBusy = dp1_wmiS0_SDataThreadBusy ;

  // value method wmiDP1_sRespLast
  assign wmiDP1_SRespLast = dp1_wmiS0_SRespLast ;

  // value method wmiDP1_sFlag
  assign wmiDP1_SFlag = dp1_wmiS0_SFlag ;

  // value method wmiDP1_sReset_n
  assign wmiDP1_SReset_n = dp1_wmiS0_SReset_n ;

  // value method cpNow
  assign cpNow = cp_cpNow ;
  assign RDY_cpNow = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = cp_gps_ppsSyncOut ;

  // action method uuid
  assign RDY_uuid = 1'd1 ;

  // submodule cp
  mkOCCP cp(.pciDevice(pciDevice),
	    .CLK_time_clk(CLK_sys0_clk),
	    .RST_N_time_rst(RST_N_sys0_rst),
	    .CLK(CLK),
	    .RST_N(RST_N),
	    .gps_ppsSyncIn_x(cp_gps_ppsSyncIn_x),
	    .server_request_put(cp_server_request_put),
	    .switch_x(cp_switch_x),
	    .uuid_arg(cp_uuid_arg),
	    .wci_Vm_0_SData(cp_wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp_wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp_wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp_wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp_wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp_wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp_wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp_wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp_wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp_wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp_wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp_wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp_wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp_wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp_wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp_wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp_wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp_wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp_wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp_wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp_wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp_wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp_wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp_wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp_wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp_wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp_wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp_wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp_wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp_wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp_wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp_wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp_wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp_wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp_wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp_wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp_wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp_wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp_wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp_wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp_wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp_wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp_wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp_wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp_wci_Vm_9_SResp),
	    .EN_server_request_put(cp_EN_server_request_put),
	    .EN_server_response_get(cp_EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp_wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp_wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp_wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp_wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp_wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp_wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp_wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp_wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp_wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp_wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp_wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp_wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp_wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp_wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp_wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp_RDY_server_request_put),
	    .server_response_get(cp_server_response_get),
	    .RDY_server_response_get(cp_RDY_server_response_get),
	    .wci_Vm_0_MCmd(cp_wci_Vm_0_MCmd),
	    .wci_Vm_0_MAddrSpace(cp_wci_Vm_0_MAddrSpace),
	    .wci_Vm_0_MByteEn(cp_wci_Vm_0_MByteEn),
	    .wci_Vm_0_MAddr(cp_wci_Vm_0_MAddr),
	    .wci_Vm_0_MData(cp_wci_Vm_0_MData),
	    .wci_Vm_0_MFlag(cp_wci_Vm_0_MFlag),
	    .wci_Vm_1_MCmd(cp_wci_Vm_1_MCmd),
	    .wci_Vm_1_MAddrSpace(cp_wci_Vm_1_MAddrSpace),
	    .wci_Vm_1_MByteEn(cp_wci_Vm_1_MByteEn),
	    .wci_Vm_1_MAddr(cp_wci_Vm_1_MAddr),
	    .wci_Vm_1_MData(cp_wci_Vm_1_MData),
	    .wci_Vm_1_MFlag(cp_wci_Vm_1_MFlag),
	    .wci_Vm_2_MCmd(cp_wci_Vm_2_MCmd),
	    .wci_Vm_2_MAddrSpace(cp_wci_Vm_2_MAddrSpace),
	    .wci_Vm_2_MByteEn(cp_wci_Vm_2_MByteEn),
	    .wci_Vm_2_MAddr(cp_wci_Vm_2_MAddr),
	    .wci_Vm_2_MData(cp_wci_Vm_2_MData),
	    .wci_Vm_2_MFlag(cp_wci_Vm_2_MFlag),
	    .wci_Vm_3_MCmd(cp_wci_Vm_3_MCmd),
	    .wci_Vm_3_MAddrSpace(cp_wci_Vm_3_MAddrSpace),
	    .wci_Vm_3_MByteEn(cp_wci_Vm_3_MByteEn),
	    .wci_Vm_3_MAddr(cp_wci_Vm_3_MAddr),
	    .wci_Vm_3_MData(cp_wci_Vm_3_MData),
	    .wci_Vm_3_MFlag(cp_wci_Vm_3_MFlag),
	    .wci_Vm_4_MCmd(cp_wci_Vm_4_MCmd),
	    .wci_Vm_4_MAddrSpace(cp_wci_Vm_4_MAddrSpace),
	    .wci_Vm_4_MByteEn(cp_wci_Vm_4_MByteEn),
	    .wci_Vm_4_MAddr(cp_wci_Vm_4_MAddr),
	    .wci_Vm_4_MData(cp_wci_Vm_4_MData),
	    .wci_Vm_4_MFlag(cp_wci_Vm_4_MFlag),
	    .wci_Vm_5_MCmd(cp_wci_Vm_5_MCmd),
	    .wci_Vm_5_MAddrSpace(cp_wci_Vm_5_MAddrSpace),
	    .wci_Vm_5_MByteEn(cp_wci_Vm_5_MByteEn),
	    .wci_Vm_5_MAddr(cp_wci_Vm_5_MAddr),
	    .wci_Vm_5_MData(cp_wci_Vm_5_MData),
	    .wci_Vm_5_MFlag(cp_wci_Vm_5_MFlag),
	    .wci_Vm_6_MCmd(cp_wci_Vm_6_MCmd),
	    .wci_Vm_6_MAddrSpace(cp_wci_Vm_6_MAddrSpace),
	    .wci_Vm_6_MByteEn(cp_wci_Vm_6_MByteEn),
	    .wci_Vm_6_MAddr(cp_wci_Vm_6_MAddr),
	    .wci_Vm_6_MData(cp_wci_Vm_6_MData),
	    .wci_Vm_6_MFlag(cp_wci_Vm_6_MFlag),
	    .wci_Vm_7_MCmd(cp_wci_Vm_7_MCmd),
	    .wci_Vm_7_MAddrSpace(cp_wci_Vm_7_MAddrSpace),
	    .wci_Vm_7_MByteEn(cp_wci_Vm_7_MByteEn),
	    .wci_Vm_7_MAddr(cp_wci_Vm_7_MAddr),
	    .wci_Vm_7_MData(cp_wci_Vm_7_MData),
	    .wci_Vm_7_MFlag(cp_wci_Vm_7_MFlag),
	    .wci_Vm_8_MCmd(cp_wci_Vm_8_MCmd),
	    .wci_Vm_8_MAddrSpace(cp_wci_Vm_8_MAddrSpace),
	    .wci_Vm_8_MByteEn(cp_wci_Vm_8_MByteEn),
	    .wci_Vm_8_MAddr(cp_wci_Vm_8_MAddr),
	    .wci_Vm_8_MData(cp_wci_Vm_8_MData),
	    .wci_Vm_8_MFlag(cp_wci_Vm_8_MFlag),
	    .wci_Vm_9_MCmd(cp_wci_Vm_9_MCmd),
	    .wci_Vm_9_MAddrSpace(cp_wci_Vm_9_MAddrSpace),
	    .wci_Vm_9_MByteEn(cp_wci_Vm_9_MByteEn),
	    .wci_Vm_9_MAddr(cp_wci_Vm_9_MAddr),
	    .wci_Vm_9_MData(cp_wci_Vm_9_MData),
	    .wci_Vm_9_MFlag(cp_wci_Vm_9_MFlag),
	    .wci_Vm_10_MCmd(cp_wci_Vm_10_MCmd),
	    .wci_Vm_10_MAddrSpace(cp_wci_Vm_10_MAddrSpace),
	    .wci_Vm_10_MByteEn(cp_wci_Vm_10_MByteEn),
	    .wci_Vm_10_MAddr(cp_wci_Vm_10_MAddr),
	    .wci_Vm_10_MData(cp_wci_Vm_10_MData),
	    .wci_Vm_10_MFlag(cp_wci_Vm_10_MFlag),
	    .wci_Vm_11_MCmd(cp_wci_Vm_11_MCmd),
	    .wci_Vm_11_MAddrSpace(cp_wci_Vm_11_MAddrSpace),
	    .wci_Vm_11_MByteEn(cp_wci_Vm_11_MByteEn),
	    .wci_Vm_11_MAddr(cp_wci_Vm_11_MAddr),
	    .wci_Vm_11_MData(cp_wci_Vm_11_MData),
	    .wci_Vm_11_MFlag(cp_wci_Vm_11_MFlag),
	    .wci_Vm_12_MCmd(cp_wci_Vm_12_MCmd),
	    .wci_Vm_12_MAddrSpace(cp_wci_Vm_12_MAddrSpace),
	    .wci_Vm_12_MByteEn(cp_wci_Vm_12_MByteEn),
	    .wci_Vm_12_MAddr(cp_wci_Vm_12_MAddr),
	    .wci_Vm_12_MData(cp_wci_Vm_12_MData),
	    .wci_Vm_12_MFlag(cp_wci_Vm_12_MFlag),
	    .wci_Vm_13_MCmd(cp_wci_Vm_13_MCmd),
	    .wci_Vm_13_MAddrSpace(cp_wci_Vm_13_MAddrSpace),
	    .wci_Vm_13_MByteEn(cp_wci_Vm_13_MByteEn),
	    .wci_Vm_13_MAddr(cp_wci_Vm_13_MAddr),
	    .wci_Vm_13_MData(cp_wci_Vm_13_MData),
	    .wci_Vm_13_MFlag(cp_wci_Vm_13_MFlag),
	    .wci_Vm_14_MCmd(cp_wci_Vm_14_MCmd),
	    .wci_Vm_14_MAddrSpace(cp_wci_Vm_14_MAddrSpace),
	    .wci_Vm_14_MByteEn(cp_wci_Vm_14_MByteEn),
	    .wci_Vm_14_MAddr(cp_wci_Vm_14_MAddr),
	    .wci_Vm_14_MData(cp_wci_Vm_14_MData),
	    .wci_Vm_14_MFlag(cp_wci_Vm_14_MFlag),
	    .cpNow(cp_cpNow),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(cp_gps_ppsSyncOut),
	    .led(cp_led),
	    .RST_N_wci_Vm_0(cp_RST_N_wci_Vm_0),
	    .RST_N_wci_Vm_1(cp_RST_N_wci_Vm_1),
	    .RST_N_wci_Vm_2(cp_RST_N_wci_Vm_2),
	    .RST_N_wci_Vm_3(cp_RST_N_wci_Vm_3),
	    .RST_N_wci_Vm_4(cp_RST_N_wci_Vm_4),
	    .RST_N_wci_Vm_5(cp_RST_N_wci_Vm_5),
	    .RST_N_wci_Vm_6(cp_RST_N_wci_Vm_6),
	    .RST_N_wci_Vm_7(cp_RST_N_wci_Vm_7),
	    .RST_N_wci_Vm_8(cp_RST_N_wci_Vm_8),
	    .RST_N_wci_Vm_9(cp_RST_N_wci_Vm_9),
	    .RST_N_wci_Vm_10(cp_RST_N_wci_Vm_10),
	    .RST_N_wci_Vm_11(cp_RST_N_wci_Vm_11),
	    .RST_N_wci_Vm_12(cp_RST_N_wci_Vm_12),
	    .RST_N_wci_Vm_13(cp_RST_N_wci_Vm_13),
	    .RST_N_wci_Vm_14(cp_RST_N_wci_Vm_14));

  // submodule cpMux_aActF
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cpMux_aActF(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(cpMux_aActF_D_IN),
						      .ENQ(cpMux_aActF_ENQ),
						      .DEQ(cpMux_aActF_DEQ),
						      .CLR(cpMux_aActF_CLR),
						      .D_OUT(cpMux_aActF_D_OUT),
						      .FULL_N(cpMux_aActF_FULL_N),
						      .EMPTY_N(cpMux_aActF_EMPTY_N));

  // submodule cpMux_cpReqF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) cpMux_cpReqF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(cpMux_cpReqF_D_IN),
							.ENQ(cpMux_cpReqF_ENQ),
							.DEQ(cpMux_cpReqF_DEQ),
							.CLR(cpMux_cpReqF_CLR),
							.D_OUT(cpMux_cpReqF_D_OUT),
							.FULL_N(cpMux_cpReqF_FULL_N),
							.EMPTY_N(cpMux_cpReqF_EMPTY_N));

  // submodule cpMux_cpRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) cpMux_cpRespF(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(cpMux_cpRespF_D_IN),
							 .ENQ(cpMux_cpRespF_ENQ),
							 .DEQ(cpMux_cpRespF_DEQ),
							 .CLR(cpMux_cpRespF_CLR),
							 .D_OUT(cpMux_cpRespF_D_OUT),
							 .FULL_N(cpMux_cpRespF_FULL_N),
							 .EMPTY_N(cpMux_cpRespF_EMPTY_N));

  // submodule cpMux_reqAF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) cpMux_reqAF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(cpMux_reqAF_D_IN),
						       .ENQ(cpMux_reqAF_ENQ),
						       .DEQ(cpMux_reqAF_DEQ),
						       .CLR(cpMux_reqAF_CLR),
						       .D_OUT(cpMux_reqAF_D_OUT),
						       .FULL_N(cpMux_reqAF_FULL_N),
						       .EMPTY_N(cpMux_reqAF_EMPTY_N));

  // submodule cpMux_reqBF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) cpMux_reqBF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(cpMux_reqBF_D_IN),
						       .ENQ(cpMux_reqBF_ENQ),
						       .DEQ(cpMux_reqBF_DEQ),
						       .CLR(cpMux_reqBF_CLR),
						       .D_OUT(cpMux_reqBF_D_OUT),
						       .FULL_N(cpMux_reqBF_FULL_N),
						       .EMPTY_N(cpMux_reqBF_EMPTY_N));

  // submodule cpMux_respAF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) cpMux_respAF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(cpMux_respAF_D_IN),
							.ENQ(cpMux_respAF_ENQ),
							.DEQ(cpMux_respAF_DEQ),
							.CLR(cpMux_respAF_CLR),
							.D_OUT(cpMux_respAF_D_OUT),
							.FULL_N(cpMux_respAF_FULL_N),
							.EMPTY_N(cpMux_respAF_EMPTY_N));

  // submodule cpMux_respBF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) cpMux_respBF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(cpMux_respBF_D_IN),
							.ENQ(cpMux_respBF_ENQ),
							.DEQ(cpMux_respBF_DEQ),
							.CLR(cpMux_respBF_CLR),
							.D_OUT(cpMux_respBF_D_OUT),
							.FULL_N(cpMux_respBF_FULL_N),
							.EMPTY_N(cpMux_respBF_EMPTY_N));

  // submodule cpTlp
  mkTLPSerializer cpTlp(.pciDevice(pciDevice),
			.CLK(CLK),
			.RST_N(RST_N),
			.client_response_put(cpTlp_client_response_put),
			.server_request_put(cpTlp_server_request_put),
			.EN_server_request_put(cpTlp_EN_server_request_put),
			.EN_server_response_get(cpTlp_EN_server_response_get),
			.EN_client_request_get(cpTlp_EN_client_request_get),
			.EN_client_response_put(cpTlp_EN_client_response_put),
			.RDY_server_request_put(cpTlp_RDY_server_request_put),
			.server_response_get(cpTlp_server_response_get),
			.RDY_server_response_get(cpTlp_RDY_server_response_get),
			.client_request_get(cpTlp_client_request_get),
			.RDY_client_request_get(cpTlp_RDY_client_request_get),
			.RDY_client_response_put(cpTlp_RDY_client_response_put));

  // submodule dp0
  mkOCDP16B #(.hasPush(1'd0),
	      .hasPull(1'd1),
	      .hasDebugLogic(1'd1)) dp0(.pciDevice(x__h2806),
					.CLK(CLK),
					.RST_N(cp_RST_N_wci_Vm_13),
					.server_request_put(dp0_server_request_put),
					.wci_s_MAddr(dp0_wci_s_MAddr),
					.wci_s_MAddrSpace(dp0_wci_s_MAddrSpace),
					.wci_s_MByteEn(dp0_wci_s_MByteEn),
					.wci_s_MCmd(dp0_wci_s_MCmd),
					.wci_s_MData(dp0_wci_s_MData),
					.wci_s_MFlag(dp0_wci_s_MFlag),
					.wmiS0_MAddr(dp0_wmiS0_MAddr),
					.wmiS0_MAddrSpace(dp0_wmiS0_MAddrSpace),
					.wmiS0_MBurstLength(dp0_wmiS0_MBurstLength),
					.wmiS0_MCmd(dp0_wmiS0_MCmd),
					.wmiS0_MData(dp0_wmiS0_MData),
					.wmiS0_MDataByteEn(dp0_wmiS0_MDataByteEn),
					.wmiS0_MReqInfo(dp0_wmiS0_MReqInfo),
					.wmiS0_arg_mFlag(dp0_wmiS0_arg_mFlag),
					.wti_s_req(dp0_wti_s_req),
					.wmiS0_MReqLast(dp0_wmiS0_MReqLast),
					.wmiS0_MDataValid(dp0_wmiS0_MDataValid),
					.wmiS0_MDataLast(dp0_wmiS0_MDataLast),
					.wmiS0_MReset_n(dp0_wmiS0_MReset_n),
					.EN_server_request_put(dp0_EN_server_request_put),
					.EN_server_response_get(dp0_EN_server_response_get),
					.wci_s_SResp(dp0_wci_s_SResp),
					.wci_s_SData(dp0_wci_s_SData),
					.wci_s_SThreadBusy(dp0_wci_s_SThreadBusy),
					.wci_s_SFlag(dp0_wci_s_SFlag),
					.wti_s_SThreadBusy(dp0_wti_s_SThreadBusy),
					.wti_s_SReset_n(dp0_wti_s_SReset_n),
					.wmiS0_SResp(dp0_wmiS0_SResp),
					.wmiS0_SData(dp0_wmiS0_SData),
					.wmiS0_SThreadBusy(dp0_wmiS0_SThreadBusy),
					.wmiS0_SDataThreadBusy(dp0_wmiS0_SDataThreadBusy),
					.wmiS0_SRespLast(dp0_wmiS0_SRespLast),
					.wmiS0_SFlag(dp0_wmiS0_SFlag),
					.wmiS0_SReset_n(dp0_wmiS0_SReset_n),
					.RDY_server_request_put(dp0_RDY_server_request_put),
					.server_response_get(dp0_server_response_get),
					.RDY_server_response_get(dp0_RDY_server_response_get));

  // submodule dp1
  mkOCDP16B #(.hasPush(1'd1),
	      .hasPull(1'd0),
	      .hasDebugLogic(1'd1)) dp1(.pciDevice(x__h3100),
					.CLK(CLK),
					.RST_N(cp_RST_N_wci_Vm_14),
					.server_request_put(dp1_server_request_put),
					.wci_s_MAddr(dp1_wci_s_MAddr),
					.wci_s_MAddrSpace(dp1_wci_s_MAddrSpace),
					.wci_s_MByteEn(dp1_wci_s_MByteEn),
					.wci_s_MCmd(dp1_wci_s_MCmd),
					.wci_s_MData(dp1_wci_s_MData),
					.wci_s_MFlag(dp1_wci_s_MFlag),
					.wmiS0_MAddr(dp1_wmiS0_MAddr),
					.wmiS0_MAddrSpace(dp1_wmiS0_MAddrSpace),
					.wmiS0_MBurstLength(dp1_wmiS0_MBurstLength),
					.wmiS0_MCmd(dp1_wmiS0_MCmd),
					.wmiS0_MData(dp1_wmiS0_MData),
					.wmiS0_MDataByteEn(dp1_wmiS0_MDataByteEn),
					.wmiS0_MReqInfo(dp1_wmiS0_MReqInfo),
					.wmiS0_arg_mFlag(dp1_wmiS0_arg_mFlag),
					.wti_s_req(dp1_wti_s_req),
					.wmiS0_MReqLast(dp1_wmiS0_MReqLast),
					.wmiS0_MDataValid(dp1_wmiS0_MDataValid),
					.wmiS0_MDataLast(dp1_wmiS0_MDataLast),
					.wmiS0_MReset_n(dp1_wmiS0_MReset_n),
					.EN_server_request_put(dp1_EN_server_request_put),
					.EN_server_response_get(dp1_EN_server_response_get),
					.wci_s_SResp(dp1_wci_s_SResp),
					.wci_s_SData(dp1_wci_s_SData),
					.wci_s_SThreadBusy(dp1_wci_s_SThreadBusy),
					.wci_s_SFlag(dp1_wci_s_SFlag),
					.wti_s_SThreadBusy(dp1_wti_s_SThreadBusy),
					.wti_s_SReset_n(dp1_wti_s_SReset_n),
					.wmiS0_SResp(dp1_wmiS0_SResp),
					.wmiS0_SData(dp1_wmiS0_SData),
					.wmiS0_SThreadBusy(dp1_wmiS0_SThreadBusy),
					.wmiS0_SDataThreadBusy(dp1_wmiS0_SDataThreadBusy),
					.wmiS0_SRespLast(dp1_wmiS0_SRespLast),
					.wmiS0_SFlag(dp1_wmiS0_SFlag),
					.wmiS0_SReset_n(dp1_wmiS0_SReset_n),
					.RDY_server_request_put(dp1_RDY_server_request_put),
					.server_response_get(dp1_server_response_get),
					.RDY_server_response_get(dp1_RDY_server_response_get));

  // submodule itc0
  mkTimeClient itc0(.CLK_sys0_clk(CLK_sys0_clk),
		    .RST_N_sys0_rst(RST_N_sys0_rst),
		    .CLK_wti_clk(CLK),
		    .RST_N_wti_rst(RST_N),
		    .CLK(CLK),
		    .RST_N(RST_N),
		    .gpsTime_arg(itc0_gpsTime_arg),
		    .EN_gpsTime(itc0_EN_gpsTime),
		    .wti_m_SThreadBusy(itc0_wti_m_SThreadBusy),
		    .wti_m_SReset_n(itc0_wti_m_SReset_n),
		    .RDY_gpsTime(itc0_RDY_gpsTime),
		    .wti_m_req(itc0_wti_m_req));

  // submodule itc1
  mkTimeClient itc1(.CLK_sys0_clk(CLK_sys0_clk),
		    .RST_N_sys0_rst(RST_N_sys0_rst),
		    .CLK_wti_clk(CLK),
		    .RST_N_wti_rst(RST_N),
		    .CLK(CLK),
		    .RST_N(RST_N),
		    .gpsTime_arg(itc1_gpsTime_arg),
		    .EN_gpsTime(itc1_EN_gpsTime),
		    .wti_m_SThreadBusy(itc1_wti_m_SThreadBusy),
		    .wti_m_SReset_n(itc1_wti_m_SReset_n),
		    .RDY_gpsTime(itc1_RDY_gpsTime),
		    .wti_m_req(itc1_wti_m_req));

  // submodule noc_sm0
  mkTLPSM noc_sm0(.pfk(14'd1360),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(noc_sm0_c0_response_put),
		  .c1_response_put(noc_sm0_c1_response_put),
		  .s_request_put(noc_sm0_s_request_put),
		  .EN_s_request_put(noc_sm0_EN_s_request_put),
		  .EN_s_response_get(noc_sm0_EN_s_response_get),
		  .EN_c0_request_get(noc_sm0_EN_c0_request_get),
		  .EN_c0_response_put(noc_sm0_EN_c0_response_put),
		  .EN_c1_request_get(noc_sm0_EN_c1_request_get),
		  .EN_c1_response_put(noc_sm0_EN_c1_response_put),
		  .RDY_s_request_put(noc_sm0_RDY_s_request_put),
		  .s_response_get(noc_sm0_s_response_get),
		  .RDY_s_response_get(noc_sm0_RDY_s_response_get),
		  .c0_request_get(noc_sm0_c0_request_get),
		  .RDY_c0_request_get(noc_sm0_RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm0_RDY_c0_response_put),
		  .c1_request_get(noc_sm0_c1_request_get),
		  .RDY_c1_request_get(noc_sm0_RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm0_RDY_c1_response_put));

  // submodule noc_sm1
  mkTLPSM noc_sm1(.pfk(14'd9488),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(noc_sm1_c0_response_put),
		  .c1_response_put(noc_sm1_c1_response_put),
		  .s_request_put(noc_sm1_s_request_put),
		  .EN_s_request_put(noc_sm1_EN_s_request_put),
		  .EN_s_response_get(noc_sm1_EN_s_response_get),
		  .EN_c0_request_get(noc_sm1_EN_c0_request_get),
		  .EN_c0_response_put(noc_sm1_EN_c0_response_put),
		  .EN_c1_request_get(noc_sm1_EN_c1_request_get),
		  .EN_c1_response_put(noc_sm1_EN_c1_response_put),
		  .RDY_s_request_put(noc_sm1_RDY_s_request_put),
		  .s_response_get(noc_sm1_s_response_get),
		  .RDY_s_response_get(noc_sm1_RDY_s_response_get),
		  .c0_request_get(noc_sm1_c0_request_get),
		  .RDY_c0_request_get(noc_sm1_RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm1_RDY_c0_response_put),
		  .c1_request_get(noc_sm1_c1_request_get),
		  .RDY_c1_request_get(noc_sm1_RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm1_RDY_c1_response_put));

  // submodule noc_sm2
  mkTLPSM noc_sm2(.pfk(14'd9497),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(noc_sm2_c0_response_put),
		  .c1_response_put(noc_sm2_c1_response_put),
		  .s_request_put(noc_sm2_s_request_put),
		  .EN_s_request_put(noc_sm2_EN_s_request_put),
		  .EN_s_response_get(noc_sm2_EN_s_response_get),
		  .EN_c0_request_get(noc_sm2_EN_c0_request_get),
		  .EN_c0_response_put(noc_sm2_EN_c0_response_put),
		  .EN_c1_request_get(noc_sm2_EN_c1_request_get),
		  .EN_c1_response_put(noc_sm2_EN_c1_response_put),
		  .RDY_s_request_put(noc_sm2_RDY_s_request_put),
		  .s_response_get(noc_sm2_s_response_get),
		  .RDY_s_response_get(noc_sm2_RDY_s_response_get),
		  .c0_request_get(noc_sm2_c0_request_get),
		  .RDY_c0_request_get(noc_sm2_RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm2_RDY_c0_response_put),
		  .c1_request_get(),
		  .RDY_c1_request_get(noc_sm2_RDY_c1_request_get),
		  .RDY_c1_response_put());

  // rule RL_cpMux_request_portA
  assign WILL_FIRE_RL_cpMux_request_portA =
	     cpMux_reqAF_EMPTY_N && cpMux_cpReqF_FULL_N &&
	     (!cpMux_reqAF_D_OUT[58] || cpMux_aActF_FULL_N) ;

  // rule RL_cpMux_request_portB
  assign WILL_FIRE_RL_cpMux_request_portB =
	     cpMux_cpReqF_FULL_N && cpMux_reqBF_EMPTY_N &&
	     (!cpMux_reqBF_D_OUT[58] || cpMux_aActF_FULL_N) &&
	     !WILL_FIRE_RL_cpMux_request_portA ;

  // rule RL_cpMux_response_cp
  assign WILL_FIRE_RL_cpMux_response_cp =
	     cpMux_cpRespF_EMPTY_N &&
	     cpMux_aActF_i_notEmpty__1_AND_IF_cpMux_aActF_f_ETC___d46 ;

  // inputs to muxes for submodule ports
  assign MUX_cpMux_aActF_enq_1__SEL_1 =
	     WILL_FIRE_RL_cpMux_request_portA && cpMux_reqAF_D_OUT[58] ;

  // register noc_chompCnt
  assign noc_chompCnt_D_IN = noc_chompCnt + 8'd1 ;
  assign noc_chompCnt_EN =
	     noc_sm2_RDY_c1_request_get && noc_chompCnt != 8'd255 ;

  // submodule cp
  assign cp_gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign cp_server_request_put = cpMux_cpReqF_D_OUT ;
  assign cp_switch_x = switch_x ;
  assign cp_uuid_arg = uuid_arg ;
  assign cp_wci_Vm_0_SData = wci_m_0_SData ;
  assign cp_wci_Vm_0_SFlag = wci_m_0_SFlag ;
  assign cp_wci_Vm_0_SResp = wci_m_0_SResp ;
  assign cp_wci_Vm_10_SData = wci_m_10_SData ;
  assign cp_wci_Vm_10_SFlag = wci_m_10_SFlag ;
  assign cp_wci_Vm_10_SResp = wci_m_10_SResp ;
  assign cp_wci_Vm_11_SData = wci_m_11_SData ;
  assign cp_wci_Vm_11_SFlag = wci_m_11_SFlag ;
  assign cp_wci_Vm_11_SResp = wci_m_11_SResp ;
  assign cp_wci_Vm_12_SData = wci_m_12_SData ;
  assign cp_wci_Vm_12_SFlag = wci_m_12_SFlag ;
  assign cp_wci_Vm_12_SResp = wci_m_12_SResp ;
  assign cp_wci_Vm_13_SData = dp0_wci_s_SData ;
  assign cp_wci_Vm_13_SFlag = dp0_wci_s_SFlag ;
  assign cp_wci_Vm_13_SResp = dp0_wci_s_SResp ;
  assign cp_wci_Vm_14_SData = dp1_wci_s_SData ;
  assign cp_wci_Vm_14_SFlag = dp1_wci_s_SFlag ;
  assign cp_wci_Vm_14_SResp = dp1_wci_s_SResp ;
  assign cp_wci_Vm_1_SData = wci_m_1_SData ;
  assign cp_wci_Vm_1_SFlag = wci_m_1_SFlag ;
  assign cp_wci_Vm_1_SResp = wci_m_1_SResp ;
  assign cp_wci_Vm_2_SData = wci_m_2_SData ;
  assign cp_wci_Vm_2_SFlag = wci_m_2_SFlag ;
  assign cp_wci_Vm_2_SResp = wci_m_2_SResp ;
  assign cp_wci_Vm_3_SData = wci_m_3_SData ;
  assign cp_wci_Vm_3_SFlag = wci_m_3_SFlag ;
  assign cp_wci_Vm_3_SResp = wci_m_3_SResp ;
  assign cp_wci_Vm_4_SData = wci_m_4_SData ;
  assign cp_wci_Vm_4_SFlag = wci_m_4_SFlag ;
  assign cp_wci_Vm_4_SResp = wci_m_4_SResp ;
  assign cp_wci_Vm_5_SData = wci_m_5_SData ;
  assign cp_wci_Vm_5_SFlag = wci_m_5_SFlag ;
  assign cp_wci_Vm_5_SResp = wci_m_5_SResp ;
  assign cp_wci_Vm_6_SData = wci_m_6_SData ;
  assign cp_wci_Vm_6_SFlag = wci_m_6_SFlag ;
  assign cp_wci_Vm_6_SResp = wci_m_6_SResp ;
  assign cp_wci_Vm_7_SData = wci_m_7_SData ;
  assign cp_wci_Vm_7_SFlag = wci_m_7_SFlag ;
  assign cp_wci_Vm_7_SResp = wci_m_7_SResp ;
  assign cp_wci_Vm_8_SData = wci_m_8_SData ;
  assign cp_wci_Vm_8_SFlag = wci_m_8_SFlag ;
  assign cp_wci_Vm_8_SResp = wci_m_8_SResp ;
  assign cp_wci_Vm_9_SData = wci_m_9_SData ;
  assign cp_wci_Vm_9_SFlag = wci_m_9_SFlag ;
  assign cp_wci_Vm_9_SResp = wci_m_9_SResp ;
  assign cp_EN_server_request_put =
	     cp_RDY_server_request_put && cpMux_cpReqF_EMPTY_N ;
  assign cp_EN_server_response_get =
	     cp_RDY_server_response_get && cpMux_cpRespF_FULL_N ;
  assign cp_wci_Vm_0_SThreadBusy = wci_m_0_SThreadBusy ;
  assign cp_wci_Vm_1_SThreadBusy = wci_m_1_SThreadBusy ;
  assign cp_wci_Vm_2_SThreadBusy = wci_m_2_SThreadBusy ;
  assign cp_wci_Vm_3_SThreadBusy = wci_m_3_SThreadBusy ;
  assign cp_wci_Vm_4_SThreadBusy = wci_m_4_SThreadBusy ;
  assign cp_wci_Vm_5_SThreadBusy = wci_m_5_SThreadBusy ;
  assign cp_wci_Vm_6_SThreadBusy = wci_m_6_SThreadBusy ;
  assign cp_wci_Vm_7_SThreadBusy = wci_m_7_SThreadBusy ;
  assign cp_wci_Vm_8_SThreadBusy = wci_m_8_SThreadBusy ;
  assign cp_wci_Vm_9_SThreadBusy = wci_m_9_SThreadBusy ;
  assign cp_wci_Vm_10_SThreadBusy = wci_m_10_SThreadBusy ;
  assign cp_wci_Vm_11_SThreadBusy = wci_m_11_SThreadBusy ;
  assign cp_wci_Vm_12_SThreadBusy = wci_m_12_SThreadBusy ;
  assign cp_wci_Vm_13_SThreadBusy = dp0_wci_s_SThreadBusy ;
  assign cp_wci_Vm_14_SThreadBusy = dp1_wci_s_SThreadBusy ;

  // submodule cpMux_aActF
  assign cpMux_aActF_D_IN = MUX_cpMux_aActF_enq_1__SEL_1 ;
  assign cpMux_aActF_ENQ =
	     WILL_FIRE_RL_cpMux_request_portA && cpMux_reqAF_D_OUT[58] ||
	     WILL_FIRE_RL_cpMux_request_portB && cpMux_reqBF_D_OUT[58] ;
  assign cpMux_aActF_DEQ = WILL_FIRE_RL_cpMux_response_cp ;
  assign cpMux_aActF_CLR = 1'b0 ;

  // submodule cpMux_cpReqF
  assign cpMux_cpReqF_D_IN =
	     WILL_FIRE_RL_cpMux_request_portA ?
	       cpMux_reqAF_D_OUT :
	       cpMux_reqBF_D_OUT ;
  assign cpMux_cpReqF_ENQ =
	     WILL_FIRE_RL_cpMux_request_portA ||
	     WILL_FIRE_RL_cpMux_request_portB ;
  assign cpMux_cpReqF_DEQ =
	     cp_RDY_server_request_put && cpMux_cpReqF_EMPTY_N ;
  assign cpMux_cpReqF_CLR = 1'b0 ;

  // submodule cpMux_cpRespF
  assign cpMux_cpRespF_D_IN = cp_server_response_get ;
  assign cpMux_cpRespF_ENQ =
	     cp_RDY_server_response_get && cpMux_cpRespF_FULL_N ;
  assign cpMux_cpRespF_DEQ = WILL_FIRE_RL_cpMux_response_cp ;
  assign cpMux_cpRespF_CLR = 1'b0 ;

  // submodule cpMux_reqAF
  assign cpMux_reqAF_D_IN = cpTlp_client_request_get ;
  assign cpMux_reqAF_ENQ =
	     cpTlp_RDY_client_request_get && cpMux_reqAF_FULL_N ;
  assign cpMux_reqAF_DEQ = WILL_FIRE_RL_cpMux_request_portA ;
  assign cpMux_reqAF_CLR = 1'b0 ;

  // submodule cpMux_reqBF
  assign cpMux_reqBF_D_IN = cpServer_request_put ;
  assign cpMux_reqBF_ENQ = EN_cpServer_request_put ;
  assign cpMux_reqBF_DEQ = WILL_FIRE_RL_cpMux_request_portB ;
  assign cpMux_reqBF_CLR = 1'b0 ;

  // submodule cpMux_respAF
  assign cpMux_respAF_D_IN = cpMux_cpRespF_D_OUT ;
  assign cpMux_respAF_ENQ =
	     WILL_FIRE_RL_cpMux_response_cp && cpMux_aActF_D_OUT ;
  assign cpMux_respAF_DEQ =
	     cpTlp_RDY_client_response_put && cpMux_respAF_EMPTY_N ;
  assign cpMux_respAF_CLR = 1'b0 ;

  // submodule cpMux_respBF
  assign cpMux_respBF_D_IN = cpMux_cpRespF_D_OUT ;
  assign cpMux_respBF_ENQ =
	     WILL_FIRE_RL_cpMux_response_cp && !cpMux_aActF_D_OUT ;
  assign cpMux_respBF_DEQ = EN_cpServer_response_get ;
  assign cpMux_respBF_CLR = 1'b0 ;

  // submodule cpTlp
  assign cpTlp_client_response_put = cpMux_respAF_D_OUT ;
  assign cpTlp_server_request_put = noc_sm0_c0_request_get ;
  assign cpTlp_EN_server_request_put =
	     noc_sm0_RDY_c0_request_get && cpTlp_RDY_server_request_put ;
  assign cpTlp_EN_server_response_get =
	     noc_sm0_RDY_c0_response_put && cpTlp_RDY_server_response_get ;
  assign cpTlp_EN_client_request_get =
	     cpTlp_RDY_client_request_get && cpMux_reqAF_FULL_N ;
  assign cpTlp_EN_client_response_put =
	     cpTlp_RDY_client_response_put && cpMux_respAF_EMPTY_N ;

  // submodule dp0
  assign dp0_server_request_put = noc_sm1_c0_request_get ;
  assign dp0_wci_s_MAddr = cp_wci_Vm_13_MAddr ;
  assign dp0_wci_s_MAddrSpace = cp_wci_Vm_13_MAddrSpace ;
  assign dp0_wci_s_MByteEn = cp_wci_Vm_13_MByteEn ;
  assign dp0_wci_s_MCmd = cp_wci_Vm_13_MCmd ;
  assign dp0_wci_s_MData = cp_wci_Vm_13_MData ;
  assign dp0_wci_s_MFlag = cp_wci_Vm_13_MFlag ;
  assign dp0_wmiS0_MAddr = wmiDP0_MAddr ;
  assign dp0_wmiS0_MAddrSpace = wmiDP0_MAddrSpace ;
  assign dp0_wmiS0_MBurstLength = wmiDP0_MBurstLength ;
  assign dp0_wmiS0_MCmd = wmiDP0_MCmd ;
  assign dp0_wmiS0_MData = wmiDP0_MData ;
  assign dp0_wmiS0_MDataByteEn = wmiDP0_MDataByteEn ;
  assign dp0_wmiS0_MReqInfo = wmiDP0_MReqInfo ;
  assign dp0_wmiS0_arg_mFlag = wmiDP0_arg_mFlag ;
  assign dp0_wti_s_req = itc0_wti_m_req ;
  assign dp0_wmiS0_MReqLast = wmiDP0_MReqLast ;
  assign dp0_wmiS0_MDataValid = wmiDP0_MDataValid ;
  assign dp0_wmiS0_MDataLast = wmiDP0_MDataLast ;
  assign dp0_wmiS0_MReset_n = wmiDP0_MReset_n ;
  assign dp0_EN_server_request_put =
	     noc_sm1_RDY_c0_request_get && dp0_RDY_server_request_put ;
  assign dp0_EN_server_response_get =
	     noc_sm1_RDY_c0_response_put && dp0_RDY_server_response_get ;

  // submodule dp1
  assign dp1_server_request_put = noc_sm2_c0_request_get ;
  assign dp1_wci_s_MAddr = cp_wci_Vm_14_MAddr ;
  assign dp1_wci_s_MAddrSpace = cp_wci_Vm_14_MAddrSpace ;
  assign dp1_wci_s_MByteEn = cp_wci_Vm_14_MByteEn ;
  assign dp1_wci_s_MCmd = cp_wci_Vm_14_MCmd ;
  assign dp1_wci_s_MData = cp_wci_Vm_14_MData ;
  assign dp1_wci_s_MFlag = cp_wci_Vm_14_MFlag ;
  assign dp1_wmiS0_MAddr = wmiDP1_MAddr ;
  assign dp1_wmiS0_MAddrSpace = wmiDP1_MAddrSpace ;
  assign dp1_wmiS0_MBurstLength = wmiDP1_MBurstLength ;
  assign dp1_wmiS0_MCmd = wmiDP1_MCmd ;
  assign dp1_wmiS0_MData = wmiDP1_MData ;
  assign dp1_wmiS0_MDataByteEn = wmiDP1_MDataByteEn ;
  assign dp1_wmiS0_MReqInfo = wmiDP1_MReqInfo ;
  assign dp1_wmiS0_arg_mFlag = wmiDP1_arg_mFlag ;
  assign dp1_wti_s_req = itc1_wti_m_req ;
  assign dp1_wmiS0_MReqLast = wmiDP1_MReqLast ;
  assign dp1_wmiS0_MDataValid = wmiDP1_MDataValid ;
  assign dp1_wmiS0_MDataLast = wmiDP1_MDataLast ;
  assign dp1_wmiS0_MReset_n = wmiDP1_MReset_n ;
  assign dp1_EN_server_request_put =
	     noc_sm2_RDY_c0_request_get && dp1_RDY_server_request_put ;
  assign dp1_EN_server_response_get =
	     noc_sm2_RDY_c0_response_put && dp1_RDY_server_response_get ;

  // submodule itc0
  assign itc0_gpsTime_arg = cp_cpNow ;
  assign itc0_EN_gpsTime = itc0_RDY_gpsTime ;
  assign itc0_wti_m_SThreadBusy = dp0_wti_s_SThreadBusy ;
  assign itc0_wti_m_SReset_n = dp0_wti_s_SReset_n ;

  // submodule itc1
  assign itc1_gpsTime_arg = cp_cpNow ;
  assign itc1_EN_gpsTime = itc1_RDY_gpsTime ;
  assign itc1_wti_m_SThreadBusy = dp1_wti_s_SThreadBusy ;
  assign itc1_wti_m_SReset_n = dp1_wti_s_SReset_n ;

  // submodule noc_sm0
  assign noc_sm0_c0_response_put = cpTlp_server_response_get ;
  assign noc_sm0_c1_response_put = noc_sm1_s_response_get ;
  assign noc_sm0_s_request_put = server_request_put ;
  assign noc_sm0_EN_s_request_put = EN_server_request_put ;
  assign noc_sm0_EN_s_response_get = EN_server_response_get ;
  assign noc_sm0_EN_c0_request_get =
	     noc_sm0_RDY_c0_request_get && cpTlp_RDY_server_request_put ;
  assign noc_sm0_EN_c0_response_put =
	     noc_sm0_RDY_c0_response_put && cpTlp_RDY_server_response_get ;
  assign noc_sm0_EN_c1_request_get =
	     noc_sm1_RDY_s_request_put && noc_sm0_RDY_c1_request_get ;
  assign noc_sm0_EN_c1_response_put =
	     noc_sm1_RDY_s_response_get && noc_sm0_RDY_c1_response_put ;

  // submodule noc_sm1
  assign noc_sm1_c0_response_put = dp0_server_response_get ;
  assign noc_sm1_c1_response_put = noc_sm2_s_response_get ;
  assign noc_sm1_s_request_put = noc_sm0_c1_request_get ;
  assign noc_sm1_EN_s_request_put =
	     noc_sm1_RDY_s_request_put && noc_sm0_RDY_c1_request_get ;
  assign noc_sm1_EN_s_response_get =
	     noc_sm1_RDY_s_response_get && noc_sm0_RDY_c1_response_put ;
  assign noc_sm1_EN_c0_request_get =
	     noc_sm1_RDY_c0_request_get && dp0_RDY_server_request_put ;
  assign noc_sm1_EN_c0_response_put =
	     noc_sm1_RDY_c0_response_put && dp0_RDY_server_response_get ;
  assign noc_sm1_EN_c1_request_get =
	     noc_sm2_RDY_s_request_put && noc_sm1_RDY_c1_request_get ;
  assign noc_sm1_EN_c1_response_put =
	     noc_sm2_RDY_s_response_get && noc_sm1_RDY_c1_response_put ;

  // submodule noc_sm2
  assign noc_sm2_c0_response_put = dp1_server_response_get ;
  assign noc_sm2_c1_response_put = 153'h0 ;
  assign noc_sm2_s_request_put = noc_sm1_c1_request_get ;
  assign noc_sm2_EN_s_request_put =
	     noc_sm2_RDY_s_request_put && noc_sm1_RDY_c1_request_get ;
  assign noc_sm2_EN_s_response_get =
	     noc_sm2_RDY_s_response_get && noc_sm1_RDY_c1_response_put ;
  assign noc_sm2_EN_c0_request_get =
	     noc_sm2_RDY_c0_request_get && dp1_RDY_server_request_put ;
  assign noc_sm2_EN_c0_response_put =
	     noc_sm2_RDY_c0_response_put && dp1_RDY_server_response_get ;
  assign noc_sm2_EN_c1_request_get = noc_sm2_RDY_c1_request_get ;
  assign noc_sm2_EN_c1_response_put = 1'b0 ;

  // remaining internal signals
  assign cpMux_aActF_i_notEmpty__1_AND_IF_cpMux_aActF_f_ETC___d46 =
	     cpMux_aActF_EMPTY_N &&
	     (cpMux_aActF_D_OUT ? cpMux_respAF_FULL_N : cpMux_respBF_FULL_N) ;
  assign x__h2806 = { pciDevice[15:3], 3'd0 } ;
  assign x__h3100 = { pciDevice[15:3], 3'd1 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        noc_chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (noc_chompCnt_EN)
	  noc_chompCnt <= `BSV_ASSIGNMENT_DELAY noc_chompCnt_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    noc_chompCnt = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (noc_sm2_RDY_c1_request_get)
	begin
	  v__h1839 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (noc_sm2_RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h1839,
		 $unsigned(noc_chompCnt));
  end
  // synopsys translate_on
endmodule  // mkOCInf16B

