//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sun Sep  2 15:02:31 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// RDY_macAddr                    O     1 const
// RDY_l2Dst                      O     1 const
// RDY_l2Typ                      O     1 const
// client_request_get             O    40
// RDY_client_request_get         O     1 reg
// RDY_client_response_put        O     1 reg
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// RST_N_gmii_rstn                O     1 reset
// CLK_gmii_rx_clk                I     1 clock
// CLK_gmiixo_clk                 I     1 clock
// RST_N_gmiixo_rst               I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// macAddr_u                      I    48 reg
// l2Dst_d                        I    48 reg
// l2Typ_t                        I    16 reg
// client_response_put            I    40
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// EN_macAddr                     I     1
// EN_l2Dst                       I     1
// EN_l2Typ                       I     1
// EN_client_response_put         I     1
// EN_client_request_get          I     1
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGbeQABS(CLK_gmii_rx_clk,
		 CLK_gmiixo_clk,
		 RST_N_gmiixo_rst,
		 CLK,
		 RST_N,

		 mdio_mdd,
		 mdio_mdc,

		 macAddr_u,
		 EN_macAddr,
		 RDY_macAddr,

		 l2Dst_d,
		 EN_l2Dst,
		 RDY_l2Dst,

		 l2Typ_t,
		 EN_l2Typ,
		 RDY_l2Typ,

		 EN_client_request_get,
		 client_request_get,
		 RDY_client_request_get,

		 client_response_put,
		 EN_client_response_put,
		 RDY_client_response_put,

		 gmii_rx_rxd_i,

		 gmii_rx_rx_dv_i,

		 gmii_rx_rx_er_i,

		 gmii_tx_txd,

		 gmii_tx_tx_en,

		 gmii_tx_tx_er,

		 gmii_col_i,

		 gmii_crs_i,

		 gmii_intr_i,

		 gmii_led,

		 CLK_gmii_tx_tx_clk,
		 CLK_GATE_gmii_tx_tx_clk,

		 CLK_rxclkBnd,
		 CLK_GATE_rxclkBnd,

		 RST_N_gmii_rstn);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  CLK_gmii_rx_clk;
  input  CLK_gmiixo_clk;
  input  RST_N_gmiixo_rst;
  input  CLK;
  input  RST_N;

  inout  mdio_mdd;
  inout  mdio_mdc;

  // action method macAddr
  input  [47 : 0] macAddr_u;
  input  EN_macAddr;
  output RDY_macAddr;

  // action method l2Dst
  input  [47 : 0] l2Dst_d;
  input  EN_l2Dst;
  output RDY_l2Dst;

  // action method l2Typ
  input  [15 : 0] l2Typ_t;
  input  EN_l2Typ;
  output RDY_l2Typ;

  // actionvalue method client_request_get
  input  EN_client_request_get;
  output [39 : 0] client_request_get;
  output RDY_client_request_get;

  // action method client_response_put
  input  [39 : 0] client_response_put;
  input  EN_client_response_put;
  output RDY_client_response_put;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // output resets
  output RST_N_gmii_rstn;

  // signals for module outputs
  wire [39 : 0] client_request_get;
  wire [7 : 0] gmii_tx_txd;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       RDY_client_request_get,
       RDY_client_response_put,
       RDY_l2Dst,
       RDY_l2Typ,
       RDY_macAddr,
       RST_N_gmii_rstn,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er;

  // inlined wires
  wire mdi_pwTick$whas;

  // register gbeControl
  reg [31 : 0] gbeControl;
  wire [31 : 0] gbeControl$D_IN;
  wire gbeControl$EN;

  // register l2DstR
  reg [47 : 0] l2DstR;
  wire [47 : 0] l2DstR$D_IN;
  wire l2DstR$EN;

  // register l2TypR
  reg [15 : 0] l2TypR;
  wire [15 : 0] l2TypR$D_IN;
  wire l2TypR$EN;

  // register macAddress
  reg [47 : 0] macAddress;
  wire [47 : 0] macAddress$D_IN;
  wire macAddress$EN;

  // register mdi_rMDC
  reg mdi_rMDC;
  wire mdi_rMDC$D_IN, mdi_rMDC$EN;

  // register mdi_rMDD
  reg mdi_rMDD;
  wire mdi_rMDD$D_IN, mdi_rMDD$EN;

  // register mdi_rOutEn
  reg mdi_rOutEn;
  wire mdi_rOutEn$D_IN, mdi_rOutEn$EN;

  // register mdi_rPhyAddr
  reg [4 : 0] mdi_rPhyAddr;
  wire [4 : 0] mdi_rPhyAddr$D_IN;
  wire mdi_rPhyAddr$EN;

  // register mdi_rRegAddr
  reg [4 : 0] mdi_rRegAddr;
  wire [4 : 0] mdi_rRegAddr$D_IN;
  wire mdi_rRegAddr$EN;

  // register mdi_rState
  reg mdi_rState;
  wire mdi_rState$D_IN, mdi_rState$EN;

  // register mdi_rWrite
  reg mdi_rWrite;
  wire mdi_rWrite$D_IN, mdi_rWrite$EN;

  // register mdi_rWriteData
  reg [15 : 0] mdi_rWriteData;
  wire [15 : 0] mdi_rWriteData$D_IN;
  wire mdi_rWriteData$EN;

  // register mdi_vrReadData
  reg mdi_vrReadData;
  wire mdi_vrReadData$D_IN, mdi_vrReadData$EN;

  // register mdi_vrReadData_1
  reg mdi_vrReadData_1;
  wire mdi_vrReadData_1$D_IN, mdi_vrReadData_1$EN;

  // register mdi_vrReadData_10
  reg mdi_vrReadData_10;
  wire mdi_vrReadData_10$D_IN, mdi_vrReadData_10$EN;

  // register mdi_vrReadData_11
  reg mdi_vrReadData_11;
  wire mdi_vrReadData_11$D_IN, mdi_vrReadData_11$EN;

  // register mdi_vrReadData_12
  reg mdi_vrReadData_12;
  wire mdi_vrReadData_12$D_IN, mdi_vrReadData_12$EN;

  // register mdi_vrReadData_13
  reg mdi_vrReadData_13;
  wire mdi_vrReadData_13$D_IN, mdi_vrReadData_13$EN;

  // register mdi_vrReadData_14
  reg mdi_vrReadData_14;
  wire mdi_vrReadData_14$D_IN, mdi_vrReadData_14$EN;

  // register mdi_vrReadData_15
  reg mdi_vrReadData_15;
  wire mdi_vrReadData_15$D_IN, mdi_vrReadData_15$EN;

  // register mdi_vrReadData_2
  reg mdi_vrReadData_2;
  wire mdi_vrReadData_2$D_IN, mdi_vrReadData_2$EN;

  // register mdi_vrReadData_3
  reg mdi_vrReadData_3;
  wire mdi_vrReadData_3$D_IN, mdi_vrReadData_3$EN;

  // register mdi_vrReadData_4
  reg mdi_vrReadData_4;
  wire mdi_vrReadData_4$D_IN, mdi_vrReadData_4$EN;

  // register mdi_vrReadData_5
  reg mdi_vrReadData_5;
  wire mdi_vrReadData_5$D_IN, mdi_vrReadData_5$EN;

  // register mdi_vrReadData_6
  reg mdi_vrReadData_6;
  wire mdi_vrReadData_6$D_IN, mdi_vrReadData_6$EN;

  // register mdi_vrReadData_7
  reg mdi_vrReadData_7;
  wire mdi_vrReadData_7$D_IN, mdi_vrReadData_7$EN;

  // register mdi_vrReadData_8
  reg mdi_vrReadData_8;
  wire mdi_vrReadData_8$D_IN, mdi_vrReadData_8$EN;

  // register mdi_vrReadData_9
  reg mdi_vrReadData_9;
  wire mdi_vrReadData_9$D_IN, mdi_vrReadData_9$EN;

  // register phyMdiInit
  reg phyMdiInit;
  wire phyMdiInit$D_IN, phyMdiInit$EN;

  // register phyResetWaitCnt
  reg [24 : 0] phyResetWaitCnt;
  wire [24 : 0] phyResetWaitCnt$D_IN;
  wire phyResetWaitCnt$EN;

  // register rxAbortEOPC
  reg [31 : 0] rxAbortEOPC;
  wire [31 : 0] rxAbortEOPC$D_IN;
  wire rxAbortEOPC$EN;

  // register rxCount
  reg [31 : 0] rxCount;
  wire [31 : 0] rxCount$D_IN;
  wire rxCount$EN;

  // register rxDCPCnt
  reg [31 : 0] rxDCPCnt;
  wire [31 : 0] rxDCPCnt$D_IN;
  wire rxDCPCnt$EN;

  // register rxDCPMesg
  reg [111 : 0] rxDCPMesg;
  wire [111 : 0] rxDCPMesg$D_IN;
  wire rxDCPMesg$EN;

  // register rxDCPMesgPos
  reg [4 : 0] rxDCPMesgPos;
  wire [4 : 0] rxDCPMesgPos$D_IN;
  wire rxDCPMesgPos$EN;

  // register rxDCPPLI
  reg [7 : 0] rxDCPPLI;
  wire [7 : 0] rxDCPPLI$D_IN;
  wire rxDCPPLI$EN;

  // register rxDCPmt
  reg [7 : 0] rxDCPmt;
  wire [7 : 0] rxDCPmt$D_IN;
  wire rxDCPmt$EN;

  // register rxDCPtag
  reg [7 : 0] rxDCPtag;
  wire [7 : 0] rxDCPtag$D_IN;
  wire rxDCPtag$EN;

  // register rxDropCnt
  reg [31 : 0] rxDropCnt;
  wire [31 : 0] rxDropCnt$D_IN;
  wire rxDropCnt$EN;

  // register rxDropFrame
  reg rxDropFrame;
  wire rxDropFrame$D_IN, rxDropFrame$EN;

  // register rxEmptyEOPC
  reg [31 : 0] rxEmptyEOPC;
  wire [31 : 0] rxEmptyEOPC$D_IN;
  wire rxEmptyEOPC$EN;

  // register rxHdrMatchCnt
  reg [31 : 0] rxHdrMatchCnt;
  wire [31 : 0] rxHdrMatchCnt$D_IN;
  wire rxHdrMatchCnt$EN;

  // register rxHdr_mCnt
  reg [3 : 0] rxHdr_mCnt;
  wire [3 : 0] rxHdr_mCnt$D_IN;
  wire rxHdr_mCnt$EN;

  // register rxHdr_pV
  reg [112 : 0] rxHdr_pV;
  wire [112 : 0] rxHdr_pV$D_IN;
  wire rxHdr_pV$EN;

  // register rxHdr_pos
  reg [3 : 0] rxHdr_pos;
  wire [3 : 0] rxHdr_pos$D_IN;
  wire rxHdr_pos$EN;

  // register rxHdr_sV
  reg [112 : 0] rxHdr_sV;
  wire [112 : 0] rxHdr_sV$D_IN;
  wire rxHdr_sV$EN;

  // register rxHeadCap
  reg [127 : 0] rxHeadCap;
  wire [127 : 0] rxHeadCap$D_IN;
  wire rxHeadCap$EN;

  // register rxLenCount
  reg [31 : 0] rxLenCount;
  wire [31 : 0] rxLenCount$D_IN;
  wire rxLenCount$EN;

  // register rxLenLast
  reg [31 : 0] rxLenLast;
  wire [31 : 0] rxLenLast$D_IN;
  wire rxLenLast$EN;

  // register rxOvfCount
  reg [31 : 0] rxOvfCount;
  wire [31 : 0] rxOvfCount$D_IN;
  wire rxOvfCount$EN;

  // register rxPipe
  reg [31 : 0] rxPipe;
  wire [31 : 0] rxPipe$D_IN;
  wire rxPipe$EN;

  // register rxPos
  reg [1 : 0] rxPos;
  wire [1 : 0] rxPos$D_IN;
  wire rxPos$EN;

  // register rxValidEOPC
  reg [31 : 0] rxValidEOPC;
  wire [31 : 0] rxValidEOPC$D_IN;
  wire rxValidEOPC$EN;

  // register rxValidNoEOPC
  reg [31 : 0] rxValidNoEOPC;
  wire [31 : 0] rxValidNoEOPC$D_IN;
  wire rxValidNoEOPC$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register txCount
  reg [31 : 0] txCount;
  wire [31 : 0] txCount$D_IN;
  wire txCount$EN;

  // register txDBGCnt
  reg [31 : 0] txDBGCnt;
  wire [31 : 0] txDBGCnt$D_IN;
  wire txDBGCnt$EN;

  // register txDBGPos
  reg [4 : 0] txDBGPos;
  wire [4 : 0] txDBGPos$D_IN;
  wire txDBGPos$EN;

  // register txDCPCnt
  reg [31 : 0] txDCPCnt;
  wire [31 : 0] txDCPCnt$D_IN;
  wire txDCPCnt$EN;

  // register txDCPPos
  reg [4 : 0] txDCPPos;
  wire [4 : 0] txDCPPos$D_IN;
  wire txDCPPos$EN;

  // register txUndCount
  reg [31 : 0] txUndCount;
  wire [31 : 0] txUndCount$D_IN;
  wire txUndCount$EN;

  // ports of submodule eReqF
  wire [39 : 0] eReqF$D_IN, eReqF$D_OUT;
  wire eReqF$CLR, eReqF$DEQ, eReqF$EMPTY_N, eReqF$ENQ;

  // ports of submodule eRespF
  wire [39 : 0] eRespF$D_IN;
  wire eRespF$CLR, eRespF$DEQ, eRespF$ENQ, eRespF$FULL_N;

  // ports of submodule gmac
  wire [39 : 0] gmac$tx_put;
  wire [7 : 0] gmac$gmii_rx_rxd_i, gmac$gmii_tx_txd;
  wire gmac$CLK_gmii_tx_tx_clk,
       gmac$CLK_rxclkBnd,
       gmac$EN_rxOperate,
       gmac$EN_rx_get,
       gmac$EN_txOperate,
       gmac$EN_tx_put,
       gmac$gmii_col_i,
       gmac$gmii_crs_i,
       gmac$gmii_intr_i,
       gmac$gmii_led,
       gmac$gmii_rx_rx_dv_i,
       gmac$gmii_rx_rx_er_i,
       gmac$gmii_tx_tx_en,
       gmac$gmii_tx_tx_er,
       gmac$rxOverFlow,
       gmac$txUnderFlow;

  // ports of submodule mdi_fRequest
  wire [26 : 0] mdi_fRequest$D_IN, mdi_fRequest$D_OUT;
  wire mdi_fRequest$CLR,
       mdi_fRequest$DEQ,
       mdi_fRequest$EMPTY_N,
       mdi_fRequest$ENQ,
       mdi_fRequest$FULL_N;

  // ports of submodule mdi_fResponse
  wire [16 : 0] mdi_fResponse$D_IN;
  wire mdi_fResponse$CLR,
       mdi_fResponse$DEQ,
       mdi_fResponse$ENQ,
       mdi_fResponse$FULL_N;

  // ports of submodule mdi_rPlayIndex
  wire [7 : 0] mdi_rPlayIndex$DATA_A,
	       mdi_rPlayIndex$DATA_B,
	       mdi_rPlayIndex$DATA_C,
	       mdi_rPlayIndex$DATA_F,
	       mdi_rPlayIndex$Q_OUT;
  wire mdi_rPlayIndex$ADDA,
       mdi_rPlayIndex$ADDB,
       mdi_rPlayIndex$SETC,
       mdi_rPlayIndex$SETF;

  // ports of submodule mdi_rPrescaler
  wire [3 : 0] mdi_rPrescaler$DATA_A,
	       mdi_rPrescaler$DATA_B,
	       mdi_rPrescaler$DATA_C,
	       mdi_rPrescaler$DATA_F,
	       mdi_rPrescaler$Q_OUT;
  wire mdi_rPrescaler$ADDA,
       mdi_rPrescaler$ADDB,
       mdi_rPrescaler$SETC,
       mdi_rPrescaler$SETF;

  // ports of submodule mdi_tMDC
  wire mdi_tMDC$IO;

  // ports of submodule mdi_tMDD
  wire mdi_tMDD$IO, mdi_tMDD$O;

  // ports of submodule phyRst
  wire phyRst$ASSERT_IN, phyRst$OUT_RST_N;

  // ports of submodule rxDCPHdrF
  wire [111 : 0] rxDCPHdrF$D_IN;
  wire rxDCPHdrF$CLR, rxDCPHdrF$DEQ, rxDCPHdrF$ENQ;

  // ports of submodule txDBGF
  wire [31 : 0] txDBGF$D_IN;
  wire txDBGF$CLR, txDBGF$DEQ, txDBGF$ENQ;

  // ports of submodule txDCPHdrF
  wire [111 : 0] txDCPHdrF$D_IN;
  wire txDCPHdrF$CLR, txDCPHdrF$DEQ, txDCPHdrF$ENQ;

  // rule scheduling signals
  wire WILL_FIRE_RL_mdi_run_frame;

  // inputs to muxes for submodule ports
  wire MUX_mdi_rState$write_1__SEL_1, MUX_mdi_rState$write_1__SEL_2;

  // remaining internal signals
  reg [1 : 0] CASE_client_response_put_BITS_19_TO_18_3_0_cli_ETC__q7,
	      CASE_client_response_put_BITS_29_TO_28_3_0_cli_ETC__q6,
	      CASE_client_response_put_BITS_39_TO_38_3_0_cli_ETC__q5,
	      CASE_client_response_put_BITS_9_TO_8_3_0_clien_ETC__q8,
	      CASE_eReqFD_OUT_BITS_19_TO_18_3_0_eReqFD_OUT_ETC__q3,
	      CASE_eReqFD_OUT_BITS_29_TO_28_3_0_eReqFD_OUT_ETC__q2,
	      CASE_eReqFD_OUT_BITS_39_TO_38_3_0_eReqFD_OUT_ETC__q1,
	      CASE_eReqFD_OUT_BITS_9_TO_8_3_0_eReqFD_OUT_B_ETC__q4;
  wire [194 : 0] _1434766110945527031733894725304609466537681244_ETC__q9,
		 _643371375338640__q10,
		 bs__h14895,
		 bs__h2370;
  wire [15 : 0] x_data__h18093;
  wire [2 : 0] d0__h1996,
	       d10__h1986,
	       d11__h1985,
	       d12__h1984,
	       d13__h1983,
	       d14__h1982,
	       d15__h1981,
	       d1__h1995,
	       d2__h1994,
	       d3__h1993,
	       d4__h1992,
	       d5__h1991,
	       d6__h1990,
	       d7__h1989,
	       d8__h1988,
	       d9__h1987,
	       pa0__h1973,
	       pa1__h1972,
	       pa2__h1971,
	       pa3__h1970,
	       pa4__h1969,
	       ra0__h1979,
	       ra1__h1978,
	       ra2__h1977,
	       ra3__h1976,
	       ra4__h1975;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = gmac$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // output resets
  assign RST_N_gmii_rstn = phyRst$OUT_RST_N ;

  // action method macAddr
  assign RDY_macAddr = 1'd1 ;

  // action method l2Dst
  assign RDY_l2Dst = 1'd1 ;

  // action method l2Typ
  assign RDY_l2Typ = 1'd1 ;

  // actionvalue method client_request_get
  assign client_request_get =
	     { CASE_eReqFD_OUT_BITS_39_TO_38_3_0_eReqFD_OUT_ETC__q1,
	       eReqF$D_OUT[37:30],
	       CASE_eReqFD_OUT_BITS_29_TO_28_3_0_eReqFD_OUT_ETC__q2,
	       eReqF$D_OUT[27:20],
	       CASE_eReqFD_OUT_BITS_19_TO_18_3_0_eReqFD_OUT_ETC__q3,
	       eReqF$D_OUT[17:10],
	       CASE_eReqFD_OUT_BITS_9_TO_8_3_0_eReqFD_OUT_B_ETC__q4,
	       eReqF$D_OUT[7:0] } ;
  assign RDY_client_request_get = eReqF$EMPTY_N ;

  // action method client_response_put
  assign RDY_client_response_put = eRespF$FULL_N ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac$gmii_tx_tx_er ;

  // value method gmii_led
  assign gmii_led = gmac$gmii_led ;

  // submodule eReqF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) eReqF(.RST_N(RST_N),
						 .CLK(CLK),
						 .D_IN(eReqF$D_IN),
						 .ENQ(eReqF$ENQ),
						 .DEQ(eReqF$DEQ),
						 .CLR(eReqF$CLR),
						 .D_OUT(eReqF$D_OUT),
						 .FULL_N(),
						 .EMPTY_N(eReqF$EMPTY_N));

  // submodule eRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) eRespF(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(eRespF$D_IN),
						  .ENQ(eRespF$ENQ),
						  .DEQ(eRespF$DEQ),
						  .CLR(eRespF$CLR),
						  .D_OUT(),
						  .FULL_N(eRespF$FULL_N),
						  .EMPTY_N());

  // submodule gmac
  mkQBGMAC gmac(.CLK_rxClk(CLK_gmii_rx_clk),
		.CLK_txClk(CLK_gmiixo_clk),
		.RST_N_gmRst(RST_N_gmiixo_rst),
		.CLK(CLK),
		.RST_N(RST_N),
		.gmii_col_i(gmac$gmii_col_i),
		.gmii_crs_i(gmac$gmii_crs_i),
		.gmii_intr_i(gmac$gmii_intr_i),
		.gmii_rx_rx_dv_i(gmac$gmii_rx_rx_dv_i),
		.gmii_rx_rx_er_i(gmac$gmii_rx_rx_er_i),
		.gmii_rx_rxd_i(gmac$gmii_rx_rxd_i),
		.tx_put(gmac$tx_put),
		.EN_rx_get(gmac$EN_rx_get),
		.EN_tx_put(gmac$EN_tx_put),
		.EN_rxOperate(gmac$EN_rxOperate),
		.EN_txOperate(gmac$EN_txOperate),
		.gmii_tx_txd(gmac$gmii_tx_txd),
		.gmii_tx_tx_en(gmac$gmii_tx_tx_en),
		.gmii_tx_tx_er(gmac$gmii_tx_tx_er),
		.gmii_led(gmac$gmii_led),
		.rx_get(),
		.RDY_rx_get(),
		.RDY_tx_put(),
		.RDY_rxOperate(),
		.RDY_txOperate(),
		.rxOverFlow(gmac$rxOverFlow),
		.RDY_rxOverFlow(),
		.txUnderFlow(gmac$txUnderFlow),
		.RDY_txUnderFlow(),
		.phyInterrupt(),
		.RDY_phyInterrupt(),
		.CLK_gmii_tx_tx_clk(gmac$CLK_gmii_tx_tx_clk),
		.CLK_GATE_gmii_tx_tx_clk(),
		.CLK_rxclkBnd(gmac$CLK_rxclkBnd),
		.CLK_GATE_rxclkBnd());

  // submodule mdi_fRequest
  FIFO2 #(.width(32'd27), .guarded(32'd1)) mdi_fRequest(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(mdi_fRequest$D_IN),
							.ENQ(mdi_fRequest$ENQ),
							.DEQ(mdi_fRequest$DEQ),
							.CLR(mdi_fRequest$CLR),
							.D_OUT(mdi_fRequest$D_OUT),
							.FULL_N(mdi_fRequest$FULL_N),
							.EMPTY_N(mdi_fRequest$EMPTY_N));

  // submodule mdi_fResponse
  FIFO2 #(.width(32'd17), .guarded(32'd1)) mdi_fResponse(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(mdi_fResponse$D_IN),
							 .ENQ(mdi_fResponse$ENQ),
							 .DEQ(mdi_fResponse$DEQ),
							 .CLR(mdi_fResponse$CLR),
							 .D_OUT(),
							 .FULL_N(mdi_fResponse$FULL_N),
							 .EMPTY_N());

  // submodule mdi_rPlayIndex
  Counter #(.width(32'd8), .init(8'd0)) mdi_rPlayIndex(.CLK(CLK),
						       .RST_N(RST_N),
						       .DATA_A(mdi_rPlayIndex$DATA_A),
						       .DATA_B(mdi_rPlayIndex$DATA_B),
						       .DATA_C(mdi_rPlayIndex$DATA_C),
						       .DATA_F(mdi_rPlayIndex$DATA_F),
						       .ADDA(mdi_rPlayIndex$ADDA),
						       .ADDB(mdi_rPlayIndex$ADDB),
						       .SETC(mdi_rPlayIndex$SETC),
						       .SETF(mdi_rPlayIndex$SETF),
						       .Q_OUT(mdi_rPlayIndex$Q_OUT));

  // submodule mdi_rPrescaler
  Counter #(.width(32'd4), .init(4'd6)) mdi_rPrescaler(.CLK(CLK),
						       .RST_N(RST_N),
						       .DATA_A(mdi_rPrescaler$DATA_A),
						       .DATA_B(mdi_rPrescaler$DATA_B),
						       .DATA_C(mdi_rPrescaler$DATA_C),
						       .DATA_F(mdi_rPrescaler$DATA_F),
						       .ADDA(mdi_rPrescaler$ADDA),
						       .ADDB(mdi_rPrescaler$ADDB),
						       .SETC(mdi_rPrescaler$SETC),
						       .SETF(mdi_rPrescaler$SETF),
						       .Q_OUT(mdi_rPrescaler$Q_OUT));

  // submodule mdi_tMDC
  TriState #(.width(32'd1)) mdi_tMDC(.I(mdi_rMDC),
				     .OE(1'd1),
				     .O(),
				     .IO(mdio_mdc));

  // submodule mdi_tMDD
  TriState #(.width(32'd1)) mdi_tMDD(.I(mdi_rMDD),
				     .OE(mdi_rOutEn),
				     .O(mdi_tMDD$O),
				     .IO(mdio_mdd));

  // submodule phyRst
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) phyRst(.CLK(CLK),
						      .RST_N(RST_N),
						      .DST_CLK(CLK),
						      .ASSERT_IN(phyRst$ASSERT_IN),
						      .ASSERT_OUT(),
						      .OUT_RST_N(phyRst$OUT_RST_N));

  // submodule rxDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) rxDCPHdrF(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(rxDCPHdrF$D_IN),
						      .ENQ(rxDCPHdrF$ENQ),
						      .DEQ(rxDCPHdrF$DEQ),
						      .CLR(rxDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule txDBGF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) txDBGF(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(txDBGF$D_IN),
						  .ENQ(txDBGF$ENQ),
						  .DEQ(txDBGF$DEQ),
						  .CLR(txDBGF$CLR),
						  .D_OUT(),
						  .FULL_N(),
						  .EMPTY_N());

  // submodule txDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) txDCPHdrF(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(txDCPHdrF$D_IN),
						      .ENQ(txDCPHdrF$ENQ),
						      .DEQ(txDCPHdrF$DEQ),
						      .CLR(txDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // rule RL_mdi_run_frame
  assign WILL_FIRE_RL_mdi_run_frame =
	     (mdi_rPlayIndex$Q_OUT != 8'd0 || mdi_rWrite ||
	      mdi_fResponse$FULL_N) &&
	     mdi_rState &&
	     mdi_rPrescaler$Q_OUT == 4'd0 ;

  // inputs to muxes for submodule ports
  assign MUX_mdi_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ;
  assign MUX_mdi_rState$write_1__SEL_2 = mdi_fRequest$EMPTY_N && !mdi_rState ;

  // inlined wires
  assign mdi_pwTick$whas = mdi_rPrescaler$Q_OUT == 4'd0 ;

  // register gbeControl
  assign gbeControl$D_IN = 32'h0 ;
  assign gbeControl$EN = 1'b0 ;

  // register l2DstR
  assign l2DstR$D_IN = l2Dst_d ;
  assign l2DstR$EN = EN_l2Dst ;

  // register l2TypR
  assign l2TypR$D_IN = l2Typ_t ;
  assign l2TypR$EN = EN_l2Typ ;

  // register macAddress
  assign macAddress$D_IN = macAddr_u ;
  assign macAddress$EN = EN_macAddr ;

  // register mdi_rMDC
  assign mdi_rMDC$D_IN =
	     _1434766110945527031733894725304609466537681244_ETC__q9[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rMDC$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rMDD
  assign mdi_rMDD$D_IN = bs__h2370[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rMDD$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rOutEn
  assign mdi_rOutEn$D_IN = bs__h14895[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rOutEn$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rPhyAddr
  assign mdi_rPhyAddr$D_IN = mdi_fRequest$D_OUT[25:21] ;
  assign mdi_rPhyAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rRegAddr
  assign mdi_rRegAddr$D_IN = mdi_fRequest$D_OUT[20:16] ;
  assign mdi_rRegAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rState
  assign mdi_rState$D_IN = !MUX_mdi_rState$write_1__SEL_1 ;
  assign mdi_rState$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ||
	     mdi_fRequest$EMPTY_N && !mdi_rState ;

  // register mdi_rWrite
  assign mdi_rWrite$D_IN = mdi_fRequest$D_OUT[26] ;
  assign mdi_rWrite$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rWriteData
  assign mdi_rWriteData$D_IN = mdi_fRequest$D_OUT[15:0] ;
  assign mdi_rWriteData$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_vrReadData
  assign mdi_vrReadData$D_IN = mdi_tMDD$O ;
  assign mdi_vrReadData$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_1
  assign mdi_vrReadData_1$D_IN = mdi_vrReadData ;
  assign mdi_vrReadData_1$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_10
  assign mdi_vrReadData_10$D_IN = mdi_vrReadData_9 ;
  assign mdi_vrReadData_10$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_11
  assign mdi_vrReadData_11$D_IN = mdi_vrReadData_10 ;
  assign mdi_vrReadData_11$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_12
  assign mdi_vrReadData_12$D_IN = mdi_vrReadData_11 ;
  assign mdi_vrReadData_12$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_13
  assign mdi_vrReadData_13$D_IN = mdi_vrReadData_12 ;
  assign mdi_vrReadData_13$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_14
  assign mdi_vrReadData_14$D_IN = mdi_vrReadData_13 ;
  assign mdi_vrReadData_14$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_15
  assign mdi_vrReadData_15$D_IN = mdi_vrReadData_14 ;
  assign mdi_vrReadData_15$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_2
  assign mdi_vrReadData_2$D_IN = mdi_vrReadData_1 ;
  assign mdi_vrReadData_2$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_3
  assign mdi_vrReadData_3$D_IN = mdi_vrReadData_2 ;
  assign mdi_vrReadData_3$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_4
  assign mdi_vrReadData_4$D_IN = mdi_vrReadData_3 ;
  assign mdi_vrReadData_4$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_5
  assign mdi_vrReadData_5$D_IN = mdi_vrReadData_4 ;
  assign mdi_vrReadData_5$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_6
  assign mdi_vrReadData_6$D_IN = mdi_vrReadData_5 ;
  assign mdi_vrReadData_6$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_7
  assign mdi_vrReadData_7$D_IN = mdi_vrReadData_6 ;
  assign mdi_vrReadData_7$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_8
  assign mdi_vrReadData_8$D_IN = mdi_vrReadData_7 ;
  assign mdi_vrReadData_8$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_9
  assign mdi_vrReadData_9$D_IN = mdi_vrReadData_8 ;
  assign mdi_vrReadData_9$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q10[mdi_rPlayIndex$Q_OUT] ;

  // register phyMdiInit
  assign phyMdiInit$D_IN = 1'd1 ;
  assign phyMdiInit$EN =
	     mdi_fRequest$FULL_N && phyResetWaitCnt == 25'd0 && !phyMdiInit ;

  // register phyResetWaitCnt
  assign phyResetWaitCnt$D_IN =
	     gbeControl[31] ?
	       25'd753125 :
	       (((phyResetWaitCnt ^ 25'h1000000) <= 25'd16777216) ?
		  25'd0 :
		  phyResetWaitCnt - 25'd1) ;
  assign phyResetWaitCnt$EN = 1'd1 ;

  // register rxAbortEOPC
  assign rxAbortEOPC$D_IN = 32'h0 ;
  assign rxAbortEOPC$EN = 1'b0 ;

  // register rxCount
  assign rxCount$D_IN = 32'h0 ;
  assign rxCount$EN = 1'b0 ;

  // register rxDCPCnt
  assign rxDCPCnt$D_IN = 32'h0 ;
  assign rxDCPCnt$EN = 1'b0 ;

  // register rxDCPMesg
  assign rxDCPMesg$D_IN = 112'h0 ;
  assign rxDCPMesg$EN = 1'b0 ;

  // register rxDCPMesgPos
  assign rxDCPMesgPos$D_IN = 5'd0 ;
  assign rxDCPMesgPos$EN = rxDropFrame ;

  // register rxDCPPLI
  assign rxDCPPLI$D_IN = 8'h0 ;
  assign rxDCPPLI$EN = 1'b0 ;

  // register rxDCPmt
  assign rxDCPmt$D_IN = 8'h0 ;
  assign rxDCPmt$EN = 1'b0 ;

  // register rxDCPtag
  assign rxDCPtag$D_IN = 8'h0 ;
  assign rxDCPtag$EN = 1'b0 ;

  // register rxDropCnt
  assign rxDropCnt$D_IN = rxDropCnt + 32'd1 ;
  assign rxDropCnt$EN = rxDropFrame ;

  // register rxDropFrame
  assign rxDropFrame$D_IN = 1'd0 ;
  assign rxDropFrame$EN = rxDropFrame ;

  // register rxEmptyEOPC
  assign rxEmptyEOPC$D_IN = 32'h0 ;
  assign rxEmptyEOPC$EN = 1'b0 ;

  // register rxHdrMatchCnt
  assign rxHdrMatchCnt$D_IN = 32'h0 ;
  assign rxHdrMatchCnt$EN = 1'b0 ;

  // register rxHdr_mCnt
  assign rxHdr_mCnt$D_IN = 4'd0 ;
  assign rxHdr_mCnt$EN = rxDropFrame ;

  // register rxHdr_pV
  assign rxHdr_pV$D_IN = 113'h0 ;
  assign rxHdr_pV$EN = 1'b0 ;

  // register rxHdr_pos
  assign rxHdr_pos$D_IN = 4'd0 ;
  assign rxHdr_pos$EN = rxDropFrame ;

  // register rxHdr_sV
  assign rxHdr_sV$D_IN = 113'h10000000000000000000000000000 ;
  assign rxHdr_sV$EN = rxDropFrame ;

  // register rxHeadCap
  assign rxHeadCap$D_IN = 128'h0 ;
  assign rxHeadCap$EN = 1'b0 ;

  // register rxLenCount
  assign rxLenCount$D_IN = 32'h0 ;
  assign rxLenCount$EN = 1'b0 ;

  // register rxLenLast
  assign rxLenLast$D_IN = 32'h0 ;
  assign rxLenLast$EN = 1'b0 ;

  // register rxOvfCount
  assign rxOvfCount$D_IN = rxOvfCount + 32'd1 ;
  assign rxOvfCount$EN = gmac$rxOverFlow ;

  // register rxPipe
  assign rxPipe$D_IN = 32'h0 ;
  assign rxPipe$EN = 1'b0 ;

  // register rxPos
  assign rxPos$D_IN = 2'h0 ;
  assign rxPos$EN = 1'b0 ;

  // register rxValidEOPC
  assign rxValidEOPC$D_IN = 32'h0 ;
  assign rxValidEOPC$EN = 1'b0 ;

  // register rxValidNoEOPC
  assign rxValidNoEOPC$D_IN = 32'h0 ;
  assign rxValidNoEOPC$EN = 1'b0 ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = 1'b0 ;
  assign splitReadInFlight$EN = 1'b0 ;

  // register txCount
  assign txCount$D_IN = 32'h0 ;
  assign txCount$EN = 1'b0 ;

  // register txDBGCnt
  assign txDBGCnt$D_IN = 32'h0 ;
  assign txDBGCnt$EN = 1'b0 ;

  // register txDBGPos
  assign txDBGPos$D_IN = 5'h0 ;
  assign txDBGPos$EN = 1'b0 ;

  // register txDCPCnt
  assign txDCPCnt$D_IN = 32'h0 ;
  assign txDCPCnt$EN = 1'b0 ;

  // register txDCPPos
  assign txDCPPos$D_IN = 5'h0 ;
  assign txDCPPos$EN = 1'b0 ;

  // register txUndCount
  assign txUndCount$D_IN = txUndCount + 32'd1 ;
  assign txUndCount$EN = gmac$txUnderFlow ;

  // submodule eReqF
  assign eReqF$D_IN = 40'h0 ;
  assign eReqF$ENQ = 1'b0 ;
  assign eReqF$DEQ = EN_client_request_get ;
  assign eReqF$CLR = 1'b0 ;

  // submodule eRespF
  assign eRespF$D_IN =
	     { CASE_client_response_put_BITS_39_TO_38_3_0_cli_ETC__q5,
	       client_response_put[37:30],
	       CASE_client_response_put_BITS_29_TO_28_3_0_cli_ETC__q6,
	       client_response_put[27:20],
	       CASE_client_response_put_BITS_19_TO_18_3_0_cli_ETC__q7,
	       client_response_put[17:10],
	       CASE_client_response_put_BITS_9_TO_8_3_0_clien_ETC__q8,
	       client_response_put[7:0] } ;
  assign eRespF$ENQ = EN_client_response_put ;
  assign eRespF$DEQ = 1'b0 ;
  assign eRespF$CLR = 1'b0 ;

  // submodule gmac
  assign gmac$gmii_col_i = gmii_col_i ;
  assign gmac$gmii_crs_i = gmii_crs_i ;
  assign gmac$gmii_intr_i = gmii_intr_i ;
  assign gmac$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac$tx_put = 40'h0 ;
  assign gmac$EN_rx_get = 1'b0 ;
  assign gmac$EN_tx_put = 1'b0 ;
  assign gmac$EN_rxOperate = phyMdiInit ;
  assign gmac$EN_txOperate = phyMdiInit ;

  // submodule mdi_fRequest
  assign mdi_fRequest$D_IN = { 1'd1, gbeControl[4:0], 21'd1890288 } ;
  assign mdi_fRequest$ENQ =
	     mdi_fRequest$FULL_N && phyResetWaitCnt == 25'd0 && !phyMdiInit ;
  assign mdi_fRequest$DEQ = MUX_mdi_rState$write_1__SEL_2 ;
  assign mdi_fRequest$CLR = 1'b0 ;

  // submodule mdi_fResponse
  assign mdi_fResponse$D_IN = { 1'd1, x_data__h18093 } ;
  assign mdi_fResponse$ENQ =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 &&
	     !mdi_rWrite ;
  assign mdi_fResponse$DEQ = 1'b0 ;
  assign mdi_fResponse$CLR = 1'b0 ;

  // submodule mdi_rPlayIndex
  assign mdi_rPlayIndex$DATA_A = 8'h0 ;
  assign mdi_rPlayIndex$DATA_B = 8'd255 ;
  assign mdi_rPlayIndex$DATA_C = 8'h0 ;
  assign mdi_rPlayIndex$DATA_F = 8'd194 ;
  assign mdi_rPlayIndex$ADDA = 1'b0 ;
  assign mdi_rPlayIndex$ADDB = WILL_FIRE_RL_mdi_run_frame ;
  assign mdi_rPlayIndex$SETC = 1'b0 ;
  assign mdi_rPlayIndex$SETF = MUX_mdi_rState$write_1__SEL_2 ;

  // submodule mdi_rPrescaler
  assign mdi_rPrescaler$DATA_A = 4'h0 ;
  assign mdi_rPrescaler$DATA_B = 4'd15 ;
  assign mdi_rPrescaler$DATA_C = 4'h0 ;
  assign mdi_rPrescaler$DATA_F = 4'd6 ;
  assign mdi_rPrescaler$ADDA = 1'b0 ;
  assign mdi_rPrescaler$ADDB = mdi_rPrescaler$Q_OUT != 4'd0 ;
  assign mdi_rPrescaler$SETC = 1'b0 ;
  assign mdi_rPrescaler$SETF = mdi_rPrescaler$Q_OUT == 4'd0 ;

  // submodule phyRst
  assign phyRst$ASSERT_IN = (phyResetWaitCnt ^ 25'h1000000) > 25'd17527216 ;

  // submodule rxDCPHdrF
  assign rxDCPHdrF$D_IN = 112'h0 ;
  assign rxDCPHdrF$ENQ = 1'b0 ;
  assign rxDCPHdrF$DEQ = 1'b0 ;
  assign rxDCPHdrF$CLR = 1'b0 ;

  // submodule txDBGF
  assign txDBGF$D_IN = 32'h0 ;
  assign txDBGF$ENQ = 1'b0 ;
  assign txDBGF$DEQ = 1'b0 ;
  assign txDBGF$CLR = 1'b0 ;

  // submodule txDCPHdrF
  assign txDCPHdrF$D_IN = 112'h0 ;
  assign txDCPHdrF$ENQ = 1'b0 ;
  assign txDCPHdrF$DEQ = 1'b0 ;
  assign txDCPHdrF$CLR = 1'b0 ;

  // remaining internal signals
  assign _1434766110945527031733894725304609466537681244_ETC__q9 =
	     195'h2492492492492492492492492492492492492492492492492 ;
  assign _643371375338640__q10 =
	     195'h0000000000000000000000000000000000002492492492490 ;
  assign bs__h14895 =
	     mdi_rWrite ?
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8 :
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000 ;
  assign bs__h2370 =
	     { mdi_rWrite ?
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1C7 :
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1F8,
	       pa4__h1969,
	       pa3__h1970,
	       pa2__h1971,
	       pa1__h1972,
	       pa0__h1973,
	       ra4__h1975,
	       ra3__h1976,
	       ra2__h1977,
	       ra1__h1978,
	       ra0__h1979,
	       6'd56,
	       d15__h1981,
	       d14__h1982,
	       d13__h1983,
	       d12__h1984,
	       d11__h1985,
	       d10__h1986,
	       d9__h1987,
	       d8__h1988,
	       d7__h1989,
	       d6__h1990,
	       d5__h1991,
	       d4__h1992,
	       d3__h1993,
	       d2__h1994,
	       d1__h1995,
	       d0__h1996,
	       3'b111 } ;
  assign d0__h1996 = {3{mdi_rWriteData[0]}} ;
  assign d10__h1986 = {3{mdi_rWriteData[10]}} ;
  assign d11__h1985 = {3{mdi_rWriteData[11]}} ;
  assign d12__h1984 = {3{mdi_rWriteData[12]}} ;
  assign d13__h1983 = {3{mdi_rWriteData[13]}} ;
  assign d14__h1982 = {3{mdi_rWriteData[14]}} ;
  assign d15__h1981 = {3{mdi_rWriteData[15]}} ;
  assign d1__h1995 = {3{mdi_rWriteData[1]}} ;
  assign d2__h1994 = {3{mdi_rWriteData[2]}} ;
  assign d3__h1993 = {3{mdi_rWriteData[3]}} ;
  assign d4__h1992 = {3{mdi_rWriteData[4]}} ;
  assign d5__h1991 = {3{mdi_rWriteData[5]}} ;
  assign d6__h1990 = {3{mdi_rWriteData[6]}} ;
  assign d7__h1989 = {3{mdi_rWriteData[7]}} ;
  assign d8__h1988 = {3{mdi_rWriteData[8]}} ;
  assign d9__h1987 = {3{mdi_rWriteData[9]}} ;
  assign pa0__h1973 = {3{mdi_rPhyAddr[0]}} ;
  assign pa1__h1972 = {3{mdi_rPhyAddr[1]}} ;
  assign pa2__h1971 = {3{mdi_rPhyAddr[2]}} ;
  assign pa3__h1970 = {3{mdi_rPhyAddr[3]}} ;
  assign pa4__h1969 = {3{mdi_rPhyAddr[4]}} ;
  assign ra0__h1979 = {3{mdi_rRegAddr[0]}} ;
  assign ra1__h1978 = {3{mdi_rRegAddr[1]}} ;
  assign ra2__h1977 = {3{mdi_rRegAddr[2]}} ;
  assign ra3__h1976 = {3{mdi_rRegAddr[3]}} ;
  assign ra4__h1975 = {3{mdi_rRegAddr[4]}} ;
  assign x_data__h18093 =
	     { mdi_vrReadData_15,
	       mdi_vrReadData_14,
	       mdi_vrReadData_13,
	       mdi_vrReadData_12,
	       mdi_vrReadData_11,
	       mdi_vrReadData_10,
	       mdi_vrReadData_9,
	       mdi_vrReadData_8,
	       mdi_vrReadData_7,
	       mdi_vrReadData_6,
	       mdi_vrReadData_5,
	       mdi_vrReadData_4,
	       mdi_vrReadData_3,
	       mdi_vrReadData_2,
	       mdi_vrReadData_1,
	       mdi_vrReadData } ;
  always@(eReqF$D_OUT)
  begin
    case (eReqF$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_39_TO_38_3_0_eReqFD_OUT_ETC__q1 =
	      eReqF$D_OUT[39:38];
      2'd3: CASE_eReqFD_OUT_BITS_39_TO_38_3_0_eReqFD_OUT_ETC__q1 = 2'd3;
    endcase
  end
  always@(eReqF$D_OUT)
  begin
    case (eReqF$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_29_TO_28_3_0_eReqFD_OUT_ETC__q2 =
	      eReqF$D_OUT[29:28];
      2'd3: CASE_eReqFD_OUT_BITS_29_TO_28_3_0_eReqFD_OUT_ETC__q2 = 2'd3;
    endcase
  end
  always@(eReqF$D_OUT)
  begin
    case (eReqF$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_19_TO_18_3_0_eReqFD_OUT_ETC__q3 =
	      eReqF$D_OUT[19:18];
      2'd3: CASE_eReqFD_OUT_BITS_19_TO_18_3_0_eReqFD_OUT_ETC__q3 = 2'd3;
    endcase
  end
  always@(eReqF$D_OUT)
  begin
    case (eReqF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_9_TO_8_3_0_eReqFD_OUT_B_ETC__q4 =
	      eReqF$D_OUT[9:8];
      2'd3: CASE_eReqFD_OUT_BITS_9_TO_8_3_0_eReqFD_OUT_B_ETC__q4 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_39_TO_38_3_0_cli_ETC__q5 =
	      client_response_put[39:38];
      2'd3: CASE_client_response_put_BITS_39_TO_38_3_0_cli_ETC__q5 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_29_TO_28_3_0_cli_ETC__q6 =
	      client_response_put[29:28];
      2'd3: CASE_client_response_put_BITS_29_TO_28_3_0_cli_ETC__q6 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_19_TO_18_3_0_cli_ETC__q7 =
	      client_response_put[19:18];
      2'd3: CASE_client_response_put_BITS_19_TO_18_3_0_cli_ETC__q7 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_9_TO_8_3_0_clien_ETC__q8 =
	      client_response_put[9:8];
      2'd3: CASE_client_response_put_BITS_9_TO_8_3_0_clien_ETC__q8 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        gbeControl <= `BSV_ASSIGNMENT_DELAY 32'h00000101;
	macAddress <= `BSV_ASSIGNMENT_DELAY 48'h000A35420100;
	mdi_rMDC <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mdi_rMDD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyMdiInit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY 25'd753125;
	rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rxDCPPLI <= `BSV_ASSIGNMENT_DELAY 8'd255;
	rxDropCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDropFrame <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_pV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHdr_pos <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_sV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHeadCap <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rxLenCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxLenLast <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxOvfCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rxValidEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	txCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDCPPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txUndCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (gbeControl$EN)
	  gbeControl <= `BSV_ASSIGNMENT_DELAY gbeControl$D_IN;
	if (macAddress$EN)
	  macAddress <= `BSV_ASSIGNMENT_DELAY macAddress$D_IN;
	if (mdi_rMDC$EN) mdi_rMDC <= `BSV_ASSIGNMENT_DELAY mdi_rMDC$D_IN;
	if (mdi_rMDD$EN) mdi_rMDD <= `BSV_ASSIGNMENT_DELAY mdi_rMDD$D_IN;
	if (mdi_rOutEn$EN)
	  mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY mdi_rOutEn$D_IN;
	if (mdi_rState$EN)
	  mdi_rState <= `BSV_ASSIGNMENT_DELAY mdi_rState$D_IN;
	if (phyMdiInit$EN)
	  phyMdiInit <= `BSV_ASSIGNMENT_DELAY phyMdiInit$D_IN;
	if (phyResetWaitCnt$EN)
	  phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY phyResetWaitCnt$D_IN;
	if (rxAbortEOPC$EN)
	  rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY rxAbortEOPC$D_IN;
	if (rxCount$EN) rxCount <= `BSV_ASSIGNMENT_DELAY rxCount$D_IN;
	if (rxDCPCnt$EN) rxDCPCnt <= `BSV_ASSIGNMENT_DELAY rxDCPCnt$D_IN;
	if (rxDCPMesgPos$EN)
	  rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY rxDCPMesgPos$D_IN;
	if (rxDCPPLI$EN) rxDCPPLI <= `BSV_ASSIGNMENT_DELAY rxDCPPLI$D_IN;
	if (rxDropCnt$EN) rxDropCnt <= `BSV_ASSIGNMENT_DELAY rxDropCnt$D_IN;
	if (rxDropFrame$EN)
	  rxDropFrame <= `BSV_ASSIGNMENT_DELAY rxDropFrame$D_IN;
	if (rxEmptyEOPC$EN)
	  rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY rxEmptyEOPC$D_IN;
	if (rxHdrMatchCnt$EN)
	  rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY rxHdrMatchCnt$D_IN;
	if (rxHdr_mCnt$EN)
	  rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY rxHdr_mCnt$D_IN;
	if (rxHdr_pV$EN) rxHdr_pV <= `BSV_ASSIGNMENT_DELAY rxHdr_pV$D_IN;
	if (rxHdr_pos$EN) rxHdr_pos <= `BSV_ASSIGNMENT_DELAY rxHdr_pos$D_IN;
	if (rxHdr_sV$EN) rxHdr_sV <= `BSV_ASSIGNMENT_DELAY rxHdr_sV$D_IN;
	if (rxHeadCap$EN) rxHeadCap <= `BSV_ASSIGNMENT_DELAY rxHeadCap$D_IN;
	if (rxLenCount$EN)
	  rxLenCount <= `BSV_ASSIGNMENT_DELAY rxLenCount$D_IN;
	if (rxLenLast$EN) rxLenLast <= `BSV_ASSIGNMENT_DELAY rxLenLast$D_IN;
	if (rxOvfCount$EN)
	  rxOvfCount <= `BSV_ASSIGNMENT_DELAY rxOvfCount$D_IN;
	if (rxPos$EN) rxPos <= `BSV_ASSIGNMENT_DELAY rxPos$D_IN;
	if (rxValidEOPC$EN)
	  rxValidEOPC <= `BSV_ASSIGNMENT_DELAY rxValidEOPC$D_IN;
	if (rxValidNoEOPC$EN)
	  rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY rxValidNoEOPC$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (txCount$EN) txCount <= `BSV_ASSIGNMENT_DELAY txCount$D_IN;
	if (txDBGCnt$EN) txDBGCnt <= `BSV_ASSIGNMENT_DELAY txDBGCnt$D_IN;
	if (txDBGPos$EN) txDBGPos <= `BSV_ASSIGNMENT_DELAY txDBGPos$D_IN;
	if (txDCPCnt$EN) txDCPCnt <= `BSV_ASSIGNMENT_DELAY txDCPCnt$D_IN;
	if (txDCPPos$EN) txDCPPos <= `BSV_ASSIGNMENT_DELAY txDCPPos$D_IN;
	if (txUndCount$EN)
	  txUndCount <= `BSV_ASSIGNMENT_DELAY txUndCount$D_IN;
      end
    if (l2DstR$EN) l2DstR <= `BSV_ASSIGNMENT_DELAY l2DstR$D_IN;
    if (l2TypR$EN) l2TypR <= `BSV_ASSIGNMENT_DELAY l2TypR$D_IN;
    if (mdi_rPhyAddr$EN)
      mdi_rPhyAddr <= `BSV_ASSIGNMENT_DELAY mdi_rPhyAddr$D_IN;
    if (mdi_rRegAddr$EN)
      mdi_rRegAddr <= `BSV_ASSIGNMENT_DELAY mdi_rRegAddr$D_IN;
    if (mdi_rWrite$EN) mdi_rWrite <= `BSV_ASSIGNMENT_DELAY mdi_rWrite$D_IN;
    if (mdi_rWriteData$EN)
      mdi_rWriteData <= `BSV_ASSIGNMENT_DELAY mdi_rWriteData$D_IN;
    if (mdi_vrReadData$EN)
      mdi_vrReadData <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData$D_IN;
    if (mdi_vrReadData_1$EN)
      mdi_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_1$D_IN;
    if (mdi_vrReadData_10$EN)
      mdi_vrReadData_10 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_10$D_IN;
    if (mdi_vrReadData_11$EN)
      mdi_vrReadData_11 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_11$D_IN;
    if (mdi_vrReadData_12$EN)
      mdi_vrReadData_12 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_12$D_IN;
    if (mdi_vrReadData_13$EN)
      mdi_vrReadData_13 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_13$D_IN;
    if (mdi_vrReadData_14$EN)
      mdi_vrReadData_14 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_14$D_IN;
    if (mdi_vrReadData_15$EN)
      mdi_vrReadData_15 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_15$D_IN;
    if (mdi_vrReadData_2$EN)
      mdi_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_2$D_IN;
    if (mdi_vrReadData_3$EN)
      mdi_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_3$D_IN;
    if (mdi_vrReadData_4$EN)
      mdi_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_4$D_IN;
    if (mdi_vrReadData_5$EN)
      mdi_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_5$D_IN;
    if (mdi_vrReadData_6$EN)
      mdi_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_6$D_IN;
    if (mdi_vrReadData_7$EN)
      mdi_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_7$D_IN;
    if (mdi_vrReadData_8$EN)
      mdi_vrReadData_8 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_8$D_IN;
    if (mdi_vrReadData_9$EN)
      mdi_vrReadData_9 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_9$D_IN;
    if (rxDCPMesg$EN) rxDCPMesg <= `BSV_ASSIGNMENT_DELAY rxDCPMesg$D_IN;
    if (rxDCPmt$EN) rxDCPmt <= `BSV_ASSIGNMENT_DELAY rxDCPmt$D_IN;
    if (rxDCPtag$EN) rxDCPtag <= `BSV_ASSIGNMENT_DELAY rxDCPtag$D_IN;
    if (rxPipe$EN) rxPipe <= `BSV_ASSIGNMENT_DELAY rxPipe$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    gbeControl = 32'hAAAAAAAA;
    l2DstR = 48'hAAAAAAAAAAAA;
    l2TypR = 16'hAAAA;
    macAddress = 48'hAAAAAAAAAAAA;
    mdi_rMDC = 1'h0;
    mdi_rMDD = 1'h0;
    mdi_rOutEn = 1'h0;
    mdi_rPhyAddr = 5'h0A;
    mdi_rRegAddr = 5'h0A;
    mdi_rState = 1'h0;
    mdi_rWrite = 1'h0;
    mdi_rWriteData = 16'hAAAA;
    mdi_vrReadData = 1'h0;
    mdi_vrReadData_1 = 1'h0;
    mdi_vrReadData_10 = 1'h0;
    mdi_vrReadData_11 = 1'h0;
    mdi_vrReadData_12 = 1'h0;
    mdi_vrReadData_13 = 1'h0;
    mdi_vrReadData_14 = 1'h0;
    mdi_vrReadData_15 = 1'h0;
    mdi_vrReadData_2 = 1'h0;
    mdi_vrReadData_3 = 1'h0;
    mdi_vrReadData_4 = 1'h0;
    mdi_vrReadData_5 = 1'h0;
    mdi_vrReadData_6 = 1'h0;
    mdi_vrReadData_7 = 1'h0;
    mdi_vrReadData_8 = 1'h0;
    mdi_vrReadData_9 = 1'h0;
    phyMdiInit = 1'h0;
    phyResetWaitCnt = 25'h0AAAAAA;
    rxAbortEOPC = 32'hAAAAAAAA;
    rxCount = 32'hAAAAAAAA;
    rxDCPCnt = 32'hAAAAAAAA;
    rxDCPMesg = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxDCPMesgPos = 5'h0A;
    rxDCPPLI = 8'hAA;
    rxDCPmt = 8'hAA;
    rxDCPtag = 8'hAA;
    rxDropCnt = 32'hAAAAAAAA;
    rxDropFrame = 1'h0;
    rxEmptyEOPC = 32'hAAAAAAAA;
    rxHdrMatchCnt = 32'hAAAAAAAA;
    rxHdr_mCnt = 4'hA;
    rxHdr_pV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHdr_pos = 4'hA;
    rxHdr_sV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHeadCap = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxLenCount = 32'hAAAAAAAA;
    rxLenLast = 32'hAAAAAAAA;
    rxOvfCount = 32'hAAAAAAAA;
    rxPipe = 32'hAAAAAAAA;
    rxPos = 2'h2;
    rxValidEOPC = 32'hAAAAAAAA;
    rxValidNoEOPC = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    txCount = 32'hAAAAAAAA;
    txDBGCnt = 32'hAAAAAAAA;
    txDBGPos = 5'h0A;
    txDCPCnt = 32'hAAAAAAAA;
    txDCPPos = 5'h0A;
    txUndCount = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkGbeQABS

