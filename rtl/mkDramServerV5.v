//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Thu Jun 10 12:49:01 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// wci_s_resp                     O    34 reg
// wci_s_SThreadBusy              O     1
// wci_s_SFlag                    O     2
// dram_addr                      O    13
// dram_ba                        O     2
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_cs_n                      O     2
// dram_odt                       O     2
// dram_cke                       O     2
// dram_dm                        O     4
// dram_ck_p                      O     2
// dram_ck_n                      O     2
// wmemiS_SResp                   O     2 reg
// wmemiS_SRespLast               O     1 reg
// wmemiS_SData                   O   128 reg
// wmemiS_SCmdAccept              O     1
// wmemiS_SDataAccept             O     1
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rst                 I     1 reset
// CLK_sys1_clk                   I     1 clock
// RST_N_sys1_rst                 I     1 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wci_s_req                      I    60
// wci_s_MFlag                    I     2 unused
// wmemiS_MCmd                    I     3
// wmemiS_MAddr                   I    36
// wmemiS_MBurstLength            I    12
// wmemiS_MData                   I   128
// wmemiS_MDataByteEn             I    16
// wmemiS_MReqLast                I     1
// wmemiS_MDataValid              I     1
// wmemiS_MDataLast               I     1
// wmemiS_MReset_n                I     1 reg
// dram_io_dq                    IO    32 unused
// dram_io_dqs_p                 IO     4 unused
// dram_io_dqs_n                 IO     4 unused
//
// Combinational paths from inputs to outputs:
//   (wmemiS_MCmd,
//    wmemiS_MAddr,
//    wmemiS_MBurstLength,
//    wmemiS_MReqLast) -> wmemiS_SCmdAccept
//   (wmemiS_MData,
//    wmemiS_MDataByteEn,
//    wmemiS_MDataValid,
//    wmemiS_MDataLast) -> wmemiS_SDataAccept
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkDramServerV5(CLK_sys0_clk,
		      RST_N_sys0_rst,
		      CLK_sys1_clk,
		      RST_N_sys1_rst,
		      CLK,
		      RST_N,

		      .dram_io_dq(memc_memc$ddr2_dq),
		      .dram_io_dqs_p(memc_memc$ddr2_dqs_p),
		      .dram_io_dqs_n(memc_memc$ddr2_dqs_n),

		      wci_s_req,

		      wci_s_resp,

		      wci_s_SThreadBusy,

		      wci_s_SFlag,

		      wci_s_MFlag,

		      dram_addr,

		      dram_ba,

		      dram_ras_n,

		      dram_cas_n,

		      dram_we_n,

		      dram_cs_n,

		      dram_odt,

		      dram_cke,

		      dram_dm,

		      dram_ck_p,

		      dram_ck_n,

		      wmemiS_MCmd,

		      wmemiS_MReqLast,

		      wmemiS_MAddr,

		      wmemiS_MBurstLength,

		      wmemiS_MDataValid,

		      wmemiS_MDataLast,

		      wmemiS_MData,

		      wmemiS_MDataByteEn,

		      wmemiS_SResp,

		      wmemiS_SRespLast,

		      wmemiS_SData,

		      wmemiS_SCmdAccept,

		      wmemiS_SDataAccept,

		      wmemiS_MReset_n);
  input  CLK_sys0_clk;
  input  RST_N_sys0_rst;
  input  CLK_sys1_clk;
  input  RST_N_sys1_rst;
  input  CLK;
  input  RST_N;

  inout  [31 : 0] memc_memc$ddr2_dq;
  inout  [3 : 0] memc_memc$ddr2_dqs_p;
  inout  [3 : 0] memc_memc$ddr2_dqs_n;

  // action method wci_s_putreq
  input  [59 : 0] wci_s_req;

  // value method wci_s_resp
  output [33 : 0] wci_s_resp;

  // value method wci_s_sThreadBusy
  output wci_s_SThreadBusy;

  // value method wci_s_sFlag
  output [1 : 0] wci_s_SFlag;

  // action method wci_s_mFlag
  input  [1 : 0] wci_s_MFlag;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [1 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_cs_n
  output [1 : 0] dram_cs_n;

  // value method dram_odt
  output [1 : 0] dram_odt;

  // value method dram_cke
  output [1 : 0] dram_cke;

  // value method dram_dm
  output [3 : 0] dram_dm;

  // value method dram_ck_p
  output [1 : 0] dram_ck_p;

  // value method dram_ck_n
  output [1 : 0] dram_ck_n;

  // action method wmemiS_mCmd
  input  [2 : 0] wmemiS_MCmd;

  // action method wmemiS_mReqLast
  input  wmemiS_MReqLast;

  // action method wmemiS_mAddr
  input  [35 : 0] wmemiS_MAddr;

  // action method wmemiS_mBurstLength
  input  [11 : 0] wmemiS_MBurstLength;

  // action method wmemiS_mDataValid
  input  wmemiS_MDataValid;

  // action method wmemiS_mDataLast
  input  wmemiS_MDataLast;

  // action method wmemiS_mData
  input  [127 : 0] wmemiS_MData;

  // action method wmemiS_mDataByteEn
  input  [15 : 0] wmemiS_MDataByteEn;

  // value method wmemiS_sResp
  output [1 : 0] wmemiS_SResp;

  // value method wmemiS_sRespLast
  output wmemiS_SRespLast;

  // value method wmemiS_sData
  output [127 : 0] wmemiS_SData;

  // value method wmemiS_sCmdAccept
  output wmemiS_SCmdAccept;

  // value method wmemiS_sDataAccept
  output wmemiS_SDataAccept;

  // action method wmemiS_mReset_n
  input  wmemiS_MReset_n;

  // signals for module outputs
  wire [127 : 0] wmemiS_SData;
  wire [33 : 0] wci_s_resp;
  wire [12 : 0] dram_addr;
  wire [3 : 0] dram_dm;
  wire [1 : 0] dram_ba,
	       dram_ck_n,
	       dram_ck_p,
	       dram_cke,
	       dram_cs_n,
	       dram_odt,
	       wci_s_SFlag,
	       wmemiS_SResp;
  wire dram_cas_n,
       dram_ras_n,
       dram_we_n,
       wci_s_SThreadBusy,
       wmemiS_SCmdAccept,
       wmemiS_SDataAccept,
       wmemiS_SRespLast;

  // inlined wires
  wire [145 : 0] wmemi_wmemiDh$wget;
  wire [130 : 0] wmemi_respF_x_wire$wget;
  wire [127 : 0] wmemi_Es_mData_w$wget;
  wire [63 : 0] memc_memcData_w$wget;
  wire [59 : 0] wci_wciReq$wget;
  wire [51 : 0] wmemi_wmemiReq$wget;
  wire [35 : 0] wmemi_Es_mAddr_w$wget;
  wire [33 : 0] wci_respF_x_wire$wget;
  wire [32 : 0] memc_memcAddr_w$wget;
  wire [15 : 0] wmemi_Es_mDataByteEn_w$wget;
  wire [11 : 0] wmemi_Es_mBurstLength_w$wget;
  wire [7 : 0] memc_memcMask_w$wget,
	       wmemiReadInFlight_acc_v1$wget,
	       wmemiReadInFlight_acc_v2$wget;
  wire [2 : 0] memc_memcCmd_w$wget, wci_wEdge$wget, wmemi_Es_mCmd_w$wget;
  wire memc_memcAddr_w$whas,
       memc_memcCmd_w$whas,
       memc_memcData_w$whas,
       memc_memcMask_w$whas,
       memc_wdfWren$wget,
       memc_wdfWren$whas,
       wci_ctlAckReg_1$wget,
       wci_ctlAckReg_1$whas,
       wci_reqF_r_clr$whas,
       wci_reqF_r_deq$whas,
       wci_reqF_r_enq$whas,
       wci_respF_dequeueing$whas,
       wci_respF_enqueueing$whas,
       wci_respF_x_wire$whas,
       wci_sFlagReg_1$wget,
       wci_sFlagReg_1$whas,
       wci_sThreadBusy_pw$whas,
       wci_wEdge$whas,
       wci_wciReq$whas,
       wci_wci_cfrd_pw$whas,
       wci_wci_cfwr_pw$whas,
       wci_wci_ctrl_pw$whas,
       wmemiReadInFlight_acc_v1$whas,
       wmemiReadInFlight_acc_v2$whas,
       wmemi_Es_mAddr_w$whas,
       wmemi_Es_mBurstLength_w$whas,
       wmemi_Es_mCmd_w$whas,
       wmemi_Es_mDataByteEn_w$whas,
       wmemi_Es_mDataLast_w$whas,
       wmemi_Es_mDataValid_w$whas,
       wmemi_Es_mData_w$whas,
       wmemi_Es_mReqLast_w$whas,
       wmemi_cmdAccept_w$wget,
       wmemi_cmdAccept_w$whas,
       wmemi_dhAccept_w$wget,
       wmemi_dhAccept_w$whas,
       wmemi_dhF_r_clr$whas,
       wmemi_dhF_r_deq$whas,
       wmemi_dhF_r_enq$whas,
       wmemi_operateD_1$wget,
       wmemi_operateD_1$whas,
       wmemi_peerIsReady_1$wget,
       wmemi_peerIsReady_1$whas,
       wmemi_reqF_r_clr$whas,
       wmemi_reqF_r_deq$whas,
       wmemi_reqF_r_enq$whas,
       wmemi_respF_dequeueing$whas,
       wmemi_respF_enqueueing$whas,
       wmemi_respF_x_wire$whas,
       wmemi_wmemiDh$whas,
       wmemi_wmemiReq$whas;

  // register dbgCtrl
  reg [31 : 0] dbgCtrl;
  wire [31 : 0] dbgCtrl$D_IN;
  wire dbgCtrl$EN;

  // register dramCtrl
  reg [31 : 0] dramCtrl;
  wire [31 : 0] dramCtrl$D_IN;
  wire dramCtrl$EN;

  // register mReg
  reg [15 : 0] mReg;
  wire [15 : 0] mReg$D_IN;
  wire mReg$EN;

  // register memc_firstReadBeat
  reg memc_firstReadBeat;
  wire memc_firstReadBeat$D_IN, memc_firstReadBeat$EN;

  // register memc_firstReadData
  reg [63 : 0] memc_firstReadData;
  wire [63 : 0] memc_firstReadData$D_IN;
  wire memc_firstReadData$EN;

  // register memc_firstWriteBeat
  reg memc_firstWriteBeat;
  wire memc_firstWriteBeat$D_IN, memc_firstWriteBeat$EN;

  // register memc_requestCount
  reg [15 : 0] memc_requestCount;
  wire [15 : 0] memc_requestCount$D_IN;
  wire memc_requestCount$EN;

  // register pReg
  reg [15 : 0] pReg;
  wire [15 : 0] pReg$D_IN;
  wire pReg$EN;

  // register rdReg
  reg [31 : 0] rdReg;
  wire [31 : 0] rdReg$D_IN;
  wire rdReg$EN;

  // register rdReg_1
  reg [31 : 0] rdReg_1;
  wire [31 : 0] rdReg_1$D_IN;
  wire rdReg_1$EN;

  // register rdReg_2
  reg [31 : 0] rdReg_2;
  wire [31 : 0] rdReg_2$D_IN;
  wire rdReg_2$EN;

  // register rdReg_3
  reg [31 : 0] rdReg_3;
  wire [31 : 0] rdReg_3$D_IN;
  wire rdReg_3$EN;

  // register respCount
  reg [7 : 0] respCount;
  wire [7 : 0] respCount$D_IN;
  wire respCount$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register wci_cEdge
  reg [2 : 0] wci_cEdge;
  wire [2 : 0] wci_cEdge$D_IN;
  wire wci_cEdge$EN;

  // register wci_cState
  reg [2 : 0] wci_cState;
  wire [2 : 0] wci_cState$D_IN;
  wire wci_cState$EN;

  // register wci_ctlAckReg
  reg wci_ctlAckReg;
  wire wci_ctlAckReg$D_IN, wci_ctlAckReg$EN;

  // register wci_ctlOpActive
  reg wci_ctlOpActive;
  wire wci_ctlOpActive$D_IN, wci_ctlOpActive$EN;

  // register wci_illegalEdge
  reg wci_illegalEdge;
  wire wci_illegalEdge$D_IN, wci_illegalEdge$EN;

  // register wci_nState
  reg [2 : 0] wci_nState;
  reg [2 : 0] wci_nState$D_IN;
  wire wci_nState$EN;

  // register wci_reqF_countReg
  reg [1 : 0] wci_reqF_countReg;
  wire [1 : 0] wci_reqF_countReg$D_IN;
  wire wci_reqF_countReg$EN;

  // register wci_respF_c_r
  reg [1 : 0] wci_respF_c_r;
  wire [1 : 0] wci_respF_c_r$D_IN;
  wire wci_respF_c_r$EN;

  // register wci_respF_q_0
  reg [33 : 0] wci_respF_q_0;
  reg [33 : 0] wci_respF_q_0$D_IN;
  wire wci_respF_q_0$EN;

  // register wci_respF_q_1
  reg [33 : 0] wci_respF_q_1;
  reg [33 : 0] wci_respF_q_1$D_IN;
  wire wci_respF_q_1$EN;

  // register wci_sFlagReg
  reg wci_sFlagReg;
  wire wci_sFlagReg$D_IN, wci_sFlagReg$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wdReg
  reg [31 : 0] wdReg;
  wire [31 : 0] wdReg$D_IN;
  wire wdReg$EN;

  // register wdReg_1
  reg [31 : 0] wdReg_1;
  wire [31 : 0] wdReg_1$D_IN;
  wire wdReg_1$EN;

  // register wdReg_2
  reg [31 : 0] wdReg_2;
  wire [31 : 0] wdReg_2$D_IN;
  wire wdReg_2$EN;

  // register wdReg_3
  reg [31 : 0] wdReg_3;
  wire [31 : 0] wdReg_3$D_IN;
  wire wdReg_3$EN;

  // register wmemiRdReq
  reg [31 : 0] wmemiRdReq;
  wire [31 : 0] wmemiRdReq$D_IN;
  wire wmemiRdReq$EN;

  // register wmemiRdResp
  reg [31 : 0] wmemiRdResp;
  wire [31 : 0] wmemiRdResp$D_IN;
  wire wmemiRdResp$EN;

  // register wmemiReadInFlight_value
  reg [7 : 0] wmemiReadInFlight_value;
  wire [7 : 0] wmemiReadInFlight_value$D_IN;
  wire wmemiReadInFlight_value$EN;

  // register wmemiWrReq
  reg [31 : 0] wmemiWrReq;
  wire [31 : 0] wmemiWrReq$D_IN;
  wire wmemiWrReq$EN;

  // register wmemi_dhF_countReg
  reg [1 : 0] wmemi_dhF_countReg;
  wire [1 : 0] wmemi_dhF_countReg$D_IN;
  wire wmemi_dhF_countReg$EN;

  // register wmemi_errorSticky
  reg wmemi_errorSticky;
  wire wmemi_errorSticky$D_IN, wmemi_errorSticky$EN;

  // register wmemi_operateD
  reg wmemi_operateD;
  wire wmemi_operateD$D_IN, wmemi_operateD$EN;

  // register wmemi_peerIsReady
  reg wmemi_peerIsReady;
  wire wmemi_peerIsReady$D_IN, wmemi_peerIsReady$EN;

  // register wmemi_reqF_countReg
  reg [1 : 0] wmemi_reqF_countReg;
  wire [1 : 0] wmemi_reqF_countReg$D_IN;
  wire wmemi_reqF_countReg$EN;

  // register wmemi_respF_c_r
  reg [1 : 0] wmemi_respF_c_r;
  wire [1 : 0] wmemi_respF_c_r$D_IN;
  wire wmemi_respF_c_r$EN;

  // register wmemi_respF_q_0
  reg [130 : 0] wmemi_respF_q_0;
  reg [130 : 0] wmemi_respF_q_0$D_IN;
  wire wmemi_respF_q_0$EN;

  // register wmemi_respF_q_1
  reg [130 : 0] wmemi_respF_q_1;
  reg [130 : 0] wmemi_respF_q_1$D_IN;
  wire wmemi_respF_q_1$EN;

  // register wmemi_statusR
  reg [7 : 0] wmemi_statusR;
  wire [7 : 0] wmemi_statusR$D_IN;
  wire wmemi_statusR$EN;

  // register wmemi_trafficSticky
  reg wmemi_trafficSticky;
  wire wmemi_trafficSticky$D_IN, wmemi_trafficSticky$EN;

  // ports of submodule appFull
  wire appFull$dD_OUT, appFull$sD_IN, appFull$sEN;

  // ports of submodule dbg_calib_done
  wire [3 : 0] dbg_calib_done$dD_OUT, dbg_calib_done$sD_IN;
  wire dbg_calib_done$sEN, dbg_calib_done$sRDY;

  // ports of submodule dbg_calib_dq_tap_cnt
  wire [23 : 0] dbg_calib_dq_tap_cnt$dD_OUT, dbg_calib_dq_tap_cnt$sD_IN;
  wire dbg_calib_dq_tap_cnt$sEN, dbg_calib_dq_tap_cnt$sRDY;

  // ports of submodule dbg_calib_dqs_tap_cnt
  wire [23 : 0] dbg_calib_dqs_tap_cnt$dD_OUT, dbg_calib_dqs_tap_cnt$sD_IN;
  wire dbg_calib_dqs_tap_cnt$sEN, dbg_calib_dqs_tap_cnt$sRDY;

  // ports of submodule dbg_calib_err
  wire [3 : 0] dbg_calib_err$dD_OUT, dbg_calib_err$sD_IN;
  wire dbg_calib_err$sEN, dbg_calib_err$sRDY;

  // ports of submodule dbg_calib_gate_delay
  wire [19 : 0] dbg_calib_gate_delay$dD_OUT, dbg_calib_gate_delay$sD_IN;
  wire dbg_calib_gate_delay$sEN, dbg_calib_gate_delay$sRDY;

  // ports of submodule dbg_calib_gate_tap_cnt
  wire [23 : 0] dbg_calib_gate_tap_cnt$dD_OUT, dbg_calib_gate_tap_cnt$sD_IN;
  wire dbg_calib_gate_tap_cnt$sEN, dbg_calib_gate_tap_cnt$sRDY;

  // ports of submodule dbg_calib_rd_data_sel
  wire [3 : 0] dbg_calib_rd_data_sel$dD_OUT, dbg_calib_rd_data_sel$sD_IN;
  wire dbg_calib_rd_data_sel$sEN, dbg_calib_rd_data_sel$sRDY;

  // ports of submodule dbg_calib_rden_delay
  wire [19 : 0] dbg_calib_rden_delay$dD_OUT, dbg_calib_rden_delay$sD_IN;
  wire dbg_calib_rden_delay$sEN, dbg_calib_rden_delay$sRDY;

  // ports of submodule firBeat
  wire firBeat$dD_OUT, firBeat$sD_IN, firBeat$sEN;

  // ports of submodule initComplete
  wire initComplete$dD_OUT, initComplete$sD_IN, initComplete$sEN;

  // ports of submodule lreqF
  reg [176 : 0] lreqF$sD_IN;
  wire [176 : 0] lreqF$dD_OUT;
  wire lreqF$dDEQ, lreqF$dEMPTY_N, lreqF$sENQ, lreqF$sFULL_N;

  // ports of submodule lrespF
  wire [127 : 0] lrespF$dD_OUT, lrespF$sD_IN;
  wire lrespF$dDEQ, lrespF$dEMPTY_N, lrespF$sENQ, lrespF$sFULL_N;

  // ports of submodule memIsReset
  wire memIsReset$VAL;

  // ports of submodule memIsResetCC
  wire memIsResetCC$dD_OUT, memIsResetCC$sD_IN, memIsResetCC$sEN;

  // ports of submodule memc_memc
  wire [63 : 0] memc_memc$app_data, memc_memc$app_rd_data;
  wire [32 : 0] memc_memc$app_addr;
  wire [31 : 0] memc_memc$ddr2_dq;
  wire [23 : 0] memc_memc$dbg_calib_dq_tap_cnt,
		memc_memc$dbg_calib_dqs_tap_cnt,
		memc_memc$dbg_calib_gate_tap_cnt;
  wire [19 : 0] memc_memc$dbg_calib_gate_delay,
		memc_memc$dbg_calib_rden_delay;
  wire [12 : 0] memc_memc$ddr2_addr;
  wire [7 : 0] memc_memc$app_mask;
  wire [4 : 0] memc_memc$dbg_sel_idel_dq;
  wire [3 : 0] memc_memc$dbg_calib_done,
	       memc_memc$dbg_calib_err,
	       memc_memc$dbg_calib_rd_data_sel,
	       memc_memc$ddr2_dm,
	       memc_memc$ddr2_dqs_n,
	       memc_memc$ddr2_dqs_p;
  wire [2 : 0] memc_memc$app_cmd;
  wire [1 : 0] memc_memc$dbg_sel_idel_dqs,
	       memc_memc$dbg_sel_idel_gate,
	       memc_memc$ddr2_ba,
	       memc_memc$ddr2_ck_n,
	       memc_memc$ddr2_ck_p,
	       memc_memc$ddr2_cke,
	       memc_memc$ddr2_cs_n,
	       memc_memc$ddr2_odt;
  wire memc_memc$app_af_afull,
       memc_memc$app_af_wren,
       memc_memc$app_rd_data_valid,
       memc_memc$app_wf_afull,
       memc_memc$app_wf_wren,
       memc_memc$dbg_idel_down_all,
       memc_memc$dbg_idel_down_dq,
       memc_memc$dbg_idel_down_dqs,
       memc_memc$dbg_idel_down_gate,
       memc_memc$dbg_idel_up_all,
       memc_memc$dbg_idel_up_dq,
       memc_memc$dbg_idel_up_dqs,
       memc_memc$dbg_idel_up_gate,
       memc_memc$dbg_sel_all_idel_dq,
       memc_memc$dbg_sel_all_idel_dqs,
       memc_memc$dbg_sel_all_idel_gate,
       memc_memc$ddr2_cas_n,
       memc_memc$ddr2_ras_n,
       memc_memc$ddr2_we_n,
       memc_memc$phy_init_done,
       memc_memc$tb_clk,
       memc_memc$tb_rst_n;

  // ports of submodule memc_reqF
  wire [176 : 0] memc_reqF$D_IN, memc_reqF$D_OUT;
  wire memc_reqF$CLR,
       memc_reqF$DEQ,
       memc_reqF$EMPTY_N,
       memc_reqF$ENQ,
       memc_reqF$FULL_N;

  // ports of submodule memc_respF
  wire [127 : 0] memc_respF$D_IN, memc_respF$D_OUT;
  wire memc_respF$CLR,
       memc_respF$DEQ,
       memc_respF$EMPTY_N,
       memc_respF$ENQ,
       memc_respF$FULL_N;

  // ports of submodule requestCount
  wire [15 : 0] requestCount$dD_OUT, requestCount$sD_IN;
  wire requestCount$sEN, requestCount$sRDY;

  // ports of submodule secBeat
  wire secBeat$dD_OUT, secBeat$sD_IN, secBeat$sEN;

  // ports of submodule splaF
  wire [1 : 0] splaF$D_IN, splaF$D_OUT;
  wire splaF$CLR, splaF$DEQ, splaF$EMPTY_N, splaF$ENQ, splaF$FULL_N;

  // ports of submodule wci_isReset
  wire wci_isReset$VAL;

  // ports of submodule wci_reqF
  wire [59 : 0] wci_reqF$D_IN, wci_reqF$D_OUT;
  wire wci_reqF$CLR, wci_reqF$DEQ, wci_reqF$EMPTY_N, wci_reqF$ENQ;

  // ports of submodule wdfFull
  wire wdfFull$dD_OUT, wdfFull$sD_IN, wdfFull$sEN;

  // ports of submodule wmemi_dhF
  wire [145 : 0] wmemi_dhF$D_IN, wmemi_dhF$D_OUT;
  wire wmemi_dhF$CLR, wmemi_dhF$DEQ, wmemi_dhF$EMPTY_N, wmemi_dhF$ENQ;

  // ports of submodule wmemi_isReset
  wire wmemi_isReset$VAL;

  // ports of submodule wmemi_reqF
  wire [51 : 0] wmemi_reqF$D_IN, wmemi_reqF$D_OUT;
  wire wmemi_reqF$CLR, wmemi_reqF$DEQ, wmemi_reqF$EMPTY_N, wmemi_reqF$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_advance_response,
       CAN_FIRE_RL_debug_update,
       CAN_FIRE_RL_getRequest,
       CAN_FIRE_RL_getResponse,
       CAN_FIRE_RL_memc_advance_readData,
       CAN_FIRE_RL_memc_advance_request,
       CAN_FIRE_RL_memc_advance_write1,
       CAN_FIRE_RL_memc_drive_memc_always_enabled,
       CAN_FIRE_RL_memc_drive_wdf_wren,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_operating_actions,
       CAN_FIRE_RL_update_appFull,
       CAN_FIRE_RL_update_debug,
       CAN_FIRE_RL_update_firBeat,
       CAN_FIRE_RL_update_initComplete,
       CAN_FIRE_RL_update_memIsReset,
       CAN_FIRE_RL_update_secBeat,
       CAN_FIRE_RL_update_wdfFull,
       CAN_FIRE_RL_wci_cfrd,
       CAN_FIRE_RL_wci_cfwr,
       CAN_FIRE_RL_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wci_ctl_op_complete,
       CAN_FIRE_RL_wci_ctl_op_start,
       CAN_FIRE_RL_wci_ctrl_EiI,
       CAN_FIRE_RL_wci_ctrl_IsO,
       CAN_FIRE_RL_wci_ctrl_OrE,
       CAN_FIRE_RL_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_wci_reqF_enq,
       CAN_FIRE_RL_wci_request_decode,
       CAN_FIRE_RL_wci_respF_both,
       CAN_FIRE_RL_wci_respF_decCtr,
       CAN_FIRE_RL_wci_respF_deq,
       CAN_FIRE_RL_wci_respF_incCtr,
       CAN_FIRE_RL_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_wci_sThreadBusy_reg,
       CAN_FIRE_RL_wmemiReadInFlight_accumulate,
       CAN_FIRE_RL_wmemi_Es_doAlways_Dh,
       CAN_FIRE_RL_wmemi_Es_doAlways_Req,
       CAN_FIRE_RL_wmemi_dhF__updateLevelCounter,
       CAN_FIRE_RL_wmemi_dhF_enq,
       CAN_FIRE_RL_wmemi_operateD__dreg_update,
       CAN_FIRE_RL_wmemi_peerIsReady__dreg_update,
       CAN_FIRE_RL_wmemi_reqF__updateLevelCounter,
       CAN_FIRE_RL_wmemi_reqF_enq,
       CAN_FIRE_RL_wmemi_respF_both,
       CAN_FIRE_RL_wmemi_respF_decCtr,
       CAN_FIRE_RL_wmemi_respF_deq,
       CAN_FIRE_RL_wmemi_respF_incCtr,
       CAN_FIRE_RL_wmemi_update_statusR,
       CAN_FIRE_wci_s_mFlag,
       CAN_FIRE_wci_s_putreq,
       CAN_FIRE_wmemiS_mAddr,
       CAN_FIRE_wmemiS_mBurstLength,
       CAN_FIRE_wmemiS_mCmd,
       CAN_FIRE_wmemiS_mData,
       CAN_FIRE_wmemiS_mDataByteEn,
       CAN_FIRE_wmemiS_mDataLast,
       CAN_FIRE_wmemiS_mDataValid,
       CAN_FIRE_wmemiS_mReqLast,
       CAN_FIRE_wmemiS_mReset_n,
       WILL_FIRE_RL_advance_response,
       WILL_FIRE_RL_debug_update,
       WILL_FIRE_RL_getRequest,
       WILL_FIRE_RL_getResponse,
       WILL_FIRE_RL_memc_advance_readData,
       WILL_FIRE_RL_memc_advance_request,
       WILL_FIRE_RL_memc_advance_write1,
       WILL_FIRE_RL_memc_drive_memc_always_enabled,
       WILL_FIRE_RL_memc_drive_wdf_wren,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_operating_actions,
       WILL_FIRE_RL_update_appFull,
       WILL_FIRE_RL_update_debug,
       WILL_FIRE_RL_update_firBeat,
       WILL_FIRE_RL_update_initComplete,
       WILL_FIRE_RL_update_memIsReset,
       WILL_FIRE_RL_update_secBeat,
       WILL_FIRE_RL_update_wdfFull,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wci_ctl_op_complete,
       WILL_FIRE_RL_wci_ctl_op_start,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_wci_reqF_enq,
       WILL_FIRE_RL_wci_request_decode,
       WILL_FIRE_RL_wci_respF_both,
       WILL_FIRE_RL_wci_respF_decCtr,
       WILL_FIRE_RL_wci_respF_deq,
       WILL_FIRE_RL_wci_respF_incCtr,
       WILL_FIRE_RL_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_wci_sThreadBusy_reg,
       WILL_FIRE_RL_wmemiReadInFlight_accumulate,
       WILL_FIRE_RL_wmemi_Es_doAlways_Dh,
       WILL_FIRE_RL_wmemi_Es_doAlways_Req,
       WILL_FIRE_RL_wmemi_dhF__updateLevelCounter,
       WILL_FIRE_RL_wmemi_dhF_enq,
       WILL_FIRE_RL_wmemi_operateD__dreg_update,
       WILL_FIRE_RL_wmemi_peerIsReady__dreg_update,
       WILL_FIRE_RL_wmemi_reqF__updateLevelCounter,
       WILL_FIRE_RL_wmemi_reqF_enq,
       WILL_FIRE_RL_wmemi_respF_both,
       WILL_FIRE_RL_wmemi_respF_decCtr,
       WILL_FIRE_RL_wmemi_respF_deq,
       WILL_FIRE_RL_wmemi_respF_incCtr,
       WILL_FIRE_RL_wmemi_update_statusR,
       WILL_FIRE_wci_s_mFlag,
       WILL_FIRE_wci_s_putreq,
       WILL_FIRE_wmemiS_mAddr,
       WILL_FIRE_wmemiS_mBurstLength,
       WILL_FIRE_wmemiS_mCmd,
       WILL_FIRE_wmemiS_mData,
       WILL_FIRE_wmemiS_mDataByteEn,
       WILL_FIRE_wmemiS_mDataLast,
       WILL_FIRE_wmemiS_mDataValid,
       WILL_FIRE_wmemiS_mReqLast,
       WILL_FIRE_wmemiS_mReset_n;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_respF_q_0$write_1__VAL_1;
  wire [176 : 0] MUX_lreqF$enq_1__VAL_1,
		 MUX_lreqF$enq_1__VAL_2,
		 MUX_lreqF$enq_1__VAL_3;
  wire [130 : 0] MUX_wmemi_respF_q_0$write_1__VAL_1,
		 MUX_wmemi_respF_q_0$write_1__VAL_2,
		 MUX_wmemi_respF_q_1$write_1__VAL_2;
  wire [33 : 0] MUX_wci_respF_q_0$write_1__VAL_2,
		MUX_wci_respF_q_1$write_1__VAL_2,
		MUX_wci_respF_x_wire$wset_1__VAL_1,
		MUX_wci_respF_x_wire$wset_1__VAL_2,
		MUX_wci_respF_x_wire$wset_1__VAL_3;
  wire [7 : 0] MUX_wmemiReadInFlight_value$write_1__VAL_2;
  wire [1 : 0] MUX_wci_respF_c_r$write_1__VAL_1,
	       MUX_wci_respF_c_r$write_1__VAL_2,
	       MUX_wmemi_respF_c_r$write_1__VAL_1,
	       MUX_wmemi_respF_c_r$write_1__VAL_2;
  wire MUX_lreqF$enq_1__SEL_1,
       MUX_lreqF$enq_1__SEL_2,
       MUX_memc_firstWriteBeat$write_1__SEL_1,
       MUX_rdReg$write_1__SEL_1,
       MUX_rdReg_1$write_1__SEL_1,
       MUX_rdReg_2$write_1__SEL_1,
       MUX_rdReg_3$write_1__SEL_1,
       MUX_splitReadInFlight$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_2,
       MUX_wci_illegalEdge$write_1__VAL_2,
       MUX_wci_respF_q_0$write_1__SEL_1,
       MUX_wci_respF_q_1$write_1__SEL_1,
       MUX_wci_respF_x_wire$wset_1__SEL_2,
       MUX_wmemi_respF_q_0$write_1__SEL_1,
       MUX_wmemi_respF_q_1$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h13245, v__h2646, v__h2793, v__h3692;
  reg [31 : 0] CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1,
	       x_data__h17906;
  wire [175 : 0] IF_wci_reqF_first__3_BIT_51_4_THEN_pReg_5_BITS_ETC___d209;
  wire [127 : 0] x1_data__h15128, x1_data__h16098;
  wire [31 : 0] dramStatus__h13095,
		rdat___1__h13639,
		rdat___1__h13648,
		rdat___1__h13657,
		rdat___1__h13666,
		rdat___1__h13675,
		rdat___1__h13684,
		rdat___1__h13693,
		rdat___1__h13702,
		rdat___1__h13731,
		rdat___1__h13784,
		rdat___1__h13802,
		rdat___1__h13816,
		rdat___1__h13824,
		x1_addr__h13430,
		x_data__h13584;
  wire [15 : 0] x1_be__h16097;
  wire IF_wci_reqF_first__3_BIT_51_4_THEN_lreqF_RDY_e_ETC___d51,
       NOT_wci_respF_c_r_8_EQ_2_9_0_AND_IF_wci_reqF_f_ETC___d180,
       dbg_calib_dq_tap_cnt_RDY_write__01_AND_dbg_cal_ETC___d313,
       lrespF_RDY_deq__24_AND_NOT_splitReadInFlight_2_ETC___d232,
       wmemi_reqF_i_notEmpty__68_AND_wmemi_operateD_5_ETC___d276;

  // action method wci_s_putreq
  assign CAN_FIRE_wci_s_putreq = 1'd1 ;
  assign WILL_FIRE_wci_s_putreq = 1'd1 ;

  // value method wci_s_resp
  assign wci_s_resp = wci_respF_q_0 ;

  // value method wci_s_sThreadBusy
  assign wci_s_SThreadBusy = wci_reqF_countReg > 2'd1 || wci_isReset$VAL ;

  // value method wci_s_sFlag
  assign wci_s_SFlag = { 1'd1, wci_sFlagReg } ;

  // action method wci_s_mFlag
  assign CAN_FIRE_wci_s_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_mFlag = 1'd1 ;

  // value method dram_addr
  assign dram_addr = memc_memc$ddr2_addr ;

  // value method dram_ba
  assign dram_ba = memc_memc$ddr2_ba ;

  // value method dram_ras_n
  assign dram_ras_n = memc_memc$ddr2_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = memc_memc$ddr2_cas_n ;

  // value method dram_we_n
  assign dram_we_n = memc_memc$ddr2_we_n ;

  // value method dram_cs_n
  assign dram_cs_n = memc_memc$ddr2_cs_n ;

  // value method dram_odt
  assign dram_odt = memc_memc$ddr2_odt ;

  // value method dram_cke
  assign dram_cke = memc_memc$ddr2_cke ;

  // value method dram_dm
  assign dram_dm = memc_memc$ddr2_dm ;

  // value method dram_ck_p
  assign dram_ck_p = memc_memc$ddr2_ck_p ;

  // value method dram_ck_n
  assign dram_ck_n = memc_memc$ddr2_ck_n ;

  // action method wmemiS_mCmd
  assign CAN_FIRE_wmemiS_mCmd = 1'd1 ;
  assign WILL_FIRE_wmemiS_mCmd = 1'd1 ;

  // action method wmemiS_mReqLast
  assign CAN_FIRE_wmemiS_mReqLast = 1'd1 ;
  assign WILL_FIRE_wmemiS_mReqLast = wmemiS_MReqLast ;

  // action method wmemiS_mAddr
  assign CAN_FIRE_wmemiS_mAddr = 1'd1 ;
  assign WILL_FIRE_wmemiS_mAddr = 1'd1 ;

  // action method wmemiS_mBurstLength
  assign CAN_FIRE_wmemiS_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wmemiS_mBurstLength = 1'd1 ;

  // action method wmemiS_mDataValid
  assign CAN_FIRE_wmemiS_mDataValid = 1'd1 ;
  assign WILL_FIRE_wmemiS_mDataValid = wmemiS_MDataValid ;

  // action method wmemiS_mDataLast
  assign CAN_FIRE_wmemiS_mDataLast = 1'd1 ;
  assign WILL_FIRE_wmemiS_mDataLast = wmemiS_MDataLast ;

  // action method wmemiS_mData
  assign CAN_FIRE_wmemiS_mData = 1'd1 ;
  assign WILL_FIRE_wmemiS_mData = 1'd1 ;

  // action method wmemiS_mDataByteEn
  assign CAN_FIRE_wmemiS_mDataByteEn = 1'd1 ;
  assign WILL_FIRE_wmemiS_mDataByteEn = 1'd1 ;

  // value method wmemiS_sResp
  assign wmemiS_SResp = wmemi_respF_q_0[130:129] ;

  // value method wmemiS_sRespLast
  assign wmemiS_SRespLast = wmemi_respF_q_0[128] ;

  // value method wmemiS_sData
  assign wmemiS_SData = wmemi_respF_q_0[127:0] ;

  // value method wmemiS_sCmdAccept
  assign wmemiS_SCmdAccept = CAN_FIRE_RL_wmemi_reqF_enq ;

  // value method wmemiS_sDataAccept
  assign wmemiS_SDataAccept = CAN_FIRE_RL_wmemi_dhF_enq ;

  // action method wmemiS_mReset_n
  assign CAN_FIRE_wmemiS_mReset_n = 1'd1 ;
  assign WILL_FIRE_wmemiS_mReset_n = wmemiS_MReset_n ;

  // submodule appFull
  SyncBit #(.init(32'd0)) appFull(.sCLK(memc_memc$tb_clk),
				  .dCLK(CLK),
				  .sRST_N(memc_memc$tb_rst_n),
				  .sD_IN(appFull$sD_IN),
				  .sEN(appFull$sEN),
				  .dD_OUT(appFull$dD_OUT));

  // submodule dbg_calib_done
  SyncRegister #(.width(32'd4),
		 .init(4'd0)) dbg_calib_done(.sCLK(memc_memc$tb_clk),
					     .dCLK(CLK),
					     .sRST_N(memc_memc$tb_rst_n),
					     .sD_IN(dbg_calib_done$sD_IN),
					     .sEN(dbg_calib_done$sEN),
					     .dD_OUT(dbg_calib_done$dD_OUT),
					     .sRDY(dbg_calib_done$sRDY));

  // submodule dbg_calib_dq_tap_cnt
  SyncRegister #(.width(32'd24),
		 .init(24'd0)) dbg_calib_dq_tap_cnt(.sCLK(memc_memc$tb_clk),
						    .dCLK(CLK),
						    .sRST_N(memc_memc$tb_rst_n),
						    .sD_IN(dbg_calib_dq_tap_cnt$sD_IN),
						    .sEN(dbg_calib_dq_tap_cnt$sEN),
						    .dD_OUT(dbg_calib_dq_tap_cnt$dD_OUT),
						    .sRDY(dbg_calib_dq_tap_cnt$sRDY));

  // submodule dbg_calib_dqs_tap_cnt
  SyncRegister #(.width(32'd24),
		 .init(24'd0)) dbg_calib_dqs_tap_cnt(.sCLK(memc_memc$tb_clk),
						     .dCLK(CLK),
						     .sRST_N(memc_memc$tb_rst_n),
						     .sD_IN(dbg_calib_dqs_tap_cnt$sD_IN),
						     .sEN(dbg_calib_dqs_tap_cnt$sEN),
						     .dD_OUT(dbg_calib_dqs_tap_cnt$dD_OUT),
						     .sRDY(dbg_calib_dqs_tap_cnt$sRDY));

  // submodule dbg_calib_err
  SyncRegister #(.width(32'd4),
		 .init(4'd0)) dbg_calib_err(.sCLK(memc_memc$tb_clk),
					    .dCLK(CLK),
					    .sRST_N(memc_memc$tb_rst_n),
					    .sD_IN(dbg_calib_err$sD_IN),
					    .sEN(dbg_calib_err$sEN),
					    .dD_OUT(dbg_calib_err$dD_OUT),
					    .sRDY(dbg_calib_err$sRDY));

  // submodule dbg_calib_gate_delay
  SyncRegister #(.width(32'd20),
		 .init(20'd0)) dbg_calib_gate_delay(.sCLK(memc_memc$tb_clk),
						    .dCLK(CLK),
						    .sRST_N(memc_memc$tb_rst_n),
						    .sD_IN(dbg_calib_gate_delay$sD_IN),
						    .sEN(dbg_calib_gate_delay$sEN),
						    .dD_OUT(dbg_calib_gate_delay$dD_OUT),
						    .sRDY(dbg_calib_gate_delay$sRDY));

  // submodule dbg_calib_gate_tap_cnt
  SyncRegister #(.width(32'd24),
		 .init(24'd0)) dbg_calib_gate_tap_cnt(.sCLK(memc_memc$tb_clk),
						      .dCLK(CLK),
						      .sRST_N(memc_memc$tb_rst_n),
						      .sD_IN(dbg_calib_gate_tap_cnt$sD_IN),
						      .sEN(dbg_calib_gate_tap_cnt$sEN),
						      .dD_OUT(dbg_calib_gate_tap_cnt$dD_OUT),
						      .sRDY(dbg_calib_gate_tap_cnt$sRDY));

  // submodule dbg_calib_rd_data_sel
  SyncRegister #(.width(32'd4),
		 .init(4'd0)) dbg_calib_rd_data_sel(.sCLK(memc_memc$tb_clk),
						    .dCLK(CLK),
						    .sRST_N(memc_memc$tb_rst_n),
						    .sD_IN(dbg_calib_rd_data_sel$sD_IN),
						    .sEN(dbg_calib_rd_data_sel$sEN),
						    .dD_OUT(dbg_calib_rd_data_sel$dD_OUT),
						    .sRDY(dbg_calib_rd_data_sel$sRDY));

  // submodule dbg_calib_rden_delay
  SyncRegister #(.width(32'd20),
		 .init(20'd0)) dbg_calib_rden_delay(.sCLK(memc_memc$tb_clk),
						    .dCLK(CLK),
						    .sRST_N(memc_memc$tb_rst_n),
						    .sD_IN(dbg_calib_rden_delay$sD_IN),
						    .sEN(dbg_calib_rden_delay$sEN),
						    .dD_OUT(dbg_calib_rden_delay$dD_OUT),
						    .sRDY(dbg_calib_rden_delay$sRDY));

  // submodule firBeat
  SyncBit #(.init(32'd0)) firBeat(.sCLK(memc_memc$tb_clk),
				  .dCLK(CLK),
				  .sRST_N(memc_memc$tb_rst_n),
				  .sD_IN(firBeat$sD_IN),
				  .sEN(firBeat$sEN),
				  .dD_OUT(firBeat$dD_OUT));

  // submodule initComplete
  SyncBit #(.init(32'd0)) initComplete(.sCLK(memc_memc$tb_clk),
				       .dCLK(CLK),
				       .sRST_N(memc_memc$tb_rst_n),
				       .sD_IN(initComplete$sD_IN),
				       .sEN(initComplete$sEN),
				       .dD_OUT(initComplete$dD_OUT));

  // submodule lreqF
  SyncFIFO #(.dataWidth(32'd177),
	     .depth(32'd2),
	     .indxWidth(32'd1),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) lreqF(.sCLK(CLK),
				    .dCLK(memc_memc$tb_clk),
				    .sRST_N(RST_N),
				    .sD_IN(lreqF$sD_IN),
				    .sENQ(lreqF$sENQ),
				    .dDEQ(lreqF$dDEQ),
				    .dD_OUT(lreqF$dD_OUT),
				    .sFULL_N(lreqF$sFULL_N),
				    .dEMPTY_N(lreqF$dEMPTY_N));

  // submodule lrespF
  SyncFIFO #(.dataWidth(32'd128),
	     .depth(32'd2),
	     .indxWidth(32'd1),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) lrespF(.sCLK(memc_memc$tb_clk),
				     .dCLK(CLK),
				     .sRST_N(memc_memc$tb_rst_n),
				     .sD_IN(lrespF$sD_IN),
				     .sENQ(lrespF$sENQ),
				     .dDEQ(lrespF$dDEQ),
				     .dD_OUT(lrespF$dD_OUT),
				     .sFULL_N(lrespF$sFULL_N),
				     .dEMPTY_N(lrespF$dEMPTY_N));

  // submodule memIsReset
  ResetToBool memIsReset(.RST(memc_memc$tb_rst_n), .VAL(memIsReset$VAL));

  // submodule memIsResetCC
  SyncBit #(.init(32'd0)) memIsResetCC(.sCLK(memc_memc$tb_clk),
				       .dCLK(CLK),
				       .sRST_N(memc_memc$tb_rst_n),
				       .sD_IN(memIsResetCC$sD_IN),
				       .sEN(memIsResetCC$sEN),
				       .dD_OUT(memIsResetCC$dD_OUT));

  // submodule memc_memc
  v5_mig34 memc_memc(.sys_rst_n(RST_N_sys0_rst),
		     .clk_ref(CLK_sys0_clk),
		     .clk_sys(CLK_sys1_clk),
		     .app_addr(memc_memc$app_addr),
		     .app_cmd(memc_memc$app_cmd),
		     .app_data(memc_memc$app_data),
		     .app_mask(memc_memc$app_mask),
		     .dbg_idel_down_all(memc_memc$dbg_idel_down_all),
		     .dbg_idel_down_dq(memc_memc$dbg_idel_down_dq),
		     .dbg_idel_down_dqs(memc_memc$dbg_idel_down_dqs),
		     .dbg_idel_down_gate(memc_memc$dbg_idel_down_gate),
		     .dbg_idel_up_all(memc_memc$dbg_idel_up_all),
		     .dbg_idel_up_dq(memc_memc$dbg_idel_up_dq),
		     .dbg_idel_up_dqs(memc_memc$dbg_idel_up_dqs),
		     .dbg_idel_up_gate(memc_memc$dbg_idel_up_gate),
		     .dbg_sel_all_idel_dq(memc_memc$dbg_sel_all_idel_dq),
		     .dbg_sel_all_idel_dqs(memc_memc$dbg_sel_all_idel_dqs),
		     .dbg_sel_all_idel_gate(memc_memc$dbg_sel_all_idel_gate),
		     .dbg_sel_idel_dq(memc_memc$dbg_sel_idel_dq),
		     .dbg_sel_idel_dqs(memc_memc$dbg_sel_idel_dqs),
		     .dbg_sel_idel_gate(memc_memc$dbg_sel_idel_gate),
		     .app_af_wren(memc_memc$app_af_wren),
		     .app_wf_wren(memc_memc$app_wf_wren),
		     .ddr2_addr(memc_memc$ddr2_addr),
		     .ddr2_ba(memc_memc$ddr2_ba),
		     .ddr2_ras_n(memc_memc$ddr2_ras_n),
		     .ddr2_cas_n(memc_memc$ddr2_cas_n),
		     .ddr2_we_n(memc_memc$ddr2_we_n),
		     .ddr2_cs_n(memc_memc$ddr2_cs_n),
		     .ddr2_odt(memc_memc$ddr2_odt),
		     .ddr2_cke(memc_memc$ddr2_cke),
		     .ddr2_dm(memc_memc$ddr2_dm),
		     .ddr2_ck_p(memc_memc$ddr2_ck_p),
		     .ddr2_ck_n(memc_memc$ddr2_ck_n),
		     .app_af_afull(memc_memc$app_af_afull),
		     .app_wf_afull(memc_memc$app_wf_afull),
		     .app_rd_data(memc_memc$app_rd_data),
		     .app_rd_data_valid(memc_memc$app_rd_data_valid),
		     .phy_init_done(memc_memc$phy_init_done),
		     .dbg_calib_done(memc_memc$dbg_calib_done),
		     .dbg_calib_err(memc_memc$dbg_calib_err),
		     .dbg_calib_dq_tap_cnt(memc_memc$dbg_calib_dq_tap_cnt),
		     .dbg_calib_dqs_tap_cnt(memc_memc$dbg_calib_dqs_tap_cnt),
		     .dbg_calib_gate_tap_cnt(memc_memc$dbg_calib_gate_tap_cnt),
		     .dbg_calib_rd_data_sel(memc_memc$dbg_calib_rd_data_sel),
		     .dbg_calib_rden_delay(memc_memc$dbg_calib_rden_delay),
		     .dbg_calib_gate_delay(memc_memc$dbg_calib_gate_delay),
		     .tb_clk(memc_memc$tb_clk),
		     .tb_rst_n(memc_memc$tb_rst_n),
		     .ddr2_dq(memc_memc$ddr2_dq),
		     .ddr2_dqs_p(memc_memc$ddr2_dqs_p),
		     .ddr2_dqs_n(memc_memc$ddr2_dqs_n));

  // submodule memc_reqF
  FIFO2 #(.width(32'd177),
	  .guarded(32'd1)) memc_reqF(.RST_N(memc_memc$tb_rst_n),
				     .CLK(memc_memc$tb_clk),
				     .D_IN(memc_reqF$D_IN),
				     .ENQ(memc_reqF$ENQ),
				     .DEQ(memc_reqF$DEQ),
				     .CLR(memc_reqF$CLR),
				     .D_OUT(memc_reqF$D_OUT),
				     .FULL_N(memc_reqF$FULL_N),
				     .EMPTY_N(memc_reqF$EMPTY_N));

  // submodule memc_respF
  FIFO2 #(.width(32'd128),
	  .guarded(32'd1)) memc_respF(.RST_N(memc_memc$tb_rst_n),
				      .CLK(memc_memc$tb_clk),
				      .D_IN(memc_respF$D_IN),
				      .ENQ(memc_respF$ENQ),
				      .DEQ(memc_respF$DEQ),
				      .CLR(memc_respF$CLR),
				      .D_OUT(memc_respF$D_OUT),
				      .FULL_N(memc_respF$FULL_N),
				      .EMPTY_N(memc_respF$EMPTY_N));

  // submodule requestCount
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) requestCount(.sCLK(memc_memc$tb_clk),
					    .dCLK(CLK),
					    .sRST_N(memc_memc$tb_rst_n),
					    .sD_IN(requestCount$sD_IN),
					    .sEN(requestCount$sEN),
					    .dD_OUT(requestCount$dD_OUT),
					    .sRDY(requestCount$sRDY));

  // submodule secBeat
  SyncBit #(.init(32'd0)) secBeat(.sCLK(memc_memc$tb_clk),
				  .dCLK(CLK),
				  .sRST_N(memc_memc$tb_rst_n),
				  .sD_IN(secBeat$sD_IN),
				  .sEN(secBeat$sEN),
				  .dD_OUT(secBeat$dD_OUT));

  // submodule splaF
  arSRLFIFO #(.width(32'd2), .l2depth(32'd4), .depth(32'd16)) splaF(.CLK(CLK),
								    .RST_N(RST_N),
								    .D_IN(splaF$D_IN),
								    .ENQ(splaF$ENQ),
								    .DEQ(splaF$DEQ),
								    .CLR(splaF$CLR),
								    .D_OUT(splaF$D_OUT),
								    .EMPTY_N(splaF$EMPTY_N),
								    .FULL_N(splaF$FULL_N));

  // submodule wci_isReset
  ResetToBool wci_isReset(.RST(RST_N), .VAL(wci_isReset$VAL));

  // submodule wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_reqF(.RST_N(RST_N),
					.CLK(CLK),
					.D_IN(wci_reqF$D_IN),
					.ENQ(wci_reqF$ENQ),
					.DEQ(wci_reqF$DEQ),
					.CLR(wci_reqF$CLR),
					.D_OUT(wci_reqF$D_OUT),
					.FULL_N(),
					.EMPTY_N(wci_reqF$EMPTY_N));

  // submodule wdfFull
  SyncBit #(.init(32'd0)) wdfFull(.sCLK(memc_memc$tb_clk),
				  .dCLK(CLK),
				  .sRST_N(memc_memc$tb_rst_n),
				  .sD_IN(wdfFull$sD_IN),
				  .sEN(wdfFull$sEN),
				  .dD_OUT(wdfFull$dD_OUT));

  // submodule wmemi_dhF
  SizedFIFO #(.p1width(32'd146),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wmemi_dhF(.RST_N(RST_N),
					 .CLK(CLK),
					 .D_IN(wmemi_dhF$D_IN),
					 .ENQ(wmemi_dhF$ENQ),
					 .DEQ(wmemi_dhF$DEQ),
					 .CLR(wmemi_dhF$CLR),
					 .D_OUT(wmemi_dhF$D_OUT),
					 .FULL_N(),
					 .EMPTY_N(wmemi_dhF$EMPTY_N));

  // submodule wmemi_isReset
  ResetToBool wmemi_isReset(.RST(RST_N), .VAL(wmemi_isReset$VAL));

  // submodule wmemi_reqF
  SizedFIFO #(.p1width(32'd52),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wmemi_reqF(.RST_N(RST_N),
					  .CLK(CLK),
					  .D_IN(wmemi_reqF$D_IN),
					  .ENQ(wmemi_reqF$ENQ),
					  .DEQ(wmemi_reqF$DEQ),
					  .CLR(wmemi_reqF$CLR),
					  .D_OUT(wmemi_reqF$D_OUT),
					  .FULL_N(),
					  .EMPTY_N(wmemi_reqF$EMPTY_N));

  // rule RL_wmemi_Es_doAlways_Req
  assign CAN_FIRE_RL_wmemi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_wmemi_Es_doAlways_Req = 1'd1 ;

  // rule RL_wmemi_update_statusR
  assign CAN_FIRE_RL_wmemi_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wmemi_update_statusR = 1'd1 ;

  // rule RL_wmemi_reqF_enq
  assign CAN_FIRE_RL_wmemi_reqF_enq =
	     wmemi_operateD && wmemi_peerIsReady &&
	     wmemi_wmemiReq$wget[51:49] != 3'd0 ;
  assign WILL_FIRE_RL_wmemi_reqF_enq = CAN_FIRE_RL_wmemi_reqF_enq ;

  // rule RL_wmemi_Es_doAlways_Dh
  assign CAN_FIRE_RL_wmemi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_wmemi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_wmemi_dhF_enq
  assign CAN_FIRE_RL_wmemi_dhF_enq =
	     wmemi_operateD && wmemi_peerIsReady && wmemi_wmemiDh$wget[145] ;
  assign WILL_FIRE_RL_wmemi_dhF_enq = CAN_FIRE_RL_wmemi_dhF_enq ;

  // rule RL_wci_request_decode
  assign CAN_FIRE_RL_wci_request_decode = wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wci_request_decode = wci_reqF$EMPTY_N ;

  // rule RL_wci_ctl_op_start
  assign CAN_FIRE_RL_wci_ctl_op_start =
	     wci_reqF$EMPTY_N && wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wci_ctl_op_start =
	     CAN_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wci_reqF$EMPTY_N &&
	     NOT_wci_respF_c_r_8_EQ_2_9_0_AND_IF_wci_reqF_f_ETC___d180 &&
	     wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_getRequest &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wci_reqF$EMPTY_N &&
	     IF_wci_reqF_first__3_BIT_51_4_THEN_lreqF_RDY_e_ETC___d51 &&
	     wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_getRequest &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_advance_response
  assign CAN_FIRE_RL_advance_response =
	     lrespF$dEMPTY_N &&
	     lrespF_RDY_deq__24_AND_NOT_splitReadInFlight_2_ETC___d232 &&
	     !wci_wci_cfwr_pw$whas &&
	     wmemiReadInFlight_value == 8'd0 ;
  assign WILL_FIRE_RL_advance_response =
	     CAN_FIRE_RL_advance_response &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign CAN_FIRE_RL_wci_ctrl_EiI =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd0 &&
	     wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_wci_ctrl_EiI = CAN_FIRE_RL_wci_ctrl_EiI ;

  // rule RL_wci_ctrl_OrE
  assign CAN_FIRE_RL_wci_ctrl_OrE =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd2 &&
	     wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_wci_ctrl_OrE = CAN_FIRE_RL_wci_ctrl_OrE ;

  // rule RL_getResponse
  assign CAN_FIRE_RL_getResponse =
	     lrespF$dEMPTY_N && lrespF$dEMPTY_N && wmemi_respF_c_r != 2'd2 &&
	     wmemi_operateD &&
	     wmemi_peerIsReady &&
	     (wmemiReadInFlight_value ^ 8'h80) > 8'd128 ;
  assign WILL_FIRE_RL_getResponse = CAN_FIRE_RL_getResponse ;

  // rule RL_getRequest
  assign CAN_FIRE_RL_getRequest =
	     lreqF$sFULL_N &&
	     wmemi_reqF_i_notEmpty__68_AND_wmemi_operateD_5_ETC___d276 ;
  assign WILL_FIRE_RL_getRequest = CAN_FIRE_RL_getRequest ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     lrespF$sFULL_N && memc_respF$EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_debug_update
  assign CAN_FIRE_RL_debug_update = 1'd1 ;
  assign WILL_FIRE_RL_debug_update = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut = lreqF$dEMPTY_N && memc_reqF$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_update_debug
  assign CAN_FIRE_RL_update_debug =
	     dbg_calib_done$sRDY && dbg_calib_err$sRDY &&
	     dbg_calib_dq_tap_cnt_RDY_write__01_AND_dbg_cal_ETC___d313 ;
  assign WILL_FIRE_RL_update_debug = CAN_FIRE_RL_update_debug ;

  // rule RL_update_secBeat
  assign CAN_FIRE_RL_update_secBeat = 1'd1 ;
  assign WILL_FIRE_RL_update_secBeat = 1'd1 ;

  // rule RL_update_firBeat
  assign CAN_FIRE_RL_update_firBeat = 1'd1 ;
  assign WILL_FIRE_RL_update_firBeat = 1'd1 ;

  // rule RL_update_wdfFull
  assign CAN_FIRE_RL_update_wdfFull = 1'd1 ;
  assign WILL_FIRE_RL_update_wdfFull = 1'd1 ;

  // rule RL_update_appFull
  assign CAN_FIRE_RL_update_appFull = 1'd1 ;
  assign WILL_FIRE_RL_update_appFull = 1'd1 ;

  // rule RL_update_initComplete
  assign CAN_FIRE_RL_update_initComplete = 1'd1 ;
  assign WILL_FIRE_RL_update_initComplete = 1'd1 ;

  // rule RL_update_memIsReset
  assign CAN_FIRE_RL_update_memIsReset = 1'd1 ;
  assign WILL_FIRE_RL_update_memIsReset = 1'd1 ;

  // rule RL_wmemiReadInFlight_accumulate
  assign CAN_FIRE_RL_wmemiReadInFlight_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_wmemiReadInFlight_accumulate = 1'd1 ;

  // rule RL_wci_ctrl_IsO
  assign CAN_FIRE_RL_wci_ctrl_IsO =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd1 &&
	     wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_wci_ctrl_IsO = CAN_FIRE_RL_wci_ctrl_IsO ;

  // rule RL_operating_actions
  assign CAN_FIRE_RL_operating_actions = wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_operating_actions = CAN_FIRE_RL_operating_actions ;

  // rule RL_wci_ctl_op_complete
  assign CAN_FIRE_RL_wci_ctl_op_complete =
	     wci_respF_c_r != 2'd2 && wci_ctlOpActive && wci_ctlAckReg ;
  assign WILL_FIRE_RL_wci_ctl_op_complete = CAN_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wmemi_respF_deq
  assign CAN_FIRE_RL_wmemi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wmemi_respF_deq = 1'd1 ;

  // rule RL_wmemi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wmemi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wmemi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wmemi_operateD__dreg_update
  assign CAN_FIRE_RL_wmemi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wmemi_operateD__dreg_update = 1'd1 ;

  // rule RL_wmemi_respF_both
  assign CAN_FIRE_RL_wmemi_respF_both =
	     ((wmemi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_getResponse :
		wmemi_respF_c_r != 2'd2 || CAN_FIRE_RL_getResponse) &&
	     wmemi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_getResponse ;
  assign WILL_FIRE_RL_wmemi_respF_both = CAN_FIRE_RL_wmemi_respF_both ;

  // rule RL_wmemi_respF_decCtr
  assign CAN_FIRE_RL_wmemi_respF_decCtr =
	     wmemi_respF_c_r != 2'd0 && !CAN_FIRE_RL_getResponse ;
  assign WILL_FIRE_RL_wmemi_respF_decCtr = CAN_FIRE_RL_wmemi_respF_decCtr ;

  // rule RL_wmemi_respF_incCtr
  assign CAN_FIRE_RL_wmemi_respF_incCtr =
	     ((wmemi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_getResponse :
		wmemi_respF_c_r != 2'd1 || CAN_FIRE_RL_getResponse) &&
	     CAN_FIRE_RL_getResponse &&
	     !(wmemi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wmemi_respF_incCtr = CAN_FIRE_RL_wmemi_respF_incCtr ;

  // rule RL_wmemi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_wmemi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_wmemi_dhF_enq != wmemi_dhF_r_deq$whas ;
  assign WILL_FIRE_RL_wmemi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_wmemi_dhF__updateLevelCounter ;

  // rule RL_wmemi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wmemi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wmemi_reqF_enq != CAN_FIRE_RL_getRequest ;
  assign WILL_FIRE_RL_wmemi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wmemi_reqF__updateLevelCounter ;

  // rule RL_memc_advance_readData
  assign CAN_FIRE_RL_memc_advance_readData =
	     (!memc_firstReadBeat || memc_respF$FULL_N) &&
	     memc_memc$phy_init_done &&
	     memc_memc$app_rd_data_valid ;
  assign WILL_FIRE_RL_memc_advance_readData =
	     CAN_FIRE_RL_memc_advance_readData ;

  // rule RL_memc_advance_write1
  assign CAN_FIRE_RL_memc_advance_write1 =
	     memc_reqF$EMPTY_N && memc_memc$phy_init_done &&
	     !memc_memc$app_wf_afull &&
	     memc_firstWriteBeat ;
  assign WILL_FIRE_RL_memc_advance_write1 = CAN_FIRE_RL_memc_advance_write1 ;

  // rule RL_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_memc_advance_request
  assign CAN_FIRE_RL_memc_advance_request =
	     memc_reqF$EMPTY_N && memc_memc$phy_init_done &&
	     !memc_memc$app_af_afull &&
	     !memc_firstWriteBeat ;
  assign WILL_FIRE_RL_memc_advance_request =
	     CAN_FIRE_RL_memc_advance_request ;

  // rule RL_memc_drive_memc_always_enabled
  assign CAN_FIRE_RL_memc_drive_memc_always_enabled = 1'd1 ;
  assign WILL_FIRE_RL_memc_drive_memc_always_enabled = 1'd1 ;

  // rule RL_memc_drive_wdf_wren
  assign CAN_FIRE_RL_memc_drive_wdf_wren = memc_wdfWren$whas ;
  assign WILL_FIRE_RL_memc_drive_wdf_wren = memc_wdfWren$whas ;

  // rule RL_wci_respF_deq
  assign CAN_FIRE_RL_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wci_respF_deq = 1'd1 ;

  // rule RL_wci_reqF_enq
  assign CAN_FIRE_RL_wci_reqF_enq = wci_s_req[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_wci_reqF_enq = CAN_FIRE_RL_wci_reqF_enq ;

  // rule RL_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wci_respF_both
  assign CAN_FIRE_RL_wci_respF_both =
	     ((wci_respF_c_r == 2'd1) ?
		wci_respF_x_wire$whas :
		wci_respF_c_r != 2'd2 || wci_respF_x_wire$whas) &&
	     wci_respF_c_r != 2'd0 &&
	     wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_respF_both = CAN_FIRE_RL_wci_respF_both ;

  // rule RL_wci_respF_decCtr
  assign CAN_FIRE_RL_wci_respF_decCtr =
	     wci_respF_c_r != 2'd0 && !wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_respF_decCtr = CAN_FIRE_RL_wci_respF_decCtr ;

  // rule RL_wci_respF_incCtr
  assign CAN_FIRE_RL_wci_respF_incCtr =
	     ((wci_respF_c_r == 2'd0) ?
		wci_respF_x_wire$whas :
		wci_respF_c_r != 2'd1 || wci_respF_x_wire$whas) &&
	     wci_respF_enqueueing$whas &&
	     !(wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wci_respF_incCtr = CAN_FIRE_RL_wci_respF_incCtr ;

  // rule RL_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wci_reqF__updateLevelCounter =
	     (wci_s_req[59:57] != 3'd0) != wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wci_reqF__updateLevelCounter ;

  // inputs to muxes for submodule ports
  assign MUX_memc_firstWriteBeat$write_1__SEL_1 =
	     WILL_FIRE_RL_memc_advance_request && !memc_reqF$D_OUT[176] ;
  assign MUX_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ;
  assign MUX_wmemi_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd0 ;
  assign MUX_wmemi_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd1 ;
  assign MUX_lreqF$enq_1__VAL_2 =
	     { 1'd1,
	       x1_addr__h13430,
	       144'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_lreqF$enq_1__VAL_1 =
	     { !wci_reqF$D_OUT[51] && wci_reqF$D_OUT[39:32] != 8'h54,
	       IF_wci_reqF_first__3_BIT_51_4_THEN_pReg_5_BITS_ETC___d209 } ;
  assign MUX_lreqF$enq_1__VAL_3 =
	     { wmemi_reqF$D_OUT[51:49] != 3'd1,
	       (wmemi_reqF$D_OUT[51:49] == 3'd1) ?
		 { wmemi_reqF$D_OUT[43:12],
		   wmemi_dhF$D_OUT[15:0],
		   wmemi_dhF$D_OUT[143:16] } :
		 { wmemi_reqF$D_OUT[43:0],
		   132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } } ;
  assign MUX_wci_respF_c_r$write_1__VAL_2 = wci_respF_c_r + 2'd1 ;
  assign MUX_wci_illegalEdge$write_1__VAL_2 =
	     wci_reqF$D_OUT[36:34] != 3'd4 && wci_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_respF_c_r$write_1__VAL_1 = wci_respF_c_r - 2'd1 ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_1 = { 2'd1, x_data__h17906 } ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_2 = { 2'd1, x_data__h13584 } ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_3 =
	     wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wmemi_respF_c_r$write_1__VAL_1 = wmemi_respF_c_r - 2'd1 ;
  assign MUX_wmemi_respF_c_r$write_1__VAL_2 = wmemi_respF_c_r + 2'd1 ;
  assign MUX_wmemi_respF_q_0$write_1__VAL_1 = { 3'd2, lrespF$dD_OUT } ;
  assign MUX_wmemi_respF_q_0$write_1__VAL_2 =
	     (wmemi_respF_c_r == 2'd1) ?
	       MUX_wmemi_respF_q_0$write_1__VAL_1 :
	       wmemi_respF_q_1 ;
  assign MUX_wmemi_respF_q_1$write_1__VAL_2 =
	     (wmemi_respF_c_r == 2'd2) ?
	       MUX_wmemi_respF_q_0$write_1__VAL_1 :
	       131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ;
  assign MUX_lreqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_reqF$D_OUT[51] || wci_reqF$D_OUT[39:32] == 8'h54 ||
	      wci_reqF$D_OUT[39:32] == 8'h58) ;
  assign MUX_lreqF$enq_1__SEL_2 =
	     WILL_FIRE_RL_wci_cfrd && wci_reqF$D_OUT[51] ;
  assign MUX_rdReg$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h80 ;
  assign MUX_rdReg_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h84 ;
  assign MUX_rdReg_2$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h88 ;
  assign MUX_rdReg_3$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h8C ;
  assign MUX_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState != 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 && wci_cState != 3'd1 &&
	      wci_cState != 3'd3 ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState != 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 && wci_cState != 3'd3 &&
	      wci_cState != 3'd2 &&
	      wci_cState != 3'd1 ||
	      wci_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_respF_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_wci_cfrd && !wci_reqF$D_OUT[51] ;
  always@(MUX_splitReadInFlight$write_1__SEL_1 or
	  MUX_wci_respF_x_wire$wset_1__VAL_1 or
	  MUX_wci_respF_x_wire$wset_1__SEL_2 or
	  MUX_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_wci_ctl_op_complete or
	  MUX_wci_respF_x_wire$wset_1__VAL_3 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_splitReadInFlight$write_1__SEL_1:
	  MUX_wci_respF_q_0$write_1__VAL_1 =
	      MUX_wci_respF_x_wire$wset_1__VAL_1;
      MUX_wci_respF_x_wire$wset_1__SEL_2:
	  MUX_wci_respF_q_0$write_1__VAL_1 =
	      MUX_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_ctl_op_complete:
	  MUX_wci_respF_q_0$write_1__VAL_1 =
	      MUX_wci_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_wci_cfwr: MUX_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_respF_q_0$write_1__VAL_2 =
	     (wci_respF_c_r == 2'd1) ?
	       MUX_wci_respF_q_0$write_1__VAL_1 :
	       wci_respF_q_1 ;
  assign MUX_wci_respF_q_1$write_1__VAL_2 =
	     (wci_respF_c_r == 2'd2) ?
	       MUX_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ;
  assign MUX_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ;
  assign MUX_wmemiReadInFlight_value$write_1__VAL_2 =
	     wmemiReadInFlight_value +
	     (wmemiReadInFlight_acc_v1$whas ? 8'd1 : 8'd0) +
	     (CAN_FIRE_RL_getResponse ? 8'd255 : 8'd0) ;

  // inlined wires
  assign wci_wciReq$whas = 1'd1 ;
  assign wci_wciReq$wget = wci_s_req ;
  assign wci_reqF_r_enq$whas = CAN_FIRE_RL_wci_reqF_enq ;
  assign wci_reqF_r_clr$whas = 1'b0 ;
  assign wci_respF_dequeueing$whas = wci_respF_c_r != 2'd0 ;
  assign wci_wEdge$wget = wci_reqF$D_OUT[36:34] ;
  assign wci_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_sFlagReg_1$wget = 1'b0 ;
  assign wci_sFlagReg_1$whas = 1'b0 ;
  assign memc_memcAddr_w$wget = { 3'd0, memc_reqF$D_OUT[175:146] } ;
  assign wci_wci_cfwr_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[56] &&
	     wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign wci_wci_cfrd_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[56] &&
	     wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign wci_wci_ctrl_pw$whas =
	     wci_reqF$EMPTY_N && !wci_reqF$D_OUT[56] &&
	     wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_ctl_op_start ;
  assign wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_ctl_op_complete ;
  assign wci_respF_x_wire$wget = MUX_wci_respF_q_0$write_1__VAL_1 ;
  assign wci_respF_x_wire$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_ctl_op_complete ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wEdge$whas = WILL_FIRE_RL_wci_ctl_op_start ;
  assign wci_ctlAckReg_1$wget = 1'd1 ;
  assign wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign memc_wdfWren$wget = 1'd1 ;
  assign memc_wdfWren$whas =
	     WILL_FIRE_RL_memc_advance_request && !memc_reqF$D_OUT[176] ||
	     WILL_FIRE_RL_memc_advance_write1 ;
  assign memc_memcCmd_w$wget = memc_reqF$D_OUT[176] ? 3'b001 : 3'b0 ;
  assign memc_memcCmd_w$whas = CAN_FIRE_RL_memc_advance_request ;
  assign memc_memcAddr_w$whas = CAN_FIRE_RL_memc_advance_request ;
  assign memc_memcData_w$wget =
	     MUX_memc_firstWriteBeat$write_1__SEL_1 ?
	       memc_reqF$D_OUT[63:0] :
	       memc_reqF$D_OUT[127:64] ;
  assign memc_memcData_w$whas = memc_wdfWren$whas ;
  assign memc_memcMask_w$wget =
	     MUX_memc_firstWriteBeat$write_1__SEL_1 ?
	       ~memc_reqF$D_OUT[135:128] :
	       ~memc_reqF$D_OUT[143:136] ;
  assign memc_memcMask_w$whas = memc_wdfWren$whas ;
  assign wmemi_wmemiReq$wget =
	     { wmemiS_MCmd,
	       wmemiS_MReqLast,
	       wmemiS_MAddr,
	       wmemiS_MBurstLength } ;
  assign wmemi_wmemiReq$whas = 1'd1 ;
  assign wmemi_wmemiDh$wget =
	     { wmemiS_MDataValid,
	       wmemiS_MDataLast,
	       wmemiS_MData,
	       wmemiS_MDataByteEn } ;
  assign wmemi_wmemiDh$whas = 1'd1 ;
  assign wmemi_cmdAccept_w$whas = CAN_FIRE_RL_wmemi_reqF_enq ;
  assign wmemi_cmdAccept_w$wget = 1'd1 ;
  assign wmemi_reqF_r_enq$whas = CAN_FIRE_RL_wmemi_reqF_enq ;
  assign wmemi_dhAccept_w$wget = 1'd1 ;
  assign wmemi_dhAccept_w$whas = CAN_FIRE_RL_wmemi_dhF_enq ;
  assign wmemi_reqF_r_deq$whas = CAN_FIRE_RL_getRequest ;
  assign wmemi_reqF_r_clr$whas = 1'b0 ;
  assign wmemi_dhF_r_enq$whas = CAN_FIRE_RL_wmemi_dhF_enq ;
  assign wmemi_dhF_r_deq$whas =
	     WILL_FIRE_RL_getRequest && wmemi_reqF$D_OUT[51:49] == 3'd1 ;
  assign wmemi_dhF_r_clr$whas = 1'b0 ;
  assign wmemi_respF_x_wire$wget = MUX_wmemi_respF_q_0$write_1__VAL_1 ;
  assign wmemi_respF_enqueueing$whas = CAN_FIRE_RL_getResponse ;
  assign wmemi_respF_x_wire$whas = CAN_FIRE_RL_getResponse ;
  assign wmemi_respF_dequeueing$whas = wmemi_respF_c_r != 2'd0 ;
  assign wmemi_operateD_1$whas = CAN_FIRE_RL_operating_actions ;
  assign wmemi_operateD_1$wget = 1'd1 ;
  assign wmemi_peerIsReady_1$wget = 1'd1 ;
  assign wmemi_peerIsReady_1$whas = wmemiS_MReset_n ;
  assign wmemiReadInFlight_acc_v1$whas =
	     WILL_FIRE_RL_getRequest && wmemi_reqF$D_OUT[51:49] != 3'd1 ;
  assign wmemiReadInFlight_acc_v1$wget = 8'd1 ;
  assign wmemiReadInFlight_acc_v2$wget = 8'd255 ;
  assign wmemiReadInFlight_acc_v2$whas = CAN_FIRE_RL_getResponse ;
  assign wmemi_Es_mCmd_w$wget = wmemiS_MCmd ;
  assign wmemi_Es_mCmd_w$whas = 1'd1 ;
  assign wmemi_Es_mReqLast_w$whas = wmemiS_MReqLast ;
  assign wmemi_Es_mAddr_w$wget = wmemiS_MAddr ;
  assign wmemi_Es_mAddr_w$whas = 1'd1 ;
  assign wmemi_Es_mBurstLength_w$wget = wmemiS_MBurstLength ;
  assign wmemi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wmemi_Es_mDataValid_w$whas = wmemiS_MDataValid ;
  assign wmemi_Es_mDataLast_w$whas = wmemiS_MDataLast ;
  assign wmemi_Es_mData_w$wget = wmemiS_MData ;
  assign wmemi_Es_mData_w$whas = 1'd1 ;
  assign wmemi_Es_mDataByteEn_w$wget = wmemiS_MDataByteEn ;
  assign wmemi_Es_mDataByteEn_w$whas = 1'd1 ;

  // register dbgCtrl
  assign dbgCtrl$D_IN = 32'h0 ;
  assign dbgCtrl$EN = 1'b0 ;

  // register dramCtrl
  assign dramCtrl$D_IN = wci_reqF$D_OUT[31:0] ;
  assign dramCtrl$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register mReg
  assign mReg$D_IN = wci_reqF$D_OUT[15:0] ;
  assign mReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register memc_firstReadBeat
  assign memc_firstReadBeat$D_IN = !memc_firstReadBeat ;
  assign memc_firstReadBeat$EN = CAN_FIRE_RL_memc_advance_readData ;

  // register memc_firstReadData
  assign memc_firstReadData$D_IN = memc_memc$app_rd_data ;
  assign memc_firstReadData$EN =
	     WILL_FIRE_RL_memc_advance_readData && !memc_firstReadBeat ;

  // register memc_firstWriteBeat
  assign memc_firstWriteBeat$D_IN = MUX_memc_firstWriteBeat$write_1__SEL_1 ;
  assign memc_firstWriteBeat$EN = memc_wdfWren$whas ;

  // register memc_requestCount
  assign memc_requestCount$D_IN = memc_requestCount + 16'd1 ;
  assign memc_requestCount$EN = CAN_FIRE_RL_memc_advance_request ;

  // register pReg
  assign pReg$D_IN = wci_reqF$D_OUT[15:0] ;
  assign pReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register rdReg
  assign rdReg$D_IN =
	     MUX_rdReg$write_1__SEL_1 ?
	       wci_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[31:0] ;
  assign rdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h80 ||
	     WILL_FIRE_RL_advance_response ;

  // register rdReg_1
  assign rdReg_1$D_IN =
	     MUX_rdReg_1$write_1__SEL_1 ?
	       wci_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[63:32] ;
  assign rdReg_1$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h84 ||
	     WILL_FIRE_RL_advance_response ;

  // register rdReg_2
  assign rdReg_2$D_IN =
	     MUX_rdReg_2$write_1__SEL_1 ?
	       wci_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[95:64] ;
  assign rdReg_2$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h88 ||
	     WILL_FIRE_RL_advance_response ;

  // register rdReg_3
  assign rdReg_3$D_IN =
	     MUX_rdReg_3$write_1__SEL_1 ?
	       wci_reqF$D_OUT[31:0] :
	       lrespF$dD_OUT[127:96] ;
  assign rdReg_3$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h8C ||
	     WILL_FIRE_RL_advance_response ;

  // register respCount
  assign respCount$D_IN = respCount + 8'd1 ;
  assign respCount$EN = WILL_FIRE_RL_advance_response ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = !MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splitReadInFlight$EN =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && wci_reqF$D_OUT[51] ;

  // register wci_cEdge
  assign wci_cEdge$D_IN = wci_reqF$D_OUT[36:34] ;
  assign wci_cEdge$EN = WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_cState
  assign wci_cState$D_IN = wci_nState ;
  assign wci_cState$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge ;

  // register wci_ctlAckReg
  assign wci_ctlAckReg$D_IN = wci_ctlAckReg_1$whas ;
  assign wci_ctlAckReg$EN = 1'd1 ;

  // register wci_ctlOpActive
  assign wci_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_ctl_op_complete ;
  assign wci_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete ||
	     WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_illegalEdge
  assign wci_illegalEdge$D_IN =
	     !MUX_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_illegalEdge$write_1__VAL_2 ;
  assign wci_illegalEdge$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ||
	     MUX_wci_illegalEdge$write_1__SEL_2 ;

  // register wci_nState
  always@(wci_reqF$D_OUT)
  begin
    case (wci_reqF$D_OUT[36:34])
      3'd0: wci_nState$D_IN = 3'd1;
      3'd1: wci_nState$D_IN = 3'd2;
      3'd2: wci_nState$D_IN = 3'd3;
      default: wci_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_nState$EN =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState == 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_cState == 3'd1 || wci_cState == 3'd3) ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState == 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_cState == 3'd3 || wci_cState == 3'd2 ||
	       wci_cState == 3'd1)) ;

  // register wci_reqF_countReg
  assign wci_reqF_countReg$D_IN =
	     (wci_s_req[59:57] != 3'd0) ?
	       wci_reqF_countReg + 2'd1 :
	       wci_reqF_countReg - 2'd1 ;
  assign wci_reqF_countReg$EN = CAN_FIRE_RL_wci_reqF__updateLevelCounter ;

  // register wci_respF_c_r
  assign wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_respF_decCtr ?
	       MUX_wci_respF_c_r$write_1__VAL_1 :
	       MUX_wci_respF_c_r$write_1__VAL_2 ;
  assign wci_respF_c_r$EN =
	     WILL_FIRE_RL_wci_respF_decCtr || WILL_FIRE_RL_wci_respF_incCtr ;

  // register wci_respF_q_0
  always@(MUX_wci_respF_q_0$write_1__SEL_1 or
	  MUX_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_respF_decCtr or wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_respF_q_0$write_1__SEL_1:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_0$D_IN = wci_respF_q_1;
      default: wci_respF_q_0$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF_q_0$EN =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_respF_q_1
  always@(MUX_wci_respF_q_1$write_1__SEL_1 or
	  MUX_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_1$write_1__VAL_2 or WILL_FIRE_RL_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_respF_q_1$write_1__SEL_1:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_respF_q_1$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF_q_1$EN =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_decCtr ;

  // register wci_sFlagReg
  assign wci_sFlagReg$D_IN = 1'b0 ;
  assign wci_sFlagReg$EN = 1'd1 ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wdReg
  assign wdReg$D_IN = wci_reqF$D_OUT[31:0] ;
  assign wdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register wdReg_1
  assign wdReg_1$D_IN = wci_reqF$D_OUT[31:0] ;
  assign wdReg_1$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register wdReg_2
  assign wdReg_2$D_IN = wci_reqF$D_OUT[31:0] ;
  assign wdReg_2$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register wdReg_3
  assign wdReg_3$D_IN = wci_reqF$D_OUT[31:0] ;
  assign wdReg_3$EN =
	     WILL_FIRE_RL_wci_cfwr && !wci_reqF$D_OUT[51] &&
	     wci_reqF$D_OUT[39:32] == 8'h6C ;

  // register wmemiRdReq
  assign wmemiRdReq$D_IN = wmemiRdReq + 32'd1 ;
  assign wmemiRdReq$EN = wmemiReadInFlight_acc_v1$whas ;

  // register wmemiRdResp
  assign wmemiRdResp$D_IN = wmemiRdResp + 32'd1 ;
  assign wmemiRdResp$EN = CAN_FIRE_RL_getResponse ;

  // register wmemiReadInFlight_value
  assign wmemiReadInFlight_value$D_IN =
	     WILL_FIRE_RL_wci_ctrl_IsO ?
	       8'd0 :
	       MUX_wmemiReadInFlight_value$write_1__VAL_2 ;
  assign wmemiReadInFlight_value$EN = 1'b1 ;

  // register wmemiWrReq
  assign wmemiWrReq$D_IN = wmemiWrReq + 32'd1 ;
  assign wmemiWrReq$EN = wmemi_dhF_r_deq$whas ;

  // register wmemi_dhF_countReg
  assign wmemi_dhF_countReg$D_IN =
	     CAN_FIRE_RL_wmemi_dhF_enq ?
	       wmemi_dhF_countReg + 2'd1 :
	       wmemi_dhF_countReg - 2'd1 ;
  assign wmemi_dhF_countReg$EN = CAN_FIRE_RL_wmemi_dhF__updateLevelCounter ;

  // register wmemi_errorSticky
  assign wmemi_errorSticky$D_IN = 1'b0 ;
  assign wmemi_errorSticky$EN = 1'b0 ;

  // register wmemi_operateD
  assign wmemi_operateD$D_IN = CAN_FIRE_RL_operating_actions ;
  assign wmemi_operateD$EN = 1'd1 ;

  // register wmemi_peerIsReady
  assign wmemi_peerIsReady$D_IN = wmemiS_MReset_n ;
  assign wmemi_peerIsReady$EN = 1'd1 ;

  // register wmemi_reqF_countReg
  assign wmemi_reqF_countReg$D_IN =
	     CAN_FIRE_RL_wmemi_reqF_enq ?
	       wmemi_reqF_countReg + 2'd1 :
	       wmemi_reqF_countReg - 2'd1 ;
  assign wmemi_reqF_countReg$EN = CAN_FIRE_RL_wmemi_reqF__updateLevelCounter ;

  // register wmemi_respF_c_r
  assign wmemi_respF_c_r$D_IN =
	     WILL_FIRE_RL_wmemi_respF_decCtr ?
	       MUX_wmemi_respF_c_r$write_1__VAL_1 :
	       MUX_wmemi_respF_c_r$write_1__VAL_2 ;
  assign wmemi_respF_c_r$EN =
	     WILL_FIRE_RL_wmemi_respF_decCtr ||
	     WILL_FIRE_RL_wmemi_respF_incCtr ;

  // register wmemi_respF_q_0
  always@(MUX_wmemi_respF_q_0$write_1__SEL_1 or
	  MUX_wmemi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wmemi_respF_both or
	  MUX_wmemi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wmemi_respF_decCtr or wmemi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_respF_q_0$write_1__SEL_1:
	  wmemi_respF_q_0$D_IN = MUX_wmemi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wmemi_respF_both:
	  wmemi_respF_q_0$D_IN = MUX_wmemi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmemi_respF_decCtr: wmemi_respF_q_0$D_IN = wmemi_respF_q_1;
      default: wmemi_respF_q_0$D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_respF_q_0$EN =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wmemi_respF_both ||
	     WILL_FIRE_RL_wmemi_respF_decCtr ;

  // register wmemi_respF_q_1
  always@(MUX_wmemi_respF_q_1$write_1__SEL_1 or
	  MUX_wmemi_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wmemi_respF_both or
	  MUX_wmemi_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wmemi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wmemi_respF_q_1$write_1__SEL_1:
	  wmemi_respF_q_1$D_IN = MUX_wmemi_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wmemi_respF_both:
	  wmemi_respF_q_1$D_IN = MUX_wmemi_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wmemi_respF_decCtr:
	  wmemi_respF_q_1$D_IN = 131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: wmemi_respF_q_1$D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmemi_respF_q_1$EN =
	     WILL_FIRE_RL_wmemi_respF_incCtr && wmemi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wmemi_respF_both ||
	     WILL_FIRE_RL_wmemi_respF_decCtr ;

  // register wmemi_statusR
  assign wmemi_statusR$D_IN =
	     { wmemi_isReset$VAL,
	       !wmemi_peerIsReady,
	       !wmemi_operateD,
	       wmemi_errorSticky,
	       3'd0,
	       wmemi_trafficSticky } ;
  assign wmemi_statusR$EN = 1'd1 ;

  // register wmemi_trafficSticky
  assign wmemi_trafficSticky$D_IN = 1'd1 ;
  assign wmemi_trafficSticky$EN = CAN_FIRE_RL_wmemi_reqF_enq ;

  // submodule appFull
  assign appFull$sD_IN = memc_memc$app_af_afull ;
  assign appFull$sEN = 1'd1 ;

  // submodule dbg_calib_done
  assign dbg_calib_done$sD_IN = memc_memc$dbg_calib_done ;
  assign dbg_calib_done$sEN = CAN_FIRE_RL_update_debug ;

  // submodule dbg_calib_dq_tap_cnt
  assign dbg_calib_dq_tap_cnt$sD_IN = memc_memc$dbg_calib_dq_tap_cnt ;
  assign dbg_calib_dq_tap_cnt$sEN = CAN_FIRE_RL_update_debug ;

  // submodule dbg_calib_dqs_tap_cnt
  assign dbg_calib_dqs_tap_cnt$sD_IN = memc_memc$dbg_calib_dqs_tap_cnt ;
  assign dbg_calib_dqs_tap_cnt$sEN = CAN_FIRE_RL_update_debug ;

  // submodule dbg_calib_err
  assign dbg_calib_err$sD_IN = memc_memc$dbg_calib_err ;
  assign dbg_calib_err$sEN = CAN_FIRE_RL_update_debug ;

  // submodule dbg_calib_gate_delay
  assign dbg_calib_gate_delay$sD_IN = memc_memc$dbg_calib_gate_delay ;
  assign dbg_calib_gate_delay$sEN = CAN_FIRE_RL_update_debug ;

  // submodule dbg_calib_gate_tap_cnt
  assign dbg_calib_gate_tap_cnt$sD_IN = memc_memc$dbg_calib_gate_tap_cnt ;
  assign dbg_calib_gate_tap_cnt$sEN = CAN_FIRE_RL_update_debug ;

  // submodule dbg_calib_rd_data_sel
  assign dbg_calib_rd_data_sel$sD_IN = memc_memc$dbg_calib_rd_data_sel ;
  assign dbg_calib_rd_data_sel$sEN = CAN_FIRE_RL_update_debug ;

  // submodule dbg_calib_rden_delay
  assign dbg_calib_rden_delay$sD_IN = memc_memc$dbg_calib_rden_delay ;
  assign dbg_calib_rden_delay$sEN = CAN_FIRE_RL_update_debug ;

  // submodule firBeat
  assign firBeat$sD_IN = memc_firstWriteBeat ;
  assign firBeat$sEN = 1'd1 ;

  // submodule initComplete
  assign initComplete$sD_IN = memc_memc$phy_init_done ;
  assign initComplete$sEN = 1'd1 ;

  // submodule lreqF
  always@(MUX_lreqF$enq_1__SEL_1 or
	  MUX_lreqF$enq_1__VAL_1 or
	  MUX_lreqF$enq_1__SEL_2 or
	  MUX_lreqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_getRequest or MUX_lreqF$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lreqF$enq_1__SEL_1: lreqF$sD_IN = MUX_lreqF$enq_1__VAL_1;
      MUX_lreqF$enq_1__SEL_2: lreqF$sD_IN = MUX_lreqF$enq_1__VAL_2;
      WILL_FIRE_RL_getRequest: lreqF$sD_IN = MUX_lreqF$enq_1__VAL_3;
      default: lreqF$sD_IN =
		   177'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lreqF$dDEQ = CAN_FIRE_RL_mkConnectionGetPut ;
  assign lreqF$sENQ =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_reqF$D_OUT[51] || wci_reqF$D_OUT[39:32] == 8'h54 ||
	      wci_reqF$D_OUT[39:32] == 8'h58) ||
	     WILL_FIRE_RL_wci_cfrd && wci_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_getRequest ;

  // submodule lrespF
  assign lrespF$sD_IN = memc_respF$D_OUT ;
  assign lrespF$dDEQ =
	     WILL_FIRE_RL_getResponse || WILL_FIRE_RL_advance_response ;
  assign lrespF$sENQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule memIsResetCC
  assign memIsResetCC$sD_IN = memIsReset$VAL ;
  assign memIsResetCC$sEN = 1'd1 ;

  // submodule memc_memc
  assign memc_memc$app_cmd =
	     CAN_FIRE_RL_memc_advance_request ? memc_memcCmd_w$wget : 3'd0 ;
  assign memc_memc$app_addr =
	     CAN_FIRE_RL_memc_advance_request ? memc_memcAddr_w$wget : 33'd0 ;
  assign memc_memc$app_data =
	     memc_wdfWren$whas ? memc_memcData_w$wget : 64'd0 ;
  assign memc_memc$app_mask =
	     memc_wdfWren$whas ? memc_memcMask_w$wget : 8'd0 ;
  assign memc_memc$dbg_idel_down_all = 1'd0 ;
  assign memc_memc$dbg_idel_down_dq = 1'd0 ;
  assign memc_memc$dbg_idel_down_dqs = 1'd0 ;
  assign memc_memc$dbg_idel_down_gate = 1'd0 ;
  assign memc_memc$dbg_idel_up_all = 1'd0 ;
  assign memc_memc$dbg_idel_up_dq = 1'd0 ;
  assign memc_memc$dbg_idel_up_dqs = 1'd0 ;
  assign memc_memc$dbg_idel_up_gate = 1'd0 ;
  assign memc_memc$dbg_sel_all_idel_dq = 1'd0 ;
  assign memc_memc$dbg_sel_all_idel_dqs = 1'd0 ;
  assign memc_memc$dbg_sel_all_idel_gate = 1'd0 ;
  assign memc_memc$dbg_sel_idel_dq = 5'd0 ;
  assign memc_memc$dbg_sel_idel_dqs = 2'd0 ;
  assign memc_memc$dbg_sel_idel_gate = 2'd0 ;
  assign memc_memc$app_af_wren = CAN_FIRE_RL_memc_advance_request ;
  assign memc_memc$app_wf_wren = memc_wdfWren$whas ;

  // submodule memc_reqF
  assign memc_reqF$D_IN = lreqF$dD_OUT ;
  assign memc_reqF$DEQ =
	     WILL_FIRE_RL_memc_advance_request && memc_reqF$D_OUT[176] ||
	     WILL_FIRE_RL_memc_advance_write1 ;
  assign memc_reqF$ENQ = CAN_FIRE_RL_mkConnectionGetPut ;
  assign memc_reqF$CLR = 1'b0 ;

  // submodule memc_respF
  assign memc_respF$D_IN = { memc_memc$app_rd_data, memc_firstReadData } ;
  assign memc_respF$DEQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign memc_respF$ENQ =
	     WILL_FIRE_RL_memc_advance_readData && memc_firstReadBeat ;
  assign memc_respF$CLR = 1'b0 ;

  // submodule requestCount
  assign requestCount$sD_IN = memc_requestCount ;
  assign requestCount$sEN = CAN_FIRE_RL_update_debug ;

  // submodule secBeat
  assign secBeat$sD_IN = memc_firstReadBeat ;
  assign secBeat$sEN = 1'd1 ;

  // submodule splaF
  assign splaF$D_IN = wci_reqF$D_OUT[35:34] ;
  assign splaF$DEQ = MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splaF$ENQ = MUX_lreqF$enq_1__SEL_2 ;
  assign splaF$CLR = 1'b0 ;

  // submodule wci_reqF
  assign wci_reqF$D_IN = wci_s_req ;
  assign wci_reqF$DEQ = wci_reqF_r_deq$whas ;
  assign wci_reqF$ENQ = CAN_FIRE_RL_wci_reqF_enq ;
  assign wci_reqF$CLR = 1'b0 ;

  // submodule wdfFull
  assign wdfFull$sD_IN = memc_memc$app_wf_afull ;
  assign wdfFull$sEN = 1'd1 ;

  // submodule wmemi_dhF
  assign wmemi_dhF$D_IN = wmemi_wmemiDh$wget ;
  assign wmemi_dhF$DEQ = wmemi_dhF_r_deq$whas ;
  assign wmemi_dhF$ENQ = CAN_FIRE_RL_wmemi_dhF_enq ;
  assign wmemi_dhF$CLR = 1'b0 ;

  // submodule wmemi_reqF
  assign wmemi_reqF$D_IN = wmemi_wmemiReq$wget ;
  assign wmemi_reqF$DEQ = CAN_FIRE_RL_getRequest ;
  assign wmemi_reqF$ENQ = CAN_FIRE_RL_wmemi_reqF_enq ;
  assign wmemi_reqF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wci_reqF_first__3_BIT_51_4_THEN_lreqF_RDY_e_ETC___d51 =
	     wci_reqF$D_OUT[51] ?
	       lreqF$sFULL_N && splaF$FULL_N :
	       wci_respF_c_r != 2'd2 ;
  assign IF_wci_reqF_first__3_BIT_51_4_THEN_pReg_5_BITS_ETC___d209 =
	     wci_reqF$D_OUT[51] ?
	       { x1_addr__h13430, x1_be__h16097, x1_data__h16098 } :
	       { wci_reqF$D_OUT[31:0], mReg, x1_data__h15128 } ;
  assign NOT_wci_respF_c_r_8_EQ_2_9_0_AND_IF_wci_reqF_f_ETC___d180 =
	     wci_respF_c_r != 2'd2 &&
	     (wci_reqF$D_OUT[51] ?
		lreqF$sFULL_N :
		((wci_reqF$D_OUT[39:32] == 8'h54) ?
		   lreqF$sFULL_N :
		   wci_reqF$D_OUT[39:32] != 8'h58 || lreqF$sFULL_N)) ;
  assign dbg_calib_dq_tap_cnt_RDY_write__01_AND_dbg_cal_ETC___d313 =
	     dbg_calib_dq_tap_cnt$sRDY && dbg_calib_dqs_tap_cnt$sRDY &&
	     dbg_calib_gate_tap_cnt$sRDY &&
	     dbg_calib_rd_data_sel$sRDY &&
	     dbg_calib_rden_delay$sRDY &&
	     dbg_calib_gate_delay$sRDY &&
	     requestCount$sRDY ;
  assign dramStatus__h13095 =
	     { 16'hFEED,
	       respCount,
	       2'h0,
	       memIsResetCC$dD_OUT,
	       appFull$dD_OUT,
	       wdfFull$dD_OUT,
	       secBeat$dD_OUT,
	       firBeat$dD_OUT,
	       initComplete$dD_OUT } ;
  assign lrespF_RDY_deq__24_AND_NOT_splitReadInFlight_2_ETC___d232 =
	     lrespF$dEMPTY_N &&
	     (!splitReadInFlight || splaF$EMPTY_N && wci_respF_c_r != 2'd2) ;
  assign rdat___1__h13639 = { 28'd0, dbg_calib_done$dD_OUT } ;
  assign rdat___1__h13648 = { 28'd0, dbg_calib_err$dD_OUT } ;
  assign rdat___1__h13657 = { 8'd0, dbg_calib_dq_tap_cnt$dD_OUT } ;
  assign rdat___1__h13666 = { 8'd0, dbg_calib_dqs_tap_cnt$dD_OUT } ;
  assign rdat___1__h13675 = { 8'd0, dbg_calib_gate_tap_cnt$dD_OUT } ;
  assign rdat___1__h13684 = { 28'd0, dbg_calib_rd_data_sel$dD_OUT } ;
  assign rdat___1__h13693 = { 12'd0, dbg_calib_rden_delay$dD_OUT } ;
  assign rdat___1__h13702 = { 12'd0, dbg_calib_gate_delay$dD_OUT } ;
  assign rdat___1__h13731 = { 24'd0, wmemi_statusR } ;
  assign rdat___1__h13784 = { 24'd0, wmemiReadInFlight_value } ;
  assign rdat___1__h13802 = { 16'd0, requestCount$dD_OUT } ;
  assign rdat___1__h13816 = { 16'd0, pReg } ;
  assign rdat___1__h13824 = { 16'd0, mReg } ;
  assign wmemi_reqF_i_notEmpty__68_AND_wmemi_operateD_5_ETC___d276 =
	     wmemi_reqF$EMPTY_N && wmemi_operateD && wmemi_peerIsReady &&
	     (wmemi_reqF$D_OUT[51:49] != 3'd1 || wmemi_dhF$EMPTY_N) ;
  assign x1_addr__h13430 = { pReg[12:0], wci_reqF$D_OUT[50:36], 4'd0 } ;
  assign x1_be__h16097 =
	     { (wci_reqF$D_OUT[35:34] == 2'd3) ? 4'hF : 4'h0,
	       (wci_reqF$D_OUT[35:34] == 2'd2) ? 4'hF : 4'h0,
	       (wci_reqF$D_OUT[35:34] == 2'd1) ? 4'hF : 4'h0,
	       (wci_reqF$D_OUT[35:34] == 2'd0) ? 4'hF : 4'h0 } ;
  assign x1_data__h15128 = { wdReg_3, wdReg_2, wdReg_1, wdReg } ;
  assign x1_data__h16098 = {4{wci_reqF$D_OUT[31:0]}} ;
  assign x_data__h13584 =
	     wci_reqF$D_OUT[51] ?
	       32'd0 :
	       CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 ;
  always@(splaF$D_OUT or lrespF$dD_OUT)
  begin
    case (splaF$D_OUT)
      2'd0: x_data__h17906 = lrespF$dD_OUT[31:0];
      2'd1: x_data__h17906 = lrespF$dD_OUT[63:32];
      2'd2: x_data__h17906 = lrespF$dD_OUT[95:64];
      2'd3: x_data__h17906 = lrespF$dD_OUT[127:96];
    endcase
  end
  always@(wci_reqF$D_OUT or
	  dramStatus__h13095 or
	  dramCtrl or
	  rdat___1__h13639 or
	  rdat___1__h13648 or
	  rdat___1__h13657 or
	  rdat___1__h13666 or
	  rdat___1__h13675 or
	  rdat___1__h13684 or
	  rdat___1__h13693 or
	  rdat___1__h13702 or
	  wmemiWrReq or
	  wmemiRdReq or
	  wmemiRdResp or
	  rdat___1__h13731 or
	  rdat___1__h13784 or
	  rdat___1__h13802 or
	  rdat___1__h13816 or
	  rdat___1__h13824 or
	  wdReg or
	  wdReg_1 or
	  wdReg_2 or wdReg_3 or rdReg or rdReg_1 or rdReg_2 or rdReg_3)
  begin
    case (wci_reqF$D_OUT[39:32])
      8'h0:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      dramStatus__h13095;
      8'h04: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = dramCtrl;
      8'h08:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13639;
      8'h0C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13648;
      8'h10:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13657;
      8'h14:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13666;
      8'h18:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13675;
      8'h1C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13684;
      8'h20:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13693;
      8'h24:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13702;
      8'h28:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      32'hC0DEBABE;
      8'h2C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = wmemiWrReq;
      8'h30:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = wmemiRdReq;
      8'h34:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = wmemiRdResp;
      8'h38:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13731;
      8'h3C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13784;
      8'h40, 8'h44, 8'h4C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = 32'd0;
      8'h48:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13802;
      8'h50:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13816;
      8'h5C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 =
	      rdat___1__h13824;
      8'h60: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = wdReg;
      8'h64: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = wdReg_1;
      8'h68: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = wdReg_2;
      8'h6C: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = wdReg_3;
      8'h80: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = rdReg;
      8'h84: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = rdReg_1;
      8'h88: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = rdReg_2;
      8'h8C: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = rdReg_3;
      default: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_dramSt_ETC__q1 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        dramCtrl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	respCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'd7;
	wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wdReg_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wdReg_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wdReg_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiRdReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiRdResp <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemiReadInFlight_value <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wmemiWrReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmemi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmemi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmemi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    131'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (dramCtrl$EN) dramCtrl <= `BSV_ASSIGNMENT_DELAY dramCtrl$D_IN;
	if (mReg$EN) mReg <= `BSV_ASSIGNMENT_DELAY mReg$D_IN;
	if (pReg$EN) pReg <= `BSV_ASSIGNMENT_DELAY pReg$D_IN;
	if (rdReg$EN) rdReg <= `BSV_ASSIGNMENT_DELAY rdReg$D_IN;
	if (rdReg_1$EN) rdReg_1 <= `BSV_ASSIGNMENT_DELAY rdReg_1$D_IN;
	if (rdReg_2$EN) rdReg_2 <= `BSV_ASSIGNMENT_DELAY rdReg_2$D_IN;
	if (rdReg_3$EN) rdReg_3 <= `BSV_ASSIGNMENT_DELAY rdReg_3$D_IN;
	if (respCount$EN) respCount <= `BSV_ASSIGNMENT_DELAY respCount$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (wci_cEdge$EN) wci_cEdge <= `BSV_ASSIGNMENT_DELAY wci_cEdge$D_IN;
	if (wci_cState$EN)
	  wci_cState <= `BSV_ASSIGNMENT_DELAY wci_cState$D_IN;
	if (wci_ctlAckReg$EN)
	  wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_ctlAckReg$D_IN;
	if (wci_ctlOpActive$EN)
	  wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY wci_ctlOpActive$D_IN;
	if (wci_illegalEdge$EN)
	  wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY wci_illegalEdge$D_IN;
	if (wci_nState$EN)
	  wci_nState <= `BSV_ASSIGNMENT_DELAY wci_nState$D_IN;
	if (wci_reqF_countReg$EN)
	  wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY wci_reqF_countReg$D_IN;
	if (wci_respF_c_r$EN)
	  wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_respF_c_r$D_IN;
	if (wci_respF_q_0$EN)
	  wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_0$D_IN;
	if (wci_respF_q_1$EN)
	  wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_1$D_IN;
	if (wci_sFlagReg$EN)
	  wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_sFlagReg$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wdReg$EN) wdReg <= `BSV_ASSIGNMENT_DELAY wdReg$D_IN;
	if (wdReg_1$EN) wdReg_1 <= `BSV_ASSIGNMENT_DELAY wdReg_1$D_IN;
	if (wdReg_2$EN) wdReg_2 <= `BSV_ASSIGNMENT_DELAY wdReg_2$D_IN;
	if (wdReg_3$EN) wdReg_3 <= `BSV_ASSIGNMENT_DELAY wdReg_3$D_IN;
	if (wmemiRdReq$EN)
	  wmemiRdReq <= `BSV_ASSIGNMENT_DELAY wmemiRdReq$D_IN;
	if (wmemiRdResp$EN)
	  wmemiRdResp <= `BSV_ASSIGNMENT_DELAY wmemiRdResp$D_IN;
	if (wmemiReadInFlight_value$EN)
	  wmemiReadInFlight_value <= `BSV_ASSIGNMENT_DELAY
	      wmemiReadInFlight_value$D_IN;
	if (wmemiWrReq$EN)
	  wmemiWrReq <= `BSV_ASSIGNMENT_DELAY wmemiWrReq$D_IN;
	if (wmemi_dhF_countReg$EN)
	  wmemi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY wmemi_dhF_countReg$D_IN;
	if (wmemi_errorSticky$EN)
	  wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY wmemi_errorSticky$D_IN;
	if (wmemi_operateD$EN)
	  wmemi_operateD <= `BSV_ASSIGNMENT_DELAY wmemi_operateD$D_IN;
	if (wmemi_peerIsReady$EN)
	  wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY wmemi_peerIsReady$D_IN;
	if (wmemi_reqF_countReg$EN)
	  wmemi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wmemi_reqF_countReg$D_IN;
	if (wmemi_respF_c_r$EN)
	  wmemi_respF_c_r <= `BSV_ASSIGNMENT_DELAY wmemi_respF_c_r$D_IN;
	if (wmemi_respF_q_0$EN)
	  wmemi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wmemi_respF_q_0$D_IN;
	if (wmemi_respF_q_1$EN)
	  wmemi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wmemi_respF_q_1$D_IN;
	if (wmemi_trafficSticky$EN)
	  wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wmemi_trafficSticky$D_IN;
      end
    if (wmemi_statusR$EN)
      wmemi_statusR <= `BSV_ASSIGNMENT_DELAY wmemi_statusR$D_IN;
  end

  always@(posedge memc_memc$tb_clk)
  begin
    if (!memc_memc$tb_rst_n)
      begin
        dbgCtrl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	memc_firstReadBeat <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memc_firstReadData <= `BSV_ASSIGNMENT_DELAY 64'd0;
	memc_firstWriteBeat <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memc_requestCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (dbgCtrl$EN) dbgCtrl <= `BSV_ASSIGNMENT_DELAY dbgCtrl$D_IN;
	if (memc_firstReadBeat$EN)
	  memc_firstReadBeat <= `BSV_ASSIGNMENT_DELAY memc_firstReadBeat$D_IN;
	if (memc_firstReadData$EN)
	  memc_firstReadData <= `BSV_ASSIGNMENT_DELAY memc_firstReadData$D_IN;
	if (memc_firstWriteBeat$EN)
	  memc_firstWriteBeat <= `BSV_ASSIGNMENT_DELAY
	      memc_firstWriteBeat$D_IN;
	if (memc_requestCount$EN)
	  memc_requestCount <= `BSV_ASSIGNMENT_DELAY memc_requestCount$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dbgCtrl = 32'hAAAAAAAA;
    dramCtrl = 32'hAAAAAAAA;
    mReg = 16'hAAAA;
    memc_firstReadBeat = 1'h0;
    memc_firstReadData = 64'hAAAAAAAAAAAAAAAA;
    memc_firstWriteBeat = 1'h0;
    memc_requestCount = 16'hAAAA;
    pReg = 16'hAAAA;
    rdReg = 32'hAAAAAAAA;
    rdReg_1 = 32'hAAAAAAAA;
    rdReg_2 = 32'hAAAAAAAA;
    rdReg_3 = 32'hAAAAAAAA;
    respCount = 8'hAA;
    splitReadInFlight = 1'h0;
    wci_cEdge = 3'h2;
    wci_cState = 3'h2;
    wci_ctlAckReg = 1'h0;
    wci_ctlOpActive = 1'h0;
    wci_illegalEdge = 1'h0;
    wci_nState = 3'h2;
    wci_reqF_countReg = 2'h2;
    wci_respF_c_r = 2'h2;
    wci_respF_q_0 = 34'h2AAAAAAAA;
    wci_respF_q_1 = 34'h2AAAAAAAA;
    wci_sFlagReg = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wdReg = 32'hAAAAAAAA;
    wdReg_1 = 32'hAAAAAAAA;
    wdReg_2 = 32'hAAAAAAAA;
    wdReg_3 = 32'hAAAAAAAA;
    wmemiRdReq = 32'hAAAAAAAA;
    wmemiRdResp = 32'hAAAAAAAA;
    wmemiReadInFlight_value = 8'hAA;
    wmemiWrReq = 32'hAAAAAAAA;
    wmemi_dhF_countReg = 2'h2;
    wmemi_errorSticky = 1'h0;
    wmemi_operateD = 1'h0;
    wmemi_peerIsReady = 1'h0;
    wmemi_reqF_countReg = 2'h2;
    wmemi_respF_c_r = 2'h2;
    wmemi_respF_q_0 = 131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemi_respF_q_1 = 131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wmemi_statusR = 8'hAA;
    wmemi_trafficSticky = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	begin
	  v__h3692 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3692,
		 wci_reqF$D_OUT[36:34],
		 wci_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/DramServerV5.bsv\", line 202, column 8: (R0001)\n  Mutually exclusive rules RL_wci_cfrd and RL_wci_cfwr fired in the same clock\n  cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/DramServerV5.bsv\", line 166, column 8: (R0001)\n  Mutually exclusive rules RL_advance_response and RL_wci_cfrd fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/DramServerV5.bsv\", line 166, column 8: (R0001)\n  Mutually exclusive rules RL_advance_response and RL_wci_cfwr fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/DramServerV5.bsv\", line 253, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_advance_response fired in\n  the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/DramServerV5.bsv\", line 253, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_cfrd fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/DramServerV5.bsv\", line 253, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/DramServerV5.bsv\", line 254, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_advance_response fired in\n  the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/DramServerV5.bsv\", line 254, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_ctrl_EiI fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/DramServerV5.bsv\", line 254, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_cfrd fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/DramServerV5.bsv\", line 254, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	begin
	  v__h13245 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting DramWorker dramCtrl:%0x",
		 v__h13245,
		 dramCtrl);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/DramServerV5.bsv\", line 246, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_advance_response fired in\n  the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/DramServerV5.bsv\", line 246, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_ctrl_OrE fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/DramServerV5.bsv\", line 246, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_ctrl_EiI fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/DramServerV5.bsv\", line 246, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_cfrd fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/DramServerV5.bsv\", line 246, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	begin
	  v__h2793 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h2793,
		 wci_cEdge,
		 wci_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	begin
	  v__h2646 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h2646,
		 wci_cEdge,
		 wci_cState,
		 wci_nState);
  end
  // synopsys translate_on
endmodule  // mkDramServerV5

