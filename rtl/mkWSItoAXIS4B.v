//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Thu Feb 10 10:47:40 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// wsi_SThreadBusy                O     1
// wsi_SReset_n                   O     1
// axi_TVALID                     O     1
// axi_TDATA                      O    32 reg
// axi_TSTRB                      O     4 reg
// axi_TUSER                      O    32 reg
// axi_TLAST                      O     1 reg
// RDY_operate                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wsi_req                        I    61
// wsi_MReset_n                   I     1 reg
// axi_TREADY                     I     1
// EN_operate                     I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWSItoAXIS4B(CLK,
		     RST_N,

		     wsi_req,

		     wsi_SThreadBusy,

		     wsi_SReset_n,

		     wsi_MReset_n,

		     axi_TVALID,

		     axi_TREADY,

		     axi_TDATA,

		     axi_TSTRB,

		     axi_TUSER,

		     axi_TLAST,

		     EN_operate,
		     RDY_operate);
  input  CLK;
  input  RST_N;

  // action method wsi_put
  input  [60 : 0] wsi_req;

  // value method wsi_sThreadBusy
  output wsi_SThreadBusy;

  // value method wsi_sReset_n
  output wsi_SReset_n;

  // action method wsi_mReset_n
  input  wsi_MReset_n;

  // value method axi_mTVALID
  output axi_TVALID;

  // action method axi_sTREADY
  input  axi_TREADY;

  // value method axi_mTDATA
  output [31 : 0] axi_TDATA;

  // value method axi_mTSTRB
  output [3 : 0] axi_TSTRB;

  // value method axi_mTUSER
  output [31 : 0] axi_TUSER;

  // value method axi_mTKEEP

  // value method axi_mTLAST
  output axi_TLAST;

  // action method operate
  input  EN_operate;
  output RDY_operate;

  // signals for module outputs
  wire [31 : 0] axi_TDATA, axi_TUSER;
  wire [3 : 0] axi_TSTRB;
  wire RDY_operate, axi_TLAST, axi_TVALID, wsi_SReset_n, wsi_SThreadBusy;

  // inlined wires
  wire [95 : 0] wsiS_extStatusW$wget;
  wire [68 : 0] axiM_fifof_x_wire$wget;
  wire [60 : 0] wsiS_wsiReq$wget;
  wire axiM_deq_deq$whas,
       axiM_deq_ready$whas,
       axiM_fifof_dequeueing$whas,
       axiM_fifof_enqueueing$whas,
       axiM_fifof_x_wire$whas,
       axi_Em_mTRdy_w$wget,
       axi_Em_mTRdy_w$whas,
       operateD_1$wget,
       operateD_1$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas;

  // register axiM_fifof_c_r
  reg [1 : 0] axiM_fifof_c_r;
  wire [1 : 0] axiM_fifof_c_r$D_IN;
  wire axiM_fifof_c_r$EN;

  // register axiM_fifof_q_0
  reg [68 : 0] axiM_fifof_q_0;
  reg [68 : 0] axiM_fifof_q_0$D_IN;
  wire axiM_fifof_q_0$EN;

  // register axiM_fifof_q_1
  reg [68 : 0] axiM_fifof_q_1;
  reg [68 : 0] axiM_fifof_q_1$D_IN;
  wire axiM_fifof_q_1$EN;

  // register operateD
  reg operateD;
  wire operateD$D_IN, operateD$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule wsiS_isReset
  wire wsiS_isReset$VAL;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_advance_data,
       CAN_FIRE_RL_axiM_do_deq,
       CAN_FIRE_RL_axiM_fifof_both,
       CAN_FIRE_RL_axiM_fifof_decCtr,
       CAN_FIRE_RL_axiM_fifof_incCtr,
       CAN_FIRE_RL_axi_Em_doAlways,
       CAN_FIRE_RL_operateD__dreg_update,
       CAN_FIRE_RL_operate_action,
       CAN_FIRE_RL_wsiS_backpressure,
       CAN_FIRE_RL_wsiS_ext_status_assign,
       CAN_FIRE_RL_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_wsiS_reqFifo_enq,
       CAN_FIRE_RL_wsiS_reqFifo_reset,
       CAN_FIRE_RL_wsiS_update_statusR,
       CAN_FIRE_axi_sTREADY,
       CAN_FIRE_operate,
       CAN_FIRE_wsi_mReset_n,
       CAN_FIRE_wsi_put,
       WILL_FIRE_RL_advance_data,
       WILL_FIRE_RL_axiM_do_deq,
       WILL_FIRE_RL_axiM_fifof_both,
       WILL_FIRE_RL_axiM_fifof_decCtr,
       WILL_FIRE_RL_axiM_fifof_incCtr,
       WILL_FIRE_RL_axi_Em_doAlways,
       WILL_FIRE_RL_operateD__dreg_update,
       WILL_FIRE_RL_operate_action,
       WILL_FIRE_RL_wsiS_backpressure,
       WILL_FIRE_RL_wsiS_ext_status_assign,
       WILL_FIRE_RL_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset,
       WILL_FIRE_RL_wsiS_update_statusR,
       WILL_FIRE_axi_sTREADY,
       WILL_FIRE_operate,
       WILL_FIRE_wsi_mReset_n,
       WILL_FIRE_wsi_put;

  // inputs to muxes for submodule ports
  wire [68 : 0] MUX_axiM_fifof_q_0$write_1__VAL_1,
		MUX_axiM_fifof_q_0$write_1__VAL_2,
		MUX_axiM_fifof_q_1$write_1__VAL_2;
  wire [1 : 0] MUX_axiM_fifof_c_r$write_1__VAL_1,
	       MUX_axiM_fifof_c_r$write_1__VAL_2;
  wire MUX_axiM_fifof_q_0$write_1__SEL_1,
       MUX_axiM_fifof_q_1$write_1__SEL_1,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  wire [31 : 0] x_user__h4170;
  wire [15 : 0] aui_length__h4185;
  wire [11 : 0] x__h4190;
  wire wsiS_reqFifo_notFull__1_AND_wsiS_burstKind_6_E_ETC___d53;

  // action method wsi_put
  assign CAN_FIRE_wsi_put = 1'd1 ;
  assign WILL_FIRE_wsi_put = 1'd1 ;

  // value method wsi_sThreadBusy
  assign wsi_SThreadBusy =
	     !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget ;

  // value method wsi_sReset_n
  assign wsi_SReset_n = !wsiS_isReset$VAL && wsiS_operateD ;

  // action method wsi_mReset_n
  assign CAN_FIRE_wsi_mReset_n = 1'd1 ;
  assign WILL_FIRE_wsi_mReset_n = wsi_MReset_n ;

  // value method axi_mTVALID
  assign axi_TVALID = axiM_fifof_c_r != 2'd0 ;

  // action method axi_sTREADY
  assign CAN_FIRE_axi_sTREADY = 1'd1 ;
  assign WILL_FIRE_axi_sTREADY = axi_TREADY ;

  // value method axi_mTDATA
  assign axi_TDATA = axiM_fifof_q_0[68:37] ;

  // value method axi_mTSTRB
  assign axi_TSTRB = axiM_fifof_q_0[36:33] ;

  // value method axi_mTUSER
  assign axi_TUSER = axiM_fifof_q_0[32:1] ;

  // value method axi_mTLAST
  assign axi_TLAST = axiM_fifof_q_0[0] ;

  // action method operate
  assign RDY_operate = 1'd1 ;
  assign CAN_FIRE_operate = 1'd1 ;
  assign WILL_FIRE_operate = EN_operate ;

  // submodule wsiS_isReset
  ResetToBool wsiS_isReset(.RST(RST_N), .VAL(wsiS_isReset$VAL));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wsiS_backpressure
  assign CAN_FIRE_RL_wsiS_backpressure =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign WILL_FIRE_RL_wsiS_backpressure = CAN_FIRE_RL_wsiS_backpressure ;

  // rule RL_operate_action
  assign CAN_FIRE_RL_operate_action = operateD ;
  assign WILL_FIRE_RL_operate_action = operateD ;

  // rule RL_wsiS_ext_status_assign
  assign CAN_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_wsiS_inc_tBusyCount =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_wsiS_inc_tBusyCount = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // rule RL_wsiS_update_statusR
  assign CAN_FIRE_RL_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_update_statusR = 1'd1 ;

  // rule RL_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady && wsi_req[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_wsiS_reqFifo_enq = CAN_FIRE_RL_wsiS_reqFifo_enq ;

  // rule RL_advance_data
  assign CAN_FIRE_RL_advance_data =
	     axiM_fifof_c_r != 2'd2 && wsiS_reqFifo$EMPTY_N && operateD ;
  assign WILL_FIRE_RL_advance_data = CAN_FIRE_RL_advance_data ;

  // rule RL_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     CAN_FIRE_RL_advance_data ;
  assign WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_wsiS_reqFifo_reset =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     CAN_FIRE_RL_advance_data ;
  assign WILL_FIRE_RL_wsiS_reqFifo_reset = CAN_FIRE_RL_wsiS_reqFifo_reset ;

  // rule RL_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_operateD__dreg_update
  assign CAN_FIRE_RL_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_operateD__dreg_update = 1'd1 ;

  // rule RL_axi_Em_doAlways
  assign CAN_FIRE_RL_axi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_axi_Em_doAlways = 1'd1 ;

  // rule RL_axiM_do_deq
  assign CAN_FIRE_RL_axiM_do_deq = axiM_fifof_c_r != 2'd0 && axi_TREADY ;
  assign WILL_FIRE_RL_axiM_do_deq = CAN_FIRE_RL_axiM_do_deq ;

  // rule RL_axiM_fifof_incCtr
  assign CAN_FIRE_RL_axiM_fifof_incCtr =
	     ((axiM_fifof_c_r == 2'd0) ?
		CAN_FIRE_RL_advance_data :
		axiM_fifof_c_r != 2'd1 || CAN_FIRE_RL_advance_data) &&
	     CAN_FIRE_RL_advance_data &&
	     !CAN_FIRE_RL_axiM_do_deq ;
  assign WILL_FIRE_RL_axiM_fifof_incCtr = CAN_FIRE_RL_axiM_fifof_incCtr ;

  // rule RL_axiM_fifof_decCtr
  assign CAN_FIRE_RL_axiM_fifof_decCtr =
	     CAN_FIRE_RL_axiM_do_deq && !CAN_FIRE_RL_advance_data ;
  assign WILL_FIRE_RL_axiM_fifof_decCtr = CAN_FIRE_RL_axiM_fifof_decCtr ;

  // rule RL_axiM_fifof_both
  assign CAN_FIRE_RL_axiM_fifof_both =
	     ((axiM_fifof_c_r == 2'd1) ?
		CAN_FIRE_RL_advance_data :
		axiM_fifof_c_r != 2'd2 || CAN_FIRE_RL_advance_data) &&
	     CAN_FIRE_RL_axiM_do_deq &&
	     CAN_FIRE_RL_advance_data ;
  assign WILL_FIRE_RL_axiM_fifof_both = CAN_FIRE_RL_axiM_fifof_both ;

  // inputs to muxes for submodule ports
  assign MUX_axiM_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_axiM_fifof_incCtr && axiM_fifof_c_r == 2'd0 ;
  assign MUX_axiM_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_axiM_fifof_incCtr && axiM_fifof_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign MUX_axiM_fifof_c_r$write_1__VAL_1 = axiM_fifof_c_r + 2'd1 ;
  assign MUX_axiM_fifof_c_r$write_1__VAL_2 = axiM_fifof_c_r - 2'd1 ;
  assign MUX_axiM_fifof_q_0$write_1__VAL_1 =
	     { wsiS_reqFifo$D_OUT[43:8],
	       x_user__h4170,
	       wsiS_reqFifo$D_OUT[57] } ;
  assign MUX_axiM_fifof_q_0$write_1__VAL_2 =
	     (axiM_fifof_c_r == 2'd1) ?
	       MUX_axiM_fifof_q_0$write_1__VAL_1 :
	       axiM_fifof_q_1 ;
  assign MUX_axiM_fifof_q_1$write_1__VAL_2 =
	     (axiM_fifof_c_r == 2'd2) ?
	       MUX_axiM_fifof_q_0$write_1__VAL_1 :
	       69'd0 ;

  // inlined wires
  assign wsiS_wsiReq$wget = wsi_req ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = operateD ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsi_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas = CAN_FIRE_RL_wsiS_backpressure ;
  assign axiM_fifof_x_wire$wget = MUX_axiM_fifof_q_0$write_1__VAL_1 ;
  assign axiM_fifof_x_wire$whas = CAN_FIRE_RL_advance_data ;
  assign operateD_1$wget = 1'd1 ;
  assign operateD_1$whas = EN_operate ;
  assign axi_Em_mTRdy_w$wget = 1'd1 ;
  assign axi_Em_mTRdy_w$whas = axi_TREADY ;
  assign wsiS_reqFifo_r_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_deq$whas = CAN_FIRE_RL_advance_data ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetDeq$whas = CAN_FIRE_RL_advance_data ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign axiM_fifof_enqueueing$whas = CAN_FIRE_RL_advance_data ;
  assign axiM_fifof_dequeueing$whas = CAN_FIRE_RL_axiM_do_deq ;
  assign axiM_deq_ready$whas = axi_TREADY ;
  assign axiM_deq_deq$whas = 1'b0 ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;

  // register axiM_fifof_c_r
  assign axiM_fifof_c_r$D_IN =
	     WILL_FIRE_RL_axiM_fifof_incCtr ?
	       MUX_axiM_fifof_c_r$write_1__VAL_1 :
	       MUX_axiM_fifof_c_r$write_1__VAL_2 ;
  assign axiM_fifof_c_r$EN =
	     WILL_FIRE_RL_axiM_fifof_incCtr ||
	     WILL_FIRE_RL_axiM_fifof_decCtr ;

  // register axiM_fifof_q_0
  always@(MUX_axiM_fifof_q_0$write_1__SEL_1 or
	  MUX_axiM_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_axiM_fifof_both or
	  MUX_axiM_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_axiM_fifof_decCtr or axiM_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_axiM_fifof_q_0$write_1__SEL_1:
	  axiM_fifof_q_0$D_IN = MUX_axiM_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_axiM_fifof_both:
	  axiM_fifof_q_0$D_IN = MUX_axiM_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_axiM_fifof_decCtr: axiM_fifof_q_0$D_IN = axiM_fifof_q_1;
      default: axiM_fifof_q_0$D_IN =
		   69'h0AAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign axiM_fifof_q_0$EN =
	     WILL_FIRE_RL_axiM_fifof_incCtr && axiM_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_axiM_fifof_both ||
	     WILL_FIRE_RL_axiM_fifof_decCtr ;

  // register axiM_fifof_q_1
  always@(MUX_axiM_fifof_q_1$write_1__SEL_1 or
	  MUX_axiM_fifof_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_axiM_fifof_both or
	  MUX_axiM_fifof_q_1$write_1__VAL_2 or WILL_FIRE_RL_axiM_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_axiM_fifof_q_1$write_1__SEL_1:
	  axiM_fifof_q_1$D_IN = MUX_axiM_fifof_q_0$write_1__VAL_1;
      WILL_FIRE_RL_axiM_fifof_both:
	  axiM_fifof_q_1$D_IN = MUX_axiM_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_axiM_fifof_decCtr: axiM_fifof_q_1$D_IN = 69'd0;
      default: axiM_fifof_q_1$D_IN =
		   69'h0AAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign axiM_fifof_q_1$EN =
	     WILL_FIRE_RL_axiM_fifof_incCtr && axiM_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_axiM_fifof_both ||
	     WILL_FIRE_RL_axiM_fifof_decCtr ;

  // register operateD
  assign operateD$D_IN = EN_operate ;
  assign operateD$EN = 1'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ? (wsi_req[56] ? 2'd1 : 2'd2) : 2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__1_AND_wsiS_burstKind_6_E_ETC___d53 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsi_req[57] ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsi_req[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = operateD ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsi_req[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsi_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_advance_data ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset$VAL,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN = wsi_req[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsi_req ;
  assign wsiS_reqFifo$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$DEQ = CAN_FIRE_RL_advance_data ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign aui_length__h4185 = { 4'd0, x__h4190 } ;
  assign wsiS_reqFifo_notFull__1_AND_wsiS_burstKind_6_E_ETC___d53 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsi_req[57]) ;
  assign x__h4190 = { wsiS_reqFifo$D_OUT[53:44], 2'd0 } ;
  assign x_user__h4170 = { aui_length__h4185, wsiS_reqFifo$D_OUT[15:0] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        axiM_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	axiM_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 69'd0;
	axiM_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 69'd0;
	operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (axiM_fifof_c_r$EN)
	  axiM_fifof_c_r <= `BSV_ASSIGNMENT_DELAY axiM_fifof_c_r$D_IN;
	if (axiM_fifof_q_0$EN)
	  axiM_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY axiM_fifof_q_0$D_IN;
	if (axiM_fifof_q_1$EN)
	  axiM_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY axiM_fifof_q_1$D_IN;
	if (operateD$EN) operateD <= `BSV_ASSIGNMENT_DELAY operateD$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axiM_fifof_c_r = 2'h2;
    axiM_fifof_q_0 = 69'h0AAAAAAAAAAAAAAAAA;
    axiM_fifof_q_1 = 69'h0AAAAAAAAAAAAAAAAA;
    operateD = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkWSItoAXIS4B

