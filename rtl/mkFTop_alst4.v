//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Tue Aug  2 11:07:55 EDT 2011
//
//
// Ports:
// Name                         I/O  size props
// pcie_tx                        O     4
// led                            O    16 reg
// p125clk                        O     1 clock
// CLK_GATE_p125clk               O     1 const
// p125rst                        O     1 reset
// sys0_clk                       I     1 clock
// sys0_rstn                      I     1 reset
// pcie_clk                       I     1 clock
// pcie_rstn                      I     1 reset
// pcie_rx_i                      I     4
// usr_sw_i                       I     8 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop_alst4(sys0_clk,
		    sys0_rstn,
		    pcie_clk,
		    pcie_rstn,

		    pcie_rx_i,

		    pcie_tx,

		    usr_sw_i,

		    led,

		    p125clk,
		    CLK_GATE_p125clk,

		    p125rst);
  input  sys0_clk;
  input  sys0_rstn;
  input  pcie_clk;
  input  pcie_rstn;

  // action method pcie_rx
  input  [3 : 0] pcie_rx_i;

  // value method pcie_tx
  output [3 : 0] pcie_tx;

  // action method usr_sw
  input  [7 : 0] usr_sw_i;

  // value method led
  output [15 : 0] led;

  // oscillator and gates for output clock p125clk
  output p125clk;
  output CLK_GATE_p125clk;

  // output resets
  output p125rst;

  // signals for module outputs
  wire [15 : 0] led;
  wire [3 : 0] pcie_tx;
  wire CLK_GATE_p125clk, p125clk, p125rst;

  // inlined wires
  wire [127 : 0] pciw_pci0_rxDws_new_data$wget;
  wire [2 : 0] pciw_pci0_rxDws_delta_deq$wget, pciw_pci0_rxDws_delta_enq$wget;
  wire pciw_pci0_avaTxEmpty$wget,
       pciw_pci0_avaTxEmpty$whas,
       pciw_pci0_avaTxEop$wget,
       pciw_pci0_avaTxEop$whas,
       pciw_pci0_avaTxErr$wget,
       pciw_pci0_avaTxErr$whas,
       pciw_pci0_avaTxSop$wget,
       pciw_pci0_avaTxSop$whas,
       pciw_pci0_avaTxValid$wget,
       pciw_pci0_avaTxValid$whas,
       pciw_pci0_rxDws_delta_deq$whas,
       pciw_pci0_rxDws_delta_enq$whas,
       pciw_pci0_rxDws_new_data$whas,
       pciw_pci0_rxInF_doResetClr$whas,
       pciw_pci0_rxInF_doResetDeq$whas,
       pciw_pci0_rxInF_doResetEnq$whas,
       pciw_pci0_rxInF_r_clr$whas,
       pciw_pci0_rxInF_r_deq$whas,
       pciw_pci0_rxInF_r_enq$whas;

  // register freeCnt
  reg [31 : 0] freeCnt;
  wire [31 : 0] freeCnt$D_IN;
  wire freeCnt$EN;

  // register ledReg
  reg [15 : 0] ledReg;
  wire [15 : 0] ledReg$D_IN;
  wire ledReg$EN;

  // register pciDevice
  reg [15 : 0] pciDevice;
  wire [15 : 0] pciDevice$D_IN;
  wire pciDevice$EN;

  // register pciw_pci0_deviceReg
  reg [15 : 0] pciw_pci0_deviceReg;
  wire [15 : 0] pciw_pci0_deviceReg$D_IN;
  wire pciw_pci0_deviceReg$EN;

  // register pciw_pci0_rxDws_num_empty
  reg [3 : 0] pciw_pci0_rxDws_num_empty;
  wire [3 : 0] pciw_pci0_rxDws_num_empty$D_IN;
  wire pciw_pci0_rxDws_num_empty$EN;

  // register pciw_pci0_rxDws_num_full
  reg [3 : 0] pciw_pci0_rxDws_num_full;
  wire [3 : 0] pciw_pci0_rxDws_num_full$D_IN;
  wire pciw_pci0_rxDws_num_full$EN;

  // register pciw_pci0_rxDws_vec
  reg [255 : 0] pciw_pci0_rxDws_vec;
  wire [255 : 0] pciw_pci0_rxDws_vec$D_IN;
  wire pciw_pci0_rxDws_vec$EN;

  // register pciw_pci0_rxInF_countReg
  reg [1 : 0] pciw_pci0_rxInF_countReg;
  wire [1 : 0] pciw_pci0_rxInF_countReg$D_IN;
  wire pciw_pci0_rxInF_countReg$EN;

  // register pciw_pci0_rxInF_levelsValid
  reg pciw_pci0_rxInF_levelsValid;
  wire pciw_pci0_rxInF_levelsValid$D_IN, pciw_pci0_rxInF_levelsValid$EN;

  // register pciw_pci0_rxInFlight
  reg pciw_pci0_rxInFlight;
  wire pciw_pci0_rxInFlight$D_IN, pciw_pci0_rxInFlight$EN;

  // register pciw_pci0_rxPushAccu
  reg [2 : 0] pciw_pci0_rxPushAccu;
  wire [2 : 0] pciw_pci0_rxPushAccu$D_IN;
  wire pciw_pci0_rxPushAccu$EN;

  // register pciw_pci0_txHeadPushed
  reg pciw_pci0_txHeadPushed;
  wire pciw_pci0_txHeadPushed$D_IN, pciw_pci0_txHeadPushed$EN;

  // register pciw_pci0_txSeqGuard
  reg pciw_pci0_txSeqGuard;
  wire pciw_pci0_txSeqGuard$D_IN, pciw_pci0_txSeqGuard$EN;

  // register pciw_pci0_txSerPos
  reg [1 : 0] pciw_pci0_txSerPos;
  wire [1 : 0] pciw_pci0_txSerPos$D_IN;
  wire pciw_pci0_txSerPos$EN;

  // register pciw_pciDevice
  reg [15 : 0] pciw_pciDevice;
  wire [15 : 0] pciw_pciDevice$D_IN;
  wire pciw_pciDevice$EN;

  // register swReg
  reg [7 : 0] swReg;
  wire [7 : 0] swReg$D_IN;
  wire swReg$EN;

  // ports of submodule ctop
  wire [152 : 0] ctop$server_request_put, ctop$server_response_get;
  wire [127 : 0] ctop$wmemiM0_SData;
  wire [31 : 0] ctop$wci_m_0_SData,
		ctop$wci_m_1_SData,
		ctop$wci_m_2_SData,
		ctop$wci_m_3_SData,
		ctop$wci_m_4_SData,
		ctop$wsi_s_adc_MData;
  wire [11 : 0] ctop$wsi_s_adc_MBurstLength;
  wire [7 : 0] ctop$wsi_s_adc_MReqInfo;
  wire [3 : 0] ctop$wsi_s_adc_MByteEn;
  wire [2 : 0] ctop$switch_x, ctop$wsi_s_adc_MCmd;
  wire [1 : 0] ctop$wci_m_0_SFlag,
	       ctop$wci_m_0_SResp,
	       ctop$wci_m_1_SFlag,
	       ctop$wci_m_1_SResp,
	       ctop$wci_m_2_SFlag,
	       ctop$wci_m_2_SResp,
	       ctop$wci_m_3_SFlag,
	       ctop$wci_m_3_SResp,
	       ctop$wci_m_4_SFlag,
	       ctop$wci_m_4_SResp,
	       ctop$wmemiM0_SResp;
  wire ctop$EN_server_request_put,
       ctop$EN_server_response_get,
       ctop$RDY_server_request_put,
       ctop$RDY_server_response_get,
       ctop$gps_ppsSyncIn_x,
       ctop$wci_m_0_SThreadBusy,
       ctop$wci_m_1_SThreadBusy,
       ctop$wci_m_2_SThreadBusy,
       ctop$wci_m_3_SThreadBusy,
       ctop$wci_m_4_SThreadBusy,
       ctop$wmemiM0_SCmdAccept,
       ctop$wmemiM0_SDataAccept,
       ctop$wmemiM0_SRespLast,
       ctop$wsi_m_dac_SReset_n,
       ctop$wsi_m_dac_SThreadBusy,
       ctop$wsi_s_adc_MBurstPrecise,
       ctop$wsi_s_adc_MReqLast,
       ctop$wsi_s_adc_MReset_n;

  // ports of submodule pciw_aliveLed_sb
  wire pciw_aliveLed_sb$dD_OUT, pciw_aliveLed_sb$sD_IN, pciw_aliveLed_sb$sEN;

  // ports of submodule pciw_i2pF
  wire [152 : 0] pciw_i2pF$D_IN, pciw_i2pF$D_OUT;
  wire pciw_i2pF$CLR,
       pciw_i2pF$DEQ,
       pciw_i2pF$EMPTY_N,
       pciw_i2pF$ENQ,
       pciw_i2pF$FULL_N;

  // ports of submodule pciw_linkLed_sb
  wire pciw_linkLed_sb$dD_OUT, pciw_linkLed_sb$sD_IN, pciw_linkLed_sb$sEN;

  // ports of submodule pciw_p2iF
  wire [152 : 0] pciw_p2iF$D_IN, pciw_p2iF$D_OUT;
  wire pciw_p2iF$CLR,
       pciw_p2iF$DEQ,
       pciw_p2iF$EMPTY_N,
       pciw_p2iF$ENQ,
       pciw_p2iF$FULL_N;

  // ports of submodule pciw_pci0_pcie_ep
  wire [127 : 0] pciw_pci0_pcie_ep$rx_st_data0, pciw_pci0_pcie_ep$tx_st_data0;
  wire [31 : 0] pciw_pci0_pcie_ep$ava_debug, pciw_pci0_pcie_ep$tl_cfg_ctl;
  wire [15 : 0] pciw_pci0_pcie_ep$rx_st_be0;
  wire [7 : 0] pciw_pci0_pcie_ep$rx_st_bardec0;
  wire [3 : 0] pciw_pci0_pcie_ep$pcie_rx_in,
	       pciw_pci0_pcie_ep$pcie_tx_out,
	       pciw_pci0_pcie_ep$tl_cfg_add;
  wire pciw_pci0_pcie_ep$ava_alive,
       pciw_pci0_pcie_ep$ava_core_clk_out,
       pciw_pci0_pcie_ep$ava_lnk_up,
       pciw_pci0_pcie_ep$ava_srstn,
       pciw_pci0_pcie_ep$rx_st_empty0,
       pciw_pci0_pcie_ep$rx_st_eop0,
       pciw_pci0_pcie_ep$rx_st_mask0,
       pciw_pci0_pcie_ep$rx_st_ready0,
       pciw_pci0_pcie_ep$rx_st_sop0,
       pciw_pci0_pcie_ep$rx_st_valid0,
       pciw_pci0_pcie_ep$tx_st_empty0,
       pciw_pci0_pcie_ep$tx_st_eop0,
       pciw_pci0_pcie_ep$tx_st_err0,
       pciw_pci0_pcie_ep$tx_st_ready0,
       pciw_pci0_pcie_ep$tx_st_sop0,
       pciw_pci0_pcie_ep$tx_st_valid0;

  // ports of submodule pciw_pci0_rxEofF
  wire [2 : 0] pciw_pci0_rxEofF$D_IN, pciw_pci0_rxEofF$D_OUT;
  wire pciw_pci0_rxEofF$CLR,
       pciw_pci0_rxEofF$DEQ,
       pciw_pci0_rxEofF$EMPTY_N,
       pciw_pci0_rxEofF$ENQ,
       pciw_pci0_rxEofF$FULL_N;

  // ports of submodule pciw_pci0_rxHeadF
  wire [19 : 0] pciw_pci0_rxHeadF$D_IN, pciw_pci0_rxHeadF$D_OUT;
  wire pciw_pci0_rxHeadF$CLR,
       pciw_pci0_rxHeadF$DEQ,
       pciw_pci0_rxHeadF$EMPTY_N,
       pciw_pci0_rxHeadF$ENQ,
       pciw_pci0_rxHeadF$FULL_N;

  // ports of submodule pciw_pci0_rxInF
  wire [154 : 0] pciw_pci0_rxInF$D_IN, pciw_pci0_rxInF$D_OUT;
  wire pciw_pci0_rxInF$CLR,
       pciw_pci0_rxInF$DEQ,
       pciw_pci0_rxInF$EMPTY_N,
       pciw_pci0_rxInF$ENQ,
       pciw_pci0_rxInF$FULL_N;

  // ports of submodule pciw_pci0_rxOutF
  wire [152 : 0] pciw_pci0_rxOutF$D_IN, pciw_pci0_rxOutF$D_OUT;
  wire pciw_pci0_rxOutF$CLR,
       pciw_pci0_rxOutF$DEQ,
       pciw_pci0_rxOutF$EMPTY_N,
       pciw_pci0_rxOutF$ENQ,
       pciw_pci0_rxOutF$FULL_N;

  // ports of submodule pciw_pci0_txInF
  wire [152 : 0] pciw_pci0_txInF$D_IN, pciw_pci0_txInF$D_OUT;
  wire pciw_pci0_txInF$CLR,
       pciw_pci0_txInF$DEQ,
       pciw_pci0_txInF$EMPTY_N,
       pciw_pci0_txInF$ENQ,
       pciw_pci0_txInF$FULL_N;

  // ports of submodule pciw_pci0_txStageF
  wire [152 : 0] pciw_pci0_txStageF$D_IN, pciw_pci0_txStageF$D_OUT;
  wire pciw_pci0_txStageF$CLR,
       pciw_pci0_txStageF$DEQ,
       pciw_pci0_txStageF$EMPTY_N,
       pciw_pci0_txStageF$ENQ,
       pciw_pci0_txStageF$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_pciw_pci0_rxInF_reset,
       WILL_FIRE_RL_pciw_pci0_rx_destage,
       WILL_FIRE_RL_pciw_pci0_rx_enstage,
       WILL_FIRE_RL_pciw_pci0_tx_destage,
       WILL_FIRE_RL_pciw_pci0_tx_enstage;

  // inputs to muxes for submodule ports
  wire [127 : 0] MUX_pciw_pci0_pcie_ep$ava_tx_data_1__VAL_1,
		 MUX_pciw_pci0_pcie_ep$ava_tx_data_1__VAL_2;
  wire MUX_pciw_pci0_avaTxEop$wset_1__VAL_1,
       MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3,
       MUX_pciw_pci0_txSeqGuard$write_1__SEL_1;

  // remaining internal signals
  reg [15 : 0] CASE_pciw_pci0_rxEofFD_OUT_0xFFFF_0_0x0_1_0xF_ETC__q1;
  wire [255 : 0] _0_CONCAT_pciw_pci0_rxDws_new_data_wget__2_BITS_ETC___d498,
		 pciw_pci0_rxDws_vec_3_SRL_IF_pciw_pci0_rxDws_d_ETC___d499;
  wire [127 : 0] x__h4493, x_data__h16096;
  wire [31 : 0] pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497,
		x__h33742,
		y__h33743,
		y__h33745;
  wire [15 : 0] IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450,
		x_be__h16095;
  wire [8 : 0] x__h5746;
  wire [7 : 0] bar___1__h11080, x__h8847, x_hit__h11070;
  wire [6 : 0] INV_pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCA_ETC___d443;
  wire [2 : 0] IF_pciw_pci0_rxDws_delta_deq_whas__3_THEN_pciw_ETC___d471,
	       IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449,
	       IF_pciw_pci0_rxInF_first__9_BIT_153_0_AND_pciw_ETC___d496,
	       pciw_pci0_rxPushAccu_PLUS_IF_pciw_pci0_rxInF_f_ETC__q2;
  wire swParity__h32230,
       z__h33174,
       z__h33181,
       z__h33188,
       z__h33195,
       z__h33202,
       z__h33209,
       z__h33459,
       z__h33466,
       z__h33473,
       z__h33480,
       z__h33487,
       z__h33494,
       z__h33501,
       z__h33508,
       z__h33515,
       z__h33522,
       z__h33529,
       z__h33536,
       z__h33543,
       z__h33550,
       z__h33557,
       z__h33564,
       z__h33571,
       z__h33578,
       z__h33585,
       z__h33592,
       z__h33599,
       z__h33606,
       z__h33613,
       z__h33620,
       z__h33627,
       z__h33634,
       z__h33641,
       z__h33648,
       z__h33655,
       z__h33662;

  // oscillator and gates for output clock p125clk
  assign p125clk = pciw_pci0_pcie_ep$ava_core_clk_out ;
  assign CLK_GATE_p125clk = 1'b1 ;

  // output resets
  assign p125rst = pciw_pci0_pcie_ep$ava_srstn ;

  // value method pcie_tx
  assign pcie_tx = pciw_pci0_pcie_ep$pcie_tx_out ;

  // value method led
  assign led = ledReg ;

  // submodule ctop
  mkCTop4B ctop(.pciDevice(pciDevice),
		.CLK_sys0_clk(sys0_clk),
		.RST_N_sys0_rst(sys0_rstn),
		.CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
		.RST_N(pciw_pci0_pcie_ep$ava_srstn),
		.gps_ppsSyncIn_x(ctop$gps_ppsSyncIn_x),
		.server_request_put(ctop$server_request_put),
		.switch_x(ctop$switch_x),
		.wci_m_0_SData(ctop$wci_m_0_SData),
		.wci_m_0_SFlag(ctop$wci_m_0_SFlag),
		.wci_m_0_SResp(ctop$wci_m_0_SResp),
		.wci_m_1_SData(ctop$wci_m_1_SData),
		.wci_m_1_SFlag(ctop$wci_m_1_SFlag),
		.wci_m_1_SResp(ctop$wci_m_1_SResp),
		.wci_m_2_SData(ctop$wci_m_2_SData),
		.wci_m_2_SFlag(ctop$wci_m_2_SFlag),
		.wci_m_2_SResp(ctop$wci_m_2_SResp),
		.wci_m_3_SData(ctop$wci_m_3_SData),
		.wci_m_3_SFlag(ctop$wci_m_3_SFlag),
		.wci_m_3_SResp(ctop$wci_m_3_SResp),
		.wci_m_4_SData(ctop$wci_m_4_SData),
		.wci_m_4_SFlag(ctop$wci_m_4_SFlag),
		.wci_m_4_SResp(ctop$wci_m_4_SResp),
		.wmemiM0_SData(ctop$wmemiM0_SData),
		.wmemiM0_SResp(ctop$wmemiM0_SResp),
		.wsi_s_adc_MBurstLength(ctop$wsi_s_adc_MBurstLength),
		.wsi_s_adc_MByteEn(ctop$wsi_s_adc_MByteEn),
		.wsi_s_adc_MCmd(ctop$wsi_s_adc_MCmd),
		.wsi_s_adc_MData(ctop$wsi_s_adc_MData),
		.wsi_s_adc_MReqInfo(ctop$wsi_s_adc_MReqInfo),
		.EN_server_request_put(ctop$EN_server_request_put),
		.EN_server_response_get(ctop$EN_server_response_get),
		.wci_m_0_SThreadBusy(ctop$wci_m_0_SThreadBusy),
		.wci_m_1_SThreadBusy(ctop$wci_m_1_SThreadBusy),
		.wci_m_2_SThreadBusy(ctop$wci_m_2_SThreadBusy),
		.wci_m_3_SThreadBusy(ctop$wci_m_3_SThreadBusy),
		.wci_m_4_SThreadBusy(ctop$wci_m_4_SThreadBusy),
		.wsi_s_adc_MReqLast(ctop$wsi_s_adc_MReqLast),
		.wsi_s_adc_MBurstPrecise(ctop$wsi_s_adc_MBurstPrecise),
		.wsi_s_adc_MReset_n(ctop$wsi_s_adc_MReset_n),
		.wsi_m_dac_SThreadBusy(ctop$wsi_m_dac_SThreadBusy),
		.wsi_m_dac_SReset_n(ctop$wsi_m_dac_SReset_n),
		.wmemiM0_SRespLast(ctop$wmemiM0_SRespLast),
		.wmemiM0_SCmdAccept(ctop$wmemiM0_SCmdAccept),
		.wmemiM0_SDataAccept(ctop$wmemiM0_SDataAccept),
		.RDY_server_request_put(ctop$RDY_server_request_put),
		.server_response_get(ctop$server_response_get),
		.RDY_server_response_get(ctop$RDY_server_response_get),
		.led(),
		.wci_m_0_MCmd(),
		.wci_m_0_MAddrSpace(),
		.wci_m_0_MByteEn(),
		.wci_m_0_MAddr(),
		.wci_m_0_MData(),
		.wci_m_0_MFlag(),
		.wci_m_1_MCmd(),
		.wci_m_1_MAddrSpace(),
		.wci_m_1_MByteEn(),
		.wci_m_1_MAddr(),
		.wci_m_1_MData(),
		.wci_m_1_MFlag(),
		.wci_m_2_MCmd(),
		.wci_m_2_MAddrSpace(),
		.wci_m_2_MByteEn(),
		.wci_m_2_MAddr(),
		.wci_m_2_MData(),
		.wci_m_2_MFlag(),
		.wci_m_3_MCmd(),
		.wci_m_3_MAddrSpace(),
		.wci_m_3_MByteEn(),
		.wci_m_3_MAddr(),
		.wci_m_3_MData(),
		.wci_m_3_MFlag(),
		.wci_m_4_MCmd(),
		.wci_m_4_MAddrSpace(),
		.wci_m_4_MByteEn(),
		.wci_m_4_MAddr(),
		.wci_m_4_MData(),
		.wci_m_4_MFlag(),
		.cpNow(),
		.RDY_cpNow(),
		.wsi_s_adc_SThreadBusy(),
		.wsi_s_adc_SReset_n(),
		.wsi_m_dac_MCmd(),
		.wsi_m_dac_MReqLast(),
		.wsi_m_dac_MBurstPrecise(),
		.wsi_m_dac_MBurstLength(),
		.wsi_m_dac_MData(),
		.wsi_m_dac_MByteEn(),
		.wsi_m_dac_MReqInfo(),
		.wsi_m_dac_MReset_n(),
		.wmemiM0_MCmd(),
		.wmemiM0_MReqLast(),
		.wmemiM0_MAddr(),
		.wmemiM0_MBurstLength(),
		.wmemiM0_MDataValid(),
		.wmemiM0_MDataLast(),
		.wmemiM0_MData(),
		.wmemiM0_MDataByteEn(),
		.wmemiM0_MReset_n(),
		.gps_ppsSyncOut(),
		.RST_N_wci_m_0(),
		.RST_N_wci_m_1(),
		.RST_N_wci_m_2(),
		.RST_N_wci_m_3(),
		.RST_N_wci_m_4());

  // submodule pciw_aliveLed_sb
  SyncBit #(.init(1'd0)) pciw_aliveLed_sb(.sCLK(sys0_clk),
					  .dCLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					  .sRST_N(sys0_rstn),
					  .sD_IN(pciw_aliveLed_sb$sD_IN),
					  .sEN(pciw_aliveLed_sb$sEN),
					  .dD_OUT(pciw_aliveLed_sb$dD_OUT));

  // submodule pciw_i2pF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_i2pF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
				     .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
				     .D_IN(pciw_i2pF$D_IN),
				     .ENQ(pciw_i2pF$ENQ),
				     .DEQ(pciw_i2pF$DEQ),
				     .CLR(pciw_i2pF$CLR),
				     .D_OUT(pciw_i2pF$D_OUT),
				     .FULL_N(pciw_i2pF$FULL_N),
				     .EMPTY_N(pciw_i2pF$EMPTY_N));

  // submodule pciw_linkLed_sb
  SyncBit #(.init(1'd0)) pciw_linkLed_sb(.sCLK(sys0_clk),
					 .dCLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					 .sRST_N(sys0_rstn),
					 .sD_IN(pciw_linkLed_sb$sD_IN),
					 .sEN(pciw_linkLed_sb$sEN),
					 .dD_OUT(pciw_linkLed_sb$dD_OUT));

  // submodule pciw_p2iF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_p2iF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
				     .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
				     .D_IN(pciw_p2iF$D_IN),
				     .ENQ(pciw_p2iF$ENQ),
				     .DEQ(pciw_p2iF$DEQ),
				     .CLR(pciw_p2iF$CLR),
				     .D_OUT(pciw_p2iF$D_OUT),
				     .FULL_N(pciw_p2iF$FULL_N),
				     .EMPTY_N(pciw_p2iF$EMPTY_N));

  // submodule pciw_pci0_pcie_ep
  pcie_hip_s4gx_gen2_x4_128_wrapper pciw_pci0_pcie_ep(.sys0_clk(sys0_clk),
						      .sys0_rstn(sys0_rstn),
						      .pcie_clk(pcie_clk),
						      .pcie_rstn(pcie_rstn),
						      .pcie_rx_in(pciw_pci0_pcie_ep$pcie_rx_in),
						      .rx_st_mask0(pciw_pci0_pcie_ep$rx_st_mask0),
						      .rx_st_ready0(pciw_pci0_pcie_ep$rx_st_ready0),
						      .tx_st_data0(pciw_pci0_pcie_ep$tx_st_data0),
						      .tx_st_empty0(pciw_pci0_pcie_ep$tx_st_empty0),
						      .tx_st_eop0(pciw_pci0_pcie_ep$tx_st_eop0),
						      .tx_st_err0(pciw_pci0_pcie_ep$tx_st_err0),
						      .tx_st_sop0(pciw_pci0_pcie_ep$tx_st_sop0),
						      .tx_st_valid0(pciw_pci0_pcie_ep$tx_st_valid0),
						      .pcie_tx_out(pciw_pci0_pcie_ep$pcie_tx_out),
						      .ava_alive(pciw_pci0_pcie_ep$ava_alive),
						      .ava_lnk_up(pciw_pci0_pcie_ep$ava_lnk_up),
						      .ava_debug(pciw_pci0_pcie_ep$ava_debug),
						      .tl_cfg_add(pciw_pci0_pcie_ep$tl_cfg_add),
						      .tl_cfg_ctl(pciw_pci0_pcie_ep$tl_cfg_ctl),
						      .tl_cfg_ctl_wr(),
						      .tl_cfg_sts(),
						      .tl_cfg_sts_wr(),
						      .rx_st_valid0(pciw_pci0_pcie_ep$rx_st_valid0),
						      .rx_st_bardec0(pciw_pci0_pcie_ep$rx_st_bardec0),
						      .rx_st_be0(pciw_pci0_pcie_ep$rx_st_be0),
						      .rx_st_data0(pciw_pci0_pcie_ep$rx_st_data0),
						      .rx_st_sop0(pciw_pci0_pcie_ep$rx_st_sop0),
						      .rx_st_eop0(pciw_pci0_pcie_ep$rx_st_eop0),
						      .rx_st_empty0(pciw_pci0_pcie_ep$rx_st_empty0),
						      .rx_st_err0(),
						      .tx_st_ready0(pciw_pci0_pcie_ep$tx_st_ready0),
						      .tx_cred0(),
						      .tx_fifo_empty0(),
						      .ava_core_clk_out(pciw_pci0_pcie_ep$ava_core_clk_out),
						      .ava_srstn(pciw_pci0_pcie_ep$ava_srstn));

  // submodule pciw_pci0_rxEofF
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) pciw_pci0_rxEofF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
					    .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					    .D_IN(pciw_pci0_rxEofF$D_IN),
					    .ENQ(pciw_pci0_rxEofF$ENQ),
					    .DEQ(pciw_pci0_rxEofF$DEQ),
					    .CLR(pciw_pci0_rxEofF$CLR),
					    .D_OUT(pciw_pci0_rxEofF$D_OUT),
					    .FULL_N(pciw_pci0_rxEofF$FULL_N),
					    .EMPTY_N(pciw_pci0_rxEofF$EMPTY_N));

  // submodule pciw_pci0_rxHeadF
  FIFO2 #(.width(32'd20),
	  .guarded(32'd1)) pciw_pci0_rxHeadF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
					     .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					     .D_IN(pciw_pci0_rxHeadF$D_IN),
					     .ENQ(pciw_pci0_rxHeadF$ENQ),
					     .DEQ(pciw_pci0_rxHeadF$DEQ),
					     .CLR(pciw_pci0_rxHeadF$CLR),
					     .D_OUT(pciw_pci0_rxHeadF$D_OUT),
					     .FULL_N(pciw_pci0_rxHeadF$FULL_N),
					     .EMPTY_N(pciw_pci0_rxHeadF$EMPTY_N));

  // submodule pciw_pci0_rxInF
  SizedFIFO #(.p1width(32'd155),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pciw_pci0_rxInF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
					       .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					       .D_IN(pciw_pci0_rxInF$D_IN),
					       .ENQ(pciw_pci0_rxInF$ENQ),
					       .DEQ(pciw_pci0_rxInF$DEQ),
					       .CLR(pciw_pci0_rxInF$CLR),
					       .D_OUT(pciw_pci0_rxInF$D_OUT),
					       .FULL_N(pciw_pci0_rxInF$FULL_N),
					       .EMPTY_N(pciw_pci0_rxInF$EMPTY_N));

  // submodule pciw_pci0_rxOutF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_pci0_rxOutF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
					    .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					    .D_IN(pciw_pci0_rxOutF$D_IN),
					    .ENQ(pciw_pci0_rxOutF$ENQ),
					    .DEQ(pciw_pci0_rxOutF$DEQ),
					    .CLR(pciw_pci0_rxOutF$CLR),
					    .D_OUT(pciw_pci0_rxOutF$D_OUT),
					    .FULL_N(pciw_pci0_rxOutF$FULL_N),
					    .EMPTY_N(pciw_pci0_rxOutF$EMPTY_N));

  // submodule pciw_pci0_txInF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_pci0_txInF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
					   .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					   .D_IN(pciw_pci0_txInF$D_IN),
					   .ENQ(pciw_pci0_txInF$ENQ),
					   .DEQ(pciw_pci0_txInF$DEQ),
					   .CLR(pciw_pci0_txInF$CLR),
					   .D_OUT(pciw_pci0_txInF$D_OUT),
					   .FULL_N(pciw_pci0_txInF$FULL_N),
					   .EMPTY_N(pciw_pci0_txInF$EMPTY_N));

  // submodule pciw_pci0_txStageF
  FIFO1 #(.width(32'd153),
	  .guarded(32'd1)) pciw_pci0_txStageF(.RST_N(pciw_pci0_pcie_ep$ava_srstn),
					      .CLK(pciw_pci0_pcie_ep$ava_core_clk_out),
					      .D_IN(pciw_pci0_txStageF$D_IN),
					      .ENQ(pciw_pci0_txStageF$ENQ),
					      .DEQ(pciw_pci0_txStageF$DEQ),
					      .CLR(pciw_pci0_txStageF$CLR),
					      .D_OUT(pciw_pci0_txStageF$D_OUT),
					      .FULL_N(pciw_pci0_txStageF$FULL_N),
					      .EMPTY_N(pciw_pci0_txStageF$EMPTY_N));

  // rule RL_pciw_pci0_rx_destage
  assign WILL_FIRE_RL_pciw_pci0_rx_destage =
	     pciw_pci0_rxDws_num_full != 4'd0 && pciw_pci0_rxOutF$FULL_N &&
	     pciw_pci0_rxHeadF$EMPTY_N &&
	     (pciw_pci0_rxDws_num_full >= 4'd4 || pciw_pci0_rxEofF$EMPTY_N) ;

  // rule RL_pciw_pci0_rx_enstage
  assign WILL_FIRE_RL_pciw_pci0_rx_enstage =
	     pciw_pci0_rxInF$EMPTY_N &&
	     (!pciw_pci0_rxInF$D_OUT[153] || pciw_pci0_rxHeadF$FULL_N) &&
	     (!pciw_pci0_rxInF$D_OUT[152] || pciw_pci0_rxEofF$FULL_N) &&
	     pciw_pci0_rxDws_num_empty >= 4'd4 ;

  // rule RL_pciw_pci0_tx_enstage
  assign WILL_FIRE_RL_pciw_pci0_tx_enstage =
	     pciw_pci0_txInF$EMPTY_N &&
	     (!pciw_pci0_txInF$D_OUT[152] || pciw_pci0_txInF$D_OUT[34] ||
	      pciw_pci0_txStageF$FULL_N) &&
	     pciw_pci0_pcie_ep$tx_st_ready0 &&
	     !pciw_pci0_txStageF$EMPTY_N &&
	     !pciw_pci0_txSeqGuard ;

  // rule RL_pciw_pci0_tx_destage
  assign WILL_FIRE_RL_pciw_pci0_tx_destage =
	     pciw_pci0_txInF$EMPTY_N && pciw_pci0_txStageF$EMPTY_N &&
	     pciw_pci0_pcie_ep$tx_st_ready0 &&
	     pciw_pci0_txSeqGuard ;

  // rule RL_pciw_pci0_rxInF_reset
  assign WILL_FIRE_RL_pciw_pci0_rxInF_reset =
	     MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_pciw_pci0_rx_enstage ;

  // inputs to muxes for submodule ports
  assign MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3 =
	     pciw_pci0_rxInF$FULL_N && pciw_pci0_pcie_ep$rx_st_valid0 ;
  assign MUX_pciw_pci0_txSeqGuard$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage &&
	     pciw_pci0_txInF$D_OUT[152] &&
	     !pciw_pci0_txInF$D_OUT[34] ;
  assign MUX_pciw_pci0_avaTxEop$wset_1__VAL_1 =
	     pciw_pci0_txInF$D_OUT[151] &&
	     (!pciw_pci0_txInF$D_OUT[152] || pciw_pci0_txInF$D_OUT[34]) ;
  assign MUX_pciw_pci0_pcie_ep$ava_tx_data_1__VAL_1 =
	     { (!pciw_pci0_txInF$D_OUT[152] || pciw_pci0_txInF$D_OUT[34]) ?
		 { pciw_pci0_txInF$D_OUT[7:0],
		   pciw_pci0_txInF$D_OUT[15:8],
		   pciw_pci0_txInF$D_OUT[23:16],
		   pciw_pci0_txInF$D_OUT[31:24] } :
		 pciw_pci0_txInF$D_OUT[31:0],
	       pciw_pci0_txInF$D_OUT[63:32],
	       pciw_pci0_txInF$D_OUT[95:64],
	       pciw_pci0_txInF$D_OUT[127:96] } ;
  assign MUX_pciw_pci0_pcie_ep$ava_tx_data_1__VAL_2 =
	     { pciw_pci0_txInF$D_OUT[103:96],
	       pciw_pci0_txInF$D_OUT[111:104],
	       pciw_pci0_txInF$D_OUT[119:112],
	       pciw_pci0_txInF$D_OUT[127:120],
	       pciw_pci0_txInF$D_OUT[71:64],
	       pciw_pci0_txInF$D_OUT[79:72],
	       pciw_pci0_txInF$D_OUT[87:80],
	       pciw_pci0_txInF$D_OUT[95:88],
	       pciw_pci0_txInF$D_OUT[39:32],
	       pciw_pci0_txInF$D_OUT[47:40],
	       pciw_pci0_txInF$D_OUT[55:48],
	       pciw_pci0_txInF$D_OUT[63:56],
	       pciw_pci0_txStageF$D_OUT[7:0],
	       pciw_pci0_txStageF$D_OUT[15:8],
	       pciw_pci0_txStageF$D_OUT[23:16],
	       pciw_pci0_txStageF$D_OUT[31:24] } ;

  // inlined wires
  assign pciw_pci0_avaTxSop$wget =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage && pciw_pci0_txInF$D_OUT[152] ;
  assign pciw_pci0_avaTxSop$whas =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage ||
	     WILL_FIRE_RL_pciw_pci0_tx_destage ;
  assign pciw_pci0_avaTxEop$wget =
	     !WILL_FIRE_RL_pciw_pci0_tx_enstage ||
	     MUX_pciw_pci0_avaTxEop$wset_1__VAL_1 ;
  assign pciw_pci0_avaTxEop$whas = pciw_pci0_avaTxSop$whas ;
  assign pciw_pci0_avaTxEmpty$wget = !WILL_FIRE_RL_pciw_pci0_tx_enstage ;
  assign pciw_pci0_avaTxEmpty$whas = pciw_pci0_avaTxSop$whas ;
  assign pciw_pci0_avaTxValid$wget = 1'd1 ;
  assign pciw_pci0_avaTxValid$whas =
	     WILL_FIRE_RL_pciw_pci0_tx_destage ||
	     WILL_FIRE_RL_pciw_pci0_tx_enstage ;
  assign pciw_pci0_avaTxErr$wget = 1'b0 ;
  assign pciw_pci0_avaTxErr$whas = 1'b0 ;
  assign pciw_pci0_rxDws_delta_enq$wget =
	     IF_pciw_pci0_rxInF_first__9_BIT_153_0_AND_pciw_ETC___d496 ;
  assign pciw_pci0_rxDws_delta_enq$whas = WILL_FIRE_RL_pciw_pci0_rx_enstage ;
  assign pciw_pci0_rxDws_delta_deq$wget =
	     pciw_pci0_rxEofF$EMPTY_N ? pciw_pci0_rxEofF$D_OUT : 3'd4 ;
  assign pciw_pci0_rxDws_delta_deq$whas = WILL_FIRE_RL_pciw_pci0_rx_destage ;
  assign pciw_pci0_rxDws_new_data$wget =
	     pciw_pci0_rxInF$D_OUT[153] ?
	       { pciw_pci0_rxInF$D_OUT[29] ?
		   { pciw_pci0_rxInF$D_OUT[103:96],
		     pciw_pci0_rxInF$D_OUT[111:104],
		     pciw_pci0_rxInF$D_OUT[119:112],
		     pciw_pci0_rxInF$D_OUT[127:120] } :
		   pciw_pci0_rxInF$D_OUT[127:96],
		 pciw_pci0_rxInF$D_OUT[71:64],
		 pciw_pci0_rxInF$D_OUT[79:72],
		 pciw_pci0_rxInF$D_OUT[87:80],
		 pciw_pci0_rxInF$D_OUT[95:88],
		 pciw_pci0_rxInF$D_OUT[39:32],
		 pciw_pci0_rxInF$D_OUT[47:40],
		 pciw_pci0_rxInF$D_OUT[55:48],
		 pciw_pci0_rxInF$D_OUT[63:56],
		 pciw_pci0_rxInF$D_OUT[7:0],
		 pciw_pci0_rxInF$D_OUT[15:8],
		 pciw_pci0_rxInF$D_OUT[23:16],
		 pciw_pci0_rxInF$D_OUT[31:24] } :
	       pciw_pci0_rxInF$D_OUT[127:0] ;
  assign pciw_pci0_rxDws_new_data$whas = WILL_FIRE_RL_pciw_pci0_rx_enstage ;
  assign pciw_pci0_rxInF_r_enq$whas =
	     MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3 ;
  assign pciw_pci0_rxInF_r_deq$whas = WILL_FIRE_RL_pciw_pci0_rx_enstage ;
  assign pciw_pci0_rxInF_r_clr$whas = 1'b0 ;
  assign pciw_pci0_rxInF_doResetEnq$whas =
	     MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3 ;
  assign pciw_pci0_rxInF_doResetDeq$whas = WILL_FIRE_RL_pciw_pci0_rx_enstage ;
  assign pciw_pci0_rxInF_doResetClr$whas = 1'b0 ;

  // register freeCnt
  assign freeCnt$D_IN = freeCnt + 32'd1 ;
  assign freeCnt$EN = 1'd1 ;

  // register ledReg
  assign ledReg$D_IN =
	     { 8'd189,
	       ~swParity__h32230,
	       INV_pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCA_ETC___d443 } ;
  assign ledReg$EN = 1'd1 ;

  // register pciDevice
  assign pciDevice$D_IN = pciw_pciDevice ;
  assign pciDevice$EN = 1'd1 ;

  // register pciw_pci0_deviceReg
  assign pciw_pci0_deviceReg$D_IN =
	     { pciw_pci0_pcie_ep$tl_cfg_ctl[12:0], 3'd0 } ;
  assign pciw_pci0_deviceReg$EN = pciw_pci0_pcie_ep$tl_cfg_add == 4'hF ;

  // register pciw_pci0_rxDws_num_empty
  assign pciw_pci0_rxDws_num_empty$D_IN =
	     pciw_pci0_rxDws_num_empty +
	     { 1'd0,
	       IF_pciw_pci0_rxDws_delta_deq_whas__3_THEN_pciw_ETC___d471 } -
	     { 1'd0,
	       IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449 } ;
  assign pciw_pci0_rxDws_num_empty$EN = 1'd1 ;

  // register pciw_pci0_rxDws_num_full
  assign pciw_pci0_rxDws_num_full$D_IN =
	     pciw_pci0_rxDws_num_full +
	     { 1'd0,
	       IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449 } -
	     { 1'd0,
	       IF_pciw_pci0_rxDws_delta_deq_whas__3_THEN_pciw_ETC___d471 } ;
  assign pciw_pci0_rxDws_num_full$EN = 1'd1 ;

  // register pciw_pci0_rxDws_vec
  assign pciw_pci0_rxDws_vec$D_IN =
	     { (WILL_FIRE_RL_pciw_pci0_rx_enstage ?
		  _0_CONCAT_pciw_pci0_rxDws_new_data_wget__2_BITS_ETC___d498[255:32] :
		  224'd0) |
	       pciw_pci0_rxDws_vec_3_SRL_IF_pciw_pci0_rxDws_d_ETC___d499[255:32],
	       (WILL_FIRE_RL_pciw_pci0_rx_enstage ?
		  _0_CONCAT_pciw_pci0_rxDws_new_data_wget__2_BITS_ETC___d498[31:0] :
		  32'd0) |
	       pciw_pci0_rxDws_vec_3_SRL_IF_pciw_pci0_rxDws_d_ETC___d499[31:0] } ;
  assign pciw_pci0_rxDws_vec$EN = 1'd1 ;

  // register pciw_pci0_rxInF_countReg
  assign pciw_pci0_rxInF_countReg$D_IN =
	     MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3 ?
	       pciw_pci0_rxInF_countReg + 2'd1 :
	       pciw_pci0_rxInF_countReg - 2'd1 ;
  assign pciw_pci0_rxInF_countReg$EN =
	     MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_pciw_pci0_rx_enstage ;

  // register pciw_pci0_rxInF_levelsValid
  assign pciw_pci0_rxInF_levelsValid$D_IN =
	     WILL_FIRE_RL_pciw_pci0_rxInF_reset ;
  assign pciw_pci0_rxInF_levelsValid$EN =
	     WILL_FIRE_RL_pciw_pci0_rx_enstage ||
	     pciw_pci0_rxInF$FULL_N && pciw_pci0_pcie_ep$rx_st_valid0 ||
	     WILL_FIRE_RL_pciw_pci0_rxInF_reset ;

  // register pciw_pci0_rxInFlight
  assign pciw_pci0_rxInFlight$D_IN = !pciw_pci0_rxEofF$EMPTY_N ;
  assign pciw_pci0_rxInFlight$EN = WILL_FIRE_RL_pciw_pci0_rx_destage ;

  // register pciw_pci0_rxPushAccu
  assign pciw_pci0_rxPushAccu$D_IN =
	     pciw_pci0_rxPushAccu +
	     IF_pciw_pci0_rxInF_first__9_BIT_153_0_AND_pciw_ETC___d496 ;
  assign pciw_pci0_rxPushAccu$EN = WILL_FIRE_RL_pciw_pci0_rx_enstage ;

  // register pciw_pci0_txHeadPushed
  assign pciw_pci0_txHeadPushed$D_IN = 1'd0 ;
  assign pciw_pci0_txHeadPushed$EN =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage &&
	     pciw_pci0_txInF$D_OUT[151] &&
	     (!pciw_pci0_txInF$D_OUT[152] || pciw_pci0_txInF$D_OUT[34]) ||
	     WILL_FIRE_RL_pciw_pci0_tx_destage && pciw_pci0_txInF$D_OUT[151] ;

  // register pciw_pci0_txSeqGuard
  assign pciw_pci0_txSeqGuard$D_IN = MUX_pciw_pci0_txSeqGuard$write_1__SEL_1 ;
  assign pciw_pci0_txSeqGuard$EN =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage &&
	     pciw_pci0_txInF$D_OUT[152] &&
	     !pciw_pci0_txInF$D_OUT[34] ||
	     WILL_FIRE_RL_pciw_pci0_tx_destage ;

  // register pciw_pci0_txSerPos
  assign pciw_pci0_txSerPos$D_IN = 2'd0 ;
  assign pciw_pci0_txSerPos$EN =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage &&
	     pciw_pci0_txInF$D_OUT[151] &&
	     (!pciw_pci0_txInF$D_OUT[152] || pciw_pci0_txInF$D_OUT[34]) ||
	     WILL_FIRE_RL_pciw_pci0_tx_destage && pciw_pci0_txInF$D_OUT[151] ;

  // register pciw_pciDevice
  assign pciw_pciDevice$D_IN = pciw_pci0_deviceReg ;
  assign pciw_pciDevice$EN = 1'd1 ;

  // register swReg
  assign swReg$D_IN = usr_sw_i ;
  assign swReg$EN = 1'd1 ;

  // submodule ctop
  assign ctop$gps_ppsSyncIn_x = 1'b0 ;
  assign ctop$server_request_put = pciw_p2iF$D_OUT ;
  assign ctop$switch_x = 3'h0 ;
  assign ctop$wci_m_0_SData = 32'h0 ;
  assign ctop$wci_m_0_SFlag = 2'h0 ;
  assign ctop$wci_m_0_SResp = 2'h0 ;
  assign ctop$wci_m_1_SData = 32'h0 ;
  assign ctop$wci_m_1_SFlag = 2'h0 ;
  assign ctop$wci_m_1_SResp = 2'h0 ;
  assign ctop$wci_m_2_SData = 32'h0 ;
  assign ctop$wci_m_2_SFlag = 2'h0 ;
  assign ctop$wci_m_2_SResp = 2'h0 ;
  assign ctop$wci_m_3_SData = 32'h0 ;
  assign ctop$wci_m_3_SFlag = 2'h0 ;
  assign ctop$wci_m_3_SResp = 2'h0 ;
  assign ctop$wci_m_4_SData = 32'h0 ;
  assign ctop$wci_m_4_SFlag = 2'h0 ;
  assign ctop$wci_m_4_SResp = 2'h0 ;
  assign ctop$wmemiM0_SData = 128'h0 ;
  assign ctop$wmemiM0_SResp = 2'h0 ;
  assign ctop$wsi_s_adc_MBurstLength = 12'h0 ;
  assign ctop$wsi_s_adc_MByteEn = 4'h0 ;
  assign ctop$wsi_s_adc_MCmd = 3'h0 ;
  assign ctop$wsi_s_adc_MData = 32'h0 ;
  assign ctop$wsi_s_adc_MReqInfo = 8'h0 ;
  assign ctop$EN_server_request_put =
	     ctop$RDY_server_request_put && pciw_p2iF$EMPTY_N ;
  assign ctop$EN_server_response_get =
	     ctop$RDY_server_response_get && pciw_i2pF$FULL_N ;
  assign ctop$wci_m_0_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_1_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_2_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_3_SThreadBusy = 1'b0 ;
  assign ctop$wci_m_4_SThreadBusy = 1'b0 ;
  assign ctop$wsi_s_adc_MReqLast = 1'b0 ;
  assign ctop$wsi_s_adc_MBurstPrecise = 1'b0 ;
  assign ctop$wsi_s_adc_MReset_n = 1'b0 ;
  assign ctop$wsi_m_dac_SThreadBusy = 1'b0 ;
  assign ctop$wsi_m_dac_SReset_n = 1'b0 ;
  assign ctop$wmemiM0_SRespLast = 1'b0 ;
  assign ctop$wmemiM0_SCmdAccept = 1'b0 ;
  assign ctop$wmemiM0_SDataAccept = 1'b0 ;

  // submodule pciw_aliveLed_sb
  assign pciw_aliveLed_sb$sD_IN = pciw_pci0_pcie_ep$ava_alive ;
  assign pciw_aliveLed_sb$sEN = 1'd1 ;

  // submodule pciw_i2pF
  assign pciw_i2pF$D_IN = ctop$server_response_get ;
  assign pciw_i2pF$ENQ = ctop$RDY_server_response_get && pciw_i2pF$FULL_N ;
  assign pciw_i2pF$DEQ = pciw_i2pF$EMPTY_N && pciw_pci0_txInF$FULL_N ;
  assign pciw_i2pF$CLR = 1'b0 ;

  // submodule pciw_linkLed_sb
  assign pciw_linkLed_sb$sD_IN = pciw_pci0_pcie_ep$ava_lnk_up ;
  assign pciw_linkLed_sb$sEN = 1'd1 ;

  // submodule pciw_p2iF
  assign pciw_p2iF$D_IN = pciw_pci0_rxOutF$D_OUT ;
  assign pciw_p2iF$ENQ = pciw_pci0_rxOutF$EMPTY_N && pciw_p2iF$FULL_N ;
  assign pciw_p2iF$DEQ = ctop$RDY_server_request_put && pciw_p2iF$EMPTY_N ;
  assign pciw_p2iF$CLR = 1'b0 ;

  // submodule pciw_pci0_pcie_ep
  assign pciw_pci0_pcie_ep$pcie_rx_in = pcie_rx_i ;
  assign pciw_pci0_pcie_ep$rx_st_mask0 = 1'd0 ;
  assign pciw_pci0_pcie_ep$rx_st_ready0 = pciw_pci0_rxInF_countReg < 2'd2 ;
  assign pciw_pci0_pcie_ep$tx_st_data0 =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage ?
	       MUX_pciw_pci0_pcie_ep$ava_tx_data_1__VAL_1 :
	       MUX_pciw_pci0_pcie_ep$ava_tx_data_1__VAL_2 ;
  assign pciw_pci0_pcie_ep$tx_st_empty0 =
	     pciw_pci0_avaTxSop$whas && !WILL_FIRE_RL_pciw_pci0_tx_enstage ;
  assign pciw_pci0_pcie_ep$tx_st_eop0 =
	     pciw_pci0_avaTxSop$whas && pciw_pci0_avaTxEop$wget ;
  assign pciw_pci0_pcie_ep$tx_st_err0 = 1'b0 ;
  assign pciw_pci0_pcie_ep$tx_st_sop0 =
	     pciw_pci0_avaTxSop$whas && pciw_pci0_avaTxSop$wget ;
  assign pciw_pci0_pcie_ep$tx_st_valid0 = pciw_pci0_avaTxValid$whas ;

  // submodule pciw_pci0_rxEofF
  assign pciw_pci0_rxEofF$D_IN =
	     { 1'd0,
	       pciw_pci0_rxPushAccu_PLUS_IF_pciw_pci0_rxInF_f_ETC__q2[1:0] } ;
  assign pciw_pci0_rxEofF$ENQ =
	     WILL_FIRE_RL_pciw_pci0_rx_enstage && pciw_pci0_rxInF$D_OUT[152] ;
  assign pciw_pci0_rxEofF$DEQ =
	     WILL_FIRE_RL_pciw_pci0_rx_destage && pciw_pci0_rxEofF$EMPTY_N ;
  assign pciw_pci0_rxEofF$CLR = 1'b0 ;

  // submodule pciw_pci0_rxHeadF
  assign pciw_pci0_rxHeadF$D_IN =
	     { pciw_pci0_rxInF$D_OUT[151:144],
	       pciw_pci0_rxInF$D_OUT[9:0],
	       pciw_pci0_rxInF$D_OUT[30:29] } ;
  assign pciw_pci0_rxHeadF$ENQ =
	     WILL_FIRE_RL_pciw_pci0_rx_enstage && pciw_pci0_rxInF$D_OUT[153] ;
  assign pciw_pci0_rxHeadF$DEQ =
	     WILL_FIRE_RL_pciw_pci0_rx_destage && pciw_pci0_rxEofF$EMPTY_N ;
  assign pciw_pci0_rxHeadF$CLR = 1'b0 ;

  // submodule pciw_pci0_rxInF
  assign pciw_pci0_rxInF$D_IN =
	     { pciw_pci0_pcie_ep$rx_st_empty0,
	       pciw_pci0_pcie_ep$rx_st_sop0,
	       pciw_pci0_pcie_ep$rx_st_eop0,
	       x_hit__h11070,
	       pciw_pci0_pcie_ep$rx_st_be0,
	       pciw_pci0_pcie_ep$rx_st_data0 } ;
  assign pciw_pci0_rxInF$ENQ =
	     MUX_pciw_pci0_rxInF_levelsValid$write_1__SEL_3 ;
  assign pciw_pci0_rxInF$DEQ = WILL_FIRE_RL_pciw_pci0_rx_enstage ;
  assign pciw_pci0_rxInF$CLR = 1'b0 ;

  // submodule pciw_pci0_rxOutF
  assign pciw_pci0_rxOutF$D_IN =
	     { !pciw_pci0_rxInFlight,
	       pciw_pci0_rxEofF$EMPTY_N,
	       pciw_pci0_rxHeadF$D_OUT[18:12],
	       x_be__h16095,
	       x_data__h16096 } ;
  assign pciw_pci0_rxOutF$ENQ = WILL_FIRE_RL_pciw_pci0_rx_destage ;
  assign pciw_pci0_rxOutF$DEQ = pciw_pci0_rxOutF$EMPTY_N && pciw_p2iF$FULL_N ;
  assign pciw_pci0_rxOutF$CLR = 1'b0 ;

  // submodule pciw_pci0_txInF
  assign pciw_pci0_txInF$D_IN = pciw_i2pF$D_OUT ;
  assign pciw_pci0_txInF$ENQ = pciw_i2pF$EMPTY_N && pciw_pci0_txInF$FULL_N ;
  assign pciw_pci0_txInF$DEQ =
	     WILL_FIRE_RL_pciw_pci0_tx_enstage &&
	     (!pciw_pci0_txInF$D_OUT[152] || pciw_pci0_txInF$D_OUT[34]) ||
	     WILL_FIRE_RL_pciw_pci0_tx_destage ;
  assign pciw_pci0_txInF$CLR = 1'b0 ;

  // submodule pciw_pci0_txStageF
  assign pciw_pci0_txStageF$D_IN = pciw_pci0_txInF$D_OUT ;
  assign pciw_pci0_txStageF$ENQ = MUX_pciw_pci0_txSeqGuard$write_1__SEL_1 ;
  assign pciw_pci0_txStageF$DEQ = WILL_FIRE_RL_pciw_pci0_tx_destage ;
  assign pciw_pci0_txStageF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_pciw_pci0_rxDws_delta_deq_whas__3_THEN_pciw_ETC___d471 =
	     WILL_FIRE_RL_pciw_pci0_rx_destage ?
	       pciw_pci0_rxDws_delta_deq$wget :
	       3'd0 ;
  assign IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449 =
	     WILL_FIRE_RL_pciw_pci0_rx_enstage ?
	       IF_pciw_pci0_rxInF_first__9_BIT_153_0_AND_pciw_ETC___d496 :
	       3'd0 ;
  assign IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450 =
	     pciw_pci0_rxEofF$EMPTY_N ?
	       CASE_pciw_pci0_rxEofFD_OUT_0xFFFF_0_0x0_1_0xF_ETC__q1 :
	       16'd65535 ;
  assign IF_pciw_pci0_rxInF_first__9_BIT_153_0_AND_pciw_ETC___d496 =
	     (pciw_pci0_rxInF$D_OUT[153] &&
	      pciw_pci0_rxInF$D_OUT[30:29] == 2'd0) ?
	       3'd3 :
	       ((pciw_pci0_rxInF$D_OUT[153] &&
		 (pciw_pci0_rxInF$D_OUT[30:29] == 2'd1 ||
		  pciw_pci0_rxInF$D_OUT[30:29] == 2'd2 &&
		  (pciw_pci0_rxInF$D_OUT[66] ||
		   !pciw_pci0_rxInF$D_OUT[30]))) ?
		  3'd4 :
		  ((pciw_pci0_rxInF$D_OUT[153] &&
		    pciw_pci0_rxInF$D_OUT[30:29] == 2'd2 &&
		    !pciw_pci0_rxInF$D_OUT[66] &&
		    pciw_pci0_rxInF$D_OUT[30]) ?
		     3'd3 :
		     ((!pciw_pci0_rxInF$D_OUT[153] &&
		       !pciw_pci0_rxInF$D_OUT[152]) ?
			3'd4 :
			((pciw_pci0_rxInF$D_OUT[152] &&
			  pciw_pci0_rxInF$D_OUT[154]) ?
			   3'd2 :
			   ((pciw_pci0_rxInF$D_OUT[152] &&
			     !pciw_pci0_rxInF$D_OUT[154]) ?
			      3'd4 :
			      3'd0))))) ;
  assign INV_pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCA_ETC___d443 =
	     { ~(z__h33662 ^
		 pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[31]),
	       ~pciw_aliveLed_sb$dD_OUT,
	       ~pciw_linkLed_sb$dD_OUT,
	       ~freeCnt[29:26] } ;
  assign _0_CONCAT_pciw_pci0_rxDws_new_data_wget__2_BITS_ETC___d498 =
	     { 128'd0, x__h4493 } << x__h5746 ;
  assign bar___1__h11080 =
	     (pciw_pci0_pcie_ep$rx_st_data0[28:24] == 5'd0) ?
	       pciw_pci0_pcie_ep$rx_st_bardec0 :
	       8'd0 ;
  assign pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497 =
	     x__h33742 | y__h33743 ;
  assign pciw_pci0_rxDws_vec_3_SRL_IF_pciw_pci0_rxDws_d_ETC___d499 =
	     pciw_pci0_rxDws_vec >> x__h8847 ;
  assign pciw_pci0_rxPushAccu_PLUS_IF_pciw_pci0_rxInF_f_ETC__q2 =
	     pciw_pci0_rxPushAccu +
	     IF_pciw_pci0_rxInF_first__9_BIT_153_0_AND_pciw_ETC___d496 ;
  assign swParity__h32230 = z__h33209 ^ swReg[7] ;
  assign x__h33742 = pciw_pci0_pcie_ep$ava_debug | y__h33745 ;
  assign x__h4493 =
	     { pciw_pci0_rxDws_new_data$wget[127:32] &
	       { (IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449 <=
		  3'd3) ?
		   32'd0 :
		   32'hFFFFFFFF,
		 (IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449 <=
		  3'd2) ?
		   32'd0 :
		   32'hFFFFFFFF,
		 (IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449 <=
		  3'd1) ?
		   32'd0 :
		   32'hFFFFFFFF },
	       pciw_pci0_rxDws_new_data$wget[31:0] &
	       ((IF_pciw_pci0_rxDws_delta_enq_whas__8_THEN_pciw_ETC___d449 ==
		 3'd0) ?
		  32'd0 :
		  32'hFFFFFFFF) } ;
  assign x__h5746 =
	     { pciw_pci0_rxDws_num_full -
	       { 1'd0,
		 IF_pciw_pci0_rxDws_delta_deq_whas__3_THEN_pciw_ETC___d471 },
	       5'd0 } ;
  assign x__h8847 =
	     { IF_pciw_pci0_rxDws_delta_deq_whas__3_THEN_pciw_ETC___d471,
	       5'd0 } ;
  assign x_be__h16095 =
	     { IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[0],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[1],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[2],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[3],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[4],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[5],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[6],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[7],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[8],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[9],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[10],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[11],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[12],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[13],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[14],
	       IF_pciw_pci0_rxEofF_notEmpty__71_THEN_IF_pciw__ETC___d450[15] } ;
  assign x_data__h16096 =
	     { pciw_pci0_rxDws_vec[7:0],
	       pciw_pci0_rxDws_vec[15:8],
	       pciw_pci0_rxDws_vec[23:16],
	       pciw_pci0_rxDws_vec[31:24],
	       pciw_pci0_rxDws_vec[39:32],
	       pciw_pci0_rxDws_vec[47:40],
	       pciw_pci0_rxDws_vec[55:48],
	       pciw_pci0_rxDws_vec[63:56],
	       pciw_pci0_rxDws_vec[71:64],
	       pciw_pci0_rxDws_vec[79:72],
	       pciw_pci0_rxDws_vec[87:80],
	       pciw_pci0_rxDws_vec[95:88],
	       pciw_pci0_rxDws_vec[103:96],
	       pciw_pci0_rxDws_vec[111:104],
	       pciw_pci0_rxDws_vec[119:112],
	       pciw_pci0_rxDws_vec[127:120] } ;
  assign x_hit__h11070 =
	     pciw_pci0_pcie_ep$rx_st_sop0 ? bar___1__h11080 : 8'd0 ;
  assign y__h33743 = { 31'd0, pciw_pci0_rxInFlight } ;
  assign y__h33745 = { 29'd0, pciw_pci0_rxPushAccu } ;
  assign z__h33174 = swReg[0] ^ swReg[1] ;
  assign z__h33181 = z__h33174 ^ swReg[2] ;
  assign z__h33188 = z__h33181 ^ swReg[3] ;
  assign z__h33195 = z__h33188 ^ swReg[4] ;
  assign z__h33202 = z__h33195 ^ swReg[5] ;
  assign z__h33209 = z__h33202 ^ swReg[6] ;
  assign z__h33459 =
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[0] ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[1] ;
  assign z__h33466 =
	     z__h33459 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[2] ;
  assign z__h33473 =
	     z__h33466 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[3] ;
  assign z__h33480 =
	     z__h33473 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[4] ;
  assign z__h33487 =
	     z__h33480 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[5] ;
  assign z__h33494 =
	     z__h33487 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[6] ;
  assign z__h33501 =
	     z__h33494 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[7] ;
  assign z__h33508 =
	     z__h33501 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[8] ;
  assign z__h33515 =
	     z__h33508 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[9] ;
  assign z__h33522 =
	     z__h33515 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[10] ;
  assign z__h33529 =
	     z__h33522 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[11] ;
  assign z__h33536 =
	     z__h33529 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[12] ;
  assign z__h33543 =
	     z__h33536 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[13] ;
  assign z__h33550 =
	     z__h33543 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[14] ;
  assign z__h33557 =
	     z__h33550 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[15] ;
  assign z__h33564 =
	     z__h33557 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[16] ;
  assign z__h33571 =
	     z__h33564 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[17] ;
  assign z__h33578 =
	     z__h33571 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[18] ;
  assign z__h33585 =
	     z__h33578 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[19] ;
  assign z__h33592 =
	     z__h33585 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[20] ;
  assign z__h33599 =
	     z__h33592 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[21] ;
  assign z__h33606 =
	     z__h33599 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[22] ;
  assign z__h33613 =
	     z__h33606 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[23] ;
  assign z__h33620 =
	     z__h33613 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[24] ;
  assign z__h33627 =
	     z__h33620 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[25] ;
  assign z__h33634 =
	     z__h33627 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[26] ;
  assign z__h33641 =
	     z__h33634 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[27] ;
  assign z__h33648 =
	     z__h33641 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[28] ;
  assign z__h33655 =
	     z__h33648 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[29] ;
  assign z__h33662 =
	     z__h33655 ^
	     pciw_pci0_pcie_ep_ava_debug__67_OR_0_CONCAT_pc_ETC___d497[30] ;
  always@(pciw_pci0_rxEofF$D_OUT)
  begin
    case (pciw_pci0_rxEofF$D_OUT)
      3'd0: CASE_pciw_pci0_rxEofFD_OUT_0xFFFF_0_0x0_1_0xF_ETC__q1 = 16'h0;
      3'd1: CASE_pciw_pci0_rxEofFD_OUT_0xFFFF_0_0x0_1_0xF_ETC__q1 = 16'h000F;
      3'd2: CASE_pciw_pci0_rxEofFD_OUT_0xFFFF_0_0x0_1_0xF_ETC__q1 = 16'h00FF;
      3'd3: CASE_pciw_pci0_rxEofFD_OUT_0xFFFF_0_0x0_1_0xF_ETC__q1 = 16'h0FFF;
      default: CASE_pciw_pci0_rxEofFD_OUT_0xFFFF_0_0x0_1_0xF_ETC__q1 =
		   16'hFFFF;
    endcase
  end

  // handling of inlined registers

  always@(posedge pciw_pci0_pcie_ep$ava_core_clk_out)
  begin
    if (!pciw_pci0_pcie_ep$ava_srstn)
      begin
        freeCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ledReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciw_pci0_deviceReg <= `BSV_ASSIGNMENT_DELAY 16'hAAAA;
	pciw_pci0_rxDws_num_empty <= `BSV_ASSIGNMENT_DELAY 4'd8;
	pciw_pci0_rxDws_num_full <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pciw_pci0_rxDws_vec <= `BSV_ASSIGNMENT_DELAY 256'd0;
	pciw_pci0_rxInF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pciw_pci0_rxInF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciw_pci0_rxInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_pci0_rxPushAccu <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pciw_pci0_txHeadPushed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_pci0_txSeqGuard <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_pci0_txSerPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pciw_pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	swReg <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (freeCnt$EN) freeCnt <= `BSV_ASSIGNMENT_DELAY freeCnt$D_IN;
	if (ledReg$EN) ledReg <= `BSV_ASSIGNMENT_DELAY ledReg$D_IN;
	if (pciDevice$EN) pciDevice <= `BSV_ASSIGNMENT_DELAY pciDevice$D_IN;
	if (pciw_pci0_deviceReg$EN)
	  pciw_pci0_deviceReg <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_deviceReg$D_IN;
	if (pciw_pci0_rxDws_num_empty$EN)
	  pciw_pci0_rxDws_num_empty <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_rxDws_num_empty$D_IN;
	if (pciw_pci0_rxDws_num_full$EN)
	  pciw_pci0_rxDws_num_full <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_rxDws_num_full$D_IN;
	if (pciw_pci0_rxDws_vec$EN)
	  pciw_pci0_rxDws_vec <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_rxDws_vec$D_IN;
	if (pciw_pci0_rxInF_countReg$EN)
	  pciw_pci0_rxInF_countReg <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_rxInF_countReg$D_IN;
	if (pciw_pci0_rxInF_levelsValid$EN)
	  pciw_pci0_rxInF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_rxInF_levelsValid$D_IN;
	if (pciw_pci0_rxInFlight$EN)
	  pciw_pci0_rxInFlight <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_rxInFlight$D_IN;
	if (pciw_pci0_rxPushAccu$EN)
	  pciw_pci0_rxPushAccu <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_rxPushAccu$D_IN;
	if (pciw_pci0_txHeadPushed$EN)
	  pciw_pci0_txHeadPushed <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_txHeadPushed$D_IN;
	if (pciw_pci0_txSeqGuard$EN)
	  pciw_pci0_txSeqGuard <= `BSV_ASSIGNMENT_DELAY
	      pciw_pci0_txSeqGuard$D_IN;
	if (pciw_pci0_txSerPos$EN)
	  pciw_pci0_txSerPos <= `BSV_ASSIGNMENT_DELAY pciw_pci0_txSerPos$D_IN;
	if (pciw_pciDevice$EN)
	  pciw_pciDevice <= `BSV_ASSIGNMENT_DELAY pciw_pciDevice$D_IN;
	if (swReg$EN) swReg <= `BSV_ASSIGNMENT_DELAY swReg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    freeCnt = 32'hAAAAAAAA;
    ledReg = 16'hAAAA;
    pciDevice = 16'hAAAA;
    pciw_pci0_deviceReg = 16'hAAAA;
    pciw_pci0_rxDws_num_empty = 4'hA;
    pciw_pci0_rxDws_num_full = 4'hA;
    pciw_pci0_rxDws_vec =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pciw_pci0_rxInF_countReg = 2'h2;
    pciw_pci0_rxInF_levelsValid = 1'h0;
    pciw_pci0_rxInFlight = 1'h0;
    pciw_pci0_rxPushAccu = 3'h2;
    pciw_pci0_txHeadPushed = 1'h0;
    pciw_pci0_txSeqGuard = 1'h0;
    pciw_pci0_txSerPos = 2'h2;
    pciw_pciDevice = 16'hAAAA;
    swReg = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop_alst4

