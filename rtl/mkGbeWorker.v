//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Tue Jun  8 18:42:48 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// wci_rx_resp                    O    34 reg
// wci_rx_SThreadBusy             O     1
// wci_rx_SFlag                   O     2
// wci_tx_resp                    O    34 reg
// wci_tx_SThreadBusy             O     1
// wci_tx_SFlag                   O     2
// wti_s_SThreadBusy              O     1
// wsiM1_MCmd                     O     3
// wsiM1_MReqLast                 O     1
// wsiM1_MBurstPrecise            O     1
// wsiM1_MBurstLength             O    12
// wsiM1_MData                    O    32 reg
// wsiM1_MByteEn                  O     4 reg
// wsiM1_MReqInfo                 O     8
// wsiM1_MReset_n                 O     1
// wsiS1_SThreadBusy              O     1
// wsiS1_SReset_n                 O     1
// gmii_txd                       O     8
// gmii_tx_en                     O     1
// gmii_tx_er                     O     1
// CLK_gmii_tx_clk                O     1 clock
// CLK_GATE_gmii_tx_clk           O     1 const
// CLK_rxclk                      O     1 clock
// CLK_GATE_rxclk                 O     1 const
// RST_N_mrst_n                   O     1 reset
// CLK_gmii_rx_clk                I     1 clock
// CLK_sys1_clk                   I     1 clock
// RST_N_sys1_rst                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wci_rx_req                     I    60
// wci_rx_MFlag                   I     2 unused
// wci_tx_req                     I    60
// wci_tx_MFlag                   I     2 unused
// wti_s_req                      I    67 reg
// wsiS1_MCmd                     I     3
// wsiS1_MBurstLength             I    12
// wsiS1_MData                    I    32
// wsiS1_MByteEn                  I     4
// wsiS1_MReqInfo                 I     8
// gmii_rxd_i                     I     8
// gmii_rx_dv_i                   I     1
// gmii_rx_er_i                   I     1
// wsiM1_SThreadBusy              I     1 reg
// wsiM1_SReset_n                 I     1 reg
// wsiS1_MReqLast                 I     1
// wsiS1_MBurstPrecise            I     1
// wsiS1_MReset_n                 I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGbeWorker(CLK_gmii_rx_clk,
		   CLK_sys1_clk,
		   RST_N_sys1_rst,
		   CLK,
		   RST_N,

		   wci_rx_req,

		   wci_rx_resp,

		   wci_rx_SThreadBusy,

		   wci_rx_SFlag,

		   wci_rx_MFlag,

		   wci_tx_req,

		   wci_tx_resp,

		   wci_tx_SThreadBusy,

		   wci_tx_SFlag,

		   wci_tx_MFlag,

		   wti_s_req,

		   wti_s_SThreadBusy,

		   wsiM1_MCmd,

		   wsiM1_MReqLast,

		   wsiM1_MBurstPrecise,

		   wsiM1_MBurstLength,

		   wsiM1_MData,

		   wsiM1_MByteEn,

		   wsiM1_MReqInfo,

		   wsiM1_SThreadBusy,

		   wsiM1_MReset_n,

		   wsiM1_SReset_n,

		   wsiS1_MCmd,

		   wsiS1_MReqLast,

		   wsiS1_MBurstPrecise,

		   wsiS1_MBurstLength,

		   wsiS1_MData,

		   wsiS1_MByteEn,

		   wsiS1_MReqInfo,

		   wsiS1_SThreadBusy,

		   wsiS1_SReset_n,

		   wsiS1_MReset_n,

		   gmii_txd,

		   gmii_tx_en,

		   gmii_tx_er,

		   gmii_rxd_i,

		   gmii_rx_dv_i,

		   gmii_rx_er_i,

		   CLK_gmii_tx_clk,
		   CLK_GATE_gmii_tx_clk,

		   CLK_rxclk,
		   CLK_GATE_rxclk,

		   RST_N_mrst_n);
  input  CLK_gmii_rx_clk;
  input  CLK_sys1_clk;
  input  RST_N_sys1_rst;
  input  CLK;
  input  RST_N;

  // action method wci_rx_putreq
  input  [59 : 0] wci_rx_req;

  // value method wci_rx_resp
  output [33 : 0] wci_rx_resp;

  // value method wci_rx_sThreadBusy
  output wci_rx_SThreadBusy;

  // value method wci_rx_sFlag
  output [1 : 0] wci_rx_SFlag;

  // action method wci_rx_mFlag
  input  [1 : 0] wci_rx_MFlag;

  // action method wci_tx_putreq
  input  [59 : 0] wci_tx_req;

  // value method wci_tx_resp
  output [33 : 0] wci_tx_resp;

  // value method wci_tx_sThreadBusy
  output wci_tx_SThreadBusy;

  // value method wci_tx_sFlag
  output [1 : 0] wci_tx_SFlag;

  // action method wci_tx_mFlag
  input  [1 : 0] wci_tx_MFlag;

  // action method wti_s_put
  input  [66 : 0] wti_s_req;

  // value method wti_s_sThreadBusy
  output wti_s_SThreadBusy;

  // value method wsiM1_mCmd
  output [2 : 0] wsiM1_MCmd;

  // value method wsiM1_mReqLast
  output wsiM1_MReqLast;

  // value method wsiM1_mBurstPrecise
  output wsiM1_MBurstPrecise;

  // value method wsiM1_mBurstLength
  output [11 : 0] wsiM1_MBurstLength;

  // value method wsiM1_mData
  output [31 : 0] wsiM1_MData;

  // value method wsiM1_mByteEn
  output [3 : 0] wsiM1_MByteEn;

  // value method wsiM1_mReqInfo
  output [7 : 0] wsiM1_MReqInfo;

  // value method wsiM1_mDataInfo

  // action method wsiM1_sThreadBusy
  input  wsiM1_SThreadBusy;

  // value method wsiM1_mReset_n
  output wsiM1_MReset_n;

  // action method wsiM1_sReset_n
  input  wsiM1_SReset_n;

  // action method wsiS1_mCmd
  input  [2 : 0] wsiS1_MCmd;

  // action method wsiS1_mReqLast
  input  wsiS1_MReqLast;

  // action method wsiS1_mBurstPrecise
  input  wsiS1_MBurstPrecise;

  // action method wsiS1_mBurstLength
  input  [11 : 0] wsiS1_MBurstLength;

  // action method wsiS1_mData
  input  [31 : 0] wsiS1_MData;

  // action method wsiS1_mByteEn
  input  [3 : 0] wsiS1_MByteEn;

  // action method wsiS1_mReqInfo
  input  [7 : 0] wsiS1_MReqInfo;

  // action method wsiS1_mDataInfo

  // value method wsiS1_sThreadBusy
  output wsiS1_SThreadBusy;

  // value method wsiS1_sReset_n
  output wsiS1_SReset_n;

  // action method wsiS1_mReset_n
  input  wsiS1_MReset_n;

  // value method gmii_txd
  output [7 : 0] gmii_txd;

  // value method gmii_tx_en
  output gmii_tx_en;

  // value method gmii_tx_er
  output gmii_tx_er;

  // action method gmii_rxd
  input  [7 : 0] gmii_rxd_i;

  // action method gmii_rx_dv
  input  gmii_rx_dv_i;

  // action method gmii_rx_er
  input  gmii_rx_er_i;

  // oscillator and gates for output clock CLK_gmii_tx_clk
  output CLK_gmii_tx_clk;
  output CLK_GATE_gmii_tx_clk;

  // oscillator and gates for output clock CLK_rxclk
  output CLK_rxclk;
  output CLK_GATE_rxclk;

  // output resets
  output RST_N_mrst_n;

  // signals for module outputs
  wire [33 : 0] wci_rx_resp, wci_tx_resp;
  wire [31 : 0] wsiM1_MData;
  wire [11 : 0] wsiM1_MBurstLength;
  wire [7 : 0] gmii_txd, wsiM1_MReqInfo;
  wire [3 : 0] wsiM1_MByteEn;
  wire [2 : 0] wsiM1_MCmd;
  wire [1 : 0] wci_rx_SFlag, wci_tx_SFlag;
  wire CLK_GATE_gmii_tx_clk,
       CLK_GATE_rxclk,
       CLK_gmii_tx_clk,
       CLK_rxclk,
       RST_N_mrst_n,
       gmii_tx_en,
       gmii_tx_er,
       wci_rx_SThreadBusy,
       wci_tx_SThreadBusy,
       wsiM1_MBurstPrecise,
       wsiM1_MReqLast,
       wsiM1_MReset_n,
       wsiS1_SReset_n,
       wsiS1_SThreadBusy,
       wti_s_SThreadBusy;

  // inlined wires
  wire [95 : 0] wsiM_extStatusW$wget, wsiS_extStatusW$wget;
  wire [66 : 0] wti_wtiReq$wget;
  wire [60 : 0] wsiM_reqFifo_x_wire$wget, wsiS_wsiReq$wget;
  wire [59 : 0] wciRx_wciReq$wget, wciTx_wciReq$wget;
  wire [33 : 0] wciRx_respF_x_wire$wget, wciTx_respF_x_wire$wget;
  wire [31 : 0] wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [9 : 0] emac_rx_buffer_fifoDeq_rw_enq$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget,
	       emac_tx_buffer_fifoEnq_rw_enq$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget;
  wire [7 : 0] emac_rx_buffer_wData$wget,
	       emac_tx_buffer_wDataOut$wget,
	       wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wsi_Es_mByteEn_w$wget;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$wget,
	       wciRx_wEdge$wget,
	       wciTx_wEdge$wget,
	       wsi_Es_mCmd_w$wget;
  wire [1 : 0] emac_rx_buffer_memBuffer_serverAdapterA_s1_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_s1_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$wget;
  wire emac_rx_buffer_fifoDeq_pw_deq$whas,
       emac_rx_buffer_fifoDeq_rw_enq$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_s1_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$whas,
       emac_rx_buffer_pwEnqueue$whas,
       emac_rx_buffer_rRdPackets_pwDecrement$whas,
       emac_rx_buffer_rRdPackets_pwIncrement$whas,
       emac_rx_buffer_rWrPackets_pwDecrement$whas,
       emac_rx_buffer_rWrPackets_pwIncrement$whas,
       emac_rx_buffer_wBadFrame$wget,
       emac_rx_buffer_wBadFrame$whas,
       emac_rx_buffer_wData$whas,
       emac_rx_buffer_wDataValid$wget,
       emac_rx_buffer_wDataValid$whas,
       emac_rx_buffer_wFrameDrop$wget,
       emac_rx_buffer_wFrameDrop$whas,
       emac_rx_buffer_wGoodFrame$wget,
       emac_rx_buffer_wGoodFrame$whas,
       emac_tx_buffer_fifoEnq_pw_deq$whas,
       emac_tx_buffer_fifoEnq_rw_enq$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_s1_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$whas,
       emac_tx_buffer_rRdPackets_pwDecrement$whas,
       emac_tx_buffer_rRdPackets_pwIncrement$whas,
       emac_tx_buffer_rWrPackets_pwDecrement$whas,
       emac_tx_buffer_rWrPackets_pwIncrement$whas,
       emac_tx_buffer_wAck$wget,
       emac_tx_buffer_wAck$whas,
       emac_tx_buffer_wCollision$wget,
       emac_tx_buffer_wCollision$whas,
       emac_tx_buffer_wDataOut$whas,
       emac_tx_buffer_wDataValid$wget,
       emac_tx_buffer_wDataValid$whas,
       emac_tx_buffer_wRetransmit$wget,
       emac_tx_buffer_wRetransmit$whas,
       wciRx_ctlAckReg_1$wget,
       wciRx_ctlAckReg_1$whas,
       wciRx_reqF_r_clr$whas,
       wciRx_reqF_r_deq$whas,
       wciRx_reqF_r_enq$whas,
       wciRx_respF_dequeueing$whas,
       wciRx_respF_enqueueing$whas,
       wciRx_respF_x_wire$whas,
       wciRx_sFlagReg_1$wget,
       wciRx_sFlagReg_1$whas,
       wciRx_sThreadBusy_pw$whas,
       wciRx_wEdge$whas,
       wciRx_wciReq$whas,
       wciRx_wci_cfrd_pw$whas,
       wciRx_wci_cfwr_pw$whas,
       wciRx_wci_ctrl_pw$whas,
       wciTx_ctlAckReg_1$wget,
       wciTx_ctlAckReg_1$whas,
       wciTx_reqF_r_clr$whas,
       wciTx_reqF_r_deq$whas,
       wciTx_reqF_r_enq$whas,
       wciTx_respF_dequeueing$whas,
       wciTx_respF_enqueueing$whas,
       wciTx_respF_x_wire$whas,
       wciTx_sFlagReg_1$wget,
       wciTx_sFlagReg_1$whas,
       wciTx_sThreadBusy_pw$whas,
       wciTx_wEdge$whas,
       wciTx_wciReq$whas,
       wciTx_wci_cfrd_pw$whas,
       wciTx_wci_cfwr_pw$whas,
       wciTx_wci_ctrl_pw$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas,
       wti_wtiReq$whas;

  // register emac_rx_buffer_fifoDeq_taggedReg
  reg [10 : 0] emac_rx_buffer_fifoDeq_taggedReg;
  wire [10 : 0] emac_rx_buffer_fifoDeq_taggedReg$D_IN;
  wire emac_rx_buffer_fifoDeq_taggedReg$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterA_cnt
  reg [2 : 0] emac_rx_buffer_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterA_cnt$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterA_s1
  reg [1 : 0] emac_rx_buffer_memBuffer_serverAdapterA_s1;
  wire [1 : 0] emac_rx_buffer_memBuffer_serverAdapterA_s1$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterA_s1$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterB_cnt
  reg [2 : 0] emac_rx_buffer_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterB_cnt$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterB_s1
  reg [1 : 0] emac_rx_buffer_memBuffer_serverAdapterB_s1;
  wire [1 : 0] emac_rx_buffer_memBuffer_serverAdapterB_s1$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterB_s1$EN;

  // register emac_rx_buffer_rData_D1
  reg [7 : 0] emac_rx_buffer_rData_D1;
  wire [7 : 0] emac_rx_buffer_rData_D1$D_IN;
  wire emac_rx_buffer_rData_D1$EN;

  // register emac_rx_buffer_rInPacket
  reg emac_rx_buffer_rInPacket;
  wire emac_rx_buffer_rInPacket$D_IN, emac_rx_buffer_rInPacket$EN;

  // register emac_rx_buffer_rOutPacket
  reg emac_rx_buffer_rOutPacket;
  wire emac_rx_buffer_rOutPacket$D_IN, emac_rx_buffer_rOutPacket$EN;

  // register emac_rx_buffer_rRdCurrPtr
  reg [11 : 0] emac_rx_buffer_rRdCurrPtr;
  wire [11 : 0] emac_rx_buffer_rRdCurrPtr$D_IN;
  wire emac_rx_buffer_rRdCurrPtr$EN;

  // register emac_rx_buffer_rRdPackets_rdCounter
  reg [7 : 0] emac_rx_buffer_rRdPackets_rdCounter;
  wire [7 : 0] emac_rx_buffer_rRdPackets_rdCounter$D_IN;
  wire emac_rx_buffer_rRdPackets_rdCounter$EN;

  // register emac_rx_buffer_rRdPackets_rdCounterPre
  reg [7 : 0] emac_rx_buffer_rRdPackets_rdCounterPre;
  wire [7 : 0] emac_rx_buffer_rRdPackets_rdCounterPre$D_IN;
  wire emac_rx_buffer_rRdPackets_rdCounterPre$EN;

  // register emac_rx_buffer_rRdPackets_rsCounter
  reg [7 : 0] emac_rx_buffer_rRdPackets_rsCounter;
  wire [7 : 0] emac_rx_buffer_rRdPackets_rsCounter$D_IN;
  wire emac_rx_buffer_rRdPackets_rsCounter$EN;

  // register emac_rx_buffer_rRdStartPtr
  reg [11 : 0] emac_rx_buffer_rRdStartPtr;
  wire [11 : 0] emac_rx_buffer_rRdStartPtr$D_IN;
  wire emac_rx_buffer_rRdStartPtr$EN;

  // register emac_rx_buffer_rWrCurrPtr
  reg [11 : 0] emac_rx_buffer_rWrCurrPtr;
  wire [11 : 0] emac_rx_buffer_rWrCurrPtr$D_IN;
  wire emac_rx_buffer_rWrCurrPtr$EN;

  // register emac_rx_buffer_rWrPackets_rdCounter
  reg [7 : 0] emac_rx_buffer_rWrPackets_rdCounter;
  wire [7 : 0] emac_rx_buffer_rWrPackets_rdCounter$D_IN;
  wire emac_rx_buffer_rWrPackets_rdCounter$EN;

  // register emac_rx_buffer_rWrPackets_rdCounterPre
  reg [7 : 0] emac_rx_buffer_rWrPackets_rdCounterPre;
  wire [7 : 0] emac_rx_buffer_rWrPackets_rdCounterPre$D_IN;
  wire emac_rx_buffer_rWrPackets_rdCounterPre$EN;

  // register emac_rx_buffer_rWrPackets_rsCounter
  reg [7 : 0] emac_rx_buffer_rWrPackets_rsCounter;
  wire [7 : 0] emac_rx_buffer_rWrPackets_rsCounter$D_IN;
  wire emac_rx_buffer_rWrPackets_rsCounter$EN;

  // register emac_rx_buffer_rWrStartPtr
  reg [11 : 0] emac_rx_buffer_rWrStartPtr;
  wire [11 : 0] emac_rx_buffer_rWrStartPtr$D_IN;
  wire emac_rx_buffer_rWrStartPtr$EN;

  // register emac_tx_buffer_fifoEnq_taggedReg
  reg [10 : 0] emac_tx_buffer_fifoEnq_taggedReg;
  wire [10 : 0] emac_tx_buffer_fifoEnq_taggedReg$D_IN;
  wire emac_tx_buffer_fifoEnq_taggedReg$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterA_cnt
  reg [2 : 0] emac_tx_buffer_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] emac_tx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterA_cnt$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterA_s1
  reg [1 : 0] emac_tx_buffer_memBuffer_serverAdapterA_s1;
  wire [1 : 0] emac_tx_buffer_memBuffer_serverAdapterA_s1$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterA_s1$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterB_cnt
  reg [2 : 0] emac_tx_buffer_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] emac_tx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterB_cnt$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterB_s1
  reg [1 : 0] emac_tx_buffer_memBuffer_serverAdapterB_s1;
  wire [1 : 0] emac_tx_buffer_memBuffer_serverAdapterB_s1$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterB_s1$EN;

  // register emac_tx_buffer_rAcked
  reg emac_tx_buffer_rAcked;
  wire emac_tx_buffer_rAcked$D_IN, emac_tx_buffer_rAcked$EN;

  // register emac_tx_buffer_rIfgDelay
  reg [7 : 0] emac_tx_buffer_rIfgDelay;
  wire [7 : 0] emac_tx_buffer_rIfgDelay$D_IN;
  wire emac_tx_buffer_rIfgDelay$EN;

  // register emac_tx_buffer_rOutPacket
  reg emac_tx_buffer_rOutPacket;
  wire emac_tx_buffer_rOutPacket$D_IN, emac_tx_buffer_rOutPacket$EN;

  // register emac_tx_buffer_rRdCurrPtr
  reg [11 : 0] emac_tx_buffer_rRdCurrPtr;
  reg [11 : 0] emac_tx_buffer_rRdCurrPtr$D_IN;
  wire emac_tx_buffer_rRdCurrPtr$EN;

  // register emac_tx_buffer_rRdPackets_rdCounter
  reg [7 : 0] emac_tx_buffer_rRdPackets_rdCounter;
  wire [7 : 0] emac_tx_buffer_rRdPackets_rdCounter$D_IN;
  wire emac_tx_buffer_rRdPackets_rdCounter$EN;

  // register emac_tx_buffer_rRdPackets_rdCounterPre
  reg [7 : 0] emac_tx_buffer_rRdPackets_rdCounterPre;
  wire [7 : 0] emac_tx_buffer_rRdPackets_rdCounterPre$D_IN;
  wire emac_tx_buffer_rRdPackets_rdCounterPre$EN;

  // register emac_tx_buffer_rRdPackets_rsCounter
  reg [7 : 0] emac_tx_buffer_rRdPackets_rsCounter;
  wire [7 : 0] emac_tx_buffer_rRdPackets_rsCounter$D_IN;
  wire emac_tx_buffer_rRdPackets_rsCounter$EN;

  // register emac_tx_buffer_rRdStartPtr
  reg [11 : 0] emac_tx_buffer_rRdStartPtr;
  wire [11 : 0] emac_tx_buffer_rRdStartPtr$D_IN;
  wire emac_tx_buffer_rRdStartPtr$EN;

  // register emac_tx_buffer_rUnderrun
  reg emac_tx_buffer_rUnderrun;
  wire emac_tx_buffer_rUnderrun$D_IN, emac_tx_buffer_rUnderrun$EN;

  // register emac_tx_buffer_rWrCurrPtr
  reg [11 : 0] emac_tx_buffer_rWrCurrPtr;
  wire [11 : 0] emac_tx_buffer_rWrCurrPtr$D_IN;
  wire emac_tx_buffer_rWrCurrPtr$EN;

  // register emac_tx_buffer_rWrPackets_rdCounter
  reg [7 : 0] emac_tx_buffer_rWrPackets_rdCounter;
  wire [7 : 0] emac_tx_buffer_rWrPackets_rdCounter$D_IN;
  wire emac_tx_buffer_rWrPackets_rdCounter$EN;

  // register emac_tx_buffer_rWrPackets_rdCounterPre
  reg [7 : 0] emac_tx_buffer_rWrPackets_rdCounterPre;
  wire [7 : 0] emac_tx_buffer_rWrPackets_rdCounterPre$D_IN;
  wire emac_tx_buffer_rWrPackets_rdCounterPre$EN;

  // register emac_tx_buffer_rWrPackets_rsCounter
  reg [7 : 0] emac_tx_buffer_rWrPackets_rsCounter;
  wire [7 : 0] emac_tx_buffer_rWrPackets_rsCounter$D_IN;
  wire emac_tx_buffer_rWrPackets_rsCounter$EN;

  // register emac_tx_buffer_rWrStartPtr
  reg [11 : 0] emac_tx_buffer_rWrStartPtr;
  wire [11 : 0] emac_tx_buffer_rWrStartPtr$D_IN;
  wire emac_tx_buffer_rWrStartPtr$EN;

  // register gbeControl
  reg [31 : 0] gbeControl;
  wire [31 : 0] gbeControl$D_IN;
  wire gbeControl$EN;

  // register wciRx_cEdge
  reg [2 : 0] wciRx_cEdge;
  wire [2 : 0] wciRx_cEdge$D_IN;
  wire wciRx_cEdge$EN;

  // register wciRx_cState
  reg [2 : 0] wciRx_cState;
  wire [2 : 0] wciRx_cState$D_IN;
  wire wciRx_cState$EN;

  // register wciRx_ctlAckReg
  reg wciRx_ctlAckReg;
  wire wciRx_ctlAckReg$D_IN, wciRx_ctlAckReg$EN;

  // register wciRx_ctlOpActive
  reg wciRx_ctlOpActive;
  wire wciRx_ctlOpActive$D_IN, wciRx_ctlOpActive$EN;

  // register wciRx_illegalEdge
  reg wciRx_illegalEdge;
  wire wciRx_illegalEdge$D_IN, wciRx_illegalEdge$EN;

  // register wciRx_nState
  reg [2 : 0] wciRx_nState;
  reg [2 : 0] wciRx_nState$D_IN;
  wire wciRx_nState$EN;

  // register wciRx_reqF_countReg
  reg [1 : 0] wciRx_reqF_countReg;
  wire [1 : 0] wciRx_reqF_countReg$D_IN;
  wire wciRx_reqF_countReg$EN;

  // register wciRx_respF_c_r
  reg [1 : 0] wciRx_respF_c_r;
  wire [1 : 0] wciRx_respF_c_r$D_IN;
  wire wciRx_respF_c_r$EN;

  // register wciRx_respF_q_0
  reg [33 : 0] wciRx_respF_q_0;
  reg [33 : 0] wciRx_respF_q_0$D_IN;
  wire wciRx_respF_q_0$EN;

  // register wciRx_respF_q_1
  reg [33 : 0] wciRx_respF_q_1;
  reg [33 : 0] wciRx_respF_q_1$D_IN;
  wire wciRx_respF_q_1$EN;

  // register wciRx_sFlagReg
  reg wciRx_sFlagReg;
  wire wciRx_sFlagReg$D_IN, wciRx_sFlagReg$EN;

  // register wciRx_sThreadBusy_d
  reg wciRx_sThreadBusy_d;
  wire wciRx_sThreadBusy_d$D_IN, wciRx_sThreadBusy_d$EN;

  // register wciTx_cEdge
  reg [2 : 0] wciTx_cEdge;
  wire [2 : 0] wciTx_cEdge$D_IN;
  wire wciTx_cEdge$EN;

  // register wciTx_cState
  reg [2 : 0] wciTx_cState;
  wire [2 : 0] wciTx_cState$D_IN;
  wire wciTx_cState$EN;

  // register wciTx_ctlAckReg
  reg wciTx_ctlAckReg;
  wire wciTx_ctlAckReg$D_IN, wciTx_ctlAckReg$EN;

  // register wciTx_ctlOpActive
  reg wciTx_ctlOpActive;
  wire wciTx_ctlOpActive$D_IN, wciTx_ctlOpActive$EN;

  // register wciTx_illegalEdge
  reg wciTx_illegalEdge;
  wire wciTx_illegalEdge$D_IN, wciTx_illegalEdge$EN;

  // register wciTx_nState
  reg [2 : 0] wciTx_nState;
  reg [2 : 0] wciTx_nState$D_IN;
  wire wciTx_nState$EN;

  // register wciTx_reqF_countReg
  reg [1 : 0] wciTx_reqF_countReg;
  wire [1 : 0] wciTx_reqF_countReg$D_IN;
  wire wciTx_reqF_countReg$EN;

  // register wciTx_respF_c_r
  reg [1 : 0] wciTx_respF_c_r;
  wire [1 : 0] wciTx_respF_c_r$D_IN;
  wire wciTx_respF_c_r$EN;

  // register wciTx_respF_q_0
  reg [33 : 0] wciTx_respF_q_0;
  reg [33 : 0] wciTx_respF_q_0$D_IN;
  wire wciTx_respF_q_0$EN;

  // register wciTx_respF_q_1
  reg [33 : 0] wciTx_respF_q_1;
  reg [33 : 0] wciTx_respF_q_1$D_IN;
  wire wciTx_respF_q_1$EN;

  // register wciTx_sFlagReg
  reg wciTx_sFlagReg;
  wire wciTx_sFlagReg$D_IN, wciTx_sFlagReg$EN;

  // register wciTx_sThreadBusy_d
  reg wciTx_sThreadBusy_d;
  wire wciTx_sThreadBusy_d$D_IN, wciTx_sThreadBusy_d$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wti_nowReq
  reg [66 : 0] wti_nowReq;
  wire [66 : 0] wti_nowReq$D_IN;
  wire wti_nowReq$EN;

  // ports of submodule emac_gmii_rx_clk
  wire emac_gmii_rx_clk$O;

  // ports of submodule emac_gmii_rxc_delay
  wire emac_gmii_rxc_delay$DATAOUT;

  // ports of submodule emac_mac
  wire [7 : 0] emac_mac$CLIENTEMACTXD,
	       emac_mac$CLIENTEMACTXIFGDELAY,
	       emac_mac$EMACCLIENTRXD,
	       emac_mac$GMII_RXD,
	       emac_mac$GMII_TXD;
  wire emac_mac$CLIENTEMACTXDVLD,
       emac_mac$CLIENTEMACTXFIRSTBYTE,
       emac_mac$CLIENTEMACTXUNDERRUN,
       emac_mac$EMACCLIENTRXBADFRAME,
       emac_mac$EMACCLIENTRXDVLD,
       emac_mac$EMACCLIENTRXFRAMEDROP,
       emac_mac$EMACCLIENTRXGOODFRAME,
       emac_mac$EMACCLIENTTXACK,
       emac_mac$EMACCLIENTTXCOLLISION,
       emac_mac$EMACCLIENTTXRETRANSMIT,
       emac_mac$GMII_RX_DV,
       emac_mac$GMII_RX_ER,
       emac_mac$GMII_TX_CLK,
       emac_mac$GMII_TX_EN,
       emac_mac$GMII_TX_ER,
       emac_mac$TX_CLK_OUT;

  // ports of submodule emac_macreset_h
  wire emac_macreset_h$OUT_RST_N;

  // ports of submodule emac_macreset_inv
  wire emac_macreset_inv$RESET_OUT;

  // ports of submodule emac_macreset_n
  wire emac_macreset_n$OUT_RST_N;

  // ports of submodule emac_phy_rx_clk
  wire emac_phy_rx_clk$O;

  // ports of submodule emac_rx_buffer_memBuffer_memory
  reg [11 : 0] emac_rx_buffer_memBuffer_memory$ADDRA;
  reg [9 : 0] emac_rx_buffer_memBuffer_memory$DIA;
  wire [11 : 0] emac_rx_buffer_memBuffer_memory$ADDRB;
  wire [9 : 0] emac_rx_buffer_memBuffer_memory$DIB,
	       emac_rx_buffer_memBuffer_memory$DOA,
	       emac_rx_buffer_memBuffer_memory$DOB;
  wire emac_rx_buffer_memBuffer_memory$ENA,
       emac_rx_buffer_memBuffer_memory$ENB,
       emac_rx_buffer_memBuffer_memory$WEA,
       emac_rx_buffer_memBuffer_memory$WEB;

  // ports of submodule emac_rx_buffer_memBuffer_serverAdapterA_outDataCore
  wire [9 : 0] emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN,
	       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT;
  wire emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$CLR,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule emac_rx_buffer_memBuffer_serverAdapterB_outDataCore
  wire [9 : 0] emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN,
	       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT;
  wire emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$CLR,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule emac_rx_buffer_rRdPackets_wdCounterCrossing
  wire [7 : 0] emac_rx_buffer_rRdPackets_wdCounterCrossing$WGET,
	       emac_rx_buffer_rRdPackets_wdCounterCrossing$WVAL;

  // ports of submodule emac_rx_buffer_rWrPackets_wdCounterCrossing
  wire [7 : 0] emac_rx_buffer_rWrPackets_wdCounterCrossing$WGET,
	       emac_rx_buffer_rWrPackets_wdCounterCrossing$WVAL;

  // ports of submodule emac_rx_client_rst_n
  wire emac_rx_client_rst_n$OUT_RST_N;

  // ports of submodule emac_tx_buffer_memBuffer_memory
  reg [9 : 0] emac_tx_buffer_memBuffer_memory$DIB;
  wire [11 : 0] emac_tx_buffer_memBuffer_memory$ADDRA,
		emac_tx_buffer_memBuffer_memory$ADDRB;
  wire [9 : 0] emac_tx_buffer_memBuffer_memory$DIA,
	       emac_tx_buffer_memBuffer_memory$DOA,
	       emac_tx_buffer_memBuffer_memory$DOB;
  wire emac_tx_buffer_memBuffer_memory$ENA,
       emac_tx_buffer_memBuffer_memory$ENB,
       emac_tx_buffer_memBuffer_memory$WEA,
       emac_tx_buffer_memBuffer_memory$WEB;

  // ports of submodule emac_tx_buffer_memBuffer_serverAdapterA_outDataCore
  wire [9 : 0] emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN,
	       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT;
  wire emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$CLR,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule emac_tx_buffer_memBuffer_serverAdapterB_outDataCore
  wire [9 : 0] emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN,
	       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT;
  wire emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$CLR,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule emac_tx_buffer_rRdPackets_wdCounterCrossing
  wire [7 : 0] emac_tx_buffer_rRdPackets_wdCounterCrossing$WGET,
	       emac_tx_buffer_rRdPackets_wdCounterCrossing$WVAL;

  // ports of submodule emac_tx_buffer_rWrPackets_wdCounterCrossing
  wire [7 : 0] emac_tx_buffer_rWrPackets_wdCounterCrossing$WGET,
	       emac_tx_buffer_rWrPackets_wdCounterCrossing$WVAL;

  // ports of submodule emac_tx_client_rst_n
  wire emac_tx_client_rst_n$OUT_RST_N;

  // ports of submodule wciRx_isReset
  wire wciRx_isReset$VAL;

  // ports of submodule wciRx_reqF
  wire [59 : 0] wciRx_reqF$D_IN, wciRx_reqF$D_OUT;
  wire wciRx_reqF$CLR, wciRx_reqF$DEQ, wciRx_reqF$EMPTY_N, wciRx_reqF$ENQ;

  // ports of submodule wciTx_isReset
  wire wciTx_isReset$VAL;

  // ports of submodule wciTx_reqF
  wire [59 : 0] wciTx_reqF$D_IN, wciTx_reqF$D_OUT;
  wire wciTx_reqF$CLR, wciTx_reqF$DEQ, wciTx_reqF$EMPTY_N, wciTx_reqF$ENQ;

  // ports of submodule wsiM_isReset
  wire wsiM_isReset$VAL;

  // ports of submodule wsiS_isReset
  wire wsiS_isReset$VAL;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // ports of submodule wti_isReset
  wire wti_isReset$VAL;

  // rule scheduling signals
  wire CAN_FIRE_RL_emac_connect,
       CAN_FIRE_RL_emac_connect_a,
       CAN_FIRE_RL_emac_connect_b,
       CAN_FIRE_RL_emac_connect_c,
       CAN_FIRE_RL_emac_connect_d,
       CAN_FIRE_RL_emac_connect_e,
       CAN_FIRE_RL_emac_connect_f,
       CAN_FIRE_RL_emac_connect_g,
       CAN_FIRE_RL_emac_connect_h,
       CAN_FIRE_RL_emac_rx_buffer_commit_packet,
       CAN_FIRE_RL_emac_rx_buffer_dequeue_first_beat,
       CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat,
       CAN_FIRE_RL_emac_rx_buffer_enqueue_first_beat,
       CAN_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat,
       CAN_FIRE_RL_emac_rx_buffer_fifoDeq_rule_deq,
       CAN_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_overRun,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_overRun,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_emac_rx_buffer_punt_packet,
       CAN_FIRE_RL_emac_rx_buffer_rRdPackets_do_decrement,
       CAN_FIRE_RL_emac_rx_buffer_rRdPackets_do_increment,
       CAN_FIRE_RL_emac_rx_buffer_rRdPackets_synchronizer,
       CAN_FIRE_RL_emac_rx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing,
       CAN_FIRE_RL_emac_rx_buffer_rWrPackets_do_decrement,
       CAN_FIRE_RL_emac_rx_buffer_rWrPackets_do_increment,
       CAN_FIRE_RL_emac_rx_buffer_rWrPackets_synchronizer,
       CAN_FIRE_RL_emac_rx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing,
       CAN_FIRE_RL_emac_tx_buffer_clear_underrun,
       CAN_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat,
       CAN_FIRE_RL_emac_tx_buffer_dequeue_got_ack,
       CAN_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat,
       CAN_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack,
       CAN_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat,
       CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat,
       CAN_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat,
       CAN_FIRE_RL_emac_tx_buffer_fifoEnq_rule_deq,
       CAN_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_overRun,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_overRun,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_emac_tx_buffer_rRdPackets_do_decrement,
       CAN_FIRE_RL_emac_tx_buffer_rRdPackets_do_increment,
       CAN_FIRE_RL_emac_tx_buffer_rRdPackets_synchronizer,
       CAN_FIRE_RL_emac_tx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing,
       CAN_FIRE_RL_emac_tx_buffer_rWrPackets_do_decrement,
       CAN_FIRE_RL_emac_tx_buffer_rWrPackets_do_increment,
       CAN_FIRE_RL_emac_tx_buffer_rWrPackets_synchronizer,
       CAN_FIRE_RL_emac_tx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing,
       CAN_FIRE_RL_emac_tx_buffer_transmit_underrun,
       CAN_FIRE_RL_rx_data,
       CAN_FIRE_RL_tx_data,
       CAN_FIRE_RL_wciRx_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wciRx_ctl_op_complete,
       CAN_FIRE_RL_wciRx_ctl_op_start,
       CAN_FIRE_RL_wciRx_reqF__updateLevelCounter,
       CAN_FIRE_RL_wciRx_reqF_enq,
       CAN_FIRE_RL_wciRx_request_decode,
       CAN_FIRE_RL_wciRx_respF_both,
       CAN_FIRE_RL_wciRx_respF_decCtr,
       CAN_FIRE_RL_wciRx_respF_deq,
       CAN_FIRE_RL_wciRx_respF_incCtr,
       CAN_FIRE_RL_wciRx_sFlagReg__dreg_update,
       CAN_FIRE_RL_wciRx_sThreadBusy_reg,
       CAN_FIRE_RL_wciTx_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wciTx_ctl_op_complete,
       CAN_FIRE_RL_wciTx_ctl_op_start,
       CAN_FIRE_RL_wciTx_reqF__updateLevelCounter,
       CAN_FIRE_RL_wciTx_reqF_enq,
       CAN_FIRE_RL_wciTx_request_decode,
       CAN_FIRE_RL_wciTx_respF_both,
       CAN_FIRE_RL_wciTx_respF_decCtr,
       CAN_FIRE_RL_wciTx_respF_deq,
       CAN_FIRE_RL_wciTx_respF_incCtr,
       CAN_FIRE_RL_wciTx_sFlagReg__dreg_update,
       CAN_FIRE_RL_wciTx_sThreadBusy_reg,
       CAN_FIRE_RL_wci_cfrd,
       CAN_FIRE_RL_wci_cfwr,
       CAN_FIRE_RL_wci_ctrl_EiI,
       CAN_FIRE_RL_wci_ctrl_IsO,
       CAN_FIRE_RL_wci_ctrl_OrE,
       CAN_FIRE_RL_wsiM_ext_status_assign,
       CAN_FIRE_RL_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiM_reqFifo_both,
       CAN_FIRE_RL_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_wsiM_reqFifo_deq,
       CAN_FIRE_RL_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_wsiM_update_statusR,
       CAN_FIRE_RL_wsiS_ext_status_assign,
       CAN_FIRE_RL_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_wsiS_reqFifo_enq,
       CAN_FIRE_RL_wsiS_update_statusR,
       CAN_FIRE_RL_wsi_Es_doAlways,
       CAN_FIRE_RL_wsi_operate,
       CAN_FIRE_gmii_rx_dv,
       CAN_FIRE_gmii_rx_er,
       CAN_FIRE_gmii_rxd,
       CAN_FIRE_wci_rx_mFlag,
       CAN_FIRE_wci_rx_putreq,
       CAN_FIRE_wci_tx_mFlag,
       CAN_FIRE_wci_tx_putreq,
       CAN_FIRE_wsiM1_sReset_n,
       CAN_FIRE_wsiM1_sThreadBusy,
       CAN_FIRE_wsiS1_mBurstLength,
       CAN_FIRE_wsiS1_mBurstPrecise,
       CAN_FIRE_wsiS1_mByteEn,
       CAN_FIRE_wsiS1_mCmd,
       CAN_FIRE_wsiS1_mData,
       CAN_FIRE_wsiS1_mDataInfo,
       CAN_FIRE_wsiS1_mReqInfo,
       CAN_FIRE_wsiS1_mReqLast,
       CAN_FIRE_wsiS1_mReset_n,
       CAN_FIRE_wti_s_put,
       WILL_FIRE_RL_emac_connect,
       WILL_FIRE_RL_emac_connect_a,
       WILL_FIRE_RL_emac_connect_b,
       WILL_FIRE_RL_emac_connect_c,
       WILL_FIRE_RL_emac_connect_d,
       WILL_FIRE_RL_emac_connect_e,
       WILL_FIRE_RL_emac_connect_f,
       WILL_FIRE_RL_emac_connect_g,
       WILL_FIRE_RL_emac_connect_h,
       WILL_FIRE_RL_emac_rx_buffer_commit_packet,
       WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat,
       WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat,
       WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat,
       WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat,
       WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_deq,
       WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_overRun,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_overRun,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_emac_rx_buffer_punt_packet,
       WILL_FIRE_RL_emac_rx_buffer_rRdPackets_do_decrement,
       WILL_FIRE_RL_emac_rx_buffer_rRdPackets_do_increment,
       WILL_FIRE_RL_emac_rx_buffer_rRdPackets_synchronizer,
       WILL_FIRE_RL_emac_rx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing,
       WILL_FIRE_RL_emac_rx_buffer_rWrPackets_do_decrement,
       WILL_FIRE_RL_emac_rx_buffer_rWrPackets_do_increment,
       WILL_FIRE_RL_emac_rx_buffer_rWrPackets_synchronizer,
       WILL_FIRE_RL_emac_rx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing,
       WILL_FIRE_RL_emac_tx_buffer_clear_underrun,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack,
       WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_deq,
       WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_overRun,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_overRun,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_emac_tx_buffer_rRdPackets_do_decrement,
       WILL_FIRE_RL_emac_tx_buffer_rRdPackets_do_increment,
       WILL_FIRE_RL_emac_tx_buffer_rRdPackets_synchronizer,
       WILL_FIRE_RL_emac_tx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing,
       WILL_FIRE_RL_emac_tx_buffer_rWrPackets_do_decrement,
       WILL_FIRE_RL_emac_tx_buffer_rWrPackets_do_increment,
       WILL_FIRE_RL_emac_tx_buffer_rWrPackets_synchronizer,
       WILL_FIRE_RL_emac_tx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing,
       WILL_FIRE_RL_emac_tx_buffer_transmit_underrun,
       WILL_FIRE_RL_rx_data,
       WILL_FIRE_RL_tx_data,
       WILL_FIRE_RL_wciRx_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wciRx_ctl_op_complete,
       WILL_FIRE_RL_wciRx_ctl_op_start,
       WILL_FIRE_RL_wciRx_reqF__updateLevelCounter,
       WILL_FIRE_RL_wciRx_reqF_enq,
       WILL_FIRE_RL_wciRx_request_decode,
       WILL_FIRE_RL_wciRx_respF_both,
       WILL_FIRE_RL_wciRx_respF_decCtr,
       WILL_FIRE_RL_wciRx_respF_deq,
       WILL_FIRE_RL_wciRx_respF_incCtr,
       WILL_FIRE_RL_wciRx_sFlagReg__dreg_update,
       WILL_FIRE_RL_wciRx_sThreadBusy_reg,
       WILL_FIRE_RL_wciTx_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wciTx_ctl_op_complete,
       WILL_FIRE_RL_wciTx_ctl_op_start,
       WILL_FIRE_RL_wciTx_reqF__updateLevelCounter,
       WILL_FIRE_RL_wciTx_reqF_enq,
       WILL_FIRE_RL_wciTx_request_decode,
       WILL_FIRE_RL_wciTx_respF_both,
       WILL_FIRE_RL_wciTx_respF_decCtr,
       WILL_FIRE_RL_wciTx_respF_deq,
       WILL_FIRE_RL_wciTx_respF_incCtr,
       WILL_FIRE_RL_wciTx_sFlagReg__dreg_update,
       WILL_FIRE_RL_wciTx_sThreadBusy_reg,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wsiM_ext_status_assign,
       WILL_FIRE_RL_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_wsiM_update_statusR,
       WILL_FIRE_RL_wsiS_ext_status_assign,
       WILL_FIRE_RL_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_update_statusR,
       WILL_FIRE_RL_wsi_Es_doAlways,
       WILL_FIRE_RL_wsi_operate,
       WILL_FIRE_gmii_rx_dv,
       WILL_FIRE_gmii_rx_er,
       WILL_FIRE_gmii_rxd,
       WILL_FIRE_wci_rx_mFlag,
       WILL_FIRE_wci_rx_putreq,
       WILL_FIRE_wci_tx_mFlag,
       WILL_FIRE_wci_tx_putreq,
       WILL_FIRE_wsiM1_sReset_n,
       WILL_FIRE_wsiM1_sThreadBusy,
       WILL_FIRE_wsiS1_mBurstLength,
       WILL_FIRE_wsiS1_mBurstPrecise,
       WILL_FIRE_wsiS1_mByteEn,
       WILL_FIRE_wsiS1_mCmd,
       WILL_FIRE_wsiS1_mData,
       WILL_FIRE_wsiS1_mDataInfo,
       WILL_FIRE_wsiS1_mReqInfo,
       WILL_FIRE_wsiS1_mReqLast,
       WILL_FIRE_wsiS1_mReset_n,
       WILL_FIRE_wti_s_put;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wciRx_respF_q_0$write_1__VAL_1;
  wire [60 : 0] MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
  wire [33 : 0] MUX_wciRx_respF_q_0$write_1__VAL_2,
		MUX_wciRx_respF_q_1$write_1__VAL_2,
		MUX_wciRx_respF_x_wire$wset_1__VAL_1,
		MUX_wciRx_respF_x_wire$wset_1__VAL_2,
		MUX_wciTx_respF_q_0$write_1__VAL_1,
		MUX_wciTx_respF_q_0$write_1__VAL_2,
		MUX_wciTx_respF_q_1$write_1__VAL_1;
  wire [11 : 0] MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3,
		MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_1,
		MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_2,
		MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_1,
		MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_2,
		MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_1,
		MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3,
		MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_1,
		MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_2;
  wire [10 : 0] MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__VAL_1,
		MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__VAL_1;
  wire [9 : 0] MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1,
	       MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2,
	       MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2,
	       MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2;
  wire [7 : 0] MUX_emac_rx_buffer_rRdPackets_rsCounter$write_1__VAL_2,
	       MUX_emac_rx_buffer_rWrPackets_rsCounter$write_1__VAL_2,
	       MUX_emac_tx_buffer_rRdPackets_rsCounter$write_1__VAL_2,
	       MUX_emac_tx_buffer_rWrPackets_rsCounter$write_1__VAL_2;
  wire [1 : 0] MUX_wciRx_respF_c_r$write_1__VAL_1,
	       MUX_wciRx_respF_c_r$write_1__VAL_2,
	       MUX_wciTx_respF_c_r$write_1__VAL_1,
	       MUX_wciTx_respF_c_r$write_1__VAL_2,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1,
       MUX_emac_rx_buffer_rInPacket$write_1__SEL_1,
       MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1,
       MUX_emac_tx_buffer_memBuffer_memory$a_put_1__SEL_1,
       MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1,
       MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_3,
       MUX_emac_tx_buffer_rAcked$write_1__SEL_1,
       MUX_wciRx_illegalEdge$write_1__SEL_1,
       MUX_wciRx_illegalEdge$write_1__SEL_2,
       MUX_wciRx_illegalEdge$write_1__VAL_2,
       MUX_wciRx_respF_q_0$write_1__SEL_1,
       MUX_wciRx_respF_q_1$write_1__SEL_1,
       MUX_wciTx_illegalEdge$write_1__SEL_1,
       MUX_wciTx_illegalEdge$write_1__SEL_2,
       MUX_wciTx_illegalEdge$write_1__VAL_2,
       MUX_wciTx_respF_q_0$write_1__SEL_2,
       MUX_wciTx_respF_q_1$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h2621,
	       v__h2768,
	       v__h35625,
	       v__h36028,
	       v__h3667,
	       v__h6532,
	       v__h6679,
	       v__h7575;
  reg [31 : 0] _theResult____h35609;
  reg [1 : 0] CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10,
	      CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5,
	      CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9,
	      CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11,
	      CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12,
	      CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4;
  wire [31 : 0] IF_emac_rx_buffer_rRdPackets_rsCounter_21_BIT__ETC___d1481,
		IF_emac_rx_buffer_rWrPackets_rsCounter_03_BIT__ETC___d1476,
		IF_emac_tx_buffer_rRdPackets_rsCounter_74_BIT__ETC___d1490,
		IF_emac_tx_buffer_rWrPackets_rsCounter_35_BIT__ETC___d1485,
		status__h35535,
		x__h16276,
		x__h22595,
		x__h26496,
		x__h32963,
		x_data__h36436;
  wire [15 : 0] x__h35684;
  wire [11 : 0] x_burstLength__h36435;
  wire [7 : 0] x__h15740,
	       x__h22059,
	       x__h25960,
	       x__h32427,
	       x__h36500,
	       y__h16304,
	       y__h22623,
	       y__h26524,
	       y__h32991;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterB_cnt_06_ETC___d687,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d319;
  wire [1 : 0] ab__h19718, ab__h29885;
  wire IF_emac_rx_buffer_fifoDeq_rw_enq_whas__2_THEN__ETC___d1280,
       IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1483,
       IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1484,
       NOT_wsiS_reqFifo_countReg_65_ULE_1_66___d867,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_44_ETC___d545,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_06_ETC___d507,
       emac_rx_buffer_memBuffer_serverAdapterB_outDat_ETC___d510,
       emac_rx_buffer_rRdPackets_rsCounter_21_BIT_0_8_ETC___d1425,
       emac_rx_buffer_rWrPackets_rsCounter_03_BIT_0_0_ETC___d1424,
       emac_rx_buffer_wBadFrame_wget__30_OR_emac_rx_b_ETC___d542,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d148,
       emac_tx_buffer_memBuffer_serverAdapterB_outDat_ETC___d151,
       emac_tx_buffer_rRdPackets_rsCounter_74_BIT_0_2_ETC___d1427,
       emac_tx_buffer_rWrPackets_rsCounter_35_BIT_0_3_ETC___d1426,
       z__h15171,
       z__h15178,
       z__h15185,
       z__h15192,
       z__h15199,
       z__h15206,
       z__h21490,
       z__h21497,
       z__h21504,
       z__h21511,
       z__h21518,
       z__h21525,
       z__h25391,
       z__h25398,
       z__h25405,
       z__h25412,
       z__h25419,
       z__h25426,
       z__h31858,
       z__h31865,
       z__h31872,
       z__h31879,
       z__h31886,
       z__h31893;

  // oscillator and gates for output clock CLK_gmii_tx_clk
  assign CLK_gmii_tx_clk = emac_mac$GMII_TX_CLK ;
  assign CLK_GATE_gmii_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclk
  assign CLK_rxclk = emac_phy_rx_clk$O ;
  assign CLK_GATE_rxclk = 1'b1 ;

  // output resets
  assign RST_N_mrst_n = emac_macreset_n$OUT_RST_N ;

  // action method wci_rx_putreq
  assign CAN_FIRE_wci_rx_putreq = 1'd1 ;
  assign WILL_FIRE_wci_rx_putreq = 1'd1 ;

  // value method wci_rx_resp
  assign wci_rx_resp = wciRx_respF_q_0 ;

  // value method wci_rx_sThreadBusy
  assign wci_rx_SThreadBusy =
	     wciRx_reqF_countReg > 2'd1 || wciRx_isReset$VAL ;

  // value method wci_rx_sFlag
  assign wci_rx_SFlag = { 1'd1, wciRx_sFlagReg } ;

  // action method wci_rx_mFlag
  assign CAN_FIRE_wci_rx_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_rx_mFlag = 1'd1 ;

  // action method wci_tx_putreq
  assign CAN_FIRE_wci_tx_putreq = 1'd1 ;
  assign WILL_FIRE_wci_tx_putreq = 1'd1 ;

  // value method wci_tx_resp
  assign wci_tx_resp = wciTx_respF_q_0 ;

  // value method wci_tx_sThreadBusy
  assign wci_tx_SThreadBusy =
	     wciTx_reqF_countReg > 2'd1 || wciTx_isReset$VAL ;

  // value method wci_tx_sFlag
  assign wci_tx_SFlag = { 1'd1, wciTx_sFlagReg } ;

  // action method wci_tx_mFlag
  assign CAN_FIRE_wci_tx_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_tx_mFlag = 1'd1 ;

  // action method wti_s_put
  assign CAN_FIRE_wti_s_put = 1'd1 ;
  assign WILL_FIRE_wti_s_put = 1'd1 ;

  // value method wti_s_sThreadBusy
  assign wti_s_SThreadBusy = wti_isReset$VAL ;

  // value method wsiM1_mCmd
  assign wsiM1_MCmd = wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;

  // value method wsiM1_mReqLast
  assign wsiM1_MReqLast = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;

  // value method wsiM1_mBurstPrecise
  assign wsiM1_MBurstPrecise = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;

  // value method wsiM1_mBurstLength
  assign wsiM1_MBurstLength =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;

  // value method wsiM1_mData
  assign wsiM1_MData = wsiM_reqFifo_q_0[43:12] ;

  // value method wsiM1_mByteEn
  assign wsiM1_MByteEn = wsiM_reqFifo_q_0[11:8] ;

  // value method wsiM1_mReqInfo
  assign wsiM1_MReqInfo = wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;

  // action method wsiM1_sThreadBusy
  assign CAN_FIRE_wsiM1_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wsiM1_sThreadBusy = wsiM1_SThreadBusy ;

  // value method wsiM1_mReset_n
  assign wsiM1_MReset_n = !wsiM_isReset$VAL && wsiM_operateD ;

  // action method wsiM1_sReset_n
  assign CAN_FIRE_wsiM1_sReset_n = 1'd1 ;
  assign WILL_FIRE_wsiM1_sReset_n = wsiM1_SReset_n ;

  // action method wsiS1_mCmd
  assign CAN_FIRE_wsiS1_mCmd = 1'd1 ;
  assign WILL_FIRE_wsiS1_mCmd = 1'd1 ;

  // action method wsiS1_mReqLast
  assign CAN_FIRE_wsiS1_mReqLast = 1'd1 ;
  assign WILL_FIRE_wsiS1_mReqLast = wsiS1_MReqLast ;

  // action method wsiS1_mBurstPrecise
  assign CAN_FIRE_wsiS1_mBurstPrecise = 1'd1 ;
  assign WILL_FIRE_wsiS1_mBurstPrecise = wsiS1_MBurstPrecise ;

  // action method wsiS1_mBurstLength
  assign CAN_FIRE_wsiS1_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wsiS1_mBurstLength = 1'd1 ;

  // action method wsiS1_mData
  assign CAN_FIRE_wsiS1_mData = 1'd1 ;
  assign WILL_FIRE_wsiS1_mData = 1'd1 ;

  // action method wsiS1_mByteEn
  assign CAN_FIRE_wsiS1_mByteEn = 1'd1 ;
  assign WILL_FIRE_wsiS1_mByteEn = 1'd1 ;

  // action method wsiS1_mReqInfo
  assign CAN_FIRE_wsiS1_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wsiS1_mReqInfo = 1'd1 ;

  // action method wsiS1_mDataInfo
  assign CAN_FIRE_wsiS1_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wsiS1_mDataInfo = 1'd1 ;

  // value method wsiS1_sThreadBusy
  assign wsiS1_SThreadBusy =
	     NOT_wsiS_reqFifo_countReg_65_ULE_1_66___d867 ||
	     wsiS_isReset$VAL ||
	     !wsiS_operateD ||
	     !wsiS_peerIsReady ;

  // value method wsiS1_sReset_n
  assign wsiS1_SReset_n = !wsiS_isReset$VAL && wsiS_operateD ;

  // action method wsiS1_mReset_n
  assign CAN_FIRE_wsiS1_mReset_n = 1'd1 ;
  assign WILL_FIRE_wsiS1_mReset_n = wsiS1_MReset_n ;

  // value method gmii_txd
  assign gmii_txd = emac_mac$GMII_TXD ;

  // value method gmii_tx_en
  assign gmii_tx_en = emac_mac$GMII_TX_EN ;

  // value method gmii_tx_er
  assign gmii_tx_er = emac_mac$GMII_TX_ER ;

  // action method gmii_rxd
  assign CAN_FIRE_gmii_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rxd = 1'd1 ;

  // action method gmii_rx_dv
  assign CAN_FIRE_gmii_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_dv = 1'd1 ;

  // action method gmii_rx_er
  assign CAN_FIRE_gmii_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_er = 1'd1 ;

  // submodule emac_gmii_rx_clk
  BUFIO emac_gmii_rx_clk(.I(emac_gmii_rxc_delay$DATAOUT),
			 .O(emac_gmii_rx_clk$O));

  // submodule emac_gmii_rxc_delay
  IODELAY #(.IDELAY_TYPE("FIXED"),
	    .IDELAY_VALUE(32'd0),
	    .DELAY_SRC("I"),
	    .SIGNAL_PATTERN("CLOCK"),
	    .HIGH_PERFORMANCE_MODE("TRUE")) emac_gmii_rxc_delay(.IDATAIN(CLK_gmii_rx_clk),
								.ODATAIN(32'd0),
								.DATAIN(32'd0),
								.C(32'd0),
								.T(32'd0),
								.CE(32'd0),
								.INC(32'd0),
								.RST(32'd0),
								.DATAOUT(emac_gmii_rxc_delay$DATAOUT));

  // submodule emac_mac
  v6_emac_v1_3_block emac_mac(.TX_CLK(CLK_sys1_clk),
			      .RESET(emac_macreset_h$OUT_RST_N),
			      .GMII_RX_CLK(emac_gmii_rx_clk$O),
			      .PHY_RX_CLK(emac_phy_rx_clk$O),
			      .CLIENTEMACPAUSEREQ(32'd0),
			      .CLIENTEMACPAUSEVAL(32'd0),
			      .CLIENTEMACTXD(emac_mac$CLIENTEMACTXD),
			      .CLIENTEMACTXDVLD(emac_mac$CLIENTEMACTXDVLD),
			      .CLIENTEMACTXFIRSTBYTE(emac_mac$CLIENTEMACTXFIRSTBYTE),
			      .CLIENTEMACTXIFGDELAY(emac_mac$CLIENTEMACTXIFGDELAY),
			      .CLIENTEMACTXUNDERRUN(emac_mac$CLIENTEMACTXUNDERRUN),
			      .GMII_RXD(emac_mac$GMII_RXD),
			      .GMII_RX_DV(emac_mac$GMII_RX_DV),
			      .GMII_RX_ER(emac_mac$GMII_RX_ER),
			      .GMII_TXD(emac_mac$GMII_TXD),
			      .GMII_TX_EN(emac_mac$GMII_TX_EN),
			      .GMII_TX_ER(emac_mac$GMII_TX_ER),
			      .EMACCLIENTRXD(emac_mac$EMACCLIENTRXD),
			      .EMACCLIENTRXDVLD(emac_mac$EMACCLIENTRXDVLD),
			      .EMACCLIENTRXGOODFRAME(emac_mac$EMACCLIENTRXGOODFRAME),
			      .EMACCLIENTRXBADFRAME(emac_mac$EMACCLIENTRXBADFRAME),
			      .EMACCLIENTRXFRAMEDROP(emac_mac$EMACCLIENTRXFRAMEDROP),
			      .EMACCLIENTRXSTATS(),
			      .EMACCLIENTRXSTATSVLD(),
			      .EMACCLIENTRXSTATSBYTEVLD(),
			      .EMACCLIENTTXACK(emac_mac$EMACCLIENTTXACK),
			      .EMACCLIENTTXCOLLISION(emac_mac$EMACCLIENTTXCOLLISION),
			      .EMACCLIENTTXRETRANSMIT(emac_mac$EMACCLIENTTXRETRANSMIT),
			      .EMACCLIENTTXSTATS(),
			      .EMACCLIENTTXSTATSVLD(),
			      .EMACCLIENTTXSTATSBYTEVLD(),
			      .GMII_TX_CLK(emac_mac$GMII_TX_CLK),
			      .TX_CLK_OUT(emac_mac$TX_CLK_OUT));

  // submodule emac_macreset_h
  SyncResetA #(.RSTDELAY(32'd0)) emac_macreset_h(.CLK(CLK_sys1_clk),
						 .IN_RST_N(emac_macreset_inv$RESET_OUT),
						 .OUT_RST_N(emac_macreset_h$OUT_RST_N));

  // submodule emac_macreset_inv
  ResetInverter emac_macreset_inv(.RESET_IN(RST_N),
				  .RESET_OUT(emac_macreset_inv$RESET_OUT));

  // submodule emac_macreset_n
  SyncResetA #(.RSTDELAY(32'd11)) emac_macreset_n(.CLK(CLK),
						  .IN_RST_N(RST_N),
						  .OUT_RST_N(emac_macreset_n$OUT_RST_N));

  // submodule emac_phy_rx_clk
  BUFR #(.BUFR_DIVIDE("BYPASS")) emac_phy_rx_clk(.I(emac_gmii_rxc_delay$DATAOUT),
						 .CE(1'd1),
						 .CLR(1'd0),
						 .O(emac_phy_rx_clk$O));

  // submodule emac_rx_buffer_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd10),
	  .MEMSIZE(13'd4096)) emac_rx_buffer_memBuffer_memory(.CLKA(emac_phy_rx_clk$O),
							      .CLKB(CLK),
							      .ADDRA(emac_rx_buffer_memBuffer_memory$ADDRA),
							      .ADDRB(emac_rx_buffer_memBuffer_memory$ADDRB),
							      .DIA(emac_rx_buffer_memBuffer_memory$DIA),
							      .DIB(emac_rx_buffer_memBuffer_memory$DIB),
							      .WEA(emac_rx_buffer_memBuffer_memory$WEA),
							      .WEB(emac_rx_buffer_memBuffer_memory$WEB),
							      .ENA(emac_rx_buffer_memBuffer_memory$ENA),
							      .ENB(emac_rx_buffer_memBuffer_memory$ENB),
							      .DOA(emac_rx_buffer_memBuffer_memory$DOA),
							      .DOB(emac_rx_buffer_memBuffer_memory$DOB));

  // submodule emac_rx_buffer_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_rx_buffer_memBuffer_serverAdapterA_outDataCore(.RST_N(emac_rx_client_rst_n$OUT_RST_N),
										   .CLK(emac_phy_rx_clk$O),
										   .D_IN(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN),
										   .ENQ(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ),
										   .DEQ(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ),
										   .CLR(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$CLR),
										   .D_OUT(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT),
										   .FULL_N(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N),
										   .EMPTY_N(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N));

  // submodule emac_rx_buffer_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_rx_buffer_memBuffer_serverAdapterB_outDataCore(.RST_N(RST_N),
										   .CLK(CLK),
										   .D_IN(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN),
										   .ENQ(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ),
										   .DEQ(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ),
										   .CLR(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$CLR),
										   .D_OUT(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT),
										   .FULL_N(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N),
										   .EMPTY_N(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N));

  // submodule emac_rx_buffer_rRdPackets_wdCounterCrossing
  BypassWire #(.width(32'd8)) emac_rx_buffer_rRdPackets_wdCounterCrossing(.WVAL(emac_rx_buffer_rRdPackets_wdCounterCrossing$WVAL),
									  .WGET(emac_rx_buffer_rRdPackets_wdCounterCrossing$WGET));

  // submodule emac_rx_buffer_rWrPackets_wdCounterCrossing
  BypassWire #(.width(32'd8)) emac_rx_buffer_rWrPackets_wdCounterCrossing(.WVAL(emac_rx_buffer_rWrPackets_wdCounterCrossing$WVAL),
									  .WGET(emac_rx_buffer_rWrPackets_wdCounterCrossing$WGET));

  // submodule emac_rx_client_rst_n
  SyncResetA #(.RSTDELAY(32'd11)) emac_rx_client_rst_n(.CLK(emac_phy_rx_clk$O),
						       .IN_RST_N(RST_N),
						       .OUT_RST_N(emac_rx_client_rst_n$OUT_RST_N));

  // submodule emac_tx_buffer_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd10),
	  .MEMSIZE(13'd4096)) emac_tx_buffer_memBuffer_memory(.CLKA(CLK),
							      .CLKB(emac_mac$TX_CLK_OUT),
							      .ADDRA(emac_tx_buffer_memBuffer_memory$ADDRA),
							      .ADDRB(emac_tx_buffer_memBuffer_memory$ADDRB),
							      .DIA(emac_tx_buffer_memBuffer_memory$DIA),
							      .DIB(emac_tx_buffer_memBuffer_memory$DIB),
							      .WEA(emac_tx_buffer_memBuffer_memory$WEA),
							      .WEB(emac_tx_buffer_memBuffer_memory$WEB),
							      .ENA(emac_tx_buffer_memBuffer_memory$ENA),
							      .ENB(emac_tx_buffer_memBuffer_memory$ENB),
							      .DOA(emac_tx_buffer_memBuffer_memory$DOA),
							      .DOB(emac_tx_buffer_memBuffer_memory$DOB));

  // submodule emac_tx_buffer_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_tx_buffer_memBuffer_serverAdapterA_outDataCore(.RST_N(RST_N),
										   .CLK(CLK),
										   .D_IN(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN),
										   .ENQ(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ),
										   .DEQ(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ),
										   .CLR(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$CLR),
										   .D_OUT(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT),
										   .FULL_N(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N),
										   .EMPTY_N(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N));

  // submodule emac_tx_buffer_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_tx_buffer_memBuffer_serverAdapterB_outDataCore(.RST_N(emac_tx_client_rst_n$OUT_RST_N),
										   .CLK(emac_mac$TX_CLK_OUT),
										   .D_IN(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN),
										   .ENQ(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ),
										   .DEQ(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ),
										   .CLR(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$CLR),
										   .D_OUT(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT),
										   .FULL_N(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N),
										   .EMPTY_N(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N));

  // submodule emac_tx_buffer_rRdPackets_wdCounterCrossing
  BypassWire #(.width(32'd8)) emac_tx_buffer_rRdPackets_wdCounterCrossing(.WVAL(emac_tx_buffer_rRdPackets_wdCounterCrossing$WVAL),
									  .WGET(emac_tx_buffer_rRdPackets_wdCounterCrossing$WGET));

  // submodule emac_tx_buffer_rWrPackets_wdCounterCrossing
  BypassWire #(.width(32'd8)) emac_tx_buffer_rWrPackets_wdCounterCrossing(.WVAL(emac_tx_buffer_rWrPackets_wdCounterCrossing$WVAL),
									  .WGET(emac_tx_buffer_rWrPackets_wdCounterCrossing$WGET));

  // submodule emac_tx_client_rst_n
  SyncResetA #(.RSTDELAY(32'd11)) emac_tx_client_rst_n(.CLK(emac_mac$TX_CLK_OUT),
						       .IN_RST_N(RST_N),
						       .OUT_RST_N(emac_tx_client_rst_n$OUT_RST_N));

  // submodule wciRx_isReset
  ResetToBool wciRx_isReset(.RST(RST_N), .VAL(wciRx_isReset$VAL));

  // submodule wciRx_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wciRx_reqF(.RST_N(RST_N),
					  .CLK(CLK),
					  .D_IN(wciRx_reqF$D_IN),
					  .ENQ(wciRx_reqF$ENQ),
					  .DEQ(wciRx_reqF$DEQ),
					  .CLR(wciRx_reqF$CLR),
					  .D_OUT(wciRx_reqF$D_OUT),
					  .FULL_N(),
					  .EMPTY_N(wciRx_reqF$EMPTY_N));

  // submodule wciTx_isReset
  ResetToBool wciTx_isReset(.RST(RST_N), .VAL(wciTx_isReset$VAL));

  // submodule wciTx_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wciTx_reqF(.RST_N(RST_N),
					  .CLK(CLK),
					  .D_IN(wciTx_reqF$D_IN),
					  .ENQ(wciTx_reqF$ENQ),
					  .DEQ(wciTx_reqF$DEQ),
					  .CLR(wciTx_reqF$CLR),
					  .D_OUT(wciTx_reqF$D_OUT),
					  .FULL_N(),
					  .EMPTY_N(wciTx_reqF$EMPTY_N));

  // submodule wsiM_isReset
  ResetToBool wsiM_isReset(.RST(RST_N), .VAL(wsiM_isReset$VAL));

  // submodule wsiS_isReset
  ResetToBool wsiS_isReset(.RST(RST_N), .VAL(wsiS_isReset$VAL));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // submodule wti_isReset
  ResetToBool wti_isReset(.RST(RST_N_sys1_rst), .VAL(wti_isReset$VAL));

  // rule RL_emac_connect
  assign CAN_FIRE_RL_emac_connect = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect = 1'd1 ;

  // rule RL_wciRx_request_decode
  assign CAN_FIRE_RL_wciRx_request_decode = wciRx_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wciRx_request_decode = wciRx_reqF$EMPTY_N ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wciRx_respF_c_r != 2'd2 && wciRx_reqF$EMPTY_N &&
	     wciRx_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wciRx_ctl_op_start &&
	     !WILL_FIRE_RL_wciRx_ctl_op_complete ;

  // rule RL_wciRx_ctl_op_start
  assign CAN_FIRE_RL_wciRx_ctl_op_start =
	     wciRx_reqF$EMPTY_N && wciRx_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wciRx_ctl_op_start =
	     CAN_FIRE_RL_wciRx_ctl_op_start &&
	     !WILL_FIRE_RL_wciRx_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign CAN_FIRE_RL_wci_ctrl_EiI =
	     wciRx_wci_ctrl_pw$whas && WILL_FIRE_RL_wciRx_ctl_op_start &&
	     wciRx_cState == 3'd0 &&
	     wciRx_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_wci_ctrl_EiI = CAN_FIRE_RL_wci_ctrl_EiI ;

  // rule RL_wci_ctrl_IsO
  assign CAN_FIRE_RL_wci_ctrl_IsO =
	     wciRx_wci_ctrl_pw$whas && WILL_FIRE_RL_wciRx_ctl_op_start &&
	     wciRx_cState == 3'd1 &&
	     wciRx_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_wci_ctrl_IsO = CAN_FIRE_RL_wci_ctrl_IsO ;

  // rule RL_wci_ctrl_OrE
  assign CAN_FIRE_RL_wci_ctrl_OrE =
	     wciRx_wci_ctrl_pw$whas && WILL_FIRE_RL_wciRx_ctl_op_start &&
	     wciRx_cState == 3'd2 &&
	     wciRx_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_wci_ctrl_OrE = CAN_FIRE_RL_wci_ctrl_OrE ;

  // rule RL_wciTx_ctl_op_complete
  assign CAN_FIRE_RL_wciTx_ctl_op_complete =
	     wciTx_respF_c_r != 2'd2 && wciTx_ctlOpActive && wciTx_ctlAckReg ;
  assign WILL_FIRE_RL_wciTx_ctl_op_complete =
	     CAN_FIRE_RL_wciTx_ctl_op_complete ;

  // rule RL_wciTx_request_decode
  assign CAN_FIRE_RL_wciTx_request_decode = wciTx_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wciTx_request_decode = wciTx_reqF$EMPTY_N ;

  // rule RL_wciTx_ctl_op_start
  assign CAN_FIRE_RL_wciTx_ctl_op_start =
	     wciTx_reqF$EMPTY_N && wciTx_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wciTx_ctl_op_start =
	     CAN_FIRE_RL_wciTx_ctl_op_start &&
	     !WILL_FIRE_RL_wciTx_ctl_op_complete ;

  // rule RL_wsi_Es_doAlways
  assign CAN_FIRE_RL_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_wsi_Es_doAlways = 1'd1 ;

  // rule RL_emac_connect_f
  assign CAN_FIRE_RL_emac_connect_f = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_f = 1'd1 ;

  // rule RL_wsi_operate
  assign CAN_FIRE_RL_wsi_operate = wciRx_cState == 3'd2 ;
  assign WILL_FIRE_RL_wsi_operate = CAN_FIRE_RL_wsi_operate ;

  // rule RL_emac_connect_h
  assign CAN_FIRE_RL_emac_connect_h = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_h = 1'd1 ;

  // rule RL_emac_connect_g
  assign CAN_FIRE_RL_emac_connect_g = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_g = 1'd1 ;

  // rule RL_emac_connect_d
  assign CAN_FIRE_RL_emac_connect_d = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_d = 1'd1 ;

  // rule RL_emac_connect_c
  assign CAN_FIRE_RL_emac_connect_c = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_c = 1'd1 ;

  // rule RL_emac_connect_b
  assign CAN_FIRE_RL_emac_connect_b = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_b = 1'd1 ;

  // rule RL_emac_tx_buffer_clear_underrun
  assign CAN_FIRE_RL_emac_tx_buffer_clear_underrun =
	     emac_tx_buffer_rUnderrun ;
  assign WILL_FIRE_RL_emac_tx_buffer_clear_underrun =
	     emac_tx_buffer_rUnderrun ;

  // rule RL_emac_tx_buffer_dequeue_first_data_beat
  assign CAN_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d148 &&
	     emac_tx_buffer_rWrPackets_rdCounter !=
	     emac_tx_buffer_rRdPackets_rsCounter &&
	     !emac_tx_buffer_rOutPacket ;
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat =
	     CAN_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ;

  // rule RL_emac_tx_buffer_rRdPackets_synchronizer
  assign CAN_FIRE_RL_emac_tx_buffer_rRdPackets_synchronizer = 1'd1 ;
  assign WILL_FIRE_RL_emac_tx_buffer_rRdPackets_synchronizer = 1'd1 ;

  // rule RL_emac_tx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing
  assign CAN_FIRE_RL_emac_tx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_tx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_overRun
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_overRun =
	     emac_tx_buffer_memBuffer_serverAdapterB_s1[1] &&
	     !emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_overRun =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_overRun ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_moveToOutFIFO =
	     (!emac_tx_buffer_memBuffer_serverAdapterB_s1[0] ||
	      emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N) &&
	     emac_tx_buffer_memBuffer_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_moveToOutFIFO ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstCore =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstCore =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_emac_tx_buffer_dequeue_wait_for_ack
  assign CAN_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack =
	     (emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	      emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas) &&
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d148 &&
	     emac_tx_buffer_rOutPacket &&
	     !emac_tx_buffer_rAcked &&
	     !emac_mac$EMACCLIENTTXACK ;
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack =
	     CAN_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;

  // rule RL_emac_tx_buffer_dequeue_got_ack
  assign CAN_FIRE_RL_emac_tx_buffer_dequeue_got_ack =
	     (emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	      emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas) &&
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d148 &&
	     emac_tx_buffer_rOutPacket &&
	     !emac_tx_buffer_rAcked &&
	     emac_mac$EMACCLIENTTXACK ;
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack =
	     CAN_FIRE_RL_emac_tx_buffer_dequeue_got_ack ;

  // rule RL_emac_tx_buffer_dequeue_next_data_beat
  assign CAN_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDat_ETC___d151 &&
	     emac_tx_buffer_rOutPacket &&
	     emac_tx_buffer_rAcked ;
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat =
	     CAN_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat ;

  // rule RL_emac_tx_buffer_transmit_underrun
  assign CAN_FIRE_RL_emac_tx_buffer_transmit_underrun =
	     emac_tx_buffer_rOutPacket ;
  assign WILL_FIRE_RL_emac_tx_buffer_transmit_underrun =
	     emac_tx_buffer_rOutPacket &&
	     !WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     !WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack &&
	     !WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;

  // rule RL_emac_connect_e
  assign CAN_FIRE_RL_emac_connect_e = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_e = 1'd1 ;

  // rule RL_emac_connect_a
  assign CAN_FIRE_RL_emac_connect_a = 1'd1 ;
  assign WILL_FIRE_RL_emac_connect_a = 1'd1 ;

  // rule RL_emac_tx_buffer_rRdPackets_do_decrement
  assign CAN_FIRE_RL_emac_tx_buffer_rRdPackets_do_decrement = 1'b0 ;
  assign WILL_FIRE_RL_emac_tx_buffer_rRdPackets_do_decrement = 1'b0 ;

  // rule RL_emac_tx_buffer_rRdPackets_do_increment
  assign CAN_FIRE_RL_emac_tx_buffer_rRdPackets_do_increment =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;
  assign WILL_FIRE_RL_emac_tx_buffer_rRdPackets_do_increment =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways =
	     MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_s1__dreg_update =
	     1'd1 ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_cnt_finalAdd =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas ||
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_cnt_finalAdd ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_deqOnly =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas &&
	     !emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_deqOnly ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqOnly =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     !emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqOnly ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_overRun
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_overRun =
	     emac_tx_buffer_memBuffer_serverAdapterA_s1[1] &&
	     !emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_overRun =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_overRun ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_moveToOutFIFO =
	     (!emac_tx_buffer_memBuffer_serverAdapterA_s1[0] ||
	      emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N) &&
	     emac_tx_buffer_memBuffer_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_moveToOutFIFO ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq =
	     !emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstCore =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstCore =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq =
	     1'b0 ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq =
	     1'b0 ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_deqOnly =
	     1'b0 ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_deqOnly =
	     1'b0 ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqOnly =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N &&
	     emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqOnly ;

  // rule RL_emac_tx_buffer_rWrPackets_synchronizer
  assign CAN_FIRE_RL_emac_tx_buffer_rWrPackets_synchronizer = 1'd1 ;
  assign WILL_FIRE_RL_emac_tx_buffer_rWrPackets_synchronizer = 1'd1 ;

  // rule RL_emac_tx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing
  assign CAN_FIRE_RL_emac_tx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_tx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;

  // rule RL_emac_rx_buffer_dequeue_first_beat
  assign CAN_FIRE_RL_emac_rx_buffer_dequeue_first_beat =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt_06_ETC___d507 &&
	     emac_rx_buffer_rWrPackets_rdCounter !=
	     emac_rx_buffer_rRdPackets_rsCounter &&
	     !emac_rx_buffer_rOutPacket ;
  assign WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;

  // rule RL_emac_rx_buffer_punt_packet
  assign CAN_FIRE_RL_emac_rx_buffer_punt_packet =
	     emac_rx_buffer_wBadFrame_wget__30_OR_emac_rx_b_ETC___d542 ;
  assign WILL_FIRE_RL_emac_rx_buffer_punt_packet =
	     emac_rx_buffer_wBadFrame_wget__30_OR_emac_rx_b_ETC___d542 ;

  // rule RL_emac_rx_buffer_commit_packet
  assign CAN_FIRE_RL_emac_rx_buffer_commit_packet =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt_44_ETC___d545 &&
	     emac_mac$EMACCLIENTRXGOODFRAME &&
	     !emac_mac$EMACCLIENTRXFRAMEDROP &&
	     emac_rx_buffer_rInPacket ;
  assign WILL_FIRE_RL_emac_rx_buffer_commit_packet =
	     CAN_FIRE_RL_emac_rx_buffer_commit_packet ;

  // rule RL_emac_rx_buffer_enqueue_next_data_beat
  assign CAN_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt_44_ETC___d545 &&
	     emac_mac$EMACCLIENTRXDVLD &&
	     !emac_mac$EMACCLIENTRXGOODFRAME &&
	     !emac_mac$EMACCLIENTRXBADFRAME &&
	     !emac_mac$EMACCLIENTRXFRAMEDROP &&
	     emac_rx_buffer_rInPacket ;
  assign WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat =
	     CAN_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ;

  // rule RL_emac_rx_buffer_enqueue_first_beat
  assign CAN_FIRE_RL_emac_rx_buffer_enqueue_first_beat =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt_44_ETC___d545 &&
	     emac_mac$EMACCLIENTRXDVLD &&
	     !emac_rx_buffer_rInPacket ;
  assign WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat =
	     CAN_FIRE_RL_emac_rx_buffer_enqueue_first_beat ;

  // rule RL_emac_rx_buffer_rRdPackets_synchronizer
  assign CAN_FIRE_RL_emac_rx_buffer_rRdPackets_synchronizer = 1'd1 ;
  assign WILL_FIRE_RL_emac_rx_buffer_rRdPackets_synchronizer = 1'd1 ;

  // rule RL_emac_rx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing
  assign CAN_FIRE_RL_emac_rx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_rx_buffer_rRdPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_overRun
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_overRun =
	     emac_rx_buffer_memBuffer_serverAdapterB_s1[1] &&
	     !emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_overRun =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_overRun ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_moveToOutFIFO =
	     (!emac_rx_buffer_memBuffer_serverAdapterB_s1[0] ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N) &&
	     emac_rx_buffer_memBuffer_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_moveToOutFIFO ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstCore =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstCore =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_emac_rx_buffer_dequeue_next_beat
  assign CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat =
	     (emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas) &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outDat_ETC___d510 &&
	     emac_rx_buffer_rOutPacket ;
  assign WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;

  // rule RL_rx_data
  assign CAN_FIRE_RL_rx_data =
	     wsiM_reqFifo_c_r != 2'd2 &&
	     (emac_rx_buffer_fifoDeq_taggedReg[10] ||
	      CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat) &&
	     wciRx_cState == 3'd2 ;
  assign WILL_FIRE_RL_rx_data = CAN_FIRE_RL_rx_data ;

  // rule RL_emac_rx_buffer_rRdPackets_do_decrement
  assign CAN_FIRE_RL_emac_rx_buffer_rRdPackets_do_decrement = 1'b0 ;
  assign WILL_FIRE_RL_emac_rx_buffer_rRdPackets_do_decrement = 1'b0 ;

  // rule RL_emac_rx_buffer_rRdPackets_do_increment
  assign CAN_FIRE_RL_emac_rx_buffer_rRdPackets_do_increment =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;
  assign WILL_FIRE_RL_emac_rx_buffer_rRdPackets_do_increment =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;

  // rule RL_emac_rx_buffer_fifoDeq_rule_deq
  assign CAN_FIRE_RL_emac_rx_buffer_fifoDeq_rule_deq = CAN_FIRE_RL_rx_data ;
  assign WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_deq = CAN_FIRE_RL_rx_data ;

  // rule RL_emac_rx_buffer_fifoDeq_rule_enq
  assign CAN_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     !CAN_FIRE_RL_rx_data ;
  assign WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq =
	     CAN_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_s1__dreg_update =
	     1'd1 ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_cnt_finalAdd =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas ||
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_cnt_finalAdd ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_deqOnly =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     !emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_deqOnly ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqOnly =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqOnly ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_overRun
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_overRun =
	     emac_rx_buffer_memBuffer_serverAdapterA_s1[1] &&
	     !emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_overRun =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_overRun ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_moveToOutFIFO =
	     (!emac_rx_buffer_memBuffer_serverAdapterA_s1[0] ||
	      emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N) &&
	     emac_rx_buffer_memBuffer_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_moveToOutFIFO ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_s1__dreg_update =
	     1'd1 ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_cnt_finalAdd =
	     1'b0 ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_cnt_finalAdd =
	     1'b0 ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq =
	     !emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N &&
	     emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstCore =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstCore =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq =
	     1'b0 ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqAndDeq =
	     1'b0 ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_deqOnly =
	     1'b0 ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_deqOnly =
	     1'b0 ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqOnly =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N &&
	     emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqOnly ;

  // rule RL_emac_rx_buffer_rWrPackets_synchronizer
  assign CAN_FIRE_RL_emac_rx_buffer_rWrPackets_synchronizer = 1'd1 ;
  assign WILL_FIRE_RL_emac_rx_buffer_rWrPackets_synchronizer = 1'd1 ;

  // rule RL_emac_rx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing
  assign CAN_FIRE_RL_emac_rx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_rx_buffer_rWrPackets_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;

  // rule RL_emac_rx_buffer_rWrPackets_do_decrement
  assign CAN_FIRE_RL_emac_rx_buffer_rWrPackets_do_decrement = 1'b0 ;
  assign WILL_FIRE_RL_emac_rx_buffer_rWrPackets_do_decrement = 1'b0 ;

  // rule RL_emac_rx_buffer_rWrPackets_do_increment
  assign CAN_FIRE_RL_emac_rx_buffer_rWrPackets_do_increment =
	     CAN_FIRE_RL_emac_rx_buffer_commit_packet ;
  assign WILL_FIRE_RL_emac_rx_buffer_rWrPackets_do_increment =
	     CAN_FIRE_RL_emac_rx_buffer_commit_packet ;

  // rule RL_wsiS_update_statusR
  assign CAN_FIRE_RL_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_update_statusR = 1'd1 ;

  // rule RL_wsiS_ext_status_assign
  assign CAN_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_wsiS_inc_tBusyCount =
	     wsiS_operateD && wsiS_peerIsReady &&
	     NOT_wsiS_reqFifo_countReg_65_ULE_1_66___d867 ;
  assign WILL_FIRE_RL_wsiS_inc_tBusyCount = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // rule RL_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_wsiS_reqFifo_enq = CAN_FIRE_RL_wsiS_reqFifo_enq ;

  // rule RL_tx_data
  assign CAN_FIRE_RL_tx_data =
	     wsiS_reqFifo$EMPTY_N && !emac_tx_buffer_fifoEnq_taggedReg[10] &&
	     wciRx_cState == 3'd2 ;
  assign WILL_FIRE_RL_tx_data = CAN_FIRE_RL_tx_data ;

  // rule RL_wciRx_ctl_op_complete
  assign CAN_FIRE_RL_wciRx_ctl_op_complete =
	     wciRx_respF_c_r != 2'd2 && wciRx_ctlOpActive && wciRx_ctlAckReg ;
  assign WILL_FIRE_RL_wciRx_ctl_op_complete =
	     CAN_FIRE_RL_wciRx_ctl_op_complete ;

  // rule RL_emac_tx_buffer_enqueue_last_data_beat
  assign CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat =
	     (emac_tx_buffer_fifoEnq_taggedReg[10] || CAN_FIRE_RL_tx_data) &&
	     (emac_tx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (CAN_FIRE_RL_tx_data ?
		emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] != 2'd0 &&
		emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] != 2'd1 :
		emac_tx_buffer_fifoEnq_taggedReg[10] &&
		emac_tx_buffer_fifoEnq_taggedReg[9:8] != 2'd0 &&
		emac_tx_buffer_fifoEnq_taggedReg[9:8] != 2'd1) ;
  assign WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;

  // rule RL_emac_tx_buffer_enqueue_next_data_beat
  assign CAN_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat =
	     (emac_tx_buffer_fifoEnq_taggedReg[10] || CAN_FIRE_RL_tx_data) &&
	     (emac_tx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1484 ;
  assign WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ;

  // rule RL_emac_tx_buffer_enqueue_first_data_beat
  assign CAN_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat =
	     (emac_tx_buffer_fifoEnq_taggedReg[10] || CAN_FIRE_RL_tx_data) &&
	     (emac_tx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1483 ;
  assign WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_s1__dreg_update =
	     1'd1 ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_cnt_finalAdd =
	     1'b0 ;
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_cnt_finalAdd =
	     1'b0 ;

  // rule RL_emac_tx_buffer_fifoEnq_rule_deq
  assign CAN_FIRE_RL_emac_tx_buffer_fifoEnq_rule_deq =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;
  assign WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_deq =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;

  // rule RL_emac_tx_buffer_rWrPackets_do_decrement
  assign CAN_FIRE_RL_emac_tx_buffer_rWrPackets_do_decrement = 1'b0 ;
  assign WILL_FIRE_RL_emac_tx_buffer_rWrPackets_do_decrement = 1'b0 ;

  // rule RL_emac_tx_buffer_rWrPackets_do_increment
  assign CAN_FIRE_RL_emac_tx_buffer_rWrPackets_do_increment =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;
  assign WILL_FIRE_RL_emac_tx_buffer_rWrPackets_do_increment =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;

  // rule RL_emac_tx_buffer_fifoEnq_rule_enq
  assign CAN_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq =
	     CAN_FIRE_RL_tx_data &&
	     !CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;
  assign WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq =
	     CAN_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq ;

  // rule RL_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_wsiS_reqFifo_enq != CAN_FIRE_RL_tx_data ;
  assign WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_wsiM_ext_status_assign
  assign CAN_FIRE_RL_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wciRx_respF_c_r != 2'd2 && wciRx_reqF$EMPTY_N &&
	     wciRx_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wciRx_ctl_op_start &&
	     !WILL_FIRE_RL_wciRx_ctl_op_complete ;

  // rule RL_wsiM_update_statusR
  assign CAN_FIRE_RL_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_update_statusR = 1'd1 ;

  // rule RL_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_wsiM_inc_tBusyCount =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiM_inc_tBusyCount = CAN_FIRE_RL_wsiM_inc_tBusyCount ;

  // rule RL_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiM_reqFifo_deq = CAN_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_wsiM_reqFifo_both
  assign CAN_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		CAN_FIRE_RL_rx_data :
		wsiM_reqFifo_c_r != 2'd2 || CAN_FIRE_RL_rx_data) &&
	     CAN_FIRE_RL_wsiM_reqFifo_deq &&
	     CAN_FIRE_RL_rx_data ;
  assign WILL_FIRE_RL_wsiM_reqFifo_both = CAN_FIRE_RL_wsiM_reqFifo_both ;

  // rule RL_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_wsiM_reqFifo_deq && !CAN_FIRE_RL_rx_data ;
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr = CAN_FIRE_RL_wsiM_reqFifo_decCtr ;

  // rule RL_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		CAN_FIRE_RL_rx_data :
		wsiM_reqFifo_c_r != 2'd1 || CAN_FIRE_RL_rx_data) &&
	     CAN_FIRE_RL_rx_data &&
	     !CAN_FIRE_RL_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr = CAN_FIRE_RL_wsiM_reqFifo_incCtr ;

  // rule RL_wciTx_respF_deq
  assign CAN_FIRE_RL_wciTx_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wciTx_respF_deq = 1'd1 ;

  // rule RL_wciTx_sThreadBusy_reg
  assign CAN_FIRE_RL_wciTx_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wciTx_sThreadBusy_reg = 1'd1 ;

  // rule RL_wciTx_reqF_enq
  assign CAN_FIRE_RL_wciTx_reqF_enq = wci_tx_req[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_wciTx_reqF_enq = CAN_FIRE_RL_wciTx_reqF_enq ;

  // rule RL_wciTx_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wciTx_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wciTx_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_wciTx_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wciTx_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wciTx_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wciTx_respF_both
  assign CAN_FIRE_RL_wciTx_respF_both =
	     ((wciTx_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_wciTx_ctl_op_complete :
		wciTx_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_wciTx_ctl_op_complete) &&
	     wciTx_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_wciTx_ctl_op_complete ;
  assign WILL_FIRE_RL_wciTx_respF_both = CAN_FIRE_RL_wciTx_respF_both ;

  // rule RL_wciTx_respF_decCtr
  assign CAN_FIRE_RL_wciTx_respF_decCtr =
	     wciTx_respF_c_r != 2'd0 && !CAN_FIRE_RL_wciTx_ctl_op_complete ;
  assign WILL_FIRE_RL_wciTx_respF_decCtr = CAN_FIRE_RL_wciTx_respF_decCtr ;

  // rule RL_wciTx_respF_incCtr
  assign CAN_FIRE_RL_wciTx_respF_incCtr =
	     ((wciTx_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_wciTx_ctl_op_complete :
		wciTx_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_wciTx_ctl_op_complete) &&
	     CAN_FIRE_RL_wciTx_ctl_op_complete &&
	     !(wciTx_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wciTx_respF_incCtr = CAN_FIRE_RL_wciTx_respF_incCtr ;

  // rule RL_wciTx_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wciTx_reqF__updateLevelCounter =
	     (wci_tx_req[59:57] != 3'd0) != WILL_FIRE_RL_wciTx_ctl_op_start ;
  assign WILL_FIRE_RL_wciTx_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wciTx_reqF__updateLevelCounter ;

  // rule RL_wciRx_respF_deq
  assign CAN_FIRE_RL_wciRx_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wciRx_respF_deq = 1'd1 ;

  // rule RL_wciRx_reqF_enq
  assign CAN_FIRE_RL_wciRx_reqF_enq = wci_rx_req[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_wciRx_reqF_enq = CAN_FIRE_RL_wciRx_reqF_enq ;

  // rule RL_wciRx_sThreadBusy_reg
  assign CAN_FIRE_RL_wciRx_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wciRx_sThreadBusy_reg = 1'd1 ;

  // rule RL_wciRx_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wciRx_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wciRx_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_wciRx_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wciRx_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wciRx_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wciRx_respF_both
  assign CAN_FIRE_RL_wciRx_respF_both =
	     ((wciRx_respF_c_r == 2'd1) ?
		wciRx_respF_enqueueing$whas :
		wciRx_respF_c_r != 2'd2 || wciRx_respF_enqueueing$whas) &&
	     wciRx_respF_c_r != 2'd0 &&
	     wciRx_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wciRx_respF_both = CAN_FIRE_RL_wciRx_respF_both ;

  // rule RL_wciRx_respF_decCtr
  assign CAN_FIRE_RL_wciRx_respF_decCtr =
	     wciRx_respF_c_r != 2'd0 && !wciRx_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wciRx_respF_decCtr = CAN_FIRE_RL_wciRx_respF_decCtr ;

  // rule RL_wciRx_respF_incCtr
  assign CAN_FIRE_RL_wciRx_respF_incCtr =
	     ((wciRx_respF_c_r == 2'd0) ?
		wciRx_respF_enqueueing$whas :
		wciRx_respF_c_r != 2'd1 || wciRx_respF_enqueueing$whas) &&
	     wciRx_respF_enqueueing$whas &&
	     !(wciRx_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wciRx_respF_incCtr = CAN_FIRE_RL_wciRx_respF_incCtr ;

  // rule RL_wciRx_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wciRx_reqF__updateLevelCounter =
	     (wci_rx_req[59:57] != 3'd0) != wciRx_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_wciRx_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wciRx_reqF__updateLevelCounter ;

  // inputs to muxes for submodule ports
  assign MUX_emac_rx_buffer_rInPacket$write_1__SEL_1 =
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ||
	     emac_rx_buffer_wBadFrame_wget__30_OR_emac_rx_b_ETC___d542 ;
  assign MUX_wciRx_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wciRx_ctl_op_complete && wciRx_illegalEdge ;
  assign MUX_wciTx_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wciTx_ctl_op_complete && wciTx_illegalEdge ;
  assign MUX_wciTx_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wciTx_respF_incCtr && wciTx_respF_c_r == 2'd0 ;
  assign MUX_wciTx_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wciTx_respF_incCtr && wciTx_respF_c_r == 2'd1 ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3 =
	     emac_rx_buffer_rWrCurrPtr - 12'd1 ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1 =
	     { 2'd1, emac_mac$EMACCLIENTRXD } ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2 =
	     { 2'd0, emac_mac$EMACCLIENTRXD } ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3 =
	     { 2'd2, emac_rx_buffer_rData_D1 } ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1,
	       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2,
	       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_1 =
	     emac_rx_buffer_rRdCurrPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_2 =
	     emac_rx_buffer_rRdStartPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rRdPackets_rsCounter$write_1__VAL_2 =
	     (~emac_rx_buffer_rRdPackets_rsCounter[x__h22595[2:0]]) ?
	       emac_rx_buffer_rRdPackets_rsCounter | x__h22059 :
	       emac_rx_buffer_rRdPackets_rsCounter & y__h22623 ;
  assign MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_1 =
	     emac_rx_buffer_rWrCurrPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_2 =
	     emac_rx_buffer_rWrStartPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rWrPackets_rsCounter$write_1__VAL_2 =
	     (~emac_rx_buffer_rWrPackets_rsCounter[x__h16276[2:0]]) ?
	       emac_rx_buffer_rWrPackets_rsCounter | x__h15740 :
	       emac_rx_buffer_rWrPackets_rsCounter & y__h16304 ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3,
	       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4,
	       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_1 =
	     emac_tx_buffer_rRdCurrPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3 =
	     emac_tx_buffer_rRdStartPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rRdPackets_rsCounter$write_1__VAL_2 =
	     (~emac_tx_buffer_rRdPackets_rsCounter[x__h32963[2:0]]) ?
	       emac_tx_buffer_rRdPackets_rsCounter | x__h32427 :
	       emac_tx_buffer_rRdPackets_rsCounter & y__h32991 ;
  assign MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_1 =
	     emac_tx_buffer_rWrCurrPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_2 =
	     emac_tx_buffer_rWrStartPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rWrPackets_rsCounter$write_1__VAL_2 =
	     (~emac_tx_buffer_rWrPackets_rsCounter[x__h26496[2:0]]) ?
	       emac_tx_buffer_rWrPackets_rsCounter | x__h25960 :
	       emac_tx_buffer_rWrPackets_rsCounter & y__h26524 ;
  assign MUX_wciRx_illegalEdge$write_1__VAL_2 =
	     wciRx_reqF$D_OUT[36:34] != 3'd4 &&
	     wciRx_reqF$D_OUT[36:34] != 3'd5 &&
	     wciRx_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wciRx_respF_c_r$write_1__VAL_1 = wciRx_respF_c_r - 2'd1 ;
  assign MUX_wciRx_respF_c_r$write_1__VAL_2 = wciRx_respF_c_r + 2'd1 ;
  assign MUX_wciRx_respF_x_wire$wset_1__VAL_1 =
	     wciRx_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wciTx_illegalEdge$write_1__VAL_2 =
	     wciTx_reqF$D_OUT[36:34] != 3'd4 &&
	     wciTx_reqF$D_OUT[36:34] != 3'd5 &&
	     wciTx_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wciTx_respF_c_r$write_1__VAL_1 = wciTx_respF_c_r - 2'd1 ;
  assign MUX_wciTx_respF_c_r$write_1__VAL_2 = wciTx_respF_c_r + 2'd1 ;
  assign MUX_wciTx_respF_q_0$write_1__VAL_2 =
	     wciTx_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wciTx_respF_q_0$write_1__VAL_1 =
	     (wciTx_respF_c_r == 2'd1) ?
	       MUX_wciTx_respF_q_0$write_1__VAL_2 :
	       wciTx_respF_q_1 ;
  assign MUX_wciTx_respF_q_1$write_1__VAL_1 =
	     (wciTx_respF_c_r == 2'd2) ?
	       MUX_wciTx_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wciRx_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wciRx_ctl_op_start &&
	     (wciRx_reqF$D_OUT[36:34] == 3'd0 && wciRx_cState != 3'd0 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd1 && wciRx_cState != 3'd1 &&
	      wciRx_cState != 3'd3 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd2 && wciRx_cState != 3'd2 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd3 && wciRx_cState != 3'd3 &&
	      wciRx_cState != 3'd2 &&
	      wciRx_cState != 3'd1 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd4 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd5 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd6 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wciRx_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wciRx_respF_incCtr && wciRx_respF_c_r == 2'd0 ;
  assign MUX_wciRx_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wciRx_respF_incCtr && wciRx_respF_c_r == 2'd1 ;
  assign MUX_wciTx_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wciTx_ctl_op_start &&
	     (wciTx_reqF$D_OUT[36:34] == 3'd0 && wciTx_cState != 3'd0 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd1 && wciTx_cState != 3'd1 &&
	      wciTx_cState != 3'd3 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd2 && wciTx_cState != 3'd2 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd3 && wciTx_cState != 3'd3 &&
	      wciTx_cState != 3'd2 &&
	      wciTx_cState != 3'd1 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd4 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd5 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd6 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wciRx_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h35609 } ;
  always@(WILL_FIRE_RL_wciRx_ctl_op_complete or
	  MUX_wciRx_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wciRx_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciRx_ctl_op_complete:
	  MUX_wciRx_respF_q_0$write_1__VAL_1 =
	      MUX_wciRx_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wciRx_respF_q_0$write_1__VAL_1 =
	      MUX_wciRx_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wciRx_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_wciRx_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wciRx_respF_q_0$write_1__VAL_2 =
	     (wciRx_respF_c_r == 2'd1) ?
	       MUX_wciRx_respF_q_0$write_1__VAL_1 :
	       wciRx_respF_q_1 ;
  assign MUX_wciRx_respF_q_1$write_1__VAL_2 =
	     (wciRx_respF_c_r == 2'd2) ?
	       MUX_wciRx_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6,
	       emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[7:0] } ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[7:0] } ;
  assign MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd0 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd1) ;
  assign MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__VAL_1 =
	     { 1'd1,
	       CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10,
	       emac_rx_buffer_fifoDeq_rw_enq$wget[7:0] } ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     { 3'd1,
	       IF_emac_rx_buffer_fifoDeq_rw_enq_whas__2_THEN__ETC___d1280,
	       1'd0,
	       x_burstLength__h36435,
	       x_data__h36436,
	       12'd3840 } ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_emac_tx_buffer_memBuffer_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;
  assign MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__VAL_1 =
	     { 1'd1,
	       CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11,
	       emac_tx_buffer_fifoEnq_rw_enq$wget[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1 =
	     { IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1483 ?
		 2'd0 :
		 (IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1484 ?
		    2'd1 :
		    2'd2),
	       CAN_FIRE_RL_tx_data ?
		 emac_tx_buffer_fifoEnq_rw_enq$wget[7:0] :
		 emac_tx_buffer_fifoEnq_taggedReg[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13,
	       emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15,
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_3 =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;
  assign MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	     2'd1 ;
  assign MUX_emac_tx_buffer_rAcked$write_1__SEL_1 =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ;

  // inlined wires
  assign wciRx_wciReq$wget = wci_rx_req ;
  assign wciRx_wciReq$whas = 1'd1 ;
  assign wciRx_reqF_r_enq$whas = CAN_FIRE_RL_wciRx_reqF_enq ;
  assign wciRx_reqF_r_clr$whas = 1'b0 ;
  assign wciRx_respF_dequeueing$whas = wciRx_respF_c_r != 2'd0 ;
  assign wciRx_wEdge$wget = wciRx_reqF$D_OUT[36:34] ;
  assign wciRx_sThreadBusy_pw$whas = 1'b0 ;
  assign wciRx_sFlagReg_1$wget = 1'b0 ;
  assign wciRx_sFlagReg_1$whas = 1'b0 ;
  assign wciRx_wci_cfwr_pw$whas =
	     wciRx_reqF$EMPTY_N && wciRx_reqF$D_OUT[56] &&
	     wciRx_reqF$D_OUT[59:57] == 3'd1 ;
  assign wciRx_wci_cfrd_pw$whas =
	     wciRx_reqF$EMPTY_N && wciRx_reqF$D_OUT[56] &&
	     wciRx_reqF$D_OUT[59:57] == 3'd2 ;
  assign wciRx_wci_ctrl_pw$whas =
	     wciRx_reqF$EMPTY_N && !wciRx_reqF$D_OUT[56] &&
	     wciRx_reqF$D_OUT[59:57] == 3'd2 ;
  assign wciRx_reqF_r_deq$whas =
	     WILL_FIRE_RL_wciRx_ctl_op_start || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wciRx_respF_enqueueing$whas =
	     WILL_FIRE_RL_wciRx_ctl_op_complete || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wciRx_respF_x_wire$whas = wciRx_respF_enqueueing$whas ;
  assign wciRx_wEdge$whas = WILL_FIRE_RL_wciRx_ctl_op_start ;
  assign wciRx_ctlAckReg_1$wget = 1'd1 ;
  assign wciRx_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wciTx_wciReq$wget = wci_tx_req ;
  assign wciTx_respF_x_wire$wget = MUX_wciTx_respF_q_0$write_1__VAL_2 ;
  assign wciTx_reqF_r_enq$whas = CAN_FIRE_RL_wciTx_reqF_enq ;
  assign wciTx_wciReq$whas = 1'd1 ;
  assign wciTx_reqF_r_clr$whas = 1'b0 ;
  assign wciTx_respF_enqueueing$whas = CAN_FIRE_RL_wciTx_ctl_op_complete ;
  assign wciTx_respF_x_wire$whas = CAN_FIRE_RL_wciTx_ctl_op_complete ;
  assign wciTx_respF_dequeueing$whas = wciTx_respF_c_r != 2'd0 ;
  assign wciTx_wEdge$wget = wciTx_reqF$D_OUT[36:34] ;
  assign wciTx_sThreadBusy_pw$whas = 1'b0 ;
  assign wciTx_sFlagReg_1$wget = 1'b0 ;
  assign wciTx_sFlagReg_1$whas = 1'b0 ;
  assign wciTx_wci_cfwr_pw$whas =
	     wciTx_reqF$EMPTY_N && wciTx_reqF$D_OUT[56] &&
	     wciTx_reqF$D_OUT[59:57] == 3'd1 ;
  assign wciTx_wci_cfrd_pw$whas =
	     wciTx_reqF$EMPTY_N && wciTx_reqF$D_OUT[56] &&
	     wciTx_reqF$D_OUT[59:57] == 3'd2 ;
  assign wciTx_ctlAckReg_1$wget = 1'b0 ;
  assign wciTx_wci_ctrl_pw$whas =
	     wciTx_reqF$EMPTY_N && !wciTx_reqF$D_OUT[56] &&
	     wciTx_reqF$D_OUT[59:57] == 3'd2 ;
  assign wciTx_reqF_r_deq$whas = WILL_FIRE_RL_wciTx_ctl_op_start ;
  assign wciTx_wEdge$whas = WILL_FIRE_RL_wciTx_ctl_op_start ;
  assign wciTx_ctlAckReg_1$whas = 1'b0 ;
  assign wti_wtiReq$wget = 67'h0 ;
  assign wti_wtiReq$whas = 1'b0 ;
  assign wsiM_reqFifo_dequeueing$whas = CAN_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas = wsiM1_SThreadBusy ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = CAN_FIRE_RL_wsi_operate ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas = wsiM1_SReset_n ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_wsiReq$wget =
	     { wsiS1_MCmd,
	       wsiS1_MReqLast,
	       wsiS1_MBurstPrecise,
	       wsiS1_MBurstLength,
	       wsiS1_MData,
	       wsiS1_MByteEn,
	       wsiS1_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_reqFifo_r_enq$whas = CAN_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_r_deq$whas = CAN_FIRE_RL_tx_data ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = CAN_FIRE_RL_wsi_operate ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsiS1_MReset_n ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;
  assign wciRx_respF_x_wire$wget = MUX_wciRx_respF_q_0$write_1__VAL_1 ;
  assign emac_rx_buffer_wData$wget = emac_mac$EMACCLIENTRXD ;
  assign emac_rx_buffer_wData$whas = 1'd1 ;
  assign emac_rx_buffer_wDataValid$wget = emac_mac$EMACCLIENTRXDVLD ;
  assign emac_rx_buffer_wDataValid$whas = 1'd1 ;
  assign emac_rx_buffer_wGoodFrame$wget = emac_mac$EMACCLIENTRXGOODFRAME ;
  assign emac_rx_buffer_wGoodFrame$whas = 1'd1 ;
  assign emac_rx_buffer_wBadFrame$wget = emac_mac$EMACCLIENTRXBADFRAME ;
  assign emac_rx_buffer_wBadFrame$whas = 1'd1 ;
  assign emac_rx_buffer_wFrameDrop$wget = emac_mac$EMACCLIENTRXFRAMEDROP ;
  assign emac_rx_buffer_wFrameDrop$whas = 1'd1 ;
  assign emac_rx_buffer_pwEnqueue$whas = 1'b0 ;
  assign emac_rx_buffer_rWrPackets_pwIncrement$whas =
	     CAN_FIRE_RL_emac_rx_buffer_commit_packet ;
  assign emac_rx_buffer_rWrPackets_pwDecrement$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget =
	     { CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5,
	       emac_rx_buffer_memBuffer_memory$DOA[7:0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_moveToOutFIFO &&
	     emac_rx_buffer_memBuffer_serverAdapterA_s1[0] ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wget =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ?
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 :
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$whas =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas =
	     1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1_1$wget = 2'd2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget =
	     { CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7,
	       emac_rx_buffer_memBuffer_memory$DOB[7:0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_moveToOutFIFO &&
	     emac_rx_buffer_memBuffer_serverAdapterB_s1[0] ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ?
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 :
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$whas =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq ;
  assign wsiM_reqFifo_enqueueing$whas = CAN_FIRE_RL_rx_data ;
  assign wsiM_reqFifo_x_wire$whas = CAN_FIRE_RL_rx_data ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h19718[1] || ab__h19718[0]) ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$whas =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h19718[1] || ab__h19718[0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways ;
  assign emac_rx_buffer_fifoDeq_rw_enq$wget =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[7:0] } ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign emac_rx_buffer_fifoDeq_rw_enq$whas =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;
  assign emac_rx_buffer_fifoDeq_pw_deq$whas = CAN_FIRE_RL_rx_data ;
  assign emac_rx_buffer_rRdPackets_pwIncrement$whas =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;
  assign emac_rx_buffer_rRdPackets_pwDecrement$whas = 1'b0 ;
  assign emac_tx_buffer_fifoEnq_rw_enq$wget =
	     { 2'd0, wsiS_reqFifo$D_OUT[19:12] } ;
  assign emac_tx_buffer_fifoEnq_rw_enq$whas = CAN_FIRE_RL_tx_data ;
  assign emac_tx_buffer_fifoEnq_pw_deq$whas =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;
  assign emac_tx_buffer_rWrPackets_pwIncrement$whas =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;
  assign emac_tx_buffer_rWrPackets_pwDecrement$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget =
	     { CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12,
	       emac_tx_buffer_memBuffer_memory$DOA[7:0] } ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_moveToOutFIFO &&
	     emac_tx_buffer_memBuffer_serverAdapterA_s1[0] ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wget =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ?
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 :
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$whas =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_setFirstEnq ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas =
	     1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1_1$wget = 2'd2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget =
	     { CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14,
	       emac_tx_buffer_memBuffer_memory$DOB[7:0] } ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_moveToOutFIFO &&
	     emac_tx_buffer_memBuffer_serverAdapterB_s1[0] ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ?
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 :
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_setFirstEnq ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h29885[1] || ab__h29885[0]) ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h29885[1] || ab__h29885[0] } ;
  assign emac_tx_buffer_wDataOut$wget =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[7:0] ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways ;
  assign emac_tx_buffer_wDataOut$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_tx_buffer_wDataValid$wget = 1'd1 ;
  assign emac_tx_buffer_wDataValid$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_tx_buffer_wAck$wget = emac_mac$EMACCLIENTTXACK ;
  assign emac_tx_buffer_wAck$whas = 1'd1 ;
  assign emac_tx_buffer_wCollision$wget = emac_mac$EMACCLIENTTXCOLLISION ;
  assign emac_tx_buffer_wCollision$whas = 1'd1 ;
  assign emac_tx_buffer_wRetransmit$wget = emac_mac$EMACCLIENTTXRETRANSMIT ;
  assign emac_tx_buffer_wRetransmit$whas = 1'd1 ;
  assign emac_tx_buffer_rRdPackets_pwIncrement$whas =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;
  assign emac_tx_buffer_rRdPackets_pwDecrement$whas = 1'b0 ;
  assign wsi_Es_mCmd_w$wget = wsiS1_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mReqLast_w$whas = wsiS1_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsiS1_MBurstPrecise ;
  assign wsi_Es_mBurstLength_w$wget = wsiS1_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsiS1_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = wsiS1_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsiS1_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;

  // register emac_rx_buffer_fifoDeq_taggedReg
  assign emac_rx_buffer_fifoDeq_taggedReg$D_IN =
	     WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq ?
	       MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__VAL_1 :
	       11'd682 ;
  assign emac_rx_buffer_fifoDeq_taggedReg$EN =
	     WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq ||
	     WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_deq ;

  // register emac_rx_buffer_memBuffer_serverAdapterA_cnt
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt$D_IN =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt$EN = 1'b0 ;

  // register emac_rx_buffer_memBuffer_serverAdapterA_s1
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways,
	       1'b0 } ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1$EN = 1'd1 ;

  // register emac_rx_buffer_memBuffer_serverAdapterB_cnt
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt$D_IN =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt_06_ETC___d687 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_cnt_finalAdd ;

  // register emac_rx_buffer_memBuffer_serverAdapterB_s1
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways &&
	       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget[1],
	       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget[0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1$EN = 1'd1 ;

  // register emac_rx_buffer_rData_D1
  assign emac_rx_buffer_rData_D1$D_IN = emac_mac$EMACCLIENTRXD ;
  assign emac_rx_buffer_rData_D1$EN =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ;

  // register emac_rx_buffer_rInPacket
  assign emac_rx_buffer_rInPacket$D_IN =
	     !MUX_emac_rx_buffer_rInPacket$write_1__SEL_1 ;
  assign emac_rx_buffer_rInPacket$EN =
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ||
	     emac_rx_buffer_wBadFrame_wget__30_OR_emac_rx_b_ETC___d542 ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ;

  // register emac_rx_buffer_rOutPacket
  assign emac_rx_buffer_rOutPacket$D_IN =
	     !MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;
  assign emac_rx_buffer_rOutPacket$EN =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;

  // register emac_rx_buffer_rRdCurrPtr
  assign emac_rx_buffer_rRdCurrPtr$D_IN =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ?
	       MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_1 :
	       MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_2 ;
  assign emac_rx_buffer_rRdCurrPtr$EN =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd0 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd1) ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;

  // register emac_rx_buffer_rRdPackets_rdCounter
  assign emac_rx_buffer_rRdPackets_rdCounter$D_IN =
	     emac_rx_buffer_rRdPackets_rdCounterPre ;
  assign emac_rx_buffer_rRdPackets_rdCounter$EN = 1'd1 ;

  // register emac_rx_buffer_rRdPackets_rdCounterPre
  assign emac_rx_buffer_rRdPackets_rdCounterPre$D_IN =
	     emac_rx_buffer_rRdPackets_wdCounterCrossing$WGET ;
  assign emac_rx_buffer_rRdPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_rx_buffer_rRdPackets_rsCounter
  assign emac_rx_buffer_rRdPackets_rsCounter$D_IN =
	     MUX_emac_rx_buffer_rRdPackets_rsCounter$write_1__VAL_2 ;
  assign emac_rx_buffer_rRdPackets_rsCounter$EN =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;

  // register emac_rx_buffer_rRdStartPtr
  assign emac_rx_buffer_rRdStartPtr$D_IN = emac_rx_buffer_rRdCurrPtr ;
  assign emac_rx_buffer_rRdStartPtr$EN =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;

  // register emac_rx_buffer_rWrCurrPtr
  assign emac_rx_buffer_rWrCurrPtr$D_IN =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ?
	       MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_1 :
	       MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_2 ;
  assign emac_rx_buffer_rWrCurrPtr$EN =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ;

  // register emac_rx_buffer_rWrPackets_rdCounter
  assign emac_rx_buffer_rWrPackets_rdCounter$D_IN =
	     emac_rx_buffer_rWrPackets_rdCounterPre ;
  assign emac_rx_buffer_rWrPackets_rdCounter$EN = 1'd1 ;

  // register emac_rx_buffer_rWrPackets_rdCounterPre
  assign emac_rx_buffer_rWrPackets_rdCounterPre$D_IN =
	     emac_rx_buffer_rWrPackets_wdCounterCrossing$WGET ;
  assign emac_rx_buffer_rWrPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_rx_buffer_rWrPackets_rsCounter
  assign emac_rx_buffer_rWrPackets_rsCounter$D_IN =
	     MUX_emac_rx_buffer_rWrPackets_rsCounter$write_1__VAL_2 ;
  assign emac_rx_buffer_rWrPackets_rsCounter$EN =
	     CAN_FIRE_RL_emac_rx_buffer_commit_packet ;

  // register emac_rx_buffer_rWrStartPtr
  assign emac_rx_buffer_rWrStartPtr$D_IN = emac_rx_buffer_rWrCurrPtr ;
  assign emac_rx_buffer_rWrStartPtr$EN =
	     CAN_FIRE_RL_emac_rx_buffer_commit_packet ;

  // register emac_tx_buffer_fifoEnq_taggedReg
  assign emac_tx_buffer_fifoEnq_taggedReg$D_IN =
	     WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq ?
	       MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__VAL_1 :
	       11'd682 ;
  assign emac_tx_buffer_fifoEnq_taggedReg$EN =
	     WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq ||
	     WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_deq ;

  // register emac_tx_buffer_memBuffer_serverAdapterA_cnt
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt$D_IN =
	     emac_tx_buffer_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt$EN = 1'b0 ;

  // register emac_tx_buffer_memBuffer_serverAdapterA_s1
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_stageReadResponseAlways,
	       1'b0 } ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1$EN = 1'd1 ;

  // register emac_tx_buffer_memBuffer_serverAdapterB_cnt
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt$D_IN =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d319 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_cnt_finalAdd ;

  // register emac_tx_buffer_memBuffer_serverAdapterB_s1
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_stageReadResponseAlways &&
	       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget[1],
	       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget[0] } ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1$EN = 1'd1 ;

  // register emac_tx_buffer_rAcked
  assign emac_tx_buffer_rAcked$D_IN =
	     !MUX_emac_tx_buffer_rAcked$write_1__SEL_1 &&
	     !WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;
  assign emac_tx_buffer_rAcked$EN =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ;

  // register emac_tx_buffer_rIfgDelay
  assign emac_tx_buffer_rIfgDelay$D_IN = 8'h0 ;
  assign emac_tx_buffer_rIfgDelay$EN = 1'b0 ;

  // register emac_tx_buffer_rOutPacket
  assign emac_tx_buffer_rOutPacket$D_IN =
	     !MUX_emac_tx_buffer_rAcked$write_1__SEL_1 &&
	     !WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;
  assign emac_tx_buffer_rOutPacket$EN =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ;

  // register emac_tx_buffer_rRdCurrPtr
  always@(MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 or
	  MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_1 or
	  WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack or
	  WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat or
	  MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1:
	  emac_tx_buffer_rRdCurrPtr$D_IN =
	      MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_1;
      WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack:
	  emac_tx_buffer_rRdCurrPtr$D_IN =
	      MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_1;
      WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat:
	  emac_tx_buffer_rRdCurrPtr$D_IN =
	      MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3;
      default: emac_tx_buffer_rRdCurrPtr$D_IN =
		   12'b101010101010 /* unspecified value */ ;
    endcase
  end
  assign emac_tx_buffer_rRdCurrPtr$EN =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ;

  // register emac_tx_buffer_rRdPackets_rdCounter
  assign emac_tx_buffer_rRdPackets_rdCounter$D_IN =
	     emac_tx_buffer_rRdPackets_rdCounterPre ;
  assign emac_tx_buffer_rRdPackets_rdCounter$EN = 1'd1 ;

  // register emac_tx_buffer_rRdPackets_rdCounterPre
  assign emac_tx_buffer_rRdPackets_rdCounterPre$D_IN =
	     emac_tx_buffer_rRdPackets_wdCounterCrossing$WGET ;
  assign emac_tx_buffer_rRdPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_tx_buffer_rRdPackets_rsCounter
  assign emac_tx_buffer_rRdPackets_rsCounter$D_IN =
	     MUX_emac_tx_buffer_rRdPackets_rsCounter$write_1__VAL_2 ;
  assign emac_tx_buffer_rRdPackets_rsCounter$EN =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;

  // register emac_tx_buffer_rRdStartPtr
  assign emac_tx_buffer_rRdStartPtr$D_IN = emac_tx_buffer_rRdCurrPtr ;
  assign emac_tx_buffer_rRdStartPtr$EN =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;

  // register emac_tx_buffer_rUnderrun
  assign emac_tx_buffer_rUnderrun$D_IN =
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;
  assign emac_tx_buffer_rUnderrun$EN =
	     emac_tx_buffer_rUnderrun ||
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;

  // register emac_tx_buffer_rWrCurrPtr
  assign emac_tx_buffer_rWrCurrPtr$D_IN =
	     MUX_emac_tx_buffer_memBuffer_memory$a_put_1__SEL_1 ?
	       MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_1 :
	       MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_2 ;
  assign emac_tx_buffer_rWrCurrPtr$EN =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ;

  // register emac_tx_buffer_rWrPackets_rdCounter
  assign emac_tx_buffer_rWrPackets_rdCounter$D_IN =
	     emac_tx_buffer_rWrPackets_rdCounterPre ;
  assign emac_tx_buffer_rWrPackets_rdCounter$EN = 1'd1 ;

  // register emac_tx_buffer_rWrPackets_rdCounterPre
  assign emac_tx_buffer_rWrPackets_rdCounterPre$D_IN =
	     emac_tx_buffer_rWrPackets_wdCounterCrossing$WGET ;
  assign emac_tx_buffer_rWrPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_tx_buffer_rWrPackets_rsCounter
  assign emac_tx_buffer_rWrPackets_rsCounter$D_IN =
	     MUX_emac_tx_buffer_rWrPackets_rsCounter$write_1__VAL_2 ;
  assign emac_tx_buffer_rWrPackets_rsCounter$EN =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;

  // register emac_tx_buffer_rWrStartPtr
  assign emac_tx_buffer_rWrStartPtr$D_IN =
	     MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_1 ;
  assign emac_tx_buffer_rWrStartPtr$EN =
	     CAN_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;

  // register gbeControl
  assign gbeControl$D_IN = wciRx_reqF$D_OUT[31:0] ;
  assign gbeControl$EN =
	     WILL_FIRE_RL_wci_cfwr && wciRx_reqF$D_OUT[39:32] == 8'h04 ;

  // register wciRx_cEdge
  assign wciRx_cEdge$D_IN = wciRx_reqF$D_OUT[36:34] ;
  assign wciRx_cEdge$EN = WILL_FIRE_RL_wciRx_ctl_op_start ;

  // register wciRx_cState
  assign wciRx_cState$D_IN = wciRx_nState ;
  assign wciRx_cState$EN =
	     WILL_FIRE_RL_wciRx_ctl_op_complete && !wciRx_illegalEdge ;

  // register wciRx_ctlAckReg
  assign wciRx_ctlAckReg$D_IN = wciRx_ctlAckReg_1$whas ;
  assign wciRx_ctlAckReg$EN = 1'd1 ;

  // register wciRx_ctlOpActive
  assign wciRx_ctlOpActive$D_IN = !WILL_FIRE_RL_wciRx_ctl_op_complete ;
  assign wciRx_ctlOpActive$EN =
	     WILL_FIRE_RL_wciRx_ctl_op_complete ||
	     WILL_FIRE_RL_wciRx_ctl_op_start ;

  // register wciRx_illegalEdge
  assign wciRx_illegalEdge$D_IN =
	     !MUX_wciRx_illegalEdge$write_1__SEL_1 &&
	     MUX_wciRx_illegalEdge$write_1__VAL_2 ;
  assign wciRx_illegalEdge$EN =
	     WILL_FIRE_RL_wciRx_ctl_op_complete && wciRx_illegalEdge ||
	     MUX_wciRx_illegalEdge$write_1__SEL_2 ;

  // register wciRx_nState
  always@(wciRx_reqF$D_OUT)
  begin
    case (wciRx_reqF$D_OUT[36:34])
      3'd0: wciRx_nState$D_IN = 3'd1;
      3'd1: wciRx_nState$D_IN = 3'd2;
      3'd2: wciRx_nState$D_IN = 3'd3;
      default: wciRx_nState$D_IN = 3'd0;
    endcase
  end
  assign wciRx_nState$EN =
	     WILL_FIRE_RL_wciRx_ctl_op_start &&
	     (wciRx_reqF$D_OUT[36:34] == 3'd0 && wciRx_cState == 3'd0 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd1 &&
	      (wciRx_cState == 3'd1 || wciRx_cState == 3'd3) ||
	      wciRx_reqF$D_OUT[36:34] == 3'd2 && wciRx_cState == 3'd2 ||
	      wciRx_reqF$D_OUT[36:34] == 3'd3 &&
	      (wciRx_cState == 3'd3 || wciRx_cState == 3'd2 ||
	       wciRx_cState == 3'd1)) ;

  // register wciRx_reqF_countReg
  assign wciRx_reqF_countReg$D_IN =
	     (wci_rx_req[59:57] != 3'd0) ?
	       wciRx_reqF_countReg + 2'd1 :
	       wciRx_reqF_countReg - 2'd1 ;
  assign wciRx_reqF_countReg$EN = CAN_FIRE_RL_wciRx_reqF__updateLevelCounter ;

  // register wciRx_respF_c_r
  assign wciRx_respF_c_r$D_IN =
	     WILL_FIRE_RL_wciRx_respF_decCtr ?
	       MUX_wciRx_respF_c_r$write_1__VAL_1 :
	       MUX_wciRx_respF_c_r$write_1__VAL_2 ;
  assign wciRx_respF_c_r$EN =
	     WILL_FIRE_RL_wciRx_respF_decCtr ||
	     WILL_FIRE_RL_wciRx_respF_incCtr ;

  // register wciRx_respF_q_0
  always@(MUX_wciRx_respF_q_0$write_1__SEL_1 or
	  MUX_wciRx_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wciRx_respF_both or
	  MUX_wciRx_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wciRx_respF_decCtr or wciRx_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wciRx_respF_q_0$write_1__SEL_1:
	  wciRx_respF_q_0$D_IN = MUX_wciRx_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wciRx_respF_both:
	  wciRx_respF_q_0$D_IN = MUX_wciRx_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wciRx_respF_decCtr: wciRx_respF_q_0$D_IN = wciRx_respF_q_1;
      default: wciRx_respF_q_0$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciRx_respF_q_0$EN =
	     WILL_FIRE_RL_wciRx_respF_incCtr && wciRx_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wciRx_respF_both ||
	     WILL_FIRE_RL_wciRx_respF_decCtr ;

  // register wciRx_respF_q_1
  always@(MUX_wciRx_respF_q_1$write_1__SEL_1 or
	  MUX_wciRx_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wciRx_respF_both or
	  MUX_wciRx_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wciRx_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wciRx_respF_q_1$write_1__SEL_1:
	  wciRx_respF_q_1$D_IN = MUX_wciRx_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wciRx_respF_both:
	  wciRx_respF_q_1$D_IN = MUX_wciRx_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wciRx_respF_decCtr: wciRx_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wciRx_respF_q_1$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciRx_respF_q_1$EN =
	     WILL_FIRE_RL_wciRx_respF_incCtr && wciRx_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wciRx_respF_both ||
	     WILL_FIRE_RL_wciRx_respF_decCtr ;

  // register wciRx_sFlagReg
  assign wciRx_sFlagReg$D_IN = 1'b0 ;
  assign wciRx_sFlagReg$EN = 1'd1 ;

  // register wciRx_sThreadBusy_d
  assign wciRx_sThreadBusy_d$D_IN = 1'b0 ;
  assign wciRx_sThreadBusy_d$EN = 1'd1 ;

  // register wciTx_cEdge
  assign wciTx_cEdge$D_IN = wciTx_reqF$D_OUT[36:34] ;
  assign wciTx_cEdge$EN = WILL_FIRE_RL_wciTx_ctl_op_start ;

  // register wciTx_cState
  assign wciTx_cState$D_IN = wciTx_nState ;
  assign wciTx_cState$EN =
	     WILL_FIRE_RL_wciTx_ctl_op_complete && !wciTx_illegalEdge ;

  // register wciTx_ctlAckReg
  assign wciTx_ctlAckReg$D_IN = 1'b0 ;
  assign wciTx_ctlAckReg$EN = 1'd1 ;

  // register wciTx_ctlOpActive
  assign wciTx_ctlOpActive$D_IN = !WILL_FIRE_RL_wciTx_ctl_op_complete ;
  assign wciTx_ctlOpActive$EN =
	     WILL_FIRE_RL_wciTx_ctl_op_complete ||
	     WILL_FIRE_RL_wciTx_ctl_op_start ;

  // register wciTx_illegalEdge
  assign wciTx_illegalEdge$D_IN =
	     !MUX_wciTx_illegalEdge$write_1__SEL_1 &&
	     MUX_wciTx_illegalEdge$write_1__VAL_2 ;
  assign wciTx_illegalEdge$EN =
	     WILL_FIRE_RL_wciTx_ctl_op_complete && wciTx_illegalEdge ||
	     MUX_wciTx_illegalEdge$write_1__SEL_2 ;

  // register wciTx_nState
  always@(wciTx_reqF$D_OUT)
  begin
    case (wciTx_reqF$D_OUT[36:34])
      3'd0: wciTx_nState$D_IN = 3'd1;
      3'd1: wciTx_nState$D_IN = 3'd2;
      3'd2: wciTx_nState$D_IN = 3'd3;
      default: wciTx_nState$D_IN = 3'd0;
    endcase
  end
  assign wciTx_nState$EN =
	     WILL_FIRE_RL_wciTx_ctl_op_start &&
	     (wciTx_reqF$D_OUT[36:34] == 3'd0 && wciTx_cState == 3'd0 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd1 &&
	      (wciTx_cState == 3'd1 || wciTx_cState == 3'd3) ||
	      wciTx_reqF$D_OUT[36:34] == 3'd2 && wciTx_cState == 3'd2 ||
	      wciTx_reqF$D_OUT[36:34] == 3'd3 &&
	      (wciTx_cState == 3'd3 || wciTx_cState == 3'd2 ||
	       wciTx_cState == 3'd1)) ;

  // register wciTx_reqF_countReg
  assign wciTx_reqF_countReg$D_IN =
	     (wci_tx_req[59:57] != 3'd0) ?
	       wciTx_reqF_countReg + 2'd1 :
	       wciTx_reqF_countReg - 2'd1 ;
  assign wciTx_reqF_countReg$EN = CAN_FIRE_RL_wciTx_reqF__updateLevelCounter ;

  // register wciTx_respF_c_r
  assign wciTx_respF_c_r$D_IN =
	     WILL_FIRE_RL_wciTx_respF_decCtr ?
	       MUX_wciTx_respF_c_r$write_1__VAL_1 :
	       MUX_wciTx_respF_c_r$write_1__VAL_2 ;
  assign wciTx_respF_c_r$EN =
	     WILL_FIRE_RL_wciTx_respF_decCtr ||
	     WILL_FIRE_RL_wciTx_respF_incCtr ;

  // register wciTx_respF_q_0
  always@(WILL_FIRE_RL_wciTx_respF_both or
	  MUX_wciTx_respF_q_0$write_1__VAL_1 or
	  MUX_wciTx_respF_q_0$write_1__SEL_2 or
	  MUX_wciTx_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wciTx_respF_decCtr or wciTx_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciTx_respF_both:
	  wciTx_respF_q_0$D_IN = MUX_wciTx_respF_q_0$write_1__VAL_1;
      MUX_wciTx_respF_q_0$write_1__SEL_2:
	  wciTx_respF_q_0$D_IN = MUX_wciTx_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wciTx_respF_decCtr: wciTx_respF_q_0$D_IN = wciTx_respF_q_1;
      default: wciTx_respF_q_0$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciTx_respF_q_0$EN =
	     WILL_FIRE_RL_wciTx_respF_both ||
	     WILL_FIRE_RL_wciTx_respF_incCtr && wciTx_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wciTx_respF_decCtr ;

  // register wciTx_respF_q_1
  always@(WILL_FIRE_RL_wciTx_respF_both or
	  MUX_wciTx_respF_q_1$write_1__VAL_1 or
	  MUX_wciTx_respF_q_1$write_1__SEL_2 or
	  MUX_wciTx_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wciTx_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciTx_respF_both:
	  wciTx_respF_q_1$D_IN = MUX_wciTx_respF_q_1$write_1__VAL_1;
      MUX_wciTx_respF_q_1$write_1__SEL_2:
	  wciTx_respF_q_1$D_IN = MUX_wciTx_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wciTx_respF_decCtr: wciTx_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wciTx_respF_q_1$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciTx_respF_q_1$EN =
	     WILL_FIRE_RL_wciTx_respF_both ||
	     WILL_FIRE_RL_wciTx_respF_incCtr && wciTx_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wciTx_respF_decCtr ;

  // register wciTx_sFlagReg
  assign wciTx_sFlagReg$D_IN = 1'b0 ;
  assign wciTx_sFlagReg$EN = 1'd1 ;

  // register wciTx_sThreadBusy_d
  assign wciTx_sThreadBusy_d$D_IN = 1'b0 ;
  assign wciTx_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      wsiM_burstKind == 2'd1 && wsiM_reqFifo_q_0[57] ||
	      wsiM_burstKind == 2'd2 && wsiM_reqFifo_q_0[55:44] == 12'd1) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[55:44] == 12'd1 ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = CAN_FIRE_RL_wsi_operate ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsiM1_SReset_n ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ;

  // register wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_0$write_1__SEL_2:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsiM1_SThreadBusy ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset$VAL,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN = CAN_FIRE_RL_wsiM_inc_tBusyCount ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     (wsiS_burstKind == 2'd0 ||
	      wsiS_burstKind == 2'd1 && wsiS_wsiReq$wget[57] ||
	      wsiS_burstKind == 2'd2 && wsiS_wsiReq$wget[55:44] == 12'd1) ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[55:44] == 12'd1 ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = CAN_FIRE_RL_wsi_operate ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS1_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     CAN_FIRE_RL_wsiS_reqFifo_enq ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset$VAL,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       NOT_wsiS_reqFifo_countReg_65_ULE_1_66___d867 ||
	       wsiS_isReset$VAL ||
	       !wsiS_operateD ||
	       !wsiS_peerIsReady,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = CAN_FIRE_RL_wsiS_reqFifo_enq ;

  // register wti_nowReq
  assign wti_nowReq$D_IN = wti_s_req ;
  assign wti_nowReq$EN = 1'd1 ;

  // submodule emac_mac
  assign emac_mac$GMII_RX_ER = gmii_rx_er_i ;
  assign emac_mac$GMII_RX_DV = gmii_rx_dv_i ;
  assign emac_mac$GMII_RXD = gmii_rxd_i ;
  assign emac_mac$CLIENTEMACTXD =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ?
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[7:0] :
	       8'd0 ;
  assign emac_mac$CLIENTEMACTXDVLD =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_mac$CLIENTEMACTXFIRSTBYTE = 1'd0 ;
  assign emac_mac$CLIENTEMACTXIFGDELAY = emac_tx_buffer_rIfgDelay ;
  assign emac_mac$CLIENTEMACTXUNDERRUN = emac_tx_buffer_rUnderrun ;

  // submodule emac_rx_buffer_memBuffer_memory
  assign emac_rx_buffer_memBuffer_memory$WEA = 1'd1 ;
  always@(WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat or
	  emac_rx_buffer_rWrCurrPtr or
	  WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat or
	  emac_rx_buffer_rWrStartPtr or
	  WILL_FIRE_RL_emac_rx_buffer_commit_packet or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat:
	  emac_rx_buffer_memBuffer_memory$ADDRA = emac_rx_buffer_rWrCurrPtr;
      WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat:
	  emac_rx_buffer_memBuffer_memory$ADDRA = emac_rx_buffer_rWrStartPtr;
      WILL_FIRE_RL_emac_rx_buffer_commit_packet:
	  emac_rx_buffer_memBuffer_memory$ADDRA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3;
      default: emac_rx_buffer_memBuffer_memory$ADDRA =
		   12'b101010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1 or
	  WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2 or
	  WILL_FIRE_RL_emac_rx_buffer_commit_packet or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat:
	  emac_rx_buffer_memBuffer_memory$DIA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1;
      WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat:
	  emac_rx_buffer_memBuffer_memory$DIA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2;
      WILL_FIRE_RL_emac_rx_buffer_commit_packet:
	  emac_rx_buffer_memBuffer_memory$DIA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3;
      default: emac_rx_buffer_memBuffer_memory$DIA =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign emac_rx_buffer_memBuffer_memory$WEB = 1'd0 ;
  assign emac_rx_buffer_memBuffer_memory$ADDRB =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ?
	       emac_rx_buffer_rRdCurrPtr :
	       emac_rx_buffer_rRdStartPtr ;
  assign emac_rx_buffer_memBuffer_memory$DIB =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ?
	       10'b1010101010 /* unspecified value */  :
	       10'b1010101010 /* unspecified value */  ;
  assign emac_rx_buffer_memBuffer_memory$ENA =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ;
  assign emac_rx_buffer_memBuffer_memory$ENB =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd0 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd1) ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;

  // submodule emac_rx_buffer_memBuffer_serverAdapterA_outDataCore
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN =
	     MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_outData_enqOnly ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule emac_rx_buffer_memBuffer_serverAdapterB_outDataCore
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN =
	     MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_deqOnly ||
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqOnly ||
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule emac_rx_buffer_rRdPackets_wdCounterCrossing
  assign emac_rx_buffer_rRdPackets_wdCounterCrossing$WVAL =
	     emac_rx_buffer_rRdPackets_rsCounter ;

  // submodule emac_rx_buffer_rWrPackets_wdCounterCrossing
  assign emac_rx_buffer_rWrPackets_wdCounterCrossing$WVAL =
	     emac_rx_buffer_rWrPackets_rsCounter ;

  // submodule emac_tx_buffer_memBuffer_memory
  assign emac_tx_buffer_memBuffer_memory$WEA = 1'd1 ;
  assign emac_tx_buffer_memBuffer_memory$ADDRA =
	     MUX_emac_tx_buffer_memBuffer_memory$a_put_1__SEL_1 ?
	       emac_tx_buffer_rWrCurrPtr :
	       emac_tx_buffer_rWrStartPtr ;
  assign emac_tx_buffer_memBuffer_memory$DIA =
	     MUX_emac_tx_buffer_memBuffer_memory$a_put_1__SEL_1 ?
	       MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1 :
	       MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1 ;
  assign emac_tx_buffer_memBuffer_memory$WEB = 1'd0 ;
  assign emac_tx_buffer_memBuffer_memory$ADDRB =
	     (MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack) ?
	       emac_tx_buffer_rRdCurrPtr :
	       emac_tx_buffer_rRdStartPtr ;
  always@(MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack or
	  MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1:
	  emac_tx_buffer_memBuffer_memory$DIB =
	      10'b1010101010 /* unspecified value */ ;
      WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack:
	  emac_tx_buffer_memBuffer_memory$DIB =
	      10'b1010101010 /* unspecified value */ ;
      MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_3:
	  emac_tx_buffer_memBuffer_memory$DIB =
	      10'b1010101010 /* unspecified value */ ;
      default: emac_tx_buffer_memBuffer_memory$DIB =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign emac_tx_buffer_memBuffer_memory$ENA =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ;
  assign emac_tx_buffer_memBuffer_memory$ENB =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;

  // submodule emac_tx_buffer_memBuffer_serverAdapterA_outDataCore
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN =
	     MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_outData_enqOnly ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule emac_tx_buffer_memBuffer_serverAdapterB_outDataCore
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN =
	     MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_deqOnly ||
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqOnly ||
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule emac_tx_buffer_rRdPackets_wdCounterCrossing
  assign emac_tx_buffer_rRdPackets_wdCounterCrossing$WVAL =
	     emac_tx_buffer_rRdPackets_rsCounter ;

  // submodule emac_tx_buffer_rWrPackets_wdCounterCrossing
  assign emac_tx_buffer_rWrPackets_wdCounterCrossing$WVAL =
	     emac_tx_buffer_rWrPackets_rsCounter ;

  // submodule wciRx_reqF
  assign wciRx_reqF$D_IN = wci_rx_req ;
  assign wciRx_reqF$DEQ = wciRx_reqF_r_deq$whas ;
  assign wciRx_reqF$ENQ = CAN_FIRE_RL_wciRx_reqF_enq ;
  assign wciRx_reqF$CLR = 1'b0 ;

  // submodule wciTx_reqF
  assign wciTx_reqF$D_IN = wci_tx_req ;
  assign wciTx_reqF$DEQ = WILL_FIRE_RL_wciTx_ctl_op_start ;
  assign wciTx_reqF$ENQ = CAN_FIRE_RL_wciTx_reqF_enq ;
  assign wciTx_reqF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$DEQ = CAN_FIRE_RL_tx_data ;
  assign wsiS_reqFifo$ENQ = CAN_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_emac_rx_buffer_fifoDeq_rw_enq_whas__2_THEN__ETC___d1280 =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ?
	       emac_rx_buffer_fifoDeq_rw_enq$wget[9:8] != 2'd0 &&
	       emac_rx_buffer_fifoDeq_rw_enq$wget[9:8] != 2'd1 :
	       (!emac_rx_buffer_fifoDeq_taggedReg[10] ||
		emac_rx_buffer_fifoDeq_taggedReg[9:8] != 2'd0) &&
	       (!emac_rx_buffer_fifoDeq_taggedReg[10] ||
		emac_rx_buffer_fifoDeq_taggedReg[9:8] != 2'd1) ;
  assign IF_emac_rx_buffer_rRdPackets_rsCounter_21_BIT__ETC___d1481 =
	     (emac_rx_buffer_rRdPackets_rsCounter[0] ||
	      emac_rx_buffer_rRdPackets_rsCounter[1] ||
	      emac_rx_buffer_rRdPackets_rsCounter[2] ||
	      emac_rx_buffer_rRdPackets_rsCounter[3] ||
	      emac_rx_buffer_rRdPackets_rsCounter[4] ||
	      emac_rx_buffer_rRdPackets_rsCounter[5] ||
	      emac_rx_buffer_rRdPackets_rsCounter[6]) ?
	       (emac_rx_buffer_rRdPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_rx_buffer_rRdPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_rx_buffer_rRdPackets_rsCounter[2] ?
			32'd3 :
			(emac_rx_buffer_rRdPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_rx_buffer_rRdPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_rx_buffer_rRdPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_rx_buffer_rRdPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_rx_buffer_rRdPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign IF_emac_rx_buffer_rWrPackets_rsCounter_03_BIT__ETC___d1476 =
	     (emac_rx_buffer_rWrPackets_rsCounter[0] ||
	      emac_rx_buffer_rWrPackets_rsCounter[1] ||
	      emac_rx_buffer_rWrPackets_rsCounter[2] ||
	      emac_rx_buffer_rWrPackets_rsCounter[3] ||
	      emac_rx_buffer_rWrPackets_rsCounter[4] ||
	      emac_rx_buffer_rWrPackets_rsCounter[5] ||
	      emac_rx_buffer_rWrPackets_rsCounter[6]) ?
	       (emac_rx_buffer_rWrPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_rx_buffer_rWrPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_rx_buffer_rWrPackets_rsCounter[2] ?
			32'd3 :
			(emac_rx_buffer_rWrPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_rx_buffer_rWrPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_rx_buffer_rWrPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_rx_buffer_rWrPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_rx_buffer_rWrPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1483 =
	     CAN_FIRE_RL_tx_data ?
	       emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] == 2'd0 :
	       emac_tx_buffer_fifoEnq_taggedReg[10] &&
	       emac_tx_buffer_fifoEnq_taggedReg[9:8] == 2'd0 ;
  assign IF_emac_tx_buffer_fifoEnq_rw_enq_whas__81_THEN_ETC___d1484 =
	     CAN_FIRE_RL_tx_data ?
	       emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] == 2'd1 :
	       emac_tx_buffer_fifoEnq_taggedReg[10] &&
	       emac_tx_buffer_fifoEnq_taggedReg[9:8] == 2'd1 ;
  assign IF_emac_tx_buffer_rRdPackets_rsCounter_74_BIT__ETC___d1490 =
	     (emac_tx_buffer_rRdPackets_rsCounter[0] ||
	      emac_tx_buffer_rRdPackets_rsCounter[1] ||
	      emac_tx_buffer_rRdPackets_rsCounter[2] ||
	      emac_tx_buffer_rRdPackets_rsCounter[3] ||
	      emac_tx_buffer_rRdPackets_rsCounter[4] ||
	      emac_tx_buffer_rRdPackets_rsCounter[5] ||
	      emac_tx_buffer_rRdPackets_rsCounter[6]) ?
	       (emac_tx_buffer_rRdPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_tx_buffer_rRdPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_tx_buffer_rRdPackets_rsCounter[2] ?
			32'd3 :
			(emac_tx_buffer_rRdPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_tx_buffer_rRdPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_tx_buffer_rRdPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_tx_buffer_rRdPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_tx_buffer_rRdPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign IF_emac_tx_buffer_rWrPackets_rsCounter_35_BIT__ETC___d1485 =
	     (emac_tx_buffer_rWrPackets_rsCounter[0] ||
	      emac_tx_buffer_rWrPackets_rsCounter[1] ||
	      emac_tx_buffer_rWrPackets_rsCounter[2] ||
	      emac_tx_buffer_rWrPackets_rsCounter[3] ||
	      emac_tx_buffer_rWrPackets_rsCounter[4] ||
	      emac_tx_buffer_rWrPackets_rsCounter[5] ||
	      emac_tx_buffer_rWrPackets_rsCounter[6]) ?
	       (emac_tx_buffer_rWrPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_tx_buffer_rWrPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_tx_buffer_rWrPackets_rsCounter[2] ?
			32'd3 :
			(emac_tx_buffer_rWrPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_tx_buffer_rWrPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_tx_buffer_rWrPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_tx_buffer_rWrPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_tx_buffer_rWrPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign NOT_wsiS_reqFifo_countReg_65_ULE_1_66___d867 =
	     wsiS_reqFifo_countReg > 2'd1 ;
  assign ab__h19718 = 2'd0 ;
  assign ab__h29885 = 2'd0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_44_ETC___d545 =
	     (emac_rx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_06_ETC___d507 =
	     (emac_rx_buffer_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_06_ETC___d687 =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt +
	     (emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDat_ETC___d510 =
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$whas &&
	     !emac_rx_buffer_fifoDeq_taggedReg[10] &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	      2'd0 &&
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	      2'd1 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_cnt_06_ETC___d507) ;
  assign emac_rx_buffer_rRdPackets_rsCounter_21_BIT_0_8_ETC___d1425 =
	     z__h21525 ^ emac_rx_buffer_rRdPackets_rsCounter[7] ;
  assign emac_rx_buffer_rWrPackets_rsCounter_03_BIT_0_0_ETC___d1424 =
	     z__h15206 ^ emac_rx_buffer_rWrPackets_rsCounter[7] ;
  assign emac_rx_buffer_wBadFrame_wget__30_OR_emac_rx_b_ETC___d542 =
	     (emac_mac$EMACCLIENTRXBADFRAME ||
	      emac_mac$EMACCLIENTRXFRAMEDROP) &&
	     !emac_mac$EMACCLIENTRXGOODFRAME &&
	     emac_rx_buffer_rInPacket ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d148 =
	     (emac_tx_buffer_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d319 =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt +
	     (emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas ?
		3'd1 :
		3'd0) +
	     (emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDat_ETC___d151 =
	     (emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	      emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas) &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$whas &&
	     (emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	      2'd1 ||
	      emac_tx_buffer_memBuffer_serverAdapterB_cnt_47_ETC___d148) ;
  assign emac_tx_buffer_rRdPackets_rsCounter_74_BIT_0_2_ETC___d1427 =
	     z__h31893 ^ emac_tx_buffer_rRdPackets_rsCounter[7] ;
  assign emac_tx_buffer_rWrPackets_rsCounter_35_BIT_0_3_ETC___d1426 =
	     z__h25426 ^ emac_tx_buffer_rWrPackets_rsCounter[7] ;
  assign status__h35535 = { 16'd0, x__h35684 } ;
  assign x__h15740 = 8'd1 << x__h16276 ;
  assign x__h16276 =
	     emac_rx_buffer_rWrPackets_rsCounter_03_BIT_0_0_ETC___d1424 ?
	       IF_emac_rx_buffer_rWrPackets_rsCounter_03_BIT__ETC___d1476 :
	       32'd0 ;
  assign x__h22059 = 8'd1 << x__h22595 ;
  assign x__h22595 =
	     emac_rx_buffer_rRdPackets_rsCounter_21_BIT_0_8_ETC___d1425 ?
	       IF_emac_rx_buffer_rRdPackets_rsCounter_21_BIT__ETC___d1481 :
	       32'd0 ;
  assign x__h25960 = 8'd1 << x__h26496 ;
  assign x__h26496 =
	     emac_tx_buffer_rWrPackets_rsCounter_35_BIT_0_3_ETC___d1426 ?
	       IF_emac_tx_buffer_rWrPackets_rsCounter_35_BIT__ETC___d1485 :
	       32'd0 ;
  assign x__h32427 = 8'd1 << x__h32963 ;
  assign x__h32963 =
	     emac_tx_buffer_rRdPackets_rsCounter_74_BIT_0_2_ETC___d1427 ?
	       IF_emac_tx_buffer_rRdPackets_rsCounter_74_BIT__ETC___d1490 :
	       32'd0 ;
  assign x__h35684 = { wsiM_statusR, wsiS_statusR } ;
  assign x__h36500 =
	     CAN_FIRE_RL_emac_rx_buffer_dequeue_next_beat ?
	       emac_rx_buffer_fifoDeq_rw_enq$wget[7:0] :
	       emac_rx_buffer_fifoDeq_taggedReg[7:0] ;
  assign x_burstLength__h36435 =
	     IF_emac_rx_buffer_fifoDeq_rw_enq_whas__2_THEN__ETC___d1280 ?
	       12'd1 :
	       12'd4095 ;
  assign x_data__h36436 = { 24'd0, x__h36500 } ;
  assign y__h16304 = ~x__h15740 ;
  assign y__h22623 = ~x__h22059 ;
  assign y__h26524 = ~x__h25960 ;
  assign y__h32991 = ~x__h32427 ;
  assign z__h15171 =
	     emac_rx_buffer_rWrPackets_rsCounter[0] ^
	     emac_rx_buffer_rWrPackets_rsCounter[1] ;
  assign z__h15178 = z__h15171 ^ emac_rx_buffer_rWrPackets_rsCounter[2] ;
  assign z__h15185 = z__h15178 ^ emac_rx_buffer_rWrPackets_rsCounter[3] ;
  assign z__h15192 = z__h15185 ^ emac_rx_buffer_rWrPackets_rsCounter[4] ;
  assign z__h15199 = z__h15192 ^ emac_rx_buffer_rWrPackets_rsCounter[5] ;
  assign z__h15206 = z__h15199 ^ emac_rx_buffer_rWrPackets_rsCounter[6] ;
  assign z__h21490 =
	     emac_rx_buffer_rRdPackets_rsCounter[0] ^
	     emac_rx_buffer_rRdPackets_rsCounter[1] ;
  assign z__h21497 = z__h21490 ^ emac_rx_buffer_rRdPackets_rsCounter[2] ;
  assign z__h21504 = z__h21497 ^ emac_rx_buffer_rRdPackets_rsCounter[3] ;
  assign z__h21511 = z__h21504 ^ emac_rx_buffer_rRdPackets_rsCounter[4] ;
  assign z__h21518 = z__h21511 ^ emac_rx_buffer_rRdPackets_rsCounter[5] ;
  assign z__h21525 = z__h21518 ^ emac_rx_buffer_rRdPackets_rsCounter[6] ;
  assign z__h25391 =
	     emac_tx_buffer_rWrPackets_rsCounter[0] ^
	     emac_tx_buffer_rWrPackets_rsCounter[1] ;
  assign z__h25398 = z__h25391 ^ emac_tx_buffer_rWrPackets_rsCounter[2] ;
  assign z__h25405 = z__h25398 ^ emac_tx_buffer_rWrPackets_rsCounter[3] ;
  assign z__h25412 = z__h25405 ^ emac_tx_buffer_rWrPackets_rsCounter[4] ;
  assign z__h25419 = z__h25412 ^ emac_tx_buffer_rWrPackets_rsCounter[5] ;
  assign z__h25426 = z__h25419 ^ emac_tx_buffer_rWrPackets_rsCounter[6] ;
  assign z__h31858 =
	     emac_tx_buffer_rRdPackets_rsCounter[0] ^
	     emac_tx_buffer_rRdPackets_rsCounter[1] ;
  assign z__h31865 = z__h31858 ^ emac_tx_buffer_rRdPackets_rsCounter[2] ;
  assign z__h31872 = z__h31865 ^ emac_tx_buffer_rRdPackets_rsCounter[3] ;
  assign z__h31879 = z__h31872 ^ emac_tx_buffer_rRdPackets_rsCounter[4] ;
  assign z__h31886 = z__h31879 ^ emac_tx_buffer_rRdPackets_rsCounter[5] ;
  assign z__h31893 = z__h31886 ^ emac_tx_buffer_rRdPackets_rsCounter[6] ;
  always@(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1 =
	      emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2 =
	      emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3 =
	      emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4 =
	      emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4 = 2'd2;
    endcase
  end
  always@(wciRx_reqF$D_OUT or
	  status__h35535 or
	  gbeControl or wsiM_extStatusW$wget or wsiS_extStatusW$wget)
  begin
    case (wciRx_reqF$D_OUT[39:32])
      8'h0: _theResult____h35609 = status__h35535;
      8'h04: _theResult____h35609 = gbeControl;
      8'h10: _theResult____h35609 = wsiM_extStatusW$wget[95:64];
      8'h14: _theResult____h35609 = wsiM_extStatusW$wget[63:32];
      8'h18: _theResult____h35609 = wsiS_extStatusW$wget[95:64];
      8'h1C: _theResult____h35609 = wsiS_extStatusW$wget[63:32];
      default: _theResult____h35609 = 32'd0;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_memory$DOA)
  begin
    case (emac_rx_buffer_memBuffer_memory$DOA[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5 =
	      emac_rx_buffer_memBuffer_memory$DOA[9:8];
      default: CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6 =
	      emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_memory$DOB)
  begin
    case (emac_rx_buffer_memBuffer_memory$DOB[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7 =
	      emac_rx_buffer_memBuffer_memory$DOB[9:8];
      default: CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8 =
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9 =
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_fifoDeq_rw_enq$wget)
  begin
    case (emac_rx_buffer_fifoDeq_rw_enq$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10 =
	      emac_rx_buffer_fifoDeq_rw_enq$wget[9:8];
      default: CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_fifoEnq_rw_enq$wget)
  begin
    case (emac_tx_buffer_fifoEnq_rw_enq$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11 =
	      emac_tx_buffer_fifoEnq_rw_enq$wget[9:8];
      default: CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_memory$DOA)
  begin
    case (emac_tx_buffer_memBuffer_memory$DOA[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12 =
	      emac_tx_buffer_memBuffer_memory$DOA[9:8];
      default: CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13 =
	      emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_memory$DOB)
  begin
    case (emac_tx_buffer_memBuffer_memory$DOB[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14 =
	      emac_tx_buffer_memBuffer_memory$DOB[9:8];
      default: CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15 =
	      emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        emac_rx_buffer_fifoDeq_taggedReg <= `BSV_ASSIGNMENT_DELAY 11'd682;
	emac_rx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_rx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_rx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_rx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_rx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_fifoEnq_taggedReg <= `BSV_ASSIGNMENT_DELAY 11'd682;
	emac_tx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_tx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_tx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	gbeControl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wciRx_cEdge <= `BSV_ASSIGNMENT_DELAY 3'd7;
	wciRx_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciRx_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciRx_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciRx_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciRx_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciRx_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciRx_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wciTx_cEdge <= `BSV_ASSIGNMENT_DELAY 3'd7;
	wciTx_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciTx_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciTx_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciTx_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciTx_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciTx_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciTx_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (emac_rx_buffer_fifoDeq_taggedReg$EN)
	  emac_rx_buffer_fifoDeq_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_fifoDeq_taggedReg$D_IN;
	if (emac_rx_buffer_memBuffer_serverAdapterB_cnt$EN)
	  emac_rx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
	if (emac_rx_buffer_memBuffer_serverAdapterB_s1$EN)
	  emac_rx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterB_s1$D_IN;
	if (emac_rx_buffer_rOutPacket$EN)
	  emac_rx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rOutPacket$D_IN;
	if (emac_rx_buffer_rRdCurrPtr$EN)
	  emac_rx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rRdCurrPtr$D_IN;
	if (emac_rx_buffer_rRdStartPtr$EN)
	  emac_rx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rRdStartPtr$D_IN;
	if (emac_tx_buffer_fifoEnq_taggedReg$EN)
	  emac_tx_buffer_fifoEnq_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_fifoEnq_taggedReg$D_IN;
	if (emac_tx_buffer_memBuffer_serverAdapterA_cnt$EN)
	  emac_tx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
	if (emac_tx_buffer_memBuffer_serverAdapterA_s1$EN)
	  emac_tx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterA_s1$D_IN;
	if (emac_tx_buffer_rWrCurrPtr$EN)
	  emac_tx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rWrCurrPtr$D_IN;
	if (emac_tx_buffer_rWrStartPtr$EN)
	  emac_tx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rWrStartPtr$D_IN;
	if (gbeControl$EN)
	  gbeControl <= `BSV_ASSIGNMENT_DELAY gbeControl$D_IN;
	if (wciRx_cEdge$EN)
	  wciRx_cEdge <= `BSV_ASSIGNMENT_DELAY wciRx_cEdge$D_IN;
	if (wciRx_cState$EN)
	  wciRx_cState <= `BSV_ASSIGNMENT_DELAY wciRx_cState$D_IN;
	if (wciRx_ctlAckReg$EN)
	  wciRx_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wciRx_ctlAckReg$D_IN;
	if (wciRx_ctlOpActive$EN)
	  wciRx_ctlOpActive <= `BSV_ASSIGNMENT_DELAY wciRx_ctlOpActive$D_IN;
	if (wciRx_illegalEdge$EN)
	  wciRx_illegalEdge <= `BSV_ASSIGNMENT_DELAY wciRx_illegalEdge$D_IN;
	if (wciRx_nState$EN)
	  wciRx_nState <= `BSV_ASSIGNMENT_DELAY wciRx_nState$D_IN;
	if (wciRx_reqF_countReg$EN)
	  wciRx_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wciRx_reqF_countReg$D_IN;
	if (wciRx_respF_c_r$EN)
	  wciRx_respF_c_r <= `BSV_ASSIGNMENT_DELAY wciRx_respF_c_r$D_IN;
	if (wciRx_respF_q_0$EN)
	  wciRx_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wciRx_respF_q_0$D_IN;
	if (wciRx_respF_q_1$EN)
	  wciRx_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wciRx_respF_q_1$D_IN;
	if (wciRx_sFlagReg$EN)
	  wciRx_sFlagReg <= `BSV_ASSIGNMENT_DELAY wciRx_sFlagReg$D_IN;
	if (wciRx_sThreadBusy_d$EN)
	  wciRx_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wciRx_sThreadBusy_d$D_IN;
	if (wciTx_cEdge$EN)
	  wciTx_cEdge <= `BSV_ASSIGNMENT_DELAY wciTx_cEdge$D_IN;
	if (wciTx_cState$EN)
	  wciTx_cState <= `BSV_ASSIGNMENT_DELAY wciTx_cState$D_IN;
	if (wciTx_ctlAckReg$EN)
	  wciTx_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wciTx_ctlAckReg$D_IN;
	if (wciTx_ctlOpActive$EN)
	  wciTx_ctlOpActive <= `BSV_ASSIGNMENT_DELAY wciTx_ctlOpActive$D_IN;
	if (wciTx_illegalEdge$EN)
	  wciTx_illegalEdge <= `BSV_ASSIGNMENT_DELAY wciTx_illegalEdge$D_IN;
	if (wciTx_nState$EN)
	  wciTx_nState <= `BSV_ASSIGNMENT_DELAY wciTx_nState$D_IN;
	if (wciTx_reqF_countReg$EN)
	  wciTx_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wciTx_reqF_countReg$D_IN;
	if (wciTx_respF_c_r$EN)
	  wciTx_respF_c_r <= `BSV_ASSIGNMENT_DELAY wciTx_respF_c_r$D_IN;
	if (wciTx_respF_q_0$EN)
	  wciTx_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wciTx_respF_q_0$D_IN;
	if (wciTx_respF_q_1$EN)
	  wciTx_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wciTx_respF_q_1$D_IN;
	if (wciTx_sFlagReg$EN)
	  wciTx_sFlagReg <= `BSV_ASSIGNMENT_DELAY wciTx_sFlagReg$D_IN;
	if (wciTx_sThreadBusy_d$EN)
	  wciTx_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wciTx_sThreadBusy_d$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
      end
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge CLK_sys1_clk)
  begin
    if (!RST_N_sys1_rst)
      begin
        wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (wti_nowReq$EN)
	  wti_nowReq <= `BSV_ASSIGNMENT_DELAY wti_nowReq$D_IN;
      end
  end

  always@(posedge emac_phy_rx_clk$O)
  begin
    if (!emac_rx_client_rst_n$OUT_RST_N)
      begin
        emac_rx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_rx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_rx_buffer_rInPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_rx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_rx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
      end
    else
      begin
        if (emac_rx_buffer_memBuffer_serverAdapterA_cnt$EN)
	  emac_rx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
	if (emac_rx_buffer_memBuffer_serverAdapterA_s1$EN)
	  emac_rx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterA_s1$D_IN;
	if (emac_rx_buffer_rInPacket$EN)
	  emac_rx_buffer_rInPacket <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rInPacket$D_IN;
	if (emac_rx_buffer_rWrCurrPtr$EN)
	  emac_rx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rWrCurrPtr$D_IN;
	if (emac_rx_buffer_rWrStartPtr$EN)
	  emac_rx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rWrStartPtr$D_IN;
      end
    if (emac_rx_buffer_rData_D1$EN)
      emac_rx_buffer_rData_D1 <= `BSV_ASSIGNMENT_DELAY
	  emac_rx_buffer_rData_D1$D_IN;
  end

  always@(posedge emac_mac$TX_CLK_OUT)
  begin
    if (!emac_tx_client_rst_n$OUT_RST_N)
      begin
        emac_tx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_tx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_tx_buffer_rAcked <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_tx_buffer_rIfgDelay <= `BSV_ASSIGNMENT_DELAY 8'd5;
	emac_tx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_tx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_rUnderrun <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (emac_tx_buffer_memBuffer_serverAdapterB_cnt$EN)
	  emac_tx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
	if (emac_tx_buffer_memBuffer_serverAdapterB_s1$EN)
	  emac_tx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterB_s1$D_IN;
	if (emac_tx_buffer_rAcked$EN)
	  emac_tx_buffer_rAcked <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rAcked$D_IN;
	if (emac_tx_buffer_rIfgDelay$EN)
	  emac_tx_buffer_rIfgDelay <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rIfgDelay$D_IN;
	if (emac_tx_buffer_rOutPacket$EN)
	  emac_tx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rOutPacket$D_IN;
	if (emac_tx_buffer_rRdCurrPtr$EN)
	  emac_tx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rRdCurrPtr$D_IN;
	if (emac_tx_buffer_rRdStartPtr$EN)
	  emac_tx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rRdStartPtr$D_IN;
	if (emac_tx_buffer_rUnderrun$EN)
	  emac_tx_buffer_rUnderrun <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rUnderrun$D_IN;
      end
  end

  always@(posedge CLK or negedge RST_N)
  if (!RST_N)
    begin
      emac_rx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
    end
  else
    begin
      if (emac_rx_buffer_rRdPackets_rsCounter$EN)
	emac_rx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rRdPackets_rsCounter$D_IN;
      if (emac_rx_buffer_rWrPackets_rdCounter$EN)
	emac_rx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rWrPackets_rdCounter$D_IN;
      if (emac_rx_buffer_rWrPackets_rdCounterPre$EN)
	emac_rx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rWrPackets_rdCounterPre$D_IN;
      if (emac_tx_buffer_rRdPackets_rdCounter$EN)
	emac_tx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rRdPackets_rdCounter$D_IN;
      if (emac_tx_buffer_rRdPackets_rdCounterPre$EN)
	emac_tx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rRdPackets_rdCounterPre$D_IN;
      if (emac_tx_buffer_rWrPackets_rsCounter$EN)
	emac_tx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rWrPackets_rsCounter$D_IN;
    end

  always@(posedge emac_phy_rx_clk$O or negedge emac_rx_client_rst_n$OUT_RST_N)
  if (!emac_rx_client_rst_n$OUT_RST_N)
    begin
      emac_rx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
    end
  else
    begin
      if (emac_rx_buffer_rRdPackets_rdCounter$EN)
	emac_rx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rRdPackets_rdCounter$D_IN;
      if (emac_rx_buffer_rRdPackets_rdCounterPre$EN)
	emac_rx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rRdPackets_rdCounterPre$D_IN;
      if (emac_rx_buffer_rWrPackets_rsCounter$EN)
	emac_rx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rWrPackets_rsCounter$D_IN;
    end

  always@(posedge emac_mac$TX_CLK_OUT or
	  negedge emac_tx_client_rst_n$OUT_RST_N)
  if (!emac_tx_client_rst_n$OUT_RST_N)
    begin
      emac_tx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
    end
  else
    begin
      if (emac_tx_buffer_rRdPackets_rsCounter$EN)
	emac_tx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rRdPackets_rsCounter$D_IN;
      if (emac_tx_buffer_rWrPackets_rdCounter$EN)
	emac_tx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rWrPackets_rdCounter$D_IN;
      if (emac_tx_buffer_rWrPackets_rdCounterPre$EN)
	emac_tx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rWrPackets_rdCounterPre$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    emac_rx_buffer_fifoDeq_taggedReg = 11'h2AA;
    emac_rx_buffer_memBuffer_serverAdapterA_cnt = 3'h2;
    emac_rx_buffer_memBuffer_serverAdapterA_s1 = 2'h2;
    emac_rx_buffer_memBuffer_serverAdapterB_cnt = 3'h2;
    emac_rx_buffer_memBuffer_serverAdapterB_s1 = 2'h2;
    emac_rx_buffer_rData_D1 = 8'hAA;
    emac_rx_buffer_rInPacket = 1'h0;
    emac_rx_buffer_rOutPacket = 1'h0;
    emac_rx_buffer_rRdCurrPtr = 12'hAAA;
    emac_rx_buffer_rRdPackets_rdCounter = 8'hAA;
    emac_rx_buffer_rRdPackets_rdCounterPre = 8'hAA;
    emac_rx_buffer_rRdPackets_rsCounter = 8'hAA;
    emac_rx_buffer_rRdStartPtr = 12'hAAA;
    emac_rx_buffer_rWrCurrPtr = 12'hAAA;
    emac_rx_buffer_rWrPackets_rdCounter = 8'hAA;
    emac_rx_buffer_rWrPackets_rdCounterPre = 8'hAA;
    emac_rx_buffer_rWrPackets_rsCounter = 8'hAA;
    emac_rx_buffer_rWrStartPtr = 12'hAAA;
    emac_tx_buffer_fifoEnq_taggedReg = 11'h2AA;
    emac_tx_buffer_memBuffer_serverAdapterA_cnt = 3'h2;
    emac_tx_buffer_memBuffer_serverAdapterA_s1 = 2'h2;
    emac_tx_buffer_memBuffer_serverAdapterB_cnt = 3'h2;
    emac_tx_buffer_memBuffer_serverAdapterB_s1 = 2'h2;
    emac_tx_buffer_rAcked = 1'h0;
    emac_tx_buffer_rIfgDelay = 8'hAA;
    emac_tx_buffer_rOutPacket = 1'h0;
    emac_tx_buffer_rRdCurrPtr = 12'hAAA;
    emac_tx_buffer_rRdPackets_rdCounter = 8'hAA;
    emac_tx_buffer_rRdPackets_rdCounterPre = 8'hAA;
    emac_tx_buffer_rRdPackets_rsCounter = 8'hAA;
    emac_tx_buffer_rRdStartPtr = 12'hAAA;
    emac_tx_buffer_rUnderrun = 1'h0;
    emac_tx_buffer_rWrCurrPtr = 12'hAAA;
    emac_tx_buffer_rWrPackets_rdCounter = 8'hAA;
    emac_tx_buffer_rWrPackets_rdCounterPre = 8'hAA;
    emac_tx_buffer_rWrPackets_rsCounter = 8'hAA;
    emac_tx_buffer_rWrStartPtr = 12'hAAA;
    gbeControl = 32'hAAAAAAAA;
    wciRx_cEdge = 3'h2;
    wciRx_cState = 3'h2;
    wciRx_ctlAckReg = 1'h0;
    wciRx_ctlOpActive = 1'h0;
    wciRx_illegalEdge = 1'h0;
    wciRx_nState = 3'h2;
    wciRx_reqF_countReg = 2'h2;
    wciRx_respF_c_r = 2'h2;
    wciRx_respF_q_0 = 34'h2AAAAAAAA;
    wciRx_respF_q_1 = 34'h2AAAAAAAA;
    wciRx_sFlagReg = 1'h0;
    wciRx_sThreadBusy_d = 1'h0;
    wciTx_cEdge = 3'h2;
    wciTx_cState = 3'h2;
    wciTx_ctlAckReg = 1'h0;
    wciTx_ctlOpActive = 1'h0;
    wciTx_illegalEdge = 1'h0;
    wciTx_nState = 3'h2;
    wciTx_reqF_countReg = 2'h2;
    wciTx_respF_c_r = 2'h2;
    wciTx_respF_q_0 = 34'h2AAAAAAAA;
    wciTx_respF_q_1 = 34'h2AAAAAAAA;
    wciTx_sFlagReg = 1'h0;
    wciTx_sThreadBusy_d = 1'h0;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h36028 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h36028,
		 wciRx_reqF$D_OUT[51:32],
		 wciRx_reqF$D_OUT[55:52],
		 wciRx_reqF$D_OUT[31:0]);
    if (RST_N)
      if (WILL_FIRE_RL_wciRx_ctl_op_start)
	begin
	  v__h3667 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciRx_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3667,
		 wciRx_reqF$D_OUT[36:34],
		 wciRx_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/GbeWorker.bsv\", line 95, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/GbeWorker.bsv\", line 99, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_ctrl_EiI fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/GbeWorker.bsv\", line 99, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/GbeWorker.bsv\", line 103, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_ctrl_IsO fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/GbeWorker.bsv\", line 103, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_ctrl_EiI fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/GbeWorker.bsv\", line 103, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wciTx_ctl_op_complete && wciTx_illegalEdge)
	begin
	  v__h6679 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciTx_ctl_op_complete && wciTx_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h6679,
		 wciTx_cEdge,
		 wciTx_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wciTx_ctl_op_complete && !wciTx_illegalEdge)
	begin
	  v__h6532 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciTx_ctl_op_complete && !wciTx_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h6532,
		 wciTx_cEdge,
		 wciTx_cState,
		 wciTx_nState);
    if (RST_N)
      if (WILL_FIRE_RL_wciTx_ctl_op_start)
	begin
	  v__h7575 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciTx_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h7575,
		 wciTx_reqF$D_OUT[36:34],
		 wciTx_cState);
    if (RST_N)
      if (WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (WILL_FIRE_RL_wciRx_ctl_op_complete && wciRx_illegalEdge)
	begin
	  v__h2768 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciRx_ctl_op_complete && wciRx_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h2768,
		 wciRx_cEdge,
		 wciRx_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wciRx_ctl_op_complete && !wciRx_illegalEdge)
	begin
	  v__h2621 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciRx_ctl_op_complete && !wciRx_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h2621,
		 wciRx_cEdge,
		 wciRx_cState,
		 wciRx_nState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h35625 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h35625,
		 wciRx_reqF$D_OUT[51:32],
		 wciRx_reqF$D_OUT[55:52],
		 _theResult____h35609);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/GbeWorker.bsv\", line 80, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfrd and RL_wci_ctrl_OrE fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/GbeWorker.bsv\", line 80, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfrd and RL_wci_ctrl_IsO fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/GbeWorker.bsv\", line 80, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfrd and RL_wci_ctrl_EiI fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/GbeWorker.bsv\", line 80, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfrd and RL_wci_cfwr fired in the same clock\n  cycle.\n");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge emac_phy_rx_clk$O or
	  negedge emac_gmii_rx_clk$O or negedge emac_gmii_rxc_delay$DATAOUT)
  begin
    #0;
    if (emac_rx_client_rst_n$OUT_RST_N)
      if (WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge emac_mac$TX_CLK_OUT)
  begin
    #0;
    if (emac_tx_client_rst_n$OUT_RST_N)
      if (WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkGbeWorker

