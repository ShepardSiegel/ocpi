//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Wed Jan 18 11:38:03 EST 2012
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wciS1_SResp                    O     2 reg
// wciS1_SData                    O    32 reg
// wciS1_SThreadBusy              O     1
// wciS1_SFlag                    O     2
// wtiS0_SThreadBusy              O     1 reg
// wtiS0_SReset_n                 O     1
// wsiM0_MCmd                     O     3
// wsiM0_MReqLast                 O     1
// wsiM0_MBurstPrecise            O     1
// wsiM0_MBurstLength             O    12
// wsiM0_MData                    O    32 reg
// wsiM0_MByteEn                  O     4 reg
// wsiM0_MReqInfo                 O     8
// wsiM0_MReset_n                 O     1
// wsiS0_SThreadBusy              O     1
// wsiS0_SReset_n                 O     1
// gmii_txd                       O     8
// gmii_tx_en                     O     1
// gmii_tx_er                     O     1
// CLK_gmii_tx_clk                O     1 clock
// CLK_GATE_gmii_tx_clk           O     1 const
// CLK_rxclk                      O     1 clock
// CLK_GATE_rxclk                 O     1 const
// RST_N_mrst_n                   O     1 reset
// CLK_gmii_rx_clk                I     1 clock
// CLK_sys1_clk                   I     1 clock
// RST_N_sys1_rst                 I     1 reset
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wciS1_MCmd                     I     3
// wciS1_MAddrSpace               I     1
// wciS1_MByteEn                  I     4
// wciS1_MAddr                    I    32
// wciS1_MData                    I    32
// wciS1_MFlag                    I     2 unused
// wtiS0_req                      I    67 reg
// wsiS0_MCmd                     I     3
// wsiS0_MBurstLength             I    12
// wsiS0_MData                    I    32
// wsiS0_MByteEn                  I     4
// wsiS0_MReqInfo                 I     8
// gmii_rxd_i                     I     8
// gmii_rx_dv_i                   I     1
// gmii_rx_er_i                   I     1
// wsiM0_SThreadBusy              I     1 reg
// wsiM0_SReset_n                 I     1 reg
// wsiS0_MReqLast                 I     1
// wsiS0_MBurstPrecise            I     1
// wsiS0_MReset_n                 I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGbeWorker(CLK_gmii_rx_clk,
		   CLK_sys1_clk,
		   RST_N_sys1_rst,
		   wciS0_Clk,
		   wciS0_MReset_n,

		   wciS0_MCmd,

		   wciS0_MAddrSpace,

		   wciS0_MByteEn,

		   wciS0_MAddr,

		   wciS0_MData,

		   wciS0_SResp,

		   wciS0_SData,

		   wciS0_SThreadBusy,

		   wciS0_SFlag,

		   wciS0_MFlag,

		   wciS1_MCmd,

		   wciS1_MAddrSpace,

		   wciS1_MByteEn,

		   wciS1_MAddr,

		   wciS1_MData,

		   wciS1_SResp,

		   wciS1_SData,

		   wciS1_SThreadBusy,

		   wciS1_SFlag,

		   wciS1_MFlag,

		   wtiS0_req,

		   wtiS0_SThreadBusy,

		   wtiS0_SReset_n,

		   wsiM0_MCmd,

		   wsiM0_MReqLast,

		   wsiM0_MBurstPrecise,

		   wsiM0_MBurstLength,

		   wsiM0_MData,

		   wsiM0_MByteEn,

		   wsiM0_MReqInfo,

		   wsiM0_SThreadBusy,

		   wsiM0_MReset_n,

		   wsiM0_SReset_n,

		   wsiS0_MCmd,

		   wsiS0_MReqLast,

		   wsiS0_MBurstPrecise,

		   wsiS0_MBurstLength,

		   wsiS0_MData,

		   wsiS0_MByteEn,

		   wsiS0_MReqInfo,

		   wsiS0_SThreadBusy,

		   wsiS0_SReset_n,

		   wsiS0_MReset_n,

		   gmii_txd,

		   gmii_tx_en,

		   gmii_tx_er,

		   gmii_rxd_i,

		   gmii_rx_dv_i,

		   gmii_rx_er_i,

		   CLK_gmii_tx_clk,
		   CLK_GATE_gmii_tx_clk,

		   CLK_rxclk,
		   CLK_GATE_rxclk,

		   RST_N_mrst_n);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  CLK_gmii_rx_clk;
  input  CLK_sys1_clk;
  input  RST_N_sys1_rst;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // action method wciS1_mCmd
  input  [2 : 0] wciS1_MCmd;

  // action method wciS1_mAddrSpace
  input  wciS1_MAddrSpace;

  // action method wciS1_mByteEn
  input  [3 : 0] wciS1_MByteEn;

  // action method wciS1_mAddr
  input  [31 : 0] wciS1_MAddr;

  // action method wciS1_mData
  input  [31 : 0] wciS1_MData;

  // value method wciS1_sResp
  output [1 : 0] wciS1_SResp;

  // value method wciS1_sData
  output [31 : 0] wciS1_SData;

  // value method wciS1_sThreadBusy
  output wciS1_SThreadBusy;

  // value method wciS1_sFlag
  output [1 : 0] wciS1_SFlag;

  // action method wciS1_mFlag
  input  [1 : 0] wciS1_MFlag;

  // action method wtiS0_put
  input  [66 : 0] wtiS0_req;

  // value method wtiS0_sThreadBusy
  output wtiS0_SThreadBusy;

  // value method wtiS0_sReset_n
  output wtiS0_SReset_n;

  // value method wsiM0_mCmd
  output [2 : 0] wsiM0_MCmd;

  // value method wsiM0_mReqLast
  output wsiM0_MReqLast;

  // value method wsiM0_mBurstPrecise
  output wsiM0_MBurstPrecise;

  // value method wsiM0_mBurstLength
  output [11 : 0] wsiM0_MBurstLength;

  // value method wsiM0_mData
  output [31 : 0] wsiM0_MData;

  // value method wsiM0_mByteEn
  output [3 : 0] wsiM0_MByteEn;

  // value method wsiM0_mReqInfo
  output [7 : 0] wsiM0_MReqInfo;

  // value method wsiM0_mDataInfo

  // action method wsiM0_sThreadBusy
  input  wsiM0_SThreadBusy;

  // value method wsiM0_mReset_n
  output wsiM0_MReset_n;

  // action method wsiM0_sReset_n
  input  wsiM0_SReset_n;

  // action method wsiS0_mCmd
  input  [2 : 0] wsiS0_MCmd;

  // action method wsiS0_mReqLast
  input  wsiS0_MReqLast;

  // action method wsiS0_mBurstPrecise
  input  wsiS0_MBurstPrecise;

  // action method wsiS0_mBurstLength
  input  [11 : 0] wsiS0_MBurstLength;

  // action method wsiS0_mData
  input  [31 : 0] wsiS0_MData;

  // action method wsiS0_mByteEn
  input  [3 : 0] wsiS0_MByteEn;

  // action method wsiS0_mReqInfo
  input  [7 : 0] wsiS0_MReqInfo;

  // action method wsiS0_mDataInfo

  // value method wsiS0_sThreadBusy
  output wsiS0_SThreadBusy;

  // value method wsiS0_sReset_n
  output wsiS0_SReset_n;

  // action method wsiS0_mReset_n
  input  wsiS0_MReset_n;

  // value method gmii_txd
  output [7 : 0] gmii_txd;

  // value method gmii_tx_en
  output gmii_tx_en;

  // value method gmii_tx_er
  output gmii_tx_er;

  // action method gmii_rxd
  input  [7 : 0] gmii_rxd_i;

  // action method gmii_rx_dv
  input  gmii_rx_dv_i;

  // action method gmii_rx_er
  input  gmii_rx_er_i;

  // oscillator and gates for output clock CLK_gmii_tx_clk
  output CLK_gmii_tx_clk;
  output CLK_GATE_gmii_tx_clk;

  // oscillator and gates for output clock CLK_rxclk
  output CLK_rxclk;
  output CLK_GATE_rxclk;

  // output resets
  output RST_N_mrst_n;

  // signals for module outputs
  wire [31 : 0] wciS0_SData, wciS1_SData, wsiM0_MData;
  wire [11 : 0] wsiM0_MBurstLength;
  wire [7 : 0] gmii_txd, wsiM0_MReqInfo;
  wire [3 : 0] wsiM0_MByteEn;
  wire [2 : 0] wsiM0_MCmd;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp, wciS1_SFlag, wciS1_SResp;
  wire CLK_GATE_gmii_tx_clk,
       CLK_GATE_rxclk,
       CLK_gmii_tx_clk,
       CLK_rxclk,
       RST_N_mrst_n,
       gmii_tx_en,
       gmii_tx_er,
       wciS0_SThreadBusy,
       wciS1_SThreadBusy,
       wsiM0_MBurstPrecise,
       wsiM0_MReqLast,
       wsiM0_MReset_n,
       wsiS0_SReset_n,
       wsiS0_SThreadBusy,
       wtiS0_SReset_n,
       wtiS0_SThreadBusy;

  // inlined wires
  wire [95 : 0] wsiM_extStatusW$wget, wsiS_extStatusW$wget;
  wire [71 : 0] wciRx_wslv_wciReq$wget, wciTx_wslv_wciReq$wget;
  wire [66 : 0] wti_wtiReq$wget;
  wire [60 : 0] wsiM_reqFifo_x_wire$wget, wsiS_wsiReq$wget;
  wire [33 : 0] wciRx_wslv_respF_x_wire$wget, wciTx_wslv_respF_x_wire$wget;
  wire [31 : 0] wciRx_wci_Es_mAddr_w$wget,
		wciRx_wci_Es_mData_w$wget,
		wciTx_wci_Es_mAddr_w$wget,
		wciTx_wci_Es_mData_w$wget,
		wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [9 : 0] emac_rx_buffer_fifoDeq_rw_enq$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget,
	       emac_tx_buffer_fifoEnq_rw_enq$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget;
  wire [7 : 0] emac_rx_buffer_rRdPackets_wdCounterCrossing$wget,
	       emac_rx_buffer_rWrPackets_wdCounterCrossing$wget,
	       emac_rx_buffer_wData$wget,
	       emac_tx_buffer_rRdPackets_wdCounterCrossing$wget,
	       emac_tx_buffer_rWrPackets_wdCounterCrossing$wget,
	       emac_tx_buffer_wDataOut$wget,
	       wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wciRx_wci_Es_mByteEn_w$wget,
	       wciTx_wci_Es_mByteEn_w$wget,
	       wsi_Es_mByteEn_w$wget;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$wget,
	       wciRx_wci_Es_mCmd_w$wget,
	       wciRx_wslv_wEdge$wget,
	       wciTx_wci_Es_mCmd_w$wget,
	       wciTx_wslv_wEdge$wget,
	       wsi_Es_mCmd_w$wget;
  wire [1 : 0] emac_rx_buffer_memBuffer_serverAdapterA_s1_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget,
	       emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_s1_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget,
	       emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$wget;
  wire emac_rx_buffer_fifoDeq_pw_deq$whas,
       emac_rx_buffer_fifoDeq_rw_enq$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_s1_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$whas,
       emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$whas,
       emac_rx_buffer_pwEnqueue$whas,
       emac_rx_buffer_rRdPackets_pwDecrement$whas,
       emac_rx_buffer_rRdPackets_pwIncrement$whas,
       emac_rx_buffer_rWrPackets_pwDecrement$whas,
       emac_rx_buffer_rWrPackets_pwIncrement$whas,
       emac_rx_buffer_wBadFrame$wget,
       emac_rx_buffer_wBadFrame$whas,
       emac_rx_buffer_wData$whas,
       emac_rx_buffer_wDataValid$wget,
       emac_rx_buffer_wDataValid$whas,
       emac_rx_buffer_wFrameDrop$wget,
       emac_rx_buffer_wFrameDrop$whas,
       emac_rx_buffer_wGoodFrame$wget,
       emac_rx_buffer_wGoodFrame$whas,
       emac_tx_buffer_fifoEnq_pw_deq$whas,
       emac_tx_buffer_fifoEnq_rw_enq$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_s1_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$whas,
       emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$whas,
       emac_tx_buffer_rRdPackets_pwDecrement$whas,
       emac_tx_buffer_rRdPackets_pwIncrement$whas,
       emac_tx_buffer_rWrPackets_pwDecrement$whas,
       emac_tx_buffer_rWrPackets_pwIncrement$whas,
       emac_tx_buffer_wAck$wget,
       emac_tx_buffer_wAck$whas,
       emac_tx_buffer_wCollision$wget,
       emac_tx_buffer_wCollision$whas,
       emac_tx_buffer_wDataOut$whas,
       emac_tx_buffer_wDataValid$wget,
       emac_tx_buffer_wDataValid$whas,
       emac_tx_buffer_wRetransmit$wget,
       emac_tx_buffer_wRetransmit$whas,
       wciRx_wci_Es_mAddrSpace_w$wget,
       wciRx_wci_Es_mAddrSpace_w$whas,
       wciRx_wci_Es_mAddr_w$whas,
       wciRx_wci_Es_mByteEn_w$whas,
       wciRx_wci_Es_mCmd_w$whas,
       wciRx_wci_Es_mData_w$whas,
       wciRx_wslv_ctlAckReg_1$wget,
       wciRx_wslv_ctlAckReg_1$whas,
       wciRx_wslv_reqF_r_clr$whas,
       wciRx_wslv_reqF_r_deq$whas,
       wciRx_wslv_reqF_r_enq$whas,
       wciRx_wslv_respF_dequeueing$whas,
       wciRx_wslv_respF_enqueueing$whas,
       wciRx_wslv_respF_x_wire$whas,
       wciRx_wslv_sFlagReg_1$wget,
       wciRx_wslv_sFlagReg_1$whas,
       wciRx_wslv_sThreadBusy_pw$whas,
       wciRx_wslv_wEdge$whas,
       wciRx_wslv_wciReq$whas,
       wciRx_wslv_wci_cfrd_pw$whas,
       wciRx_wslv_wci_cfwr_pw$whas,
       wciRx_wslv_wci_ctrl_pw$whas,
       wciTx_wci_Es_mAddrSpace_w$wget,
       wciTx_wci_Es_mAddrSpace_w$whas,
       wciTx_wci_Es_mAddr_w$whas,
       wciTx_wci_Es_mByteEn_w$whas,
       wciTx_wci_Es_mCmd_w$whas,
       wciTx_wci_Es_mData_w$whas,
       wciTx_wslv_ctlAckReg_1$wget,
       wciTx_wslv_ctlAckReg_1$whas,
       wciTx_wslv_reqF_r_clr$whas,
       wciTx_wslv_reqF_r_deq$whas,
       wciTx_wslv_reqF_r_enq$whas,
       wciTx_wslv_respF_dequeueing$whas,
       wciTx_wslv_respF_enqueueing$whas,
       wciTx_wslv_respF_x_wire$whas,
       wciTx_wslv_sFlagReg_1$wget,
       wciTx_wslv_sFlagReg_1$whas,
       wciTx_wslv_sThreadBusy_pw$whas,
       wciTx_wslv_wEdge$whas,
       wciTx_wslv_wciReq$whas,
       wciTx_wslv_wci_cfrd_pw$whas,
       wciTx_wslv_wci_cfwr_pw$whas,
       wciTx_wslv_wci_ctrl_pw$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas,
       wti_operateD_1$wget,
       wti_operateD_1$whas,
       wti_wtiReq$whas;

  // register emac_rx_buffer_fifoDeq_taggedReg
  reg [10 : 0] emac_rx_buffer_fifoDeq_taggedReg;
  wire [10 : 0] emac_rx_buffer_fifoDeq_taggedReg$D_IN;
  wire emac_rx_buffer_fifoDeq_taggedReg$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterA_cnt
  reg [2 : 0] emac_rx_buffer_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterA_cnt$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterA_s1
  reg [1 : 0] emac_rx_buffer_memBuffer_serverAdapterA_s1;
  wire [1 : 0] emac_rx_buffer_memBuffer_serverAdapterA_s1$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterA_s1$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterB_cnt
  reg [2 : 0] emac_rx_buffer_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterB_cnt$EN;

  // register emac_rx_buffer_memBuffer_serverAdapterB_s1
  reg [1 : 0] emac_rx_buffer_memBuffer_serverAdapterB_s1;
  wire [1 : 0] emac_rx_buffer_memBuffer_serverAdapterB_s1$D_IN;
  wire emac_rx_buffer_memBuffer_serverAdapterB_s1$EN;

  // register emac_rx_buffer_rData_D1
  reg [7 : 0] emac_rx_buffer_rData_D1;
  wire [7 : 0] emac_rx_buffer_rData_D1$D_IN;
  wire emac_rx_buffer_rData_D1$EN;

  // register emac_rx_buffer_rInPacket
  reg emac_rx_buffer_rInPacket;
  wire emac_rx_buffer_rInPacket$D_IN, emac_rx_buffer_rInPacket$EN;

  // register emac_rx_buffer_rOutPacket
  reg emac_rx_buffer_rOutPacket;
  wire emac_rx_buffer_rOutPacket$D_IN, emac_rx_buffer_rOutPacket$EN;

  // register emac_rx_buffer_rRdCurrPtr
  reg [11 : 0] emac_rx_buffer_rRdCurrPtr;
  wire [11 : 0] emac_rx_buffer_rRdCurrPtr$D_IN;
  wire emac_rx_buffer_rRdCurrPtr$EN;

  // register emac_rx_buffer_rRdPackets_rdCounter
  reg [7 : 0] emac_rx_buffer_rRdPackets_rdCounter;
  wire [7 : 0] emac_rx_buffer_rRdPackets_rdCounter$D_IN;
  wire emac_rx_buffer_rRdPackets_rdCounter$EN;

  // register emac_rx_buffer_rRdPackets_rdCounterPre
  reg [7 : 0] emac_rx_buffer_rRdPackets_rdCounterPre;
  wire [7 : 0] emac_rx_buffer_rRdPackets_rdCounterPre$D_IN;
  wire emac_rx_buffer_rRdPackets_rdCounterPre$EN;

  // register emac_rx_buffer_rRdPackets_rsCounter
  reg [7 : 0] emac_rx_buffer_rRdPackets_rsCounter;
  wire [7 : 0] emac_rx_buffer_rRdPackets_rsCounter$D_IN;
  wire emac_rx_buffer_rRdPackets_rsCounter$EN;

  // register emac_rx_buffer_rRdStartPtr
  reg [11 : 0] emac_rx_buffer_rRdStartPtr;
  wire [11 : 0] emac_rx_buffer_rRdStartPtr$D_IN;
  wire emac_rx_buffer_rRdStartPtr$EN;

  // register emac_rx_buffer_rWrCurrPtr
  reg [11 : 0] emac_rx_buffer_rWrCurrPtr;
  wire [11 : 0] emac_rx_buffer_rWrCurrPtr$D_IN;
  wire emac_rx_buffer_rWrCurrPtr$EN;

  // register emac_rx_buffer_rWrPackets_rdCounter
  reg [7 : 0] emac_rx_buffer_rWrPackets_rdCounter;
  wire [7 : 0] emac_rx_buffer_rWrPackets_rdCounter$D_IN;
  wire emac_rx_buffer_rWrPackets_rdCounter$EN;

  // register emac_rx_buffer_rWrPackets_rdCounterPre
  reg [7 : 0] emac_rx_buffer_rWrPackets_rdCounterPre;
  wire [7 : 0] emac_rx_buffer_rWrPackets_rdCounterPre$D_IN;
  wire emac_rx_buffer_rWrPackets_rdCounterPre$EN;

  // register emac_rx_buffer_rWrPackets_rsCounter
  reg [7 : 0] emac_rx_buffer_rWrPackets_rsCounter;
  wire [7 : 0] emac_rx_buffer_rWrPackets_rsCounter$D_IN;
  wire emac_rx_buffer_rWrPackets_rsCounter$EN;

  // register emac_rx_buffer_rWrStartPtr
  reg [11 : 0] emac_rx_buffer_rWrStartPtr;
  wire [11 : 0] emac_rx_buffer_rWrStartPtr$D_IN;
  wire emac_rx_buffer_rWrStartPtr$EN;

  // register emac_tx_buffer_fifoEnq_taggedReg
  reg [10 : 0] emac_tx_buffer_fifoEnq_taggedReg;
  wire [10 : 0] emac_tx_buffer_fifoEnq_taggedReg$D_IN;
  wire emac_tx_buffer_fifoEnq_taggedReg$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterA_cnt
  reg [2 : 0] emac_tx_buffer_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] emac_tx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterA_cnt$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterA_s1
  reg [1 : 0] emac_tx_buffer_memBuffer_serverAdapterA_s1;
  wire [1 : 0] emac_tx_buffer_memBuffer_serverAdapterA_s1$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterA_s1$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterB_cnt
  reg [2 : 0] emac_tx_buffer_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] emac_tx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterB_cnt$EN;

  // register emac_tx_buffer_memBuffer_serverAdapterB_s1
  reg [1 : 0] emac_tx_buffer_memBuffer_serverAdapterB_s1;
  wire [1 : 0] emac_tx_buffer_memBuffer_serverAdapterB_s1$D_IN;
  wire emac_tx_buffer_memBuffer_serverAdapterB_s1$EN;

  // register emac_tx_buffer_rAcked
  reg emac_tx_buffer_rAcked;
  wire emac_tx_buffer_rAcked$D_IN, emac_tx_buffer_rAcked$EN;

  // register emac_tx_buffer_rIfgDelay
  reg [7 : 0] emac_tx_buffer_rIfgDelay;
  wire [7 : 0] emac_tx_buffer_rIfgDelay$D_IN;
  wire emac_tx_buffer_rIfgDelay$EN;

  // register emac_tx_buffer_rOutPacket
  reg emac_tx_buffer_rOutPacket;
  wire emac_tx_buffer_rOutPacket$D_IN, emac_tx_buffer_rOutPacket$EN;

  // register emac_tx_buffer_rRdCurrPtr
  reg [11 : 0] emac_tx_buffer_rRdCurrPtr;
  reg [11 : 0] emac_tx_buffer_rRdCurrPtr$D_IN;
  wire emac_tx_buffer_rRdCurrPtr$EN;

  // register emac_tx_buffer_rRdPackets_rdCounter
  reg [7 : 0] emac_tx_buffer_rRdPackets_rdCounter;
  wire [7 : 0] emac_tx_buffer_rRdPackets_rdCounter$D_IN;
  wire emac_tx_buffer_rRdPackets_rdCounter$EN;

  // register emac_tx_buffer_rRdPackets_rdCounterPre
  reg [7 : 0] emac_tx_buffer_rRdPackets_rdCounterPre;
  wire [7 : 0] emac_tx_buffer_rRdPackets_rdCounterPre$D_IN;
  wire emac_tx_buffer_rRdPackets_rdCounterPre$EN;

  // register emac_tx_buffer_rRdPackets_rsCounter
  reg [7 : 0] emac_tx_buffer_rRdPackets_rsCounter;
  wire [7 : 0] emac_tx_buffer_rRdPackets_rsCounter$D_IN;
  wire emac_tx_buffer_rRdPackets_rsCounter$EN;

  // register emac_tx_buffer_rRdStartPtr
  reg [11 : 0] emac_tx_buffer_rRdStartPtr;
  wire [11 : 0] emac_tx_buffer_rRdStartPtr$D_IN;
  wire emac_tx_buffer_rRdStartPtr$EN;

  // register emac_tx_buffer_rUnderrun
  reg emac_tx_buffer_rUnderrun;
  wire emac_tx_buffer_rUnderrun$D_IN, emac_tx_buffer_rUnderrun$EN;

  // register emac_tx_buffer_rWrCurrPtr
  reg [11 : 0] emac_tx_buffer_rWrCurrPtr;
  wire [11 : 0] emac_tx_buffer_rWrCurrPtr$D_IN;
  wire emac_tx_buffer_rWrCurrPtr$EN;

  // register emac_tx_buffer_rWrPackets_rdCounter
  reg [7 : 0] emac_tx_buffer_rWrPackets_rdCounter;
  wire [7 : 0] emac_tx_buffer_rWrPackets_rdCounter$D_IN;
  wire emac_tx_buffer_rWrPackets_rdCounter$EN;

  // register emac_tx_buffer_rWrPackets_rdCounterPre
  reg [7 : 0] emac_tx_buffer_rWrPackets_rdCounterPre;
  wire [7 : 0] emac_tx_buffer_rWrPackets_rdCounterPre$D_IN;
  wire emac_tx_buffer_rWrPackets_rdCounterPre$EN;

  // register emac_tx_buffer_rWrPackets_rsCounter
  reg [7 : 0] emac_tx_buffer_rWrPackets_rsCounter;
  wire [7 : 0] emac_tx_buffer_rWrPackets_rsCounter$D_IN;
  wire emac_tx_buffer_rWrPackets_rsCounter$EN;

  // register emac_tx_buffer_rWrStartPtr
  reg [11 : 0] emac_tx_buffer_rWrStartPtr;
  wire [11 : 0] emac_tx_buffer_rWrStartPtr$D_IN;
  wire emac_tx_buffer_rWrStartPtr$EN;

  // register gbeControl
  reg [31 : 0] gbeControl;
  wire [31 : 0] gbeControl$D_IN;
  wire gbeControl$EN;

  // register wciRx_wslv_cEdge
  reg [2 : 0] wciRx_wslv_cEdge;
  wire [2 : 0] wciRx_wslv_cEdge$D_IN;
  wire wciRx_wslv_cEdge$EN;

  // register wciRx_wslv_cState
  reg [2 : 0] wciRx_wslv_cState;
  wire [2 : 0] wciRx_wslv_cState$D_IN;
  wire wciRx_wslv_cState$EN;

  // register wciRx_wslv_ctlAckReg
  reg wciRx_wslv_ctlAckReg;
  wire wciRx_wslv_ctlAckReg$D_IN, wciRx_wslv_ctlAckReg$EN;

  // register wciRx_wslv_ctlOpActive
  reg wciRx_wslv_ctlOpActive;
  wire wciRx_wslv_ctlOpActive$D_IN, wciRx_wslv_ctlOpActive$EN;

  // register wciRx_wslv_illegalEdge
  reg wciRx_wslv_illegalEdge;
  wire wciRx_wslv_illegalEdge$D_IN, wciRx_wslv_illegalEdge$EN;

  // register wciRx_wslv_isReset_isInReset
  reg wciRx_wslv_isReset_isInReset;
  wire wciRx_wslv_isReset_isInReset$D_IN, wciRx_wslv_isReset_isInReset$EN;

  // register wciRx_wslv_nState
  reg [2 : 0] wciRx_wslv_nState;
  reg [2 : 0] wciRx_wslv_nState$D_IN;
  wire wciRx_wslv_nState$EN;

  // register wciRx_wslv_reqF_countReg
  reg [1 : 0] wciRx_wslv_reqF_countReg;
  wire [1 : 0] wciRx_wslv_reqF_countReg$D_IN;
  wire wciRx_wslv_reqF_countReg$EN;

  // register wciRx_wslv_respF_c_r
  reg [1 : 0] wciRx_wslv_respF_c_r;
  wire [1 : 0] wciRx_wslv_respF_c_r$D_IN;
  wire wciRx_wslv_respF_c_r$EN;

  // register wciRx_wslv_respF_q_0
  reg [33 : 0] wciRx_wslv_respF_q_0;
  reg [33 : 0] wciRx_wslv_respF_q_0$D_IN;
  wire wciRx_wslv_respF_q_0$EN;

  // register wciRx_wslv_respF_q_1
  reg [33 : 0] wciRx_wslv_respF_q_1;
  reg [33 : 0] wciRx_wslv_respF_q_1$D_IN;
  wire wciRx_wslv_respF_q_1$EN;

  // register wciRx_wslv_sFlagReg
  reg wciRx_wslv_sFlagReg;
  wire wciRx_wslv_sFlagReg$D_IN, wciRx_wslv_sFlagReg$EN;

  // register wciRx_wslv_sThreadBusy_d
  reg wciRx_wslv_sThreadBusy_d;
  wire wciRx_wslv_sThreadBusy_d$D_IN, wciRx_wslv_sThreadBusy_d$EN;

  // register wciTx_wslv_cEdge
  reg [2 : 0] wciTx_wslv_cEdge;
  wire [2 : 0] wciTx_wslv_cEdge$D_IN;
  wire wciTx_wslv_cEdge$EN;

  // register wciTx_wslv_cState
  reg [2 : 0] wciTx_wslv_cState;
  wire [2 : 0] wciTx_wslv_cState$D_IN;
  wire wciTx_wslv_cState$EN;

  // register wciTx_wslv_ctlAckReg
  reg wciTx_wslv_ctlAckReg;
  wire wciTx_wslv_ctlAckReg$D_IN, wciTx_wslv_ctlAckReg$EN;

  // register wciTx_wslv_ctlOpActive
  reg wciTx_wslv_ctlOpActive;
  wire wciTx_wslv_ctlOpActive$D_IN, wciTx_wslv_ctlOpActive$EN;

  // register wciTx_wslv_illegalEdge
  reg wciTx_wslv_illegalEdge;
  wire wciTx_wslv_illegalEdge$D_IN, wciTx_wslv_illegalEdge$EN;

  // register wciTx_wslv_isReset_isInReset
  reg wciTx_wslv_isReset_isInReset;
  wire wciTx_wslv_isReset_isInReset$D_IN, wciTx_wslv_isReset_isInReset$EN;

  // register wciTx_wslv_nState
  reg [2 : 0] wciTx_wslv_nState;
  reg [2 : 0] wciTx_wslv_nState$D_IN;
  wire wciTx_wslv_nState$EN;

  // register wciTx_wslv_reqF_countReg
  reg [1 : 0] wciTx_wslv_reqF_countReg;
  wire [1 : 0] wciTx_wslv_reqF_countReg$D_IN;
  wire wciTx_wslv_reqF_countReg$EN;

  // register wciTx_wslv_respF_c_r
  reg [1 : 0] wciTx_wslv_respF_c_r;
  wire [1 : 0] wciTx_wslv_respF_c_r$D_IN;
  wire wciTx_wslv_respF_c_r$EN;

  // register wciTx_wslv_respF_q_0
  reg [33 : 0] wciTx_wslv_respF_q_0;
  reg [33 : 0] wciTx_wslv_respF_q_0$D_IN;
  wire wciTx_wslv_respF_q_0$EN;

  // register wciTx_wslv_respF_q_1
  reg [33 : 0] wciTx_wslv_respF_q_1;
  reg [33 : 0] wciTx_wslv_respF_q_1$D_IN;
  wire wciTx_wslv_respF_q_1$EN;

  // register wciTx_wslv_sFlagReg
  reg wciTx_wslv_sFlagReg;
  wire wciTx_wslv_sFlagReg$D_IN, wciTx_wslv_sFlagReg$EN;

  // register wciTx_wslv_sThreadBusy_d
  reg wciTx_wslv_sThreadBusy_d;
  wire wciTx_wslv_sThreadBusy_d$D_IN, wciTx_wslv_sThreadBusy_d$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_isReset_isInReset
  reg wsiM_isReset_isInReset;
  wire wsiM_isReset_isInReset$D_IN, wsiM_isReset_isInReset$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_isReset_isInReset
  reg wsiS_isReset_isInReset;
  wire wsiS_isReset_isInReset$D_IN, wsiS_isReset_isInReset$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // register wti_isReset_isInReset
  reg wti_isReset_isInReset;
  wire wti_isReset_isInReset$D_IN, wti_isReset_isInReset$EN;

  // register wti_nowReq
  reg [66 : 0] wti_nowReq;
  wire [66 : 0] wti_nowReq$D_IN;
  wire wti_nowReq$EN;

  // register wti_operateD
  reg wti_operateD;
  wire wti_operateD$D_IN, wti_operateD$EN;

  // ports of submodule emac_gmii_rx_clk
  wire emac_gmii_rx_clk$O;

  // ports of submodule emac_gmii_rxc_delay
  wire emac_gmii_rxc_delay$DATAOUT;

  // ports of submodule emac_mac
  wire [7 : 0] emac_mac$CLIENTEMACTXD,
	       emac_mac$CLIENTEMACTXIFGDELAY,
	       emac_mac$EMACCLIENTRXD,
	       emac_mac$GMII_RXD,
	       emac_mac$GMII_TXD;
  wire emac_mac$CLIENTEMACTXDVLD,
       emac_mac$CLIENTEMACTXFIRSTBYTE,
       emac_mac$CLIENTEMACTXUNDERRUN,
       emac_mac$EMACCLIENTRXBADFRAME,
       emac_mac$EMACCLIENTRXDVLD,
       emac_mac$EMACCLIENTRXFRAMEDROP,
       emac_mac$EMACCLIENTRXGOODFRAME,
       emac_mac$EMACCLIENTTXACK,
       emac_mac$EMACCLIENTTXCOLLISION,
       emac_mac$EMACCLIENTTXRETRANSMIT,
       emac_mac$GMII_RX_DV,
       emac_mac$GMII_RX_ER,
       emac_mac$GMII_TX_CLK,
       emac_mac$GMII_TX_EN,
       emac_mac$GMII_TX_ER,
       emac_mac$TX_CLK_OUT;

  // ports of submodule emac_macreset_h
  wire emac_macreset_h$OUT_RST_N;

  // ports of submodule emac_macreset_inv
  wire emac_macreset_inv$RESET_OUT;

  // ports of submodule emac_macreset_n
  wire emac_macreset_n$OUT_RST_N;

  // ports of submodule emac_phy_rx_clk
  wire emac_phy_rx_clk$O;

  // ports of submodule emac_rx_buffer_memBuffer_memory
  reg [11 : 0] emac_rx_buffer_memBuffer_memory$ADDRA;
  reg [9 : 0] emac_rx_buffer_memBuffer_memory$DIA;
  wire [11 : 0] emac_rx_buffer_memBuffer_memory$ADDRB;
  wire [9 : 0] emac_rx_buffer_memBuffer_memory$DIB,
	       emac_rx_buffer_memBuffer_memory$DOA,
	       emac_rx_buffer_memBuffer_memory$DOB;
  wire emac_rx_buffer_memBuffer_memory$ENA,
       emac_rx_buffer_memBuffer_memory$ENB,
       emac_rx_buffer_memBuffer_memory$WEA,
       emac_rx_buffer_memBuffer_memory$WEB;

  // ports of submodule emac_rx_buffer_memBuffer_serverAdapterA_outDataCore
  wire [9 : 0] emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN,
	       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT;
  wire emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$CLR,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ,
       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule emac_rx_buffer_memBuffer_serverAdapterB_outDataCore
  wire [9 : 0] emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN,
	       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT;
  wire emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$CLR,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ,
       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule emac_rx_client_rst_n
  wire emac_rx_client_rst_n$OUT_RST_N;

  // ports of submodule emac_tx_buffer_memBuffer_memory
  reg [9 : 0] emac_tx_buffer_memBuffer_memory$DIB;
  wire [11 : 0] emac_tx_buffer_memBuffer_memory$ADDRA,
		emac_tx_buffer_memBuffer_memory$ADDRB;
  wire [9 : 0] emac_tx_buffer_memBuffer_memory$DIA,
	       emac_tx_buffer_memBuffer_memory$DOA,
	       emac_tx_buffer_memBuffer_memory$DOB;
  wire emac_tx_buffer_memBuffer_memory$ENA,
       emac_tx_buffer_memBuffer_memory$ENB,
       emac_tx_buffer_memBuffer_memory$WEA,
       emac_tx_buffer_memBuffer_memory$WEB;

  // ports of submodule emac_tx_buffer_memBuffer_serverAdapterA_outDataCore
  wire [9 : 0] emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN,
	       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT;
  wire emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$CLR,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ,
       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule emac_tx_buffer_memBuffer_serverAdapterB_outDataCore
  wire [9 : 0] emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN,
	       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT;
  wire emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$CLR,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ,
       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule emac_tx_client_rst_n
  wire emac_tx_client_rst_n$OUT_RST_N;

  // ports of submodule wciRx_wslv_reqF
  wire [71 : 0] wciRx_wslv_reqF$D_IN, wciRx_wslv_reqF$D_OUT;
  wire wciRx_wslv_reqF$CLR,
       wciRx_wslv_reqF$DEQ,
       wciRx_wslv_reqF$EMPTY_N,
       wciRx_wslv_reqF$ENQ;

  // ports of submodule wciTx_wslv_reqF
  wire [71 : 0] wciTx_wslv_reqF$D_IN, wciTx_wslv_reqF$D_OUT;
  wire wciTx_wslv_reqF$CLR,
       wciTx_wslv_reqF$DEQ,
       wciTx_wslv_reqF$EMPTY_N,
       wciTx_wslv_reqF$ENQ;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_emac_rx_buffer_commit_packet,
       WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat,
       WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat,
       WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat,
       WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat,
       WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq,
       WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack,
       WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat,
       WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq,
       WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_emac_tx_buffer_transmit_underrun,
       WILL_FIRE_RL_wciRx_wslv_ctl_op_complete,
       WILL_FIRE_RL_wciRx_wslv_ctl_op_start,
       WILL_FIRE_RL_wciRx_wslv_respF_both,
       WILL_FIRE_RL_wciRx_wslv_respF_decCtr,
       WILL_FIRE_RL_wciRx_wslv_respF_incCtr,
       WILL_FIRE_RL_wciTx_wslv_ctl_op_complete,
       WILL_FIRE_RL_wciTx_wslv_ctl_op_start,
       WILL_FIRE_RL_wciTx_wslv_respF_both,
       WILL_FIRE_RL_wciTx_wslv_respF_decCtr,
       WILL_FIRE_RL_wciTx_wslv_respF_incCtr,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wciRx_wslv_respF_q_0$write_1__VAL_2;
  wire [60 : 0] MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_2;
  wire [33 : 0] MUX_wciRx_wslv_respF_q_0$write_1__VAL_1,
		MUX_wciRx_wslv_respF_q_1$write_1__VAL_1,
		MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_wciTx_wslv_respF_q_0$write_1__VAL_1,
		MUX_wciTx_wslv_respF_q_0$write_1__VAL_2,
		MUX_wciTx_wslv_respF_q_1$write_1__VAL_1;
  wire [11 : 0] MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3,
		MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_1,
		MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_2,
		MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_1,
		MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_2,
		MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_2,
		MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3,
		MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_1,
		MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_2;
  wire [10 : 0] MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__VAL_1,
		MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__VAL_1;
  wire [9 : 0] MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1,
	       MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2,
	       MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1,
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2,
	       MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1,
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2;
  wire [7 : 0] MUX_emac_rx_buffer_rRdPackets_rsCounter$write_1__VAL_1,
	       MUX_emac_rx_buffer_rWrPackets_rsCounter$write_1__VAL_1,
	       MUX_emac_tx_buffer_rRdPackets_rsCounter$write_1__VAL_1,
	       MUX_emac_tx_buffer_rWrPackets_rsCounter$write_1__VAL_1;
  wire [1 : 0] MUX_wciRx_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wciRx_wslv_respF_c_r$write_1__VAL_2,
	       MUX_wciTx_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wciTx_wslv_respF_c_r$write_1__VAL_2,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2,
       MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1,
       MUX_emac_rx_buffer_rInPacket$write_1__SEL_1,
       MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1,
       MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__SEL_2,
       MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1,
       MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_2,
       MUX_emac_tx_buffer_rAcked$write_1__SEL_1,
       MUX_wciRx_wslv_illegalEdge$write_1__SEL_1,
       MUX_wciRx_wslv_illegalEdge$write_1__SEL_2,
       MUX_wciRx_wslv_illegalEdge$write_1__VAL_2,
       MUX_wciRx_wslv_respF_q_0$write_1__SEL_2,
       MUX_wciRx_wslv_respF_q_1$write_1__SEL_2,
       MUX_wciTx_wslv_illegalEdge$write_1__SEL_1,
       MUX_wciTx_wslv_illegalEdge$write_1__SEL_2,
       MUX_wciTx_wslv_illegalEdge$write_1__VAL_2,
       MUX_wciTx_wslv_respF_q_0$write_1__SEL_2,
       MUX_wciTx_wslv_respF_q_1$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h3613,
	       v__h3787,
	       v__h39169,
	       v__h3931,
	       v__h39323,
	       v__h8067,
	       v__h8241,
	       v__h8385;
  reg [31 : 0] _theResult____h39307;
  reg [1 : 0] CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10,
	      CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5,
	      CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8,
	      CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9,
	      CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11,
	      CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12,
	      CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15,
	      CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4;
  wire [31 : 0] IF_emac_rx_buffer_rRdPackets_rsCounter_99_BIT__ETC___d1575,
		IF_emac_rx_buffer_rRdPackets_rsCounter_99_BIT__ETC___d1576,
		IF_emac_rx_buffer_rWrPackets_rsCounter_69_BIT__ETC___d1570,
		IF_emac_rx_buffer_rWrPackets_rsCounter_69_BIT__ETC___d1571,
		IF_emac_tx_buffer_rRdPackets_rsCounter_069_BIT_ETC___d1585,
		IF_emac_tx_buffer_rRdPackets_rsCounter_069_BIT_ETC___d1586,
		IF_emac_tx_buffer_rWrPackets_rsCounter_52_BIT__ETC___d1580,
		IF_emac_tx_buffer_rWrPackets_rsCounter_52_BIT__ETC___d1581,
		status__h39242,
		x_data__h38664;
  wire [15 : 0] x__h39388;
  wire [11 : 0] x_burstLength__h38663;
  wire [7 : 0] x__h17130,
	       x__h23727,
	       x__h27913,
	       x__h34664,
	       x__h38728,
	       y__h17795,
	       y__h24392,
	       y__h28578,
	       y__h35329;
  wire [2 : 0] emac_rx_buffer_memBuffer_serverAdapterB_cnt_45_ETC___d651,
	       emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1034;
  wire [1 : 0] ab__h21855, ab__h32590;
  wire IF_emac_rx_buffer_fifoDeq_rw_enq_whas__86_THEN_ETC___d1333,
       IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1577,
       IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1578,
       emac_rx_buffer_memBuffer_serverAdapterA_cnt_65_ETC___d758,
       emac_rx_buffer_memBuffer_serverAdapterB_cnt_45_ETC___d807,
       emac_rx_buffer_memBuffer_serverAdapterB_outDat_ETC___d831,
       emac_rx_buffer_rRdPackets_rsCounter_99_BIT_0_0_ETC___d1497,
       emac_rx_buffer_rWrPackets_rsCounter_69_BIT_0_7_ETC___d1496,
       emac_rx_buffer_wBadFrame_wget__81_OR_emac_rx_b_ETC___d805,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1159,
       emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1172,
       emac_tx_buffer_memBuffer_serverAdapterB_outDat_ETC___d1192,
       emac_tx_buffer_rRdPackets_rsCounter_069_BIT_0__ETC___d1499,
       emac_tx_buffer_rWrPackets_rsCounter_52_BIT_0_5_ETC___d1498,
       z__h17150,
       z__h17157,
       z__h17164,
       z__h17171,
       z__h17178,
       z__h17185,
       z__h23747,
       z__h23754,
       z__h23761,
       z__h23768,
       z__h23775,
       z__h23782,
       z__h27933,
       z__h27940,
       z__h27947,
       z__h27954,
       z__h27961,
       z__h27968,
       z__h34684,
       z__h34691,
       z__h34698,
       z__h34705,
       z__h34712,
       z__h34719;

  // oscillator and gates for output clock CLK_gmii_tx_clk
  assign CLK_gmii_tx_clk = emac_mac$GMII_TX_CLK ;
  assign CLK_GATE_gmii_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclk
  assign CLK_rxclk = emac_phy_rx_clk$O ;
  assign CLK_GATE_rxclk = 1'b1 ;

  // output resets
  assign RST_N_mrst_n = emac_macreset_n$OUT_RST_N ;

  // value method wciS0_sResp
  assign wciS0_SResp = wciRx_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wciRx_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wciRx_wslv_reqF_countReg > 2'd1 || wciRx_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wciRx_wslv_sFlagReg } ;

  // value method wciS1_sResp
  assign wciS1_SResp = wciTx_wslv_respF_q_0[33:32] ;

  // value method wciS1_sData
  assign wciS1_SData = wciTx_wslv_respF_q_0[31:0] ;

  // value method wciS1_sThreadBusy
  assign wciS1_SThreadBusy =
	     wciTx_wslv_reqF_countReg > 2'd1 || wciTx_wslv_isReset_isInReset ;

  // value method wciS1_sFlag
  assign wciS1_SFlag = { 1'd1, wciTx_wslv_sFlagReg } ;

  // value method wtiS0_sThreadBusy
  assign wtiS0_SThreadBusy = wti_isReset_isInReset ;

  // value method wtiS0_sReset_n
  assign wtiS0_SReset_n = !wti_isReset_isInReset && wti_operateD ;

  // value method wsiM0_mCmd
  assign wsiM0_MCmd = wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;

  // value method wsiM0_mReqLast
  assign wsiM0_MReqLast = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;

  // value method wsiM0_mBurstPrecise
  assign wsiM0_MBurstPrecise = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;

  // value method wsiM0_mBurstLength
  assign wsiM0_MBurstLength =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;

  // value method wsiM0_mData
  assign wsiM0_MData = wsiM_reqFifo_q_0[43:12] ;

  // value method wsiM0_mByteEn
  assign wsiM0_MByteEn = wsiM_reqFifo_q_0[11:8] ;

  // value method wsiM0_mReqInfo
  assign wsiM0_MReqInfo = wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;

  // value method wsiM0_mReset_n
  assign wsiM0_MReset_n = !wsiM_isReset_isInReset && wsiM_operateD ;

  // value method wsiS0_sThreadBusy
  assign wsiS0_SThreadBusy =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;

  // value method wsiS0_sReset_n
  assign wsiS0_SReset_n = !wsiS_isReset_isInReset && wsiS_operateD ;

  // value method gmii_txd
  assign gmii_txd = emac_mac$GMII_TXD ;

  // value method gmii_tx_en
  assign gmii_tx_en = emac_mac$GMII_TX_EN ;

  // value method gmii_tx_er
  assign gmii_tx_er = emac_mac$GMII_TX_ER ;

  // submodule emac_gmii_rx_clk
  BUFIO emac_gmii_rx_clk(.I(emac_gmii_rxc_delay$DATAOUT),
			 .O(emac_gmii_rx_clk$O));

  // submodule emac_gmii_rxc_delay
  IODELAY #(.IDELAY_TYPE("FIXED"),
	    .IDELAY_VALUE(32'd0),
	    .DELAY_SRC("I"),
	    .SIGNAL_PATTERN("CLOCK"),
	    .HIGH_PERFORMANCE_MODE("TRUE")) emac_gmii_rxc_delay(.IDATAIN(CLK_gmii_rx_clk),
								.ODATAIN(32'd0),
								.DATAIN(32'd0),
								.C(32'd0),
								.T(32'd0),
								.CE(32'd0),
								.INC(32'd0),
								.RST(32'd0),
								.DATAOUT(emac_gmii_rxc_delay$DATAOUT));

  // submodule emac_mac
  v6_emac_v1_3_block emac_mac(.TX_CLK(CLK_sys1_clk),
			      .RESET(emac_macreset_h$OUT_RST_N),
			      .GMII_RX_CLK(emac_gmii_rx_clk$O),
			      .PHY_RX_CLK(emac_phy_rx_clk$O),
			      .CLIENTEMACPAUSEREQ(32'd0),
			      .CLIENTEMACPAUSEVAL(32'd0),
			      .CLIENTEMACTXD(emac_mac$CLIENTEMACTXD),
			      .CLIENTEMACTXDVLD(emac_mac$CLIENTEMACTXDVLD),
			      .CLIENTEMACTXFIRSTBYTE(emac_mac$CLIENTEMACTXFIRSTBYTE),
			      .CLIENTEMACTXIFGDELAY(emac_mac$CLIENTEMACTXIFGDELAY),
			      .CLIENTEMACTXUNDERRUN(emac_mac$CLIENTEMACTXUNDERRUN),
			      .GMII_RXD(emac_mac$GMII_RXD),
			      .GMII_RX_DV(emac_mac$GMII_RX_DV),
			      .GMII_RX_ER(emac_mac$GMII_RX_ER),
			      .GMII_TXD(emac_mac$GMII_TXD),
			      .GMII_TX_EN(emac_mac$GMII_TX_EN),
			      .GMII_TX_ER(emac_mac$GMII_TX_ER),
			      .EMACCLIENTRXD(emac_mac$EMACCLIENTRXD),
			      .EMACCLIENTRXDVLD(emac_mac$EMACCLIENTRXDVLD),
			      .EMACCLIENTRXGOODFRAME(emac_mac$EMACCLIENTRXGOODFRAME),
			      .EMACCLIENTRXBADFRAME(emac_mac$EMACCLIENTRXBADFRAME),
			      .EMACCLIENTRXFRAMEDROP(emac_mac$EMACCLIENTRXFRAMEDROP),
			      .EMACCLIENTRXSTATS(),
			      .EMACCLIENTRXSTATSVLD(),
			      .EMACCLIENTRXSTATSBYTEVLD(),
			      .EMACCLIENTTXACK(emac_mac$EMACCLIENTTXACK),
			      .EMACCLIENTTXCOLLISION(emac_mac$EMACCLIENTTXCOLLISION),
			      .EMACCLIENTTXRETRANSMIT(emac_mac$EMACCLIENTTXRETRANSMIT),
			      .EMACCLIENTTXSTATS(),
			      .EMACCLIENTTXSTATSVLD(),
			      .EMACCLIENTTXSTATSBYTEVLD(),
			      .GMII_TX_CLK(emac_mac$GMII_TX_CLK),
			      .TX_CLK_OUT(emac_mac$TX_CLK_OUT));

  // submodule emac_macreset_h
  SyncResetA #(.RSTDELAY(32'd0)) emac_macreset_h(.CLK(CLK_sys1_clk),
						 .IN_RST_N(emac_macreset_inv$RESET_OUT),
						 .OUT_RST_N(emac_macreset_h$OUT_RST_N));

  // submodule emac_macreset_inv
  ResetInverter emac_macreset_inv(.RESET_IN(wciS0_MReset_n),
				  .RESET_OUT(emac_macreset_inv$RESET_OUT));

  // submodule emac_macreset_n
  SyncResetA #(.RSTDELAY(32'd11)) emac_macreset_n(.CLK(wciS0_Clk),
						  .IN_RST_N(wciS0_MReset_n),
						  .OUT_RST_N(emac_macreset_n$OUT_RST_N));

  // submodule emac_phy_rx_clk
  BUFR #(.BUFR_DIVIDE("BYPASS")) emac_phy_rx_clk(.I(emac_gmii_rxc_delay$DATAOUT),
						 .CE(1'd1),
						 .CLR(1'd0),
						 .O(emac_phy_rx_clk$O));

  // submodule emac_rx_buffer_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd10),
	  .MEMSIZE(13'd4096)) emac_rx_buffer_memBuffer_memory(.CLKA(emac_phy_rx_clk$O),
							      .CLKB(wciS0_Clk),
							      .ADDRA(emac_rx_buffer_memBuffer_memory$ADDRA),
							      .ADDRB(emac_rx_buffer_memBuffer_memory$ADDRB),
							      .DIA(emac_rx_buffer_memBuffer_memory$DIA),
							      .DIB(emac_rx_buffer_memBuffer_memory$DIB),
							      .WEA(emac_rx_buffer_memBuffer_memory$WEA),
							      .WEB(emac_rx_buffer_memBuffer_memory$WEB),
							      .ENA(emac_rx_buffer_memBuffer_memory$ENA),
							      .ENB(emac_rx_buffer_memBuffer_memory$ENB),
							      .DOA(emac_rx_buffer_memBuffer_memory$DOA),
							      .DOB(emac_rx_buffer_memBuffer_memory$DOB));

  // submodule emac_rx_buffer_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_rx_buffer_memBuffer_serverAdapterA_outDataCore(.RST_N(emac_rx_client_rst_n$OUT_RST_N),
										   .CLK(emac_phy_rx_clk$O),
										   .D_IN(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN),
										   .ENQ(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ),
										   .DEQ(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ),
										   .CLR(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$CLR),
										   .D_OUT(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT),
										   .FULL_N(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N),
										   .EMPTY_N(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N));

  // submodule emac_rx_buffer_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_rx_buffer_memBuffer_serverAdapterB_outDataCore(.RST_N(wciS0_MReset_n),
										   .CLK(wciS0_Clk),
										   .D_IN(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN),
										   .ENQ(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ),
										   .DEQ(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ),
										   .CLR(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$CLR),
										   .D_OUT(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT),
										   .FULL_N(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N),
										   .EMPTY_N(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N));

  // submodule emac_rx_client_rst_n
  SyncResetA #(.RSTDELAY(32'd11)) emac_rx_client_rst_n(.CLK(emac_phy_rx_clk$O),
						       .IN_RST_N(wciS0_MReset_n),
						       .OUT_RST_N(emac_rx_client_rst_n$OUT_RST_N));

  // submodule emac_tx_buffer_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd10),
	  .MEMSIZE(13'd4096)) emac_tx_buffer_memBuffer_memory(.CLKA(wciS0_Clk),
							      .CLKB(emac_mac$TX_CLK_OUT),
							      .ADDRA(emac_tx_buffer_memBuffer_memory$ADDRA),
							      .ADDRB(emac_tx_buffer_memBuffer_memory$ADDRB),
							      .DIA(emac_tx_buffer_memBuffer_memory$DIA),
							      .DIB(emac_tx_buffer_memBuffer_memory$DIB),
							      .WEA(emac_tx_buffer_memBuffer_memory$WEA),
							      .WEB(emac_tx_buffer_memBuffer_memory$WEB),
							      .ENA(emac_tx_buffer_memBuffer_memory$ENA),
							      .ENB(emac_tx_buffer_memBuffer_memory$ENB),
							      .DOA(emac_tx_buffer_memBuffer_memory$DOA),
							      .DOB(emac_tx_buffer_memBuffer_memory$DOB));

  // submodule emac_tx_buffer_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_tx_buffer_memBuffer_serverAdapterA_outDataCore(.RST_N(wciS0_MReset_n),
										   .CLK(wciS0_Clk),
										   .D_IN(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN),
										   .ENQ(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ),
										   .DEQ(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ),
										   .CLR(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$CLR),
										   .D_OUT(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT),
										   .FULL_N(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N),
										   .EMPTY_N(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N));

  // submodule emac_tx_buffer_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd10),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) emac_tx_buffer_memBuffer_serverAdapterB_outDataCore(.RST_N(emac_tx_client_rst_n$OUT_RST_N),
										   .CLK(emac_mac$TX_CLK_OUT),
										   .D_IN(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN),
										   .ENQ(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ),
										   .DEQ(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ),
										   .CLR(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$CLR),
										   .D_OUT(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT),
										   .FULL_N(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N),
										   .EMPTY_N(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N));

  // submodule emac_tx_client_rst_n
  SyncResetA #(.RSTDELAY(32'd11)) emac_tx_client_rst_n(.CLK(emac_mac$TX_CLK_OUT),
						       .IN_RST_N(wciS0_MReset_n),
						       .OUT_RST_N(emac_tx_client_rst_n$OUT_RST_N));

  // submodule wciRx_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wciRx_wslv_reqF(.RST_N(wciS0_MReset_n),
					       .CLK(wciS0_Clk),
					       .D_IN(wciRx_wslv_reqF$D_IN),
					       .ENQ(wciRx_wslv_reqF$ENQ),
					       .DEQ(wciRx_wslv_reqF$DEQ),
					       .CLR(wciRx_wslv_reqF$CLR),
					       .D_OUT(wciRx_wslv_reqF$D_OUT),
					       .FULL_N(),
					       .EMPTY_N(wciRx_wslv_reqF$EMPTY_N));

  // submodule wciTx_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wciTx_wslv_reqF(.RST_N(wciS0_MReset_n),
					       .CLK(wciS0_Clk),
					       .D_IN(wciTx_wslv_reqF$D_IN),
					       .ENQ(wciTx_wslv_reqF$ENQ),
					       .DEQ(wciTx_wslv_reqF$DEQ),
					       .CLR(wciTx_wslv_reqF$CLR),
					       .D_OUT(wciTx_wslv_reqF$D_OUT),
					       .FULL_N(),
					       .EMPTY_N(wciTx_wslv_reqF$EMPTY_N));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wciRx_wslv_reqF$EMPTY_N && wciRx_wslv_respF_c_r != 2'd2 &&
	     wciRx_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wciRx_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wciRx_wslv_ctl_op_complete ;

  // rule RL_wciRx_wslv_ctl_op_start
  assign WILL_FIRE_RL_wciRx_wslv_ctl_op_start =
	     wciRx_wslv_reqF$EMPTY_N && wciRx_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wciRx_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign WILL_FIRE_RL_wci_ctrl_EiI =
	     wciRx_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_start &&
	     wciRx_wslv_cState == 3'd0 &&
	     wciRx_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wciRx_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_start &&
	     wciRx_wslv_cState == 3'd1 &&
	     wciRx_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wciRx_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_start &&
	     wciRx_wslv_cState == 3'd2 &&
	     wciRx_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_wciTx_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wciTx_wslv_ctl_op_complete =
	     wciTx_wslv_respF_c_r != 2'd2 && wciTx_wslv_ctlOpActive &&
	     wciTx_wslv_ctlAckReg ;

  // rule RL_wciTx_wslv_ctl_op_start
  assign WILL_FIRE_RL_wciTx_wslv_ctl_op_start =
	     wciTx_wslv_reqF$EMPTY_N && wciTx_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wciTx_wslv_ctl_op_complete ;

  // rule RL_wciTx_wslv_respF_incCtr
  assign WILL_FIRE_RL_wciTx_wslv_respF_incCtr =
	     ((wciTx_wslv_respF_c_r == 2'd0) ?
		WILL_FIRE_RL_wciTx_wslv_ctl_op_complete :
		wciTx_wslv_respF_c_r != 2'd1 ||
		WILL_FIRE_RL_wciTx_wslv_ctl_op_complete) &&
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete &&
	     !(wciTx_wslv_respF_c_r != 2'd0) ;

  // rule RL_wciTx_wslv_respF_decCtr
  assign WILL_FIRE_RL_wciTx_wslv_respF_decCtr =
	     wciTx_wslv_respF_c_r != 2'd0 &&
	     !WILL_FIRE_RL_wciTx_wslv_ctl_op_complete ;

  // rule RL_wciTx_wslv_respF_both
  assign WILL_FIRE_RL_wciTx_wslv_respF_both =
	     ((wciTx_wslv_respF_c_r == 2'd1) ?
		WILL_FIRE_RL_wciTx_wslv_ctl_op_complete :
		wciTx_wslv_respF_c_r != 2'd2 ||
		WILL_FIRE_RL_wciTx_wslv_ctl_op_complete) &&
	     wciTx_wslv_respF_c_r != 2'd0 &&
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete ;

  // rule RL_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wciRx_wslv_reqF$EMPTY_N && wciRx_wslv_respF_c_r != 2'd2 &&
	     wciRx_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_wciRx_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wciRx_wslv_ctl_op_complete ;

  // rule RL_emac_rx_buffer_enqueue_first_beat
  assign WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt_65_ETC___d758 &&
	     emac_mac$EMACCLIENTRXDVLD &&
	     !emac_rx_buffer_rInPacket ;

  // rule RL_emac_rx_buffer_enqueue_next_data_beat
  assign WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt_65_ETC___d758 &&
	     emac_mac$EMACCLIENTRXDVLD &&
	     !emac_mac$EMACCLIENTRXGOODFRAME &&
	     !emac_mac$EMACCLIENTRXBADFRAME &&
	     !emac_mac$EMACCLIENTRXFRAMEDROP &&
	     emac_rx_buffer_rInPacket ;

  // rule RL_emac_rx_buffer_commit_packet
  assign WILL_FIRE_RL_emac_rx_buffer_commit_packet =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt_65_ETC___d758 &&
	     emac_mac$EMACCLIENTRXGOODFRAME &&
	     !emac_mac$EMACCLIENTRXFRAMEDROP &&
	     emac_rx_buffer_rInPacket ;

  // rule RL_emac_rx_buffer_dequeue_first_beat
  assign WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt_45_ETC___d807 &&
	     emac_rx_buffer_rWrPackets_rdCounter !=
	     emac_rx_buffer_rRdPackets_rsCounter &&
	     !emac_rx_buffer_rOutPacket ;

  // rule RL_emac_rx_buffer_dequeue_next_beat
  assign WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat =
	     (emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas) &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outDat_ETC___d831 &&
	     emac_rx_buffer_rOutPacket ;

  // rule RL_wciRx_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wciRx_wslv_ctl_op_complete =
	     wciRx_wslv_respF_c_r != 2'd2 && wciRx_wslv_ctlOpActive &&
	     wciRx_wslv_ctlAckReg ;

  // rule RL_wciRx_wslv_respF_incCtr
  assign WILL_FIRE_RL_wciRx_wslv_respF_incCtr =
	     ((wciRx_wslv_respF_c_r == 2'd0) ?
		wciRx_wslv_respF_enqueueing$whas :
		wciRx_wslv_respF_c_r != 2'd1 ||
		wciRx_wslv_respF_enqueueing$whas) &&
	     wciRx_wslv_respF_enqueueing$whas &&
	     !(wciRx_wslv_respF_c_r != 2'd0) ;

  // rule RL_wciRx_wslv_respF_decCtr
  assign WILL_FIRE_RL_wciRx_wslv_respF_decCtr =
	     wciRx_wslv_respF_c_r != 2'd0 &&
	     !wciRx_wslv_respF_enqueueing$whas ;

  // rule RL_wciRx_wslv_respF_both
  assign WILL_FIRE_RL_wciRx_wslv_respF_both =
	     ((wciRx_wslv_respF_c_r == 2'd1) ?
		wciRx_wslv_respF_enqueueing$whas :
		wciRx_wslv_respF_c_r != 2'd2 ||
		wciRx_wslv_respF_enqueueing$whas) &&
	     wciRx_wslv_respF_c_r != 2'd0 &&
	     wciRx_wslv_respF_enqueueing$whas ;

  // rule RL_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 :
		wsiM_reqFifo_c_r != 2'd1 ||
		MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2) &&
	     MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 &&
	     !WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     !MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 ;

  // rule RL_wsiM_reqFifo_both
  assign WILL_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 :
		wsiM_reqFifo_c_r != 2'd2 ||
		MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2) &&
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 ;

  // rule RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;

  // rule RL_emac_rx_buffer_fifoDeq_rule_enq
  assign WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     !MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 ;

  // rule RL_emac_tx_buffer_enqueue_first_data_beat
  assign WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat =
	     (emac_tx_buffer_fifoEnq_taggedReg[10] ||
	      MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3) &&
	     (emac_tx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1577 ;

  // rule RL_emac_tx_buffer_enqueue_next_data_beat
  assign WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat =
	     (emac_tx_buffer_fifoEnq_taggedReg[10] ||
	      MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3) &&
	     (emac_tx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1578 ;

  // rule RL_emac_tx_buffer_enqueue_last_data_beat
  assign WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat =
	     (emac_tx_buffer_fifoEnq_taggedReg[10] ||
	      MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3) &&
	     (emac_tx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
		emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] != 2'd0 &&
		emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] != 2'd1 :
		emac_tx_buffer_fifoEnq_taggedReg[10] &&
		emac_tx_buffer_fifoEnq_taggedReg[9:8] != 2'd0 &&
		emac_tx_buffer_fifoEnq_taggedReg[9:8] != 2'd1) ;

  // rule RL_emac_tx_buffer_dequeue_first_data_beat
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1159 &&
	     emac_tx_buffer_rWrPackets_rdCounter !=
	     emac_tx_buffer_rRdPackets_rsCounter &&
	     !emac_tx_buffer_rOutPacket ;

  // rule RL_emac_tx_buffer_fifoEnq_rule_enq
  assign WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 &&
	     !MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__SEL_2 ;

  // rule RL_emac_tx_buffer_dequeue_wait_for_ack
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1172 &&
	     emac_tx_buffer_rOutPacket &&
	     !emac_tx_buffer_rAcked &&
	     !emac_mac$EMACCLIENTTXACK ;

  // rule RL_emac_tx_buffer_dequeue_got_ack
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1172 &&
	     emac_tx_buffer_rOutPacket &&
	     !emac_tx_buffer_rAcked &&
	     emac_mac$EMACCLIENTTXACK ;

  // rule RL_emac_tx_buffer_dequeue_next_data_beat
  assign WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDat_ETC___d1192 &&
	     emac_tx_buffer_rOutPacket &&
	     emac_tx_buffer_rAcked ;

  // rule RL_emac_tx_buffer_transmit_underrun
  assign WILL_FIRE_RL_emac_tx_buffer_transmit_underrun =
	     emac_tx_buffer_rOutPacket &&
	     !WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     !WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack &&
	     !WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;

  // rule RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_reqFifo$FULL_N && wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 =
	     wsiM_reqFifo_c_r != 2'd2 &&
	     (emac_rx_buffer_fifoDeq_taggedReg[10] ||
	      WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat) &&
	     wciRx_wslv_cState == 3'd2 ;
  assign MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd0 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd1) ;
  assign MUX_emac_rx_buffer_rInPacket$write_1__SEL_1 =
	     emac_rx_buffer_wBadFrame_wget__81_OR_emac_rx_b_ETC___d805 ||
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ;
  assign MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ;
  assign MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__SEL_2 =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ;
  assign MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	     2'd1 ;
  assign MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;
  assign MUX_emac_tx_buffer_rAcked$write_1__SEL_1 =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ;
  assign MUX_wciRx_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_complete &&
	     wciRx_wslv_illegalEdge ;
  assign MUX_wciRx_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_start &&
	     (wciRx_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      wciRx_wslv_cState != 3'd0 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      wciRx_wslv_cState != 3'd1 &&
	      wciRx_wslv_cState != 3'd3 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      wciRx_wslv_cState != 3'd2 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      wciRx_wslv_cState != 3'd3 &&
	      wciRx_wslv_cState != 3'd2 &&
	      wciRx_wslv_cState != 3'd1 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wciRx_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wciRx_wslv_respF_incCtr &&
	     wciRx_wslv_respF_c_r == 2'd0 ;
  assign MUX_wciRx_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wciRx_wslv_respF_incCtr &&
	     wciRx_wslv_respF_c_r == 2'd1 ;
  assign MUX_wciTx_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete &&
	     wciTx_wslv_illegalEdge ;
  assign MUX_wciTx_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_start &&
	     (wciTx_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      wciTx_wslv_cState != 3'd0 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      wciTx_wslv_cState != 3'd1 &&
	      wciTx_wslv_cState != 3'd3 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      wciTx_wslv_cState != 3'd2 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      wciTx_wslv_cState != 3'd3 &&
	      wciTx_wslv_cState != 3'd2 &&
	      wciTx_wslv_cState != 3'd1 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wciTx_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wciTx_wslv_respF_incCtr &&
	     wciTx_wslv_respF_c_r == 2'd0 ;
  assign MUX_wciTx_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wciTx_wslv_respF_incCtr &&
	     wciTx_wslv_respF_c_r == 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     wsiS_reqFifo$EMPTY_N && !emac_tx_buffer_fifoEnq_taggedReg[10] &&
	     wciRx_wslv_cState == 3'd2 ;
  assign MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__VAL_1 =
	     { 1'd1,
	       CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10,
	       emac_rx_buffer_fifoDeq_rw_enq$wget[7:0] } ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3 =
	     emac_rx_buffer_rWrCurrPtr - 12'd1 ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1 =
	     { 2'd0, emac_mac$EMACCLIENTRXD } ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2 =
	     { 2'd1, emac_mac$EMACCLIENTRXD } ;
  assign MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3 =
	     { 2'd2, emac_rx_buffer_rData_D1 } ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1,
	       emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6,
	       emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[7:0] } ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2,
	       emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[7:0] } ;
  assign MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_1 =
	     emac_rx_buffer_rRdCurrPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_2 =
	     emac_rx_buffer_rRdStartPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rRdPackets_rsCounter$write_1__VAL_1 =
	     (~emac_rx_buffer_rRdPackets_rsCounter[IF_emac_rx_buffer_rRdPackets_rsCounter_99_BIT__ETC___d1576[2:0]]) ?
	       emac_rx_buffer_rRdPackets_rsCounter | x__h23727 :
	       emac_rx_buffer_rRdPackets_rsCounter & y__h24392 ;
  assign MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_1 =
	     emac_rx_buffer_rWrStartPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_2 =
	     emac_rx_buffer_rWrCurrPtr + 12'd1 ;
  assign MUX_emac_rx_buffer_rWrPackets_rsCounter$write_1__VAL_1 =
	     (~emac_rx_buffer_rWrPackets_rsCounter[IF_emac_rx_buffer_rWrPackets_rsCounter_69_BIT__ETC___d1571[2:0]]) ?
	       emac_rx_buffer_rWrPackets_rsCounter | x__h17130 :
	       emac_rx_buffer_rWrPackets_rsCounter & y__h17795 ;
  assign MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__VAL_1 =
	     { 1'd1,
	       CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11,
	       emac_tx_buffer_fifoEnq_rw_enq$wget[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1 =
	     { IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1577 ?
		 2'd0 :
		 (IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1578 ?
		    2'd1 :
		    2'd2),
	       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
		 emac_tx_buffer_fifoEnq_rw_enq$wget[7:0] :
		 emac_tx_buffer_fifoEnq_taggedReg[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3,
	       emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13,
	       emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4,
	       emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[7:0] } ;
  assign MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 =
	     { CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15,
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[7:0] } ;
  assign MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_2 =
	     emac_tx_buffer_rRdStartPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3 =
	     emac_tx_buffer_rRdCurrPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rRdPackets_rsCounter$write_1__VAL_1 =
	     (~emac_tx_buffer_rRdPackets_rsCounter[IF_emac_tx_buffer_rRdPackets_rsCounter_069_BIT_ETC___d1586[2:0]]) ?
	       emac_tx_buffer_rRdPackets_rsCounter | x__h34664 :
	       emac_tx_buffer_rRdPackets_rsCounter & y__h35329 ;
  assign MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_1 =
	     emac_tx_buffer_rWrStartPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_2 =
	     emac_tx_buffer_rWrCurrPtr + 12'd1 ;
  assign MUX_emac_tx_buffer_rWrPackets_rsCounter$write_1__VAL_1 =
	     (~emac_tx_buffer_rWrPackets_rsCounter[IF_emac_tx_buffer_rWrPackets_rsCounter_52_BIT__ETC___d1581[2:0]]) ?
	       emac_tx_buffer_rWrPackets_rsCounter | x__h27913 :
	       emac_tx_buffer_rWrPackets_rsCounter & y__h28578 ;
  assign MUX_wciRx_wslv_illegalEdge$write_1__VAL_2 =
	     wciRx_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wciRx_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wciRx_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wciRx_wslv_respF_c_r$write_1__VAL_1 =
	     wciRx_wslv_respF_c_r + 2'd1 ;
  assign MUX_wciRx_wslv_respF_c_r$write_1__VAL_2 =
	     wciRx_wslv_respF_c_r - 2'd1 ;
  assign MUX_wciRx_wslv_respF_q_0$write_1__VAL_1 =
	     (wciRx_wslv_respF_c_r == 2'd1) ?
	       MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 :
	       wciRx_wslv_respF_q_1 ;
  always@(WILL_FIRE_RL_wciRx_wslv_ctl_op_complete or
	  MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciRx_wslv_ctl_op_complete:
	  MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wciRx_wslv_respF_q_1$write_1__VAL_1 =
	     (wciRx_wslv_respF_c_r == 2'd2) ?
	       MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_1 =
	     wciRx_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wciRx_wslv_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h39307 } ;
  assign MUX_wciTx_wslv_illegalEdge$write_1__VAL_2 =
	     wciTx_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wciTx_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wciTx_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wciTx_wslv_respF_c_r$write_1__VAL_1 =
	     wciTx_wslv_respF_c_r + 2'd1 ;
  assign MUX_wciTx_wslv_respF_c_r$write_1__VAL_2 =
	     wciTx_wslv_respF_c_r - 2'd1 ;
  assign MUX_wciTx_wslv_respF_q_0$write_1__VAL_1 =
	     (wciTx_wslv_respF_c_r == 2'd1) ?
	       MUX_wciTx_wslv_respF_q_0$write_1__VAL_2 :
	       wciTx_wslv_respF_q_1 ;
  assign MUX_wciTx_wslv_respF_q_0$write_1__VAL_2 =
	     wciTx_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wciTx_wslv_respF_q_1$write_1__VAL_1 =
	     (wciTx_wslv_respF_c_r == 2'd2) ?
	       MUX_wciTx_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     { 3'd1,
	       IF_emac_rx_buffer_fifoDeq_rw_enq_whas__86_THEN_ETC___d1333,
	       1'd0,
	       x_burstLength__h38663,
	       x_data__h38664,
	       12'd3840 } ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign wciRx_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wciRx_wslv_wciReq$whas = 1'd1 ;
  assign wciRx_wslv_respF_x_wire$wget =
	     MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 ;
  assign wciRx_wslv_respF_x_wire$whas = wciRx_wslv_respF_enqueueing$whas ;
  assign wciRx_wslv_wEdge$wget = wciRx_wslv_reqF$D_OUT[36:34] ;
  assign wciRx_wslv_wEdge$whas = WILL_FIRE_RL_wciRx_wslv_ctl_op_start ;
  assign wciRx_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wciRx_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wciRx_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wciRx_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wciRx_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wciRx_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wciRx_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wciRx_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wciRx_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wciRx_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wciRx_wci_Es_mData_w$wget = wciS0_MData ;
  assign wciRx_wci_Es_mData_w$whas = 1'd1 ;
  assign wciRx_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wciRx_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wciTx_wslv_wciReq$wget =
	     { wciS1_MCmd,
	       wciS1_MAddrSpace,
	       wciS1_MByteEn,
	       wciS1_MAddr,
	       wciS1_MData } ;
  assign wciTx_wslv_wciReq$whas = 1'd1 ;
  assign wciTx_wslv_respF_x_wire$wget =
	     MUX_wciTx_wslv_respF_q_0$write_1__VAL_2 ;
  assign wciTx_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete ;
  assign wciTx_wslv_wEdge$wget = wciTx_wslv_reqF$D_OUT[36:34] ;
  assign wciTx_wslv_wEdge$whas = WILL_FIRE_RL_wciTx_wslv_ctl_op_start ;
  assign wciTx_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wciTx_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wciTx_wslv_ctlAckReg_1$wget = 1'b0 ;
  assign wciTx_wslv_ctlAckReg_1$whas = 1'b0 ;
  assign wciTx_wci_Es_mCmd_w$wget = wciS1_MCmd ;
  assign wciTx_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wciTx_wci_Es_mAddrSpace_w$wget = wciS1_MAddrSpace ;
  assign wciTx_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wciTx_wci_Es_mAddr_w$wget = wciS1_MAddr ;
  assign wciTx_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wciTx_wci_Es_mData_w$wget = wciS1_MData ;
  assign wciTx_wci_Es_mData_w$whas = 1'd1 ;
  assign wciTx_wci_Es_mByteEn_w$wget = wciS1_MByteEn ;
  assign wciTx_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wti_wtiReq$wget = 67'h0 ;
  assign wti_wtiReq$whas = 1'b0 ;
  assign wti_operateD_1$wget = 1'b0 ;
  assign wti_operateD_1$whas = 1'b0 ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign wsiM_reqFifo_x_wire$whas =
	     MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = wciRx_wslv_cState == 3'd2 ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas = wsiM0_SReset_n ;
  assign wsiS_wsiReq$wget =
	     { wsiS0_MCmd,
	       wsiS0_MReqLast,
	       wsiS0_MBurstPrecise,
	       wsiS0_MBurstLength,
	       wsiS0_MData,
	       wsiS0_MByteEn,
	       wsiS0_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = wciRx_wslv_cState == 3'd2 ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsiS0_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign emac_rx_buffer_wData$wget = emac_mac$EMACCLIENTRXD ;
  assign emac_rx_buffer_wData$whas = 1'd1 ;
  assign emac_rx_buffer_wDataValid$wget = emac_mac$EMACCLIENTRXDVLD ;
  assign emac_rx_buffer_wDataValid$whas = 1'd1 ;
  assign emac_rx_buffer_wGoodFrame$wget = emac_mac$EMACCLIENTRXGOODFRAME ;
  assign emac_rx_buffer_wGoodFrame$whas = 1'd1 ;
  assign emac_rx_buffer_wBadFrame$wget = emac_mac$EMACCLIENTRXBADFRAME ;
  assign emac_rx_buffer_wBadFrame$whas = 1'd1 ;
  assign emac_rx_buffer_wFrameDrop$wget = emac_mac$EMACCLIENTRXFRAMEDROP ;
  assign emac_rx_buffer_wFrameDrop$whas = 1'd1 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget =
	     { CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5,
	       emac_rx_buffer_memBuffer_memory$DOA[7:0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas =
	     (!emac_rx_buffer_memBuffer_serverAdapterA_s1[0] ||
	      emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N) &&
	     emac_rx_buffer_memBuffer_serverAdapterA_s1[1] &&
	     emac_rx_buffer_memBuffer_serverAdapterA_s1[0] ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wget =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ?
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 :
	       MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$whas =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ||
	     !emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N &&
	     emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$whas =
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1_1$wget = 2'd2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1_1$whas =
	     emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$whas ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget =
	     { CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7,
	       emac_rx_buffer_memBuffer_memory$DOB[7:0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas =
	     (!emac_rx_buffer_memBuffer_serverAdapterB_s1[0] ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N) &&
	     emac_rx_buffer_memBuffer_serverAdapterB_s1[1] &&
	     emac_rx_buffer_memBuffer_serverAdapterB_s1[0] ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ?
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 :
	       MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$whas =
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	     !emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas =
	     (MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat) &&
	     (!ab__h21855[1] || ab__h21855[0]) ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_2$whas =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$whas =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h21855[1] || ab__h21855[0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1_1$whas =
	     emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$whas ;
  assign emac_rx_buffer_fifoDeq_rw_enq$wget =
	     { CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9,
	       emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[7:0] } ;
  assign emac_rx_buffer_fifoDeq_rw_enq$whas =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;
  assign emac_tx_buffer_fifoEnq_rw_enq$wget =
	     { 2'd0, wsiS_reqFifo$D_OUT[19:12] } ;
  assign emac_tx_buffer_fifoEnq_rw_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget =
	     { CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12,
	       emac_tx_buffer_memBuffer_memory$DOA[7:0] } ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas =
	     (!emac_tx_buffer_memBuffer_serverAdapterA_s1[0] ||
	      emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N) &&
	     emac_tx_buffer_memBuffer_serverAdapterA_s1[1] &&
	     emac_tx_buffer_memBuffer_serverAdapterA_s1[0] ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wget =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ?
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_1 :
	       MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$whas =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N ||
	     !emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_1$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$wget = 3'h0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_2$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$wget = 2'd2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_writeWithResp$whas =
	     MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__SEL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1_1$wget = 2'd2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1_1$whas =
	     MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__SEL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget =
	     { CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14,
	       emac_tx_buffer_memBuffer_memory$DOB[7:0] } ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas =
	     (!emac_tx_buffer_memBuffer_serverAdapterB_s1[0] ||
	      emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N) &&
	     emac_tx_buffer_memBuffer_serverAdapterB_s1[1] &&
	     emac_tx_buffer_memBuffer_serverAdapterB_s1[0] ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ?
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_1 :
	       MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	     !emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas =
	     (MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	      WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ||
	      WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack) &&
	     (!ab__h32590[1] || ab__h32590[0]) ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_2$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$wget = 2'd0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$whas =
	     MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h32590[1] || ab__h32590[0] } ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1_1$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$whas ;
  assign emac_tx_buffer_wDataOut$wget =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[7:0] ;
  assign emac_tx_buffer_wDataOut$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_tx_buffer_wDataValid$wget = 1'd1 ;
  assign emac_tx_buffer_wDataValid$whas =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_tx_buffer_wAck$wget = emac_mac$EMACCLIENTTXACK ;
  assign emac_tx_buffer_wAck$whas = 1'd1 ;
  assign emac_tx_buffer_wCollision$wget = emac_mac$EMACCLIENTTXCOLLISION ;
  assign emac_tx_buffer_wCollision$whas = 1'd1 ;
  assign emac_tx_buffer_wRetransmit$wget = emac_mac$EMACCLIENTTXRETRANSMIT ;
  assign emac_tx_buffer_wRetransmit$whas = 1'd1 ;
  assign wsi_Es_mCmd_w$wget = wsiS0_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = wsiS0_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsiS0_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = wsiS0_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsiS0_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wciRx_wslv_reqF_r_enq$whas = wciRx_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wciRx_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_start || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wciRx_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wciRx_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wciRx_wslv_respF_dequeueing$whas = wciRx_wslv_respF_c_r != 2'd0 ;
  assign wciRx_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wciRx_wslv_wci_cfwr_pw$whas =
	     wciRx_wslv_reqF$EMPTY_N && wciRx_wslv_reqF$D_OUT[68] &&
	     wciRx_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wciRx_wslv_wci_cfrd_pw$whas =
	     wciRx_wslv_reqF$EMPTY_N && wciRx_wslv_reqF$D_OUT[68] &&
	     wciRx_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wciRx_wslv_wci_ctrl_pw$whas =
	     wciRx_wslv_reqF$EMPTY_N && !wciRx_wslv_reqF$D_OUT[68] &&
	     wciRx_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wciTx_wslv_reqF_r_enq$whas = wciTx_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wciTx_wslv_reqF_r_deq$whas = WILL_FIRE_RL_wciTx_wslv_ctl_op_start ;
  assign wciTx_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wciTx_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete ;
  assign wciTx_wslv_respF_dequeueing$whas = wciTx_wslv_respF_c_r != 2'd0 ;
  assign wciTx_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wciTx_wslv_wci_cfwr_pw$whas =
	     wciTx_wslv_reqF$EMPTY_N && wciTx_wslv_reqF$D_OUT[68] &&
	     wciTx_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wciTx_wslv_wci_cfrd_pw$whas =
	     wciTx_wslv_reqF$EMPTY_N && wciTx_wslv_reqF$D_OUT[68] &&
	     wciTx_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wciTx_wslv_wci_ctrl_pw$whas =
	     wciTx_wslv_reqF$EMPTY_N && !wciTx_wslv_reqF$D_OUT[68] &&
	     wciTx_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wsiM_reqFifo_enqueueing$whas =
	     MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 ;
  assign wsiM_reqFifo_dequeueing$whas = WILL_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas = wsiM0_SThreadBusy ;
  assign wsiS_reqFifo_r_enq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_doResetDeq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign emac_rx_buffer_pwEnqueue$whas = 1'b0 ;
  assign emac_rx_buffer_rWrPackets_pwIncrement$whas =
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ;
  assign emac_rx_buffer_rWrPackets_pwDecrement$whas = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas =
	     1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;
  assign emac_rx_buffer_fifoDeq_pw_deq$whas =
	     MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__SEL_2 ;
  assign emac_rx_buffer_rRdPackets_pwIncrement$whas =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;
  assign emac_rx_buffer_rRdPackets_pwDecrement$whas = 1'b0 ;
  assign emac_tx_buffer_fifoEnq_pw_deq$whas =
	     MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__SEL_2 ;
  assign emac_tx_buffer_rWrPackets_pwIncrement$whas =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;
  assign emac_tx_buffer_rWrPackets_pwDecrement$whas = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outData_deqCalled$whas =
	     1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ;
  assign emac_tx_buffer_rRdPackets_pwIncrement$whas =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;
  assign emac_tx_buffer_rRdPackets_pwDecrement$whas = 1'b0 ;
  assign wsi_Es_mReqLast_w$whas = wsiS0_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsiS0_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;
  assign emac_rx_buffer_rWrPackets_wdCounterCrossing$wget =
	     emac_rx_buffer_rWrPackets_rsCounter ;
  assign emac_rx_buffer_rRdPackets_wdCounterCrossing$wget =
	     emac_rx_buffer_rRdPackets_rsCounter ;
  assign emac_tx_buffer_rWrPackets_wdCounterCrossing$wget =
	     emac_tx_buffer_rWrPackets_rsCounter ;
  assign emac_tx_buffer_rRdPackets_wdCounterCrossing$wget =
	     emac_tx_buffer_rRdPackets_rsCounter ;

  // register emac_rx_buffer_fifoDeq_taggedReg
  assign emac_rx_buffer_fifoDeq_taggedReg$D_IN =
	     WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq ?
	       MUX_emac_rx_buffer_fifoDeq_taggedReg$write_1__VAL_1 :
	       11'd682 ;
  assign emac_rx_buffer_fifoDeq_taggedReg$EN =
	     WILL_FIRE_RL_emac_rx_buffer_fifoDeq_rule_enq ||
	     wsiM_reqFifo_c_r != 2'd2 &&
	     (emac_rx_buffer_fifoDeq_taggedReg[10] ||
	      WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat) &&
	     wciRx_wslv_cState == 3'd2 ;

  // register emac_rx_buffer_memBuffer_serverAdapterA_cnt
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt$D_IN =
	     emac_rx_buffer_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt$EN = 1'b0 ;

  // register emac_rx_buffer_memBuffer_serverAdapterA_s1
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1$D_IN =
	     { emac_rx_buffer_memBuffer_serverAdapterA_writeWithResp$whas,
	       1'b0 } ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_s1$EN = 1'd1 ;

  // register emac_rx_buffer_memBuffer_serverAdapterB_cnt
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt$D_IN =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt_45_ETC___d651 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt$EN =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat ;

  // register emac_rx_buffer_memBuffer_serverAdapterB_s1
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1$D_IN =
	     { emac_rx_buffer_memBuffer_serverAdapterB_writeWithResp$whas &&
	       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget[1],
	       emac_rx_buffer_memBuffer_serverAdapterB_s1_1$wget[0] } ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_s1$EN = 1'd1 ;

  // register emac_rx_buffer_rData_D1
  assign emac_rx_buffer_rData_D1$D_IN = emac_mac$EMACCLIENTRXD ;
  assign emac_rx_buffer_rData_D1$EN =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ;

  // register emac_rx_buffer_rInPacket
  assign emac_rx_buffer_rInPacket$D_IN =
	     !MUX_emac_rx_buffer_rInPacket$write_1__SEL_1 ;
  assign emac_rx_buffer_rInPacket$EN =
	     emac_rx_buffer_wBadFrame_wget__81_OR_emac_rx_b_ETC___d805 ||
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ;

  // register emac_rx_buffer_rOutPacket
  assign emac_rx_buffer_rOutPacket$D_IN =
	     !MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;
  assign emac_rx_buffer_rOutPacket$EN =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;

  // register emac_rx_buffer_rRdCurrPtr
  assign emac_rx_buffer_rRdCurrPtr$D_IN =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ?
	       MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_1 :
	       MUX_emac_rx_buffer_rRdCurrPtr$write_1__VAL_2 ;
  assign emac_rx_buffer_rRdCurrPtr$EN =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd0 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd1) ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;

  // register emac_rx_buffer_rRdPackets_rdCounter
  assign emac_rx_buffer_rRdPackets_rdCounter$D_IN =
	     emac_rx_buffer_rRdPackets_rdCounterPre ;
  assign emac_rx_buffer_rRdPackets_rdCounter$EN = 1'd1 ;

  // register emac_rx_buffer_rRdPackets_rdCounterPre
  assign emac_rx_buffer_rRdPackets_rdCounterPre$D_IN =
	     emac_rx_buffer_rRdPackets_rsCounter ;
  assign emac_rx_buffer_rRdPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_rx_buffer_rRdPackets_rsCounter
  assign emac_rx_buffer_rRdPackets_rsCounter$D_IN =
	     MUX_emac_rx_buffer_rRdPackets_rsCounter$write_1__VAL_1 ;
  assign emac_rx_buffer_rRdPackets_rsCounter$EN =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;

  // register emac_rx_buffer_rRdStartPtr
  assign emac_rx_buffer_rRdStartPtr$D_IN = emac_rx_buffer_rRdCurrPtr ;
  assign emac_rx_buffer_rRdStartPtr$EN =
	     MUX_emac_rx_buffer_rOutPacket$write_1__SEL_1 ;

  // register emac_rx_buffer_rWrCurrPtr
  assign emac_rx_buffer_rWrCurrPtr$D_IN =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ?
	       MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_1 :
	       MUX_emac_rx_buffer_rWrCurrPtr$write_1__VAL_2 ;
  assign emac_rx_buffer_rWrCurrPtr$EN =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ;

  // register emac_rx_buffer_rWrPackets_rdCounter
  assign emac_rx_buffer_rWrPackets_rdCounter$D_IN =
	     emac_rx_buffer_rWrPackets_rdCounterPre ;
  assign emac_rx_buffer_rWrPackets_rdCounter$EN = 1'd1 ;

  // register emac_rx_buffer_rWrPackets_rdCounterPre
  assign emac_rx_buffer_rWrPackets_rdCounterPre$D_IN =
	     emac_rx_buffer_rWrPackets_rsCounter ;
  assign emac_rx_buffer_rWrPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_rx_buffer_rWrPackets_rsCounter
  assign emac_rx_buffer_rWrPackets_rsCounter$D_IN =
	     MUX_emac_rx_buffer_rWrPackets_rsCounter$write_1__VAL_1 ;
  assign emac_rx_buffer_rWrPackets_rsCounter$EN =
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ;

  // register emac_rx_buffer_rWrStartPtr
  assign emac_rx_buffer_rWrStartPtr$D_IN = emac_rx_buffer_rWrCurrPtr ;
  assign emac_rx_buffer_rWrStartPtr$EN =
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ;

  // register emac_tx_buffer_fifoEnq_taggedReg
  assign emac_tx_buffer_fifoEnq_taggedReg$D_IN =
	     WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq ?
	       MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__VAL_1 :
	       11'd682 ;
  assign emac_tx_buffer_fifoEnq_taggedReg$EN =
	     WILL_FIRE_RL_emac_tx_buffer_fifoEnq_rule_enq ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ;

  // register emac_tx_buffer_memBuffer_serverAdapterA_cnt
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt$D_IN =
	     emac_tx_buffer_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_cnt$EN = 1'b0 ;

  // register emac_tx_buffer_memBuffer_serverAdapterA_s1
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1$D_IN =
	     { MUX_emac_tx_buffer_fifoEnq_taggedReg$write_1__SEL_2, 1'b0 } ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_s1$EN = 1'd1 ;

  // register emac_tx_buffer_memBuffer_serverAdapterB_cnt
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt$D_IN =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1034 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt$EN =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas ||
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;

  // register emac_tx_buffer_memBuffer_serverAdapterB_s1
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1$D_IN =
	     { emac_tx_buffer_memBuffer_serverAdapterB_writeWithResp$whas &&
	       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget[1],
	       emac_tx_buffer_memBuffer_serverAdapterB_s1_1$wget[0] } ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_s1$EN = 1'd1 ;

  // register emac_tx_buffer_rAcked
  assign emac_tx_buffer_rAcked$D_IN =
	     !MUX_emac_tx_buffer_rAcked$write_1__SEL_1 &&
	     !WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;
  assign emac_tx_buffer_rAcked$EN =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ;

  // register emac_tx_buffer_rIfgDelay
  assign emac_tx_buffer_rIfgDelay$D_IN = 8'h0 ;
  assign emac_tx_buffer_rIfgDelay$EN = 1'b0 ;

  // register emac_tx_buffer_rOutPacket
  assign emac_tx_buffer_rOutPacket$D_IN =
	     !MUX_emac_tx_buffer_rAcked$write_1__SEL_1 &&
	     !WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;
  assign emac_tx_buffer_rOutPacket$EN =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd0 &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ;

  // register emac_tx_buffer_rRdCurrPtr
  always@(MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 or
	  MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3 or
	  WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat or
	  MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_2 or
	  WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1:
	  emac_tx_buffer_rRdCurrPtr$D_IN =
	      MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3;
      WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat:
	  emac_tx_buffer_rRdCurrPtr$D_IN =
	      MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_2;
      WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack:
	  emac_tx_buffer_rRdCurrPtr$D_IN =
	      MUX_emac_tx_buffer_rRdCurrPtr$write_1__VAL_3;
      default: emac_tx_buffer_rRdCurrPtr$D_IN =
		   12'b101010101010 /* unspecified value */ ;
    endcase
  end
  assign emac_tx_buffer_rRdCurrPtr$EN =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ;

  // register emac_tx_buffer_rRdPackets_rdCounter
  assign emac_tx_buffer_rRdPackets_rdCounter$D_IN =
	     emac_tx_buffer_rRdPackets_rdCounterPre ;
  assign emac_tx_buffer_rRdPackets_rdCounter$EN = 1'd1 ;

  // register emac_tx_buffer_rRdPackets_rdCounterPre
  assign emac_tx_buffer_rRdPackets_rdCounterPre$D_IN =
	     emac_tx_buffer_rRdPackets_rsCounter ;
  assign emac_tx_buffer_rRdPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_tx_buffer_rRdPackets_rsCounter
  assign emac_tx_buffer_rRdPackets_rsCounter$D_IN =
	     MUX_emac_tx_buffer_rRdPackets_rsCounter$write_1__VAL_1 ;
  assign emac_tx_buffer_rRdPackets_rsCounter$EN =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;

  // register emac_tx_buffer_rRdStartPtr
  assign emac_tx_buffer_rRdStartPtr$D_IN = emac_tx_buffer_rRdCurrPtr ;
  assign emac_tx_buffer_rRdStartPtr$EN =
	     MUX_emac_tx_buffer_rAcked$write_1__SEL_1 ;

  // register emac_tx_buffer_rUnderrun
  assign emac_tx_buffer_rUnderrun$D_IN =
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;
  assign emac_tx_buffer_rUnderrun$EN =
	     emac_tx_buffer_rUnderrun ||
	     WILL_FIRE_RL_emac_tx_buffer_transmit_underrun ;

  // register emac_tx_buffer_rWrCurrPtr
  assign emac_tx_buffer_rWrCurrPtr$D_IN =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ?
	       MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_1 :
	       MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_2 ;
  assign emac_tx_buffer_rWrCurrPtr$EN =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ;

  // register emac_tx_buffer_rWrPackets_rdCounter
  assign emac_tx_buffer_rWrPackets_rdCounter$D_IN =
	     emac_tx_buffer_rWrPackets_rdCounterPre ;
  assign emac_tx_buffer_rWrPackets_rdCounter$EN = 1'd1 ;

  // register emac_tx_buffer_rWrPackets_rdCounterPre
  assign emac_tx_buffer_rWrPackets_rdCounterPre$D_IN =
	     emac_tx_buffer_rWrPackets_rsCounter ;
  assign emac_tx_buffer_rWrPackets_rdCounterPre$EN = 1'd1 ;

  // register emac_tx_buffer_rWrPackets_rsCounter
  assign emac_tx_buffer_rWrPackets_rsCounter$D_IN =
	     MUX_emac_tx_buffer_rWrPackets_rsCounter$write_1__VAL_1 ;
  assign emac_tx_buffer_rWrPackets_rsCounter$EN =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;

  // register emac_tx_buffer_rWrStartPtr
  assign emac_tx_buffer_rWrStartPtr$D_IN =
	     MUX_emac_tx_buffer_rWrCurrPtr$write_1__VAL_2 ;
  assign emac_tx_buffer_rWrStartPtr$EN =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ;

  // register gbeControl
  assign gbeControl$D_IN = wciRx_wslv_reqF$D_OUT[31:0] ;
  assign gbeControl$EN =
	     WILL_FIRE_RL_wci_cfwr && wciRx_wslv_reqF$D_OUT[39:32] == 8'h04 ;

  // register wciRx_wslv_cEdge
  assign wciRx_wslv_cEdge$D_IN = wciRx_wslv_reqF$D_OUT[36:34] ;
  assign wciRx_wslv_cEdge$EN = WILL_FIRE_RL_wciRx_wslv_ctl_op_start ;

  // register wciRx_wslv_cState
  assign wciRx_wslv_cState$D_IN = wciRx_wslv_nState ;
  assign wciRx_wslv_cState$EN =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_complete &&
	     !wciRx_wslv_illegalEdge ;

  // register wciRx_wslv_ctlAckReg
  assign wciRx_wslv_ctlAckReg$D_IN = wciRx_wslv_ctlAckReg_1$whas ;
  assign wciRx_wslv_ctlAckReg$EN = 1'd1 ;

  // register wciRx_wslv_ctlOpActive
  assign wciRx_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_wciRx_wslv_ctl_op_complete ;
  assign wciRx_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_start ;

  // register wciRx_wslv_illegalEdge
  assign wciRx_wslv_illegalEdge$D_IN =
	     !MUX_wciRx_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wciRx_wslv_illegalEdge$write_1__VAL_2 ;
  assign wciRx_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_complete &&
	     wciRx_wslv_illegalEdge ||
	     MUX_wciRx_wslv_illegalEdge$write_1__SEL_2 ;

  // register wciRx_wslv_isReset_isInReset
  assign wciRx_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wciRx_wslv_isReset_isInReset$EN = wciRx_wslv_isReset_isInReset ;

  // register wciRx_wslv_nState
  always@(wciRx_wslv_reqF$D_OUT)
  begin
    case (wciRx_wslv_reqF$D_OUT[36:34])
      3'd0: wciRx_wslv_nState$D_IN = 3'd1;
      3'd1: wciRx_wslv_nState$D_IN = 3'd2;
      3'd2: wciRx_wslv_nState$D_IN = 3'd3;
      default: wciRx_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wciRx_wslv_nState$EN =
	     WILL_FIRE_RL_wciRx_wslv_ctl_op_start &&
	     (wciRx_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      wciRx_wslv_cState == 3'd0 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wciRx_wslv_cState == 3'd1 || wciRx_wslv_cState == 3'd3) ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      wciRx_wslv_cState == 3'd2 ||
	      wciRx_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wciRx_wslv_cState == 3'd3 || wciRx_wslv_cState == 3'd2 ||
	       wciRx_wslv_cState == 3'd1)) ;

  // register wciRx_wslv_reqF_countReg
  assign wciRx_wslv_reqF_countReg$D_IN =
	     (wciRx_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wciRx_wslv_reqF_countReg + 2'd1 :
	       wciRx_wslv_reqF_countReg - 2'd1 ;
  assign wciRx_wslv_reqF_countReg$EN =
	     (wciRx_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wciRx_wslv_reqF_r_deq$whas ;

  // register wciRx_wslv_respF_c_r
  assign wciRx_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wciRx_wslv_respF_incCtr ?
	       MUX_wciRx_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wciRx_wslv_respF_c_r$write_1__VAL_2 ;
  assign wciRx_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wciRx_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wciRx_wslv_respF_decCtr ;

  // register wciRx_wslv_respF_q_0
  always@(WILL_FIRE_RL_wciRx_wslv_respF_both or
	  MUX_wciRx_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_wciRx_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wciRx_wslv_respF_decCtr or wciRx_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciRx_wslv_respF_both:
	  wciRx_wslv_respF_q_0$D_IN = MUX_wciRx_wslv_respF_q_0$write_1__VAL_1;
      MUX_wciRx_wslv_respF_q_0$write_1__SEL_2:
	  wciRx_wslv_respF_q_0$D_IN = MUX_wciRx_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wciRx_wslv_respF_decCtr:
	  wciRx_wslv_respF_q_0$D_IN = wciRx_wslv_respF_q_1;
      default: wciRx_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciRx_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wciRx_wslv_respF_both ||
	     WILL_FIRE_RL_wciRx_wslv_respF_incCtr &&
	     wciRx_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wciRx_wslv_respF_decCtr ;

  // register wciRx_wslv_respF_q_1
  always@(WILL_FIRE_RL_wciRx_wslv_respF_both or
	  MUX_wciRx_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_wciRx_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_wciRx_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wciRx_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciRx_wslv_respF_both:
	  wciRx_wslv_respF_q_1$D_IN = MUX_wciRx_wslv_respF_q_1$write_1__VAL_1;
      MUX_wciRx_wslv_respF_q_1$write_1__SEL_2:
	  wciRx_wslv_respF_q_1$D_IN = MUX_wciRx_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wciRx_wslv_respF_decCtr:
	  wciRx_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wciRx_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciRx_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wciRx_wslv_respF_both ||
	     WILL_FIRE_RL_wciRx_wslv_respF_incCtr &&
	     wciRx_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wciRx_wslv_respF_decCtr ;

  // register wciRx_wslv_sFlagReg
  assign wciRx_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wciRx_wslv_sFlagReg$EN = 1'd1 ;

  // register wciRx_wslv_sThreadBusy_d
  assign wciRx_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wciRx_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wciTx_wslv_cEdge
  assign wciTx_wslv_cEdge$D_IN = wciTx_wslv_reqF$D_OUT[36:34] ;
  assign wciTx_wslv_cEdge$EN = WILL_FIRE_RL_wciTx_wslv_ctl_op_start ;

  // register wciTx_wslv_cState
  assign wciTx_wslv_cState$D_IN = wciTx_wslv_nState ;
  assign wciTx_wslv_cState$EN =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete &&
	     !wciTx_wslv_illegalEdge ;

  // register wciTx_wslv_ctlAckReg
  assign wciTx_wslv_ctlAckReg$D_IN = 1'b0 ;
  assign wciTx_wslv_ctlAckReg$EN = 1'd1 ;

  // register wciTx_wslv_ctlOpActive
  assign wciTx_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_wciTx_wslv_ctl_op_complete ;
  assign wciTx_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_start ;

  // register wciTx_wslv_illegalEdge
  assign wciTx_wslv_illegalEdge$D_IN =
	     !MUX_wciTx_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wciTx_wslv_illegalEdge$write_1__VAL_2 ;
  assign wciTx_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_complete &&
	     wciTx_wslv_illegalEdge ||
	     MUX_wciTx_wslv_illegalEdge$write_1__SEL_2 ;

  // register wciTx_wslv_isReset_isInReset
  assign wciTx_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wciTx_wslv_isReset_isInReset$EN = wciTx_wslv_isReset_isInReset ;

  // register wciTx_wslv_nState
  always@(wciTx_wslv_reqF$D_OUT)
  begin
    case (wciTx_wslv_reqF$D_OUT[36:34])
      3'd0: wciTx_wslv_nState$D_IN = 3'd1;
      3'd1: wciTx_wslv_nState$D_IN = 3'd2;
      3'd2: wciTx_wslv_nState$D_IN = 3'd3;
      default: wciTx_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wciTx_wslv_nState$EN =
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_start &&
	     (wciTx_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      wciTx_wslv_cState == 3'd0 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wciTx_wslv_cState == 3'd1 || wciTx_wslv_cState == 3'd3) ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      wciTx_wslv_cState == 3'd2 ||
	      wciTx_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wciTx_wslv_cState == 3'd3 || wciTx_wslv_cState == 3'd2 ||
	       wciTx_wslv_cState == 3'd1)) ;

  // register wciTx_wslv_reqF_countReg
  assign wciTx_wslv_reqF_countReg$D_IN =
	     (wciTx_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wciTx_wslv_reqF_countReg + 2'd1 :
	       wciTx_wslv_reqF_countReg - 2'd1 ;
  assign wciTx_wslv_reqF_countReg$EN =
	     (wciTx_wslv_wciReq$wget[71:69] != 3'd0) !=
	     WILL_FIRE_RL_wciTx_wslv_ctl_op_start ;

  // register wciTx_wslv_respF_c_r
  assign wciTx_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wciTx_wslv_respF_incCtr ?
	       MUX_wciTx_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wciTx_wslv_respF_c_r$write_1__VAL_2 ;
  assign wciTx_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wciTx_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wciTx_wslv_respF_decCtr ;

  // register wciTx_wslv_respF_q_0
  always@(WILL_FIRE_RL_wciTx_wslv_respF_both or
	  MUX_wciTx_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_wciTx_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_wciTx_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wciTx_wslv_respF_decCtr or wciTx_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciTx_wslv_respF_both:
	  wciTx_wslv_respF_q_0$D_IN = MUX_wciTx_wslv_respF_q_0$write_1__VAL_1;
      MUX_wciTx_wslv_respF_q_0$write_1__SEL_2:
	  wciTx_wslv_respF_q_0$D_IN = MUX_wciTx_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wciTx_wslv_respF_decCtr:
	  wciTx_wslv_respF_q_0$D_IN = wciTx_wslv_respF_q_1;
      default: wciTx_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciTx_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wciTx_wslv_respF_both ||
	     WILL_FIRE_RL_wciTx_wslv_respF_incCtr &&
	     wciTx_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wciTx_wslv_respF_decCtr ;

  // register wciTx_wslv_respF_q_1
  always@(WILL_FIRE_RL_wciTx_wslv_respF_both or
	  MUX_wciTx_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_wciTx_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_wciTx_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wciTx_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wciTx_wslv_respF_both:
	  wciTx_wslv_respF_q_1$D_IN = MUX_wciTx_wslv_respF_q_1$write_1__VAL_1;
      MUX_wciTx_wslv_respF_q_1$write_1__SEL_2:
	  wciTx_wslv_respF_q_1$D_IN = MUX_wciTx_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wciTx_wslv_respF_decCtr:
	  wciTx_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wciTx_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wciTx_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wciTx_wslv_respF_both ||
	     WILL_FIRE_RL_wciTx_wslv_respF_incCtr &&
	     wciTx_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wciTx_wslv_respF_decCtr ;

  // register wciTx_wslv_sFlagReg
  assign wciTx_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wciTx_wslv_sFlagReg$EN = 1'd1 ;

  // register wciTx_wslv_sThreadBusy_d
  assign wciTx_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wciTx_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_isReset_isInReset
  assign wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiM_isReset_isInReset$EN = wsiM_isReset_isInReset ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = wciRx_wslv_cState == 3'd2 ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsiM0_SReset_n ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_0
  always@(MUX_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wsiM_reqFifo_q_0$write_1__SEL_1:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(MUX_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wsiM_reqFifo_q_1$write_1__SEL_1:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsiM0_SThreadBusy ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset_isInReset,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'b0 ;
  assign wsiS_errorSticky$EN = 1'b0 ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_isReset_isInReset
  assign wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiS_isReset_isInReset$EN = wsiS_isReset_isInReset ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = wciRx_wslv_cState == 3'd2 ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS0_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq !=
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     wsiS_reqFifo$EMPTY_N && !emac_tx_buffer_fifoEnq_taggedReg[10] &&
	     wciRx_wslv_cState == 3'd2 ||
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset_isInReset,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // register wti_isReset_isInReset
  assign wti_isReset_isInReset$D_IN = 1'd0 ;
  assign wti_isReset_isInReset$EN = wti_isReset_isInReset ;

  // register wti_nowReq
  assign wti_nowReq$D_IN = wtiS0_req ;
  assign wti_nowReq$EN = 1'd1 ;

  // register wti_operateD
  assign wti_operateD$D_IN = 1'b1 ;
  assign wti_operateD$EN = 1'd1 ;

  // submodule emac_mac
  assign emac_mac$CLIENTEMACTXD =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ?
	       emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[7:0] :
	       8'd0 ;
  assign emac_mac$CLIENTEMACTXDVLD =
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ;
  assign emac_mac$CLIENTEMACTXFIRSTBYTE = 1'd0 ;
  assign emac_mac$CLIENTEMACTXIFGDELAY = emac_tx_buffer_rIfgDelay ;
  assign emac_mac$CLIENTEMACTXUNDERRUN = emac_tx_buffer_rUnderrun ;
  assign emac_mac$GMII_RXD = gmii_rxd_i ;
  assign emac_mac$GMII_RX_DV = gmii_rx_dv_i ;
  assign emac_mac$GMII_RX_ER = gmii_rx_er_i ;

  // submodule emac_rx_buffer_memBuffer_memory
  always@(WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat or
	  emac_rx_buffer_rWrStartPtr or
	  WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat or
	  emac_rx_buffer_rWrCurrPtr or
	  WILL_FIRE_RL_emac_rx_buffer_commit_packet or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat:
	  emac_rx_buffer_memBuffer_memory$ADDRA = emac_rx_buffer_rWrStartPtr;
      WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat:
	  emac_rx_buffer_memBuffer_memory$ADDRA = emac_rx_buffer_rWrCurrPtr;
      WILL_FIRE_RL_emac_rx_buffer_commit_packet:
	  emac_rx_buffer_memBuffer_memory$ADDRA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_2__VAL_3;
      default: emac_rx_buffer_memBuffer_memory$ADDRA =
		   12'b101010101010 /* unspecified value */ ;
    endcase
  end
  assign emac_rx_buffer_memBuffer_memory$ADDRB =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ?
	       emac_rx_buffer_rRdCurrPtr :
	       emac_rx_buffer_rRdStartPtr ;
  always@(WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1 or
	  WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2 or
	  WILL_FIRE_RL_emac_rx_buffer_commit_packet or
	  MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat:
	  emac_rx_buffer_memBuffer_memory$DIA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_1;
      WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat:
	  emac_rx_buffer_memBuffer_memory$DIA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_2;
      WILL_FIRE_RL_emac_rx_buffer_commit_packet:
	  emac_rx_buffer_memBuffer_memory$DIA =
	      MUX_emac_rx_buffer_memBuffer_memory$a_put_3__VAL_3;
      default: emac_rx_buffer_memBuffer_memory$DIA =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign emac_rx_buffer_memBuffer_memory$DIB =
	     MUX_emac_rx_buffer_memBuffer_memory$b_put_1__SEL_1 ?
	       10'b1010101010 /* unspecified value */  :
	       10'b1010101010 /* unspecified value */  ;
  assign emac_rx_buffer_memBuffer_memory$WEA = 1'd1 ;
  assign emac_rx_buffer_memBuffer_memory$WEB = 1'd0 ;
  assign emac_rx_buffer_memBuffer_memory$ENA =
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_first_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_enqueue_next_data_beat ||
	     WILL_FIRE_RL_emac_rx_buffer_commit_packet ;
  assign emac_rx_buffer_memBuffer_memory$ENB =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd0 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	      2'd1) ||
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_first_beat ;

  // submodule emac_rx_buffer_memBuffer_serverAdapterA_outDataCore
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN =
	     MUX_emac_rx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ =
	     emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N &&
	     emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule emac_rx_buffer_memBuffer_serverAdapterB_outDataCore
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN =
	     MUX_emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_emac_rx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat &&
	     !emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule emac_tx_buffer_memBuffer_memory
  assign emac_tx_buffer_memBuffer_memory$ADDRA =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ?
	       emac_tx_buffer_rWrStartPtr :
	       emac_tx_buffer_rWrCurrPtr ;
  assign emac_tx_buffer_memBuffer_memory$ADDRB =
	     (MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack) ?
	       emac_tx_buffer_rRdCurrPtr :
	       emac_tx_buffer_rRdStartPtr ;
  assign emac_tx_buffer_memBuffer_memory$DIA =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ?
	       MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1 :
	       MUX_emac_tx_buffer_memBuffer_memory$a_put_3__VAL_1 ;
  always@(MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1 or
	  MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_2 or
	  WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_1:
	  emac_tx_buffer_memBuffer_memory$DIB =
	      10'b1010101010 /* unspecified value */ ;
      MUX_emac_tx_buffer_memBuffer_memory$b_put_1__SEL_2:
	  emac_tx_buffer_memBuffer_memory$DIB =
	      10'b1010101010 /* unspecified value */ ;
      WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack:
	  emac_tx_buffer_memBuffer_memory$DIB =
	      10'b1010101010 /* unspecified value */ ;
      default: emac_tx_buffer_memBuffer_memory$DIB =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign emac_tx_buffer_memBuffer_memory$WEA = 1'd1 ;
  assign emac_tx_buffer_memBuffer_memory$WEB = 1'd0 ;
  assign emac_tx_buffer_memBuffer_memory$ENA =
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_last_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_enqueue_next_data_beat ;
  assign emac_tx_buffer_memBuffer_memory$ENB =
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_next_data_beat &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] ==
	     2'd1 ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_first_data_beat ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_wait_for_ack ||
	     WILL_FIRE_RL_emac_tx_buffer_dequeue_got_ack ;

  // submodule emac_tx_buffer_memBuffer_serverAdapterA_outDataCore
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_IN =
	     MUX_emac_tx_buffer_memBuffer_serverAdapterA_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$ENQ =
	     emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N &&
	     emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$whas ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule emac_tx_buffer_memBuffer_serverAdapterB_outDataCore
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_IN =
	     MUX_emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wset_1__VAL_2 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N &&
	     !emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_emac_tx_buffer_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas &&
	     !emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule wciRx_wslv_reqF
  assign wciRx_wslv_reqF$D_IN = wciRx_wslv_wciReq$wget ;
  assign wciRx_wslv_reqF$ENQ = wciRx_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wciRx_wslv_reqF$DEQ = wciRx_wslv_reqF_r_deq$whas ;
  assign wciRx_wslv_reqF$CLR = 1'b0 ;

  // submodule wciTx_wslv_reqF
  assign wciTx_wslv_reqF$D_IN = wciTx_wslv_wciReq$wget ;
  assign wciTx_wslv_reqF$ENQ = wciTx_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wciTx_wslv_reqF$DEQ = WILL_FIRE_RL_wciTx_wslv_ctl_op_start ;
  assign wciTx_wslv_reqF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo$DEQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_emac_rx_buffer_fifoDeq_rw_enq_whas__86_THEN_ETC___d1333 =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat ?
	       emac_rx_buffer_fifoDeq_rw_enq$wget[9:8] != 2'd0 &&
	       emac_rx_buffer_fifoDeq_rw_enq$wget[9:8] != 2'd1 :
	       (!emac_rx_buffer_fifoDeq_taggedReg[10] ||
		emac_rx_buffer_fifoDeq_taggedReg[9:8] != 2'd0) &&
	       (!emac_rx_buffer_fifoDeq_taggedReg[10] ||
		emac_rx_buffer_fifoDeq_taggedReg[9:8] != 2'd1) ;
  assign IF_emac_rx_buffer_rRdPackets_rsCounter_99_BIT__ETC___d1575 =
	     (emac_rx_buffer_rRdPackets_rsCounter[0] ||
	      emac_rx_buffer_rRdPackets_rsCounter[1] ||
	      emac_rx_buffer_rRdPackets_rsCounter[2] ||
	      emac_rx_buffer_rRdPackets_rsCounter[3] ||
	      emac_rx_buffer_rRdPackets_rsCounter[4] ||
	      emac_rx_buffer_rRdPackets_rsCounter[5] ||
	      emac_rx_buffer_rRdPackets_rsCounter[6]) ?
	       (emac_rx_buffer_rRdPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_rx_buffer_rRdPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_rx_buffer_rRdPackets_rsCounter[2] ?
			32'd3 :
			(emac_rx_buffer_rRdPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_rx_buffer_rRdPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_rx_buffer_rRdPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_rx_buffer_rRdPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_rx_buffer_rRdPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign IF_emac_rx_buffer_rRdPackets_rsCounter_99_BIT__ETC___d1576 =
	     emac_rx_buffer_rRdPackets_rsCounter_99_BIT_0_0_ETC___d1497 ?
	       IF_emac_rx_buffer_rRdPackets_rsCounter_99_BIT__ETC___d1575 :
	       32'd0 ;
  assign IF_emac_rx_buffer_rWrPackets_rsCounter_69_BIT__ETC___d1570 =
	     (emac_rx_buffer_rWrPackets_rsCounter[0] ||
	      emac_rx_buffer_rWrPackets_rsCounter[1] ||
	      emac_rx_buffer_rWrPackets_rsCounter[2] ||
	      emac_rx_buffer_rWrPackets_rsCounter[3] ||
	      emac_rx_buffer_rWrPackets_rsCounter[4] ||
	      emac_rx_buffer_rWrPackets_rsCounter[5] ||
	      emac_rx_buffer_rWrPackets_rsCounter[6]) ?
	       (emac_rx_buffer_rWrPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_rx_buffer_rWrPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_rx_buffer_rWrPackets_rsCounter[2] ?
			32'd3 :
			(emac_rx_buffer_rWrPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_rx_buffer_rWrPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_rx_buffer_rWrPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_rx_buffer_rWrPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_rx_buffer_rWrPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign IF_emac_rx_buffer_rWrPackets_rsCounter_69_BIT__ETC___d1571 =
	     emac_rx_buffer_rWrPackets_rsCounter_69_BIT_0_7_ETC___d1496 ?
	       IF_emac_rx_buffer_rWrPackets_rsCounter_69_BIT__ETC___d1570 :
	       32'd0 ;
  assign IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1577 =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] == 2'd0 :
	       emac_tx_buffer_fifoEnq_taggedReg[10] &&
	       emac_tx_buffer_fifoEnq_taggedReg[9:8] == 2'd0 ;
  assign IF_emac_tx_buffer_fifoEnq_rw_enq_whas__40_THEN_ETC___d1578 =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       emac_tx_buffer_fifoEnq_rw_enq$wget[9:8] == 2'd1 :
	       emac_tx_buffer_fifoEnq_taggedReg[10] &&
	       emac_tx_buffer_fifoEnq_taggedReg[9:8] == 2'd1 ;
  assign IF_emac_tx_buffer_rRdPackets_rsCounter_069_BIT_ETC___d1585 =
	     (emac_tx_buffer_rRdPackets_rsCounter[0] ||
	      emac_tx_buffer_rRdPackets_rsCounter[1] ||
	      emac_tx_buffer_rRdPackets_rsCounter[2] ||
	      emac_tx_buffer_rRdPackets_rsCounter[3] ||
	      emac_tx_buffer_rRdPackets_rsCounter[4] ||
	      emac_tx_buffer_rRdPackets_rsCounter[5] ||
	      emac_tx_buffer_rRdPackets_rsCounter[6]) ?
	       (emac_tx_buffer_rRdPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_tx_buffer_rRdPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_tx_buffer_rRdPackets_rsCounter[2] ?
			32'd3 :
			(emac_tx_buffer_rRdPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_tx_buffer_rRdPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_tx_buffer_rRdPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_tx_buffer_rRdPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_tx_buffer_rRdPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign IF_emac_tx_buffer_rRdPackets_rsCounter_069_BIT_ETC___d1586 =
	     emac_tx_buffer_rRdPackets_rsCounter_069_BIT_0__ETC___d1499 ?
	       IF_emac_tx_buffer_rRdPackets_rsCounter_069_BIT_ETC___d1585 :
	       32'd0 ;
  assign IF_emac_tx_buffer_rWrPackets_rsCounter_52_BIT__ETC___d1580 =
	     (emac_tx_buffer_rWrPackets_rsCounter[0] ||
	      emac_tx_buffer_rWrPackets_rsCounter[1] ||
	      emac_tx_buffer_rWrPackets_rsCounter[2] ||
	      emac_tx_buffer_rWrPackets_rsCounter[3] ||
	      emac_tx_buffer_rWrPackets_rsCounter[4] ||
	      emac_tx_buffer_rWrPackets_rsCounter[5] ||
	      emac_tx_buffer_rWrPackets_rsCounter[6]) ?
	       (emac_tx_buffer_rWrPackets_rsCounter[0] ?
		  32'd1 :
		  (emac_tx_buffer_rWrPackets_rsCounter[1] ?
		     32'd2 :
		     (emac_tx_buffer_rWrPackets_rsCounter[2] ?
			32'd3 :
			(emac_tx_buffer_rWrPackets_rsCounter[3] ?
			   32'd4 :
			   (emac_tx_buffer_rWrPackets_rsCounter[4] ?
			      32'd5 :
			      (emac_tx_buffer_rWrPackets_rsCounter[5] ?
				 32'd6 :
				 (emac_tx_buffer_rWrPackets_rsCounter[6] ?
				    32'd7 :
				    (emac_tx_buffer_rWrPackets_rsCounter[7] ?
				       32'd8 :
				       32'd9)))))))) :
	       32'd7 ;
  assign IF_emac_tx_buffer_rWrPackets_rsCounter_52_BIT__ETC___d1581 =
	     emac_tx_buffer_rWrPackets_rsCounter_52_BIT_0_5_ETC___d1498 ?
	       IF_emac_tx_buffer_rWrPackets_rsCounter_52_BIT__ETC___d1580 :
	       32'd0 ;
  assign ab__h21855 = 2'd0 ;
  assign ab__h32590 = 2'd0 ;
  assign emac_rx_buffer_memBuffer_serverAdapterA_cnt_65_ETC___d758 =
	     (emac_rx_buffer_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_45_ETC___d651 =
	     emac_rx_buffer_memBuffer_serverAdapterB_cnt +
	     (emac_rx_buffer_memBuffer_serverAdapterB_cnt_1$whas ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_cnt_45_ETC___d807 =
	     (emac_rx_buffer_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign emac_rx_buffer_memBuffer_serverAdapterB_outDat_ETC___d831 =
	     emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$whas &&
	     !emac_rx_buffer_fifoDeq_taggedReg[10] &&
	     (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	      2'd0 &&
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	      2'd1 ||
	      emac_rx_buffer_memBuffer_serverAdapterB_cnt_45_ETC___d807) ;
  assign emac_rx_buffer_rRdPackets_rsCounter_99_BIT_0_0_ETC___d1497 =
	     z__h23782 ^ emac_rx_buffer_rRdPackets_rsCounter[7] ;
  assign emac_rx_buffer_rWrPackets_rsCounter_69_BIT_0_7_ETC___d1496 =
	     z__h17185 ^ emac_rx_buffer_rWrPackets_rsCounter[7] ;
  assign emac_rx_buffer_wBadFrame_wget__81_OR_emac_rx_b_ETC___d805 =
	     (emac_mac$EMACCLIENTRXBADFRAME ||
	      emac_mac$EMACCLIENTRXFRAMEDROP) &&
	     !emac_mac$EMACCLIENTRXGOODFRAME &&
	     emac_rx_buffer_rInPacket ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1034 =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt +
	     (emac_tx_buffer_memBuffer_serverAdapterB_cnt_1$whas ?
		3'd1 :
		3'd0) +
	     (emac_tx_buffer_memBuffer_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1159 =
	     (emac_tx_buffer_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1172 =
	     emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1159 &&
	     (emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	      emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas) ;
  assign emac_tx_buffer_memBuffer_serverAdapterB_outDat_ETC___d1192 =
	     (emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$EMPTY_N ||
	      emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$whas) &&
	     emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$whas &&
	     (emac_tx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8] !=
	      2'd1 ||
	      emac_tx_buffer_memBuffer_serverAdapterB_cnt_02_ETC___d1159) ;
  assign emac_tx_buffer_rRdPackets_rsCounter_069_BIT_0__ETC___d1499 =
	     z__h34719 ^ emac_tx_buffer_rRdPackets_rsCounter[7] ;
  assign emac_tx_buffer_rWrPackets_rsCounter_52_BIT_0_5_ETC___d1498 =
	     z__h27968 ^ emac_tx_buffer_rWrPackets_rsCounter[7] ;
  assign status__h39242 = { 16'd0, x__h39388 } ;
  assign x__h17130 =
	     8'd1 <<
	     IF_emac_rx_buffer_rWrPackets_rsCounter_69_BIT__ETC___d1571 ;
  assign x__h23727 =
	     8'd1 <<
	     IF_emac_rx_buffer_rRdPackets_rsCounter_99_BIT__ETC___d1576 ;
  assign x__h27913 =
	     8'd1 <<
	     IF_emac_tx_buffer_rWrPackets_rsCounter_52_BIT__ETC___d1581 ;
  assign x__h34664 =
	     8'd1 <<
	     IF_emac_tx_buffer_rRdPackets_rsCounter_069_BIT_ETC___d1586 ;
  assign x__h38728 =
	     WILL_FIRE_RL_emac_rx_buffer_dequeue_next_beat ?
	       emac_rx_buffer_fifoDeq_rw_enq$wget[7:0] :
	       emac_rx_buffer_fifoDeq_taggedReg[7:0] ;
  assign x__h39388 = { wsiM_statusR, wsiS_statusR } ;
  assign x_burstLength__h38663 =
	     IF_emac_rx_buffer_fifoDeq_rw_enq_whas__86_THEN_ETC___d1333 ?
	       12'd1 :
	       12'd4095 ;
  assign x_data__h38664 = { 24'd0, x__h38728 } ;
  assign y__h17795 = ~x__h17130 ;
  assign y__h24392 = ~x__h23727 ;
  assign y__h28578 = ~x__h27913 ;
  assign y__h35329 = ~x__h34664 ;
  assign z__h17150 =
	     emac_rx_buffer_rWrPackets_rsCounter[0] ^
	     emac_rx_buffer_rWrPackets_rsCounter[1] ;
  assign z__h17157 = z__h17150 ^ emac_rx_buffer_rWrPackets_rsCounter[2] ;
  assign z__h17164 = z__h17157 ^ emac_rx_buffer_rWrPackets_rsCounter[3] ;
  assign z__h17171 = z__h17164 ^ emac_rx_buffer_rWrPackets_rsCounter[4] ;
  assign z__h17178 = z__h17171 ^ emac_rx_buffer_rWrPackets_rsCounter[5] ;
  assign z__h17185 = z__h17178 ^ emac_rx_buffer_rWrPackets_rsCounter[6] ;
  assign z__h23747 =
	     emac_rx_buffer_rRdPackets_rsCounter[0] ^
	     emac_rx_buffer_rRdPackets_rsCounter[1] ;
  assign z__h23754 = z__h23747 ^ emac_rx_buffer_rRdPackets_rsCounter[2] ;
  assign z__h23761 = z__h23754 ^ emac_rx_buffer_rRdPackets_rsCounter[3] ;
  assign z__h23768 = z__h23761 ^ emac_rx_buffer_rRdPackets_rsCounter[4] ;
  assign z__h23775 = z__h23768 ^ emac_rx_buffer_rRdPackets_rsCounter[5] ;
  assign z__h23782 = z__h23775 ^ emac_rx_buffer_rRdPackets_rsCounter[6] ;
  assign z__h27933 =
	     emac_tx_buffer_rWrPackets_rsCounter[0] ^
	     emac_tx_buffer_rWrPackets_rsCounter[1] ;
  assign z__h27940 = z__h27933 ^ emac_tx_buffer_rWrPackets_rsCounter[2] ;
  assign z__h27947 = z__h27940 ^ emac_tx_buffer_rWrPackets_rsCounter[3] ;
  assign z__h27954 = z__h27947 ^ emac_tx_buffer_rWrPackets_rsCounter[4] ;
  assign z__h27961 = z__h27954 ^ emac_tx_buffer_rWrPackets_rsCounter[5] ;
  assign z__h27968 = z__h27961 ^ emac_tx_buffer_rWrPackets_rsCounter[6] ;
  assign z__h34684 =
	     emac_tx_buffer_rRdPackets_rsCounter[0] ^
	     emac_tx_buffer_rRdPackets_rsCounter[1] ;
  assign z__h34691 = z__h34684 ^ emac_tx_buffer_rRdPackets_rsCounter[2] ;
  assign z__h34698 = z__h34691 ^ emac_tx_buffer_rRdPackets_rsCounter[3] ;
  assign z__h34705 = z__h34698 ^ emac_tx_buffer_rRdPackets_rsCounter[4] ;
  assign z__h34712 = z__h34705 ^ emac_tx_buffer_rRdPackets_rsCounter[5] ;
  assign z__h34719 = z__h34712 ^ emac_tx_buffer_rRdPackets_rsCounter[6] ;
  always@(emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1 =
	      emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q1 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2 =
	      emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q2 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3 =
	      emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$D_OUT[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q3 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4 =
	      emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$D_OUT[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q4 = 2'd2;
    endcase
  end
  always@(wciRx_wslv_reqF$D_OUT or
	  status__h39242 or
	  gbeControl or wsiM_extStatusW$wget or wsiS_extStatusW$wget)
  begin
    case (wciRx_wslv_reqF$D_OUT[39:32])
      8'h0: _theResult____h39307 = status__h39242;
      8'h04: _theResult____h39307 = gbeControl;
      8'h10: _theResult____h39307 = wsiM_extStatusW$wget[95:64];
      8'h14: _theResult____h39307 = wsiM_extStatusW$wget[63:32];
      8'h18: _theResult____h39307 = wsiS_extStatusW$wget[95:64];
      8'h1C: _theResult____h39307 = wsiS_extStatusW$wget[63:32];
      default: _theResult____h39307 = 32'd0;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_memory$DOA)
  begin
    case (emac_rx_buffer_memBuffer_memory$DOA[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5 =
	      emac_rx_buffer_memBuffer_memory$DOA[9:8];
      default: CASE_emac_rx_buffer_memBuffer_memoryDOA_BITS__ETC__q5 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6 =
	      emac_rx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterA_o_ETC__q6 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_memory$DOB)
  begin
    case (emac_rx_buffer_memBuffer_memory$DOB[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7 =
	      emac_rx_buffer_memBuffer_memory$DOB[9:8];
      default: CASE_emac_rx_buffer_memBuffer_memoryDOB_BITS__ETC__q7 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8 =
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q8 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget)
  begin
    case (emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9 =
	      emac_rx_buffer_memBuffer_serverAdapterB_outData_outData$wget[9:8];
      default: CASE_emac_rx_buffer_memBuffer_serverAdapterB_o_ETC__q9 = 2'd2;
    endcase
  end
  always@(emac_rx_buffer_fifoDeq_rw_enq$wget)
  begin
    case (emac_rx_buffer_fifoDeq_rw_enq$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10 =
	      emac_rx_buffer_fifoDeq_rw_enq$wget[9:8];
      default: CASE_emac_rx_buffer_fifoDeq_rw_enqwget_BITS_9_ETC__q10 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_fifoEnq_rw_enq$wget)
  begin
    case (emac_tx_buffer_fifoEnq_rw_enq$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11 =
	      emac_tx_buffer_fifoEnq_rw_enq$wget[9:8];
      default: CASE_emac_tx_buffer_fifoEnq_rw_enqwget_BITS_9_ETC__q11 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_memory$DOA)
  begin
    case (emac_tx_buffer_memBuffer_memory$DOA[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12 =
	      emac_tx_buffer_memBuffer_memory$DOA[9:8];
      default: CASE_emac_tx_buffer_memBuffer_memoryDOA_BITS__ETC__q12 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13 =
	      emac_tx_buffer_memBuffer_serverAdapterA_outData_enqData$wget[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterA_o_ETC__q13 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_memory$DOB)
  begin
    case (emac_tx_buffer_memBuffer_memory$DOB[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14 =
	      emac_tx_buffer_memBuffer_memory$DOB[9:8];
      default: CASE_emac_tx_buffer_memBuffer_memoryDOB_BITS__ETC__q14 = 2'd2;
    endcase
  end
  always@(emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget)
  begin
    case (emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8])
      2'd0, 2'd1:
	  CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15 =
	      emac_tx_buffer_memBuffer_serverAdapterB_outData_enqData$wget[9:8];
      default: CASE_emac_tx_buffer_memBuffer_serverAdapterB_o_ETC__q15 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        emac_rx_buffer_fifoDeq_taggedReg <= `BSV_ASSIGNMENT_DELAY 11'd682;
	emac_rx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_rx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_rx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_rx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_rx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_fifoEnq_taggedReg <= `BSV_ASSIGNMENT_DELAY 11'd682;
	emac_tx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_tx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_tx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	gbeControl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wciRx_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wciRx_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciRx_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciRx_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciRx_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciRx_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciRx_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciRx_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciRx_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wciTx_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wciTx_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciTx_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wciTx_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciTx_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wciTx_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciTx_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wciTx_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciTx_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (emac_rx_buffer_fifoDeq_taggedReg$EN)
	  emac_rx_buffer_fifoDeq_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_fifoDeq_taggedReg$D_IN;
	if (emac_rx_buffer_memBuffer_serverAdapterB_cnt$EN)
	  emac_rx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
	if (emac_rx_buffer_memBuffer_serverAdapterB_s1$EN)
	  emac_rx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterB_s1$D_IN;
	if (emac_rx_buffer_rOutPacket$EN)
	  emac_rx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rOutPacket$D_IN;
	if (emac_rx_buffer_rRdCurrPtr$EN)
	  emac_rx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rRdCurrPtr$D_IN;
	if (emac_rx_buffer_rRdStartPtr$EN)
	  emac_rx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rRdStartPtr$D_IN;
	if (emac_tx_buffer_fifoEnq_taggedReg$EN)
	  emac_tx_buffer_fifoEnq_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_fifoEnq_taggedReg$D_IN;
	if (emac_tx_buffer_memBuffer_serverAdapterA_cnt$EN)
	  emac_tx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
	if (emac_tx_buffer_memBuffer_serverAdapterA_s1$EN)
	  emac_tx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterA_s1$D_IN;
	if (emac_tx_buffer_rWrCurrPtr$EN)
	  emac_tx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rWrCurrPtr$D_IN;
	if (emac_tx_buffer_rWrStartPtr$EN)
	  emac_tx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rWrStartPtr$D_IN;
	if (gbeControl$EN)
	  gbeControl <= `BSV_ASSIGNMENT_DELAY gbeControl$D_IN;
	if (wciRx_wslv_cEdge$EN)
	  wciRx_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wciRx_wslv_cEdge$D_IN;
	if (wciRx_wslv_cState$EN)
	  wciRx_wslv_cState <= `BSV_ASSIGNMENT_DELAY wciRx_wslv_cState$D_IN;
	if (wciRx_wslv_ctlAckReg$EN)
	  wciRx_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_ctlAckReg$D_IN;
	if (wciRx_wslv_ctlOpActive$EN)
	  wciRx_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_ctlOpActive$D_IN;
	if (wciRx_wslv_illegalEdge$EN)
	  wciRx_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_illegalEdge$D_IN;
	if (wciRx_wslv_nState$EN)
	  wciRx_wslv_nState <= `BSV_ASSIGNMENT_DELAY wciRx_wslv_nState$D_IN;
	if (wciRx_wslv_reqF_countReg$EN)
	  wciRx_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_reqF_countReg$D_IN;
	if (wciRx_wslv_respF_c_r$EN)
	  wciRx_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_respF_c_r$D_IN;
	if (wciRx_wslv_respF_q_0$EN)
	  wciRx_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_respF_q_0$D_IN;
	if (wciRx_wslv_respF_q_1$EN)
	  wciRx_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_respF_q_1$D_IN;
	if (wciRx_wslv_sFlagReg$EN)
	  wciRx_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_sFlagReg$D_IN;
	if (wciRx_wslv_sThreadBusy_d$EN)
	  wciRx_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wciRx_wslv_sThreadBusy_d$D_IN;
	if (wciTx_wslv_cEdge$EN)
	  wciTx_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wciTx_wslv_cEdge$D_IN;
	if (wciTx_wslv_cState$EN)
	  wciTx_wslv_cState <= `BSV_ASSIGNMENT_DELAY wciTx_wslv_cState$D_IN;
	if (wciTx_wslv_ctlAckReg$EN)
	  wciTx_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_ctlAckReg$D_IN;
	if (wciTx_wslv_ctlOpActive$EN)
	  wciTx_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_ctlOpActive$D_IN;
	if (wciTx_wslv_illegalEdge$EN)
	  wciTx_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_illegalEdge$D_IN;
	if (wciTx_wslv_nState$EN)
	  wciTx_wslv_nState <= `BSV_ASSIGNMENT_DELAY wciTx_wslv_nState$D_IN;
	if (wciTx_wslv_reqF_countReg$EN)
	  wciTx_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_reqF_countReg$D_IN;
	if (wciTx_wslv_respF_c_r$EN)
	  wciTx_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_respF_c_r$D_IN;
	if (wciTx_wslv_respF_q_0$EN)
	  wciTx_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_respF_q_0$D_IN;
	if (wciTx_wslv_respF_q_1$EN)
	  wciTx_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_respF_q_1$D_IN;
	if (wciTx_wslv_sFlagReg$EN)
	  wciTx_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_sFlagReg$D_IN;
	if (wciTx_wslv_sThreadBusy_d$EN)
	  wciTx_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wciTx_wslv_sThreadBusy_d$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge CLK_sys1_clk)
  begin
    if (!RST_N_sys1_rst)
      begin
        wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	wti_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (wti_nowReq$EN)
	  wti_nowReq <= `BSV_ASSIGNMENT_DELAY wti_nowReq$D_IN;
	if (wti_operateD$EN)
	  wti_operateD <= `BSV_ASSIGNMENT_DELAY wti_operateD$D_IN;
      end
  end

  always@(posedge emac_phy_rx_clk$O)
  begin
    if (!emac_rx_client_rst_n$OUT_RST_N)
      begin
        emac_rx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_rx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_rx_buffer_rInPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_rx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_rx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
      end
    else
      begin
        if (emac_rx_buffer_memBuffer_serverAdapterA_cnt$EN)
	  emac_rx_buffer_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterA_cnt$D_IN;
	if (emac_rx_buffer_memBuffer_serverAdapterA_s1$EN)
	  emac_rx_buffer_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_memBuffer_serverAdapterA_s1$D_IN;
	if (emac_rx_buffer_rInPacket$EN)
	  emac_rx_buffer_rInPacket <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rInPacket$D_IN;
	if (emac_rx_buffer_rWrCurrPtr$EN)
	  emac_rx_buffer_rWrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rWrCurrPtr$D_IN;
	if (emac_rx_buffer_rWrStartPtr$EN)
	  emac_rx_buffer_rWrStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_rx_buffer_rWrStartPtr$D_IN;
      end
    if (emac_rx_buffer_rData_D1$EN)
      emac_rx_buffer_rData_D1 <= `BSV_ASSIGNMENT_DELAY
	  emac_rx_buffer_rData_D1$D_IN;
  end

  always@(posedge emac_mac$TX_CLK_OUT)
  begin
    if (!emac_tx_client_rst_n$OUT_RST_N)
      begin
        emac_tx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	emac_tx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	emac_tx_buffer_rAcked <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_tx_buffer_rIfgDelay <= `BSV_ASSIGNMENT_DELAY 8'd5;
	emac_tx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	emac_tx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	emac_tx_buffer_rUnderrun <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (emac_tx_buffer_memBuffer_serverAdapterB_cnt$EN)
	  emac_tx_buffer_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterB_cnt$D_IN;
	if (emac_tx_buffer_memBuffer_serverAdapterB_s1$EN)
	  emac_tx_buffer_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_memBuffer_serverAdapterB_s1$D_IN;
	if (emac_tx_buffer_rAcked$EN)
	  emac_tx_buffer_rAcked <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rAcked$D_IN;
	if (emac_tx_buffer_rIfgDelay$EN)
	  emac_tx_buffer_rIfgDelay <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rIfgDelay$D_IN;
	if (emac_tx_buffer_rOutPacket$EN)
	  emac_tx_buffer_rOutPacket <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rOutPacket$D_IN;
	if (emac_tx_buffer_rRdCurrPtr$EN)
	  emac_tx_buffer_rRdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rRdCurrPtr$D_IN;
	if (emac_tx_buffer_rRdStartPtr$EN)
	  emac_tx_buffer_rRdStartPtr <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rRdStartPtr$D_IN;
	if (emac_tx_buffer_rUnderrun$EN)
	  emac_tx_buffer_rUnderrun <= `BSV_ASSIGNMENT_DELAY
	      emac_tx_buffer_rUnderrun$D_IN;
      end
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      emac_rx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      wciRx_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wciTx_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (emac_rx_buffer_rRdPackets_rsCounter$EN)
	emac_rx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rRdPackets_rsCounter$D_IN;
      if (emac_rx_buffer_rWrPackets_rdCounter$EN)
	emac_rx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rWrPackets_rdCounter$D_IN;
      if (emac_rx_buffer_rWrPackets_rdCounterPre$EN)
	emac_rx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rWrPackets_rdCounterPre$D_IN;
      if (emac_tx_buffer_rRdPackets_rdCounter$EN)
	emac_tx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rRdPackets_rdCounter$D_IN;
      if (emac_tx_buffer_rRdPackets_rdCounterPre$EN)
	emac_tx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rRdPackets_rdCounterPre$D_IN;
      if (emac_tx_buffer_rWrPackets_rsCounter$EN)
	emac_tx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rWrPackets_rsCounter$D_IN;
      if (wciRx_wslv_isReset_isInReset$EN)
	wciRx_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wciRx_wslv_isReset_isInReset$D_IN;
      if (wciTx_wslv_isReset_isInReset$EN)
	wciTx_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wciTx_wslv_isReset_isInReset$D_IN;
      if (wsiM_isReset_isInReset$EN)
	wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiM_isReset_isInReset$D_IN;
      if (wsiS_isReset_isInReset$EN)
	wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiS_isReset_isInReset$D_IN;
    end

  always@(posedge CLK_sys1_clk or negedge RST_N_sys1_rst)
  if (!RST_N_sys1_rst)
    begin
      wti_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wti_isReset_isInReset$EN)
	wti_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wti_isReset_isInReset$D_IN;
    end

  always@(posedge emac_phy_rx_clk$O or negedge emac_rx_client_rst_n$OUT_RST_N)
  if (!emac_rx_client_rst_n$OUT_RST_N)
    begin
      emac_rx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_rx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
    end
  else
    begin
      if (emac_rx_buffer_rRdPackets_rdCounter$EN)
	emac_rx_buffer_rRdPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rRdPackets_rdCounter$D_IN;
      if (emac_rx_buffer_rRdPackets_rdCounterPre$EN)
	emac_rx_buffer_rRdPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rRdPackets_rdCounterPre$D_IN;
      if (emac_rx_buffer_rWrPackets_rsCounter$EN)
	emac_rx_buffer_rWrPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_rx_buffer_rWrPackets_rsCounter$D_IN;
    end

  always@(posedge emac_mac$TX_CLK_OUT or
	  negedge emac_tx_client_rst_n$OUT_RST_N)
  if (!emac_tx_client_rst_n$OUT_RST_N)
    begin
      emac_tx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY 8'd0;
      emac_tx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 8'd0;
    end
  else
    begin
      if (emac_tx_buffer_rRdPackets_rsCounter$EN)
	emac_tx_buffer_rRdPackets_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rRdPackets_rsCounter$D_IN;
      if (emac_tx_buffer_rWrPackets_rdCounter$EN)
	emac_tx_buffer_rWrPackets_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rWrPackets_rdCounter$D_IN;
      if (emac_tx_buffer_rWrPackets_rdCounterPre$EN)
	emac_tx_buffer_rWrPackets_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    emac_tx_buffer_rWrPackets_rdCounterPre$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    emac_rx_buffer_fifoDeq_taggedReg = 11'h2AA;
    emac_rx_buffer_memBuffer_serverAdapterA_cnt = 3'h2;
    emac_rx_buffer_memBuffer_serverAdapterA_s1 = 2'h2;
    emac_rx_buffer_memBuffer_serverAdapterB_cnt = 3'h2;
    emac_rx_buffer_memBuffer_serverAdapterB_s1 = 2'h2;
    emac_rx_buffer_rData_D1 = 8'hAA;
    emac_rx_buffer_rInPacket = 1'h0;
    emac_rx_buffer_rOutPacket = 1'h0;
    emac_rx_buffer_rRdCurrPtr = 12'hAAA;
    emac_rx_buffer_rRdPackets_rdCounter = 8'hAA;
    emac_rx_buffer_rRdPackets_rdCounterPre = 8'hAA;
    emac_rx_buffer_rRdPackets_rsCounter = 8'hAA;
    emac_rx_buffer_rRdStartPtr = 12'hAAA;
    emac_rx_buffer_rWrCurrPtr = 12'hAAA;
    emac_rx_buffer_rWrPackets_rdCounter = 8'hAA;
    emac_rx_buffer_rWrPackets_rdCounterPre = 8'hAA;
    emac_rx_buffer_rWrPackets_rsCounter = 8'hAA;
    emac_rx_buffer_rWrStartPtr = 12'hAAA;
    emac_tx_buffer_fifoEnq_taggedReg = 11'h2AA;
    emac_tx_buffer_memBuffer_serverAdapterA_cnt = 3'h2;
    emac_tx_buffer_memBuffer_serverAdapterA_s1 = 2'h2;
    emac_tx_buffer_memBuffer_serverAdapterB_cnt = 3'h2;
    emac_tx_buffer_memBuffer_serverAdapterB_s1 = 2'h2;
    emac_tx_buffer_rAcked = 1'h0;
    emac_tx_buffer_rIfgDelay = 8'hAA;
    emac_tx_buffer_rOutPacket = 1'h0;
    emac_tx_buffer_rRdCurrPtr = 12'hAAA;
    emac_tx_buffer_rRdPackets_rdCounter = 8'hAA;
    emac_tx_buffer_rRdPackets_rdCounterPre = 8'hAA;
    emac_tx_buffer_rRdPackets_rsCounter = 8'hAA;
    emac_tx_buffer_rRdStartPtr = 12'hAAA;
    emac_tx_buffer_rUnderrun = 1'h0;
    emac_tx_buffer_rWrCurrPtr = 12'hAAA;
    emac_tx_buffer_rWrPackets_rdCounter = 8'hAA;
    emac_tx_buffer_rWrPackets_rdCounterPre = 8'hAA;
    emac_tx_buffer_rWrPackets_rsCounter = 8'hAA;
    emac_tx_buffer_rWrStartPtr = 12'hAAA;
    gbeControl = 32'hAAAAAAAA;
    wciRx_wslv_cEdge = 3'h2;
    wciRx_wslv_cState = 3'h2;
    wciRx_wslv_ctlAckReg = 1'h0;
    wciRx_wslv_ctlOpActive = 1'h0;
    wciRx_wslv_illegalEdge = 1'h0;
    wciRx_wslv_isReset_isInReset = 1'h0;
    wciRx_wslv_nState = 3'h2;
    wciRx_wslv_reqF_countReg = 2'h2;
    wciRx_wslv_respF_c_r = 2'h2;
    wciRx_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wciRx_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wciRx_wslv_sFlagReg = 1'h0;
    wciRx_wslv_sThreadBusy_d = 1'h0;
    wciTx_wslv_cEdge = 3'h2;
    wciTx_wslv_cState = 3'h2;
    wciTx_wslv_ctlAckReg = 1'h0;
    wciTx_wslv_ctlOpActive = 1'h0;
    wciTx_wslv_illegalEdge = 1'h0;
    wciTx_wslv_isReset_isInReset = 1'h0;
    wciTx_wslv_nState = 3'h2;
    wciTx_wslv_reqF_countReg = 2'h2;
    wciTx_wslv_respF_c_r = 2'h2;
    wciTx_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wciTx_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wciTx_wslv_sFlagReg = 1'h0;
    wciTx_wslv_sThreadBusy_d = 1'h0;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_isReset_isInReset = 1'h0;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_isReset_isInReset = 1'h0;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
    wti_isReset_isInReset = 1'h0;
    wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    wti_operateD = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h39169 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h39169,
		 wciRx_wslv_reqF$D_OUT[63:32],
		 wciRx_wslv_reqF$D_OUT[67:64],
		 wciRx_wslv_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciRx_wslv_ctl_op_start)
	begin
	  v__h3613 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciRx_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3613,
		 wciRx_wslv_reqF$D_OUT[36:34],
		 wciRx_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciTx_wslv_ctl_op_complete && wciTx_wslv_illegalEdge)
	begin
	  v__h8385 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciTx_wslv_ctl_op_complete && wciTx_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h8385,
		 wciTx_wslv_cEdge,
		 wciTx_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciTx_wslv_ctl_op_complete && !wciTx_wslv_illegalEdge)
	begin
	  v__h8241 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciTx_wslv_ctl_op_complete && !wciTx_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h8241,
		 wciTx_wslv_cEdge,
		 wciTx_wslv_cState,
		 wciTx_wslv_nState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciTx_wslv_ctl_op_start)
	begin
	  v__h8067 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciTx_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h8067,
		 wciTx_wslv_reqF$D_OUT[36:34],
		 wciTx_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h39323 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h39323,
		 wciRx_wslv_reqF$D_OUT[63:32],
		 wciRx_wslv_reqF$D_OUT[67:64],
		 _theResult____h39307);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 68, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (emac_rx_buffer_memBuffer_serverAdapterB_s1[1] &&
	  !emac_rx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciRx_wslv_ctl_op_complete && wciRx_wslv_illegalEdge)
	begin
	  v__h3931 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciRx_wslv_ctl_op_complete && wciRx_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3931,
		 wciRx_wslv_cEdge,
		 wciRx_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciRx_wslv_ctl_op_complete && !wciRx_wslv_illegalEdge)
	begin
	  v__h3787 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wciRx_wslv_ctl_op_complete && !wciRx_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3787,
		 wciRx_wslv_cEdge,
		 wciRx_wslv_cState,
		 wciRx_wslv_nState);
    if (wciS0_MReset_n)
      if (emac_tx_buffer_memBuffer_serverAdapterA_s1[1] &&
	  !emac_tx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge emac_phy_rx_clk$O or
	  negedge emac_gmii_rx_clk$O or negedge emac_gmii_rxc_delay$DATAOUT)
  begin
    #0;
    if (emac_rx_client_rst_n$OUT_RST_N)
      if (emac_rx_buffer_memBuffer_serverAdapterA_s1[1] &&
	  !emac_rx_buffer_memBuffer_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge emac_mac$TX_CLK_OUT)
  begin
    #0;
    if (emac_tx_client_rst_n$OUT_RST_N)
      if (emac_tx_buffer_memBuffer_serverAdapterB_s1[1] &&
	  !emac_tx_buffer_memBuffer_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkGbeWorker

