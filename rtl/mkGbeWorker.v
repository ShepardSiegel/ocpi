//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sat Apr 14 09:34:58 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wtiS0_SThreadBusy              O     1 reg
// wtiS0_SReset_n                 O     1
// wsiM0_MCmd                     O     3
// wsiM0_MReqLast                 O     1
// wsiM0_MBurstPrecise            O     1
// wsiM0_MBurstLength             O    12
// wsiM0_MData                    O    32 reg
// wsiM0_MByteEn                  O     4 reg
// wsiM0_MReqInfo                 O     8
// wsiM0_MReset_n                 O     1
// wsiS0_SThreadBusy              O     1
// wsiS0_SReset_n                 O     1
// cpClient_request_get           O    59 reg
// RDY_cpClient_request_get       O     1 reg
// RDY_cpClient_response_put      O     1 reg
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclk                      O     1 clock
// CLK_GATE_rxclk                 O     1 const
// RST_N_gmii_rstn                O     1 reset
// CLK_gmii_rx_clk                I     1 clock
// CLK_sys1_clk                   I     1 clock
// RST_N_sys1_rst                 I     1 reset
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wtiS0_req                      I    67 reg
// wsiS0_MCmd                     I     3
// wsiS0_MBurstLength             I    12
// wsiS0_MData                    I    32
// wsiS0_MByteEn                  I     4
// wsiS0_MReqInfo                 I     8
// cpClient_response_put          I    40 reg
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1 unused
// gmii_crs_i                     I     1 unused
// wsiM0_SThreadBusy              I     1 reg
// wsiM0_SReset_n                 I     1 reg
// wsiS0_MReqLast                 I     1
// wsiS0_MBurstPrecise            I     1
// wsiS0_MReset_n                 I     1 reg
// EN_cpClient_response_put       I     1
// EN_cpClient_request_get        I     1
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGbeWorker(CLK_gmii_rx_clk,
		   CLK_sys1_clk,
		   RST_N_sys1_rst,
		   wciS0_Clk,
		   wciS0_MReset_n,

		   mdio_mdd,
		   mdio_mdc,

		   wciS0_MCmd,

		   wciS0_MAddrSpace,

		   wciS0_MByteEn,

		   wciS0_MAddr,

		   wciS0_MData,

		   wciS0_SResp,

		   wciS0_SData,

		   wciS0_SThreadBusy,

		   wciS0_SFlag,

		   wciS0_MFlag,

		   wtiS0_req,

		   wtiS0_SThreadBusy,

		   wtiS0_SReset_n,

		   wsiM0_MCmd,

		   wsiM0_MReqLast,

		   wsiM0_MBurstPrecise,

		   wsiM0_MBurstLength,

		   wsiM0_MData,

		   wsiM0_MByteEn,

		   wsiM0_MReqInfo,

		   wsiM0_SThreadBusy,

		   wsiM0_MReset_n,

		   wsiM0_SReset_n,

		   wsiS0_MCmd,

		   wsiS0_MReqLast,

		   wsiS0_MBurstPrecise,

		   wsiS0_MBurstLength,

		   wsiS0_MData,

		   wsiS0_MByteEn,

		   wsiS0_MReqInfo,

		   wsiS0_SThreadBusy,

		   wsiS0_SReset_n,

		   wsiS0_MReset_n,

		   EN_cpClient_request_get,
		   cpClient_request_get,
		   RDY_cpClient_request_get,

		   cpClient_response_put,
		   EN_cpClient_response_put,
		   RDY_cpClient_response_put,

		   gmii_rx_rxd_i,

		   gmii_rx_rx_dv_i,

		   gmii_rx_rx_er_i,

		   gmii_tx_txd,

		   gmii_tx_tx_en,

		   gmii_tx_tx_er,

		   gmii_col_i,

		   gmii_crs_i,

		   CLK_gmii_tx_tx_clk,
		   CLK_GATE_gmii_tx_tx_clk,

		   CLK_rxclk,
		   CLK_GATE_rxclk,

		   RST_N_gmii_rstn);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  CLK_gmii_rx_clk;
  input  CLK_sys1_clk;
  input  RST_N_sys1_rst;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  inout  mdio_mdd;
  inout  mdio_mdc;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // action method wtiS0_put
  input  [66 : 0] wtiS0_req;

  // value method wtiS0_sThreadBusy
  output wtiS0_SThreadBusy;

  // value method wtiS0_sReset_n
  output wtiS0_SReset_n;

  // value method wsiM0_mCmd
  output [2 : 0] wsiM0_MCmd;

  // value method wsiM0_mReqLast
  output wsiM0_MReqLast;

  // value method wsiM0_mBurstPrecise
  output wsiM0_MBurstPrecise;

  // value method wsiM0_mBurstLength
  output [11 : 0] wsiM0_MBurstLength;

  // value method wsiM0_mData
  output [31 : 0] wsiM0_MData;

  // value method wsiM0_mByteEn
  output [3 : 0] wsiM0_MByteEn;

  // value method wsiM0_mReqInfo
  output [7 : 0] wsiM0_MReqInfo;

  // value method wsiM0_mDataInfo

  // action method wsiM0_sThreadBusy
  input  wsiM0_SThreadBusy;

  // value method wsiM0_mReset_n
  output wsiM0_MReset_n;

  // action method wsiM0_sReset_n
  input  wsiM0_SReset_n;

  // action method wsiS0_mCmd
  input  [2 : 0] wsiS0_MCmd;

  // action method wsiS0_mReqLast
  input  wsiS0_MReqLast;

  // action method wsiS0_mBurstPrecise
  input  wsiS0_MBurstPrecise;

  // action method wsiS0_mBurstLength
  input  [11 : 0] wsiS0_MBurstLength;

  // action method wsiS0_mData
  input  [31 : 0] wsiS0_MData;

  // action method wsiS0_mByteEn
  input  [3 : 0] wsiS0_MByteEn;

  // action method wsiS0_mReqInfo
  input  [7 : 0] wsiS0_MReqInfo;

  // action method wsiS0_mDataInfo

  // value method wsiS0_sThreadBusy
  output wsiS0_SThreadBusy;

  // value method wsiS0_sReset_n
  output wsiS0_SReset_n;

  // action method wsiS0_mReset_n
  input  wsiS0_MReset_n;

  // actionvalue method cpClient_request_get
  input  EN_cpClient_request_get;
  output [58 : 0] cpClient_request_get;
  output RDY_cpClient_request_get;

  // action method cpClient_response_put
  input  [39 : 0] cpClient_response_put;
  input  EN_cpClient_response_put;
  output RDY_cpClient_response_put;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclk
  output CLK_rxclk;
  output CLK_GATE_rxclk;

  // output resets
  output RST_N_gmii_rstn;

  // signals for module outputs
  wire [58 : 0] cpClient_request_get;
  wire [31 : 0] wciS0_SData, wsiM0_MData;
  wire [11 : 0] wsiM0_MBurstLength;
  wire [7 : 0] gmii_tx_txd, wsiM0_MReqInfo;
  wire [3 : 0] wsiM0_MByteEn;
  wire [2 : 0] wsiM0_MCmd;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclk,
       CLK_gmii_tx_tx_clk,
       CLK_rxclk,
       RDY_cpClient_request_get,
       RDY_cpClient_response_put,
       RST_N_gmii_rstn,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       wciS0_SThreadBusy,
       wsiM0_MBurstPrecise,
       wsiM0_MReqLast,
       wsiM0_MReset_n,
       wsiS0_SReset_n,
       wsiS0_SThreadBusy,
       wtiS0_SReset_n,
       wtiS0_SThreadBusy;

  // inlined wires
  wire [95 : 0] wsiM_extStatusW$wget, wsiS_extStatusW$wget;
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire [66 : 0] wti_wtiReq$wget;
  wire [60 : 0] wsiM_reqFifo_x_wire$wget, wsiS_wsiReq$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget;
  wire [31 : 0] wci_wci_Es_mAddr_w$wget,
		wci_wci_Es_mData_w$wget,
		wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wci_wci_Es_mByteEn_w$wget, wsi_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wci_Es_mCmd_w$wget,
	       wci_wslv_wEdge$wget,
	       wsi_Es_mCmd_w$wget;
  wire mdi_pwTick$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas,
       wti_operateD_1$wget,
       wti_operateD_1$whas,
       wti_wtiReq$whas;

  // register gbeControl
  reg [31 : 0] gbeControl;
  wire [31 : 0] gbeControl$D_IN;
  wire gbeControl$EN;

  // register macAddress
  reg [47 : 0] macAddress;
  wire [47 : 0] macAddress$D_IN;
  wire macAddress$EN;

  // register mdi_rMDC
  reg mdi_rMDC;
  wire mdi_rMDC$D_IN, mdi_rMDC$EN;

  // register mdi_rMDD
  reg mdi_rMDD;
  wire mdi_rMDD$D_IN, mdi_rMDD$EN;

  // register mdi_rOutEn
  reg mdi_rOutEn;
  wire mdi_rOutEn$D_IN, mdi_rOutEn$EN;

  // register mdi_rPhyAddr
  reg [4 : 0] mdi_rPhyAddr;
  wire [4 : 0] mdi_rPhyAddr$D_IN;
  wire mdi_rPhyAddr$EN;

  // register mdi_rRegAddr
  reg [4 : 0] mdi_rRegAddr;
  wire [4 : 0] mdi_rRegAddr$D_IN;
  wire mdi_rRegAddr$EN;

  // register mdi_rState
  reg mdi_rState;
  wire mdi_rState$D_IN, mdi_rState$EN;

  // register mdi_rWrite
  reg mdi_rWrite;
  wire mdi_rWrite$D_IN, mdi_rWrite$EN;

  // register mdi_rWriteData
  reg [15 : 0] mdi_rWriteData;
  wire [15 : 0] mdi_rWriteData$D_IN;
  wire mdi_rWriteData$EN;

  // register mdi_vrReadData
  reg mdi_vrReadData;
  wire mdi_vrReadData$D_IN, mdi_vrReadData$EN;

  // register mdi_vrReadData_1
  reg mdi_vrReadData_1;
  wire mdi_vrReadData_1$D_IN, mdi_vrReadData_1$EN;

  // register mdi_vrReadData_10
  reg mdi_vrReadData_10;
  wire mdi_vrReadData_10$D_IN, mdi_vrReadData_10$EN;

  // register mdi_vrReadData_11
  reg mdi_vrReadData_11;
  wire mdi_vrReadData_11$D_IN, mdi_vrReadData_11$EN;

  // register mdi_vrReadData_12
  reg mdi_vrReadData_12;
  wire mdi_vrReadData_12$D_IN, mdi_vrReadData_12$EN;

  // register mdi_vrReadData_13
  reg mdi_vrReadData_13;
  wire mdi_vrReadData_13$D_IN, mdi_vrReadData_13$EN;

  // register mdi_vrReadData_14
  reg mdi_vrReadData_14;
  wire mdi_vrReadData_14$D_IN, mdi_vrReadData_14$EN;

  // register mdi_vrReadData_15
  reg mdi_vrReadData_15;
  wire mdi_vrReadData_15$D_IN, mdi_vrReadData_15$EN;

  // register mdi_vrReadData_2
  reg mdi_vrReadData_2;
  wire mdi_vrReadData_2$D_IN, mdi_vrReadData_2$EN;

  // register mdi_vrReadData_3
  reg mdi_vrReadData_3;
  wire mdi_vrReadData_3$D_IN, mdi_vrReadData_3$EN;

  // register mdi_vrReadData_4
  reg mdi_vrReadData_4;
  wire mdi_vrReadData_4$D_IN, mdi_vrReadData_4$EN;

  // register mdi_vrReadData_5
  reg mdi_vrReadData_5;
  wire mdi_vrReadData_5$D_IN, mdi_vrReadData_5$EN;

  // register mdi_vrReadData_6
  reg mdi_vrReadData_6;
  wire mdi_vrReadData_6$D_IN, mdi_vrReadData_6$EN;

  // register mdi_vrReadData_7
  reg mdi_vrReadData_7;
  wire mdi_vrReadData_7$D_IN, mdi_vrReadData_7$EN;

  // register mdi_vrReadData_8
  reg mdi_vrReadData_8;
  wire mdi_vrReadData_8$D_IN, mdi_vrReadData_8$EN;

  // register mdi_vrReadData_9
  reg mdi_vrReadData_9;
  wire mdi_vrReadData_9$D_IN, mdi_vrReadData_9$EN;

  // register phyResetWaitCnt
  reg [21 : 0] phyResetWaitCnt;
  wire [21 : 0] phyResetWaitCnt$D_IN;
  wire phyResetWaitCnt$EN;

  // register rxAbortEOPC
  reg [31 : 0] rxAbortEOPC;
  wire [31 : 0] rxAbortEOPC$D_IN;
  wire rxAbortEOPC$EN;

  // register rxCount
  reg [31 : 0] rxCount;
  wire [31 : 0] rxCount$D_IN;
  wire rxCount$EN;

  // register rxDCPCnt
  reg [31 : 0] rxDCPCnt;
  wire [31 : 0] rxDCPCnt$D_IN;
  wire rxDCPCnt$EN;

  // register rxDCPMesg
  reg [111 : 0] rxDCPMesg;
  wire [111 : 0] rxDCPMesg$D_IN;
  wire rxDCPMesg$EN;

  // register rxDCPMesgPos
  reg [4 : 0] rxDCPMesgPos;
  wire [4 : 0] rxDCPMesgPos$D_IN;
  wire rxDCPMesgPos$EN;

  // register rxDCPPLI
  reg [7 : 0] rxDCPPLI;
  wire [7 : 0] rxDCPPLI$D_IN;
  wire rxDCPPLI$EN;

  // register rxEmptyEOPC
  reg [31 : 0] rxEmptyEOPC;
  wire [31 : 0] rxEmptyEOPC$D_IN;
  wire rxEmptyEOPC$EN;

  // register rxHdrMatchCnt
  reg [31 : 0] rxHdrMatchCnt;
  wire [31 : 0] rxHdrMatchCnt$D_IN;
  wire rxHdrMatchCnt$EN;

  // register rxHdr_mCnt
  reg [3 : 0] rxHdr_mCnt;
  wire [3 : 0] rxHdr_mCnt$D_IN;
  wire rxHdr_mCnt$EN;

  // register rxHdr_pV
  reg [112 : 0] rxHdr_pV;
  wire [112 : 0] rxHdr_pV$D_IN;
  wire rxHdr_pV$EN;

  // register rxHdr_pos
  reg [3 : 0] rxHdr_pos;
  wire [3 : 0] rxHdr_pos$D_IN;
  wire rxHdr_pos$EN;

  // register rxHdr_sV
  reg [112 : 0] rxHdr_sV;
  wire [112 : 0] rxHdr_sV$D_IN;
  wire rxHdr_sV$EN;

  // register rxHeadCap
  reg [127 : 0] rxHeadCap;
  wire [127 : 0] rxHeadCap$D_IN;
  wire rxHeadCap$EN;

  // register rxLenCount
  reg [31 : 0] rxLenCount;
  wire [31 : 0] rxLenCount$D_IN;
  wire rxLenCount$EN;

  // register rxLenLast
  reg [31 : 0] rxLenLast;
  wire [31 : 0] rxLenLast$D_IN;
  wire rxLenLast$EN;

  // register rxOvfCount
  reg [31 : 0] rxOvfCount;
  wire [31 : 0] rxOvfCount$D_IN;
  wire rxOvfCount$EN;

  // register rxPipe
  reg [31 : 0] rxPipe;
  wire [31 : 0] rxPipe$D_IN;
  wire rxPipe$EN;

  // register rxPos
  reg [1 : 0] rxPos;
  wire [1 : 0] rxPos$D_IN;
  wire rxPos$EN;

  // register rxValidEOPC
  reg [31 : 0] rxValidEOPC;
  wire [31 : 0] rxValidEOPC$D_IN;
  wire rxValidEOPC$EN;

  // register rxValidNoEOPC
  reg [31 : 0] rxValidNoEOPC;
  wire [31 : 0] rxValidNoEOPC$D_IN;
  wire rxValidNoEOPC$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register txCount
  reg [31 : 0] txCount;
  wire [31 : 0] txCount$D_IN;
  wire txCount$EN;

  // register txDBGCnt
  reg [31 : 0] txDBGCnt;
  wire [31 : 0] txDBGCnt$D_IN;
  wire txDBGCnt$EN;

  // register txDBGPos
  reg [4 : 0] txDBGPos;
  wire [4 : 0] txDBGPos$D_IN;
  wire txDBGPos$EN;

  // register txDCPCnt
  reg [31 : 0] txDCPCnt;
  wire [31 : 0] txDCPCnt$D_IN;
  wire txDCPCnt$EN;

  // register txDCPPos
  reg [4 : 0] txDCPPos;
  wire [4 : 0] txDCPPos$D_IN;
  wire txDCPPos$EN;

  // register txUndCount
  reg [31 : 0] txUndCount;
  wire [31 : 0] txUndCount$D_IN;
  wire txUndCount$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_isReset_isInReset
  reg wsiM_isReset_isInReset;
  wire wsiM_isReset_isInReset$D_IN, wsiM_isReset_isInReset$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  wire [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  wire [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_isReset_isInReset
  reg wsiS_isReset_isInReset;
  wire wsiS_isReset_isInReset$D_IN, wsiS_isReset_isInReset$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // register wti_isReset_isInReset
  reg wti_isReset_isInReset;
  wire wti_isReset_isInReset$D_IN, wti_isReset_isInReset$EN;

  // register wti_nowReq
  reg [66 : 0] wti_nowReq;
  wire [66 : 0] wti_nowReq$D_IN;
  wire wti_nowReq$EN;

  // register wti_operateD
  reg wti_operateD;
  wire wti_operateD$D_IN, wti_operateD$EN;

  // ports of submodule dcpRespF
  wire [43 : 0] dcpRespF$D_IN, dcpRespF$D_OUT;
  wire dcpRespF$CLR,
       dcpRespF$DEQ,
       dcpRespF$EMPTY_N,
       dcpRespF$ENQ,
       dcpRespF$FULL_N;

  // ports of submodule dcp_cpReqF
  wire [58 : 0] dcp_cpReqF$D_IN, dcp_cpReqF$D_OUT;
  wire dcp_cpReqF$CLR,
       dcp_cpReqF$DEQ,
       dcp_cpReqF$EMPTY_N,
       dcp_cpReqF$ENQ,
       dcp_cpReqF$FULL_N;

  // ports of submodule dcp_cpRespF
  wire [39 : 0] dcp_cpRespF$D_IN, dcp_cpRespF$D_OUT;
  wire dcp_cpRespF$CLR,
       dcp_cpRespF$DEQ,
       dcp_cpRespF$EMPTY_N,
       dcp_cpRespF$ENQ,
       dcp_cpRespF$FULL_N;

  // ports of submodule dcp_dcpReqF
  reg [77 : 0] dcp_dcpReqF$D_IN;
  wire [77 : 0] dcp_dcpReqF$D_OUT;
  wire dcp_dcpReqF$CLR,
       dcp_dcpReqF$DEQ,
       dcp_dcpReqF$EMPTY_N,
       dcp_dcpReqF$ENQ,
       dcp_dcpReqF$FULL_N;

  // ports of submodule dcp_dcpRespF
  wire [43 : 0] dcp_dcpRespF$D_IN, dcp_dcpRespF$D_OUT;
  wire dcp_dcpRespF$CLR,
       dcp_dcpRespF$DEQ,
       dcp_dcpRespF$EMPTY_N,
       dcp_dcpRespF$ENQ,
       dcp_dcpRespF$FULL_N;

  // ports of submodule gmac
  wire [9 : 0] gmac$rx_get, gmac$tx_put;
  wire [7 : 0] gmac$gmii_rx_rxd_i, gmac$gmii_tx_txd;
  wire gmac$CLK_gmii_tx_tx_clk,
       gmac$CLK_rxclk,
       gmac$EN_rxOperate,
       gmac$EN_rx_get,
       gmac$EN_txOperate,
       gmac$EN_tx_put,
       gmac$RDY_rx_get,
       gmac$RDY_tx_put,
       gmac$gmii_col_i,
       gmac$gmii_crs_i,
       gmac$gmii_rx_rx_dv_i,
       gmac$gmii_rx_rx_er_i,
       gmac$gmii_tx_tx_en,
       gmac$gmii_tx_tx_er,
       gmac$rxOverFlow,
       gmac$txUnderFlow;

  // ports of submodule mdi_fRequest
  wire [26 : 0] mdi_fRequest$D_IN, mdi_fRequest$D_OUT;
  wire mdi_fRequest$CLR,
       mdi_fRequest$DEQ,
       mdi_fRequest$EMPTY_N,
       mdi_fRequest$ENQ,
       mdi_fRequest$FULL_N;

  // ports of submodule mdi_fResponse
  wire [16 : 0] mdi_fResponse$D_IN, mdi_fResponse$D_OUT;
  wire mdi_fResponse$CLR,
       mdi_fResponse$DEQ,
       mdi_fResponse$EMPTY_N,
       mdi_fResponse$ENQ,
       mdi_fResponse$FULL_N;

  // ports of submodule mdi_rPlayIndex
  wire [7 : 0] mdi_rPlayIndex$DATA_A,
	       mdi_rPlayIndex$DATA_B,
	       mdi_rPlayIndex$DATA_C,
	       mdi_rPlayIndex$DATA_F,
	       mdi_rPlayIndex$Q_OUT;
  wire mdi_rPlayIndex$ADDA,
       mdi_rPlayIndex$ADDB,
       mdi_rPlayIndex$SETC,
       mdi_rPlayIndex$SETF;

  // ports of submodule mdi_rPrescaler
  wire [3 : 0] mdi_rPrescaler$DATA_A,
	       mdi_rPrescaler$DATA_B,
	       mdi_rPrescaler$DATA_C,
	       mdi_rPrescaler$DATA_F,
	       mdi_rPrescaler$Q_OUT;
  wire mdi_rPrescaler$ADDA,
       mdi_rPrescaler$ADDB,
       mdi_rPrescaler$SETC,
       mdi_rPrescaler$SETF;

  // ports of submodule mdi_tMDC
  wire mdi_tMDC$IO;

  // ports of submodule mdi_tMDD
  wire mdi_tMDD$IO, mdi_tMDD$O;

  // ports of submodule phyRst
  wire phyRst$ASSERT_IN, phyRst$OUT_RST_N;

  // ports of submodule rxDCPHdrF
  wire [111 : 0] rxDCPHdrF$D_IN;
  wire rxDCPHdrF$CLR,
       rxDCPHdrF$DEQ,
       rxDCPHdrF$EMPTY_N,
       rxDCPHdrF$ENQ,
       rxDCPHdrF$FULL_N;

  // ports of submodule txDBGF
  wire [31 : 0] txDBGF$D_IN;
  wire txDBGF$CLR, txDBGF$DEQ, txDBGF$ENQ, txDBGF$FULL_N;

  // ports of submodule txDCPHdrF
  wire [111 : 0] txDCPHdrF$D_IN;
  wire txDCPHdrF$CLR, txDCPHdrF$DEQ, txDCPHdrF$ENQ;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_dcp_cp_response,
       CAN_FIRE_RL_rx_dcp,
       CAN_FIRE_RL_tx_dcp,
       CAN_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_dcp_dcp_request,
       WILL_FIRE_RL_mdi_run_frame,
       WILL_FIRE_RL_rx_data,
       WILL_FIRE_RL_rx_dcp,
       WILL_FIRE_RL_tx_dcp,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [112 : 0] MUX_rxHdr_sV$write_1__VAL_1;
  wire [43 : 0] MUX_dcp_dcpRespF$enq_1__VAL_1, MUX_dcp_dcpRespF$enq_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [26 : 0] MUX_mdi_fRequest$enq_1__VAL_1, MUX_mdi_fRequest$enq_1__VAL_2;
  wire [4 : 0] MUX_rxDCPMesgPos$write_1__VAL_1;
  wire [3 : 0] MUX_rxHdr_mCnt$write_1__VAL_1, MUX_rxHdr_pos$write_1__VAL_1;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_dcp_dcpRespF$enq_1__SEL_1,
       MUX_dcp_dcpRespF$enq_1__SEL_2,
       MUX_mdi_fRequest$enq_1__SEL_1,
       MUX_mdi_rState$write_1__SEL_1,
       MUX_mdi_rState$write_1__SEL_2,
       MUX_rxDCPMesgPos$write_1__SEL_1,
       MUX_rxDCPPLI$write_1__SEL_1,
       MUX_rxHdr_mCnt$write_1__SEL_1,
       MUX_rxHdr_pos$write_1__SEL_1,
       MUX_splitReadInFlight$write_1__SEL_1,
       MUX_splitReadInFlight$write_1__SEL_2,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__VAL_1,
       MUX_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h102035, v__h3630, v__h3804, v__h3948, v__h81766, v__h82055;
  reg [31 : 0] IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052;
  reg [9 : 0] CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9,
	      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7,
	      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8;
  reg [7 : 0] CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6,
	      CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2,
	      CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1,
	      IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117,
	      tag__h72295;
  reg [4 : 0] CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11;
  reg [1 : 0] CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5;
  reg CASE_IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_ETC__q4,
      CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3,
      IF_txDCPPos_55_EQ_0_56_OR_txDCPPos_55_EQ_1_57__ETC___d1250;
  wire [101 : 0] _1448743543117976458853375091858__q10,
		 _643371375338640__q12,
		 bs__h12594,
		 bs__h25057;
  wire [31 : 0] rdat___1__h100264,
		rdat___1__h82274,
		rdat___1__h82325,
		rdat___1__h82366,
		rdat___1__h82401,
		rdat___1__h82434,
		rdat___1__h82475,
		rdat___1__h82510,
		rdat___1__h82544,
		rdat___1__h82577,
		rdat___1__h82611,
		rdat___1__h82644,
		rdat___1__h82677,
		rdat___1__h82710,
		rdat___1__h82743,
		rdat___1__h82776,
		rdat___1__h82809,
		rdat___1__h82843,
		rdat___1__h82876,
		rdat___1__h82910,
		rdat___1__h82944,
		rdat___1__h82981,
		rdat___1__h83018,
		rdat___1__h85519,
		rdat___1__h88017,
		rdat___1__h90518,
		rdat___1__h93016,
		rdat___1__h95517,
		rdat___1__h97124,
		rdat___1__h98694,
		rdat__h82039,
		status__h81840,
		x__h72086;
  wire [15 : 0] x__h82120, x__h82278, x_data__h28255;
  wire [4 : 0] IF_txDCPPos_55_EQ_9_73_THEN_0_ELSE_txDCPPos_55_ETC___d1234,
	       txDCPPos_55_PLUS_1___d1163;
  wire [2 : 0] d0__h12220,
	       d10__h12210,
	       d11__h12209,
	       d12__h12208,
	       d13__h12207,
	       d14__h12206,
	       d15__h12205,
	       d1__h12219,
	       d2__h12218,
	       d3__h12217,
	       d4__h12216,
	       d5__h12215,
	       d6__h12214,
	       d7__h12213,
	       d8__h12212,
	       d9__h12211,
	       pa0__h12197,
	       pa1__h12196,
	       pa2__h12195,
	       pa3__h12194,
	       pa4__h12193,
	       ra0__h12203,
	       ra1__h12202,
	       ra2__h12201,
	       ra3__h12200,
	       ra4__h12199;
  wire IF_dcp_dcpReqF_first__43_BITS_77_TO_76_44_EQ_0_ETC___d454,
       IF_rxHdr_pos_15_EQ_0_31_THEN_rxHdr_sV_97_BITS__ETC___d600,
       NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d621,
       NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d811,
       dcpRespF_i_notEmpty__51_AND_IF_dcpRespF_first__ETC___d787,
       gmac_rx_get_09_BITS_9_TO_8_10_EQ_0_11_OR_gmac__ETC___d603,
       rxHdr_sV_97_BIT_112_98_OR_NOT_rxHdr_sV_97_BITS_ETC___d894,
       wci_wslv_reqF_i_notEmpty__4_AND_IF_wci_wslv_re_ETC___d924;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclk
  assign CLK_rxclk = gmac$CLK_rxclk ;
  assign CLK_GATE_rxclk = 1'b1 ;

  // output resets
  assign RST_N_gmii_rstn = phyRst$OUT_RST_N ;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // value method wtiS0_sThreadBusy
  assign wtiS0_SThreadBusy = wti_isReset_isInReset ;

  // value method wtiS0_sReset_n
  assign wtiS0_SReset_n = !wti_isReset_isInReset && wti_operateD ;

  // value method wsiM0_mCmd
  assign wsiM0_MCmd = wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;

  // value method wsiM0_mReqLast
  assign wsiM0_MReqLast = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;

  // value method wsiM0_mBurstPrecise
  assign wsiM0_MBurstPrecise = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;

  // value method wsiM0_mBurstLength
  assign wsiM0_MBurstLength =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;

  // value method wsiM0_mData
  assign wsiM0_MData = wsiM_reqFifo_q_0[43:12] ;

  // value method wsiM0_mByteEn
  assign wsiM0_MByteEn = wsiM_reqFifo_q_0[11:8] ;

  // value method wsiM0_mReqInfo
  assign wsiM0_MReqInfo = wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;

  // value method wsiM0_mReset_n
  assign wsiM0_MReset_n = !wsiM_isReset_isInReset && wsiM_operateD ;

  // value method wsiS0_sThreadBusy
  assign wsiS0_SThreadBusy =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;

  // value method wsiS0_sReset_n
  assign wsiS0_SReset_n = !wsiS_isReset_isInReset && wsiS_operateD ;

  // actionvalue method cpClient_request_get
  assign cpClient_request_get = dcp_cpReqF$D_OUT ;
  assign RDY_cpClient_request_get = dcp_cpReqF$EMPTY_N ;

  // action method cpClient_response_put
  assign RDY_cpClient_response_put = dcp_cpRespF$FULL_N ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac$gmii_tx_tx_er ;

  // submodule dcpRespF
  FIFO2 #(.width(32'd44), .guarded(32'd1)) dcpRespF(.RST_N(wciS0_MReset_n),
						    .CLK(wciS0_Clk),
						    .D_IN(dcpRespF$D_IN),
						    .ENQ(dcpRespF$ENQ),
						    .DEQ(dcpRespF$DEQ),
						    .CLR(dcpRespF$CLR),
						    .D_OUT(dcpRespF$D_OUT),
						    .FULL_N(dcpRespF$FULL_N),
						    .EMPTY_N(dcpRespF$EMPTY_N));

  // submodule dcp_cpReqF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) dcp_cpReqF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(dcp_cpReqF$D_IN),
						      .ENQ(dcp_cpReqF$ENQ),
						      .DEQ(dcp_cpReqF$DEQ),
						      .CLR(dcp_cpReqF$CLR),
						      .D_OUT(dcp_cpReqF$D_OUT),
						      .FULL_N(dcp_cpReqF$FULL_N),
						      .EMPTY_N(dcp_cpReqF$EMPTY_N));

  // submodule dcp_cpRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) dcp_cpRespF(.RST_N(wciS0_MReset_n),
						       .CLK(wciS0_Clk),
						       .D_IN(dcp_cpRespF$D_IN),
						       .ENQ(dcp_cpRespF$ENQ),
						       .DEQ(dcp_cpRespF$DEQ),
						       .CLR(dcp_cpRespF$CLR),
						       .D_OUT(dcp_cpRespF$D_OUT),
						       .FULL_N(dcp_cpRespF$FULL_N),
						       .EMPTY_N(dcp_cpRespF$EMPTY_N));

  // submodule dcp_dcpReqF
  FIFO2 #(.width(32'd78), .guarded(32'd1)) dcp_dcpReqF(.RST_N(wciS0_MReset_n),
						       .CLK(wciS0_Clk),
						       .D_IN(dcp_dcpReqF$D_IN),
						       .ENQ(dcp_dcpReqF$ENQ),
						       .DEQ(dcp_dcpReqF$DEQ),
						       .CLR(dcp_dcpReqF$CLR),
						       .D_OUT(dcp_dcpReqF$D_OUT),
						       .FULL_N(dcp_dcpReqF$FULL_N),
						       .EMPTY_N(dcp_dcpReqF$EMPTY_N));

  // submodule dcp_dcpRespF
  FIFO2 #(.width(32'd44),
	  .guarded(32'd1)) dcp_dcpRespF(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(dcp_dcpRespF$D_IN),
					.ENQ(dcp_dcpRespF$ENQ),
					.DEQ(dcp_dcpRespF$DEQ),
					.CLR(dcp_dcpRespF$CLR),
					.D_OUT(dcp_dcpRespF$D_OUT),
					.FULL_N(dcp_dcpRespF$FULL_N),
					.EMPTY_N(dcp_dcpRespF$EMPTY_N));

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(CLK_gmii_rx_clk),
	      .CLK_txClk(CLK_sys1_clk),
	      .CLK(wciS0_Clk),
	      .RST_N(wciS0_MReset_n),
	      .gmii_col_i(gmac$gmii_col_i),
	      .gmii_crs_i(gmac$gmii_crs_i),
	      .gmii_rx_rx_dv_i(gmac$gmii_rx_rx_dv_i),
	      .gmii_rx_rx_er_i(gmac$gmii_rx_rx_er_i),
	      .gmii_rx_rxd_i(gmac$gmii_rx_rxd_i),
	      .tx_put(gmac$tx_put),
	      .EN_rx_get(gmac$EN_rx_get),
	      .EN_tx_put(gmac$EN_tx_put),
	      .EN_rxOperate(gmac$EN_rxOperate),
	      .EN_txOperate(gmac$EN_txOperate),
	      .gmii_tx_txd(gmac$gmii_tx_txd),
	      .gmii_tx_tx_en(gmac$gmii_tx_tx_en),
	      .gmii_tx_tx_er(gmac$gmii_tx_tx_er),
	      .rx_get(gmac$rx_get),
	      .RDY_rx_get(gmac$RDY_rx_get),
	      .RDY_tx_put(gmac$RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(gmac$rxOverFlow),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(gmac$txUnderFlow),
	      .RDY_txUnderFlow(),
	      .CLK_gmii_tx_tx_clk(gmac$CLK_gmii_tx_tx_clk),
	      .CLK_GATE_gmii_tx_tx_clk(),
	      .CLK_rxclk(gmac$CLK_rxclk),
	      .CLK_GATE_rxclk());

  // submodule mdi_fRequest
  FIFO2 #(.width(32'd27),
	  .guarded(32'd1)) mdi_fRequest(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(mdi_fRequest$D_IN),
					.ENQ(mdi_fRequest$ENQ),
					.DEQ(mdi_fRequest$DEQ),
					.CLR(mdi_fRequest$CLR),
					.D_OUT(mdi_fRequest$D_OUT),
					.FULL_N(mdi_fRequest$FULL_N),
					.EMPTY_N(mdi_fRequest$EMPTY_N));

  // submodule mdi_fResponse
  FIFO2 #(.width(32'd17),
	  .guarded(32'd1)) mdi_fResponse(.RST_N(wciS0_MReset_n),
					 .CLK(wciS0_Clk),
					 .D_IN(mdi_fResponse$D_IN),
					 .ENQ(mdi_fResponse$ENQ),
					 .DEQ(mdi_fResponse$DEQ),
					 .CLR(mdi_fResponse$CLR),
					 .D_OUT(mdi_fResponse$D_OUT),
					 .FULL_N(mdi_fResponse$FULL_N),
					 .EMPTY_N(mdi_fResponse$EMPTY_N));

  // submodule mdi_rPlayIndex
  Counter #(.width(32'd8), .init(8'd0)) mdi_rPlayIndex(.CLK(wciS0_Clk),
						       .RST_N(wciS0_MReset_n),
						       .DATA_A(mdi_rPlayIndex$DATA_A),
						       .DATA_B(mdi_rPlayIndex$DATA_B),
						       .DATA_C(mdi_rPlayIndex$DATA_C),
						       .DATA_F(mdi_rPlayIndex$DATA_F),
						       .ADDA(mdi_rPlayIndex$ADDA),
						       .ADDB(mdi_rPlayIndex$ADDB),
						       .SETC(mdi_rPlayIndex$SETC),
						       .SETF(mdi_rPlayIndex$SETF),
						       .Q_OUT(mdi_rPlayIndex$Q_OUT));

  // submodule mdi_rPrescaler
  Counter #(.width(32'd4), .init(4'd6)) mdi_rPrescaler(.CLK(wciS0_Clk),
						       .RST_N(wciS0_MReset_n),
						       .DATA_A(mdi_rPrescaler$DATA_A),
						       .DATA_B(mdi_rPrescaler$DATA_B),
						       .DATA_C(mdi_rPrescaler$DATA_C),
						       .DATA_F(mdi_rPrescaler$DATA_F),
						       .ADDA(mdi_rPrescaler$ADDA),
						       .ADDB(mdi_rPrescaler$ADDB),
						       .SETC(mdi_rPrescaler$SETC),
						       .SETF(mdi_rPrescaler$SETF),
						       .Q_OUT(mdi_rPrescaler$Q_OUT));

  // submodule mdi_tMDC
  TriState #(.width(32'd1)) mdi_tMDC(.I(mdi_rMDC),
				     .OE(1'd1),
				     .O(),
				     .IO(mdio_mdc));

  // submodule mdi_tMDD
  TriState #(.width(32'd1)) mdi_tMDD(.I(mdi_rMDD),
				     .OE(mdi_rOutEn),
				     .O(mdi_tMDD$O),
				     .IO(mdio_mdd));

  // submodule phyRst
  MakeResetA #(.RSTDELAY(32'd1), .init(1'd0)) phyRst(.CLK(wciS0_Clk),
						     .RST_N(wciS0_MReset_n),
						     .DST_CLK(CLK_sys1_clk),
						     .ASSERT_IN(phyRst$ASSERT_IN),
						     .ASSERT_OUT(),
						     .OUT_RST_N(phyRst$OUT_RST_N));

  // submodule rxDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) rxDCPHdrF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(rxDCPHdrF$D_IN),
						      .ENQ(rxDCPHdrF$ENQ),
						      .DEQ(rxDCPHdrF$DEQ),
						      .CLR(rxDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(rxDCPHdrF$FULL_N),
						      .EMPTY_N(rxDCPHdrF$EMPTY_N));

  // submodule txDBGF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) txDBGF(.RST_N(wciS0_MReset_n),
						  .CLK(wciS0_Clk),
						  .D_IN(txDBGF$D_IN),
						  .ENQ(txDBGF$ENQ),
						  .DEQ(txDBGF$DEQ),
						  .CLR(txDBGF$CLR),
						  .D_OUT(),
						  .FULL_N(txDBGF$FULL_N),
						  .EMPTY_N());

  // submodule txDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) txDCPHdrF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(txDCPHdrF$D_IN),
						      .ENQ(txDCPHdrF$ENQ),
						      .DEQ(txDCPHdrF$DEQ),
						      .CLR(txDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_rx_dcp
  assign CAN_FIRE_RL_rx_dcp =
	     rxDCPHdrF$EMPTY_N &&
	     CASE_IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_ETC__q4 &&
	     wci_wslv_cState == 3'd2 ;
  assign WILL_FIRE_RL_rx_dcp = CAN_FIRE_RL_rx_dcp && !WILL_FIRE_RL_rx_data ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_reqF$EMPTY_N &&
	     (wci_wslv_reqF$D_OUT[39] ?
		mdi_fRequest$FULL_N :
		wci_wslv_reqF$D_OUT[39:32] != 8'h20 || txDBGF$FULL_N) &&
	     wci_wslv_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign WILL_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wci_wslv_reqF_i_notEmpty__4_AND_IF_wci_wslv_re_ETC___d924 &&
	     wci_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !MUX_splitReadInFlight$write_1__SEL_2 &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_rx_data
  assign WILL_FIRE_RL_rx_data =
	     gmac$RDY_rx_get &&
	     (rxHdr_sV[112] || rxHdr_sV[15:0] != 16'hF040 ||
	      rxDCPHdrF$FULL_N) &&
	     wci_wslv_cState == 3'd2 ;

  // rule RL_tx_dcp
  assign CAN_FIRE_RL_tx_dcp =
	     ((!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
		gmac$RDY_tx_put :
		dcpRespF_i_notEmpty__51_AND_IF_dcpRespF_first__ETC___d787) &&
	     wci_wslv_cState == 3'd2 ;
  assign WILL_FIRE_RL_tx_dcp = CAN_FIRE_RL_tx_dcp && !WILL_FIRE_RL_rx_data ;

  // rule RL_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;

  // rule RL_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;

  // rule RL_wci_wslv_respF_both
  assign WILL_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;

  // rule RL_mdi_run_frame
  assign WILL_FIRE_RL_mdi_run_frame =
	     (mdi_rPlayIndex$Q_OUT != 8'd0 || mdi_rWrite ||
	      mdi_fResponse$FULL_N) &&
	     mdi_rState &&
	     mdi_rPrescaler$Q_OUT == 4'd0 ;

  // rule RL_dcp_dcp_request
  assign WILL_FIRE_RL_dcp_dcp_request =
	     dcp_dcpReqF$EMPTY_N &&
	     IF_dcp_dcpReqF_first__43_BITS_77_TO_76_44_EQ_0_ETC___d454 ;

  // rule RL_dcp_cp_response
  assign CAN_FIRE_RL_dcp_cp_response =
	     dcp_dcpRespF$FULL_N && dcp_cpRespF$EMPTY_N ;

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_reqFifo$FULL_N && wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_dcp_dcpRespF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dcp_dcp_request &&
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0 ||
	      dcp_dcpReqF$D_OUT[77:76] == 2'd1) ;
  assign MUX_dcp_dcpRespF$enq_1__SEL_2 =
	     CAN_FIRE_RL_dcp_cp_response && !WILL_FIRE_RL_dcp_dcp_request ;
  assign MUX_mdi_fRequest$enq_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39] ;
  assign MUX_mdi_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ;
  assign MUX_mdi_rState$write_1__SEL_2 = mdi_fRequest$EMPTY_N && !mdi_rState ;
  assign MUX_rxDCPMesgPos$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d621 ;
  assign MUX_rxDCPPLI$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d621 &&
	     rxDCPMesgPos == 5'd1 ;
  assign MUX_rxHdr_mCnt$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     gmac_rx_get_09_BITS_9_TO_8_10_EQ_0_11_OR_gmac__ETC___d603 ;
  assign MUX_rxHdr_pos$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ;
  assign MUX_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[39] ;
  assign MUX_splitReadInFlight$write_1__SEL_2 =
	     wci_wslv_respF_c_r != 2'd2 && mdi_fResponse$EMPTY_N &&
	     !wci_wslv_wci_cfwr_pw$whas &&
	     splitReadInFlight &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[39] ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     wsiS_reqFifo$EMPTY_N && wci_wslv_cState == 3'd2 ;
  assign MUX_dcp_dcpRespF$enq_1__VAL_1 =
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0) ?
	       { 34'd1073741825, dcp_dcpReqF$D_OUT[39:32], 2'd0 } :
	       { 34'h1AAAAAAAA, dcp_dcpReqF$D_OUT[71:64], 2'd0 } ;
  assign MUX_dcp_dcpRespF$enq_1__VAL_2 =
	     { 2'd2,
	       dcp_cpRespF$D_OUT[31:0],
	       dcp_cpRespF$D_OUT[39:32],
	       2'd0 } ;
  assign MUX_mdi_fRequest$enq_1__VAL_1 =
	     { 1'd1,
	       gbeControl[4:0],
	       wci_wslv_reqF$D_OUT[38:34],
	       wci_wslv_reqF$D_OUT[15:0] } ;
  assign MUX_mdi_fRequest$enq_1__VAL_2 =
	     { 1'd0, gbeControl[4:0], wci_wslv_reqF$D_OUT[38:18] } ;
  assign MUX_rxDCPMesgPos$write_1__VAL_1 = rxDCPMesgPos + 5'd1 ;
  assign MUX_rxHdr_mCnt$write_1__VAL_1 = rxHdr_mCnt + 4'd1 ;
  assign MUX_rxHdr_pos$write_1__VAL_1 =
	     (rxHdr_pos < 4'd14) ? rxHdr_pos + 4'd1 : 4'd14 ;
  assign MUX_rxHdr_sV$write_1__VAL_1 =
	     { rxHdr_pos != 4'd13, rxHdr_sV[103:0], gmac$rx_get[7:0] } ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_1 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       wci_wslv_respF_q_1 ;
  always@(MUX_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  MUX_splitReadInFlight$write_1__SEL_2 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      MUX_splitReadInFlight$write_1__SEL_2:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 = { 2'd1, rdat__h82039 } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     { 18'd65536, mdi_fResponse$D_OUT[15:0] } ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[39] ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     MUX_splitReadInFlight$write_1__SEL_2 ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wti_wtiReq$wget = 67'h0 ;
  assign wti_wtiReq$whas = 1'b0 ;
  assign wti_operateD_1$wget = 1'b0 ;
  assign wti_operateD_1$whas = 1'b0 ;
  assign wsiM_reqFifo_x_wire$wget = 61'h0 ;
  assign wsiM_reqFifo_x_wire$whas = 1'b0 ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas =
	     wci_wslv_cState == 3'd2 && phyResetWaitCnt == 22'd0 ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas = wsiM0_SReset_n ;
  assign wsiS_wsiReq$wget =
	     { wsiS0_MCmd,
	       wsiS0_MReqLast,
	       wsiS0_MBurstPrecise,
	       wsiS0_MBurstLength,
	       wsiS0_MData,
	       wsiS0_MByteEn,
	       wsiS0_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = wsiM_operateD_1$whas ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsiS0_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign wsi_Es_mCmd_w$wget = wsiS0_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = wsiS0_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsiS0_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = wsiS0_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsiS0_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wci_wslv_reqF_r_enq$whas = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[39] ||
	     MUX_splitReadInFlight$write_1__SEL_2 ||
	     WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wsiM_reqFifo_enqueueing$whas = 1'b0 ;
  assign wsiM_reqFifo_dequeueing$whas = WILL_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas = wsiM0_SThreadBusy ;
  assign wsiS_reqFifo_r_enq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo_doResetDeq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign mdi_pwTick$whas = mdi_rPrescaler$Q_OUT == 4'd0 ;
  assign wsi_Es_mReqLast_w$whas = wsiS0_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsiS0_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;

  // register gbeControl
  assign gbeControl$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign gbeControl$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;

  // register macAddress
  assign macAddress$D_IN = 48'h0 ;
  assign macAddress$EN = 1'b0 ;

  // register mdi_rMDC
  assign mdi_rMDC$D_IN =
	     _1448743543117976458853375091858__q10[mdi_rPlayIndex$Q_OUT[6:0]] ;
  assign mdi_rMDC$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rMDD
  assign mdi_rMDD$D_IN = bs__h12594[mdi_rPlayIndex$Q_OUT[6:0]] ;
  assign mdi_rMDD$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rOutEn
  assign mdi_rOutEn$D_IN = bs__h25057[mdi_rPlayIndex$Q_OUT[6:0]] ;
  assign mdi_rOutEn$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rPhyAddr
  assign mdi_rPhyAddr$D_IN = mdi_fRequest$D_OUT[25:21] ;
  assign mdi_rPhyAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rRegAddr
  assign mdi_rRegAddr$D_IN = mdi_fRequest$D_OUT[20:16] ;
  assign mdi_rRegAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rState
  assign mdi_rState$D_IN = !MUX_mdi_rState$write_1__SEL_1 ;
  assign mdi_rState$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ||
	     mdi_fRequest$EMPTY_N && !mdi_rState ;

  // register mdi_rWrite
  assign mdi_rWrite$D_IN = mdi_fRequest$D_OUT[26] ;
  assign mdi_rWrite$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rWriteData
  assign mdi_rWriteData$D_IN = mdi_fRequest$D_OUT[15:0] ;
  assign mdi_rWriteData$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_vrReadData
  assign mdi_vrReadData$D_IN = mdi_tMDD$O ;
  assign mdi_vrReadData$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_1
  assign mdi_vrReadData_1$D_IN = mdi_vrReadData ;
  assign mdi_vrReadData_1$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_10
  assign mdi_vrReadData_10$D_IN = mdi_vrReadData_9 ;
  assign mdi_vrReadData_10$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_11
  assign mdi_vrReadData_11$D_IN = mdi_vrReadData_10 ;
  assign mdi_vrReadData_11$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_12
  assign mdi_vrReadData_12$D_IN = mdi_vrReadData_11 ;
  assign mdi_vrReadData_12$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_13
  assign mdi_vrReadData_13$D_IN = mdi_vrReadData_12 ;
  assign mdi_vrReadData_13$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_14
  assign mdi_vrReadData_14$D_IN = mdi_vrReadData_13 ;
  assign mdi_vrReadData_14$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_15
  assign mdi_vrReadData_15$D_IN = mdi_vrReadData_14 ;
  assign mdi_vrReadData_15$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_2
  assign mdi_vrReadData_2$D_IN = mdi_vrReadData_1 ;
  assign mdi_vrReadData_2$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_3
  assign mdi_vrReadData_3$D_IN = mdi_vrReadData_2 ;
  assign mdi_vrReadData_3$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_4
  assign mdi_vrReadData_4$D_IN = mdi_vrReadData_3 ;
  assign mdi_vrReadData_4$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_5
  assign mdi_vrReadData_5$D_IN = mdi_vrReadData_4 ;
  assign mdi_vrReadData_5$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_6
  assign mdi_vrReadData_6$D_IN = mdi_vrReadData_5 ;
  assign mdi_vrReadData_6$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_7
  assign mdi_vrReadData_7$D_IN = mdi_vrReadData_6 ;
  assign mdi_vrReadData_7$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_8
  assign mdi_vrReadData_8$D_IN = mdi_vrReadData_7 ;
  assign mdi_vrReadData_8$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_9
  assign mdi_vrReadData_9$D_IN = mdi_vrReadData_8 ;
  assign mdi_vrReadData_9$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register phyResetWaitCnt
  assign phyResetWaitCnt$D_IN =
	     gbeControl[31] ? 22'd1250000 : phyResetWaitCnt - 22'd1 ;
  assign phyResetWaitCnt$EN =
	     gbeControl[31] || (phyResetWaitCnt ^ 22'h200000) > 22'd2097152 ;

  // register rxAbortEOPC
  assign rxAbortEOPC$D_IN = rxAbortEOPC + 32'd1 ;
  assign rxAbortEOPC$EN =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     gmac$rx_get[9:8] != 2'd1 &&
	     gmac$rx_get[9:8] != 2'd2 ;

  // register rxCount
  assign rxCount$D_IN = rxCount + 32'd1 ;
  assign rxCount$EN = WILL_FIRE_RL_rx_data ;

  // register rxDCPCnt
  assign rxDCPCnt$D_IN = 32'h0 ;
  assign rxDCPCnt$EN = 1'b0 ;

  // register rxDCPMesg
  assign rxDCPMesg$D_IN = { rxDCPMesg[103:0], gmac$rx_get[7:0] } ;
  assign rxDCPMesg$EN = MUX_rxDCPMesgPos$write_1__SEL_1 ;

  // register rxDCPMesgPos
  assign rxDCPMesgPos$D_IN =
	     MUX_rxDCPMesgPos$write_1__SEL_1 ?
	       MUX_rxDCPMesgPos$write_1__VAL_1 :
	       5'd0 ;
  assign rxDCPMesgPos$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d621 ||
	     WILL_FIRE_RL_rx_dcp ;

  // register rxDCPPLI
  assign rxDCPPLI$D_IN =
	     MUX_rxDCPPLI$write_1__SEL_1 ? gmac$rx_get[7:0] : 8'd255 ;
  assign rxDCPPLI$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d621 &&
	     rxDCPMesgPos == 5'd1 ||
	     WILL_FIRE_RL_rx_dcp ;

  // register rxEmptyEOPC
  assign rxEmptyEOPC$D_IN = rxEmptyEOPC + 32'd1 ;
  assign rxEmptyEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd2 ;

  // register rxHdrMatchCnt
  assign rxHdrMatchCnt$D_IN =
	     (rxHdr_mCnt == 4'd14) ? rxHdrMatchCnt + 32'd1 : rxHdrMatchCnt ;
  assign rxHdrMatchCnt$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 ;

  // register rxHdr_mCnt
  assign rxHdr_mCnt$D_IN =
	     MUX_rxHdr_mCnt$write_1__SEL_1 ?
	       MUX_rxHdr_mCnt$write_1__VAL_1 :
	       4'd0 ;
  assign rxHdr_mCnt$EN =
	     WILL_FIRE_RL_rx_data &&
	     gmac_rx_get_09_BITS_9_TO_8_10_EQ_0_11_OR_gmac__ETC___d603 ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ;

  // register rxHdr_pV
  assign rxHdr_pV$D_IN = { 1'd0, rxHdr_sV[103:0], gmac$rx_get[7:0] } ;
  assign rxHdr_pV$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] &&
	     rxHdr_pos == 4'd13 ;

  // register rxHdr_pos
  assign rxHdr_pos$D_IN =
	     MUX_rxHdr_pos$write_1__SEL_1 ?
	       MUX_rxHdr_pos$write_1__VAL_1 :
	       4'd0 ;
  assign rxHdr_pos$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ;

  // register rxHdr_sV
  assign rxHdr_sV$D_IN =
	     MUX_rxHdr_pos$write_1__SEL_1 ?
	       MUX_rxHdr_sV$write_1__VAL_1 :
	       113'h10000000000000000000000000000 ;
  assign rxHdr_sV$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ;

  // register rxHeadCap
  assign rxHeadCap$D_IN = { rxHeadCap[119:0], gmac$rx_get[7:0] } ;
  assign rxHeadCap$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxLenCount < 32'd16 ;

  // register rxLenCount
  assign rxLenCount$D_IN = (gmac$rx_get[9:8] == 2'd0) ? x__h72086 : 32'd0 ;
  assign rxLenCount$EN = WILL_FIRE_RL_rx_data ;

  // register rxLenLast
  assign rxLenLast$D_IN = x__h72086 ;
  assign rxLenLast$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 ;

  // register rxOvfCount
  assign rxOvfCount$D_IN = rxOvfCount + 32'd1 ;
  assign rxOvfCount$EN = gmac$rxOverFlow ;

  // register rxPipe
  assign rxPipe$D_IN = { rxPipe[23:0], gmac$rx_get[7:0] } ;
  assign rxPipe$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) ;

  // register rxPos
  assign rxPos$D_IN = (gmac$rx_get[9:8] == 2'd0) ? rxPos + 2'd1 : 2'd0 ;
  assign rxPos$EN = WILL_FIRE_RL_rx_data ;

  // register rxValidEOPC
  assign rxValidEOPC$D_IN = rxValidEOPC + 32'd1 ;
  assign rxValidEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd1 ;

  // register rxValidNoEOPC
  assign rxValidNoEOPC$D_IN = rxValidNoEOPC + 32'd1 ;
  assign rxValidNoEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd0 ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splitReadInFlight$EN =
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[39] ||
	     MUX_splitReadInFlight$write_1__SEL_2 ;

  // register txCount
  assign txCount$D_IN = 32'h0 ;
  assign txCount$EN = 1'b0 ;

  // register txDBGCnt
  assign txDBGCnt$D_IN = 32'h0 ;
  assign txDBGCnt$EN = 1'b0 ;

  // register txDBGPos
  assign txDBGPos$D_IN = 5'h0 ;
  assign txDBGPos$EN = 1'b0 ;

  // register txDCPCnt
  assign txDCPCnt$D_IN = 32'h0 ;
  assign txDCPCnt$EN = 1'b0 ;

  // register txDCPPos
  assign txDCPPos$D_IN =
	     (!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
	       ((txDCPPos == 5'd13) ? 5'd0 : txDCPPos_55_PLUS_1___d1163) :
	       CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 ;
  assign txDCPPos$EN = WILL_FIRE_RL_tx_dcp ;

  // register txUndCount
  assign txUndCount$D_IN = txUndCount + 32'd1 ;
  assign txUndCount$EN = gmac$txUnderFlow ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_1 ;
  assign wci_wslv_illegalEdge$EN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_wci_wslv_respF_q_0$write_1__SEL_2:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_wci_wslv_respF_q_1$write_1__SEL_2:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_isReset_isInReset
  assign wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiM_isReset_isInReset$EN = wsiM_isReset_isInReset ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = wsiM_operateD_1$whas ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsiM0_SReset_n ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN = MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN = WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // register wsiM_reqFifo_q_0
  assign wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1 ;
  assign wsiM_reqFifo_q_0$EN = WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // register wsiM_reqFifo_q_1
  assign wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00 ;
  assign wsiM_reqFifo_q_1$EN = WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsiM0_SThreadBusy ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset_isInReset,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'b0 ;
  assign wsiS_errorSticky$EN = 1'b0 ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_isReset_isInReset
  assign wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiS_isReset_isInReset$EN = wsiS_isReset_isInReset ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = wsiM_operateD_1$whas ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS0_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq !=
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     wsiS_reqFifo$EMPTY_N && wci_wslv_cState == 3'd2 ||
	     WILL_FIRE_RL_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset_isInReset,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = WILL_FIRE_RL_wsiS_reqFifo_enq ;

  // register wti_isReset_isInReset
  assign wti_isReset_isInReset$D_IN = 1'd0 ;
  assign wti_isReset_isInReset$EN = wti_isReset_isInReset ;

  // register wti_nowReq
  assign wti_nowReq$D_IN = wtiS0_req ;
  assign wti_nowReq$EN = 1'd1 ;

  // register wti_operateD
  assign wti_operateD$D_IN = 1'b1 ;
  assign wti_operateD$EN = 1'd1 ;

  // submodule dcpRespF
  assign dcpRespF$D_IN =
	     { CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5,
	       dcp_dcpRespF$D_OUT[41:0] } ;
  assign dcpRespF$ENQ =
	     dcp_dcpRespF$EMPTY_N && dcpRespF$FULL_N &&
	     wci_wslv_cState == 3'd2 ;
  assign dcpRespF$DEQ =
	     WILL_FIRE_RL_tx_dcp &&
	     rxHdr_sV_97_BIT_112_98_OR_NOT_rxHdr_sV_97_BITS_ETC___d894 ;
  assign dcpRespF$CLR = 1'b0 ;

  // submodule dcp_cpReqF
  assign dcp_cpReqF$D_IN =
	     { dcp_dcpReqF$D_OUT[77:76] != 2'd1,
	       (dcp_dcpReqF$D_OUT[77:76] == 2'd1) ?
		 { dcp_dcpReqF$D_OUT[23:2],
		   dcp_dcpReqF$D_OUT[75:72],
		   dcp_dcpReqF$D_OUT[63:32] } :
		 { 24'hAAAAAA,
		   dcp_dcpReqF$D_OUT[39:32],
		   dcp_dcpReqF$D_OUT[23:2],
		   dcp_dcpReqF$D_OUT[43:40] } } ;
  assign dcp_cpReqF$ENQ =
	     WILL_FIRE_RL_dcp_dcp_request &&
	     dcp_dcpReqF$D_OUT[77:76] != 2'd0 ;
  assign dcp_cpReqF$DEQ = EN_cpClient_request_get ;
  assign dcp_cpReqF$CLR = 1'b0 ;

  // submodule dcp_cpRespF
  assign dcp_cpRespF$D_IN = cpClient_response_put ;
  assign dcp_cpRespF$ENQ = EN_cpClient_response_put ;
  assign dcp_cpRespF$DEQ = MUX_dcp_dcpRespF$enq_1__SEL_2 ;
  assign dcp_cpRespF$CLR = 1'b0 ;

  // submodule dcp_dcpReqF
  always@(IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 or
	  tag__h72295 or rxDCPMesg)
  begin
    case (IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[7:4])
      4'd0:
	  dcp_dcpReqF$D_IN = { 38'h0AAAAAAAAA, tag__h72295, rxDCPMesg[31:0] };
      4'd1:
	  dcp_dcpReqF$D_IN =
	      { 2'd1,
		IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[3:0],
		tag__h72295,
		rxDCPMesg[31:0],
		rxDCPMesg[63:32] };
      default: dcp_dcpReqF$D_IN =
		   { 34'h2AAAAAAAA,
		     IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[3:0],
		     tag__h72295,
		     rxDCPMesg[31:0] };
    endcase
  end
  assign dcp_dcpReqF$ENQ =
	     WILL_FIRE_RL_rx_dcp &&
	     (IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[7:4] ==
	      4'd0 ||
	      IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[7:4] ==
	      4'd1 ||
	      IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[7:4] ==
	      4'd2) ;
  assign dcp_dcpReqF$DEQ = WILL_FIRE_RL_dcp_dcp_request ;
  assign dcp_dcpReqF$CLR = 1'b0 ;

  // submodule dcp_dcpRespF
  assign dcp_dcpRespF$D_IN =
	     MUX_dcp_dcpRespF$enq_1__SEL_1 ?
	       MUX_dcp_dcpRespF$enq_1__VAL_1 :
	       MUX_dcp_dcpRespF$enq_1__VAL_2 ;
  assign dcp_dcpRespF$ENQ =
	     WILL_FIRE_RL_dcp_dcp_request &&
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0 ||
	      dcp_dcpReqF$D_OUT[77:76] == 2'd1) ||
	     CAN_FIRE_RL_dcp_cp_response && !WILL_FIRE_RL_dcp_dcp_request ;
  assign dcp_dcpRespF$DEQ =
	     dcp_dcpRespF$EMPTY_N && dcpRespF$FULL_N &&
	     wci_wslv_cState == 3'd2 ;
  assign dcp_dcpRespF$CLR = 1'b0 ;

  // submodule gmac
  assign gmac$gmii_col_i = gmii_col_i ;
  assign gmac$gmii_crs_i = gmii_crs_i ;
  assign gmac$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac$tx_put =
	     (!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
	       { 2'd0,
		 CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 } :
	       CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 ;
  assign gmac$EN_rx_get = WILL_FIRE_RL_rx_data ;
  assign gmac$EN_tx_put =
	     WILL_FIRE_RL_tx_dcp &&
	     NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d811 ;
  assign gmac$EN_rxOperate =
	     wci_wslv_cState == 3'd2 && phyResetWaitCnt == 22'd0 ;
  assign gmac$EN_txOperate =
	     wci_wslv_cState == 3'd2 && phyResetWaitCnt == 22'd0 ;

  // submodule mdi_fRequest
  assign mdi_fRequest$D_IN =
	     MUX_mdi_fRequest$enq_1__SEL_1 ?
	       MUX_mdi_fRequest$enq_1__VAL_1 :
	       MUX_mdi_fRequest$enq_1__VAL_2 ;
  assign mdi_fRequest$ENQ =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39] ||
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[39] ;
  assign mdi_fRequest$DEQ = MUX_mdi_rState$write_1__SEL_2 ;
  assign mdi_fRequest$CLR = 1'b0 ;

  // submodule mdi_fResponse
  assign mdi_fResponse$D_IN = { 1'd1, x_data__h28255 } ;
  assign mdi_fResponse$ENQ =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 &&
	     !mdi_rWrite ;
  assign mdi_fResponse$DEQ = MUX_splitReadInFlight$write_1__SEL_2 ;
  assign mdi_fResponse$CLR = 1'b0 ;

  // submodule mdi_rPlayIndex
  assign mdi_rPlayIndex$DATA_A = 8'h0 ;
  assign mdi_rPlayIndex$DATA_B = 8'd255 ;
  assign mdi_rPlayIndex$DATA_C = 8'h0 ;
  assign mdi_rPlayIndex$DATA_F = 8'd101 ;
  assign mdi_rPlayIndex$ADDA = 1'b0 ;
  assign mdi_rPlayIndex$ADDB = WILL_FIRE_RL_mdi_run_frame ;
  assign mdi_rPlayIndex$SETC = 1'b0 ;
  assign mdi_rPlayIndex$SETF = MUX_mdi_rState$write_1__SEL_2 ;

  // submodule mdi_rPrescaler
  assign mdi_rPrescaler$DATA_A = 4'h0 ;
  assign mdi_rPrescaler$DATA_B = 4'd15 ;
  assign mdi_rPrescaler$DATA_C = 4'h0 ;
  assign mdi_rPrescaler$DATA_F = 4'd6 ;
  assign mdi_rPrescaler$ADDA = 1'b0 ;
  assign mdi_rPrescaler$ADDB = mdi_rPrescaler$Q_OUT != 4'd0 ;
  assign mdi_rPrescaler$SETC = 1'b0 ;
  assign mdi_rPrescaler$SETF = mdi_rPrescaler$Q_OUT == 4'd0 ;

  // submodule phyRst
  assign phyRst$ASSERT_IN = gbeControl[31] ;

  // submodule rxDCPHdrF
  assign rxDCPHdrF$D_IN = rxHdr_sV[111:0] ;
  assign rxDCPHdrF$ENQ =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 ;
  assign rxDCPHdrF$DEQ = WILL_FIRE_RL_rx_dcp ;
  assign rxDCPHdrF$CLR = 1'b0 ;

  // submodule txDBGF
  assign txDBGF$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign txDBGF$ENQ =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h20 ;
  assign txDBGF$DEQ = 1'b0 ;
  assign txDBGF$CLR = 1'b0 ;

  // submodule txDCPHdrF
  assign txDCPHdrF$D_IN = 112'h0 ;
  assign txDCPHdrF$ENQ = 1'b0 ;
  assign txDCPHdrF$DEQ = 1'b0 ;
  assign txDCPHdrF$CLR = 1'b0 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = WILL_FIRE_RL_wsiS_reqFifo_enq ;
  assign wsiS_reqFifo$DEQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_dcp_dcpReqF_first__43_BITS_77_TO_76_44_EQ_0_ETC___d454 =
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0) ?
	       dcp_dcpRespF$FULL_N :
	       (dcp_dcpReqF$D_OUT[77:76] == 2'd1 || dcp_cpReqF$FULL_N) &&
	       (dcp_dcpReqF$D_OUT[77:76] != 2'd1 ||
		dcp_dcpRespF$FULL_N && dcp_cpReqF$FULL_N) ;
  assign IF_rxHdr_pos_15_EQ_0_31_THEN_rxHdr_sV_97_BITS__ETC___d600 =
	     CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 ==
	     CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 ;
  assign IF_txDCPPos_55_EQ_9_73_THEN_0_ELSE_txDCPPos_55_ETC___d1234 =
	     (txDCPPos == 5'd9) ? 5'd0 : txDCPPos_55_PLUS_1___d1163 ;
  assign NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d621 =
	     !rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040 &&
	     { 3'd0, rxDCPMesgPos } < rxDCPPLI ;
  assign NOT_rxHdr_sV_97_BIT_112_98_15_AND_rxHdr_sV_97__ETC___d811 =
	     !rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040 ||
	     dcpRespF$D_OUT[43:42] == 2'd0 &&
	     (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	      txDCPPos == 5'd3 ||
	      txDCPPos == 5'd4 ||
	      txDCPPos == 5'd5 ||
	      txDCPPos == 5'd6 ||
	      txDCPPos == 5'd7 ||
	      txDCPPos == 5'd8 ||
	      txDCPPos == 5'd9) ||
	     dcpRespF$D_OUT[43:42] != 2'd0 &&
	     (dcpRespF$D_OUT[43:42] == 2'd1 &&
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4 ||
	       txDCPPos == 5'd5) ||
	      dcpRespF$D_OUT[43:42] != 2'd1 &&
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4 ||
	       txDCPPos == 5'd5 ||
	       txDCPPos == 5'd6 ||
	       txDCPPos == 5'd7 ||
	       txDCPPos == 5'd8 ||
	       txDCPPos == 5'd9)) ;
  assign _1448743543117976458853375091858__q10 =
	     102'h12492492492492492492492492 ;
  assign _643371375338640__q12 = 102'h00000000000002492492492490 ;
  assign bs__h12594 =
	     { mdi_rWrite ? 15'd29127 : 15'd29176,
	       pa4__h12193,
	       pa3__h12194,
	       pa2__h12195,
	       pa1__h12196,
	       pa0__h12197,
	       ra4__h12199,
	       ra3__h12200,
	       ra2__h12201,
	       ra1__h12202,
	       ra0__h12203,
	       6'd56,
	       d15__h12205,
	       d14__h12206,
	       d13__h12207,
	       d12__h12208,
	       d11__h12209,
	       d10__h12210,
	       d9__h12211,
	       d8__h12212,
	       d7__h12213,
	       d6__h12214,
	       d5__h12215,
	       d4__h12216,
	       d3__h12217,
	       d2__h12218,
	       d1__h12219,
	       d0__h12220,
	       3'b111 } ;
  assign bs__h25057 =
	     mdi_rWrite ?
	       102'h3FFFFFFFFFFFFFFFFFFFFFFFFF :
	       102'h3FFFFFFFFFFE00000000000000 ;
  assign d0__h12220 = {3{mdi_rWriteData[0]}} ;
  assign d10__h12210 = {3{mdi_rWriteData[10]}} ;
  assign d11__h12209 = {3{mdi_rWriteData[11]}} ;
  assign d12__h12208 = {3{mdi_rWriteData[12]}} ;
  assign d13__h12207 = {3{mdi_rWriteData[13]}} ;
  assign d14__h12206 = {3{mdi_rWriteData[14]}} ;
  assign d15__h12205 = {3{mdi_rWriteData[15]}} ;
  assign d1__h12219 = {3{mdi_rWriteData[1]}} ;
  assign d2__h12218 = {3{mdi_rWriteData[2]}} ;
  assign d3__h12217 = {3{mdi_rWriteData[3]}} ;
  assign d4__h12216 = {3{mdi_rWriteData[4]}} ;
  assign d5__h12215 = {3{mdi_rWriteData[5]}} ;
  assign d6__h12214 = {3{mdi_rWriteData[6]}} ;
  assign d7__h12213 = {3{mdi_rWriteData[7]}} ;
  assign d8__h12212 = {3{mdi_rWriteData[8]}} ;
  assign d9__h12211 = {3{mdi_rWriteData[9]}} ;
  assign dcpRespF_i_notEmpty__51_AND_IF_dcpRespF_first__ETC___d787 =
	     dcpRespF$EMPTY_N &&
	     CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 ;
  assign gmac_rx_get_09_BITS_9_TO_8_10_EQ_0_11_OR_gmac__ETC___d603 =
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] &&
	     !rxHdr_pV[112] &&
	     IF_rxHdr_pos_15_EQ_0_31_THEN_rxHdr_sV_97_BITS__ETC___d600 ;
  assign pa0__h12197 = {3{mdi_rPhyAddr[0]}} ;
  assign pa1__h12196 = {3{mdi_rPhyAddr[1]}} ;
  assign pa2__h12195 = {3{mdi_rPhyAddr[2]}} ;
  assign pa3__h12194 = {3{mdi_rPhyAddr[3]}} ;
  assign pa4__h12193 = {3{mdi_rPhyAddr[4]}} ;
  assign ra0__h12203 = {3{mdi_rRegAddr[0]}} ;
  assign ra1__h12202 = {3{mdi_rRegAddr[1]}} ;
  assign ra2__h12201 = {3{mdi_rRegAddr[2]}} ;
  assign ra3__h12200 = {3{mdi_rRegAddr[3]}} ;
  assign ra4__h12199 = {3{mdi_rRegAddr[4]}} ;
  assign rdat___1__h100264 = hasDebugLogic ? rxHeadCap[31:0] : 32'd0 ;
  assign rdat___1__h82274 = hasDebugLogic ? { 16'd0, x__h82278 } : 32'd0 ;
  assign rdat___1__h82325 =
	     hasDebugLogic ? wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat___1__h82366 =
	     hasDebugLogic ? wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat___1__h82401 =
	     hasDebugLogic ? wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat___1__h82434 =
	     hasDebugLogic ? wsiM_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat___1__h82475 =
	     hasDebugLogic ? wsiM_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat___1__h82510 = hasDebugLogic ? txDBGCnt : 32'd0 ;
  assign rdat___1__h82544 = hasDebugLogic ? rxCount : 32'd0 ;
  assign rdat___1__h82577 = hasDebugLogic ? txCount : 32'd0 ;
  assign rdat___1__h82611 = hasDebugLogic ? rxOvfCount : 32'd0 ;
  assign rdat___1__h82644 = hasDebugLogic ? txUndCount : 32'd0 ;
  assign rdat___1__h82677 = hasDebugLogic ? rxValidNoEOPC : 32'd0 ;
  assign rdat___1__h82710 = hasDebugLogic ? rxValidEOPC : 32'd0 ;
  assign rdat___1__h82743 = hasDebugLogic ? rxEmptyEOPC : 32'd0 ;
  assign rdat___1__h82776 = hasDebugLogic ? rxAbortEOPC : 32'd0 ;
  assign rdat___1__h82809 = hasDebugLogic ? rxDCPCnt : 32'd0 ;
  assign rdat___1__h82843 = hasDebugLogic ? rxHdrMatchCnt : 32'd0 ;
  assign rdat___1__h82876 = hasDebugLogic ? rxLenLast : 32'd0 ;
  assign rdat___1__h82910 = hasDebugLogic ? txDCPCnt : 32'd0 ;
  assign rdat___1__h82944 = hasDebugLogic ? { 28'd0, rxHdr_pos } : 32'd0 ;
  assign rdat___1__h82981 = hasDebugLogic ? { 28'd0, rxHdr_mCnt } : 32'd0 ;
  assign rdat___1__h83018 =
	     hasDebugLogic ? { 16'd0, rxHdr_sV[111:96] } : 32'd0 ;
  assign rdat___1__h85519 = hasDebugLogic ? rxHdr_sV[95:64] : 32'd0 ;
  assign rdat___1__h88017 =
	     hasDebugLogic ? { 16'd0, rxHdr_sV[63:48] } : 32'd0 ;
  assign rdat___1__h90518 = hasDebugLogic ? rxHdr_sV[47:16] : 32'd0 ;
  assign rdat___1__h93016 =
	     hasDebugLogic ? { 16'd0, rxHdr_sV[15:0] } : 32'd0 ;
  assign rdat___1__h95517 = hasDebugLogic ? rxHeadCap[127:96] : 32'd0 ;
  assign rdat___1__h97124 = hasDebugLogic ? rxHeadCap[95:64] : 32'd0 ;
  assign rdat___1__h98694 = hasDebugLogic ? rxHeadCap[63:32] : 32'd0 ;
  assign rdat__h82039 =
	     wci_wslv_reqF$D_OUT[39] ?
	       32'd0 :
	       IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 ;
  assign rxHdr_sV_97_BIT_112_98_OR_NOT_rxHdr_sV_97_BITS_ETC___d894 =
	     (rxHdr_sV[112] || rxHdr_sV[15:0] != 16'hF040) &&
	     (dcpRespF$D_OUT[43:42] == 2'd0 && txDCPPos == 5'd9 ||
	      dcpRespF$D_OUT[43:42] != 2'd0 &&
	      (dcpRespF$D_OUT[43:42] == 2'd1 && txDCPPos == 5'd5 ||
	       dcpRespF$D_OUT[43:42] != 2'd1 && txDCPPos == 5'd9)) ;
  assign status__h81840 = { 16'd0, x__h82120 } ;
  assign txDCPPos_55_PLUS_1___d1163 = txDCPPos + 5'd1 ;
  assign wci_wslv_reqF_i_notEmpty__4_AND_IF_wci_wslv_re_ETC___d924 =
	     wci_wslv_reqF$EMPTY_N &&
	     (wci_wslv_reqF$D_OUT[39] ?
		mdi_fRequest$FULL_N :
		wci_wslv_respF_c_r != 2'd2) ;
  assign x__h72086 = rxLenCount + 32'd1 ;
  assign x__h82120 = { wsiM_statusR, wsiS_statusR } ;
  assign x__h82278 = { wsiS_statusR, wsiM_statusR } ;
  assign x_data__h28255 =
	     { mdi_vrReadData_15,
	       mdi_vrReadData_14,
	       mdi_vrReadData_13,
	       mdi_vrReadData_12,
	       mdi_vrReadData_11,
	       mdi_vrReadData_10,
	       mdi_vrReadData_9,
	       mdi_vrReadData_8,
	       mdi_vrReadData_7,
	       mdi_vrReadData_6,
	       mdi_vrReadData_5,
	       mdi_vrReadData_4,
	       mdi_vrReadData_3,
	       mdi_vrReadData_2,
	       mdi_vrReadData_1,
	       mdi_vrReadData } ;
  always@(rxDCPMesgPos or rxDCPMesg)
  begin
    case (rxDCPMesgPos)
      5'd6: tag__h72295 = rxDCPMesg[7:0];
      5'd7: tag__h72295 = rxDCPMesg[15:8];
      5'd8: tag__h72295 = rxDCPMesg[23:16];
      5'd9: tag__h72295 = rxDCPMesg[31:24];
      5'd10: tag__h72295 = rxDCPMesg[39:32];
      5'd11: tag__h72295 = rxDCPMesg[47:40];
      5'd12: tag__h72295 = rxDCPMesg[55:48];
      5'd13: tag__h72295 = rxDCPMesg[63:56];
      5'd14: tag__h72295 = rxDCPMesg[71:64];
      5'd15: tag__h72295 = rxDCPMesg[79:72];
      5'd16: tag__h72295 = rxDCPMesg[87:80];
      5'd17: tag__h72295 = rxDCPMesg[95:88];
      5'd18: tag__h72295 = rxDCPMesg[103:96];
      default: tag__h72295 = rxDCPMesg[111:104];
    endcase
  end
  always@(rxHdr_pos or rxHdr_sV)
  begin
    case (rxHdr_pos)
      4'd0:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[7:0];
      4'd1:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[15:8];
      4'd2:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[23:16];
      4'd3:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[31:24];
      4'd4:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[39:32];
      4'd5:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[47:40];
      4'd6:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[55:48];
      4'd7:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[63:56];
      4'd8:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[71:64];
      4'd9:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[79:72];
      4'd10:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[87:80];
      4'd11:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[95:88];
      4'd12:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[103:96];
      default: CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
		   rxHdr_sV[111:104];
    endcase
  end
  always@(rxHdr_pos or rxHdr_pV)
  begin
    case (rxHdr_pos)
      4'd0:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[7:0];
      4'd1:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[15:8];
      4'd2:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[23:16];
      4'd3:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[31:24];
      4'd4:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[39:32];
      4'd5:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[47:40];
      4'd6:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[55:48];
      4'd7:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[63:56];
      4'd8:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[71:64];
      4'd9:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[79:72];
      4'd10:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[87:80];
      4'd11:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[95:88];
      4'd12:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[103:96];
      default: CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
		   rxHdr_pV[111:104];
    endcase
  end
  always@(txDCPPos or gmac$RDY_tx_put)
  begin
    case (txDCPPos)
      5'd0, 5'd1, 5'd2, 5'd3, 5'd4, 5'd5, 5'd6, 5'd7, 5'd8:
	  IF_txDCPPos_55_EQ_0_56_OR_txDCPPos_55_EQ_1_57__ETC___d1250 =
	      gmac$RDY_tx_put;
      default: IF_txDCPPos_55_EQ_0_56_OR_txDCPPos_55_EQ_1_57__ETC___d1250 =
		   txDCPPos != 5'd9 || gmac$RDY_tx_put;
    endcase
  end
  always@(dcpRespF$D_OUT or
	  IF_txDCPPos_55_EQ_0_56_OR_txDCPPos_55_EQ_1_57__ETC___d1250 or
	  txDCPPos or gmac$RDY_tx_put)
  begin
    case (dcpRespF$D_OUT[43:42])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 =
	      IF_txDCPPos_55_EQ_0_56_OR_txDCPPos_55_EQ_1_57__ETC___d1250;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 =
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4) ?
		gmac$RDY_tx_put :
		txDCPPos != 5'd5 || gmac$RDY_tx_put;
      default: CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 =
		   IF_txDCPPos_55_EQ_0_56_OR_txDCPPos_55_EQ_1_57__ETC___d1250;
    endcase
  end
  always@(rxDCPMesgPos or rxDCPMesg)
  begin
    case (rxDCPMesgPos)
      5'd5:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[7:0];
      5'd6:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[15:8];
      5'd7:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[23:16];
      5'd8:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[31:24];
      5'd9:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[39:32];
      5'd10:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[47:40];
      5'd11:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[55:48];
      5'd12:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[63:56];
      5'd13:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[71:64];
      5'd14:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[79:72];
      5'd15:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[87:80];
      5'd16:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[95:88];
      5'd17:
	  IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
	      rxDCPMesg[103:96];
      default: IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 =
		   rxDCPMesg[111:104];
    endcase
  end
  always@(IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117 or
	  dcp_dcpReqF$FULL_N)
  begin
    case (IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[7:4])
      4'd0, 4'd1:
	  CASE_IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_ETC__q4 =
	      dcp_dcpReqF$FULL_N;
      default: CASE_IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_ETC__q4 =
		   IF_rxDCPMesgPos_16_EQ_5_57_THEN_rxDCPMesg_23_B_ETC___d1117[7:4] !=
		   4'd2 ||
		   dcp_dcpReqF$FULL_N;
    endcase
  end
  always@(wci_wslv_reqF$D_OUT or
	  status__h81840 or
	  gbeControl or
	  rdat___1__h82274 or
	  rdat___1__h82325 or
	  rdat___1__h82366 or
	  rdat___1__h82401 or
	  rdat___1__h82434 or
	  rdat___1__h82475 or
	  rdat___1__h82510 or
	  rdat___1__h82544 or
	  rdat___1__h82577 or
	  rdat___1__h82611 or
	  rdat___1__h82644 or
	  rdat___1__h82677 or
	  rdat___1__h82710 or
	  rdat___1__h82743 or
	  rdat___1__h82776 or
	  rdat___1__h82809 or
	  rdat___1__h82843 or
	  rdat___1__h82876 or
	  rdat___1__h82910 or
	  rdat___1__h82944 or
	  rdat___1__h82981 or
	  rdat___1__h83018 or
	  rdat___1__h85519 or
	  rdat___1__h88017 or
	  rdat___1__h90518 or
	  rdat___1__h93016 or
	  rdat___1__h95517 or
	  rdat___1__h97124 or rdat___1__h98694 or rdat___1__h100264)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      status__h81840;
      8'h04:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      gbeControl;
      8'h08:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82274;
      8'h0C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82325;
      8'h10:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82366;
      8'h14:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82401;
      8'h18:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82434;
      8'h1C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82475;
      8'h20:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82510;
      8'h24:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82544;
      8'h28:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82577;
      8'h2C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82611;
      8'h30:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82644;
      8'h34:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82677;
      8'h38:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82710;
      8'h3C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82743;
      8'h40:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82776;
      8'h44:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82809;
      8'h48:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82843;
      8'h4C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82876;
      8'h50:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82910;
      8'h54:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82944;
      8'h58:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h82981;
      8'h5C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h83018;
      8'h60:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h85519;
      8'h64:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h88017;
      8'h68:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h90518;
      8'h6C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h93016;
      8'h70:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h95517;
      8'h74:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h97124;
      8'h78:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h98694;
      8'h7C:
	  IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
	      rdat___1__h100264;
      default: IF_wci_wslv_reqF_first__5_BITS_39_TO_32_99_EQ__ETC___d1052 =
		   32'd0;
    endcase
  end
  always@(dcp_dcpRespF$D_OUT)
  begin
    case (dcp_dcpRespF$D_OUT[43:42])
      2'd0, 2'd1:
	  CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5 =
	      dcp_dcpRespF$D_OUT[43:42];
      default: CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5 = 2'd2;
    endcase
  end
  always@(txDCPPos or rxHdr_sV or macAddress)
  begin
    case (5'd13 - txDCPPos)
      5'd0:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[7:0];
      5'd1:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[15:8];
      5'd2:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[7:0];
      5'd3:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[15:8];
      5'd4:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[23:16];
      5'd5:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[31:24];
      5'd6:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[39:32];
      5'd7:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[47:40];
      5'd8:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[23:16];
      5'd9:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[31:24];
      5'd10:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[39:32];
      5'd11:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[47:40];
      5'd12:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[55:48];
      default: CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
		   rxHdr_sV[63:56];
    endcase
  end
  always@(txDCPPos or dcpRespF$D_OUT)
  begin
    case (txDCPPos)
      5'd5:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[9:2] };
      5'd6:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[41:34] };
      5'd7:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[33:26] };
      5'd8:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[25:18] };
      default: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
		   { 2'd1, dcpRespF$D_OUT[17:10] };
    endcase
  end
  always@(txDCPPos or dcpRespF$D_OUT)
  begin
    case (txDCPPos)
      5'd0, 5'd2, 5'd3:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 = 10'd0;
      5'd1: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 = 10'd10;
      5'd4: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 = 10'd49;
      5'd5:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[9:2] };
      5'd6:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[41:34] };
      5'd7:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[33:26] };
      5'd8:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[25:18] };
      default: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
		   { 2'd1, dcpRespF$D_OUT[17:10] };
    endcase
  end
  always@(dcpRespF$D_OUT or
	  txDCPPos or
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 or
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8)
  begin
    case (dcpRespF$D_OUT[43:42])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 =
	      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 =
	      (txDCPPos == 5'd0) ?
		10'd0 :
		((txDCPPos == 5'd1) ?
		   10'd6 :
		   ((txDCPPos == 5'd2 || txDCPPos == 5'd3) ?
		      10'd0 :
		      ((txDCPPos == 5'd4) ?
			 10'd50 :
			 { 2'd1, dcpRespF$D_OUT[9:2] })));
      default: CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 =
		   (txDCPPos == 5'd0) ?
		     10'd0 :
		     ((txDCPPos == 5'd1) ?
			10'd10 :
			((txDCPPos == 5'd2 || txDCPPos == 5'd3) ?
			   10'd0 :
			   ((txDCPPos == 5'd4) ?
			      10'd51 :
			      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7)));
    endcase
  end
  always@(dcpRespF$D_OUT or
	  IF_txDCPPos_55_EQ_9_73_THEN_0_ELSE_txDCPPos_55_ETC___d1234 or
	  txDCPPos or txDCPPos_55_PLUS_1___d1163)
  begin
    case (dcpRespF$D_OUT[43:42])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 =
	      IF_txDCPPos_55_EQ_9_73_THEN_0_ELSE_txDCPPos_55_ETC___d1234;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 =
	      (txDCPPos == 5'd5) ? 5'd0 : txDCPPos_55_PLUS_1___d1163;
      default: CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 =
		   IF_txDCPPos_55_EQ_9_73_THEN_0_ELSE_txDCPPos_55_ETC___d1234;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        gbeControl <= `BSV_ASSIGNMENT_DELAY 32'h00000107;
	macAddress <= `BSV_ASSIGNMENT_DELAY 48'h000A35420100;
	mdi_rMDC <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rMDD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY 22'd1250000;
	rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rxDCPPLI <= `BSV_ASSIGNMENT_DELAY 8'd255;
	rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_pV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHdr_pos <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_sV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHeadCap <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rxLenCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxLenLast <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxOvfCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rxValidEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	txCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDCPPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txUndCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (gbeControl$EN)
	  gbeControl <= `BSV_ASSIGNMENT_DELAY gbeControl$D_IN;
	if (macAddress$EN)
	  macAddress <= `BSV_ASSIGNMENT_DELAY macAddress$D_IN;
	if (mdi_rMDC$EN) mdi_rMDC <= `BSV_ASSIGNMENT_DELAY mdi_rMDC$D_IN;
	if (mdi_rMDD$EN) mdi_rMDD <= `BSV_ASSIGNMENT_DELAY mdi_rMDD$D_IN;
	if (mdi_rOutEn$EN)
	  mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY mdi_rOutEn$D_IN;
	if (mdi_rState$EN)
	  mdi_rState <= `BSV_ASSIGNMENT_DELAY mdi_rState$D_IN;
	if (phyResetWaitCnt$EN)
	  phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY phyResetWaitCnt$D_IN;
	if (rxAbortEOPC$EN)
	  rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY rxAbortEOPC$D_IN;
	if (rxCount$EN) rxCount <= `BSV_ASSIGNMENT_DELAY rxCount$D_IN;
	if (rxDCPCnt$EN) rxDCPCnt <= `BSV_ASSIGNMENT_DELAY rxDCPCnt$D_IN;
	if (rxDCPMesgPos$EN)
	  rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY rxDCPMesgPos$D_IN;
	if (rxDCPPLI$EN) rxDCPPLI <= `BSV_ASSIGNMENT_DELAY rxDCPPLI$D_IN;
	if (rxEmptyEOPC$EN)
	  rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY rxEmptyEOPC$D_IN;
	if (rxHdrMatchCnt$EN)
	  rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY rxHdrMatchCnt$D_IN;
	if (rxHdr_mCnt$EN)
	  rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY rxHdr_mCnt$D_IN;
	if (rxHdr_pV$EN) rxHdr_pV <= `BSV_ASSIGNMENT_DELAY rxHdr_pV$D_IN;
	if (rxHdr_pos$EN) rxHdr_pos <= `BSV_ASSIGNMENT_DELAY rxHdr_pos$D_IN;
	if (rxHdr_sV$EN) rxHdr_sV <= `BSV_ASSIGNMENT_DELAY rxHdr_sV$D_IN;
	if (rxHeadCap$EN) rxHeadCap <= `BSV_ASSIGNMENT_DELAY rxHeadCap$D_IN;
	if (rxLenCount$EN)
	  rxLenCount <= `BSV_ASSIGNMENT_DELAY rxLenCount$D_IN;
	if (rxLenLast$EN) rxLenLast <= `BSV_ASSIGNMENT_DELAY rxLenLast$D_IN;
	if (rxOvfCount$EN)
	  rxOvfCount <= `BSV_ASSIGNMENT_DELAY rxOvfCount$D_IN;
	if (rxPos$EN) rxPos <= `BSV_ASSIGNMENT_DELAY rxPos$D_IN;
	if (rxValidEOPC$EN)
	  rxValidEOPC <= `BSV_ASSIGNMENT_DELAY rxValidEOPC$D_IN;
	if (rxValidNoEOPC$EN)
	  rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY rxValidNoEOPC$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (txCount$EN) txCount <= `BSV_ASSIGNMENT_DELAY txCount$D_IN;
	if (txDBGCnt$EN) txDBGCnt <= `BSV_ASSIGNMENT_DELAY txDBGCnt$D_IN;
	if (txDBGPos$EN) txDBGPos <= `BSV_ASSIGNMENT_DELAY txDBGPos$D_IN;
	if (txDCPCnt$EN) txDCPCnt <= `BSV_ASSIGNMENT_DELAY txDCPCnt$D_IN;
	if (txDCPPos$EN) txDCPPos <= `BSV_ASSIGNMENT_DELAY txDCPPos$D_IN;
	if (txUndCount$EN)
	  txUndCount <= `BSV_ASSIGNMENT_DELAY txUndCount$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (mdi_rPhyAddr$EN)
      mdi_rPhyAddr <= `BSV_ASSIGNMENT_DELAY mdi_rPhyAddr$D_IN;
    if (mdi_rRegAddr$EN)
      mdi_rRegAddr <= `BSV_ASSIGNMENT_DELAY mdi_rRegAddr$D_IN;
    if (mdi_rWrite$EN) mdi_rWrite <= `BSV_ASSIGNMENT_DELAY mdi_rWrite$D_IN;
    if (mdi_rWriteData$EN)
      mdi_rWriteData <= `BSV_ASSIGNMENT_DELAY mdi_rWriteData$D_IN;
    if (mdi_vrReadData$EN)
      mdi_vrReadData <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData$D_IN;
    if (mdi_vrReadData_1$EN)
      mdi_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_1$D_IN;
    if (mdi_vrReadData_10$EN)
      mdi_vrReadData_10 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_10$D_IN;
    if (mdi_vrReadData_11$EN)
      mdi_vrReadData_11 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_11$D_IN;
    if (mdi_vrReadData_12$EN)
      mdi_vrReadData_12 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_12$D_IN;
    if (mdi_vrReadData_13$EN)
      mdi_vrReadData_13 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_13$D_IN;
    if (mdi_vrReadData_14$EN)
      mdi_vrReadData_14 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_14$D_IN;
    if (mdi_vrReadData_15$EN)
      mdi_vrReadData_15 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_15$D_IN;
    if (mdi_vrReadData_2$EN)
      mdi_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_2$D_IN;
    if (mdi_vrReadData_3$EN)
      mdi_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_3$D_IN;
    if (mdi_vrReadData_4$EN)
      mdi_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_4$D_IN;
    if (mdi_vrReadData_5$EN)
      mdi_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_5$D_IN;
    if (mdi_vrReadData_6$EN)
      mdi_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_6$D_IN;
    if (mdi_vrReadData_7$EN)
      mdi_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_7$D_IN;
    if (mdi_vrReadData_8$EN)
      mdi_vrReadData_8 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_8$D_IN;
    if (mdi_vrReadData_9$EN)
      mdi_vrReadData_9 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_9$D_IN;
    if (rxDCPMesg$EN) rxDCPMesg <= `BSV_ASSIGNMENT_DELAY rxDCPMesg$D_IN;
    if (rxPipe$EN) rxPipe <= `BSV_ASSIGNMENT_DELAY rxPipe$D_IN;
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge CLK_sys1_clk)
  begin
    if (!RST_N_sys1_rst)
      begin
        wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	wti_operateD <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (wti_nowReq$EN)
	  wti_nowReq <= `BSV_ASSIGNMENT_DELAY wti_nowReq$D_IN;
	if (wti_operateD$EN)
	  wti_operateD <= `BSV_ASSIGNMENT_DELAY wti_operateD$D_IN;
      end
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
      if (wsiM_isReset_isInReset$EN)
	wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiM_isReset_isInReset$D_IN;
      if (wsiS_isReset_isInReset$EN)
	wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiS_isReset_isInReset$D_IN;
    end

  always@(posedge CLK_sys1_clk or negedge RST_N_sys1_rst)
  if (!RST_N_sys1_rst)
    begin
      wti_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wti_isReset_isInReset$EN)
	wti_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wti_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    gbeControl = 32'hAAAAAAAA;
    macAddress = 48'hAAAAAAAAAAAA;
    mdi_rMDC = 1'h0;
    mdi_rMDD = 1'h0;
    mdi_rOutEn = 1'h0;
    mdi_rPhyAddr = 5'h0A;
    mdi_rRegAddr = 5'h0A;
    mdi_rState = 1'h0;
    mdi_rWrite = 1'h0;
    mdi_rWriteData = 16'hAAAA;
    mdi_vrReadData = 1'h0;
    mdi_vrReadData_1 = 1'h0;
    mdi_vrReadData_10 = 1'h0;
    mdi_vrReadData_11 = 1'h0;
    mdi_vrReadData_12 = 1'h0;
    mdi_vrReadData_13 = 1'h0;
    mdi_vrReadData_14 = 1'h0;
    mdi_vrReadData_15 = 1'h0;
    mdi_vrReadData_2 = 1'h0;
    mdi_vrReadData_3 = 1'h0;
    mdi_vrReadData_4 = 1'h0;
    mdi_vrReadData_5 = 1'h0;
    mdi_vrReadData_6 = 1'h0;
    mdi_vrReadData_7 = 1'h0;
    mdi_vrReadData_8 = 1'h0;
    mdi_vrReadData_9 = 1'h0;
    phyResetWaitCnt = 22'h2AAAAA;
    rxAbortEOPC = 32'hAAAAAAAA;
    rxCount = 32'hAAAAAAAA;
    rxDCPCnt = 32'hAAAAAAAA;
    rxDCPMesg = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxDCPMesgPos = 5'h0A;
    rxDCPPLI = 8'hAA;
    rxEmptyEOPC = 32'hAAAAAAAA;
    rxHdrMatchCnt = 32'hAAAAAAAA;
    rxHdr_mCnt = 4'hA;
    rxHdr_pV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHdr_pos = 4'hA;
    rxHdr_sV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHeadCap = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxLenCount = 32'hAAAAAAAA;
    rxLenLast = 32'hAAAAAAAA;
    rxOvfCount = 32'hAAAAAAAA;
    rxPipe = 32'hAAAAAAAA;
    rxPos = 2'h2;
    rxValidEOPC = 32'hAAAAAAAA;
    rxValidNoEOPC = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    txCount = 32'hAAAAAAAA;
    txDBGCnt = 32'hAAAAAAAA;
    txDBGPos = 5'h0A;
    txDCPCnt = 32'hAAAAAAAA;
    txDCPPos = 5'h0A;
    txUndCount = 32'hAAAAAAAA;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_isReset_isInReset = 1'h0;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_isReset_isInReset = 1'h0;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
    wti_isReset_isInReset = 1'h0;
    wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    wti_operateD = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (MUX_splitReadInFlight$write_1__SEL_2)
	begin
	  v__h102035 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (MUX_splitReadInFlight$write_1__SEL_2)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x",
		 v__h102035,
		 mdi_fResponse$D_OUT[15:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h81766 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h81766,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 wci_wslv_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3630 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3630,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h82055 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h82055,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 rdat__h82039);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/GbeWorker.bsv\", line 337, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3948 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3948,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3804 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3804,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkGbeWorker

