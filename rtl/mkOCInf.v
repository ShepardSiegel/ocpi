//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Wed Sep 29 14:48:57 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1
// server_response_get            O   153
// RDY_server_response_get        O     1
// led                            O     2 reg
// wci_m_0_MCmd                   O     3
// wci_m_0_MAddrSpace             O     1
// wci_m_0_MByteEn                O     4
// wci_m_0_MAddr                  O    20
// wci_m_0_MData                  O    32 reg
// wci_m_0_MFlag                  O     2 reg
// wci_m_1_MCmd                   O     3
// wci_m_1_MAddrSpace             O     1
// wci_m_1_MByteEn                O     4
// wci_m_1_MAddr                  O    20
// wci_m_1_MData                  O    32 reg
// wci_m_1_MFlag                  O     2 reg
// wci_m_2_MCmd                   O     3
// wci_m_2_MAddrSpace             O     1
// wci_m_2_MByteEn                O     4
// wci_m_2_MAddr                  O    20
// wci_m_2_MData                  O    32 reg
// wci_m_2_MFlag                  O     2 reg
// wci_m_3_MCmd                   O     3
// wci_m_3_MAddrSpace             O     1
// wci_m_3_MByteEn                O     4
// wci_m_3_MAddr                  O    20
// wci_m_3_MData                  O    32 reg
// wci_m_3_MFlag                  O     2 reg
// wci_m_4_MCmd                   O     3
// wci_m_4_MAddrSpace             O     1
// wci_m_4_MByteEn                O     4
// wci_m_4_MAddr                  O    20
// wci_m_4_MData                  O    32 reg
// wci_m_4_MFlag                  O     2 reg
// wci_m_5_MCmd                   O     3
// wci_m_5_MAddrSpace             O     1
// wci_m_5_MByteEn                O     4
// wci_m_5_MAddr                  O    20
// wci_m_5_MData                  O    32 reg
// wci_m_5_MFlag                  O     2 reg
// wci_m_6_MCmd                   O     3
// wci_m_6_MAddrSpace             O     1
// wci_m_6_MByteEn                O     4
// wci_m_6_MAddr                  O    20
// wci_m_6_MData                  O    32 reg
// wci_m_6_MFlag                  O     2 reg
// wci_m_7_MCmd                   O     3
// wci_m_7_MAddrSpace             O     1
// wci_m_7_MByteEn                O     4
// wci_m_7_MAddr                  O    20
// wci_m_7_MData                  O    32 reg
// wci_m_7_MFlag                  O     2 reg
// wci_m_8_MCmd                   O     3
// wci_m_8_MAddrSpace             O     1
// wci_m_8_MByteEn                O     4
// wci_m_8_MAddr                  O    20
// wci_m_8_MData                  O    32 reg
// wci_m_8_MFlag                  O     2 reg
// wci_m_9_MCmd                   O     3
// wci_m_9_MAddrSpace             O     1
// wci_m_9_MByteEn                O     4
// wci_m_9_MAddr                  O    20
// wci_m_9_MData                  O    32 reg
// wci_m_9_MFlag                  O     2 reg
// wci_m_10_MCmd                  O     3
// wci_m_10_MAddrSpace            O     1
// wci_m_10_MByteEn               O     4
// wci_m_10_MAddr                 O    20
// wci_m_10_MData                 O    32 reg
// wci_m_10_MFlag                 O     2 reg
// wci_m_11_MCmd                  O     3
// wci_m_11_MAddrSpace            O     1
// wci_m_11_MByteEn               O     4
// wci_m_11_MAddr                 O    20
// wci_m_11_MData                 O    32 reg
// wci_m_11_MFlag                 O     2 reg
// wci_m_12_MCmd                  O     3
// wci_m_12_MAddrSpace            O     1
// wci_m_12_MByteEn               O     4
// wci_m_12_MAddr                 O    20
// wci_m_12_MData                 O    32 reg
// wci_m_12_MFlag                 O     2 reg
// wmiS0_SResp                    O     2 reg
// wmiS0_SData                    O    32 reg
// wmiS0_SThreadBusy              O     1
// wmiS0_SDataThreadBusy          O     1
// wmiS0_SRespLast                O     1 const
// wmiS0_SFlag                    O    32 reg
// wmiS0_SReset_n                 O     1
// wmiS1_SResp                    O     2 reg
// wmiS1_SData                    O    32 reg
// wmiS1_SThreadBusy              O     1
// wmiS1_SDataThreadBusy          O     1
// wmiS1_SRespLast                O     1 const
// wmiS1_SFlag                    O    32 reg
// wmiS1_SReset_n                 O     1
// cpNow                          O    64 reg
// RDY_cpNow                      O     1 const
// gps_ppsSyncOut                 O     1
// RST_N_wci_m_0_mReset_n         O     1 reset
// RST_N_wci_m_1_mReset_n         O     1 reset
// RST_N_wci_m_2_mReset_n         O     1 reset
// RST_N_wci_m_3_mReset_n         O     1 reset
// RST_N_wci_m_4_mReset_n         O     1 reset
// RST_N_wci_m_5_mReset_n         O     1 reset
// RST_N_wci_m_6_mReset_n         O     1 reset
// RST_N_wci_m_7_mReset_n         O     1 reset
// RST_N_wci_m_8_mReset_n         O     1 reset
// RST_N_wci_m_9_mReset_n         O     1 reset
// RST_N_wci_m_10_mReset_n        O     1 reset
// RST_N_wci_m_11_mReset_n        O     1 reset
// RST_N_wci_m_12_mReset_n        O     1 reset
// pciDevice                      I    16
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rst                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I   153
// switch_x                       I     3 reg
// wci_m_0_SResp                  I     2
// wci_m_0_SData                  I    32
// wci_m_0_SFlag                  I     2 reg
// wci_m_1_SResp                  I     2
// wci_m_1_SData                  I    32
// wci_m_1_SFlag                  I     2 reg
// wci_m_2_SResp                  I     2
// wci_m_2_SData                  I    32
// wci_m_2_SFlag                  I     2 reg
// wci_m_3_SResp                  I     2
// wci_m_3_SData                  I    32
// wci_m_3_SFlag                  I     2 reg
// wci_m_4_SResp                  I     2
// wci_m_4_SData                  I    32
// wci_m_4_SFlag                  I     2 reg
// wci_m_5_SResp                  I     2
// wci_m_5_SData                  I    32
// wci_m_5_SFlag                  I     2 reg
// wci_m_6_SResp                  I     2
// wci_m_6_SData                  I    32
// wci_m_6_SFlag                  I     2 reg
// wci_m_7_SResp                  I     2
// wci_m_7_SData                  I    32
// wci_m_7_SFlag                  I     2 reg
// wci_m_8_SResp                  I     2
// wci_m_8_SData                  I    32
// wci_m_8_SFlag                  I     2 reg
// wci_m_9_SResp                  I     2
// wci_m_9_SData                  I    32
// wci_m_9_SFlag                  I     2 reg
// wci_m_10_SResp                 I     2
// wci_m_10_SData                 I    32
// wci_m_10_SFlag                 I     2 reg
// wci_m_11_SResp                 I     2
// wci_m_11_SData                 I    32
// wci_m_11_SFlag                 I     2 reg
// wci_m_12_SResp                 I     2
// wci_m_12_SData                 I    32
// wci_m_12_SFlag                 I     2 reg
// wmiS0_MCmd                     I     3
// wmiS0_MReqInfo                 I     1
// wmiS0_MAddrSpace               I     1
// wmiS0_MAddr                    I    14
// wmiS0_MBurstLength             I    12
// wmiS0_MData                    I    32
// wmiS0_MDataByteEn              I     4
// wmiS0_arg_mFlag                I    32 reg
// wmiS1_MCmd                     I     3
// wmiS1_MReqInfo                 I     1
// wmiS1_MAddrSpace               I     1
// wmiS1_MAddr                    I    14
// wmiS1_MBurstLength             I    12
// wmiS1_MData                    I    32
// wmiS1_MDataByteEn              I     4
// wmiS1_arg_mFlag                I    32 reg
// gps_ppsSyncIn_x                I     1 reg
// EN_server_request_put          I     1
// wci_m_0_SThreadBusy            I     1 reg
// wci_m_1_SThreadBusy            I     1 reg
// wci_m_2_SThreadBusy            I     1 reg
// wci_m_3_SThreadBusy            I     1 reg
// wci_m_4_SThreadBusy            I     1 reg
// wci_m_5_SThreadBusy            I     1 reg
// wci_m_6_SThreadBusy            I     1 reg
// wci_m_7_SThreadBusy            I     1 reg
// wci_m_8_SThreadBusy            I     1 reg
// wci_m_9_SThreadBusy            I     1 reg
// wci_m_10_SThreadBusy           I     1 reg
// wci_m_11_SThreadBusy           I     1 reg
// wci_m_12_SThreadBusy           I     1 reg
// wmiS0_MReqLast                 I     1
// wmiS0_MDataValid               I     1
// wmiS0_MDataLast                I     1
// wmiS0_MReset_n                 I     1 reg
// wmiS1_MReqLast                 I     1
// wmiS1_MDataValid               I     1
// wmiS1_MDataLast                I     1
// wmiS1_MReset_n                 I     1 reg
// EN_server_response_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCInf(pciDevice,
	       CLK_sys0_clk,
	       RST_N_sys0_rst,
	       CLK,
	       RST_N,

	       server_request_put,
	       EN_server_request_put,
	       RDY_server_request_put,

	       EN_server_response_get,
	       server_response_get,
	       RDY_server_response_get,

	       led,

	       switch_x,

	       wci_m_0_MCmd,

	       wci_m_0_MAddrSpace,

	       wci_m_0_MByteEn,

	       wci_m_0_MAddr,

	       wci_m_0_MData,

	       wci_m_0_SResp,

	       wci_m_0_SData,

	       wci_m_0_SThreadBusy,

	       wci_m_0_SFlag,

	       wci_m_0_MFlag,

	       wci_m_1_MCmd,

	       wci_m_1_MAddrSpace,

	       wci_m_1_MByteEn,

	       wci_m_1_MAddr,

	       wci_m_1_MData,

	       wci_m_1_SResp,

	       wci_m_1_SData,

	       wci_m_1_SThreadBusy,

	       wci_m_1_SFlag,

	       wci_m_1_MFlag,

	       wci_m_2_MCmd,

	       wci_m_2_MAddrSpace,

	       wci_m_2_MByteEn,

	       wci_m_2_MAddr,

	       wci_m_2_MData,

	       wci_m_2_SResp,

	       wci_m_2_SData,

	       wci_m_2_SThreadBusy,

	       wci_m_2_SFlag,

	       wci_m_2_MFlag,

	       wci_m_3_MCmd,

	       wci_m_3_MAddrSpace,

	       wci_m_3_MByteEn,

	       wci_m_3_MAddr,

	       wci_m_3_MData,

	       wci_m_3_SResp,

	       wci_m_3_SData,

	       wci_m_3_SThreadBusy,

	       wci_m_3_SFlag,

	       wci_m_3_MFlag,

	       wci_m_4_MCmd,

	       wci_m_4_MAddrSpace,

	       wci_m_4_MByteEn,

	       wci_m_4_MAddr,

	       wci_m_4_MData,

	       wci_m_4_SResp,

	       wci_m_4_SData,

	       wci_m_4_SThreadBusy,

	       wci_m_4_SFlag,

	       wci_m_4_MFlag,

	       wci_m_5_MCmd,

	       wci_m_5_MAddrSpace,

	       wci_m_5_MByteEn,

	       wci_m_5_MAddr,

	       wci_m_5_MData,

	       wci_m_5_SResp,

	       wci_m_5_SData,

	       wci_m_5_SThreadBusy,

	       wci_m_5_SFlag,

	       wci_m_5_MFlag,

	       wci_m_6_MCmd,

	       wci_m_6_MAddrSpace,

	       wci_m_6_MByteEn,

	       wci_m_6_MAddr,

	       wci_m_6_MData,

	       wci_m_6_SResp,

	       wci_m_6_SData,

	       wci_m_6_SThreadBusy,

	       wci_m_6_SFlag,

	       wci_m_6_MFlag,

	       wci_m_7_MCmd,

	       wci_m_7_MAddrSpace,

	       wci_m_7_MByteEn,

	       wci_m_7_MAddr,

	       wci_m_7_MData,

	       wci_m_7_SResp,

	       wci_m_7_SData,

	       wci_m_7_SThreadBusy,

	       wci_m_7_SFlag,

	       wci_m_7_MFlag,

	       wci_m_8_MCmd,

	       wci_m_8_MAddrSpace,

	       wci_m_8_MByteEn,

	       wci_m_8_MAddr,

	       wci_m_8_MData,

	       wci_m_8_SResp,

	       wci_m_8_SData,

	       wci_m_8_SThreadBusy,

	       wci_m_8_SFlag,

	       wci_m_8_MFlag,

	       wci_m_9_MCmd,

	       wci_m_9_MAddrSpace,

	       wci_m_9_MByteEn,

	       wci_m_9_MAddr,

	       wci_m_9_MData,

	       wci_m_9_SResp,

	       wci_m_9_SData,

	       wci_m_9_SThreadBusy,

	       wci_m_9_SFlag,

	       wci_m_9_MFlag,

	       wci_m_10_MCmd,

	       wci_m_10_MAddrSpace,

	       wci_m_10_MByteEn,

	       wci_m_10_MAddr,

	       wci_m_10_MData,

	       wci_m_10_SResp,

	       wci_m_10_SData,

	       wci_m_10_SThreadBusy,

	       wci_m_10_SFlag,

	       wci_m_10_MFlag,

	       wci_m_11_MCmd,

	       wci_m_11_MAddrSpace,

	       wci_m_11_MByteEn,

	       wci_m_11_MAddr,

	       wci_m_11_MData,

	       wci_m_11_SResp,

	       wci_m_11_SData,

	       wci_m_11_SThreadBusy,

	       wci_m_11_SFlag,

	       wci_m_11_MFlag,

	       wci_m_12_MCmd,

	       wci_m_12_MAddrSpace,

	       wci_m_12_MByteEn,

	       wci_m_12_MAddr,

	       wci_m_12_MData,

	       wci_m_12_SResp,

	       wci_m_12_SData,

	       wci_m_12_SThreadBusy,

	       wci_m_12_SFlag,

	       wci_m_12_MFlag,

	       wmiS0_MCmd,

	       wmiS0_MReqLast,

	       wmiS0_MReqInfo,

	       wmiS0_MAddrSpace,

	       wmiS0_MAddr,

	       wmiS0_MBurstLength,

	       wmiS0_MDataValid,

	       wmiS0_MDataLast,

	       wmiS0_MData,

	       wmiS0_MDataByteEn,

	       wmiS0_SResp,

	       wmiS0_SData,

	       wmiS0_SThreadBusy,

	       wmiS0_SDataThreadBusy,

	       wmiS0_SRespLast,

	       wmiS0_SFlag,

	       wmiS0_arg_mFlag,

	       wmiS0_SReset_n,

	       wmiS0_MReset_n,

	       wmiS1_MCmd,

	       wmiS1_MReqLast,

	       wmiS1_MReqInfo,

	       wmiS1_MAddrSpace,

	       wmiS1_MAddr,

	       wmiS1_MBurstLength,

	       wmiS1_MDataValid,

	       wmiS1_MDataLast,

	       wmiS1_MData,

	       wmiS1_MDataByteEn,

	       wmiS1_SResp,

	       wmiS1_SData,

	       wmiS1_SThreadBusy,

	       wmiS1_SDataThreadBusy,

	       wmiS1_SRespLast,

	       wmiS1_SFlag,

	       wmiS1_arg_mFlag,

	       wmiS1_SReset_n,

	       wmiS1_MReset_n,

	       cpNow,
	       RDY_cpNow,

	       gps_ppsSyncIn_x,

	       gps_ppsSyncOut,

	       RST_N_wci_m_0_mReset_n,
	       RST_N_wci_m_1_mReset_n,
	       RST_N_wci_m_2_mReset_n,
	       RST_N_wci_m_3_mReset_n,
	       RST_N_wci_m_4_mReset_n,
	       RST_N_wci_m_5_mReset_n,
	       RST_N_wci_m_6_mReset_n,
	       RST_N_wci_m_7_mReset_n,
	       RST_N_wci_m_8_mReset_n,
	       RST_N_wci_m_9_mReset_n,
	       RST_N_wci_m_10_mReset_n,
	       RST_N_wci_m_11_mReset_n,
	       RST_N_wci_m_12_mReset_n);
  input  [15 : 0] pciDevice;
  input  CLK_sys0_clk;
  input  RST_N_sys0_rst;
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [152 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [152 : 0] server_response_get;
  output RDY_server_response_get;

  // value method led
  output [1 : 0] led;

  // action method switch
  input  [2 : 0] switch_x;

  // value method wci_m_0_mCmd
  output [2 : 0] wci_m_0_MCmd;

  // value method wci_m_0_mAddrSpace
  output wci_m_0_MAddrSpace;

  // value method wci_m_0_mByteEn
  output [3 : 0] wci_m_0_MByteEn;

  // value method wci_m_0_mAddr
  output [19 : 0] wci_m_0_MAddr;

  // value method wci_m_0_mData
  output [31 : 0] wci_m_0_MData;

  // action method wci_m_0_sResp
  input  [1 : 0] wci_m_0_SResp;

  // action method wci_m_0_sData
  input  [31 : 0] wci_m_0_SData;

  // action method wci_m_0_sThreadBusy
  input  wci_m_0_SThreadBusy;

  // action method wci_m_0_sFlag
  input  [1 : 0] wci_m_0_SFlag;

  // value method wci_m_0_mFlag
  output [1 : 0] wci_m_0_MFlag;

  // value method wci_m_1_mCmd
  output [2 : 0] wci_m_1_MCmd;

  // value method wci_m_1_mAddrSpace
  output wci_m_1_MAddrSpace;

  // value method wci_m_1_mByteEn
  output [3 : 0] wci_m_1_MByteEn;

  // value method wci_m_1_mAddr
  output [19 : 0] wci_m_1_MAddr;

  // value method wci_m_1_mData
  output [31 : 0] wci_m_1_MData;

  // action method wci_m_1_sResp
  input  [1 : 0] wci_m_1_SResp;

  // action method wci_m_1_sData
  input  [31 : 0] wci_m_1_SData;

  // action method wci_m_1_sThreadBusy
  input  wci_m_1_SThreadBusy;

  // action method wci_m_1_sFlag
  input  [1 : 0] wci_m_1_SFlag;

  // value method wci_m_1_mFlag
  output [1 : 0] wci_m_1_MFlag;

  // value method wci_m_2_mCmd
  output [2 : 0] wci_m_2_MCmd;

  // value method wci_m_2_mAddrSpace
  output wci_m_2_MAddrSpace;

  // value method wci_m_2_mByteEn
  output [3 : 0] wci_m_2_MByteEn;

  // value method wci_m_2_mAddr
  output [19 : 0] wci_m_2_MAddr;

  // value method wci_m_2_mData
  output [31 : 0] wci_m_2_MData;

  // action method wci_m_2_sResp
  input  [1 : 0] wci_m_2_SResp;

  // action method wci_m_2_sData
  input  [31 : 0] wci_m_2_SData;

  // action method wci_m_2_sThreadBusy
  input  wci_m_2_SThreadBusy;

  // action method wci_m_2_sFlag
  input  [1 : 0] wci_m_2_SFlag;

  // value method wci_m_2_mFlag
  output [1 : 0] wci_m_2_MFlag;

  // value method wci_m_3_mCmd
  output [2 : 0] wci_m_3_MCmd;

  // value method wci_m_3_mAddrSpace
  output wci_m_3_MAddrSpace;

  // value method wci_m_3_mByteEn
  output [3 : 0] wci_m_3_MByteEn;

  // value method wci_m_3_mAddr
  output [19 : 0] wci_m_3_MAddr;

  // value method wci_m_3_mData
  output [31 : 0] wci_m_3_MData;

  // action method wci_m_3_sResp
  input  [1 : 0] wci_m_3_SResp;

  // action method wci_m_3_sData
  input  [31 : 0] wci_m_3_SData;

  // action method wci_m_3_sThreadBusy
  input  wci_m_3_SThreadBusy;

  // action method wci_m_3_sFlag
  input  [1 : 0] wci_m_3_SFlag;

  // value method wci_m_3_mFlag
  output [1 : 0] wci_m_3_MFlag;

  // value method wci_m_4_mCmd
  output [2 : 0] wci_m_4_MCmd;

  // value method wci_m_4_mAddrSpace
  output wci_m_4_MAddrSpace;

  // value method wci_m_4_mByteEn
  output [3 : 0] wci_m_4_MByteEn;

  // value method wci_m_4_mAddr
  output [19 : 0] wci_m_4_MAddr;

  // value method wci_m_4_mData
  output [31 : 0] wci_m_4_MData;

  // action method wci_m_4_sResp
  input  [1 : 0] wci_m_4_SResp;

  // action method wci_m_4_sData
  input  [31 : 0] wci_m_4_SData;

  // action method wci_m_4_sThreadBusy
  input  wci_m_4_SThreadBusy;

  // action method wci_m_4_sFlag
  input  [1 : 0] wci_m_4_SFlag;

  // value method wci_m_4_mFlag
  output [1 : 0] wci_m_4_MFlag;

  // value method wci_m_5_mCmd
  output [2 : 0] wci_m_5_MCmd;

  // value method wci_m_5_mAddrSpace
  output wci_m_5_MAddrSpace;

  // value method wci_m_5_mByteEn
  output [3 : 0] wci_m_5_MByteEn;

  // value method wci_m_5_mAddr
  output [19 : 0] wci_m_5_MAddr;

  // value method wci_m_5_mData
  output [31 : 0] wci_m_5_MData;

  // action method wci_m_5_sResp
  input  [1 : 0] wci_m_5_SResp;

  // action method wci_m_5_sData
  input  [31 : 0] wci_m_5_SData;

  // action method wci_m_5_sThreadBusy
  input  wci_m_5_SThreadBusy;

  // action method wci_m_5_sFlag
  input  [1 : 0] wci_m_5_SFlag;

  // value method wci_m_5_mFlag
  output [1 : 0] wci_m_5_MFlag;

  // value method wci_m_6_mCmd
  output [2 : 0] wci_m_6_MCmd;

  // value method wci_m_6_mAddrSpace
  output wci_m_6_MAddrSpace;

  // value method wci_m_6_mByteEn
  output [3 : 0] wci_m_6_MByteEn;

  // value method wci_m_6_mAddr
  output [19 : 0] wci_m_6_MAddr;

  // value method wci_m_6_mData
  output [31 : 0] wci_m_6_MData;

  // action method wci_m_6_sResp
  input  [1 : 0] wci_m_6_SResp;

  // action method wci_m_6_sData
  input  [31 : 0] wci_m_6_SData;

  // action method wci_m_6_sThreadBusy
  input  wci_m_6_SThreadBusy;

  // action method wci_m_6_sFlag
  input  [1 : 0] wci_m_6_SFlag;

  // value method wci_m_6_mFlag
  output [1 : 0] wci_m_6_MFlag;

  // value method wci_m_7_mCmd
  output [2 : 0] wci_m_7_MCmd;

  // value method wci_m_7_mAddrSpace
  output wci_m_7_MAddrSpace;

  // value method wci_m_7_mByteEn
  output [3 : 0] wci_m_7_MByteEn;

  // value method wci_m_7_mAddr
  output [19 : 0] wci_m_7_MAddr;

  // value method wci_m_7_mData
  output [31 : 0] wci_m_7_MData;

  // action method wci_m_7_sResp
  input  [1 : 0] wci_m_7_SResp;

  // action method wci_m_7_sData
  input  [31 : 0] wci_m_7_SData;

  // action method wci_m_7_sThreadBusy
  input  wci_m_7_SThreadBusy;

  // action method wci_m_7_sFlag
  input  [1 : 0] wci_m_7_SFlag;

  // value method wci_m_7_mFlag
  output [1 : 0] wci_m_7_MFlag;

  // value method wci_m_8_mCmd
  output [2 : 0] wci_m_8_MCmd;

  // value method wci_m_8_mAddrSpace
  output wci_m_8_MAddrSpace;

  // value method wci_m_8_mByteEn
  output [3 : 0] wci_m_8_MByteEn;

  // value method wci_m_8_mAddr
  output [19 : 0] wci_m_8_MAddr;

  // value method wci_m_8_mData
  output [31 : 0] wci_m_8_MData;

  // action method wci_m_8_sResp
  input  [1 : 0] wci_m_8_SResp;

  // action method wci_m_8_sData
  input  [31 : 0] wci_m_8_SData;

  // action method wci_m_8_sThreadBusy
  input  wci_m_8_SThreadBusy;

  // action method wci_m_8_sFlag
  input  [1 : 0] wci_m_8_SFlag;

  // value method wci_m_8_mFlag
  output [1 : 0] wci_m_8_MFlag;

  // value method wci_m_9_mCmd
  output [2 : 0] wci_m_9_MCmd;

  // value method wci_m_9_mAddrSpace
  output wci_m_9_MAddrSpace;

  // value method wci_m_9_mByteEn
  output [3 : 0] wci_m_9_MByteEn;

  // value method wci_m_9_mAddr
  output [19 : 0] wci_m_9_MAddr;

  // value method wci_m_9_mData
  output [31 : 0] wci_m_9_MData;

  // action method wci_m_9_sResp
  input  [1 : 0] wci_m_9_SResp;

  // action method wci_m_9_sData
  input  [31 : 0] wci_m_9_SData;

  // action method wci_m_9_sThreadBusy
  input  wci_m_9_SThreadBusy;

  // action method wci_m_9_sFlag
  input  [1 : 0] wci_m_9_SFlag;

  // value method wci_m_9_mFlag
  output [1 : 0] wci_m_9_MFlag;

  // value method wci_m_10_mCmd
  output [2 : 0] wci_m_10_MCmd;

  // value method wci_m_10_mAddrSpace
  output wci_m_10_MAddrSpace;

  // value method wci_m_10_mByteEn
  output [3 : 0] wci_m_10_MByteEn;

  // value method wci_m_10_mAddr
  output [19 : 0] wci_m_10_MAddr;

  // value method wci_m_10_mData
  output [31 : 0] wci_m_10_MData;

  // action method wci_m_10_sResp
  input  [1 : 0] wci_m_10_SResp;

  // action method wci_m_10_sData
  input  [31 : 0] wci_m_10_SData;

  // action method wci_m_10_sThreadBusy
  input  wci_m_10_SThreadBusy;

  // action method wci_m_10_sFlag
  input  [1 : 0] wci_m_10_SFlag;

  // value method wci_m_10_mFlag
  output [1 : 0] wci_m_10_MFlag;

  // value method wci_m_11_mCmd
  output [2 : 0] wci_m_11_MCmd;

  // value method wci_m_11_mAddrSpace
  output wci_m_11_MAddrSpace;

  // value method wci_m_11_mByteEn
  output [3 : 0] wci_m_11_MByteEn;

  // value method wci_m_11_mAddr
  output [19 : 0] wci_m_11_MAddr;

  // value method wci_m_11_mData
  output [31 : 0] wci_m_11_MData;

  // action method wci_m_11_sResp
  input  [1 : 0] wci_m_11_SResp;

  // action method wci_m_11_sData
  input  [31 : 0] wci_m_11_SData;

  // action method wci_m_11_sThreadBusy
  input  wci_m_11_SThreadBusy;

  // action method wci_m_11_sFlag
  input  [1 : 0] wci_m_11_SFlag;

  // value method wci_m_11_mFlag
  output [1 : 0] wci_m_11_MFlag;

  // value method wci_m_12_mCmd
  output [2 : 0] wci_m_12_MCmd;

  // value method wci_m_12_mAddrSpace
  output wci_m_12_MAddrSpace;

  // value method wci_m_12_mByteEn
  output [3 : 0] wci_m_12_MByteEn;

  // value method wci_m_12_mAddr
  output [19 : 0] wci_m_12_MAddr;

  // value method wci_m_12_mData
  output [31 : 0] wci_m_12_MData;

  // action method wci_m_12_sResp
  input  [1 : 0] wci_m_12_SResp;

  // action method wci_m_12_sData
  input  [31 : 0] wci_m_12_SData;

  // action method wci_m_12_sThreadBusy
  input  wci_m_12_SThreadBusy;

  // action method wci_m_12_sFlag
  input  [1 : 0] wci_m_12_SFlag;

  // value method wci_m_12_mFlag
  output [1 : 0] wci_m_12_MFlag;

  // action method wmiS0_mCmd
  input  [2 : 0] wmiS0_MCmd;

  // action method wmiS0_mReqLast
  input  wmiS0_MReqLast;

  // action method wmiS0_mReqInfo
  input  wmiS0_MReqInfo;

  // action method wmiS0_mAddrSpace
  input  wmiS0_MAddrSpace;

  // action method wmiS0_mAddr
  input  [13 : 0] wmiS0_MAddr;

  // action method wmiS0_mBurstLength
  input  [11 : 0] wmiS0_MBurstLength;

  // action method wmiS0_mDataValid
  input  wmiS0_MDataValid;

  // action method wmiS0_mDataLast
  input  wmiS0_MDataLast;

  // action method wmiS0_mData
  input  [31 : 0] wmiS0_MData;

  // action method wmiS0_mDataInfo

  // action method wmiS0_mDataByteEn
  input  [3 : 0] wmiS0_MDataByteEn;

  // value method wmiS0_sResp
  output [1 : 0] wmiS0_SResp;

  // value method wmiS0_sData
  output [31 : 0] wmiS0_SData;

  // value method wmiS0_sThreadBusy
  output wmiS0_SThreadBusy;

  // value method wmiS0_sDataThreadBusy
  output wmiS0_SDataThreadBusy;

  // value method wmiS0_sRespLast
  output wmiS0_SRespLast;

  // value method wmiS0_sFlag
  output [31 : 0] wmiS0_SFlag;

  // action method wmiS0_mFlag
  input  [31 : 0] wmiS0_arg_mFlag;

  // value method wmiS0_sReset_n
  output wmiS0_SReset_n;

  // action method wmiS0_mReset_n
  input  wmiS0_MReset_n;

  // action method wmiS1_mCmd
  input  [2 : 0] wmiS1_MCmd;

  // action method wmiS1_mReqLast
  input  wmiS1_MReqLast;

  // action method wmiS1_mReqInfo
  input  wmiS1_MReqInfo;

  // action method wmiS1_mAddrSpace
  input  wmiS1_MAddrSpace;

  // action method wmiS1_mAddr
  input  [13 : 0] wmiS1_MAddr;

  // action method wmiS1_mBurstLength
  input  [11 : 0] wmiS1_MBurstLength;

  // action method wmiS1_mDataValid
  input  wmiS1_MDataValid;

  // action method wmiS1_mDataLast
  input  wmiS1_MDataLast;

  // action method wmiS1_mData
  input  [31 : 0] wmiS1_MData;

  // action method wmiS1_mDataInfo

  // action method wmiS1_mDataByteEn
  input  [3 : 0] wmiS1_MDataByteEn;

  // value method wmiS1_sResp
  output [1 : 0] wmiS1_SResp;

  // value method wmiS1_sData
  output [31 : 0] wmiS1_SData;

  // value method wmiS1_sThreadBusy
  output wmiS1_SThreadBusy;

  // value method wmiS1_sDataThreadBusy
  output wmiS1_SDataThreadBusy;

  // value method wmiS1_sRespLast
  output wmiS1_SRespLast;

  // value method wmiS1_sFlag
  output [31 : 0] wmiS1_SFlag;

  // action method wmiS1_mFlag
  input  [31 : 0] wmiS1_arg_mFlag;

  // value method wmiS1_sReset_n
  output wmiS1_SReset_n;

  // action method wmiS1_mReset_n
  input  wmiS1_MReset_n;

  // value method cpNow
  output [63 : 0] cpNow;
  output RDY_cpNow;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // output resets
  output RST_N_wci_m_0_mReset_n;
  output RST_N_wci_m_1_mReset_n;
  output RST_N_wci_m_2_mReset_n;
  output RST_N_wci_m_3_mReset_n;
  output RST_N_wci_m_4_mReset_n;
  output RST_N_wci_m_5_mReset_n;
  output RST_N_wci_m_6_mReset_n;
  output RST_N_wci_m_7_mReset_n;
  output RST_N_wci_m_8_mReset_n;
  output RST_N_wci_m_9_mReset_n;
  output RST_N_wci_m_10_mReset_n;
  output RST_N_wci_m_11_mReset_n;
  output RST_N_wci_m_12_mReset_n;

  // signals for module outputs
  wire [152 : 0] server_response_get;
  wire [63 : 0] cpNow;
  wire [31 : 0] wci_m_0_MData,
		wci_m_10_MData,
		wci_m_11_MData,
		wci_m_12_MData,
		wci_m_1_MData,
		wci_m_2_MData,
		wci_m_3_MData,
		wci_m_4_MData,
		wci_m_5_MData,
		wci_m_6_MData,
		wci_m_7_MData,
		wci_m_8_MData,
		wci_m_9_MData,
		wmiS0_SData,
		wmiS0_SFlag,
		wmiS1_SData,
		wmiS1_SFlag;
  wire [19 : 0] wci_m_0_MAddr,
		wci_m_10_MAddr,
		wci_m_11_MAddr,
		wci_m_12_MAddr,
		wci_m_1_MAddr,
		wci_m_2_MAddr,
		wci_m_3_MAddr,
		wci_m_4_MAddr,
		wci_m_5_MAddr,
		wci_m_6_MAddr,
		wci_m_7_MAddr,
		wci_m_8_MAddr,
		wci_m_9_MAddr;
  wire [3 : 0] wci_m_0_MByteEn,
	       wci_m_10_MByteEn,
	       wci_m_11_MByteEn,
	       wci_m_12_MByteEn,
	       wci_m_1_MByteEn,
	       wci_m_2_MByteEn,
	       wci_m_3_MByteEn,
	       wci_m_4_MByteEn,
	       wci_m_5_MByteEn,
	       wci_m_6_MByteEn,
	       wci_m_7_MByteEn,
	       wci_m_8_MByteEn,
	       wci_m_9_MByteEn;
  wire [2 : 0] wci_m_0_MCmd,
	       wci_m_10_MCmd,
	       wci_m_11_MCmd,
	       wci_m_12_MCmd,
	       wci_m_1_MCmd,
	       wci_m_2_MCmd,
	       wci_m_3_MCmd,
	       wci_m_4_MCmd,
	       wci_m_5_MCmd,
	       wci_m_6_MCmd,
	       wci_m_7_MCmd,
	       wci_m_8_MCmd,
	       wci_m_9_MCmd;
  wire [1 : 0] led,
	       wci_m_0_MFlag,
	       wci_m_10_MFlag,
	       wci_m_11_MFlag,
	       wci_m_12_MFlag,
	       wci_m_1_MFlag,
	       wci_m_2_MFlag,
	       wci_m_3_MFlag,
	       wci_m_4_MFlag,
	       wci_m_5_MFlag,
	       wci_m_6_MFlag,
	       wci_m_7_MFlag,
	       wci_m_8_MFlag,
	       wci_m_9_MFlag,
	       wmiS0_SResp,
	       wmiS1_SResp;
  wire RDY_cpNow,
       RDY_server_request_put,
       RDY_server_response_get,
       RST_N_wci_m_0_mReset_n,
       RST_N_wci_m_10_mReset_n,
       RST_N_wci_m_11_mReset_n,
       RST_N_wci_m_12_mReset_n,
       RST_N_wci_m_1_mReset_n,
       RST_N_wci_m_2_mReset_n,
       RST_N_wci_m_3_mReset_n,
       RST_N_wci_m_4_mReset_n,
       RST_N_wci_m_5_mReset_n,
       RST_N_wci_m_6_mReset_n,
       RST_N_wci_m_7_mReset_n,
       RST_N_wci_m_8_mReset_n,
       RST_N_wci_m_9_mReset_n,
       gps_ppsSyncOut,
       wci_m_0_MAddrSpace,
       wci_m_10_MAddrSpace,
       wci_m_11_MAddrSpace,
       wci_m_12_MAddrSpace,
       wci_m_1_MAddrSpace,
       wci_m_2_MAddrSpace,
       wci_m_3_MAddrSpace,
       wci_m_4_MAddrSpace,
       wci_m_5_MAddrSpace,
       wci_m_6_MAddrSpace,
       wci_m_7_MAddrSpace,
       wci_m_8_MAddrSpace,
       wci_m_9_MAddrSpace,
       wmiS0_SDataThreadBusy,
       wmiS0_SReset_n,
       wmiS0_SRespLast,
       wmiS0_SThreadBusy,
       wmiS1_SDataThreadBusy,
       wmiS1_SReset_n,
       wmiS1_SRespLast,
       wmiS1_SThreadBusy;

  // inlined wires
  wire itc0_wti_sThreadBusy_pw$whas, itc1_wti_sThreadBusy_pw$whas;

  // register chompCnt
  reg [7 : 0] chompCnt;
  wire [7 : 0] chompCnt$D_IN;
  wire chompCnt$EN;

  // register itc0_wti_nowReq
  reg [66 : 0] itc0_wti_nowReq;
  wire [66 : 0] itc0_wti_nowReq$D_IN;
  wire itc0_wti_nowReq$EN;

  // register itc0_wti_sThreadBusy_d
  reg itc0_wti_sThreadBusy_d;
  wire itc0_wti_sThreadBusy_d$D_IN, itc0_wti_sThreadBusy_d$EN;

  // register itc1_wti_nowReq
  reg [66 : 0] itc1_wti_nowReq;
  wire [66 : 0] itc1_wti_nowReq$D_IN;
  wire itc1_wti_nowReq$EN;

  // register itc1_wti_sThreadBusy_d
  reg itc1_wti_sThreadBusy_d;
  wire itc1_wti_sThreadBusy_d$D_IN, itc1_wti_sThreadBusy_d$EN;

  // ports of submodule cp
  wire [152 : 0] cp$server_request_put, cp$server_response_get;
  wire [63 : 0] cp$cpNow;
  wire [31 : 0] cp$wci_Vm_0_MData,
		cp$wci_Vm_0_SData,
		cp$wci_Vm_10_MData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_MData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_MData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_MData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_MData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_MData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_MData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_MData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_MData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_MData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_MData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_MData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_MData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_MData,
		cp$wci_Vm_9_SData;
  wire [19 : 0] cp$wci_Vm_0_MAddr,
		cp$wci_Vm_10_MAddr,
		cp$wci_Vm_11_MAddr,
		cp$wci_Vm_12_MAddr,
		cp$wci_Vm_13_MAddr,
		cp$wci_Vm_14_MAddr,
		cp$wci_Vm_1_MAddr,
		cp$wci_Vm_2_MAddr,
		cp$wci_Vm_3_MAddr,
		cp$wci_Vm_4_MAddr,
		cp$wci_Vm_5_MAddr,
		cp$wci_Vm_6_MAddr,
		cp$wci_Vm_7_MAddr,
		cp$wci_Vm_8_MAddr,
		cp$wci_Vm_9_MAddr;
  wire [3 : 0] cp$wci_Vm_0_MByteEn,
	       cp$wci_Vm_10_MByteEn,
	       cp$wci_Vm_11_MByteEn,
	       cp$wci_Vm_12_MByteEn,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_1_MByteEn,
	       cp$wci_Vm_2_MByteEn,
	       cp$wci_Vm_3_MByteEn,
	       cp$wci_Vm_4_MByteEn,
	       cp$wci_Vm_5_MByteEn,
	       cp$wci_Vm_6_MByteEn,
	       cp$wci_Vm_7_MByteEn,
	       cp$wci_Vm_8_MByteEn,
	       cp$wci_Vm_9_MByteEn;
  wire [2 : 0] cp$switch_x,
	       cp$wci_Vm_0_MCmd,
	       cp$wci_Vm_10_MCmd,
	       cp$wci_Vm_11_MCmd,
	       cp$wci_Vm_12_MCmd,
	       cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_1_MCmd,
	       cp$wci_Vm_2_MCmd,
	       cp$wci_Vm_3_MCmd,
	       cp$wci_Vm_4_MCmd,
	       cp$wci_Vm_5_MCmd,
	       cp$wci_Vm_6_MCmd,
	       cp$wci_Vm_7_MCmd,
	       cp$wci_Vm_8_MCmd,
	       cp$wci_Vm_9_MCmd;
  wire [1 : 0] cp$led,
	       cp$wci_Vm_0_MFlag,
	       cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_MFlag,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_MFlag,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_MFlag,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_MFlag,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_MFlag,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_MFlag,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_MFlag,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_MFlag,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_MFlag,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_MFlag,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_MFlag,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_MFlag,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_MFlag,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_MFlag,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_0_mReset_n,
       cp$RST_N_wci_Vm_10_mReset_n,
       cp$RST_N_wci_Vm_11_mReset_n,
       cp$RST_N_wci_Vm_12_mReset_n,
       cp$RST_N_wci_Vm_13_mReset_n,
       cp$RST_N_wci_Vm_14_mReset_n,
       cp$RST_N_wci_Vm_1_mReset_n,
       cp$RST_N_wci_Vm_2_mReset_n,
       cp$RST_N_wci_Vm_3_mReset_n,
       cp$RST_N_wci_Vm_4_mReset_n,
       cp$RST_N_wci_Vm_5_mReset_n,
       cp$RST_N_wci_Vm_6_mReset_n,
       cp$RST_N_wci_Vm_7_mReset_n,
       cp$RST_N_wci_Vm_8_mReset_n,
       cp$RST_N_wci_Vm_9_mReset_n,
       cp$gps_ppsSyncIn_x,
       cp$gps_ppsSyncOut,
       cp$wci_Vm_0_MAddrSpace,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_MAddrSpace,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_MAddrSpace,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_MAddrSpace,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_MAddrSpace,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_MAddrSpace,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_MAddrSpace,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_MAddrSpace,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_MAddrSpace,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_MAddrSpace,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_MAddrSpace,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_MAddrSpace,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_MAddrSpace,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_MAddrSpace,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_MAddrSpace,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule dp0
  wire [152 : 0] dp0$server_request_put, dp0$server_response_get;
  wire [66 : 0] dp0$wti_s_req;
  wire [31 : 0] dp0$wci_s_MData,
		dp0$wci_s_SData,
		dp0$wmiS1_MData,
		dp0$wmiS1_SData,
		dp0$wmiS1_SFlag,
		dp0$wmiS1_arg_mFlag;
  wire [19 : 0] dp0$wci_s_MAddr;
  wire [13 : 0] dp0$wmiS1_MAddr;
  wire [11 : 0] dp0$wmiS1_MBurstLength;
  wire [3 : 0] dp0$wci_s_MByteEn, dp0$wmiS1_MDataByteEn;
  wire [2 : 0] dp0$wci_s_MCmd, dp0$wmiS1_MCmd;
  wire [1 : 0] dp0$wci_s_MFlag,
	       dp0$wci_s_SFlag,
	       dp0$wci_s_SResp,
	       dp0$wmiS1_SResp;
  wire dp0$EN_server_request_put,
       dp0$EN_server_response_get,
       dp0$RDY_server_request_put,
       dp0$RDY_server_response_get,
       dp0$wci_s_MAddrSpace,
       dp0$wci_s_SThreadBusy,
       dp0$wmiS1_MAddrSpace,
       dp0$wmiS1_MDataLast,
       dp0$wmiS1_MDataValid,
       dp0$wmiS1_MReqInfo,
       dp0$wmiS1_MReqLast,
       dp0$wmiS1_MReset_n,
       dp0$wmiS1_SDataThreadBusy,
       dp0$wmiS1_SReset_n,
       dp0$wmiS1_SRespLast,
       dp0$wmiS1_SThreadBusy,
       dp0$wti_s_SThreadBusy;

  // ports of submodule dp1
  wire [152 : 0] dp1$server_request_put, dp1$server_response_get;
  wire [66 : 0] dp1$wti_s_req;
  wire [31 : 0] dp1$wci_s_MData,
		dp1$wci_s_SData,
		dp1$wmiS1_MData,
		dp1$wmiS1_SData,
		dp1$wmiS1_SFlag,
		dp1$wmiS1_arg_mFlag;
  wire [19 : 0] dp1$wci_s_MAddr;
  wire [13 : 0] dp1$wmiS1_MAddr;
  wire [11 : 0] dp1$wmiS1_MBurstLength;
  wire [3 : 0] dp1$wci_s_MByteEn, dp1$wmiS1_MDataByteEn;
  wire [2 : 0] dp1$wci_s_MCmd, dp1$wmiS1_MCmd;
  wire [1 : 0] dp1$wci_s_MFlag,
	       dp1$wci_s_SFlag,
	       dp1$wci_s_SResp,
	       dp1$wmiS1_SResp;
  wire dp1$EN_server_request_put,
       dp1$EN_server_response_get,
       dp1$RDY_server_request_put,
       dp1$RDY_server_response_get,
       dp1$wci_s_MAddrSpace,
       dp1$wci_s_SThreadBusy,
       dp1$wmiS1_MAddrSpace,
       dp1$wmiS1_MDataLast,
       dp1$wmiS1_MDataValid,
       dp1$wmiS1_MReqInfo,
       dp1$wmiS1_MReqLast,
       dp1$wmiS1_MReset_n,
       dp1$wmiS1_SDataThreadBusy,
       dp1$wmiS1_SReset_n,
       dp1$wmiS1_SRespLast,
       dp1$wmiS1_SThreadBusy,
       dp1$wti_s_SThreadBusy;

  // ports of submodule itc0_now
  wire [63 : 0] itc0_now$dD_OUT, itc0_now$sD_IN;
  wire itc0_now$sEN, itc0_now$sRDY;

  // ports of submodule itc1_now
  wire [63 : 0] itc1_now$dD_OUT, itc1_now$sD_IN;
  wire itc1_now$sEN, itc1_now$sRDY;

  // ports of submodule sm0
  wire [152 : 0] sm0$c0_request_get,
		 sm0$c0_response_put,
		 sm0$c1_request_get,
		 sm0$c1_response_put,
		 sm0$s_request_put,
		 sm0$s_response_get;
  wire sm0$EN_c0_request_get,
       sm0$EN_c0_response_put,
       sm0$EN_c1_request_get,
       sm0$EN_c1_response_put,
       sm0$EN_s_request_put,
       sm0$EN_s_response_get,
       sm0$RDY_c0_request_get,
       sm0$RDY_c0_response_put,
       sm0$RDY_c1_request_get,
       sm0$RDY_c1_response_put,
       sm0$RDY_s_request_put,
       sm0$RDY_s_response_get;

  // ports of submodule sm1
  wire [152 : 0] sm1$c0_request_get,
		 sm1$c0_response_put,
		 sm1$c1_request_get,
		 sm1$c1_response_put,
		 sm1$s_request_put,
		 sm1$s_response_get;
  wire sm1$EN_c0_request_get,
       sm1$EN_c0_response_put,
       sm1$EN_c1_request_get,
       sm1$EN_c1_response_put,
       sm1$EN_s_request_put,
       sm1$EN_s_response_get,
       sm1$RDY_c0_request_get,
       sm1$RDY_c0_response_put,
       sm1$RDY_c1_request_get,
       sm1$RDY_c1_response_put,
       sm1$RDY_s_request_put,
       sm1$RDY_s_response_get;

  // ports of submodule sm2
  wire [152 : 0] sm2$c0_request_get,
		 sm2$c0_response_put,
		 sm2$c1_response_put,
		 sm2$s_request_put,
		 sm2$s_response_get;
  wire sm2$EN_c0_request_get,
       sm2$EN_c0_response_put,
       sm2$EN_c1_request_get,
       sm2$EN_c1_response_put,
       sm2$EN_s_request_put,
       sm2$EN_s_response_get,
       sm2$RDY_c0_request_get,
       sm2$RDY_c0_response_put,
       sm2$RDY_c1_request_get,
       sm2$RDY_s_request_put,
       sm2$RDY_s_response_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerRequest_4,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_ClientServerResponse_4,
       CAN_FIRE_RL_chomp_rogue,
       CAN_FIRE_RL_itc0_send_time,
       CAN_FIRE_RL_itc0_wti_sThreadBusy_reg,
       CAN_FIRE_RL_itc1_send_time,
       CAN_FIRE_RL_itc1_wti_sThreadBusy_reg,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mAddrConnect_1,
       CAN_FIRE_RL_mAddrSConnect,
       CAN_FIRE_RL_mAddrSConnect_1,
       CAN_FIRE_RL_mBEConnect,
       CAN_FIRE_RL_mBEConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mFlagConnect,
       CAN_FIRE_RL_mFlagConnect_1,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_reqConnect,
       CAN_FIRE_RL_reqConnect_1,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sDataConnect_1,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sFlagConnect_1,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRespConnect_1,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_gps_ppsSyncIn,
       CAN_FIRE_server_request_put,
       CAN_FIRE_server_response_get,
       CAN_FIRE_switch,
       CAN_FIRE_wci_m_0_sData,
       CAN_FIRE_wci_m_0_sFlag,
       CAN_FIRE_wci_m_0_sResp,
       CAN_FIRE_wci_m_0_sThreadBusy,
       CAN_FIRE_wci_m_10_sData,
       CAN_FIRE_wci_m_10_sFlag,
       CAN_FIRE_wci_m_10_sResp,
       CAN_FIRE_wci_m_10_sThreadBusy,
       CAN_FIRE_wci_m_11_sData,
       CAN_FIRE_wci_m_11_sFlag,
       CAN_FIRE_wci_m_11_sResp,
       CAN_FIRE_wci_m_11_sThreadBusy,
       CAN_FIRE_wci_m_12_sData,
       CAN_FIRE_wci_m_12_sFlag,
       CAN_FIRE_wci_m_12_sResp,
       CAN_FIRE_wci_m_12_sThreadBusy,
       CAN_FIRE_wci_m_1_sData,
       CAN_FIRE_wci_m_1_sFlag,
       CAN_FIRE_wci_m_1_sResp,
       CAN_FIRE_wci_m_1_sThreadBusy,
       CAN_FIRE_wci_m_2_sData,
       CAN_FIRE_wci_m_2_sFlag,
       CAN_FIRE_wci_m_2_sResp,
       CAN_FIRE_wci_m_2_sThreadBusy,
       CAN_FIRE_wci_m_3_sData,
       CAN_FIRE_wci_m_3_sFlag,
       CAN_FIRE_wci_m_3_sResp,
       CAN_FIRE_wci_m_3_sThreadBusy,
       CAN_FIRE_wci_m_4_sData,
       CAN_FIRE_wci_m_4_sFlag,
       CAN_FIRE_wci_m_4_sResp,
       CAN_FIRE_wci_m_4_sThreadBusy,
       CAN_FIRE_wci_m_5_sData,
       CAN_FIRE_wci_m_5_sFlag,
       CAN_FIRE_wci_m_5_sResp,
       CAN_FIRE_wci_m_5_sThreadBusy,
       CAN_FIRE_wci_m_6_sData,
       CAN_FIRE_wci_m_6_sFlag,
       CAN_FIRE_wci_m_6_sResp,
       CAN_FIRE_wci_m_6_sThreadBusy,
       CAN_FIRE_wci_m_7_sData,
       CAN_FIRE_wci_m_7_sFlag,
       CAN_FIRE_wci_m_7_sResp,
       CAN_FIRE_wci_m_7_sThreadBusy,
       CAN_FIRE_wci_m_8_sData,
       CAN_FIRE_wci_m_8_sFlag,
       CAN_FIRE_wci_m_8_sResp,
       CAN_FIRE_wci_m_8_sThreadBusy,
       CAN_FIRE_wci_m_9_sData,
       CAN_FIRE_wci_m_9_sFlag,
       CAN_FIRE_wci_m_9_sResp,
       CAN_FIRE_wci_m_9_sThreadBusy,
       CAN_FIRE_wmiS0_mAddr,
       CAN_FIRE_wmiS0_mAddrSpace,
       CAN_FIRE_wmiS0_mBurstLength,
       CAN_FIRE_wmiS0_mCmd,
       CAN_FIRE_wmiS0_mData,
       CAN_FIRE_wmiS0_mDataByteEn,
       CAN_FIRE_wmiS0_mDataInfo,
       CAN_FIRE_wmiS0_mDataLast,
       CAN_FIRE_wmiS0_mDataValid,
       CAN_FIRE_wmiS0_mFlag,
       CAN_FIRE_wmiS0_mReqInfo,
       CAN_FIRE_wmiS0_mReqLast,
       CAN_FIRE_wmiS0_mReset_n,
       CAN_FIRE_wmiS1_mAddr,
       CAN_FIRE_wmiS1_mAddrSpace,
       CAN_FIRE_wmiS1_mBurstLength,
       CAN_FIRE_wmiS1_mCmd,
       CAN_FIRE_wmiS1_mData,
       CAN_FIRE_wmiS1_mDataByteEn,
       CAN_FIRE_wmiS1_mDataInfo,
       CAN_FIRE_wmiS1_mDataLast,
       CAN_FIRE_wmiS1_mDataValid,
       CAN_FIRE_wmiS1_mFlag,
       CAN_FIRE_wmiS1_mReqInfo,
       CAN_FIRE_wmiS1_mReqLast,
       CAN_FIRE_wmiS1_mReset_n,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerRequest_4,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_ClientServerResponse_4,
       WILL_FIRE_RL_chomp_rogue,
       WILL_FIRE_RL_itc0_send_time,
       WILL_FIRE_RL_itc0_wti_sThreadBusy_reg,
       WILL_FIRE_RL_itc1_send_time,
       WILL_FIRE_RL_itc1_wti_sThreadBusy_reg,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mAddrConnect_1,
       WILL_FIRE_RL_mAddrSConnect,
       WILL_FIRE_RL_mAddrSConnect_1,
       WILL_FIRE_RL_mBEConnect,
       WILL_FIRE_RL_mBEConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mFlagConnect,
       WILL_FIRE_RL_mFlagConnect_1,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_reqConnect,
       WILL_FIRE_RL_reqConnect_1,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sDataConnect_1,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sFlagConnect_1,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRespConnect_1,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_gps_ppsSyncIn,
       WILL_FIRE_server_request_put,
       WILL_FIRE_server_response_get,
       WILL_FIRE_switch,
       WILL_FIRE_wci_m_0_sData,
       WILL_FIRE_wci_m_0_sFlag,
       WILL_FIRE_wci_m_0_sResp,
       WILL_FIRE_wci_m_0_sThreadBusy,
       WILL_FIRE_wci_m_10_sData,
       WILL_FIRE_wci_m_10_sFlag,
       WILL_FIRE_wci_m_10_sResp,
       WILL_FIRE_wci_m_10_sThreadBusy,
       WILL_FIRE_wci_m_11_sData,
       WILL_FIRE_wci_m_11_sFlag,
       WILL_FIRE_wci_m_11_sResp,
       WILL_FIRE_wci_m_11_sThreadBusy,
       WILL_FIRE_wci_m_12_sData,
       WILL_FIRE_wci_m_12_sFlag,
       WILL_FIRE_wci_m_12_sResp,
       WILL_FIRE_wci_m_12_sThreadBusy,
       WILL_FIRE_wci_m_1_sData,
       WILL_FIRE_wci_m_1_sFlag,
       WILL_FIRE_wci_m_1_sResp,
       WILL_FIRE_wci_m_1_sThreadBusy,
       WILL_FIRE_wci_m_2_sData,
       WILL_FIRE_wci_m_2_sFlag,
       WILL_FIRE_wci_m_2_sResp,
       WILL_FIRE_wci_m_2_sThreadBusy,
       WILL_FIRE_wci_m_3_sData,
       WILL_FIRE_wci_m_3_sFlag,
       WILL_FIRE_wci_m_3_sResp,
       WILL_FIRE_wci_m_3_sThreadBusy,
       WILL_FIRE_wci_m_4_sData,
       WILL_FIRE_wci_m_4_sFlag,
       WILL_FIRE_wci_m_4_sResp,
       WILL_FIRE_wci_m_4_sThreadBusy,
       WILL_FIRE_wci_m_5_sData,
       WILL_FIRE_wci_m_5_sFlag,
       WILL_FIRE_wci_m_5_sResp,
       WILL_FIRE_wci_m_5_sThreadBusy,
       WILL_FIRE_wci_m_6_sData,
       WILL_FIRE_wci_m_6_sFlag,
       WILL_FIRE_wci_m_6_sResp,
       WILL_FIRE_wci_m_6_sThreadBusy,
       WILL_FIRE_wci_m_7_sData,
       WILL_FIRE_wci_m_7_sFlag,
       WILL_FIRE_wci_m_7_sResp,
       WILL_FIRE_wci_m_7_sThreadBusy,
       WILL_FIRE_wci_m_8_sData,
       WILL_FIRE_wci_m_8_sFlag,
       WILL_FIRE_wci_m_8_sResp,
       WILL_FIRE_wci_m_8_sThreadBusy,
       WILL_FIRE_wci_m_9_sData,
       WILL_FIRE_wci_m_9_sFlag,
       WILL_FIRE_wci_m_9_sResp,
       WILL_FIRE_wci_m_9_sThreadBusy,
       WILL_FIRE_wmiS0_mAddr,
       WILL_FIRE_wmiS0_mAddrSpace,
       WILL_FIRE_wmiS0_mBurstLength,
       WILL_FIRE_wmiS0_mCmd,
       WILL_FIRE_wmiS0_mData,
       WILL_FIRE_wmiS0_mDataByteEn,
       WILL_FIRE_wmiS0_mDataInfo,
       WILL_FIRE_wmiS0_mDataLast,
       WILL_FIRE_wmiS0_mDataValid,
       WILL_FIRE_wmiS0_mFlag,
       WILL_FIRE_wmiS0_mReqInfo,
       WILL_FIRE_wmiS0_mReqLast,
       WILL_FIRE_wmiS0_mReset_n,
       WILL_FIRE_wmiS1_mAddr,
       WILL_FIRE_wmiS1_mAddrSpace,
       WILL_FIRE_wmiS1_mBurstLength,
       WILL_FIRE_wmiS1_mCmd,
       WILL_FIRE_wmiS1_mData,
       WILL_FIRE_wmiS1_mDataByteEn,
       WILL_FIRE_wmiS1_mDataInfo,
       WILL_FIRE_wmiS1_mDataLast,
       WILL_FIRE_wmiS1_mDataValid,
       WILL_FIRE_wmiS1_mFlag,
       WILL_FIRE_wmiS1_mReqInfo,
       WILL_FIRE_wmiS1_mReqLast,
       WILL_FIRE_wmiS1_mReset_n;

  // remaining internal signals
  reg [63 : 0] v__h5423;
  wire [15 : 0] pciDevice_BITS_15_TO_3_6_CONCAT_0___d92,
		pciDevice_BITS_15_TO_3_6_CONCAT_1___d93;

  // output resets
  assign RST_N_wci_m_0_mReset_n = cp$RST_N_wci_Vm_0_mReset_n ;
  assign RST_N_wci_m_2_mReset_n = cp$RST_N_wci_Vm_2_mReset_n ;
  assign RST_N_wci_m_1_mReset_n = cp$RST_N_wci_Vm_1_mReset_n ;
  assign RST_N_wci_m_4_mReset_n = cp$RST_N_wci_Vm_4_mReset_n ;
  assign RST_N_wci_m_3_mReset_n = cp$RST_N_wci_Vm_3_mReset_n ;
  assign RST_N_wci_m_5_mReset_n = cp$RST_N_wci_Vm_5_mReset_n ;
  assign RST_N_wci_m_6_mReset_n = cp$RST_N_wci_Vm_6_mReset_n ;
  assign RST_N_wci_m_8_mReset_n = cp$RST_N_wci_Vm_8_mReset_n ;
  assign RST_N_wci_m_7_mReset_n = cp$RST_N_wci_Vm_7_mReset_n ;
  assign RST_N_wci_m_10_mReset_n = cp$RST_N_wci_Vm_10_mReset_n ;
  assign RST_N_wci_m_9_mReset_n = cp$RST_N_wci_Vm_9_mReset_n ;
  assign RST_N_wci_m_12_mReset_n = cp$RST_N_wci_Vm_12_mReset_n ;
  assign RST_N_wci_m_11_mReset_n = cp$RST_N_wci_Vm_11_mReset_n ;

  // action method server_request_put
  assign RDY_server_request_put = sm0$RDY_s_request_put ;
  assign CAN_FIRE_server_request_put = sm0$RDY_s_request_put ;
  assign WILL_FIRE_server_request_put = EN_server_request_put ;

  // actionvalue method server_response_get
  assign server_response_get = sm0$s_response_get ;
  assign RDY_server_response_get = sm0$RDY_s_response_get ;
  assign CAN_FIRE_server_response_get = sm0$RDY_s_response_get ;
  assign WILL_FIRE_server_response_get = EN_server_response_get ;

  // value method led
  assign led = cp$led ;

  // action method switch
  assign CAN_FIRE_switch = 1'd1 ;
  assign WILL_FIRE_switch = 1'd1 ;

  // value method wci_m_0_mCmd
  assign wci_m_0_MCmd = cp$wci_Vm_0_MCmd ;

  // value method wci_m_0_mAddrSpace
  assign wci_m_0_MAddrSpace = cp$wci_Vm_0_MAddrSpace ;

  // value method wci_m_0_mByteEn
  assign wci_m_0_MByteEn = cp$wci_Vm_0_MByteEn ;

  // value method wci_m_0_mAddr
  assign wci_m_0_MAddr = cp$wci_Vm_0_MAddr ;

  // value method wci_m_0_mData
  assign wci_m_0_MData = cp$wci_Vm_0_MData ;

  // action method wci_m_0_sResp
  assign CAN_FIRE_wci_m_0_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sResp = 1'd1 ;

  // action method wci_m_0_sData
  assign CAN_FIRE_wci_m_0_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sData = 1'd1 ;

  // action method wci_m_0_sThreadBusy
  assign CAN_FIRE_wci_m_0_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sThreadBusy = wci_m_0_SThreadBusy ;

  // action method wci_m_0_sFlag
  assign CAN_FIRE_wci_m_0_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sFlag = 1'd1 ;

  // value method wci_m_0_mFlag
  assign wci_m_0_MFlag = cp$wci_Vm_0_MFlag ;

  // value method wci_m_1_mCmd
  assign wci_m_1_MCmd = cp$wci_Vm_1_MCmd ;

  // value method wci_m_1_mAddrSpace
  assign wci_m_1_MAddrSpace = cp$wci_Vm_1_MAddrSpace ;

  // value method wci_m_1_mByteEn
  assign wci_m_1_MByteEn = cp$wci_Vm_1_MByteEn ;

  // value method wci_m_1_mAddr
  assign wci_m_1_MAddr = cp$wci_Vm_1_MAddr ;

  // value method wci_m_1_mData
  assign wci_m_1_MData = cp$wci_Vm_1_MData ;

  // action method wci_m_1_sResp
  assign CAN_FIRE_wci_m_1_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sResp = 1'd1 ;

  // action method wci_m_1_sData
  assign CAN_FIRE_wci_m_1_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sData = 1'd1 ;

  // action method wci_m_1_sThreadBusy
  assign CAN_FIRE_wci_m_1_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sThreadBusy = wci_m_1_SThreadBusy ;

  // action method wci_m_1_sFlag
  assign CAN_FIRE_wci_m_1_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sFlag = 1'd1 ;

  // value method wci_m_1_mFlag
  assign wci_m_1_MFlag = cp$wci_Vm_1_MFlag ;

  // value method wci_m_2_mCmd
  assign wci_m_2_MCmd = cp$wci_Vm_2_MCmd ;

  // value method wci_m_2_mAddrSpace
  assign wci_m_2_MAddrSpace = cp$wci_Vm_2_MAddrSpace ;

  // value method wci_m_2_mByteEn
  assign wci_m_2_MByteEn = cp$wci_Vm_2_MByteEn ;

  // value method wci_m_2_mAddr
  assign wci_m_2_MAddr = cp$wci_Vm_2_MAddr ;

  // value method wci_m_2_mData
  assign wci_m_2_MData = cp$wci_Vm_2_MData ;

  // action method wci_m_2_sResp
  assign CAN_FIRE_wci_m_2_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sResp = 1'd1 ;

  // action method wci_m_2_sData
  assign CAN_FIRE_wci_m_2_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sData = 1'd1 ;

  // action method wci_m_2_sThreadBusy
  assign CAN_FIRE_wci_m_2_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sThreadBusy = wci_m_2_SThreadBusy ;

  // action method wci_m_2_sFlag
  assign CAN_FIRE_wci_m_2_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sFlag = 1'd1 ;

  // value method wci_m_2_mFlag
  assign wci_m_2_MFlag = cp$wci_Vm_2_MFlag ;

  // value method wci_m_3_mCmd
  assign wci_m_3_MCmd = cp$wci_Vm_3_MCmd ;

  // value method wci_m_3_mAddrSpace
  assign wci_m_3_MAddrSpace = cp$wci_Vm_3_MAddrSpace ;

  // value method wci_m_3_mByteEn
  assign wci_m_3_MByteEn = cp$wci_Vm_3_MByteEn ;

  // value method wci_m_3_mAddr
  assign wci_m_3_MAddr = cp$wci_Vm_3_MAddr ;

  // value method wci_m_3_mData
  assign wci_m_3_MData = cp$wci_Vm_3_MData ;

  // action method wci_m_3_sResp
  assign CAN_FIRE_wci_m_3_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sResp = 1'd1 ;

  // action method wci_m_3_sData
  assign CAN_FIRE_wci_m_3_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sData = 1'd1 ;

  // action method wci_m_3_sThreadBusy
  assign CAN_FIRE_wci_m_3_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sThreadBusy = wci_m_3_SThreadBusy ;

  // action method wci_m_3_sFlag
  assign CAN_FIRE_wci_m_3_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sFlag = 1'd1 ;

  // value method wci_m_3_mFlag
  assign wci_m_3_MFlag = cp$wci_Vm_3_MFlag ;

  // value method wci_m_4_mCmd
  assign wci_m_4_MCmd = cp$wci_Vm_4_MCmd ;

  // value method wci_m_4_mAddrSpace
  assign wci_m_4_MAddrSpace = cp$wci_Vm_4_MAddrSpace ;

  // value method wci_m_4_mByteEn
  assign wci_m_4_MByteEn = cp$wci_Vm_4_MByteEn ;

  // value method wci_m_4_mAddr
  assign wci_m_4_MAddr = cp$wci_Vm_4_MAddr ;

  // value method wci_m_4_mData
  assign wci_m_4_MData = cp$wci_Vm_4_MData ;

  // action method wci_m_4_sResp
  assign CAN_FIRE_wci_m_4_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sResp = 1'd1 ;

  // action method wci_m_4_sData
  assign CAN_FIRE_wci_m_4_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sData = 1'd1 ;

  // action method wci_m_4_sThreadBusy
  assign CAN_FIRE_wci_m_4_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sThreadBusy = wci_m_4_SThreadBusy ;

  // action method wci_m_4_sFlag
  assign CAN_FIRE_wci_m_4_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sFlag = 1'd1 ;

  // value method wci_m_4_mFlag
  assign wci_m_4_MFlag = cp$wci_Vm_4_MFlag ;

  // value method wci_m_5_mCmd
  assign wci_m_5_MCmd = cp$wci_Vm_5_MCmd ;

  // value method wci_m_5_mAddrSpace
  assign wci_m_5_MAddrSpace = cp$wci_Vm_5_MAddrSpace ;

  // value method wci_m_5_mByteEn
  assign wci_m_5_MByteEn = cp$wci_Vm_5_MByteEn ;

  // value method wci_m_5_mAddr
  assign wci_m_5_MAddr = cp$wci_Vm_5_MAddr ;

  // value method wci_m_5_mData
  assign wci_m_5_MData = cp$wci_Vm_5_MData ;

  // action method wci_m_5_sResp
  assign CAN_FIRE_wci_m_5_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sResp = 1'd1 ;

  // action method wci_m_5_sData
  assign CAN_FIRE_wci_m_5_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sData = 1'd1 ;

  // action method wci_m_5_sThreadBusy
  assign CAN_FIRE_wci_m_5_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sThreadBusy = wci_m_5_SThreadBusy ;

  // action method wci_m_5_sFlag
  assign CAN_FIRE_wci_m_5_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sFlag = 1'd1 ;

  // value method wci_m_5_mFlag
  assign wci_m_5_MFlag = cp$wci_Vm_5_MFlag ;

  // value method wci_m_6_mCmd
  assign wci_m_6_MCmd = cp$wci_Vm_6_MCmd ;

  // value method wci_m_6_mAddrSpace
  assign wci_m_6_MAddrSpace = cp$wci_Vm_6_MAddrSpace ;

  // value method wci_m_6_mByteEn
  assign wci_m_6_MByteEn = cp$wci_Vm_6_MByteEn ;

  // value method wci_m_6_mAddr
  assign wci_m_6_MAddr = cp$wci_Vm_6_MAddr ;

  // value method wci_m_6_mData
  assign wci_m_6_MData = cp$wci_Vm_6_MData ;

  // action method wci_m_6_sResp
  assign CAN_FIRE_wci_m_6_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sResp = 1'd1 ;

  // action method wci_m_6_sData
  assign CAN_FIRE_wci_m_6_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sData = 1'd1 ;

  // action method wci_m_6_sThreadBusy
  assign CAN_FIRE_wci_m_6_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sThreadBusy = wci_m_6_SThreadBusy ;

  // action method wci_m_6_sFlag
  assign CAN_FIRE_wci_m_6_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sFlag = 1'd1 ;

  // value method wci_m_6_mFlag
  assign wci_m_6_MFlag = cp$wci_Vm_6_MFlag ;

  // value method wci_m_7_mCmd
  assign wci_m_7_MCmd = cp$wci_Vm_7_MCmd ;

  // value method wci_m_7_mAddrSpace
  assign wci_m_7_MAddrSpace = cp$wci_Vm_7_MAddrSpace ;

  // value method wci_m_7_mByteEn
  assign wci_m_7_MByteEn = cp$wci_Vm_7_MByteEn ;

  // value method wci_m_7_mAddr
  assign wci_m_7_MAddr = cp$wci_Vm_7_MAddr ;

  // value method wci_m_7_mData
  assign wci_m_7_MData = cp$wci_Vm_7_MData ;

  // action method wci_m_7_sResp
  assign CAN_FIRE_wci_m_7_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sResp = 1'd1 ;

  // action method wci_m_7_sData
  assign CAN_FIRE_wci_m_7_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sData = 1'd1 ;

  // action method wci_m_7_sThreadBusy
  assign CAN_FIRE_wci_m_7_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sThreadBusy = wci_m_7_SThreadBusy ;

  // action method wci_m_7_sFlag
  assign CAN_FIRE_wci_m_7_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sFlag = 1'd1 ;

  // value method wci_m_7_mFlag
  assign wci_m_7_MFlag = cp$wci_Vm_7_MFlag ;

  // value method wci_m_8_mCmd
  assign wci_m_8_MCmd = cp$wci_Vm_8_MCmd ;

  // value method wci_m_8_mAddrSpace
  assign wci_m_8_MAddrSpace = cp$wci_Vm_8_MAddrSpace ;

  // value method wci_m_8_mByteEn
  assign wci_m_8_MByteEn = cp$wci_Vm_8_MByteEn ;

  // value method wci_m_8_mAddr
  assign wci_m_8_MAddr = cp$wci_Vm_8_MAddr ;

  // value method wci_m_8_mData
  assign wci_m_8_MData = cp$wci_Vm_8_MData ;

  // action method wci_m_8_sResp
  assign CAN_FIRE_wci_m_8_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sResp = 1'd1 ;

  // action method wci_m_8_sData
  assign CAN_FIRE_wci_m_8_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sData = 1'd1 ;

  // action method wci_m_8_sThreadBusy
  assign CAN_FIRE_wci_m_8_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sThreadBusy = wci_m_8_SThreadBusy ;

  // action method wci_m_8_sFlag
  assign CAN_FIRE_wci_m_8_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sFlag = 1'd1 ;

  // value method wci_m_8_mFlag
  assign wci_m_8_MFlag = cp$wci_Vm_8_MFlag ;

  // value method wci_m_9_mCmd
  assign wci_m_9_MCmd = cp$wci_Vm_9_MCmd ;

  // value method wci_m_9_mAddrSpace
  assign wci_m_9_MAddrSpace = cp$wci_Vm_9_MAddrSpace ;

  // value method wci_m_9_mByteEn
  assign wci_m_9_MByteEn = cp$wci_Vm_9_MByteEn ;

  // value method wci_m_9_mAddr
  assign wci_m_9_MAddr = cp$wci_Vm_9_MAddr ;

  // value method wci_m_9_mData
  assign wci_m_9_MData = cp$wci_Vm_9_MData ;

  // action method wci_m_9_sResp
  assign CAN_FIRE_wci_m_9_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sResp = 1'd1 ;

  // action method wci_m_9_sData
  assign CAN_FIRE_wci_m_9_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sData = 1'd1 ;

  // action method wci_m_9_sThreadBusy
  assign CAN_FIRE_wci_m_9_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sThreadBusy = wci_m_9_SThreadBusy ;

  // action method wci_m_9_sFlag
  assign CAN_FIRE_wci_m_9_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sFlag = 1'd1 ;

  // value method wci_m_9_mFlag
  assign wci_m_9_MFlag = cp$wci_Vm_9_MFlag ;

  // value method wci_m_10_mCmd
  assign wci_m_10_MCmd = cp$wci_Vm_10_MCmd ;

  // value method wci_m_10_mAddrSpace
  assign wci_m_10_MAddrSpace = cp$wci_Vm_10_MAddrSpace ;

  // value method wci_m_10_mByteEn
  assign wci_m_10_MByteEn = cp$wci_Vm_10_MByteEn ;

  // value method wci_m_10_mAddr
  assign wci_m_10_MAddr = cp$wci_Vm_10_MAddr ;

  // value method wci_m_10_mData
  assign wci_m_10_MData = cp$wci_Vm_10_MData ;

  // action method wci_m_10_sResp
  assign CAN_FIRE_wci_m_10_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sResp = 1'd1 ;

  // action method wci_m_10_sData
  assign CAN_FIRE_wci_m_10_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sData = 1'd1 ;

  // action method wci_m_10_sThreadBusy
  assign CAN_FIRE_wci_m_10_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sThreadBusy = wci_m_10_SThreadBusy ;

  // action method wci_m_10_sFlag
  assign CAN_FIRE_wci_m_10_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sFlag = 1'd1 ;

  // value method wci_m_10_mFlag
  assign wci_m_10_MFlag = cp$wci_Vm_10_MFlag ;

  // value method wci_m_11_mCmd
  assign wci_m_11_MCmd = cp$wci_Vm_11_MCmd ;

  // value method wci_m_11_mAddrSpace
  assign wci_m_11_MAddrSpace = cp$wci_Vm_11_MAddrSpace ;

  // value method wci_m_11_mByteEn
  assign wci_m_11_MByteEn = cp$wci_Vm_11_MByteEn ;

  // value method wci_m_11_mAddr
  assign wci_m_11_MAddr = cp$wci_Vm_11_MAddr ;

  // value method wci_m_11_mData
  assign wci_m_11_MData = cp$wci_Vm_11_MData ;

  // action method wci_m_11_sResp
  assign CAN_FIRE_wci_m_11_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sResp = 1'd1 ;

  // action method wci_m_11_sData
  assign CAN_FIRE_wci_m_11_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sData = 1'd1 ;

  // action method wci_m_11_sThreadBusy
  assign CAN_FIRE_wci_m_11_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sThreadBusy = wci_m_11_SThreadBusy ;

  // action method wci_m_11_sFlag
  assign CAN_FIRE_wci_m_11_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sFlag = 1'd1 ;

  // value method wci_m_11_mFlag
  assign wci_m_11_MFlag = cp$wci_Vm_11_MFlag ;

  // value method wci_m_12_mCmd
  assign wci_m_12_MCmd = cp$wci_Vm_12_MCmd ;

  // value method wci_m_12_mAddrSpace
  assign wci_m_12_MAddrSpace = cp$wci_Vm_12_MAddrSpace ;

  // value method wci_m_12_mByteEn
  assign wci_m_12_MByteEn = cp$wci_Vm_12_MByteEn ;

  // value method wci_m_12_mAddr
  assign wci_m_12_MAddr = cp$wci_Vm_12_MAddr ;

  // value method wci_m_12_mData
  assign wci_m_12_MData = cp$wci_Vm_12_MData ;

  // action method wci_m_12_sResp
  assign CAN_FIRE_wci_m_12_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sResp = 1'd1 ;

  // action method wci_m_12_sData
  assign CAN_FIRE_wci_m_12_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sData = 1'd1 ;

  // action method wci_m_12_sThreadBusy
  assign CAN_FIRE_wci_m_12_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sThreadBusy = wci_m_12_SThreadBusy ;

  // action method wci_m_12_sFlag
  assign CAN_FIRE_wci_m_12_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sFlag = 1'd1 ;

  // value method wci_m_12_mFlag
  assign wci_m_12_MFlag = cp$wci_Vm_12_MFlag ;

  // action method wmiS0_mCmd
  assign CAN_FIRE_wmiS0_mCmd = 1'd1 ;
  assign WILL_FIRE_wmiS0_mCmd = 1'd1 ;

  // action method wmiS0_mReqLast
  assign CAN_FIRE_wmiS0_mReqLast = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReqLast = wmiS0_MReqLast ;

  // action method wmiS0_mReqInfo
  assign CAN_FIRE_wmiS0_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReqInfo = 1'd1 ;

  // action method wmiS0_mAddrSpace
  assign CAN_FIRE_wmiS0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wmiS0_mAddrSpace = 1'd1 ;

  // action method wmiS0_mAddr
  assign CAN_FIRE_wmiS0_mAddr = 1'd1 ;
  assign WILL_FIRE_wmiS0_mAddr = 1'd1 ;

  // action method wmiS0_mBurstLength
  assign CAN_FIRE_wmiS0_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wmiS0_mBurstLength = 1'd1 ;

  // action method wmiS0_mDataValid
  assign CAN_FIRE_wmiS0_mDataValid = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataValid = wmiS0_MDataValid ;

  // action method wmiS0_mDataLast
  assign CAN_FIRE_wmiS0_mDataLast = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataLast = wmiS0_MDataLast ;

  // action method wmiS0_mData
  assign CAN_FIRE_wmiS0_mData = 1'd1 ;
  assign WILL_FIRE_wmiS0_mData = 1'd1 ;

  // action method wmiS0_mDataInfo
  assign CAN_FIRE_wmiS0_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataInfo = 1'd1 ;

  // action method wmiS0_mDataByteEn
  assign CAN_FIRE_wmiS0_mDataByteEn = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataByteEn = 1'd1 ;

  // value method wmiS0_sResp
  assign wmiS0_SResp = dp0$wmiS1_SResp ;

  // value method wmiS0_sData
  assign wmiS0_SData = dp0$wmiS1_SData ;

  // value method wmiS0_sThreadBusy
  assign wmiS0_SThreadBusy = dp0$wmiS1_SThreadBusy ;

  // value method wmiS0_sDataThreadBusy
  assign wmiS0_SDataThreadBusy = dp0$wmiS1_SDataThreadBusy ;

  // value method wmiS0_sRespLast
  assign wmiS0_SRespLast = dp0$wmiS1_SRespLast ;

  // value method wmiS0_sFlag
  assign wmiS0_SFlag = dp0$wmiS1_SFlag ;

  // action method wmiS0_mFlag
  assign CAN_FIRE_wmiS0_mFlag = 1'd1 ;
  assign WILL_FIRE_wmiS0_mFlag = 1'd1 ;

  // value method wmiS0_sReset_n
  assign wmiS0_SReset_n = dp0$wmiS1_SReset_n ;

  // action method wmiS0_mReset_n
  assign CAN_FIRE_wmiS0_mReset_n = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReset_n = wmiS0_MReset_n ;

  // action method wmiS1_mCmd
  assign CAN_FIRE_wmiS1_mCmd = 1'd1 ;
  assign WILL_FIRE_wmiS1_mCmd = 1'd1 ;

  // action method wmiS1_mReqLast
  assign CAN_FIRE_wmiS1_mReqLast = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReqLast = wmiS1_MReqLast ;

  // action method wmiS1_mReqInfo
  assign CAN_FIRE_wmiS1_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReqInfo = 1'd1 ;

  // action method wmiS1_mAddrSpace
  assign CAN_FIRE_wmiS1_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wmiS1_mAddrSpace = 1'd1 ;

  // action method wmiS1_mAddr
  assign CAN_FIRE_wmiS1_mAddr = 1'd1 ;
  assign WILL_FIRE_wmiS1_mAddr = 1'd1 ;

  // action method wmiS1_mBurstLength
  assign CAN_FIRE_wmiS1_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wmiS1_mBurstLength = 1'd1 ;

  // action method wmiS1_mDataValid
  assign CAN_FIRE_wmiS1_mDataValid = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataValid = wmiS1_MDataValid ;

  // action method wmiS1_mDataLast
  assign CAN_FIRE_wmiS1_mDataLast = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataLast = wmiS1_MDataLast ;

  // action method wmiS1_mData
  assign CAN_FIRE_wmiS1_mData = 1'd1 ;
  assign WILL_FIRE_wmiS1_mData = 1'd1 ;

  // action method wmiS1_mDataInfo
  assign CAN_FIRE_wmiS1_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataInfo = 1'd1 ;

  // action method wmiS1_mDataByteEn
  assign CAN_FIRE_wmiS1_mDataByteEn = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataByteEn = 1'd1 ;

  // value method wmiS1_sResp
  assign wmiS1_SResp = dp1$wmiS1_SResp ;

  // value method wmiS1_sData
  assign wmiS1_SData = dp1$wmiS1_SData ;

  // value method wmiS1_sThreadBusy
  assign wmiS1_SThreadBusy = dp1$wmiS1_SThreadBusy ;

  // value method wmiS1_sDataThreadBusy
  assign wmiS1_SDataThreadBusy = dp1$wmiS1_SDataThreadBusy ;

  // value method wmiS1_sRespLast
  assign wmiS1_SRespLast = dp1$wmiS1_SRespLast ;

  // value method wmiS1_sFlag
  assign wmiS1_SFlag = dp1$wmiS1_SFlag ;

  // action method wmiS1_mFlag
  assign CAN_FIRE_wmiS1_mFlag = 1'd1 ;
  assign WILL_FIRE_wmiS1_mFlag = 1'd1 ;

  // value method wmiS1_sReset_n
  assign wmiS1_SReset_n = dp1$wmiS1_SReset_n ;

  // action method wmiS1_mReset_n
  assign CAN_FIRE_wmiS1_mReset_n = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReset_n = wmiS1_MReset_n ;

  // value method cpNow
  assign cpNow = cp$cpNow ;
  assign RDY_cpNow = 1'd1 ;

  // action method gps_ppsSyncIn
  assign CAN_FIRE_gps_ppsSyncIn = 1'd1 ;
  assign WILL_FIRE_gps_ppsSyncIn = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = cp$gps_ppsSyncOut ;

  // submodule cp
  mkOCCP cp(.pciDevice(pciDevice),
	    .CLK_sys0_clk(CLK_sys0_clk),
	    .RST_N_sys0_rst(RST_N_sys0_rst),
	    .CLK(CLK),
	    .RST_N(RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .led(cp$led),
	    .wci_Vm_0_MCmd(cp$wci_Vm_0_MCmd),
	    .wci_Vm_0_MAddrSpace(cp$wci_Vm_0_MAddrSpace),
	    .wci_Vm_0_MByteEn(cp$wci_Vm_0_MByteEn),
	    .wci_Vm_0_MAddr(cp$wci_Vm_0_MAddr),
	    .wci_Vm_0_MData(cp$wci_Vm_0_MData),
	    .wci_Vm_0_MFlag(cp$wci_Vm_0_MFlag),
	    .wci_Vm_1_MCmd(cp$wci_Vm_1_MCmd),
	    .wci_Vm_1_MAddrSpace(cp$wci_Vm_1_MAddrSpace),
	    .wci_Vm_1_MByteEn(cp$wci_Vm_1_MByteEn),
	    .wci_Vm_1_MAddr(cp$wci_Vm_1_MAddr),
	    .wci_Vm_1_MData(cp$wci_Vm_1_MData),
	    .wci_Vm_1_MFlag(cp$wci_Vm_1_MFlag),
	    .wci_Vm_2_MCmd(cp$wci_Vm_2_MCmd),
	    .wci_Vm_2_MAddrSpace(cp$wci_Vm_2_MAddrSpace),
	    .wci_Vm_2_MByteEn(cp$wci_Vm_2_MByteEn),
	    .wci_Vm_2_MAddr(cp$wci_Vm_2_MAddr),
	    .wci_Vm_2_MData(cp$wci_Vm_2_MData),
	    .wci_Vm_2_MFlag(cp$wci_Vm_2_MFlag),
	    .wci_Vm_3_MCmd(cp$wci_Vm_3_MCmd),
	    .wci_Vm_3_MAddrSpace(cp$wci_Vm_3_MAddrSpace),
	    .wci_Vm_3_MByteEn(cp$wci_Vm_3_MByteEn),
	    .wci_Vm_3_MAddr(cp$wci_Vm_3_MAddr),
	    .wci_Vm_3_MData(cp$wci_Vm_3_MData),
	    .wci_Vm_3_MFlag(cp$wci_Vm_3_MFlag),
	    .wci_Vm_4_MCmd(cp$wci_Vm_4_MCmd),
	    .wci_Vm_4_MAddrSpace(cp$wci_Vm_4_MAddrSpace),
	    .wci_Vm_4_MByteEn(cp$wci_Vm_4_MByteEn),
	    .wci_Vm_4_MAddr(cp$wci_Vm_4_MAddr),
	    .wci_Vm_4_MData(cp$wci_Vm_4_MData),
	    .wci_Vm_4_MFlag(cp$wci_Vm_4_MFlag),
	    .wci_Vm_5_MCmd(cp$wci_Vm_5_MCmd),
	    .wci_Vm_5_MAddrSpace(cp$wci_Vm_5_MAddrSpace),
	    .wci_Vm_5_MByteEn(cp$wci_Vm_5_MByteEn),
	    .wci_Vm_5_MAddr(cp$wci_Vm_5_MAddr),
	    .wci_Vm_5_MData(cp$wci_Vm_5_MData),
	    .wci_Vm_5_MFlag(cp$wci_Vm_5_MFlag),
	    .wci_Vm_6_MCmd(cp$wci_Vm_6_MCmd),
	    .wci_Vm_6_MAddrSpace(cp$wci_Vm_6_MAddrSpace),
	    .wci_Vm_6_MByteEn(cp$wci_Vm_6_MByteEn),
	    .wci_Vm_6_MAddr(cp$wci_Vm_6_MAddr),
	    .wci_Vm_6_MData(cp$wci_Vm_6_MData),
	    .wci_Vm_6_MFlag(cp$wci_Vm_6_MFlag),
	    .wci_Vm_7_MCmd(cp$wci_Vm_7_MCmd),
	    .wci_Vm_7_MAddrSpace(cp$wci_Vm_7_MAddrSpace),
	    .wci_Vm_7_MByteEn(cp$wci_Vm_7_MByteEn),
	    .wci_Vm_7_MAddr(cp$wci_Vm_7_MAddr),
	    .wci_Vm_7_MData(cp$wci_Vm_7_MData),
	    .wci_Vm_7_MFlag(cp$wci_Vm_7_MFlag),
	    .wci_Vm_8_MCmd(cp$wci_Vm_8_MCmd),
	    .wci_Vm_8_MAddrSpace(cp$wci_Vm_8_MAddrSpace),
	    .wci_Vm_8_MByteEn(cp$wci_Vm_8_MByteEn),
	    .wci_Vm_8_MAddr(cp$wci_Vm_8_MAddr),
	    .wci_Vm_8_MData(cp$wci_Vm_8_MData),
	    .wci_Vm_8_MFlag(cp$wci_Vm_8_MFlag),
	    .wci_Vm_9_MCmd(cp$wci_Vm_9_MCmd),
	    .wci_Vm_9_MAddrSpace(cp$wci_Vm_9_MAddrSpace),
	    .wci_Vm_9_MByteEn(cp$wci_Vm_9_MByteEn),
	    .wci_Vm_9_MAddr(cp$wci_Vm_9_MAddr),
	    .wci_Vm_9_MData(cp$wci_Vm_9_MData),
	    .wci_Vm_9_MFlag(cp$wci_Vm_9_MFlag),
	    .wci_Vm_10_MCmd(cp$wci_Vm_10_MCmd),
	    .wci_Vm_10_MAddrSpace(cp$wci_Vm_10_MAddrSpace),
	    .wci_Vm_10_MByteEn(cp$wci_Vm_10_MByteEn),
	    .wci_Vm_10_MAddr(cp$wci_Vm_10_MAddr),
	    .wci_Vm_10_MData(cp$wci_Vm_10_MData),
	    .wci_Vm_10_MFlag(cp$wci_Vm_10_MFlag),
	    .wci_Vm_11_MCmd(cp$wci_Vm_11_MCmd),
	    .wci_Vm_11_MAddrSpace(cp$wci_Vm_11_MAddrSpace),
	    .wci_Vm_11_MByteEn(cp$wci_Vm_11_MByteEn),
	    .wci_Vm_11_MAddr(cp$wci_Vm_11_MAddr),
	    .wci_Vm_11_MData(cp$wci_Vm_11_MData),
	    .wci_Vm_11_MFlag(cp$wci_Vm_11_MFlag),
	    .wci_Vm_12_MCmd(cp$wci_Vm_12_MCmd),
	    .wci_Vm_12_MAddrSpace(cp$wci_Vm_12_MAddrSpace),
	    .wci_Vm_12_MByteEn(cp$wci_Vm_12_MByteEn),
	    .wci_Vm_12_MAddr(cp$wci_Vm_12_MAddr),
	    .wci_Vm_12_MData(cp$wci_Vm_12_MData),
	    .wci_Vm_12_MFlag(cp$wci_Vm_12_MFlag),
	    .wci_Vm_13_MCmd(cp$wci_Vm_13_MCmd),
	    .wci_Vm_13_MAddrSpace(cp$wci_Vm_13_MAddrSpace),
	    .wci_Vm_13_MByteEn(cp$wci_Vm_13_MByteEn),
	    .wci_Vm_13_MAddr(cp$wci_Vm_13_MAddr),
	    .wci_Vm_13_MData(cp$wci_Vm_13_MData),
	    .wci_Vm_13_MFlag(cp$wci_Vm_13_MFlag),
	    .wci_Vm_14_MCmd(cp$wci_Vm_14_MCmd),
	    .wci_Vm_14_MAddrSpace(cp$wci_Vm_14_MAddrSpace),
	    .wci_Vm_14_MByteEn(cp$wci_Vm_14_MByteEn),
	    .wci_Vm_14_MAddr(cp$wci_Vm_14_MAddr),
	    .wci_Vm_14_MData(cp$wci_Vm_14_MData),
	    .wci_Vm_14_MFlag(cp$wci_Vm_14_MFlag),
	    .cpNow(cp$cpNow),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(cp$gps_ppsSyncOut),
	    .RST_N_wci_Vm_0_mReset_n(cp$RST_N_wci_Vm_0_mReset_n),
	    .RST_N_wci_Vm_1_mReset_n(cp$RST_N_wci_Vm_1_mReset_n),
	    .RST_N_wci_Vm_2_mReset_n(cp$RST_N_wci_Vm_2_mReset_n),
	    .RST_N_wci_Vm_3_mReset_n(cp$RST_N_wci_Vm_3_mReset_n),
	    .RST_N_wci_Vm_4_mReset_n(cp$RST_N_wci_Vm_4_mReset_n),
	    .RST_N_wci_Vm_5_mReset_n(cp$RST_N_wci_Vm_5_mReset_n),
	    .RST_N_wci_Vm_6_mReset_n(cp$RST_N_wci_Vm_6_mReset_n),
	    .RST_N_wci_Vm_7_mReset_n(cp$RST_N_wci_Vm_7_mReset_n),
	    .RST_N_wci_Vm_8_mReset_n(cp$RST_N_wci_Vm_8_mReset_n),
	    .RST_N_wci_Vm_9_mReset_n(cp$RST_N_wci_Vm_9_mReset_n),
	    .RST_N_wci_Vm_10_mReset_n(cp$RST_N_wci_Vm_10_mReset_n),
	    .RST_N_wci_Vm_11_mReset_n(cp$RST_N_wci_Vm_11_mReset_n),
	    .RST_N_wci_Vm_12_mReset_n(cp$RST_N_wci_Vm_12_mReset_n),
	    .RST_N_wci_Vm_13_mReset_n(cp$RST_N_wci_Vm_13_mReset_n),
	    .RST_N_wci_Vm_14_mReset_n(cp$RST_N_wci_Vm_14_mReset_n));

  // submodule dp0
  mkOCDP dp0(.pciDevice(pciDevice_BITS_15_TO_3_6_CONCAT_0___d92),
	     .CLK(CLK),
	     .RST_N(cp$RST_N_wci_Vm_13_mReset_n),
	     .server_request_put(dp0$server_request_put),
	     .wci_s_MAddr(dp0$wci_s_MAddr),
	     .wci_s_MAddrSpace(dp0$wci_s_MAddrSpace),
	     .wci_s_MByteEn(dp0$wci_s_MByteEn),
	     .wci_s_MCmd(dp0$wci_s_MCmd),
	     .wci_s_MData(dp0$wci_s_MData),
	     .wci_s_MFlag(dp0$wci_s_MFlag),
	     .wmiS1_MAddr(dp0$wmiS1_MAddr),
	     .wmiS1_MAddrSpace(dp0$wmiS1_MAddrSpace),
	     .wmiS1_MBurstLength(dp0$wmiS1_MBurstLength),
	     .wmiS1_MCmd(dp0$wmiS1_MCmd),
	     .wmiS1_MData(dp0$wmiS1_MData),
	     .wmiS1_MDataByteEn(dp0$wmiS1_MDataByteEn),
	     .wmiS1_MReqInfo(dp0$wmiS1_MReqInfo),
	     .wmiS1_arg_mFlag(dp0$wmiS1_arg_mFlag),
	     .wti_s_req(dp0$wti_s_req),
	     .wmiS1_MReqLast(dp0$wmiS1_MReqLast),
	     .wmiS1_MDataValid(dp0$wmiS1_MDataValid),
	     .wmiS1_MDataLast(dp0$wmiS1_MDataLast),
	     .wmiS1_MReset_n(dp0$wmiS1_MReset_n),
	     .EN_server_request_put(dp0$EN_server_request_put),
	     .EN_server_response_get(dp0$EN_server_response_get),
	     .wci_s_SResp(dp0$wci_s_SResp),
	     .wci_s_SData(dp0$wci_s_SData),
	     .wci_s_SThreadBusy(dp0$wci_s_SThreadBusy),
	     .wci_s_SFlag(dp0$wci_s_SFlag),
	     .wti_s_SThreadBusy(dp0$wti_s_SThreadBusy),
	     .wmiS1_SResp(dp0$wmiS1_SResp),
	     .wmiS1_SData(dp0$wmiS1_SData),
	     .wmiS1_SThreadBusy(dp0$wmiS1_SThreadBusy),
	     .wmiS1_SDataThreadBusy(dp0$wmiS1_SDataThreadBusy),
	     .wmiS1_SRespLast(dp0$wmiS1_SRespLast),
	     .wmiS1_SFlag(dp0$wmiS1_SFlag),
	     .wmiS1_SReset_n(dp0$wmiS1_SReset_n),
	     .RDY_server_request_put(dp0$RDY_server_request_put),
	     .server_response_get(dp0$server_response_get),
	     .RDY_server_response_get(dp0$RDY_server_response_get));

  // submodule dp1
  mkOCDP dp1(.pciDevice(pciDevice_BITS_15_TO_3_6_CONCAT_1___d93),
	     .CLK(CLK),
	     .RST_N(cp$RST_N_wci_Vm_14_mReset_n),
	     .server_request_put(dp1$server_request_put),
	     .wci_s_MAddr(dp1$wci_s_MAddr),
	     .wci_s_MAddrSpace(dp1$wci_s_MAddrSpace),
	     .wci_s_MByteEn(dp1$wci_s_MByteEn),
	     .wci_s_MCmd(dp1$wci_s_MCmd),
	     .wci_s_MData(dp1$wci_s_MData),
	     .wci_s_MFlag(dp1$wci_s_MFlag),
	     .wmiS1_MAddr(dp1$wmiS1_MAddr),
	     .wmiS1_MAddrSpace(dp1$wmiS1_MAddrSpace),
	     .wmiS1_MBurstLength(dp1$wmiS1_MBurstLength),
	     .wmiS1_MCmd(dp1$wmiS1_MCmd),
	     .wmiS1_MData(dp1$wmiS1_MData),
	     .wmiS1_MDataByteEn(dp1$wmiS1_MDataByteEn),
	     .wmiS1_MReqInfo(dp1$wmiS1_MReqInfo),
	     .wmiS1_arg_mFlag(dp1$wmiS1_arg_mFlag),
	     .wti_s_req(dp1$wti_s_req),
	     .wmiS1_MReqLast(dp1$wmiS1_MReqLast),
	     .wmiS1_MDataValid(dp1$wmiS1_MDataValid),
	     .wmiS1_MDataLast(dp1$wmiS1_MDataLast),
	     .wmiS1_MReset_n(dp1$wmiS1_MReset_n),
	     .EN_server_request_put(dp1$EN_server_request_put),
	     .EN_server_response_get(dp1$EN_server_response_get),
	     .wci_s_SResp(dp1$wci_s_SResp),
	     .wci_s_SData(dp1$wci_s_SData),
	     .wci_s_SThreadBusy(dp1$wci_s_SThreadBusy),
	     .wci_s_SFlag(dp1$wci_s_SFlag),
	     .wti_s_SThreadBusy(dp1$wti_s_SThreadBusy),
	     .wmiS1_SResp(dp1$wmiS1_SResp),
	     .wmiS1_SData(dp1$wmiS1_SData),
	     .wmiS1_SThreadBusy(dp1$wmiS1_SThreadBusy),
	     .wmiS1_SDataThreadBusy(dp1$wmiS1_SDataThreadBusy),
	     .wmiS1_SRespLast(dp1$wmiS1_SRespLast),
	     .wmiS1_SFlag(dp1$wmiS1_SFlag),
	     .wmiS1_SReset_n(dp1$wmiS1_SReset_n),
	     .RDY_server_request_put(dp1$RDY_server_request_put),
	     .server_response_get(dp1$server_response_get),
	     .RDY_server_response_get(dp1$RDY_server_response_get));

  // submodule itc0_now
  SyncRegister #(.width(32'd64), .init(64'd0)) itc0_now(.sCLK(CLK_sys0_clk),
							.dCLK(CLK),
							.sRST_N(RST_N_sys0_rst),
							.sD_IN(itc0_now$sD_IN),
							.sEN(itc0_now$sEN),
							.dD_OUT(itc0_now$dD_OUT),
							.sRDY(itc0_now$sRDY));

  // submodule itc1_now
  SyncRegister #(.width(32'd64), .init(64'd0)) itc1_now(.sCLK(CLK_sys0_clk),
							.dCLK(CLK),
							.sRST_N(RST_N_sys0_rst),
							.sD_IN(itc1_now$sD_IN),
							.sEN(itc1_now$sEN),
							.dD_OUT(itc1_now$dD_OUT),
							.sRDY(itc1_now$sRDY));

  // submodule sm0
  mkTLPSM sm0(.pfk(14'd1360),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm0$c0_response_put),
	      .c1_response_put(sm0$c1_response_put),
	      .s_request_put(sm0$s_request_put),
	      .EN_s_request_put(sm0$EN_s_request_put),
	      .EN_s_response_get(sm0$EN_s_response_get),
	      .EN_c0_request_get(sm0$EN_c0_request_get),
	      .EN_c0_response_put(sm0$EN_c0_response_put),
	      .EN_c1_request_get(sm0$EN_c1_request_get),
	      .EN_c1_response_put(sm0$EN_c1_response_put),
	      .RDY_s_request_put(sm0$RDY_s_request_put),
	      .s_response_get(sm0$s_response_get),
	      .RDY_s_response_get(sm0$RDY_s_response_get),
	      .c0_request_get(sm0$c0_request_get),
	      .RDY_c0_request_get(sm0$RDY_c0_request_get),
	      .RDY_c0_response_put(sm0$RDY_c0_response_put),
	      .c1_request_get(sm0$c1_request_get),
	      .RDY_c1_request_get(sm0$RDY_c1_request_get),
	      .RDY_c1_response_put(sm0$RDY_c1_response_put));

  // submodule sm1
  mkTLPSM sm1(.pfk(14'd9488),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm1$c0_response_put),
	      .c1_response_put(sm1$c1_response_put),
	      .s_request_put(sm1$s_request_put),
	      .EN_s_request_put(sm1$EN_s_request_put),
	      .EN_s_response_get(sm1$EN_s_response_get),
	      .EN_c0_request_get(sm1$EN_c0_request_get),
	      .EN_c0_response_put(sm1$EN_c0_response_put),
	      .EN_c1_request_get(sm1$EN_c1_request_get),
	      .EN_c1_response_put(sm1$EN_c1_response_put),
	      .RDY_s_request_put(sm1$RDY_s_request_put),
	      .s_response_get(sm1$s_response_get),
	      .RDY_s_response_get(sm1$RDY_s_response_get),
	      .c0_request_get(sm1$c0_request_get),
	      .RDY_c0_request_get(sm1$RDY_c0_request_get),
	      .RDY_c0_response_put(sm1$RDY_c0_response_put),
	      .c1_request_get(sm1$c1_request_get),
	      .RDY_c1_request_get(sm1$RDY_c1_request_get),
	      .RDY_c1_response_put(sm1$RDY_c1_response_put));

  // submodule sm2
  mkTLPSM sm2(.pfk(14'd9497),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm2$c0_response_put),
	      .c1_response_put(sm2$c1_response_put),
	      .s_request_put(sm2$s_request_put),
	      .EN_s_request_put(sm2$EN_s_request_put),
	      .EN_s_response_get(sm2$EN_s_response_get),
	      .EN_c0_request_get(sm2$EN_c0_request_get),
	      .EN_c0_response_put(sm2$EN_c0_response_put),
	      .EN_c1_request_get(sm2$EN_c1_request_get),
	      .EN_c1_response_put(sm2$EN_c1_response_put),
	      .RDY_s_request_put(sm2$RDY_s_request_put),
	      .s_response_get(sm2$s_response_get),
	      .RDY_s_response_get(sm2$RDY_s_response_get),
	      .c0_request_get(sm2$c0_request_get),
	      .RDY_c0_request_get(sm2$RDY_c0_request_get),
	      .RDY_c0_response_put(sm2$RDY_c0_response_put),
	      .c1_request_get(),
	      .RDY_c1_request_get(sm2$RDY_c1_request_get),
	      .RDY_c1_response_put());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = itc0_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = itc0_now$sRDY ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = itc1_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = itc1_now$sRDY ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 = dp1$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_1 = dp1$wci_s_SThreadBusy ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect = dp0$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect = dp0$wci_s_SThreadBusy ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_chomp_rogue
  assign CAN_FIRE_RL_chomp_rogue = sm2$RDY_c1_request_get ;
  assign WILL_FIRE_RL_chomp_rogue = sm2$RDY_c1_request_get ;

  // rule RL_ClientServerRequest_4
  assign CAN_FIRE_RL_ClientServerRequest_4 =
	     sm2$RDY_c0_request_get && dp1$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_4 =
	     CAN_FIRE_RL_ClientServerRequest_4 ;

  // rule RL_ClientServerResponse_4
  assign CAN_FIRE_RL_ClientServerResponse_4 =
	     sm2$RDY_c0_response_put && dp1$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_4 =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     sm2$RDY_s_request_put && sm1$RDY_c1_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     sm2$RDY_s_response_get && sm1$RDY_c1_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     sm1$RDY_c0_request_get && dp0$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     sm1$RDY_c0_response_put && dp0$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     sm1$RDY_s_request_put && sm0$RDY_c1_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     sm1$RDY_s_response_get && sm0$RDY_c1_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     sm0$RDY_c0_request_get && cp$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     sm0$RDY_c0_response_put && cp$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 = dp1$wti_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_3 = dp1$wti_s_SThreadBusy ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 = dp0$wti_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_2 = dp0$wti_s_SThreadBusy ;

  // rule RL_reqConnect_1
  assign CAN_FIRE_RL_reqConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_1 = 1'd1 ;

  // rule RL_reqConnect
  assign CAN_FIRE_RL_reqConnect = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect = 1'd1 ;

  // rule RL_itc1_send_time
  assign CAN_FIRE_RL_itc1_send_time = 1'd1 ;
  assign WILL_FIRE_RL_itc1_send_time = 1'd1 ;

  // rule RL_itc1_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_itc1_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_itc1_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_itc0_send_time
  assign CAN_FIRE_RL_itc0_send_time = 1'd1 ;
  assign WILL_FIRE_RL_itc0_send_time = 1'd1 ;

  // rule RL_mFlagConnect_1
  assign CAN_FIRE_RL_mFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_1 = 1'd1 ;

  // rule RL_itc0_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_itc0_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_itc0_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_sFlagConnect_1
  assign CAN_FIRE_RL_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_1 = 1'd1 ;

  // rule RL_sDataConnect_1
  assign CAN_FIRE_RL_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_1
  assign CAN_FIRE_RL_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_1 = 1'd1 ;

  // rule RL_mAddrConnect_1
  assign CAN_FIRE_RL_mAddrConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_1 = 1'd1 ;

  // rule RL_mBEConnect_1
  assign CAN_FIRE_RL_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_1 = 1'd1 ;

  // rule RL_mFlagConnect
  assign CAN_FIRE_RL_mFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect = 1'd1 ;

  // rule RL_mAddrSConnect_1
  assign CAN_FIRE_RL_mAddrSConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_1 = 1'd1 ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mAddrSConnect
  assign CAN_FIRE_RL_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect = 1'd1 ;

  // rule RL_mBEConnect
  assign CAN_FIRE_RL_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect = 1'd1 ;

  // inlined wires
  assign itc0_wti_sThreadBusy_pw$whas = dp0$wti_s_SThreadBusy ;
  assign itc1_wti_sThreadBusy_pw$whas = dp1$wti_s_SThreadBusy ;

  // register chompCnt
  assign chompCnt$D_IN = chompCnt + 8'd1 ;
  assign chompCnt$EN = sm2$RDY_c1_request_get && chompCnt != 8'd255 ;

  // register itc0_wti_nowReq
  assign itc0_wti_nowReq$D_IN = { 3'd1, itc0_now$dD_OUT } ;
  assign itc0_wti_nowReq$EN = 1'd1 ;

  // register itc0_wti_sThreadBusy_d
  assign itc0_wti_sThreadBusy_d$D_IN = dp0$wti_s_SThreadBusy ;
  assign itc0_wti_sThreadBusy_d$EN = 1'd1 ;

  // register itc1_wti_nowReq
  assign itc1_wti_nowReq$D_IN = { 3'd1, itc1_now$dD_OUT } ;
  assign itc1_wti_nowReq$EN = 1'd1 ;

  // register itc1_wti_sThreadBusy_d
  assign itc1_wti_sThreadBusy_d$D_IN = dp1$wti_s_SThreadBusy ;
  assign itc1_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule cp
  assign cp$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest ;
  assign cp$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse ;
  assign cp$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign cp$server_request_put = sm0$c0_request_get ;
  assign cp$switch_x = switch_x ;
  assign cp$wci_Vm_0_SData = wci_m_0_SData ;
  assign cp$wci_Vm_0_SFlag = wci_m_0_SFlag ;
  assign cp$wci_Vm_0_SResp = wci_m_0_SResp ;
  assign cp$wci_Vm_10_SData = wci_m_10_SData ;
  assign cp$wci_Vm_10_SFlag = wci_m_10_SFlag ;
  assign cp$wci_Vm_10_SResp = wci_m_10_SResp ;
  assign cp$wci_Vm_11_SData = wci_m_11_SData ;
  assign cp$wci_Vm_11_SFlag = wci_m_11_SFlag ;
  assign cp$wci_Vm_11_SResp = wci_m_11_SResp ;
  assign cp$wci_Vm_12_SData = wci_m_12_SData ;
  assign cp$wci_Vm_12_SResp = wci_m_12_SResp ;
  assign cp$wci_Vm_12_SFlag = wci_m_12_SFlag ;
  assign cp$wci_Vm_13_SData = dp0$wci_s_SData ;
  assign cp$wci_Vm_13_SFlag = dp0$wci_s_SFlag ;
  assign cp$wci_Vm_13_SResp = dp0$wci_s_SResp ;
  assign cp$wci_Vm_14_SData = dp1$wci_s_SData ;
  assign cp$wci_Vm_14_SFlag = dp1$wci_s_SFlag ;
  assign cp$wci_Vm_14_SResp = dp1$wci_s_SResp ;
  assign cp$wci_Vm_1_SData = wci_m_1_SData ;
  assign cp$wci_Vm_1_SResp = wci_m_1_SResp ;
  assign cp$wci_Vm_1_SFlag = wci_m_1_SFlag ;
  assign cp$wci_Vm_2_SData = wci_m_2_SData ;
  assign cp$wci_Vm_2_SFlag = wci_m_2_SFlag ;
  assign cp$wci_Vm_2_SResp = wci_m_2_SResp ;
  assign cp$wci_Vm_3_SData = wci_m_3_SData ;
  assign cp$wci_Vm_3_SFlag = wci_m_3_SFlag ;
  assign cp$wci_Vm_3_SResp = wci_m_3_SResp ;
  assign cp$wci_Vm_4_SData = wci_m_4_SData ;
  assign cp$wci_Vm_4_SFlag = wci_m_4_SFlag ;
  assign cp$wci_Vm_5_SData = wci_m_5_SData ;
  assign cp$wci_Vm_4_SResp = wci_m_4_SResp ;
  assign cp$wci_Vm_5_SFlag = wci_m_5_SFlag ;
  assign cp$wci_Vm_5_SResp = wci_m_5_SResp ;
  assign cp$wci_Vm_6_SData = wci_m_6_SData ;
  assign cp$wci_Vm_6_SFlag = wci_m_6_SFlag ;
  assign cp$wci_Vm_6_SResp = wci_m_6_SResp ;
  assign cp$wci_Vm_7_SData = wci_m_7_SData ;
  assign cp$wci_Vm_7_SFlag = wci_m_7_SFlag ;
  assign cp$wci_Vm_7_SResp = wci_m_7_SResp ;
  assign cp$wci_Vm_8_SData = wci_m_8_SData ;
  assign cp$wci_Vm_8_SFlag = wci_m_8_SFlag ;
  assign cp$wci_Vm_8_SResp = wci_m_8_SResp ;
  assign cp$wci_Vm_9_SData = wci_m_9_SData ;
  assign cp$wci_Vm_9_SFlag = wci_m_9_SFlag ;
  assign cp$wci_Vm_9_SResp = wci_m_9_SResp ;
  assign cp$wci_Vm_0_SThreadBusy = wci_m_0_SThreadBusy ;
  assign cp$wci_Vm_10_SThreadBusy = wci_m_10_SThreadBusy ;
  assign cp$wci_Vm_11_SThreadBusy = wci_m_11_SThreadBusy ;
  assign cp$wci_Vm_12_SThreadBusy = wci_m_12_SThreadBusy ;
  assign cp$wci_Vm_13_SThreadBusy = dp0$wci_s_SThreadBusy ;
  assign cp$wci_Vm_14_SThreadBusy = dp1$wci_s_SThreadBusy ;
  assign cp$wci_Vm_1_SThreadBusy = wci_m_1_SThreadBusy ;
  assign cp$wci_Vm_2_SThreadBusy = wci_m_2_SThreadBusy ;
  assign cp$wci_Vm_3_SThreadBusy = wci_m_3_SThreadBusy ;
  assign cp$wci_Vm_4_SThreadBusy = wci_m_4_SThreadBusy ;
  assign cp$wci_Vm_5_SThreadBusy = wci_m_5_SThreadBusy ;
  assign cp$wci_Vm_6_SThreadBusy = wci_m_6_SThreadBusy ;
  assign cp$wci_Vm_7_SThreadBusy = wci_m_7_SThreadBusy ;
  assign cp$wci_Vm_8_SThreadBusy = wci_m_8_SThreadBusy ;
  assign cp$wci_Vm_9_SThreadBusy = wci_m_9_SThreadBusy ;

  // submodule dp0
  assign dp0$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign dp0$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign dp0$server_request_put = sm1$c0_request_get ;
  assign dp0$wci_s_MAddr = cp$wci_Vm_13_MAddr ;
  assign dp0$wci_s_MByteEn = cp$wci_Vm_13_MByteEn ;
  assign dp0$wci_s_MAddrSpace = cp$wci_Vm_13_MAddrSpace ;
  assign dp0$wci_s_MCmd = cp$wci_Vm_13_MCmd ;
  assign dp0$wci_s_MData = cp$wci_Vm_13_MData ;
  assign dp0$wci_s_MFlag = cp$wci_Vm_13_MFlag ;
  assign dp0$wmiS1_MAddr = wmiS0_MAddr ;
  assign dp0$wmiS1_MAddrSpace = wmiS0_MAddrSpace ;
  assign dp0$wmiS1_MBurstLength = wmiS0_MBurstLength ;
  assign dp0$wmiS1_MCmd = wmiS0_MCmd ;
  assign dp0$wmiS1_MDataByteEn = wmiS0_MDataByteEn ;
  assign dp0$wmiS1_MData = wmiS0_MData ;
  assign dp0$wmiS1_arg_mFlag = wmiS0_arg_mFlag ;
  assign dp0$wmiS1_MReqInfo = wmiS0_MReqInfo ;
  assign dp0$wti_s_req =
	     itc0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       itc0_wti_nowReq ;
  assign dp0$wmiS1_MDataLast = wmiS0_MDataLast ;
  assign dp0$wmiS1_MDataValid = wmiS0_MDataValid ;
  assign dp0$wmiS1_MReqLast = wmiS0_MReqLast ;
  assign dp0$wmiS1_MReset_n = wmiS0_MReset_n ;

  // submodule dp1
  assign dp1$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest_4 ;
  assign dp1$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse_4 ;
  assign dp1$server_request_put = sm2$c0_request_get ;
  assign dp1$wci_s_MAddr = cp$wci_Vm_14_MAddr ;
  assign dp1$wci_s_MAddrSpace = cp$wci_Vm_14_MAddrSpace ;
  assign dp1$wci_s_MByteEn = cp$wci_Vm_14_MByteEn ;
  assign dp1$wci_s_MData = cp$wci_Vm_14_MData ;
  assign dp1$wci_s_MCmd = cp$wci_Vm_14_MCmd ;
  assign dp1$wci_s_MFlag = cp$wci_Vm_14_MFlag ;
  assign dp1$wmiS1_MAddr = wmiS1_MAddr ;
  assign dp1$wmiS1_MAddrSpace = wmiS1_MAddrSpace ;
  assign dp1$wmiS1_MBurstLength = wmiS1_MBurstLength ;
  assign dp1$wmiS1_MCmd = wmiS1_MCmd ;
  assign dp1$wmiS1_MData = wmiS1_MData ;
  assign dp1$wmiS1_MDataByteEn = wmiS1_MDataByteEn ;
  assign dp1$wmiS1_arg_mFlag = wmiS1_arg_mFlag ;
  assign dp1$wmiS1_MReqInfo = wmiS1_MReqInfo ;
  assign dp1$wti_s_req =
	     itc1_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       itc1_wti_nowReq ;
  assign dp1$wmiS1_MDataLast = wmiS1_MDataLast ;
  assign dp1$wmiS1_MDataValid = wmiS1_MDataValid ;
  assign dp1$wmiS1_MReqLast = wmiS1_MReqLast ;
  assign dp1$wmiS1_MReset_n = wmiS1_MReset_n ;

  // submodule itc0_now
  assign itc0_now$sD_IN = cp$cpNow ;
  assign itc0_now$sEN = itc0_now$sRDY ;

  // submodule itc1_now
  assign itc1_now$sD_IN = cp$cpNow ;
  assign itc1_now$sEN = itc1_now$sRDY ;

  // submodule sm0
  assign sm0$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest ;
  assign sm0$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse ;
  assign sm0$EN_c1_request_get = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign sm0$EN_c1_response_put = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign sm0$EN_s_request_put = EN_server_request_put ;
  assign sm0$EN_s_response_get = EN_server_response_get ;
  assign sm0$c0_response_put = cp$server_response_get ;
  assign sm0$c1_response_put = sm1$s_response_get ;
  assign sm0$s_request_put = server_request_put ;

  // submodule sm1
  assign sm1$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign sm1$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign sm1$EN_c1_request_get = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign sm1$EN_c1_response_put = CAN_FIRE_RL_ClientServerResponse_3 ;
  assign sm1$EN_s_request_put = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign sm1$EN_s_response_get = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign sm1$c0_response_put = dp0$server_response_get ;
  assign sm1$c1_response_put = sm2$s_response_get ;
  assign sm1$s_request_put = sm0$c1_request_get ;

  // submodule sm2
  assign sm2$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_4 ;
  assign sm2$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_4 ;
  assign sm2$EN_c1_request_get = sm2$RDY_c1_request_get ;
  assign sm2$EN_s_request_put = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign sm2$EN_c1_response_put = 1'b0 ;
  assign sm2$EN_s_response_get = CAN_FIRE_RL_ClientServerResponse_3 ;
  assign sm2$c0_response_put = dp1$server_response_get ;
  assign sm2$s_request_put = sm1$c1_request_get ;
  assign sm2$c1_response_put = 153'h0 ;

  // remaining internal signals
  assign pciDevice_BITS_15_TO_3_6_CONCAT_0___d92 = { pciDevice[15:3], 3'd0 } ;
  assign pciDevice_BITS_15_TO_3_6_CONCAT_1___d93 = { pciDevice[15:3], 3'd1 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (chompCnt$EN) chompCnt <= `BSV_ASSIGNMENT_DELAY chompCnt$D_IN;
	if (itc0_wti_nowReq$EN)
	  itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY itc0_wti_nowReq$D_IN;
	if (itc0_wti_sThreadBusy_d$EN)
	  itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      itc0_wti_sThreadBusy_d$D_IN;
	if (itc1_wti_nowReq$EN)
	  itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY itc1_wti_nowReq$D_IN;
	if (itc1_wti_sThreadBusy_d$EN)
	  itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      itc1_wti_sThreadBusy_d$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    chompCnt = 8'hAA;
    itc0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc0_wti_sThreadBusy_d = 1'h0;
    itc1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc1_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (sm2$RDY_c1_request_get)
	begin
	  v__h5423 = $time;
	  #0;
	end
    if (RST_N)
      if (sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h5423,
		 $unsigned(chompCnt));
  end
  // synopsys translate_on
endmodule  // mkOCInf

