//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Wed May  9 10:06:41 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// cpClient_request_get           O    59 reg
// RDY_cpClient_request_get       O     1 reg
// RDY_cpClient_response_put      O     1 reg
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// RST_N_gmii_rstn                O     1 reset
// CLK_gmii_rx_clk                I     1 clock
// CLK_sys1_clk                   I     1 clock
// RST_N_sys1_rst                 I     1 unused
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// cpClient_response_put          I    40 reg
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1 unused
// gmii_crs_i                     I     1 unused
// EN_cpClient_response_put       I     1
// EN_cpClient_request_get        I     1
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGbeLite(CLK_gmii_rx_clk,
		 CLK_sys1_clk,
		 RST_N_sys1_rst,
		 wciS0_Clk,
		 wciS0_MReset_n,

		 mdio_mdd,
		 mdio_mdc,

		 EN_cpClient_request_get,
		 cpClient_request_get,
		 RDY_cpClient_request_get,

		 cpClient_response_put,
		 EN_cpClient_response_put,
		 RDY_cpClient_response_put,

		 gmii_rx_rxd_i,

		 gmii_rx_rx_dv_i,

		 gmii_rx_rx_er_i,

		 gmii_tx_txd,

		 gmii_tx_tx_en,

		 gmii_tx_tx_er,

		 gmii_col_i,

		 gmii_crs_i,

		 gmii_led,

		 CLK_gmii_tx_tx_clk,
		 CLK_GATE_gmii_tx_tx_clk,

		 CLK_rxclkBnd,
		 CLK_GATE_rxclkBnd,

		 RST_N_gmii_rstn);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  CLK_gmii_rx_clk;
  input  CLK_sys1_clk;
  input  RST_N_sys1_rst;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  inout  mdio_mdd;
  inout  mdio_mdc;

  // actionvalue method cpClient_request_get
  input  EN_cpClient_request_get;
  output [58 : 0] cpClient_request_get;
  output RDY_cpClient_request_get;

  // action method cpClient_response_put
  input  [39 : 0] cpClient_response_put;
  input  EN_cpClient_response_put;
  output RDY_cpClient_response_put;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // output resets
  output RST_N_gmii_rstn;

  // signals for module outputs
  wire [58 : 0] cpClient_request_get;
  wire [7 : 0] gmii_tx_txd;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       RDY_cpClient_request_get,
       RDY_cpClient_response_put,
       RST_N_gmii_rstn,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er;

  // inlined wires
  wire mdi_pwTick$whas;

  // register gbeControl
  reg [31 : 0] gbeControl;
  wire [31 : 0] gbeControl$D_IN;
  wire gbeControl$EN;

  // register macAddress
  reg [47 : 0] macAddress;
  wire [47 : 0] macAddress$D_IN;
  wire macAddress$EN;

  // register mdi_rMDC
  reg mdi_rMDC;
  wire mdi_rMDC$D_IN, mdi_rMDC$EN;

  // register mdi_rMDD
  reg mdi_rMDD;
  wire mdi_rMDD$D_IN, mdi_rMDD$EN;

  // register mdi_rOutEn
  reg mdi_rOutEn;
  wire mdi_rOutEn$D_IN, mdi_rOutEn$EN;

  // register mdi_rPhyAddr
  reg [4 : 0] mdi_rPhyAddr;
  wire [4 : 0] mdi_rPhyAddr$D_IN;
  wire mdi_rPhyAddr$EN;

  // register mdi_rRegAddr
  reg [4 : 0] mdi_rRegAddr;
  wire [4 : 0] mdi_rRegAddr$D_IN;
  wire mdi_rRegAddr$EN;

  // register mdi_rState
  reg mdi_rState;
  wire mdi_rState$D_IN, mdi_rState$EN;

  // register mdi_rWrite
  reg mdi_rWrite;
  wire mdi_rWrite$D_IN, mdi_rWrite$EN;

  // register mdi_rWriteData
  reg [15 : 0] mdi_rWriteData;
  wire [15 : 0] mdi_rWriteData$D_IN;
  wire mdi_rWriteData$EN;

  // register mdi_vrReadData
  reg mdi_vrReadData;
  wire mdi_vrReadData$D_IN, mdi_vrReadData$EN;

  // register mdi_vrReadData_1
  reg mdi_vrReadData_1;
  wire mdi_vrReadData_1$D_IN, mdi_vrReadData_1$EN;

  // register mdi_vrReadData_10
  reg mdi_vrReadData_10;
  wire mdi_vrReadData_10$D_IN, mdi_vrReadData_10$EN;

  // register mdi_vrReadData_11
  reg mdi_vrReadData_11;
  wire mdi_vrReadData_11$D_IN, mdi_vrReadData_11$EN;

  // register mdi_vrReadData_12
  reg mdi_vrReadData_12;
  wire mdi_vrReadData_12$D_IN, mdi_vrReadData_12$EN;

  // register mdi_vrReadData_13
  reg mdi_vrReadData_13;
  wire mdi_vrReadData_13$D_IN, mdi_vrReadData_13$EN;

  // register mdi_vrReadData_14
  reg mdi_vrReadData_14;
  wire mdi_vrReadData_14$D_IN, mdi_vrReadData_14$EN;

  // register mdi_vrReadData_15
  reg mdi_vrReadData_15;
  wire mdi_vrReadData_15$D_IN, mdi_vrReadData_15$EN;

  // register mdi_vrReadData_2
  reg mdi_vrReadData_2;
  wire mdi_vrReadData_2$D_IN, mdi_vrReadData_2$EN;

  // register mdi_vrReadData_3
  reg mdi_vrReadData_3;
  wire mdi_vrReadData_3$D_IN, mdi_vrReadData_3$EN;

  // register mdi_vrReadData_4
  reg mdi_vrReadData_4;
  wire mdi_vrReadData_4$D_IN, mdi_vrReadData_4$EN;

  // register mdi_vrReadData_5
  reg mdi_vrReadData_5;
  wire mdi_vrReadData_5$D_IN, mdi_vrReadData_5$EN;

  // register mdi_vrReadData_6
  reg mdi_vrReadData_6;
  wire mdi_vrReadData_6$D_IN, mdi_vrReadData_6$EN;

  // register mdi_vrReadData_7
  reg mdi_vrReadData_7;
  wire mdi_vrReadData_7$D_IN, mdi_vrReadData_7$EN;

  // register mdi_vrReadData_8
  reg mdi_vrReadData_8;
  wire mdi_vrReadData_8$D_IN, mdi_vrReadData_8$EN;

  // register mdi_vrReadData_9
  reg mdi_vrReadData_9;
  wire mdi_vrReadData_9$D_IN, mdi_vrReadData_9$EN;

  // register phyMdiInit
  reg phyMdiInit;
  wire phyMdiInit$D_IN, phyMdiInit$EN;

  // register phyResetWaitCnt
  reg [21 : 0] phyResetWaitCnt;
  wire [21 : 0] phyResetWaitCnt$D_IN;
  wire phyResetWaitCnt$EN;

  // register rxAbortEOPC
  reg [31 : 0] rxAbortEOPC;
  wire [31 : 0] rxAbortEOPC$D_IN;
  wire rxAbortEOPC$EN;

  // register rxCount
  reg [31 : 0] rxCount;
  wire [31 : 0] rxCount$D_IN;
  wire rxCount$EN;

  // register rxDCPCnt
  reg [31 : 0] rxDCPCnt;
  wire [31 : 0] rxDCPCnt$D_IN;
  wire rxDCPCnt$EN;

  // register rxDCPMesg
  reg [111 : 0] rxDCPMesg;
  wire [111 : 0] rxDCPMesg$D_IN;
  wire rxDCPMesg$EN;

  // register rxDCPMesgPos
  reg [4 : 0] rxDCPMesgPos;
  wire [4 : 0] rxDCPMesgPos$D_IN;
  wire rxDCPMesgPos$EN;

  // register rxDCPPLI
  reg [7 : 0] rxDCPPLI;
  wire [7 : 0] rxDCPPLI$D_IN;
  wire rxDCPPLI$EN;

  // register rxEmptyEOPC
  reg [31 : 0] rxEmptyEOPC;
  wire [31 : 0] rxEmptyEOPC$D_IN;
  wire rxEmptyEOPC$EN;

  // register rxHdrMatchCnt
  reg [31 : 0] rxHdrMatchCnt;
  wire [31 : 0] rxHdrMatchCnt$D_IN;
  wire rxHdrMatchCnt$EN;

  // register rxHdr_mCnt
  reg [3 : 0] rxHdr_mCnt;
  wire [3 : 0] rxHdr_mCnt$D_IN;
  wire rxHdr_mCnt$EN;

  // register rxHdr_pV
  reg [112 : 0] rxHdr_pV;
  wire [112 : 0] rxHdr_pV$D_IN;
  wire rxHdr_pV$EN;

  // register rxHdr_pos
  reg [3 : 0] rxHdr_pos;
  wire [3 : 0] rxHdr_pos$D_IN;
  wire rxHdr_pos$EN;

  // register rxHdr_sV
  reg [112 : 0] rxHdr_sV;
  wire [112 : 0] rxHdr_sV$D_IN;
  wire rxHdr_sV$EN;

  // register rxHeadCap
  reg [127 : 0] rxHeadCap;
  wire [127 : 0] rxHeadCap$D_IN;
  wire rxHeadCap$EN;

  // register rxLenCount
  reg [31 : 0] rxLenCount;
  wire [31 : 0] rxLenCount$D_IN;
  wire rxLenCount$EN;

  // register rxLenLast
  reg [31 : 0] rxLenLast;
  wire [31 : 0] rxLenLast$D_IN;
  wire rxLenLast$EN;

  // register rxOvfCount
  reg [31 : 0] rxOvfCount;
  wire [31 : 0] rxOvfCount$D_IN;
  wire rxOvfCount$EN;

  // register rxPipe
  reg [31 : 0] rxPipe;
  wire [31 : 0] rxPipe$D_IN;
  wire rxPipe$EN;

  // register rxPos
  reg [1 : 0] rxPos;
  wire [1 : 0] rxPos$D_IN;
  wire rxPos$EN;

  // register rxValidEOPC
  reg [31 : 0] rxValidEOPC;
  wire [31 : 0] rxValidEOPC$D_IN;
  wire rxValidEOPC$EN;

  // register rxValidNoEOPC
  reg [31 : 0] rxValidNoEOPC;
  wire [31 : 0] rxValidNoEOPC$D_IN;
  wire rxValidNoEOPC$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register txCount
  reg [31 : 0] txCount;
  wire [31 : 0] txCount$D_IN;
  wire txCount$EN;

  // register txDBGCnt
  reg [31 : 0] txDBGCnt;
  wire [31 : 0] txDBGCnt$D_IN;
  wire txDBGCnt$EN;

  // register txDBGPos
  reg [4 : 0] txDBGPos;
  wire [4 : 0] txDBGPos$D_IN;
  wire txDBGPos$EN;

  // register txDCPCnt
  reg [31 : 0] txDCPCnt;
  wire [31 : 0] txDCPCnt$D_IN;
  wire txDCPCnt$EN;

  // register txDCPPos
  reg [4 : 0] txDCPPos;
  wire [4 : 0] txDCPPos$D_IN;
  wire txDCPPos$EN;

  // register txUndCount
  reg [31 : 0] txUndCount;
  wire [31 : 0] txUndCount$D_IN;
  wire txUndCount$EN;

  // ports of submodule dcpRespF
  wire [43 : 0] dcpRespF$D_IN, dcpRespF$D_OUT;
  wire dcpRespF$CLR,
       dcpRespF$DEQ,
       dcpRespF$EMPTY_N,
       dcpRespF$ENQ,
       dcpRespF$FULL_N;

  // ports of submodule dcp_cpReqF
  wire [58 : 0] dcp_cpReqF$D_IN, dcp_cpReqF$D_OUT;
  wire dcp_cpReqF$CLR,
       dcp_cpReqF$DEQ,
       dcp_cpReqF$EMPTY_N,
       dcp_cpReqF$ENQ,
       dcp_cpReqF$FULL_N;

  // ports of submodule dcp_cpRespF
  wire [39 : 0] dcp_cpRespF$D_IN, dcp_cpRespF$D_OUT;
  wire dcp_cpRespF$CLR,
       dcp_cpRespF$DEQ,
       dcp_cpRespF$EMPTY_N,
       dcp_cpRespF$ENQ,
       dcp_cpRespF$FULL_N;

  // ports of submodule dcp_dcpReqF
  reg [77 : 0] dcp_dcpReqF$D_IN;
  wire [77 : 0] dcp_dcpReqF$D_OUT;
  wire dcp_dcpReqF$CLR,
       dcp_dcpReqF$DEQ,
       dcp_dcpReqF$EMPTY_N,
       dcp_dcpReqF$ENQ,
       dcp_dcpReqF$FULL_N;

  // ports of submodule dcp_dcpRespF
  wire [43 : 0] dcp_dcpRespF$D_IN, dcp_dcpRespF$D_OUT;
  wire dcp_dcpRespF$CLR,
       dcp_dcpRespF$DEQ,
       dcp_dcpRespF$EMPTY_N,
       dcp_dcpRespF$ENQ,
       dcp_dcpRespF$FULL_N;

  // ports of submodule gmac
  wire [9 : 0] gmac$rx_get, gmac$tx_put;
  wire [7 : 0] gmac$gmii_rx_rxd_i, gmac$gmii_tx_txd;
  wire gmac$CLK_gmii_tx_tx_clk,
       gmac$CLK_rxclkBnd,
       gmac$EN_rxOperate,
       gmac$EN_rx_get,
       gmac$EN_txOperate,
       gmac$EN_tx_put,
       gmac$RDY_rx_get,
       gmac$RDY_tx_put,
       gmac$gmii_col_i,
       gmac$gmii_crs_i,
       gmac$gmii_led,
       gmac$gmii_rx_rx_dv_i,
       gmac$gmii_rx_rx_er_i,
       gmac$gmii_tx_tx_en,
       gmac$gmii_tx_tx_er,
       gmac$rxOverFlow,
       gmac$txUnderFlow;

  // ports of submodule mdi_fRequest
  wire [26 : 0] mdi_fRequest$D_IN, mdi_fRequest$D_OUT;
  wire mdi_fRequest$CLR,
       mdi_fRequest$DEQ,
       mdi_fRequest$EMPTY_N,
       mdi_fRequest$ENQ,
       mdi_fRequest$FULL_N;

  // ports of submodule mdi_fResponse
  wire [16 : 0] mdi_fResponse$D_IN;
  wire mdi_fResponse$CLR,
       mdi_fResponse$DEQ,
       mdi_fResponse$ENQ,
       mdi_fResponse$FULL_N;

  // ports of submodule mdi_rPlayIndex
  wire [7 : 0] mdi_rPlayIndex$DATA_A,
	       mdi_rPlayIndex$DATA_B,
	       mdi_rPlayIndex$DATA_C,
	       mdi_rPlayIndex$DATA_F,
	       mdi_rPlayIndex$Q_OUT;
  wire mdi_rPlayIndex$ADDA,
       mdi_rPlayIndex$ADDB,
       mdi_rPlayIndex$SETC,
       mdi_rPlayIndex$SETF;

  // ports of submodule mdi_rPrescaler
  wire [3 : 0] mdi_rPrescaler$DATA_A,
	       mdi_rPrescaler$DATA_B,
	       mdi_rPrescaler$DATA_C,
	       mdi_rPrescaler$DATA_F,
	       mdi_rPrescaler$Q_OUT;
  wire mdi_rPrescaler$ADDA,
       mdi_rPrescaler$ADDB,
       mdi_rPrescaler$SETC,
       mdi_rPrescaler$SETF;

  // ports of submodule mdi_tMDC
  wire mdi_tMDC$IO;

  // ports of submodule mdi_tMDD
  wire mdi_tMDD$IO, mdi_tMDD$O;

  // ports of submodule phyRst
  wire phyRst$ASSERT_IN, phyRst$OUT_RST_N;

  // ports of submodule rxDCPHdrF
  wire [111 : 0] rxDCPHdrF$D_IN;
  wire rxDCPHdrF$CLR,
       rxDCPHdrF$DEQ,
       rxDCPHdrF$EMPTY_N,
       rxDCPHdrF$ENQ,
       rxDCPHdrF$FULL_N;

  // ports of submodule txDBGF
  wire [31 : 0] txDBGF$D_IN;
  wire txDBGF$CLR, txDBGF$DEQ, txDBGF$ENQ;

  // ports of submodule txDCPHdrF
  wire [111 : 0] txDCPHdrF$D_IN;
  wire txDCPHdrF$CLR, txDCPHdrF$DEQ, txDCPHdrF$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_dcp_cp_response,
       WILL_FIRE_RL_dcp_dcp_request,
       WILL_FIRE_RL_mdi_run_frame,
       WILL_FIRE_RL_rx_data,
       WILL_FIRE_RL_rx_dcp,
       WILL_FIRE_RL_tx_dcp;

  // inputs to muxes for submodule ports
  wire [112 : 0] MUX_rxHdr_sV$write_1__VAL_1;
  wire [43 : 0] MUX_dcp_dcpRespF$enq_1__VAL_1, MUX_dcp_dcpRespF$enq_1__VAL_2;
  wire [4 : 0] MUX_rxDCPMesgPos$write_1__VAL_1;
  wire [3 : 0] MUX_rxHdr_mCnt$write_1__VAL_1, MUX_rxHdr_pos$write_1__VAL_1;
  wire MUX_dcp_dcpRespF$enq_1__SEL_1,
       MUX_dcp_dcpRespF$enq_1__SEL_2,
       MUX_mdi_rState$write_1__SEL_1,
       MUX_mdi_rState$write_1__SEL_2,
       MUX_rxDCPMesgPos$write_1__SEL_1,
       MUX_rxDCPPLI$write_1__SEL_1,
       MUX_rxHdr_mCnt$write_1__SEL_1,
       MUX_rxHdr_pos$write_1__SEL_1;

  // remaining internal signals
  reg [9 : 0] CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9,
	      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7,
	      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8;
  reg [7 : 0] CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6,
	      CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2,
	      CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1,
	      IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602,
	      tag__h62141;
  reg [4 : 0] CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11;
  reg [1 : 0] CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5;
  reg CASE_IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_ETC__q4,
      CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3,
      IF_txDCPPos_45_EQ_0_46_OR_txDCPPos_45_EQ_1_47__ETC___d672;
  wire [101 : 0] _1448743543117976458853375091858__q10,
		 _643371375338640__q12,
		 bs__h14832,
		 bs__h2369;
  wire [31 : 0] x__h61931;
  wire [15 : 0] x_data__h18030;
  wire [4 : 0] IF_txDCPPos_45_EQ_9_63_THEN_0_ELSE_txDCPPos_45_ETC___d664,
	       txDCPPos_45_PLUS_1___d622;
  wire [2 : 0] d0__h1995,
	       d10__h1985,
	       d11__h1984,
	       d12__h1983,
	       d13__h1982,
	       d14__h1981,
	       d15__h1980,
	       d1__h1994,
	       d2__h1993,
	       d3__h1992,
	       d4__h1991,
	       d5__h1990,
	       d6__h1989,
	       d7__h1988,
	       d8__h1987,
	       d9__h1986,
	       pa0__h1972,
	       pa1__h1971,
	       pa2__h1970,
	       pa3__h1969,
	       pa4__h1968,
	       ra0__h1978,
	       ra1__h1977,
	       ra2__h1976,
	       ra3__h1975,
	       ra4__h1974;
  wire IF_dcp_dcpReqF_first__30_BITS_77_TO_76_31_EQ_0_ETC___d141,
       IF_rxHdr_pos_07_EQ_0_23_THEN_rxHdr_sV_90_BITS__ETC___d292,
       NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d313,
       NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d500,
       dcpRespF_i_notEmpty__41_AND_IF_dcpRespF_first__ETC___d477,
       gmac_rx_get_01_BITS_9_TO_8_02_EQ_0_03_OR_gmac__ETC___d295,
       rxHdr_sV_90_BIT_112_91_OR_NOT_rxHdr_sV_90_BITS_ETC___d583;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = gmac$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // output resets
  assign RST_N_gmii_rstn = phyRst$OUT_RST_N ;

  // actionvalue method cpClient_request_get
  assign cpClient_request_get = dcp_cpReqF$D_OUT ;
  assign RDY_cpClient_request_get = dcp_cpReqF$EMPTY_N ;

  // action method cpClient_response_put
  assign RDY_cpClient_response_put = dcp_cpRespF$FULL_N ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac$gmii_tx_tx_er ;

  // value method gmii_led
  assign gmii_led = gmac$gmii_led ;

  // submodule dcpRespF
  FIFO2 #(.width(32'd44), .guarded(32'd1)) dcpRespF(.RST_N(wciS0_MReset_n),
						    .CLK(wciS0_Clk),
						    .D_IN(dcpRespF$D_IN),
						    .ENQ(dcpRespF$ENQ),
						    .DEQ(dcpRespF$DEQ),
						    .CLR(dcpRespF$CLR),
						    .D_OUT(dcpRespF$D_OUT),
						    .FULL_N(dcpRespF$FULL_N),
						    .EMPTY_N(dcpRespF$EMPTY_N));

  // submodule dcp_cpReqF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) dcp_cpReqF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(dcp_cpReqF$D_IN),
						      .ENQ(dcp_cpReqF$ENQ),
						      .DEQ(dcp_cpReqF$DEQ),
						      .CLR(dcp_cpReqF$CLR),
						      .D_OUT(dcp_cpReqF$D_OUT),
						      .FULL_N(dcp_cpReqF$FULL_N),
						      .EMPTY_N(dcp_cpReqF$EMPTY_N));

  // submodule dcp_cpRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) dcp_cpRespF(.RST_N(wciS0_MReset_n),
						       .CLK(wciS0_Clk),
						       .D_IN(dcp_cpRespF$D_IN),
						       .ENQ(dcp_cpRespF$ENQ),
						       .DEQ(dcp_cpRespF$DEQ),
						       .CLR(dcp_cpRespF$CLR),
						       .D_OUT(dcp_cpRespF$D_OUT),
						       .FULL_N(dcp_cpRespF$FULL_N),
						       .EMPTY_N(dcp_cpRespF$EMPTY_N));

  // submodule dcp_dcpReqF
  FIFO2 #(.width(32'd78), .guarded(32'd1)) dcp_dcpReqF(.RST_N(wciS0_MReset_n),
						       .CLK(wciS0_Clk),
						       .D_IN(dcp_dcpReqF$D_IN),
						       .ENQ(dcp_dcpReqF$ENQ),
						       .DEQ(dcp_dcpReqF$DEQ),
						       .CLR(dcp_dcpReqF$CLR),
						       .D_OUT(dcp_dcpReqF$D_OUT),
						       .FULL_N(dcp_dcpReqF$FULL_N),
						       .EMPTY_N(dcp_dcpReqF$EMPTY_N));

  // submodule dcp_dcpRespF
  FIFO2 #(.width(32'd44),
	  .guarded(32'd1)) dcp_dcpRespF(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(dcp_dcpRespF$D_IN),
					.ENQ(dcp_dcpRespF$ENQ),
					.DEQ(dcp_dcpRespF$DEQ),
					.CLR(dcp_dcpRespF$CLR),
					.D_OUT(dcp_dcpRespF$D_OUT),
					.FULL_N(dcp_dcpRespF$FULL_N),
					.EMPTY_N(dcp_dcpRespF$EMPTY_N));

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(CLK_gmii_rx_clk),
	      .CLK_txClk(CLK_sys1_clk),
	      .CLK(wciS0_Clk),
	      .RST_N(wciS0_MReset_n),
	      .gmii_col_i(gmac$gmii_col_i),
	      .gmii_crs_i(gmac$gmii_crs_i),
	      .gmii_rx_rx_dv_i(gmac$gmii_rx_rx_dv_i),
	      .gmii_rx_rx_er_i(gmac$gmii_rx_rx_er_i),
	      .gmii_rx_rxd_i(gmac$gmii_rx_rxd_i),
	      .tx_put(gmac$tx_put),
	      .EN_rx_get(gmac$EN_rx_get),
	      .EN_tx_put(gmac$EN_tx_put),
	      .EN_rxOperate(gmac$EN_rxOperate),
	      .EN_txOperate(gmac$EN_txOperate),
	      .gmii_tx_txd(gmac$gmii_tx_txd),
	      .gmii_tx_tx_en(gmac$gmii_tx_tx_en),
	      .gmii_tx_tx_er(gmac$gmii_tx_tx_er),
	      .gmii_led(gmac$gmii_led),
	      .rx_get(gmac$rx_get),
	      .RDY_rx_get(gmac$RDY_rx_get),
	      .RDY_tx_put(gmac$RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(gmac$rxOverFlow),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(gmac$txUnderFlow),
	      .RDY_txUnderFlow(),
	      .CLK_gmii_tx_tx_clk(gmac$CLK_gmii_tx_tx_clk),
	      .CLK_GATE_gmii_tx_tx_clk(),
	      .CLK_rxclkBnd(gmac$CLK_rxclkBnd),
	      .CLK_GATE_rxclkBnd());

  // submodule mdi_fRequest
  FIFO2 #(.width(32'd27),
	  .guarded(32'd1)) mdi_fRequest(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(mdi_fRequest$D_IN),
					.ENQ(mdi_fRequest$ENQ),
					.DEQ(mdi_fRequest$DEQ),
					.CLR(mdi_fRequest$CLR),
					.D_OUT(mdi_fRequest$D_OUT),
					.FULL_N(mdi_fRequest$FULL_N),
					.EMPTY_N(mdi_fRequest$EMPTY_N));

  // submodule mdi_fResponse
  FIFO2 #(.width(32'd17),
	  .guarded(32'd1)) mdi_fResponse(.RST_N(wciS0_MReset_n),
					 .CLK(wciS0_Clk),
					 .D_IN(mdi_fResponse$D_IN),
					 .ENQ(mdi_fResponse$ENQ),
					 .DEQ(mdi_fResponse$DEQ),
					 .CLR(mdi_fResponse$CLR),
					 .D_OUT(),
					 .FULL_N(mdi_fResponse$FULL_N),
					 .EMPTY_N());

  // submodule mdi_rPlayIndex
  Counter #(.width(32'd8), .init(8'd0)) mdi_rPlayIndex(.CLK(wciS0_Clk),
						       .RST_N(wciS0_MReset_n),
						       .DATA_A(mdi_rPlayIndex$DATA_A),
						       .DATA_B(mdi_rPlayIndex$DATA_B),
						       .DATA_C(mdi_rPlayIndex$DATA_C),
						       .DATA_F(mdi_rPlayIndex$DATA_F),
						       .ADDA(mdi_rPlayIndex$ADDA),
						       .ADDB(mdi_rPlayIndex$ADDB),
						       .SETC(mdi_rPlayIndex$SETC),
						       .SETF(mdi_rPlayIndex$SETF),
						       .Q_OUT(mdi_rPlayIndex$Q_OUT));

  // submodule mdi_rPrescaler
  Counter #(.width(32'd4), .init(4'd6)) mdi_rPrescaler(.CLK(wciS0_Clk),
						       .RST_N(wciS0_MReset_n),
						       .DATA_A(mdi_rPrescaler$DATA_A),
						       .DATA_B(mdi_rPrescaler$DATA_B),
						       .DATA_C(mdi_rPrescaler$DATA_C),
						       .DATA_F(mdi_rPrescaler$DATA_F),
						       .ADDA(mdi_rPrescaler$ADDA),
						       .ADDB(mdi_rPrescaler$ADDB),
						       .SETC(mdi_rPrescaler$SETC),
						       .SETF(mdi_rPrescaler$SETF),
						       .Q_OUT(mdi_rPrescaler$Q_OUT));

  // submodule mdi_tMDC
  TriState #(.width(32'd1)) mdi_tMDC(.I(mdi_rMDC),
				     .OE(1'd1),
				     .O(),
				     .IO(mdio_mdc));

  // submodule mdi_tMDD
  TriState #(.width(32'd1)) mdi_tMDD(.I(mdi_rMDD),
				     .OE(mdi_rOutEn),
				     .O(mdi_tMDD$O),
				     .IO(mdio_mdd));

  // submodule phyRst
  MakeReset0 #(.init(1'd0)) phyRst(.CLK(wciS0_Clk),
				   .RST_N(wciS0_MReset_n),
				   .ASSERT_IN(phyRst$ASSERT_IN),
				   .ASSERT_OUT(),
				   .OUT_RST_N(phyRst$OUT_RST_N));

  // submodule rxDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) rxDCPHdrF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(rxDCPHdrF$D_IN),
						      .ENQ(rxDCPHdrF$ENQ),
						      .DEQ(rxDCPHdrF$DEQ),
						      .CLR(rxDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(rxDCPHdrF$FULL_N),
						      .EMPTY_N(rxDCPHdrF$EMPTY_N));

  // submodule txDBGF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) txDBGF(.RST_N(wciS0_MReset_n),
						  .CLK(wciS0_Clk),
						  .D_IN(txDBGF$D_IN),
						  .ENQ(txDBGF$ENQ),
						  .DEQ(txDBGF$DEQ),
						  .CLR(txDBGF$CLR),
						  .D_OUT(),
						  .FULL_N(),
						  .EMPTY_N());

  // submodule txDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) txDCPHdrF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(txDCPHdrF$D_IN),
						      .ENQ(txDCPHdrF$ENQ),
						      .DEQ(txDCPHdrF$DEQ),
						      .CLR(txDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // rule RL_rx_data
  assign WILL_FIRE_RL_rx_data =
	     gmac$RDY_rx_get &&
	     (rxHdr_sV[112] || rxHdr_sV[15:0] != 16'hF040 ||
	      rxDCPHdrF$FULL_N) ;

  // rule RL_rx_dcp
  assign WILL_FIRE_RL_rx_dcp =
	     rxDCPHdrF$EMPTY_N &&
	     CASE_IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_ETC__q4 &&
	     !WILL_FIRE_RL_rx_data ;

  // rule RL_tx_dcp
  assign WILL_FIRE_RL_tx_dcp =
	     ((!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
		gmac$RDY_tx_put :
		dcpRespF_i_notEmpty__41_AND_IF_dcpRespF_first__ETC___d477) &&
	     !WILL_FIRE_RL_rx_data ;

  // rule RL_mdi_run_frame
  assign WILL_FIRE_RL_mdi_run_frame =
	     (mdi_rPlayIndex$Q_OUT != 8'd0 || mdi_rWrite ||
	      mdi_fResponse$FULL_N) &&
	     mdi_rState &&
	     mdi_rPrescaler$Q_OUT == 4'd0 ;

  // rule RL_dcp_dcp_request
  assign WILL_FIRE_RL_dcp_dcp_request =
	     dcp_dcpReqF$EMPTY_N &&
	     IF_dcp_dcpReqF_first__30_BITS_77_TO_76_31_EQ_0_ETC___d141 ;

  // rule RL_dcp_cp_response
  assign CAN_FIRE_RL_dcp_cp_response =
	     dcp_dcpRespF$FULL_N && dcp_cpRespF$EMPTY_N ;

  // inputs to muxes for submodule ports
  assign MUX_dcp_dcpRespF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dcp_dcp_request &&
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0 ||
	      dcp_dcpReqF$D_OUT[77:76] == 2'd1) ;
  assign MUX_dcp_dcpRespF$enq_1__SEL_2 =
	     CAN_FIRE_RL_dcp_cp_response && !WILL_FIRE_RL_dcp_dcp_request ;
  assign MUX_mdi_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ;
  assign MUX_mdi_rState$write_1__SEL_2 = mdi_fRequest$EMPTY_N && !mdi_rState ;
  assign MUX_rxDCPMesgPos$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d313 ;
  assign MUX_rxDCPPLI$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d313 &&
	     rxDCPMesgPos == 5'd1 ;
  assign MUX_rxHdr_mCnt$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     gmac_rx_get_01_BITS_9_TO_8_02_EQ_0_03_OR_gmac__ETC___d295 ;
  assign MUX_rxHdr_pos$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ;
  assign MUX_dcp_dcpRespF$enq_1__VAL_1 =
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0) ?
	       { 34'd1073741825, dcp_dcpReqF$D_OUT[39:32], 2'd0 } :
	       { 34'h1AAAAAAAA, dcp_dcpReqF$D_OUT[71:64], 2'd0 } ;
  assign MUX_dcp_dcpRespF$enq_1__VAL_2 =
	     { 2'd2,
	       dcp_cpRespF$D_OUT[31:0],
	       dcp_cpRespF$D_OUT[39:32],
	       2'd0 } ;
  assign MUX_rxDCPMesgPos$write_1__VAL_1 = rxDCPMesgPos + 5'd1 ;
  assign MUX_rxHdr_mCnt$write_1__VAL_1 = rxHdr_mCnt + 4'd1 ;
  assign MUX_rxHdr_pos$write_1__VAL_1 =
	     (rxHdr_pos < 4'd14) ? rxHdr_pos + 4'd1 : 4'd14 ;
  assign MUX_rxHdr_sV$write_1__VAL_1 =
	     { rxHdr_pos != 4'd13, rxHdr_sV[103:0], gmac$rx_get[7:0] } ;

  // inlined wires
  assign mdi_pwTick$whas = mdi_rPrescaler$Q_OUT == 4'd0 ;

  // register gbeControl
  assign gbeControl$D_IN = 32'h0 ;
  assign gbeControl$EN = 1'b0 ;

  // register macAddress
  assign macAddress$D_IN = 48'h0 ;
  assign macAddress$EN = 1'b0 ;

  // register mdi_rMDC
  assign mdi_rMDC$D_IN =
	     _1448743543117976458853375091858__q10[mdi_rPlayIndex$Q_OUT[6:0]] ;
  assign mdi_rMDC$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rMDD
  assign mdi_rMDD$D_IN = bs__h2369[mdi_rPlayIndex$Q_OUT[6:0]] ;
  assign mdi_rMDD$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rOutEn
  assign mdi_rOutEn$D_IN = bs__h14832[mdi_rPlayIndex$Q_OUT[6:0]] ;
  assign mdi_rOutEn$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rPhyAddr
  assign mdi_rPhyAddr$D_IN = mdi_fRequest$D_OUT[25:21] ;
  assign mdi_rPhyAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rRegAddr
  assign mdi_rRegAddr$D_IN = mdi_fRequest$D_OUT[20:16] ;
  assign mdi_rRegAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rState
  assign mdi_rState$D_IN = !MUX_mdi_rState$write_1__SEL_1 ;
  assign mdi_rState$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ||
	     mdi_fRequest$EMPTY_N && !mdi_rState ;

  // register mdi_rWrite
  assign mdi_rWrite$D_IN = mdi_fRequest$D_OUT[26] ;
  assign mdi_rWrite$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rWriteData
  assign mdi_rWriteData$D_IN = mdi_fRequest$D_OUT[15:0] ;
  assign mdi_rWriteData$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_vrReadData
  assign mdi_vrReadData$D_IN = mdi_tMDD$O ;
  assign mdi_vrReadData$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_1
  assign mdi_vrReadData_1$D_IN = mdi_vrReadData ;
  assign mdi_vrReadData_1$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_10
  assign mdi_vrReadData_10$D_IN = mdi_vrReadData_9 ;
  assign mdi_vrReadData_10$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_11
  assign mdi_vrReadData_11$D_IN = mdi_vrReadData_10 ;
  assign mdi_vrReadData_11$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_12
  assign mdi_vrReadData_12$D_IN = mdi_vrReadData_11 ;
  assign mdi_vrReadData_12$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_13
  assign mdi_vrReadData_13$D_IN = mdi_vrReadData_12 ;
  assign mdi_vrReadData_13$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_14
  assign mdi_vrReadData_14$D_IN = mdi_vrReadData_13 ;
  assign mdi_vrReadData_14$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_15
  assign mdi_vrReadData_15$D_IN = mdi_vrReadData_14 ;
  assign mdi_vrReadData_15$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_2
  assign mdi_vrReadData_2$D_IN = mdi_vrReadData_1 ;
  assign mdi_vrReadData_2$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_3
  assign mdi_vrReadData_3$D_IN = mdi_vrReadData_2 ;
  assign mdi_vrReadData_3$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_4
  assign mdi_vrReadData_4$D_IN = mdi_vrReadData_3 ;
  assign mdi_vrReadData_4$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_5
  assign mdi_vrReadData_5$D_IN = mdi_vrReadData_4 ;
  assign mdi_vrReadData_5$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_6
  assign mdi_vrReadData_6$D_IN = mdi_vrReadData_5 ;
  assign mdi_vrReadData_6$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_7
  assign mdi_vrReadData_7$D_IN = mdi_vrReadData_6 ;
  assign mdi_vrReadData_7$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_8
  assign mdi_vrReadData_8$D_IN = mdi_vrReadData_7 ;
  assign mdi_vrReadData_8$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register mdi_vrReadData_9
  assign mdi_vrReadData_9$D_IN = mdi_vrReadData_8 ;
  assign mdi_vrReadData_9$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q12[mdi_rPlayIndex$Q_OUT[6:0]] ;

  // register phyMdiInit
  assign phyMdiInit$D_IN = 1'd1 ;
  assign phyMdiInit$EN =
	     mdi_fRequest$FULL_N && phyResetWaitCnt == 22'd0 && !phyMdiInit ;

  // register phyResetWaitCnt
  assign phyResetWaitCnt$D_IN =
	     gbeControl[31] ? 22'd1250000 : phyResetWaitCnt - 22'd1 ;
  assign phyResetWaitCnt$EN =
	     gbeControl[31] || (phyResetWaitCnt ^ 22'h200000) > 22'd2097152 ;

  // register rxAbortEOPC
  assign rxAbortEOPC$D_IN = rxAbortEOPC + 32'd1 ;
  assign rxAbortEOPC$EN =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     gmac$rx_get[9:8] != 2'd1 &&
	     gmac$rx_get[9:8] != 2'd2 ;

  // register rxCount
  assign rxCount$D_IN = rxCount + 32'd1 ;
  assign rxCount$EN = WILL_FIRE_RL_rx_data ;

  // register rxDCPCnt
  assign rxDCPCnt$D_IN = 32'h0 ;
  assign rxDCPCnt$EN = 1'b0 ;

  // register rxDCPMesg
  assign rxDCPMesg$D_IN = { rxDCPMesg[103:0], gmac$rx_get[7:0] } ;
  assign rxDCPMesg$EN = MUX_rxDCPMesgPos$write_1__SEL_1 ;

  // register rxDCPMesgPos
  assign rxDCPMesgPos$D_IN =
	     MUX_rxDCPMesgPos$write_1__SEL_1 ?
	       MUX_rxDCPMesgPos$write_1__VAL_1 :
	       5'd0 ;
  assign rxDCPMesgPos$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d313 ||
	     WILL_FIRE_RL_rx_dcp ;

  // register rxDCPPLI
  assign rxDCPPLI$D_IN =
	     MUX_rxDCPPLI$write_1__SEL_1 ? gmac$rx_get[7:0] : 8'd255 ;
  assign rxDCPPLI$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d313 &&
	     rxDCPMesgPos == 5'd1 ||
	     WILL_FIRE_RL_rx_dcp ;

  // register rxEmptyEOPC
  assign rxEmptyEOPC$D_IN = rxEmptyEOPC + 32'd1 ;
  assign rxEmptyEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd2 ;

  // register rxHdrMatchCnt
  assign rxHdrMatchCnt$D_IN =
	     (rxHdr_mCnt == 4'd14) ? rxHdrMatchCnt + 32'd1 : rxHdrMatchCnt ;
  assign rxHdrMatchCnt$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 ;

  // register rxHdr_mCnt
  assign rxHdr_mCnt$D_IN =
	     MUX_rxHdr_mCnt$write_1__SEL_1 ?
	       MUX_rxHdr_mCnt$write_1__VAL_1 :
	       4'd0 ;
  assign rxHdr_mCnt$EN =
	     WILL_FIRE_RL_rx_data &&
	     gmac_rx_get_01_BITS_9_TO_8_02_EQ_0_03_OR_gmac__ETC___d295 ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ;

  // register rxHdr_pV
  assign rxHdr_pV$D_IN = { 1'd0, rxHdr_sV[103:0], gmac$rx_get[7:0] } ;
  assign rxHdr_pV$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] &&
	     rxHdr_pos == 4'd13 ;

  // register rxHdr_pos
  assign rxHdr_pos$D_IN =
	     MUX_rxHdr_pos$write_1__SEL_1 ?
	       MUX_rxHdr_pos$write_1__VAL_1 :
	       4'd0 ;
  assign rxHdr_pos$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ;

  // register rxHdr_sV
  assign rxHdr_sV$D_IN =
	     MUX_rxHdr_pos$write_1__SEL_1 ?
	       MUX_rxHdr_sV$write_1__VAL_1 :
	       113'h10000000000000000000000000000 ;
  assign rxHdr_sV$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ;

  // register rxHeadCap
  assign rxHeadCap$D_IN = { rxHeadCap[119:0], gmac$rx_get[7:0] } ;
  assign rxHeadCap$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxLenCount < 32'd16 ;

  // register rxLenCount
  assign rxLenCount$D_IN = (gmac$rx_get[9:8] == 2'd0) ? x__h61931 : 32'd0 ;
  assign rxLenCount$EN = WILL_FIRE_RL_rx_data ;

  // register rxLenLast
  assign rxLenLast$D_IN = x__h61931 ;
  assign rxLenLast$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 ;

  // register rxOvfCount
  assign rxOvfCount$D_IN = rxOvfCount + 32'd1 ;
  assign rxOvfCount$EN = gmac$rxOverFlow ;

  // register rxPipe
  assign rxPipe$D_IN = { rxPipe[23:0], gmac$rx_get[7:0] } ;
  assign rxPipe$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) ;

  // register rxPos
  assign rxPos$D_IN = (gmac$rx_get[9:8] == 2'd0) ? rxPos + 2'd1 : 2'd0 ;
  assign rxPos$EN = WILL_FIRE_RL_rx_data ;

  // register rxValidEOPC
  assign rxValidEOPC$D_IN = rxValidEOPC + 32'd1 ;
  assign rxValidEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd1 ;

  // register rxValidNoEOPC
  assign rxValidNoEOPC$D_IN = rxValidNoEOPC + 32'd1 ;
  assign rxValidNoEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd0 ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = 1'b0 ;
  assign splitReadInFlight$EN = 1'b0 ;

  // register txCount
  assign txCount$D_IN = 32'h0 ;
  assign txCount$EN = 1'b0 ;

  // register txDBGCnt
  assign txDBGCnt$D_IN = 32'h0 ;
  assign txDBGCnt$EN = 1'b0 ;

  // register txDBGPos
  assign txDBGPos$D_IN = 5'h0 ;
  assign txDBGPos$EN = 1'b0 ;

  // register txDCPCnt
  assign txDCPCnt$D_IN = 32'h0 ;
  assign txDCPCnt$EN = 1'b0 ;

  // register txDCPPos
  assign txDCPPos$D_IN =
	     (!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
	       ((txDCPPos == 5'd13) ? 5'd0 : txDCPPos_45_PLUS_1___d622) :
	       CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 ;
  assign txDCPPos$EN = WILL_FIRE_RL_tx_dcp ;

  // register txUndCount
  assign txUndCount$D_IN = txUndCount + 32'd1 ;
  assign txUndCount$EN = gmac$txUnderFlow ;

  // submodule dcpRespF
  assign dcpRespF$D_IN =
	     { CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5,
	       dcp_dcpRespF$D_OUT[41:0] } ;
  assign dcpRespF$ENQ = dcp_dcpRespF$EMPTY_N && dcpRespF$FULL_N ;
  assign dcpRespF$DEQ =
	     WILL_FIRE_RL_tx_dcp &&
	     rxHdr_sV_90_BIT_112_91_OR_NOT_rxHdr_sV_90_BITS_ETC___d583 ;
  assign dcpRespF$CLR = 1'b0 ;

  // submodule dcp_cpReqF
  assign dcp_cpReqF$D_IN =
	     { dcp_dcpReqF$D_OUT[77:76] != 2'd1,
	       (dcp_dcpReqF$D_OUT[77:76] == 2'd1) ?
		 { dcp_dcpReqF$D_OUT[23:2],
		   dcp_dcpReqF$D_OUT[75:72],
		   dcp_dcpReqF$D_OUT[63:32] } :
		 { 24'hAAAAAA,
		   dcp_dcpReqF$D_OUT[39:32],
		   dcp_dcpReqF$D_OUT[23:2],
		   dcp_dcpReqF$D_OUT[43:40] } } ;
  assign dcp_cpReqF$ENQ =
	     WILL_FIRE_RL_dcp_dcp_request &&
	     dcp_dcpReqF$D_OUT[77:76] != 2'd0 ;
  assign dcp_cpReqF$DEQ = EN_cpClient_request_get ;
  assign dcp_cpReqF$CLR = 1'b0 ;

  // submodule dcp_cpRespF
  assign dcp_cpRespF$D_IN = cpClient_response_put ;
  assign dcp_cpRespF$ENQ = EN_cpClient_response_put ;
  assign dcp_cpRespF$DEQ = MUX_dcp_dcpRespF$enq_1__SEL_2 ;
  assign dcp_cpRespF$CLR = 1'b0 ;

  // submodule dcp_dcpReqF
  always@(IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 or
	  tag__h62141 or rxDCPMesg)
  begin
    case (IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[7:4])
      4'd0:
	  dcp_dcpReqF$D_IN = { 38'h0AAAAAAAAA, tag__h62141, rxDCPMesg[31:0] };
      4'd1:
	  dcp_dcpReqF$D_IN =
	      { 2'd1,
		IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[3:0],
		tag__h62141,
		rxDCPMesg[31:0],
		rxDCPMesg[63:32] };
      default: dcp_dcpReqF$D_IN =
		   { 34'h2AAAAAAAA,
		     IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[3:0],
		     tag__h62141,
		     rxDCPMesg[31:0] };
    endcase
  end
  assign dcp_dcpReqF$ENQ =
	     WILL_FIRE_RL_rx_dcp &&
	     (IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[7:4] ==
	      4'd0 ||
	      IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[7:4] ==
	      4'd1 ||
	      IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[7:4] ==
	      4'd2) ;
  assign dcp_dcpReqF$DEQ = WILL_FIRE_RL_dcp_dcp_request ;
  assign dcp_dcpReqF$CLR = 1'b0 ;

  // submodule dcp_dcpRespF
  assign dcp_dcpRespF$D_IN =
	     MUX_dcp_dcpRespF$enq_1__SEL_1 ?
	       MUX_dcp_dcpRespF$enq_1__VAL_1 :
	       MUX_dcp_dcpRespF$enq_1__VAL_2 ;
  assign dcp_dcpRespF$ENQ =
	     WILL_FIRE_RL_dcp_dcp_request &&
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0 ||
	      dcp_dcpReqF$D_OUT[77:76] == 2'd1) ||
	     CAN_FIRE_RL_dcp_cp_response && !WILL_FIRE_RL_dcp_dcp_request ;
  assign dcp_dcpRespF$DEQ = dcp_dcpRespF$EMPTY_N && dcpRespF$FULL_N ;
  assign dcp_dcpRespF$CLR = 1'b0 ;

  // submodule gmac
  assign gmac$gmii_col_i = gmii_col_i ;
  assign gmac$gmii_crs_i = gmii_crs_i ;
  assign gmac$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac$tx_put =
	     (!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
	       { 2'd0,
		 CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 } :
	       CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 ;
  assign gmac$EN_rx_get = WILL_FIRE_RL_rx_data ;
  assign gmac$EN_tx_put =
	     WILL_FIRE_RL_tx_dcp &&
	     NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d500 ;
  assign gmac$EN_rxOperate = phyResetWaitCnt == 22'd0 ;
  assign gmac$EN_txOperate = phyResetWaitCnt == 22'd0 ;

  // submodule mdi_fRequest
  assign mdi_fRequest$D_IN = { 1'd1, gbeControl[4:0], 21'd1890288 } ;
  assign mdi_fRequest$ENQ =
	     mdi_fRequest$FULL_N && phyResetWaitCnt == 22'd0 && !phyMdiInit ;
  assign mdi_fRequest$DEQ = MUX_mdi_rState$write_1__SEL_2 ;
  assign mdi_fRequest$CLR = 1'b0 ;

  // submodule mdi_fResponse
  assign mdi_fResponse$D_IN = { 1'd1, x_data__h18030 } ;
  assign mdi_fResponse$ENQ =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 &&
	     !mdi_rWrite ;
  assign mdi_fResponse$DEQ = 1'b0 ;
  assign mdi_fResponse$CLR = 1'b0 ;

  // submodule mdi_rPlayIndex
  assign mdi_rPlayIndex$DATA_A = 8'h0 ;
  assign mdi_rPlayIndex$DATA_B = 8'd255 ;
  assign mdi_rPlayIndex$DATA_C = 8'h0 ;
  assign mdi_rPlayIndex$DATA_F = 8'd101 ;
  assign mdi_rPlayIndex$ADDA = 1'b0 ;
  assign mdi_rPlayIndex$ADDB = WILL_FIRE_RL_mdi_run_frame ;
  assign mdi_rPlayIndex$SETC = 1'b0 ;
  assign mdi_rPlayIndex$SETF = MUX_mdi_rState$write_1__SEL_2 ;

  // submodule mdi_rPrescaler
  assign mdi_rPrescaler$DATA_A = 4'h0 ;
  assign mdi_rPrescaler$DATA_B = 4'd15 ;
  assign mdi_rPrescaler$DATA_C = 4'h0 ;
  assign mdi_rPrescaler$DATA_F = 4'd6 ;
  assign mdi_rPrescaler$ADDA = 1'b0 ;
  assign mdi_rPrescaler$ADDB = mdi_rPrescaler$Q_OUT != 4'd0 ;
  assign mdi_rPrescaler$SETC = 1'b0 ;
  assign mdi_rPrescaler$SETF = mdi_rPrescaler$Q_OUT == 4'd0 ;

  // submodule phyRst
  assign phyRst$ASSERT_IN = gbeControl[31] ;

  // submodule rxDCPHdrF
  assign rxDCPHdrF$D_IN = rxHdr_sV[111:0] ;
  assign rxDCPHdrF$ENQ =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 ;
  assign rxDCPHdrF$DEQ = WILL_FIRE_RL_rx_dcp ;
  assign rxDCPHdrF$CLR = 1'b0 ;

  // submodule txDBGF
  assign txDBGF$D_IN = 32'h0 ;
  assign txDBGF$ENQ = 1'b0 ;
  assign txDBGF$DEQ = 1'b0 ;
  assign txDBGF$CLR = 1'b0 ;

  // submodule txDCPHdrF
  assign txDCPHdrF$D_IN = 112'h0 ;
  assign txDCPHdrF$ENQ = 1'b0 ;
  assign txDCPHdrF$DEQ = 1'b0 ;
  assign txDCPHdrF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_dcp_dcpReqF_first__30_BITS_77_TO_76_31_EQ_0_ETC___d141 =
	     (dcp_dcpReqF$D_OUT[77:76] == 2'd0) ?
	       dcp_dcpRespF$FULL_N :
	       (dcp_dcpReqF$D_OUT[77:76] == 2'd1 || dcp_cpReqF$FULL_N) &&
	       (dcp_dcpReqF$D_OUT[77:76] != 2'd1 ||
		dcp_dcpRespF$FULL_N && dcp_cpReqF$FULL_N) ;
  assign IF_rxHdr_pos_07_EQ_0_23_THEN_rxHdr_sV_90_BITS__ETC___d292 =
	     CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 ==
	     CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 ;
  assign IF_txDCPPos_45_EQ_9_63_THEN_0_ELSE_txDCPPos_45_ETC___d664 =
	     (txDCPPos == 5'd9) ? 5'd0 : txDCPPos_45_PLUS_1___d622 ;
  assign NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d313 =
	     !rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040 &&
	     { 3'd0, rxDCPMesgPos } < rxDCPPLI ;
  assign NOT_rxHdr_sV_90_BIT_112_91_07_AND_rxHdr_sV_90__ETC___d500 =
	     !rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040 ||
	     dcpRespF$D_OUT[43:42] == 2'd0 &&
	     (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	      txDCPPos == 5'd3 ||
	      txDCPPos == 5'd4 ||
	      txDCPPos == 5'd5 ||
	      txDCPPos == 5'd6 ||
	      txDCPPos == 5'd7 ||
	      txDCPPos == 5'd8 ||
	      txDCPPos == 5'd9) ||
	     dcpRespF$D_OUT[43:42] != 2'd0 &&
	     (dcpRespF$D_OUT[43:42] == 2'd1 &&
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4 ||
	       txDCPPos == 5'd5) ||
	      dcpRespF$D_OUT[43:42] != 2'd1 &&
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4 ||
	       txDCPPos == 5'd5 ||
	       txDCPPos == 5'd6 ||
	       txDCPPos == 5'd7 ||
	       txDCPPos == 5'd8 ||
	       txDCPPos == 5'd9)) ;
  assign _1448743543117976458853375091858__q10 =
	     102'h12492492492492492492492492 ;
  assign _643371375338640__q12 = 102'h00000000000002492492492490 ;
  assign bs__h14832 =
	     mdi_rWrite ?
	       102'h3FFFFFFFFFFFFFFFFFFFFFFFFF :
	       102'h3FFFFFFFFFFE00000000000000 ;
  assign bs__h2369 =
	     { mdi_rWrite ? 15'd29127 : 15'd29176,
	       pa4__h1968,
	       pa3__h1969,
	       pa2__h1970,
	       pa1__h1971,
	       pa0__h1972,
	       ra4__h1974,
	       ra3__h1975,
	       ra2__h1976,
	       ra1__h1977,
	       ra0__h1978,
	       6'd56,
	       d15__h1980,
	       d14__h1981,
	       d13__h1982,
	       d12__h1983,
	       d11__h1984,
	       d10__h1985,
	       d9__h1986,
	       d8__h1987,
	       d7__h1988,
	       d6__h1989,
	       d5__h1990,
	       d4__h1991,
	       d3__h1992,
	       d2__h1993,
	       d1__h1994,
	       d0__h1995,
	       3'b111 } ;
  assign d0__h1995 = {3{mdi_rWriteData[0]}} ;
  assign d10__h1985 = {3{mdi_rWriteData[10]}} ;
  assign d11__h1984 = {3{mdi_rWriteData[11]}} ;
  assign d12__h1983 = {3{mdi_rWriteData[12]}} ;
  assign d13__h1982 = {3{mdi_rWriteData[13]}} ;
  assign d14__h1981 = {3{mdi_rWriteData[14]}} ;
  assign d15__h1980 = {3{mdi_rWriteData[15]}} ;
  assign d1__h1994 = {3{mdi_rWriteData[1]}} ;
  assign d2__h1993 = {3{mdi_rWriteData[2]}} ;
  assign d3__h1992 = {3{mdi_rWriteData[3]}} ;
  assign d4__h1991 = {3{mdi_rWriteData[4]}} ;
  assign d5__h1990 = {3{mdi_rWriteData[5]}} ;
  assign d6__h1989 = {3{mdi_rWriteData[6]}} ;
  assign d7__h1988 = {3{mdi_rWriteData[7]}} ;
  assign d8__h1987 = {3{mdi_rWriteData[8]}} ;
  assign d9__h1986 = {3{mdi_rWriteData[9]}} ;
  assign dcpRespF_i_notEmpty__41_AND_IF_dcpRespF_first__ETC___d477 =
	     dcpRespF$EMPTY_N &&
	     CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 ;
  assign gmac_rx_get_01_BITS_9_TO_8_02_EQ_0_03_OR_gmac__ETC___d295 =
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] &&
	     !rxHdr_pV[112] &&
	     IF_rxHdr_pos_07_EQ_0_23_THEN_rxHdr_sV_90_BITS__ETC___d292 ;
  assign pa0__h1972 = {3{mdi_rPhyAddr[0]}} ;
  assign pa1__h1971 = {3{mdi_rPhyAddr[1]}} ;
  assign pa2__h1970 = {3{mdi_rPhyAddr[2]}} ;
  assign pa3__h1969 = {3{mdi_rPhyAddr[3]}} ;
  assign pa4__h1968 = {3{mdi_rPhyAddr[4]}} ;
  assign ra0__h1978 = {3{mdi_rRegAddr[0]}} ;
  assign ra1__h1977 = {3{mdi_rRegAddr[1]}} ;
  assign ra2__h1976 = {3{mdi_rRegAddr[2]}} ;
  assign ra3__h1975 = {3{mdi_rRegAddr[3]}} ;
  assign ra4__h1974 = {3{mdi_rRegAddr[4]}} ;
  assign rxHdr_sV_90_BIT_112_91_OR_NOT_rxHdr_sV_90_BITS_ETC___d583 =
	     (rxHdr_sV[112] || rxHdr_sV[15:0] != 16'hF040) &&
	     (dcpRespF$D_OUT[43:42] == 2'd0 && txDCPPos == 5'd9 ||
	      dcpRespF$D_OUT[43:42] != 2'd0 &&
	      (dcpRespF$D_OUT[43:42] == 2'd1 && txDCPPos == 5'd5 ||
	       dcpRespF$D_OUT[43:42] != 2'd1 && txDCPPos == 5'd9)) ;
  assign txDCPPos_45_PLUS_1___d622 = txDCPPos + 5'd1 ;
  assign x__h61931 = rxLenCount + 32'd1 ;
  assign x_data__h18030 =
	     { mdi_vrReadData_15,
	       mdi_vrReadData_14,
	       mdi_vrReadData_13,
	       mdi_vrReadData_12,
	       mdi_vrReadData_11,
	       mdi_vrReadData_10,
	       mdi_vrReadData_9,
	       mdi_vrReadData_8,
	       mdi_vrReadData_7,
	       mdi_vrReadData_6,
	       mdi_vrReadData_5,
	       mdi_vrReadData_4,
	       mdi_vrReadData_3,
	       mdi_vrReadData_2,
	       mdi_vrReadData_1,
	       mdi_vrReadData } ;
  always@(rxDCPMesgPos or rxDCPMesg)
  begin
    case (rxDCPMesgPos)
      5'd6: tag__h62141 = rxDCPMesg[7:0];
      5'd7: tag__h62141 = rxDCPMesg[15:8];
      5'd8: tag__h62141 = rxDCPMesg[23:16];
      5'd9: tag__h62141 = rxDCPMesg[31:24];
      5'd10: tag__h62141 = rxDCPMesg[39:32];
      5'd11: tag__h62141 = rxDCPMesg[47:40];
      5'd12: tag__h62141 = rxDCPMesg[55:48];
      5'd13: tag__h62141 = rxDCPMesg[63:56];
      5'd14: tag__h62141 = rxDCPMesg[71:64];
      5'd15: tag__h62141 = rxDCPMesg[79:72];
      5'd16: tag__h62141 = rxDCPMesg[87:80];
      5'd17: tag__h62141 = rxDCPMesg[95:88];
      5'd18: tag__h62141 = rxDCPMesg[103:96];
      default: tag__h62141 = rxDCPMesg[111:104];
    endcase
  end
  always@(rxHdr_pos or rxHdr_sV)
  begin
    case (rxHdr_pos)
      4'd0:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[7:0];
      4'd1:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[15:8];
      4'd2:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[23:16];
      4'd3:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[31:24];
      4'd4:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[39:32];
      4'd5:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[47:40];
      4'd6:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[55:48];
      4'd7:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[63:56];
      4'd8:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[71:64];
      4'd9:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[79:72];
      4'd10:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[87:80];
      4'd11:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[95:88];
      4'd12:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
	      rxHdr_sV[103:96];
      default: CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q1 =
		   rxHdr_sV[111:104];
    endcase
  end
  always@(rxHdr_pos or rxHdr_pV)
  begin
    case (rxHdr_pos)
      4'd0:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[7:0];
      4'd1:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[15:8];
      4'd2:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[23:16];
      4'd3:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[31:24];
      4'd4:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[39:32];
      4'd5:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[47:40];
      4'd6:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[55:48];
      4'd7:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[63:56];
      4'd8:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[71:64];
      4'd9:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[79:72];
      4'd10:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[87:80];
      4'd11:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[95:88];
      4'd12:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_pV[103:96];
      default: CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q2 =
		   rxHdr_pV[111:104];
    endcase
  end
  always@(txDCPPos or gmac$RDY_tx_put)
  begin
    case (txDCPPos)
      5'd0, 5'd1, 5'd2, 5'd3, 5'd4, 5'd5, 5'd6, 5'd7, 5'd8:
	  IF_txDCPPos_45_EQ_0_46_OR_txDCPPos_45_EQ_1_47__ETC___d672 =
	      gmac$RDY_tx_put;
      default: IF_txDCPPos_45_EQ_0_46_OR_txDCPPos_45_EQ_1_47__ETC___d672 =
		   txDCPPos != 5'd9 || gmac$RDY_tx_put;
    endcase
  end
  always@(dcpRespF$D_OUT or
	  IF_txDCPPos_45_EQ_0_46_OR_txDCPPos_45_EQ_1_47__ETC___d672 or
	  txDCPPos or gmac$RDY_tx_put)
  begin
    case (dcpRespF$D_OUT[43:42])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 =
	      IF_txDCPPos_45_EQ_0_46_OR_txDCPPos_45_EQ_1_47__ETC___d672;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 =
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4) ?
		gmac$RDY_tx_put :
		txDCPPos != 5'd5 || gmac$RDY_tx_put;
      default: CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q3 =
		   IF_txDCPPos_45_EQ_0_46_OR_txDCPPos_45_EQ_1_47__ETC___d672;
    endcase
  end
  always@(rxDCPMesgPos or rxDCPMesg)
  begin
    case (rxDCPMesgPos)
      5'd5:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[7:0];
      5'd6:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[15:8];
      5'd7:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[23:16];
      5'd8:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[31:24];
      5'd9:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[39:32];
      5'd10:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[47:40];
      5'd11:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[55:48];
      5'd12:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[63:56];
      5'd13:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[71:64];
      5'd14:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[79:72];
      5'd15:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[87:80];
      5'd16:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[95:88];
      5'd17:
	  IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
	      rxDCPMesg[103:96];
      default: IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 =
		   rxDCPMesg[111:104];
    endcase
  end
  always@(IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602 or
	  dcp_dcpReqF$FULL_N)
  begin
    case (IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[7:4])
      4'd0, 4'd1:
	  CASE_IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_ETC__q4 =
	      dcp_dcpReqF$FULL_N;
      default: CASE_IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_ETC__q4 =
		   IF_rxDCPMesgPos_08_EQ_5_49_THEN_rxDCPMesg_15_B_ETC___d602[7:4] !=
		   4'd2 ||
		   dcp_dcpReqF$FULL_N;
    endcase
  end
  always@(dcp_dcpRespF$D_OUT)
  begin
    case (dcp_dcpRespF$D_OUT[43:42])
      2'd0, 2'd1:
	  CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5 =
	      dcp_dcpRespF$D_OUT[43:42];
      default: CASE_dcp_dcpRespFD_OUT_BITS_43_TO_42_2_0_dcp__ETC__q5 = 2'd2;
    endcase
  end
  always@(txDCPPos or rxHdr_sV or macAddress)
  begin
    case (5'd13 - txDCPPos)
      5'd0:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[7:0];
      5'd1:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[15:8];
      5'd2:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[7:0];
      5'd3:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[15:8];
      5'd4:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[23:16];
      5'd5:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[31:24];
      5'd6:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[39:32];
      5'd7:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      macAddress[47:40];
      5'd8:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[23:16];
      5'd9:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[31:24];
      5'd10:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[39:32];
      5'd11:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[47:40];
      5'd12:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
	      rxHdr_sV[55:48];
      default: CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q6 =
		   rxHdr_sV[63:56];
    endcase
  end
  always@(txDCPPos or dcpRespF$D_OUT)
  begin
    case (txDCPPos)
      5'd5:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[9:2] };
      5'd6:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[41:34] };
      5'd7:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[33:26] };
      5'd8:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
	      { 2'd0, dcpRespF$D_OUT[25:18] };
      default: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 =
		   { 2'd1, dcpRespF$D_OUT[17:10] };
    endcase
  end
  always@(txDCPPos or dcpRespF$D_OUT)
  begin
    case (txDCPPos)
      5'd0, 5'd2, 5'd3:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 = 10'd0;
      5'd1: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 = 10'd10;
      5'd4: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 = 10'd49;
      5'd5:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[9:2] };
      5'd6:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[41:34] };
      5'd7:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[33:26] };
      5'd8:
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
	      { 2'd0, dcpRespF$D_OUT[25:18] };
      default: CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8 =
		   { 2'd1, dcpRespF$D_OUT[17:10] };
    endcase
  end
  always@(dcpRespF$D_OUT or
	  txDCPPos or
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7 or
	  CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8)
  begin
    case (dcpRespF$D_OUT[43:42])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 =
	      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q8;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 =
	      (txDCPPos == 5'd0) ?
		10'd0 :
		((txDCPPos == 5'd1) ?
		   10'd6 :
		   ((txDCPPos == 5'd2 || txDCPPos == 5'd3) ?
		      10'd0 :
		      ((txDCPPos == 5'd4) ?
			 10'd50 :
			 { 2'd1, dcpRespF$D_OUT[9:2] })));
      default: CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q9 =
		   (txDCPPos == 5'd0) ?
		     10'd0 :
		     ((txDCPPos == 5'd1) ?
			10'd10 :
			((txDCPPos == 5'd2 || txDCPPos == 5'd3) ?
			   10'd0 :
			   ((txDCPPos == 5'd4) ?
			      10'd51 :
			      CASE_txDCPPos_1_CONCAT_dcpRespFD_OUT_BITS_17__ETC__q7)));
    endcase
  end
  always@(dcpRespF$D_OUT or
	  IF_txDCPPos_45_EQ_9_63_THEN_0_ELSE_txDCPPos_45_ETC___d664 or
	  txDCPPos or txDCPPos_45_PLUS_1___d622)
  begin
    case (dcpRespF$D_OUT[43:42])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 =
	      IF_txDCPPos_45_EQ_9_63_THEN_0_ELSE_txDCPPos_45_ETC___d664;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 =
	      (txDCPPos == 5'd5) ? 5'd0 : txDCPPos_45_PLUS_1___d622;
      default: CASE_dcpRespFD_OUT_BITS_43_TO_42_IF_txDCPPos__ETC__q11 =
		   IF_txDCPPos_45_EQ_9_63_THEN_0_ELSE_txDCPPos_45_ETC___d664;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        gbeControl <= `BSV_ASSIGNMENT_DELAY 32'h00000101;
	macAddress <= `BSV_ASSIGNMENT_DELAY 48'h000A35420100;
	mdi_rMDC <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rMDD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyMdiInit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY 22'd1250000;
	rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rxDCPPLI <= `BSV_ASSIGNMENT_DELAY 8'd255;
	rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_pV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHdr_pos <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_sV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHeadCap <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rxLenCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxLenLast <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxOvfCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rxValidEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	txCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDCPPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txUndCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (gbeControl$EN)
	  gbeControl <= `BSV_ASSIGNMENT_DELAY gbeControl$D_IN;
	if (macAddress$EN)
	  macAddress <= `BSV_ASSIGNMENT_DELAY macAddress$D_IN;
	if (mdi_rMDC$EN) mdi_rMDC <= `BSV_ASSIGNMENT_DELAY mdi_rMDC$D_IN;
	if (mdi_rMDD$EN) mdi_rMDD <= `BSV_ASSIGNMENT_DELAY mdi_rMDD$D_IN;
	if (mdi_rOutEn$EN)
	  mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY mdi_rOutEn$D_IN;
	if (mdi_rState$EN)
	  mdi_rState <= `BSV_ASSIGNMENT_DELAY mdi_rState$D_IN;
	if (phyMdiInit$EN)
	  phyMdiInit <= `BSV_ASSIGNMENT_DELAY phyMdiInit$D_IN;
	if (phyResetWaitCnt$EN)
	  phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY phyResetWaitCnt$D_IN;
	if (rxAbortEOPC$EN)
	  rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY rxAbortEOPC$D_IN;
	if (rxCount$EN) rxCount <= `BSV_ASSIGNMENT_DELAY rxCount$D_IN;
	if (rxDCPCnt$EN) rxDCPCnt <= `BSV_ASSIGNMENT_DELAY rxDCPCnt$D_IN;
	if (rxDCPMesgPos$EN)
	  rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY rxDCPMesgPos$D_IN;
	if (rxDCPPLI$EN) rxDCPPLI <= `BSV_ASSIGNMENT_DELAY rxDCPPLI$D_IN;
	if (rxEmptyEOPC$EN)
	  rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY rxEmptyEOPC$D_IN;
	if (rxHdrMatchCnt$EN)
	  rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY rxHdrMatchCnt$D_IN;
	if (rxHdr_mCnt$EN)
	  rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY rxHdr_mCnt$D_IN;
	if (rxHdr_pV$EN) rxHdr_pV <= `BSV_ASSIGNMENT_DELAY rxHdr_pV$D_IN;
	if (rxHdr_pos$EN) rxHdr_pos <= `BSV_ASSIGNMENT_DELAY rxHdr_pos$D_IN;
	if (rxHdr_sV$EN) rxHdr_sV <= `BSV_ASSIGNMENT_DELAY rxHdr_sV$D_IN;
	if (rxHeadCap$EN) rxHeadCap <= `BSV_ASSIGNMENT_DELAY rxHeadCap$D_IN;
	if (rxLenCount$EN)
	  rxLenCount <= `BSV_ASSIGNMENT_DELAY rxLenCount$D_IN;
	if (rxLenLast$EN) rxLenLast <= `BSV_ASSIGNMENT_DELAY rxLenLast$D_IN;
	if (rxOvfCount$EN)
	  rxOvfCount <= `BSV_ASSIGNMENT_DELAY rxOvfCount$D_IN;
	if (rxPos$EN) rxPos <= `BSV_ASSIGNMENT_DELAY rxPos$D_IN;
	if (rxValidEOPC$EN)
	  rxValidEOPC <= `BSV_ASSIGNMENT_DELAY rxValidEOPC$D_IN;
	if (rxValidNoEOPC$EN)
	  rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY rxValidNoEOPC$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (txCount$EN) txCount <= `BSV_ASSIGNMENT_DELAY txCount$D_IN;
	if (txDBGCnt$EN) txDBGCnt <= `BSV_ASSIGNMENT_DELAY txDBGCnt$D_IN;
	if (txDBGPos$EN) txDBGPos <= `BSV_ASSIGNMENT_DELAY txDBGPos$D_IN;
	if (txDCPCnt$EN) txDCPCnt <= `BSV_ASSIGNMENT_DELAY txDCPCnt$D_IN;
	if (txDCPPos$EN) txDCPPos <= `BSV_ASSIGNMENT_DELAY txDCPPos$D_IN;
	if (txUndCount$EN)
	  txUndCount <= `BSV_ASSIGNMENT_DELAY txUndCount$D_IN;
      end
    if (mdi_rPhyAddr$EN)
      mdi_rPhyAddr <= `BSV_ASSIGNMENT_DELAY mdi_rPhyAddr$D_IN;
    if (mdi_rRegAddr$EN)
      mdi_rRegAddr <= `BSV_ASSIGNMENT_DELAY mdi_rRegAddr$D_IN;
    if (mdi_rWrite$EN) mdi_rWrite <= `BSV_ASSIGNMENT_DELAY mdi_rWrite$D_IN;
    if (mdi_rWriteData$EN)
      mdi_rWriteData <= `BSV_ASSIGNMENT_DELAY mdi_rWriteData$D_IN;
    if (mdi_vrReadData$EN)
      mdi_vrReadData <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData$D_IN;
    if (mdi_vrReadData_1$EN)
      mdi_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_1$D_IN;
    if (mdi_vrReadData_10$EN)
      mdi_vrReadData_10 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_10$D_IN;
    if (mdi_vrReadData_11$EN)
      mdi_vrReadData_11 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_11$D_IN;
    if (mdi_vrReadData_12$EN)
      mdi_vrReadData_12 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_12$D_IN;
    if (mdi_vrReadData_13$EN)
      mdi_vrReadData_13 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_13$D_IN;
    if (mdi_vrReadData_14$EN)
      mdi_vrReadData_14 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_14$D_IN;
    if (mdi_vrReadData_15$EN)
      mdi_vrReadData_15 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_15$D_IN;
    if (mdi_vrReadData_2$EN)
      mdi_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_2$D_IN;
    if (mdi_vrReadData_3$EN)
      mdi_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_3$D_IN;
    if (mdi_vrReadData_4$EN)
      mdi_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_4$D_IN;
    if (mdi_vrReadData_5$EN)
      mdi_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_5$D_IN;
    if (mdi_vrReadData_6$EN)
      mdi_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_6$D_IN;
    if (mdi_vrReadData_7$EN)
      mdi_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_7$D_IN;
    if (mdi_vrReadData_8$EN)
      mdi_vrReadData_8 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_8$D_IN;
    if (mdi_vrReadData_9$EN)
      mdi_vrReadData_9 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_9$D_IN;
    if (rxDCPMesg$EN) rxDCPMesg <= `BSV_ASSIGNMENT_DELAY rxDCPMesg$D_IN;
    if (rxPipe$EN) rxPipe <= `BSV_ASSIGNMENT_DELAY rxPipe$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    gbeControl = 32'hAAAAAAAA;
    macAddress = 48'hAAAAAAAAAAAA;
    mdi_rMDC = 1'h0;
    mdi_rMDD = 1'h0;
    mdi_rOutEn = 1'h0;
    mdi_rPhyAddr = 5'h0A;
    mdi_rRegAddr = 5'h0A;
    mdi_rState = 1'h0;
    mdi_rWrite = 1'h0;
    mdi_rWriteData = 16'hAAAA;
    mdi_vrReadData = 1'h0;
    mdi_vrReadData_1 = 1'h0;
    mdi_vrReadData_10 = 1'h0;
    mdi_vrReadData_11 = 1'h0;
    mdi_vrReadData_12 = 1'h0;
    mdi_vrReadData_13 = 1'h0;
    mdi_vrReadData_14 = 1'h0;
    mdi_vrReadData_15 = 1'h0;
    mdi_vrReadData_2 = 1'h0;
    mdi_vrReadData_3 = 1'h0;
    mdi_vrReadData_4 = 1'h0;
    mdi_vrReadData_5 = 1'h0;
    mdi_vrReadData_6 = 1'h0;
    mdi_vrReadData_7 = 1'h0;
    mdi_vrReadData_8 = 1'h0;
    mdi_vrReadData_9 = 1'h0;
    phyMdiInit = 1'h0;
    phyResetWaitCnt = 22'h2AAAAA;
    rxAbortEOPC = 32'hAAAAAAAA;
    rxCount = 32'hAAAAAAAA;
    rxDCPCnt = 32'hAAAAAAAA;
    rxDCPMesg = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxDCPMesgPos = 5'h0A;
    rxDCPPLI = 8'hAA;
    rxEmptyEOPC = 32'hAAAAAAAA;
    rxHdrMatchCnt = 32'hAAAAAAAA;
    rxHdr_mCnt = 4'hA;
    rxHdr_pV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHdr_pos = 4'hA;
    rxHdr_sV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHeadCap = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxLenCount = 32'hAAAAAAAA;
    rxLenLast = 32'hAAAAAAAA;
    rxOvfCount = 32'hAAAAAAAA;
    rxPipe = 32'hAAAAAAAA;
    rxPos = 2'h2;
    rxValidEOPC = 32'hAAAAAAAA;
    rxValidNoEOPC = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    txCount = 32'hAAAAAAAA;
    txDBGCnt = 32'hAAAAAAAA;
    txDBGPos = 5'h0A;
    txDCPCnt = 32'hAAAAAAAA;
    txDCPPos = 5'h0A;
    txUndCount = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkGbeLite

