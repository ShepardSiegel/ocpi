//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Tue Aug 21 18:36:43 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// RDY_macAddr                    O     1 const
// cpClient_request_get           O    59
// RDY_cpClient_request_get       O     1
// RDY_cpClient_response_put      O     1
// dpClient_request_get           O    10
// RDY_dpClient_request_get       O     1
// RDY_dpClient_response_put      O     1
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// RST_N_gmii_rstn                O     1 reset
// CLK_gmii_rx_clk                I     1 clock
// CLK_gmiixo_clk                 I     1 clock
// RST_N_gmiixo_rst               I     1 unused
// CLK_cpClock                    I     1 clock
// RST_N_cpReset                  I     1 reset
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// macAddr_u                      I    48
// cpClient_response_put          I    40
// dpClient_response_put          I    10
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// EN_macAddr                     I     1
// EN_cpClient_response_put       I     1
// EN_dpClient_response_put       I     1
// EN_cpClient_request_get        I     1
// EN_dpClient_request_get        I     1
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGbeLite(CLK_gmii_rx_clk,
		 CLK_gmiixo_clk,
		 RST_N_gmiixo_rst,
		 CLK_cpClock,
		 RST_N_cpReset,
		 wciS0_Clk,
		 wciS0_MReset_n,

		 mdio_mdd,
		 mdio_mdc,

		 macAddr_u,
		 EN_macAddr,
		 RDY_macAddr,

		 EN_cpClient_request_get,
		 cpClient_request_get,
		 RDY_cpClient_request_get,

		 cpClient_response_put,
		 EN_cpClient_response_put,
		 RDY_cpClient_response_put,

		 EN_dpClient_request_get,
		 dpClient_request_get,
		 RDY_dpClient_request_get,

		 dpClient_response_put,
		 EN_dpClient_response_put,
		 RDY_dpClient_response_put,

		 gmii_rx_rxd_i,

		 gmii_rx_rx_dv_i,

		 gmii_rx_rx_er_i,

		 gmii_tx_txd,

		 gmii_tx_tx_en,

		 gmii_tx_tx_er,

		 gmii_col_i,

		 gmii_crs_i,

		 gmii_intr_i,

		 gmii_led,

		 CLK_gmii_tx_tx_clk,
		 CLK_GATE_gmii_tx_tx_clk,

		 CLK_rxclkBnd,
		 CLK_GATE_rxclkBnd,

		 RST_N_gmii_rstn);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  CLK_gmii_rx_clk;
  input  CLK_gmiixo_clk;
  input  RST_N_gmiixo_rst;
  input  CLK_cpClock;
  input  RST_N_cpReset;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  inout  mdio_mdd;
  inout  mdio_mdc;

  // action method macAddr
  input  [47 : 0] macAddr_u;
  input  EN_macAddr;
  output RDY_macAddr;

  // actionvalue method cpClient_request_get
  input  EN_cpClient_request_get;
  output [58 : 0] cpClient_request_get;
  output RDY_cpClient_request_get;

  // action method cpClient_response_put
  input  [39 : 0] cpClient_response_put;
  input  EN_cpClient_response_put;
  output RDY_cpClient_response_put;

  // actionvalue method dpClient_request_get
  input  EN_dpClient_request_get;
  output [9 : 0] dpClient_request_get;
  output RDY_dpClient_request_get;

  // action method dpClient_response_put
  input  [9 : 0] dpClient_response_put;
  input  EN_dpClient_response_put;
  output RDY_dpClient_response_put;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // output resets
  output RST_N_gmii_rstn;

  // signals for module outputs
  wire [58 : 0] cpClient_request_get;
  wire [9 : 0] dpClient_request_get;
  wire [7 : 0] gmii_tx_txd;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       RDY_cpClient_request_get,
       RDY_cpClient_response_put,
       RDY_dpClient_request_get,
       RDY_dpClient_response_put,
       RDY_macAddr,
       RST_N_gmii_rstn,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er;

  // inlined wires
  wire edp_edp_egressIpHeadFsm_abort$wget,
       edp_edp_egressIpHeadFsm_abort$whas,
       edp_edp_egressIpHeadFsm_start_reg_1_1$wget,
       edp_edp_egressIpHeadFsm_start_reg_1_1$whas,
       edp_edp_egressIpHeadFsm_start_wire$wget,
       edp_edp_egressIpHeadFsm_start_wire$whas,
       edp_edp_egressIpHeadFsm_state_fired_1$wget,
       edp_edp_egressIpHeadFsm_state_fired_1$whas,
       edp_edp_egressIpHeadFsm_state_overlap_pw$whas,
       edp_edp_egressIpHeadFsm_state_set_pw$whas,
       mdi_pwTick$whas;

  // register dcp_dcp_doInFlight
  reg dcp_dcp_doInFlight;
  wire dcp_dcp_doInFlight$D_IN, dcp_dcp_doInFlight$EN;

  // register dcp_dcp_lastResp
  reg [44 : 0] dcp_dcp_lastResp;
  wire [44 : 0] dcp_dcp_lastResp$D_IN;
  wire dcp_dcp_lastResp$EN;

  // register dcp_dcp_lastTag
  reg [8 : 0] dcp_dcp_lastTag;
  wire [8 : 0] dcp_dcp_lastTag$D_IN;
  wire dcp_dcp_lastTag$EN;

  // register edpDV
  reg [127 : 0] edpDV;
  wire [127 : 0] edpDV$D_IN;
  wire edpDV$EN;

  // register edp_edp_egressHead
  reg edp_edp_egressHead;
  wire edp_edp_egressHead$D_IN, edp_edp_egressHead$EN;

  // register edp_edp_egressIpHeadFsm_start_reg
  reg edp_edp_egressIpHeadFsm_start_reg;
  wire edp_edp_egressIpHeadFsm_start_reg$D_IN,
       edp_edp_egressIpHeadFsm_start_reg$EN;

  // register edp_edp_egressIpHeadFsm_start_reg_1
  reg edp_edp_egressIpHeadFsm_start_reg_1;
  wire edp_edp_egressIpHeadFsm_start_reg_1$D_IN,
       edp_edp_egressIpHeadFsm_start_reg_1$EN;

  // register edp_edp_egressIpHeadFsm_state_can_overlap
  reg edp_edp_egressIpHeadFsm_state_can_overlap;
  wire edp_edp_egressIpHeadFsm_state_can_overlap$D_IN,
       edp_edp_egressIpHeadFsm_state_can_overlap$EN;

  // register edp_edp_egressIpHeadFsm_state_fired
  reg edp_edp_egressIpHeadFsm_state_fired;
  wire edp_edp_egressIpHeadFsm_state_fired$D_IN,
       edp_edp_egressIpHeadFsm_state_fired$EN;

  // register edp_edp_egressIpHeadFsm_state_mkFSMstate
  reg [3 : 0] edp_edp_egressIpHeadFsm_state_mkFSMstate;
  reg [3 : 0] edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN;
  wire edp_edp_egressIpHeadFsm_state_mkFSMstate$EN;

  // register edp_edp_ix
  reg [2 : 0] edp_edp_ix;
  wire [2 : 0] edp_edp_ix$D_IN;
  wire edp_edp_ix$EN;

  // register edp_edp_lastResp
  reg [9 : 0] edp_edp_lastResp;
  wire [9 : 0] edp_edp_lastResp$D_IN;
  wire edp_edp_lastResp$EN;

  // register edp_edp_lastTag
  reg [8 : 0] edp_edp_lastTag;
  wire [8 : 0] edp_edp_lastTag$D_IN;
  wire edp_edp_lastTag$EN;

  // register gbeControl
  reg [31 : 0] gbeControl;
  wire [31 : 0] gbeControl$D_IN;
  wire gbeControl$EN;

  // register macAddress
  reg [47 : 0] macAddress;
  wire [47 : 0] macAddress$D_IN;
  wire macAddress$EN;

  // register macAddressCP
  reg [47 : 0] macAddressCP;
  wire [47 : 0] macAddressCP$D_IN;
  wire macAddressCP$EN;

  // register mdi_rMDC
  reg mdi_rMDC;
  wire mdi_rMDC$D_IN, mdi_rMDC$EN;

  // register mdi_rMDD
  reg mdi_rMDD;
  wire mdi_rMDD$D_IN, mdi_rMDD$EN;

  // register mdi_rOutEn
  reg mdi_rOutEn;
  wire mdi_rOutEn$D_IN, mdi_rOutEn$EN;

  // register mdi_rPhyAddr
  reg [4 : 0] mdi_rPhyAddr;
  wire [4 : 0] mdi_rPhyAddr$D_IN;
  wire mdi_rPhyAddr$EN;

  // register mdi_rRegAddr
  reg [4 : 0] mdi_rRegAddr;
  wire [4 : 0] mdi_rRegAddr$D_IN;
  wire mdi_rRegAddr$EN;

  // register mdi_rState
  reg mdi_rState;
  wire mdi_rState$D_IN, mdi_rState$EN;

  // register mdi_rWrite
  reg mdi_rWrite;
  wire mdi_rWrite$D_IN, mdi_rWrite$EN;

  // register mdi_rWriteData
  reg [15 : 0] mdi_rWriteData;
  wire [15 : 0] mdi_rWriteData$D_IN;
  wire mdi_rWriteData$EN;

  // register mdi_vrReadData
  reg mdi_vrReadData;
  wire mdi_vrReadData$D_IN, mdi_vrReadData$EN;

  // register mdi_vrReadData_1
  reg mdi_vrReadData_1;
  wire mdi_vrReadData_1$D_IN, mdi_vrReadData_1$EN;

  // register mdi_vrReadData_10
  reg mdi_vrReadData_10;
  wire mdi_vrReadData_10$D_IN, mdi_vrReadData_10$EN;

  // register mdi_vrReadData_11
  reg mdi_vrReadData_11;
  wire mdi_vrReadData_11$D_IN, mdi_vrReadData_11$EN;

  // register mdi_vrReadData_12
  reg mdi_vrReadData_12;
  wire mdi_vrReadData_12$D_IN, mdi_vrReadData_12$EN;

  // register mdi_vrReadData_13
  reg mdi_vrReadData_13;
  wire mdi_vrReadData_13$D_IN, mdi_vrReadData_13$EN;

  // register mdi_vrReadData_14
  reg mdi_vrReadData_14;
  wire mdi_vrReadData_14$D_IN, mdi_vrReadData_14$EN;

  // register mdi_vrReadData_15
  reg mdi_vrReadData_15;
  wire mdi_vrReadData_15$D_IN, mdi_vrReadData_15$EN;

  // register mdi_vrReadData_2
  reg mdi_vrReadData_2;
  wire mdi_vrReadData_2$D_IN, mdi_vrReadData_2$EN;

  // register mdi_vrReadData_3
  reg mdi_vrReadData_3;
  wire mdi_vrReadData_3$D_IN, mdi_vrReadData_3$EN;

  // register mdi_vrReadData_4
  reg mdi_vrReadData_4;
  wire mdi_vrReadData_4$D_IN, mdi_vrReadData_4$EN;

  // register mdi_vrReadData_5
  reg mdi_vrReadData_5;
  wire mdi_vrReadData_5$D_IN, mdi_vrReadData_5$EN;

  // register mdi_vrReadData_6
  reg mdi_vrReadData_6;
  wire mdi_vrReadData_6$D_IN, mdi_vrReadData_6$EN;

  // register mdi_vrReadData_7
  reg mdi_vrReadData_7;
  wire mdi_vrReadData_7$D_IN, mdi_vrReadData_7$EN;

  // register mdi_vrReadData_8
  reg mdi_vrReadData_8;
  wire mdi_vrReadData_8$D_IN, mdi_vrReadData_8$EN;

  // register mdi_vrReadData_9
  reg mdi_vrReadData_9;
  wire mdi_vrReadData_9$D_IN, mdi_vrReadData_9$EN;

  // register merge_fi0Active
  reg merge_fi0Active;
  wire merge_fi0Active$D_IN, merge_fi0Active$EN;

  // register merge_fi0HasPrio
  reg merge_fi0HasPrio;
  reg merge_fi0HasPrio$D_IN;
  wire merge_fi0HasPrio$EN;

  // register merge_fi1Active
  reg merge_fi1Active;
  wire merge_fi1Active$D_IN, merge_fi1Active$EN;

  // register phyMdiInit
  reg phyMdiInit;
  wire phyMdiInit$D_IN, phyMdiInit$EN;

  // register phyResetWaitCnt
  reg [24 : 0] phyResetWaitCnt;
  wire [24 : 0] phyResetWaitCnt$D_IN;
  wire phyResetWaitCnt$EN;

  // register rxAbortEOPC
  reg [31 : 0] rxAbortEOPC;
  wire [31 : 0] rxAbortEOPC$D_IN;
  wire rxAbortEOPC$EN;

  // register rxCount
  reg [31 : 0] rxCount;
  wire [31 : 0] rxCount$D_IN;
  wire rxCount$EN;

  // register rxDCPCnt
  reg [31 : 0] rxDCPCnt;
  wire [31 : 0] rxDCPCnt$D_IN;
  wire rxDCPCnt$EN;

  // register rxDCPMesg
  reg [111 : 0] rxDCPMesg;
  wire [111 : 0] rxDCPMesg$D_IN;
  wire rxDCPMesg$EN;

  // register rxDCPMesgPos
  reg [4 : 0] rxDCPMesgPos;
  wire [4 : 0] rxDCPMesgPos$D_IN;
  wire rxDCPMesgPos$EN;

  // register rxDCPPLI
  reg [7 : 0] rxDCPPLI;
  wire [7 : 0] rxDCPPLI$D_IN;
  wire rxDCPPLI$EN;

  // register rxDCPmt
  reg [7 : 0] rxDCPmt;
  wire [7 : 0] rxDCPmt$D_IN;
  wire rxDCPmt$EN;

  // register rxDCPtag
  reg [7 : 0] rxDCPtag;
  wire [7 : 0] rxDCPtag$D_IN;
  wire rxDCPtag$EN;

  // register rxDropCnt
  reg [31 : 0] rxDropCnt;
  wire [31 : 0] rxDropCnt$D_IN;
  wire rxDropCnt$EN;

  // register rxDropFrame
  reg rxDropFrame;
  wire rxDropFrame$D_IN, rxDropFrame$EN;

  // register rxEmptyEOPC
  reg [31 : 0] rxEmptyEOPC;
  wire [31 : 0] rxEmptyEOPC$D_IN;
  wire rxEmptyEOPC$EN;

  // register rxHdrMatchCnt
  reg [31 : 0] rxHdrMatchCnt;
  wire [31 : 0] rxHdrMatchCnt$D_IN;
  wire rxHdrMatchCnt$EN;

  // register rxHdr_mCnt
  reg [3 : 0] rxHdr_mCnt;
  wire [3 : 0] rxHdr_mCnt$D_IN;
  wire rxHdr_mCnt$EN;

  // register rxHdr_pV
  reg [112 : 0] rxHdr_pV;
  wire [112 : 0] rxHdr_pV$D_IN;
  wire rxHdr_pV$EN;

  // register rxHdr_pos
  reg [3 : 0] rxHdr_pos;
  wire [3 : 0] rxHdr_pos$D_IN;
  wire rxHdr_pos$EN;

  // register rxHdr_sV
  reg [112 : 0] rxHdr_sV;
  wire [112 : 0] rxHdr_sV$D_IN;
  wire rxHdr_sV$EN;

  // register rxHeadCap
  reg [127 : 0] rxHeadCap;
  wire [127 : 0] rxHeadCap$D_IN;
  wire rxHeadCap$EN;

  // register rxLenCount
  reg [31 : 0] rxLenCount;
  wire [31 : 0] rxLenCount$D_IN;
  wire rxLenCount$EN;

  // register rxLenLast
  reg [31 : 0] rxLenLast;
  wire [31 : 0] rxLenLast$D_IN;
  wire rxLenLast$EN;

  // register rxOvfCount
  reg [31 : 0] rxOvfCount;
  wire [31 : 0] rxOvfCount$D_IN;
  wire rxOvfCount$EN;

  // register rxPipe
  reg [31 : 0] rxPipe;
  wire [31 : 0] rxPipe$D_IN;
  wire rxPipe$EN;

  // register rxPos
  reg [1 : 0] rxPos;
  wire [1 : 0] rxPos$D_IN;
  wire rxPos$EN;

  // register rxValidEOPC
  reg [31 : 0] rxValidEOPC;
  wire [31 : 0] rxValidEOPC$D_IN;
  wire rxValidEOPC$EN;

  // register rxValidNoEOPC
  reg [31 : 0] rxValidNoEOPC;
  wire [31 : 0] rxValidNoEOPC$D_IN;
  wire rxValidNoEOPC$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register txCount
  reg [31 : 0] txCount;
  wire [31 : 0] txCount$D_IN;
  wire txCount$EN;

  // register txDBGCnt
  reg [31 : 0] txDBGCnt;
  wire [31 : 0] txDBGCnt$D_IN;
  wire txDBGCnt$EN;

  // register txDBGPos
  reg [4 : 0] txDBGPos;
  wire [4 : 0] txDBGPos$D_IN;
  wire txDBGPos$EN;

  // register txDCPCnt
  reg [31 : 0] txDCPCnt;
  wire [31 : 0] txDCPCnt$D_IN;
  wire txDCPCnt$EN;

  // register txDCPPos
  reg [4 : 0] txDCPPos;
  wire [4 : 0] txDCPPos$D_IN;
  wire txDCPPos$EN;

  // register txUndCount
  reg [31 : 0] txUndCount;
  wire [31 : 0] txUndCount$D_IN;
  wire txUndCount$EN;

  // ports of submodule dcpRespF
  wire [44 : 0] dcpRespF$D_IN, dcpRespF$D_OUT;
  wire dcpRespF$CLR,
       dcpRespF$DEQ,
       dcpRespF$EMPTY_N,
       dcpRespF$ENQ,
       dcpRespF$FULL_N;

  // ports of submodule dcp_cpReqAF
  wire [58 : 0] dcp_cpReqAF$dD_OUT, dcp_cpReqAF$sD_IN;
  wire dcp_cpReqAF$dDEQ,
       dcp_cpReqAF$dEMPTY_N,
       dcp_cpReqAF$sENQ,
       dcp_cpReqAF$sFULL_N;

  // ports of submodule dcp_cpRespAF
  wire [39 : 0] dcp_cpRespAF$dD_OUT, dcp_cpRespAF$sD_IN;
  wire dcp_cpRespAF$dDEQ,
       dcp_cpRespAF$dEMPTY_N,
       dcp_cpRespAF$sENQ,
       dcp_cpRespAF$sFULL_N;

  // ports of submodule dcp_dcp_cpReqF
  wire [58 : 0] dcp_dcp_cpReqF$D_IN, dcp_dcp_cpReqF$D_OUT;
  wire dcp_dcp_cpReqF$CLR,
       dcp_dcp_cpReqF$DEQ,
       dcp_dcp_cpReqF$EMPTY_N,
       dcp_dcp_cpReqF$ENQ,
       dcp_dcp_cpReqF$FULL_N;

  // ports of submodule dcp_dcp_cpRespF
  wire [39 : 0] dcp_dcp_cpRespF$D_IN, dcp_dcp_cpRespF$D_OUT;
  wire dcp_dcp_cpRespF$CLR,
       dcp_dcp_cpRespF$DEQ,
       dcp_dcp_cpRespF$EMPTY_N,
       dcp_dcp_cpRespF$ENQ,
       dcp_dcp_cpRespF$FULL_N;

  // ports of submodule dcp_dcp_dcpReqF
  reg [78 : 0] dcp_dcp_dcpReqF$D_IN;
  wire [78 : 0] dcp_dcp_dcpReqF$D_OUT;
  wire dcp_dcp_dcpReqF$CLR,
       dcp_dcp_dcpReqF$DEQ,
       dcp_dcp_dcpReqF$EMPTY_N,
       dcp_dcp_dcpReqF$ENQ,
       dcp_dcp_dcpReqF$FULL_N;

  // ports of submodule dcp_dcp_dcpRespF
  wire [44 : 0] dcp_dcp_dcpRespF$D_IN, dcp_dcp_dcpRespF$D_OUT;
  wire dcp_dcp_dcpRespF$CLR,
       dcp_dcp_dcpRespF$DEQ,
       dcp_dcp_dcpRespF$EMPTY_N,
       dcp_dcp_dcpRespF$ENQ,
       dcp_dcp_dcpRespF$FULL_N;

  // ports of submodule edpRxF
  wire [9 : 0] edpRxF$D_IN;
  wire edpRxF$CLR, edpRxF$DEQ, edpRxF$ENQ;

  // ports of submodule edp_dgdpReqAF
  wire [9 : 0] edp_dgdpReqAF$dD_OUT, edp_dgdpReqAF$sD_IN;
  wire edp_dgdpReqAF$dDEQ,
       edp_dgdpReqAF$dEMPTY_N,
       edp_dgdpReqAF$sENQ,
       edp_dgdpReqAF$sFULL_N;

  // ports of submodule edp_dgdpRespAF
  wire [9 : 0] edp_dgdpRespAF$dD_OUT, edp_dgdpRespAF$sD_IN;
  wire edp_dgdpRespAF$dDEQ,
       edp_dgdpRespAF$dEMPTY_N,
       edp_dgdpRespAF$sENQ,
       edp_dgdpRespAF$sFULL_N;

  // ports of submodule edp_edp_dgdpReqF
  wire [9 : 0] edp_edp_dgdpReqF$D_IN, edp_edp_dgdpReqF$D_OUT;
  wire edp_edp_dgdpReqF$CLR,
       edp_edp_dgdpReqF$DEQ,
       edp_edp_dgdpReqF$EMPTY_N,
       edp_edp_dgdpReqF$ENQ,
       edp_edp_dgdpReqF$FULL_N;

  // ports of submodule edp_edp_dgdpRespF
  wire [9 : 0] edp_edp_dgdpRespF$D_IN, edp_edp_dgdpRespF$D_OUT;
  wire edp_edp_dgdpRespF$CLR,
       edp_edp_dgdpRespF$DEQ,
       edp_edp_dgdpRespF$EMPTY_N,
       edp_edp_dgdpRespF$ENQ,
       edp_edp_dgdpRespF$FULL_N;

  // ports of submodule edp_edp_edpReqF
  wire [9 : 0] edp_edp_edpReqF$D_IN, edp_edp_edpReqF$D_OUT;
  wire edp_edp_edpReqF$CLR,
       edp_edp_edpReqF$DEQ,
       edp_edp_edpReqF$EMPTY_N,
       edp_edp_edpReqF$ENQ;

  // ports of submodule edp_edp_edpRespF
  reg [9 : 0] edp_edp_edpRespF$D_IN;
  wire [9 : 0] edp_edp_edpRespF$D_OUT;
  wire edp_edp_edpRespF$CLR,
       edp_edp_edpRespF$DEQ,
       edp_edp_edpRespF$EMPTY_N,
       edp_edp_edpRespF$ENQ,
       edp_edp_edpRespF$FULL_N;

  // ports of submodule gmac
  wire [9 : 0] gmac$rx_get, gmac$tx_put;
  wire [7 : 0] gmac$gmii_rx_rxd_i, gmac$gmii_tx_txd;
  wire gmac$CLK_gmii_tx_tx_clk,
       gmac$CLK_rxclkBnd,
       gmac$EN_rxOperate,
       gmac$EN_rx_get,
       gmac$EN_txOperate,
       gmac$EN_tx_put,
       gmac$RDY_rx_get,
       gmac$RDY_tx_put,
       gmac$gmii_col_i,
       gmac$gmii_crs_i,
       gmac$gmii_intr_i,
       gmac$gmii_led,
       gmac$gmii_rx_rx_dv_i,
       gmac$gmii_rx_rx_er_i,
       gmac$gmii_tx_tx_en,
       gmac$gmii_tx_tx_er,
       gmac$rxOverFlow,
       gmac$txUnderFlow;

  // ports of submodule mdi_fRequest
  wire [26 : 0] mdi_fRequest$D_IN, mdi_fRequest$D_OUT;
  wire mdi_fRequest$CLR,
       mdi_fRequest$DEQ,
       mdi_fRequest$EMPTY_N,
       mdi_fRequest$ENQ,
       mdi_fRequest$FULL_N;

  // ports of submodule mdi_fResponse
  wire [16 : 0] mdi_fResponse$D_IN;
  wire mdi_fResponse$CLR,
       mdi_fResponse$DEQ,
       mdi_fResponse$ENQ,
       mdi_fResponse$FULL_N;

  // ports of submodule mdi_rPlayIndex
  wire [7 : 0] mdi_rPlayIndex$DATA_A,
	       mdi_rPlayIndex$DATA_B,
	       mdi_rPlayIndex$DATA_C,
	       mdi_rPlayIndex$DATA_F,
	       mdi_rPlayIndex$Q_OUT;
  wire mdi_rPlayIndex$ADDA,
       mdi_rPlayIndex$ADDB,
       mdi_rPlayIndex$SETC,
       mdi_rPlayIndex$SETF;

  // ports of submodule mdi_rPrescaler
  wire [3 : 0] mdi_rPrescaler$DATA_A,
	       mdi_rPrescaler$DATA_B,
	       mdi_rPrescaler$DATA_C,
	       mdi_rPrescaler$DATA_F,
	       mdi_rPrescaler$Q_OUT;
  wire mdi_rPrescaler$ADDA,
       mdi_rPrescaler$ADDB,
       mdi_rPrescaler$SETC,
       mdi_rPrescaler$SETF;

  // ports of submodule mdi_tMDC
  wire mdi_tMDC$IO;

  // ports of submodule mdi_tMDD
  wire mdi_tMDD$IO, mdi_tMDD$O;

  // ports of submodule merge_fi0
  wire [9 : 0] merge_fi0$D_IN, merge_fi0$D_OUT;
  wire merge_fi0$CLR,
       merge_fi0$DEQ,
       merge_fi0$EMPTY_N,
       merge_fi0$ENQ,
       merge_fi0$FULL_N;

  // ports of submodule merge_fi1
  wire [9 : 0] merge_fi1$D_IN, merge_fi1$D_OUT;
  wire merge_fi1$CLR,
       merge_fi1$DEQ,
       merge_fi1$EMPTY_N,
       merge_fi1$ENQ,
       merge_fi1$FULL_N;

  // ports of submodule merge_fo
  reg [9 : 0] merge_fo$D_IN;
  wire [9 : 0] merge_fo$D_OUT;
  wire merge_fo$CLR,
       merge_fo$DEQ,
       merge_fo$EMPTY_N,
       merge_fo$ENQ,
       merge_fo$FULL_N;

  // ports of submodule phyRst
  wire phyRst$ASSERT_IN, phyRst$OUT_RST_N;

  // ports of submodule rxDCPHdrF
  wire [111 : 0] rxDCPHdrF$D_IN;
  wire rxDCPHdrF$CLR,
       rxDCPHdrF$DEQ,
       rxDCPHdrF$EMPTY_N,
       rxDCPHdrF$ENQ,
       rxDCPHdrF$FULL_N;

  // ports of submodule txDBGF
  wire [31 : 0] txDBGF$D_IN;
  wire txDBGF$CLR, txDBGF$DEQ, txDBGF$ENQ;

  // ports of submodule txDCPHdrF
  wire [111 : 0] txDCPHdrF$D_IN;
  wire txDCPHdrF$CLR, txDCPHdrF$DEQ, txDCPHdrF$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_tx_dcp,
       WILL_FIRE_RL_dcp_dcp_cp_response,
       WILL_FIRE_RL_dcp_dcp_dcp_request,
       WILL_FIRE_RL_edp_edp_edp_egress,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_fsm_start,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3,
       WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3_1,
       WILL_FIRE_RL_mdi_run_frame,
       WILL_FIRE_RL_merge_arbitrate,
       WILL_FIRE_RL_merge_fi0_advance,
       WILL_FIRE_RL_merge_fi1_advance,
       WILL_FIRE_RL_rx_data,
       WILL_FIRE_RL_rx_dcp,
       WILL_FIRE_RL_rx_drop_frame,
       WILL_FIRE_RL_tx_dcp;

  // inputs to muxes for submodule ports
  reg [44 : 0] MUX_dcp_dcp_dcpRespF$enq_1__VAL_1;
  wire [112 : 0] MUX_rxHdr_sV$write_1__VAL_3;
  wire [44 : 0] MUX_dcp_dcp_dcpRespF$enq_1__VAL_2;
  wire [9 : 0] MUX_edp_edp_edpRespF$enq_1__VAL_1,
	       MUX_edp_edp_edpRespF$enq_1__VAL_2,
	       MUX_edp_edp_edpRespF$enq_1__VAL_3,
	       MUX_edp_edp_edpRespF$enq_1__VAL_4,
	       MUX_merge_fo$enq_1__VAL_1,
	       MUX_merge_fo$enq_1__VAL_2,
	       MUX_merge_fo$enq_1__VAL_3;
  wire [4 : 0] MUX_rxDCPMesgPos$write_1__VAL_3;
  wire [3 : 0] MUX_rxHdr_mCnt$write_1__VAL_3, MUX_rxHdr_pos$write_1__VAL_3;
  wire [2 : 0] MUX_edp_edp_ix$write_1__VAL_1;
  wire MUX_dcp_dcp_dcpRespF$enq_1__SEL_1,
       MUX_dcp_dcp_doInFlight$write_1__SEL_1,
       MUX_edp_edp_egressIpHeadFsm_state_mkFSMstate$write_1__SEL_1,
       MUX_edp_edp_ix$write_1__SEL_1,
       MUX_mdi_rState$write_1__SEL_1,
       MUX_mdi_rState$write_1__SEL_2,
       MUX_merge_fi0Active$write_1__SEL_1,
       MUX_merge_fi0Active$write_1__VAL_1,
       MUX_merge_fi1Active$write_1__SEL_1,
       MUX_rxDCPMesgPos$write_1__SEL_3,
       MUX_rxDCPPLI$write_1__SEL_1,
       MUX_rxDropFrame$write_1__SEL_1,
       MUX_rxHdr_mCnt$write_1__SEL_2;

  // remaining internal signals
  reg [9 : 0] CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q19,
	      IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926;
  reg [7 : 0] CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18,
	      CASE_edp_edp_ix_69_0_0_1_0_2_0_3_1_4_35__q7,
	      CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8,
	      CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3,
	      CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2;
  reg [4 : 0] CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q21;
  reg [1 : 0] CASE_dcp_dcp_dcpRespFD_OUT_BITS_44_TO_43_2_0__ETC__q11,
	      CASE_dpClient_response_put_BITS_9_TO_8_3_0_dpC_ETC__q13,
	      CASE_edp_dgdpReqAFdD_OUT_BITS_9_TO_8_3_0_edp__ETC__q1,
	      CASE_edp_dgdpRespAFdD_OUT_BITS_9_TO_8_3_0_edp_ETC__q15,
	      CASE_edp_edp_dgdpReqFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q12,
	      CASE_edp_edp_dgdpRespFD_OUT_BITS_9_TO_8_3_0_e_ETC__q6,
	      CASE_edp_edp_edpReqFD_OUT_BITS_9_TO_8_3_0_edp_ETC__q14,
	      CASE_edp_edp_edpRespFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q20,
	      CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q9,
	      CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q10,
	      CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q16;
  reg CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q4,
      CASE_rxDCPmt_BITS_5_TO_4_NOT_rxDCPmt_BITS_5_TO_ETC__q5,
      IF_txDCPPos_19_EQ_0_20_OR_txDCPPos_19_EQ_1_21__ETC___d937;
  wire [194 : 0] _1434766110945527031733894725304609466537681244_ETC__q17,
		 _643371375338640__q22,
		 bs__h14911,
		 bs__h2386;
  wire [31 : 0] x__h103510;
  wire [15 : 0] x_data__h18109;
  wire [9 : 0] IF_IF_merge_fi0HasPrio_50_THEN_merge_fi0_first_ETC___d468;
  wire [7 : 0] IF_merge_fi0HasPrio_50_THEN_merge_fi0_first__2_ETC___d939;
  wire [4 : 0] IF_txDCPPos_19_EQ_9_37_THEN_0_ELSE_txDCPPos_19_ETC___d1065,
	       txDCPPos_19_PLUS_1___d999;
  wire [2 : 0] d0__h2012,
	       d10__h2002,
	       d11__h2001,
	       d12__h2000,
	       d13__h1999,
	       d14__h1998,
	       d15__h1997,
	       d1__h2011,
	       d2__h2010,
	       d3__h2009,
	       d4__h2008,
	       d5__h2007,
	       d6__h2006,
	       d7__h2005,
	       d8__h2004,
	       d9__h2003,
	       pa0__h1989,
	       pa1__h1988,
	       pa2__h1987,
	       pa3__h1986,
	       pa4__h1985,
	       ra0__h1995,
	       ra1__h1994,
	       ra2__h1993,
	       ra3__h1992,
	       ra4__h1991;
  wire [1 : 0] IF_IF_merge_fi0HasPrio_50_THEN_merge_fi0_first_ETC___d466;
  wire IF_dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30__ETC___d160,
       IF_dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30__ETC___d162,
       IF_rxHdr_pos_22_EQ_0_38_THEN_rxHdr_sV_98_BITS__ETC___d607,
       NOT_rxHdr_sV_98_BIT_112_99_22_AND_rxHdr_sV_98__ETC___d637,
       NOT_rxHdr_sV_98_BIT_112_99_22_AND_rxHdr_sV_98__ETC___d776,
       dcpRespF_i_notEmpty__15_AND_IF_dcpRespF_first__ETC___d751,
       dcp_dcp_dcpReqF_first__29_BITS_39_TO_32_34_EQ__ETC___d919,
       dcp_dcp_dcpReqF_first__29_BITS_71_TO_64_47_EQ__ETC___d918,
       dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30_EQ__ETC___d165,
       dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30_EQ__ETC___d206,
       edp_edp_egressIpHeadFsm_abort_whas__69_AND_edp_ETC___d380,
       edp_edp_ix_01_ULT_2___d302,
       edp_edp_ix_01_ULT_6___d314,
       gmac_rx_get_16_BITS_9_TO_8_17_EQ_0_18_OR_gmac__ETC___d610,
       gmac_rx_get_16_BITS_9_TO_8_17_EQ_0_18_OR_gmac__ETC___d631,
       merge_fo_i_notFull__16_AND_IF_merge_fi0HasPrio_ETC___d452,
       rxHdr_sV_98_BITS_111_TO_64_03_EQ_0xFFFFFFFFFFF_ETC___d628,
       rxHdr_sV_98_BITS_111_TO_64_03_EQ_macAddress_45___d506,
       rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d510,
       rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d855;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = gmac$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // output resets
  assign RST_N_gmii_rstn = phyRst$OUT_RST_N ;

  // action method macAddr
  assign RDY_macAddr = 1'd1 ;

  // actionvalue method cpClient_request_get
  assign cpClient_request_get = dcp_cpReqAF$dD_OUT ;
  assign RDY_cpClient_request_get = dcp_cpReqAF$dEMPTY_N ;

  // action method cpClient_response_put
  assign RDY_cpClient_response_put = dcp_cpRespAF$sFULL_N ;

  // actionvalue method dpClient_request_get
  assign dpClient_request_get =
	     { CASE_edp_dgdpReqAFdD_OUT_BITS_9_TO_8_3_0_edp__ETC__q1,
	       edp_dgdpReqAF$dD_OUT[7:0] } ;
  assign RDY_dpClient_request_get = edp_dgdpReqAF$dEMPTY_N ;

  // action method dpClient_response_put
  assign RDY_dpClient_response_put = edp_dgdpRespAF$sFULL_N ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac$gmii_tx_tx_er ;

  // value method gmii_led
  assign gmii_led = gmac$gmii_led ;

  // submodule dcpRespF
  FIFO2 #(.width(32'd45), .guarded(32'd1)) dcpRespF(.RST_N(wciS0_MReset_n),
						    .CLK(wciS0_Clk),
						    .D_IN(dcpRespF$D_IN),
						    .ENQ(dcpRespF$ENQ),
						    .DEQ(dcpRespF$DEQ),
						    .CLR(dcpRespF$CLR),
						    .D_OUT(dcpRespF$D_OUT),
						    .FULL_N(dcpRespF$FULL_N),
						    .EMPTY_N(dcpRespF$EMPTY_N));

  // submodule dcp_cpReqAF
  SyncFIFO #(.dataWidth(32'd59),
	     .depth(32'd4),
	     .indxWidth(32'd2)) dcp_cpReqAF(.sCLK(wciS0_Clk),
					    .dCLK(CLK_cpClock),
					    .sRST_N(wciS0_MReset_n),
					    .sD_IN(dcp_cpReqAF$sD_IN),
					    .sENQ(dcp_cpReqAF$sENQ),
					    .dDEQ(dcp_cpReqAF$dDEQ),
					    .dD_OUT(dcp_cpReqAF$dD_OUT),
					    .sFULL_N(dcp_cpReqAF$sFULL_N),
					    .dEMPTY_N(dcp_cpReqAF$dEMPTY_N));

  // submodule dcp_cpRespAF
  SyncFIFO #(.dataWidth(32'd40),
	     .depth(32'd4),
	     .indxWidth(32'd2)) dcp_cpRespAF(.sCLK(CLK_cpClock),
					     .dCLK(wciS0_Clk),
					     .sRST_N(RST_N_cpReset),
					     .sD_IN(dcp_cpRespAF$sD_IN),
					     .sENQ(dcp_cpRespAF$sENQ),
					     .dDEQ(dcp_cpRespAF$dDEQ),
					     .dD_OUT(dcp_cpRespAF$dD_OUT),
					     .sFULL_N(dcp_cpRespAF$sFULL_N),
					     .dEMPTY_N(dcp_cpRespAF$dEMPTY_N));

  // submodule dcp_dcp_cpReqF
  FIFO2 #(.width(32'd59),
	  .guarded(32'd1)) dcp_dcp_cpReqF(.RST_N(wciS0_MReset_n),
					  .CLK(wciS0_Clk),
					  .D_IN(dcp_dcp_cpReqF$D_IN),
					  .ENQ(dcp_dcp_cpReqF$ENQ),
					  .DEQ(dcp_dcp_cpReqF$DEQ),
					  .CLR(dcp_dcp_cpReqF$CLR),
					  .D_OUT(dcp_dcp_cpReqF$D_OUT),
					  .FULL_N(dcp_dcp_cpReqF$FULL_N),
					  .EMPTY_N(dcp_dcp_cpReqF$EMPTY_N));

  // submodule dcp_dcp_cpRespF
  FIFO2 #(.width(32'd40),
	  .guarded(32'd1)) dcp_dcp_cpRespF(.RST_N(wciS0_MReset_n),
					   .CLK(wciS0_Clk),
					   .D_IN(dcp_dcp_cpRespF$D_IN),
					   .ENQ(dcp_dcp_cpRespF$ENQ),
					   .DEQ(dcp_dcp_cpRespF$DEQ),
					   .CLR(dcp_dcp_cpRespF$CLR),
					   .D_OUT(dcp_dcp_cpRespF$D_OUT),
					   .FULL_N(dcp_dcp_cpRespF$FULL_N),
					   .EMPTY_N(dcp_dcp_cpRespF$EMPTY_N));

  // submodule dcp_dcp_dcpReqF
  FIFO2 #(.width(32'd79),
	  .guarded(32'd1)) dcp_dcp_dcpReqF(.RST_N(wciS0_MReset_n),
					   .CLK(wciS0_Clk),
					   .D_IN(dcp_dcp_dcpReqF$D_IN),
					   .ENQ(dcp_dcp_dcpReqF$ENQ),
					   .DEQ(dcp_dcp_dcpReqF$DEQ),
					   .CLR(dcp_dcp_dcpReqF$CLR),
					   .D_OUT(dcp_dcp_dcpReqF$D_OUT),
					   .FULL_N(dcp_dcp_dcpReqF$FULL_N),
					   .EMPTY_N(dcp_dcp_dcpReqF$EMPTY_N));

  // submodule dcp_dcp_dcpRespF
  FIFO2 #(.width(32'd45),
	  .guarded(32'd1)) dcp_dcp_dcpRespF(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(dcp_dcp_dcpRespF$D_IN),
					    .ENQ(dcp_dcp_dcpRespF$ENQ),
					    .DEQ(dcp_dcp_dcpRespF$DEQ),
					    .CLR(dcp_dcp_dcpRespF$CLR),
					    .D_OUT(dcp_dcp_dcpRespF$D_OUT),
					    .FULL_N(dcp_dcp_dcpRespF$FULL_N),
					    .EMPTY_N(dcp_dcp_dcpRespF$EMPTY_N));

  // submodule edpRxF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) edpRxF(.RST_N(wciS0_MReset_n),
						  .CLK(wciS0_Clk),
						  .D_IN(edpRxF$D_IN),
						  .ENQ(edpRxF$ENQ),
						  .DEQ(edpRxF$DEQ),
						  .CLR(edpRxF$CLR),
						  .D_OUT(),
						  .FULL_N(),
						  .EMPTY_N());

  // submodule edp_dgdpReqAF
  SyncFIFO #(.dataWidth(32'd10),
	     .depth(32'd4),
	     .indxWidth(32'd2)) edp_dgdpReqAF(.sCLK(wciS0_Clk),
					      .dCLK(CLK_cpClock),
					      .sRST_N(wciS0_MReset_n),
					      .sD_IN(edp_dgdpReqAF$sD_IN),
					      .sENQ(edp_dgdpReqAF$sENQ),
					      .dDEQ(edp_dgdpReqAF$dDEQ),
					      .dD_OUT(edp_dgdpReqAF$dD_OUT),
					      .sFULL_N(edp_dgdpReqAF$sFULL_N),
					      .dEMPTY_N(edp_dgdpReqAF$dEMPTY_N));

  // submodule edp_dgdpRespAF
  SyncFIFO #(.dataWidth(32'd10),
	     .depth(32'd4),
	     .indxWidth(32'd2)) edp_dgdpRespAF(.sCLK(CLK_cpClock),
					       .dCLK(wciS0_Clk),
					       .sRST_N(RST_N_cpReset),
					       .sD_IN(edp_dgdpRespAF$sD_IN),
					       .sENQ(edp_dgdpRespAF$sENQ),
					       .dDEQ(edp_dgdpRespAF$dDEQ),
					       .dD_OUT(edp_dgdpRespAF$dD_OUT),
					       .sFULL_N(edp_dgdpRespAF$sFULL_N),
					       .dEMPTY_N(edp_dgdpRespAF$dEMPTY_N));

  // submodule edp_edp_dgdpReqF
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) edp_edp_dgdpReqF(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(edp_edp_dgdpReqF$D_IN),
					    .ENQ(edp_edp_dgdpReqF$ENQ),
					    .DEQ(edp_edp_dgdpReqF$DEQ),
					    .CLR(edp_edp_dgdpReqF$CLR),
					    .D_OUT(edp_edp_dgdpReqF$D_OUT),
					    .FULL_N(edp_edp_dgdpReqF$FULL_N),
					    .EMPTY_N(edp_edp_dgdpReqF$EMPTY_N));

  // submodule edp_edp_dgdpRespF
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) edp_edp_dgdpRespF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(edp_edp_dgdpRespF$D_IN),
					     .ENQ(edp_edp_dgdpRespF$ENQ),
					     .DEQ(edp_edp_dgdpRespF$DEQ),
					     .CLR(edp_edp_dgdpRespF$CLR),
					     .D_OUT(edp_edp_dgdpRespF$D_OUT),
					     .FULL_N(edp_edp_dgdpRespF$FULL_N),
					     .EMPTY_N(edp_edp_dgdpRespF$EMPTY_N));

  // submodule edp_edp_edpReqF
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) edp_edp_edpReqF(.RST_N(wciS0_MReset_n),
					   .CLK(wciS0_Clk),
					   .D_IN(edp_edp_edpReqF$D_IN),
					   .ENQ(edp_edp_edpReqF$ENQ),
					   .DEQ(edp_edp_edpReqF$DEQ),
					   .CLR(edp_edp_edpReqF$CLR),
					   .D_OUT(edp_edp_edpReqF$D_OUT),
					   .FULL_N(),
					   .EMPTY_N(edp_edp_edpReqF$EMPTY_N));

  // submodule edp_edp_edpRespF
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) edp_edp_edpRespF(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(edp_edp_edpRespF$D_IN),
					    .ENQ(edp_edp_edpRespF$ENQ),
					    .DEQ(edp_edp_edpRespF$DEQ),
					    .CLR(edp_edp_edpRespF$CLR),
					    .D_OUT(edp_edp_edpRespF$D_OUT),
					    .FULL_N(edp_edp_edpRespF$FULL_N),
					    .EMPTY_N(edp_edp_edpRespF$EMPTY_N));

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(CLK_gmii_rx_clk),
	      .CLK_txClk(CLK_gmiixo_clk),
	      .CLK(wciS0_Clk),
	      .RST_N(wciS0_MReset_n),
	      .gmii_col_i(gmac$gmii_col_i),
	      .gmii_crs_i(gmac$gmii_crs_i),
	      .gmii_intr_i(gmac$gmii_intr_i),
	      .gmii_rx_rx_dv_i(gmac$gmii_rx_rx_dv_i),
	      .gmii_rx_rx_er_i(gmac$gmii_rx_rx_er_i),
	      .gmii_rx_rxd_i(gmac$gmii_rx_rxd_i),
	      .tx_put(gmac$tx_put),
	      .EN_rx_get(gmac$EN_rx_get),
	      .EN_tx_put(gmac$EN_tx_put),
	      .EN_rxOperate(gmac$EN_rxOperate),
	      .EN_txOperate(gmac$EN_txOperate),
	      .gmii_tx_txd(gmac$gmii_tx_txd),
	      .gmii_tx_tx_en(gmac$gmii_tx_tx_en),
	      .gmii_tx_tx_er(gmac$gmii_tx_tx_er),
	      .gmii_led(gmac$gmii_led),
	      .rx_get(gmac$rx_get),
	      .RDY_rx_get(gmac$RDY_rx_get),
	      .RDY_tx_put(gmac$RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(gmac$rxOverFlow),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(gmac$txUnderFlow),
	      .RDY_txUnderFlow(),
	      .phyInterrupt(),
	      .RDY_phyInterrupt(),
	      .CLK_gmii_tx_tx_clk(gmac$CLK_gmii_tx_tx_clk),
	      .CLK_GATE_gmii_tx_tx_clk(),
	      .CLK_rxclkBnd(gmac$CLK_rxclkBnd),
	      .CLK_GATE_rxclkBnd());

  // submodule mdi_fRequest
  FIFO2 #(.width(32'd27),
	  .guarded(32'd1)) mdi_fRequest(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(mdi_fRequest$D_IN),
					.ENQ(mdi_fRequest$ENQ),
					.DEQ(mdi_fRequest$DEQ),
					.CLR(mdi_fRequest$CLR),
					.D_OUT(mdi_fRequest$D_OUT),
					.FULL_N(mdi_fRequest$FULL_N),
					.EMPTY_N(mdi_fRequest$EMPTY_N));

  // submodule mdi_fResponse
  FIFO2 #(.width(32'd17),
	  .guarded(32'd1)) mdi_fResponse(.RST_N(wciS0_MReset_n),
					 .CLK(wciS0_Clk),
					 .D_IN(mdi_fResponse$D_IN),
					 .ENQ(mdi_fResponse$ENQ),
					 .DEQ(mdi_fResponse$DEQ),
					 .CLR(mdi_fResponse$CLR),
					 .D_OUT(),
					 .FULL_N(mdi_fResponse$FULL_N),
					 .EMPTY_N());

  // submodule mdi_rPlayIndex
  Counter #(.width(32'd8), .init(8'd0)) mdi_rPlayIndex(.CLK(wciS0_Clk),
						       .RST_N(wciS0_MReset_n),
						       .DATA_A(mdi_rPlayIndex$DATA_A),
						       .DATA_B(mdi_rPlayIndex$DATA_B),
						       .DATA_C(mdi_rPlayIndex$DATA_C),
						       .DATA_F(mdi_rPlayIndex$DATA_F),
						       .ADDA(mdi_rPlayIndex$ADDA),
						       .ADDB(mdi_rPlayIndex$ADDB),
						       .SETC(mdi_rPlayIndex$SETC),
						       .SETF(mdi_rPlayIndex$SETF),
						       .Q_OUT(mdi_rPlayIndex$Q_OUT));

  // submodule mdi_rPrescaler
  Counter #(.width(32'd4), .init(4'd6)) mdi_rPrescaler(.CLK(wciS0_Clk),
						       .RST_N(wciS0_MReset_n),
						       .DATA_A(mdi_rPrescaler$DATA_A),
						       .DATA_B(mdi_rPrescaler$DATA_B),
						       .DATA_C(mdi_rPrescaler$DATA_C),
						       .DATA_F(mdi_rPrescaler$DATA_F),
						       .ADDA(mdi_rPrescaler$ADDA),
						       .ADDB(mdi_rPrescaler$ADDB),
						       .SETC(mdi_rPrescaler$SETC),
						       .SETF(mdi_rPrescaler$SETF),
						       .Q_OUT(mdi_rPrescaler$Q_OUT));

  // submodule mdi_tMDC
  TriState #(.width(32'd1)) mdi_tMDC(.I(mdi_rMDC),
				     .OE(1'd1),
				     .O(),
				     .IO(mdio_mdc));

  // submodule mdi_tMDD
  TriState #(.width(32'd1)) mdi_tMDD(.I(mdi_rMDD),
				     .OE(mdi_rOutEn),
				     .O(mdi_tMDD$O),
				     .IO(mdio_mdd));

  // submodule merge_fi0
  FIFO2 #(.width(32'd10), .guarded(32'd1)) merge_fi0(.RST_N(wciS0_MReset_n),
						     .CLK(wciS0_Clk),
						     .D_IN(merge_fi0$D_IN),
						     .ENQ(merge_fi0$ENQ),
						     .DEQ(merge_fi0$DEQ),
						     .CLR(merge_fi0$CLR),
						     .D_OUT(merge_fi0$D_OUT),
						     .FULL_N(merge_fi0$FULL_N),
						     .EMPTY_N(merge_fi0$EMPTY_N));

  // submodule merge_fi1
  FIFO2 #(.width(32'd10), .guarded(32'd1)) merge_fi1(.RST_N(wciS0_MReset_n),
						     .CLK(wciS0_Clk),
						     .D_IN(merge_fi1$D_IN),
						     .ENQ(merge_fi1$ENQ),
						     .DEQ(merge_fi1$DEQ),
						     .CLR(merge_fi1$CLR),
						     .D_OUT(merge_fi1$D_OUT),
						     .FULL_N(merge_fi1$FULL_N),
						     .EMPTY_N(merge_fi1$EMPTY_N));

  // submodule merge_fo
  FIFO2 #(.width(32'd10), .guarded(32'd1)) merge_fo(.RST_N(wciS0_MReset_n),
						    .CLK(wciS0_Clk),
						    .D_IN(merge_fo$D_IN),
						    .ENQ(merge_fo$ENQ),
						    .DEQ(merge_fo$DEQ),
						    .CLR(merge_fo$CLR),
						    .D_OUT(merge_fo$D_OUT),
						    .FULL_N(merge_fo$FULL_N),
						    .EMPTY_N(merge_fo$EMPTY_N));

  // submodule phyRst
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) phyRst(.CLK(wciS0_Clk),
						      .RST_N(wciS0_MReset_n),
						      .DST_CLK(CLK_cpClock),
						      .ASSERT_IN(phyRst$ASSERT_IN),
						      .ASSERT_OUT(),
						      .OUT_RST_N(phyRst$OUT_RST_N));

  // submodule rxDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) rxDCPHdrF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(rxDCPHdrF$D_IN),
						      .ENQ(rxDCPHdrF$ENQ),
						      .DEQ(rxDCPHdrF$DEQ),
						      .CLR(rxDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(rxDCPHdrF$FULL_N),
						      .EMPTY_N(rxDCPHdrF$EMPTY_N));

  // submodule txDBGF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) txDBGF(.RST_N(wciS0_MReset_n),
						  .CLK(wciS0_Clk),
						  .D_IN(txDBGF$D_IN),
						  .ENQ(txDBGF$ENQ),
						  .DEQ(txDBGF$DEQ),
						  .CLR(txDBGF$CLR),
						  .D_OUT(),
						  .FULL_N(),
						  .EMPTY_N());

  // submodule txDCPHdrF
  FIFO2 #(.width(32'd112), .guarded(32'd1)) txDCPHdrF(.RST_N(wciS0_MReset_n),
						      .CLK(wciS0_Clk),
						      .D_IN(txDCPHdrF$D_IN),
						      .ENQ(txDCPHdrF$ENQ),
						      .DEQ(txDCPHdrF$DEQ),
						      .CLR(txDCPHdrF$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // rule RL_rx_data
  assign WILL_FIRE_RL_rx_data =
	     gmac$RDY_rx_get &&
	     (rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d510 ||
	      rxDCPHdrF$FULL_N) ;

  // rule RL_rx_dcp
  assign WILL_FIRE_RL_rx_dcp =
	     rxDCPHdrF$EMPTY_N &&
	     CASE_rxDCPmt_BITS_5_TO_4_NOT_rxDCPmt_BITS_5_TO_ETC__q5 &&
	     !WILL_FIRE_RL_rx_data ;

  // rule RL_mdi_run_frame
  assign WILL_FIRE_RL_mdi_run_frame =
	     (mdi_rPlayIndex$Q_OUT != 8'd0 || mdi_rWrite ||
	      mdi_fResponse$FULL_N) &&
	     mdi_rState &&
	     mdi_rPrescaler$Q_OUT == 4'd0 ;

  // rule RL_dcp_dcp_dcp_request
  assign WILL_FIRE_RL_dcp_dcp_dcp_request =
	     dcp_dcp_dcpReqF$EMPTY_N &&
	     IF_dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30__ETC___d162 ;

  // rule RL_dcp_dcp_cp_response
  assign WILL_FIRE_RL_dcp_dcp_cp_response =
	     dcp_dcp_dcpRespF$FULL_N && dcp_dcp_cpRespF$EMPTY_N &&
	     !WILL_FIRE_RL_dcp_dcp_dcp_request ;

  // rule RL_edp_edp_edp_egress
  assign WILL_FIRE_RL_edp_edp_edp_egress =
	     edp_edp_dgdpRespF$EMPTY_N && edp_edp_edpRespF$FULL_N ;

  // rule RL_edp_edp_egressIpHeadFsm_action_l51c41
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 =
	     edp_edp_edpRespF$FULL_N && edp_edp_ix_01_ULT_6___d314 &&
	     (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd1 ||
	      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd3) &&
	     !WILL_FIRE_RL_edp_edp_edp_egress ;

  // rule RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 =
	     !edp_edp_ix_01_ULT_6___d314 &&
	     (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd1 ||
	      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd3) ;

  // rule RL_edp_edp_egressIpHeadFsm_action_l52c41
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 =
	     edp_edp_edpRespF$FULL_N && edp_edp_ix_01_ULT_6___d314 &&
	     (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd4 ||
	      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd6) &&
	     !WILL_FIRE_RL_edp_edp_edp_egress ;

  // rule RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 =
	     !edp_edp_ix_01_ULT_6___d314 &&
	     (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd4 ||
	      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd6) ;

  // rule RL_edp_edp_egressIpHeadFsm_action_l53c41
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 =
	     edp_edp_edpRespF$FULL_N && edp_edp_ix_01_ULT_2___d302 &&
	     (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd7 ||
	      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd9) &&
	     !WILL_FIRE_RL_edp_edp_edp_egress ;

  // rule RL_edp_edp_egressIpHeadFsm_fsm_start
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_fsm_start =
	     edp_edp_egressIpHeadFsm_abort_whas__69_AND_edp_ETC___d380 &&
	     edp_edp_egressIpHeadFsm_start_reg ;

  // rule RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5 =
	     edp_edp_egressIpHeadFsm_start_wire$whas &&
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd0 ||
	     !edp_edp_ix_01_ULT_2___d302 &&
	     edp_edp_egressIpHeadFsm_start_wire$whas &&
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd7 ||
	     !edp_edp_ix_01_ULT_2___d302 &&
	     edp_edp_egressIpHeadFsm_start_wire$whas &&
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd9 ;

  // rule RL_edp_edp_egressIpHeadFsm_idle_l50c3
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3 =
	     !edp_edp_ix_01_ULT_2___d302 &&
	     !edp_edp_egressIpHeadFsm_start_wire$whas &&
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd7 ;

  // rule RL_edp_edp_egressIpHeadFsm_idle_l50c3_1
  assign WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3_1 =
	     !edp_edp_ix_01_ULT_2___d302 &&
	     !edp_edp_egressIpHeadFsm_start_wire$whas &&
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd9 ;

  // rule RL_merge_fi0_advance
  assign WILL_FIRE_RL_merge_fi0_advance =
	     merge_fi0$EMPTY_N && merge_fo$FULL_N && !merge_fi1Active &&
	     !WILL_FIRE_RL_merge_arbitrate ;

  // rule RL_merge_fi1_advance
  assign WILL_FIRE_RL_merge_fi1_advance =
	     merge_fo$FULL_N && merge_fi1$EMPTY_N && !merge_fi0Active &&
	     !WILL_FIRE_RL_merge_fi0_advance &&
	     !WILL_FIRE_RL_merge_arbitrate ;

  // rule RL_merge_arbitrate
  assign WILL_FIRE_RL_merge_arbitrate =
	     merge_fo_i_notFull__16_AND_IF_merge_fi0HasPrio_ETC___d452 &&
	     merge_fi0$EMPTY_N &&
	     merge_fi1$EMPTY_N &&
	     !merge_fi0Active &&
	     !merge_fi1Active ;

  // rule RL_tx_dcp
  assign CAN_FIRE_RL_tx_dcp =
	     ((!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
		merge_fi0$FULL_N :
		dcpRespF_i_notEmpty__15_AND_IF_dcpRespF_first__ETC___d751) &&
	     dcpRespF$EMPTY_N ;
  assign WILL_FIRE_RL_tx_dcp = CAN_FIRE_RL_tx_dcp && !WILL_FIRE_RL_rx_data ;

  // rule RL_rx_drop_frame
  assign WILL_FIRE_RL_rx_drop_frame = rxDropFrame && !WILL_FIRE_RL_rx_data ;

  // inputs to muxes for submodule ports
  assign MUX_dcp_dcp_dcpRespF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dcp_dcp_dcp_request &&
	     dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30_EQ__ETC___d165 ;
  assign MUX_dcp_dcp_doInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_dcp_dcp_dcp_request &&
	     (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd0 &&
	      dcp_dcp_dcpReqF$D_OUT[40] ||
	      dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd0 &&
	      (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1 &&
	       dcp_dcp_dcpReqF$D_OUT[76] ||
	       dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd1 &&
	       dcp_dcp_dcpReqF$D_OUT[44])) ;
  assign MUX_edp_edp_egressIpHeadFsm_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3_1 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3 ;
  assign MUX_edp_edp_ix$write_1__SEL_1 =
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2 ;
  assign MUX_mdi_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ;
  assign MUX_mdi_rState$write_1__SEL_2 = mdi_fRequest$EMPTY_N && !mdi_rState ;
  assign MUX_merge_fi0Active$write_1__SEL_1 =
	     WILL_FIRE_RL_merge_arbitrate && merge_fi0HasPrio ;
  assign MUX_merge_fi1Active$write_1__SEL_1 =
	     WILL_FIRE_RL_merge_arbitrate && !merge_fi0HasPrio ;
  assign MUX_rxDCPMesgPos$write_1__SEL_3 =
	     WILL_FIRE_RL_rx_data &&
	     gmac_rx_get_16_BITS_9_TO_8_17_EQ_0_18_OR_gmac__ETC___d631 ;
  assign MUX_rxDCPPLI$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_98_BIT_112_99_22_AND_rxHdr_sV_98__ETC___d637 ;
  assign MUX_rxDropFrame$write_1__SEL_1 =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d510 ;
  assign MUX_rxHdr_mCnt$write_1__SEL_2 =
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ;
  always@(dcp_dcp_dcpReqF$D_OUT or dcp_dcp_lastResp)
  begin
    case (dcp_dcp_dcpReqF$D_OUT[78:77])
      2'd0:
	  MUX_dcp_dcp_dcpRespF$enq_1__VAL_1 =
	      { 2'd0,
		dcp_dcp_dcpReqF$D_OUT[40],
		32'h40000001,
		dcp_dcp_dcpReqF$D_OUT[39:32],
		2'd0 };
      2'd1:
	  MUX_dcp_dcp_dcpRespF$enq_1__VAL_1 =
	      { dcp_dcp_dcpReqF$D_OUT[78:77],
		32'hAAAAAAAA,
		dcp_dcp_dcpReqF$D_OUT[76],
		dcp_dcp_dcpReqF$D_OUT[71:64],
		2'd0 };
      default: MUX_dcp_dcp_dcpRespF$enq_1__VAL_1 =
		   { (dcp_dcp_lastResp[44:43] == 2'd0 ||
		      dcp_dcp_lastResp[44:43] == 2'd1) ?
		       dcp_dcp_lastResp[44:43] :
		       2'd2,
		     dcp_dcp_lastResp[42:0] };
    endcase
  end
  assign MUX_dcp_dcp_dcpRespF$enq_1__VAL_2 =
	     { 2'd2,
	       dcp_dcp_doInFlight,
	       dcp_dcp_cpRespF$D_OUT[31:0],
	       dcp_dcp_cpRespF$D_OUT[39:32],
	       2'd0 } ;
  assign MUX_edp_edp_edpRespF$enq_1__VAL_1 =
	     { CASE_edp_edp_dgdpRespFD_OUT_BITS_9_TO_8_3_0_e_ETC__q6,
	       edp_edp_dgdpRespF$D_OUT[7:0] } ;
  assign MUX_edp_edp_edpRespF$enq_1__VAL_2 =
	     { 2'd0, CASE_edp_edp_ix_69_0_0_1_0_2_0_3_1_4_35__q7 } ;
  assign MUX_edp_edp_edpRespF$enq_1__VAL_3 =
	     { 2'd0,
	       CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8 } ;
  assign MUX_edp_edp_edpRespF$enq_1__VAL_4 =
	     { 2'd0, (edp_edp_ix == 3'd0) ? 8'd240 : 8'd65 } ;
  assign MUX_edp_edp_ix$write_1__VAL_1 = edp_edp_ix + 3'd1 ;
  assign MUX_merge_fi0Active$write_1__VAL_1 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[9:8] == 2'd0 :
	       merge_fi1$D_OUT[9:8] == 2'd0 ;
  assign MUX_merge_fo$enq_1__VAL_1 =
	     { CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q9,
	       merge_fi0$D_OUT[7:0] } ;
  assign MUX_merge_fo$enq_1__VAL_2 =
	     { CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q10,
	       merge_fi1$D_OUT[7:0] } ;
  assign MUX_merge_fo$enq_1__VAL_3 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[9:8] == 2'd0 :
		merge_fi1$D_OUT[9:8] == 2'd0) ?
	       { 2'd0,
		 IF_merge_fi0HasPrio_50_THEN_merge_fi0_first__2_ETC___d939 } :
	       IF_IF_merge_fi0HasPrio_50_THEN_merge_fi0_first_ETC___d468 ;
  assign MUX_rxDCPMesgPos$write_1__VAL_3 = rxDCPMesgPos + 5'd1 ;
  assign MUX_rxHdr_mCnt$write_1__VAL_3 = rxHdr_mCnt + 4'd1 ;
  assign MUX_rxHdr_pos$write_1__VAL_3 =
	     (rxHdr_pos < 4'd14) ? rxHdr_pos + 4'd1 : 4'd14 ;
  assign MUX_rxHdr_sV$write_1__VAL_3 =
	     { rxHdr_pos != 4'd13, rxHdr_sV[103:0], gmac$rx_get[7:0] } ;

  // inlined wires
  assign edp_edp_egressIpHeadFsm_start_wire$wget = 1'd1 ;
  assign edp_edp_egressIpHeadFsm_start_wire$whas =
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_fsm_start ||
	     edp_edp_egressIpHeadFsm_start_reg_1 &&
	     !edp_edp_egressIpHeadFsm_state_fired ;
  assign edp_edp_egressIpHeadFsm_start_reg_1_1$wget = 1'd1 ;
  assign edp_edp_egressIpHeadFsm_start_reg_1_1$whas =
	     edp_edp_egressIpHeadFsm_start_wire$whas ;
  assign edp_edp_egressIpHeadFsm_abort$wget = 1'b0 ;
  assign edp_edp_egressIpHeadFsm_abort$whas = 1'b0 ;
  assign edp_edp_egressIpHeadFsm_state_fired_1$wget = 1'd1 ;
  assign edp_edp_egressIpHeadFsm_state_fired_1$whas =
	     edp_edp_egressIpHeadFsm_state_set_pw$whas ;
  assign mdi_pwTick$whas = mdi_rPrescaler$Q_OUT == 4'd0 ;
  assign edp_edp_egressIpHeadFsm_state_set_pw$whas =
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3_1 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5 ;
  assign edp_edp_egressIpHeadFsm_state_overlap_pw$whas = 1'b0 ;

  // register dcp_dcp_doInFlight
  assign dcp_dcp_doInFlight$D_IN = MUX_dcp_dcp_doInFlight$write_1__SEL_1 ;
  assign dcp_dcp_doInFlight$EN =
	     WILL_FIRE_RL_dcp_dcp_dcp_request &&
	     (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd0 &&
	      dcp_dcp_dcpReqF$D_OUT[40] ||
	      dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd0 &&
	      (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1 &&
	       dcp_dcp_dcpReqF$D_OUT[76] ||
	       dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd1 &&
	       dcp_dcp_dcpReqF$D_OUT[44])) ||
	     WILL_FIRE_RL_dcp_dcp_cp_response ;

  // register dcp_dcp_lastResp
  assign dcp_dcp_lastResp$D_IN = MUX_dcp_dcp_dcpRespF$enq_1__VAL_2 ;
  assign dcp_dcp_lastResp$EN =
	     WILL_FIRE_RL_dcp_dcp_cp_response && !dcp_dcp_doInFlight ;

  // register dcp_dcp_lastTag
  assign dcp_dcp_lastTag$D_IN =
	     { dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd0,
	       (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1) ?
		 dcp_dcp_dcpReqF$D_OUT[71:64] :
		 dcp_dcp_dcpReqF$D_OUT[39:32] } ;
  assign dcp_dcp_lastTag$EN =
	     WILL_FIRE_RL_dcp_dcp_dcp_request &&
	     (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd0 &&
	      !dcp_dcp_dcpReqF$D_OUT[40] ||
	      dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd0 &&
	      (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1 &&
	       (!dcp_dcp_dcpReqF_first__29_BITS_71_TO_64_47_EQ__ETC___d918 ||
		!dcp_dcp_lastTag[8]) &&
	       !dcp_dcp_dcpReqF$D_OUT[76] ||
	       dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd1 &&
	       (!dcp_dcp_dcpReqF_first__29_BITS_39_TO_32_34_EQ__ETC___d919 ||
		!dcp_dcp_lastTag[8]) &&
	       !dcp_dcp_dcpReqF$D_OUT[44])) ;

  // register edpDV
  assign edpDV$D_IN = 128'h0 ;
  assign edpDV$EN = 1'b0 ;

  // register edp_edp_egressHead
  assign edp_edp_egressHead$D_IN = 1'b0 ;
  assign edp_edp_egressHead$EN = 1'b0 ;

  // register edp_edp_egressIpHeadFsm_start_reg
  assign edp_edp_egressIpHeadFsm_start_reg$D_IN = 1'd0 ;
  assign edp_edp_egressIpHeadFsm_start_reg$EN =
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_fsm_start ;

  // register edp_edp_egressIpHeadFsm_start_reg_1
  assign edp_edp_egressIpHeadFsm_start_reg_1$D_IN =
	     edp_edp_egressIpHeadFsm_start_wire$whas ;
  assign edp_edp_egressIpHeadFsm_start_reg_1$EN = 1'd1 ;

  // register edp_edp_egressIpHeadFsm_state_can_overlap
  assign edp_edp_egressIpHeadFsm_state_can_overlap$D_IN =
	     edp_edp_egressIpHeadFsm_state_set_pw$whas ||
	     edp_edp_egressIpHeadFsm_state_can_overlap ;
  assign edp_edp_egressIpHeadFsm_state_can_overlap$EN = 1'd1 ;

  // register edp_edp_egressIpHeadFsm_state_fired
  assign edp_edp_egressIpHeadFsm_state_fired$D_IN =
	     edp_edp_egressIpHeadFsm_state_set_pw$whas ;
  assign edp_edp_egressIpHeadFsm_state_fired$EN = 1'd1 ;

  // register edp_edp_egressIpHeadFsm_state_mkFSMstate
  always@(MUX_edp_edp_egressIpHeadFsm_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 or
	  edp_edp_egressIpHeadFsm_state_mkFSMstate or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_edp_edp_egressIpHeadFsm_state_mkFSMstate$write_1__SEL_1:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd2;
      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd5;
      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd8;
      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8:
	  edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN = 4'd9;
      default: edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign edp_edp_egressIpHeadFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3_1 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_idle_l50c3 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8 ;

  // register edp_edp_ix
  assign edp_edp_ix$D_IN =
	     MUX_edp_edp_ix$write_1__SEL_1 ?
	       MUX_edp_edp_ix$write_1__VAL_1 :
	       3'd0 ;
  assign edp_edp_ix$EN =
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	     edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5 ;

  // register edp_edp_lastResp
  assign edp_edp_lastResp$D_IN = 10'h0 ;
  assign edp_edp_lastResp$EN = 1'b0 ;

  // register edp_edp_lastTag
  assign edp_edp_lastTag$D_IN = 9'h0 ;
  assign edp_edp_lastTag$EN = 1'b0 ;

  // register gbeControl
  assign gbeControl$D_IN = 32'h0 ;
  assign gbeControl$EN = 1'b0 ;

  // register macAddress
  assign macAddress$D_IN = macAddressCP ;
  assign macAddress$EN = 1'd1 ;

  // register macAddressCP
  assign macAddressCP$D_IN = macAddr_u ;
  assign macAddressCP$EN = EN_macAddr ;

  // register mdi_rMDC
  assign mdi_rMDC$D_IN =
	     _1434766110945527031733894725304609466537681244_ETC__q17[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rMDC$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rMDD
  assign mdi_rMDD$D_IN = bs__h2386[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rMDD$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rOutEn
  assign mdi_rOutEn$D_IN = bs__h14911[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rOutEn$EN = WILL_FIRE_RL_mdi_run_frame ;

  // register mdi_rPhyAddr
  assign mdi_rPhyAddr$D_IN = mdi_fRequest$D_OUT[25:21] ;
  assign mdi_rPhyAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rRegAddr
  assign mdi_rRegAddr$D_IN = mdi_fRequest$D_OUT[20:16] ;
  assign mdi_rRegAddr$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rState
  assign mdi_rState$D_IN = !MUX_mdi_rState$write_1__SEL_1 ;
  assign mdi_rState$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ||
	     mdi_fRequest$EMPTY_N && !mdi_rState ;

  // register mdi_rWrite
  assign mdi_rWrite$D_IN = mdi_fRequest$D_OUT[26] ;
  assign mdi_rWrite$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_rWriteData
  assign mdi_rWriteData$D_IN = mdi_fRequest$D_OUT[15:0] ;
  assign mdi_rWriteData$EN = MUX_mdi_rState$write_1__SEL_2 ;

  // register mdi_vrReadData
  assign mdi_vrReadData$D_IN = mdi_tMDD$O ;
  assign mdi_vrReadData$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_1
  assign mdi_vrReadData_1$D_IN = mdi_vrReadData ;
  assign mdi_vrReadData_1$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_10
  assign mdi_vrReadData_10$D_IN = mdi_vrReadData_9 ;
  assign mdi_vrReadData_10$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_11
  assign mdi_vrReadData_11$D_IN = mdi_vrReadData_10 ;
  assign mdi_vrReadData_11$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_12
  assign mdi_vrReadData_12$D_IN = mdi_vrReadData_11 ;
  assign mdi_vrReadData_12$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_13
  assign mdi_vrReadData_13$D_IN = mdi_vrReadData_12 ;
  assign mdi_vrReadData_13$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_14
  assign mdi_vrReadData_14$D_IN = mdi_vrReadData_13 ;
  assign mdi_vrReadData_14$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_15
  assign mdi_vrReadData_15$D_IN = mdi_vrReadData_14 ;
  assign mdi_vrReadData_15$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_2
  assign mdi_vrReadData_2$D_IN = mdi_vrReadData_1 ;
  assign mdi_vrReadData_2$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_3
  assign mdi_vrReadData_3$D_IN = mdi_vrReadData_2 ;
  assign mdi_vrReadData_3$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_4
  assign mdi_vrReadData_4$D_IN = mdi_vrReadData_3 ;
  assign mdi_vrReadData_4$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_5
  assign mdi_vrReadData_5$D_IN = mdi_vrReadData_4 ;
  assign mdi_vrReadData_5$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_6
  assign mdi_vrReadData_6$D_IN = mdi_vrReadData_5 ;
  assign mdi_vrReadData_6$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_7
  assign mdi_vrReadData_7$D_IN = mdi_vrReadData_6 ;
  assign mdi_vrReadData_7$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_8
  assign mdi_vrReadData_8$D_IN = mdi_vrReadData_7 ;
  assign mdi_vrReadData_8$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_9
  assign mdi_vrReadData_9$D_IN = mdi_vrReadData_8 ;
  assign mdi_vrReadData_9$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q22[mdi_rPlayIndex$Q_OUT] ;

  // register merge_fi0Active
  assign merge_fi0Active$D_IN =
	     MUX_merge_fi0Active$write_1__SEL_1 ?
	       MUX_merge_fi0Active$write_1__VAL_1 :
	       merge_fi0$D_OUT[9:8] == 2'd0 ;
  assign merge_fi0Active$EN =
	     WILL_FIRE_RL_merge_arbitrate && merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi0_advance ;

  // register merge_fi0HasPrio
  always@(WILL_FIRE_RL_merge_arbitrate or
	  merge_fi0HasPrio or
	  WILL_FIRE_RL_merge_fi0_advance or WILL_FIRE_RL_merge_fi1_advance)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_merge_arbitrate: merge_fi0HasPrio$D_IN = !merge_fi0HasPrio;
      WILL_FIRE_RL_merge_fi0_advance: merge_fi0HasPrio$D_IN = 1'd0;
      WILL_FIRE_RL_merge_fi1_advance: merge_fi0HasPrio$D_IN = 1'd1;
      default: merge_fi0HasPrio$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign merge_fi0HasPrio$EN =
	     WILL_FIRE_RL_merge_arbitrate || WILL_FIRE_RL_merge_fi0_advance ||
	     WILL_FIRE_RL_merge_fi1_advance ;

  // register merge_fi1Active
  assign merge_fi1Active$D_IN =
	     MUX_merge_fi1Active$write_1__SEL_1 ?
	       MUX_merge_fi0Active$write_1__VAL_1 :
	       merge_fi1$D_OUT[9:8] == 2'd0 ;
  assign merge_fi1Active$EN =
	     WILL_FIRE_RL_merge_arbitrate && !merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi1_advance ;

  // register phyMdiInit
  assign phyMdiInit$D_IN = 1'd1 ;
  assign phyMdiInit$EN =
	     mdi_fRequest$FULL_N && phyResetWaitCnt == 25'd0 && !phyMdiInit ;

  // register phyResetWaitCnt
  assign phyResetWaitCnt$D_IN =
	     gbeControl[31] ?
	       25'd753125 :
	       (((phyResetWaitCnt ^ 25'h1000000) <= 25'd16777216) ?
		  25'd0 :
		  phyResetWaitCnt - 25'd1) ;
  assign phyResetWaitCnt$EN = 1'd1 ;

  // register rxAbortEOPC
  assign rxAbortEOPC$D_IN = rxAbortEOPC + 32'd1 ;
  assign rxAbortEOPC$EN =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     gmac$rx_get[9:8] != 2'd1 &&
	     gmac$rx_get[9:8] != 2'd2 ;

  // register rxCount
  assign rxCount$D_IN = rxCount + 32'd1 ;
  assign rxCount$EN = WILL_FIRE_RL_rx_data ;

  // register rxDCPCnt
  assign rxDCPCnt$D_IN = 32'h0 ;
  assign rxDCPCnt$EN = 1'b0 ;

  // register rxDCPMesg
  assign rxDCPMesg$D_IN = { rxDCPMesg[103:0], gmac$rx_get[7:0] } ;
  assign rxDCPMesg$EN = MUX_rxDCPMesgPos$write_1__SEL_3 ;

  // register rxDCPMesgPos
  assign rxDCPMesgPos$D_IN =
	     (WILL_FIRE_RL_rx_drop_frame || WILL_FIRE_RL_rx_dcp) ?
	       5'd0 :
	       MUX_rxDCPMesgPos$write_1__VAL_3 ;
  assign rxDCPMesgPos$EN =
	     WILL_FIRE_RL_rx_data &&
	     gmac_rx_get_16_BITS_9_TO_8_17_EQ_0_18_OR_gmac__ETC___d631 ||
	     WILL_FIRE_RL_rx_dcp ||
	     WILL_FIRE_RL_rx_drop_frame ;

  // register rxDCPPLI
  assign rxDCPPLI$D_IN =
	     MUX_rxDCPPLI$write_1__SEL_1 ? gmac$rx_get[7:0] : 8'd255 ;
  assign rxDCPPLI$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     NOT_rxHdr_sV_98_BIT_112_99_22_AND_rxHdr_sV_98__ETC___d637 ||
	     WILL_FIRE_RL_rx_dcp ;

  // register rxDCPmt
  assign rxDCPmt$D_IN = gmac$rx_get[7:0] ;
  assign rxDCPmt$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     rxHdr_sV_98_BITS_111_TO_64_03_EQ_0xFFFFFFFFFFF_ETC___d628 &&
	     rxDCPMesgPos == 5'd4 ;

  // register rxDCPtag
  assign rxDCPtag$D_IN = gmac$rx_get[7:0] ;
  assign rxDCPtag$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     rxHdr_sV_98_BITS_111_TO_64_03_EQ_0xFFFFFFFFFFF_ETC___d628 &&
	     rxDCPMesgPos == 5'd5 ;

  // register rxDropCnt
  assign rxDropCnt$D_IN = rxDropCnt + 32'd1 ;
  assign rxDropCnt$EN = WILL_FIRE_RL_rx_drop_frame ;

  // register rxDropFrame
  assign rxDropFrame$D_IN = MUX_rxDropFrame$write_1__SEL_1 ;
  assign rxDropFrame$EN =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d510 ||
	     WILL_FIRE_RL_rx_drop_frame ;

  // register rxEmptyEOPC
  assign rxEmptyEOPC$D_IN = rxEmptyEOPC + 32'd1 ;
  assign rxEmptyEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd2 ;

  // register rxHdrMatchCnt
  assign rxHdrMatchCnt$D_IN =
	     (rxHdr_mCnt == 4'd14) ? rxHdrMatchCnt + 32'd1 : rxHdrMatchCnt ;
  assign rxHdrMatchCnt$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 ;

  // register rxHdr_mCnt
  assign rxHdr_mCnt$D_IN =
	     (WILL_FIRE_RL_rx_drop_frame || MUX_rxHdr_mCnt$write_1__SEL_2) ?
	       4'd0 :
	       MUX_rxHdr_mCnt$write_1__VAL_3 ;
  assign rxHdr_mCnt$EN =
	     WILL_FIRE_RL_rx_data &&
	     gmac_rx_get_16_BITS_9_TO_8_17_EQ_0_18_OR_gmac__ETC___d610 ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ||
	     WILL_FIRE_RL_rx_drop_frame ;

  // register rxHdr_pV
  assign rxHdr_pV$D_IN = { 1'd0, rxHdr_sV[103:0], gmac$rx_get[7:0] } ;
  assign rxHdr_pV$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] &&
	     rxHdr_pos == 4'd13 ;

  // register rxHdr_pos
  assign rxHdr_pos$D_IN =
	     (WILL_FIRE_RL_rx_drop_frame || MUX_rxHdr_mCnt$write_1__SEL_2) ?
	       4'd0 :
	       MUX_rxHdr_pos$write_1__VAL_3 ;
  assign rxHdr_pos$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ||
	     WILL_FIRE_RL_rx_drop_frame ;

  // register rxHdr_sV
  assign rxHdr_sV$D_IN =
	     (WILL_FIRE_RL_rx_drop_frame || MUX_rxHdr_mCnt$write_1__SEL_2) ?
	       113'h10000000000000000000000000000 :
	       MUX_rxHdr_sV$write_1__VAL_3 ;
  assign rxHdr_sV$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] ||
	     WILL_FIRE_RL_tx_dcp && !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     txDCPPos == 5'd13 ||
	     WILL_FIRE_RL_rx_drop_frame ;

  // register rxHeadCap
  assign rxHeadCap$D_IN = { rxHeadCap[119:0], gmac$rx_get[7:0] } ;
  assign rxHeadCap$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxLenCount < 32'd16 ;

  // register rxLenCount
  assign rxLenCount$D_IN = (gmac$rx_get[9:8] == 2'd0) ? x__h103510 : 32'd0 ;
  assign rxLenCount$EN = WILL_FIRE_RL_rx_data ;

  // register rxLenLast
  assign rxLenLast$D_IN = x__h103510 ;
  assign rxLenLast$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 ;

  // register rxOvfCount
  assign rxOvfCount$D_IN = rxOvfCount + 32'd1 ;
  assign rxOvfCount$EN = gmac$rxOverFlow ;

  // register rxPipe
  assign rxPipe$D_IN = { rxPipe[23:0], gmac$rx_get[7:0] } ;
  assign rxPipe$EN =
	     WILL_FIRE_RL_rx_data &&
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) ;

  // register rxPos
  assign rxPos$D_IN = (gmac$rx_get[9:8] == 2'd0) ? rxPos + 2'd1 : 2'd0 ;
  assign rxPos$EN = WILL_FIRE_RL_rx_data ;

  // register rxValidEOPC
  assign rxValidEOPC$D_IN = rxValidEOPC + 32'd1 ;
  assign rxValidEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd1 ;

  // register rxValidNoEOPC
  assign rxValidNoEOPC$D_IN = rxValidNoEOPC + 32'd1 ;
  assign rxValidNoEOPC$EN = WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] == 2'd0 ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = 1'b0 ;
  assign splitReadInFlight$EN = 1'b0 ;

  // register txCount
  assign txCount$D_IN = 32'h0 ;
  assign txCount$EN = 1'b0 ;

  // register txDBGCnt
  assign txDBGCnt$D_IN = 32'h0 ;
  assign txDBGCnt$EN = 1'b0 ;

  // register txDBGPos
  assign txDBGPos$D_IN = 5'h0 ;
  assign txDBGPos$EN = 1'b0 ;

  // register txDCPCnt
  assign txDCPCnt$D_IN = 32'h0 ;
  assign txDCPCnt$EN = 1'b0 ;

  // register txDCPPos
  assign txDCPPos$D_IN =
	     (!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
	       ((txDCPPos == 5'd13) ? 5'd0 : txDCPPos_19_PLUS_1___d999) :
	       CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q21 ;
  assign txDCPPos$EN = WILL_FIRE_RL_tx_dcp ;

  // register txUndCount
  assign txUndCount$D_IN = txUndCount + 32'd1 ;
  assign txUndCount$EN = gmac$txUnderFlow ;

  // submodule dcpRespF
  assign dcpRespF$D_IN =
	     { CASE_dcp_dcp_dcpRespFD_OUT_BITS_44_TO_43_2_0__ETC__q11,
	       dcp_dcp_dcpRespF$D_OUT[42:0] } ;
  assign dcpRespF$ENQ = dcp_dcp_dcpRespF$EMPTY_N && dcpRespF$FULL_N ;
  assign dcpRespF$DEQ =
	     WILL_FIRE_RL_tx_dcp &&
	     rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d855 ;
  assign dcpRespF$CLR = 1'b0 ;

  // submodule dcp_cpReqAF
  assign dcp_cpReqAF$sD_IN = dcp_dcp_cpReqF$D_OUT ;
  assign dcp_cpReqAF$sENQ = dcp_cpReqAF$sFULL_N && dcp_dcp_cpReqF$EMPTY_N ;
  assign dcp_cpReqAF$dDEQ = EN_cpClient_request_get ;

  // submodule dcp_cpRespAF
  assign dcp_cpRespAF$sD_IN = cpClient_response_put ;
  assign dcp_cpRespAF$sENQ = EN_cpClient_response_put ;
  assign dcp_cpRespAF$dDEQ = dcp_cpRespAF$dEMPTY_N && dcp_dcp_cpRespF$FULL_N ;

  // submodule dcp_dcp_cpReqF
  assign dcp_dcp_cpReqF$D_IN =
	     { dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd1,
	       (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1) ?
		 { dcp_dcp_dcpReqF$D_OUT[23:2],
		   dcp_dcp_dcpReqF$D_OUT[75:72],
		   dcp_dcp_dcpReqF$D_OUT[63:32] } :
		 { 24'hAAAAAA,
		   dcp_dcp_dcpReqF$D_OUT[39:32],
		   dcp_dcp_dcpReqF$D_OUT[23:2],
		   dcp_dcp_dcpReqF$D_OUT[43:40] } } ;
  assign dcp_dcp_cpReqF$ENQ =
	     WILL_FIRE_RL_dcp_dcp_dcp_request &&
	     dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd0 &&
	     dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30_EQ__ETC___d206 ;
  assign dcp_dcp_cpReqF$DEQ = dcp_cpReqAF$sFULL_N && dcp_dcp_cpReqF$EMPTY_N ;
  assign dcp_dcp_cpReqF$CLR = 1'b0 ;

  // submodule dcp_dcp_cpRespF
  assign dcp_dcp_cpRespF$D_IN = dcp_cpRespAF$dD_OUT ;
  assign dcp_dcp_cpRespF$ENQ =
	     dcp_cpRespAF$dEMPTY_N && dcp_dcp_cpRespF$FULL_N ;
  assign dcp_dcp_cpRespF$DEQ = WILL_FIRE_RL_dcp_dcp_cp_response ;
  assign dcp_dcp_cpRespF$CLR = 1'b0 ;

  // submodule dcp_dcp_dcpReqF
  always@(rxDCPmt or rxDCPtag or rxDCPMesg)
  begin
    case (rxDCPmt[5:4])
      2'd0:
	  dcp_dcp_dcpReqF$D_IN =
	      { 38'h0AAAAAAAAA, rxDCPmt[6], rxDCPtag, rxDCPMesg[31:0] };
      2'd1:
	  dcp_dcp_dcpReqF$D_IN =
	      { rxDCPmt[5:4],
		rxDCPmt[6],
		rxDCPmt[3:0],
		rxDCPtag,
		rxDCPMesg[31:0],
		rxDCPMesg[63:32] };
      default: dcp_dcp_dcpReqF$D_IN =
		   { 34'h2AAAAAAAA,
		     rxDCPmt[6],
		     rxDCPmt[3:0],
		     rxDCPtag,
		     rxDCPMesg[31:0] };
    endcase
  end
  assign dcp_dcp_dcpReqF$ENQ =
	     WILL_FIRE_RL_rx_dcp &&
	     (rxDCPmt[5:4] == 2'd0 || rxDCPmt[5:4] == 2'd1 ||
	      rxDCPmt[5:4] == 2'd2) ;
  assign dcp_dcp_dcpReqF$DEQ = WILL_FIRE_RL_dcp_dcp_dcp_request ;
  assign dcp_dcp_dcpReqF$CLR = 1'b0 ;

  // submodule dcp_dcp_dcpRespF
  assign dcp_dcp_dcpRespF$D_IN =
	     MUX_dcp_dcp_dcpRespF$enq_1__SEL_1 ?
	       MUX_dcp_dcp_dcpRespF$enq_1__VAL_1 :
	       MUX_dcp_dcp_dcpRespF$enq_1__VAL_2 ;
  assign dcp_dcp_dcpRespF$ENQ =
	     WILL_FIRE_RL_dcp_dcp_dcp_request &&
	     dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30_EQ__ETC___d165 ||
	     WILL_FIRE_RL_dcp_dcp_cp_response ;
  assign dcp_dcp_dcpRespF$DEQ = dcp_dcp_dcpRespF$EMPTY_N && dcpRespF$FULL_N ;
  assign dcp_dcp_dcpRespF$CLR = 1'b0 ;

  // submodule edpRxF
  assign edpRxF$D_IN = 10'h0 ;
  assign edpRxF$ENQ = 1'b0 ;
  assign edpRxF$DEQ = 1'b0 ;
  assign edpRxF$CLR = 1'b0 ;

  // submodule edp_dgdpReqAF
  assign edp_dgdpReqAF$sD_IN =
	     { CASE_edp_edp_dgdpReqFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q12,
	       edp_edp_dgdpReqF$D_OUT[7:0] } ;
  assign edp_dgdpReqAF$sENQ =
	     edp_dgdpReqAF$sFULL_N && edp_edp_dgdpReqF$EMPTY_N ;
  assign edp_dgdpReqAF$dDEQ = EN_dpClient_request_get ;

  // submodule edp_dgdpRespAF
  assign edp_dgdpRespAF$sD_IN =
	     { CASE_dpClient_response_put_BITS_9_TO_8_3_0_dpC_ETC__q13,
	       dpClient_response_put[7:0] } ;
  assign edp_dgdpRespAF$sENQ = EN_dpClient_response_put ;
  assign edp_dgdpRespAF$dDEQ =
	     edp_dgdpRespAF$dEMPTY_N && edp_edp_dgdpRespF$FULL_N ;

  // submodule edp_edp_dgdpReqF
  assign edp_edp_dgdpReqF$D_IN =
	     { CASE_edp_edp_edpReqFD_OUT_BITS_9_TO_8_3_0_edp_ETC__q14,
	       edp_edp_edpReqF$D_OUT[7:0] } ;
  assign edp_edp_dgdpReqF$ENQ =
	     edp_edp_edpReqF$EMPTY_N && edp_edp_dgdpReqF$FULL_N ;
  assign edp_edp_dgdpReqF$DEQ =
	     edp_dgdpReqAF$sFULL_N && edp_edp_dgdpReqF$EMPTY_N ;
  assign edp_edp_dgdpReqF$CLR = 1'b0 ;

  // submodule edp_edp_dgdpRespF
  assign edp_edp_dgdpRespF$D_IN =
	     { CASE_edp_dgdpRespAFdD_OUT_BITS_9_TO_8_3_0_edp_ETC__q15,
	       edp_dgdpRespAF$dD_OUT[7:0] } ;
  assign edp_edp_dgdpRespF$ENQ =
	     edp_dgdpRespAF$dEMPTY_N && edp_edp_dgdpRespF$FULL_N ;
  assign edp_edp_dgdpRespF$DEQ = WILL_FIRE_RL_edp_edp_edp_egress ;
  assign edp_edp_dgdpRespF$CLR = 1'b0 ;

  // submodule edp_edp_edpReqF
  assign edp_edp_edpReqF$D_IN = 10'h0 ;
  assign edp_edp_edpReqF$ENQ = 1'b0 ;
  assign edp_edp_edpReqF$DEQ =
	     edp_edp_edpReqF$EMPTY_N && edp_edp_dgdpReqF$FULL_N ;
  assign edp_edp_edpReqF$CLR = 1'b0 ;

  // submodule edp_edp_edpRespF
  always@(WILL_FIRE_RL_edp_edp_edp_egress or
	  MUX_edp_edp_edpRespF$enq_1__VAL_1 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 or
	  MUX_edp_edp_edpRespF$enq_1__VAL_2 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 or
	  MUX_edp_edp_edpRespF$enq_1__VAL_3 or
	  WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 or
	  MUX_edp_edp_edpRespF$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_edp_edp_edp_egress:
	  edp_edp_edpRespF$D_IN = MUX_edp_edp_edpRespF$enq_1__VAL_1;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41:
	  edp_edp_edpRespF$D_IN = MUX_edp_edp_edpRespF$enq_1__VAL_2;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41:
	  edp_edp_edpRespF$D_IN = MUX_edp_edp_edpRespF$enq_1__VAL_3;
      WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41:
	  edp_edp_edpRespF$D_IN = MUX_edp_edp_edpRespF$enq_1__VAL_4;
      default: edp_edp_edpRespF$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign edp_edp_edpRespF$ENQ =
	     WILL_FIRE_RL_edp_edp_edp_egress ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 ||
	     WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ;
  assign edp_edp_edpRespF$DEQ = edp_edp_edpRespF$EMPTY_N && merge_fi1$FULL_N ;
  assign edp_edp_edpRespF$CLR = 1'b0 ;

  // submodule gmac
  assign gmac$gmii_col_i = gmii_col_i ;
  assign gmac$gmii_crs_i = gmii_crs_i ;
  assign gmac$gmii_intr_i = gmii_intr_i ;
  assign gmac$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac$tx_put =
	     { CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q16,
	       merge_fo$D_OUT[7:0] } ;
  assign gmac$EN_rx_get = WILL_FIRE_RL_rx_data ;
  assign gmac$EN_tx_put = gmac$RDY_tx_put && merge_fo$EMPTY_N ;
  assign gmac$EN_rxOperate = phyMdiInit ;
  assign gmac$EN_txOperate = phyMdiInit ;

  // submodule mdi_fRequest
  assign mdi_fRequest$D_IN = { 1'd1, gbeControl[4:0], 21'd1890288 } ;
  assign mdi_fRequest$ENQ =
	     mdi_fRequest$FULL_N && phyResetWaitCnt == 25'd0 && !phyMdiInit ;
  assign mdi_fRequest$DEQ = MUX_mdi_rState$write_1__SEL_2 ;
  assign mdi_fRequest$CLR = 1'b0 ;

  // submodule mdi_fResponse
  assign mdi_fResponse$D_IN = { 1'd1, x_data__h18109 } ;
  assign mdi_fResponse$ENQ =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 &&
	     !mdi_rWrite ;
  assign mdi_fResponse$DEQ = 1'b0 ;
  assign mdi_fResponse$CLR = 1'b0 ;

  // submodule mdi_rPlayIndex
  assign mdi_rPlayIndex$DATA_A = 8'h0 ;
  assign mdi_rPlayIndex$DATA_B = 8'd255 ;
  assign mdi_rPlayIndex$DATA_C = 8'h0 ;
  assign mdi_rPlayIndex$DATA_F = 8'd194 ;
  assign mdi_rPlayIndex$ADDA = 1'b0 ;
  assign mdi_rPlayIndex$ADDB = WILL_FIRE_RL_mdi_run_frame ;
  assign mdi_rPlayIndex$SETC = 1'b0 ;
  assign mdi_rPlayIndex$SETF = MUX_mdi_rState$write_1__SEL_2 ;

  // submodule mdi_rPrescaler
  assign mdi_rPrescaler$DATA_A = 4'h0 ;
  assign mdi_rPrescaler$DATA_B = 4'd15 ;
  assign mdi_rPrescaler$DATA_C = 4'h0 ;
  assign mdi_rPrescaler$DATA_F = 4'd6 ;
  assign mdi_rPrescaler$ADDA = 1'b0 ;
  assign mdi_rPrescaler$ADDB = mdi_rPrescaler$Q_OUT != 4'd0 ;
  assign mdi_rPrescaler$SETC = 1'b0 ;
  assign mdi_rPrescaler$SETF = mdi_rPrescaler$Q_OUT == 4'd0 ;

  // submodule merge_fi0
  assign merge_fi0$D_IN =
	     (!rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040) ?
	       { 2'd0,
		 CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 } :
	       CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q19 ;
  assign merge_fi0$ENQ =
	     WILL_FIRE_RL_tx_dcp &&
	     NOT_rxHdr_sV_98_BIT_112_99_22_AND_rxHdr_sV_98__ETC___d776 ;
  assign merge_fi0$DEQ =
	     WILL_FIRE_RL_merge_arbitrate && merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi0_advance ;
  assign merge_fi0$CLR = 1'b0 ;

  // submodule merge_fi1
  assign merge_fi1$D_IN =
	     { CASE_edp_edp_edpRespFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q20,
	       edp_edp_edpRespF$D_OUT[7:0] } ;
  assign merge_fi1$ENQ = edp_edp_edpRespF$EMPTY_N && merge_fi1$FULL_N ;
  assign merge_fi1$DEQ =
	     WILL_FIRE_RL_merge_arbitrate && !merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi1_advance ;
  assign merge_fi1$CLR = 1'b0 ;

  // submodule merge_fo
  always@(WILL_FIRE_RL_merge_fi0_advance or
	  MUX_merge_fo$enq_1__VAL_1 or
	  WILL_FIRE_RL_merge_fi1_advance or
	  MUX_merge_fo$enq_1__VAL_2 or
	  WILL_FIRE_RL_merge_arbitrate or MUX_merge_fo$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_merge_fi0_advance:
	  merge_fo$D_IN = MUX_merge_fo$enq_1__VAL_1;
      WILL_FIRE_RL_merge_fi1_advance:
	  merge_fo$D_IN = MUX_merge_fo$enq_1__VAL_2;
      WILL_FIRE_RL_merge_arbitrate: merge_fo$D_IN = MUX_merge_fo$enq_1__VAL_3;
      default: merge_fo$D_IN = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign merge_fo$ENQ =
	     WILL_FIRE_RL_merge_fi0_advance ||
	     WILL_FIRE_RL_merge_fi1_advance ||
	     WILL_FIRE_RL_merge_arbitrate ;
  assign merge_fo$DEQ = gmac$RDY_tx_put && merge_fo$EMPTY_N ;
  assign merge_fo$CLR = 1'b0 ;

  // submodule phyRst
  assign phyRst$ASSERT_IN = (phyResetWaitCnt ^ 25'h1000000) > 25'd17527216 ;

  // submodule rxDCPHdrF
  assign rxDCPHdrF$D_IN = rxHdr_sV[111:0] ;
  assign rxDCPHdrF$ENQ =
	     WILL_FIRE_RL_rx_data && gmac$rx_get[9:8] != 2'd0 &&
	     !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     (rxHdr_sV[111:64] == 48'hFFFFFFFFFFFF ||
	      rxHdr_sV_98_BITS_111_TO_64_03_EQ_macAddress_45___d506) ;
  assign rxDCPHdrF$DEQ = WILL_FIRE_RL_rx_dcp ;
  assign rxDCPHdrF$CLR = 1'b0 ;

  // submodule txDBGF
  assign txDBGF$D_IN = 32'h0 ;
  assign txDBGF$ENQ = 1'b0 ;
  assign txDBGF$DEQ = 1'b0 ;
  assign txDBGF$CLR = 1'b0 ;

  // submodule txDCPHdrF
  assign txDCPHdrF$D_IN = 112'h0 ;
  assign txDCPHdrF$ENQ = 1'b0 ;
  assign txDCPHdrF$DEQ = 1'b0 ;
  assign txDCPHdrF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_merge_fi0HasPrio_50_THEN_merge_fi0_first_ETC___d466 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[9:8] == 2'd2 :
		merge_fi1$D_OUT[9:8] == 2'd2) ?
	       2'd2 :
	       2'd3 ;
  assign IF_IF_merge_fi0HasPrio_50_THEN_merge_fi0_first_ETC___d468 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[9:8] == 2'd1 :
		merge_fi1$D_OUT[9:8] == 2'd1) ?
	       { 2'd1,
		 IF_merge_fi0HasPrio_50_THEN_merge_fi0_first__2_ETC___d939 } :
	       { IF_IF_merge_fi0HasPrio_50_THEN_merge_fi0_first_ETC___d466,
		 IF_merge_fi0HasPrio_50_THEN_merge_fi0_first__2_ETC___d939 } ;
  assign IF_dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30__ETC___d160 =
	     (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1) ?
	       dcp_dcp_dcpRespF$FULL_N &&
	       (dcp_dcp_dcpReqF_first__29_BITS_71_TO_64_47_EQ__ETC___d918 &&
		dcp_dcp_lastTag[8] &&
		!dcp_dcp_dcpReqF$D_OUT[76] ||
		dcp_dcp_cpReqF$FULL_N) :
	       dcp_dcp_dcpReqF_first__29_BITS_39_TO_32_34_EQ__ETC___d919 &&
	       dcp_dcp_lastTag[8] &&
	       !dcp_dcp_dcpReqF$D_OUT[44] ||
	       dcp_dcp_cpReqF$FULL_N ;
  assign IF_dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30__ETC___d162 =
	     (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd0) ?
	       dcp_dcp_dcpRespF$FULL_N :
	       (dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1 ||
		!dcp_dcp_dcpReqF_first__29_BITS_39_TO_32_34_EQ__ETC___d919 ||
		!dcp_dcp_lastTag[8] ||
		dcp_dcp_dcpReqF$D_OUT[44] ||
		dcp_dcp_dcpRespF$FULL_N) &&
	       IF_dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30__ETC___d160 ;
  assign IF_merge_fi0HasPrio_50_THEN_merge_fi0_first__2_ETC___d939 =
	     merge_fi0HasPrio ? merge_fi0$D_OUT[7:0] : merge_fi1$D_OUT[7:0] ;
  assign IF_rxHdr_pos_22_EQ_0_38_THEN_rxHdr_sV_98_BITS__ETC___d607 =
	     CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 ==
	     CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 ;
  assign IF_txDCPPos_19_EQ_9_37_THEN_0_ELSE_txDCPPos_19_ETC___d1065 =
	     (txDCPPos == 5'd9) ? 5'd0 : txDCPPos_19_PLUS_1___d999 ;
  assign NOT_rxHdr_sV_98_BIT_112_99_22_AND_rxHdr_sV_98__ETC___d637 =
	     !rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040 &&
	     rxHdr_sV_98_BITS_111_TO_64_03_EQ_0xFFFFFFFFFFF_ETC___d628 &&
	     rxDCPMesgPos == 5'd1 ;
  assign NOT_rxHdr_sV_98_BIT_112_99_22_AND_rxHdr_sV_98__ETC___d776 =
	     !rxHdr_sV[112] && rxHdr_sV[15:0] == 16'hF040 ||
	     dcpRespF$D_OUT[44:43] == 2'd0 &&
	     (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	      txDCPPos == 5'd3 ||
	      txDCPPos == 5'd4 ||
	      txDCPPos == 5'd5 ||
	      txDCPPos == 5'd6 ||
	      txDCPPos == 5'd7 ||
	      txDCPPos == 5'd8 ||
	      txDCPPos == 5'd9) ||
	     dcpRespF$D_OUT[44:43] != 2'd0 &&
	     (dcpRespF$D_OUT[44:43] == 2'd1 &&
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4 ||
	       txDCPPos == 5'd5) ||
	      dcpRespF$D_OUT[44:43] != 2'd1 &&
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4 ||
	       txDCPPos == 5'd5 ||
	       txDCPPos == 5'd6 ||
	       txDCPPos == 5'd7 ||
	       txDCPPos == 5'd8 ||
	       txDCPPos == 5'd9)) ;
  assign _1434766110945527031733894725304609466537681244_ETC__q17 =
	     195'h2492492492492492492492492492492492492492492492492 ;
  assign _643371375338640__q22 =
	     195'h0000000000000000000000000000000000002492492492490 ;
  assign bs__h14911 =
	     mdi_rWrite ?
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8 :
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000 ;
  assign bs__h2386 =
	     { mdi_rWrite ?
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1C7 :
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1F8,
	       pa4__h1985,
	       pa3__h1986,
	       pa2__h1987,
	       pa1__h1988,
	       pa0__h1989,
	       ra4__h1991,
	       ra3__h1992,
	       ra2__h1993,
	       ra1__h1994,
	       ra0__h1995,
	       6'd56,
	       d15__h1997,
	       d14__h1998,
	       d13__h1999,
	       d12__h2000,
	       d11__h2001,
	       d10__h2002,
	       d9__h2003,
	       d8__h2004,
	       d7__h2005,
	       d6__h2006,
	       d5__h2007,
	       d4__h2008,
	       d3__h2009,
	       d2__h2010,
	       d1__h2011,
	       d0__h2012,
	       3'b111 } ;
  assign d0__h2012 = {3{mdi_rWriteData[0]}} ;
  assign d10__h2002 = {3{mdi_rWriteData[10]}} ;
  assign d11__h2001 = {3{mdi_rWriteData[11]}} ;
  assign d12__h2000 = {3{mdi_rWriteData[12]}} ;
  assign d13__h1999 = {3{mdi_rWriteData[13]}} ;
  assign d14__h1998 = {3{mdi_rWriteData[14]}} ;
  assign d15__h1997 = {3{mdi_rWriteData[15]}} ;
  assign d1__h2011 = {3{mdi_rWriteData[1]}} ;
  assign d2__h2010 = {3{mdi_rWriteData[2]}} ;
  assign d3__h2009 = {3{mdi_rWriteData[3]}} ;
  assign d4__h2008 = {3{mdi_rWriteData[4]}} ;
  assign d5__h2007 = {3{mdi_rWriteData[5]}} ;
  assign d6__h2006 = {3{mdi_rWriteData[6]}} ;
  assign d7__h2005 = {3{mdi_rWriteData[7]}} ;
  assign d8__h2004 = {3{mdi_rWriteData[8]}} ;
  assign d9__h2003 = {3{mdi_rWriteData[9]}} ;
  assign dcpRespF_i_notEmpty__15_AND_IF_dcpRespF_first__ETC___d751 =
	     dcpRespF$EMPTY_N &&
	     CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q4 ;
  assign dcp_dcp_dcpReqF_first__29_BITS_39_TO_32_34_EQ__ETC___d919 =
	     dcp_dcp_dcpReqF$D_OUT[39:32] == dcp_dcp_lastTag[7:0] ;
  assign dcp_dcp_dcpReqF_first__29_BITS_71_TO_64_47_EQ__ETC___d918 =
	     dcp_dcp_dcpReqF$D_OUT[71:64] == dcp_dcp_lastTag[7:0] ;
  assign dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30_EQ__ETC___d165 =
	     dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd0 ||
	     dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1 ||
	     dcp_dcp_dcpReqF_first__29_BITS_39_TO_32_34_EQ__ETC___d919 &&
	     dcp_dcp_lastTag[8] &&
	     !dcp_dcp_dcpReqF$D_OUT[44] ;
  assign dcp_dcp_dcpReqF_first__29_BITS_78_TO_77_30_EQ__ETC___d206 =
	     dcp_dcp_dcpReqF$D_OUT[78:77] == 2'd1 &&
	     (!dcp_dcp_dcpReqF_first__29_BITS_71_TO_64_47_EQ__ETC___d918 ||
	      !dcp_dcp_lastTag[8] ||
	      dcp_dcp_dcpReqF$D_OUT[76]) ||
	     dcp_dcp_dcpReqF$D_OUT[78:77] != 2'd1 &&
	     (!dcp_dcp_dcpReqF_first__29_BITS_39_TO_32_34_EQ__ETC___d919 ||
	      !dcp_dcp_lastTag[8] ||
	      dcp_dcp_dcpReqF$D_OUT[44]) ;
  assign edp_edp_egressIpHeadFsm_abort_whas__69_AND_edp_ETC___d380 =
	     (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd0 ||
	      !edp_edp_ix_01_ULT_2___d302 &&
	      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd7 ||
	      !edp_edp_ix_01_ULT_2___d302 &&
	      edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd9) &&
	     (!edp_edp_egressIpHeadFsm_start_reg_1 ||
	      edp_edp_egressIpHeadFsm_state_fired) ;
  assign edp_edp_ix_01_ULT_2___d302 = edp_edp_ix < 3'd2 ;
  assign edp_edp_ix_01_ULT_6___d314 = edp_edp_ix < 3'd6 ;
  assign gmac_rx_get_16_BITS_9_TO_8_17_EQ_0_18_OR_gmac__ETC___d610 =
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     rxHdr_sV[112] &&
	     !rxHdr_pV[112] &&
	     IF_rxHdr_pos_22_EQ_0_38_THEN_rxHdr_sV_98_BITS__ETC___d607 ;
  assign gmac_rx_get_16_BITS_9_TO_8_17_EQ_0_18_OR_gmac__ETC___d631 =
	     (gmac$rx_get[9:8] == 2'd0 || gmac$rx_get[9:8] == 2'd1) &&
	     !rxHdr_sV[112] &&
	     rxHdr_sV[15:0] == 16'hF040 &&
	     rxHdr_sV_98_BITS_111_TO_64_03_EQ_0xFFFFFFFFFFF_ETC___d628 ;
  assign merge_fo_i_notFull__16_AND_IF_merge_fi0HasPrio_ETC___d452 =
	     merge_fo$FULL_N &&
	     (merge_fi0HasPrio ? merge_fi0$EMPTY_N : merge_fi1$EMPTY_N) ;
  assign pa0__h1989 = {3{mdi_rPhyAddr[0]}} ;
  assign pa1__h1988 = {3{mdi_rPhyAddr[1]}} ;
  assign pa2__h1987 = {3{mdi_rPhyAddr[2]}} ;
  assign pa3__h1986 = {3{mdi_rPhyAddr[3]}} ;
  assign pa4__h1985 = {3{mdi_rPhyAddr[4]}} ;
  assign ra0__h1995 = {3{mdi_rRegAddr[0]}} ;
  assign ra1__h1994 = {3{mdi_rRegAddr[1]}} ;
  assign ra2__h1993 = {3{mdi_rRegAddr[2]}} ;
  assign ra3__h1992 = {3{mdi_rRegAddr[3]}} ;
  assign ra4__h1991 = {3{mdi_rRegAddr[4]}} ;
  assign rxHdr_sV_98_BITS_111_TO_64_03_EQ_0xFFFFFFFFFFF_ETC___d628 =
	     (rxHdr_sV[111:64] == 48'hFFFFFFFFFFFF ||
	      rxHdr_sV_98_BITS_111_TO_64_03_EQ_macAddress_45___d506) &&
	     { 3'd0, rxDCPMesgPos } < rxDCPPLI ;
  assign rxHdr_sV_98_BITS_111_TO_64_03_EQ_macAddress_45___d506 =
	     rxHdr_sV[111:64] == macAddress ;
  assign rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d510 =
	     rxHdr_sV[112] || rxHdr_sV[15:0] != 16'hF040 ||
	     rxHdr_sV[111:64] != 48'hFFFFFFFFFFFF &&
	     !rxHdr_sV_98_BITS_111_TO_64_03_EQ_macAddress_45___d506 ;
  assign rxHdr_sV_98_BIT_112_99_OR_NOT_rxHdr_sV_98_BITS_ETC___d855 =
	     (rxHdr_sV[112] || rxHdr_sV[15:0] != 16'hF040) &&
	     (dcpRespF$D_OUT[44:43] == 2'd0 && txDCPPos == 5'd9 ||
	      dcpRespF$D_OUT[44:43] != 2'd0 &&
	      (dcpRespF$D_OUT[44:43] == 2'd1 && txDCPPos == 5'd5 ||
	       dcpRespF$D_OUT[44:43] != 2'd1 && txDCPPos == 5'd9)) ;
  assign txDCPPos_19_PLUS_1___d999 = txDCPPos + 5'd1 ;
  assign x__h103510 = rxLenCount + 32'd1 ;
  assign x_data__h18109 =
	     { mdi_vrReadData_15,
	       mdi_vrReadData_14,
	       mdi_vrReadData_13,
	       mdi_vrReadData_12,
	       mdi_vrReadData_11,
	       mdi_vrReadData_10,
	       mdi_vrReadData_9,
	       mdi_vrReadData_8,
	       mdi_vrReadData_7,
	       mdi_vrReadData_6,
	       mdi_vrReadData_5,
	       mdi_vrReadData_4,
	       mdi_vrReadData_3,
	       mdi_vrReadData_2,
	       mdi_vrReadData_1,
	       mdi_vrReadData } ;
  always@(edp_dgdpReqAF$dD_OUT)
  begin
    case (edp_dgdpReqAF$dD_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpReqAFdD_OUT_BITS_9_TO_8_3_0_edp__ETC__q1 =
	      edp_dgdpReqAF$dD_OUT[9:8];
      2'd3: CASE_edp_dgdpReqAFdD_OUT_BITS_9_TO_8_3_0_edp__ETC__q1 = 2'd3;
    endcase
  end
  always@(rxHdr_pos or rxHdr_sV)
  begin
    case (rxHdr_pos)
      4'd0:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[7:0];
      4'd1:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[15:8];
      4'd2:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[23:16];
      4'd3:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[31:24];
      4'd4:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[39:32];
      4'd5:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[47:40];
      4'd6:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[55:48];
      4'd7:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[63:56];
      4'd8:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[71:64];
      4'd9:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[79:72];
      4'd10:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[87:80];
      4'd11:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[95:88];
      4'd12:
	  CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
	      rxHdr_sV[103:96];
      default: CASE_rxHdr_pos_rxHdr_sV_BITS_111_TO_104_0_rxHd_ETC__q2 =
		   rxHdr_sV[111:104];
    endcase
  end
  always@(rxHdr_pos or rxHdr_pV)
  begin
    case (rxHdr_pos)
      4'd0:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[7:0];
      4'd1:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[15:8];
      4'd2:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[23:16];
      4'd3:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[31:24];
      4'd4:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[39:32];
      4'd5:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[47:40];
      4'd6:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[55:48];
      4'd7:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[63:56];
      4'd8:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[71:64];
      4'd9:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[79:72];
      4'd10:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[87:80];
      4'd11:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[95:88];
      4'd12:
	  CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
	      rxHdr_pV[103:96];
      default: CASE_rxHdr_pos_rxHdr_pV_BITS_111_TO_104_0_rxHd_ETC__q3 =
		   rxHdr_pV[111:104];
    endcase
  end
  always@(txDCPPos or merge_fi0$FULL_N)
  begin
    case (txDCPPos)
      5'd0, 5'd1, 5'd2, 5'd3, 5'd4, 5'd5, 5'd6, 5'd7, 5'd8:
	  IF_txDCPPos_19_EQ_0_20_OR_txDCPPos_19_EQ_1_21__ETC___d937 =
	      merge_fi0$FULL_N;
      default: IF_txDCPPos_19_EQ_0_20_OR_txDCPPos_19_EQ_1_21__ETC___d937 =
		   txDCPPos != 5'd9 || merge_fi0$FULL_N;
    endcase
  end
  always@(dcpRespF$D_OUT or
	  IF_txDCPPos_19_EQ_0_20_OR_txDCPPos_19_EQ_1_21__ETC___d937 or
	  txDCPPos or merge_fi0$FULL_N)
  begin
    case (dcpRespF$D_OUT[44:43])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q4 =
	      IF_txDCPPos_19_EQ_0_20_OR_txDCPPos_19_EQ_1_21__ETC___d937;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q4 =
	      (txDCPPos == 5'd0 || txDCPPos == 5'd1 || txDCPPos == 5'd2 ||
	       txDCPPos == 5'd3 ||
	       txDCPPos == 5'd4) ?
		merge_fi0$FULL_N :
		txDCPPos != 5'd5 || merge_fi0$FULL_N;
      default: CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q4 =
		   IF_txDCPPos_19_EQ_0_20_OR_txDCPPos_19_EQ_1_21__ETC___d937;
    endcase
  end
  always@(txDCPPos or dcpRespF$D_OUT)
  begin
    case (txDCPPos)
      5'd0, 5'd2, 5'd3:
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 = 10'd0;
      5'd1:
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 = 10'd10;
      5'd4:
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 =
	      { 2'd0, dcpRespF$D_OUT[42] ? 8'h70 : 8'h30 };
      5'd5:
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 =
	      { 2'd0, dcpRespF$D_OUT[9:2] };
      5'd6:
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 =
	      { 2'd0, dcpRespF$D_OUT[41:34] };
      5'd7:
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 =
	      { 2'd0, dcpRespF$D_OUT[33:26] };
      5'd8:
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 =
	      { 2'd0, dcpRespF$D_OUT[25:18] };
      default: IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 =
		   { 2'd1, dcpRespF$D_OUT[17:10] };
    endcase
  end
  always@(rxDCPmt or dcp_dcp_dcpReqF$FULL_N)
  begin
    case (rxDCPmt[5:4])
      2'd0, 2'd1:
	  CASE_rxDCPmt_BITS_5_TO_4_NOT_rxDCPmt_BITS_5_TO_ETC__q5 =
	      dcp_dcp_dcpReqF$FULL_N;
      default: CASE_rxDCPmt_BITS_5_TO_4_NOT_rxDCPmt_BITS_5_TO_ETC__q5 =
		   rxDCPmt[5:4] != 2'd2 || dcp_dcp_dcpReqF$FULL_N;
    endcase
  end
  always@(edp_edp_dgdpRespF$D_OUT)
  begin
    case (edp_edp_dgdpRespF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_edp_dgdpRespFD_OUT_BITS_9_TO_8_3_0_e_ETC__q6 =
	      edp_edp_dgdpRespF$D_OUT[9:8];
      2'd3: CASE_edp_edp_dgdpRespFD_OUT_BITS_9_TO_8_3_0_e_ETC__q6 = 2'd3;
    endcase
  end
  always@(edp_edp_ix)
  begin
    case (edp_edp_ix)
      3'd0, 3'd1, 3'd2: CASE_edp_edp_ix_69_0_0_1_0_2_0_3_1_4_35__q7 = 8'd0;
      3'd3: CASE_edp_edp_ix_69_0_0_1_0_2_0_3_1_4_35__q7 = 8'd1;
      3'd4: CASE_edp_edp_ix_69_0_0_1_0_2_0_3_1_4_35__q7 = 8'd35;
      default: CASE_edp_edp_ix_69_0_0_1_0_2_0_3_1_4_35__q7 = 8'd69;
    endcase
  end
  always@(edp_edp_ix or macAddress)
  begin
    case (edp_edp_ix)
      3'd0:
	  CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8 =
	      macAddress[47:40];
      3'd1:
	  CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8 =
	      macAddress[39:32];
      3'd2:
	  CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8 =
	      macAddress[31:24];
      3'd3:
	  CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8 =
	      macAddress[23:16];
      3'd4:
	  CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8 =
	      macAddress[15:8];
      default: CASE_edp_edp_ix_macAddress_BITS_7_TO_0_0_macAd_ETC__q8 =
		   macAddress[7:0];
    endcase
  end
  always@(merge_fi0$D_OUT)
  begin
    case (merge_fi0$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q9 =
	      merge_fi0$D_OUT[9:8];
      2'd3: CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q9 = 2'd3;
    endcase
  end
  always@(merge_fi1$D_OUT)
  begin
    case (merge_fi1$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q10 =
	      merge_fi1$D_OUT[9:8];
      2'd3: CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q10 = 2'd3;
    endcase
  end
  always@(dcp_dcp_dcpRespF$D_OUT)
  begin
    case (dcp_dcp_dcpRespF$D_OUT[44:43])
      2'd0, 2'd1:
	  CASE_dcp_dcp_dcpRespFD_OUT_BITS_44_TO_43_2_0__ETC__q11 =
	      dcp_dcp_dcpRespF$D_OUT[44:43];
      default: CASE_dcp_dcp_dcpRespFD_OUT_BITS_44_TO_43_2_0__ETC__q11 = 2'd2;
    endcase
  end
  always@(edp_edp_dgdpReqF$D_OUT)
  begin
    case (edp_edp_dgdpReqF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_edp_dgdpReqFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q12 =
	      edp_edp_dgdpReqF$D_OUT[9:8];
      2'd3: CASE_edp_edp_dgdpReqFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q12 = 2'd3;
    endcase
  end
  always@(dpClient_response_put)
  begin
    case (dpClient_response_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_dpClient_response_put_BITS_9_TO_8_3_0_dpC_ETC__q13 =
	      dpClient_response_put[9:8];
      2'd3: CASE_dpClient_response_put_BITS_9_TO_8_3_0_dpC_ETC__q13 = 2'd3;
    endcase
  end
  always@(edp_edp_edpReqF$D_OUT)
  begin
    case (edp_edp_edpReqF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_edp_edpReqFD_OUT_BITS_9_TO_8_3_0_edp_ETC__q14 =
	      edp_edp_edpReqF$D_OUT[9:8];
      2'd3: CASE_edp_edp_edpReqFD_OUT_BITS_9_TO_8_3_0_edp_ETC__q14 = 2'd3;
    endcase
  end
  always@(edp_dgdpRespAF$dD_OUT)
  begin
    case (edp_dgdpRespAF$dD_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_dgdpRespAFdD_OUT_BITS_9_TO_8_3_0_edp_ETC__q15 =
	      edp_dgdpRespAF$dD_OUT[9:8];
      2'd3: CASE_edp_dgdpRespAFdD_OUT_BITS_9_TO_8_3_0_edp_ETC__q15 = 2'd3;
    endcase
  end
  always@(merge_fo$D_OUT)
  begin
    case (merge_fo$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q16 =
	      merge_fo$D_OUT[9:8];
      2'd3: CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q16 = 2'd3;
    endcase
  end
  always@(txDCPPos or rxHdr_sV or macAddress)
  begin
    case (5'd13 - txDCPPos)
      5'd0:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      rxHdr_sV[7:0];
      5'd1:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      rxHdr_sV[15:8];
      5'd2:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      macAddress[7:0];
      5'd3:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      macAddress[15:8];
      5'd4:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      macAddress[23:16];
      5'd5:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      macAddress[31:24];
      5'd6:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      macAddress[39:32];
      5'd7:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      macAddress[47:40];
      5'd8:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      rxHdr_sV[23:16];
      5'd9:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      rxHdr_sV[31:24];
      5'd10:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      rxHdr_sV[39:32];
      5'd11:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      rxHdr_sV[47:40];
      5'd12:
	  CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
	      rxHdr_sV[55:48];
      default: CASE_13_MINUS_txDCPPos_rxHdr_sV_BITS_63_TO_56__ETC__q18 =
		   rxHdr_sV[63:56];
    endcase
  end
  always@(dcpRespF$D_OUT or
	  IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926 or
	  txDCPPos)
  begin
    case (dcpRespF$D_OUT[44:43])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q19 =
	      IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q19 =
	      (txDCPPos == 5'd0) ?
		10'd0 :
		((txDCPPos == 5'd1) ?
		   10'd6 :
		   ((txDCPPos == 5'd2 || txDCPPos == 5'd3) ?
		      10'd0 :
		      ((txDCPPos == 5'd4) ?
			 { 2'd0, dcpRespF$D_OUT[10] ? 8'h70 : 8'h30 } :
			 { 2'd1, dcpRespF$D_OUT[9:2] })));
      default: CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q19 =
		   IF_txDCPPos_19_EQ_0_20_THEN_0_ELSE_IF_txDCPPos_ETC___d926;
    endcase
  end
  always@(edp_edp_edpRespF$D_OUT)
  begin
    case (edp_edp_edpRespF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp_edp_edpRespFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q20 =
	      edp_edp_edpRespF$D_OUT[9:8];
      2'd3: CASE_edp_edp_edpRespFD_OUT_BITS_9_TO_8_3_0_ed_ETC__q20 = 2'd3;
    endcase
  end
  always@(dcpRespF$D_OUT or
	  IF_txDCPPos_19_EQ_9_37_THEN_0_ELSE_txDCPPos_19_ETC___d1065 or
	  txDCPPos or txDCPPos_19_PLUS_1___d999)
  begin
    case (dcpRespF$D_OUT[44:43])
      2'd0:
	  CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q21 =
	      IF_txDCPPos_19_EQ_9_37_THEN_0_ELSE_txDCPPos_19_ETC___d1065;
      2'd1:
	  CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q21 =
	      (txDCPPos == 5'd5) ? 5'd0 : txDCPPos_19_PLUS_1___d999;
      default: CASE_dcpRespFD_OUT_BITS_44_TO_43_IF_txDCPPos__ETC__q21 =
		   IF_txDCPPos_19_EQ_9_37_THEN_0_ELSE_txDCPPos_19_ETC___d1065;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        dcp_dcp_doInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dcp_dcp_lastTag <= `BSV_ASSIGNMENT_DELAY 9'd170;
	edp_edp_egressHead <= `BSV_ASSIGNMENT_DELAY 1'd1;
	edp_edp_egressIpHeadFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_edp_egressIpHeadFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_edp_egressIpHeadFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	edp_edp_egressIpHeadFsm_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	edp_edp_egressIpHeadFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    4'd0;
	edp_edp_lastTag <= `BSV_ASSIGNMENT_DELAY 9'd170;
	gbeControl <= `BSV_ASSIGNMENT_DELAY 32'h00000101;
	macAddress <= `BSV_ASSIGNMENT_DELAY 48'h000A35420100;
	mdi_rMDC <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mdi_rMDD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merge_fi0Active <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merge_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	merge_fi1Active <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyMdiInit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY 25'd753125;
	rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rxDCPPLI <= `BSV_ASSIGNMENT_DELAY 8'd255;
	rxDropCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxDropFrame <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_pV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHdr_pos <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rxHdr_sV <= `BSV_ASSIGNMENT_DELAY 113'h10000000000000000000000000000;
	rxHeadCap <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rxLenCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxLenLast <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxOvfCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rxValidEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	txCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDBGPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txDCPCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txDCPPos <= `BSV_ASSIGNMENT_DELAY 5'd0;
	txUndCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dcp_dcp_doInFlight$EN)
	  dcp_dcp_doInFlight <= `BSV_ASSIGNMENT_DELAY dcp_dcp_doInFlight$D_IN;
	if (dcp_dcp_lastTag$EN)
	  dcp_dcp_lastTag <= `BSV_ASSIGNMENT_DELAY dcp_dcp_lastTag$D_IN;
	if (edp_edp_egressHead$EN)
	  edp_edp_egressHead <= `BSV_ASSIGNMENT_DELAY edp_edp_egressHead$D_IN;
	if (edp_edp_egressIpHeadFsm_start_reg$EN)
	  edp_edp_egressIpHeadFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      edp_edp_egressIpHeadFsm_start_reg$D_IN;
	if (edp_edp_egressIpHeadFsm_start_reg_1$EN)
	  edp_edp_egressIpHeadFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      edp_edp_egressIpHeadFsm_start_reg_1$D_IN;
	if (edp_edp_egressIpHeadFsm_state_can_overlap$EN)
	  edp_edp_egressIpHeadFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      edp_edp_egressIpHeadFsm_state_can_overlap$D_IN;
	if (edp_edp_egressIpHeadFsm_state_fired$EN)
	  edp_edp_egressIpHeadFsm_state_fired <= `BSV_ASSIGNMENT_DELAY
	      edp_edp_egressIpHeadFsm_state_fired$D_IN;
	if (edp_edp_egressIpHeadFsm_state_mkFSMstate$EN)
	  edp_edp_egressIpHeadFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      edp_edp_egressIpHeadFsm_state_mkFSMstate$D_IN;
	if (edp_edp_lastTag$EN)
	  edp_edp_lastTag <= `BSV_ASSIGNMENT_DELAY edp_edp_lastTag$D_IN;
	if (gbeControl$EN)
	  gbeControl <= `BSV_ASSIGNMENT_DELAY gbeControl$D_IN;
	if (macAddress$EN)
	  macAddress <= `BSV_ASSIGNMENT_DELAY macAddress$D_IN;
	if (mdi_rMDC$EN) mdi_rMDC <= `BSV_ASSIGNMENT_DELAY mdi_rMDC$D_IN;
	if (mdi_rMDD$EN) mdi_rMDD <= `BSV_ASSIGNMENT_DELAY mdi_rMDD$D_IN;
	if (mdi_rOutEn$EN)
	  mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY mdi_rOutEn$D_IN;
	if (mdi_rState$EN)
	  mdi_rState <= `BSV_ASSIGNMENT_DELAY mdi_rState$D_IN;
	if (merge_fi0Active$EN)
	  merge_fi0Active <= `BSV_ASSIGNMENT_DELAY merge_fi0Active$D_IN;
	if (merge_fi0HasPrio$EN)
	  merge_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY merge_fi0HasPrio$D_IN;
	if (merge_fi1Active$EN)
	  merge_fi1Active <= `BSV_ASSIGNMENT_DELAY merge_fi1Active$D_IN;
	if (phyMdiInit$EN)
	  phyMdiInit <= `BSV_ASSIGNMENT_DELAY phyMdiInit$D_IN;
	if (phyResetWaitCnt$EN)
	  phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY phyResetWaitCnt$D_IN;
	if (rxAbortEOPC$EN)
	  rxAbortEOPC <= `BSV_ASSIGNMENT_DELAY rxAbortEOPC$D_IN;
	if (rxCount$EN) rxCount <= `BSV_ASSIGNMENT_DELAY rxCount$D_IN;
	if (rxDCPCnt$EN) rxDCPCnt <= `BSV_ASSIGNMENT_DELAY rxDCPCnt$D_IN;
	if (rxDCPMesgPos$EN)
	  rxDCPMesgPos <= `BSV_ASSIGNMENT_DELAY rxDCPMesgPos$D_IN;
	if (rxDCPPLI$EN) rxDCPPLI <= `BSV_ASSIGNMENT_DELAY rxDCPPLI$D_IN;
	if (rxDropCnt$EN) rxDropCnt <= `BSV_ASSIGNMENT_DELAY rxDropCnt$D_IN;
	if (rxDropFrame$EN)
	  rxDropFrame <= `BSV_ASSIGNMENT_DELAY rxDropFrame$D_IN;
	if (rxEmptyEOPC$EN)
	  rxEmptyEOPC <= `BSV_ASSIGNMENT_DELAY rxEmptyEOPC$D_IN;
	if (rxHdrMatchCnt$EN)
	  rxHdrMatchCnt <= `BSV_ASSIGNMENT_DELAY rxHdrMatchCnt$D_IN;
	if (rxHdr_mCnt$EN)
	  rxHdr_mCnt <= `BSV_ASSIGNMENT_DELAY rxHdr_mCnt$D_IN;
	if (rxHdr_pV$EN) rxHdr_pV <= `BSV_ASSIGNMENT_DELAY rxHdr_pV$D_IN;
	if (rxHdr_pos$EN) rxHdr_pos <= `BSV_ASSIGNMENT_DELAY rxHdr_pos$D_IN;
	if (rxHdr_sV$EN) rxHdr_sV <= `BSV_ASSIGNMENT_DELAY rxHdr_sV$D_IN;
	if (rxHeadCap$EN) rxHeadCap <= `BSV_ASSIGNMENT_DELAY rxHeadCap$D_IN;
	if (rxLenCount$EN)
	  rxLenCount <= `BSV_ASSIGNMENT_DELAY rxLenCount$D_IN;
	if (rxLenLast$EN) rxLenLast <= `BSV_ASSIGNMENT_DELAY rxLenLast$D_IN;
	if (rxOvfCount$EN)
	  rxOvfCount <= `BSV_ASSIGNMENT_DELAY rxOvfCount$D_IN;
	if (rxPos$EN) rxPos <= `BSV_ASSIGNMENT_DELAY rxPos$D_IN;
	if (rxValidEOPC$EN)
	  rxValidEOPC <= `BSV_ASSIGNMENT_DELAY rxValidEOPC$D_IN;
	if (rxValidNoEOPC$EN)
	  rxValidNoEOPC <= `BSV_ASSIGNMENT_DELAY rxValidNoEOPC$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (txCount$EN) txCount <= `BSV_ASSIGNMENT_DELAY txCount$D_IN;
	if (txDBGCnt$EN) txDBGCnt <= `BSV_ASSIGNMENT_DELAY txDBGCnt$D_IN;
	if (txDBGPos$EN) txDBGPos <= `BSV_ASSIGNMENT_DELAY txDBGPos$D_IN;
	if (txDCPCnt$EN) txDCPCnt <= `BSV_ASSIGNMENT_DELAY txDCPCnt$D_IN;
	if (txDCPPos$EN) txDCPPos <= `BSV_ASSIGNMENT_DELAY txDCPPos$D_IN;
	if (txUndCount$EN)
	  txUndCount <= `BSV_ASSIGNMENT_DELAY txUndCount$D_IN;
      end
    if (dcp_dcp_lastResp$EN)
      dcp_dcp_lastResp <= `BSV_ASSIGNMENT_DELAY dcp_dcp_lastResp$D_IN;
    if (edp_edp_ix$EN) edp_edp_ix <= `BSV_ASSIGNMENT_DELAY edp_edp_ix$D_IN;
    if (edp_edp_lastResp$EN)
      edp_edp_lastResp <= `BSV_ASSIGNMENT_DELAY edp_edp_lastResp$D_IN;
    if (mdi_rPhyAddr$EN)
      mdi_rPhyAddr <= `BSV_ASSIGNMENT_DELAY mdi_rPhyAddr$D_IN;
    if (mdi_rRegAddr$EN)
      mdi_rRegAddr <= `BSV_ASSIGNMENT_DELAY mdi_rRegAddr$D_IN;
    if (mdi_rWrite$EN) mdi_rWrite <= `BSV_ASSIGNMENT_DELAY mdi_rWrite$D_IN;
    if (mdi_rWriteData$EN)
      mdi_rWriteData <= `BSV_ASSIGNMENT_DELAY mdi_rWriteData$D_IN;
    if (mdi_vrReadData$EN)
      mdi_vrReadData <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData$D_IN;
    if (mdi_vrReadData_1$EN)
      mdi_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_1$D_IN;
    if (mdi_vrReadData_10$EN)
      mdi_vrReadData_10 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_10$D_IN;
    if (mdi_vrReadData_11$EN)
      mdi_vrReadData_11 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_11$D_IN;
    if (mdi_vrReadData_12$EN)
      mdi_vrReadData_12 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_12$D_IN;
    if (mdi_vrReadData_13$EN)
      mdi_vrReadData_13 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_13$D_IN;
    if (mdi_vrReadData_14$EN)
      mdi_vrReadData_14 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_14$D_IN;
    if (mdi_vrReadData_15$EN)
      mdi_vrReadData_15 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_15$D_IN;
    if (mdi_vrReadData_2$EN)
      mdi_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_2$D_IN;
    if (mdi_vrReadData_3$EN)
      mdi_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_3$D_IN;
    if (mdi_vrReadData_4$EN)
      mdi_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_4$D_IN;
    if (mdi_vrReadData_5$EN)
      mdi_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_5$D_IN;
    if (mdi_vrReadData_6$EN)
      mdi_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_6$D_IN;
    if (mdi_vrReadData_7$EN)
      mdi_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_7$D_IN;
    if (mdi_vrReadData_8$EN)
      mdi_vrReadData_8 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_8$D_IN;
    if (mdi_vrReadData_9$EN)
      mdi_vrReadData_9 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_9$D_IN;
    if (rxDCPMesg$EN) rxDCPMesg <= `BSV_ASSIGNMENT_DELAY rxDCPMesg$D_IN;
    if (rxDCPmt$EN) rxDCPmt <= `BSV_ASSIGNMENT_DELAY rxDCPmt$D_IN;
    if (rxDCPtag$EN) rxDCPtag <= `BSV_ASSIGNMENT_DELAY rxDCPtag$D_IN;
    if (rxPipe$EN) rxPipe <= `BSV_ASSIGNMENT_DELAY rxPipe$D_IN;
  end

  always@(posedge CLK_cpClock)
  begin
    if (!RST_N_cpReset)
      begin
        macAddressCP <= `BSV_ASSIGNMENT_DELAY 48'h000A35420100;
      end
    else
      begin
        if (macAddressCP$EN)
	  macAddressCP <= `BSV_ASSIGNMENT_DELAY macAddressCP$D_IN;
      end
    if (edpDV$EN) edpDV <= `BSV_ASSIGNMENT_DELAY edpDV$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dcp_dcp_doInFlight = 1'h0;
    dcp_dcp_lastResp = 45'h0AAAAAAAAAAA;
    dcp_dcp_lastTag = 9'h0AA;
    edpDV = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    edp_edp_egressHead = 1'h0;
    edp_edp_egressIpHeadFsm_start_reg = 1'h0;
    edp_edp_egressIpHeadFsm_start_reg_1 = 1'h0;
    edp_edp_egressIpHeadFsm_state_can_overlap = 1'h0;
    edp_edp_egressIpHeadFsm_state_fired = 1'h0;
    edp_edp_egressIpHeadFsm_state_mkFSMstate = 4'hA;
    edp_edp_ix = 3'h2;
    edp_edp_lastResp = 10'h2AA;
    edp_edp_lastTag = 9'h0AA;
    gbeControl = 32'hAAAAAAAA;
    macAddress = 48'hAAAAAAAAAAAA;
    macAddressCP = 48'hAAAAAAAAAAAA;
    mdi_rMDC = 1'h0;
    mdi_rMDD = 1'h0;
    mdi_rOutEn = 1'h0;
    mdi_rPhyAddr = 5'h0A;
    mdi_rRegAddr = 5'h0A;
    mdi_rState = 1'h0;
    mdi_rWrite = 1'h0;
    mdi_rWriteData = 16'hAAAA;
    mdi_vrReadData = 1'h0;
    mdi_vrReadData_1 = 1'h0;
    mdi_vrReadData_10 = 1'h0;
    mdi_vrReadData_11 = 1'h0;
    mdi_vrReadData_12 = 1'h0;
    mdi_vrReadData_13 = 1'h0;
    mdi_vrReadData_14 = 1'h0;
    mdi_vrReadData_15 = 1'h0;
    mdi_vrReadData_2 = 1'h0;
    mdi_vrReadData_3 = 1'h0;
    mdi_vrReadData_4 = 1'h0;
    mdi_vrReadData_5 = 1'h0;
    mdi_vrReadData_6 = 1'h0;
    mdi_vrReadData_7 = 1'h0;
    mdi_vrReadData_8 = 1'h0;
    mdi_vrReadData_9 = 1'h0;
    merge_fi0Active = 1'h0;
    merge_fi0HasPrio = 1'h0;
    merge_fi1Active = 1'h0;
    phyMdiInit = 1'h0;
    phyResetWaitCnt = 25'h0AAAAAA;
    rxAbortEOPC = 32'hAAAAAAAA;
    rxCount = 32'hAAAAAAAA;
    rxDCPCnt = 32'hAAAAAAAA;
    rxDCPMesg = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxDCPMesgPos = 5'h0A;
    rxDCPPLI = 8'hAA;
    rxDCPmt = 8'hAA;
    rxDCPtag = 8'hAA;
    rxDropCnt = 32'hAAAAAAAA;
    rxDropFrame = 1'h0;
    rxEmptyEOPC = 32'hAAAAAAAA;
    rxHdrMatchCnt = 32'hAAAAAAAA;
    rxHdr_mCnt = 4'hA;
    rxHdr_pV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHdr_pos = 4'hA;
    rxHdr_sV = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxHeadCap = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rxLenCount = 32'hAAAAAAAA;
    rxLenLast = 32'hAAAAAAAA;
    rxOvfCount = 32'hAAAAAAAA;
    rxPipe = 32'hAAAAAAAA;
    rxPos = 2'h2;
    rxValidEOPC = 32'hAAAAAAAA;
    rxValidNoEOPC = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    txCount = 32'hAAAAAAAA;
    txDBGCnt = 32'hAAAAAAAA;
    txDBGPos = 5'h0A;
    txDCPCnt = 32'hAAAAAAAA;
    txDCPPos = 5'h0A;
    txUndCount = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 &&
	  (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8))
	$display("Error: \"bsv/eth/EDP.bsv\", line 51, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_l51c41] and\n  [RL_edp_edp_egressIpHeadFsm_action_f_update_l51c5,\n  RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_l52c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5,\n  RL_edp_edp_egressIpHeadFsm_action_l53c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
    if (wciS0_MReset_n)
      if (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2 &&
	  (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8))
	$display("Error: \"bsv/eth/EDP.bsv\", line 51, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_f_update_l51c5] and\n  [RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_l52c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5,\n  RL_edp_edp_egressIpHeadFsm_action_l53c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 &&
	  (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8))
	$display("Error: \"bsv/eth/EDP.bsv\", line 52, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5] and\n  [RL_edp_edp_egressIpHeadFsm_action_l52c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5,\n  RL_edp_edp_egressIpHeadFsm_action_l53c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 &&
	  (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8))
	$display("Error: \"bsv/eth/EDP.bsv\", line 52, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_l52c41] and\n  [RL_edp_edp_egressIpHeadFsm_action_f_update_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5,\n  RL_edp_edp_egressIpHeadFsm_action_l53c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 &&
	  (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8))
	$display("Error: \"bsv/eth/EDP.bsv\", line 53, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5] and\n  [RL_edp_edp_egressIpHeadFsm_action_l53c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
    if (wciS0_MReset_n)
      if (edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 &&
	  (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8))
	$display("Error: \"bsv/eth/EDP.bsv\", line 52, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_f_update_l52c5] and\n  [RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5,\n  RL_edp_edp_egressIpHeadFsm_action_l53c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 &&
	  edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8)
	$display("Error: \"bsv/eth/EDP.bsv\", line 53, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_l53c41] and\n  [RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5 &&
	  (WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l51c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd2 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l52c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5 ||
	   WILL_FIRE_RL_edp_edp_egressIpHeadFsm_action_l53c41 ||
	   edp_edp_egressIpHeadFsm_state_mkFSMstate == 4'd8))
	$display("Error: \"bsv/eth/EDP.bsv\", line 51, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_edp_edp_egressIpHeadFsm_action_f_init_l51c5] and\n  [RL_edp_edp_egressIpHeadFsm_action_l51c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l51c5,\n  RL_edp_edp_egressIpHeadFsm_action_f_init_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_l52c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l52c5,\n  RL_edp_edp_egressIpHeadFsm_action_f_init_l53c5,\n  RL_edp_edp_egressIpHeadFsm_action_l53c41,\n  RL_edp_edp_egressIpHeadFsm_action_f_update_l53c5] ) fired in the same clock\n  cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkGbeLite

