//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Wed Jul 20 13:58:39 EDT 2011
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wmiM0_MCmd                     O     3
// wmiM0_MReqLast                 O     1
// wmiM0_MReqInfo                 O     1
// wmiM0_MAddrSpace               O     1
// wmiM0_MAddr                    O    14
// wmiM0_MBurstLength             O    12
// wmiM0_MDataValid               O     1
// wmiM0_MDataLast                O     1
// wmiM0_MData                    O    32
// wmiM0_MDataByteEn              O     4
// wmiM0_MFlag                    O    32
// wmiM0_MReset_n                 O     1
// wsiM0_MCmd                     O     3
// wsiM0_MReqLast                 O     1
// wsiM0_MBurstPrecise            O     1
// wsiM0_MBurstLength             O    12
// wsiM0_MData                    O    32 reg
// wsiM0_MByteEn                  O     4 reg
// wsiM0_MReqInfo                 O     8
// wsiM0_MReset_n                 O     1
// wsiS0_SThreadBusy              O     1
// wsiS0_SReset_n                 O     1
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wmiM0_SResp                    I     2
// wmiM0_SData                    I    32
// wmiM0_SFlag                    I    32 reg
// wsiS0_MCmd                     I     3
// wsiS0_MBurstLength             I    12
// wsiS0_MData                    I    32
// wsiS0_MByteEn                  I     4
// wsiS0_MReqInfo                 I     8
// wmiM0_SThreadBusy              I     1 reg
// wmiM0_SDataThreadBusy          I     1 reg
// wmiM0_SRespLast                I     1 unused
// wmiM0_SReset_n                 I     1 reg
// wsiM0_SThreadBusy              I     1 reg
// wsiM0_SReset_n                 I     1 reg
// wsiS0_MReqLast                 I     1
// wsiS0_MBurstPrecise            I     1
// wsiS0_MReset_n                 I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkSMAdapter4B(wciS0_Clk,
		     wciS0_MReset_n,

		     wciS0_MCmd,

		     wciS0_MAddrSpace,

		     wciS0_MByteEn,

		     wciS0_MAddr,

		     wciS0_MData,

		     wciS0_SResp,

		     wciS0_SData,

		     wciS0_SThreadBusy,

		     wciS0_SFlag,

		     wciS0_MFlag,

		     wmiM0_MCmd,

		     wmiM0_MReqLast,

		     wmiM0_MReqInfo,

		     wmiM0_MAddrSpace,

		     wmiM0_MAddr,

		     wmiM0_MBurstLength,

		     wmiM0_MDataValid,

		     wmiM0_MDataLast,

		     wmiM0_MData,

		     wmiM0_MDataByteEn,

		     wmiM0_SResp,

		     wmiM0_SData,

		     wmiM0_SThreadBusy,

		     wmiM0_SDataThreadBusy,

		     wmiM0_SRespLast,

		     wmiM0_SFlag,

		     wmiM0_MFlag,

		     wmiM0_MReset_n,

		     wmiM0_SReset_n,

		     wsiM0_MCmd,

		     wsiM0_MReqLast,

		     wsiM0_MBurstPrecise,

		     wsiM0_MBurstLength,

		     wsiM0_MData,

		     wsiM0_MByteEn,

		     wsiM0_MReqInfo,

		     wsiM0_SThreadBusy,

		     wsiM0_MReset_n,

		     wsiM0_SReset_n,

		     wsiS0_MCmd,

		     wsiS0_MReqLast,

		     wsiS0_MBurstPrecise,

		     wsiS0_MBurstLength,

		     wsiS0_MData,

		     wsiS0_MByteEn,

		     wsiS0_MReqInfo,

		     wsiS0_SThreadBusy,

		     wsiS0_SReset_n,

		     wsiS0_MReset_n);
  parameter [31 : 0] smaCtrlInit = 32'b0;
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // value method wmiM0_mCmd
  output [2 : 0] wmiM0_MCmd;

  // value method wmiM0_mReqLast
  output wmiM0_MReqLast;

  // value method wmiM0_mReqInfo
  output wmiM0_MReqInfo;

  // value method wmiM0_mAddrSpace
  output wmiM0_MAddrSpace;

  // value method wmiM0_mAddr
  output [13 : 0] wmiM0_MAddr;

  // value method wmiM0_mBurstLength
  output [11 : 0] wmiM0_MBurstLength;

  // value method wmiM0_mDataValid
  output wmiM0_MDataValid;

  // value method wmiM0_mDataLast
  output wmiM0_MDataLast;

  // value method wmiM0_mData
  output [31 : 0] wmiM0_MData;

  // value method wmiM0_mDataInfo

  // value method wmiM0_mDataByteEn
  output [3 : 0] wmiM0_MDataByteEn;

  // action method wmiM0_sResp
  input  [1 : 0] wmiM0_SResp;

  // action method wmiM0_sData
  input  [31 : 0] wmiM0_SData;

  // action method wmiM0_sThreadBusy
  input  wmiM0_SThreadBusy;

  // action method wmiM0_sDataThreadBusy
  input  wmiM0_SDataThreadBusy;

  // action method wmiM0_sRespLast
  input  wmiM0_SRespLast;

  // action method wmiM0_sFlag
  input  [31 : 0] wmiM0_SFlag;

  // value method wmiM0_mFlag
  output [31 : 0] wmiM0_MFlag;

  // value method wmiM0_mReset_n
  output wmiM0_MReset_n;

  // action method wmiM0_sReset_n
  input  wmiM0_SReset_n;

  // value method wsiM0_mCmd
  output [2 : 0] wsiM0_MCmd;

  // value method wsiM0_mReqLast
  output wsiM0_MReqLast;

  // value method wsiM0_mBurstPrecise
  output wsiM0_MBurstPrecise;

  // value method wsiM0_mBurstLength
  output [11 : 0] wsiM0_MBurstLength;

  // value method wsiM0_mData
  output [31 : 0] wsiM0_MData;

  // value method wsiM0_mByteEn
  output [3 : 0] wsiM0_MByteEn;

  // value method wsiM0_mReqInfo
  output [7 : 0] wsiM0_MReqInfo;

  // value method wsiM0_mDataInfo

  // action method wsiM0_sThreadBusy
  input  wsiM0_SThreadBusy;

  // value method wsiM0_mReset_n
  output wsiM0_MReset_n;

  // action method wsiM0_sReset_n
  input  wsiM0_SReset_n;

  // action method wsiS0_mCmd
  input  [2 : 0] wsiS0_MCmd;

  // action method wsiS0_mReqLast
  input  wsiS0_MReqLast;

  // action method wsiS0_mBurstPrecise
  input  wsiS0_MBurstPrecise;

  // action method wsiS0_mBurstLength
  input  [11 : 0] wsiS0_MBurstLength;

  // action method wsiS0_mData
  input  [31 : 0] wsiS0_MData;

  // action method wsiS0_mByteEn
  input  [3 : 0] wsiS0_MByteEn;

  // action method wsiS0_mReqInfo
  input  [7 : 0] wsiS0_MReqInfo;

  // action method wsiS0_mDataInfo

  // value method wsiS0_sThreadBusy
  output wsiS0_SThreadBusy;

  // value method wsiS0_sReset_n
  output wsiS0_SReset_n;

  // action method wsiS0_mReset_n
  input  wsiS0_MReset_n;

  // signals for module outputs
  wire [31 : 0] wciS0_SData, wmiM0_MData, wmiM0_MFlag, wsiM0_MData;
  wire [13 : 0] wmiM0_MAddr;
  wire [11 : 0] wmiM0_MBurstLength, wsiM0_MBurstLength;
  wire [7 : 0] wsiM0_MReqInfo;
  wire [3 : 0] wmiM0_MDataByteEn, wsiM0_MByteEn;
  wire [2 : 0] wmiM0_MCmd, wsiM0_MCmd;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire wciS0_SThreadBusy,
       wmiM0_MAddrSpace,
       wmiM0_MDataLast,
       wmiM0_MDataValid,
       wmiM0_MReqInfo,
       wmiM0_MReqLast,
       wmiM0_MReset_n,
       wsiM0_MBurstPrecise,
       wsiM0_MReqLast,
       wsiM0_MReset_n,
       wsiS0_SReset_n,
       wsiS0_SThreadBusy;

  // inlined wires
  wire [95 : 0] wsiM_extStatusW$wget, wsiS_extStatusW$wget;
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire [60 : 0] respF_wDataIn$wget,
		respF_wDataOut$wget,
		wsiM_reqFifo_x_wire$wget,
		wsiS_wsiReq$wget;
  wire [37 : 0] wmi_dhF_x_wire$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget, wmi_wmiResponse$wget;
  wire [31 : 0] wci_wci_Es_mAddr_w$wget,
		wci_wci_Es_mData_w$wget,
		wmi_Em_sData_w$wget,
		wmi_mFlagF_x_wire$wget,
		wmi_reqF_x_wire$wget,
		wsi_Es_mData_w$wget;
  wire [11 : 0] fabRespCredit_acc_v1$wget,
		fabRespCredit_acc_v2$wget,
		wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wci_wci_Es_mByteEn_w$wget, wsi_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wci_Es_mCmd_w$wget,
	       wci_wslv_wEdge$wget,
	       wsi_Es_mCmd_w$wget;
  wire [1 : 0] wmi_Em_sResp_w$wget;
  wire fabRespCredit_acc_v1$whas,
       fabRespCredit_acc_v2$whas,
       mesgPreRequest_1$wget,
       mesgPreRequest_1$whas,
       respF_pwDequeue$whas,
       respF_pwEnqueue$whas,
       respF_wDataIn$whas,
       respF_wDataOut$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas,
       wmi_Em_sData_w$whas,
       wmi_Em_sResp_w$whas,
       wmi_dhF_dequeueing$whas,
       wmi_dhF_enqueueing$whas,
       wmi_dhF_x_wire$whas,
       wmi_mFlagF_dequeueing$whas,
       wmi_mFlagF_enqueueing$whas,
       wmi_mFlagF_x_wire$whas,
       wmi_operateD_1$wget,
       wmi_operateD_1$whas,
       wmi_peerIsReady_1$wget,
       wmi_peerIsReady_1$whas,
       wmi_reqF_dequeueing$whas,
       wmi_reqF_enqueueing$whas,
       wmi_reqF_x_wire$whas,
       wmi_sDataThreadBusy_d_1$wget,
       wmi_sDataThreadBusy_d_1$whas,
       wmi_sThreadBusy_d_1$wget,
       wmi_sThreadBusy_d_1$whas,
       wmi_wmiResponse$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas;

  // register abortCount
  reg [31 : 0] abortCount;
  wire [31 : 0] abortCount$D_IN;
  wire abortCount$EN;

  // register doAbort
  reg doAbort;
  wire doAbort$D_IN, doAbort$EN;

  // register endOfMessage
  reg endOfMessage;
  wire endOfMessage$D_IN, endOfMessage$EN;

  // register errCount
  reg [31 : 0] errCount;
  wire [31 : 0] errCount$D_IN;
  wire errCount$EN;

  // register fabRespCredit_value
  reg [11 : 0] fabRespCredit_value;
  wire [11 : 0] fabRespCredit_value$D_IN;
  wire fabRespCredit_value$EN;

  // register fabWordsCurReq
  reg [13 : 0] fabWordsCurReq;
  wire [13 : 0] fabWordsCurReq$D_IN;
  wire fabWordsCurReq$EN;

  // register fabWordsRemain
  reg [13 : 0] fabWordsRemain;
  wire [13 : 0] fabWordsRemain$D_IN;
  wire fabWordsRemain$EN;

  // register firstMsgReq
  reg firstMsgReq;
  wire firstMsgReq$D_IN, firstMsgReq$EN;

  // register lastMesg
  reg [31 : 0] lastMesg;
  wire [31 : 0] lastMesg$D_IN;
  wire lastMesg$EN;

  // register mesgCount
  reg [31 : 0] mesgCount;
  reg [31 : 0] mesgCount$D_IN;
  wire mesgCount$EN;

  // register mesgLengthSoFar
  reg [13 : 0] mesgLengthSoFar;
  wire [13 : 0] mesgLengthSoFar$D_IN;
  wire mesgLengthSoFar$EN;

  // register mesgPreRequest
  reg mesgPreRequest;
  wire mesgPreRequest$D_IN, mesgPreRequest$EN;

  // register mesgReqAddr
  reg [13 : 0] mesgReqAddr;
  wire [13 : 0] mesgReqAddr$D_IN;
  wire mesgReqAddr$EN;

  // register mesgReqOK
  reg mesgReqOK;
  wire mesgReqOK$D_IN, mesgReqOK$EN;

  // register opcode
  reg [8 : 0] opcode;
  wire [8 : 0] opcode$D_IN;
  wire opcode$EN;

  // register readyToPush
  reg readyToPush;
  wire readyToPush$D_IN, readyToPush$EN;

  // register readyToRequest
  reg readyToRequest;
  wire readyToRequest$D_IN, readyToRequest$EN;

  // register respF_rCache
  reg [73 : 0] respF_rCache;
  wire [73 : 0] respF_rCache$D_IN;
  wire respF_rCache$EN;

  // register respF_rRdPtr
  reg [11 : 0] respF_rRdPtr;
  wire [11 : 0] respF_rRdPtr$D_IN;
  wire respF_rRdPtr$EN;

  // register respF_rWrPtr
  reg [11 : 0] respF_rWrPtr;
  wire [11 : 0] respF_rWrPtr$D_IN;
  wire respF_rWrPtr$EN;

  // register smaCtrl
  reg [31 : 0] smaCtrl;
  wire [31 : 0] smaCtrl$D_IN;
  wire smaCtrl$EN;

  // register thisMesg
  reg [31 : 0] thisMesg;
  reg [31 : 0] thisMesg$D_IN;
  wire thisMesg$EN;

  // register unrollCnt
  reg [15 : 0] unrollCnt;
  wire [15 : 0] unrollCnt$D_IN;
  wire unrollCnt$EN;

  // register valExpect
  reg [31 : 0] valExpect;
  wire [31 : 0] valExpect$D_IN;
  wire valExpect$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wmi_busyWithMessage
  reg wmi_busyWithMessage;
  wire wmi_busyWithMessage$D_IN, wmi_busyWithMessage$EN;

  // register wmi_dhF_c_r
  reg [1 : 0] wmi_dhF_c_r;
  wire [1 : 0] wmi_dhF_c_r$D_IN;
  wire wmi_dhF_c_r$EN;

  // register wmi_dhF_q_0
  reg [37 : 0] wmi_dhF_q_0;
  reg [37 : 0] wmi_dhF_q_0$D_IN;
  wire wmi_dhF_q_0$EN;

  // register wmi_dhF_q_1
  reg [37 : 0] wmi_dhF_q_1;
  reg [37 : 0] wmi_dhF_q_1$D_IN;
  wire wmi_dhF_q_1$EN;

  // register wmi_errorSticky
  reg wmi_errorSticky;
  wire wmi_errorSticky$D_IN, wmi_errorSticky$EN;

  // register wmi_isReset_isInReset
  reg wmi_isReset_isInReset;
  wire wmi_isReset_isInReset$D_IN, wmi_isReset_isInReset$EN;

  // register wmi_mFlagF_c_r
  reg [1 : 0] wmi_mFlagF_c_r;
  wire [1 : 0] wmi_mFlagF_c_r$D_IN;
  wire wmi_mFlagF_c_r$EN;

  // register wmi_mFlagF_q_0
  reg [31 : 0] wmi_mFlagF_q_0;
  reg [31 : 0] wmi_mFlagF_q_0$D_IN;
  wire wmi_mFlagF_q_0$EN;

  // register wmi_mFlagF_q_1
  reg [31 : 0] wmi_mFlagF_q_1;
  reg [31 : 0] wmi_mFlagF_q_1$D_IN;
  wire wmi_mFlagF_q_1$EN;

  // register wmi_operateD
  reg wmi_operateD;
  wire wmi_operateD$D_IN, wmi_operateD$EN;

  // register wmi_peerIsReady
  reg wmi_peerIsReady;
  wire wmi_peerIsReady$D_IN, wmi_peerIsReady$EN;

  // register wmi_reqF_c_r
  reg [1 : 0] wmi_reqF_c_r;
  wire [1 : 0] wmi_reqF_c_r$D_IN;
  wire wmi_reqF_c_r$EN;

  // register wmi_reqF_q_0
  reg [31 : 0] wmi_reqF_q_0;
  reg [31 : 0] wmi_reqF_q_0$D_IN;
  wire wmi_reqF_q_0$EN;

  // register wmi_reqF_q_1
  reg [31 : 0] wmi_reqF_q_1;
  reg [31 : 0] wmi_reqF_q_1$D_IN;
  wire wmi_reqF_q_1$EN;

  // register wmi_sDataThreadBusy_d
  reg wmi_sDataThreadBusy_d;
  wire wmi_sDataThreadBusy_d$D_IN, wmi_sDataThreadBusy_d$EN;

  // register wmi_sFlagReg
  reg [31 : 0] wmi_sFlagReg;
  wire [31 : 0] wmi_sFlagReg$D_IN;
  wire wmi_sFlagReg$EN;

  // register wmi_sThreadBusy_d
  reg wmi_sThreadBusy_d;
  wire wmi_sThreadBusy_d$D_IN, wmi_sThreadBusy_d$EN;

  // register wmi_statusR
  reg [7 : 0] wmi_statusR;
  wire [7 : 0] wmi_statusR$D_IN;
  wire wmi_statusR$EN;

  // register wmi_trafficSticky
  reg wmi_trafficSticky;
  wire wmi_trafficSticky$D_IN, wmi_trafficSticky$EN;

  // register wmwtBeginCount
  reg [31 : 0] wmwtBeginCount;
  wire [31 : 0] wmwtBeginCount$D_IN;
  wire wmwtBeginCount$EN;

  // register wmwtFinalCount
  reg [31 : 0] wmwtFinalCount;
  wire [31 : 0] wmwtFinalCount$D_IN;
  wire wmwtFinalCount$EN;

  // register wmwtPushCount
  reg [31 : 0] wmwtPushCount;
  wire [31 : 0] wmwtPushCount$D_IN;
  wire wmwtPushCount$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_isReset_isInReset
  reg wsiM_isReset_isInReset;
  wire wsiM_isReset_isInReset$D_IN, wsiM_isReset_isInReset$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_isReset_isInReset
  reg wsiS_isReset_isInReset;
  wire wsiS_isReset_isInReset$D_IN, wsiS_isReset_isInReset$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule mesgTokenF
  wire mesgTokenF$CLR,
       mesgTokenF$DEQ,
       mesgTokenF$EMPTY_N,
       mesgTokenF$ENQ,
       mesgTokenF$FULL_N;

  // ports of submodule respF_memory
  wire [60 : 0] respF_memory$DIA, respF_memory$DIB, respF_memory$DOB;
  wire [10 : 0] respF_memory$ADDRA, respF_memory$ADDRB;
  wire respF_memory$ENA, respF_memory$ENB, respF_memory$WEA, respF_memory$WEB;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // ports of submodule wmi_respF
  wire [33 : 0] wmi_respF$D_IN, wmi_respF$D_OUT;
  wire wmi_respF$CLR,
       wmi_respF$DEQ,
       wmi_respF$EMPTY_N,
       wmi_respF$ENQ,
       wmi_respF$FULL_N;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_wmwt_mesgBegin,
       CAN_FIRE_RL_wmwt_messagePush,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wmi_dhF_both,
       WILL_FIRE_RL_wmi_dhF_decCtr,
       WILL_FIRE_RL_wmi_dhF_incCtr,
       WILL_FIRE_RL_wmi_mFlagF_both,
       WILL_FIRE_RL_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_wmi_reqF_both,
       WILL_FIRE_RL_wmi_reqF_decCtr,
       WILL_FIRE_RL_wmi_reqF_deq,
       WILL_FIRE_RL_wmi_reqF_incCtr,
       WILL_FIRE_RL_wmi_respAdvance,
       WILL_FIRE_RL_wmrd_mesgBegin,
       WILL_FIRE_RL_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_wmwt_doAbort,
       WILL_FIRE_RL_wmwt_mesgBegin,
       WILL_FIRE_RL_wmwt_messageFinalize,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [60 : 0] MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_wsiM_reqFifo_x_wire$wset_1__VAL_3;
  wire [37 : 0] MUX_wmi_dhF_q_0$write_1__VAL_1,
		MUX_wmi_dhF_q_0$write_1__VAL_2,
		MUX_wmi_dhF_q_1$write_1__VAL_1;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
  wire [31 : 0] MUX_mesgCount$write_1__VAL_1,
		MUX_thisMesg$write_1__VAL_1,
		MUX_thisMesg$write_1__VAL_2,
		MUX_wmi_mFlagF_q_0$write_1__VAL_1,
		MUX_wmi_mFlagF_q_1$write_1__VAL_1,
		MUX_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_wmi_reqF_q_0$write_1__VAL_1,
		MUX_wmi_reqF_q_0$write_1__VAL_2,
		MUX_wmi_reqF_q_1$write_1__VAL_1,
		MUX_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_wmi_reqF_x_wire$wset_1__VAL_2;
  wire [15 : 0] MUX_unrollCnt$write_1__VAL_1, MUX_unrollCnt$write_1__VAL_2;
  wire [13 : 0] MUX_fabWordsRemain$write_1__VAL_1,
		MUX_fabWordsRemain$write_1__VAL_2,
		MUX_mesgLengthSoFar$write_1__VAL_1,
		MUX_mesgReqAddr$write_1__VAL_2;
  wire [11 : 0] MUX_fabRespCredit_value$write_1__VAL_2;
  wire [8 : 0] MUX_opcode$write_1__VAL_3;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_endOfMessage$write_1__SEL_1,
       MUX_mesgCount$write_1__SEL_1,
       MUX_mesgReqOK$write_1__SEL_3,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__VAL_1,
       MUX_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_wmi_dhF_q_0$write_1__SEL_2,
       MUX_wmi_dhF_q_1$write_1__SEL_2,
       MUX_wmi_mFlagF_q_0$write_1__SEL_2,
       MUX_wmi_mFlagF_q_1$write_1__SEL_2,
       MUX_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_wmi_reqF_q_0$write_1__SEL_2,
       MUX_wmi_reqF_q_1$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_wsiM_reqFifo_x_wire$wset_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h18213,
	       v__h21925,
	       v__h21984,
	       v__h23326,
	       v__h23509,
	       v__h23705,
	       v__h24352,
	       v__h3651,
	       v__h3825,
	       v__h3969;
  reg [31 : 0] g_data__h23875;
  wire [55 : 0] IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d886;
  wire [31 : 0] rdat__h23918,
		rdat__h23924,
		rdat__h23930,
		rdat__h23943,
		rdat__h23966,
		rdat__h24066,
		rdat__h24080,
		rdat__h24088,
		rdat__h24094,
		rdat__h24108,
		rdat__h24116,
		rdat__h24122,
		rdat__h24128,
		rdat__h24134,
		rdat__h24140,
		value__h6580,
		x__h18813;
  wire [23 : 0] b__h17924,
		mesgMetaF_length__h22506,
		residue__h17787,
		x__h18044;
  wire [15 : 0] wsiBurstLength__h18672, x__h23970, x_length__h22906;
  wire [13 : 0] b__h18297, mlB__h22339, mlInc__h22338;
  wire [11 : 0] b__h15112, sendData_burstLength__h18754, x__h16466;
  wire [7 : 0] mesgMetaF_opcode__h22505;
  wire [3 : 0] sendData_byteEn__h18756;
  wire [2 : 0] IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d895,
	       x__h22545,
	       x__h22557,
	       x__h22569,
	       y__h22546,
	       y__h22558,
	       y__h22570;
  wire NOT_wmi_reqF_c_r_57_EQ_2_75_76_AND_wmi_operate_ETC___d534,
       wmi_respF_i_notEmpty__46_AND_smaCtrl_75_BIT_4__ETC___d551,
       wsiS_reqFifo_i_notEmpty__74_AND_NOT_smaCtrl_75_ETC___d679,
       wsiS_reqFifo_notFull__77_AND_wsiS_burstKind_92_ETC___d399,
       x__h18468;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // value method wmiM0_mCmd
  assign wmiM0_MCmd = wmi_sThreadBusy_d ? 3'd0 : wmi_reqF_q_0[31:29] ;

  // value method wmiM0_mReqLast
  assign wmiM0_MReqLast = !wmi_sThreadBusy_d && wmi_reqF_q_0[28] ;

  // value method wmiM0_mReqInfo
  assign wmiM0_MReqInfo = !wmi_sThreadBusy_d && wmi_reqF_q_0[27] ;

  // value method wmiM0_mAddrSpace
  assign wmiM0_MAddrSpace = !wmi_sThreadBusy_d && wmi_reqF_q_0[26] ;

  // value method wmiM0_mAddr
  assign wmiM0_MAddr = wmi_sThreadBusy_d ? 14'd0 : wmi_reqF_q_0[25:12] ;

  // value method wmiM0_mBurstLength
  assign wmiM0_MBurstLength = wmi_sThreadBusy_d ? 12'd0 : wmi_reqF_q_0[11:0] ;

  // value method wmiM0_mDataValid
  assign wmiM0_MDataValid = !wmi_sDataThreadBusy_d && wmi_dhF_q_0[37] ;

  // value method wmiM0_mDataLast
  assign wmiM0_MDataLast = !wmi_sDataThreadBusy_d && wmi_dhF_q_0[36] ;

  // value method wmiM0_mData
  assign wmiM0_MData = wmi_sDataThreadBusy_d ? 32'd0 : wmi_dhF_q_0[35:4] ;

  // value method wmiM0_mDataByteEn
  assign wmiM0_MDataByteEn = wmi_sDataThreadBusy_d ? 4'd0 : wmi_dhF_q_0[3:0] ;

  // value method wmiM0_mFlag
  assign wmiM0_MFlag = wmi_sThreadBusy_d ? 32'd0 : wmi_mFlagF_q_0 ;

  // value method wmiM0_mReset_n
  assign wmiM0_MReset_n = !wmi_isReset_isInReset && wmi_operateD ;

  // value method wsiM0_mCmd
  assign wsiM0_MCmd = wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;

  // value method wsiM0_mReqLast
  assign wsiM0_MReqLast = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;

  // value method wsiM0_mBurstPrecise
  assign wsiM0_MBurstPrecise = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;

  // value method wsiM0_mBurstLength
  assign wsiM0_MBurstLength =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;

  // value method wsiM0_mData
  assign wsiM0_MData = wsiM_reqFifo_q_0[43:12] ;

  // value method wsiM0_mByteEn
  assign wsiM0_MByteEn = wsiM_reqFifo_q_0[11:8] ;

  // value method wsiM0_mReqInfo
  assign wsiM0_MReqInfo = wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;

  // value method wsiM0_mReset_n
  assign wsiM0_MReset_n = !wsiM_isReset_isInReset && wsiM_operateD ;

  // value method wsiS0_sThreadBusy
  assign wsiS0_SThreadBusy =
	     !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget ;

  // value method wsiS0_sReset_n
  assign wsiS0_SReset_n = !wsiS_isReset_isInReset && wsiS_operateD ;

  // submodule mesgTokenF
  FIFO10 #(.guarded(32'd1)) mesgTokenF(.RST_N(wciS0_MReset_n),
				       .CLK(wciS0_Clk),
				       .ENQ(mesgTokenF$ENQ),
				       .DEQ(mesgTokenF$DEQ),
				       .CLR(mesgTokenF$CLR),
				       .FULL_N(mesgTokenF$FULL_N),
				       .EMPTY_N(mesgTokenF$EMPTY_N));

  // submodule respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) respF_memory(.CLKA(wciS0_Clk),
					   .CLKB(wciS0_Clk),
					   .ADDRA(respF_memory$ADDRA),
					   .ADDRB(respF_memory$ADDRB),
					   .DIA(respF_memory$DIA),
					   .DIB(respF_memory$DIB),
					   .WEA(respF_memory$WEA),
					   .WEB(respF_memory$WEB),
					   .ENA(respF_memory$ENA),
					   .ENB(respF_memory$ENB),
					   .DOA(),
					   .DOB(respF_memory$DOB));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // submodule wmi_respF
  FIFO2 #(.width(32'd34), .guarded(32'd1)) wmi_respF(.RST_N(wciS0_MReset_n),
						     .CLK(wciS0_Clk),
						     .D_IN(wmi_respF$D_IN),
						     .ENQ(wmi_respF$ENQ),
						     .DEQ(wmi_respF$DEQ),
						     .CLR(wmi_respF$CLR),
						     .D_OUT(wmi_respF$D_OUT),
						     .FULL_N(wmi_respF$FULL_N),
						     .EMPTY_N(wmi_respF$EMPTY_N));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_wmrd_mesgBodyPreRequest =
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h1 || smaCtrl[3:0] == 4'h4 ||
	      smaCtrl[3:0] == 4'h9) &&
	     fabWordsRemain != 14'd0 &&
	     (fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     mesgReqOK ;

  // rule RL_wmrd_mesgBodyRequest
  assign WILL_FIRE_RL_wmrd_mesgBodyRequest =
	     NOT_wmi_reqF_c_r_57_EQ_2_75_76_AND_wmi_operate_ETC___d534 &&
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h1 || smaCtrl[3:0] == 4'h4 ||
	      smaCtrl[3:0] == 4'h9) &&
	     mesgPreRequest ;

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_reqF$EMPTY_N &&
	     wci_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wmrd_mesgBegin
  assign WILL_FIRE_RL_wmrd_mesgBegin =
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h1 || smaCtrl[3:0] == 4'h4 ||
	      smaCtrl[3:0] == 4'h9) &&
	     !wmi_sThreadBusy_d &&
	     !wmi_sDataThreadBusy_d &&
	     unrollCnt == 16'd0 ;

  // rule RL_wmwt_mesgBegin
  assign CAN_FIRE_RL_wmwt_mesgBegin =
	     wsiS_reqFifo$EMPTY_N && mesgTokenF$FULL_N &&
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h2 || smaCtrl[3:0] == 4'h3) &&
	     !wmi_sThreadBusy_d &&
	     !wmi_sDataThreadBusy_d &&
	     !opcode[8] ;
  assign WILL_FIRE_RL_wmwt_mesgBegin =
	     CAN_FIRE_RL_wmwt_mesgBegin &&
	     !MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // rule RL_wmwt_messageFinalize
  assign WILL_FIRE_RL_wmwt_messageFinalize =
	     mesgTokenF$EMPTY_N && wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h2 || smaCtrl[3:0] == 4'h3) &&
	     !doAbort &&
	     endOfMessage ;

  // rule RL_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign WILL_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_wmi_reqF_deq
  assign WILL_FIRE_RL_wmi_reqF_deq =
	     wmi_operateD && wmi_peerIsReady && !wmi_sThreadBusy_d ;

  // rule RL_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;

  // rule RL_wmrd_mesgResptoWsi
  assign WILL_FIRE_RL_wmrd_mesgResptoWsi =
	     wsiM_reqFifo_c_r != 2'd2 && respF_rRdPtr != respF_rWrPtr &&
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h1 || smaCtrl[3:0] == 4'h4 ||
	      smaCtrl[3:0] == 4'h9) ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_wmwt_messagePush
  assign CAN_FIRE_RL_wmwt_messagePush =
	     wmi_reqF_c_r != 2'd2 && wmi_dhF_c_r != 2'd2 && wmi_operateD &&
	     wmi_peerIsReady &&
	     wsiS_reqFifo_i_notEmpty__74_AND_NOT_smaCtrl_75_ETC___d679 &&
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h2 || smaCtrl[3:0] == 4'h3) &&
	     readyToPush ;

  // rule RL_wmwt_doAbort
  assign WILL_FIRE_RL_wmwt_doAbort =
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h2 || smaCtrl[3:0] == 4'h3) &&
	     doAbort ;

  // rule RL_wmi_reqF_incCtr
  assign WILL_FIRE_RL_wmi_reqF_incCtr =
	     ((wmi_reqF_c_r == 2'd0) ?
		wmi_reqF_x_wire$whas :
		wmi_reqF_c_r != 2'd1 || wmi_reqF_x_wire$whas) &&
	     wmi_reqF_enqueueing$whas &&
	     !wmi_reqF_dequeueing$whas ;

  // rule RL_wmi_reqF_decCtr
  assign WILL_FIRE_RL_wmi_reqF_decCtr =
	     wmi_reqF_dequeueing$whas && !wmi_reqF_enqueueing$whas ;

  // rule RL_wmi_reqF_both
  assign WILL_FIRE_RL_wmi_reqF_both =
	     ((wmi_reqF_c_r == 2'd1) ?
		wmi_reqF_x_wire$whas :
		wmi_reqF_c_r != 2'd2 || wmi_reqF_x_wire$whas) &&
	     wmi_reqF_dequeueing$whas &&
	     wmi_reqF_enqueueing$whas ;

  // rule RL_wmi_mFlagF_incCtr
  assign WILL_FIRE_RL_wmi_mFlagF_incCtr =
	     ((wmi_mFlagF_c_r == 2'd0) ?
		wmi_mFlagF_enqueueing$whas :
		wmi_mFlagF_c_r != 2'd1 || wmi_mFlagF_enqueueing$whas) &&
	     wmi_mFlagF_enqueueing$whas &&
	     !wmi_mFlagF_dequeueing$whas ;

  // rule RL_wmi_mFlagF_decCtr
  assign WILL_FIRE_RL_wmi_mFlagF_decCtr =
	     wmi_mFlagF_dequeueing$whas && !wmi_mFlagF_enqueueing$whas ;

  // rule RL_wmi_mFlagF_both
  assign WILL_FIRE_RL_wmi_mFlagF_both =
	     ((wmi_mFlagF_c_r == 2'd1) ?
		wmi_mFlagF_enqueueing$whas :
		wmi_mFlagF_c_r != 2'd2 || wmi_mFlagF_enqueueing$whas) &&
	     wmi_mFlagF_dequeueing$whas &&
	     wmi_mFlagF_enqueueing$whas ;

  // rule RL_wmi_dhF_incCtr
  assign WILL_FIRE_RL_wmi_dhF_incCtr =
	     ((wmi_dhF_c_r == 2'd0) ?
		MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 :
		wmi_dhF_c_r != 2'd1 ||
		MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2) &&
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     !wmi_dhF_dequeueing$whas ;

  // rule RL_wmi_dhF_decCtr
  assign WILL_FIRE_RL_wmi_dhF_decCtr =
	     wmi_dhF_dequeueing$whas &&
	     !MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // rule RL_wmi_dhF_both
  assign WILL_FIRE_RL_wmi_dhF_both =
	     ((wmi_dhF_c_r == 2'd1) ?
		MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 :
		wmi_dhF_c_r != 2'd2 ||
		MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2) &&
	     wmi_dhF_dequeueing$whas &&
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // rule RL_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd1 || wsiM_reqFifo_enqueueing$whas) &&
	     wsiM_reqFifo_enqueueing$whas &&
	     !WILL_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_wsiM_reqFifo_deq && !wsiM_reqFifo_enqueueing$whas ;

  // rule RL_wsiM_reqFifo_both
  assign WILL_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd2 || wsiM_reqFifo_enqueueing$whas) &&
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_enqueueing$whas ;

  // rule RL_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_wsiS_reqFifo_reset =
	     wsiS_reqFifo_r_enq$whas || wsiS_reqFifo_r_deq$whas ;

  // rule RL_wmi_respAdvance
  assign WILL_FIRE_RL_wmi_respAdvance =
	     wmi_operateD && wmi_peerIsReady &&
	     wmi_wmiResponse$wget[33:32] != 2'd0 ;

  // rule RL_wmrd_mesgBodyResponse
  assign WILL_FIRE_RL_wmrd_mesgBodyResponse =
	     wmi_respF_i_notEmpty__46_AND_smaCtrl_75_BIT_4__ETC___d551 &&
	     wci_wslv_cState == 3'd2 &&
	     (smaCtrl[3:0] == 4'h1 || smaCtrl[3:0] == 4'h4 ||
	      smaCtrl[3:0] == 4'h9) &&
	     unrollCnt != 16'd0 ;

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_reqF$EMPTY_N &&
	     wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;

  // rule RL_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;

  // rule RL_wci_wslv_respF_both
  assign WILL_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;

  // inputs to muxes for submodule ports
  assign MUX_endOfMessage$write_1__SEL_1 =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] ;
  assign MUX_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_wmrd_mesgBodyResponse && unrollCnt == 16'd1 ;
  assign MUX_mesgReqOK$write_1__SEL_3 =
	     CAN_FIRE_RL_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_wmrd_mesgBodyRequest ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wmi_dhF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_dhF_incCtr && wmi_dhF_c_r == 2'd0 ;
  assign MUX_wmi_dhF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_dhF_incCtr && wmi_dhF_c_r == 2'd1 ;
  assign MUX_wmi_mFlagF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_mFlagF_incCtr && wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_wmi_mFlagF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_mFlagF_incCtr && wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_wmrd_mesgBodyRequest && x__h18468 ;
  assign MUX_wmi_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_reqF_incCtr && wmi_reqF_c_r == 2'd0 ;
  assign MUX_wmi_reqF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wmi_reqF_incCtr && wmi_reqF_c_r == 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 && !smaCtrl[4] ;
  assign MUX_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     smaCtrl[3:0] == 4'h3 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 =
	     CAN_FIRE_RL_wmwt_messagePush &&
	     !WILL_FIRE_RL_wmwt_messageFinalize ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     wsiS_reqFifo$EMPTY_N &&
	     (smaCtrl[4] || wsiM_reqFifo_c_r != 2'd2) &&
	     wci_wslv_cState == 3'd2 &&
	     smaCtrl[3:0] == 4'h0 ;
  assign MUX_fabRespCredit_value$write_1__VAL_2 =
	     fabRespCredit_value +
	     (WILL_FIRE_RL_wmrd_mesgBodyRequest ? b__h15112 : 12'd0) +
	     (WILL_FIRE_RL_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_fabWordsRemain$write_1__VAL_1 =
	     (wmi_sFlagReg[23:0] == 24'd0) ? 14'd1 : b__h17924[13:0] ;
  assign MUX_fabWordsRemain$write_1__VAL_2 = fabWordsRemain - fabWordsCurReq ;
  assign MUX_mesgCount$write_1__VAL_1 = mesgCount + 32'd1 ;
  assign MUX_mesgLengthSoFar$write_1__VAL_1 =
	     mesgLengthSoFar + mlInc__h22338 ;
  assign MUX_mesgReqAddr$write_1__VAL_2 =
	     mesgReqAddr + { fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_opcode$write_1__VAL_3 = { 1'd1, wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_thisMesg$write_1__VAL_1 =
	     { mesgCount[7:0], mesgMetaF_opcode__h22505, x_length__h22906 } ;
  assign MUX_thisMesg$write_1__VAL_2 =
	     { mesgCount[7:0], wmi_sFlagReg[31:24], wmi_sFlagReg[15:0] } ;
  assign MUX_unrollCnt$write_1__VAL_1 =
	     (wmi_sFlagReg[23:0] == 24'd0) ? 16'd1 : b__h17924[15:0] ;
  assign MUX_unrollCnt$write_1__VAL_2 = unrollCnt - 16'd1 ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_1 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       wci_wslv_respF_q_1 ;
  always@(WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 = { 2'd1, g_data__h23875 } ;
  assign MUX_wmi_dhF_c_r$write_1__VAL_1 = wmi_dhF_c_r + 2'd1 ;
  assign MUX_wmi_dhF_c_r$write_1__VAL_2 = wmi_dhF_c_r - 2'd1 ;
  assign MUX_wmi_dhF_q_0$write_1__VAL_1 =
	     (wmi_dhF_c_r == 2'd1) ?
	       MUX_wmi_dhF_q_0$write_1__VAL_2 :
	       wmi_dhF_q_1 ;
  assign MUX_wmi_dhF_q_0$write_1__VAL_2 =
	     { 1'd1, wsiS_reqFifo$D_OUT[57], wsiS_reqFifo$D_OUT[43:8] } ;
  assign MUX_wmi_dhF_q_1$write_1__VAL_1 =
	     (wmi_dhF_c_r == 2'd2) ? MUX_wmi_dhF_q_0$write_1__VAL_2 : 38'd0 ;
  assign MUX_wmi_mFlagF_c_r$write_1__VAL_1 = wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_wmi_mFlagF_c_r$write_1__VAL_2 = wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_wmi_mFlagF_q_0$write_1__VAL_1 =
	     (wmi_mFlagF_c_r == 2'd1) ? value__h6580 : wmi_mFlagF_q_1 ;
  assign MUX_wmi_mFlagF_q_1$write_1__VAL_1 =
	     (wmi_mFlagF_c_r == 2'd2) ? value__h6580 : 32'd0 ;
  assign MUX_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { mesgMetaF_opcode__h22505, mesgMetaF_length__h22506 } ;
  assign MUX_wmi_reqF_c_r$write_1__VAL_1 = wmi_reqF_c_r + 2'd1 ;
  assign MUX_wmi_reqF_c_r$write_1__VAL_2 = wmi_reqF_c_r - 2'd1 ;
  assign MUX_wmi_reqF_q_0$write_1__VAL_1 =
	     (wmi_reqF_c_r == 2'd1) ?
	       MUX_wmi_reqF_q_0$write_1__VAL_2 :
	       wmi_reqF_q_1 ;
  assign MUX_wmi_reqF_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_wmrd_mesgBodyRequest ?
	       MUX_wmi_reqF_x_wire$wset_1__VAL_1 :
	       MUX_wmi_reqF_x_wire$wset_1__VAL_2 ;
  assign MUX_wmi_reqF_q_1$write_1__VAL_1 =
	     (wmi_reqF_c_r == 2'd2) ?
	       MUX_wmi_reqF_q_0$write_1__VAL_2 :
	       32'd0 ;
  assign MUX_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5, x__h18468, 1'b0, mesgReqAddr, fabWordsCurReq[11:0] } ;
  assign MUX_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 4'd3, wsiS_reqFifo$D_OUT[57], 1'b0, mesgLengthSoFar, 12'd1 } ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (MUX_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       wsiS_reqFifo$D_OUT :
	       MUX_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (respF_rCache[73] && respF_rCache[72:61] == respF_rRdPtr) ?
	       respF_rCache[60:0] :
	       respF_memory$DOB ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wmi_reqF_x_wire$wget = MUX_wmi_reqF_q_0$write_1__VAL_2 ;
  assign wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_wmrd_mesgBodyRequest ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wmi_mFlagF_x_wire$wget = value__h6580 ;
  assign wmi_mFlagF_x_wire$whas = wmi_mFlagF_enqueueing$whas ;
  assign wmi_dhF_x_wire$wget = MUX_wmi_dhF_q_0$write_1__VAL_2 ;
  assign wmi_dhF_x_wire$whas = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wmi_wmiResponse$wget = { wmiM0_SResp, wmiM0_SData } ;
  assign wmi_wmiResponse$whas = 1'd1 ;
  assign wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign wmi_sThreadBusy_d_1$whas = wmiM0_SThreadBusy ;
  assign wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign wmi_sDataThreadBusy_d_1$whas = wmiM0_SDataThreadBusy ;
  assign wmi_operateD_1$wget = 1'd1 ;
  assign wmi_operateD_1$whas = wci_wslv_cState == 3'd2 ;
  assign wmi_peerIsReady_1$wget = 1'd1 ;
  assign wmi_peerIsReady_1$whas = wmiM0_SReset_n ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign wsiM_reqFifo_x_wire$whas = wsiM_reqFifo_enqueueing$whas ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = wci_wslv_cState == 3'd2 ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas = wsiM0_SReset_n ;
  assign wsiS_wsiReq$wget =
	     { wsiS0_MCmd,
	       wsiS0_MReqLast,
	       wsiS0_MBurstPrecise,
	       wsiS0_MBurstLength,
	       wsiS0_MData,
	       wsiS0_MByteEn,
	       wsiS0_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = wci_wslv_cState == 3'd2 ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsiS0_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign fabRespCredit_acc_v1$wget = b__h15112 ;
  assign fabRespCredit_acc_v1$whas = WILL_FIRE_RL_wmrd_mesgBodyRequest ;
  assign fabRespCredit_acc_v2$wget = 12'd1 ;
  assign fabRespCredit_acc_v2$whas = WILL_FIRE_RL_wmrd_mesgResptoWsi ;
  assign mesgPreRequest_1$wget = 1'd1 ;
  assign mesgPreRequest_1$whas = MUX_mesgReqOK$write_1__SEL_3 ;
  assign respF_wDataIn$wget =
	     { 3'd1,
	       unrollCnt == 16'd1,
	       !smaCtrl[5],
	       sendData_burstLength__h18754,
	       wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h18756,
	       thisMesg[23:16] } ;
  assign respF_wDataIn$whas = respF_pwEnqueue$whas ;
  assign respF_wDataOut$wget = MUX_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign respF_wDataOut$whas = 1'd1 ;
  assign wsi_Es_mCmd_w$wget = wsiS0_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = wsiS0_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsiS0_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = wsiS0_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsiS0_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wmi_Em_sResp_w$wget = wmiM0_SResp ;
  assign wmi_Em_sResp_w$whas = 1'd1 ;
  assign wmi_Em_sData_w$wget = wmiM0_SData ;
  assign wmi_Em_sData_w$whas = 1'd1 ;
  assign wci_wslv_reqF_r_enq$whas = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wmi_reqF_enqueueing$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ||
	     WILL_FIRE_RL_wmrd_mesgBodyRequest ;
  assign wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_wmi_reqF_deq && wmi_reqF_c_r != 2'd0 ;
  assign wmi_mFlagF_enqueueing$whas =
	     WILL_FIRE_RL_wmrd_mesgBodyRequest && x__h18468 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] ;
  assign wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_wmi_reqF_deq && wmi_reqF_q_0[27] &&
	     wmi_mFlagF_c_r != 2'd0 ;
  assign wmi_dhF_enqueueing$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wmi_dhF_dequeueing$whas =
	     wmi_operateD && wmi_peerIsReady && !wmi_sDataThreadBusy_d &&
	     wmi_dhF_c_r != 2'd0 ;
  assign wsiM_reqFifo_enqueueing$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 && !smaCtrl[4] ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_wmrd_mesgResptoWsi ;
  assign wsiM_reqFifo_dequeueing$whas = WILL_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas = wsiM0_SThreadBusy ;
  assign wsiS_reqFifo_r_enq$whas =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas = wsiS_reqFifo_r_enq$whas ;
  assign wsiS_reqFifo_doResetDeq$whas = wsiS_reqFifo_r_deq$whas ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign respF_pwDequeue$whas = WILL_FIRE_RL_wmrd_mesgResptoWsi ;
  assign respF_pwEnqueue$whas =
	     WILL_FIRE_RL_wmrd_mesgBodyResponse && !smaCtrl[4] ;
  assign wsi_Es_mReqLast_w$whas = wsiS0_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsiS0_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;

  // register abortCount
  assign abortCount$D_IN = abortCount + 32'd1 ;
  assign abortCount$EN = WILL_FIRE_RL_wmwt_doAbort ;

  // register doAbort
  assign doAbort$D_IN = 1'd0 ;
  assign doAbort$EN = WILL_FIRE_RL_wmwt_doAbort ;

  // register endOfMessage
  assign endOfMessage$D_IN = MUX_endOfMessage$write_1__SEL_1 ;
  assign endOfMessage$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_wmwt_messageFinalize ;

  // register errCount
  assign errCount$D_IN = errCount + 32'd1 ;
  assign errCount$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[43:12] != valExpect &&
	     (!wsiS_reqFifo$D_OUT[57] || wsiS_reqFifo$D_OUT[11:8] != 4'd0 ||
	      mesgLengthSoFar != 14'd0) ;

  // register fabRespCredit_value
  assign fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_fabRespCredit_value$write_1__VAL_2 ;
  assign fabRespCredit_value$EN = 1'b1 ;

  // register fabWordsCurReq
  assign fabWordsCurReq$D_IN =
	     (fabWordsRemain <= b__h18297) ? fabWordsRemain : b__h18297 ;
  assign fabWordsCurReq$EN = MUX_mesgReqOK$write_1__SEL_3 ;

  // register fabWordsRemain
  assign fabWordsRemain$D_IN =
	     WILL_FIRE_RL_wmrd_mesgBegin ?
	       MUX_fabWordsRemain$write_1__VAL_1 :
	       MUX_fabWordsRemain$write_1__VAL_2 ;
  assign fabWordsRemain$EN =
	     WILL_FIRE_RL_wmrd_mesgBegin ||
	     WILL_FIRE_RL_wmrd_mesgBodyRequest ;

  // register firstMsgReq
  assign firstMsgReq$D_IN = 1'b0 ;
  assign firstMsgReq$EN = 1'b0 ;

  // register lastMesg
  assign lastMesg$D_IN =
	     (MUX_endOfMessage$write_1__SEL_1 ||
	      WILL_FIRE_RL_wmrd_mesgBegin) ?
	       thisMesg :
	       32'hFEFEFFFE ;
  assign lastMesg$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_wmrd_mesgBegin ||
	     WILL_FIRE_RL_wci_ctrl_IsO ;

  // register mesgCount
  always@(MUX_mesgCount$write_1__SEL_1 or
	  MUX_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_wmwt_messageFinalize or WILL_FIRE_RL_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mesgCount$write_1__SEL_1:
	  mesgCount$D_IN = MUX_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_wmwt_messageFinalize:
	  mesgCount$D_IN = MUX_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_wci_ctrl_IsO: mesgCount$D_IN = 32'd0;
      default: mesgCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign mesgCount$EN =
	     WILL_FIRE_RL_wmrd_mesgBodyResponse && unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_wmwt_messageFinalize ||
	     WILL_FIRE_RL_wci_ctrl_IsO ;

  // register mesgLengthSoFar
  assign mesgLengthSoFar$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ?
	       MUX_mesgLengthSoFar$write_1__VAL_1 :
	       14'd0 ;
  assign mesgLengthSoFar$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ||
	     WILL_FIRE_RL_wmwt_mesgBegin ;

  // register mesgPreRequest
  assign mesgPreRequest$D_IN = MUX_mesgReqOK$write_1__SEL_3 ;
  assign mesgPreRequest$EN = 1'd1 ;

  // register mesgReqAddr
  assign mesgReqAddr$D_IN =
	     WILL_FIRE_RL_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_mesgReqAddr$write_1__VAL_2 ;
  assign mesgReqAddr$EN =
	     WILL_FIRE_RL_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_wmrd_mesgBegin ;

  // register mesgReqOK
  assign mesgReqOK$D_IN =
	     WILL_FIRE_RL_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_wmrd_mesgBegin ;
  assign mesgReqOK$EN =
	     CAN_FIRE_RL_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_wmrd_mesgBegin ||
	     WILL_FIRE_RL_wmrd_mesgBodyResponse ;

  // register opcode
  assign opcode$D_IN =
	     (WILL_FIRE_RL_wmwt_doAbort ||
	      WILL_FIRE_RL_wmwt_messageFinalize) ?
	       9'd170 :
	       MUX_opcode$write_1__VAL_3 ;
  assign opcode$EN =
	     WILL_FIRE_RL_wmwt_mesgBegin ||
	     WILL_FIRE_RL_wmwt_messageFinalize ||
	     WILL_FIRE_RL_wmwt_doAbort ;

  // register readyToPush
  assign readyToPush$D_IN =
	     !WILL_FIRE_RL_wmwt_doAbort && !MUX_endOfMessage$write_1__SEL_1 ;
  assign readyToPush$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_wmwt_doAbort ||
	     WILL_FIRE_RL_wmwt_mesgBegin ;

  // register readyToRequest
  assign readyToRequest$D_IN = 1'b0 ;
  assign readyToRequest$EN = 1'b0 ;

  // register respF_rCache
  assign respF_rCache$D_IN =
	     { 1'd1,
	       respF_rWrPtr,
	       IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d895,
	       respF_pwEnqueue$whas && respF_wDataIn$wget[57],
	       respF_pwEnqueue$whas && respF_wDataIn$wget[56],
	       IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d886 } ;
  assign respF_rCache$EN = respF_pwEnqueue$whas ;

  // register respF_rRdPtr
  assign respF_rRdPtr$D_IN = x__h16466 ;
  assign respF_rRdPtr$EN = WILL_FIRE_RL_wmrd_mesgResptoWsi ;

  // register respF_rWrPtr
  assign respF_rWrPtr$D_IN = respF_rWrPtr + 12'd1 ;
  assign respF_rWrPtr$EN = respF_pwEnqueue$whas ;

  // register smaCtrl
  assign smaCtrl$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign smaCtrl$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;

  // register thisMesg
  always@(MUX_endOfMessage$write_1__SEL_1 or
	  MUX_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_wmrd_mesgBegin or
	  MUX_thisMesg$write_1__VAL_2 or WILL_FIRE_RL_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_endOfMessage$write_1__SEL_1:
	  thisMesg$D_IN = MUX_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_wmrd_mesgBegin:
	  thisMesg$D_IN = MUX_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_wci_ctrl_IsO: thisMesg$D_IN = 32'hFEFEFFFE;
      default: thisMesg$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign thisMesg$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_wmrd_mesgBegin ||
	     WILL_FIRE_RL_wci_ctrl_IsO ;

  // register unrollCnt
  assign unrollCnt$D_IN =
	     WILL_FIRE_RL_wmrd_mesgBegin ?
	       MUX_unrollCnt$write_1__VAL_1 :
	       MUX_unrollCnt$write_1__VAL_2 ;
  assign unrollCnt$EN =
	     WILL_FIRE_RL_wmrd_mesgBegin ||
	     WILL_FIRE_RL_wmrd_mesgBodyResponse ;

  // register valExpect
  assign valExpect$D_IN = valExpect + 32'd1 ;
  assign valExpect$EN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 &&
	     (!wsiS_reqFifo$D_OUT[57] || wsiS_reqFifo$D_OUT[11:8] != 4'd0 ||
	      mesgLengthSoFar != 14'd0) ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_1 ;
  assign wci_wslv_illegalEdge$EN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_wci_wslv_respF_q_0$write_1__SEL_2:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_wci_wslv_respF_q_1$write_1__SEL_2:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wmi_busyWithMessage
  assign wmi_busyWithMessage$D_IN = 1'b0 ;
  assign wmi_busyWithMessage$EN = 1'b0 ;

  // register wmi_dhF_c_r
  assign wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_wmi_dhF_incCtr ?
	       MUX_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_wmi_dhF_c_r$write_1__VAL_2 ;
  assign wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_wmi_dhF_incCtr || WILL_FIRE_RL_wmi_dhF_decCtr ;

  // register wmi_dhF_q_0
  always@(WILL_FIRE_RL_wmi_dhF_both or
	  MUX_wmi_dhF_q_0$write_1__VAL_1 or
	  MUX_wmi_dhF_q_0$write_1__SEL_2 or
	  MUX_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wmi_dhF_decCtr or wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_dhF_both:
	  wmi_dhF_q_0$D_IN = MUX_wmi_dhF_q_0$write_1__VAL_1;
      MUX_wmi_dhF_q_0$write_1__SEL_2:
	  wmi_dhF_q_0$D_IN = MUX_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmi_dhF_decCtr: wmi_dhF_q_0$D_IN = wmi_dhF_q_1;
      default: wmi_dhF_q_0$D_IN = 38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_wmi_dhF_both ||
	     WILL_FIRE_RL_wmi_dhF_incCtr && wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wmi_dhF_decCtr ;

  // register wmi_dhF_q_1
  always@(WILL_FIRE_RL_wmi_dhF_both or
	  MUX_wmi_dhF_q_1$write_1__VAL_1 or
	  MUX_wmi_dhF_q_1$write_1__SEL_2 or
	  MUX_wmi_dhF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_dhF_both:
	  wmi_dhF_q_1$D_IN = MUX_wmi_dhF_q_1$write_1__VAL_1;
      MUX_wmi_dhF_q_1$write_1__SEL_2:
	  wmi_dhF_q_1$D_IN = MUX_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmi_dhF_decCtr: wmi_dhF_q_1$D_IN = 38'd0;
      default: wmi_dhF_q_1$D_IN = 38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_wmi_dhF_both ||
	     WILL_FIRE_RL_wmi_dhF_incCtr && wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wmi_dhF_decCtr ;

  // register wmi_errorSticky
  assign wmi_errorSticky$D_IN = 1'd1 ;
  assign wmi_errorSticky$EN =
	     WILL_FIRE_RL_wmi_respAdvance && !wmi_respF$FULL_N ;

  // register wmi_isReset_isInReset
  assign wmi_isReset_isInReset$D_IN = 1'd0 ;
  assign wmi_isReset_isInReset$EN = wmi_isReset_isInReset ;

  // register wmi_mFlagF_c_r
  assign wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_wmi_mFlagF_incCtr ?
	       MUX_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_wmi_mFlagF_decCtr ;

  // register wmi_mFlagF_q_0
  always@(WILL_FIRE_RL_wmi_mFlagF_both or
	  MUX_wmi_mFlagF_q_0$write_1__VAL_1 or
	  MUX_wmi_mFlagF_q_0$write_1__SEL_2 or
	  value__h6580 or WILL_FIRE_RL_wmi_mFlagF_decCtr or wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_mFlagF_both:
	  wmi_mFlagF_q_0$D_IN = MUX_wmi_mFlagF_q_0$write_1__VAL_1;
      MUX_wmi_mFlagF_q_0$write_1__SEL_2: wmi_mFlagF_q_0$D_IN = value__h6580;
      WILL_FIRE_RL_wmi_mFlagF_decCtr: wmi_mFlagF_q_0$D_IN = wmi_mFlagF_q_1;
      default: wmi_mFlagF_q_0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_wmi_mFlagF_both ||
	     WILL_FIRE_RL_wmi_mFlagF_incCtr && wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wmi_mFlagF_decCtr ;

  // register wmi_mFlagF_q_1
  always@(WILL_FIRE_RL_wmi_mFlagF_both or
	  MUX_wmi_mFlagF_q_1$write_1__VAL_1 or
	  MUX_wmi_mFlagF_q_1$write_1__SEL_2 or
	  value__h6580 or WILL_FIRE_RL_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_mFlagF_both:
	  wmi_mFlagF_q_1$D_IN = MUX_wmi_mFlagF_q_1$write_1__VAL_1;
      MUX_wmi_mFlagF_q_1$write_1__SEL_2: wmi_mFlagF_q_1$D_IN = value__h6580;
      WILL_FIRE_RL_wmi_mFlagF_decCtr: wmi_mFlagF_q_1$D_IN = 32'd0;
      default: wmi_mFlagF_q_1$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_wmi_mFlagF_both ||
	     WILL_FIRE_RL_wmi_mFlagF_incCtr && wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wmi_mFlagF_decCtr ;

  // register wmi_operateD
  assign wmi_operateD$D_IN = wci_wslv_cState == 3'd2 ;
  assign wmi_operateD$EN = 1'd1 ;

  // register wmi_peerIsReady
  assign wmi_peerIsReady$D_IN = wmiM0_SReset_n ;
  assign wmi_peerIsReady$EN = 1'd1 ;

  // register wmi_reqF_c_r
  assign wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_wmi_reqF_incCtr ?
	       MUX_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_wmi_reqF_c_r$write_1__VAL_2 ;
  assign wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_wmi_reqF_incCtr || WILL_FIRE_RL_wmi_reqF_decCtr ;

  // register wmi_reqF_q_0
  always@(WILL_FIRE_RL_wmi_reqF_both or
	  MUX_wmi_reqF_q_0$write_1__VAL_1 or
	  MUX_wmi_reqF_q_0$write_1__SEL_2 or
	  MUX_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wmi_reqF_decCtr or wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_reqF_both:
	  wmi_reqF_q_0$D_IN = MUX_wmi_reqF_q_0$write_1__VAL_1;
      MUX_wmi_reqF_q_0$write_1__SEL_2:
	  wmi_reqF_q_0$D_IN = MUX_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmi_reqF_decCtr: wmi_reqF_q_0$D_IN = wmi_reqF_q_1;
      default: wmi_reqF_q_0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_wmi_reqF_both ||
	     WILL_FIRE_RL_wmi_reqF_incCtr && wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wmi_reqF_decCtr ;

  // register wmi_reqF_q_1
  always@(WILL_FIRE_RL_wmi_reqF_both or
	  MUX_wmi_reqF_q_1$write_1__VAL_1 or
	  MUX_wmi_reqF_q_1$write_1__SEL_2 or
	  MUX_wmi_reqF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wmi_reqF_both:
	  wmi_reqF_q_1$D_IN = MUX_wmi_reqF_q_1$write_1__VAL_1;
      MUX_wmi_reqF_q_1$write_1__SEL_2:
	  wmi_reqF_q_1$D_IN = MUX_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wmi_reqF_decCtr: wmi_reqF_q_1$D_IN = 32'd0;
      default: wmi_reqF_q_1$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_wmi_reqF_both ||
	     WILL_FIRE_RL_wmi_reqF_incCtr && wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wmi_reqF_decCtr ;

  // register wmi_sDataThreadBusy_d
  assign wmi_sDataThreadBusy_d$D_IN = wmiM0_SDataThreadBusy ;
  assign wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register wmi_sFlagReg
  assign wmi_sFlagReg$D_IN = wmiM0_SFlag ;
  assign wmi_sFlagReg$EN = 1'd1 ;

  // register wmi_sThreadBusy_d
  assign wmi_sThreadBusy_d$D_IN = wmiM0_SThreadBusy ;
  assign wmi_sThreadBusy_d$EN = 1'd1 ;

  // register wmi_statusR
  assign wmi_statusR$D_IN = 8'h0 ;
  assign wmi_statusR$EN = 1'b0 ;

  // register wmi_trafficSticky
  assign wmi_trafficSticky$D_IN = 1'b0 ;
  assign wmi_trafficSticky$EN = 1'b0 ;

  // register wmwtBeginCount
  assign wmwtBeginCount$D_IN = wmwtBeginCount + 32'd1 ;
  assign wmwtBeginCount$EN = WILL_FIRE_RL_wmwt_mesgBegin ;

  // register wmwtFinalCount
  assign wmwtFinalCount$D_IN = wmwtFinalCount + 32'd1 ;
  assign wmwtFinalCount$EN = WILL_FIRE_RL_wmwt_messageFinalize ;

  // register wmwtPushCount
  assign wmwtPushCount$D_IN = wmwtPushCount + 32'd1 ;
  assign wmwtPushCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_isReset_isInReset
  assign wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiM_isReset_isInReset$EN = wsiM_isReset_isInReset ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = wci_wslv_cState == 3'd2 ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsiM0_SReset_n ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_0$write_1__SEL_2:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsiM0_SThreadBusy ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset_isInReset,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__77_AND_wsiS_burstKind_92_ETC___d399 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_isReset_isInReset
  assign wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiS_isReset_isInReset$EN = wsiS_isReset_isInReset ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = wci_wslv_cState == 3'd2 ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS0_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     wsiS_reqFifo_r_enq$whas ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     wsiS_reqFifo_r_enq$whas != wsiS_reqFifo_r_deq$whas ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset_isInReset,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!wsiS_sThreadBusy_dw$whas || wsiS_sThreadBusy_dw$wget) ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = wsiS_reqFifo_r_enq$whas ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = wsiS_reqFifo_r_enq$whas ;

  // submodule mesgTokenF
  assign mesgTokenF$ENQ = WILL_FIRE_RL_wmwt_mesgBegin ;
  assign mesgTokenF$DEQ = WILL_FIRE_RL_wmwt_messageFinalize ;
  assign mesgTokenF$CLR = 1'b0 ;

  // submodule respF_memory
  assign respF_memory$ADDRA = respF_rWrPtr[10:0] ;
  assign respF_memory$ADDRB =
	     WILL_FIRE_RL_wmrd_mesgResptoWsi ?
	       x__h16466[10:0] :
	       respF_rRdPtr[10:0] ;
  assign respF_memory$DIA =
	     { IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d895,
	       respF_pwEnqueue$whas && respF_wDataIn$wget[57],
	       respF_pwEnqueue$whas && respF_wDataIn$wget[56],
	       IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d886 } ;
  assign respF_memory$DIB = 61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign respF_memory$WEA = respF_pwEnqueue$whas ;
  assign respF_memory$WEB = 1'd0 ;
  assign respF_memory$ENA = 1'd1 ;
  assign respF_memory$ENB = 1'd1 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // submodule wmi_respF
  assign wmi_respF$D_IN = wmi_wmiResponse$wget ;
  assign wmi_respF$ENQ = WILL_FIRE_RL_wmi_respAdvance && wmi_respF$FULL_N ;
  assign wmi_respF$DEQ = WILL_FIRE_RL_wmrd_mesgBodyResponse ;
  assign wmi_respF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = wsiS_reqFifo_r_enq$whas ;
  assign wsiS_reqFifo$DEQ = wsiS_reqFifo_r_deq$whas ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d886 =
	     respF_pwEnqueue$whas ? respF_wDataIn$wget[55:0] : 56'd0 ;
  assign IF_respF_wDataIn_whas__43_THEN_respF_wDataIn_w_ETC___d895 =
	     respF_pwEnqueue$whas ? respF_wDataIn$wget[60:58] : 3'd0 ;
  assign NOT_wmi_reqF_c_r_57_EQ_2_75_76_AND_wmi_operate_ETC___d534 =
	     wmi_reqF_c_r != 2'd2 && wmi_operateD && wmi_peerIsReady &&
	     (!x__h18468 || wmi_mFlagF_c_r != 2'd2) ;
  assign b__h15112 = -fabWordsCurReq[11:0] ;
  assign b__h17924 = x__h18044 + residue__h17787 ;
  assign b__h18297 = { {2{fabRespCredit_value[11]}}, fabRespCredit_value } ;
  assign mesgMetaF_length__h22506 =
	     (wsiS_reqFifo$D_OUT[57] && wsiS_reqFifo$D_OUT[11:8] == 4'd0 &&
	      mesgLengthSoFar == 14'd0) ?
	       24'd0 :
	       { 10'd0, mlB__h22339 } ;
  assign mesgMetaF_opcode__h22505 = opcode[8] ? opcode[7:0] : 8'd0 ;
  assign mlB__h22339 = MUX_mesgLengthSoFar$write_1__VAL_1 ;
  assign mlInc__h22338 =
	     wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h22545 + y__h22546 } :
	       14'd4 ;
  assign rdat__h23918 = hasDebugLogic ? mesgCount : 32'd0 ;
  assign rdat__h23924 = hasDebugLogic ? abortCount : 32'd0 ;
  assign rdat__h23930 = hasDebugLogic ? thisMesg : 32'd0 ;
  assign rdat__h23943 = hasDebugLogic ? lastMesg : 32'd0 ;
  assign rdat__h23966 = hasDebugLogic ? { 16'd0, x__h23970 } : 32'd0 ;
  assign rdat__h24066 = hasDebugLogic ? wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h24080 = hasDebugLogic ? wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h24088 = hasDebugLogic ? wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h24094 = hasDebugLogic ? wsiM_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h24108 = hasDebugLogic ? wsiM_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h24116 = hasDebugLogic ? wsiM_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h24122 = hasDebugLogic ? wmwtBeginCount : 32'd0 ;
  assign rdat__h24128 = hasDebugLogic ? wmwtPushCount : 32'd0 ;
  assign rdat__h24134 = hasDebugLogic ? wmwtFinalCount : 32'd0 ;
  assign rdat__h24140 = hasDebugLogic ? 32'hFEEDC0DE : 32'd0 ;
  assign residue__h17787 =
	     ({ 4'd0, wmi_sFlagReg[1:0] } == 6'd0) ? 24'd0 : 24'd1 ;
  assign sendData_burstLength__h18754 =
	     (thisMesg[15:0] == 16'd0 || smaCtrl[5] && unrollCnt == 16'd1) ?
	       12'd1 :
	       (smaCtrl[5] ? 12'd4095 : wsiBurstLength__h18672[11:0]) ;
  assign sendData_byteEn__h18756 =
	     (thisMesg[15:0] == 16'd0) ?
	       4'd0 :
	       ((unrollCnt == 16'd1) ? x__h18813[3:0] : 4'd15) ;
  assign value__h6580 =
	     MUX_wmi_mFlagF_x_wire$wset_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       MUX_wmi_mFlagF_x_wire$wset_1__VAL_2 ;
  assign wmi_respF_i_notEmpty__46_AND_smaCtrl_75_BIT_4__ETC___d551 =
	     wmi_respF$EMPTY_N &&
	     (smaCtrl[4] || respF_rRdPtr + 12'd1024 != respF_rWrPtr) ;
  assign wsiBurstLength__h18672 =
	     smaCtrl[5] ? 16'd2 : { 2'd0, thisMesg[15:2] } ;
  assign wsiS_reqFifo_i_notEmpty__74_AND_NOT_smaCtrl_75_ETC___d679 =
	     wsiS_reqFifo$EMPTY_N &&
	     (smaCtrl[3:0] != 4'h3 || wsiM_reqFifo_c_r != 2'd2) &&
	     (!wsiS_reqFifo$D_OUT[57] || wmi_mFlagF_c_r != 2'd2) ;
  assign wsiS_reqFifo_notFull__77_AND_wsiS_burstKind_92_ETC___d399 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;
  assign x__h16466 = respF_rRdPtr + 12'd1 ;
  assign x__h18044 = { 2'd0, wmi_sFlagReg[23:2] } ;
  assign x__h18468 = fabWordsRemain == fabWordsCurReq ;
  assign x__h18813 =
	     ({ 4'd0, thisMesg[1:0] } == 6'd0) ?
	       32'hFFFFFFFF :
	       (({ 4'd0, thisMesg[1:0] } <= 6'd1) ?
		  32'd1 :
		  (({ 4'd0, thisMesg[1:0] } <= 6'd2) ?
		     32'd3 :
		     (({ 4'd0, thisMesg[1:0] } <= 6'd3) ?
			32'd7 :
			(({ 4'd0, thisMesg[1:0] } <= 6'd4) ?
			   32'd15 :
			   (({ 4'd0, thisMesg[1:0] } <= 6'd5) ?
			      32'd31 :
			      (({ 4'd0, thisMesg[1:0] } <= 6'd6) ?
				 32'd63 :
				 (({ 4'd0, thisMesg[1:0] } <= 6'd7) ?
				    32'd127 :
				    (({ 4'd0, thisMesg[1:0] } <= 6'd8) ?
				       32'd255 :
				       (({ 4'd0, thisMesg[1:0] } <= 6'd9) ?
					  32'd511 :
					  (({ 4'd0, thisMesg[1:0] } <=
					    6'd10) ?
					     32'd1023 :
					     (({ 4'd0, thisMesg[1:0] } <=
					       6'd11) ?
						32'd2047 :
						(({ 4'd0, thisMesg[1:0] } <=
						  6'd12) ?
						   32'd4095 :
						   (({ 4'd0,
						       thisMesg[1:0] } <=
						     6'd13) ?
						      32'd8191 :
						      (({ 4'd0,
							  thisMesg[1:0] } <=
							6'd14) ?
							 32'd16383 :
							 (({ 4'd0,
							     thisMesg[1:0] } <=
							   6'd15) ?
							    32'd32767 :
							    (({ 4'd0,
								thisMesg[1:0] } <=
							      6'd16) ?
							       32'd65535 :
							       (({ 4'd0,
								   thisMesg[1:0] } <=
								 6'd17) ?
								  32'd131071 :
								  (({ 4'd0,
								      thisMesg[1:0] } <=
								    6'd18) ?
								     32'd262143 :
								     (({ 4'd0,
									 thisMesg[1:0] } <=
								       6'd19) ?
									32'd524287 :
									(({ 4'd0,
									    thisMesg[1:0] } <=
									  6'd20) ?
									   32'd1048575 :
									   (({ 4'd0,
									       thisMesg[1:0] } <=
									     6'd21) ?
									      32'd2097151 :
									      (({ 4'd0,
										  thisMesg[1:0] } <=
										6'd22) ?
										 32'd4194303 :
										 (({ 4'd0,
										     thisMesg[1:0] } <=
										   6'd23) ?
										    32'd8388607 :
										    (({ 4'd0,
											thisMesg[1:0] } <=
										      6'd24) ?
										       32'd16777215 :
										       (({ 4'd0,
											   thisMesg[1:0] } <=
											 6'd25) ?
											  32'd33554431 :
											  (({ 4'd0,
											      thisMesg[1:0] } <=
											    6'd26) ?
											     32'd67108863 :
											     (({ 4'd0,
												 thisMesg[1:0] } <=
											       6'd27) ?
												32'd134217727 :
												(({ 4'd0,
												    thisMesg[1:0] } <=
												  6'd28) ?
												   32'd268435455 :
												   (({ 4'd0,
												       thisMesg[1:0] } <=
												     6'd29) ?
												      32'd536870911 :
												      (({ 4'd0,
													  thisMesg[1:0] } <=
													6'd30) ?
													 32'd1073741823 :
													 (({ 4'd0,
													     thisMesg[1:0] } <=
													   6'd31) ?
													    32'h7FFFFFFF :
													    32'hFFFFFFFF))))))))))))))))))))))))))))))) ;
  assign x__h22545 = x__h22557 + y__h22558 ;
  assign x__h22557 = x__h22569 + y__h22570 ;
  assign x__h22569 = { 2'd0, wsiS_reqFifo$D_OUT[11] } ;
  assign x__h23970 = { wsiS_statusR, wsiM_statusR } ;
  assign x_length__h22906 = { 2'd0, mlB__h22339 } ;
  assign y__h22546 = { 2'd0, wsiS_reqFifo$D_OUT[8] } ;
  assign y__h22558 = { 2'd0, wsiS_reqFifo$D_OUT[9] } ;
  assign y__h22570 = { 2'd0, wsiS_reqFifo$D_OUT[10] } ;
  always@(wci_wslv_reqF$D_OUT or
	  smaCtrl or
	  rdat__h23918 or
	  rdat__h23924 or
	  rdat__h23930 or
	  rdat__h23943 or
	  rdat__h23966 or
	  rdat__h24066 or
	  rdat__h24080 or
	  rdat__h24088 or
	  rdat__h24094 or
	  rdat__h24108 or
	  rdat__h24116 or
	  rdat__h24122 or rdat__h24128 or rdat__h24134 or rdat__h24140)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0: g_data__h23875 = smaCtrl;
      8'h04: g_data__h23875 = rdat__h23918;
      8'h08: g_data__h23875 = rdat__h23924;
      8'h10: g_data__h23875 = rdat__h23930;
      8'h14: g_data__h23875 = rdat__h23943;
      8'h18: g_data__h23875 = rdat__h23966;
      8'h20: g_data__h23875 = rdat__h24066;
      8'h24: g_data__h23875 = rdat__h24080;
      8'h28: g_data__h23875 = rdat__h24088;
      8'h2C: g_data__h23875 = rdat__h24094;
      8'h30: g_data__h23875 = rdat__h24108;
      8'h34: g_data__h23875 = rdat__h24116;
      8'h38: g_data__h23875 = rdat__h24122;
      8'h3C: g_data__h23875 = rdat__h24128;
      8'h40: g_data__h23875 = rdat__h24134;
      8'h44: g_data__h23875 = rdat__h24140;
      default: g_data__h23875 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	respF_rCache <= `BSV_ASSIGNMENT_DELAY 74'h0AAAAAAAAAAAAAAAAAA;
	respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	smaCtrl <= `BSV_ASSIGNMENT_DELAY smaCtrlInit;
	thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'd0;
	wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'd0;
	wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wmwtBeginCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmwtFinalCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wmwtPushCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (abortCount$EN)
	  abortCount <= `BSV_ASSIGNMENT_DELAY abortCount$D_IN;
	if (doAbort$EN) doAbort <= `BSV_ASSIGNMENT_DELAY doAbort$D_IN;
	if (endOfMessage$EN)
	  endOfMessage <= `BSV_ASSIGNMENT_DELAY endOfMessage$D_IN;
	if (errCount$EN) errCount <= `BSV_ASSIGNMENT_DELAY errCount$D_IN;
	if (fabRespCredit_value$EN)
	  fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      fabRespCredit_value$D_IN;
	if (fabWordsRemain$EN)
	  fabWordsRemain <= `BSV_ASSIGNMENT_DELAY fabWordsRemain$D_IN;
	if (firstMsgReq$EN)
	  firstMsgReq <= `BSV_ASSIGNMENT_DELAY firstMsgReq$D_IN;
	if (lastMesg$EN) lastMesg <= `BSV_ASSIGNMENT_DELAY lastMesg$D_IN;
	if (mesgCount$EN) mesgCount <= `BSV_ASSIGNMENT_DELAY mesgCount$D_IN;
	if (mesgLengthSoFar$EN)
	  mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY mesgLengthSoFar$D_IN;
	if (mesgPreRequest$EN)
	  mesgPreRequest <= `BSV_ASSIGNMENT_DELAY mesgPreRequest$D_IN;
	if (mesgReqOK$EN) mesgReqOK <= `BSV_ASSIGNMENT_DELAY mesgReqOK$D_IN;
	if (opcode$EN) opcode <= `BSV_ASSIGNMENT_DELAY opcode$D_IN;
	if (readyToPush$EN)
	  readyToPush <= `BSV_ASSIGNMENT_DELAY readyToPush$D_IN;
	if (readyToRequest$EN)
	  readyToRequest <= `BSV_ASSIGNMENT_DELAY readyToRequest$D_IN;
	if (respF_rCache$EN)
	  respF_rCache <= `BSV_ASSIGNMENT_DELAY respF_rCache$D_IN;
	if (respF_rRdPtr$EN)
	  respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY respF_rRdPtr$D_IN;
	if (respF_rWrPtr$EN)
	  respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY respF_rWrPtr$D_IN;
	if (smaCtrl$EN) smaCtrl <= `BSV_ASSIGNMENT_DELAY smaCtrl$D_IN;
	if (thisMesg$EN) thisMesg <= `BSV_ASSIGNMENT_DELAY thisMesg$D_IN;
	if (unrollCnt$EN) unrollCnt <= `BSV_ASSIGNMENT_DELAY unrollCnt$D_IN;
	if (valExpect$EN) valExpect <= `BSV_ASSIGNMENT_DELAY valExpect$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wmi_busyWithMessage$EN)
	  wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      wmi_busyWithMessage$D_IN;
	if (wmi_dhF_c_r$EN)
	  wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY wmi_dhF_c_r$D_IN;
	if (wmi_dhF_q_0$EN)
	  wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY wmi_dhF_q_0$D_IN;
	if (wmi_dhF_q_1$EN)
	  wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY wmi_dhF_q_1$D_IN;
	if (wmi_errorSticky$EN)
	  wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY wmi_errorSticky$D_IN;
	if (wmi_mFlagF_c_r$EN)
	  wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY wmi_mFlagF_c_r$D_IN;
	if (wmi_mFlagF_q_0$EN)
	  wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY wmi_mFlagF_q_0$D_IN;
	if (wmi_mFlagF_q_1$EN)
	  wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY wmi_mFlagF_q_1$D_IN;
	if (wmi_operateD$EN)
	  wmi_operateD <= `BSV_ASSIGNMENT_DELAY wmi_operateD$D_IN;
	if (wmi_peerIsReady$EN)
	  wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY wmi_peerIsReady$D_IN;
	if (wmi_reqF_c_r$EN)
	  wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY wmi_reqF_c_r$D_IN;
	if (wmi_reqF_q_0$EN)
	  wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wmi_reqF_q_0$D_IN;
	if (wmi_reqF_q_1$EN)
	  wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY wmi_reqF_q_1$D_IN;
	if (wmi_sDataThreadBusy_d$EN)
	  wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wmi_sDataThreadBusy_d$D_IN;
	if (wmi_sFlagReg$EN)
	  wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY wmi_sFlagReg$D_IN;
	if (wmi_sThreadBusy_d$EN)
	  wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wmi_sThreadBusy_d$D_IN;
	if (wmi_trafficSticky$EN)
	  wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY wmi_trafficSticky$D_IN;
	if (wmwtBeginCount$EN)
	  wmwtBeginCount <= `BSV_ASSIGNMENT_DELAY wmwtBeginCount$D_IN;
	if (wmwtFinalCount$EN)
	  wmwtFinalCount <= `BSV_ASSIGNMENT_DELAY wmwtFinalCount$D_IN;
	if (wmwtPushCount$EN)
	  wmwtPushCount <= `BSV_ASSIGNMENT_DELAY wmwtPushCount$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (fabWordsCurReq$EN)
      fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY fabWordsCurReq$D_IN;
    if (mesgReqAddr$EN) mesgReqAddr <= `BSV_ASSIGNMENT_DELAY mesgReqAddr$D_IN;
    if (wmi_statusR$EN) wmi_statusR <= `BSV_ASSIGNMENT_DELAY wmi_statusR$D_IN;
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wmi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
      if (wmi_isReset_isInReset$EN)
	wmi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wmi_isReset_isInReset$D_IN;
      if (wsiM_isReset_isInReset$EN)
	wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiM_isReset_isInReset$D_IN;
      if (wsiS_isReset_isInReset$EN)
	wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    abortCount = 32'hAAAAAAAA;
    doAbort = 1'h0;
    endOfMessage = 1'h0;
    errCount = 32'hAAAAAAAA;
    fabRespCredit_value = 12'hAAA;
    fabWordsCurReq = 14'h2AAA;
    fabWordsRemain = 14'h2AAA;
    firstMsgReq = 1'h0;
    lastMesg = 32'hAAAAAAAA;
    mesgCount = 32'hAAAAAAAA;
    mesgLengthSoFar = 14'h2AAA;
    mesgPreRequest = 1'h0;
    mesgReqAddr = 14'h2AAA;
    mesgReqOK = 1'h0;
    opcode = 9'h0AA;
    readyToPush = 1'h0;
    readyToRequest = 1'h0;
    respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    respF_rRdPtr = 12'hAAA;
    respF_rWrPtr = 12'hAAA;
    smaCtrl = 32'hAAAAAAAA;
    thisMesg = 32'hAAAAAAAA;
    unrollCnt = 16'hAAAA;
    valExpect = 32'hAAAAAAAA;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wmi_busyWithMessage = 1'h0;
    wmi_dhF_c_r = 2'h2;
    wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    wmi_errorSticky = 1'h0;
    wmi_isReset_isInReset = 1'h0;
    wmi_mFlagF_c_r = 2'h2;
    wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    wmi_operateD = 1'h0;
    wmi_peerIsReady = 1'h0;
    wmi_reqF_c_r = 2'h2;
    wmi_reqF_q_0 = 32'hAAAAAAAA;
    wmi_reqF_q_1 = 32'hAAAAAAAA;
    wmi_sDataThreadBusy_d = 1'h0;
    wmi_sFlagReg = 32'hAAAAAAAA;
    wmi_sThreadBusy_d = 1'h0;
    wmi_statusR = 8'hAA;
    wmi_trafficSticky = 1'h0;
    wmwtBeginCount = 32'hAAAAAAAA;
    wmwtFinalCount = 32'hAAAAAAAA;
    wmwtPushCount = 32'hAAAAAAAA;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_isReset_isInReset = 1'h0;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_isReset_isInReset = 1'h0;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmrd_mesgBegin)
	begin
	  v__h18213 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h18213,
		 mesgCount,
		 wmi_sFlagReg[23:0],
		 wmi_sFlagReg[31:24]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_mesgBegin && wsiS_reqFifo$D_OUT[56])
	begin
	  v__h21925 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_mesgBegin && wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h21925,
		 mesgCount,
		 wsiS_reqFifo$D_OUT[55:44],
		 wsiS_reqFifo$D_OUT[7:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_mesgBegin && !wsiS_reqFifo$D_OUT[56])
	begin
	  v__h21984 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_mesgBegin && !wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h21984,
		 mesgCount);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_messageFinalize)
	begin
	  v__h23509 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h23509,
		 mesgCount,
		 thisMesg[15:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3651 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3651,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	begin
	  v__h24352 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h24352,
		 smaCtrl);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_doAbort)
	begin
	  v__h23326 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h23326);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h23705 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: SMAdapter WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h23705,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 wci_wslv_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3969 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3969,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3825 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3825,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkSMAdapter4B

