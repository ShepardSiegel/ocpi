//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Wed Nov 10 10:02:54 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1
// server_response_get            O   153
// RDY_server_response_get        O     1
// led                            O     2 reg
// wci_m_0_MCmd                   O     3
// wci_m_0_MAddrSpace             O     1
// wci_m_0_MByteEn                O     4
// wci_m_0_MAddr                  O    20
// wci_m_0_MData                  O    32 reg
// wci_m_0_MFlag                  O     2 reg
// wci_m_1_MCmd                   O     3
// wci_m_1_MAddrSpace             O     1
// wci_m_1_MByteEn                O     4
// wci_m_1_MAddr                  O    20
// wci_m_1_MData                  O    32 reg
// wci_m_1_MFlag                  O     2 reg
// wci_m_2_MCmd                   O     3
// wci_m_2_MAddrSpace             O     1
// wci_m_2_MByteEn                O     4
// wci_m_2_MAddr                  O    20
// wci_m_2_MData                  O    32 reg
// wci_m_2_MFlag                  O     2 reg
// wci_m_3_MCmd                   O     3
// wci_m_3_MAddrSpace             O     1
// wci_m_3_MByteEn                O     4
// wci_m_3_MAddr                  O    20
// wci_m_3_MData                  O    32 reg
// wci_m_3_MFlag                  O     2 reg
// wci_m_4_MCmd                   O     3
// wci_m_4_MAddrSpace             O     1
// wci_m_4_MByteEn                O     4
// wci_m_4_MAddr                  O    20
// wci_m_4_MData                  O    32 reg
// wci_m_4_MFlag                  O     2 reg
// cpNow                          O    64 reg
// RDY_cpNow                      O     1 const
// wsi_s_adc_SThreadBusy          O     1 const
// wsi_s_adc_SReset_n             O     1 const
// wsi_m_dac_MCmd                 O     3 const
// wsi_m_dac_MReqLast             O     1 const
// wsi_m_dac_MBurstPrecise        O     1 const
// wsi_m_dac_MBurstLength         O    12 const
// wsi_m_dac_MData                O    32 const
// wsi_m_dac_MByteEn              O     4 const
// wsi_m_dac_MReqInfo             O     8 const
// wsi_m_dac_MReset_n             O     1 const
// wmemiM_MCmd                    O     3 reg
// wmemiM_MReqLast                O     1 reg
// wmemiM_MAddr                   O    36 reg
// wmemiM_MBurstLength            O    12 reg
// wmemiM_MDataValid              O     1 reg
// wmemiM_MDataLast               O     1 reg
// wmemiM_MData                   O   128 reg
// wmemiM_MDataByteEn             O    16 reg
// wmemiM_MReset_n                O     1
// gps_ppsSyncOut                 O     1
// RST_N_wci_m_0                  O     1 reset
// RST_N_wci_m_1                  O     1 reset
// RST_N_wci_m_2                  O     1 reset
// RST_N_wci_m_3                  O     1 reset
// RST_N_wci_m_4                  O     1 reset
// pciDevice                      I    16
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rst                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I   153
// switch_x                       I     3 reg
// wci_m_0_SResp                  I     2
// wci_m_0_SData                  I    32
// wci_m_0_SFlag                  I     2 reg
// wci_m_1_SResp                  I     2
// wci_m_1_SData                  I    32
// wci_m_1_SFlag                  I     2 reg
// wci_m_2_SResp                  I     2
// wci_m_2_SData                  I    32
// wci_m_2_SFlag                  I     2 reg
// wci_m_3_SResp                  I     2
// wci_m_3_SData                  I    32
// wci_m_3_SFlag                  I     2 reg
// wci_m_4_SResp                  I     2
// wci_m_4_SData                  I    32
// wci_m_4_SFlag                  I     2 reg
// wsi_s_adc_MCmd                 I     3 unused
// wsi_s_adc_MBurstLength         I    12 unused
// wsi_s_adc_MData                I    32 unused
// wsi_s_adc_MByteEn              I     4 unused
// wsi_s_adc_MReqInfo             I     8 unused
// wmemiM_SResp                   I     2
// wmemiM_SData                   I   128
// gps_ppsSyncIn_x                I     1 reg
// EN_server_request_put          I     1
// wci_m_0_SThreadBusy            I     1 reg
// wci_m_1_SThreadBusy            I     1 reg
// wci_m_2_SThreadBusy            I     1 reg
// wci_m_3_SThreadBusy            I     1 reg
// wci_m_4_SThreadBusy            I     1 reg
// wsi_s_adc_MReqLast             I     1 unused
// wsi_s_adc_MBurstPrecise        I     1 unused
// wsi_s_adc_MReset_n             I     1 unused
// wsi_m_dac_SThreadBusy          I     1 unused
// wsi_m_dac_SReset_n             I     1 unused
// wmemiM_SRespLast               I     1
// wmemiM_SCmdAccept              I     1
// wmemiM_SDataAccept             I     1
// EN_server_response_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkCTop4B(pciDevice,
		CLK_sys0_clk,
		RST_N_sys0_rst,
		CLK,
		RST_N,

		server_request_put,
		EN_server_request_put,
		RDY_server_request_put,

		EN_server_response_get,
		server_response_get,
		RDY_server_response_get,

		led,

		switch_x,

		wci_m_0_MCmd,

		wci_m_0_MAddrSpace,

		wci_m_0_MByteEn,

		wci_m_0_MAddr,

		wci_m_0_MData,

		wci_m_0_SResp,

		wci_m_0_SData,

		wci_m_0_SThreadBusy,

		wci_m_0_SFlag,

		wci_m_0_MFlag,

		wci_m_1_MCmd,

		wci_m_1_MAddrSpace,

		wci_m_1_MByteEn,

		wci_m_1_MAddr,

		wci_m_1_MData,

		wci_m_1_SResp,

		wci_m_1_SData,

		wci_m_1_SThreadBusy,

		wci_m_1_SFlag,

		wci_m_1_MFlag,

		wci_m_2_MCmd,

		wci_m_2_MAddrSpace,

		wci_m_2_MByteEn,

		wci_m_2_MAddr,

		wci_m_2_MData,

		wci_m_2_SResp,

		wci_m_2_SData,

		wci_m_2_SThreadBusy,

		wci_m_2_SFlag,

		wci_m_2_MFlag,

		wci_m_3_MCmd,

		wci_m_3_MAddrSpace,

		wci_m_3_MByteEn,

		wci_m_3_MAddr,

		wci_m_3_MData,

		wci_m_3_SResp,

		wci_m_3_SData,

		wci_m_3_SThreadBusy,

		wci_m_3_SFlag,

		wci_m_3_MFlag,

		wci_m_4_MCmd,

		wci_m_4_MAddrSpace,

		wci_m_4_MByteEn,

		wci_m_4_MAddr,

		wci_m_4_MData,

		wci_m_4_SResp,

		wci_m_4_SData,

		wci_m_4_SThreadBusy,

		wci_m_4_SFlag,

		wci_m_4_MFlag,

		cpNow,
		RDY_cpNow,

		wsi_s_adc_MCmd,

		wsi_s_adc_MReqLast,

		wsi_s_adc_MBurstPrecise,

		wsi_s_adc_MBurstLength,

		wsi_s_adc_MData,

		wsi_s_adc_MByteEn,

		wsi_s_adc_MReqInfo,

		wsi_s_adc_SThreadBusy,

		wsi_s_adc_SReset_n,

		wsi_s_adc_MReset_n,

		wsi_m_dac_MCmd,

		wsi_m_dac_MReqLast,

		wsi_m_dac_MBurstPrecise,

		wsi_m_dac_MBurstLength,

		wsi_m_dac_MData,

		wsi_m_dac_MByteEn,

		wsi_m_dac_MReqInfo,

		wsi_m_dac_SThreadBusy,

		wsi_m_dac_MReset_n,

		wsi_m_dac_SReset_n,

		wmemiM_MCmd,

		wmemiM_MReqLast,

		wmemiM_MAddr,

		wmemiM_MBurstLength,

		wmemiM_MDataValid,

		wmemiM_MDataLast,

		wmemiM_MData,

		wmemiM_MDataByteEn,

		wmemiM_SResp,

		wmemiM_SRespLast,

		wmemiM_SData,

		wmemiM_SCmdAccept,

		wmemiM_SDataAccept,

		wmemiM_MReset_n,

		gps_ppsSyncIn_x,

		gps_ppsSyncOut,

		RST_N_wci_m_0,
		RST_N_wci_m_1,
		RST_N_wci_m_2,
		RST_N_wci_m_3,
		RST_N_wci_m_4);
  input  [15 : 0] pciDevice;
  input  CLK_sys0_clk;
  input  RST_N_sys0_rst;
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [152 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [152 : 0] server_response_get;
  output RDY_server_response_get;

  // value method led
  output [1 : 0] led;

  // action method switch
  input  [2 : 0] switch_x;

  // value method wci_m_0_mCmd
  output [2 : 0] wci_m_0_MCmd;

  // value method wci_m_0_mAddrSpace
  output wci_m_0_MAddrSpace;

  // value method wci_m_0_mByteEn
  output [3 : 0] wci_m_0_MByteEn;

  // value method wci_m_0_mAddr
  output [19 : 0] wci_m_0_MAddr;

  // value method wci_m_0_mData
  output [31 : 0] wci_m_0_MData;

  // action method wci_m_0_sResp
  input  [1 : 0] wci_m_0_SResp;

  // action method wci_m_0_sData
  input  [31 : 0] wci_m_0_SData;

  // action method wci_m_0_sThreadBusy
  input  wci_m_0_SThreadBusy;

  // action method wci_m_0_sFlag
  input  [1 : 0] wci_m_0_SFlag;

  // value method wci_m_0_mFlag
  output [1 : 0] wci_m_0_MFlag;

  // value method wci_m_1_mCmd
  output [2 : 0] wci_m_1_MCmd;

  // value method wci_m_1_mAddrSpace
  output wci_m_1_MAddrSpace;

  // value method wci_m_1_mByteEn
  output [3 : 0] wci_m_1_MByteEn;

  // value method wci_m_1_mAddr
  output [19 : 0] wci_m_1_MAddr;

  // value method wci_m_1_mData
  output [31 : 0] wci_m_1_MData;

  // action method wci_m_1_sResp
  input  [1 : 0] wci_m_1_SResp;

  // action method wci_m_1_sData
  input  [31 : 0] wci_m_1_SData;

  // action method wci_m_1_sThreadBusy
  input  wci_m_1_SThreadBusy;

  // action method wci_m_1_sFlag
  input  [1 : 0] wci_m_1_SFlag;

  // value method wci_m_1_mFlag
  output [1 : 0] wci_m_1_MFlag;

  // value method wci_m_2_mCmd
  output [2 : 0] wci_m_2_MCmd;

  // value method wci_m_2_mAddrSpace
  output wci_m_2_MAddrSpace;

  // value method wci_m_2_mByteEn
  output [3 : 0] wci_m_2_MByteEn;

  // value method wci_m_2_mAddr
  output [19 : 0] wci_m_2_MAddr;

  // value method wci_m_2_mData
  output [31 : 0] wci_m_2_MData;

  // action method wci_m_2_sResp
  input  [1 : 0] wci_m_2_SResp;

  // action method wci_m_2_sData
  input  [31 : 0] wci_m_2_SData;

  // action method wci_m_2_sThreadBusy
  input  wci_m_2_SThreadBusy;

  // action method wci_m_2_sFlag
  input  [1 : 0] wci_m_2_SFlag;

  // value method wci_m_2_mFlag
  output [1 : 0] wci_m_2_MFlag;

  // value method wci_m_3_mCmd
  output [2 : 0] wci_m_3_MCmd;

  // value method wci_m_3_mAddrSpace
  output wci_m_3_MAddrSpace;

  // value method wci_m_3_mByteEn
  output [3 : 0] wci_m_3_MByteEn;

  // value method wci_m_3_mAddr
  output [19 : 0] wci_m_3_MAddr;

  // value method wci_m_3_mData
  output [31 : 0] wci_m_3_MData;

  // action method wci_m_3_sResp
  input  [1 : 0] wci_m_3_SResp;

  // action method wci_m_3_sData
  input  [31 : 0] wci_m_3_SData;

  // action method wci_m_3_sThreadBusy
  input  wci_m_3_SThreadBusy;

  // action method wci_m_3_sFlag
  input  [1 : 0] wci_m_3_SFlag;

  // value method wci_m_3_mFlag
  output [1 : 0] wci_m_3_MFlag;

  // value method wci_m_4_mCmd
  output [2 : 0] wci_m_4_MCmd;

  // value method wci_m_4_mAddrSpace
  output wci_m_4_MAddrSpace;

  // value method wci_m_4_mByteEn
  output [3 : 0] wci_m_4_MByteEn;

  // value method wci_m_4_mAddr
  output [19 : 0] wci_m_4_MAddr;

  // value method wci_m_4_mData
  output [31 : 0] wci_m_4_MData;

  // action method wci_m_4_sResp
  input  [1 : 0] wci_m_4_SResp;

  // action method wci_m_4_sData
  input  [31 : 0] wci_m_4_SData;

  // action method wci_m_4_sThreadBusy
  input  wci_m_4_SThreadBusy;

  // action method wci_m_4_sFlag
  input  [1 : 0] wci_m_4_SFlag;

  // value method wci_m_4_mFlag
  output [1 : 0] wci_m_4_MFlag;

  // value method cpNow
  output [63 : 0] cpNow;
  output RDY_cpNow;

  // action method wsi_s_adc_mCmd
  input  [2 : 0] wsi_s_adc_MCmd;

  // action method wsi_s_adc_mReqLast
  input  wsi_s_adc_MReqLast;

  // action method wsi_s_adc_mBurstPrecise
  input  wsi_s_adc_MBurstPrecise;

  // action method wsi_s_adc_mBurstLength
  input  [11 : 0] wsi_s_adc_MBurstLength;

  // action method wsi_s_adc_mData
  input  [31 : 0] wsi_s_adc_MData;

  // action method wsi_s_adc_mByteEn
  input  [3 : 0] wsi_s_adc_MByteEn;

  // action method wsi_s_adc_mReqInfo
  input  [7 : 0] wsi_s_adc_MReqInfo;

  // action method wsi_s_adc_mDataInfo

  // value method wsi_s_adc_sThreadBusy
  output wsi_s_adc_SThreadBusy;

  // value method wsi_s_adc_sReset_n
  output wsi_s_adc_SReset_n;

  // action method wsi_s_adc_mReset_n
  input  wsi_s_adc_MReset_n;

  // value method wsi_m_dac_mCmd
  output [2 : 0] wsi_m_dac_MCmd;

  // value method wsi_m_dac_mReqLast
  output wsi_m_dac_MReqLast;

  // value method wsi_m_dac_mBurstPrecise
  output wsi_m_dac_MBurstPrecise;

  // value method wsi_m_dac_mBurstLength
  output [11 : 0] wsi_m_dac_MBurstLength;

  // value method wsi_m_dac_mData
  output [31 : 0] wsi_m_dac_MData;

  // value method wsi_m_dac_mByteEn
  output [3 : 0] wsi_m_dac_MByteEn;

  // value method wsi_m_dac_mReqInfo
  output [7 : 0] wsi_m_dac_MReqInfo;

  // value method wsi_m_dac_mDataInfo

  // action method wsi_m_dac_sThreadBusy
  input  wsi_m_dac_SThreadBusy;

  // value method wsi_m_dac_mReset_n
  output wsi_m_dac_MReset_n;

  // action method wsi_m_dac_sReset_n
  input  wsi_m_dac_SReset_n;

  // value method wmemiM_mCmd
  output [2 : 0] wmemiM_MCmd;

  // value method wmemiM_mReqLast
  output wmemiM_MReqLast;

  // value method wmemiM_mAddr
  output [35 : 0] wmemiM_MAddr;

  // value method wmemiM_mBurstLength
  output [11 : 0] wmemiM_MBurstLength;

  // value method wmemiM_mDataValid
  output wmemiM_MDataValid;

  // value method wmemiM_mDataLast
  output wmemiM_MDataLast;

  // value method wmemiM_mData
  output [127 : 0] wmemiM_MData;

  // value method wmemiM_mDataByteEn
  output [15 : 0] wmemiM_MDataByteEn;

  // action method wmemiM_sResp
  input  [1 : 0] wmemiM_SResp;

  // action method wmemiM_sRespLast
  input  wmemiM_SRespLast;

  // action method wmemiM_sData
  input  [127 : 0] wmemiM_SData;

  // action method wmemiM_sCmdAccept
  input  wmemiM_SCmdAccept;

  // action method wmemiM_sDataAccept
  input  wmemiM_SDataAccept;

  // value method wmemiM_mReset_n
  output wmemiM_MReset_n;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // output resets
  output RST_N_wci_m_0;
  output RST_N_wci_m_1;
  output RST_N_wci_m_2;
  output RST_N_wci_m_3;
  output RST_N_wci_m_4;

  // signals for module outputs
  wire [152 : 0] server_response_get;
  wire [127 : 0] wmemiM_MData;
  wire [63 : 0] cpNow;
  wire [35 : 0] wmemiM_MAddr;
  wire [31 : 0] wci_m_0_MData,
		wci_m_1_MData,
		wci_m_2_MData,
		wci_m_3_MData,
		wci_m_4_MData,
		wsi_m_dac_MData;
  wire [19 : 0] wci_m_0_MAddr,
		wci_m_1_MAddr,
		wci_m_2_MAddr,
		wci_m_3_MAddr,
		wci_m_4_MAddr;
  wire [15 : 0] wmemiM_MDataByteEn;
  wire [11 : 0] wmemiM_MBurstLength, wsi_m_dac_MBurstLength;
  wire [7 : 0] wsi_m_dac_MReqInfo;
  wire [3 : 0] wci_m_0_MByteEn,
	       wci_m_1_MByteEn,
	       wci_m_2_MByteEn,
	       wci_m_3_MByteEn,
	       wci_m_4_MByteEn,
	       wsi_m_dac_MByteEn;
  wire [2 : 0] wci_m_0_MCmd,
	       wci_m_1_MCmd,
	       wci_m_2_MCmd,
	       wci_m_3_MCmd,
	       wci_m_4_MCmd,
	       wmemiM_MCmd,
	       wsi_m_dac_MCmd;
  wire [1 : 0] led,
	       wci_m_0_MFlag,
	       wci_m_1_MFlag,
	       wci_m_2_MFlag,
	       wci_m_3_MFlag,
	       wci_m_4_MFlag;
  wire RDY_cpNow,
       RDY_server_request_put,
       RDY_server_response_get,
       RST_N_wci_m_0,
       RST_N_wci_m_1,
       RST_N_wci_m_2,
       RST_N_wci_m_3,
       RST_N_wci_m_4,
       gps_ppsSyncOut,
       wci_m_0_MAddrSpace,
       wci_m_1_MAddrSpace,
       wci_m_2_MAddrSpace,
       wci_m_3_MAddrSpace,
       wci_m_4_MAddrSpace,
       wmemiM_MDataLast,
       wmemiM_MDataValid,
       wmemiM_MReqLast,
       wmemiM_MReset_n,
       wsi_m_dac_MBurstPrecise,
       wsi_m_dac_MReqLast,
       wsi_m_dac_MReset_n,
       wsi_s_adc_SReset_n,
       wsi_s_adc_SThreadBusy;

  // inlined wires
  wire [145 : 0] app_appW3_wmemi_dhF_x_wire$wget;
  wire [130 : 0] app_appW3_wmemi_wmemiResponse$wget;
  wire [127 : 0] app_appW3_wmemi_Em_sData_w$wget;
  wire [95 : 0] app_appW2_wsiM_extStatusW$wget,
		app_appW2_wsiS_extStatusW$wget,
		app_appW3_wsiM_extStatusW$wget,
		app_appW3_wsiS_extStatusW$wget,
		app_appW4_wsiM_extStatusW$wget,
		app_appW4_wsiS_extStatusW$wget;
  wire [66 : 0] inf_dp0_wti_wtiReq$wget, inf_dp1_wti_wtiReq$wget;
  wire [63 : 0] inf_dp0_wmi_nowW$wget, inf_dp1_wmi_nowW$wget;
  wire [60 : 0] app_appW2_respF_wDataIn$wget,
		app_appW2_respF_wDataOut$wget,
		app_appW2_wsiM_reqFifo_x_wire$wget,
		app_appW2_wsiS_wsiReq$wget,
		app_appW3_wsiM_reqFifo_x_wire$wget,
		app_appW3_wsiS_wsiReq$wget,
		app_appW4_respF_wDataIn$wget,
		app_appW4_respF_wDataOut$wget,
		app_appW4_wsiM_reqFifo_x_wire$wget,
		app_appW4_wsiS_wsiReq$wget;
  wire [59 : 0] app_appW2_wci_wciReq$wget,
		app_appW3_wci_wciReq$wget,
		app_appW4_wci_wciReq$wget,
		inf_dp0_wci_wciReq$wget,
		inf_dp1_wci_wciReq$wget;
  wire [51 : 0] app_appW3_wmemi_reqF_x_wire$wget;
  wire [37 : 0] app_appW2_wmi_dhF_x_wire$wget,
		app_appW4_wmi_dhF_x_wire$wget,
		inf_dp0_wmi_wmi_wmiDh$wget,
		inf_dp1_wmi_wmi_wmiDh$wget;
  wire [33 : 0] app_appW2_wci_respF_x_wire$wget,
		app_appW2_wmi_wmiResponse$wget,
		app_appW3_wci_respF_x_wire$wget,
		app_appW4_wci_respF_x_wire$wget,
		app_appW4_wmi_wmiResponse$wget,
		inf_dp0_wci_respF_x_wire$wget,
		inf_dp0_wmi_wmi_respF_x_wire$wget,
		inf_dp1_wci_respF_x_wire$wget,
		inf_dp1_wmi_wmi_respF_x_wire$wget;
  wire [31 : 0] app_appW2_wci_Es_mData_w$wget,
		app_appW2_wmi_Em_sData_w$wget,
		app_appW2_wmi_mFlagF_x_wire$wget,
		app_appW2_wmi_reqF_x_wire$wget,
		app_appW2_wsi_Es_mData_w$wget,
		app_appW3_mesgWF_wDataIn$wget,
		app_appW3_mesgWF_wDataOut$wget,
		app_appW3_wci_Es_mData_w$wget,
		app_appW3_wsi_Es_mData_w$wget,
		app_appW4_wci_Es_mData_w$wget,
		app_appW4_wmi_Em_sData_w$wget,
		app_appW4_wmi_mFlagF_x_wire$wget,
		app_appW4_wmi_reqF_x_wire$wget,
		app_appW4_wsi_Es_mData_w$wget,
		app_tieOff0_wci_Es_mData_w$wget,
		app_tieOff1_wci_Es_mData_w$wget,
		app_tieOff5_wci_Es_mData_w$wget,
		app_tieOff6_wci_Es_mData_w$wget,
		app_tieOff7_wci_Es_mData_w$wget,
		inf_dp0_bram_serverAdapterA_1_outData_enqData$wget,
		inf_dp0_bram_serverAdapterA_1_outData_outData$wget,
		inf_dp0_bram_serverAdapterA_2_outData_enqData$wget,
		inf_dp0_bram_serverAdapterA_2_outData_outData$wget,
		inf_dp0_bram_serverAdapterA_3_outData_enqData$wget,
		inf_dp0_bram_serverAdapterA_3_outData_outData$wget,
		inf_dp0_bram_serverAdapterA_outData_enqData$wget,
		inf_dp0_bram_serverAdapterA_outData_outData$wget,
		inf_dp0_bram_serverAdapterB_1_outData_enqData$wget,
		inf_dp0_bram_serverAdapterB_1_outData_outData$wget,
		inf_dp0_bram_serverAdapterB_2_outData_enqData$wget,
		inf_dp0_bram_serverAdapterB_2_outData_outData$wget,
		inf_dp0_bram_serverAdapterB_3_outData_enqData$wget,
		inf_dp0_bram_serverAdapterB_3_outData_outData$wget,
		inf_dp0_bram_serverAdapterB_outData_enqData$wget,
		inf_dp0_bram_serverAdapterB_outData_outData$wget,
		inf_dp0_wci_Es_mData_w$wget,
		inf_dp0_wmi_Es_mData_w$wget,
		inf_dp0_wmi_wmi_wmiMFlag$wget,
		inf_dp0_wmi_wmi_wmiReq$wget,
		inf_dp1_bram_serverAdapterA_1_outData_enqData$wget,
		inf_dp1_bram_serverAdapterA_1_outData_outData$wget,
		inf_dp1_bram_serverAdapterA_2_outData_enqData$wget,
		inf_dp1_bram_serverAdapterA_2_outData_outData$wget,
		inf_dp1_bram_serverAdapterA_3_outData_enqData$wget,
		inf_dp1_bram_serverAdapterA_3_outData_outData$wget,
		inf_dp1_bram_serverAdapterA_outData_enqData$wget,
		inf_dp1_bram_serverAdapterA_outData_outData$wget,
		inf_dp1_bram_serverAdapterB_1_outData_enqData$wget,
		inf_dp1_bram_serverAdapterB_1_outData_outData$wget,
		inf_dp1_bram_serverAdapterB_2_outData_enqData$wget,
		inf_dp1_bram_serverAdapterB_2_outData_outData$wget,
		inf_dp1_bram_serverAdapterB_3_outData_enqData$wget,
		inf_dp1_bram_serverAdapterB_3_outData_outData$wget,
		inf_dp1_bram_serverAdapterB_outData_enqData$wget,
		inf_dp1_bram_serverAdapterB_outData_outData$wget,
		inf_dp1_wci_Es_mData_w$wget,
		inf_dp1_wmi_Es_mData_w$wget,
		inf_dp1_wmi_wmi_wmiMFlag$wget,
		inf_dp1_wmi_wmi_wmiReq$wget;
  wire [24 : 0] app_appW3_dlyWordsStored_acc_v1$wget,
		app_appW3_dlyWordsStored_acc_v2$wget;
  wire [19 : 0] app_appW2_wci_Es_mAddr_w$wget,
		app_appW3_wci_Es_mAddr_w$wget,
		app_appW4_wci_Es_mAddr_w$wget,
		app_tieOff0_wci_Es_mAddr_w$wget,
		app_tieOff1_wci_Es_mAddr_w$wget,
		app_tieOff5_wci_Es_mAddr_w$wget,
		app_tieOff6_wci_Es_mAddr_w$wget,
		app_tieOff7_wci_Es_mAddr_w$wget,
		inf_dp0_wci_Es_mAddr_w$wget,
		inf_dp1_wci_Es_mAddr_w$wget;
  wire [15 : 0] app_appW3_dlyReadyToWrite_acc_v1$wget,
		app_appW3_dlyReadyToWrite_acc_v2$wget,
		inf_dp0_bml_crdBuf_modulus_bw$wget,
		inf_dp0_bml_fabBuf_modulus_bw$wget,
		inf_dp0_bml_lclBuf_modulus_bw$wget,
		inf_dp0_bml_remBuf_modulus_bw$wget,
		inf_dp1_bml_crdBuf_modulus_bw$wget,
		inf_dp1_bml_fabBuf_modulus_bw$wget,
		inf_dp1_bml_lclBuf_modulus_bw$wget,
		inf_dp1_bml_remBuf_modulus_bw$wget;
  wire [13 : 0] inf_dp0_wmi_Es_mAddr_w$wget, inf_dp1_wmi_Es_mAddr_w$wget;
  wire [11 : 0] app_appW2_fabRespCredit_acc_v1$wget,
		app_appW2_fabRespCredit_acc_v2$wget,
		app_appW2_wsi_Es_mBurstLength_w$wget,
		app_appW3_wsi_Es_mBurstLength_w$wget,
		app_appW4_fabRespCredit_acc_v1$wget,
		app_appW4_fabRespCredit_acc_v2$wget,
		app_appW4_wsi_Es_mBurstLength_w$wget,
		inf_dp0_wmi_Es_mBurstLength_w$wget,
		inf_dp1_wmi_Es_mBurstLength_w$wget;
  wire [7 : 0] app_appW2_wsi_Es_mReqInfo_w$wget,
	       app_appW3_dlyReadCredit_acc_v1$wget,
	       app_appW3_dlyReadCredit_acc_v2$wget,
	       app_appW3_wsi_Es_mReqInfo_w$wget,
	       app_appW4_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] app_appW2_wci_Es_mByteEn_w$wget,
	       app_appW2_wsi_Es_mByteEn_w$wget,
	       app_appW3_wci_Es_mByteEn_w$wget,
	       app_appW3_wsi_Es_mByteEn_w$wget,
	       app_appW4_wci_Es_mByteEn_w$wget,
	       app_appW4_wsi_Es_mByteEn_w$wget,
	       app_tieOff0_wci_Es_mByteEn_w$wget,
	       app_tieOff1_wci_Es_mByteEn_w$wget,
	       app_tieOff5_wci_Es_mByteEn_w$wget,
	       app_tieOff6_wci_Es_mByteEn_w$wget,
	       app_tieOff7_wci_Es_mByteEn_w$wget,
	       inf_dp0_bml_dpControl$wget,
	       inf_dp0_tlp_dpControl$wget,
	       inf_dp0_wci_Es_mByteEn_w$wget,
	       inf_dp0_wmi_Es_mDataByteEn_w$wget,
	       inf_dp0_wmi_dpControl$wget,
	       inf_dp1_bml_dpControl$wget,
	       inf_dp1_tlp_dpControl$wget,
	       inf_dp1_wci_Es_mByteEn_w$wget,
	       inf_dp1_wmi_Es_mDataByteEn_w$wget,
	       inf_dp1_wmi_dpControl$wget;
  wire [2 : 0] app_appW2_wci_Es_mCmd_w$wget,
	       app_appW2_wci_wEdge$wget,
	       app_appW2_wsi_Es_mCmd_w$wget,
	       app_appW3_wci_Es_mCmd_w$wget,
	       app_appW3_wci_wEdge$wget,
	       app_appW3_wsi_Es_mCmd_w$wget,
	       app_appW4_wci_Es_mCmd_w$wget,
	       app_appW4_wci_wEdge$wget,
	       app_appW4_wsi_Es_mCmd_w$wget,
	       app_tieOff0_wci_Es_mCmd_w$wget,
	       app_tieOff1_wci_Es_mCmd_w$wget,
	       app_tieOff5_wci_Es_mCmd_w$wget,
	       app_tieOff6_wci_Es_mCmd_w$wget,
	       app_tieOff7_wci_Es_mCmd_w$wget,
	       inf_dp0_bram_serverAdapterA_1_cnt_1$wget,
	       inf_dp0_bram_serverAdapterA_1_cnt_2$wget,
	       inf_dp0_bram_serverAdapterA_1_cnt_3$wget,
	       inf_dp0_bram_serverAdapterA_2_cnt_1$wget,
	       inf_dp0_bram_serverAdapterA_2_cnt_2$wget,
	       inf_dp0_bram_serverAdapterA_2_cnt_3$wget,
	       inf_dp0_bram_serverAdapterA_3_cnt_1$wget,
	       inf_dp0_bram_serverAdapterA_3_cnt_2$wget,
	       inf_dp0_bram_serverAdapterA_3_cnt_3$wget,
	       inf_dp0_bram_serverAdapterA_cnt_1$wget,
	       inf_dp0_bram_serverAdapterA_cnt_2$wget,
	       inf_dp0_bram_serverAdapterA_cnt_3$wget,
	       inf_dp0_bram_serverAdapterB_1_cnt_1$wget,
	       inf_dp0_bram_serverAdapterB_1_cnt_2$wget,
	       inf_dp0_bram_serverAdapterB_1_cnt_3$wget,
	       inf_dp0_bram_serverAdapterB_2_cnt_1$wget,
	       inf_dp0_bram_serverAdapterB_2_cnt_2$wget,
	       inf_dp0_bram_serverAdapterB_2_cnt_3$wget,
	       inf_dp0_bram_serverAdapterB_3_cnt_1$wget,
	       inf_dp0_bram_serverAdapterB_3_cnt_2$wget,
	       inf_dp0_bram_serverAdapterB_3_cnt_3$wget,
	       inf_dp0_bram_serverAdapterB_cnt_1$wget,
	       inf_dp0_bram_serverAdapterB_cnt_2$wget,
	       inf_dp0_bram_serverAdapterB_cnt_3$wget,
	       inf_dp0_wci_Es_mCmd_w$wget,
	       inf_dp0_wci_wEdge$wget,
	       inf_dp0_wmi_Es_mCmd_w$wget,
	       inf_dp1_bram_serverAdapterA_1_cnt_1$wget,
	       inf_dp1_bram_serverAdapterA_1_cnt_2$wget,
	       inf_dp1_bram_serverAdapterA_1_cnt_3$wget,
	       inf_dp1_bram_serverAdapterA_2_cnt_1$wget,
	       inf_dp1_bram_serverAdapterA_2_cnt_2$wget,
	       inf_dp1_bram_serverAdapterA_2_cnt_3$wget,
	       inf_dp1_bram_serverAdapterA_3_cnt_1$wget,
	       inf_dp1_bram_serverAdapterA_3_cnt_2$wget,
	       inf_dp1_bram_serverAdapterA_3_cnt_3$wget,
	       inf_dp1_bram_serverAdapterA_cnt_1$wget,
	       inf_dp1_bram_serverAdapterA_cnt_2$wget,
	       inf_dp1_bram_serverAdapterA_cnt_3$wget,
	       inf_dp1_bram_serverAdapterB_1_cnt_1$wget,
	       inf_dp1_bram_serverAdapterB_1_cnt_2$wget,
	       inf_dp1_bram_serverAdapterB_1_cnt_3$wget,
	       inf_dp1_bram_serverAdapterB_2_cnt_1$wget,
	       inf_dp1_bram_serverAdapterB_2_cnt_2$wget,
	       inf_dp1_bram_serverAdapterB_2_cnt_3$wget,
	       inf_dp1_bram_serverAdapterB_3_cnt_1$wget,
	       inf_dp1_bram_serverAdapterB_3_cnt_2$wget,
	       inf_dp1_bram_serverAdapterB_3_cnt_3$wget,
	       inf_dp1_bram_serverAdapterB_cnt_1$wget,
	       inf_dp1_bram_serverAdapterB_cnt_2$wget,
	       inf_dp1_bram_serverAdapterB_cnt_3$wget,
	       inf_dp1_wci_Es_mCmd_w$wget,
	       inf_dp1_wci_wEdge$wget,
	       inf_dp1_wmi_Es_mCmd_w$wget;
  wire [1 : 0] app_appW2_wmi_Em_sResp_w$wget,
	       app_appW3_wmemi_Em_sResp_w$wget,
	       app_appW4_wmi_Em_sResp_w$wget,
	       inf_dp0_bram_serverAdapterA_1_s1_1$wget,
	       inf_dp0_bram_serverAdapterA_1_writeWithResp$wget,
	       inf_dp0_bram_serverAdapterA_2_s1_1$wget,
	       inf_dp0_bram_serverAdapterA_2_writeWithResp$wget,
	       inf_dp0_bram_serverAdapterA_3_s1_1$wget,
	       inf_dp0_bram_serverAdapterA_3_writeWithResp$wget,
	       inf_dp0_bram_serverAdapterA_s1_1$wget,
	       inf_dp0_bram_serverAdapterA_writeWithResp$wget,
	       inf_dp0_bram_serverAdapterB_1_s1_1$wget,
	       inf_dp0_bram_serverAdapterB_1_writeWithResp$wget,
	       inf_dp0_bram_serverAdapterB_2_s1_1$wget,
	       inf_dp0_bram_serverAdapterB_2_writeWithResp$wget,
	       inf_dp0_bram_serverAdapterB_3_s1_1$wget,
	       inf_dp0_bram_serverAdapterB_3_writeWithResp$wget,
	       inf_dp0_bram_serverAdapterB_s1_1$wget,
	       inf_dp0_bram_serverAdapterB_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterA_1_s1_1$wget,
	       inf_dp1_bram_serverAdapterA_1_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterA_2_s1_1$wget,
	       inf_dp1_bram_serverAdapterA_2_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterA_3_s1_1$wget,
	       inf_dp1_bram_serverAdapterA_3_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterA_s1_1$wget,
	       inf_dp1_bram_serverAdapterA_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterB_1_s1_1$wget,
	       inf_dp1_bram_serverAdapterB_1_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterB_2_s1_1$wget,
	       inf_dp1_bram_serverAdapterB_2_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterB_3_s1_1$wget,
	       inf_dp1_bram_serverAdapterB_3_writeWithResp$wget,
	       inf_dp1_bram_serverAdapterB_s1_1$wget,
	       inf_dp1_bram_serverAdapterB_writeWithResp$wget;
  wire app_appW2_fabRespCredit_acc_v1$whas,
       app_appW2_fabRespCredit_acc_v2$whas,
       app_appW2_mesgPreRequest_1$wget,
       app_appW2_mesgPreRequest_1$whas,
       app_appW2_respF_pwDequeue$whas,
       app_appW2_respF_pwEnqueue$whas,
       app_appW2_respF_wDataIn$whas,
       app_appW2_respF_wDataOut$whas,
       app_appW2_wci_Es_mAddrSpace_w$wget,
       app_appW2_wci_Es_mAddrSpace_w$whas,
       app_appW2_wci_Es_mAddr_w$whas,
       app_appW2_wci_Es_mByteEn_w$whas,
       app_appW2_wci_Es_mCmd_w$whas,
       app_appW2_wci_Es_mData_w$whas,
       app_appW2_wci_ctlAckReg_1$wget,
       app_appW2_wci_ctlAckReg_1$whas,
       app_appW2_wci_reqF_r_clr$whas,
       app_appW2_wci_reqF_r_deq$whas,
       app_appW2_wci_reqF_r_enq$whas,
       app_appW2_wci_respF_dequeueing$whas,
       app_appW2_wci_respF_enqueueing$whas,
       app_appW2_wci_respF_x_wire$whas,
       app_appW2_wci_sFlagReg_1$wget,
       app_appW2_wci_sFlagReg_1$whas,
       app_appW2_wci_sThreadBusy_pw$whas,
       app_appW2_wci_wEdge$whas,
       app_appW2_wci_wciReq$whas,
       app_appW2_wci_wci_cfrd_pw$whas,
       app_appW2_wci_wci_cfwr_pw$whas,
       app_appW2_wci_wci_ctrl_pw$whas,
       app_appW2_wmi_Em_sData_w$whas,
       app_appW2_wmi_Em_sResp_w$whas,
       app_appW2_wmi_dhF_dequeueing$whas,
       app_appW2_wmi_dhF_enqueueing$whas,
       app_appW2_wmi_dhF_x_wire$whas,
       app_appW2_wmi_mFlagF_dequeueing$whas,
       app_appW2_wmi_mFlagF_enqueueing$whas,
       app_appW2_wmi_mFlagF_x_wire$whas,
       app_appW2_wmi_operateD_1$wget,
       app_appW2_wmi_operateD_1$whas,
       app_appW2_wmi_peerIsReady_1$wget,
       app_appW2_wmi_peerIsReady_1$whas,
       app_appW2_wmi_reqF_dequeueing$whas,
       app_appW2_wmi_reqF_enqueueing$whas,
       app_appW2_wmi_reqF_x_wire$whas,
       app_appW2_wmi_sDataThreadBusy_d_1$wget,
       app_appW2_wmi_sDataThreadBusy_d_1$whas,
       app_appW2_wmi_sThreadBusy_d_1$wget,
       app_appW2_wmi_sThreadBusy_d_1$whas,
       app_appW2_wmi_wmiResponse$whas,
       app_appW2_wsiM_operateD_1$wget,
       app_appW2_wsiM_operateD_1$whas,
       app_appW2_wsiM_peerIsReady_1$wget,
       app_appW2_wsiM_peerIsReady_1$whas,
       app_appW2_wsiM_reqFifo_dequeueing$whas,
       app_appW2_wsiM_reqFifo_enqueueing$whas,
       app_appW2_wsiM_reqFifo_x_wire$whas,
       app_appW2_wsiM_sThreadBusy_pw$whas,
       app_appW2_wsiS_operateD_1$wget,
       app_appW2_wsiS_operateD_1$whas,
       app_appW2_wsiS_peerIsReady_1$wget,
       app_appW2_wsiS_peerIsReady_1$whas,
       app_appW2_wsiS_reqFifo_doResetClr$whas,
       app_appW2_wsiS_reqFifo_doResetDeq$whas,
       app_appW2_wsiS_reqFifo_doResetEnq$whas,
       app_appW2_wsiS_reqFifo_r_clr$whas,
       app_appW2_wsiS_reqFifo_r_deq$whas,
       app_appW2_wsiS_reqFifo_r_enq$whas,
       app_appW2_wsiS_sThreadBusy_dw$wget,
       app_appW2_wsiS_sThreadBusy_dw$whas,
       app_appW2_wsiS_wsiReq$whas,
       app_appW2_wsi_Es_mBurstLength_w$whas,
       app_appW2_wsi_Es_mBurstPrecise_w$whas,
       app_appW2_wsi_Es_mByteEn_w$whas,
       app_appW2_wsi_Es_mCmd_w$whas,
       app_appW2_wsi_Es_mDataInfo_w$whas,
       app_appW2_wsi_Es_mData_w$whas,
       app_appW2_wsi_Es_mReqInfo_w$whas,
       app_appW2_wsi_Es_mReqLast_w$whas,
       app_appW3_dlyReadCredit_acc_v1$whas,
       app_appW3_dlyReadCredit_acc_v2$whas,
       app_appW3_dlyReadyToWrite_acc_v1$whas,
       app_appW3_dlyReadyToWrite_acc_v2$whas,
       app_appW3_dlyWordsStored_acc_v1$whas,
       app_appW3_dlyWordsStored_acc_v2$whas,
       app_appW3_mesgWF_pwDequeue$whas,
       app_appW3_mesgWF_pwEnqueue$whas,
       app_appW3_mesgWF_wDataIn$whas,
       app_appW3_mesgWF_wDataOut$whas,
       app_appW3_wci_Es_mAddrSpace_w$wget,
       app_appW3_wci_Es_mAddrSpace_w$whas,
       app_appW3_wci_Es_mAddr_w$whas,
       app_appW3_wci_Es_mByteEn_w$whas,
       app_appW3_wci_Es_mCmd_w$whas,
       app_appW3_wci_Es_mData_w$whas,
       app_appW3_wci_ctlAckReg_1$wget,
       app_appW3_wci_ctlAckReg_1$whas,
       app_appW3_wci_reqF_r_clr$whas,
       app_appW3_wci_reqF_r_deq$whas,
       app_appW3_wci_reqF_r_enq$whas,
       app_appW3_wci_respF_dequeueing$whas,
       app_appW3_wci_respF_enqueueing$whas,
       app_appW3_wci_respF_x_wire$whas,
       app_appW3_wci_sFlagReg_1$wget,
       app_appW3_wci_sFlagReg_1$whas,
       app_appW3_wci_sThreadBusy_pw$whas,
       app_appW3_wci_wEdge$whas,
       app_appW3_wci_wciReq$whas,
       app_appW3_wci_wci_cfrd_pw$whas,
       app_appW3_wci_wci_cfwr_pw$whas,
       app_appW3_wci_wci_ctrl_pw$whas,
       app_appW3_wmemi_Em_sData_w$whas,
       app_appW3_wmemi_Em_sRespLast_w$whas,
       app_appW3_wmemi_Em_sResp_w$whas,
       app_appW3_wmemi_dhF_dequeueing$whas,
       app_appW3_wmemi_dhF_enqueueing$whas,
       app_appW3_wmemi_dhF_x_wire$whas,
       app_appW3_wmemi_operateD_1$wget,
       app_appW3_wmemi_operateD_1$whas,
       app_appW3_wmemi_peerIsReady_1$wget,
       app_appW3_wmemi_peerIsReady_1$whas,
       app_appW3_wmemi_reqF_dequeueing$whas,
       app_appW3_wmemi_reqF_enqueueing$whas,
       app_appW3_wmemi_reqF_x_wire$whas,
       app_appW3_wmemi_sCmdAccept_w$wget,
       app_appW3_wmemi_sCmdAccept_w$whas,
       app_appW3_wmemi_sDataAccept_w$wget,
       app_appW3_wmemi_sDataAccept_w$whas,
       app_appW3_wmemi_wmemiResponse$whas,
       app_appW3_wsiM_operateD_1$wget,
       app_appW3_wsiM_operateD_1$whas,
       app_appW3_wsiM_peerIsReady_1$wget,
       app_appW3_wsiM_peerIsReady_1$whas,
       app_appW3_wsiM_reqFifo_dequeueing$whas,
       app_appW3_wsiM_reqFifo_enqueueing$whas,
       app_appW3_wsiM_reqFifo_x_wire$whas,
       app_appW3_wsiM_sThreadBusy_pw$whas,
       app_appW3_wsiS_operateD_1$wget,
       app_appW3_wsiS_operateD_1$whas,
       app_appW3_wsiS_peerIsReady_1$wget,
       app_appW3_wsiS_peerIsReady_1$whas,
       app_appW3_wsiS_reqFifo_doResetClr$whas,
       app_appW3_wsiS_reqFifo_doResetDeq$whas,
       app_appW3_wsiS_reqFifo_doResetEnq$whas,
       app_appW3_wsiS_reqFifo_r_clr$whas,
       app_appW3_wsiS_reqFifo_r_deq$whas,
       app_appW3_wsiS_reqFifo_r_enq$whas,
       app_appW3_wsiS_sThreadBusy_dw$wget,
       app_appW3_wsiS_sThreadBusy_dw$whas,
       app_appW3_wsiS_wsiReq$whas,
       app_appW3_wsi_Es_mBurstLength_w$whas,
       app_appW3_wsi_Es_mBurstPrecise_w$whas,
       app_appW3_wsi_Es_mByteEn_w$whas,
       app_appW3_wsi_Es_mCmd_w$whas,
       app_appW3_wsi_Es_mDataInfo_w$whas,
       app_appW3_wsi_Es_mData_w$whas,
       app_appW3_wsi_Es_mReqInfo_w$whas,
       app_appW3_wsi_Es_mReqLast_w$whas,
       app_appW4_fabRespCredit_acc_v1$whas,
       app_appW4_fabRespCredit_acc_v2$whas,
       app_appW4_mesgPreRequest_1$wget,
       app_appW4_mesgPreRequest_1$whas,
       app_appW4_respF_pwDequeue$whas,
       app_appW4_respF_pwEnqueue$whas,
       app_appW4_respF_wDataIn$whas,
       app_appW4_respF_wDataOut$whas,
       app_appW4_wci_Es_mAddrSpace_w$wget,
       app_appW4_wci_Es_mAddrSpace_w$whas,
       app_appW4_wci_Es_mAddr_w$whas,
       app_appW4_wci_Es_mByteEn_w$whas,
       app_appW4_wci_Es_mCmd_w$whas,
       app_appW4_wci_Es_mData_w$whas,
       app_appW4_wci_ctlAckReg_1$wget,
       app_appW4_wci_ctlAckReg_1$whas,
       app_appW4_wci_reqF_r_clr$whas,
       app_appW4_wci_reqF_r_deq$whas,
       app_appW4_wci_reqF_r_enq$whas,
       app_appW4_wci_respF_dequeueing$whas,
       app_appW4_wci_respF_enqueueing$whas,
       app_appW4_wci_respF_x_wire$whas,
       app_appW4_wci_sFlagReg_1$wget,
       app_appW4_wci_sFlagReg_1$whas,
       app_appW4_wci_sThreadBusy_pw$whas,
       app_appW4_wci_wEdge$whas,
       app_appW4_wci_wciReq$whas,
       app_appW4_wci_wci_cfrd_pw$whas,
       app_appW4_wci_wci_cfwr_pw$whas,
       app_appW4_wci_wci_ctrl_pw$whas,
       app_appW4_wmi_Em_sData_w$whas,
       app_appW4_wmi_Em_sResp_w$whas,
       app_appW4_wmi_dhF_dequeueing$whas,
       app_appW4_wmi_dhF_enqueueing$whas,
       app_appW4_wmi_dhF_x_wire$whas,
       app_appW4_wmi_mFlagF_dequeueing$whas,
       app_appW4_wmi_mFlagF_enqueueing$whas,
       app_appW4_wmi_mFlagF_x_wire$whas,
       app_appW4_wmi_operateD_1$wget,
       app_appW4_wmi_operateD_1$whas,
       app_appW4_wmi_peerIsReady_1$wget,
       app_appW4_wmi_peerIsReady_1$whas,
       app_appW4_wmi_reqF_dequeueing$whas,
       app_appW4_wmi_reqF_enqueueing$whas,
       app_appW4_wmi_reqF_x_wire$whas,
       app_appW4_wmi_sDataThreadBusy_d_1$wget,
       app_appW4_wmi_sDataThreadBusy_d_1$whas,
       app_appW4_wmi_sThreadBusy_d_1$wget,
       app_appW4_wmi_sThreadBusy_d_1$whas,
       app_appW4_wmi_wmiResponse$whas,
       app_appW4_wsiM_operateD_1$wget,
       app_appW4_wsiM_operateD_1$whas,
       app_appW4_wsiM_peerIsReady_1$wget,
       app_appW4_wsiM_peerIsReady_1$whas,
       app_appW4_wsiM_reqFifo_dequeueing$whas,
       app_appW4_wsiM_reqFifo_enqueueing$whas,
       app_appW4_wsiM_reqFifo_x_wire$whas,
       app_appW4_wsiM_sThreadBusy_pw$whas,
       app_appW4_wsiS_operateD_1$wget,
       app_appW4_wsiS_operateD_1$whas,
       app_appW4_wsiS_peerIsReady_1$wget,
       app_appW4_wsiS_peerIsReady_1$whas,
       app_appW4_wsiS_reqFifo_doResetClr$whas,
       app_appW4_wsiS_reqFifo_doResetDeq$whas,
       app_appW4_wsiS_reqFifo_doResetEnq$whas,
       app_appW4_wsiS_reqFifo_r_clr$whas,
       app_appW4_wsiS_reqFifo_r_deq$whas,
       app_appW4_wsiS_reqFifo_r_enq$whas,
       app_appW4_wsiS_sThreadBusy_dw$wget,
       app_appW4_wsiS_sThreadBusy_dw$whas,
       app_appW4_wsiS_wsiReq$whas,
       app_appW4_wsi_Es_mBurstLength_w$whas,
       app_appW4_wsi_Es_mBurstPrecise_w$whas,
       app_appW4_wsi_Es_mByteEn_w$whas,
       app_appW4_wsi_Es_mCmd_w$whas,
       app_appW4_wsi_Es_mDataInfo_w$whas,
       app_appW4_wsi_Es_mData_w$whas,
       app_appW4_wsi_Es_mReqInfo_w$whas,
       app_appW4_wsi_Es_mReqLast_w$whas,
       app_tieOff0_wci_Es_mAddrSpace_w$wget,
       app_tieOff0_wci_Es_mAddrSpace_w$whas,
       app_tieOff0_wci_Es_mAddr_w$whas,
       app_tieOff0_wci_Es_mByteEn_w$whas,
       app_tieOff0_wci_Es_mCmd_w$whas,
       app_tieOff0_wci_Es_mData_w$whas,
       app_tieOff1_wci_Es_mAddrSpace_w$wget,
       app_tieOff1_wci_Es_mAddrSpace_w$whas,
       app_tieOff1_wci_Es_mAddr_w$whas,
       app_tieOff1_wci_Es_mByteEn_w$whas,
       app_tieOff1_wci_Es_mCmd_w$whas,
       app_tieOff1_wci_Es_mData_w$whas,
       app_tieOff5_wci_Es_mAddrSpace_w$wget,
       app_tieOff5_wci_Es_mAddrSpace_w$whas,
       app_tieOff5_wci_Es_mAddr_w$whas,
       app_tieOff5_wci_Es_mByteEn_w$whas,
       app_tieOff5_wci_Es_mCmd_w$whas,
       app_tieOff5_wci_Es_mData_w$whas,
       app_tieOff6_wci_Es_mAddrSpace_w$wget,
       app_tieOff6_wci_Es_mAddrSpace_w$whas,
       app_tieOff6_wci_Es_mAddr_w$whas,
       app_tieOff6_wci_Es_mByteEn_w$whas,
       app_tieOff6_wci_Es_mCmd_w$whas,
       app_tieOff6_wci_Es_mData_w$whas,
       app_tieOff7_wci_Es_mAddrSpace_w$wget,
       app_tieOff7_wci_Es_mAddrSpace_w$whas,
       app_tieOff7_wci_Es_mAddr_w$whas,
       app_tieOff7_wci_Es_mByteEn_w$whas,
       app_tieOff7_wci_Es_mCmd_w$whas,
       app_tieOff7_wci_Es_mData_w$whas,
       inf_dp0_bml_crdBuf_decAction$whas,
       inf_dp0_bml_crdBuf_incAction$whas,
       inf_dp0_bml_dpControl$whas,
       inf_dp0_bml_fabAvail_1$wget,
       inf_dp0_bml_fabAvail_1$whas,
       inf_dp0_bml_fabBuf_decAction$whas,
       inf_dp0_bml_fabBuf_incAction$whas,
       inf_dp0_bml_fabDone_1$wget,
       inf_dp0_bml_fabDone_1$whas,
       inf_dp0_bml_lclBufDone_1$wget,
       inf_dp0_bml_lclBufDone_1$whas,
       inf_dp0_bml_lclBufStart_1$wget,
       inf_dp0_bml_lclBufStart_1$whas,
       inf_dp0_bml_lclBuf_decAction$whas,
       inf_dp0_bml_lclBuf_incAction$whas,
       inf_dp0_bml_remBuf_decAction$whas,
       inf_dp0_bml_remBuf_incAction$whas,
       inf_dp0_bml_remDone_1$wget,
       inf_dp0_bml_remDone_1$whas,
       inf_dp0_bml_remStart_1$wget,
       inf_dp0_bml_remStart_1$whas,
       inf_dp0_bram_serverAdapterA_1_cnt_1$whas,
       inf_dp0_bram_serverAdapterA_1_cnt_2$whas,
       inf_dp0_bram_serverAdapterA_1_cnt_3$whas,
       inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterA_1_outData_enqData$whas,
       inf_dp0_bram_serverAdapterA_1_outData_outData$whas,
       inf_dp0_bram_serverAdapterA_1_s1_1$whas,
       inf_dp0_bram_serverAdapterA_1_writeWithResp$whas,
       inf_dp0_bram_serverAdapterA_2_cnt_1$whas,
       inf_dp0_bram_serverAdapterA_2_cnt_2$whas,
       inf_dp0_bram_serverAdapterA_2_cnt_3$whas,
       inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterA_2_outData_enqData$whas,
       inf_dp0_bram_serverAdapterA_2_outData_outData$whas,
       inf_dp0_bram_serverAdapterA_2_s1_1$whas,
       inf_dp0_bram_serverAdapterA_2_writeWithResp$whas,
       inf_dp0_bram_serverAdapterA_3_cnt_1$whas,
       inf_dp0_bram_serverAdapterA_3_cnt_2$whas,
       inf_dp0_bram_serverAdapterA_3_cnt_3$whas,
       inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterA_3_outData_enqData$whas,
       inf_dp0_bram_serverAdapterA_3_outData_outData$whas,
       inf_dp0_bram_serverAdapterA_3_s1_1$whas,
       inf_dp0_bram_serverAdapterA_3_writeWithResp$whas,
       inf_dp0_bram_serverAdapterA_cnt_1$whas,
       inf_dp0_bram_serverAdapterA_cnt_2$whas,
       inf_dp0_bram_serverAdapterA_cnt_3$whas,
       inf_dp0_bram_serverAdapterA_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterA_outData_enqData$whas,
       inf_dp0_bram_serverAdapterA_outData_outData$whas,
       inf_dp0_bram_serverAdapterA_s1_1$whas,
       inf_dp0_bram_serverAdapterA_writeWithResp$whas,
       inf_dp0_bram_serverAdapterB_1_cnt_1$whas,
       inf_dp0_bram_serverAdapterB_1_cnt_2$whas,
       inf_dp0_bram_serverAdapterB_1_cnt_3$whas,
       inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterB_1_outData_enqData$whas,
       inf_dp0_bram_serverAdapterB_1_outData_outData$whas,
       inf_dp0_bram_serverAdapterB_1_s1_1$whas,
       inf_dp0_bram_serverAdapterB_1_writeWithResp$whas,
       inf_dp0_bram_serverAdapterB_2_cnt_1$whas,
       inf_dp0_bram_serverAdapterB_2_cnt_2$whas,
       inf_dp0_bram_serverAdapterB_2_cnt_3$whas,
       inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterB_2_outData_enqData$whas,
       inf_dp0_bram_serverAdapterB_2_outData_outData$whas,
       inf_dp0_bram_serverAdapterB_2_s1_1$whas,
       inf_dp0_bram_serverAdapterB_2_writeWithResp$whas,
       inf_dp0_bram_serverAdapterB_3_cnt_1$whas,
       inf_dp0_bram_serverAdapterB_3_cnt_2$whas,
       inf_dp0_bram_serverAdapterB_3_cnt_3$whas,
       inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterB_3_outData_enqData$whas,
       inf_dp0_bram_serverAdapterB_3_outData_outData$whas,
       inf_dp0_bram_serverAdapterB_3_s1_1$whas,
       inf_dp0_bram_serverAdapterB_3_writeWithResp$whas,
       inf_dp0_bram_serverAdapterB_cnt_1$whas,
       inf_dp0_bram_serverAdapterB_cnt_2$whas,
       inf_dp0_bram_serverAdapterB_cnt_3$whas,
       inf_dp0_bram_serverAdapterB_outData_deqCalled$whas,
       inf_dp0_bram_serverAdapterB_outData_enqData$whas,
       inf_dp0_bram_serverAdapterB_outData_outData$whas,
       inf_dp0_bram_serverAdapterB_s1_1$whas,
       inf_dp0_bram_serverAdapterB_writeWithResp$whas,
       inf_dp0_tlp_creditReady_1$wget,
       inf_dp0_tlp_creditReady_1$whas,
       inf_dp0_tlp_dpControl$whas,
       inf_dp0_tlp_farBufReady_1$wget,
       inf_dp0_tlp_farBufReady_1$whas,
       inf_dp0_tlp_nearBufReady_1$wget,
       inf_dp0_tlp_nearBufReady_1$whas,
       inf_dp0_tlp_pullTagMatch_1$wget,
       inf_dp0_tlp_pullTagMatch_1$whas,
       inf_dp0_tlp_remDone_1$wget,
       inf_dp0_tlp_remDone_1$whas,
       inf_dp0_tlp_remStart_1$wget,
       inf_dp0_tlp_remStart_1$whas,
       inf_dp0_wci_Es_mAddrSpace_w$wget,
       inf_dp0_wci_Es_mAddrSpace_w$whas,
       inf_dp0_wci_Es_mAddr_w$whas,
       inf_dp0_wci_Es_mByteEn_w$whas,
       inf_dp0_wci_Es_mCmd_w$whas,
       inf_dp0_wci_Es_mData_w$whas,
       inf_dp0_wci_ctlAckReg_1$wget,
       inf_dp0_wci_ctlAckReg_1$whas,
       inf_dp0_wci_reqF_r_clr$whas,
       inf_dp0_wci_reqF_r_deq$whas,
       inf_dp0_wci_reqF_r_enq$whas,
       inf_dp0_wci_respF_dequeueing$whas,
       inf_dp0_wci_respF_enqueueing$whas,
       inf_dp0_wci_respF_x_wire$whas,
       inf_dp0_wci_sFlagReg_1$wget,
       inf_dp0_wci_sFlagReg_1$whas,
       inf_dp0_wci_sThreadBusy_pw$whas,
       inf_dp0_wci_wEdge$whas,
       inf_dp0_wci_wciReq$whas,
       inf_dp0_wci_wci_cfrd_pw$whas,
       inf_dp0_wci_wci_cfwr_pw$whas,
       inf_dp0_wci_wci_ctrl_pw$whas,
       inf_dp0_wmi_Es_mAddrSpace_w$wget,
       inf_dp0_wmi_Es_mAddrSpace_w$whas,
       inf_dp0_wmi_Es_mAddr_w$whas,
       inf_dp0_wmi_Es_mBurstLength_w$whas,
       inf_dp0_wmi_Es_mCmd_w$whas,
       inf_dp0_wmi_Es_mDataByteEn_w$whas,
       inf_dp0_wmi_Es_mDataInfo_w$whas,
       inf_dp0_wmi_Es_mDataLast_w$whas,
       inf_dp0_wmi_Es_mDataValid_w$whas,
       inf_dp0_wmi_Es_mData_w$whas,
       inf_dp0_wmi_Es_mReqInfo_w$wget,
       inf_dp0_wmi_Es_mReqInfo_w$whas,
       inf_dp0_wmi_Es_mReqLast_w$whas,
       inf_dp0_wmi_dpControl$whas,
       inf_dp0_wmi_mesgBufReady_1$wget,
       inf_dp0_wmi_mesgBufReady_1$whas,
       inf_dp0_wmi_mesgDone_1$wget,
       inf_dp0_wmi_mesgDone_1$whas,
       inf_dp0_wmi_mesgStart_1$wget,
       inf_dp0_wmi_mesgStart_1$whas,
       inf_dp0_wmi_nowW$whas,
       inf_dp0_wmi_wmi_dhF_doResetClr$whas,
       inf_dp0_wmi_wmi_dhF_doResetDeq$whas,
       inf_dp0_wmi_wmi_dhF_doResetEnq$whas,
       inf_dp0_wmi_wmi_dhF_r_clr$whas,
       inf_dp0_wmi_wmi_dhF_r_deq$whas,
       inf_dp0_wmi_wmi_dhF_r_enq$whas,
       inf_dp0_wmi_wmi_forceSThreadBusy_pw$whas,
       inf_dp0_wmi_wmi_mFlagF_doResetClr$whas,
       inf_dp0_wmi_wmi_mFlagF_doResetDeq$whas,
       inf_dp0_wmi_wmi_mFlagF_doResetEnq$whas,
       inf_dp0_wmi_wmi_mFlagF_r_clr$whas,
       inf_dp0_wmi_wmi_mFlagF_r_deq$whas,
       inf_dp0_wmi_wmi_mFlagF_r_enq$whas,
       inf_dp0_wmi_wmi_operateD_1$wget,
       inf_dp0_wmi_wmi_operateD_1$whas,
       inf_dp0_wmi_wmi_peerIsReady_1$wget,
       inf_dp0_wmi_wmi_peerIsReady_1$whas,
       inf_dp0_wmi_wmi_reqF_doResetClr$whas,
       inf_dp0_wmi_wmi_reqF_doResetDeq$whas,
       inf_dp0_wmi_wmi_reqF_doResetEnq$whas,
       inf_dp0_wmi_wmi_reqF_r_clr$whas,
       inf_dp0_wmi_wmi_reqF_r_deq$whas,
       inf_dp0_wmi_wmi_reqF_r_enq$whas,
       inf_dp0_wmi_wmi_respF_dequeueing$whas,
       inf_dp0_wmi_wmi_respF_enqueueing$whas,
       inf_dp0_wmi_wmi_respF_x_wire$whas,
       inf_dp0_wmi_wmi_sDataThreadBusy_dw$wget,
       inf_dp0_wmi_wmi_sDataThreadBusy_dw$whas,
       inf_dp0_wmi_wmi_sThreadBusy_dw$wget,
       inf_dp0_wmi_wmi_sThreadBusy_dw$whas,
       inf_dp0_wmi_wmi_wmiDh$whas,
       inf_dp0_wmi_wmi_wmiMFlag$whas,
       inf_dp0_wmi_wmi_wmiReq$whas,
       inf_dp0_wti_wtiReq$whas,
       inf_dp1_bml_crdBuf_decAction$whas,
       inf_dp1_bml_crdBuf_incAction$whas,
       inf_dp1_bml_dpControl$whas,
       inf_dp1_bml_fabAvail_1$wget,
       inf_dp1_bml_fabAvail_1$whas,
       inf_dp1_bml_fabBuf_decAction$whas,
       inf_dp1_bml_fabBuf_incAction$whas,
       inf_dp1_bml_fabDone_1$wget,
       inf_dp1_bml_fabDone_1$whas,
       inf_dp1_bml_lclBufDone_1$wget,
       inf_dp1_bml_lclBufDone_1$whas,
       inf_dp1_bml_lclBufStart_1$wget,
       inf_dp1_bml_lclBufStart_1$whas,
       inf_dp1_bml_lclBuf_decAction$whas,
       inf_dp1_bml_lclBuf_incAction$whas,
       inf_dp1_bml_remBuf_decAction$whas,
       inf_dp1_bml_remBuf_incAction$whas,
       inf_dp1_bml_remDone_1$wget,
       inf_dp1_bml_remDone_1$whas,
       inf_dp1_bml_remStart_1$wget,
       inf_dp1_bml_remStart_1$whas,
       inf_dp1_bram_serverAdapterA_1_cnt_1$whas,
       inf_dp1_bram_serverAdapterA_1_cnt_2$whas,
       inf_dp1_bram_serverAdapterA_1_cnt_3$whas,
       inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterA_1_outData_enqData$whas,
       inf_dp1_bram_serverAdapterA_1_outData_outData$whas,
       inf_dp1_bram_serverAdapterA_1_s1_1$whas,
       inf_dp1_bram_serverAdapterA_1_writeWithResp$whas,
       inf_dp1_bram_serverAdapterA_2_cnt_1$whas,
       inf_dp1_bram_serverAdapterA_2_cnt_2$whas,
       inf_dp1_bram_serverAdapterA_2_cnt_3$whas,
       inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterA_2_outData_enqData$whas,
       inf_dp1_bram_serverAdapterA_2_outData_outData$whas,
       inf_dp1_bram_serverAdapterA_2_s1_1$whas,
       inf_dp1_bram_serverAdapterA_2_writeWithResp$whas,
       inf_dp1_bram_serverAdapterA_3_cnt_1$whas,
       inf_dp1_bram_serverAdapterA_3_cnt_2$whas,
       inf_dp1_bram_serverAdapterA_3_cnt_3$whas,
       inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterA_3_outData_enqData$whas,
       inf_dp1_bram_serverAdapterA_3_outData_outData$whas,
       inf_dp1_bram_serverAdapterA_3_s1_1$whas,
       inf_dp1_bram_serverAdapterA_3_writeWithResp$whas,
       inf_dp1_bram_serverAdapterA_cnt_1$whas,
       inf_dp1_bram_serverAdapterA_cnt_2$whas,
       inf_dp1_bram_serverAdapterA_cnt_3$whas,
       inf_dp1_bram_serverAdapterA_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterA_outData_enqData$whas,
       inf_dp1_bram_serverAdapterA_outData_outData$whas,
       inf_dp1_bram_serverAdapterA_s1_1$whas,
       inf_dp1_bram_serverAdapterA_writeWithResp$whas,
       inf_dp1_bram_serverAdapterB_1_cnt_1$whas,
       inf_dp1_bram_serverAdapterB_1_cnt_2$whas,
       inf_dp1_bram_serverAdapterB_1_cnt_3$whas,
       inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterB_1_outData_enqData$whas,
       inf_dp1_bram_serverAdapterB_1_outData_outData$whas,
       inf_dp1_bram_serverAdapterB_1_s1_1$whas,
       inf_dp1_bram_serverAdapterB_1_writeWithResp$whas,
       inf_dp1_bram_serverAdapterB_2_cnt_1$whas,
       inf_dp1_bram_serverAdapterB_2_cnt_2$whas,
       inf_dp1_bram_serverAdapterB_2_cnt_3$whas,
       inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterB_2_outData_enqData$whas,
       inf_dp1_bram_serverAdapterB_2_outData_outData$whas,
       inf_dp1_bram_serverAdapterB_2_s1_1$whas,
       inf_dp1_bram_serverAdapterB_2_writeWithResp$whas,
       inf_dp1_bram_serverAdapterB_3_cnt_1$whas,
       inf_dp1_bram_serverAdapterB_3_cnt_2$whas,
       inf_dp1_bram_serverAdapterB_3_cnt_3$whas,
       inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterB_3_outData_enqData$whas,
       inf_dp1_bram_serverAdapterB_3_outData_outData$whas,
       inf_dp1_bram_serverAdapterB_3_s1_1$whas,
       inf_dp1_bram_serverAdapterB_3_writeWithResp$whas,
       inf_dp1_bram_serverAdapterB_cnt_1$whas,
       inf_dp1_bram_serverAdapterB_cnt_2$whas,
       inf_dp1_bram_serverAdapterB_cnt_3$whas,
       inf_dp1_bram_serverAdapterB_outData_deqCalled$whas,
       inf_dp1_bram_serverAdapterB_outData_enqData$whas,
       inf_dp1_bram_serverAdapterB_outData_outData$whas,
       inf_dp1_bram_serverAdapterB_s1_1$whas,
       inf_dp1_bram_serverAdapterB_writeWithResp$whas,
       inf_dp1_tlp_creditReady_1$wget,
       inf_dp1_tlp_creditReady_1$whas,
       inf_dp1_tlp_dpControl$whas,
       inf_dp1_tlp_farBufReady_1$wget,
       inf_dp1_tlp_farBufReady_1$whas,
       inf_dp1_tlp_nearBufReady_1$wget,
       inf_dp1_tlp_nearBufReady_1$whas,
       inf_dp1_tlp_pullTagMatch_1$wget,
       inf_dp1_tlp_pullTagMatch_1$whas,
       inf_dp1_tlp_remDone_1$wget,
       inf_dp1_tlp_remDone_1$whas,
       inf_dp1_tlp_remStart_1$wget,
       inf_dp1_tlp_remStart_1$whas,
       inf_dp1_wci_Es_mAddrSpace_w$wget,
       inf_dp1_wci_Es_mAddrSpace_w$whas,
       inf_dp1_wci_Es_mAddr_w$whas,
       inf_dp1_wci_Es_mByteEn_w$whas,
       inf_dp1_wci_Es_mCmd_w$whas,
       inf_dp1_wci_Es_mData_w$whas,
       inf_dp1_wci_ctlAckReg_1$wget,
       inf_dp1_wci_ctlAckReg_1$whas,
       inf_dp1_wci_reqF_r_clr$whas,
       inf_dp1_wci_reqF_r_deq$whas,
       inf_dp1_wci_reqF_r_enq$whas,
       inf_dp1_wci_respF_dequeueing$whas,
       inf_dp1_wci_respF_enqueueing$whas,
       inf_dp1_wci_respF_x_wire$whas,
       inf_dp1_wci_sFlagReg_1$wget,
       inf_dp1_wci_sFlagReg_1$whas,
       inf_dp1_wci_sThreadBusy_pw$whas,
       inf_dp1_wci_wEdge$whas,
       inf_dp1_wci_wciReq$whas,
       inf_dp1_wci_wci_cfrd_pw$whas,
       inf_dp1_wci_wci_cfwr_pw$whas,
       inf_dp1_wci_wci_ctrl_pw$whas,
       inf_dp1_wmi_Es_mAddrSpace_w$wget,
       inf_dp1_wmi_Es_mAddrSpace_w$whas,
       inf_dp1_wmi_Es_mAddr_w$whas,
       inf_dp1_wmi_Es_mBurstLength_w$whas,
       inf_dp1_wmi_Es_mCmd_w$whas,
       inf_dp1_wmi_Es_mDataByteEn_w$whas,
       inf_dp1_wmi_Es_mDataInfo_w$whas,
       inf_dp1_wmi_Es_mDataLast_w$whas,
       inf_dp1_wmi_Es_mDataValid_w$whas,
       inf_dp1_wmi_Es_mData_w$whas,
       inf_dp1_wmi_Es_mReqInfo_w$wget,
       inf_dp1_wmi_Es_mReqInfo_w$whas,
       inf_dp1_wmi_Es_mReqLast_w$whas,
       inf_dp1_wmi_dpControl$whas,
       inf_dp1_wmi_mesgBufReady_1$wget,
       inf_dp1_wmi_mesgBufReady_1$whas,
       inf_dp1_wmi_mesgDone_1$wget,
       inf_dp1_wmi_mesgDone_1$whas,
       inf_dp1_wmi_mesgStart_1$wget,
       inf_dp1_wmi_mesgStart_1$whas,
       inf_dp1_wmi_nowW$whas,
       inf_dp1_wmi_wmi_dhF_doResetClr$whas,
       inf_dp1_wmi_wmi_dhF_doResetDeq$whas,
       inf_dp1_wmi_wmi_dhF_doResetEnq$whas,
       inf_dp1_wmi_wmi_dhF_r_clr$whas,
       inf_dp1_wmi_wmi_dhF_r_deq$whas,
       inf_dp1_wmi_wmi_dhF_r_enq$whas,
       inf_dp1_wmi_wmi_forceSThreadBusy_pw$whas,
       inf_dp1_wmi_wmi_mFlagF_doResetClr$whas,
       inf_dp1_wmi_wmi_mFlagF_doResetDeq$whas,
       inf_dp1_wmi_wmi_mFlagF_doResetEnq$whas,
       inf_dp1_wmi_wmi_mFlagF_r_clr$whas,
       inf_dp1_wmi_wmi_mFlagF_r_deq$whas,
       inf_dp1_wmi_wmi_mFlagF_r_enq$whas,
       inf_dp1_wmi_wmi_operateD_1$wget,
       inf_dp1_wmi_wmi_operateD_1$whas,
       inf_dp1_wmi_wmi_peerIsReady_1$wget,
       inf_dp1_wmi_wmi_peerIsReady_1$whas,
       inf_dp1_wmi_wmi_reqF_doResetClr$whas,
       inf_dp1_wmi_wmi_reqF_doResetDeq$whas,
       inf_dp1_wmi_wmi_reqF_doResetEnq$whas,
       inf_dp1_wmi_wmi_reqF_r_clr$whas,
       inf_dp1_wmi_wmi_reqF_r_deq$whas,
       inf_dp1_wmi_wmi_reqF_r_enq$whas,
       inf_dp1_wmi_wmi_respF_dequeueing$whas,
       inf_dp1_wmi_wmi_respF_enqueueing$whas,
       inf_dp1_wmi_wmi_respF_x_wire$whas,
       inf_dp1_wmi_wmi_sDataThreadBusy_dw$wget,
       inf_dp1_wmi_wmi_sDataThreadBusy_dw$whas,
       inf_dp1_wmi_wmi_sThreadBusy_dw$wget,
       inf_dp1_wmi_wmi_sThreadBusy_dw$whas,
       inf_dp1_wmi_wmi_wmiDh$whas,
       inf_dp1_wmi_wmi_wmiMFlag$whas,
       inf_dp1_wmi_wmi_wmiReq$whas,
       inf_dp1_wti_wtiReq$whas,
       inf_itc0_wti_sThreadBusy_pw$whas,
       inf_itc1_wti_sThreadBusy_pw$whas;

  // register app_appW2_abortCount
  reg [31 : 0] app_appW2_abortCount;
  wire [31 : 0] app_appW2_abortCount$D_IN;
  wire app_appW2_abortCount$EN;

  // register app_appW2_doAbort
  reg app_appW2_doAbort;
  wire app_appW2_doAbort$D_IN, app_appW2_doAbort$EN;

  // register app_appW2_endOfMessage
  reg app_appW2_endOfMessage;
  wire app_appW2_endOfMessage$D_IN, app_appW2_endOfMessage$EN;

  // register app_appW2_errCount
  reg [31 : 0] app_appW2_errCount;
  wire [31 : 0] app_appW2_errCount$D_IN;
  wire app_appW2_errCount$EN;

  // register app_appW2_fabRespCredit_value
  reg [11 : 0] app_appW2_fabRespCredit_value;
  wire [11 : 0] app_appW2_fabRespCredit_value$D_IN;
  wire app_appW2_fabRespCredit_value$EN;

  // register app_appW2_fabWordsCurReq
  reg [13 : 0] app_appW2_fabWordsCurReq;
  wire [13 : 0] app_appW2_fabWordsCurReq$D_IN;
  wire app_appW2_fabWordsCurReq$EN;

  // register app_appW2_fabWordsRemain
  reg [13 : 0] app_appW2_fabWordsRemain;
  wire [13 : 0] app_appW2_fabWordsRemain$D_IN;
  wire app_appW2_fabWordsRemain$EN;

  // register app_appW2_firstMsgReq
  reg app_appW2_firstMsgReq;
  wire app_appW2_firstMsgReq$D_IN, app_appW2_firstMsgReq$EN;

  // register app_appW2_impreciseBurst
  reg app_appW2_impreciseBurst;
  wire app_appW2_impreciseBurst$D_IN, app_appW2_impreciseBurst$EN;

  // register app_appW2_lastMesg
  reg [31 : 0] app_appW2_lastMesg;
  wire [31 : 0] app_appW2_lastMesg$D_IN;
  wire app_appW2_lastMesg$EN;

  // register app_appW2_mesgCount
  reg [31 : 0] app_appW2_mesgCount;
  reg [31 : 0] app_appW2_mesgCount$D_IN;
  wire app_appW2_mesgCount$EN;

  // register app_appW2_mesgLength
  reg [14 : 0] app_appW2_mesgLength;
  reg [14 : 0] app_appW2_mesgLength$D_IN;
  wire app_appW2_mesgLength$EN;

  // register app_appW2_mesgLengthSoFar
  reg [13 : 0] app_appW2_mesgLengthSoFar;
  wire [13 : 0] app_appW2_mesgLengthSoFar$D_IN;
  wire app_appW2_mesgLengthSoFar$EN;

  // register app_appW2_mesgPreRequest
  reg app_appW2_mesgPreRequest;
  wire app_appW2_mesgPreRequest$D_IN, app_appW2_mesgPreRequest$EN;

  // register app_appW2_mesgReqAddr
  reg [13 : 0] app_appW2_mesgReqAddr;
  wire [13 : 0] app_appW2_mesgReqAddr$D_IN;
  wire app_appW2_mesgReqAddr$EN;

  // register app_appW2_mesgReqOK
  reg app_appW2_mesgReqOK;
  wire app_appW2_mesgReqOK$D_IN, app_appW2_mesgReqOK$EN;

  // register app_appW2_mesgReqValid
  reg app_appW2_mesgReqValid;
  wire app_appW2_mesgReqValid$D_IN, app_appW2_mesgReqValid$EN;

  // register app_appW2_opcode
  reg [8 : 0] app_appW2_opcode;
  wire [8 : 0] app_appW2_opcode$D_IN;
  wire app_appW2_opcode$EN;

  // register app_appW2_preciseBurst
  reg app_appW2_preciseBurst;
  wire app_appW2_preciseBurst$D_IN, app_appW2_preciseBurst$EN;

  // register app_appW2_readyToPush
  reg app_appW2_readyToPush;
  wire app_appW2_readyToPush$D_IN, app_appW2_readyToPush$EN;

  // register app_appW2_readyToRequest
  reg app_appW2_readyToRequest;
  wire app_appW2_readyToRequest$D_IN, app_appW2_readyToRequest$EN;

  // register app_appW2_respF_rCache
  reg [73 : 0] app_appW2_respF_rCache;
  wire [73 : 0] app_appW2_respF_rCache$D_IN;
  wire app_appW2_respF_rCache$EN;

  // register app_appW2_respF_rRdPtr
  reg [11 : 0] app_appW2_respF_rRdPtr;
  wire [11 : 0] app_appW2_respF_rRdPtr$D_IN;
  wire app_appW2_respF_rRdPtr$EN;

  // register app_appW2_respF_rWrPtr
  reg [11 : 0] app_appW2_respF_rWrPtr;
  wire [11 : 0] app_appW2_respF_rWrPtr$D_IN;
  wire app_appW2_respF_rWrPtr$EN;

  // register app_appW2_smaCtrl
  reg [31 : 0] app_appW2_smaCtrl;
  wire [31 : 0] app_appW2_smaCtrl$D_IN;
  wire app_appW2_smaCtrl$EN;

  // register app_appW2_thisMesg
  reg [31 : 0] app_appW2_thisMesg;
  reg [31 : 0] app_appW2_thisMesg$D_IN;
  wire app_appW2_thisMesg$EN;

  // register app_appW2_unrollCnt
  reg [15 : 0] app_appW2_unrollCnt;
  wire [15 : 0] app_appW2_unrollCnt$D_IN;
  wire app_appW2_unrollCnt$EN;

  // register app_appW2_valExpect
  reg [31 : 0] app_appW2_valExpect;
  wire [31 : 0] app_appW2_valExpect$D_IN;
  wire app_appW2_valExpect$EN;

  // register app_appW2_wci_cEdge
  reg [2 : 0] app_appW2_wci_cEdge;
  wire [2 : 0] app_appW2_wci_cEdge$D_IN;
  wire app_appW2_wci_cEdge$EN;

  // register app_appW2_wci_cState
  reg [2 : 0] app_appW2_wci_cState;
  wire [2 : 0] app_appW2_wci_cState$D_IN;
  wire app_appW2_wci_cState$EN;

  // register app_appW2_wci_ctlAckReg
  reg app_appW2_wci_ctlAckReg;
  wire app_appW2_wci_ctlAckReg$D_IN, app_appW2_wci_ctlAckReg$EN;

  // register app_appW2_wci_ctlOpActive
  reg app_appW2_wci_ctlOpActive;
  wire app_appW2_wci_ctlOpActive$D_IN, app_appW2_wci_ctlOpActive$EN;

  // register app_appW2_wci_illegalEdge
  reg app_appW2_wci_illegalEdge;
  wire app_appW2_wci_illegalEdge$D_IN, app_appW2_wci_illegalEdge$EN;

  // register app_appW2_wci_nState
  reg [2 : 0] app_appW2_wci_nState;
  reg [2 : 0] app_appW2_wci_nState$D_IN;
  wire app_appW2_wci_nState$EN;

  // register app_appW2_wci_reqF_countReg
  reg [1 : 0] app_appW2_wci_reqF_countReg;
  wire [1 : 0] app_appW2_wci_reqF_countReg$D_IN;
  wire app_appW2_wci_reqF_countReg$EN;

  // register app_appW2_wci_respF_c_r
  reg [1 : 0] app_appW2_wci_respF_c_r;
  wire [1 : 0] app_appW2_wci_respF_c_r$D_IN;
  wire app_appW2_wci_respF_c_r$EN;

  // register app_appW2_wci_respF_q_0
  reg [33 : 0] app_appW2_wci_respF_q_0;
  reg [33 : 0] app_appW2_wci_respF_q_0$D_IN;
  wire app_appW2_wci_respF_q_0$EN;

  // register app_appW2_wci_respF_q_1
  reg [33 : 0] app_appW2_wci_respF_q_1;
  reg [33 : 0] app_appW2_wci_respF_q_1$D_IN;
  wire app_appW2_wci_respF_q_1$EN;

  // register app_appW2_wci_sFlagReg
  reg app_appW2_wci_sFlagReg;
  wire app_appW2_wci_sFlagReg$D_IN, app_appW2_wci_sFlagReg$EN;

  // register app_appW2_wci_sThreadBusy_d
  reg app_appW2_wci_sThreadBusy_d;
  wire app_appW2_wci_sThreadBusy_d$D_IN, app_appW2_wci_sThreadBusy_d$EN;

  // register app_appW2_wmi_busyWithMessage
  reg app_appW2_wmi_busyWithMessage;
  wire app_appW2_wmi_busyWithMessage$D_IN, app_appW2_wmi_busyWithMessage$EN;

  // register app_appW2_wmi_dhF_c_r
  reg [1 : 0] app_appW2_wmi_dhF_c_r;
  wire [1 : 0] app_appW2_wmi_dhF_c_r$D_IN;
  wire app_appW2_wmi_dhF_c_r$EN;

  // register app_appW2_wmi_dhF_q_0
  reg [37 : 0] app_appW2_wmi_dhF_q_0;
  reg [37 : 0] app_appW2_wmi_dhF_q_0$D_IN;
  wire app_appW2_wmi_dhF_q_0$EN;

  // register app_appW2_wmi_dhF_q_1
  reg [37 : 0] app_appW2_wmi_dhF_q_1;
  reg [37 : 0] app_appW2_wmi_dhF_q_1$D_IN;
  wire app_appW2_wmi_dhF_q_1$EN;

  // register app_appW2_wmi_errorSticky
  reg app_appW2_wmi_errorSticky;
  wire app_appW2_wmi_errorSticky$D_IN, app_appW2_wmi_errorSticky$EN;

  // register app_appW2_wmi_mFlagF_c_r
  reg [1 : 0] app_appW2_wmi_mFlagF_c_r;
  wire [1 : 0] app_appW2_wmi_mFlagF_c_r$D_IN;
  wire app_appW2_wmi_mFlagF_c_r$EN;

  // register app_appW2_wmi_mFlagF_q_0
  reg [31 : 0] app_appW2_wmi_mFlagF_q_0;
  reg [31 : 0] app_appW2_wmi_mFlagF_q_0$D_IN;
  wire app_appW2_wmi_mFlagF_q_0$EN;

  // register app_appW2_wmi_mFlagF_q_1
  reg [31 : 0] app_appW2_wmi_mFlagF_q_1;
  reg [31 : 0] app_appW2_wmi_mFlagF_q_1$D_IN;
  wire app_appW2_wmi_mFlagF_q_1$EN;

  // register app_appW2_wmi_operateD
  reg app_appW2_wmi_operateD;
  wire app_appW2_wmi_operateD$D_IN, app_appW2_wmi_operateD$EN;

  // register app_appW2_wmi_peerIsReady
  reg app_appW2_wmi_peerIsReady;
  wire app_appW2_wmi_peerIsReady$D_IN, app_appW2_wmi_peerIsReady$EN;

  // register app_appW2_wmi_reqF_c_r
  reg [1 : 0] app_appW2_wmi_reqF_c_r;
  wire [1 : 0] app_appW2_wmi_reqF_c_r$D_IN;
  wire app_appW2_wmi_reqF_c_r$EN;

  // register app_appW2_wmi_reqF_q_0
  reg [31 : 0] app_appW2_wmi_reqF_q_0;
  reg [31 : 0] app_appW2_wmi_reqF_q_0$D_IN;
  wire app_appW2_wmi_reqF_q_0$EN;

  // register app_appW2_wmi_reqF_q_1
  reg [31 : 0] app_appW2_wmi_reqF_q_1;
  reg [31 : 0] app_appW2_wmi_reqF_q_1$D_IN;
  wire app_appW2_wmi_reqF_q_1$EN;

  // register app_appW2_wmi_sDataThreadBusy_d
  reg app_appW2_wmi_sDataThreadBusy_d;
  wire app_appW2_wmi_sDataThreadBusy_d$D_IN,
       app_appW2_wmi_sDataThreadBusy_d$EN;

  // register app_appW2_wmi_sFlagReg
  reg [31 : 0] app_appW2_wmi_sFlagReg;
  wire [31 : 0] app_appW2_wmi_sFlagReg$D_IN;
  wire app_appW2_wmi_sFlagReg$EN;

  // register app_appW2_wmi_sThreadBusy_d
  reg app_appW2_wmi_sThreadBusy_d;
  wire app_appW2_wmi_sThreadBusy_d$D_IN, app_appW2_wmi_sThreadBusy_d$EN;

  // register app_appW2_wmi_statusR
  reg [7 : 0] app_appW2_wmi_statusR;
  wire [7 : 0] app_appW2_wmi_statusR$D_IN;
  wire app_appW2_wmi_statusR$EN;

  // register app_appW2_wmi_trafficSticky
  reg app_appW2_wmi_trafficSticky;
  wire app_appW2_wmi_trafficSticky$D_IN, app_appW2_wmi_trafficSticky$EN;

  // register app_appW2_wsiM_burstKind
  reg [1 : 0] app_appW2_wsiM_burstKind;
  wire [1 : 0] app_appW2_wsiM_burstKind$D_IN;
  wire app_appW2_wsiM_burstKind$EN;

  // register app_appW2_wsiM_errorSticky
  reg app_appW2_wsiM_errorSticky;
  wire app_appW2_wsiM_errorSticky$D_IN, app_appW2_wsiM_errorSticky$EN;

  // register app_appW2_wsiM_iMesgCount
  reg [31 : 0] app_appW2_wsiM_iMesgCount;
  wire [31 : 0] app_appW2_wsiM_iMesgCount$D_IN;
  wire app_appW2_wsiM_iMesgCount$EN;

  // register app_appW2_wsiM_operateD
  reg app_appW2_wsiM_operateD;
  wire app_appW2_wsiM_operateD$D_IN, app_appW2_wsiM_operateD$EN;

  // register app_appW2_wsiM_pMesgCount
  reg [31 : 0] app_appW2_wsiM_pMesgCount;
  wire [31 : 0] app_appW2_wsiM_pMesgCount$D_IN;
  wire app_appW2_wsiM_pMesgCount$EN;

  // register app_appW2_wsiM_peerIsReady
  reg app_appW2_wsiM_peerIsReady;
  wire app_appW2_wsiM_peerIsReady$D_IN, app_appW2_wsiM_peerIsReady$EN;

  // register app_appW2_wsiM_reqFifo_c_r
  reg [1 : 0] app_appW2_wsiM_reqFifo_c_r;
  wire [1 : 0] app_appW2_wsiM_reqFifo_c_r$D_IN;
  wire app_appW2_wsiM_reqFifo_c_r$EN;

  // register app_appW2_wsiM_reqFifo_q_0
  reg [60 : 0] app_appW2_wsiM_reqFifo_q_0;
  reg [60 : 0] app_appW2_wsiM_reqFifo_q_0$D_IN;
  wire app_appW2_wsiM_reqFifo_q_0$EN;

  // register app_appW2_wsiM_reqFifo_q_1
  reg [60 : 0] app_appW2_wsiM_reqFifo_q_1;
  reg [60 : 0] app_appW2_wsiM_reqFifo_q_1$D_IN;
  wire app_appW2_wsiM_reqFifo_q_1$EN;

  // register app_appW2_wsiM_sThreadBusy_d
  reg app_appW2_wsiM_sThreadBusy_d;
  wire app_appW2_wsiM_sThreadBusy_d$D_IN, app_appW2_wsiM_sThreadBusy_d$EN;

  // register app_appW2_wsiM_statusR
  reg [7 : 0] app_appW2_wsiM_statusR;
  wire [7 : 0] app_appW2_wsiM_statusR$D_IN;
  wire app_appW2_wsiM_statusR$EN;

  // register app_appW2_wsiM_tBusyCount
  reg [31 : 0] app_appW2_wsiM_tBusyCount;
  wire [31 : 0] app_appW2_wsiM_tBusyCount$D_IN;
  wire app_appW2_wsiM_tBusyCount$EN;

  // register app_appW2_wsiM_trafficSticky
  reg app_appW2_wsiM_trafficSticky;
  wire app_appW2_wsiM_trafficSticky$D_IN, app_appW2_wsiM_trafficSticky$EN;

  // register app_appW2_wsiS_burstKind
  reg [1 : 0] app_appW2_wsiS_burstKind;
  wire [1 : 0] app_appW2_wsiS_burstKind$D_IN;
  wire app_appW2_wsiS_burstKind$EN;

  // register app_appW2_wsiS_errorSticky
  reg app_appW2_wsiS_errorSticky;
  wire app_appW2_wsiS_errorSticky$D_IN, app_appW2_wsiS_errorSticky$EN;

  // register app_appW2_wsiS_iMesgCount
  reg [31 : 0] app_appW2_wsiS_iMesgCount;
  wire [31 : 0] app_appW2_wsiS_iMesgCount$D_IN;
  wire app_appW2_wsiS_iMesgCount$EN;

  // register app_appW2_wsiS_mesgWordLength
  reg [11 : 0] app_appW2_wsiS_mesgWordLength;
  wire [11 : 0] app_appW2_wsiS_mesgWordLength$D_IN;
  wire app_appW2_wsiS_mesgWordLength$EN;

  // register app_appW2_wsiS_operateD
  reg app_appW2_wsiS_operateD;
  wire app_appW2_wsiS_operateD$D_IN, app_appW2_wsiS_operateD$EN;

  // register app_appW2_wsiS_pMesgCount
  reg [31 : 0] app_appW2_wsiS_pMesgCount;
  wire [31 : 0] app_appW2_wsiS_pMesgCount$D_IN;
  wire app_appW2_wsiS_pMesgCount$EN;

  // register app_appW2_wsiS_peerIsReady
  reg app_appW2_wsiS_peerIsReady;
  wire app_appW2_wsiS_peerIsReady$D_IN, app_appW2_wsiS_peerIsReady$EN;

  // register app_appW2_wsiS_reqFifo_countReg
  reg [1 : 0] app_appW2_wsiS_reqFifo_countReg;
  wire [1 : 0] app_appW2_wsiS_reqFifo_countReg$D_IN;
  wire app_appW2_wsiS_reqFifo_countReg$EN;

  // register app_appW2_wsiS_reqFifo_levelsValid
  reg app_appW2_wsiS_reqFifo_levelsValid;
  wire app_appW2_wsiS_reqFifo_levelsValid$D_IN,
       app_appW2_wsiS_reqFifo_levelsValid$EN;

  // register app_appW2_wsiS_statusR
  reg [7 : 0] app_appW2_wsiS_statusR;
  wire [7 : 0] app_appW2_wsiS_statusR$D_IN;
  wire app_appW2_wsiS_statusR$EN;

  // register app_appW2_wsiS_tBusyCount
  reg [31 : 0] app_appW2_wsiS_tBusyCount;
  wire [31 : 0] app_appW2_wsiS_tBusyCount$D_IN;
  wire app_appW2_wsiS_tBusyCount$EN;

  // register app_appW2_wsiS_trafficSticky
  reg app_appW2_wsiS_trafficSticky;
  wire app_appW2_wsiS_trafficSticky$D_IN, app_appW2_wsiS_trafficSticky$EN;

  // register app_appW2_wsiS_wordCount
  reg [11 : 0] app_appW2_wsiS_wordCount;
  wire [11 : 0] app_appW2_wsiS_wordCount$D_IN;
  wire app_appW2_wsiS_wordCount$EN;

  // register app_appW2_wsiWordsRemain
  reg [11 : 0] app_appW2_wsiWordsRemain;
  wire [11 : 0] app_appW2_wsiWordsRemain$D_IN;
  wire app_appW2_wsiWordsRemain$EN;

  // register app_appW2_zeroLengthMesg
  reg app_appW2_zeroLengthMesg;
  wire app_appW2_zeroLengthMesg$D_IN, app_appW2_zeroLengthMesg$EN;

  // register app_appW3_bytesRead
  reg [31 : 0] app_appW3_bytesRead;
  wire [31 : 0] app_appW3_bytesRead$D_IN;
  wire app_appW3_bytesRead$EN;

  // register app_appW3_bytesThisMessage
  reg [23 : 0] app_appW3_bytesThisMessage;
  wire [23 : 0] app_appW3_bytesThisMessage$D_IN;
  wire app_appW3_bytesThisMessage$EN;

  // register app_appW3_bytesWritten
  reg [31 : 0] app_appW3_bytesWritten;
  wire [31 : 0] app_appW3_bytesWritten$D_IN;
  wire app_appW3_bytesWritten$EN;

  // register app_appW3_cyclesPassed
  reg [31 : 0] app_appW3_cyclesPassed;
  wire [31 : 0] app_appW3_cyclesPassed$D_IN;
  wire app_appW3_cyclesPassed$EN;

  // register app_appW3_dlyCtrl
  reg [31 : 0] app_appW3_dlyCtrl;
  wire [31 : 0] app_appW3_dlyCtrl$D_IN;
  wire app_appW3_dlyCtrl$EN;

  // register app_appW3_dlyHoldoffBytes
  reg [31 : 0] app_appW3_dlyHoldoffBytes;
  wire [31 : 0] app_appW3_dlyHoldoffBytes$D_IN;
  wire app_appW3_dlyHoldoffBytes$EN;

  // register app_appW3_dlyHoldoffCycles
  reg [31 : 0] app_appW3_dlyHoldoffCycles;
  wire [31 : 0] app_appW3_dlyHoldoffCycles$D_IN;
  wire app_appW3_dlyHoldoffCycles$EN;

  // register app_appW3_dlyRAG
  reg [22 : 0] app_appW3_dlyRAG;
  wire [22 : 0] app_appW3_dlyRAG$D_IN;
  wire app_appW3_dlyRAG$EN;

  // register app_appW3_dlyRdOpOther
  reg [31 : 0] app_appW3_dlyRdOpOther;
  wire [31 : 0] app_appW3_dlyRdOpOther$D_IN;
  wire app_appW3_dlyRdOpOther$EN;

  // register app_appW3_dlyRdOpZero
  reg [31 : 0] app_appW3_dlyRdOpZero;
  wire [31 : 0] app_appW3_dlyRdOpZero$D_IN;
  wire app_appW3_dlyRdOpZero$EN;

  // register app_appW3_dlyReadCredit_value
  reg [7 : 0] app_appW3_dlyReadCredit_value;
  wire [7 : 0] app_appW3_dlyReadCredit_value$D_IN;
  wire app_appW3_dlyReadCredit_value$EN;

  // register app_appW3_dlyReadyToWrite_value
  reg [15 : 0] app_appW3_dlyReadyToWrite_value;
  wire [15 : 0] app_appW3_dlyReadyToWrite_value$D_IN;
  wire app_appW3_dlyReadyToWrite_value$EN;

  // register app_appW3_dlyWAG
  reg [22 : 0] app_appW3_dlyWAG;
  wire [22 : 0] app_appW3_dlyWAG$D_IN;
  wire app_appW3_dlyWAG$EN;

  // register app_appW3_dlyWordsStored_value
  reg [24 : 0] app_appW3_dlyWordsStored_value;
  wire [24 : 0] app_appW3_dlyWordsStored_value$D_IN;
  wire app_appW3_dlyWordsStored_value$EN;

  // register app_appW3_mesgLengthSoFar
  reg [13 : 0] app_appW3_mesgLengthSoFar;
  wire [13 : 0] app_appW3_mesgLengthSoFar$D_IN;
  wire app_appW3_mesgLengthSoFar$EN;

  // register app_appW3_mesgRdCount
  reg [31 : 0] app_appW3_mesgRdCount;
  wire [31 : 0] app_appW3_mesgRdCount$D_IN;
  wire app_appW3_mesgRdCount$EN;

  // register app_appW3_mesgWF_rCache
  reg [45 : 0] app_appW3_mesgWF_rCache;
  wire [45 : 0] app_appW3_mesgWF_rCache$D_IN;
  wire app_appW3_mesgWF_rCache$EN;

  // register app_appW3_mesgWF_rRdPtr
  reg [12 : 0] app_appW3_mesgWF_rRdPtr;
  wire [12 : 0] app_appW3_mesgWF_rRdPtr$D_IN;
  wire app_appW3_mesgWF_rRdPtr$EN;

  // register app_appW3_mesgWF_rWrPtr
  reg [12 : 0] app_appW3_mesgWF_rWrPtr;
  wire [12 : 0] app_appW3_mesgWF_rWrPtr$D_IN;
  wire app_appW3_mesgWF_rWrPtr$EN;

  // register app_appW3_mesgWtCount
  reg [31 : 0] app_appW3_mesgWtCount;
  wire [31 : 0] app_appW3_mesgWtCount$D_IN;
  wire app_appW3_mesgWtCount$EN;

  // register app_appW3_rdSerAddr
  reg [31 : 0] app_appW3_rdSerAddr;
  wire [31 : 0] app_appW3_rdSerAddr$D_IN;
  wire app_appW3_rdSerAddr$EN;

  // register app_appW3_rdSerEmpty
  reg app_appW3_rdSerEmpty;
  wire app_appW3_rdSerEmpty$D_IN, app_appW3_rdSerEmpty$EN;

  // register app_appW3_rdSerMeta
  reg [31 : 0] app_appW3_rdSerMeta;
  wire [31 : 0] app_appW3_rdSerMeta$D_IN;
  wire app_appW3_rdSerMeta$EN;

  // register app_appW3_rdSerPos
  reg [1 : 0] app_appW3_rdSerPos;
  wire [1 : 0] app_appW3_rdSerPos$D_IN;
  wire app_appW3_rdSerPos$EN;

  // register app_appW3_rdSerStage
  reg [31 : 0] app_appW3_rdSerStage;
  wire [31 : 0] app_appW3_rdSerStage$D_IN;
  wire app_appW3_rdSerStage$EN;

  // register app_appW3_rdSerStage_1
  reg [31 : 0] app_appW3_rdSerStage_1;
  wire [31 : 0] app_appW3_rdSerStage_1$D_IN;
  wire app_appW3_rdSerStage_1$EN;

  // register app_appW3_rdSerStage_2
  reg [31 : 0] app_appW3_rdSerStage_2;
  wire [31 : 0] app_appW3_rdSerStage_2$D_IN;
  wire app_appW3_rdSerStage_2$EN;

  // register app_appW3_rdSerStage_3
  reg [31 : 0] app_appW3_rdSerStage_3;
  wire [31 : 0] app_appW3_rdSerStage_3$D_IN;
  wire app_appW3_rdSerStage_3$EN;

  // register app_appW3_rdSerUnroll
  reg [15 : 0] app_appW3_rdSerUnroll;
  wire [15 : 0] app_appW3_rdSerUnroll$D_IN;
  wire app_appW3_rdSerUnroll$EN;

  // register app_appW3_rdSyncWord
  reg app_appW3_rdSyncWord;
  reg app_appW3_rdSyncWord$D_IN;
  wire app_appW3_rdSyncWord$EN;

  // register app_appW3_readMeta
  reg [31 : 0] app_appW3_readMeta;
  wire [31 : 0] app_appW3_readMeta$D_IN;
  wire app_appW3_readMeta$EN;

  // register app_appW3_tog50
  reg app_appW3_tog50;
  wire app_appW3_tog50$D_IN, app_appW3_tog50$EN;

  // register app_appW3_unrollCnt
  reg [15 : 0] app_appW3_unrollCnt;
  wire [15 : 0] app_appW3_unrollCnt$D_IN;
  wire app_appW3_unrollCnt$EN;

  // register app_appW3_wci_cEdge
  reg [2 : 0] app_appW3_wci_cEdge;
  wire [2 : 0] app_appW3_wci_cEdge$D_IN;
  wire app_appW3_wci_cEdge$EN;

  // register app_appW3_wci_cState
  reg [2 : 0] app_appW3_wci_cState;
  wire [2 : 0] app_appW3_wci_cState$D_IN;
  wire app_appW3_wci_cState$EN;

  // register app_appW3_wci_ctlAckReg
  reg app_appW3_wci_ctlAckReg;
  wire app_appW3_wci_ctlAckReg$D_IN, app_appW3_wci_ctlAckReg$EN;

  // register app_appW3_wci_ctlOpActive
  reg app_appW3_wci_ctlOpActive;
  wire app_appW3_wci_ctlOpActive$D_IN, app_appW3_wci_ctlOpActive$EN;

  // register app_appW3_wci_illegalEdge
  reg app_appW3_wci_illegalEdge;
  wire app_appW3_wci_illegalEdge$D_IN, app_appW3_wci_illegalEdge$EN;

  // register app_appW3_wci_nState
  reg [2 : 0] app_appW3_wci_nState;
  reg [2 : 0] app_appW3_wci_nState$D_IN;
  wire app_appW3_wci_nState$EN;

  // register app_appW3_wci_reqF_countReg
  reg [1 : 0] app_appW3_wci_reqF_countReg;
  wire [1 : 0] app_appW3_wci_reqF_countReg$D_IN;
  wire app_appW3_wci_reqF_countReg$EN;

  // register app_appW3_wci_respF_c_r
  reg [1 : 0] app_appW3_wci_respF_c_r;
  wire [1 : 0] app_appW3_wci_respF_c_r$D_IN;
  wire app_appW3_wci_respF_c_r$EN;

  // register app_appW3_wci_respF_q_0
  reg [33 : 0] app_appW3_wci_respF_q_0;
  reg [33 : 0] app_appW3_wci_respF_q_0$D_IN;
  wire app_appW3_wci_respF_q_0$EN;

  // register app_appW3_wci_respF_q_1
  reg [33 : 0] app_appW3_wci_respF_q_1;
  reg [33 : 0] app_appW3_wci_respF_q_1$D_IN;
  wire app_appW3_wci_respF_q_1$EN;

  // register app_appW3_wci_sFlagReg
  reg app_appW3_wci_sFlagReg;
  wire app_appW3_wci_sFlagReg$D_IN, app_appW3_wci_sFlagReg$EN;

  // register app_appW3_wci_sThreadBusy_d
  reg app_appW3_wci_sThreadBusy_d;
  wire app_appW3_wci_sThreadBusy_d$D_IN, app_appW3_wci_sThreadBusy_d$EN;

  // register app_appW3_wmemiRdReq
  reg [31 : 0] app_appW3_wmemiRdReq;
  wire [31 : 0] app_appW3_wmemiRdReq$D_IN;
  wire app_appW3_wmemiRdReq$EN;

  // register app_appW3_wmemiRdResp1
  reg [31 : 0] app_appW3_wmemiRdResp1;
  wire [31 : 0] app_appW3_wmemiRdResp1$D_IN;
  wire app_appW3_wmemiRdResp1$EN;

  // register app_appW3_wmemiRdResp2
  reg [31 : 0] app_appW3_wmemiRdResp2;
  wire [31 : 0] app_appW3_wmemiRdResp2$D_IN;
  wire app_appW3_wmemiRdResp2$EN;

  // register app_appW3_wmemiWrReq
  reg [31 : 0] app_appW3_wmemiWrReq;
  wire [31 : 0] app_appW3_wmemiWrReq$D_IN;
  wire app_appW3_wmemiWrReq$EN;

  // register app_appW3_wmemi_busyWithMessage
  reg app_appW3_wmemi_busyWithMessage;
  wire app_appW3_wmemi_busyWithMessage$D_IN,
       app_appW3_wmemi_busyWithMessage$EN;

  // register app_appW3_wmemi_dhF_c_r
  reg [1 : 0] app_appW3_wmemi_dhF_c_r;
  wire [1 : 0] app_appW3_wmemi_dhF_c_r$D_IN;
  wire app_appW3_wmemi_dhF_c_r$EN;

  // register app_appW3_wmemi_dhF_q_0
  reg [145 : 0] app_appW3_wmemi_dhF_q_0;
  reg [145 : 0] app_appW3_wmemi_dhF_q_0$D_IN;
  wire app_appW3_wmemi_dhF_q_0$EN;

  // register app_appW3_wmemi_dhF_q_1
  reg [145 : 0] app_appW3_wmemi_dhF_q_1;
  reg [145 : 0] app_appW3_wmemi_dhF_q_1$D_IN;
  wire app_appW3_wmemi_dhF_q_1$EN;

  // register app_appW3_wmemi_errorSticky
  reg app_appW3_wmemi_errorSticky;
  wire app_appW3_wmemi_errorSticky$D_IN, app_appW3_wmemi_errorSticky$EN;

  // register app_appW3_wmemi_operateD
  reg app_appW3_wmemi_operateD;
  wire app_appW3_wmemi_operateD$D_IN, app_appW3_wmemi_operateD$EN;

  // register app_appW3_wmemi_peerIsReady
  reg app_appW3_wmemi_peerIsReady;
  wire app_appW3_wmemi_peerIsReady$D_IN, app_appW3_wmemi_peerIsReady$EN;

  // register app_appW3_wmemi_reqF_c_r
  reg [1 : 0] app_appW3_wmemi_reqF_c_r;
  wire [1 : 0] app_appW3_wmemi_reqF_c_r$D_IN;
  wire app_appW3_wmemi_reqF_c_r$EN;

  // register app_appW3_wmemi_reqF_q_0
  reg [51 : 0] app_appW3_wmemi_reqF_q_0;
  reg [51 : 0] app_appW3_wmemi_reqF_q_0$D_IN;
  wire app_appW3_wmemi_reqF_q_0$EN;

  // register app_appW3_wmemi_reqF_q_1
  reg [51 : 0] app_appW3_wmemi_reqF_q_1;
  reg [51 : 0] app_appW3_wmemi_reqF_q_1$D_IN;
  wire app_appW3_wmemi_reqF_q_1$EN;

  // register app_appW3_wmemi_statusR
  reg [7 : 0] app_appW3_wmemi_statusR;
  wire [7 : 0] app_appW3_wmemi_statusR$D_IN;
  wire app_appW3_wmemi_statusR$EN;

  // register app_appW3_wmemi_trafficSticky
  reg app_appW3_wmemi_trafficSticky;
  wire app_appW3_wmemi_trafficSticky$D_IN, app_appW3_wmemi_trafficSticky$EN;

  // register app_appW3_wrtSerAddr
  reg [31 : 0] app_appW3_wrtSerAddr;
  wire [31 : 0] app_appW3_wrtSerAddr$D_IN;
  wire app_appW3_wrtSerAddr$EN;

  // register app_appW3_wrtSerPos
  reg [1 : 0] app_appW3_wrtSerPos;
  wire [1 : 0] app_appW3_wrtSerPos$D_IN;
  wire app_appW3_wrtSerPos$EN;

  // register app_appW3_wrtSerStage
  reg [31 : 0] app_appW3_wrtSerStage;
  wire [31 : 0] app_appW3_wrtSerStage$D_IN;
  wire app_appW3_wrtSerStage$EN;

  // register app_appW3_wrtSerStage_1
  reg [31 : 0] app_appW3_wrtSerStage_1;
  wire [31 : 0] app_appW3_wrtSerStage_1$D_IN;
  wire app_appW3_wrtSerStage_1$EN;

  // register app_appW3_wrtSerStage_2
  reg [31 : 0] app_appW3_wrtSerStage_2;
  wire [31 : 0] app_appW3_wrtSerStage_2$D_IN;
  wire app_appW3_wrtSerStage_2$EN;

  // register app_appW3_wrtSerStage_3
  reg [31 : 0] app_appW3_wrtSerStage_3;
  wire [31 : 0] app_appW3_wrtSerStage_3$D_IN;
  wire app_appW3_wrtSerStage_3$EN;

  // register app_appW3_wrtSerUnroll
  reg [15 : 0] app_appW3_wrtSerUnroll;
  wire [15 : 0] app_appW3_wrtSerUnroll$D_IN;
  wire app_appW3_wrtSerUnroll$EN;

  // register app_appW3_wsiM_burstKind
  reg [1 : 0] app_appW3_wsiM_burstKind;
  wire [1 : 0] app_appW3_wsiM_burstKind$D_IN;
  wire app_appW3_wsiM_burstKind$EN;

  // register app_appW3_wsiM_errorSticky
  reg app_appW3_wsiM_errorSticky;
  wire app_appW3_wsiM_errorSticky$D_IN, app_appW3_wsiM_errorSticky$EN;

  // register app_appW3_wsiM_iMesgCount
  reg [31 : 0] app_appW3_wsiM_iMesgCount;
  wire [31 : 0] app_appW3_wsiM_iMesgCount$D_IN;
  wire app_appW3_wsiM_iMesgCount$EN;

  // register app_appW3_wsiM_operateD
  reg app_appW3_wsiM_operateD;
  wire app_appW3_wsiM_operateD$D_IN, app_appW3_wsiM_operateD$EN;

  // register app_appW3_wsiM_pMesgCount
  reg [31 : 0] app_appW3_wsiM_pMesgCount;
  wire [31 : 0] app_appW3_wsiM_pMesgCount$D_IN;
  wire app_appW3_wsiM_pMesgCount$EN;

  // register app_appW3_wsiM_peerIsReady
  reg app_appW3_wsiM_peerIsReady;
  wire app_appW3_wsiM_peerIsReady$D_IN, app_appW3_wsiM_peerIsReady$EN;

  // register app_appW3_wsiM_reqFifo_c_r
  reg [1 : 0] app_appW3_wsiM_reqFifo_c_r;
  wire [1 : 0] app_appW3_wsiM_reqFifo_c_r$D_IN;
  wire app_appW3_wsiM_reqFifo_c_r$EN;

  // register app_appW3_wsiM_reqFifo_q_0
  reg [60 : 0] app_appW3_wsiM_reqFifo_q_0;
  reg [60 : 0] app_appW3_wsiM_reqFifo_q_0$D_IN;
  wire app_appW3_wsiM_reqFifo_q_0$EN;

  // register app_appW3_wsiM_reqFifo_q_1
  reg [60 : 0] app_appW3_wsiM_reqFifo_q_1;
  reg [60 : 0] app_appW3_wsiM_reqFifo_q_1$D_IN;
  wire app_appW3_wsiM_reqFifo_q_1$EN;

  // register app_appW3_wsiM_sThreadBusy_d
  reg app_appW3_wsiM_sThreadBusy_d;
  wire app_appW3_wsiM_sThreadBusy_d$D_IN, app_appW3_wsiM_sThreadBusy_d$EN;

  // register app_appW3_wsiM_statusR
  reg [7 : 0] app_appW3_wsiM_statusR;
  wire [7 : 0] app_appW3_wsiM_statusR$D_IN;
  wire app_appW3_wsiM_statusR$EN;

  // register app_appW3_wsiM_tBusyCount
  reg [31 : 0] app_appW3_wsiM_tBusyCount;
  wire [31 : 0] app_appW3_wsiM_tBusyCount$D_IN;
  wire app_appW3_wsiM_tBusyCount$EN;

  // register app_appW3_wsiM_trafficSticky
  reg app_appW3_wsiM_trafficSticky;
  wire app_appW3_wsiM_trafficSticky$D_IN, app_appW3_wsiM_trafficSticky$EN;

  // register app_appW3_wsiS_burstKind
  reg [1 : 0] app_appW3_wsiS_burstKind;
  wire [1 : 0] app_appW3_wsiS_burstKind$D_IN;
  wire app_appW3_wsiS_burstKind$EN;

  // register app_appW3_wsiS_errorSticky
  reg app_appW3_wsiS_errorSticky;
  wire app_appW3_wsiS_errorSticky$D_IN, app_appW3_wsiS_errorSticky$EN;

  // register app_appW3_wsiS_iMesgCount
  reg [31 : 0] app_appW3_wsiS_iMesgCount;
  wire [31 : 0] app_appW3_wsiS_iMesgCount$D_IN;
  wire app_appW3_wsiS_iMesgCount$EN;

  // register app_appW3_wsiS_mesgWordLength
  reg [11 : 0] app_appW3_wsiS_mesgWordLength;
  wire [11 : 0] app_appW3_wsiS_mesgWordLength$D_IN;
  wire app_appW3_wsiS_mesgWordLength$EN;

  // register app_appW3_wsiS_operateD
  reg app_appW3_wsiS_operateD;
  wire app_appW3_wsiS_operateD$D_IN, app_appW3_wsiS_operateD$EN;

  // register app_appW3_wsiS_pMesgCount
  reg [31 : 0] app_appW3_wsiS_pMesgCount;
  wire [31 : 0] app_appW3_wsiS_pMesgCount$D_IN;
  wire app_appW3_wsiS_pMesgCount$EN;

  // register app_appW3_wsiS_peerIsReady
  reg app_appW3_wsiS_peerIsReady;
  wire app_appW3_wsiS_peerIsReady$D_IN, app_appW3_wsiS_peerIsReady$EN;

  // register app_appW3_wsiS_reqFifo_countReg
  reg [1 : 0] app_appW3_wsiS_reqFifo_countReg;
  wire [1 : 0] app_appW3_wsiS_reqFifo_countReg$D_IN;
  wire app_appW3_wsiS_reqFifo_countReg$EN;

  // register app_appW3_wsiS_reqFifo_levelsValid
  reg app_appW3_wsiS_reqFifo_levelsValid;
  wire app_appW3_wsiS_reqFifo_levelsValid$D_IN,
       app_appW3_wsiS_reqFifo_levelsValid$EN;

  // register app_appW3_wsiS_statusR
  reg [7 : 0] app_appW3_wsiS_statusR;
  wire [7 : 0] app_appW3_wsiS_statusR$D_IN;
  wire app_appW3_wsiS_statusR$EN;

  // register app_appW3_wsiS_tBusyCount
  reg [31 : 0] app_appW3_wsiS_tBusyCount;
  wire [31 : 0] app_appW3_wsiS_tBusyCount$D_IN;
  wire app_appW3_wsiS_tBusyCount$EN;

  // register app_appW3_wsiS_trafficSticky
  reg app_appW3_wsiS_trafficSticky;
  wire app_appW3_wsiS_trafficSticky$D_IN, app_appW3_wsiS_trafficSticky$EN;

  // register app_appW3_wsiS_wordCount
  reg [11 : 0] app_appW3_wsiS_wordCount;
  wire [11 : 0] app_appW3_wsiS_wordCount$D_IN;
  wire app_appW3_wsiS_wordCount$EN;

  // register app_appW4_abortCount
  reg [31 : 0] app_appW4_abortCount;
  wire [31 : 0] app_appW4_abortCount$D_IN;
  wire app_appW4_abortCount$EN;

  // register app_appW4_doAbort
  reg app_appW4_doAbort;
  wire app_appW4_doAbort$D_IN, app_appW4_doAbort$EN;

  // register app_appW4_endOfMessage
  reg app_appW4_endOfMessage;
  wire app_appW4_endOfMessage$D_IN, app_appW4_endOfMessage$EN;

  // register app_appW4_errCount
  reg [31 : 0] app_appW4_errCount;
  wire [31 : 0] app_appW4_errCount$D_IN;
  wire app_appW4_errCount$EN;

  // register app_appW4_fabRespCredit_value
  reg [11 : 0] app_appW4_fabRespCredit_value;
  wire [11 : 0] app_appW4_fabRespCredit_value$D_IN;
  wire app_appW4_fabRespCredit_value$EN;

  // register app_appW4_fabWordsCurReq
  reg [13 : 0] app_appW4_fabWordsCurReq;
  wire [13 : 0] app_appW4_fabWordsCurReq$D_IN;
  wire app_appW4_fabWordsCurReq$EN;

  // register app_appW4_fabWordsRemain
  reg [13 : 0] app_appW4_fabWordsRemain;
  wire [13 : 0] app_appW4_fabWordsRemain$D_IN;
  wire app_appW4_fabWordsRemain$EN;

  // register app_appW4_firstMsgReq
  reg app_appW4_firstMsgReq;
  wire app_appW4_firstMsgReq$D_IN, app_appW4_firstMsgReq$EN;

  // register app_appW4_impreciseBurst
  reg app_appW4_impreciseBurst;
  wire app_appW4_impreciseBurst$D_IN, app_appW4_impreciseBurst$EN;

  // register app_appW4_lastMesg
  reg [31 : 0] app_appW4_lastMesg;
  wire [31 : 0] app_appW4_lastMesg$D_IN;
  wire app_appW4_lastMesg$EN;

  // register app_appW4_mesgCount
  reg [31 : 0] app_appW4_mesgCount;
  reg [31 : 0] app_appW4_mesgCount$D_IN;
  wire app_appW4_mesgCount$EN;

  // register app_appW4_mesgLength
  reg [14 : 0] app_appW4_mesgLength;
  reg [14 : 0] app_appW4_mesgLength$D_IN;
  wire app_appW4_mesgLength$EN;

  // register app_appW4_mesgLengthSoFar
  reg [13 : 0] app_appW4_mesgLengthSoFar;
  wire [13 : 0] app_appW4_mesgLengthSoFar$D_IN;
  wire app_appW4_mesgLengthSoFar$EN;

  // register app_appW4_mesgPreRequest
  reg app_appW4_mesgPreRequest;
  wire app_appW4_mesgPreRequest$D_IN, app_appW4_mesgPreRequest$EN;

  // register app_appW4_mesgReqAddr
  reg [13 : 0] app_appW4_mesgReqAddr;
  wire [13 : 0] app_appW4_mesgReqAddr$D_IN;
  wire app_appW4_mesgReqAddr$EN;

  // register app_appW4_mesgReqOK
  reg app_appW4_mesgReqOK;
  wire app_appW4_mesgReqOK$D_IN, app_appW4_mesgReqOK$EN;

  // register app_appW4_mesgReqValid
  reg app_appW4_mesgReqValid;
  wire app_appW4_mesgReqValid$D_IN, app_appW4_mesgReqValid$EN;

  // register app_appW4_opcode
  reg [8 : 0] app_appW4_opcode;
  wire [8 : 0] app_appW4_opcode$D_IN;
  wire app_appW4_opcode$EN;

  // register app_appW4_preciseBurst
  reg app_appW4_preciseBurst;
  wire app_appW4_preciseBurst$D_IN, app_appW4_preciseBurst$EN;

  // register app_appW4_readyToPush
  reg app_appW4_readyToPush;
  wire app_appW4_readyToPush$D_IN, app_appW4_readyToPush$EN;

  // register app_appW4_readyToRequest
  reg app_appW4_readyToRequest;
  wire app_appW4_readyToRequest$D_IN, app_appW4_readyToRequest$EN;

  // register app_appW4_respF_rCache
  reg [73 : 0] app_appW4_respF_rCache;
  wire [73 : 0] app_appW4_respF_rCache$D_IN;
  wire app_appW4_respF_rCache$EN;

  // register app_appW4_respF_rRdPtr
  reg [11 : 0] app_appW4_respF_rRdPtr;
  wire [11 : 0] app_appW4_respF_rRdPtr$D_IN;
  wire app_appW4_respF_rRdPtr$EN;

  // register app_appW4_respF_rWrPtr
  reg [11 : 0] app_appW4_respF_rWrPtr;
  wire [11 : 0] app_appW4_respF_rWrPtr$D_IN;
  wire app_appW4_respF_rWrPtr$EN;

  // register app_appW4_smaCtrl
  reg [31 : 0] app_appW4_smaCtrl;
  wire [31 : 0] app_appW4_smaCtrl$D_IN;
  wire app_appW4_smaCtrl$EN;

  // register app_appW4_thisMesg
  reg [31 : 0] app_appW4_thisMesg;
  reg [31 : 0] app_appW4_thisMesg$D_IN;
  wire app_appW4_thisMesg$EN;

  // register app_appW4_unrollCnt
  reg [15 : 0] app_appW4_unrollCnt;
  wire [15 : 0] app_appW4_unrollCnt$D_IN;
  wire app_appW4_unrollCnt$EN;

  // register app_appW4_valExpect
  reg [31 : 0] app_appW4_valExpect;
  wire [31 : 0] app_appW4_valExpect$D_IN;
  wire app_appW4_valExpect$EN;

  // register app_appW4_wci_cEdge
  reg [2 : 0] app_appW4_wci_cEdge;
  wire [2 : 0] app_appW4_wci_cEdge$D_IN;
  wire app_appW4_wci_cEdge$EN;

  // register app_appW4_wci_cState
  reg [2 : 0] app_appW4_wci_cState;
  wire [2 : 0] app_appW4_wci_cState$D_IN;
  wire app_appW4_wci_cState$EN;

  // register app_appW4_wci_ctlAckReg
  reg app_appW4_wci_ctlAckReg;
  wire app_appW4_wci_ctlAckReg$D_IN, app_appW4_wci_ctlAckReg$EN;

  // register app_appW4_wci_ctlOpActive
  reg app_appW4_wci_ctlOpActive;
  wire app_appW4_wci_ctlOpActive$D_IN, app_appW4_wci_ctlOpActive$EN;

  // register app_appW4_wci_illegalEdge
  reg app_appW4_wci_illegalEdge;
  wire app_appW4_wci_illegalEdge$D_IN, app_appW4_wci_illegalEdge$EN;

  // register app_appW4_wci_nState
  reg [2 : 0] app_appW4_wci_nState;
  reg [2 : 0] app_appW4_wci_nState$D_IN;
  wire app_appW4_wci_nState$EN;

  // register app_appW4_wci_reqF_countReg
  reg [1 : 0] app_appW4_wci_reqF_countReg;
  wire [1 : 0] app_appW4_wci_reqF_countReg$D_IN;
  wire app_appW4_wci_reqF_countReg$EN;

  // register app_appW4_wci_respF_c_r
  reg [1 : 0] app_appW4_wci_respF_c_r;
  wire [1 : 0] app_appW4_wci_respF_c_r$D_IN;
  wire app_appW4_wci_respF_c_r$EN;

  // register app_appW4_wci_respF_q_0
  reg [33 : 0] app_appW4_wci_respF_q_0;
  reg [33 : 0] app_appW4_wci_respF_q_0$D_IN;
  wire app_appW4_wci_respF_q_0$EN;

  // register app_appW4_wci_respF_q_1
  reg [33 : 0] app_appW4_wci_respF_q_1;
  reg [33 : 0] app_appW4_wci_respF_q_1$D_IN;
  wire app_appW4_wci_respF_q_1$EN;

  // register app_appW4_wci_sFlagReg
  reg app_appW4_wci_sFlagReg;
  wire app_appW4_wci_sFlagReg$D_IN, app_appW4_wci_sFlagReg$EN;

  // register app_appW4_wci_sThreadBusy_d
  reg app_appW4_wci_sThreadBusy_d;
  wire app_appW4_wci_sThreadBusy_d$D_IN, app_appW4_wci_sThreadBusy_d$EN;

  // register app_appW4_wmi_busyWithMessage
  reg app_appW4_wmi_busyWithMessage;
  wire app_appW4_wmi_busyWithMessage$D_IN, app_appW4_wmi_busyWithMessage$EN;

  // register app_appW4_wmi_dhF_c_r
  reg [1 : 0] app_appW4_wmi_dhF_c_r;
  wire [1 : 0] app_appW4_wmi_dhF_c_r$D_IN;
  wire app_appW4_wmi_dhF_c_r$EN;

  // register app_appW4_wmi_dhF_q_0
  reg [37 : 0] app_appW4_wmi_dhF_q_0;
  reg [37 : 0] app_appW4_wmi_dhF_q_0$D_IN;
  wire app_appW4_wmi_dhF_q_0$EN;

  // register app_appW4_wmi_dhF_q_1
  reg [37 : 0] app_appW4_wmi_dhF_q_1;
  reg [37 : 0] app_appW4_wmi_dhF_q_1$D_IN;
  wire app_appW4_wmi_dhF_q_1$EN;

  // register app_appW4_wmi_errorSticky
  reg app_appW4_wmi_errorSticky;
  wire app_appW4_wmi_errorSticky$D_IN, app_appW4_wmi_errorSticky$EN;

  // register app_appW4_wmi_mFlagF_c_r
  reg [1 : 0] app_appW4_wmi_mFlagF_c_r;
  wire [1 : 0] app_appW4_wmi_mFlagF_c_r$D_IN;
  wire app_appW4_wmi_mFlagF_c_r$EN;

  // register app_appW4_wmi_mFlagF_q_0
  reg [31 : 0] app_appW4_wmi_mFlagF_q_0;
  reg [31 : 0] app_appW4_wmi_mFlagF_q_0$D_IN;
  wire app_appW4_wmi_mFlagF_q_0$EN;

  // register app_appW4_wmi_mFlagF_q_1
  reg [31 : 0] app_appW4_wmi_mFlagF_q_1;
  reg [31 : 0] app_appW4_wmi_mFlagF_q_1$D_IN;
  wire app_appW4_wmi_mFlagF_q_1$EN;

  // register app_appW4_wmi_operateD
  reg app_appW4_wmi_operateD;
  wire app_appW4_wmi_operateD$D_IN, app_appW4_wmi_operateD$EN;

  // register app_appW4_wmi_peerIsReady
  reg app_appW4_wmi_peerIsReady;
  wire app_appW4_wmi_peerIsReady$D_IN, app_appW4_wmi_peerIsReady$EN;

  // register app_appW4_wmi_reqF_c_r
  reg [1 : 0] app_appW4_wmi_reqF_c_r;
  wire [1 : 0] app_appW4_wmi_reqF_c_r$D_IN;
  wire app_appW4_wmi_reqF_c_r$EN;

  // register app_appW4_wmi_reqF_q_0
  reg [31 : 0] app_appW4_wmi_reqF_q_0;
  reg [31 : 0] app_appW4_wmi_reqF_q_0$D_IN;
  wire app_appW4_wmi_reqF_q_0$EN;

  // register app_appW4_wmi_reqF_q_1
  reg [31 : 0] app_appW4_wmi_reqF_q_1;
  reg [31 : 0] app_appW4_wmi_reqF_q_1$D_IN;
  wire app_appW4_wmi_reqF_q_1$EN;

  // register app_appW4_wmi_sDataThreadBusy_d
  reg app_appW4_wmi_sDataThreadBusy_d;
  wire app_appW4_wmi_sDataThreadBusy_d$D_IN,
       app_appW4_wmi_sDataThreadBusy_d$EN;

  // register app_appW4_wmi_sFlagReg
  reg [31 : 0] app_appW4_wmi_sFlagReg;
  wire [31 : 0] app_appW4_wmi_sFlagReg$D_IN;
  wire app_appW4_wmi_sFlagReg$EN;

  // register app_appW4_wmi_sThreadBusy_d
  reg app_appW4_wmi_sThreadBusy_d;
  wire app_appW4_wmi_sThreadBusy_d$D_IN, app_appW4_wmi_sThreadBusy_d$EN;

  // register app_appW4_wmi_statusR
  reg [7 : 0] app_appW4_wmi_statusR;
  wire [7 : 0] app_appW4_wmi_statusR$D_IN;
  wire app_appW4_wmi_statusR$EN;

  // register app_appW4_wmi_trafficSticky
  reg app_appW4_wmi_trafficSticky;
  wire app_appW4_wmi_trafficSticky$D_IN, app_appW4_wmi_trafficSticky$EN;

  // register app_appW4_wsiM_burstKind
  reg [1 : 0] app_appW4_wsiM_burstKind;
  wire [1 : 0] app_appW4_wsiM_burstKind$D_IN;
  wire app_appW4_wsiM_burstKind$EN;

  // register app_appW4_wsiM_errorSticky
  reg app_appW4_wsiM_errorSticky;
  wire app_appW4_wsiM_errorSticky$D_IN, app_appW4_wsiM_errorSticky$EN;

  // register app_appW4_wsiM_iMesgCount
  reg [31 : 0] app_appW4_wsiM_iMesgCount;
  wire [31 : 0] app_appW4_wsiM_iMesgCount$D_IN;
  wire app_appW4_wsiM_iMesgCount$EN;

  // register app_appW4_wsiM_operateD
  reg app_appW4_wsiM_operateD;
  wire app_appW4_wsiM_operateD$D_IN, app_appW4_wsiM_operateD$EN;

  // register app_appW4_wsiM_pMesgCount
  reg [31 : 0] app_appW4_wsiM_pMesgCount;
  wire [31 : 0] app_appW4_wsiM_pMesgCount$D_IN;
  wire app_appW4_wsiM_pMesgCount$EN;

  // register app_appW4_wsiM_peerIsReady
  reg app_appW4_wsiM_peerIsReady;
  wire app_appW4_wsiM_peerIsReady$D_IN, app_appW4_wsiM_peerIsReady$EN;

  // register app_appW4_wsiM_reqFifo_c_r
  reg [1 : 0] app_appW4_wsiM_reqFifo_c_r;
  wire [1 : 0] app_appW4_wsiM_reqFifo_c_r$D_IN;
  wire app_appW4_wsiM_reqFifo_c_r$EN;

  // register app_appW4_wsiM_reqFifo_q_0
  reg [60 : 0] app_appW4_wsiM_reqFifo_q_0;
  reg [60 : 0] app_appW4_wsiM_reqFifo_q_0$D_IN;
  wire app_appW4_wsiM_reqFifo_q_0$EN;

  // register app_appW4_wsiM_reqFifo_q_1
  reg [60 : 0] app_appW4_wsiM_reqFifo_q_1;
  reg [60 : 0] app_appW4_wsiM_reqFifo_q_1$D_IN;
  wire app_appW4_wsiM_reqFifo_q_1$EN;

  // register app_appW4_wsiM_sThreadBusy_d
  reg app_appW4_wsiM_sThreadBusy_d;
  wire app_appW4_wsiM_sThreadBusy_d$D_IN, app_appW4_wsiM_sThreadBusy_d$EN;

  // register app_appW4_wsiM_statusR
  reg [7 : 0] app_appW4_wsiM_statusR;
  wire [7 : 0] app_appW4_wsiM_statusR$D_IN;
  wire app_appW4_wsiM_statusR$EN;

  // register app_appW4_wsiM_tBusyCount
  reg [31 : 0] app_appW4_wsiM_tBusyCount;
  wire [31 : 0] app_appW4_wsiM_tBusyCount$D_IN;
  wire app_appW4_wsiM_tBusyCount$EN;

  // register app_appW4_wsiM_trafficSticky
  reg app_appW4_wsiM_trafficSticky;
  wire app_appW4_wsiM_trafficSticky$D_IN, app_appW4_wsiM_trafficSticky$EN;

  // register app_appW4_wsiS_burstKind
  reg [1 : 0] app_appW4_wsiS_burstKind;
  wire [1 : 0] app_appW4_wsiS_burstKind$D_IN;
  wire app_appW4_wsiS_burstKind$EN;

  // register app_appW4_wsiS_errorSticky
  reg app_appW4_wsiS_errorSticky;
  wire app_appW4_wsiS_errorSticky$D_IN, app_appW4_wsiS_errorSticky$EN;

  // register app_appW4_wsiS_iMesgCount
  reg [31 : 0] app_appW4_wsiS_iMesgCount;
  wire [31 : 0] app_appW4_wsiS_iMesgCount$D_IN;
  wire app_appW4_wsiS_iMesgCount$EN;

  // register app_appW4_wsiS_mesgWordLength
  reg [11 : 0] app_appW4_wsiS_mesgWordLength;
  wire [11 : 0] app_appW4_wsiS_mesgWordLength$D_IN;
  wire app_appW4_wsiS_mesgWordLength$EN;

  // register app_appW4_wsiS_operateD
  reg app_appW4_wsiS_operateD;
  wire app_appW4_wsiS_operateD$D_IN, app_appW4_wsiS_operateD$EN;

  // register app_appW4_wsiS_pMesgCount
  reg [31 : 0] app_appW4_wsiS_pMesgCount;
  wire [31 : 0] app_appW4_wsiS_pMesgCount$D_IN;
  wire app_appW4_wsiS_pMesgCount$EN;

  // register app_appW4_wsiS_peerIsReady
  reg app_appW4_wsiS_peerIsReady;
  wire app_appW4_wsiS_peerIsReady$D_IN, app_appW4_wsiS_peerIsReady$EN;

  // register app_appW4_wsiS_reqFifo_countReg
  reg [1 : 0] app_appW4_wsiS_reqFifo_countReg;
  wire [1 : 0] app_appW4_wsiS_reqFifo_countReg$D_IN;
  wire app_appW4_wsiS_reqFifo_countReg$EN;

  // register app_appW4_wsiS_reqFifo_levelsValid
  reg app_appW4_wsiS_reqFifo_levelsValid;
  wire app_appW4_wsiS_reqFifo_levelsValid$D_IN,
       app_appW4_wsiS_reqFifo_levelsValid$EN;

  // register app_appW4_wsiS_statusR
  reg [7 : 0] app_appW4_wsiS_statusR;
  wire [7 : 0] app_appW4_wsiS_statusR$D_IN;
  wire app_appW4_wsiS_statusR$EN;

  // register app_appW4_wsiS_tBusyCount
  reg [31 : 0] app_appW4_wsiS_tBusyCount;
  wire [31 : 0] app_appW4_wsiS_tBusyCount$D_IN;
  wire app_appW4_wsiS_tBusyCount$EN;

  // register app_appW4_wsiS_trafficSticky
  reg app_appW4_wsiS_trafficSticky;
  wire app_appW4_wsiS_trafficSticky$D_IN, app_appW4_wsiS_trafficSticky$EN;

  // register app_appW4_wsiS_wordCount
  reg [11 : 0] app_appW4_wsiS_wordCount;
  wire [11 : 0] app_appW4_wsiS_wordCount$D_IN;
  wire app_appW4_wsiS_wordCount$EN;

  // register app_appW4_wsiWordsRemain
  reg [11 : 0] app_appW4_wsiWordsRemain;
  wire [11 : 0] app_appW4_wsiWordsRemain$D_IN;
  wire app_appW4_wsiWordsRemain$EN;

  // register app_appW4_zeroLengthMesg
  reg app_appW4_zeroLengthMesg;
  wire app_appW4_zeroLengthMesg$D_IN, app_appW4_zeroLengthMesg$EN;

  // register inf_chompCnt
  reg [7 : 0] inf_chompCnt;
  wire [7 : 0] inf_chompCnt$D_IN;
  wire inf_chompCnt$EN;

  // register inf_dp0_bml_crdBuf_modulus
  reg [15 : 0] inf_dp0_bml_crdBuf_modulus;
  wire [15 : 0] inf_dp0_bml_crdBuf_modulus$D_IN;
  wire inf_dp0_bml_crdBuf_modulus$EN;

  // register inf_dp0_bml_crdBuf_value
  reg [15 : 0] inf_dp0_bml_crdBuf_value;
  wire [15 : 0] inf_dp0_bml_crdBuf_value$D_IN;
  wire inf_dp0_bml_crdBuf_value$EN;

  // register inf_dp0_bml_fabAvail
  reg inf_dp0_bml_fabAvail;
  wire inf_dp0_bml_fabAvail$D_IN, inf_dp0_bml_fabAvail$EN;

  // register inf_dp0_bml_fabBuf_modulus
  reg [15 : 0] inf_dp0_bml_fabBuf_modulus;
  wire [15 : 0] inf_dp0_bml_fabBuf_modulus$D_IN;
  wire inf_dp0_bml_fabBuf_modulus$EN;

  // register inf_dp0_bml_fabBuf_value
  reg [15 : 0] inf_dp0_bml_fabBuf_value;
  wire [15 : 0] inf_dp0_bml_fabBuf_value$D_IN;
  wire inf_dp0_bml_fabBuf_value$EN;

  // register inf_dp0_bml_fabBufsAvail
  reg [15 : 0] inf_dp0_bml_fabBufsAvail;
  wire [15 : 0] inf_dp0_bml_fabBufsAvail$D_IN;
  wire inf_dp0_bml_fabBufsAvail$EN;

  // register inf_dp0_bml_fabDone
  reg inf_dp0_bml_fabDone;
  wire inf_dp0_bml_fabDone$D_IN, inf_dp0_bml_fabDone$EN;

  // register inf_dp0_bml_fabFlowAddr
  reg [31 : 0] inf_dp0_bml_fabFlowAddr;
  reg [31 : 0] inf_dp0_bml_fabFlowAddr$D_IN;
  wire inf_dp0_bml_fabFlowAddr$EN;

  // register inf_dp0_bml_fabFlowBase
  reg [31 : 0] inf_dp0_bml_fabFlowBase;
  wire [31 : 0] inf_dp0_bml_fabFlowBase$D_IN;
  wire inf_dp0_bml_fabFlowBase$EN;

  // register inf_dp0_bml_fabFlowSize
  reg [31 : 0] inf_dp0_bml_fabFlowSize;
  wire [31 : 0] inf_dp0_bml_fabFlowSize$D_IN;
  wire inf_dp0_bml_fabFlowSize$EN;

  // register inf_dp0_bml_fabMesgAddr
  reg [31 : 0] inf_dp0_bml_fabMesgAddr;
  wire [31 : 0] inf_dp0_bml_fabMesgAddr$D_IN;
  wire inf_dp0_bml_fabMesgAddr$EN;

  // register inf_dp0_bml_fabMesgBase
  reg [31 : 0] inf_dp0_bml_fabMesgBase;
  wire [31 : 0] inf_dp0_bml_fabMesgBase$D_IN;
  wire inf_dp0_bml_fabMesgBase$EN;

  // register inf_dp0_bml_fabMesgSize
  reg [31 : 0] inf_dp0_bml_fabMesgSize;
  wire [31 : 0] inf_dp0_bml_fabMesgSize$D_IN;
  wire inf_dp0_bml_fabMesgSize$EN;

  // register inf_dp0_bml_fabMetaAddr
  reg [31 : 0] inf_dp0_bml_fabMetaAddr;
  wire [31 : 0] inf_dp0_bml_fabMetaAddr$D_IN;
  wire inf_dp0_bml_fabMetaAddr$EN;

  // register inf_dp0_bml_fabMetaBase
  reg [31 : 0] inf_dp0_bml_fabMetaBase;
  wire [31 : 0] inf_dp0_bml_fabMetaBase$D_IN;
  wire inf_dp0_bml_fabMetaBase$EN;

  // register inf_dp0_bml_fabMetaSize
  reg [31 : 0] inf_dp0_bml_fabMetaSize;
  wire [31 : 0] inf_dp0_bml_fabMetaSize$D_IN;
  wire inf_dp0_bml_fabMetaSize$EN;

  // register inf_dp0_bml_fabNumBufs
  reg [15 : 0] inf_dp0_bml_fabNumBufs;
  wire [15 : 0] inf_dp0_bml_fabNumBufs$D_IN;
  wire inf_dp0_bml_fabNumBufs$EN;

  // register inf_dp0_bml_lclBufDone
  reg inf_dp0_bml_lclBufDone;
  wire inf_dp0_bml_lclBufDone$D_IN, inf_dp0_bml_lclBufDone$EN;

  // register inf_dp0_bml_lclBufStart
  reg inf_dp0_bml_lclBufStart;
  wire inf_dp0_bml_lclBufStart$D_IN, inf_dp0_bml_lclBufStart$EN;

  // register inf_dp0_bml_lclBuf_modulus
  reg [15 : 0] inf_dp0_bml_lclBuf_modulus;
  wire [15 : 0] inf_dp0_bml_lclBuf_modulus$D_IN;
  wire inf_dp0_bml_lclBuf_modulus$EN;

  // register inf_dp0_bml_lclBuf_value
  reg [15 : 0] inf_dp0_bml_lclBuf_value;
  wire [15 : 0] inf_dp0_bml_lclBuf_value$D_IN;
  wire inf_dp0_bml_lclBuf_value$EN;

  // register inf_dp0_bml_lclBufsAR
  reg [15 : 0] inf_dp0_bml_lclBufsAR;
  wire [15 : 0] inf_dp0_bml_lclBufsAR$D_IN;
  wire inf_dp0_bml_lclBufsAR$EN;

  // register inf_dp0_bml_lclBufsCF
  reg [15 : 0] inf_dp0_bml_lclBufsCF;
  wire [15 : 0] inf_dp0_bml_lclBufsCF$D_IN;
  wire inf_dp0_bml_lclBufsCF$EN;

  // register inf_dp0_bml_lclCredit
  reg [15 : 0] inf_dp0_bml_lclCredit;
  wire [15 : 0] inf_dp0_bml_lclCredit$D_IN;
  wire inf_dp0_bml_lclCredit$EN;

  // register inf_dp0_bml_lclDones
  reg [15 : 0] inf_dp0_bml_lclDones;
  wire [15 : 0] inf_dp0_bml_lclDones$D_IN;
  wire inf_dp0_bml_lclDones$EN;

  // register inf_dp0_bml_lclMesgAddr
  reg [15 : 0] inf_dp0_bml_lclMesgAddr;
  wire [15 : 0] inf_dp0_bml_lclMesgAddr$D_IN;
  wire inf_dp0_bml_lclMesgAddr$EN;

  // register inf_dp0_bml_lclMetaAddr
  reg [15 : 0] inf_dp0_bml_lclMetaAddr;
  wire [15 : 0] inf_dp0_bml_lclMetaAddr$D_IN;
  wire inf_dp0_bml_lclMetaAddr$EN;

  // register inf_dp0_bml_lclNumBufs
  reg [15 : 0] inf_dp0_bml_lclNumBufs;
  wire [15 : 0] inf_dp0_bml_lclNumBufs$D_IN;
  wire inf_dp0_bml_lclNumBufs$EN;

  // register inf_dp0_bml_lclStarts
  reg [15 : 0] inf_dp0_bml_lclStarts;
  wire [15 : 0] inf_dp0_bml_lclStarts$D_IN;
  wire inf_dp0_bml_lclStarts$EN;

  // register inf_dp0_bml_mesgBase
  reg [15 : 0] inf_dp0_bml_mesgBase;
  wire [15 : 0] inf_dp0_bml_mesgBase$D_IN;
  wire inf_dp0_bml_mesgBase$EN;

  // register inf_dp0_bml_mesgSize
  reg [15 : 0] inf_dp0_bml_mesgSize;
  wire [15 : 0] inf_dp0_bml_mesgSize$D_IN;
  wire inf_dp0_bml_mesgSize$EN;

  // register inf_dp0_bml_metaBase
  reg [15 : 0] inf_dp0_bml_metaBase;
  wire [15 : 0] inf_dp0_bml_metaBase$D_IN;
  wire inf_dp0_bml_metaBase$EN;

  // register inf_dp0_bml_metaSize
  reg [15 : 0] inf_dp0_bml_metaSize;
  wire [15 : 0] inf_dp0_bml_metaSize$D_IN;
  wire inf_dp0_bml_metaSize$EN;

  // register inf_dp0_bml_remBuf_modulus
  reg [15 : 0] inf_dp0_bml_remBuf_modulus;
  wire [15 : 0] inf_dp0_bml_remBuf_modulus$D_IN;
  wire inf_dp0_bml_remBuf_modulus$EN;

  // register inf_dp0_bml_remBuf_value
  reg [15 : 0] inf_dp0_bml_remBuf_value;
  wire [15 : 0] inf_dp0_bml_remBuf_value$D_IN;
  wire inf_dp0_bml_remBuf_value$EN;

  // register inf_dp0_bml_remDone
  reg inf_dp0_bml_remDone;
  wire inf_dp0_bml_remDone$D_IN, inf_dp0_bml_remDone$EN;

  // register inf_dp0_bml_remDones
  reg [15 : 0] inf_dp0_bml_remDones;
  wire [15 : 0] inf_dp0_bml_remDones$D_IN;
  wire inf_dp0_bml_remDones$EN;

  // register inf_dp0_bml_remMesgAddr
  reg [15 : 0] inf_dp0_bml_remMesgAddr;
  wire [15 : 0] inf_dp0_bml_remMesgAddr$D_IN;
  wire inf_dp0_bml_remMesgAddr$EN;

  // register inf_dp0_bml_remMetaAddr
  reg [15 : 0] inf_dp0_bml_remMetaAddr;
  wire [15 : 0] inf_dp0_bml_remMetaAddr$D_IN;
  wire inf_dp0_bml_remMetaAddr$EN;

  // register inf_dp0_bml_remStart
  reg inf_dp0_bml_remStart;
  wire inf_dp0_bml_remStart$D_IN, inf_dp0_bml_remStart$EN;

  // register inf_dp0_bml_remStarts
  reg [15 : 0] inf_dp0_bml_remStarts;
  wire [15 : 0] inf_dp0_bml_remStarts$D_IN;
  wire inf_dp0_bml_remStarts$EN;

  // register inf_dp0_bram_serverAdapterA_1_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterA_1_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterA_1_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterA_1_cnt$EN;

  // register inf_dp0_bram_serverAdapterA_1_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterA_1_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterA_1_s1$D_IN;
  wire inf_dp0_bram_serverAdapterA_1_s1$EN;

  // register inf_dp0_bram_serverAdapterA_2_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterA_2_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterA_2_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterA_2_cnt$EN;

  // register inf_dp0_bram_serverAdapterA_2_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterA_2_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterA_2_s1$D_IN;
  wire inf_dp0_bram_serverAdapterA_2_s1$EN;

  // register inf_dp0_bram_serverAdapterA_3_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterA_3_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterA_3_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterA_3_cnt$EN;

  // register inf_dp0_bram_serverAdapterA_3_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterA_3_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterA_3_s1$D_IN;
  wire inf_dp0_bram_serverAdapterA_3_s1$EN;

  // register inf_dp0_bram_serverAdapterA_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterA_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterA_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterA_cnt$EN;

  // register inf_dp0_bram_serverAdapterA_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterA_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterA_s1$D_IN;
  wire inf_dp0_bram_serverAdapterA_s1$EN;

  // register inf_dp0_bram_serverAdapterB_1_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterB_1_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterB_1_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterB_1_cnt$EN;

  // register inf_dp0_bram_serverAdapterB_1_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterB_1_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterB_1_s1$D_IN;
  wire inf_dp0_bram_serverAdapterB_1_s1$EN;

  // register inf_dp0_bram_serverAdapterB_2_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterB_2_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterB_2_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterB_2_cnt$EN;

  // register inf_dp0_bram_serverAdapterB_2_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterB_2_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterB_2_s1$D_IN;
  wire inf_dp0_bram_serverAdapterB_2_s1$EN;

  // register inf_dp0_bram_serverAdapterB_3_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterB_3_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterB_3_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterB_3_cnt$EN;

  // register inf_dp0_bram_serverAdapterB_3_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterB_3_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterB_3_s1$D_IN;
  wire inf_dp0_bram_serverAdapterB_3_s1$EN;

  // register inf_dp0_bram_serverAdapterB_cnt
  reg [2 : 0] inf_dp0_bram_serverAdapterB_cnt;
  wire [2 : 0] inf_dp0_bram_serverAdapterB_cnt$D_IN;
  wire inf_dp0_bram_serverAdapterB_cnt$EN;

  // register inf_dp0_bram_serverAdapterB_s1
  reg [1 : 0] inf_dp0_bram_serverAdapterB_s1;
  wire [1 : 0] inf_dp0_bram_serverAdapterB_s1$D_IN;
  wire inf_dp0_bram_serverAdapterB_s1$EN;

  // register inf_dp0_dpControl
  reg [3 : 0] inf_dp0_dpControl;
  wire [3 : 0] inf_dp0_dpControl$D_IN;
  wire inf_dp0_dpControl$EN;

  // register inf_dp0_tlp_creditReady
  reg inf_dp0_tlp_creditReady;
  wire inf_dp0_tlp_creditReady$D_IN, inf_dp0_tlp_creditReady$EN;

  // register inf_dp0_tlp_debugBdata
  reg [127 : 0] inf_dp0_tlp_debugBdata;
  wire [127 : 0] inf_dp0_tlp_debugBdata$D_IN;
  wire inf_dp0_tlp_debugBdata$EN;

  // register inf_dp0_tlp_dmaDoTailEvent
  reg inf_dp0_tlp_dmaDoTailEvent;
  reg inf_dp0_tlp_dmaDoTailEvent$D_IN;
  wire inf_dp0_tlp_dmaDoTailEvent$EN;

  // register inf_dp0_tlp_dmaPullRemainDWLen
  reg [9 : 0] inf_dp0_tlp_dmaPullRemainDWLen;
  reg [9 : 0] inf_dp0_tlp_dmaPullRemainDWLen$D_IN;
  wire inf_dp0_tlp_dmaPullRemainDWLen$EN;

  // register inf_dp0_tlp_dmaPullRemainDWSub
  reg [9 : 0] inf_dp0_tlp_dmaPullRemainDWSub;
  wire [9 : 0] inf_dp0_tlp_dmaPullRemainDWSub$D_IN;
  wire inf_dp0_tlp_dmaPullRemainDWSub$EN;

  // register inf_dp0_tlp_dmaReqTag
  reg [4 : 0] inf_dp0_tlp_dmaReqTag;
  wire [4 : 0] inf_dp0_tlp_dmaReqTag$D_IN;
  wire inf_dp0_tlp_dmaReqTag$EN;

  // register inf_dp0_tlp_dmaTag
  reg [4 : 0] inf_dp0_tlp_dmaTag;
  wire [4 : 0] inf_dp0_tlp_dmaTag$D_IN;
  wire inf_dp0_tlp_dmaTag$EN;

  // register inf_dp0_tlp_doXmtMetaBody
  reg inf_dp0_tlp_doXmtMetaBody;
  wire inf_dp0_tlp_doXmtMetaBody$D_IN, inf_dp0_tlp_doXmtMetaBody$EN;

  // register inf_dp0_tlp_fabFlowAddr
  reg [31 : 0] inf_dp0_tlp_fabFlowAddr;
  wire [31 : 0] inf_dp0_tlp_fabFlowAddr$D_IN;
  wire inf_dp0_tlp_fabFlowAddr$EN;

  // register inf_dp0_tlp_fabMesgAccu
  reg [31 : 0] inf_dp0_tlp_fabMesgAccu;
  reg [31 : 0] inf_dp0_tlp_fabMesgAccu$D_IN;
  wire inf_dp0_tlp_fabMesgAccu$EN;

  // register inf_dp0_tlp_fabMesgAddr
  reg [31 : 0] inf_dp0_tlp_fabMesgAddr;
  wire [31 : 0] inf_dp0_tlp_fabMesgAddr$D_IN;
  wire inf_dp0_tlp_fabMesgAddr$EN;

  // register inf_dp0_tlp_fabMeta
  reg [128 : 0] inf_dp0_tlp_fabMeta;
  reg [128 : 0] inf_dp0_tlp_fabMeta$D_IN;
  wire inf_dp0_tlp_fabMeta$EN;

  // register inf_dp0_tlp_fabMetaAddr
  reg [31 : 0] inf_dp0_tlp_fabMetaAddr;
  wire [31 : 0] inf_dp0_tlp_fabMetaAddr$D_IN;
  wire inf_dp0_tlp_fabMetaAddr$EN;

  // register inf_dp0_tlp_farBufReady
  reg inf_dp0_tlp_farBufReady;
  wire inf_dp0_tlp_farBufReady$D_IN, inf_dp0_tlp_farBufReady$EN;

  // register inf_dp0_tlp_flowDiagCount
  reg [31 : 0] inf_dp0_tlp_flowDiagCount;
  wire [31 : 0] inf_dp0_tlp_flowDiagCount$D_IN;
  wire inf_dp0_tlp_flowDiagCount$EN;

  // register inf_dp0_tlp_gotResponseHeader
  reg inf_dp0_tlp_gotResponseHeader;
  reg inf_dp0_tlp_gotResponseHeader$D_IN;
  wire inf_dp0_tlp_gotResponseHeader$EN;

  // register inf_dp0_tlp_inIgnorePkt
  reg inf_dp0_tlp_inIgnorePkt;
  wire inf_dp0_tlp_inIgnorePkt$D_IN, inf_dp0_tlp_inIgnorePkt$EN;

  // register inf_dp0_tlp_maxPayloadSize
  reg [12 : 0] inf_dp0_tlp_maxPayloadSize;
  wire [12 : 0] inf_dp0_tlp_maxPayloadSize$D_IN;
  wire inf_dp0_tlp_maxPayloadSize$EN;

  // register inf_dp0_tlp_maxReadReqSize
  reg [12 : 0] inf_dp0_tlp_maxReadReqSize;
  wire [12 : 0] inf_dp0_tlp_maxReadReqSize$D_IN;
  wire inf_dp0_tlp_maxReadReqSize$EN;

  // register inf_dp0_tlp_mesgComplReceived
  reg [16 : 0] inf_dp0_tlp_mesgComplReceived;
  reg [16 : 0] inf_dp0_tlp_mesgComplReceived$D_IN;
  wire inf_dp0_tlp_mesgComplReceived$EN;

  // register inf_dp0_tlp_mesgLengthRemainPull
  reg [16 : 0] inf_dp0_tlp_mesgLengthRemainPull;
  wire [16 : 0] inf_dp0_tlp_mesgLengthRemainPull$D_IN;
  wire inf_dp0_tlp_mesgLengthRemainPull$EN;

  // register inf_dp0_tlp_mesgLengthRemainPush
  reg [16 : 0] inf_dp0_tlp_mesgLengthRemainPush;
  wire [16 : 0] inf_dp0_tlp_mesgLengthRemainPush$D_IN;
  wire inf_dp0_tlp_mesgLengthRemainPush$EN;

  // register inf_dp0_tlp_nearBufReady
  reg inf_dp0_tlp_nearBufReady;
  wire inf_dp0_tlp_nearBufReady$D_IN, inf_dp0_tlp_nearBufReady$EN;

  // register inf_dp0_tlp_outDwRemain
  reg [9 : 0] inf_dp0_tlp_outDwRemain;
  wire [9 : 0] inf_dp0_tlp_outDwRemain$D_IN;
  wire inf_dp0_tlp_outDwRemain$EN;

  // register inf_dp0_tlp_postSeqDwell
  reg [3 : 0] inf_dp0_tlp_postSeqDwell;
  wire [3 : 0] inf_dp0_tlp_postSeqDwell$D_IN;
  wire inf_dp0_tlp_postSeqDwell$EN;

  // register inf_dp0_tlp_pullTagMatch
  reg inf_dp0_tlp_pullTagMatch;
  wire inf_dp0_tlp_pullTagMatch$D_IN, inf_dp0_tlp_pullTagMatch$EN;

  // register inf_dp0_tlp_rdRespDwRemain
  reg [9 : 0] inf_dp0_tlp_rdRespDwRemain;
  wire [9 : 0] inf_dp0_tlp_rdRespDwRemain$D_IN;
  wire inf_dp0_tlp_rdRespDwRemain$EN;

  // register inf_dp0_tlp_readHeaderSent
  reg inf_dp0_tlp_readHeaderSent;
  wire inf_dp0_tlp_readHeaderSent$D_IN, inf_dp0_tlp_readHeaderSent$EN;

  // register inf_dp0_tlp_readNxtDWAddr
  reg [12 : 0] inf_dp0_tlp_readNxtDWAddr;
  wire [12 : 0] inf_dp0_tlp_readNxtDWAddr$D_IN;
  wire inf_dp0_tlp_readNxtDWAddr$EN;

  // register inf_dp0_tlp_readRemainDWLen
  reg [9 : 0] inf_dp0_tlp_readRemainDWLen;
  wire [9 : 0] inf_dp0_tlp_readRemainDWLen$D_IN;
  wire inf_dp0_tlp_readRemainDWLen$EN;

  // register inf_dp0_tlp_readStarted
  reg inf_dp0_tlp_readStarted;
  wire inf_dp0_tlp_readStarted$D_IN, inf_dp0_tlp_readStarted$EN;

  // register inf_dp0_tlp_remDone
  reg inf_dp0_tlp_remDone;
  wire inf_dp0_tlp_remDone$D_IN, inf_dp0_tlp_remDone$EN;

  // register inf_dp0_tlp_remMesgAccu
  reg [15 : 0] inf_dp0_tlp_remMesgAccu;
  reg [15 : 0] inf_dp0_tlp_remMesgAccu$D_IN;
  wire inf_dp0_tlp_remMesgAccu$EN;

  // register inf_dp0_tlp_remMesgAddr
  reg [15 : 0] inf_dp0_tlp_remMesgAddr;
  wire [15 : 0] inf_dp0_tlp_remMesgAddr$D_IN;
  wire inf_dp0_tlp_remMesgAddr$EN;

  // register inf_dp0_tlp_remMetaAddr
  reg [15 : 0] inf_dp0_tlp_remMetaAddr;
  wire [15 : 0] inf_dp0_tlp_remMetaAddr$D_IN;
  wire inf_dp0_tlp_remMetaAddr$EN;

  // register inf_dp0_tlp_remStart
  reg inf_dp0_tlp_remStart;
  wire inf_dp0_tlp_remStart$D_IN, inf_dp0_tlp_remStart$EN;

  // register inf_dp0_tlp_reqMesgInFlight
  reg inf_dp0_tlp_reqMesgInFlight;
  reg inf_dp0_tlp_reqMesgInFlight$D_IN;
  wire inf_dp0_tlp_reqMesgInFlight$EN;

  // register inf_dp0_tlp_reqMetaBodyInFlight
  reg inf_dp0_tlp_reqMetaBodyInFlight;
  wire inf_dp0_tlp_reqMetaBodyInFlight$D_IN,
       inf_dp0_tlp_reqMetaBodyInFlight$EN;

  // register inf_dp0_tlp_reqMetaInFlight
  reg inf_dp0_tlp_reqMetaInFlight;
  reg inf_dp0_tlp_reqMetaInFlight$D_IN;
  wire inf_dp0_tlp_reqMetaInFlight$EN;

  // register inf_dp0_tlp_srcMesgAccu
  reg [31 : 0] inf_dp0_tlp_srcMesgAccu;
  wire [31 : 0] inf_dp0_tlp_srcMesgAccu$D_IN;
  wire inf_dp0_tlp_srcMesgAccu$EN;

  // register inf_dp0_tlp_tlpMetaSent
  reg inf_dp0_tlp_tlpMetaSent;
  wire inf_dp0_tlp_tlpMetaSent$D_IN, inf_dp0_tlp_tlpMetaSent$EN;

  // register inf_dp0_tlp_tlpRcvBusy
  reg inf_dp0_tlp_tlpRcvBusy;
  reg inf_dp0_tlp_tlpRcvBusy$D_IN;
  wire inf_dp0_tlp_tlpRcvBusy$EN;

  // register inf_dp0_tlp_tlpXmtBusy
  reg inf_dp0_tlp_tlpXmtBusy;
  reg inf_dp0_tlp_tlpXmtBusy$D_IN;
  wire inf_dp0_tlp_tlpXmtBusy$EN;

  // register inf_dp0_tlp_writeDWAddr
  reg [12 : 0] inf_dp0_tlp_writeDWAddr;
  wire [12 : 0] inf_dp0_tlp_writeDWAddr$D_IN;
  wire inf_dp0_tlp_writeDWAddr$EN;

  // register inf_dp0_tlp_writeLastBE
  reg [3 : 0] inf_dp0_tlp_writeLastBE;
  wire [3 : 0] inf_dp0_tlp_writeLastBE$D_IN;
  wire inf_dp0_tlp_writeLastBE$EN;

  // register inf_dp0_tlp_writeRemainDWLen
  reg [9 : 0] inf_dp0_tlp_writeRemainDWLen;
  wire [9 : 0] inf_dp0_tlp_writeRemainDWLen$D_IN;
  wire inf_dp0_tlp_writeRemainDWLen$EN;

  // register inf_dp0_tlp_xmtMetaInFlight
  reg inf_dp0_tlp_xmtMetaInFlight;
  wire inf_dp0_tlp_xmtMetaInFlight$D_IN, inf_dp0_tlp_xmtMetaInFlight$EN;

  // register inf_dp0_tlp_xmtMetaOK
  reg inf_dp0_tlp_xmtMetaOK;
  reg inf_dp0_tlp_xmtMetaOK$D_IN;
  wire inf_dp0_tlp_xmtMetaOK$EN;

  // register inf_dp0_wci_cEdge
  reg [2 : 0] inf_dp0_wci_cEdge;
  wire [2 : 0] inf_dp0_wci_cEdge$D_IN;
  wire inf_dp0_wci_cEdge$EN;

  // register inf_dp0_wci_cState
  reg [2 : 0] inf_dp0_wci_cState;
  wire [2 : 0] inf_dp0_wci_cState$D_IN;
  wire inf_dp0_wci_cState$EN;

  // register inf_dp0_wci_ctlAckReg
  reg inf_dp0_wci_ctlAckReg;
  wire inf_dp0_wci_ctlAckReg$D_IN, inf_dp0_wci_ctlAckReg$EN;

  // register inf_dp0_wci_ctlOpActive
  reg inf_dp0_wci_ctlOpActive;
  wire inf_dp0_wci_ctlOpActive$D_IN, inf_dp0_wci_ctlOpActive$EN;

  // register inf_dp0_wci_illegalEdge
  reg inf_dp0_wci_illegalEdge;
  wire inf_dp0_wci_illegalEdge$D_IN, inf_dp0_wci_illegalEdge$EN;

  // register inf_dp0_wci_nState
  reg [2 : 0] inf_dp0_wci_nState;
  reg [2 : 0] inf_dp0_wci_nState$D_IN;
  wire inf_dp0_wci_nState$EN;

  // register inf_dp0_wci_reqF_countReg
  reg [1 : 0] inf_dp0_wci_reqF_countReg;
  wire [1 : 0] inf_dp0_wci_reqF_countReg$D_IN;
  wire inf_dp0_wci_reqF_countReg$EN;

  // register inf_dp0_wci_respF_c_r
  reg [1 : 0] inf_dp0_wci_respF_c_r;
  wire [1 : 0] inf_dp0_wci_respF_c_r$D_IN;
  wire inf_dp0_wci_respF_c_r$EN;

  // register inf_dp0_wci_respF_q_0
  reg [33 : 0] inf_dp0_wci_respF_q_0;
  reg [33 : 0] inf_dp0_wci_respF_q_0$D_IN;
  wire inf_dp0_wci_respF_q_0$EN;

  // register inf_dp0_wci_respF_q_1
  reg [33 : 0] inf_dp0_wci_respF_q_1;
  reg [33 : 0] inf_dp0_wci_respF_q_1$D_IN;
  wire inf_dp0_wci_respF_q_1$EN;

  // register inf_dp0_wci_sFlagReg
  reg inf_dp0_wci_sFlagReg;
  wire inf_dp0_wci_sFlagReg$D_IN, inf_dp0_wci_sFlagReg$EN;

  // register inf_dp0_wci_sThreadBusy_d
  reg inf_dp0_wci_sThreadBusy_d;
  wire inf_dp0_wci_sThreadBusy_d$D_IN, inf_dp0_wci_sThreadBusy_d$EN;

  // register inf_dp0_wmi_addr
  reg [13 : 0] inf_dp0_wmi_addr;
  wire [13 : 0] inf_dp0_wmi_addr$D_IN;
  wire inf_dp0_wmi_addr$EN;

  // register inf_dp0_wmi_bufDwell
  reg [1 : 0] inf_dp0_wmi_bufDwell;
  wire [1 : 0] inf_dp0_wmi_bufDwell$D_IN;
  wire inf_dp0_wmi_bufDwell$EN;

  // register inf_dp0_wmi_bytesRemainReq
  reg [13 : 0] inf_dp0_wmi_bytesRemainReq;
  wire [13 : 0] inf_dp0_wmi_bytesRemainReq$D_IN;
  wire inf_dp0_wmi_bytesRemainReq$EN;

  // register inf_dp0_wmi_bytesRemainResp
  reg [13 : 0] inf_dp0_wmi_bytesRemainResp;
  wire [13 : 0] inf_dp0_wmi_bytesRemainResp$D_IN;
  wire inf_dp0_wmi_bytesRemainResp$EN;

  // register inf_dp0_wmi_doneWithMesg
  reg inf_dp0_wmi_doneWithMesg;
  wire inf_dp0_wmi_doneWithMesg$D_IN, inf_dp0_wmi_doneWithMesg$EN;

  // register inf_dp0_wmi_lastMesg
  reg [31 : 0] inf_dp0_wmi_lastMesg;
  wire [31 : 0] inf_dp0_wmi_lastMesg$D_IN;
  wire inf_dp0_wmi_lastMesg$EN;

  // register inf_dp0_wmi_lclMesgAddr
  reg [14 : 0] inf_dp0_wmi_lclMesgAddr;
  wire [14 : 0] inf_dp0_wmi_lclMesgAddr$D_IN;
  wire inf_dp0_wmi_lclMesgAddr$EN;

  // register inf_dp0_wmi_lclMetaAddr
  reg [14 : 0] inf_dp0_wmi_lclMetaAddr;
  wire [14 : 0] inf_dp0_wmi_lclMetaAddr$D_IN;
  wire inf_dp0_wmi_lclMetaAddr$EN;

  // register inf_dp0_wmi_mesgBufReady
  reg inf_dp0_wmi_mesgBufReady;
  wire inf_dp0_wmi_mesgBufReady$D_IN, inf_dp0_wmi_mesgBufReady$EN;

  // register inf_dp0_wmi_mesgBusy
  reg inf_dp0_wmi_mesgBusy;
  wire inf_dp0_wmi_mesgBusy$D_IN, inf_dp0_wmi_mesgBusy$EN;

  // register inf_dp0_wmi_mesgCount
  reg [31 : 0] inf_dp0_wmi_mesgCount;
  wire [31 : 0] inf_dp0_wmi_mesgCount$D_IN;
  wire inf_dp0_wmi_mesgCount$EN;

  // register inf_dp0_wmi_mesgDone
  reg inf_dp0_wmi_mesgDone;
  wire inf_dp0_wmi_mesgDone$D_IN, inf_dp0_wmi_mesgDone$EN;

  // register inf_dp0_wmi_mesgMeta
  reg [128 : 0] inf_dp0_wmi_mesgMeta;
  wire [128 : 0] inf_dp0_wmi_mesgMeta$D_IN;
  wire inf_dp0_wmi_mesgMeta$EN;

  // register inf_dp0_wmi_mesgStart
  reg inf_dp0_wmi_mesgStart;
  wire inf_dp0_wmi_mesgStart$D_IN, inf_dp0_wmi_mesgStart$EN;

  // register inf_dp0_wmi_metaBusy
  reg inf_dp0_wmi_metaBusy;
  wire inf_dp0_wmi_metaBusy$D_IN, inf_dp0_wmi_metaBusy$EN;

  // register inf_dp0_wmi_p4B
  reg [1 : 0] inf_dp0_wmi_p4B;
  wire [1 : 0] inf_dp0_wmi_p4B$D_IN;
  wire inf_dp0_wmi_p4B$EN;

  // register inf_dp0_wmi_rdActive
  reg inf_dp0_wmi_rdActive;
  wire inf_dp0_wmi_rdActive$D_IN, inf_dp0_wmi_rdActive$EN;

  // register inf_dp0_wmi_reqCount
  reg [15 : 0] inf_dp0_wmi_reqCount;
  wire [15 : 0] inf_dp0_wmi_reqCount$D_IN;
  wire inf_dp0_wmi_reqCount$EN;

  // register inf_dp0_wmi_thisMesg
  reg [31 : 0] inf_dp0_wmi_thisMesg;
  wire [31 : 0] inf_dp0_wmi_thisMesg$D_IN;
  wire inf_dp0_wmi_thisMesg$EN;

  // register inf_dp0_wmi_wmi_blockReq
  reg inf_dp0_wmi_wmi_blockReq;
  wire inf_dp0_wmi_wmi_blockReq$D_IN, inf_dp0_wmi_wmi_blockReq$EN;

  // register inf_dp0_wmi_wmi_dhF_countReg
  reg [1 : 0] inf_dp0_wmi_wmi_dhF_countReg;
  wire [1 : 0] inf_dp0_wmi_wmi_dhF_countReg$D_IN;
  wire inf_dp0_wmi_wmi_dhF_countReg$EN;

  // register inf_dp0_wmi_wmi_dhF_levelsValid
  reg inf_dp0_wmi_wmi_dhF_levelsValid;
  wire inf_dp0_wmi_wmi_dhF_levelsValid$D_IN,
       inf_dp0_wmi_wmi_dhF_levelsValid$EN;

  // register inf_dp0_wmi_wmi_errorSticky
  reg inf_dp0_wmi_wmi_errorSticky;
  wire inf_dp0_wmi_wmi_errorSticky$D_IN, inf_dp0_wmi_wmi_errorSticky$EN;

  // register inf_dp0_wmi_wmi_mFlagF_countReg
  reg [1 : 0] inf_dp0_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] inf_dp0_wmi_wmi_mFlagF_countReg$D_IN;
  wire inf_dp0_wmi_wmi_mFlagF_countReg$EN;

  // register inf_dp0_wmi_wmi_mFlagF_levelsValid
  reg inf_dp0_wmi_wmi_mFlagF_levelsValid;
  wire inf_dp0_wmi_wmi_mFlagF_levelsValid$D_IN,
       inf_dp0_wmi_wmi_mFlagF_levelsValid$EN;

  // register inf_dp0_wmi_wmi_mFlagReg
  reg [31 : 0] inf_dp0_wmi_wmi_mFlagReg;
  wire [31 : 0] inf_dp0_wmi_wmi_mFlagReg$D_IN;
  wire inf_dp0_wmi_wmi_mFlagReg$EN;

  // register inf_dp0_wmi_wmi_operateD
  reg inf_dp0_wmi_wmi_operateD;
  wire inf_dp0_wmi_wmi_operateD$D_IN, inf_dp0_wmi_wmi_operateD$EN;

  // register inf_dp0_wmi_wmi_peerIsReady
  reg inf_dp0_wmi_wmi_peerIsReady;
  wire inf_dp0_wmi_wmi_peerIsReady$D_IN, inf_dp0_wmi_wmi_peerIsReady$EN;

  // register inf_dp0_wmi_wmi_reqF_countReg
  reg [1 : 0] inf_dp0_wmi_wmi_reqF_countReg;
  wire [1 : 0] inf_dp0_wmi_wmi_reqF_countReg$D_IN;
  wire inf_dp0_wmi_wmi_reqF_countReg$EN;

  // register inf_dp0_wmi_wmi_reqF_levelsValid
  reg inf_dp0_wmi_wmi_reqF_levelsValid;
  wire inf_dp0_wmi_wmi_reqF_levelsValid$D_IN,
       inf_dp0_wmi_wmi_reqF_levelsValid$EN;

  // register inf_dp0_wmi_wmi_respF_c_r
  reg [1 : 0] inf_dp0_wmi_wmi_respF_c_r;
  wire [1 : 0] inf_dp0_wmi_wmi_respF_c_r$D_IN;
  wire inf_dp0_wmi_wmi_respF_c_r$EN;

  // register inf_dp0_wmi_wmi_respF_q_0
  reg [33 : 0] inf_dp0_wmi_wmi_respF_q_0;
  reg [33 : 0] inf_dp0_wmi_wmi_respF_q_0$D_IN;
  wire inf_dp0_wmi_wmi_respF_q_0$EN;

  // register inf_dp0_wmi_wmi_respF_q_1
  reg [33 : 0] inf_dp0_wmi_wmi_respF_q_1;
  reg [33 : 0] inf_dp0_wmi_wmi_respF_q_1$D_IN;
  wire inf_dp0_wmi_wmi_respF_q_1$EN;

  // register inf_dp0_wmi_wmi_sFlagReg
  reg [31 : 0] inf_dp0_wmi_wmi_sFlagReg;
  wire [31 : 0] inf_dp0_wmi_wmi_sFlagReg$D_IN;
  wire inf_dp0_wmi_wmi_sFlagReg$EN;

  // register inf_dp0_wmi_wmi_statusR
  reg [7 : 0] inf_dp0_wmi_wmi_statusR;
  wire [7 : 0] inf_dp0_wmi_wmi_statusR$D_IN;
  wire inf_dp0_wmi_wmi_statusR$EN;

  // register inf_dp0_wmi_wmi_trafficSticky
  reg inf_dp0_wmi_wmi_trafficSticky;
  wire inf_dp0_wmi_wmi_trafficSticky$D_IN, inf_dp0_wmi_wmi_trafficSticky$EN;

  // register inf_dp0_wmi_wrActive
  reg inf_dp0_wmi_wrActive;
  wire inf_dp0_wmi_wrActive$D_IN, inf_dp0_wmi_wrActive$EN;

  // register inf_dp0_wmi_wrFinalize
  reg inf_dp0_wmi_wrFinalize;
  wire inf_dp0_wmi_wrFinalize$D_IN, inf_dp0_wmi_wrFinalize$EN;

  // register inf_dp0_wmi_wrtCount
  reg [15 : 0] inf_dp0_wmi_wrtCount;
  wire [15 : 0] inf_dp0_wmi_wrtCount$D_IN;
  wire inf_dp0_wmi_wrtCount$EN;

  // register inf_dp0_wti_nowReq
  reg [66 : 0] inf_dp0_wti_nowReq;
  wire [66 : 0] inf_dp0_wti_nowReq$D_IN;
  wire inf_dp0_wti_nowReq$EN;

  // register inf_dp1_bml_crdBuf_modulus
  reg [15 : 0] inf_dp1_bml_crdBuf_modulus;
  wire [15 : 0] inf_dp1_bml_crdBuf_modulus$D_IN;
  wire inf_dp1_bml_crdBuf_modulus$EN;

  // register inf_dp1_bml_crdBuf_value
  reg [15 : 0] inf_dp1_bml_crdBuf_value;
  wire [15 : 0] inf_dp1_bml_crdBuf_value$D_IN;
  wire inf_dp1_bml_crdBuf_value$EN;

  // register inf_dp1_bml_fabAvail
  reg inf_dp1_bml_fabAvail;
  wire inf_dp1_bml_fabAvail$D_IN, inf_dp1_bml_fabAvail$EN;

  // register inf_dp1_bml_fabBuf_modulus
  reg [15 : 0] inf_dp1_bml_fabBuf_modulus;
  wire [15 : 0] inf_dp1_bml_fabBuf_modulus$D_IN;
  wire inf_dp1_bml_fabBuf_modulus$EN;

  // register inf_dp1_bml_fabBuf_value
  reg [15 : 0] inf_dp1_bml_fabBuf_value;
  wire [15 : 0] inf_dp1_bml_fabBuf_value$D_IN;
  wire inf_dp1_bml_fabBuf_value$EN;

  // register inf_dp1_bml_fabBufsAvail
  reg [15 : 0] inf_dp1_bml_fabBufsAvail;
  wire [15 : 0] inf_dp1_bml_fabBufsAvail$D_IN;
  wire inf_dp1_bml_fabBufsAvail$EN;

  // register inf_dp1_bml_fabDone
  reg inf_dp1_bml_fabDone;
  wire inf_dp1_bml_fabDone$D_IN, inf_dp1_bml_fabDone$EN;

  // register inf_dp1_bml_fabFlowAddr
  reg [31 : 0] inf_dp1_bml_fabFlowAddr;
  reg [31 : 0] inf_dp1_bml_fabFlowAddr$D_IN;
  wire inf_dp1_bml_fabFlowAddr$EN;

  // register inf_dp1_bml_fabFlowBase
  reg [31 : 0] inf_dp1_bml_fabFlowBase;
  wire [31 : 0] inf_dp1_bml_fabFlowBase$D_IN;
  wire inf_dp1_bml_fabFlowBase$EN;

  // register inf_dp1_bml_fabFlowSize
  reg [31 : 0] inf_dp1_bml_fabFlowSize;
  wire [31 : 0] inf_dp1_bml_fabFlowSize$D_IN;
  wire inf_dp1_bml_fabFlowSize$EN;

  // register inf_dp1_bml_fabMesgAddr
  reg [31 : 0] inf_dp1_bml_fabMesgAddr;
  wire [31 : 0] inf_dp1_bml_fabMesgAddr$D_IN;
  wire inf_dp1_bml_fabMesgAddr$EN;

  // register inf_dp1_bml_fabMesgBase
  reg [31 : 0] inf_dp1_bml_fabMesgBase;
  wire [31 : 0] inf_dp1_bml_fabMesgBase$D_IN;
  wire inf_dp1_bml_fabMesgBase$EN;

  // register inf_dp1_bml_fabMesgSize
  reg [31 : 0] inf_dp1_bml_fabMesgSize;
  wire [31 : 0] inf_dp1_bml_fabMesgSize$D_IN;
  wire inf_dp1_bml_fabMesgSize$EN;

  // register inf_dp1_bml_fabMetaAddr
  reg [31 : 0] inf_dp1_bml_fabMetaAddr;
  wire [31 : 0] inf_dp1_bml_fabMetaAddr$D_IN;
  wire inf_dp1_bml_fabMetaAddr$EN;

  // register inf_dp1_bml_fabMetaBase
  reg [31 : 0] inf_dp1_bml_fabMetaBase;
  wire [31 : 0] inf_dp1_bml_fabMetaBase$D_IN;
  wire inf_dp1_bml_fabMetaBase$EN;

  // register inf_dp1_bml_fabMetaSize
  reg [31 : 0] inf_dp1_bml_fabMetaSize;
  wire [31 : 0] inf_dp1_bml_fabMetaSize$D_IN;
  wire inf_dp1_bml_fabMetaSize$EN;

  // register inf_dp1_bml_fabNumBufs
  reg [15 : 0] inf_dp1_bml_fabNumBufs;
  wire [15 : 0] inf_dp1_bml_fabNumBufs$D_IN;
  wire inf_dp1_bml_fabNumBufs$EN;

  // register inf_dp1_bml_lclBufDone
  reg inf_dp1_bml_lclBufDone;
  wire inf_dp1_bml_lclBufDone$D_IN, inf_dp1_bml_lclBufDone$EN;

  // register inf_dp1_bml_lclBufStart
  reg inf_dp1_bml_lclBufStart;
  wire inf_dp1_bml_lclBufStart$D_IN, inf_dp1_bml_lclBufStart$EN;

  // register inf_dp1_bml_lclBuf_modulus
  reg [15 : 0] inf_dp1_bml_lclBuf_modulus;
  wire [15 : 0] inf_dp1_bml_lclBuf_modulus$D_IN;
  wire inf_dp1_bml_lclBuf_modulus$EN;

  // register inf_dp1_bml_lclBuf_value
  reg [15 : 0] inf_dp1_bml_lclBuf_value;
  wire [15 : 0] inf_dp1_bml_lclBuf_value$D_IN;
  wire inf_dp1_bml_lclBuf_value$EN;

  // register inf_dp1_bml_lclBufsAR
  reg [15 : 0] inf_dp1_bml_lclBufsAR;
  wire [15 : 0] inf_dp1_bml_lclBufsAR$D_IN;
  wire inf_dp1_bml_lclBufsAR$EN;

  // register inf_dp1_bml_lclBufsCF
  reg [15 : 0] inf_dp1_bml_lclBufsCF;
  wire [15 : 0] inf_dp1_bml_lclBufsCF$D_IN;
  wire inf_dp1_bml_lclBufsCF$EN;

  // register inf_dp1_bml_lclCredit
  reg [15 : 0] inf_dp1_bml_lclCredit;
  wire [15 : 0] inf_dp1_bml_lclCredit$D_IN;
  wire inf_dp1_bml_lclCredit$EN;

  // register inf_dp1_bml_lclDones
  reg [15 : 0] inf_dp1_bml_lclDones;
  wire [15 : 0] inf_dp1_bml_lclDones$D_IN;
  wire inf_dp1_bml_lclDones$EN;

  // register inf_dp1_bml_lclMesgAddr
  reg [15 : 0] inf_dp1_bml_lclMesgAddr;
  wire [15 : 0] inf_dp1_bml_lclMesgAddr$D_IN;
  wire inf_dp1_bml_lclMesgAddr$EN;

  // register inf_dp1_bml_lclMetaAddr
  reg [15 : 0] inf_dp1_bml_lclMetaAddr;
  wire [15 : 0] inf_dp1_bml_lclMetaAddr$D_IN;
  wire inf_dp1_bml_lclMetaAddr$EN;

  // register inf_dp1_bml_lclNumBufs
  reg [15 : 0] inf_dp1_bml_lclNumBufs;
  wire [15 : 0] inf_dp1_bml_lclNumBufs$D_IN;
  wire inf_dp1_bml_lclNumBufs$EN;

  // register inf_dp1_bml_lclStarts
  reg [15 : 0] inf_dp1_bml_lclStarts;
  wire [15 : 0] inf_dp1_bml_lclStarts$D_IN;
  wire inf_dp1_bml_lclStarts$EN;

  // register inf_dp1_bml_mesgBase
  reg [15 : 0] inf_dp1_bml_mesgBase;
  wire [15 : 0] inf_dp1_bml_mesgBase$D_IN;
  wire inf_dp1_bml_mesgBase$EN;

  // register inf_dp1_bml_mesgSize
  reg [15 : 0] inf_dp1_bml_mesgSize;
  wire [15 : 0] inf_dp1_bml_mesgSize$D_IN;
  wire inf_dp1_bml_mesgSize$EN;

  // register inf_dp1_bml_metaBase
  reg [15 : 0] inf_dp1_bml_metaBase;
  wire [15 : 0] inf_dp1_bml_metaBase$D_IN;
  wire inf_dp1_bml_metaBase$EN;

  // register inf_dp1_bml_metaSize
  reg [15 : 0] inf_dp1_bml_metaSize;
  wire [15 : 0] inf_dp1_bml_metaSize$D_IN;
  wire inf_dp1_bml_metaSize$EN;

  // register inf_dp1_bml_remBuf_modulus
  reg [15 : 0] inf_dp1_bml_remBuf_modulus;
  wire [15 : 0] inf_dp1_bml_remBuf_modulus$D_IN;
  wire inf_dp1_bml_remBuf_modulus$EN;

  // register inf_dp1_bml_remBuf_value
  reg [15 : 0] inf_dp1_bml_remBuf_value;
  wire [15 : 0] inf_dp1_bml_remBuf_value$D_IN;
  wire inf_dp1_bml_remBuf_value$EN;

  // register inf_dp1_bml_remDone
  reg inf_dp1_bml_remDone;
  wire inf_dp1_bml_remDone$D_IN, inf_dp1_bml_remDone$EN;

  // register inf_dp1_bml_remDones
  reg [15 : 0] inf_dp1_bml_remDones;
  wire [15 : 0] inf_dp1_bml_remDones$D_IN;
  wire inf_dp1_bml_remDones$EN;

  // register inf_dp1_bml_remMesgAddr
  reg [15 : 0] inf_dp1_bml_remMesgAddr;
  wire [15 : 0] inf_dp1_bml_remMesgAddr$D_IN;
  wire inf_dp1_bml_remMesgAddr$EN;

  // register inf_dp1_bml_remMetaAddr
  reg [15 : 0] inf_dp1_bml_remMetaAddr;
  wire [15 : 0] inf_dp1_bml_remMetaAddr$D_IN;
  wire inf_dp1_bml_remMetaAddr$EN;

  // register inf_dp1_bml_remStart
  reg inf_dp1_bml_remStart;
  wire inf_dp1_bml_remStart$D_IN, inf_dp1_bml_remStart$EN;

  // register inf_dp1_bml_remStarts
  reg [15 : 0] inf_dp1_bml_remStarts;
  wire [15 : 0] inf_dp1_bml_remStarts$D_IN;
  wire inf_dp1_bml_remStarts$EN;

  // register inf_dp1_bram_serverAdapterA_1_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterA_1_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterA_1_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterA_1_cnt$EN;

  // register inf_dp1_bram_serverAdapterA_1_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterA_1_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterA_1_s1$D_IN;
  wire inf_dp1_bram_serverAdapterA_1_s1$EN;

  // register inf_dp1_bram_serverAdapterA_2_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterA_2_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterA_2_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterA_2_cnt$EN;

  // register inf_dp1_bram_serverAdapterA_2_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterA_2_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterA_2_s1$D_IN;
  wire inf_dp1_bram_serverAdapterA_2_s1$EN;

  // register inf_dp1_bram_serverAdapterA_3_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterA_3_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterA_3_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterA_3_cnt$EN;

  // register inf_dp1_bram_serverAdapterA_3_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterA_3_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterA_3_s1$D_IN;
  wire inf_dp1_bram_serverAdapterA_3_s1$EN;

  // register inf_dp1_bram_serverAdapterA_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterA_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterA_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterA_cnt$EN;

  // register inf_dp1_bram_serverAdapterA_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterA_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterA_s1$D_IN;
  wire inf_dp1_bram_serverAdapterA_s1$EN;

  // register inf_dp1_bram_serverAdapterB_1_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterB_1_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterB_1_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterB_1_cnt$EN;

  // register inf_dp1_bram_serverAdapterB_1_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterB_1_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterB_1_s1$D_IN;
  wire inf_dp1_bram_serverAdapterB_1_s1$EN;

  // register inf_dp1_bram_serverAdapterB_2_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterB_2_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterB_2_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterB_2_cnt$EN;

  // register inf_dp1_bram_serverAdapterB_2_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterB_2_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterB_2_s1$D_IN;
  wire inf_dp1_bram_serverAdapterB_2_s1$EN;

  // register inf_dp1_bram_serverAdapterB_3_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterB_3_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterB_3_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterB_3_cnt$EN;

  // register inf_dp1_bram_serverAdapterB_3_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterB_3_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterB_3_s1$D_IN;
  wire inf_dp1_bram_serverAdapterB_3_s1$EN;

  // register inf_dp1_bram_serverAdapterB_cnt
  reg [2 : 0] inf_dp1_bram_serverAdapterB_cnt;
  wire [2 : 0] inf_dp1_bram_serverAdapterB_cnt$D_IN;
  wire inf_dp1_bram_serverAdapterB_cnt$EN;

  // register inf_dp1_bram_serverAdapterB_s1
  reg [1 : 0] inf_dp1_bram_serverAdapterB_s1;
  wire [1 : 0] inf_dp1_bram_serverAdapterB_s1$D_IN;
  wire inf_dp1_bram_serverAdapterB_s1$EN;

  // register inf_dp1_dpControl
  reg [3 : 0] inf_dp1_dpControl;
  wire [3 : 0] inf_dp1_dpControl$D_IN;
  wire inf_dp1_dpControl$EN;

  // register inf_dp1_tlp_creditReady
  reg inf_dp1_tlp_creditReady;
  wire inf_dp1_tlp_creditReady$D_IN, inf_dp1_tlp_creditReady$EN;

  // register inf_dp1_tlp_debugBdata
  reg [127 : 0] inf_dp1_tlp_debugBdata;
  wire [127 : 0] inf_dp1_tlp_debugBdata$D_IN;
  wire inf_dp1_tlp_debugBdata$EN;

  // register inf_dp1_tlp_dmaDoTailEvent
  reg inf_dp1_tlp_dmaDoTailEvent;
  reg inf_dp1_tlp_dmaDoTailEvent$D_IN;
  wire inf_dp1_tlp_dmaDoTailEvent$EN;

  // register inf_dp1_tlp_dmaPullRemainDWLen
  reg [9 : 0] inf_dp1_tlp_dmaPullRemainDWLen;
  reg [9 : 0] inf_dp1_tlp_dmaPullRemainDWLen$D_IN;
  wire inf_dp1_tlp_dmaPullRemainDWLen$EN;

  // register inf_dp1_tlp_dmaPullRemainDWSub
  reg [9 : 0] inf_dp1_tlp_dmaPullRemainDWSub;
  wire [9 : 0] inf_dp1_tlp_dmaPullRemainDWSub$D_IN;
  wire inf_dp1_tlp_dmaPullRemainDWSub$EN;

  // register inf_dp1_tlp_dmaReqTag
  reg [4 : 0] inf_dp1_tlp_dmaReqTag;
  wire [4 : 0] inf_dp1_tlp_dmaReqTag$D_IN;
  wire inf_dp1_tlp_dmaReqTag$EN;

  // register inf_dp1_tlp_dmaTag
  reg [4 : 0] inf_dp1_tlp_dmaTag;
  wire [4 : 0] inf_dp1_tlp_dmaTag$D_IN;
  wire inf_dp1_tlp_dmaTag$EN;

  // register inf_dp1_tlp_doXmtMetaBody
  reg inf_dp1_tlp_doXmtMetaBody;
  wire inf_dp1_tlp_doXmtMetaBody$D_IN, inf_dp1_tlp_doXmtMetaBody$EN;

  // register inf_dp1_tlp_fabFlowAddr
  reg [31 : 0] inf_dp1_tlp_fabFlowAddr;
  wire [31 : 0] inf_dp1_tlp_fabFlowAddr$D_IN;
  wire inf_dp1_tlp_fabFlowAddr$EN;

  // register inf_dp1_tlp_fabMesgAccu
  reg [31 : 0] inf_dp1_tlp_fabMesgAccu;
  reg [31 : 0] inf_dp1_tlp_fabMesgAccu$D_IN;
  wire inf_dp1_tlp_fabMesgAccu$EN;

  // register inf_dp1_tlp_fabMesgAddr
  reg [31 : 0] inf_dp1_tlp_fabMesgAddr;
  wire [31 : 0] inf_dp1_tlp_fabMesgAddr$D_IN;
  wire inf_dp1_tlp_fabMesgAddr$EN;

  // register inf_dp1_tlp_fabMeta
  reg [128 : 0] inf_dp1_tlp_fabMeta;
  reg [128 : 0] inf_dp1_tlp_fabMeta$D_IN;
  wire inf_dp1_tlp_fabMeta$EN;

  // register inf_dp1_tlp_fabMetaAddr
  reg [31 : 0] inf_dp1_tlp_fabMetaAddr;
  wire [31 : 0] inf_dp1_tlp_fabMetaAddr$D_IN;
  wire inf_dp1_tlp_fabMetaAddr$EN;

  // register inf_dp1_tlp_farBufReady
  reg inf_dp1_tlp_farBufReady;
  wire inf_dp1_tlp_farBufReady$D_IN, inf_dp1_tlp_farBufReady$EN;

  // register inf_dp1_tlp_flowDiagCount
  reg [31 : 0] inf_dp1_tlp_flowDiagCount;
  wire [31 : 0] inf_dp1_tlp_flowDiagCount$D_IN;
  wire inf_dp1_tlp_flowDiagCount$EN;

  // register inf_dp1_tlp_gotResponseHeader
  reg inf_dp1_tlp_gotResponseHeader;
  reg inf_dp1_tlp_gotResponseHeader$D_IN;
  wire inf_dp1_tlp_gotResponseHeader$EN;

  // register inf_dp1_tlp_inIgnorePkt
  reg inf_dp1_tlp_inIgnorePkt;
  wire inf_dp1_tlp_inIgnorePkt$D_IN, inf_dp1_tlp_inIgnorePkt$EN;

  // register inf_dp1_tlp_maxPayloadSize
  reg [12 : 0] inf_dp1_tlp_maxPayloadSize;
  wire [12 : 0] inf_dp1_tlp_maxPayloadSize$D_IN;
  wire inf_dp1_tlp_maxPayloadSize$EN;

  // register inf_dp1_tlp_maxReadReqSize
  reg [12 : 0] inf_dp1_tlp_maxReadReqSize;
  wire [12 : 0] inf_dp1_tlp_maxReadReqSize$D_IN;
  wire inf_dp1_tlp_maxReadReqSize$EN;

  // register inf_dp1_tlp_mesgComplReceived
  reg [16 : 0] inf_dp1_tlp_mesgComplReceived;
  reg [16 : 0] inf_dp1_tlp_mesgComplReceived$D_IN;
  wire inf_dp1_tlp_mesgComplReceived$EN;

  // register inf_dp1_tlp_mesgLengthRemainPull
  reg [16 : 0] inf_dp1_tlp_mesgLengthRemainPull;
  wire [16 : 0] inf_dp1_tlp_mesgLengthRemainPull$D_IN;
  wire inf_dp1_tlp_mesgLengthRemainPull$EN;

  // register inf_dp1_tlp_mesgLengthRemainPush
  reg [16 : 0] inf_dp1_tlp_mesgLengthRemainPush;
  wire [16 : 0] inf_dp1_tlp_mesgLengthRemainPush$D_IN;
  wire inf_dp1_tlp_mesgLengthRemainPush$EN;

  // register inf_dp1_tlp_nearBufReady
  reg inf_dp1_tlp_nearBufReady;
  wire inf_dp1_tlp_nearBufReady$D_IN, inf_dp1_tlp_nearBufReady$EN;

  // register inf_dp1_tlp_outDwRemain
  reg [9 : 0] inf_dp1_tlp_outDwRemain;
  wire [9 : 0] inf_dp1_tlp_outDwRemain$D_IN;
  wire inf_dp1_tlp_outDwRemain$EN;

  // register inf_dp1_tlp_postSeqDwell
  reg [3 : 0] inf_dp1_tlp_postSeqDwell;
  wire [3 : 0] inf_dp1_tlp_postSeqDwell$D_IN;
  wire inf_dp1_tlp_postSeqDwell$EN;

  // register inf_dp1_tlp_pullTagMatch
  reg inf_dp1_tlp_pullTagMatch;
  wire inf_dp1_tlp_pullTagMatch$D_IN, inf_dp1_tlp_pullTagMatch$EN;

  // register inf_dp1_tlp_rdRespDwRemain
  reg [9 : 0] inf_dp1_tlp_rdRespDwRemain;
  wire [9 : 0] inf_dp1_tlp_rdRespDwRemain$D_IN;
  wire inf_dp1_tlp_rdRespDwRemain$EN;

  // register inf_dp1_tlp_readHeaderSent
  reg inf_dp1_tlp_readHeaderSent;
  wire inf_dp1_tlp_readHeaderSent$D_IN, inf_dp1_tlp_readHeaderSent$EN;

  // register inf_dp1_tlp_readNxtDWAddr
  reg [12 : 0] inf_dp1_tlp_readNxtDWAddr;
  wire [12 : 0] inf_dp1_tlp_readNxtDWAddr$D_IN;
  wire inf_dp1_tlp_readNxtDWAddr$EN;

  // register inf_dp1_tlp_readRemainDWLen
  reg [9 : 0] inf_dp1_tlp_readRemainDWLen;
  wire [9 : 0] inf_dp1_tlp_readRemainDWLen$D_IN;
  wire inf_dp1_tlp_readRemainDWLen$EN;

  // register inf_dp1_tlp_readStarted
  reg inf_dp1_tlp_readStarted;
  wire inf_dp1_tlp_readStarted$D_IN, inf_dp1_tlp_readStarted$EN;

  // register inf_dp1_tlp_remDone
  reg inf_dp1_tlp_remDone;
  wire inf_dp1_tlp_remDone$D_IN, inf_dp1_tlp_remDone$EN;

  // register inf_dp1_tlp_remMesgAccu
  reg [15 : 0] inf_dp1_tlp_remMesgAccu;
  reg [15 : 0] inf_dp1_tlp_remMesgAccu$D_IN;
  wire inf_dp1_tlp_remMesgAccu$EN;

  // register inf_dp1_tlp_remMesgAddr
  reg [15 : 0] inf_dp1_tlp_remMesgAddr;
  wire [15 : 0] inf_dp1_tlp_remMesgAddr$D_IN;
  wire inf_dp1_tlp_remMesgAddr$EN;

  // register inf_dp1_tlp_remMetaAddr
  reg [15 : 0] inf_dp1_tlp_remMetaAddr;
  wire [15 : 0] inf_dp1_tlp_remMetaAddr$D_IN;
  wire inf_dp1_tlp_remMetaAddr$EN;

  // register inf_dp1_tlp_remStart
  reg inf_dp1_tlp_remStart;
  wire inf_dp1_tlp_remStart$D_IN, inf_dp1_tlp_remStart$EN;

  // register inf_dp1_tlp_reqMesgInFlight
  reg inf_dp1_tlp_reqMesgInFlight;
  reg inf_dp1_tlp_reqMesgInFlight$D_IN;
  wire inf_dp1_tlp_reqMesgInFlight$EN;

  // register inf_dp1_tlp_reqMetaBodyInFlight
  reg inf_dp1_tlp_reqMetaBodyInFlight;
  wire inf_dp1_tlp_reqMetaBodyInFlight$D_IN,
       inf_dp1_tlp_reqMetaBodyInFlight$EN;

  // register inf_dp1_tlp_reqMetaInFlight
  reg inf_dp1_tlp_reqMetaInFlight;
  reg inf_dp1_tlp_reqMetaInFlight$D_IN;
  wire inf_dp1_tlp_reqMetaInFlight$EN;

  // register inf_dp1_tlp_srcMesgAccu
  reg [31 : 0] inf_dp1_tlp_srcMesgAccu;
  wire [31 : 0] inf_dp1_tlp_srcMesgAccu$D_IN;
  wire inf_dp1_tlp_srcMesgAccu$EN;

  // register inf_dp1_tlp_tlpMetaSent
  reg inf_dp1_tlp_tlpMetaSent;
  wire inf_dp1_tlp_tlpMetaSent$D_IN, inf_dp1_tlp_tlpMetaSent$EN;

  // register inf_dp1_tlp_tlpRcvBusy
  reg inf_dp1_tlp_tlpRcvBusy;
  reg inf_dp1_tlp_tlpRcvBusy$D_IN;
  wire inf_dp1_tlp_tlpRcvBusy$EN;

  // register inf_dp1_tlp_tlpXmtBusy
  reg inf_dp1_tlp_tlpXmtBusy;
  reg inf_dp1_tlp_tlpXmtBusy$D_IN;
  wire inf_dp1_tlp_tlpXmtBusy$EN;

  // register inf_dp1_tlp_writeDWAddr
  reg [12 : 0] inf_dp1_tlp_writeDWAddr;
  wire [12 : 0] inf_dp1_tlp_writeDWAddr$D_IN;
  wire inf_dp1_tlp_writeDWAddr$EN;

  // register inf_dp1_tlp_writeLastBE
  reg [3 : 0] inf_dp1_tlp_writeLastBE;
  wire [3 : 0] inf_dp1_tlp_writeLastBE$D_IN;
  wire inf_dp1_tlp_writeLastBE$EN;

  // register inf_dp1_tlp_writeRemainDWLen
  reg [9 : 0] inf_dp1_tlp_writeRemainDWLen;
  wire [9 : 0] inf_dp1_tlp_writeRemainDWLen$D_IN;
  wire inf_dp1_tlp_writeRemainDWLen$EN;

  // register inf_dp1_tlp_xmtMetaInFlight
  reg inf_dp1_tlp_xmtMetaInFlight;
  wire inf_dp1_tlp_xmtMetaInFlight$D_IN, inf_dp1_tlp_xmtMetaInFlight$EN;

  // register inf_dp1_tlp_xmtMetaOK
  reg inf_dp1_tlp_xmtMetaOK;
  reg inf_dp1_tlp_xmtMetaOK$D_IN;
  wire inf_dp1_tlp_xmtMetaOK$EN;

  // register inf_dp1_wci_cEdge
  reg [2 : 0] inf_dp1_wci_cEdge;
  wire [2 : 0] inf_dp1_wci_cEdge$D_IN;
  wire inf_dp1_wci_cEdge$EN;

  // register inf_dp1_wci_cState
  reg [2 : 0] inf_dp1_wci_cState;
  wire [2 : 0] inf_dp1_wci_cState$D_IN;
  wire inf_dp1_wci_cState$EN;

  // register inf_dp1_wci_ctlAckReg
  reg inf_dp1_wci_ctlAckReg;
  wire inf_dp1_wci_ctlAckReg$D_IN, inf_dp1_wci_ctlAckReg$EN;

  // register inf_dp1_wci_ctlOpActive
  reg inf_dp1_wci_ctlOpActive;
  wire inf_dp1_wci_ctlOpActive$D_IN, inf_dp1_wci_ctlOpActive$EN;

  // register inf_dp1_wci_illegalEdge
  reg inf_dp1_wci_illegalEdge;
  wire inf_dp1_wci_illegalEdge$D_IN, inf_dp1_wci_illegalEdge$EN;

  // register inf_dp1_wci_nState
  reg [2 : 0] inf_dp1_wci_nState;
  reg [2 : 0] inf_dp1_wci_nState$D_IN;
  wire inf_dp1_wci_nState$EN;

  // register inf_dp1_wci_reqF_countReg
  reg [1 : 0] inf_dp1_wci_reqF_countReg;
  wire [1 : 0] inf_dp1_wci_reqF_countReg$D_IN;
  wire inf_dp1_wci_reqF_countReg$EN;

  // register inf_dp1_wci_respF_c_r
  reg [1 : 0] inf_dp1_wci_respF_c_r;
  wire [1 : 0] inf_dp1_wci_respF_c_r$D_IN;
  wire inf_dp1_wci_respF_c_r$EN;

  // register inf_dp1_wci_respF_q_0
  reg [33 : 0] inf_dp1_wci_respF_q_0;
  reg [33 : 0] inf_dp1_wci_respF_q_0$D_IN;
  wire inf_dp1_wci_respF_q_0$EN;

  // register inf_dp1_wci_respF_q_1
  reg [33 : 0] inf_dp1_wci_respF_q_1;
  reg [33 : 0] inf_dp1_wci_respF_q_1$D_IN;
  wire inf_dp1_wci_respF_q_1$EN;

  // register inf_dp1_wci_sFlagReg
  reg inf_dp1_wci_sFlagReg;
  wire inf_dp1_wci_sFlagReg$D_IN, inf_dp1_wci_sFlagReg$EN;

  // register inf_dp1_wci_sThreadBusy_d
  reg inf_dp1_wci_sThreadBusy_d;
  wire inf_dp1_wci_sThreadBusy_d$D_IN, inf_dp1_wci_sThreadBusy_d$EN;

  // register inf_dp1_wmi_addr
  reg [13 : 0] inf_dp1_wmi_addr;
  wire [13 : 0] inf_dp1_wmi_addr$D_IN;
  wire inf_dp1_wmi_addr$EN;

  // register inf_dp1_wmi_bufDwell
  reg [1 : 0] inf_dp1_wmi_bufDwell;
  wire [1 : 0] inf_dp1_wmi_bufDwell$D_IN;
  wire inf_dp1_wmi_bufDwell$EN;

  // register inf_dp1_wmi_bytesRemainReq
  reg [13 : 0] inf_dp1_wmi_bytesRemainReq;
  wire [13 : 0] inf_dp1_wmi_bytesRemainReq$D_IN;
  wire inf_dp1_wmi_bytesRemainReq$EN;

  // register inf_dp1_wmi_bytesRemainResp
  reg [13 : 0] inf_dp1_wmi_bytesRemainResp;
  wire [13 : 0] inf_dp1_wmi_bytesRemainResp$D_IN;
  wire inf_dp1_wmi_bytesRemainResp$EN;

  // register inf_dp1_wmi_doneWithMesg
  reg inf_dp1_wmi_doneWithMesg;
  wire inf_dp1_wmi_doneWithMesg$D_IN, inf_dp1_wmi_doneWithMesg$EN;

  // register inf_dp1_wmi_lastMesg
  reg [31 : 0] inf_dp1_wmi_lastMesg;
  wire [31 : 0] inf_dp1_wmi_lastMesg$D_IN;
  wire inf_dp1_wmi_lastMesg$EN;

  // register inf_dp1_wmi_lclMesgAddr
  reg [14 : 0] inf_dp1_wmi_lclMesgAddr;
  wire [14 : 0] inf_dp1_wmi_lclMesgAddr$D_IN;
  wire inf_dp1_wmi_lclMesgAddr$EN;

  // register inf_dp1_wmi_lclMetaAddr
  reg [14 : 0] inf_dp1_wmi_lclMetaAddr;
  wire [14 : 0] inf_dp1_wmi_lclMetaAddr$D_IN;
  wire inf_dp1_wmi_lclMetaAddr$EN;

  // register inf_dp1_wmi_mesgBufReady
  reg inf_dp1_wmi_mesgBufReady;
  wire inf_dp1_wmi_mesgBufReady$D_IN, inf_dp1_wmi_mesgBufReady$EN;

  // register inf_dp1_wmi_mesgBusy
  reg inf_dp1_wmi_mesgBusy;
  wire inf_dp1_wmi_mesgBusy$D_IN, inf_dp1_wmi_mesgBusy$EN;

  // register inf_dp1_wmi_mesgCount
  reg [31 : 0] inf_dp1_wmi_mesgCount;
  wire [31 : 0] inf_dp1_wmi_mesgCount$D_IN;
  wire inf_dp1_wmi_mesgCount$EN;

  // register inf_dp1_wmi_mesgDone
  reg inf_dp1_wmi_mesgDone;
  wire inf_dp1_wmi_mesgDone$D_IN, inf_dp1_wmi_mesgDone$EN;

  // register inf_dp1_wmi_mesgMeta
  reg [128 : 0] inf_dp1_wmi_mesgMeta;
  wire [128 : 0] inf_dp1_wmi_mesgMeta$D_IN;
  wire inf_dp1_wmi_mesgMeta$EN;

  // register inf_dp1_wmi_mesgStart
  reg inf_dp1_wmi_mesgStart;
  wire inf_dp1_wmi_mesgStart$D_IN, inf_dp1_wmi_mesgStart$EN;

  // register inf_dp1_wmi_metaBusy
  reg inf_dp1_wmi_metaBusy;
  wire inf_dp1_wmi_metaBusy$D_IN, inf_dp1_wmi_metaBusy$EN;

  // register inf_dp1_wmi_p4B
  reg [1 : 0] inf_dp1_wmi_p4B;
  wire [1 : 0] inf_dp1_wmi_p4B$D_IN;
  wire inf_dp1_wmi_p4B$EN;

  // register inf_dp1_wmi_rdActive
  reg inf_dp1_wmi_rdActive;
  wire inf_dp1_wmi_rdActive$D_IN, inf_dp1_wmi_rdActive$EN;

  // register inf_dp1_wmi_reqCount
  reg [15 : 0] inf_dp1_wmi_reqCount;
  wire [15 : 0] inf_dp1_wmi_reqCount$D_IN;
  wire inf_dp1_wmi_reqCount$EN;

  // register inf_dp1_wmi_thisMesg
  reg [31 : 0] inf_dp1_wmi_thisMesg;
  wire [31 : 0] inf_dp1_wmi_thisMesg$D_IN;
  wire inf_dp1_wmi_thisMesg$EN;

  // register inf_dp1_wmi_wmi_blockReq
  reg inf_dp1_wmi_wmi_blockReq;
  wire inf_dp1_wmi_wmi_blockReq$D_IN, inf_dp1_wmi_wmi_blockReq$EN;

  // register inf_dp1_wmi_wmi_dhF_countReg
  reg [1 : 0] inf_dp1_wmi_wmi_dhF_countReg;
  wire [1 : 0] inf_dp1_wmi_wmi_dhF_countReg$D_IN;
  wire inf_dp1_wmi_wmi_dhF_countReg$EN;

  // register inf_dp1_wmi_wmi_dhF_levelsValid
  reg inf_dp1_wmi_wmi_dhF_levelsValid;
  wire inf_dp1_wmi_wmi_dhF_levelsValid$D_IN,
       inf_dp1_wmi_wmi_dhF_levelsValid$EN;

  // register inf_dp1_wmi_wmi_errorSticky
  reg inf_dp1_wmi_wmi_errorSticky;
  wire inf_dp1_wmi_wmi_errorSticky$D_IN, inf_dp1_wmi_wmi_errorSticky$EN;

  // register inf_dp1_wmi_wmi_mFlagF_countReg
  reg [1 : 0] inf_dp1_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] inf_dp1_wmi_wmi_mFlagF_countReg$D_IN;
  wire inf_dp1_wmi_wmi_mFlagF_countReg$EN;

  // register inf_dp1_wmi_wmi_mFlagF_levelsValid
  reg inf_dp1_wmi_wmi_mFlagF_levelsValid;
  wire inf_dp1_wmi_wmi_mFlagF_levelsValid$D_IN,
       inf_dp1_wmi_wmi_mFlagF_levelsValid$EN;

  // register inf_dp1_wmi_wmi_mFlagReg
  reg [31 : 0] inf_dp1_wmi_wmi_mFlagReg;
  wire [31 : 0] inf_dp1_wmi_wmi_mFlagReg$D_IN;
  wire inf_dp1_wmi_wmi_mFlagReg$EN;

  // register inf_dp1_wmi_wmi_operateD
  reg inf_dp1_wmi_wmi_operateD;
  wire inf_dp1_wmi_wmi_operateD$D_IN, inf_dp1_wmi_wmi_operateD$EN;

  // register inf_dp1_wmi_wmi_peerIsReady
  reg inf_dp1_wmi_wmi_peerIsReady;
  wire inf_dp1_wmi_wmi_peerIsReady$D_IN, inf_dp1_wmi_wmi_peerIsReady$EN;

  // register inf_dp1_wmi_wmi_reqF_countReg
  reg [1 : 0] inf_dp1_wmi_wmi_reqF_countReg;
  wire [1 : 0] inf_dp1_wmi_wmi_reqF_countReg$D_IN;
  wire inf_dp1_wmi_wmi_reqF_countReg$EN;

  // register inf_dp1_wmi_wmi_reqF_levelsValid
  reg inf_dp1_wmi_wmi_reqF_levelsValid;
  wire inf_dp1_wmi_wmi_reqF_levelsValid$D_IN,
       inf_dp1_wmi_wmi_reqF_levelsValid$EN;

  // register inf_dp1_wmi_wmi_respF_c_r
  reg [1 : 0] inf_dp1_wmi_wmi_respF_c_r;
  wire [1 : 0] inf_dp1_wmi_wmi_respF_c_r$D_IN;
  wire inf_dp1_wmi_wmi_respF_c_r$EN;

  // register inf_dp1_wmi_wmi_respF_q_0
  reg [33 : 0] inf_dp1_wmi_wmi_respF_q_0;
  reg [33 : 0] inf_dp1_wmi_wmi_respF_q_0$D_IN;
  wire inf_dp1_wmi_wmi_respF_q_0$EN;

  // register inf_dp1_wmi_wmi_respF_q_1
  reg [33 : 0] inf_dp1_wmi_wmi_respF_q_1;
  reg [33 : 0] inf_dp1_wmi_wmi_respF_q_1$D_IN;
  wire inf_dp1_wmi_wmi_respF_q_1$EN;

  // register inf_dp1_wmi_wmi_sFlagReg
  reg [31 : 0] inf_dp1_wmi_wmi_sFlagReg;
  wire [31 : 0] inf_dp1_wmi_wmi_sFlagReg$D_IN;
  wire inf_dp1_wmi_wmi_sFlagReg$EN;

  // register inf_dp1_wmi_wmi_statusR
  reg [7 : 0] inf_dp1_wmi_wmi_statusR;
  wire [7 : 0] inf_dp1_wmi_wmi_statusR$D_IN;
  wire inf_dp1_wmi_wmi_statusR$EN;

  // register inf_dp1_wmi_wmi_trafficSticky
  reg inf_dp1_wmi_wmi_trafficSticky;
  wire inf_dp1_wmi_wmi_trafficSticky$D_IN, inf_dp1_wmi_wmi_trafficSticky$EN;

  // register inf_dp1_wmi_wrActive
  reg inf_dp1_wmi_wrActive;
  wire inf_dp1_wmi_wrActive$D_IN, inf_dp1_wmi_wrActive$EN;

  // register inf_dp1_wmi_wrFinalize
  reg inf_dp1_wmi_wrFinalize;
  wire inf_dp1_wmi_wrFinalize$D_IN, inf_dp1_wmi_wrFinalize$EN;

  // register inf_dp1_wmi_wrtCount
  reg [15 : 0] inf_dp1_wmi_wrtCount;
  wire [15 : 0] inf_dp1_wmi_wrtCount$D_IN;
  wire inf_dp1_wmi_wrtCount$EN;

  // register inf_dp1_wti_nowReq
  reg [66 : 0] inf_dp1_wti_nowReq;
  wire [66 : 0] inf_dp1_wti_nowReq$D_IN;
  wire inf_dp1_wti_nowReq$EN;

  // register inf_itc0_wti_nowReq
  reg [66 : 0] inf_itc0_wti_nowReq;
  wire [66 : 0] inf_itc0_wti_nowReq$D_IN;
  wire inf_itc0_wti_nowReq$EN;

  // register inf_itc0_wti_sThreadBusy_d
  reg inf_itc0_wti_sThreadBusy_d;
  wire inf_itc0_wti_sThreadBusy_d$D_IN, inf_itc0_wti_sThreadBusy_d$EN;

  // register inf_itc1_wti_nowReq
  reg [66 : 0] inf_itc1_wti_nowReq;
  wire [66 : 0] inf_itc1_wti_nowReq$D_IN;
  wire inf_itc1_wti_nowReq$EN;

  // register inf_itc1_wti_sThreadBusy_d
  reg inf_itc1_wti_sThreadBusy_d;
  wire inf_itc1_wti_sThreadBusy_d$D_IN, inf_itc1_wti_sThreadBusy_d$EN;

  // ports of submodule app_appW2_respF_memory
  wire [60 : 0] app_appW2_respF_memory$DIA,
		app_appW2_respF_memory$DIB,
		app_appW2_respF_memory$DOB;
  wire [10 : 0] app_appW2_respF_memory$ADDRA, app_appW2_respF_memory$ADDRB;
  wire app_appW2_respF_memory$ENA,
       app_appW2_respF_memory$ENB,
       app_appW2_respF_memory$WEA,
       app_appW2_respF_memory$WEB;

  // ports of submodule app_appW2_wci_isReset
  wire app_appW2_wci_isReset$VAL;

  // ports of submodule app_appW2_wci_reqF
  wire [59 : 0] app_appW2_wci_reqF$D_IN, app_appW2_wci_reqF$D_OUT;
  wire app_appW2_wci_reqF$CLR,
       app_appW2_wci_reqF$DEQ,
       app_appW2_wci_reqF$EMPTY_N,
       app_appW2_wci_reqF$ENQ;

  // ports of submodule app_appW2_wmi_isReset
  wire app_appW2_wmi_isReset$VAL;

  // ports of submodule app_appW2_wmi_respF
  wire [33 : 0] app_appW2_wmi_respF$D_IN, app_appW2_wmi_respF$D_OUT;
  wire app_appW2_wmi_respF$CLR,
       app_appW2_wmi_respF$DEQ,
       app_appW2_wmi_respF$EMPTY_N,
       app_appW2_wmi_respF$ENQ,
       app_appW2_wmi_respF$FULL_N;

  // ports of submodule app_appW2_wsiM_isReset
  wire app_appW2_wsiM_isReset$VAL;

  // ports of submodule app_appW2_wsiS_isReset
  wire app_appW2_wsiS_isReset$VAL;

  // ports of submodule app_appW2_wsiS_reqFifo
  wire [60 : 0] app_appW2_wsiS_reqFifo$D_IN, app_appW2_wsiS_reqFifo$D_OUT;
  wire app_appW2_wsiS_reqFifo$CLR,
       app_appW2_wsiS_reqFifo$DEQ,
       app_appW2_wsiS_reqFifo$EMPTY_N,
       app_appW2_wsiS_reqFifo$ENQ;

  // ports of submodule app_appW3_mesgRF
  wire [31 : 0] app_appW3_mesgRF$D_IN, app_appW3_mesgRF$D_OUT;
  wire app_appW3_mesgRF$CLR,
       app_appW3_mesgRF$DEQ,
       app_appW3_mesgRF$EMPTY_N,
       app_appW3_mesgRF$ENQ,
       app_appW3_mesgRF$FULL_N;

  // ports of submodule app_appW3_mesgWF_memory
  wire [31 : 0] app_appW3_mesgWF_memory$DIA,
		app_appW3_mesgWF_memory$DIB,
		app_appW3_mesgWF_memory$DOB;
  wire [11 : 0] app_appW3_mesgWF_memory$ADDRA, app_appW3_mesgWF_memory$ADDRB;
  wire app_appW3_mesgWF_memory$ENA,
       app_appW3_mesgWF_memory$ENB,
       app_appW3_mesgWF_memory$WEA,
       app_appW3_mesgWF_memory$WEB;

  // ports of submodule app_appW3_metaRF
  wire [31 : 0] app_appW3_metaRF$D_IN, app_appW3_metaRF$D_OUT;
  wire app_appW3_metaRF$CLR,
       app_appW3_metaRF$DEQ,
       app_appW3_metaRF$EMPTY_N,
       app_appW3_metaRF$ENQ,
       app_appW3_metaRF$FULL_N;

  // ports of submodule app_appW3_metaWF
  wire [31 : 0] app_appW3_metaWF$D_IN, app_appW3_metaWF$D_OUT;
  wire app_appW3_metaWF$CLR,
       app_appW3_metaWF$DEQ,
       app_appW3_metaWF$EMPTY_N,
       app_appW3_metaWF$ENQ,
       app_appW3_metaWF$FULL_N;

  // ports of submodule app_appW3_wci_isReset
  wire app_appW3_wci_isReset$VAL;

  // ports of submodule app_appW3_wci_reqF
  wire [59 : 0] app_appW3_wci_reqF$D_IN, app_appW3_wci_reqF$D_OUT;
  wire app_appW3_wci_reqF$CLR,
       app_appW3_wci_reqF$DEQ,
       app_appW3_wci_reqF$EMPTY_N,
       app_appW3_wci_reqF$ENQ;

  // ports of submodule app_appW3_wide16Fa
  wire [127 : 0] app_appW3_wide16Fa$D_IN, app_appW3_wide16Fa$D_OUT;
  wire app_appW3_wide16Fa$CLR,
       app_appW3_wide16Fa$DEQ,
       app_appW3_wide16Fa$EMPTY_N,
       app_appW3_wide16Fa$ENQ,
       app_appW3_wide16Fa$FULL_N;

  // ports of submodule app_appW3_wide16Fb
  wire [127 : 0] app_appW3_wide16Fb$D_IN, app_appW3_wide16Fb$D_OUT;
  wire app_appW3_wide16Fb$CLR,
       app_appW3_wide16Fb$DEQ,
       app_appW3_wide16Fb$EMPTY_N,
       app_appW3_wide16Fb$ENQ,
       app_appW3_wide16Fb$FULL_N;

  // ports of submodule app_appW3_wide16Fc
  wire [127 : 0] app_appW3_wide16Fc$D_IN, app_appW3_wide16Fc$D_OUT;
  wire app_appW3_wide16Fc$CLR,
       app_appW3_wide16Fc$DEQ,
       app_appW3_wide16Fc$EMPTY_N,
       app_appW3_wide16Fc$ENQ,
       app_appW3_wide16Fc$FULL_N;

  // ports of submodule app_appW3_wmemi_isReset
  wire app_appW3_wmemi_isReset$VAL;

  // ports of submodule app_appW3_wmemi_respF
  wire [130 : 0] app_appW3_wmemi_respF$D_IN, app_appW3_wmemi_respF$D_OUT;
  wire app_appW3_wmemi_respF$CLR,
       app_appW3_wmemi_respF$DEQ,
       app_appW3_wmemi_respF$EMPTY_N,
       app_appW3_wmemi_respF$ENQ,
       app_appW3_wmemi_respF$FULL_N;

  // ports of submodule app_appW3_wsiM_isReset
  wire app_appW3_wsiM_isReset$VAL;

  // ports of submodule app_appW3_wsiS_isReset
  wire app_appW3_wsiS_isReset$VAL;

  // ports of submodule app_appW3_wsiS_reqFifo
  wire [60 : 0] app_appW3_wsiS_reqFifo$D_IN, app_appW3_wsiS_reqFifo$D_OUT;
  wire app_appW3_wsiS_reqFifo$CLR,
       app_appW3_wsiS_reqFifo$DEQ,
       app_appW3_wsiS_reqFifo$EMPTY_N,
       app_appW3_wsiS_reqFifo$ENQ,
       app_appW3_wsiS_reqFifo$FULL_N;

  // ports of submodule app_appW4_respF_memory
  wire [60 : 0] app_appW4_respF_memory$DIA,
		app_appW4_respF_memory$DIB,
		app_appW4_respF_memory$DOB;
  wire [10 : 0] app_appW4_respF_memory$ADDRA, app_appW4_respF_memory$ADDRB;
  wire app_appW4_respF_memory$ENA,
       app_appW4_respF_memory$ENB,
       app_appW4_respF_memory$WEA,
       app_appW4_respF_memory$WEB;

  // ports of submodule app_appW4_wci_isReset
  wire app_appW4_wci_isReset$VAL;

  // ports of submodule app_appW4_wci_reqF
  wire [59 : 0] app_appW4_wci_reqF$D_IN, app_appW4_wci_reqF$D_OUT;
  wire app_appW4_wci_reqF$CLR,
       app_appW4_wci_reqF$DEQ,
       app_appW4_wci_reqF$EMPTY_N,
       app_appW4_wci_reqF$ENQ;

  // ports of submodule app_appW4_wmi_isReset
  wire app_appW4_wmi_isReset$VAL;

  // ports of submodule app_appW4_wmi_respF
  wire [33 : 0] app_appW4_wmi_respF$D_IN, app_appW4_wmi_respF$D_OUT;
  wire app_appW4_wmi_respF$CLR,
       app_appW4_wmi_respF$DEQ,
       app_appW4_wmi_respF$EMPTY_N,
       app_appW4_wmi_respF$ENQ,
       app_appW4_wmi_respF$FULL_N;

  // ports of submodule app_appW4_wsiM_isReset
  wire app_appW4_wsiM_isReset$VAL;

  // ports of submodule app_appW4_wsiS_isReset
  wire app_appW4_wsiS_isReset$VAL;

  // ports of submodule app_appW4_wsiS_reqFifo
  wire [60 : 0] app_appW4_wsiS_reqFifo$D_IN, app_appW4_wsiS_reqFifo$D_OUT;
  wire app_appW4_wsiS_reqFifo$CLR,
       app_appW4_wsiS_reqFifo$DEQ,
       app_appW4_wsiS_reqFifo$EMPTY_N,
       app_appW4_wsiS_reqFifo$ENQ,
       app_appW4_wsiS_reqFifo$FULL_N;

  // ports of submodule inf_cp
  wire [152 : 0] inf_cp$server_request_put, inf_cp$server_response_get;
  wire [63 : 0] inf_cp$cpNow;
  wire [31 : 0] inf_cp$wci_Vm_0_MData,
		inf_cp$wci_Vm_0_SData,
		inf_cp$wci_Vm_10_MData,
		inf_cp$wci_Vm_10_SData,
		inf_cp$wci_Vm_11_MData,
		inf_cp$wci_Vm_11_SData,
		inf_cp$wci_Vm_12_MData,
		inf_cp$wci_Vm_12_SData,
		inf_cp$wci_Vm_13_MData,
		inf_cp$wci_Vm_13_SData,
		inf_cp$wci_Vm_14_MData,
		inf_cp$wci_Vm_14_SData,
		inf_cp$wci_Vm_1_MData,
		inf_cp$wci_Vm_1_SData,
		inf_cp$wci_Vm_2_MData,
		inf_cp$wci_Vm_2_SData,
		inf_cp$wci_Vm_3_MData,
		inf_cp$wci_Vm_3_SData,
		inf_cp$wci_Vm_4_MData,
		inf_cp$wci_Vm_4_SData,
		inf_cp$wci_Vm_5_MData,
		inf_cp$wci_Vm_5_SData,
		inf_cp$wci_Vm_6_MData,
		inf_cp$wci_Vm_6_SData,
		inf_cp$wci_Vm_7_MData,
		inf_cp$wci_Vm_7_SData,
		inf_cp$wci_Vm_8_MData,
		inf_cp$wci_Vm_8_SData,
		inf_cp$wci_Vm_9_MData,
		inf_cp$wci_Vm_9_SData;
  wire [19 : 0] inf_cp$wci_Vm_0_MAddr,
		inf_cp$wci_Vm_10_MAddr,
		inf_cp$wci_Vm_11_MAddr,
		inf_cp$wci_Vm_12_MAddr,
		inf_cp$wci_Vm_13_MAddr,
		inf_cp$wci_Vm_14_MAddr,
		inf_cp$wci_Vm_1_MAddr,
		inf_cp$wci_Vm_2_MAddr,
		inf_cp$wci_Vm_3_MAddr,
		inf_cp$wci_Vm_4_MAddr,
		inf_cp$wci_Vm_5_MAddr,
		inf_cp$wci_Vm_6_MAddr,
		inf_cp$wci_Vm_7_MAddr,
		inf_cp$wci_Vm_8_MAddr,
		inf_cp$wci_Vm_9_MAddr;
  wire [3 : 0] inf_cp$wci_Vm_0_MByteEn,
	       inf_cp$wci_Vm_10_MByteEn,
	       inf_cp$wci_Vm_11_MByteEn,
	       inf_cp$wci_Vm_12_MByteEn,
	       inf_cp$wci_Vm_13_MByteEn,
	       inf_cp$wci_Vm_14_MByteEn,
	       inf_cp$wci_Vm_1_MByteEn,
	       inf_cp$wci_Vm_2_MByteEn,
	       inf_cp$wci_Vm_3_MByteEn,
	       inf_cp$wci_Vm_4_MByteEn,
	       inf_cp$wci_Vm_5_MByteEn,
	       inf_cp$wci_Vm_6_MByteEn,
	       inf_cp$wci_Vm_7_MByteEn,
	       inf_cp$wci_Vm_8_MByteEn,
	       inf_cp$wci_Vm_9_MByteEn;
  wire [2 : 0] inf_cp$switch_x,
	       inf_cp$wci_Vm_0_MCmd,
	       inf_cp$wci_Vm_10_MCmd,
	       inf_cp$wci_Vm_11_MCmd,
	       inf_cp$wci_Vm_12_MCmd,
	       inf_cp$wci_Vm_13_MCmd,
	       inf_cp$wci_Vm_14_MCmd,
	       inf_cp$wci_Vm_1_MCmd,
	       inf_cp$wci_Vm_2_MCmd,
	       inf_cp$wci_Vm_3_MCmd,
	       inf_cp$wci_Vm_4_MCmd,
	       inf_cp$wci_Vm_5_MCmd,
	       inf_cp$wci_Vm_6_MCmd,
	       inf_cp$wci_Vm_7_MCmd,
	       inf_cp$wci_Vm_8_MCmd,
	       inf_cp$wci_Vm_9_MCmd;
  wire [1 : 0] inf_cp$led,
	       inf_cp$wci_Vm_0_SFlag,
	       inf_cp$wci_Vm_0_SResp,
	       inf_cp$wci_Vm_10_MFlag,
	       inf_cp$wci_Vm_10_SFlag,
	       inf_cp$wci_Vm_10_SResp,
	       inf_cp$wci_Vm_11_MFlag,
	       inf_cp$wci_Vm_11_SFlag,
	       inf_cp$wci_Vm_11_SResp,
	       inf_cp$wci_Vm_12_MFlag,
	       inf_cp$wci_Vm_12_SFlag,
	       inf_cp$wci_Vm_12_SResp,
	       inf_cp$wci_Vm_13_SFlag,
	       inf_cp$wci_Vm_13_SResp,
	       inf_cp$wci_Vm_14_SFlag,
	       inf_cp$wci_Vm_14_SResp,
	       inf_cp$wci_Vm_1_SFlag,
	       inf_cp$wci_Vm_1_SResp,
	       inf_cp$wci_Vm_2_SFlag,
	       inf_cp$wci_Vm_2_SResp,
	       inf_cp$wci_Vm_3_SFlag,
	       inf_cp$wci_Vm_3_SResp,
	       inf_cp$wci_Vm_4_SFlag,
	       inf_cp$wci_Vm_4_SResp,
	       inf_cp$wci_Vm_5_SFlag,
	       inf_cp$wci_Vm_5_SResp,
	       inf_cp$wci_Vm_6_SFlag,
	       inf_cp$wci_Vm_6_SResp,
	       inf_cp$wci_Vm_7_SFlag,
	       inf_cp$wci_Vm_7_SResp,
	       inf_cp$wci_Vm_8_MFlag,
	       inf_cp$wci_Vm_8_SFlag,
	       inf_cp$wci_Vm_8_SResp,
	       inf_cp$wci_Vm_9_MFlag,
	       inf_cp$wci_Vm_9_SFlag,
	       inf_cp$wci_Vm_9_SResp;
  wire inf_cp$EN_server_request_put,
       inf_cp$EN_server_response_get,
       inf_cp$RDY_server_request_put,
       inf_cp$RDY_server_response_get,
       inf_cp$RST_N_wci_Vm_10,
       inf_cp$RST_N_wci_Vm_11,
       inf_cp$RST_N_wci_Vm_12,
       inf_cp$RST_N_wci_Vm_13,
       inf_cp$RST_N_wci_Vm_14,
       inf_cp$RST_N_wci_Vm_2,
       inf_cp$RST_N_wci_Vm_3,
       inf_cp$RST_N_wci_Vm_4,
       inf_cp$RST_N_wci_Vm_8,
       inf_cp$RST_N_wci_Vm_9,
       inf_cp$gps_ppsSyncIn_x,
       inf_cp$gps_ppsSyncOut,
       inf_cp$wci_Vm_0_MAddrSpace,
       inf_cp$wci_Vm_0_SThreadBusy,
       inf_cp$wci_Vm_10_MAddrSpace,
       inf_cp$wci_Vm_10_SThreadBusy,
       inf_cp$wci_Vm_11_MAddrSpace,
       inf_cp$wci_Vm_11_SThreadBusy,
       inf_cp$wci_Vm_12_MAddrSpace,
       inf_cp$wci_Vm_12_SThreadBusy,
       inf_cp$wci_Vm_13_MAddrSpace,
       inf_cp$wci_Vm_13_SThreadBusy,
       inf_cp$wci_Vm_14_MAddrSpace,
       inf_cp$wci_Vm_14_SThreadBusy,
       inf_cp$wci_Vm_1_MAddrSpace,
       inf_cp$wci_Vm_1_SThreadBusy,
       inf_cp$wci_Vm_2_MAddrSpace,
       inf_cp$wci_Vm_2_SThreadBusy,
       inf_cp$wci_Vm_3_MAddrSpace,
       inf_cp$wci_Vm_3_SThreadBusy,
       inf_cp$wci_Vm_4_MAddrSpace,
       inf_cp$wci_Vm_4_SThreadBusy,
       inf_cp$wci_Vm_5_MAddrSpace,
       inf_cp$wci_Vm_5_SThreadBusy,
       inf_cp$wci_Vm_6_MAddrSpace,
       inf_cp$wci_Vm_6_SThreadBusy,
       inf_cp$wci_Vm_7_MAddrSpace,
       inf_cp$wci_Vm_7_SThreadBusy,
       inf_cp$wci_Vm_8_MAddrSpace,
       inf_cp$wci_Vm_8_SThreadBusy,
       inf_cp$wci_Vm_9_MAddrSpace,
       inf_cp$wci_Vm_9_SThreadBusy;

  // ports of submodule inf_dp0_bram_memory
  reg [31 : 0] inf_dp0_bram_memory$DIA, inf_dp0_bram_memory$DIB;
  reg [10 : 0] inf_dp0_bram_memory$ADDRA, inf_dp0_bram_memory$ADDRB;
  wire [31 : 0] inf_dp0_bram_memory$DOA, inf_dp0_bram_memory$DOB;
  wire inf_dp0_bram_memory$ENA,
       inf_dp0_bram_memory$ENB,
       inf_dp0_bram_memory$WEA,
       inf_dp0_bram_memory$WEB;

  // ports of submodule inf_dp0_bram_memory_1
  reg [31 : 0] inf_dp0_bram_memory_1$DIA, inf_dp0_bram_memory_1$DIB;
  reg [10 : 0] inf_dp0_bram_memory_1$ADDRA, inf_dp0_bram_memory_1$ADDRB;
  wire [31 : 0] inf_dp0_bram_memory_1$DOA, inf_dp0_bram_memory_1$DOB;
  wire inf_dp0_bram_memory_1$ENA,
       inf_dp0_bram_memory_1$ENB,
       inf_dp0_bram_memory_1$WEA,
       inf_dp0_bram_memory_1$WEB;

  // ports of submodule inf_dp0_bram_memory_2
  reg [31 : 0] inf_dp0_bram_memory_2$DIA, inf_dp0_bram_memory_2$DIB;
  reg [10 : 0] inf_dp0_bram_memory_2$ADDRA, inf_dp0_bram_memory_2$ADDRB;
  wire [31 : 0] inf_dp0_bram_memory_2$DOA, inf_dp0_bram_memory_2$DOB;
  wire inf_dp0_bram_memory_2$ENA,
       inf_dp0_bram_memory_2$ENB,
       inf_dp0_bram_memory_2$WEA,
       inf_dp0_bram_memory_2$WEB;

  // ports of submodule inf_dp0_bram_memory_3
  reg [31 : 0] inf_dp0_bram_memory_3$DIA, inf_dp0_bram_memory_3$DIB;
  reg [10 : 0] inf_dp0_bram_memory_3$ADDRA, inf_dp0_bram_memory_3$ADDRB;
  wire [31 : 0] inf_dp0_bram_memory_3$DOA, inf_dp0_bram_memory_3$DOB;
  wire inf_dp0_bram_memory_3$ENA,
       inf_dp0_bram_memory_3$ENB,
       inf_dp0_bram_memory_3$WEA,
       inf_dp0_bram_memory_3$WEB;

  // ports of submodule inf_dp0_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterA_1_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterA_1_outDataCore$CLR,
       inf_dp0_bram_serverAdapterA_1_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterA_1_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule inf_dp0_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterA_2_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterA_2_outDataCore$CLR,
       inf_dp0_bram_serverAdapterA_2_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterA_2_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule inf_dp0_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterA_3_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterA_3_outDataCore$CLR,
       inf_dp0_bram_serverAdapterA_3_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterA_3_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule inf_dp0_bram_serverAdapterA_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterA_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterA_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterA_outDataCore$CLR,
       inf_dp0_bram_serverAdapterA_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterA_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule inf_dp0_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterB_1_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterB_1_outDataCore$CLR,
       inf_dp0_bram_serverAdapterB_1_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterB_1_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule inf_dp0_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterB_2_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterB_2_outDataCore$CLR,
       inf_dp0_bram_serverAdapterB_2_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterB_2_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule inf_dp0_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterB_3_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterB_3_outDataCore$CLR,
       inf_dp0_bram_serverAdapterB_3_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterB_3_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule inf_dp0_bram_serverAdapterB_outDataCore
  wire [31 : 0] inf_dp0_bram_serverAdapterB_outDataCore$D_IN,
		inf_dp0_bram_serverAdapterB_outDataCore$D_OUT;
  wire inf_dp0_bram_serverAdapterB_outDataCore$CLR,
       inf_dp0_bram_serverAdapterB_outDataCore$DEQ,
       inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N,
       inf_dp0_bram_serverAdapterB_outDataCore$ENQ,
       inf_dp0_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule inf_dp0_tlp_inF
  wire [152 : 0] inf_dp0_tlp_inF$D_IN, inf_dp0_tlp_inF$D_OUT;
  wire inf_dp0_tlp_inF$CLR,
       inf_dp0_tlp_inF$DEQ,
       inf_dp0_tlp_inF$EMPTY_N,
       inf_dp0_tlp_inF$ENQ,
       inf_dp0_tlp_inF$FULL_N;

  // ports of submodule inf_dp0_tlp_mReqF
  reg [129 : 0] inf_dp0_tlp_mReqF$D_IN;
  wire [129 : 0] inf_dp0_tlp_mReqF$D_OUT;
  wire inf_dp0_tlp_mReqF$CLR,
       inf_dp0_tlp_mReqF$DEQ,
       inf_dp0_tlp_mReqF$EMPTY_N,
       inf_dp0_tlp_mReqF$ENQ,
       inf_dp0_tlp_mReqF$FULL_N;

  // ports of submodule inf_dp0_tlp_mRespF
  wire [138 : 0] inf_dp0_tlp_mRespF$D_IN, inf_dp0_tlp_mRespF$D_OUT;
  wire inf_dp0_tlp_mRespF$CLR,
       inf_dp0_tlp_mRespF$DEQ,
       inf_dp0_tlp_mRespF$EMPTY_N,
       inf_dp0_tlp_mRespF$ENQ,
       inf_dp0_tlp_mRespF$FULL_N;

  // ports of submodule inf_dp0_tlp_outF
  reg [152 : 0] inf_dp0_tlp_outF$D_IN;
  wire [152 : 0] inf_dp0_tlp_outF$D_OUT;
  wire inf_dp0_tlp_outF$CLR,
       inf_dp0_tlp_outF$DEQ,
       inf_dp0_tlp_outF$EMPTY_N,
       inf_dp0_tlp_outF$ENQ,
       inf_dp0_tlp_outF$FULL_N;

  // ports of submodule inf_dp0_tlp_readReq
  wire [59 : 0] inf_dp0_tlp_readReq$D_IN, inf_dp0_tlp_readReq$D_OUT;
  wire inf_dp0_tlp_readReq$CLR,
       inf_dp0_tlp_readReq$DEQ,
       inf_dp0_tlp_readReq$EMPTY_N,
       inf_dp0_tlp_readReq$ENQ,
       inf_dp0_tlp_readReq$FULL_N;

  // ports of submodule inf_dp0_wci_isReset
  wire inf_dp0_wci_isReset$VAL;

  // ports of submodule inf_dp0_wci_reqF
  wire [59 : 0] inf_dp0_wci_reqF$D_IN, inf_dp0_wci_reqF$D_OUT;
  wire inf_dp0_wci_reqF$CLR,
       inf_dp0_wci_reqF$DEQ,
       inf_dp0_wci_reqF$EMPTY_N,
       inf_dp0_wci_reqF$ENQ;

  // ports of submodule inf_dp0_wmi_wmi_dhF
  wire [37 : 0] inf_dp0_wmi_wmi_dhF$D_IN, inf_dp0_wmi_wmi_dhF$D_OUT;
  wire inf_dp0_wmi_wmi_dhF$CLR,
       inf_dp0_wmi_wmi_dhF$DEQ,
       inf_dp0_wmi_wmi_dhF$EMPTY_N,
       inf_dp0_wmi_wmi_dhF$ENQ,
       inf_dp0_wmi_wmi_dhF$FULL_N;

  // ports of submodule inf_dp0_wmi_wmi_isReset
  wire inf_dp0_wmi_wmi_isReset$VAL;

  // ports of submodule inf_dp0_wmi_wmi_mFlagF
  wire [31 : 0] inf_dp0_wmi_wmi_mFlagF$D_IN, inf_dp0_wmi_wmi_mFlagF$D_OUT;
  wire inf_dp0_wmi_wmi_mFlagF$CLR,
       inf_dp0_wmi_wmi_mFlagF$DEQ,
       inf_dp0_wmi_wmi_mFlagF$EMPTY_N,
       inf_dp0_wmi_wmi_mFlagF$ENQ,
       inf_dp0_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule inf_dp0_wmi_wmi_reqF
  wire [31 : 0] inf_dp0_wmi_wmi_reqF$D_IN, inf_dp0_wmi_wmi_reqF$D_OUT;
  wire inf_dp0_wmi_wmi_reqF$CLR,
       inf_dp0_wmi_wmi_reqF$DEQ,
       inf_dp0_wmi_wmi_reqF$EMPTY_N,
       inf_dp0_wmi_wmi_reqF$ENQ,
       inf_dp0_wmi_wmi_reqF$FULL_N;

  // ports of submodule inf_dp0_wti_isReset
  wire inf_dp0_wti_isReset$VAL;

  // ports of submodule inf_dp1_bram_memory
  reg [31 : 0] inf_dp1_bram_memory$DIA, inf_dp1_bram_memory$DIB;
  reg [10 : 0] inf_dp1_bram_memory$ADDRA, inf_dp1_bram_memory$ADDRB;
  wire [31 : 0] inf_dp1_bram_memory$DOA, inf_dp1_bram_memory$DOB;
  wire inf_dp1_bram_memory$ENA,
       inf_dp1_bram_memory$ENB,
       inf_dp1_bram_memory$WEA,
       inf_dp1_bram_memory$WEB;

  // ports of submodule inf_dp1_bram_memory_1
  reg [31 : 0] inf_dp1_bram_memory_1$DIA, inf_dp1_bram_memory_1$DIB;
  reg [10 : 0] inf_dp1_bram_memory_1$ADDRA, inf_dp1_bram_memory_1$ADDRB;
  wire [31 : 0] inf_dp1_bram_memory_1$DOA, inf_dp1_bram_memory_1$DOB;
  wire inf_dp1_bram_memory_1$ENA,
       inf_dp1_bram_memory_1$ENB,
       inf_dp1_bram_memory_1$WEA,
       inf_dp1_bram_memory_1$WEB;

  // ports of submodule inf_dp1_bram_memory_2
  reg [31 : 0] inf_dp1_bram_memory_2$DIA, inf_dp1_bram_memory_2$DIB;
  reg [10 : 0] inf_dp1_bram_memory_2$ADDRA, inf_dp1_bram_memory_2$ADDRB;
  wire [31 : 0] inf_dp1_bram_memory_2$DOA, inf_dp1_bram_memory_2$DOB;
  wire inf_dp1_bram_memory_2$ENA,
       inf_dp1_bram_memory_2$ENB,
       inf_dp1_bram_memory_2$WEA,
       inf_dp1_bram_memory_2$WEB;

  // ports of submodule inf_dp1_bram_memory_3
  reg [31 : 0] inf_dp1_bram_memory_3$DIA, inf_dp1_bram_memory_3$DIB;
  reg [10 : 0] inf_dp1_bram_memory_3$ADDRA, inf_dp1_bram_memory_3$ADDRB;
  wire [31 : 0] inf_dp1_bram_memory_3$DOA, inf_dp1_bram_memory_3$DOB;
  wire inf_dp1_bram_memory_3$ENA,
       inf_dp1_bram_memory_3$ENB,
       inf_dp1_bram_memory_3$WEA,
       inf_dp1_bram_memory_3$WEB;

  // ports of submodule inf_dp1_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterA_1_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterA_1_outDataCore$CLR,
       inf_dp1_bram_serverAdapterA_1_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterA_1_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule inf_dp1_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterA_2_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterA_2_outDataCore$CLR,
       inf_dp1_bram_serverAdapterA_2_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterA_2_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule inf_dp1_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterA_3_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterA_3_outDataCore$CLR,
       inf_dp1_bram_serverAdapterA_3_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterA_3_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule inf_dp1_bram_serverAdapterA_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterA_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterA_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterA_outDataCore$CLR,
       inf_dp1_bram_serverAdapterA_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterA_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule inf_dp1_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterB_1_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterB_1_outDataCore$CLR,
       inf_dp1_bram_serverAdapterB_1_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterB_1_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule inf_dp1_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterB_2_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterB_2_outDataCore$CLR,
       inf_dp1_bram_serverAdapterB_2_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterB_2_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule inf_dp1_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterB_3_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterB_3_outDataCore$CLR,
       inf_dp1_bram_serverAdapterB_3_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterB_3_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule inf_dp1_bram_serverAdapterB_outDataCore
  wire [31 : 0] inf_dp1_bram_serverAdapterB_outDataCore$D_IN,
		inf_dp1_bram_serverAdapterB_outDataCore$D_OUT;
  wire inf_dp1_bram_serverAdapterB_outDataCore$CLR,
       inf_dp1_bram_serverAdapterB_outDataCore$DEQ,
       inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N,
       inf_dp1_bram_serverAdapterB_outDataCore$ENQ,
       inf_dp1_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule inf_dp1_tlp_inF
  wire [152 : 0] inf_dp1_tlp_inF$D_IN, inf_dp1_tlp_inF$D_OUT;
  wire inf_dp1_tlp_inF$CLR,
       inf_dp1_tlp_inF$DEQ,
       inf_dp1_tlp_inF$EMPTY_N,
       inf_dp1_tlp_inF$ENQ,
       inf_dp1_tlp_inF$FULL_N;

  // ports of submodule inf_dp1_tlp_mReqF
  reg [129 : 0] inf_dp1_tlp_mReqF$D_IN;
  wire [129 : 0] inf_dp1_tlp_mReqF$D_OUT;
  wire inf_dp1_tlp_mReqF$CLR,
       inf_dp1_tlp_mReqF$DEQ,
       inf_dp1_tlp_mReqF$EMPTY_N,
       inf_dp1_tlp_mReqF$ENQ,
       inf_dp1_tlp_mReqF$FULL_N;

  // ports of submodule inf_dp1_tlp_mRespF
  wire [138 : 0] inf_dp1_tlp_mRespF$D_IN, inf_dp1_tlp_mRespF$D_OUT;
  wire inf_dp1_tlp_mRespF$CLR,
       inf_dp1_tlp_mRespF$DEQ,
       inf_dp1_tlp_mRespF$EMPTY_N,
       inf_dp1_tlp_mRespF$ENQ,
       inf_dp1_tlp_mRespF$FULL_N;

  // ports of submodule inf_dp1_tlp_outF
  reg [152 : 0] inf_dp1_tlp_outF$D_IN;
  wire [152 : 0] inf_dp1_tlp_outF$D_OUT;
  wire inf_dp1_tlp_outF$CLR,
       inf_dp1_tlp_outF$DEQ,
       inf_dp1_tlp_outF$EMPTY_N,
       inf_dp1_tlp_outF$ENQ,
       inf_dp1_tlp_outF$FULL_N;

  // ports of submodule inf_dp1_tlp_readReq
  wire [59 : 0] inf_dp1_tlp_readReq$D_IN, inf_dp1_tlp_readReq$D_OUT;
  wire inf_dp1_tlp_readReq$CLR,
       inf_dp1_tlp_readReq$DEQ,
       inf_dp1_tlp_readReq$EMPTY_N,
       inf_dp1_tlp_readReq$ENQ,
       inf_dp1_tlp_readReq$FULL_N;

  // ports of submodule inf_dp1_wci_isReset
  wire inf_dp1_wci_isReset$VAL;

  // ports of submodule inf_dp1_wci_reqF
  wire [59 : 0] inf_dp1_wci_reqF$D_IN, inf_dp1_wci_reqF$D_OUT;
  wire inf_dp1_wci_reqF$CLR,
       inf_dp1_wci_reqF$DEQ,
       inf_dp1_wci_reqF$EMPTY_N,
       inf_dp1_wci_reqF$ENQ;

  // ports of submodule inf_dp1_wmi_wmi_dhF
  wire [37 : 0] inf_dp1_wmi_wmi_dhF$D_IN, inf_dp1_wmi_wmi_dhF$D_OUT;
  wire inf_dp1_wmi_wmi_dhF$CLR,
       inf_dp1_wmi_wmi_dhF$DEQ,
       inf_dp1_wmi_wmi_dhF$EMPTY_N,
       inf_dp1_wmi_wmi_dhF$ENQ,
       inf_dp1_wmi_wmi_dhF$FULL_N;

  // ports of submodule inf_dp1_wmi_wmi_isReset
  wire inf_dp1_wmi_wmi_isReset$VAL;

  // ports of submodule inf_dp1_wmi_wmi_mFlagF
  wire [31 : 0] inf_dp1_wmi_wmi_mFlagF$D_IN, inf_dp1_wmi_wmi_mFlagF$D_OUT;
  wire inf_dp1_wmi_wmi_mFlagF$CLR,
       inf_dp1_wmi_wmi_mFlagF$DEQ,
       inf_dp1_wmi_wmi_mFlagF$EMPTY_N,
       inf_dp1_wmi_wmi_mFlagF$ENQ,
       inf_dp1_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule inf_dp1_wmi_wmi_reqF
  wire [31 : 0] inf_dp1_wmi_wmi_reqF$D_IN, inf_dp1_wmi_wmi_reqF$D_OUT;
  wire inf_dp1_wmi_wmi_reqF$CLR,
       inf_dp1_wmi_wmi_reqF$DEQ,
       inf_dp1_wmi_wmi_reqF$EMPTY_N,
       inf_dp1_wmi_wmi_reqF$ENQ,
       inf_dp1_wmi_wmi_reqF$FULL_N;

  // ports of submodule inf_dp1_wti_isReset
  wire inf_dp1_wti_isReset$VAL;

  // ports of submodule inf_itc0_now
  wire [63 : 0] inf_itc0_now$dD_OUT, inf_itc0_now$sD_IN;
  wire inf_itc0_now$sEN, inf_itc0_now$sRDY;

  // ports of submodule inf_itc1_now
  wire [63 : 0] inf_itc1_now$dD_OUT, inf_itc1_now$sD_IN;
  wire inf_itc1_now$sEN, inf_itc1_now$sRDY;

  // ports of submodule inf_sm0
  wire [152 : 0] inf_sm0$c0_request_get,
		 inf_sm0$c0_response_put,
		 inf_sm0$c1_request_get,
		 inf_sm0$c1_response_put,
		 inf_sm0$s_request_put,
		 inf_sm0$s_response_get;
  wire inf_sm0$EN_c0_request_get,
       inf_sm0$EN_c0_response_put,
       inf_sm0$EN_c1_request_get,
       inf_sm0$EN_c1_response_put,
       inf_sm0$EN_s_request_put,
       inf_sm0$EN_s_response_get,
       inf_sm0$RDY_c0_request_get,
       inf_sm0$RDY_c0_response_put,
       inf_sm0$RDY_c1_request_get,
       inf_sm0$RDY_c1_response_put,
       inf_sm0$RDY_s_request_put,
       inf_sm0$RDY_s_response_get;

  // ports of submodule inf_sm1
  wire [152 : 0] inf_sm1$c0_request_get,
		 inf_sm1$c0_response_put,
		 inf_sm1$c1_request_get,
		 inf_sm1$c1_response_put,
		 inf_sm1$s_request_put,
		 inf_sm1$s_response_get;
  wire inf_sm1$EN_c0_request_get,
       inf_sm1$EN_c0_response_put,
       inf_sm1$EN_c1_request_get,
       inf_sm1$EN_c1_response_put,
       inf_sm1$EN_s_request_put,
       inf_sm1$EN_s_response_get,
       inf_sm1$RDY_c0_request_get,
       inf_sm1$RDY_c0_response_put,
       inf_sm1$RDY_c1_request_get,
       inf_sm1$RDY_c1_response_put,
       inf_sm1$RDY_s_request_put,
       inf_sm1$RDY_s_response_get;

  // ports of submodule inf_sm2
  wire [152 : 0] inf_sm2$c0_request_get,
		 inf_sm2$c0_response_put,
		 inf_sm2$c1_response_put,
		 inf_sm2$s_request_put,
		 inf_sm2$s_response_get;
  wire inf_sm2$EN_c0_request_get,
       inf_sm2$EN_c0_response_put,
       inf_sm2$EN_c1_request_get,
       inf_sm2$EN_c1_response_put,
       inf_sm2$EN_s_request_put,
       inf_sm2$EN_s_response_get,
       inf_sm2$RDY_c0_request_get,
       inf_sm2$RDY_c0_response_put,
       inf_sm2$RDY_c1_request_get,
       inf_sm2$RDY_s_request_put,
       inf_sm2$RDY_s_response_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_app_appW2_fabRespCredit_accumulate,
       CAN_FIRE_RL_app_appW2_mesgPreRequest__dreg_update,
       CAN_FIRE_RL_app_appW2_operating_actions,
       CAN_FIRE_RL_app_appW2_respF_portA,
       CAN_FIRE_RL_app_appW2_respF_portB,
       CAN_FIRE_RL_app_appW2_respF_portB_read_data,
       CAN_FIRE_RL_app_appW2_wci_Es_doAlways_Req,
       CAN_FIRE_RL_app_appW2_wci_cfrd,
       CAN_FIRE_RL_app_appW2_wci_cfwr,
       CAN_FIRE_RL_app_appW2_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_app_appW2_wci_ctl_op_complete,
       CAN_FIRE_RL_app_appW2_wci_ctl_op_start,
       CAN_FIRE_RL_app_appW2_wci_ctrl_EiI,
       CAN_FIRE_RL_app_appW2_wci_ctrl_IsO,
       CAN_FIRE_RL_app_appW2_wci_ctrl_OrE,
       CAN_FIRE_RL_app_appW2_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_app_appW2_wci_reqF_enq,
       CAN_FIRE_RL_app_appW2_wci_request_decode,
       CAN_FIRE_RL_app_appW2_wci_respF_both,
       CAN_FIRE_RL_app_appW2_wci_respF_decCtr,
       CAN_FIRE_RL_app_appW2_wci_respF_deq,
       CAN_FIRE_RL_app_appW2_wci_respF_incCtr,
       CAN_FIRE_RL_app_appW2_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_app_appW2_wci_sThreadBusy_reg,
       CAN_FIRE_RL_app_appW2_wmi_Em_doAlways,
       CAN_FIRE_RL_app_appW2_wmi_dhF_both,
       CAN_FIRE_RL_app_appW2_wmi_dhF_decCtr,
       CAN_FIRE_RL_app_appW2_wmi_dhF_deq,
       CAN_FIRE_RL_app_appW2_wmi_dhF_incCtr,
       CAN_FIRE_RL_app_appW2_wmi_mFlagF_both,
       CAN_FIRE_RL_app_appW2_wmi_mFlagF_decCtr,
       CAN_FIRE_RL_app_appW2_wmi_mFlagF_incCtr,
       CAN_FIRE_RL_app_appW2_wmi_operateD__dreg_update,
       CAN_FIRE_RL_app_appW2_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW2_wmi_reqF_both,
       CAN_FIRE_RL_app_appW2_wmi_reqF_decCtr,
       CAN_FIRE_RL_app_appW2_wmi_reqF_deq,
       CAN_FIRE_RL_app_appW2_wmi_reqF_incCtr,
       CAN_FIRE_RL_app_appW2_wmi_respAdvance,
       CAN_FIRE_RL_app_appW2_wmi_sDataThreadBusy_d__dreg_update,
       CAN_FIRE_RL_app_appW2_wmi_sThreadBusy_d__dreg_update,
       CAN_FIRE_RL_app_appW2_wmrd_mesgBegin,
       CAN_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_app_appW2_wmrd_mesgBodyRequest,
       CAN_FIRE_RL_app_appW2_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi,
       CAN_FIRE_RL_app_appW2_wmwt_doAbort,
       CAN_FIRE_RL_app_appW2_wmwt_mesgBegin,
       CAN_FIRE_RL_app_appW2_wmwt_messageFinalize,
       CAN_FIRE_RL_app_appW2_wmwt_messagePushImprecise,
       CAN_FIRE_RL_app_appW2_wmwt_messagePushPrecise,
       CAN_FIRE_RL_app_appW2_wmwt_requestPrecise,
       CAN_FIRE_RL_app_appW2_wsiM_ext_status_assign,
       CAN_FIRE_RL_app_appW2_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_app_appW2_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_app_appW2_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW2_wsiM_reqFifo_both,
       CAN_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_app_appW2_wsiM_reqFifo_deq,
       CAN_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_app_appW2_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_app_appW2_wsiM_update_statusR,
       CAN_FIRE_RL_app_appW2_wsiS_backpressure,
       CAN_FIRE_RL_app_appW2_wsiS_ext_status_assign,
       CAN_FIRE_RL_app_appW2_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_app_appW2_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_app_appW2_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW2_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_app_appW2_wsiS_reqFifo_enq,
       CAN_FIRE_RL_app_appW2_wsiS_reqFifo_reset,
       CAN_FIRE_RL_app_appW2_wsiS_update_statusR,
       CAN_FIRE_RL_app_appW2_wsi_Es_doAlways,
       CAN_FIRE_RL_app_appW2_wsipass_doMessagePush,
       CAN_FIRE_RL_app_appW3_cycles_passed_count,
       CAN_FIRE_RL_app_appW3_delay_Fb2Fc,
       CAN_FIRE_RL_app_appW3_delay_read_req,
       CAN_FIRE_RL_app_appW3_delay_read_resp,
       CAN_FIRE_RL_app_appW3_delay_write_req,
       CAN_FIRE_RL_app_appW3_dlyReadCredit_accumulate,
       CAN_FIRE_RL_app_appW3_dlyReadyToWrite_accumulate,
       CAN_FIRE_RL_app_appW3_dlyWordsStored_accumulate,
       CAN_FIRE_RL_app_appW3_mesgWF_portA,
       CAN_FIRE_RL_app_appW3_mesgWF_portB,
       CAN_FIRE_RL_app_appW3_mesgWF_portB_read_data,
       CAN_FIRE_RL_app_appW3_operating_actions,
       CAN_FIRE_RL_app_appW3_rdSer_begin,
       CAN_FIRE_RL_app_appW3_rdSer_body,
       CAN_FIRE_RL_app_appW3_rdSer_sync,
       CAN_FIRE_RL_app_appW3_wci_Es_doAlways_Req,
       CAN_FIRE_RL_app_appW3_wci_cfrd,
       CAN_FIRE_RL_app_appW3_wci_cfwr,
       CAN_FIRE_RL_app_appW3_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_app_appW3_wci_ctl_op_complete,
       CAN_FIRE_RL_app_appW3_wci_ctl_op_start,
       CAN_FIRE_RL_app_appW3_wci_ctrl_EiI,
       CAN_FIRE_RL_app_appW3_wci_ctrl_IsO,
       CAN_FIRE_RL_app_appW3_wci_ctrl_OrE,
       CAN_FIRE_RL_app_appW3_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_app_appW3_wci_reqF_enq,
       CAN_FIRE_RL_app_appW3_wci_request_decode,
       CAN_FIRE_RL_app_appW3_wci_respF_both,
       CAN_FIRE_RL_app_appW3_wci_respF_decCtr,
       CAN_FIRE_RL_app_appW3_wci_respF_deq,
       CAN_FIRE_RL_app_appW3_wci_respF_incCtr,
       CAN_FIRE_RL_app_appW3_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_app_appW3_wci_sThreadBusy_reg,
       CAN_FIRE_RL_app_appW3_wmemi_Em_doAlways,
       CAN_FIRE_RL_app_appW3_wmemi_dhF_both,
       CAN_FIRE_RL_app_appW3_wmemi_dhF_decCtr,
       CAN_FIRE_RL_app_appW3_wmemi_dhF_deq,
       CAN_FIRE_RL_app_appW3_wmemi_dhF_incCtr,
       CAN_FIRE_RL_app_appW3_wmemi_operateD__dreg_update,
       CAN_FIRE_RL_app_appW3_wmemi_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW3_wmemi_reqF_both,
       CAN_FIRE_RL_app_appW3_wmemi_reqF_decCtr,
       CAN_FIRE_RL_app_appW3_wmemi_reqF_deq,
       CAN_FIRE_RL_app_appW3_wmemi_reqF_incCtr,
       CAN_FIRE_RL_app_appW3_wmemi_respAdvance,
       CAN_FIRE_RL_app_appW3_wmemi_update_statusR,
       CAN_FIRE_RL_app_appW3_wmrd_mesgBegin,
       CAN_FIRE_RL_app_appW3_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress,
       CAN_FIRE_RL_app_appW3_wrtSer_begin,
       CAN_FIRE_RL_app_appW3_wrtSer_body,
       CAN_FIRE_RL_app_appW3_wsiM_ext_status_assign,
       CAN_FIRE_RL_app_appW3_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_app_appW3_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_app_appW3_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW3_wsiM_reqFifo_both,
       CAN_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_app_appW3_wsiM_reqFifo_deq,
       CAN_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_app_appW3_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_app_appW3_wsiM_update_statusR,
       CAN_FIRE_RL_app_appW3_wsiS_backpressure,
       CAN_FIRE_RL_app_appW3_wsiS_ext_status_assign,
       CAN_FIRE_RL_app_appW3_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_app_appW3_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_app_appW3_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW3_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_app_appW3_wsiS_reqFifo_enq,
       CAN_FIRE_RL_app_appW3_wsiS_reqFifo_reset,
       CAN_FIRE_RL_app_appW3_wsiS_update_statusR,
       CAN_FIRE_RL_app_appW3_wsi_Es_doAlways,
       CAN_FIRE_RL_app_appW3_wsipass_doMessagePush,
       CAN_FIRE_RL_app_appW4_fabRespCredit_accumulate,
       CAN_FIRE_RL_app_appW4_mesgPreRequest__dreg_update,
       CAN_FIRE_RL_app_appW4_operating_actions,
       CAN_FIRE_RL_app_appW4_respF_portA,
       CAN_FIRE_RL_app_appW4_respF_portB,
       CAN_FIRE_RL_app_appW4_respF_portB_read_data,
       CAN_FIRE_RL_app_appW4_wci_Es_doAlways_Req,
       CAN_FIRE_RL_app_appW4_wci_cfrd,
       CAN_FIRE_RL_app_appW4_wci_cfwr,
       CAN_FIRE_RL_app_appW4_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_app_appW4_wci_ctl_op_complete,
       CAN_FIRE_RL_app_appW4_wci_ctl_op_start,
       CAN_FIRE_RL_app_appW4_wci_ctrl_EiI,
       CAN_FIRE_RL_app_appW4_wci_ctrl_IsO,
       CAN_FIRE_RL_app_appW4_wci_ctrl_OrE,
       CAN_FIRE_RL_app_appW4_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_app_appW4_wci_reqF_enq,
       CAN_FIRE_RL_app_appW4_wci_request_decode,
       CAN_FIRE_RL_app_appW4_wci_respF_both,
       CAN_FIRE_RL_app_appW4_wci_respF_decCtr,
       CAN_FIRE_RL_app_appW4_wci_respF_deq,
       CAN_FIRE_RL_app_appW4_wci_respF_incCtr,
       CAN_FIRE_RL_app_appW4_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_app_appW4_wci_sThreadBusy_reg,
       CAN_FIRE_RL_app_appW4_wmi_Em_doAlways,
       CAN_FIRE_RL_app_appW4_wmi_dhF_both,
       CAN_FIRE_RL_app_appW4_wmi_dhF_decCtr,
       CAN_FIRE_RL_app_appW4_wmi_dhF_deq,
       CAN_FIRE_RL_app_appW4_wmi_dhF_incCtr,
       CAN_FIRE_RL_app_appW4_wmi_mFlagF_both,
       CAN_FIRE_RL_app_appW4_wmi_mFlagF_decCtr,
       CAN_FIRE_RL_app_appW4_wmi_mFlagF_incCtr,
       CAN_FIRE_RL_app_appW4_wmi_operateD__dreg_update,
       CAN_FIRE_RL_app_appW4_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW4_wmi_reqF_both,
       CAN_FIRE_RL_app_appW4_wmi_reqF_decCtr,
       CAN_FIRE_RL_app_appW4_wmi_reqF_deq,
       CAN_FIRE_RL_app_appW4_wmi_reqF_incCtr,
       CAN_FIRE_RL_app_appW4_wmi_respAdvance,
       CAN_FIRE_RL_app_appW4_wmi_sDataThreadBusy_d__dreg_update,
       CAN_FIRE_RL_app_appW4_wmi_sThreadBusy_d__dreg_update,
       CAN_FIRE_RL_app_appW4_wmrd_mesgBegin,
       CAN_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_app_appW4_wmrd_mesgBodyRequest,
       CAN_FIRE_RL_app_appW4_wmrd_mesgBodyResponse,
       CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi,
       CAN_FIRE_RL_app_appW4_wmwt_doAbort,
       CAN_FIRE_RL_app_appW4_wmwt_mesgBegin,
       CAN_FIRE_RL_app_appW4_wmwt_messageFinalize,
       CAN_FIRE_RL_app_appW4_wmwt_messagePushImprecise,
       CAN_FIRE_RL_app_appW4_wmwt_messagePushPrecise,
       CAN_FIRE_RL_app_appW4_wmwt_requestPrecise,
       CAN_FIRE_RL_app_appW4_wsiM_ext_status_assign,
       CAN_FIRE_RL_app_appW4_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_app_appW4_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_app_appW4_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW4_wsiM_reqFifo_both,
       CAN_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_app_appW4_wsiM_reqFifo_deq,
       CAN_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_app_appW4_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_app_appW4_wsiM_update_statusR,
       CAN_FIRE_RL_app_appW4_wsiS_backpressure,
       CAN_FIRE_RL_app_appW4_wsiS_ext_status_assign,
       CAN_FIRE_RL_app_appW4_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_app_appW4_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_app_appW4_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_app_appW4_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_app_appW4_wsiS_reqFifo_enq,
       CAN_FIRE_RL_app_appW4_wsiS_reqFifo_reset,
       CAN_FIRE_RL_app_appW4_wsiS_update_statusR,
       CAN_FIRE_RL_app_appW4_wsi_Es_doAlways,
       CAN_FIRE_RL_app_appW4_wsipass_doMessagePush,
       CAN_FIRE_RL_app_mBurstLConnect,
       CAN_FIRE_RL_app_mBurstLConnect_1,
       CAN_FIRE_RL_app_mBurstPConnect,
       CAN_FIRE_RL_app_mBurstPConnect_1,
       CAN_FIRE_RL_app_mByteEnConnect,
       CAN_FIRE_RL_app_mByteEnConnect_1,
       CAN_FIRE_RL_app_mCmdConnect,
       CAN_FIRE_RL_app_mCmdConnect_1,
       CAN_FIRE_RL_app_mDataConnect,
       CAN_FIRE_RL_app_mDataConnect_1,
       CAN_FIRE_RL_app_mDataIConnect,
       CAN_FIRE_RL_app_mDataIConnect_1,
       CAN_FIRE_RL_app_mReqIConnect,
       CAN_FIRE_RL_app_mReqIConnect_1,
       CAN_FIRE_RL_app_mReqLConnect,
       CAN_FIRE_RL_app_mReqLConnect_1,
       CAN_FIRE_RL_app_mRstConnect,
       CAN_FIRE_RL_app_mRstConnect_1,
       CAN_FIRE_RL_app_sRstConnect,
       CAN_FIRE_RL_app_sRstConnect_1,
       CAN_FIRE_RL_app_stbConnect,
       CAN_FIRE_RL_app_stbConnect_1,
       CAN_FIRE_RL_inf_ClientServerRequest,
       CAN_FIRE_RL_inf_ClientServerRequest_1,
       CAN_FIRE_RL_inf_ClientServerRequest_2,
       CAN_FIRE_RL_inf_ClientServerRequest_3,
       CAN_FIRE_RL_inf_ClientServerRequest_4,
       CAN_FIRE_RL_inf_ClientServerResponse,
       CAN_FIRE_RL_inf_ClientServerResponse_1,
       CAN_FIRE_RL_inf_ClientServerResponse_2,
       CAN_FIRE_RL_inf_ClientServerResponse_3,
       CAN_FIRE_RL_inf_ClientServerResponse_4,
       CAN_FIRE_RL_inf_chomp_rogue,
       CAN_FIRE_RL_inf_dp0_assignControl,
       CAN_FIRE_RL_inf_dp0_bml_cntLclDone,
       CAN_FIRE_RL_inf_dp0_bml_cntLclStart,
       CAN_FIRE_RL_inf_dp0_bml_cntRemDone,
       CAN_FIRE_RL_inf_dp0_bml_cntRemStart,
       CAN_FIRE_RL_inf_dp0_bml_crdAdvance,
       CAN_FIRE_RL_inf_dp0_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_inf_dp0_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_inf_dp0_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_inf_dp0_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_inf_dp0_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_inf_dp0_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_inf_dp0_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_inf_dp0_bml_fabDone__dreg_update,
       CAN_FIRE_RL_inf_dp0_bml_fba,
       CAN_FIRE_RL_inf_dp0_bml_initAccumulators,
       CAN_FIRE_RL_inf_dp0_bml_lbar,
       CAN_FIRE_RL_inf_dp0_bml_lbcf,
       CAN_FIRE_RL_inf_dp0_bml_lclAdvance,
       CAN_FIRE_RL_inf_dp0_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_inf_dp0_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_inf_dp0_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_inf_dp0_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_inf_dp0_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_inf_dp0_bml_lcredit,
       CAN_FIRE_RL_inf_dp0_bml_remAdvance,
       CAN_FIRE_RL_inf_dp0_bml_remBuf_ruleDec,
       CAN_FIRE_RL_inf_dp0_bml_remBuf_ruleInc,
       CAN_FIRE_RL_inf_dp0_bml_remBuf_ruleMod,
       CAN_FIRE_RL_inf_dp0_bml_remDone__dreg_update,
       CAN_FIRE_RL_inf_dp0_bml_remStart__dreg_update,
       CAN_FIRE_RL_inf_dp0_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_inf_dp0_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp0_mkConnectionVtoAf,
       CAN_FIRE_RL_inf_dp0_operating_actions,
       CAN_FIRE_RL_inf_dp0_rBMesg,
       CAN_FIRE_RL_inf_dp0_rBMesg_1,
       CAN_FIRE_RL_inf_dp0_rBMeta,
       CAN_FIRE_RL_inf_dp0_rBMeta_1,
       CAN_FIRE_RL_inf_dp0_rCredit_1,
       CAN_FIRE_RL_inf_dp0_rDone,
       CAN_FIRE_RL_inf_dp0_rDone_1,
       CAN_FIRE_RL_inf_dp0_rFFlow_1,
       CAN_FIRE_RL_inf_dp0_rFMesg_1,
       CAN_FIRE_RL_inf_dp0_rFMeta_1,
       CAN_FIRE_RL_inf_dp0_rFRdy_1,
       CAN_FIRE_RL_inf_dp0_rRdy,
       CAN_FIRE_RL_inf_dp0_rRdy_1,
       CAN_FIRE_RL_inf_dp0_rStart,
       CAN_FIRE_RL_inf_dp0_rStart_1,
       CAN_FIRE_RL_inf_dp0_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_inf_dp0_tlp_dataXmt_Body,
       CAN_FIRE_RL_inf_dp0_tlp_dataXmt_Header,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_inf_dp0_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_inf_dp0_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_inf_dp0_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_inf_dp0_tlp_read_FirstReq,
       CAN_FIRE_RL_inf_dp0_tlp_read_FirstResp,
       CAN_FIRE_RL_inf_dp0_tlp_read_NextReq,
       CAN_FIRE_RL_inf_dp0_tlp_read_NextResp,
       CAN_FIRE_RL_inf_dp0_tlp_remDone__dreg_update,
       CAN_FIRE_RL_inf_dp0_tlp_remStart__dreg_update,
       CAN_FIRE_RL_inf_dp0_tlp_tlpRcv,
       CAN_FIRE_RL_inf_dp0_tlp_writeData,
       CAN_FIRE_RL_inf_dp0_tlp_writeReq,
       CAN_FIRE_RL_inf_dp0_wci_Es_doAlways_Req,
       CAN_FIRE_RL_inf_dp0_wci_cfrd,
       CAN_FIRE_RL_inf_dp0_wci_cfwr,
       CAN_FIRE_RL_inf_dp0_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_inf_dp0_wci_ctl_op_complete,
       CAN_FIRE_RL_inf_dp0_wci_ctl_op_start,
       CAN_FIRE_RL_inf_dp0_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp0_wci_reqF_enq,
       CAN_FIRE_RL_inf_dp0_wci_request_decode,
       CAN_FIRE_RL_inf_dp0_wci_respF_both,
       CAN_FIRE_RL_inf_dp0_wci_respF_decCtr,
       CAN_FIRE_RL_inf_dp0_wci_respF_deq,
       CAN_FIRE_RL_inf_dp0_wci_respF_incCtr,
       CAN_FIRE_RL_inf_dp0_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_inf_dp0_wci_sThreadBusy_reg,
       CAN_FIRE_RL_inf_dp0_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_inf_dp0_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_inf_dp0_wmi_doDwell,
       CAN_FIRE_RL_inf_dp0_wmi_doReadReq,
       CAN_FIRE_RL_inf_dp0_wmi_doReadResp,
       CAN_FIRE_RL_inf_dp0_wmi_doWriteFinalize,
       CAN_FIRE_RL_inf_dp0_wmi_doWriteReq,
       CAN_FIRE_RL_inf_dp0_wmi_getRequest,
       CAN_FIRE_RL_inf_dp0_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_inf_dp0_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_inf_dp0_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_inf_dp0_wmi_reqMetadata,
       CAN_FIRE_RL_inf_dp0_wmi_respMetadata,
       CAN_FIRE_RL_inf_dp0_wmi_throttleWmi,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_both,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_deq,
       CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_inf_dp1_assignControl,
       CAN_FIRE_RL_inf_dp1_bml_cntLclDone,
       CAN_FIRE_RL_inf_dp1_bml_cntLclStart,
       CAN_FIRE_RL_inf_dp1_bml_cntRemDone,
       CAN_FIRE_RL_inf_dp1_bml_cntRemStart,
       CAN_FIRE_RL_inf_dp1_bml_crdAdvance,
       CAN_FIRE_RL_inf_dp1_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_inf_dp1_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_inf_dp1_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_inf_dp1_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_inf_dp1_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_inf_dp1_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_inf_dp1_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_inf_dp1_bml_fabDone__dreg_update,
       CAN_FIRE_RL_inf_dp1_bml_fba,
       CAN_FIRE_RL_inf_dp1_bml_initAccumulators,
       CAN_FIRE_RL_inf_dp1_bml_lbar,
       CAN_FIRE_RL_inf_dp1_bml_lbcf,
       CAN_FIRE_RL_inf_dp1_bml_lclAdvance,
       CAN_FIRE_RL_inf_dp1_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_inf_dp1_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_inf_dp1_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_inf_dp1_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_inf_dp1_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_inf_dp1_bml_lcredit,
       CAN_FIRE_RL_inf_dp1_bml_remAdvance,
       CAN_FIRE_RL_inf_dp1_bml_remBuf_ruleDec,
       CAN_FIRE_RL_inf_dp1_bml_remBuf_ruleInc,
       CAN_FIRE_RL_inf_dp1_bml_remBuf_ruleMod,
       CAN_FIRE_RL_inf_dp1_bml_remDone__dreg_update,
       CAN_FIRE_RL_inf_dp1_bml_remStart__dreg_update,
       CAN_FIRE_RL_inf_dp1_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_inf_dp1_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_inf_dp1_mkConnectionVtoAf,
       CAN_FIRE_RL_inf_dp1_operating_actions,
       CAN_FIRE_RL_inf_dp1_rBMesg,
       CAN_FIRE_RL_inf_dp1_rBMesg_1,
       CAN_FIRE_RL_inf_dp1_rBMeta,
       CAN_FIRE_RL_inf_dp1_rBMeta_1,
       CAN_FIRE_RL_inf_dp1_rCredit_1,
       CAN_FIRE_RL_inf_dp1_rDone,
       CAN_FIRE_RL_inf_dp1_rDone_1,
       CAN_FIRE_RL_inf_dp1_rFFlow_1,
       CAN_FIRE_RL_inf_dp1_rFMesg_1,
       CAN_FIRE_RL_inf_dp1_rFMeta_1,
       CAN_FIRE_RL_inf_dp1_rFRdy_1,
       CAN_FIRE_RL_inf_dp1_rRdy,
       CAN_FIRE_RL_inf_dp1_rRdy_1,
       CAN_FIRE_RL_inf_dp1_rStart,
       CAN_FIRE_RL_inf_dp1_rStart_1,
       CAN_FIRE_RL_inf_dp1_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_inf_dp1_tlp_dataXmt_Body,
       CAN_FIRE_RL_inf_dp1_tlp_dataXmt_Header,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_inf_dp1_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_inf_dp1_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_inf_dp1_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_inf_dp1_tlp_read_FirstReq,
       CAN_FIRE_RL_inf_dp1_tlp_read_FirstResp,
       CAN_FIRE_RL_inf_dp1_tlp_read_NextReq,
       CAN_FIRE_RL_inf_dp1_tlp_read_NextResp,
       CAN_FIRE_RL_inf_dp1_tlp_remDone__dreg_update,
       CAN_FIRE_RL_inf_dp1_tlp_remStart__dreg_update,
       CAN_FIRE_RL_inf_dp1_tlp_tlpRcv,
       CAN_FIRE_RL_inf_dp1_tlp_writeData,
       CAN_FIRE_RL_inf_dp1_tlp_writeReq,
       CAN_FIRE_RL_inf_dp1_wci_Es_doAlways_Req,
       CAN_FIRE_RL_inf_dp1_wci_cfrd,
       CAN_FIRE_RL_inf_dp1_wci_cfwr,
       CAN_FIRE_RL_inf_dp1_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_inf_dp1_wci_ctl_op_complete,
       CAN_FIRE_RL_inf_dp1_wci_ctl_op_start,
       CAN_FIRE_RL_inf_dp1_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp1_wci_reqF_enq,
       CAN_FIRE_RL_inf_dp1_wci_request_decode,
       CAN_FIRE_RL_inf_dp1_wci_respF_both,
       CAN_FIRE_RL_inf_dp1_wci_respF_decCtr,
       CAN_FIRE_RL_inf_dp1_wci_respF_deq,
       CAN_FIRE_RL_inf_dp1_wci_respF_incCtr,
       CAN_FIRE_RL_inf_dp1_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_inf_dp1_wci_sThreadBusy_reg,
       CAN_FIRE_RL_inf_dp1_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_inf_dp1_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_inf_dp1_wmi_doDwell,
       CAN_FIRE_RL_inf_dp1_wmi_doReadReq,
       CAN_FIRE_RL_inf_dp1_wmi_doReadResp,
       CAN_FIRE_RL_inf_dp1_wmi_doWriteFinalize,
       CAN_FIRE_RL_inf_dp1_wmi_doWriteReq,
       CAN_FIRE_RL_inf_dp1_wmi_getRequest,
       CAN_FIRE_RL_inf_dp1_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_inf_dp1_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_inf_dp1_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_inf_dp1_wmi_reqMetadata,
       CAN_FIRE_RL_inf_dp1_wmi_respMetadata,
       CAN_FIRE_RL_inf_dp1_wmi_throttleWmi,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_both,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_deq,
       CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_inf_itc0_send_time,
       CAN_FIRE_RL_inf_itc0_wti_sThreadBusy_reg,
       CAN_FIRE_RL_inf_itc1_send_time,
       CAN_FIRE_RL_inf_itc1_wti_sThreadBusy_reg,
       CAN_FIRE_RL_inf_mAddrConnect,
       CAN_FIRE_RL_inf_mAddrConnect_1,
       CAN_FIRE_RL_inf_mAddrSConnect,
       CAN_FIRE_RL_inf_mAddrSConnect_1,
       CAN_FIRE_RL_inf_mBEConnect,
       CAN_FIRE_RL_inf_mBEConnect_1,
       CAN_FIRE_RL_inf_mCmdConnect,
       CAN_FIRE_RL_inf_mCmdConnect_1,
       CAN_FIRE_RL_inf_mDataConnect,
       CAN_FIRE_RL_inf_mDataConnect_1,
       CAN_FIRE_RL_inf_mkConnectionVtoAf,
       CAN_FIRE_RL_inf_mkConnectionVtoAf_1,
       CAN_FIRE_RL_inf_reqConnect,
       CAN_FIRE_RL_inf_reqConnect_1,
       CAN_FIRE_RL_inf_sDataConnect,
       CAN_FIRE_RL_inf_sDataConnect_1,
       CAN_FIRE_RL_inf_sFlagConnect,
       CAN_FIRE_RL_inf_sFlagConnect_1,
       CAN_FIRE_RL_inf_sRespConnect,
       CAN_FIRE_RL_inf_sRespConnect_1,
       CAN_FIRE_RL_inf_stbConnect,
       CAN_FIRE_RL_inf_stbConnect_1,
       CAN_FIRE_RL_inf_stbConnect_2,
       CAN_FIRE_RL_inf_stbConnect_3,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mAddrConnect_1,
       CAN_FIRE_RL_mAddrConnect_2,
       CAN_FIRE_RL_mAddrConnect_3,
       CAN_FIRE_RL_mAddrConnect_4,
       CAN_FIRE_RL_mAddrConnect_5,
       CAN_FIRE_RL_mAddrConnect_6,
       CAN_FIRE_RL_mAddrConnect_7,
       CAN_FIRE_RL_mAddrConnect_8,
       CAN_FIRE_RL_mAddrConnect_9,
       CAN_FIRE_RL_mAddrSConnect,
       CAN_FIRE_RL_mAddrSConnect_1,
       CAN_FIRE_RL_mAddrSConnect_2,
       CAN_FIRE_RL_mAddrSConnect_3,
       CAN_FIRE_RL_mAddrSConnect_4,
       CAN_FIRE_RL_mAddrSConnect_5,
       CAN_FIRE_RL_mAddrSConnect_6,
       CAN_FIRE_RL_mAddrSConnect_7,
       CAN_FIRE_RL_mAddrSConnect_8,
       CAN_FIRE_RL_mAddrSConnect_9,
       CAN_FIRE_RL_mBEConnect,
       CAN_FIRE_RL_mBEConnect_1,
       CAN_FIRE_RL_mBEConnect_2,
       CAN_FIRE_RL_mBEConnect_3,
       CAN_FIRE_RL_mBEConnect_4,
       CAN_FIRE_RL_mBEConnect_5,
       CAN_FIRE_RL_mBEConnect_6,
       CAN_FIRE_RL_mBEConnect_7,
       CAN_FIRE_RL_mBurstLConnect,
       CAN_FIRE_RL_mBurstLConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mCmdConnect_2,
       CAN_FIRE_RL_mCmdConnect_3,
       CAN_FIRE_RL_mCmdConnect_4,
       CAN_FIRE_RL_mCmdConnect_5,
       CAN_FIRE_RL_mCmdConnect_6,
       CAN_FIRE_RL_mCmdConnect_7,
       CAN_FIRE_RL_mCmdConnect_8,
       CAN_FIRE_RL_mCmdConnect_9,
       CAN_FIRE_RL_mDataBEConnect,
       CAN_FIRE_RL_mDataBEConnect_1,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mDataConnect_2,
       CAN_FIRE_RL_mDataConnect_3,
       CAN_FIRE_RL_mDataConnect_4,
       CAN_FIRE_RL_mDataConnect_5,
       CAN_FIRE_RL_mDataConnect_6,
       CAN_FIRE_RL_mDataConnect_7,
       CAN_FIRE_RL_mDataConnect_8,
       CAN_FIRE_RL_mDataConnect_9,
       CAN_FIRE_RL_mDataIConnect,
       CAN_FIRE_RL_mDataIConnect_1,
       CAN_FIRE_RL_mDataLConnect,
       CAN_FIRE_RL_mDataLConnect_1,
       CAN_FIRE_RL_mDataVConnect,
       CAN_FIRE_RL_mDataVConnect_1,
       CAN_FIRE_RL_mFlagConnect_8,
       CAN_FIRE_RL_mFlagConnect_9,
       CAN_FIRE_RL_mReqIConnect,
       CAN_FIRE_RL_mReqIConnect_1,
       CAN_FIRE_RL_mReqLConnect,
       CAN_FIRE_RL_mReqLConnect_1,
       CAN_FIRE_RL_mRstConnect,
       CAN_FIRE_RL_mRstConnect_1,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sDataConnect_1,
       CAN_FIRE_RL_sDataConnect_2,
       CAN_FIRE_RL_sDataConnect_3,
       CAN_FIRE_RL_sDataConnect_4,
       CAN_FIRE_RL_sDataConnect_5,
       CAN_FIRE_RL_sDataConnect_6,
       CAN_FIRE_RL_sDataConnect_7,
       CAN_FIRE_RL_sDataConnect_8,
       CAN_FIRE_RL_sDataConnect_9,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sFlagConnect_1,
       CAN_FIRE_RL_sFlagConnect_2,
       CAN_FIRE_RL_sFlagConnect_3,
       CAN_FIRE_RL_sFlagConnect_4,
       CAN_FIRE_RL_sFlagConnect_5,
       CAN_FIRE_RL_sFlagConnect_6,
       CAN_FIRE_RL_sFlagConnect_7,
       CAN_FIRE_RL_sFlagConnect_8,
       CAN_FIRE_RL_sFlagConnect_9,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRespConnect_1,
       CAN_FIRE_RL_sRespConnect_2,
       CAN_FIRE_RL_sRespConnect_3,
       CAN_FIRE_RL_sRespConnect_4,
       CAN_FIRE_RL_sRespConnect_5,
       CAN_FIRE_RL_sRespConnect_6,
       CAN_FIRE_RL_sRespConnect_7,
       CAN_FIRE_RL_sRespConnect_8,
       CAN_FIRE_RL_sRespConnect_9,
       CAN_FIRE_RL_sRstConnect,
       CAN_FIRE_RL_sRstConnect_1,
       CAN_FIRE_RL_sdtbConnect,
       CAN_FIRE_RL_sdtbConnect_1,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_RL_stbConnect_4,
       CAN_FIRE_RL_stbConnect_5,
       CAN_FIRE_RL_stbConnect_6,
       CAN_FIRE_RL_stbConnect_7,
       CAN_FIRE_RL_stbConnect_8,
       CAN_FIRE_RL_stbConnect_9,
       CAN_FIRE_gps_ppsSyncIn,
       CAN_FIRE_server_request_put,
       CAN_FIRE_server_response_get,
       CAN_FIRE_switch,
       CAN_FIRE_wci_m_0_sData,
       CAN_FIRE_wci_m_0_sFlag,
       CAN_FIRE_wci_m_0_sResp,
       CAN_FIRE_wci_m_0_sThreadBusy,
       CAN_FIRE_wci_m_1_sData,
       CAN_FIRE_wci_m_1_sFlag,
       CAN_FIRE_wci_m_1_sResp,
       CAN_FIRE_wci_m_1_sThreadBusy,
       CAN_FIRE_wci_m_2_sData,
       CAN_FIRE_wci_m_2_sFlag,
       CAN_FIRE_wci_m_2_sResp,
       CAN_FIRE_wci_m_2_sThreadBusy,
       CAN_FIRE_wci_m_3_sData,
       CAN_FIRE_wci_m_3_sFlag,
       CAN_FIRE_wci_m_3_sResp,
       CAN_FIRE_wci_m_3_sThreadBusy,
       CAN_FIRE_wci_m_4_sData,
       CAN_FIRE_wci_m_4_sFlag,
       CAN_FIRE_wci_m_4_sResp,
       CAN_FIRE_wci_m_4_sThreadBusy,
       CAN_FIRE_wmemiM_sCmdAccept,
       CAN_FIRE_wmemiM_sData,
       CAN_FIRE_wmemiM_sDataAccept,
       CAN_FIRE_wmemiM_sResp,
       CAN_FIRE_wmemiM_sRespLast,
       CAN_FIRE_wsi_m_dac_sReset_n,
       CAN_FIRE_wsi_m_dac_sThreadBusy,
       CAN_FIRE_wsi_s_adc_mBurstLength,
       CAN_FIRE_wsi_s_adc_mBurstPrecise,
       CAN_FIRE_wsi_s_adc_mByteEn,
       CAN_FIRE_wsi_s_adc_mCmd,
       CAN_FIRE_wsi_s_adc_mData,
       CAN_FIRE_wsi_s_adc_mDataInfo,
       CAN_FIRE_wsi_s_adc_mReqInfo,
       CAN_FIRE_wsi_s_adc_mReqLast,
       CAN_FIRE_wsi_s_adc_mReset_n,
       WILL_FIRE_RL_app_appW2_fabRespCredit_accumulate,
       WILL_FIRE_RL_app_appW2_mesgPreRequest__dreg_update,
       WILL_FIRE_RL_app_appW2_operating_actions,
       WILL_FIRE_RL_app_appW2_respF_portA,
       WILL_FIRE_RL_app_appW2_respF_portB,
       WILL_FIRE_RL_app_appW2_respF_portB_read_data,
       WILL_FIRE_RL_app_appW2_wci_Es_doAlways_Req,
       WILL_FIRE_RL_app_appW2_wci_cfrd,
       WILL_FIRE_RL_app_appW2_wci_cfwr,
       WILL_FIRE_RL_app_appW2_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_app_appW2_wci_ctl_op_complete,
       WILL_FIRE_RL_app_appW2_wci_ctl_op_start,
       WILL_FIRE_RL_app_appW2_wci_ctrl_EiI,
       WILL_FIRE_RL_app_appW2_wci_ctrl_IsO,
       WILL_FIRE_RL_app_appW2_wci_ctrl_OrE,
       WILL_FIRE_RL_app_appW2_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_app_appW2_wci_reqF_enq,
       WILL_FIRE_RL_app_appW2_wci_request_decode,
       WILL_FIRE_RL_app_appW2_wci_respF_both,
       WILL_FIRE_RL_app_appW2_wci_respF_decCtr,
       WILL_FIRE_RL_app_appW2_wci_respF_deq,
       WILL_FIRE_RL_app_appW2_wci_respF_incCtr,
       WILL_FIRE_RL_app_appW2_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_app_appW2_wci_sThreadBusy_reg,
       WILL_FIRE_RL_app_appW2_wmi_Em_doAlways,
       WILL_FIRE_RL_app_appW2_wmi_dhF_both,
       WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr,
       WILL_FIRE_RL_app_appW2_wmi_dhF_deq,
       WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr,
       WILL_FIRE_RL_app_appW2_wmi_mFlagF_both,
       WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_app_appW2_wmi_operateD__dreg_update,
       WILL_FIRE_RL_app_appW2_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW2_wmi_reqF_both,
       WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr,
       WILL_FIRE_RL_app_appW2_wmi_reqF_deq,
       WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr,
       WILL_FIRE_RL_app_appW2_wmi_respAdvance,
       WILL_FIRE_RL_app_appW2_wmi_sDataThreadBusy_d__dreg_update,
       WILL_FIRE_RL_app_appW2_wmi_sThreadBusy_d__dreg_update,
       WILL_FIRE_RL_app_appW2_wmrd_mesgBegin,
       WILL_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest,
       WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_app_appW2_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_app_appW2_wmwt_doAbort,
       WILL_FIRE_RL_app_appW2_wmwt_mesgBegin,
       WILL_FIRE_RL_app_appW2_wmwt_messageFinalize,
       WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise,
       WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise,
       WILL_FIRE_RL_app_appW2_wmwt_requestPrecise,
       WILL_FIRE_RL_app_appW2_wsiM_ext_status_assign,
       WILL_FIRE_RL_app_appW2_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_app_appW2_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_app_appW2_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both,
       WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_app_appW2_wsiM_reqFifo_deq,
       WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_app_appW2_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_app_appW2_wsiM_update_statusR,
       WILL_FIRE_RL_app_appW2_wsiS_backpressure,
       WILL_FIRE_RL_app_appW2_wsiS_ext_status_assign,
       WILL_FIRE_RL_app_appW2_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_app_appW2_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_app_appW2_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW2_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_app_appW2_wsiS_reqFifo_enq,
       WILL_FIRE_RL_app_appW2_wsiS_reqFifo_reset,
       WILL_FIRE_RL_app_appW2_wsiS_update_statusR,
       WILL_FIRE_RL_app_appW2_wsi_Es_doAlways,
       WILL_FIRE_RL_app_appW2_wsipass_doMessagePush,
       WILL_FIRE_RL_app_appW3_cycles_passed_count,
       WILL_FIRE_RL_app_appW3_delay_Fb2Fc,
       WILL_FIRE_RL_app_appW3_delay_read_req,
       WILL_FIRE_RL_app_appW3_delay_read_resp,
       WILL_FIRE_RL_app_appW3_delay_write_req,
       WILL_FIRE_RL_app_appW3_dlyReadCredit_accumulate,
       WILL_FIRE_RL_app_appW3_dlyReadyToWrite_accumulate,
       WILL_FIRE_RL_app_appW3_dlyWordsStored_accumulate,
       WILL_FIRE_RL_app_appW3_mesgWF_portA,
       WILL_FIRE_RL_app_appW3_mesgWF_portB,
       WILL_FIRE_RL_app_appW3_mesgWF_portB_read_data,
       WILL_FIRE_RL_app_appW3_operating_actions,
       WILL_FIRE_RL_app_appW3_rdSer_begin,
       WILL_FIRE_RL_app_appW3_rdSer_body,
       WILL_FIRE_RL_app_appW3_rdSer_sync,
       WILL_FIRE_RL_app_appW3_wci_Es_doAlways_Req,
       WILL_FIRE_RL_app_appW3_wci_cfrd,
       WILL_FIRE_RL_app_appW3_wci_cfwr,
       WILL_FIRE_RL_app_appW3_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_app_appW3_wci_ctl_op_complete,
       WILL_FIRE_RL_app_appW3_wci_ctl_op_start,
       WILL_FIRE_RL_app_appW3_wci_ctrl_EiI,
       WILL_FIRE_RL_app_appW3_wci_ctrl_IsO,
       WILL_FIRE_RL_app_appW3_wci_ctrl_OrE,
       WILL_FIRE_RL_app_appW3_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_app_appW3_wci_reqF_enq,
       WILL_FIRE_RL_app_appW3_wci_request_decode,
       WILL_FIRE_RL_app_appW3_wci_respF_both,
       WILL_FIRE_RL_app_appW3_wci_respF_decCtr,
       WILL_FIRE_RL_app_appW3_wci_respF_deq,
       WILL_FIRE_RL_app_appW3_wci_respF_incCtr,
       WILL_FIRE_RL_app_appW3_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_app_appW3_wci_sThreadBusy_reg,
       WILL_FIRE_RL_app_appW3_wmemi_Em_doAlways,
       WILL_FIRE_RL_app_appW3_wmemi_dhF_both,
       WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr,
       WILL_FIRE_RL_app_appW3_wmemi_dhF_deq,
       WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr,
       WILL_FIRE_RL_app_appW3_wmemi_operateD__dreg_update,
       WILL_FIRE_RL_app_appW3_wmemi_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW3_wmemi_reqF_both,
       WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr,
       WILL_FIRE_RL_app_appW3_wmemi_reqF_deq,
       WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr,
       WILL_FIRE_RL_app_appW3_wmemi_respAdvance,
       WILL_FIRE_RL_app_appW3_wmemi_update_statusR,
       WILL_FIRE_RL_app_appW3_wmrd_mesgBegin,
       WILL_FIRE_RL_app_appW3_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_app_appW3_wmwt_mesg_ingress,
       WILL_FIRE_RL_app_appW3_wrtSer_begin,
       WILL_FIRE_RL_app_appW3_wrtSer_body,
       WILL_FIRE_RL_app_appW3_wsiM_ext_status_assign,
       WILL_FIRE_RL_app_appW3_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_app_appW3_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_app_appW3_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both,
       WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_app_appW3_wsiM_reqFifo_deq,
       WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_app_appW3_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_app_appW3_wsiM_update_statusR,
       WILL_FIRE_RL_app_appW3_wsiS_backpressure,
       WILL_FIRE_RL_app_appW3_wsiS_ext_status_assign,
       WILL_FIRE_RL_app_appW3_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_app_appW3_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_app_appW3_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW3_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq,
       WILL_FIRE_RL_app_appW3_wsiS_reqFifo_reset,
       WILL_FIRE_RL_app_appW3_wsiS_update_statusR,
       WILL_FIRE_RL_app_appW3_wsi_Es_doAlways,
       WILL_FIRE_RL_app_appW3_wsipass_doMessagePush,
       WILL_FIRE_RL_app_appW4_fabRespCredit_accumulate,
       WILL_FIRE_RL_app_appW4_mesgPreRequest__dreg_update,
       WILL_FIRE_RL_app_appW4_operating_actions,
       WILL_FIRE_RL_app_appW4_respF_portA,
       WILL_FIRE_RL_app_appW4_respF_portB,
       WILL_FIRE_RL_app_appW4_respF_portB_read_data,
       WILL_FIRE_RL_app_appW4_wci_Es_doAlways_Req,
       WILL_FIRE_RL_app_appW4_wci_cfrd,
       WILL_FIRE_RL_app_appW4_wci_cfwr,
       WILL_FIRE_RL_app_appW4_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_app_appW4_wci_ctl_op_complete,
       WILL_FIRE_RL_app_appW4_wci_ctl_op_start,
       WILL_FIRE_RL_app_appW4_wci_ctrl_EiI,
       WILL_FIRE_RL_app_appW4_wci_ctrl_IsO,
       WILL_FIRE_RL_app_appW4_wci_ctrl_OrE,
       WILL_FIRE_RL_app_appW4_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_app_appW4_wci_reqF_enq,
       WILL_FIRE_RL_app_appW4_wci_request_decode,
       WILL_FIRE_RL_app_appW4_wci_respF_both,
       WILL_FIRE_RL_app_appW4_wci_respF_decCtr,
       WILL_FIRE_RL_app_appW4_wci_respF_deq,
       WILL_FIRE_RL_app_appW4_wci_respF_incCtr,
       WILL_FIRE_RL_app_appW4_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_app_appW4_wci_sThreadBusy_reg,
       WILL_FIRE_RL_app_appW4_wmi_Em_doAlways,
       WILL_FIRE_RL_app_appW4_wmi_dhF_both,
       WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr,
       WILL_FIRE_RL_app_appW4_wmi_dhF_deq,
       WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr,
       WILL_FIRE_RL_app_appW4_wmi_mFlagF_both,
       WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_app_appW4_wmi_operateD__dreg_update,
       WILL_FIRE_RL_app_appW4_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW4_wmi_reqF_both,
       WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr,
       WILL_FIRE_RL_app_appW4_wmi_reqF_deq,
       WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr,
       WILL_FIRE_RL_app_appW4_wmi_respAdvance,
       WILL_FIRE_RL_app_appW4_wmi_sDataThreadBusy_d__dreg_update,
       WILL_FIRE_RL_app_appW4_wmi_sThreadBusy_d__dreg_update,
       WILL_FIRE_RL_app_appW4_wmrd_mesgBegin,
       WILL_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest,
       WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_app_appW4_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_app_appW4_wmwt_doAbort,
       WILL_FIRE_RL_app_appW4_wmwt_mesgBegin,
       WILL_FIRE_RL_app_appW4_wmwt_messageFinalize,
       WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise,
       WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise,
       WILL_FIRE_RL_app_appW4_wmwt_requestPrecise,
       WILL_FIRE_RL_app_appW4_wsiM_ext_status_assign,
       WILL_FIRE_RL_app_appW4_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_app_appW4_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_app_appW4_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both,
       WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_app_appW4_wsiM_reqFifo_deq,
       WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_app_appW4_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_app_appW4_wsiM_update_statusR,
       WILL_FIRE_RL_app_appW4_wsiS_backpressure,
       WILL_FIRE_RL_app_appW4_wsiS_ext_status_assign,
       WILL_FIRE_RL_app_appW4_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_app_appW4_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_app_appW4_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_app_appW4_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq,
       WILL_FIRE_RL_app_appW4_wsiS_reqFifo_reset,
       WILL_FIRE_RL_app_appW4_wsiS_update_statusR,
       WILL_FIRE_RL_app_appW4_wsi_Es_doAlways,
       WILL_FIRE_RL_app_appW4_wsipass_doMessagePush,
       WILL_FIRE_RL_app_mBurstLConnect,
       WILL_FIRE_RL_app_mBurstLConnect_1,
       WILL_FIRE_RL_app_mBurstPConnect,
       WILL_FIRE_RL_app_mBurstPConnect_1,
       WILL_FIRE_RL_app_mByteEnConnect,
       WILL_FIRE_RL_app_mByteEnConnect_1,
       WILL_FIRE_RL_app_mCmdConnect,
       WILL_FIRE_RL_app_mCmdConnect_1,
       WILL_FIRE_RL_app_mDataConnect,
       WILL_FIRE_RL_app_mDataConnect_1,
       WILL_FIRE_RL_app_mDataIConnect,
       WILL_FIRE_RL_app_mDataIConnect_1,
       WILL_FIRE_RL_app_mReqIConnect,
       WILL_FIRE_RL_app_mReqIConnect_1,
       WILL_FIRE_RL_app_mReqLConnect,
       WILL_FIRE_RL_app_mReqLConnect_1,
       WILL_FIRE_RL_app_mRstConnect,
       WILL_FIRE_RL_app_mRstConnect_1,
       WILL_FIRE_RL_app_sRstConnect,
       WILL_FIRE_RL_app_sRstConnect_1,
       WILL_FIRE_RL_app_stbConnect,
       WILL_FIRE_RL_app_stbConnect_1,
       WILL_FIRE_RL_inf_ClientServerRequest,
       WILL_FIRE_RL_inf_ClientServerRequest_1,
       WILL_FIRE_RL_inf_ClientServerRequest_2,
       WILL_FIRE_RL_inf_ClientServerRequest_3,
       WILL_FIRE_RL_inf_ClientServerRequest_4,
       WILL_FIRE_RL_inf_ClientServerResponse,
       WILL_FIRE_RL_inf_ClientServerResponse_1,
       WILL_FIRE_RL_inf_ClientServerResponse_2,
       WILL_FIRE_RL_inf_ClientServerResponse_3,
       WILL_FIRE_RL_inf_ClientServerResponse_4,
       WILL_FIRE_RL_inf_chomp_rogue,
       WILL_FIRE_RL_inf_dp0_assignControl,
       WILL_FIRE_RL_inf_dp0_bml_cntLclDone,
       WILL_FIRE_RL_inf_dp0_bml_cntLclStart,
       WILL_FIRE_RL_inf_dp0_bml_cntRemDone,
       WILL_FIRE_RL_inf_dp0_bml_cntRemStart,
       WILL_FIRE_RL_inf_dp0_bml_crdAdvance,
       WILL_FIRE_RL_inf_dp0_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_inf_dp0_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_inf_dp0_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_inf_dp0_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_inf_dp0_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_inf_dp0_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_inf_dp0_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_inf_dp0_bml_fabDone__dreg_update,
       WILL_FIRE_RL_inf_dp0_bml_fba,
       WILL_FIRE_RL_inf_dp0_bml_initAccumulators,
       WILL_FIRE_RL_inf_dp0_bml_lbar,
       WILL_FIRE_RL_inf_dp0_bml_lbcf,
       WILL_FIRE_RL_inf_dp0_bml_lclAdvance,
       WILL_FIRE_RL_inf_dp0_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_inf_dp0_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_inf_dp0_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_inf_dp0_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_inf_dp0_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_inf_dp0_bml_lcredit,
       WILL_FIRE_RL_inf_dp0_bml_remAdvance,
       WILL_FIRE_RL_inf_dp0_bml_remBuf_ruleDec,
       WILL_FIRE_RL_inf_dp0_bml_remBuf_ruleInc,
       WILL_FIRE_RL_inf_dp0_bml_remBuf_ruleMod,
       WILL_FIRE_RL_inf_dp0_bml_remDone__dreg_update,
       WILL_FIRE_RL_inf_dp0_bml_remStart__dreg_update,
       WILL_FIRE_RL_inf_dp0_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_inf_dp0_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp0_mkConnectionVtoAf,
       WILL_FIRE_RL_inf_dp0_operating_actions,
       WILL_FIRE_RL_inf_dp0_rBMesg,
       WILL_FIRE_RL_inf_dp0_rBMesg_1,
       WILL_FIRE_RL_inf_dp0_rBMeta,
       WILL_FIRE_RL_inf_dp0_rBMeta_1,
       WILL_FIRE_RL_inf_dp0_rCredit_1,
       WILL_FIRE_RL_inf_dp0_rDone,
       WILL_FIRE_RL_inf_dp0_rDone_1,
       WILL_FIRE_RL_inf_dp0_rFFlow_1,
       WILL_FIRE_RL_inf_dp0_rFMesg_1,
       WILL_FIRE_RL_inf_dp0_rFMeta_1,
       WILL_FIRE_RL_inf_dp0_rFRdy_1,
       WILL_FIRE_RL_inf_dp0_rRdy,
       WILL_FIRE_RL_inf_dp0_rRdy_1,
       WILL_FIRE_RL_inf_dp0_rStart,
       WILL_FIRE_RL_inf_dp0_rStart_1,
       WILL_FIRE_RL_inf_dp0_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Body,
       WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_inf_dp0_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_inf_dp0_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_inf_dp0_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq,
       WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp,
       WILL_FIRE_RL_inf_dp0_tlp_read_NextReq,
       WILL_FIRE_RL_inf_dp0_tlp_read_NextResp,
       WILL_FIRE_RL_inf_dp0_tlp_remDone__dreg_update,
       WILL_FIRE_RL_inf_dp0_tlp_remStart__dreg_update,
       WILL_FIRE_RL_inf_dp0_tlp_tlpRcv,
       WILL_FIRE_RL_inf_dp0_tlp_writeData,
       WILL_FIRE_RL_inf_dp0_tlp_writeReq,
       WILL_FIRE_RL_inf_dp0_wci_Es_doAlways_Req,
       WILL_FIRE_RL_inf_dp0_wci_cfrd,
       WILL_FIRE_RL_inf_dp0_wci_cfwr,
       WILL_FIRE_RL_inf_dp0_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete,
       WILL_FIRE_RL_inf_dp0_wci_ctl_op_start,
       WILL_FIRE_RL_inf_dp0_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp0_wci_reqF_enq,
       WILL_FIRE_RL_inf_dp0_wci_request_decode,
       WILL_FIRE_RL_inf_dp0_wci_respF_both,
       WILL_FIRE_RL_inf_dp0_wci_respF_decCtr,
       WILL_FIRE_RL_inf_dp0_wci_respF_deq,
       WILL_FIRE_RL_inf_dp0_wci_respF_incCtr,
       WILL_FIRE_RL_inf_dp0_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_inf_dp0_wci_sThreadBusy_reg,
       WILL_FIRE_RL_inf_dp0_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_inf_dp0_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_inf_dp0_wmi_doDwell,
       WILL_FIRE_RL_inf_dp0_wmi_doReadReq,
       WILL_FIRE_RL_inf_dp0_wmi_doReadResp,
       WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize,
       WILL_FIRE_RL_inf_dp0_wmi_doWriteReq,
       WILL_FIRE_RL_inf_dp0_wmi_getRequest,
       WILL_FIRE_RL_inf_dp0_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_inf_dp0_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_inf_dp0_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_inf_dp0_wmi_reqMetadata,
       WILL_FIRE_RL_inf_dp0_wmi_respMetadata,
       WILL_FIRE_RL_inf_dp0_wmi_throttleWmi,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_deq,
       WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_inf_dp1_assignControl,
       WILL_FIRE_RL_inf_dp1_bml_cntLclDone,
       WILL_FIRE_RL_inf_dp1_bml_cntLclStart,
       WILL_FIRE_RL_inf_dp1_bml_cntRemDone,
       WILL_FIRE_RL_inf_dp1_bml_cntRemStart,
       WILL_FIRE_RL_inf_dp1_bml_crdAdvance,
       WILL_FIRE_RL_inf_dp1_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_inf_dp1_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_inf_dp1_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_inf_dp1_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_inf_dp1_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_inf_dp1_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_inf_dp1_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_inf_dp1_bml_fabDone__dreg_update,
       WILL_FIRE_RL_inf_dp1_bml_fba,
       WILL_FIRE_RL_inf_dp1_bml_initAccumulators,
       WILL_FIRE_RL_inf_dp1_bml_lbar,
       WILL_FIRE_RL_inf_dp1_bml_lbcf,
       WILL_FIRE_RL_inf_dp1_bml_lclAdvance,
       WILL_FIRE_RL_inf_dp1_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_inf_dp1_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_inf_dp1_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_inf_dp1_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_inf_dp1_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_inf_dp1_bml_lcredit,
       WILL_FIRE_RL_inf_dp1_bml_remAdvance,
       WILL_FIRE_RL_inf_dp1_bml_remBuf_ruleDec,
       WILL_FIRE_RL_inf_dp1_bml_remBuf_ruleInc,
       WILL_FIRE_RL_inf_dp1_bml_remBuf_ruleMod,
       WILL_FIRE_RL_inf_dp1_bml_remDone__dreg_update,
       WILL_FIRE_RL_inf_dp1_bml_remStart__dreg_update,
       WILL_FIRE_RL_inf_dp1_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_inf_dp1_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_inf_dp1_mkConnectionVtoAf,
       WILL_FIRE_RL_inf_dp1_operating_actions,
       WILL_FIRE_RL_inf_dp1_rBMesg,
       WILL_FIRE_RL_inf_dp1_rBMesg_1,
       WILL_FIRE_RL_inf_dp1_rBMeta,
       WILL_FIRE_RL_inf_dp1_rBMeta_1,
       WILL_FIRE_RL_inf_dp1_rCredit_1,
       WILL_FIRE_RL_inf_dp1_rDone,
       WILL_FIRE_RL_inf_dp1_rDone_1,
       WILL_FIRE_RL_inf_dp1_rFFlow_1,
       WILL_FIRE_RL_inf_dp1_rFMesg_1,
       WILL_FIRE_RL_inf_dp1_rFMeta_1,
       WILL_FIRE_RL_inf_dp1_rFRdy_1,
       WILL_FIRE_RL_inf_dp1_rRdy,
       WILL_FIRE_RL_inf_dp1_rRdy_1,
       WILL_FIRE_RL_inf_dp1_rStart,
       WILL_FIRE_RL_inf_dp1_rStart_1,
       WILL_FIRE_RL_inf_dp1_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Body,
       WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_inf_dp1_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_inf_dp1_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_inf_dp1_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq,
       WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp,
       WILL_FIRE_RL_inf_dp1_tlp_read_NextReq,
       WILL_FIRE_RL_inf_dp1_tlp_read_NextResp,
       WILL_FIRE_RL_inf_dp1_tlp_remDone__dreg_update,
       WILL_FIRE_RL_inf_dp1_tlp_remStart__dreg_update,
       WILL_FIRE_RL_inf_dp1_tlp_tlpRcv,
       WILL_FIRE_RL_inf_dp1_tlp_writeData,
       WILL_FIRE_RL_inf_dp1_tlp_writeReq,
       WILL_FIRE_RL_inf_dp1_wci_Es_doAlways_Req,
       WILL_FIRE_RL_inf_dp1_wci_cfrd,
       WILL_FIRE_RL_inf_dp1_wci_cfwr,
       WILL_FIRE_RL_inf_dp1_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete,
       WILL_FIRE_RL_inf_dp1_wci_ctl_op_start,
       WILL_FIRE_RL_inf_dp1_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp1_wci_reqF_enq,
       WILL_FIRE_RL_inf_dp1_wci_request_decode,
       WILL_FIRE_RL_inf_dp1_wci_respF_both,
       WILL_FIRE_RL_inf_dp1_wci_respF_decCtr,
       WILL_FIRE_RL_inf_dp1_wci_respF_deq,
       WILL_FIRE_RL_inf_dp1_wci_respF_incCtr,
       WILL_FIRE_RL_inf_dp1_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_inf_dp1_wci_sThreadBusy_reg,
       WILL_FIRE_RL_inf_dp1_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_inf_dp1_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_inf_dp1_wmi_doDwell,
       WILL_FIRE_RL_inf_dp1_wmi_doReadReq,
       WILL_FIRE_RL_inf_dp1_wmi_doReadResp,
       WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize,
       WILL_FIRE_RL_inf_dp1_wmi_doWriteReq,
       WILL_FIRE_RL_inf_dp1_wmi_getRequest,
       WILL_FIRE_RL_inf_dp1_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_inf_dp1_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_inf_dp1_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_inf_dp1_wmi_reqMetadata,
       WILL_FIRE_RL_inf_dp1_wmi_respMetadata,
       WILL_FIRE_RL_inf_dp1_wmi_throttleWmi,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_deq,
       WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_inf_itc0_send_time,
       WILL_FIRE_RL_inf_itc0_wti_sThreadBusy_reg,
       WILL_FIRE_RL_inf_itc1_send_time,
       WILL_FIRE_RL_inf_itc1_wti_sThreadBusy_reg,
       WILL_FIRE_RL_inf_mAddrConnect,
       WILL_FIRE_RL_inf_mAddrConnect_1,
       WILL_FIRE_RL_inf_mAddrSConnect,
       WILL_FIRE_RL_inf_mAddrSConnect_1,
       WILL_FIRE_RL_inf_mBEConnect,
       WILL_FIRE_RL_inf_mBEConnect_1,
       WILL_FIRE_RL_inf_mCmdConnect,
       WILL_FIRE_RL_inf_mCmdConnect_1,
       WILL_FIRE_RL_inf_mDataConnect,
       WILL_FIRE_RL_inf_mDataConnect_1,
       WILL_FIRE_RL_inf_mkConnectionVtoAf,
       WILL_FIRE_RL_inf_mkConnectionVtoAf_1,
       WILL_FIRE_RL_inf_reqConnect,
       WILL_FIRE_RL_inf_reqConnect_1,
       WILL_FIRE_RL_inf_sDataConnect,
       WILL_FIRE_RL_inf_sDataConnect_1,
       WILL_FIRE_RL_inf_sFlagConnect,
       WILL_FIRE_RL_inf_sFlagConnect_1,
       WILL_FIRE_RL_inf_sRespConnect,
       WILL_FIRE_RL_inf_sRespConnect_1,
       WILL_FIRE_RL_inf_stbConnect,
       WILL_FIRE_RL_inf_stbConnect_1,
       WILL_FIRE_RL_inf_stbConnect_2,
       WILL_FIRE_RL_inf_stbConnect_3,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mAddrConnect_1,
       WILL_FIRE_RL_mAddrConnect_2,
       WILL_FIRE_RL_mAddrConnect_3,
       WILL_FIRE_RL_mAddrConnect_4,
       WILL_FIRE_RL_mAddrConnect_5,
       WILL_FIRE_RL_mAddrConnect_6,
       WILL_FIRE_RL_mAddrConnect_7,
       WILL_FIRE_RL_mAddrConnect_8,
       WILL_FIRE_RL_mAddrConnect_9,
       WILL_FIRE_RL_mAddrSConnect,
       WILL_FIRE_RL_mAddrSConnect_1,
       WILL_FIRE_RL_mAddrSConnect_2,
       WILL_FIRE_RL_mAddrSConnect_3,
       WILL_FIRE_RL_mAddrSConnect_4,
       WILL_FIRE_RL_mAddrSConnect_5,
       WILL_FIRE_RL_mAddrSConnect_6,
       WILL_FIRE_RL_mAddrSConnect_7,
       WILL_FIRE_RL_mAddrSConnect_8,
       WILL_FIRE_RL_mAddrSConnect_9,
       WILL_FIRE_RL_mBEConnect,
       WILL_FIRE_RL_mBEConnect_1,
       WILL_FIRE_RL_mBEConnect_2,
       WILL_FIRE_RL_mBEConnect_3,
       WILL_FIRE_RL_mBEConnect_4,
       WILL_FIRE_RL_mBEConnect_5,
       WILL_FIRE_RL_mBEConnect_6,
       WILL_FIRE_RL_mBEConnect_7,
       WILL_FIRE_RL_mBurstLConnect,
       WILL_FIRE_RL_mBurstLConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mCmdConnect_2,
       WILL_FIRE_RL_mCmdConnect_3,
       WILL_FIRE_RL_mCmdConnect_4,
       WILL_FIRE_RL_mCmdConnect_5,
       WILL_FIRE_RL_mCmdConnect_6,
       WILL_FIRE_RL_mCmdConnect_7,
       WILL_FIRE_RL_mCmdConnect_8,
       WILL_FIRE_RL_mCmdConnect_9,
       WILL_FIRE_RL_mDataBEConnect,
       WILL_FIRE_RL_mDataBEConnect_1,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mDataConnect_2,
       WILL_FIRE_RL_mDataConnect_3,
       WILL_FIRE_RL_mDataConnect_4,
       WILL_FIRE_RL_mDataConnect_5,
       WILL_FIRE_RL_mDataConnect_6,
       WILL_FIRE_RL_mDataConnect_7,
       WILL_FIRE_RL_mDataConnect_8,
       WILL_FIRE_RL_mDataConnect_9,
       WILL_FIRE_RL_mDataIConnect,
       WILL_FIRE_RL_mDataIConnect_1,
       WILL_FIRE_RL_mDataLConnect,
       WILL_FIRE_RL_mDataLConnect_1,
       WILL_FIRE_RL_mDataVConnect,
       WILL_FIRE_RL_mDataVConnect_1,
       WILL_FIRE_RL_mFlagConnect_8,
       WILL_FIRE_RL_mFlagConnect_9,
       WILL_FIRE_RL_mReqIConnect,
       WILL_FIRE_RL_mReqIConnect_1,
       WILL_FIRE_RL_mReqLConnect,
       WILL_FIRE_RL_mReqLConnect_1,
       WILL_FIRE_RL_mRstConnect,
       WILL_FIRE_RL_mRstConnect_1,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sDataConnect_1,
       WILL_FIRE_RL_sDataConnect_2,
       WILL_FIRE_RL_sDataConnect_3,
       WILL_FIRE_RL_sDataConnect_4,
       WILL_FIRE_RL_sDataConnect_5,
       WILL_FIRE_RL_sDataConnect_6,
       WILL_FIRE_RL_sDataConnect_7,
       WILL_FIRE_RL_sDataConnect_8,
       WILL_FIRE_RL_sDataConnect_9,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sFlagConnect_1,
       WILL_FIRE_RL_sFlagConnect_2,
       WILL_FIRE_RL_sFlagConnect_3,
       WILL_FIRE_RL_sFlagConnect_4,
       WILL_FIRE_RL_sFlagConnect_5,
       WILL_FIRE_RL_sFlagConnect_6,
       WILL_FIRE_RL_sFlagConnect_7,
       WILL_FIRE_RL_sFlagConnect_8,
       WILL_FIRE_RL_sFlagConnect_9,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRespConnect_1,
       WILL_FIRE_RL_sRespConnect_2,
       WILL_FIRE_RL_sRespConnect_3,
       WILL_FIRE_RL_sRespConnect_4,
       WILL_FIRE_RL_sRespConnect_5,
       WILL_FIRE_RL_sRespConnect_6,
       WILL_FIRE_RL_sRespConnect_7,
       WILL_FIRE_RL_sRespConnect_8,
       WILL_FIRE_RL_sRespConnect_9,
       WILL_FIRE_RL_sRstConnect,
       WILL_FIRE_RL_sRstConnect_1,
       WILL_FIRE_RL_sdtbConnect,
       WILL_FIRE_RL_sdtbConnect_1,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_RL_stbConnect_4,
       WILL_FIRE_RL_stbConnect_5,
       WILL_FIRE_RL_stbConnect_6,
       WILL_FIRE_RL_stbConnect_7,
       WILL_FIRE_RL_stbConnect_8,
       WILL_FIRE_RL_stbConnect_9,
       WILL_FIRE_gps_ppsSyncIn,
       WILL_FIRE_server_request_put,
       WILL_FIRE_server_response_get,
       WILL_FIRE_switch,
       WILL_FIRE_wci_m_0_sData,
       WILL_FIRE_wci_m_0_sFlag,
       WILL_FIRE_wci_m_0_sResp,
       WILL_FIRE_wci_m_0_sThreadBusy,
       WILL_FIRE_wci_m_1_sData,
       WILL_FIRE_wci_m_1_sFlag,
       WILL_FIRE_wci_m_1_sResp,
       WILL_FIRE_wci_m_1_sThreadBusy,
       WILL_FIRE_wci_m_2_sData,
       WILL_FIRE_wci_m_2_sFlag,
       WILL_FIRE_wci_m_2_sResp,
       WILL_FIRE_wci_m_2_sThreadBusy,
       WILL_FIRE_wci_m_3_sData,
       WILL_FIRE_wci_m_3_sFlag,
       WILL_FIRE_wci_m_3_sResp,
       WILL_FIRE_wci_m_3_sThreadBusy,
       WILL_FIRE_wci_m_4_sData,
       WILL_FIRE_wci_m_4_sFlag,
       WILL_FIRE_wci_m_4_sResp,
       WILL_FIRE_wci_m_4_sThreadBusy,
       WILL_FIRE_wmemiM_sCmdAccept,
       WILL_FIRE_wmemiM_sData,
       WILL_FIRE_wmemiM_sDataAccept,
       WILL_FIRE_wmemiM_sResp,
       WILL_FIRE_wmemiM_sRespLast,
       WILL_FIRE_wsi_m_dac_sReset_n,
       WILL_FIRE_wsi_m_dac_sThreadBusy,
       WILL_FIRE_wsi_s_adc_mBurstLength,
       WILL_FIRE_wsi_s_adc_mBurstPrecise,
       WILL_FIRE_wsi_s_adc_mByteEn,
       WILL_FIRE_wsi_s_adc_mCmd,
       WILL_FIRE_wsi_s_adc_mData,
       WILL_FIRE_wsi_s_adc_mDataInfo,
       WILL_FIRE_wsi_s_adc_mReqInfo,
       WILL_FIRE_wsi_s_adc_mReqLast,
       WILL_FIRE_wsi_s_adc_mReset_n;

  // inputs to muxes for submodule ports
  reg [127 : 0] MUX_app_appW3_wide16Fa$enq_1__VAL_1,
		MUX_app_appW3_wide16Fa$enq_1__VAL_2;
  reg [33 : 0] MUX_app_appW2_wci_respF_q_0$write_1__VAL_2,
	       MUX_app_appW3_wci_respF_q_0$write_1__VAL_2,
	       MUX_app_appW4_wci_respF_q_0$write_1__VAL_1,
	       MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2,
	       MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2;
  reg [31 : 0] MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2,
	       MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1;
  reg [10 : 0] MUX_inf_dp0_bram_memory$a_put_2__VAL_3,
	       MUX_inf_dp0_bram_memory$a_put_2__VAL_4,
	       MUX_inf_dp0_bram_memory_1$a_put_2__VAL_3,
	       MUX_inf_dp0_bram_memory_1$a_put_2__VAL_4,
	       MUX_inf_dp0_bram_memory_2$a_put_2__VAL_3,
	       MUX_inf_dp0_bram_memory_2$a_put_2__VAL_4,
	       MUX_inf_dp0_bram_memory_3$a_put_2__VAL_3,
	       MUX_inf_dp0_bram_memory_3$a_put_2__VAL_4,
	       MUX_inf_dp1_bram_memory$a_put_2__VAL_3,
	       MUX_inf_dp1_bram_memory$a_put_2__VAL_4,
	       MUX_inf_dp1_bram_memory_1$a_put_2__VAL_3,
	       MUX_inf_dp1_bram_memory_1$a_put_2__VAL_4,
	       MUX_inf_dp1_bram_memory_2$a_put_2__VAL_3,
	       MUX_inf_dp1_bram_memory_2$a_put_2__VAL_4,
	       MUX_inf_dp1_bram_memory_3$a_put_2__VAL_3,
	       MUX_inf_dp1_bram_memory_3$a_put_2__VAL_4;
  wire [152 : 0] MUX_inf_dp0_tlp_outF$enq_1__VAL_1,
		 MUX_inf_dp0_tlp_outF$enq_1__VAL_2,
		 MUX_inf_dp0_tlp_outF$enq_1__VAL_3,
		 MUX_inf_dp0_tlp_outF$enq_1__VAL_4,
		 MUX_inf_dp0_tlp_outF$enq_1__VAL_5,
		 MUX_inf_dp0_tlp_outF$enq_1__VAL_6,
		 MUX_inf_dp0_tlp_outF$enq_1__VAL_7,
		 MUX_inf_dp0_tlp_outF$enq_1__VAL_8,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_1,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_2,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_3,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_4,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_5,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_6,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_7,
		 MUX_inf_dp1_tlp_outF$enq_1__VAL_8;
  wire [145 : 0] MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_1,
		 MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2,
		 MUX_app_appW3_wmemi_dhF_q_1$write_1__VAL_1;
  wire [138 : 0] MUX_inf_dp0_tlp_mRespF$enq_1__VAL_1,
		 MUX_inf_dp0_tlp_mRespF$enq_1__VAL_2,
		 MUX_inf_dp1_tlp_mRespF$enq_1__VAL_1,
		 MUX_inf_dp1_tlp_mRespF$enq_1__VAL_2;
  wire [129 : 0] MUX_inf_dp0_tlp_mReqF$enq_1__VAL_1,
		 MUX_inf_dp0_tlp_mReqF$enq_1__VAL_2,
		 MUX_inf_dp0_tlp_mReqF$enq_1__VAL_3,
		 MUX_inf_dp0_tlp_mReqF$enq_1__VAL_4,
		 MUX_inf_dp0_tlp_mReqF$enq_1__VAL_5,
		 MUX_inf_dp0_tlp_mReqF$enq_1__VAL_6,
		 MUX_inf_dp1_tlp_mReqF$enq_1__VAL_1,
		 MUX_inf_dp1_tlp_mReqF$enq_1__VAL_2,
		 MUX_inf_dp1_tlp_mReqF$enq_1__VAL_3,
		 MUX_inf_dp1_tlp_mReqF$enq_1__VAL_4,
		 MUX_inf_dp1_tlp_mReqF$enq_1__VAL_5,
		 MUX_inf_dp1_tlp_mReqF$enq_1__VAL_6;
  wire [128 : 0] MUX_inf_dp0_tlp_fabMeta$write_1__VAL_1,
		 MUX_inf_dp0_tlp_fabMeta$write_1__VAL_2,
		 MUX_inf_dp0_wmi_mesgMeta$write_1__VAL_2,
		 MUX_inf_dp1_tlp_fabMeta$write_1__VAL_1,
		 MUX_inf_dp1_tlp_fabMeta$write_1__VAL_2,
		 MUX_inf_dp1_wmi_mesgMeta$write_1__VAL_2;
  wire [60 : 0] MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3,
		MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_app_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1,
		MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3;
  wire [51 : 0] MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_1,
		MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2,
		MUX_app_appW3_wmemi_reqF_q_1$write_1__VAL_1,
		MUX_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_1,
		MUX_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_2;
  wire [37 : 0] MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_1,
		MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2,
		MUX_app_appW2_wmi_dhF_q_1$write_1__VAL_1,
		MUX_app_appW2_wmi_dhF_x_wire$wset_1__VAL_1,
		MUX_app_appW2_wmi_dhF_x_wire$wset_1__VAL_2,
		MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1,
		MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_2,
		MUX_app_appW4_wmi_dhF_q_1$write_1__VAL_2,
		MUX_app_appW4_wmi_dhF_x_wire$wset_1__VAL_1,
		MUX_app_appW4_wmi_dhF_x_wire$wset_1__VAL_2;
  wire [33 : 0] MUX_app_appW2_wci_respF_q_0$write_1__VAL_1,
		MUX_app_appW2_wci_respF_q_1$write_1__VAL_1,
		MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_1,
		MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_2,
		MUX_app_appW3_wci_respF_q_0$write_1__VAL_1,
		MUX_app_appW3_wci_respF_q_1$write_1__VAL_1,
		MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_1,
		MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_2,
		MUX_app_appW4_wci_respF_q_0$write_1__VAL_2,
		MUX_app_appW4_wci_respF_q_1$write_1__VAL_2,
		MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_1,
		MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_2,
		MUX_inf_dp0_wci_respF_q_0$write_1__VAL_1,
		MUX_inf_dp0_wci_respF_q_1$write_1__VAL_1,
		MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_1,
		MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_2,
		MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1,
		MUX_inf_dp1_wci_respF_q_0$write_1__VAL_1,
		MUX_inf_dp1_wci_respF_q_1$write_1__VAL_1,
		MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_1,
		MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_2,
		MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1,
		MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2,
		MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
  wire [31 : 0] MUX_app_appW2_mesgCount$write_1__VAL_1,
		MUX_app_appW2_thisMesg$write_1__VAL_1,
		MUX_app_appW2_thisMesg$write_1__VAL_2,
		MUX_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1,
		MUX_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1,
		MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3,
		MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_1,
		MUX_app_appW2_wmi_reqF_q_1$write_1__VAL_1,
		MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2,
		MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3,
		MUX_app_appW3_mesgRdCount$write_1__VAL_1,
		MUX_app_appW3_mesgWtCount$write_1__VAL_1,
		MUX_app_appW4_mesgCount$write_1__VAL_1,
		MUX_app_appW4_thisMesg$write_1__VAL_1,
		MUX_app_appW4_thisMesg$write_1__VAL_2,
		MUX_app_appW4_wmi_mFlagF_q_0$write_1__VAL_2,
		MUX_app_appW4_wmi_mFlagF_q_1$write_1__VAL_2,
		MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3,
		MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_2,
		MUX_app_appW4_wmi_reqF_q_1$write_1__VAL_2,
		MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2,
		MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3,
		MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_1,
		MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_3,
		MUX_inf_dp0_bml_fabMesgAddr$write_1__VAL_1,
		MUX_inf_dp0_bml_fabMetaAddr$write_1__VAL_1,
		MUX_inf_dp0_bram_memory$a_put_3__VAL_1,
		MUX_inf_dp0_bram_memory$a_put_3__VAL_3,
		MUX_inf_dp0_bram_memory_1$a_put_3__VAL_3,
		MUX_inf_dp0_bram_memory_2$a_put_3__VAL_3,
		MUX_inf_dp0_bram_memory_3$a_put_3__VAL_3,
		MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_inf_dp0_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_inf_dp0_wmi_mesgCount$write_1__VAL_1,
		MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_1,
		MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_3,
		MUX_inf_dp1_bml_fabMesgAddr$write_1__VAL_1,
		MUX_inf_dp1_bml_fabMetaAddr$write_1__VAL_1,
		MUX_inf_dp1_bram_memory$a_put_3__VAL_1,
		MUX_inf_dp1_bram_memory$a_put_3__VAL_3,
		MUX_inf_dp1_bram_memory_1$a_put_3__VAL_3,
		MUX_inf_dp1_bram_memory_2$a_put_3__VAL_3,
		MUX_inf_dp1_bram_memory_3$a_put_3__VAL_3,
		MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_inf_dp1_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_inf_dp1_wmi_mesgCount$write_1__VAL_1;
  wire [24 : 0] MUX_app_appW3_dlyWordsStored_value$write_1__VAL_2;
  wire [22 : 0] MUX_app_appW3_dlyRAG$write_1__VAL_1,
		MUX_app_appW3_dlyWAG$write_1__VAL_1;
  wire [16 : 0] MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2,
		MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2;
  wire [15 : 0] MUX_app_appW2_unrollCnt$write_1__VAL_1,
		MUX_app_appW2_unrollCnt$write_1__VAL_2,
		MUX_app_appW3_dlyReadyToWrite_value$write_1__VAL_2,
		MUX_app_appW3_rdSerUnroll$write_1__VAL_2,
		MUX_app_appW3_unrollCnt$write_1__VAL_1,
		MUX_app_appW3_unrollCnt$write_1__VAL_2,
		MUX_app_appW3_wrtSerUnroll$write_1__VAL_2,
		MUX_app_appW4_unrollCnt$write_1__VAL_1,
		MUX_app_appW4_unrollCnt$write_1__VAL_2,
		MUX_inf_dp0_bml_crdBuf_value$write_1__VAL_3,
		MUX_inf_dp0_bml_fabBuf_value$write_1__VAL_3,
		MUX_inf_dp0_bml_fabBufsAvail$write_1__VAL_1,
		MUX_inf_dp0_bml_fabBufsAvail$write_1__VAL_2,
		MUX_inf_dp0_bml_lclBuf_value$write_1__VAL_3,
		MUX_inf_dp0_bml_lclBufsAR$write_1__VAL_1,
		MUX_inf_dp0_bml_lclBufsAR$write_1__VAL_2,
		MUX_inf_dp0_bml_lclBufsCF$write_1__VAL_1,
		MUX_inf_dp0_bml_lclBufsCF$write_1__VAL_2,
		MUX_inf_dp0_bml_lclCredit$write_1__VAL_1,
		MUX_inf_dp0_bml_lclMesgAddr$write_1__VAL_2,
		MUX_inf_dp0_bml_lclMetaAddr$write_1__VAL_2,
		MUX_inf_dp0_bml_remBuf_value$write_1__VAL_3,
		MUX_inf_dp0_bml_remMesgAddr$write_1__VAL_2,
		MUX_inf_dp0_bml_remMetaAddr$write_1__VAL_2,
		MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_2,
		MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_3,
		MUX_inf_dp1_bml_crdBuf_value$write_1__VAL_3,
		MUX_inf_dp1_bml_fabBuf_value$write_1__VAL_3,
		MUX_inf_dp1_bml_fabBufsAvail$write_1__VAL_1,
		MUX_inf_dp1_bml_fabBufsAvail$write_1__VAL_2,
		MUX_inf_dp1_bml_lclBuf_value$write_1__VAL_3,
		MUX_inf_dp1_bml_lclBufsAR$write_1__VAL_1,
		MUX_inf_dp1_bml_lclBufsAR$write_1__VAL_2,
		MUX_inf_dp1_bml_lclBufsCF$write_1__VAL_1,
		MUX_inf_dp1_bml_lclBufsCF$write_1__VAL_2,
		MUX_inf_dp1_bml_lclCredit$write_1__VAL_1,
		MUX_inf_dp1_bml_lclMesgAddr$write_1__VAL_2,
		MUX_inf_dp1_bml_lclMetaAddr$write_1__VAL_2,
		MUX_inf_dp1_bml_remBuf_value$write_1__VAL_3,
		MUX_inf_dp1_bml_remMesgAddr$write_1__VAL_2,
		MUX_inf_dp1_bml_remMetaAddr$write_1__VAL_2,
		MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_2,
		MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_3;
  wire [14 : 0] MUX_app_appW2_mesgLength$write_1__VAL_3,
		MUX_app_appW2_mesgLength$write_1__VAL_4,
		MUX_app_appW4_mesgLength$write_1__VAL_3,
		MUX_app_appW4_mesgLength$write_1__VAL_4;
  wire [13 : 0] MUX_app_appW2_fabWordsRemain$write_1__VAL_1,
		MUX_app_appW2_fabWordsRemain$write_1__VAL_2,
		MUX_app_appW2_mesgReqAddr$write_1__VAL_2,
		MUX_app_appW4_fabWordsRemain$write_1__VAL_1,
		MUX_app_appW4_fabWordsRemain$write_1__VAL_2,
		MUX_app_appW4_mesgReqAddr$write_1__VAL_2,
		MUX_inf_dp0_wmi_addr$write_1__VAL_1,
		MUX_inf_dp0_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_inf_dp0_wmi_bytesRemainResp$write_1__VAL_2,
		MUX_inf_dp1_wmi_addr$write_1__VAL_1,
		MUX_inf_dp1_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_inf_dp1_wmi_bytesRemainResp$write_1__VAL_2;
  wire [12 : 0] MUX_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_inf_dp0_tlp_writeDWAddr$write_1__VAL_1,
		MUX_inf_dp0_tlp_writeDWAddr$write_1__VAL_2,
		MUX_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_inf_dp1_tlp_writeDWAddr$write_1__VAL_1,
		MUX_inf_dp1_tlp_writeDWAddr$write_1__VAL_2;
  wire [11 : 0] MUX_app_appW2_fabRespCredit_value$write_1__VAL_2,
		MUX_app_appW2_wsiWordsRemain$write_1__VAL_2,
		MUX_app_appW4_fabRespCredit_value$write_1__VAL_2,
		MUX_app_appW4_wsiWordsRemain$write_1__VAL_2;
  wire [10 : 0] MUX_inf_dp0_bram_memory$b_put_2__VAL_1,
		MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
  wire [9 : 0] MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_inf_dp0_tlp_outDwRemain$write_1__VAL_1,
	       MUX_inf_dp0_tlp_outDwRemain$write_1__VAL_2,
	       MUX_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_inf_dp0_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_inf_dp0_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_2,
	       MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_inf_dp1_tlp_outDwRemain$write_1__VAL_1,
	       MUX_inf_dp1_tlp_outDwRemain$write_1__VAL_2,
	       MUX_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_inf_dp1_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_inf_dp1_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_2;
  wire [8 : 0] MUX_app_appW2_opcode$write_1__VAL_3,
	       MUX_app_appW4_opcode$write_1__VAL_3;
  wire [7 : 0] MUX_app_appW3_dlyReadCredit_value$write_1__VAL_2;
  wire [3 : 0] MUX_inf_dp0_tlp_postSeqDwell$write_1__VAL_1,
	       MUX_inf_dp1_tlp_postSeqDwell$write_1__VAL_1;
  wire [1 : 0] MUX_app_appW2_wci_respF_c_r$write_1__VAL_1,
	       MUX_app_appW2_wci_respF_c_r$write_1__VAL_2,
	       MUX_app_appW2_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_app_appW2_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_app_appW2_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_app_appW2_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_app_appW2_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_app_appW2_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_app_appW3_rdSerPos$write_1__VAL_1,
	       MUX_app_appW3_wci_respF_c_r$write_1__VAL_1,
	       MUX_app_appW3_wci_respF_c_r$write_1__VAL_2,
	       MUX_app_appW3_wmemi_dhF_c_r$write_1__VAL_1,
	       MUX_app_appW3_wmemi_dhF_c_r$write_1__VAL_2,
	       MUX_app_appW3_wmemi_reqF_c_r$write_1__VAL_1,
	       MUX_app_appW3_wmemi_reqF_c_r$write_1__VAL_2,
	       MUX_app_appW3_wrtSerPos$write_1__VAL_1,
	       MUX_app_appW3_wrtSerPos$write_1__VAL_2,
	       MUX_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_app_appW4_wci_respF_c_r$write_1__VAL_1,
	       MUX_app_appW4_wci_respF_c_r$write_1__VAL_2,
	       MUX_app_appW4_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_app_appW4_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_app_appW4_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_app_appW4_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_app_appW4_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_app_appW4_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_inf_dp0_wci_respF_c_r$write_1__VAL_1,
	       MUX_inf_dp0_wci_respF_c_r$write_1__VAL_2,
	       MUX_inf_dp0_wmi_bufDwell$write_1__VAL_3,
	       MUX_inf_dp0_wmi_p4B$write_1__VAL_2,
	       MUX_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_2,
	       MUX_inf_dp1_wci_respF_c_r$write_1__VAL_1,
	       MUX_inf_dp1_wci_respF_c_r$write_1__VAL_2,
	       MUX_inf_dp1_wmi_bufDwell$write_1__VAL_3,
	       MUX_inf_dp1_wmi_p4B$write_1__VAL_2,
	       MUX_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_2;
  wire MUX_app_appW2_endOfMessage$write_1__SEL_1,
       MUX_app_appW2_impreciseBurst$write_1__SEL_3,
       MUX_app_appW2_lastMesg$write_1__SEL_2,
       MUX_app_appW2_mesgCount$write_1__SEL_1,
       MUX_app_appW2_mesgLength$write_1__SEL_4,
       MUX_app_appW2_wci_illegalEdge$write_1__SEL_1,
       MUX_app_appW2_wci_illegalEdge$write_1__SEL_2,
       MUX_app_appW2_wci_illegalEdge$write_1__VAL_2,
       MUX_app_appW2_wci_respF_q_0$write_1__SEL_2,
       MUX_app_appW2_wci_respF_q_1$write_1__SEL_2,
       MUX_app_appW2_wmi_dhF_q_0$write_1__SEL_2,
       MUX_app_appW2_wmi_dhF_q_1$write_1__SEL_2,
       MUX_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2,
       MUX_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2,
       MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_app_appW2_wmi_reqF_q_0$write_1__SEL_2,
       MUX_app_appW2_wmi_reqF_q_1$write_1__SEL_2,
       MUX_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1,
       MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2,
       MUX_app_appW3_mesgRdCount$write_1__SEL_1,
       MUX_app_appW3_mesgWtCount$write_1__SEL_1,
       MUX_app_appW3_rdSerEmpty$write_1__PSEL_1,
       MUX_app_appW3_rdSerEmpty$write_1__SEL_1,
       MUX_app_appW3_rdSyncWord$write_1__VAL_1,
       MUX_app_appW3_rdSyncWord$write_1__VAL_2,
       MUX_app_appW3_wci_illegalEdge$write_1__SEL_1,
       MUX_app_appW3_wci_illegalEdge$write_1__SEL_2,
       MUX_app_appW3_wci_illegalEdge$write_1__VAL_2,
       MUX_app_appW3_wci_respF_q_0$write_1__SEL_2,
       MUX_app_appW3_wci_respF_q_1$write_1__SEL_2,
       MUX_app_appW3_wide16Fa$enq_1__SEL_1,
       MUX_app_appW3_wmemi_dhF_q_0$write_1__SEL_2,
       MUX_app_appW3_wmemi_dhF_q_1$write_1__SEL_2,
       MUX_app_appW3_wmemi_reqF_q_0$write_1__SEL_2,
       MUX_app_appW3_wmemi_reqF_q_1$write_1__SEL_2,
       MUX_app_appW3_wrtSerStage$write_1__SEL_1,
       MUX_app_appW3_wrtSerStage_1$write_1__SEL_1,
       MUX_app_appW3_wrtSerStage_2$write_1__SEL_1,
       MUX_app_appW3_wrtSerStage_3$write_1__SEL_1,
       MUX_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4,
       MUX_app_appW4_endOfMessage$write_1__SEL_1,
       MUX_app_appW4_impreciseBurst$write_1__SEL_3,
       MUX_app_appW4_lastMesg$write_1__SEL_2,
       MUX_app_appW4_mesgCount$write_1__SEL_1,
       MUX_app_appW4_mesgLength$write_1__SEL_4,
       MUX_app_appW4_wci_illegalEdge$write_1__SEL_1,
       MUX_app_appW4_wci_illegalEdge$write_1__SEL_2,
       MUX_app_appW4_wci_illegalEdge$write_1__VAL_2,
       MUX_app_appW4_wci_respF_q_0$write_1__SEL_1,
       MUX_app_appW4_wci_respF_q_1$write_1__SEL_1,
       MUX_app_appW4_wmi_dhF_q_0$write_1__SEL_1,
       MUX_app_appW4_wmi_dhF_q_1$write_1__SEL_1,
       MUX_app_appW4_wmi_mFlagF_q_0$write_1__SEL_1,
       MUX_app_appW4_wmi_mFlagF_q_1$write_1__SEL_1,
       MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_app_appW4_wmi_reqF_q_0$write_1__SEL_1,
       MUX_app_appW4_wmi_reqF_q_1$write_1__SEL_1,
       MUX_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1,
       MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2,
       MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5,
       MUX_inf_dp0_bml_fabBufsAvail$write_1__SEL_1,
       MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1,
       MUX_inf_dp0_bml_lclBufsAR$write_1__SEL_1,
       MUX_inf_dp0_bml_lclBufsCF$write_1__SEL_1,
       MUX_inf_dp0_bml_lclCredit$write_1__SEL_1,
       MUX_inf_dp0_bram_memory$a_put_1__SEL_1,
       MUX_inf_dp0_bram_memory$a_put_1__SEL_2,
       MUX_inf_dp0_bram_memory$a_put_1__SEL_3,
       MUX_inf_dp0_bram_memory$b_put_1__SEL_1,
       MUX_inf_dp0_bram_memory$b_put_1__SEL_2,
       MUX_inf_dp0_bram_memory_1$a_put_1__SEL_1,
       MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2,
       MUX_inf_dp0_bram_memory_1$a_put_1__SEL_3,
       MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1,
       MUX_inf_dp0_bram_memory_1$b_put_1__SEL_2,
       MUX_inf_dp0_bram_memory_2$a_put_1__SEL_1,
       MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2,
       MUX_inf_dp0_bram_memory_2$a_put_1__SEL_3,
       MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1,
       MUX_inf_dp0_bram_memory_2$b_put_1__SEL_2,
       MUX_inf_dp0_bram_memory_3$a_put_1__SEL_1,
       MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2,
       MUX_inf_dp0_bram_memory_3$a_put_1__SEL_3,
       MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1,
       MUX_inf_dp0_bram_memory_3$b_put_1__SEL_2,
       MUX_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_inf_dp0_tlp_mReqF$enq_1__SEL_1,
       MUX_inf_dp0_tlp_mReqF$enq_1__SEL_6,
       MUX_inf_dp0_tlp_outDwRemain$write_1__SEL_1,
       MUX_inf_dp0_tlp_outF$enq_1__SEL_8,
       MUX_inf_dp0_tlp_readHeaderSent$write_1__SEL_1,
       MUX_inf_dp0_tlp_readStarted$write_1__SEL_1,
       MUX_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3,
       MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4,
       MUX_inf_dp0_wci_illegalEdge$write_1__SEL_1,
       MUX_inf_dp0_wci_illegalEdge$write_1__SEL_2,
       MUX_inf_dp0_wci_illegalEdge$write_1__VAL_2,
       MUX_inf_dp0_wci_respF_q_0$write_1__SEL_2,
       MUX_inf_dp0_wci_respF_q_1$write_1__SEL_2,
       MUX_inf_dp0_wmi_bufDwell$write_1__SEL_1,
       MUX_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_inf_dp0_wmi_doneWithMesg$write_1__SEL_1,
       MUX_inf_dp0_wmi_mesgBusy$write_1__SEL_1,
       MUX_inf_dp0_wmi_rdActive$write_1__SEL_1,
       MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_inf_dp0_wmi_wrActive$write_1__SEL_1,
       MUX_inf_dp0_wmi_wrFinalize$write_1__SEL_1,
       MUX_inf_dp1_bml_fabBufsAvail$write_1__SEL_1,
       MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1,
       MUX_inf_dp1_bml_lclBufsAR$write_1__SEL_1,
       MUX_inf_dp1_bml_lclBufsCF$write_1__SEL_1,
       MUX_inf_dp1_bml_lclCredit$write_1__SEL_1,
       MUX_inf_dp1_bram_memory$a_put_1__SEL_1,
       MUX_inf_dp1_bram_memory$a_put_1__SEL_2,
       MUX_inf_dp1_bram_memory$a_put_1__SEL_3,
       MUX_inf_dp1_bram_memory$b_put_1__SEL_1,
       MUX_inf_dp1_bram_memory$b_put_1__SEL_2,
       MUX_inf_dp1_bram_memory_1$a_put_1__SEL_1,
       MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2,
       MUX_inf_dp1_bram_memory_1$a_put_1__SEL_3,
       MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1,
       MUX_inf_dp1_bram_memory_1$b_put_1__SEL_2,
       MUX_inf_dp1_bram_memory_2$a_put_1__SEL_1,
       MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2,
       MUX_inf_dp1_bram_memory_2$a_put_1__SEL_3,
       MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1,
       MUX_inf_dp1_bram_memory_2$b_put_1__SEL_2,
       MUX_inf_dp1_bram_memory_3$a_put_1__SEL_1,
       MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2,
       MUX_inf_dp1_bram_memory_3$a_put_1__SEL_3,
       MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1,
       MUX_inf_dp1_bram_memory_3$b_put_1__SEL_2,
       MUX_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_inf_dp1_tlp_mReqF$enq_1__SEL_1,
       MUX_inf_dp1_tlp_mReqF$enq_1__SEL_6,
       MUX_inf_dp1_tlp_outDwRemain$write_1__SEL_1,
       MUX_inf_dp1_tlp_outF$enq_1__SEL_8,
       MUX_inf_dp1_tlp_readHeaderSent$write_1__SEL_1,
       MUX_inf_dp1_tlp_readStarted$write_1__SEL_1,
       MUX_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2,
       MUX_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3,
       MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4,
       MUX_inf_dp1_wci_illegalEdge$write_1__SEL_1,
       MUX_inf_dp1_wci_illegalEdge$write_1__SEL_2,
       MUX_inf_dp1_wci_illegalEdge$write_1__VAL_2,
       MUX_inf_dp1_wci_respF_q_0$write_1__SEL_2,
       MUX_inf_dp1_wci_respF_q_1$write_1__SEL_2,
       MUX_inf_dp1_wmi_bufDwell$write_1__SEL_1,
       MUX_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1,
       MUX_inf_dp1_wmi_doneWithMesg$write_1__SEL_1,
       MUX_inf_dp1_wmi_mesgBusy$write_1__SEL_1,
       MUX_inf_dp1_wmi_rdActive$write_1__SEL_1,
       MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2,
       MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2,
       MUX_inf_dp1_wmi_wrActive$write_1__SEL_1,
       MUX_inf_dp1_wmi_wrFinalize$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h100941,
	       v__h101950,
	       v__h106044,
	       v__h106390,
	       v__h106957,
	       v__h107308,
	       v__h108371,
	       v__h111105,
	       v__h112139,
	       v__h113186,
	       v__h113520,
	       v__h114768,
	       v__h118872,
	       v__h119299,
	       v__h119917,
	       v__h120234,
	       v__h121288,
	       v__h150607,
	       v__h158002,
	       v__h158376,
	       v__h158538,
	       v__h162732,
	       v__h166822,
	       v__h167004,
	       v__h167159,
	       v__h17582,
	       v__h17767,
	       v__h17922,
	       v__h180844,
	       v__h182261,
	       v__h182338,
	       v__h184058,
	       v__h184319,
	       v__h185101,
	       v__h190042,
	       v__h190224,
	       v__h190379,
	       v__h209280,
	       v__h214241,
	       v__h214423,
	       v__h214578,
	       v__h21867,
	       v__h228256,
	       v__h22879,
	       v__h229673,
	       v__h229750,
	       v__h231470,
	       v__h231731,
	       v__h232513,
	       v__h26973,
	       v__h27319,
	       v__h27886,
	       v__h28237,
	       v__h29300,
	       v__h32034,
	       v__h33068,
	       v__h34115,
	       v__h34454,
	       v__h35705,
	       v__h39809,
	       v__h40236,
	       v__h40854,
	       v__h41171,
	       v__h42225,
	       v__h71544,
	       v__h78944,
	       v__h79318,
	       v__h79480,
	       v__h96671,
	       v__h96853,
	       v__h97008;
  reg [31 : 0] IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090,
	       IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359,
	       IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356,
	       IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360,
	       IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357,
	       IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361,
	       IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358,
	       IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362,
	       IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098,
	       IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363,
	       _theResult____h158522,
	       _theResult____h79464,
	       rdata__h151724,
	       rdata__h72661,
	       v__h206282,
	       value__h169350,
	       value__h216769,
	       x_data__h184661,
	       x_data__h208637,
	       x_data__h232073;
  reg [15 : 0] CASE_inf_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q5,
	       CASE_inf_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q6;
  reg [1 : 0] lowAddr10__h133801,
	      lowAddr10__h54738,
	      x__h133923,
	      x__h133946,
	      x__h54860,
	      x__h54883;
  reg CASE_app_appW3_wrtSerPos_0b1_0_1_1_1_2_1_3_0b1__q2,
      CASE_app_appW3_wrtSerPos_NOT_app_appW3_wrtSerP_ETC__q1,
      CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q11,
      CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q13,
      CASE_inf_dp0_dpControl_BITS_1_TO_0_inf_dp0_bml_ETC__q3,
      CASE_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q8,
      CASE_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q7,
      CASE_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q29,
      CASE_inf_dp0_wmi_p4B_NOT_inf_dp0_wmi_p4B_EQ_3__ETC__q30,
      CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q12,
      CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q21,
      CASE_inf_dp1_dpControl_BITS_1_TO_0_inf_dp1_bml_ETC__q4,
      CASE_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q10,
      CASE_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q9,
      CASE_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q31,
      CASE_inf_dp1_wmi_p4B_NOT_inf_dp1_wmi_p4B_EQ_3__ETC__q32,
      IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1157,
      IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7159,
      IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3343,
      IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7187,
      IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1167,
      IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7162,
      IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3353,
      IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7188,
      IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1177,
      IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7160,
      IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3363,
      IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7189,
      IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1187,
      IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7161,
      IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3373,
      IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7190,
      IF_inf_dp0_bml_dpControl_wget__920_BITS_1_TO_0_ETC___d1997,
      IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1389,
      IF_inf_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_7_ETC___d7266,
      IF_inf_dp0_wmi_p4B_806_EQ_1_809_THEN_inf_dp0_b_ETC___d1815,
      IF_inf_dp1_bml_dpControl_wget__106_BITS_1_TO_0_ETC___d4183,
      IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3575,
      IF_inf_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_9_ETC___d8294,
      IF_inf_dp1_wmi_p4B_992_EQ_1_995_THEN_inf_dp1_b_ETC___d4001;
  wire [127 : 0] IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5763,
		 IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5792,
		 IF_inf_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THE_ETC___d1508,
		 IF_inf_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THE_ETC___d1513,
		 IF_inf_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THE_ETC___d3694,
		 IF_inf_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THE_ETC___d3699,
		 pkt__h122283,
		 pkt__h43220,
		 rdata__h139171,
		 rdata__h60108,
		 w_data__h106499,
		 w_data__h107477,
		 w_data__h108539,
		 w_data__h111259,
		 w_data__h113443,
		 w_data__h119206,
		 w_data__h27428,
		 w_data__h28406,
		 w_data__h29468,
		 w_data__h32188,
		 w_data__h34372,
		 w_data__h40143,
		 x__h204543,
		 x__h204570,
		 x__h205193,
		 x__h205217;
  wire [55 : 0] IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7209,
		IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7138;
  wire [35 : 0] addr__h205617, addr__h205967;
  wire [31 : 0] data__h204908,
		delayStatus__h208247,
		inf_dp0_bml_fabFlowAddr_959_PLUS_inf_dp0_bml_f_ETC___d7931,
		inf_dp1_bml_fabFlowAddr_145_PLUS_inf_dp1_bml_f_ETC___d7932,
		mesgMeta_opcode__h150004,
		mesgMeta_opcode__h70941,
		nowLS__h102881,
		nowLS__h115715,
		nowLS__h23810,
		nowLS__h36652,
		nowMS__h102880,
		nowMS__h115714,
		nowMS__h23809,
		nowMS__h36651,
		opcode__h102879,
		opcode__h115713,
		opcode__h23808,
		opcode__h36650,
		rdat__h158601,
		rdat__h158609,
		rdat__h158617,
		rdat__h158625,
		rdat__h158633,
		rdat__h158641,
		rdat__h158649,
		rdat__h158670,
		rdat__h158675,
		rdat__h158686,
		rdat__h158691,
		rdat__h158752,
		rdat__h184754,
		rdat__h208685,
		rdat__h208871,
		rdat__h208880,
		rdat__h208889,
		rdat__h208898,
		rdat__h208971,
		rdat__h208980,
		rdat__h208989,
		rdat__h208998,
		rdat__h232166,
		rdat__h79543,
		rdat__h79551,
		rdat__h79559,
		rdat__h79567,
		rdat__h79575,
		rdat__h79583,
		rdat__h79591,
		rdat__h79612,
		rdat__h79617,
		rdat__h79628,
		rdat__h79633,
		rdat__h79694,
		rresp_data__h133845,
		rresp_data__h54782,
		x3__h149964,
		x3__h70901,
		x__h102942,
		x__h115745,
		x__h201307,
		x__h23871,
		x__h36682,
		y__h106229,
		y__h106646,
		y__h119021,
		y__h27158,
		y__h27575,
		y__h39958,
		y_avValue__h151560,
		y_avValue__h151580,
		y_avValue__h151600,
		y_avValue__h151620,
		y_avValue__h72497,
		y_avValue__h72517,
		y_avValue__h72537,
		y_avValue__h72557;
  wire [26 : 0] x__h205675, x__h206012;
  wire [23 : 0] btm__h203796,
		mesgMetaF_length__h182639,
		mesgMetaF_length__h183375,
		mesgMetaF_length__h230051,
		mesgMetaF_length__h230787,
		x__h208688;
  wire [16 : 0] x__h106148,
		x__h118958,
		x__h27077,
		x__h39895,
		y__h106135,
		y__h106150,
		y__h118950,
		y__h118960,
		y__h120210,
		y__h27064,
		y__h27079,
		y__h39887,
		y__h39897,
		y__h41147;
  wire [15 : 0] w_be__h107051,
		w_be__h27980,
		wsiBurstLength__h181306,
		wsiBurstLength__h228718,
		x__h155745,
		x__h156869,
		x__h156874,
		x__h156946,
		x__h156951,
		x__h156988,
		x__h156993,
		x__h157026,
		x__h157031,
		x__h184757,
		x__h232169,
		x__h76685,
		x__h77809,
		x__h77814,
		x__h77886,
		x__h77891,
		x__h77928,
		x__h77933,
		x__h77966,
		x__h77971,
		x_length__h182394,
		x_length__h229806,
		y__h106277,
		y__h119532,
		y__h27206,
		y__h40469;
  wire [13 : 0] addr__h183245,
		addr__h230657,
		app_appW3_mesgLengthSoFar_708_PLUS_1___d7934,
		b__h180928,
		b__h228340,
		mlp1B__h183229,
		mlp1B__h230641,
		mlp1__h183228,
		mlp1__h230640,
		x__h182412,
		x__h229824;
  wire [12 : 0] inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18,
		inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19,
		inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17,
		inf_dp0_tlp_writeDWAddr_PLUS_1__q15,
		inf_dp0_tlp_writeDWAddr_PLUS_2__q16,
		inf_dp0_tlp_writeDWAddr_PLUS_3__q14,
		inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26,
		inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27,
		inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25,
		inf_dp1_tlp_writeDWAddr_PLUS_1__q23,
		inf_dp1_tlp_writeDWAddr_PLUS_2__q24,
		inf_dp1_tlp_writeDWAddr_PLUS_3__q22,
		spanToNextPage__h106094,
		spanToNextPage__h118924,
		spanToNextPage__h27023,
		spanToNextPage__h39861,
		thisRequestLength__h106095,
		thisRequestLength__h118925,
		thisRequestLength__h27024,
		thisRequestLength__h39862,
		x__h201408;
  wire [11 : 0] b__h177740,
		b__h225152,
		bl__h182501,
		bl__h229913,
		byteCount__h133803,
		byteCount__h54740,
		sendData_burstLength__h181388,
		sendData_burstLength__h228800,
		x__h133914,
		x__h133916,
		x__h179094,
		x__h226506,
		x__h54851,
		x__h54853,
		x_burstLength__h208154,
		y__h133915,
		y__h133917,
		y__h54852,
		y__h54854;
  wire [9 : 0] x__h106649,
	       x__h119535,
	       x__h120213,
	       x__h27578,
	       x__h40472,
	       x__h41150;
  wire [7 : 0] rreq_tag__h106324,
	       rreq_tag__h27253,
	       tag__h119200,
	       tag__h40137,
	       tagm__h119326,
	       tagm__h40263,
	       x__h182398,
	       x__h229810;
  wire [6 : 0] lowAddr__h133802, lowAddr__h54739;
  wire [3 : 0] lastBE__h106523,
	       lastBE__h119227,
	       lastBE__h27452,
	       lastBE__h40164,
	       sendData_byteEn__h181390,
	       sendData_byteEn__h228802,
	       x_byteEn__h208155;
  wire [2 : 0] IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7135,
	       IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7139,
	       inf_dp0_bram_serverAdapterA_1_cnt_44_PLUS_IF_i_ETC___d150,
	       inf_dp0_bram_serverAdapterA_2_cnt_62_PLUS_IF_i_ETC___d268,
	       inf_dp0_bram_serverAdapterA_3_cnt_80_PLUS_IF_i_ETC___d386,
	       inf_dp0_bram_serverAdapterA_cnt_6_PLUS_IF_inf__ETC___d32,
	       inf_dp0_bram_serverAdapterB_1_cnt_03_PLUS_IF_i_ETC___d209,
	       inf_dp0_bram_serverAdapterB_2_cnt_21_PLUS_IF_i_ETC___d327,
	       inf_dp0_bram_serverAdapterB_3_cnt_39_PLUS_IF_i_ETC___d445,
	       inf_dp0_bram_serverAdapterB_cnt_5_PLUS_IF_inf__ETC___d91,
	       inf_dp1_bram_serverAdapterA_1_cnt_336_PLUS_IF__ETC___d2342,
	       inf_dp1_bram_serverAdapterA_2_cnt_454_PLUS_IF__ETC___d2460,
	       inf_dp1_bram_serverAdapterA_3_cnt_572_PLUS_IF__ETC___d2578,
	       inf_dp1_bram_serverAdapterA_cnt_218_PLUS_IF_in_ETC___d2224,
	       inf_dp1_bram_serverAdapterB_1_cnt_395_PLUS_IF__ETC___d2401,
	       inf_dp1_bram_serverAdapterB_2_cnt_513_PLUS_IF__ETC___d2519,
	       inf_dp1_bram_serverAdapterB_3_cnt_631_PLUS_IF__ETC___d2637,
	       inf_dp1_bram_serverAdapterB_cnt_277_PLUS_IF_in_ETC___d2283;
  wire [1 : 0] ab__h10955,
	       ab__h12485,
	       ab__h13882,
	       ab__h3702,
	       ab__h5101,
	       ab__h6631,
	       ab__h8028,
	       ab__h82800,
	       ab__h84199,
	       ab__h85729,
	       ab__h87126,
	       ab__h88656,
	       ab__h90053,
	       ab__h91583,
	       ab__h92980,
	       ab__h9558,
	       app_appW3_wrtSerPos_725_PLUS_1___d7933,
	       idx__h124624,
	       idx__h126847,
	       idx__h128143,
	       idx__h129439,
	       idx__h131687,
	       idx__h132155,
	       idx__h132528,
	       idx__h132901,
	       idx__h45561,
	       idx__h47784,
	       idx__h49080,
	       idx__h50376,
	       idx__h52624,
	       idx__h53092,
	       idx__h53465,
	       idx__h53838;
  wire IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1190,
       IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3376,
       IF_app_appW3_wrtSerPos_725_EQ_0_733_OR_app_app_ETC___d5778,
       IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1397,
       IF_inf_dp0_wmi_p4B_806_EQ_0_807_THEN_inf_dp0_b_ETC___d1820,
       IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3583,
       IF_inf_dp1_wmi_p4B_992_EQ_0_993_THEN_inf_dp1_b_ETC___d4006,
       NOT_app_appW2_wmi_reqF_c_r_613_EQ_2_632_633_AN_ETC___d4984,
       NOT_app_appW3_mesgWF_rRdPtr_639_EQ_app_appW3_m_ETC___d5767,
       NOT_app_appW3_mesgWF_rRdPtr_639_PLUS_2048_695__ETC___d5697,
       NOT_app_appW3_wrtSerPos_725_EQ_3_726_727_AND_N_ETC___d5741,
       NOT_app_appW4_wmi_reqF_c_r_249_EQ_2_267_268_AN_ETC___d6616,
       NOT_inf_dp0_bml_lclBufDone_944_011_AND_IF_inf__ETC___d2024,
       NOT_inf_dp0_tlp_mReqF_first__108_BITS_28_TO_19_ETC___d1299,
       NOT_inf_dp0_wmi_wrActive_724_725_OR_NOT_inf_dp_ETC___d1734,
       NOT_inf_dp1_bml_lclBufDone_130_197_AND_IF_inf__ETC___d4210,
       NOT_inf_dp1_tlp_mReqF_first__294_BITS_28_TO_19_ETC___d3485,
       NOT_inf_dp1_wmi_wrActive_910_911_OR_NOT_inf_dp_ETC___d3920,
       _dfoo15,
       _dfoo5,
       app_appW2_wmi_operateD_699_AND_app_appW2_wmi_p_ETC___d5079,
       app_appW2_wmi_respF_i_notEmpty__996_AND_app_ap_ETC___d5001,
       app_appW2_wsiS_reqFifo_i_notEmpty__931_AND_NOT_ETC___d5098,
       app_appW3_bytesWritten_721_ULT_app_appW3_dlyHo_ETC___d7124,
       app_appW3_cyclesPassed_691_ULT_app_appW3_dlyHo_ETC___d7130,
       app_appW3_dlyWordsStored_value_652_SLE_0_799_O_ETC___d5807,
       app_appW3_dlyWordsStored_value_652_SLE_0___d7123,
       app_appW3_dlyWordsStored_value_652_SLT_8388608___d5809,
       app_appW3_mesgRF_i_notFull__906_AND_NOT_app_ap_ETC___d5907,
       app_appW3_metaRF_i_notFull__855_AND_NOT_app_ap_ETC___d5866,
       app_appW3_wci_cState_310_EQ_2_321_AND_app_appW_ETC___d5827,
       app_appW3_wsiS_reqFifo_notFull__414_AND_app_ap_ETC___d5436,
       app_appW4_wmi_operateD_333_AND_app_appW4_wmi_p_ETC___d6711,
       app_appW4_wmi_respF_i_notEmpty__628_AND_app_ap_ETC___d6633,
       app_appW4_wsiS_reqFifo_i_notEmpty__563_AND_NOT_ETC___d6730,
       app_appW4_wsiS_reqFifo_notFull__465_AND_app_ap_ETC___d6487,
       inf_dp0_bml_crdBuf_value_902_EQ_inf_dp0_bml_cr_ETC___d7224,
       inf_dp0_bml_fabBuf_value_887_EQ_inf_dp0_bml_fa_ETC___d8127,
       inf_dp0_bml_lclBufDone_944_AND_IF_inf_dp0_bml__ETC___d7164,
       inf_dp0_bml_lclBuf_value_857_EQ_inf_dp0_bml_lc_ETC___d8137,
       inf_dp0_bml_remBuf_value_872_EQ_inf_dp0_bml_re_ETC___d7215,
       inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939,
       inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940,
       inf_dp0_bram_serverAdapterA_2_outDataCore_notE_ETC___d1468,
       inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941,
       inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110,
       inf_dp0_bram_serverAdapterA_outDataCore_notEmp_ETC___d1470,
       inf_dp0_bram_serverAdapterA_outData_outData_wh_ETC___d1466,
       inf_dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665,
       inf_dp0_bram_serverAdapterB_1_outData_outData__ETC___d1693,
       inf_dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666,
       inf_dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667,
       inf_dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664,
       inf_dp0_tlp_dmaPullRemainDWLen_001_ULE_inf_dp0_ETC___d7935,
       inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936,
       inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d1040,
       inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d654,
       inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d877,
       inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d910,
       inf_dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ__ETC___d908,
       inf_dp0_tlp_inF_first__96_BIT_152_043_AND_NOT__ETC___d1068,
       inf_dp0_tlp_mReqF_RDY_deq__107_AND_IF_inf_dp0__ETC___d1123,
       inf_dp0_tlp_mRespF_first__64_BITS_71_TO_62_54__ETC___d7113,
       inf_dp0_tlp_outDwRemain_81_ULE_4___d7502,
       inf_dp0_tlp_rdRespDwRemain_458_ULE_4___d1459,
       inf_dp0_tlp_readRemainDWLen_314_ULE_4___d1315,
       inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066,
       inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065,
       inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128,
       inf_dp0_wmi_dpControl_whas__651_AND_inf_dp0_br_ETC___d1697,
       inf_dp1_bml_crdBuf_value_088_EQ_inf_dp1_bml_cr_ETC___d8183,
       inf_dp1_bml_fabBuf_value_073_EQ_inf_dp1_bml_fa_ETC___d8184,
       inf_dp1_bml_lclBufDone_130_AND_IF_inf_dp1_bml__ETC___d7192,
       inf_dp1_bml_lclBuf_value_043_EQ_inf_dp1_bml_lc_ETC___d8197,
       inf_dp1_bml_remBuf_value_058_EQ_inf_dp1_bml_re_ETC___d8198,
       inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942,
       inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943,
       inf_dp1_bram_serverAdapterA_2_outDataCore_notE_ETC___d3654,
       inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276,
       inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313,
       inf_dp1_bram_serverAdapterA_outDataCore_notEmp_ETC___d3656,
       inf_dp1_bram_serverAdapterA_outData_outData_wh_ETC___d3652,
       inf_dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851,
       inf_dp1_bram_serverAdapterB_1_outData_outData__ETC___d3879,
       inf_dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852,
       inf_dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853,
       inf_dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850,
       inf_dp1_tlp_dmaPullRemainDWLen_187_ULE_inf_dp1_ETC___d7937,
       inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938,
       inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d2845,
       inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3065,
       inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3096,
       inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3226,
       inf_dp1_tlp_inF_first__084_BITS_63_TO_56_087_E_ETC___d3094,
       inf_dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_ETC___d3254,
       inf_dp1_tlp_mReqF_RDY_deq__293_AND_IF_inf_dp1__ETC___d3309,
       inf_dp1_tlp_mRespF_first__854_BITS_71_TO_62_94_ETC___d7115,
       inf_dp1_tlp_outDwRemain_970_ULE_4___d7507,
       inf_dp1_tlp_rdRespDwRemain_644_ULE_4___d3645,
       inf_dp1_tlp_readRemainDWLen_500_ULE_4___d3501,
       inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116,
       inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133,
       inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132,
       inf_dp1_wmi_dpControl_whas__837_AND_inf_dp1_br_ETC___d3883,
       x__h181099,
       x__h228511;

  // output resets
  assign RST_N_wci_m_0 = inf_cp$RST_N_wci_Vm_8 ;
  assign RST_N_wci_m_1 = inf_cp$RST_N_wci_Vm_9 ;
  assign RST_N_wci_m_2 = inf_cp$RST_N_wci_Vm_10 ;
  assign RST_N_wci_m_3 = inf_cp$RST_N_wci_Vm_11 ;
  assign RST_N_wci_m_4 = inf_cp$RST_N_wci_Vm_12 ;

  // action method server_request_put
  assign RDY_server_request_put = inf_sm0$RDY_s_request_put ;
  assign CAN_FIRE_server_request_put = inf_sm0$RDY_s_request_put ;
  assign WILL_FIRE_server_request_put = EN_server_request_put ;

  // actionvalue method server_response_get
  assign server_response_get = inf_sm0$s_response_get ;
  assign RDY_server_response_get = inf_sm0$RDY_s_response_get ;
  assign CAN_FIRE_server_response_get = inf_sm0$RDY_s_response_get ;
  assign WILL_FIRE_server_response_get = EN_server_response_get ;

  // value method led
  assign led = inf_cp$led ;

  // action method switch
  assign CAN_FIRE_switch = 1'd1 ;
  assign WILL_FIRE_switch = 1'd1 ;

  // value method wci_m_0_mCmd
  assign wci_m_0_MCmd = inf_cp$wci_Vm_8_MCmd ;

  // value method wci_m_0_mAddrSpace
  assign wci_m_0_MAddrSpace = inf_cp$wci_Vm_8_MAddrSpace ;

  // value method wci_m_0_mByteEn
  assign wci_m_0_MByteEn = inf_cp$wci_Vm_8_MByteEn ;

  // value method wci_m_0_mAddr
  assign wci_m_0_MAddr = inf_cp$wci_Vm_8_MAddr ;

  // value method wci_m_0_mData
  assign wci_m_0_MData = inf_cp$wci_Vm_8_MData ;

  // action method wci_m_0_sResp
  assign CAN_FIRE_wci_m_0_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sResp = 1'd1 ;

  // action method wci_m_0_sData
  assign CAN_FIRE_wci_m_0_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sData = 1'd1 ;

  // action method wci_m_0_sThreadBusy
  assign CAN_FIRE_wci_m_0_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sThreadBusy = wci_m_0_SThreadBusy ;

  // action method wci_m_0_sFlag
  assign CAN_FIRE_wci_m_0_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sFlag = 1'd1 ;

  // value method wci_m_0_mFlag
  assign wci_m_0_MFlag = inf_cp$wci_Vm_8_MFlag ;

  // value method wci_m_1_mCmd
  assign wci_m_1_MCmd = inf_cp$wci_Vm_9_MCmd ;

  // value method wci_m_1_mAddrSpace
  assign wci_m_1_MAddrSpace = inf_cp$wci_Vm_9_MAddrSpace ;

  // value method wci_m_1_mByteEn
  assign wci_m_1_MByteEn = inf_cp$wci_Vm_9_MByteEn ;

  // value method wci_m_1_mAddr
  assign wci_m_1_MAddr = inf_cp$wci_Vm_9_MAddr ;

  // value method wci_m_1_mData
  assign wci_m_1_MData = inf_cp$wci_Vm_9_MData ;

  // action method wci_m_1_sResp
  assign CAN_FIRE_wci_m_1_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sResp = 1'd1 ;

  // action method wci_m_1_sData
  assign CAN_FIRE_wci_m_1_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sData = 1'd1 ;

  // action method wci_m_1_sThreadBusy
  assign CAN_FIRE_wci_m_1_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sThreadBusy = wci_m_1_SThreadBusy ;

  // action method wci_m_1_sFlag
  assign CAN_FIRE_wci_m_1_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sFlag = 1'd1 ;

  // value method wci_m_1_mFlag
  assign wci_m_1_MFlag = inf_cp$wci_Vm_9_MFlag ;

  // value method wci_m_2_mCmd
  assign wci_m_2_MCmd = inf_cp$wci_Vm_10_MCmd ;

  // value method wci_m_2_mAddrSpace
  assign wci_m_2_MAddrSpace = inf_cp$wci_Vm_10_MAddrSpace ;

  // value method wci_m_2_mByteEn
  assign wci_m_2_MByteEn = inf_cp$wci_Vm_10_MByteEn ;

  // value method wci_m_2_mAddr
  assign wci_m_2_MAddr = inf_cp$wci_Vm_10_MAddr ;

  // value method wci_m_2_mData
  assign wci_m_2_MData = inf_cp$wci_Vm_10_MData ;

  // action method wci_m_2_sResp
  assign CAN_FIRE_wci_m_2_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sResp = 1'd1 ;

  // action method wci_m_2_sData
  assign CAN_FIRE_wci_m_2_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sData = 1'd1 ;

  // action method wci_m_2_sThreadBusy
  assign CAN_FIRE_wci_m_2_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sThreadBusy = wci_m_2_SThreadBusy ;

  // action method wci_m_2_sFlag
  assign CAN_FIRE_wci_m_2_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sFlag = 1'd1 ;

  // value method wci_m_2_mFlag
  assign wci_m_2_MFlag = inf_cp$wci_Vm_10_MFlag ;

  // value method wci_m_3_mCmd
  assign wci_m_3_MCmd = inf_cp$wci_Vm_11_MCmd ;

  // value method wci_m_3_mAddrSpace
  assign wci_m_3_MAddrSpace = inf_cp$wci_Vm_11_MAddrSpace ;

  // value method wci_m_3_mByteEn
  assign wci_m_3_MByteEn = inf_cp$wci_Vm_11_MByteEn ;

  // value method wci_m_3_mAddr
  assign wci_m_3_MAddr = inf_cp$wci_Vm_11_MAddr ;

  // value method wci_m_3_mData
  assign wci_m_3_MData = inf_cp$wci_Vm_11_MData ;

  // action method wci_m_3_sResp
  assign CAN_FIRE_wci_m_3_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sResp = 1'd1 ;

  // action method wci_m_3_sData
  assign CAN_FIRE_wci_m_3_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sData = 1'd1 ;

  // action method wci_m_3_sThreadBusy
  assign CAN_FIRE_wci_m_3_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sThreadBusy = wci_m_3_SThreadBusy ;

  // action method wci_m_3_sFlag
  assign CAN_FIRE_wci_m_3_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sFlag = 1'd1 ;

  // value method wci_m_3_mFlag
  assign wci_m_3_MFlag = inf_cp$wci_Vm_11_MFlag ;

  // value method wci_m_4_mCmd
  assign wci_m_4_MCmd = inf_cp$wci_Vm_12_MCmd ;

  // value method wci_m_4_mAddrSpace
  assign wci_m_4_MAddrSpace = inf_cp$wci_Vm_12_MAddrSpace ;

  // value method wci_m_4_mByteEn
  assign wci_m_4_MByteEn = inf_cp$wci_Vm_12_MByteEn ;

  // value method wci_m_4_mAddr
  assign wci_m_4_MAddr = inf_cp$wci_Vm_12_MAddr ;

  // value method wci_m_4_mData
  assign wci_m_4_MData = inf_cp$wci_Vm_12_MData ;

  // action method wci_m_4_sResp
  assign CAN_FIRE_wci_m_4_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sResp = 1'd1 ;

  // action method wci_m_4_sData
  assign CAN_FIRE_wci_m_4_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sData = 1'd1 ;

  // action method wci_m_4_sThreadBusy
  assign CAN_FIRE_wci_m_4_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sThreadBusy = wci_m_4_SThreadBusy ;

  // action method wci_m_4_sFlag
  assign CAN_FIRE_wci_m_4_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sFlag = 1'd1 ;

  // value method wci_m_4_mFlag
  assign wci_m_4_MFlag = inf_cp$wci_Vm_12_MFlag ;

  // value method cpNow
  assign cpNow = inf_cp$cpNow ;
  assign RDY_cpNow = 1'd1 ;

  // action method wsi_s_adc_mCmd
  assign CAN_FIRE_wsi_s_adc_mCmd = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mCmd = 1'd1 ;

  // action method wsi_s_adc_mReqLast
  assign CAN_FIRE_wsi_s_adc_mReqLast = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReqLast = wsi_s_adc_MReqLast ;

  // action method wsi_s_adc_mBurstPrecise
  assign CAN_FIRE_wsi_s_adc_mBurstPrecise = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mBurstPrecise = wsi_s_adc_MBurstPrecise ;

  // action method wsi_s_adc_mBurstLength
  assign CAN_FIRE_wsi_s_adc_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mBurstLength = 1'd1 ;

  // action method wsi_s_adc_mData
  assign CAN_FIRE_wsi_s_adc_mData = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mData = 1'd1 ;

  // action method wsi_s_adc_mByteEn
  assign CAN_FIRE_wsi_s_adc_mByteEn = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mByteEn = 1'd1 ;

  // action method wsi_s_adc_mReqInfo
  assign CAN_FIRE_wsi_s_adc_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReqInfo = 1'd1 ;

  // action method wsi_s_adc_mDataInfo
  assign CAN_FIRE_wsi_s_adc_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mDataInfo = 1'd1 ;

  // value method wsi_s_adc_sThreadBusy
  assign wsi_s_adc_SThreadBusy = 1'h0 ;

  // value method wsi_s_adc_sReset_n
  assign wsi_s_adc_SReset_n = 1'h0 ;

  // action method wsi_s_adc_mReset_n
  assign CAN_FIRE_wsi_s_adc_mReset_n = 1'd1 ;
  assign WILL_FIRE_wsi_s_adc_mReset_n = wsi_s_adc_MReset_n ;

  // value method wsi_m_dac_mCmd
  assign wsi_m_dac_MCmd = 3'h2 ;

  // value method wsi_m_dac_mReqLast
  assign wsi_m_dac_MReqLast = 1'h0 ;

  // value method wsi_m_dac_mBurstPrecise
  assign wsi_m_dac_MBurstPrecise = 1'h0 ;

  // value method wsi_m_dac_mBurstLength
  assign wsi_m_dac_MBurstLength = 12'hAAA ;

  // value method wsi_m_dac_mData
  assign wsi_m_dac_MData = 32'hAAAAAAAA ;

  // value method wsi_m_dac_mByteEn
  assign wsi_m_dac_MByteEn = 4'hA ;

  // value method wsi_m_dac_mReqInfo
  assign wsi_m_dac_MReqInfo = 8'hAA ;

  // action method wsi_m_dac_sThreadBusy
  assign CAN_FIRE_wsi_m_dac_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wsi_m_dac_sThreadBusy = wsi_m_dac_SThreadBusy ;

  // value method wsi_m_dac_mReset_n
  assign wsi_m_dac_MReset_n = 1'h0 ;

  // action method wsi_m_dac_sReset_n
  assign CAN_FIRE_wsi_m_dac_sReset_n = 1'd1 ;
  assign WILL_FIRE_wsi_m_dac_sReset_n = wsi_m_dac_SReset_n ;

  // value method wmemiM_mCmd
  assign wmemiM_MCmd = app_appW3_wmemi_reqF_q_0[51:49] ;

  // value method wmemiM_mReqLast
  assign wmemiM_MReqLast = app_appW3_wmemi_reqF_q_0[48] ;

  // value method wmemiM_mAddr
  assign wmemiM_MAddr = app_appW3_wmemi_reqF_q_0[47:12] ;

  // value method wmemiM_mBurstLength
  assign wmemiM_MBurstLength = app_appW3_wmemi_reqF_q_0[11:0] ;

  // value method wmemiM_mDataValid
  assign wmemiM_MDataValid = app_appW3_wmemi_dhF_q_0[145] ;

  // value method wmemiM_mDataLast
  assign wmemiM_MDataLast = app_appW3_wmemi_dhF_q_0[144] ;

  // value method wmemiM_mData
  assign wmemiM_MData = app_appW3_wmemi_dhF_q_0[143:16] ;

  // value method wmemiM_mDataByteEn
  assign wmemiM_MDataByteEn = app_appW3_wmemi_dhF_q_0[15:0] ;

  // action method wmemiM_sResp
  assign CAN_FIRE_wmemiM_sResp = 1'd1 ;
  assign WILL_FIRE_wmemiM_sResp = 1'd1 ;

  // action method wmemiM_sRespLast
  assign CAN_FIRE_wmemiM_sRespLast = 1'd1 ;
  assign WILL_FIRE_wmemiM_sRespLast = wmemiM_SRespLast ;

  // action method wmemiM_sData
  assign CAN_FIRE_wmemiM_sData = 1'd1 ;
  assign WILL_FIRE_wmemiM_sData = 1'd1 ;

  // action method wmemiM_sCmdAccept
  assign CAN_FIRE_wmemiM_sCmdAccept = 1'd1 ;
  assign WILL_FIRE_wmemiM_sCmdAccept = wmemiM_SCmdAccept ;

  // action method wmemiM_sDataAccept
  assign CAN_FIRE_wmemiM_sDataAccept = 1'd1 ;
  assign WILL_FIRE_wmemiM_sDataAccept = wmemiM_SDataAccept ;

  // value method wmemiM_mReset_n
  assign wmemiM_MReset_n =
	     !app_appW3_wmemi_isReset$VAL && app_appW3_wmemi_operateD ;

  // action method gps_ppsSyncIn
  assign CAN_FIRE_gps_ppsSyncIn = 1'd1 ;
  assign WILL_FIRE_gps_ppsSyncIn = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = inf_cp$gps_ppsSyncOut ;

  // submodule app_appW2_respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) app_appW2_respF_memory(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(app_appW2_respF_memory$ADDRA),
						     .ADDRB(app_appW2_respF_memory$ADDRB),
						     .DIA(app_appW2_respF_memory$DIA),
						     .DIB(app_appW2_respF_memory$DIB),
						     .WEA(app_appW2_respF_memory$WEA),
						     .WEB(app_appW2_respF_memory$WEB),
						     .ENA(app_appW2_respF_memory$ENA),
						     .ENB(app_appW2_respF_memory$ENB),
						     .DOA(),
						     .DOB(app_appW2_respF_memory$DOB));

  // submodule app_appW2_wci_isReset
  ResetToBool app_appW2_wci_isReset(.RST(inf_cp$RST_N_wci_Vm_2),
				    .VAL(app_appW2_wci_isReset$VAL));

  // submodule app_appW2_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) app_appW2_wci_reqF(.RST_N(inf_cp$RST_N_wci_Vm_2),
						  .CLK(CLK),
						  .D_IN(app_appW2_wci_reqF$D_IN),
						  .ENQ(app_appW2_wci_reqF$ENQ),
						  .DEQ(app_appW2_wci_reqF$DEQ),
						  .CLR(app_appW2_wci_reqF$CLR),
						  .D_OUT(app_appW2_wci_reqF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(app_appW2_wci_reqF$EMPTY_N));

  // submodule app_appW2_wmi_isReset
  ResetToBool app_appW2_wmi_isReset(.RST(inf_cp$RST_N_wci_Vm_2),
				    .VAL(app_appW2_wmi_isReset$VAL));

  // submodule app_appW2_wmi_respF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) app_appW2_wmi_respF(.RST_N(inf_cp$RST_N_wci_Vm_2),
					       .CLK(CLK),
					       .D_IN(app_appW2_wmi_respF$D_IN),
					       .ENQ(app_appW2_wmi_respF$ENQ),
					       .DEQ(app_appW2_wmi_respF$DEQ),
					       .CLR(app_appW2_wmi_respF$CLR),
					       .D_OUT(app_appW2_wmi_respF$D_OUT),
					       .FULL_N(app_appW2_wmi_respF$FULL_N),
					       .EMPTY_N(app_appW2_wmi_respF$EMPTY_N));

  // submodule app_appW2_wsiM_isReset
  ResetToBool app_appW2_wsiM_isReset(.RST(inf_cp$RST_N_wci_Vm_2),
				     .VAL(app_appW2_wsiM_isReset$VAL));

  // submodule app_appW2_wsiS_isReset
  ResetToBool app_appW2_wsiS_isReset(.RST(inf_cp$RST_N_wci_Vm_2),
				     .VAL(app_appW2_wsiS_isReset$VAL));

  // submodule app_appW2_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) app_appW2_wsiS_reqFifo(.RST_N(inf_cp$RST_N_wci_Vm_2),
						      .CLK(CLK),
						      .D_IN(app_appW2_wsiS_reqFifo$D_IN),
						      .ENQ(app_appW2_wsiS_reqFifo$ENQ),
						      .DEQ(app_appW2_wsiS_reqFifo$DEQ),
						      .CLR(app_appW2_wsiS_reqFifo$CLR),
						      .D_OUT(app_appW2_wsiS_reqFifo$D_OUT),
						      .FULL_N(),
						      .EMPTY_N(app_appW2_wsiS_reqFifo$EMPTY_N));

  // submodule app_appW3_mesgRF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) app_appW3_mesgRF(.RST_N(inf_cp$RST_N_wci_Vm_3),
						.CLK(CLK),
						.D_IN(app_appW3_mesgRF$D_IN),
						.ENQ(app_appW3_mesgRF$ENQ),
						.DEQ(app_appW3_mesgRF$DEQ),
						.CLR(app_appW3_mesgRF$CLR),
						.D_OUT(app_appW3_mesgRF$D_OUT),
						.FULL_N(app_appW3_mesgRF$FULL_N),
						.EMPTY_N(app_appW3_mesgRF$EMPTY_N));

  // submodule app_appW3_mesgWF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd12),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(13'd4096)) app_appW3_mesgWF_memory(.CLKA(CLK),
						      .CLKB(CLK),
						      .ADDRA(app_appW3_mesgWF_memory$ADDRA),
						      .ADDRB(app_appW3_mesgWF_memory$ADDRB),
						      .DIA(app_appW3_mesgWF_memory$DIA),
						      .DIB(app_appW3_mesgWF_memory$DIB),
						      .WEA(app_appW3_mesgWF_memory$WEA),
						      .WEB(app_appW3_mesgWF_memory$WEB),
						      .ENA(app_appW3_mesgWF_memory$ENA),
						      .ENB(app_appW3_mesgWF_memory$ENB),
						      .DOA(),
						      .DOB(app_appW3_mesgWF_memory$DOB));

  // submodule app_appW3_metaRF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) app_appW3_metaRF(.RST_N(inf_cp$RST_N_wci_Vm_3),
						.CLK(CLK),
						.D_IN(app_appW3_metaRF$D_IN),
						.ENQ(app_appW3_metaRF$ENQ),
						.DEQ(app_appW3_metaRF$DEQ),
						.CLR(app_appW3_metaRF$CLR),
						.D_OUT(app_appW3_metaRF$D_OUT),
						.FULL_N(app_appW3_metaRF$FULL_N),
						.EMPTY_N(app_appW3_metaRF$EMPTY_N));

  // submodule app_appW3_metaWF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) app_appW3_metaWF(.RST_N(inf_cp$RST_N_wci_Vm_3),
						.CLK(CLK),
						.D_IN(app_appW3_metaWF$D_IN),
						.ENQ(app_appW3_metaWF$ENQ),
						.DEQ(app_appW3_metaWF$DEQ),
						.CLR(app_appW3_metaWF$CLR),
						.D_OUT(app_appW3_metaWF$D_OUT),
						.FULL_N(app_appW3_metaWF$FULL_N),
						.EMPTY_N(app_appW3_metaWF$EMPTY_N));

  // submodule app_appW3_wci_isReset
  ResetToBool app_appW3_wci_isReset(.RST(inf_cp$RST_N_wci_Vm_3),
				    .VAL(app_appW3_wci_isReset$VAL));

  // submodule app_appW3_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) app_appW3_wci_reqF(.RST_N(inf_cp$RST_N_wci_Vm_3),
						  .CLK(CLK),
						  .D_IN(app_appW3_wci_reqF$D_IN),
						  .ENQ(app_appW3_wci_reqF$ENQ),
						  .DEQ(app_appW3_wci_reqF$DEQ),
						  .CLR(app_appW3_wci_reqF$CLR),
						  .D_OUT(app_appW3_wci_reqF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(app_appW3_wci_reqF$EMPTY_N));

  // submodule app_appW3_wide16Fa
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) app_appW3_wide16Fa(.RST_N(inf_cp$RST_N_wci_Vm_3),
						  .CLK(CLK),
						  .D_IN(app_appW3_wide16Fa$D_IN),
						  .ENQ(app_appW3_wide16Fa$ENQ),
						  .DEQ(app_appW3_wide16Fa$DEQ),
						  .CLR(app_appW3_wide16Fa$CLR),
						  .D_OUT(app_appW3_wide16Fa$D_OUT),
						  .FULL_N(app_appW3_wide16Fa$FULL_N),
						  .EMPTY_N(app_appW3_wide16Fa$EMPTY_N));

  // submodule app_appW3_wide16Fb
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) app_appW3_wide16Fb(.RST_N(inf_cp$RST_N_wci_Vm_3),
						  .CLK(CLK),
						  .D_IN(app_appW3_wide16Fb$D_IN),
						  .ENQ(app_appW3_wide16Fb$ENQ),
						  .DEQ(app_appW3_wide16Fb$DEQ),
						  .CLR(app_appW3_wide16Fb$CLR),
						  .D_OUT(app_appW3_wide16Fb$D_OUT),
						  .FULL_N(app_appW3_wide16Fb$FULL_N),
						  .EMPTY_N(app_appW3_wide16Fb$EMPTY_N));

  // submodule app_appW3_wide16Fc
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd15),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) app_appW3_wide16Fc(.RST_N(inf_cp$RST_N_wci_Vm_3),
						  .CLK(CLK),
						  .D_IN(app_appW3_wide16Fc$D_IN),
						  .ENQ(app_appW3_wide16Fc$ENQ),
						  .DEQ(app_appW3_wide16Fc$DEQ),
						  .CLR(app_appW3_wide16Fc$CLR),
						  .D_OUT(app_appW3_wide16Fc$D_OUT),
						  .FULL_N(app_appW3_wide16Fc$FULL_N),
						  .EMPTY_N(app_appW3_wide16Fc$EMPTY_N));

  // submodule app_appW3_wmemi_isReset
  ResetToBool app_appW3_wmemi_isReset(.RST(inf_cp$RST_N_wci_Vm_3),
				      .VAL(app_appW3_wmemi_isReset$VAL));

  // submodule app_appW3_wmemi_respF
  FIFO2 #(.width(32'd131),
	  .guarded(32'd1)) app_appW3_wmemi_respF(.RST_N(inf_cp$RST_N_wci_Vm_3),
						 .CLK(CLK),
						 .D_IN(app_appW3_wmemi_respF$D_IN),
						 .ENQ(app_appW3_wmemi_respF$ENQ),
						 .DEQ(app_appW3_wmemi_respF$DEQ),
						 .CLR(app_appW3_wmemi_respF$CLR),
						 .D_OUT(app_appW3_wmemi_respF$D_OUT),
						 .FULL_N(app_appW3_wmemi_respF$FULL_N),
						 .EMPTY_N(app_appW3_wmemi_respF$EMPTY_N));

  // submodule app_appW3_wsiM_isReset
  ResetToBool app_appW3_wsiM_isReset(.RST(inf_cp$RST_N_wci_Vm_3),
				     .VAL(app_appW3_wsiM_isReset$VAL));

  // submodule app_appW3_wsiS_isReset
  ResetToBool app_appW3_wsiS_isReset(.RST(inf_cp$RST_N_wci_Vm_3),
				     .VAL(app_appW3_wsiS_isReset$VAL));

  // submodule app_appW3_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) app_appW3_wsiS_reqFifo(.RST_N(inf_cp$RST_N_wci_Vm_3),
						      .CLK(CLK),
						      .D_IN(app_appW3_wsiS_reqFifo$D_IN),
						      .ENQ(app_appW3_wsiS_reqFifo$ENQ),
						      .DEQ(app_appW3_wsiS_reqFifo$DEQ),
						      .CLR(app_appW3_wsiS_reqFifo$CLR),
						      .D_OUT(app_appW3_wsiS_reqFifo$D_OUT),
						      .FULL_N(app_appW3_wsiS_reqFifo$FULL_N),
						      .EMPTY_N(app_appW3_wsiS_reqFifo$EMPTY_N));

  // submodule app_appW4_respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) app_appW4_respF_memory(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(app_appW4_respF_memory$ADDRA),
						     .ADDRB(app_appW4_respF_memory$ADDRB),
						     .DIA(app_appW4_respF_memory$DIA),
						     .DIB(app_appW4_respF_memory$DIB),
						     .WEA(app_appW4_respF_memory$WEA),
						     .WEB(app_appW4_respF_memory$WEB),
						     .ENA(app_appW4_respF_memory$ENA),
						     .ENB(app_appW4_respF_memory$ENB),
						     .DOA(),
						     .DOB(app_appW4_respF_memory$DOB));

  // submodule app_appW4_wci_isReset
  ResetToBool app_appW4_wci_isReset(.RST(inf_cp$RST_N_wci_Vm_4),
				    .VAL(app_appW4_wci_isReset$VAL));

  // submodule app_appW4_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) app_appW4_wci_reqF(.RST_N(inf_cp$RST_N_wci_Vm_4),
						  .CLK(CLK),
						  .D_IN(app_appW4_wci_reqF$D_IN),
						  .ENQ(app_appW4_wci_reqF$ENQ),
						  .DEQ(app_appW4_wci_reqF$DEQ),
						  .CLR(app_appW4_wci_reqF$CLR),
						  .D_OUT(app_appW4_wci_reqF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(app_appW4_wci_reqF$EMPTY_N));

  // submodule app_appW4_wmi_isReset
  ResetToBool app_appW4_wmi_isReset(.RST(inf_cp$RST_N_wci_Vm_4),
				    .VAL(app_appW4_wmi_isReset$VAL));

  // submodule app_appW4_wmi_respF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) app_appW4_wmi_respF(.RST_N(inf_cp$RST_N_wci_Vm_4),
					       .CLK(CLK),
					       .D_IN(app_appW4_wmi_respF$D_IN),
					       .ENQ(app_appW4_wmi_respF$ENQ),
					       .DEQ(app_appW4_wmi_respF$DEQ),
					       .CLR(app_appW4_wmi_respF$CLR),
					       .D_OUT(app_appW4_wmi_respF$D_OUT),
					       .FULL_N(app_appW4_wmi_respF$FULL_N),
					       .EMPTY_N(app_appW4_wmi_respF$EMPTY_N));

  // submodule app_appW4_wsiM_isReset
  ResetToBool app_appW4_wsiM_isReset(.RST(inf_cp$RST_N_wci_Vm_4),
				     .VAL(app_appW4_wsiM_isReset$VAL));

  // submodule app_appW4_wsiS_isReset
  ResetToBool app_appW4_wsiS_isReset(.RST(inf_cp$RST_N_wci_Vm_4),
				     .VAL(app_appW4_wsiS_isReset$VAL));

  // submodule app_appW4_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) app_appW4_wsiS_reqFifo(.RST_N(inf_cp$RST_N_wci_Vm_4),
						      .CLK(CLK),
						      .D_IN(app_appW4_wsiS_reqFifo$D_IN),
						      .ENQ(app_appW4_wsiS_reqFifo$ENQ),
						      .DEQ(app_appW4_wsiS_reqFifo$DEQ),
						      .CLR(app_appW4_wsiS_reqFifo$CLR),
						      .D_OUT(app_appW4_wsiS_reqFifo$D_OUT),
						      .FULL_N(app_appW4_wsiS_reqFifo$FULL_N),
						      .EMPTY_N(app_appW4_wsiS_reqFifo$EMPTY_N));

  // submodule inf_cp
  mkOCCP inf_cp(.pciDevice(pciDevice),
		.CLK_sys0_clk(CLK_sys0_clk),
		.RST_N_sys0_rst(RST_N_sys0_rst),
		.CLK(CLK),
		.RST_N(RST_N),
		.gps_ppsSyncIn_x(inf_cp$gps_ppsSyncIn_x),
		.server_request_put(inf_cp$server_request_put),
		.switch_x(inf_cp$switch_x),
		.wci_Vm_0_SData(inf_cp$wci_Vm_0_SData),
		.wci_Vm_0_SFlag(inf_cp$wci_Vm_0_SFlag),
		.wci_Vm_0_SResp(inf_cp$wci_Vm_0_SResp),
		.wci_Vm_10_SData(inf_cp$wci_Vm_10_SData),
		.wci_Vm_10_SFlag(inf_cp$wci_Vm_10_SFlag),
		.wci_Vm_10_SResp(inf_cp$wci_Vm_10_SResp),
		.wci_Vm_11_SData(inf_cp$wci_Vm_11_SData),
		.wci_Vm_11_SFlag(inf_cp$wci_Vm_11_SFlag),
		.wci_Vm_11_SResp(inf_cp$wci_Vm_11_SResp),
		.wci_Vm_12_SData(inf_cp$wci_Vm_12_SData),
		.wci_Vm_12_SFlag(inf_cp$wci_Vm_12_SFlag),
		.wci_Vm_12_SResp(inf_cp$wci_Vm_12_SResp),
		.wci_Vm_13_SData(inf_cp$wci_Vm_13_SData),
		.wci_Vm_13_SFlag(inf_cp$wci_Vm_13_SFlag),
		.wci_Vm_13_SResp(inf_cp$wci_Vm_13_SResp),
		.wci_Vm_14_SData(inf_cp$wci_Vm_14_SData),
		.wci_Vm_14_SFlag(inf_cp$wci_Vm_14_SFlag),
		.wci_Vm_14_SResp(inf_cp$wci_Vm_14_SResp),
		.wci_Vm_1_SData(inf_cp$wci_Vm_1_SData),
		.wci_Vm_1_SFlag(inf_cp$wci_Vm_1_SFlag),
		.wci_Vm_1_SResp(inf_cp$wci_Vm_1_SResp),
		.wci_Vm_2_SData(inf_cp$wci_Vm_2_SData),
		.wci_Vm_2_SFlag(inf_cp$wci_Vm_2_SFlag),
		.wci_Vm_2_SResp(inf_cp$wci_Vm_2_SResp),
		.wci_Vm_3_SData(inf_cp$wci_Vm_3_SData),
		.wci_Vm_3_SFlag(inf_cp$wci_Vm_3_SFlag),
		.wci_Vm_3_SResp(inf_cp$wci_Vm_3_SResp),
		.wci_Vm_4_SData(inf_cp$wci_Vm_4_SData),
		.wci_Vm_4_SFlag(inf_cp$wci_Vm_4_SFlag),
		.wci_Vm_4_SResp(inf_cp$wci_Vm_4_SResp),
		.wci_Vm_5_SData(inf_cp$wci_Vm_5_SData),
		.wci_Vm_5_SFlag(inf_cp$wci_Vm_5_SFlag),
		.wci_Vm_5_SResp(inf_cp$wci_Vm_5_SResp),
		.wci_Vm_6_SData(inf_cp$wci_Vm_6_SData),
		.wci_Vm_6_SFlag(inf_cp$wci_Vm_6_SFlag),
		.wci_Vm_6_SResp(inf_cp$wci_Vm_6_SResp),
		.wci_Vm_7_SData(inf_cp$wci_Vm_7_SData),
		.wci_Vm_7_SFlag(inf_cp$wci_Vm_7_SFlag),
		.wci_Vm_7_SResp(inf_cp$wci_Vm_7_SResp),
		.wci_Vm_8_SData(inf_cp$wci_Vm_8_SData),
		.wci_Vm_8_SFlag(inf_cp$wci_Vm_8_SFlag),
		.wci_Vm_8_SResp(inf_cp$wci_Vm_8_SResp),
		.wci_Vm_9_SData(inf_cp$wci_Vm_9_SData),
		.wci_Vm_9_SFlag(inf_cp$wci_Vm_9_SFlag),
		.wci_Vm_9_SResp(inf_cp$wci_Vm_9_SResp),
		.EN_server_request_put(inf_cp$EN_server_request_put),
		.EN_server_response_get(inf_cp$EN_server_response_get),
		.wci_Vm_0_SThreadBusy(inf_cp$wci_Vm_0_SThreadBusy),
		.wci_Vm_1_SThreadBusy(inf_cp$wci_Vm_1_SThreadBusy),
		.wci_Vm_2_SThreadBusy(inf_cp$wci_Vm_2_SThreadBusy),
		.wci_Vm_3_SThreadBusy(inf_cp$wci_Vm_3_SThreadBusy),
		.wci_Vm_4_SThreadBusy(inf_cp$wci_Vm_4_SThreadBusy),
		.wci_Vm_5_SThreadBusy(inf_cp$wci_Vm_5_SThreadBusy),
		.wci_Vm_6_SThreadBusy(inf_cp$wci_Vm_6_SThreadBusy),
		.wci_Vm_7_SThreadBusy(inf_cp$wci_Vm_7_SThreadBusy),
		.wci_Vm_8_SThreadBusy(inf_cp$wci_Vm_8_SThreadBusy),
		.wci_Vm_9_SThreadBusy(inf_cp$wci_Vm_9_SThreadBusy),
		.wci_Vm_10_SThreadBusy(inf_cp$wci_Vm_10_SThreadBusy),
		.wci_Vm_11_SThreadBusy(inf_cp$wci_Vm_11_SThreadBusy),
		.wci_Vm_12_SThreadBusy(inf_cp$wci_Vm_12_SThreadBusy),
		.wci_Vm_13_SThreadBusy(inf_cp$wci_Vm_13_SThreadBusy),
		.wci_Vm_14_SThreadBusy(inf_cp$wci_Vm_14_SThreadBusy),
		.RDY_server_request_put(inf_cp$RDY_server_request_put),
		.server_response_get(inf_cp$server_response_get),
		.RDY_server_response_get(inf_cp$RDY_server_response_get),
		.led(inf_cp$led),
		.wci_Vm_0_MCmd(inf_cp$wci_Vm_0_MCmd),
		.wci_Vm_0_MAddrSpace(inf_cp$wci_Vm_0_MAddrSpace),
		.wci_Vm_0_MByteEn(inf_cp$wci_Vm_0_MByteEn),
		.wci_Vm_0_MAddr(inf_cp$wci_Vm_0_MAddr),
		.wci_Vm_0_MData(inf_cp$wci_Vm_0_MData),
		.wci_Vm_0_MFlag(),
		.wci_Vm_1_MCmd(inf_cp$wci_Vm_1_MCmd),
		.wci_Vm_1_MAddrSpace(inf_cp$wci_Vm_1_MAddrSpace),
		.wci_Vm_1_MByteEn(inf_cp$wci_Vm_1_MByteEn),
		.wci_Vm_1_MAddr(inf_cp$wci_Vm_1_MAddr),
		.wci_Vm_1_MData(inf_cp$wci_Vm_1_MData),
		.wci_Vm_1_MFlag(),
		.wci_Vm_2_MCmd(inf_cp$wci_Vm_2_MCmd),
		.wci_Vm_2_MAddrSpace(inf_cp$wci_Vm_2_MAddrSpace),
		.wci_Vm_2_MByteEn(inf_cp$wci_Vm_2_MByteEn),
		.wci_Vm_2_MAddr(inf_cp$wci_Vm_2_MAddr),
		.wci_Vm_2_MData(inf_cp$wci_Vm_2_MData),
		.wci_Vm_2_MFlag(),
		.wci_Vm_3_MCmd(inf_cp$wci_Vm_3_MCmd),
		.wci_Vm_3_MAddrSpace(inf_cp$wci_Vm_3_MAddrSpace),
		.wci_Vm_3_MByteEn(inf_cp$wci_Vm_3_MByteEn),
		.wci_Vm_3_MAddr(inf_cp$wci_Vm_3_MAddr),
		.wci_Vm_3_MData(inf_cp$wci_Vm_3_MData),
		.wci_Vm_3_MFlag(),
		.wci_Vm_4_MCmd(inf_cp$wci_Vm_4_MCmd),
		.wci_Vm_4_MAddrSpace(inf_cp$wci_Vm_4_MAddrSpace),
		.wci_Vm_4_MByteEn(inf_cp$wci_Vm_4_MByteEn),
		.wci_Vm_4_MAddr(inf_cp$wci_Vm_4_MAddr),
		.wci_Vm_4_MData(inf_cp$wci_Vm_4_MData),
		.wci_Vm_4_MFlag(),
		.wci_Vm_5_MCmd(inf_cp$wci_Vm_5_MCmd),
		.wci_Vm_5_MAddrSpace(inf_cp$wci_Vm_5_MAddrSpace),
		.wci_Vm_5_MByteEn(inf_cp$wci_Vm_5_MByteEn),
		.wci_Vm_5_MAddr(inf_cp$wci_Vm_5_MAddr),
		.wci_Vm_5_MData(inf_cp$wci_Vm_5_MData),
		.wci_Vm_5_MFlag(),
		.wci_Vm_6_MCmd(inf_cp$wci_Vm_6_MCmd),
		.wci_Vm_6_MAddrSpace(inf_cp$wci_Vm_6_MAddrSpace),
		.wci_Vm_6_MByteEn(inf_cp$wci_Vm_6_MByteEn),
		.wci_Vm_6_MAddr(inf_cp$wci_Vm_6_MAddr),
		.wci_Vm_6_MData(inf_cp$wci_Vm_6_MData),
		.wci_Vm_6_MFlag(),
		.wci_Vm_7_MCmd(inf_cp$wci_Vm_7_MCmd),
		.wci_Vm_7_MAddrSpace(inf_cp$wci_Vm_7_MAddrSpace),
		.wci_Vm_7_MByteEn(inf_cp$wci_Vm_7_MByteEn),
		.wci_Vm_7_MAddr(inf_cp$wci_Vm_7_MAddr),
		.wci_Vm_7_MData(inf_cp$wci_Vm_7_MData),
		.wci_Vm_7_MFlag(),
		.wci_Vm_8_MCmd(inf_cp$wci_Vm_8_MCmd),
		.wci_Vm_8_MAddrSpace(inf_cp$wci_Vm_8_MAddrSpace),
		.wci_Vm_8_MByteEn(inf_cp$wci_Vm_8_MByteEn),
		.wci_Vm_8_MAddr(inf_cp$wci_Vm_8_MAddr),
		.wci_Vm_8_MData(inf_cp$wci_Vm_8_MData),
		.wci_Vm_8_MFlag(inf_cp$wci_Vm_8_MFlag),
		.wci_Vm_9_MCmd(inf_cp$wci_Vm_9_MCmd),
		.wci_Vm_9_MAddrSpace(inf_cp$wci_Vm_9_MAddrSpace),
		.wci_Vm_9_MByteEn(inf_cp$wci_Vm_9_MByteEn),
		.wci_Vm_9_MAddr(inf_cp$wci_Vm_9_MAddr),
		.wci_Vm_9_MData(inf_cp$wci_Vm_9_MData),
		.wci_Vm_9_MFlag(inf_cp$wci_Vm_9_MFlag),
		.wci_Vm_10_MCmd(inf_cp$wci_Vm_10_MCmd),
		.wci_Vm_10_MAddrSpace(inf_cp$wci_Vm_10_MAddrSpace),
		.wci_Vm_10_MByteEn(inf_cp$wci_Vm_10_MByteEn),
		.wci_Vm_10_MAddr(inf_cp$wci_Vm_10_MAddr),
		.wci_Vm_10_MData(inf_cp$wci_Vm_10_MData),
		.wci_Vm_10_MFlag(inf_cp$wci_Vm_10_MFlag),
		.wci_Vm_11_MCmd(inf_cp$wci_Vm_11_MCmd),
		.wci_Vm_11_MAddrSpace(inf_cp$wci_Vm_11_MAddrSpace),
		.wci_Vm_11_MByteEn(inf_cp$wci_Vm_11_MByteEn),
		.wci_Vm_11_MAddr(inf_cp$wci_Vm_11_MAddr),
		.wci_Vm_11_MData(inf_cp$wci_Vm_11_MData),
		.wci_Vm_11_MFlag(inf_cp$wci_Vm_11_MFlag),
		.wci_Vm_12_MCmd(inf_cp$wci_Vm_12_MCmd),
		.wci_Vm_12_MAddrSpace(inf_cp$wci_Vm_12_MAddrSpace),
		.wci_Vm_12_MByteEn(inf_cp$wci_Vm_12_MByteEn),
		.wci_Vm_12_MAddr(inf_cp$wci_Vm_12_MAddr),
		.wci_Vm_12_MData(inf_cp$wci_Vm_12_MData),
		.wci_Vm_12_MFlag(inf_cp$wci_Vm_12_MFlag),
		.wci_Vm_13_MCmd(inf_cp$wci_Vm_13_MCmd),
		.wci_Vm_13_MAddrSpace(inf_cp$wci_Vm_13_MAddrSpace),
		.wci_Vm_13_MByteEn(inf_cp$wci_Vm_13_MByteEn),
		.wci_Vm_13_MAddr(inf_cp$wci_Vm_13_MAddr),
		.wci_Vm_13_MData(inf_cp$wci_Vm_13_MData),
		.wci_Vm_13_MFlag(),
		.wci_Vm_14_MCmd(inf_cp$wci_Vm_14_MCmd),
		.wci_Vm_14_MAddrSpace(inf_cp$wci_Vm_14_MAddrSpace),
		.wci_Vm_14_MByteEn(inf_cp$wci_Vm_14_MByteEn),
		.wci_Vm_14_MAddr(inf_cp$wci_Vm_14_MAddr),
		.wci_Vm_14_MData(inf_cp$wci_Vm_14_MData),
		.wci_Vm_14_MFlag(),
		.cpNow(inf_cp$cpNow),
		.RDY_cpNow(),
		.gps_ppsSyncOut(inf_cp$gps_ppsSyncOut),
		.RST_N_wci_Vm_0(),
		.RST_N_wci_Vm_1(),
		.RST_N_wci_Vm_2(inf_cp$RST_N_wci_Vm_2),
		.RST_N_wci_Vm_3(inf_cp$RST_N_wci_Vm_3),
		.RST_N_wci_Vm_4(inf_cp$RST_N_wci_Vm_4),
		.RST_N_wci_Vm_5(),
		.RST_N_wci_Vm_6(),
		.RST_N_wci_Vm_7(),
		.RST_N_wci_Vm_8(inf_cp$RST_N_wci_Vm_8),
		.RST_N_wci_Vm_9(inf_cp$RST_N_wci_Vm_9),
		.RST_N_wci_Vm_10(inf_cp$RST_N_wci_Vm_10),
		.RST_N_wci_Vm_11(inf_cp$RST_N_wci_Vm_11),
		.RST_N_wci_Vm_12(inf_cp$RST_N_wci_Vm_12),
		.RST_N_wci_Vm_13(inf_cp$RST_N_wci_Vm_13),
		.RST_N_wci_Vm_14(inf_cp$RST_N_wci_Vm_14));

  // submodule inf_dp0_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp0_bram_memory(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(inf_dp0_bram_memory$ADDRA),
						  .ADDRB(inf_dp0_bram_memory$ADDRB),
						  .DIA(inf_dp0_bram_memory$DIA),
						  .DIB(inf_dp0_bram_memory$DIB),
						  .WEA(inf_dp0_bram_memory$WEA),
						  .WEB(inf_dp0_bram_memory$WEB),
						  .ENA(inf_dp0_bram_memory$ENA),
						  .ENB(inf_dp0_bram_memory$ENB),
						  .DOA(inf_dp0_bram_memory$DOA),
						  .DOB(inf_dp0_bram_memory$DOB));

  // submodule inf_dp0_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp0_bram_memory_1(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(inf_dp0_bram_memory_1$ADDRA),
						    .ADDRB(inf_dp0_bram_memory_1$ADDRB),
						    .DIA(inf_dp0_bram_memory_1$DIA),
						    .DIB(inf_dp0_bram_memory_1$DIB),
						    .WEA(inf_dp0_bram_memory_1$WEA),
						    .WEB(inf_dp0_bram_memory_1$WEB),
						    .ENA(inf_dp0_bram_memory_1$ENA),
						    .ENB(inf_dp0_bram_memory_1$ENB),
						    .DOA(inf_dp0_bram_memory_1$DOA),
						    .DOB(inf_dp0_bram_memory_1$DOB));

  // submodule inf_dp0_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp0_bram_memory_2(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(inf_dp0_bram_memory_2$ADDRA),
						    .ADDRB(inf_dp0_bram_memory_2$ADDRB),
						    .DIA(inf_dp0_bram_memory_2$DIA),
						    .DIB(inf_dp0_bram_memory_2$DIB),
						    .WEA(inf_dp0_bram_memory_2$WEA),
						    .WEB(inf_dp0_bram_memory_2$WEB),
						    .ENA(inf_dp0_bram_memory_2$ENA),
						    .ENB(inf_dp0_bram_memory_2$ENB),
						    .DOA(inf_dp0_bram_memory_2$DOA),
						    .DOB(inf_dp0_bram_memory_2$DOB));

  // submodule inf_dp0_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp0_bram_memory_3(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(inf_dp0_bram_memory_3$ADDRA),
						    .ADDRB(inf_dp0_bram_memory_3$ADDRB),
						    .DIA(inf_dp0_bram_memory_3$DIA),
						    .DIB(inf_dp0_bram_memory_3$DIB),
						    .WEA(inf_dp0_bram_memory_3$WEA),
						    .WEB(inf_dp0_bram_memory_3$WEB),
						    .ENA(inf_dp0_bram_memory_3$ENA),
						    .ENB(inf_dp0_bram_memory_3$ENB),
						    .DOA(inf_dp0_bram_memory_3$DOA),
						    .DOB(inf_dp0_bram_memory_3$DOB));

  // submodule inf_dp0_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterA_1_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
									 .CLK(CLK),
									 .D_IN(inf_dp0_bram_serverAdapterA_1_outDataCore$D_IN),
									 .ENQ(inf_dp0_bram_serverAdapterA_1_outDataCore$ENQ),
									 .DEQ(inf_dp0_bram_serverAdapterA_1_outDataCore$DEQ),
									 .CLR(inf_dp0_bram_serverAdapterA_1_outDataCore$CLR),
									 .D_OUT(inf_dp0_bram_serverAdapterA_1_outDataCore$D_OUT),
									 .FULL_N(inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule inf_dp0_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterA_2_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
									 .CLK(CLK),
									 .D_IN(inf_dp0_bram_serverAdapterA_2_outDataCore$D_IN),
									 .ENQ(inf_dp0_bram_serverAdapterA_2_outDataCore$ENQ),
									 .DEQ(inf_dp0_bram_serverAdapterA_2_outDataCore$DEQ),
									 .CLR(inf_dp0_bram_serverAdapterA_2_outDataCore$CLR),
									 .D_OUT(inf_dp0_bram_serverAdapterA_2_outDataCore$D_OUT),
									 .FULL_N(inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule inf_dp0_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterA_3_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
									 .CLK(CLK),
									 .D_IN(inf_dp0_bram_serverAdapterA_3_outDataCore$D_IN),
									 .ENQ(inf_dp0_bram_serverAdapterA_3_outDataCore$ENQ),
									 .DEQ(inf_dp0_bram_serverAdapterA_3_outDataCore$DEQ),
									 .CLR(inf_dp0_bram_serverAdapterA_3_outDataCore$CLR),
									 .D_OUT(inf_dp0_bram_serverAdapterA_3_outDataCore$D_OUT),
									 .FULL_N(inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule inf_dp0_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterA_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
								       .CLK(CLK),
								       .D_IN(inf_dp0_bram_serverAdapterA_outDataCore$D_IN),
								       .ENQ(inf_dp0_bram_serverAdapterA_outDataCore$ENQ),
								       .DEQ(inf_dp0_bram_serverAdapterA_outDataCore$DEQ),
								       .CLR(inf_dp0_bram_serverAdapterA_outDataCore$CLR),
								       .D_OUT(inf_dp0_bram_serverAdapterA_outDataCore$D_OUT),
								       .FULL_N(inf_dp0_bram_serverAdapterA_outDataCore$FULL_N),
								       .EMPTY_N(inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule inf_dp0_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterB_1_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
									 .CLK(CLK),
									 .D_IN(inf_dp0_bram_serverAdapterB_1_outDataCore$D_IN),
									 .ENQ(inf_dp0_bram_serverAdapterB_1_outDataCore$ENQ),
									 .DEQ(inf_dp0_bram_serverAdapterB_1_outDataCore$DEQ),
									 .CLR(inf_dp0_bram_serverAdapterB_1_outDataCore$CLR),
									 .D_OUT(inf_dp0_bram_serverAdapterB_1_outDataCore$D_OUT),
									 .FULL_N(inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule inf_dp0_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterB_2_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
									 .CLK(CLK),
									 .D_IN(inf_dp0_bram_serverAdapterB_2_outDataCore$D_IN),
									 .ENQ(inf_dp0_bram_serverAdapterB_2_outDataCore$ENQ),
									 .DEQ(inf_dp0_bram_serverAdapterB_2_outDataCore$DEQ),
									 .CLR(inf_dp0_bram_serverAdapterB_2_outDataCore$CLR),
									 .D_OUT(inf_dp0_bram_serverAdapterB_2_outDataCore$D_OUT),
									 .FULL_N(inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule inf_dp0_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterB_3_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
									 .CLK(CLK),
									 .D_IN(inf_dp0_bram_serverAdapterB_3_outDataCore$D_IN),
									 .ENQ(inf_dp0_bram_serverAdapterB_3_outDataCore$ENQ),
									 .DEQ(inf_dp0_bram_serverAdapterB_3_outDataCore$DEQ),
									 .CLR(inf_dp0_bram_serverAdapterB_3_outDataCore$CLR),
									 .D_OUT(inf_dp0_bram_serverAdapterB_3_outDataCore$D_OUT),
									 .FULL_N(inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule inf_dp0_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_bram_serverAdapterB_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_13),
								       .CLK(CLK),
								       .D_IN(inf_dp0_bram_serverAdapterB_outDataCore$D_IN),
								       .ENQ(inf_dp0_bram_serverAdapterB_outDataCore$ENQ),
								       .DEQ(inf_dp0_bram_serverAdapterB_outDataCore$DEQ),
								       .CLR(inf_dp0_bram_serverAdapterB_outDataCore$CLR),
								       .D_OUT(inf_dp0_bram_serverAdapterB_outDataCore$D_OUT),
								       .FULL_N(inf_dp0_bram_serverAdapterB_outDataCore$FULL_N),
								       .EMPTY_N(inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule inf_dp0_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp0_tlp_inF(.CLK(CLK),
					      .RST_N(inf_cp$RST_N_wci_Vm_13),
					      .D_IN(inf_dp0_tlp_inF$D_IN),
					      .ENQ(inf_dp0_tlp_inF$ENQ),
					      .DEQ(inf_dp0_tlp_inF$DEQ),
					      .CLR(inf_dp0_tlp_inF$CLR),
					      .D_OUT(inf_dp0_tlp_inF$D_OUT),
					      .EMPTY_N(inf_dp0_tlp_inF$EMPTY_N),
					      .FULL_N(inf_dp0_tlp_inF$FULL_N));

  // submodule inf_dp0_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp0_tlp_mReqF(.CLK(CLK),
						.RST_N(inf_cp$RST_N_wci_Vm_13),
						.D_IN(inf_dp0_tlp_mReqF$D_IN),
						.ENQ(inf_dp0_tlp_mReqF$ENQ),
						.DEQ(inf_dp0_tlp_mReqF$DEQ),
						.CLR(inf_dp0_tlp_mReqF$CLR),
						.D_OUT(inf_dp0_tlp_mReqF$D_OUT),
						.EMPTY_N(inf_dp0_tlp_mReqF$EMPTY_N),
						.FULL_N(inf_dp0_tlp_mReqF$FULL_N));

  // submodule inf_dp0_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) inf_dp0_tlp_mRespF(.RST_N(inf_cp$RST_N_wci_Vm_13),
					      .CLK(CLK),
					      .D_IN(inf_dp0_tlp_mRespF$D_IN),
					      .ENQ(inf_dp0_tlp_mRespF$ENQ),
					      .DEQ(inf_dp0_tlp_mRespF$DEQ),
					      .CLR(inf_dp0_tlp_mRespF$CLR),
					      .D_OUT(inf_dp0_tlp_mRespF$D_OUT),
					      .FULL_N(inf_dp0_tlp_mRespF$FULL_N),
					      .EMPTY_N(inf_dp0_tlp_mRespF$EMPTY_N));

  // submodule inf_dp0_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp0_tlp_outF(.CLK(CLK),
					       .RST_N(inf_cp$RST_N_wci_Vm_13),
					       .D_IN(inf_dp0_tlp_outF$D_IN),
					       .ENQ(inf_dp0_tlp_outF$ENQ),
					       .DEQ(inf_dp0_tlp_outF$DEQ),
					       .CLR(inf_dp0_tlp_outF$CLR),
					       .D_OUT(inf_dp0_tlp_outF$D_OUT),
					       .EMPTY_N(inf_dp0_tlp_outF$EMPTY_N),
					       .FULL_N(inf_dp0_tlp_outF$FULL_N));

  // submodule inf_dp0_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp0_tlp_readReq(.CLK(CLK),
						  .RST_N(inf_cp$RST_N_wci_Vm_13),
						  .D_IN(inf_dp0_tlp_readReq$D_IN),
						  .ENQ(inf_dp0_tlp_readReq$ENQ),
						  .DEQ(inf_dp0_tlp_readReq$DEQ),
						  .CLR(inf_dp0_tlp_readReq$CLR),
						  .D_OUT(inf_dp0_tlp_readReq$D_OUT),
						  .EMPTY_N(inf_dp0_tlp_readReq$EMPTY_N),
						  .FULL_N(inf_dp0_tlp_readReq$FULL_N));

  // submodule inf_dp0_wci_isReset
  ResetToBool inf_dp0_wci_isReset(.RST(inf_cp$RST_N_wci_Vm_13),
				  .VAL(inf_dp0_wci_isReset$VAL));

  // submodule inf_dp0_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_wci_reqF(.RST_N(inf_cp$RST_N_wci_Vm_13),
						.CLK(CLK),
						.D_IN(inf_dp0_wci_reqF$D_IN),
						.ENQ(inf_dp0_wci_reqF$ENQ),
						.DEQ(inf_dp0_wci_reqF$DEQ),
						.CLR(inf_dp0_wci_reqF$CLR),
						.D_OUT(inf_dp0_wci_reqF$D_OUT),
						.FULL_N(),
						.EMPTY_N(inf_dp0_wci_reqF$EMPTY_N));

  // submodule inf_dp0_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_wmi_wmi_dhF(.RST_N(inf_cp$RST_N_wci_Vm_13),
						   .CLK(CLK),
						   .D_IN(inf_dp0_wmi_wmi_dhF$D_IN),
						   .ENQ(inf_dp0_wmi_wmi_dhF$ENQ),
						   .DEQ(inf_dp0_wmi_wmi_dhF$DEQ),
						   .CLR(inf_dp0_wmi_wmi_dhF$CLR),
						   .D_OUT(inf_dp0_wmi_wmi_dhF$D_OUT),
						   .FULL_N(inf_dp0_wmi_wmi_dhF$FULL_N),
						   .EMPTY_N(inf_dp0_wmi_wmi_dhF$EMPTY_N));

  // submodule inf_dp0_wmi_wmi_isReset
  ResetToBool inf_dp0_wmi_wmi_isReset(.RST(inf_cp$RST_N_wci_Vm_13),
				      .VAL(inf_dp0_wmi_wmi_isReset$VAL));

  // submodule inf_dp0_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_wmi_wmi_mFlagF(.RST_N(inf_cp$RST_N_wci_Vm_13),
						      .CLK(CLK),
						      .D_IN(inf_dp0_wmi_wmi_mFlagF$D_IN),
						      .ENQ(inf_dp0_wmi_wmi_mFlagF$ENQ),
						      .DEQ(inf_dp0_wmi_wmi_mFlagF$DEQ),
						      .CLR(inf_dp0_wmi_wmi_mFlagF$CLR),
						      .D_OUT(inf_dp0_wmi_wmi_mFlagF$D_OUT),
						      .FULL_N(inf_dp0_wmi_wmi_mFlagF$FULL_N),
						      .EMPTY_N(inf_dp0_wmi_wmi_mFlagF$EMPTY_N));

  // submodule inf_dp0_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp0_wmi_wmi_reqF(.RST_N(inf_cp$RST_N_wci_Vm_13),
						    .CLK(CLK),
						    .D_IN(inf_dp0_wmi_wmi_reqF$D_IN),
						    .ENQ(inf_dp0_wmi_wmi_reqF$ENQ),
						    .DEQ(inf_dp0_wmi_wmi_reqF$DEQ),
						    .CLR(inf_dp0_wmi_wmi_reqF$CLR),
						    .D_OUT(inf_dp0_wmi_wmi_reqF$D_OUT),
						    .FULL_N(inf_dp0_wmi_wmi_reqF$FULL_N),
						    .EMPTY_N(inf_dp0_wmi_wmi_reqF$EMPTY_N));

  // submodule inf_dp0_wti_isReset
  ResetToBool inf_dp0_wti_isReset(.RST(inf_cp$RST_N_wci_Vm_13),
				  .VAL(inf_dp0_wti_isReset$VAL));

  // submodule inf_dp1_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp1_bram_memory(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(inf_dp1_bram_memory$ADDRA),
						  .ADDRB(inf_dp1_bram_memory$ADDRB),
						  .DIA(inf_dp1_bram_memory$DIA),
						  .DIB(inf_dp1_bram_memory$DIB),
						  .WEA(inf_dp1_bram_memory$WEA),
						  .WEB(inf_dp1_bram_memory$WEB),
						  .ENA(inf_dp1_bram_memory$ENA),
						  .ENB(inf_dp1_bram_memory$ENB),
						  .DOA(inf_dp1_bram_memory$DOA),
						  .DOB(inf_dp1_bram_memory$DOB));

  // submodule inf_dp1_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp1_bram_memory_1(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(inf_dp1_bram_memory_1$ADDRA),
						    .ADDRB(inf_dp1_bram_memory_1$ADDRB),
						    .DIA(inf_dp1_bram_memory_1$DIA),
						    .DIB(inf_dp1_bram_memory_1$DIB),
						    .WEA(inf_dp1_bram_memory_1$WEA),
						    .WEB(inf_dp1_bram_memory_1$WEB),
						    .ENA(inf_dp1_bram_memory_1$ENA),
						    .ENB(inf_dp1_bram_memory_1$ENB),
						    .DOA(inf_dp1_bram_memory_1$DOA),
						    .DOB(inf_dp1_bram_memory_1$DOB));

  // submodule inf_dp1_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp1_bram_memory_2(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(inf_dp1_bram_memory_2$ADDRA),
						    .ADDRB(inf_dp1_bram_memory_2$ADDRB),
						    .DIA(inf_dp1_bram_memory_2$DIA),
						    .DIB(inf_dp1_bram_memory_2$DIB),
						    .WEA(inf_dp1_bram_memory_2$WEA),
						    .WEB(inf_dp1_bram_memory_2$WEB),
						    .ENA(inf_dp1_bram_memory_2$ENA),
						    .ENB(inf_dp1_bram_memory_2$ENB),
						    .DOA(inf_dp1_bram_memory_2$DOA),
						    .DOB(inf_dp1_bram_memory_2$DOB));

  // submodule inf_dp1_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) inf_dp1_bram_memory_3(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(inf_dp1_bram_memory_3$ADDRA),
						    .ADDRB(inf_dp1_bram_memory_3$ADDRB),
						    .DIA(inf_dp1_bram_memory_3$DIA),
						    .DIB(inf_dp1_bram_memory_3$DIB),
						    .WEA(inf_dp1_bram_memory_3$WEA),
						    .WEB(inf_dp1_bram_memory_3$WEB),
						    .ENA(inf_dp1_bram_memory_3$ENA),
						    .ENB(inf_dp1_bram_memory_3$ENB),
						    .DOA(inf_dp1_bram_memory_3$DOA),
						    .DOB(inf_dp1_bram_memory_3$DOB));

  // submodule inf_dp1_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterA_1_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
									 .CLK(CLK),
									 .D_IN(inf_dp1_bram_serverAdapterA_1_outDataCore$D_IN),
									 .ENQ(inf_dp1_bram_serverAdapterA_1_outDataCore$ENQ),
									 .DEQ(inf_dp1_bram_serverAdapterA_1_outDataCore$DEQ),
									 .CLR(inf_dp1_bram_serverAdapterA_1_outDataCore$CLR),
									 .D_OUT(inf_dp1_bram_serverAdapterA_1_outDataCore$D_OUT),
									 .FULL_N(inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule inf_dp1_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterA_2_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
									 .CLK(CLK),
									 .D_IN(inf_dp1_bram_serverAdapterA_2_outDataCore$D_IN),
									 .ENQ(inf_dp1_bram_serverAdapterA_2_outDataCore$ENQ),
									 .DEQ(inf_dp1_bram_serverAdapterA_2_outDataCore$DEQ),
									 .CLR(inf_dp1_bram_serverAdapterA_2_outDataCore$CLR),
									 .D_OUT(inf_dp1_bram_serverAdapterA_2_outDataCore$D_OUT),
									 .FULL_N(inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule inf_dp1_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterA_3_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
									 .CLK(CLK),
									 .D_IN(inf_dp1_bram_serverAdapterA_3_outDataCore$D_IN),
									 .ENQ(inf_dp1_bram_serverAdapterA_3_outDataCore$ENQ),
									 .DEQ(inf_dp1_bram_serverAdapterA_3_outDataCore$DEQ),
									 .CLR(inf_dp1_bram_serverAdapterA_3_outDataCore$CLR),
									 .D_OUT(inf_dp1_bram_serverAdapterA_3_outDataCore$D_OUT),
									 .FULL_N(inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule inf_dp1_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterA_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
								       .CLK(CLK),
								       .D_IN(inf_dp1_bram_serverAdapterA_outDataCore$D_IN),
								       .ENQ(inf_dp1_bram_serverAdapterA_outDataCore$ENQ),
								       .DEQ(inf_dp1_bram_serverAdapterA_outDataCore$DEQ),
								       .CLR(inf_dp1_bram_serverAdapterA_outDataCore$CLR),
								       .D_OUT(inf_dp1_bram_serverAdapterA_outDataCore$D_OUT),
								       .FULL_N(inf_dp1_bram_serverAdapterA_outDataCore$FULL_N),
								       .EMPTY_N(inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule inf_dp1_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterB_1_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
									 .CLK(CLK),
									 .D_IN(inf_dp1_bram_serverAdapterB_1_outDataCore$D_IN),
									 .ENQ(inf_dp1_bram_serverAdapterB_1_outDataCore$ENQ),
									 .DEQ(inf_dp1_bram_serverAdapterB_1_outDataCore$DEQ),
									 .CLR(inf_dp1_bram_serverAdapterB_1_outDataCore$CLR),
									 .D_OUT(inf_dp1_bram_serverAdapterB_1_outDataCore$D_OUT),
									 .FULL_N(inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule inf_dp1_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterB_2_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
									 .CLK(CLK),
									 .D_IN(inf_dp1_bram_serverAdapterB_2_outDataCore$D_IN),
									 .ENQ(inf_dp1_bram_serverAdapterB_2_outDataCore$ENQ),
									 .DEQ(inf_dp1_bram_serverAdapterB_2_outDataCore$DEQ),
									 .CLR(inf_dp1_bram_serverAdapterB_2_outDataCore$CLR),
									 .D_OUT(inf_dp1_bram_serverAdapterB_2_outDataCore$D_OUT),
									 .FULL_N(inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule inf_dp1_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterB_3_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
									 .CLK(CLK),
									 .D_IN(inf_dp1_bram_serverAdapterB_3_outDataCore$D_IN),
									 .ENQ(inf_dp1_bram_serverAdapterB_3_outDataCore$ENQ),
									 .DEQ(inf_dp1_bram_serverAdapterB_3_outDataCore$DEQ),
									 .CLR(inf_dp1_bram_serverAdapterB_3_outDataCore$CLR),
									 .D_OUT(inf_dp1_bram_serverAdapterB_3_outDataCore$D_OUT),
									 .FULL_N(inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N),
									 .EMPTY_N(inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule inf_dp1_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_bram_serverAdapterB_outDataCore(.RST_N(inf_cp$RST_N_wci_Vm_14),
								       .CLK(CLK),
								       .D_IN(inf_dp1_bram_serverAdapterB_outDataCore$D_IN),
								       .ENQ(inf_dp1_bram_serverAdapterB_outDataCore$ENQ),
								       .DEQ(inf_dp1_bram_serverAdapterB_outDataCore$DEQ),
								       .CLR(inf_dp1_bram_serverAdapterB_outDataCore$CLR),
								       .D_OUT(inf_dp1_bram_serverAdapterB_outDataCore$D_OUT),
								       .FULL_N(inf_dp1_bram_serverAdapterB_outDataCore$FULL_N),
								       .EMPTY_N(inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule inf_dp1_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp1_tlp_inF(.CLK(CLK),
					      .RST_N(inf_cp$RST_N_wci_Vm_14),
					      .D_IN(inf_dp1_tlp_inF$D_IN),
					      .ENQ(inf_dp1_tlp_inF$ENQ),
					      .DEQ(inf_dp1_tlp_inF$DEQ),
					      .CLR(inf_dp1_tlp_inF$CLR),
					      .D_OUT(inf_dp1_tlp_inF$D_OUT),
					      .EMPTY_N(inf_dp1_tlp_inF$EMPTY_N),
					      .FULL_N(inf_dp1_tlp_inF$FULL_N));

  // submodule inf_dp1_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp1_tlp_mReqF(.CLK(CLK),
						.RST_N(inf_cp$RST_N_wci_Vm_14),
						.D_IN(inf_dp1_tlp_mReqF$D_IN),
						.ENQ(inf_dp1_tlp_mReqF$ENQ),
						.DEQ(inf_dp1_tlp_mReqF$DEQ),
						.CLR(inf_dp1_tlp_mReqF$CLR),
						.D_OUT(inf_dp1_tlp_mReqF$D_OUT),
						.EMPTY_N(inf_dp1_tlp_mReqF$EMPTY_N),
						.FULL_N(inf_dp1_tlp_mReqF$FULL_N));

  // submodule inf_dp1_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) inf_dp1_tlp_mRespF(.RST_N(inf_cp$RST_N_wci_Vm_14),
					      .CLK(CLK),
					      .D_IN(inf_dp1_tlp_mRespF$D_IN),
					      .ENQ(inf_dp1_tlp_mRespF$ENQ),
					      .DEQ(inf_dp1_tlp_mRespF$DEQ),
					      .CLR(inf_dp1_tlp_mRespF$CLR),
					      .D_OUT(inf_dp1_tlp_mRespF$D_OUT),
					      .FULL_N(inf_dp1_tlp_mRespF$FULL_N),
					      .EMPTY_N(inf_dp1_tlp_mRespF$EMPTY_N));

  // submodule inf_dp1_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp1_tlp_outF(.CLK(CLK),
					       .RST_N(inf_cp$RST_N_wci_Vm_14),
					       .D_IN(inf_dp1_tlp_outF$D_IN),
					       .ENQ(inf_dp1_tlp_outF$ENQ),
					       .DEQ(inf_dp1_tlp_outF$DEQ),
					       .CLR(inf_dp1_tlp_outF$CLR),
					       .D_OUT(inf_dp1_tlp_outF$D_OUT),
					       .EMPTY_N(inf_dp1_tlp_outF$EMPTY_N),
					       .FULL_N(inf_dp1_tlp_outF$FULL_N));

  // submodule inf_dp1_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) inf_dp1_tlp_readReq(.CLK(CLK),
						  .RST_N(inf_cp$RST_N_wci_Vm_14),
						  .D_IN(inf_dp1_tlp_readReq$D_IN),
						  .ENQ(inf_dp1_tlp_readReq$ENQ),
						  .DEQ(inf_dp1_tlp_readReq$DEQ),
						  .CLR(inf_dp1_tlp_readReq$CLR),
						  .D_OUT(inf_dp1_tlp_readReq$D_OUT),
						  .EMPTY_N(inf_dp1_tlp_readReq$EMPTY_N),
						  .FULL_N(inf_dp1_tlp_readReq$FULL_N));

  // submodule inf_dp1_wci_isReset
  ResetToBool inf_dp1_wci_isReset(.RST(inf_cp$RST_N_wci_Vm_14),
				  .VAL(inf_dp1_wci_isReset$VAL));

  // submodule inf_dp1_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_wci_reqF(.RST_N(inf_cp$RST_N_wci_Vm_14),
						.CLK(CLK),
						.D_IN(inf_dp1_wci_reqF$D_IN),
						.ENQ(inf_dp1_wci_reqF$ENQ),
						.DEQ(inf_dp1_wci_reqF$DEQ),
						.CLR(inf_dp1_wci_reqF$CLR),
						.D_OUT(inf_dp1_wci_reqF$D_OUT),
						.FULL_N(),
						.EMPTY_N(inf_dp1_wci_reqF$EMPTY_N));

  // submodule inf_dp1_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd38),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_wmi_wmi_dhF(.RST_N(inf_cp$RST_N_wci_Vm_14),
						   .CLK(CLK),
						   .D_IN(inf_dp1_wmi_wmi_dhF$D_IN),
						   .ENQ(inf_dp1_wmi_wmi_dhF$ENQ),
						   .DEQ(inf_dp1_wmi_wmi_dhF$DEQ),
						   .CLR(inf_dp1_wmi_wmi_dhF$CLR),
						   .D_OUT(inf_dp1_wmi_wmi_dhF$D_OUT),
						   .FULL_N(inf_dp1_wmi_wmi_dhF$FULL_N),
						   .EMPTY_N(inf_dp1_wmi_wmi_dhF$EMPTY_N));

  // submodule inf_dp1_wmi_wmi_isReset
  ResetToBool inf_dp1_wmi_wmi_isReset(.RST(inf_cp$RST_N_wci_Vm_14),
				      .VAL(inf_dp1_wmi_wmi_isReset$VAL));

  // submodule inf_dp1_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_wmi_wmi_mFlagF(.RST_N(inf_cp$RST_N_wci_Vm_14),
						      .CLK(CLK),
						      .D_IN(inf_dp1_wmi_wmi_mFlagF$D_IN),
						      .ENQ(inf_dp1_wmi_wmi_mFlagF$ENQ),
						      .DEQ(inf_dp1_wmi_wmi_mFlagF$DEQ),
						      .CLR(inf_dp1_wmi_wmi_mFlagF$CLR),
						      .D_OUT(inf_dp1_wmi_wmi_mFlagF$D_OUT),
						      .FULL_N(inf_dp1_wmi_wmi_mFlagF$FULL_N),
						      .EMPTY_N(inf_dp1_wmi_wmi_mFlagF$EMPTY_N));

  // submodule inf_dp1_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) inf_dp1_wmi_wmi_reqF(.RST_N(inf_cp$RST_N_wci_Vm_14),
						    .CLK(CLK),
						    .D_IN(inf_dp1_wmi_wmi_reqF$D_IN),
						    .ENQ(inf_dp1_wmi_wmi_reqF$ENQ),
						    .DEQ(inf_dp1_wmi_wmi_reqF$DEQ),
						    .CLR(inf_dp1_wmi_wmi_reqF$CLR),
						    .D_OUT(inf_dp1_wmi_wmi_reqF$D_OUT),
						    .FULL_N(inf_dp1_wmi_wmi_reqF$FULL_N),
						    .EMPTY_N(inf_dp1_wmi_wmi_reqF$EMPTY_N));

  // submodule inf_dp1_wti_isReset
  ResetToBool inf_dp1_wti_isReset(.RST(inf_cp$RST_N_wci_Vm_14),
				  .VAL(inf_dp1_wti_isReset$VAL));

  // submodule inf_itc0_now
  SyncRegister #(.width(32'd64),
		 .init(64'd0)) inf_itc0_now(.sCLK(CLK_sys0_clk),
					    .dCLK(CLK),
					    .sRST_N(RST_N_sys0_rst),
					    .sD_IN(inf_itc0_now$sD_IN),
					    .sEN(inf_itc0_now$sEN),
					    .dD_OUT(inf_itc0_now$dD_OUT),
					    .sRDY(inf_itc0_now$sRDY));

  // submodule inf_itc1_now
  SyncRegister #(.width(32'd64),
		 .init(64'd0)) inf_itc1_now(.sCLK(CLK_sys0_clk),
					    .dCLK(CLK),
					    .sRST_N(RST_N_sys0_rst),
					    .sD_IN(inf_itc1_now$sD_IN),
					    .sEN(inf_itc1_now$sEN),
					    .dD_OUT(inf_itc1_now$dD_OUT),
					    .sRDY(inf_itc1_now$sRDY));

  // submodule inf_sm0
  mkTLPSM inf_sm0(.pfk(14'd1360),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(inf_sm0$c0_response_put),
		  .c1_response_put(inf_sm0$c1_response_put),
		  .s_request_put(inf_sm0$s_request_put),
		  .EN_s_request_put(inf_sm0$EN_s_request_put),
		  .EN_s_response_get(inf_sm0$EN_s_response_get),
		  .EN_c0_request_get(inf_sm0$EN_c0_request_get),
		  .EN_c0_response_put(inf_sm0$EN_c0_response_put),
		  .EN_c1_request_get(inf_sm0$EN_c1_request_get),
		  .EN_c1_response_put(inf_sm0$EN_c1_response_put),
		  .RDY_s_request_put(inf_sm0$RDY_s_request_put),
		  .s_response_get(inf_sm0$s_response_get),
		  .RDY_s_response_get(inf_sm0$RDY_s_response_get),
		  .c0_request_get(inf_sm0$c0_request_get),
		  .RDY_c0_request_get(inf_sm0$RDY_c0_request_get),
		  .RDY_c0_response_put(inf_sm0$RDY_c0_response_put),
		  .c1_request_get(inf_sm0$c1_request_get),
		  .RDY_c1_request_get(inf_sm0$RDY_c1_request_get),
		  .RDY_c1_response_put(inf_sm0$RDY_c1_response_put));

  // submodule inf_sm1
  mkTLPSM inf_sm1(.pfk(14'd9488),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(inf_sm1$c0_response_put),
		  .c1_response_put(inf_sm1$c1_response_put),
		  .s_request_put(inf_sm1$s_request_put),
		  .EN_s_request_put(inf_sm1$EN_s_request_put),
		  .EN_s_response_get(inf_sm1$EN_s_response_get),
		  .EN_c0_request_get(inf_sm1$EN_c0_request_get),
		  .EN_c0_response_put(inf_sm1$EN_c0_response_put),
		  .EN_c1_request_get(inf_sm1$EN_c1_request_get),
		  .EN_c1_response_put(inf_sm1$EN_c1_response_put),
		  .RDY_s_request_put(inf_sm1$RDY_s_request_put),
		  .s_response_get(inf_sm1$s_response_get),
		  .RDY_s_response_get(inf_sm1$RDY_s_response_get),
		  .c0_request_get(inf_sm1$c0_request_get),
		  .RDY_c0_request_get(inf_sm1$RDY_c0_request_get),
		  .RDY_c0_response_put(inf_sm1$RDY_c0_response_put),
		  .c1_request_get(inf_sm1$c1_request_get),
		  .RDY_c1_request_get(inf_sm1$RDY_c1_request_get),
		  .RDY_c1_response_put(inf_sm1$RDY_c1_response_put));

  // submodule inf_sm2
  mkTLPSM inf_sm2(.pfk(14'd9497),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(inf_sm2$c0_response_put),
		  .c1_response_put(inf_sm2$c1_response_put),
		  .s_request_put(inf_sm2$s_request_put),
		  .EN_s_request_put(inf_sm2$EN_s_request_put),
		  .EN_s_response_get(inf_sm2$EN_s_response_get),
		  .EN_c0_request_get(inf_sm2$EN_c0_request_get),
		  .EN_c0_response_put(inf_sm2$EN_c0_response_put),
		  .EN_c1_request_get(inf_sm2$EN_c1_request_get),
		  .EN_c1_response_put(inf_sm2$EN_c1_response_put),
		  .RDY_s_request_put(inf_sm2$RDY_s_request_put),
		  .s_response_get(inf_sm2$s_response_get),
		  .RDY_s_response_get(inf_sm2$RDY_s_response_get),
		  .c0_request_get(inf_sm2$c0_request_get),
		  .RDY_c0_request_get(inf_sm2$RDY_c0_request_get),
		  .RDY_c0_response_put(inf_sm2$RDY_c0_response_put),
		  .c1_request_get(),
		  .RDY_c1_request_get(inf_sm2$RDY_c1_request_get),
		  .RDY_c1_response_put());

  // rule RL_inf_mkConnectionVtoAf
  assign CAN_FIRE_RL_inf_mkConnectionVtoAf = inf_itc0_now$sRDY ;
  assign WILL_FIRE_RL_inf_mkConnectionVtoAf = inf_itc0_now$sRDY ;

  // rule RL_inf_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_inf_mkConnectionVtoAf_1 = inf_itc1_now$sRDY ;
  assign WILL_FIRE_RL_inf_mkConnectionVtoAf_1 = inf_itc1_now$sRDY ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mAddrSConnect
  assign CAN_FIRE_RL_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect = 1'd1 ;

  // rule RL_mBEConnect
  assign CAN_FIRE_RL_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect = 1'd1 ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_mAddrSConnect_1
  assign CAN_FIRE_RL_mAddrSConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_1 = 1'd1 ;

  // rule RL_mBEConnect_1
  assign CAN_FIRE_RL_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_1 = 1'd1 ;

  // rule RL_mAddrConnect_1
  assign CAN_FIRE_RL_mAddrConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_1 = 1'd1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_1
  assign CAN_FIRE_RL_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_1 = 1'd1 ;

  // rule RL_sDataConnect_1
  assign CAN_FIRE_RL_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_1 = 1'd1 ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect_1 = 1'd1 ;

  // rule RL_sFlagConnect_1
  assign CAN_FIRE_RL_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_1 = 1'd1 ;

  // rule RL_mAddrSConnect_2
  assign CAN_FIRE_RL_mAddrSConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_2 = 1'd1 ;

  // rule RL_mCmdConnect_2
  assign CAN_FIRE_RL_mCmdConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_2 = 1'd1 ;

  // rule RL_mBEConnect_2
  assign CAN_FIRE_RL_mBEConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_2 = 1'd1 ;

  // rule RL_mAddrConnect_2
  assign CAN_FIRE_RL_mAddrConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_2 = 1'd1 ;

  // rule RL_mDataConnect_2
  assign CAN_FIRE_RL_mDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_2 = 1'd1 ;

  // rule RL_sRespConnect_2
  assign CAN_FIRE_RL_sRespConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_2 = 1'd1 ;

  // rule RL_sDataConnect_2
  assign CAN_FIRE_RL_sDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_2 = 1'd1 ;

  // rule RL_sFlagConnect_2
  assign CAN_FIRE_RL_sFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_2 = 1'd1 ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 =
	     app_appW2_wci_reqF_countReg > 2'd1 || app_appW2_wci_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_2 = CAN_FIRE_RL_stbConnect_2 ;

  // rule RL_mCmdConnect_3
  assign CAN_FIRE_RL_mCmdConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_3 = 1'd1 ;

  // rule RL_mAddrSConnect_3
  assign CAN_FIRE_RL_mAddrSConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_3 = 1'd1 ;

  // rule RL_mBEConnect_3
  assign CAN_FIRE_RL_mBEConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_3 = 1'd1 ;

  // rule RL_mAddrConnect_3
  assign CAN_FIRE_RL_mAddrConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_3 = 1'd1 ;

  // rule RL_mDataConnect_3
  assign CAN_FIRE_RL_mDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_3 = 1'd1 ;

  // rule RL_sDataConnect_3
  assign CAN_FIRE_RL_sDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_3 = 1'd1 ;

  // rule RL_sRespConnect_3
  assign CAN_FIRE_RL_sRespConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_3 = 1'd1 ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 =
	     app_appW3_wci_reqF_countReg > 2'd1 || app_appW3_wci_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_3 = CAN_FIRE_RL_stbConnect_3 ;

  // rule RL_sFlagConnect_3
  assign CAN_FIRE_RL_sFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_3 = 1'd1 ;

  // rule RL_mCmdConnect_4
  assign CAN_FIRE_RL_mCmdConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_4 = 1'd1 ;

  // rule RL_mAddrSConnect_4
  assign CAN_FIRE_RL_mAddrSConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_4 = 1'd1 ;

  // rule RL_mBEConnect_4
  assign CAN_FIRE_RL_mBEConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_4 = 1'd1 ;

  // rule RL_mDataConnect_4
  assign CAN_FIRE_RL_mDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_4 = 1'd1 ;

  // rule RL_mAddrConnect_4
  assign CAN_FIRE_RL_mAddrConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_4 = 1'd1 ;

  // rule RL_sRespConnect_4
  assign CAN_FIRE_RL_sRespConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_4 = 1'd1 ;

  // rule RL_sDataConnect_4
  assign CAN_FIRE_RL_sDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_4 = 1'd1 ;

  // rule RL_stbConnect_4
  assign CAN_FIRE_RL_stbConnect_4 =
	     app_appW4_wci_reqF_countReg > 2'd1 || app_appW4_wci_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_4 = CAN_FIRE_RL_stbConnect_4 ;

  // rule RL_sFlagConnect_4
  assign CAN_FIRE_RL_sFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_4 = 1'd1 ;

  // rule RL_mCmdConnect_5
  assign CAN_FIRE_RL_mCmdConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_5 = 1'd1 ;

  // rule RL_mAddrSConnect_5
  assign CAN_FIRE_RL_mAddrSConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_5 = 1'd1 ;

  // rule RL_mBEConnect_5
  assign CAN_FIRE_RL_mBEConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_5 = 1'd1 ;

  // rule RL_mAddrConnect_5
  assign CAN_FIRE_RL_mAddrConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_5 = 1'd1 ;

  // rule RL_mDataConnect_5
  assign CAN_FIRE_RL_mDataConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_5 = 1'd1 ;

  // rule RL_sRespConnect_5
  assign CAN_FIRE_RL_sRespConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_5 = 1'd1 ;

  // rule RL_sDataConnect_5
  assign CAN_FIRE_RL_sDataConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_5 = 1'd1 ;

  // rule RL_stbConnect_5
  assign CAN_FIRE_RL_stbConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect_5 = 1'd1 ;

  // rule RL_sFlagConnect_5
  assign CAN_FIRE_RL_sFlagConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_5 = 1'd1 ;

  // rule RL_mCmdConnect_6
  assign CAN_FIRE_RL_mCmdConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_6 = 1'd1 ;

  // rule RL_mAddrSConnect_6
  assign CAN_FIRE_RL_mAddrSConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_6 = 1'd1 ;

  // rule RL_mBEConnect_6
  assign CAN_FIRE_RL_mBEConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_6 = 1'd1 ;

  // rule RL_mAddrConnect_6
  assign CAN_FIRE_RL_mAddrConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_6 = 1'd1 ;

  // rule RL_mDataConnect_6
  assign CAN_FIRE_RL_mDataConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_6 = 1'd1 ;

  // rule RL_sRespConnect_6
  assign CAN_FIRE_RL_sRespConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_6 = 1'd1 ;

  // rule RL_stbConnect_6
  assign CAN_FIRE_RL_stbConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect_6 = 1'd1 ;

  // rule RL_sDataConnect_6
  assign CAN_FIRE_RL_sDataConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_6 = 1'd1 ;

  // rule RL_sFlagConnect_6
  assign CAN_FIRE_RL_sFlagConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_6 = 1'd1 ;

  // rule RL_mCmdConnect_7
  assign CAN_FIRE_RL_mCmdConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_7 = 1'd1 ;

  // rule RL_mAddrSConnect_7
  assign CAN_FIRE_RL_mAddrSConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_7 = 1'd1 ;

  // rule RL_mBEConnect_7
  assign CAN_FIRE_RL_mBEConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_7 = 1'd1 ;

  // rule RL_mAddrConnect_7
  assign CAN_FIRE_RL_mAddrConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_7 = 1'd1 ;

  // rule RL_sRespConnect_7
  assign CAN_FIRE_RL_sRespConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_7 = 1'd1 ;

  // rule RL_mDataConnect_7
  assign CAN_FIRE_RL_mDataConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_7 = 1'd1 ;

  // rule RL_sDataConnect_7
  assign CAN_FIRE_RL_sDataConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_7 = 1'd1 ;

  // rule RL_stbConnect_7
  assign CAN_FIRE_RL_stbConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect_7 = 1'd1 ;

  // rule RL_sFlagConnect_7
  assign CAN_FIRE_RL_sFlagConnect_7 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_7 = 1'd1 ;

  // rule RL_mCmdConnect_8
  assign CAN_FIRE_RL_mCmdConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_8 = 1'd1 ;

  // rule RL_mReqLConnect
  assign CAN_FIRE_RL_mReqLConnect = app_appW2_wmi_reqF_q_0[28] ;
  assign WILL_FIRE_RL_mReqLConnect = CAN_FIRE_RL_mReqLConnect ;

  // rule RL_mReqIConnect
  assign CAN_FIRE_RL_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect = 1'd1 ;

  // rule RL_mAddrSConnect_8
  assign CAN_FIRE_RL_mAddrSConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_8 = 1'd1 ;

  // rule RL_mAddrConnect_8
  assign CAN_FIRE_RL_mAddrConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_8 = 1'd1 ;

  // rule RL_mBurstLConnect
  assign CAN_FIRE_RL_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect = 1'd1 ;

  // rule RL_mDataVConnect
  assign CAN_FIRE_RL_mDataVConnect =
	     !app_appW2_wmi_sDataThreadBusy_d && app_appW2_wmi_dhF_q_0[37] ;
  assign WILL_FIRE_RL_mDataVConnect = CAN_FIRE_RL_mDataVConnect ;

  // rule RL_mDataLConnect
  assign CAN_FIRE_RL_mDataLConnect = app_appW2_wmi_dhF_q_0[36] ;
  assign WILL_FIRE_RL_mDataLConnect = CAN_FIRE_RL_mDataLConnect ;

  // rule RL_mDataConnect_8
  assign CAN_FIRE_RL_mDataConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_8 = 1'd1 ;

  // rule RL_mDataIConnect
  assign CAN_FIRE_RL_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect = 1'd1 ;

  // rule RL_mDataBEConnect
  assign CAN_FIRE_RL_mDataBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataBEConnect = 1'd1 ;

  // rule RL_sRespConnect_8
  assign CAN_FIRE_RL_sRespConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_8 = 1'd1 ;

  // rule RL_sDataConnect_8
  assign CAN_FIRE_RL_sDataConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_8 = 1'd1 ;

  // rule RL_mFlagConnect_8
  assign CAN_FIRE_RL_mFlagConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_8 = 1'd1 ;

  // rule RL_mRstConnect
  assign CAN_FIRE_RL_mRstConnect =
	     !app_appW2_wmi_isReset$VAL && app_appW2_wmi_operateD ;
  assign WILL_FIRE_RL_mRstConnect = CAN_FIRE_RL_mRstConnect ;

  // rule RL_sRstConnect
  assign CAN_FIRE_RL_sRstConnect =
	     !inf_dp0_wmi_wmi_isReset$VAL && inf_dp0_wmi_wmi_operateD ;
  assign WILL_FIRE_RL_sRstConnect = CAN_FIRE_RL_sRstConnect ;

  // rule RL_mCmdConnect_9
  assign CAN_FIRE_RL_mCmdConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_9 = 1'd1 ;

  // rule RL_mReqLConnect_1
  assign CAN_FIRE_RL_mReqLConnect_1 = app_appW4_wmi_reqF_q_0[28] ;
  assign WILL_FIRE_RL_mReqLConnect_1 = CAN_FIRE_RL_mReqLConnect_1 ;

  // rule RL_mBurstLConnect_1
  assign CAN_FIRE_RL_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_1 = 1'd1 ;

  // rule RL_mReqIConnect_1
  assign CAN_FIRE_RL_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_1 = 1'd1 ;

  // rule RL_mAddrSConnect_9
  assign CAN_FIRE_RL_mAddrSConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_9 = 1'd1 ;

  // rule RL_mAddrConnect_9
  assign CAN_FIRE_RL_mAddrConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_9 = 1'd1 ;

  // rule RL_mDataVConnect_1
  assign CAN_FIRE_RL_mDataVConnect_1 =
	     !app_appW4_wmi_sDataThreadBusy_d && app_appW4_wmi_dhF_q_0[37] ;
  assign WILL_FIRE_RL_mDataVConnect_1 = CAN_FIRE_RL_mDataVConnect_1 ;

  // rule RL_mDataLConnect_1
  assign CAN_FIRE_RL_mDataLConnect_1 = app_appW4_wmi_dhF_q_0[36] ;
  assign WILL_FIRE_RL_mDataLConnect_1 = CAN_FIRE_RL_mDataLConnect_1 ;

  // rule RL_mDataConnect_9
  assign CAN_FIRE_RL_mDataConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_9 = 1'd1 ;

  // rule RL_mDataIConnect_1
  assign CAN_FIRE_RL_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect_1 = 1'd1 ;

  // rule RL_mDataBEConnect_1
  assign CAN_FIRE_RL_mDataBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataBEConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_9
  assign CAN_FIRE_RL_sRespConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_9 = 1'd1 ;

  // rule RL_sDataConnect_9
  assign CAN_FIRE_RL_sDataConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_9 = 1'd1 ;

  // rule RL_mFlagConnect_9
  assign CAN_FIRE_RL_mFlagConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_9 = 1'd1 ;

  // rule RL_mRstConnect_1
  assign CAN_FIRE_RL_mRstConnect_1 =
	     !app_appW4_wmi_isReset$VAL && app_appW4_wmi_operateD ;
  assign WILL_FIRE_RL_mRstConnect_1 = CAN_FIRE_RL_mRstConnect_1 ;

  // rule RL_sRstConnect_1
  assign CAN_FIRE_RL_sRstConnect_1 =
	     !inf_dp1_wmi_wmi_isReset$VAL && inf_dp1_wmi_wmi_operateD ;
  assign WILL_FIRE_RL_sRstConnect_1 = CAN_FIRE_RL_sRstConnect_1 ;

  // rule RL_inf_mCmdConnect
  assign CAN_FIRE_RL_inf_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_mCmdConnect = 1'd1 ;

  // rule RL_inf_mAddrSConnect
  assign CAN_FIRE_RL_inf_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_mAddrSConnect = 1'd1 ;

  // rule RL_inf_mBEConnect
  assign CAN_FIRE_RL_inf_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_mBEConnect = 1'd1 ;

  // rule RL_inf_mAddrConnect
  assign CAN_FIRE_RL_inf_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_mAddrConnect = 1'd1 ;

  // rule RL_inf_mDataConnect
  assign CAN_FIRE_RL_inf_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_mDataConnect = 1'd1 ;

  // rule RL_inf_sRespConnect
  assign CAN_FIRE_RL_inf_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_sRespConnect = 1'd1 ;

  // rule RL_inf_sDataConnect
  assign CAN_FIRE_RL_inf_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_sDataConnect = 1'd1 ;

  // rule RL_inf_mAddrConnect_1
  assign CAN_FIRE_RL_inf_mAddrConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_mAddrConnect_1 = 1'd1 ;

  // rule RL_inf_stbConnect
  assign CAN_FIRE_RL_inf_stbConnect =
	     inf_dp0_wci_reqF_countReg > 2'd1 || inf_dp0_wci_isReset$VAL ;
  assign WILL_FIRE_RL_inf_stbConnect = CAN_FIRE_RL_inf_stbConnect ;

  // rule RL_inf_sFlagConnect
  assign CAN_FIRE_RL_inf_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_sFlagConnect = 1'd1 ;

  // rule RL_inf_mCmdConnect_1
  assign CAN_FIRE_RL_inf_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_mCmdConnect_1 = 1'd1 ;

  // rule RL_inf_mAddrSConnect_1
  assign CAN_FIRE_RL_inf_mAddrSConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_mAddrSConnect_1 = 1'd1 ;

  // rule RL_inf_mBEConnect_1
  assign CAN_FIRE_RL_inf_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_mBEConnect_1 = 1'd1 ;

  // rule RL_inf_mDataConnect_1
  assign CAN_FIRE_RL_inf_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_mDataConnect_1 = 1'd1 ;

  // rule RL_inf_sRespConnect_1
  assign CAN_FIRE_RL_inf_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_sRespConnect_1 = 1'd1 ;

  // rule RL_inf_sDataConnect_1
  assign CAN_FIRE_RL_inf_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_sDataConnect_1 = 1'd1 ;

  // rule RL_inf_sFlagConnect_1
  assign CAN_FIRE_RL_inf_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_sFlagConnect_1 = 1'd1 ;

  // rule RL_inf_stbConnect_1
  assign CAN_FIRE_RL_inf_stbConnect_1 =
	     inf_dp1_wci_reqF_countReg > 2'd1 || inf_dp1_wci_isReset$VAL ;
  assign WILL_FIRE_RL_inf_stbConnect_1 = CAN_FIRE_RL_inf_stbConnect_1 ;

  // rule RL_inf_stbConnect_2
  assign CAN_FIRE_RL_inf_stbConnect_2 = inf_dp0_wti_isReset$VAL ;
  assign WILL_FIRE_RL_inf_stbConnect_2 = inf_dp0_wti_isReset$VAL ;

  // rule RL_inf_stbConnect_3
  assign CAN_FIRE_RL_inf_stbConnect_3 = inf_dp1_wti_isReset$VAL ;
  assign WILL_FIRE_RL_inf_stbConnect_3 = inf_dp1_wti_isReset$VAL ;

  // rule RL_inf_ClientServerRequest
  assign CAN_FIRE_RL_inf_ClientServerRequest =
	     inf_sm0$RDY_c0_request_get && inf_cp$RDY_server_request_put ;
  assign WILL_FIRE_RL_inf_ClientServerRequest =
	     CAN_FIRE_RL_inf_ClientServerRequest ;

  // rule RL_inf_ClientServerResponse
  assign CAN_FIRE_RL_inf_ClientServerResponse =
	     inf_sm0$RDY_c0_response_put && inf_cp$RDY_server_response_get ;
  assign WILL_FIRE_RL_inf_ClientServerResponse =
	     CAN_FIRE_RL_inf_ClientServerResponse ;

  // rule RL_inf_ClientServerRequest_1
  assign CAN_FIRE_RL_inf_ClientServerRequest_1 =
	     inf_sm1$RDY_s_request_put && inf_sm0$RDY_c1_request_get ;
  assign WILL_FIRE_RL_inf_ClientServerRequest_1 =
	     CAN_FIRE_RL_inf_ClientServerRequest_1 ;

  // rule RL_inf_ClientServerResponse_1
  assign CAN_FIRE_RL_inf_ClientServerResponse_1 =
	     inf_sm1$RDY_s_response_get && inf_sm0$RDY_c1_response_put ;
  assign WILL_FIRE_RL_inf_ClientServerResponse_1 =
	     CAN_FIRE_RL_inf_ClientServerResponse_1 ;

  // rule RL_inf_ClientServerRequest_2
  assign CAN_FIRE_RL_inf_ClientServerRequest_2 =
	     inf_dp0_tlp_inF$FULL_N && inf_sm1$RDY_c0_request_get ;
  assign WILL_FIRE_RL_inf_ClientServerRequest_2 =
	     CAN_FIRE_RL_inf_ClientServerRequest_2 ;

  // rule RL_inf_ClientServerResponse_2
  assign CAN_FIRE_RL_inf_ClientServerResponse_2 =
	     inf_dp0_tlp_outF$EMPTY_N && inf_sm1$RDY_c0_response_put ;
  assign WILL_FIRE_RL_inf_ClientServerResponse_2 =
	     CAN_FIRE_RL_inf_ClientServerResponse_2 ;

  // rule RL_inf_ClientServerRequest_3
  assign CAN_FIRE_RL_inf_ClientServerRequest_3 =
	     inf_sm2$RDY_s_request_put && inf_sm1$RDY_c1_request_get ;
  assign WILL_FIRE_RL_inf_ClientServerRequest_3 =
	     CAN_FIRE_RL_inf_ClientServerRequest_3 ;

  // rule RL_inf_ClientServerResponse_3
  assign CAN_FIRE_RL_inf_ClientServerResponse_3 =
	     inf_sm2$RDY_s_response_get && inf_sm1$RDY_c1_response_put ;
  assign WILL_FIRE_RL_inf_ClientServerResponse_3 =
	     CAN_FIRE_RL_inf_ClientServerResponse_3 ;

  // rule RL_inf_ClientServerRequest_4
  assign CAN_FIRE_RL_inf_ClientServerRequest_4 =
	     inf_dp1_tlp_inF$FULL_N && inf_sm2$RDY_c0_request_get ;
  assign WILL_FIRE_RL_inf_ClientServerRequest_4 =
	     CAN_FIRE_RL_inf_ClientServerRequest_4 ;

  // rule RL_inf_ClientServerResponse_4
  assign CAN_FIRE_RL_inf_ClientServerResponse_4 =
	     inf_dp1_tlp_outF$EMPTY_N && inf_sm2$RDY_c0_response_put ;
  assign WILL_FIRE_RL_inf_ClientServerResponse_4 =
	     CAN_FIRE_RL_inf_ClientServerResponse_4 ;

  // rule RL_inf_chomp_rogue
  assign CAN_FIRE_RL_inf_chomp_rogue = inf_sm2$RDY_c1_request_get ;
  assign WILL_FIRE_RL_inf_chomp_rogue = inf_sm2$RDY_c1_request_get ;

  // rule RL_inf_dp0_rStart
  assign CAN_FIRE_RL_inf_dp0_rStart = inf_dp0_wmi_mesgStart ;
  assign WILL_FIRE_RL_inf_dp0_rStart = inf_dp0_wmi_mesgStart ;

  // rule RL_inf_dp0_rDone
  assign CAN_FIRE_RL_inf_dp0_rDone = inf_dp0_wmi_mesgDone ;
  assign WILL_FIRE_RL_inf_dp0_rDone = inf_dp0_wmi_mesgDone ;

  // rule RL_inf_dp0_rRdy
  assign CAN_FIRE_RL_inf_dp0_rRdy =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp0_rRdy = CAN_FIRE_RL_inf_dp0_rRdy ;

  // rule RL_inf_dp0_rStart_1
  assign CAN_FIRE_RL_inf_dp0_rStart_1 = inf_dp0_tlp_remStart ;
  assign WILL_FIRE_RL_inf_dp0_rStart_1 = inf_dp0_tlp_remStart ;

  // rule RL_inf_dp0_rDone_1
  assign CAN_FIRE_RL_inf_dp0_rDone_1 = inf_dp0_tlp_remDone ;
  assign WILL_FIRE_RL_inf_dp0_rDone_1 = inf_dp0_tlp_remDone ;

  // rule RL_inf_dp0_rRdy_1
  assign CAN_FIRE_RL_inf_dp0_rRdy_1 =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp0_rRdy_1 = CAN_FIRE_RL_inf_dp0_rRdy_1 ;

  // rule RL_inf_dp0_rFRdy_1
  assign CAN_FIRE_RL_inf_dp0_rFRdy_1 =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp0_rFRdy_1 = CAN_FIRE_RL_inf_dp0_rFRdy_1 ;

  // rule RL_inf_dp0_rCredit_1
  assign CAN_FIRE_RL_inf_dp0_rCredit_1 =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp0_rCredit_1 = CAN_FIRE_RL_inf_dp0_rCredit_1 ;

  // rule RL_inf_dp0_assignControl
  assign CAN_FIRE_RL_inf_dp0_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_assignControl = 1'd1 ;

  // rule RL_inf_dp0_operating_actions
  assign CAN_FIRE_RL_inf_dp0_operating_actions =
	     CAN_FIRE_RL_inf_dp0_bml_lbar ;
  assign WILL_FIRE_RL_inf_dp0_operating_actions =
	     CAN_FIRE_RL_inf_dp0_bml_lbar ;

  // rule RL_inf_dp0_mkConnectionVtoAf
  assign CAN_FIRE_RL_inf_dp0_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_mkConnectionVtoAf = 1'd1 ;

  // rule RL_inf_reqConnect
  assign CAN_FIRE_RL_inf_reqConnect = 1'd1 ;
  assign WILL_FIRE_RL_inf_reqConnect = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterA_s1[0] ||
	      inf_dp0_bram_serverAdapterA_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_overRun =
	     inf_dp0_bram_serverAdapterA_s1[1] &&
	     !inf_dp0_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_inf_dp0_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterB_s1[0] ||
	      inf_dp0_bram_serverAdapterB_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_overRun =
	     inf_dp0_bram_serverAdapterB_s1[1] &&
	     !inf_dp0_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterA_1_s1[0] ||
	      inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_overRun =
	     inf_dp0_bram_serverAdapterA_1_s1[1] &&
	     !inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterB_1_s1[0] ||
	      inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_overRun =
	     inf_dp0_bram_serverAdapterB_1_s1[1] &&
	     !inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterA_2_s1[0] ||
	      inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_overRun =
	     inf_dp0_bram_serverAdapterA_2_s1[1] &&
	     !inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterB_2_s1[0] ||
	      inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_overRun =
	     inf_dp0_bram_serverAdapterB_2_s1[1] &&
	     !inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterA_3_s1[0] ||
	      inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_overRun =
	     inf_dp0_bram_serverAdapterA_3_s1[1] &&
	     !inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     (!inf_dp0_bram_serverAdapterB_3_s1[0] ||
	      inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     inf_dp0_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_overRun =
	     inf_dp0_bram_serverAdapterB_3_s1[1] &&
	     !inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_overRun ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     !inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_inf_dp0_wci_request_decode
  assign CAN_FIRE_RL_inf_dp0_wci_request_decode = inf_dp0_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp0_wci_request_decode = inf_dp0_wci_reqF$EMPTY_N ;

  // rule RL_inf_dp0_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_inf_dp0_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_inf_dp0_wci_respF_deq
  assign CAN_FIRE_RL_inf_dp0_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wci_respF_deq = 1'd1 ;

  // rule RL_inf_dp0_wci_cfrd
  assign CAN_FIRE_RL_inf_dp0_wci_cfrd =
	     inf_dp0_wci_reqF$EMPTY_N && inf_dp0_wci_respF_c_r != 2'd2 &&
	     inf_dp0_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_inf_dp0_wci_cfrd =
	     CAN_FIRE_RL_inf_dp0_wci_cfrd &&
	     !WILL_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete ;

  // rule RL_inf_dp0_wci_ctl_op_start
  assign CAN_FIRE_RL_inf_dp0_wci_ctl_op_start =
	     inf_dp0_wci_reqF$EMPTY_N && inf_dp0_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_inf_dp0_wci_ctl_op_start =
	     CAN_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete ;

  // rule RL_inf_dp0_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_inf_dp0_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta =
	     inf_dp0_tlp_mReqF$FULL_N &&
	     inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d654 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta ;

  // rule RL_inf_dp0_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg =
	     inf_dp0_tlp_mReqF$FULL_N && inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     inf_dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !inf_dp0_tlp_tlpRcvBusy &&
	     inf_dp0_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ;

  // rule RL_inf_dp0_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead =
	     inf_dp0_tlp_mRespF$EMPTY_N && inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     !inf_dp0_tlp_mRespF$D_OUT[138] &&
	     inf_dp0_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead ;

  // rule RL_inf_dp0_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_tlp_mRespF$EMPTY_N &&
	     inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     !inf_dp0_tlp_mRespF$D_OUT[138] &&
	     inf_dp0_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp0_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_tlp_mRespF$EMPTY_N &&
	     inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_mRespF$D_OUT[138] &&
	     inf_dp0_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody ;

  // rule RL_inf_dp0_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     !inf_dp0_tlp_tlpXmtBusy &&
	     !inf_dp0_tlp_xmtMetaInFlight &&
	     inf_dp0_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp0_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     inf_dp0_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp0_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     !inf_dp0_tlp_tlpXmtBusy &&
	     inf_dp0_tlp_tlpMetaSent &&
	     inf_dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp0_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPostSeqDwell =
	     inf_dp0_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPostSeqDwell ;

  // rule RL_inf_dp0_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_dpControl[1:0] == 2'd2 &&
	     !inf_dp0_tlp_tlpXmtBusy &&
	     inf_dp0_tlp_postSeqDwell == 4'd0 &&
	     inf_dp0_tlp_creditReady ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell ;

  // rule RL_inf_dp0_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeaderTag =
	     inf_dp0_tlp_inF$EMPTY_N && inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeaderTag ;

  // rule RL_inf_dp0_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta =
	     inf_dp0_tlp_inF$EMPTY_N && inf_dp0_tlp_mReqF$FULL_N &&
	     inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d910 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp0_rBMeta_1
  assign CAN_FIRE_RL_inf_dp0_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_rBMeta_1 = 1'd1 ;

  // rule RL_inf_dp0_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader =
	     inf_dp0_tlp_inF$EMPTY_N && inf_dp0_tlp_mReqF$FULL_N &&
	     inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     inf_dp0_tlp_reqMesgInFlight &&
	     !inf_dp0_tlp_tlpRcvBusy &&
	     inf_dp0_tlp_pullTagMatch &&
	     !inf_dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp0_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody =
	     inf_dp0_tlp_inF$EMPTY_N && inf_dp0_tlp_mReqF$FULL_N &&
	     inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     inf_dp0_tlp_reqMesgInFlight &&
	     inf_dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp0_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent =
	     inf_dp0_tlp_outF$FULL_N &&
	     inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d1040 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // rule RL_inf_dp0_rFFlow_1
  assign CAN_FIRE_RL_inf_dp0_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_rFFlow_1 = 1'd1 ;

  // rule RL_inf_dp0_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta =
	     inf_dp0_tlp_inF$EMPTY_N && inf_dp0_tlp_mReqF$FULL_N &&
	     inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_reqMetaBodyInFlight &&
	     !inf_dp0_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp0_tlp_tlpRcv
  assign CAN_FIRE_RL_inf_dp0_tlp_tlpRcv =
	     inf_dp0_tlp_inF$EMPTY_N &&
	     (inf_dp0_tlp_inF$D_OUT[152] ?
		inf_dp0_tlp_inF$D_OUT[110] || inf_dp0_tlp_inF$D_OUT[125] ||
		inf_dp0_tlp_inF$D_OUT[124:120] != 5'b0 ||
		inf_dp0_tlp_mReqF$FULL_N :
		inf_dp0_tlp_inIgnorePkt || inf_dp0_tlp_mReqF$FULL_N) &&
	     !inf_dp0_tlp_reqMetaInFlight &&
	     !inf_dp0_tlp_reqMesgInFlight &&
	     !inf_dp0_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_inf_dp0_tlp_tlpRcv =
	     CAN_FIRE_RL_inf_dp0_tlp_tlpRcv &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta ;

  // rule RL_inf_dp0_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody =
	     inf_dp0_tlp_mRespF$EMPTY_N && inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_mRespF$D_OUT[138] &&
	     inf_dp0_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ;

  // rule RL_inf_dp0_rBMesg_1
  assign CAN_FIRE_RL_inf_dp0_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_rBMesg_1 = 1'd1 ;

  // rule RL_inf_dp0_rFMesg_1
  assign CAN_FIRE_RL_inf_dp0_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_rFMesg_1 = 1'd1 ;

  // rule RL_inf_dp0_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta =
	     inf_dp0_tlp_outF$FULL_N &&
	     inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d877 &&
	     inf_dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta ;

  // rule RL_inf_dp0_rFMeta_1
  assign CAN_FIRE_RL_inf_dp0_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_rFMeta_1 = 1'd1 ;

  // rule RL_inf_dp0_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     inf_dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !inf_dp0_tlp_tlpXmtBusy &&
	     !inf_dp0_tlp_reqMesgInFlight &&
	     inf_dp0_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp0_tlp_dataXmt_Header
  assign CAN_FIRE_RL_inf_dp0_tlp_dataXmt_Header =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_tlp_mRespF$EMPTY_N &&
	     !inf_dp0_tlp_mRespF$D_OUT[138] &&
	     inf_dp0_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header =
	     CAN_FIRE_RL_inf_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead ;

  // rule RL_inf_dp0_tlp_dataXmt_Body
  assign CAN_FIRE_RL_inf_dp0_tlp_dataXmt_Body =
	     inf_dp0_tlp_outF$FULL_N && inf_dp0_tlp_mRespF$EMPTY_N &&
	     inf_dp0_tlp_mRespF$D_OUT[138] &&
	     inf_dp0_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Body =
	     CAN_FIRE_RL_inf_dp0_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead ;

  // rule RL_inf_dp0_tlp_writeReq
  assign CAN_FIRE_RL_inf_dp0_tlp_writeReq =
	     inf_dp0_tlp_mReqF$EMPTY_N &&
	     inf_dp0_tlp_mReqF_RDY_deq__107_AND_IF_inf_dp0__ETC___d1123 &&
	     inf_dp0_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_writeReq =
	     CAN_FIRE_RL_inf_dp0_tlp_writeReq ;

  // rule RL_inf_dp0_tlp_writeData
  assign CAN_FIRE_RL_inf_dp0_tlp_writeData =
	     inf_dp0_tlp_mReqF$EMPTY_N && inf_dp0_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1157 ||
	      inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110) &&
	     IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1190 &&
	     inf_dp0_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_writeData =
	     CAN_FIRE_RL_inf_dp0_tlp_writeData ;

  // rule RL_inf_dp0_tlp_read_FirstResp
  assign CAN_FIRE_RL_inf_dp0_tlp_read_FirstResp =
	     inf_dp0_tlp_readReq$EMPTY_N && inf_dp0_tlp_mRespF$FULL_N &&
	     IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1397 &&
	     (inf_dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      inf_dp0_tlp_readReq$EMPTY_N) &&
	     !inf_dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp =
	     CAN_FIRE_RL_inf_dp0_tlp_read_FirstResp ;

  // rule RL_inf_dp0_tlp_read_NextResp
  assign CAN_FIRE_RL_inf_dp0_tlp_read_NextResp =
	     inf_dp0_tlp_readReq$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_outDataCore_notEmp_ETC___d1470 &&
	     inf_dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_inf_dp0_tlp_read_NextResp =
	     CAN_FIRE_RL_inf_dp0_tlp_read_NextResp ;

  // rule RL_inf_dp0_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqOnly =
	     inf_dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_deqOnly =
	     inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_inf_dp0_tlp_read_FirstReq
  assign CAN_FIRE_RL_inf_dp0_tlp_read_FirstReq =
	     inf_dp0_tlp_mReqF$EMPTY_N && inf_dp0_tlp_readReq$FULL_N &&
	     NOT_inf_dp0_tlp_mReqF_first__108_BITS_28_TO_19_ETC___d1299 &&
	     !inf_dp0_tlp_readStarted &&
	     inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq =
	     CAN_FIRE_RL_inf_dp0_tlp_read_FirstReq ;

  // rule RL_inf_dp0_tlp_read_NextReq
  assign CAN_FIRE_RL_inf_dp0_tlp_read_NextReq =
	     inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110 &&
	     inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939 &&
	     inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940 &&
	     inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941 &&
	     inf_dp0_tlp_mReqF$EMPTY_N &&
	     inf_dp0_tlp_readStarted &&
	     inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     inf_dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_read_NextReq =
	     CAN_FIRE_RL_inf_dp0_tlp_read_NextReq ;

  // rule RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory$a_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory$a_put_1__SEL_2 ||
	     MUX_inf_dp0_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterA_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_inf_dp0_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterA_1_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_inf_dp0_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterA_2_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_inf_dp0_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterA_3_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_inf_dp0_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_inf_dp0_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_inf_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_inf_dp0_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_inf_dp0_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_inf_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_wmi_throttleWmi
  assign CAN_FIRE_RL_inf_dp0_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_throttleWmi = 1'd1 ;

  // rule RL_inf_dp0_wmi_reqMetadata
  assign CAN_FIRE_RL_inf_dp0_wmi_reqMetadata =
	     inf_dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 &&
	     inf_dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 &&
	     inf_dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666 &&
	     inf_dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 &&
	     inf_dp0_dpControl[3:2] != 2'd1 &&
	     !inf_dp0_wmi_mesgMeta[128] &&
	     inf_dp0_wmi_mesgBufReady &&
	     !inf_dp0_wmi_metaBusy &&
	     inf_dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_reqMetadata =
	     CAN_FIRE_RL_inf_dp0_wmi_reqMetadata &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_inf_dp0_wmi_doDwell
  assign CAN_FIRE_RL_inf_dp0_wmi_doDwell = inf_dp0_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_doDwell = CAN_FIRE_RL_inf_dp0_wmi_doDwell ;

  // rule RL_inf_dp0_wmi_doWriteFinalize
  assign CAN_FIRE_RL_inf_dp0_wmi_doWriteFinalize =
	     inf_dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 &&
	     inf_dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 &&
	     inf_dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666 &&
	     inf_dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 &&
	     inf_dp0_wmi_wrFinalize ;
  assign WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize =
	     CAN_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_inf_dp0_rBMeta
  assign CAN_FIRE_RL_inf_dp0_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_rBMeta = 1'd1 ;

  // rule RL_inf_dp0_wmi_doReadResp
  assign CAN_FIRE_RL_inf_dp0_wmi_doReadResp =
	     inf_dp0_wmi_wmi_respF_c_r != 2'd2 && inf_dp0_wmi_wmi_operateD &&
	     inf_dp0_wmi_wmi_peerIsReady &&
	     IF_inf_dp0_wmi_p4B_806_EQ_0_807_THEN_inf_dp0_b_ETC___d1820 &&
	     inf_dp0_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_doReadResp =
	     CAN_FIRE_RL_inf_dp0_wmi_doReadResp ;

  // rule RL_inf_dp0_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_req =
	     inf_dp0_wmi_wmi_reqF_levelsValid && inf_dp0_wmi_wmi_operateD &&
	     inf_dp0_wmi_wmi_peerIsReady &&
	     !inf_dp0_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_req ;

  // rule RL_stbConnect_8
  assign CAN_FIRE_RL_stbConnect_8 =
	     !CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_req ||
	     inf_dp0_wmi_wmi_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect_8 = CAN_FIRE_RL_stbConnect_8 ;

  // rule RL_inf_dp0_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_dh =
	     inf_dp0_wmi_wmi_dhF_levelsValid && inf_dp0_wmi_wmi_operateD &&
	     inf_dp0_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_dh ;

  // rule RL_sdtbConnect
  assign CAN_FIRE_RL_sdtbConnect =
	     !CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_dh ||
	     inf_dp0_wmi_wmi_sDataThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_sdtbConnect = CAN_FIRE_RL_sdtbConnect ;

  // rule RL_inf_dp0_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_inf_dp0_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr =
	     ((inf_dp0_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_inf_dp0_wmi_doReadResp :
		inf_dp0_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_inf_dp0_wmi_doReadResp) &&
	     CAN_FIRE_RL_inf_dp0_wmi_doReadResp &&
	     !(inf_dp0_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr ;

  // rule RL_inf_dp0_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr =
	     inf_dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_inf_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr ;

  // rule RL_inf_dp0_wmi_wmi_respF_both
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_both =
	     ((inf_dp0_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_inf_dp0_wmi_doReadResp :
		inf_dp0_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_inf_dp0_wmi_doReadResp) &&
	     inf_dp0_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_inf_dp0_wmi_doReadResp ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_respF_both ;

  // rule RL_inf_dp0_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_inf_dp0_bml_wci_ctrl_EiI =
	     inf_dp0_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     inf_dp0_wci_cState == 3'd0 &&
	     inf_dp0_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_inf_dp0_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_inf_dp0_bml_wci_ctrl_EiI ;

  // rule RL_inf_dp0_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_inf_dp0_bml_wci_ctrl_OrE =
	     inf_dp0_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     inf_dp0_wci_cState == 3'd2 &&
	     inf_dp0_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_inf_dp0_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_inf_dp0_bml_wci_ctrl_OrE ;

  // rule RL_inf_dp0_bml_cntLclStart
  assign CAN_FIRE_RL_inf_dp0_bml_cntLclStart =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_lclBufStart ;
  assign WILL_FIRE_RL_inf_dp0_bml_cntLclStart =
	     CAN_FIRE_RL_inf_dp0_bml_cntLclStart ;

  // rule RL_inf_dp0_bml_cntLclDone
  assign CAN_FIRE_RL_inf_dp0_bml_cntLclDone =
	     CAN_FIRE_RL_inf_dp0_bml_lclAdvance ;
  assign WILL_FIRE_RL_inf_dp0_bml_cntLclDone =
	     CAN_FIRE_RL_inf_dp0_bml_lclAdvance ;

  // rule RL_inf_dp0_bml_cntRemStart
  assign CAN_FIRE_RL_inf_dp0_bml_cntRemStart =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_remStart ;
  assign WILL_FIRE_RL_inf_dp0_bml_cntRemStart =
	     CAN_FIRE_RL_inf_dp0_bml_cntRemStart ;

  // rule RL_inf_dp0_bml_cntRemDone
  assign CAN_FIRE_RL_inf_dp0_bml_cntRemDone =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_remDone ;
  assign WILL_FIRE_RL_inf_dp0_bml_cntRemDone =
	     CAN_FIRE_RL_inf_dp0_bml_cntRemDone ;

  // rule RL_inf_dp0_bml_lbar
  assign CAN_FIRE_RL_inf_dp0_bml_lbar = inf_dp0_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_inf_dp0_bml_lbar = CAN_FIRE_RL_inf_dp0_bml_lbar ;

  // rule RL_inf_dp0_bml_lbcf
  assign CAN_FIRE_RL_inf_dp0_bml_lbcf = CAN_FIRE_RL_inf_dp0_bml_lbar ;
  assign WILL_FIRE_RL_inf_dp0_bml_lbcf = CAN_FIRE_RL_inf_dp0_bml_lbar ;

  // rule RL_inf_dp0_bml_fba
  assign CAN_FIRE_RL_inf_dp0_bml_fba =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_fba = CAN_FIRE_RL_inf_dp0_bml_fba ;

  // rule RL_inf_dp0_bml_lcredit
  assign CAN_FIRE_RL_inf_dp0_bml_lcredit =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_inf_dp0_bml_lcredit = CAN_FIRE_RL_inf_dp0_bml_lcredit ;

  // rule RL_inf_dp0_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp0_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp0_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp0_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp0_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp0_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp0_bml_remAdvance
  assign CAN_FIRE_RL_inf_dp0_bml_remAdvance =
	     CAN_FIRE_RL_inf_dp0_bml_cntRemDone ;
  assign WILL_FIRE_RL_inf_dp0_bml_remAdvance =
	     CAN_FIRE_RL_inf_dp0_bml_remAdvance &&
	     !WILL_FIRE_RL_inf_dp0_bml_crdAdvance ;

  // rule RL_inf_dp0_bml_remDone__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance ;
  assign WILL_FIRE_RL_inf_dp0_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance ;

  // rule RL_inf_dp0_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp0_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp0_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp0_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp0_bml_fabBuf_ruleInc =
	     MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_fabBuf_ruleInc =
	     MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_inf_dp0_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp0_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp0_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp0_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp0_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp0_bml_crdAdvance
  assign CAN_FIRE_RL_inf_dp0_bml_crdAdvance =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_dpControl[1:0] == 2'd2 &&
	     inf_dp0_bml_remStart ;
  assign WILL_FIRE_RL_inf_dp0_bml_crdAdvance =
	     CAN_FIRE_RL_inf_dp0_bml_crdAdvance ;

  // rule RL_inf_dp0_bml_remStart__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp0_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp0_bml_crdAdvance ;
  assign WILL_FIRE_RL_inf_dp0_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp0_bml_crdAdvance ;

  // rule RL_inf_dp0_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp0_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp0_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp0_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_inf_dp0_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_inf_dp0_wci_reqF_enq
  assign CAN_FIRE_RL_inf_dp0_wci_reqF_enq =
	     inf_dp0_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_inf_dp0_wci_reqF_enq =
	     CAN_FIRE_RL_inf_dp0_wci_reqF_enq ;

  // rule RL_inf_dp0_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_inf_dp0_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_inf_dp0_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq =
	     inf_dp0_wmi_wmi_operateD && inf_dp0_wmi_wmi_peerIsReady &&
	     inf_dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq ;

  // rule RL_inf_dp0_wmi_getRequest
  assign CAN_FIRE_RL_inf_dp0_wmi_getRequest =
	     inf_dp0_wmi_wmi_operateD && inf_dp0_wmi_wmi_peerIsReady &&
	     !inf_dp0_wmi_wmi_blockReq &&
	     inf_dp0_wmi_wmi_reqF$EMPTY_N &&
	     NOT_inf_dp0_wmi_wrActive_724_725_OR_NOT_inf_dp_ETC___d1734 &&
	     inf_dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_getRequest =
	     CAN_FIRE_RL_inf_dp0_wmi_getRequest &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;

  // rule RL_inf_dp0_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq =
	     inf_dp0_wmi_wmi_operateD && inf_dp0_wmi_wmi_peerIsReady &&
	     inf_dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     inf_dp0_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // rule RL_inf_dp0_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF__updateLevelCounter =
	     MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_inf_dp0_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF_reset =
	     MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF_reset ;

  // rule RL_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_inf_dp0_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_reset =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_reset ;

  // rule RL_inf_dp0_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_inf_dp0_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_inf_dp0_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_inf_dp0_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq =
	     inf_dp0_wmi_wmi_operateD && inf_dp0_wmi_wmi_peerIsReady &&
	     inf_dp0_wmi_wmi_wmiDh$wget[37] ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq ;

  // rule RL_inf_dp0_wmi_doWriteReq
  assign CAN_FIRE_RL_inf_dp0_wmi_doWriteReq =
	     inf_dp0_wmi_wmi_operateD && inf_dp0_wmi_wmi_peerIsReady &&
	     inf_dp0_wmi_wmi_dhF$EMPTY_N &&
	     IF_inf_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_7_ETC___d7266 &&
	     inf_dp0_wmi_wrActive ;
  assign WILL_FIRE_RL_inf_dp0_wmi_doWriteReq =
	     CAN_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_inf_dp0_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF__updateLevelCounter =
	     MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_inf_dp0_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF_reset =
	     MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF_reset ;

  // rule RL_inf_dp1_rStart
  assign CAN_FIRE_RL_inf_dp1_rStart = inf_dp1_wmi_mesgStart ;
  assign WILL_FIRE_RL_inf_dp1_rStart = inf_dp1_wmi_mesgStart ;

  // rule RL_inf_dp1_rDone
  assign CAN_FIRE_RL_inf_dp1_rDone = inf_dp1_wmi_mesgDone ;
  assign WILL_FIRE_RL_inf_dp1_rDone = inf_dp1_wmi_mesgDone ;

  // rule RL_inf_dp1_rRdy
  assign CAN_FIRE_RL_inf_dp1_rRdy =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp1_rRdy = CAN_FIRE_RL_inf_dp1_rRdy ;

  // rule RL_inf_dp1_rStart_1
  assign CAN_FIRE_RL_inf_dp1_rStart_1 = inf_dp1_tlp_remStart ;
  assign WILL_FIRE_RL_inf_dp1_rStart_1 = inf_dp1_tlp_remStart ;

  // rule RL_inf_dp1_rDone_1
  assign CAN_FIRE_RL_inf_dp1_rDone_1 = inf_dp1_tlp_remDone ;
  assign WILL_FIRE_RL_inf_dp1_rDone_1 = inf_dp1_tlp_remDone ;

  // rule RL_inf_dp1_rRdy_1
  assign CAN_FIRE_RL_inf_dp1_rRdy_1 =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp1_rRdy_1 = CAN_FIRE_RL_inf_dp1_rRdy_1 ;

  // rule RL_inf_dp1_rFRdy_1
  assign CAN_FIRE_RL_inf_dp1_rFRdy_1 =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp1_rFRdy_1 = CAN_FIRE_RL_inf_dp1_rFRdy_1 ;

  // rule RL_inf_dp1_rCredit_1
  assign CAN_FIRE_RL_inf_dp1_rCredit_1 =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_inf_dp1_rCredit_1 = CAN_FIRE_RL_inf_dp1_rCredit_1 ;

  // rule RL_inf_dp1_assignControl
  assign CAN_FIRE_RL_inf_dp1_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_assignControl = 1'd1 ;

  // rule RL_inf_dp1_operating_actions
  assign CAN_FIRE_RL_inf_dp1_operating_actions =
	     CAN_FIRE_RL_inf_dp1_bml_lbar ;
  assign WILL_FIRE_RL_inf_dp1_operating_actions =
	     CAN_FIRE_RL_inf_dp1_bml_lbar ;

  // rule RL_inf_dp1_mkConnectionVtoAf
  assign CAN_FIRE_RL_inf_dp1_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_mkConnectionVtoAf = 1'd1 ;

  // rule RL_inf_reqConnect_1
  assign CAN_FIRE_RL_inf_reqConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_reqConnect_1 = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterA_s1[0] ||
	      inf_dp1_bram_serverAdapterA_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_overRun =
	     inf_dp1_bram_serverAdapterA_s1[1] &&
	     !inf_dp1_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_inf_dp1_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterB_s1[0] ||
	      inf_dp1_bram_serverAdapterB_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_overRun =
	     inf_dp1_bram_serverAdapterB_s1[1] &&
	     !inf_dp1_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterA_1_s1[0] ||
	      inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_overRun =
	     inf_dp1_bram_serverAdapterA_1_s1[1] &&
	     !inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterB_1_s1[0] ||
	      inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_overRun =
	     inf_dp1_bram_serverAdapterB_1_s1[1] &&
	     !inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterA_2_s1[0] ||
	      inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_overRun =
	     inf_dp1_bram_serverAdapterA_2_s1[1] &&
	     !inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterB_2_s1[0] ||
	      inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_overRun =
	     inf_dp1_bram_serverAdapterB_2_s1[1] &&
	     !inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterA_3_s1[0] ||
	      inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_overRun =
	     inf_dp1_bram_serverAdapterA_3_s1[1] &&
	     !inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     (!inf_dp1_bram_serverAdapterB_3_s1[0] ||
	      inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     inf_dp1_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_overRun =
	     inf_dp1_bram_serverAdapterB_3_s1[1] &&
	     !inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_overRun ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     !inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_inf_dp1_wci_request_decode
  assign CAN_FIRE_RL_inf_dp1_wci_request_decode = inf_dp1_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_inf_dp1_wci_request_decode = inf_dp1_wci_reqF$EMPTY_N ;

  // rule RL_inf_dp1_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_inf_dp1_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_inf_dp1_wci_respF_deq
  assign CAN_FIRE_RL_inf_dp1_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wci_respF_deq = 1'd1 ;

  // rule RL_inf_dp1_wci_cfrd
  assign CAN_FIRE_RL_inf_dp1_wci_cfrd =
	     inf_dp1_wci_reqF$EMPTY_N && inf_dp1_wci_respF_c_r != 2'd2 &&
	     inf_dp1_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_inf_dp1_wci_cfrd =
	     CAN_FIRE_RL_inf_dp1_wci_cfrd &&
	     !WILL_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete ;

  // rule RL_inf_dp1_wci_ctl_op_start
  assign CAN_FIRE_RL_inf_dp1_wci_ctl_op_start =
	     inf_dp1_wci_reqF$EMPTY_N && inf_dp1_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_inf_dp1_wci_ctl_op_start =
	     CAN_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete ;

  // rule RL_inf_dp1_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_inf_dp1_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta =
	     inf_dp1_tlp_mReqF$FULL_N &&
	     inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d2845 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_inf_dp1_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg =
	     inf_dp1_tlp_mReqF$FULL_N && inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     inf_dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !inf_dp1_tlp_tlpRcvBusy &&
	     inf_dp1_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_inf_dp1_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead =
	     inf_dp1_tlp_mRespF$EMPTY_N && inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     !inf_dp1_tlp_mRespF$D_OUT[138] &&
	     inf_dp1_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead ;

  // rule RL_inf_dp1_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_tlp_mRespF$EMPTY_N &&
	     inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     !inf_dp1_tlp_mRespF$D_OUT[138] &&
	     inf_dp1_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp1_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_tlp_mRespF$EMPTY_N &&
	     inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_mRespF$D_OUT[138] &&
	     inf_dp1_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody ;

  // rule RL_inf_dp1_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     !inf_dp1_tlp_tlpXmtBusy &&
	     !inf_dp1_tlp_xmtMetaInFlight &&
	     inf_dp1_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp1_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     inf_dp1_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp1_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     !inf_dp1_tlp_tlpXmtBusy &&
	     inf_dp1_tlp_tlpMetaSent &&
	     inf_dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ;

  // rule RL_inf_dp1_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPostSeqDwell =
	     inf_dp1_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPostSeqDwell ;

  // rule RL_inf_dp1_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_dpControl[1:0] == 2'd2 &&
	     !inf_dp1_tlp_tlpXmtBusy &&
	     inf_dp1_tlp_postSeqDwell == 4'd0 &&
	     inf_dp1_tlp_creditReady ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell ;

  // rule RL_inf_dp1_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeaderTag =
	     inf_dp1_tlp_inF$EMPTY_N && inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeaderTag ;

  // rule RL_inf_dp1_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta =
	     inf_dp1_tlp_inF$EMPTY_N && inf_dp1_tlp_mReqF$FULL_N &&
	     inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3096 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp1_rBMeta_1
  assign CAN_FIRE_RL_inf_dp1_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_rBMeta_1 = 1'd1 ;

  // rule RL_inf_dp1_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader =
	     inf_dp1_tlp_inF$EMPTY_N && inf_dp1_tlp_mReqF$FULL_N &&
	     inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     inf_dp1_tlp_reqMesgInFlight &&
	     !inf_dp1_tlp_tlpRcvBusy &&
	     inf_dp1_tlp_pullTagMatch &&
	     !inf_dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp1_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody =
	     inf_dp1_tlp_inF$EMPTY_N && inf_dp1_tlp_mReqF$FULL_N &&
	     inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     inf_dp1_tlp_reqMesgInFlight &&
	     inf_dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp1_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent =
	     inf_dp1_tlp_outF$FULL_N &&
	     inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3226 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // rule RL_inf_dp1_rFFlow_1
  assign CAN_FIRE_RL_inf_dp1_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_rFFlow_1 = 1'd1 ;

  // rule RL_inf_dp1_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta =
	     inf_dp1_tlp_inF$EMPTY_N && inf_dp1_tlp_mReqF$FULL_N &&
	     inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_reqMetaBodyInFlight &&
	     !inf_dp1_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp1_tlp_tlpRcv
  assign CAN_FIRE_RL_inf_dp1_tlp_tlpRcv =
	     inf_dp1_tlp_inF$EMPTY_N &&
	     (inf_dp1_tlp_inF$D_OUT[152] ?
		inf_dp1_tlp_inF$D_OUT[110] || inf_dp1_tlp_inF$D_OUT[125] ||
		inf_dp1_tlp_inF$D_OUT[124:120] != 5'b0 ||
		inf_dp1_tlp_mReqF$FULL_N :
		inf_dp1_tlp_inIgnorePkt || inf_dp1_tlp_mReqF$FULL_N) &&
	     !inf_dp1_tlp_reqMetaInFlight &&
	     !inf_dp1_tlp_reqMesgInFlight &&
	     !inf_dp1_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_inf_dp1_tlp_tlpRcv =
	     CAN_FIRE_RL_inf_dp1_tlp_tlpRcv &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta ;

  // rule RL_inf_dp1_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody =
	     inf_dp1_tlp_mRespF$EMPTY_N && inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_mRespF$D_OUT[138] &&
	     inf_dp1_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_inf_dp1_rBMesg_1
  assign CAN_FIRE_RL_inf_dp1_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_rBMesg_1 = 1'd1 ;

  // rule RL_inf_dp1_rFMesg_1
  assign CAN_FIRE_RL_inf_dp1_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_rFMesg_1 = 1'd1 ;

  // rule RL_inf_dp1_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta =
	     inf_dp1_tlp_outF$FULL_N &&
	     inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3065 &&
	     inf_dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta ;

  // rule RL_inf_dp1_rFMeta_1
  assign CAN_FIRE_RL_inf_dp1_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_rFMeta_1 = 1'd1 ;

  // rule RL_inf_dp1_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     inf_dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !inf_dp1_tlp_tlpXmtBusy &&
	     !inf_dp1_tlp_reqMesgInFlight &&
	     inf_dp1_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // rule RL_inf_dp1_tlp_dataXmt_Header
  assign CAN_FIRE_RL_inf_dp1_tlp_dataXmt_Header =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_tlp_mRespF$EMPTY_N &&
	     !inf_dp1_tlp_mRespF$D_OUT[138] &&
	     inf_dp1_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header =
	     CAN_FIRE_RL_inf_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_inf_dp1_tlp_dataXmt_Body
  assign CAN_FIRE_RL_inf_dp1_tlp_dataXmt_Body =
	     inf_dp1_tlp_outF$FULL_N && inf_dp1_tlp_mRespF$EMPTY_N &&
	     inf_dp1_tlp_mRespF$D_OUT[138] &&
	     inf_dp1_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Body =
	     CAN_FIRE_RL_inf_dp1_tlp_dataXmt_Body &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead ;

  // rule RL_inf_dp1_tlp_writeReq
  assign CAN_FIRE_RL_inf_dp1_tlp_writeReq =
	     inf_dp1_tlp_mReqF$EMPTY_N &&
	     inf_dp1_tlp_mReqF_RDY_deq__293_AND_IF_inf_dp1__ETC___d3309 &&
	     inf_dp1_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_writeReq =
	     CAN_FIRE_RL_inf_dp1_tlp_writeReq ;

  // rule RL_inf_dp1_tlp_writeData
  assign CAN_FIRE_RL_inf_dp1_tlp_writeData =
	     inf_dp1_tlp_mReqF$EMPTY_N && inf_dp1_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3343 ||
	      inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313) &&
	     IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3376 &&
	     inf_dp1_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_writeData =
	     CAN_FIRE_RL_inf_dp1_tlp_writeData ;

  // rule RL_inf_dp1_tlp_read_FirstResp
  assign CAN_FIRE_RL_inf_dp1_tlp_read_FirstResp =
	     inf_dp1_tlp_readReq$EMPTY_N && inf_dp1_tlp_mRespF$FULL_N &&
	     IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3583 &&
	     (inf_dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      inf_dp1_tlp_readReq$EMPTY_N) &&
	     !inf_dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp =
	     CAN_FIRE_RL_inf_dp1_tlp_read_FirstResp ;

  // rule RL_inf_dp1_tlp_read_NextResp
  assign CAN_FIRE_RL_inf_dp1_tlp_read_NextResp =
	     inf_dp1_tlp_readReq$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_outDataCore_notEmp_ETC___d3656 &&
	     inf_dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_inf_dp1_tlp_read_NextResp =
	     CAN_FIRE_RL_inf_dp1_tlp_read_NextResp ;

  // rule RL_inf_dp1_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqOnly =
	     inf_dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_deqOnly =
	     inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_inf_dp1_tlp_read_FirstReq
  assign CAN_FIRE_RL_inf_dp1_tlp_read_FirstReq =
	     inf_dp1_tlp_mReqF$EMPTY_N && inf_dp1_tlp_readReq$FULL_N &&
	     NOT_inf_dp1_tlp_mReqF_first__294_BITS_28_TO_19_ETC___d3485 &&
	     !inf_dp1_tlp_readStarted &&
	     inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq =
	     CAN_FIRE_RL_inf_dp1_tlp_read_FirstReq ;

  // rule RL_inf_dp1_tlp_read_NextReq
  assign CAN_FIRE_RL_inf_dp1_tlp_read_NextReq =
	     inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313 &&
	     inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942 &&
	     inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943 &&
	     inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276 &&
	     inf_dp1_tlp_mReqF$EMPTY_N &&
	     inf_dp1_tlp_readStarted &&
	     inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     inf_dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_read_NextReq =
	     CAN_FIRE_RL_inf_dp1_tlp_read_NextReq ;

  // rule RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory$a_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory$a_put_1__SEL_2 ||
	     MUX_inf_dp1_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterA_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_inf_dp1_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterA_1_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_inf_dp1_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterA_2_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_inf_dp1_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterA_3_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_inf_dp1_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_inf_dp1_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_inf_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_inf_dp1_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_inf_dp1_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_inf_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_wmi_throttleWmi
  assign CAN_FIRE_RL_inf_dp1_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_throttleWmi = 1'd1 ;

  // rule RL_inf_dp1_wmi_reqMetadata
  assign CAN_FIRE_RL_inf_dp1_wmi_reqMetadata =
	     inf_dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 &&
	     inf_dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 &&
	     inf_dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852 &&
	     inf_dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 &&
	     inf_dp1_dpControl[3:2] != 2'd1 &&
	     !inf_dp1_wmi_mesgMeta[128] &&
	     inf_dp1_wmi_mesgBufReady &&
	     !inf_dp1_wmi_metaBusy &&
	     inf_dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_reqMetadata =
	     CAN_FIRE_RL_inf_dp1_wmi_reqMetadata &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_inf_dp1_wmi_doDwell
  assign CAN_FIRE_RL_inf_dp1_wmi_doDwell = inf_dp1_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_doDwell = CAN_FIRE_RL_inf_dp1_wmi_doDwell ;

  // rule RL_inf_dp1_wmi_doWriteFinalize
  assign CAN_FIRE_RL_inf_dp1_wmi_doWriteFinalize =
	     inf_dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 &&
	     inf_dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 &&
	     inf_dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852 &&
	     inf_dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 &&
	     inf_dp1_wmi_wrFinalize ;
  assign WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize =
	     CAN_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_inf_dp1_rBMeta
  assign CAN_FIRE_RL_inf_dp1_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_rBMeta = 1'd1 ;

  // rule RL_inf_dp1_wmi_doReadResp
  assign CAN_FIRE_RL_inf_dp1_wmi_doReadResp =
	     inf_dp1_wmi_wmi_respF_c_r != 2'd2 && inf_dp1_wmi_wmi_operateD &&
	     inf_dp1_wmi_wmi_peerIsReady &&
	     IF_inf_dp1_wmi_p4B_992_EQ_0_993_THEN_inf_dp1_b_ETC___d4006 &&
	     inf_dp1_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_doReadResp =
	     CAN_FIRE_RL_inf_dp1_wmi_doReadResp ;

  // rule RL_inf_dp1_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_req =
	     inf_dp1_wmi_wmi_reqF_levelsValid && inf_dp1_wmi_wmi_operateD &&
	     inf_dp1_wmi_wmi_peerIsReady &&
	     !inf_dp1_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_req ;

  // rule RL_stbConnect_9
  assign CAN_FIRE_RL_stbConnect_9 =
	     !CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_req ||
	     inf_dp1_wmi_wmi_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect_9 = CAN_FIRE_RL_stbConnect_9 ;

  // rule RL_inf_dp1_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_dh =
	     inf_dp1_wmi_wmi_dhF_levelsValid && inf_dp1_wmi_wmi_operateD &&
	     inf_dp1_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_dh ;

  // rule RL_sdtbConnect_1
  assign CAN_FIRE_RL_sdtbConnect_1 =
	     !CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_dh ||
	     inf_dp1_wmi_wmi_sDataThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_sdtbConnect_1 = CAN_FIRE_RL_sdtbConnect_1 ;

  // rule RL_inf_dp1_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_inf_dp1_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr =
	     ((inf_dp1_wmi_wmi_respF_c_r == 2'd0) ?
		CAN_FIRE_RL_inf_dp1_wmi_doReadResp :
		inf_dp1_wmi_wmi_respF_c_r != 2'd1 ||
		CAN_FIRE_RL_inf_dp1_wmi_doReadResp) &&
	     CAN_FIRE_RL_inf_dp1_wmi_doReadResp &&
	     !(inf_dp1_wmi_wmi_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr ;

  // rule RL_inf_dp1_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr =
	     inf_dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     !CAN_FIRE_RL_inf_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr ;

  // rule RL_inf_dp1_wmi_wmi_respF_both
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_both =
	     ((inf_dp1_wmi_wmi_respF_c_r == 2'd1) ?
		CAN_FIRE_RL_inf_dp1_wmi_doReadResp :
		inf_dp1_wmi_wmi_respF_c_r != 2'd2 ||
		CAN_FIRE_RL_inf_dp1_wmi_doReadResp) &&
	     inf_dp1_wmi_wmi_respF_c_r != 2'd0 &&
	     CAN_FIRE_RL_inf_dp1_wmi_doReadResp ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_respF_both ;

  // rule RL_inf_dp1_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_inf_dp1_bml_wci_ctrl_EiI =
	     inf_dp1_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     inf_dp1_wci_cState == 3'd0 &&
	     inf_dp1_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_inf_dp1_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_inf_dp1_bml_wci_ctrl_EiI ;

  // rule RL_inf_dp1_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_inf_dp1_bml_wci_ctrl_OrE =
	     inf_dp1_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     inf_dp1_wci_cState == 3'd2 &&
	     inf_dp1_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_inf_dp1_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_inf_dp1_bml_wci_ctrl_OrE ;

  // rule RL_inf_dp1_bml_cntLclStart
  assign CAN_FIRE_RL_inf_dp1_bml_cntLclStart =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_lclBufStart ;
  assign WILL_FIRE_RL_inf_dp1_bml_cntLclStart =
	     CAN_FIRE_RL_inf_dp1_bml_cntLclStart ;

  // rule RL_inf_dp1_bml_cntLclDone
  assign CAN_FIRE_RL_inf_dp1_bml_cntLclDone =
	     CAN_FIRE_RL_inf_dp1_bml_lclAdvance ;
  assign WILL_FIRE_RL_inf_dp1_bml_cntLclDone =
	     CAN_FIRE_RL_inf_dp1_bml_lclAdvance ;

  // rule RL_inf_dp1_bml_cntRemStart
  assign CAN_FIRE_RL_inf_dp1_bml_cntRemStart =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_remStart ;
  assign WILL_FIRE_RL_inf_dp1_bml_cntRemStart =
	     CAN_FIRE_RL_inf_dp1_bml_cntRemStart ;

  // rule RL_inf_dp1_bml_cntRemDone
  assign CAN_FIRE_RL_inf_dp1_bml_cntRemDone =
	     CAN_FIRE_RL_inf_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_inf_dp1_bml_cntRemDone =
	     CAN_FIRE_RL_inf_dp1_bml_remAdvance ;

  // rule RL_inf_dp1_bml_lbar
  assign CAN_FIRE_RL_inf_dp1_bml_lbar = inf_dp1_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_inf_dp1_bml_lbar = CAN_FIRE_RL_inf_dp1_bml_lbar ;

  // rule RL_inf_dp1_bml_lbcf
  assign CAN_FIRE_RL_inf_dp1_bml_lbcf = CAN_FIRE_RL_inf_dp1_bml_lbar ;
  assign WILL_FIRE_RL_inf_dp1_bml_lbcf = CAN_FIRE_RL_inf_dp1_bml_lbar ;

  // rule RL_inf_dp1_bml_fba
  assign CAN_FIRE_RL_inf_dp1_bml_fba =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_fba = CAN_FIRE_RL_inf_dp1_bml_fba ;

  // rule RL_inf_dp1_bml_lcredit
  assign CAN_FIRE_RL_inf_dp1_bml_lcredit =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_inf_dp1_bml_lcredit = CAN_FIRE_RL_inf_dp1_bml_lcredit ;

  // rule RL_inf_dp1_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp1_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp1_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp1_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp1_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp1_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp1_bml_remAdvance
  assign CAN_FIRE_RL_inf_dp1_bml_remAdvance =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_remDone ;
  assign WILL_FIRE_RL_inf_dp1_bml_remAdvance =
	     CAN_FIRE_RL_inf_dp1_bml_remAdvance &&
	     !WILL_FIRE_RL_inf_dp1_bml_crdAdvance ;

  // rule RL_inf_dp1_bml_remDone__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance ;
  assign WILL_FIRE_RL_inf_dp1_bml_remBuf_ruleInc =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance ;

  // rule RL_inf_dp1_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp1_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp1_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp1_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp1_bml_fabBuf_ruleInc =
	     MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_fabBuf_ruleInc =
	     MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_inf_dp1_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp1_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp1_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp1_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_inf_dp1_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_inf_dp1_bml_crdAdvance
  assign CAN_FIRE_RL_inf_dp1_bml_crdAdvance =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_dpControl[1:0] == 2'd2 &&
	     inf_dp1_bml_remStart ;
  assign WILL_FIRE_RL_inf_dp1_bml_crdAdvance =
	     CAN_FIRE_RL_inf_dp1_bml_crdAdvance ;

  // rule RL_inf_dp1_bml_remStart__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp1_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp1_bml_crdAdvance ;
  assign WILL_FIRE_RL_inf_dp1_bml_crdBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp1_bml_crdAdvance ;

  // rule RL_inf_dp1_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp1_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp1_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp1_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_inf_dp1_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_inf_dp1_wci_reqF_enq
  assign CAN_FIRE_RL_inf_dp1_wci_reqF_enq =
	     inf_dp1_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_inf_dp1_wci_reqF_enq =
	     CAN_FIRE_RL_inf_dp1_wci_reqF_enq ;

  // rule RL_inf_dp1_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_inf_dp1_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_inf_dp1_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq =
	     inf_dp1_wmi_wmi_operateD && inf_dp1_wmi_wmi_peerIsReady &&
	     inf_dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq ;

  // rule RL_inf_dp1_wmi_getRequest
  assign CAN_FIRE_RL_inf_dp1_wmi_getRequest =
	     inf_dp1_wmi_wmi_operateD && inf_dp1_wmi_wmi_peerIsReady &&
	     !inf_dp1_wmi_wmi_blockReq &&
	     inf_dp1_wmi_wmi_reqF$EMPTY_N &&
	     NOT_inf_dp1_wmi_wrActive_910_911_OR_NOT_inf_dp_ETC___d3920 &&
	     inf_dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_getRequest =
	     CAN_FIRE_RL_inf_dp1_wmi_getRequest &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;

  // rule RL_inf_dp1_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq =
	     inf_dp1_wmi_wmi_operateD && inf_dp1_wmi_wmi_peerIsReady &&
	     inf_dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     inf_dp1_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // rule RL_inf_dp1_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF__updateLevelCounter =
	     MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_inf_dp1_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF_reset =
	     MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF_reset ;

  // rule RL_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 !=
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_inf_dp1_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_reset =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ||
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_reset ;

  // rule RL_inf_dp1_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_inf_dp1_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_inf_dp1_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_inf_dp1_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq =
	     inf_dp1_wmi_wmi_operateD && inf_dp1_wmi_wmi_peerIsReady &&
	     inf_dp1_wmi_wmi_wmiDh$wget[37] ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq ;

  // rule RL_inf_dp1_wmi_doWriteReq
  assign CAN_FIRE_RL_inf_dp1_wmi_doWriteReq =
	     inf_dp1_wmi_wmi_operateD && inf_dp1_wmi_wmi_peerIsReady &&
	     inf_dp1_wmi_wmi_dhF$EMPTY_N &&
	     IF_inf_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_9_ETC___d8294 &&
	     inf_dp1_wmi_wrActive ;
  assign WILL_FIRE_RL_inf_dp1_wmi_doWriteReq =
	     CAN_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_inf_dp1_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF__updateLevelCounter =
	     MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_inf_dp1_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF_reset =
	     MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF_reset ;

  // rule RL_inf_itc0_send_time
  assign CAN_FIRE_RL_inf_itc0_send_time = 1'd1 ;
  assign WILL_FIRE_RL_inf_itc0_send_time = 1'd1 ;

  // rule RL_inf_itc0_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_inf_itc0_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_inf_itc0_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_inf_itc1_send_time
  assign CAN_FIRE_RL_inf_itc1_send_time = 1'd1 ;
  assign WILL_FIRE_RL_inf_itc1_send_time = 1'd1 ;

  // rule RL_inf_itc1_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_inf_itc1_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_inf_itc1_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_app_mCmdConnect
  assign CAN_FIRE_RL_app_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_app_mCmdConnect = 1'd1 ;

  // rule RL_app_mReqLConnect
  assign CAN_FIRE_RL_app_mReqLConnect =
	     !app_appW2_wsiM_sThreadBusy_d && app_appW2_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_app_mReqLConnect = CAN_FIRE_RL_app_mReqLConnect ;

  // rule RL_app_mBurstPConnect
  assign CAN_FIRE_RL_app_mBurstPConnect =
	     !app_appW2_wsiM_sThreadBusy_d && app_appW2_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_app_mBurstPConnect = CAN_FIRE_RL_app_mBurstPConnect ;

  // rule RL_app_mBurstLConnect
  assign CAN_FIRE_RL_app_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_app_mBurstLConnect = 1'd1 ;

  // rule RL_app_mDataConnect
  assign CAN_FIRE_RL_app_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_app_mDataConnect = 1'd1 ;

  // rule RL_app_mByteEnConnect
  assign CAN_FIRE_RL_app_mByteEnConnect = 1'd1 ;
  assign WILL_FIRE_RL_app_mByteEnConnect = 1'd1 ;

  // rule RL_app_mReqIConnect
  assign CAN_FIRE_RL_app_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_app_mReqIConnect = 1'd1 ;

  // rule RL_app_mDataIConnect
  assign CAN_FIRE_RL_app_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_app_mDataIConnect = 1'd1 ;

  // rule RL_app_mRstConnect
  assign CAN_FIRE_RL_app_mRstConnect =
	     !app_appW2_wsiM_isReset$VAL && app_appW2_wsiM_operateD ;
  assign WILL_FIRE_RL_app_mRstConnect = CAN_FIRE_RL_app_mRstConnect ;

  // rule RL_app_sRstConnect
  assign CAN_FIRE_RL_app_sRstConnect =
	     !app_appW3_wsiS_isReset$VAL && app_appW3_wsiS_operateD ;
  assign WILL_FIRE_RL_app_sRstConnect = CAN_FIRE_RL_app_sRstConnect ;

  // rule RL_app_mCmdConnect_1
  assign CAN_FIRE_RL_app_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_app_mCmdConnect_1 = 1'd1 ;

  // rule RL_app_mReqLConnect_1
  assign CAN_FIRE_RL_app_mReqLConnect_1 =
	     !app_appW3_wsiM_sThreadBusy_d && app_appW3_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_app_mReqLConnect_1 = CAN_FIRE_RL_app_mReqLConnect_1 ;

  // rule RL_app_mBurstPConnect_1
  assign CAN_FIRE_RL_app_mBurstPConnect_1 =
	     !app_appW3_wsiM_sThreadBusy_d && app_appW3_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_app_mBurstPConnect_1 =
	     CAN_FIRE_RL_app_mBurstPConnect_1 ;

  // rule RL_app_mBurstLConnect_1
  assign CAN_FIRE_RL_app_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_app_mBurstLConnect_1 = 1'd1 ;

  // rule RL_app_mDataConnect_1
  assign CAN_FIRE_RL_app_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_app_mDataConnect_1 = 1'd1 ;

  // rule RL_app_mByteEnConnect_1
  assign CAN_FIRE_RL_app_mByteEnConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_app_mByteEnConnect_1 = 1'd1 ;

  // rule RL_app_mReqIConnect_1
  assign CAN_FIRE_RL_app_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_app_mReqIConnect_1 = 1'd1 ;

  // rule RL_app_mDataIConnect_1
  assign CAN_FIRE_RL_app_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_app_mDataIConnect_1 = 1'd1 ;

  // rule RL_app_mRstConnect_1
  assign CAN_FIRE_RL_app_mRstConnect_1 =
	     !app_appW3_wsiM_isReset$VAL && app_appW3_wsiM_operateD ;
  assign WILL_FIRE_RL_app_mRstConnect_1 = CAN_FIRE_RL_app_mRstConnect_1 ;

  // rule RL_app_sRstConnect_1
  assign CAN_FIRE_RL_app_sRstConnect_1 =
	     !app_appW4_wsiS_isReset$VAL && app_appW4_wsiS_operateD ;
  assign WILL_FIRE_RL_app_sRstConnect_1 = CAN_FIRE_RL_app_sRstConnect_1 ;

  // rule RL_app_appW2_operating_actions
  assign CAN_FIRE_RL_app_appW2_operating_actions =
	     app_appW2_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_app_appW2_operating_actions =
	     CAN_FIRE_RL_app_appW2_operating_actions ;

  // rule RL_app_appW2_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest =
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h1 ||
	      app_appW2_smaCtrl[3:0] == 4'h4 ||
	      app_appW2_smaCtrl[3:0] == 4'h9) &&
	     app_appW2_fabWordsRemain != 14'd0 &&
	     (app_appW2_fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     app_appW2_mesgReqOK ;
  assign WILL_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ;

  // rule RL_app_appW2_wmrd_mesgBodyRequest
  assign CAN_FIRE_RL_app_appW2_wmrd_mesgBodyRequest =
	     NOT_app_appW2_wmi_reqF_c_r_613_EQ_2_632_633_AN_ETC___d4984 &&
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h1 ||
	      app_appW2_smaCtrl[3:0] == 4'h4 ||
	      app_appW2_smaCtrl[3:0] == 4'h9) &&
	     app_appW2_mesgPreRequest ;
  assign WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ;

  // rule RL_app_appW2_wci_request_decode
  assign CAN_FIRE_RL_app_appW2_wci_request_decode =
	     app_appW2_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_app_appW2_wci_request_decode =
	     app_appW2_wci_reqF$EMPTY_N ;

  // rule RL_app_appW2_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_app_appW2_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_app_appW2_wci_respF_deq
  assign CAN_FIRE_RL_app_appW2_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wci_respF_deq = 1'd1 ;

  // rule RL_app_appW2_wci_ctl_op_start
  assign CAN_FIRE_RL_app_appW2_wci_ctl_op_start =
	     app_appW2_wci_reqF$EMPTY_N && app_appW2_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_app_appW2_wci_ctl_op_start =
	     CAN_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW2_wci_ctl_op_complete ;

  // rule RL_app_appW2_wci_ctrl_EiI
  assign CAN_FIRE_RL_app_appW2_wci_ctrl_EiI =
	     app_appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     app_appW2_wci_cState == 3'd0 &&
	     app_appW2_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_app_appW2_wci_ctrl_EiI =
	     CAN_FIRE_RL_app_appW2_wci_ctrl_EiI ;

  // rule RL_app_appW2_wci_ctrl_OrE
  assign CAN_FIRE_RL_app_appW2_wci_ctrl_OrE =
	     app_appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     app_appW2_wci_cState == 3'd2 &&
	     app_appW2_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_app_appW2_wci_ctrl_OrE =
	     CAN_FIRE_RL_app_appW2_wci_ctrl_OrE ;

  // rule RL_app_appW2_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_app_appW2_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wmi_reqF_deq
  assign CAN_FIRE_RL_app_appW2_wmi_reqF_deq =
	     app_appW2_wmi_operateD && app_appW2_wmi_peerIsReady &&
	     !app_appW2_wmi_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW2_wmi_reqF_deq =
	     CAN_FIRE_RL_app_appW2_wmi_reqF_deq ;

  // rule RL_app_appW2_wmi_dhF_deq
  assign CAN_FIRE_RL_app_appW2_wmi_dhF_deq =
	     app_appW2_wmi_operateD && app_appW2_wmi_peerIsReady &&
	     !app_appW2_wmi_sDataThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW2_wmi_dhF_deq =
	     CAN_FIRE_RL_app_appW2_wmi_dhF_deq ;

  // rule RL_app_appW2_wsiM_ext_status_assign
  assign CAN_FIRE_RL_app_appW2_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_app_appW2_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_app_appW2_wsiM_inc_tBusyCount =
	     app_appW2_wsiM_operateD && app_appW2_wsiM_peerIsReady &&
	     app_appW2_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW2_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_app_appW2_wsiM_inc_tBusyCount ;

  // rule RL_app_appW2_wsiM_update_statusR
  assign CAN_FIRE_RL_app_appW2_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiM_update_statusR = 1'd1 ;

  // rule RL_app_appW2_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_app_appW2_wsiM_reqFifo_deq =
	     app_appW2_wsiM_reqFifo_c_r != 2'd0 &&
	     !app_appW2_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW2_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_app_appW2_wsiM_reqFifo_deq ;

  // rule RL_app_appW2_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW2_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW2_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wsiS_backpressure
  assign CAN_FIRE_RL_app_appW2_wsiS_backpressure =
	     app_appW2_wsiS_reqFifo_levelsValid && app_appW2_wsiS_operateD &&
	     app_appW2_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_app_appW2_wsiS_backpressure =
	     CAN_FIRE_RL_app_appW2_wsiS_backpressure ;

  // rule RL_app_appW2_wsiS_ext_status_assign
  assign CAN_FIRE_RL_app_appW2_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_app_appW2_wci_cfrd
  assign CAN_FIRE_RL_app_appW2_wci_cfrd =
	     app_appW2_wci_reqF$EMPTY_N && app_appW2_wci_respF_c_r != 2'd2 &&
	     app_appW2_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_app_appW2_wci_cfrd =
	     CAN_FIRE_RL_app_appW2_wci_cfrd &&
	     !WILL_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW2_wci_ctl_op_complete ;

  // rule RL_app_appW2_wmrd_mesgBegin
  assign CAN_FIRE_RL_app_appW2_wmrd_mesgBegin =
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h1 ||
	      app_appW2_smaCtrl[3:0] == 4'h4 ||
	      app_appW2_smaCtrl[3:0] == 4'h9) &&
	     !app_appW2_wmi_sThreadBusy_d &&
	     !app_appW2_wmi_sDataThreadBusy_d &&
	     app_appW2_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_app_appW2_wmrd_mesgBegin =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgBegin ;

  // rule RL_sFlagConnect_8
  assign CAN_FIRE_RL_sFlagConnect_8 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_8 = 1'd1 ;

  // rule RL_inf_dp0_wmi_respMetadata
  assign CAN_FIRE_RL_inf_dp0_wmi_respMetadata =
	     inf_dp0_wmi_wmi_operateD && inf_dp0_wmi_wmi_peerIsReady &&
	     inf_dp0_wmi_dpControl_whas__651_AND_inf_dp0_br_ETC___d1697 &&
	     inf_dp0_dpControl[3:2] != 2'd1 &&
	     !inf_dp0_wmi_mesgMeta[128] &&
	     inf_dp0_wmi_mesgBufReady &&
	     inf_dp0_wmi_metaBusy ;
  assign WILL_FIRE_RL_inf_dp0_wmi_respMetadata =
	     CAN_FIRE_RL_inf_dp0_wmi_respMetadata &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doReadResp ;

  // rule RL_inf_dp0_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqOnly =
	     inf_dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_deqOnly =
	     inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterB_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     inf_dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     inf_dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_inf_dp0_wmi_doReadReq
  assign CAN_FIRE_RL_inf_dp0_wmi_doReadReq =
	     IF_inf_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_7_ETC___d7266 &&
	     inf_dp0_wmi_rdActive ;
  assign WILL_FIRE_RL_inf_dp0_wmi_doReadReq =
	     CAN_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // rule RL_inf_dp0_rBMesg
  assign CAN_FIRE_RL_inf_dp0_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_rBMesg = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory$b_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterB_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterB_1_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterB_2_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_inf_dp0_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     inf_dp0_bram_serverAdapterB_3_cnt_1$whas ||
	     inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_inf_dp0_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_inf_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_inf_dp0_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_inf_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bml_lclAdvance
  assign CAN_FIRE_RL_inf_dp0_bml_lclAdvance =
	     inf_dp0_wci_cState == 3'd2 && inf_dp0_bml_lclBufDone ;
  assign WILL_FIRE_RL_inf_dp0_bml_lclAdvance =
	     CAN_FIRE_RL_inf_dp0_bml_lclAdvance ;

  // rule RL_inf_dp0_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp0_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp0_bml_lclAdvance ;
  assign WILL_FIRE_RL_inf_dp0_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp0_bml_lclAdvance ;

  // rule RL_inf_dp0_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp0_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp0_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp0_bml_initAccumulators
  assign CAN_FIRE_RL_inf_dp0_bml_initAccumulators =
	     inf_dp0_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     inf_dp0_wci_cState == 3'd1 &&
	     inf_dp0_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_initAccumulators =
	     CAN_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // rule RL_inf_dp0_wci_cfwr
  assign CAN_FIRE_RL_inf_dp0_wci_cfwr =
	     inf_dp0_wci_reqF$EMPTY_N && inf_dp0_wci_respF_c_r != 2'd2 &&
	     inf_dp0_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_inf_dp0_wci_cfwr =
	     CAN_FIRE_RL_inf_dp0_wci_cfwr &&
	     !WILL_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete ;

  // rule RL_inf_dp0_wci_ctl_op_complete
  assign CAN_FIRE_RL_inf_dp0_wci_ctl_op_complete =
	     inf_dp0_wci_respF_c_r != 2'd2 && inf_dp0_wci_ctlOpActive &&
	     inf_dp0_wci_ctlAckReg ;
  assign WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete =
	     CAN_FIRE_RL_inf_dp0_wci_ctl_op_complete ;

  // rule RL_inf_dp0_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp0_wci_reqF__updateLevelCounter =
	     (inf_dp0_wci_wciReq$wget[59:57] != 3'd0) !=
	     inf_dp0_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_inf_dp0_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp0_wci_reqF__updateLevelCounter ;

  // rule RL_inf_dp0_wci_respF_incCtr
  assign CAN_FIRE_RL_inf_dp0_wci_respF_incCtr =
	     ((inf_dp0_wci_respF_c_r == 2'd0) ?
		inf_dp0_wci_respF_x_wire$whas :
		inf_dp0_wci_respF_c_r != 2'd1 ||
		inf_dp0_wci_respF_x_wire$whas) &&
	     inf_dp0_wci_respF_enqueueing$whas &&
	     !(inf_dp0_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_inf_dp0_wci_respF_incCtr =
	     CAN_FIRE_RL_inf_dp0_wci_respF_incCtr ;

  // rule RL_inf_dp0_wci_respF_decCtr
  assign CAN_FIRE_RL_inf_dp0_wci_respF_decCtr =
	     inf_dp0_wci_respF_c_r != 2'd0 &&
	     !inf_dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_inf_dp0_wci_respF_decCtr =
	     CAN_FIRE_RL_inf_dp0_wci_respF_decCtr ;

  // rule RL_inf_dp0_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_inf_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_wci_respF_both
  assign CAN_FIRE_RL_inf_dp0_wci_respF_both =
	     ((inf_dp0_wci_respF_c_r == 2'd1) ?
		inf_dp0_wci_respF_x_wire$whas :
		inf_dp0_wci_respF_c_r != 2'd2 ||
		inf_dp0_wci_respF_x_wire$whas) &&
	     inf_dp0_wci_respF_c_r != 2'd0 &&
	     inf_dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_inf_dp0_wci_respF_both =
	     CAN_FIRE_RL_inf_dp0_wci_respF_both ;

  // rule RL_inf_dp0_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp0_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_inf_dp0_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp0_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_app_appW2_wsiS_inc_tBusyCount =
	     app_appW2_wsiS_operateD && app_appW2_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_app_appW2_wsiS_backpressure ||
	      app_appW2_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_app_appW2_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_app_appW2_wsiS_inc_tBusyCount ;

  // rule RL_app_appW2_wsiS_update_statusR
  assign CAN_FIRE_RL_app_appW2_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiS_update_statusR = 1'd1 ;

  // rule RL_app_appW2_mesgPreRequest__dreg_update
  assign CAN_FIRE_RL_app_appW2_mesgPreRequest__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_mesgPreRequest__dreg_update = 1'd1 ;

  // rule RL_app_appW2_respF_portB_read_data
  assign CAN_FIRE_RL_app_appW2_respF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_respF_portB_read_data = 1'd1 ;

  // rule RL_app_appW2_wmrd_mesgResptoWsi
  assign CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi =
	     app_appW2_wsiM_reqFifo_c_r != 2'd2 &&
	     app_appW2_respF_rRdPtr != app_appW2_respF_rWrPtr &&
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h1 ||
	      app_appW2_smaCtrl[3:0] == 4'h4 ||
	      app_appW2_smaCtrl[3:0] == 4'h9) ;
  assign WILL_FIRE_RL_app_appW2_wmrd_mesgResptoWsi =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi ;

  // rule RL_app_appW2_fabRespCredit_accumulate
  assign CAN_FIRE_RL_app_appW2_fabRespCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_fabRespCredit_accumulate = 1'd1 ;

  // rule RL_app_appW2_wci_ctrl_IsO
  assign CAN_FIRE_RL_app_appW2_wci_ctrl_IsO =
	     app_appW2_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     app_appW2_wci_cState == 3'd1 &&
	     app_appW2_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_app_appW2_wci_ctrl_IsO =
	     CAN_FIRE_RL_app_appW2_wci_ctrl_IsO ;

  // rule RL_app_appW2_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_app_appW2_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_app_appW2_wci_reqF_enq
  assign CAN_FIRE_RL_app_appW2_wci_reqF_enq =
	     app_appW2_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_app_appW2_wci_reqF_enq =
	     CAN_FIRE_RL_app_appW2_wci_reqF_enq ;

  // rule RL_app_appW2_wsi_Es_doAlways
  assign CAN_FIRE_RL_app_appW2_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsi_Es_doAlways = 1'd1 ;

  // rule RL_app_appW2_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_app_appW2_wsiS_reqFifo_enq = 1'b0 ;
  assign WILL_FIRE_RL_app_appW2_wsiS_reqFifo_enq = 1'b0 ;

  // rule RL_app_appW2_wsipass_doMessagePush
  assign CAN_FIRE_RL_app_appW2_wsipass_doMessagePush =
	     app_appW2_wsiS_reqFifo$EMPTY_N &&
	     (app_appW2_smaCtrl[4] || app_appW2_wsiM_reqFifo_c_r != 2'd2) &&
	     app_appW2_wci_cState == 3'd2 &&
	     app_appW2_smaCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_app_appW2_wsipass_doMessagePush =
	     CAN_FIRE_RL_app_appW2_wsipass_doMessagePush ;

  // rule RL_app_appW2_wmwt_messagePushPrecise
  assign CAN_FIRE_RL_app_appW2_wmwt_messagePushPrecise =
	     app_appW2_wmi_dhF_c_r != 2'd2 &&
	     app_appW2_wmi_operateD_699_AND_app_appW2_wmi_p_ETC___d5079 &&
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h2 ||
	      app_appW2_smaCtrl[3:0] == 4'h3) &&
	     app_appW2_wsiWordsRemain != 12'd0 &&
	     app_appW2_mesgReqValid &&
	     app_appW2_preciseBurst ;
  assign WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise =
	     CAN_FIRE_RL_app_appW2_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ;

  // rule RL_app_appW2_wmwt_requestPrecise
  assign CAN_FIRE_RL_app_appW2_wmwt_requestPrecise =
	     app_appW2_wmi_reqF_c_r != 2'd2 &&
	     app_appW2_wmi_mFlagF_c_r != 2'd2 &&
	     app_appW2_wmi_operateD &&
	     app_appW2_wmi_peerIsReady &&
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h2 ||
	      app_appW2_smaCtrl[3:0] == 4'h3) &&
	     app_appW2_readyToRequest &&
	     app_appW2_preciseBurst ;
  assign WILL_FIRE_RL_app_appW2_wmwt_requestPrecise =
	     CAN_FIRE_RL_app_appW2_wmwt_requestPrecise &&
	     !WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise ;

  // rule RL_app_appW2_wmwt_mesgBegin
  assign CAN_FIRE_RL_app_appW2_wmwt_mesgBegin =
	     app_appW2_wsiS_reqFifo$EMPTY_N && app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h2 ||
	      app_appW2_smaCtrl[3:0] == 4'h3) &&
	     !app_appW2_wmi_sThreadBusy_d &&
	     !app_appW2_wmi_sDataThreadBusy_d &&
	     !app_appW2_opcode[8] ;
  assign WILL_FIRE_RL_app_appW2_wmwt_mesgBegin =
	     CAN_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     !WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ;

  // rule RL_app_appW2_wmwt_messagePushImprecise
  assign CAN_FIRE_RL_app_appW2_wmwt_messagePushImprecise =
	     app_appW2_wmi_reqF_c_r != 2'd2 &&
	     app_appW2_wmi_dhF_c_r != 2'd2 &&
	     app_appW2_wmi_operateD &&
	     app_appW2_wmi_peerIsReady &&
	     app_appW2_wsiS_reqFifo_i_notEmpty__931_AND_NOT_ETC___d5098 &&
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h2 ||
	      app_appW2_smaCtrl[3:0] == 4'h3) &&
	     app_appW2_readyToPush &&
	     app_appW2_impreciseBurst ;
  assign WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise =
	     CAN_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ;

  // rule RL_app_appW2_wmwt_doAbort
  assign CAN_FIRE_RL_app_appW2_wmwt_doAbort =
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h2 ||
	      app_appW2_smaCtrl[3:0] == 4'h3) &&
	     app_appW2_doAbort ;
  assign WILL_FIRE_RL_app_appW2_wmwt_doAbort =
	     CAN_FIRE_RL_app_appW2_wmwt_doAbort ;

  // rule RL_app_appW2_wmwt_messageFinalize
  assign CAN_FIRE_RL_app_appW2_wmwt_messageFinalize =
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h2 ||
	      app_appW2_smaCtrl[3:0] == 4'h3) &&
	     app_appW2_mesgLength[14] &&
	     !app_appW2_doAbort &&
	     (app_appW2_preciseBurst && app_appW2_wsiWordsRemain == 12'd0 ||
	      app_appW2_impreciseBurst && app_appW2_endOfMessage) ;
  assign WILL_FIRE_RL_app_appW2_wmwt_messageFinalize =
	     CAN_FIRE_RL_app_appW2_wmwt_messageFinalize ;

  // rule RL_app_appW2_wmi_reqF_incCtr
  assign CAN_FIRE_RL_app_appW2_wmi_reqF_incCtr =
	     ((app_appW2_wmi_reqF_c_r == 2'd0) ?
		app_appW2_wmi_reqF_x_wire$whas :
		app_appW2_wmi_reqF_c_r != 2'd1 ||
		app_appW2_wmi_reqF_x_wire$whas) &&
	     app_appW2_wmi_reqF_enqueueing$whas &&
	     !app_appW2_wmi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr =
	     CAN_FIRE_RL_app_appW2_wmi_reqF_incCtr ;

  // rule RL_app_appW2_wmi_reqF_decCtr
  assign CAN_FIRE_RL_app_appW2_wmi_reqF_decCtr =
	     app_appW2_wmi_reqF_dequeueing$whas &&
	     !app_appW2_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr =
	     CAN_FIRE_RL_app_appW2_wmi_reqF_decCtr ;

  // rule RL_app_appW2_wmi_reqF_both
  assign CAN_FIRE_RL_app_appW2_wmi_reqF_both =
	     ((app_appW2_wmi_reqF_c_r == 2'd1) ?
		app_appW2_wmi_reqF_x_wire$whas :
		app_appW2_wmi_reqF_c_r != 2'd2 ||
		app_appW2_wmi_reqF_x_wire$whas) &&
	     app_appW2_wmi_reqF_dequeueing$whas &&
	     app_appW2_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wmi_reqF_both =
	     CAN_FIRE_RL_app_appW2_wmi_reqF_both ;

  // rule RL_app_appW2_wmi_mFlagF_incCtr
  assign CAN_FIRE_RL_app_appW2_wmi_mFlagF_incCtr =
	     ((app_appW2_wmi_mFlagF_c_r == 2'd0) ?
		app_appW2_wmi_mFlagF_enqueueing$whas :
		app_appW2_wmi_mFlagF_c_r != 2'd1 ||
		app_appW2_wmi_mFlagF_enqueueing$whas) &&
	     app_appW2_wmi_mFlagF_enqueueing$whas &&
	     !app_appW2_wmi_mFlagF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr =
	     CAN_FIRE_RL_app_appW2_wmi_mFlagF_incCtr ;

  // rule RL_app_appW2_wmi_mFlagF_decCtr
  assign CAN_FIRE_RL_app_appW2_wmi_mFlagF_decCtr =
	     app_appW2_wmi_mFlagF_dequeueing$whas &&
	     !app_appW2_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr =
	     CAN_FIRE_RL_app_appW2_wmi_mFlagF_decCtr ;

  // rule RL_app_appW2_wmi_mFlagF_both
  assign CAN_FIRE_RL_app_appW2_wmi_mFlagF_both =
	     ((app_appW2_wmi_mFlagF_c_r == 2'd1) ?
		app_appW2_wmi_mFlagF_enqueueing$whas :
		app_appW2_wmi_mFlagF_c_r != 2'd2 ||
		app_appW2_wmi_mFlagF_enqueueing$whas) &&
	     app_appW2_wmi_mFlagF_dequeueing$whas &&
	     app_appW2_wmi_mFlagF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wmi_mFlagF_both =
	     CAN_FIRE_RL_app_appW2_wmi_mFlagF_both ;

  // rule RL_app_appW2_wmi_dhF_incCtr
  assign CAN_FIRE_RL_app_appW2_wmi_dhF_incCtr =
	     ((app_appW2_wmi_dhF_c_r == 2'd0) ?
		MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		app_appW2_wmi_dhF_c_r != 2'd1 ||
		MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     !app_appW2_wmi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr =
	     CAN_FIRE_RL_app_appW2_wmi_dhF_incCtr ;

  // rule RL_app_appW2_wmi_dhF_decCtr
  assign CAN_FIRE_RL_app_appW2_wmi_dhF_decCtr =
	     app_appW2_wmi_dhF_dequeueing$whas &&
	     !MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr =
	     CAN_FIRE_RL_app_appW2_wmi_dhF_decCtr ;

  // rule RL_app_appW2_wmi_dhF_both
  assign CAN_FIRE_RL_app_appW2_wmi_dhF_both =
	     ((app_appW2_wmi_dhF_c_r == 2'd1) ?
		MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		app_appW2_wmi_dhF_c_r != 2'd2 ||
		MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     app_appW2_wmi_dhF_dequeueing$whas &&
	     MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_app_appW2_wmi_dhF_both =
	     CAN_FIRE_RL_app_appW2_wmi_dhF_both ;

  // rule RL_app_appW2_wmi_sThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_app_appW2_wmi_sThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wmi_sThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wmi_sDataThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_app_appW2_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr =
	     ((app_appW2_wsiM_reqFifo_c_r == 2'd0) ?
		app_appW2_wsiM_reqFifo_enqueueing$whas :
		app_appW2_wsiM_reqFifo_c_r != 2'd1 ||
		app_appW2_wsiM_reqFifo_enqueueing$whas) &&
	     app_appW2_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_app_appW2_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr ;

  // rule RL_app_appW2_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_app_appW2_wsiM_reqFifo_deq &&
	     !app_appW2_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr ;

  // rule RL_app_appW2_wsiM_reqFifo_both
  assign CAN_FIRE_RL_app_appW2_wsiM_reqFifo_both =
	     ((app_appW2_wsiM_reqFifo_c_r == 2'd1) ?
		app_appW2_wsiM_reqFifo_enqueueing$whas :
		app_appW2_wsiM_reqFifo_c_r != 2'd2 ||
		app_appW2_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_app_appW2_wsiM_reqFifo_deq &&
	     app_appW2_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both =
	     CAN_FIRE_RL_app_appW2_wsiM_reqFifo_both ;

  // rule RL_app_appW2_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_app_appW2_wsiS_reqFifo__updateLevelCounter =
	     1'b0 != app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW2_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_app_appW2_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_app_appW2_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_app_appW2_wsiS_reqFifo_reset =
	     app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW2_wsiS_reqFifo_reset =
	     app_appW2_wsiS_reqFifo_r_deq$whas ;

  // rule RL_app_appW2_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW2_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW2_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wmi_Em_doAlways
  assign CAN_FIRE_RL_app_appW2_wmi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wmi_Em_doAlways = 1'd1 ;

  // rule RL_app_appW2_wmi_respAdvance
  assign CAN_FIRE_RL_app_appW2_wmi_respAdvance =
	     app_appW2_wmi_operateD && app_appW2_wmi_peerIsReady &&
	     inf_dp0_wmi_wmi_respF_q_0[33:32] != 2'd0 ;
  assign WILL_FIRE_RL_app_appW2_wmi_respAdvance =
	     CAN_FIRE_RL_app_appW2_wmi_respAdvance ;

  // rule RL_app_appW2_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_app_appW2_wmrd_mesgBodyResponse =
	     app_appW2_wmi_respF_i_notEmpty__996_AND_app_ap_ETC___d5001 &&
	     app_appW2_wci_cState == 3'd2 &&
	     (app_appW2_smaCtrl[3:0] == 4'h1 ||
	      app_appW2_smaCtrl[3:0] == 4'h4 ||
	      app_appW2_smaCtrl[3:0] == 4'h9) &&
	     app_appW2_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgBodyResponse ;

  // rule RL_app_appW2_wci_cfwr
  assign CAN_FIRE_RL_app_appW2_wci_cfwr =
	     app_appW2_wci_reqF$EMPTY_N && app_appW2_wci_respF_c_r != 2'd2 &&
	     app_appW2_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_app_appW2_wci_cfwr =
	     CAN_FIRE_RL_app_appW2_wci_cfwr &&
	     !WILL_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW2_wci_ctl_op_complete ;

  // rule RL_app_appW2_wci_ctl_op_complete
  assign CAN_FIRE_RL_app_appW2_wci_ctl_op_complete =
	     app_appW2_wci_respF_c_r != 2'd2 && app_appW2_wci_ctlOpActive &&
	     app_appW2_wci_ctlAckReg ;
  assign WILL_FIRE_RL_app_appW2_wci_ctl_op_complete =
	     CAN_FIRE_RL_app_appW2_wci_ctl_op_complete ;

  // rule RL_app_appW2_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_app_appW2_wci_reqF__updateLevelCounter =
	     (app_appW2_wci_wciReq$wget[59:57] != 3'd0) !=
	     app_appW2_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW2_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_app_appW2_wci_reqF__updateLevelCounter ;

  // rule RL_app_appW2_wci_respF_incCtr
  assign CAN_FIRE_RL_app_appW2_wci_respF_incCtr =
	     ((app_appW2_wci_respF_c_r == 2'd0) ?
		app_appW2_wci_respF_x_wire$whas :
		app_appW2_wci_respF_c_r != 2'd1 ||
		app_appW2_wci_respF_x_wire$whas) &&
	     app_appW2_wci_respF_enqueueing$whas &&
	     !(app_appW2_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_app_appW2_wci_respF_incCtr =
	     CAN_FIRE_RL_app_appW2_wci_respF_incCtr ;

  // rule RL_app_appW2_wci_respF_decCtr
  assign CAN_FIRE_RL_app_appW2_wci_respF_decCtr =
	     app_appW2_wci_respF_c_r != 2'd0 &&
	     !app_appW2_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wci_respF_decCtr =
	     CAN_FIRE_RL_app_appW2_wci_respF_decCtr ;

  // rule RL_app_appW2_wci_respF_both
  assign CAN_FIRE_RL_app_appW2_wci_respF_both =
	     ((app_appW2_wci_respF_c_r == 2'd1) ?
		app_appW2_wci_respF_x_wire$whas :
		app_appW2_wci_respF_c_r != 2'd2 ||
		app_appW2_wci_respF_x_wire$whas) &&
	     app_appW2_wci_respF_c_r != 2'd0 &&
	     app_appW2_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW2_wci_respF_both =
	     CAN_FIRE_RL_app_appW2_wci_respF_both ;

  // rule RL_app_appW2_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_app_appW2_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW2_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW2_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW2_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW2_respF_portA
  assign CAN_FIRE_RL_app_appW2_respF_portA = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_respF_portA = 1'd1 ;

  // rule RL_app_appW2_respF_portB
  assign CAN_FIRE_RL_app_appW2_respF_portB = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_respF_portB = 1'd1 ;

  // rule RL_app_appW3_rdSer_sync
  assign CAN_FIRE_RL_app_appW3_rdSer_sync =
	     app_appW3_wci_cState == 3'd2 && app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_rdSyncWord ;
  assign WILL_FIRE_RL_app_appW3_rdSer_sync =
	     CAN_FIRE_RL_app_appW3_rdSer_sync ;

  // rule RL_app_appW3_wci_request_decode
  assign CAN_FIRE_RL_app_appW3_wci_request_decode =
	     app_appW3_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_app_appW3_wci_request_decode =
	     app_appW3_wci_reqF$EMPTY_N ;

  // rule RL_app_appW3_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_app_appW3_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_app_appW3_wci_respF_deq
  assign CAN_FIRE_RL_app_appW3_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wci_respF_deq = 1'd1 ;

  // rule RL_app_appW3_wci_ctl_op_start
  assign CAN_FIRE_RL_app_appW3_wci_ctl_op_start =
	     app_appW3_wci_reqF$EMPTY_N && app_appW3_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_app_appW3_wci_ctl_op_start =
	     CAN_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW3_wci_ctl_op_complete ;

  // rule RL_app_appW3_wci_ctrl_EiI
  assign CAN_FIRE_RL_app_appW3_wci_ctrl_EiI =
	     app_appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     app_appW3_wci_cState == 3'd0 &&
	     app_appW3_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_app_appW3_wci_ctrl_EiI =
	     CAN_FIRE_RL_app_appW3_wci_ctrl_EiI ;

  // rule RL_app_appW3_wci_ctrl_OrE
  assign CAN_FIRE_RL_app_appW3_wci_ctrl_OrE =
	     app_appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_app_appW3_wci_ctrl_OrE =
	     CAN_FIRE_RL_app_appW3_wci_ctrl_OrE ;

  // rule RL_app_appW3_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_app_appW3_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_app_appW3_wsiS_backpressure
  assign CAN_FIRE_RL_app_appW3_wsiS_backpressure =
	     app_appW3_wsiS_reqFifo_levelsValid && app_appW3_wsiS_operateD &&
	     app_appW3_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_app_appW3_wsiS_backpressure =
	     CAN_FIRE_RL_app_appW3_wsiS_backpressure ;

  // rule RL_app_stbConnect
  assign CAN_FIRE_RL_app_stbConnect =
	     !CAN_FIRE_RL_app_appW3_wsiS_backpressure ||
	     app_appW3_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_app_stbConnect = CAN_FIRE_RL_app_stbConnect ;

  // rule RL_app_appW2_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_app_appW2_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_app_appW2_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_app_appW3_wsiS_ext_status_assign
  assign CAN_FIRE_RL_app_appW3_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_app_appW3_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_app_appW3_wsiS_inc_tBusyCount =
	     app_appW3_wsiS_operateD && app_appW3_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_app_appW3_wsiS_backpressure ||
	      app_appW3_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_app_appW3_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_app_appW3_wsiS_inc_tBusyCount ;

  // rule RL_app_appW3_wsiS_update_statusR
  assign CAN_FIRE_RL_app_appW3_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiS_update_statusR = 1'd1 ;

  // rule RL_app_appW3_wsiM_ext_status_assign
  assign CAN_FIRE_RL_app_appW3_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_app_appW3_wci_cfrd
  assign CAN_FIRE_RL_app_appW3_wci_cfrd =
	     app_appW3_wci_reqF$EMPTY_N && app_appW3_wci_respF_c_r != 2'd2 &&
	     app_appW3_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_app_appW3_wci_cfrd =
	     CAN_FIRE_RL_app_appW3_wci_cfrd &&
	     !WILL_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW3_wci_ctl_op_complete ;

  // rule RL_app_appW3_wrtSer_begin
  assign CAN_FIRE_RL_app_appW3_wrtSer_begin =
	     app_appW3_metaWF$EMPTY_N &&
	     NOT_app_appW3_wrtSerPos_725_EQ_3_726_727_AND_N_ETC___d5741 &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_wrtSerUnroll == 16'd0 ;
  assign WILL_FIRE_RL_app_appW3_wrtSer_begin =
	     CAN_FIRE_RL_app_appW3_wrtSer_begin ;

  // rule RL_app_appW3_delay_write_req
  assign CAN_FIRE_RL_app_appW3_delay_write_req =
	     app_appW3_wmemi_reqF_c_r != 2'd2 &&
	     app_appW3_wmemi_dhF_c_r != 2'd2 &&
	     app_appW3_wmemi_operateD &&
	     app_appW3_wmemi_peerIsReady &&
	     app_appW3_wide16Fa$EMPTY_N &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_dlyWordsStored_value_652_SLE_0_799_O_ETC___d5807 &&
	     app_appW3_dlyWordsStored_value_652_SLT_8388608___d5809 ;
  assign WILL_FIRE_RL_app_appW3_delay_write_req =
	     CAN_FIRE_RL_app_appW3_delay_write_req ;

  // rule RL_app_appW3_operating_actions
  assign CAN_FIRE_RL_app_appW3_operating_actions =
	     app_appW3_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_app_appW3_operating_actions =
	     CAN_FIRE_RL_app_appW3_operating_actions ;

  // rule RL_app_appW3_delay_read_req
  assign CAN_FIRE_RL_app_appW3_delay_read_req =
	     app_appW3_wmemi_reqF_c_r != 2'd2 && app_appW3_wmemi_operateD &&
	     app_appW3_wmemi_peerIsReady &&
	     app_appW3_wci_cState_310_EQ_2_321_AND_app_appW_ETC___d5827 &&
	     (app_appW3_dlyReadCredit_value ^ 8'h80) > 8'd128 &&
	     app_appW3_wsiM_reqFifo_c_r != 2'd2 ;
  assign WILL_FIRE_RL_app_appW3_delay_read_req =
	     CAN_FIRE_RL_app_appW3_delay_read_req &&
	     !WILL_FIRE_RL_app_appW3_delay_write_req ;

  // rule RL_app_appW3_cycles_passed_count
  assign CAN_FIRE_RL_app_appW3_cycles_passed_count =
	     app_appW3_wsiS_statusR[0] ;
  assign WILL_FIRE_RL_app_appW3_cycles_passed_count =
	     CAN_FIRE_RL_app_appW3_cycles_passed_count ;

  // rule RL_app_appW3_delay_Fb2Fc
  assign CAN_FIRE_RL_app_appW3_delay_Fb2Fc =
	     app_appW3_wide16Fc$FULL_N && app_appW3_wide16Fb$EMPTY_N &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_app_appW3_delay_Fb2Fc =
	     CAN_FIRE_RL_app_appW3_delay_Fb2Fc ;

  // rule RL_app_appW3_rdSer_begin
  assign CAN_FIRE_RL_app_appW3_rdSer_begin =
	     app_appW3_metaRF_i_notFull__855_AND_NOT_app_ap_ETC___d5866 &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_rdSerUnroll == 16'd0 &&
	     !app_appW3_rdSyncWord ;
  assign WILL_FIRE_RL_app_appW3_rdSer_begin =
	     CAN_FIRE_RL_app_appW3_rdSer_begin ;

  // rule RL_app_appW3_rdSer_body
  assign CAN_FIRE_RL_app_appW3_rdSer_body =
	     app_appW3_mesgRF_i_notFull__906_AND_NOT_app_ap_ETC___d5907 &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_rdSerUnroll != 16'd0 &&
	     !app_appW3_rdSyncWord ;
  assign WILL_FIRE_RL_app_appW3_rdSer_body =
	     CAN_FIRE_RL_app_appW3_rdSer_body ;

  // rule RL_app_appW3_wmrd_mesgBegin
  assign CAN_FIRE_RL_app_appW3_wmrd_mesgBegin =
	     app_appW3_metaRF$EMPTY_N && app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_app_appW3_wmrd_mesgBegin =
	     CAN_FIRE_RL_app_appW3_wmrd_mesgBegin ;

  // rule RL_app_appW3_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_app_appW3_wmrd_mesgBodyResponse =
	     app_appW3_wsiM_reqFifo_c_r != 2'd2 && app_appW3_mesgRF$EMPTY_N &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_app_appW3_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_app_appW3_wmrd_mesgBodyResponse ;

  // rule RL_app_appW3_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_app_appW3_wsiM_inc_tBusyCount =
	     app_appW3_wsiM_operateD && app_appW3_wsiM_peerIsReady &&
	     app_appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW3_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_app_appW3_wsiM_inc_tBusyCount ;

  // rule RL_app_appW3_wsiM_update_statusR
  assign CAN_FIRE_RL_app_appW3_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiM_update_statusR = 1'd1 ;

  // rule RL_app_appW3_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_app_appW3_wsiM_reqFifo_deq =
	     app_appW3_wsiM_reqFifo_c_r != 2'd0 &&
	     !app_appW3_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW3_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_app_appW3_wsiM_reqFifo_deq ;

  // rule RL_app_appW3_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW3_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW3_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW3_wmemi_dhF_deq
  assign CAN_FIRE_RL_app_appW3_wmemi_dhF_deq = wmemiM_SDataAccept ;
  assign WILL_FIRE_RL_app_appW3_wmemi_dhF_deq = wmemiM_SDataAccept ;

  // rule RL_app_appW3_wmemi_update_statusR
  assign CAN_FIRE_RL_app_appW3_wmemi_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wmemi_update_statusR = 1'd1 ;

  // rule RL_app_appW3_wmemi_reqF_deq
  assign CAN_FIRE_RL_app_appW3_wmemi_reqF_deq = wmemiM_SCmdAccept ;
  assign WILL_FIRE_RL_app_appW3_wmemi_reqF_deq = wmemiM_SCmdAccept ;

  // rule RL_app_appW3_wmemi_reqF_incCtr
  assign CAN_FIRE_RL_app_appW3_wmemi_reqF_incCtr =
	     ((app_appW3_wmemi_reqF_c_r == 2'd0) ?
		app_appW3_wmemi_reqF_x_wire$whas :
		app_appW3_wmemi_reqF_c_r != 2'd1 ||
		app_appW3_wmemi_reqF_x_wire$whas) &&
	     app_appW3_wmemi_reqF_enqueueing$whas &&
	     !app_appW3_wmemi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr =
	     CAN_FIRE_RL_app_appW3_wmemi_reqF_incCtr ;

  // rule RL_app_appW3_wmemi_reqF_decCtr
  assign CAN_FIRE_RL_app_appW3_wmemi_reqF_decCtr =
	     app_appW3_wmemi_reqF_dequeueing$whas &&
	     !app_appW3_wmemi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr =
	     CAN_FIRE_RL_app_appW3_wmemi_reqF_decCtr ;

  // rule RL_app_appW3_wmemi_reqF_both
  assign CAN_FIRE_RL_app_appW3_wmemi_reqF_both =
	     ((app_appW3_wmemi_reqF_c_r == 2'd1) ?
		app_appW3_wmemi_reqF_x_wire$whas :
		app_appW3_wmemi_reqF_c_r != 2'd2 ||
		app_appW3_wmemi_reqF_x_wire$whas) &&
	     app_appW3_wmemi_reqF_dequeueing$whas &&
	     app_appW3_wmemi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW3_wmemi_reqF_both =
	     CAN_FIRE_RL_app_appW3_wmemi_reqF_both ;

  // rule RL_app_appW3_wmemi_dhF_incCtr
  assign CAN_FIRE_RL_app_appW3_wmemi_dhF_incCtr =
	     ((app_appW3_wmemi_dhF_c_r == 2'd0) ?
		CAN_FIRE_RL_app_appW3_delay_write_req :
		app_appW3_wmemi_dhF_c_r != 2'd1 ||
		CAN_FIRE_RL_app_appW3_delay_write_req) &&
	     CAN_FIRE_RL_app_appW3_delay_write_req &&
	     !app_appW3_wmemi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr =
	     CAN_FIRE_RL_app_appW3_wmemi_dhF_incCtr ;

  // rule RL_app_appW3_wmemi_dhF_decCtr
  assign CAN_FIRE_RL_app_appW3_wmemi_dhF_decCtr =
	     app_appW3_wmemi_dhF_dequeueing$whas &&
	     !CAN_FIRE_RL_app_appW3_delay_write_req ;
  assign WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr =
	     CAN_FIRE_RL_app_appW3_wmemi_dhF_decCtr ;

  // rule RL_app_appW3_wmemi_dhF_both
  assign CAN_FIRE_RL_app_appW3_wmemi_dhF_both =
	     ((app_appW3_wmemi_dhF_c_r == 2'd1) ?
		CAN_FIRE_RL_app_appW3_delay_write_req :
		app_appW3_wmemi_dhF_c_r != 2'd2 ||
		CAN_FIRE_RL_app_appW3_delay_write_req) &&
	     app_appW3_wmemi_dhF_dequeueing$whas &&
	     CAN_FIRE_RL_app_appW3_delay_write_req ;
  assign WILL_FIRE_RL_app_appW3_wmemi_dhF_both =
	     CAN_FIRE_RL_app_appW3_wmemi_dhF_both ;

  // rule RL_app_appW3_mesgWF_portB_read_data
  assign CAN_FIRE_RL_app_appW3_mesgWF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_mesgWF_portB_read_data = 1'd1 ;

  // rule RL_app_appW3_wrtSer_body
  assign CAN_FIRE_RL_app_appW3_wrtSer_body =
	     NOT_app_appW3_mesgWF_rRdPtr_639_EQ_app_appW3_m_ETC___d5767 &&
	     IF_app_appW3_wrtSerPos_725_EQ_0_733_OR_app_app_ETC___d5778 &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     app_appW3_wrtSerUnroll != 16'd0 ;
  assign WILL_FIRE_RL_app_appW3_wrtSer_body =
	     CAN_FIRE_RL_app_appW3_wrtSer_body ;

  // rule RL_app_appW3_dlyWordsStored_accumulate
  assign CAN_FIRE_RL_app_appW3_dlyWordsStored_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_dlyWordsStored_accumulate = 1'd1 ;

  // rule RL_app_appW3_dlyReadCredit_accumulate
  assign CAN_FIRE_RL_app_appW3_dlyReadCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_dlyReadCredit_accumulate = 1'd1 ;

  // rule RL_app_appW3_dlyReadyToWrite_accumulate
  assign CAN_FIRE_RL_app_appW3_dlyReadyToWrite_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_dlyReadyToWrite_accumulate = 1'd1 ;

  // rule RL_app_appW3_wci_ctrl_IsO
  assign CAN_FIRE_RL_app_appW3_wci_ctrl_IsO =
	     app_appW3_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     app_appW3_wci_cState == 3'd1 &&
	     app_appW3_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_app_appW3_wci_ctrl_IsO =
	     CAN_FIRE_RL_app_appW3_wci_ctrl_IsO ;

  // rule RL_app_appW3_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_app_appW3_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_app_appW3_wci_reqF_enq
  assign CAN_FIRE_RL_app_appW3_wci_reqF_enq =
	     app_appW3_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_app_appW3_wci_reqF_enq =
	     CAN_FIRE_RL_app_appW3_wci_reqF_enq ;

  // rule RL_app_appW3_wsi_Es_doAlways
  assign CAN_FIRE_RL_app_appW3_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsi_Es_doAlways = 1'd1 ;

  // rule RL_app_appW3_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_app_appW3_wsiS_reqFifo_enq =
	     app_appW3_wsiS_operateD && app_appW3_wsiS_peerIsReady &&
	     app_appW3_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_app_appW3_wsiS_reqFifo_enq ;

  // rule RL_app_appW3_wsipass_doMessagePush
  assign CAN_FIRE_RL_app_appW3_wsipass_doMessagePush =
	     app_appW3_wsiM_reqFifo_c_r != 2'd2 &&
	     app_appW3_wsiS_reqFifo$EMPTY_N &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_app_appW3_wsipass_doMessagePush =
	     CAN_FIRE_RL_app_appW3_wsipass_doMessagePush ;

  // rule RL_app_appW3_wmwt_mesg_ingress
  assign CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress =
	     NOT_app_appW3_mesgWF_rRdPtr_639_PLUS_2048_695__ETC___d5697 &&
	     app_appW3_wsiS_reqFifo$EMPTY_N &&
	     (!app_appW3_wsiS_reqFifo$D_OUT[57] || app_appW3_metaWF$FULL_N) &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_app_appW3_wmwt_mesg_ingress =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ;

  // rule RL_app_appW3_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_app_appW3_wsiS_reqFifo__updateLevelCounter =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 !=
	     app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW3_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_app_appW3_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_app_appW3_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_app_appW3_wsiS_reqFifo_reset =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ||
	     app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW3_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_app_appW3_wsiS_reqFifo_reset ;

  // rule RL_app_appW3_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW3_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW3_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW3_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr =
	     ((app_appW3_wsiM_reqFifo_c_r == 2'd0) ?
		app_appW3_wsiM_reqFifo_x_wire$whas :
		app_appW3_wsiM_reqFifo_c_r != 2'd1 ||
		app_appW3_wsiM_reqFifo_x_wire$whas) &&
	     app_appW3_wsiM_reqFifo_x_wire$whas &&
	     !CAN_FIRE_RL_app_appW3_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr ;

  // rule RL_app_appW3_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_app_appW3_wsiM_reqFifo_deq &&
	     !app_appW3_wsiM_reqFifo_x_wire$whas ;
  assign WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr ;

  // rule RL_app_appW3_wsiM_reqFifo_both
  assign CAN_FIRE_RL_app_appW3_wsiM_reqFifo_both =
	     ((app_appW3_wsiM_reqFifo_c_r == 2'd1) ?
		app_appW3_wsiM_reqFifo_x_wire$whas :
		app_appW3_wsiM_reqFifo_c_r != 2'd2 ||
		app_appW3_wsiM_reqFifo_x_wire$whas) &&
	     CAN_FIRE_RL_app_appW3_wsiM_reqFifo_deq &&
	     app_appW3_wsiM_reqFifo_x_wire$whas ;
  assign WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both =
	     CAN_FIRE_RL_app_appW3_wsiM_reqFifo_both ;

  // rule RL_app_appW3_mesgWF_portA
  assign CAN_FIRE_RL_app_appW3_mesgWF_portA = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_mesgWF_portA = 1'd1 ;

  // rule RL_app_appW3_mesgWF_portB
  assign CAN_FIRE_RL_app_appW3_mesgWF_portB = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_mesgWF_portB = 1'd1 ;

  // rule RL_app_appW3_wmemi_Em_doAlways
  assign CAN_FIRE_RL_app_appW3_wmemi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wmemi_Em_doAlways = 1'd1 ;

  // rule RL_app_appW3_wmemi_respAdvance
  assign CAN_FIRE_RL_app_appW3_wmemi_respAdvance =
	     app_appW3_wmemi_operateD && app_appW3_wmemi_peerIsReady &&
	     app_appW3_wmemi_wmemiResponse$wget[130:129] != 2'd0 ;
  assign WILL_FIRE_RL_app_appW3_wmemi_respAdvance =
	     CAN_FIRE_RL_app_appW3_wmemi_respAdvance ;

  // rule RL_app_appW3_delay_read_resp
  assign CAN_FIRE_RL_app_appW3_delay_read_resp =
	     app_appW3_wmemi_respF$EMPTY_N && app_appW3_wide16Fb$FULL_N &&
	     app_appW3_wci_cState == 3'd2 &&
	     app_appW3_dlyCtrl[3:0] == 4'h7 ;
  assign WILL_FIRE_RL_app_appW3_delay_read_resp =
	     CAN_FIRE_RL_app_appW3_delay_read_resp ;

  // rule RL_app_appW3_wci_cfwr
  assign CAN_FIRE_RL_app_appW3_wci_cfwr =
	     app_appW3_wci_reqF$EMPTY_N && app_appW3_wci_respF_c_r != 2'd2 &&
	     app_appW3_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_app_appW3_wci_cfwr =
	     CAN_FIRE_RL_app_appW3_wci_cfwr &&
	     !WILL_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW3_wci_ctl_op_complete ;

  // rule RL_app_appW3_wci_ctl_op_complete
  assign CAN_FIRE_RL_app_appW3_wci_ctl_op_complete =
	     app_appW3_wci_respF_c_r != 2'd2 && app_appW3_wci_ctlOpActive &&
	     app_appW3_wci_ctlAckReg ;
  assign WILL_FIRE_RL_app_appW3_wci_ctl_op_complete =
	     CAN_FIRE_RL_app_appW3_wci_ctl_op_complete ;

  // rule RL_app_appW3_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_app_appW3_wci_reqF__updateLevelCounter =
	     (app_appW3_wci_wciReq$wget[59:57] != 3'd0) !=
	     app_appW3_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW3_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_app_appW3_wci_reqF__updateLevelCounter ;

  // rule RL_app_appW3_wci_respF_incCtr
  assign CAN_FIRE_RL_app_appW3_wci_respF_incCtr =
	     ((app_appW3_wci_respF_c_r == 2'd0) ?
		app_appW3_wci_respF_x_wire$whas :
		app_appW3_wci_respF_c_r != 2'd1 ||
		app_appW3_wci_respF_x_wire$whas) &&
	     app_appW3_wci_respF_enqueueing$whas &&
	     !(app_appW3_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_app_appW3_wci_respF_incCtr =
	     CAN_FIRE_RL_app_appW3_wci_respF_incCtr ;

  // rule RL_app_appW3_wci_respF_decCtr
  assign CAN_FIRE_RL_app_appW3_wci_respF_decCtr =
	     app_appW3_wci_respF_c_r != 2'd0 &&
	     !app_appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW3_wci_respF_decCtr =
	     CAN_FIRE_RL_app_appW3_wci_respF_decCtr ;

  // rule RL_app_appW3_wci_respF_both
  assign CAN_FIRE_RL_app_appW3_wci_respF_both =
	     ((app_appW3_wci_respF_c_r == 2'd1) ?
		app_appW3_wci_respF_x_wire$whas :
		app_appW3_wci_respF_c_r != 2'd2 ||
		app_appW3_wci_respF_x_wire$whas) &&
	     app_appW3_wci_respF_c_r != 2'd0 &&
	     app_appW3_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW3_wci_respF_both =
	     CAN_FIRE_RL_app_appW3_wci_respF_both ;

  // rule RL_app_appW3_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_app_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_app_appW3_wmemi_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW3_wmemi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wmemi_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW3_wmemi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW3_wmemi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wmemi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW4_operating_actions
  assign CAN_FIRE_RL_app_appW4_operating_actions =
	     app_appW4_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_app_appW4_operating_actions =
	     CAN_FIRE_RL_app_appW4_operating_actions ;

  // rule RL_app_appW4_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest =
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h1 ||
	      app_appW4_smaCtrl[3:0] == 4'h4 ||
	      app_appW4_smaCtrl[3:0] == 4'h9) &&
	     app_appW4_fabWordsRemain != 14'd0 &&
	     (app_appW4_fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     app_appW4_mesgReqOK ;
  assign WILL_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ;

  // rule RL_app_appW4_wmrd_mesgBodyRequest
  assign CAN_FIRE_RL_app_appW4_wmrd_mesgBodyRequest =
	     NOT_app_appW4_wmi_reqF_c_r_249_EQ_2_267_268_AN_ETC___d6616 &&
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h1 ||
	      app_appW4_smaCtrl[3:0] == 4'h4 ||
	      app_appW4_smaCtrl[3:0] == 4'h9) &&
	     app_appW4_mesgPreRequest ;
  assign WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ;

  // rule RL_app_appW4_wci_request_decode
  assign CAN_FIRE_RL_app_appW4_wci_request_decode =
	     app_appW4_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_app_appW4_wci_request_decode =
	     app_appW4_wci_reqF$EMPTY_N ;

  // rule RL_app_appW4_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_app_appW4_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_app_appW4_wci_respF_deq
  assign CAN_FIRE_RL_app_appW4_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wci_respF_deq = 1'd1 ;

  // rule RL_app_appW4_wci_ctl_op_start
  assign CAN_FIRE_RL_app_appW4_wci_ctl_op_start =
	     app_appW4_wci_reqF$EMPTY_N && app_appW4_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_app_appW4_wci_ctl_op_start =
	     CAN_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW4_wci_ctl_op_complete ;

  // rule RL_app_appW4_wci_ctrl_EiI
  assign CAN_FIRE_RL_app_appW4_wci_ctrl_EiI =
	     app_appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     app_appW4_wci_cState == 3'd0 &&
	     app_appW4_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_app_appW4_wci_ctrl_EiI =
	     CAN_FIRE_RL_app_appW4_wci_ctrl_EiI ;

  // rule RL_app_appW4_wci_ctrl_OrE
  assign CAN_FIRE_RL_app_appW4_wci_ctrl_OrE =
	     app_appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     app_appW4_wci_cState == 3'd2 &&
	     app_appW4_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_app_appW4_wci_ctrl_OrE =
	     CAN_FIRE_RL_app_appW4_wci_ctrl_OrE ;

  // rule RL_app_appW4_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_app_appW4_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wmi_reqF_deq
  assign CAN_FIRE_RL_app_appW4_wmi_reqF_deq =
	     app_appW4_wmi_operateD && app_appW4_wmi_peerIsReady &&
	     !app_appW4_wmi_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW4_wmi_reqF_deq =
	     CAN_FIRE_RL_app_appW4_wmi_reqF_deq ;

  // rule RL_app_appW4_wmi_dhF_deq
  assign CAN_FIRE_RL_app_appW4_wmi_dhF_deq =
	     app_appW4_wmi_operateD && app_appW4_wmi_peerIsReady &&
	     !app_appW4_wmi_sDataThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW4_wmi_dhF_deq =
	     CAN_FIRE_RL_app_appW4_wmi_dhF_deq ;

  // rule RL_app_appW4_wsiM_ext_status_assign
  assign CAN_FIRE_RL_app_appW4_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_app_appW4_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_app_appW4_wsiM_inc_tBusyCount =
	     app_appW4_wsiM_operateD && app_appW4_wsiM_peerIsReady &&
	     app_appW4_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW4_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_app_appW4_wsiM_inc_tBusyCount ;

  // rule RL_app_appW4_wsiM_update_statusR
  assign CAN_FIRE_RL_app_appW4_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiM_update_statusR = 1'd1 ;

  // rule RL_app_appW4_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_app_appW4_wsiM_reqFifo_deq =
	     app_appW4_wsiM_reqFifo_c_r != 2'd0 &&
	     !app_appW4_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_app_appW4_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_app_appW4_wsiM_reqFifo_deq ;

  // rule RL_app_appW4_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_app_appW4_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_app_appW4_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW4_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW4_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wsiS_backpressure
  assign CAN_FIRE_RL_app_appW4_wsiS_backpressure =
	     app_appW4_wsiS_reqFifo_levelsValid && app_appW4_wsiS_operateD &&
	     app_appW4_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_app_appW4_wsiS_backpressure =
	     CAN_FIRE_RL_app_appW4_wsiS_backpressure ;

  // rule RL_app_stbConnect_1
  assign CAN_FIRE_RL_app_stbConnect_1 =
	     !CAN_FIRE_RL_app_appW4_wsiS_backpressure ||
	     app_appW4_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_app_stbConnect_1 = CAN_FIRE_RL_app_stbConnect_1 ;

  // rule RL_app_appW3_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_app_appW3_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_app_appW3_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_app_appW4_wsiS_ext_status_assign
  assign CAN_FIRE_RL_app_appW4_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_app_appW4_wci_cfrd
  assign CAN_FIRE_RL_app_appW4_wci_cfrd =
	     app_appW4_wci_reqF$EMPTY_N && app_appW4_wci_respF_c_r != 2'd2 &&
	     app_appW4_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_app_appW4_wci_cfrd =
	     CAN_FIRE_RL_app_appW4_wci_cfrd &&
	     !WILL_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW4_wci_ctl_op_complete ;

  // rule RL_app_appW4_wmrd_mesgBegin
  assign CAN_FIRE_RL_app_appW4_wmrd_mesgBegin =
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h1 ||
	      app_appW4_smaCtrl[3:0] == 4'h4 ||
	      app_appW4_smaCtrl[3:0] == 4'h9) &&
	     !app_appW4_wmi_sThreadBusy_d &&
	     !app_appW4_wmi_sDataThreadBusy_d &&
	     app_appW4_unrollCnt == 16'd0 ;
  assign WILL_FIRE_RL_app_appW4_wmrd_mesgBegin =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgBegin ;

  // rule RL_sFlagConnect_9
  assign CAN_FIRE_RL_sFlagConnect_9 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_9 = 1'd1 ;

  // rule RL_inf_dp1_wmi_respMetadata
  assign CAN_FIRE_RL_inf_dp1_wmi_respMetadata =
	     inf_dp1_wmi_wmi_operateD && inf_dp1_wmi_wmi_peerIsReady &&
	     inf_dp1_wmi_dpControl_whas__837_AND_inf_dp1_br_ETC___d3883 &&
	     inf_dp1_dpControl[3:2] != 2'd1 &&
	     !inf_dp1_wmi_mesgMeta[128] &&
	     inf_dp1_wmi_mesgBufReady &&
	     inf_dp1_wmi_metaBusy ;
  assign WILL_FIRE_RL_inf_dp1_wmi_respMetadata =
	     CAN_FIRE_RL_inf_dp1_wmi_respMetadata &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doReadResp ;

  // rule RL_inf_dp1_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqOnly =
	     inf_dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_deqOnly =
	     inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterB_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     !inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     inf_dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas &&
	     inf_dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_inf_dp1_wmi_doReadReq
  assign CAN_FIRE_RL_inf_dp1_wmi_doReadReq =
	     IF_inf_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_9_ETC___d8294 &&
	     inf_dp1_wmi_rdActive ;
  assign WILL_FIRE_RL_inf_dp1_wmi_doReadReq =
	     CAN_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // rule RL_inf_dp1_rBMesg
  assign CAN_FIRE_RL_inf_dp1_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_rBMesg = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory$b_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterB_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory_1$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterB_1_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory_2$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterB_2_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1 ||
	     MUX_inf_dp1_bram_memory_3$b_put_1__SEL_2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     inf_dp1_bram_serverAdapterB_3_cnt_1$whas ||
	     inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_inf_dp1_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_inf_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_inf_dp1_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_inf_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bml_lclAdvance
  assign CAN_FIRE_RL_inf_dp1_bml_lclAdvance =
	     inf_dp1_wci_cState == 3'd2 && inf_dp1_bml_lclBufDone ;
  assign WILL_FIRE_RL_inf_dp1_bml_lclAdvance =
	     CAN_FIRE_RL_inf_dp1_bml_lclAdvance ;

  // rule RL_inf_dp1_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_inf_dp1_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp1_bml_lclAdvance ;
  assign WILL_FIRE_RL_inf_dp1_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_inf_dp1_bml_lclAdvance ;

  // rule RL_inf_dp1_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_inf_dp1_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_inf_dp1_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_inf_dp1_bml_initAccumulators
  assign CAN_FIRE_RL_inf_dp1_bml_initAccumulators =
	     inf_dp1_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     inf_dp1_wci_cState == 3'd1 &&
	     inf_dp1_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_initAccumulators =
	     CAN_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // rule RL_inf_dp1_wci_cfwr
  assign CAN_FIRE_RL_inf_dp1_wci_cfwr =
	     inf_dp1_wci_reqF$EMPTY_N && inf_dp1_wci_respF_c_r != 2'd2 &&
	     inf_dp1_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_inf_dp1_wci_cfwr =
	     CAN_FIRE_RL_inf_dp1_wci_cfwr &&
	     !WILL_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete ;

  // rule RL_inf_dp1_wci_ctl_op_complete
  assign CAN_FIRE_RL_inf_dp1_wci_ctl_op_complete =
	     inf_dp1_wci_respF_c_r != 2'd2 && inf_dp1_wci_ctlOpActive &&
	     inf_dp1_wci_ctlAckReg ;
  assign WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete =
	     CAN_FIRE_RL_inf_dp1_wci_ctl_op_complete ;

  // rule RL_inf_dp1_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_inf_dp1_wci_reqF__updateLevelCounter =
	     (inf_dp1_wci_wciReq$wget[59:57] != 3'd0) !=
	     inf_dp1_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_inf_dp1_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_inf_dp1_wci_reqF__updateLevelCounter ;

  // rule RL_inf_dp1_wci_respF_incCtr
  assign CAN_FIRE_RL_inf_dp1_wci_respF_incCtr =
	     ((inf_dp1_wci_respF_c_r == 2'd0) ?
		inf_dp1_wci_respF_x_wire$whas :
		inf_dp1_wci_respF_c_r != 2'd1 ||
		inf_dp1_wci_respF_x_wire$whas) &&
	     inf_dp1_wci_respF_enqueueing$whas &&
	     !(inf_dp1_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_inf_dp1_wci_respF_incCtr =
	     CAN_FIRE_RL_inf_dp1_wci_respF_incCtr ;

  // rule RL_inf_dp1_wci_respF_decCtr
  assign CAN_FIRE_RL_inf_dp1_wci_respF_decCtr =
	     inf_dp1_wci_respF_c_r != 2'd0 &&
	     !inf_dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_inf_dp1_wci_respF_decCtr =
	     CAN_FIRE_RL_inf_dp1_wci_respF_decCtr ;

  // rule RL_inf_dp1_wci_respF_both
  assign CAN_FIRE_RL_inf_dp1_wci_respF_both =
	     ((inf_dp1_wci_respF_c_r == 2'd1) ?
		inf_dp1_wci_respF_x_wire$whas :
		inf_dp1_wci_respF_c_r != 2'd2 ||
		inf_dp1_wci_respF_x_wire$whas) &&
	     inf_dp1_wci_respF_c_r != 2'd0 &&
	     inf_dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_inf_dp1_wci_respF_both =
	     CAN_FIRE_RL_inf_dp1_wci_respF_both ;

  // rule RL_inf_dp1_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_inf_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_inf_dp1_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_inf_dp1_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inf_dp1_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_app_appW4_wsiS_inc_tBusyCount =
	     app_appW4_wsiS_operateD && app_appW4_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_app_appW4_wsiS_backpressure ||
	      app_appW4_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_app_appW4_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_app_appW4_wsiS_inc_tBusyCount ;

  // rule RL_app_appW4_wsiS_update_statusR
  assign CAN_FIRE_RL_app_appW4_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiS_update_statusR = 1'd1 ;

  // rule RL_app_appW4_mesgPreRequest__dreg_update
  assign CAN_FIRE_RL_app_appW4_mesgPreRequest__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_mesgPreRequest__dreg_update = 1'd1 ;

  // rule RL_app_appW4_respF_portB_read_data
  assign CAN_FIRE_RL_app_appW4_respF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_respF_portB_read_data = 1'd1 ;

  // rule RL_app_appW4_wmrd_mesgResptoWsi
  assign CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi =
	     app_appW4_wsiM_reqFifo_c_r != 2'd2 &&
	     app_appW4_respF_rRdPtr != app_appW4_respF_rWrPtr &&
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h1 ||
	      app_appW4_smaCtrl[3:0] == 4'h4 ||
	      app_appW4_smaCtrl[3:0] == 4'h9) ;
  assign WILL_FIRE_RL_app_appW4_wmrd_mesgResptoWsi =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi ;

  // rule RL_app_appW4_fabRespCredit_accumulate
  assign CAN_FIRE_RL_app_appW4_fabRespCredit_accumulate = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_fabRespCredit_accumulate = 1'd1 ;

  // rule RL_app_appW4_wci_ctrl_IsO
  assign CAN_FIRE_RL_app_appW4_wci_ctrl_IsO =
	     app_appW4_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     app_appW4_wci_cState == 3'd1 &&
	     app_appW4_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_app_appW4_wci_ctrl_IsO =
	     CAN_FIRE_RL_app_appW4_wci_ctrl_IsO ;

  // rule RL_app_appW4_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_app_appW4_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_app_appW4_wci_reqF_enq
  assign CAN_FIRE_RL_app_appW4_wci_reqF_enq =
	     app_appW4_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_app_appW4_wci_reqF_enq =
	     CAN_FIRE_RL_app_appW4_wci_reqF_enq ;

  // rule RL_app_appW4_wsi_Es_doAlways
  assign CAN_FIRE_RL_app_appW4_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsi_Es_doAlways = 1'd1 ;

  // rule RL_app_appW4_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_app_appW4_wsiS_reqFifo_enq =
	     app_appW4_wsiS_operateD && app_appW4_wsiS_peerIsReady &&
	     app_appW4_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_app_appW4_wsiS_reqFifo_enq ;

  // rule RL_app_appW4_wsipass_doMessagePush
  assign CAN_FIRE_RL_app_appW4_wsipass_doMessagePush =
	     app_appW4_wsiS_reqFifo$EMPTY_N &&
	     (app_appW4_smaCtrl[4] || app_appW4_wsiM_reqFifo_c_r != 2'd2) &&
	     app_appW4_wci_cState == 3'd2 &&
	     app_appW4_smaCtrl[3:0] == 4'h0 ;
  assign WILL_FIRE_RL_app_appW4_wsipass_doMessagePush =
	     CAN_FIRE_RL_app_appW4_wsipass_doMessagePush ;

  // rule RL_app_appW4_wmwt_messagePushPrecise
  assign CAN_FIRE_RL_app_appW4_wmwt_messagePushPrecise =
	     app_appW4_wmi_dhF_c_r != 2'd2 &&
	     app_appW4_wmi_operateD_333_AND_app_appW4_wmi_p_ETC___d6711 &&
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h2 ||
	      app_appW4_smaCtrl[3:0] == 4'h3) &&
	     app_appW4_wsiWordsRemain != 12'd0 &&
	     app_appW4_mesgReqValid &&
	     app_appW4_preciseBurst ;
  assign WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise =
	     CAN_FIRE_RL_app_appW4_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ;

  // rule RL_app_appW4_wmwt_requestPrecise
  assign CAN_FIRE_RL_app_appW4_wmwt_requestPrecise =
	     app_appW4_wmi_reqF_c_r != 2'd2 &&
	     app_appW4_wmi_mFlagF_c_r != 2'd2 &&
	     app_appW4_wmi_operateD &&
	     app_appW4_wmi_peerIsReady &&
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h2 ||
	      app_appW4_smaCtrl[3:0] == 4'h3) &&
	     app_appW4_readyToRequest &&
	     app_appW4_preciseBurst ;
  assign WILL_FIRE_RL_app_appW4_wmwt_requestPrecise =
	     CAN_FIRE_RL_app_appW4_wmwt_requestPrecise &&
	     !WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise ;

  // rule RL_app_appW4_wmwt_mesgBegin
  assign CAN_FIRE_RL_app_appW4_wmwt_mesgBegin =
	     app_appW4_wsiS_reqFifo$EMPTY_N && app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h2 ||
	      app_appW4_smaCtrl[3:0] == 4'h3) &&
	     !app_appW4_wmi_sThreadBusy_d &&
	     !app_appW4_wmi_sDataThreadBusy_d &&
	     !app_appW4_opcode[8] ;
  assign WILL_FIRE_RL_app_appW4_wmwt_mesgBegin =
	     CAN_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     !WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise &&
	     !WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ;

  // rule RL_app_appW4_wmwt_messagePushImprecise
  assign CAN_FIRE_RL_app_appW4_wmwt_messagePushImprecise =
	     app_appW4_wmi_reqF_c_r != 2'd2 &&
	     app_appW4_wmi_dhF_c_r != 2'd2 &&
	     app_appW4_wmi_operateD &&
	     app_appW4_wmi_peerIsReady &&
	     app_appW4_wsiS_reqFifo_i_notEmpty__563_AND_NOT_ETC___d6730 &&
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h2 ||
	      app_appW4_smaCtrl[3:0] == 4'h3) &&
	     app_appW4_readyToPush &&
	     app_appW4_impreciseBurst ;
  assign WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise =
	     CAN_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     !WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ;

  // rule RL_app_appW4_wmwt_doAbort
  assign CAN_FIRE_RL_app_appW4_wmwt_doAbort =
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h2 ||
	      app_appW4_smaCtrl[3:0] == 4'h3) &&
	     app_appW4_doAbort ;
  assign WILL_FIRE_RL_app_appW4_wmwt_doAbort =
	     CAN_FIRE_RL_app_appW4_wmwt_doAbort ;

  // rule RL_app_appW4_wmwt_messageFinalize
  assign CAN_FIRE_RL_app_appW4_wmwt_messageFinalize =
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h2 ||
	      app_appW4_smaCtrl[3:0] == 4'h3) &&
	     app_appW4_mesgLength[14] &&
	     !app_appW4_doAbort &&
	     (app_appW4_preciseBurst && app_appW4_wsiWordsRemain == 12'd0 ||
	      app_appW4_impreciseBurst && app_appW4_endOfMessage) ;
  assign WILL_FIRE_RL_app_appW4_wmwt_messageFinalize =
	     CAN_FIRE_RL_app_appW4_wmwt_messageFinalize ;

  // rule RL_app_appW4_wmi_reqF_incCtr
  assign CAN_FIRE_RL_app_appW4_wmi_reqF_incCtr =
	     ((app_appW4_wmi_reqF_c_r == 2'd0) ?
		app_appW4_wmi_reqF_x_wire$whas :
		app_appW4_wmi_reqF_c_r != 2'd1 ||
		app_appW4_wmi_reqF_x_wire$whas) &&
	     app_appW4_wmi_reqF_enqueueing$whas &&
	     !app_appW4_wmi_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr =
	     CAN_FIRE_RL_app_appW4_wmi_reqF_incCtr ;

  // rule RL_app_appW4_wmi_reqF_decCtr
  assign CAN_FIRE_RL_app_appW4_wmi_reqF_decCtr =
	     app_appW4_wmi_reqF_dequeueing$whas &&
	     !app_appW4_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr =
	     CAN_FIRE_RL_app_appW4_wmi_reqF_decCtr ;

  // rule RL_app_appW4_wmi_reqF_both
  assign CAN_FIRE_RL_app_appW4_wmi_reqF_both =
	     ((app_appW4_wmi_reqF_c_r == 2'd1) ?
		app_appW4_wmi_reqF_x_wire$whas :
		app_appW4_wmi_reqF_c_r != 2'd2 ||
		app_appW4_wmi_reqF_x_wire$whas) &&
	     app_appW4_wmi_reqF_dequeueing$whas &&
	     app_appW4_wmi_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wmi_reqF_both =
	     CAN_FIRE_RL_app_appW4_wmi_reqF_both ;

  // rule RL_app_appW4_wmi_mFlagF_incCtr
  assign CAN_FIRE_RL_app_appW4_wmi_mFlagF_incCtr =
	     ((app_appW4_wmi_mFlagF_c_r == 2'd0) ?
		app_appW4_wmi_mFlagF_x_wire$whas :
		app_appW4_wmi_mFlagF_c_r != 2'd1 ||
		app_appW4_wmi_mFlagF_x_wire$whas) &&
	     app_appW4_wmi_mFlagF_x_wire$whas &&
	     !app_appW4_wmi_mFlagF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr =
	     CAN_FIRE_RL_app_appW4_wmi_mFlagF_incCtr ;

  // rule RL_app_appW4_wmi_mFlagF_decCtr
  assign CAN_FIRE_RL_app_appW4_wmi_mFlagF_decCtr =
	     app_appW4_wmi_mFlagF_dequeueing$whas &&
	     !app_appW4_wmi_mFlagF_x_wire$whas ;
  assign WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr =
	     CAN_FIRE_RL_app_appW4_wmi_mFlagF_decCtr ;

  // rule RL_app_appW4_wmi_mFlagF_both
  assign CAN_FIRE_RL_app_appW4_wmi_mFlagF_both =
	     ((app_appW4_wmi_mFlagF_c_r == 2'd1) ?
		app_appW4_wmi_mFlagF_x_wire$whas :
		app_appW4_wmi_mFlagF_c_r != 2'd2 ||
		app_appW4_wmi_mFlagF_x_wire$whas) &&
	     app_appW4_wmi_mFlagF_dequeueing$whas &&
	     app_appW4_wmi_mFlagF_x_wire$whas ;
  assign WILL_FIRE_RL_app_appW4_wmi_mFlagF_both =
	     CAN_FIRE_RL_app_appW4_wmi_mFlagF_both ;

  // rule RL_app_appW4_wmi_dhF_incCtr
  assign CAN_FIRE_RL_app_appW4_wmi_dhF_incCtr =
	     ((app_appW4_wmi_dhF_c_r == 2'd0) ?
		MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		app_appW4_wmi_dhF_c_r != 2'd1 ||
		MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     !app_appW4_wmi_dhF_dequeueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr =
	     CAN_FIRE_RL_app_appW4_wmi_dhF_incCtr ;

  // rule RL_app_appW4_wmi_dhF_decCtr
  assign CAN_FIRE_RL_app_appW4_wmi_dhF_decCtr =
	     app_appW4_wmi_dhF_dequeueing$whas &&
	     !MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr =
	     CAN_FIRE_RL_app_appW4_wmi_dhF_decCtr ;

  // rule RL_app_appW4_wmi_dhF_both
  assign CAN_FIRE_RL_app_appW4_wmi_dhF_both =
	     ((app_appW4_wmi_dhF_c_r == 2'd1) ?
		MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 :
		app_appW4_wmi_dhF_c_r != 2'd2 ||
		MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1) &&
	     app_appW4_wmi_dhF_dequeueing$whas &&
	     MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign WILL_FIRE_RL_app_appW4_wmi_dhF_both =
	     CAN_FIRE_RL_app_appW4_wmi_dhF_both ;

  // rule RL_app_appW4_wmi_sThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_app_appW4_wmi_sThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wmi_sThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wmi_sDataThreadBusy_d__dreg_update
  assign CAN_FIRE_RL_app_appW4_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wmi_sDataThreadBusy_d__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr =
	     ((app_appW4_wsiM_reqFifo_c_r == 2'd0) ?
		app_appW4_wsiM_reqFifo_enqueueing$whas :
		app_appW4_wsiM_reqFifo_c_r != 2'd1 ||
		app_appW4_wsiM_reqFifo_enqueueing$whas) &&
	     app_appW4_wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_app_appW4_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr ;

  // rule RL_app_appW4_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_app_appW4_wsiM_reqFifo_deq &&
	     !app_appW4_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr ;

  // rule RL_app_appW4_wsiM_reqFifo_both
  assign CAN_FIRE_RL_app_appW4_wsiM_reqFifo_both =
	     ((app_appW4_wsiM_reqFifo_c_r == 2'd1) ?
		app_appW4_wsiM_reqFifo_enqueueing$whas :
		app_appW4_wsiM_reqFifo_c_r != 2'd2 ||
		app_appW4_wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_app_appW4_wsiM_reqFifo_deq &&
	     app_appW4_wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both =
	     CAN_FIRE_RL_app_appW4_wsiM_reqFifo_both ;

  // rule RL_app_appW4_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_app_appW4_wsiS_reqFifo__updateLevelCounter =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 !=
	     app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW4_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_app_appW4_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_app_appW4_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_app_appW4_wsiS_reqFifo_reset =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ||
	     app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW4_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_app_appW4_wsiS_reqFifo_reset ;

  // rule RL_app_appW4_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW4_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW4_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wmi_Em_doAlways
  assign CAN_FIRE_RL_app_appW4_wmi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wmi_Em_doAlways = 1'd1 ;

  // rule RL_app_appW4_wmi_respAdvance
  assign CAN_FIRE_RL_app_appW4_wmi_respAdvance =
	     app_appW4_wmi_operateD && app_appW4_wmi_peerIsReady &&
	     inf_dp1_wmi_wmi_respF_q_0[33:32] != 2'd0 ;
  assign WILL_FIRE_RL_app_appW4_wmi_respAdvance =
	     CAN_FIRE_RL_app_appW4_wmi_respAdvance ;

  // rule RL_app_appW4_wmrd_mesgBodyResponse
  assign CAN_FIRE_RL_app_appW4_wmrd_mesgBodyResponse =
	     app_appW4_wmi_respF_i_notEmpty__628_AND_app_ap_ETC___d6633 &&
	     app_appW4_wci_cState == 3'd2 &&
	     (app_appW4_smaCtrl[3:0] == 4'h1 ||
	      app_appW4_smaCtrl[3:0] == 4'h4 ||
	      app_appW4_smaCtrl[3:0] == 4'h9) &&
	     app_appW4_unrollCnt != 16'd0 ;
  assign WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgBodyResponse ;

  // rule RL_app_appW4_wci_cfwr
  assign CAN_FIRE_RL_app_appW4_wci_cfwr =
	     app_appW4_wci_reqF$EMPTY_N && app_appW4_wci_respF_c_r != 2'd2 &&
	     app_appW4_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_app_appW4_wci_cfwr =
	     CAN_FIRE_RL_app_appW4_wci_cfwr &&
	     !WILL_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     !WILL_FIRE_RL_app_appW4_wci_ctl_op_complete ;

  // rule RL_app_appW4_wci_ctl_op_complete
  assign CAN_FIRE_RL_app_appW4_wci_ctl_op_complete =
	     app_appW4_wci_respF_c_r != 2'd2 && app_appW4_wci_ctlOpActive &&
	     app_appW4_wci_ctlAckReg ;
  assign WILL_FIRE_RL_app_appW4_wci_ctl_op_complete =
	     CAN_FIRE_RL_app_appW4_wci_ctl_op_complete ;

  // rule RL_app_appW4_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_app_appW4_wci_reqF__updateLevelCounter =
	     (app_appW4_wci_wciReq$wget[59:57] != 3'd0) !=
	     app_appW4_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_app_appW4_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_app_appW4_wci_reqF__updateLevelCounter ;

  // rule RL_app_appW4_wci_respF_incCtr
  assign CAN_FIRE_RL_app_appW4_wci_respF_incCtr =
	     ((app_appW4_wci_respF_c_r == 2'd0) ?
		app_appW4_wci_respF_x_wire$whas :
		app_appW4_wci_respF_c_r != 2'd1 ||
		app_appW4_wci_respF_x_wire$whas) &&
	     app_appW4_wci_respF_enqueueing$whas &&
	     !(app_appW4_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_app_appW4_wci_respF_incCtr =
	     CAN_FIRE_RL_app_appW4_wci_respF_incCtr ;

  // rule RL_app_appW4_wci_respF_decCtr
  assign CAN_FIRE_RL_app_appW4_wci_respF_decCtr =
	     app_appW4_wci_respF_c_r != 2'd0 &&
	     !app_appW4_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wci_respF_decCtr =
	     CAN_FIRE_RL_app_appW4_wci_respF_decCtr ;

  // rule RL_app_appW4_wci_respF_both
  assign CAN_FIRE_RL_app_appW4_wci_respF_both =
	     ((app_appW4_wci_respF_c_r == 2'd1) ?
		app_appW4_wci_respF_x_wire$whas :
		app_appW4_wci_respF_c_r != 2'd2 ||
		app_appW4_wci_respF_x_wire$whas) &&
	     app_appW4_wci_respF_c_r != 2'd0 &&
	     app_appW4_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_app_appW4_wci_respF_both =
	     CAN_FIRE_RL_app_appW4_wci_respF_both ;

  // rule RL_app_appW4_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_app_appW4_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_app_appW4_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_app_appW4_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_app_appW4_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_app_appW4_respF_portA
  assign CAN_FIRE_RL_app_appW4_respF_portA = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_respF_portA = 1'd1 ;

  // rule RL_app_appW4_respF_portB
  assign CAN_FIRE_RL_app_appW4_respF_portB = 1'd1 ;
  assign WILL_FIRE_RL_app_appW4_respF_portB = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_app_appW2_endOfMessage$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_app_appW2_impreciseBurst$write_1__SEL_3 =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     !app_appW2_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_app_appW2_lastMesg$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ;
  assign MUX_app_appW2_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse &&
	     app_appW2_unrollCnt == 16'd1 ;
  assign MUX_app_appW2_mesgLength$write_1__SEL_4 =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     app_appW2_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_app_appW2_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_complete &&
	     app_appW2_wci_illegalEdge ;
  assign MUX_app_appW2_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     (app_appW2_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      app_appW2_wci_cState != 3'd0 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      app_appW2_wci_cState != 3'd1 &&
	      app_appW2_wci_cState != 3'd3 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      app_appW2_wci_cState != 3'd2 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      app_appW2_wci_cState != 3'd3 &&
	      app_appW2_wci_cState != 3'd2 &&
	      app_appW2_wci_cState != 3'd1 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_app_appW2_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wci_respF_incCtr &&
	     app_appW2_wci_respF_c_r == 2'd0 ;
  assign MUX_app_appW2_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wci_respF_incCtr &&
	     app_appW2_wci_respF_c_r == 2'd1 ;
  assign MUX_app_appW2_wmi_dhF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr &&
	     app_appW2_wmi_dhF_c_r == 2'd0 ;
  assign MUX_app_appW2_wmi_dhF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr &&
	     app_appW2_wmi_dhF_c_r == 2'd1 ;
  assign MUX_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr &&
	     app_appW2_wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr &&
	     app_appW2_wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest && x__h181099 ;
  assign MUX_app_appW2_wmi_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr &&
	     app_appW2_wmi_reqF_c_r == 2'd0 ;
  assign MUX_app_appW2_wmi_reqF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr &&
	     app_appW2_wmi_reqF_c_r == 2'd1 ;
  assign MUX_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr &&
	     app_appW2_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr &&
	     app_appW2_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise ;
  assign MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     app_appW2_smaCtrl[3:0] == 4'h3 ;
  assign MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_app_appW2_wsipass_doMessagePush &&
	     !app_appW2_smaCtrl[4] ;
  assign MUX_app_appW3_mesgRdCount$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wmrd_mesgBodyResponse &&
	     app_appW3_unrollCnt == 16'd1 ;
  assign MUX_app_appW3_mesgWtCount$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wmwt_mesg_ingress &&
	     app_appW3_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 =
	     WILL_FIRE_RL_app_appW3_rdSer_body ||
	     WILL_FIRE_RL_app_appW3_rdSer_begin ;
  assign MUX_app_appW3_rdSerEmpty$write_1__SEL_1 =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (app_appW3_rdSerEmpty || app_appW3_rdSerPos == 2'd0) ;
  assign MUX_app_appW3_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_complete &&
	     app_appW3_wci_illegalEdge ;
  assign MUX_app_appW3_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     (app_appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      app_appW3_wci_cState != 3'd0 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      app_appW3_wci_cState != 3'd1 &&
	      app_appW3_wci_cState != 3'd3 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      app_appW3_wci_cState != 3'd2 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      app_appW3_wci_cState != 3'd3 &&
	      app_appW3_wci_cState != 3'd2 &&
	      app_appW3_wci_cState != 3'd1 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_app_appW3_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wci_respF_incCtr &&
	     app_appW3_wci_respF_c_r == 2'd0 ;
  assign MUX_app_appW3_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wci_respF_incCtr &&
	     app_appW3_wci_respF_c_r == 2'd1 ;
  assign MUX_app_appW3_wide16Fa$enq_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wrtSer_begin &&
	     (app_appW3_wrtSerPos == 2'd3 ||
	      app_appW3_metaWF$D_OUT[23:0] == 24'd0) ;
  assign MUX_app_appW3_wmemi_dhF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr &&
	     app_appW3_wmemi_dhF_c_r == 2'd0 ;
  assign MUX_app_appW3_wmemi_dhF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr &&
	     app_appW3_wmemi_dhF_c_r == 2'd1 ;
  assign MUX_app_appW3_wmemi_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr &&
	     app_appW3_wmemi_reqF_c_r == 2'd0 ;
  assign MUX_app_appW3_wmemi_reqF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr &&
	     app_appW3_wmemi_reqF_c_r == 2'd1 ;
  assign MUX_app_appW3_wrtSerStage$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd0 ;
  assign MUX_app_appW3_wrtSerStage_1$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd1 ;
  assign MUX_app_appW3_wrtSerStage_2$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd2 ;
  assign MUX_app_appW3_wrtSerStage_3$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd3 ;
  assign MUX_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr &&
	     app_appW3_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr &&
	     app_appW3_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq &&
	     app_appW3_wsiS_reqFifo$FULL_N ;
  assign MUX_app_appW4_endOfMessage$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_app_appW4_impreciseBurst$write_1__SEL_3 =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     !app_appW4_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_app_appW4_lastMesg$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ;
  assign MUX_app_appW4_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse &&
	     app_appW4_unrollCnt == 16'd1 ;
  assign MUX_app_appW4_mesgLength$write_1__SEL_4 =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     app_appW4_wsiS_reqFifo$D_OUT[56] ;
  assign MUX_app_appW4_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_complete &&
	     app_appW4_wci_illegalEdge ;
  assign MUX_app_appW4_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     (app_appW4_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      app_appW4_wci_cState != 3'd0 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      app_appW4_wci_cState != 3'd1 &&
	      app_appW4_wci_cState != 3'd3 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      app_appW4_wci_cState != 3'd2 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      app_appW4_wci_cState != 3'd3 &&
	      app_appW4_wci_cState != 3'd2 &&
	      app_appW4_wci_cState != 3'd1 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_app_appW4_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wci_respF_incCtr &&
	     app_appW4_wci_respF_c_r == 2'd0 ;
  assign MUX_app_appW4_wci_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wci_respF_incCtr &&
	     app_appW4_wci_respF_c_r == 2'd1 ;
  assign MUX_app_appW4_wmi_dhF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr &&
	     app_appW4_wmi_dhF_c_r == 2'd0 ;
  assign MUX_app_appW4_wmi_dhF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr &&
	     app_appW4_wmi_dhF_c_r == 2'd1 ;
  assign MUX_app_appW4_wmi_mFlagF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr &&
	     app_appW4_wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_app_appW4_wmi_mFlagF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr &&
	     app_appW4_wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest && x__h228511 ;
  assign MUX_app_appW4_wmi_reqF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr &&
	     app_appW4_wmi_reqF_c_r == 2'd0 ;
  assign MUX_app_appW4_wmi_reqF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr &&
	     app_appW4_wmi_reqF_c_r == 2'd1 ;
  assign MUX_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr &&
	     app_appW4_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr &&
	     app_appW4_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise ;
  assign MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 &&
	     app_appW4_smaCtrl[3:0] == 4'h3 ;
  assign MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_app_appW4_wsipass_doMessagePush &&
	     !app_appW4_smaCtrl[4] ;
  assign MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq &&
	     app_appW4_wsiS_reqFifo$FULL_N ;
  assign MUX_inf_dp0_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_bml_fba &&
	     (inf_dp0_bml_fabAvail && !inf_dp0_bml_remStart ||
	      !inf_dp0_bml_fabAvail && inf_dp0_bml_remStart) ;
  assign MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance &&
	     inf_dp0_dpControl[1:0] == 2'd1 ;
  assign MUX_inf_dp0_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_bml_lbar &&
	     (IF_inf_dp0_bml_dpControl_wget__920_BITS_1_TO_0_ETC___d1997 &&
	      !inf_dp0_bml_lclBufStart ||
	      CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q13 &&
	      inf_dp0_bml_lclBufStart) ;
  assign MUX_inf_dp0_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_bml_lbcf &&
	     (inf_dp0_bml_lclBufDone_944_AND_IF_inf_dp0_bml__ETC___d7164 ||
	      NOT_inf_dp0_bml_lclBufDone_944_011_AND_IF_inf__ETC___d2024) ;
  assign MUX_inf_dp0_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_bml_lcredit &&
	     (inf_dp0_bml_lclBufDone && !inf_dp0_bml_remStart ||
	      !inf_dp0_bml_lclBufDone && inf_dp0_bml_remStart) ;
  assign MUX_inf_dp0_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_inf_dp0_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_inf_dp0_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7159 ;
  assign MUX_inf_dp0_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_inf_dp0_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd0 ;
  assign MUX_inf_dp0_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_inf_dp0_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7162 ;
  assign MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_inf_dp0_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd1 ;
  assign MUX_inf_dp0_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_inf_dp0_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7160 ;
  assign MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_inf_dp0_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd2 ;
  assign MUX_inf_dp0_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_inf_dp0_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7161 ;
  assign MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_inf_dp0_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd3 ;
  assign MUX_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_tlpRcv &&
	     inf_dp0_tlp_inF_first__96_BIT_152_043_AND_NOT__ETC___d1068 ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ;
  assign MUX_inf_dp0_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ;
  assign MUX_inf_dp0_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ;
  assign MUX_inf_dp0_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp &&
	     inf_dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_inf_dp0_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader && _dfoo5 ;
  assign MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header &&
	     !inf_dp0_tlp_mRespF_first__64_BITS_71_TO_62_54__ETC___d7113 ;
  assign MUX_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 =
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody ;
  assign MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 &&
	     inf_dp0_tlp_outDwRemain_81_ULE_4___d7502 ;
  assign MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody &&
	     inf_dp0_tlp_outDwRemain_81_ULE_4___d7502 &&
	     inf_dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4 =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader &&
	     inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     inf_dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_inf_dp0_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete &&
	     inf_dp0_wci_illegalEdge ;
  assign MUX_inf_dp0_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     (inf_dp0_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      inf_dp0_wci_cState != 3'd0 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      inf_dp0_wci_cState != 3'd1 &&
	      inf_dp0_wci_cState != 3'd3 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      inf_dp0_wci_cState != 3'd2 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      inf_dp0_wci_cState != 3'd3 &&
	      inf_dp0_wci_cState != 3'd2 &&
	      inf_dp0_wci_cState != 3'd1 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_inf_dp0_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wci_respF_incCtr &&
	     inf_dp0_wci_respF_c_r == 2'd0 ;
  assign MUX_inf_dp0_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wci_respF_incCtr &&
	     inf_dp0_wci_respF_c_r == 2'd1 ;
  assign MUX_inf_dp0_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ;
  assign MUX_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;
  assign MUX_inf_dp0_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1 &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ;
  assign MUX_inf_dp0_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doDwell &&
	     inf_dp0_wmi_bufDwell == 2'd1 ;
  assign MUX_inf_dp0_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq &&
	     inf_dp0_wmi_wmi_dhF$FULL_N ;
  assign MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq &&
	     inf_dp0_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[27] &&
	     inf_dp0_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq &&
	     inf_dp0_wmi_wmi_reqF$FULL_N ;
  assign MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr &&
	     inf_dp0_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr &&
	     inf_dp0_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_inf_dp0_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_inf_dp0_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ;
  assign MUX_inf_dp1_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_bml_fba &&
	     (inf_dp1_bml_fabAvail && !inf_dp1_bml_remStart ||
	      !inf_dp1_bml_fabAvail && inf_dp1_bml_remStart) ;
  assign MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance &&
	     inf_dp1_dpControl[1:0] == 2'd1 ;
  assign MUX_inf_dp1_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_bml_lbar &&
	     (IF_inf_dp1_bml_dpControl_wget__106_BITS_1_TO_0_ETC___d4183 &&
	      !inf_dp1_bml_lclBufStart ||
	      CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q21 &&
	      inf_dp1_bml_lclBufStart) ;
  assign MUX_inf_dp1_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_bml_lbcf &&
	     (inf_dp1_bml_lclBufDone_130_AND_IF_inf_dp1_bml__ETC___d7192 ||
	      NOT_inf_dp1_bml_lclBufDone_130_197_AND_IF_inf__ETC___d4210) ;
  assign MUX_inf_dp1_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_bml_lcredit &&
	     (inf_dp1_bml_lclBufDone && !inf_dp1_bml_remStart ||
	      !inf_dp1_bml_lclBufDone && inf_dp1_bml_remStart) ;
  assign MUX_inf_dp1_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_inf_dp1_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_inf_dp1_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7187 ;
  assign MUX_inf_dp1_bram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_inf_dp1_bram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd0 ;
  assign MUX_inf_dp1_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_inf_dp1_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7188 ;
  assign MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_inf_dp1_bram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd1 ;
  assign MUX_inf_dp1_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_inf_dp1_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7189 ;
  assign MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_inf_dp1_bram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd2 ;
  assign MUX_inf_dp1_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_inf_dp1_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7190 ;
  assign MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_inf_dp1_bram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd3 ;
  assign MUX_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_tlpRcv &&
	     inf_dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_ETC___d3254 ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ;
  assign MUX_inf_dp1_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ;
  assign MUX_inf_dp1_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ;
  assign MUX_inf_dp1_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp &&
	     inf_dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ;
  assign MUX_inf_dp1_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ;
  assign MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader && _dfoo15 ;
  assign MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header &&
	     !inf_dp1_tlp_mRespF_first__854_BITS_71_TO_62_94_ETC___d7115 ;
  assign MUX_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 =
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody ;
  assign MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 &&
	     inf_dp1_tlp_outDwRemain_970_ULE_4___d7507 ;
  assign MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody &&
	     inf_dp1_tlp_outDwRemain_970_ULE_4___d7507 &&
	     inf_dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4 =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader &&
	     inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     inf_dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_inf_dp1_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete &&
	     inf_dp1_wci_illegalEdge ;
  assign MUX_inf_dp1_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     (inf_dp1_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      inf_dp1_wci_cState != 3'd0 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      inf_dp1_wci_cState != 3'd1 &&
	      inf_dp1_wci_cState != 3'd3 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      inf_dp1_wci_cState != 3'd2 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      inf_dp1_wci_cState != 3'd3 &&
	      inf_dp1_wci_cState != 3'd2 &&
	      inf_dp1_wci_cState != 3'd1 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_inf_dp1_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wci_respF_incCtr &&
	     inf_dp1_wci_respF_c_r == 2'd0 ;
  assign MUX_inf_dp1_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wci_respF_incCtr &&
	     inf_dp1_wci_respF_c_r == 2'd1 ;
  assign MUX_inf_dp1_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ;
  assign MUX_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;
  assign MUX_inf_dp1_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ;
  assign MUX_inf_dp1_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doDwell &&
	     inf_dp1_wmi_bufDwell == 2'd1 ;
  assign MUX_inf_dp1_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq &&
	     inf_dp1_wmi_wmi_dhF$FULL_N ;
  assign MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq &&
	     inf_dp1_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[27] &&
	     inf_dp1_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq &&
	     inf_dp1_wmi_wmi_reqF$FULL_N ;
  assign MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr &&
	     inf_dp1_wmi_wmi_respF_c_r == 2'd0 ;
  assign MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr &&
	     inf_dp1_wmi_wmi_respF_c_r == 2'd1 ;
  assign MUX_inf_dp1_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 ;
  assign MUX_inf_dp1_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ;
  assign MUX_app_appW2_fabRespCredit_value$write_1__VAL_2 =
	     app_appW2_fabRespCredit_value +
	     (CAN_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ?
		b__h177740 :
		12'd0) +
	     (CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_app_appW2_fabWordsRemain$write_1__VAL_1 =
	     (app_appW2_wmi_sFlagReg[23:0] == 24'd0) ?
	       14'd1 :
	       app_appW2_wmi_sFlagReg[15:2] ;
  assign MUX_app_appW2_fabWordsRemain$write_1__VAL_2 =
	     app_appW2_fabWordsRemain - app_appW2_fabWordsCurReq ;
  assign MUX_app_appW2_mesgCount$write_1__VAL_1 =
	     app_appW2_mesgCount + 32'd1 ;
  assign MUX_app_appW2_mesgLength$write_1__VAL_3 = { 1'd1, mlp1B__h183229 } ;
  assign MUX_app_appW2_mesgLength$write_1__VAL_4 =
	     (app_appW2_wsiS_reqFifo$D_OUT[11:8] == 4'd0) ?
	       15'd16384 :
	       { 1'd1, app_appW2_wsiS_reqFifo$D_OUT[55:44], 2'd0 } ;
  assign MUX_app_appW2_mesgReqAddr$write_1__VAL_2 =
	     app_appW2_mesgReqAddr +
	     { app_appW2_fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_app_appW2_opcode$write_1__VAL_3 =
	     { 1'd1, app_appW2_wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_app_appW2_thisMesg$write_1__VAL_1 =
	     { app_appW2_mesgCount[7:0], x__h182398, x_length__h182394 } ;
  assign MUX_app_appW2_thisMesg$write_1__VAL_2 =
	     { app_appW2_mesgCount[7:0],
	       app_appW2_wmi_sFlagReg[31:24],
	       app_appW2_wmi_sFlagReg[15:0] } ;
  assign MUX_app_appW2_unrollCnt$write_1__VAL_1 =
	     (app_appW2_wmi_sFlagReg[23:0] == 24'd0) ?
	       16'd1 :
	       app_appW2_wmi_sFlagReg[17:2] ;
  assign MUX_app_appW2_unrollCnt$write_1__VAL_2 =
	     app_appW2_unrollCnt - 16'd1 ;
  assign MUX_app_appW2_wci_illegalEdge$write_1__VAL_2 =
	     app_appW2_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     app_appW2_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     app_appW2_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_app_appW2_wci_respF_c_r$write_1__VAL_1 =
	     app_appW2_wci_respF_c_r + 2'd1 ;
  assign MUX_app_appW2_wci_respF_c_r$write_1__VAL_2 =
	     app_appW2_wci_respF_c_r - 2'd1 ;
  assign MUX_app_appW2_wci_respF_q_0$write_1__VAL_1 =
	     (app_appW2_wci_respF_c_r == 2'd1) ?
	       MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 :
	       app_appW2_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_app_appW2_wci_ctl_op_complete or
	  MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_app_appW2_wci_cfrd or
	  MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wci_ctl_op_complete:
	  MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 =
	      MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_app_appW2_wci_cfrd:
	  MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 =
	      MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wci_cfwr:
	  MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_app_appW2_wci_respF_q_1$write_1__VAL_1 =
	     (app_appW2_wci_respF_c_r == 2'd2) ?
	       MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_1 =
	     app_appW2_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_app_appW2_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, x_data__h184661 } ;
  assign MUX_app_appW2_wmi_dhF_c_r$write_1__VAL_1 =
	     app_appW2_wmi_dhF_c_r + 2'd1 ;
  assign MUX_app_appW2_wmi_dhF_c_r$write_1__VAL_2 =
	     app_appW2_wmi_dhF_c_r - 2'd1 ;
  assign MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_1 =
	     (app_appW2_wmi_dhF_c_r == 2'd1) ?
	       MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2 :
	       app_appW2_wmi_dhF_q_1 ;
  assign MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise ?
	       MUX_app_appW2_wmi_dhF_x_wire$wset_1__VAL_1 :
	       MUX_app_appW2_wmi_dhF_x_wire$wset_1__VAL_2 ;
  assign MUX_app_appW2_wmi_dhF_q_1$write_1__VAL_1 =
	     (app_appW2_wmi_dhF_c_r == 2'd2) ?
	       MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2 :
	       38'h0AAAAAAAAA ;
  assign MUX_app_appW2_wmi_dhF_x_wire$wset_1__VAL_1 =
	     { 1'd1,
	       app_appW2_wsiWordsRemain == 12'd1,
	       app_appW2_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_app_appW2_wmi_dhF_x_wire$wset_1__VAL_2 =
	     { 1'd1,
	       app_appW2_wsiS_reqFifo$D_OUT[57],
	       app_appW2_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_app_appW2_wmi_mFlagF_c_r$write_1__VAL_1 =
	     app_appW2_wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_app_appW2_wmi_mFlagF_c_r$write_1__VAL_2 =
	     app_appW2_wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1 =
	     (app_appW2_wmi_mFlagF_c_r == 2'd1) ?
	       value__h169350 :
	       app_appW2_wmi_mFlagF_q_1 ;
  assign MUX_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1 =
	     (app_appW2_wmi_mFlagF_c_r == 2'd2) ? value__h169350 : 32'd0 ;
  assign MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { x__h182398, mesgMetaF_length__h183375 } ;
  assign MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3 =
	     { x__h182398, mesgMetaF_length__h182639 } ;
  assign MUX_app_appW2_wmi_reqF_c_r$write_1__VAL_1 =
	     app_appW2_wmi_reqF_c_r + 2'd1 ;
  assign MUX_app_appW2_wmi_reqF_c_r$write_1__VAL_2 =
	     app_appW2_wmi_reqF_c_r - 2'd1 ;
  assign MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_1 =
	     (app_appW2_wmi_reqF_c_r == 2'd1) ?
	       MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 :
	       app_appW2_wmi_reqF_q_1 ;
  always@(WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest or
	  MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_app_appW2_wmwt_requestPrecise or
	  MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise or
	  MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest:
	  MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_app_appW2_wmwt_requestPrecise:
	  MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise:
	  MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
	      MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3;
      default: MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_app_appW2_wmi_reqF_q_1$write_1__VAL_1 =
	     (app_appW2_wmi_reqF_c_r == 2'd2) ?
	       MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 :
	       32'd178956970 ;
  assign MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5,
	       x__h181099,
	       1'b0,
	       app_appW2_mesgReqAddr,
	       app_appW2_fabWordsCurReq[11:0] } ;
  assign MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 20'd229376, bl__h182501 } ;
  assign MUX_app_appW2_wmi_reqF_x_wire$wset_1__VAL_3 =
	     { 4'd3,
	       app_appW2_wsiS_reqFifo$D_OUT[57],
	       1'b0,
	       addr__h183245,
	       12'd1 } ;
  assign MUX_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     app_appW2_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     app_appW2_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (app_appW2_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       app_appW2_wsiM_reqFifo_q_1 ;
  assign MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       app_appW2_wsiS_reqFifo$D_OUT :
	       MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (app_appW2_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (app_appW2_respF_rCache[73] &&
	      app_appW2_respF_rCache[72:61] == app_appW2_respF_rRdPtr) ?
	       app_appW2_respF_rCache[60:0] :
	       app_appW2_respF_memory$DOB ;
  assign MUX_app_appW2_wsiWordsRemain$write_1__VAL_2 =
	     app_appW2_wsiWordsRemain - 12'd1 ;
  assign MUX_app_appW3_dlyRAG$write_1__VAL_1 = app_appW3_dlyRAG + 23'd1 ;
  assign MUX_app_appW3_dlyReadCredit_value$write_1__VAL_2 =
	     app_appW3_dlyReadCredit_value +
	     (WILL_FIRE_RL_app_appW3_delay_read_req ? 8'd255 : 8'd0) +
	     (CAN_FIRE_RL_app_appW3_delay_Fb2Fc ? 8'd1 : 8'd0) ;
  assign MUX_app_appW3_dlyReadyToWrite_value$write_1__VAL_2 =
	     app_appW3_dlyReadyToWrite_value +
	     (app_appW3_dlyReadyToWrite_acc_v1$whas ? 16'd1 : 16'd0) +
	     (CAN_FIRE_RL_app_appW3_delay_write_req ? 16'd65535 : 16'd0) ;
  assign MUX_app_appW3_dlyWAG$write_1__VAL_1 = app_appW3_dlyWAG + 23'd1 ;
  assign MUX_app_appW3_dlyWordsStored_value$write_1__VAL_2 =
	     app_appW3_dlyWordsStored_value +
	     (CAN_FIRE_RL_app_appW3_delay_write_req ? 25'd1 : 25'd0) +
	     (WILL_FIRE_RL_app_appW3_delay_read_req ? 25'd33554431 : 25'd0) ;
  assign MUX_app_appW3_mesgRdCount$write_1__VAL_1 =
	     app_appW3_mesgRdCount + 32'd1 ;
  assign MUX_app_appW3_mesgWtCount$write_1__VAL_1 =
	     app_appW3_mesgWtCount + 32'd1 ;
  assign MUX_app_appW3_rdSerPos$write_1__VAL_1 = app_appW3_rdSerPos + 2'd1 ;
  assign MUX_app_appW3_rdSerUnroll$write_1__VAL_2 =
	     app_appW3_rdSerUnroll - 16'd1 ;
  assign MUX_app_appW3_rdSyncWord$write_1__VAL_1 =
	     app_appW3_rdSerPos != 2'd3 && v__h206282[23:0] == 24'd0 ;
  assign MUX_app_appW3_rdSyncWord$write_1__VAL_2 =
	     app_appW3_rdSerPos != 2'd3 && app_appW3_rdSerUnroll == 16'd1 ;
  assign MUX_app_appW3_unrollCnt$write_1__VAL_1 =
	     (app_appW3_metaRF$D_OUT[23:0] == 24'd0) ?
	       16'd1 :
	       app_appW3_metaRF$D_OUT[17:2] ;
  assign MUX_app_appW3_unrollCnt$write_1__VAL_2 =
	     app_appW3_unrollCnt - 16'd1 ;
  assign MUX_app_appW3_wci_illegalEdge$write_1__VAL_2 =
	     app_appW3_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     app_appW3_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     app_appW3_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_app_appW3_wci_respF_c_r$write_1__VAL_1 =
	     app_appW3_wci_respF_c_r + 2'd1 ;
  assign MUX_app_appW3_wci_respF_c_r$write_1__VAL_2 =
	     app_appW3_wci_respF_c_r - 2'd1 ;
  assign MUX_app_appW3_wci_respF_q_0$write_1__VAL_1 =
	     (app_appW3_wci_respF_c_r == 2'd1) ?
	       MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 :
	       app_appW3_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_app_appW3_wci_ctl_op_complete or
	  MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_app_appW3_wci_cfrd or
	  MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wci_ctl_op_complete:
	  MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 =
	      MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_app_appW3_wci_cfrd:
	  MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 =
	      MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wci_cfwr:
	  MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_app_appW3_wci_respF_q_1$write_1__VAL_1 =
	     (app_appW3_wci_respF_c_r == 2'd2) ?
	       MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_1 =
	     app_appW3_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_app_appW3_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, x_data__h208637 } ;
  always@(app_appW3_wrtSerPos or
	  IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5763 or
	  x__h204543 or x__h204570)
  begin
    case (app_appW3_wrtSerPos)
      2'd0: MUX_app_appW3_wide16Fa$enq_1__VAL_1 = x__h204543;
      2'd1: MUX_app_appW3_wide16Fa$enq_1__VAL_1 = x__h204570;
      default: MUX_app_appW3_wide16Fa$enq_1__VAL_1 =
		   IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5763;
    endcase
  end
  always@(app_appW3_wrtSerPos or
	  IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5792 or
	  x__h205193 or x__h205217)
  begin
    case (app_appW3_wrtSerPos)
      2'd0: MUX_app_appW3_wide16Fa$enq_1__VAL_2 = x__h205193;
      2'd1: MUX_app_appW3_wide16Fa$enq_1__VAL_2 = x__h205217;
      default: MUX_app_appW3_wide16Fa$enq_1__VAL_2 =
		   IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5792;
    endcase
  end
  assign MUX_app_appW3_wmemi_dhF_c_r$write_1__VAL_1 =
	     app_appW3_wmemi_dhF_c_r + 2'd1 ;
  assign MUX_app_appW3_wmemi_dhF_c_r$write_1__VAL_2 =
	     app_appW3_wmemi_dhF_c_r - 2'd1 ;
  assign MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_1 =
	     (app_appW3_wmemi_dhF_c_r == 2'd1) ?
	       MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 :
	       app_appW3_wmemi_dhF_q_1 ;
  assign MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 =
	     { 2'd3, app_appW3_wide16Fa$D_OUT, 16'd65535 } ;
  assign MUX_app_appW3_wmemi_dhF_q_1$write_1__VAL_1 =
	     (app_appW3_wmemi_dhF_c_r == 2'd2) ?
	       MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 :
	       146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_app_appW3_wmemi_reqF_c_r$write_1__VAL_1 =
	     app_appW3_wmemi_reqF_c_r + 2'd1 ;
  assign MUX_app_appW3_wmemi_reqF_c_r$write_1__VAL_2 =
	     app_appW3_wmemi_reqF_c_r - 2'd1 ;
  assign MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_1 =
	     (app_appW3_wmemi_reqF_c_r == 2'd1) ?
	       MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 :
	       app_appW3_wmemi_reqF_q_1 ;
  assign MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_app_appW3_delay_write_req ?
	       MUX_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_1 :
	       MUX_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_2 ;
  assign MUX_app_appW3_wmemi_reqF_q_1$write_1__VAL_1 =
	     (app_appW3_wmemi_reqF_c_r == 2'd2) ?
	       MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 :
	       52'h0AAAAAAAAAAAA ;
  assign MUX_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd3, addr__h205617, 12'd1 } ;
  assign MUX_app_appW3_wmemi_reqF_x_wire$wset_1__VAL_2 =
	     { 4'd5, addr__h205967, 12'd1 } ;
  assign MUX_app_appW3_wrtSerPos$write_1__VAL_1 =
	     (app_appW3_metaWF$D_OUT[23:0] == 24'd0) ?
	       2'd0 :
	       app_appW3_wrtSerPos_725_PLUS_1___d7933 ;
  assign MUX_app_appW3_wrtSerPos$write_1__VAL_2 =
	     (app_appW3_wrtSerUnroll == 16'd1) ?
	       2'd0 :
	       app_appW3_wrtSerPos_725_PLUS_1___d7933 ;
  assign MUX_app_appW3_wrtSerUnroll$write_1__VAL_2 =
	     app_appW3_wrtSerUnroll - 16'd1 ;
  assign MUX_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     app_appW3_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     app_appW3_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (app_appW3_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       app_appW3_wsiM_reqFifo_q_1 ;
  assign MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     WILL_FIRE_RL_app_appW3_wmrd_mesgBodyResponse ?
	       MUX_app_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1 :
	       app_appW3_wsiS_reqFifo$D_OUT ;
  assign MUX_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (app_appW3_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_app_appW3_wsiM_reqFifo_x_wire$wset_1__VAL_1 =
	     { 3'd1,
	       app_appW3_unrollCnt == 16'd1,
	       1'd1,
	       x_burstLength__h208154,
	       app_appW3_mesgRF$D_OUT,
	       x_byteEn__h208155,
	       app_appW3_readMeta[31:24] } ;
  assign MUX_app_appW4_fabRespCredit_value$write_1__VAL_2 =
	     app_appW4_fabRespCredit_value +
	     (CAN_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ?
		b__h225152 :
		12'd0) +
	     (CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_app_appW4_fabWordsRemain$write_1__VAL_1 =
	     (app_appW4_wmi_sFlagReg[23:0] == 24'd0) ?
	       14'd1 :
	       app_appW4_wmi_sFlagReg[15:2] ;
  assign MUX_app_appW4_fabWordsRemain$write_1__VAL_2 =
	     app_appW4_fabWordsRemain - app_appW4_fabWordsCurReq ;
  assign MUX_app_appW4_mesgCount$write_1__VAL_1 =
	     app_appW4_mesgCount + 32'd1 ;
  assign MUX_app_appW4_mesgLength$write_1__VAL_3 = { 1'd1, mlp1B__h230641 } ;
  assign MUX_app_appW4_mesgLength$write_1__VAL_4 =
	     (app_appW4_wsiS_reqFifo$D_OUT[11:8] == 4'd0) ?
	       15'd16384 :
	       { 1'd1, app_appW4_wsiS_reqFifo$D_OUT[55:44], 2'd0 } ;
  assign MUX_app_appW4_mesgReqAddr$write_1__VAL_2 =
	     app_appW4_mesgReqAddr +
	     { app_appW4_fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_app_appW4_opcode$write_1__VAL_3 =
	     { 1'd1, app_appW4_wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_app_appW4_thisMesg$write_1__VAL_1 =
	     { app_appW4_mesgCount[7:0], x__h229810, x_length__h229806 } ;
  assign MUX_app_appW4_thisMesg$write_1__VAL_2 =
	     { app_appW4_mesgCount[7:0],
	       app_appW4_wmi_sFlagReg[31:24],
	       app_appW4_wmi_sFlagReg[15:0] } ;
  assign MUX_app_appW4_unrollCnt$write_1__VAL_1 =
	     (app_appW4_wmi_sFlagReg[23:0] == 24'd0) ?
	       16'd1 :
	       app_appW4_wmi_sFlagReg[17:2] ;
  assign MUX_app_appW4_unrollCnt$write_1__VAL_2 =
	     app_appW4_unrollCnt - 16'd1 ;
  assign MUX_app_appW4_wci_illegalEdge$write_1__VAL_2 =
	     app_appW4_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     app_appW4_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     app_appW4_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_app_appW4_wci_respF_c_r$write_1__VAL_1 =
	     app_appW4_wci_respF_c_r + 2'd1 ;
  assign MUX_app_appW4_wci_respF_c_r$write_1__VAL_2 =
	     app_appW4_wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_app_appW4_wci_ctl_op_complete or
	  MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wci_cfrd or
	  MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW4_wci_ctl_op_complete:
	  MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 =
	      MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wci_cfrd:
	  MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 =
	      MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wci_cfwr:
	  MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_app_appW4_wci_respF_q_0$write_1__VAL_2 =
	     (app_appW4_wci_respF_c_r == 2'd1) ?
	       MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 :
	       app_appW4_wci_respF_q_1 ;
  assign MUX_app_appW4_wci_respF_q_1$write_1__VAL_2 =
	     (app_appW4_wci_respF_c_r == 2'd2) ?
	       MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_1 =
	     app_appW4_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_app_appW4_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, x_data__h232073 } ;
  assign MUX_app_appW4_wmi_dhF_c_r$write_1__VAL_1 =
	     app_appW4_wmi_dhF_c_r + 2'd1 ;
  assign MUX_app_appW4_wmi_dhF_c_r$write_1__VAL_2 =
	     app_appW4_wmi_dhF_c_r - 2'd1 ;
  assign MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1 =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise ?
	       MUX_app_appW4_wmi_dhF_x_wire$wset_1__VAL_1 :
	       MUX_app_appW4_wmi_dhF_x_wire$wset_1__VAL_2 ;
  assign MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_2 =
	     (app_appW4_wmi_dhF_c_r == 2'd1) ?
	       MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1 :
	       app_appW4_wmi_dhF_q_1 ;
  assign MUX_app_appW4_wmi_dhF_q_1$write_1__VAL_2 =
	     (app_appW4_wmi_dhF_c_r == 2'd2) ?
	       MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1 :
	       38'h0AAAAAAAAA ;
  assign MUX_app_appW4_wmi_dhF_x_wire$wset_1__VAL_1 =
	     { 1'd1,
	       app_appW4_wsiWordsRemain == 12'd1,
	       app_appW4_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_app_appW4_wmi_dhF_x_wire$wset_1__VAL_2 =
	     { 1'd1,
	       app_appW4_wsiS_reqFifo$D_OUT[57],
	       app_appW4_wsiS_reqFifo$D_OUT[43:12],
	       4'd15 } ;
  assign MUX_app_appW4_wmi_mFlagF_c_r$write_1__VAL_1 =
	     app_appW4_wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_app_appW4_wmi_mFlagF_c_r$write_1__VAL_2 =
	     app_appW4_wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_app_appW4_wmi_mFlagF_q_0$write_1__VAL_2 =
	     (app_appW4_wmi_mFlagF_c_r == 2'd1) ?
	       value__h216769 :
	       app_appW4_wmi_mFlagF_q_1 ;
  assign MUX_app_appW4_wmi_mFlagF_q_1$write_1__VAL_2 =
	     (app_appW4_wmi_mFlagF_c_r == 2'd2) ? value__h216769 : 32'd0 ;
  assign MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { x__h229810, mesgMetaF_length__h230787 } ;
  assign MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3 =
	     { x__h229810, mesgMetaF_length__h230051 } ;
  assign MUX_app_appW4_wmi_reqF_c_r$write_1__VAL_1 =
	     app_appW4_wmi_reqF_c_r + 2'd1 ;
  assign MUX_app_appW4_wmi_reqF_c_r$write_1__VAL_2 =
	     app_appW4_wmi_reqF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest or
	  MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wmwt_requestPrecise or
	  MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise or
	  MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest:
	  MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wmwt_requestPrecise:
	  MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise:
	  MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 =
	      MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3;
      default: MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_2 =
	     (app_appW4_wmi_reqF_c_r == 2'd1) ?
	       MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 :
	       app_appW4_wmi_reqF_q_1 ;
  assign MUX_app_appW4_wmi_reqF_q_1$write_1__VAL_2 =
	     (app_appW4_wmi_reqF_c_r == 2'd2) ?
	       MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 :
	       32'd178956970 ;
  assign MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5,
	       x__h228511,
	       1'b0,
	       app_appW4_mesgReqAddr,
	       app_appW4_fabWordsCurReq[11:0] } ;
  assign MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 20'd229376, bl__h229913 } ;
  assign MUX_app_appW4_wmi_reqF_x_wire$wset_1__VAL_3 =
	     { 4'd3,
	       app_appW4_wsiS_reqFifo$D_OUT[57],
	       1'b0,
	       addr__h230657,
	       12'd1 } ;
  assign MUX_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     app_appW4_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     app_appW4_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       app_appW4_wsiS_reqFifo$D_OUT :
	       MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (app_appW4_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       app_appW4_wsiM_reqFifo_q_1 ;
  assign MUX_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (app_appW4_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (app_appW4_respF_rCache[73] &&
	      app_appW4_respF_rCache[72:61] == app_appW4_respF_rRdPtr) ?
	       app_appW4_respF_rCache[60:0] :
	       app_appW4_respF_memory$DOB ;
  assign MUX_app_appW4_wsiWordsRemain$write_1__VAL_2 =
	     app_appW4_wsiWordsRemain - 12'd1 ;
  assign MUX_inf_dp0_bml_crdBuf_value$write_1__VAL_3 =
	     inf_dp0_bml_crdBuf_value_902_EQ_inf_dp0_bml_cr_ETC___d7224 ?
	       16'd0 :
	       inf_dp0_bml_crdBuf_value + 16'd1 ;
  assign MUX_inf_dp0_bml_fabBuf_value$write_1__VAL_3 =
	     inf_dp0_bml_fabBuf_value_887_EQ_inf_dp0_bml_fa_ETC___d8127 ?
	       16'd0 :
	       inf_dp0_bml_fabBuf_value + 16'd1 ;
  assign MUX_inf_dp0_bml_fabBufsAvail$write_1__VAL_1 =
	     (inf_dp0_bml_fabAvail && !inf_dp0_bml_remStart) ?
	       x__h77928 :
	       x__h77933 ;
  assign MUX_inf_dp0_bml_fabBufsAvail$write_1__VAL_2 =
	     (inf_dp0_dpControl[3:2] == 2'd1) ? x__h76685 : 16'd0 ;
  assign MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_1 =
	     inf_dp0_bml_fabBuf_value_887_EQ_inf_dp0_bml_fa_ETC___d8127 ?
	       inf_dp0_bml_fabFlowBase :
	       inf_dp0_bml_fabFlowAddr_959_PLUS_inf_dp0_bml_f_ETC___d7931 ;
  assign MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_3 =
	     inf_dp0_bml_crdBuf_value_902_EQ_inf_dp0_bml_cr_ETC___d7224 ?
	       inf_dp0_bml_fabFlowBase :
	       inf_dp0_bml_fabFlowAddr_959_PLUS_inf_dp0_bml_f_ETC___d7931 ;
  assign MUX_inf_dp0_bml_fabMesgAddr$write_1__VAL_1 =
	     inf_dp0_bml_fabBuf_value_887_EQ_inf_dp0_bml_fa_ETC___d8127 ?
	       inf_dp0_bml_fabMesgBase :
	       inf_dp0_bml_fabMesgAddr + inf_dp0_bml_fabMesgSize ;
  assign MUX_inf_dp0_bml_fabMetaAddr$write_1__VAL_1 =
	     inf_dp0_bml_fabBuf_value_887_EQ_inf_dp0_bml_fa_ETC___d8127 ?
	       inf_dp0_bml_fabMetaBase :
	       inf_dp0_bml_fabMetaAddr + inf_dp0_bml_fabMetaSize ;
  assign MUX_inf_dp0_bml_lclBuf_value$write_1__VAL_3 =
	     inf_dp0_bml_lclBuf_value_857_EQ_inf_dp0_bml_lc_ETC___d8137 ?
	       16'd0 :
	       inf_dp0_bml_lclBuf_value + 16'd1 ;
  assign MUX_inf_dp0_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_inf_dp0_bml_dpControl_wget__920_BITS_1_TO_0_ETC___d1997 &&
	      !inf_dp0_bml_lclBufStart) ?
	       x__h77809 :
	       x__h77814 ;
  assign MUX_inf_dp0_bml_lclBufsAR$write_1__VAL_2 =
	     (inf_dp0_dpControl[3:2] == 2'd1) ?
	       inf_dp0_bml_lclNumBufs :
	       16'd0 ;
  assign MUX_inf_dp0_bml_lclBufsCF$write_1__VAL_1 =
	     inf_dp0_bml_lclBufDone_944_AND_IF_inf_dp0_bml__ETC___d7164 ?
	       x__h77886 :
	       x__h77891 ;
  assign MUX_inf_dp0_bml_lclBufsCF$write_1__VAL_2 =
	     (inf_dp0_dpControl[3:2] == 2'd1) ?
	       16'd0 :
	       inf_dp0_bml_lclNumBufs ;
  assign MUX_inf_dp0_bml_lclCredit$write_1__VAL_1 =
	     (inf_dp0_bml_lclBufDone && !inf_dp0_bml_remStart) ?
	       x__h77966 :
	       x__h77971 ;
  assign MUX_inf_dp0_bml_lclMesgAddr$write_1__VAL_2 =
	     inf_dp0_bml_lclBuf_value_857_EQ_inf_dp0_bml_lc_ETC___d8137 ?
	       inf_dp0_bml_mesgBase :
	       inf_dp0_bml_lclMesgAddr + inf_dp0_bml_mesgSize ;
  assign MUX_inf_dp0_bml_lclMetaAddr$write_1__VAL_2 =
	     inf_dp0_bml_lclBuf_value_857_EQ_inf_dp0_bml_lc_ETC___d8137 ?
	       inf_dp0_bml_metaBase :
	       inf_dp0_bml_lclMetaAddr + inf_dp0_bml_metaSize ;
  assign MUX_inf_dp0_bml_remBuf_value$write_1__VAL_3 =
	     inf_dp0_bml_remBuf_value_872_EQ_inf_dp0_bml_re_ETC___d7215 ?
	       16'd0 :
	       inf_dp0_bml_remBuf_value + 16'd1 ;
  assign MUX_inf_dp0_bml_remMesgAddr$write_1__VAL_2 =
	     inf_dp0_bml_remBuf_value_872_EQ_inf_dp0_bml_re_ETC___d7215 ?
	       inf_dp0_bml_mesgBase :
	       inf_dp0_bml_remMesgAddr + inf_dp0_bml_mesgSize ;
  assign MUX_inf_dp0_bml_remMetaAddr$write_1__VAL_2 =
	     inf_dp0_bml_remBuf_value_872_EQ_inf_dp0_bml_re_ETC___d7215 ?
	       inf_dp0_bml_metaBase :
	       inf_dp0_bml_remMetaAddr + inf_dp0_bml_metaSize ;
  always@(idx__h45561 or
	  inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  inf_dp0_tlp_writeDWAddr or
	  inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h45561)
      2'd0:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h52624 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  inf_dp0_tlp_readNxtDWAddr or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h52624)
      2'd0:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_inf_dp0_bram_memory$a_put_3__VAL_1 =
	     { inf_dp0_tlp_mReqF$D_OUT[7:0],
	       inf_dp0_tlp_mReqF$D_OUT[15:8],
	       inf_dp0_tlp_mReqF$D_OUT[23:16],
	       inf_dp0_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_inf_dp0_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090[7:0],
	       IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090[15:8],
	       IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090[23:16],
	       IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090[31:24] } ;
  assign MUX_inf_dp0_bram_memory$b_put_2__VAL_1 =
	     inf_dp0_wmi_lclMesgAddr[14:4] +
	     { 1'd0, inf_dp0_wmi_addr[13:4] } ;
  always@(idx__h47784 or
	  inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  inf_dp0_tlp_writeDWAddr or
	  inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h47784)
      2'd0:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h53092 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  inf_dp0_tlp_readNxtDWAddr or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h53092)
      2'd0:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_inf_dp0_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356[7:0],
	       IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356[15:8],
	       IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356[23:16],
	       IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356[31:24] } ;
  always@(idx__h49080 or
	  inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  inf_dp0_tlp_writeDWAddr or
	  inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h49080)
      2'd0:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h53465 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  inf_dp0_tlp_readNxtDWAddr or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h53465)
      2'd0:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_inf_dp0_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357[7:0],
	       IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357[15:8],
	       IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357[23:16],
	       IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357[31:24] } ;
  always@(idx__h50376 or
	  inf_dp0_tlp_writeDWAddr_PLUS_3__q14 or
	  inf_dp0_tlp_writeDWAddr or
	  inf_dp0_tlp_writeDWAddr_PLUS_1__q15 or
	  inf_dp0_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h50376)
      2'd0:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp0_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h53838 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 or
	  inf_dp0_tlp_readNxtDWAddr or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 or
	  inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19)
  begin
    case (idx__h53838)
      2'd0:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18[12:2];
      2'd2:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19[12:2];
      2'd3:
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17[12:2];
    endcase
  end
  assign MUX_inf_dp0_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358[7:0],
	       IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358[15:8],
	       IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358[23:16],
	       IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358[31:24] } ;
  assign MUX_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936 &&
	     inf_dp0_tlp_dmaPullRemainDWLen_001_ULE_inf_dp0_ETC___d7935 ;
  assign MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     inf_dp0_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936 ?
	       inf_dp0_tlp_dmaPullRemainDWLen -
	       inf_dp0_tlp_dmaPullRemainDWSub :
	       inf_dp0_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     inf_dp0_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936 ?
	       10'd0 :
	       inf_dp0_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2 =
	     inf_dp0_tlp_fabMesgAccu + y__h27575 ;
  assign MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3 =
	     inf_dp0_tlp_fabMesgAccu + y__h39958 ;
  assign MUX_inf_dp0_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h23871,
	       opcode__h23808,
	       nowMS__h23809,
	       nowLS__h23810 } ;
  assign MUX_inf_dp0_tlp_fabMeta$write_1__VAL_2 =
	     { 1'd1,
	       x__h36682,
	       opcode__h36650,
	       nowMS__h36651,
	       nowLS__h36652 } ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__VAL_1 =
	     inf_dp0_tlp_inF$D_OUT[152] ?
	       (inf_dp0_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    inf_dp0_tlp_inF$D_OUT[46:34],
		    inf_dp0_tlp_inF$D_OUT[105:96],
		    inf_dp0_tlp_inF$D_OUT[67:64],
		    inf_dp0_tlp_inF$D_OUT[71:68],
		    inf_dp0_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    inf_dp0_tlp_inF$D_OUT[95:80],
		    inf_dp0_tlp_inF$D_OUT[46:34],
		    inf_dp0_tlp_inF$D_OUT[105:96],
		    inf_dp0_tlp_inF$D_OUT[67:64],
		    inf_dp0_tlp_inF$D_OUT[71:68],
		    inf_dp0_tlp_inF$D_OUT[79:72],
		    inf_dp0_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, inf_dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       inf_dp0_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       inf_dp0_tlp_remMesgAccu[14:2],
	       thisRequestLength__h27024[11:2],
	       8'd255,
	       rreq_tag__h27253,
	       3'h2 } ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       inf_dp0_tlp_remMetaAddr[14:2],
	       18'd1279,
	       inf_dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       inf_dp0_tlp_remMesgAccu[14:2],
	       inf_dp0_tlp_inF$D_OUT[105:96],
	       8'd255,
	       inf_dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_inf_dp0_tlp_mReqF$enq_1__VAL_6 =
	     { 2'd1, inf_dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_inf_dp0_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       inf_dp0_tlp_readReq$D_OUT[59:42],
	       inf_dp0_tlp_readReq$D_OUT[28:19],
	       lowAddr__h54739,
	       byteCount__h54740,
	       inf_dp0_tlp_readReq$D_OUT[10:0],
	       rresp_data__h54782 } ;
  assign MUX_inf_dp0_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       inf_dp0_tlp_readReq$D_OUT[59:58],
	       inf_dp0_tlp_readReq$D_OUT[10:3],
	       rdata__h60108 } ;
  assign MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1 =
	     inf_dp0_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2 =
	     inf_dp0_tlp_mesgComplReceived + y__h41147 ;
  assign MUX_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { inf_dp0_tlp_inF$D_OUT[8],
	       inf_dp0_tlp_inF$D_OUT[23:16],
	       inf_dp0_tlp_inF$D_OUT[31:24] } ;
  assign MUX_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     inf_dp0_tlp_mesgLengthRemainPull - y__h39887 ;
  assign MUX_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { inf_dp0_tlp_mRespF$D_OUT[8],
	       inf_dp0_tlp_mRespF$D_OUT[23:16],
	       inf_dp0_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     inf_dp0_tlp_mesgLengthRemainPush - y__h27064 ;
  assign MUX_inf_dp0_tlp_outDwRemain$write_1__VAL_1 =
	     inf_dp0_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_inf_dp0_tlp_outDwRemain$write_1__VAL_2 =
	     inf_dp0_tlp_outDwRemain - 10'd4 ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_1 =
	     { 25'd16973823, w_data__h28406 } ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_2 =
	     { 25'd25362416, w_data__h34372 } ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_3 =
	     { 1'd1,
	       inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h27428 } ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_4 = { 25'd8585200, w_data__h29468 } ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_5 =
	     { 25'd25362416, w_data__h40143 } ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h43220 } ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       inf_dp0_tlp_outDwRemain_81_ULE_4___d7502,
	       7'h02,
	       w_be__h27980,
	       inf_dp0_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_inf_dp0_tlp_outF$enq_1__VAL_8 =
	     { 25'd25296895, w_data__h32188 } ;
  assign MUX_inf_dp0_tlp_postSeqDwell$write_1__VAL_1 =
	     inf_dp0_tlp_postSeqDwell - 4'd1 ;
  assign MUX_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_1 =
	     inf_dp0_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_2 =
	     inf_dp0_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_1 =
	     inf_dp0_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_2 =
	     inf_dp0_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_inf_dp0_tlp_readRemainDWLen$write_1__VAL_1 =
	     inf_dp0_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_inf_dp0_tlp_readRemainDWLen$write_1__VAL_2 =
	     inf_dp0_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_2 =
	     inf_dp0_tlp_remMesgAccu + y__h27206 ;
  assign MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_3 =
	     inf_dp0_tlp_remMesgAccu + y__h40469 ;
  assign MUX_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936 ||
	     !inf_dp0_tlp_dmaPullRemainDWLen_001_ULE_inf_dp0_ETC___d7935 ;
  assign MUX_inf_dp0_tlp_srcMesgAccu$write_1__VAL_2 =
	     inf_dp0_tlp_srcMesgAccu + y__h27158 ;
  assign MUX_inf_dp0_tlp_writeDWAddr$write_1__VAL_1 =
	     inf_dp0_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_inf_dp0_tlp_writeDWAddr$write_1__VAL_2 =
	     inf_dp0_tlp_writeDWAddr + 13'd4 ;
  assign MUX_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_1 =
	     inf_dp0_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_2 =
	     inf_dp0_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_inf_dp0_wci_illegalEdge$write_1__VAL_2 =
	     inf_dp0_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     inf_dp0_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     inf_dp0_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_inf_dp0_wci_respF_c_r$write_1__VAL_1 =
	     inf_dp0_wci_respF_c_r + 2'd1 ;
  assign MUX_inf_dp0_wci_respF_c_r$write_1__VAL_2 =
	     inf_dp0_wci_respF_c_r - 2'd1 ;
  assign MUX_inf_dp0_wci_respF_q_0$write_1__VAL_1 =
	     (inf_dp0_wci_respF_c_r == 2'd1) ?
	       MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 :
	       inf_dp0_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete or
	  MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp0_wci_cfrd or
	  MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete:
	  MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_inf_dp0_wci_cfrd:
	  MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_wci_cfwr:
	  MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_inf_dp0_wci_respF_q_1$write_1__VAL_1 =
	     (inf_dp0_wci_respF_c_r == 2'd2) ?
	       MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_1 =
	     inf_dp0_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_inf_dp0_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h79464 } ;
  assign MUX_inf_dp0_wmi_addr$write_1__VAL_1 = inf_dp0_wmi_addr + 14'd4 ;
  assign MUX_inf_dp0_wmi_bufDwell$write_1__VAL_3 =
	     inf_dp0_wmi_bufDwell - 2'd1 ;
  assign MUX_inf_dp0_wmi_bytesRemainReq$write_1__VAL_1 =
	     inf_dp0_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2 =
	     { inf_dp0_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_inf_dp0_wmi_bytesRemainResp$write_1__VAL_2 =
	     inf_dp0_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_inf_dp0_wmi_mesgCount$write_1__VAL_1 =
	     inf_dp0_wmi_mesgCount + 32'd1 ;
  assign MUX_inf_dp0_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h72497,
	       y_avValue__h72517,
	       y_avValue__h72537,
	       y_avValue__h72557 } ;
  assign MUX_inf_dp0_wmi_p4B$write_1__VAL_2 = inf_dp0_wmi_p4B + 2'd1 ;
  assign MUX_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     inf_dp0_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     inf_dp0_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (inf_dp0_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       inf_dp0_wmi_wmi_respF_q_1 ;
  assign MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 =
	     { 2'd1, rdata__h72661 } ;
  assign MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (inf_dp0_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_inf_dp1_bml_crdBuf_value$write_1__VAL_3 =
	     inf_dp1_bml_crdBuf_value_088_EQ_inf_dp1_bml_cr_ETC___d8183 ?
	       16'd0 :
	       inf_dp1_bml_crdBuf_value + 16'd1 ;
  assign MUX_inf_dp1_bml_fabBuf_value$write_1__VAL_3 =
	     inf_dp1_bml_fabBuf_value_073_EQ_inf_dp1_bml_fa_ETC___d8184 ?
	       16'd0 :
	       inf_dp1_bml_fabBuf_value + 16'd1 ;
  assign MUX_inf_dp1_bml_fabBufsAvail$write_1__VAL_1 =
	     (inf_dp1_bml_fabAvail && !inf_dp1_bml_remStart) ?
	       x__h156988 :
	       x__h156993 ;
  assign MUX_inf_dp1_bml_fabBufsAvail$write_1__VAL_2 =
	     (inf_dp1_dpControl[3:2] == 2'd1) ? x__h155745 : 16'd0 ;
  assign MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_1 =
	     inf_dp1_bml_fabBuf_value_073_EQ_inf_dp1_bml_fa_ETC___d8184 ?
	       inf_dp1_bml_fabFlowBase :
	       inf_dp1_bml_fabFlowAddr_145_PLUS_inf_dp1_bml_f_ETC___d7932 ;
  assign MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_3 =
	     inf_dp1_bml_crdBuf_value_088_EQ_inf_dp1_bml_cr_ETC___d8183 ?
	       inf_dp1_bml_fabFlowBase :
	       inf_dp1_bml_fabFlowAddr_145_PLUS_inf_dp1_bml_f_ETC___d7932 ;
  assign MUX_inf_dp1_bml_fabMesgAddr$write_1__VAL_1 =
	     inf_dp1_bml_fabBuf_value_073_EQ_inf_dp1_bml_fa_ETC___d8184 ?
	       inf_dp1_bml_fabMesgBase :
	       inf_dp1_bml_fabMesgAddr + inf_dp1_bml_fabMesgSize ;
  assign MUX_inf_dp1_bml_fabMetaAddr$write_1__VAL_1 =
	     inf_dp1_bml_fabBuf_value_073_EQ_inf_dp1_bml_fa_ETC___d8184 ?
	       inf_dp1_bml_fabMetaBase :
	       inf_dp1_bml_fabMetaAddr + inf_dp1_bml_fabMetaSize ;
  assign MUX_inf_dp1_bml_lclBuf_value$write_1__VAL_3 =
	     inf_dp1_bml_lclBuf_value_043_EQ_inf_dp1_bml_lc_ETC___d8197 ?
	       16'd0 :
	       inf_dp1_bml_lclBuf_value + 16'd1 ;
  assign MUX_inf_dp1_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_inf_dp1_bml_dpControl_wget__106_BITS_1_TO_0_ETC___d4183 &&
	      !inf_dp1_bml_lclBufStart) ?
	       x__h156869 :
	       x__h156874 ;
  assign MUX_inf_dp1_bml_lclBufsAR$write_1__VAL_2 =
	     (inf_dp1_dpControl[3:2] == 2'd1) ?
	       inf_dp1_bml_lclNumBufs :
	       16'd0 ;
  assign MUX_inf_dp1_bml_lclBufsCF$write_1__VAL_1 =
	     inf_dp1_bml_lclBufDone_130_AND_IF_inf_dp1_bml__ETC___d7192 ?
	       x__h156946 :
	       x__h156951 ;
  assign MUX_inf_dp1_bml_lclBufsCF$write_1__VAL_2 =
	     (inf_dp1_dpControl[3:2] == 2'd1) ?
	       16'd0 :
	       inf_dp1_bml_lclNumBufs ;
  assign MUX_inf_dp1_bml_lclCredit$write_1__VAL_1 =
	     (inf_dp1_bml_lclBufDone && !inf_dp1_bml_remStart) ?
	       x__h157026 :
	       x__h157031 ;
  assign MUX_inf_dp1_bml_lclMesgAddr$write_1__VAL_2 =
	     inf_dp1_bml_lclBuf_value_043_EQ_inf_dp1_bml_lc_ETC___d8197 ?
	       inf_dp1_bml_mesgBase :
	       inf_dp1_bml_lclMesgAddr + inf_dp1_bml_mesgSize ;
  assign MUX_inf_dp1_bml_lclMetaAddr$write_1__VAL_2 =
	     inf_dp1_bml_lclBuf_value_043_EQ_inf_dp1_bml_lc_ETC___d8197 ?
	       inf_dp1_bml_metaBase :
	       inf_dp1_bml_lclMetaAddr + inf_dp1_bml_metaSize ;
  assign MUX_inf_dp1_bml_remBuf_value$write_1__VAL_3 =
	     inf_dp1_bml_remBuf_value_058_EQ_inf_dp1_bml_re_ETC___d8198 ?
	       16'd0 :
	       inf_dp1_bml_remBuf_value + 16'd1 ;
  assign MUX_inf_dp1_bml_remMesgAddr$write_1__VAL_2 =
	     inf_dp1_bml_remBuf_value_058_EQ_inf_dp1_bml_re_ETC___d8198 ?
	       inf_dp1_bml_mesgBase :
	       inf_dp1_bml_remMesgAddr + inf_dp1_bml_mesgSize ;
  assign MUX_inf_dp1_bml_remMetaAddr$write_1__VAL_2 =
	     inf_dp1_bml_remBuf_value_058_EQ_inf_dp1_bml_re_ETC___d8198 ?
	       inf_dp1_bml_metaBase :
	       inf_dp1_bml_remMetaAddr + inf_dp1_bml_metaSize ;
  always@(idx__h124624 or
	  inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  inf_dp1_tlp_writeDWAddr or
	  inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h124624)
      2'd0:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h131687 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  inf_dp1_tlp_readNxtDWAddr or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h131687)
      2'd0:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_inf_dp1_bram_memory$a_put_3__VAL_1 =
	     { inf_dp1_tlp_mReqF$D_OUT[7:0],
	       inf_dp1_tlp_mReqF$D_OUT[15:8],
	       inf_dp1_tlp_mReqF$D_OUT[23:16],
	       inf_dp1_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_inf_dp1_bram_memory$a_put_3__VAL_3 =
	     { IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359[7:0],
	       IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359[15:8],
	       IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359[23:16],
	       IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359[31:24] } ;
  assign MUX_inf_dp1_bram_memory$b_put_2__VAL_1 =
	     inf_dp1_wmi_lclMesgAddr[14:4] +
	     { 1'd0, inf_dp1_wmi_addr[13:4] } ;
  always@(idx__h126847 or
	  inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  inf_dp1_tlp_writeDWAddr or
	  inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h126847)
      2'd0:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h132155 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  inf_dp1_tlp_readNxtDWAddr or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h132155)
      2'd0:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_inf_dp1_bram_memory_1$a_put_3__VAL_3 =
	     { IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360[7:0],
	       IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360[15:8],
	       IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360[23:16],
	       IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360[31:24] } ;
  always@(idx__h128143 or
	  inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  inf_dp1_tlp_writeDWAddr or
	  inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h128143)
      2'd0:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h132528 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  inf_dp1_tlp_readNxtDWAddr or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h132528)
      2'd0:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_inf_dp1_bram_memory_2$a_put_3__VAL_3 =
	     { IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361[7:0],
	       IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361[15:8],
	       IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361[23:16],
	       IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361[31:24] } ;
  always@(idx__h129439 or
	  inf_dp1_tlp_writeDWAddr_PLUS_3__q22 or
	  inf_dp1_tlp_writeDWAddr or
	  inf_dp1_tlp_writeDWAddr_PLUS_1__q23 or
	  inf_dp1_tlp_writeDWAddr_PLUS_2__q24)
  begin
    case (idx__h129439)
      2'd0:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_1__q23[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_2__q24[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_3 =
	      inf_dp1_tlp_writeDWAddr_PLUS_3__q22[12:2];
    endcase
  end
  always@(idx__h132901 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 or
	  inf_dp1_tlp_readNxtDWAddr or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 or
	  inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27)
  begin
    case (idx__h132901)
      2'd0:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26[12:2];
      2'd2:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27[12:2];
      2'd3:
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_4 =
	      inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25[12:2];
    endcase
  end
  assign MUX_inf_dp1_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362[7:0],
	       IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362[15:8],
	       IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362[23:16],
	       IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362[31:24] } ;
  assign MUX_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938 &&
	     inf_dp1_tlp_dmaPullRemainDWLen_187_ULE_inf_dp1_ETC___d7937 ;
  assign MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     inf_dp1_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938 ?
	       inf_dp1_tlp_dmaPullRemainDWLen -
	       inf_dp1_tlp_dmaPullRemainDWSub :
	       inf_dp1_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     inf_dp1_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938 ?
	       10'd0 :
	       inf_dp1_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2 =
	     inf_dp1_tlp_fabMesgAccu + y__h106646 ;
  assign MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3 =
	     inf_dp1_tlp_fabMesgAccu + y__h119021 ;
  assign MUX_inf_dp1_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h102942,
	       opcode__h102879,
	       nowMS__h102880,
	       nowLS__h102881 } ;
  assign MUX_inf_dp1_tlp_fabMeta$write_1__VAL_2 =
	     { 1'd1,
	       x__h115745,
	       opcode__h115713,
	       nowMS__h115714,
	       nowLS__h115715 } ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__VAL_1 =
	     inf_dp1_tlp_inF$D_OUT[152] ?
	       (inf_dp1_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    inf_dp1_tlp_inF$D_OUT[46:34],
		    inf_dp1_tlp_inF$D_OUT[105:96],
		    inf_dp1_tlp_inF$D_OUT[67:64],
		    inf_dp1_tlp_inF$D_OUT[71:68],
		    inf_dp1_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    inf_dp1_tlp_inF$D_OUT[95:80],
		    inf_dp1_tlp_inF$D_OUT[46:34],
		    inf_dp1_tlp_inF$D_OUT[105:96],
		    inf_dp1_tlp_inF$D_OUT[67:64],
		    inf_dp1_tlp_inF$D_OUT[71:68],
		    inf_dp1_tlp_inF$D_OUT[79:72],
		    inf_dp1_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, inf_dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       inf_dp1_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       inf_dp1_tlp_remMesgAccu[14:2],
	       thisRequestLength__h106095[11:2],
	       8'd255,
	       rreq_tag__h106324,
	       3'h2 } ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       inf_dp1_tlp_remMetaAddr[14:2],
	       18'd1279,
	       inf_dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       inf_dp1_tlp_remMesgAccu[14:2],
	       inf_dp1_tlp_inF$D_OUT[105:96],
	       8'd255,
	       inf_dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_inf_dp1_tlp_mReqF$enq_1__VAL_6 =
	     { 2'd1, inf_dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_inf_dp1_tlp_mRespF$enq_1__VAL_1 =
	     { 49'h0AAAAAAAAAAAA,
	       inf_dp1_tlp_readReq$D_OUT[59:42],
	       inf_dp1_tlp_readReq$D_OUT[28:19],
	       lowAddr__h133802,
	       byteCount__h133803,
	       inf_dp1_tlp_readReq$D_OUT[10:0],
	       rresp_data__h133845 } ;
  assign MUX_inf_dp1_tlp_mRespF$enq_1__VAL_2 =
	     { 1'd1,
	       inf_dp1_tlp_readReq$D_OUT[59:58],
	       inf_dp1_tlp_readReq$D_OUT[10:3],
	       rdata__h139171 } ;
  assign MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1 =
	     inf_dp1_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2 =
	     inf_dp1_tlp_mesgComplReceived + y__h120210 ;
  assign MUX_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { inf_dp1_tlp_inF$D_OUT[8],
	       inf_dp1_tlp_inF$D_OUT[23:16],
	       inf_dp1_tlp_inF$D_OUT[31:24] } ;
  assign MUX_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     inf_dp1_tlp_mesgLengthRemainPull - y__h118950 ;
  assign MUX_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { inf_dp1_tlp_mRespF$D_OUT[8],
	       inf_dp1_tlp_mRespF$D_OUT[23:16],
	       inf_dp1_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     inf_dp1_tlp_mesgLengthRemainPush - y__h106135 ;
  assign MUX_inf_dp1_tlp_outDwRemain$write_1__VAL_1 =
	     inf_dp1_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_inf_dp1_tlp_outDwRemain$write_1__VAL_2 =
	     inf_dp1_tlp_outDwRemain - 10'd4 ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_1 =
	     { 25'd16973823, w_data__h107477 } ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_2 =
	     { 25'd25362416, w_data__h113443 } ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_3 =
	     { 1'd1,
	       inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h106499 } ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_4 =
	     { 25'd8585200, w_data__h108539 } ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_5 =
	     { 25'd25362416, w_data__h119206 } ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h122283 } ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       inf_dp1_tlp_outDwRemain_970_ULE_4___d7507,
	       7'h02,
	       w_be__h107051,
	       inf_dp1_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_inf_dp1_tlp_outF$enq_1__VAL_8 =
	     { 25'd25296895, w_data__h111259 } ;
  assign MUX_inf_dp1_tlp_postSeqDwell$write_1__VAL_1 =
	     inf_dp1_tlp_postSeqDwell - 4'd1 ;
  assign MUX_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_1 =
	     inf_dp1_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_2 =
	     inf_dp1_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_1 =
	     inf_dp1_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_2 =
	     inf_dp1_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_inf_dp1_tlp_readRemainDWLen$write_1__VAL_1 =
	     inf_dp1_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_inf_dp1_tlp_readRemainDWLen$write_1__VAL_2 =
	     inf_dp1_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_2 =
	     inf_dp1_tlp_remMesgAccu + y__h106277 ;
  assign MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_3 =
	     inf_dp1_tlp_remMesgAccu + y__h119532 ;
  assign MUX_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2 =
	     !inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938 ||
	     !inf_dp1_tlp_dmaPullRemainDWLen_187_ULE_inf_dp1_ETC___d7937 ;
  assign MUX_inf_dp1_tlp_srcMesgAccu$write_1__VAL_2 =
	     inf_dp1_tlp_srcMesgAccu + y__h106229 ;
  assign MUX_inf_dp1_tlp_writeDWAddr$write_1__VAL_1 =
	     inf_dp1_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_inf_dp1_tlp_writeDWAddr$write_1__VAL_2 =
	     inf_dp1_tlp_writeDWAddr + 13'd4 ;
  assign MUX_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_1 =
	     inf_dp1_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_2 =
	     inf_dp1_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_inf_dp1_wci_illegalEdge$write_1__VAL_2 =
	     inf_dp1_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     inf_dp1_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     inf_dp1_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_inf_dp1_wci_respF_c_r$write_1__VAL_1 =
	     inf_dp1_wci_respF_c_r + 2'd1 ;
  assign MUX_inf_dp1_wci_respF_c_r$write_1__VAL_2 =
	     inf_dp1_wci_respF_c_r - 2'd1 ;
  assign MUX_inf_dp1_wci_respF_q_0$write_1__VAL_1 =
	     (inf_dp1_wci_respF_c_r == 2'd1) ?
	       MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 :
	       inf_dp1_wci_respF_q_1 ;
  always@(WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete or
	  MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp1_wci_cfrd or
	  MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete:
	  MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_inf_dp1_wci_cfrd:
	  MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_wci_cfwr:
	  MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_inf_dp1_wci_respF_q_1$write_1__VAL_1 =
	     (inf_dp1_wci_respF_c_r == 2'd2) ?
	       MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_1 =
	     inf_dp1_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_inf_dp1_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h158522 } ;
  assign MUX_inf_dp1_wmi_addr$write_1__VAL_1 = inf_dp1_wmi_addr + 14'd4 ;
  assign MUX_inf_dp1_wmi_bufDwell$write_1__VAL_3 =
	     inf_dp1_wmi_bufDwell - 2'd1 ;
  assign MUX_inf_dp1_wmi_bytesRemainReq$write_1__VAL_1 =
	     inf_dp1_wmi_bytesRemainReq - 14'd4 ;
  assign MUX_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2 =
	     { inf_dp1_wmi_wmi_reqF$D_OUT[11:0], 2'd0 } ;
  assign MUX_inf_dp1_wmi_bytesRemainResp$write_1__VAL_2 =
	     inf_dp1_wmi_bytesRemainResp - 14'd4 ;
  assign MUX_inf_dp1_wmi_mesgCount$write_1__VAL_1 =
	     inf_dp1_wmi_mesgCount + 32'd1 ;
  assign MUX_inf_dp1_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1,
	       y_avValue__h151560,
	       y_avValue__h151580,
	       y_avValue__h151600,
	       y_avValue__h151620 } ;
  assign MUX_inf_dp1_wmi_p4B$write_1__VAL_2 = inf_dp1_wmi_p4B + 2'd1 ;
  assign MUX_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     inf_dp1_wmi_wmi_respF_c_r + 2'd1 ;
  assign MUX_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 =
	     inf_dp1_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 =
	     (inf_dp1_wmi_wmi_respF_c_r == 2'd1) ?
	       MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       inf_dp1_wmi_wmi_respF_q_1 ;
  assign MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 =
	     { 2'd1, rdata__h151724 } ;
  assign MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 =
	     (inf_dp1_wmi_wmi_respF_c_r == 2'd2) ?
	       MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;

  // inlined wires
  assign inf_dp0_bram_serverAdapterA_outData_enqData$wget =
	     inf_dp0_bram_memory$DOA ;
  assign inf_dp0_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterA_s1[0] ;
  assign inf_dp0_bram_serverAdapterA_outData_outData$wget =
	     inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterA_outDataCore$D_OUT :
	       inf_dp0_bram_memory$DOA ;
  assign inf_dp0_bram_serverAdapterA_outData_outData$whas =
	     inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h3702[1] || ab__h3702[0]) ;
  assign inf_dp0_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_cnt_2$whas =
	     inf_dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterA_writeWithResp$wget = ab__h3702 ;
  assign inf_dp0_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h3702[1] || ab__h3702[0] } ;
  assign inf_dp0_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_outData_enqData$wget =
	     inf_dp0_bram_memory$DOB ;
  assign inf_dp0_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterB_s1[0] ;
  assign inf_dp0_bram_serverAdapterB_outData_outData$wget =
	     y_avValue__h72497 ;
  assign inf_dp0_bram_serverAdapterB_outData_outData$whas =
	     inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h5101[1] || ab__h5101[0]) ;
  assign inf_dp0_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterB_cnt_2$whas =
	     inf_dp0_bram_serverAdapterB_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterB_writeWithResp$wget = ab__h5101 ;
  assign inf_dp0_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h5101[1] || ab__h5101[0] } ;
  assign inf_dp0_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterA_1_outData_enqData$wget =
	     inf_dp0_bram_memory_1$DOA ;
  assign inf_dp0_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterA_1_s1[0] ;
  assign inf_dp0_bram_serverAdapterA_1_outData_outData$wget =
	     inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterA_1_outDataCore$D_OUT :
	       inf_dp0_bram_memory_1$DOA ;
  assign inf_dp0_bram_serverAdapterA_1_outData_outData$whas =
	     inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h6631[1] || ab__h6631[0]) ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_2$whas =
	     inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterA_1_writeWithResp$wget = ab__h6631 ;
  assign inf_dp0_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h6631[1] || ab__h6631[0] } ;
  assign inf_dp0_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_1_outData_enqData$wget =
	     inf_dp0_bram_memory_1$DOB ;
  assign inf_dp0_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterB_1_s1[0] ;
  assign inf_dp0_bram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h72517 ;
  assign inf_dp0_bram_serverAdapterB_1_outData_outData$whas =
	     inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h8028[1] || ab__h8028[0]) ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_2$whas =
	     inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterB_1_writeWithResp$wget = ab__h8028 ;
  assign inf_dp0_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h8028[1] || ab__h8028[0] } ;
  assign inf_dp0_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterA_2_outData_enqData$wget =
	     inf_dp0_bram_memory_2$DOA ;
  assign inf_dp0_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterA_2_s1[0] ;
  assign inf_dp0_bram_serverAdapterA_2_outData_outData$wget =
	     inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterA_2_outDataCore$D_OUT :
	       inf_dp0_bram_memory_2$DOA ;
  assign inf_dp0_bram_serverAdapterA_2_outData_outData$whas =
	     inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h9558[1] || ab__h9558[0]) ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_2$whas =
	     inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterA_2_writeWithResp$wget = ab__h9558 ;
  assign inf_dp0_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h9558[1] || ab__h9558[0] } ;
  assign inf_dp0_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_2_outData_enqData$wget =
	     inf_dp0_bram_memory_2$DOB ;
  assign inf_dp0_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterB_2_s1[0] ;
  assign inf_dp0_bram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h72537 ;
  assign inf_dp0_bram_serverAdapterB_2_outData_outData$whas =
	     inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h10955[1] || ab__h10955[0]) ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_2$whas =
	     inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterB_2_writeWithResp$wget = ab__h10955 ;
  assign inf_dp0_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h10955[1] || ab__h10955[0] } ;
  assign inf_dp0_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterA_3_outData_enqData$wget =
	     inf_dp0_bram_memory_3$DOA ;
  assign inf_dp0_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterA_3_s1[0] ;
  assign inf_dp0_bram_serverAdapterA_3_outData_outData$wget =
	     inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterA_3_outDataCore$D_OUT :
	       inf_dp0_bram_memory_3$DOA ;
  assign inf_dp0_bram_serverAdapterA_3_outData_outData$whas =
	     inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h12485[1] || ab__h12485[0]) ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_2$whas =
	     inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterA_3_writeWithResp$wget = ab__h12485 ;
  assign inf_dp0_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h12485[1] || ab__h12485[0] } ;
  assign inf_dp0_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_3_outData_enqData$wget =
	     inf_dp0_bram_memory_3$DOB ;
  assign inf_dp0_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_moveToOutFIFO &&
	     inf_dp0_bram_serverAdapterB_3_s1[0] ;
  assign inf_dp0_bram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h72557 ;
  assign inf_dp0_bram_serverAdapterB_3_outData_outData$whas =
	     inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h13882[1] || ab__h13882[0]) ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_2$whas =
	     inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign inf_dp0_bram_serverAdapterB_3_writeWithResp$wget = ab__h13882 ;
  assign inf_dp0_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign inf_dp0_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h13882[1] || ab__h13882[0] } ;
  assign inf_dp0_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign inf_dp0_wci_wciReq$wget =
	     { inf_cp$wci_Vm_13_MCmd,
	       inf_cp$wci_Vm_13_MAddrSpace,
	       inf_cp$wci_Vm_13_MByteEn,
	       inf_cp$wci_Vm_13_MAddr,
	       inf_cp$wci_Vm_13_MData } ;
  assign inf_dp0_wci_wciReq$whas = 1'd1 ;
  assign inf_dp0_wci_respF_x_wire$wget =
	     MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 ;
  assign inf_dp0_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_inf_dp0_wci_cfrd ||
	     WILL_FIRE_RL_inf_dp0_wci_cfwr ;
  assign inf_dp0_wci_wEdge$wget = inf_dp0_wci_reqF$D_OUT[36:34] ;
  assign inf_dp0_wci_wEdge$whas = WILL_FIRE_RL_inf_dp0_wci_ctl_op_start ;
  assign inf_dp0_wci_sFlagReg_1$wget = 1'b0 ;
  assign inf_dp0_wci_sFlagReg_1$whas = 1'b0 ;
  assign inf_dp0_wci_ctlAckReg_1$wget = 1'd1 ;
  assign inf_dp0_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_inf_dp0_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_inf_dp0_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;
  assign inf_dp0_wti_wtiReq$wget = 67'h0 ;
  assign inf_dp0_wti_wtiReq$whas = 1'b0 ;
  assign inf_dp0_tlp_remStart_1$wget = 1'd1 ;
  assign inf_dp0_tlp_remStart_1$whas =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta ;
  assign inf_dp0_tlp_remDone_1$wget = 1'd1 ;
  assign inf_dp0_tlp_remDone_1$whas =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody ;
  assign inf_dp0_tlp_nearBufReady_1$wget = 1'd1 ;
  assign inf_dp0_tlp_nearBufReady_1$whas = CAN_FIRE_RL_inf_dp0_rRdy_1 ;
  assign inf_dp0_tlp_farBufReady_1$wget = 1'd1 ;
  assign inf_dp0_tlp_farBufReady_1$whas = CAN_FIRE_RL_inf_dp0_rFRdy_1 ;
  assign inf_dp0_tlp_creditReady_1$wget = 1'd1 ;
  assign inf_dp0_tlp_creditReady_1$whas = CAN_FIRE_RL_inf_dp0_rCredit_1 ;
  assign inf_dp0_tlp_dpControl$wget = inf_dp0_dpControl ;
  assign inf_dp0_tlp_dpControl$whas = 1'd1 ;
  assign inf_dp0_tlp_pullTagMatch_1$wget =
	     tagm__h40263 == inf_dp0_tlp_inF$D_OUT[47:40] &&
	     inf_dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ__ETC___d908 ;
  assign inf_dp0_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeaderTag ;
  assign inf_dp0_wmi_wmi_wmiReq$wget =
	     { inf_dp0_wmi_Es_mCmd_w$wget, app_appW2_wmi_reqF_q_0[28:0] } ;
  assign inf_dp0_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign inf_dp0_wmi_wmi_wmiMFlag$wget =
	     app_appW2_wmi_sThreadBusy_d ? 32'd0 : app_appW2_wmi_mFlagF_q_0 ;
  assign inf_dp0_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign inf_dp0_wmi_wmi_wmiDh$wget =
	     { CAN_FIRE_RL_mDataVConnect, app_appW2_wmi_dhF_q_0[36:0] } ;
  assign inf_dp0_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign inf_dp0_wmi_wmi_respF_x_wire$wget =
	     MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign inf_dp0_wmi_wmi_respF_x_wire$whas =
	     CAN_FIRE_RL_inf_dp0_wmi_doReadResp ;
  assign inf_dp0_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign inf_dp0_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_inf_dp0_bml_lbar ;
  assign inf_dp0_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign inf_dp0_wmi_wmi_peerIsReady_1$whas = CAN_FIRE_RL_mRstConnect ;
  assign inf_dp0_wmi_wmi_sThreadBusy_dw$wget =
	     inf_dp0_wmi_wmi_reqF_countReg > 2'd1 ;
  assign inf_dp0_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_req ;
  assign inf_dp0_wmi_wmi_sDataThreadBusy_dw$wget =
	     inf_dp0_wmi_wmi_dhF_countReg > 2'd1 ;
  assign inf_dp0_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_backpressure_dh ;
  assign inf_dp0_wmi_mesgStart_1$wget = 1'd1 ;
  assign inf_dp0_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest && !inf_dp0_wmi_mesgBusy ;
  assign inf_dp0_wmi_mesgDone_1$wget = 1'd1 ;
  assign inf_dp0_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;
  assign inf_dp0_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign inf_dp0_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_inf_dp0_rRdy ;
  assign inf_dp0_wmi_dpControl$wget = inf_dp0_dpControl ;
  assign inf_dp0_wmi_dpControl$whas = 1'd1 ;
  assign inf_dp0_wmi_nowW$wget = inf_dp0_wti_nowReq[63:0] ;
  assign inf_dp0_wmi_nowW$whas = 1'd1 ;
  assign inf_dp0_bml_lclBufStart_1$wget = 1'd1 ;
  assign inf_dp0_bml_lclBufStart_1$whas = inf_dp0_wmi_mesgStart ;
  assign inf_dp0_bml_lclBufDone_1$wget = 1'd1 ;
  assign inf_dp0_bml_lclBufDone_1$whas = inf_dp0_wmi_mesgDone ;
  assign inf_dp0_bml_remStart_1$wget = 1'd1 ;
  assign inf_dp0_bml_remStart_1$whas = inf_dp0_tlp_remStart ;
  assign inf_dp0_bml_remDone_1$wget = 1'd1 ;
  assign inf_dp0_bml_remDone_1$whas = inf_dp0_tlp_remDone ;
  assign inf_dp0_bml_fabDone_1$wget = 1'd1 ;
  assign inf_dp0_bml_fabDone_1$whas =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     inf_dp0_dpControl[1:0] != 2'd1 ;
  assign inf_dp0_bml_fabAvail_1$wget = 1'd1 ;
  assign inf_dp0_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     inf_dp0_dpControl[1:0] == 2'd1 ;
  assign inf_dp0_bml_dpControl$wget = inf_dp0_dpControl ;
  assign inf_dp0_bml_dpControl$whas = 1'd1 ;
  assign inf_dp0_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_13_MCmd ;
  assign inf_dp0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign inf_dp0_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_13_MAddrSpace ;
  assign inf_dp0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign inf_dp0_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_13_MAddr ;
  assign inf_dp0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign inf_dp0_wci_Es_mData_w$wget = inf_cp$wci_Vm_13_MData ;
  assign inf_dp0_wci_Es_mData_w$whas = 1'd1 ;
  assign inf_dp0_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_13_MByteEn ;
  assign inf_dp0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign inf_dp0_wmi_Es_mCmd_w$wget =
	     app_appW2_wmi_sThreadBusy_d ?
	       3'd0 :
	       app_appW2_wmi_reqF_q_0[31:29] ;
  assign inf_dp0_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign inf_dp0_wmi_Es_mReqInfo_w$wget = app_appW2_wmi_reqF_q_0[27] ;
  assign inf_dp0_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign inf_dp0_wmi_Es_mAddrSpace_w$wget = app_appW2_wmi_reqF_q_0[26] ;
  assign inf_dp0_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign inf_dp0_wmi_Es_mAddr_w$wget = app_appW2_wmi_reqF_q_0[25:12] ;
  assign inf_dp0_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign inf_dp0_wmi_Es_mBurstLength_w$wget = app_appW2_wmi_reqF_q_0[11:0] ;
  assign inf_dp0_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign inf_dp0_wmi_Es_mData_w$wget = app_appW2_wmi_dhF_q_0[35:4] ;
  assign inf_dp0_wmi_Es_mData_w$whas = 1'd1 ;
  assign inf_dp0_wmi_Es_mDataByteEn_w$wget = app_appW2_wmi_dhF_q_0[3:0] ;
  assign inf_dp0_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign inf_dp1_bram_serverAdapterA_outData_enqData$wget =
	     inf_dp1_bram_memory$DOA ;
  assign inf_dp1_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterA_s1[0] ;
  assign inf_dp1_bram_serverAdapterA_outData_outData$wget =
	     inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterA_outDataCore$D_OUT :
	       inf_dp1_bram_memory$DOA ;
  assign inf_dp1_bram_serverAdapterA_outData_outData$whas =
	     inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h82800[1] || ab__h82800[0]) ;
  assign inf_dp1_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_cnt_2$whas =
	     inf_dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterA_writeWithResp$wget = ab__h82800 ;
  assign inf_dp1_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h82800[1] || ab__h82800[0] } ;
  assign inf_dp1_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_outData_enqData$wget =
	     inf_dp1_bram_memory$DOB ;
  assign inf_dp1_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterB_s1[0] ;
  assign inf_dp1_bram_serverAdapterB_outData_outData$wget =
	     y_avValue__h151560 ;
  assign inf_dp1_bram_serverAdapterB_outData_outData$whas =
	     inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h84199[1] || ab__h84199[0]) ;
  assign inf_dp1_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterB_cnt_2$whas =
	     inf_dp1_bram_serverAdapterB_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterB_writeWithResp$wget = ab__h84199 ;
  assign inf_dp1_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h84199[1] || ab__h84199[0] } ;
  assign inf_dp1_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterA_1_outData_enqData$wget =
	     inf_dp1_bram_memory_1$DOA ;
  assign inf_dp1_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterA_1_s1[0] ;
  assign inf_dp1_bram_serverAdapterA_1_outData_outData$wget =
	     inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterA_1_outDataCore$D_OUT :
	       inf_dp1_bram_memory_1$DOA ;
  assign inf_dp1_bram_serverAdapterA_1_outData_outData$whas =
	     inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h85729[1] || ab__h85729[0]) ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_2$whas =
	     inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterA_1_writeWithResp$wget = ab__h85729 ;
  assign inf_dp1_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h85729[1] || ab__h85729[0] } ;
  assign inf_dp1_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_1_outData_enqData$wget =
	     inf_dp1_bram_memory_1$DOB ;
  assign inf_dp1_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterB_1_s1[0] ;
  assign inf_dp1_bram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h151580 ;
  assign inf_dp1_bram_serverAdapterB_1_outData_outData$whas =
	     inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h87126[1] || ab__h87126[0]) ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_2$whas =
	     inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterB_1_writeWithResp$wget = ab__h87126 ;
  assign inf_dp1_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h87126[1] || ab__h87126[0] } ;
  assign inf_dp1_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterA_2_outData_enqData$wget =
	     inf_dp1_bram_memory_2$DOA ;
  assign inf_dp1_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterA_2_s1[0] ;
  assign inf_dp1_bram_serverAdapterA_2_outData_outData$wget =
	     inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterA_2_outDataCore$D_OUT :
	       inf_dp1_bram_memory_2$DOA ;
  assign inf_dp1_bram_serverAdapterA_2_outData_outData$whas =
	     inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h88656[1] || ab__h88656[0]) ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_2$whas =
	     inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterA_2_writeWithResp$wget = ab__h88656 ;
  assign inf_dp1_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h88656[1] || ab__h88656[0] } ;
  assign inf_dp1_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_2_outData_enqData$wget =
	     inf_dp1_bram_memory_2$DOB ;
  assign inf_dp1_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterB_2_s1[0] ;
  assign inf_dp1_bram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h151600 ;
  assign inf_dp1_bram_serverAdapterB_2_outData_outData$whas =
	     inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h90053[1] || ab__h90053[0]) ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_2$whas =
	     inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterB_2_writeWithResp$wget = ab__h90053 ;
  assign inf_dp1_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h90053[1] || ab__h90053[0] } ;
  assign inf_dp1_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterA_3_outData_enqData$wget =
	     inf_dp1_bram_memory_3$DOA ;
  assign inf_dp1_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterA_3_s1[0] ;
  assign inf_dp1_bram_serverAdapterA_3_outData_outData$wget =
	     inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterA_3_outDataCore$D_OUT :
	       inf_dp1_bram_memory_3$DOA ;
  assign inf_dp1_bram_serverAdapterA_3_outData_outData$whas =
	     inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h91583[1] || ab__h91583[0]) ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_2$whas =
	     inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterA_3_writeWithResp$wget = ab__h91583 ;
  assign inf_dp1_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h91583[1] || ab__h91583[0] } ;
  assign inf_dp1_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_3_outData_enqData$wget =
	     inf_dp1_bram_memory_3$DOB ;
  assign inf_dp1_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_moveToOutFIFO &&
	     inf_dp1_bram_serverAdapterB_3_s1[0] ;
  assign inf_dp1_bram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h151620 ;
  assign inf_dp1_bram_serverAdapterB_3_outData_outData$whas =
	     inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h92980[1] || ab__h92980[0]) ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_2$whas =
	     inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign inf_dp1_bram_serverAdapterB_3_writeWithResp$wget = ab__h92980 ;
  assign inf_dp1_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign inf_dp1_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h92980[1] || ab__h92980[0] } ;
  assign inf_dp1_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign inf_dp1_wci_wciReq$wget =
	     { inf_cp$wci_Vm_14_MCmd,
	       inf_cp$wci_Vm_14_MAddrSpace,
	       inf_cp$wci_Vm_14_MByteEn,
	       inf_cp$wci_Vm_14_MAddr,
	       inf_cp$wci_Vm_14_MData } ;
  assign inf_dp1_wci_wciReq$whas = 1'd1 ;
  assign inf_dp1_wci_respF_x_wire$wget =
	     MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 ;
  assign inf_dp1_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_inf_dp1_wci_cfrd ||
	     WILL_FIRE_RL_inf_dp1_wci_cfwr ;
  assign inf_dp1_wci_wEdge$wget = inf_dp1_wci_reqF$D_OUT[36:34] ;
  assign inf_dp1_wci_wEdge$whas = WILL_FIRE_RL_inf_dp1_wci_ctl_op_start ;
  assign inf_dp1_wci_sFlagReg_1$wget = 1'b0 ;
  assign inf_dp1_wci_sFlagReg_1$whas = 1'b0 ;
  assign inf_dp1_wci_ctlAckReg_1$wget = 1'd1 ;
  assign inf_dp1_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_inf_dp1_bml_wci_ctrl_OrE ||
	     WILL_FIRE_RL_inf_dp1_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;
  assign inf_dp1_wti_wtiReq$wget = 67'h0 ;
  assign inf_dp1_wti_wtiReq$whas = 1'b0 ;
  assign inf_dp1_tlp_remStart_1$wget = 1'd1 ;
  assign inf_dp1_tlp_remStart_1$whas =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta ;
  assign inf_dp1_tlp_remDone_1$wget = 1'd1 ;
  assign inf_dp1_tlp_remDone_1$whas =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody ;
  assign inf_dp1_tlp_nearBufReady_1$wget = 1'd1 ;
  assign inf_dp1_tlp_nearBufReady_1$whas = CAN_FIRE_RL_inf_dp1_rRdy_1 ;
  assign inf_dp1_tlp_farBufReady_1$wget = 1'd1 ;
  assign inf_dp1_tlp_farBufReady_1$whas = CAN_FIRE_RL_inf_dp1_rFRdy_1 ;
  assign inf_dp1_tlp_creditReady_1$wget = 1'd1 ;
  assign inf_dp1_tlp_creditReady_1$whas = CAN_FIRE_RL_inf_dp1_rCredit_1 ;
  assign inf_dp1_tlp_dpControl$wget = inf_dp1_dpControl ;
  assign inf_dp1_tlp_dpControl$whas = 1'd1 ;
  assign inf_dp1_tlp_pullTagMatch_1$wget =
	     tagm__h119326 == inf_dp1_tlp_inF$D_OUT[47:40] &&
	     inf_dp1_tlp_inF_first__084_BITS_63_TO_56_087_E_ETC___d3094 ;
  assign inf_dp1_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeaderTag ;
  assign inf_dp1_wmi_wmi_wmiReq$wget =
	     { inf_dp1_wmi_Es_mCmd_w$wget, app_appW4_wmi_reqF_q_0[28:0] } ;
  assign inf_dp1_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign inf_dp1_wmi_wmi_wmiMFlag$wget =
	     app_appW4_wmi_sThreadBusy_d ? 32'd0 : app_appW4_wmi_mFlagF_q_0 ;
  assign inf_dp1_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign inf_dp1_wmi_wmi_wmiDh$wget =
	     { CAN_FIRE_RL_mDataVConnect_1, app_appW4_wmi_dhF_q_0[36:0] } ;
  assign inf_dp1_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign inf_dp1_wmi_wmi_respF_x_wire$wget =
	     MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 ;
  assign inf_dp1_wmi_wmi_respF_x_wire$whas =
	     CAN_FIRE_RL_inf_dp1_wmi_doReadResp ;
  assign inf_dp1_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign inf_dp1_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_inf_dp1_bml_lbar ;
  assign inf_dp1_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign inf_dp1_wmi_wmi_peerIsReady_1$whas = CAN_FIRE_RL_mRstConnect_1 ;
  assign inf_dp1_wmi_wmi_sThreadBusy_dw$wget =
	     inf_dp1_wmi_wmi_reqF_countReg > 2'd1 ;
  assign inf_dp1_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_req ;
  assign inf_dp1_wmi_wmi_sDataThreadBusy_dw$wget =
	     inf_dp1_wmi_wmi_dhF_countReg > 2'd1 ;
  assign inf_dp1_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_backpressure_dh ;
  assign inf_dp1_wmi_mesgStart_1$wget = 1'd1 ;
  assign inf_dp1_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest && !inf_dp1_wmi_mesgBusy ;
  assign inf_dp1_wmi_mesgDone_1$wget = 1'd1 ;
  assign inf_dp1_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;
  assign inf_dp1_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign inf_dp1_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_inf_dp1_rRdy ;
  assign inf_dp1_wmi_dpControl$wget = inf_dp1_dpControl ;
  assign inf_dp1_wmi_dpControl$whas = 1'd1 ;
  assign inf_dp1_wmi_nowW$wget = inf_dp1_wti_nowReq[63:0] ;
  assign inf_dp1_wmi_nowW$whas = 1'd1 ;
  assign inf_dp1_bml_lclBufStart_1$wget = 1'd1 ;
  assign inf_dp1_bml_lclBufStart_1$whas = inf_dp1_wmi_mesgStart ;
  assign inf_dp1_bml_lclBufDone_1$wget = 1'd1 ;
  assign inf_dp1_bml_lclBufDone_1$whas = inf_dp1_wmi_mesgDone ;
  assign inf_dp1_bml_remStart_1$wget = 1'd1 ;
  assign inf_dp1_bml_remStart_1$whas = inf_dp1_tlp_remStart ;
  assign inf_dp1_bml_remDone_1$wget = 1'd1 ;
  assign inf_dp1_bml_remDone_1$whas = inf_dp1_tlp_remDone ;
  assign inf_dp1_bml_fabDone_1$wget = 1'd1 ;
  assign inf_dp1_bml_fabDone_1$whas =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     inf_dp1_dpControl[1:0] != 2'd1 ;
  assign inf_dp1_bml_fabAvail_1$wget = 1'd1 ;
  assign inf_dp1_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     inf_dp1_dpControl[1:0] == 2'd1 ;
  assign inf_dp1_bml_dpControl$wget = inf_dp1_dpControl ;
  assign inf_dp1_bml_dpControl$whas = 1'd1 ;
  assign inf_dp1_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_14_MCmd ;
  assign inf_dp1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign inf_dp1_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_14_MAddrSpace ;
  assign inf_dp1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign inf_dp1_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_14_MAddr ;
  assign inf_dp1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign inf_dp1_wci_Es_mData_w$wget = inf_cp$wci_Vm_14_MData ;
  assign inf_dp1_wci_Es_mData_w$whas = 1'd1 ;
  assign inf_dp1_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_14_MByteEn ;
  assign inf_dp1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign inf_dp1_wmi_Es_mCmd_w$wget =
	     app_appW4_wmi_sThreadBusy_d ?
	       3'd0 :
	       app_appW4_wmi_reqF_q_0[31:29] ;
  assign inf_dp1_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign inf_dp1_wmi_Es_mReqInfo_w$wget = app_appW4_wmi_reqF_q_0[27] ;
  assign inf_dp1_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign inf_dp1_wmi_Es_mAddrSpace_w$wget = app_appW4_wmi_reqF_q_0[26] ;
  assign inf_dp1_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign inf_dp1_wmi_Es_mAddr_w$wget = app_appW4_wmi_reqF_q_0[25:12] ;
  assign inf_dp1_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign inf_dp1_wmi_Es_mBurstLength_w$wget = app_appW4_wmi_reqF_q_0[11:0] ;
  assign inf_dp1_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign inf_dp1_wmi_Es_mData_w$wget = app_appW4_wmi_dhF_q_0[35:4] ;
  assign inf_dp1_wmi_Es_mData_w$whas = 1'd1 ;
  assign inf_dp1_wmi_Es_mDataByteEn_w$wget = app_appW4_wmi_dhF_q_0[3:0] ;
  assign inf_dp1_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign app_appW2_wci_wciReq$wget =
	     { inf_cp$wci_Vm_2_MCmd,
	       inf_cp$wci_Vm_2_MAddrSpace,
	       inf_cp$wci_Vm_2_MByteEn,
	       inf_cp$wci_Vm_2_MAddr,
	       inf_cp$wci_Vm_2_MData } ;
  assign app_appW2_wci_wciReq$whas = 1'd1 ;
  assign app_appW2_wci_respF_x_wire$wget =
	     MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 ;
  assign app_appW2_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_complete ||
	     WILL_FIRE_RL_app_appW2_wci_cfrd ||
	     WILL_FIRE_RL_app_appW2_wci_cfwr ;
  assign app_appW2_wci_wEdge$wget = app_appW2_wci_reqF$D_OUT[36:34] ;
  assign app_appW2_wci_wEdge$whas = WILL_FIRE_RL_app_appW2_wci_ctl_op_start ;
  assign app_appW2_wci_sFlagReg_1$wget = 1'b0 ;
  assign app_appW2_wci_sFlagReg_1$whas = 1'b0 ;
  assign app_appW2_wci_ctlAckReg_1$wget = 1'd1 ;
  assign app_appW2_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_app_appW2_wci_ctrl_OrE ||
	     WILL_FIRE_RL_app_appW2_wci_ctrl_IsO ||
	     WILL_FIRE_RL_app_appW2_wci_ctrl_EiI ;
  assign app_appW2_wmi_reqF_x_wire$wget =
	     MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 ;
  assign app_appW2_wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise ;
  assign app_appW2_wmi_mFlagF_x_wire$wget = value__h169350 ;
  assign app_appW2_wmi_mFlagF_x_wire$whas =
	     app_appW2_wmi_mFlagF_enqueueing$whas ;
  assign app_appW2_wmi_dhF_x_wire$wget =
	     MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2 ;
  assign app_appW2_wmi_dhF_x_wire$whas =
	     MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign app_appW2_wmi_wmiResponse$wget = inf_dp0_wmi_wmi_respF_q_0 ;
  assign app_appW2_wmi_wmiResponse$whas = 1'd1 ;
  assign app_appW2_wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign app_appW2_wmi_sThreadBusy_d_1$whas = CAN_FIRE_RL_stbConnect_8 ;
  assign app_appW2_wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign app_appW2_wmi_sDataThreadBusy_d_1$whas = CAN_FIRE_RL_sdtbConnect ;
  assign app_appW2_wmi_operateD_1$wget = 1'd1 ;
  assign app_appW2_wmi_operateD_1$whas =
	     CAN_FIRE_RL_app_appW2_operating_actions ;
  assign app_appW2_wmi_peerIsReady_1$wget = 1'd1 ;
  assign app_appW2_wmi_peerIsReady_1$whas = CAN_FIRE_RL_sRstConnect ;
  assign app_appW2_wsiM_reqFifo_x_wire$wget =
	     MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign app_appW2_wsiM_reqFifo_x_wire$whas =
	     app_appW2_wsiM_reqFifo_enqueueing$whas ;
  assign app_appW2_wsiM_operateD_1$wget = 1'd1 ;
  assign app_appW2_wsiM_operateD_1$whas =
	     CAN_FIRE_RL_app_appW2_operating_actions ;
  assign app_appW2_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign app_appW2_wsiM_peerIsReady_1$whas = CAN_FIRE_RL_app_sRstConnect ;
  assign app_appW2_wsiS_wsiReq$wget = 61'd0 ;
  assign app_appW2_wsiS_wsiReq$whas = 1'd1 ;
  assign app_appW2_wsiS_operateD_1$wget = 1'd1 ;
  assign app_appW2_wsiS_operateD_1$whas =
	     CAN_FIRE_RL_app_appW2_operating_actions ;
  assign app_appW2_wsiS_peerIsReady_1$wget = 1'b0 ;
  assign app_appW2_wsiS_peerIsReady_1$whas = 1'b0 ;
  assign app_appW2_wsiS_sThreadBusy_dw$wget =
	     app_appW2_wsiS_reqFifo_countReg > 2'd1 ;
  assign app_appW2_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_app_appW2_wsiS_backpressure ;
  assign app_appW2_fabRespCredit_acc_v1$wget = b__h177740 ;
  assign app_appW2_fabRespCredit_acc_v1$whas =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ;
  assign app_appW2_fabRespCredit_acc_v2$wget = 12'd1 ;
  assign app_appW2_fabRespCredit_acc_v2$whas =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi ;
  assign app_appW2_mesgPreRequest_1$wget = 1'd1 ;
  assign app_appW2_mesgPreRequest_1$whas =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest ;
  assign app_appW2_respF_wDataIn$wget =
	     { 3'd1,
	       app_appW2_unrollCnt == 16'd1,
	       !app_appW2_smaCtrl[5],
	       sendData_burstLength__h181388,
	       app_appW2_wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h181390,
	       app_appW2_thisMesg[23:16] } ;
  assign app_appW2_respF_wDataIn$whas = app_appW2_respF_pwEnqueue$whas ;
  assign app_appW2_respF_wDataOut$wget =
	     MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign app_appW2_respF_wDataOut$whas = 1'd1 ;
  assign app_appW2_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_2_MCmd ;
  assign app_appW2_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_appW2_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_2_MAddrSpace ;
  assign app_appW2_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_appW2_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_2_MAddr ;
  assign app_appW2_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_appW2_wci_Es_mData_w$wget = inf_cp$wci_Vm_2_MData ;
  assign app_appW2_wci_Es_mData_w$whas = 1'd1 ;
  assign app_appW2_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_2_MByteEn ;
  assign app_appW2_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign app_appW2_wsi_Es_mCmd_w$wget = 3'h0 ;
  assign app_appW2_wsi_Es_mCmd_w$whas = 1'b0 ;
  assign app_appW2_wsi_Es_mBurstLength_w$wget = 12'h0 ;
  assign app_appW2_wsi_Es_mBurstLength_w$whas = 1'b0 ;
  assign app_appW2_wsi_Es_mData_w$wget = 32'h0 ;
  assign app_appW2_wsi_Es_mData_w$whas = 1'b0 ;
  assign app_appW2_wsi_Es_mByteEn_w$wget = 4'h0 ;
  assign app_appW2_wsi_Es_mByteEn_w$whas = 1'b0 ;
  assign app_appW2_wsi_Es_mReqInfo_w$wget = 8'h0 ;
  assign app_appW2_wsi_Es_mReqInfo_w$whas = 1'b0 ;
  assign app_appW2_wmi_Em_sResp_w$wget = inf_dp0_wmi_wmi_respF_q_0[33:32] ;
  assign app_appW2_wmi_Em_sResp_w$whas = 1'd1 ;
  assign app_appW2_wmi_Em_sData_w$wget = inf_dp0_wmi_wmi_respF_q_0[31:0] ;
  assign app_appW2_wmi_Em_sData_w$whas = 1'd1 ;
  assign app_appW3_wci_wciReq$wget =
	     { inf_cp$wci_Vm_3_MCmd,
	       inf_cp$wci_Vm_3_MAddrSpace,
	       inf_cp$wci_Vm_3_MByteEn,
	       inf_cp$wci_Vm_3_MAddr,
	       inf_cp$wci_Vm_3_MData } ;
  assign app_appW3_wci_wciReq$whas = 1'd1 ;
  assign app_appW3_wci_respF_x_wire$wget =
	     MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 ;
  assign app_appW3_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_app_appW3_wci_cfrd ||
	     WILL_FIRE_RL_app_appW3_wci_cfwr ;
  assign app_appW3_wci_wEdge$wget = app_appW3_wci_reqF$D_OUT[36:34] ;
  assign app_appW3_wci_wEdge$whas = WILL_FIRE_RL_app_appW3_wci_ctl_op_start ;
  assign app_appW3_wci_sFlagReg_1$wget = 1'b0 ;
  assign app_appW3_wci_sFlagReg_1$whas = 1'b0 ;
  assign app_appW3_wci_ctlAckReg_1$wget = 1'd1 ;
  assign app_appW3_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_app_appW3_wci_ctrl_OrE ||
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ||
	     WILL_FIRE_RL_app_appW3_wci_ctrl_EiI ;
  assign app_appW3_wsiS_wsiReq$wget =
	     { app_appW3_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_app_mReqLConnect,
	       CAN_FIRE_RL_app_mBurstPConnect,
	       app_appW3_wsi_Es_mBurstLength_w$wget,
	       app_appW2_wsiM_reqFifo_q_0[43:8],
	       app_appW3_wsi_Es_mReqInfo_w$wget } ;
  assign app_appW3_wsiS_wsiReq$whas = 1'd1 ;
  assign app_appW3_wsiS_operateD_1$wget = 1'd1 ;
  assign app_appW3_wsiS_operateD_1$whas =
	     CAN_FIRE_RL_app_appW3_operating_actions ;
  assign app_appW3_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign app_appW3_wsiS_peerIsReady_1$whas = CAN_FIRE_RL_app_mRstConnect ;
  assign app_appW3_wsiS_sThreadBusy_dw$wget =
	     app_appW3_wsiS_reqFifo_countReg > 2'd1 ;
  assign app_appW3_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_app_appW3_wsiS_backpressure ;
  assign app_appW3_wsiM_reqFifo_x_wire$wget =
	     MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign app_appW3_wsiM_reqFifo_x_wire$whas =
	     WILL_FIRE_RL_app_appW3_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_app_appW3_wsipass_doMessagePush ;
  assign app_appW3_wsiM_operateD_1$wget = 1'd1 ;
  assign app_appW3_wsiM_operateD_1$whas =
	     CAN_FIRE_RL_app_appW3_operating_actions ;
  assign app_appW3_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign app_appW3_wsiM_peerIsReady_1$whas = CAN_FIRE_RL_app_sRstConnect_1 ;
  assign app_appW3_wmemi_reqF_x_wire$wget =
	     MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 ;
  assign app_appW3_wmemi_reqF_x_wire$whas =
	     WILL_FIRE_RL_app_appW3_delay_write_req ||
	     WILL_FIRE_RL_app_appW3_delay_read_req ;
  assign app_appW3_wmemi_dhF_x_wire$wget =
	     MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 ;
  assign app_appW3_wmemi_dhF_x_wire$whas =
	     CAN_FIRE_RL_app_appW3_delay_write_req ;
  assign app_appW3_wmemi_wmemiResponse$wget =
	     { wmemiM_SResp, wmemiM_SRespLast, wmemiM_SData } ;
  assign app_appW3_wmemi_wmemiResponse$whas = 1'd1 ;
  assign app_appW3_wmemi_sCmdAccept_w$wget = 1'd1 ;
  assign app_appW3_wmemi_sCmdAccept_w$whas = wmemiM_SCmdAccept ;
  assign app_appW3_wmemi_sDataAccept_w$wget = 1'd1 ;
  assign app_appW3_wmemi_sDataAccept_w$whas = wmemiM_SDataAccept ;
  assign app_appW3_wmemi_operateD_1$wget = 1'd1 ;
  assign app_appW3_wmemi_operateD_1$whas =
	     CAN_FIRE_RL_app_appW3_operating_actions ;
  assign app_appW3_wmemi_peerIsReady_1$wget = 1'b0 ;
  assign app_appW3_wmemi_peerIsReady_1$whas = 1'b0 ;
  assign app_appW3_mesgWF_wDataIn$wget = app_appW3_wsiS_reqFifo$D_OUT[43:12] ;
  assign app_appW3_mesgWF_wDataIn$whas =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ;
  assign app_appW3_mesgWF_wDataOut$wget = data__h204908 ;
  assign app_appW3_mesgWF_wDataOut$whas = 1'd1 ;
  assign app_appW3_dlyWordsStored_acc_v1$wget = 25'd1 ;
  assign app_appW3_dlyWordsStored_acc_v1$whas =
	     CAN_FIRE_RL_app_appW3_delay_write_req ;
  assign app_appW3_dlyWordsStored_acc_v2$wget = 25'd33554431 ;
  assign app_appW3_dlyWordsStored_acc_v2$whas =
	     WILL_FIRE_RL_app_appW3_delay_read_req ;
  assign app_appW3_dlyReadCredit_acc_v1$wget = 8'd255 ;
  assign app_appW3_dlyReadCredit_acc_v1$whas =
	     WILL_FIRE_RL_app_appW3_delay_read_req ;
  assign app_appW3_dlyReadCredit_acc_v2$wget = 8'd1 ;
  assign app_appW3_dlyReadCredit_acc_v2$whas =
	     CAN_FIRE_RL_app_appW3_delay_Fb2Fc ;
  assign app_appW3_dlyReadyToWrite_acc_v1$wget = 16'd1 ;
  assign app_appW3_dlyReadyToWrite_acc_v1$whas =
	     WILL_FIRE_RL_app_appW3_wrtSer_body ||
	     WILL_FIRE_RL_app_appW3_wrtSer_begin ;
  assign app_appW3_dlyReadyToWrite_acc_v2$wget = 16'd65535 ;
  assign app_appW3_dlyReadyToWrite_acc_v2$whas =
	     CAN_FIRE_RL_app_appW3_delay_write_req ;
  assign app_appW3_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_3_MCmd ;
  assign app_appW3_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_appW3_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_3_MAddrSpace ;
  assign app_appW3_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_appW3_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_3_MAddr ;
  assign app_appW3_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_appW3_wci_Es_mData_w$wget = inf_cp$wci_Vm_3_MData ;
  assign app_appW3_wci_Es_mData_w$whas = 1'd1 ;
  assign app_appW3_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_3_MByteEn ;
  assign app_appW3_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign app_appW3_wsi_Es_mCmd_w$wget =
	     app_appW2_wsiM_sThreadBusy_d ?
	       3'd0 :
	       app_appW2_wsiM_reqFifo_q_0[60:58] ;
  assign app_appW3_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign app_appW3_wsi_Es_mBurstLength_w$wget =
	     app_appW2_wsiM_sThreadBusy_d ?
	       12'd0 :
	       app_appW2_wsiM_reqFifo_q_0[55:44] ;
  assign app_appW3_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign app_appW3_wsi_Es_mData_w$wget = app_appW2_wsiM_reqFifo_q_0[43:12] ;
  assign app_appW3_wsi_Es_mData_w$whas = 1'd1 ;
  assign app_appW3_wsi_Es_mByteEn_w$wget = app_appW2_wsiM_reqFifo_q_0[11:8] ;
  assign app_appW3_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign app_appW3_wsi_Es_mReqInfo_w$wget =
	     app_appW2_wsiM_sThreadBusy_d ?
	       8'd0 :
	       app_appW2_wsiM_reqFifo_q_0[7:0] ;
  assign app_appW3_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign app_appW3_wmemi_Em_sResp_w$wget = wmemiM_SResp ;
  assign app_appW3_wmemi_Em_sResp_w$whas = 1'd1 ;
  assign app_appW3_wmemi_Em_sData_w$wget = wmemiM_SData ;
  assign app_appW3_wmemi_Em_sData_w$whas = 1'd1 ;
  assign app_appW4_wci_wciReq$wget =
	     { inf_cp$wci_Vm_4_MCmd,
	       inf_cp$wci_Vm_4_MAddrSpace,
	       inf_cp$wci_Vm_4_MByteEn,
	       inf_cp$wci_Vm_4_MAddr,
	       inf_cp$wci_Vm_4_MData } ;
  assign app_appW4_wci_wciReq$whas = 1'd1 ;
  assign app_appW4_wci_respF_x_wire$wget =
	     MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 ;
  assign app_appW4_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_complete ||
	     WILL_FIRE_RL_app_appW4_wci_cfrd ||
	     WILL_FIRE_RL_app_appW4_wci_cfwr ;
  assign app_appW4_wci_wEdge$wget = app_appW4_wci_reqF$D_OUT[36:34] ;
  assign app_appW4_wci_wEdge$whas = WILL_FIRE_RL_app_appW4_wci_ctl_op_start ;
  assign app_appW4_wci_sFlagReg_1$wget = 1'b0 ;
  assign app_appW4_wci_sFlagReg_1$whas = 1'b0 ;
  assign app_appW4_wci_ctlAckReg_1$wget = 1'd1 ;
  assign app_appW4_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_app_appW4_wci_ctrl_OrE ||
	     WILL_FIRE_RL_app_appW4_wci_ctrl_IsO ||
	     WILL_FIRE_RL_app_appW4_wci_ctrl_EiI ;
  assign app_appW4_wmi_reqF_x_wire$wget =
	     MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 ;
  assign app_appW4_wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise ;
  assign app_appW4_wmi_mFlagF_x_wire$wget = value__h216769 ;
  assign app_appW4_wmi_mFlagF_x_wire$whas =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest && x__h228511 ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ;
  assign app_appW4_wmi_dhF_x_wire$wget =
	     MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1 ;
  assign app_appW4_wmi_dhF_x_wire$whas =
	     MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign app_appW4_wmi_wmiResponse$wget = inf_dp1_wmi_wmi_respF_q_0 ;
  assign app_appW4_wmi_wmiResponse$whas = 1'd1 ;
  assign app_appW4_wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign app_appW4_wmi_sThreadBusy_d_1$whas = CAN_FIRE_RL_stbConnect_9 ;
  assign app_appW4_wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign app_appW4_wmi_sDataThreadBusy_d_1$whas = CAN_FIRE_RL_sdtbConnect_1 ;
  assign app_appW4_wmi_operateD_1$wget = 1'd1 ;
  assign app_appW4_wmi_operateD_1$whas =
	     CAN_FIRE_RL_app_appW4_operating_actions ;
  assign app_appW4_wmi_peerIsReady_1$wget = 1'd1 ;
  assign app_appW4_wmi_peerIsReady_1$whas = CAN_FIRE_RL_sRstConnect_1 ;
  assign app_appW4_wsiM_reqFifo_x_wire$wget =
	     MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign app_appW4_wsiM_reqFifo_x_wire$whas =
	     app_appW4_wsiM_reqFifo_enqueueing$whas ;
  assign app_appW4_wsiM_operateD_1$wget = 1'd1 ;
  assign app_appW4_wsiM_operateD_1$whas =
	     CAN_FIRE_RL_app_appW4_operating_actions ;
  assign app_appW4_wsiM_peerIsReady_1$wget = 1'b0 ;
  assign app_appW4_wsiM_peerIsReady_1$whas = 1'b0 ;
  assign app_appW4_wsiS_wsiReq$wget =
	     { app_appW4_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_app_mReqLConnect_1,
	       CAN_FIRE_RL_app_mBurstPConnect_1,
	       app_appW4_wsi_Es_mBurstLength_w$wget,
	       app_appW3_wsiM_reqFifo_q_0[43:8],
	       app_appW4_wsi_Es_mReqInfo_w$wget } ;
  assign app_appW4_wsiS_wsiReq$whas = 1'd1 ;
  assign app_appW4_wsiS_operateD_1$wget = 1'd1 ;
  assign app_appW4_wsiS_operateD_1$whas =
	     CAN_FIRE_RL_app_appW4_operating_actions ;
  assign app_appW4_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign app_appW4_wsiS_peerIsReady_1$whas = CAN_FIRE_RL_app_mRstConnect_1 ;
  assign app_appW4_wsiS_sThreadBusy_dw$wget =
	     app_appW4_wsiS_reqFifo_countReg > 2'd1 ;
  assign app_appW4_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_app_appW4_wsiS_backpressure ;
  assign app_appW4_fabRespCredit_acc_v1$wget = b__h225152 ;
  assign app_appW4_fabRespCredit_acc_v1$whas =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ;
  assign app_appW4_fabRespCredit_acc_v2$wget = 12'd1 ;
  assign app_appW4_fabRespCredit_acc_v2$whas =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi ;
  assign app_appW4_mesgPreRequest_1$wget = 1'd1 ;
  assign app_appW4_mesgPreRequest_1$whas =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest ;
  assign app_appW4_respF_wDataIn$wget =
	     { 3'd1,
	       app_appW4_unrollCnt == 16'd1,
	       !app_appW4_smaCtrl[5],
	       sendData_burstLength__h228800,
	       app_appW4_wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h228802,
	       app_appW4_thisMesg[23:16] } ;
  assign app_appW4_respF_wDataIn$whas = app_appW4_respF_pwEnqueue$whas ;
  assign app_appW4_respF_wDataOut$wget =
	     MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign app_appW4_respF_wDataOut$whas = 1'd1 ;
  assign app_appW4_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_4_MCmd ;
  assign app_appW4_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_appW4_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_4_MAddrSpace ;
  assign app_appW4_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_appW4_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_4_MAddr ;
  assign app_appW4_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_appW4_wci_Es_mData_w$wget = inf_cp$wci_Vm_4_MData ;
  assign app_appW4_wci_Es_mData_w$whas = 1'd1 ;
  assign app_appW4_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_4_MByteEn ;
  assign app_appW4_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign app_appW4_wsi_Es_mCmd_w$wget =
	     app_appW3_wsiM_sThreadBusy_d ?
	       3'd0 :
	       app_appW3_wsiM_reqFifo_q_0[60:58] ;
  assign app_appW4_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign app_appW4_wsi_Es_mBurstLength_w$wget =
	     app_appW3_wsiM_sThreadBusy_d ?
	       12'd0 :
	       app_appW3_wsiM_reqFifo_q_0[55:44] ;
  assign app_appW4_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign app_appW4_wsi_Es_mData_w$wget = app_appW3_wsiM_reqFifo_q_0[43:12] ;
  assign app_appW4_wsi_Es_mData_w$whas = 1'd1 ;
  assign app_appW4_wsi_Es_mByteEn_w$wget = app_appW3_wsiM_reqFifo_q_0[11:8] ;
  assign app_appW4_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign app_appW4_wsi_Es_mReqInfo_w$wget =
	     app_appW3_wsiM_sThreadBusy_d ?
	       8'd0 :
	       app_appW3_wsiM_reqFifo_q_0[7:0] ;
  assign app_appW4_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign app_appW4_wmi_Em_sResp_w$wget = inf_dp1_wmi_wmi_respF_q_0[33:32] ;
  assign app_appW4_wmi_Em_sResp_w$whas = 1'd1 ;
  assign app_appW4_wmi_Em_sData_w$wget = inf_dp1_wmi_wmi_respF_q_0[31:0] ;
  assign app_appW4_wmi_Em_sData_w$whas = 1'd1 ;
  assign app_tieOff0_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_0_MCmd ;
  assign app_tieOff0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_tieOff0_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_0_MAddrSpace ;
  assign app_tieOff0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_tieOff0_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_0_MAddr ;
  assign app_tieOff0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_tieOff0_wci_Es_mData_w$wget = inf_cp$wci_Vm_0_MData ;
  assign app_tieOff0_wci_Es_mData_w$whas = 1'd1 ;
  assign app_tieOff0_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_0_MByteEn ;
  assign app_tieOff0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign app_tieOff1_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_1_MCmd ;
  assign app_tieOff1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_tieOff1_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_1_MAddrSpace ;
  assign app_tieOff1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_tieOff1_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_1_MAddr ;
  assign app_tieOff1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_tieOff1_wci_Es_mData_w$wget = inf_cp$wci_Vm_1_MData ;
  assign app_tieOff1_wci_Es_mData_w$whas = 1'd1 ;
  assign app_tieOff1_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_1_MByteEn ;
  assign app_tieOff1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign app_tieOff5_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_5_MCmd ;
  assign app_tieOff5_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_tieOff5_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_5_MAddrSpace ;
  assign app_tieOff5_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_tieOff5_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_5_MAddr ;
  assign app_tieOff5_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_tieOff5_wci_Es_mData_w$wget = inf_cp$wci_Vm_5_MData ;
  assign app_tieOff5_wci_Es_mData_w$whas = 1'd1 ;
  assign app_tieOff5_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_5_MByteEn ;
  assign app_tieOff5_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign app_tieOff6_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_6_MCmd ;
  assign app_tieOff6_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_tieOff6_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_6_MAddrSpace ;
  assign app_tieOff6_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_tieOff6_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_6_MAddr ;
  assign app_tieOff6_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_tieOff6_wci_Es_mData_w$wget = inf_cp$wci_Vm_6_MData ;
  assign app_tieOff6_wci_Es_mData_w$whas = 1'd1 ;
  assign app_tieOff6_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_6_MByteEn ;
  assign app_tieOff6_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign app_tieOff7_wci_Es_mCmd_w$wget = inf_cp$wci_Vm_7_MCmd ;
  assign app_tieOff7_wci_Es_mCmd_w$whas = 1'd1 ;
  assign app_tieOff7_wci_Es_mAddrSpace_w$wget = inf_cp$wci_Vm_7_MAddrSpace ;
  assign app_tieOff7_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign app_tieOff7_wci_Es_mAddr_w$wget = inf_cp$wci_Vm_7_MAddr ;
  assign app_tieOff7_wci_Es_mAddr_w$whas = 1'd1 ;
  assign app_tieOff7_wci_Es_mData_w$wget = inf_cp$wci_Vm_7_MData ;
  assign app_tieOff7_wci_Es_mData_w$whas = 1'd1 ;
  assign app_tieOff7_wci_Es_mByteEn_w$wget = inf_cp$wci_Vm_7_MByteEn ;
  assign app_tieOff7_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign inf_dp0_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp &&
	     inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp ;
  assign inf_dp0_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadResp && inf_dp0_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_wmi_respMetadata ;
  assign inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp &&
	     inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp ;
  assign inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadResp && inf_dp0_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_wmi_respMetadata ;
  assign inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp &&
	     inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp ;
  assign inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadResp && inf_dp0_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_respMetadata ;
  assign inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp &&
	     inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp ;
  assign inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadResp && inf_dp0_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_inf_dp0_wmi_respMetadata ;
  assign inf_dp0_wci_reqF_r_enq$whas = CAN_FIRE_RL_inf_dp0_wci_reqF_enq ;
  assign inf_dp0_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_inf_dp0_wci_cfrd || WILL_FIRE_RL_inf_dp0_wci_cfwr ||
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_start ;
  assign inf_dp0_wci_reqF_r_clr$whas = 1'b0 ;
  assign inf_dp0_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_inf_dp0_wci_cfrd || WILL_FIRE_RL_inf_dp0_wci_cfwr ||
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete ;
  assign inf_dp0_wci_respF_dequeueing$whas = inf_dp0_wci_respF_c_r != 2'd0 ;
  assign inf_dp0_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign inf_dp0_wci_wci_cfwr_pw$whas =
	     inf_dp0_wci_reqF$EMPTY_N && inf_dp0_wci_reqF$D_OUT[56] &&
	     inf_dp0_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign inf_dp0_wci_wci_cfrd_pw$whas =
	     inf_dp0_wci_reqF$EMPTY_N && inf_dp0_wci_reqF$D_OUT[56] &&
	     inf_dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign inf_dp0_wci_wci_ctrl_pw$whas =
	     inf_dp0_wci_reqF$EMPTY_N && !inf_dp0_wci_reqF$D_OUT[56] &&
	     inf_dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign inf_dp0_wmi_wmi_forceSThreadBusy_pw$whas =
	     inf_dp0_dpControl[3:2] != 2'd1 && !inf_dp0_wmi_mesgMeta[128] ||
	     inf_dp0_dpControl[3:2] == 2'd1 && !inf_dp0_wmi_mesgBufReady ;
  assign inf_dp0_wmi_wmi_reqF_r_enq$whas =
	     MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_reqF_r_deq$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;
  assign inf_dp0_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign inf_dp0_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_reqF_doResetDeq$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;
  assign inf_dp0_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign inf_dp0_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign inf_dp0_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign inf_dp0_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign inf_dp0_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign inf_dp0_wmi_wmi_dhF_r_enq$whas =
	     MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_dhF_r_deq$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;
  assign inf_dp0_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign inf_dp0_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_dhF_doResetDeq$whas =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;
  assign inf_dp0_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign inf_dp0_wmi_wmi_respF_enqueueing$whas =
	     CAN_FIRE_RL_inf_dp0_wmi_doReadResp ;
  assign inf_dp0_wmi_wmi_respF_dequeueing$whas =
	     inf_dp0_wmi_wmi_respF_c_r != 2'd0 ;
  assign inf_dp0_bml_lclBuf_incAction$whas =
	     CAN_FIRE_RL_inf_dp0_bml_lclAdvance ;
  assign inf_dp0_bml_lclBuf_decAction$whas = 1'b0 ;
  assign inf_dp0_bml_remBuf_incAction$whas =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance ;
  assign inf_dp0_bml_remBuf_decAction$whas = 1'b0 ;
  assign inf_dp0_bml_fabBuf_incAction$whas =
	     MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign inf_dp0_bml_fabBuf_decAction$whas = 1'b0 ;
  assign inf_dp0_bml_crdBuf_incAction$whas =
	     CAN_FIRE_RL_inf_dp0_bml_crdAdvance ;
  assign inf_dp0_bml_crdBuf_decAction$whas = 1'b0 ;
  assign inf_dp0_wmi_Es_mReqLast_w$whas = CAN_FIRE_RL_mReqLConnect ;
  assign inf_dp0_wmi_Es_mDataValid_w$whas = CAN_FIRE_RL_mDataVConnect ;
  assign inf_dp0_wmi_Es_mDataLast_w$whas = CAN_FIRE_RL_mDataLConnect ;
  assign inf_dp0_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign inf_dp1_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp &&
	     inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp ;
  assign inf_dp1_bram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadResp && inf_dp1_wmi_p4B == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_wmi_respMetadata ;
  assign inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp &&
	     inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp ;
  assign inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadResp && inf_dp1_wmi_p4B == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_wmi_respMetadata ;
  assign inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp &&
	     inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp ;
  assign inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadResp && inf_dp1_wmi_p4B == 2'd2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_respMetadata ;
  assign inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp &&
	     inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp ;
  assign inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadResp && inf_dp1_wmi_p4B == 2'd3 ||
	     WILL_FIRE_RL_inf_dp1_wmi_respMetadata ;
  assign inf_dp1_wci_reqF_r_enq$whas = CAN_FIRE_RL_inf_dp1_wci_reqF_enq ;
  assign inf_dp1_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_inf_dp1_wci_cfrd || WILL_FIRE_RL_inf_dp1_wci_cfwr ||
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_start ;
  assign inf_dp1_wci_reqF_r_clr$whas = 1'b0 ;
  assign inf_dp1_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_inf_dp1_wci_cfrd || WILL_FIRE_RL_inf_dp1_wci_cfwr ||
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete ;
  assign inf_dp1_wci_respF_dequeueing$whas = inf_dp1_wci_respF_c_r != 2'd0 ;
  assign inf_dp1_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign inf_dp1_wci_wci_cfwr_pw$whas =
	     inf_dp1_wci_reqF$EMPTY_N && inf_dp1_wci_reqF$D_OUT[56] &&
	     inf_dp1_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign inf_dp1_wci_wci_cfrd_pw$whas =
	     inf_dp1_wci_reqF$EMPTY_N && inf_dp1_wci_reqF$D_OUT[56] &&
	     inf_dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign inf_dp1_wci_wci_ctrl_pw$whas =
	     inf_dp1_wci_reqF$EMPTY_N && !inf_dp1_wci_reqF$D_OUT[56] &&
	     inf_dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign inf_dp1_wmi_wmi_forceSThreadBusy_pw$whas =
	     inf_dp1_dpControl[3:2] != 2'd1 && !inf_dp1_wmi_mesgMeta[128] ||
	     inf_dp1_dpControl[3:2] == 2'd1 && !inf_dp1_wmi_mesgBufReady ;
  assign inf_dp1_wmi_wmi_reqF_r_enq$whas =
	     MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_reqF_r_deq$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;
  assign inf_dp1_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign inf_dp1_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_reqF_doResetDeq$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;
  assign inf_dp1_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign inf_dp1_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign inf_dp1_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign inf_dp1_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign inf_dp1_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign inf_dp1_wmi_wmi_dhF_r_enq$whas =
	     MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_dhF_r_deq$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;
  assign inf_dp1_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign inf_dp1_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_dhF_doResetDeq$whas =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;
  assign inf_dp1_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign inf_dp1_wmi_wmi_respF_enqueueing$whas =
	     CAN_FIRE_RL_inf_dp1_wmi_doReadResp ;
  assign inf_dp1_wmi_wmi_respF_dequeueing$whas =
	     inf_dp1_wmi_wmi_respF_c_r != 2'd0 ;
  assign inf_dp1_bml_lclBuf_incAction$whas =
	     CAN_FIRE_RL_inf_dp1_bml_lclAdvance ;
  assign inf_dp1_bml_lclBuf_decAction$whas = 1'b0 ;
  assign inf_dp1_bml_remBuf_incAction$whas =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance ;
  assign inf_dp1_bml_remBuf_decAction$whas = 1'b0 ;
  assign inf_dp1_bml_fabBuf_incAction$whas =
	     MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign inf_dp1_bml_fabBuf_decAction$whas = 1'b0 ;
  assign inf_dp1_bml_crdBuf_incAction$whas =
	     CAN_FIRE_RL_inf_dp1_bml_crdAdvance ;
  assign inf_dp1_bml_crdBuf_decAction$whas = 1'b0 ;
  assign inf_dp1_wmi_Es_mReqLast_w$whas = CAN_FIRE_RL_mReqLConnect_1 ;
  assign inf_dp1_wmi_Es_mDataValid_w$whas = CAN_FIRE_RL_mDataVConnect_1 ;
  assign inf_dp1_wmi_Es_mDataLast_w$whas = CAN_FIRE_RL_mDataLConnect_1 ;
  assign inf_dp1_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign inf_itc0_wti_sThreadBusy_pw$whas = inf_dp0_wti_isReset$VAL ;
  assign inf_itc1_wti_sThreadBusy_pw$whas = inf_dp1_wti_isReset$VAL ;
  assign app_appW2_wci_reqF_r_enq$whas = CAN_FIRE_RL_app_appW2_wci_reqF_enq ;
  assign app_appW2_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_app_appW2_wci_cfrd ||
	     WILL_FIRE_RL_app_appW2_wci_cfwr ||
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_start ;
  assign app_appW2_wci_reqF_r_clr$whas = 1'b0 ;
  assign app_appW2_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_app_appW2_wci_cfrd ||
	     WILL_FIRE_RL_app_appW2_wci_cfwr ||
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_complete ;
  assign app_appW2_wci_respF_dequeueing$whas =
	     app_appW2_wci_respF_c_r != 2'd0 ;
  assign app_appW2_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign app_appW2_wci_wci_cfwr_pw$whas =
	     app_appW2_wci_reqF$EMPTY_N && app_appW2_wci_reqF$D_OUT[56] &&
	     app_appW2_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign app_appW2_wci_wci_cfrd_pw$whas =
	     app_appW2_wci_reqF$EMPTY_N && app_appW2_wci_reqF$D_OUT[56] &&
	     app_appW2_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign app_appW2_wci_wci_ctrl_pw$whas =
	     app_appW2_wci_reqF$EMPTY_N && !app_appW2_wci_reqF$D_OUT[56] &&
	     app_appW2_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign app_appW2_wmi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ;
  assign app_appW2_wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_deq &&
	     app_appW2_wmi_reqF_c_r != 2'd0 ;
  assign app_appW2_wmi_mFlagF_enqueueing$whas =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest && x__h181099 ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ;
  assign app_appW2_wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_deq &&
	     app_appW2_wmi_reqF_q_0[27] &&
	     app_appW2_wmi_mFlagF_c_r != 2'd0 ;
  assign app_appW2_wmi_dhF_enqueueing$whas =
	     MUX_app_appW2_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign app_appW2_wmi_dhF_dequeueing$whas =
	     WILL_FIRE_RL_app_appW2_wmi_dhF_deq &&
	     app_appW2_wmi_dhF_c_r != 2'd0 ;
  assign app_appW2_wsiM_reqFifo_enqueueing$whas =
	     (WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise ||
	      WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise) &&
	     app_appW2_smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_app_appW2_wsipass_doMessagePush &&
	     !app_appW2_smaCtrl[4] ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgResptoWsi ;
  assign app_appW2_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_app_appW2_wsiM_reqFifo_deq ;
  assign app_appW2_wsiM_sThreadBusy_pw$whas = CAN_FIRE_RL_app_stbConnect ;
  assign app_appW2_wsiS_reqFifo_r_enq$whas = 1'b0 ;
  assign app_appW2_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_app_appW2_wsipass_doMessagePush ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise ;
  assign app_appW2_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign app_appW2_wsiS_reqFifo_doResetEnq$whas = 1'b0 ;
  assign app_appW2_wsiS_reqFifo_doResetDeq$whas =
	     app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign app_appW2_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign app_appW2_respF_pwDequeue$whas =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi ;
  assign app_appW2_respF_pwEnqueue$whas =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse &&
	     !app_appW2_smaCtrl[4] ;
  assign app_appW2_wsi_Es_mReqLast_w$whas = 1'b0 ;
  assign app_appW2_wsi_Es_mBurstPrecise_w$whas = 1'b0 ;
  assign app_appW2_wsi_Es_mDataInfo_w$whas = 1'b0 ;
  assign app_appW3_wci_reqF_r_enq$whas = CAN_FIRE_RL_app_appW3_wci_reqF_enq ;
  assign app_appW3_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_app_appW3_wci_cfrd ||
	     WILL_FIRE_RL_app_appW3_wci_cfwr ||
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_start ;
  assign app_appW3_wci_reqF_r_clr$whas = 1'b0 ;
  assign app_appW3_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_app_appW3_wci_cfrd ||
	     WILL_FIRE_RL_app_appW3_wci_cfwr ||
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_complete ;
  assign app_appW3_wci_respF_dequeueing$whas =
	     app_appW3_wci_respF_c_r != 2'd0 ;
  assign app_appW3_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign app_appW3_wci_wci_cfwr_pw$whas =
	     app_appW3_wci_reqF$EMPTY_N && app_appW3_wci_reqF$D_OUT[56] &&
	     app_appW3_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign app_appW3_wci_wci_cfrd_pw$whas =
	     app_appW3_wci_reqF$EMPTY_N && app_appW3_wci_reqF$D_OUT[56] &&
	     app_appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign app_appW3_wci_wci_ctrl_pw$whas =
	     app_appW3_wci_reqF$EMPTY_N && !app_appW3_wci_reqF$D_OUT[56] &&
	     app_appW3_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign app_appW3_wsiS_reqFifo_r_enq$whas =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign app_appW3_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_app_appW3_wmwt_mesg_ingress ||
	     WILL_FIRE_RL_app_appW3_wsipass_doMessagePush ;
  assign app_appW3_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign app_appW3_wsiS_reqFifo_doResetEnq$whas =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign app_appW3_wsiS_reqFifo_doResetDeq$whas =
	     app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign app_appW3_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign app_appW3_wsiM_reqFifo_enqueueing$whas =
	     app_appW3_wsiM_reqFifo_x_wire$whas ;
  assign app_appW3_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_app_appW3_wsiM_reqFifo_deq ;
  assign app_appW3_wsiM_sThreadBusy_pw$whas = CAN_FIRE_RL_app_stbConnect_1 ;
  assign app_appW3_wmemi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_app_appW3_delay_read_req ||
	     WILL_FIRE_RL_app_appW3_delay_write_req ;
  assign app_appW3_wmemi_reqF_dequeueing$whas =
	     wmemiM_SCmdAccept && app_appW3_wmemi_reqF_c_r != 2'd0 ;
  assign app_appW3_wmemi_dhF_enqueueing$whas =
	     CAN_FIRE_RL_app_appW3_delay_write_req ;
  assign app_appW3_wmemi_dhF_dequeueing$whas =
	     wmemiM_SDataAccept && app_appW3_wmemi_dhF_c_r != 2'd0 ;
  assign app_appW3_mesgWF_pwDequeue$whas = CAN_FIRE_RL_app_appW3_wrtSer_body ;
  assign app_appW3_mesgWF_pwEnqueue$whas =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ;
  assign app_appW3_wsi_Es_mReqLast_w$whas = CAN_FIRE_RL_app_mReqLConnect ;
  assign app_appW3_wsi_Es_mBurstPrecise_w$whas =
	     CAN_FIRE_RL_app_mBurstPConnect ;
  assign app_appW3_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign app_appW3_wmemi_Em_sRespLast_w$whas = wmemiM_SRespLast ;
  assign app_appW4_wci_reqF_r_enq$whas = CAN_FIRE_RL_app_appW4_wci_reqF_enq ;
  assign app_appW4_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_app_appW4_wci_cfrd ||
	     WILL_FIRE_RL_app_appW4_wci_cfwr ||
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_start ;
  assign app_appW4_wci_reqF_r_clr$whas = 1'b0 ;
  assign app_appW4_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_app_appW4_wci_cfrd ||
	     WILL_FIRE_RL_app_appW4_wci_cfwr ||
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_complete ;
  assign app_appW4_wci_respF_dequeueing$whas =
	     app_appW4_wci_respF_c_r != 2'd0 ;
  assign app_appW4_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign app_appW4_wci_wci_cfwr_pw$whas =
	     app_appW4_wci_reqF$EMPTY_N && app_appW4_wci_reqF$D_OUT[56] &&
	     app_appW4_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign app_appW4_wci_wci_cfrd_pw$whas =
	     app_appW4_wci_reqF$EMPTY_N && app_appW4_wci_reqF$D_OUT[56] &&
	     app_appW4_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign app_appW4_wci_wci_ctrl_pw$whas =
	     app_appW4_wci_reqF$EMPTY_N && !app_appW4_wci_reqF$D_OUT[56] &&
	     app_appW4_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign app_appW4_wmi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ;
  assign app_appW4_wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_deq &&
	     app_appW4_wmi_reqF_c_r != 2'd0 ;
  assign app_appW4_wmi_mFlagF_enqueueing$whas =
	     app_appW4_wmi_mFlagF_x_wire$whas ;
  assign app_appW4_wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_deq &&
	     app_appW4_wmi_reqF_q_0[27] &&
	     app_appW4_wmi_mFlagF_c_r != 2'd0 ;
  assign app_appW4_wmi_dhF_enqueueing$whas =
	     MUX_app_appW4_wsiM_reqFifo_x_wire$wset_1__PSEL_1 ;
  assign app_appW4_wmi_dhF_dequeueing$whas =
	     WILL_FIRE_RL_app_appW4_wmi_dhF_deq &&
	     app_appW4_wmi_dhF_c_r != 2'd0 ;
  assign app_appW4_wsiM_reqFifo_enqueueing$whas =
	     (WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise ||
	      WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise) &&
	     app_appW4_smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_app_appW4_wsipass_doMessagePush &&
	     !app_appW4_smaCtrl[4] ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgResptoWsi ;
  assign app_appW4_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_app_appW4_wsiM_reqFifo_deq ;
  assign app_appW4_wsiM_sThreadBusy_pw$whas = 1'b0 ;
  assign app_appW4_wsiS_reqFifo_r_enq$whas =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign app_appW4_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_app_appW4_wsipass_doMessagePush ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise ;
  assign app_appW4_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign app_appW4_wsiS_reqFifo_doResetEnq$whas =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign app_appW4_wsiS_reqFifo_doResetDeq$whas =
	     app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign app_appW4_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign app_appW4_respF_pwDequeue$whas =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi ;
  assign app_appW4_respF_pwEnqueue$whas =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse &&
	     !app_appW4_smaCtrl[4] ;
  assign app_appW4_wsi_Es_mReqLast_w$whas = CAN_FIRE_RL_app_mReqLConnect_1 ;
  assign app_appW4_wsi_Es_mBurstPrecise_w$whas =
	     CAN_FIRE_RL_app_mBurstPConnect_1 ;
  assign app_appW4_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign inf_dp0_bml_lclBuf_modulus_bw$wget = inf_dp0_bml_lclBuf_modulus ;
  assign inf_dp0_bml_remBuf_modulus_bw$wget = inf_dp0_bml_remBuf_modulus ;
  assign inf_dp0_bml_fabBuf_modulus_bw$wget = inf_dp0_bml_fabBuf_modulus ;
  assign inf_dp0_bml_crdBuf_modulus_bw$wget = inf_dp0_bml_crdBuf_modulus ;
  assign inf_dp1_bml_lclBuf_modulus_bw$wget = inf_dp1_bml_lclBuf_modulus ;
  assign inf_dp1_bml_remBuf_modulus_bw$wget = inf_dp1_bml_remBuf_modulus ;
  assign inf_dp1_bml_fabBuf_modulus_bw$wget = inf_dp1_bml_fabBuf_modulus ;
  assign inf_dp1_bml_crdBuf_modulus_bw$wget = inf_dp1_bml_crdBuf_modulus ;
  assign app_appW2_wsiM_extStatusW$wget =
	     { app_appW2_wsiM_pMesgCount,
	       app_appW2_wsiM_iMesgCount,
	       app_appW2_wsiM_tBusyCount } ;
  assign app_appW2_wsiS_extStatusW$wget =
	     { app_appW2_wsiS_pMesgCount,
	       app_appW2_wsiS_iMesgCount,
	       app_appW2_wsiS_tBusyCount } ;
  assign app_appW3_wsiS_extStatusW$wget =
	     { app_appW3_wsiS_pMesgCount,
	       app_appW3_wsiS_iMesgCount,
	       app_appW3_wsiS_tBusyCount } ;
  assign app_appW3_wsiM_extStatusW$wget =
	     { app_appW3_wsiM_pMesgCount,
	       app_appW3_wsiM_iMesgCount,
	       app_appW3_wsiM_tBusyCount } ;
  assign app_appW4_wsiM_extStatusW$wget =
	     { app_appW4_wsiM_pMesgCount,
	       app_appW4_wsiM_iMesgCount,
	       app_appW4_wsiM_tBusyCount } ;
  assign app_appW4_wsiS_extStatusW$wget =
	     { app_appW4_wsiS_pMesgCount,
	       app_appW4_wsiS_iMesgCount,
	       app_appW4_wsiS_tBusyCount } ;

  // register app_appW2_abortCount
  assign app_appW2_abortCount$D_IN = app_appW2_abortCount + 32'd1 ;
  assign app_appW2_abortCount$EN = CAN_FIRE_RL_app_appW2_wmwt_doAbort ;

  // register app_appW2_doAbort
  assign app_appW2_doAbort$D_IN = 1'd0 ;
  assign app_appW2_doAbort$EN = CAN_FIRE_RL_app_appW2_wmwt_doAbort ;

  // register app_appW2_endOfMessage
  assign app_appW2_endOfMessage$D_IN =
	     MUX_app_appW2_endOfMessage$write_1__SEL_1 ;
  assign app_appW2_endOfMessage$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ;

  // register app_appW2_errCount
  assign app_appW2_errCount$D_IN = app_appW2_errCount + 32'd1 ;
  assign app_appW2_errCount$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[43:12] != app_appW2_valExpect &&
	     (!app_appW2_wsiS_reqFifo$D_OUT[57] ||
	      app_appW2_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register app_appW2_fabRespCredit_value
  assign app_appW2_fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_app_appW2_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_app_appW2_fabRespCredit_value$write_1__VAL_2 ;
  assign app_appW2_fabRespCredit_value$EN = 1'b1 ;

  // register app_appW2_fabWordsCurReq
  assign app_appW2_fabWordsCurReq$D_IN =
	     (app_appW2_fabWordsRemain <= b__h180928) ?
	       app_appW2_fabWordsRemain :
	       b__h180928 ;
  assign app_appW2_fabWordsCurReq$EN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest ;

  // register app_appW2_fabWordsRemain
  assign app_appW2_fabWordsRemain$D_IN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ?
	       MUX_app_appW2_fabWordsRemain$write_1__VAL_1 :
	       MUX_app_appW2_fabWordsRemain$write_1__VAL_2 ;
  assign app_appW2_fabWordsRemain$EN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ;

  // register app_appW2_firstMsgReq
  assign app_appW2_firstMsgReq$D_IN = 1'b0 ;
  assign app_appW2_firstMsgReq$EN = 1'b0 ;

  // register app_appW2_impreciseBurst
  assign app_appW2_impreciseBurst$D_IN =
	     !WILL_FIRE_RL_app_appW2_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_app_appW2_wmwt_doAbort ;
  assign app_appW2_impreciseBurst$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     !app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW2_wmwt_doAbort ;

  // register app_appW2_lastMesg
  assign app_appW2_lastMesg$D_IN =
	     (MUX_app_appW2_endOfMessage$write_1__SEL_1 ||
	      MUX_app_appW2_lastMesg$write_1__SEL_2) ?
	       app_appW2_thisMesg :
	       32'hFEFEFFFE ;
  assign app_appW2_lastMesg$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW2_wci_ctrl_IsO ;

  // register app_appW2_mesgCount
  always@(MUX_app_appW2_mesgCount$write_1__SEL_1 or
	  MUX_app_appW2_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW2_wmwt_messageFinalize or
	  WILL_FIRE_RL_app_appW2_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW2_mesgCount$write_1__SEL_1:
	  app_appW2_mesgCount$D_IN = MUX_app_appW2_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_app_appW2_wmwt_messageFinalize:
	  app_appW2_mesgCount$D_IN = MUX_app_appW2_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_app_appW2_wci_ctrl_IsO: app_appW2_mesgCount$D_IN = 32'd0;
      default: app_appW2_mesgCount$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_mesgCount$EN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse &&
	     app_appW2_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW2_wci_ctrl_IsO ;

  // register app_appW2_mesgLength
  always@(WILL_FIRE_RL_app_appW2_wmwt_messageFinalize or
	  WILL_FIRE_RL_app_appW2_wmwt_doAbort or
	  MUX_app_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_app_appW2_mesgLength$write_1__VAL_3 or
	  MUX_app_appW2_mesgLength$write_1__SEL_4 or
	  MUX_app_appW2_mesgLength$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
    WILL_FIRE_RL_app_appW2_wmwt_doAbort:
	app_appW2_mesgLength$D_IN = 15'd10922;
    MUX_app_appW2_endOfMessage$write_1__SEL_1:
	app_appW2_mesgLength$D_IN = MUX_app_appW2_mesgLength$write_1__VAL_3;
    MUX_app_appW2_mesgLength$write_1__SEL_4:
	app_appW2_mesgLength$D_IN = MUX_app_appW2_mesgLength$write_1__VAL_4;
    default: app_appW2_mesgLength$D_IN =
		 15'b010101010101010 /* unspecified value */ ;
  endcase
  assign app_appW2_mesgLength$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW2_wmwt_doAbort ;

  // register app_appW2_mesgLengthSoFar
  assign app_appW2_mesgLengthSoFar$D_IN =
	     MUX_app_appW2_impreciseBurst$write_1__SEL_3 ?
	       14'd0 :
	       mlp1__h183228 ;
  assign app_appW2_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     !app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise ;

  // register app_appW2_mesgPreRequest
  assign app_appW2_mesgPreRequest$D_IN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest ;
  assign app_appW2_mesgPreRequest$EN = 1'd1 ;

  // register app_appW2_mesgReqAddr
  assign app_appW2_mesgReqAddr$D_IN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_app_appW2_mesgReqAddr$write_1__VAL_2 ;
  assign app_appW2_mesgReqAddr$EN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ;

  // register app_appW2_mesgReqOK
  assign app_appW2_mesgReqOK$D_IN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ;
  assign app_appW2_mesgReqOK$EN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyPreRequest ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse ;

  // register app_appW2_mesgReqValid
  assign app_appW2_mesgReqValid$D_IN =
	     !WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ;
  assign app_appW2_mesgReqValid$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ;

  // register app_appW2_opcode
  assign app_appW2_opcode$D_IN =
	     (WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
	      WILL_FIRE_RL_app_appW2_wmwt_doAbort) ?
	       9'd170 :
	       MUX_app_appW2_opcode$write_1__VAL_3 ;
  assign app_appW2_opcode$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin ||
	     WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW2_wmwt_doAbort ;

  // register app_appW2_preciseBurst
  assign app_appW2_preciseBurst$D_IN =
	     !WILL_FIRE_RL_app_appW2_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_app_appW2_wmwt_doAbort ;
  assign app_appW2_preciseBurst$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW2_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW2_wmwt_doAbort ;

  // register app_appW2_readyToPush
  assign app_appW2_readyToPush$D_IN =
	     !WILL_FIRE_RL_app_appW2_wmwt_doAbort &&
	     !MUX_app_appW2_endOfMessage$write_1__SEL_1 ;
  assign app_appW2_readyToPush$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     !app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW2_wmwt_doAbort ;

  // register app_appW2_readyToRequest
  assign app_appW2_readyToRequest$D_IN =
	     MUX_app_appW2_mesgLength$write_1__SEL_4 ;
  assign app_appW2_readyToRequest$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ;

  // register app_appW2_respF_rCache
  assign app_appW2_respF_rCache$D_IN =
	     { 1'd1,
	       app_appW2_respF_rWrPtr,
	       IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7135,
	       app_appW2_respF_pwEnqueue$whas &&
	       app_appW2_respF_wDataIn$wget[57],
	       app_appW2_respF_pwEnqueue$whas &&
	       app_appW2_respF_wDataIn$wget[56],
	       IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7209 } ;
  assign app_appW2_respF_rCache$EN = app_appW2_respF_pwEnqueue$whas ;

  // register app_appW2_respF_rRdPtr
  assign app_appW2_respF_rRdPtr$D_IN = x__h179094 ;
  assign app_appW2_respF_rRdPtr$EN =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi ;

  // register app_appW2_respF_rWrPtr
  assign app_appW2_respF_rWrPtr$D_IN = app_appW2_respF_rWrPtr + 12'd1 ;
  assign app_appW2_respF_rWrPtr$EN = app_appW2_respF_pwEnqueue$whas ;

  // register app_appW2_smaCtrl
  assign app_appW2_smaCtrl$D_IN = app_appW2_wci_reqF$D_OUT[31:0] ;
  assign app_appW2_smaCtrl$EN =
	     WILL_FIRE_RL_app_appW2_wci_cfwr &&
	     app_appW2_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register app_appW2_thisMesg
  always@(MUX_app_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_app_appW2_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW2_wmrd_mesgBegin or
	  MUX_app_appW2_thisMesg$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wmwt_requestPrecise or
	  WILL_FIRE_RL_app_appW2_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW2_endOfMessage$write_1__SEL_1:
	  app_appW2_thisMesg$D_IN = MUX_app_appW2_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_app_appW2_wmrd_mesgBegin:
	  app_appW2_thisMesg$D_IN = MUX_app_appW2_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wmwt_requestPrecise:
	  app_appW2_thisMesg$D_IN = MUX_app_appW2_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_app_appW2_wci_ctrl_IsO:
	  app_appW2_thisMesg$D_IN = 32'hFEFEFFFE;
      default: app_appW2_thisMesg$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_thisMesg$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     app_appW2_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW2_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW2_wci_ctrl_IsO ;

  // register app_appW2_unrollCnt
  assign app_appW2_unrollCnt$D_IN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ?
	       MUX_app_appW2_unrollCnt$write_1__VAL_1 :
	       MUX_app_appW2_unrollCnt$write_1__VAL_2 ;
  assign app_appW2_unrollCnt$EN =
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW2_wmrd_mesgBodyResponse ;

  // register app_appW2_valExpect
  assign app_appW2_valExpect$D_IN = app_appW2_valExpect + 32'd1 ;
  assign app_appW2_valExpect$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise &&
	     (!app_appW2_wsiS_reqFifo$D_OUT[57] ||
	      app_appW2_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register app_appW2_wci_cEdge
  assign app_appW2_wci_cEdge$D_IN = app_appW2_wci_reqF$D_OUT[36:34] ;
  assign app_appW2_wci_cEdge$EN = WILL_FIRE_RL_app_appW2_wci_ctl_op_start ;

  // register app_appW2_wci_cState
  assign app_appW2_wci_cState$D_IN = app_appW2_wci_nState ;
  assign app_appW2_wci_cState$EN =
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_complete &&
	     !app_appW2_wci_illegalEdge ;

  // register app_appW2_wci_ctlAckReg
  assign app_appW2_wci_ctlAckReg$D_IN = app_appW2_wci_ctlAckReg_1$whas ;
  assign app_appW2_wci_ctlAckReg$EN = 1'd1 ;

  // register app_appW2_wci_ctlOpActive
  assign app_appW2_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_app_appW2_wci_ctl_op_complete ;
  assign app_appW2_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_complete ||
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_start ;

  // register app_appW2_wci_illegalEdge
  assign app_appW2_wci_illegalEdge$D_IN =
	     !MUX_app_appW2_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_app_appW2_wci_illegalEdge$write_1__VAL_2 ;
  assign app_appW2_wci_illegalEdge$EN =
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_complete &&
	     app_appW2_wci_illegalEdge ||
	     MUX_app_appW2_wci_illegalEdge$write_1__SEL_2 ;

  // register app_appW2_wci_nState
  always@(app_appW2_wci_reqF$D_OUT)
  begin
    case (app_appW2_wci_reqF$D_OUT[36:34])
      3'd0: app_appW2_wci_nState$D_IN = 3'd1;
      3'd1: app_appW2_wci_nState$D_IN = 3'd2;
      3'd2: app_appW2_wci_nState$D_IN = 3'd3;
      default: app_appW2_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign app_appW2_wci_nState$EN =
	     WILL_FIRE_RL_app_appW2_wci_ctl_op_start &&
	     (app_appW2_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      app_appW2_wci_cState == 3'd0 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (app_appW2_wci_cState == 3'd1 ||
	       app_appW2_wci_cState == 3'd3) ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      app_appW2_wci_cState == 3'd2 ||
	      app_appW2_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (app_appW2_wci_cState == 3'd3 || app_appW2_wci_cState == 3'd2 ||
	       app_appW2_wci_cState == 3'd1)) ;

  // register app_appW2_wci_reqF_countReg
  assign app_appW2_wci_reqF_countReg$D_IN =
	     (app_appW2_wci_wciReq$wget[59:57] != 3'd0) ?
	       app_appW2_wci_reqF_countReg + 2'd1 :
	       app_appW2_wci_reqF_countReg - 2'd1 ;
  assign app_appW2_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_app_appW2_wci_reqF__updateLevelCounter ;

  // register app_appW2_wci_respF_c_r
  assign app_appW2_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW2_wci_respF_incCtr ?
	       MUX_app_appW2_wci_respF_c_r$write_1__VAL_1 :
	       MUX_app_appW2_wci_respF_c_r$write_1__VAL_2 ;
  assign app_appW2_wci_respF_c_r$EN =
	     WILL_FIRE_RL_app_appW2_wci_respF_incCtr ||
	     WILL_FIRE_RL_app_appW2_wci_respF_decCtr ;

  // register app_appW2_wci_respF_q_0
  always@(WILL_FIRE_RL_app_appW2_wci_respF_both or
	  MUX_app_appW2_wci_respF_q_0$write_1__VAL_1 or
	  MUX_app_appW2_wci_respF_q_0$write_1__SEL_2 or
	  MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wci_respF_decCtr or app_appW2_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wci_respF_both:
	  app_appW2_wci_respF_q_0$D_IN =
	      MUX_app_appW2_wci_respF_q_0$write_1__VAL_1;
      MUX_app_appW2_wci_respF_q_0$write_1__SEL_2:
	  app_appW2_wci_respF_q_0$D_IN =
	      MUX_app_appW2_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wci_respF_decCtr:
	  app_appW2_wci_respF_q_0$D_IN = app_appW2_wci_respF_q_1;
      default: app_appW2_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wci_respF_q_0$EN =
	     WILL_FIRE_RL_app_appW2_wci_respF_both ||
	     WILL_FIRE_RL_app_appW2_wci_respF_incCtr &&
	     app_appW2_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW2_wci_respF_decCtr ;

  // register app_appW2_wci_respF_q_1
  always@(WILL_FIRE_RL_app_appW2_wci_respF_both or
	  MUX_app_appW2_wci_respF_q_1$write_1__VAL_1 or
	  MUX_app_appW2_wci_respF_q_1$write_1__SEL_2 or
	  MUX_app_appW2_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wci_respF_both:
	  app_appW2_wci_respF_q_1$D_IN =
	      MUX_app_appW2_wci_respF_q_1$write_1__VAL_1;
      MUX_app_appW2_wci_respF_q_1$write_1__SEL_2:
	  app_appW2_wci_respF_q_1$D_IN =
	      MUX_app_appW2_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wci_respF_decCtr:
	  app_appW2_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: app_appW2_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wci_respF_q_1$EN =
	     WILL_FIRE_RL_app_appW2_wci_respF_both ||
	     WILL_FIRE_RL_app_appW2_wci_respF_incCtr &&
	     app_appW2_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW2_wci_respF_decCtr ;

  // register app_appW2_wci_sFlagReg
  assign app_appW2_wci_sFlagReg$D_IN = 1'b0 ;
  assign app_appW2_wci_sFlagReg$EN = 1'd1 ;

  // register app_appW2_wci_sThreadBusy_d
  assign app_appW2_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign app_appW2_wci_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW2_wmi_busyWithMessage
  assign app_appW2_wmi_busyWithMessage$D_IN = 1'b0 ;
  assign app_appW2_wmi_busyWithMessage$EN = 1'b0 ;

  // register app_appW2_wmi_dhF_c_r
  assign app_appW2_wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr ?
	       MUX_app_appW2_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_app_appW2_wmi_dhF_c_r$write_1__VAL_2 ;
  assign app_appW2_wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr ||
	     WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr ;

  // register app_appW2_wmi_dhF_q_0
  always@(WILL_FIRE_RL_app_appW2_wmi_dhF_both or
	  MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_1 or
	  MUX_app_appW2_wmi_dhF_q_0$write_1__SEL_2 or
	  MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr or app_appW2_wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wmi_dhF_both:
	  app_appW2_wmi_dhF_q_0$D_IN =
	      MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_1;
      MUX_app_appW2_wmi_dhF_q_0$write_1__SEL_2:
	  app_appW2_wmi_dhF_q_0$D_IN =
	      MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr:
	  app_appW2_wmi_dhF_q_0$D_IN = app_appW2_wmi_dhF_q_1;
      default: app_appW2_wmi_dhF_q_0$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_app_appW2_wmi_dhF_both ||
	     WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr &&
	     app_appW2_wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr ;

  // register app_appW2_wmi_dhF_q_1
  always@(WILL_FIRE_RL_app_appW2_wmi_dhF_both or
	  MUX_app_appW2_wmi_dhF_q_1$write_1__VAL_1 or
	  MUX_app_appW2_wmi_dhF_q_1$write_1__SEL_2 or
	  MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wmi_dhF_both:
	  app_appW2_wmi_dhF_q_1$D_IN =
	      MUX_app_appW2_wmi_dhF_q_1$write_1__VAL_1;
      MUX_app_appW2_wmi_dhF_q_1$write_1__SEL_2:
	  app_appW2_wmi_dhF_q_1$D_IN =
	      MUX_app_appW2_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr:
	  app_appW2_wmi_dhF_q_1$D_IN = 38'h0AAAAAAAAA;
      default: app_appW2_wmi_dhF_q_1$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_app_appW2_wmi_dhF_both ||
	     WILL_FIRE_RL_app_appW2_wmi_dhF_incCtr &&
	     app_appW2_wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW2_wmi_dhF_decCtr ;

  // register app_appW2_wmi_errorSticky
  assign app_appW2_wmi_errorSticky$D_IN = 1'd1 ;
  assign app_appW2_wmi_errorSticky$EN =
	     WILL_FIRE_RL_app_appW2_wmi_respAdvance &&
	     !app_appW2_wmi_respF$FULL_N ;

  // register app_appW2_wmi_mFlagF_c_r
  assign app_appW2_wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr ?
	       MUX_app_appW2_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_app_appW2_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign app_appW2_wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr ;

  // register app_appW2_wmi_mFlagF_q_0
  always@(WILL_FIRE_RL_app_appW2_wmi_mFlagF_both or
	  MUX_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1 or
	  MUX_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2 or
	  value__h169350 or
	  WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr or
	  app_appW2_wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wmi_mFlagF_both:
	  app_appW2_wmi_mFlagF_q_0$D_IN =
	      MUX_app_appW2_wmi_mFlagF_q_0$write_1__VAL_1;
      MUX_app_appW2_wmi_mFlagF_q_0$write_1__SEL_2:
	  app_appW2_wmi_mFlagF_q_0$D_IN = value__h169350;
      WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr:
	  app_appW2_wmi_mFlagF_q_0$D_IN = app_appW2_wmi_mFlagF_q_1;
      default: app_appW2_wmi_mFlagF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_both ||
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr &&
	     app_appW2_wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr ;

  // register app_appW2_wmi_mFlagF_q_1
  always@(WILL_FIRE_RL_app_appW2_wmi_mFlagF_both or
	  MUX_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1 or
	  MUX_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2 or
	  value__h169350 or WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wmi_mFlagF_both:
	  app_appW2_wmi_mFlagF_q_1$D_IN =
	      MUX_app_appW2_wmi_mFlagF_q_1$write_1__VAL_1;
      MUX_app_appW2_wmi_mFlagF_q_1$write_1__SEL_2:
	  app_appW2_wmi_mFlagF_q_1$D_IN = value__h169350;
      WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr:
	  app_appW2_wmi_mFlagF_q_1$D_IN = 32'd0;
      default: app_appW2_wmi_mFlagF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_both ||
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_incCtr &&
	     app_appW2_wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW2_wmi_mFlagF_decCtr ;

  // register app_appW2_wmi_operateD
  assign app_appW2_wmi_operateD$D_IN =
	     CAN_FIRE_RL_app_appW2_operating_actions ;
  assign app_appW2_wmi_operateD$EN = 1'd1 ;

  // register app_appW2_wmi_peerIsReady
  assign app_appW2_wmi_peerIsReady$D_IN = CAN_FIRE_RL_sRstConnect ;
  assign app_appW2_wmi_peerIsReady$EN = 1'd1 ;

  // register app_appW2_wmi_reqF_c_r
  assign app_appW2_wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr ?
	       MUX_app_appW2_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_app_appW2_wmi_reqF_c_r$write_1__VAL_2 ;
  assign app_appW2_wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr ||
	     WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr ;

  // register app_appW2_wmi_reqF_q_0
  always@(WILL_FIRE_RL_app_appW2_wmi_reqF_both or
	  MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_1 or
	  MUX_app_appW2_wmi_reqF_q_0$write_1__SEL_2 or
	  MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr or app_appW2_wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wmi_reqF_both:
	  app_appW2_wmi_reqF_q_0$D_IN =
	      MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_1;
      MUX_app_appW2_wmi_reqF_q_0$write_1__SEL_2:
	  app_appW2_wmi_reqF_q_0$D_IN =
	      MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr:
	  app_appW2_wmi_reqF_q_0$D_IN = app_appW2_wmi_reqF_q_1;
      default: app_appW2_wmi_reqF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_both ||
	     WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr &&
	     app_appW2_wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr ;

  // register app_appW2_wmi_reqF_q_1
  always@(WILL_FIRE_RL_app_appW2_wmi_reqF_both or
	  MUX_app_appW2_wmi_reqF_q_1$write_1__VAL_1 or
	  MUX_app_appW2_wmi_reqF_q_1$write_1__SEL_2 or
	  MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wmi_reqF_both:
	  app_appW2_wmi_reqF_q_1$D_IN =
	      MUX_app_appW2_wmi_reqF_q_1$write_1__VAL_1;
      MUX_app_appW2_wmi_reqF_q_1$write_1__SEL_2:
	  app_appW2_wmi_reqF_q_1$D_IN =
	      MUX_app_appW2_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr:
	  app_appW2_wmi_reqF_q_1$D_IN = 32'd178956970;
      default: app_appW2_wmi_reqF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_app_appW2_wmi_reqF_both ||
	     WILL_FIRE_RL_app_appW2_wmi_reqF_incCtr &&
	     app_appW2_wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW2_wmi_reqF_decCtr ;

  // register app_appW2_wmi_sDataThreadBusy_d
  assign app_appW2_wmi_sDataThreadBusy_d$D_IN = CAN_FIRE_RL_sdtbConnect ;
  assign app_appW2_wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register app_appW2_wmi_sFlagReg
  assign app_appW2_wmi_sFlagReg$D_IN = inf_dp0_wmi_wmi_sFlagReg ;
  assign app_appW2_wmi_sFlagReg$EN = 1'd1 ;

  // register app_appW2_wmi_sThreadBusy_d
  assign app_appW2_wmi_sThreadBusy_d$D_IN = CAN_FIRE_RL_stbConnect_8 ;
  assign app_appW2_wmi_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW2_wmi_statusR
  assign app_appW2_wmi_statusR$D_IN = 8'h0 ;
  assign app_appW2_wmi_statusR$EN = 1'b0 ;

  // register app_appW2_wmi_trafficSticky
  assign app_appW2_wmi_trafficSticky$D_IN = 1'b0 ;
  assign app_appW2_wmi_trafficSticky$EN = 1'b0 ;

  // register app_appW2_wsiM_burstKind
  assign app_appW2_wsiM_burstKind$D_IN =
	     (app_appW2_wsiM_burstKind == 2'd0) ?
	       (app_appW2_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign app_appW2_wsiM_burstKind$EN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_deq &&
	     app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (app_appW2_wsiM_burstKind == 2'd0 ||
	      (app_appW2_wsiM_burstKind == 2'd1 ||
	       app_appW2_wsiM_burstKind == 2'd2) &&
	      app_appW2_wsiM_reqFifo_q_0[57]) ;

  // register app_appW2_wsiM_errorSticky
  assign app_appW2_wsiM_errorSticky$D_IN = 1'b0 ;
  assign app_appW2_wsiM_errorSticky$EN = 1'b0 ;

  // register app_appW2_wsiM_iMesgCount
  assign app_appW2_wsiM_iMesgCount$D_IN = app_appW2_wsiM_iMesgCount + 32'd1 ;
  assign app_appW2_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_deq &&
	     app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     app_appW2_wsiM_burstKind == 2'd2 &&
	     app_appW2_wsiM_reqFifo_q_0[57] ;

  // register app_appW2_wsiM_operateD
  assign app_appW2_wsiM_operateD$D_IN =
	     CAN_FIRE_RL_app_appW2_operating_actions ;
  assign app_appW2_wsiM_operateD$EN = 1'd1 ;

  // register app_appW2_wsiM_pMesgCount
  assign app_appW2_wsiM_pMesgCount$D_IN = app_appW2_wsiM_pMesgCount + 32'd1 ;
  assign app_appW2_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_deq &&
	     app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     app_appW2_wsiM_burstKind == 2'd1 &&
	     app_appW2_wsiM_reqFifo_q_0[57] ;

  // register app_appW2_wsiM_peerIsReady
  assign app_appW2_wsiM_peerIsReady$D_IN = CAN_FIRE_RL_app_sRstConnect ;
  assign app_appW2_wsiM_peerIsReady$EN = 1'd1 ;

  // register app_appW2_wsiM_reqFifo_c_r
  assign app_appW2_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr ?
	       MUX_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_app_appW2_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign app_appW2_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr ;

  // register app_appW2_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both or
	  MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr or
	  app_appW2_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both:
	  app_appW2_wsiM_reqFifo_q_0$D_IN =
	      MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_app_appW2_wsiM_reqFifo_q_0$write_1__SEL_2:
	  app_appW2_wsiM_reqFifo_q_0$D_IN =
	      MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr:
	  app_appW2_wsiM_reqFifo_q_0$D_IN = app_appW2_wsiM_reqFifo_q_1;
      default: app_appW2_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr &&
	     app_appW2_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr ;

  // register app_appW2_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both or
	  MUX_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both:
	  app_appW2_wsiM_reqFifo_q_1$D_IN =
	      MUX_app_appW2_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_app_appW2_wsiM_reqFifo_q_1$write_1__SEL_2:
	  app_appW2_wsiM_reqFifo_q_1$D_IN =
	      MUX_app_appW2_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr:
	  app_appW2_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: app_appW2_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW2_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_incCtr &&
	     app_appW2_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_decCtr ;

  // register app_appW2_wsiM_sThreadBusy_d
  assign app_appW2_wsiM_sThreadBusy_d$D_IN = CAN_FIRE_RL_app_stbConnect ;
  assign app_appW2_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW2_wsiM_statusR
  assign app_appW2_wsiM_statusR$D_IN =
	     { app_appW2_wsiM_isReset$VAL,
	       !app_appW2_wsiM_peerIsReady,
	       !app_appW2_wsiM_operateD,
	       app_appW2_wsiM_errorSticky,
	       app_appW2_wsiM_burstKind != 2'd0,
	       app_appW2_wsiM_sThreadBusy_d,
	       1'd0,
	       app_appW2_wsiM_trafficSticky } ;
  assign app_appW2_wsiM_statusR$EN = 1'd1 ;

  // register app_appW2_wsiM_tBusyCount
  assign app_appW2_wsiM_tBusyCount$D_IN = app_appW2_wsiM_tBusyCount + 32'd1 ;
  assign app_appW2_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_app_appW2_wsiM_inc_tBusyCount ;

  // register app_appW2_wsiM_trafficSticky
  assign app_appW2_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign app_appW2_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_app_appW2_wsiM_reqFifo_deq &&
	     app_appW2_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register app_appW2_wsiS_burstKind
  assign app_appW2_wsiS_burstKind$D_IN =
	     (app_appW2_wsiS_burstKind == 2'd0) ? 2'd2 : 2'd0 ;
  assign app_appW2_wsiS_burstKind$EN = 1'b0 ;

  // register app_appW2_wsiS_errorSticky
  assign app_appW2_wsiS_errorSticky$D_IN = 1'd1 ;
  assign app_appW2_wsiS_errorSticky$EN = 1'b0 ;

  // register app_appW2_wsiS_iMesgCount
  assign app_appW2_wsiS_iMesgCount$D_IN = app_appW2_wsiS_iMesgCount + 32'd1 ;
  assign app_appW2_wsiS_iMesgCount$EN = 1'b0 ;

  // register app_appW2_wsiS_mesgWordLength
  assign app_appW2_wsiS_mesgWordLength$D_IN = app_appW2_wsiS_wordCount ;
  assign app_appW2_wsiS_mesgWordLength$EN = 1'b0 ;

  // register app_appW2_wsiS_operateD
  assign app_appW2_wsiS_operateD$D_IN =
	     CAN_FIRE_RL_app_appW2_operating_actions ;
  assign app_appW2_wsiS_operateD$EN = 1'd1 ;

  // register app_appW2_wsiS_pMesgCount
  assign app_appW2_wsiS_pMesgCount$D_IN = app_appW2_wsiS_pMesgCount + 32'd1 ;
  assign app_appW2_wsiS_pMesgCount$EN = 1'b0 ;

  // register app_appW2_wsiS_peerIsReady
  assign app_appW2_wsiS_peerIsReady$D_IN = 1'b0 ;
  assign app_appW2_wsiS_peerIsReady$EN = 1'd1 ;

  // register app_appW2_wsiS_reqFifo_countReg
  assign app_appW2_wsiS_reqFifo_countReg$D_IN =
	     app_appW2_wsiS_reqFifo_countReg - 2'd1 ;
  assign app_appW2_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_app_appW2_wsiS_reqFifo__updateLevelCounter ;

  // register app_appW2_wsiS_reqFifo_levelsValid
  assign app_appW2_wsiS_reqFifo_levelsValid$D_IN =
	     app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign app_appW2_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_app_appW2_wsipass_doMessagePush ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushImprecise ||
	     app_appW2_wsiS_reqFifo_r_deq$whas ;

  // register app_appW2_wsiS_statusR
  assign app_appW2_wsiS_statusR$D_IN =
	     { app_appW2_wsiS_isReset$VAL,
	       !app_appW2_wsiS_peerIsReady,
	       !app_appW2_wsiS_operateD,
	       app_appW2_wsiS_errorSticky,
	       app_appW2_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_app_appW2_wsiS_backpressure ||
	       app_appW2_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       app_appW2_wsiS_trafficSticky } ;
  assign app_appW2_wsiS_statusR$EN = 1'd1 ;

  // register app_appW2_wsiS_tBusyCount
  assign app_appW2_wsiS_tBusyCount$D_IN = app_appW2_wsiS_tBusyCount + 32'd1 ;
  assign app_appW2_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_app_appW2_wsiS_inc_tBusyCount ;

  // register app_appW2_wsiS_trafficSticky
  assign app_appW2_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign app_appW2_wsiS_trafficSticky$EN = 1'b0 ;

  // register app_appW2_wsiS_wordCount
  assign app_appW2_wsiS_wordCount$D_IN = app_appW2_wsiS_wordCount + 12'd1 ;
  assign app_appW2_wsiS_wordCount$EN = 1'b0 ;

  // register app_appW2_wsiWordsRemain
  assign app_appW2_wsiWordsRemain$D_IN =
	     MUX_app_appW2_mesgLength$write_1__SEL_4 ?
	       app_appW2_wsiS_reqFifo$D_OUT[55:44] :
	       MUX_app_appW2_wsiWordsRemain$write_1__VAL_2 ;
  assign app_appW2_wsiWordsRemain$EN =
	     WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	     app_appW2_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW2_wmwt_messagePushPrecise ;

  // register app_appW2_zeroLengthMesg
  assign app_appW2_zeroLengthMesg$D_IN =
	     app_appW2_wsiS_reqFifo$D_OUT[11:8] == 4'd0 ;
  assign app_appW2_zeroLengthMesg$EN =
	     MUX_app_appW2_mesgLength$write_1__SEL_4 ;

  // register app_appW3_bytesRead
  assign app_appW3_bytesRead$D_IN = app_appW3_bytesRead + 32'd4 ;
  assign app_appW3_bytesRead$EN =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     app_appW3_bytesRead != 32'hFFFFFFFF ;

  // register app_appW3_bytesThisMessage
  assign app_appW3_bytesThisMessage$D_IN = btm__h203796 ;
  assign app_appW3_bytesThisMessage$EN =
	     MUX_app_appW3_mesgWtCount$write_1__SEL_1 ;

  // register app_appW3_bytesWritten
  assign app_appW3_bytesWritten$D_IN = app_appW3_bytesWritten + 32'd4 ;
  assign app_appW3_bytesWritten$EN =
	     WILL_FIRE_RL_app_appW3_wmwt_mesg_ingress &&
	     app_appW3_bytesWritten < 32'hFFFFFFFB ;

  // register app_appW3_cyclesPassed
  assign app_appW3_cyclesPassed$D_IN = app_appW3_cyclesPassed + 32'd1 ;
  assign app_appW3_cyclesPassed$EN =
	     app_appW3_wsiS_statusR[0] &&
	     app_appW3_cyclesPassed != 32'hFFFFFFFF ;

  // register app_appW3_dlyCtrl
  assign app_appW3_dlyCtrl$D_IN = app_appW3_wci_reqF$D_OUT[31:0] ;
  assign app_appW3_dlyCtrl$EN =
	     WILL_FIRE_RL_app_appW3_wci_cfwr &&
	     app_appW3_wci_reqF$D_OUT[51:32] == 20'h0 ;

  // register app_appW3_dlyHoldoffBytes
  assign app_appW3_dlyHoldoffBytes$D_IN = app_appW3_wci_reqF$D_OUT[31:0] ;
  assign app_appW3_dlyHoldoffBytes$EN =
	     WILL_FIRE_RL_app_appW3_wci_cfwr &&
	     app_appW3_wci_reqF$D_OUT[51:32] == 20'h00004 ;

  // register app_appW3_dlyHoldoffCycles
  assign app_appW3_dlyHoldoffCycles$D_IN = app_appW3_wci_reqF$D_OUT[31:0] ;
  assign app_appW3_dlyHoldoffCycles$EN =
	     WILL_FIRE_RL_app_appW3_wci_cfwr &&
	     app_appW3_wci_reqF$D_OUT[51:32] == 20'h00008 ;

  // register app_appW3_dlyRAG
  assign app_appW3_dlyRAG$D_IN =
	     WILL_FIRE_RL_app_appW3_delay_read_req ?
	       MUX_app_appW3_dlyRAG$write_1__VAL_1 :
	       23'd0 ;
  assign app_appW3_dlyRAG$EN =
	     WILL_FIRE_RL_app_appW3_delay_read_req ||
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ;

  // register app_appW3_dlyRdOpOther
  assign app_appW3_dlyRdOpOther$D_IN = app_appW3_dlyRdOpOther + 32'd1 ;
  assign app_appW3_dlyRdOpOther$EN =
	     WILL_FIRE_RL_app_appW3_rdSer_begin && v__h206282[31:24] != 8'd0 ;

  // register app_appW3_dlyRdOpZero
  assign app_appW3_dlyRdOpZero$D_IN = app_appW3_dlyRdOpZero + 32'd1 ;
  assign app_appW3_dlyRdOpZero$EN =
	     WILL_FIRE_RL_app_appW3_rdSer_begin && v__h206282[31:24] == 8'd0 ;

  // register app_appW3_dlyReadCredit_value
  assign app_appW3_dlyReadCredit_value$D_IN =
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ?
	       8'd12 :
	       MUX_app_appW3_dlyReadCredit_value$write_1__VAL_2 ;
  assign app_appW3_dlyReadCredit_value$EN = 1'b1 ;

  // register app_appW3_dlyReadyToWrite_value
  assign app_appW3_dlyReadyToWrite_value$D_IN =
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ?
	       16'd0 :
	       MUX_app_appW3_dlyReadyToWrite_value$write_1__VAL_2 ;
  assign app_appW3_dlyReadyToWrite_value$EN = 1'b1 ;

  // register app_appW3_dlyWAG
  assign app_appW3_dlyWAG$D_IN =
	     WILL_FIRE_RL_app_appW3_delay_write_req ?
	       MUX_app_appW3_dlyWAG$write_1__VAL_1 :
	       23'd0 ;
  assign app_appW3_dlyWAG$EN =
	     WILL_FIRE_RL_app_appW3_delay_write_req ||
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ;

  // register app_appW3_dlyWordsStored_value
  assign app_appW3_dlyWordsStored_value$D_IN =
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ?
	       25'd0 :
	       MUX_app_appW3_dlyWordsStored_value$write_1__VAL_2 ;
  assign app_appW3_dlyWordsStored_value$EN = 1'b1 ;

  // register app_appW3_mesgLengthSoFar
  assign app_appW3_mesgLengthSoFar$D_IN =
	     app_appW3_wsiS_reqFifo$D_OUT[57] ?
	       14'd0 :
	       app_appW3_mesgLengthSoFar_708_PLUS_1___d7934 ;
  assign app_appW3_mesgLengthSoFar$EN =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ;

  // register app_appW3_mesgRdCount
  assign app_appW3_mesgRdCount$D_IN =
	     MUX_app_appW3_mesgRdCount$write_1__SEL_1 ?
	       MUX_app_appW3_mesgRdCount$write_1__VAL_1 :
	       32'd0 ;
  assign app_appW3_mesgRdCount$EN =
	     WILL_FIRE_RL_app_appW3_wmrd_mesgBodyResponse &&
	     app_appW3_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ;

  // register app_appW3_mesgWF_rCache
  assign app_appW3_mesgWF_rCache$D_IN =
	     { 1'd1, app_appW3_mesgWF_rWrPtr, x__h201307 } ;
  assign app_appW3_mesgWF_rCache$EN =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ;

  // register app_appW3_mesgWF_rRdPtr
  assign app_appW3_mesgWF_rRdPtr$D_IN = x__h201408 ;
  assign app_appW3_mesgWF_rRdPtr$EN = CAN_FIRE_RL_app_appW3_wrtSer_body ;

  // register app_appW3_mesgWF_rWrPtr
  assign app_appW3_mesgWF_rWrPtr$D_IN = app_appW3_mesgWF_rWrPtr + 13'd1 ;
  assign app_appW3_mesgWF_rWrPtr$EN =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ;

  // register app_appW3_mesgWtCount
  assign app_appW3_mesgWtCount$D_IN =
	     MUX_app_appW3_mesgWtCount$write_1__SEL_1 ?
	       MUX_app_appW3_mesgWtCount$write_1__VAL_1 :
	       32'd0 ;
  assign app_appW3_mesgWtCount$EN =
	     WILL_FIRE_RL_app_appW3_wmwt_mesg_ingress &&
	     app_appW3_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW3_wci_ctrl_IsO ;

  // register app_appW3_rdSerAddr
  assign app_appW3_rdSerAddr$D_IN = 32'h0 ;
  assign app_appW3_rdSerAddr$EN = 1'b0 ;

  // register app_appW3_rdSerEmpty
  assign app_appW3_rdSerEmpty$D_IN =
	     !MUX_app_appW3_rdSerEmpty$write_1__SEL_1 ;
  assign app_appW3_rdSerEmpty$EN =
	     (WILL_FIRE_RL_app_appW3_rdSer_body ||
	      WILL_FIRE_RL_app_appW3_rdSer_begin) &&
	     (app_appW3_rdSerEmpty || app_appW3_rdSerPos == 2'd0) ||
	     WILL_FIRE_RL_app_appW3_rdSer_sync ;

  // register app_appW3_rdSerMeta
  assign app_appW3_rdSerMeta$D_IN = v__h206282 ;
  assign app_appW3_rdSerMeta$EN = CAN_FIRE_RL_app_appW3_rdSer_begin ;

  // register app_appW3_rdSerPos
  assign app_appW3_rdSerPos$D_IN =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 ?
	       MUX_app_appW3_rdSerPos$write_1__VAL_1 :
	       2'd0 ;
  assign app_appW3_rdSerPos$EN =
	     WILL_FIRE_RL_app_appW3_rdSer_body ||
	     WILL_FIRE_RL_app_appW3_rdSer_begin ||
	     WILL_FIRE_RL_app_appW3_rdSer_sync ;

  // register app_appW3_rdSerStage
  assign app_appW3_rdSerStage$D_IN = app_appW3_wide16Fc$D_OUT[31:0] ;
  assign app_appW3_rdSerStage$EN =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (app_appW3_rdSerEmpty || app_appW3_rdSerPos == 2'd0) ;

  // register app_appW3_rdSerStage_1
  assign app_appW3_rdSerStage_1$D_IN = app_appW3_wide16Fc$D_OUT[63:32] ;
  assign app_appW3_rdSerStage_1$EN =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (app_appW3_rdSerEmpty || app_appW3_rdSerPos == 2'd0) ;

  // register app_appW3_rdSerStage_2
  assign app_appW3_rdSerStage_2$D_IN = app_appW3_wide16Fc$D_OUT[95:64] ;
  assign app_appW3_rdSerStage_2$EN =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (app_appW3_rdSerEmpty || app_appW3_rdSerPos == 2'd0) ;

  // register app_appW3_rdSerStage_3
  assign app_appW3_rdSerStage_3$D_IN = app_appW3_wide16Fc$D_OUT[127:96] ;
  assign app_appW3_rdSerStage_3$EN =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (app_appW3_rdSerEmpty || app_appW3_rdSerPos == 2'd0) ;

  // register app_appW3_rdSerUnroll
  assign app_appW3_rdSerUnroll$D_IN =
	     WILL_FIRE_RL_app_appW3_rdSer_begin ?
	       v__h206282[17:2] :
	       MUX_app_appW3_rdSerUnroll$write_1__VAL_2 ;
  assign app_appW3_rdSerUnroll$EN =
	     WILL_FIRE_RL_app_appW3_rdSer_begin ||
	     WILL_FIRE_RL_app_appW3_rdSer_body ;

  // register app_appW3_rdSyncWord
  always@(WILL_FIRE_RL_app_appW3_rdSer_begin or
	  MUX_app_appW3_rdSyncWord$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW3_rdSer_body or
	  MUX_app_appW3_rdSyncWord$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_rdSer_sync)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_rdSer_begin:
	  app_appW3_rdSyncWord$D_IN = MUX_app_appW3_rdSyncWord$write_1__VAL_1;
      WILL_FIRE_RL_app_appW3_rdSer_body:
	  app_appW3_rdSyncWord$D_IN = MUX_app_appW3_rdSyncWord$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_rdSer_sync: app_appW3_rdSyncWord$D_IN = 1'd0;
      default: app_appW3_rdSyncWord$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign app_appW3_rdSyncWord$EN =
	     WILL_FIRE_RL_app_appW3_rdSer_begin ||
	     WILL_FIRE_RL_app_appW3_rdSer_body ||
	     WILL_FIRE_RL_app_appW3_rdSer_sync ;

  // register app_appW3_readMeta
  assign app_appW3_readMeta$D_IN = app_appW3_metaRF$D_OUT ;
  assign app_appW3_readMeta$EN = CAN_FIRE_RL_app_appW3_wmrd_mesgBegin ;

  // register app_appW3_tog50
  assign app_appW3_tog50$D_IN = !app_appW3_tog50 ;
  assign app_appW3_tog50$EN = CAN_FIRE_RL_app_appW3_operating_actions ;

  // register app_appW3_unrollCnt
  assign app_appW3_unrollCnt$D_IN =
	     WILL_FIRE_RL_app_appW3_wmrd_mesgBegin ?
	       MUX_app_appW3_unrollCnt$write_1__VAL_1 :
	       MUX_app_appW3_unrollCnt$write_1__VAL_2 ;
  assign app_appW3_unrollCnt$EN =
	     WILL_FIRE_RL_app_appW3_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW3_wmrd_mesgBodyResponse ;

  // register app_appW3_wci_cEdge
  assign app_appW3_wci_cEdge$D_IN = app_appW3_wci_reqF$D_OUT[36:34] ;
  assign app_appW3_wci_cEdge$EN = WILL_FIRE_RL_app_appW3_wci_ctl_op_start ;

  // register app_appW3_wci_cState
  assign app_appW3_wci_cState$D_IN = app_appW3_wci_nState ;
  assign app_appW3_wci_cState$EN =
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_complete &&
	     !app_appW3_wci_illegalEdge ;

  // register app_appW3_wci_ctlAckReg
  assign app_appW3_wci_ctlAckReg$D_IN = app_appW3_wci_ctlAckReg_1$whas ;
  assign app_appW3_wci_ctlAckReg$EN = 1'd1 ;

  // register app_appW3_wci_ctlOpActive
  assign app_appW3_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_app_appW3_wci_ctl_op_complete ;
  assign app_appW3_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_complete ||
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_start ;

  // register app_appW3_wci_illegalEdge
  assign app_appW3_wci_illegalEdge$D_IN =
	     !MUX_app_appW3_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_app_appW3_wci_illegalEdge$write_1__VAL_2 ;
  assign app_appW3_wci_illegalEdge$EN =
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_complete &&
	     app_appW3_wci_illegalEdge ||
	     MUX_app_appW3_wci_illegalEdge$write_1__SEL_2 ;

  // register app_appW3_wci_nState
  always@(app_appW3_wci_reqF$D_OUT)
  begin
    case (app_appW3_wci_reqF$D_OUT[36:34])
      3'd0: app_appW3_wci_nState$D_IN = 3'd1;
      3'd1: app_appW3_wci_nState$D_IN = 3'd2;
      3'd2: app_appW3_wci_nState$D_IN = 3'd3;
      default: app_appW3_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign app_appW3_wci_nState$EN =
	     WILL_FIRE_RL_app_appW3_wci_ctl_op_start &&
	     (app_appW3_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      app_appW3_wci_cState == 3'd0 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (app_appW3_wci_cState == 3'd1 ||
	       app_appW3_wci_cState == 3'd3) ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      app_appW3_wci_cState == 3'd2 ||
	      app_appW3_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (app_appW3_wci_cState == 3'd3 || app_appW3_wci_cState == 3'd2 ||
	       app_appW3_wci_cState == 3'd1)) ;

  // register app_appW3_wci_reqF_countReg
  assign app_appW3_wci_reqF_countReg$D_IN =
	     (app_appW3_wci_wciReq$wget[59:57] != 3'd0) ?
	       app_appW3_wci_reqF_countReg + 2'd1 :
	       app_appW3_wci_reqF_countReg - 2'd1 ;
  assign app_appW3_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_app_appW3_wci_reqF__updateLevelCounter ;

  // register app_appW3_wci_respF_c_r
  assign app_appW3_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW3_wci_respF_incCtr ?
	       MUX_app_appW3_wci_respF_c_r$write_1__VAL_1 :
	       MUX_app_appW3_wci_respF_c_r$write_1__VAL_2 ;
  assign app_appW3_wci_respF_c_r$EN =
	     WILL_FIRE_RL_app_appW3_wci_respF_incCtr ||
	     WILL_FIRE_RL_app_appW3_wci_respF_decCtr ;

  // register app_appW3_wci_respF_q_0
  always@(WILL_FIRE_RL_app_appW3_wci_respF_both or
	  MUX_app_appW3_wci_respF_q_0$write_1__VAL_1 or
	  MUX_app_appW3_wci_respF_q_0$write_1__SEL_2 or
	  MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wci_respF_decCtr or app_appW3_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wci_respF_both:
	  app_appW3_wci_respF_q_0$D_IN =
	      MUX_app_appW3_wci_respF_q_0$write_1__VAL_1;
      MUX_app_appW3_wci_respF_q_0$write_1__SEL_2:
	  app_appW3_wci_respF_q_0$D_IN =
	      MUX_app_appW3_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wci_respF_decCtr:
	  app_appW3_wci_respF_q_0$D_IN = app_appW3_wci_respF_q_1;
      default: app_appW3_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wci_respF_q_0$EN =
	     WILL_FIRE_RL_app_appW3_wci_respF_both ||
	     WILL_FIRE_RL_app_appW3_wci_respF_incCtr &&
	     app_appW3_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW3_wci_respF_decCtr ;

  // register app_appW3_wci_respF_q_1
  always@(WILL_FIRE_RL_app_appW3_wci_respF_both or
	  MUX_app_appW3_wci_respF_q_1$write_1__VAL_1 or
	  MUX_app_appW3_wci_respF_q_1$write_1__SEL_2 or
	  MUX_app_appW3_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wci_respF_both:
	  app_appW3_wci_respF_q_1$D_IN =
	      MUX_app_appW3_wci_respF_q_1$write_1__VAL_1;
      MUX_app_appW3_wci_respF_q_1$write_1__SEL_2:
	  app_appW3_wci_respF_q_1$D_IN =
	      MUX_app_appW3_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wci_respF_decCtr:
	  app_appW3_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: app_appW3_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wci_respF_q_1$EN =
	     WILL_FIRE_RL_app_appW3_wci_respF_both ||
	     WILL_FIRE_RL_app_appW3_wci_respF_incCtr &&
	     app_appW3_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW3_wci_respF_decCtr ;

  // register app_appW3_wci_sFlagReg
  assign app_appW3_wci_sFlagReg$D_IN = 1'b0 ;
  assign app_appW3_wci_sFlagReg$EN = 1'd1 ;

  // register app_appW3_wci_sThreadBusy_d
  assign app_appW3_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign app_appW3_wci_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW3_wmemiRdReq
  assign app_appW3_wmemiRdReq$D_IN = app_appW3_wmemiRdReq + 32'd1 ;
  assign app_appW3_wmemiRdReq$EN = WILL_FIRE_RL_app_appW3_delay_read_req ;

  // register app_appW3_wmemiRdResp1
  assign app_appW3_wmemiRdResp1$D_IN = app_appW3_wmemiRdResp1 + 32'd1 ;
  assign app_appW3_wmemiRdResp1$EN = CAN_FIRE_RL_app_appW3_delay_read_resp ;

  // register app_appW3_wmemiRdResp2
  assign app_appW3_wmemiRdResp2$D_IN = app_appW3_wmemiRdResp2 + 32'd1 ;
  assign app_appW3_wmemiRdResp2$EN = CAN_FIRE_RL_app_appW3_delay_Fb2Fc ;

  // register app_appW3_wmemiWrReq
  assign app_appW3_wmemiWrReq$D_IN = app_appW3_wmemiWrReq + 32'd1 ;
  assign app_appW3_wmemiWrReq$EN = CAN_FIRE_RL_app_appW3_delay_write_req ;

  // register app_appW3_wmemi_busyWithMessage
  assign app_appW3_wmemi_busyWithMessage$D_IN = 1'b0 ;
  assign app_appW3_wmemi_busyWithMessage$EN = 1'b0 ;

  // register app_appW3_wmemi_dhF_c_r
  assign app_appW3_wmemi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr ?
	       MUX_app_appW3_wmemi_dhF_c_r$write_1__VAL_1 :
	       MUX_app_appW3_wmemi_dhF_c_r$write_1__VAL_2 ;
  assign app_appW3_wmemi_dhF_c_r$EN =
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr ||
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr ;

  // register app_appW3_wmemi_dhF_q_0
  always@(WILL_FIRE_RL_app_appW3_wmemi_dhF_both or
	  MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_1 or
	  MUX_app_appW3_wmemi_dhF_q_0$write_1__SEL_2 or
	  MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr or app_appW3_wmemi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wmemi_dhF_both:
	  app_appW3_wmemi_dhF_q_0$D_IN =
	      MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_1;
      MUX_app_appW3_wmemi_dhF_q_0$write_1__SEL_2:
	  app_appW3_wmemi_dhF_q_0$D_IN =
	      MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr:
	  app_appW3_wmemi_dhF_q_0$D_IN = app_appW3_wmemi_dhF_q_1;
      default: app_appW3_wmemi_dhF_q_0$D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wmemi_dhF_q_0$EN =
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_both ||
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr &&
	     app_appW3_wmemi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr ;

  // register app_appW3_wmemi_dhF_q_1
  always@(WILL_FIRE_RL_app_appW3_wmemi_dhF_both or
	  MUX_app_appW3_wmemi_dhF_q_1$write_1__VAL_1 or
	  MUX_app_appW3_wmemi_dhF_q_1$write_1__SEL_2 or
	  MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wmemi_dhF_both:
	  app_appW3_wmemi_dhF_q_1$D_IN =
	      MUX_app_appW3_wmemi_dhF_q_1$write_1__VAL_1;
      MUX_app_appW3_wmemi_dhF_q_1$write_1__SEL_2:
	  app_appW3_wmemi_dhF_q_1$D_IN =
	      MUX_app_appW3_wmemi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr:
	  app_appW3_wmemi_dhF_q_1$D_IN =
	      146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: app_appW3_wmemi_dhF_q_1$D_IN =
		   146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wmemi_dhF_q_1$EN =
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_both ||
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_incCtr &&
	     app_appW3_wmemi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW3_wmemi_dhF_decCtr ;

  // register app_appW3_wmemi_errorSticky
  assign app_appW3_wmemi_errorSticky$D_IN = 1'd1 ;
  assign app_appW3_wmemi_errorSticky$EN =
	     WILL_FIRE_RL_app_appW3_wmemi_respAdvance &&
	     !app_appW3_wmemi_respF$FULL_N ;

  // register app_appW3_wmemi_operateD
  assign app_appW3_wmemi_operateD$D_IN =
	     CAN_FIRE_RL_app_appW3_operating_actions ;
  assign app_appW3_wmemi_operateD$EN = 1'd1 ;

  // register app_appW3_wmemi_peerIsReady
  assign app_appW3_wmemi_peerIsReady$D_IN = 1'b1 ;
  assign app_appW3_wmemi_peerIsReady$EN = 1'd1 ;

  // register app_appW3_wmemi_reqF_c_r
  assign app_appW3_wmemi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr ?
	       MUX_app_appW3_wmemi_reqF_c_r$write_1__VAL_1 :
	       MUX_app_appW3_wmemi_reqF_c_r$write_1__VAL_2 ;
  assign app_appW3_wmemi_reqF_c_r$EN =
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr ||
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr ;

  // register app_appW3_wmemi_reqF_q_0
  always@(WILL_FIRE_RL_app_appW3_wmemi_reqF_both or
	  MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_1 or
	  MUX_app_appW3_wmemi_reqF_q_0$write_1__SEL_2 or
	  MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr or
	  app_appW3_wmemi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wmemi_reqF_both:
	  app_appW3_wmemi_reqF_q_0$D_IN =
	      MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_1;
      MUX_app_appW3_wmemi_reqF_q_0$write_1__SEL_2:
	  app_appW3_wmemi_reqF_q_0$D_IN =
	      MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr:
	  app_appW3_wmemi_reqF_q_0$D_IN = app_appW3_wmemi_reqF_q_1;
      default: app_appW3_wmemi_reqF_q_0$D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wmemi_reqF_q_0$EN =
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_both ||
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr &&
	     app_appW3_wmemi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr ;

  // register app_appW3_wmemi_reqF_q_1
  always@(WILL_FIRE_RL_app_appW3_wmemi_reqF_both or
	  MUX_app_appW3_wmemi_reqF_q_1$write_1__VAL_1 or
	  MUX_app_appW3_wmemi_reqF_q_1$write_1__SEL_2 or
	  MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wmemi_reqF_both:
	  app_appW3_wmemi_reqF_q_1$D_IN =
	      MUX_app_appW3_wmemi_reqF_q_1$write_1__VAL_1;
      MUX_app_appW3_wmemi_reqF_q_1$write_1__SEL_2:
	  app_appW3_wmemi_reqF_q_1$D_IN =
	      MUX_app_appW3_wmemi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr:
	  app_appW3_wmemi_reqF_q_1$D_IN = 52'h0AAAAAAAAAAAA;
      default: app_appW3_wmemi_reqF_q_1$D_IN =
		   52'hAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wmemi_reqF_q_1$EN =
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_both ||
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_incCtr &&
	     app_appW3_wmemi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW3_wmemi_reqF_decCtr ;

  // register app_appW3_wmemi_statusR
  assign app_appW3_wmemi_statusR$D_IN =
	     { app_appW3_wmemi_isReset$VAL,
	       !app_appW3_wmemi_peerIsReady,
	       !app_appW3_wmemi_operateD,
	       app_appW3_wmemi_errorSticky,
	       3'd0,
	       app_appW3_wmemi_trafficSticky } ;
  assign app_appW3_wmemi_statusR$EN = 1'd1 ;

  // register app_appW3_wmemi_trafficSticky
  assign app_appW3_wmemi_trafficSticky$D_IN = 1'd1 ;
  assign app_appW3_wmemi_trafficSticky$EN = wmemiM_SCmdAccept ;

  // register app_appW3_wrtSerAddr
  assign app_appW3_wrtSerAddr$D_IN = 32'h0 ;
  assign app_appW3_wrtSerAddr$EN = 1'b0 ;

  // register app_appW3_wrtSerPos
  assign app_appW3_wrtSerPos$D_IN =
	     WILL_FIRE_RL_app_appW3_wrtSer_begin ?
	       MUX_app_appW3_wrtSerPos$write_1__VAL_1 :
	       MUX_app_appW3_wrtSerPos$write_1__VAL_2 ;
  assign app_appW3_wrtSerPos$EN =
	     WILL_FIRE_RL_app_appW3_wrtSer_begin ||
	     WILL_FIRE_RL_app_appW3_wrtSer_body ;

  // register app_appW3_wrtSerStage
  assign app_appW3_wrtSerStage$D_IN =
	     MUX_app_appW3_wrtSerStage$write_1__SEL_1 ?
	       data__h204908 :
	       app_appW3_metaWF$D_OUT ;
  assign app_appW3_wrtSerStage$EN =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd0 ||
	     WILL_FIRE_RL_app_appW3_wrtSer_begin &&
	     app_appW3_wrtSerPos == 2'd0 ;

  // register app_appW3_wrtSerStage_1
  assign app_appW3_wrtSerStage_1$D_IN =
	     MUX_app_appW3_wrtSerStage_1$write_1__SEL_1 ?
	       data__h204908 :
	       app_appW3_metaWF$D_OUT ;
  assign app_appW3_wrtSerStage_1$EN =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd1 ||
	     WILL_FIRE_RL_app_appW3_wrtSer_begin &&
	     app_appW3_wrtSerPos == 2'd1 ;

  // register app_appW3_wrtSerStage_2
  assign app_appW3_wrtSerStage_2$D_IN =
	     MUX_app_appW3_wrtSerStage_2$write_1__SEL_1 ?
	       data__h204908 :
	       app_appW3_metaWF$D_OUT ;
  assign app_appW3_wrtSerStage_2$EN =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd2 ||
	     WILL_FIRE_RL_app_appW3_wrtSer_begin &&
	     app_appW3_wrtSerPos == 2'd2 ;

  // register app_appW3_wrtSerStage_3
  assign app_appW3_wrtSerStage_3$D_IN =
	     MUX_app_appW3_wrtSerStage_3$write_1__SEL_1 ?
	       data__h204908 :
	       app_appW3_metaWF$D_OUT ;
  assign app_appW3_wrtSerStage_3$EN =
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     app_appW3_wrtSerPos == 2'd3 ||
	     WILL_FIRE_RL_app_appW3_wrtSer_begin &&
	     app_appW3_wrtSerPos == 2'd3 ;

  // register app_appW3_wrtSerUnroll
  assign app_appW3_wrtSerUnroll$D_IN =
	     WILL_FIRE_RL_app_appW3_wrtSer_begin ?
	       app_appW3_metaWF$D_OUT[17:2] :
	       MUX_app_appW3_wrtSerUnroll$write_1__VAL_2 ;
  assign app_appW3_wrtSerUnroll$EN =
	     WILL_FIRE_RL_app_appW3_wrtSer_begin ||
	     WILL_FIRE_RL_app_appW3_wrtSer_body ;

  // register app_appW3_wsiM_burstKind
  assign app_appW3_wsiM_burstKind$D_IN =
	     (app_appW3_wsiM_burstKind == 2'd0) ?
	       (app_appW3_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign app_appW3_wsiM_burstKind$EN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_deq &&
	     app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (app_appW3_wsiM_burstKind == 2'd0 ||
	      (app_appW3_wsiM_burstKind == 2'd1 ||
	       app_appW3_wsiM_burstKind == 2'd2) &&
	      app_appW3_wsiM_reqFifo_q_0[57]) ;

  // register app_appW3_wsiM_errorSticky
  assign app_appW3_wsiM_errorSticky$D_IN = 1'b0 ;
  assign app_appW3_wsiM_errorSticky$EN = 1'b0 ;

  // register app_appW3_wsiM_iMesgCount
  assign app_appW3_wsiM_iMesgCount$D_IN = app_appW3_wsiM_iMesgCount + 32'd1 ;
  assign app_appW3_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_deq &&
	     app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     app_appW3_wsiM_burstKind == 2'd2 &&
	     app_appW3_wsiM_reqFifo_q_0[57] ;

  // register app_appW3_wsiM_operateD
  assign app_appW3_wsiM_operateD$D_IN =
	     CAN_FIRE_RL_app_appW3_operating_actions ;
  assign app_appW3_wsiM_operateD$EN = 1'd1 ;

  // register app_appW3_wsiM_pMesgCount
  assign app_appW3_wsiM_pMesgCount$D_IN = app_appW3_wsiM_pMesgCount + 32'd1 ;
  assign app_appW3_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_deq &&
	     app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     app_appW3_wsiM_burstKind == 2'd1 &&
	     app_appW3_wsiM_reqFifo_q_0[57] ;

  // register app_appW3_wsiM_peerIsReady
  assign app_appW3_wsiM_peerIsReady$D_IN = CAN_FIRE_RL_app_sRstConnect_1 ;
  assign app_appW3_wsiM_peerIsReady$EN = 1'd1 ;

  // register app_appW3_wsiM_reqFifo_c_r
  assign app_appW3_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr ?
	       MUX_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_app_appW3_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign app_appW3_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr ;

  // register app_appW3_wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both or
	  MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr or
	  app_appW3_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both:
	  app_appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_app_appW3_wsiM_reqFifo_q_0$write_1__SEL_2:
	  app_appW3_wsiM_reqFifo_q_0$D_IN =
	      MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr:
	  app_appW3_wsiM_reqFifo_q_0$D_IN = app_appW3_wsiM_reqFifo_q_1;
      default: app_appW3_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr &&
	     app_appW3_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr ;

  // register app_appW3_wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both or
	  MUX_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both:
	  app_appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_app_appW3_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_app_appW3_wsiM_reqFifo_q_1$write_1__SEL_2:
	  app_appW3_wsiM_reqFifo_q_1$D_IN =
	      MUX_app_appW3_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr:
	  app_appW3_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: app_appW3_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW3_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_incCtr &&
	     app_appW3_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_decCtr ;

  // register app_appW3_wsiM_sThreadBusy_d
  assign app_appW3_wsiM_sThreadBusy_d$D_IN = CAN_FIRE_RL_app_stbConnect_1 ;
  assign app_appW3_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW3_wsiM_statusR
  assign app_appW3_wsiM_statusR$D_IN =
	     { app_appW3_wsiM_isReset$VAL,
	       !app_appW3_wsiM_peerIsReady,
	       !app_appW3_wsiM_operateD,
	       app_appW3_wsiM_errorSticky,
	       app_appW3_wsiM_burstKind != 2'd0,
	       app_appW3_wsiM_sThreadBusy_d,
	       1'd0,
	       app_appW3_wsiM_trafficSticky } ;
  assign app_appW3_wsiM_statusR$EN = 1'd1 ;

  // register app_appW3_wsiM_tBusyCount
  assign app_appW3_wsiM_tBusyCount$D_IN = app_appW3_wsiM_tBusyCount + 32'd1 ;
  assign app_appW3_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_app_appW3_wsiM_inc_tBusyCount ;

  // register app_appW3_wsiM_trafficSticky
  assign app_appW3_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign app_appW3_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_app_appW3_wsiM_reqFifo_deq &&
	     app_appW3_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register app_appW3_wsiS_burstKind
  assign app_appW3_wsiS_burstKind$D_IN =
	     (app_appW3_wsiS_burstKind == 2'd0) ?
	       (app_appW3_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign app_appW3_wsiS_burstKind$EN =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq &&
	     app_appW3_wsiS_reqFifo_notFull__414_AND_app_ap_ETC___d5436 ;

  // register app_appW3_wsiS_errorSticky
  assign app_appW3_wsiS_errorSticky$D_IN = 1'd1 ;
  assign app_appW3_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq &&
	     !app_appW3_wsiS_reqFifo$FULL_N ;

  // register app_appW3_wsiS_iMesgCount
  assign app_appW3_wsiS_iMesgCount$D_IN = app_appW3_wsiS_iMesgCount + 32'd1 ;
  assign app_appW3_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq &&
	     app_appW3_wsiS_reqFifo$FULL_N &&
	     app_appW3_wsiS_burstKind == 2'd2 &&
	     app_appW3_wsiS_wsiReq$wget[57] ;

  // register app_appW3_wsiS_mesgWordLength
  assign app_appW3_wsiS_mesgWordLength$D_IN = app_appW3_wsiS_wordCount ;
  assign app_appW3_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq &&
	     app_appW3_wsiS_reqFifo$FULL_N &&
	     app_appW3_wsiS_wsiReq$wget[57] ;

  // register app_appW3_wsiS_operateD
  assign app_appW3_wsiS_operateD$D_IN =
	     CAN_FIRE_RL_app_appW3_operating_actions ;
  assign app_appW3_wsiS_operateD$EN = 1'd1 ;

  // register app_appW3_wsiS_pMesgCount
  assign app_appW3_wsiS_pMesgCount$D_IN = app_appW3_wsiS_pMesgCount + 32'd1 ;
  assign app_appW3_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq &&
	     app_appW3_wsiS_reqFifo$FULL_N &&
	     app_appW3_wsiS_burstKind == 2'd1 &&
	     app_appW3_wsiS_wsiReq$wget[57] ;

  // register app_appW3_wsiS_peerIsReady
  assign app_appW3_wsiS_peerIsReady$D_IN = CAN_FIRE_RL_app_mRstConnect ;
  assign app_appW3_wsiS_peerIsReady$EN = 1'd1 ;

  // register app_appW3_wsiS_reqFifo_countReg
  assign app_appW3_wsiS_reqFifo_countReg$D_IN =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ?
	       app_appW3_wsiS_reqFifo_countReg + 2'd1 :
	       app_appW3_wsiS_reqFifo_countReg - 2'd1 ;
  assign app_appW3_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_app_appW3_wsiS_reqFifo__updateLevelCounter ;

  // register app_appW3_wsiS_reqFifo_levelsValid
  assign app_appW3_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_reset ;
  assign app_appW3_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_enq &&
	     app_appW3_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_app_appW3_wmwt_mesg_ingress ||
	     WILL_FIRE_RL_app_appW3_wsipass_doMessagePush ||
	     WILL_FIRE_RL_app_appW3_wsiS_reqFifo_reset ;

  // register app_appW3_wsiS_statusR
  assign app_appW3_wsiS_statusR$D_IN =
	     { app_appW3_wsiS_isReset$VAL,
	       !app_appW3_wsiS_peerIsReady,
	       !app_appW3_wsiS_operateD,
	       app_appW3_wsiS_errorSticky,
	       app_appW3_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_app_appW3_wsiS_backpressure ||
	       app_appW3_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       app_appW3_wsiS_trafficSticky } ;
  assign app_appW3_wsiS_statusR$EN = 1'd1 ;

  // register app_appW3_wsiS_tBusyCount
  assign app_appW3_wsiS_tBusyCount$D_IN = app_appW3_wsiS_tBusyCount + 32'd1 ;
  assign app_appW3_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_app_appW3_wsiS_inc_tBusyCount ;

  // register app_appW3_wsiS_trafficSticky
  assign app_appW3_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign app_appW3_wsiS_trafficSticky$EN =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // register app_appW3_wsiS_wordCount
  assign app_appW3_wsiS_wordCount$D_IN =
	     app_appW3_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       app_appW3_wsiS_wordCount + 12'd1 ;
  assign app_appW3_wsiS_wordCount$EN =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // register app_appW4_abortCount
  assign app_appW4_abortCount$D_IN = app_appW4_abortCount + 32'd1 ;
  assign app_appW4_abortCount$EN = CAN_FIRE_RL_app_appW4_wmwt_doAbort ;

  // register app_appW4_doAbort
  assign app_appW4_doAbort$D_IN = 1'd0 ;
  assign app_appW4_doAbort$EN = CAN_FIRE_RL_app_appW4_wmwt_doAbort ;

  // register app_appW4_endOfMessage
  assign app_appW4_endOfMessage$D_IN =
	     MUX_app_appW4_endOfMessage$write_1__SEL_1 ;
  assign app_appW4_endOfMessage$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ;

  // register app_appW4_errCount
  assign app_appW4_errCount$D_IN = app_appW4_errCount + 32'd1 ;
  assign app_appW4_errCount$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[43:12] != app_appW4_valExpect &&
	     (!app_appW4_wsiS_reqFifo$D_OUT[57] ||
	      app_appW4_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register app_appW4_fabRespCredit_value
  assign app_appW4_fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_app_appW4_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_app_appW4_fabRespCredit_value$write_1__VAL_2 ;
  assign app_appW4_fabRespCredit_value$EN = 1'b1 ;

  // register app_appW4_fabWordsCurReq
  assign app_appW4_fabWordsCurReq$D_IN =
	     (app_appW4_fabWordsRemain <= b__h228340) ?
	       app_appW4_fabWordsRemain :
	       b__h228340 ;
  assign app_appW4_fabWordsCurReq$EN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest ;

  // register app_appW4_fabWordsRemain
  assign app_appW4_fabWordsRemain$D_IN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ?
	       MUX_app_appW4_fabWordsRemain$write_1__VAL_1 :
	       MUX_app_appW4_fabWordsRemain$write_1__VAL_2 ;
  assign app_appW4_fabWordsRemain$EN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ;

  // register app_appW4_firstMsgReq
  assign app_appW4_firstMsgReq$D_IN = 1'b0 ;
  assign app_appW4_firstMsgReq$EN = 1'b0 ;

  // register app_appW4_impreciseBurst
  assign app_appW4_impreciseBurst$D_IN =
	     !WILL_FIRE_RL_app_appW4_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_app_appW4_wmwt_doAbort ;
  assign app_appW4_impreciseBurst$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     !app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW4_wmwt_doAbort ;

  // register app_appW4_lastMesg
  assign app_appW4_lastMesg$D_IN =
	     (MUX_app_appW4_endOfMessage$write_1__SEL_1 ||
	      MUX_app_appW4_lastMesg$write_1__SEL_2) ?
	       app_appW4_thisMesg :
	       32'hFEFEFFFE ;
  assign app_appW4_lastMesg$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW4_wci_ctrl_IsO ;

  // register app_appW4_mesgCount
  always@(MUX_app_appW4_mesgCount$write_1__SEL_1 or
	  MUX_app_appW4_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wmwt_messageFinalize or
	  WILL_FIRE_RL_app_appW4_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_mesgCount$write_1__SEL_1:
	  app_appW4_mesgCount$D_IN = MUX_app_appW4_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wmwt_messageFinalize:
	  app_appW4_mesgCount$D_IN = MUX_app_appW4_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wci_ctrl_IsO: app_appW4_mesgCount$D_IN = 32'd0;
      default: app_appW4_mesgCount$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_mesgCount$EN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse &&
	     app_appW4_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW4_wci_ctrl_IsO ;

  // register app_appW4_mesgLength
  always@(WILL_FIRE_RL_app_appW4_wmwt_messageFinalize or
	  WILL_FIRE_RL_app_appW4_wmwt_doAbort or
	  MUX_app_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_app_appW4_mesgLength$write_1__VAL_3 or
	  MUX_app_appW4_mesgLength$write_1__SEL_4 or
	  MUX_app_appW4_mesgLength$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
    WILL_FIRE_RL_app_appW4_wmwt_doAbort:
	app_appW4_mesgLength$D_IN = 15'd10922;
    MUX_app_appW4_endOfMessage$write_1__SEL_1:
	app_appW4_mesgLength$D_IN = MUX_app_appW4_mesgLength$write_1__VAL_3;
    MUX_app_appW4_mesgLength$write_1__SEL_4:
	app_appW4_mesgLength$D_IN = MUX_app_appW4_mesgLength$write_1__VAL_4;
    default: app_appW4_mesgLength$D_IN =
		 15'b010101010101010 /* unspecified value */ ;
  endcase
  assign app_appW4_mesgLength$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW4_wmwt_doAbort ;

  // register app_appW4_mesgLengthSoFar
  assign app_appW4_mesgLengthSoFar$D_IN =
	     MUX_app_appW4_impreciseBurst$write_1__SEL_3 ?
	       14'd0 :
	       mlp1__h230640 ;
  assign app_appW4_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     !app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise ;

  // register app_appW4_mesgPreRequest
  assign app_appW4_mesgPreRequest$D_IN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest ;
  assign app_appW4_mesgPreRequest$EN = 1'd1 ;

  // register app_appW4_mesgReqAddr
  assign app_appW4_mesgReqAddr$D_IN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_app_appW4_mesgReqAddr$write_1__VAL_2 ;
  assign app_appW4_mesgReqAddr$EN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ;

  // register app_appW4_mesgReqOK
  assign app_appW4_mesgReqOK$D_IN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ;
  assign app_appW4_mesgReqOK$EN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyPreRequest ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse ;

  // register app_appW4_mesgReqValid
  assign app_appW4_mesgReqValid$D_IN =
	     !WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ;
  assign app_appW4_mesgReqValid$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ;

  // register app_appW4_opcode
  assign app_appW4_opcode$D_IN =
	     (WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
	      WILL_FIRE_RL_app_appW4_wmwt_doAbort) ?
	       9'd170 :
	       MUX_app_appW4_opcode$write_1__VAL_3 ;
  assign app_appW4_opcode$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin ||
	     WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW4_wmwt_doAbort ;

  // register app_appW4_preciseBurst
  assign app_appW4_preciseBurst$D_IN =
	     !WILL_FIRE_RL_app_appW4_wmwt_messageFinalize &&
	     !WILL_FIRE_RL_app_appW4_wmwt_doAbort ;
  assign app_appW4_preciseBurst$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW4_wmwt_messageFinalize ||
	     WILL_FIRE_RL_app_appW4_wmwt_doAbort ;

  // register app_appW4_readyToPush
  assign app_appW4_readyToPush$D_IN =
	     !WILL_FIRE_RL_app_appW4_wmwt_doAbort &&
	     !MUX_app_appW4_endOfMessage$write_1__SEL_1 ;
  assign app_appW4_readyToPush$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     !app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW4_wmwt_doAbort ;

  // register app_appW4_readyToRequest
  assign app_appW4_readyToRequest$D_IN =
	     MUX_app_appW4_mesgLength$write_1__SEL_4 ;
  assign app_appW4_readyToRequest$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ;

  // register app_appW4_respF_rCache
  assign app_appW4_respF_rCache$D_IN =
	     { 1'd1,
	       app_appW4_respF_rWrPtr,
	       IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7139,
	       app_appW4_respF_pwEnqueue$whas &&
	       app_appW4_respF_wDataIn$wget[57],
	       app_appW4_respF_pwEnqueue$whas &&
	       app_appW4_respF_wDataIn$wget[56],
	       IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7138 } ;
  assign app_appW4_respF_rCache$EN = app_appW4_respF_pwEnqueue$whas ;

  // register app_appW4_respF_rRdPtr
  assign app_appW4_respF_rRdPtr$D_IN = x__h226506 ;
  assign app_appW4_respF_rRdPtr$EN =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi ;

  // register app_appW4_respF_rWrPtr
  assign app_appW4_respF_rWrPtr$D_IN = app_appW4_respF_rWrPtr + 12'd1 ;
  assign app_appW4_respF_rWrPtr$EN = app_appW4_respF_pwEnqueue$whas ;

  // register app_appW4_smaCtrl
  assign app_appW4_smaCtrl$D_IN = app_appW4_wci_reqF$D_OUT[31:0] ;
  assign app_appW4_smaCtrl$EN =
	     WILL_FIRE_RL_app_appW4_wci_cfwr &&
	     app_appW4_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register app_appW4_thisMesg
  always@(MUX_app_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_app_appW4_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wmrd_mesgBegin or
	  MUX_app_appW4_thisMesg$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmwt_requestPrecise or
	  WILL_FIRE_RL_app_appW4_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_endOfMessage$write_1__SEL_1:
	  app_appW4_thisMesg$D_IN = MUX_app_appW4_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wmrd_mesgBegin:
	  app_appW4_thisMesg$D_IN = MUX_app_appW4_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmwt_requestPrecise:
	  app_appW4_thisMesg$D_IN = MUX_app_appW4_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wci_ctrl_IsO:
	  app_appW4_thisMesg$D_IN = 32'hFEFEFFFE;
      default: app_appW4_thisMesg$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_thisMesg$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     app_appW4_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW4_wmwt_requestPrecise ||
	     WILL_FIRE_RL_app_appW4_wci_ctrl_IsO ;

  // register app_appW4_unrollCnt
  assign app_appW4_unrollCnt$D_IN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ?
	       MUX_app_appW4_unrollCnt$write_1__VAL_1 :
	       MUX_app_appW4_unrollCnt$write_1__VAL_2 ;
  assign app_appW4_unrollCnt$EN =
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBegin ||
	     WILL_FIRE_RL_app_appW4_wmrd_mesgBodyResponse ;

  // register app_appW4_valExpect
  assign app_appW4_valExpect$D_IN = app_appW4_valExpect + 32'd1 ;
  assign app_appW4_valExpect$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise &&
	     (!app_appW4_wsiS_reqFifo$D_OUT[57] ||
	      app_appW4_wsiS_reqFifo$D_OUT[11:8] != 4'd0) ;

  // register app_appW4_wci_cEdge
  assign app_appW4_wci_cEdge$D_IN = app_appW4_wci_reqF$D_OUT[36:34] ;
  assign app_appW4_wci_cEdge$EN = WILL_FIRE_RL_app_appW4_wci_ctl_op_start ;

  // register app_appW4_wci_cState
  assign app_appW4_wci_cState$D_IN = app_appW4_wci_nState ;
  assign app_appW4_wci_cState$EN =
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_complete &&
	     !app_appW4_wci_illegalEdge ;

  // register app_appW4_wci_ctlAckReg
  assign app_appW4_wci_ctlAckReg$D_IN = app_appW4_wci_ctlAckReg_1$whas ;
  assign app_appW4_wci_ctlAckReg$EN = 1'd1 ;

  // register app_appW4_wci_ctlOpActive
  assign app_appW4_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_app_appW4_wci_ctl_op_complete ;
  assign app_appW4_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_complete ||
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_start ;

  // register app_appW4_wci_illegalEdge
  assign app_appW4_wci_illegalEdge$D_IN =
	     !MUX_app_appW4_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_app_appW4_wci_illegalEdge$write_1__VAL_2 ;
  assign app_appW4_wci_illegalEdge$EN =
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_complete &&
	     app_appW4_wci_illegalEdge ||
	     MUX_app_appW4_wci_illegalEdge$write_1__SEL_2 ;

  // register app_appW4_wci_nState
  always@(app_appW4_wci_reqF$D_OUT)
  begin
    case (app_appW4_wci_reqF$D_OUT[36:34])
      3'd0: app_appW4_wci_nState$D_IN = 3'd1;
      3'd1: app_appW4_wci_nState$D_IN = 3'd2;
      3'd2: app_appW4_wci_nState$D_IN = 3'd3;
      default: app_appW4_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign app_appW4_wci_nState$EN =
	     WILL_FIRE_RL_app_appW4_wci_ctl_op_start &&
	     (app_appW4_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      app_appW4_wci_cState == 3'd0 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (app_appW4_wci_cState == 3'd1 ||
	       app_appW4_wci_cState == 3'd3) ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      app_appW4_wci_cState == 3'd2 ||
	      app_appW4_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (app_appW4_wci_cState == 3'd3 || app_appW4_wci_cState == 3'd2 ||
	       app_appW4_wci_cState == 3'd1)) ;

  // register app_appW4_wci_reqF_countReg
  assign app_appW4_wci_reqF_countReg$D_IN =
	     (app_appW4_wci_wciReq$wget[59:57] != 3'd0) ?
	       app_appW4_wci_reqF_countReg + 2'd1 :
	       app_appW4_wci_reqF_countReg - 2'd1 ;
  assign app_appW4_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_app_appW4_wci_reqF__updateLevelCounter ;

  // register app_appW4_wci_respF_c_r
  assign app_appW4_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW4_wci_respF_incCtr ?
	       MUX_app_appW4_wci_respF_c_r$write_1__VAL_1 :
	       MUX_app_appW4_wci_respF_c_r$write_1__VAL_2 ;
  assign app_appW4_wci_respF_c_r$EN =
	     WILL_FIRE_RL_app_appW4_wci_respF_incCtr ||
	     WILL_FIRE_RL_app_appW4_wci_respF_decCtr ;

  // register app_appW4_wci_respF_q_0
  always@(MUX_app_appW4_wci_respF_q_0$write_1__SEL_1 or
	  MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wci_respF_both or
	  MUX_app_appW4_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wci_respF_decCtr or app_appW4_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wci_respF_q_0$write_1__SEL_1:
	  app_appW4_wci_respF_q_0$D_IN =
	      MUX_app_appW4_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wci_respF_both:
	  app_appW4_wci_respF_q_0$D_IN =
	      MUX_app_appW4_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wci_respF_decCtr:
	  app_appW4_wci_respF_q_0$D_IN = app_appW4_wci_respF_q_1;
      default: app_appW4_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wci_respF_q_0$EN =
	     WILL_FIRE_RL_app_appW4_wci_respF_incCtr &&
	     app_appW4_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW4_wci_respF_both ||
	     WILL_FIRE_RL_app_appW4_wci_respF_decCtr ;

  // register app_appW4_wci_respF_q_1
  always@(MUX_app_appW4_wci_respF_q_1$write_1__SEL_1 or
	  MUX_app_appW4_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wci_respF_both or
	  MUX_app_appW4_wci_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wci_respF_q_1$write_1__SEL_1:
	  app_appW4_wci_respF_q_1$D_IN =
	      MUX_app_appW4_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wci_respF_both:
	  app_appW4_wci_respF_q_1$D_IN =
	      MUX_app_appW4_wci_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wci_respF_decCtr:
	  app_appW4_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: app_appW4_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wci_respF_q_1$EN =
	     WILL_FIRE_RL_app_appW4_wci_respF_incCtr &&
	     app_appW4_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW4_wci_respF_both ||
	     WILL_FIRE_RL_app_appW4_wci_respF_decCtr ;

  // register app_appW4_wci_sFlagReg
  assign app_appW4_wci_sFlagReg$D_IN = 1'b0 ;
  assign app_appW4_wci_sFlagReg$EN = 1'd1 ;

  // register app_appW4_wci_sThreadBusy_d
  assign app_appW4_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign app_appW4_wci_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW4_wmi_busyWithMessage
  assign app_appW4_wmi_busyWithMessage$D_IN = 1'b0 ;
  assign app_appW4_wmi_busyWithMessage$EN = 1'b0 ;

  // register app_appW4_wmi_dhF_c_r
  assign app_appW4_wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr ?
	       MUX_app_appW4_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_app_appW4_wmi_dhF_c_r$write_1__VAL_2 ;
  assign app_appW4_wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr ||
	     WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr ;

  // register app_appW4_wmi_dhF_q_0
  always@(MUX_app_appW4_wmi_dhF_q_0$write_1__SEL_1 or
	  MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wmi_dhF_both or
	  MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr or app_appW4_wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wmi_dhF_q_0$write_1__SEL_1:
	  app_appW4_wmi_dhF_q_0$D_IN =
	      MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wmi_dhF_both:
	  app_appW4_wmi_dhF_q_0$D_IN =
	      MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr:
	  app_appW4_wmi_dhF_q_0$D_IN = app_appW4_wmi_dhF_q_1;
      default: app_appW4_wmi_dhF_q_0$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr &&
	     app_appW4_wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW4_wmi_dhF_both ||
	     WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr ;

  // register app_appW4_wmi_dhF_q_1
  always@(MUX_app_appW4_wmi_dhF_q_1$write_1__SEL_1 or
	  MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wmi_dhF_both or
	  MUX_app_appW4_wmi_dhF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wmi_dhF_q_1$write_1__SEL_1:
	  app_appW4_wmi_dhF_q_1$D_IN =
	      MUX_app_appW4_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wmi_dhF_both:
	  app_appW4_wmi_dhF_q_1$D_IN =
	      MUX_app_appW4_wmi_dhF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr:
	  app_appW4_wmi_dhF_q_1$D_IN = 38'h0AAAAAAAAA;
      default: app_appW4_wmi_dhF_q_1$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_app_appW4_wmi_dhF_incCtr &&
	     app_appW4_wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW4_wmi_dhF_both ||
	     WILL_FIRE_RL_app_appW4_wmi_dhF_decCtr ;

  // register app_appW4_wmi_errorSticky
  assign app_appW4_wmi_errorSticky$D_IN = 1'd1 ;
  assign app_appW4_wmi_errorSticky$EN =
	     WILL_FIRE_RL_app_appW4_wmi_respAdvance &&
	     !app_appW4_wmi_respF$FULL_N ;

  // register app_appW4_wmi_mFlagF_c_r
  assign app_appW4_wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr ?
	       MUX_app_appW4_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_app_appW4_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign app_appW4_wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr ;

  // register app_appW4_wmi_mFlagF_q_0
  always@(MUX_app_appW4_wmi_mFlagF_q_0$write_1__SEL_1 or
	  value__h216769 or
	  WILL_FIRE_RL_app_appW4_wmi_mFlagF_both or
	  MUX_app_appW4_wmi_mFlagF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr or
	  app_appW4_wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wmi_mFlagF_q_0$write_1__SEL_1:
	  app_appW4_wmi_mFlagF_q_0$D_IN = value__h216769;
      WILL_FIRE_RL_app_appW4_wmi_mFlagF_both:
	  app_appW4_wmi_mFlagF_q_0$D_IN =
	      MUX_app_appW4_wmi_mFlagF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr:
	  app_appW4_wmi_mFlagF_q_0$D_IN = app_appW4_wmi_mFlagF_q_1;
      default: app_appW4_wmi_mFlagF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr &&
	     app_appW4_wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_both ||
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr ;

  // register app_appW4_wmi_mFlagF_q_1
  always@(MUX_app_appW4_wmi_mFlagF_q_1$write_1__SEL_1 or
	  value__h216769 or
	  WILL_FIRE_RL_app_appW4_wmi_mFlagF_both or
	  MUX_app_appW4_wmi_mFlagF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wmi_mFlagF_q_1$write_1__SEL_1:
	  app_appW4_wmi_mFlagF_q_1$D_IN = value__h216769;
      WILL_FIRE_RL_app_appW4_wmi_mFlagF_both:
	  app_appW4_wmi_mFlagF_q_1$D_IN =
	      MUX_app_appW4_wmi_mFlagF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr:
	  app_appW4_wmi_mFlagF_q_1$D_IN = 32'd0;
      default: app_appW4_wmi_mFlagF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_incCtr &&
	     app_appW4_wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_both ||
	     WILL_FIRE_RL_app_appW4_wmi_mFlagF_decCtr ;

  // register app_appW4_wmi_operateD
  assign app_appW4_wmi_operateD$D_IN =
	     CAN_FIRE_RL_app_appW4_operating_actions ;
  assign app_appW4_wmi_operateD$EN = 1'd1 ;

  // register app_appW4_wmi_peerIsReady
  assign app_appW4_wmi_peerIsReady$D_IN = CAN_FIRE_RL_sRstConnect_1 ;
  assign app_appW4_wmi_peerIsReady$EN = 1'd1 ;

  // register app_appW4_wmi_reqF_c_r
  assign app_appW4_wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr ?
	       MUX_app_appW4_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_app_appW4_wmi_reqF_c_r$write_1__VAL_2 ;
  assign app_appW4_wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr ||
	     WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr ;

  // register app_appW4_wmi_reqF_q_0
  always@(MUX_app_appW4_wmi_reqF_q_0$write_1__SEL_1 or
	  MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wmi_reqF_both or
	  MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr or app_appW4_wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wmi_reqF_q_0$write_1__SEL_1:
	  app_appW4_wmi_reqF_q_0$D_IN =
	      MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wmi_reqF_both:
	  app_appW4_wmi_reqF_q_0$D_IN =
	      MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr:
	  app_appW4_wmi_reqF_q_0$D_IN = app_appW4_wmi_reqF_q_1;
      default: app_appW4_wmi_reqF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr &&
	     app_appW4_wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW4_wmi_reqF_both ||
	     WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr ;

  // register app_appW4_wmi_reqF_q_1
  always@(MUX_app_appW4_wmi_reqF_q_1$write_1__SEL_1 or
	  MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wmi_reqF_both or
	  MUX_app_appW4_wmi_reqF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wmi_reqF_q_1$write_1__SEL_1:
	  app_appW4_wmi_reqF_q_1$D_IN =
	      MUX_app_appW4_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wmi_reqF_both:
	  app_appW4_wmi_reqF_q_1$D_IN =
	      MUX_app_appW4_wmi_reqF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr:
	  app_appW4_wmi_reqF_q_1$D_IN = 32'd178956970;
      default: app_appW4_wmi_reqF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_app_appW4_wmi_reqF_incCtr &&
	     app_appW4_wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW4_wmi_reqF_both ||
	     WILL_FIRE_RL_app_appW4_wmi_reqF_decCtr ;

  // register app_appW4_wmi_sDataThreadBusy_d
  assign app_appW4_wmi_sDataThreadBusy_d$D_IN = CAN_FIRE_RL_sdtbConnect_1 ;
  assign app_appW4_wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register app_appW4_wmi_sFlagReg
  assign app_appW4_wmi_sFlagReg$D_IN = inf_dp1_wmi_wmi_sFlagReg ;
  assign app_appW4_wmi_sFlagReg$EN = 1'd1 ;

  // register app_appW4_wmi_sThreadBusy_d
  assign app_appW4_wmi_sThreadBusy_d$D_IN = CAN_FIRE_RL_stbConnect_9 ;
  assign app_appW4_wmi_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW4_wmi_statusR
  assign app_appW4_wmi_statusR$D_IN = 8'h0 ;
  assign app_appW4_wmi_statusR$EN = 1'b0 ;

  // register app_appW4_wmi_trafficSticky
  assign app_appW4_wmi_trafficSticky$D_IN = 1'b0 ;
  assign app_appW4_wmi_trafficSticky$EN = 1'b0 ;

  // register app_appW4_wsiM_burstKind
  assign app_appW4_wsiM_burstKind$D_IN =
	     (app_appW4_wsiM_burstKind == 2'd0) ?
	       (app_appW4_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign app_appW4_wsiM_burstKind$EN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_deq &&
	     app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (app_appW4_wsiM_burstKind == 2'd0 ||
	      (app_appW4_wsiM_burstKind == 2'd1 ||
	       app_appW4_wsiM_burstKind == 2'd2) &&
	      app_appW4_wsiM_reqFifo_q_0[57]) ;

  // register app_appW4_wsiM_errorSticky
  assign app_appW4_wsiM_errorSticky$D_IN = 1'b0 ;
  assign app_appW4_wsiM_errorSticky$EN = 1'b0 ;

  // register app_appW4_wsiM_iMesgCount
  assign app_appW4_wsiM_iMesgCount$D_IN = app_appW4_wsiM_iMesgCount + 32'd1 ;
  assign app_appW4_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_deq &&
	     app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     app_appW4_wsiM_burstKind == 2'd2 &&
	     app_appW4_wsiM_reqFifo_q_0[57] ;

  // register app_appW4_wsiM_operateD
  assign app_appW4_wsiM_operateD$D_IN =
	     CAN_FIRE_RL_app_appW4_operating_actions ;
  assign app_appW4_wsiM_operateD$EN = 1'd1 ;

  // register app_appW4_wsiM_pMesgCount
  assign app_appW4_wsiM_pMesgCount$D_IN = app_appW4_wsiM_pMesgCount + 32'd1 ;
  assign app_appW4_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_deq &&
	     app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     app_appW4_wsiM_burstKind == 2'd1 &&
	     app_appW4_wsiM_reqFifo_q_0[57] ;

  // register app_appW4_wsiM_peerIsReady
  assign app_appW4_wsiM_peerIsReady$D_IN = 1'b0 ;
  assign app_appW4_wsiM_peerIsReady$EN = 1'd1 ;

  // register app_appW4_wsiM_reqFifo_c_r
  assign app_appW4_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr ?
	       MUX_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_app_appW4_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign app_appW4_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr ;

  // register app_appW4_wsiM_reqFifo_q_0
  always@(MUX_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both or
	  MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr or
	  app_appW4_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wsiM_reqFifo_q_0$write_1__SEL_1:
	  app_appW4_wsiM_reqFifo_q_0$D_IN =
	      MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both:
	  app_appW4_wsiM_reqFifo_q_0$D_IN =
	      MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr:
	  app_appW4_wsiM_reqFifo_q_0$D_IN = app_appW4_wsiM_reqFifo_q_1;
      default: app_appW4_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr &&
	     app_appW4_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr ;

  // register app_appW4_wsiM_reqFifo_q_1
  always@(MUX_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both or
	  MUX_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wsiM_reqFifo_q_1$write_1__SEL_1:
	  app_appW4_wsiM_reqFifo_q_1$D_IN =
	      MUX_app_appW4_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both:
	  app_appW4_wsiM_reqFifo_q_1$D_IN =
	      MUX_app_appW4_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr:
	  app_appW4_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: app_appW4_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign app_appW4_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_incCtr &&
	     app_appW4_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_decCtr ;

  // register app_appW4_wsiM_sThreadBusy_d
  assign app_appW4_wsiM_sThreadBusy_d$D_IN = 1'b0 ;
  assign app_appW4_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register app_appW4_wsiM_statusR
  assign app_appW4_wsiM_statusR$D_IN =
	     { app_appW4_wsiM_isReset$VAL,
	       !app_appW4_wsiM_peerIsReady,
	       !app_appW4_wsiM_operateD,
	       app_appW4_wsiM_errorSticky,
	       app_appW4_wsiM_burstKind != 2'd0,
	       app_appW4_wsiM_sThreadBusy_d,
	       1'd0,
	       app_appW4_wsiM_trafficSticky } ;
  assign app_appW4_wsiM_statusR$EN = 1'd1 ;

  // register app_appW4_wsiM_tBusyCount
  assign app_appW4_wsiM_tBusyCount$D_IN = app_appW4_wsiM_tBusyCount + 32'd1 ;
  assign app_appW4_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_app_appW4_wsiM_inc_tBusyCount ;

  // register app_appW4_wsiM_trafficSticky
  assign app_appW4_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign app_appW4_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_app_appW4_wsiM_reqFifo_deq &&
	     app_appW4_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register app_appW4_wsiS_burstKind
  assign app_appW4_wsiS_burstKind$D_IN =
	     (app_appW4_wsiS_burstKind == 2'd0) ?
	       (app_appW4_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign app_appW4_wsiS_burstKind$EN =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq &&
	     app_appW4_wsiS_reqFifo_notFull__465_AND_app_ap_ETC___d6487 ;

  // register app_appW4_wsiS_errorSticky
  assign app_appW4_wsiS_errorSticky$D_IN = 1'd1 ;
  assign app_appW4_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq &&
	     !app_appW4_wsiS_reqFifo$FULL_N ;

  // register app_appW4_wsiS_iMesgCount
  assign app_appW4_wsiS_iMesgCount$D_IN = app_appW4_wsiS_iMesgCount + 32'd1 ;
  assign app_appW4_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq &&
	     app_appW4_wsiS_reqFifo$FULL_N &&
	     app_appW4_wsiS_burstKind == 2'd2 &&
	     app_appW4_wsiS_wsiReq$wget[57] ;

  // register app_appW4_wsiS_mesgWordLength
  assign app_appW4_wsiS_mesgWordLength$D_IN = app_appW4_wsiS_wordCount ;
  assign app_appW4_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq &&
	     app_appW4_wsiS_reqFifo$FULL_N &&
	     app_appW4_wsiS_wsiReq$wget[57] ;

  // register app_appW4_wsiS_operateD
  assign app_appW4_wsiS_operateD$D_IN =
	     CAN_FIRE_RL_app_appW4_operating_actions ;
  assign app_appW4_wsiS_operateD$EN = 1'd1 ;

  // register app_appW4_wsiS_pMesgCount
  assign app_appW4_wsiS_pMesgCount$D_IN = app_appW4_wsiS_pMesgCount + 32'd1 ;
  assign app_appW4_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq &&
	     app_appW4_wsiS_reqFifo$FULL_N &&
	     app_appW4_wsiS_burstKind == 2'd1 &&
	     app_appW4_wsiS_wsiReq$wget[57] ;

  // register app_appW4_wsiS_peerIsReady
  assign app_appW4_wsiS_peerIsReady$D_IN = CAN_FIRE_RL_app_mRstConnect_1 ;
  assign app_appW4_wsiS_peerIsReady$EN = 1'd1 ;

  // register app_appW4_wsiS_reqFifo_countReg
  assign app_appW4_wsiS_reqFifo_countReg$D_IN =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ?
	       app_appW4_wsiS_reqFifo_countReg + 2'd1 :
	       app_appW4_wsiS_reqFifo_countReg - 2'd1 ;
  assign app_appW4_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_app_appW4_wsiS_reqFifo__updateLevelCounter ;

  // register app_appW4_wsiS_reqFifo_levelsValid
  assign app_appW4_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_reset ;
  assign app_appW4_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_enq &&
	     app_appW4_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_app_appW4_wsipass_doMessagePush ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushImprecise ||
	     WILL_FIRE_RL_app_appW4_wsiS_reqFifo_reset ;

  // register app_appW4_wsiS_statusR
  assign app_appW4_wsiS_statusR$D_IN =
	     { app_appW4_wsiS_isReset$VAL,
	       !app_appW4_wsiS_peerIsReady,
	       !app_appW4_wsiS_operateD,
	       app_appW4_wsiS_errorSticky,
	       app_appW4_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_app_appW4_wsiS_backpressure ||
	       app_appW4_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       app_appW4_wsiS_trafficSticky } ;
  assign app_appW4_wsiS_statusR$EN = 1'd1 ;

  // register app_appW4_wsiS_tBusyCount
  assign app_appW4_wsiS_tBusyCount$D_IN = app_appW4_wsiS_tBusyCount + 32'd1 ;
  assign app_appW4_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_app_appW4_wsiS_inc_tBusyCount ;

  // register app_appW4_wsiS_trafficSticky
  assign app_appW4_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign app_appW4_wsiS_trafficSticky$EN =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register app_appW4_wsiS_wordCount
  assign app_appW4_wsiS_wordCount$D_IN =
	     app_appW4_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       app_appW4_wsiS_wordCount + 12'd1 ;
  assign app_appW4_wsiS_wordCount$EN =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;

  // register app_appW4_wsiWordsRemain
  assign app_appW4_wsiWordsRemain$D_IN =
	     MUX_app_appW4_mesgLength$write_1__SEL_4 ?
	       app_appW4_wsiS_reqFifo$D_OUT[55:44] :
	       MUX_app_appW4_wsiWordsRemain$write_1__VAL_2 ;
  assign app_appW4_wsiWordsRemain$EN =
	     WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	     app_appW4_wsiS_reqFifo$D_OUT[56] ||
	     WILL_FIRE_RL_app_appW4_wmwt_messagePushPrecise ;

  // register app_appW4_zeroLengthMesg
  assign app_appW4_zeroLengthMesg$D_IN =
	     app_appW4_wsiS_reqFifo$D_OUT[11:8] == 4'd0 ;
  assign app_appW4_zeroLengthMesg$EN =
	     MUX_app_appW4_mesgLength$write_1__SEL_4 ;

  // register inf_chompCnt
  assign inf_chompCnt$D_IN = inf_chompCnt + 8'd1 ;
  assign inf_chompCnt$EN =
	     inf_sm2$RDY_c1_request_get && inf_chompCnt != 8'd255 ;

  // register inf_dp0_bml_crdBuf_modulus
  assign inf_dp0_bml_crdBuf_modulus$D_IN = inf_dp0_bml_lclNumBufs - 16'd1 ;
  assign inf_dp0_bml_crdBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_crdBuf_value
  assign inf_dp0_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp0_bml_crdBuf_value$write_1__VAL_3 ;
  assign inf_dp0_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_inf_dp0_bml_crdAdvance ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_fabAvail
  assign inf_dp0_bml_fabAvail$D_IN = inf_dp0_bml_fabAvail_1$whas ;
  assign inf_dp0_bml_fabAvail$EN = 1'd1 ;

  // register inf_dp0_bml_fabBuf_modulus
  assign inf_dp0_bml_fabBuf_modulus$D_IN = inf_dp0_bml_fabNumBufs - 16'd1 ;
  assign inf_dp0_bml_fabBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_fabBuf_value
  assign inf_dp0_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp0_bml_fabBuf_value$write_1__VAL_3 ;
  assign inf_dp0_bml_fabBuf_value$EN =
	     MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_fabBufsAvail
  assign inf_dp0_bml_fabBufsAvail$D_IN =
	     MUX_inf_dp0_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_inf_dp0_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_inf_dp0_bml_fabBufsAvail$write_1__VAL_2 ;
  assign inf_dp0_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_inf_dp0_bml_fba &&
	     (inf_dp0_bml_fabAvail && !inf_dp0_bml_remStart ||
	      !inf_dp0_bml_fabAvail && inf_dp0_bml_remStart) ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_fabDone
  assign inf_dp0_bml_fabDone$D_IN = inf_dp0_bml_fabDone_1$whas ;
  assign inf_dp0_bml_fabDone$EN = 1'd1 ;

  // register inf_dp0_bml_fabFlowAddr
  always@(MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp0_bml_initAccumulators or
	  inf_dp0_bml_fabFlowBase or
	  WILL_FIRE_RL_inf_dp0_bml_crdAdvance or
	  MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1:
	  inf_dp0_bml_fabFlowAddr$D_IN =
	      MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_inf_dp0_bml_initAccumulators:
	  inf_dp0_bml_fabFlowAddr$D_IN = inf_dp0_bml_fabFlowBase;
      WILL_FIRE_RL_inf_dp0_bml_crdAdvance:
	  inf_dp0_bml_fabFlowAddr$D_IN =
	      MUX_inf_dp0_bml_fabFlowAddr$write_1__VAL_3;
      default: inf_dp0_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance &&
	     inf_dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp0_bml_crdAdvance ;

  // register inf_dp0_bml_fabFlowBase
  assign inf_dp0_bml_fabFlowBase$D_IN = inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign inf_dp0_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register inf_dp0_bml_fabFlowSize
  assign inf_dp0_bml_fabFlowSize$D_IN = inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign inf_dp0_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register inf_dp0_bml_fabMesgAddr
  assign inf_dp0_bml_fabMesgAddr$D_IN =
	     MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_inf_dp0_bml_fabMesgAddr$write_1__VAL_1 :
	       inf_dp0_bml_fabMesgBase ;
  assign inf_dp0_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance &&
	     inf_dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_fabMesgBase
  assign inf_dp0_bml_fabMesgBase$D_IN = inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign inf_dp0_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register inf_dp0_bml_fabMesgSize
  assign inf_dp0_bml_fabMesgSize$D_IN = inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign inf_dp0_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register inf_dp0_bml_fabMetaAddr
  assign inf_dp0_bml_fabMetaAddr$D_IN =
	     MUX_inf_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_inf_dp0_bml_fabMetaAddr$write_1__VAL_1 :
	       inf_dp0_bml_fabMetaBase ;
  assign inf_dp0_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance &&
	     inf_dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_fabMetaBase
  assign inf_dp0_bml_fabMetaBase$D_IN = inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign inf_dp0_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register inf_dp0_bml_fabMetaSize
  assign inf_dp0_bml_fabMetaSize$D_IN = inf_dp0_wci_reqF$D_OUT[31:0] ;
  assign inf_dp0_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register inf_dp0_bml_fabNumBufs
  assign inf_dp0_bml_fabNumBufs$D_IN = inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign inf_dp0_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register inf_dp0_bml_lclBufDone
  assign inf_dp0_bml_lclBufDone$D_IN = inf_dp0_wmi_mesgDone ;
  assign inf_dp0_bml_lclBufDone$EN = 1'd1 ;

  // register inf_dp0_bml_lclBufStart
  assign inf_dp0_bml_lclBufStart$D_IN = inf_dp0_wmi_mesgStart ;
  assign inf_dp0_bml_lclBufStart$EN = 1'd1 ;

  // register inf_dp0_bml_lclBuf_modulus
  assign inf_dp0_bml_lclBuf_modulus$D_IN = inf_dp0_bml_crdBuf_modulus$D_IN ;
  assign inf_dp0_bml_lclBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_lclBuf_value
  assign inf_dp0_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp0_bml_lclBuf_value$write_1__VAL_3 ;
  assign inf_dp0_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_inf_dp0_bml_lclAdvance ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_lclBufsAR
  assign inf_dp0_bml_lclBufsAR$D_IN =
	     MUX_inf_dp0_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_inf_dp0_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_inf_dp0_bml_lclBufsAR$write_1__VAL_2 ;
  assign inf_dp0_bml_lclBufsAR$EN =
	     MUX_inf_dp0_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_lclBufsCF
  assign inf_dp0_bml_lclBufsCF$D_IN =
	     MUX_inf_dp0_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_inf_dp0_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_inf_dp0_bml_lclBufsCF$write_1__VAL_2 ;
  assign inf_dp0_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_inf_dp0_bml_lbcf &&
	     (inf_dp0_bml_lclBufDone_944_AND_IF_inf_dp0_bml__ETC___d7164 ||
	      NOT_inf_dp0_bml_lclBufDone_944_011_AND_IF_inf__ETC___d2024) ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_lclCredit
  assign inf_dp0_bml_lclCredit$D_IN =
	     MUX_inf_dp0_bml_lclCredit$write_1__SEL_1 ?
	       MUX_inf_dp0_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign inf_dp0_bml_lclCredit$EN =
	     WILL_FIRE_RL_inf_dp0_bml_lcredit &&
	     (inf_dp0_bml_lclBufDone && !inf_dp0_bml_remStart ||
	      !inf_dp0_bml_lclBufDone && inf_dp0_bml_remStart) ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_lclDones
  assign inf_dp0_bml_lclDones$D_IN = inf_dp0_bml_lclDones + 16'd1 ;
  assign inf_dp0_bml_lclDones$EN = CAN_FIRE_RL_inf_dp0_bml_lclAdvance ;

  // register inf_dp0_bml_lclMesgAddr
  assign inf_dp0_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       inf_dp0_bml_mesgBase :
	       MUX_inf_dp0_bml_lclMesgAddr$write_1__VAL_2 ;
  assign inf_dp0_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp0_bml_lclAdvance ;

  // register inf_dp0_bml_lclMetaAddr
  assign inf_dp0_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       inf_dp0_bml_metaBase :
	       MUX_inf_dp0_bml_lclMetaAddr$write_1__VAL_2 ;
  assign inf_dp0_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp0_bml_lclAdvance ;

  // register inf_dp0_bml_lclNumBufs
  assign inf_dp0_bml_lclNumBufs$D_IN = inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign inf_dp0_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register inf_dp0_bml_lclStarts
  assign inf_dp0_bml_lclStarts$D_IN = inf_dp0_bml_lclStarts + 16'd1 ;
  assign inf_dp0_bml_lclStarts$EN = CAN_FIRE_RL_inf_dp0_bml_cntLclStart ;

  // register inf_dp0_bml_mesgBase
  assign inf_dp0_bml_mesgBase$D_IN = inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign inf_dp0_bml_mesgBase$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register inf_dp0_bml_mesgSize
  assign inf_dp0_bml_mesgSize$D_IN = inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign inf_dp0_bml_mesgSize$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register inf_dp0_bml_metaBase
  assign inf_dp0_bml_metaBase$D_IN = inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign inf_dp0_bml_metaBase$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register inf_dp0_bml_metaSize
  assign inf_dp0_bml_metaSize$D_IN = inf_dp0_wci_reqF$D_OUT[15:0] ;
  assign inf_dp0_bml_metaSize$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register inf_dp0_bml_remBuf_modulus
  assign inf_dp0_bml_remBuf_modulus$D_IN = inf_dp0_bml_crdBuf_modulus$D_IN ;
  assign inf_dp0_bml_remBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_remBuf_value
  assign inf_dp0_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp0_bml_remBuf_value$write_1__VAL_3 ;
  assign inf_dp0_bml_remBuf_value$EN =
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance ||
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ;

  // register inf_dp0_bml_remDone
  assign inf_dp0_bml_remDone$D_IN = inf_dp0_tlp_remDone ;
  assign inf_dp0_bml_remDone$EN = 1'd1 ;

  // register inf_dp0_bml_remDones
  assign inf_dp0_bml_remDones$D_IN = inf_dp0_bml_remDones + 16'd1 ;
  assign inf_dp0_bml_remDones$EN = CAN_FIRE_RL_inf_dp0_bml_cntRemDone ;

  // register inf_dp0_bml_remMesgAddr
  assign inf_dp0_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       inf_dp0_bml_mesgBase :
	       MUX_inf_dp0_bml_remMesgAddr$write_1__VAL_2 ;
  assign inf_dp0_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance ;

  // register inf_dp0_bml_remMetaAddr
  assign inf_dp0_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ?
	       inf_dp0_bml_metaBase :
	       MUX_inf_dp0_bml_remMetaAddr$write_1__VAL_2 ;
  assign inf_dp0_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_inf_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp0_bml_remAdvance ;

  // register inf_dp0_bml_remStart
  assign inf_dp0_bml_remStart$D_IN = inf_dp0_tlp_remStart ;
  assign inf_dp0_bml_remStart$EN = 1'd1 ;

  // register inf_dp0_bml_remStarts
  assign inf_dp0_bml_remStarts$D_IN = inf_dp0_bml_remStarts + 16'd1 ;
  assign inf_dp0_bml_remStarts$EN = CAN_FIRE_RL_inf_dp0_bml_cntRemStart ;

  // register inf_dp0_bram_serverAdapterA_1_cnt
  assign inf_dp0_bram_serverAdapterA_1_cnt$D_IN =
	     inf_dp0_bram_serverAdapterA_1_cnt_44_PLUS_IF_i_ETC___d150 ;
  assign inf_dp0_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterA_1_s1
  assign inf_dp0_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterA_1_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register inf_dp0_bram_serverAdapterA_2_cnt
  assign inf_dp0_bram_serverAdapterA_2_cnt$D_IN =
	     inf_dp0_bram_serverAdapterA_2_cnt_62_PLUS_IF_i_ETC___d268 ;
  assign inf_dp0_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterA_2_s1
  assign inf_dp0_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterA_2_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register inf_dp0_bram_serverAdapterA_3_cnt
  assign inf_dp0_bram_serverAdapterA_3_cnt$D_IN =
	     inf_dp0_bram_serverAdapterA_3_cnt_80_PLUS_IF_i_ETC___d386 ;
  assign inf_dp0_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterA_3_s1
  assign inf_dp0_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterA_3_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register inf_dp0_bram_serverAdapterA_cnt
  assign inf_dp0_bram_serverAdapterA_cnt$D_IN =
	     inf_dp0_bram_serverAdapterA_cnt_6_PLUS_IF_inf__ETC___d32 ;
  assign inf_dp0_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterA_s1
  assign inf_dp0_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterA_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterA_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register inf_dp0_bram_serverAdapterB_1_cnt
  assign inf_dp0_bram_serverAdapterB_1_cnt$D_IN =
	     inf_dp0_bram_serverAdapterB_1_cnt_03_PLUS_IF_i_ETC___d209 ;
  assign inf_dp0_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterB_1_s1
  assign inf_dp0_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterB_1_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register inf_dp0_bram_serverAdapterB_2_cnt
  assign inf_dp0_bram_serverAdapterB_2_cnt$D_IN =
	     inf_dp0_bram_serverAdapterB_2_cnt_21_PLUS_IF_i_ETC___d327 ;
  assign inf_dp0_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterB_2_s1
  assign inf_dp0_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterB_2_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register inf_dp0_bram_serverAdapterB_3_cnt
  assign inf_dp0_bram_serverAdapterB_3_cnt$D_IN =
	     inf_dp0_bram_serverAdapterB_3_cnt_39_PLUS_IF_i_ETC___d445 ;
  assign inf_dp0_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterB_3_s1
  assign inf_dp0_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterB_3_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register inf_dp0_bram_serverAdapterB_cnt
  assign inf_dp0_bram_serverAdapterB_cnt$D_IN =
	     inf_dp0_bram_serverAdapterB_cnt_5_PLUS_IF_inf__ETC___d91 ;
  assign inf_dp0_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // register inf_dp0_bram_serverAdapterB_s1
  assign inf_dp0_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	       inf_dp0_bram_serverAdapterB_s1_1$wget[1],
	       inf_dp0_bram_serverAdapterB_s1_1$wget[0] } ;
  assign inf_dp0_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register inf_dp0_dpControl
  assign inf_dp0_dpControl$D_IN = inf_dp0_wci_reqF$D_OUT[3:0] ;
  assign inf_dp0_dpControl$EN =
	     WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	     inf_dp0_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register inf_dp0_tlp_creditReady
  assign inf_dp0_tlp_creditReady$D_IN = CAN_FIRE_RL_inf_dp0_rCredit_1 ;
  assign inf_dp0_tlp_creditReady$EN = 1'd1 ;

  // register inf_dp0_tlp_debugBdata
  assign inf_dp0_tlp_debugBdata$D_IN =
	     { inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
	       inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
	       inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
	       inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign inf_dp0_tlp_debugBdata$EN = CAN_FIRE_RL_inf_dp0_tlp_read_NextResp ;

  // register inf_dp0_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta or
	  inf_dp0_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  inf_dp0_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta:
	inf_dp0_tlp_dmaDoTailEvent$D_IN =
	    inf_dp0_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent:
	inf_dp0_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody:
	inf_dp0_tlp_dmaDoTailEvent$D_IN =
	    MUX_inf_dp0_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	inf_dp0_tlp_dmaDoTailEvent$D_IN =
	    inf_dp0_tlp_dmaPullRemainDWLen == 10'd1;
    default: inf_dp0_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign inf_dp0_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent ;

  // register inf_dp0_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h39862 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg:
	  inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
	      thisRequestLength__h39862[11:2];
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	  inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody:
	  inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_inf_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: inf_dp0_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ;

  // register inf_dp0_tlp_dmaPullRemainDWSub
  assign inf_dp0_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ?
	       MUX_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign inf_dp0_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ;

  // register inf_dp0_tlp_dmaReqTag
  assign inf_dp0_tlp_dmaReqTag$D_IN = inf_dp0_tlp_dmaTag ;
  assign inf_dp0_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta ;

  // register inf_dp0_tlp_dmaTag
  assign inf_dp0_tlp_dmaTag$D_IN = inf_dp0_tlp_dmaTag + 5'd1 ;
  assign inf_dp0_tlp_dmaTag$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta ;

  // register inf_dp0_tlp_doXmtMetaBody
  assign inf_dp0_tlp_doXmtMetaBody$D_IN =
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody ;
  assign inf_dp0_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead ;

  // register inf_dp0_tlp_fabFlowAddr
  assign inf_dp0_tlp_fabFlowAddr$D_IN = inf_dp0_bml_fabFlowAddr ;
  assign inf_dp0_tlp_fabFlowAddr$EN = 1'd1 ;

  // register inf_dp0_tlp_fabMesgAccu
  always@(MUX_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  inf_dp0_tlp_fabMesgAddr or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader or
	  MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  inf_dp0_tlp_fabMesgAccu$D_IN = inf_dp0_tlp_fabMesgAddr;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader:
	  inf_dp0_tlp_fabMesgAccu$D_IN =
	      MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg:
	  inf_dp0_tlp_fabMesgAccu$D_IN =
	      MUX_inf_dp0_tlp_fabMesgAccu$write_1__VAL_3;
      default: inf_dp0_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register inf_dp0_tlp_fabMesgAddr
  assign inf_dp0_tlp_fabMesgAddr$D_IN = inf_dp0_bml_fabMesgAddr ;
  assign inf_dp0_tlp_fabMesgAddr$EN = 1'd1 ;

  // register inf_dp0_tlp_fabMeta
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody or
	  MUX_inf_dp0_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta or
	  MUX_inf_dp0_tlp_fabMeta$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent)
  case (1'b1)
    WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody:
	inf_dp0_tlp_fabMeta$D_IN = MUX_inf_dp0_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta:
	inf_dp0_tlp_fabMeta$D_IN = MUX_inf_dp0_tlp_fabMeta$write_1__VAL_2;
    WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent ||
    WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent:
	inf_dp0_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: inf_dp0_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign inf_dp0_tlp_fabMeta$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ;

  // register inf_dp0_tlp_fabMetaAddr
  assign inf_dp0_tlp_fabMetaAddr$D_IN = inf_dp0_bml_fabMetaAddr ;
  assign inf_dp0_tlp_fabMetaAddr$EN = 1'd1 ;

  // register inf_dp0_tlp_farBufReady
  assign inf_dp0_tlp_farBufReady$D_IN = CAN_FIRE_RL_inf_dp0_rFRdy_1 ;
  assign inf_dp0_tlp_farBufReady$EN = 1'd1 ;

  // register inf_dp0_tlp_flowDiagCount
  assign inf_dp0_tlp_flowDiagCount$D_IN = inf_dp0_tlp_flowDiagCount + 32'd1 ;
  assign inf_dp0_tlp_flowDiagCount$EN =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell ;

  // register inf_dp0_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  inf_dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody or
	  inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	  inf_dp0_tlp_gotResponseHeader$D_IN =
	      inf_dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody:
	  inf_dp0_tlp_gotResponseHeader$D_IN =
	      !inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg:
	  inf_dp0_tlp_gotResponseHeader$D_IN = 1'd0;
      default: inf_dp0_tlp_gotResponseHeader$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register inf_dp0_tlp_inIgnorePkt
  assign inf_dp0_tlp_inIgnorePkt$D_IN =
	     inf_dp0_tlp_inF$D_OUT[110] || inf_dp0_tlp_inF$D_OUT[125] ||
	     inf_dp0_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign inf_dp0_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_tlpRcv && inf_dp0_tlp_inF$D_OUT[152] ;

  // register inf_dp0_tlp_maxPayloadSize
  assign inf_dp0_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign inf_dp0_tlp_maxPayloadSize$EN = 1'b0 ;

  // register inf_dp0_tlp_maxReadReqSize
  assign inf_dp0_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign inf_dp0_tlp_maxReadReqSize$EN = 1'b0 ;

  // register inf_dp0_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	  inf_dp0_tlp_mesgComplReceived$D_IN =
	      MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody:
	  inf_dp0_tlp_mesgComplReceived$D_IN =
	      MUX_inf_dp0_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta:
	  inf_dp0_tlp_mesgComplReceived$D_IN = 17'd0;
      default: inf_dp0_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ;

  // register inf_dp0_tlp_mesgLengthRemainPull
  assign inf_dp0_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ?
	       MUX_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign inf_dp0_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register inf_dp0_tlp_mesgLengthRemainPush
  assign inf_dp0_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead ?
	       MUX_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign inf_dp0_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg ;

  // register inf_dp0_tlp_nearBufReady
  assign inf_dp0_tlp_nearBufReady$D_IN = CAN_FIRE_RL_inf_dp0_rRdy_1 ;
  assign inf_dp0_tlp_nearBufReady$EN = 1'd1 ;

  // register inf_dp0_tlp_outDwRemain
  assign inf_dp0_tlp_outDwRemain$D_IN =
	     MUX_inf_dp0_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_inf_dp0_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_outDwRemain$write_1__VAL_2 ;
  assign inf_dp0_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody ;

  // register inf_dp0_tlp_postSeqDwell
  assign inf_dp0_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPostSeqDwell ?
	       MUX_inf_dp0_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign inf_dp0_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ;

  // register inf_dp0_tlp_pullTagMatch
  assign inf_dp0_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeaderTag &&
	     inf_dp0_tlp_pullTagMatch_1$wget ;
  assign inf_dp0_tlp_pullTagMatch$EN = 1'd1 ;

  // register inf_dp0_tlp_rdRespDwRemain
  assign inf_dp0_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp ?
	       MUX_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign inf_dp0_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp ;

  // register inf_dp0_tlp_readHeaderSent
  assign inf_dp0_tlp_readHeaderSent$D_IN =
	     MUX_inf_dp0_tlp_readHeaderSent$write_1__SEL_1 ;
  assign inf_dp0_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp &&
	     inf_dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp &&
	     inf_dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 ;

  // register inf_dp0_tlp_readNxtDWAddr
  assign inf_dp0_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq ?
	       MUX_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign inf_dp0_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;

  // register inf_dp0_tlp_readRemainDWLen
  assign inf_dp0_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq ?
	       MUX_inf_dp0_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign inf_dp0_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;

  // register inf_dp0_tlp_readStarted
  assign inf_dp0_tlp_readStarted$D_IN =
	     MUX_inf_dp0_tlp_readStarted$write_1__SEL_1 ;
  assign inf_dp0_tlp_readStarted$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq &&
	     inf_dp0_tlp_readRemainDWLen_314_ULE_4___d1315 ;

  // register inf_dp0_tlp_remDone
  assign inf_dp0_tlp_remDone$D_IN = inf_dp0_tlp_remDone_1$whas ;
  assign inf_dp0_tlp_remDone$EN = 1'd1 ;

  // register inf_dp0_tlp_remMesgAccu
  always@(MUX_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  inf_dp0_tlp_remMesgAddr or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg or
	  MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  inf_dp0_tlp_remMesgAccu$D_IN = inf_dp0_tlp_remMesgAddr;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg:
	  inf_dp0_tlp_remMesgAccu$D_IN =
	      MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	  inf_dp0_tlp_remMesgAccu$D_IN =
	      MUX_inf_dp0_tlp_remMesgAccu$write_1__VAL_3;
      default: inf_dp0_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ;

  // register inf_dp0_tlp_remMesgAddr
  assign inf_dp0_tlp_remMesgAddr$D_IN = inf_dp0_bml_remMesgAddr ;
  assign inf_dp0_tlp_remMesgAddr$EN = 1'd1 ;

  // register inf_dp0_tlp_remMetaAddr
  assign inf_dp0_tlp_remMetaAddr$D_IN = inf_dp0_bml_remMetaAddr ;
  assign inf_dp0_tlp_remMetaAddr$EN = 1'd1 ;

  // register inf_dp0_tlp_remStart
  assign inf_dp0_tlp_remStart$D_IN = inf_dp0_tlp_remStart_1$whas ;
  assign inf_dp0_tlp_remStart$EN = 1'd1 ;

  // register inf_dp0_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  inf_dp0_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody or
	  MUX_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	  inf_dp0_tlp_reqMesgInFlight$D_IN =
	      inf_dp0_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody:
	  inf_dp0_tlp_reqMesgInFlight$D_IN =
	      MUX_inf_dp0_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg:
	  inf_dp0_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: inf_dp0_tlp_reqMesgInFlight$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ;

  // register inf_dp0_tlp_reqMetaBodyInFlight
  assign inf_dp0_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ;
  assign inf_dp0_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ;

  // register inf_dp0_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta)
  case (1'b1)
    WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta:
	inf_dp0_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
    WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta:
	inf_dp0_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta:
	inf_dp0_tlp_reqMetaInFlight$D_IN = 1'd1;
    default: inf_dp0_tlp_reqMetaInFlight$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign inf_dp0_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta ;

  // register inf_dp0_tlp_srcMesgAccu
  assign inf_dp0_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ?
	       inf_dp0_tlp_fabMesgAddr :
	       MUX_inf_dp0_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign inf_dp0_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg ;

  // register inf_dp0_tlp_tlpMetaSent
  assign inf_dp0_tlp_tlpMetaSent$D_IN =
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ;
  assign inf_dp0_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody ;

  // register inf_dp0_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_inf_dp0_tlp_tlpRcv or
	  inf_dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody or
	  inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_tlp_tlpRcv:
	  inf_dp0_tlp_tlpRcvBusy$D_IN = !inf_dp0_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	  inf_dp0_tlp_tlpRcvBusy$D_IN =
	      inf_dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody:
	  inf_dp0_tlp_tlpRcvBusy$D_IN =
	      !inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936;
      default: inf_dp0_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ;

  // register inf_dp0_tlp_tlpXmtBusy
  always@(MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1 or
	  inf_dp0_tlp_mRespF$D_OUT or
	  MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody or
	  MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_1:
	  inf_dp0_tlp_tlpXmtBusy$D_IN =
	      inf_dp0_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody:
	  inf_dp0_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_inf_dp0_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead:
	  inf_dp0_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: inf_dp0_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader && _dfoo5 ||
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header &&
	     !inf_dp0_tlp_mRespF_first__64_BITS_71_TO_62_54__ETC___d7113 ||
	     (WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody) &&
	     inf_dp0_tlp_outDwRemain_81_ULE_4___d7502 ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead ;

  // register inf_dp0_tlp_writeDWAddr
  assign inf_dp0_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq ?
	       MUX_inf_dp0_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_writeDWAddr$write_1__VAL_2 ;
  assign inf_dp0_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeData ;

  // register inf_dp0_tlp_writeLastBE
  assign inf_dp0_tlp_writeLastBE$D_IN = inf_dp0_tlp_mReqF$D_OUT[35:32] ;
  assign inf_dp0_tlp_writeLastBE$EN = CAN_FIRE_RL_inf_dp0_tlp_writeReq ;

  // register inf_dp0_tlp_writeRemainDWLen
  assign inf_dp0_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq ?
	       MUX_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_inf_dp0_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign inf_dp0_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeData ;

  // register inf_dp0_tlp_xmtMetaInFlight
  assign inf_dp0_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ;
  assign inf_dp0_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead ;

  // register inf_dp0_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody or
	  inf_dp0_tlp_mesgLengthRemainPush or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead or
	  MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3 or
	  MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4)
  case (1'b1)
    WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody:
	inf_dp0_tlp_xmtMetaOK$D_IN =
	    inf_dp0_tlp_mesgLengthRemainPush == 17'd0;
    WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead:
	inf_dp0_tlp_xmtMetaOK$D_IN = 1'd0;
    MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_3 ||
    MUX_inf_dp0_tlp_xmtMetaOK$write_1__SEL_4:
	inf_dp0_tlp_xmtMetaOK$D_IN = 1'd1;
    default: inf_dp0_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign inf_dp0_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader &&
	     inf_dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     inf_dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody &&
	     inf_dp0_tlp_outDwRemain_81_ULE_4___d7502 &&
	     inf_dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead ;

  // register inf_dp0_wci_cEdge
  assign inf_dp0_wci_cEdge$D_IN = inf_dp0_wci_reqF$D_OUT[36:34] ;
  assign inf_dp0_wci_cEdge$EN = WILL_FIRE_RL_inf_dp0_wci_ctl_op_start ;

  // register inf_dp0_wci_cState
  assign inf_dp0_wci_cState$D_IN = inf_dp0_wci_nState ;
  assign inf_dp0_wci_cState$EN =
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete &&
	     !inf_dp0_wci_illegalEdge ;

  // register inf_dp0_wci_ctlAckReg
  assign inf_dp0_wci_ctlAckReg$D_IN = inf_dp0_wci_ctlAckReg_1$whas ;
  assign inf_dp0_wci_ctlAckReg$EN = 1'd1 ;

  // register inf_dp0_wci_ctlOpActive
  assign inf_dp0_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete ;
  assign inf_dp0_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_start ;

  // register inf_dp0_wci_illegalEdge
  assign inf_dp0_wci_illegalEdge$D_IN =
	     !MUX_inf_dp0_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_inf_dp0_wci_illegalEdge$write_1__VAL_2 ;
  assign inf_dp0_wci_illegalEdge$EN =
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete &&
	     inf_dp0_wci_illegalEdge ||
	     MUX_inf_dp0_wci_illegalEdge$write_1__SEL_2 ;

  // register inf_dp0_wci_nState
  always@(inf_dp0_wci_reqF$D_OUT)
  begin
    case (inf_dp0_wci_reqF$D_OUT[36:34])
      3'd0: inf_dp0_wci_nState$D_IN = 3'd1;
      3'd1: inf_dp0_wci_nState$D_IN = 3'd2;
      3'd2: inf_dp0_wci_nState$D_IN = 3'd3;
      default: inf_dp0_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign inf_dp0_wci_nState$EN =
	     WILL_FIRE_RL_inf_dp0_wci_ctl_op_start &&
	     (inf_dp0_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      inf_dp0_wci_cState == 3'd0 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (inf_dp0_wci_cState == 3'd1 || inf_dp0_wci_cState == 3'd3) ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      inf_dp0_wci_cState == 3'd2 ||
	      inf_dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (inf_dp0_wci_cState == 3'd3 || inf_dp0_wci_cState == 3'd2 ||
	       inf_dp0_wci_cState == 3'd1)) ;

  // register inf_dp0_wci_reqF_countReg
  assign inf_dp0_wci_reqF_countReg$D_IN =
	     (inf_dp0_wci_wciReq$wget[59:57] != 3'd0) ?
	       inf_dp0_wci_reqF_countReg + 2'd1 :
	       inf_dp0_wci_reqF_countReg - 2'd1 ;
  assign inf_dp0_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_inf_dp0_wci_reqF__updateLevelCounter ;

  // register inf_dp0_wci_respF_c_r
  assign inf_dp0_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_inf_dp0_wci_respF_incCtr ?
	       MUX_inf_dp0_wci_respF_c_r$write_1__VAL_1 :
	       MUX_inf_dp0_wci_respF_c_r$write_1__VAL_2 ;
  assign inf_dp0_wci_respF_c_r$EN =
	     WILL_FIRE_RL_inf_dp0_wci_respF_incCtr ||
	     WILL_FIRE_RL_inf_dp0_wci_respF_decCtr ;

  // register inf_dp0_wci_respF_q_0
  always@(WILL_FIRE_RL_inf_dp0_wci_respF_both or
	  MUX_inf_dp0_wci_respF_q_0$write_1__VAL_1 or
	  MUX_inf_dp0_wci_respF_q_0$write_1__SEL_2 or
	  MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_wci_respF_decCtr or inf_dp0_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wci_respF_both:
	  inf_dp0_wci_respF_q_0$D_IN =
	      MUX_inf_dp0_wci_respF_q_0$write_1__VAL_1;
      MUX_inf_dp0_wci_respF_q_0$write_1__SEL_2:
	  inf_dp0_wci_respF_q_0$D_IN =
	      MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_wci_respF_decCtr:
	  inf_dp0_wci_respF_q_0$D_IN = inf_dp0_wci_respF_q_1;
      default: inf_dp0_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_wci_respF_q_0$EN =
	     WILL_FIRE_RL_inf_dp0_wci_respF_both ||
	     WILL_FIRE_RL_inf_dp0_wci_respF_incCtr &&
	     inf_dp0_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_wci_respF_decCtr ;

  // register inf_dp0_wci_respF_q_1
  always@(WILL_FIRE_RL_inf_dp0_wci_respF_both or
	  MUX_inf_dp0_wci_respF_q_1$write_1__VAL_1 or
	  MUX_inf_dp0_wci_respF_q_1$write_1__SEL_2 or
	  MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wci_respF_both:
	  inf_dp0_wci_respF_q_1$D_IN =
	      MUX_inf_dp0_wci_respF_q_1$write_1__VAL_1;
      MUX_inf_dp0_wci_respF_q_1$write_1__SEL_2:
	  inf_dp0_wci_respF_q_1$D_IN =
	      MUX_inf_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_wci_respF_decCtr:
	  inf_dp0_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: inf_dp0_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_wci_respF_q_1$EN =
	     WILL_FIRE_RL_inf_dp0_wci_respF_both ||
	     WILL_FIRE_RL_inf_dp0_wci_respF_incCtr &&
	     inf_dp0_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_wci_respF_decCtr ;

  // register inf_dp0_wci_sFlagReg
  assign inf_dp0_wci_sFlagReg$D_IN = 1'b0 ;
  assign inf_dp0_wci_sFlagReg$EN = 1'd1 ;

  // register inf_dp0_wci_sThreadBusy_d
  assign inf_dp0_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign inf_dp0_wci_sThreadBusy_d$EN = 1'd1 ;

  // register inf_dp0_wmi_addr
  assign inf_dp0_wmi_addr$D_IN =
	     MUX_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_inf_dp0_wmi_addr$write_1__VAL_1 :
	       inf_dp0_wmi_wmi_reqF$D_OUT[25:12] ;
  assign inf_dp0_wmi_addr$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // register inf_dp0_wmi_bufDwell
  assign inf_dp0_wmi_bufDwell$D_IN =
	     (MUX_inf_dp0_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_inf_dp0_wmi_bufDwell$write_1__VAL_3 ;
  assign inf_dp0_wmi_bufDwell$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp0_wmi_doDwell ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // register inf_dp0_wmi_bytesRemainReq
  assign inf_dp0_wmi_bytesRemainReq$D_IN =
	     MUX_inf_dp0_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_inf_dp0_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign inf_dp0_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // register inf_dp0_wmi_bytesRemainResp
  assign inf_dp0_wmi_bytesRemainResp$D_IN =
	     MUX_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_inf_dp0_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_inf_dp0_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign inf_dp0_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_doReadResp ;

  // register inf_dp0_wmi_doneWithMesg
  assign inf_dp0_wmi_doneWithMesg$D_IN =
	     !MUX_inf_dp0_wmi_doneWithMesg$write_1__SEL_1 &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[27] ;
  assign inf_dp0_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_inf_dp0_wmi_doReadReq ||
	      WILL_FIRE_RL_inf_dp0_wmi_doWriteReq) &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // register inf_dp0_wmi_lastMesg
  assign inf_dp0_wmi_lastMesg$D_IN = inf_dp0_wmi_thisMesg ;
  assign inf_dp0_wmi_lastMesg$EN = CAN_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // register inf_dp0_wmi_lclMesgAddr
  assign inf_dp0_wmi_lclMesgAddr$D_IN = inf_dp0_bml_lclMesgAddr[14:0] ;
  assign inf_dp0_wmi_lclMesgAddr$EN = 1'd1 ;

  // register inf_dp0_wmi_lclMetaAddr
  assign inf_dp0_wmi_lclMetaAddr$D_IN = inf_dp0_bml_lclMetaAddr[14:0] ;
  assign inf_dp0_wmi_lclMetaAddr$EN = 1'd1 ;

  // register inf_dp0_wmi_mesgBufReady
  assign inf_dp0_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_inf_dp0_rRdy ;
  assign inf_dp0_wmi_mesgBufReady$EN = 1'd1 ;

  // register inf_dp0_wmi_mesgBusy
  assign inf_dp0_wmi_mesgBusy$D_IN =
	     !MUX_inf_dp0_wmi_mesgBusy$write_1__SEL_1 ;
  assign inf_dp0_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doDwell &&
	     inf_dp0_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // register inf_dp0_wmi_mesgCount
  assign inf_dp0_wmi_mesgCount$D_IN =
	     MUX_inf_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_inf_dp0_wmi_mesgCount$write_1__VAL_1 :
	       MUX_inf_dp0_wmi_mesgCount$write_1__VAL_1 ;
  assign inf_dp0_wmi_mesgCount$EN = inf_dp0_wmi_mesgDone_1$whas ;

  // register inf_dp0_wmi_mesgDone
  assign inf_dp0_wmi_mesgDone$D_IN = inf_dp0_wmi_mesgDone_1$whas ;
  assign inf_dp0_wmi_mesgDone$EN = 1'd1 ;

  // register inf_dp0_wmi_mesgMeta
  assign inf_dp0_wmi_mesgMeta$D_IN =
	     MUX_inf_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_inf_dp0_wmi_mesgMeta$write_1__VAL_2 ;
  assign inf_dp0_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp0_wmi_respMetadata ;

  // register inf_dp0_wmi_mesgStart
  assign inf_dp0_wmi_mesgStart$D_IN = inf_dp0_wmi_mesgStart_1$whas ;
  assign inf_dp0_wmi_mesgStart$EN = 1'd1 ;

  // register inf_dp0_wmi_metaBusy
  assign inf_dp0_wmi_metaBusy$D_IN = !WILL_FIRE_RL_inf_dp0_wmi_respMetadata ;
  assign inf_dp0_wmi_metaBusy$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_respMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ;

  // register inf_dp0_wmi_p4B
  assign inf_dp0_wmi_p4B$D_IN =
	     MUX_inf_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       inf_dp0_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_inf_dp0_wmi_p4B$write_1__VAL_2 ;
  assign inf_dp0_wmi_p4B$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_doReadResp ;

  // register inf_dp0_wmi_rdActive
  assign inf_dp0_wmi_rdActive$D_IN =
	     !MUX_inf_dp0_wmi_rdActive$write_1__SEL_1 &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign inf_dp0_wmi_rdActive$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // register inf_dp0_wmi_reqCount
  assign inf_dp0_wmi_reqCount$D_IN = inf_dp0_wmi_reqCount + 16'd1 ;
  assign inf_dp0_wmi_reqCount$EN = WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // register inf_dp0_wmi_thisMesg
  assign inf_dp0_wmi_thisMesg$D_IN =
	     { inf_dp0_wmi_mesgCount[7:0],
	       inf_dp0_wmi_wmi_mFlagReg[31:24],
	       inf_dp0_wmi_wmi_mFlagReg[15:0] } ;
  assign inf_dp0_wmi_thisMesg$EN = CAN_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // register inf_dp0_wmi_wmi_blockReq
  assign inf_dp0_wmi_wmi_blockReq$D_IN =
	     !MUX_inf_dp0_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;
  assign inf_dp0_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[28] &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // register inf_dp0_wmi_wmi_dhF_countReg
  assign inf_dp0_wmi_wmi_dhF_countReg$D_IN =
	     MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       inf_dp0_wmi_wmi_dhF_countReg + 2'd1 :
	       inf_dp0_wmi_wmi_dhF_countReg - 2'd1 ;
  assign inf_dp0_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // register inf_dp0_wmi_wmi_dhF_levelsValid
  assign inf_dp0_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_reset ;
  assign inf_dp0_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq &&
	     inf_dp0_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_reset ;

  // register inf_dp0_wmi_wmi_errorSticky
  assign inf_dp0_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign inf_dp0_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq &&
	     !inf_dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq &&
	     !inf_dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_dhF_enq &&
	     !inf_dp0_wmi_wmi_dhF$FULL_N ;

  // register inf_dp0_wmi_wmi_mFlagF_countReg
  assign inf_dp0_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       inf_dp0_wmi_wmi_mFlagF_countReg + 2'd1 :
	       inf_dp0_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign inf_dp0_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // register inf_dp0_wmi_wmi_mFlagF_levelsValid
  assign inf_dp0_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_reset ;
  assign inf_dp0_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[27] &&
	     inf_dp0_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_enq &&
	     inf_dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_mFlagF_reset ;

  // register inf_dp0_wmi_wmi_mFlagReg
  assign inf_dp0_wmi_wmi_mFlagReg$D_IN = inf_dp0_wmi_wmi_mFlagF$D_OUT ;
  assign inf_dp0_wmi_wmi_mFlagReg$EN =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register inf_dp0_wmi_wmi_operateD
  assign inf_dp0_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_inf_dp0_bml_lbar ;
  assign inf_dp0_wmi_wmi_operateD$EN = 1'd1 ;

  // register inf_dp0_wmi_wmi_peerIsReady
  assign inf_dp0_wmi_wmi_peerIsReady$D_IN = CAN_FIRE_RL_mRstConnect ;
  assign inf_dp0_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register inf_dp0_wmi_wmi_reqF_countReg
  assign inf_dp0_wmi_wmi_reqF_countReg$D_IN =
	     MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       inf_dp0_wmi_wmi_reqF_countReg + 2'd1 :
	       inf_dp0_wmi_wmi_reqF_countReg - 2'd1 ;
  assign inf_dp0_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_inf_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // register inf_dp0_wmi_wmi_reqF_levelsValid
  assign inf_dp0_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_reset ;
  assign inf_dp0_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_enq &&
	     inf_dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_reqF_reset ;

  // register inf_dp0_wmi_wmi_respF_c_r
  assign inf_dp0_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr ?
	       MUX_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_inf_dp0_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign inf_dp0_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr ;

  // register inf_dp0_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both or
	  MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr or
	  inf_dp0_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both:
	  inf_dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__SEL_2:
	  inf_dp0_wmi_wmi_respF_q_0$D_IN =
	      MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr:
	  inf_dp0_wmi_wmi_respF_q_0$D_IN = inf_dp0_wmi_wmi_respF_q_1;
      default: inf_dp0_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr &&
	     inf_dp0_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr ;

  // register inf_dp0_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both or
	  MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both:
	  inf_dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_inf_dp0_wmi_wmi_respF_q_1$write_1__SEL_2:
	  inf_dp0_wmi_wmi_respF_q_1$D_IN =
	      MUX_inf_dp0_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr:
	  inf_dp0_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: inf_dp0_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_incCtr &&
	     inf_dp0_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_wmi_wmi_respF_decCtr ;

  // register inf_dp0_wmi_wmi_sFlagReg
  assign inf_dp0_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h72517[7:0], y_avValue__h72497[23:0] } ;
  assign inf_dp0_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_inf_dp0_wmi_respMetadata ;

  // register inf_dp0_wmi_wmi_statusR
  assign inf_dp0_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign inf_dp0_wmi_wmi_statusR$EN = 1'b0 ;

  // register inf_dp0_wmi_wmi_trafficSticky
  assign inf_dp0_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign inf_dp0_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register inf_dp0_wmi_wrActive
  assign inf_dp0_wmi_wrActive$D_IN =
	     !MUX_inf_dp0_wmi_wrActive$write_1__SEL_1 &&
	     inf_dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign inf_dp0_wmi_wrActive$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_inf_dp0_wmi_getRequest ;

  // register inf_dp0_wmi_wrFinalize
  assign inf_dp0_wmi_wrFinalize$D_IN =
	     MUX_inf_dp0_wmi_wrFinalize$write_1__SEL_1 ;
  assign inf_dp0_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // register inf_dp0_wmi_wrtCount
  assign inf_dp0_wmi_wrtCount$D_IN = inf_dp0_wmi_wrtCount + 16'd1 ;
  assign inf_dp0_wmi_wrtCount$EN = WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;

  // register inf_dp0_wti_nowReq
  assign inf_dp0_wti_nowReq$D_IN =
	     inf_itc0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       inf_itc0_wti_nowReq ;
  assign inf_dp0_wti_nowReq$EN = 1'd1 ;

  // register inf_dp1_bml_crdBuf_modulus
  assign inf_dp1_bml_crdBuf_modulus$D_IN = inf_dp1_bml_lclNumBufs - 16'd1 ;
  assign inf_dp1_bml_crdBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_crdBuf_value
  assign inf_dp1_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp1_bml_crdBuf_value$write_1__VAL_3 ;
  assign inf_dp1_bml_crdBuf_value$EN =
	     CAN_FIRE_RL_inf_dp1_bml_crdAdvance ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_fabAvail
  assign inf_dp1_bml_fabAvail$D_IN = inf_dp1_bml_fabAvail_1$whas ;
  assign inf_dp1_bml_fabAvail$EN = 1'd1 ;

  // register inf_dp1_bml_fabBuf_modulus
  assign inf_dp1_bml_fabBuf_modulus$D_IN = inf_dp1_bml_fabNumBufs - 16'd1 ;
  assign inf_dp1_bml_fabBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_fabBuf_value
  assign inf_dp1_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp1_bml_fabBuf_value$write_1__VAL_3 ;
  assign inf_dp1_bml_fabBuf_value$EN =
	     MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_fabBufsAvail
  assign inf_dp1_bml_fabBufsAvail$D_IN =
	     MUX_inf_dp1_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_inf_dp1_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_inf_dp1_bml_fabBufsAvail$write_1__VAL_2 ;
  assign inf_dp1_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_inf_dp1_bml_fba &&
	     (inf_dp1_bml_fabAvail && !inf_dp1_bml_remStart ||
	      !inf_dp1_bml_fabAvail && inf_dp1_bml_remStart) ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_fabDone
  assign inf_dp1_bml_fabDone$D_IN = inf_dp1_bml_fabDone_1$whas ;
  assign inf_dp1_bml_fabDone$EN = 1'd1 ;

  // register inf_dp1_bml_fabFlowAddr
  always@(MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp1_bml_initAccumulators or
	  inf_dp1_bml_fabFlowBase or
	  WILL_FIRE_RL_inf_dp1_bml_crdAdvance or
	  MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1:
	  inf_dp1_bml_fabFlowAddr$D_IN =
	      MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_inf_dp1_bml_initAccumulators:
	  inf_dp1_bml_fabFlowAddr$D_IN = inf_dp1_bml_fabFlowBase;
      WILL_FIRE_RL_inf_dp1_bml_crdAdvance:
	  inf_dp1_bml_fabFlowAddr$D_IN =
	      MUX_inf_dp1_bml_fabFlowAddr$write_1__VAL_3;
      default: inf_dp1_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance &&
	     inf_dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp1_bml_crdAdvance ;

  // register inf_dp1_bml_fabFlowBase
  assign inf_dp1_bml_fabFlowBase$D_IN = inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign inf_dp1_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register inf_dp1_bml_fabFlowSize
  assign inf_dp1_bml_fabFlowSize$D_IN = inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign inf_dp1_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register inf_dp1_bml_fabMesgAddr
  assign inf_dp1_bml_fabMesgAddr$D_IN =
	     MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_inf_dp1_bml_fabMesgAddr$write_1__VAL_1 :
	       inf_dp1_bml_fabMesgBase ;
  assign inf_dp1_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance &&
	     inf_dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_fabMesgBase
  assign inf_dp1_bml_fabMesgBase$D_IN = inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign inf_dp1_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register inf_dp1_bml_fabMesgSize
  assign inf_dp1_bml_fabMesgSize$D_IN = inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign inf_dp1_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register inf_dp1_bml_fabMetaAddr
  assign inf_dp1_bml_fabMetaAddr$D_IN =
	     MUX_inf_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_inf_dp1_bml_fabMetaAddr$write_1__VAL_1 :
	       inf_dp1_bml_fabMetaBase ;
  assign inf_dp1_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance &&
	     inf_dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_fabMetaBase
  assign inf_dp1_bml_fabMetaBase$D_IN = inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign inf_dp1_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register inf_dp1_bml_fabMetaSize
  assign inf_dp1_bml_fabMetaSize$D_IN = inf_dp1_wci_reqF$D_OUT[31:0] ;
  assign inf_dp1_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register inf_dp1_bml_fabNumBufs
  assign inf_dp1_bml_fabNumBufs$D_IN = inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign inf_dp1_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register inf_dp1_bml_lclBufDone
  assign inf_dp1_bml_lclBufDone$D_IN = inf_dp1_wmi_mesgDone ;
  assign inf_dp1_bml_lclBufDone$EN = 1'd1 ;

  // register inf_dp1_bml_lclBufStart
  assign inf_dp1_bml_lclBufStart$D_IN = inf_dp1_wmi_mesgStart ;
  assign inf_dp1_bml_lclBufStart$EN = 1'd1 ;

  // register inf_dp1_bml_lclBuf_modulus
  assign inf_dp1_bml_lclBuf_modulus$D_IN = inf_dp1_bml_crdBuf_modulus$D_IN ;
  assign inf_dp1_bml_lclBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_lclBuf_value
  assign inf_dp1_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp1_bml_lclBuf_value$write_1__VAL_3 ;
  assign inf_dp1_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_inf_dp1_bml_lclAdvance ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_lclBufsAR
  assign inf_dp1_bml_lclBufsAR$D_IN =
	     MUX_inf_dp1_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_inf_dp1_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_inf_dp1_bml_lclBufsAR$write_1__VAL_2 ;
  assign inf_dp1_bml_lclBufsAR$EN =
	     MUX_inf_dp1_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_lclBufsCF
  assign inf_dp1_bml_lclBufsCF$D_IN =
	     MUX_inf_dp1_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_inf_dp1_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_inf_dp1_bml_lclBufsCF$write_1__VAL_2 ;
  assign inf_dp1_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_inf_dp1_bml_lbcf &&
	     (inf_dp1_bml_lclBufDone_130_AND_IF_inf_dp1_bml__ETC___d7192 ||
	      NOT_inf_dp1_bml_lclBufDone_130_197_AND_IF_inf__ETC___d4210) ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_lclCredit
  assign inf_dp1_bml_lclCredit$D_IN =
	     MUX_inf_dp1_bml_lclCredit$write_1__SEL_1 ?
	       MUX_inf_dp1_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;
  assign inf_dp1_bml_lclCredit$EN =
	     WILL_FIRE_RL_inf_dp1_bml_lcredit &&
	     (inf_dp1_bml_lclBufDone && !inf_dp1_bml_remStart ||
	      !inf_dp1_bml_lclBufDone && inf_dp1_bml_remStart) ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_lclDones
  assign inf_dp1_bml_lclDones$D_IN = inf_dp1_bml_lclDones + 16'd1 ;
  assign inf_dp1_bml_lclDones$EN = CAN_FIRE_RL_inf_dp1_bml_lclAdvance ;

  // register inf_dp1_bml_lclMesgAddr
  assign inf_dp1_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       inf_dp1_bml_mesgBase :
	       MUX_inf_dp1_bml_lclMesgAddr$write_1__VAL_2 ;
  assign inf_dp1_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp1_bml_lclAdvance ;

  // register inf_dp1_bml_lclMetaAddr
  assign inf_dp1_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       inf_dp1_bml_metaBase :
	       MUX_inf_dp1_bml_lclMetaAddr$write_1__VAL_2 ;
  assign inf_dp1_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp1_bml_lclAdvance ;

  // register inf_dp1_bml_lclNumBufs
  assign inf_dp1_bml_lclNumBufs$D_IN = inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign inf_dp1_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register inf_dp1_bml_lclStarts
  assign inf_dp1_bml_lclStarts$D_IN = inf_dp1_bml_lclStarts + 16'd1 ;
  assign inf_dp1_bml_lclStarts$EN = CAN_FIRE_RL_inf_dp1_bml_cntLclStart ;

  // register inf_dp1_bml_mesgBase
  assign inf_dp1_bml_mesgBase$D_IN = inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign inf_dp1_bml_mesgBase$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register inf_dp1_bml_mesgSize
  assign inf_dp1_bml_mesgSize$D_IN = inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign inf_dp1_bml_mesgSize$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register inf_dp1_bml_metaBase
  assign inf_dp1_bml_metaBase$D_IN = inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign inf_dp1_bml_metaBase$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register inf_dp1_bml_metaSize
  assign inf_dp1_bml_metaSize$D_IN = inf_dp1_wci_reqF$D_OUT[15:0] ;
  assign inf_dp1_bml_metaSize$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register inf_dp1_bml_remBuf_modulus
  assign inf_dp1_bml_remBuf_modulus$D_IN = inf_dp1_bml_crdBuf_modulus$D_IN ;
  assign inf_dp1_bml_remBuf_modulus$EN =
	     CAN_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_remBuf_value
  assign inf_dp1_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_inf_dp1_bml_remBuf_value$write_1__VAL_3 ;
  assign inf_dp1_bml_remBuf_value$EN =
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance ||
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ;

  // register inf_dp1_bml_remDone
  assign inf_dp1_bml_remDone$D_IN = inf_dp1_tlp_remDone ;
  assign inf_dp1_bml_remDone$EN = 1'd1 ;

  // register inf_dp1_bml_remDones
  assign inf_dp1_bml_remDones$D_IN = inf_dp1_bml_remDones + 16'd1 ;
  assign inf_dp1_bml_remDones$EN = CAN_FIRE_RL_inf_dp1_bml_remAdvance ;

  // register inf_dp1_bml_remMesgAddr
  assign inf_dp1_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       inf_dp1_bml_mesgBase :
	       MUX_inf_dp1_bml_remMesgAddr$write_1__VAL_2 ;
  assign inf_dp1_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance ;

  // register inf_dp1_bml_remMetaAddr
  assign inf_dp1_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ?
	       inf_dp1_bml_metaBase :
	       MUX_inf_dp1_bml_remMetaAddr$write_1__VAL_2 ;
  assign inf_dp1_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_inf_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_inf_dp1_bml_remAdvance ;

  // register inf_dp1_bml_remStart
  assign inf_dp1_bml_remStart$D_IN = inf_dp1_tlp_remStart ;
  assign inf_dp1_bml_remStart$EN = 1'd1 ;

  // register inf_dp1_bml_remStarts
  assign inf_dp1_bml_remStarts$D_IN = inf_dp1_bml_remStarts + 16'd1 ;
  assign inf_dp1_bml_remStarts$EN = CAN_FIRE_RL_inf_dp1_bml_cntRemStart ;

  // register inf_dp1_bram_serverAdapterA_1_cnt
  assign inf_dp1_bram_serverAdapterA_1_cnt$D_IN =
	     inf_dp1_bram_serverAdapterA_1_cnt_336_PLUS_IF__ETC___d2342 ;
  assign inf_dp1_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterA_1_s1
  assign inf_dp1_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterA_1_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterA_1_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register inf_dp1_bram_serverAdapterA_2_cnt
  assign inf_dp1_bram_serverAdapterA_2_cnt$D_IN =
	     inf_dp1_bram_serverAdapterA_2_cnt_454_PLUS_IF__ETC___d2460 ;
  assign inf_dp1_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterA_2_s1
  assign inf_dp1_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterA_2_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterA_2_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register inf_dp1_bram_serverAdapterA_3_cnt
  assign inf_dp1_bram_serverAdapterA_3_cnt$D_IN =
	     inf_dp1_bram_serverAdapterA_3_cnt_572_PLUS_IF__ETC___d2578 ;
  assign inf_dp1_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterA_3_s1
  assign inf_dp1_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterA_3_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterA_3_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register inf_dp1_bram_serverAdapterA_cnt
  assign inf_dp1_bram_serverAdapterA_cnt$D_IN =
	     inf_dp1_bram_serverAdapterA_cnt_218_PLUS_IF_in_ETC___d2224 ;
  assign inf_dp1_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterA_s1
  assign inf_dp1_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterA_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterA_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterA_s1$EN = 1'd1 ;

  // register inf_dp1_bram_serverAdapterB_1_cnt
  assign inf_dp1_bram_serverAdapterB_1_cnt$D_IN =
	     inf_dp1_bram_serverAdapterB_1_cnt_395_PLUS_IF__ETC___d2401 ;
  assign inf_dp1_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterB_1_s1
  assign inf_dp1_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterB_1_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterB_1_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register inf_dp1_bram_serverAdapterB_2_cnt
  assign inf_dp1_bram_serverAdapterB_2_cnt$D_IN =
	     inf_dp1_bram_serverAdapterB_2_cnt_513_PLUS_IF__ETC___d2519 ;
  assign inf_dp1_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterB_2_s1
  assign inf_dp1_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterB_2_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterB_2_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register inf_dp1_bram_serverAdapterB_3_cnt
  assign inf_dp1_bram_serverAdapterB_3_cnt$D_IN =
	     inf_dp1_bram_serverAdapterB_3_cnt_631_PLUS_IF__ETC___d2637 ;
  assign inf_dp1_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterB_3_s1
  assign inf_dp1_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterB_3_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterB_3_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register inf_dp1_bram_serverAdapterB_cnt
  assign inf_dp1_bram_serverAdapterB_cnt$D_IN =
	     inf_dp1_bram_serverAdapterB_cnt_277_PLUS_IF_in_ETC___d2283 ;
  assign inf_dp1_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // register inf_dp1_bram_serverAdapterB_s1
  assign inf_dp1_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_inf_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	       inf_dp1_bram_serverAdapterB_s1_1$wget[1],
	       inf_dp1_bram_serverAdapterB_s1_1$wget[0] } ;
  assign inf_dp1_bram_serverAdapterB_s1$EN = 1'd1 ;

  // register inf_dp1_dpControl
  assign inf_dp1_dpControl$D_IN = inf_dp1_wci_reqF$D_OUT[3:0] ;
  assign inf_dp1_dpControl$EN =
	     WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	     inf_dp1_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register inf_dp1_tlp_creditReady
  assign inf_dp1_tlp_creditReady$D_IN = CAN_FIRE_RL_inf_dp1_rCredit_1 ;
  assign inf_dp1_tlp_creditReady$EN = 1'd1 ;

  // register inf_dp1_tlp_debugBdata
  assign inf_dp1_tlp_debugBdata$D_IN =
	     { inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
	       inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
	       inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
	       inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
	       inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
	       inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
	       inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
	       inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
	       inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
	       inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
	       inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
	       inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
	       inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
	       inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
	       inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
	       inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24] } ;
  assign inf_dp1_tlp_debugBdata$EN = CAN_FIRE_RL_inf_dp1_tlp_read_NextResp ;

  // register inf_dp1_tlp_dmaDoTailEvent
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta or
	  inf_dp1_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  inf_dp1_tlp_dmaPullRemainDWLen)
  case (1'b1)
    WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta:
	inf_dp1_tlp_dmaDoTailEvent$D_IN =
	    inf_dp1_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent:
	inf_dp1_tlp_dmaDoTailEvent$D_IN = 1'd0;
    WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody:
	inf_dp1_tlp_dmaDoTailEvent$D_IN =
	    MUX_inf_dp1_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	inf_dp1_tlp_dmaDoTailEvent$D_IN =
	    inf_dp1_tlp_dmaPullRemainDWLen == 10'd1;
    default: inf_dp1_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign inf_dp1_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent ;

  // register inf_dp1_tlp_dmaPullRemainDWLen
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h118925 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg:
	  inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
	      thisRequestLength__h118925[11:2];
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	  inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody:
	  inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_inf_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: inf_dp1_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ;

  // register inf_dp1_tlp_dmaPullRemainDWSub
  assign inf_dp1_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ?
	       MUX_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;
  assign inf_dp1_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ;

  // register inf_dp1_tlp_dmaReqTag
  assign inf_dp1_tlp_dmaReqTag$D_IN = inf_dp1_tlp_dmaTag ;
  assign inf_dp1_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta ;

  // register inf_dp1_tlp_dmaTag
  assign inf_dp1_tlp_dmaTag$D_IN = inf_dp1_tlp_dmaTag + 5'd1 ;
  assign inf_dp1_tlp_dmaTag$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta ;

  // register inf_dp1_tlp_doXmtMetaBody
  assign inf_dp1_tlp_doXmtMetaBody$D_IN =
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody ;
  assign inf_dp1_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead ;

  // register inf_dp1_tlp_fabFlowAddr
  assign inf_dp1_tlp_fabFlowAddr$D_IN = inf_dp1_bml_fabFlowAddr ;
  assign inf_dp1_tlp_fabFlowAddr$EN = 1'd1 ;

  // register inf_dp1_tlp_fabMesgAccu
  always@(MUX_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  inf_dp1_tlp_fabMesgAddr or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader or
	  MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  inf_dp1_tlp_fabMesgAccu$D_IN = inf_dp1_tlp_fabMesgAddr;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader:
	  inf_dp1_tlp_fabMesgAccu$D_IN =
	      MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg:
	  inf_dp1_tlp_fabMesgAccu$D_IN =
	      MUX_inf_dp1_tlp_fabMesgAccu$write_1__VAL_3;
      default: inf_dp1_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register inf_dp1_tlp_fabMesgAddr
  assign inf_dp1_tlp_fabMesgAddr$D_IN = inf_dp1_bml_fabMesgAddr ;
  assign inf_dp1_tlp_fabMesgAddr$EN = 1'd1 ;

  // register inf_dp1_tlp_fabMeta
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody or
	  MUX_inf_dp1_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta or
	  MUX_inf_dp1_tlp_fabMeta$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent)
  case (1'b1)
    WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody:
	inf_dp1_tlp_fabMeta$D_IN = MUX_inf_dp1_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta:
	inf_dp1_tlp_fabMeta$D_IN = MUX_inf_dp1_tlp_fabMeta$write_1__VAL_2;
    WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent ||
    WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent:
	inf_dp1_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: inf_dp1_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign inf_dp1_tlp_fabMeta$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ;

  // register inf_dp1_tlp_fabMetaAddr
  assign inf_dp1_tlp_fabMetaAddr$D_IN = inf_dp1_bml_fabMetaAddr ;
  assign inf_dp1_tlp_fabMetaAddr$EN = 1'd1 ;

  // register inf_dp1_tlp_farBufReady
  assign inf_dp1_tlp_farBufReady$D_IN = CAN_FIRE_RL_inf_dp1_rFRdy_1 ;
  assign inf_dp1_tlp_farBufReady$EN = 1'd1 ;

  // register inf_dp1_tlp_flowDiagCount
  assign inf_dp1_tlp_flowDiagCount$D_IN = inf_dp1_tlp_flowDiagCount + 32'd1 ;
  assign inf_dp1_tlp_flowDiagCount$EN =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell ;

  // register inf_dp1_tlp_gotResponseHeader
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  inf_dp1_tlp_inF$D_OUT or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody or
	  inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	  inf_dp1_tlp_gotResponseHeader$D_IN =
	      inf_dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody:
	  inf_dp1_tlp_gotResponseHeader$D_IN =
	      !inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg:
	  inf_dp1_tlp_gotResponseHeader$D_IN = 1'd0;
      default: inf_dp1_tlp_gotResponseHeader$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register inf_dp1_tlp_inIgnorePkt
  assign inf_dp1_tlp_inIgnorePkt$D_IN =
	     inf_dp1_tlp_inF$D_OUT[110] || inf_dp1_tlp_inF$D_OUT[125] ||
	     inf_dp1_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign inf_dp1_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_tlpRcv && inf_dp1_tlp_inF$D_OUT[152] ;

  // register inf_dp1_tlp_maxPayloadSize
  assign inf_dp1_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign inf_dp1_tlp_maxPayloadSize$EN = 1'b0 ;

  // register inf_dp1_tlp_maxReadReqSize
  assign inf_dp1_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign inf_dp1_tlp_maxReadReqSize$EN = 1'b0 ;

  // register inf_dp1_tlp_mesgComplReceived
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	  inf_dp1_tlp_mesgComplReceived$D_IN =
	      MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody:
	  inf_dp1_tlp_mesgComplReceived$D_IN =
	      MUX_inf_dp1_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta:
	  inf_dp1_tlp_mesgComplReceived$D_IN = 17'd0;
      default: inf_dp1_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ;

  // register inf_dp1_tlp_mesgLengthRemainPull
  assign inf_dp1_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ?
	       MUX_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign inf_dp1_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register inf_dp1_tlp_mesgLengthRemainPush
  assign inf_dp1_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead ?
	       MUX_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign inf_dp1_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg ;

  // register inf_dp1_tlp_nearBufReady
  assign inf_dp1_tlp_nearBufReady$D_IN = CAN_FIRE_RL_inf_dp1_rRdy_1 ;
  assign inf_dp1_tlp_nearBufReady$EN = 1'd1 ;

  // register inf_dp1_tlp_outDwRemain
  assign inf_dp1_tlp_outDwRemain$D_IN =
	     MUX_inf_dp1_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_inf_dp1_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_outDwRemain$write_1__VAL_2 ;
  assign inf_dp1_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody ;

  // register inf_dp1_tlp_postSeqDwell
  assign inf_dp1_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPostSeqDwell ?
	       MUX_inf_dp1_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign inf_dp1_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ;

  // register inf_dp1_tlp_pullTagMatch
  assign inf_dp1_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeaderTag &&
	     inf_dp1_tlp_pullTagMatch_1$wget ;
  assign inf_dp1_tlp_pullTagMatch$EN = 1'd1 ;

  // register inf_dp1_tlp_rdRespDwRemain
  assign inf_dp1_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp ?
	       MUX_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign inf_dp1_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp ;

  // register inf_dp1_tlp_readHeaderSent
  assign inf_dp1_tlp_readHeaderSent$D_IN =
	     MUX_inf_dp1_tlp_readHeaderSent$write_1__SEL_1 ;
  assign inf_dp1_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp &&
	     inf_dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp &&
	     inf_dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 ;

  // register inf_dp1_tlp_readNxtDWAddr
  assign inf_dp1_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq ?
	       MUX_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign inf_dp1_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;

  // register inf_dp1_tlp_readRemainDWLen
  assign inf_dp1_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq ?
	       MUX_inf_dp1_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign inf_dp1_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;

  // register inf_dp1_tlp_readStarted
  assign inf_dp1_tlp_readStarted$D_IN =
	     MUX_inf_dp1_tlp_readStarted$write_1__SEL_1 ;
  assign inf_dp1_tlp_readStarted$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq &&
	     inf_dp1_tlp_readRemainDWLen_500_ULE_4___d3501 ;

  // register inf_dp1_tlp_remDone
  assign inf_dp1_tlp_remDone$D_IN = inf_dp1_tlp_remDone_1$whas ;
  assign inf_dp1_tlp_remDone$EN = 1'd1 ;

  // register inf_dp1_tlp_remMesgAccu
  always@(MUX_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  inf_dp1_tlp_remMesgAddr or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg or
	  MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  inf_dp1_tlp_remMesgAccu$D_IN = inf_dp1_tlp_remMesgAddr;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg:
	  inf_dp1_tlp_remMesgAccu$D_IN =
	      MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	  inf_dp1_tlp_remMesgAccu$D_IN =
	      MUX_inf_dp1_tlp_remMesgAccu$write_1__VAL_3;
      default: inf_dp1_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ;

  // register inf_dp1_tlp_remMesgAddr
  assign inf_dp1_tlp_remMesgAddr$D_IN = inf_dp1_bml_remMesgAddr ;
  assign inf_dp1_tlp_remMesgAddr$EN = 1'd1 ;

  // register inf_dp1_tlp_remMetaAddr
  assign inf_dp1_tlp_remMetaAddr$D_IN = inf_dp1_bml_remMetaAddr ;
  assign inf_dp1_tlp_remMetaAddr$EN = 1'd1 ;

  // register inf_dp1_tlp_remStart
  assign inf_dp1_tlp_remStart$D_IN = inf_dp1_tlp_remStart_1$whas ;
  assign inf_dp1_tlp_remStart$EN = 1'd1 ;

  // register inf_dp1_tlp_reqMesgInFlight
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  inf_dp1_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody or
	  MUX_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	  inf_dp1_tlp_reqMesgInFlight$D_IN =
	      inf_dp1_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody:
	  inf_dp1_tlp_reqMesgInFlight$D_IN =
	      MUX_inf_dp1_tlp_reqMesgInFlight$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg:
	  inf_dp1_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: inf_dp1_tlp_reqMesgInFlight$D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ;

  // register inf_dp1_tlp_reqMetaBodyInFlight
  assign inf_dp1_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ;
  assign inf_dp1_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ;

  // register inf_dp1_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta)
  case (1'b1)
    WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta:
	inf_dp1_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
    WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta:
	inf_dp1_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta:
	inf_dp1_tlp_reqMetaInFlight$D_IN = 1'd1;
    default: inf_dp1_tlp_reqMetaInFlight$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign inf_dp1_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta ;

  // register inf_dp1_tlp_srcMesgAccu
  assign inf_dp1_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ?
	       inf_dp1_tlp_fabMesgAddr :
	       MUX_inf_dp1_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign inf_dp1_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg ;

  // register inf_dp1_tlp_tlpMetaSent
  assign inf_dp1_tlp_tlpMetaSent$D_IN =
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ;
  assign inf_dp1_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody ;

  // register inf_dp1_tlp_tlpRcvBusy
  always@(WILL_FIRE_RL_inf_dp1_tlp_tlpRcv or
	  inf_dp1_tlp_inF$D_OUT or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody or
	  inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_tlp_tlpRcv:
	  inf_dp1_tlp_tlpRcvBusy$D_IN = !inf_dp1_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	  inf_dp1_tlp_tlpRcvBusy$D_IN =
	      inf_dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody:
	  inf_dp1_tlp_tlpRcvBusy$D_IN =
	      !inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938;
      default: inf_dp1_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_tlpRcv ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ;

  // register inf_dp1_tlp_tlpXmtBusy
  always@(MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1 or
	  inf_dp1_tlp_mRespF$D_OUT or
	  MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody or
	  MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_1:
	  inf_dp1_tlp_tlpXmtBusy$D_IN =
	      inf_dp1_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody:
	  inf_dp1_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_inf_dp1_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead:
	  inf_dp1_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: inf_dp1_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader && _dfoo15 ||
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header &&
	     !inf_dp1_tlp_mRespF_first__854_BITS_71_TO_62_94_ETC___d7115 ||
	     (WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Body ||
	      WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody) &&
	     inf_dp1_tlp_outDwRemain_970_ULE_4___d7507 ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead ;

  // register inf_dp1_tlp_writeDWAddr
  assign inf_dp1_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq ?
	       MUX_inf_dp1_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_writeDWAddr$write_1__VAL_2 ;
  assign inf_dp1_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeData ;

  // register inf_dp1_tlp_writeLastBE
  assign inf_dp1_tlp_writeLastBE$D_IN = inf_dp1_tlp_mReqF$D_OUT[35:32] ;
  assign inf_dp1_tlp_writeLastBE$EN = CAN_FIRE_RL_inf_dp1_tlp_writeReq ;

  // register inf_dp1_tlp_writeRemainDWLen
  assign inf_dp1_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq ?
	       MUX_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_inf_dp1_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign inf_dp1_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeData ;

  // register inf_dp1_tlp_xmtMetaInFlight
  assign inf_dp1_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ;
  assign inf_dp1_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead ;

  // register inf_dp1_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody or
	  inf_dp1_tlp_mesgLengthRemainPush or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead or
	  MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3 or
	  MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4)
  case (1'b1)
    WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody:
	inf_dp1_tlp_xmtMetaOK$D_IN =
	    inf_dp1_tlp_mesgLengthRemainPush == 17'd0;
    WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead:
	inf_dp1_tlp_xmtMetaOK$D_IN = 1'd0;
    MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_3 ||
    MUX_inf_dp1_tlp_xmtMetaOK$write_1__SEL_4:
	inf_dp1_tlp_xmtMetaOK$D_IN = 1'd1;
    default: inf_dp1_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign inf_dp1_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader &&
	     inf_dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     inf_dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody &&
	     inf_dp1_tlp_outDwRemain_970_ULE_4___d7507 &&
	     inf_dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead ;

  // register inf_dp1_wci_cEdge
  assign inf_dp1_wci_cEdge$D_IN = inf_dp1_wci_reqF$D_OUT[36:34] ;
  assign inf_dp1_wci_cEdge$EN = WILL_FIRE_RL_inf_dp1_wci_ctl_op_start ;

  // register inf_dp1_wci_cState
  assign inf_dp1_wci_cState$D_IN = inf_dp1_wci_nState ;
  assign inf_dp1_wci_cState$EN =
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete &&
	     !inf_dp1_wci_illegalEdge ;

  // register inf_dp1_wci_ctlAckReg
  assign inf_dp1_wci_ctlAckReg$D_IN = inf_dp1_wci_ctlAckReg_1$whas ;
  assign inf_dp1_wci_ctlAckReg$EN = 1'd1 ;

  // register inf_dp1_wci_ctlOpActive
  assign inf_dp1_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete ;
  assign inf_dp1_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_start ;

  // register inf_dp1_wci_illegalEdge
  assign inf_dp1_wci_illegalEdge$D_IN =
	     !MUX_inf_dp1_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_inf_dp1_wci_illegalEdge$write_1__VAL_2 ;
  assign inf_dp1_wci_illegalEdge$EN =
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete &&
	     inf_dp1_wci_illegalEdge ||
	     MUX_inf_dp1_wci_illegalEdge$write_1__SEL_2 ;

  // register inf_dp1_wci_nState
  always@(inf_dp1_wci_reqF$D_OUT)
  begin
    case (inf_dp1_wci_reqF$D_OUT[36:34])
      3'd0: inf_dp1_wci_nState$D_IN = 3'd1;
      3'd1: inf_dp1_wci_nState$D_IN = 3'd2;
      3'd2: inf_dp1_wci_nState$D_IN = 3'd3;
      default: inf_dp1_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign inf_dp1_wci_nState$EN =
	     WILL_FIRE_RL_inf_dp1_wci_ctl_op_start &&
	     (inf_dp1_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      inf_dp1_wci_cState == 3'd0 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (inf_dp1_wci_cState == 3'd1 || inf_dp1_wci_cState == 3'd3) ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      inf_dp1_wci_cState == 3'd2 ||
	      inf_dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (inf_dp1_wci_cState == 3'd3 || inf_dp1_wci_cState == 3'd2 ||
	       inf_dp1_wci_cState == 3'd1)) ;

  // register inf_dp1_wci_reqF_countReg
  assign inf_dp1_wci_reqF_countReg$D_IN =
	     (inf_dp1_wci_wciReq$wget[59:57] != 3'd0) ?
	       inf_dp1_wci_reqF_countReg + 2'd1 :
	       inf_dp1_wci_reqF_countReg - 2'd1 ;
  assign inf_dp1_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_inf_dp1_wci_reqF__updateLevelCounter ;

  // register inf_dp1_wci_respF_c_r
  assign inf_dp1_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_inf_dp1_wci_respF_incCtr ?
	       MUX_inf_dp1_wci_respF_c_r$write_1__VAL_1 :
	       MUX_inf_dp1_wci_respF_c_r$write_1__VAL_2 ;
  assign inf_dp1_wci_respF_c_r$EN =
	     WILL_FIRE_RL_inf_dp1_wci_respF_incCtr ||
	     WILL_FIRE_RL_inf_dp1_wci_respF_decCtr ;

  // register inf_dp1_wci_respF_q_0
  always@(WILL_FIRE_RL_inf_dp1_wci_respF_both or
	  MUX_inf_dp1_wci_respF_q_0$write_1__VAL_1 or
	  MUX_inf_dp1_wci_respF_q_0$write_1__SEL_2 or
	  MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_wci_respF_decCtr or inf_dp1_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wci_respF_both:
	  inf_dp1_wci_respF_q_0$D_IN =
	      MUX_inf_dp1_wci_respF_q_0$write_1__VAL_1;
      MUX_inf_dp1_wci_respF_q_0$write_1__SEL_2:
	  inf_dp1_wci_respF_q_0$D_IN =
	      MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_wci_respF_decCtr:
	  inf_dp1_wci_respF_q_0$D_IN = inf_dp1_wci_respF_q_1;
      default: inf_dp1_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_wci_respF_q_0$EN =
	     WILL_FIRE_RL_inf_dp1_wci_respF_both ||
	     WILL_FIRE_RL_inf_dp1_wci_respF_incCtr &&
	     inf_dp1_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_wci_respF_decCtr ;

  // register inf_dp1_wci_respF_q_1
  always@(WILL_FIRE_RL_inf_dp1_wci_respF_both or
	  MUX_inf_dp1_wci_respF_q_1$write_1__VAL_1 or
	  MUX_inf_dp1_wci_respF_q_1$write_1__SEL_2 or
	  MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wci_respF_both:
	  inf_dp1_wci_respF_q_1$D_IN =
	      MUX_inf_dp1_wci_respF_q_1$write_1__VAL_1;
      MUX_inf_dp1_wci_respF_q_1$write_1__SEL_2:
	  inf_dp1_wci_respF_q_1$D_IN =
	      MUX_inf_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_wci_respF_decCtr:
	  inf_dp1_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: inf_dp1_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_wci_respF_q_1$EN =
	     WILL_FIRE_RL_inf_dp1_wci_respF_both ||
	     WILL_FIRE_RL_inf_dp1_wci_respF_incCtr &&
	     inf_dp1_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_wci_respF_decCtr ;

  // register inf_dp1_wci_sFlagReg
  assign inf_dp1_wci_sFlagReg$D_IN = 1'b0 ;
  assign inf_dp1_wci_sFlagReg$EN = 1'd1 ;

  // register inf_dp1_wci_sThreadBusy_d
  assign inf_dp1_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign inf_dp1_wci_sThreadBusy_d$EN = 1'd1 ;

  // register inf_dp1_wmi_addr
  assign inf_dp1_wmi_addr$D_IN =
	     MUX_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_inf_dp1_wmi_addr$write_1__VAL_1 :
	       inf_dp1_wmi_wmi_reqF$D_OUT[25:12] ;
  assign inf_dp1_wmi_addr$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // register inf_dp1_wmi_bufDwell
  assign inf_dp1_wmi_bufDwell$D_IN =
	     (MUX_inf_dp1_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_inf_dp1_wmi_bufDwell$write_1__VAL_3 ;
  assign inf_dp1_wmi_bufDwell$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp1_wmi_doDwell ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // register inf_dp1_wmi_bytesRemainReq
  assign inf_dp1_wmi_bytesRemainReq$D_IN =
	     MUX_inf_dp1_wmi_doneWithMesg$write_1__PSEL_1 ?
	       MUX_inf_dp1_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign inf_dp1_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // register inf_dp1_wmi_bytesRemainResp
  assign inf_dp1_wmi_bytesRemainResp$D_IN =
	     MUX_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_inf_dp1_wmi_bytesRemainReq$write_1__VAL_2 :
	       MUX_inf_dp1_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign inf_dp1_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_doReadResp ;

  // register inf_dp1_wmi_doneWithMesg
  assign inf_dp1_wmi_doneWithMesg$D_IN =
	     !MUX_inf_dp1_wmi_doneWithMesg$write_1__SEL_1 &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[27] ;
  assign inf_dp1_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_inf_dp1_wmi_doReadReq ||
	      WILL_FIRE_RL_inf_dp1_wmi_doWriteReq) &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // register inf_dp1_wmi_lastMesg
  assign inf_dp1_wmi_lastMesg$D_IN = inf_dp1_wmi_thisMesg ;
  assign inf_dp1_wmi_lastMesg$EN = CAN_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // register inf_dp1_wmi_lclMesgAddr
  assign inf_dp1_wmi_lclMesgAddr$D_IN = inf_dp1_bml_lclMesgAddr[14:0] ;
  assign inf_dp1_wmi_lclMesgAddr$EN = 1'd1 ;

  // register inf_dp1_wmi_lclMetaAddr
  assign inf_dp1_wmi_lclMetaAddr$D_IN = inf_dp1_bml_lclMetaAddr[14:0] ;
  assign inf_dp1_wmi_lclMetaAddr$EN = 1'd1 ;

  // register inf_dp1_wmi_mesgBufReady
  assign inf_dp1_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_inf_dp1_rRdy ;
  assign inf_dp1_wmi_mesgBufReady$EN = 1'd1 ;

  // register inf_dp1_wmi_mesgBusy
  assign inf_dp1_wmi_mesgBusy$D_IN =
	     !MUX_inf_dp1_wmi_mesgBusy$write_1__SEL_1 ;
  assign inf_dp1_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doDwell &&
	     inf_dp1_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // register inf_dp1_wmi_mesgCount
  assign inf_dp1_wmi_mesgCount$D_IN =
	     MUX_inf_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_inf_dp1_wmi_mesgCount$write_1__VAL_1 :
	       MUX_inf_dp1_wmi_mesgCount$write_1__VAL_1 ;
  assign inf_dp1_wmi_mesgCount$EN = inf_dp1_wmi_mesgDone_1$whas ;

  // register inf_dp1_wmi_mesgDone
  assign inf_dp1_wmi_mesgDone$D_IN = inf_dp1_wmi_mesgDone_1$whas ;
  assign inf_dp1_wmi_mesgDone$EN = 1'd1 ;

  // register inf_dp1_wmi_mesgMeta
  assign inf_dp1_wmi_mesgMeta$D_IN =
	     MUX_inf_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_inf_dp1_wmi_mesgMeta$write_1__VAL_2 ;
  assign inf_dp1_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp1_wmi_respMetadata ;

  // register inf_dp1_wmi_mesgStart
  assign inf_dp1_wmi_mesgStart$D_IN = inf_dp1_wmi_mesgStart_1$whas ;
  assign inf_dp1_wmi_mesgStart$EN = 1'd1 ;

  // register inf_dp1_wmi_metaBusy
  assign inf_dp1_wmi_metaBusy$D_IN = !WILL_FIRE_RL_inf_dp1_wmi_respMetadata ;
  assign inf_dp1_wmi_metaBusy$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_respMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ;

  // register inf_dp1_wmi_p4B
  assign inf_dp1_wmi_p4B$D_IN =
	     MUX_inf_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       inf_dp1_wmi_wmi_reqF$D_OUT[15:14] :
	       MUX_inf_dp1_wmi_p4B$write_1__VAL_2 ;
  assign inf_dp1_wmi_p4B$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_doReadResp ;

  // register inf_dp1_wmi_rdActive
  assign inf_dp1_wmi_rdActive$D_IN =
	     !MUX_inf_dp1_wmi_rdActive$write_1__SEL_1 &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign inf_dp1_wmi_rdActive$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // register inf_dp1_wmi_reqCount
  assign inf_dp1_wmi_reqCount$D_IN = inf_dp1_wmi_reqCount + 16'd1 ;
  assign inf_dp1_wmi_reqCount$EN = WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // register inf_dp1_wmi_thisMesg
  assign inf_dp1_wmi_thisMesg$D_IN =
	     { inf_dp1_wmi_mesgCount[7:0],
	       inf_dp1_wmi_wmi_mFlagReg[31:24],
	       inf_dp1_wmi_wmi_mFlagReg[15:0] } ;
  assign inf_dp1_wmi_thisMesg$EN = CAN_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // register inf_dp1_wmi_wmi_blockReq
  assign inf_dp1_wmi_wmi_blockReq$D_IN =
	     !MUX_inf_dp1_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;
  assign inf_dp1_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[28] &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // register inf_dp1_wmi_wmi_dhF_countReg
  assign inf_dp1_wmi_wmi_dhF_countReg$D_IN =
	     MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       inf_dp1_wmi_wmi_dhF_countReg + 2'd1 :
	       inf_dp1_wmi_wmi_dhF_countReg - 2'd1 ;
  assign inf_dp1_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // register inf_dp1_wmi_wmi_dhF_levelsValid
  assign inf_dp1_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_reset ;
  assign inf_dp1_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq &&
	     inf_dp1_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_reset ;

  // register inf_dp1_wmi_wmi_errorSticky
  assign inf_dp1_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign inf_dp1_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq &&
	     !inf_dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq &&
	     !inf_dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_dhF_enq &&
	     !inf_dp1_wmi_wmi_dhF$FULL_N ;

  // register inf_dp1_wmi_wmi_mFlagF_countReg
  assign inf_dp1_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ?
	       inf_dp1_wmi_wmi_mFlagF_countReg + 2'd1 :
	       inf_dp1_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign inf_dp1_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // register inf_dp1_wmi_wmi_mFlagF_levelsValid
  assign inf_dp1_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_reset ;
  assign inf_dp1_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[27] &&
	     inf_dp1_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_enq &&
	     inf_dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_mFlagF_reset ;

  // register inf_dp1_wmi_wmi_mFlagReg
  assign inf_dp1_wmi_wmi_mFlagReg$D_IN = inf_dp1_wmi_wmi_mFlagF$D_OUT ;
  assign inf_dp1_wmi_wmi_mFlagReg$EN =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;

  // register inf_dp1_wmi_wmi_operateD
  assign inf_dp1_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_inf_dp1_bml_lbar ;
  assign inf_dp1_wmi_wmi_operateD$EN = 1'd1 ;

  // register inf_dp1_wmi_wmi_peerIsReady
  assign inf_dp1_wmi_wmi_peerIsReady$D_IN = CAN_FIRE_RL_mRstConnect_1 ;
  assign inf_dp1_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register inf_dp1_wmi_wmi_reqF_countReg
  assign inf_dp1_wmi_wmi_reqF_countReg$D_IN =
	     MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       inf_dp1_wmi_wmi_reqF_countReg + 2'd1 :
	       inf_dp1_wmi_wmi_reqF_countReg - 2'd1 ;
  assign inf_dp1_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_inf_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // register inf_dp1_wmi_wmi_reqF_levelsValid
  assign inf_dp1_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_reset ;
  assign inf_dp1_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_enq &&
	     inf_dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_reqF_reset ;

  // register inf_dp1_wmi_wmi_respF_c_r
  assign inf_dp1_wmi_wmi_respF_c_r$D_IN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr ?
	       MUX_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 :
	       MUX_inf_dp1_wmi_wmi_respF_c_r$write_1__VAL_2 ;
  assign inf_dp1_wmi_wmi_respF_c_r$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr ;

  // register inf_dp1_wmi_wmi_respF_q_0
  always@(WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both or
	  MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1 or
	  MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2 or
	  MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr or
	  inf_dp1_wmi_wmi_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both:
	  inf_dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_1;
      MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__SEL_2:
	  inf_dp1_wmi_wmi_respF_q_0$D_IN =
	      MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr:
	  inf_dp1_wmi_wmi_respF_q_0$D_IN = inf_dp1_wmi_wmi_respF_q_1;
      default: inf_dp1_wmi_wmi_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_wmi_wmi_respF_q_0$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr &&
	     inf_dp1_wmi_wmi_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr ;

  // register inf_dp1_wmi_wmi_respF_q_1
  always@(WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both or
	  MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1 or
	  MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2 or
	  MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both:
	  inf_dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__VAL_1;
      MUX_inf_dp1_wmi_wmi_respF_q_1$write_1__SEL_2:
	  inf_dp1_wmi_wmi_respF_q_1$D_IN =
	      MUX_inf_dp1_wmi_wmi_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr:
	  inf_dp1_wmi_wmi_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: inf_dp1_wmi_wmi_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_wmi_wmi_respF_q_1$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_both ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_incCtr &&
	     inf_dp1_wmi_wmi_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_wmi_wmi_respF_decCtr ;

  // register inf_dp1_wmi_wmi_sFlagReg
  assign inf_dp1_wmi_wmi_sFlagReg$D_IN =
	     { y_avValue__h151580[7:0], y_avValue__h151560[23:0] } ;
  assign inf_dp1_wmi_wmi_sFlagReg$EN = WILL_FIRE_RL_inf_dp1_wmi_respMetadata ;

  // register inf_dp1_wmi_wmi_statusR
  assign inf_dp1_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign inf_dp1_wmi_wmi_statusR$EN = 1'b0 ;

  // register inf_dp1_wmi_wmi_trafficSticky
  assign inf_dp1_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign inf_dp1_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register inf_dp1_wmi_wrActive
  assign inf_dp1_wmi_wrActive$D_IN =
	     !MUX_inf_dp1_wmi_wrActive$write_1__SEL_1 &&
	     inf_dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign inf_dp1_wmi_wrActive$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 ||
	     WILL_FIRE_RL_inf_dp1_wmi_getRequest ;

  // register inf_dp1_wmi_wrFinalize
  assign inf_dp1_wmi_wrFinalize$D_IN =
	     MUX_inf_dp1_wmi_wrFinalize$write_1__SEL_1 ;
  assign inf_dp1_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_bytesRemainReq == 14'd4 &&
	     inf_dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // register inf_dp1_wmi_wrtCount
  assign inf_dp1_wmi_wrtCount$D_IN = inf_dp1_wmi_wrtCount + 16'd1 ;
  assign inf_dp1_wmi_wrtCount$EN = WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;

  // register inf_dp1_wti_nowReq
  assign inf_dp1_wti_nowReq$D_IN =
	     inf_itc1_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       inf_itc1_wti_nowReq ;
  assign inf_dp1_wti_nowReq$EN = 1'd1 ;

  // register inf_itc0_wti_nowReq
  assign inf_itc0_wti_nowReq$D_IN = { 3'd1, inf_itc0_now$dD_OUT } ;
  assign inf_itc0_wti_nowReq$EN = 1'd1 ;

  // register inf_itc0_wti_sThreadBusy_d
  assign inf_itc0_wti_sThreadBusy_d$D_IN = inf_dp0_wti_isReset$VAL ;
  assign inf_itc0_wti_sThreadBusy_d$EN = 1'd1 ;

  // register inf_itc1_wti_nowReq
  assign inf_itc1_wti_nowReq$D_IN = { 3'd1, inf_itc1_now$dD_OUT } ;
  assign inf_itc1_wti_nowReq$EN = 1'd1 ;

  // register inf_itc1_wti_sThreadBusy_d
  assign inf_itc1_wti_sThreadBusy_d$D_IN = inf_dp1_wti_isReset$VAL ;
  assign inf_itc1_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule app_appW2_respF_memory
  assign app_appW2_respF_memory$ADDRA = app_appW2_respF_rWrPtr[10:0] ;
  assign app_appW2_respF_memory$ADDRB =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgResptoWsi ?
	       x__h179094[10:0] :
	       app_appW2_respF_rRdPtr[10:0] ;
  assign app_appW2_respF_memory$DIA =
	     { IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7135,
	       app_appW2_respF_pwEnqueue$whas &&
	       app_appW2_respF_wDataIn$wget[57],
	       app_appW2_respF_pwEnqueue$whas &&
	       app_appW2_respF_wDataIn$wget[56],
	       IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7209 } ;
  assign app_appW2_respF_memory$DIB =
	     61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign app_appW2_respF_memory$WEA = app_appW2_respF_pwEnqueue$whas ;
  assign app_appW2_respF_memory$WEB = 1'd0 ;
  assign app_appW2_respF_memory$ENA = 1'd1 ;
  assign app_appW2_respF_memory$ENB = 1'd1 ;

  // submodule app_appW2_wci_reqF
  assign app_appW2_wci_reqF$D_IN = app_appW2_wci_wciReq$wget ;
  assign app_appW2_wci_reqF$ENQ = CAN_FIRE_RL_app_appW2_wci_reqF_enq ;
  assign app_appW2_wci_reqF$DEQ = app_appW2_wci_reqF_r_deq$whas ;
  assign app_appW2_wci_reqF$CLR = 1'b0 ;

  // submodule app_appW2_wmi_respF
  assign app_appW2_wmi_respF$D_IN = inf_dp0_wmi_wmi_respF_q_0 ;
  assign app_appW2_wmi_respF$ENQ =
	     WILL_FIRE_RL_app_appW2_wmi_respAdvance &&
	     app_appW2_wmi_respF$FULL_N ;
  assign app_appW2_wmi_respF$DEQ =
	     CAN_FIRE_RL_app_appW2_wmrd_mesgBodyResponse ;
  assign app_appW2_wmi_respF$CLR = 1'b0 ;

  // submodule app_appW2_wsiS_reqFifo
  assign app_appW2_wsiS_reqFifo$D_IN = 61'd0 ;
  assign app_appW2_wsiS_reqFifo$ENQ = 1'b0 ;
  assign app_appW2_wsiS_reqFifo$DEQ = app_appW2_wsiS_reqFifo_r_deq$whas ;
  assign app_appW2_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule app_appW3_mesgRF
  assign app_appW3_mesgRF$D_IN = v__h206282 ;
  assign app_appW3_mesgRF$ENQ = CAN_FIRE_RL_app_appW3_rdSer_body ;
  assign app_appW3_mesgRF$DEQ = CAN_FIRE_RL_app_appW3_wmrd_mesgBodyResponse ;
  assign app_appW3_mesgRF$CLR = 1'b0 ;

  // submodule app_appW3_mesgWF_memory
  assign app_appW3_mesgWF_memory$ADDRA = app_appW3_mesgWF_rWrPtr[11:0] ;
  assign app_appW3_mesgWF_memory$ADDRB =
	     CAN_FIRE_RL_app_appW3_wrtSer_body ?
	       x__h201408[11:0] :
	       app_appW3_mesgWF_rRdPtr[11:0] ;
  assign app_appW3_mesgWF_memory$DIA = x__h201307 ;
  assign app_appW3_mesgWF_memory$DIB = 32'hAAAAAAAA /* unspecified value */  ;
  assign app_appW3_mesgWF_memory$WEA =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ;
  assign app_appW3_mesgWF_memory$WEB = 1'd0 ;
  assign app_appW3_mesgWF_memory$ENA = 1'd1 ;
  assign app_appW3_mesgWF_memory$ENB = 1'd1 ;

  // submodule app_appW3_metaRF
  assign app_appW3_metaRF$D_IN = v__h206282 ;
  assign app_appW3_metaRF$ENQ = CAN_FIRE_RL_app_appW3_rdSer_begin ;
  assign app_appW3_metaRF$DEQ = CAN_FIRE_RL_app_appW3_wmrd_mesgBegin ;
  assign app_appW3_metaRF$CLR = 1'b0 ;

  // submodule app_appW3_metaWF
  assign app_appW3_metaWF$D_IN =
	     { app_appW3_wsiS_reqFifo$D_OUT[7:0], btm__h203796 } ;
  assign app_appW3_metaWF$ENQ = MUX_app_appW3_mesgWtCount$write_1__SEL_1 ;
  assign app_appW3_metaWF$DEQ = CAN_FIRE_RL_app_appW3_wrtSer_begin ;
  assign app_appW3_metaWF$CLR = 1'b0 ;

  // submodule app_appW3_wci_reqF
  assign app_appW3_wci_reqF$D_IN = app_appW3_wci_wciReq$wget ;
  assign app_appW3_wci_reqF$ENQ = CAN_FIRE_RL_app_appW3_wci_reqF_enq ;
  assign app_appW3_wci_reqF$DEQ = app_appW3_wci_reqF_r_deq$whas ;
  assign app_appW3_wci_reqF$CLR = 1'b0 ;

  // submodule app_appW3_wide16Fa
  assign app_appW3_wide16Fa$D_IN =
	     MUX_app_appW3_wide16Fa$enq_1__SEL_1 ?
	       MUX_app_appW3_wide16Fa$enq_1__VAL_1 :
	       MUX_app_appW3_wide16Fa$enq_1__VAL_2 ;
  assign app_appW3_wide16Fa$ENQ =
	     WILL_FIRE_RL_app_appW3_wrtSer_begin &&
	     (app_appW3_wrtSerPos == 2'd3 ||
	      app_appW3_metaWF$D_OUT[23:0] == 24'd0) ||
	     WILL_FIRE_RL_app_appW3_wrtSer_body &&
	     (app_appW3_wrtSerPos == 2'd3 ||
	      app_appW3_wrtSerUnroll == 16'd1) ;
  assign app_appW3_wide16Fa$DEQ = CAN_FIRE_RL_app_appW3_delay_write_req ;
  assign app_appW3_wide16Fa$CLR = 1'b0 ;

  // submodule app_appW3_wide16Fb
  assign app_appW3_wide16Fb$D_IN = app_appW3_wmemi_respF$D_OUT[127:0] ;
  assign app_appW3_wide16Fb$ENQ = CAN_FIRE_RL_app_appW3_delay_read_resp ;
  assign app_appW3_wide16Fb$DEQ = CAN_FIRE_RL_app_appW3_delay_Fb2Fc ;
  assign app_appW3_wide16Fb$CLR = 1'b0 ;

  // submodule app_appW3_wide16Fc
  assign app_appW3_wide16Fc$D_IN = app_appW3_wide16Fb$D_OUT ;
  assign app_appW3_wide16Fc$ENQ = CAN_FIRE_RL_app_appW3_delay_Fb2Fc ;
  assign app_appW3_wide16Fc$DEQ =
	     MUX_app_appW3_rdSerEmpty$write_1__PSEL_1 &&
	     (app_appW3_rdSerEmpty || app_appW3_rdSerPos == 2'd0) ;
  assign app_appW3_wide16Fc$CLR = 1'b0 ;

  // submodule app_appW3_wmemi_respF
  assign app_appW3_wmemi_respF$D_IN = app_appW3_wmemi_wmemiResponse$wget ;
  assign app_appW3_wmemi_respF$ENQ =
	     WILL_FIRE_RL_app_appW3_wmemi_respAdvance &&
	     app_appW3_wmemi_respF$FULL_N ;
  assign app_appW3_wmemi_respF$DEQ = CAN_FIRE_RL_app_appW3_delay_read_resp ;
  assign app_appW3_wmemi_respF$CLR = 1'b0 ;

  // submodule app_appW3_wsiS_reqFifo
  assign app_appW3_wsiS_reqFifo$D_IN = app_appW3_wsiS_wsiReq$wget ;
  assign app_appW3_wsiS_reqFifo$ENQ =
	     MUX_app_appW3_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign app_appW3_wsiS_reqFifo$DEQ = app_appW3_wsiS_reqFifo_r_deq$whas ;
  assign app_appW3_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule app_appW4_respF_memory
  assign app_appW4_respF_memory$ADDRA = app_appW4_respF_rWrPtr[10:0] ;
  assign app_appW4_respF_memory$ADDRB =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgResptoWsi ?
	       x__h226506[10:0] :
	       app_appW4_respF_rRdPtr[10:0] ;
  assign app_appW4_respF_memory$DIA =
	     { IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7139,
	       app_appW4_respF_pwEnqueue$whas &&
	       app_appW4_respF_wDataIn$wget[57],
	       app_appW4_respF_pwEnqueue$whas &&
	       app_appW4_respF_wDataIn$wget[56],
	       IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7138 } ;
  assign app_appW4_respF_memory$DIB =
	     61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign app_appW4_respF_memory$WEA = app_appW4_respF_pwEnqueue$whas ;
  assign app_appW4_respF_memory$WEB = 1'd0 ;
  assign app_appW4_respF_memory$ENA = 1'd1 ;
  assign app_appW4_respF_memory$ENB = 1'd1 ;

  // submodule app_appW4_wci_reqF
  assign app_appW4_wci_reqF$D_IN = app_appW4_wci_wciReq$wget ;
  assign app_appW4_wci_reqF$ENQ = CAN_FIRE_RL_app_appW4_wci_reqF_enq ;
  assign app_appW4_wci_reqF$DEQ = app_appW4_wci_reqF_r_deq$whas ;
  assign app_appW4_wci_reqF$CLR = 1'b0 ;

  // submodule app_appW4_wmi_respF
  assign app_appW4_wmi_respF$D_IN = inf_dp1_wmi_wmi_respF_q_0 ;
  assign app_appW4_wmi_respF$ENQ =
	     WILL_FIRE_RL_app_appW4_wmi_respAdvance &&
	     app_appW4_wmi_respF$FULL_N ;
  assign app_appW4_wmi_respF$DEQ =
	     CAN_FIRE_RL_app_appW4_wmrd_mesgBodyResponse ;
  assign app_appW4_wmi_respF$CLR = 1'b0 ;

  // submodule app_appW4_wsiS_reqFifo
  assign app_appW4_wsiS_reqFifo$D_IN = app_appW4_wsiS_wsiReq$wget ;
  assign app_appW4_wsiS_reqFifo$ENQ =
	     MUX_app_appW4_wsiS_reqFifo_levelsValid$write_1__SEL_5 ;
  assign app_appW4_wsiS_reqFifo$DEQ = app_appW4_wsiS_reqFifo_r_deq$whas ;
  assign app_appW4_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule inf_cp
  assign inf_cp$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign inf_cp$server_request_put = inf_sm0$c0_request_get ;
  assign inf_cp$switch_x = switch_x ;
  assign inf_cp$wci_Vm_0_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign inf_cp$wci_Vm_0_SFlag = 2'b0 ;
  assign inf_cp$wci_Vm_0_SResp = 2'd0 ;
  assign inf_cp$wci_Vm_10_SData = wci_m_2_SData ;
  assign inf_cp$wci_Vm_10_SFlag = wci_m_2_SFlag ;
  assign inf_cp$wci_Vm_10_SResp = wci_m_2_SResp ;
  assign inf_cp$wci_Vm_11_SData = wci_m_3_SData ;
  assign inf_cp$wci_Vm_11_SFlag = wci_m_3_SFlag ;
  assign inf_cp$wci_Vm_11_SResp = wci_m_3_SResp ;
  assign inf_cp$wci_Vm_12_SData = wci_m_4_SData ;
  assign inf_cp$wci_Vm_12_SFlag = wci_m_4_SFlag ;
  assign inf_cp$wci_Vm_12_SResp = wci_m_4_SResp ;
  assign inf_cp$wci_Vm_13_SData = inf_dp0_wci_respF_q_0[31:0] ;
  assign inf_cp$wci_Vm_13_SFlag = { 1'd1, inf_dp0_wci_sFlagReg } ;
  assign inf_cp$wci_Vm_13_SResp = inf_dp0_wci_respF_q_0[33:32] ;
  assign inf_cp$wci_Vm_14_SData = inf_dp1_wci_respF_q_0[31:0] ;
  assign inf_cp$wci_Vm_14_SFlag = { 1'd1, inf_dp1_wci_sFlagReg } ;
  assign inf_cp$wci_Vm_14_SResp = inf_dp1_wci_respF_q_0[33:32] ;
  assign inf_cp$wci_Vm_1_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign inf_cp$wci_Vm_1_SFlag = 2'b0 ;
  assign inf_cp$wci_Vm_1_SResp = 2'd0 ;
  assign inf_cp$wci_Vm_2_SData = app_appW2_wci_respF_q_0[31:0] ;
  assign inf_cp$wci_Vm_2_SFlag = { 1'd1, app_appW2_wci_sFlagReg } ;
  assign inf_cp$wci_Vm_2_SResp = app_appW2_wci_respF_q_0[33:32] ;
  assign inf_cp$wci_Vm_3_SData = app_appW3_wci_respF_q_0[31:0] ;
  assign inf_cp$wci_Vm_3_SFlag = { 1'd1, app_appW3_wci_sFlagReg } ;
  assign inf_cp$wci_Vm_3_SResp = app_appW3_wci_respF_q_0[33:32] ;
  assign inf_cp$wci_Vm_4_SData = app_appW4_wci_respF_q_0[31:0] ;
  assign inf_cp$wci_Vm_4_SFlag = { 1'd1, app_appW4_wci_sFlagReg } ;
  assign inf_cp$wci_Vm_4_SResp = app_appW4_wci_respF_q_0[33:32] ;
  assign inf_cp$wci_Vm_5_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign inf_cp$wci_Vm_5_SFlag = 2'b0 ;
  assign inf_cp$wci_Vm_5_SResp = 2'd0 ;
  assign inf_cp$wci_Vm_6_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign inf_cp$wci_Vm_6_SFlag = 2'b0 ;
  assign inf_cp$wci_Vm_6_SResp = 2'd0 ;
  assign inf_cp$wci_Vm_7_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign inf_cp$wci_Vm_7_SFlag = 2'b0 ;
  assign inf_cp$wci_Vm_7_SResp = 2'd0 ;
  assign inf_cp$wci_Vm_8_SData = wci_m_0_SData ;
  assign inf_cp$wci_Vm_8_SFlag = wci_m_0_SFlag ;
  assign inf_cp$wci_Vm_8_SResp = wci_m_0_SResp ;
  assign inf_cp$wci_Vm_9_SData = wci_m_1_SData ;
  assign inf_cp$wci_Vm_9_SFlag = wci_m_1_SFlag ;
  assign inf_cp$wci_Vm_9_SResp = wci_m_1_SResp ;
  assign inf_cp$EN_server_request_put = CAN_FIRE_RL_inf_ClientServerRequest ;
  assign inf_cp$EN_server_response_get =
	     CAN_FIRE_RL_inf_ClientServerResponse ;
  assign inf_cp$wci_Vm_0_SThreadBusy = 1'd1 ;
  assign inf_cp$wci_Vm_1_SThreadBusy = 1'd1 ;
  assign inf_cp$wci_Vm_2_SThreadBusy = CAN_FIRE_RL_stbConnect_2 ;
  assign inf_cp$wci_Vm_3_SThreadBusy = CAN_FIRE_RL_stbConnect_3 ;
  assign inf_cp$wci_Vm_4_SThreadBusy = CAN_FIRE_RL_stbConnect_4 ;
  assign inf_cp$wci_Vm_5_SThreadBusy = 1'd1 ;
  assign inf_cp$wci_Vm_6_SThreadBusy = 1'd1 ;
  assign inf_cp$wci_Vm_7_SThreadBusy = 1'd1 ;
  assign inf_cp$wci_Vm_8_SThreadBusy = wci_m_0_SThreadBusy ;
  assign inf_cp$wci_Vm_9_SThreadBusy = wci_m_1_SThreadBusy ;
  assign inf_cp$wci_Vm_10_SThreadBusy = wci_m_2_SThreadBusy ;
  assign inf_cp$wci_Vm_11_SThreadBusy = wci_m_3_SThreadBusy ;
  assign inf_cp$wci_Vm_12_SThreadBusy = wci_m_4_SThreadBusy ;
  assign inf_cp$wci_Vm_13_SThreadBusy = CAN_FIRE_RL_inf_stbConnect ;
  assign inf_cp$wci_Vm_14_SThreadBusy = CAN_FIRE_RL_inf_stbConnect_1 ;

  // submodule inf_dp0_bram_memory
  always@(MUX_inf_dp0_bram_memory$a_put_1__SEL_1 or
	  inf_dp0_tlp_mReqF$D_OUT or
	  MUX_inf_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_inf_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq or
	  MUX_inf_dp0_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory$a_put_1__SEL_1:
	  inf_dp0_bram_memory$ADDRA = inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp0_bram_memory$a_put_1__SEL_2:
	  inf_dp0_bram_memory$ADDRA = inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp0_bram_memory$a_put_1__SEL_3:
	  inf_dp0_bram_memory$ADDRA = MUX_inf_dp0_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory$ADDRA = MUX_inf_dp0_bram_memory$a_put_2__VAL_4;
      default: inf_dp0_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  inf_dp0_wmi_lclMetaAddr or
	  MUX_inf_dp0_bram_memory$b_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp0_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory$ADDRB = inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_inf_dp0_bram_memory$b_put_1__SEL_1:
	  inf_dp0_bram_memory$ADDRB = MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp0_bram_memory$b_put_1__SEL_2:
	  inf_dp0_bram_memory$ADDRB = MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: inf_dp0_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp0_bram_memory$a_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_inf_dp0_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory$a_put_1__SEL_1:
	  inf_dp0_bram_memory$DIA = MUX_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp0_bram_memory$a_put_1__SEL_3:
	  inf_dp0_bram_memory$DIA = MUX_inf_dp0_bram_memory$a_put_3__VAL_3;
      MUX_inf_dp0_bram_memory$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory$DIA = 32'd0;
      default: inf_dp0_bram_memory$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp0_bram_memory$b_put_1__SEL_2 or
	  inf_dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  x3__h70901 or
	  MUX_inf_dp0_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory$b_put_1__SEL_2:
	  inf_dp0_bram_memory$DIB = inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory$DIB = x3__h70901;
      MUX_inf_dp0_bram_memory$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata:
	  inf_dp0_bram_memory$DIB = 32'd0;
      default: inf_dp0_bram_memory$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_bram_memory$WEA =
	     !MUX_inf_dp0_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory$WEB =
	     !MUX_inf_dp0_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ;
  assign inf_dp0_bram_memory$ENA =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7159 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory$ENB =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // submodule inf_dp0_bram_memory_1
  always@(MUX_inf_dp0_bram_memory_1$a_put_1__SEL_1 or
	  inf_dp0_tlp_mReqF$D_OUT or
	  MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_inf_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq or
	  MUX_inf_dp0_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory_1$a_put_1__SEL_1:
	  inf_dp0_bram_memory_1$ADDRA = inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2:
	  inf_dp0_bram_memory_1$ADDRA = inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp0_bram_memory_1$a_put_1__SEL_3:
	  inf_dp0_bram_memory_1$ADDRA =
	      MUX_inf_dp0_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory_1$ADDRA =
	      MUX_inf_dp0_bram_memory_1$a_put_2__VAL_4;
      default: inf_dp0_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  inf_dp0_wmi_lclMetaAddr or
	  MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp0_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory_1$ADDRB = inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1:
	  inf_dp0_bram_memory_1$ADDRB =
	      MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp0_bram_memory_1$b_put_1__SEL_2:
	  inf_dp0_bram_memory_1$ADDRB =
	      MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: inf_dp0_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp0_bram_memory_1$a_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory_1$a_put_3__VAL_3 or
	  MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory_1$a_put_1__SEL_1:
	  inf_dp0_bram_memory_1$DIA = MUX_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp0_bram_memory_1$a_put_1__SEL_3:
	  inf_dp0_bram_memory_1$DIA =
	      MUX_inf_dp0_bram_memory_1$a_put_3__VAL_3;
      MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory_1$DIA = 32'd0;
      default: inf_dp0_bram_memory_1$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp0_bram_memory_1$b_put_1__SEL_2 or
	  inf_dp0_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  mesgMeta_opcode__h70941 or
	  MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory_1$b_put_1__SEL_2:
	  inf_dp0_bram_memory_1$DIB = inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory_1$DIB = mesgMeta_opcode__h70941;
      MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata:
	  inf_dp0_bram_memory_1$DIB = 32'd0;
      default: inf_dp0_bram_memory_1$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_bram_memory_1$WEA =
	     !MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory_1$WEB =
	     !MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ;
  assign inf_dp0_bram_memory_1$ENA =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7162 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory_1$ENB =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // submodule inf_dp0_bram_memory_2
  always@(MUX_inf_dp0_bram_memory_2$a_put_1__SEL_1 or
	  inf_dp0_tlp_mReqF$D_OUT or
	  MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_inf_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq or
	  MUX_inf_dp0_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory_2$a_put_1__SEL_1:
	  inf_dp0_bram_memory_2$ADDRA = inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2:
	  inf_dp0_bram_memory_2$ADDRA = inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp0_bram_memory_2$a_put_1__SEL_3:
	  inf_dp0_bram_memory_2$ADDRA =
	      MUX_inf_dp0_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory_2$ADDRA =
	      MUX_inf_dp0_bram_memory_2$a_put_2__VAL_4;
      default: inf_dp0_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  inf_dp0_wmi_lclMetaAddr or
	  MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp0_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory_2$ADDRB = inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1:
	  inf_dp0_bram_memory_2$ADDRB =
	      MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp0_bram_memory_2$b_put_1__SEL_2:
	  inf_dp0_bram_memory_2$ADDRB =
	      MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: inf_dp0_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp0_bram_memory_2$a_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory_2$a_put_3__VAL_3 or
	  MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory_2$a_put_1__SEL_1:
	  inf_dp0_bram_memory_2$DIA = MUX_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp0_bram_memory_2$a_put_1__SEL_3:
	  inf_dp0_bram_memory_2$DIA =
	      MUX_inf_dp0_bram_memory_2$a_put_3__VAL_3;
      MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory_2$DIA = 32'd0;
      default: inf_dp0_bram_memory_2$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  inf_dp0_wmi_nowW$wget or
	  MUX_inf_dp0_bram_memory_2$b_put_1__SEL_2 or
	  inf_dp0_wmi_wmi_dhF$D_OUT or
	  MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory_2$DIB = inf_dp0_wmi_nowW$wget[63:32];
      MUX_inf_dp0_bram_memory_2$b_put_1__SEL_2:
	  inf_dp0_bram_memory_2$DIB = inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata:
	  inf_dp0_bram_memory_2$DIB = 32'd0;
      default: inf_dp0_bram_memory_2$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_bram_memory_2$WEA =
	     !MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory_2$WEB =
	     !MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ;
  assign inf_dp0_bram_memory_2$ENA =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7160 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory_2$ENB =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // submodule inf_dp0_bram_memory_3
  always@(MUX_inf_dp0_bram_memory_3$a_put_1__SEL_1 or
	  inf_dp0_tlp_mReqF$D_OUT or
	  MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2 or
	  MUX_inf_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq or
	  MUX_inf_dp0_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory_3$a_put_1__SEL_1:
	  inf_dp0_bram_memory_3$ADDRA = inf_dp0_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2:
	  inf_dp0_bram_memory_3$ADDRA = inf_dp0_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp0_bram_memory_3$a_put_1__SEL_3:
	  inf_dp0_bram_memory_3$ADDRA =
	      MUX_inf_dp0_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory_3$ADDRA =
	      MUX_inf_dp0_bram_memory_3$a_put_2__VAL_4;
      default: inf_dp0_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp0_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  inf_dp0_wmi_lclMetaAddr or
	  MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp0_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory_3$ADDRB = inf_dp0_wmi_lclMetaAddr[14:4];
      MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1:
	  inf_dp0_bram_memory_3$ADDRB =
	      MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp0_bram_memory_3$b_put_1__SEL_2:
	  inf_dp0_bram_memory_3$ADDRB =
	      MUX_inf_dp0_bram_memory$b_put_2__VAL_1;
      default: inf_dp0_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp0_bram_memory_3$a_put_1__SEL_1 or
	  MUX_inf_dp0_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_inf_dp0_bram_memory_3$a_put_3__VAL_3 or
	  MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_bram_memory_3$a_put_1__SEL_1:
	  inf_dp0_bram_memory_3$DIA = MUX_inf_dp0_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp0_bram_memory_3$a_put_1__SEL_3:
	  inf_dp0_bram_memory_3$DIA =
	      MUX_inf_dp0_bram_memory_3$a_put_3__VAL_3;
      MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq:
	  inf_dp0_bram_memory_3$DIA = 32'd0;
      default: inf_dp0_bram_memory_3$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize or
	  inf_dp0_wmi_nowW$wget or
	  MUX_inf_dp0_bram_memory_3$b_put_1__SEL_2 or
	  inf_dp0_wmi_wmi_dhF$D_OUT or
	  MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp0_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize:
	  inf_dp0_bram_memory_3$DIB = inf_dp0_wmi_nowW$wget[31:0];
      MUX_inf_dp0_bram_memory_3$b_put_1__SEL_2:
	  inf_dp0_bram_memory_3$DIB = inf_dp0_wmi_wmi_dhF$D_OUT[35:4];
      MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata:
	  inf_dp0_bram_memory_3$DIB = 32'd0;
      default: inf_dp0_bram_memory_3$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_bram_memory_3$WEA =
	     !MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory_3$WEB =
	     !MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ;
  assign inf_dp0_bram_memory_3$ENA =
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq &&
	     inf_dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeData &&
	     IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7161 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq ;
  assign inf_dp0_bram_memory_3$ENB =
	     WILL_FIRE_RL_inf_dp0_wmi_doReadReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteReq &&
	     inf_dp0_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize ;

  // submodule inf_dp0_bram_serverAdapterA_1_outDataCore
  assign inf_dp0_bram_serverAdapterA_1_outDataCore$D_IN =
	     inf_dp0_bram_memory_1$DOA ;
  assign inf_dp0_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_bram_serverAdapterA_2_outDataCore
  assign inf_dp0_bram_serverAdapterA_2_outDataCore$D_IN =
	     inf_dp0_bram_memory_2$DOA ;
  assign inf_dp0_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_bram_serverAdapterA_3_outDataCore
  assign inf_dp0_bram_serverAdapterA_3_outDataCore$D_IN =
	     inf_dp0_bram_memory_3$DOA ;
  assign inf_dp0_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_bram_serverAdapterA_outDataCore
  assign inf_dp0_bram_serverAdapterA_outDataCore$D_IN =
	     inf_dp0_bram_memory$DOA ;
  assign inf_dp0_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_bram_serverAdapterB_1_outDataCore
  assign inf_dp0_bram_serverAdapterB_1_outDataCore$D_IN =
	     inf_dp0_bram_memory_1$DOB ;
  assign inf_dp0_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_bram_serverAdapterB_2_outDataCore
  assign inf_dp0_bram_serverAdapterB_2_outDataCore$D_IN =
	     inf_dp0_bram_memory_2$DOB ;
  assign inf_dp0_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_bram_serverAdapterB_3_outDataCore
  assign inf_dp0_bram_serverAdapterB_3_outDataCore$D_IN =
	     inf_dp0_bram_memory_3$DOB ;
  assign inf_dp0_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_bram_serverAdapterB_outDataCore
  assign inf_dp0_bram_serverAdapterB_outDataCore$D_IN =
	     inf_dp0_bram_memory$DOB ;
  assign inf_dp0_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqOnly ;
  assign inf_dp0_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_outData_deqOnly ;
  assign inf_dp0_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp0_tlp_inF
  assign inf_dp0_tlp_inF$D_IN = inf_sm1$c0_request_get ;
  assign inf_dp0_tlp_inF$ENQ = CAN_FIRE_RL_inf_ClientServerRequest_2 ;
  assign inf_dp0_tlp_inF$DEQ =
	     WILL_FIRE_RL_inf_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ;
  assign inf_dp0_tlp_inF$CLR = 1'b0 ;

  // submodule inf_dp0_tlp_mReqF
  always@(MUX_inf_dp0_tlp_mReqF$enq_1__SEL_1 or
	  MUX_inf_dp0_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta or
	  MUX_inf_dp0_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg or
	  MUX_inf_dp0_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta or
	  MUX_inf_dp0_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader or
	  MUX_inf_dp0_tlp_mReqF$enq_1__VAL_5 or
	  MUX_inf_dp0_tlp_mReqF$enq_1__SEL_6 or
	  MUX_inf_dp0_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp0_tlp_mReqF$enq_1__SEL_1:
	  inf_dp0_tlp_mReqF$D_IN = MUX_inf_dp0_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta:
	  inf_dp0_tlp_mReqF$D_IN = MUX_inf_dp0_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg:
	  inf_dp0_tlp_mReqF$D_IN = MUX_inf_dp0_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta:
	  inf_dp0_tlp_mReqF$D_IN = MUX_inf_dp0_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader:
	  inf_dp0_tlp_mReqF$D_IN = MUX_inf_dp0_tlp_mReqF$enq_1__VAL_5;
      MUX_inf_dp0_tlp_mReqF$enq_1__SEL_6:
	  inf_dp0_tlp_mReqF$D_IN = MUX_inf_dp0_tlp_mReqF$enq_1__VAL_6;
      default: inf_dp0_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_inf_dp0_tlp_tlpRcv &&
	     inf_dp0_tlp_inF_first__96_BIT_152_043_AND_NOT__ETC___d1068 ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta ;
  assign inf_dp0_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstReq &&
	     inf_dp0_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextReq &&
	     inf_dp0_tlp_readRemainDWLen_314_ULE_4___d1315 ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeData ||
	     WILL_FIRE_RL_inf_dp0_tlp_writeReq ;
  assign inf_dp0_tlp_mReqF$CLR = 1'b0 ;

  // submodule inf_dp0_tlp_mRespF
  assign inf_dp0_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp ?
	       MUX_inf_dp0_tlp_mRespF$enq_1__VAL_1 :
	       MUX_inf_dp0_tlp_mRespF$enq_1__VAL_2 ;
  assign inf_dp0_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp ;
  assign inf_dp0_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead ;
  assign inf_dp0_tlp_mRespF$CLR = 1'b0 ;

  // submodule inf_dp0_tlp_outF
  always@(WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_6 or
	  MUX_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3 or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_7 or
	  MUX_inf_dp0_tlp_outF$enq_1__SEL_8 or
	  MUX_inf_dp0_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_6;
      MUX_inf_dp0_tlp_tlpXmtBusy$write_1__PSEL_3:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_7;
      MUX_inf_dp0_tlp_outF$enq_1__SEL_8:
	  inf_dp0_tlp_outF$D_IN = MUX_inf_dp0_tlp_outF$enq_1__VAL_8;
      default: inf_dp0_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp0_tlp_outF$ENQ =
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent ;
  assign inf_dp0_tlp_outF$DEQ = CAN_FIRE_RL_inf_ClientServerResponse_2 ;
  assign inf_dp0_tlp_outF$CLR = 1'b0 ;

  // submodule inf_dp0_tlp_readReq
  assign inf_dp0_tlp_readReq$D_IN = inf_dp0_tlp_mReqF$D_OUT[59:0] ;
  assign inf_dp0_tlp_readReq$ENQ = CAN_FIRE_RL_inf_dp0_tlp_read_FirstReq ;
  assign inf_dp0_tlp_readReq$DEQ =
	     WILL_FIRE_RL_inf_dp0_tlp_read_NextResp &&
	     inf_dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 ||
	     WILL_FIRE_RL_inf_dp0_tlp_read_FirstResp &&
	     inf_dp0_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign inf_dp0_tlp_readReq$CLR = 1'b0 ;

  // submodule inf_dp0_wci_reqF
  assign inf_dp0_wci_reqF$D_IN = inf_dp0_wci_wciReq$wget ;
  assign inf_dp0_wci_reqF$ENQ = CAN_FIRE_RL_inf_dp0_wci_reqF_enq ;
  assign inf_dp0_wci_reqF$DEQ = inf_dp0_wci_reqF_r_deq$whas ;
  assign inf_dp0_wci_reqF$CLR = 1'b0 ;

  // submodule inf_dp0_wmi_wmi_dhF
  assign inf_dp0_wmi_wmi_dhF$D_IN = inf_dp0_wmi_wmi_wmiDh$wget ;
  assign inf_dp0_wmi_wmi_dhF$ENQ =
	     MUX_inf_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_inf_dp0_wmi_doWriteReq ;
  assign inf_dp0_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule inf_dp0_wmi_wmi_mFlagF
  assign inf_dp0_wmi_wmi_mFlagF$D_IN = inf_dp0_wmi_wmi_wmiMFlag$wget ;
  assign inf_dp0_wmi_wmi_mFlagF$ENQ =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign inf_dp0_wmi_wmi_mFlagF$DEQ =
	     MUX_inf_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule inf_dp0_wmi_wmi_reqF
  assign inf_dp0_wmi_wmi_reqF$D_IN = inf_dp0_wmi_wmi_wmiReq$wget ;
  assign inf_dp0_wmi_wmi_reqF$ENQ =
	     MUX_inf_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign inf_dp0_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_inf_dp0_wmi_getRequest ;
  assign inf_dp0_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule inf_dp1_bram_memory
  always@(MUX_inf_dp1_bram_memory$a_put_1__SEL_1 or
	  inf_dp1_tlp_mReqF$D_OUT or
	  MUX_inf_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_inf_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq or
	  MUX_inf_dp1_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory$a_put_1__SEL_1:
	  inf_dp1_bram_memory$ADDRA = inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp1_bram_memory$a_put_1__SEL_2:
	  inf_dp1_bram_memory$ADDRA = inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp1_bram_memory$a_put_1__SEL_3:
	  inf_dp1_bram_memory$ADDRA = MUX_inf_dp1_bram_memory$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory$ADDRA = MUX_inf_dp1_bram_memory$a_put_2__VAL_4;
      default: inf_dp1_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  inf_dp1_wmi_lclMetaAddr or
	  MUX_inf_dp1_bram_memory$b_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp1_bram_memory$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory$ADDRB = inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_inf_dp1_bram_memory$b_put_1__SEL_1:
	  inf_dp1_bram_memory$ADDRB = MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp1_bram_memory$b_put_1__SEL_2:
	  inf_dp1_bram_memory$ADDRB = MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: inf_dp1_bram_memory$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp1_bram_memory$a_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_inf_dp1_bram_memory$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory$a_put_1__SEL_1:
	  inf_dp1_bram_memory$DIA = MUX_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp1_bram_memory$a_put_1__SEL_3:
	  inf_dp1_bram_memory$DIA = MUX_inf_dp1_bram_memory$a_put_3__VAL_3;
      MUX_inf_dp1_bram_memory$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory$DIA = 32'd0;
      default: inf_dp1_bram_memory$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp1_bram_memory$b_put_1__SEL_2 or
	  inf_dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  x3__h149964 or
	  MUX_inf_dp1_bram_memory$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory$b_put_1__SEL_2:
	  inf_dp1_bram_memory$DIB = inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory$DIB = x3__h149964;
      MUX_inf_dp1_bram_memory$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata:
	  inf_dp1_bram_memory$DIB = 32'd0;
      default: inf_dp1_bram_memory$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_bram_memory$WEA =
	     !MUX_inf_dp1_bram_memory$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory$WEB =
	     !MUX_inf_dp1_bram_memory$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ;
  assign inf_dp1_bram_memory$ENA =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7187 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory$ENB =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd0 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // submodule inf_dp1_bram_memory_1
  always@(MUX_inf_dp1_bram_memory_1$a_put_1__SEL_1 or
	  inf_dp1_tlp_mReqF$D_OUT or
	  MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_inf_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq or
	  MUX_inf_dp1_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory_1$a_put_1__SEL_1:
	  inf_dp1_bram_memory_1$ADDRA = inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2:
	  inf_dp1_bram_memory_1$ADDRA = inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp1_bram_memory_1$a_put_1__SEL_3:
	  inf_dp1_bram_memory_1$ADDRA =
	      MUX_inf_dp1_bram_memory_1$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory_1$ADDRA =
	      MUX_inf_dp1_bram_memory_1$a_put_2__VAL_4;
      default: inf_dp1_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  inf_dp1_wmi_lclMetaAddr or
	  MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp1_bram_memory_1$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory_1$ADDRB = inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1:
	  inf_dp1_bram_memory_1$ADDRB =
	      MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp1_bram_memory_1$b_put_1__SEL_2:
	  inf_dp1_bram_memory_1$ADDRB =
	      MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: inf_dp1_bram_memory_1$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp1_bram_memory_1$a_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory_1$a_put_3__VAL_3 or
	  MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory_1$a_put_1__SEL_1:
	  inf_dp1_bram_memory_1$DIA = MUX_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp1_bram_memory_1$a_put_1__SEL_3:
	  inf_dp1_bram_memory_1$DIA =
	      MUX_inf_dp1_bram_memory_1$a_put_3__VAL_3;
      MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory_1$DIA = 32'd0;
      default: inf_dp1_bram_memory_1$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp1_bram_memory_1$b_put_1__SEL_2 or
	  inf_dp1_wmi_wmi_dhF$D_OUT or
	  WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  mesgMeta_opcode__h150004 or
	  MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory_1$b_put_1__SEL_2:
	  inf_dp1_bram_memory_1$DIB = inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory_1$DIB = mesgMeta_opcode__h150004;
      MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata:
	  inf_dp1_bram_memory_1$DIB = 32'd0;
      default: inf_dp1_bram_memory_1$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_bram_memory_1$WEA =
	     !MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory_1$WEB =
	     !MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ;
  assign inf_dp1_bram_memory_1$ENA =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7188 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory_1$ENB =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd1 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // submodule inf_dp1_bram_memory_2
  always@(MUX_inf_dp1_bram_memory_2$a_put_1__SEL_1 or
	  inf_dp1_tlp_mReqF$D_OUT or
	  MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_inf_dp1_bram_memory_2$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq or
	  MUX_inf_dp1_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory_2$a_put_1__SEL_1:
	  inf_dp1_bram_memory_2$ADDRA = inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2:
	  inf_dp1_bram_memory_2$ADDRA = inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp1_bram_memory_2$a_put_1__SEL_3:
	  inf_dp1_bram_memory_2$ADDRA =
	      MUX_inf_dp1_bram_memory_2$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory_2$ADDRA =
	      MUX_inf_dp1_bram_memory_2$a_put_2__VAL_4;
      default: inf_dp1_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  inf_dp1_wmi_lclMetaAddr or
	  MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp1_bram_memory_2$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory_2$ADDRB = inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1:
	  inf_dp1_bram_memory_2$ADDRB =
	      MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp1_bram_memory_2$b_put_1__SEL_2:
	  inf_dp1_bram_memory_2$ADDRB =
	      MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: inf_dp1_bram_memory_2$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp1_bram_memory_2$a_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp1_bram_memory_2$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory_2$a_put_3__VAL_3 or
	  MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory_2$a_put_1__SEL_1:
	  inf_dp1_bram_memory_2$DIA = MUX_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp1_bram_memory_2$a_put_1__SEL_3:
	  inf_dp1_bram_memory_2$DIA =
	      MUX_inf_dp1_bram_memory_2$a_put_3__VAL_3;
      MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory_2$DIA = 32'd0;
      default: inf_dp1_bram_memory_2$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  inf_dp1_wmi_nowW$wget or
	  MUX_inf_dp1_bram_memory_2$b_put_1__SEL_2 or
	  inf_dp1_wmi_wmi_dhF$D_OUT or
	  MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory_2$DIB = inf_dp1_wmi_nowW$wget[63:32];
      MUX_inf_dp1_bram_memory_2$b_put_1__SEL_2:
	  inf_dp1_bram_memory_2$DIB = inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata:
	  inf_dp1_bram_memory_2$DIB = 32'd0;
      default: inf_dp1_bram_memory_2$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_bram_memory_2$WEA =
	     !MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory_2$WEB =
	     !MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ;
  assign inf_dp1_bram_memory_2$ENA =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7189 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory_2$ENB =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd2 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // submodule inf_dp1_bram_memory_3
  always@(MUX_inf_dp1_bram_memory_3$a_put_1__SEL_1 or
	  inf_dp1_tlp_mReqF$D_OUT or
	  MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2 or
	  MUX_inf_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq or
	  MUX_inf_dp1_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory_3$a_put_1__SEL_1:
	  inf_dp1_bram_memory_3$ADDRA = inf_dp1_tlp_mReqF$D_OUT[62:52];
      MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2:
	  inf_dp1_bram_memory_3$ADDRA = inf_dp1_tlp_mReqF$D_OUT[41:31];
      MUX_inf_dp1_bram_memory_3$a_put_1__SEL_3:
	  inf_dp1_bram_memory_3$ADDRA =
	      MUX_inf_dp1_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory_3$ADDRA =
	      MUX_inf_dp1_bram_memory_3$a_put_2__VAL_4;
      default: inf_dp1_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp1_wmi_reqMetadata or
	  WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  inf_dp1_wmi_lclMetaAddr or
	  MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$b_put_2__VAL_1 or
	  MUX_inf_dp1_bram_memory_3$b_put_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory_3$ADDRB = inf_dp1_wmi_lclMetaAddr[14:4];
      MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1:
	  inf_dp1_bram_memory_3$ADDRB =
	      MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      MUX_inf_dp1_bram_memory_3$b_put_1__SEL_2:
	  inf_dp1_bram_memory_3$ADDRB =
	      MUX_inf_dp1_bram_memory$b_put_2__VAL_1;
      default: inf_dp1_bram_memory_3$ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_inf_dp1_bram_memory_3$a_put_1__SEL_1 or
	  MUX_inf_dp1_bram_memory$a_put_3__VAL_1 or
	  MUX_inf_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_inf_dp1_bram_memory_3$a_put_3__VAL_3 or
	  MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_bram_memory_3$a_put_1__SEL_1:
	  inf_dp1_bram_memory_3$DIA = MUX_inf_dp1_bram_memory$a_put_3__VAL_1;
      MUX_inf_dp1_bram_memory_3$a_put_1__SEL_3:
	  inf_dp1_bram_memory_3$DIA =
	      MUX_inf_dp1_bram_memory_3$a_put_3__VAL_3;
      MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2 ||
      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq:
	  inf_dp1_bram_memory_3$DIA = 32'd0;
      default: inf_dp1_bram_memory_3$DIA =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize or
	  inf_dp1_wmi_nowW$wget or
	  MUX_inf_dp1_bram_memory_3$b_put_1__SEL_2 or
	  inf_dp1_wmi_wmi_dhF$D_OUT or
	  MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1 or
	  WILL_FIRE_RL_inf_dp1_wmi_reqMetadata)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize:
	  inf_dp1_bram_memory_3$DIB = inf_dp1_wmi_nowW$wget[31:0];
      MUX_inf_dp1_bram_memory_3$b_put_1__SEL_2:
	  inf_dp1_bram_memory_3$DIB = inf_dp1_wmi_wmi_dhF$D_OUT[35:4];
      MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1 ||
      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata:
	  inf_dp1_bram_memory_3$DIB = 32'd0;
      default: inf_dp1_bram_memory_3$DIB =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_bram_memory_3$WEA =
	     !MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2 &&
	     !WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory_3$WEB =
	     !MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ;
  assign inf_dp1_bram_memory_3$ENA =
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq &&
	     inf_dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeData &&
	     IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7190 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq ;
  assign inf_dp1_bram_memory_3$ENB =
	     WILL_FIRE_RL_inf_dp1_wmi_doReadReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteReq &&
	     inf_dp1_wmi_addr[3:2] == 2'd3 ||
	     WILL_FIRE_RL_inf_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize ;

  // submodule inf_dp1_bram_serverAdapterA_1_outDataCore
  assign inf_dp1_bram_serverAdapterA_1_outDataCore$D_IN =
	     inf_dp1_bram_memory_1$DOA ;
  assign inf_dp1_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_bram_serverAdapterA_2_outDataCore
  assign inf_dp1_bram_serverAdapterA_2_outDataCore$D_IN =
	     inf_dp1_bram_memory_2$DOA ;
  assign inf_dp1_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_bram_serverAdapterA_3_outDataCore
  assign inf_dp1_bram_serverAdapterA_3_outDataCore$D_IN =
	     inf_dp1_bram_memory_3$DOA ;
  assign inf_dp1_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_bram_serverAdapterA_outDataCore
  assign inf_dp1_bram_serverAdapterA_outDataCore$D_IN =
	     inf_dp1_bram_memory$DOA ;
  assign inf_dp1_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_bram_serverAdapterB_1_outDataCore
  assign inf_dp1_bram_serverAdapterB_1_outDataCore$D_IN =
	     inf_dp1_bram_memory_1$DOB ;
  assign inf_dp1_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_bram_serverAdapterB_2_outDataCore
  assign inf_dp1_bram_serverAdapterB_2_outDataCore$D_IN =
	     inf_dp1_bram_memory_2$DOB ;
  assign inf_dp1_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_bram_serverAdapterB_3_outDataCore
  assign inf_dp1_bram_serverAdapterB_3_outDataCore$D_IN =
	     inf_dp1_bram_memory_3$DOB ;
  assign inf_dp1_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_bram_serverAdapterB_outDataCore
  assign inf_dp1_bram_serverAdapterB_outDataCore$D_IN =
	     inf_dp1_bram_memory$DOB ;
  assign inf_dp1_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqOnly ;
  assign inf_dp1_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_outData_deqOnly ;
  assign inf_dp1_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule inf_dp1_tlp_inF
  assign inf_dp1_tlp_inF$D_IN = inf_sm2$c0_request_get ;
  assign inf_dp1_tlp_inF$ENQ = CAN_FIRE_RL_inf_ClientServerRequest_4 ;
  assign inf_dp1_tlp_inF$DEQ =
	     WILL_FIRE_RL_inf_dp1_tlp_tlpRcv ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ;
  assign inf_dp1_tlp_inF$CLR = 1'b0 ;

  // submodule inf_dp1_tlp_mReqF
  always@(MUX_inf_dp1_tlp_mReqF$enq_1__SEL_1 or
	  MUX_inf_dp1_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta or
	  MUX_inf_dp1_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg or
	  MUX_inf_dp1_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta or
	  MUX_inf_dp1_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader or
	  MUX_inf_dp1_tlp_mReqF$enq_1__VAL_5 or
	  MUX_inf_dp1_tlp_mReqF$enq_1__SEL_6 or
	  MUX_inf_dp1_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inf_dp1_tlp_mReqF$enq_1__SEL_1:
	  inf_dp1_tlp_mReqF$D_IN = MUX_inf_dp1_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta:
	  inf_dp1_tlp_mReqF$D_IN = MUX_inf_dp1_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg:
	  inf_dp1_tlp_mReqF$D_IN = MUX_inf_dp1_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta:
	  inf_dp1_tlp_mReqF$D_IN = MUX_inf_dp1_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader:
	  inf_dp1_tlp_mReqF$D_IN = MUX_inf_dp1_tlp_mReqF$enq_1__VAL_5;
      MUX_inf_dp1_tlp_mReqF$enq_1__SEL_6:
	  inf_dp1_tlp_mReqF$D_IN = MUX_inf_dp1_tlp_mReqF$enq_1__VAL_6;
      default: inf_dp1_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_inf_dp1_tlp_tlpRcv &&
	     inf_dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_ETC___d3254 ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta ;
  assign inf_dp1_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstReq &&
	     inf_dp1_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextReq &&
	     inf_dp1_tlp_readRemainDWLen_500_ULE_4___d3501 ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeData ||
	     WILL_FIRE_RL_inf_dp1_tlp_writeReq ;
  assign inf_dp1_tlp_mReqF$CLR = 1'b0 ;

  // submodule inf_dp1_tlp_mRespF
  assign inf_dp1_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp ?
	       MUX_inf_dp1_tlp_mRespF$enq_1__VAL_1 :
	       MUX_inf_dp1_tlp_mRespF$enq_1__VAL_2 ;
  assign inf_dp1_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp ;
  assign inf_dp1_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead ;
  assign inf_dp1_tlp_mRespF$CLR = 1'b0 ;

  // submodule inf_dp1_tlp_outF
  always@(WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_6 or
	  MUX_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3 or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_7 or
	  MUX_inf_dp1_tlp_outF$enq_1__SEL_8 or
	  MUX_inf_dp1_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_6;
      MUX_inf_dp1_tlp_tlpXmtBusy$write_1__PSEL_3:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_7;
      MUX_inf_dp1_tlp_outF$enq_1__SEL_8:
	  inf_dp1_tlp_outF$D_IN = MUX_inf_dp1_tlp_outF$enq_1__VAL_8;
      default: inf_dp1_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign inf_dp1_tlp_outF$ENQ =
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_inf_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent ;
  assign inf_dp1_tlp_outF$DEQ = CAN_FIRE_RL_inf_ClientServerResponse_4 ;
  assign inf_dp1_tlp_outF$CLR = 1'b0 ;

  // submodule inf_dp1_tlp_readReq
  assign inf_dp1_tlp_readReq$D_IN = inf_dp1_tlp_mReqF$D_OUT[59:0] ;
  assign inf_dp1_tlp_readReq$ENQ = CAN_FIRE_RL_inf_dp1_tlp_read_FirstReq ;
  assign inf_dp1_tlp_readReq$DEQ =
	     WILL_FIRE_RL_inf_dp1_tlp_read_NextResp &&
	     inf_dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 ||
	     WILL_FIRE_RL_inf_dp1_tlp_read_FirstResp &&
	     inf_dp1_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign inf_dp1_tlp_readReq$CLR = 1'b0 ;

  // submodule inf_dp1_wci_reqF
  assign inf_dp1_wci_reqF$D_IN = inf_dp1_wci_wciReq$wget ;
  assign inf_dp1_wci_reqF$ENQ = CAN_FIRE_RL_inf_dp1_wci_reqF_enq ;
  assign inf_dp1_wci_reqF$DEQ = inf_dp1_wci_reqF_r_deq$whas ;
  assign inf_dp1_wci_reqF$CLR = 1'b0 ;

  // submodule inf_dp1_wmi_wmi_dhF
  assign inf_dp1_wmi_wmi_dhF$D_IN = inf_dp1_wmi_wmi_wmiDh$wget ;
  assign inf_dp1_wmi_wmi_dhF$ENQ =
	     MUX_inf_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_dhF$DEQ = WILL_FIRE_RL_inf_dp1_wmi_doWriteReq ;
  assign inf_dp1_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule inf_dp1_wmi_wmi_mFlagF
  assign inf_dp1_wmi_wmi_mFlagF$D_IN = inf_dp1_wmi_wmi_wmiMFlag$wget ;
  assign inf_dp1_wmi_wmi_mFlagF$ENQ =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign inf_dp1_wmi_wmi_mFlagF$DEQ =
	     MUX_inf_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_mFlagF$CLR = 1'b0 ;

  // submodule inf_dp1_wmi_wmi_reqF
  assign inf_dp1_wmi_wmi_reqF$D_IN = inf_dp1_wmi_wmi_wmiReq$wget ;
  assign inf_dp1_wmi_wmi_reqF$ENQ =
	     MUX_inf_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign inf_dp1_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_inf_dp1_wmi_getRequest ;
  assign inf_dp1_wmi_wmi_reqF$CLR = 1'b0 ;

  // submodule inf_itc0_now
  assign inf_itc0_now$sD_IN = inf_cp$cpNow ;
  assign inf_itc0_now$sEN = inf_itc0_now$sRDY ;

  // submodule inf_itc1_now
  assign inf_itc1_now$sD_IN = inf_cp$cpNow ;
  assign inf_itc1_now$sEN = inf_itc1_now$sRDY ;

  // submodule inf_sm0
  assign inf_sm0$c0_response_put = inf_cp$server_response_get ;
  assign inf_sm0$c1_response_put = inf_sm1$s_response_get ;
  assign inf_sm0$s_request_put = server_request_put ;
  assign inf_sm0$EN_s_request_put = EN_server_request_put ;
  assign inf_sm0$EN_s_response_get = EN_server_response_get ;
  assign inf_sm0$EN_c0_request_get = CAN_FIRE_RL_inf_ClientServerRequest ;
  assign inf_sm0$EN_c0_response_put = CAN_FIRE_RL_inf_ClientServerResponse ;
  assign inf_sm0$EN_c1_request_get = CAN_FIRE_RL_inf_ClientServerRequest_1 ;
  assign inf_sm0$EN_c1_response_put = CAN_FIRE_RL_inf_ClientServerResponse_1 ;

  // submodule inf_sm1
  assign inf_sm1$c0_response_put = inf_dp0_tlp_outF$D_OUT ;
  assign inf_sm1$c1_response_put = inf_sm2$s_response_get ;
  assign inf_sm1$s_request_put = inf_sm0$c1_request_get ;
  assign inf_sm1$EN_s_request_put = CAN_FIRE_RL_inf_ClientServerRequest_1 ;
  assign inf_sm1$EN_s_response_get = CAN_FIRE_RL_inf_ClientServerResponse_1 ;
  assign inf_sm1$EN_c0_request_get = CAN_FIRE_RL_inf_ClientServerRequest_2 ;
  assign inf_sm1$EN_c0_response_put = CAN_FIRE_RL_inf_ClientServerResponse_2 ;
  assign inf_sm1$EN_c1_request_get = CAN_FIRE_RL_inf_ClientServerRequest_3 ;
  assign inf_sm1$EN_c1_response_put = CAN_FIRE_RL_inf_ClientServerResponse_3 ;

  // submodule inf_sm2
  assign inf_sm2$c0_response_put = inf_dp1_tlp_outF$D_OUT ;
  assign inf_sm2$c1_response_put = 153'h0 ;
  assign inf_sm2$s_request_put = inf_sm1$c1_request_get ;
  assign inf_sm2$EN_s_request_put = CAN_FIRE_RL_inf_ClientServerRequest_3 ;
  assign inf_sm2$EN_s_response_get = CAN_FIRE_RL_inf_ClientServerResponse_3 ;
  assign inf_sm2$EN_c0_request_get = CAN_FIRE_RL_inf_ClientServerRequest_4 ;
  assign inf_sm2$EN_c0_response_put = CAN_FIRE_RL_inf_ClientServerResponse_4 ;
  assign inf_sm2$EN_c1_request_get = inf_sm2$RDY_c1_request_get ;
  assign inf_sm2$EN_c1_response_put = 1'b0 ;

  // remaining internal signals
  assign IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1190 =
	     (IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1167 ||
	      inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939) &&
	     (IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1177 ||
	      inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940) &&
	     (IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1187 ||
	      inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941) ;
  assign IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3376 =
	     (IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3353 ||
	      inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942) &&
	     (IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3363 ||
	      inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943) &&
	     (IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3373 ||
	      inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276) ;
  assign IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7135 =
	     app_appW2_respF_pwEnqueue$whas ?
	       app_appW2_respF_wDataIn$wget[60:58] :
	       3'd0 ;
  assign IF_app_appW2_respF_wDataIn_whas__900_THEN_app__ETC___d7209 =
	     app_appW2_respF_pwEnqueue$whas ?
	       app_appW2_respF_wDataIn$wget[55:0] :
	       56'd0 ;
  assign IF_app_appW3_wrtSerPos_725_EQ_0_733_OR_app_app_ETC___d5778 =
	     CASE_app_appW3_wrtSerPos_0b1_0_1_1_1_2_1_3_0b1__q2 &&
	     (app_appW3_wrtSerPos != 2'd3 &&
	      app_appW3_wrtSerUnroll != 16'd1 ||
	      CASE_app_appW3_wrtSerPos_NOT_app_appW3_wrtSerP_ETC__q1) ;
  assign IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5763 =
	     { (app_appW3_wrtSerPos == 2'd2) ? 32'h0 : app_appW3_metaWF$D_OUT,
	       (app_appW3_wrtSerPos == 2'd2) ?
		 app_appW3_metaWF$D_OUT :
		 app_appW3_wrtSerStage_2,
	       app_appW3_wrtSerStage_1,
	       app_appW3_wrtSerStage } ;
  assign IF_app_appW3_wrtSerPos_725_EQ_2_735_THEN_0x0_E_ETC___d5792 =
	     { (app_appW3_wrtSerPos == 2'd2) ? 32'h0 : data__h204908,
	       (app_appW3_wrtSerPos == 2'd2) ?
		 data__h204908 :
		 app_appW3_wrtSerStage_2,
	       app_appW3_wrtSerStage_1,
	       app_appW3_wrtSerStage } ;
  assign IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7138 =
	     app_appW4_respF_pwEnqueue$whas ?
	       app_appW4_respF_wDataIn$wget[55:0] :
	       56'd0 ;
  assign IF_app_appW4_respF_wDataIn_whas__532_THEN_app__ETC___d7139 =
	     app_appW4_respF_pwEnqueue$whas ?
	       app_appW4_respF_wDataIn$wget[60:58] :
	       3'd0 ;
  assign IF_inf_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THE_ETC___d1508 =
	     inf_dp0_tlp_readNxtDWAddr[0] ?
	       { inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_inf_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THE_ETC___d1513 =
	     inf_dp0_tlp_readNxtDWAddr[0] ?
	       { inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { inf_dp0_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp0_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1397 =
	     (inf_dp0_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
		inf_dp0_bram_serverAdapterA_outData_enqData$whas) &&
	       inf_dp0_bram_serverAdapterA_outData_outData$whas :
	       IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1389 &&
	       CASE_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q29 ;
  assign IF_inf_dp0_wmi_p4B_806_EQ_0_807_THEN_inf_dp0_b_ETC___d1820 =
	     (inf_dp0_wmi_p4B == 2'd0) ?
	       (inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
		inf_dp0_bram_serverAdapterB_outData_enqData$whas) &&
	       inf_dp0_bram_serverAdapterB_outData_outData$whas :
	       IF_inf_dp0_wmi_p4B_806_EQ_1_809_THEN_inf_dp0_b_ETC___d1815 &&
	       CASE_inf_dp0_wmi_p4B_NOT_inf_dp0_wmi_p4B_EQ_3__ETC__q30 ;
  assign IF_inf_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THE_ETC___d3694 =
	     inf_dp1_tlp_readNxtDWAddr[0] ?
	       { inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24] } :
	       { inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24] } ;
  assign IF_inf_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THE_ETC___d3699 =
	     inf_dp1_tlp_readNxtDWAddr[0] ?
	       { inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24] } :
	       { inf_dp1_bram_serverAdapterA_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_1_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_2_outData_outData$wget[31:24],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[7:0],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[15:8],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[23:16],
		 inf_dp1_bram_serverAdapterA_3_outData_outData$wget[31:24] } ;
  assign IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3583 =
	     (inf_dp1_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
		inf_dp1_bram_serverAdapterA_outData_enqData$whas) &&
	       inf_dp1_bram_serverAdapterA_outData_outData$whas :
	       IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3575 &&
	       CASE_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q31 ;
  assign IF_inf_dp1_wmi_p4B_992_EQ_0_993_THEN_inf_dp1_b_ETC___d4006 =
	     (inf_dp1_wmi_p4B == 2'd0) ?
	       (inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
		inf_dp1_bram_serverAdapterB_outData_enqData$whas) &&
	       inf_dp1_bram_serverAdapterB_outData_outData$whas :
	       IF_inf_dp1_wmi_p4B_992_EQ_1_995_THEN_inf_dp1_b_ETC___d4001 &&
	       CASE_inf_dp1_wmi_p4B_NOT_inf_dp1_wmi_p4B_EQ_3__ETC__q32 ;
  assign NOT_app_appW2_wmi_reqF_c_r_613_EQ_2_632_633_AN_ETC___d4984 =
	     app_appW2_wmi_reqF_c_r != 2'd2 && app_appW2_wmi_operateD &&
	     app_appW2_wmi_peerIsReady &&
	     (!x__h181099 || app_appW2_wmi_mFlagF_c_r != 2'd2) ;
  assign NOT_app_appW3_mesgWF_rRdPtr_639_EQ_app_appW3_m_ETC___d5767 =
	     app_appW3_mesgWF_rRdPtr != app_appW3_mesgWF_rWrPtr ;
  assign NOT_app_appW3_mesgWF_rRdPtr_639_PLUS_2048_695__ETC___d5697 =
	     app_appW3_mesgWF_rRdPtr + 13'd2048 != app_appW3_mesgWF_rWrPtr ;
  assign NOT_app_appW3_wrtSerPos_725_EQ_3_726_727_AND_N_ETC___d5741 =
	     app_appW3_wrtSerPos != 2'd3 &&
	     app_appW3_metaWF$D_OUT[23:0] != 24'd0 ||
	     CASE_app_appW3_wrtSerPos_NOT_app_appW3_wrtSerP_ETC__q1 ;
  assign NOT_app_appW4_wmi_reqF_c_r_249_EQ_2_267_268_AN_ETC___d6616 =
	     app_appW4_wmi_reqF_c_r != 2'd2 && app_appW4_wmi_operateD &&
	     app_appW4_wmi_peerIsReady &&
	     (!x__h228511 || app_appW4_wmi_mFlagF_c_r != 2'd2) ;
  assign NOT_inf_dp0_bml_lclBufDone_944_011_AND_IF_inf__ETC___d2024 =
	     !inf_dp0_bml_lclBufDone &&
	     CASE_inf_dp0_dpControl_BITS_1_TO_0_inf_dp0_bml_ETC__q3 ;
  assign NOT_inf_dp0_tlp_mReqF_first__108_BITS_28_TO_19_ETC___d1299 =
	     (inf_dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	      inf_dp0_tlp_mReqF$EMPTY_N) &&
	     CASE_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q8 ;
  assign NOT_inf_dp0_wmi_wrActive_724_725_OR_NOT_inf_dp_ETC___d1734 =
	     (!inf_dp0_wmi_wrActive || !inf_dp0_wmi_rdActive) &&
	     !inf_dp0_wmi_wrFinalize &&
	     (inf_dp0_wmi_mesgBufReady || inf_dp0_wmi_mesgBusy) ;
  assign NOT_inf_dp1_bml_lclBufDone_130_197_AND_IF_inf__ETC___d4210 =
	     !inf_dp1_bml_lclBufDone &&
	     CASE_inf_dp1_dpControl_BITS_1_TO_0_inf_dp1_bml_ETC__q4 ;
  assign NOT_inf_dp1_tlp_mReqF_first__294_BITS_28_TO_19_ETC___d3485 =
	     (inf_dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ||
	      inf_dp1_tlp_mReqF$EMPTY_N) &&
	     CASE_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q10 ;
  assign NOT_inf_dp1_wmi_wrActive_910_911_OR_NOT_inf_dp_ETC___d3920 =
	     (!inf_dp1_wmi_wrActive || !inf_dp1_wmi_rdActive) &&
	     !inf_dp1_wmi_wrFinalize &&
	     (inf_dp1_wmi_mesgBufReady || inf_dp1_wmi_mesgBusy) ;
  assign _dfoo15 =
	     inf_dp1_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     inf_dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign _dfoo5 =
	     inf_dp0_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     inf_dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign ab__h10955 =
	     (MUX_inf_dp0_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h12485 =
	     (MUX_inf_dp0_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h13882 =
	     (MUX_inf_dp0_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h3702 =
	     (MUX_inf_dp0_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h5101 =
	     (MUX_inf_dp0_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h6631 =
	     (MUX_inf_dp0_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h8028 =
	     (MUX_inf_dp0_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp0_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h82800 =
	     (MUX_inf_dp1_bram_memory$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h84199 =
	     (MUX_inf_dp1_bram_memory$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h85729 =
	     (MUX_inf_dp1_bram_memory_1$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h87126 =
	     (MUX_inf_dp1_bram_memory_1$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h88656 =
	     (MUX_inf_dp1_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h90053 =
	     (MUX_inf_dp1_bram_memory_2$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h91583 =
	     (MUX_inf_dp1_bram_memory_3$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h92980 =
	     (MUX_inf_dp1_bram_memory_3$b_put_1__SEL_1 ||
	      WILL_FIRE_RL_inf_dp1_wmi_reqMetadata) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h9558 =
	     (MUX_inf_dp0_bram_memory_2$a_put_1__SEL_2 ||
	      WILL_FIRE_RL_inf_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign addr__h183245 = { app_appW2_mesgLengthSoFar[11:0], 2'd0 } ;
  assign addr__h205617 = { 9'd0, x__h205675 } ;
  assign addr__h205967 = { 9'd0, x__h206012 } ;
  assign addr__h230657 = { app_appW4_mesgLengthSoFar[11:0], 2'd0 } ;
  assign app_appW2_wmi_operateD_699_AND_app_appW2_wmi_p_ETC___d5079 =
	     app_appW2_wmi_operateD && app_appW2_wmi_peerIsReady &&
	     app_appW2_wsiS_reqFifo$EMPTY_N &&
	     (app_appW2_smaCtrl[3:0] != 4'h3 ||
	      app_appW2_wsiM_reqFifo_c_r != 2'd2) ;
  assign app_appW2_wmi_respF_i_notEmpty__996_AND_app_ap_ETC___d5001 =
	     app_appW2_wmi_respF$EMPTY_N &&
	     (app_appW2_smaCtrl[4] ||
	      app_appW2_respF_rRdPtr + 12'd1024 != app_appW2_respF_rWrPtr) ;
  assign app_appW2_wsiS_reqFifo_i_notEmpty__931_AND_NOT_ETC___d5098 =
	     app_appW2_wsiS_reqFifo$EMPTY_N &&
	     (app_appW2_smaCtrl[3:0] != 4'h3 ||
	      app_appW2_wsiM_reqFifo_c_r != 2'd2) &&
	     (!app_appW2_wsiS_reqFifo$D_OUT[57] ||
	      app_appW2_wmi_mFlagF_c_r != 2'd2) ;
  assign app_appW3_bytesWritten_721_ULT_app_appW3_dlyHo_ETC___d7124 =
	     app_appW3_bytesWritten < app_appW3_dlyHoldoffBytes ;
  assign app_appW3_cyclesPassed_691_ULT_app_appW3_dlyHo_ETC___d7130 =
	     app_appW3_cyclesPassed < app_appW3_dlyHoldoffCycles ;
  assign app_appW3_dlyWordsStored_value_652_SLE_0_799_O_ETC___d5807 =
	     app_appW3_dlyWordsStored_value_652_SLE_0___d7123 ||
	     app_appW3_bytesWritten_721_ULT_app_appW3_dlyHo_ETC___d7124 ||
	     app_appW3_cyclesPassed_691_ULT_app_appW3_dlyHo_ETC___d7130 ||
	     app_appW3_wsiM_reqFifo_c_r == 2'd2 ||
	     app_appW3_tog50 ;
  assign app_appW3_dlyWordsStored_value_652_SLE_0___d7123 =
	     (app_appW3_dlyWordsStored_value ^ 25'h1000000) <= 25'd16777216 ;
  assign app_appW3_dlyWordsStored_value_652_SLT_8388608___d5809 =
	     (app_appW3_dlyWordsStored_value ^ 25'h1000000) < 25'd25165824 ;
  assign app_appW3_mesgLengthSoFar_708_PLUS_1___d7934 =
	     app_appW3_mesgLengthSoFar + 14'd1 ;
  assign app_appW3_mesgRF_i_notFull__906_AND_NOT_app_ap_ETC___d5907 =
	     app_appW3_mesgRF$FULL_N &&
	     (!app_appW3_rdSerEmpty && app_appW3_rdSerPos != 2'd0 ||
	      app_appW3_wide16Fc$EMPTY_N) ;
  assign app_appW3_metaRF_i_notFull__855_AND_NOT_app_ap_ETC___d5866 =
	     app_appW3_metaRF$FULL_N &&
	     (!app_appW3_rdSerEmpty && app_appW3_rdSerPos != 2'd0 ||
	      app_appW3_wide16Fc$EMPTY_N) ;
  assign app_appW3_wci_cState_310_EQ_2_321_AND_app_appW_ETC___d5827 =
	     app_appW3_wci_cState == 3'd2 && app_appW3_dlyCtrl[3:0] == 4'h7 &&
	     !app_appW3_dlyWordsStored_value_652_SLE_0___d7123 &&
	     !app_appW3_bytesWritten_721_ULT_app_appW3_dlyHo_ETC___d7124 &&
	     !app_appW3_cyclesPassed_691_ULT_app_appW3_dlyHo_ETC___d7130 ;
  assign app_appW3_wrtSerPos_725_PLUS_1___d7933 = app_appW3_wrtSerPos + 2'd1 ;
  assign app_appW3_wsiS_reqFifo_notFull__414_AND_app_ap_ETC___d5436 =
	     app_appW3_wsiS_reqFifo$FULL_N &&
	     (app_appW3_wsiS_burstKind == 2'd0 ||
	      (app_appW3_wsiS_burstKind == 2'd1 ||
	       app_appW3_wsiS_burstKind == 2'd2) &&
	      app_appW3_wsiS_wsiReq$wget[57]) ;
  assign app_appW4_wmi_operateD_333_AND_app_appW4_wmi_p_ETC___d6711 =
	     app_appW4_wmi_operateD && app_appW4_wmi_peerIsReady &&
	     app_appW4_wsiS_reqFifo$EMPTY_N &&
	     (app_appW4_smaCtrl[3:0] != 4'h3 ||
	      app_appW4_wsiM_reqFifo_c_r != 2'd2) ;
  assign app_appW4_wmi_respF_i_notEmpty__628_AND_app_ap_ETC___d6633 =
	     app_appW4_wmi_respF$EMPTY_N &&
	     (app_appW4_smaCtrl[4] ||
	      app_appW4_respF_rRdPtr + 12'd1024 != app_appW4_respF_rWrPtr) ;
  assign app_appW4_wsiS_reqFifo_i_notEmpty__563_AND_NOT_ETC___d6730 =
	     app_appW4_wsiS_reqFifo$EMPTY_N &&
	     (app_appW4_smaCtrl[3:0] != 4'h3 ||
	      app_appW4_wsiM_reqFifo_c_r != 2'd2) &&
	     (!app_appW4_wsiS_reqFifo$D_OUT[57] ||
	      app_appW4_wmi_mFlagF_c_r != 2'd2) ;
  assign app_appW4_wsiS_reqFifo_notFull__465_AND_app_ap_ETC___d6487 =
	     app_appW4_wsiS_reqFifo$FULL_N &&
	     (app_appW4_wsiS_burstKind == 2'd0 ||
	      (app_appW4_wsiS_burstKind == 2'd1 ||
	       app_appW4_wsiS_burstKind == 2'd2) &&
	      app_appW4_wsiS_wsiReq$wget[57]) ;
  assign b__h177740 = -app_appW2_fabWordsCurReq[11:0] ;
  assign b__h180928 =
	     { {2{app_appW2_fabRespCredit_value[11]}},
	       app_appW2_fabRespCredit_value } ;
  assign b__h225152 = -app_appW4_fabWordsCurReq[11:0] ;
  assign b__h228340 =
	     { {2{app_appW4_fabRespCredit_value[11]}},
	       app_appW4_fabRespCredit_value } ;
  assign bl__h182501 = app_appW2_zeroLengthMesg ? 12'd1 : x__h182412[13:2] ;
  assign bl__h229913 = app_appW4_zeroLengthMesg ? 12'd1 : x__h229824[13:2] ;
  assign btm__h203796 =
	     { app_appW3_wsiS_reqFifo$D_OUT[56] ?
		 { 10'd0, app_appW3_wsiS_reqFifo$D_OUT[55:44] } :
		 { 8'd0, app_appW3_mesgLengthSoFar_708_PLUS_1___d7934 },
	       2'd0 } ;
  assign byteCount__h133803 = x__h133914 - y__h133915 ;
  assign byteCount__h54740 = x__h54851 - y__h54852 ;
  assign data__h204908 =
	     (app_appW3_mesgWF_rCache[45] &&
	      app_appW3_mesgWF_rCache[44:32] == app_appW3_mesgWF_rRdPtr) ?
	       app_appW3_mesgWF_rCache[31:0] :
	       app_appW3_mesgWF_memory$DOB ;
  assign delayStatus__h208247 =
	     { 14'h0,
	       !app_appW3_dlyWordsStored_value_652_SLE_0___d7123 &&
	       !app_appW3_bytesWritten_721_ULT_app_appW3_dlyHo_ETC___d7124 &&
	       !app_appW3_cyclesPassed_691_ULT_app_appW3_dlyHo_ETC___d7130,
	       app_appW3_dlyWordsStored_value_652_SLE_0_799_O_ETC___d5807,
	       app_appW3_dlyWordsStored_value_652_SLT_8388608___d5809,
	       app_appW3_wsiM_reqFifo_c_r != 2'd2,
	       app_appW3_metaWF$FULL_N,
	       app_appW3_metaWF$EMPTY_N,
	       NOT_app_appW3_mesgWF_rRdPtr_639_PLUS_2048_695__ETC___d5697,
	       NOT_app_appW3_mesgWF_rRdPtr_639_EQ_app_appW3_m_ETC___d5767,
	       app_appW3_metaRF$FULL_N,
	       app_appW3_metaRF$EMPTY_N,
	       app_appW3_mesgRF$FULL_N,
	       app_appW3_mesgRF$EMPTY_N,
	       app_appW3_wide16Fa$FULL_N,
	       app_appW3_wide16Fa$EMPTY_N,
	       app_appW3_wide16Fb$FULL_N,
	       app_appW3_wide16Fb$EMPTY_N,
	       app_appW3_wide16Fc$FULL_N,
	       app_appW3_wide16Fc$EMPTY_N } ;
  assign idx__h124624 = 2'd0 - inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h126847 = 2'd1 - inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h128143 = 2'd2 - inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h129439 = 2'd3 - inf_dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h131687 = 2'd0 - inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h132155 = 2'd1 - inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h132528 = 2'd2 - inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h132901 = 2'd3 - inf_dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h45561 = 2'd0 - inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h47784 = 2'd1 - inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h49080 = 2'd2 - inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h50376 = 2'd3 - inf_dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h52624 = 2'd0 - inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h53092 = 2'd1 - inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h53465 = 2'd2 - inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h53838 = 2'd3 - inf_dp0_tlp_readNxtDWAddr[1:0] ;
  assign inf_dp0_bml_crdBuf_value_902_EQ_inf_dp0_bml_cr_ETC___d7224 =
	     inf_dp0_bml_crdBuf_value == inf_dp0_bml_crdBuf_modulus ;
  assign inf_dp0_bml_fabBuf_value_887_EQ_inf_dp0_bml_fa_ETC___d8127 =
	     inf_dp0_bml_fabBuf_value == inf_dp0_bml_fabBuf_modulus ;
  assign inf_dp0_bml_fabFlowAddr_959_PLUS_inf_dp0_bml_f_ETC___d7931 =
	     inf_dp0_bml_fabFlowAddr + inf_dp0_bml_fabFlowSize ;
  assign inf_dp0_bml_lclBufDone_944_AND_IF_inf_dp0_bml__ETC___d7164 =
	     inf_dp0_bml_lclBufDone &&
	     CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q11 ;
  assign inf_dp0_bml_lclBuf_value_857_EQ_inf_dp0_bml_lc_ETC___d8137 =
	     inf_dp0_bml_lclBuf_value == inf_dp0_bml_lclBuf_modulus ;
  assign inf_dp0_bml_remBuf_value_872_EQ_inf_dp0_bml_re_ETC___d7215 =
	     inf_dp0_bml_remBuf_value == inf_dp0_bml_remBuf_modulus ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_44_PLUS_IF_i_ETC___d150 =
	     inf_dp0_bram_serverAdapterA_1_cnt +
	     (inf_dp0_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939 =
	     (inf_dp0_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_62_PLUS_IF_i_ETC___d268 =
	     inf_dp0_bram_serverAdapterA_2_cnt +
	     (inf_dp0_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940 =
	     (inf_dp0_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_2_outDataCore_notE_ETC___d1468 =
	     (inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterA_3_outData_enqData$whas) &&
	     inf_dp0_bram_serverAdapterA_outData_outData_wh_ETC___d1466 ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_80_PLUS_IF_i_ETC___d386 =
	     inf_dp0_bram_serverAdapterA_3_cnt +
	     (inf_dp0_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941 =
	     (inf_dp0_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_cnt_6_PLUS_IF_inf__ETC___d32 =
	     inf_dp0_bram_serverAdapterA_cnt +
	     (inf_dp0_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterA_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110 =
	     (inf_dp0_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_bram_serverAdapterA_outDataCore_notEmp_ETC___d1470 =
	     (inf_dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterA_outData_enqData$whas) &&
	     (inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterA_1_outData_enqData$whas) &&
	     inf_dp0_bram_serverAdapterA_2_outDataCore_notE_ETC___d1468 ;
  assign inf_dp0_bram_serverAdapterA_outData_outData_wh_ETC___d1466 =
	     inf_dp0_bram_serverAdapterA_outData_outData$whas &&
	     inf_dp0_bram_serverAdapterA_1_outData_outData$whas &&
	     inf_dp0_bram_serverAdapterA_2_outData_outData$whas &&
	     inf_dp0_bram_serverAdapterA_3_outData_outData$whas &&
	     inf_dp0_tlp_mRespF$FULL_N &&
	     (!inf_dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 ||
	      inf_dp0_tlp_readReq$EMPTY_N) ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_03_PLUS_IF_i_ETC___d209 =
	     inf_dp0_bram_serverAdapterB_1_cnt +
	     (inf_dp0_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 =
	     (inf_dp0_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_bram_serverAdapterB_1_outData_outData__ETC___d1693 =
	     inf_dp0_bram_serverAdapterB_1_outData_outData$whas &&
	     (inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterB_2_outData_enqData$whas) &&
	     inf_dp0_bram_serverAdapterB_2_outData_outData$whas &&
	     (inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterB_3_outData_enqData$whas) &&
	     inf_dp0_bram_serverAdapterB_3_outData_outData$whas ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_21_PLUS_IF_i_ETC___d327 =
	     inf_dp0_bram_serverAdapterB_2_cnt +
	     (inf_dp0_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666 =
	     (inf_dp0_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_39_PLUS_IF_i_ETC___d445 =
	     inf_dp0_bram_serverAdapterB_3_cnt +
	     (inf_dp0_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 =
	     (inf_dp0_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_bram_serverAdapterB_cnt_5_PLUS_IF_inf__ETC___d91 =
	     inf_dp0_bram_serverAdapterB_cnt +
	     (inf_dp0_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp0_bram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 =
	     (inf_dp0_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp0_tlp_dmaPullRemainDWLen_001_ULE_inf_dp0_ETC___d7935 =
	     inf_dp0_tlp_dmaPullRemainDWLen <=
	     inf_dp0_tlp_dmaPullRemainDWSub ;
  assign inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936 =
	     inf_dp0_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d1040 =
	     inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_fabMeta[128] &&
	     !inf_dp0_tlp_tlpXmtBusy &&
	     inf_dp0_tlp_dmaDoTailEvent &&
	     inf_dp0_tlp_postSeqDwell == 4'd0 &&
	     inf_dp0_tlp_mesgComplReceived == inf_dp0_tlp_fabMeta[112:96] ;
  assign inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d654 =
	     inf_dp0_dpControl[3:2] == 2'd1 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     !inf_dp0_tlp_tlpRcvBusy &&
	     !inf_dp0_tlp_reqMetaInFlight &&
	     !inf_dp0_tlp_fabMeta[128] &&
	     inf_dp0_tlp_nearBufReady &&
	     inf_dp0_tlp_farBufReady &&
	     inf_dp0_tlp_postSeqDwell == 4'd0 ;
  assign inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d877 =
	     inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     !inf_dp0_tlp_tlpXmtBusy &&
	     !inf_dp0_tlp_reqMetaInFlight &&
	     !inf_dp0_tlp_reqMetaBodyInFlight &&
	     !inf_dp0_tlp_fabMeta[128] &&
	     inf_dp0_tlp_nearBufReady &&
	     inf_dp0_tlp_farBufReady ;
  assign inf_dp0_tlp_dpControl_wget__32_BITS_3_TO_2_33__ETC___d910 =
	     inf_dp0_dpControl[3:2] == 2'd2 &&
	     inf_dp0_dpControl[1:0] == 2'd1 &&
	     inf_dp0_tlp_reqMetaInFlight &&
	     !inf_dp0_tlp_tlpRcvBusy &&
	     tagm__h40263 == inf_dp0_tlp_inF$D_OUT[47:40] &&
	     inf_dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ__ETC___d908 ;
  assign inf_dp0_tlp_inF_first__96_BITS_63_TO_56_99_EQ__ETC___d908 =
	     inf_dp0_tlp_inF$D_OUT[63:56] == pciDevice[15:8] &&
	     inf_dp0_tlp_inF$D_OUT[55:51] == pciDevice[7:3] &&
	     inf_dp0_tlp_inF$D_OUT[50:48] == 3'd0 ;
  assign inf_dp0_tlp_inF_first__96_BIT_152_043_AND_NOT__ETC___d1068 =
	     inf_dp0_tlp_inF$D_OUT[152] && !inf_dp0_tlp_inF$D_OUT[110] &&
	     !inf_dp0_tlp_inF$D_OUT[125] &&
	     inf_dp0_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !inf_dp0_tlp_inF$D_OUT[152] && !inf_dp0_tlp_inIgnorePkt ;
  assign inf_dp0_tlp_mReqF_RDY_deq__107_AND_IF_inf_dp0__ETC___d1123 =
	     inf_dp0_tlp_mReqF$EMPTY_N &&
	     CASE_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q7 ;
  assign inf_dp0_tlp_mRespF_first__64_BITS_71_TO_62_54__ETC___d7113 =
	     inf_dp0_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign inf_dp0_tlp_outDwRemain_81_ULE_4___d7502 =
	     inf_dp0_tlp_outDwRemain <= 10'd4 ;
  assign inf_dp0_tlp_rdRespDwRemain_458_ULE_4___d1459 =
	     inf_dp0_tlp_rdRespDwRemain <= 10'd4 ;
  assign inf_dp0_tlp_readNxtDWAddr_PLUS_1__q18 =
	     inf_dp0_tlp_readNxtDWAddr + 13'd1 ;
  assign inf_dp0_tlp_readNxtDWAddr_PLUS_2__q19 =
	     inf_dp0_tlp_readNxtDWAddr + 13'd2 ;
  assign inf_dp0_tlp_readNxtDWAddr_PLUS_3__q17 =
	     inf_dp0_tlp_readNxtDWAddr + 13'd3 ;
  assign inf_dp0_tlp_readRemainDWLen_314_ULE_4___d1315 =
	     inf_dp0_tlp_readRemainDWLen <= 10'd4 ;
  assign inf_dp0_tlp_writeDWAddr_PLUS_1__q15 =
	     inf_dp0_tlp_writeDWAddr + 13'd1 ;
  assign inf_dp0_tlp_writeDWAddr_PLUS_2__q16 =
	     inf_dp0_tlp_writeDWAddr + 13'd2 ;
  assign inf_dp0_tlp_writeDWAddr_PLUS_3__q14 =
	     inf_dp0_tlp_writeDWAddr + 13'd3 ;
  assign inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 =
	     inf_dp0_tlp_writeRemainDWLen <= 10'd1 ;
  assign inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065 =
	     inf_dp0_tlp_writeRemainDWLen <= 10'd2 ;
  assign inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 =
	     inf_dp0_tlp_writeRemainDWLen <= 10'd3 ;
  assign inf_dp0_wmi_dpControl_whas__651_AND_inf_dp0_br_ETC___d1697 =
	     (inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterB_outData_enqData$whas) &&
	     inf_dp0_bram_serverAdapterB_outData_outData$whas &&
	     (inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterB_1_outData_enqData$whas) &&
	     inf_dp0_bram_serverAdapterB_1_outData_outData__ETC___d1693 ;
  assign inf_dp1_bml_crdBuf_value_088_EQ_inf_dp1_bml_cr_ETC___d8183 =
	     inf_dp1_bml_crdBuf_value == inf_dp1_bml_crdBuf_modulus ;
  assign inf_dp1_bml_fabBuf_value_073_EQ_inf_dp1_bml_fa_ETC___d8184 =
	     inf_dp1_bml_fabBuf_value == inf_dp1_bml_fabBuf_modulus ;
  assign inf_dp1_bml_fabFlowAddr_145_PLUS_inf_dp1_bml_f_ETC___d7932 =
	     inf_dp1_bml_fabFlowAddr + inf_dp1_bml_fabFlowSize ;
  assign inf_dp1_bml_lclBufDone_130_AND_IF_inf_dp1_bml__ETC___d7192 =
	     inf_dp1_bml_lclBufDone &&
	     CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q12 ;
  assign inf_dp1_bml_lclBuf_value_043_EQ_inf_dp1_bml_lc_ETC___d8197 =
	     inf_dp1_bml_lclBuf_value == inf_dp1_bml_lclBuf_modulus ;
  assign inf_dp1_bml_remBuf_value_058_EQ_inf_dp1_bml_re_ETC___d8198 =
	     inf_dp1_bml_remBuf_value == inf_dp1_bml_remBuf_modulus ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_336_PLUS_IF__ETC___d2342 =
	     inf_dp1_bram_serverAdapterA_1_cnt +
	     (inf_dp1_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942 =
	     (inf_dp1_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_454_PLUS_IF__ETC___d2460 =
	     inf_dp1_bram_serverAdapterA_2_cnt +
	     (inf_dp1_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943 =
	     (inf_dp1_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_2_outDataCore_notE_ETC___d3654 =
	     (inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterA_2_outData_enqData$whas) &&
	     (inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterA_3_outData_enqData$whas) &&
	     inf_dp1_bram_serverAdapterA_outData_outData_wh_ETC___d3652 ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_572_PLUS_IF__ETC___d2578 =
	     inf_dp1_bram_serverAdapterA_3_cnt +
	     (inf_dp1_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276 =
	     (inf_dp1_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_cnt_218_PLUS_IF_in_ETC___d2224 =
	     inf_dp1_bram_serverAdapterA_cnt +
	     (inf_dp1_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterA_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313 =
	     (inf_dp1_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_bram_serverAdapterA_outDataCore_notEmp_ETC___d3656 =
	     (inf_dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterA_outData_enqData$whas) &&
	     (inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterA_1_outData_enqData$whas) &&
	     inf_dp1_bram_serverAdapterA_2_outDataCore_notE_ETC___d3654 ;
  assign inf_dp1_bram_serverAdapterA_outData_outData_wh_ETC___d3652 =
	     inf_dp1_bram_serverAdapterA_outData_outData$whas &&
	     inf_dp1_bram_serverAdapterA_1_outData_outData$whas &&
	     inf_dp1_bram_serverAdapterA_2_outData_outData$whas &&
	     inf_dp1_bram_serverAdapterA_3_outData_outData$whas &&
	     inf_dp1_tlp_mRespF$FULL_N &&
	     (!inf_dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 ||
	      inf_dp1_tlp_readReq$EMPTY_N) ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_395_PLUS_IF__ETC___d2401 =
	     inf_dp1_bram_serverAdapterB_1_cnt +
	     (inf_dp1_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 =
	     (inf_dp1_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_bram_serverAdapterB_1_outData_outData__ETC___d3879 =
	     inf_dp1_bram_serverAdapterB_1_outData_outData$whas &&
	     (inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterB_2_outData_enqData$whas) &&
	     inf_dp1_bram_serverAdapterB_2_outData_outData$whas &&
	     (inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterB_3_outData_enqData$whas) &&
	     inf_dp1_bram_serverAdapterB_3_outData_outData$whas ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_513_PLUS_IF__ETC___d2519 =
	     inf_dp1_bram_serverAdapterB_2_cnt +
	     (inf_dp1_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852 =
	     (inf_dp1_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_631_PLUS_IF__ETC___d2637 =
	     inf_dp1_bram_serverAdapterB_3_cnt +
	     (inf_dp1_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 =
	     (inf_dp1_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_bram_serverAdapterB_cnt_277_PLUS_IF_in_ETC___d2283 =
	     inf_dp1_bram_serverAdapterB_cnt +
	     (inf_dp1_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (inf_dp1_bram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign inf_dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 =
	     (inf_dp1_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign inf_dp1_tlp_dmaPullRemainDWLen_187_ULE_inf_dp1_ETC___d7937 =
	     inf_dp1_tlp_dmaPullRemainDWLen <=
	     inf_dp1_tlp_dmaPullRemainDWSub ;
  assign inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938 =
	     inf_dp1_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d2845 =
	     inf_dp1_dpControl[3:2] == 2'd1 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     !inf_dp1_tlp_tlpRcvBusy &&
	     !inf_dp1_tlp_reqMetaInFlight &&
	     !inf_dp1_tlp_fabMeta[128] &&
	     inf_dp1_tlp_nearBufReady &&
	     inf_dp1_tlp_farBufReady &&
	     inf_dp1_tlp_postSeqDwell == 4'd0 ;
  assign inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3065 =
	     inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     !inf_dp1_tlp_tlpXmtBusy &&
	     !inf_dp1_tlp_reqMetaInFlight &&
	     !inf_dp1_tlp_reqMetaBodyInFlight &&
	     !inf_dp1_tlp_fabMeta[128] &&
	     inf_dp1_tlp_nearBufReady &&
	     inf_dp1_tlp_farBufReady ;
  assign inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3096 =
	     inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_reqMetaInFlight &&
	     !inf_dp1_tlp_tlpRcvBusy &&
	     tagm__h119326 == inf_dp1_tlp_inF$D_OUT[47:40] &&
	     inf_dp1_tlp_inF_first__084_BITS_63_TO_56_087_E_ETC___d3094 ;
  assign inf_dp1_tlp_dpControl_wget__823_BITS_3_TO_2_82_ETC___d3226 =
	     inf_dp1_dpControl[3:2] == 2'd2 &&
	     inf_dp1_dpControl[1:0] == 2'd1 &&
	     inf_dp1_tlp_fabMeta[128] &&
	     !inf_dp1_tlp_tlpXmtBusy &&
	     inf_dp1_tlp_dmaDoTailEvent &&
	     inf_dp1_tlp_postSeqDwell == 4'd0 &&
	     inf_dp1_tlp_mesgComplReceived == inf_dp1_tlp_fabMeta[112:96] ;
  assign inf_dp1_tlp_inF_first__084_BITS_63_TO_56_087_E_ETC___d3094 =
	     inf_dp1_tlp_inF$D_OUT[63:56] == pciDevice[15:8] &&
	     inf_dp1_tlp_inF$D_OUT[55:51] == pciDevice[7:3] &&
	     inf_dp1_tlp_inF$D_OUT[50:48] == 3'd1 ;
  assign inf_dp1_tlp_inF_first__084_BIT_152_229_AND_NOT_ETC___d3254 =
	     inf_dp1_tlp_inF$D_OUT[152] && !inf_dp1_tlp_inF$D_OUT[110] &&
	     !inf_dp1_tlp_inF$D_OUT[125] &&
	     inf_dp1_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !inf_dp1_tlp_inF$D_OUT[152] && !inf_dp1_tlp_inIgnorePkt ;
  assign inf_dp1_tlp_mReqF_RDY_deq__293_AND_IF_inf_dp1__ETC___d3309 =
	     inf_dp1_tlp_mReqF$EMPTY_N &&
	     CASE_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q9 ;
  assign inf_dp1_tlp_mRespF_first__854_BITS_71_TO_62_94_ETC___d7115 =
	     inf_dp1_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign inf_dp1_tlp_outDwRemain_970_ULE_4___d7507 =
	     inf_dp1_tlp_outDwRemain <= 10'd4 ;
  assign inf_dp1_tlp_rdRespDwRemain_644_ULE_4___d3645 =
	     inf_dp1_tlp_rdRespDwRemain <= 10'd4 ;
  assign inf_dp1_tlp_readNxtDWAddr_PLUS_1__q26 =
	     inf_dp1_tlp_readNxtDWAddr + 13'd1 ;
  assign inf_dp1_tlp_readNxtDWAddr_PLUS_2__q27 =
	     inf_dp1_tlp_readNxtDWAddr + 13'd2 ;
  assign inf_dp1_tlp_readNxtDWAddr_PLUS_3__q25 =
	     inf_dp1_tlp_readNxtDWAddr + 13'd3 ;
  assign inf_dp1_tlp_readRemainDWLen_500_ULE_4___d3501 =
	     inf_dp1_tlp_readRemainDWLen <= 10'd4 ;
  assign inf_dp1_tlp_writeDWAddr_PLUS_1__q23 =
	     inf_dp1_tlp_writeDWAddr + 13'd1 ;
  assign inf_dp1_tlp_writeDWAddr_PLUS_2__q24 =
	     inf_dp1_tlp_writeDWAddr + 13'd2 ;
  assign inf_dp1_tlp_writeDWAddr_PLUS_3__q22 =
	     inf_dp1_tlp_writeDWAddr + 13'd3 ;
  assign inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 =
	     inf_dp1_tlp_writeRemainDWLen <= 10'd1 ;
  assign inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133 =
	     inf_dp1_tlp_writeRemainDWLen <= 10'd2 ;
  assign inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 =
	     inf_dp1_tlp_writeRemainDWLen <= 10'd3 ;
  assign inf_dp1_wmi_dpControl_whas__837_AND_inf_dp1_br_ETC___d3883 =
	     (inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterB_outData_enqData$whas) &&
	     inf_dp1_bram_serverAdapterB_outData_outData$whas &&
	     (inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterB_1_outData_enqData$whas) &&
	     inf_dp1_bram_serverAdapterB_1_outData_outData__ETC___d3879 ;
  assign lastBE__h106523 =
	     inf_dp1_tlp_mRespF_first__854_BITS_71_TO_62_94_ETC___d7115 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h119227 =
	     (thisRequestLength__h118925[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lastBE__h27452 =
	     inf_dp0_tlp_mRespF_first__64_BITS_71_TO_62_54__ETC___d7113 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h40164 =
	     (thisRequestLength__h39862[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lowAddr__h133802 =
	     { inf_dp1_tlp_readReq$D_OUT[33:29], lowAddr10__h133801 } ;
  assign lowAddr__h54739 =
	     { inf_dp0_tlp_readReq$D_OUT[33:29], lowAddr10__h54738 } ;
  assign mesgMetaF_length__h182639 = { 10'd0, x__h182412 } ;
  assign mesgMetaF_length__h183375 = { 10'd0, mlp1B__h183229 } ;
  assign mesgMetaF_length__h230051 = { 10'd0, x__h229824 } ;
  assign mesgMetaF_length__h230787 = { 10'd0, mlp1B__h230641 } ;
  assign mesgMeta_opcode__h150004 =
	     { 24'h800000, inf_dp1_wmi_wmi_mFlagReg[31:24] } ;
  assign mesgMeta_opcode__h70941 =
	     { 24'h800000, inf_dp0_wmi_wmi_mFlagReg[31:24] } ;
  assign mlp1B__h183229 = { mlp1__h183228[11:0], 2'd0 } ;
  assign mlp1B__h230641 = { mlp1__h230640[11:0], 2'd0 } ;
  assign mlp1__h183228 = app_appW2_mesgLengthSoFar + 14'd1 ;
  assign mlp1__h230640 = app_appW4_mesgLengthSoFar + 14'd1 ;
  assign nowLS__h102881 =
	     { inf_dp1_tlp_mRespF$D_OUT[39:32],
	       inf_dp1_tlp_mRespF$D_OUT[47:40],
	       inf_dp1_tlp_mRespF$D_OUT[55:48],
	       inf_dp1_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h115715 =
	     { inf_dp1_tlp_inF$D_OUT[39:32],
	       inf_dp1_tlp_inF$D_OUT[47:40],
	       inf_dp1_tlp_inF$D_OUT[55:48],
	       inf_dp1_tlp_inF$D_OUT[63:56] } ;
  assign nowLS__h23810 =
	     { inf_dp0_tlp_mRespF$D_OUT[39:32],
	       inf_dp0_tlp_mRespF$D_OUT[47:40],
	       inf_dp0_tlp_mRespF$D_OUT[55:48],
	       inf_dp0_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h36652 =
	     { inf_dp0_tlp_inF$D_OUT[39:32],
	       inf_dp0_tlp_inF$D_OUT[47:40],
	       inf_dp0_tlp_inF$D_OUT[55:48],
	       inf_dp0_tlp_inF$D_OUT[63:56] } ;
  assign nowMS__h102880 =
	     { inf_dp1_tlp_mRespF$D_OUT[71:64],
	       inf_dp1_tlp_mRespF$D_OUT[79:72],
	       inf_dp1_tlp_mRespF$D_OUT[87:80],
	       inf_dp1_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h115714 =
	     { inf_dp1_tlp_inF$D_OUT[71:64],
	       inf_dp1_tlp_inF$D_OUT[79:72],
	       inf_dp1_tlp_inF$D_OUT[87:80],
	       inf_dp1_tlp_inF$D_OUT[95:88] } ;
  assign nowMS__h23809 =
	     { inf_dp0_tlp_mRespF$D_OUT[71:64],
	       inf_dp0_tlp_mRespF$D_OUT[79:72],
	       inf_dp0_tlp_mRespF$D_OUT[87:80],
	       inf_dp0_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h36651 =
	     { inf_dp0_tlp_inF$D_OUT[71:64],
	       inf_dp0_tlp_inF$D_OUT[79:72],
	       inf_dp0_tlp_inF$D_OUT[87:80],
	       inf_dp0_tlp_inF$D_OUT[95:88] } ;
  assign opcode__h102879 =
	     { inf_dp1_tlp_mRespF$D_OUT[103:96],
	       inf_dp1_tlp_mRespF$D_OUT[111:104],
	       inf_dp1_tlp_mRespF$D_OUT[119:112],
	       inf_dp1_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h115713 =
	     { inf_dp1_tlp_inF$D_OUT[103:96],
	       inf_dp1_tlp_inF$D_OUT[111:104],
	       inf_dp1_tlp_inF$D_OUT[119:112],
	       inf_dp1_tlp_inF$D_OUT[127:120] } ;
  assign opcode__h23808 =
	     { inf_dp0_tlp_mRespF$D_OUT[103:96],
	       inf_dp0_tlp_mRespF$D_OUT[111:104],
	       inf_dp0_tlp_mRespF$D_OUT[119:112],
	       inf_dp0_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h36650 =
	     { inf_dp0_tlp_inF$D_OUT[103:96],
	       inf_dp0_tlp_inF$D_OUT[111:104],
	       inf_dp0_tlp_inF$D_OUT[119:112],
	       inf_dp0_tlp_inF$D_OUT[127:120] } ;
  assign pkt__h122283 =
	     { 9'd148,
	       inf_dp1_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       inf_dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd16,
	       inf_dp1_tlp_mRespF$D_OUT[54:43],
	       inf_dp1_tlp_mRespF$D_OUT[87:72],
	       inf_dp1_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       inf_dp1_tlp_mRespF$D_OUT[61:55],
	       inf_dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign pkt__h43220 =
	     { 9'd148,
	       inf_dp0_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       inf_dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd0,
	       inf_dp0_tlp_mRespF$D_OUT[54:43],
	       inf_dp0_tlp_mRespF$D_OUT[87:72],
	       inf_dp0_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       inf_dp0_tlp_mRespF$D_OUT[61:55],
	       inf_dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign rdat__h158601 = { 16'd0, inf_dp1_bml_lclNumBufs } ;
  assign rdat__h158609 = { 16'd0, inf_dp1_bml_fabNumBufs } ;
  assign rdat__h158617 = { 16'd0, inf_dp1_bml_mesgBase } ;
  assign rdat__h158625 = { 16'd0, inf_dp1_bml_metaBase } ;
  assign rdat__h158633 = { 16'd0, inf_dp1_bml_mesgSize } ;
  assign rdat__h158641 = { 16'd0, inf_dp1_bml_metaSize } ;
  assign rdat__h158649 = { 16'd0, inf_dp1_bml_lclBufsCF } ;
  assign rdat__h158670 = { inf_dp1_bml_lclBufsAR, inf_dp1_bml_fabBufsAvail } ;
  assign rdat__h158675 =
	     { inf_dp1_bml_remBuf_value, inf_dp1_bml_lclBuf_value } ;
  assign rdat__h158686 = { inf_dp1_bml_lclStarts, inf_dp1_bml_lclDones } ;
  assign rdat__h158691 = { inf_dp1_bml_remStarts, inf_dp1_bml_remDones } ;
  assign rdat__h158752 = { 28'd0, inf_dp1_dpControl } ;
  assign rdat__h184754 = { 16'd0, x__h184757 } ;
  assign rdat__h208685 = { 8'd0, x__h208688 } ;
  assign rdat__h208871 =
	     { {7{app_appW3_dlyWordsStored_value[24]}},
	       app_appW3_dlyWordsStored_value } ;
  assign rdat__h208880 =
	     { {24{app_appW3_dlyReadCredit_value[7]}},
	       app_appW3_dlyReadCredit_value } ;
  assign rdat__h208889 = { 9'd0, app_appW3_dlyWAG } ;
  assign rdat__h208898 = { 9'd0, app_appW3_dlyRAG } ;
  assign rdat__h208971 =
	     { {16{app_appW3_dlyReadyToWrite_value[15]}},
	       app_appW3_dlyReadyToWrite_value } ;
  assign rdat__h208980 = { 16'd0, app_appW3_wrtSerUnroll } ;
  assign rdat__h208989 = { 8'd0, app_appW3_bytesThisMessage } ;
  assign rdat__h208998 = { 18'd0, app_appW3_mesgLengthSoFar } ;
  assign rdat__h232166 = { 16'd0, x__h232169 } ;
  assign rdat__h79543 = { 16'd0, inf_dp0_bml_lclNumBufs } ;
  assign rdat__h79551 = { 16'd0, inf_dp0_bml_fabNumBufs } ;
  assign rdat__h79559 = { 16'd0, inf_dp0_bml_mesgBase } ;
  assign rdat__h79567 = { 16'd0, inf_dp0_bml_metaBase } ;
  assign rdat__h79575 = { 16'd0, inf_dp0_bml_mesgSize } ;
  assign rdat__h79583 = { 16'd0, inf_dp0_bml_metaSize } ;
  assign rdat__h79591 = { 16'd0, inf_dp0_bml_lclBufsCF } ;
  assign rdat__h79612 = { inf_dp0_bml_lclBufsAR, inf_dp0_bml_fabBufsAvail } ;
  assign rdat__h79617 =
	     { inf_dp0_bml_remBuf_value, inf_dp0_bml_lclBuf_value } ;
  assign rdat__h79628 = { inf_dp0_bml_lclStarts, inf_dp0_bml_lclDones } ;
  assign rdat__h79633 = { inf_dp0_bml_remStarts, inf_dp0_bml_remDones } ;
  assign rdat__h79694 = { 28'd0, inf_dp0_dpControl } ;
  assign rdata__h139171 =
	     inf_dp1_tlp_readNxtDWAddr[1] ?
	       IF_inf_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THE_ETC___d3694 :
	       IF_inf_dp1_tlp_readNxtDWAddr_512_BIT_0_689_THE_ETC___d3699 ;
  assign rdata__h60108 =
	     inf_dp0_tlp_readNxtDWAddr[1] ?
	       IF_inf_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THE_ETC___d1508 :
	       IF_inf_dp0_tlp_readNxtDWAddr_326_BIT_0_503_THE_ETC___d1513 ;
  assign rreq_tag__h106324 =
	     (y__h106135 == inf_dp1_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rreq_tag__h27253 =
	     (y__h27064 == inf_dp0_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rresp_data__h133845 =
	     { IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363[7:0],
	       IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363[15:8],
	       IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363[23:16],
	       IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363[31:24] } ;
  assign rresp_data__h54782 =
	     { IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098[7:0],
	       IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098[15:8],
	       IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098[23:16],
	       IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098[31:24] } ;
  assign sendData_burstLength__h181388 =
	     (app_appW2_thisMesg[15:0] == 16'd0 ||
	      app_appW2_smaCtrl[5] && app_appW2_unrollCnt == 16'd1) ?
	       12'd1 :
	       (app_appW2_smaCtrl[5] ?
		  12'd4095 :
		  wsiBurstLength__h181306[11:0]) ;
  assign sendData_burstLength__h228800 =
	     (app_appW4_thisMesg[15:0] == 16'd0 ||
	      app_appW4_smaCtrl[5] && app_appW4_unrollCnt == 16'd1) ?
	       12'd1 :
	       (app_appW4_smaCtrl[5] ?
		  12'd4095 :
		  wsiBurstLength__h228718[11:0]) ;
  assign sendData_byteEn__h181390 =
	     (app_appW2_thisMesg[15:0] == 16'd0) ? 4'd0 : 4'd15 ;
  assign sendData_byteEn__h228802 =
	     (app_appW4_thisMesg[15:0] == 16'd0) ? 4'd0 : 4'd15 ;
  assign spanToNextPage__h106094 =
	     13'd4096 - { 1'd0, inf_dp1_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h118924 =
	     13'd4096 - { 1'd0, inf_dp1_tlp_fabMesgAccu[11:0] } ;
  assign spanToNextPage__h27023 =
	     13'd4096 - { 1'd0, inf_dp0_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h39861 =
	     13'd4096 - { 1'd0, inf_dp0_tlp_fabMesgAccu[11:0] } ;
  assign tag__h119200 = { 3'd0, inf_dp1_tlp_dmaTag } ;
  assign tag__h40137 = { 3'd0, inf_dp0_tlp_dmaTag } ;
  assign tagm__h119326 = { 3'd0, inf_dp1_tlp_dmaReqTag } ;
  assign tagm__h40263 = { 3'd0, inf_dp0_tlp_dmaReqTag } ;
  assign thisRequestLength__h106095 =
	     (x__h106148[12:0] <= spanToNextPage__h106094) ?
	       x__h106148[12:0] :
	       spanToNextPage__h106094 ;
  assign thisRequestLength__h118925 =
	     (x__h118958[12:0] <= spanToNextPage__h118924) ?
	       x__h118958[12:0] :
	       spanToNextPage__h118924 ;
  assign thisRequestLength__h27024 =
	     (x__h27077[12:0] <= spanToNextPage__h27023) ?
	       x__h27077[12:0] :
	       spanToNextPage__h27023 ;
  assign thisRequestLength__h39862 =
	     (x__h39895[12:0] <= spanToNextPage__h39861) ?
	       x__h39895[12:0] :
	       spanToNextPage__h39861 ;
  assign w_be__h107051 =
	     inf_dp1_tlp_outDwRemain_970_ULE_4___d7507 ?
	       CASE_inf_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q6 :
	       16'd65535 ;
  assign w_be__h27980 =
	     inf_dp0_tlp_outDwRemain_81_ULE_4___d7502 ?
	       CASE_inf_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q5 :
	       16'd65535 ;
  assign w_data__h106499 =
	     { 22'd1048580,
	       inf_dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd256,
	       lastBE__h106523,
	       4'd15,
	       inf_dp1_tlp_fabMesgAccu,
	       inf_dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h107477 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd65791,
	       inf_dp1_tlp_fabMetaAddr,
	       inf_dp1_tlp_fabMeta[103:96],
	       inf_dp1_tlp_fabMeta[111:104],
	       inf_dp1_tlp_fabMeta[119:112],
	       inf_dp1_tlp_fabMeta[127:120] } ;
  assign w_data__h108539 =
	     { inf_dp1_tlp_fabMeta[71:64],
	       inf_dp1_tlp_fabMeta[79:72],
	       inf_dp1_tlp_fabMeta[87:80],
	       inf_dp1_tlp_fabMeta[95:88],
	       inf_dp1_tlp_fabMeta[39:32],
	       inf_dp1_tlp_fabMeta[47:40],
	       inf_dp1_tlp_fabMeta[55:48],
	       inf_dp1_tlp_fabMeta[63:56],
	       inf_dp1_tlp_fabMeta[7:0],
	       inf_dp1_tlp_fabMeta[15:8],
	       inf_dp1_tlp_fabMeta[23:16],
	       inf_dp1_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h111259 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd65551,
	       inf_dp1_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h113443 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd1,
	       tag__h119200,
	       8'd255,
	       inf_dp1_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h119206 =
	     { 22'd4,
	       thisRequestLength__h118925[11:2],
	       pciDevice[15:3],
	       3'd1,
	       tag__h119200,
	       lastBE__h119227,
	       4'd15,
	       inf_dp1_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign w_data__h27428 =
	     { 22'd1048580,
	       inf_dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd0,
	       lastBE__h27452,
	       4'd15,
	       inf_dp0_tlp_fabMesgAccu,
	       inf_dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h28406 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd255,
	       inf_dp0_tlp_fabMetaAddr,
	       inf_dp0_tlp_fabMeta[103:96],
	       inf_dp0_tlp_fabMeta[111:104],
	       inf_dp0_tlp_fabMeta[119:112],
	       inf_dp0_tlp_fabMeta[127:120] } ;
  assign w_data__h29468 =
	     { inf_dp0_tlp_fabMeta[71:64],
	       inf_dp0_tlp_fabMeta[79:72],
	       inf_dp0_tlp_fabMeta[87:80],
	       inf_dp0_tlp_fabMeta[95:88],
	       inf_dp0_tlp_fabMeta[39:32],
	       inf_dp0_tlp_fabMeta[47:40],
	       inf_dp0_tlp_fabMeta[55:48],
	       inf_dp0_tlp_fabMeta[63:56],
	       inf_dp0_tlp_fabMeta[7:0],
	       inf_dp0_tlp_fabMeta[15:8],
	       inf_dp0_tlp_fabMeta[23:16],
	       inf_dp0_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h32188 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd15,
	       inf_dp0_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h34372 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd0,
	       tag__h40137,
	       8'd255,
	       inf_dp0_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h40143 =
	     { 22'd4,
	       thisRequestLength__h39862[11:2],
	       pciDevice[15:3],
	       3'd0,
	       tag__h40137,
	       lastBE__h40164,
	       4'd15,
	       inf_dp0_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign wsiBurstLength__h181306 =
	     app_appW2_smaCtrl[5] ?
	       16'd2 :
	       { 2'd0, app_appW2_thisMesg[15:2] } ;
  assign wsiBurstLength__h228718 =
	     app_appW4_smaCtrl[5] ?
	       16'd2 :
	       { 2'd0, app_appW4_thisMesg[15:2] } ;
  assign x3__h149964 = { 8'd0, inf_dp1_wmi_wmi_mFlagReg[23:0] } ;
  assign x3__h70901 = { 8'd0, inf_dp0_wmi_wmi_mFlagReg[23:0] } ;
  assign x__h102942 = { 15'd0, inf_dp1_tlp_mesgLengthRemainPush } ;
  assign x__h106148 =
	     (inf_dp1_tlp_mesgLengthRemainPush <= y__h106150) ?
	       inf_dp1_tlp_mesgLengthRemainPush :
	       y__h106150 ;
  assign x__h106649 = { inf_dp1_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h115745 = { 15'd0, inf_dp1_tlp_mesgLengthRemainPull } ;
  assign x__h118958 =
	     (inf_dp1_tlp_mesgLengthRemainPull <= y__h118960) ?
	       inf_dp1_tlp_mesgLengthRemainPull :
	       y__h118960 ;
  assign x__h119535 = { inf_dp1_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h120213 = { inf_dp1_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h133914 = x__h133916 - y__h133917 ;
  assign x__h133916 = { inf_dp1_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h155745 =
	     (inf_dp1_dpControl[1:0] == 2'd1) ?
	       inf_dp1_bml_fabNumBufs :
	       16'd0 ;
  assign x__h156869 = inf_dp1_bml_lclBufsAR + 16'd1 ;
  assign x__h156874 = inf_dp1_bml_lclBufsAR - 16'd1 ;
  assign x__h156946 = inf_dp1_bml_lclBufsCF + 16'd1 ;
  assign x__h156951 = inf_dp1_bml_lclBufsCF - 16'd1 ;
  assign x__h156988 = inf_dp1_bml_fabBufsAvail + 16'd1 ;
  assign x__h156993 = inf_dp1_bml_fabBufsAvail - 16'd1 ;
  assign x__h157026 = inf_dp1_bml_lclCredit + 16'd1 ;
  assign x__h157031 = inf_dp1_bml_lclCredit - 16'd1 ;
  assign x__h179094 = app_appW2_respF_rRdPtr + 12'd1 ;
  assign x__h181099 = app_appW2_fabWordsRemain == app_appW2_fabWordsCurReq ;
  assign x__h182398 = app_appW2_opcode[8] ? app_appW2_opcode[7:0] : 8'd0 ;
  assign x__h182412 =
	     app_appW2_mesgLength[14] ? app_appW2_mesgLength[13:0] : 14'd0 ;
  assign x__h184757 = { app_appW2_wsiS_statusR, app_appW2_wsiM_statusR } ;
  assign x__h201307 =
	     CAN_FIRE_RL_app_appW3_wmwt_mesg_ingress ?
	       app_appW3_wsiS_reqFifo$D_OUT[43:12] :
	       32'd0 ;
  assign x__h201408 = app_appW3_mesgWF_rRdPtr + 13'd1 ;
  assign x__h204543 = { 96'd0, app_appW3_metaWF$D_OUT } ;
  assign x__h204570 =
	     { 64'd0, app_appW3_metaWF$D_OUT, app_appW3_wrtSerStage } ;
  assign x__h205193 = { 96'd0, data__h204908 } ;
  assign x__h205217 = { 64'd0, data__h204908, app_appW3_wrtSerStage } ;
  assign x__h205675 = { app_appW3_dlyWAG, 4'h0 } ;
  assign x__h206012 = { app_appW3_dlyRAG, 4'h0 } ;
  assign x__h208688 =
	     { app_appW3_wmemi_statusR,
	       app_appW3_wsiS_statusR,
	       app_appW3_wsiM_statusR } ;
  assign x__h226506 = app_appW4_respF_rRdPtr + 12'd1 ;
  assign x__h228511 = app_appW4_fabWordsRemain == app_appW4_fabWordsCurReq ;
  assign x__h229810 = app_appW4_opcode[8] ? app_appW4_opcode[7:0] : 8'd0 ;
  assign x__h229824 =
	     app_appW4_mesgLength[14] ? app_appW4_mesgLength[13:0] : 14'd0 ;
  assign x__h232169 = { app_appW4_wsiS_statusR, app_appW4_wsiM_statusR } ;
  assign x__h23871 = { 15'd0, inf_dp0_tlp_mesgLengthRemainPush } ;
  assign x__h27077 =
	     (inf_dp0_tlp_mesgLengthRemainPush <= y__h27079) ?
	       inf_dp0_tlp_mesgLengthRemainPush :
	       y__h27079 ;
  assign x__h27578 = { inf_dp0_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h36682 = { 15'd0, inf_dp0_tlp_mesgLengthRemainPull } ;
  assign x__h39895 =
	     (inf_dp0_tlp_mesgLengthRemainPull <= y__h39897) ?
	       inf_dp0_tlp_mesgLengthRemainPull :
	       y__h39897 ;
  assign x__h40472 = { inf_dp0_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h41150 = { inf_dp0_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h54851 = x__h54853 - y__h54854 ;
  assign x__h54853 = { inf_dp0_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h76685 =
	     (inf_dp0_dpControl[1:0] == 2'd1) ?
	       inf_dp0_bml_fabNumBufs :
	       16'd0 ;
  assign x__h77809 = inf_dp0_bml_lclBufsAR + 16'd1 ;
  assign x__h77814 = inf_dp0_bml_lclBufsAR - 16'd1 ;
  assign x__h77886 = inf_dp0_bml_lclBufsCF + 16'd1 ;
  assign x__h77891 = inf_dp0_bml_lclBufsCF - 16'd1 ;
  assign x__h77928 = inf_dp0_bml_fabBufsAvail + 16'd1 ;
  assign x__h77933 = inf_dp0_bml_fabBufsAvail - 16'd1 ;
  assign x__h77966 = inf_dp0_bml_lclCredit + 16'd1 ;
  assign x__h77971 = inf_dp0_bml_lclCredit - 16'd1 ;
  assign x_burstLength__h208154 =
	     (app_appW3_readMeta[23:0] == 24'd0) ?
	       12'd1 :
	       app_appW3_readMeta[13:2] ;
  assign x_byteEn__h208155 =
	     (app_appW3_readMeta[23:0] == 24'd0) ? 4'd0 : 4'd15 ;
  assign x_length__h182394 = { 2'd0, x__h182412 } ;
  assign x_length__h229806 = { 2'd0, x__h229824 } ;
  assign y__h106135 = { 4'd0, thisRequestLength__h106095 } ;
  assign y__h106150 = { 4'd0, inf_dp1_tlp_maxPayloadSize } ;
  assign y__h106229 = { 19'd0, thisRequestLength__h106095 } ;
  assign y__h106277 = { 3'd0, thisRequestLength__h106095 } ;
  assign y__h106646 = { 22'd0, x__h106649 } ;
  assign y__h118950 = { 4'd0, thisRequestLength__h118925 } ;
  assign y__h118960 = { 4'd0, inf_dp1_tlp_maxReadReqSize } ;
  assign y__h119021 = { 19'd0, thisRequestLength__h118925 } ;
  assign y__h119532 = { 6'd0, x__h119535 } ;
  assign y__h120210 =
	     inf_dp1_tlp_dmaPullRemainDWSub_201_ULE_4___d7938 ?
	       { 7'd0, x__h120213 } :
	       17'd16 ;
  assign y__h133915 =
	     (inf_dp1_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h133946 } ;
  assign y__h133917 = { 10'd0, x__h133923 } ;
  assign y__h27064 = { 4'd0, thisRequestLength__h27024 } ;
  assign y__h27079 = { 4'd0, inf_dp0_tlp_maxPayloadSize } ;
  assign y__h27158 = { 19'd0, thisRequestLength__h27024 } ;
  assign y__h27206 = { 3'd0, thisRequestLength__h27024 } ;
  assign y__h27575 = { 22'd0, x__h27578 } ;
  assign y__h39887 = { 4'd0, thisRequestLength__h39862 } ;
  assign y__h39897 = { 4'd0, inf_dp0_tlp_maxReadReqSize } ;
  assign y__h39958 = { 19'd0, thisRequestLength__h39862 } ;
  assign y__h40469 = { 6'd0, x__h40472 } ;
  assign y__h41147 =
	     inf_dp0_tlp_dmaPullRemainDWSub_015_ULE_4___d7936 ?
	       { 7'd0, x__h41150 } :
	       17'd16 ;
  assign y__h54852 =
	     (inf_dp0_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h54883 } ;
  assign y__h54854 = { 10'd0, x__h54860 } ;
  assign y_avValue__h151560 =
	     inf_dp1_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterB_outDataCore$D_OUT :
	       inf_dp1_bram_memory$DOB ;
  assign y_avValue__h151580 =
	     inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterB_1_outDataCore$D_OUT :
	       inf_dp1_bram_memory_1$DOB ;
  assign y_avValue__h151600 =
	     inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterB_2_outDataCore$D_OUT :
	       inf_dp1_bram_memory_2$DOB ;
  assign y_avValue__h151620 =
	     inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       inf_dp1_bram_serverAdapterB_3_outDataCore$D_OUT :
	       inf_dp1_bram_memory_3$DOB ;
  assign y_avValue__h72497 =
	     inf_dp0_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterB_outDataCore$D_OUT :
	       inf_dp0_bram_memory$DOB ;
  assign y_avValue__h72517 =
	     inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterB_1_outDataCore$D_OUT :
	       inf_dp0_bram_memory_1$DOB ;
  assign y_avValue__h72537 =
	     inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterB_2_outDataCore$D_OUT :
	       inf_dp0_bram_memory_2$DOB ;
  assign y_avValue__h72557 =
	     inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       inf_dp0_bram_serverAdapterB_3_outDataCore$D_OUT :
	       inf_dp0_bram_memory_3$DOB ;
  always@(inf_dp0_tlp_readReq$D_OUT)
  begin
    case (inf_dp0_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h54860 = 2'b10;
      4'b1110: x__h54860 = 2'b01;
      4'b1111: x__h54860 = 2'b0;
      default: x__h54860 = 2'b11;
    endcase
  end
  always@(inf_dp0_tlp_readReq$D_OUT)
  begin
    case (inf_dp0_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h54883 = 2'b10;
      4'b1110: x__h54883 = 2'b01;
      4'b1111: x__h54883 = 2'b0;
      default: x__h54883 = 2'b11;
    endcase
  end
  always@(inf_dp1_tlp_readReq$D_OUT)
  begin
    case (inf_dp1_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h133923 = 2'b10;
      4'b1110: x__h133923 = 2'b01;
      4'b1111: x__h133923 = 2'b0;
      default: x__h133923 = 2'b11;
    endcase
  end
  always@(inf_dp1_tlp_readReq$D_OUT)
  begin
    case (inf_dp1_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h133946 = 2'b10;
      4'b1110: x__h133946 = 2'b01;
      4'b1111: x__h133946 = 2'b0;
      default: x__h133946 = 2'b11;
    endcase
  end
  always@(app_appW3_rdSerPos or
	  app_appW3_rdSerStage_3 or
	  app_appW3_wide16Fc$D_OUT or
	  app_appW3_rdSerStage_1 or app_appW3_rdSerStage_2)
  begin
    case (app_appW3_rdSerPos)
      2'd0: v__h206282 = app_appW3_wide16Fc$D_OUT[31:0];
      2'd1: v__h206282 = app_appW3_rdSerStage_1;
      2'd2: v__h206282 = app_appW3_rdSerStage_2;
      2'd3: v__h206282 = app_appW3_rdSerStage_3;
    endcase
  end
  always@(inf_dp0_wmi_p4B or
	  y_avValue__h72557 or
	  y_avValue__h72497 or y_avValue__h72517 or y_avValue__h72537)
  begin
    case (inf_dp0_wmi_p4B)
      2'd0: rdata__h72661 = y_avValue__h72497;
      2'd1: rdata__h72661 = y_avValue__h72517;
      2'd2: rdata__h72661 = y_avValue__h72537;
      2'd3: rdata__h72661 = y_avValue__h72557;
    endcase
  end
  always@(inf_dp1_wmi_p4B or
	  y_avValue__h151620 or
	  y_avValue__h151560 or y_avValue__h151580 or y_avValue__h151600)
  begin
    case (inf_dp1_wmi_p4B)
      2'd0: rdata__h151724 = y_avValue__h151560;
      2'd1: rdata__h151724 = y_avValue__h151580;
      2'd2: rdata__h151724 = y_avValue__h151600;
      2'd3: rdata__h151724 = y_avValue__h151620;
    endcase
  end
  always@(inf_dp0_tlp_readReq$D_OUT)
  begin
    case (inf_dp0_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h54738 = 2'b11;
      4'b1100: lowAddr10__h54738 = 2'b10;
      4'b1110: lowAddr10__h54738 = 2'b01;
      default: lowAddr10__h54738 = 2'b0;
    endcase
  end
  always@(inf_dp0_wci_reqF$D_OUT or
	  rdat__h79543 or
	  rdat__h79551 or
	  rdat__h79559 or
	  rdat__h79567 or
	  rdat__h79575 or
	  rdat__h79583 or
	  rdat__h79591 or
	  rdat__h79612 or
	  rdat__h79617 or
	  rdat__h79628 or
	  rdat__h79633 or
	  inf_dp0_bml_fabMesgBase or
	  inf_dp0_bml_fabMetaBase or
	  inf_dp0_bml_fabMesgSize or
	  inf_dp0_bml_fabMetaSize or
	  inf_dp0_bml_fabFlowBase or inf_dp0_bml_fabFlowSize or rdat__h79694)
  begin
    case (inf_dp0_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h79464 = rdat__h79543;
      8'h04: _theResult____h79464 = rdat__h79551;
      8'h08: _theResult____h79464 = rdat__h79559;
      8'h0C: _theResult____h79464 = rdat__h79567;
      8'h10: _theResult____h79464 = rdat__h79575;
      8'h14: _theResult____h79464 = rdat__h79583;
      8'h20: _theResult____h79464 = rdat__h79591;
      8'h24: _theResult____h79464 = 32'hF00DFACE;
      8'h28: _theResult____h79464 = rdat__h79612;
      8'h2C: _theResult____h79464 = rdat__h79617;
      8'h30: _theResult____h79464 = rdat__h79628;
      8'h34: _theResult____h79464 = rdat__h79633;
      8'h48: _theResult____h79464 = 32'hDADEBABE;
      8'h4C: _theResult____h79464 = 32'h00008000;
      8'h50: _theResult____h79464 = inf_dp0_bml_fabMesgBase;
      8'h54: _theResult____h79464 = inf_dp0_bml_fabMetaBase;
      8'h58: _theResult____h79464 = inf_dp0_bml_fabMesgSize;
      8'h5C: _theResult____h79464 = inf_dp0_bml_fabMetaSize;
      8'h60: _theResult____h79464 = inf_dp0_bml_fabFlowBase;
      8'h64: _theResult____h79464 = inf_dp0_bml_fabFlowSize;
      8'h68: _theResult____h79464 = rdat__h79694;
      default: _theResult____h79464 = 32'd0;
    endcase
  end
  always@(inf_dp1_tlp_readReq$D_OUT)
  begin
    case (inf_dp1_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h133801 = 2'b11;
      4'b1100: lowAddr10__h133801 = 2'b10;
      4'b1110: lowAddr10__h133801 = 2'b01;
      default: lowAddr10__h133801 = 2'b0;
    endcase
  end
  always@(inf_dp1_wci_reqF$D_OUT or
	  rdat__h158601 or
	  rdat__h158609 or
	  rdat__h158617 or
	  rdat__h158625 or
	  rdat__h158633 or
	  rdat__h158641 or
	  rdat__h158649 or
	  rdat__h158670 or
	  rdat__h158675 or
	  rdat__h158686 or
	  rdat__h158691 or
	  inf_dp1_bml_fabMesgBase or
	  inf_dp1_bml_fabMetaBase or
	  inf_dp1_bml_fabMesgSize or
	  inf_dp1_bml_fabMetaSize or
	  inf_dp1_bml_fabFlowBase or inf_dp1_bml_fabFlowSize or rdat__h158752)
  begin
    case (inf_dp1_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h158522 = rdat__h158601;
      8'h04: _theResult____h158522 = rdat__h158609;
      8'h08: _theResult____h158522 = rdat__h158617;
      8'h0C: _theResult____h158522 = rdat__h158625;
      8'h10: _theResult____h158522 = rdat__h158633;
      8'h14: _theResult____h158522 = rdat__h158641;
      8'h20: _theResult____h158522 = rdat__h158649;
      8'h24: _theResult____h158522 = 32'hF00DFACE;
      8'h28: _theResult____h158522 = rdat__h158670;
      8'h2C: _theResult____h158522 = rdat__h158675;
      8'h30: _theResult____h158522 = rdat__h158686;
      8'h34: _theResult____h158522 = rdat__h158691;
      8'h48: _theResult____h158522 = 32'hDADEBABE;
      8'h4C: _theResult____h158522 = 32'h00008000;
      8'h50: _theResult____h158522 = inf_dp1_bml_fabMesgBase;
      8'h54: _theResult____h158522 = inf_dp1_bml_fabMetaBase;
      8'h58: _theResult____h158522 = inf_dp1_bml_fabMesgSize;
      8'h5C: _theResult____h158522 = inf_dp1_bml_fabMetaSize;
      8'h60: _theResult____h158522 = inf_dp1_bml_fabFlowBase;
      8'h64: _theResult____h158522 = inf_dp1_bml_fabFlowSize;
      8'h68: _theResult____h158522 = rdat__h158752;
      default: _theResult____h158522 = 32'd0;
    endcase
  end
  always@(inf_dp0_dpControl or inf_dp0_bml_fabDone or inf_dp0_bml_remDone)
  begin
    case (inf_dp0_dpControl[1:0])
      2'd0:
	  IF_inf_dp0_bml_dpControl_wget__920_BITS_1_TO_0_ETC___d1997 =
	      inf_dp0_bml_fabDone;
      2'd1:
	  IF_inf_dp0_bml_dpControl_wget__920_BITS_1_TO_0_ETC___d1997 =
	      inf_dp0_bml_remDone;
      default: IF_inf_dp0_bml_dpControl_wget__920_BITS_1_TO_0_ETC___d1997 =
		   inf_dp0_bml_fabDone;
    endcase
  end
  always@(inf_dp1_dpControl or inf_dp1_bml_fabDone or inf_dp1_bml_remDone)
  begin
    case (inf_dp1_dpControl[1:0])
      2'd0:
	  IF_inf_dp1_bml_dpControl_wget__106_BITS_1_TO_0_ETC___d4183 =
	      inf_dp1_bml_fabDone;
      2'd1:
	  IF_inf_dp1_bml_dpControl_wget__106_BITS_1_TO_0_ETC___d4183 =
	      inf_dp1_bml_remDone;
      default: IF_inf_dp1_bml_dpControl_wget__106_BITS_1_TO_0_ETC___d4183 =
		   inf_dp1_bml_fabDone;
    endcase
  end
  always@(app_appW3_wrtSerPos or app_appW3_wide16Fa$FULL_N)
  begin
    case (app_appW3_wrtSerPos)
      2'd0, 2'd1, 2'd2:
	  CASE_app_appW3_wrtSerPos_NOT_app_appW3_wrtSerP_ETC__q1 =
	      app_appW3_wide16Fa$FULL_N;
      2'd3:
	  CASE_app_appW3_wrtSerPos_NOT_app_appW3_wrtSerP_ETC__q1 =
	      app_appW3_wrtSerPos != 2'd3 || app_appW3_wide16Fa$FULL_N;
    endcase
  end
  always@(app_appW3_wrtSerPos)
  begin
    case (app_appW3_wrtSerPos)
      2'd0, 2'd1, 2'd2, 2'd3:
	  CASE_app_appW3_wrtSerPos_0b1_0_1_1_1_2_1_3_0b1__q2 = 1'd1;
    endcase
  end
  always@(inf_dp0_dpControl or
	  inf_dp0_bml_fabDone or inf_dp0_bml_remDone or inf_dp0_bml_remStart)
  begin
    case (inf_dp0_dpControl[1:0])
      2'd0:
	  CASE_inf_dp0_dpControl_BITS_1_TO_0_inf_dp0_bml_ETC__q3 =
	      inf_dp0_bml_fabDone;
      2'd1:
	  CASE_inf_dp0_dpControl_BITS_1_TO_0_inf_dp0_bml_ETC__q3 =
	      (inf_dp0_dpControl[3:2] == 2'd1) ?
		inf_dp0_bml_remDone :
		inf_dp0_bml_remStart;
      default: CASE_inf_dp0_dpControl_BITS_1_TO_0_inf_dp0_bml_ETC__q3 =
		   inf_dp0_bml_fabDone;
    endcase
  end
  always@(inf_dp1_dpControl or
	  inf_dp1_bml_fabDone or inf_dp1_bml_remDone or inf_dp1_bml_remStart)
  begin
    case (inf_dp1_dpControl[1:0])
      2'd0:
	  CASE_inf_dp1_dpControl_BITS_1_TO_0_inf_dp1_bml_ETC__q4 =
	      inf_dp1_bml_fabDone;
      2'd1:
	  CASE_inf_dp1_dpControl_BITS_1_TO_0_inf_dp1_bml_ETC__q4 =
	      (inf_dp1_dpControl[3:2] == 2'd1) ?
		inf_dp1_bml_remDone :
		inf_dp1_bml_remStart;
      default: CASE_inf_dp1_dpControl_BITS_1_TO_0_inf_dp1_bml_ETC__q4 =
		   inf_dp1_bml_fabDone;
    endcase
  end
  always@(inf_dp0_tlp_outDwRemain)
  begin
    case (inf_dp0_tlp_outDwRemain[1:0])
      2'b0: CASE_inf_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q5 = 16'hFFFF;
      2'b01:
	  CASE_inf_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q5 = 16'hF000;
      2'b10:
	  CASE_inf_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q5 = 16'hFF00;
      2'd3: CASE_inf_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q5 = 16'hFFF0;
    endcase
  end
  always@(inf_dp1_tlp_outDwRemain)
  begin
    case (inf_dp1_tlp_outDwRemain[1:0])
      2'b0: CASE_inf_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q6 = 16'hFFFF;
      2'b01:
	  CASE_inf_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q6 = 16'hF000;
      2'b10:
	  CASE_inf_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q6 = 16'hFF00;
      2'd3: CASE_inf_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF_ETC__q6 = 16'hFFF0;
    endcase
  end
  always@(idx__h45561 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h45561)
      2'd0:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1157 =
	      inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1157 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1157 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1157 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h47784 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h47784)
      2'd0:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1167 =
	      inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1167 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1167 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1167 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h49080 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h49080)
      2'd0:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1177 =
	      inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1177 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1177 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1177 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h50376 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h50376)
      2'd0:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1187 =
	      inf_dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1187 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1187 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d1187 =
	      inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h124624 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h124624)
      2'd0:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3343 =
	      inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3343 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3343 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3343 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(idx__h126847 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h126847)
      2'd0:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3353 =
	      inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3353 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3353 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3353 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(idx__h128143 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h128143)
      2'd0:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3363 =
	      inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3363 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3363 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3363 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(idx__h129439 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h129439)
      2'd0:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3373 =
	      inf_dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3373 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3373 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d3373 =
	      inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(inf_dp0_tlp_mReqF$D_OUT or
	  inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941 or
	  inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110 or
	  inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939 or
	  inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940)
  begin
    case (inf_dp0_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q7 =
	      inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110;
      2'd1:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q7 =
	      inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939;
      2'd2:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q7 =
	      inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940;
      2'd3:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q7 =
	      inf_dp0_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941;
    endcase
  end
  always@(inf_dp0_tlp_mReqF$D_OUT or
	  inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941 or
	  inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110 or
	  inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939 or
	  inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940)
  begin
    case (inf_dp0_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q8 =
	      inf_dp0_bram_serverAdapterA_cnt_6_SLT_3___d7110;
      2'd1:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q8 =
	      inf_dp0_bram_serverAdapterA_1_cnt_44_SLT_3___d7939;
      2'd2:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q8 =
	      inf_dp0_bram_serverAdapterA_2_cnt_62_SLT_3___d7940;
      2'd3:
	  CASE_inf_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q8 =
	      inf_dp0_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      inf_dp0_bram_serverAdapterA_3_cnt_80_SLT_3___d7941;
    endcase
  end
  always@(inf_dp1_tlp_mReqF$D_OUT or
	  inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276 or
	  inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313 or
	  inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942 or
	  inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943)
  begin
    case (inf_dp1_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q9 =
	      inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313;
      2'd1:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q9 =
	      inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942;
      2'd2:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q9 =
	      inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943;
      2'd3:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_ETC__q9 =
	      inf_dp1_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276;
    endcase
  end
  always@(inf_dp1_tlp_mReqF$D_OUT or
	  inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276 or
	  inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313 or
	  inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942 or
	  inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943)
  begin
    case (inf_dp1_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q10 =
	      inf_dp1_bram_serverAdapterA_cnt_218_SLT_3___d7313;
      2'd1:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q10 =
	      inf_dp1_bram_serverAdapterA_1_cnt_336_SLT_3___d7942;
      2'd2:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q10 =
	      inf_dp1_bram_serverAdapterA_2_cnt_454_SLT_3___d7943;
      2'd3:
	  CASE_inf_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_ETC__q10 =
	      inf_dp1_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      inf_dp1_bram_serverAdapterA_3_cnt_572_SLT_3___d7276;
    endcase
  end
  always@(inf_dp0_wmi_addr or
	  inf_dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667 or
	  inf_dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664 or
	  inf_dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665 or
	  inf_dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666)
  begin
    case (inf_dp0_wmi_addr[3:2])
      2'd0:
	  IF_inf_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_7_ETC___d7266 =
	      inf_dp0_bram_serverAdapterB_cnt_5_SLT_3___d1664;
      2'd1:
	  IF_inf_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_7_ETC___d7266 =
	      inf_dp0_bram_serverAdapterB_1_cnt_03_SLT_3___d1665;
      2'd2:
	  IF_inf_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_7_ETC___d7266 =
	      inf_dp0_bram_serverAdapterB_2_cnt_21_SLT_3___d1666;
      2'd3:
	  IF_inf_dp0_wmi_addr_752_BITS_3_TO_2_753_EQ_0_7_ETC___d7266 =
	      inf_dp0_wmi_addr[3:2] != 2'd3 ||
	      inf_dp0_bram_serverAdapterB_3_cnt_39_SLT_3___d1667;
    endcase
  end
  always@(inf_dp1_wmi_addr or
	  inf_dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853 or
	  inf_dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850 or
	  inf_dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851 or
	  inf_dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852)
  begin
    case (inf_dp1_wmi_addr[3:2])
      2'd0:
	  IF_inf_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_9_ETC___d8294 =
	      inf_dp1_bram_serverAdapterB_cnt_277_SLT_3___d3850;
      2'd1:
	  IF_inf_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_9_ETC___d8294 =
	      inf_dp1_bram_serverAdapterB_1_cnt_395_SLT_3___d3851;
      2'd2:
	  IF_inf_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_9_ETC___d8294 =
	      inf_dp1_bram_serverAdapterB_2_cnt_513_SLT_3___d3852;
      2'd3:
	  IF_inf_dp1_wmi_addr_938_BITS_3_TO_2_939_EQ_0_9_ETC___d8294 =
	      inf_dp1_wmi_addr[3:2] != 2'd3 ||
	      inf_dp1_bram_serverAdapterB_3_cnt_631_SLT_3___d3853;
    endcase
  end
  always@(inf_dp0_dpControl or
	  inf_dp0_bml_fabDone or inf_dp0_bml_remDone or inf_dp0_bml_remStart)
  begin
    case (inf_dp0_dpControl[1:0])
      2'd0:
	  CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q11 =
	      !inf_dp0_bml_fabDone;
      2'd1:
	  CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q11 =
	      (inf_dp0_dpControl[3:2] == 2'd1) ?
		!inf_dp0_bml_remDone :
		!inf_dp0_bml_remStart;
      default: CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q11 =
		   !inf_dp0_bml_fabDone;
    endcase
  end
  always@(inf_dp1_dpControl or
	  inf_dp1_bml_fabDone or inf_dp1_bml_remDone or inf_dp1_bml_remStart)
  begin
    case (inf_dp1_dpControl[1:0])
      2'd0:
	  CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q12 =
	      !inf_dp1_bml_fabDone;
      2'd1:
	  CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q12 =
	      (inf_dp1_dpControl[3:2] == 2'd1) ?
		!inf_dp1_bml_remDone :
		!inf_dp1_bml_remStart;
      default: CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q12 =
		   !inf_dp1_bml_fabDone;
    endcase
  end
  always@(idx__h45561 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h45561)
      2'd0:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7159 =
	      inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7159 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7159 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7159 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h47784 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h47784)
      2'd0:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7162 =
	      inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7162 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7162 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7162 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h49080 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h49080)
      2'd0:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7160 =
	      inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7160 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7160 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7160 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h50376 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128 or
	  inf_dp0_tlp_writeRemainDWLen or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066 or
	  inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065)
  begin
    case (idx__h50376)
      2'd0:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7161 =
	      inf_dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7161 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_1___d7066;
      2'd2:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7161 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_2___d7065;
      2'd3:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7161 =
	      !inf_dp0_tlp_writeRemainDWLen_144_ULE_3___d7128;
    endcase
  end
  always@(idx__h126847 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h126847)
      2'd0:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7188 =
	      inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7188 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7188 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7188 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(idx__h124624 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h124624)
      2'd0:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7187 =
	      inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7187 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7187 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7187 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(idx__h128143 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h128143)
      2'd0:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7189 =
	      inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7189 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7189 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7189 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(idx__h129439 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132 or
	  inf_dp1_tlp_writeRemainDWLen or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116 or
	  inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133)
  begin
    case (idx__h129439)
      2'd0:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7190 =
	      inf_dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7190 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_1___d7116;
      2'd2:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7190 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_2___d7133;
      2'd3:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7190 =
	      !inf_dp1_tlp_writeRemainDWLen_330_ULE_3___d7132;
    endcase
  end
  always@(idx__h45561 or inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h45561)
      2'd0:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090 =
	      inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090 =
	      inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090 =
	      inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7090 =
	      inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h47784 or inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h47784)
      2'd0:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356 =
	      inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356 =
	      inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356 =
	      inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7356 =
	      inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h49080 or inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h49080)
      2'd0:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357 =
	      inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357 =
	      inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357 =
	      inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7357 =
	      inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h50376 or inf_dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h50376)
      2'd0:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358 =
	      inf_dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358 =
	      inf_dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358 =
	      inf_dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_inf_dp0_tlp_writeDWAddr_140_BITS_1__ETC___d7358 =
	      inf_dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h124624 or inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h124624)
      2'd0:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359 =
	      inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359 =
	      inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359 =
	      inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7359 =
	      inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h126847 or inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h126847)
      2'd0:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360 =
	      inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360 =
	      inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360 =
	      inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7360 =
	      inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h128143 or inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h128143)
      2'd0:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361 =
	      inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361 =
	      inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361 =
	      inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7361 =
	      inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h129439 or inf_dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h129439)
      2'd0:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362 =
	      inf_dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362 =
	      inf_dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362 =
	      inf_dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_inf_dp1_tlp_writeDWAddr_326_BITS_1__ETC___d7362 =
	      inf_dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1 or
	  MUX_app_appW2_endOfMessage$write_1__SEL_1 or
	  MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_app_appW2_wmwt_requestPrecise or
	  MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__SEL_1:
	  value__h169350 = 32'hAAAAAAAA /* unspecified value */ ;
      MUX_app_appW2_endOfMessage$write_1__SEL_1:
	  value__h169350 = MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_app_appW2_wmwt_requestPrecise:
	  value__h169350 = MUX_app_appW2_wmi_mFlagF_x_wire$wset_1__VAL_3;
      default: value__h169350 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1 or
	  MUX_app_appW4_endOfMessage$write_1__SEL_1 or
	  MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_app_appW4_wmwt_requestPrecise or
	  MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__SEL_1:
	  value__h216769 = 32'hAAAAAAAA /* unspecified value */ ;
      MUX_app_appW4_endOfMessage$write_1__SEL_1:
	  value__h216769 = MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_app_appW4_wmwt_requestPrecise:
	  value__h216769 = MUX_app_appW4_wmi_mFlagF_x_wire$wset_1__VAL_3;
      default: value__h216769 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(inf_dp0_dpControl or inf_dp0_bml_fabDone or inf_dp0_bml_remDone)
  begin
    case (inf_dp0_dpControl[1:0])
      2'd0:
	  CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q13 =
	      !inf_dp0_bml_fabDone;
      2'd1:
	  CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q13 =
	      !inf_dp0_bml_remDone;
      default: CASE_inf_dp0_dpControl_BITS_1_TO_0_NOT_inf_dp0_ETC__q13 =
		   !inf_dp0_bml_fabDone;
    endcase
  end
  always@(inf_dp1_dpControl or inf_dp1_bml_fabDone or inf_dp1_bml_remDone)
  begin
    case (inf_dp1_dpControl[1:0])
      2'd0:
	  CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q21 =
	      !inf_dp1_bml_fabDone;
      2'd1:
	  CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q21 =
	      !inf_dp1_bml_remDone;
      default: CASE_inf_dp1_dpControl_BITS_1_TO_0_NOT_inf_dp1_ETC__q21 =
		   !inf_dp1_bml_fabDone;
    endcase
  end
  always@(inf_dp0_tlp_readReq$D_OUT or
	  inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  inf_dp0_bram_serverAdapterA_3_outData_enqData$whas or
	  inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  inf_dp0_bram_serverAdapterA_1_outData_enqData$whas or
	  inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  inf_dp0_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (inf_dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1389 =
	      inf_dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1389 =
	      inf_dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d1389 =
		   inf_dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   inf_dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   inf_dp0_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(inf_dp0_tlp_readReq$D_OUT or
	  inf_dp0_bram_serverAdapterA_3_outData_outData$wget or
	  inf_dp0_bram_serverAdapterA_outData_outData$wget or
	  inf_dp0_bram_serverAdapterA_1_outData_outData$wget or
	  inf_dp0_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (inf_dp0_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098 =
	      inf_dp0_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098 =
	      inf_dp0_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098 =
	      inf_dp0_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_inf_dp0_tlp_readReq_first__374_BITS_30_TO_2_ETC___d7098 =
	      inf_dp0_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(inf_dp0_tlp_readReq$D_OUT or
	  inf_dp0_bram_serverAdapterA_3_outData_outData$whas or
	  inf_dp0_bram_serverAdapterA_1_outData_outData$whas or
	  inf_dp0_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (inf_dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q29 =
	      inf_dp0_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q29 =
	      inf_dp0_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_inf_dp0_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q29 =
		   inf_dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   inf_dp0_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(inf_dp0_wmi_p4B or
	  inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  inf_dp0_bram_serverAdapterB_3_outData_enqData$whas or
	  inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  inf_dp0_bram_serverAdapterB_1_outData_enqData$whas or
	  inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  inf_dp0_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (inf_dp0_wmi_p4B)
      2'd1:
	  IF_inf_dp0_wmi_p4B_806_EQ_1_809_THEN_inf_dp0_b_ETC___d1815 =
	      inf_dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_inf_dp0_wmi_p4B_806_EQ_1_809_THEN_inf_dp0_b_ETC___d1815 =
	      inf_dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      inf_dp0_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_inf_dp0_wmi_p4B_806_EQ_1_809_THEN_inf_dp0_b_ETC___d1815 =
		   inf_dp0_wmi_p4B != 2'd3 ||
		   inf_dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   inf_dp0_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(inf_dp0_wmi_p4B or
	  inf_dp0_bram_serverAdapterB_3_outData_outData$whas or
	  inf_dp0_bram_serverAdapterB_1_outData_outData$whas or
	  inf_dp0_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (inf_dp0_wmi_p4B)
      2'd1:
	  CASE_inf_dp0_wmi_p4B_NOT_inf_dp0_wmi_p4B_EQ_3__ETC__q30 =
	      inf_dp0_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_inf_dp0_wmi_p4B_NOT_inf_dp0_wmi_p4B_EQ_3__ETC__q30 =
	      inf_dp0_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_inf_dp0_wmi_p4B_NOT_inf_dp0_wmi_p4B_EQ_3__ETC__q30 =
		   inf_dp0_wmi_p4B != 2'd3 ||
		   inf_dp0_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(inf_dp1_tlp_readReq$D_OUT or
	  inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  inf_dp1_bram_serverAdapterA_3_outData_enqData$whas or
	  inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  inf_dp1_bram_serverAdapterA_1_outData_enqData$whas or
	  inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  inf_dp1_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (inf_dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3575 =
	      inf_dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3575 =
	      inf_dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d3575 =
		   inf_dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   inf_dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   inf_dp1_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(inf_dp1_tlp_readReq$D_OUT or
	  inf_dp1_bram_serverAdapterA_3_outData_outData$wget or
	  inf_dp1_bram_serverAdapterA_outData_outData$wget or
	  inf_dp1_bram_serverAdapterA_1_outData_outData$wget or
	  inf_dp1_bram_serverAdapterA_2_outData_outData$wget)
  begin
    case (inf_dp1_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363 =
	      inf_dp1_bram_serverAdapterA_outData_outData$wget;
      2'd1:
	  IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363 =
	      inf_dp1_bram_serverAdapterA_1_outData_outData$wget;
      2'd2:
	  IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363 =
	      inf_dp1_bram_serverAdapterA_2_outData_outData$wget;
      2'd3:
	  IF_inf_dp1_tlp_readReq_first__560_BITS_30_TO_2_ETC___d7363 =
	      inf_dp1_bram_serverAdapterA_3_outData_outData$wget;
    endcase
  end
  always@(inf_dp1_tlp_readReq$D_OUT or
	  inf_dp1_bram_serverAdapterA_3_outData_outData$whas or
	  inf_dp1_bram_serverAdapterA_1_outData_outData$whas or
	  inf_dp1_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (inf_dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q31 =
	      inf_dp1_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q31 =
	      inf_dp1_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_inf_dp1_tlp_readReqD_OUT_BITS_30_TO_29_N_ETC__q31 =
		   inf_dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   inf_dp1_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(inf_dp1_wmi_p4B or
	  inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N or
	  inf_dp1_bram_serverAdapterB_3_outData_enqData$whas or
	  inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N or
	  inf_dp1_bram_serverAdapterB_1_outData_enqData$whas or
	  inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N or
	  inf_dp1_bram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (inf_dp1_wmi_p4B)
      2'd1:
	  IF_inf_dp1_wmi_p4B_992_EQ_1_995_THEN_inf_dp1_b_ETC___d4001 =
	      inf_dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_inf_dp1_wmi_p4B_992_EQ_1_995_THEN_inf_dp1_b_ETC___d4001 =
	      inf_dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      inf_dp1_bram_serverAdapterB_2_outData_enqData$whas;
      default: IF_inf_dp1_wmi_p4B_992_EQ_1_995_THEN_inf_dp1_b_ETC___d4001 =
		   inf_dp1_wmi_p4B != 2'd3 ||
		   inf_dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
		   inf_dp1_bram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(inf_dp1_wmi_p4B or
	  inf_dp1_bram_serverAdapterB_3_outData_outData$whas or
	  inf_dp1_bram_serverAdapterB_1_outData_outData$whas or
	  inf_dp1_bram_serverAdapterB_2_outData_outData$whas)
  begin
    case (inf_dp1_wmi_p4B)
      2'd1:
	  CASE_inf_dp1_wmi_p4B_NOT_inf_dp1_wmi_p4B_EQ_3__ETC__q32 =
	      inf_dp1_bram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_inf_dp1_wmi_p4B_NOT_inf_dp1_wmi_p4B_EQ_3__ETC__q32 =
	      inf_dp1_bram_serverAdapterB_2_outData_outData$whas;
      default: CASE_inf_dp1_wmi_p4B_NOT_inf_dp1_wmi_p4B_EQ_3__ETC__q32 =
		   inf_dp1_wmi_p4B != 2'd3 ||
		   inf_dp1_bram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(app_appW2_wci_reqF$D_OUT or
	  app_appW2_smaCtrl or
	  app_appW2_mesgCount or
	  app_appW2_abortCount or
	  app_appW2_thisMesg or
	  app_appW2_lastMesg or
	  rdat__h184754 or
	  app_appW2_wsiS_extStatusW$wget or app_appW2_wsiM_extStatusW$wget)
  begin
    case (app_appW2_wci_reqF$D_OUT[39:32])
      8'h0: x_data__h184661 = app_appW2_smaCtrl;
      8'h04: x_data__h184661 = app_appW2_mesgCount;
      8'h08: x_data__h184661 = app_appW2_abortCount;
      8'h10: x_data__h184661 = app_appW2_thisMesg;
      8'h14: x_data__h184661 = app_appW2_lastMesg;
      8'h18: x_data__h184661 = rdat__h184754;
      8'h20: x_data__h184661 = app_appW2_wsiS_extStatusW$wget[95:64];
      8'h24: x_data__h184661 = app_appW2_wsiS_extStatusW$wget[63:32];
      8'h28: x_data__h184661 = app_appW2_wsiS_extStatusW$wget[31:0];
      8'h2C: x_data__h184661 = app_appW2_wsiM_extStatusW$wget[95:64];
      8'h30: x_data__h184661 = app_appW2_wsiM_extStatusW$wget[63:32];
      8'h34: x_data__h184661 = app_appW2_wsiM_extStatusW$wget[31:0];
      default: x_data__h184661 = 32'd0;
    endcase
  end
  always@(app_appW3_wci_reqF$D_OUT or
	  app_appW3_dlyCtrl or
	  app_appW3_dlyHoldoffBytes or
	  app_appW3_dlyHoldoffCycles or
	  app_appW3_mesgWtCount or
	  app_appW3_mesgRdCount or
	  app_appW3_bytesWritten or
	  rdat__h208685 or
	  app_appW3_wsiS_extStatusW$wget or
	  app_appW3_wsiM_extStatusW$wget or
	  app_appW3_wmemiWrReq or
	  app_appW3_wmemiRdReq or
	  app_appW3_wmemiRdResp1 or
	  rdat__h208871 or
	  rdat__h208880 or
	  rdat__h208889 or
	  rdat__h208898 or
	  app_appW3_dlyRdOpZero or
	  app_appW3_dlyRdOpOther or
	  app_appW3_wmemiRdResp2 or
	  delayStatus__h208247 or
	  rdat__h208971 or rdat__h208980 or rdat__h208989 or rdat__h208998)
  begin
    case (app_appW3_wci_reqF$D_OUT[51:32])
      20'h0: x_data__h208637 = app_appW3_dlyCtrl;
      20'h00004: x_data__h208637 = app_appW3_dlyHoldoffBytes;
      20'h00008: x_data__h208637 = app_appW3_dlyHoldoffCycles;
      20'h0000C: x_data__h208637 = app_appW3_mesgWtCount;
      20'h00010: x_data__h208637 = app_appW3_mesgRdCount;
      20'h00014: x_data__h208637 = app_appW3_bytesWritten;
      20'h00018: x_data__h208637 = rdat__h208685;
      20'h0001C: x_data__h208637 = 32'd0;
      20'h00020: x_data__h208637 = app_appW3_wsiS_extStatusW$wget[95:64];
      20'h00024: x_data__h208637 = app_appW3_wsiS_extStatusW$wget[63:32];
      20'h00028: x_data__h208637 = app_appW3_wsiS_extStatusW$wget[31:0];
      20'h0002C: x_data__h208637 = app_appW3_wsiM_extStatusW$wget[95:64];
      20'h00030: x_data__h208637 = app_appW3_wsiM_extStatusW$wget[63:32];
      20'h00034: x_data__h208637 = app_appW3_wsiM_extStatusW$wget[31:0];
      20'h00038: x_data__h208637 = app_appW3_wmemiWrReq;
      20'h0003C: x_data__h208637 = app_appW3_wmemiRdReq;
      20'h00040: x_data__h208637 = app_appW3_wmemiRdResp1;
      20'h00044: x_data__h208637 = rdat__h208871;
      20'h00048: x_data__h208637 = rdat__h208880;
      20'h0004C: x_data__h208637 = rdat__h208889;
      20'h00050: x_data__h208637 = rdat__h208898;
      20'h00058: x_data__h208637 = app_appW3_dlyRdOpZero;
      20'h0005C: x_data__h208637 = app_appW3_dlyRdOpOther;
      20'h00060: x_data__h208637 = app_appW3_wmemiRdResp2;
      20'h00064: x_data__h208637 = delayStatus__h208247;
      20'h00068: x_data__h208637 = rdat__h208971;
      20'h0006C: x_data__h208637 = rdat__h208980;
      20'h00070: x_data__h208637 = rdat__h208989;
      20'h00074: x_data__h208637 = rdat__h208998;
      default: x_data__h208637 = 32'd0;
    endcase
  end
  always@(app_appW4_wci_reqF$D_OUT or
	  app_appW4_smaCtrl or
	  app_appW4_mesgCount or
	  app_appW4_abortCount or
	  app_appW4_thisMesg or
	  app_appW4_lastMesg or
	  rdat__h232166 or
	  app_appW4_wsiS_extStatusW$wget or app_appW4_wsiM_extStatusW$wget)
  begin
    case (app_appW4_wci_reqF$D_OUT[39:32])
      8'h0: x_data__h232073 = app_appW4_smaCtrl;
      8'h04: x_data__h232073 = app_appW4_mesgCount;
      8'h08: x_data__h232073 = app_appW4_abortCount;
      8'h10: x_data__h232073 = app_appW4_thisMesg;
      8'h14: x_data__h232073 = app_appW4_lastMesg;
      8'h18: x_data__h232073 = rdat__h232166;
      8'h20: x_data__h232073 = app_appW4_wsiS_extStatusW$wget[95:64];
      8'h24: x_data__h232073 = app_appW4_wsiS_extStatusW$wget[63:32];
      8'h28: x_data__h232073 = app_appW4_wsiS_extStatusW$wget[31:0];
      8'h2C: x_data__h232073 = app_appW4_wsiM_extStatusW$wget[95:64];
      8'h30: x_data__h232073 = app_appW4_wsiM_extStatusW$wget[63:32];
      8'h34: x_data__h232073 = app_appW4_wsiM_extStatusW$wget[31:0];
      default: x_data__h232073 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        inf_chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inf_itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	inf_itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	inf_itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (inf_chompCnt$EN)
	  inf_chompCnt <= `BSV_ASSIGNMENT_DELAY inf_chompCnt$D_IN;
	if (inf_itc0_wti_nowReq$EN)
	  inf_itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY
	      inf_itc0_wti_nowReq$D_IN;
	if (inf_itc0_wti_sThreadBusy_d$EN)
	  inf_itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      inf_itc0_wti_sThreadBusy_d$D_IN;
	if (inf_itc1_wti_nowReq$EN)
	  inf_itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY
	      inf_itc1_wti_nowReq$D_IN;
	if (inf_itc1_wti_sThreadBusy_d$EN)
	  inf_itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      inf_itc1_wti_sThreadBusy_d$D_IN;
      end
    if (!inf_cp$RST_N_wci_Vm_14)
      begin
        inf_dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	inf_dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	inf_dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	inf_dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	inf_dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	inf_dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	inf_dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	inf_dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	inf_dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	inf_dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	inf_dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	inf_dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	inf_dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	inf_dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	inf_dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	inf_dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	inf_dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	inf_dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	inf_dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	inf_dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	inf_dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	inf_dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	inf_dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	inf_dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	inf_dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (inf_dp1_bml_crdBuf_modulus$EN)
	  inf_dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_crdBuf_modulus$D_IN;
	if (inf_dp1_bml_crdBuf_value$EN)
	  inf_dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_crdBuf_value$D_IN;
	if (inf_dp1_bml_fabAvail$EN)
	  inf_dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabAvail$D_IN;
	if (inf_dp1_bml_fabBuf_modulus$EN)
	  inf_dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabBuf_modulus$D_IN;
	if (inf_dp1_bml_fabBuf_value$EN)
	  inf_dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabBuf_value$D_IN;
	if (inf_dp1_bml_fabDone$EN)
	  inf_dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabDone$D_IN;
	if (inf_dp1_bml_fabFlowBase$EN)
	  inf_dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabFlowBase$D_IN;
	if (inf_dp1_bml_fabFlowSize$EN)
	  inf_dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabFlowSize$D_IN;
	if (inf_dp1_bml_fabMesgBase$EN)
	  inf_dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabMesgBase$D_IN;
	if (inf_dp1_bml_fabMesgSize$EN)
	  inf_dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabMesgSize$D_IN;
	if (inf_dp1_bml_fabMetaBase$EN)
	  inf_dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabMetaBase$D_IN;
	if (inf_dp1_bml_fabMetaSize$EN)
	  inf_dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabMetaSize$D_IN;
	if (inf_dp1_bml_fabNumBufs$EN)
	  inf_dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_fabNumBufs$D_IN;
	if (inf_dp1_bml_lclBufDone$EN)
	  inf_dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_lclBufDone$D_IN;
	if (inf_dp1_bml_lclBufStart$EN)
	  inf_dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_lclBufStart$D_IN;
	if (inf_dp1_bml_lclBuf_modulus$EN)
	  inf_dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_lclBuf_modulus$D_IN;
	if (inf_dp1_bml_lclBuf_value$EN)
	  inf_dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_lclBuf_value$D_IN;
	if (inf_dp1_bml_lclDones$EN)
	  inf_dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_lclDones$D_IN;
	if (inf_dp1_bml_lclNumBufs$EN)
	  inf_dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_lclNumBufs$D_IN;
	if (inf_dp1_bml_lclStarts$EN)
	  inf_dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_lclStarts$D_IN;
	if (inf_dp1_bml_mesgBase$EN)
	  inf_dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_mesgBase$D_IN;
	if (inf_dp1_bml_mesgSize$EN)
	  inf_dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_mesgSize$D_IN;
	if (inf_dp1_bml_metaBase$EN)
	  inf_dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_metaBase$D_IN;
	if (inf_dp1_bml_metaSize$EN)
	  inf_dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_metaSize$D_IN;
	if (inf_dp1_bml_remBuf_modulus$EN)
	  inf_dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_remBuf_modulus$D_IN;
	if (inf_dp1_bml_remBuf_value$EN)
	  inf_dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_remBuf_value$D_IN;
	if (inf_dp1_bml_remDone$EN)
	  inf_dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_remDone$D_IN;
	if (inf_dp1_bml_remDones$EN)
	  inf_dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_remDones$D_IN;
	if (inf_dp1_bml_remStart$EN)
	  inf_dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_remStart$D_IN;
	if (inf_dp1_bml_remStarts$EN)
	  inf_dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bml_remStarts$D_IN;
	if (inf_dp1_bram_serverAdapterA_1_cnt$EN)
	  inf_dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_1_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterA_1_s1$EN)
	  inf_dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_1_s1$D_IN;
	if (inf_dp1_bram_serverAdapterA_2_cnt$EN)
	  inf_dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_2_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterA_2_s1$EN)
	  inf_dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_2_s1$D_IN;
	if (inf_dp1_bram_serverAdapterA_3_cnt$EN)
	  inf_dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_3_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterA_3_s1$EN)
	  inf_dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_3_s1$D_IN;
	if (inf_dp1_bram_serverAdapterA_cnt$EN)
	  inf_dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterA_s1$EN)
	  inf_dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterA_s1$D_IN;
	if (inf_dp1_bram_serverAdapterB_1_cnt$EN)
	  inf_dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_1_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterB_1_s1$EN)
	  inf_dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_1_s1$D_IN;
	if (inf_dp1_bram_serverAdapterB_2_cnt$EN)
	  inf_dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_2_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterB_2_s1$EN)
	  inf_dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_2_s1$D_IN;
	if (inf_dp1_bram_serverAdapterB_3_cnt$EN)
	  inf_dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_3_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterB_3_s1$EN)
	  inf_dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_3_s1$D_IN;
	if (inf_dp1_bram_serverAdapterB_cnt$EN)
	  inf_dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_cnt$D_IN;
	if (inf_dp1_bram_serverAdapterB_s1$EN)
	  inf_dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_bram_serverAdapterB_s1$D_IN;
	if (inf_dp1_dpControl$EN)
	  inf_dp1_dpControl <= `BSV_ASSIGNMENT_DELAY inf_dp1_dpControl$D_IN;
	if (inf_dp1_tlp_creditReady$EN)
	  inf_dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_creditReady$D_IN;
	if (inf_dp1_tlp_debugBdata$EN)
	  inf_dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_debugBdata$D_IN;
	if (inf_dp1_tlp_dmaDoTailEvent$EN)
	  inf_dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_dmaDoTailEvent$D_IN;
	if (inf_dp1_tlp_dmaTag$EN)
	  inf_dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY inf_dp1_tlp_dmaTag$D_IN;
	if (inf_dp1_tlp_doXmtMetaBody$EN)
	  inf_dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_doXmtMetaBody$D_IN;
	if (inf_dp1_tlp_fabMeta$EN)
	  inf_dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_fabMeta$D_IN;
	if (inf_dp1_tlp_farBufReady$EN)
	  inf_dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_farBufReady$D_IN;
	if (inf_dp1_tlp_flowDiagCount$EN)
	  inf_dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_flowDiagCount$D_IN;
	if (inf_dp1_tlp_gotResponseHeader$EN)
	  inf_dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_gotResponseHeader$D_IN;
	if (inf_dp1_tlp_maxPayloadSize$EN)
	  inf_dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_maxPayloadSize$D_IN;
	if (inf_dp1_tlp_maxReadReqSize$EN)
	  inf_dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_maxReadReqSize$D_IN;
	if (inf_dp1_tlp_nearBufReady$EN)
	  inf_dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_nearBufReady$D_IN;
	if (inf_dp1_tlp_postSeqDwell$EN)
	  inf_dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_postSeqDwell$D_IN;
	if (inf_dp1_tlp_pullTagMatch$EN)
	  inf_dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_pullTagMatch$D_IN;
	if (inf_dp1_tlp_readHeaderSent$EN)
	  inf_dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_readHeaderSent$D_IN;
	if (inf_dp1_tlp_readStarted$EN)
	  inf_dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_readStarted$D_IN;
	if (inf_dp1_tlp_remDone$EN)
	  inf_dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_remDone$D_IN;
	if (inf_dp1_tlp_remStart$EN)
	  inf_dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_remStart$D_IN;
	if (inf_dp1_tlp_reqMesgInFlight$EN)
	  inf_dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_reqMesgInFlight$D_IN;
	if (inf_dp1_tlp_reqMetaBodyInFlight$EN)
	  inf_dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_reqMetaBodyInFlight$D_IN;
	if (inf_dp1_tlp_reqMetaInFlight$EN)
	  inf_dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_reqMetaInFlight$D_IN;
	if (inf_dp1_tlp_tlpMetaSent$EN)
	  inf_dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_tlpMetaSent$D_IN;
	if (inf_dp1_tlp_tlpRcvBusy$EN)
	  inf_dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_tlpRcvBusy$D_IN;
	if (inf_dp1_tlp_tlpXmtBusy$EN)
	  inf_dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_tlpXmtBusy$D_IN;
	if (inf_dp1_tlp_xmtMetaInFlight$EN)
	  inf_dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_xmtMetaInFlight$D_IN;
	if (inf_dp1_tlp_xmtMetaOK$EN)
	  inf_dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_tlp_xmtMetaOK$D_IN;
	if (inf_dp1_wci_cEdge$EN)
	  inf_dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY inf_dp1_wci_cEdge$D_IN;
	if (inf_dp1_wci_cState$EN)
	  inf_dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY inf_dp1_wci_cState$D_IN;
	if (inf_dp1_wci_ctlAckReg$EN)
	  inf_dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_ctlAckReg$D_IN;
	if (inf_dp1_wci_ctlOpActive$EN)
	  inf_dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_ctlOpActive$D_IN;
	if (inf_dp1_wci_illegalEdge$EN)
	  inf_dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_illegalEdge$D_IN;
	if (inf_dp1_wci_nState$EN)
	  inf_dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY inf_dp1_wci_nState$D_IN;
	if (inf_dp1_wci_reqF_countReg$EN)
	  inf_dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_reqF_countReg$D_IN;
	if (inf_dp1_wci_respF_c_r$EN)
	  inf_dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_respF_c_r$D_IN;
	if (inf_dp1_wci_respF_q_0$EN)
	  inf_dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_respF_q_0$D_IN;
	if (inf_dp1_wci_respF_q_1$EN)
	  inf_dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_respF_q_1$D_IN;
	if (inf_dp1_wci_sFlagReg$EN)
	  inf_dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_sFlagReg$D_IN;
	if (inf_dp1_wci_sThreadBusy_d$EN)
	  inf_dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wci_sThreadBusy_d$D_IN;
	if (inf_dp1_wmi_bufDwell$EN)
	  inf_dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_bufDwell$D_IN;
	if (inf_dp1_wmi_bytesRemainResp$EN)
	  inf_dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_bytesRemainResp$D_IN;
	if (inf_dp1_wmi_doneWithMesg$EN)
	  inf_dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_doneWithMesg$D_IN;
	if (inf_dp1_wmi_lastMesg$EN)
	  inf_dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_lastMesg$D_IN;
	if (inf_dp1_wmi_mesgBufReady$EN)
	  inf_dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_mesgBufReady$D_IN;
	if (inf_dp1_wmi_mesgBusy$EN)
	  inf_dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_mesgBusy$D_IN;
	if (inf_dp1_wmi_mesgCount$EN)
	  inf_dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_mesgCount$D_IN;
	if (inf_dp1_wmi_mesgDone$EN)
	  inf_dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_mesgDone$D_IN;
	if (inf_dp1_wmi_mesgMeta$EN)
	  inf_dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_mesgMeta$D_IN;
	if (inf_dp1_wmi_mesgStart$EN)
	  inf_dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_mesgStart$D_IN;
	if (inf_dp1_wmi_metaBusy$EN)
	  inf_dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_metaBusy$D_IN;
	if (inf_dp1_wmi_p4B$EN)
	  inf_dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY inf_dp1_wmi_p4B$D_IN;
	if (inf_dp1_wmi_rdActive$EN)
	  inf_dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_rdActive$D_IN;
	if (inf_dp1_wmi_reqCount$EN)
	  inf_dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_reqCount$D_IN;
	if (inf_dp1_wmi_thisMesg$EN)
	  inf_dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_thisMesg$D_IN;
	if (inf_dp1_wmi_wmi_blockReq$EN)
	  inf_dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_blockReq$D_IN;
	if (inf_dp1_wmi_wmi_dhF_countReg$EN)
	  inf_dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_dhF_countReg$D_IN;
	if (inf_dp1_wmi_wmi_dhF_levelsValid$EN)
	  inf_dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_dhF_levelsValid$D_IN;
	if (inf_dp1_wmi_wmi_errorSticky$EN)
	  inf_dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_errorSticky$D_IN;
	if (inf_dp1_wmi_wmi_mFlagF_countReg$EN)
	  inf_dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_mFlagF_countReg$D_IN;
	if (inf_dp1_wmi_wmi_mFlagF_levelsValid$EN)
	  inf_dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (inf_dp1_wmi_wmi_mFlagReg$EN)
	  inf_dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_mFlagReg$D_IN;
	if (inf_dp1_wmi_wmi_operateD$EN)
	  inf_dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_operateD$D_IN;
	if (inf_dp1_wmi_wmi_peerIsReady$EN)
	  inf_dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_peerIsReady$D_IN;
	if (inf_dp1_wmi_wmi_reqF_countReg$EN)
	  inf_dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_reqF_countReg$D_IN;
	if (inf_dp1_wmi_wmi_reqF_levelsValid$EN)
	  inf_dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_reqF_levelsValid$D_IN;
	if (inf_dp1_wmi_wmi_respF_c_r$EN)
	  inf_dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_respF_c_r$D_IN;
	if (inf_dp1_wmi_wmi_respF_q_0$EN)
	  inf_dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_respF_q_0$D_IN;
	if (inf_dp1_wmi_wmi_respF_q_1$EN)
	  inf_dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_respF_q_1$D_IN;
	if (inf_dp1_wmi_wmi_sFlagReg$EN)
	  inf_dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_sFlagReg$D_IN;
	if (inf_dp1_wmi_wmi_trafficSticky$EN)
	  inf_dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wmi_trafficSticky$D_IN;
	if (inf_dp1_wmi_wrActive$EN)
	  inf_dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wrActive$D_IN;
	if (inf_dp1_wmi_wrFinalize$EN)
	  inf_dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wrFinalize$D_IN;
	if (inf_dp1_wmi_wrtCount$EN)
	  inf_dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp1_wmi_wrtCount$D_IN;
	if (inf_dp1_wti_nowReq$EN)
	  inf_dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY inf_dp1_wti_nowReq$D_IN;
      end
    if (!inf_cp$RST_N_wci_Vm_13)
      begin
        inf_dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	inf_dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	inf_dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	inf_dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	inf_dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	inf_dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	inf_dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	inf_dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	inf_dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	inf_dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	inf_dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	inf_dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	inf_dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	inf_dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	inf_dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	inf_dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	inf_dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	inf_dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	inf_dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	inf_dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	inf_dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	inf_dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inf_dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	inf_dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	inf_dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	inf_dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	inf_dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inf_dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inf_dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	inf_dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inf_dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inf_dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inf_dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (inf_dp0_bml_crdBuf_modulus$EN)
	  inf_dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_crdBuf_modulus$D_IN;
	if (inf_dp0_bml_crdBuf_value$EN)
	  inf_dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_crdBuf_value$D_IN;
	if (inf_dp0_bml_fabAvail$EN)
	  inf_dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabAvail$D_IN;
	if (inf_dp0_bml_fabBuf_modulus$EN)
	  inf_dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabBuf_modulus$D_IN;
	if (inf_dp0_bml_fabBuf_value$EN)
	  inf_dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabBuf_value$D_IN;
	if (inf_dp0_bml_fabDone$EN)
	  inf_dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabDone$D_IN;
	if (inf_dp0_bml_fabFlowBase$EN)
	  inf_dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabFlowBase$D_IN;
	if (inf_dp0_bml_fabFlowSize$EN)
	  inf_dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabFlowSize$D_IN;
	if (inf_dp0_bml_fabMesgBase$EN)
	  inf_dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabMesgBase$D_IN;
	if (inf_dp0_bml_fabMesgSize$EN)
	  inf_dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabMesgSize$D_IN;
	if (inf_dp0_bml_fabMetaBase$EN)
	  inf_dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabMetaBase$D_IN;
	if (inf_dp0_bml_fabMetaSize$EN)
	  inf_dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabMetaSize$D_IN;
	if (inf_dp0_bml_fabNumBufs$EN)
	  inf_dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_fabNumBufs$D_IN;
	if (inf_dp0_bml_lclBufDone$EN)
	  inf_dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_lclBufDone$D_IN;
	if (inf_dp0_bml_lclBufStart$EN)
	  inf_dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_lclBufStart$D_IN;
	if (inf_dp0_bml_lclBuf_modulus$EN)
	  inf_dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_lclBuf_modulus$D_IN;
	if (inf_dp0_bml_lclBuf_value$EN)
	  inf_dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_lclBuf_value$D_IN;
	if (inf_dp0_bml_lclDones$EN)
	  inf_dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_lclDones$D_IN;
	if (inf_dp0_bml_lclNumBufs$EN)
	  inf_dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_lclNumBufs$D_IN;
	if (inf_dp0_bml_lclStarts$EN)
	  inf_dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_lclStarts$D_IN;
	if (inf_dp0_bml_mesgBase$EN)
	  inf_dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_mesgBase$D_IN;
	if (inf_dp0_bml_mesgSize$EN)
	  inf_dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_mesgSize$D_IN;
	if (inf_dp0_bml_metaBase$EN)
	  inf_dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_metaBase$D_IN;
	if (inf_dp0_bml_metaSize$EN)
	  inf_dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_metaSize$D_IN;
	if (inf_dp0_bml_remBuf_modulus$EN)
	  inf_dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_remBuf_modulus$D_IN;
	if (inf_dp0_bml_remBuf_value$EN)
	  inf_dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_remBuf_value$D_IN;
	if (inf_dp0_bml_remDone$EN)
	  inf_dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_remDone$D_IN;
	if (inf_dp0_bml_remDones$EN)
	  inf_dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_remDones$D_IN;
	if (inf_dp0_bml_remStart$EN)
	  inf_dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_remStart$D_IN;
	if (inf_dp0_bml_remStarts$EN)
	  inf_dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bml_remStarts$D_IN;
	if (inf_dp0_bram_serverAdapterA_1_cnt$EN)
	  inf_dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_1_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterA_1_s1$EN)
	  inf_dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_1_s1$D_IN;
	if (inf_dp0_bram_serverAdapterA_2_cnt$EN)
	  inf_dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_2_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterA_2_s1$EN)
	  inf_dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_2_s1$D_IN;
	if (inf_dp0_bram_serverAdapterA_3_cnt$EN)
	  inf_dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_3_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterA_3_s1$EN)
	  inf_dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_3_s1$D_IN;
	if (inf_dp0_bram_serverAdapterA_cnt$EN)
	  inf_dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterA_s1$EN)
	  inf_dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterA_s1$D_IN;
	if (inf_dp0_bram_serverAdapterB_1_cnt$EN)
	  inf_dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_1_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterB_1_s1$EN)
	  inf_dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_1_s1$D_IN;
	if (inf_dp0_bram_serverAdapterB_2_cnt$EN)
	  inf_dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_2_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterB_2_s1$EN)
	  inf_dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_2_s1$D_IN;
	if (inf_dp0_bram_serverAdapterB_3_cnt$EN)
	  inf_dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_3_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterB_3_s1$EN)
	  inf_dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_3_s1$D_IN;
	if (inf_dp0_bram_serverAdapterB_cnt$EN)
	  inf_dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_cnt$D_IN;
	if (inf_dp0_bram_serverAdapterB_s1$EN)
	  inf_dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_bram_serverAdapterB_s1$D_IN;
	if (inf_dp0_dpControl$EN)
	  inf_dp0_dpControl <= `BSV_ASSIGNMENT_DELAY inf_dp0_dpControl$D_IN;
	if (inf_dp0_tlp_creditReady$EN)
	  inf_dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_creditReady$D_IN;
	if (inf_dp0_tlp_debugBdata$EN)
	  inf_dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_debugBdata$D_IN;
	if (inf_dp0_tlp_dmaDoTailEvent$EN)
	  inf_dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_dmaDoTailEvent$D_IN;
	if (inf_dp0_tlp_dmaTag$EN)
	  inf_dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY inf_dp0_tlp_dmaTag$D_IN;
	if (inf_dp0_tlp_doXmtMetaBody$EN)
	  inf_dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_doXmtMetaBody$D_IN;
	if (inf_dp0_tlp_fabMeta$EN)
	  inf_dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_fabMeta$D_IN;
	if (inf_dp0_tlp_farBufReady$EN)
	  inf_dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_farBufReady$D_IN;
	if (inf_dp0_tlp_flowDiagCount$EN)
	  inf_dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_flowDiagCount$D_IN;
	if (inf_dp0_tlp_gotResponseHeader$EN)
	  inf_dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_gotResponseHeader$D_IN;
	if (inf_dp0_tlp_maxPayloadSize$EN)
	  inf_dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_maxPayloadSize$D_IN;
	if (inf_dp0_tlp_maxReadReqSize$EN)
	  inf_dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_maxReadReqSize$D_IN;
	if (inf_dp0_tlp_nearBufReady$EN)
	  inf_dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_nearBufReady$D_IN;
	if (inf_dp0_tlp_postSeqDwell$EN)
	  inf_dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_postSeqDwell$D_IN;
	if (inf_dp0_tlp_pullTagMatch$EN)
	  inf_dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_pullTagMatch$D_IN;
	if (inf_dp0_tlp_readHeaderSent$EN)
	  inf_dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_readHeaderSent$D_IN;
	if (inf_dp0_tlp_readStarted$EN)
	  inf_dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_readStarted$D_IN;
	if (inf_dp0_tlp_remDone$EN)
	  inf_dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_remDone$D_IN;
	if (inf_dp0_tlp_remStart$EN)
	  inf_dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_remStart$D_IN;
	if (inf_dp0_tlp_reqMesgInFlight$EN)
	  inf_dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_reqMesgInFlight$D_IN;
	if (inf_dp0_tlp_reqMetaBodyInFlight$EN)
	  inf_dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_reqMetaBodyInFlight$D_IN;
	if (inf_dp0_tlp_reqMetaInFlight$EN)
	  inf_dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_reqMetaInFlight$D_IN;
	if (inf_dp0_tlp_tlpMetaSent$EN)
	  inf_dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_tlpMetaSent$D_IN;
	if (inf_dp0_tlp_tlpRcvBusy$EN)
	  inf_dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_tlpRcvBusy$D_IN;
	if (inf_dp0_tlp_tlpXmtBusy$EN)
	  inf_dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_tlpXmtBusy$D_IN;
	if (inf_dp0_tlp_xmtMetaInFlight$EN)
	  inf_dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_xmtMetaInFlight$D_IN;
	if (inf_dp0_tlp_xmtMetaOK$EN)
	  inf_dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_tlp_xmtMetaOK$D_IN;
	if (inf_dp0_wci_cEdge$EN)
	  inf_dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY inf_dp0_wci_cEdge$D_IN;
	if (inf_dp0_wci_cState$EN)
	  inf_dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY inf_dp0_wci_cState$D_IN;
	if (inf_dp0_wci_ctlAckReg$EN)
	  inf_dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_ctlAckReg$D_IN;
	if (inf_dp0_wci_ctlOpActive$EN)
	  inf_dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_ctlOpActive$D_IN;
	if (inf_dp0_wci_illegalEdge$EN)
	  inf_dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_illegalEdge$D_IN;
	if (inf_dp0_wci_nState$EN)
	  inf_dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY inf_dp0_wci_nState$D_IN;
	if (inf_dp0_wci_reqF_countReg$EN)
	  inf_dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_reqF_countReg$D_IN;
	if (inf_dp0_wci_respF_c_r$EN)
	  inf_dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_respF_c_r$D_IN;
	if (inf_dp0_wci_respF_q_0$EN)
	  inf_dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_respF_q_0$D_IN;
	if (inf_dp0_wci_respF_q_1$EN)
	  inf_dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_respF_q_1$D_IN;
	if (inf_dp0_wci_sFlagReg$EN)
	  inf_dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_sFlagReg$D_IN;
	if (inf_dp0_wci_sThreadBusy_d$EN)
	  inf_dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wci_sThreadBusy_d$D_IN;
	if (inf_dp0_wmi_bufDwell$EN)
	  inf_dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_bufDwell$D_IN;
	if (inf_dp0_wmi_bytesRemainResp$EN)
	  inf_dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_bytesRemainResp$D_IN;
	if (inf_dp0_wmi_doneWithMesg$EN)
	  inf_dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_doneWithMesg$D_IN;
	if (inf_dp0_wmi_lastMesg$EN)
	  inf_dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_lastMesg$D_IN;
	if (inf_dp0_wmi_mesgBufReady$EN)
	  inf_dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_mesgBufReady$D_IN;
	if (inf_dp0_wmi_mesgBusy$EN)
	  inf_dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_mesgBusy$D_IN;
	if (inf_dp0_wmi_mesgCount$EN)
	  inf_dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_mesgCount$D_IN;
	if (inf_dp0_wmi_mesgDone$EN)
	  inf_dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_mesgDone$D_IN;
	if (inf_dp0_wmi_mesgMeta$EN)
	  inf_dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_mesgMeta$D_IN;
	if (inf_dp0_wmi_mesgStart$EN)
	  inf_dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_mesgStart$D_IN;
	if (inf_dp0_wmi_metaBusy$EN)
	  inf_dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_metaBusy$D_IN;
	if (inf_dp0_wmi_p4B$EN)
	  inf_dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY inf_dp0_wmi_p4B$D_IN;
	if (inf_dp0_wmi_rdActive$EN)
	  inf_dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_rdActive$D_IN;
	if (inf_dp0_wmi_reqCount$EN)
	  inf_dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_reqCount$D_IN;
	if (inf_dp0_wmi_thisMesg$EN)
	  inf_dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_thisMesg$D_IN;
	if (inf_dp0_wmi_wmi_blockReq$EN)
	  inf_dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_blockReq$D_IN;
	if (inf_dp0_wmi_wmi_dhF_countReg$EN)
	  inf_dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_dhF_countReg$D_IN;
	if (inf_dp0_wmi_wmi_dhF_levelsValid$EN)
	  inf_dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_dhF_levelsValid$D_IN;
	if (inf_dp0_wmi_wmi_errorSticky$EN)
	  inf_dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_errorSticky$D_IN;
	if (inf_dp0_wmi_wmi_mFlagF_countReg$EN)
	  inf_dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_mFlagF_countReg$D_IN;
	if (inf_dp0_wmi_wmi_mFlagF_levelsValid$EN)
	  inf_dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (inf_dp0_wmi_wmi_mFlagReg$EN)
	  inf_dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_mFlagReg$D_IN;
	if (inf_dp0_wmi_wmi_operateD$EN)
	  inf_dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_operateD$D_IN;
	if (inf_dp0_wmi_wmi_peerIsReady$EN)
	  inf_dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_peerIsReady$D_IN;
	if (inf_dp0_wmi_wmi_reqF_countReg$EN)
	  inf_dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_reqF_countReg$D_IN;
	if (inf_dp0_wmi_wmi_reqF_levelsValid$EN)
	  inf_dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_reqF_levelsValid$D_IN;
	if (inf_dp0_wmi_wmi_respF_c_r$EN)
	  inf_dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_respF_c_r$D_IN;
	if (inf_dp0_wmi_wmi_respF_q_0$EN)
	  inf_dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_respF_q_0$D_IN;
	if (inf_dp0_wmi_wmi_respF_q_1$EN)
	  inf_dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_respF_q_1$D_IN;
	if (inf_dp0_wmi_wmi_sFlagReg$EN)
	  inf_dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_sFlagReg$D_IN;
	if (inf_dp0_wmi_wmi_trafficSticky$EN)
	  inf_dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wmi_trafficSticky$D_IN;
	if (inf_dp0_wmi_wrActive$EN)
	  inf_dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wrActive$D_IN;
	if (inf_dp0_wmi_wrFinalize$EN)
	  inf_dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wrFinalize$D_IN;
	if (inf_dp0_wmi_wrtCount$EN)
	  inf_dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY
	      inf_dp0_wmi_wrtCount$D_IN;
	if (inf_dp0_wti_nowReq$EN)
	  inf_dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY inf_dp0_wti_nowReq$D_IN;
      end
    if (!inf_cp$RST_N_wci_Vm_4)
      begin
        app_appW4_abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW4_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	app_appW4_firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_impreciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	app_appW4_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_mesgLength <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	app_appW4_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	app_appW4_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_mesgReqValid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	app_appW4_preciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	app_appW4_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW4_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW4_smaCtrl <= `BSV_ASSIGNMENT_DELAY 32'h00000002;
	app_appW4_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	app_appW4_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	app_appW4_valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	app_appW4_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	app_appW4_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	app_appW4_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	app_appW4_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	app_appW4_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW4_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	app_appW4_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	app_appW4_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	app_appW4_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	app_appW4_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	app_appW4_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	app_appW4_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW4_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW4_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW4_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW4_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW4_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	app_appW4_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW4_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (app_appW4_abortCount$EN)
	  app_appW4_abortCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_abortCount$D_IN;
	if (app_appW4_doAbort$EN)
	  app_appW4_doAbort <= `BSV_ASSIGNMENT_DELAY app_appW4_doAbort$D_IN;
	if (app_appW4_endOfMessage$EN)
	  app_appW4_endOfMessage <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_endOfMessage$D_IN;
	if (app_appW4_errCount$EN)
	  app_appW4_errCount <= `BSV_ASSIGNMENT_DELAY app_appW4_errCount$D_IN;
	if (app_appW4_fabRespCredit_value$EN)
	  app_appW4_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_fabRespCredit_value$D_IN;
	if (app_appW4_fabWordsRemain$EN)
	  app_appW4_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_fabWordsRemain$D_IN;
	if (app_appW4_firstMsgReq$EN)
	  app_appW4_firstMsgReq <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_firstMsgReq$D_IN;
	if (app_appW4_impreciseBurst$EN)
	  app_appW4_impreciseBurst <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_impreciseBurst$D_IN;
	if (app_appW4_lastMesg$EN)
	  app_appW4_lastMesg <= `BSV_ASSIGNMENT_DELAY app_appW4_lastMesg$D_IN;
	if (app_appW4_mesgCount$EN)
	  app_appW4_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_mesgCount$D_IN;
	if (app_appW4_mesgLength$EN)
	  app_appW4_mesgLength <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_mesgLength$D_IN;
	if (app_appW4_mesgLengthSoFar$EN)
	  app_appW4_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_mesgLengthSoFar$D_IN;
	if (app_appW4_mesgPreRequest$EN)
	  app_appW4_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_mesgPreRequest$D_IN;
	if (app_appW4_mesgReqOK$EN)
	  app_appW4_mesgReqOK <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_mesgReqOK$D_IN;
	if (app_appW4_mesgReqValid$EN)
	  app_appW4_mesgReqValid <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_mesgReqValid$D_IN;
	if (app_appW4_opcode$EN)
	  app_appW4_opcode <= `BSV_ASSIGNMENT_DELAY app_appW4_opcode$D_IN;
	if (app_appW4_preciseBurst$EN)
	  app_appW4_preciseBurst <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_preciseBurst$D_IN;
	if (app_appW4_readyToPush$EN)
	  app_appW4_readyToPush <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_readyToPush$D_IN;
	if (app_appW4_readyToRequest$EN)
	  app_appW4_readyToRequest <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_readyToRequest$D_IN;
	if (app_appW4_respF_rCache$EN)
	  app_appW4_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_respF_rCache$D_IN;
	if (app_appW4_respF_rRdPtr$EN)
	  app_appW4_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_respF_rRdPtr$D_IN;
	if (app_appW4_respF_rWrPtr$EN)
	  app_appW4_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_respF_rWrPtr$D_IN;
	if (app_appW4_smaCtrl$EN)
	  app_appW4_smaCtrl <= `BSV_ASSIGNMENT_DELAY app_appW4_smaCtrl$D_IN;
	if (app_appW4_thisMesg$EN)
	  app_appW4_thisMesg <= `BSV_ASSIGNMENT_DELAY app_appW4_thisMesg$D_IN;
	if (app_appW4_unrollCnt$EN)
	  app_appW4_unrollCnt <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_unrollCnt$D_IN;
	if (app_appW4_valExpect$EN)
	  app_appW4_valExpect <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_valExpect$D_IN;
	if (app_appW4_wci_cEdge$EN)
	  app_appW4_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_cEdge$D_IN;
	if (app_appW4_wci_cState$EN)
	  app_appW4_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_cState$D_IN;
	if (app_appW4_wci_ctlAckReg$EN)
	  app_appW4_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_ctlAckReg$D_IN;
	if (app_appW4_wci_ctlOpActive$EN)
	  app_appW4_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_ctlOpActive$D_IN;
	if (app_appW4_wci_illegalEdge$EN)
	  app_appW4_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_illegalEdge$D_IN;
	if (app_appW4_wci_nState$EN)
	  app_appW4_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_nState$D_IN;
	if (app_appW4_wci_reqF_countReg$EN)
	  app_appW4_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_reqF_countReg$D_IN;
	if (app_appW4_wci_respF_c_r$EN)
	  app_appW4_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_respF_c_r$D_IN;
	if (app_appW4_wci_respF_q_0$EN)
	  app_appW4_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_respF_q_0$D_IN;
	if (app_appW4_wci_respF_q_1$EN)
	  app_appW4_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_respF_q_1$D_IN;
	if (app_appW4_wci_sFlagReg$EN)
	  app_appW4_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_sFlagReg$D_IN;
	if (app_appW4_wci_sThreadBusy_d$EN)
	  app_appW4_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wci_sThreadBusy_d$D_IN;
	if (app_appW4_wmi_busyWithMessage$EN)
	  app_appW4_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_busyWithMessage$D_IN;
	if (app_appW4_wmi_dhF_c_r$EN)
	  app_appW4_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_dhF_c_r$D_IN;
	if (app_appW4_wmi_dhF_q_0$EN)
	  app_appW4_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_dhF_q_0$D_IN;
	if (app_appW4_wmi_dhF_q_1$EN)
	  app_appW4_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_dhF_q_1$D_IN;
	if (app_appW4_wmi_errorSticky$EN)
	  app_appW4_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_errorSticky$D_IN;
	if (app_appW4_wmi_mFlagF_c_r$EN)
	  app_appW4_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_mFlagF_c_r$D_IN;
	if (app_appW4_wmi_mFlagF_q_0$EN)
	  app_appW4_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_mFlagF_q_0$D_IN;
	if (app_appW4_wmi_mFlagF_q_1$EN)
	  app_appW4_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_mFlagF_q_1$D_IN;
	if (app_appW4_wmi_operateD$EN)
	  app_appW4_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_operateD$D_IN;
	if (app_appW4_wmi_peerIsReady$EN)
	  app_appW4_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_peerIsReady$D_IN;
	if (app_appW4_wmi_reqF_c_r$EN)
	  app_appW4_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_reqF_c_r$D_IN;
	if (app_appW4_wmi_reqF_q_0$EN)
	  app_appW4_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_reqF_q_0$D_IN;
	if (app_appW4_wmi_reqF_q_1$EN)
	  app_appW4_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_reqF_q_1$D_IN;
	if (app_appW4_wmi_sDataThreadBusy_d$EN)
	  app_appW4_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_sDataThreadBusy_d$D_IN;
	if (app_appW4_wmi_sFlagReg$EN)
	  app_appW4_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_sFlagReg$D_IN;
	if (app_appW4_wmi_sThreadBusy_d$EN)
	  app_appW4_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_sThreadBusy_d$D_IN;
	if (app_appW4_wmi_trafficSticky$EN)
	  app_appW4_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wmi_trafficSticky$D_IN;
	if (app_appW4_wsiM_burstKind$EN)
	  app_appW4_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_burstKind$D_IN;
	if (app_appW4_wsiM_errorSticky$EN)
	  app_appW4_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_errorSticky$D_IN;
	if (app_appW4_wsiM_iMesgCount$EN)
	  app_appW4_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_iMesgCount$D_IN;
	if (app_appW4_wsiM_operateD$EN)
	  app_appW4_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_operateD$D_IN;
	if (app_appW4_wsiM_pMesgCount$EN)
	  app_appW4_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_pMesgCount$D_IN;
	if (app_appW4_wsiM_peerIsReady$EN)
	  app_appW4_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_peerIsReady$D_IN;
	if (app_appW4_wsiM_reqFifo_c_r$EN)
	  app_appW4_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_reqFifo_c_r$D_IN;
	if (app_appW4_wsiM_reqFifo_q_0$EN)
	  app_appW4_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_reqFifo_q_0$D_IN;
	if (app_appW4_wsiM_reqFifo_q_1$EN)
	  app_appW4_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_reqFifo_q_1$D_IN;
	if (app_appW4_wsiM_sThreadBusy_d$EN)
	  app_appW4_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_sThreadBusy_d$D_IN;
	if (app_appW4_wsiM_tBusyCount$EN)
	  app_appW4_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_tBusyCount$D_IN;
	if (app_appW4_wsiM_trafficSticky$EN)
	  app_appW4_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiM_trafficSticky$D_IN;
	if (app_appW4_wsiS_burstKind$EN)
	  app_appW4_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_burstKind$D_IN;
	if (app_appW4_wsiS_errorSticky$EN)
	  app_appW4_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_errorSticky$D_IN;
	if (app_appW4_wsiS_iMesgCount$EN)
	  app_appW4_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_iMesgCount$D_IN;
	if (app_appW4_wsiS_operateD$EN)
	  app_appW4_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_operateD$D_IN;
	if (app_appW4_wsiS_pMesgCount$EN)
	  app_appW4_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_pMesgCount$D_IN;
	if (app_appW4_wsiS_peerIsReady$EN)
	  app_appW4_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_peerIsReady$D_IN;
	if (app_appW4_wsiS_reqFifo_countReg$EN)
	  app_appW4_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_reqFifo_countReg$D_IN;
	if (app_appW4_wsiS_reqFifo_levelsValid$EN)
	  app_appW4_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_reqFifo_levelsValid$D_IN;
	if (app_appW4_wsiS_tBusyCount$EN)
	  app_appW4_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_tBusyCount$D_IN;
	if (app_appW4_wsiS_trafficSticky$EN)
	  app_appW4_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_trafficSticky$D_IN;
	if (app_appW4_wsiS_wordCount$EN)
	  app_appW4_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiS_wordCount$D_IN;
	if (app_appW4_wsiWordsRemain$EN)
	  app_appW4_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_wsiWordsRemain$D_IN;
	if (app_appW4_zeroLengthMesg$EN)
	  app_appW4_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY
	      app_appW4_zeroLengthMesg$D_IN;
      end
    if (!inf_cp$RST_N_wci_Vm_3)
      begin
        app_appW3_bytesRead <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_bytesThisMessage <= `BSV_ASSIGNMENT_DELAY 24'd0;
	app_appW3_bytesWritten <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_cyclesPassed <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_dlyCtrl <= `BSV_ASSIGNMENT_DELAY 32'h0;
	app_appW3_dlyHoldoffBytes <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_dlyHoldoffCycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_dlyRAG <= `BSV_ASSIGNMENT_DELAY 23'd0;
	app_appW3_dlyRdOpOther <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_dlyRdOpZero <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_dlyReadCredit_value <= `BSV_ASSIGNMENT_DELAY 8'd0;
	app_appW3_dlyReadyToWrite_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	app_appW3_dlyWAG <= `BSV_ASSIGNMENT_DELAY 23'd0;
	app_appW3_dlyWordsStored_value <= `BSV_ASSIGNMENT_DELAY 25'd0;
	app_appW3_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	app_appW3_mesgRdCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_mesgWF_rCache <= `BSV_ASSIGNMENT_DELAY 46'h0AAAAAAAAAAA;
	app_appW3_mesgWF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	app_appW3_mesgWF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 13'd0;
	app_appW3_mesgWtCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_rdSerAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_rdSerEmpty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW3_rdSerPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_rdSerUnroll <= `BSV_ASSIGNMENT_DELAY 16'd0;
	app_appW3_rdSyncWord <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_tog50 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	app_appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	app_appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	app_appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	app_appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	app_appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	app_appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW3_wmemiRdReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wmemiRdResp1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wmemiRdResp2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wmemiWrReq <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wmemi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	app_appW3_wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    146'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	app_appW3_wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wmemi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW3_wmemi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	app_appW3_wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 52'h0AAAAAAAAAAAA;
	app_appW3_wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wrtSerAddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wrtSerPos <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wrtSerUnroll <= `BSV_ASSIGNMENT_DELAY 16'd0;
	app_appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	app_appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	app_appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (app_appW3_bytesRead$EN)
	  app_appW3_bytesRead <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_bytesRead$D_IN;
	if (app_appW3_bytesThisMessage$EN)
	  app_appW3_bytesThisMessage <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_bytesThisMessage$D_IN;
	if (app_appW3_bytesWritten$EN)
	  app_appW3_bytesWritten <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_bytesWritten$D_IN;
	if (app_appW3_cyclesPassed$EN)
	  app_appW3_cyclesPassed <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_cyclesPassed$D_IN;
	if (app_appW3_dlyCtrl$EN)
	  app_appW3_dlyCtrl <= `BSV_ASSIGNMENT_DELAY app_appW3_dlyCtrl$D_IN;
	if (app_appW3_dlyHoldoffBytes$EN)
	  app_appW3_dlyHoldoffBytes <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_dlyHoldoffBytes$D_IN;
	if (app_appW3_dlyHoldoffCycles$EN)
	  app_appW3_dlyHoldoffCycles <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_dlyHoldoffCycles$D_IN;
	if (app_appW3_dlyRAG$EN)
	  app_appW3_dlyRAG <= `BSV_ASSIGNMENT_DELAY app_appW3_dlyRAG$D_IN;
	if (app_appW3_dlyRdOpOther$EN)
	  app_appW3_dlyRdOpOther <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_dlyRdOpOther$D_IN;
	if (app_appW3_dlyRdOpZero$EN)
	  app_appW3_dlyRdOpZero <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_dlyRdOpZero$D_IN;
	if (app_appW3_dlyReadCredit_value$EN)
	  app_appW3_dlyReadCredit_value <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_dlyReadCredit_value$D_IN;
	if (app_appW3_dlyReadyToWrite_value$EN)
	  app_appW3_dlyReadyToWrite_value <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_dlyReadyToWrite_value$D_IN;
	if (app_appW3_dlyWAG$EN)
	  app_appW3_dlyWAG <= `BSV_ASSIGNMENT_DELAY app_appW3_dlyWAG$D_IN;
	if (app_appW3_dlyWordsStored_value$EN)
	  app_appW3_dlyWordsStored_value <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_dlyWordsStored_value$D_IN;
	if (app_appW3_mesgLengthSoFar$EN)
	  app_appW3_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_mesgLengthSoFar$D_IN;
	if (app_appW3_mesgRdCount$EN)
	  app_appW3_mesgRdCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_mesgRdCount$D_IN;
	if (app_appW3_mesgWF_rCache$EN)
	  app_appW3_mesgWF_rCache <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_mesgWF_rCache$D_IN;
	if (app_appW3_mesgWF_rRdPtr$EN)
	  app_appW3_mesgWF_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_mesgWF_rRdPtr$D_IN;
	if (app_appW3_mesgWF_rWrPtr$EN)
	  app_appW3_mesgWF_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_mesgWF_rWrPtr$D_IN;
	if (app_appW3_mesgWtCount$EN)
	  app_appW3_mesgWtCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_mesgWtCount$D_IN;
	if (app_appW3_rdSerAddr$EN)
	  app_appW3_rdSerAddr <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_rdSerAddr$D_IN;
	if (app_appW3_rdSerEmpty$EN)
	  app_appW3_rdSerEmpty <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_rdSerEmpty$D_IN;
	if (app_appW3_rdSerPos$EN)
	  app_appW3_rdSerPos <= `BSV_ASSIGNMENT_DELAY app_appW3_rdSerPos$D_IN;
	if (app_appW3_rdSerUnroll$EN)
	  app_appW3_rdSerUnroll <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_rdSerUnroll$D_IN;
	if (app_appW3_rdSyncWord$EN)
	  app_appW3_rdSyncWord <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_rdSyncWord$D_IN;
	if (app_appW3_tog50$EN)
	  app_appW3_tog50 <= `BSV_ASSIGNMENT_DELAY app_appW3_tog50$D_IN;
	if (app_appW3_unrollCnt$EN)
	  app_appW3_unrollCnt <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_unrollCnt$D_IN;
	if (app_appW3_wci_cEdge$EN)
	  app_appW3_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_cEdge$D_IN;
	if (app_appW3_wci_cState$EN)
	  app_appW3_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_cState$D_IN;
	if (app_appW3_wci_ctlAckReg$EN)
	  app_appW3_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_ctlAckReg$D_IN;
	if (app_appW3_wci_ctlOpActive$EN)
	  app_appW3_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_ctlOpActive$D_IN;
	if (app_appW3_wci_illegalEdge$EN)
	  app_appW3_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_illegalEdge$D_IN;
	if (app_appW3_wci_nState$EN)
	  app_appW3_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_nState$D_IN;
	if (app_appW3_wci_reqF_countReg$EN)
	  app_appW3_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_reqF_countReg$D_IN;
	if (app_appW3_wci_respF_c_r$EN)
	  app_appW3_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_respF_c_r$D_IN;
	if (app_appW3_wci_respF_q_0$EN)
	  app_appW3_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_respF_q_0$D_IN;
	if (app_appW3_wci_respF_q_1$EN)
	  app_appW3_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_respF_q_1$D_IN;
	if (app_appW3_wci_sFlagReg$EN)
	  app_appW3_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_sFlagReg$D_IN;
	if (app_appW3_wci_sThreadBusy_d$EN)
	  app_appW3_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wci_sThreadBusy_d$D_IN;
	if (app_appW3_wmemiRdReq$EN)
	  app_appW3_wmemiRdReq <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemiRdReq$D_IN;
	if (app_appW3_wmemiRdResp1$EN)
	  app_appW3_wmemiRdResp1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemiRdResp1$D_IN;
	if (app_appW3_wmemiRdResp2$EN)
	  app_appW3_wmemiRdResp2 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemiRdResp2$D_IN;
	if (app_appW3_wmemiWrReq$EN)
	  app_appW3_wmemiWrReq <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemiWrReq$D_IN;
	if (app_appW3_wmemi_busyWithMessage$EN)
	  app_appW3_wmemi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_busyWithMessage$D_IN;
	if (app_appW3_wmemi_dhF_c_r$EN)
	  app_appW3_wmemi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_dhF_c_r$D_IN;
	if (app_appW3_wmemi_dhF_q_0$EN)
	  app_appW3_wmemi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_dhF_q_0$D_IN;
	if (app_appW3_wmemi_dhF_q_1$EN)
	  app_appW3_wmemi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_dhF_q_1$D_IN;
	if (app_appW3_wmemi_errorSticky$EN)
	  app_appW3_wmemi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_errorSticky$D_IN;
	if (app_appW3_wmemi_operateD$EN)
	  app_appW3_wmemi_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_operateD$D_IN;
	if (app_appW3_wmemi_peerIsReady$EN)
	  app_appW3_wmemi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_peerIsReady$D_IN;
	if (app_appW3_wmemi_reqF_c_r$EN)
	  app_appW3_wmemi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_reqF_c_r$D_IN;
	if (app_appW3_wmemi_reqF_q_0$EN)
	  app_appW3_wmemi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_reqF_q_0$D_IN;
	if (app_appW3_wmemi_reqF_q_1$EN)
	  app_appW3_wmemi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_reqF_q_1$D_IN;
	if (app_appW3_wmemi_trafficSticky$EN)
	  app_appW3_wmemi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wmemi_trafficSticky$D_IN;
	if (app_appW3_wrtSerAddr$EN)
	  app_appW3_wrtSerAddr <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wrtSerAddr$D_IN;
	if (app_appW3_wrtSerPos$EN)
	  app_appW3_wrtSerPos <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wrtSerPos$D_IN;
	if (app_appW3_wrtSerUnroll$EN)
	  app_appW3_wrtSerUnroll <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wrtSerUnroll$D_IN;
	if (app_appW3_wsiM_burstKind$EN)
	  app_appW3_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_burstKind$D_IN;
	if (app_appW3_wsiM_errorSticky$EN)
	  app_appW3_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_errorSticky$D_IN;
	if (app_appW3_wsiM_iMesgCount$EN)
	  app_appW3_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_iMesgCount$D_IN;
	if (app_appW3_wsiM_operateD$EN)
	  app_appW3_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_operateD$D_IN;
	if (app_appW3_wsiM_pMesgCount$EN)
	  app_appW3_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_pMesgCount$D_IN;
	if (app_appW3_wsiM_peerIsReady$EN)
	  app_appW3_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_peerIsReady$D_IN;
	if (app_appW3_wsiM_reqFifo_c_r$EN)
	  app_appW3_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_reqFifo_c_r$D_IN;
	if (app_appW3_wsiM_reqFifo_q_0$EN)
	  app_appW3_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_reqFifo_q_0$D_IN;
	if (app_appW3_wsiM_reqFifo_q_1$EN)
	  app_appW3_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_reqFifo_q_1$D_IN;
	if (app_appW3_wsiM_sThreadBusy_d$EN)
	  app_appW3_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_sThreadBusy_d$D_IN;
	if (app_appW3_wsiM_tBusyCount$EN)
	  app_appW3_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_tBusyCount$D_IN;
	if (app_appW3_wsiM_trafficSticky$EN)
	  app_appW3_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiM_trafficSticky$D_IN;
	if (app_appW3_wsiS_burstKind$EN)
	  app_appW3_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_burstKind$D_IN;
	if (app_appW3_wsiS_errorSticky$EN)
	  app_appW3_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_errorSticky$D_IN;
	if (app_appW3_wsiS_iMesgCount$EN)
	  app_appW3_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_iMesgCount$D_IN;
	if (app_appW3_wsiS_operateD$EN)
	  app_appW3_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_operateD$D_IN;
	if (app_appW3_wsiS_pMesgCount$EN)
	  app_appW3_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_pMesgCount$D_IN;
	if (app_appW3_wsiS_peerIsReady$EN)
	  app_appW3_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_peerIsReady$D_IN;
	if (app_appW3_wsiS_reqFifo_countReg$EN)
	  app_appW3_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_reqFifo_countReg$D_IN;
	if (app_appW3_wsiS_reqFifo_levelsValid$EN)
	  app_appW3_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_reqFifo_levelsValid$D_IN;
	if (app_appW3_wsiS_tBusyCount$EN)
	  app_appW3_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_tBusyCount$D_IN;
	if (app_appW3_wsiS_trafficSticky$EN)
	  app_appW3_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_trafficSticky$D_IN;
	if (app_appW3_wsiS_wordCount$EN)
	  app_appW3_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW3_wsiS_wordCount$D_IN;
      end
    if (!inf_cp$RST_N_wci_Vm_2)
      begin
        app_appW2_abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW2_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	app_appW2_firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_impreciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	app_appW2_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_mesgLength <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	app_appW2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	app_appW2_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_mesgReqValid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	app_appW2_preciseBurst <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	app_appW2_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW2_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW2_smaCtrl <= `BSV_ASSIGNMENT_DELAY 32'h00000001;
	app_appW2_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	app_appW2_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	app_appW2_valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	app_appW2_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	app_appW2_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	app_appW2_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	app_appW2_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	app_appW2_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW2_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	app_appW2_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'h0AAAAAAAAA;
	app_appW2_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	app_appW2_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd178956970;
	app_appW2_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	app_appW2_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	app_appW2_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW2_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	app_appW2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	app_appW2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	app_appW2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	app_appW2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	app_appW2_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY 12'd0;
	app_appW2_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (app_appW2_abortCount$EN)
	  app_appW2_abortCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_abortCount$D_IN;
	if (app_appW2_doAbort$EN)
	  app_appW2_doAbort <= `BSV_ASSIGNMENT_DELAY app_appW2_doAbort$D_IN;
	if (app_appW2_endOfMessage$EN)
	  app_appW2_endOfMessage <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_endOfMessage$D_IN;
	if (app_appW2_errCount$EN)
	  app_appW2_errCount <= `BSV_ASSIGNMENT_DELAY app_appW2_errCount$D_IN;
	if (app_appW2_fabRespCredit_value$EN)
	  app_appW2_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_fabRespCredit_value$D_IN;
	if (app_appW2_fabWordsRemain$EN)
	  app_appW2_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_fabWordsRemain$D_IN;
	if (app_appW2_firstMsgReq$EN)
	  app_appW2_firstMsgReq <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_firstMsgReq$D_IN;
	if (app_appW2_impreciseBurst$EN)
	  app_appW2_impreciseBurst <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_impreciseBurst$D_IN;
	if (app_appW2_lastMesg$EN)
	  app_appW2_lastMesg <= `BSV_ASSIGNMENT_DELAY app_appW2_lastMesg$D_IN;
	if (app_appW2_mesgCount$EN)
	  app_appW2_mesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_mesgCount$D_IN;
	if (app_appW2_mesgLength$EN)
	  app_appW2_mesgLength <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_mesgLength$D_IN;
	if (app_appW2_mesgLengthSoFar$EN)
	  app_appW2_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_mesgLengthSoFar$D_IN;
	if (app_appW2_mesgPreRequest$EN)
	  app_appW2_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_mesgPreRequest$D_IN;
	if (app_appW2_mesgReqOK$EN)
	  app_appW2_mesgReqOK <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_mesgReqOK$D_IN;
	if (app_appW2_mesgReqValid$EN)
	  app_appW2_mesgReqValid <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_mesgReqValid$D_IN;
	if (app_appW2_opcode$EN)
	  app_appW2_opcode <= `BSV_ASSIGNMENT_DELAY app_appW2_opcode$D_IN;
	if (app_appW2_preciseBurst$EN)
	  app_appW2_preciseBurst <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_preciseBurst$D_IN;
	if (app_appW2_readyToPush$EN)
	  app_appW2_readyToPush <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_readyToPush$D_IN;
	if (app_appW2_readyToRequest$EN)
	  app_appW2_readyToRequest <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_readyToRequest$D_IN;
	if (app_appW2_respF_rCache$EN)
	  app_appW2_respF_rCache <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_respF_rCache$D_IN;
	if (app_appW2_respF_rRdPtr$EN)
	  app_appW2_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_respF_rRdPtr$D_IN;
	if (app_appW2_respF_rWrPtr$EN)
	  app_appW2_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_respF_rWrPtr$D_IN;
	if (app_appW2_smaCtrl$EN)
	  app_appW2_smaCtrl <= `BSV_ASSIGNMENT_DELAY app_appW2_smaCtrl$D_IN;
	if (app_appW2_thisMesg$EN)
	  app_appW2_thisMesg <= `BSV_ASSIGNMENT_DELAY app_appW2_thisMesg$D_IN;
	if (app_appW2_unrollCnt$EN)
	  app_appW2_unrollCnt <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_unrollCnt$D_IN;
	if (app_appW2_valExpect$EN)
	  app_appW2_valExpect <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_valExpect$D_IN;
	if (app_appW2_wci_cEdge$EN)
	  app_appW2_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_cEdge$D_IN;
	if (app_appW2_wci_cState$EN)
	  app_appW2_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_cState$D_IN;
	if (app_appW2_wci_ctlAckReg$EN)
	  app_appW2_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_ctlAckReg$D_IN;
	if (app_appW2_wci_ctlOpActive$EN)
	  app_appW2_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_ctlOpActive$D_IN;
	if (app_appW2_wci_illegalEdge$EN)
	  app_appW2_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_illegalEdge$D_IN;
	if (app_appW2_wci_nState$EN)
	  app_appW2_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_nState$D_IN;
	if (app_appW2_wci_reqF_countReg$EN)
	  app_appW2_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_reqF_countReg$D_IN;
	if (app_appW2_wci_respF_c_r$EN)
	  app_appW2_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_respF_c_r$D_IN;
	if (app_appW2_wci_respF_q_0$EN)
	  app_appW2_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_respF_q_0$D_IN;
	if (app_appW2_wci_respF_q_1$EN)
	  app_appW2_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_respF_q_1$D_IN;
	if (app_appW2_wci_sFlagReg$EN)
	  app_appW2_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_sFlagReg$D_IN;
	if (app_appW2_wci_sThreadBusy_d$EN)
	  app_appW2_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wci_sThreadBusy_d$D_IN;
	if (app_appW2_wmi_busyWithMessage$EN)
	  app_appW2_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_busyWithMessage$D_IN;
	if (app_appW2_wmi_dhF_c_r$EN)
	  app_appW2_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_dhF_c_r$D_IN;
	if (app_appW2_wmi_dhF_q_0$EN)
	  app_appW2_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_dhF_q_0$D_IN;
	if (app_appW2_wmi_dhF_q_1$EN)
	  app_appW2_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_dhF_q_1$D_IN;
	if (app_appW2_wmi_errorSticky$EN)
	  app_appW2_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_errorSticky$D_IN;
	if (app_appW2_wmi_mFlagF_c_r$EN)
	  app_appW2_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_mFlagF_c_r$D_IN;
	if (app_appW2_wmi_mFlagF_q_0$EN)
	  app_appW2_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_mFlagF_q_0$D_IN;
	if (app_appW2_wmi_mFlagF_q_1$EN)
	  app_appW2_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_mFlagF_q_1$D_IN;
	if (app_appW2_wmi_operateD$EN)
	  app_appW2_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_operateD$D_IN;
	if (app_appW2_wmi_peerIsReady$EN)
	  app_appW2_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_peerIsReady$D_IN;
	if (app_appW2_wmi_reqF_c_r$EN)
	  app_appW2_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_reqF_c_r$D_IN;
	if (app_appW2_wmi_reqF_q_0$EN)
	  app_appW2_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_reqF_q_0$D_IN;
	if (app_appW2_wmi_reqF_q_1$EN)
	  app_appW2_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_reqF_q_1$D_IN;
	if (app_appW2_wmi_sDataThreadBusy_d$EN)
	  app_appW2_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_sDataThreadBusy_d$D_IN;
	if (app_appW2_wmi_sFlagReg$EN)
	  app_appW2_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_sFlagReg$D_IN;
	if (app_appW2_wmi_sThreadBusy_d$EN)
	  app_appW2_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_sThreadBusy_d$D_IN;
	if (app_appW2_wmi_trafficSticky$EN)
	  app_appW2_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wmi_trafficSticky$D_IN;
	if (app_appW2_wsiM_burstKind$EN)
	  app_appW2_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_burstKind$D_IN;
	if (app_appW2_wsiM_errorSticky$EN)
	  app_appW2_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_errorSticky$D_IN;
	if (app_appW2_wsiM_iMesgCount$EN)
	  app_appW2_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_iMesgCount$D_IN;
	if (app_appW2_wsiM_operateD$EN)
	  app_appW2_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_operateD$D_IN;
	if (app_appW2_wsiM_pMesgCount$EN)
	  app_appW2_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_pMesgCount$D_IN;
	if (app_appW2_wsiM_peerIsReady$EN)
	  app_appW2_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_peerIsReady$D_IN;
	if (app_appW2_wsiM_reqFifo_c_r$EN)
	  app_appW2_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_reqFifo_c_r$D_IN;
	if (app_appW2_wsiM_reqFifo_q_0$EN)
	  app_appW2_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_reqFifo_q_0$D_IN;
	if (app_appW2_wsiM_reqFifo_q_1$EN)
	  app_appW2_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_reqFifo_q_1$D_IN;
	if (app_appW2_wsiM_sThreadBusy_d$EN)
	  app_appW2_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_sThreadBusy_d$D_IN;
	if (app_appW2_wsiM_tBusyCount$EN)
	  app_appW2_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_tBusyCount$D_IN;
	if (app_appW2_wsiM_trafficSticky$EN)
	  app_appW2_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiM_trafficSticky$D_IN;
	if (app_appW2_wsiS_burstKind$EN)
	  app_appW2_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_burstKind$D_IN;
	if (app_appW2_wsiS_errorSticky$EN)
	  app_appW2_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_errorSticky$D_IN;
	if (app_appW2_wsiS_iMesgCount$EN)
	  app_appW2_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_iMesgCount$D_IN;
	if (app_appW2_wsiS_operateD$EN)
	  app_appW2_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_operateD$D_IN;
	if (app_appW2_wsiS_pMesgCount$EN)
	  app_appW2_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_pMesgCount$D_IN;
	if (app_appW2_wsiS_peerIsReady$EN)
	  app_appW2_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_peerIsReady$D_IN;
	if (app_appW2_wsiS_reqFifo_countReg$EN)
	  app_appW2_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_reqFifo_countReg$D_IN;
	if (app_appW2_wsiS_reqFifo_levelsValid$EN)
	  app_appW2_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_reqFifo_levelsValid$D_IN;
	if (app_appW2_wsiS_tBusyCount$EN)
	  app_appW2_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_tBusyCount$D_IN;
	if (app_appW2_wsiS_trafficSticky$EN)
	  app_appW2_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_trafficSticky$D_IN;
	if (app_appW2_wsiS_wordCount$EN)
	  app_appW2_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiS_wordCount$D_IN;
	if (app_appW2_wsiWordsRemain$EN)
	  app_appW2_wsiWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_wsiWordsRemain$D_IN;
	if (app_appW2_zeroLengthMesg$EN)
	  app_appW2_zeroLengthMesg <= `BSV_ASSIGNMENT_DELAY
	      app_appW2_zeroLengthMesg$D_IN;
      end
    if (app_appW2_fabWordsCurReq$EN)
      app_appW2_fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY
	  app_appW2_fabWordsCurReq$D_IN;
    if (app_appW2_mesgReqAddr$EN)
      app_appW2_mesgReqAddr <= `BSV_ASSIGNMENT_DELAY
	  app_appW2_mesgReqAddr$D_IN;
    if (app_appW2_wmi_statusR$EN)
      app_appW2_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW2_wmi_statusR$D_IN;
    if (app_appW2_wsiM_statusR$EN)
      app_appW2_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW2_wsiM_statusR$D_IN;
    if (app_appW2_wsiS_mesgWordLength$EN)
      app_appW2_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  app_appW2_wsiS_mesgWordLength$D_IN;
    if (app_appW2_wsiS_statusR$EN)
      app_appW2_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW2_wsiS_statusR$D_IN;
    if (app_appW3_rdSerMeta$EN)
      app_appW3_rdSerMeta <= `BSV_ASSIGNMENT_DELAY app_appW3_rdSerMeta$D_IN;
    if (app_appW3_rdSerStage$EN)
      app_appW3_rdSerStage <= `BSV_ASSIGNMENT_DELAY app_appW3_rdSerStage$D_IN;
    if (app_appW3_rdSerStage_1$EN)
      app_appW3_rdSerStage_1 <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_rdSerStage_1$D_IN;
    if (app_appW3_rdSerStage_2$EN)
      app_appW3_rdSerStage_2 <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_rdSerStage_2$D_IN;
    if (app_appW3_rdSerStage_3$EN)
      app_appW3_rdSerStage_3 <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_rdSerStage_3$D_IN;
    if (app_appW3_readMeta$EN)
      app_appW3_readMeta <= `BSV_ASSIGNMENT_DELAY app_appW3_readMeta$D_IN;
    if (app_appW3_wmemi_statusR$EN)
      app_appW3_wmemi_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wmemi_statusR$D_IN;
    if (app_appW3_wrtSerStage$EN)
      app_appW3_wrtSerStage <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wrtSerStage$D_IN;
    if (app_appW3_wrtSerStage_1$EN)
      app_appW3_wrtSerStage_1 <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wrtSerStage_1$D_IN;
    if (app_appW3_wrtSerStage_2$EN)
      app_appW3_wrtSerStage_2 <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wrtSerStage_2$D_IN;
    if (app_appW3_wrtSerStage_3$EN)
      app_appW3_wrtSerStage_3 <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wrtSerStage_3$D_IN;
    if (app_appW3_wsiM_statusR$EN)
      app_appW3_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wsiM_statusR$D_IN;
    if (app_appW3_wsiS_mesgWordLength$EN)
      app_appW3_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wsiS_mesgWordLength$D_IN;
    if (app_appW3_wsiS_statusR$EN)
      app_appW3_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW3_wsiS_statusR$D_IN;
    if (app_appW4_fabWordsCurReq$EN)
      app_appW4_fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY
	  app_appW4_fabWordsCurReq$D_IN;
    if (app_appW4_mesgReqAddr$EN)
      app_appW4_mesgReqAddr <= `BSV_ASSIGNMENT_DELAY
	  app_appW4_mesgReqAddr$D_IN;
    if (app_appW4_wmi_statusR$EN)
      app_appW4_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW4_wmi_statusR$D_IN;
    if (app_appW4_wsiM_statusR$EN)
      app_appW4_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW4_wsiM_statusR$D_IN;
    if (app_appW4_wsiS_mesgWordLength$EN)
      app_appW4_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  app_appW4_wsiS_mesgWordLength$D_IN;
    if (app_appW4_wsiS_statusR$EN)
      app_appW4_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  app_appW4_wsiS_statusR$D_IN;
    if (inf_dp0_bml_fabBufsAvail$EN)
      inf_dp0_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_fabBufsAvail$D_IN;
    if (inf_dp0_bml_fabFlowAddr$EN)
      inf_dp0_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_fabFlowAddr$D_IN;
    if (inf_dp0_bml_fabMesgAddr$EN)
      inf_dp0_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_fabMesgAddr$D_IN;
    if (inf_dp0_bml_fabMetaAddr$EN)
      inf_dp0_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_fabMetaAddr$D_IN;
    if (inf_dp0_bml_lclBufsAR$EN)
      inf_dp0_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_lclBufsAR$D_IN;
    if (inf_dp0_bml_lclBufsCF$EN)
      inf_dp0_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_lclBufsCF$D_IN;
    if (inf_dp0_bml_lclCredit$EN)
      inf_dp0_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_lclCredit$D_IN;
    if (inf_dp0_bml_lclMesgAddr$EN)
      inf_dp0_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_lclMesgAddr$D_IN;
    if (inf_dp0_bml_lclMetaAddr$EN)
      inf_dp0_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_lclMetaAddr$D_IN;
    if (inf_dp0_bml_remMesgAddr$EN)
      inf_dp0_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_remMesgAddr$D_IN;
    if (inf_dp0_bml_remMetaAddr$EN)
      inf_dp0_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_bml_remMetaAddr$D_IN;
    if (inf_dp0_tlp_dmaPullRemainDWLen$EN)
      inf_dp0_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_dmaPullRemainDWLen$D_IN;
    if (inf_dp0_tlp_dmaPullRemainDWSub$EN)
      inf_dp0_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_dmaPullRemainDWSub$D_IN;
    if (inf_dp0_tlp_dmaReqTag$EN)
      inf_dp0_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_dmaReqTag$D_IN;
    if (inf_dp0_tlp_fabFlowAddr$EN)
      inf_dp0_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_fabFlowAddr$D_IN;
    if (inf_dp0_tlp_fabMesgAccu$EN)
      inf_dp0_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_fabMesgAccu$D_IN;
    if (inf_dp0_tlp_fabMesgAddr$EN)
      inf_dp0_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_fabMesgAddr$D_IN;
    if (inf_dp0_tlp_fabMetaAddr$EN)
      inf_dp0_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_fabMetaAddr$D_IN;
    if (inf_dp0_tlp_inIgnorePkt$EN)
      inf_dp0_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_inIgnorePkt$D_IN;
    if (inf_dp0_tlp_mesgComplReceived$EN)
      inf_dp0_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_mesgComplReceived$D_IN;
    if (inf_dp0_tlp_mesgLengthRemainPull$EN)
      inf_dp0_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_mesgLengthRemainPull$D_IN;
    if (inf_dp0_tlp_mesgLengthRemainPush$EN)
      inf_dp0_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_mesgLengthRemainPush$D_IN;
    if (inf_dp0_tlp_outDwRemain$EN)
      inf_dp0_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_outDwRemain$D_IN;
    if (inf_dp0_tlp_rdRespDwRemain$EN)
      inf_dp0_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_rdRespDwRemain$D_IN;
    if (inf_dp0_tlp_readNxtDWAddr$EN)
      inf_dp0_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_readNxtDWAddr$D_IN;
    if (inf_dp0_tlp_readRemainDWLen$EN)
      inf_dp0_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_readRemainDWLen$D_IN;
    if (inf_dp0_tlp_remMesgAccu$EN)
      inf_dp0_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_remMesgAccu$D_IN;
    if (inf_dp0_tlp_remMesgAddr$EN)
      inf_dp0_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_remMesgAddr$D_IN;
    if (inf_dp0_tlp_remMetaAddr$EN)
      inf_dp0_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_remMetaAddr$D_IN;
    if (inf_dp0_tlp_srcMesgAccu$EN)
      inf_dp0_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_srcMesgAccu$D_IN;
    if (inf_dp0_tlp_writeDWAddr$EN)
      inf_dp0_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_writeDWAddr$D_IN;
    if (inf_dp0_tlp_writeLastBE$EN)
      inf_dp0_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_writeLastBE$D_IN;
    if (inf_dp0_tlp_writeRemainDWLen$EN)
      inf_dp0_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_tlp_writeRemainDWLen$D_IN;
    if (inf_dp0_wmi_addr$EN)
      inf_dp0_wmi_addr <= `BSV_ASSIGNMENT_DELAY inf_dp0_wmi_addr$D_IN;
    if (inf_dp0_wmi_bytesRemainReq$EN)
      inf_dp0_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_wmi_bytesRemainReq$D_IN;
    if (inf_dp0_wmi_lclMesgAddr$EN)
      inf_dp0_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_wmi_lclMesgAddr$D_IN;
    if (inf_dp0_wmi_lclMetaAddr$EN)
      inf_dp0_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_wmi_lclMetaAddr$D_IN;
    if (inf_dp0_wmi_wmi_statusR$EN)
      inf_dp0_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  inf_dp0_wmi_wmi_statusR$D_IN;
    if (inf_dp1_bml_fabBufsAvail$EN)
      inf_dp1_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_fabBufsAvail$D_IN;
    if (inf_dp1_bml_fabFlowAddr$EN)
      inf_dp1_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_fabFlowAddr$D_IN;
    if (inf_dp1_bml_fabMesgAddr$EN)
      inf_dp1_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_fabMesgAddr$D_IN;
    if (inf_dp1_bml_fabMetaAddr$EN)
      inf_dp1_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_fabMetaAddr$D_IN;
    if (inf_dp1_bml_lclBufsAR$EN)
      inf_dp1_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_lclBufsAR$D_IN;
    if (inf_dp1_bml_lclBufsCF$EN)
      inf_dp1_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_lclBufsCF$D_IN;
    if (inf_dp1_bml_lclCredit$EN)
      inf_dp1_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_lclCredit$D_IN;
    if (inf_dp1_bml_lclMesgAddr$EN)
      inf_dp1_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_lclMesgAddr$D_IN;
    if (inf_dp1_bml_lclMetaAddr$EN)
      inf_dp1_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_lclMetaAddr$D_IN;
    if (inf_dp1_bml_remMesgAddr$EN)
      inf_dp1_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_remMesgAddr$D_IN;
    if (inf_dp1_bml_remMetaAddr$EN)
      inf_dp1_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_bml_remMetaAddr$D_IN;
    if (inf_dp1_tlp_dmaPullRemainDWLen$EN)
      inf_dp1_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_dmaPullRemainDWLen$D_IN;
    if (inf_dp1_tlp_dmaPullRemainDWSub$EN)
      inf_dp1_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_dmaPullRemainDWSub$D_IN;
    if (inf_dp1_tlp_dmaReqTag$EN)
      inf_dp1_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_dmaReqTag$D_IN;
    if (inf_dp1_tlp_fabFlowAddr$EN)
      inf_dp1_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_fabFlowAddr$D_IN;
    if (inf_dp1_tlp_fabMesgAccu$EN)
      inf_dp1_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_fabMesgAccu$D_IN;
    if (inf_dp1_tlp_fabMesgAddr$EN)
      inf_dp1_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_fabMesgAddr$D_IN;
    if (inf_dp1_tlp_fabMetaAddr$EN)
      inf_dp1_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_fabMetaAddr$D_IN;
    if (inf_dp1_tlp_inIgnorePkt$EN)
      inf_dp1_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_inIgnorePkt$D_IN;
    if (inf_dp1_tlp_mesgComplReceived$EN)
      inf_dp1_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_mesgComplReceived$D_IN;
    if (inf_dp1_tlp_mesgLengthRemainPull$EN)
      inf_dp1_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_mesgLengthRemainPull$D_IN;
    if (inf_dp1_tlp_mesgLengthRemainPush$EN)
      inf_dp1_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_mesgLengthRemainPush$D_IN;
    if (inf_dp1_tlp_outDwRemain$EN)
      inf_dp1_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_outDwRemain$D_IN;
    if (inf_dp1_tlp_rdRespDwRemain$EN)
      inf_dp1_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_rdRespDwRemain$D_IN;
    if (inf_dp1_tlp_readNxtDWAddr$EN)
      inf_dp1_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_readNxtDWAddr$D_IN;
    if (inf_dp1_tlp_readRemainDWLen$EN)
      inf_dp1_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_readRemainDWLen$D_IN;
    if (inf_dp1_tlp_remMesgAccu$EN)
      inf_dp1_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_remMesgAccu$D_IN;
    if (inf_dp1_tlp_remMesgAddr$EN)
      inf_dp1_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_remMesgAddr$D_IN;
    if (inf_dp1_tlp_remMetaAddr$EN)
      inf_dp1_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_remMetaAddr$D_IN;
    if (inf_dp1_tlp_srcMesgAccu$EN)
      inf_dp1_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_srcMesgAccu$D_IN;
    if (inf_dp1_tlp_writeDWAddr$EN)
      inf_dp1_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_writeDWAddr$D_IN;
    if (inf_dp1_tlp_writeLastBE$EN)
      inf_dp1_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_writeLastBE$D_IN;
    if (inf_dp1_tlp_writeRemainDWLen$EN)
      inf_dp1_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_tlp_writeRemainDWLen$D_IN;
    if (inf_dp1_wmi_addr$EN)
      inf_dp1_wmi_addr <= `BSV_ASSIGNMENT_DELAY inf_dp1_wmi_addr$D_IN;
    if (inf_dp1_wmi_bytesRemainReq$EN)
      inf_dp1_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_wmi_bytesRemainReq$D_IN;
    if (inf_dp1_wmi_lclMesgAddr$EN)
      inf_dp1_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_wmi_lclMesgAddr$D_IN;
    if (inf_dp1_wmi_lclMetaAddr$EN)
      inf_dp1_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_wmi_lclMetaAddr$D_IN;
    if (inf_dp1_wmi_wmi_statusR$EN)
      inf_dp1_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY
	  inf_dp1_wmi_wmi_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    app_appW2_abortCount = 32'hAAAAAAAA;
    app_appW2_doAbort = 1'h0;
    app_appW2_endOfMessage = 1'h0;
    app_appW2_errCount = 32'hAAAAAAAA;
    app_appW2_fabRespCredit_value = 12'hAAA;
    app_appW2_fabWordsCurReq = 14'h2AAA;
    app_appW2_fabWordsRemain = 14'h2AAA;
    app_appW2_firstMsgReq = 1'h0;
    app_appW2_impreciseBurst = 1'h0;
    app_appW2_lastMesg = 32'hAAAAAAAA;
    app_appW2_mesgCount = 32'hAAAAAAAA;
    app_appW2_mesgLength = 15'h2AAA;
    app_appW2_mesgLengthSoFar = 14'h2AAA;
    app_appW2_mesgPreRequest = 1'h0;
    app_appW2_mesgReqAddr = 14'h2AAA;
    app_appW2_mesgReqOK = 1'h0;
    app_appW2_mesgReqValid = 1'h0;
    app_appW2_opcode = 9'h0AA;
    app_appW2_preciseBurst = 1'h0;
    app_appW2_readyToPush = 1'h0;
    app_appW2_readyToRequest = 1'h0;
    app_appW2_respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    app_appW2_respF_rRdPtr = 12'hAAA;
    app_appW2_respF_rWrPtr = 12'hAAA;
    app_appW2_smaCtrl = 32'hAAAAAAAA;
    app_appW2_thisMesg = 32'hAAAAAAAA;
    app_appW2_unrollCnt = 16'hAAAA;
    app_appW2_valExpect = 32'hAAAAAAAA;
    app_appW2_wci_cEdge = 3'h2;
    app_appW2_wci_cState = 3'h2;
    app_appW2_wci_ctlAckReg = 1'h0;
    app_appW2_wci_ctlOpActive = 1'h0;
    app_appW2_wci_illegalEdge = 1'h0;
    app_appW2_wci_nState = 3'h2;
    app_appW2_wci_reqF_countReg = 2'h2;
    app_appW2_wci_respF_c_r = 2'h2;
    app_appW2_wci_respF_q_0 = 34'h2AAAAAAAA;
    app_appW2_wci_respF_q_1 = 34'h2AAAAAAAA;
    app_appW2_wci_sFlagReg = 1'h0;
    app_appW2_wci_sThreadBusy_d = 1'h0;
    app_appW2_wmi_busyWithMessage = 1'h0;
    app_appW2_wmi_dhF_c_r = 2'h2;
    app_appW2_wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    app_appW2_wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    app_appW2_wmi_errorSticky = 1'h0;
    app_appW2_wmi_mFlagF_c_r = 2'h2;
    app_appW2_wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    app_appW2_wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    app_appW2_wmi_operateD = 1'h0;
    app_appW2_wmi_peerIsReady = 1'h0;
    app_appW2_wmi_reqF_c_r = 2'h2;
    app_appW2_wmi_reqF_q_0 = 32'hAAAAAAAA;
    app_appW2_wmi_reqF_q_1 = 32'hAAAAAAAA;
    app_appW2_wmi_sDataThreadBusy_d = 1'h0;
    app_appW2_wmi_sFlagReg = 32'hAAAAAAAA;
    app_appW2_wmi_sThreadBusy_d = 1'h0;
    app_appW2_wmi_statusR = 8'hAA;
    app_appW2_wmi_trafficSticky = 1'h0;
    app_appW2_wsiM_burstKind = 2'h2;
    app_appW2_wsiM_errorSticky = 1'h0;
    app_appW2_wsiM_iMesgCount = 32'hAAAAAAAA;
    app_appW2_wsiM_operateD = 1'h0;
    app_appW2_wsiM_pMesgCount = 32'hAAAAAAAA;
    app_appW2_wsiM_peerIsReady = 1'h0;
    app_appW2_wsiM_reqFifo_c_r = 2'h2;
    app_appW2_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    app_appW2_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    app_appW2_wsiM_sThreadBusy_d = 1'h0;
    app_appW2_wsiM_statusR = 8'hAA;
    app_appW2_wsiM_tBusyCount = 32'hAAAAAAAA;
    app_appW2_wsiM_trafficSticky = 1'h0;
    app_appW2_wsiS_burstKind = 2'h2;
    app_appW2_wsiS_errorSticky = 1'h0;
    app_appW2_wsiS_iMesgCount = 32'hAAAAAAAA;
    app_appW2_wsiS_mesgWordLength = 12'hAAA;
    app_appW2_wsiS_operateD = 1'h0;
    app_appW2_wsiS_pMesgCount = 32'hAAAAAAAA;
    app_appW2_wsiS_peerIsReady = 1'h0;
    app_appW2_wsiS_reqFifo_countReg = 2'h2;
    app_appW2_wsiS_reqFifo_levelsValid = 1'h0;
    app_appW2_wsiS_statusR = 8'hAA;
    app_appW2_wsiS_tBusyCount = 32'hAAAAAAAA;
    app_appW2_wsiS_trafficSticky = 1'h0;
    app_appW2_wsiS_wordCount = 12'hAAA;
    app_appW2_wsiWordsRemain = 12'hAAA;
    app_appW2_zeroLengthMesg = 1'h0;
    app_appW3_bytesRead = 32'hAAAAAAAA;
    app_appW3_bytesThisMessage = 24'hAAAAAA;
    app_appW3_bytesWritten = 32'hAAAAAAAA;
    app_appW3_cyclesPassed = 32'hAAAAAAAA;
    app_appW3_dlyCtrl = 32'hAAAAAAAA;
    app_appW3_dlyHoldoffBytes = 32'hAAAAAAAA;
    app_appW3_dlyHoldoffCycles = 32'hAAAAAAAA;
    app_appW3_dlyRAG = 23'h2AAAAA;
    app_appW3_dlyRdOpOther = 32'hAAAAAAAA;
    app_appW3_dlyRdOpZero = 32'hAAAAAAAA;
    app_appW3_dlyReadCredit_value = 8'hAA;
    app_appW3_dlyReadyToWrite_value = 16'hAAAA;
    app_appW3_dlyWAG = 23'h2AAAAA;
    app_appW3_dlyWordsStored_value = 25'h0AAAAAA;
    app_appW3_mesgLengthSoFar = 14'h2AAA;
    app_appW3_mesgRdCount = 32'hAAAAAAAA;
    app_appW3_mesgWF_rCache = 46'h2AAAAAAAAAAA;
    app_appW3_mesgWF_rRdPtr = 13'h0AAA;
    app_appW3_mesgWF_rWrPtr = 13'h0AAA;
    app_appW3_mesgWtCount = 32'hAAAAAAAA;
    app_appW3_rdSerAddr = 32'hAAAAAAAA;
    app_appW3_rdSerEmpty = 1'h0;
    app_appW3_rdSerMeta = 32'hAAAAAAAA;
    app_appW3_rdSerPos = 2'h2;
    app_appW3_rdSerStage = 32'hAAAAAAAA;
    app_appW3_rdSerStage_1 = 32'hAAAAAAAA;
    app_appW3_rdSerStage_2 = 32'hAAAAAAAA;
    app_appW3_rdSerStage_3 = 32'hAAAAAAAA;
    app_appW3_rdSerUnroll = 16'hAAAA;
    app_appW3_rdSyncWord = 1'h0;
    app_appW3_readMeta = 32'hAAAAAAAA;
    app_appW3_tog50 = 1'h0;
    app_appW3_unrollCnt = 16'hAAAA;
    app_appW3_wci_cEdge = 3'h2;
    app_appW3_wci_cState = 3'h2;
    app_appW3_wci_ctlAckReg = 1'h0;
    app_appW3_wci_ctlOpActive = 1'h0;
    app_appW3_wci_illegalEdge = 1'h0;
    app_appW3_wci_nState = 3'h2;
    app_appW3_wci_reqF_countReg = 2'h2;
    app_appW3_wci_respF_c_r = 2'h2;
    app_appW3_wci_respF_q_0 = 34'h2AAAAAAAA;
    app_appW3_wci_respF_q_1 = 34'h2AAAAAAAA;
    app_appW3_wci_sFlagReg = 1'h0;
    app_appW3_wci_sThreadBusy_d = 1'h0;
    app_appW3_wmemiRdReq = 32'hAAAAAAAA;
    app_appW3_wmemiRdResp1 = 32'hAAAAAAAA;
    app_appW3_wmemiRdResp2 = 32'hAAAAAAAA;
    app_appW3_wmemiWrReq = 32'hAAAAAAAA;
    app_appW3_wmemi_busyWithMessage = 1'h0;
    app_appW3_wmemi_dhF_c_r = 2'h2;
    app_appW3_wmemi_dhF_q_0 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    app_appW3_wmemi_dhF_q_1 = 146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    app_appW3_wmemi_errorSticky = 1'h0;
    app_appW3_wmemi_operateD = 1'h0;
    app_appW3_wmemi_peerIsReady = 1'h0;
    app_appW3_wmemi_reqF_c_r = 2'h2;
    app_appW3_wmemi_reqF_q_0 = 52'hAAAAAAAAAAAAA;
    app_appW3_wmemi_reqF_q_1 = 52'hAAAAAAAAAAAAA;
    app_appW3_wmemi_statusR = 8'hAA;
    app_appW3_wmemi_trafficSticky = 1'h0;
    app_appW3_wrtSerAddr = 32'hAAAAAAAA;
    app_appW3_wrtSerPos = 2'h2;
    app_appW3_wrtSerStage = 32'hAAAAAAAA;
    app_appW3_wrtSerStage_1 = 32'hAAAAAAAA;
    app_appW3_wrtSerStage_2 = 32'hAAAAAAAA;
    app_appW3_wrtSerStage_3 = 32'hAAAAAAAA;
    app_appW3_wrtSerUnroll = 16'hAAAA;
    app_appW3_wsiM_burstKind = 2'h2;
    app_appW3_wsiM_errorSticky = 1'h0;
    app_appW3_wsiM_iMesgCount = 32'hAAAAAAAA;
    app_appW3_wsiM_operateD = 1'h0;
    app_appW3_wsiM_pMesgCount = 32'hAAAAAAAA;
    app_appW3_wsiM_peerIsReady = 1'h0;
    app_appW3_wsiM_reqFifo_c_r = 2'h2;
    app_appW3_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    app_appW3_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    app_appW3_wsiM_sThreadBusy_d = 1'h0;
    app_appW3_wsiM_statusR = 8'hAA;
    app_appW3_wsiM_tBusyCount = 32'hAAAAAAAA;
    app_appW3_wsiM_trafficSticky = 1'h0;
    app_appW3_wsiS_burstKind = 2'h2;
    app_appW3_wsiS_errorSticky = 1'h0;
    app_appW3_wsiS_iMesgCount = 32'hAAAAAAAA;
    app_appW3_wsiS_mesgWordLength = 12'hAAA;
    app_appW3_wsiS_operateD = 1'h0;
    app_appW3_wsiS_pMesgCount = 32'hAAAAAAAA;
    app_appW3_wsiS_peerIsReady = 1'h0;
    app_appW3_wsiS_reqFifo_countReg = 2'h2;
    app_appW3_wsiS_reqFifo_levelsValid = 1'h0;
    app_appW3_wsiS_statusR = 8'hAA;
    app_appW3_wsiS_tBusyCount = 32'hAAAAAAAA;
    app_appW3_wsiS_trafficSticky = 1'h0;
    app_appW3_wsiS_wordCount = 12'hAAA;
    app_appW4_abortCount = 32'hAAAAAAAA;
    app_appW4_doAbort = 1'h0;
    app_appW4_endOfMessage = 1'h0;
    app_appW4_errCount = 32'hAAAAAAAA;
    app_appW4_fabRespCredit_value = 12'hAAA;
    app_appW4_fabWordsCurReq = 14'h2AAA;
    app_appW4_fabWordsRemain = 14'h2AAA;
    app_appW4_firstMsgReq = 1'h0;
    app_appW4_impreciseBurst = 1'h0;
    app_appW4_lastMesg = 32'hAAAAAAAA;
    app_appW4_mesgCount = 32'hAAAAAAAA;
    app_appW4_mesgLength = 15'h2AAA;
    app_appW4_mesgLengthSoFar = 14'h2AAA;
    app_appW4_mesgPreRequest = 1'h0;
    app_appW4_mesgReqAddr = 14'h2AAA;
    app_appW4_mesgReqOK = 1'h0;
    app_appW4_mesgReqValid = 1'h0;
    app_appW4_opcode = 9'h0AA;
    app_appW4_preciseBurst = 1'h0;
    app_appW4_readyToPush = 1'h0;
    app_appW4_readyToRequest = 1'h0;
    app_appW4_respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    app_appW4_respF_rRdPtr = 12'hAAA;
    app_appW4_respF_rWrPtr = 12'hAAA;
    app_appW4_smaCtrl = 32'hAAAAAAAA;
    app_appW4_thisMesg = 32'hAAAAAAAA;
    app_appW4_unrollCnt = 16'hAAAA;
    app_appW4_valExpect = 32'hAAAAAAAA;
    app_appW4_wci_cEdge = 3'h2;
    app_appW4_wci_cState = 3'h2;
    app_appW4_wci_ctlAckReg = 1'h0;
    app_appW4_wci_ctlOpActive = 1'h0;
    app_appW4_wci_illegalEdge = 1'h0;
    app_appW4_wci_nState = 3'h2;
    app_appW4_wci_reqF_countReg = 2'h2;
    app_appW4_wci_respF_c_r = 2'h2;
    app_appW4_wci_respF_q_0 = 34'h2AAAAAAAA;
    app_appW4_wci_respF_q_1 = 34'h2AAAAAAAA;
    app_appW4_wci_sFlagReg = 1'h0;
    app_appW4_wci_sThreadBusy_d = 1'h0;
    app_appW4_wmi_busyWithMessage = 1'h0;
    app_appW4_wmi_dhF_c_r = 2'h2;
    app_appW4_wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    app_appW4_wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    app_appW4_wmi_errorSticky = 1'h0;
    app_appW4_wmi_mFlagF_c_r = 2'h2;
    app_appW4_wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    app_appW4_wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    app_appW4_wmi_operateD = 1'h0;
    app_appW4_wmi_peerIsReady = 1'h0;
    app_appW4_wmi_reqF_c_r = 2'h2;
    app_appW4_wmi_reqF_q_0 = 32'hAAAAAAAA;
    app_appW4_wmi_reqF_q_1 = 32'hAAAAAAAA;
    app_appW4_wmi_sDataThreadBusy_d = 1'h0;
    app_appW4_wmi_sFlagReg = 32'hAAAAAAAA;
    app_appW4_wmi_sThreadBusy_d = 1'h0;
    app_appW4_wmi_statusR = 8'hAA;
    app_appW4_wmi_trafficSticky = 1'h0;
    app_appW4_wsiM_burstKind = 2'h2;
    app_appW4_wsiM_errorSticky = 1'h0;
    app_appW4_wsiM_iMesgCount = 32'hAAAAAAAA;
    app_appW4_wsiM_operateD = 1'h0;
    app_appW4_wsiM_pMesgCount = 32'hAAAAAAAA;
    app_appW4_wsiM_peerIsReady = 1'h0;
    app_appW4_wsiM_reqFifo_c_r = 2'h2;
    app_appW4_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    app_appW4_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    app_appW4_wsiM_sThreadBusy_d = 1'h0;
    app_appW4_wsiM_statusR = 8'hAA;
    app_appW4_wsiM_tBusyCount = 32'hAAAAAAAA;
    app_appW4_wsiM_trafficSticky = 1'h0;
    app_appW4_wsiS_burstKind = 2'h2;
    app_appW4_wsiS_errorSticky = 1'h0;
    app_appW4_wsiS_iMesgCount = 32'hAAAAAAAA;
    app_appW4_wsiS_mesgWordLength = 12'hAAA;
    app_appW4_wsiS_operateD = 1'h0;
    app_appW4_wsiS_pMesgCount = 32'hAAAAAAAA;
    app_appW4_wsiS_peerIsReady = 1'h0;
    app_appW4_wsiS_reqFifo_countReg = 2'h2;
    app_appW4_wsiS_reqFifo_levelsValid = 1'h0;
    app_appW4_wsiS_statusR = 8'hAA;
    app_appW4_wsiS_tBusyCount = 32'hAAAAAAAA;
    app_appW4_wsiS_trafficSticky = 1'h0;
    app_appW4_wsiS_wordCount = 12'hAAA;
    app_appW4_wsiWordsRemain = 12'hAAA;
    app_appW4_zeroLengthMesg = 1'h0;
    inf_chompCnt = 8'hAA;
    inf_dp0_bml_crdBuf_modulus = 16'hAAAA;
    inf_dp0_bml_crdBuf_value = 16'hAAAA;
    inf_dp0_bml_fabAvail = 1'h0;
    inf_dp0_bml_fabBuf_modulus = 16'hAAAA;
    inf_dp0_bml_fabBuf_value = 16'hAAAA;
    inf_dp0_bml_fabBufsAvail = 16'hAAAA;
    inf_dp0_bml_fabDone = 1'h0;
    inf_dp0_bml_fabFlowAddr = 32'hAAAAAAAA;
    inf_dp0_bml_fabFlowBase = 32'hAAAAAAAA;
    inf_dp0_bml_fabFlowSize = 32'hAAAAAAAA;
    inf_dp0_bml_fabMesgAddr = 32'hAAAAAAAA;
    inf_dp0_bml_fabMesgBase = 32'hAAAAAAAA;
    inf_dp0_bml_fabMesgSize = 32'hAAAAAAAA;
    inf_dp0_bml_fabMetaAddr = 32'hAAAAAAAA;
    inf_dp0_bml_fabMetaBase = 32'hAAAAAAAA;
    inf_dp0_bml_fabMetaSize = 32'hAAAAAAAA;
    inf_dp0_bml_fabNumBufs = 16'hAAAA;
    inf_dp0_bml_lclBufDone = 1'h0;
    inf_dp0_bml_lclBufStart = 1'h0;
    inf_dp0_bml_lclBuf_modulus = 16'hAAAA;
    inf_dp0_bml_lclBuf_value = 16'hAAAA;
    inf_dp0_bml_lclBufsAR = 16'hAAAA;
    inf_dp0_bml_lclBufsCF = 16'hAAAA;
    inf_dp0_bml_lclCredit = 16'hAAAA;
    inf_dp0_bml_lclDones = 16'hAAAA;
    inf_dp0_bml_lclMesgAddr = 16'hAAAA;
    inf_dp0_bml_lclMetaAddr = 16'hAAAA;
    inf_dp0_bml_lclNumBufs = 16'hAAAA;
    inf_dp0_bml_lclStarts = 16'hAAAA;
    inf_dp0_bml_mesgBase = 16'hAAAA;
    inf_dp0_bml_mesgSize = 16'hAAAA;
    inf_dp0_bml_metaBase = 16'hAAAA;
    inf_dp0_bml_metaSize = 16'hAAAA;
    inf_dp0_bml_remBuf_modulus = 16'hAAAA;
    inf_dp0_bml_remBuf_value = 16'hAAAA;
    inf_dp0_bml_remDone = 1'h0;
    inf_dp0_bml_remDones = 16'hAAAA;
    inf_dp0_bml_remMesgAddr = 16'hAAAA;
    inf_dp0_bml_remMetaAddr = 16'hAAAA;
    inf_dp0_bml_remStart = 1'h0;
    inf_dp0_bml_remStarts = 16'hAAAA;
    inf_dp0_bram_serverAdapterA_1_cnt = 3'h2;
    inf_dp0_bram_serverAdapterA_1_s1 = 2'h2;
    inf_dp0_bram_serverAdapterA_2_cnt = 3'h2;
    inf_dp0_bram_serverAdapterA_2_s1 = 2'h2;
    inf_dp0_bram_serverAdapterA_3_cnt = 3'h2;
    inf_dp0_bram_serverAdapterA_3_s1 = 2'h2;
    inf_dp0_bram_serverAdapterA_cnt = 3'h2;
    inf_dp0_bram_serverAdapterA_s1 = 2'h2;
    inf_dp0_bram_serverAdapterB_1_cnt = 3'h2;
    inf_dp0_bram_serverAdapterB_1_s1 = 2'h2;
    inf_dp0_bram_serverAdapterB_2_cnt = 3'h2;
    inf_dp0_bram_serverAdapterB_2_s1 = 2'h2;
    inf_dp0_bram_serverAdapterB_3_cnt = 3'h2;
    inf_dp0_bram_serverAdapterB_3_s1 = 2'h2;
    inf_dp0_bram_serverAdapterB_cnt = 3'h2;
    inf_dp0_bram_serverAdapterB_s1 = 2'h2;
    inf_dp0_dpControl = 4'hA;
    inf_dp0_tlp_creditReady = 1'h0;
    inf_dp0_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inf_dp0_tlp_dmaDoTailEvent = 1'h0;
    inf_dp0_tlp_dmaPullRemainDWLen = 10'h2AA;
    inf_dp0_tlp_dmaPullRemainDWSub = 10'h2AA;
    inf_dp0_tlp_dmaReqTag = 5'h0A;
    inf_dp0_tlp_dmaTag = 5'h0A;
    inf_dp0_tlp_doXmtMetaBody = 1'h0;
    inf_dp0_tlp_fabFlowAddr = 32'hAAAAAAAA;
    inf_dp0_tlp_fabMesgAccu = 32'hAAAAAAAA;
    inf_dp0_tlp_fabMesgAddr = 32'hAAAAAAAA;
    inf_dp0_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inf_dp0_tlp_fabMetaAddr = 32'hAAAAAAAA;
    inf_dp0_tlp_farBufReady = 1'h0;
    inf_dp0_tlp_flowDiagCount = 32'hAAAAAAAA;
    inf_dp0_tlp_gotResponseHeader = 1'h0;
    inf_dp0_tlp_inIgnorePkt = 1'h0;
    inf_dp0_tlp_maxPayloadSize = 13'h0AAA;
    inf_dp0_tlp_maxReadReqSize = 13'h0AAA;
    inf_dp0_tlp_mesgComplReceived = 17'h0AAAA;
    inf_dp0_tlp_mesgLengthRemainPull = 17'h0AAAA;
    inf_dp0_tlp_mesgLengthRemainPush = 17'h0AAAA;
    inf_dp0_tlp_nearBufReady = 1'h0;
    inf_dp0_tlp_outDwRemain = 10'h2AA;
    inf_dp0_tlp_postSeqDwell = 4'hA;
    inf_dp0_tlp_pullTagMatch = 1'h0;
    inf_dp0_tlp_rdRespDwRemain = 10'h2AA;
    inf_dp0_tlp_readHeaderSent = 1'h0;
    inf_dp0_tlp_readNxtDWAddr = 13'h0AAA;
    inf_dp0_tlp_readRemainDWLen = 10'h2AA;
    inf_dp0_tlp_readStarted = 1'h0;
    inf_dp0_tlp_remDone = 1'h0;
    inf_dp0_tlp_remMesgAccu = 16'hAAAA;
    inf_dp0_tlp_remMesgAddr = 16'hAAAA;
    inf_dp0_tlp_remMetaAddr = 16'hAAAA;
    inf_dp0_tlp_remStart = 1'h0;
    inf_dp0_tlp_reqMesgInFlight = 1'h0;
    inf_dp0_tlp_reqMetaBodyInFlight = 1'h0;
    inf_dp0_tlp_reqMetaInFlight = 1'h0;
    inf_dp0_tlp_srcMesgAccu = 32'hAAAAAAAA;
    inf_dp0_tlp_tlpMetaSent = 1'h0;
    inf_dp0_tlp_tlpRcvBusy = 1'h0;
    inf_dp0_tlp_tlpXmtBusy = 1'h0;
    inf_dp0_tlp_writeDWAddr = 13'h0AAA;
    inf_dp0_tlp_writeLastBE = 4'hA;
    inf_dp0_tlp_writeRemainDWLen = 10'h2AA;
    inf_dp0_tlp_xmtMetaInFlight = 1'h0;
    inf_dp0_tlp_xmtMetaOK = 1'h0;
    inf_dp0_wci_cEdge = 3'h2;
    inf_dp0_wci_cState = 3'h2;
    inf_dp0_wci_ctlAckReg = 1'h0;
    inf_dp0_wci_ctlOpActive = 1'h0;
    inf_dp0_wci_illegalEdge = 1'h0;
    inf_dp0_wci_nState = 3'h2;
    inf_dp0_wci_reqF_countReg = 2'h2;
    inf_dp0_wci_respF_c_r = 2'h2;
    inf_dp0_wci_respF_q_0 = 34'h2AAAAAAAA;
    inf_dp0_wci_respF_q_1 = 34'h2AAAAAAAA;
    inf_dp0_wci_sFlagReg = 1'h0;
    inf_dp0_wci_sThreadBusy_d = 1'h0;
    inf_dp0_wmi_addr = 14'h2AAA;
    inf_dp0_wmi_bufDwell = 2'h2;
    inf_dp0_wmi_bytesRemainReq = 14'h2AAA;
    inf_dp0_wmi_bytesRemainResp = 14'h2AAA;
    inf_dp0_wmi_doneWithMesg = 1'h0;
    inf_dp0_wmi_lastMesg = 32'hAAAAAAAA;
    inf_dp0_wmi_lclMesgAddr = 15'h2AAA;
    inf_dp0_wmi_lclMetaAddr = 15'h2AAA;
    inf_dp0_wmi_mesgBufReady = 1'h0;
    inf_dp0_wmi_mesgBusy = 1'h0;
    inf_dp0_wmi_mesgCount = 32'hAAAAAAAA;
    inf_dp0_wmi_mesgDone = 1'h0;
    inf_dp0_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inf_dp0_wmi_mesgStart = 1'h0;
    inf_dp0_wmi_metaBusy = 1'h0;
    inf_dp0_wmi_p4B = 2'h2;
    inf_dp0_wmi_rdActive = 1'h0;
    inf_dp0_wmi_reqCount = 16'hAAAA;
    inf_dp0_wmi_thisMesg = 32'hAAAAAAAA;
    inf_dp0_wmi_wmi_blockReq = 1'h0;
    inf_dp0_wmi_wmi_dhF_countReg = 2'h2;
    inf_dp0_wmi_wmi_dhF_levelsValid = 1'h0;
    inf_dp0_wmi_wmi_errorSticky = 1'h0;
    inf_dp0_wmi_wmi_mFlagF_countReg = 2'h2;
    inf_dp0_wmi_wmi_mFlagF_levelsValid = 1'h0;
    inf_dp0_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    inf_dp0_wmi_wmi_operateD = 1'h0;
    inf_dp0_wmi_wmi_peerIsReady = 1'h0;
    inf_dp0_wmi_wmi_reqF_countReg = 2'h2;
    inf_dp0_wmi_wmi_reqF_levelsValid = 1'h0;
    inf_dp0_wmi_wmi_respF_c_r = 2'h2;
    inf_dp0_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    inf_dp0_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    inf_dp0_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    inf_dp0_wmi_wmi_statusR = 8'hAA;
    inf_dp0_wmi_wmi_trafficSticky = 1'h0;
    inf_dp0_wmi_wrActive = 1'h0;
    inf_dp0_wmi_wrFinalize = 1'h0;
    inf_dp0_wmi_wrtCount = 16'hAAAA;
    inf_dp0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    inf_dp1_bml_crdBuf_modulus = 16'hAAAA;
    inf_dp1_bml_crdBuf_value = 16'hAAAA;
    inf_dp1_bml_fabAvail = 1'h0;
    inf_dp1_bml_fabBuf_modulus = 16'hAAAA;
    inf_dp1_bml_fabBuf_value = 16'hAAAA;
    inf_dp1_bml_fabBufsAvail = 16'hAAAA;
    inf_dp1_bml_fabDone = 1'h0;
    inf_dp1_bml_fabFlowAddr = 32'hAAAAAAAA;
    inf_dp1_bml_fabFlowBase = 32'hAAAAAAAA;
    inf_dp1_bml_fabFlowSize = 32'hAAAAAAAA;
    inf_dp1_bml_fabMesgAddr = 32'hAAAAAAAA;
    inf_dp1_bml_fabMesgBase = 32'hAAAAAAAA;
    inf_dp1_bml_fabMesgSize = 32'hAAAAAAAA;
    inf_dp1_bml_fabMetaAddr = 32'hAAAAAAAA;
    inf_dp1_bml_fabMetaBase = 32'hAAAAAAAA;
    inf_dp1_bml_fabMetaSize = 32'hAAAAAAAA;
    inf_dp1_bml_fabNumBufs = 16'hAAAA;
    inf_dp1_bml_lclBufDone = 1'h0;
    inf_dp1_bml_lclBufStart = 1'h0;
    inf_dp1_bml_lclBuf_modulus = 16'hAAAA;
    inf_dp1_bml_lclBuf_value = 16'hAAAA;
    inf_dp1_bml_lclBufsAR = 16'hAAAA;
    inf_dp1_bml_lclBufsCF = 16'hAAAA;
    inf_dp1_bml_lclCredit = 16'hAAAA;
    inf_dp1_bml_lclDones = 16'hAAAA;
    inf_dp1_bml_lclMesgAddr = 16'hAAAA;
    inf_dp1_bml_lclMetaAddr = 16'hAAAA;
    inf_dp1_bml_lclNumBufs = 16'hAAAA;
    inf_dp1_bml_lclStarts = 16'hAAAA;
    inf_dp1_bml_mesgBase = 16'hAAAA;
    inf_dp1_bml_mesgSize = 16'hAAAA;
    inf_dp1_bml_metaBase = 16'hAAAA;
    inf_dp1_bml_metaSize = 16'hAAAA;
    inf_dp1_bml_remBuf_modulus = 16'hAAAA;
    inf_dp1_bml_remBuf_value = 16'hAAAA;
    inf_dp1_bml_remDone = 1'h0;
    inf_dp1_bml_remDones = 16'hAAAA;
    inf_dp1_bml_remMesgAddr = 16'hAAAA;
    inf_dp1_bml_remMetaAddr = 16'hAAAA;
    inf_dp1_bml_remStart = 1'h0;
    inf_dp1_bml_remStarts = 16'hAAAA;
    inf_dp1_bram_serverAdapterA_1_cnt = 3'h2;
    inf_dp1_bram_serverAdapterA_1_s1 = 2'h2;
    inf_dp1_bram_serverAdapterA_2_cnt = 3'h2;
    inf_dp1_bram_serverAdapterA_2_s1 = 2'h2;
    inf_dp1_bram_serverAdapterA_3_cnt = 3'h2;
    inf_dp1_bram_serverAdapterA_3_s1 = 2'h2;
    inf_dp1_bram_serverAdapterA_cnt = 3'h2;
    inf_dp1_bram_serverAdapterA_s1 = 2'h2;
    inf_dp1_bram_serverAdapterB_1_cnt = 3'h2;
    inf_dp1_bram_serverAdapterB_1_s1 = 2'h2;
    inf_dp1_bram_serverAdapterB_2_cnt = 3'h2;
    inf_dp1_bram_serverAdapterB_2_s1 = 2'h2;
    inf_dp1_bram_serverAdapterB_3_cnt = 3'h2;
    inf_dp1_bram_serverAdapterB_3_s1 = 2'h2;
    inf_dp1_bram_serverAdapterB_cnt = 3'h2;
    inf_dp1_bram_serverAdapterB_s1 = 2'h2;
    inf_dp1_dpControl = 4'hA;
    inf_dp1_tlp_creditReady = 1'h0;
    inf_dp1_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inf_dp1_tlp_dmaDoTailEvent = 1'h0;
    inf_dp1_tlp_dmaPullRemainDWLen = 10'h2AA;
    inf_dp1_tlp_dmaPullRemainDWSub = 10'h2AA;
    inf_dp1_tlp_dmaReqTag = 5'h0A;
    inf_dp1_tlp_dmaTag = 5'h0A;
    inf_dp1_tlp_doXmtMetaBody = 1'h0;
    inf_dp1_tlp_fabFlowAddr = 32'hAAAAAAAA;
    inf_dp1_tlp_fabMesgAccu = 32'hAAAAAAAA;
    inf_dp1_tlp_fabMesgAddr = 32'hAAAAAAAA;
    inf_dp1_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inf_dp1_tlp_fabMetaAddr = 32'hAAAAAAAA;
    inf_dp1_tlp_farBufReady = 1'h0;
    inf_dp1_tlp_flowDiagCount = 32'hAAAAAAAA;
    inf_dp1_tlp_gotResponseHeader = 1'h0;
    inf_dp1_tlp_inIgnorePkt = 1'h0;
    inf_dp1_tlp_maxPayloadSize = 13'h0AAA;
    inf_dp1_tlp_maxReadReqSize = 13'h0AAA;
    inf_dp1_tlp_mesgComplReceived = 17'h0AAAA;
    inf_dp1_tlp_mesgLengthRemainPull = 17'h0AAAA;
    inf_dp1_tlp_mesgLengthRemainPush = 17'h0AAAA;
    inf_dp1_tlp_nearBufReady = 1'h0;
    inf_dp1_tlp_outDwRemain = 10'h2AA;
    inf_dp1_tlp_postSeqDwell = 4'hA;
    inf_dp1_tlp_pullTagMatch = 1'h0;
    inf_dp1_tlp_rdRespDwRemain = 10'h2AA;
    inf_dp1_tlp_readHeaderSent = 1'h0;
    inf_dp1_tlp_readNxtDWAddr = 13'h0AAA;
    inf_dp1_tlp_readRemainDWLen = 10'h2AA;
    inf_dp1_tlp_readStarted = 1'h0;
    inf_dp1_tlp_remDone = 1'h0;
    inf_dp1_tlp_remMesgAccu = 16'hAAAA;
    inf_dp1_tlp_remMesgAddr = 16'hAAAA;
    inf_dp1_tlp_remMetaAddr = 16'hAAAA;
    inf_dp1_tlp_remStart = 1'h0;
    inf_dp1_tlp_reqMesgInFlight = 1'h0;
    inf_dp1_tlp_reqMetaBodyInFlight = 1'h0;
    inf_dp1_tlp_reqMetaInFlight = 1'h0;
    inf_dp1_tlp_srcMesgAccu = 32'hAAAAAAAA;
    inf_dp1_tlp_tlpMetaSent = 1'h0;
    inf_dp1_tlp_tlpRcvBusy = 1'h0;
    inf_dp1_tlp_tlpXmtBusy = 1'h0;
    inf_dp1_tlp_writeDWAddr = 13'h0AAA;
    inf_dp1_tlp_writeLastBE = 4'hA;
    inf_dp1_tlp_writeRemainDWLen = 10'h2AA;
    inf_dp1_tlp_xmtMetaInFlight = 1'h0;
    inf_dp1_tlp_xmtMetaOK = 1'h0;
    inf_dp1_wci_cEdge = 3'h2;
    inf_dp1_wci_cState = 3'h2;
    inf_dp1_wci_ctlAckReg = 1'h0;
    inf_dp1_wci_ctlOpActive = 1'h0;
    inf_dp1_wci_illegalEdge = 1'h0;
    inf_dp1_wci_nState = 3'h2;
    inf_dp1_wci_reqF_countReg = 2'h2;
    inf_dp1_wci_respF_c_r = 2'h2;
    inf_dp1_wci_respF_q_0 = 34'h2AAAAAAAA;
    inf_dp1_wci_respF_q_1 = 34'h2AAAAAAAA;
    inf_dp1_wci_sFlagReg = 1'h0;
    inf_dp1_wci_sThreadBusy_d = 1'h0;
    inf_dp1_wmi_addr = 14'h2AAA;
    inf_dp1_wmi_bufDwell = 2'h2;
    inf_dp1_wmi_bytesRemainReq = 14'h2AAA;
    inf_dp1_wmi_bytesRemainResp = 14'h2AAA;
    inf_dp1_wmi_doneWithMesg = 1'h0;
    inf_dp1_wmi_lastMesg = 32'hAAAAAAAA;
    inf_dp1_wmi_lclMesgAddr = 15'h2AAA;
    inf_dp1_wmi_lclMetaAddr = 15'h2AAA;
    inf_dp1_wmi_mesgBufReady = 1'h0;
    inf_dp1_wmi_mesgBusy = 1'h0;
    inf_dp1_wmi_mesgCount = 32'hAAAAAAAA;
    inf_dp1_wmi_mesgDone = 1'h0;
    inf_dp1_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inf_dp1_wmi_mesgStart = 1'h0;
    inf_dp1_wmi_metaBusy = 1'h0;
    inf_dp1_wmi_p4B = 2'h2;
    inf_dp1_wmi_rdActive = 1'h0;
    inf_dp1_wmi_reqCount = 16'hAAAA;
    inf_dp1_wmi_thisMesg = 32'hAAAAAAAA;
    inf_dp1_wmi_wmi_blockReq = 1'h0;
    inf_dp1_wmi_wmi_dhF_countReg = 2'h2;
    inf_dp1_wmi_wmi_dhF_levelsValid = 1'h0;
    inf_dp1_wmi_wmi_errorSticky = 1'h0;
    inf_dp1_wmi_wmi_mFlagF_countReg = 2'h2;
    inf_dp1_wmi_wmi_mFlagF_levelsValid = 1'h0;
    inf_dp1_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    inf_dp1_wmi_wmi_operateD = 1'h0;
    inf_dp1_wmi_wmi_peerIsReady = 1'h0;
    inf_dp1_wmi_wmi_reqF_countReg = 2'h2;
    inf_dp1_wmi_wmi_reqF_levelsValid = 1'h0;
    inf_dp1_wmi_wmi_respF_c_r = 2'h2;
    inf_dp1_wmi_wmi_respF_q_0 = 34'h2AAAAAAAA;
    inf_dp1_wmi_wmi_respF_q_1 = 34'h2AAAAAAAA;
    inf_dp1_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    inf_dp1_wmi_wmi_statusR = 8'hAA;
    inf_dp1_wmi_wmi_trafficSticky = 1'h0;
    inf_dp1_wmi_wrActive = 1'h0;
    inf_dp1_wmi_wrFinalize = 1'h0;
    inf_dp1_wmi_wrtCount = 16'hAAAA;
    inf_dp1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    inf_itc0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    inf_itc0_wti_sThreadBusy_d = 1'h0;
    inf_itc1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    inf_itc1_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (inf_sm2$RDY_c1_request_get)
	begin
	  v__h162732 = $time;
	  #0;
	end
    if (RST_N)
      if (inf_sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h162732,
		 $unsigned(inf_chompCnt));
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_cfrd)
	begin
	  v__h79480 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h79480,
		 inf_dp0_wci_reqF$D_OUT[51:32],
		 inf_dp0_wci_reqF$D_OUT[55:52],
		 _theResult____h79464);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_ctl_op_start)
	begin
	  v__h17582 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h17582,
		 inf_dp0_wci_reqF$D_OUT[36:34],
		 inf_dp0_wci_cState);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta)
	begin
	  v__h21867 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h21867);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg)
	begin
	  v__h27319 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h27319);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead)
	begin
	  v__h22879 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h22879,
		 { inf_dp0_tlp_mRespF$D_OUT[7:0],
		   inf_dp0_tlp_mRespF$D_OUT[15:8],
		   inf_dp0_tlp_mRespF$D_OUT[23:16],
		   inf_dp0_tlp_mRespF$D_OUT[31:24] });
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader)
	  begin
	    v__h27886 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h27886);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody)
	begin
	  v__h28237 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h28237);
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead)
	  begin
	    v__h29300 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h29300);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody)
	begin
	  v__h32034 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h32034);
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent)
	  begin
	    v__h33068 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtTailEvent)
	  $display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h33068);
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell)
	  begin
	    v__h34115 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaXmtDoorbell)
	  $display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		   v__h34115);
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta)
	  begin
	    v__h35705 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaRespHeadFarMeta)
	  $display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		   v__h35705,
		   { inf_dp0_tlp_inF$D_OUT[7:0],
		     inf_dp0_tlp_inF$D_OUT[15:8],
		     inf_dp0_tlp_inF$D_OUT[23:16],
		     inf_dp0_tlp_inF$D_OUT[31:24] });
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader)
	begin
	  v__h40854 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h40854);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody)
	begin
	  v__h41171 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h41171);
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent)
	  begin
	    v__h42225 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullTailEvent)
	  $display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5",
		   v__h42225);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta)
	begin
	  v__h39809 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h39809,
		 opcode__h36650,
		 nowMS__h36651,
		 nowLS__h36652);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody)
	begin
	  v__h26973 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h26973,
		 opcode__h23808,
		 nowMS__h23809,
		 nowLS__h23810);
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta)
	  begin
	    v__h34454 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h34454);
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h40236 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_13)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp0_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h40236);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize)
	begin
	  v__h71544 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h71544,
		 inf_dp0_wmi_lclMetaAddr,
		 x3__h70901,
		 mesgMeta_opcode__h70941,
		 inf_dp0_wmi_nowW$wget[63:32],
		 inf_dp0_wmi_nowW$wget[31:0]);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_cfrd)
	begin
	  v__h158538 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h158538,
		 inf_dp1_wci_reqF$D_OUT[51:32],
		 inf_dp1_wci_reqF$D_OUT[55:52],
		 _theResult____h158522);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_ctl_op_start)
	begin
	  v__h96671 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h96671,
		 inf_dp1_wci_reqF$D_OUT[36:34],
		 inf_dp1_wci_cState);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta)
	begin
	  v__h100941 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h100941);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg)
	begin
	  v__h106390 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h106390);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead)
	begin
	  v__h101950 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h101950,
		 { inf_dp1_tlp_mRespF$D_OUT[7:0],
		   inf_dp1_tlp_mRespF$D_OUT[15:8],
		   inf_dp1_tlp_mRespF$D_OUT[23:16],
		   inf_dp1_tlp_mRespF$D_OUT[31:24] });
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader)
	  begin
	    v__h106957 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h106957);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody)
	begin
	  v__h107308 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h107308);
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead)
	  begin
	    v__h108371 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h108371);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody)
	begin
	  v__h111105 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h111105);
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent)
	  begin
	    v__h112139 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtTailEvent)
	  $display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7",
		   v__h112139);
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell)
	  begin
	    v__h113186 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaXmtDoorbell)
	  $display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		   v__h113186);
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta)
	  begin
	    v__h114768 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaRespHeadFarMeta)
	  $display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		   v__h114768,
		   { inf_dp1_tlp_inF$D_OUT[7:0],
		     inf_dp1_tlp_inF$D_OUT[15:8],
		     inf_dp1_tlp_inF$D_OUT[23:16],
		     inf_dp1_tlp_inF$D_OUT[31:24] });
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader)
	begin
	  v__h119917 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h119917);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody)
	begin
	  v__h120234 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h120234);
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent)
	  begin
	    v__h121288 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullTailEvent)
	  $display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5",
		   v__h121288);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta)
	begin
	  v__h118872 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h118872,
		 opcode__h115713,
		 nowMS__h115714,
		 nowLS__h115715);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody)
	begin
	  v__h106044 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h106044,
		 opcode__h102879,
		 nowMS__h102880,
		 nowLS__h102881);
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta)
	  begin
	    v__h113520 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h113520);
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h119299 = $time;
	    #0;
	  end
    if (inf_cp$RST_N_wci_Vm_14)
      if (RST_N)
	if (WILL_FIRE_RL_inf_dp1_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h119299);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize)
	begin
	  v__h150607 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h150607,
		 inf_dp1_wmi_lclMetaAddr,
		 x3__h149964,
		 mesgMeta_opcode__h150004,
		 inf_dp1_wmi_nowW$wget[63:32],
		 inf_dp1_wmi_nowW$wget[31:0]);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctl_op_start)
	begin
	  v__h166822 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h166822,
		 app_appW2_wci_reqF$D_OUT[36:34],
		 app_appW2_wci_cState);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctrl_OrE &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_ctrl_OrE and\n  RL_app_appW2_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_cfrd &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_cfrd and RL_app_appW2_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_cfrd &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_cfrd and RL_app_appW2_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmrd_mesgBegin)
	begin
	  v__h180844 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h180844,
		 app_appW2_mesgCount,
		 app_appW2_wmi_sFlagReg[23:0],
		 app_appW2_wmi_sFlagReg[31:24]);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	  inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h78944 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_cfwr &&
	  inf_dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h78944);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_cfwr)
	begin
	  v__h79318 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h79318,
		 inf_dp0_wci_reqF$D_OUT[51:32],
		 inf_dp0_wci_reqF$D_OUT[55:52],
		 inf_dp0_wci_reqF$D_OUT[31:0]);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_cfwr && WILL_FIRE_RL_inf_dp0_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_inf_dp0_wci_cfwr and RL_inf_dp0_wci_cfrd fired\n  in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete && inf_dp0_wci_illegalEdge)
	begin
	  v__h17922 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete && inf_dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h17922,
		 inf_dp0_wci_cEdge,
		 inf_dp0_wci_cState);
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete &&
	  !inf_dp0_wci_illegalEdge)
	begin
	  v__h17767 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_13)
      if (WILL_FIRE_RL_inf_dp0_wci_ctl_op_complete &&
	  !inf_dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h17767,
		 inf_dp0_wci_cEdge,
		 inf_dp0_wci_cState,
		 inf_dp0_wci_nState);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctrl_IsO)
	begin
	  v__h185101 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h185101,
		 app_appW2_smaCtrl);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_ctrl_IsO and\n  RL_app_appW2_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_ctrl_IsO and\n  RL_app_appW2_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_ctrl_IsO and RL_app_appW2_wci_cfrd\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	  app_appW2_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h182261 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	  app_appW2_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h182261,
		 app_appW2_mesgCount,
		 app_appW2_wsiS_reqFifo$D_OUT[55:44],
		 app_appW2_wsiS_reqFifo$D_OUT[7:0]);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	  !app_appW2_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h182338 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_mesgBegin &&
	  !app_appW2_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h182338,
		 app_appW2_mesgCount);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_doAbort)
	begin
	  v__h184058 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h184058);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_messageFinalize)
	begin
	  v__h184319 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h184319,
		 app_appW2_mesgCount,
		 x__h182412);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_cfwr &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_cfwr and RL_app_appW2_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_cfwr &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_IsO)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_cfwr and RL_app_appW2_wci_ctrl_IsO\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_cfwr &&
	  WILL_FIRE_RL_app_appW2_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_cfwr and RL_app_appW2_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_cfwr && WILL_FIRE_RL_app_appW2_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW2_wci_cfwr and RL_app_appW2_wci_cfrd\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctl_op_complete &&
	  app_appW2_wci_illegalEdge)
	begin
	  v__h167159 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctl_op_complete &&
	  app_appW2_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h167159,
		 app_appW2_wci_cEdge,
		 app_appW2_wci_cState);
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctl_op_complete &&
	  !app_appW2_wci_illegalEdge)
	begin
	  v__h167004 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_2)
      if (WILL_FIRE_RL_app_appW2_wci_ctl_op_complete &&
	  !app_appW2_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h167004,
		 app_appW2_wci_cEdge,
		 app_appW2_wci_cState,
		 app_appW2_wci_nState);
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctl_op_start)
	begin
	  v__h190042 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h190042,
		 app_appW3_wci_reqF$D_OUT[36:34],
		 app_appW3_wci_cState);
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctrl_OrE &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 443, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_ctrl_OrE and\n  RL_app_appW3_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_cfrd &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 392, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_cfrd and RL_app_appW3_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_cfrd &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 392, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_cfrd and RL_app_appW3_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctrl_IsO)
	begin
	  v__h209280 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting DelayWorker dlyCtrl:%0x",
		 v__h209280,
		 app_appW3_dlyCtrl);
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_ctrl_IsO and\n  RL_app_appW3_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_ctrl_IsO and\n  RL_app_appW3_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW3_wci_cfrd)
	$display("Error: \"bsv/DelayWorker.bsv\", line 430, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_ctrl_IsO and RL_app_appW3_wci_cfrd\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_cfwr &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_OrE)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_cfwr and RL_app_appW3_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_cfwr &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_IsO)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_cfwr and RL_app_appW3_wci_ctrl_IsO\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_cfwr &&
	  WILL_FIRE_RL_app_appW3_wci_ctrl_EiI)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_cfwr and RL_app_appW3_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_cfwr && WILL_FIRE_RL_app_appW3_wci_cfrd)
	$display("Error: \"bsv/DelayWorker.bsv\", line 381, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW3_wci_cfwr and RL_app_appW3_wci_cfrd\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctl_op_complete &&
	  app_appW3_wci_illegalEdge)
	begin
	  v__h190379 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctl_op_complete &&
	  app_appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h190379,
		 app_appW3_wci_cEdge,
		 app_appW3_wci_cState);
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctl_op_complete &&
	  !app_appW3_wci_illegalEdge)
	begin
	  v__h190224 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_3)
      if (WILL_FIRE_RL_app_appW3_wci_ctl_op_complete &&
	  !app_appW3_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h190224,
		 app_appW3_wci_cEdge,
		 app_appW3_wci_cState,
		 app_appW3_wci_nState);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctl_op_start)
	begin
	  v__h214241 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h214241,
		 app_appW4_wci_reqF$D_OUT[36:34],
		 app_appW4_wci_cState);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctrl_OrE &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 324, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_ctrl_OrE and\n  RL_app_appW4_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_cfrd &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_cfrd and RL_app_appW4_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_cfrd &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 292, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_cfrd and RL_app_appW4_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmrd_mesgBegin)
	begin
	  v__h228256 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h228256,
		 app_appW4_mesgCount,
		 app_appW4_wmi_sFlagReg[23:0],
		 app_appW4_wmi_sFlagReg[31:24]);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	  inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h158002 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_cfwr &&
	  inf_dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h158002);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_cfwr)
	begin
	  v__h158376 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h158376,
		 inf_dp1_wci_reqF$D_OUT[51:32],
		 inf_dp1_wci_reqF$D_OUT[55:52],
		 inf_dp1_wci_reqF$D_OUT[31:0]);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_cfwr && WILL_FIRE_RL_inf_dp1_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_inf_dp1_wci_cfwr and RL_inf_dp1_wci_cfrd fired\n  in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete && inf_dp1_wci_illegalEdge)
	begin
	  v__h97008 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete && inf_dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h97008,
		 inf_dp1_wci_cEdge,
		 inf_dp1_wci_cState);
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete &&
	  !inf_dp1_wci_illegalEdge)
	begin
	  v__h96853 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_14)
      if (WILL_FIRE_RL_inf_dp1_wci_ctl_op_complete &&
	  !inf_dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h96853,
		 inf_dp1_wci_cEdge,
		 inf_dp1_wci_cState,
		 inf_dp1_wci_nState);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctrl_IsO)
	begin
	  v__h232513 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h232513,
		 app_appW4_smaCtrl);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_ctrl_IsO and\n  RL_app_appW4_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_ctrl_IsO and\n  RL_app_appW4_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctrl_IsO &&
	  WILL_FIRE_RL_app_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 314, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_ctrl_IsO and RL_app_appW4_wci_cfrd\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	  app_appW4_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h229673 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	  app_appW4_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h229673,
		 app_appW4_mesgCount,
		 app_appW4_wsiS_reqFifo$D_OUT[55:44],
		 app_appW4_wsiS_reqFifo$D_OUT[7:0]);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	  !app_appW4_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h229750 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_mesgBegin &&
	  !app_appW4_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h229750,
		 app_appW4_mesgCount);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_doAbort)
	begin
	  v__h231470 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h231470);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_messageFinalize)
	begin
	  v__h231731 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h231731,
		 app_appW4_mesgCount,
		 x__h229824);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_cfwr &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_OrE)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_cfwr and RL_app_appW4_wci_ctrl_OrE\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_cfwr &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_IsO)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_cfwr and RL_app_appW4_wci_ctrl_IsO\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_cfwr &&
	  WILL_FIRE_RL_app_appW4_wci_ctrl_EiI)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_cfwr and RL_app_appW4_wci_ctrl_EiI\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_cfwr && WILL_FIRE_RL_app_appW4_wci_cfrd)
	$display("Error: \"bsv/SMAdapter.bsv\", line 282, column 6: (R0001)\n  Mutually exclusive rules RL_app_appW4_wci_cfwr and RL_app_appW4_wci_cfrd\n  fired in the same clock cycle.\n");
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctl_op_complete &&
	  app_appW4_wci_illegalEdge)
	begin
	  v__h214578 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctl_op_complete &&
	  app_appW4_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h214578,
		 app_appW4_wci_cEdge,
		 app_appW4_wci_cState);
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctl_op_complete &&
	  !app_appW4_wci_illegalEdge)
	begin
	  v__h214423 = $time;
	  #0;
	end
    if (inf_cp$RST_N_wci_Vm_4)
      if (WILL_FIRE_RL_app_appW4_wci_ctl_op_complete &&
	  !app_appW4_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h214423,
		 app_appW4_wci_cEdge,
		 app_appW4_wci_cState,
		 app_appW4_wci_nState);
  end
  // synopsys translate_on
endmodule  // mkCTop4B

