//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Wed Jan  5 11:55:50 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkTB11(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [95 : 0] biasWorker_wsiM_extStatusW$wget,
		biasWorker_wsiS_extStatusW$wget,
		pmemMon0_wsiS_extStatusW$wget,
		pmemMon1_wsiS_extStatusW$wget,
		wsiM_extStatusW$wget,
		wsiMon_pmsender_wsiM_extStatusW$wget,
		wsiS_extStatusW$wget;
  wire [60 : 0] biasWorker_wsiM_reqFifo_x_wire$wget,
		biasWorker_wsiS_wsiReq$wget,
		pmemMon0_wsiS_wsiReq$wget,
		pmemMon1_wsiS_wsiReq$wget,
		wsiM_reqFifo_x_wire$wget,
		wsiMon_pmsender_wsiM_reqFifo_x_wire$wget,
		wsiS_wsiReq$wget;
  wire [59 : 0] biasWorker_wci_wciReq$wget, wci_reqF_x_wire$wget;
  wire [33 : 0] biasWorker_wci_respF_x_wire$wget, wci_wciResponse$wget;
  wire [31 : 0] biasWorker_wci_Es_mData_w$wget,
		biasWorker_wsi_Es_mData_w$wget,
		pmemMon0_wsi_Es_mData_w$wget,
		pmemMon1_wsi_Es_mData_w$wget,
		wci_Em_respData_w$wget,
		wsi_Es_mData_w$wget;
  wire [19 : 0] biasWorker_wci_Es_mAddr_w$wget;
  wire [11 : 0] biasWorker_wsi_Es_mBurstLength_w$wget,
		pmemMon0_wsi_Es_mBurstLength_w$wget,
		pmemMon1_wsi_Es_mBurstLength_w$wget,
		wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] biasWorker_wsi_Es_mReqInfo_w$wget,
	       pmemMon0_wsi_Es_mReqInfo_w$wget,
	       pmemMon1_wsi_Es_mReqInfo_w$wget,
	       wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] biasWorker_wci_Es_mByteEn_w$wget,
	       biasWorker_wsi_Es_mByteEn_w$wget,
	       pmemMon0_wsi_Es_mByteEn_w$wget,
	       pmemMon1_wsi_Es_mByteEn_w$wget,
	       wsi_Es_mByteEn_w$wget;
  wire [2 : 0] biasWorker_wci_Es_mCmd_w$wget,
	       biasWorker_wci_wEdge$wget,
	       biasWorker_wsi_Es_mCmd_w$wget,
	       pmemMon0_wsi_Es_mCmd_w$wget,
	       pmemMon1_wsi_Es_mCmd_w$wget,
	       wsi_Es_mCmd_w$wget;
  wire [1 : 0] wci_Em_resp_w$wget;
  wire biasWorker_wci_Es_mAddrSpace_w$wget,
       biasWorker_wci_Es_mAddrSpace_w$whas,
       biasWorker_wci_Es_mAddr_w$whas,
       biasWorker_wci_Es_mByteEn_w$whas,
       biasWorker_wci_Es_mCmd_w$whas,
       biasWorker_wci_Es_mData_w$whas,
       biasWorker_wci_ctlAckReg_1$wget,
       biasWorker_wci_ctlAckReg_1$whas,
       biasWorker_wci_reqF_r_clr$whas,
       biasWorker_wci_reqF_r_deq$whas,
       biasWorker_wci_reqF_r_enq$whas,
       biasWorker_wci_respF_dequeueing$whas,
       biasWorker_wci_respF_enqueueing$whas,
       biasWorker_wci_respF_x_wire$whas,
       biasWorker_wci_sFlagReg_1$wget,
       biasWorker_wci_sFlagReg_1$whas,
       biasWorker_wci_sThreadBusy_pw$whas,
       biasWorker_wci_wEdge$whas,
       biasWorker_wci_wciReq$whas,
       biasWorker_wci_wci_cfrd_pw$whas,
       biasWorker_wci_wci_cfwr_pw$whas,
       biasWorker_wci_wci_ctrl_pw$whas,
       biasWorker_wsiM_operateD_1$wget,
       biasWorker_wsiM_operateD_1$whas,
       biasWorker_wsiM_peerIsReady_1$wget,
       biasWorker_wsiM_peerIsReady_1$whas,
       biasWorker_wsiM_reqFifo_dequeueing$whas,
       biasWorker_wsiM_reqFifo_enqueueing$whas,
       biasWorker_wsiM_reqFifo_x_wire$whas,
       biasWorker_wsiM_sThreadBusy_pw$whas,
       biasWorker_wsiS_operateD_1$wget,
       biasWorker_wsiS_operateD_1$whas,
       biasWorker_wsiS_peerIsReady_1$wget,
       biasWorker_wsiS_peerIsReady_1$whas,
       biasWorker_wsiS_reqFifo_doResetClr$whas,
       biasWorker_wsiS_reqFifo_doResetDeq$whas,
       biasWorker_wsiS_reqFifo_doResetEnq$whas,
       biasWorker_wsiS_reqFifo_r_clr$whas,
       biasWorker_wsiS_reqFifo_r_deq$whas,
       biasWorker_wsiS_reqFifo_r_enq$whas,
       biasWorker_wsiS_sThreadBusy_dw$wget,
       biasWorker_wsiS_sThreadBusy_dw$whas,
       biasWorker_wsiS_wsiReq$whas,
       biasWorker_wsi_Es_mBurstLength_w$whas,
       biasWorker_wsi_Es_mBurstPrecise_w$whas,
       biasWorker_wsi_Es_mByteEn_w$whas,
       biasWorker_wsi_Es_mCmd_w$whas,
       biasWorker_wsi_Es_mDataInfo_w$whas,
       biasWorker_wsi_Es_mData_w$whas,
       biasWorker_wsi_Es_mReqInfo_w$whas,
       biasWorker_wsi_Es_mReqLast_w$whas,
       pmemMon0_pmBody_1$wget,
       pmemMon0_pmBody_1$whas,
       pmemMon0_pmHead_1$wget,
       pmemMon0_pmHead_1$whas,
       pmemMon0_wsiS_operateD_1$wget,
       pmemMon0_wsiS_operateD_1$whas,
       pmemMon0_wsiS_peerIsReady_1$wget,
       pmemMon0_wsiS_peerIsReady_1$whas,
       pmemMon0_wsiS_reqFifo_doResetClr$whas,
       pmemMon0_wsiS_reqFifo_doResetDeq$whas,
       pmemMon0_wsiS_reqFifo_doResetEnq$whas,
       pmemMon0_wsiS_reqFifo_r_clr$whas,
       pmemMon0_wsiS_reqFifo_r_deq$whas,
       pmemMon0_wsiS_reqFifo_r_enq$whas,
       pmemMon0_wsiS_sThreadBusy_dw$wget,
       pmemMon0_wsiS_sThreadBusy_dw$whas,
       pmemMon0_wsiS_wsiReq$whas,
       pmemMon0_wsi_Es_mBurstLength_w$whas,
       pmemMon0_wsi_Es_mBurstPrecise_w$whas,
       pmemMon0_wsi_Es_mByteEn_w$whas,
       pmemMon0_wsi_Es_mCmd_w$whas,
       pmemMon0_wsi_Es_mDataInfo_w$whas,
       pmemMon0_wsi_Es_mData_w$whas,
       pmemMon0_wsi_Es_mReqInfo_w$whas,
       pmemMon0_wsi_Es_mReqLast_w$whas,
       pmemMon1_pmBody_1$wget,
       pmemMon1_pmBody_1$whas,
       pmemMon1_pmHead_1$wget,
       pmemMon1_pmHead_1$whas,
       pmemMon1_wsiS_operateD_1$wget,
       pmemMon1_wsiS_operateD_1$whas,
       pmemMon1_wsiS_peerIsReady_1$wget,
       pmemMon1_wsiS_peerIsReady_1$whas,
       pmemMon1_wsiS_reqFifo_doResetClr$whas,
       pmemMon1_wsiS_reqFifo_doResetDeq$whas,
       pmemMon1_wsiS_reqFifo_doResetEnq$whas,
       pmemMon1_wsiS_reqFifo_r_clr$whas,
       pmemMon1_wsiS_reqFifo_r_deq$whas,
       pmemMon1_wsiS_reqFifo_r_enq$whas,
       pmemMon1_wsiS_sThreadBusy_dw$wget,
       pmemMon1_wsiS_sThreadBusy_dw$whas,
       pmemMon1_wsiS_wsiReq$whas,
       pmemMon1_wsi_Es_mBurstLength_w$whas,
       pmemMon1_wsi_Es_mBurstPrecise_w$whas,
       pmemMon1_wsi_Es_mByteEn_w$whas,
       pmemMon1_wsi_Es_mCmd_w$whas,
       pmemMon1_wsi_Es_mDataInfo_w$whas,
       pmemMon1_wsi_Es_mData_w$whas,
       pmemMon1_wsi_Es_mReqInfo_w$whas,
       pmemMon1_wsi_Es_mReqLast_w$whas,
       wciSeqFsm_abort$wget,
       wciSeqFsm_abort$whas,
       wciSeqFsm_pw_list$whas,
       wciSeqFsm_pw_list_1$whas,
       wciSeqFsm_pw_list_10$whas,
       wciSeqFsm_pw_list_11$whas,
       wciSeqFsm_pw_list_12$whas,
       wciSeqFsm_pw_list_13$whas,
       wciSeqFsm_pw_list_14$whas,
       wciSeqFsm_pw_list_15$whas,
       wciSeqFsm_pw_list_16$whas,
       wciSeqFsm_pw_list_17$whas,
       wciSeqFsm_pw_list_18$whas,
       wciSeqFsm_pw_list_19$whas,
       wciSeqFsm_pw_list_2$whas,
       wciSeqFsm_pw_list_20$whas,
       wciSeqFsm_pw_list_21$whas,
       wciSeqFsm_pw_list_22$whas,
       wciSeqFsm_pw_list_23$whas,
       wciSeqFsm_pw_list_24$whas,
       wciSeqFsm_pw_list_3$whas,
       wciSeqFsm_pw_list_4$whas,
       wciSeqFsm_pw_list_5$whas,
       wciSeqFsm_pw_list_6$whas,
       wciSeqFsm_pw_list_7$whas,
       wciSeqFsm_pw_list_8$whas,
       wciSeqFsm_pw_list_9$whas,
       wciSeqFsm_start_reg_1$wget,
       wciSeqFsm_start_reg_1$whas,
       wciSeqFsm_start_wire$wget,
       wciSeqFsm_start_wire$whas,
       wciSeqFsm_state_run_pw$whas,
       wciSeqFsm_state_start_pw$whas,
       wci_Em_respData_w$whas,
       wci_Em_resp_w$whas,
       wci_reqF_dequeueing$whas,
       wci_reqF_enqueueing$whas,
       wci_reqF_x_wire$whas,
       wci_sThreadBusy_pw$whas,
       wci_sfCapClear_1$wget,
       wci_sfCapClear_1$whas,
       wci_sfCapSet_1$wget,
       wci_sfCapSet_1$whas,
       wci_wciResponse$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiMon_observer_r_mBurstPrecise_1$wget,
       wsiMon_observer_r_mBurstPrecise_1$whas,
       wsiMon_observer_r_mReqLast_1$wget,
       wsiMon_observer_r_mReqLast_1$whas,
       wsiMon_observer_r_mReset_n_1$wget,
       wsiMon_observer_r_mReset_n_1$whas,
       wsiMon_observer_r_sReset_n_1$wget,
       wsiMon_observer_r_sReset_n_1$whas,
       wsiMon_observer_r_sThreadBusy_1$wget,
       wsiMon_observer_r_sThreadBusy_1$whas,
       wsiMon_pmsender_wsiM_operateD_1$wget,
       wsiMon_pmsender_wsiM_operateD_1$whas,
       wsiMon_pmsender_wsiM_peerIsReady_1$wget,
       wsiMon_pmsender_wsiM_peerIsReady_1$whas,
       wsiMon_pmsender_wsiM_reqFifo_dequeueing$whas,
       wsiMon_pmsender_wsiM_reqFifo_enqueueing$whas,
       wsiMon_pmsender_wsiM_reqFifo_x_wire$whas,
       wsiMon_pmsender_wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas;

  // register biasWorker_biasValue
  reg [31 : 0] biasWorker_biasValue;
  wire [31 : 0] biasWorker_biasValue$D_IN;
  wire biasWorker_biasValue$EN;

  // register biasWorker_controlReg
  reg [31 : 0] biasWorker_controlReg;
  wire [31 : 0] biasWorker_controlReg$D_IN;
  wire biasWorker_controlReg$EN;

  // register biasWorker_wci_cEdge
  reg [2 : 0] biasWorker_wci_cEdge;
  wire [2 : 0] biasWorker_wci_cEdge$D_IN;
  wire biasWorker_wci_cEdge$EN;

  // register biasWorker_wci_cState
  reg [2 : 0] biasWorker_wci_cState;
  wire [2 : 0] biasWorker_wci_cState$D_IN;
  wire biasWorker_wci_cState$EN;

  // register biasWorker_wci_ctlAckReg
  reg biasWorker_wci_ctlAckReg;
  wire biasWorker_wci_ctlAckReg$D_IN, biasWorker_wci_ctlAckReg$EN;

  // register biasWorker_wci_ctlOpActive
  reg biasWorker_wci_ctlOpActive;
  wire biasWorker_wci_ctlOpActive$D_IN, biasWorker_wci_ctlOpActive$EN;

  // register biasWorker_wci_illegalEdge
  reg biasWorker_wci_illegalEdge;
  wire biasWorker_wci_illegalEdge$D_IN, biasWorker_wci_illegalEdge$EN;

  // register biasWorker_wci_nState
  reg [2 : 0] biasWorker_wci_nState;
  reg [2 : 0] biasWorker_wci_nState$D_IN;
  wire biasWorker_wci_nState$EN;

  // register biasWorker_wci_reqF_countReg
  reg [1 : 0] biasWorker_wci_reqF_countReg;
  wire [1 : 0] biasWorker_wci_reqF_countReg$D_IN;
  wire biasWorker_wci_reqF_countReg$EN;

  // register biasWorker_wci_respF_c_r
  reg [1 : 0] biasWorker_wci_respF_c_r;
  wire [1 : 0] biasWorker_wci_respF_c_r$D_IN;
  wire biasWorker_wci_respF_c_r$EN;

  // register biasWorker_wci_respF_q_0
  reg [33 : 0] biasWorker_wci_respF_q_0;
  reg [33 : 0] biasWorker_wci_respF_q_0$D_IN;
  wire biasWorker_wci_respF_q_0$EN;

  // register biasWorker_wci_respF_q_1
  reg [33 : 0] biasWorker_wci_respF_q_1;
  reg [33 : 0] biasWorker_wci_respF_q_1$D_IN;
  wire biasWorker_wci_respF_q_1$EN;

  // register biasWorker_wci_sFlagReg
  reg biasWorker_wci_sFlagReg;
  wire biasWorker_wci_sFlagReg$D_IN, biasWorker_wci_sFlagReg$EN;

  // register biasWorker_wci_sThreadBusy_d
  reg biasWorker_wci_sThreadBusy_d;
  wire biasWorker_wci_sThreadBusy_d$D_IN, biasWorker_wci_sThreadBusy_d$EN;

  // register biasWorker_wsiM_burstKind
  reg [1 : 0] biasWorker_wsiM_burstKind;
  wire [1 : 0] biasWorker_wsiM_burstKind$D_IN;
  wire biasWorker_wsiM_burstKind$EN;

  // register biasWorker_wsiM_errorSticky
  reg biasWorker_wsiM_errorSticky;
  wire biasWorker_wsiM_errorSticky$D_IN, biasWorker_wsiM_errorSticky$EN;

  // register biasWorker_wsiM_iMesgCount
  reg [31 : 0] biasWorker_wsiM_iMesgCount;
  wire [31 : 0] biasWorker_wsiM_iMesgCount$D_IN;
  wire biasWorker_wsiM_iMesgCount$EN;

  // register biasWorker_wsiM_operateD
  reg biasWorker_wsiM_operateD;
  wire biasWorker_wsiM_operateD$D_IN, biasWorker_wsiM_operateD$EN;

  // register biasWorker_wsiM_pMesgCount
  reg [31 : 0] biasWorker_wsiM_pMesgCount;
  wire [31 : 0] biasWorker_wsiM_pMesgCount$D_IN;
  wire biasWorker_wsiM_pMesgCount$EN;

  // register biasWorker_wsiM_peerIsReady
  reg biasWorker_wsiM_peerIsReady;
  wire biasWorker_wsiM_peerIsReady$D_IN, biasWorker_wsiM_peerIsReady$EN;

  // register biasWorker_wsiM_reqFifo_c_r
  reg [1 : 0] biasWorker_wsiM_reqFifo_c_r;
  wire [1 : 0] biasWorker_wsiM_reqFifo_c_r$D_IN;
  wire biasWorker_wsiM_reqFifo_c_r$EN;

  // register biasWorker_wsiM_reqFifo_q_0
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_0;
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_0$D_IN;
  wire biasWorker_wsiM_reqFifo_q_0$EN;

  // register biasWorker_wsiM_reqFifo_q_1
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_1;
  reg [60 : 0] biasWorker_wsiM_reqFifo_q_1$D_IN;
  wire biasWorker_wsiM_reqFifo_q_1$EN;

  // register biasWorker_wsiM_sThreadBusy_d
  reg biasWorker_wsiM_sThreadBusy_d;
  wire biasWorker_wsiM_sThreadBusy_d$D_IN, biasWorker_wsiM_sThreadBusy_d$EN;

  // register biasWorker_wsiM_statusR
  reg [7 : 0] biasWorker_wsiM_statusR;
  wire [7 : 0] biasWorker_wsiM_statusR$D_IN;
  wire biasWorker_wsiM_statusR$EN;

  // register biasWorker_wsiM_tBusyCount
  reg [31 : 0] biasWorker_wsiM_tBusyCount;
  wire [31 : 0] biasWorker_wsiM_tBusyCount$D_IN;
  wire biasWorker_wsiM_tBusyCount$EN;

  // register biasWorker_wsiM_trafficSticky
  reg biasWorker_wsiM_trafficSticky;
  wire biasWorker_wsiM_trafficSticky$D_IN, biasWorker_wsiM_trafficSticky$EN;

  // register biasWorker_wsiS_burstKind
  reg [1 : 0] biasWorker_wsiS_burstKind;
  wire [1 : 0] biasWorker_wsiS_burstKind$D_IN;
  wire biasWorker_wsiS_burstKind$EN;

  // register biasWorker_wsiS_errorSticky
  reg biasWorker_wsiS_errorSticky;
  wire biasWorker_wsiS_errorSticky$D_IN, biasWorker_wsiS_errorSticky$EN;

  // register biasWorker_wsiS_iMesgCount
  reg [31 : 0] biasWorker_wsiS_iMesgCount;
  wire [31 : 0] biasWorker_wsiS_iMesgCount$D_IN;
  wire biasWorker_wsiS_iMesgCount$EN;

  // register biasWorker_wsiS_mesgWordLength
  reg [11 : 0] biasWorker_wsiS_mesgWordLength;
  wire [11 : 0] biasWorker_wsiS_mesgWordLength$D_IN;
  wire biasWorker_wsiS_mesgWordLength$EN;

  // register biasWorker_wsiS_operateD
  reg biasWorker_wsiS_operateD;
  wire biasWorker_wsiS_operateD$D_IN, biasWorker_wsiS_operateD$EN;

  // register biasWorker_wsiS_pMesgCount
  reg [31 : 0] biasWorker_wsiS_pMesgCount;
  wire [31 : 0] biasWorker_wsiS_pMesgCount$D_IN;
  wire biasWorker_wsiS_pMesgCount$EN;

  // register biasWorker_wsiS_peerIsReady
  reg biasWorker_wsiS_peerIsReady;
  wire biasWorker_wsiS_peerIsReady$D_IN, biasWorker_wsiS_peerIsReady$EN;

  // register biasWorker_wsiS_reqFifo_countReg
  reg [1 : 0] biasWorker_wsiS_reqFifo_countReg;
  wire [1 : 0] biasWorker_wsiS_reqFifo_countReg$D_IN;
  wire biasWorker_wsiS_reqFifo_countReg$EN;

  // register biasWorker_wsiS_reqFifo_levelsValid
  reg biasWorker_wsiS_reqFifo_levelsValid;
  wire biasWorker_wsiS_reqFifo_levelsValid$D_IN,
       biasWorker_wsiS_reqFifo_levelsValid$EN;

  // register biasWorker_wsiS_statusR
  reg [7 : 0] biasWorker_wsiS_statusR;
  wire [7 : 0] biasWorker_wsiS_statusR$D_IN;
  wire biasWorker_wsiS_statusR$EN;

  // register biasWorker_wsiS_tBusyCount
  reg [31 : 0] biasWorker_wsiS_tBusyCount;
  wire [31 : 0] biasWorker_wsiS_tBusyCount$D_IN;
  wire biasWorker_wsiS_tBusyCount$EN;

  // register biasWorker_wsiS_trafficSticky
  reg biasWorker_wsiS_trafficSticky;
  wire biasWorker_wsiS_trafficSticky$D_IN, biasWorker_wsiS_trafficSticky$EN;

  // register biasWorker_wsiS_wordCount
  reg [11 : 0] biasWorker_wsiS_wordCount;
  wire [11 : 0] biasWorker_wsiS_wordCount$D_IN;
  wire biasWorker_wsiS_wordCount$EN;

  // register dstDataOut
  reg [31 : 0] dstDataOut;
  wire [31 : 0] dstDataOut$D_IN;
  wire dstDataOut$EN;

  // register dstMesgCount
  reg [15 : 0] dstMesgCount;
  wire [15 : 0] dstMesgCount$D_IN;
  wire dstMesgCount$EN;

  // register dstUnrollCnt
  reg [15 : 0] dstUnrollCnt;
  wire [15 : 0] dstUnrollCnt$D_IN;
  wire dstUnrollCnt$EN;

  // register enWsiChecker
  reg enWsiChecker;
  wire enWsiChecker$D_IN, enWsiChecker$EN;

  // register enWsiSource
  reg enWsiSource;
  wire enWsiSource$D_IN, enWsiSource$EN;

  // register pmemMon0_eventCount
  reg [31 : 0] pmemMon0_eventCount;
  wire [31 : 0] pmemMon0_eventCount$D_IN;
  wire pmemMon0_eventCount$EN;

  // register pmemMon0_msgActive
  reg pmemMon0_msgActive;
  wire pmemMon0_msgActive$D_IN, pmemMon0_msgActive$EN;

  // register pmemMon0_pmBody
  reg pmemMon0_pmBody;
  wire pmemMon0_pmBody$D_IN, pmemMon0_pmBody$EN;

  // register pmemMon0_pmGrab
  reg pmemMon0_pmGrab;
  wire pmemMon0_pmGrab$D_IN, pmemMon0_pmGrab$EN;

  // register pmemMon0_pmHead
  reg pmemMon0_pmHead;
  wire pmemMon0_pmHead$D_IN, pmemMon0_pmHead$EN;

  // register pmemMon0_pmh
  reg [31 : 0] pmemMon0_pmh;
  wire [31 : 0] pmemMon0_pmh$D_IN;
  wire pmemMon0_pmh$EN;

  // register pmemMon0_wsiS_burstKind
  reg [1 : 0] pmemMon0_wsiS_burstKind;
  wire [1 : 0] pmemMon0_wsiS_burstKind$D_IN;
  wire pmemMon0_wsiS_burstKind$EN;

  // register pmemMon0_wsiS_errorSticky
  reg pmemMon0_wsiS_errorSticky;
  wire pmemMon0_wsiS_errorSticky$D_IN, pmemMon0_wsiS_errorSticky$EN;

  // register pmemMon0_wsiS_iMesgCount
  reg [31 : 0] pmemMon0_wsiS_iMesgCount;
  wire [31 : 0] pmemMon0_wsiS_iMesgCount$D_IN;
  wire pmemMon0_wsiS_iMesgCount$EN;

  // register pmemMon0_wsiS_mesgWordLength
  reg [11 : 0] pmemMon0_wsiS_mesgWordLength;
  wire [11 : 0] pmemMon0_wsiS_mesgWordLength$D_IN;
  wire pmemMon0_wsiS_mesgWordLength$EN;

  // register pmemMon0_wsiS_operateD
  reg pmemMon0_wsiS_operateD;
  wire pmemMon0_wsiS_operateD$D_IN, pmemMon0_wsiS_operateD$EN;

  // register pmemMon0_wsiS_pMesgCount
  reg [31 : 0] pmemMon0_wsiS_pMesgCount;
  wire [31 : 0] pmemMon0_wsiS_pMesgCount$D_IN;
  wire pmemMon0_wsiS_pMesgCount$EN;

  // register pmemMon0_wsiS_peerIsReady
  reg pmemMon0_wsiS_peerIsReady;
  wire pmemMon0_wsiS_peerIsReady$D_IN, pmemMon0_wsiS_peerIsReady$EN;

  // register pmemMon0_wsiS_reqFifo_countReg
  reg [1 : 0] pmemMon0_wsiS_reqFifo_countReg;
  wire [1 : 0] pmemMon0_wsiS_reqFifo_countReg$D_IN;
  wire pmemMon0_wsiS_reqFifo_countReg$EN;

  // register pmemMon0_wsiS_reqFifo_levelsValid
  reg pmemMon0_wsiS_reqFifo_levelsValid;
  wire pmemMon0_wsiS_reqFifo_levelsValid$D_IN,
       pmemMon0_wsiS_reqFifo_levelsValid$EN;

  // register pmemMon0_wsiS_statusR
  reg [7 : 0] pmemMon0_wsiS_statusR;
  wire [7 : 0] pmemMon0_wsiS_statusR$D_IN;
  wire pmemMon0_wsiS_statusR$EN;

  // register pmemMon0_wsiS_tBusyCount
  reg [31 : 0] pmemMon0_wsiS_tBusyCount;
  wire [31 : 0] pmemMon0_wsiS_tBusyCount$D_IN;
  wire pmemMon0_wsiS_tBusyCount$EN;

  // register pmemMon0_wsiS_trafficSticky
  reg pmemMon0_wsiS_trafficSticky;
  wire pmemMon0_wsiS_trafficSticky$D_IN, pmemMon0_wsiS_trafficSticky$EN;

  // register pmemMon0_wsiS_wordCount
  reg [11 : 0] pmemMon0_wsiS_wordCount;
  wire [11 : 0] pmemMon0_wsiS_wordCount$D_IN;
  wire pmemMon0_wsiS_wordCount$EN;

  // register pmemMon1_eventCount
  reg [31 : 0] pmemMon1_eventCount;
  wire [31 : 0] pmemMon1_eventCount$D_IN;
  wire pmemMon1_eventCount$EN;

  // register pmemMon1_msgActive
  reg pmemMon1_msgActive;
  wire pmemMon1_msgActive$D_IN, pmemMon1_msgActive$EN;

  // register pmemMon1_pmBody
  reg pmemMon1_pmBody;
  wire pmemMon1_pmBody$D_IN, pmemMon1_pmBody$EN;

  // register pmemMon1_pmGrab
  reg pmemMon1_pmGrab;
  wire pmemMon1_pmGrab$D_IN, pmemMon1_pmGrab$EN;

  // register pmemMon1_pmHead
  reg pmemMon1_pmHead;
  wire pmemMon1_pmHead$D_IN, pmemMon1_pmHead$EN;

  // register pmemMon1_pmh
  reg [31 : 0] pmemMon1_pmh;
  wire [31 : 0] pmemMon1_pmh$D_IN;
  wire pmemMon1_pmh$EN;

  // register pmemMon1_wsiS_burstKind
  reg [1 : 0] pmemMon1_wsiS_burstKind;
  wire [1 : 0] pmemMon1_wsiS_burstKind$D_IN;
  wire pmemMon1_wsiS_burstKind$EN;

  // register pmemMon1_wsiS_errorSticky
  reg pmemMon1_wsiS_errorSticky;
  wire pmemMon1_wsiS_errorSticky$D_IN, pmemMon1_wsiS_errorSticky$EN;

  // register pmemMon1_wsiS_iMesgCount
  reg [31 : 0] pmemMon1_wsiS_iMesgCount;
  wire [31 : 0] pmemMon1_wsiS_iMesgCount$D_IN;
  wire pmemMon1_wsiS_iMesgCount$EN;

  // register pmemMon1_wsiS_mesgWordLength
  reg [11 : 0] pmemMon1_wsiS_mesgWordLength;
  wire [11 : 0] pmemMon1_wsiS_mesgWordLength$D_IN;
  wire pmemMon1_wsiS_mesgWordLength$EN;

  // register pmemMon1_wsiS_operateD
  reg pmemMon1_wsiS_operateD;
  wire pmemMon1_wsiS_operateD$D_IN, pmemMon1_wsiS_operateD$EN;

  // register pmemMon1_wsiS_pMesgCount
  reg [31 : 0] pmemMon1_wsiS_pMesgCount;
  wire [31 : 0] pmemMon1_wsiS_pMesgCount$D_IN;
  wire pmemMon1_wsiS_pMesgCount$EN;

  // register pmemMon1_wsiS_peerIsReady
  reg pmemMon1_wsiS_peerIsReady;
  wire pmemMon1_wsiS_peerIsReady$D_IN, pmemMon1_wsiS_peerIsReady$EN;

  // register pmemMon1_wsiS_reqFifo_countReg
  reg [1 : 0] pmemMon1_wsiS_reqFifo_countReg;
  wire [1 : 0] pmemMon1_wsiS_reqFifo_countReg$D_IN;
  wire pmemMon1_wsiS_reqFifo_countReg$EN;

  // register pmemMon1_wsiS_reqFifo_levelsValid
  reg pmemMon1_wsiS_reqFifo_levelsValid;
  wire pmemMon1_wsiS_reqFifo_levelsValid$D_IN,
       pmemMon1_wsiS_reqFifo_levelsValid$EN;

  // register pmemMon1_wsiS_statusR
  reg [7 : 0] pmemMon1_wsiS_statusR;
  wire [7 : 0] pmemMon1_wsiS_statusR$D_IN;
  wire pmemMon1_wsiS_statusR$EN;

  // register pmemMon1_wsiS_tBusyCount
  reg [31 : 0] pmemMon1_wsiS_tBusyCount;
  wire [31 : 0] pmemMon1_wsiS_tBusyCount$D_IN;
  wire pmemMon1_wsiS_tBusyCount$EN;

  // register pmemMon1_wsiS_trafficSticky
  reg pmemMon1_wsiS_trafficSticky;
  wire pmemMon1_wsiS_trafficSticky$D_IN, pmemMon1_wsiS_trafficSticky$EN;

  // register pmemMon1_wsiS_wordCount
  reg [11 : 0] pmemMon1_wsiS_wordCount;
  wire [11 : 0] pmemMon1_wsiS_wordCount$D_IN;
  wire pmemMon1_wsiS_wordCount$EN;

  // register simCycle
  reg [15 : 0] simCycle;
  wire [15 : 0] simCycle$D_IN;
  wire simCycle$EN;

  // register srcDataOut
  reg [31 : 0] srcDataOut;
  wire [31 : 0] srcDataOut$D_IN;
  wire srcDataOut$EN;

  // register srcIndex
  reg [5 : 0] srcIndex;
  wire [5 : 0] srcIndex$D_IN;
  wire srcIndex$EN;

  // register srcMesgCount
  reg [15 : 0] srcMesgCount;
  wire [15 : 0] srcMesgCount$D_IN;
  wire srcMesgCount$EN;

  // register srcUnrollCnt
  reg [15 : 0] srcUnrollCnt;
  wire [15 : 0] srcUnrollCnt$D_IN;
  wire srcUnrollCnt$EN;

  // register testOperating
  reg testOperating;
  wire testOperating$D_IN, testOperating$EN;

  // register wciSeqFsm_start_reg
  reg wciSeqFsm_start_reg;
  wire wciSeqFsm_start_reg$D_IN, wciSeqFsm_start_reg$EN;

  // register wciSeqFsm_state_mkFSMstate
  reg [4 : 0] wciSeqFsm_state_mkFSMstate;
  reg [4 : 0] wciSeqFsm_state_mkFSMstate$D_IN;
  wire wciSeqFsm_state_mkFSMstate$EN;

  // register wciSeqFsm_state_standby
  reg wciSeqFsm_state_standby;
  wire wciSeqFsm_state_standby$D_IN, wciSeqFsm_state_standby$EN;

  // register wciSeqOnce_onceReady
  reg wciSeqOnce_onceReady;
  wire wciSeqOnce_onceReady$D_IN, wciSeqOnce_onceReady$EN;

  // register wci_busy
  reg wci_busy;
  wire wci_busy$D_IN, wci_busy$EN;

  // register wci_lastConfigAddr
  reg [32 : 0] wci_lastConfigAddr;
  wire [32 : 0] wci_lastConfigAddr$D_IN;
  wire wci_lastConfigAddr$EN;

  // register wci_lastConfigBE
  reg [4 : 0] wci_lastConfigBE;
  wire [4 : 0] wci_lastConfigBE$D_IN;
  wire wci_lastConfigBE$EN;

  // register wci_lastControlOp
  reg [3 : 0] wci_lastControlOp;
  wire [3 : 0] wci_lastControlOp$D_IN;
  wire wci_lastControlOp$EN;

  // register wci_lastOpWrite
  reg [1 : 0] wci_lastOpWrite;
  wire [1 : 0] wci_lastOpWrite$D_IN;
  wire wci_lastOpWrite$EN;

  // register wci_mFlagReg
  reg [1 : 0] wci_mFlagReg;
  wire [1 : 0] wci_mFlagReg$D_IN;
  wire wci_mFlagReg$EN;

  // register wci_reqERR
  reg [2 : 0] wci_reqERR;
  reg [2 : 0] wci_reqERR$D_IN;
  wire wci_reqERR$EN;

  // register wci_reqFAIL
  reg [2 : 0] wci_reqFAIL;
  reg [2 : 0] wci_reqFAIL$D_IN;
  wire wci_reqFAIL$EN;

  // register wci_reqF_c_r
  reg wci_reqF_c_r;
  wire wci_reqF_c_r$D_IN, wci_reqF_c_r$EN;

  // register wci_reqF_q_0
  reg [59 : 0] wci_reqF_q_0;
  reg [59 : 0] wci_reqF_q_0$D_IN;
  wire wci_reqF_q_0$EN;

  // register wci_reqPend
  reg [1 : 0] wci_reqPend;
  reg [1 : 0] wci_reqPend$D_IN;
  wire wci_reqPend$EN;

  // register wci_reqTO
  reg [2 : 0] wci_reqTO;
  reg [2 : 0] wci_reqTO$D_IN;
  wire wci_reqTO$EN;

  // register wci_respTimr
  reg [31 : 0] wci_respTimr;
  wire [31 : 0] wci_respTimr$D_IN;
  wire wci_respTimr$EN;

  // register wci_respTimrAct
  reg wci_respTimrAct;
  wire wci_respTimrAct$D_IN, wci_respTimrAct$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wci_sfCap
  reg wci_sfCap;
  wire wci_sfCap$D_IN, wci_sfCap$EN;

  // register wci_sfCapClear
  reg wci_sfCapClear;
  wire wci_sfCapClear$D_IN, wci_sfCapClear$EN;

  // register wci_sfCapSet
  reg wci_sfCapSet;
  wire wci_sfCapSet$D_IN, wci_sfCapSet$EN;

  // register wci_slvPresent
  reg wci_slvPresent;
  wire wci_slvPresent$D_IN, wci_slvPresent$EN;

  // register wci_wReset_n
  reg wci_wReset_n;
  wire wci_wReset_n$D_IN, wci_wReset_n$EN;

  // register wci_wStatus
  reg [31 : 0] wci_wStatus;
  wire [31 : 0] wci_wStatus$D_IN;
  wire wci_wStatus$EN;

  // register wci_wTimeout
  reg [4 : 0] wci_wTimeout;
  wire [4 : 0] wci_wTimeout$D_IN;
  wire wci_wTimeout$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiMon_observer_r_mBurstLength
  reg [11 : 0] wsiMon_observer_r_mBurstLength;
  wire [11 : 0] wsiMon_observer_r_mBurstLength$D_IN;
  wire wsiMon_observer_r_mBurstLength$EN;

  // register wsiMon_observer_r_mBurstPrecise
  reg wsiMon_observer_r_mBurstPrecise;
  wire wsiMon_observer_r_mBurstPrecise$D_IN,
       wsiMon_observer_r_mBurstPrecise$EN;

  // register wsiMon_observer_r_mByteEn
  reg [3 : 0] wsiMon_observer_r_mByteEn;
  wire [3 : 0] wsiMon_observer_r_mByteEn$D_IN;
  wire wsiMon_observer_r_mByteEn$EN;

  // register wsiMon_observer_r_mCmd
  reg [2 : 0] wsiMon_observer_r_mCmd;
  wire [2 : 0] wsiMon_observer_r_mCmd$D_IN;
  wire wsiMon_observer_r_mCmd$EN;

  // register wsiMon_observer_r_mCmdD
  reg [2 : 0] wsiMon_observer_r_mCmdD;
  wire [2 : 0] wsiMon_observer_r_mCmdD$D_IN;
  wire wsiMon_observer_r_mCmdD$EN;

  // register wsiMon_observer_r_mData
  reg [31 : 0] wsiMon_observer_r_mData;
  wire [31 : 0] wsiMon_observer_r_mData$D_IN;
  wire wsiMon_observer_r_mData$EN;

  // register wsiMon_observer_r_mReqInfo
  reg [7 : 0] wsiMon_observer_r_mReqInfo;
  wire [7 : 0] wsiMon_observer_r_mReqInfo$D_IN;
  wire wsiMon_observer_r_mReqInfo$EN;

  // register wsiMon_observer_r_mReqLast
  reg wsiMon_observer_r_mReqLast;
  wire wsiMon_observer_r_mReqLast$D_IN, wsiMon_observer_r_mReqLast$EN;

  // register wsiMon_observer_r_mReset_n
  reg wsiMon_observer_r_mReset_n;
  wire wsiMon_observer_r_mReset_n$D_IN, wsiMon_observer_r_mReset_n$EN;

  // register wsiMon_observer_r_mResetnD
  reg wsiMon_observer_r_mResetnD;
  wire wsiMon_observer_r_mResetnD$D_IN, wsiMon_observer_r_mResetnD$EN;

  // register wsiMon_observer_r_sReset_n
  reg wsiMon_observer_r_sReset_n;
  wire wsiMon_observer_r_sReset_n$D_IN, wsiMon_observer_r_sReset_n$EN;

  // register wsiMon_observer_r_sResetnD
  reg wsiMon_observer_r_sResetnD;
  wire wsiMon_observer_r_sResetnD$D_IN, wsiMon_observer_r_sResetnD$EN;

  // register wsiMon_observer_r_sThreadBusy
  reg wsiMon_observer_r_sThreadBusy;
  wire wsiMon_observer_r_sThreadBusy$D_IN, wsiMon_observer_r_sThreadBusy$EN;

  // register wsiMon_pmsender_idx
  reg [2 : 0] wsiMon_pmsender_idx;
  wire [2 : 0] wsiMon_pmsender_idx$D_IN;
  wire wsiMon_pmsender_idx$EN;

  // register wsiMon_pmsender_isHead
  reg wsiMon_pmsender_isHead;
  wire wsiMon_pmsender_isHead$D_IN, wsiMon_pmsender_isHead$EN;

  // register wsiMon_pmsender_srcTag
  reg [7 : 0] wsiMon_pmsender_srcTag;
  wire [7 : 0] wsiMon_pmsender_srcTag$D_IN;
  wire wsiMon_pmsender_srcTag$EN;

  // register wsiMon_pmsender_wsiM_burstKind
  reg [1 : 0] wsiMon_pmsender_wsiM_burstKind;
  wire [1 : 0] wsiMon_pmsender_wsiM_burstKind$D_IN;
  wire wsiMon_pmsender_wsiM_burstKind$EN;

  // register wsiMon_pmsender_wsiM_errorSticky
  reg wsiMon_pmsender_wsiM_errorSticky;
  wire wsiMon_pmsender_wsiM_errorSticky$D_IN,
       wsiMon_pmsender_wsiM_errorSticky$EN;

  // register wsiMon_pmsender_wsiM_iMesgCount
  reg [31 : 0] wsiMon_pmsender_wsiM_iMesgCount;
  wire [31 : 0] wsiMon_pmsender_wsiM_iMesgCount$D_IN;
  wire wsiMon_pmsender_wsiM_iMesgCount$EN;

  // register wsiMon_pmsender_wsiM_operateD
  reg wsiMon_pmsender_wsiM_operateD;
  wire wsiMon_pmsender_wsiM_operateD$D_IN, wsiMon_pmsender_wsiM_operateD$EN;

  // register wsiMon_pmsender_wsiM_pMesgCount
  reg [31 : 0] wsiMon_pmsender_wsiM_pMesgCount;
  wire [31 : 0] wsiMon_pmsender_wsiM_pMesgCount$D_IN;
  wire wsiMon_pmsender_wsiM_pMesgCount$EN;

  // register wsiMon_pmsender_wsiM_peerIsReady
  reg wsiMon_pmsender_wsiM_peerIsReady;
  wire wsiMon_pmsender_wsiM_peerIsReady$D_IN,
       wsiMon_pmsender_wsiM_peerIsReady$EN;

  // register wsiMon_pmsender_wsiM_reqFifo_c_r
  reg [1 : 0] wsiMon_pmsender_wsiM_reqFifo_c_r;
  wire [1 : 0] wsiMon_pmsender_wsiM_reqFifo_c_r$D_IN;
  wire wsiMon_pmsender_wsiM_reqFifo_c_r$EN;

  // register wsiMon_pmsender_wsiM_reqFifo_q_0
  reg [60 : 0] wsiMon_pmsender_wsiM_reqFifo_q_0;
  reg [60 : 0] wsiMon_pmsender_wsiM_reqFifo_q_0$D_IN;
  wire wsiMon_pmsender_wsiM_reqFifo_q_0$EN;

  // register wsiMon_pmsender_wsiM_reqFifo_q_1
  reg [60 : 0] wsiMon_pmsender_wsiM_reqFifo_q_1;
  reg [60 : 0] wsiMon_pmsender_wsiM_reqFifo_q_1$D_IN;
  wire wsiMon_pmsender_wsiM_reqFifo_q_1$EN;

  // register wsiMon_pmsender_wsiM_sThreadBusy_d
  reg wsiMon_pmsender_wsiM_sThreadBusy_d;
  wire wsiMon_pmsender_wsiM_sThreadBusy_d$D_IN,
       wsiMon_pmsender_wsiM_sThreadBusy_d$EN;

  // register wsiMon_pmsender_wsiM_statusR
  reg [7 : 0] wsiMon_pmsender_wsiM_statusR;
  wire [7 : 0] wsiMon_pmsender_wsiM_statusR$D_IN;
  wire wsiMon_pmsender_wsiM_statusR$EN;

  // register wsiMon_pmsender_wsiM_tBusyCount
  reg [31 : 0] wsiMon_pmsender_wsiM_tBusyCount;
  wire [31 : 0] wsiMon_pmsender_wsiM_tBusyCount$D_IN;
  wire wsiMon_pmsender_wsiM_tBusyCount$EN;

  // register wsiMon_pmsender_wsiM_trafficSticky
  reg wsiMon_pmsender_wsiM_trafficSticky;
  wire wsiMon_pmsender_wsiM_trafficSticky$D_IN,
       wsiMon_pmsender_wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule biasWorker_wci_isReset
  wire biasWorker_wci_isReset$VAL;

  // ports of submodule biasWorker_wci_reqF
  wire [59 : 0] biasWorker_wci_reqF$D_IN, biasWorker_wci_reqF$D_OUT;
  wire biasWorker_wci_reqF$CLR,
       biasWorker_wci_reqF$DEQ,
       biasWorker_wci_reqF$EMPTY_N,
       biasWorker_wci_reqF$ENQ;

  // ports of submodule biasWorker_wsiM_isReset
  wire biasWorker_wsiM_isReset$VAL;

  // ports of submodule biasWorker_wsiS_isReset
  wire biasWorker_wsiS_isReset$VAL;

  // ports of submodule biasWorker_wsiS_reqFifo
  wire [60 : 0] biasWorker_wsiS_reqFifo$D_IN, biasWorker_wsiS_reqFifo$D_OUT;
  wire biasWorker_wsiS_reqFifo$CLR,
       biasWorker_wsiS_reqFifo$DEQ,
       biasWorker_wsiS_reqFifo$EMPTY_N,
       biasWorker_wsiS_reqFifo$ENQ,
       biasWorker_wsiS_reqFifo$FULL_N;

  // ports of submodule isMReset
  wire isMReset$VAL;

  // ports of submodule pmemMon0_pmemF
  wire [33 : 0] pmemMon0_pmemF$D_IN, pmemMon0_pmemF$D_OUT;
  wire pmemMon0_pmemF$CLR,
       pmemMon0_pmemF$DEQ,
       pmemMon0_pmemF$EMPTY_N,
       pmemMon0_pmemF$ENQ,
       pmemMon0_pmemF$FULL_N;

  // ports of submodule pmemMon0_wsiS_isReset
  wire pmemMon0_wsiS_isReset$VAL;

  // ports of submodule pmemMon0_wsiS_reqFifo
  wire [60 : 0] pmemMon0_wsiS_reqFifo$D_IN, pmemMon0_wsiS_reqFifo$D_OUT;
  wire pmemMon0_wsiS_reqFifo$CLR,
       pmemMon0_wsiS_reqFifo$DEQ,
       pmemMon0_wsiS_reqFifo$EMPTY_N,
       pmemMon0_wsiS_reqFifo$ENQ,
       pmemMon0_wsiS_reqFifo$FULL_N;

  // ports of submodule pmemMon1_pmemF
  wire [33 : 0] pmemMon1_pmemF$D_IN, pmemMon1_pmemF$D_OUT;
  wire pmemMon1_pmemF$CLR,
       pmemMon1_pmemF$DEQ,
       pmemMon1_pmemF$EMPTY_N,
       pmemMon1_pmemF$ENQ,
       pmemMon1_pmemF$FULL_N;

  // ports of submodule pmemMon1_wsiS_isReset
  wire pmemMon1_wsiS_isReset$VAL;

  // ports of submodule pmemMon1_wsiS_reqFifo
  wire [60 : 0] pmemMon1_wsiS_reqFifo$D_IN, pmemMon1_wsiS_reqFifo$D_OUT;
  wire pmemMon1_wsiS_reqFifo$CLR,
       pmemMon1_wsiS_reqFifo$DEQ,
       pmemMon1_wsiS_reqFifo$EMPTY_N,
       pmemMon1_wsiS_reqFifo$ENQ,
       pmemMon1_wsiS_reqFifo$FULL_N;

  // ports of submodule wciMon
  wire [31 : 0] wciMon$observe_MData, wciMon$observe_SData, wciMon$pmem_MData;
  wire [19 : 0] wciMon$observe_MAddr;
  wire [11 : 0] wciMon$pmem_MBurstLength;
  wire [7 : 0] wciMon$pmem_MReqInfo;
  wire [3 : 0] wciMon$observe_MByteEn, wciMon$pmem_MByteEn;
  wire [2 : 0] wciMon$observe_MCmd, wciMon$pmem_MCmd;
  wire [1 : 0] wciMon$observe_MFlag,
	       wciMon$observe_SFlag,
	       wciMon$observe_SResp;
  wire wciMon$observe_MAddrSpace,
       wciMon$observe_MReset_n,
       wciMon$observe_SThreadBusy,
       wciMon$pmem_MBurstPrecise,
       wciMon$pmem_MReqLast,
       wciMon$pmem_MReset_n,
       wciMon$pmem_SReset_n,
       wciMon$pmem_SThreadBusy;

  // ports of submodule wci_mReset
  wire wci_mReset$ASSERT_IN, wci_mReset$OUT_RST_N;

  // ports of submodule wci_respF
  reg [33 : 0] wci_respF$D_IN;
  wire wci_respF$CLR,
       wci_respF$DEQ,
       wci_respF$EMPTY_N,
       wci_respF$ENQ,
       wci_respF$FULL_N;

  // ports of submodule wsiM_isReset
  wire wsiM_isReset$VAL;

  // ports of submodule wsiMon_observer_evF
  wire [98 : 0] wsiMon_observer_evF$D_IN, wsiMon_observer_evF$D_OUT;
  wire wsiMon_observer_evF$CLR,
       wsiMon_observer_evF$DEQ,
       wsiMon_observer_evF$EMPTY_N,
       wsiMon_observer_evF$ENQ,
       wsiMon_observer_evF$FULL_N;

  // ports of submodule wsiMon_pmsender_evF
  wire [98 : 0] wsiMon_pmsender_evF$D_IN, wsiMon_pmsender_evF$D_OUT;
  wire wsiMon_pmsender_evF$CLR,
       wsiMon_pmsender_evF$DEQ,
       wsiMon_pmsender_evF$EMPTY_N,
       wsiMon_pmsender_evF$ENQ,
       wsiMon_pmsender_evF$FULL_N;

  // ports of submodule wsiMon_pmsender_wsiM_isReset
  wire wsiMon_pmsender_wsiM_isReset$VAL;

  // ports of submodule wsiS_isReset
  wire wsiS_isReset$VAL;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_biasWorker_doMessagePush,
       CAN_FIRE_RL_biasWorker_operating_actions,
       CAN_FIRE_RL_biasWorker_wci_Es_doAlways_Req,
       CAN_FIRE_RL_biasWorker_wci_cfrd,
       CAN_FIRE_RL_biasWorker_wci_cfwr,
       CAN_FIRE_RL_biasWorker_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_biasWorker_wci_ctl_op_complete,
       CAN_FIRE_RL_biasWorker_wci_ctl_op_start,
       CAN_FIRE_RL_biasWorker_wci_ctrl_EiI,
       CAN_FIRE_RL_biasWorker_wci_ctrl_IsO,
       CAN_FIRE_RL_biasWorker_wci_ctrl_OrE,
       CAN_FIRE_RL_biasWorker_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_biasWorker_wci_reqF_enq,
       CAN_FIRE_RL_biasWorker_wci_request_decode,
       CAN_FIRE_RL_biasWorker_wci_respF_both,
       CAN_FIRE_RL_biasWorker_wci_respF_decCtr,
       CAN_FIRE_RL_biasWorker_wci_respF_deq,
       CAN_FIRE_RL_biasWorker_wci_respF_incCtr,
       CAN_FIRE_RL_biasWorker_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_biasWorker_wci_sThreadBusy_reg,
       CAN_FIRE_RL_biasWorker_wsiM_ext_status_assign,
       CAN_FIRE_RL_biasWorker_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_biasWorker_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_biasWorker_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_biasWorker_wsiM_reqFifo_both,
       CAN_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_biasWorker_wsiM_reqFifo_deq,
       CAN_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_biasWorker_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_biasWorker_wsiM_update_statusR,
       CAN_FIRE_RL_biasWorker_wsiS_backpressure,
       CAN_FIRE_RL_biasWorker_wsiS_ext_status_assign,
       CAN_FIRE_RL_biasWorker_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_biasWorker_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_biasWorker_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_biasWorker_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_biasWorker_wsiS_reqFifo_enq,
       CAN_FIRE_RL_biasWorker_wsiS_reqFifo_reset,
       CAN_FIRE_RL_biasWorker_wsiS_update_statusR,
       CAN_FIRE_RL_biasWorker_wsi_Es_doAlways,
       CAN_FIRE_RL_increment_simCycle,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mAddrSConnect,
       CAN_FIRE_RL_mBEConnect,
       CAN_FIRE_RL_mBEConnect_1,
       CAN_FIRE_RL_mBLenConnect,
       CAN_FIRE_RL_mBrstPConnect,
       CAN_FIRE_RL_mBurstLConnect,
       CAN_FIRE_RL_mBurstLConnect_1,
       CAN_FIRE_RL_mBurstLConnect_2,
       CAN_FIRE_RL_mBurstPConnect,
       CAN_FIRE_RL_mBurstPConnect_1,
       CAN_FIRE_RL_mBurstPConnect_2,
       CAN_FIRE_RL_mByteEnConnect,
       CAN_FIRE_RL_mByteEnConnect_1,
       CAN_FIRE_RL_mByteEnConnect_2,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mCmdConnect_2,
       CAN_FIRE_RL_mCmdConnect_3,
       CAN_FIRE_RL_mCmdConnect_4,
       CAN_FIRE_RL_mDatIConnect,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mDataConnect_2,
       CAN_FIRE_RL_mDataConnect_3,
       CAN_FIRE_RL_mDataConnect_4,
       CAN_FIRE_RL_mDataIConnect,
       CAN_FIRE_RL_mDataIConnect_1,
       CAN_FIRE_RL_mDataIConnect_2,
       CAN_FIRE_RL_mFlagConnect,
       CAN_FIRE_RL_mReqIConnect,
       CAN_FIRE_RL_mReqIConnect_1,
       CAN_FIRE_RL_mReqIConnect_2,
       CAN_FIRE_RL_mReqIConnect_3,
       CAN_FIRE_RL_mReqLConnect,
       CAN_FIRE_RL_mReqLConnect_1,
       CAN_FIRE_RL_mReqLConnect_2,
       CAN_FIRE_RL_mReqLConnect_3,
       CAN_FIRE_RL_mResetConnect,
       CAN_FIRE_RL_mResetConnect_1,
       CAN_FIRE_RL_mRstConnect,
       CAN_FIRE_RL_mRstConnect_1,
       CAN_FIRE_RL_mRstConnect_2,
       CAN_FIRE_RL_operating_actions,
       CAN_FIRE_RL_pmemMon0_chomp_wsi,
       CAN_FIRE_RL_pmemMon0_gen_message_body_dw,
       CAN_FIRE_RL_pmemMon0_get_message_head_dw,
       CAN_FIRE_RL_pmemMon0_operate,
       CAN_FIRE_RL_pmemMon0_pmBody__dreg_update,
       CAN_FIRE_RL_pmemMon0_pmHead__dreg_update,
       CAN_FIRE_RL_pmemMon0_wsiS_backpressure,
       CAN_FIRE_RL_pmemMon0_wsiS_ext_status_assign,
       CAN_FIRE_RL_pmemMon0_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_pmemMon0_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_pmemMon0_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_pmemMon0_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_pmemMon0_wsiS_reqFifo_enq,
       CAN_FIRE_RL_pmemMon0_wsiS_reqFifo_reset,
       CAN_FIRE_RL_pmemMon0_wsiS_update_statusR,
       CAN_FIRE_RL_pmemMon0_wsi_Es_doAlways,
       CAN_FIRE_RL_pmemMon1_chomp_wsi,
       CAN_FIRE_RL_pmemMon1_gen_message_body_dw,
       CAN_FIRE_RL_pmemMon1_get_message_head_dw,
       CAN_FIRE_RL_pmemMon1_operate,
       CAN_FIRE_RL_pmemMon1_pmBody__dreg_update,
       CAN_FIRE_RL_pmemMon1_pmHead__dreg_update,
       CAN_FIRE_RL_pmemMon1_wsiS_backpressure,
       CAN_FIRE_RL_pmemMon1_wsiS_ext_status_assign,
       CAN_FIRE_RL_pmemMon1_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_pmemMon1_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_pmemMon1_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_pmemMon1_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_pmemMon1_wsiS_reqFifo_enq,
       CAN_FIRE_RL_pmemMon1_wsiS_reqFifo_reset,
       CAN_FIRE_RL_pmemMon1_wsiS_update_statusR,
       CAN_FIRE_RL_pmemMon1_wsi_Es_doAlways,
       CAN_FIRE_RL_runWciSeq,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sResetConnect,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRstConnect,
       CAN_FIRE_RL_sRstConnect_1,
       CAN_FIRE_RL_sRstConnect_2,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_RL_stbConnect_4,
       CAN_FIRE_RL_terminate,
       CAN_FIRE_RL_wciSeqFsm_action_l55c3,
       CAN_FIRE_RL_wciSeqFsm_action_l56c5,
       CAN_FIRE_RL_wciSeqFsm_action_l57c10,
       CAN_FIRE_RL_wciSeqFsm_action_l59c5,
       CAN_FIRE_RL_wciSeqFsm_action_l60c8,
       CAN_FIRE_RL_wciSeqFsm_action_l61c5,
       CAN_FIRE_RL_wciSeqFsm_action_l63c5,
       CAN_FIRE_RL_wciSeqFsm_action_l64c8,
       CAN_FIRE_RL_wciSeqFsm_action_l65c5,
       CAN_FIRE_RL_wciSeqFsm_action_l67c5,
       CAN_FIRE_RL_wciSeqFsm_action_l68c8,
       CAN_FIRE_RL_wciSeqFsm_action_l69c5,
       CAN_FIRE_RL_wciSeqFsm_action_l71c5,
       CAN_FIRE_RL_wciSeqFsm_action_l72c8,
       CAN_FIRE_RL_wciSeqFsm_action_l73c5,
       CAN_FIRE_RL_wciSeqFsm_action_l75c5,
       CAN_FIRE_RL_wciSeqFsm_action_l76c8,
       CAN_FIRE_RL_wciSeqFsm_action_l77c5,
       CAN_FIRE_RL_wciSeqFsm_action_l79c19,
       CAN_FIRE_RL_wciSeqFsm_action_l80c19,
       CAN_FIRE_RL_wciSeqFsm_action_l81c19,
       CAN_FIRE_RL_wciSeqFsm_action_l83c19,
       CAN_FIRE_RL_wciSeqFsm_action_l84c19,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_1,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_10,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_11,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_12,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_13,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_14,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_15,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_16,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_17,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_18,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_19,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_2,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_20,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_21,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_22,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_3,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_4,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_6,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_7,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_9,
       CAN_FIRE_RL_wciSeqFsm_actionof_l56c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l57c10,
       CAN_FIRE_RL_wciSeqFsm_actionof_l59c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l60c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l61c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l63c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l64c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l65c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l67c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l68c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l69c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l71c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l72c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l73c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l75c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l76c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l77c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l79c19,
       CAN_FIRE_RL_wciSeqFsm_actionof_l80c19,
       CAN_FIRE_RL_wciSeqFsm_actionof_l81c19,
       CAN_FIRE_RL_wciSeqFsm_actionof_l83c19,
       CAN_FIRE_RL_wciSeqFsm_actionof_l84c19,
       CAN_FIRE_RL_wciSeqFsm_fsm_start,
       CAN_FIRE_RL_wciSeqFsm_start_reg__dreg_update,
       CAN_FIRE_RL_wciSeqFsm_state_update_standby,
       CAN_FIRE_RL_wci_Em_doAlways,
       CAN_FIRE_RL_wci_reqF_both,
       CAN_FIRE_RL_wci_reqF_decCtr,
       CAN_FIRE_RL_wci_reqF_deq,
       CAN_FIRE_RL_wci_reqF_incCtr,
       CAN_FIRE_RL_wci_sThreadBusy_reg,
       CAN_FIRE_RL_wci_sfCapClear__dreg_update,
       CAN_FIRE_RL_wci_sfCapSet__dreg_update,
       CAN_FIRE_RL_wci_sflagUpdate,
       CAN_FIRE_RL_wci_startTimer,
       CAN_FIRE_RL_wci_updateStatus,
       CAN_FIRE_RL_wci_workerReset,
       CAN_FIRE_RL_wci_wrkBusy,
       CAN_FIRE_RL_wsiM_ext_status_assign,
       CAN_FIRE_RL_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiM_reqFifo_both,
       CAN_FIRE_RL_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_wsiM_reqFifo_deq,
       CAN_FIRE_RL_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_wsiM_update_statusR,
       CAN_FIRE_RL_wsiMon_mkConnectionAVtoAf,
       CAN_FIRE_RL_wsiMon_observer_doAlways,
       CAN_FIRE_RL_wsiMon_observer_r_mBurstPrecise__dreg_update,
       CAN_FIRE_RL_wsiMon_observer_r_mReqLast__dreg_update,
       CAN_FIRE_RL_wsiMon_observer_r_mReset_n__dreg_update,
       CAN_FIRE_RL_wsiMon_observer_r_sReset_n__dreg_update,
       CAN_FIRE_RL_wsiMon_observer_r_sThreadBusy__dreg_update,
       CAN_FIRE_RL_wsiMon_observer_request_detected,
       CAN_FIRE_RL_wsiMon_pmsender_operate,
       CAN_FIRE_RL_wsiMon_pmsender_serialize_message,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_ext_status_assign,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_wsiMon_pmsender_wsiM_update_statusR,
       CAN_FIRE_RL_wsiS_backpressure,
       CAN_FIRE_RL_wsiS_ext_status_assign,
       CAN_FIRE_RL_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_wsiS_reqFifo_enq,
       CAN_FIRE_RL_wsiS_reqFifo_reset,
       CAN_FIRE_RL_wsiS_update_statusR,
       CAN_FIRE_RL_wsi_Es_doAlways,
       CAN_FIRE_RL_wsi_checker,
       CAN_FIRE_RL_wsi_source,
       WILL_FIRE_RL_biasWorker_doMessagePush,
       WILL_FIRE_RL_biasWorker_operating_actions,
       WILL_FIRE_RL_biasWorker_wci_Es_doAlways_Req,
       WILL_FIRE_RL_biasWorker_wci_cfrd,
       WILL_FIRE_RL_biasWorker_wci_cfwr,
       WILL_FIRE_RL_biasWorker_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_biasWorker_wci_ctl_op_complete,
       WILL_FIRE_RL_biasWorker_wci_ctl_op_start,
       WILL_FIRE_RL_biasWorker_wci_ctrl_EiI,
       WILL_FIRE_RL_biasWorker_wci_ctrl_IsO,
       WILL_FIRE_RL_biasWorker_wci_ctrl_OrE,
       WILL_FIRE_RL_biasWorker_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_biasWorker_wci_reqF_enq,
       WILL_FIRE_RL_biasWorker_wci_request_decode,
       WILL_FIRE_RL_biasWorker_wci_respF_both,
       WILL_FIRE_RL_biasWorker_wci_respF_decCtr,
       WILL_FIRE_RL_biasWorker_wci_respF_deq,
       WILL_FIRE_RL_biasWorker_wci_respF_incCtr,
       WILL_FIRE_RL_biasWorker_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_biasWorker_wci_sThreadBusy_reg,
       WILL_FIRE_RL_biasWorker_wsiM_ext_status_assign,
       WILL_FIRE_RL_biasWorker_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_biasWorker_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_biasWorker_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq,
       WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_biasWorker_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_biasWorker_wsiM_update_statusR,
       WILL_FIRE_RL_biasWorker_wsiS_backpressure,
       WILL_FIRE_RL_biasWorker_wsiS_ext_status_assign,
       WILL_FIRE_RL_biasWorker_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_biasWorker_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_biasWorker_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_biasWorker_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq,
       WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset,
       WILL_FIRE_RL_biasWorker_wsiS_update_statusR,
       WILL_FIRE_RL_biasWorker_wsi_Es_doAlways,
       WILL_FIRE_RL_increment_simCycle,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mAddrSConnect,
       WILL_FIRE_RL_mBEConnect,
       WILL_FIRE_RL_mBEConnect_1,
       WILL_FIRE_RL_mBLenConnect,
       WILL_FIRE_RL_mBrstPConnect,
       WILL_FIRE_RL_mBurstLConnect,
       WILL_FIRE_RL_mBurstLConnect_1,
       WILL_FIRE_RL_mBurstLConnect_2,
       WILL_FIRE_RL_mBurstPConnect,
       WILL_FIRE_RL_mBurstPConnect_1,
       WILL_FIRE_RL_mBurstPConnect_2,
       WILL_FIRE_RL_mByteEnConnect,
       WILL_FIRE_RL_mByteEnConnect_1,
       WILL_FIRE_RL_mByteEnConnect_2,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mCmdConnect_2,
       WILL_FIRE_RL_mCmdConnect_3,
       WILL_FIRE_RL_mCmdConnect_4,
       WILL_FIRE_RL_mDatIConnect,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mDataConnect_2,
       WILL_FIRE_RL_mDataConnect_3,
       WILL_FIRE_RL_mDataConnect_4,
       WILL_FIRE_RL_mDataIConnect,
       WILL_FIRE_RL_mDataIConnect_1,
       WILL_FIRE_RL_mDataIConnect_2,
       WILL_FIRE_RL_mFlagConnect,
       WILL_FIRE_RL_mReqIConnect,
       WILL_FIRE_RL_mReqIConnect_1,
       WILL_FIRE_RL_mReqIConnect_2,
       WILL_FIRE_RL_mReqIConnect_3,
       WILL_FIRE_RL_mReqLConnect,
       WILL_FIRE_RL_mReqLConnect_1,
       WILL_FIRE_RL_mReqLConnect_2,
       WILL_FIRE_RL_mReqLConnect_3,
       WILL_FIRE_RL_mResetConnect,
       WILL_FIRE_RL_mResetConnect_1,
       WILL_FIRE_RL_mRstConnect,
       WILL_FIRE_RL_mRstConnect_1,
       WILL_FIRE_RL_mRstConnect_2,
       WILL_FIRE_RL_operating_actions,
       WILL_FIRE_RL_pmemMon0_chomp_wsi,
       WILL_FIRE_RL_pmemMon0_gen_message_body_dw,
       WILL_FIRE_RL_pmemMon0_get_message_head_dw,
       WILL_FIRE_RL_pmemMon0_operate,
       WILL_FIRE_RL_pmemMon0_pmBody__dreg_update,
       WILL_FIRE_RL_pmemMon0_pmHead__dreg_update,
       WILL_FIRE_RL_pmemMon0_wsiS_backpressure,
       WILL_FIRE_RL_pmemMon0_wsiS_ext_status_assign,
       WILL_FIRE_RL_pmemMon0_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_pmemMon0_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_pmemMon0_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_pmemMon0_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq,
       WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_reset,
       WILL_FIRE_RL_pmemMon0_wsiS_update_statusR,
       WILL_FIRE_RL_pmemMon0_wsi_Es_doAlways,
       WILL_FIRE_RL_pmemMon1_chomp_wsi,
       WILL_FIRE_RL_pmemMon1_gen_message_body_dw,
       WILL_FIRE_RL_pmemMon1_get_message_head_dw,
       WILL_FIRE_RL_pmemMon1_operate,
       WILL_FIRE_RL_pmemMon1_pmBody__dreg_update,
       WILL_FIRE_RL_pmemMon1_pmHead__dreg_update,
       WILL_FIRE_RL_pmemMon1_wsiS_backpressure,
       WILL_FIRE_RL_pmemMon1_wsiS_ext_status_assign,
       WILL_FIRE_RL_pmemMon1_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_pmemMon1_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_pmemMon1_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_pmemMon1_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq,
       WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_reset,
       WILL_FIRE_RL_pmemMon1_wsiS_update_statusR,
       WILL_FIRE_RL_pmemMon1_wsi_Es_doAlways,
       WILL_FIRE_RL_runWciSeq,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sResetConnect,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRstConnect,
       WILL_FIRE_RL_sRstConnect_1,
       WILL_FIRE_RL_sRstConnect_2,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_RL_stbConnect_4,
       WILL_FIRE_RL_terminate,
       WILL_FIRE_RL_wciSeqFsm_action_l55c3,
       WILL_FIRE_RL_wciSeqFsm_action_l56c5,
       WILL_FIRE_RL_wciSeqFsm_action_l57c10,
       WILL_FIRE_RL_wciSeqFsm_action_l59c5,
       WILL_FIRE_RL_wciSeqFsm_action_l60c8,
       WILL_FIRE_RL_wciSeqFsm_action_l61c5,
       WILL_FIRE_RL_wciSeqFsm_action_l63c5,
       WILL_FIRE_RL_wciSeqFsm_action_l64c8,
       WILL_FIRE_RL_wciSeqFsm_action_l65c5,
       WILL_FIRE_RL_wciSeqFsm_action_l67c5,
       WILL_FIRE_RL_wciSeqFsm_action_l68c8,
       WILL_FIRE_RL_wciSeqFsm_action_l69c5,
       WILL_FIRE_RL_wciSeqFsm_action_l71c5,
       WILL_FIRE_RL_wciSeqFsm_action_l72c8,
       WILL_FIRE_RL_wciSeqFsm_action_l73c5,
       WILL_FIRE_RL_wciSeqFsm_action_l75c5,
       WILL_FIRE_RL_wciSeqFsm_action_l76c8,
       WILL_FIRE_RL_wciSeqFsm_action_l77c5,
       WILL_FIRE_RL_wciSeqFsm_action_l79c19,
       WILL_FIRE_RL_wciSeqFsm_action_l80c19,
       WILL_FIRE_RL_wciSeqFsm_action_l81c19,
       WILL_FIRE_RL_wciSeqFsm_action_l83c19,
       WILL_FIRE_RL_wciSeqFsm_action_l84c19,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_1,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_10,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_11,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_12,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_13,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_14,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_15,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_16,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_17,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_18,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_19,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_2,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_20,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_21,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_22,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_3,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_4,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_6,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_7,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_9,
       WILL_FIRE_RL_wciSeqFsm_actionof_l56c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l57c10,
       WILL_FIRE_RL_wciSeqFsm_actionof_l59c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l60c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l61c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l63c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l64c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l65c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l67c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l68c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l69c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l71c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l72c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l73c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l75c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l76c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l77c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l79c19,
       WILL_FIRE_RL_wciSeqFsm_actionof_l80c19,
       WILL_FIRE_RL_wciSeqFsm_actionof_l81c19,
       WILL_FIRE_RL_wciSeqFsm_actionof_l83c19,
       WILL_FIRE_RL_wciSeqFsm_actionof_l84c19,
       WILL_FIRE_RL_wciSeqFsm_fsm_start,
       WILL_FIRE_RL_wciSeqFsm_start_reg__dreg_update,
       WILL_FIRE_RL_wciSeqFsm_state_update_standby,
       WILL_FIRE_RL_wci_Em_doAlways,
       WILL_FIRE_RL_wci_reqF_both,
       WILL_FIRE_RL_wci_reqF_decCtr,
       WILL_FIRE_RL_wci_reqF_deq,
       WILL_FIRE_RL_wci_reqF_incCtr,
       WILL_FIRE_RL_wci_sThreadBusy_reg,
       WILL_FIRE_RL_wci_sfCapClear__dreg_update,
       WILL_FIRE_RL_wci_sfCapSet__dreg_update,
       WILL_FIRE_RL_wci_sflagUpdate,
       WILL_FIRE_RL_wci_startTimer,
       WILL_FIRE_RL_wci_updateStatus,
       WILL_FIRE_RL_wci_workerReset,
       WILL_FIRE_RL_wci_wrkBusy,
       WILL_FIRE_RL_wsiM_ext_status_assign,
       WILL_FIRE_RL_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_wsiM_update_statusR,
       WILL_FIRE_RL_wsiMon_mkConnectionAVtoAf,
       WILL_FIRE_RL_wsiMon_observer_doAlways,
       WILL_FIRE_RL_wsiMon_observer_r_mBurstPrecise__dreg_update,
       WILL_FIRE_RL_wsiMon_observer_r_mReqLast__dreg_update,
       WILL_FIRE_RL_wsiMon_observer_r_mReset_n__dreg_update,
       WILL_FIRE_RL_wsiMon_observer_r_sReset_n__dreg_update,
       WILL_FIRE_RL_wsiMon_observer_r_sThreadBusy__dreg_update,
       WILL_FIRE_RL_wsiMon_observer_request_detected,
       WILL_FIRE_RL_wsiMon_pmsender_operate,
       WILL_FIRE_RL_wsiMon_pmsender_serialize_message,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_ext_status_assign,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_wsiMon_pmsender_wsiM_update_statusR,
       WILL_FIRE_RL_wsiS_backpressure,
       WILL_FIRE_RL_wsiS_ext_status_assign,
       WILL_FIRE_RL_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset,
       WILL_FIRE_RL_wsiS_update_statusR,
       WILL_FIRE_RL_wsi_Es_doAlways,
       WILL_FIRE_RL_wsi_checker,
       WILL_FIRE_RL_wsi_source;

  // inputs to muxes for submodule ports
  reg [59 : 0] MUX_wci_reqF_q_0$write_1__VAL_2;
  reg [33 : 0] MUX_biasWorker_wci_respF_q_0$write_1__VAL_1;
  wire [60 : 0] MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__VAL_2;
  wire [59 : 0] MUX_wci_reqF_q_0$write_1__VAL_1;
  wire [33 : 0] MUX_biasWorker_wci_respF_q_0$write_1__VAL_2,
		MUX_biasWorker_wci_respF_q_1$write_1__VAL_1,
		MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_1,
		MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_2,
		MUX_wci_respF$enq_1__VAL_2;
  wire [31 : 0] MUX_wci_respTimr$write_1__VAL_2;
  wire [15 : 0] MUX_dstUnrollCnt$write_1__VAL_2,
		MUX_srcUnrollCnt$write_1__VAL_2;
  wire [1 : 0] MUX_biasWorker_wci_respF_c_r$write_1__VAL_1,
	       MUX_biasWorker_wci_respF_c_r$write_1__VAL_2,
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_wsiMon_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiMon_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_biasWorker_biasValue$write_1__SEL_1,
       MUX_biasWorker_controlReg$write_1__SEL_1,
       MUX_biasWorker_wci_illegalEdge$write_1__SEL_1,
       MUX_biasWorker_wci_illegalEdge$write_1__SEL_2,
       MUX_biasWorker_wci_illegalEdge$write_1__VAL_2,
       MUX_biasWorker_wci_respF_q_0$write_1__SEL_1,
       MUX_biasWorker_wci_respF_q_1$write_1__SEL_2,
       MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3,
       MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3,
       MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3,
       MUX_wci_busy$write_1__PSEL_1,
       MUX_wci_busy$write_1__SEL_1,
       MUX_wci_busy$write_1__SEL_2,
       MUX_wci_lastConfigBE$write_1__SEL_1,
       MUX_wci_lastConfigBE$write_1__SEL_2,
       MUX_wci_lastControlOp$write_1__SEL_1,
       MUX_wci_lastControlOp$write_1__SEL_2,
       MUX_wci_reqF_c_r$write_1__VAL_1,
       MUX_wci_reqF_c_r$write_1__VAL_2,
       MUX_wci_reqF_q_0$write_1__SEL_2,
       MUX_wci_reqPend$write_1__PSEL_3,
       MUX_wci_reqPend$write_1__SEL_3,
       MUX_wci_reqPend$write_1__SEL_4,
       MUX_wci_respF$enq_1__SEL_1,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [95 : 0] CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_w_ETC__q14;
  reg [63 : 0] v__h13098,
	       v__h13272,
	       v__h13416,
	       v__h19285,
	       v__h19438,
	       v__h2686,
	       v__h27014,
	       v__h2776,
	       v__h28256,
	       v__h2865,
	       v__h3089,
	       v__h3179,
	       v__h3268,
	       v__h3497,
	       v__h3587,
	       v__h3676,
	       v__h41534,
	       v__h42773,
	       v__h77590,
	       v__h77913,
	       v__h78759,
	       v__h78987,
	       v__h79590,
	       v__h80372,
	       v__h81195,
	       v__h81450,
	       v__h83528,
	       v__h83771,
	       v__h83968,
	       v__h84075;
  reg [31 : 0] _theResult____h19422, x_data__h33855;
  reg [7 : 0] CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5,
	      CASE_pmemMon0_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q6,
	      CASE_pmemMon0_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q7,
	      CASE_pmemMon1_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q9,
	      CASE_pmemMon1_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q8,
	      CASE_wsiMon_observer_evFD_OUT_BITS_39_TO_32_2_ETC__q12,
	      CASE_wsiMon_observer_evFD_OUT_BITS_71_TO_64_2_ETC__q13,
	      CASE_wsiMon_observer_evFD_OUT_BITS_7_TO_0_255_ETC__q11,
	      IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535,
	      IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536,
	      x__h34711;
  reg [4 : 0] CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3,
	      CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1,
	      CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2,
	      CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO_96_C_ETC__q4;
  reg [2 : 0] CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_5_ETC__q10,
	      len__h33783;
  wire [31 : 0] _0x52_CONCAT_IF_IF_wsiMon_pmsender_evF_first__2_ETC___d1407,
		rdat__h19512,
		toCount__h2394,
		x__h2553,
		x_data__h19019,
		x_data__h83284;
  wire [26 : 0] IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137;
  wire [15 : 0] wsiBurstLength__h83603, x__h19515;
  wire [11 : 0] x_burstLength__h33854;
  wire NOT_wci_busy_5_146_AND_IF_wci_wReset_n_5_THEN__ETC___d2159,
       _dand1wci_busy$EN_write,
       _dand1wci_respF$EN_enq,
       _dor1pmemMon0_eventCount$EN_write,
       _dor1pmemMon1_eventCount$EN_write,
       _dor1wci_lastConfigAddr$EN_write,
       biasWorker_wsiS_reqFifo_notFull__69_AND_biasWo_ETC___d491,
       pmemMon0_wsiS_reqFifo_notFull__28_AND_pmemMon0_ETC___d750,
       pmemMon1_wsiS_reqFifo_notFull__616_AND_pmemMon_ETC___d1638,
       wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418,
       wsiMon_pmsender_idx_203_EQ_IF_wsiMon_pmsender__ETC___d2324,
       wsiS_reqFifo_notFull__49_AND_wsiS_burstKind_64_ETC___d271,
       z__h25553,
       z__h25560,
       z__h25567,
       z__h25574,
       z__h25581,
       z__h25588,
       z__h25595,
       z__h25602,
       z__h25609,
       z__h25616,
       z__h25623,
       z__h25630,
       z__h25637,
       z__h25644,
       z__h25651,
       z__h25658,
       z__h25665,
       z__h25672,
       z__h25679,
       z__h25686,
       z__h25693,
       z__h25700,
       z__h25707,
       z__h25714,
       z__h25721,
       z__h25728,
       z__h25735,
       z__h25742,
       z__h25749,
       z__h25756,
       z__h40073,
       z__h40080,
       z__h40087,
       z__h40094,
       z__h40101,
       z__h40108,
       z__h40115,
       z__h40122,
       z__h40129,
       z__h40136,
       z__h40143,
       z__h40150,
       z__h40157,
       z__h40164,
       z__h40171,
       z__h40178,
       z__h40185,
       z__h40192,
       z__h40199,
       z__h40206,
       z__h40213,
       z__h40220,
       z__h40227,
       z__h40234,
       z__h40241,
       z__h40248,
       z__h40255,
       z__h40262,
       z__h40269,
       z__h40276;

  // submodule biasWorker_wci_isReset
  ResetToBool biasWorker_wci_isReset(.RST(wci_mReset$OUT_RST_N),
				     .VAL(biasWorker_wci_isReset$VAL));

  // submodule biasWorker_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) biasWorker_wci_reqF(.RST_N(wci_mReset$OUT_RST_N),
						   .CLK(CLK),
						   .D_IN(biasWorker_wci_reqF$D_IN),
						   .ENQ(biasWorker_wci_reqF$ENQ),
						   .DEQ(biasWorker_wci_reqF$DEQ),
						   .CLR(biasWorker_wci_reqF$CLR),
						   .D_OUT(biasWorker_wci_reqF$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(biasWorker_wci_reqF$EMPTY_N));

  // submodule biasWorker_wsiM_isReset
  ResetToBool biasWorker_wsiM_isReset(.RST(wci_mReset$OUT_RST_N),
				      .VAL(biasWorker_wsiM_isReset$VAL));

  // submodule biasWorker_wsiS_isReset
  ResetToBool biasWorker_wsiS_isReset(.RST(wci_mReset$OUT_RST_N),
				      .VAL(biasWorker_wsiS_isReset$VAL));

  // submodule biasWorker_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) biasWorker_wsiS_reqFifo(.RST_N(wci_mReset$OUT_RST_N),
						       .CLK(CLK),
						       .D_IN(biasWorker_wsiS_reqFifo$D_IN),
						       .ENQ(biasWorker_wsiS_reqFifo$ENQ),
						       .DEQ(biasWorker_wsiS_reqFifo$DEQ),
						       .CLR(biasWorker_wsiS_reqFifo$CLR),
						       .D_OUT(biasWorker_wsiS_reqFifo$D_OUT),
						       .FULL_N(biasWorker_wsiS_reqFifo$FULL_N),
						       .EMPTY_N(biasWorker_wsiS_reqFifo$EMPTY_N));

  // submodule isMReset
  ResetToBool isMReset(.RST(wci_mReset$OUT_RST_N), .VAL(isMReset$VAL));

  // submodule pmemMon0_pmemF
  FIFO2 #(.width(32'd34), .guarded(32'd1)) pmemMon0_pmemF(.RST_N(RST_N),
							  .CLK(CLK),
							  .D_IN(pmemMon0_pmemF$D_IN),
							  .ENQ(pmemMon0_pmemF$ENQ),
							  .DEQ(pmemMon0_pmemF$DEQ),
							  .CLR(pmemMon0_pmemF$CLR),
							  .D_OUT(pmemMon0_pmemF$D_OUT),
							  .FULL_N(pmemMon0_pmemF$FULL_N),
							  .EMPTY_N(pmemMon0_pmemF$EMPTY_N));

  // submodule pmemMon0_wsiS_isReset
  ResetToBool pmemMon0_wsiS_isReset(.RST(RST_N),
				    .VAL(pmemMon0_wsiS_isReset$VAL));

  // submodule pmemMon0_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pmemMon0_wsiS_reqFifo(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(pmemMon0_wsiS_reqFifo$D_IN),
						     .ENQ(pmemMon0_wsiS_reqFifo$ENQ),
						     .DEQ(pmemMon0_wsiS_reqFifo$DEQ),
						     .CLR(pmemMon0_wsiS_reqFifo$CLR),
						     .D_OUT(pmemMon0_wsiS_reqFifo$D_OUT),
						     .FULL_N(pmemMon0_wsiS_reqFifo$FULL_N),
						     .EMPTY_N(pmemMon0_wsiS_reqFifo$EMPTY_N));

  // submodule pmemMon1_pmemF
  FIFO2 #(.width(32'd34), .guarded(32'd1)) pmemMon1_pmemF(.RST_N(RST_N),
							  .CLK(CLK),
							  .D_IN(pmemMon1_pmemF$D_IN),
							  .ENQ(pmemMon1_pmemF$ENQ),
							  .DEQ(pmemMon1_pmemF$DEQ),
							  .CLR(pmemMon1_pmemF$CLR),
							  .D_OUT(pmemMon1_pmemF$D_OUT),
							  .FULL_N(pmemMon1_pmemF$FULL_N),
							  .EMPTY_N(pmemMon1_pmemF$EMPTY_N));

  // submodule pmemMon1_wsiS_isReset
  ResetToBool pmemMon1_wsiS_isReset(.RST(RST_N),
				    .VAL(pmemMon1_wsiS_isReset$VAL));

  // submodule pmemMon1_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pmemMon1_wsiS_reqFifo(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(pmemMon1_wsiS_reqFifo$D_IN),
						     .ENQ(pmemMon1_wsiS_reqFifo$ENQ),
						     .DEQ(pmemMon1_wsiS_reqFifo$DEQ),
						     .CLR(pmemMon1_wsiS_reqFifo$CLR),
						     .D_OUT(pmemMon1_wsiS_reqFifo$D_OUT),
						     .FULL_N(pmemMon1_wsiS_reqFifo$FULL_N),
						     .EMPTY_N(pmemMon1_wsiS_reqFifo$EMPTY_N));

  // submodule wciMon
  mkWciMonitor #(.monId(8'h42)) wciMon(.CLK(CLK),
				       .RST_N(RST_N),
				       .observe_MAddr(wciMon$observe_MAddr),
				       .observe_MAddrSpace(wciMon$observe_MAddrSpace),
				       .observe_MByteEn(wciMon$observe_MByteEn),
				       .observe_MCmd(wciMon$observe_MCmd),
				       .observe_MData(wciMon$observe_MData),
				       .observe_MFlag(wciMon$observe_MFlag),
				       .observe_MReset_n(wciMon$observe_MReset_n),
				       .observe_SData(wciMon$observe_SData),
				       .observe_SFlag(wciMon$observe_SFlag),
				       .observe_SResp(wciMon$observe_SResp),
				       .observe_SThreadBusy(wciMon$observe_SThreadBusy),
				       .pmem_SThreadBusy(wciMon$pmem_SThreadBusy),
				       .pmem_SReset_n(wciMon$pmem_SReset_n),
				       .pmem_MCmd(wciMon$pmem_MCmd),
				       .pmem_MReqLast(wciMon$pmem_MReqLast),
				       .pmem_MBurstPrecise(wciMon$pmem_MBurstPrecise),
				       .pmem_MBurstLength(wciMon$pmem_MBurstLength),
				       .pmem_MData(wciMon$pmem_MData),
				       .pmem_MByteEn(wciMon$pmem_MByteEn),
				       .pmem_MReqInfo(wciMon$pmem_MReqInfo),
				       .pmem_MReset_n(wciMon$pmem_MReset_n));

  // submodule wci_mReset
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) wci_mReset(.CLK(CLK),
							  .RST_N(RST_N),
							  .DST_CLK(CLK),
							  .ASSERT_IN(wci_mReset$ASSERT_IN),
							  .ASSERT_OUT(),
							  .OUT_RST_N(wci_mReset$OUT_RST_N));

  // submodule wci_respF
  FIFO1 #(.width(32'd34), .guarded(32'd1)) wci_respF(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(wci_respF$D_IN),
						     .ENQ(wci_respF$ENQ),
						     .DEQ(wci_respF$DEQ),
						     .CLR(wci_respF$CLR),
						     .D_OUT(),
						     .FULL_N(wci_respF$FULL_N),
						     .EMPTY_N(wci_respF$EMPTY_N));

  // submodule wsiM_isReset
  ResetToBool wsiM_isReset(.RST(RST_N), .VAL(wsiM_isReset$VAL));

  // submodule wsiMon_observer_evF
  FIFO2 #(.width(32'd99), .guarded(32'd1)) wsiMon_observer_evF(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(wsiMon_observer_evF$D_IN),
							       .ENQ(wsiMon_observer_evF$ENQ),
							       .DEQ(wsiMon_observer_evF$DEQ),
							       .CLR(wsiMon_observer_evF$CLR),
							       .D_OUT(wsiMon_observer_evF$D_OUT),
							       .FULL_N(wsiMon_observer_evF$FULL_N),
							       .EMPTY_N(wsiMon_observer_evF$EMPTY_N));

  // submodule wsiMon_pmsender_evF
  FIFO2 #(.width(32'd99), .guarded(32'd1)) wsiMon_pmsender_evF(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(wsiMon_pmsender_evF$D_IN),
							       .ENQ(wsiMon_pmsender_evF$ENQ),
							       .DEQ(wsiMon_pmsender_evF$DEQ),
							       .CLR(wsiMon_pmsender_evF$CLR),
							       .D_OUT(wsiMon_pmsender_evF$D_OUT),
							       .FULL_N(wsiMon_pmsender_evF$FULL_N),
							       .EMPTY_N(wsiMon_pmsender_evF$EMPTY_N));

  // submodule wsiMon_pmsender_wsiM_isReset
  ResetToBool wsiMon_pmsender_wsiM_isReset(.RST(RST_N),
					   .VAL(wsiMon_pmsender_wsiM_isReset$VAL));

  // submodule wsiS_isReset
  ResetToBool wsiS_isReset(.RST(RST_N), .VAL(wsiS_isReset$VAL));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mReqLConnect
  assign CAN_FIRE_RL_mReqLConnect = wciMon$pmem_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect = wciMon$pmem_MReqLast ;

  // rule RL_mBurstPConnect
  assign CAN_FIRE_RL_mBurstPConnect = wciMon$pmem_MBurstPrecise ;
  assign WILL_FIRE_RL_mBurstPConnect = wciMon$pmem_MBurstPrecise ;

  // rule RL_mBurstLConnect
  assign CAN_FIRE_RL_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mByteEnConnect
  assign CAN_FIRE_RL_mByteEnConnect = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect = 1'd1 ;

  // rule RL_mReqIConnect
  assign CAN_FIRE_RL_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect = 1'd1 ;

  // rule RL_mDataIConnect
  assign CAN_FIRE_RL_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect = 1'd1 ;

  // rule RL_mRstConnect
  assign CAN_FIRE_RL_mRstConnect = wciMon$pmem_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect = wciMon$pmem_MReset_n ;

  // rule RL_sRstConnect
  assign CAN_FIRE_RL_sRstConnect =
	     !pmemMon0_wsiS_isReset$VAL && pmemMon0_wsiS_operateD ;
  assign WILL_FIRE_RL_sRstConnect = CAN_FIRE_RL_sRstConnect ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_mReqLConnect_1
  assign CAN_FIRE_RL_mReqLConnect_1 =
	     !wsiMon_pmsender_wsiM_sThreadBusy_d &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_mReqLConnect_1 = CAN_FIRE_RL_mReqLConnect_1 ;

  // rule RL_mBurstPConnect_1
  assign CAN_FIRE_RL_mBurstPConnect_1 =
	     !wsiMon_pmsender_wsiM_sThreadBusy_d &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_mBurstPConnect_1 = CAN_FIRE_RL_mBurstPConnect_1 ;

  // rule RL_mBurstLConnect_1
  assign CAN_FIRE_RL_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_1 = 1'd1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mByteEnConnect_1
  assign CAN_FIRE_RL_mByteEnConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect_1 = 1'd1 ;

  // rule RL_mReqIConnect_1
  assign CAN_FIRE_RL_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_1 = 1'd1 ;

  // rule RL_mDataIConnect_1
  assign CAN_FIRE_RL_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect_1 = 1'd1 ;

  // rule RL_mRstConnect_1
  assign CAN_FIRE_RL_mRstConnect_1 =
	     !wsiMon_pmsender_wsiM_isReset$VAL &&
	     wsiMon_pmsender_wsiM_operateD ;
  assign WILL_FIRE_RL_mRstConnect_1 = CAN_FIRE_RL_mRstConnect_1 ;

  // rule RL_sRstConnect_1
  assign CAN_FIRE_RL_sRstConnect_1 =
	     !pmemMon1_wsiS_isReset$VAL && pmemMon1_wsiS_operateD ;
  assign WILL_FIRE_RL_sRstConnect_1 = CAN_FIRE_RL_sRstConnect_1 ;

  // rule RL_mCmdConnect_2
  assign CAN_FIRE_RL_mCmdConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_2 = 1'd1 ;

  // rule RL_mAddrSConnect
  assign CAN_FIRE_RL_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect = 1'd1 ;

  // rule RL_mBEConnect
  assign CAN_FIRE_RL_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mDataConnect_2
  assign CAN_FIRE_RL_mDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_2 = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 = wci_sThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_stbConnect_2 = wci_sThreadBusy_pw$whas ;

  // rule RL_mFlagConnect
  assign CAN_FIRE_RL_mFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect = 1'd1 ;

  // rule RL_mResetConnect
  assign CAN_FIRE_RL_mResetConnect = 1'd1 ;
  assign WILL_FIRE_RL_mResetConnect = 1'd1 ;

  // rule RL_mReqLConnect_2
  assign CAN_FIRE_RL_mReqLConnect_2 =
	     !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;
  assign WILL_FIRE_RL_mReqLConnect_2 = CAN_FIRE_RL_mReqLConnect_2 ;

  // rule RL_mBrstPConnect
  assign CAN_FIRE_RL_mBrstPConnect =
	     !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;
  assign WILL_FIRE_RL_mBrstPConnect = CAN_FIRE_RL_mBrstPConnect ;

  // rule RL_mBLenConnect
  assign CAN_FIRE_RL_mBLenConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBLenConnect = 1'd1 ;

  // rule RL_mBEConnect_1
  assign CAN_FIRE_RL_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_1 = 1'd1 ;

  // rule RL_mReqIConnect_2
  assign CAN_FIRE_RL_mReqIConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_2 = 1'd1 ;

  // rule RL_mDatIConnect
  assign CAN_FIRE_RL_mDatIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDatIConnect = 1'd1 ;

  // rule RL_mResetConnect_1
  assign CAN_FIRE_RL_mResetConnect_1 = !wsiM_isReset$VAL && wsiM_operateD ;
  assign WILL_FIRE_RL_mResetConnect_1 = CAN_FIRE_RL_mResetConnect_1 ;

  // rule RL_sResetConnect
  assign CAN_FIRE_RL_sResetConnect = wsiM_peerIsReady_1$whas ;
  assign WILL_FIRE_RL_sResetConnect = wsiM_peerIsReady_1$whas ;

  // rule RL_mCmdConnect_4
  assign CAN_FIRE_RL_mCmdConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_4 = 1'd1 ;

  // rule RL_mReqLConnect_3
  assign CAN_FIRE_RL_mReqLConnect_3 = wsi_Es_mReqLast_w$whas ;
  assign WILL_FIRE_RL_mReqLConnect_3 = wsi_Es_mReqLast_w$whas ;

  // rule RL_mBurstPConnect_2
  assign CAN_FIRE_RL_mBurstPConnect_2 = wsi_Es_mBurstPrecise_w$whas ;
  assign WILL_FIRE_RL_mBurstPConnect_2 = wsi_Es_mBurstPrecise_w$whas ;

  // rule RL_mBurstLConnect_2
  assign CAN_FIRE_RL_mBurstLConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_2 = 1'd1 ;

  // rule RL_mDataConnect_4
  assign CAN_FIRE_RL_mDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_4 = 1'd1 ;

  // rule RL_mByteEnConnect_2
  assign CAN_FIRE_RL_mByteEnConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect_2 = 1'd1 ;

  // rule RL_mReqIConnect_3
  assign CAN_FIRE_RL_mReqIConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_3 = 1'd1 ;

  // rule RL_mDataIConnect_2
  assign CAN_FIRE_RL_mDataIConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect_2 = 1'd1 ;

  // rule RL_mRstConnect_2
  assign CAN_FIRE_RL_mRstConnect_2 = wsiS_peerIsReady_1$whas ;
  assign WILL_FIRE_RL_mRstConnect_2 = wsiS_peerIsReady_1$whas ;

  // rule RL_sRstConnect_2
  assign CAN_FIRE_RL_sRstConnect_2 = !wsiS_isReset$VAL && wsiS_operateD ;
  assign WILL_FIRE_RL_sRstConnect_2 = CAN_FIRE_RL_sRstConnect_2 ;

  // rule RL_runWciSeq
  assign CAN_FIRE_RL_runWciSeq =
	     wciSeqOnce_onceReady &&
	     (wciSeqFsm_state_mkFSMstate == 5'd23 ||
	      wciSeqFsm_state_mkFSMstate == 5'd1 &&
	      !wciSeqFsm_state_standby) &&
	     !wciSeqFsm_start_reg ;
  assign WILL_FIRE_RL_runWciSeq = CAN_FIRE_RL_runWciSeq ;

  // rule RL_operating_actions
  assign CAN_FIRE_RL_operating_actions = testOperating ;
  assign WILL_FIRE_RL_operating_actions = testOperating ;

  // rule RL_wsi_source
  assign CAN_FIRE_RL_wsi_source =
	     (srcMesgCount != 16'd0 || wsiM_reqFifo_c_r != 2'd2) &&
	     enWsiSource ;
  assign WILL_FIRE_RL_wsi_source = CAN_FIRE_RL_wsi_source ;

  // rule RL_terminate
  assign CAN_FIRE_RL_terminate = simCycle == 16'd1000 ;
  assign WILL_FIRE_RL_terminate = CAN_FIRE_RL_terminate ;

  // rule RL_increment_simCycle
  assign CAN_FIRE_RL_increment_simCycle = 1'd1 ;
  assign WILL_FIRE_RL_increment_simCycle = 1'd1 ;

  // rule RL_wci_workerReset
  assign CAN_FIRE_RL_wci_workerReset = !wci_wReset_n ;
  assign WILL_FIRE_RL_wci_workerReset = CAN_FIRE_RL_wci_workerReset ;

  // rule RL_wci_updateStatus
  assign CAN_FIRE_RL_wci_updateStatus = 1'd1 ;
  assign WILL_FIRE_RL_wci_updateStatus = 1'd1 ;

  // rule RL_wci_sflagUpdate
  assign CAN_FIRE_RL_wci_sflagUpdate = 1'd1 ;
  assign WILL_FIRE_RL_wci_sflagUpdate = 1'd1 ;

  // rule RL_wci_sfCapClear__dreg_update
  assign CAN_FIRE_RL_wci_sfCapClear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_sfCapClear__dreg_update = 1'd1 ;

  // rule RL_wsiM_ext_status_assign
  assign CAN_FIRE_RL_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_wsiM_inc_tBusyCount =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiM_inc_tBusyCount = CAN_FIRE_RL_wsiM_inc_tBusyCount ;

  // rule RL_wsiM_update_statusR
  assign CAN_FIRE_RL_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_update_statusR = 1'd1 ;

  // rule RL_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiM_reqFifo_deq = CAN_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wsiS_backpressure
  assign CAN_FIRE_RL_wsiS_backpressure =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign WILL_FIRE_RL_wsiS_backpressure = CAN_FIRE_RL_wsiS_backpressure ;

  // rule RL_stbConnect_4
  assign CAN_FIRE_RL_stbConnect_4 =
	     !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect_4 = CAN_FIRE_RL_stbConnect_4 ;

  // rule RL_wsiS_ext_status_assign
  assign CAN_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_wsiS_inc_tBusyCount =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_wsiS_inc_tBusyCount = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // rule RL_wsiS_update_statusR
  assign CAN_FIRE_RL_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_update_statusR = 1'd1 ;

  // rule RL_biasWorker_operating_actions
  assign CAN_FIRE_RL_biasWorker_operating_actions =
	     biasWorker_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_biasWorker_operating_actions =
	     CAN_FIRE_RL_biasWorker_operating_actions ;

  // rule RL_biasWorker_wci_request_decode
  assign CAN_FIRE_RL_biasWorker_wci_request_decode =
	     biasWorker_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_biasWorker_wci_request_decode =
	     biasWorker_wci_reqF$EMPTY_N ;

  // rule RL_biasWorker_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_biasWorker_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_biasWorker_wci_respF_deq
  assign CAN_FIRE_RL_biasWorker_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wci_respF_deq = 1'd1 ;

  // rule RL_biasWorker_wci_ctl_op_start
  assign CAN_FIRE_RL_biasWorker_wci_ctl_op_start =
	     biasWorker_wci_reqF$EMPTY_N && biasWorker_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_biasWorker_wci_ctl_op_start =
	     CAN_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     !WILL_FIRE_RL_biasWorker_wci_ctl_op_complete ;

  // rule RL_biasWorker_wci_ctrl_EiI
  assign CAN_FIRE_RL_biasWorker_wci_ctrl_EiI =
	     biasWorker_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     biasWorker_wci_cState == 3'd0 &&
	     biasWorker_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_biasWorker_wci_ctrl_EiI =
	     CAN_FIRE_RL_biasWorker_wci_ctrl_EiI ;

  // rule RL_biasWorker_wci_ctrl_IsO
  assign CAN_FIRE_RL_biasWorker_wci_ctrl_IsO =
	     biasWorker_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     biasWorker_wci_cState == 3'd1 &&
	     biasWorker_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_biasWorker_wci_ctrl_IsO =
	     CAN_FIRE_RL_biasWorker_wci_ctrl_IsO ;

  // rule RL_biasWorker_wci_ctrl_OrE
  assign CAN_FIRE_RL_biasWorker_wci_ctrl_OrE =
	     biasWorker_wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     biasWorker_wci_cState == 3'd2 &&
	     biasWorker_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_biasWorker_wci_ctrl_OrE =
	     CAN_FIRE_RL_biasWorker_wci_ctrl_OrE ;

  // rule RL_biasWorker_wsiS_backpressure
  assign CAN_FIRE_RL_biasWorker_wsiS_backpressure =
	     biasWorker_wsiS_reqFifo_levelsValid &&
	     biasWorker_wsiS_operateD &&
	     biasWorker_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_biasWorker_wsiS_backpressure =
	     CAN_FIRE_RL_biasWorker_wsiS_backpressure ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 = wsiM_sThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_stbConnect_3 = wsiM_sThreadBusy_pw$whas ;

  // rule RL_biasWorker_wsiS_ext_status_assign
  assign CAN_FIRE_RL_biasWorker_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_biasWorker_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_biasWorker_wsiS_inc_tBusyCount =
	     biasWorker_wsiS_operateD && biasWorker_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_biasWorker_wsiS_backpressure ||
	      biasWorker_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_biasWorker_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_biasWorker_wsiS_inc_tBusyCount ;

  // rule RL_biasWorker_wsiS_update_statusR
  assign CAN_FIRE_RL_biasWorker_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiS_update_statusR = 1'd1 ;

  // rule RL_biasWorker_wsiM_ext_status_assign
  assign CAN_FIRE_RL_biasWorker_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_biasWorker_wci_cfrd
  assign CAN_FIRE_RL_biasWorker_wci_cfrd =
	     biasWorker_wci_reqF$EMPTY_N &&
	     biasWorker_wci_respF_c_r != 2'd2 &&
	     biasWorker_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_biasWorker_wci_cfrd =
	     CAN_FIRE_RL_biasWorker_wci_cfrd &&
	     !WILL_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     !WILL_FIRE_RL_biasWorker_wci_ctl_op_complete ;

  // rule RL_biasWorker_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_biasWorker_wsiM_inc_tBusyCount =
	     biasWorker_wsiM_operateD && biasWorker_wsiM_peerIsReady &&
	     biasWorker_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_biasWorker_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_biasWorker_wsiM_inc_tBusyCount ;

  // rule RL_biasWorker_wsiM_update_statusR
  assign CAN_FIRE_RL_biasWorker_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiM_update_statusR = 1'd1 ;

  // rule RL_biasWorker_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_biasWorker_wsiM_reqFifo_deq =
	     biasWorker_wsiM_reqFifo_c_r != 2'd0 &&
	     !biasWorker_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_biasWorker_wsiM_reqFifo_deq ;

  // rule RL_biasWorker_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_biasWorker_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_biasWorker_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_biasWorker_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_biasWorker_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_biasWorker_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_biasWorker_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_biasWorker_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_biasWorker_wci_reqF_enq
  assign CAN_FIRE_RL_biasWorker_wci_reqF_enq =
	     biasWorker_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_biasWorker_wci_reqF_enq =
	     CAN_FIRE_RL_biasWorker_wci_reqF_enq ;

  // rule RL_pmemMon0_operate
  assign CAN_FIRE_RL_pmemMon0_operate = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_operate = 1'd1 ;

  // rule RL_pmemMon0_get_message_head_dw
  assign CAN_FIRE_RL_pmemMon0_get_message_head_dw =
	     pmemMon0_pmemF$EMPTY_N && !pmemMon0_pmemF$D_OUT[32] ;
  assign WILL_FIRE_RL_pmemMon0_get_message_head_dw =
	     CAN_FIRE_RL_pmemMon0_get_message_head_dw ;

  // rule RL_pmemMon0_gen_message_body_dw
  assign CAN_FIRE_RL_pmemMon0_gen_message_body_dw =
	     pmemMon0_pmemF$EMPTY_N && pmemMon0_pmemF$D_OUT[32] ;
  assign WILL_FIRE_RL_pmemMon0_gen_message_body_dw =
	     CAN_FIRE_RL_pmemMon0_gen_message_body_dw ;

  // rule RL_pmemMon0_wsiS_backpressure
  assign CAN_FIRE_RL_pmemMon0_wsiS_backpressure =
	     pmemMon0_wsiS_reqFifo_levelsValid && pmemMon0_wsiS_operateD &&
	     pmemMon0_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_backpressure =
	     CAN_FIRE_RL_pmemMon0_wsiS_backpressure ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect =
	     !CAN_FIRE_RL_pmemMon0_wsiS_backpressure ||
	     pmemMon0_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect = CAN_FIRE_RL_stbConnect ;

  // rule RL_pmemMon0_wsiS_ext_status_assign
  assign CAN_FIRE_RL_pmemMon0_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_pmemMon0_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_pmemMon0_wsiS_inc_tBusyCount =
	     pmemMon0_wsiS_operateD && pmemMon0_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_pmemMon0_wsiS_backpressure ||
	      pmemMon0_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_pmemMon0_wsiS_inc_tBusyCount ;

  // rule RL_pmemMon0_wsiS_update_statusR
  assign CAN_FIRE_RL_pmemMon0_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_update_statusR = 1'd1 ;

  // rule RL_pmemMon0_pmHead__dreg_update
  assign CAN_FIRE_RL_pmemMon0_pmHead__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_pmHead__dreg_update = 1'd1 ;

  // rule RL_pmemMon0_pmBody__dreg_update
  assign CAN_FIRE_RL_pmemMon0_pmBody__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_pmBody__dreg_update = 1'd1 ;

  // rule RL_pmemMon0_wsi_Es_doAlways
  assign CAN_FIRE_RL_pmemMon0_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_wsi_Es_doAlways = 1'd1 ;

  // rule RL_pmemMon0_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_pmemMon0_wsiS_reqFifo_enq =
	     pmemMon0_wsiS_operateD && pmemMon0_wsiS_peerIsReady &&
	     pmemMon0_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_pmemMon0_wsiS_reqFifo_enq ;

  // rule RL_pmemMon0_chomp_wsi
  assign CAN_FIRE_RL_pmemMon0_chomp_wsi =
	     pmemMon0_wsiS_reqFifo$EMPTY_N && pmemMon0_pmemF$FULL_N ;
  assign WILL_FIRE_RL_pmemMon0_chomp_wsi = CAN_FIRE_RL_pmemMon0_chomp_wsi ;

  // rule RL_pmemMon0_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_pmemMon0_wsiS_reqFifo__updateLevelCounter =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     CAN_FIRE_RL_pmemMon0_chomp_wsi ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_pmemMon0_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_pmemMon0_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_pmemMon0_wsiS_reqFifo_reset =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     CAN_FIRE_RL_pmemMon0_chomp_wsi ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_pmemMon0_wsiS_reqFifo_reset ;

  // rule RL_pmemMon0_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_pmemMon0_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_pmemMon0_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_pmemMon0_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon0_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wsiMon_mkConnectionAVtoAf
  assign CAN_FIRE_RL_wsiMon_mkConnectionAVtoAf =
	     wsiMon_observer_evF$EMPTY_N && wsiMon_pmsender_evF$FULL_N ;
  assign WILL_FIRE_RL_wsiMon_mkConnectionAVtoAf =
	     CAN_FIRE_RL_wsiMon_mkConnectionAVtoAf ;

  // rule RL_wsiMon_observer_request_detected
  assign CAN_FIRE_RL_wsiMon_observer_request_detected =
	     (wsiMon_observer_r_mCmd != 3'd1 || wsiMon_observer_evF$FULL_N) &&
	     wsiMon_observer_r_mCmdD == 3'd0 &&
	     wsiMon_observer_r_mCmd != 3'd0 ;
  assign WILL_FIRE_RL_wsiMon_observer_request_detected =
	     CAN_FIRE_RL_wsiMon_observer_request_detected ;

  // rule RL_mDataConnect_3
  assign CAN_FIRE_RL_mDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_3 = 1'd1 ;

  // rule RL_wsiMon_observer_doAlways
  assign CAN_FIRE_RL_wsiMon_observer_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_observer_doAlways = 1'd1 ;

  // rule RL_mCmdConnect_3
  assign CAN_FIRE_RL_mCmdConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_3 = 1'd1 ;

  // rule RL_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd1 || wsiM_reqFifo_enqueueing$whas) &&
	     wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr = CAN_FIRE_RL_wsiM_reqFifo_incCtr ;

  // rule RL_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_wsiM_reqFifo_deq && !wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr = CAN_FIRE_RL_wsiM_reqFifo_decCtr ;

  // rule RL_wsiM_reqFifo_both
  assign CAN_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd2 || wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_wsiM_reqFifo_both = CAN_FIRE_RL_wsiM_reqFifo_both ;

  // rule RL_biasWorker_wsi_Es_doAlways
  assign CAN_FIRE_RL_biasWorker_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsi_Es_doAlways = 1'd1 ;

  // rule RL_biasWorker_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_biasWorker_wsiS_reqFifo_enq =
	     biasWorker_wsiS_operateD && biasWorker_wsiS_peerIsReady &&
	     biasWorker_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_biasWorker_wsiS_reqFifo_enq ;

  // rule RL_biasWorker_doMessagePush
  assign CAN_FIRE_RL_biasWorker_doMessagePush =
	     biasWorker_wsiM_reqFifo_c_r != 2'd2 &&
	     biasWorker_wsiS_reqFifo$EMPTY_N &&
	     biasWorker_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_biasWorker_doMessagePush =
	     CAN_FIRE_RL_biasWorker_doMessagePush ;

  // rule RL_biasWorker_wci_cfwr
  assign CAN_FIRE_RL_biasWorker_wci_cfwr =
	     biasWorker_wci_reqF$EMPTY_N &&
	     biasWorker_wci_respF_c_r != 2'd2 &&
	     biasWorker_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_biasWorker_wci_cfwr =
	     CAN_FIRE_RL_biasWorker_wci_cfwr &&
	     !WILL_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     !WILL_FIRE_RL_biasWorker_wci_ctl_op_complete ;

  // rule RL_biasWorker_wci_ctl_op_complete
  assign CAN_FIRE_RL_biasWorker_wci_ctl_op_complete =
	     biasWorker_wci_respF_c_r != 2'd2 && biasWorker_wci_ctlOpActive &&
	     biasWorker_wci_ctlAckReg ;
  assign WILL_FIRE_RL_biasWorker_wci_ctl_op_complete =
	     CAN_FIRE_RL_biasWorker_wci_ctl_op_complete ;

  // rule RL_biasWorker_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_biasWorker_wci_reqF__updateLevelCounter =
	     (biasWorker_wci_wciReq$wget[59:57] != 3'd0) !=
	     biasWorker_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_biasWorker_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_biasWorker_wci_reqF__updateLevelCounter ;

  // rule RL_biasWorker_wci_respF_incCtr
  assign CAN_FIRE_RL_biasWorker_wci_respF_incCtr =
	     ((biasWorker_wci_respF_c_r == 2'd0) ?
		biasWorker_wci_respF_x_wire$whas :
		biasWorker_wci_respF_c_r != 2'd1 ||
		biasWorker_wci_respF_x_wire$whas) &&
	     biasWorker_wci_respF_enqueueing$whas &&
	     !(biasWorker_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_biasWorker_wci_respF_incCtr =
	     CAN_FIRE_RL_biasWorker_wci_respF_incCtr ;

  // rule RL_biasWorker_wci_respF_decCtr
  assign CAN_FIRE_RL_biasWorker_wci_respF_decCtr =
	     biasWorker_wci_respF_c_r != 2'd0 &&
	     !biasWorker_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_biasWorker_wci_respF_decCtr =
	     CAN_FIRE_RL_biasWorker_wci_respF_decCtr ;

  // rule RL_biasWorker_wci_respF_both
  assign CAN_FIRE_RL_biasWorker_wci_respF_both =
	     ((biasWorker_wci_respF_c_r == 2'd1) ?
		biasWorker_wci_respF_x_wire$whas :
		biasWorker_wci_respF_c_r != 2'd2 ||
		biasWorker_wci_respF_x_wire$whas) &&
	     biasWorker_wci_respF_c_r != 2'd0 &&
	     biasWorker_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_biasWorker_wci_respF_both =
	     CAN_FIRE_RL_biasWorker_wci_respF_both ;

  // rule RL_biasWorker_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_biasWorker_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_biasWorker_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_biasWorker_wsiS_reqFifo__updateLevelCounter =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign WILL_FIRE_RL_biasWorker_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_biasWorker_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_biasWorker_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_biasWorker_wsiS_reqFifo_reset =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_biasWorker_wsiS_reqFifo_reset ;

  // rule RL_biasWorker_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_biasWorker_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_biasWorker_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_biasWorker_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_biasWorker_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr =
	     ((biasWorker_wsiM_reqFifo_c_r == 2'd0) ?
		CAN_FIRE_RL_biasWorker_doMessagePush :
		biasWorker_wsiM_reqFifo_c_r != 2'd1 ||
		CAN_FIRE_RL_biasWorker_doMessagePush) &&
	     CAN_FIRE_RL_biasWorker_doMessagePush &&
	     !CAN_FIRE_RL_biasWorker_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr ;

  // rule RL_biasWorker_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     !CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr ;

  // rule RL_biasWorker_wsiM_reqFifo_both
  assign CAN_FIRE_RL_biasWorker_wsiM_reqFifo_both =
	     ((biasWorker_wsiM_reqFifo_c_r == 2'd1) ?
		CAN_FIRE_RL_biasWorker_doMessagePush :
		biasWorker_wsiM_reqFifo_c_r != 2'd2 ||
		CAN_FIRE_RL_biasWorker_doMessagePush) &&
	     CAN_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both =
	     CAN_FIRE_RL_biasWorker_wsiM_reqFifo_both ;

  // rule RL_wsiMon_observer_r_mReqLast__dreg_update
  assign CAN_FIRE_RL_wsiMon_observer_r_mReqLast__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_observer_r_mReqLast__dreg_update = 1'd1 ;

  // rule RL_wsiMon_observer_r_mBurstPrecise__dreg_update
  assign CAN_FIRE_RL_wsiMon_observer_r_mBurstPrecise__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_observer_r_mBurstPrecise__dreg_update = 1'd1 ;

  // rule RL_wsiMon_observer_r_sThreadBusy__dreg_update
  assign CAN_FIRE_RL_wsiMon_observer_r_sThreadBusy__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_observer_r_sThreadBusy__dreg_update = 1'd1 ;

  // rule RL_wsiMon_observer_r_sReset_n__dreg_update
  assign CAN_FIRE_RL_wsiMon_observer_r_sReset_n__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_observer_r_sReset_n__dreg_update = 1'd1 ;

  // rule RL_wsiMon_observer_r_mReset_n__dreg_update
  assign CAN_FIRE_RL_wsiMon_observer_r_mReset_n__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_observer_r_mReset_n__dreg_update = 1'd1 ;

  // rule RL_wsiMon_pmsender_operate
  assign CAN_FIRE_RL_wsiMon_pmsender_operate = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_pmsender_operate = 1'd1 ;

  // rule RL_wsiMon_pmsender_serialize_message
  assign CAN_FIRE_RL_wsiMon_pmsender_serialize_message =
	     wsiMon_pmsender_wsiM_reqFifo_c_r != 2'd2 &&
	     wsiMon_pmsender_evF$EMPTY_N ;
  assign WILL_FIRE_RL_wsiMon_pmsender_serialize_message =
	     CAN_FIRE_RL_wsiMon_pmsender_serialize_message ;

  // rule RL_wsiMon_pmsender_wsiM_ext_status_assign
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_wsiMon_pmsender_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_inc_tBusyCount =
	     wsiMon_pmsender_wsiM_operateD &&
	     wsiMon_pmsender_wsiM_peerIsReady &&
	     wsiMon_pmsender_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_inc_tBusyCount =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_inc_tBusyCount ;

  // rule RL_wsiMon_pmsender_wsiM_update_statusR
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_update_statusR = 1'd1 ;

  // rule RL_wsiMon_pmsender_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq =
	     wsiMon_pmsender_wsiM_reqFifo_c_r != 2'd0 &&
	     !wsiMon_pmsender_wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq ;

  // rule RL_wsiMon_pmsender_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr =
	     ((wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd0) ?
		CAN_FIRE_RL_wsiMon_pmsender_serialize_message :
		wsiMon_pmsender_wsiM_reqFifo_c_r != 2'd1 ||
		CAN_FIRE_RL_wsiMon_pmsender_serialize_message) &&
	     CAN_FIRE_RL_wsiMon_pmsender_serialize_message &&
	     !CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr ;

  // rule RL_wsiMon_pmsender_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq &&
	     !CAN_FIRE_RL_wsiMon_pmsender_serialize_message ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr ;

  // rule RL_wsiMon_pmsender_wsiM_reqFifo_both
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both =
	     ((wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd1) ?
		CAN_FIRE_RL_wsiMon_pmsender_serialize_message :
		wsiMon_pmsender_wsiM_reqFifo_c_r != 2'd2 ||
		CAN_FIRE_RL_wsiMon_pmsender_serialize_message) &&
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq &&
	     CAN_FIRE_RL_wsiMon_pmsender_serialize_message ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both ;

  // rule RL_wsiMon_pmsender_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_wsiMon_pmsender_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_pmemMon1_operate
  assign CAN_FIRE_RL_pmemMon1_operate = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_operate = 1'd1 ;

  // rule RL_pmemMon1_get_message_head_dw
  assign CAN_FIRE_RL_pmemMon1_get_message_head_dw =
	     pmemMon1_pmemF$EMPTY_N && !pmemMon1_pmemF$D_OUT[32] ;
  assign WILL_FIRE_RL_pmemMon1_get_message_head_dw =
	     CAN_FIRE_RL_pmemMon1_get_message_head_dw ;

  // rule RL_pmemMon1_gen_message_body_dw
  assign CAN_FIRE_RL_pmemMon1_gen_message_body_dw =
	     pmemMon1_pmemF$EMPTY_N && pmemMon1_pmemF$D_OUT[32] ;
  assign WILL_FIRE_RL_pmemMon1_gen_message_body_dw =
	     CAN_FIRE_RL_pmemMon1_gen_message_body_dw ;

  // rule RL_pmemMon1_wsiS_backpressure
  assign CAN_FIRE_RL_pmemMon1_wsiS_backpressure =
	     pmemMon1_wsiS_reqFifo_levelsValid && pmemMon1_wsiS_operateD &&
	     pmemMon1_wsiS_peerIsReady ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_backpressure =
	     CAN_FIRE_RL_pmemMon1_wsiS_backpressure ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 =
	     !CAN_FIRE_RL_pmemMon1_wsiS_backpressure ||
	     pmemMon1_wsiS_sThreadBusy_dw$wget ;
  assign WILL_FIRE_RL_stbConnect_1 = CAN_FIRE_RL_stbConnect_1 ;

  // rule RL_wsiMon_pmsender_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_wsiMon_pmsender_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wsiMon_pmsender_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_pmemMon1_wsiS_ext_status_assign
  assign CAN_FIRE_RL_pmemMon1_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_pmemMon1_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_pmemMon1_wsiS_inc_tBusyCount =
	     pmemMon1_wsiS_operateD && pmemMon1_wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_pmemMon1_wsiS_backpressure ||
	      pmemMon1_wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_inc_tBusyCount =
	     CAN_FIRE_RL_pmemMon1_wsiS_inc_tBusyCount ;

  // rule RL_pmemMon1_wsiS_update_statusR
  assign CAN_FIRE_RL_pmemMon1_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_update_statusR = 1'd1 ;

  // rule RL_pmemMon1_pmHead__dreg_update
  assign CAN_FIRE_RL_pmemMon1_pmHead__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_pmHead__dreg_update = 1'd1 ;

  // rule RL_pmemMon1_pmBody__dreg_update
  assign CAN_FIRE_RL_pmemMon1_pmBody__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_pmBody__dreg_update = 1'd1 ;

  // rule RL_pmemMon1_wsi_Es_doAlways
  assign CAN_FIRE_RL_pmemMon1_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_wsi_Es_doAlways = 1'd1 ;

  // rule RL_pmemMon1_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_pmemMon1_wsiS_reqFifo_enq =
	     pmemMon1_wsiS_operateD && pmemMon1_wsiS_peerIsReady &&
	     pmemMon1_wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq =
	     CAN_FIRE_RL_pmemMon1_wsiS_reqFifo_enq ;

  // rule RL_pmemMon1_chomp_wsi
  assign CAN_FIRE_RL_pmemMon1_chomp_wsi =
	     pmemMon1_wsiS_reqFifo$EMPTY_N && pmemMon1_pmemF$FULL_N ;
  assign WILL_FIRE_RL_pmemMon1_chomp_wsi = CAN_FIRE_RL_pmemMon1_chomp_wsi ;

  // rule RL_pmemMon1_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_pmemMon1_wsiS_reqFifo__updateLevelCounter =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     CAN_FIRE_RL_pmemMon1_chomp_wsi ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_pmemMon1_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_pmemMon1_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_pmemMon1_wsiS_reqFifo_reset =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     CAN_FIRE_RL_pmemMon1_chomp_wsi ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_reset =
	     CAN_FIRE_RL_pmemMon1_wsiS_reqFifo_reset ;

  // rule RL_pmemMon1_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_pmemMon1_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_pmemMon1_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_pmemMon1_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_pmemMon1_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wci_Em_doAlways
  assign CAN_FIRE_RL_wci_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_wci_Em_doAlways = 1'd1 ;

  // rule RL_wci_reqF_deq
  assign CAN_FIRE_RL_wci_reqF_deq =
	     !wci_sThreadBusy_d && biasWorker_wci_respF_q_0[33:32] == 2'd0 ;
  assign WILL_FIRE_RL_wci_reqF_deq = CAN_FIRE_RL_wci_reqF_deq ;

  // rule RL_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_wci_wrkBusy
  assign CAN_FIRE_RL_wci_wrkBusy =
	     ((biasWorker_wci_respF_q_0[33:32] == 2'd0) ?
		wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 ||
		wci_respF$FULL_N :
		wci_respF$FULL_N) &&
	     wci_busy ;
  assign WILL_FIRE_RL_wci_wrkBusy = CAN_FIRE_RL_wci_wrkBusy ;

  // rule RL_wci_startTimer
  assign CAN_FIRE_RL_wci_startTimer = wci_reqF_c_r ;
  assign WILL_FIRE_RL_wci_startTimer = wci_reqF_c_r ;

  // rule RL_wsi_Es_doAlways
  assign CAN_FIRE_RL_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_wsi_Es_doAlways = 1'd1 ;

  // rule RL_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_wsiS_reqFifo_enq = CAN_FIRE_RL_wsiS_reqFifo_enq ;

  // rule RL_wsi_checker
  assign CAN_FIRE_RL_wsi_checker =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_wsi_checker =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // rule RL_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_wsiS_reqFifo_reset =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_wsiS_reqFifo_reset = CAN_FIRE_RL_wsiS_reqFifo_reset ;

  // rule RL_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_wciSeqFsm_actionof_l57c10
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l57c10 =
	     CAN_FIRE_RL_wciSeqFsm_action_l57c10 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l57c10 =
	     CAN_FIRE_RL_wciSeqFsm_action_l57c10 ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_wci_sfCapSet__dreg_update
  assign CAN_FIRE_RL_wci_sfCapSet__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_sfCapSet__dreg_update = 1'd1 ;

  // rule RL_biasWorker_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_biasWorker_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_biasWorker_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wciSeqFsm_action_l57c10
  assign CAN_FIRE_RL_wciSeqFsm_action_l57c10 =
	     wci_slvPresent && wciSeqFsm_state_mkFSMstate == 5'd2 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l57c10 =
	     CAN_FIRE_RL_wciSeqFsm_action_l57c10 ;

  // rule RL_wciSeqFsm_actionof_l59c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l59c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l59c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l59c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l59c5 ;

  // rule RL_wciSeqFsm_action_l59c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l59c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd3 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l59c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l59c5 ;

  // rule RL_wciSeqFsm_actionof_l60c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l60c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l60c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l60c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l60c8 ;

  // rule RL_wciSeqFsm_action_l60c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l60c8 =
	     !wci_busy && wci_respF$FULL_N &&
	     wciSeqFsm_state_mkFSMstate == 5'd4 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l60c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l60c8 ;

  // rule RL_wciSeqFsm_actionof_l61c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l61c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l61c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l61c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l61c5 ;

  // rule RL_wciSeqFsm_action_l61c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l61c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd5 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l61c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l61c5 ;

  // rule RL_wciSeqFsm_actionof_l63c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l63c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l63c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l63c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l63c5 ;

  // rule RL_wciSeqFsm_action_l63c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l63c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd6 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l63c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l63c5 ;

  // rule RL_wciSeqFsm_actionof_l64c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l64c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l64c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l64c8 ;

  // rule RL_wciSeqFsm_action_l64c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l64c8 =
	     NOT_wci_busy_5_146_AND_IF_wci_wReset_n_5_THEN__ETC___d2159 &&
	     wciSeqFsm_state_mkFSMstate == 5'd7 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l64c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l64c8 ;

  // rule RL_wciSeqFsm_actionof_l65c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l65c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l65c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l65c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l65c5 ;

  // rule RL_wciSeqFsm_action_l65c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l65c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd8 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l65c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l65c5 ;

  // rule RL_wciSeqFsm_actionof_l67c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l67c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd9 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l67c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l67c5 ;

  // rule RL_wciSeqFsm_action_l67c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l67c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l67c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l67c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l67c5 ;

  // rule RL_wciSeqFsm_actionof_l68c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l68c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l68c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l68c8 ;

  // rule RL_wciSeqFsm_action_l68c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l68c8 =
	     NOT_wci_busy_5_146_AND_IF_wci_wReset_n_5_THEN__ETC___d2159 &&
	     wciSeqFsm_state_mkFSMstate == 5'd10 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l68c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l68c8 ;

  // rule RL_wciSeqFsm_actionof_l69c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l69c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l69c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l69c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l69c5 ;

  // rule RL_wciSeqFsm_action_l69c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l69c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd11 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l69c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l69c5 ;

  // rule RL_wciSeqFsm_actionof_l71c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l71c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd12 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l71c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l71c5 ;

  // rule RL_wciSeqFsm_action_l71c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l71c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l71c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l71c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l71c5 ;

  // rule RL_wciSeqFsm_actionof_l72c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l72c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l72c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l72c8 ;

  // rule RL_wciSeqFsm_action_l72c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l72c8 =
	     NOT_wci_busy_5_146_AND_IF_wci_wReset_n_5_THEN__ETC___d2159 &&
	     wciSeqFsm_state_mkFSMstate == 5'd13 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l72c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l72c8 ;

  // rule RL_wciSeqFsm_actionof_l73c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l73c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l73c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l73c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l73c5 ;

  // rule RL_wciSeqFsm_action_l73c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l73c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd14 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l73c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l73c5 ;

  // rule RL_wciSeqFsm_actionof_l75c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l75c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l75c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l75c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l75c5 ;

  // rule RL_wciSeqFsm_action_l75c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l75c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd15 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l75c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l75c5 ;

  // rule RL_wciSeqFsm_actionof_l76c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l76c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l76c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l76c8 ;

  // rule RL_wci_reqF_incCtr
  assign CAN_FIRE_RL_wci_reqF_incCtr =
	     (wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_enqueueing$whas &&
	     !wci_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_wci_reqF_incCtr = CAN_FIRE_RL_wci_reqF_incCtr ;

  // rule RL_wci_reqF_decCtr
  assign CAN_FIRE_RL_wci_reqF_decCtr =
	     wci_reqF_dequeueing$whas && !wci_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_reqF_decCtr = CAN_FIRE_RL_wci_reqF_decCtr ;

  // rule RL_wci_reqF_both
  assign CAN_FIRE_RL_wci_reqF_both =
	     (!wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_dequeueing$whas &&
	     wci_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_reqF_both = CAN_FIRE_RL_wci_reqF_both ;

  // rule RL_wciSeqFsm_action_l76c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l76c8 =
	     NOT_wci_busy_5_146_AND_IF_wci_wReset_n_5_THEN__ETC___d2159 &&
	     wciSeqFsm_state_mkFSMstate == 5'd16 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l76c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l76c8 ;

  // rule RL_wciSeqFsm_actionof_l77c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l77c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l77c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l77c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l77c5 ;

  // rule RL_wciSeqFsm_action_l77c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l77c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd17 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l77c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l77c5 ;

  // rule RL_wciSeqFsm_actionof_l79c19
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l79c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l79c19 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l79c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l79c19 ;

  // rule RL_wciSeqFsm_action_l79c19
  assign CAN_FIRE_RL_wciSeqFsm_action_l79c19 =
	     wciSeqFsm_state_mkFSMstate == 5'd18 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l79c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l79c19 ;

  // rule RL_wciSeqFsm_actionof_l80c19
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l80c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l80c19 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l80c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l80c19 ;

  // rule RL_wciSeqFsm_action_l80c19
  assign CAN_FIRE_RL_wciSeqFsm_action_l80c19 =
	     wciSeqFsm_state_mkFSMstate == 5'd19 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l80c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l80c19 ;

  // rule RL_wciSeqFsm_actionof_l81c19
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l81c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l81c19 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l81c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l81c19 ;

  // rule RL_wciSeqFsm_action_l81c19
  assign CAN_FIRE_RL_wciSeqFsm_action_l81c19 =
	     wciSeqFsm_state_mkFSMstate == 5'd20 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l81c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l81c19 ;

  // rule RL_wciSeqFsm_actionof_l83c19
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l83c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l83c19 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l83c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l83c19 ;

  // rule RL_wciSeqFsm_action_l83c19
  assign CAN_FIRE_RL_wciSeqFsm_action_l83c19 =
	     wciSeqFsm_state_mkFSMstate == 5'd21 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l83c19 =
	     CAN_FIRE_RL_wciSeqFsm_action_l83c19 ;

  // rule RL_wciSeqFsm_actionof_l84c19
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l84c19 =
	     wciSeqFsm_state_mkFSMstate == 5'd22 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l84c19 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l84c19 ;

  // rule RL_wciSeqFsm_action_l84c19
  assign CAN_FIRE_RL_wciSeqFsm_action_l84c19 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l84c19 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l84c19 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l84c19 ;

  // rule RL_wciSeqFsm_fsm_start
  assign CAN_FIRE_RL_wciSeqFsm_fsm_start =
	     (wciSeqFsm_state_mkFSMstate == 5'd23 ||
	      wciSeqFsm_state_mkFSMstate == 5'd1 &&
	      !wciSeqFsm_state_standby) &&
	     wciSeqFsm_start_reg ;
  assign WILL_FIRE_RL_wciSeqFsm_fsm_start = CAN_FIRE_RL_wciSeqFsm_fsm_start ;

  // rule RL_wciSeqFsm_actionof_l55c3
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_1
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_1 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_1 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_2
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_2 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_2 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_3
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_3 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_3 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_4
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_4 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_4 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_5 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_5 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_6
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_6 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_6 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_7
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_7 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_7 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_8 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_8 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_9
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_9 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_9 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_10
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_10 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_10 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_11
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_11 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_11 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_12
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_12 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_12 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_13
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_13 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_13 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_14
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_14 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_14 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_15
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_15 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_15 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_16
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_16 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_16 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_18
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_18 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_18 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_17
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_17 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_17 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_19
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_19 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_19 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_20
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_20 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_20 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l55c3_21
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_21 =
	     wciSeqFsm_state_mkFSMstate == 5'd23 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_21 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_21 ;

  // rule RL_wciSeqFsm_actionof_l55c3_22
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_22 =
	     wciSeqFsm_state_mkFSMstate == 5'd1 &&
	     !CAN_FIRE_RL_wciSeqFsm_fsm_start &&
	     !wciSeqFsm_state_standby ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_22 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l55c3_22 ;

  // rule RL_wciSeqFsm_action_l55c3
  assign CAN_FIRE_RL_wciSeqFsm_action_l55c3 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_22 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_21 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l55c3 =
	     CAN_FIRE_RL_wciSeqFsm_action_l55c3 ;

  // rule RL_wciSeqFsm_actionof_l56c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l56c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l56c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l56c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l56c5 ;

  // rule RL_wciSeqFsm_action_l56c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l56c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd1 &&
	     (CAN_FIRE_RL_wciSeqFsm_fsm_start || wciSeqFsm_state_standby) ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l56c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l56c5 ;

  // rule RL_wciSeqFsm_start_reg__dreg_update
  assign CAN_FIRE_RL_wciSeqFsm_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wciSeqFsm_start_reg__dreg_update = 1'd1 ;

  // rule RL_wciSeqFsm_state_update_standby
  assign CAN_FIRE_RL_wciSeqFsm_state_update_standby =
	     wciSeqFsm_state_run_pw$whas || CAN_FIRE_RL_wciSeqFsm_fsm_start ;
  assign WILL_FIRE_RL_wciSeqFsm_state_update_standby =
	     CAN_FIRE_RL_wciSeqFsm_state_update_standby ;

  // inputs to muxes for submodule ports
  assign MUX_biasWorker_biasValue$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_biasWorker_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_biasWorker_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_complete &&
	     biasWorker_wci_illegalEdge ;
  assign MUX_biasWorker_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     (biasWorker_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      biasWorker_wci_cState != 3'd0 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      biasWorker_wci_cState != 3'd1 &&
	      biasWorker_wci_cState != 3'd3 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      biasWorker_wci_cState != 3'd2 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      biasWorker_wci_cState != 3'd3 &&
	      biasWorker_wci_cState != 3'd2 &&
	      biasWorker_wci_cState != 3'd1 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_biasWorker_wci_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wci_respF_incCtr &&
	     biasWorker_wci_respF_c_r == 2'd0 ;
  assign MUX_biasWorker_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_biasWorker_wci_respF_incCtr &&
	     biasWorker_wci_respF_c_r == 2'd1 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_reqFifo$FULL_N ;
  assign MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq &&
	     pmemMon0_wsiS_reqFifo$FULL_N ;
  assign MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq &&
	     pmemMon1_wsiS_reqFifo$FULL_N ;
  assign MUX_wci_busy$write_1__PSEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 ;
  assign MUX_wci_busy$write_1__SEL_1 =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign MUX_wci_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 ||
	      biasWorker_wci_respF_q_0[33:32] != 2'd0) ;
  assign MUX_wci_lastConfigBE$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 && wci_wReset_n ;
  assign MUX_wci_lastConfigBE$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 && wci_wReset_n ;
  assign MUX_wci_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ;
  assign MUX_wci_reqPend$write_1__PSEL_3 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 ;
  assign MUX_wci_reqPend$write_1__SEL_3 =
	     MUX_wci_reqPend$write_1__PSEL_3 && wci_wReset_n ;
  assign MUX_wci_reqPend$write_1__SEL_4 =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_respF_q_0[33:32] != 2'd0 ;
  assign MUX_wci_respF$enq_1__SEL_1 =
	     MUX_wci_busy$write_1__PSEL_1 && !wci_wReset_n ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr &&
	     wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr &&
	     wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 =
	     wsiS_reqFifo$EMPTY_N && enWsiChecker ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign MUX_biasWorker_wci_illegalEdge$write_1__VAL_2 =
	     biasWorker_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     biasWorker_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     biasWorker_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_biasWorker_wci_respF_c_r$write_1__VAL_1 =
	     biasWorker_wci_respF_c_r + 2'd1 ;
  assign MUX_biasWorker_wci_respF_c_r$write_1__VAL_2 =
	     biasWorker_wci_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_biasWorker_wci_ctl_op_complete or
	  MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wci_cfrd or
	  MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_biasWorker_wci_ctl_op_complete:
	  MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 =
	      MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wci_cfrd:
	  MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 =
	      MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wci_cfwr:
	  MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_biasWorker_wci_respF_q_0$write_1__VAL_2 =
	     (biasWorker_wci_respF_c_r == 2'd1) ?
	       MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 :
	       biasWorker_wci_respF_q_1 ;
  assign MUX_biasWorker_wci_respF_q_1$write_1__VAL_1 =
	     (biasWorker_wci_respF_c_r == 2'd2) ?
	       MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_1 =
	     biasWorker_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_biasWorker_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h19422 } ;
  assign MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     biasWorker_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     biasWorker_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     { biasWorker_wsiS_reqFifo$D_OUT[60:44],
	       x_data__h19019,
	       biasWorker_wsiS_reqFifo$D_OUT[11:0] } ;
  assign MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (biasWorker_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       biasWorker_wsiM_reqFifo_q_1 ;
  assign MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (biasWorker_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_dstUnrollCnt$write_1__VAL_2 =
	     (dstUnrollCnt == 16'd1) ?
	       wsiBurstLength__h83603 :
	       dstUnrollCnt - 16'd1 ;
  assign MUX_srcUnrollCnt$write_1__VAL_2 =
	     (srcUnrollCnt == 16'd1) ? 16'd32 : srcUnrollCnt - 16'd1 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_1 = wci_reqF_c_r + 1'd1 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_2 = wci_reqF_c_r - 1'd1 ;
  assign MUX_wci_reqF_q_0$write_1__VAL_1 =
	     wci_reqF_c_r ?
	       MUX_wci_reqF_q_0$write_1__VAL_2 :
	       60'h0000000AAAAAAAA ;
  always@(MUX_wci_lastControlOp$write_1__SEL_1 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_lastControlOp$write_1__SEL_2 or
	  MUX_wci_lastConfigBE$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastControlOp$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h4F00000AAAAAAAA;
      MUX_wci_lastConfigBE$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h5A00004AAAAAAAA;
      MUX_wci_lastControlOp$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h4F00004AAAAAAAA;
      MUX_wci_lastConfigBE$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h3F000040000AAA2;
      default: MUX_wci_reqF_q_0$write_1__VAL_2 =
		   60'hAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_respF$enq_1__VAL_2 =
	     (biasWorker_wci_respF_q_0[33:32] == 2'd0) ?
	       34'h1C0DE4203 :
	       biasWorker_wci_respF_q_0 ;
  assign MUX_wci_respTimr$write_1__VAL_2 =
	     (biasWorker_wci_respF_q_0[33:32] == 2'd0) ?
	       (wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 ?
		  x__h2553 :
		  32'd0) :
	       32'd0 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     { 3'd1,
	       srcUnrollCnt == 16'd1,
	       13'd4095,
	       x_data__h83284,
	       12'd3840 } ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_0$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_wsiMon_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     wsiMon_pmsender_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiMon_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     wsiMon_pmsender_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     { 3'd1,
	       wsiMon_pmsender_idx_203_EQ_IF_wsiMon_pmsender__ETC___d2324,
	       1'd0,
	       x_burstLength__h33854,
	       x_data__h33855,
	       12'd3840 } ;
  assign MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       wsiMon_pmsender_wsiM_reqFifo_q_1 ;
  assign MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;

  // inlined wires
  assign wci_reqF_x_wire$wget = MUX_wci_reqF_q_0$write_1__VAL_2 ;
  assign wci_reqF_x_wire$whas =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 && wci_wReset_n ;
  assign wci_wciResponse$wget = biasWorker_wci_respF_q_0 ;
  assign wci_wciResponse$whas = 1'd1 ;
  assign wci_sfCapSet_1$wget = biasWorker_wci_sFlagReg ;
  assign wci_sfCapSet_1$whas = 1'd1 ;
  assign wci_sfCapClear_1$wget = 1'b0 ;
  assign wci_sfCapClear_1$whas = 1'b0 ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_0$write_1__VAL_2 ;
  assign wsiM_reqFifo_x_wire$whas = wsiM_reqFifo_enqueueing$whas ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = testOperating ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas =
	     !biasWorker_wsiS_isReset$VAL && biasWorker_wsiS_operateD ;
  assign wsiS_wsiReq$wget =
	     { wsi_Es_mCmd_w$wget,
	       wsi_Es_mReqLast_w$whas,
	       wsi_Es_mBurstPrecise_w$whas,
	       wsi_Es_mBurstLength_w$wget,
	       biasWorker_wsiM_reqFifo_q_0[43:8],
	       wsi_Es_mReqInfo_w$wget } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = testOperating ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas =
	     !biasWorker_wsiM_isReset$VAL && biasWorker_wsiM_operateD ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas = CAN_FIRE_RL_wsiS_backpressure ;
  assign biasWorker_wci_wciReq$wget =
	     { biasWorker_wci_Es_mCmd_w$wget,
	       biasWorker_wci_Es_mAddrSpace_w$wget,
	       biasWorker_wci_Es_mByteEn_w$wget,
	       biasWorker_wci_Es_mAddr_w$wget,
	       wci_reqF_q_0[31:0] } ;
  assign biasWorker_wci_wciReq$whas = 1'd1 ;
  assign biasWorker_wci_respF_x_wire$wget =
	     MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 ;
  assign biasWorker_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_complete ||
	     WILL_FIRE_RL_biasWorker_wci_cfrd ||
	     WILL_FIRE_RL_biasWorker_wci_cfwr ;
  assign biasWorker_wci_wEdge$wget = biasWorker_wci_reqF$D_OUT[36:34] ;
  assign biasWorker_wci_wEdge$whas =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start ;
  assign biasWorker_wci_sFlagReg_1$wget = 1'b0 ;
  assign biasWorker_wci_sFlagReg_1$whas = 1'b0 ;
  assign biasWorker_wci_ctlAckReg_1$wget = 1'd1 ;
  assign biasWorker_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_biasWorker_wci_ctrl_OrE ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_IsO ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_EiI ;
  assign biasWorker_wsiS_wsiReq$wget =
	     { biasWorker_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_mReqLConnect_2,
	       CAN_FIRE_RL_mBrstPConnect,
	       biasWorker_wsi_Es_mBurstLength_w$wget,
	       wsiM_reqFifo_q_0[43:8],
	       biasWorker_wsi_Es_mReqInfo_w$wget } ;
  assign biasWorker_wsiS_wsiReq$whas = 1'd1 ;
  assign biasWorker_wsiS_operateD_1$wget = 1'd1 ;
  assign biasWorker_wsiS_operateD_1$whas =
	     CAN_FIRE_RL_biasWorker_operating_actions ;
  assign biasWorker_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign biasWorker_wsiS_peerIsReady_1$whas = CAN_FIRE_RL_mResetConnect_1 ;
  assign biasWorker_wsiS_sThreadBusy_dw$wget =
	     biasWorker_wsiS_reqFifo_countReg > 2'd1 ;
  assign biasWorker_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_biasWorker_wsiS_backpressure ;
  assign biasWorker_wsiM_reqFifo_x_wire$wget =
	     MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign biasWorker_wsiM_reqFifo_x_wire$whas =
	     CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign biasWorker_wsiM_operateD_1$wget = 1'd1 ;
  assign biasWorker_wsiM_operateD_1$whas =
	     CAN_FIRE_RL_biasWorker_operating_actions ;
  assign biasWorker_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign biasWorker_wsiM_peerIsReady_1$whas = CAN_FIRE_RL_sRstConnect_2 ;
  assign biasWorker_wci_Es_mCmd_w$wget =
	     wci_sThreadBusy_d ? 3'd0 : wci_reqF_q_0[59:57] ;
  assign biasWorker_wci_Es_mCmd_w$whas = 1'd1 ;
  assign biasWorker_wci_Es_mAddrSpace_w$wget =
	     !wci_sThreadBusy_d && wci_reqF_q_0[56] ;
  assign biasWorker_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign biasWorker_wci_Es_mAddr_w$wget =
	     wci_sThreadBusy_d ? 20'd0 : wci_reqF_q_0[51:32] ;
  assign biasWorker_wci_Es_mAddr_w$whas = 1'd1 ;
  assign biasWorker_wci_Es_mData_w$wget = wci_reqF_q_0[31:0] ;
  assign biasWorker_wci_Es_mData_w$whas = 1'd1 ;
  assign biasWorker_wci_Es_mByteEn_w$wget =
	     wci_sThreadBusy_d ? 4'd0 : wci_reqF_q_0[55:52] ;
  assign biasWorker_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mCmd_w$wget =
	     wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;
  assign biasWorker_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mBurstLength_w$wget =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;
  assign biasWorker_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mData_w$wget = wsiM_reqFifo_q_0[43:12] ;
  assign biasWorker_wsi_Es_mData_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mByteEn_w$wget = wsiM_reqFifo_q_0[11:8] ;
  assign biasWorker_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign biasWorker_wsi_Es_mReqInfo_w$wget =
	     wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;
  assign biasWorker_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign pmemMon0_wsiS_wsiReq$wget =
	     { wciMon$pmem_MCmd,
	       wciMon$pmem_MReqLast,
	       wciMon$pmem_MBurstPrecise,
	       wciMon$pmem_MBurstLength,
	       wciMon$pmem_MData,
	       wciMon$pmem_MByteEn,
	       wciMon$pmem_MReqInfo } ;
  assign pmemMon0_wsiS_wsiReq$whas = 1'd1 ;
  assign pmemMon0_wsiS_operateD_1$wget = 1'd1 ;
  assign pmemMon0_wsiS_operateD_1$whas = 1'd1 ;
  assign pmemMon0_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign pmemMon0_wsiS_peerIsReady_1$whas = wciMon$pmem_MReset_n ;
  assign pmemMon0_wsiS_sThreadBusy_dw$wget =
	     pmemMon0_wsiS_reqFifo_countReg > 2'd1 ;
  assign pmemMon0_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_pmemMon0_wsiS_backpressure ;
  assign pmemMon0_pmHead_1$wget = 1'd1 ;
  assign pmemMon0_pmHead_1$whas = CAN_FIRE_RL_pmemMon0_get_message_head_dw ;
  assign pmemMon0_pmBody_1$wget = 1'd1 ;
  assign pmemMon0_pmBody_1$whas = CAN_FIRE_RL_pmemMon0_gen_message_body_dw ;
  assign pmemMon0_wsi_Es_mCmd_w$wget = wciMon$pmem_MCmd ;
  assign pmemMon0_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign pmemMon0_wsi_Es_mBurstLength_w$wget = wciMon$pmem_MBurstLength ;
  assign pmemMon0_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign pmemMon0_wsi_Es_mData_w$wget = wciMon$pmem_MData ;
  assign pmemMon0_wsi_Es_mData_w$whas = 1'd1 ;
  assign pmemMon0_wsi_Es_mByteEn_w$wget = wciMon$pmem_MByteEn ;
  assign pmemMon0_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign pmemMon0_wsi_Es_mReqInfo_w$wget = wciMon$pmem_MReqInfo ;
  assign pmemMon0_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wsiMon_observer_r_mReqLast_1$wget = 1'b1 ;
  assign wsiMon_observer_r_mReqLast_1$whas = CAN_FIRE_RL_mReqLConnect_2 ;
  assign wsiMon_observer_r_mBurstPrecise_1$wget = 1'b1 ;
  assign wsiMon_observer_r_mBurstPrecise_1$whas = CAN_FIRE_RL_mBrstPConnect ;
  assign wsiMon_observer_r_sThreadBusy_1$wget = 1'b1 ;
  assign wsiMon_observer_r_sThreadBusy_1$whas = wsiM_sThreadBusy_pw$whas ;
  assign wsiMon_observer_r_sReset_n_1$wget = 1'b1 ;
  assign wsiMon_observer_r_sReset_n_1$whas = wsiM_peerIsReady_1$whas ;
  assign wsiMon_observer_r_mReset_n_1$wget = 1'b1 ;
  assign wsiMon_observer_r_mReset_n_1$whas = CAN_FIRE_RL_mResetConnect_1 ;
  assign wsiMon_pmsender_wsiM_reqFifo_x_wire$wget =
	     MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign wsiMon_pmsender_wsiM_reqFifo_x_wire$whas =
	     CAN_FIRE_RL_wsiMon_pmsender_serialize_message ;
  assign wsiMon_pmsender_wsiM_operateD_1$wget = 1'd1 ;
  assign wsiMon_pmsender_wsiM_operateD_1$whas = 1'd1 ;
  assign wsiMon_pmsender_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiMon_pmsender_wsiM_peerIsReady_1$whas = CAN_FIRE_RL_sRstConnect_1 ;
  assign pmemMon1_wsiS_wsiReq$wget =
	     { pmemMon1_wsi_Es_mCmd_w$wget,
	       CAN_FIRE_RL_mReqLConnect_1,
	       CAN_FIRE_RL_mBurstPConnect_1,
	       pmemMon1_wsi_Es_mBurstLength_w$wget,
	       wsiMon_pmsender_wsiM_reqFifo_q_0[43:8],
	       pmemMon1_wsi_Es_mReqInfo_w$wget } ;
  assign pmemMon1_wsiS_wsiReq$whas = 1'd1 ;
  assign pmemMon1_wsiS_operateD_1$wget = 1'd1 ;
  assign pmemMon1_wsiS_operateD_1$whas = 1'd1 ;
  assign pmemMon1_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign pmemMon1_wsiS_peerIsReady_1$whas = CAN_FIRE_RL_mRstConnect_1 ;
  assign pmemMon1_wsiS_sThreadBusy_dw$wget =
	     pmemMon1_wsiS_reqFifo_countReg > 2'd1 ;
  assign pmemMon1_wsiS_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_pmemMon1_wsiS_backpressure ;
  assign pmemMon1_pmHead_1$wget = 1'd1 ;
  assign pmemMon1_pmHead_1$whas = CAN_FIRE_RL_pmemMon1_get_message_head_dw ;
  assign pmemMon1_pmBody_1$wget = 1'd1 ;
  assign pmemMon1_pmBody_1$whas = CAN_FIRE_RL_pmemMon1_gen_message_body_dw ;
  assign pmemMon1_wsi_Es_mCmd_w$wget =
	     wsiMon_pmsender_wsiM_sThreadBusy_d ?
	       3'd0 :
	       wsiMon_pmsender_wsiM_reqFifo_q_0[60:58] ;
  assign pmemMon1_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign pmemMon1_wsi_Es_mBurstLength_w$wget =
	     wsiMon_pmsender_wsiM_sThreadBusy_d ?
	       12'd0 :
	       wsiMon_pmsender_wsiM_reqFifo_q_0[55:44] ;
  assign pmemMon1_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign pmemMon1_wsi_Es_mData_w$wget =
	     wsiMon_pmsender_wsiM_reqFifo_q_0[43:12] ;
  assign pmemMon1_wsi_Es_mData_w$whas = 1'd1 ;
  assign pmemMon1_wsi_Es_mByteEn_w$wget =
	     wsiMon_pmsender_wsiM_reqFifo_q_0[11:8] ;
  assign pmemMon1_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign pmemMon1_wsi_Es_mReqInfo_w$wget =
	     wsiMon_pmsender_wsiM_sThreadBusy_d ?
	       8'd0 :
	       wsiMon_pmsender_wsiM_reqFifo_q_0[7:0] ;
  assign pmemMon1_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wci_Em_resp_w$wget = biasWorker_wci_respF_q_0[33:32] ;
  assign wci_Em_resp_w$whas = 1'd1 ;
  assign wci_Em_respData_w$wget = biasWorker_wci_respF_q_0[31:0] ;
  assign wci_Em_respData_w$whas = 1'd1 ;
  assign wsi_Es_mCmd_w$wget =
	     biasWorker_wsiM_sThreadBusy_d ?
	       3'd0 :
	       biasWorker_wsiM_reqFifo_q_0[60:58] ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget =
	     biasWorker_wsiM_sThreadBusy_d ?
	       12'd0 :
	       biasWorker_wsiM_reqFifo_q_0[55:44] ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = biasWorker_wsiM_reqFifo_q_0[43:12] ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = biasWorker_wsiM_reqFifo_q_0[11:8] ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget =
	     biasWorker_wsiM_sThreadBusy_d ?
	       8'd0 :
	       biasWorker_wsiM_reqFifo_q_0[7:0] ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wciSeqFsm_start_reg_1$wget = 1'd1 ;
  assign wciSeqFsm_start_reg_1$whas = CAN_FIRE_RL_runWciSeq ;
  assign wciSeqFsm_start_wire$wget = 1'd1 ;
  assign wciSeqFsm_start_wire$whas = CAN_FIRE_RL_wciSeqFsm_fsm_start ;
  assign wciSeqFsm_abort$wget = 1'b0 ;
  assign wciSeqFsm_abort$whas = 1'b0 ;
  assign wci_reqF_enqueueing$whas =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign wci_reqF_dequeueing$whas =
	     WILL_FIRE_RL_wci_reqF_deq && wci_reqF_c_r ;
  assign wci_sThreadBusy_pw$whas =
	     biasWorker_wci_reqF_countReg > 2'd1 ||
	     biasWorker_wci_isReset$VAL ;
  assign wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_wsi_source && srcMesgCount == 16'd0 ;
  assign wsiM_reqFifo_dequeueing$whas = CAN_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas =
	     !CAN_FIRE_RL_biasWorker_wsiS_backpressure ||
	     biasWorker_wsiS_sThreadBusy_dw$wget ;
  assign wsiS_reqFifo_r_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetDeq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign biasWorker_wci_reqF_r_enq$whas =
	     CAN_FIRE_RL_biasWorker_wci_reqF_enq ;
  assign biasWorker_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_biasWorker_wci_cfrd ||
	     WILL_FIRE_RL_biasWorker_wci_cfwr ||
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start ;
  assign biasWorker_wci_reqF_r_clr$whas = 1'b0 ;
  assign biasWorker_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_biasWorker_wci_cfrd ||
	     WILL_FIRE_RL_biasWorker_wci_cfwr ||
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_complete ;
  assign biasWorker_wci_respF_dequeueing$whas =
	     biasWorker_wci_respF_c_r != 2'd0 ;
  assign biasWorker_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign biasWorker_wci_wci_cfwr_pw$whas =
	     biasWorker_wci_reqF$EMPTY_N && biasWorker_wci_reqF$D_OUT[56] &&
	     biasWorker_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign biasWorker_wci_wci_cfrd_pw$whas =
	     biasWorker_wci_reqF$EMPTY_N && biasWorker_wci_reqF$D_OUT[56] &&
	     biasWorker_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign biasWorker_wci_wci_ctrl_pw$whas =
	     biasWorker_wci_reqF$EMPTY_N && !biasWorker_wci_reqF$D_OUT[56] &&
	     biasWorker_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign biasWorker_wsiS_reqFifo_r_enq$whas =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiS_reqFifo_r_deq$whas =
	     CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign biasWorker_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign biasWorker_wsiS_reqFifo_doResetEnq$whas =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiS_reqFifo_doResetDeq$whas =
	     CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign biasWorker_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign biasWorker_wsiM_reqFifo_enqueueing$whas =
	     CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign biasWorker_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_biasWorker_wsiM_reqFifo_deq ;
  assign biasWorker_wsiM_sThreadBusy_pw$whas = CAN_FIRE_RL_stbConnect_4 ;
  assign biasWorker_wsi_Es_mReqLast_w$whas = CAN_FIRE_RL_mReqLConnect_2 ;
  assign biasWorker_wsi_Es_mBurstPrecise_w$whas = CAN_FIRE_RL_mBrstPConnect ;
  assign biasWorker_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign pmemMon0_wsiS_reqFifo_r_enq$whas =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMon0_wsiS_reqFifo_r_deq$whas = CAN_FIRE_RL_pmemMon0_chomp_wsi ;
  assign pmemMon0_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign pmemMon0_wsiS_reqFifo_doResetEnq$whas =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMon0_wsiS_reqFifo_doResetDeq$whas =
	     CAN_FIRE_RL_pmemMon0_chomp_wsi ;
  assign pmemMon0_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign pmemMon0_wsi_Es_mReqLast_w$whas = wciMon$pmem_MReqLast ;
  assign pmemMon0_wsi_Es_mBurstPrecise_w$whas = wciMon$pmem_MBurstPrecise ;
  assign pmemMon0_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiMon_pmsender_wsiM_reqFifo_enqueueing$whas =
	     CAN_FIRE_RL_wsiMon_pmsender_serialize_message ;
  assign wsiMon_pmsender_wsiM_reqFifo_dequeueing$whas =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq ;
  assign wsiMon_pmsender_wsiM_sThreadBusy_pw$whas = CAN_FIRE_RL_stbConnect_1 ;
  assign pmemMon1_wsiS_reqFifo_r_enq$whas =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMon1_wsiS_reqFifo_r_deq$whas = CAN_FIRE_RL_pmemMon1_chomp_wsi ;
  assign pmemMon1_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign pmemMon1_wsiS_reqFifo_doResetEnq$whas =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMon1_wsiS_reqFifo_doResetDeq$whas =
	     CAN_FIRE_RL_pmemMon1_chomp_wsi ;
  assign pmemMon1_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign pmemMon1_wsi_Es_mReqLast_w$whas = CAN_FIRE_RL_mReqLConnect_1 ;
  assign pmemMon1_wsi_Es_mBurstPrecise_w$whas = CAN_FIRE_RL_mBurstPConnect_1 ;
  assign pmemMon1_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsi_Es_mReqLast_w$whas =
	     !biasWorker_wsiM_sThreadBusy_d &&
	     biasWorker_wsiM_reqFifo_q_0[57] ;
  assign wsi_Es_mBurstPrecise_w$whas =
	     !biasWorker_wsiM_sThreadBusy_d &&
	     biasWorker_wsiM_reqFifo_q_0[56] ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wciSeqFsm_state_run_pw$whas =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l84c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l83c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l81c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l80c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l79c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l77c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l75c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l73c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l71c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l69c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l67c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l65c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l63c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l61c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l60c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l59c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l57c10 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l56c5 ;
  assign wciSeqFsm_state_start_pw$whas = CAN_FIRE_RL_wciSeqFsm_fsm_start ;
  assign wciSeqFsm_pw_list$whas = 1'b0 ;
  assign wciSeqFsm_pw_list_1$whas = CAN_FIRE_RL_wciSeqFsm_action_l55c3 ;
  assign wciSeqFsm_pw_list_2$whas = CAN_FIRE_RL_wciSeqFsm_action_l56c5 ;
  assign wciSeqFsm_pw_list_3$whas = CAN_FIRE_RL_wciSeqFsm_action_l57c10 ;
  assign wciSeqFsm_pw_list_4$whas = CAN_FIRE_RL_wciSeqFsm_action_l59c5 ;
  assign wciSeqFsm_pw_list_5$whas = CAN_FIRE_RL_wciSeqFsm_action_l60c8 ;
  assign wciSeqFsm_pw_list_6$whas = CAN_FIRE_RL_wciSeqFsm_action_l61c5 ;
  assign wciSeqFsm_pw_list_7$whas = CAN_FIRE_RL_wciSeqFsm_action_l63c5 ;
  assign wciSeqFsm_pw_list_8$whas = CAN_FIRE_RL_wciSeqFsm_action_l64c8 ;
  assign wciSeqFsm_pw_list_9$whas = CAN_FIRE_RL_wciSeqFsm_action_l65c5 ;
  assign wciSeqFsm_pw_list_10$whas = CAN_FIRE_RL_wciSeqFsm_actionof_l67c5 ;
  assign wciSeqFsm_pw_list_11$whas = CAN_FIRE_RL_wciSeqFsm_action_l68c8 ;
  assign wciSeqFsm_pw_list_12$whas = CAN_FIRE_RL_wciSeqFsm_action_l69c5 ;
  assign wciSeqFsm_pw_list_13$whas = CAN_FIRE_RL_wciSeqFsm_actionof_l71c5 ;
  assign wciSeqFsm_pw_list_14$whas = CAN_FIRE_RL_wciSeqFsm_action_l72c8 ;
  assign wciSeqFsm_pw_list_15$whas = CAN_FIRE_RL_wciSeqFsm_action_l73c5 ;
  assign wciSeqFsm_pw_list_16$whas = CAN_FIRE_RL_wciSeqFsm_action_l75c5 ;
  assign wciSeqFsm_pw_list_17$whas = CAN_FIRE_RL_wciSeqFsm_action_l76c8 ;
  assign wciSeqFsm_pw_list_18$whas = CAN_FIRE_RL_wciSeqFsm_action_l77c5 ;
  assign wciSeqFsm_pw_list_19$whas = CAN_FIRE_RL_wciSeqFsm_action_l79c19 ;
  assign wciSeqFsm_pw_list_20$whas = CAN_FIRE_RL_wciSeqFsm_action_l80c19 ;
  assign wciSeqFsm_pw_list_21$whas = CAN_FIRE_RL_wciSeqFsm_action_l81c19 ;
  assign wciSeqFsm_pw_list_22$whas = CAN_FIRE_RL_wciSeqFsm_action_l83c19 ;
  assign wciSeqFsm_pw_list_23$whas = CAN_FIRE_RL_wciSeqFsm_actionof_l84c19 ;
  assign wciSeqFsm_pw_list_24$whas = 1'b0 ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;
  assign biasWorker_wsiS_extStatusW$wget =
	     { biasWorker_wsiS_pMesgCount,
	       biasWorker_wsiS_iMesgCount,
	       biasWorker_wsiS_tBusyCount } ;
  assign biasWorker_wsiM_extStatusW$wget =
	     { biasWorker_wsiM_pMesgCount,
	       biasWorker_wsiM_iMesgCount,
	       biasWorker_wsiM_tBusyCount } ;
  assign pmemMon0_wsiS_extStatusW$wget =
	     { pmemMon0_wsiS_pMesgCount,
	       pmemMon0_wsiS_iMesgCount,
	       pmemMon0_wsiS_tBusyCount } ;
  assign wsiMon_pmsender_wsiM_extStatusW$wget =
	     { wsiMon_pmsender_wsiM_pMesgCount,
	       wsiMon_pmsender_wsiM_iMesgCount,
	       wsiMon_pmsender_wsiM_tBusyCount } ;
  assign pmemMon1_wsiS_extStatusW$wget =
	     { pmemMon1_wsiS_pMesgCount,
	       pmemMon1_wsiS_iMesgCount,
	       pmemMon1_wsiS_tBusyCount } ;

  // register biasWorker_biasValue
  assign biasWorker_biasValue$D_IN =
	     MUX_biasWorker_biasValue$write_1__SEL_1 ?
	       biasWorker_wci_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign biasWorker_biasValue$EN =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_EiI ;

  // register biasWorker_controlReg
  assign biasWorker_controlReg$D_IN =
	     MUX_biasWorker_controlReg$write_1__SEL_1 ?
	       biasWorker_wci_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign biasWorker_controlReg$EN =
	     WILL_FIRE_RL_biasWorker_wci_cfwr &&
	     biasWorker_wci_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_biasWorker_wci_ctrl_EiI ;

  // register biasWorker_wci_cEdge
  assign biasWorker_wci_cEdge$D_IN = biasWorker_wci_reqF$D_OUT[36:34] ;
  assign biasWorker_wci_cEdge$EN = WILL_FIRE_RL_biasWorker_wci_ctl_op_start ;

  // register biasWorker_wci_cState
  assign biasWorker_wci_cState$D_IN = biasWorker_wci_nState ;
  assign biasWorker_wci_cState$EN =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_complete &&
	     !biasWorker_wci_illegalEdge ;

  // register biasWorker_wci_ctlAckReg
  assign biasWorker_wci_ctlAckReg$D_IN = biasWorker_wci_ctlAckReg_1$whas ;
  assign biasWorker_wci_ctlAckReg$EN = 1'd1 ;

  // register biasWorker_wci_ctlOpActive
  assign biasWorker_wci_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_biasWorker_wci_ctl_op_complete ;
  assign biasWorker_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_complete ||
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start ;

  // register biasWorker_wci_illegalEdge
  assign biasWorker_wci_illegalEdge$D_IN =
	     !MUX_biasWorker_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_biasWorker_wci_illegalEdge$write_1__VAL_2 ;
  assign biasWorker_wci_illegalEdge$EN =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_complete &&
	     biasWorker_wci_illegalEdge ||
	     MUX_biasWorker_wci_illegalEdge$write_1__SEL_2 ;

  // register biasWorker_wci_nState
  always@(biasWorker_wci_reqF$D_OUT)
  begin
    case (biasWorker_wci_reqF$D_OUT[36:34])
      3'd0: biasWorker_wci_nState$D_IN = 3'd1;
      3'd1: biasWorker_wci_nState$D_IN = 3'd2;
      3'd2: biasWorker_wci_nState$D_IN = 3'd3;
      default: biasWorker_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign biasWorker_wci_nState$EN =
	     WILL_FIRE_RL_biasWorker_wci_ctl_op_start &&
	     (biasWorker_wci_reqF$D_OUT[36:34] == 3'd0 &&
	      biasWorker_wci_cState == 3'd0 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (biasWorker_wci_cState == 3'd1 ||
	       biasWorker_wci_cState == 3'd3) ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd2 &&
	      biasWorker_wci_cState == 3'd2 ||
	      biasWorker_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (biasWorker_wci_cState == 3'd3 ||
	       biasWorker_wci_cState == 3'd2 ||
	       biasWorker_wci_cState == 3'd1)) ;

  // register biasWorker_wci_reqF_countReg
  assign biasWorker_wci_reqF_countReg$D_IN =
	     (biasWorker_wci_wciReq$wget[59:57] != 3'd0) ?
	       biasWorker_wci_reqF_countReg + 2'd1 :
	       biasWorker_wci_reqF_countReg - 2'd1 ;
  assign biasWorker_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_biasWorker_wci_reqF__updateLevelCounter ;

  // register biasWorker_wci_respF_c_r
  assign biasWorker_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_biasWorker_wci_respF_incCtr ?
	       MUX_biasWorker_wci_respF_c_r$write_1__VAL_1 :
	       MUX_biasWorker_wci_respF_c_r$write_1__VAL_2 ;
  assign biasWorker_wci_respF_c_r$EN =
	     WILL_FIRE_RL_biasWorker_wci_respF_incCtr ||
	     WILL_FIRE_RL_biasWorker_wci_respF_decCtr ;

  // register biasWorker_wci_respF_q_0
  always@(MUX_biasWorker_wci_respF_q_0$write_1__SEL_1 or
	  MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wci_respF_both or
	  MUX_biasWorker_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wci_respF_decCtr or
	  biasWorker_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_biasWorker_wci_respF_q_0$write_1__SEL_1:
	  biasWorker_wci_respF_q_0$D_IN =
	      MUX_biasWorker_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wci_respF_both:
	  biasWorker_wci_respF_q_0$D_IN =
	      MUX_biasWorker_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wci_respF_decCtr:
	  biasWorker_wci_respF_q_0$D_IN = biasWorker_wci_respF_q_1;
      default: biasWorker_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wci_respF_q_0$EN =
	     WILL_FIRE_RL_biasWorker_wci_respF_incCtr &&
	     biasWorker_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_biasWorker_wci_respF_both ||
	     WILL_FIRE_RL_biasWorker_wci_respF_decCtr ;

  // register biasWorker_wci_respF_q_1
  always@(WILL_FIRE_RL_biasWorker_wci_respF_both or
	  MUX_biasWorker_wci_respF_q_1$write_1__VAL_1 or
	  MUX_biasWorker_wci_respF_q_1$write_1__SEL_2 or
	  MUX_biasWorker_wci_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_biasWorker_wci_respF_both:
	  biasWorker_wci_respF_q_1$D_IN =
	      MUX_biasWorker_wci_respF_q_1$write_1__VAL_1;
      MUX_biasWorker_wci_respF_q_1$write_1__SEL_2:
	  biasWorker_wci_respF_q_1$D_IN =
	      MUX_biasWorker_wci_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wci_respF_decCtr:
	  biasWorker_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: biasWorker_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wci_respF_q_1$EN =
	     WILL_FIRE_RL_biasWorker_wci_respF_both ||
	     WILL_FIRE_RL_biasWorker_wci_respF_incCtr &&
	     biasWorker_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_biasWorker_wci_respF_decCtr ;

  // register biasWorker_wci_sFlagReg
  assign biasWorker_wci_sFlagReg$D_IN = 1'b0 ;
  assign biasWorker_wci_sFlagReg$EN = 1'd1 ;

  // register biasWorker_wci_sThreadBusy_d
  assign biasWorker_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign biasWorker_wci_sThreadBusy_d$EN = 1'd1 ;

  // register biasWorker_wsiM_burstKind
  assign biasWorker_wsiM_burstKind$D_IN =
	     (biasWorker_wsiM_burstKind == 2'd0) ?
	       (biasWorker_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign biasWorker_wsiM_burstKind$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (biasWorker_wsiM_burstKind == 2'd0 ||
	      (biasWorker_wsiM_burstKind == 2'd1 ||
	       biasWorker_wsiM_burstKind == 2'd2) &&
	      biasWorker_wsiM_reqFifo_q_0[57]) ;

  // register biasWorker_wsiM_errorSticky
  assign biasWorker_wsiM_errorSticky$D_IN = 1'b0 ;
  assign biasWorker_wsiM_errorSticky$EN = 1'b0 ;

  // register biasWorker_wsiM_iMesgCount
  assign biasWorker_wsiM_iMesgCount$D_IN =
	     biasWorker_wsiM_iMesgCount + 32'd1 ;
  assign biasWorker_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     biasWorker_wsiM_burstKind == 2'd2 &&
	     biasWorker_wsiM_reqFifo_q_0[57] ;

  // register biasWorker_wsiM_operateD
  assign biasWorker_wsiM_operateD$D_IN =
	     CAN_FIRE_RL_biasWorker_operating_actions ;
  assign biasWorker_wsiM_operateD$EN = 1'd1 ;

  // register biasWorker_wsiM_pMesgCount
  assign biasWorker_wsiM_pMesgCount$D_IN =
	     biasWorker_wsiM_pMesgCount + 32'd1 ;
  assign biasWorker_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     biasWorker_wsiM_burstKind == 2'd1 &&
	     biasWorker_wsiM_reqFifo_q_0[57] ;

  // register biasWorker_wsiM_peerIsReady
  assign biasWorker_wsiM_peerIsReady$D_IN = CAN_FIRE_RL_sRstConnect_2 ;
  assign biasWorker_wsiM_peerIsReady$EN = 1'd1 ;

  // register biasWorker_wsiM_reqFifo_c_r
  assign biasWorker_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr ?
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_biasWorker_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign biasWorker_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr ;

  // register biasWorker_wsiM_reqFifo_q_0
  always@(MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both or
	  MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr or
	  biasWorker_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__SEL_1:
	  biasWorker_wsiM_reqFifo_q_0$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both:
	  biasWorker_wsiM_reqFifo_q_0$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr:
	  biasWorker_wsiM_reqFifo_q_0$D_IN = biasWorker_wsiM_reqFifo_q_1;
      default: biasWorker_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr ;

  // register biasWorker_wsiM_reqFifo_q_1
  always@(MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both or
	  MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_biasWorker_wsiM_reqFifo_q_1$write_1__SEL_1:
	  biasWorker_wsiM_reqFifo_q_1$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both:
	  biasWorker_wsiM_reqFifo_q_1$D_IN =
	      MUX_biasWorker_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr:
	  biasWorker_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: biasWorker_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign biasWorker_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_incCtr &&
	     biasWorker_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_decCtr ;

  // register biasWorker_wsiM_sThreadBusy_d
  assign biasWorker_wsiM_sThreadBusy_d$D_IN = CAN_FIRE_RL_stbConnect_4 ;
  assign biasWorker_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register biasWorker_wsiM_statusR
  assign biasWorker_wsiM_statusR$D_IN =
	     { biasWorker_wsiM_isReset$VAL,
	       !biasWorker_wsiM_peerIsReady,
	       !biasWorker_wsiM_operateD,
	       biasWorker_wsiM_errorSticky,
	       biasWorker_wsiM_burstKind != 2'd0,
	       biasWorker_wsiM_sThreadBusy_d,
	       1'd0,
	       biasWorker_wsiM_trafficSticky } ;
  assign biasWorker_wsiM_statusR$EN = 1'd1 ;

  // register biasWorker_wsiM_tBusyCount
  assign biasWorker_wsiM_tBusyCount$D_IN =
	     biasWorker_wsiM_tBusyCount + 32'd1 ;
  assign biasWorker_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_biasWorker_wsiM_inc_tBusyCount ;

  // register biasWorker_wsiM_trafficSticky
  assign biasWorker_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign biasWorker_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_biasWorker_wsiM_reqFifo_deq &&
	     biasWorker_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register biasWorker_wsiS_burstKind
  assign biasWorker_wsiS_burstKind$D_IN =
	     (biasWorker_wsiS_burstKind == 2'd0) ?
	       (biasWorker_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign biasWorker_wsiS_burstKind$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_reqFifo_notFull__69_AND_biasWo_ETC___d491 ;

  // register biasWorker_wsiS_errorSticky
  assign biasWorker_wsiS_errorSticky$D_IN = 1'd1 ;
  assign biasWorker_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     !biasWorker_wsiS_reqFifo$FULL_N ;

  // register biasWorker_wsiS_iMesgCount
  assign biasWorker_wsiS_iMesgCount$D_IN =
	     biasWorker_wsiS_iMesgCount + 32'd1 ;
  assign biasWorker_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_reqFifo$FULL_N &&
	     biasWorker_wsiS_burstKind == 2'd2 &&
	     biasWorker_wsiS_wsiReq$wget[57] ;

  // register biasWorker_wsiS_mesgWordLength
  assign biasWorker_wsiS_mesgWordLength$D_IN = biasWorker_wsiS_wordCount ;
  assign biasWorker_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_reqFifo$FULL_N &&
	     biasWorker_wsiS_wsiReq$wget[57] ;

  // register biasWorker_wsiS_operateD
  assign biasWorker_wsiS_operateD$D_IN =
	     CAN_FIRE_RL_biasWorker_operating_actions ;
  assign biasWorker_wsiS_operateD$EN = 1'd1 ;

  // register biasWorker_wsiS_pMesgCount
  assign biasWorker_wsiS_pMesgCount$D_IN =
	     biasWorker_wsiS_pMesgCount + 32'd1 ;
  assign biasWorker_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_reqFifo$FULL_N &&
	     biasWorker_wsiS_burstKind == 2'd1 &&
	     biasWorker_wsiS_wsiReq$wget[57] ;

  // register biasWorker_wsiS_peerIsReady
  assign biasWorker_wsiS_peerIsReady$D_IN = CAN_FIRE_RL_mResetConnect_1 ;
  assign biasWorker_wsiS_peerIsReady$EN = 1'd1 ;

  // register biasWorker_wsiS_reqFifo_countReg
  assign biasWorker_wsiS_reqFifo_countReg$D_IN =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       biasWorker_wsiS_reqFifo_countReg + 2'd1 :
	       biasWorker_wsiS_reqFifo_countReg - 2'd1 ;
  assign biasWorker_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_biasWorker_wsiS_reqFifo__updateLevelCounter ;

  // register biasWorker_wsiS_reqFifo_levelsValid
  assign biasWorker_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset ;
  assign biasWorker_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_enq &&
	     biasWorker_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_biasWorker_doMessagePush ||
	     WILL_FIRE_RL_biasWorker_wsiS_reqFifo_reset ;

  // register biasWorker_wsiS_statusR
  assign biasWorker_wsiS_statusR$D_IN =
	     { biasWorker_wsiS_isReset$VAL,
	       !biasWorker_wsiS_peerIsReady,
	       !biasWorker_wsiS_operateD,
	       biasWorker_wsiS_errorSticky,
	       biasWorker_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_biasWorker_wsiS_backpressure ||
	       biasWorker_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       biasWorker_wsiS_trafficSticky } ;
  assign biasWorker_wsiS_statusR$EN = 1'd1 ;

  // register biasWorker_wsiS_tBusyCount
  assign biasWorker_wsiS_tBusyCount$D_IN =
	     biasWorker_wsiS_tBusyCount + 32'd1 ;
  assign biasWorker_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_biasWorker_wsiS_inc_tBusyCount ;

  // register biasWorker_wsiS_trafficSticky
  assign biasWorker_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign biasWorker_wsiS_trafficSticky$EN =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register biasWorker_wsiS_wordCount
  assign biasWorker_wsiS_wordCount$D_IN =
	     biasWorker_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       biasWorker_wsiS_wordCount + 12'd1 ;
  assign biasWorker_wsiS_wordCount$EN =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register dstDataOut
  assign dstDataOut$D_IN = dstDataOut + 32'd2 ;
  assign dstDataOut$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // register dstMesgCount
  assign dstMesgCount$D_IN = dstMesgCount + 16'd1 ;
  assign dstMesgCount$EN = WILL_FIRE_RL_wsi_checker && dstUnrollCnt == 16'd1 ;

  // register dstUnrollCnt
  assign dstUnrollCnt$D_IN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l80c19 ?
	       16'd32 :
	       MUX_dstUnrollCnt$write_1__VAL_2 ;
  assign dstUnrollCnt$EN =
	     WILL_FIRE_RL_wsi_checker ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l80c19 ;

  // register enWsiChecker
  assign enWsiChecker$D_IN = 1'd1 ;
  assign enWsiChecker$EN = CAN_FIRE_RL_wciSeqFsm_action_l81c19 ;

  // register enWsiSource
  assign enWsiSource$D_IN = 1'd1 ;
  assign enWsiSource$EN = CAN_FIRE_RL_wciSeqFsm_actionof_l84c19 ;

  // register pmemMon0_eventCount
  assign pmemMon0_eventCount$D_IN = pmemMon0_eventCount + 32'd1 ;
  assign pmemMon0_eventCount$EN =
	     _dor1pmemMon0_eventCount$EN_write && pmemMon0_pmemF$D_OUT[33] ;

  // register pmemMon0_msgActive
  assign pmemMon0_msgActive$D_IN = !pmemMon0_wsiS_reqFifo$D_OUT[57] ;
  assign pmemMon0_msgActive$EN = CAN_FIRE_RL_pmemMon0_chomp_wsi ;

  // register pmemMon0_pmBody
  assign pmemMon0_pmBody$D_IN = CAN_FIRE_RL_pmemMon0_gen_message_body_dw ;
  assign pmemMon0_pmBody$EN = 1'd1 ;

  // register pmemMon0_pmGrab
  assign pmemMon0_pmGrab$D_IN = z__h25756 ^ pmemMon0_pmh[31] ;
  assign pmemMon0_pmGrab$EN = CAN_FIRE_RL_pmemMon0_get_message_head_dw ;

  // register pmemMon0_pmHead
  assign pmemMon0_pmHead$D_IN = CAN_FIRE_RL_pmemMon0_get_message_head_dw ;
  assign pmemMon0_pmHead$EN = 1'd1 ;

  // register pmemMon0_pmh
  assign pmemMon0_pmh$D_IN =
	     { pmemMon0_pmemF$D_OUT[31:24],
	       CASE_pmemMon0_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q6,
	       pmemMon0_pmemF$D_OUT[15:0] } ;
  assign pmemMon0_pmh$EN = CAN_FIRE_RL_pmemMon0_get_message_head_dw ;

  // register pmemMon0_wsiS_burstKind
  assign pmemMon0_wsiS_burstKind$D_IN =
	     (pmemMon0_wsiS_burstKind == 2'd0) ?
	       (pmemMon0_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign pmemMon0_wsiS_burstKind$EN =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq &&
	     pmemMon0_wsiS_reqFifo_notFull__28_AND_pmemMon0_ETC___d750 ;

  // register pmemMon0_wsiS_errorSticky
  assign pmemMon0_wsiS_errorSticky$D_IN = 1'd1 ;
  assign pmemMon0_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq &&
	     !pmemMon0_wsiS_reqFifo$FULL_N ;

  // register pmemMon0_wsiS_iMesgCount
  assign pmemMon0_wsiS_iMesgCount$D_IN = pmemMon0_wsiS_iMesgCount + 32'd1 ;
  assign pmemMon0_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq &&
	     pmemMon0_wsiS_reqFifo$FULL_N &&
	     pmemMon0_wsiS_burstKind == 2'd2 &&
	     pmemMon0_wsiS_wsiReq$wget[57] ;

  // register pmemMon0_wsiS_mesgWordLength
  assign pmemMon0_wsiS_mesgWordLength$D_IN = pmemMon0_wsiS_wordCount ;
  assign pmemMon0_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq &&
	     pmemMon0_wsiS_reqFifo$FULL_N &&
	     pmemMon0_wsiS_wsiReq$wget[57] ;

  // register pmemMon0_wsiS_operateD
  assign pmemMon0_wsiS_operateD$D_IN = 1'b1 ;
  assign pmemMon0_wsiS_operateD$EN = 1'd1 ;

  // register pmemMon0_wsiS_pMesgCount
  assign pmemMon0_wsiS_pMesgCount$D_IN = pmemMon0_wsiS_pMesgCount + 32'd1 ;
  assign pmemMon0_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq &&
	     pmemMon0_wsiS_reqFifo$FULL_N &&
	     pmemMon0_wsiS_burstKind == 2'd1 &&
	     pmemMon0_wsiS_wsiReq$wget[57] ;

  // register pmemMon0_wsiS_peerIsReady
  assign pmemMon0_wsiS_peerIsReady$D_IN = wciMon$pmem_MReset_n ;
  assign pmemMon0_wsiS_peerIsReady$EN = 1'd1 ;

  // register pmemMon0_wsiS_reqFifo_countReg
  assign pmemMon0_wsiS_reqFifo_countReg$D_IN =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       pmemMon0_wsiS_reqFifo_countReg + 2'd1 :
	       pmemMon0_wsiS_reqFifo_countReg - 2'd1 ;
  assign pmemMon0_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_pmemMon0_wsiS_reqFifo__updateLevelCounter ;

  // register pmemMon0_wsiS_reqFifo_levelsValid
  assign pmemMon0_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_reset ;
  assign pmemMon0_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_enq &&
	     pmemMon0_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_pmemMon0_chomp_wsi ||
	     WILL_FIRE_RL_pmemMon0_wsiS_reqFifo_reset ;

  // register pmemMon0_wsiS_statusR
  assign pmemMon0_wsiS_statusR$D_IN =
	     { pmemMon0_wsiS_isReset$VAL,
	       !pmemMon0_wsiS_peerIsReady,
	       !pmemMon0_wsiS_operateD,
	       pmemMon0_wsiS_errorSticky,
	       pmemMon0_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_pmemMon0_wsiS_backpressure ||
	       pmemMon0_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       pmemMon0_wsiS_trafficSticky } ;
  assign pmemMon0_wsiS_statusR$EN = 1'd1 ;

  // register pmemMon0_wsiS_tBusyCount
  assign pmemMon0_wsiS_tBusyCount$D_IN = pmemMon0_wsiS_tBusyCount + 32'd1 ;
  assign pmemMon0_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_pmemMon0_wsiS_inc_tBusyCount ;

  // register pmemMon0_wsiS_trafficSticky
  assign pmemMon0_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign pmemMon0_wsiS_trafficSticky$EN =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register pmemMon0_wsiS_wordCount
  assign pmemMon0_wsiS_wordCount$D_IN =
	     pmemMon0_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       pmemMon0_wsiS_wordCount + 12'd1 ;
  assign pmemMon0_wsiS_wordCount$EN =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register pmemMon1_eventCount
  assign pmemMon1_eventCount$D_IN = pmemMon1_eventCount + 32'd1 ;
  assign pmemMon1_eventCount$EN =
	     _dor1pmemMon1_eventCount$EN_write && pmemMon1_pmemF$D_OUT[33] ;

  // register pmemMon1_msgActive
  assign pmemMon1_msgActive$D_IN = !pmemMon1_wsiS_reqFifo$D_OUT[57] ;
  assign pmemMon1_msgActive$EN = CAN_FIRE_RL_pmemMon1_chomp_wsi ;

  // register pmemMon1_pmBody
  assign pmemMon1_pmBody$D_IN = CAN_FIRE_RL_pmemMon1_gen_message_body_dw ;
  assign pmemMon1_pmBody$EN = 1'd1 ;

  // register pmemMon1_pmGrab
  assign pmemMon1_pmGrab$D_IN = z__h40276 ^ pmemMon1_pmh[31] ;
  assign pmemMon1_pmGrab$EN = CAN_FIRE_RL_pmemMon1_get_message_head_dw ;

  // register pmemMon1_pmHead
  assign pmemMon1_pmHead$D_IN = CAN_FIRE_RL_pmemMon1_get_message_head_dw ;
  assign pmemMon1_pmHead$EN = 1'd1 ;

  // register pmemMon1_pmh
  assign pmemMon1_pmh$D_IN =
	     { pmemMon1_pmemF$D_OUT[31:24],
	       CASE_pmemMon1_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q9,
	       pmemMon1_pmemF$D_OUT[15:0] } ;
  assign pmemMon1_pmh$EN = CAN_FIRE_RL_pmemMon1_get_message_head_dw ;

  // register pmemMon1_wsiS_burstKind
  assign pmemMon1_wsiS_burstKind$D_IN =
	     (pmemMon1_wsiS_burstKind == 2'd0) ?
	       (pmemMon1_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign pmemMon1_wsiS_burstKind$EN =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq &&
	     pmemMon1_wsiS_reqFifo_notFull__616_AND_pmemMon_ETC___d1638 ;

  // register pmemMon1_wsiS_errorSticky
  assign pmemMon1_wsiS_errorSticky$D_IN = 1'd1 ;
  assign pmemMon1_wsiS_errorSticky$EN =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq &&
	     !pmemMon1_wsiS_reqFifo$FULL_N ;

  // register pmemMon1_wsiS_iMesgCount
  assign pmemMon1_wsiS_iMesgCount$D_IN = pmemMon1_wsiS_iMesgCount + 32'd1 ;
  assign pmemMon1_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq &&
	     pmemMon1_wsiS_reqFifo$FULL_N &&
	     pmemMon1_wsiS_burstKind == 2'd2 &&
	     pmemMon1_wsiS_wsiReq$wget[57] ;

  // register pmemMon1_wsiS_mesgWordLength
  assign pmemMon1_wsiS_mesgWordLength$D_IN = pmemMon1_wsiS_wordCount ;
  assign pmemMon1_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq &&
	     pmemMon1_wsiS_reqFifo$FULL_N &&
	     pmemMon1_wsiS_wsiReq$wget[57] ;

  // register pmemMon1_wsiS_operateD
  assign pmemMon1_wsiS_operateD$D_IN = 1'b1 ;
  assign pmemMon1_wsiS_operateD$EN = 1'd1 ;

  // register pmemMon1_wsiS_pMesgCount
  assign pmemMon1_wsiS_pMesgCount$D_IN = pmemMon1_wsiS_pMesgCount + 32'd1 ;
  assign pmemMon1_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq &&
	     pmemMon1_wsiS_reqFifo$FULL_N &&
	     pmemMon1_wsiS_burstKind == 2'd1 &&
	     pmemMon1_wsiS_wsiReq$wget[57] ;

  // register pmemMon1_wsiS_peerIsReady
  assign pmemMon1_wsiS_peerIsReady$D_IN = CAN_FIRE_RL_mRstConnect_1 ;
  assign pmemMon1_wsiS_peerIsReady$EN = 1'd1 ;

  // register pmemMon1_wsiS_reqFifo_countReg
  assign pmemMon1_wsiS_reqFifo_countReg$D_IN =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       pmemMon1_wsiS_reqFifo_countReg + 2'd1 :
	       pmemMon1_wsiS_reqFifo_countReg - 2'd1 ;
  assign pmemMon1_wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_pmemMon1_wsiS_reqFifo__updateLevelCounter ;

  // register pmemMon1_wsiS_reqFifo_levelsValid
  assign pmemMon1_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_reset ;
  assign pmemMon1_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_enq &&
	     pmemMon1_wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_pmemMon1_chomp_wsi ||
	     WILL_FIRE_RL_pmemMon1_wsiS_reqFifo_reset ;

  // register pmemMon1_wsiS_statusR
  assign pmemMon1_wsiS_statusR$D_IN =
	     { pmemMon1_wsiS_isReset$VAL,
	       !pmemMon1_wsiS_peerIsReady,
	       !pmemMon1_wsiS_operateD,
	       pmemMon1_wsiS_errorSticky,
	       pmemMon1_wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_pmemMon1_wsiS_backpressure ||
	       pmemMon1_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       pmemMon1_wsiS_trafficSticky } ;
  assign pmemMon1_wsiS_statusR$EN = 1'd1 ;

  // register pmemMon1_wsiS_tBusyCount
  assign pmemMon1_wsiS_tBusyCount$D_IN = pmemMon1_wsiS_tBusyCount + 32'd1 ;
  assign pmemMon1_wsiS_tBusyCount$EN =
	     CAN_FIRE_RL_pmemMon1_wsiS_inc_tBusyCount ;

  // register pmemMon1_wsiS_trafficSticky
  assign pmemMon1_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign pmemMon1_wsiS_trafficSticky$EN =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register pmemMon1_wsiS_wordCount
  assign pmemMon1_wsiS_wordCount$D_IN =
	     pmemMon1_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       pmemMon1_wsiS_wordCount + 12'd1 ;
  assign pmemMon1_wsiS_wordCount$EN =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register simCycle
  assign simCycle$D_IN = simCycle + 16'd1 ;
  assign simCycle$EN = 1'd1 ;

  // register srcDataOut
  assign srcDataOut$D_IN = srcDataOut + 32'd1 ;
  assign srcDataOut$EN = CAN_FIRE_RL_wsi_source ;

  // register srcIndex
  assign srcIndex$D_IN = srcIndex + 6'd2 ;
  assign srcIndex$EN = CAN_FIRE_RL_wsi_source ;

  // register srcMesgCount
  assign srcMesgCount$D_IN = srcMesgCount + 16'd1 ;
  assign srcMesgCount$EN = WILL_FIRE_RL_wsi_source && srcUnrollCnt == 16'd1 ;

  // register srcUnrollCnt
  assign srcUnrollCnt$D_IN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l83c19 ?
	       16'd32 :
	       MUX_srcUnrollCnt$write_1__VAL_2 ;
  assign srcUnrollCnt$EN =
	     WILL_FIRE_RL_wsi_source ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l83c19 ;

  // register testOperating
  assign testOperating$D_IN = 1'd1 ;
  assign testOperating$EN = CAN_FIRE_RL_wciSeqFsm_action_l79c19 ;

  // register wciSeqFsm_start_reg
  assign wciSeqFsm_start_reg$D_IN = CAN_FIRE_RL_runWciSeq ;
  assign wciSeqFsm_start_reg$EN = 1'd1 ;

  // register wciSeqFsm_state_mkFSMstate
  always@(CAN_FIRE_RL_wciSeqFsm_action_l55c3 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l56c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l57c10 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l59c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l60c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l61c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l63c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l65c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l67c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l69c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l71c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l73c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l75c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l77c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l79c19 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l80c19 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l81c19 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l83c19 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l84c19)
  begin
    case (1'b1) // synopsys parallel_case
      CAN_FIRE_RL_wciSeqFsm_action_l55c3:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_wciSeqFsm_actionof_l56c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_wciSeqFsm_actionof_l57c10:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_wciSeqFsm_actionof_l59c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_wciSeqFsm_actionof_l60c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_wciSeqFsm_actionof_l61c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_wciSeqFsm_actionof_l63c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_wciSeqFsm_actionof_l64c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_wciSeqFsm_actionof_l65c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_wciSeqFsm_actionof_l67c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_wciSeqFsm_actionof_l68c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_wciSeqFsm_actionof_l69c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_wciSeqFsm_actionof_l71c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_wciSeqFsm_actionof_l72c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd14;
      WILL_FIRE_RL_wciSeqFsm_actionof_l73c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_wciSeqFsm_actionof_l75c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_wciSeqFsm_actionof_l76c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd17;
      WILL_FIRE_RL_wciSeqFsm_actionof_l77c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_wciSeqFsm_actionof_l79c19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_wciSeqFsm_actionof_l80c19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd20;
      WILL_FIRE_RL_wciSeqFsm_actionof_l81c19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd21;
      WILL_FIRE_RL_wciSeqFsm_actionof_l83c19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd22;
      WILL_FIRE_RL_wciSeqFsm_actionof_l84c19:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd23;
      default: wciSeqFsm_state_mkFSMstate$D_IN =
		   5'b01010 /* unspecified value */ ;
    endcase
  end
  assign wciSeqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_22 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l55c3_21 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l56c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l57c10 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l59c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l60c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l61c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l63c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l65c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l67c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l69c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l71c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l73c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l75c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l77c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l79c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l80c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l81c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l83c19 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l84c19 ;

  // register wciSeqFsm_state_standby
  assign wciSeqFsm_state_standby$D_IN = !wciSeqFsm_state_run_pw$whas ;
  assign wciSeqFsm_state_standby$EN =
	     CAN_FIRE_RL_wciSeqFsm_state_update_standby ;

  // register wciSeqOnce_onceReady
  assign wciSeqOnce_onceReady$D_IN = 1'd0 ;
  assign wciSeqOnce_onceReady$EN = CAN_FIRE_RL_runWciSeq ;

  // register wci_busy
  assign wci_busy$D_IN = MUX_wci_busy$write_1__SEL_1 ;
  assign wci_busy$EN =
	     _dand1wci_busy$EN_write ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 ||
	      biasWorker_wci_respF_q_0[33:32] != 2'd0) ;

  // register wci_lastConfigAddr
  assign wci_lastConfigAddr$D_IN = 33'h100000004 ;
  assign wci_lastConfigAddr$EN =
	     _dor1wci_lastConfigAddr$EN_write && wci_wReset_n ;

  // register wci_lastConfigBE
  assign wci_lastConfigBE$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 5'd26 : 5'd31 ;
  assign wci_lastConfigBE$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 && wci_wReset_n ;

  // register wci_lastControlOp
  assign wci_lastControlOp$D_IN =
	     MUX_wci_lastControlOp$write_1__SEL_1 ? 4'd8 : 4'd9 ;
  assign wci_lastControlOp$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l64c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 && wci_wReset_n ;

  // register wci_lastOpWrite
  assign wci_lastOpWrite$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 2'd2 : 2'd3 ;
  assign wci_lastOpWrite$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 && wci_wReset_n ;

  // register wci_mFlagReg
  assign wci_mFlagReg$D_IN = 2'h0 ;
  assign wci_mFlagReg$EN = 1'b0 ;

  // register wci_reqERR
  always@(wci_reqPend or wci_reqERR)
  begin
    case (wci_reqPend)
      2'd1: wci_reqERR$D_IN = { 1'd1, wci_reqERR[1:0] };
      2'd2: wci_reqERR$D_IN = { wci_reqERR[2], 1'd1, wci_reqERR[0] };
      default: wci_reqERR$D_IN = { wci_reqERR[2:1], 1'd1 };
    endcase
  end
  assign wci_reqERR$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_respF_q_0[33:32] == 2'd3 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqFAIL
  always@(wci_reqPend or wci_reqFAIL)
  begin
    case (wci_reqPend)
      2'd1: wci_reqFAIL$D_IN = { 1'd1, wci_reqFAIL[1:0] };
      2'd2: wci_reqFAIL$D_IN = { wci_reqFAIL[2], 1'd1, wci_reqFAIL[0] };
      default: wci_reqFAIL$D_IN = { wci_reqFAIL[2:1], 1'd1 };
    endcase
  end
  assign wci_reqFAIL$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_respF_q_0[33:32] == 2'd2 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqF_c_r
  assign wci_reqF_c_r$D_IN =
	     WILL_FIRE_RL_wci_reqF_incCtr ?
	       MUX_wci_reqF_c_r$write_1__VAL_1 :
	       MUX_wci_reqF_c_r$write_1__VAL_2 ;
  assign wci_reqF_c_r$EN =
	     WILL_FIRE_RL_wci_reqF_incCtr || WILL_FIRE_RL_wci_reqF_decCtr ;

  // register wci_reqF_q_0
  always@(WILL_FIRE_RL_wci_reqF_both or
	  MUX_wci_reqF_q_0$write_1__VAL_1 or
	  MUX_wci_reqF_q_0$write_1__SEL_2 or
	  MUX_wci_reqF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wci_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_reqF_both:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_1;
      MUX_wci_reqF_q_0$write_1__SEL_2:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_reqF_decCtr: wci_reqF_q_0$D_IN = 60'h0000000AAAAAAAA;
      default: wci_reqF_q_0$D_IN =
		   60'hAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_reqF_q_0$EN =
	     WILL_FIRE_RL_wci_reqF_both ||
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ||
	     WILL_FIRE_RL_wci_reqF_decCtr ;

  // register wci_reqPend
  always@(MUX_wci_lastConfigBE$write_1__SEL_2 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_reqPend$write_1__SEL_3 or MUX_wci_reqPend$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastConfigBE$write_1__SEL_2: wci_reqPend$D_IN = 2'd1;
      MUX_wci_lastConfigBE$write_1__SEL_1: wci_reqPend$D_IN = 2'd2;
      MUX_wci_reqPend$write_1__SEL_3: wci_reqPend$D_IN = 2'd3;
      MUX_wci_reqPend$write_1__SEL_4: wci_reqPend$D_IN = 2'd0;
      default: wci_reqPend$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign wci_reqPend$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 && wci_wReset_n ||
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l64c8) &&
	     wci_wReset_n ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_respF_q_0[33:32] != 2'd0 ;

  // register wci_reqTO
  always@(wci_reqPend or wci_reqTO)
  begin
    case (wci_reqPend)
      2'd1: wci_reqTO$D_IN = { 1'd1, wci_reqTO[1:0] };
      2'd2: wci_reqTO$D_IN = { wci_reqTO[2], 1'd1, wci_reqTO[0] };
      default: wci_reqTO$D_IN = { wci_reqTO[2:1], 1'd1 };
    endcase
  end
  assign wci_reqTO$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     biasWorker_wci_respF_q_0[33:32] == 2'd0 &&
	     !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_respTimr
  assign wci_respTimr$D_IN =
	     wci_reqF_c_r ? 32'd0 : MUX_wci_respTimr$write_1__VAL_2 ;
  assign wci_respTimr$EN = WILL_FIRE_RL_wci_wrkBusy || wci_reqF_c_r ;

  // register wci_respTimrAct
  assign wci_respTimrAct$D_IN = wci_reqF_c_r ;
  assign wci_respTimrAct$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 ||
	      biasWorker_wci_respF_q_0[33:32] != 2'd0) ||
	     wci_reqF_c_r ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = wci_sThreadBusy_pw$whas ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wci_sfCap
  assign wci_sfCap$D_IN = wci_sfCapSet ;
  assign wci_sfCap$EN = wci_sfCapSet || wci_sfCapClear ;

  // register wci_sfCapClear
  assign wci_sfCapClear$D_IN = 1'b0 ;
  assign wci_sfCapClear$EN = 1'd1 ;

  // register wci_sfCapSet
  assign wci_sfCapSet$D_IN = biasWorker_wci_sFlagReg ;
  assign wci_sfCapSet$EN = 1'd1 ;

  // register wci_slvPresent
  assign wci_slvPresent$D_IN = 1'd1 ;
  assign wci_slvPresent$EN = 1'd1 ;

  // register wci_wReset_n
  assign wci_wReset_n$D_IN = 1'd1 ;
  assign wci_wReset_n$EN = CAN_FIRE_RL_wciSeqFsm_action_l60c8 ;

  // register wci_wStatus
  assign wci_wStatus$D_IN =
	     { 4'b0,
	       !wci_lastOpWrite[1] || wci_lastOpWrite[0],
	       IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 } ;
  assign wci_wStatus$EN = 1'd1 ;

  // register wci_wTimeout
  assign wci_wTimeout$D_IN = 5'd4 ;
  assign wci_wTimeout$EN = CAN_FIRE_RL_wciSeqFsm_action_l60c8 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = testOperating ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsiM_peerIsReady_1$whas ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_0$write_1__SEL_2:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsiM_sThreadBusy_pw$whas ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset$VAL,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN = CAN_FIRE_RL_wsiM_inc_tBusyCount ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiMon_observer_r_mBurstLength
  assign wsiMon_observer_r_mBurstLength$D_IN =
	     biasWorker_wsi_Es_mBurstLength_w$wget ;
  assign wsiMon_observer_r_mBurstLength$EN = 1'd1 ;

  // register wsiMon_observer_r_mBurstPrecise
  assign wsiMon_observer_r_mBurstPrecise$D_IN = CAN_FIRE_RL_mBrstPConnect ;
  assign wsiMon_observer_r_mBurstPrecise$EN = 1'd1 ;

  // register wsiMon_observer_r_mByteEn
  assign wsiMon_observer_r_mByteEn$D_IN = wsiM_reqFifo_q_0[11:8] ;
  assign wsiMon_observer_r_mByteEn$EN = 1'd1 ;

  // register wsiMon_observer_r_mCmd
  assign wsiMon_observer_r_mCmd$D_IN = biasWorker_wsi_Es_mCmd_w$wget ;
  assign wsiMon_observer_r_mCmd$EN = 1'd1 ;

  // register wsiMon_observer_r_mCmdD
  assign wsiMon_observer_r_mCmdD$D_IN = wsiMon_observer_r_mCmd ;
  assign wsiMon_observer_r_mCmdD$EN = 1'd1 ;

  // register wsiMon_observer_r_mData
  assign wsiMon_observer_r_mData$D_IN = wsiM_reqFifo_q_0[43:12] ;
  assign wsiMon_observer_r_mData$EN = 1'd1 ;

  // register wsiMon_observer_r_mReqInfo
  assign wsiMon_observer_r_mReqInfo$D_IN = biasWorker_wsi_Es_mReqInfo_w$wget ;
  assign wsiMon_observer_r_mReqInfo$EN = 1'd1 ;

  // register wsiMon_observer_r_mReqLast
  assign wsiMon_observer_r_mReqLast$D_IN = CAN_FIRE_RL_mReqLConnect_2 ;
  assign wsiMon_observer_r_mReqLast$EN = 1'd1 ;

  // register wsiMon_observer_r_mReset_n
  assign wsiMon_observer_r_mReset_n$D_IN = CAN_FIRE_RL_mResetConnect_1 ;
  assign wsiMon_observer_r_mReset_n$EN = 1'd1 ;

  // register wsiMon_observer_r_mResetnD
  assign wsiMon_observer_r_mResetnD$D_IN = wsiMon_observer_r_mReset_n ;
  assign wsiMon_observer_r_mResetnD$EN = 1'd1 ;

  // register wsiMon_observer_r_sReset_n
  assign wsiMon_observer_r_sReset_n$D_IN = wsiM_peerIsReady_1$whas ;
  assign wsiMon_observer_r_sReset_n$EN = 1'd1 ;

  // register wsiMon_observer_r_sResetnD
  assign wsiMon_observer_r_sResetnD$D_IN = wsiMon_observer_r_sReset_n ;
  assign wsiMon_observer_r_sResetnD$EN = 1'd1 ;

  // register wsiMon_observer_r_sThreadBusy
  assign wsiMon_observer_r_sThreadBusy$D_IN = wsiM_sThreadBusy_pw$whas ;
  assign wsiMon_observer_r_sThreadBusy$EN = 1'd1 ;

  // register wsiMon_pmsender_idx
  assign wsiMon_pmsender_idx$D_IN =
	     wsiMon_pmsender_idx_203_EQ_IF_wsiMon_pmsender__ETC___d2324 ?
	       3'd1 :
	       wsiMon_pmsender_idx + 3'd1 ;
  assign wsiMon_pmsender_idx$EN =
	     CAN_FIRE_RL_wsiMon_pmsender_serialize_message ;

  // register wsiMon_pmsender_isHead
  assign wsiMon_pmsender_isHead$D_IN = 1'b0 ;
  assign wsiMon_pmsender_isHead$EN = 1'b0 ;

  // register wsiMon_pmsender_srcTag
  assign wsiMon_pmsender_srcTag$D_IN = wsiMon_pmsender_srcTag + 8'd1 ;
  assign wsiMon_pmsender_srcTag$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_serialize_message &&
	     wsiMon_pmsender_idx_203_EQ_IF_wsiMon_pmsender__ETC___d2324 ;

  // register wsiMon_pmsender_wsiM_burstKind
  assign wsiMon_pmsender_wsiM_burstKind$D_IN =
	     (wsiMon_pmsender_wsiM_burstKind == 2'd0) ?
	       (wsiMon_pmsender_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiMon_pmsender_wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiMon_pmsender_wsiM_burstKind == 2'd0 ||
	      (wsiMon_pmsender_wsiM_burstKind == 2'd1 ||
	       wsiMon_pmsender_wsiM_burstKind == 2'd2) &&
	      wsiMon_pmsender_wsiM_reqFifo_q_0[57]) ;

  // register wsiMon_pmsender_wsiM_errorSticky
  assign wsiMon_pmsender_wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiMon_pmsender_wsiM_errorSticky$EN = 1'b0 ;

  // register wsiMon_pmsender_wsiM_iMesgCount
  assign wsiMon_pmsender_wsiM_iMesgCount$D_IN =
	     wsiMon_pmsender_wsiM_iMesgCount + 32'd1 ;
  assign wsiMon_pmsender_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiMon_pmsender_wsiM_burstKind == 2'd2 &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[57] ;

  // register wsiMon_pmsender_wsiM_operateD
  assign wsiMon_pmsender_wsiM_operateD$D_IN = 1'b1 ;
  assign wsiMon_pmsender_wsiM_operateD$EN = 1'd1 ;

  // register wsiMon_pmsender_wsiM_pMesgCount
  assign wsiMon_pmsender_wsiM_pMesgCount$D_IN =
	     wsiMon_pmsender_wsiM_pMesgCount + 32'd1 ;
  assign wsiMon_pmsender_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiMon_pmsender_wsiM_burstKind == 2'd1 &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[57] ;

  // register wsiMon_pmsender_wsiM_peerIsReady
  assign wsiMon_pmsender_wsiM_peerIsReady$D_IN = CAN_FIRE_RL_sRstConnect_1 ;
  assign wsiMon_pmsender_wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiMon_pmsender_wsiM_reqFifo_c_r
  assign wsiMon_pmsender_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr ?
	       MUX_wsiMon_pmsender_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiMon_pmsender_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiMon_pmsender_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr ;

  // register wsiMon_pmsender_wsiM_reqFifo_q_0
  always@(MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both or
	  MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr or
	  wsiMon_pmsender_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__SEL_1:
	  wsiMon_pmsender_wsiM_reqFifo_q_0$D_IN =
	      MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both:
	  wsiMon_pmsender_wsiM_reqFifo_q_0$D_IN =
	      MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr:
	  wsiMon_pmsender_wsiM_reqFifo_q_0$D_IN =
	      wsiMon_pmsender_wsiM_reqFifo_q_1;
      default: wsiMon_pmsender_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiMon_pmsender_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr &&
	     wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr ;

  // register wsiMon_pmsender_wsiM_reqFifo_q_1
  always@(MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both or
	  MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__SEL_1:
	  wsiMon_pmsender_wsiM_reqFifo_q_1$D_IN =
	      MUX_wsiMon_pmsender_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both:
	  wsiMon_pmsender_wsiM_reqFifo_q_1$D_IN =
	      MUX_wsiMon_pmsender_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr:
	  wsiMon_pmsender_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiMon_pmsender_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiMon_pmsender_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_incCtr &&
	     wsiMon_pmsender_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_decCtr ;

  // register wsiMon_pmsender_wsiM_sThreadBusy_d
  assign wsiMon_pmsender_wsiM_sThreadBusy_d$D_IN = CAN_FIRE_RL_stbConnect_1 ;
  assign wsiMon_pmsender_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiMon_pmsender_wsiM_statusR
  assign wsiMon_pmsender_wsiM_statusR$D_IN =
	     { wsiMon_pmsender_wsiM_isReset$VAL,
	       !wsiMon_pmsender_wsiM_peerIsReady,
	       !wsiMon_pmsender_wsiM_operateD,
	       wsiMon_pmsender_wsiM_errorSticky,
	       wsiMon_pmsender_wsiM_burstKind != 2'd0,
	       wsiMon_pmsender_wsiM_sThreadBusy_d,
	       1'd0,
	       wsiMon_pmsender_wsiM_trafficSticky } ;
  assign wsiMon_pmsender_wsiM_statusR$EN = 1'd1 ;

  // register wsiMon_pmsender_wsiM_tBusyCount
  assign wsiMon_pmsender_wsiM_tBusyCount$D_IN =
	     wsiMon_pmsender_wsiM_tBusyCount + 32'd1 ;
  assign wsiMon_pmsender_wsiM_tBusyCount$EN =
	     CAN_FIRE_RL_wsiMon_pmsender_wsiM_inc_tBusyCount ;

  // register wsiMon_pmsender_wsiM_trafficSticky
  assign wsiMon_pmsender_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiMon_pmsender_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiMon_pmsender_wsiM_reqFifo_deq &&
	     wsiMon_pmsender_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__49_AND_wsiS_burstKind_64_ETC___d271 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = testOperating ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS_peerIsReady_1$whas ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_wsi_checker ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset$VAL,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // submodule biasWorker_wci_reqF
  assign biasWorker_wci_reqF$D_IN = biasWorker_wci_wciReq$wget ;
  assign biasWorker_wci_reqF$ENQ = CAN_FIRE_RL_biasWorker_wci_reqF_enq ;
  assign biasWorker_wci_reqF$DEQ = biasWorker_wci_reqF_r_deq$whas ;
  assign biasWorker_wci_reqF$CLR = 1'b0 ;

  // submodule biasWorker_wsiS_reqFifo
  assign biasWorker_wsiS_reqFifo$D_IN = biasWorker_wsiS_wsiReq$wget ;
  assign biasWorker_wsiS_reqFifo$ENQ =
	     MUX_biasWorker_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign biasWorker_wsiS_reqFifo$DEQ = CAN_FIRE_RL_biasWorker_doMessagePush ;
  assign biasWorker_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule pmemMon0_pmemF
  assign pmemMon0_pmemF$D_IN =
	     { pmemMon0_wsiS_reqFifo$D_OUT[57],
	       pmemMon0_msgActive,
	       pmemMon0_msgActive ?
		 pmemMon0_wsiS_reqFifo$D_OUT[43:12] :
		 { pmemMon0_wsiS_reqFifo$D_OUT[43:36],
		   CASE_pmemMon0_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q7,
		   pmemMon0_wsiS_reqFifo$D_OUT[27:12] } } ;
  assign pmemMon0_pmemF$ENQ = CAN_FIRE_RL_pmemMon0_chomp_wsi ;
  assign pmemMon0_pmemF$DEQ =
	     WILL_FIRE_RL_pmemMon0_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMon0_get_message_head_dw ;
  assign pmemMon0_pmemF$CLR = 1'b0 ;

  // submodule pmemMon0_wsiS_reqFifo
  assign pmemMon0_wsiS_reqFifo$D_IN = pmemMon0_wsiS_wsiReq$wget ;
  assign pmemMon0_wsiS_reqFifo$ENQ =
	     MUX_pmemMon0_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMon0_wsiS_reqFifo$DEQ = CAN_FIRE_RL_pmemMon0_chomp_wsi ;
  assign pmemMon0_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule pmemMon1_pmemF
  assign pmemMon1_pmemF$D_IN =
	     { pmemMon1_wsiS_reqFifo$D_OUT[57],
	       pmemMon1_msgActive,
	       pmemMon1_msgActive ?
		 pmemMon1_wsiS_reqFifo$D_OUT[43:12] :
		 { pmemMon1_wsiS_reqFifo$D_OUT[43:36],
		   CASE_pmemMon1_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q8,
		   pmemMon1_wsiS_reqFifo$D_OUT[27:12] } } ;
  assign pmemMon1_pmemF$ENQ = CAN_FIRE_RL_pmemMon1_chomp_wsi ;
  assign pmemMon1_pmemF$DEQ =
	     WILL_FIRE_RL_pmemMon1_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMon1_get_message_head_dw ;
  assign pmemMon1_pmemF$CLR = 1'b0 ;

  // submodule pmemMon1_wsiS_reqFifo
  assign pmemMon1_wsiS_reqFifo$D_IN = pmemMon1_wsiS_wsiReq$wget ;
  assign pmemMon1_wsiS_reqFifo$ENQ =
	     MUX_pmemMon1_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMon1_wsiS_reqFifo$DEQ = CAN_FIRE_RL_pmemMon1_chomp_wsi ;
  assign pmemMon1_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule wciMon
  assign wciMon$observe_MAddr = biasWorker_wci_Es_mAddr_w$wget ;
  assign wciMon$observe_MAddrSpace = biasWorker_wci_Es_mAddrSpace_w$wget ;
  assign wciMon$observe_MByteEn = biasWorker_wci_Es_mByteEn_w$wget ;
  assign wciMon$observe_MCmd = biasWorker_wci_Es_mCmd_w$wget ;
  assign wciMon$observe_MData = wci_reqF_q_0[31:0] ;
  assign wciMon$observe_MFlag = wci_mFlagReg ;
  assign wciMon$observe_MReset_n = !isMReset$VAL ;
  assign wciMon$observe_SData = biasWorker_wci_respF_q_0[31:0] ;
  assign wciMon$observe_SFlag = { 1'd1, biasWorker_wci_sFlagReg } ;
  assign wciMon$observe_SResp = biasWorker_wci_respF_q_0[33:32] ;
  assign wciMon$observe_SThreadBusy = wci_sThreadBusy_pw$whas ;
  assign wciMon$pmem_SThreadBusy = CAN_FIRE_RL_stbConnect ;
  assign wciMon$pmem_SReset_n = CAN_FIRE_RL_sRstConnect ;

  // submodule wci_mReset
  assign wci_mReset$ASSERT_IN = CAN_FIRE_RL_wci_workerReset ;

  // submodule wci_respF
  always@(MUX_wci_respF$enq_1__SEL_1 or
	  MUX_wci_busy$write_1__SEL_2 or
	  MUX_wci_respF$enq_1__VAL_2 or WILL_FIRE_RL_wciSeqFsm_actionof_l60c8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_respF$enq_1__SEL_1: wci_respF$D_IN = 34'h1C0DE4204;
      MUX_wci_busy$write_1__SEL_2:
	  wci_respF$D_IN = MUX_wci_respF$enq_1__VAL_2;
      WILL_FIRE_RL_wciSeqFsm_actionof_l60c8: wci_respF$D_IN = 34'h100000000;
      default: wci_respF$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF$ENQ =
	     _dand1wci_respF$EN_enq ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 ||
	      biasWorker_wci_respF_q_0[33:32] != 2'd0) ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l60c8 ;
  assign wci_respF$DEQ =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l77c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l73c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l69c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l65c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l61c5 ;
  assign wci_respF$CLR = 1'b0 ;

  // submodule wsiMon_observer_evF
  assign wsiMon_observer_evF$D_IN =
	     { 67'h1AAAAAAAAAAAAAA10, wsiMon_observer_r_mData } ;
  assign wsiMon_observer_evF$ENQ =
	     WILL_FIRE_RL_wsiMon_observer_request_detected &&
	     wsiMon_observer_r_mCmd == 3'd1 ;
  assign wsiMon_observer_evF$DEQ = CAN_FIRE_RL_wsiMon_mkConnectionAVtoAf ;
  assign wsiMon_observer_evF$CLR = 1'b0 ;

  // submodule wsiMon_pmsender_evF
  assign wsiMon_pmsender_evF$D_IN =
	     { CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_5_ETC__q10,
	       CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_w_ETC__q14 } ;
  assign wsiMon_pmsender_evF$ENQ = CAN_FIRE_RL_wsiMon_mkConnectionAVtoAf ;
  assign wsiMon_pmsender_evF$DEQ =
	     WILL_FIRE_RL_wsiMon_pmsender_serialize_message &&
	     wsiMon_pmsender_idx_203_EQ_IF_wsiMon_pmsender__ETC___d2324 ;
  assign wsiMon_pmsender_evF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$DEQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wci_lastControlOp_22_BIT_3_23_THEN_wci_last_ETC___d137 =
	     { wci_lastControlOp[3] ? wci_lastControlOp[2:0] : 3'b111,
	       wci_lastConfigBE[4] ? wci_lastConfigBE[3:0] : 4'hF,
	       wci_lastOpWrite[1],
	       wci_lastControlOp[3],
	       wci_lastConfigBE[4],
	       wci_lastConfigAddr[32],
	       6'b0,
	       wci_sfCap,
	       wci_reqTO,
	       wci_reqFAIL,
	       wci_reqERR } ;
  assign NOT_wci_busy_5_146_AND_IF_wci_wReset_n_5_THEN__ETC___d2159 =
	     !wci_busy && (wci_wReset_n ? !wci_reqF_c_r : wci_respF$FULL_N) ;
  assign _0x52_CONCAT_IF_IF_wsiMon_pmsender_evF_first__2_ETC___d1407 =
	     { 8'h52,
	       CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5,
	       wsiMon_pmsender_srcTag,
	       x__h34711 } ;
  assign _dand1wci_busy$EN_write =
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l64c8) &&
	     wci_wReset_n ;
  assign _dand1wci_respF$EN_enq =
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l76c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l64c8) &&
	     !wci_wReset_n ;
  assign _dor1pmemMon0_eventCount$EN_write =
	     WILL_FIRE_RL_pmemMon0_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMon0_get_message_head_dw ;
  assign _dor1pmemMon1_eventCount$EN_write =
	     WILL_FIRE_RL_pmemMon1_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMon1_get_message_head_dw ;
  assign _dor1wci_lastConfigAddr$EN_write =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l72c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l68c8 ;
  assign biasWorker_wsiS_reqFifo_notFull__69_AND_biasWo_ETC___d491 =
	     biasWorker_wsiS_reqFifo$FULL_N &&
	     (biasWorker_wsiS_burstKind == 2'd0 ||
	      (biasWorker_wsiS_burstKind == 2'd1 ||
	       biasWorker_wsiS_burstKind == 2'd2) &&
	      biasWorker_wsiS_wsiReq$wget[57]) ;
  assign pmemMon0_wsiS_reqFifo_notFull__28_AND_pmemMon0_ETC___d750 =
	     pmemMon0_wsiS_reqFifo$FULL_N &&
	     (pmemMon0_wsiS_burstKind == 2'd0 ||
	      (pmemMon0_wsiS_burstKind == 2'd1 ||
	       pmemMon0_wsiS_burstKind == 2'd2) &&
	      pmemMon0_wsiS_wsiReq$wget[57]) ;
  assign pmemMon1_wsiS_reqFifo_notFull__616_AND_pmemMon_ETC___d1638 =
	     pmemMon1_wsiS_reqFifo$FULL_N &&
	     (pmemMon1_wsiS_burstKind == 2'd0 ||
	      (pmemMon1_wsiS_burstKind == 2'd1 ||
	       pmemMon1_wsiS_burstKind == 2'd2) &&
	      pmemMon1_wsiS_wsiReq$wget[57]) ;
  assign rdat__h19512 = { 16'd0, x__h19515 } ;
  assign toCount__h2394 = 32'd1 << wci_wTimeout ;
  assign wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 =
	     wci_respTimr < toCount__h2394 ;
  assign wsiBurstLength__h83603 = { 4'd0, wsiS_reqFifo$D_OUT[55:44] } ;
  assign wsiMon_pmsender_idx_203_EQ_IF_wsiMon_pmsender__ETC___d2324 =
	     wsiMon_pmsender_idx == len__h33783 ;
  assign wsiS_reqFifo_notFull__49_AND_wsiS_burstKind_64_ETC___d271 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;
  assign x__h19515 = { biasWorker_wsiS_statusR, biasWorker_wsiM_statusR } ;
  assign x__h2553 = wci_respTimr + 32'd1 ;
  assign x_burstLength__h33854 = { 9'd0, len__h33783 } ;
  assign x_data__h19019 =
	     biasWorker_wsiS_reqFifo$D_OUT[43:12] + biasWorker_biasValue ;
  assign x_data__h83284 = {2{srcDataOut[15:0]}} ;
  assign z__h25553 = pmemMon0_pmh[0] ^ pmemMon0_pmh[1] ;
  assign z__h25560 = z__h25553 ^ pmemMon0_pmh[2] ;
  assign z__h25567 = z__h25560 ^ pmemMon0_pmh[3] ;
  assign z__h25574 = z__h25567 ^ pmemMon0_pmh[4] ;
  assign z__h25581 = z__h25574 ^ pmemMon0_pmh[5] ;
  assign z__h25588 = z__h25581 ^ pmemMon0_pmh[6] ;
  assign z__h25595 = z__h25588 ^ pmemMon0_pmh[7] ;
  assign z__h25602 = z__h25595 ^ pmemMon0_pmh[8] ;
  assign z__h25609 = z__h25602 ^ pmemMon0_pmh[9] ;
  assign z__h25616 = z__h25609 ^ pmemMon0_pmh[10] ;
  assign z__h25623 = z__h25616 ^ pmemMon0_pmh[11] ;
  assign z__h25630 = z__h25623 ^ pmemMon0_pmh[12] ;
  assign z__h25637 = z__h25630 ^ pmemMon0_pmh[13] ;
  assign z__h25644 = z__h25637 ^ pmemMon0_pmh[14] ;
  assign z__h25651 = z__h25644 ^ pmemMon0_pmh[15] ;
  assign z__h25658 =
	     z__h25651 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[0] ;
  assign z__h25665 =
	     z__h25658 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[1] ;
  assign z__h25672 =
	     z__h25665 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[2] ;
  assign z__h25679 =
	     z__h25672 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[3] ;
  assign z__h25686 =
	     z__h25679 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[4] ;
  assign z__h25693 =
	     z__h25686 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[5] ;
  assign z__h25700 =
	     z__h25693 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[6] ;
  assign z__h25707 =
	     z__h25700 ^
	     IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535[7] ;
  assign z__h25714 = z__h25707 ^ pmemMon0_pmh[24] ;
  assign z__h25721 = z__h25714 ^ pmemMon0_pmh[25] ;
  assign z__h25728 = z__h25721 ^ pmemMon0_pmh[26] ;
  assign z__h25735 = z__h25728 ^ pmemMon0_pmh[27] ;
  assign z__h25742 = z__h25735 ^ pmemMon0_pmh[28] ;
  assign z__h25749 = z__h25742 ^ pmemMon0_pmh[29] ;
  assign z__h25756 = z__h25749 ^ pmemMon0_pmh[30] ;
  assign z__h40073 = pmemMon1_pmh[0] ^ pmemMon1_pmh[1] ;
  assign z__h40080 = z__h40073 ^ pmemMon1_pmh[2] ;
  assign z__h40087 = z__h40080 ^ pmemMon1_pmh[3] ;
  assign z__h40094 = z__h40087 ^ pmemMon1_pmh[4] ;
  assign z__h40101 = z__h40094 ^ pmemMon1_pmh[5] ;
  assign z__h40108 = z__h40101 ^ pmemMon1_pmh[6] ;
  assign z__h40115 = z__h40108 ^ pmemMon1_pmh[7] ;
  assign z__h40122 = z__h40115 ^ pmemMon1_pmh[8] ;
  assign z__h40129 = z__h40122 ^ pmemMon1_pmh[9] ;
  assign z__h40136 = z__h40129 ^ pmemMon1_pmh[10] ;
  assign z__h40143 = z__h40136 ^ pmemMon1_pmh[11] ;
  assign z__h40150 = z__h40143 ^ pmemMon1_pmh[12] ;
  assign z__h40157 = z__h40150 ^ pmemMon1_pmh[13] ;
  assign z__h40164 = z__h40157 ^ pmemMon1_pmh[14] ;
  assign z__h40171 = z__h40164 ^ pmemMon1_pmh[15] ;
  assign z__h40178 =
	     z__h40171 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[0] ;
  assign z__h40185 =
	     z__h40178 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[1] ;
  assign z__h40192 =
	     z__h40185 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[2] ;
  assign z__h40199 =
	     z__h40192 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[3] ;
  assign z__h40206 =
	     z__h40199 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[4] ;
  assign z__h40213 =
	     z__h40206 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[5] ;
  assign z__h40220 =
	     z__h40213 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[6] ;
  assign z__h40227 =
	     z__h40220 ^
	     IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536[7] ;
  assign z__h40234 = z__h40227 ^ pmemMon1_pmh[24] ;
  assign z__h40241 = z__h40234 ^ pmemMon1_pmh[25] ;
  assign z__h40248 = z__h40241 ^ pmemMon1_pmh[26] ;
  assign z__h40255 = z__h40248 ^ pmemMon1_pmh[27] ;
  assign z__h40262 = z__h40255 ^ pmemMon1_pmh[28] ;
  assign z__h40269 = z__h40262 ^ pmemMon1_pmh[29] ;
  assign z__h40276 = z__h40269 ^ pmemMon1_pmh[30] ;
  always@(wsiMon_pmsender_evF$D_OUT)
  begin
    case (wsiMon_pmsender_evF$D_OUT[98:96])
      3'd0: len__h33783 = 3'd1;
      3'd1: len__h33783 = 3'd2;
      3'd2: len__h33783 = 3'd3;
      default: len__h33783 = 3'd7;
    endcase
  end
  always@(wsiMon_pmsender_evF$D_OUT)
  begin
    case (wsiMon_pmsender_evF$D_OUT[98:96])
      3'd0: x__h34711 = 8'd1;
      3'd1: x__h34711 = 8'd2;
      3'd2: x__h34711 = 8'd3;
      3'd3: x__h34711 = 8'd4;
      3'd4: x__h34711 = 8'd5;
      default: x__h34711 = 8'd6;
    endcase
  end
  always@(wsiMon_pmsender_evF$D_OUT)
  begin
    case (wsiMon_pmsender_evF$D_OUT[71:64])
      8'd0: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd0;
      8'd1: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd1;
      8'd2: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd2;
      8'd3: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd3;
      8'd4: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd4;
      8'd5: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd5;
      8'd6: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd6;
      8'd7: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd7;
      8'd8: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd8;
      8'd9: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd9;
      8'd10: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd10;
      8'd11: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd11;
      8'd12: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd12;
      8'd13: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd13;
      8'd14: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd14;
      8'd16: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd15;
      8'd32: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd16;
      8'd48: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd17;
      8'd64: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd18;
      8'd128: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd19;
      8'd144: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd20;
      8'd160: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd21;
      default: CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 = 5'd22;
    endcase
  end
  always@(wsiMon_pmsender_evF$D_OUT)
  begin
    case (wsiMon_pmsender_evF$D_OUT[7:0])
      8'd0: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd0;
      8'd1: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd1;
      8'd2: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd2;
      8'd3: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd3;
      8'd4: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd4;
      8'd5: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd5;
      8'd6: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd6;
      8'd7: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd7;
      8'd8: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd8;
      8'd9: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd9;
      8'd10: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd10;
      8'd11: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd11;
      8'd12: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd12;
      8'd13: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd13;
      8'd14: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd14;
      8'd16: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd15;
      8'd32: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd16;
      8'd48: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd17;
      8'd64: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd18;
      8'd128: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd19;
      8'd144: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd20;
      8'd160: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd21;
      default: CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 = 5'd22;
    endcase
  end
  always@(wsiMon_pmsender_evF$D_OUT)
  begin
    case (wsiMon_pmsender_evF$D_OUT[39:32])
      8'd0: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd0;
      8'd1: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd1;
      8'd2: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd2;
      8'd3: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd3;
      8'd4: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd4;
      8'd5: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd5;
      8'd6: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd6;
      8'd7: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd7;
      8'd8: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd8;
      8'd9: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd9;
      8'd10: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd10;
      8'd11: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd11;
      8'd12: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd12;
      8'd13: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd13;
      8'd14: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd14;
      8'd16: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd15;
      8'd32: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd16;
      8'd48: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd17;
      8'd64: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd18;
      8'd128: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd19;
      8'd144: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd20;
      8'd160: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd21;
      default: CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3 = 5'd22;
    endcase
  end
  always@(wsiMon_pmsender_evF$D_OUT or
	  CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1 or
	  CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2 or
	  CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3)
  begin
    case (wsiMon_pmsender_evF$D_OUT[98:96])
      3'd0:
	  CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO_96_C_ETC__q4 =
	      CASE_wsiMon_pmsender_evFD_OUT_BITS_7_TO_0_22__ETC__q2;
      3'd1:
	  CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO_96_C_ETC__q4 =
	      CASE_wsiMon_pmsender_evFD_OUT_BITS_39_TO_32_2_ETC__q3;
      default: CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO_96_C_ETC__q4 =
		   CASE_wsiMon_pmsender_evFD_OUT_BITS_71_TO_64_2_ETC__q1;
    endcase
  end
  always@(CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO_96_C_ETC__q4)
  begin
    case (CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO_96_C_ETC__q4)
      5'd0: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd0;
      5'd1: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd1;
      5'd2: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd2;
      5'd3: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd3;
      5'd4: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd4;
      5'd5: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd5;
      5'd6: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd6;
      5'd7: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd7;
      5'd8: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd8;
      5'd9: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd9;
      5'd10: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd10;
      5'd11: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd11;
      5'd12: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd12;
      5'd13: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd13;
      5'd14: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd14;
      5'd15: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd16;
      5'd16: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd32;
      5'd17: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd48;
      5'd18: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd64;
      5'd19: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd128;
      5'd20: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd144;
      5'd21: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 = 8'd160;
      default: CASE_CASE_wsiMon_pmsender_evFD_OUT_BITS_98_TO__ETC__q5 =
		   8'd255;
    endcase
  end
  always@(wsiMon_pmsender_idx or
	  wsiMon_pmsender_evF$D_OUT or
	  _0x52_CONCAT_IF_IF_wsiMon_pmsender_evF_first__2_ETC___d1407)
  begin
    case (wsiMon_pmsender_idx)
      3'd1:
	  x_data__h33855 =
	      _0x52_CONCAT_IF_IF_wsiMon_pmsender_evF_first__2_ETC___d1407;
      3'd2:
	  x_data__h33855 =
	      (wsiMon_pmsender_evF$D_OUT[98:96] == 3'd1) ?
		wsiMon_pmsender_evF$D_OUT[31:0] :
		wsiMon_pmsender_evF$D_OUT[63:32];
      default: x_data__h33855 = wsiMon_pmsender_evF$D_OUT[31:0];
    endcase
  end
  always@(pmemMon0_pmh)
  begin
    case (pmemMon0_pmh[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535 =
	      pmemMon0_pmh[23:16];
      default: IF_pmemMon0_pmh_97_BITS_23_TO_16_29_EQ_0_30_OR_ETC___d2535 =
		   8'd255;
    endcase
  end
  always@(pmemMon1_pmh)
  begin
    case (pmemMon1_pmh[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536 =
	      pmemMon1_pmh[23:16];
      default: IF_pmemMon1_pmh_785_BITS_23_TO_16_817_EQ_0_818_ETC___d2536 =
		   8'd255;
    endcase
  end
  always@(biasWorker_wci_reqF$D_OUT or
	  biasWorker_biasValue or
	  biasWorker_controlReg or
	  rdat__h19512 or
	  biasWorker_wsiS_extStatusW$wget or biasWorker_wsiM_extStatusW$wget)
  begin
    case (biasWorker_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h19422 = biasWorker_biasValue;
      8'h04: _theResult____h19422 = biasWorker_controlReg;
      8'h20: _theResult____h19422 = rdat__h19512;
      8'h24: _theResult____h19422 = biasWorker_wsiS_extStatusW$wget[95:64];
      8'h28: _theResult____h19422 = biasWorker_wsiS_extStatusW$wget[63:32];
      8'h2C: _theResult____h19422 = biasWorker_wsiS_extStatusW$wget[31:0];
      8'h30: _theResult____h19422 = biasWorker_wsiM_extStatusW$wget[95:64];
      8'h34: _theResult____h19422 = biasWorker_wsiM_extStatusW$wget[63:32];
      8'h38: _theResult____h19422 = biasWorker_wsiM_extStatusW$wget[31:0];
      default: _theResult____h19422 = 32'd0;
    endcase
  end
  always@(pmemMon0_pmemF$D_OUT)
  begin
    case (pmemMon0_pmemF$D_OUT[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMon0_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q6 =
	      pmemMon0_pmemF$D_OUT[23:16];
      default: CASE_pmemMon0_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q6 = 8'd255;
    endcase
  end
  always@(pmemMon0_wsiS_reqFifo$D_OUT)
  begin
    case (pmemMon0_wsiS_reqFifo$D_OUT[35:28])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMon0_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q7 =
	      pmemMon0_wsiS_reqFifo$D_OUT[35:28];
      default: CASE_pmemMon0_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q7 = 8'd255;
    endcase
  end
  always@(pmemMon1_wsiS_reqFifo$D_OUT)
  begin
    case (pmemMon1_wsiS_reqFifo$D_OUT[35:28])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMon1_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q8 =
	      pmemMon1_wsiS_reqFifo$D_OUT[35:28];
      default: CASE_pmemMon1_wsiS_reqFifoD_OUT_BITS_35_TO_28_ETC__q8 = 8'd255;
    endcase
  end
  always@(pmemMon1_pmemF$D_OUT)
  begin
    case (pmemMon1_pmemF$D_OUT[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMon1_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q9 =
	      pmemMon1_pmemF$D_OUT[23:16];
      default: CASE_pmemMon1_pmemFD_OUT_BITS_23_TO_16_255_0__ETC__q9 = 8'd255;
    endcase
  end
  always@(wsiMon_observer_evF$D_OUT)
  begin
    case (wsiMon_observer_evF$D_OUT[98:96])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_5_ETC__q10 =
	      wsiMon_observer_evF$D_OUT[98:96];
      default: CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_5_ETC__q10 = 3'd5;
    endcase
  end
  always@(wsiMon_observer_evF$D_OUT)
  begin
    case (wsiMon_observer_evF$D_OUT[7:0])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_wsiMon_observer_evFD_OUT_BITS_7_TO_0_255_ETC__q11 =
	      wsiMon_observer_evF$D_OUT[7:0];
      default: CASE_wsiMon_observer_evFD_OUT_BITS_7_TO_0_255_ETC__q11 =
		   8'd255;
    endcase
  end
  always@(wsiMon_observer_evF$D_OUT)
  begin
    case (wsiMon_observer_evF$D_OUT[39:32])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_wsiMon_observer_evFD_OUT_BITS_39_TO_32_2_ETC__q12 =
	      wsiMon_observer_evF$D_OUT[39:32];
      default: CASE_wsiMon_observer_evFD_OUT_BITS_39_TO_32_2_ETC__q12 =
		   8'd255;
    endcase
  end
  always@(wsiMon_observer_evF$D_OUT)
  begin
    case (wsiMon_observer_evF$D_OUT[71:64])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd128,
      8'd144,
      8'd160:
	  CASE_wsiMon_observer_evFD_OUT_BITS_71_TO_64_2_ETC__q13 =
	      wsiMon_observer_evF$D_OUT[71:64];
      default: CASE_wsiMon_observer_evFD_OUT_BITS_71_TO_64_2_ETC__q13 =
		   8'd255;
    endcase
  end
  always@(wsiMon_observer_evF$D_OUT or
	  CASE_wsiMon_observer_evFD_OUT_BITS_7_TO_0_255_ETC__q11 or
	  CASE_wsiMon_observer_evFD_OUT_BITS_39_TO_32_2_ETC__q12 or
	  CASE_wsiMon_observer_evFD_OUT_BITS_71_TO_64_2_ETC__q13)
  begin
    case (wsiMon_observer_evF$D_OUT[98:96])
      3'd0:
	  CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_w_ETC__q14 =
	      { 88'hAAAAAAAAAAAAAAAAAAAAAA,
		CASE_wsiMon_observer_evFD_OUT_BITS_7_TO_0_255_ETC__q11 };
      3'd1:
	  CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_w_ETC__q14 =
	      { 56'hAAAAAAAAAAAAAA,
		CASE_wsiMon_observer_evFD_OUT_BITS_39_TO_32_2_ETC__q12,
		wsiMon_observer_evF$D_OUT[31:0] };
      3'd2, 3'd3:
	  CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_w_ETC__q14 =
	      { 24'hAAAAAA,
		CASE_wsiMon_observer_evFD_OUT_BITS_71_TO_64_2_ETC__q13,
		wsiMon_observer_evF$D_OUT[63:0] };
      default: CASE_wsiMon_observer_evFD_OUT_BITS_98_TO_96_w_ETC__q14 =
		   wsiMon_observer_evF$D_OUT[95:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        dstDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dstMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	enWsiChecker <= `BSV_ASSIGNMENT_DELAY 1'd0;
	enWsiSource <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_eventCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon0_msgActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_pmBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_pmHead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMon0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMon0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pmemMon0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	pmemMon1_eventCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon1_msgActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon1_pmBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon1_pmHead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon1_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMon1_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon1_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon1_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon1_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon1_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon1_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMon1_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pmemMon1_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMon1_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMon1_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
	simCycle <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcDataOut <= `BSV_ASSIGNMENT_DELAY 32'd0;
	srcIndex <= `BSV_ASSIGNMENT_DELAY 6'd0;
	srcMesgCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	testOperating <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd1;
	wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY 5'd10;
	wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY 4'd2;
	wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY 2'b10;
	wci_reqERR <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 60'h0000000AAAAAAAA;
	wci_reqPend <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_reqTO <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_respTimr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_sfCap <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_slvPresent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wTimeout <= `BSV_ASSIGNMENT_DELAY 5'h04;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_observer_r_mBurstLength <= `BSV_ASSIGNMENT_DELAY 12'd0;
	wsiMon_observer_r_mBurstPrecise <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY 4'd0;
	wsiMon_observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wsiMon_observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wsiMon_observer_r_mData <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiMon_observer_r_mReqInfo <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wsiMon_observer_r_mReqLast <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_observer_r_mReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_observer_r_sReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_observer_r_sResetnD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_pmsender_idx <= `BSV_ASSIGNMENT_DELAY 3'd1;
	wsiMon_pmsender_isHead <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiMon_pmsender_srcTag <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wsiMon_pmsender_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiMon_pmsender_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_pmsender_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiMon_pmsender_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_pmsender_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiMon_pmsender_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiMon_pmsender_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiMon_pmsender_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	wsiMon_pmsender_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	wsiMon_pmsender_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiMon_pmsender_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiMon_pmsender_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (dstDataOut$EN)
	  dstDataOut <= `BSV_ASSIGNMENT_DELAY dstDataOut$D_IN;
	if (dstMesgCount$EN)
	  dstMesgCount <= `BSV_ASSIGNMENT_DELAY dstMesgCount$D_IN;
	if (dstUnrollCnt$EN)
	  dstUnrollCnt <= `BSV_ASSIGNMENT_DELAY dstUnrollCnt$D_IN;
	if (enWsiChecker$EN)
	  enWsiChecker <= `BSV_ASSIGNMENT_DELAY enWsiChecker$D_IN;
	if (enWsiSource$EN)
	  enWsiSource <= `BSV_ASSIGNMENT_DELAY enWsiSource$D_IN;
	if (pmemMon0_eventCount$EN)
	  pmemMon0_eventCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_eventCount$D_IN;
	if (pmemMon0_msgActive$EN)
	  pmemMon0_msgActive <= `BSV_ASSIGNMENT_DELAY pmemMon0_msgActive$D_IN;
	if (pmemMon0_pmBody$EN)
	  pmemMon0_pmBody <= `BSV_ASSIGNMENT_DELAY pmemMon0_pmBody$D_IN;
	if (pmemMon0_pmHead$EN)
	  pmemMon0_pmHead <= `BSV_ASSIGNMENT_DELAY pmemMon0_pmHead$D_IN;
	if (pmemMon0_wsiS_burstKind$EN)
	  pmemMon0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_burstKind$D_IN;
	if (pmemMon0_wsiS_errorSticky$EN)
	  pmemMon0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_errorSticky$D_IN;
	if (pmemMon0_wsiS_iMesgCount$EN)
	  pmemMon0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_iMesgCount$D_IN;
	if (pmemMon0_wsiS_operateD$EN)
	  pmemMon0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_operateD$D_IN;
	if (pmemMon0_wsiS_pMesgCount$EN)
	  pmemMon0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_pMesgCount$D_IN;
	if (pmemMon0_wsiS_peerIsReady$EN)
	  pmemMon0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_peerIsReady$D_IN;
	if (pmemMon0_wsiS_reqFifo_countReg$EN)
	  pmemMon0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_reqFifo_countReg$D_IN;
	if (pmemMon0_wsiS_reqFifo_levelsValid$EN)
	  pmemMon0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_reqFifo_levelsValid$D_IN;
	if (pmemMon0_wsiS_tBusyCount$EN)
	  pmemMon0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_tBusyCount$D_IN;
	if (pmemMon0_wsiS_trafficSticky$EN)
	  pmemMon0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_trafficSticky$D_IN;
	if (pmemMon0_wsiS_wordCount$EN)
	  pmemMon0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon0_wsiS_wordCount$D_IN;
	if (pmemMon1_eventCount$EN)
	  pmemMon1_eventCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_eventCount$D_IN;
	if (pmemMon1_msgActive$EN)
	  pmemMon1_msgActive <= `BSV_ASSIGNMENT_DELAY pmemMon1_msgActive$D_IN;
	if (pmemMon1_pmBody$EN)
	  pmemMon1_pmBody <= `BSV_ASSIGNMENT_DELAY pmemMon1_pmBody$D_IN;
	if (pmemMon1_pmHead$EN)
	  pmemMon1_pmHead <= `BSV_ASSIGNMENT_DELAY pmemMon1_pmHead$D_IN;
	if (pmemMon1_wsiS_burstKind$EN)
	  pmemMon1_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_burstKind$D_IN;
	if (pmemMon1_wsiS_errorSticky$EN)
	  pmemMon1_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_errorSticky$D_IN;
	if (pmemMon1_wsiS_iMesgCount$EN)
	  pmemMon1_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_iMesgCount$D_IN;
	if (pmemMon1_wsiS_operateD$EN)
	  pmemMon1_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_operateD$D_IN;
	if (pmemMon1_wsiS_pMesgCount$EN)
	  pmemMon1_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_pMesgCount$D_IN;
	if (pmemMon1_wsiS_peerIsReady$EN)
	  pmemMon1_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_peerIsReady$D_IN;
	if (pmemMon1_wsiS_reqFifo_countReg$EN)
	  pmemMon1_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_reqFifo_countReg$D_IN;
	if (pmemMon1_wsiS_reqFifo_levelsValid$EN)
	  pmemMon1_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_reqFifo_levelsValid$D_IN;
	if (pmemMon1_wsiS_tBusyCount$EN)
	  pmemMon1_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_tBusyCount$D_IN;
	if (pmemMon1_wsiS_trafficSticky$EN)
	  pmemMon1_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_trafficSticky$D_IN;
	if (pmemMon1_wsiS_wordCount$EN)
	  pmemMon1_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMon1_wsiS_wordCount$D_IN;
	if (simCycle$EN) simCycle <= `BSV_ASSIGNMENT_DELAY simCycle$D_IN;
	if (srcDataOut$EN)
	  srcDataOut <= `BSV_ASSIGNMENT_DELAY srcDataOut$D_IN;
	if (srcIndex$EN) srcIndex <= `BSV_ASSIGNMENT_DELAY srcIndex$D_IN;
	if (srcMesgCount$EN)
	  srcMesgCount <= `BSV_ASSIGNMENT_DELAY srcMesgCount$D_IN;
	if (srcUnrollCnt$EN)
	  srcUnrollCnt <= `BSV_ASSIGNMENT_DELAY srcUnrollCnt$D_IN;
	if (testOperating$EN)
	  testOperating <= `BSV_ASSIGNMENT_DELAY testOperating$D_IN;
	if (wciSeqFsm_start_reg$EN)
	  wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_start_reg$D_IN;
	if (wciSeqFsm_state_mkFSMstate$EN)
	  wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_mkFSMstate$D_IN;
	if (wciSeqFsm_state_standby$EN)
	  wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_standby$D_IN;
	if (wciSeqOnce_onceReady$EN)
	  wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY
	      wciSeqOnce_onceReady$D_IN;
	if (wci_busy$EN) wci_busy <= `BSV_ASSIGNMENT_DELAY wci_busy$D_IN;
	if (wci_lastConfigAddr$EN)
	  wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY wci_lastConfigAddr$D_IN;
	if (wci_lastConfigBE$EN)
	  wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY wci_lastConfigBE$D_IN;
	if (wci_lastControlOp$EN)
	  wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY wci_lastControlOp$D_IN;
	if (wci_lastOpWrite$EN)
	  wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY wci_lastOpWrite$D_IN;
	if (wci_mFlagReg$EN)
	  wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY wci_mFlagReg$D_IN;
	if (wci_reqERR$EN)
	  wci_reqERR <= `BSV_ASSIGNMENT_DELAY wci_reqERR$D_IN;
	if (wci_reqFAIL$EN)
	  wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY wci_reqFAIL$D_IN;
	if (wci_reqF_c_r$EN)
	  wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY wci_reqF_c_r$D_IN;
	if (wci_reqF_q_0$EN)
	  wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_reqF_q_0$D_IN;
	if (wci_reqPend$EN)
	  wci_reqPend <= `BSV_ASSIGNMENT_DELAY wci_reqPend$D_IN;
	if (wci_reqTO$EN) wci_reqTO <= `BSV_ASSIGNMENT_DELAY wci_reqTO$D_IN;
	if (wci_respTimr$EN)
	  wci_respTimr <= `BSV_ASSIGNMENT_DELAY wci_respTimr$D_IN;
	if (wci_respTimrAct$EN)
	  wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY wci_respTimrAct$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wci_sfCap$EN) wci_sfCap <= `BSV_ASSIGNMENT_DELAY wci_sfCap$D_IN;
	if (wci_sfCapClear$EN)
	  wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY wci_sfCapClear$D_IN;
	if (wci_sfCapSet$EN)
	  wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY wci_sfCapSet$D_IN;
	if (wci_slvPresent$EN)
	  wci_slvPresent <= `BSV_ASSIGNMENT_DELAY wci_slvPresent$D_IN;
	if (wci_wReset_n$EN)
	  wci_wReset_n <= `BSV_ASSIGNMENT_DELAY wci_wReset_n$D_IN;
	if (wci_wTimeout$EN)
	  wci_wTimeout <= `BSV_ASSIGNMENT_DELAY wci_wTimeout$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiMon_observer_r_mBurstLength$EN)
	  wsiMon_observer_r_mBurstLength <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mBurstLength$D_IN;
	if (wsiMon_observer_r_mBurstPrecise$EN)
	  wsiMon_observer_r_mBurstPrecise <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mBurstPrecise$D_IN;
	if (wsiMon_observer_r_mByteEn$EN)
	  wsiMon_observer_r_mByteEn <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mByteEn$D_IN;
	if (wsiMon_observer_r_mCmd$EN)
	  wsiMon_observer_r_mCmd <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mCmd$D_IN;
	if (wsiMon_observer_r_mCmdD$EN)
	  wsiMon_observer_r_mCmdD <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mCmdD$D_IN;
	if (wsiMon_observer_r_mData$EN)
	  wsiMon_observer_r_mData <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mData$D_IN;
	if (wsiMon_observer_r_mReqInfo$EN)
	  wsiMon_observer_r_mReqInfo <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mReqInfo$D_IN;
	if (wsiMon_observer_r_mReqLast$EN)
	  wsiMon_observer_r_mReqLast <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mReqLast$D_IN;
	if (wsiMon_observer_r_mReset_n$EN)
	  wsiMon_observer_r_mReset_n <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mReset_n$D_IN;
	if (wsiMon_observer_r_mResetnD$EN)
	  wsiMon_observer_r_mResetnD <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_mResetnD$D_IN;
	if (wsiMon_observer_r_sReset_n$EN)
	  wsiMon_observer_r_sReset_n <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_sReset_n$D_IN;
	if (wsiMon_observer_r_sResetnD$EN)
	  wsiMon_observer_r_sResetnD <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_sResetnD$D_IN;
	if (wsiMon_observer_r_sThreadBusy$EN)
	  wsiMon_observer_r_sThreadBusy <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_observer_r_sThreadBusy$D_IN;
	if (wsiMon_pmsender_idx$EN)
	  wsiMon_pmsender_idx <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_idx$D_IN;
	if (wsiMon_pmsender_isHead$EN)
	  wsiMon_pmsender_isHead <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_isHead$D_IN;
	if (wsiMon_pmsender_srcTag$EN)
	  wsiMon_pmsender_srcTag <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_srcTag$D_IN;
	if (wsiMon_pmsender_wsiM_burstKind$EN)
	  wsiMon_pmsender_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_burstKind$D_IN;
	if (wsiMon_pmsender_wsiM_errorSticky$EN)
	  wsiMon_pmsender_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_errorSticky$D_IN;
	if (wsiMon_pmsender_wsiM_iMesgCount$EN)
	  wsiMon_pmsender_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_iMesgCount$D_IN;
	if (wsiMon_pmsender_wsiM_operateD$EN)
	  wsiMon_pmsender_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_operateD$D_IN;
	if (wsiMon_pmsender_wsiM_pMesgCount$EN)
	  wsiMon_pmsender_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_pMesgCount$D_IN;
	if (wsiMon_pmsender_wsiM_peerIsReady$EN)
	  wsiMon_pmsender_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_peerIsReady$D_IN;
	if (wsiMon_pmsender_wsiM_reqFifo_c_r$EN)
	  wsiMon_pmsender_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_reqFifo_c_r$D_IN;
	if (wsiMon_pmsender_wsiM_reqFifo_q_0$EN)
	  wsiMon_pmsender_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_reqFifo_q_0$D_IN;
	if (wsiMon_pmsender_wsiM_reqFifo_q_1$EN)
	  wsiMon_pmsender_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_reqFifo_q_1$D_IN;
	if (wsiMon_pmsender_wsiM_sThreadBusy_d$EN)
	  wsiMon_pmsender_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_sThreadBusy_d$D_IN;
	if (wsiMon_pmsender_wsiM_tBusyCount$EN)
	  wsiMon_pmsender_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_tBusyCount$D_IN;
	if (wsiMon_pmsender_wsiM_trafficSticky$EN)
	  wsiMon_pmsender_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      wsiMon_pmsender_wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (!wci_mReset$OUT_RST_N)
      begin
        biasWorker_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	biasWorker_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	biasWorker_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	biasWorker_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	biasWorker_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	biasWorker_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	biasWorker_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	biasWorker_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	    61'h00000AAAAAAAAA00;
	biasWorker_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	biasWorker_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	biasWorker_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	biasWorker_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	biasWorker_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	biasWorker_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (biasWorker_wci_cEdge$EN)
	  biasWorker_wci_cEdge <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_cEdge$D_IN;
	if (biasWorker_wci_cState$EN)
	  biasWorker_wci_cState <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_cState$D_IN;
	if (biasWorker_wci_ctlAckReg$EN)
	  biasWorker_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_ctlAckReg$D_IN;
	if (biasWorker_wci_ctlOpActive$EN)
	  biasWorker_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_ctlOpActive$D_IN;
	if (biasWorker_wci_illegalEdge$EN)
	  biasWorker_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_illegalEdge$D_IN;
	if (biasWorker_wci_nState$EN)
	  biasWorker_wci_nState <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_nState$D_IN;
	if (biasWorker_wci_reqF_countReg$EN)
	  biasWorker_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_reqF_countReg$D_IN;
	if (biasWorker_wci_respF_c_r$EN)
	  biasWorker_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_respF_c_r$D_IN;
	if (biasWorker_wci_respF_q_0$EN)
	  biasWorker_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_respF_q_0$D_IN;
	if (biasWorker_wci_respF_q_1$EN)
	  biasWorker_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_respF_q_1$D_IN;
	if (biasWorker_wci_sFlagReg$EN)
	  biasWorker_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_sFlagReg$D_IN;
	if (biasWorker_wci_sThreadBusy_d$EN)
	  biasWorker_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wci_sThreadBusy_d$D_IN;
	if (biasWorker_wsiM_burstKind$EN)
	  biasWorker_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_burstKind$D_IN;
	if (biasWorker_wsiM_errorSticky$EN)
	  biasWorker_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_errorSticky$D_IN;
	if (biasWorker_wsiM_iMesgCount$EN)
	  biasWorker_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_iMesgCount$D_IN;
	if (biasWorker_wsiM_operateD$EN)
	  biasWorker_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_operateD$D_IN;
	if (biasWorker_wsiM_pMesgCount$EN)
	  biasWorker_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_pMesgCount$D_IN;
	if (biasWorker_wsiM_peerIsReady$EN)
	  biasWorker_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_peerIsReady$D_IN;
	if (biasWorker_wsiM_reqFifo_c_r$EN)
	  biasWorker_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_reqFifo_c_r$D_IN;
	if (biasWorker_wsiM_reqFifo_q_0$EN)
	  biasWorker_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_reqFifo_q_0$D_IN;
	if (biasWorker_wsiM_reqFifo_q_1$EN)
	  biasWorker_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_reqFifo_q_1$D_IN;
	if (biasWorker_wsiM_sThreadBusy_d$EN)
	  biasWorker_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_sThreadBusy_d$D_IN;
	if (biasWorker_wsiM_tBusyCount$EN)
	  biasWorker_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_tBusyCount$D_IN;
	if (biasWorker_wsiM_trafficSticky$EN)
	  biasWorker_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiM_trafficSticky$D_IN;
	if (biasWorker_wsiS_burstKind$EN)
	  biasWorker_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_burstKind$D_IN;
	if (biasWorker_wsiS_errorSticky$EN)
	  biasWorker_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_errorSticky$D_IN;
	if (biasWorker_wsiS_iMesgCount$EN)
	  biasWorker_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_iMesgCount$D_IN;
	if (biasWorker_wsiS_operateD$EN)
	  biasWorker_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_operateD$D_IN;
	if (biasWorker_wsiS_pMesgCount$EN)
	  biasWorker_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_pMesgCount$D_IN;
	if (biasWorker_wsiS_peerIsReady$EN)
	  biasWorker_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_peerIsReady$D_IN;
	if (biasWorker_wsiS_reqFifo_countReg$EN)
	  biasWorker_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_reqFifo_countReg$D_IN;
	if (biasWorker_wsiS_reqFifo_levelsValid$EN)
	  biasWorker_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_reqFifo_levelsValid$D_IN;
	if (biasWorker_wsiS_tBusyCount$EN)
	  biasWorker_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_tBusyCount$D_IN;
	if (biasWorker_wsiS_trafficSticky$EN)
	  biasWorker_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_trafficSticky$D_IN;
	if (biasWorker_wsiS_wordCount$EN)
	  biasWorker_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      biasWorker_wsiS_wordCount$D_IN;
      end
    if (biasWorker_biasValue$EN)
      biasWorker_biasValue <= `BSV_ASSIGNMENT_DELAY biasWorker_biasValue$D_IN;
    if (biasWorker_controlReg$EN)
      biasWorker_controlReg <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_controlReg$D_IN;
    if (biasWorker_wsiM_statusR$EN)
      biasWorker_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_wsiM_statusR$D_IN;
    if (biasWorker_wsiS_mesgWordLength$EN)
      biasWorker_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_wsiS_mesgWordLength$D_IN;
    if (biasWorker_wsiS_statusR$EN)
      biasWorker_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  biasWorker_wsiS_statusR$D_IN;
    if (pmemMon0_pmGrab$EN)
      pmemMon0_pmGrab <= `BSV_ASSIGNMENT_DELAY pmemMon0_pmGrab$D_IN;
    if (pmemMon0_pmh$EN)
      pmemMon0_pmh <= `BSV_ASSIGNMENT_DELAY pmemMon0_pmh$D_IN;
    if (pmemMon0_wsiS_mesgWordLength$EN)
      pmemMon0_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  pmemMon0_wsiS_mesgWordLength$D_IN;
    if (pmemMon0_wsiS_statusR$EN)
      pmemMon0_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  pmemMon0_wsiS_statusR$D_IN;
    if (pmemMon1_pmGrab$EN)
      pmemMon1_pmGrab <= `BSV_ASSIGNMENT_DELAY pmemMon1_pmGrab$D_IN;
    if (pmemMon1_pmh$EN)
      pmemMon1_pmh <= `BSV_ASSIGNMENT_DELAY pmemMon1_pmh$D_IN;
    if (pmemMon1_wsiS_mesgWordLength$EN)
      pmemMon1_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  pmemMon1_wsiS_mesgWordLength$D_IN;
    if (pmemMon1_wsiS_statusR$EN)
      pmemMon1_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  pmemMon1_wsiS_statusR$D_IN;
    if (wci_wStatus$EN) wci_wStatus <= `BSV_ASSIGNMENT_DELAY wci_wStatus$D_IN;
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiMon_pmsender_wsiM_statusR$EN)
      wsiMon_pmsender_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY
	  wsiMon_pmsender_wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    biasWorker_biasValue = 32'hAAAAAAAA;
    biasWorker_controlReg = 32'hAAAAAAAA;
    biasWorker_wci_cEdge = 3'h2;
    biasWorker_wci_cState = 3'h2;
    biasWorker_wci_ctlAckReg = 1'h0;
    biasWorker_wci_ctlOpActive = 1'h0;
    biasWorker_wci_illegalEdge = 1'h0;
    biasWorker_wci_nState = 3'h2;
    biasWorker_wci_reqF_countReg = 2'h2;
    biasWorker_wci_respF_c_r = 2'h2;
    biasWorker_wci_respF_q_0 = 34'h2AAAAAAAA;
    biasWorker_wci_respF_q_1 = 34'h2AAAAAAAA;
    biasWorker_wci_sFlagReg = 1'h0;
    biasWorker_wci_sThreadBusy_d = 1'h0;
    biasWorker_wsiM_burstKind = 2'h2;
    biasWorker_wsiM_errorSticky = 1'h0;
    biasWorker_wsiM_iMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiM_operateD = 1'h0;
    biasWorker_wsiM_pMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiM_peerIsReady = 1'h0;
    biasWorker_wsiM_reqFifo_c_r = 2'h2;
    biasWorker_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    biasWorker_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    biasWorker_wsiM_sThreadBusy_d = 1'h0;
    biasWorker_wsiM_statusR = 8'hAA;
    biasWorker_wsiM_tBusyCount = 32'hAAAAAAAA;
    biasWorker_wsiM_trafficSticky = 1'h0;
    biasWorker_wsiS_burstKind = 2'h2;
    biasWorker_wsiS_errorSticky = 1'h0;
    biasWorker_wsiS_iMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiS_mesgWordLength = 12'hAAA;
    biasWorker_wsiS_operateD = 1'h0;
    biasWorker_wsiS_pMesgCount = 32'hAAAAAAAA;
    biasWorker_wsiS_peerIsReady = 1'h0;
    biasWorker_wsiS_reqFifo_countReg = 2'h2;
    biasWorker_wsiS_reqFifo_levelsValid = 1'h0;
    biasWorker_wsiS_statusR = 8'hAA;
    biasWorker_wsiS_tBusyCount = 32'hAAAAAAAA;
    biasWorker_wsiS_trafficSticky = 1'h0;
    biasWorker_wsiS_wordCount = 12'hAAA;
    dstDataOut = 32'hAAAAAAAA;
    dstMesgCount = 16'hAAAA;
    dstUnrollCnt = 16'hAAAA;
    enWsiChecker = 1'h0;
    enWsiSource = 1'h0;
    pmemMon0_eventCount = 32'hAAAAAAAA;
    pmemMon0_msgActive = 1'h0;
    pmemMon0_pmBody = 1'h0;
    pmemMon0_pmGrab = 1'h0;
    pmemMon0_pmHead = 1'h0;
    pmemMon0_pmh = 32'hAAAAAAAA;
    pmemMon0_wsiS_burstKind = 2'h2;
    pmemMon0_wsiS_errorSticky = 1'h0;
    pmemMon0_wsiS_iMesgCount = 32'hAAAAAAAA;
    pmemMon0_wsiS_mesgWordLength = 12'hAAA;
    pmemMon0_wsiS_operateD = 1'h0;
    pmemMon0_wsiS_pMesgCount = 32'hAAAAAAAA;
    pmemMon0_wsiS_peerIsReady = 1'h0;
    pmemMon0_wsiS_reqFifo_countReg = 2'h2;
    pmemMon0_wsiS_reqFifo_levelsValid = 1'h0;
    pmemMon0_wsiS_statusR = 8'hAA;
    pmemMon0_wsiS_tBusyCount = 32'hAAAAAAAA;
    pmemMon0_wsiS_trafficSticky = 1'h0;
    pmemMon0_wsiS_wordCount = 12'hAAA;
    pmemMon1_eventCount = 32'hAAAAAAAA;
    pmemMon1_msgActive = 1'h0;
    pmemMon1_pmBody = 1'h0;
    pmemMon1_pmGrab = 1'h0;
    pmemMon1_pmHead = 1'h0;
    pmemMon1_pmh = 32'hAAAAAAAA;
    pmemMon1_wsiS_burstKind = 2'h2;
    pmemMon1_wsiS_errorSticky = 1'h0;
    pmemMon1_wsiS_iMesgCount = 32'hAAAAAAAA;
    pmemMon1_wsiS_mesgWordLength = 12'hAAA;
    pmemMon1_wsiS_operateD = 1'h0;
    pmemMon1_wsiS_pMesgCount = 32'hAAAAAAAA;
    pmemMon1_wsiS_peerIsReady = 1'h0;
    pmemMon1_wsiS_reqFifo_countReg = 2'h2;
    pmemMon1_wsiS_reqFifo_levelsValid = 1'h0;
    pmemMon1_wsiS_statusR = 8'hAA;
    pmemMon1_wsiS_tBusyCount = 32'hAAAAAAAA;
    pmemMon1_wsiS_trafficSticky = 1'h0;
    pmemMon1_wsiS_wordCount = 12'hAAA;
    simCycle = 16'hAAAA;
    srcDataOut = 32'hAAAAAAAA;
    srcIndex = 6'h2A;
    srcMesgCount = 16'hAAAA;
    srcUnrollCnt = 16'hAAAA;
    testOperating = 1'h0;
    wciSeqFsm_start_reg = 1'h0;
    wciSeqFsm_state_mkFSMstate = 5'h0A;
    wciSeqFsm_state_standby = 1'h0;
    wciSeqOnce_onceReady = 1'h0;
    wci_busy = 1'h0;
    wci_lastConfigAddr = 33'h0AAAAAAAA;
    wci_lastConfigBE = 5'h0A;
    wci_lastControlOp = 4'hA;
    wci_lastOpWrite = 2'h2;
    wci_mFlagReg = 2'h2;
    wci_reqERR = 3'h2;
    wci_reqFAIL = 3'h2;
    wci_reqF_c_r = 1'h0;
    wci_reqF_q_0 = 60'hAAAAAAAAAAAAAAA;
    wci_reqPend = 2'h2;
    wci_reqTO = 3'h2;
    wci_respTimr = 32'hAAAAAAAA;
    wci_respTimrAct = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wci_sfCap = 1'h0;
    wci_sfCapClear = 1'h0;
    wci_sfCapSet = 1'h0;
    wci_slvPresent = 1'h0;
    wci_wReset_n = 1'h0;
    wci_wStatus = 32'hAAAAAAAA;
    wci_wTimeout = 5'h0A;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiMon_observer_r_mBurstLength = 12'hAAA;
    wsiMon_observer_r_mBurstPrecise = 1'h0;
    wsiMon_observer_r_mByteEn = 4'hA;
    wsiMon_observer_r_mCmd = 3'h2;
    wsiMon_observer_r_mCmdD = 3'h2;
    wsiMon_observer_r_mData = 32'hAAAAAAAA;
    wsiMon_observer_r_mReqInfo = 8'hAA;
    wsiMon_observer_r_mReqLast = 1'h0;
    wsiMon_observer_r_mReset_n = 1'h0;
    wsiMon_observer_r_mResetnD = 1'h0;
    wsiMon_observer_r_sReset_n = 1'h0;
    wsiMon_observer_r_sResetnD = 1'h0;
    wsiMon_observer_r_sThreadBusy = 1'h0;
    wsiMon_pmsender_idx = 3'h2;
    wsiMon_pmsender_isHead = 1'h0;
    wsiMon_pmsender_srcTag = 8'hAA;
    wsiMon_pmsender_wsiM_burstKind = 2'h2;
    wsiMon_pmsender_wsiM_errorSticky = 1'h0;
    wsiMon_pmsender_wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiMon_pmsender_wsiM_operateD = 1'h0;
    wsiMon_pmsender_wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiMon_pmsender_wsiM_peerIsReady = 1'h0;
    wsiMon_pmsender_wsiM_reqFifo_c_r = 2'h2;
    wsiMon_pmsender_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiMon_pmsender_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiMon_pmsender_wsiM_sThreadBusy_d = 1'h0;
    wsiMon_pmsender_wsiM_statusR = 8'hAA;
    wsiMon_pmsender_wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiMon_pmsender_wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_wsi_source && srcUnrollCnt == 16'd1)
	begin
	  v__h83528 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wsi_source && srcUnrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Producer Egress: srcMesgCount:%0x opcode:%0x",
		 v__h83528,
		 srcMesgCount,
		 8'd0);
    if (RST_N)
      if (WILL_FIRE_RL_terminate)
	begin
	  v__h84075 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_terminate)
	$display("[%0d]: %m: mkTB11 termination", v__h84075);
    if (RST_N) if (WILL_FIRE_RL_terminate) $finish(32'd1);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctl_op_start)
	begin
	  v__h13098 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h13098,
		 biasWorker_wci_reqF$D_OUT[36:34],
		 biasWorker_wci_cState);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctrl_IsO &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 83, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_ctrl_IsO and\n  RL_biasWorker_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctrl_OrE &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 84, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_ctrl_OrE and\n  RL_biasWorker_wci_ctrl_IsO fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctrl_OrE &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 84, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_ctrl_OrE and\n  RL_biasWorker_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd)
	begin
	  v__h19438 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h19438,
		 biasWorker_wci_reqF$D_OUT[51:32],
		 biasWorker_wci_reqF$D_OUT[55:52],
		 _theResult____h19422);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 58, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_cfrd and\n  RL_biasWorker_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 58, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_cfrd and\n  RL_biasWorker_wci_ctrl_IsO fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfrd &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 58, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_cfrd and\n  RL_biasWorker_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw)
	begin
	  v__h27014 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw)
	$write("[%0d]: %m: PMEM HEAD: ", v__h27014);
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw) $write("PMEM_HEADER ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd0)
	$write("---None             ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd1)
	$write("---UnReset          ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd2)
	$write("---Reset            ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd3)
	$write("---UnAttention      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd4)
	$write("---Attention        ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd5)
	$write("---UnTerminate      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd6)
	$write("---Terminate        ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd7)
	$write("---Timeout          ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd8)
	$write("---Initialize       ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd9)
	$write("---Start            ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd10)
	$write("---Stop             ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd11)
	$write("---Release          ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd12)
	$write("---Test             ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd13)
	$write("---BeforeQuery      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd14)
	$write("---AfterConfig      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd16)
	$write("---WriteRequest     ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd32)
	$write("---ReadRequest      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd48)
	$write("---WriteResponse    ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd64)
	$write("---ReadResponse     ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd128)
	$write("---RequestError     ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd144)
	$write("---ResponseError    ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] == 8'd160)
	$write("---TransactionError ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd0 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd1 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd2 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd3 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd4 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd5 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd6 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd7 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd8 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd9 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd10 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd11 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd12 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd13 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd14 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd16 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd32 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd48 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd64 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd128 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd144 &&
	  pmemMon0_pmemF$D_OUT[23:16] != 8'd160)
	$write("---Pad              ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw)
	$write("srcID:(%0x) ", pmemMon0_pmemF$D_OUT[31:24]);
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw)
	$write("srcTag:(%0x) ", pmemMon0_pmemF$D_OUT[15:8]);
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_get_message_head_dw)
	$write("info:(%0x) ", pmemMon0_pmemF$D_OUT[7:0]);
    if (RST_N) if (WILL_FIRE_RL_pmemMon0_get_message_head_dw) $write("\n");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_gen_message_body_dw)
	begin
	  v__h28256 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon0_gen_message_body_dw)
	$display("[%0d]: %m: PMEM BODY: srcId:%x srcTag:%x, Event Count:%d. Body Data:%0x ",
		 v__h28256,
		 pmemMon0_pmh[31:24],
		 pmemMon0_pmh[15:8],
		 pmemMon0_eventCount,
		 pmemMon0_pmemF$D_OUT[31:0]);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr)
	begin
	  v__h19285 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h19285,
		 biasWorker_wci_reqF$D_OUT[51:32],
		 biasWorker_wci_reqF$D_OUT[55:52],
		 biasWorker_wci_reqF$D_OUT[31:0]);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_cfwr and\n  RL_biasWorker_wci_ctrl_OrE fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_cfwr and\n  RL_biasWorker_wci_ctrl_IsO fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_cfwr and\n  RL_biasWorker_wci_ctrl_EiI fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_cfwr &&
	  WILL_FIRE_RL_biasWorker_wci_cfrd)
	$display("Error: \"bsv/wrk/BiasWorker.bsv\", line 48, column 8: (R0001)\n  Mutually exclusive rules RL_biasWorker_wci_cfwr and RL_biasWorker_wci_cfrd\n  fired in the same clock cycle.\n");
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctl_op_complete &&
	  biasWorker_wci_illegalEdge)
	begin
	  v__h13416 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctl_op_complete &&
	  biasWorker_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h13416,
		 biasWorker_wci_cEdge,
		 biasWorker_wci_cState);
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctl_op_complete &&
	  !biasWorker_wci_illegalEdge)
	begin
	  v__h13272 = $time;
	  #0;
	end
    if (wci_mReset$OUT_RST_N)
      if (WILL_FIRE_RL_biasWorker_wci_ctl_op_complete &&
	  !biasWorker_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h13272,
		 biasWorker_wci_cEdge,
		 biasWorker_wci_cState,
		 biasWorker_wci_nState);
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw)
	begin
	  v__h41534 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw)
	$write("[%0d]: %m: PMEM HEAD: ", v__h41534);
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw) $write("PMEM_HEADER ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd0)
	$write("---None             ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd1)
	$write("---UnReset          ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd2)
	$write("---Reset            ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd3)
	$write("---UnAttention      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd4)
	$write("---Attention        ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd5)
	$write("---UnTerminate      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd6)
	$write("---Terminate        ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd7)
	$write("---Timeout          ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd8)
	$write("---Initialize       ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd9)
	$write("---Start            ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd10)
	$write("---Stop             ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd11)
	$write("---Release          ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd12)
	$write("---Test             ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd13)
	$write("---BeforeQuery      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd14)
	$write("---AfterConfig      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd16)
	$write("---WriteRequest     ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd32)
	$write("---ReadRequest      ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd48)
	$write("---WriteResponse    ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd64)
	$write("---ReadResponse     ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd128)
	$write("---RequestError     ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd144)
	$write("---ResponseError    ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] == 8'd160)
	$write("---TransactionError ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd0 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd1 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd2 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd3 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd4 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd5 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd6 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd7 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd8 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd9 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd10 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd11 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd12 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd13 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd14 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd16 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd32 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd48 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd64 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd128 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd144 &&
	  pmemMon1_pmemF$D_OUT[23:16] != 8'd160)
	$write("---Pad              ");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw)
	$write("srcID:(%0x) ", pmemMon1_pmemF$D_OUT[31:24]);
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw)
	$write("srcTag:(%0x) ", pmemMon1_pmemF$D_OUT[15:8]);
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_get_message_head_dw)
	$write("info:(%0x) ", pmemMon1_pmemF$D_OUT[7:0]);
    if (RST_N) if (WILL_FIRE_RL_pmemMon1_get_message_head_dw) $write("\n");
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_gen_message_body_dw)
	begin
	  v__h42773 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_pmemMon1_gen_message_body_dw)
	$display("[%0d]: %m: PMEM BODY: srcId:%x srcTag:%x, Event Count:%d. Body Data:%0x ",
		 v__h42773,
		 pmemMon1_pmh[31:24],
		 pmemMon1_pmh[15:8],
		 pmemMon1_eventCount,
		 pmemMon1_pmemF$D_OUT[31:0]);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h2686 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE TIMEOUT", v__h2686);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h2776 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  TIMEOUT", v__h2776);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h2865 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd0 &&
	  !wci_respTimr_7_ULT_1_SL_wci_wTimeout_8_9___d2418 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   TIMEOUT", v__h2865);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3089 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-FAIL", v__h3089);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3179 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-FAIL", v__h3179);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3268 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-FAIL", v__h3268);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3497 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-ERR", v__h3497);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3587 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-ERR", v__h3587);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3676 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy &&
	  biasWorker_wci_respF_q_0[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-ERR", v__h3676);
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker)
	begin
	  v__h83771 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker)
	$display("[%0d]: %m: Consumer wordbin:%0d %04x, wordbin:%0d %04x",
		 v__h83771,
		 dstDataOut,
		 wsiS_reqFifo$D_OUT[27:12],
		 dstDataOut + 32'd1,
		 wsiS_reqFifo$D_OUT[43:28]);
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker && dstUnrollCnt == 16'd1)
	begin
	  v__h83968 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wsi_checker && dstUnrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Consumer Ingress: dstMesgCount:%0x opcode:%0x",
		 v__h83968,
		 dstMesgCount,
		 wsiS_reqFifo$D_OUT[7:0]);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l57c10) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l59c5)
	begin
	  v__h77913 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l59c5)
	$display("[%0d]: %m: Taking DUT out of Reset...", v__h77913);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l59c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l60c8) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l61c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l63c5)
	begin
	  v__h78759 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l63c5)
	$display("[%0d]: %m: CONTROL-OP: -INITIALIZE- DUT...", v__h78759);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l63c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l64c8)
	begin
	  v__h78987 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l64c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h78987);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l64c8) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l65c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l67c5)
	begin
	  v__h79590 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l67c5)
	$display("[%0d]: %m: Write Dataplane Config Properties...",
		 v__h79590);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l67c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l68c8) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l69c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l71c5)
	begin
	  v__h80372 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l71c5)
	$display("[%0d]: %m: Read Dataplane Config Properties...", v__h80372);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l71c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l72c8) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l73c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l75c5)
	begin
	  v__h81195 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l75c5)
	$display("[%0d]: %m: CONTROL-OP: -START- DUT...", v__h81195);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l75c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l76c8)
	begin
	  v__h81450 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l76c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h81450);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l76c8) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l77c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l79c19) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l80c19) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l81c19) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l83c19) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l84c19) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l55c3) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l56c5)
	begin
	  v__h77590 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l56c5)
	$display("[%0d]: %m: Checking for DUT presence...", v__h77590);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l56c5) $write("");
  end
  // synopsys translate_on
endmodule  // mkTB11

