//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Sun Dec 19 11:17:13 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     4
// pcie_txn                       O     4
// client_request_get             O   153
// RDY_client_request_get         O     1
// RDY_client_response_put        O     1
// linkUp                         O     1
// device                         O    16
// pClk                           O     1 clock
// CLK_GATE_pClk                  O     1 const
// pci0_reset_n_pRst              O     1 reset
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// pci0_reset_n                   I     1 reset
// pcie_rxp_i                     I     4
// pcie_rxn_i                     I     4
// client_response_put            I   153
// EN_client_response_put         I     1
// EN_client_request_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkPCIEwrapV6(pci0_clkp,
		    pci0_clkn,
		    pci0_reset_n,

		    pcie_rxp_i,

		    pcie_rxn_i,

		    pcie_txp,

		    pcie_txn,

		    EN_client_request_get,
		    client_request_get,
		    RDY_client_request_get,

		    client_response_put,
		    EN_client_response_put,
		    RDY_client_response_put,

		    linkUp,

		    device,

		    pClk,
		    CLK_GATE_pClk,

		    pci0_reset_n_pRst);
  input  pci0_clkp;
  input  pci0_clkn;
  input  pci0_reset_n;

  // action method pcie_rxp
  input  [3 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [3 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [3 : 0] pcie_txp;

  // value method pcie_txn
  output [3 : 0] pcie_txn;

  // actionvalue method client_request_get
  input  EN_client_request_get;
  output [152 : 0] client_request_get;
  output RDY_client_request_get;

  // action method client_response_put
  input  [152 : 0] client_response_put;
  input  EN_client_response_put;
  output RDY_client_response_put;

  // value method linkUp
  output linkUp;

  // value method device
  output [15 : 0] device;

  // oscillator and gates for output clock pClk
  output pClk;
  output CLK_GATE_pClk;

  // output resets
  output pci0_reset_n_pRst;

  // signals for module outputs
  wire [152 : 0] client_request_get;
  wire [15 : 0] device;
  wire [3 : 0] pcie_txn, pcie_txp;
  wire CLK_GATE_pClk,
       RDY_client_request_get,
       RDY_client_response_put,
       linkUp,
       pClk,
       pci0_reset_n_pRst;

  // inlined wires
  wire [7 : 0] pcie_irq_wInterruptDo$wget;
  wire i2pAF_dClear_pw$whas,
       i2pAF_deq_happened$whas,
       i2pAF_deq_pw$whas,
       i2pAF_enq_pw$whas,
       i2pAF_sClear_pw$whas,
       p2iAF_dClear_pw$whas,
       p2iAF_deq_happened$whas,
       p2iAF_deq_pw$whas,
       p2iAF_enq_pw$whas,
       p2iAF_sClear_pw$whas,
       pci0_pwTrnRx$whas,
       pci0_pwTrnTx$whas,
       pcie_irq_wInterruptDo$whas,
       pcie_irq_wInterruptRdyN$wget,
       pcie_irq_wInterruptRdyN$whas;

  // register Prelude_inst_changeSpecialWires_1_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_1_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_1_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_1_rg$EN;

  // register Prelude_inst_changeSpecialWires_2_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_2_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_2_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_2_rg$EN;

  // register i2pAF_dInReset_isInReset
  reg i2pAF_dInReset_isInReset;
  wire i2pAF_dInReset_isInReset$D_IN, i2pAF_dInReset_isInReset$EN;

  // register i2pAF_head_wrapped
  reg i2pAF_head_wrapped;
  wire i2pAF_head_wrapped$D_IN, i2pAF_head_wrapped$EN;

  // register i2pAF_sInReset_isInReset
  reg i2pAF_sInReset_isInReset;
  wire i2pAF_sInReset_isInReset$D_IN, i2pAF_sInReset_isInReset$EN;

  // register i2pAF_tail_wrapped
  reg i2pAF_tail_wrapped;
  wire i2pAF_tail_wrapped$D_IN, i2pAF_tail_wrapped$EN;

  // register i2pS
  reg [152 : 0] i2pS;
  wire [152 : 0] i2pS$D_IN;
  wire i2pS$EN;

  // register p2iAF_dInReset_isInReset
  reg p2iAF_dInReset_isInReset;
  wire p2iAF_dInReset_isInReset$D_IN, p2iAF_dInReset_isInReset$EN;

  // register p2iAF_head_wrapped
  reg p2iAF_head_wrapped;
  wire p2iAF_head_wrapped$D_IN, p2iAF_head_wrapped$EN;

  // register p2iAF_sInReset_isInReset
  reg p2iAF_sInReset_isInReset;
  wire p2iAF_sInReset_isInReset$D_IN, p2iAF_sInReset_isInReset$EN;

  // register p2iAF_tail_wrapped
  reg p2iAF_tail_wrapped;
  wire p2iAF_tail_wrapped$D_IN, p2iAF_tail_wrapped$EN;

  // register p2iS
  reg [152 : 0] p2iS;
  wire [152 : 0] p2iS$D_IN;
  wire p2iS$EN;

  // register pcie_irq_rInterruptDi
  reg [7 : 0] pcie_irq_rInterruptDi;
  wire [7 : 0] pcie_irq_rInterruptDi$D_IN;
  wire pcie_irq_rInterruptDi$EN;

  // register pcie_irq_rInterruptN
  reg pcie_irq_rInterruptN;
  wire pcie_irq_rInterruptN$D_IN, pcie_irq_rInterruptN$EN;

  // register pcie_irq_rInterrupting
  reg pcie_irq_rInterrupting;
  wire pcie_irq_rInterrupting$D_IN, pcie_irq_rInterrupting$EN;

  // register pcie_irq_rMMEnabled
  reg [2 : 0] pcie_irq_rMMEnabled;
  wire [2 : 0] pcie_irq_rMMEnabled$D_IN;
  wire pcie_irq_rMMEnabled$EN;

  // register pcie_irq_rMSIEnabled
  reg pcie_irq_rMSIEnabled;
  wire pcie_irq_rMSIEnabled$D_IN, pcie_irq_rMSIEnabled$EN;

  // ports of submodule fI2P
  wire [80 : 0] fI2P$D_IN, fI2P$D_OUT;
  wire fI2P$CLR, fI2P$DEQ, fI2P$EMPTY_N, fI2P$ENQ, fI2P$FULL_N;

  // ports of submodule fP2I
  wire [80 : 0] fP2I$D_IN, fP2I$D_OUT;
  wire fP2I$CLR, fP2I$DEQ, fP2I$EMPTY_N, fP2I$ENQ, fP2I$FULL_N;

  // ports of submodule i2pAF_dCombinedReset
  wire i2pAF_dCombinedReset$RST_OUT;

  // ports of submodule i2pAF_dCrossedsReset
  wire i2pAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule i2pAF_sCombinedReset
  wire i2pAF_sCombinedReset$RST_OUT;

  // ports of submodule i2pAF_sCrosseddReset
  wire i2pAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule p2iAF_dCombinedReset
  wire p2iAF_dCombinedReset$RST_OUT;

  // ports of submodule p2iAF_dCrossedsReset
  wire p2iAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule p2iAF_sCombinedReset
  wire p2iAF_sCombinedReset$RST_OUT;

  // ports of submodule p2iAF_sCrosseddReset
  wire p2iAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule pci0_clk
  wire pci0_clk$O;

  // ports of submodule pci0_pcie_ep
  wire [63 : 0] pci0_pcie_ep$cfg_dsn,
		pci0_pcie_ep$trn_rd,
		pci0_pcie_ep$trn_td;
  wire [47 : 0] pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pci0_pcie_ep$cfg_di;
  wire [9 : 0] pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_interrupt_di,
	       pci0_pcie_ep$cfg_interrupt_do;
  wire [6 : 0] pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pci0_pcie_ep$cfg_byte_en_n,
	       pci0_pcie_ep$pci_exp_rxn,
	       pci0_pcie_ep$pci_exp_rxp,
	       pci0_pcie_ep$pci_exp_txn,
	       pci0_pcie_ep$pci_exp_txp;
  wire [2 : 0] pci0_pcie_ep$cfg_function_number,
	       pci0_pcie_ep$cfg_interrupt_mmenable,
	       pci0_pcie_ep$trn_fc_sel;
  wire [1 : 0] pci0_pcie_ep$pl_directed_link_change,
	       pci0_pcie_ep$pl_directed_link_width;
  wire pci0_pcie_ep$cfg_err_cor_n,
       pci0_pcie_ep$cfg_err_cpl_abort_n,
       pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pci0_pcie_ep$cfg_err_ecrc_n,
       pci0_pcie_ep$cfg_err_locked_n,
       pci0_pcie_ep$cfg_err_posted_n,
       pci0_pcie_ep$cfg_err_ur_n,
       pci0_pcie_ep$cfg_interrupt_assert_n,
       pci0_pcie_ep$cfg_interrupt_msienable,
       pci0_pcie_ep$cfg_interrupt_n,
       pci0_pcie_ep$cfg_interrupt_rdy_n,
       pci0_pcie_ep$cfg_pm_wake_n,
       pci0_pcie_ep$cfg_rd_en_n,
       pci0_pcie_ep$cfg_trn_pending_n,
       pci0_pcie_ep$cfg_turnoff_ok_n,
       pci0_pcie_ep$cfg_wr_en_n,
       pci0_pcie_ep$pl_directed_link_auton,
       pci0_pcie_ep$pl_directed_link_speed,
       pci0_pcie_ep$pl_upstream_prefer_deemph,
       pci0_pcie_ep$trn2_clk,
       pci0_pcie_ep$trn_clk,
       pci0_pcie_ep$trn_lnk_up_n,
       pci0_pcie_ep$trn_rdst_rdy_n,
       pci0_pcie_ep$trn_reof_n,
       pci0_pcie_ep$trn_reset_n,
       pci0_pcie_ep$trn_rnp_ok_n,
       pci0_pcie_ep$trn_rrem_n,
       pci0_pcie_ep$trn_rsof_n,
       pci0_pcie_ep$trn_rsrc_rdy_n,
       pci0_pcie_ep$trn_tcfg_gnt_n,
       pci0_pcie_ep$trn_tdst_rdy_n,
       pci0_pcie_ep$trn_teof_n,
       pci0_pcie_ep$trn_terrfwd_n,
       pci0_pcie_ep$trn_trem_n,
       pci0_pcie_ep$trn_tsof_n,
       pci0_pcie_ep$trn_tsrc_dsc_n,
       pci0_pcie_ep$trn_tsrc_rdy_n,
       pci0_pcie_ep$trn_tstr_n;

  // ports of submodule pci0_rst
  wire pci0_rst$O;

  // ports of submodule pciDevice
  wire [15 : 0] pciDevice$dD_OUT, pciDevice$sD_IN;
  wire pciDevice$sEN, pciDevice$sRDY;

  // ports of submodule pciLinkUp
  wire pciLinkUp$dD_OUT, pciLinkUp$sD_IN, pciLinkUp$sEN, pciLinkUp$sRDY;

  // ports of submodule pcie_irq_fifoAssert
  wire [7 : 0] pcie_irq_fifoAssert$dD_OUT, pcie_irq_fifoAssert$sD_IN;
  wire pcie_irq_fifoAssert$dDEQ,
       pcie_irq_fifoAssert$dEMPTY_N,
       pcie_irq_fifoAssert$sENQ;

  // ports of submodule preEdge
  wire preEdge$CLK_VAL;

  // ports of submodule trn2_rst
  wire trn2_rst$OUT_RST_N;

  // ports of submodule trn_rst
  wire trn_rst$OUT_RST_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect2,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_every,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_every,
       CAN_FIRE_RL_connect_interrupt_1,
       CAN_FIRE_RL_connect_interrupt_do,
       CAN_FIRE_RL_connect_interrupt_mmenable,
       CAN_FIRE_RL_connect_interrupt_msienable,
       CAN_FIRE_RL_connect_interrupt_rdy_n,
       CAN_FIRE_RL_i2pAF_dClear_update_head,
       CAN_FIRE_RL_i2pAF_dInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_i2pAF_deq_update_head,
       CAN_FIRE_RL_i2pAF_enq_update_tail,
       CAN_FIRE_RL_i2pAF_reset_head,
       CAN_FIRE_RL_i2pAF_reset_tail,
       CAN_FIRE_RL_i2pAF_sClear_update_tail,
       CAN_FIRE_RL_i2pAF_sInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_p2iAF_dClear_update_head,
       CAN_FIRE_RL_p2iAF_dInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_p2iAF_deq_update_head,
       CAN_FIRE_RL_p2iAF_enq_update_tail,
       CAN_FIRE_RL_p2iAF_reset_head,
       CAN_FIRE_RL_p2iAF_reset_tail,
       CAN_FIRE_RL_p2iAF_sClear_update_tail,
       CAN_FIRE_RL_p2iAF_sInReset_isResetAssertedUpdate,
       CAN_FIRE_RL_pci0_connect_trn_rx,
       CAN_FIRE_RL_pci0_connect_trn_tx,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       CAN_FIRE_RL_tie_off_inputs,
       CAN_FIRE_RL_tie_off_inputs_1,
       CAN_FIRE_RL_write_pciDevice,
       CAN_FIRE_RL_write_pciLinkup,
       CAN_FIRE_client_request_get,
       CAN_FIRE_client_response_put,
       CAN_FIRE_pcie_rxn,
       CAN_FIRE_pcie_rxp,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect2,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_every,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_connect,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_every,
       WILL_FIRE_RL_connect_interrupt_1,
       WILL_FIRE_RL_connect_interrupt_do,
       WILL_FIRE_RL_connect_interrupt_mmenable,
       WILL_FIRE_RL_connect_interrupt_msienable,
       WILL_FIRE_RL_connect_interrupt_rdy_n,
       WILL_FIRE_RL_i2pAF_dClear_update_head,
       WILL_FIRE_RL_i2pAF_dInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_i2pAF_deq_update_head,
       WILL_FIRE_RL_i2pAF_enq_update_tail,
       WILL_FIRE_RL_i2pAF_reset_head,
       WILL_FIRE_RL_i2pAF_reset_tail,
       WILL_FIRE_RL_i2pAF_sClear_update_tail,
       WILL_FIRE_RL_i2pAF_sInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_p2iAF_dClear_update_head,
       WILL_FIRE_RL_p2iAF_dInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_p2iAF_deq_update_head,
       WILL_FIRE_RL_p2iAF_enq_update_tail,
       WILL_FIRE_RL_p2iAF_reset_head,
       WILL_FIRE_RL_p2iAF_reset_tail,
       WILL_FIRE_RL_p2iAF_sClear_update_tail,
       WILL_FIRE_RL_p2iAF_sInReset_isResetAssertedUpdate,
       WILL_FIRE_RL_pci0_connect_trn_rx,
       WILL_FIRE_RL_pci0_connect_trn_tx,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_tie_off_inputs,
       WILL_FIRE_RL_tie_off_inputs_1,
       WILL_FIRE_RL_write_pciDevice,
       WILL_FIRE_RL_write_pciLinkup,
       WILL_FIRE_client_request_get,
       WILL_FIRE_client_response_put,
       WILL_FIRE_pcie_rxn,
       WILL_FIRE_pcie_rxp;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_p2iS$write_1__VAL_1, MUX_p2iS$write_1__VAL_2;
  wire [81 : 0] MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1,
		MUX_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1;
  wire [80 : 0] MUX_fI2P$enq_1__VAL_1;
  wire MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1,
       MUX_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1,
       MUX_p2iS$write_1__SEL_1;

  // remaining internal signals
  wire [127 : 0] val_data__h5826, wOut_data__h5932;
  wire [15 : 0] val_be__h5825, wOut_be__h5931;
  wire p2iAF_head_wrapped_crossed__2_EQ_p2iAF_tail_wr_ETC___d101;

  // oscillator and gates for output clock pClk
  assign pClk = pci0_pcie_ep$trn2_clk ;
  assign CLK_GATE_pClk = 1'b1 ;

  // output resets
  assign pci0_reset_n_pRst = trn2_rst$OUT_RST_N ;

  // action method pcie_rxp
  assign CAN_FIRE_pcie_rxp = 1'd1 ;
  assign WILL_FIRE_pcie_rxp = 1'd1 ;

  // action method pcie_rxn
  assign CAN_FIRE_pcie_rxn = 1'd1 ;
  assign WILL_FIRE_pcie_rxn = 1'd1 ;

  // value method pcie_txp
  assign pcie_txp = pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pci0_pcie_ep$pci_exp_txn ;

  // actionvalue method client_request_get
  assign client_request_get = p2iS ;
  assign RDY_client_request_get =
	     p2iAF_head_wrapped != p2iAF_tail_wrapped &&
	     !p2iAF_dInReset_isInReset ;
  assign CAN_FIRE_client_request_get =
	     p2iAF_head_wrapped != p2iAF_tail_wrapped &&
	     !p2iAF_dInReset_isInReset ;
  assign WILL_FIRE_client_request_get = EN_client_request_get ;

  // action method client_response_put
  assign RDY_client_response_put =
	     i2pAF_head_wrapped == i2pAF_tail_wrapped &&
	     !i2pAF_sInReset_isInReset ;
  assign CAN_FIRE_client_response_put =
	     i2pAF_head_wrapped == i2pAF_tail_wrapped &&
	     !i2pAF_sInReset_isInReset ;
  assign WILL_FIRE_client_response_put = EN_client_response_put ;

  // value method linkUp
  assign linkUp = pciLinkUp$dD_OUT ;

  // value method device
  assign device = pciDevice$dD_OUT ;

  // submodule fI2P
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fI2P(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fI2P$D_IN),
				    .ENQ(fI2P$ENQ),
				    .DEQ(fI2P$DEQ),
				    .CLR(fI2P$CLR),
				    .D_OUT(fI2P$D_OUT),
				    .FULL_N(fI2P$FULL_N),
				    .EMPTY_N(fI2P$EMPTY_N));

  // submodule fP2I
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fP2I(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fP2I$D_IN),
				    .ENQ(fP2I$ENQ),
				    .DEQ(fP2I$DEQ),
				    .CLR(fP2I$CLR),
				    .D_OUT(fP2I$D_OUT),
				    .FULL_N(fP2I$FULL_N),
				    .EMPTY_N(fP2I$EMPTY_N));

  // submodule i2pAF_dCombinedReset
  ResetEither i2pAF_dCombinedReset(.A_RST(trn_rst$OUT_RST_N),
				   .B_RST(i2pAF_dCrossedsReset$OUT_RST_N),
				   .RST_OUT(i2pAF_dCombinedReset$RST_OUT));

  // submodule i2pAF_dCrossedsReset
  SyncReset0 i2pAF_dCrossedsReset(.IN_RST_N(trn2_rst$OUT_RST_N),
				  .OUT_RST_N(i2pAF_dCrossedsReset$OUT_RST_N));

  // submodule i2pAF_sCombinedReset
  ResetEither i2pAF_sCombinedReset(.A_RST(trn2_rst$OUT_RST_N),
				   .B_RST(i2pAF_sCrosseddReset$OUT_RST_N),
				   .RST_OUT(i2pAF_sCombinedReset$RST_OUT));

  // submodule i2pAF_sCrosseddReset
  SyncReset0 i2pAF_sCrosseddReset(.IN_RST_N(trn_rst$OUT_RST_N),
				  .OUT_RST_N(i2pAF_sCrosseddReset$OUT_RST_N));

  // submodule p2iAF_dCombinedReset
  ResetEither p2iAF_dCombinedReset(.A_RST(trn2_rst$OUT_RST_N),
				   .B_RST(p2iAF_dCrossedsReset$OUT_RST_N),
				   .RST_OUT(p2iAF_dCombinedReset$RST_OUT));

  // submodule p2iAF_dCrossedsReset
  SyncReset0 p2iAF_dCrossedsReset(.IN_RST_N(trn_rst$OUT_RST_N),
				  .OUT_RST_N(p2iAF_dCrossedsReset$OUT_RST_N));

  // submodule p2iAF_sCombinedReset
  ResetEither p2iAF_sCombinedReset(.A_RST(trn_rst$OUT_RST_N),
				   .B_RST(p2iAF_sCrosseddReset$OUT_RST_N),
				   .RST_OUT(p2iAF_sCombinedReset$RST_OUT));

  // submodule p2iAF_sCrosseddReset
  SyncReset0 p2iAF_sCrosseddReset(.IN_RST_N(trn2_rst$OUT_RST_N),
				  .OUT_RST_N(p2iAF_sCrosseddReset$OUT_RST_N));

  // submodule pci0_clk
  IBUFDS_GTXE1 pci0_clk(.I(pci0_clkp),
			.IB(pci0_clkn),
			.CEB(1'd0),
			.O(pci0_clk$O),
			.ODIV2());

  // submodule pci0_pcie_ep
  xilinx_v6_pcie_wrapper #(.PL_FAST_TRAIN("FALSE")) pci0_pcie_ep(.sys_clk(pci0_clk$O),
								 .sys_reset_n(pci0_rst$O),
								 .cfg_byte_en_n(pci0_pcie_ep$cfg_byte_en_n),
								 .cfg_di(pci0_pcie_ep$cfg_di),
								 .cfg_dsn(pci0_pcie_ep$cfg_dsn),
								 .cfg_dwaddr(pci0_pcie_ep$cfg_dwaddr),
								 .cfg_err_cor_n(pci0_pcie_ep$cfg_err_cor_n),
								 .cfg_err_cpl_abort_n(pci0_pcie_ep$cfg_err_cpl_abort_n),
								 .cfg_err_cpl_timeout_n(pci0_pcie_ep$cfg_err_cpl_timeout_n),
								 .cfg_err_cpl_unexpect_n(pci0_pcie_ep$cfg_err_cpl_unexpect_n),
								 .cfg_err_ecrc_n(pci0_pcie_ep$cfg_err_ecrc_n),
								 .cfg_err_locked_n(pci0_pcie_ep$cfg_err_locked_n),
								 .cfg_err_posted_n(pci0_pcie_ep$cfg_err_posted_n),
								 .cfg_err_tlp_cpl_header(pci0_pcie_ep$cfg_err_tlp_cpl_header),
								 .cfg_err_ur_n(pci0_pcie_ep$cfg_err_ur_n),
								 .cfg_interrupt_assert_n(pci0_pcie_ep$cfg_interrupt_assert_n),
								 .cfg_interrupt_di(pci0_pcie_ep$cfg_interrupt_di),
								 .cfg_interrupt_n(pci0_pcie_ep$cfg_interrupt_n),
								 .cfg_pm_wake_n(pci0_pcie_ep$cfg_pm_wake_n),
								 .cfg_rd_en_n(pci0_pcie_ep$cfg_rd_en_n),
								 .cfg_trn_pending_n(pci0_pcie_ep$cfg_trn_pending_n),
								 .cfg_turnoff_ok_n(pci0_pcie_ep$cfg_turnoff_ok_n),
								 .cfg_wr_en_n(pci0_pcie_ep$cfg_wr_en_n),
								 .pci_exp_rxn(pci0_pcie_ep$pci_exp_rxn),
								 .pci_exp_rxp(pci0_pcie_ep$pci_exp_rxp),
								 .pl_directed_link_auton(pci0_pcie_ep$pl_directed_link_auton),
								 .pl_directed_link_change(pci0_pcie_ep$pl_directed_link_change),
								 .pl_directed_link_speed(pci0_pcie_ep$pl_directed_link_speed),
								 .pl_directed_link_width(pci0_pcie_ep$pl_directed_link_width),
								 .pl_upstream_prefer_deemph(pci0_pcie_ep$pl_upstream_prefer_deemph),
								 .trn_fc_sel(pci0_pcie_ep$trn_fc_sel),
								 .trn_rdst_rdy_n(pci0_pcie_ep$trn_rdst_rdy_n),
								 .trn_rnp_ok_n(pci0_pcie_ep$trn_rnp_ok_n),
								 .trn_tcfg_gnt_n(pci0_pcie_ep$trn_tcfg_gnt_n),
								 .trn_td(pci0_pcie_ep$trn_td),
								 .trn_teof_n(pci0_pcie_ep$trn_teof_n),
								 .trn_terrfwd_n(pci0_pcie_ep$trn_terrfwd_n),
								 .trn_trem_n(pci0_pcie_ep$trn_trem_n),
								 .trn_tsof_n(pci0_pcie_ep$trn_tsof_n),
								 .trn_tsrc_dsc_n(pci0_pcie_ep$trn_tsrc_dsc_n),
								 .trn_tsrc_rdy_n(pci0_pcie_ep$trn_tsrc_rdy_n),
								 .trn_tstr_n(pci0_pcie_ep$trn_tstr_n),
								 .pci_exp_txp(pci0_pcie_ep$pci_exp_txp),
								 .pci_exp_txn(pci0_pcie_ep$pci_exp_txn),
								 .trn_lnk_up_n(pci0_pcie_ep$trn_lnk_up_n),
								 .trn_fc_ph(),
								 .trn_fc_pd(),
								 .trn_fc_nph(),
								 .trn_fc_npd(),
								 .trn_fc_cplh(),
								 .trn_fc_cpld(),
								 .cfg_do(),
								 .cfg_rd_wr_done_n(),
								 .cfg_bus_number(pci0_pcie_ep$cfg_bus_number),
								 .cfg_device_number(pci0_pcie_ep$cfg_device_number),
								 .cfg_function_number(pci0_pcie_ep$cfg_function_number),
								 .cfg_status(),
								 .cfg_command(),
								 .cfg_dstatus(),
								 .cfg_dcommand(),
								 .cfg_dcommand2(),
								 .cfg_lstatus(),
								 .cfg_lcommand(),
								 .cfg_to_turnoff_n(),
								 .cfg_pcie_link_state_n(),
								 .cfg_pmcsr_pme_en(),
								 .cfg_pmcsr_pme_status(),
								 .cfg_pmcsr_powerstate(),
								 .trn_tdst_rdy_n(pci0_pcie_ep$trn_tdst_rdy_n),
								 .trn_tbuf_av(),
								 .trn_terr_drop_n(),
								 .trn_tcfg_req_n(),
								 .cfg_interrupt_rdy_n(pci0_pcie_ep$cfg_interrupt_rdy_n),
								 .cfg_interrupt_do(pci0_pcie_ep$cfg_interrupt_do),
								 .cfg_interrupt_mmenable(pci0_pcie_ep$cfg_interrupt_mmenable),
								 .cfg_interrupt_msienable(pci0_pcie_ep$cfg_interrupt_msienable),
								 .cfg_interrupt_msixenable(),
								 .cfg_interrupt_msixfm(),
								 .cfg_err_cpl_rdy_n(),
								 .trn_rsof_n(pci0_pcie_ep$trn_rsof_n),
								 .trn_reof_n(pci0_pcie_ep$trn_reof_n),
								 .trn_rd(pci0_pcie_ep$trn_rd),
								 .trn_rrem_n(pci0_pcie_ep$trn_rrem_n),
								 .trn_rerrfwd_n(),
								 .trn_rsrc_rdy_n(pci0_pcie_ep$trn_rsrc_rdy_n),
								 .trn_rsrc_dsc_n(),
								 .trn_rbar_hit_n(pci0_pcie_ep$trn_rbar_hit_n),
								 .pl_initial_link_width(),
								 .pl_lane_reversal_mode(),
								 .pl_link_gen2_capable(),
								 .pl_link_partner_gen2_supported(),
								 .pl_link_upcfg_capable(),
								 .pl_sel_link_rate(),
								 .pl_sel_link_width(),
								 .pl_ltssm_state(),
								 .pl_received_hot_rst(),
								 .trn_clk(pci0_pcie_ep$trn_clk),
								 .trn2_clk(pci0_pcie_ep$trn2_clk),
								 .trn_reset_n(pci0_pcie_ep$trn_reset_n));

  // submodule pci0_rst
  IBUF pci0_rst(.I(pci0_reset_n), .O(pci0_rst$O));

  // submodule pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciDevice(.sCLK(pci0_pcie_ep$trn_clk),
					 .dCLK(pci0_pcie_ep$trn2_clk),
					 .sRST_N(trn_rst$OUT_RST_N),
					 .sD_IN(pciDevice$sD_IN),
					 .sEN(pciDevice$sEN),
					 .dD_OUT(pciDevice$dD_OUT),
					 .sRDY(pciDevice$sRDY));

  // submodule pciLinkUp
  SyncRegister #(.width(32'd1),
		 .init(1'd0)) pciLinkUp(.sCLK(pci0_pcie_ep$trn_clk),
					.dCLK(pci0_pcie_ep$trn2_clk),
					.sRST_N(trn_rst$OUT_RST_N),
					.sD_IN(pciLinkUp$sD_IN),
					.sEN(pciLinkUp$sEN),
					.dD_OUT(pciLinkUp$dD_OUT),
					.sRDY(pciLinkUp$sRDY));

  // submodule pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) pcie_irq_fifoAssert(.sCLK(pci0_pcie_ep$trn_clk),
						  .dCLK(pci0_pcie_ep$trn_clk),
						  .sRST_N(trn_rst$OUT_RST_N),
						  .sD_IN(pcie_irq_fifoAssert$sD_IN),
						  .sENQ(pcie_irq_fifoAssert$sENQ),
						  .dDEQ(pcie_irq_fifoAssert$dDEQ),
						  .dD_OUT(pcie_irq_fifoAssert$dD_OUT),
						  .sFULL_N(),
						  .dEMPTY_N(pcie_irq_fifoAssert$dEMPTY_N));

  // submodule preEdge
  ClockInvToBool preEdge(.CLK_FAST(pci0_pcie_ep$trn_clk),
			 .CLK_SLOW(pci0_pcie_ep$trn2_clk),
			 .CLK_VAL(preEdge$CLK_VAL));

  // submodule trn2_rst
  SyncResetA #(.RSTDELAY(32'd0)) trn2_rst(.CLK(pci0_pcie_ep$trn2_clk),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(trn2_rst$OUT_RST_N));

  // submodule trn_rst
  SyncResetA #(.RSTDELAY(32'd0)) trn_rst(.CLK(pci0_pcie_ep$trn_clk),
					 .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					 .OUT_RST_N(trn_rst$OUT_RST_N));

  // rule RL_write_pciLinkup
  assign CAN_FIRE_RL_write_pciLinkup = pciLinkUp$sRDY ;
  assign WILL_FIRE_RL_write_pciLinkup = pciLinkUp$sRDY ;

  // rule RL_write_pciDevice
  assign CAN_FIRE_RL_write_pciDevice = pciDevice$sRDY ;
  assign WILL_FIRE_RL_write_pciDevice = pciDevice$sRDY ;

  // rule RL_connect_interrupt_1
  assign CAN_FIRE_RL_connect_interrupt_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_1 = 1'd1 ;

  // rule RL_connect_interrupt_rdy_n
  assign CAN_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;

  // rule RL_connect_interrupt_mmenable
  assign CAN_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;

  // rule RL_connect_interrupt_do
  assign CAN_FIRE_RL_connect_interrupt_do = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_do = 1'd1 ;

  // rule RL_tie_off_inputs
  assign CAN_FIRE_RL_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs = 1'd1 ;

  // rule RL_tie_off_inputs_1
  assign CAN_FIRE_RL_tie_off_inputs_1 = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs_1 = 1'd1 ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     pcie_irq_fifoAssert$dEMPTY_N && pcie_irq_rMSIEnabled &&
	     !pcie_irq_rInterrupting &&
	     pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt_done
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     pcie_irq_rMSIEnabled && pcie_irq_rInterrupting &&
	     !pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // rule RL_connect_interrupt_msienable
  assign CAN_FIRE_RL_connect_interrupt_msienable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_msienable = 1'd1 ;

  // rule RL_p2iAF_deq_update_head
  assign CAN_FIRE_RL_p2iAF_deq_update_head =
	     !p2iAF_dInReset_isInReset && EN_client_request_get ;
  assign WILL_FIRE_RL_p2iAF_deq_update_head =
	     CAN_FIRE_RL_p2iAF_deq_update_head ;

  // rule RL_p2iAF_dClear_update_head
  assign CAN_FIRE_RL_p2iAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_p2iAF_dClear_update_head = 1'b0 ;

  // rule RL_p2iAF_reset_head
  assign CAN_FIRE_RL_p2iAF_reset_head = p2iAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_p2iAF_reset_head = p2iAF_dInReset_isInReset ;

  // rule RL_p2iAF_dInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_p2iAF_dInReset_isResetAssertedUpdate =
	     p2iAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_p2iAF_dInReset_isResetAssertedUpdate =
	     p2iAF_dInReset_isInReset ;

  // rule RL_i2pAF_enq_update_tail
  assign CAN_FIRE_RL_i2pAF_enq_update_tail =
	     !i2pAF_sInReset_isInReset && EN_client_response_put ;
  assign WILL_FIRE_RL_i2pAF_enq_update_tail =
	     CAN_FIRE_RL_i2pAF_enq_update_tail ;

  // rule RL_i2pAF_sClear_update_tail
  assign CAN_FIRE_RL_i2pAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_i2pAF_sClear_update_tail = 1'b0 ;

  // rule RL_i2pAF_reset_tail
  assign CAN_FIRE_RL_i2pAF_reset_tail = i2pAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_i2pAF_reset_tail = i2pAF_sInReset_isInReset ;

  // rule RL_i2pAF_reset_head
  assign CAN_FIRE_RL_i2pAF_reset_head = i2pAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_i2pAF_reset_head = i2pAF_dInReset_isInReset ;

  // rule RL_i2pAF_sInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_i2pAF_sInReset_isResetAssertedUpdate =
	     i2pAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_i2pAF_sInReset_isResetAssertedUpdate =
	     i2pAF_sInReset_isInReset ;

  // rule RL_i2pAF_dInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_i2pAF_dInReset_isResetAssertedUpdate =
	     i2pAF_dInReset_isInReset ;
  assign WILL_FIRE_RL_i2pAF_dInReset_isResetAssertedUpdate =
	     i2pAF_dInReset_isInReset ;

  // rule RL_Prelude_inst_changeSpecialWires_every
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_every = 1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_every = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_connect
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect =
	     !pci0_pcie_ep$trn_rsrc_rdy_n && fP2I$FULL_N ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_connect =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;

  // rule RL_pci0_connect_trn_rx
  assign CAN_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_1_upconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     fP2I$EMPTY_N &&
	     (!fP2I$D_OUT[79] ||
	      p2iAF_head_wrapped_crossed__2_EQ_p2iAF_tail_wr_ETC___d101) &&
	     !Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;

  // rule RL_p2iAF_reset_tail
  assign CAN_FIRE_RL_p2iAF_reset_tail = p2iAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_p2iAF_reset_tail = p2iAF_sInReset_isInReset ;

  // rule RL_p2iAF_sInReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_p2iAF_sInReset_isResetAssertedUpdate =
	     p2iAF_sInReset_isInReset ;
  assign WILL_FIRE_RL_p2iAF_sInReset_isResetAssertedUpdate =
	     p2iAF_sInReset_isInReset ;

  // rule RL_Prelude_inst_changeSpecialWires_1_upconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     p2iAF_head_wrapped_crossed__2_EQ_p2iAF_tail_wr_ETC___d101 &&
	     fP2I$EMPTY_N &&
	     Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // rule RL_p2iAF_enq_update_tail
  assign CAN_FIRE_RL_p2iAF_enq_update_tail =
	     !p2iAF_sInReset_isInReset && p2iAF_enq_pw$whas ;
  assign WILL_FIRE_RL_p2iAF_enq_update_tail =
	     CAN_FIRE_RL_p2iAF_enq_update_tail ;

  // rule RL_p2iAF_sClear_update_tail
  assign CAN_FIRE_RL_p2iAF_sClear_update_tail = 1'b0 ;
  assign WILL_FIRE_RL_p2iAF_sClear_update_tail = 1'b0 ;

  // rule RL_Prelude_inst_changeSpecialWires_2_downconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 =
	     i2pAF_head_wrapped != i2pAF_tail_wrapped &&
	     !i2pAF_dInReset_isInReset &&
	     preEdge$CLK_VAL &&
	     fI2P$FULL_N &&
	     !Prelude_inst_changeSpecialWires_2_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;

  // rule RL_i2pAF_deq_update_head
  assign CAN_FIRE_RL_i2pAF_deq_update_head =
	     !i2pAF_dInReset_isInReset &&
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;
  assign WILL_FIRE_RL_i2pAF_deq_update_head =
	     CAN_FIRE_RL_i2pAF_deq_update_head ;

  // rule RL_i2pAF_dClear_update_head
  assign CAN_FIRE_RL_i2pAF_dClear_update_head = 1'b0 ;
  assign WILL_FIRE_RL_i2pAF_dClear_update_head = 1'b0 ;

  // rule RL_Prelude_inst_changeSpecialWires_2_downconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect2 =
	     fI2P$FULL_N && Prelude_inst_changeSpecialWires_2_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;

  // rule RL_Prelude_inst_changeSpecialWires_3_every
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_every = 1'd1 ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_every = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_3_connect
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect =
	     !pci0_pcie_ep$trn_tdst_rdy_n && fI2P$EMPTY_N ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect ;

  // rule RL_pci0_connect_trn_tx
  assign CAN_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !fP2I$D_OUT[79] ;
  assign MUX_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     i2pS[135:128] != 8'd0 ;
  assign MUX_p2iS$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     fP2I$D_OUT[79] ;
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 =
	     { 1'd1, fP2I$D_OUT } ;
  assign MUX_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1 =
	     { 2'd2, i2pS[151:144], i2pS[135:128], i2pS[63:0] } ;
  assign MUX_fI2P$enq_1__VAL_1 =
	     (i2pS[135:128] == 8'd0) ?
	       { i2pS[152:136], i2pS[127:64] } :
	       { i2pS[152], 1'd0, i2pS[150:136], i2pS[127:64] } ;
  assign MUX_p2iS$write_1__VAL_1 =
	     { fP2I$D_OUT[80:72], val_be__h5825, val_data__h5826 } ;
  assign MUX_p2iS$write_1__VAL_2 =
	     { Prelude_inst_changeSpecialWires_1_rg[80],
	       fP2I$D_OUT[79],
	       Prelude_inst_changeSpecialWires_1_rg[78:72],
	       wOut_be__h5931,
	       wOut_data__h5932 } ;

  // inlined wires
  assign pcie_irq_wInterruptRdyN$wget = pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pcie_irq_wInterruptDo$wget = pci0_pcie_ep$cfg_interrupt_do ;
  assign pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign pci0_pwTrnTx$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect ;
  assign pci0_pwTrnRx$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign p2iAF_enq_pw$whas =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;
  assign p2iAF_deq_pw$whas = EN_client_request_get ;
  assign p2iAF_sClear_pw$whas = 1'b0 ;
  assign p2iAF_dClear_pw$whas = 1'b0 ;
  assign p2iAF_deq_happened$whas = 1'b0 ;
  assign i2pAF_enq_pw$whas = EN_client_response_put ;
  assign i2pAF_deq_pw$whas =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;
  assign i2pAF_sClear_pw$whas = 1'b0 ;
  assign i2pAF_dClear_pw$whas = 1'b0 ;
  assign i2pAF_deq_happened$whas = 1'b0 ;

  // register Prelude_inst_changeSpecialWires_1_rg
  assign Prelude_inst_changeSpecialWires_1_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_1_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // register Prelude_inst_changeSpecialWires_2_rg
  assign Prelude_inst_changeSpecialWires_2_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_2_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     i2pS[135:128] != 8'd0 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;

  // register i2pAF_dInReset_isInReset
  assign i2pAF_dInReset_isInReset$D_IN = 1'd0 ;
  assign i2pAF_dInReset_isInReset$EN = i2pAF_dInReset_isInReset ;

  // register i2pAF_head_wrapped
  assign i2pAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_i2pAF_deq_update_head && !i2pAF_head_wrapped ;
  assign i2pAF_head_wrapped$EN =
	     WILL_FIRE_RL_i2pAF_deq_update_head || i2pAF_dInReset_isInReset ;

  // register i2pAF_sInReset_isInReset
  assign i2pAF_sInReset_isInReset$D_IN = 1'd0 ;
  assign i2pAF_sInReset_isInReset$EN = i2pAF_sInReset_isInReset ;

  // register i2pAF_tail_wrapped
  assign i2pAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_i2pAF_enq_update_tail && !i2pAF_tail_wrapped ;
  assign i2pAF_tail_wrapped$EN =
	     WILL_FIRE_RL_i2pAF_enq_update_tail || i2pAF_sInReset_isInReset ;

  // register i2pS
  assign i2pS$D_IN = client_response_put ;
  assign i2pS$EN = EN_client_response_put ;

  // register p2iAF_dInReset_isInReset
  assign p2iAF_dInReset_isInReset$D_IN = 1'd0 ;
  assign p2iAF_dInReset_isInReset$EN = p2iAF_dInReset_isInReset ;

  // register p2iAF_head_wrapped
  assign p2iAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_p2iAF_deq_update_head && !p2iAF_head_wrapped ;
  assign p2iAF_head_wrapped$EN =
	     WILL_FIRE_RL_p2iAF_deq_update_head || p2iAF_dInReset_isInReset ;

  // register p2iAF_sInReset_isInReset
  assign p2iAF_sInReset_isInReset$D_IN = 1'd0 ;
  assign p2iAF_sInReset_isInReset$EN = p2iAF_sInReset_isInReset ;

  // register p2iAF_tail_wrapped
  assign p2iAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_p2iAF_enq_update_tail && !p2iAF_tail_wrapped ;
  assign p2iAF_tail_wrapped$EN =
	     WILL_FIRE_RL_p2iAF_enq_update_tail || p2iAF_sInReset_isInReset ;

  // register p2iS
  assign p2iS$D_IN =
	     MUX_p2iS$write_1__SEL_1 ?
	       MUX_p2iS$write_1__VAL_1 :
	       MUX_p2iS$write_1__VAL_2 ;
  assign p2iS$EN = p2iAF_enq_pw$whas ;

  // register pcie_irq_rInterruptDi
  assign pcie_irq_rInterruptDi$D_IN = pcie_irq_fifoAssert$dD_OUT ;
  assign pcie_irq_rInterruptDi$EN =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rInterruptN
  assign pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;
  assign pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pcie_irq_rInterrupting
  assign pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rMMEnabled
  assign pcie_irq_rMMEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pcie_irq_rMSIEnabled
  assign pcie_irq_rMSIEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // submodule fI2P
  assign fI2P$D_IN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 ?
	       MUX_fI2P$enq_1__VAL_1 :
	       Prelude_inst_changeSpecialWires_2_rg[80:0] ;
  assign fI2P$ENQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect1 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;
  assign fI2P$DEQ = CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect ;
  assign fI2P$CLR = 1'b0 ;

  // submodule fP2I
  assign fP2I$D_IN =
	     { !pci0_pcie_ep$trn_rsof_n,
	       !pci0_pcie_ep$trn_reof_n,
	       ~pci0_pcie_ep$trn_rbar_hit_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       pci0_pcie_ep$trn_rd } ;
  assign fP2I$ENQ = CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign fP2I$DEQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect2 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;
  assign fP2I$CLR = 1'b0 ;

  // submodule pci0_pcie_ep
  assign pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_di = pcie_irq_rInterruptDi ;
  assign pci0_pcie_ep$cfg_interrupt_n = pcie_irq_rInterruptN ;
  assign pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_turnoff_ok_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pci0_pcie_ep$pl_directed_link_auton = 1'b0 ;
  assign pci0_pcie_ep$pl_directed_link_change = 2'h0 ;
  assign pci0_pcie_ep$pl_directed_link_speed = 1'b0 ;
  assign pci0_pcie_ep$pl_directed_link_width = 2'h0 ;
  assign pci0_pcie_ep$pl_upstream_prefer_deemph = 1'b0 ;
  assign pci0_pcie_ep$trn_fc_sel = 3'h0 ;
  assign pci0_pcie_ep$trn_rdst_rdy_n =
	     !CAN_FIRE_RL_Prelude_inst_changeSpecialWires_connect ;
  assign pci0_pcie_ep$trn_rnp_ok_n = 1'd0 ;
  assign pci0_pcie_ep$trn_tcfg_gnt_n = 1'd0 ;
  assign pci0_pcie_ep$trn_td = fI2P$D_OUT[63:0] ;
  assign pci0_pcie_ep$trn_teof_n = !fI2P$D_OUT[79] ;
  assign pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pci0_pcie_ep$trn_trem_n = fI2P$D_OUT[71:64] != 8'd255 ;
  assign pci0_pcie_ep$trn_tsof_n = !fI2P$D_OUT[80] ;
  assign pci0_pcie_ep$trn_tsrc_dsc_n = 1'd1 ;
  assign pci0_pcie_ep$trn_tsrc_rdy_n =
	     !CAN_FIRE_RL_Prelude_inst_changeSpecialWires_3_connect ;
  assign pci0_pcie_ep$trn_tstr_n = 1'd1 ;

  // submodule pciDevice
  assign pciDevice$sD_IN =
	     { pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_device_number,
	       pci0_pcie_ep$cfg_function_number } ;
  assign pciDevice$sEN = pciDevice$sRDY ;

  // submodule pciLinkUp
  assign pciLinkUp$sD_IN = !pci0_pcie_ep$trn_lnk_up_n ;
  assign pciLinkUp$sEN = pciLinkUp$sRDY ;

  // submodule pcie_irq_fifoAssert
  assign pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pcie_irq_fifoAssert$sENQ = 1'b0 ;
  assign pcie_irq_fifoAssert$dDEQ =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // remaining internal signals
  assign p2iAF_head_wrapped_crossed__2_EQ_p2iAF_tail_wr_ETC___d101 =
	     p2iAF_head_wrapped == p2iAF_tail_wrapped &&
	     !p2iAF_sInReset_isInReset &&
	     preEdge$CLK_VAL ;
  assign val_be__h5825 = { fP2I$D_OUT[71:64], 8'd0 } ;
  assign val_data__h5826 = { fP2I$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign wOut_be__h5931 =
	     { Prelude_inst_changeSpecialWires_1_rg[71:64],
	       fP2I$D_OUT[71:64] } ;
  assign wOut_data__h5932 =
	     { Prelude_inst_changeSpecialWires_1_rg[63:0],
	       fP2I$D_OUT[63:0] } ;

  // handling of inlined registers

  always@(posedge pci0_pcie_ep$trn_clk)
  begin
    if (!trn_rst$OUT_RST_N)
      begin
        Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (Prelude_inst_changeSpecialWires_1_rg$EN)
	  Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_1_rg$D_IN;
	if (Prelude_inst_changeSpecialWires_2_rg$EN)
	  Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_2_rg$D_IN;
	if (i2pAF_head_wrapped$EN)
	  i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY i2pAF_head_wrapped$D_IN;
	if (p2iAF_tail_wrapped$EN)
	  p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY p2iAF_tail_wrapped$D_IN;
	if (pcie_irq_rInterruptDi$EN)
	  pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptDi$D_IN;
	if (pcie_irq_rInterruptN$EN)
	  pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptN$D_IN;
	if (pcie_irq_rInterrupting$EN)
	  pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterrupting$D_IN;
      end
    if (p2iS$EN) p2iS <= `BSV_ASSIGNMENT_DELAY p2iS$D_IN;
    if (pcie_irq_rMMEnabled$EN)
      pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMMEnabled$D_IN;
    if (pcie_irq_rMSIEnabled$EN)
      pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMSIEnabled$D_IN;
  end

  always@(posedge pci0_pcie_ep$trn2_clk)
  begin
    if (!trn2_rst$OUT_RST_N)
      begin
        i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (i2pAF_tail_wrapped$EN)
	  i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY i2pAF_tail_wrapped$D_IN;
	if (p2iAF_head_wrapped$EN)
	  p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY p2iAF_head_wrapped$D_IN;
      end
    if (i2pS$EN) i2pS <= `BSV_ASSIGNMENT_DELAY i2pS$D_IN;
  end

  always@(posedge pci0_pcie_ep$trn_clk or
	  negedge i2pAF_dCombinedReset$RST_OUT)
  if (!i2pAF_dCombinedReset$RST_OUT)
    begin
      i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (i2pAF_dInReset_isInReset$EN)
	i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    i2pAF_dInReset_isInReset$D_IN;
    end

  always@(posedge pci0_pcie_ep$trn_clk or
	  negedge p2iAF_sCombinedReset$RST_OUT)
  if (!p2iAF_sCombinedReset$RST_OUT)
    begin
      p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (p2iAF_sInReset_isInReset$EN)
	p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    p2iAF_sInReset_isInReset$D_IN;
    end

  always@(posedge pci0_pcie_ep$trn2_clk or
	  negedge i2pAF_sCombinedReset$RST_OUT)
  if (!i2pAF_sCombinedReset$RST_OUT)
    begin
      i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (i2pAF_sInReset_isInReset$EN)
	i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    i2pAF_sInReset_isInReset$D_IN;
    end

  always@(posedge pci0_pcie_ep$trn2_clk or
	  negedge p2iAF_dCombinedReset$RST_OUT)
  if (!p2iAF_dCombinedReset$RST_OUT)
    begin
      p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (p2iAF_dInReset_isInReset$EN)
	p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    p2iAF_dInReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    Prelude_inst_changeSpecialWires_1_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    Prelude_inst_changeSpecialWires_2_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    i2pAF_dInReset_isInReset = 1'h0;
    i2pAF_head_wrapped = 1'h0;
    i2pAF_sInReset_isInReset = 1'h0;
    i2pAF_tail_wrapped = 1'h0;
    i2pS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    p2iAF_dInReset_isInReset = 1'h0;
    p2iAF_head_wrapped = 1'h0;
    p2iAF_sInReset_isInReset = 1'h0;
    p2iAF_tail_wrapped = 1'h0;
    p2iS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pcie_irq_rInterruptDi = 8'hAA;
    pcie_irq_rInterruptN = 1'h0;
    pcie_irq_rInterrupting = 1'h0;
    pcie_irq_rMMEnabled = 3'h2;
    pcie_irq_rMSIEnabled = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPCIEwrapV6

