//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Sat Jan  8 10:59:58 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// wci_s_SResp                    O     2 reg
// wci_s_SData                    O    32 reg
// wci_s_SThreadBusy              O     1
// wci_s_SFlag                    O     2
// flash_addr                     O    24 reg
// flash_ce_n                     O     1
// flash_oe_n                     O     1
// flash_we_n                     O     1
// flash_wp_n                     O     1 const
// flash_rst_n                    O     1 const
// flash_adv_n                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wci_s_MCmd                     I     3
// wci_s_MAddrSpace               I     1
// wci_s_MByteEn                  I     4
// wci_s_MAddr                    I    20
// wci_s_MData                    I    32
// wci_s_MFlag                    I     2 unused
// flash_fwait_i                  I     1 reg
// flash_io_dq                   IO    16 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFlashWorker(CLK,
		     RST_N,

		     .flash_io_dq(flashC_tsd$IO),

		     wci_s_MCmd,

		     wci_s_MAddrSpace,

		     wci_s_MByteEn,

		     wci_s_MAddr,

		     wci_s_MData,

		     wci_s_SResp,

		     wci_s_SData,

		     wci_s_SThreadBusy,

		     wci_s_SFlag,

		     wci_s_MFlag,

		     flash_addr,

		     flash_ce_n,

		     flash_oe_n,

		     flash_we_n,

		     flash_wp_n,

		     flash_rst_n,

		     flash_adv_n,

		     flash_fwait_i);
  input  CLK;
  input  RST_N;

  inout  [15 : 0] flashC_tsd$IO;

  // action method wci_s_mCmd
  input  [2 : 0] wci_s_MCmd;

  // action method wci_s_mAddrSpace
  input  wci_s_MAddrSpace;

  // action method wci_s_mByteEn
  input  [3 : 0] wci_s_MByteEn;

  // action method wci_s_mAddr
  input  [19 : 0] wci_s_MAddr;

  // action method wci_s_mData
  input  [31 : 0] wci_s_MData;

  // value method wci_s_sResp
  output [1 : 0] wci_s_SResp;

  // value method wci_s_sData
  output [31 : 0] wci_s_SData;

  // value method wci_s_sThreadBusy
  output wci_s_SThreadBusy;

  // value method wci_s_sFlag
  output [1 : 0] wci_s_SFlag;

  // action method wci_s_mFlag
  input  [1 : 0] wci_s_MFlag;

  // value method flash_addr
  output [23 : 0] flash_addr;

  // value method flash_ce_n
  output flash_ce_n;

  // value method flash_oe_n
  output flash_oe_n;

  // value method flash_we_n
  output flash_we_n;

  // value method flash_wp_n
  output flash_wp_n;

  // value method flash_rst_n
  output flash_rst_n;

  // value method flash_adv_n
  output flash_adv_n;

  // action method flash_fwait
  input  flash_fwait_i;

  // signals for module outputs
  wire [31 : 0] wci_s_SData;
  wire [23 : 0] flash_addr;
  wire [1 : 0] wci_s_SFlag, wci_s_SResp;
  wire flash_adv_n,
       flash_ce_n,
       flash_oe_n,
       flash_rst_n,
       flash_we_n,
       flash_wp_n,
       wci_s_SThreadBusy;

  // inlined wires
  wire [59 : 0] wci_wslv_wciReq$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget;
  wire [31 : 0] wci_wci_Es_mData_w$wget;
  wire [19 : 0] wci_wci_Es_mAddr_w$wget;
  wire [3 : 0] wci_wci_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wci_Es_mCmd_w$wget, wci_wslv_wEdge$wget;
  wire flashC_rseqFsm_abort$wget,
       flashC_rseqFsm_abort$whas,
       flashC_rseqFsm_pw_list$whas,
       flashC_rseqFsm_pw_list_1$whas,
       flashC_rseqFsm_pw_list_2$whas,
       flashC_rseqFsm_pw_list_3$whas,
       flashC_rseqFsm_pw_list_4$whas,
       flashC_rseqFsm_pw_list_5$whas,
       flashC_rseqFsm_pw_list_6$whas,
       flashC_rseqFsm_pw_list_7$whas,
       flashC_rseqFsm_pw_list_8$whas,
       flashC_rseqFsm_start_reg_1$wget,
       flashC_rseqFsm_start_reg_1$whas,
       flashC_rseqFsm_start_wire$wget,
       flashC_rseqFsm_start_wire$whas,
       flashC_rseqFsm_state_run_pw$whas,
       flashC_rseqFsm_state_start_pw$whas,
       flashC_wseqFsm_abort$wget,
       flashC_wseqFsm_abort$whas,
       flashC_wseqFsm_pw_list$whas,
       flashC_wseqFsm_pw_list_1$whas,
       flashC_wseqFsm_pw_list_2$whas,
       flashC_wseqFsm_pw_list_3$whas,
       flashC_wseqFsm_pw_list_4$whas,
       flashC_wseqFsm_pw_list_5$whas,
       flashC_wseqFsm_pw_list_6$whas,
       flashC_wseqFsm_pw_list_7$whas,
       flashC_wseqFsm_pw_list_8$whas,
       flashC_wseqFsm_pw_list_9$whas,
       flashC_wseqFsm_start_reg_1$wget,
       flashC_wseqFsm_start_reg_1$whas,
       flashC_wseqFsm_start_wire$wget,
       flashC_wseqFsm_start_wire$whas,
       flashC_wseqFsm_state_run_pw$whas,
       flashC_wseqFsm_state_start_pw$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas;

  // register aReg
  reg [31 : 0] aReg;
  wire [31 : 0] aReg$D_IN;
  wire aReg$EN;

  // register flashC_aReg
  reg [23 : 0] flashC_aReg;
  wire [23 : 0] flashC_aReg$D_IN;
  wire flashC_aReg$EN;

  // register flashC_ceReg
  reg flashC_ceReg;
  wire flashC_ceReg$D_IN, flashC_ceReg$EN;

  // register flashC_isRead
  reg flashC_isRead;
  wire flashC_isRead$D_IN, flashC_isRead$EN;

  // register flashC_oeReg
  reg flashC_oeReg;
  wire flashC_oeReg$D_IN, flashC_oeReg$EN;

  // register flashC_rseqFsm_repeat_count
  reg [3 : 0] flashC_rseqFsm_repeat_count;
  wire [3 : 0] flashC_rseqFsm_repeat_count$D_IN;
  wire flashC_rseqFsm_repeat_count$EN;

  // register flashC_rseqFsm_start_reg
  reg flashC_rseqFsm_start_reg;
  wire flashC_rseqFsm_start_reg$D_IN, flashC_rseqFsm_start_reg$EN;

  // register flashC_rseqFsm_state_mkFSMstate
  reg [3 : 0] flashC_rseqFsm_state_mkFSMstate;
  reg [3 : 0] flashC_rseqFsm_state_mkFSMstate$D_IN;
  wire flashC_rseqFsm_state_mkFSMstate$EN;

  // register flashC_rseqFsm_state_standby
  reg flashC_rseqFsm_state_standby;
  wire flashC_rseqFsm_state_standby$D_IN, flashC_rseqFsm_state_standby$EN;

  // register flashC_tsOE
  reg flashC_tsOE;
  wire flashC_tsOE$D_IN, flashC_tsOE$EN;

  // register flashC_tsWD
  reg [15 : 0] flashC_tsWD;
  wire [15 : 0] flashC_tsWD$D_IN;
  wire flashC_tsWD$EN;

  // register flashC_waitReg
  reg flashC_waitReg;
  wire flashC_waitReg$D_IN, flashC_waitReg$EN;

  // register flashC_wdReg
  reg [15 : 0] flashC_wdReg;
  wire [15 : 0] flashC_wdReg$D_IN;
  wire flashC_wdReg$EN;

  // register flashC_weReg
  reg flashC_weReg;
  wire flashC_weReg$D_IN, flashC_weReg$EN;

  // register flashC_wseqFsm_repeat_count
  reg [3 : 0] flashC_wseqFsm_repeat_count;
  wire [3 : 0] flashC_wseqFsm_repeat_count$D_IN;
  wire flashC_wseqFsm_repeat_count$EN;

  // register flashC_wseqFsm_start_reg
  reg flashC_wseqFsm_start_reg;
  wire flashC_wseqFsm_start_reg$D_IN, flashC_wseqFsm_start_reg$EN;

  // register flashC_wseqFsm_state_mkFSMstate
  reg [3 : 0] flashC_wseqFsm_state_mkFSMstate;
  reg [3 : 0] flashC_wseqFsm_state_mkFSMstate$D_IN;
  wire flashC_wseqFsm_state_mkFSMstate$EN;

  // register flashC_wseqFsm_state_standby
  reg flashC_wseqFsm_state_standby;
  wire flashC_wseqFsm_state_standby$D_IN, flashC_wseqFsm_state_standby$EN;

  // register flashCtrl
  reg [31 : 0] flashCtrl;
  wire [31 : 0] flashCtrl$D_IN;
  wire flashCtrl$EN;

  // register rdReg
  reg [31 : 0] rdReg;
  wire [31 : 0] rdReg$D_IN;
  wire rdReg$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wdReg
  reg [31 : 0] wdReg;
  wire [31 : 0] wdReg$D_IN;
  wire wdReg$EN;

  // ports of submodule flashC_reqF
  wire [40 : 0] flashC_reqF$D_IN, flashC_reqF$D_OUT;
  wire flashC_reqF$CLR,
       flashC_reqF$DEQ,
       flashC_reqF$EMPTY_N,
       flashC_reqF$ENQ,
       flashC_reqF$FULL_N;

  // ports of submodule flashC_respF
  wire [15 : 0] flashC_respF$D_IN, flashC_respF$D_OUT;
  wire flashC_respF$CLR,
       flashC_respF$DEQ,
       flashC_respF$EMPTY_N,
       flashC_respF$ENQ,
       flashC_respF$FULL_N;

  // ports of submodule flashC_tsd
  wire [15 : 0] flashC_tsd$IO, flashC_tsd$O;

  // ports of submodule wci_wslv_isReset
  wire wci_wslv_isReset$VAL;

  // ports of submodule wci_wslv_reqF
  wire [59 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_advance_response,
       CAN_FIRE_RL_flashC_nextRequest,
       CAN_FIRE_RL_flashC_rseqFsm_action_l56c15,
       CAN_FIRE_RL_flashC_rseqFsm_action_l57c12,
       CAN_FIRE_RL_flashC_rseqFsm_action_l58c12,
       CAN_FIRE_RL_flashC_rseqFsm_action_l60c10,
       CAN_FIRE_RL_flashC_rseqFsm_action_l61c12,
       CAN_FIRE_RL_flashC_rseqFsm_action_l62c12,
       CAN_FIRE_RL_flashC_rseqFsm_action_np,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_1,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_2,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_3,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_4,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_5,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_6,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l57c12,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l58c12,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l60c10,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l61c12,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_l62c12,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_np,
       CAN_FIRE_RL_flashC_rseqFsm_actionof_np_1,
       CAN_FIRE_RL_flashC_rseqFsm_fsm_start,
       CAN_FIRE_RL_flashC_rseqFsm_start_reg__dreg_update,
       CAN_FIRE_RL_flashC_rseqFsm_state_update_standby,
       CAN_FIRE_RL_flashC_wseqFsm_action_l66c15,
       CAN_FIRE_RL_flashC_wseqFsm_action_l67c12,
       CAN_FIRE_RL_flashC_wseqFsm_action_l68c12,
       CAN_FIRE_RL_flashC_wseqFsm_action_l69c12,
       CAN_FIRE_RL_flashC_wseqFsm_action_l71c12,
       CAN_FIRE_RL_flashC_wseqFsm_action_l72c12,
       CAN_FIRE_RL_flashC_wseqFsm_action_l73c12,
       CAN_FIRE_RL_flashC_wseqFsm_action_np,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_1,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_2,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_3,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_4,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_5,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_6,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_7,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l67c12,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l68c12,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l69c12,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l71c12,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l72c12,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_l73c12,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_np,
       CAN_FIRE_RL_flashC_wseqFsm_actionof_np_1,
       CAN_FIRE_RL_flashC_wseqFsm_fsm_start,
       CAN_FIRE_RL_flashC_wseqFsm_start_reg__dreg_update,
       CAN_FIRE_RL_flashC_wseqFsm_state_update_standby,
       CAN_FIRE_RL_wci_cfrd,
       CAN_FIRE_RL_wci_cfwr,
       CAN_FIRE_RL_wci_ctrl_EiI,
       CAN_FIRE_RL_wci_ctrl_IsO,
       CAN_FIRE_RL_wci_ctrl_OrE,
       CAN_FIRE_RL_wci_wci_Es_doAlways_Req,
       CAN_FIRE_RL_wci_wslv_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wci_wslv_ctl_op_complete,
       CAN_FIRE_RL_wci_wslv_ctl_op_start,
       CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter,
       CAN_FIRE_RL_wci_wslv_reqF_enq,
       CAN_FIRE_RL_wci_wslv_request_decode,
       CAN_FIRE_RL_wci_wslv_respF_both,
       CAN_FIRE_RL_wci_wslv_respF_decCtr,
       CAN_FIRE_RL_wci_wslv_respF_deq,
       CAN_FIRE_RL_wci_wslv_respF_incCtr,
       CAN_FIRE_RL_wci_wslv_sFlagReg__dreg_update,
       CAN_FIRE_RL_wci_wslv_sThreadBusy_reg,
       CAN_FIRE_flash_fwait,
       CAN_FIRE_wci_s_mAddr,
       CAN_FIRE_wci_s_mAddrSpace,
       CAN_FIRE_wci_s_mByteEn,
       CAN_FIRE_wci_s_mCmd,
       CAN_FIRE_wci_s_mData,
       CAN_FIRE_wci_s_mFlag,
       WILL_FIRE_RL_advance_response,
       WILL_FIRE_RL_flashC_nextRequest,
       WILL_FIRE_RL_flashC_rseqFsm_action_l56c15,
       WILL_FIRE_RL_flashC_rseqFsm_action_l57c12,
       WILL_FIRE_RL_flashC_rseqFsm_action_l58c12,
       WILL_FIRE_RL_flashC_rseqFsm_action_l60c10,
       WILL_FIRE_RL_flashC_rseqFsm_action_l61c12,
       WILL_FIRE_RL_flashC_rseqFsm_action_l62c12,
       WILL_FIRE_RL_flashC_rseqFsm_action_np,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_1,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_2,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_3,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_4,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_5,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_6,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l57c12,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l58c12,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l60c10,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_np,
       WILL_FIRE_RL_flashC_rseqFsm_actionof_np_1,
       WILL_FIRE_RL_flashC_rseqFsm_fsm_start,
       WILL_FIRE_RL_flashC_rseqFsm_start_reg__dreg_update,
       WILL_FIRE_RL_flashC_rseqFsm_state_update_standby,
       WILL_FIRE_RL_flashC_wseqFsm_action_l66c15,
       WILL_FIRE_RL_flashC_wseqFsm_action_l67c12,
       WILL_FIRE_RL_flashC_wseqFsm_action_l68c12,
       WILL_FIRE_RL_flashC_wseqFsm_action_l69c12,
       WILL_FIRE_RL_flashC_wseqFsm_action_l71c12,
       WILL_FIRE_RL_flashC_wseqFsm_action_l72c12,
       WILL_FIRE_RL_flashC_wseqFsm_action_l73c12,
       WILL_FIRE_RL_flashC_wseqFsm_action_np,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_1,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_2,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_3,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_4,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_5,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_6,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_7,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l67c12,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l68c12,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l69c12,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_np,
       WILL_FIRE_RL_flashC_wseqFsm_actionof_np_1,
       WILL_FIRE_RL_flashC_wseqFsm_fsm_start,
       WILL_FIRE_RL_flashC_wseqFsm_start_reg__dreg_update,
       WILL_FIRE_RL_flashC_wseqFsm_state_update_standby,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wci_Es_doAlways_Req,
       WILL_FIRE_RL_wci_wslv_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_reqF__updateLevelCounter,
       WILL_FIRE_RL_wci_wslv_reqF_enq,
       WILL_FIRE_RL_wci_wslv_request_decode,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_deq,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wci_wslv_sFlagReg__dreg_update,
       WILL_FIRE_RL_wci_wslv_sThreadBusy_reg,
       WILL_FIRE_flash_fwait,
       WILL_FIRE_wci_s_mAddr,
       WILL_FIRE_wci_s_mAddrSpace,
       WILL_FIRE_wci_s_mByteEn,
       WILL_FIRE_wci_s_mCmd,
       WILL_FIRE_wci_s_mData,
       WILL_FIRE_wci_s_mFlag;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [40 : 0] MUX_flashC_reqF$enq_1__VAL_1, MUX_flashC_reqF$enq_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [31 : 0] MUX_rdReg$write_1__VAL_2;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2;
  wire MUX_flashC_ceReg$write_1__SEL_1,
       MUX_flashC_reqF$enq_1__SEL_1,
       MUX_rdReg$write_1__SEL_1,
       MUX_splitReadInFlight$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__VAL_1,
       MUX_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_wci_wslv_respF_x_wire$wset_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h31448, v__h3554, v__h3728, v__h3872;
  reg [31 : 0] CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1;
  wire [31 : 0] flashStatus__h30432, g_data__h31309;
  wire [23 : 0] x_addr__h31209;
  wire [3 : 0] x__h16135, x__h29273;
  wire NOT_wci_wslv_respF_c_r_2_EQ_2_1_2_AND_wci_wslv_ETC___d382,
       flashC_reqF_i_notEmpty__28_AND_IF_flashC_reqF__ETC___d348,
       wci_wslv_reqF_i_notEmpty__3_AND_IF_wci_wslv_re_ETC___d404;

  // action method wci_s_mCmd
  assign CAN_FIRE_wci_s_mCmd = 1'd1 ;
  assign WILL_FIRE_wci_s_mCmd = 1'd1 ;

  // action method wci_s_mAddrSpace
  assign CAN_FIRE_wci_s_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wci_s_mAddrSpace = 1'd1 ;

  // action method wci_s_mByteEn
  assign CAN_FIRE_wci_s_mByteEn = 1'd1 ;
  assign WILL_FIRE_wci_s_mByteEn = 1'd1 ;

  // action method wci_s_mAddr
  assign CAN_FIRE_wci_s_mAddr = 1'd1 ;
  assign WILL_FIRE_wci_s_mAddr = 1'd1 ;

  // action method wci_s_mData
  assign CAN_FIRE_wci_s_mData = 1'd1 ;
  assign WILL_FIRE_wci_s_mData = 1'd1 ;

  // value method wci_s_sResp
  assign wci_s_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wci_s_sData
  assign wci_s_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wci_s_sThreadBusy
  assign wci_s_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset$VAL ;

  // value method wci_s_sFlag
  assign wci_s_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // action method wci_s_mFlag
  assign CAN_FIRE_wci_s_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_mFlag = 1'd1 ;

  // value method flash_addr
  assign flash_addr = flashC_aReg ;

  // value method flash_ce_n
  assign flash_ce_n = !flashC_ceReg ;

  // value method flash_oe_n
  assign flash_oe_n = !flashC_oeReg ;

  // value method flash_we_n
  assign flash_we_n = !flashC_weReg ;

  // value method flash_wp_n
  assign flash_wp_n = 1'b1 ;

  // value method flash_rst_n
  assign flash_rst_n = 1'b1 ;

  // value method flash_adv_n
  assign flash_adv_n = 1'b1 ;

  // action method flash_fwait
  assign CAN_FIRE_flash_fwait = 1'd1 ;
  assign WILL_FIRE_flash_fwait = 1'd1 ;

  // submodule flashC_reqF
  FIFO2 #(.width(32'd41), .guarded(32'd1)) flashC_reqF(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(flashC_reqF$D_IN),
						       .ENQ(flashC_reqF$ENQ),
						       .DEQ(flashC_reqF$DEQ),
						       .CLR(flashC_reqF$CLR),
						       .D_OUT(flashC_reqF$D_OUT),
						       .FULL_N(flashC_reqF$FULL_N),
						       .EMPTY_N(flashC_reqF$EMPTY_N));

  // submodule flashC_respF
  FIFO2 #(.width(32'd16), .guarded(32'd1)) flashC_respF(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(flashC_respF$D_IN),
							.ENQ(flashC_respF$ENQ),
							.DEQ(flashC_respF$DEQ),
							.CLR(flashC_respF$CLR),
							.D_OUT(flashC_respF$D_OUT),
							.FULL_N(flashC_respF$FULL_N),
							.EMPTY_N(flashC_respF$EMPTY_N));

  // submodule flashC_tsd
  TriState #(.width(32'd16)) flashC_tsd(.I(flashC_tsWD),
					.OE(flashC_tsOE),
					.O(flashC_tsd$O),
					.IO(flashC_tsd$IO));

  // submodule wci_wslv_isReset
  ResetToBool wci_wslv_isReset(.RST(RST_N), .VAL(wci_wslv_isReset$VAL));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // rule RL_wci_wslv_request_decode
  assign CAN_FIRE_RL_wci_wslv_request_decode = wci_wslv_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wci_wslv_request_decode = wci_wslv_reqF$EMPTY_N ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wci_wslv_reqF_i_notEmpty__3_AND_IF_wci_wslv_re_ETC___d404 &&
	     wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_advance_response
  assign CAN_FIRE_RL_advance_response =
	     flashC_respF$EMPTY_N &&
	     (!splitReadInFlight || wci_wslv_respF_c_r != 2'd2) &&
	     !wci_wslv_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_advance_response =
	     CAN_FIRE_RL_advance_response &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wci_wslv_reqF$EMPTY_N &&
	     NOT_wci_wslv_respF_c_r_2_EQ_2_1_2_AND_wci_wslv_ETC___d382 &&
	     wci_wslv_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_wslv_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_sThreadBusy_reg = 1'd1 ;

  // rule RL_wci_wslv_respF_deq
  assign CAN_FIRE_RL_wci_wslv_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_respF_deq = 1'd1 ;

  // rule RL_wci_wslv_ctl_op_start
  assign CAN_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     CAN_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_IsO
  assign CAN_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_wci_ctrl_IsO = CAN_FIRE_RL_wci_ctrl_IsO ;

  // rule RL_wci_ctrl_EiI
  assign CAN_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_wci_ctrl_EiI = CAN_FIRE_RL_wci_ctrl_EiI ;

  // rule RL_wci_ctrl_OrE
  assign CAN_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_wci_ctrl_OrE = CAN_FIRE_RL_wci_ctrl_OrE ;

  // rule RL_wci_wslv_ctl_op_complete
  assign CAN_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     CAN_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_respF_incCtr
  assign CAN_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     CAN_FIRE_RL_wci_wslv_respF_incCtr ;

  // rule RL_wci_wslv_respF_decCtr
  assign CAN_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     CAN_FIRE_RL_wci_wslv_respF_decCtr ;

  // rule RL_wci_wslv_respF_both
  assign CAN_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_wslv_respF_both = CAN_FIRE_RL_wci_wslv_respF_both ;

  // rule RL_wci_wslv_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wci_wslv_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wci_wslv_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wci_wslv_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_wci_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_wci_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_wci_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_wci_wslv_reqF_enq
  assign CAN_FIRE_RL_wci_wslv_reqF_enq = wci_wslv_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_wci_wslv_reqF_enq = CAN_FIRE_RL_wci_wslv_reqF_enq ;

  // rule RL_wci_wslv_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter =
	     (wci_wslv_wciReq$wget[59:57] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_wci_wslv_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter ;

  // rule RL_flashC_nextRequest
  assign CAN_FIRE_RL_flashC_nextRequest =
	     flashC_reqF_i_notEmpty__28_AND_IF_flashC_reqF__ETC___d348 &&
	     (flashC_rseqFsm_state_mkFSMstate == 4'd7 ||
	      flashC_rseqFsm_state_mkFSMstate == 4'd1 &&
	      !flashC_rseqFsm_state_standby) &&
	     !flashC_rseqFsm_start_reg &&
	     (flashC_wseqFsm_state_mkFSMstate == 4'd8 ||
	      flashC_wseqFsm_state_mkFSMstate == 4'd1 &&
	      !flashC_wseqFsm_state_standby) &&
	     !flashC_wseqFsm_start_reg ;
  assign WILL_FIRE_RL_flashC_nextRequest = CAN_FIRE_RL_flashC_nextRequest ;

  // rule RL_flashC_rseqFsm_actionof_l58c12
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l58c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l58c12 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l58c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l58c12 ;

  // rule RL_flashC_rseqFsm_action_l58c12
  assign CAN_FIRE_RL_flashC_rseqFsm_action_l58c12 =
	     flashC_rseqFsm_state_mkFSMstate == 4'd2 && flashC_isRead ;
  assign WILL_FIRE_RL_flashC_rseqFsm_action_l58c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l58c12 ;

  // rule RL_flashC_rseqFsm_actionof_np
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_np =
	     flashC_rseqFsm_state_mkFSMstate == 4'd3 && flashC_isRead ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_np =
	     CAN_FIRE_RL_flashC_rseqFsm_actionof_np ;

  // rule RL_flashC_rseqFsm_actionof_np_1
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_np_1 =
	     flashC_rseqFsm_state_mkFSMstate == 4'd4 &&
	     flashC_rseqFsm_repeat_count != 4'd0 &&
	     flashC_isRead ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_np_1 =
	     CAN_FIRE_RL_flashC_rseqFsm_actionof_np_1 ;

  // rule RL_flashC_rseqFsm_action_np
  assign CAN_FIRE_RL_flashC_rseqFsm_action_np =
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_np ;
  assign WILL_FIRE_RL_flashC_rseqFsm_action_np =
	     CAN_FIRE_RL_flashC_rseqFsm_action_np ;

  // rule RL_flashC_rseqFsm_actionof_l60c10
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l60c10 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l60c10 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l60c10 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l60c10 ;

  // rule RL_flashC_rseqFsm_action_l60c10
  assign CAN_FIRE_RL_flashC_rseqFsm_action_l60c10 =
	     flashC_respF$FULL_N && flashC_rseqFsm_state_mkFSMstate == 4'd4 &&
	     flashC_rseqFsm_repeat_count == 4'd0 &&
	     flashC_isRead ;
  assign WILL_FIRE_RL_flashC_rseqFsm_action_l60c10 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l60c10 ;

  // rule RL_flashC_rseqFsm_actionof_l61c12
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l61c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l61c12 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l61c12 ;

  // rule RL_flashC_rseqFsm_action_l61c12
  assign CAN_FIRE_RL_flashC_rseqFsm_action_l61c12 =
	     flashC_rseqFsm_state_mkFSMstate == 4'd5 && flashC_isRead ;
  assign WILL_FIRE_RL_flashC_rseqFsm_action_l61c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l61c12 ;

  // rule RL_flashC_rseqFsm_actionof_l62c12
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l62c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l62c12 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l62c12 ;

  // rule RL_flashC_rseqFsm_action_l62c12
  assign CAN_FIRE_RL_flashC_rseqFsm_action_l62c12 =
	     flashC_rseqFsm_state_mkFSMstate == 4'd6 && flashC_isRead ;
  assign WILL_FIRE_RL_flashC_rseqFsm_action_l62c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l62c12 ;

  // rule RL_flashC_rseqFsm_fsm_start
  assign CAN_FIRE_RL_flashC_rseqFsm_fsm_start =
	     (flashC_rseqFsm_state_mkFSMstate == 4'd7 ||
	      flashC_rseqFsm_state_mkFSMstate == 4'd1 &&
	      !flashC_rseqFsm_state_standby) &&
	     flashC_rseqFsm_start_reg ;
  assign WILL_FIRE_RL_flashC_rseqFsm_fsm_start =
	     CAN_FIRE_RL_flashC_rseqFsm_fsm_start ;

  // rule RL_flashC_rseqFsm_actionof_l56c15
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15 = 1'b0 ;

  // rule RL_flashC_rseqFsm_actionof_l56c15_1
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_1 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_1 = 1'b0 ;

  // rule RL_flashC_rseqFsm_actionof_l56c15_3
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_3 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_3 = 1'b0 ;

  // rule RL_flashC_rseqFsm_actionof_l56c15_2
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_2 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_2 = 1'b0 ;

  // rule RL_flashC_rseqFsm_actionof_l56c15_4
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_4 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_4 = 1'b0 ;

  // rule RL_flashC_rseqFsm_actionof_l56c15_5
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_5 =
	     flashC_rseqFsm_state_mkFSMstate == 4'd7 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_5 =
	     CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_5 ;

  // rule RL_flashC_rseqFsm_actionof_l56c15_6
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_6 =
	     flashC_rseqFsm_state_mkFSMstate == 4'd1 &&
	     !CAN_FIRE_RL_flashC_rseqFsm_fsm_start &&
	     !flashC_rseqFsm_state_standby ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_6 =
	     CAN_FIRE_RL_flashC_rseqFsm_actionof_l56c15_6 ;

  // rule RL_flashC_rseqFsm_action_l56c15
  assign CAN_FIRE_RL_flashC_rseqFsm_action_l56c15 =
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_6 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_5 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_action_l56c15 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l56c15 ;

  // rule RL_flashC_rseqFsm_actionof_l57c12
  assign CAN_FIRE_RL_flashC_rseqFsm_actionof_l57c12 =
	     flashC_rseqFsm_state_mkFSMstate == 4'd1 &&
	     (CAN_FIRE_RL_flashC_rseqFsm_fsm_start ||
	      flashC_rseqFsm_state_standby) &&
	     flashC_isRead ;
  assign WILL_FIRE_RL_flashC_rseqFsm_actionof_l57c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l57c12 ;

  // rule RL_flashC_rseqFsm_action_l57c12
  assign CAN_FIRE_RL_flashC_rseqFsm_action_l57c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_actionof_l57c12 &&
	     !WILL_FIRE_RL_flashC_nextRequest ;
  assign WILL_FIRE_RL_flashC_rseqFsm_action_l57c12 =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l57c12 ;

  // rule RL_flashC_rseqFsm_start_reg__dreg_update
  assign CAN_FIRE_RL_flashC_rseqFsm_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_flashC_rseqFsm_start_reg__dreg_update = 1'd1 ;

  // rule RL_flashC_rseqFsm_state_update_standby
  assign CAN_FIRE_RL_flashC_rseqFsm_state_update_standby =
	     flashC_rseqFsm_state_run_pw$whas ||
	     CAN_FIRE_RL_flashC_rseqFsm_fsm_start ;
  assign WILL_FIRE_RL_flashC_rseqFsm_state_update_standby =
	     CAN_FIRE_RL_flashC_rseqFsm_state_update_standby ;

  // rule RL_flashC_wseqFsm_actionof_l68c12
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l68c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l68c12 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l68c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l68c12 ;

  // rule RL_flashC_wseqFsm_action_l68c12
  assign CAN_FIRE_RL_flashC_wseqFsm_action_l68c12 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd2 && !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_l68c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l68c12 ;

  // rule RL_flashC_wseqFsm_actionof_l69c12
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l69c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l69c12 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l69c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l69c12 ;

  // rule RL_flashC_wseqFsm_action_l69c12
  assign CAN_FIRE_RL_flashC_wseqFsm_action_l69c12 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd3 && !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_l69c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l69c12 ;

  // rule RL_flashC_wseqFsm_actionof_np
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_np =
	     flashC_wseqFsm_state_mkFSMstate == 4'd4 && !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_np =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_np ;

  // rule RL_flashC_wseqFsm_actionof_np_1
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_np_1 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd5 &&
	     flashC_wseqFsm_repeat_count != 4'd0 &&
	     !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_np_1 =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_np_1 ;

  // rule RL_flashC_wseqFsm_action_np
  assign CAN_FIRE_RL_flashC_wseqFsm_action_np =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_np ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_np =
	     CAN_FIRE_RL_flashC_wseqFsm_action_np ;

  // rule RL_flashC_wseqFsm_actionof_l71c12
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l71c12 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd5 &&
	     flashC_wseqFsm_repeat_count == 4'd0 &&
	     !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ;

  // rule RL_flashC_wseqFsm_action_l71c12
  assign CAN_FIRE_RL_flashC_wseqFsm_action_l71c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_l71c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ;

  // rule RL_flashC_wseqFsm_actionof_l72c12
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l72c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l72c12 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l72c12 ;

  // rule RL_flashC_wseqFsm_action_l72c12
  assign CAN_FIRE_RL_flashC_wseqFsm_action_l72c12 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd6 && !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_l72c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l72c12 ;

  // rule RL_flashC_wseqFsm_actionof_l73c12
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l73c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l73c12 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l73c12 ;

  // rule RL_flashC_wseqFsm_action_l73c12
  assign CAN_FIRE_RL_flashC_wseqFsm_action_l73c12 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd7 && !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_l73c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l73c12 ;

  // rule RL_flashC_wseqFsm_fsm_start
  assign CAN_FIRE_RL_flashC_wseqFsm_fsm_start =
	     (flashC_wseqFsm_state_mkFSMstate == 4'd8 ||
	      flashC_wseqFsm_state_mkFSMstate == 4'd1 &&
	      !flashC_wseqFsm_state_standby) &&
	     flashC_wseqFsm_start_reg ;
  assign WILL_FIRE_RL_flashC_wseqFsm_fsm_start =
	     CAN_FIRE_RL_flashC_wseqFsm_fsm_start ;

  // rule RL_flashC_wseqFsm_actionof_l66c15
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15 = 1'b0 ;

  // rule RL_flashC_wseqFsm_actionof_l66c15_1
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_1 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_1 = 1'b0 ;

  // rule RL_flashC_wseqFsm_actionof_l66c15_2
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_2 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_2 = 1'b0 ;

  // rule RL_flashC_wseqFsm_actionof_l66c15_3
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_3 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_3 = 1'b0 ;

  // rule RL_flashC_wseqFsm_actionof_l66c15_5
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_5 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_5 = 1'b0 ;

  // rule RL_flashC_wseqFsm_actionof_l66c15_4
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_4 = 1'b0 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_4 = 1'b0 ;

  // rule RL_flashC_wseqFsm_actionof_l66c15_6
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_6 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd8 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_6 =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_6 ;

  // rule RL_flashC_wseqFsm_actionof_l66c15_7
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_7 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd1 &&
	     !CAN_FIRE_RL_flashC_wseqFsm_fsm_start &&
	     !flashC_wseqFsm_state_standby ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_7 =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_l66c15_7 ;

  // rule RL_flashC_wseqFsm_action_l66c15
  assign CAN_FIRE_RL_flashC_wseqFsm_action_l66c15 =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_7 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_6 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_l66c15 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l66c15 ;

  // rule RL_flashC_wseqFsm_actionof_l67c12
  assign CAN_FIRE_RL_flashC_wseqFsm_actionof_l67c12 =
	     flashC_wseqFsm_state_mkFSMstate == 4'd1 &&
	     (CAN_FIRE_RL_flashC_wseqFsm_fsm_start ||
	      flashC_wseqFsm_state_standby) &&
	     !flashC_isRead ;
  assign WILL_FIRE_RL_flashC_wseqFsm_actionof_l67c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l67c12 ;

  // rule RL_flashC_wseqFsm_action_l67c12
  assign CAN_FIRE_RL_flashC_wseqFsm_action_l67c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_l67c12 &&
	     !WILL_FIRE_RL_flashC_nextRequest ;
  assign WILL_FIRE_RL_flashC_wseqFsm_action_l67c12 =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l67c12 ;

  // rule RL_flashC_wseqFsm_start_reg__dreg_update
  assign CAN_FIRE_RL_flashC_wseqFsm_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_flashC_wseqFsm_start_reg__dreg_update = 1'd1 ;

  // rule RL_flashC_wseqFsm_state_update_standby
  assign CAN_FIRE_RL_flashC_wseqFsm_state_update_standby =
	     flashC_wseqFsm_state_run_pw$whas ||
	     CAN_FIRE_RL_flashC_wseqFsm_fsm_start ;
  assign WILL_FIRE_RL_flashC_wseqFsm_state_update_standby =
	     CAN_FIRE_RL_flashC_wseqFsm_state_update_standby ;

  // inputs to muxes for submodule ports
  assign MUX_flashC_ceReg$write_1__SEL_1 =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12 ;
  assign MUX_flashC_reqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF$D_OUT[39:32] == 8'h14 ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h18) ;
  assign MUX_rdReg$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h10 ;
  assign MUX_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ;
  assign MUX_flashC_reqF$enq_1__VAL_1 =
	     { wci_wslv_reqF$D_OUT[39:32] != 8'h14,
	       aReg[23:0],
	       wdReg[15:0] } ;
  assign MUX_flashC_reqF$enq_1__VAL_2 = { 1'd1, x_addr__h31209, 16'hAAAA } ;
  assign MUX_rdReg$write_1__VAL_2 = { 16'd0, flashC_respF$D_OUT } ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_1 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       wci_wslv_respF_q_1 ;
  always@(MUX_splitReadInFlight$write_1__SEL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__SEL_2 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_splitReadInFlight$write_1__SEL_1:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      MUX_wci_wslv_respF_x_wire$wset_1__SEL_2:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 18'd65536, flashC_respF$D_OUT } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 = { 2'd1, g_data__h31309 } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wci_s_MCmd,
	       wci_s_MAddrSpace,
	       wci_s_MByteEn,
	       wci_s_MAddr,
	       wci_s_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w$wget = wci_s_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wci_s_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wci_s_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wci_s_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wci_s_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign flashC_rseqFsm_start_reg_1$wget = 1'd1 ;
  assign flashC_rseqFsm_start_reg_1$whas =
	     WILL_FIRE_RL_flashC_nextRequest && flashC_reqF$D_OUT[40] ;
  assign flashC_rseqFsm_start_wire$wget = 1'd1 ;
  assign flashC_rseqFsm_start_wire$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_fsm_start ;
  assign flashC_rseqFsm_abort$wget = 1'b0 ;
  assign flashC_rseqFsm_abort$whas = 1'b0 ;
  assign flashC_wseqFsm_start_reg_1$wget = 1'd1 ;
  assign flashC_wseqFsm_start_reg_1$whas =
	     WILL_FIRE_RL_flashC_nextRequest && !flashC_reqF$D_OUT[40] ;
  assign flashC_wseqFsm_start_wire$wget = 1'd1 ;
  assign flashC_wseqFsm_start_wire$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_fsm_start ;
  assign flashC_wseqFsm_abort$wget = 1'b0 ;
  assign flashC_wseqFsm_abort$whas = 1'b0 ;
  assign wci_wslv_reqF_r_enq$whas = CAN_FIRE_RL_wci_wslv_reqF_enq ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[56] &&
	     wci_wslv_reqF$D_OUT[59:57] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[56] &&
	     wci_wslv_reqF$D_OUT[59:57] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[56] &&
	     wci_wslv_reqF$D_OUT[59:57] == 3'd2 ;
  assign flashC_rseqFsm_state_run_pw$whas =
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l60c10 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_np ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l58c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l57c12 ;
  assign flashC_rseqFsm_state_start_pw$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_fsm_start ;
  assign flashC_rseqFsm_pw_list$whas = 1'b0 ;
  assign flashC_rseqFsm_pw_list_1$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l56c15 ;
  assign flashC_rseqFsm_pw_list_2$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l57c12 ;
  assign flashC_rseqFsm_pw_list_3$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l58c12 ;
  assign flashC_rseqFsm_pw_list_4$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_action_np ;
  assign flashC_rseqFsm_pw_list_5$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l60c10 ;
  assign flashC_rseqFsm_pw_list_6$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l61c12 ;
  assign flashC_rseqFsm_pw_list_7$whas =
	     CAN_FIRE_RL_flashC_rseqFsm_action_l62c12 ;
  assign flashC_rseqFsm_pw_list_8$whas = 1'b0 ;
  assign flashC_wseqFsm_state_run_pw$whas =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_np ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l69c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l68c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l67c12 ;
  assign flashC_wseqFsm_state_start_pw$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_fsm_start ;
  assign flashC_wseqFsm_pw_list$whas = 1'b0 ;
  assign flashC_wseqFsm_pw_list_1$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l66c15 ;
  assign flashC_wseqFsm_pw_list_2$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l67c12 ;
  assign flashC_wseqFsm_pw_list_3$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l68c12 ;
  assign flashC_wseqFsm_pw_list_4$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l69c12 ;
  assign flashC_wseqFsm_pw_list_5$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_action_np ;
  assign flashC_wseqFsm_pw_list_6$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ;
  assign flashC_wseqFsm_pw_list_7$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l72c12 ;
  assign flashC_wseqFsm_pw_list_8$whas =
	     CAN_FIRE_RL_flashC_wseqFsm_action_l73c12 ;
  assign flashC_wseqFsm_pw_list_9$whas = 1'b0 ;

  // register aReg
  assign aReg$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign aReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;

  // register flashC_aReg
  assign flashC_aReg$D_IN = flashC_reqF$D_OUT[39:16] ;
  assign flashC_aReg$EN = CAN_FIRE_RL_flashC_nextRequest ;

  // register flashC_ceReg
  assign flashC_ceReg$D_IN = !MUX_flashC_ceReg$write_1__SEL_1 ;
  assign flashC_ceReg$EN =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l67c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l57c12 ;

  // register flashC_isRead
  assign flashC_isRead$D_IN = flashC_reqF$D_OUT[40] ;
  assign flashC_isRead$EN = CAN_FIRE_RL_flashC_nextRequest ;

  // register flashC_oeReg
  assign flashC_oeReg$D_IN = !WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12 ;
  assign flashC_oeReg$EN =
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l58c12 ;

  // register flashC_rseqFsm_repeat_count
  assign flashC_rseqFsm_repeat_count$D_IN =
	     (flashC_rseqFsm_repeat_count == 4'd14) ? 4'd0 : x__h16135 ;
  assign flashC_rseqFsm_repeat_count$EN =
	     CAN_FIRE_RL_flashC_rseqFsm_action_np ;

  // register flashC_rseqFsm_start_reg
  assign flashC_rseqFsm_start_reg$D_IN = flashC_rseqFsm_start_reg_1$whas ;
  assign flashC_rseqFsm_start_reg$EN = 1'd1 ;

  // register flashC_rseqFsm_state_mkFSMstate
  always@(CAN_FIRE_RL_flashC_rseqFsm_action_l56c15 or
	  WILL_FIRE_RL_flashC_rseqFsm_actionof_l57c12 or
	  WILL_FIRE_RL_flashC_rseqFsm_actionof_l58c12 or
	  CAN_FIRE_RL_flashC_rseqFsm_action_np or
	  WILL_FIRE_RL_flashC_rseqFsm_actionof_l60c10 or
	  WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12 or
	  WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12)
  begin
    case (1'b1) // synopsys parallel_case
      CAN_FIRE_RL_flashC_rseqFsm_action_l56c15:
	  flashC_rseqFsm_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_flashC_rseqFsm_actionof_l57c12:
	  flashC_rseqFsm_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_flashC_rseqFsm_actionof_l58c12:
	  flashC_rseqFsm_state_mkFSMstate$D_IN = 4'd3;
      CAN_FIRE_RL_flashC_rseqFsm_action_np:
	  flashC_rseqFsm_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_flashC_rseqFsm_actionof_l60c10:
	  flashC_rseqFsm_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12:
	  flashC_rseqFsm_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12:
	  flashC_rseqFsm_state_mkFSMstate$D_IN = 4'd7;
      default: flashC_rseqFsm_state_mkFSMstate$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign flashC_rseqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_6 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l56c15_5 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l57c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l58c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_np ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l60c10 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l61c12 ||
	     WILL_FIRE_RL_flashC_rseqFsm_actionof_l62c12 ;

  // register flashC_rseqFsm_state_standby
  assign flashC_rseqFsm_state_standby$D_IN =
	     !flashC_rseqFsm_state_run_pw$whas ;
  assign flashC_rseqFsm_state_standby$EN =
	     CAN_FIRE_RL_flashC_rseqFsm_state_update_standby ;

  // register flashC_tsOE
  assign flashC_tsOE$D_IN = !WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12 ;
  assign flashC_tsOE$EN =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l68c12 ;

  // register flashC_tsWD
  assign flashC_tsWD$D_IN = flashC_reqF$D_OUT[15:0] ;
  assign flashC_tsWD$EN = CAN_FIRE_RL_flashC_nextRequest ;

  // register flashC_waitReg
  assign flashC_waitReg$D_IN = flash_fwait_i ;
  assign flashC_waitReg$EN = 1'd1 ;

  // register flashC_wdReg
  assign flashC_wdReg$D_IN = 16'h0 ;
  assign flashC_wdReg$EN = 1'b0 ;

  // register flashC_weReg
  assign flashC_weReg$D_IN = !WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ;
  assign flashC_weReg$EN =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l69c12 ;

  // register flashC_wseqFsm_repeat_count
  assign flashC_wseqFsm_repeat_count$D_IN =
	     (flashC_wseqFsm_repeat_count == 4'd14) ? 4'd0 : x__h29273 ;
  assign flashC_wseqFsm_repeat_count$EN =
	     CAN_FIRE_RL_flashC_wseqFsm_action_np ;

  // register flashC_wseqFsm_start_reg
  assign flashC_wseqFsm_start_reg$D_IN = flashC_wseqFsm_start_reg_1$whas ;
  assign flashC_wseqFsm_start_reg$EN = 1'd1 ;

  // register flashC_wseqFsm_state_mkFSMstate
  always@(CAN_FIRE_RL_flashC_wseqFsm_action_l66c15 or
	  WILL_FIRE_RL_flashC_wseqFsm_actionof_l67c12 or
	  WILL_FIRE_RL_flashC_wseqFsm_actionof_l68c12 or
	  WILL_FIRE_RL_flashC_wseqFsm_actionof_l69c12 or
	  CAN_FIRE_RL_flashC_wseqFsm_action_np or
	  WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12 or
	  WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12 or
	  WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12)
  begin
    case (1'b1) // synopsys parallel_case
      CAN_FIRE_RL_flashC_wseqFsm_action_l66c15:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_flashC_wseqFsm_actionof_l67c12:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_flashC_wseqFsm_actionof_l68c12:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_flashC_wseqFsm_actionof_l69c12:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd4;
      CAN_FIRE_RL_flashC_wseqFsm_action_np:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12:
	  flashC_wseqFsm_state_mkFSMstate$D_IN = 4'd8;
      default: flashC_wseqFsm_state_mkFSMstate$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign flashC_wseqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_7 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l66c15_6 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l67c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l68c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l69c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_np ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l71c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l72c12 ||
	     WILL_FIRE_RL_flashC_wseqFsm_actionof_l73c12 ;

  // register flashC_wseqFsm_state_standby
  assign flashC_wseqFsm_state_standby$D_IN =
	     !flashC_wseqFsm_state_run_pw$whas ;
  assign flashC_wseqFsm_state_standby$EN =
	     CAN_FIRE_RL_flashC_wseqFsm_state_update_standby ;

  // register flashCtrl
  assign flashCtrl$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign flashCtrl$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;

  // register rdReg
  assign rdReg$D_IN =
	     MUX_rdReg$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       MUX_rdReg$write_1__VAL_2 ;
  assign rdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h10 ||
	     WILL_FIRE_RL_advance_response ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = !MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splitReadInFlight$EN =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[51] ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_1 ;
  assign wci_wslv_illegalEdge$EN =
	     MUX_wci_wslv_illegalEdge$write_1__SEL_1 ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[59:57] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_wci_wslv_respF_q_0$write_1__SEL_2:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_wci_wslv_respF_q_1$write_1__SEL_2:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wdReg
  assign wdReg$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign wdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0C ;

  // submodule flashC_reqF
  assign flashC_reqF$D_IN =
	     MUX_flashC_reqF$enq_1__SEL_1 ?
	       MUX_flashC_reqF$enq_1__VAL_1 :
	       MUX_flashC_reqF$enq_1__VAL_2 ;
  assign flashC_reqF$ENQ =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF$D_OUT[39:32] == 8'h14 ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h18) ||
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[51] ;
  assign flashC_reqF$DEQ = CAN_FIRE_RL_flashC_nextRequest ;
  assign flashC_reqF$CLR = 1'b0 ;

  // submodule flashC_respF
  assign flashC_respF$D_IN = flashC_tsd$O ;
  assign flashC_respF$ENQ = CAN_FIRE_RL_flashC_rseqFsm_action_l60c10 ;
  assign flashC_respF$DEQ = WILL_FIRE_RL_advance_response ;
  assign flashC_respF$CLR = 1'b0 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = CAN_FIRE_RL_wci_wslv_reqF_enq ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_wci_wslv_respF_c_r_2_EQ_2_1_2_AND_wci_wslv_ETC___d382 =
	     wci_wslv_respF_c_r != 2'd2 &&
	     ((wci_wslv_reqF$D_OUT[39:32] == 8'h14) ?
		flashC_reqF$FULL_N :
		wci_wslv_reqF$D_OUT[39:32] != 8'h18 || flashC_reqF$FULL_N) ;
  assign flashC_reqF_i_notEmpty__28_AND_IF_flashC_reqF__ETC___d348 =
	     flashC_reqF$EMPTY_N &&
	     (flashC_reqF$D_OUT[40] ?
		(flashC_rseqFsm_state_mkFSMstate == 4'd7 ||
		 flashC_rseqFsm_state_mkFSMstate == 4'd1 &&
		 !flashC_rseqFsm_state_standby) &&
		!flashC_rseqFsm_start_reg :
		(flashC_wseqFsm_state_mkFSMstate == 4'd8 ||
		 flashC_wseqFsm_state_mkFSMstate == 4'd1 &&
		 !flashC_wseqFsm_state_standby) &&
		!flashC_wseqFsm_start_reg) ;
  assign flashStatus__h30432 = { 31'd1, flashC_waitReg } ;
  assign g_data__h31309 =
	     wci_wslv_reqF$D_OUT[51] ?
	       32'd0 :
	       CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 ;
  assign wci_wslv_reqF_i_notEmpty__3_AND_IF_wci_wslv_re_ETC___d404 =
	     wci_wslv_reqF$EMPTY_N &&
	     (wci_wslv_reqF$D_OUT[51] ?
		flashC_reqF$FULL_N :
		wci_wslv_respF_c_r != 2'd2) ;
  assign x__h16135 = flashC_rseqFsm_repeat_count + 4'd1 ;
  assign x__h29273 = flashC_wseqFsm_repeat_count + 4'd1 ;
  assign x_addr__h31209 = { 5'h0, wci_wslv_reqF$D_OUT[50:34], 2'b0 } ;
  always@(wci_wslv_reqF$D_OUT or
	  flashStatus__h30432 or flashCtrl or aReg or wdReg or rdReg)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0:
	  CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 =
	      flashStatus__h30432;
      8'h04:
	  CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = flashCtrl;
      8'h08: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = aReg;
      8'h0C: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = wdReg;
      8'h10: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = rdReg;
      default: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        aReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	flashC_aReg <= `BSV_ASSIGNMENT_DELAY 24'd0;
	flashC_ceReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_isRead <= `BSV_ASSIGNMENT_DELAY 1'd1;
	flashC_oeReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_rseqFsm_repeat_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	flashC_rseqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_rseqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd1;
	flashC_rseqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_tsOE <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_tsWD <= `BSV_ASSIGNMENT_DELAY 16'd0;
	flashC_wdReg <= `BSV_ASSIGNMENT_DELAY 16'd0;
	flashC_weReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_wseqFsm_repeat_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	flashC_wseqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_wseqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd1;
	flashC_wseqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashCtrl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (aReg$EN) aReg <= `BSV_ASSIGNMENT_DELAY aReg$D_IN;
	if (flashC_aReg$EN)
	  flashC_aReg <= `BSV_ASSIGNMENT_DELAY flashC_aReg$D_IN;
	if (flashC_ceReg$EN)
	  flashC_ceReg <= `BSV_ASSIGNMENT_DELAY flashC_ceReg$D_IN;
	if (flashC_isRead$EN)
	  flashC_isRead <= `BSV_ASSIGNMENT_DELAY flashC_isRead$D_IN;
	if (flashC_oeReg$EN)
	  flashC_oeReg <= `BSV_ASSIGNMENT_DELAY flashC_oeReg$D_IN;
	if (flashC_rseqFsm_repeat_count$EN)
	  flashC_rseqFsm_repeat_count <= `BSV_ASSIGNMENT_DELAY
	      flashC_rseqFsm_repeat_count$D_IN;
	if (flashC_rseqFsm_start_reg$EN)
	  flashC_rseqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      flashC_rseqFsm_start_reg$D_IN;
	if (flashC_rseqFsm_state_mkFSMstate$EN)
	  flashC_rseqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      flashC_rseqFsm_state_mkFSMstate$D_IN;
	if (flashC_rseqFsm_state_standby$EN)
	  flashC_rseqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY
	      flashC_rseqFsm_state_standby$D_IN;
	if (flashC_tsOE$EN)
	  flashC_tsOE <= `BSV_ASSIGNMENT_DELAY flashC_tsOE$D_IN;
	if (flashC_tsWD$EN)
	  flashC_tsWD <= `BSV_ASSIGNMENT_DELAY flashC_tsWD$D_IN;
	if (flashC_wdReg$EN)
	  flashC_wdReg <= `BSV_ASSIGNMENT_DELAY flashC_wdReg$D_IN;
	if (flashC_weReg$EN)
	  flashC_weReg <= `BSV_ASSIGNMENT_DELAY flashC_weReg$D_IN;
	if (flashC_wseqFsm_repeat_count$EN)
	  flashC_wseqFsm_repeat_count <= `BSV_ASSIGNMENT_DELAY
	      flashC_wseqFsm_repeat_count$D_IN;
	if (flashC_wseqFsm_start_reg$EN)
	  flashC_wseqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      flashC_wseqFsm_start_reg$D_IN;
	if (flashC_wseqFsm_state_mkFSMstate$EN)
	  flashC_wseqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      flashC_wseqFsm_state_mkFSMstate$D_IN;
	if (flashC_wseqFsm_state_standby$EN)
	  flashC_wseqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY
	      flashC_wseqFsm_state_standby$D_IN;
	if (flashCtrl$EN) flashCtrl <= `BSV_ASSIGNMENT_DELAY flashCtrl$D_IN;
	if (rdReg$EN) rdReg <= `BSV_ASSIGNMENT_DELAY rdReg$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wdReg$EN) wdReg <= `BSV_ASSIGNMENT_DELAY wdReg$D_IN;
      end
    if (flashC_waitReg$EN)
      flashC_waitReg <= `BSV_ASSIGNMENT_DELAY flashC_waitReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    aReg = 32'hAAAAAAAA;
    flashC_aReg = 24'hAAAAAA;
    flashC_ceReg = 1'h0;
    flashC_isRead = 1'h0;
    flashC_oeReg = 1'h0;
    flashC_rseqFsm_repeat_count = 4'hA;
    flashC_rseqFsm_start_reg = 1'h0;
    flashC_rseqFsm_state_mkFSMstate = 4'hA;
    flashC_rseqFsm_state_standby = 1'h0;
    flashC_tsOE = 1'h0;
    flashC_tsWD = 16'hAAAA;
    flashC_waitReg = 1'h0;
    flashC_wdReg = 16'hAAAA;
    flashC_weReg = 1'h0;
    flashC_wseqFsm_repeat_count = 4'hA;
    flashC_wseqFsm_start_reg = 1'h0;
    flashC_wseqFsm_state_mkFSMstate = 4'hA;
    flashC_wseqFsm_state_standby = 1'h0;
    flashCtrl = 32'hAAAAAAAA;
    rdReg = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wdReg = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 42, column 8: (R0001)\n  Mutually exclusive rules RL_advance_response and RL_wci_cfrd fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 51, column 8: (R0001)\n  Mutually exclusive rules RL_wci_cfwr and RL_advance_response fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 51, column 8: (R0001)\n  Mutually exclusive rules RL_wci_cfwr and RL_wci_cfrd fired in the same clock\n  cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3554 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3554,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	begin
	  v__h31448 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting flashWorker flashCtrl:%0x",
		 v__h31448,
		 flashCtrl);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 85, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_advance_response fired in\n  the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 85, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_cfrd fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 85, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_IsO and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 90, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_advance_response fired in\n  the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 90, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_ctrl_IsO fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 90, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_cfrd fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 90, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 91, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_advance_response fired in\n  the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 91, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_ctrl_IsO fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 91, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_ctrl_EiI fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 91, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_cfrd fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_cfwr)
	$display("Error: \"bsv/wrk/FlashWorker.bsv\", line 91, column 8: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_cfwr fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3872 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3872,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3728 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3728,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
    if (RST_N) if (WILL_FIRE_RL_flashC_rseqFsm_action_l58c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_rseqFsm_action_np) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_rseqFsm_action_l60c10) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_rseqFsm_action_l61c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_rseqFsm_action_l62c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_rseqFsm_action_l56c15) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_rseqFsm_action_l57c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_l68c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_l69c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_np) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_l71c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_l72c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_l73c12) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_l66c15) $write("");
    if (RST_N) if (WILL_FIRE_RL_flashC_wseqFsm_action_l67c12) $write("");
  end
  // synopsys translate_on
endmodule  // mkFlashWorker

