//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Jun 15 11:12:25 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// macAddr                        O    48 reg
// RDY_macAddr                    O     1 const
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// spipad_mosi                    O     1 reg
// spipad_clk                     O     1 reg
// spipad_csn                     O     1
// RST_N_sys0_rst                 I     1 reset
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// spipad_miso_i                  I     1 reg
// i2cpad_sda                    IO     1 inout
// i2cpad_scl                    IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkPWrk_n210(RST_N_sys0_rst,
		   wciS0_Clk,
		   wciS0_MReset_n,

		   i2cpad_sda,
		   i2cpad_scl,

		   macAddr,
		   RDY_macAddr,

		   wciS0_MCmd,

		   wciS0_MAddrSpace,

		   wciS0_MByteEn,

		   wciS0_MAddr,

		   wciS0_MData,

		   wciS0_SResp,

		   wciS0_SData,

		   wciS0_SThreadBusy,

		   wciS0_SFlag,

		   wciS0_MFlag,

		   spipad_miso_i,

		   spipad_mosi,

		   spipad_clk,

		   spipad_csn);
  input  RST_N_sys0_rst;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  inout  i2cpad_sda;
  inout  i2cpad_scl;

  // value method macAddr
  output [47 : 0] macAddr;
  output RDY_macAddr;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // action method spipad_miso
  input  spipad_miso_i;

  // value method spipad_mosi
  output spipad_mosi;

  // value method spipad_clk
  output spipad_clk;

  // value method spipad_csn
  output spipad_csn;

  // signals for module outputs
  wire [47 : 0] macAddr;
  wire [31 : 0] wciS0_SData;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire RDY_macAddr, spipad_clk, spipad_csn, spipad_mosi, wciS0_SThreadBusy;

  // inlined wires
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget;
  wire [31 : 0] wci_wci_Es_mAddr_w$wget, wci_wci_Es_mData_w$wget;
  wire [3 : 0] wci_wci_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wci_Es_mCmd_w$wget, wci_wslv_wEdge$wget;
  wire flashC_clkReg_1$wget,
       flashC_clkReg_1$whas,
       flashC_csReg_1$wget,
       flashC_csReg_1$whas,
       flashC_mosiReg_1$wget,
       flashC_mosiReg_1$whas,
       i2cC_pwTick$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas;

  // register aReg
  reg [31 : 0] aReg;
  wire [31 : 0] aReg$D_IN;
  wire aReg$EN;

  // register doGetMAC
  reg [7 : 0] doGetMAC;
  wire [7 : 0] doGetMAC$D_IN;
  wire doGetMAC$EN;

  // register flashC_clkReg
  reg flashC_clkReg;
  wire flashC_clkReg$D_IN, flashC_clkReg$EN;

  // register flashC_csReg
  reg flashC_csReg;
  wire flashC_csReg$D_IN, flashC_csReg$EN;

  // register flashC_misoReg
  reg flashC_misoReg;
  wire flashC_misoReg$D_IN, flashC_misoReg$EN;

  // register flashC_mosiReg
  reg flashC_mosiReg;
  wire flashC_mosiReg$D_IN, flashC_mosiReg$EN;

  // register flashC_waitReg
  reg flashC_waitReg;
  wire flashC_waitReg$D_IN, flashC_waitReg$EN;

  // register flashCtrl
  reg [31 : 0] flashCtrl;
  wire [31 : 0] flashCtrl$D_IN;
  wire flashCtrl$EN;

  // register i2cC_rAddress
  reg [7 : 0] i2cC_rAddress;
  wire [7 : 0] i2cC_rAddress$D_IN;
  wire i2cC_rAddress$EN;

  // register i2cC_rOutEn
  reg i2cC_rOutEn;
  wire i2cC_rOutEn$D_IN, i2cC_rOutEn$EN;

  // register i2cC_rSCL
  reg i2cC_rSCL;
  wire i2cC_rSCL$D_IN, i2cC_rSCL$EN;

  // register i2cC_rSDA
  reg i2cC_rSDA;
  wire i2cC_rSDA$D_IN, i2cC_rSDA$EN;

  // register i2cC_rSlaveAddr
  reg [6 : 0] i2cC_rSlaveAddr;
  wire [6 : 0] i2cC_rSlaveAddr$D_IN;
  wire i2cC_rSlaveAddr$EN;

  // register i2cC_rState
  reg i2cC_rState;
  wire i2cC_rState$D_IN, i2cC_rState$EN;

  // register i2cC_rWrite
  reg i2cC_rWrite;
  wire i2cC_rWrite$D_IN, i2cC_rWrite$EN;

  // register i2cC_rWriteData
  reg [7 : 0] i2cC_rWriteData;
  wire [7 : 0] i2cC_rWriteData$D_IN;
  wire i2cC_rWriteData$EN;

  // register i2cC_vrReadData
  reg i2cC_vrReadData;
  wire i2cC_vrReadData$D_IN, i2cC_vrReadData$EN;

  // register i2cC_vrReadData_1
  reg i2cC_vrReadData_1;
  wire i2cC_vrReadData_1$D_IN, i2cC_vrReadData_1$EN;

  // register i2cC_vrReadData_2
  reg i2cC_vrReadData_2;
  wire i2cC_vrReadData_2$D_IN, i2cC_vrReadData_2$EN;

  // register i2cC_vrReadData_3
  reg i2cC_vrReadData_3;
  wire i2cC_vrReadData_3$D_IN, i2cC_vrReadData_3$EN;

  // register i2cC_vrReadData_4
  reg i2cC_vrReadData_4;
  wire i2cC_vrReadData_4$D_IN, i2cC_vrReadData_4$EN;

  // register i2cC_vrReadData_5
  reg i2cC_vrReadData_5;
  wire i2cC_vrReadData_5$D_IN, i2cC_vrReadData_5$EN;

  // register i2cC_vrReadData_6
  reg i2cC_vrReadData_6;
  wire i2cC_vrReadData_6$D_IN, i2cC_vrReadData_6$EN;

  // register i2cC_vrReadData_7
  reg i2cC_vrReadData_7;
  wire i2cC_vrReadData_7$D_IN, i2cC_vrReadData_7$EN;

  // register macV
  reg [47 : 0] macV;
  wire [47 : 0] macV$D_IN;
  wire macV$EN;

  // register rdReg
  reg [31 : 0] rdReg;
  wire [31 : 0] rdReg$D_IN;
  wire rdReg$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wdReg
  reg [31 : 0] wdReg;
  wire [31 : 0] wdReg$D_IN;
  wire wdReg$EN;

  // ports of submodule flashC_reqF
  wire [52 : 0] flashC_reqF$D_IN;
  wire flashC_reqF$CLR, flashC_reqF$DEQ, flashC_reqF$ENQ, flashC_reqF$FULL_N;

  // ports of submodule flashC_respF
  wire [31 : 0] flashC_respF$D_IN, flashC_respF$D_OUT;
  wire flashC_respF$CLR,
       flashC_respF$DEQ,
       flashC_respF$EMPTY_N,
       flashC_respF$ENQ;

  // ports of submodule i2cC_fRequest
  wire [23 : 0] i2cC_fRequest$D_IN, i2cC_fRequest$D_OUT;
  wire i2cC_fRequest$CLR,
       i2cC_fRequest$DEQ,
       i2cC_fRequest$EMPTY_N,
       i2cC_fRequest$ENQ,
       i2cC_fRequest$FULL_N;

  // ports of submodule i2cC_fResponse
  wire [7 : 0] i2cC_fResponse$D_IN, i2cC_fResponse$D_OUT;
  wire i2cC_fResponse$CLR,
       i2cC_fResponse$DEQ,
       i2cC_fResponse$EMPTY_N,
       i2cC_fResponse$ENQ,
       i2cC_fResponse$FULL_N;

  // ports of submodule i2cC_rPlayIndex
  wire [9 : 0] i2cC_rPlayIndex$DATA_A,
	       i2cC_rPlayIndex$DATA_B,
	       i2cC_rPlayIndex$DATA_C,
	       i2cC_rPlayIndex$DATA_F,
	       i2cC_rPlayIndex$Q_OUT;
  wire i2cC_rPlayIndex$ADDA,
       i2cC_rPlayIndex$ADDB,
       i2cC_rPlayIndex$SETC,
       i2cC_rPlayIndex$SETF;

  // ports of submodule i2cC_rPrescaler
  wire [31 : 0] i2cC_rPrescaler$DATA_A,
		i2cC_rPrescaler$DATA_B,
		i2cC_rPrescaler$DATA_C,
		i2cC_rPrescaler$DATA_F,
		i2cC_rPrescaler$Q_OUT;
  wire i2cC_rPrescaler$ADDA,
       i2cC_rPrescaler$ADDB,
       i2cC_rPrescaler$SETC,
       i2cC_rPrescaler$SETF;

  // ports of submodule i2cC_tSCL
  wire i2cC_tSCL$IO;

  // ports of submodule i2cC_tSDA
  wire i2cC_tSDA$IO, i2cC_tSDA$O;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // rule scheduling signals
  wire WILL_FIRE_RL_advance_response,
       WILL_FIRE_RL_i2cC_done_read,
       WILL_FIRE_RL_i2cC_done_write,
       WILL_FIRE_RL_i2cC_running_read,
       WILL_FIRE_RL_i2cC_running_write,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_incCtr;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1;
  wire [52 : 0] MUX_flashC_reqF$enq_1__VAL_1, MUX_flashC_reqF$enq_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2,
		MUX_wci_wslv_respF_q_1$write_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2;
  wire MUX_flashC_reqF$enq_1__SEL_1,
       MUX_i2cC_rOutEn$write_1__SEL_1,
       MUX_i2cC_rOutEn$write_1__SEL_2,
       MUX_i2cC_rOutEn$write_1__VAL_1,
       MUX_i2cC_rOutEn$write_1__VAL_2,
       MUX_i2cC_rSCL$write_1__VAL_1,
       MUX_i2cC_rSCL$write_1__VAL_2,
       MUX_i2cC_rSDA$write_1__VAL_1,
       MUX_i2cC_rSDA$write_1__VAL_2,
       MUX_i2cC_rState$write_1__SEL_1,
       MUX_i2cC_rState$write_1__SEL_2,
       MUX_rdReg$write_1__SEL_1,
       MUX_splitReadInFlight$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_wci_wslv_respF_q_0$write_1__SEL_1,
       MUX_wci_wslv_respF_q_1$write_1__SEL_1,
       MUX_wci_wslv_respF_x_wire$wset_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h19642, v__h19816, v__h19960, v__h24205;
  reg [31 : 0] CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1;
  wire [116 : 0] _130549178157447095380771276656813203__q6,
		 _166153498389916941667817601160445959__q4,
		 _306783360__q2,
		 wRdData__h1432;
  wire [86 : 0] _121583396715528419856163987__q5,
		_154742503901866210315206599__q3,
		wWrData__h1436;
  wire [31 : 0] flashStatus__h23194, g_data__h24068;
  wire [7 : 0] x__h21741;
  wire [2 : 0] a0__h1421,
	       a1__h1420,
	       a2__h1419,
	       a3__h1418,
	       a4__h1417,
	       a5__h1416,
	       a6__h1415,
	       a7__h1414,
	       d0__h1430,
	       d1__h1429,
	       d2__h1428,
	       d3__h1427,
	       d4__h1426,
	       d5__h1425,
	       d6__h1424,
	       d7__h1423,
	       s0__h1412,
	       s1__h1411,
	       s2__h1410,
	       s3__h1409,
	       s4__h1408,
	       s5__h1407,
	       s6__h1406;
  wire _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426,
       wci_wslv_reqF_i_notEmpty__69_AND_IF_wci_wslv_r_ETC___d350,
       wci_wslv_reqF_i_notEmpty__69_AND_wci_wslv_reqF_ETC___d329;

  // value method macAddr
  assign macAddr = macV ;
  assign RDY_macAddr = 1'd1 ;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // value method spipad_mosi
  assign spipad_mosi = flashC_mosiReg ;

  // value method spipad_clk
  assign spipad_clk = flashC_clkReg ;

  // value method spipad_csn
  assign spipad_csn = !flashC_csReg ;

  // submodule flashC_reqF
  FIFO2 #(.width(32'd53), .guarded(32'd1)) flashC_reqF(.RST_N(wciS0_MReset_n),
						       .CLK(wciS0_Clk),
						       .D_IN(flashC_reqF$D_IN),
						       .ENQ(flashC_reqF$ENQ),
						       .DEQ(flashC_reqF$DEQ),
						       .CLR(flashC_reqF$CLR),
						       .D_OUT(),
						       .FULL_N(flashC_reqF$FULL_N),
						       .EMPTY_N());

  // submodule flashC_respF
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) flashC_respF(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(flashC_respF$D_IN),
					.ENQ(flashC_respF$ENQ),
					.DEQ(flashC_respF$DEQ),
					.CLR(flashC_respF$CLR),
					.D_OUT(flashC_respF$D_OUT),
					.FULL_N(),
					.EMPTY_N(flashC_respF$EMPTY_N));

  // submodule i2cC_fRequest
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2cC_fRequest(.RST_N(RST_N_sys0_rst),
					     .CLK(wciS0_Clk),
					     .D_IN(i2cC_fRequest$D_IN),
					     .ENQ(i2cC_fRequest$ENQ),
					     .DEQ(i2cC_fRequest$DEQ),
					     .CLR(i2cC_fRequest$CLR),
					     .D_OUT(i2cC_fRequest$D_OUT),
					     .FULL_N(i2cC_fRequest$FULL_N),
					     .EMPTY_N(i2cC_fRequest$EMPTY_N));

  // submodule i2cC_fResponse
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) i2cC_fResponse(.RST_N(RST_N_sys0_rst),
					      .CLK(wciS0_Clk),
					      .D_IN(i2cC_fResponse$D_IN),
					      .ENQ(i2cC_fResponse$ENQ),
					      .DEQ(i2cC_fResponse$DEQ),
					      .CLR(i2cC_fResponse$CLR),
					      .D_OUT(i2cC_fResponse$D_OUT),
					      .FULL_N(i2cC_fResponse$FULL_N),
					      .EMPTY_N(i2cC_fResponse$EMPTY_N));

  // submodule i2cC_rPlayIndex
  Counter #(.width(32'd10), .init(10'd0)) i2cC_rPlayIndex(.CLK(wciS0_Clk),
							  .RST_N(RST_N_sys0_rst),
							  .DATA_A(i2cC_rPlayIndex$DATA_A),
							  .DATA_B(i2cC_rPlayIndex$DATA_B),
							  .DATA_C(i2cC_rPlayIndex$DATA_C),
							  .DATA_F(i2cC_rPlayIndex$DATA_F),
							  .ADDA(i2cC_rPlayIndex$ADDA),
							  .ADDB(i2cC_rPlayIndex$ADDB),
							  .SETC(i2cC_rPlayIndex$SETC),
							  .SETF(i2cC_rPlayIndex$SETF),
							  .Q_OUT(i2cC_rPlayIndex$Q_OUT));

  // submodule i2cC_rPrescaler
  Counter #(.width(32'd32), .init(32'd416)) i2cC_rPrescaler(.CLK(wciS0_Clk),
							    .RST_N(RST_N_sys0_rst),
							    .DATA_A(i2cC_rPrescaler$DATA_A),
							    .DATA_B(i2cC_rPrescaler$DATA_B),
							    .DATA_C(i2cC_rPrescaler$DATA_C),
							    .DATA_F(i2cC_rPrescaler$DATA_F),
							    .ADDA(i2cC_rPrescaler$ADDA),
							    .ADDB(i2cC_rPrescaler$ADDB),
							    .SETC(i2cC_rPrescaler$SETC),
							    .SETF(i2cC_rPrescaler$SETF),
							    .Q_OUT(i2cC_rPrescaler$Q_OUT));

  // submodule i2cC_tSCL
  TriState #(.width(32'd1)) i2cC_tSCL(.I(i2cC_rSCL),
				      .OE(1'd1),
				      .O(),
				      .IO(i2cpad_scl));

  // submodule i2cC_tSDA
  TriState #(.width(32'd1)) i2cC_tSDA(.I(i2cC_rSDA),
				      .OE(i2cC_rOutEn),
				      .O(i2cC_tSDA$O),
				      .IO(i2cpad_sda));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // rule RL_i2cC_running_write
  assign WILL_FIRE_RL_i2cC_running_write =
	     i2cC_rState && i2cC_rWrite && i2cC_rPrescaler$Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_i2cC_running_read
  assign WILL_FIRE_RL_i2cC_running_read =
	     i2cC_rState && !i2cC_rWrite && i2cC_rPrescaler$Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_i2cC_done_write
  assign WILL_FIRE_RL_i2cC_done_write =
	     i2cC_rState && i2cC_rWrite && i2cC_rPrescaler$Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_i2cC_done_read
  assign WILL_FIRE_RL_i2cC_done_read =
	     i2cC_fResponse$FULL_N && i2cC_rState && !i2cC_rWrite &&
	     i2cC_rPrescaler$Q_OUT == 32'd0 &&
	     i2cC_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_advance_response
  assign WILL_FIRE_RL_advance_response =
	     flashC_respF$EMPTY_N &&
	     (!splitReadInFlight || wci_wslv_respF_c_r != 2'd2) &&
	     !wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfwr
  assign WILL_FIRE_RL_wci_cfwr =
	     wci_wslv_respF_c_r != 2'd2 &&
	     wci_wslv_reqF_i_notEmpty__69_AND_wci_wslv_reqF_ETC___d329 &&
	     wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfrd
  assign WILL_FIRE_RL_wci_cfrd =
	     wci_wslv_reqF_i_notEmpty__69_AND_IF_wci_wslv_r_ETC___d350 &&
	     wci_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_IsO
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_wci_ctrl_EiI
  assign WILL_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_wci_ctrl_OrE
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;

  // rule RL_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;

  // rule RL_wci_wslv_respF_both
  assign WILL_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;

  // inputs to muxes for submodule ports
  assign MUX_flashC_reqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF$D_OUT[39:32] == 8'h14 ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h18) ;
  assign MUX_i2cC_rOutEn$write_1__SEL_1 =
	     WILL_FIRE_RL_i2cC_done_write || WILL_FIRE_RL_i2cC_running_write ;
  assign MUX_i2cC_rOutEn$write_1__SEL_2 =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_running_read ;
  assign MUX_i2cC_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_done_write ;
  assign MUX_i2cC_rState$write_1__SEL_2 =
	     i2cC_fRequest$EMPTY_N && !i2cC_rState ;
  assign MUX_rdReg$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h10 ;
  assign MUX_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ;
  assign MUX_flashC_reqF$enq_1__VAL_1 =
	     { wci_wslv_reqF$D_OUT[39:32] != 8'h14, aReg[19:0], wdReg } ;
  assign MUX_flashC_reqF$enq_1__VAL_2 = { 1'd1, wci_wslv_reqF$D_OUT[53:2] } ;
  assign MUX_i2cC_rOutEn$write_1__VAL_1 =
	     _154742503901866210315206599__q3[i2cC_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2cC_rOutEn$write_1__VAL_2 =
	     _166153498389916941667817601160445959__q4[i2cC_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2cC_rSCL$write_1__VAL_1 =
	     _121583396715528419856163987__q5[i2cC_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2cC_rSCL$write_1__VAL_2 =
	     _130549178157447095380771276656813203__q6[i2cC_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2cC_rSDA$write_1__VAL_1 =
	     wRdData__h1432[i2cC_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_i2cC_rSDA$write_1__VAL_2 =
	     wWrData__h1436[i2cC_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_2 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  always@(MUX_splitReadInFlight$write_1__SEL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  MUX_wci_wslv_respF_x_wire$wset_1__SEL_2 or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_splitReadInFlight$write_1__SEL_1:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      MUX_wci_wslv_respF_x_wire$wset_1__SEL_2:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       wci_wslv_respF_q_1 ;
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, flashC_respF$D_OUT } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 = { 2'd1, g_data__h24068 } ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_3 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_1 ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign flashC_mosiReg_1$wget = 1'b0 ;
  assign flashC_mosiReg_1$whas = 1'b0 ;
  assign flashC_clkReg_1$wget = 1'b0 ;
  assign flashC_clkReg_1$whas = 1'b0 ;
  assign flashC_csReg_1$wget = 1'b0 ;
  assign flashC_csReg_1$whas = 1'b0 ;
  assign i2cC_pwTick$whas = i2cC_rPrescaler$Q_OUT == 32'd0 ;
  assign wci_wslv_reqF_r_enq$whas = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && !wci_wslv_reqF$D_OUT[51] ||
	     WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;

  // register aReg
  assign aReg$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign aReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;

  // register doGetMAC
  assign doGetMAC$D_IN = doGetMAC - 8'd1 ;
  assign doGetMAC$EN = i2cC_fRequest$FULL_N && doGetMAC != 8'd0 ;

  // register flashC_clkReg
  assign flashC_clkReg$D_IN = 1'b0 ;
  assign flashC_clkReg$EN = 1'd1 ;

  // register flashC_csReg
  assign flashC_csReg$D_IN = 1'b0 ;
  assign flashC_csReg$EN = 1'd1 ;

  // register flashC_misoReg
  assign flashC_misoReg$D_IN = spipad_miso_i ;
  assign flashC_misoReg$EN = 1'd1 ;

  // register flashC_mosiReg
  assign flashC_mosiReg$D_IN = 1'b0 ;
  assign flashC_mosiReg$EN = 1'd1 ;

  // register flashC_waitReg
  assign flashC_waitReg$D_IN = 1'b0 ;
  assign flashC_waitReg$EN = 1'b0 ;

  // register flashCtrl
  assign flashCtrl$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign flashCtrl$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;

  // register i2cC_rAddress
  assign i2cC_rAddress$D_IN = i2cC_fRequest$D_OUT[15:8] ;
  assign i2cC_rAddress$EN = MUX_i2cC_rState$write_1__SEL_2 ;

  // register i2cC_rOutEn
  assign i2cC_rOutEn$D_IN =
	     MUX_i2cC_rOutEn$write_1__SEL_1 ?
	       MUX_i2cC_rOutEn$write_1__VAL_1 :
	       MUX_i2cC_rOutEn$write_1__VAL_2 ;
  assign i2cC_rOutEn$EN =
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ||
	     WILL_FIRE_RL_i2cC_done_read ||
	     WILL_FIRE_RL_i2cC_running_read ;

  // register i2cC_rSCL
  assign i2cC_rSCL$D_IN =
	     MUX_i2cC_rOutEn$write_1__SEL_1 ?
	       MUX_i2cC_rSCL$write_1__VAL_1 :
	       MUX_i2cC_rSCL$write_1__VAL_2 ;
  assign i2cC_rSCL$EN =
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ||
	     WILL_FIRE_RL_i2cC_done_read ||
	     WILL_FIRE_RL_i2cC_running_read ;

  // register i2cC_rSDA
  assign i2cC_rSDA$D_IN =
	     MUX_i2cC_rOutEn$write_1__SEL_2 ?
	       MUX_i2cC_rSDA$write_1__VAL_1 :
	       MUX_i2cC_rSDA$write_1__VAL_2 ;
  assign i2cC_rSDA$EN =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_running_read ||
	     WILL_FIRE_RL_i2cC_done_write ||
	     WILL_FIRE_RL_i2cC_running_write ;

  // register i2cC_rSlaveAddr
  assign i2cC_rSlaveAddr$D_IN = i2cC_fRequest$D_OUT[22:16] ;
  assign i2cC_rSlaveAddr$EN = MUX_i2cC_rState$write_1__SEL_2 ;

  // register i2cC_rState
  assign i2cC_rState$D_IN = !MUX_i2cC_rState$write_1__SEL_1 ;
  assign i2cC_rState$EN =
	     WILL_FIRE_RL_i2cC_done_read || WILL_FIRE_RL_i2cC_done_write ||
	     i2cC_fRequest$EMPTY_N && !i2cC_rState ;

  // register i2cC_rWrite
  assign i2cC_rWrite$D_IN = i2cC_fRequest$D_OUT[23] ;
  assign i2cC_rWrite$EN = MUX_i2cC_rState$write_1__SEL_2 ;

  // register i2cC_rWriteData
  assign i2cC_rWriteData$D_IN = i2cC_fRequest$D_OUT[7:0] ;
  assign i2cC_rWriteData$EN = MUX_i2cC_rState$write_1__SEL_2 ;

  // register i2cC_vrReadData
  assign i2cC_vrReadData$D_IN = i2cC_tSDA$O ;
  assign i2cC_vrReadData$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register i2cC_vrReadData_1
  assign i2cC_vrReadData_1$D_IN = i2cC_vrReadData ;
  assign i2cC_vrReadData_1$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register i2cC_vrReadData_2
  assign i2cC_vrReadData_2$D_IN = i2cC_vrReadData_1 ;
  assign i2cC_vrReadData_2$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register i2cC_vrReadData_3
  assign i2cC_vrReadData_3$D_IN = i2cC_vrReadData_2 ;
  assign i2cC_vrReadData_3$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register i2cC_vrReadData_4
  assign i2cC_vrReadData_4$D_IN = i2cC_vrReadData_3 ;
  assign i2cC_vrReadData_4$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register i2cC_vrReadData_5
  assign i2cC_vrReadData_5$D_IN = i2cC_vrReadData_4 ;
  assign i2cC_vrReadData_5$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register i2cC_vrReadData_6
  assign i2cC_vrReadData_6$D_IN = i2cC_vrReadData_5 ;
  assign i2cC_vrReadData_6$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register i2cC_vrReadData_7
  assign i2cC_vrReadData_7$D_IN = i2cC_vrReadData_6 ;
  assign i2cC_vrReadData_7$EN =
	     WILL_FIRE_RL_i2cC_running_read &&
	     _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 ;

  // register macV
  assign macV$D_IN = { macV[39:0], i2cC_fResponse$D_OUT } ;
  assign macV$EN = i2cC_fResponse$EMPTY_N ;

  // register rdReg
  assign rdReg$D_IN =
	     MUX_rdReg$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       flashC_respF$D_OUT ;
  assign rdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h10 ||
	     WILL_FIRE_RL_advance_response ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = !MUX_splitReadInFlight$write_1__SEL_1 ;
  assign splitReadInFlight$EN =
	     WILL_FIRE_RL_advance_response && splitReadInFlight ||
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[51] ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     !MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ||
	     MUX_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(MUX_wci_wslv_respF_q_0$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_0$write_1__SEL_1:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(MUX_wci_wslv_respF_q_1$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_1$write_1__SEL_1:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wdReg
  assign wdReg$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign wdReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0C ;

  // submodule flashC_reqF
  assign flashC_reqF$D_IN =
	     MUX_flashC_reqF$enq_1__SEL_1 ?
	       MUX_flashC_reqF$enq_1__VAL_1 :
	       MUX_flashC_reqF$enq_1__VAL_2 ;
  assign flashC_reqF$ENQ =
	     WILL_FIRE_RL_wci_cfwr &&
	     (wci_wslv_reqF$D_OUT[39:32] == 8'h14 ||
	      wci_wslv_reqF$D_OUT[39:32] == 8'h18) ||
	     WILL_FIRE_RL_wci_cfrd && wci_wslv_reqF$D_OUT[51] ;
  assign flashC_reqF$DEQ = 1'b0 ;
  assign flashC_reqF$CLR = 1'b0 ;

  // submodule flashC_respF
  assign flashC_respF$D_IN = 32'h0 ;
  assign flashC_respF$ENQ = 1'b0 ;
  assign flashC_respF$DEQ = WILL_FIRE_RL_advance_response ;
  assign flashC_respF$CLR = 1'b0 ;

  // submodule i2cC_fRequest
  assign i2cC_fRequest$D_IN = { 8'd80, x__h21741, 8'd0 } ;
  assign i2cC_fRequest$ENQ = i2cC_fRequest$FULL_N && doGetMAC != 8'd0 ;
  assign i2cC_fRequest$DEQ = MUX_i2cC_rState$write_1__SEL_2 ;
  assign i2cC_fRequest$CLR = 1'b0 ;

  // submodule i2cC_fResponse
  assign i2cC_fResponse$D_IN =
	     { i2cC_vrReadData_7,
	       i2cC_vrReadData_6,
	       i2cC_vrReadData_5,
	       i2cC_vrReadData_4,
	       i2cC_vrReadData_3,
	       i2cC_vrReadData_2,
	       i2cC_vrReadData_1,
	       i2cC_vrReadData } ;
  assign i2cC_fResponse$ENQ = WILL_FIRE_RL_i2cC_done_read ;
  assign i2cC_fResponse$DEQ = i2cC_fResponse$EMPTY_N ;
  assign i2cC_fResponse$CLR = 1'b0 ;

  // submodule i2cC_rPlayIndex
  assign i2cC_rPlayIndex$DATA_A = 10'h0 ;
  assign i2cC_rPlayIndex$DATA_B = 10'd1023 ;
  assign i2cC_rPlayIndex$DATA_C = 10'h0 ;
  assign i2cC_rPlayIndex$DATA_F = i2cC_fRequest$D_OUT[23] ? 10'd86 : 10'd116 ;
  assign i2cC_rPlayIndex$ADDA = 1'b0 ;
  assign i2cC_rPlayIndex$ADDB =
	     WILL_FIRE_RL_i2cC_done_write || WILL_FIRE_RL_i2cC_running_read ||
	     WILL_FIRE_RL_i2cC_running_write ;
  assign i2cC_rPlayIndex$SETC = 1'b0 ;
  assign i2cC_rPlayIndex$SETF = MUX_i2cC_rState$write_1__SEL_2 ;

  // submodule i2cC_rPrescaler
  assign i2cC_rPrescaler$DATA_A = 32'h0 ;
  assign i2cC_rPrescaler$DATA_B = 32'hFFFFFFFF ;
  assign i2cC_rPrescaler$DATA_C = 32'h0 ;
  assign i2cC_rPrescaler$DATA_F = 32'd416 ;
  assign i2cC_rPrescaler$ADDA = 1'b0 ;
  assign i2cC_rPrescaler$ADDB = i2cC_rPrescaler$Q_OUT != 32'd0 ;
  assign i2cC_rPrescaler$SETC = 1'b0 ;
  assign i2cC_rPrescaler$SETF = i2cC_rPrescaler$Q_OUT == 32'd0 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // remaining internal signals
  assign _121583396715528419856163987__q5 = 87'h6492492492492492492493 ;
  assign _130549178157447095380771276656813203__q6 =
	     117'h192492492492492E92492492492493 ;
  assign _154742503901866210315206599__q3 = 87'h7FFFFFF1FFFFFE3FFFFFC7 ;
  assign _166153498389916941667817601160445959__q4 =
	     117'h1FFFFFFC7FFFFF8FFFFFFE00000007 ;
  assign _306783360_BIT_i2cC_rPlayIndex_value__8_BITS_6__ETC___d426 =
	     _306783360__q2[i2cC_rPlayIndex$Q_OUT[6:0]] ;
  assign _306783360__q2 = 117'd306783360 ;
  assign a0__h1421 = {3{i2cC_rAddress[0]}} ;
  assign a1__h1420 = {3{i2cC_rAddress[1]}} ;
  assign a2__h1419 = {3{i2cC_rAddress[2]}} ;
  assign a3__h1418 = {3{i2cC_rAddress[3]}} ;
  assign a4__h1417 = {3{i2cC_rAddress[4]}} ;
  assign a5__h1416 = {3{i2cC_rAddress[5]}} ;
  assign a6__h1415 = {3{i2cC_rAddress[6]}} ;
  assign a7__h1414 = {3{i2cC_rAddress[7]}} ;
  assign d0__h1430 = {3{i2cC_rWriteData[0]}} ;
  assign d1__h1429 = {3{i2cC_rWriteData[1]}} ;
  assign d2__h1428 = {3{i2cC_rWriteData[2]}} ;
  assign d3__h1427 = {3{i2cC_rWriteData[3]}} ;
  assign d4__h1426 = {3{i2cC_rWriteData[4]}} ;
  assign d5__h1425 = {3{i2cC_rWriteData[5]}} ;
  assign d6__h1424 = {3{i2cC_rWriteData[6]}} ;
  assign d7__h1423 = {3{i2cC_rWriteData[7]}} ;
  assign flashStatus__h23194 = { 31'd1, flashC_waitReg } ;
  assign g_data__h24068 =
	     wci_wslv_reqF$D_OUT[51] ?
	       32'd0 :
	       CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 ;
  assign s0__h1412 = {3{i2cC_rSlaveAddr[0]}} ;
  assign s1__h1411 = {3{i2cC_rSlaveAddr[1]}} ;
  assign s2__h1410 = {3{i2cC_rSlaveAddr[2]}} ;
  assign s3__h1409 = {3{i2cC_rSlaveAddr[3]}} ;
  assign s4__h1408 = {3{i2cC_rSlaveAddr[4]}} ;
  assign s5__h1407 = {3{i2cC_rSlaveAddr[5]}} ;
  assign s6__h1406 = {3{i2cC_rSlaveAddr[6]}} ;
  assign wRdData__h1432 =
	     { 3'b100,
	       s6__h1406,
	       s5__h1407,
	       s4__h1408,
	       s3__h1409,
	       s2__h1410,
	       s1__h1411,
	       s0__h1412,
	       6'd0,
	       a7__h1414,
	       a6__h1415,
	       a5__h1416,
	       a4__h1417,
	       a3__h1418,
	       a2__h1419,
	       a1__h1420,
	       a0__h1421,
	       6'd6,
	       s6__h1406,
	       s5__h1407,
	       s4__h1408,
	       s3__h1409,
	       s2__h1410,
	       s1__h1411,
	       s0__h1412,
	       36'hE00000001 } ;
  assign wWrData__h1436 =
	     { 3'b100,
	       s6__h1406,
	       s5__h1407,
	       s4__h1408,
	       s3__h1409,
	       s2__h1410,
	       s1__h1411,
	       s0__h1412,
	       6'd0,
	       a7__h1414,
	       a6__h1415,
	       a5__h1416,
	       a4__h1417,
	       a3__h1418,
	       a2__h1419,
	       a1__h1420,
	       a0__h1421,
	       3'b0,
	       d7__h1423,
	       d6__h1424,
	       d5__h1425,
	       d4__h1426,
	       d3__h1427,
	       d2__h1428,
	       d1__h1429,
	       d0__h1430,
	       6'd1 } ;
  assign wci_wslv_reqF_i_notEmpty__69_AND_IF_wci_wslv_r_ETC___d350 =
	     wci_wslv_reqF$EMPTY_N &&
	     (wci_wslv_reqF$D_OUT[51] ?
		flashC_reqF$FULL_N :
		wci_wslv_respF_c_r != 2'd2) ;
  assign wci_wslv_reqF_i_notEmpty__69_AND_wci_wslv_reqF_ETC___d329 =
	     wci_wslv_reqF$EMPTY_N &&
	     ((wci_wslv_reqF$D_OUT[39:32] == 8'h14) ?
		flashC_reqF$FULL_N :
		wci_wslv_reqF$D_OUT[39:32] != 8'h18 || flashC_reqF$FULL_N) ;
  assign x__h21741 = 8'd8 - doGetMAC ;
  always@(wci_wslv_reqF$D_OUT or
	  flashStatus__h23194 or flashCtrl or aReg or wdReg or rdReg)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0:
	  CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 =
	      flashStatus__h23194;
      8'h04:
	  CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = flashCtrl;
      8'h08: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = aReg;
      8'h0C: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = wdReg;
      8'h10: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = rdReg;
      default: CASE_wci_wslv_reqFD_OUT_BITS_39_TO_32_0_0x0_f_ETC__q1 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        aReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	flashC_clkReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_csReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_mosiReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashC_waitReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	flashCtrl <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wdReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (aReg$EN) aReg <= `BSV_ASSIGNMENT_DELAY aReg$D_IN;
	if (flashC_clkReg$EN)
	  flashC_clkReg <= `BSV_ASSIGNMENT_DELAY flashC_clkReg$D_IN;
	if (flashC_csReg$EN)
	  flashC_csReg <= `BSV_ASSIGNMENT_DELAY flashC_csReg$D_IN;
	if (flashC_mosiReg$EN)
	  flashC_mosiReg <= `BSV_ASSIGNMENT_DELAY flashC_mosiReg$D_IN;
	if (flashC_waitReg$EN)
	  flashC_waitReg <= `BSV_ASSIGNMENT_DELAY flashC_waitReg$D_IN;
	if (flashCtrl$EN) flashCtrl <= `BSV_ASSIGNMENT_DELAY flashCtrl$D_IN;
	if (rdReg$EN) rdReg <= `BSV_ASSIGNMENT_DELAY rdReg$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wdReg$EN) wdReg <= `BSV_ASSIGNMENT_DELAY wdReg$D_IN;
      end
    if (!RST_N_sys0_rst)
      begin
        doGetMAC <= `BSV_ASSIGNMENT_DELAY 8'd6;
	i2cC_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rSCL <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rSDA <= `BSV_ASSIGNMENT_DELAY 1'd1;
	i2cC_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (doGetMAC$EN) doGetMAC <= `BSV_ASSIGNMENT_DELAY doGetMAC$D_IN;
	if (i2cC_rOutEn$EN)
	  i2cC_rOutEn <= `BSV_ASSIGNMENT_DELAY i2cC_rOutEn$D_IN;
	if (i2cC_rSCL$EN) i2cC_rSCL <= `BSV_ASSIGNMENT_DELAY i2cC_rSCL$D_IN;
	if (i2cC_rSDA$EN) i2cC_rSDA <= `BSV_ASSIGNMENT_DELAY i2cC_rSDA$D_IN;
	if (i2cC_rState$EN)
	  i2cC_rState <= `BSV_ASSIGNMENT_DELAY i2cC_rState$D_IN;
      end
    if (flashC_misoReg$EN)
      flashC_misoReg <= `BSV_ASSIGNMENT_DELAY flashC_misoReg$D_IN;
    if (i2cC_rAddress$EN)
      i2cC_rAddress <= `BSV_ASSIGNMENT_DELAY i2cC_rAddress$D_IN;
    if (i2cC_rSlaveAddr$EN)
      i2cC_rSlaveAddr <= `BSV_ASSIGNMENT_DELAY i2cC_rSlaveAddr$D_IN;
    if (i2cC_rWrite$EN) i2cC_rWrite <= `BSV_ASSIGNMENT_DELAY i2cC_rWrite$D_IN;
    if (i2cC_rWriteData$EN)
      i2cC_rWriteData <= `BSV_ASSIGNMENT_DELAY i2cC_rWriteData$D_IN;
    if (i2cC_vrReadData$EN)
      i2cC_vrReadData <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData$D_IN;
    if (i2cC_vrReadData_1$EN)
      i2cC_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_1$D_IN;
    if (i2cC_vrReadData_2$EN)
      i2cC_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_2$D_IN;
    if (i2cC_vrReadData_3$EN)
      i2cC_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_3$D_IN;
    if (i2cC_vrReadData_4$EN)
      i2cC_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_4$D_IN;
    if (i2cC_vrReadData_5$EN)
      i2cC_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_5$D_IN;
    if (i2cC_vrReadData_6$EN)
      i2cC_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_6$D_IN;
    if (i2cC_vrReadData_7$EN)
      i2cC_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY i2cC_vrReadData_7$D_IN;
    if (macV$EN) macV <= `BSV_ASSIGNMENT_DELAY macV$D_IN;
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    aReg = 32'hAAAAAAAA;
    doGetMAC = 8'hAA;
    flashC_clkReg = 1'h0;
    flashC_csReg = 1'h0;
    flashC_misoReg = 1'h0;
    flashC_mosiReg = 1'h0;
    flashC_waitReg = 1'h0;
    flashCtrl = 32'hAAAAAAAA;
    i2cC_rAddress = 8'hAA;
    i2cC_rOutEn = 1'h0;
    i2cC_rSCL = 1'h0;
    i2cC_rSDA = 1'h0;
    i2cC_rSlaveAddr = 7'h2A;
    i2cC_rState = 1'h0;
    i2cC_rWrite = 1'h0;
    i2cC_rWriteData = 8'hAA;
    i2cC_vrReadData = 1'h0;
    i2cC_vrReadData_1 = 1'h0;
    i2cC_vrReadData_2 = 1'h0;
    i2cC_vrReadData_3 = 1'h0;
    i2cC_vrReadData_4 = 1'h0;
    i2cC_vrReadData_5 = 1'h0;
    i2cC_vrReadData_6 = 1'h0;
    i2cC_vrReadData_7 = 1'h0;
    macV = 48'hAAAAAAAAAAAA;
    rdReg = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wdReg = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h19642 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h19642,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	begin
	  v__h24205 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting flashWorker flashCtrl:%0x",
		 v__h24205,
		 flashCtrl);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_advance_response] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_advance_response] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_advance_response && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_advance_response] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_advance_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_advance_response)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_advance_response] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/pwk/PWrk_n210.bsv\", line 60, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h19960 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h19960,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h19816 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h19816,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkPWrk_n210

