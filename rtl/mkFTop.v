//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Tue Jun  1 12:39:30 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     8
// pcie_txn                       O     8
// led                            O     3
// dac0_dap                       O    12
// dac0_dan                       O    12
// dac0_dbp                       O    12
// dac0_dbn                       O    12
// dac0_dcp                       O    12
// dac0_dcn                       O    12
// dac0_ddp                       O    12
// dac0_ddn                       O    12
// dac0_dacClkDiv                 O     1
// dac0_dacDelay                  O     1
// dac0_dacRf                     O     1
// dac0_dacRz                     O     1
// dac0_dacCal                    O     1 reg
// dac0_syncOutp                  O     1
// dac0_syncOutn                  O     1
// dac0_syncMutep                 O     1
// dac0_syncMuten                 O     1
// adx_csb                        O     1 reg
// adx_sdo                        O     1 reg
// adx_funct                      O     1 const
// adc0_oe                        O     1 const
// adc0_resetp                    O     1 reg
// adc0_sen                       O     1 reg
// adc0_sdata                     O     1 reg
// adc1_oe                        O     1 const
// adc1_resetp                    O     1 reg
// adc1_sen                       O     1 reg
// adc1_sdata                     O     1 reg
// gps_ppsSyncOut                 O     1
// dram_addr                      O    13
// dram_ba                        O     2
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_cs_n                      O     2
// dram_odt                       O     2
// dram_cke                       O     2
// dram_dm                        O     4
// dram_ck_p                      O     2
// dram_ck_n                      O     2
// dac0_dacSdrClk                 O     1 clock
// CLK_GATE_dac0_dacSdrClk        O     1 const
// adx_adx_sclk                   O     1 clock
// CLK_GATE_adx_adx_sclk          O     1 const
// adx_adx_sclkn                  O     1 clock
// CLK_GATE_adx_adx_sclkn         O     1 const
// adc0_sclk                      O     1 clock
// CLK_GATE_adc0_sclk             O     1 const
// adc0_sclkn                     O     1 clock
// CLK_GATE_adc0_sclkn            O     1 const
// adc1_sclk                      O     1 clock
// CLK_GATE_adc1_sclk             O     1 const
// adc1_sclkn                     O     1 clock
// CLK_GATE_adc1_sclkn            O     1 const
// trnClk                         O     1 clock
// CLK_GATE_trnClk                O     1 const
// pci0_reset_n_dac0_dacSdrRst    O     1 reset
// pci0_reset_n_adx_adx_srst      O     1 reset
// pci0_reset_n_adc0_rst          O     1 reset
// pci0_reset_n_adc1_rst          O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// dac_clkp                       I     1 clock
// dac_clkn                       I     1 clock
// adc_clkp                       I     1 clock
// adc_clkn                       I     1 clock
// adc0_clkp                      I     1 clock
// adc0_clkn                      I     1 clock
// adc1_clkp                      I     1 clock
// adc1_clkn                      I     1 clock
// pci0_reset_n                   I     1 reset
// pcie_rxp_i                     I     8
// pcie_rxn_i                     I     8
// adx_sdi_arg                    I     1 reg
// adx_status_arg                 I     1 unused
// adc0_ddp_arg                   I     7
// adc0_ddn_arg                   I     7
// adc0_sdout_arg                 I     1 reg
// adc1_ddp_arg                   I     7
// adc1_ddn_arg                   I     7
// adc1_sdout_arg                 I     1 reg
// gps_ppsSyncIn_x                I     1 reg
// dram_io_dq                    IO    32 unused
// dram_io_dqs_p                 IO     4 unused
// dram_io_dqs_n                 IO     4 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop(sys0_clkp,
	      sys0_clkn,
	      sys1_clkp,
	      sys1_clkn,
	      pci0_clkp,
	      pci0_clkn,
	      dac_clkp,
	      dac_clkn,
	      adc_clkp,
	      adc_clkn,
	      adc0_clkp,
	      adc0_clkn,
	      adc1_clkp,
	      adc1_clkn,
	      pci0_reset_n,

	      .dram_io_dq(dram0$dram_io_dq),
	      .dram_io_dqs_p(dram0$dram_io_dqs_p),
	      .dram_io_dqs_n(dram0$dram_io_dqs_n),

	      pcie_rxp_i,

	      pcie_rxn_i,

	      pcie_txp,

	      pcie_txn,

	      led,

	      dac0_dap,

	      dac0_dan,

	      dac0_dbp,

	      dac0_dbn,

	      dac0_dcp,

	      dac0_dcn,

	      dac0_ddp,

	      dac0_ddn,

	      dac0_dacClkDiv,

	      dac0_dacDelay,

	      dac0_dacRf,

	      dac0_dacRz,

	      dac0_dacCal,

	      dac0_syncOutp,

	      dac0_syncOutn,

	      dac0_syncMutep,

	      dac0_syncMuten,

	      adx_csb,

	      adx_sdo,

	      adx_sdi_arg,

	      adx_funct,

	      adx_status_arg,

	      adc0_oe,

	      adc0_ddp_arg,

	      adc0_ddn_arg,

	      adc0_resetp,

	      adc0_sen,

	      adc0_sdata,

	      adc0_sdout_arg,

	      adc1_oe,

	      adc1_ddp_arg,

	      adc1_ddn_arg,

	      adc1_resetp,

	      adc1_sen,

	      adc1_sdata,

	      adc1_sdout_arg,

	      gps_ppsSyncIn_x,

	      gps_ppsSyncOut,

	      dram_addr,

	      dram_ba,

	      dram_ras_n,

	      dram_cas_n,

	      dram_we_n,

	      dram_cs_n,

	      dram_odt,

	      dram_cke,

	      dram_dm,

	      dram_ck_p,

	      dram_ck_n,

	      dac0_dacSdrClk,
	      CLK_GATE_dac0_dacSdrClk,

	      adx_adx_sclk,
	      CLK_GATE_adx_adx_sclk,

	      adx_adx_sclkn,
	      CLK_GATE_adx_adx_sclkn,

	      adc0_sclk,
	      CLK_GATE_adc0_sclk,

	      adc0_sclkn,
	      CLK_GATE_adc0_sclkn,

	      adc1_sclk,
	      CLK_GATE_adc1_sclk,

	      adc1_sclkn,
	      CLK_GATE_adc1_sclkn,

	      trnClk,
	      CLK_GATE_trnClk,

	      pci0_reset_n_dac0_dacSdrRst,
	      pci0_reset_n_adx_adx_srst,
	      pci0_reset_n_adc0_rst,
	      pci0_reset_n_adc1_rst);
  input  sys0_clkp;
  input  sys0_clkn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  pci0_clkp;
  input  pci0_clkn;
  input  dac_clkp;
  input  dac_clkn;
  input  adc_clkp;
  input  adc_clkn;
  input  adc0_clkp;
  input  adc0_clkn;
  input  adc1_clkp;
  input  adc1_clkn;
  input  pci0_reset_n;

  inout  [31 : 0] dram0$dram_io_dq;
  inout  [3 : 0] dram0$dram_io_dqs_p;
  inout  [3 : 0] dram0$dram_io_dqs_n;

  // action method pcie_rxp
  input  [7 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [7 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [7 : 0] pcie_txp;

  // value method pcie_txn
  output [7 : 0] pcie_txn;

  // value method led
  output [2 : 0] led;

  // value method dac0_dap
  output [11 : 0] dac0_dap;

  // value method dac0_dan
  output [11 : 0] dac0_dan;

  // value method dac0_dbp
  output [11 : 0] dac0_dbp;

  // value method dac0_dbn
  output [11 : 0] dac0_dbn;

  // value method dac0_dcp
  output [11 : 0] dac0_dcp;

  // value method dac0_dcn
  output [11 : 0] dac0_dcn;

  // value method dac0_ddp
  output [11 : 0] dac0_ddp;

  // value method dac0_ddn
  output [11 : 0] dac0_ddn;

  // value method dac0_dacClkDiv
  output dac0_dacClkDiv;

  // value method dac0_dacDelay
  output dac0_dacDelay;

  // value method dac0_dacRf
  output dac0_dacRf;

  // value method dac0_dacRz
  output dac0_dacRz;

  // value method dac0_dacCal
  output dac0_dacCal;

  // value method dac0_syncOutp
  output dac0_syncOutp;

  // value method dac0_syncOutn
  output dac0_syncOutn;

  // value method dac0_syncMutep
  output dac0_syncMutep;

  // value method dac0_syncMuten
  output dac0_syncMuten;

  // value method adx_adx_csb
  output adx_csb;

  // value method adx_adx_sdo
  output adx_sdo;

  // action method adx_adx_sdi
  input  adx_sdi_arg;

  // value method adx_adx_funct
  output adx_funct;

  // action method adx_adx_status
  input  adx_status_arg;

  // value method adc0_oe
  output adc0_oe;

  // action method adc0_ddp
  input  [6 : 0] adc0_ddp_arg;

  // action method adc0_ddn
  input  [6 : 0] adc0_ddn_arg;

  // value method adc0_resetp
  output adc0_resetp;

  // value method adc0_sen
  output adc0_sen;

  // value method adc0_sdata
  output adc0_sdata;

  // action method adc0_sdout
  input  adc0_sdout_arg;

  // value method adc1_oe
  output adc1_oe;

  // action method adc1_ddp
  input  [6 : 0] adc1_ddp_arg;

  // action method adc1_ddn
  input  [6 : 0] adc1_ddn_arg;

  // value method adc1_resetp
  output adc1_resetp;

  // value method adc1_sen
  output adc1_sen;

  // value method adc1_sdata
  output adc1_sdata;

  // action method adc1_sdout
  input  adc1_sdout_arg;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [1 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_cs_n
  output [1 : 0] dram_cs_n;

  // value method dram_odt
  output [1 : 0] dram_odt;

  // value method dram_cke
  output [1 : 0] dram_cke;

  // value method dram_dm
  output [3 : 0] dram_dm;

  // value method dram_ck_p
  output [1 : 0] dram_ck_p;

  // value method dram_ck_n
  output [1 : 0] dram_ck_n;

  // oscillator and gates for output clock dac0_dacSdrClk
  output dac0_dacSdrClk;
  output CLK_GATE_dac0_dacSdrClk;

  // oscillator and gates for output clock adx_adx_sclk
  output adx_adx_sclk;
  output CLK_GATE_adx_adx_sclk;

  // oscillator and gates for output clock adx_adx_sclkn
  output adx_adx_sclkn;
  output CLK_GATE_adx_adx_sclkn;

  // oscillator and gates for output clock adc0_sclk
  output adc0_sclk;
  output CLK_GATE_adc0_sclk;

  // oscillator and gates for output clock adc0_sclkn
  output adc0_sclkn;
  output CLK_GATE_adc0_sclkn;

  // oscillator and gates for output clock adc1_sclk
  output adc1_sclk;
  output CLK_GATE_adc1_sclk;

  // oscillator and gates for output clock adc1_sclkn
  output adc1_sclkn;
  output CLK_GATE_adc1_sclkn;

  // oscillator and gates for output clock trnClk
  output trnClk;
  output CLK_GATE_trnClk;

  // output resets
  output pci0_reset_n_dac0_dacSdrRst;
  output pci0_reset_n_adx_adx_srst;
  output pci0_reset_n_adc0_rst;
  output pci0_reset_n_adc1_rst;

  // signals for module outputs
  wire [12 : 0] dram_addr;
  wire [11 : 0] dac0_dan,
		dac0_dap,
		dac0_dbn,
		dac0_dbp,
		dac0_dcn,
		dac0_dcp,
		dac0_ddn,
		dac0_ddp;
  wire [7 : 0] pcie_txn, pcie_txp;
  wire [3 : 0] dram_dm;
  wire [2 : 0] led;
  wire [1 : 0] dram_ba, dram_ck_n, dram_ck_p, dram_cke, dram_cs_n, dram_odt;
  wire CLK_GATE_adc0_sclk,
       CLK_GATE_adc0_sclkn,
       CLK_GATE_adc1_sclk,
       CLK_GATE_adc1_sclkn,
       CLK_GATE_adx_adx_sclk,
       CLK_GATE_adx_adx_sclkn,
       CLK_GATE_dac0_dacSdrClk,
       CLK_GATE_trnClk,
       adc0_oe,
       adc0_resetp,
       adc0_sclk,
       adc0_sclkn,
       adc0_sdata,
       adc0_sen,
       adc1_oe,
       adc1_resetp,
       adc1_sclk,
       adc1_sclkn,
       adc1_sdata,
       adc1_sen,
       adx_adx_sclk,
       adx_adx_sclkn,
       adx_csb,
       adx_funct,
       adx_sdo,
       dac0_dacCal,
       dac0_dacClkDiv,
       dac0_dacDelay,
       dac0_dacRf,
       dac0_dacRz,
       dac0_dacSdrClk,
       dac0_syncMuten,
       dac0_syncMutep,
       dac0_syncOutn,
       dac0_syncOutp,
       dram_cas_n,
       dram_ras_n,
       dram_we_n,
       gps_ppsSyncOut,
       pci0_reset_n_adc0_rst,
       pci0_reset_n_adc1_rst,
       pci0_reset_n_adx_adx_srst,
       pci0_reset_n_dac0_dacSdrRst,
       trnClk;

  // inlined wires
  wire [63 : 0] pci0_wTrnTxDat$wget;
  wire [7 : 0] pci0_wTrnTxRem$wget, pcie_irq_wInterruptDo$wget;
  wire pci0_pwTrnRx$whas,
       pci0_pwTrnTx$whas,
       pci0_wTrnRxCplS$wget,
       pci0_wTrnRxCplS$whas,
       pci0_wTrnRxNpOk$wget,
       pci0_wTrnRxNpOk$whas,
       pci0_wTrnTxDat$whas,
       pci0_wTrnTxDsc$wget,
       pci0_wTrnTxDsc$whas,
       pci0_wTrnTxEof$wget,
       pci0_wTrnTxEof$whas,
       pci0_wTrnTxRem$whas,
       pci0_wTrnTxSof$wget,
       pci0_wTrnTxSof$whas,
       pcie_irq_wInterruptDo$whas,
       pcie_irq_wInterruptRdyN$wget,
       pcie_irq_wInterruptRdyN$whas,
       tcW10_wti_sThreadBusy_pw$whas,
       tcW11_wti_sThreadBusy_pw$whas;

  // register Prelude_inst_changeSpecialWires_1_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_1_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_1_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_1_rg$EN;

  // register Prelude_inst_changeSpecialWires_rg
  reg [81 : 0] Prelude_inst_changeSpecialWires_rg;
  wire [81 : 0] Prelude_inst_changeSpecialWires_rg$D_IN;
  wire Prelude_inst_changeSpecialWires_rg$EN;

  // register pcie_irq_rInterruptDi
  reg [7 : 0] pcie_irq_rInterruptDi;
  wire [7 : 0] pcie_irq_rInterruptDi$D_IN;
  wire pcie_irq_rInterruptDi$EN;

  // register pcie_irq_rInterruptN
  reg pcie_irq_rInterruptN;
  wire pcie_irq_rInterruptN$D_IN, pcie_irq_rInterruptN$EN;

  // register pcie_irq_rInterrupting
  reg pcie_irq_rInterrupting;
  wire pcie_irq_rInterrupting$D_IN, pcie_irq_rInterrupting$EN;

  // register pcie_irq_rMMEnabled
  reg [2 : 0] pcie_irq_rMMEnabled;
  wire [2 : 0] pcie_irq_rMMEnabled$D_IN;
  wire pcie_irq_rMMEnabled$EN;

  // register pcie_irq_rMSIEnabled
  reg pcie_irq_rMSIEnabled;
  wire pcie_irq_rMSIEnabled$D_IN, pcie_irq_rMSIEnabled$EN;

  // register tcW10_wti_nowReq
  reg [66 : 0] tcW10_wti_nowReq;
  wire [66 : 0] tcW10_wti_nowReq$D_IN;
  wire tcW10_wti_nowReq$EN;

  // register tcW10_wti_sThreadBusy_d
  reg tcW10_wti_sThreadBusy_d;
  wire tcW10_wti_sThreadBusy_d$D_IN, tcW10_wti_sThreadBusy_d$EN;

  // register tcW11_wti_nowReq
  reg [66 : 0] tcW11_wti_nowReq;
  wire [66 : 0] tcW11_wti_nowReq$D_IN;
  wire tcW11_wti_nowReq$EN;

  // register tcW11_wti_sThreadBusy_d
  reg tcW11_wti_sThreadBusy_d;
  wire tcW11_wti_sThreadBusy_d$D_IN, tcW11_wti_sThreadBusy_d$EN;

  // ports of submodule adc0_clk
  wire adc0_clk$O;

  // ports of submodule adc0_rst
  wire adc0_rst$OUT_RST_N;

  // ports of submodule adc1_clk
  wire adc1_clk$O;

  // ports of submodule adcW10
  wire [66 : 0] adcW10$wti_s_req;
  wire [59 : 0] adcW10$wci_s_req;
  wire [33 : 0] adcW10$wci_s_resp;
  wire [31 : 0] adcW10$wsiM1_MData;
  wire [11 : 0] adcW10$wsiM1_MBurstLength;
  wire [7 : 0] adcW10$wsiM1_MReqInfo;
  wire [6 : 0] adcW10$adc0_ddn_arg,
	       adcW10$adc0_ddp_arg,
	       adcW10$adc1_ddn_arg,
	       adcW10$adc1_ddp_arg;
  wire [3 : 0] adcW10$wsiM1_MByteEn;
  wire [2 : 0] adcW10$wsiM1_MCmd;
  wire [1 : 0] adcW10$wci_s_MFlag, adcW10$wci_s_SFlag;
  wire adcW10$CLK_adc0_sclk,
       adcW10$CLK_adc0_sclkn,
       adcW10$CLK_adc1_sclk,
       adcW10$CLK_adc1_sclkn,
       adcW10$CLK_adcSdrClk,
       adcW10$CLK_adx_adx_sclk,
       adcW10$CLK_adx_adx_sclkn,
       adcW10$RST_N_adc0_rst,
       adcW10$RST_N_adc1_rst,
       adcW10$RST_N_adcSdrRst,
       adcW10$RST_N_adx_adx_srst,
       adcW10$adc0_oe,
       adcW10$adc0_resetp,
       adcW10$adc0_sdata,
       adcW10$adc0_sdout_arg,
       adcW10$adc0_sen,
       adcW10$adc1_oe,
       adcW10$adc1_resetp,
       adcW10$adc1_sdata,
       adcW10$adc1_sdout_arg,
       adcW10$adc1_sen,
       adcW10$adx_csb,
       adcW10$adx_funct,
       adcW10$adx_sdi_arg,
       adcW10$adx_sdo,
       adcW10$adx_status_arg,
       adcW10$wci_s_SThreadBusy,
       adcW10$wsiM1_MBurstPrecise,
       adcW10$wsiM1_MReqLast,
       adcW10$wsiM1_MReset_n,
       adcW10$wsiM1_SReset_n,
       adcW10$wsiM1_SThreadBusy,
       adcW10$wti_s_SThreadBusy;

  // ports of submodule adc_clk
  wire adc_clk$O;

  // ports of submodule ctop
  wire [152 : 0] ctop$server_request_put, ctop$server_response_get;
  wire [127 : 0] ctop$wmemiM_MData, ctop$wmemiM_SData;
  wire [63 : 0] ctop$cpNow;
  wire [35 : 0] ctop$wmemiM_MAddr;
  wire [31 : 0] ctop$wci_m_0_SData,
		ctop$wci_m_1_SData,
		ctop$wci_m_2_MData,
		ctop$wci_m_2_SData,
		ctop$wci_m_3_MData,
		ctop$wci_m_3_SData,
		ctop$wci_m_4_MData,
		ctop$wci_m_4_SData,
		ctop$wsi_m_dac_MData,
		ctop$wsi_s_adc_MData;
  wire [19 : 0] ctop$wci_m_2_MAddr, ctop$wci_m_3_MAddr, ctop$wci_m_4_MAddr;
  wire [15 : 0] ctop$wmemiM_MDataByteEn;
  wire [11 : 0] ctop$wmemiM_MBurstLength,
		ctop$wsi_m_dac_MBurstLength,
		ctop$wsi_s_adc_MBurstLength;
  wire [7 : 0] ctop$wsi_m_dac_MReqInfo, ctop$wsi_s_adc_MReqInfo;
  wire [3 : 0] ctop$wci_m_2_MByteEn,
	       ctop$wci_m_3_MByteEn,
	       ctop$wci_m_4_MByteEn,
	       ctop$wsi_m_dac_MByteEn,
	       ctop$wsi_s_adc_MByteEn;
  wire [2 : 0] ctop$switch_x,
	       ctop$wci_m_2_MCmd,
	       ctop$wci_m_3_MCmd,
	       ctop$wci_m_4_MCmd,
	       ctop$wmemiM_MCmd,
	       ctop$wsi_m_dac_MCmd,
	       ctop$wsi_s_adc_MCmd;
  wire [1 : 0] ctop$led,
	       ctop$wci_m_0_SFlag,
	       ctop$wci_m_0_SResp,
	       ctop$wci_m_1_SFlag,
	       ctop$wci_m_1_SResp,
	       ctop$wci_m_2_MFlag,
	       ctop$wci_m_2_SFlag,
	       ctop$wci_m_2_SResp,
	       ctop$wci_m_3_MFlag,
	       ctop$wci_m_3_SFlag,
	       ctop$wci_m_3_SResp,
	       ctop$wci_m_4_MFlag,
	       ctop$wci_m_4_SFlag,
	       ctop$wci_m_4_SResp,
	       ctop$wmemiM_SResp;
  wire ctop$EN_server_request_put,
       ctop$EN_server_response_get,
       ctop$RDY_server_request_put,
       ctop$RDY_server_response_get,
       ctop$RST_N_wci_m_2_mReset_n,
       ctop$RST_N_wci_m_3_mReset_n,
       ctop$RST_N_wci_m_4_mReset_n,
       ctop$gps_ppsSyncIn_x,
       ctop$gps_ppsSyncOut,
       ctop$wci_m_0_SThreadBusy,
       ctop$wci_m_1_SThreadBusy,
       ctop$wci_m_2_MAddrSpace,
       ctop$wci_m_2_SThreadBusy,
       ctop$wci_m_3_MAddrSpace,
       ctop$wci_m_3_SThreadBusy,
       ctop$wci_m_4_MAddrSpace,
       ctop$wci_m_4_SThreadBusy,
       ctop$wmemiM_MDataLast,
       ctop$wmemiM_MDataValid,
       ctop$wmemiM_MReqLast,
       ctop$wmemiM_MReset_n,
       ctop$wmemiM_SCmdAccept,
       ctop$wmemiM_SDataAccept,
       ctop$wmemiM_SRespLast,
       ctop$wsi_m_dac_MBurstPrecise,
       ctop$wsi_m_dac_MReqLast,
       ctop$wsi_m_dac_MReset_n,
       ctop$wsi_m_dac_SReset_n,
       ctop$wsi_m_dac_SThreadBusy,
       ctop$wsi_s_adc_MBurstPrecise,
       ctop$wsi_s_adc_MReqLast,
       ctop$wsi_s_adc_MReset_n,
       ctop$wsi_s_adc_SReset_n,
       ctop$wsi_s_adc_SThreadBusy;

  // ports of submodule dacW11
  wire [66 : 0] dacW11$wti_s_req;
  wire [59 : 0] dacW11$wci_s_req;
  wire [33 : 0] dacW11$wci_s_resp;
  wire [31 : 0] dacW11$wsiS1_MData;
  wire [11 : 0] dacW11$dac0_dan,
		dacW11$dac0_dap,
		dacW11$dac0_dbn,
		dacW11$dac0_dbp,
		dacW11$dac0_dcn,
		dacW11$dac0_dcp,
		dacW11$dac0_ddn,
		dacW11$dac0_ddp,
		dacW11$wsiS1_MBurstLength;
  wire [7 : 0] dacW11$wsiS1_MReqInfo;
  wire [3 : 0] dacW11$wsiS1_MByteEn;
  wire [2 : 0] dacW11$wsiS1_MCmd;
  wire [1 : 0] dacW11$wci_s_MFlag, dacW11$wci_s_SFlag;
  wire dacW11$CLK_dac0_dacSdrClk,
       dacW11$RST_N_dac0_dacSdrRst,
       dacW11$dac0_dacCal,
       dacW11$dac0_dacClkDiv,
       dacW11$dac0_dacDelay,
       dacW11$dac0_dacRf,
       dacW11$dac0_dacRz,
       dacW11$dac0_syncMuten,
       dacW11$dac0_syncMutep,
       dacW11$dac0_syncOutn,
       dacW11$dac0_syncOutp,
       dacW11$wci_s_SThreadBusy,
       dacW11$wsiS1_MBurstPrecise,
       dacW11$wsiS1_MReqLast,
       dacW11$wsiS1_MReset_n,
       dacW11$wsiS1_SReset_n,
       dacW11$wsiS1_SThreadBusy,
       dacW11$wti_s_SThreadBusy;

  // ports of submodule dac_clk
  wire dac_clk$O;

  // ports of submodule dac_rst
  wire dac_rst$OUT_RST_N;

  // ports of submodule dram0
  wire [127 : 0] dram0$wmemiS_MData, dram0$wmemiS_SData;
  wire [59 : 0] dram0$wci_s_req;
  wire [35 : 0] dram0$wmemiS_MAddr;
  wire [33 : 0] dram0$wci_s_resp;
  wire [31 : 0] dram0$dram_io_dq;
  wire [15 : 0] dram0$wmemiS_MDataByteEn;
  wire [12 : 0] dram0$dram_addr;
  wire [11 : 0] dram0$wmemiS_MBurstLength;
  wire [3 : 0] dram0$dram_dm, dram0$dram_io_dqs_n, dram0$dram_io_dqs_p;
  wire [2 : 0] dram0$wmemiS_MCmd;
  wire [1 : 0] dram0$dram_ba,
	       dram0$dram_ck_n,
	       dram0$dram_ck_p,
	       dram0$dram_cke,
	       dram0$dram_cs_n,
	       dram0$dram_odt,
	       dram0$wci_s_MFlag,
	       dram0$wci_s_SFlag,
	       dram0$wmemiS_SResp;
  wire dram0$dram_cas_n,
       dram0$dram_ras_n,
       dram0$dram_we_n,
       dram0$wci_s_SThreadBusy,
       dram0$wmemiS_MDataLast,
       dram0$wmemiS_MDataValid,
       dram0$wmemiS_MReqLast,
       dram0$wmemiS_MReset_n,
       dram0$wmemiS_SCmdAccept,
       dram0$wmemiS_SDataAccept,
       dram0$wmemiS_SRespLast;

  // ports of submodule fI2P
  wire [80 : 0] fI2P$D_IN, fI2P$D_OUT;
  wire fI2P$CLR, fI2P$DEQ, fI2P$EMPTY_N, fI2P$ENQ, fI2P$FULL_N;

  // ports of submodule fP2I
  wire [80 : 0] fP2I$D_IN, fP2I$D_OUT;
  wire fP2I$CLR, fP2I$DEQ, fP2I$EMPTY_N, fP2I$ENQ, fP2I$FULL_N;

  // ports of submodule infLed
  wire [1 : 0] infLed$WGET, infLed$WVAL;

  // ports of submodule pci0_clk
  wire pci0_clk$O;

  // ports of submodule pci0_pcie_ep
  wire [63 : 0] pci0_pcie_ep$cfg_dsn,
		pci0_pcie_ep$trn_rd,
		pci0_pcie_ep$trn_td;
  wire [47 : 0] pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pci0_pcie_ep$cfg_di;
  wire [9 : 0] pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_interrupt_di,
	       pci0_pcie_ep$cfg_interrupt_do,
	       pci0_pcie_ep$pci_exp_rxn,
	       pci0_pcie_ep$pci_exp_rxp,
	       pci0_pcie_ep$pci_exp_txn,
	       pci0_pcie_ep$pci_exp_txp,
	       pci0_pcie_ep$trn_rrem_n,
	       pci0_pcie_ep$trn_trem_n;
  wire [6 : 0] pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pci0_pcie_ep$cfg_byte_en_n;
  wire [2 : 0] pci0_pcie_ep$cfg_function_number,
	       pci0_pcie_ep$cfg_interrupt_mmenable;
  wire pci0_pcie_ep$cfg_err_cor_n,
       pci0_pcie_ep$cfg_err_cpl_abort_n,
       pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pci0_pcie_ep$cfg_err_ecrc_n,
       pci0_pcie_ep$cfg_err_locked_n,
       pci0_pcie_ep$cfg_err_posted_n,
       pci0_pcie_ep$cfg_err_ur_n,
       pci0_pcie_ep$cfg_interrupt_assert_n,
       pci0_pcie_ep$cfg_interrupt_msienable,
       pci0_pcie_ep$cfg_interrupt_n,
       pci0_pcie_ep$cfg_interrupt_rdy_n,
       pci0_pcie_ep$cfg_pm_wake_n,
       pci0_pcie_ep$cfg_rd_en_n,
       pci0_pcie_ep$cfg_trn_pending_n,
       pci0_pcie_ep$cfg_wr_en_n,
       pci0_pcie_ep$trn_clk,
       pci0_pcie_ep$trn_lnk_up_n,
       pci0_pcie_ep$trn_rcpl_streaming_n,
       pci0_pcie_ep$trn_rdst_rdy_n,
       pci0_pcie_ep$trn_reof_n,
       pci0_pcie_ep$trn_reset_n,
       pci0_pcie_ep$trn_rnp_ok_n,
       pci0_pcie_ep$trn_rsof_n,
       pci0_pcie_ep$trn_rsrc_rdy_n,
       pci0_pcie_ep$trn_tdst_rdy_n,
       pci0_pcie_ep$trn_teof_n,
       pci0_pcie_ep$trn_terrfwd_n,
       pci0_pcie_ep$trn_tsof_n,
       pci0_pcie_ep$trn_tsrc_dsc_n,
       pci0_pcie_ep$trn_tsrc_rdy_n;

  // ports of submodule pci0_rst
  wire pci0_rst$O;

  // ports of submodule pciLinkUpResetGen
  wire pciLinkUpResetGen$ASSERT_IN, pciLinkUpResetGen$OUT_RST_N;

  // ports of submodule pcie_irq_fifoAssert
  wire [7 : 0] pcie_irq_fifoAssert$dD_OUT, pcie_irq_fifoAssert$sD_IN;
  wire pcie_irq_fifoAssert$dDEQ,
       pcie_irq_fifoAssert$dEMPTY_N,
       pcie_irq_fifoAssert$sENQ;

  // ports of submodule pcie_irq_rMMEnabled_1
  wire [2 : 0] pcie_irq_rMMEnabled_1$WVAL;

  // ports of submodule sys0_clk
  wire sys0_clk$O;

  // ports of submodule sys0_rst
  wire sys0_rst$OUT_RST_N;

  // ports of submodule sys1_clk
  wire sys1_clk$O;

  // ports of submodule sys1_rst
  wire sys1_rst$OUT_RST_N;

  // ports of submodule tcW10_now
  wire [63 : 0] tcW10_now$dD_OUT, tcW10_now$sD_IN;
  wire tcW10_now$sEN, tcW10_now$sRDY;

  // ports of submodule tcW11_now
  wire [63 : 0] tcW11_now$dD_OUT, tcW11_now$sD_IN;
  wire tcW11_now$sEN, tcW11_now$sRDY;

  // ports of submodule trn_rst
  wire trn_rst$OUT_RST_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect2,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1,
       CAN_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2,
       CAN_FIRE_RL_connect,
       CAN_FIRE_RL_connect_1,
       CAN_FIRE_RL_connect_interrupt_1,
       CAN_FIRE_RL_connect_interrupt_do,
       CAN_FIRE_RL_connect_interrupt_mmenable,
       CAN_FIRE_RL_connect_interrupt_msienable,
       CAN_FIRE_RL_connect_interrupt_rdy_n,
       CAN_FIRE_RL_every,
       CAN_FIRE_RL_infLed_clock_domain_crossing,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mBurstLConnect,
       CAN_FIRE_RL_mBurstLConnect_1,
       CAN_FIRE_RL_mBurstLConnect_2,
       CAN_FIRE_RL_mBurstPConnect,
       CAN_FIRE_RL_mBurstPConnect_1,
       CAN_FIRE_RL_mByteEnConnect,
       CAN_FIRE_RL_mByteEnConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mCmdConnect_2,
       CAN_FIRE_RL_mDataBEConnect,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mDataConnect_2,
       CAN_FIRE_RL_mDataIConnect,
       CAN_FIRE_RL_mDataIConnect_1,
       CAN_FIRE_RL_mDataLConnect,
       CAN_FIRE_RL_mDataVConnect,
       CAN_FIRE_RL_mFlagConnect_2,
       CAN_FIRE_RL_mFlagConnect_3,
       CAN_FIRE_RL_mFlagConnect_4,
       CAN_FIRE_RL_mReqIConnect,
       CAN_FIRE_RL_mReqIConnect_1,
       CAN_FIRE_RL_mReqLConnect,
       CAN_FIRE_RL_mReqLConnect_1,
       CAN_FIRE_RL_mReqLConnect_2,
       CAN_FIRE_RL_mRstConnect,
       CAN_FIRE_RL_mRstConnect_1,
       CAN_FIRE_RL_mRstConnect_2,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_pci0_connect_trn_rx,
       CAN_FIRE_RL_pci0_connect_trn_tx,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       CAN_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing,
       CAN_FIRE_RL_plr,
       CAN_FIRE_RL_reqConnect_2,
       CAN_FIRE_RL_reqConnect_3,
       CAN_FIRE_RL_reqConnect_4,
       CAN_FIRE_RL_reqConnect_5,
       CAN_FIRE_RL_reqConnect_6,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sDataConnect_1,
       CAN_FIRE_RL_sDataConnect_2,
       CAN_FIRE_RL_sDataConnect_3,
       CAN_FIRE_RL_sDataConnect_4,
       CAN_FIRE_RL_sDataConnect_5,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sFlagConnect_1,
       CAN_FIRE_RL_sFlagConnect_2,
       CAN_FIRE_RL_sFlagConnect_3,
       CAN_FIRE_RL_sFlagConnect_4,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRespConnect_1,
       CAN_FIRE_RL_sRespConnect_2,
       CAN_FIRE_RL_sRespConnect_3,
       CAN_FIRE_RL_sRespConnect_4,
       CAN_FIRE_RL_sRespConnect_5,
       CAN_FIRE_RL_sRespLConnect,
       CAN_FIRE_RL_sRstConnect,
       CAN_FIRE_RL_sRstConnect_1,
       CAN_FIRE_RL_scaConnect,
       CAN_FIRE_RL_sdaConnect,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_RL_stbConnect_4,
       CAN_FIRE_RL_stbConnect_5,
       CAN_FIRE_RL_stbConnect_6,
       CAN_FIRE_RL_stbConnect_7,
       CAN_FIRE_RL_stbConnect_8,
       CAN_FIRE_RL_tcW10_send_time,
       CAN_FIRE_RL_tcW10_wti_sThreadBusy_reg,
       CAN_FIRE_RL_tcW11_send_time,
       CAN_FIRE_RL_tcW11_wti_sThreadBusy_reg,
       CAN_FIRE_RL_tie_off_inputs,
       CAN_FIRE_RL_tie_off_inputs_1,
       CAN_FIRE_adc0_ddn,
       CAN_FIRE_adc0_ddp,
       CAN_FIRE_adc0_sdout,
       CAN_FIRE_adc1_ddn,
       CAN_FIRE_adc1_ddp,
       CAN_FIRE_adc1_sdout,
       CAN_FIRE_adx_adx_sdi,
       CAN_FIRE_adx_adx_status,
       CAN_FIRE_gps_ppsSyncIn,
       CAN_FIRE_pcie_rxn,
       CAN_FIRE_pcie_rxp,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect2,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1,
       WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2,
       WILL_FIRE_RL_connect,
       WILL_FIRE_RL_connect_1,
       WILL_FIRE_RL_connect_interrupt_1,
       WILL_FIRE_RL_connect_interrupt_do,
       WILL_FIRE_RL_connect_interrupt_mmenable,
       WILL_FIRE_RL_connect_interrupt_msienable,
       WILL_FIRE_RL_connect_interrupt_rdy_n,
       WILL_FIRE_RL_every,
       WILL_FIRE_RL_infLed_clock_domain_crossing,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mBurstLConnect,
       WILL_FIRE_RL_mBurstLConnect_1,
       WILL_FIRE_RL_mBurstLConnect_2,
       WILL_FIRE_RL_mBurstPConnect,
       WILL_FIRE_RL_mBurstPConnect_1,
       WILL_FIRE_RL_mByteEnConnect,
       WILL_FIRE_RL_mByteEnConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mCmdConnect_2,
       WILL_FIRE_RL_mDataBEConnect,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mDataConnect_2,
       WILL_FIRE_RL_mDataIConnect,
       WILL_FIRE_RL_mDataIConnect_1,
       WILL_FIRE_RL_mDataLConnect,
       WILL_FIRE_RL_mDataVConnect,
       WILL_FIRE_RL_mFlagConnect_2,
       WILL_FIRE_RL_mFlagConnect_3,
       WILL_FIRE_RL_mFlagConnect_4,
       WILL_FIRE_RL_mReqIConnect,
       WILL_FIRE_RL_mReqIConnect_1,
       WILL_FIRE_RL_mReqLConnect,
       WILL_FIRE_RL_mReqLConnect_1,
       WILL_FIRE_RL_mReqLConnect_2,
       WILL_FIRE_RL_mRstConnect,
       WILL_FIRE_RL_mRstConnect_1,
       WILL_FIRE_RL_mRstConnect_2,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_pci0_connect_trn_rx,
       WILL_FIRE_RL_pci0_connect_trn_tx,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing,
       WILL_FIRE_RL_plr,
       WILL_FIRE_RL_reqConnect_2,
       WILL_FIRE_RL_reqConnect_3,
       WILL_FIRE_RL_reqConnect_4,
       WILL_FIRE_RL_reqConnect_5,
       WILL_FIRE_RL_reqConnect_6,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sDataConnect_1,
       WILL_FIRE_RL_sDataConnect_2,
       WILL_FIRE_RL_sDataConnect_3,
       WILL_FIRE_RL_sDataConnect_4,
       WILL_FIRE_RL_sDataConnect_5,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sFlagConnect_1,
       WILL_FIRE_RL_sFlagConnect_2,
       WILL_FIRE_RL_sFlagConnect_3,
       WILL_FIRE_RL_sFlagConnect_4,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRespConnect_1,
       WILL_FIRE_RL_sRespConnect_2,
       WILL_FIRE_RL_sRespConnect_3,
       WILL_FIRE_RL_sRespConnect_4,
       WILL_FIRE_RL_sRespConnect_5,
       WILL_FIRE_RL_sRespLConnect,
       WILL_FIRE_RL_sRstConnect,
       WILL_FIRE_RL_sRstConnect_1,
       WILL_FIRE_RL_scaConnect,
       WILL_FIRE_RL_sdaConnect,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_RL_stbConnect_4,
       WILL_FIRE_RL_stbConnect_5,
       WILL_FIRE_RL_stbConnect_6,
       WILL_FIRE_RL_stbConnect_7,
       WILL_FIRE_RL_stbConnect_8,
       WILL_FIRE_RL_tcW10_send_time,
       WILL_FIRE_RL_tcW10_wti_sThreadBusy_reg,
       WILL_FIRE_RL_tcW11_send_time,
       WILL_FIRE_RL_tcW11_wti_sThreadBusy_reg,
       WILL_FIRE_RL_tie_off_inputs,
       WILL_FIRE_RL_tie_off_inputs_1,
       WILL_FIRE_adc0_ddn,
       WILL_FIRE_adc0_ddp,
       WILL_FIRE_adc0_sdout,
       WILL_FIRE_adc1_ddn,
       WILL_FIRE_adc1_ddp,
       WILL_FIRE_adc1_sdout,
       WILL_FIRE_adx_adx_sdi,
       WILL_FIRE_adx_adx_status,
       WILL_FIRE_gps_ppsSyncIn,
       WILL_FIRE_pcie_rxn,
       WILL_FIRE_pcie_rxp;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_ctop$server_request_put_1__VAL_1,
		 MUX_ctop$server_request_put_1__VAL_2;
  wire [81 : 0] MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1,
		MUX_Prelude_inst_changeSpecialWires_rg$write_1__VAL_1;
  wire [80 : 0] MUX_fI2P$enq_1__VAL_1;
  wire MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1,
       MUX_Prelude_inst_changeSpecialWires_rg$write_1__SEL_1,
       MUX_ctop$server_request_put_1__SEL_1;

  // remaining internal signals
  wire [127 : 0] put_data__h4411, wOut_data__h4240;
  wire [15 : 0] pci0_pcie_ep_cfg_bus_number__33_CONCAT_pci0_pc_ETC___d248,
		put_be__h4410,
		wOut_be__h4239;

  // oscillator and gates for output clock dac0_dacSdrClk
  assign dac0_dacSdrClk = dacW11$CLK_dac0_dacSdrClk ;
  assign CLK_GATE_dac0_dacSdrClk = 1'b1 ;

  // oscillator and gates for output clock adx_adx_sclk
  assign adx_adx_sclk = adcW10$CLK_adx_adx_sclk ;
  assign CLK_GATE_adx_adx_sclk = 1'b1 ;

  // oscillator and gates for output clock adx_adx_sclkn
  assign adx_adx_sclkn = adcW10$CLK_adx_adx_sclkn ;
  assign CLK_GATE_adx_adx_sclkn = 1'b1 ;

  // oscillator and gates for output clock adc0_sclk
  assign adc0_sclk = adcW10$CLK_adc0_sclk ;
  assign CLK_GATE_adc0_sclk = 1'b1 ;

  // oscillator and gates for output clock adc0_sclkn
  assign adc0_sclkn = adcW10$CLK_adc0_sclkn ;
  assign CLK_GATE_adc0_sclkn = 1'b1 ;

  // oscillator and gates for output clock adc1_sclk
  assign adc1_sclk = adcW10$CLK_adc1_sclk ;
  assign CLK_GATE_adc1_sclk = 1'b1 ;

  // oscillator and gates for output clock adc1_sclkn
  assign adc1_sclkn = adcW10$CLK_adc1_sclkn ;
  assign CLK_GATE_adc1_sclkn = 1'b1 ;

  // oscillator and gates for output clock trnClk
  assign trnClk = pci0_pcie_ep$trn_clk ;
  assign CLK_GATE_trnClk = 1'b1 ;

  // output resets
  assign pci0_reset_n_adx_adx_srst = adcW10$RST_N_adx_adx_srst ;
  assign pci0_reset_n_dac0_dacSdrRst = dacW11$RST_N_dac0_dacSdrRst ;
  assign pci0_reset_n_adc1_rst = adcW10$RST_N_adc1_rst ;
  assign pci0_reset_n_adc0_rst = adcW10$RST_N_adc0_rst ;

  // action method pcie_rxp
  assign CAN_FIRE_pcie_rxp = 1'd1 ;
  assign WILL_FIRE_pcie_rxp = 1'd1 ;

  // action method pcie_rxn
  assign CAN_FIRE_pcie_rxn = 1'd1 ;
  assign WILL_FIRE_pcie_rxn = 1'd1 ;

  // value method pcie_txp
  assign pcie_txp = pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pci0_pcie_ep$pci_exp_txn ;

  // value method led
  assign led = { ~infLed$WGET, ~(!pci0_pcie_ep$trn_lnk_up_n) } ;

  // value method dac0_dap
  assign dac0_dap = dacW11$dac0_dap ;

  // value method dac0_dan
  assign dac0_dan = dacW11$dac0_dan ;

  // value method dac0_dbp
  assign dac0_dbp = dacW11$dac0_dbp ;

  // value method dac0_dbn
  assign dac0_dbn = dacW11$dac0_dbn ;

  // value method dac0_dcp
  assign dac0_dcp = dacW11$dac0_dcp ;

  // value method dac0_dcn
  assign dac0_dcn = dacW11$dac0_dcn ;

  // value method dac0_ddp
  assign dac0_ddp = dacW11$dac0_ddp ;

  // value method dac0_ddn
  assign dac0_ddn = dacW11$dac0_ddn ;

  // value method dac0_dacClkDiv
  assign dac0_dacClkDiv = dacW11$dac0_dacClkDiv ;

  // value method dac0_dacDelay
  assign dac0_dacDelay = dacW11$dac0_dacDelay ;

  // value method dac0_dacRf
  assign dac0_dacRf = dacW11$dac0_dacRf ;

  // value method dac0_dacRz
  assign dac0_dacRz = dacW11$dac0_dacRz ;

  // value method dac0_dacCal
  assign dac0_dacCal = dacW11$dac0_dacCal ;

  // value method dac0_syncOutp
  assign dac0_syncOutp = dacW11$dac0_syncOutp ;

  // value method dac0_syncOutn
  assign dac0_syncOutn = dacW11$dac0_syncOutn ;

  // value method dac0_syncMutep
  assign dac0_syncMutep = dacW11$dac0_syncMutep ;

  // value method dac0_syncMuten
  assign dac0_syncMuten = dacW11$dac0_syncMuten ;

  // value method adx_adx_csb
  assign adx_csb = adcW10$adx_csb ;

  // value method adx_adx_sdo
  assign adx_sdo = adcW10$adx_sdo ;

  // action method adx_adx_sdi
  assign CAN_FIRE_adx_adx_sdi = 1'd1 ;
  assign WILL_FIRE_adx_adx_sdi = 1'd1 ;

  // value method adx_adx_funct
  assign adx_funct = adcW10$adx_funct ;

  // action method adx_adx_status
  assign CAN_FIRE_adx_adx_status = 1'd1 ;
  assign WILL_FIRE_adx_adx_status = 1'd1 ;

  // value method adc0_oe
  assign adc0_oe = adcW10$adc0_oe ;

  // action method adc0_ddp
  assign CAN_FIRE_adc0_ddp = 1'd1 ;
  assign WILL_FIRE_adc0_ddp = 1'd1 ;

  // action method adc0_ddn
  assign CAN_FIRE_adc0_ddn = 1'd1 ;
  assign WILL_FIRE_adc0_ddn = 1'd1 ;

  // value method adc0_resetp
  assign adc0_resetp = adcW10$adc0_resetp ;

  // value method adc0_sen
  assign adc0_sen = adcW10$adc0_sen ;

  // value method adc0_sdata
  assign adc0_sdata = adcW10$adc0_sdata ;

  // action method adc0_sdout
  assign CAN_FIRE_adc0_sdout = 1'd1 ;
  assign WILL_FIRE_adc0_sdout = 1'd1 ;

  // value method adc1_oe
  assign adc1_oe = adcW10$adc1_oe ;

  // action method adc1_ddp
  assign CAN_FIRE_adc1_ddp = 1'd1 ;
  assign WILL_FIRE_adc1_ddp = 1'd1 ;

  // action method adc1_ddn
  assign CAN_FIRE_adc1_ddn = 1'd1 ;
  assign WILL_FIRE_adc1_ddn = 1'd1 ;

  // value method adc1_resetp
  assign adc1_resetp = adcW10$adc1_resetp ;

  // value method adc1_sen
  assign adc1_sen = adcW10$adc1_sen ;

  // value method adc1_sdata
  assign adc1_sdata = adcW10$adc1_sdata ;

  // action method adc1_sdout
  assign CAN_FIRE_adc1_sdout = 1'd1 ;
  assign WILL_FIRE_adc1_sdout = 1'd1 ;

  // action method gps_ppsSyncIn
  assign CAN_FIRE_gps_ppsSyncIn = 1'd1 ;
  assign WILL_FIRE_gps_ppsSyncIn = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = ctop$gps_ppsSyncOut ;

  // value method dram_addr
  assign dram_addr = dram0$dram_addr ;

  // value method dram_ba
  assign dram_ba = dram0$dram_ba ;

  // value method dram_ras_n
  assign dram_ras_n = dram0$dram_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = dram0$dram_cas_n ;

  // value method dram_we_n
  assign dram_we_n = dram0$dram_we_n ;

  // value method dram_cs_n
  assign dram_cs_n = dram0$dram_cs_n ;

  // value method dram_odt
  assign dram_odt = dram0$dram_odt ;

  // value method dram_cke
  assign dram_cke = dram0$dram_cke ;

  // value method dram_dm
  assign dram_dm = dram0$dram_dm ;

  // value method dram_ck_p
  assign dram_ck_p = dram0$dram_ck_p ;

  // value method dram_ck_n
  assign dram_ck_n = dram0$dram_ck_n ;

  // submodule adc0_clk
  IBUFDS adc0_clk(.I(adc0_clkp), .IB(adc0_clkn), .O(adc0_clk$O));

  // submodule adc0_rst
  SyncResetA #(.RSTDELAY(32'd0)) adc0_rst(.CLK(adc0_clk$O),
					  .IN_RST_N(pciLinkUpResetGen$OUT_RST_N),
					  .OUT_RST_N(adc0_rst$OUT_RST_N));

  // submodule adc1_clk
  IBUFDS adc1_clk(.I(adc1_clkp), .IB(adc1_clkn), .O(adc1_clk$O));

  // submodule adc1_rst
  SyncResetA #(.RSTDELAY(32'd0)) adc1_rst(.CLK(adc1_clk$O),
					  .IN_RST_N(pciLinkUpResetGen$OUT_RST_N),
					  .OUT_RST_N());

  // submodule adcW10
  mkADCWorker adcW10(.CLK_sys0_clk(sys0_clk$O),
		     .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		     .CLK_adc_clk(adc_clk$O),
		     .CLK_adc0_clk(adc0_clk$O),
		     .CLK_adc1_clk(adc1_clk$O),
		     .RST_N_adcx_rst(adc0_rst$OUT_RST_N),
		     .CLK(pci0_pcie_ep$trn_clk),
		     .RST_N(ctop$RST_N_wci_m_2_mReset_n),
		     .adc0_ddn_arg(adcW10$adc0_ddn_arg),
		     .adc0_ddp_arg(adcW10$adc0_ddp_arg),
		     .adc0_sdout_arg(adcW10$adc0_sdout_arg),
		     .adc1_ddn_arg(adcW10$adc1_ddn_arg),
		     .adc1_ddp_arg(adcW10$adc1_ddp_arg),
		     .adc1_sdout_arg(adcW10$adc1_sdout_arg),
		     .adx_sdi_arg(adcW10$adx_sdi_arg),
		     .adx_status_arg(adcW10$adx_status_arg),
		     .wci_s_MFlag(adcW10$wci_s_MFlag),
		     .wci_s_req(adcW10$wci_s_req),
		     .wti_s_req(adcW10$wti_s_req),
		     .wsiM1_SThreadBusy(adcW10$wsiM1_SThreadBusy),
		     .wsiM1_SReset_n(adcW10$wsiM1_SReset_n),
		     .wci_s_resp(adcW10$wci_s_resp),
		     .wci_s_SThreadBusy(adcW10$wci_s_SThreadBusy),
		     .wci_s_SFlag(adcW10$wci_s_SFlag),
		     .wti_s_SThreadBusy(adcW10$wti_s_SThreadBusy),
		     .wsiM1_MCmd(adcW10$wsiM1_MCmd),
		     .wsiM1_MReqLast(adcW10$wsiM1_MReqLast),
		     .wsiM1_MBurstPrecise(adcW10$wsiM1_MBurstPrecise),
		     .wsiM1_MBurstLength(adcW10$wsiM1_MBurstLength),
		     .wsiM1_MData(adcW10$wsiM1_MData),
		     .wsiM1_MByteEn(adcW10$wsiM1_MByteEn),
		     .wsiM1_MReqInfo(adcW10$wsiM1_MReqInfo),
		     .wsiM1_MReset_n(adcW10$wsiM1_MReset_n),
		     .adx_csb(adcW10$adx_csb),
		     .adx_sdo(adcW10$adx_sdo),
		     .adx_funct(adcW10$adx_funct),
		     .adc0_oe(adcW10$adc0_oe),
		     .adc0_resetp(adcW10$adc0_resetp),
		     .adc0_sen(adcW10$adc0_sen),
		     .adc0_sdata(adcW10$adc0_sdata),
		     .adc1_oe(adcW10$adc1_oe),
		     .adc1_resetp(adcW10$adc1_resetp),
		     .adc1_sen(adcW10$adc1_sen),
		     .adc1_sdata(adcW10$adc1_sdata),
		     .CLK_adx_adx_sclk(adcW10$CLK_adx_adx_sclk),
		     .CLK_GATE_adx_adx_sclk(),
		     .CLK_adx_adx_sclkn(adcW10$CLK_adx_adx_sclkn),
		     .CLK_GATE_adx_adx_sclkn(),
		     .CLK_adc0_sclk(adcW10$CLK_adc0_sclk),
		     .CLK_GATE_adc0_sclk(),
		     .CLK_adc0_sclkn(adcW10$CLK_adc0_sclkn),
		     .CLK_GATE_adc0_sclkn(),
		     .CLK_adc1_sclk(adcW10$CLK_adc1_sclk),
		     .CLK_GATE_adc1_sclk(),
		     .CLK_adc1_sclkn(adcW10$CLK_adc1_sclkn),
		     .CLK_GATE_adc1_sclkn(),
		     .CLK_adcSdrClk(adcW10$CLK_adcSdrClk),
		     .CLK_GATE_adcSdrClk(),
		     .RST_N_adx_adx_srst(adcW10$RST_N_adx_adx_srst),
		     .RST_N_adc0_rst(adcW10$RST_N_adc0_rst),
		     .RST_N_adc1_rst(adcW10$RST_N_adc1_rst),
		     .RST_N_adcSdrRst(adcW10$RST_N_adcSdrRst));

  // submodule adc_clk
  IBUFDS adc_clk(.I(adc_clkp), .IB(adc_clkn), .O(adc_clk$O));

  // submodule adc_rst
  SyncResetA #(.RSTDELAY(32'd0)) adc_rst(.CLK(adc_clk$O),
					 .IN_RST_N(pciLinkUpResetGen$OUT_RST_N),
					 .OUT_RST_N());

  // submodule ctop
  mkCTop ctop(.pciDevice(pci0_pcie_ep_cfg_bus_number__33_CONCAT_pci0_pc_ETC___d248),
	      .CLK_sys0_clk(sys0_clk$O),
	      .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
	      .CLK(pci0_pcie_ep$trn_clk),
	      .RST_N(trn_rst$OUT_RST_N),
	      .gps_ppsSyncIn_x(ctop$gps_ppsSyncIn_x),
	      .server_request_put(ctop$server_request_put),
	      .switch_x(ctop$switch_x),
	      .wci_m_0_SData(ctop$wci_m_0_SData),
	      .wci_m_0_SFlag(ctop$wci_m_0_SFlag),
	      .wci_m_0_SResp(ctop$wci_m_0_SResp),
	      .wci_m_1_SData(ctop$wci_m_1_SData),
	      .wci_m_1_SFlag(ctop$wci_m_1_SFlag),
	      .wci_m_1_SResp(ctop$wci_m_1_SResp),
	      .wci_m_2_SData(ctop$wci_m_2_SData),
	      .wci_m_2_SFlag(ctop$wci_m_2_SFlag),
	      .wci_m_2_SResp(ctop$wci_m_2_SResp),
	      .wci_m_3_SData(ctop$wci_m_3_SData),
	      .wci_m_3_SFlag(ctop$wci_m_3_SFlag),
	      .wci_m_3_SResp(ctop$wci_m_3_SResp),
	      .wci_m_4_SData(ctop$wci_m_4_SData),
	      .wci_m_4_SFlag(ctop$wci_m_4_SFlag),
	      .wci_m_4_SResp(ctop$wci_m_4_SResp),
	      .wmemiM_SData(ctop$wmemiM_SData),
	      .wmemiM_SResp(ctop$wmemiM_SResp),
	      .wsi_s_adc_MBurstLength(ctop$wsi_s_adc_MBurstLength),
	      .wsi_s_adc_MByteEn(ctop$wsi_s_adc_MByteEn),
	      .wsi_s_adc_MCmd(ctop$wsi_s_adc_MCmd),
	      .wsi_s_adc_MData(ctop$wsi_s_adc_MData),
	      .wsi_s_adc_MReqInfo(ctop$wsi_s_adc_MReqInfo),
	      .EN_server_request_put(ctop$EN_server_request_put),
	      .EN_server_response_get(ctop$EN_server_response_get),
	      .wci_m_0_SThreadBusy(ctop$wci_m_0_SThreadBusy),
	      .wci_m_1_SThreadBusy(ctop$wci_m_1_SThreadBusy),
	      .wci_m_2_SThreadBusy(ctop$wci_m_2_SThreadBusy),
	      .wci_m_3_SThreadBusy(ctop$wci_m_3_SThreadBusy),
	      .wci_m_4_SThreadBusy(ctop$wci_m_4_SThreadBusy),
	      .wsi_s_adc_MReqLast(ctop$wsi_s_adc_MReqLast),
	      .wsi_s_adc_MBurstPrecise(ctop$wsi_s_adc_MBurstPrecise),
	      .wsi_s_adc_MReset_n(ctop$wsi_s_adc_MReset_n),
	      .wsi_m_dac_SThreadBusy(ctop$wsi_m_dac_SThreadBusy),
	      .wsi_m_dac_SReset_n(ctop$wsi_m_dac_SReset_n),
	      .wmemiM_SRespLast(ctop$wmemiM_SRespLast),
	      .wmemiM_SCmdAccept(ctop$wmemiM_SCmdAccept),
	      .wmemiM_SDataAccept(ctop$wmemiM_SDataAccept),
	      .RDY_server_request_put(ctop$RDY_server_request_put),
	      .server_response_get(ctop$server_response_get),
	      .RDY_server_response_get(ctop$RDY_server_response_get),
	      .led(ctop$led),
	      .wci_m_0_MCmd(),
	      .wci_m_0_MAddrSpace(),
	      .wci_m_0_MByteEn(),
	      .wci_m_0_MAddr(),
	      .wci_m_0_MData(),
	      .wci_m_0_MFlag(),
	      .wci_m_1_MCmd(),
	      .wci_m_1_MAddrSpace(),
	      .wci_m_1_MByteEn(),
	      .wci_m_1_MAddr(),
	      .wci_m_1_MData(),
	      .wci_m_1_MFlag(),
	      .wci_m_2_MCmd(ctop$wci_m_2_MCmd),
	      .wci_m_2_MAddrSpace(ctop$wci_m_2_MAddrSpace),
	      .wci_m_2_MByteEn(ctop$wci_m_2_MByteEn),
	      .wci_m_2_MAddr(ctop$wci_m_2_MAddr),
	      .wci_m_2_MData(ctop$wci_m_2_MData),
	      .wci_m_2_MFlag(ctop$wci_m_2_MFlag),
	      .wci_m_3_MCmd(ctop$wci_m_3_MCmd),
	      .wci_m_3_MAddrSpace(ctop$wci_m_3_MAddrSpace),
	      .wci_m_3_MByteEn(ctop$wci_m_3_MByteEn),
	      .wci_m_3_MAddr(ctop$wci_m_3_MAddr),
	      .wci_m_3_MData(ctop$wci_m_3_MData),
	      .wci_m_3_MFlag(ctop$wci_m_3_MFlag),
	      .wci_m_4_MCmd(ctop$wci_m_4_MCmd),
	      .wci_m_4_MAddrSpace(ctop$wci_m_4_MAddrSpace),
	      .wci_m_4_MByteEn(ctop$wci_m_4_MByteEn),
	      .wci_m_4_MAddr(ctop$wci_m_4_MAddr),
	      .wci_m_4_MData(ctop$wci_m_4_MData),
	      .wci_m_4_MFlag(ctop$wci_m_4_MFlag),
	      .cpNow(ctop$cpNow),
	      .RDY_cpNow(),
	      .wsi_s_adc_SThreadBusy(ctop$wsi_s_adc_SThreadBusy),
	      .wsi_s_adc_SReset_n(ctop$wsi_s_adc_SReset_n),
	      .wsi_m_dac_MCmd(ctop$wsi_m_dac_MCmd),
	      .wsi_m_dac_MReqLast(ctop$wsi_m_dac_MReqLast),
	      .wsi_m_dac_MBurstPrecise(ctop$wsi_m_dac_MBurstPrecise),
	      .wsi_m_dac_MBurstLength(ctop$wsi_m_dac_MBurstLength),
	      .wsi_m_dac_MData(ctop$wsi_m_dac_MData),
	      .wsi_m_dac_MByteEn(ctop$wsi_m_dac_MByteEn),
	      .wsi_m_dac_MReqInfo(ctop$wsi_m_dac_MReqInfo),
	      .wsi_m_dac_MReset_n(ctop$wsi_m_dac_MReset_n),
	      .wmemiM_MCmd(ctop$wmemiM_MCmd),
	      .wmemiM_MReqLast(ctop$wmemiM_MReqLast),
	      .wmemiM_MAddr(ctop$wmemiM_MAddr),
	      .wmemiM_MBurstLength(ctop$wmemiM_MBurstLength),
	      .wmemiM_MDataValid(ctop$wmemiM_MDataValid),
	      .wmemiM_MDataLast(ctop$wmemiM_MDataLast),
	      .wmemiM_MData(ctop$wmemiM_MData),
	      .wmemiM_MDataByteEn(ctop$wmemiM_MDataByteEn),
	      .wmemiM_MReset_n(ctop$wmemiM_MReset_n),
	      .gps_ppsSyncOut(ctop$gps_ppsSyncOut),
	      .RST_N_wci_m_0_mReset_n(),
	      .RST_N_wci_m_1_mReset_n(),
	      .RST_N_wci_m_2_mReset_n(ctop$RST_N_wci_m_2_mReset_n),
	      .RST_N_wci_m_3_mReset_n(ctop$RST_N_wci_m_3_mReset_n),
	      .RST_N_wci_m_4_mReset_n(ctop$RST_N_wci_m_4_mReset_n));

  // submodule dacW11
  mkDACWorker dacW11(.CLK_dac_clk(dac_clk$O),
		     .RST_N_dac_rst(dac_rst$OUT_RST_N),
		     .CLK(pci0_pcie_ep$trn_clk),
		     .RST_N(ctop$RST_N_wci_m_3_mReset_n),
		     .wci_s_MFlag(dacW11$wci_s_MFlag),
		     .wci_s_req(dacW11$wci_s_req),
		     .wsiS1_MBurstLength(dacW11$wsiS1_MBurstLength),
		     .wsiS1_MByteEn(dacW11$wsiS1_MByteEn),
		     .wsiS1_MCmd(dacW11$wsiS1_MCmd),
		     .wsiS1_MData(dacW11$wsiS1_MData),
		     .wsiS1_MReqInfo(dacW11$wsiS1_MReqInfo),
		     .wti_s_req(dacW11$wti_s_req),
		     .wsiS1_MReqLast(dacW11$wsiS1_MReqLast),
		     .wsiS1_MBurstPrecise(dacW11$wsiS1_MBurstPrecise),
		     .wsiS1_MReset_n(dacW11$wsiS1_MReset_n),
		     .wci_s_resp(dacW11$wci_s_resp),
		     .wci_s_SThreadBusy(dacW11$wci_s_SThreadBusy),
		     .wci_s_SFlag(dacW11$wci_s_SFlag),
		     .wti_s_SThreadBusy(dacW11$wti_s_SThreadBusy),
		     .wsiS1_SThreadBusy(dacW11$wsiS1_SThreadBusy),
		     .wsiS1_SReset_n(dacW11$wsiS1_SReset_n),
		     .dac0_dap(dacW11$dac0_dap),
		     .dac0_dan(dacW11$dac0_dan),
		     .dac0_dbp(dacW11$dac0_dbp),
		     .dac0_dbn(dacW11$dac0_dbn),
		     .dac0_dcp(dacW11$dac0_dcp),
		     .dac0_dcn(dacW11$dac0_dcn),
		     .dac0_ddp(dacW11$dac0_ddp),
		     .dac0_ddn(dacW11$dac0_ddn),
		     .dac0_dacClkDiv(dacW11$dac0_dacClkDiv),
		     .dac0_dacDelay(dacW11$dac0_dacDelay),
		     .dac0_dacRf(dacW11$dac0_dacRf),
		     .dac0_dacRz(dacW11$dac0_dacRz),
		     .dac0_dacCal(dacW11$dac0_dacCal),
		     .dac0_syncOutp(dacW11$dac0_syncOutp),
		     .dac0_syncOutn(dacW11$dac0_syncOutn),
		     .dac0_syncMutep(dacW11$dac0_syncMutep),
		     .dac0_syncMuten(dacW11$dac0_syncMuten),
		     .CLK_dac0_dacSdrClk(dacW11$CLK_dac0_dacSdrClk),
		     .CLK_GATE_dac0_dacSdrClk(),
		     .RST_N_dac0_dacSdrRst(dacW11$RST_N_dac0_dacSdrRst));

  // submodule dac_clk
  IBUFDS dac_clk(.I(dac_clkp), .IB(dac_clkn), .O(dac_clk$O));

  // submodule dac_rst
  SyncResetA #(.RSTDELAY(32'd0)) dac_rst(.CLK(dac_clk$O),
					 .IN_RST_N(pciLinkUpResetGen$OUT_RST_N),
					 .OUT_RST_N(dac_rst$OUT_RST_N));

  // submodule dram0
  mkDramServerV5 dram0(.CLK_sys0_clk(sys0_clk$O),
		       .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		       .CLK_sys1_clk(sys1_clk$O),
		       .RST_N_sys1_rst(sys1_rst$OUT_RST_N),
		       .CLK(pci0_pcie_ep$trn_clk),
		       .RST_N(ctop$RST_N_wci_m_4_mReset_n),
		       .wci_s_MFlag(dram0$wci_s_MFlag),
		       .wci_s_req(dram0$wci_s_req),
		       .wmemiS_MAddr(dram0$wmemiS_MAddr),
		       .wmemiS_MBurstLength(dram0$wmemiS_MBurstLength),
		       .wmemiS_MCmd(dram0$wmemiS_MCmd),
		       .wmemiS_MData(dram0$wmemiS_MData),
		       .wmemiS_MDataByteEn(dram0$wmemiS_MDataByteEn),
		       .wmemiS_MReqLast(dram0$wmemiS_MReqLast),
		       .wmemiS_MDataValid(dram0$wmemiS_MDataValid),
		       .wmemiS_MDataLast(dram0$wmemiS_MDataLast),
		       .wmemiS_MReset_n(dram0$wmemiS_MReset_n),
		       .wci_s_resp(dram0$wci_s_resp),
		       .wci_s_SThreadBusy(dram0$wci_s_SThreadBusy),
		       .wci_s_SFlag(dram0$wci_s_SFlag),
		       .dram_addr(dram0$dram_addr),
		       .dram_ba(dram0$dram_ba),
		       .dram_ras_n(dram0$dram_ras_n),
		       .dram_cas_n(dram0$dram_cas_n),
		       .dram_we_n(dram0$dram_we_n),
		       .dram_cs_n(dram0$dram_cs_n),
		       .dram_odt(dram0$dram_odt),
		       .dram_cke(dram0$dram_cke),
		       .dram_dm(dram0$dram_dm),
		       .dram_ck_p(dram0$dram_ck_p),
		       .dram_ck_n(dram0$dram_ck_n),
		       .wmemiS_SResp(dram0$wmemiS_SResp),
		       .wmemiS_SRespLast(dram0$wmemiS_SRespLast),
		       .wmemiS_SData(dram0$wmemiS_SData),
		       .wmemiS_SCmdAccept(dram0$wmemiS_SCmdAccept),
		       .wmemiS_SDataAccept(dram0$wmemiS_SDataAccept),
		       .dram_io_dq(dram0$dram_io_dq),
		       .dram_io_dqs_p(dram0$dram_io_dqs_p),
		       .dram_io_dqs_n(dram0$dram_io_dqs_n));

  // submodule fI2P
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fI2P(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fI2P$D_IN),
				    .ENQ(fI2P$ENQ),
				    .DEQ(fI2P$DEQ),
				    .CLR(fI2P$CLR),
				    .D_OUT(fI2P$D_OUT),
				    .FULL_N(fI2P$FULL_N),
				    .EMPTY_N(fI2P$EMPTY_N));

  // submodule fP2I
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fP2I(.RST_N(trn_rst$OUT_RST_N),
				    .CLK(pci0_pcie_ep$trn_clk),
				    .D_IN(fP2I$D_IN),
				    .ENQ(fP2I$ENQ),
				    .DEQ(fP2I$DEQ),
				    .CLR(fP2I$CLR),
				    .D_OUT(fP2I$D_OUT),
				    .FULL_N(fP2I$FULL_N),
				    .EMPTY_N(fP2I$EMPTY_N));

  // submodule infLed
  BypassWire #(.width(32'd2)) infLed(.WVAL(infLed$WVAL), .WGET(infLed$WGET));

  // submodule pci0_clk
  IBUFDS pci0_clk(.I(pci0_clkp), .IB(pci0_clkn), .O(pci0_clk$O));

  // submodule pci0_pcie_ep
  xilinx_v5_pcie_wrapper pci0_pcie_ep(.sys_clk(pci0_clk$O),
				      .sys_reset_n(pci0_rst$O),
				      .fast_train_simulation_only(1'h0),
				      .cfg_byte_en_n(pci0_pcie_ep$cfg_byte_en_n),
				      .cfg_di(pci0_pcie_ep$cfg_di),
				      .cfg_dsn(pci0_pcie_ep$cfg_dsn),
				      .cfg_dwaddr(pci0_pcie_ep$cfg_dwaddr),
				      .cfg_err_cor_n(pci0_pcie_ep$cfg_err_cor_n),
				      .cfg_err_cpl_abort_n(pci0_pcie_ep$cfg_err_cpl_abort_n),
				      .cfg_err_cpl_timeout_n(pci0_pcie_ep$cfg_err_cpl_timeout_n),
				      .cfg_err_cpl_unexpect_n(pci0_pcie_ep$cfg_err_cpl_unexpect_n),
				      .cfg_err_ecrc_n(pci0_pcie_ep$cfg_err_ecrc_n),
				      .cfg_err_locked_n(pci0_pcie_ep$cfg_err_locked_n),
				      .cfg_err_posted_n(pci0_pcie_ep$cfg_err_posted_n),
				      .cfg_err_tlp_cpl_header(pci0_pcie_ep$cfg_err_tlp_cpl_header),
				      .cfg_err_ur_n(pci0_pcie_ep$cfg_err_ur_n),
				      .cfg_interrupt_assert_n(pci0_pcie_ep$cfg_interrupt_assert_n),
				      .cfg_interrupt_di(pci0_pcie_ep$cfg_interrupt_di),
				      .cfg_interrupt_n(pci0_pcie_ep$cfg_interrupt_n),
				      .cfg_pm_wake_n(pci0_pcie_ep$cfg_pm_wake_n),
				      .cfg_rd_en_n(pci0_pcie_ep$cfg_rd_en_n),
				      .cfg_trn_pending_n(pci0_pcie_ep$cfg_trn_pending_n),
				      .cfg_wr_en_n(pci0_pcie_ep$cfg_wr_en_n),
				      .pci_exp_rxn(pci0_pcie_ep$pci_exp_rxn),
				      .pci_exp_rxp(pci0_pcie_ep$pci_exp_rxp),
				      .trn_rcpl_streaming_n(pci0_pcie_ep$trn_rcpl_streaming_n),
				      .trn_rdst_rdy_n(pci0_pcie_ep$trn_rdst_rdy_n),
				      .trn_rnp_ok_n(pci0_pcie_ep$trn_rnp_ok_n),
				      .trn_td(pci0_pcie_ep$trn_td),
				      .trn_teof_n(pci0_pcie_ep$trn_teof_n),
				      .trn_terrfwd_n(pci0_pcie_ep$trn_terrfwd_n),
				      .trn_trem_n(pci0_pcie_ep$trn_trem_n),
				      .trn_tsof_n(pci0_pcie_ep$trn_tsof_n),
				      .trn_tsrc_dsc_n(pci0_pcie_ep$trn_tsrc_dsc_n),
				      .trn_tsrc_rdy_n(pci0_pcie_ep$trn_tsrc_rdy_n),
				      .pci_exp_txp(pci0_pcie_ep$pci_exp_txp),
				      .pci_exp_txn(pci0_pcie_ep$pci_exp_txn),
				      .trn_lnk_up_n(pci0_pcie_ep$trn_lnk_up_n),
				      .cfg_do(),
				      .cfg_rd_wr_done_n(),
				      .cfg_to_turnoff_n(),
				      .cfg_bus_number(pci0_pcie_ep$cfg_bus_number),
				      .cfg_device_number(pci0_pcie_ep$cfg_device_number),
				      .cfg_function_number(pci0_pcie_ep$cfg_function_number),
				      .cfg_status(),
				      .cfg_command(),
				      .cfg_dstatus(),
				      .cfg_dcommand(),
				      .cfg_lstatus(),
				      .cfg_lcommand(),
				      .cfg_pcie_link_state_n(),
				      .trn_rsof_n(pci0_pcie_ep$trn_rsof_n),
				      .trn_reof_n(pci0_pcie_ep$trn_reof_n),
				      .trn_rd(pci0_pcie_ep$trn_rd),
				      .trn_rrem_n(pci0_pcie_ep$trn_rrem_n),
				      .trn_rerrfwd_n(),
				      .trn_rsrc_rdy_n(pci0_pcie_ep$trn_rsrc_rdy_n),
				      .trn_rsrc_dsc_n(),
				      .trn_rbar_hit_n(pci0_pcie_ep$trn_rbar_hit_n),
				      .trn_rfc_ph_av(),
				      .trn_rfc_pd_av(),
				      .trn_rfc_nph_av(),
				      .trn_rfc_npd_av(),
				      .trn_tdst_rdy_n(pci0_pcie_ep$trn_tdst_rdy_n),
				      .trn_tdst_dsc_n(),
				      .trn_tbuf_av(),
				      .cfg_interrupt_rdy_n(pci0_pcie_ep$cfg_interrupt_rdy_n),
				      .cfg_interrupt_mmenable(pci0_pcie_ep$cfg_interrupt_mmenable),
				      .cfg_interrupt_msienable(pci0_pcie_ep$cfg_interrupt_msienable),
				      .cfg_interrupt_do(pci0_pcie_ep$cfg_interrupt_do),
				      .cfg_err_cpl_rdy_n(),
				      .trn_clk(pci0_pcie_ep$trn_clk),
				      .trn2_clk(),
				      .refclkout(),
				      .trn_reset_n(pci0_pcie_ep$trn_reset_n));

  // submodule pci0_rst
  IBUF pci0_rst(.I(pci0_reset_n), .O(pci0_rst$O));

  // submodule pciLinkUpResetGen
  MakeResetA #(.RSTDELAY(32'd1),
	       .init(32'd0)) pciLinkUpResetGen(.CLK(pci0_pcie_ep$trn_clk),
					       .RST_N(trn_rst$OUT_RST_N),
					       .DST_CLK(pci0_pcie_ep$trn_clk),
					       .ASSERT_IN(pciLinkUpResetGen$ASSERT_IN),
					       .ASSERT_OUT(),
					       .OUT_RST_N(pciLinkUpResetGen$OUT_RST_N));

  // submodule pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) pcie_irq_fifoAssert(.sCLK(pci0_pcie_ep$trn_clk),
						  .dCLK(pci0_pcie_ep$trn_clk),
						  .sRST_N(trn_rst$OUT_RST_N),
						  .sD_IN(pcie_irq_fifoAssert$sD_IN),
						  .sENQ(pcie_irq_fifoAssert$sENQ),
						  .dDEQ(pcie_irq_fifoAssert$dDEQ),
						  .dD_OUT(pcie_irq_fifoAssert$dD_OUT),
						  .sFULL_N(),
						  .dEMPTY_N(pcie_irq_fifoAssert$dEMPTY_N));

  // submodule pcie_irq_rMMEnabled_1
  BypassWire #(.width(32'd3)) pcie_irq_rMMEnabled_1(.WVAL(pcie_irq_rMMEnabled_1$WVAL),
						    .WGET());

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk$O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys0_rst(.CLK(sys0_clk$O),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(sys0_rst$OUT_RST_N));

  // submodule sys1_clk
  IBUFDS sys1_clk(.I(sys1_clkp), .IB(sys1_clkn), .O(sys1_clk$O));

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk$O),
					  .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					  .OUT_RST_N(sys1_rst$OUT_RST_N));

  // submodule tcW10_now
  SyncRegister #(.width(32'd64), .init(64'd0)) tcW10_now(.sCLK(sys0_clk$O),
							 .dCLK(adcW10$CLK_adcSdrClk),
							 .sRST_N(sys0_rst$OUT_RST_N),
							 .sD_IN(tcW10_now$sD_IN),
							 .sEN(tcW10_now$sEN),
							 .dD_OUT(tcW10_now$dD_OUT),
							 .sRDY(tcW10_now$sRDY));

  // submodule tcW11_now
  SyncRegister #(.width(32'd64), .init(64'd0)) tcW11_now(.sCLK(sys0_clk$O),
							 .dCLK(dac_clk$O),
							 .sRST_N(sys0_rst$OUT_RST_N),
							 .sD_IN(tcW11_now$sD_IN),
							 .sEN(tcW11_now$sEN),
							 .dD_OUT(tcW11_now$dD_OUT),
							 .sRDY(tcW11_now$sRDY));

  // submodule trn_rst
  SyncResetA #(.RSTDELAY(32'd0)) trn_rst(.CLK(pci0_pcie_ep$trn_clk),
					 .IN_RST_N(pci0_pcie_ep$trn_reset_n),
					 .OUT_RST_N(trn_rst$OUT_RST_N));

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = tcW10_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = tcW10_now$sRDY ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = tcW11_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = tcW11_now$sRDY ;

  // rule RL_sRstConnect_1
  assign CAN_FIRE_RL_sRstConnect_1 = dacW11$wsiS1_SReset_n ;
  assign WILL_FIRE_RL_sRstConnect_1 = dacW11$wsiS1_SReset_n ;

  // rule RL_mRstConnect_1
  assign CAN_FIRE_RL_mRstConnect_1 = ctop$wsi_m_dac_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect_1 = ctop$wsi_m_dac_MReset_n ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect_1 = 1'd1 ;

  // rule RL_mReqIConnect_1
  assign CAN_FIRE_RL_mReqIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect_1 = 1'd1 ;

  // rule RL_mDataIConnect_1
  assign CAN_FIRE_RL_mDataIConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect_1 = 1'd1 ;

  // rule RL_mByteEnConnect_1
  assign CAN_FIRE_RL_mByteEnConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect_1 = 1'd1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mBurstPConnect_1
  assign CAN_FIRE_RL_mBurstPConnect_1 = ctop$wsi_m_dac_MBurstPrecise ;
  assign WILL_FIRE_RL_mBurstPConnect_1 = ctop$wsi_m_dac_MBurstPrecise ;

  // rule RL_mBurstLConnect_1
  assign CAN_FIRE_RL_mBurstLConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_1 = 1'd1 ;

  // rule RL_mReqLConnect_1
  assign CAN_FIRE_RL_mReqLConnect_1 = ctop$wsi_m_dac_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect_1 = ctop$wsi_m_dac_MReqLast ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_sRstConnect
  assign CAN_FIRE_RL_sRstConnect = ctop$wsi_s_adc_SReset_n ;
  assign WILL_FIRE_RL_sRstConnect = ctop$wsi_s_adc_SReset_n ;

  // rule RL_mRstConnect
  assign CAN_FIRE_RL_mRstConnect = adcW10$wsiM1_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect = adcW10$wsiM1_MReset_n ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect = 1'd1 ;
  assign WILL_FIRE_RL_stbConnect = 1'd1 ;

  // rule RL_mDataIConnect
  assign CAN_FIRE_RL_mDataIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataIConnect = 1'd1 ;

  // rule RL_mByteEnConnect
  assign CAN_FIRE_RL_mByteEnConnect = 1'd1 ;
  assign WILL_FIRE_RL_mByteEnConnect = 1'd1 ;

  // rule RL_mReqIConnect
  assign CAN_FIRE_RL_mReqIConnect = 1'd1 ;
  assign WILL_FIRE_RL_mReqIConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mBurstLConnect
  assign CAN_FIRE_RL_mBurstLConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect = 1'd1 ;

  // rule RL_mBurstPConnect
  assign CAN_FIRE_RL_mBurstPConnect = adcW10$wsiM1_MBurstPrecise ;
  assign WILL_FIRE_RL_mBurstPConnect = adcW10$wsiM1_MBurstPrecise ;

  // rule RL_mReqLConnect
  assign CAN_FIRE_RL_mReqLConnect = adcW10$wsiM1_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect = adcW10$wsiM1_MReqLast ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 = dacW11$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_3 = dacW11$wci_s_SThreadBusy ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 = adcW10$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_2 = adcW10$wci_s_SThreadBusy ;

  // rule RL_sDataConnect_1
  assign CAN_FIRE_RL_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_1 = 1'd1 ;

  // rule RL_sFlagConnect_1
  assign CAN_FIRE_RL_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_1
  assign CAN_FIRE_RL_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_1 = 1'd1 ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_stbConnect_8
  assign CAN_FIRE_RL_stbConnect_8 = dacW11$wsiS1_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_8 = dacW11$wsiS1_SThreadBusy ;

  // rule RL_mDataBEConnect
  assign CAN_FIRE_RL_mDataBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataBEConnect = 1'd1 ;

  // rule RL_mDataVConnect
  assign CAN_FIRE_RL_mDataVConnect = ctop$wmemiM_MDataValid ;
  assign WILL_FIRE_RL_mDataVConnect = ctop$wmemiM_MDataValid ;

  // rule RL_mDataLConnect
  assign CAN_FIRE_RL_mDataLConnect = ctop$wmemiM_MDataLast ;
  assign WILL_FIRE_RL_mDataLConnect = ctop$wmemiM_MDataLast ;

  // rule RL_stbConnect_7
  assign CAN_FIRE_RL_stbConnect_7 = ctop$wsi_s_adc_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_7 = ctop$wsi_s_adc_SThreadBusy ;

  // rule RL_stbConnect_6
  assign CAN_FIRE_RL_stbConnect_6 = dacW11$wti_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_6 = dacW11$wti_s_SThreadBusy ;

  // rule RL_stbConnect_5
  assign CAN_FIRE_RL_stbConnect_5 = adcW10$wti_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_5 = adcW10$wti_s_SThreadBusy ;

  // rule RL_sRespConnect_5
  assign CAN_FIRE_RL_sRespConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_5 = 1'd1 ;

  // rule RL_sDataConnect_5
  assign CAN_FIRE_RL_sDataConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_5 = 1'd1 ;

  // rule RL_mFlagConnect_4
  assign CAN_FIRE_RL_mFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_4 = 1'd1 ;

  // rule RL_sFlagConnect_4
  assign CAN_FIRE_RL_sFlagConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_4 = 1'd1 ;

  // rule RL_sDataConnect_4
  assign CAN_FIRE_RL_sDataConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_4 = 1'd1 ;

  // rule RL_stbConnect_4
  assign CAN_FIRE_RL_stbConnect_4 = dram0$wci_s_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect_4 = dram0$wci_s_SThreadBusy ;

  // rule RL_sRespConnect_4
  assign CAN_FIRE_RL_sRespConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_4 = 1'd1 ;

  // rule RL_mFlagConnect_3
  assign CAN_FIRE_RL_mFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_3 = 1'd1 ;

  // rule RL_sFlagConnect_3
  assign CAN_FIRE_RL_sFlagConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_3 = 1'd1 ;

  // rule RL_sDataConnect_3
  assign CAN_FIRE_RL_sDataConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_3 = 1'd1 ;

  // rule RL_sRespConnect_3
  assign CAN_FIRE_RL_sRespConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_3 = 1'd1 ;

  // rule RL_mFlagConnect_2
  assign CAN_FIRE_RL_mFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect_2 = 1'd1 ;

  // rule RL_sFlagConnect_2
  assign CAN_FIRE_RL_sFlagConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_2 = 1'd1 ;

  // rule RL_sRespConnect_2
  assign CAN_FIRE_RL_sRespConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_2 = 1'd1 ;

  // rule RL_sDataConnect_2
  assign CAN_FIRE_RL_sDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_2 = 1'd1 ;

  // rule RL_mDataConnect_2
  assign CAN_FIRE_RL_mDataConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_2 = 1'd1 ;

  // rule RL_mCmdConnect_2
  assign CAN_FIRE_RL_mCmdConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_2 = 1'd1 ;

  // rule RL_sdaConnect
  assign CAN_FIRE_RL_sdaConnect = dram0$wmemiS_SDataAccept ;
  assign WILL_FIRE_RL_sdaConnect = dram0$wmemiS_SDataAccept ;

  // rule RL_mRstConnect_2
  assign CAN_FIRE_RL_mRstConnect_2 = ctop$wmemiM_MReset_n ;
  assign WILL_FIRE_RL_mRstConnect_2 = ctop$wmemiM_MReset_n ;

  // rule RL_scaConnect
  assign CAN_FIRE_RL_scaConnect = dram0$wmemiS_SCmdAccept ;
  assign WILL_FIRE_RL_scaConnect = dram0$wmemiS_SCmdAccept ;

  // rule RL_sRespLConnect
  assign CAN_FIRE_RL_sRespLConnect = dram0$wmemiS_SRespLast ;
  assign WILL_FIRE_RL_sRespLConnect = dram0$wmemiS_SRespLast ;

  // rule RL_mBurstLConnect_2
  assign CAN_FIRE_RL_mBurstLConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_mBurstLConnect_2 = 1'd1 ;

  // rule RL_reqConnect_6
  assign CAN_FIRE_RL_reqConnect_6 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_6 = 1'd1 ;

  // rule RL_mReqLConnect_2
  assign CAN_FIRE_RL_mReqLConnect_2 = ctop$wmemiM_MReqLast ;
  assign WILL_FIRE_RL_mReqLConnect_2 = ctop$wmemiM_MReqLast ;

  // rule RL_reqConnect_5
  assign CAN_FIRE_RL_reqConnect_5 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_5 = 1'd1 ;

  // rule RL_tcW11_send_time
  assign CAN_FIRE_RL_tcW11_send_time = 1'd1 ;
  assign WILL_FIRE_RL_tcW11_send_time = 1'd1 ;

  // rule RL_tcW11_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_tcW11_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_tcW11_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_tcW10_send_time
  assign CAN_FIRE_RL_tcW10_send_time = 1'd1 ;
  assign WILL_FIRE_RL_tcW10_send_time = 1'd1 ;

  // rule RL_tcW10_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_tcW10_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_tcW10_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_reqConnect_4
  assign CAN_FIRE_RL_reqConnect_4 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_4 = 1'd1 ;

  // rule RL_reqConnect_3
  assign CAN_FIRE_RL_reqConnect_3 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_3 = 1'd1 ;

  // rule RL_reqConnect_2
  assign CAN_FIRE_RL_reqConnect_2 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_2 = 1'd1 ;

  // rule RL_tie_off_inputs_1
  assign CAN_FIRE_RL_tie_off_inputs_1 = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs_1 = 1'd1 ;

  // rule RL_infLed_clock_domain_crossing
  assign CAN_FIRE_RL_infLed_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_infLed_clock_domain_crossing = 1'd1 ;

  // rule RL_tie_off_inputs
  assign CAN_FIRE_RL_tie_off_inputs = 1'd1 ;
  assign WILL_FIRE_RL_tie_off_inputs = 1'd1 ;

  // rule RL_connect_interrupt_do
  assign CAN_FIRE_RL_connect_interrupt_do = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_do = 1'd1 ;

  // rule RL_connect_interrupt_rdy_n
  assign CAN_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_rdy_n = 1'd1 ;

  // rule RL_connect_interrupt_1
  assign CAN_FIRE_RL_connect_interrupt_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_1 = 1'd1 ;

  // rule RL_Prelude_inst_changeSpecialWires_1_downconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect2 =
	     fI2P$FULL_N && Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect2 ;

  // rule RL_Prelude_inst_changeSpecialWires_upconv_connect2
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2 =
	     ctop$RDY_server_request_put && fP2I$EMPTY_N &&
	     Prelude_inst_changeSpecialWires_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2 ;

  // rule RL_Prelude_inst_changeSpecialWires_1_downconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 =
	     ctop$RDY_server_response_get && fI2P$FULL_N &&
	     !Prelude_inst_changeSpecialWires_1_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 ;

  // rule RL_Prelude_inst_changeSpecialWires_upconv_connect1
  assign CAN_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 =
	     fP2I$EMPTY_N &&
	     (!fP2I$D_OUT[79] || ctop$RDY_server_request_put) &&
	     !Prelude_inst_changeSpecialWires_rg[81] ;
  assign WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 ;

  // rule RL_connect_1
  assign CAN_FIRE_RL_connect_1 =
	     !pci0_pcie_ep$trn_tdst_rdy_n && fI2P$EMPTY_N ;
  assign WILL_FIRE_RL_connect_1 = CAN_FIRE_RL_connect_1 ;

  // rule RL_connect
  assign CAN_FIRE_RL_connect = !pci0_pcie_ep$trn_rsrc_rdy_n && fP2I$FULL_N ;
  assign WILL_FIRE_RL_connect = CAN_FIRE_RL_connect ;

  // rule RL_every
  assign CAN_FIRE_RL_every = 1'd1 ;
  assign WILL_FIRE_RL_every = 1'd1 ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     pcie_irq_fifoAssert$dEMPTY_N && pcie_irq_rMSIEnabled &&
	     !pcie_irq_rInterrupting &&
	     pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // rule RL_pcie_irq_msi_enabled_assert_interrupt_done
  assign CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     pcie_irq_rMSIEnabled && pcie_irq_rInterrupting &&
	     !pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // rule RL_connect_interrupt_msienable
  assign CAN_FIRE_RL_connect_interrupt_msienable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_msienable = 1'd1 ;

  // rule RL_pcie_irq_rMMEnabled_clock_domain_crossing
  assign CAN_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_pcie_irq_rMMEnabled_clock_domain_crossing = 1'd1 ;

  // rule RL_connect_interrupt_mmenable
  assign CAN_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;
  assign WILL_FIRE_RL_connect_interrupt_mmenable = 1'd1 ;

  // rule RL_plr
  assign CAN_FIRE_RL_plr = pci0_pcie_ep$trn_lnk_up_n ;
  assign WILL_FIRE_RL_plr = pci0_pcie_ep$trn_lnk_up_n ;

  // rule RL_pci0_connect_trn_rx
  assign CAN_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_rx = 1'd1 ;

  // rule RL_pci0_connect_trn_tx
  assign CAN_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;
  assign WILL_FIRE_RL_pci0_connect_trn_tx = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 &&
	     ctop$server_response_get[135:128] != 8'd0 ;
  assign MUX_Prelude_inst_changeSpecialWires_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 &&
	     !fP2I$D_OUT[79] ;
  assign MUX_ctop$server_request_put_1__SEL_1 =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 &&
	     fP2I$D_OUT[79] ;
  assign MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 =
	     { 2'd2,
	       ctop$server_response_get[151:144],
	       ctop$server_response_get[135:128],
	       ctop$server_response_get[63:0] } ;
  assign MUX_Prelude_inst_changeSpecialWires_rg$write_1__VAL_1 =
	     { 1'd1, fP2I$D_OUT } ;
  assign MUX_ctop$server_request_put_1__VAL_1 =
	     { fP2I$D_OUT[80:72], put_be__h4410, put_data__h4411 } ;
  assign MUX_ctop$server_request_put_1__VAL_2 =
	     { Prelude_inst_changeSpecialWires_rg[80],
	       fP2I$D_OUT[79],
	       Prelude_inst_changeSpecialWires_rg[78:72],
	       wOut_be__h4239,
	       wOut_data__h4240 } ;
  assign MUX_fI2P$enq_1__VAL_1 =
	     (ctop$server_response_get[135:128] == 8'd0) ?
	       { ctop$server_response_get[152:136],
		 ctop$server_response_get[127:64] } :
	       { ctop$server_response_get[152],
		 1'd0,
		 ctop$server_response_get[150:136],
		 ctop$server_response_get[127:64] } ;

  // inlined wires
  assign pci0_pwTrnTx$whas = CAN_FIRE_RL_connect_1 ;
  assign pci0_wTrnTxSof$whas = CAN_FIRE_RL_connect_1 ;
  assign pci0_wTrnTxSof$wget = !fI2P$D_OUT[80] ;
  assign pci0_wTrnTxEof$wget = !fI2P$D_OUT[79] ;
  assign pci0_wTrnTxEof$whas = CAN_FIRE_RL_connect_1 ;
  assign pci0_wTrnTxDsc$wget = 1'd1 ;
  assign pci0_wTrnTxDsc$whas = CAN_FIRE_RL_connect_1 ;
  assign pci0_wTrnTxRem$wget = fI2P$D_OUT[71:64] ;
  assign pci0_wTrnTxRem$whas = CAN_FIRE_RL_connect_1 ;
  assign pci0_wTrnTxDat$wget = fI2P$D_OUT[63:0] ;
  assign pci0_pwTrnRx$whas = CAN_FIRE_RL_connect ;
  assign pci0_wTrnTxDat$whas = CAN_FIRE_RL_connect_1 ;
  assign pci0_wTrnRxNpOk$wget = 1'd0 ;
  assign pci0_wTrnRxNpOk$whas = 1'd1 ;
  assign pci0_wTrnRxCplS$wget = 1'b0 ;
  assign pci0_wTrnRxCplS$whas = 1'b0 ;
  assign pcie_irq_wInterruptRdyN$wget = pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pcie_irq_wInterruptDo$wget = pci0_pcie_ep$cfg_interrupt_do ;
  assign tcW10_wti_sThreadBusy_pw$whas = adcW10$wti_s_SThreadBusy ;
  assign pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign tcW11_wti_sThreadBusy_pw$whas = dacW11$wti_s_SThreadBusy ;

  // register Prelude_inst_changeSpecialWires_1_rg
  assign Prelude_inst_changeSpecialWires_1_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_1_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 &&
	     ctop$server_response_get[135:128] != 8'd0 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect2 ;

  // register Prelude_inst_changeSpecialWires_rg
  assign Prelude_inst_changeSpecialWires_rg$D_IN =
	     MUX_Prelude_inst_changeSpecialWires_rg$write_1__SEL_1 ?
	       MUX_Prelude_inst_changeSpecialWires_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign Prelude_inst_changeSpecialWires_rg$EN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 &&
	     !fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2 ;

  // register pcie_irq_rInterruptDi
  assign pcie_irq_rInterruptDi$D_IN = pcie_irq_fifoAssert$dD_OUT ;
  assign pcie_irq_rInterruptDi$EN =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rInterruptN
  assign pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;
  assign pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pcie_irq_rInterrupting
  assign pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;

  // register pcie_irq_rMMEnabled
  assign pcie_irq_rMMEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pcie_irq_rMSIEnabled
  assign pcie_irq_rMSIEnabled$D_IN = pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // register tcW10_wti_nowReq
  assign tcW10_wti_nowReq$D_IN = { 3'd1, tcW10_now$dD_OUT } ;
  assign tcW10_wti_nowReq$EN = 1'd1 ;

  // register tcW10_wti_sThreadBusy_d
  assign tcW10_wti_sThreadBusy_d$D_IN = adcW10$wti_s_SThreadBusy ;
  assign tcW10_wti_sThreadBusy_d$EN = 1'd1 ;

  // register tcW11_wti_nowReq
  assign tcW11_wti_nowReq$D_IN = { 3'd1, tcW11_now$dD_OUT } ;
  assign tcW11_wti_nowReq$EN = 1'd1 ;

  // register tcW11_wti_sThreadBusy_d
  assign tcW11_wti_sThreadBusy_d$D_IN = dacW11$wti_s_SThreadBusy ;
  assign tcW11_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule adcW10
  assign adcW10$adc0_ddn_arg = adc0_ddn_arg ;
  assign adcW10$adc0_ddp_arg = adc0_ddp_arg ;
  assign adcW10$adc0_sdout_arg = adc0_sdout_arg ;
  assign adcW10$adc1_ddn_arg = adc1_ddn_arg ;
  assign adcW10$adc1_ddp_arg = adc1_ddp_arg ;
  assign adcW10$adc1_sdout_arg = adc1_sdout_arg ;
  assign adcW10$adx_sdi_arg = adx_sdi_arg ;
  assign adcW10$adx_status_arg = adx_status_arg ;
  assign adcW10$wci_s_MFlag = ctop$wci_m_2_MFlag ;
  assign adcW10$wci_s_req =
	     { ctop$wci_m_2_MCmd,
	       ctop$wci_m_2_MAddrSpace,
	       ctop$wci_m_2_MByteEn,
	       ctop$wci_m_2_MAddr,
	       ctop$wci_m_2_MData } ;
  assign adcW10$wti_s_req =
	     tcW10_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       tcW10_wti_nowReq ;
  assign adcW10$wsiM1_SReset_n = ctop$wsi_s_adc_SReset_n ;
  assign adcW10$wsiM1_SThreadBusy = ctop$wsi_s_adc_SThreadBusy ;

  // submodule ctop
  assign ctop$EN_server_request_put =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 &&
	     fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2 ;
  assign ctop$EN_server_response_get =
	     CAN_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 ;
  assign ctop$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign ctop$server_request_put =
	     MUX_ctop$server_request_put_1__SEL_1 ?
	       MUX_ctop$server_request_put_1__VAL_1 :
	       MUX_ctop$server_request_put_1__VAL_2 ;
  assign ctop$wci_m_0_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop$wci_m_0_SFlag = 2'b0 ;
  assign ctop$wci_m_0_SResp = 2'd0 ;
  assign ctop$wci_m_1_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop$wci_m_1_SFlag = 2'b0 ;
  assign ctop$wci_m_1_SResp = 2'd0 ;
  assign ctop$wci_m_2_SData = adcW10$wci_s_resp[31:0] ;
  assign ctop$wci_m_2_SFlag = adcW10$wci_s_SFlag ;
  assign ctop$wci_m_2_SResp = adcW10$wci_s_resp[33:32] ;
  assign ctop$wci_m_3_SData = dacW11$wci_s_resp[31:0] ;
  assign ctop$wci_m_3_SFlag = dacW11$wci_s_SFlag ;
  assign ctop$wci_m_3_SResp = dacW11$wci_s_resp[33:32] ;
  assign ctop$wci_m_4_SData = dram0$wci_s_resp[31:0] ;
  assign ctop$wci_m_4_SFlag = dram0$wci_s_SFlag ;
  assign ctop$wci_m_4_SResp = dram0$wci_s_resp[33:32] ;
  assign ctop$wmemiM_SData = dram0$wmemiS_SData ;
  assign ctop$wmemiM_SResp = dram0$wmemiS_SResp ;
  assign ctop$wsi_s_adc_MByteEn = adcW10$wsiM1_MByteEn ;
  assign ctop$wsi_s_adc_MBurstLength = adcW10$wsiM1_MBurstLength ;
  assign ctop$wsi_s_adc_MCmd = adcW10$wsiM1_MCmd ;
  assign ctop$wsi_s_adc_MData = adcW10$wsiM1_MData ;
  assign ctop$wsi_s_adc_MReqInfo = adcW10$wsiM1_MReqInfo ;
  assign ctop$wci_m_0_SThreadBusy = 1'd1 ;
  assign ctop$wci_m_1_SThreadBusy = 1'd1 ;
  assign ctop$wci_m_2_SThreadBusy = adcW10$wci_s_SThreadBusy ;
  assign ctop$wci_m_3_SThreadBusy = dacW11$wci_s_SThreadBusy ;
  assign ctop$wci_m_4_SThreadBusy = dram0$wci_s_SThreadBusy ;
  assign ctop$wmemiM_SCmdAccept = dram0$wmemiS_SCmdAccept ;
  assign ctop$wmemiM_SDataAccept = dram0$wmemiS_SDataAccept ;
  assign ctop$wmemiM_SRespLast = dram0$wmemiS_SRespLast ;
  assign ctop$wsi_m_dac_SReset_n = dacW11$wsiS1_SReset_n ;
  assign ctop$wsi_m_dac_SThreadBusy = dacW11$wsiS1_SThreadBusy ;
  assign ctop$wsi_s_adc_MBurstPrecise = adcW10$wsiM1_MBurstPrecise ;
  assign ctop$wsi_s_adc_MReqLast = adcW10$wsiM1_MReqLast ;
  assign ctop$wsi_s_adc_MReset_n = adcW10$wsiM1_MReset_n ;
  assign ctop$switch_x = 3'h0 ;

  // submodule dacW11
  assign dacW11$wci_s_MFlag = ctop$wci_m_3_MFlag ;
  assign dacW11$wci_s_req =
	     { ctop$wci_m_3_MCmd,
	       ctop$wci_m_3_MAddrSpace,
	       ctop$wci_m_3_MByteEn,
	       ctop$wci_m_3_MAddr,
	       ctop$wci_m_3_MData } ;
  assign dacW11$wsiS1_MBurstLength = ctop$wsi_m_dac_MBurstLength ;
  assign dacW11$wsiS1_MByteEn = ctop$wsi_m_dac_MByteEn ;
  assign dacW11$wsiS1_MCmd = ctop$wsi_m_dac_MCmd ;
  assign dacW11$wsiS1_MData = ctop$wsi_m_dac_MData ;
  assign dacW11$wsiS1_MReqInfo = ctop$wsi_m_dac_MReqInfo ;
  assign dacW11$wti_s_req =
	     tcW11_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       tcW11_wti_nowReq ;
  assign dacW11$wsiS1_MBurstPrecise = ctop$wsi_m_dac_MBurstPrecise ;
  assign dacW11$wsiS1_MReqLast = ctop$wsi_m_dac_MReqLast ;
  assign dacW11$wsiS1_MReset_n = ctop$wsi_m_dac_MReset_n ;

  // submodule dram0
  assign dram0$wci_s_MFlag = ctop$wci_m_4_MFlag ;
  assign dram0$wci_s_req =
	     { ctop$wci_m_4_MCmd,
	       ctop$wci_m_4_MAddrSpace,
	       ctop$wci_m_4_MByteEn,
	       ctop$wci_m_4_MAddr,
	       ctop$wci_m_4_MData } ;
  assign dram0$wmemiS_MAddr = ctop$wmemiM_MAddr ;
  assign dram0$wmemiS_MBurstLength = ctop$wmemiM_MBurstLength ;
  assign dram0$wmemiS_MCmd = ctop$wmemiM_MCmd ;
  assign dram0$wmemiS_MData = ctop$wmemiM_MData ;
  assign dram0$wmemiS_MDataByteEn = ctop$wmemiM_MDataByteEn ;
  assign dram0$wmemiS_MDataLast = ctop$wmemiM_MDataLast ;
  assign dram0$wmemiS_MReqLast = ctop$wmemiM_MReqLast ;
  assign dram0$wmemiS_MDataValid = ctop$wmemiM_MDataValid ;
  assign dram0$wmemiS_MReset_n = ctop$wmemiM_MReset_n ;

  // submodule fI2P
  assign fI2P$D_IN =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 ?
	       MUX_fI2P$enq_1__VAL_1 :
	       Prelude_inst_changeSpecialWires_1_rg[80:0] ;
  assign fI2P$DEQ = CAN_FIRE_RL_connect_1 ;
  assign fI2P$ENQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect1 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_1_downconv_connect2 ;
  assign fI2P$CLR = 1'b0 ;

  // submodule fP2I
  assign fP2I$D_IN =
	     { !pci0_pcie_ep$trn_rsof_n,
	       !pci0_pcie_ep$trn_reof_n,
	       ~pci0_pcie_ep$trn_rbar_hit_n,
	       ~pci0_pcie_ep$trn_rrem_n,
	       pci0_pcie_ep$trn_rd } ;
  assign fP2I$DEQ =
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect1 ||
	     WILL_FIRE_RL_Prelude_inst_changeSpecialWires_upconv_connect2 ;
  assign fP2I$ENQ = CAN_FIRE_RL_connect ;
  assign fP2I$CLR = 1'b0 ;

  // submodule infLed
  assign infLed$WVAL = ctop$led ;

  // submodule pci0_pcie_ep
  assign pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_interrupt_di = pcie_irq_rInterruptDi ;
  assign pci0_pcie_ep$cfg_interrupt_n = pcie_irq_rInterruptN ;
  assign pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pci0_pcie_ep$trn_rcpl_streaming_n = 1'b1 ;
  assign pci0_pcie_ep$trn_rdst_rdy_n = !CAN_FIRE_RL_connect ;
  assign pci0_pcie_ep$trn_rnp_ok_n = 1'b0 ;
  assign pci0_pcie_ep$trn_td =
	     CAN_FIRE_RL_connect_1 ? fI2P$D_OUT[63:0] : 64'h0 ;
  assign pci0_pcie_ep$trn_teof_n = !CAN_FIRE_RL_connect_1 || !fI2P$D_OUT[79] ;
  assign pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pci0_pcie_ep$trn_trem_n =
	     CAN_FIRE_RL_connect_1 ? ~fI2P$D_OUT[71:64] : 8'd255 ;
  assign pci0_pcie_ep$trn_tsof_n = !CAN_FIRE_RL_connect_1 || !fI2P$D_OUT[80] ;
  assign pci0_pcie_ep$trn_tsrc_dsc_n = 1'b1 ;
  assign pci0_pcie_ep$trn_tsrc_rdy_n = !CAN_FIRE_RL_connect_1 ;

  // submodule pciLinkUpResetGen
  assign pciLinkUpResetGen$ASSERT_IN = pci0_pcie_ep$trn_lnk_up_n ;

  // submodule pcie_irq_fifoAssert
  assign pcie_irq_fifoAssert$dDEQ =
	     CAN_FIRE_RL_pcie_irq_msi_enabled_assert_interrupt ;
  assign pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pcie_irq_fifoAssert$sENQ = 1'b0 ;

  // submodule pcie_irq_rMMEnabled_1
  assign pcie_irq_rMMEnabled_1$WVAL = pcie_irq_rMMEnabled ;

  // submodule tcW10_now
  assign tcW10_now$sD_IN = ctop$cpNow ;
  assign tcW10_now$sEN = tcW10_now$sRDY ;

  // submodule tcW11_now
  assign tcW11_now$sD_IN = ctop$cpNow ;
  assign tcW11_now$sEN = tcW11_now$sRDY ;

  // remaining internal signals
  assign pci0_pcie_ep_cfg_bus_number__33_CONCAT_pci0_pc_ETC___d248 =
	     { pci0_pcie_ep$cfg_bus_number,
	       pci0_pcie_ep$cfg_device_number,
	       pci0_pcie_ep$cfg_function_number } ;
  assign put_be__h4410 = { fP2I$D_OUT[71:64], 8'd0 } ;
  assign put_data__h4411 = { fP2I$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign wOut_be__h4239 =
	     { Prelude_inst_changeSpecialWires_rg[71:64],
	       fP2I$D_OUT[71:64] } ;
  assign wOut_data__h4240 =
	     { Prelude_inst_changeSpecialWires_rg[63:0], fP2I$D_OUT[63:0] } ;

  // handling of inlined registers

  always@(posedge dac_clk$O)
  begin
    if (!dac_rst$OUT_RST_N)
      begin
        tcW11_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	tcW11_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (tcW11_wti_nowReq$EN)
	  tcW11_wti_nowReq <= `BSV_ASSIGNMENT_DELAY tcW11_wti_nowReq$D_IN;
	if (tcW11_wti_sThreadBusy_d$EN)
	  tcW11_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      tcW11_wti_sThreadBusy_d$D_IN;
      end
  end

  always@(posedge pci0_pcie_ep$trn_clk)
  begin
    if (!trn_rst$OUT_RST_N)
      begin
        Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	Prelude_inst_changeSpecialWires_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (Prelude_inst_changeSpecialWires_1_rg$EN)
	  Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_1_rg$D_IN;
	if (Prelude_inst_changeSpecialWires_rg$EN)
	  Prelude_inst_changeSpecialWires_rg <= `BSV_ASSIGNMENT_DELAY
	      Prelude_inst_changeSpecialWires_rg$D_IN;
	if (pcie_irq_rInterruptDi$EN)
	  pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptDi$D_IN;
	if (pcie_irq_rInterruptN$EN)
	  pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterruptN$D_IN;
	if (pcie_irq_rInterrupting$EN)
	  pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pcie_irq_rInterrupting$D_IN;
      end
    if (pcie_irq_rMMEnabled$EN)
      pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMMEnabled$D_IN;
    if (pcie_irq_rMSIEnabled$EN)
      pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY pcie_irq_rMSIEnabled$D_IN;
  end

  always@(posedge adcW10$CLK_adcSdrClk)
  begin
    if (!adcW10$RST_N_adcSdrRst)
      begin
        tcW10_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	tcW10_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (tcW10_wti_nowReq$EN)
	  tcW10_wti_nowReq <= `BSV_ASSIGNMENT_DELAY tcW10_wti_nowReq$D_IN;
	if (tcW10_wti_sThreadBusy_d$EN)
	  tcW10_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      tcW10_wti_sThreadBusy_d$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    Prelude_inst_changeSpecialWires_1_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    Prelude_inst_changeSpecialWires_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pcie_irq_rInterruptDi = 8'hAA;
    pcie_irq_rInterruptN = 1'h0;
    pcie_irq_rInterrupting = 1'h0;
    pcie_irq_rMMEnabled = 3'h2;
    pcie_irq_rMSIEnabled = 1'h0;
    tcW10_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    tcW10_wti_sThreadBusy_d = 1'h0;
    tcW11_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    tcW11_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop

