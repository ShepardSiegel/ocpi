//
// Generated by Bluespec Compiler, version 2010.10.beta1 (build 22431, 2010-10-28)
//
// On Tue Jan 11 12:30:43 EST 2011
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     8
// pcie_txn                       O     8
// led                            O     3
// dac0_dap                       O    12
// dac0_dan                       O    12
// dac0_dbp                       O    12
// dac0_dbn                       O    12
// dac0_dcp                       O    12
// dac0_dcn                       O    12
// dac0_ddp                       O    12
// dac0_ddn                       O    12
// dac0_dacClkDiv                 O     1
// dac0_dacDelay                  O     1
// dac0_dacRf                     O     1
// dac0_dacRz                     O     1
// dac0_dacCal                    O     1 reg
// dac0_syncOutp                  O     1
// dac0_syncOutn                  O     1
// dac0_syncMutep                 O     1
// dac0_syncMuten                 O     1
// adx_csb                        O     1 reg
// adx_sdo                        O     1 reg
// adx_funct                      O     1 const
// adc0_oe                        O     1 const
// adc0_resetp                    O     1 reg
// adc0_sen                       O     1 reg
// adc0_sdata                     O     1 reg
// adc1_oe                        O     1 const
// adc1_resetp                    O     1 reg
// adc1_sen                       O     1 reg
// adc1_sdata                     O     1 reg
// gps_ppsSyncOut                 O     1
// dram_addr                      O    13
// dram_ba                        O     2
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_cs_n                      O     2
// dram_odt                       O     2
// dram_cke                       O     2
// dram_dm                        O     4
// dram_ck_p                      O     2
// dram_ck_n                      O     2
// dac0_dacSdrClk                 O     1 clock
// CLK_GATE_dac0_dacSdrClk        O     1 const
// adx_sclk                       O     1 clock
// CLK_GATE_adx_sclk              O     1 const
// adx_sclkn                      O     1 clock
// CLK_GATE_adx_sclkn             O     1 const
// adc0_sclk                      O     1 clock
// CLK_GATE_adc0_sclk             O     1 const
// adc0_sclkn                     O     1 clock
// CLK_GATE_adc0_sclkn            O     1 const
// adc1_sclk                      O     1 clock
// CLK_GATE_adc1_sclk             O     1 const
// adc1_sclkn                     O     1 clock
// CLK_GATE_adc1_sclkn            O     1 const
// trnClk                         O     1 clock
// CLK_GATE_trnClk                O     1 const
// dac0_dacSdrRst                 O     1 reset
// adx_srst                       O     1 reset
// adc0_rst                       O     1 reset
// adc1_rst                       O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// pci0_rstn                      I     1 reset
// dac_clkp                       I     1 clock
// dac_clkn                       I     1 clock
// adc_clkp                       I     1 clock
// adc_clkn                       I     1 clock
// adc0_clkp                      I     1 clock
// adc0_clkn                      I     1 clock
// adc1_clkp                      I     1 clock
// adc1_clkn                      I     1 clock
// pcie_rxp_i                     I     8
// pcie_rxn_i                     I     8
// adx_sdi_arg                    I     1 reg
// adx_status_arg                 I     1 unused
// adc0_ddp_arg                   I     7
// adc0_ddn_arg                   I     7
// adc0_sdout_arg                 I     1 reg
// adc1_ddp_arg                   I     7
// adc1_ddn_arg                   I     7
// adc1_sdout_arg                 I     1 reg
// gps_ppsSyncIn_x                I     1 reg
// dram_io_dq                    IO    32 inout
// dram_io_dqs_p                 IO     4 inout
// dram_io_dqs_n                 IO     4 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop(sys0_clkp,
	      sys0_clkn,
	      sys1_clkp,
	      sys1_clkn,
	      pci0_clkp,
	      pci0_clkn,
	      pci0_rstn,
	      dac_clkp,
	      dac_clkn,
	      adc_clkp,
	      adc_clkn,
	      adc0_clkp,
	      adc0_clkn,
	      adc1_clkp,
	      adc1_clkn,

	      dram_io_dq,
	      dram_io_dqs_p,
	      dram_io_dqs_n,

	      pcie_rxp_i,

	      pcie_rxn_i,

	      pcie_txp,

	      pcie_txn,

	      led,

	      dac0_dap,

	      dac0_dan,

	      dac0_dbp,

	      dac0_dbn,

	      dac0_dcp,

	      dac0_dcn,

	      dac0_ddp,

	      dac0_ddn,

	      dac0_dacClkDiv,

	      dac0_dacDelay,

	      dac0_dacRf,

	      dac0_dacRz,

	      dac0_dacCal,

	      dac0_syncOutp,

	      dac0_syncOutn,

	      dac0_syncMutep,

	      dac0_syncMuten,

	      adx_csb,

	      adx_sdo,

	      adx_sdi_arg,

	      adx_funct,

	      adx_status_arg,

	      adc0_oe,

	      adc0_ddp_arg,

	      adc0_ddn_arg,

	      adc0_resetp,

	      adc0_sen,

	      adc0_sdata,

	      adc0_sdout_arg,

	      adc1_oe,

	      adc1_ddp_arg,

	      adc1_ddn_arg,

	      adc1_resetp,

	      adc1_sen,

	      adc1_sdata,

	      adc1_sdout_arg,

	      gps_ppsSyncIn_x,

	      gps_ppsSyncOut,

	      dram_addr,

	      dram_ba,

	      dram_ras_n,

	      dram_cas_n,

	      dram_we_n,

	      dram_cs_n,

	      dram_odt,

	      dram_cke,

	      dram_dm,

	      dram_ck_p,

	      dram_ck_n,

	      dac0_dacSdrClk,
	      CLK_GATE_dac0_dacSdrClk,

	      adx_sclk,
	      CLK_GATE_adx_sclk,

	      adx_sclkn,
	      CLK_GATE_adx_sclkn,

	      adc0_sclk,
	      CLK_GATE_adc0_sclk,

	      adc0_sclkn,
	      CLK_GATE_adc0_sclkn,

	      adc1_sclk,
	      CLK_GATE_adc1_sclk,

	      adc1_sclkn,
	      CLK_GATE_adc1_sclkn,

	      trnClk,
	      CLK_GATE_trnClk,

	      dac0_dacSdrRst,
	      adx_srst,
	      adc0_rst,
	      adc1_rst);
  input  sys0_clkp;
  input  sys0_clkn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  pci0_clkp;
  input  pci0_clkn;
  input  pci0_rstn;
  input  dac_clkp;
  input  dac_clkn;
  input  adc_clkp;
  input  adc_clkn;
  input  adc0_clkp;
  input  adc0_clkn;
  input  adc1_clkp;
  input  adc1_clkn;

  inout  [31 : 0] dram_io_dq;
  inout  [3 : 0] dram_io_dqs_p;
  inout  [3 : 0] dram_io_dqs_n;

  // action method pcie_rxp
  input  [7 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [7 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [7 : 0] pcie_txp;

  // value method pcie_txn
  output [7 : 0] pcie_txn;

  // value method led
  output [2 : 0] led;

  // value method dac0_dap
  output [11 : 0] dac0_dap;

  // value method dac0_dan
  output [11 : 0] dac0_dan;

  // value method dac0_dbp
  output [11 : 0] dac0_dbp;

  // value method dac0_dbn
  output [11 : 0] dac0_dbn;

  // value method dac0_dcp
  output [11 : 0] dac0_dcp;

  // value method dac0_dcn
  output [11 : 0] dac0_dcn;

  // value method dac0_ddp
  output [11 : 0] dac0_ddp;

  // value method dac0_ddn
  output [11 : 0] dac0_ddn;

  // value method dac0_dacClkDiv
  output dac0_dacClkDiv;

  // value method dac0_dacDelay
  output dac0_dacDelay;

  // value method dac0_dacRf
  output dac0_dacRf;

  // value method dac0_dacRz
  output dac0_dacRz;

  // value method dac0_dacCal
  output dac0_dacCal;

  // value method dac0_syncOutp
  output dac0_syncOutp;

  // value method dac0_syncOutn
  output dac0_syncOutn;

  // value method dac0_syncMutep
  output dac0_syncMutep;

  // value method dac0_syncMuten
  output dac0_syncMuten;

  // value method adx_adx_csb
  output adx_csb;

  // value method adx_adx_sdo
  output adx_sdo;

  // action method adx_adx_sdi
  input  adx_sdi_arg;

  // value method adx_adx_funct
  output adx_funct;

  // action method adx_adx_status
  input  adx_status_arg;

  // value method adc0_oe
  output adc0_oe;

  // action method adc0_ddp
  input  [6 : 0] adc0_ddp_arg;

  // action method adc0_ddn
  input  [6 : 0] adc0_ddn_arg;

  // value method adc0_resetp
  output adc0_resetp;

  // value method adc0_sen
  output adc0_sen;

  // value method adc0_sdata
  output adc0_sdata;

  // action method adc0_sdout
  input  adc0_sdout_arg;

  // value method adc1_oe
  output adc1_oe;

  // action method adc1_ddp
  input  [6 : 0] adc1_ddp_arg;

  // action method adc1_ddn
  input  [6 : 0] adc1_ddn_arg;

  // value method adc1_resetp
  output adc1_resetp;

  // value method adc1_sen
  output adc1_sen;

  // value method adc1_sdata
  output adc1_sdata;

  // action method adc1_sdout
  input  adc1_sdout_arg;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [1 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_cs_n
  output [1 : 0] dram_cs_n;

  // value method dram_odt
  output [1 : 0] dram_odt;

  // value method dram_cke
  output [1 : 0] dram_cke;

  // value method dram_dm
  output [3 : 0] dram_dm;

  // value method dram_ck_p
  output [1 : 0] dram_ck_p;

  // value method dram_ck_n
  output [1 : 0] dram_ck_n;

  // oscillator and gates for output clock dac0_dacSdrClk
  output dac0_dacSdrClk;
  output CLK_GATE_dac0_dacSdrClk;

  // oscillator and gates for output clock adx_sclk
  output adx_sclk;
  output CLK_GATE_adx_sclk;

  // oscillator and gates for output clock adx_sclkn
  output adx_sclkn;
  output CLK_GATE_adx_sclkn;

  // oscillator and gates for output clock adc0_sclk
  output adc0_sclk;
  output CLK_GATE_adc0_sclk;

  // oscillator and gates for output clock adc0_sclkn
  output adc0_sclkn;
  output CLK_GATE_adc0_sclkn;

  // oscillator and gates for output clock adc1_sclk
  output adc1_sclk;
  output CLK_GATE_adc1_sclk;

  // oscillator and gates for output clock adc1_sclkn
  output adc1_sclkn;
  output CLK_GATE_adc1_sclkn;

  // oscillator and gates for output clock trnClk
  output trnClk;
  output CLK_GATE_trnClk;

  // output resets
  output dac0_dacSdrRst;
  output adx_srst;
  output adc0_rst;
  output adc1_rst;

  // signals for module outputs
  wire [12 : 0] dram_addr;
  wire [11 : 0] dac0_dan,
		dac0_dap,
		dac0_dbn,
		dac0_dbp,
		dac0_dcn,
		dac0_dcp,
		dac0_ddn,
		dac0_ddp;
  wire [7 : 0] pcie_txn, pcie_txp;
  wire [3 : 0] dram_dm;
  wire [2 : 0] led;
  wire [1 : 0] dram_ba, dram_ck_n, dram_ck_p, dram_cke, dram_cs_n, dram_odt;
  wire CLK_GATE_adc0_sclk,
       CLK_GATE_adc0_sclkn,
       CLK_GATE_adc1_sclk,
       CLK_GATE_adc1_sclkn,
       CLK_GATE_adx_sclk,
       CLK_GATE_adx_sclkn,
       CLK_GATE_dac0_dacSdrClk,
       CLK_GATE_trnClk,
       adc0_oe,
       adc0_resetp,
       adc0_rst,
       adc0_sclk,
       adc0_sclkn,
       adc0_sdata,
       adc0_sen,
       adc1_oe,
       adc1_resetp,
       adc1_rst,
       adc1_sclk,
       adc1_sclkn,
       adc1_sdata,
       adc1_sen,
       adx_csb,
       adx_funct,
       adx_sclk,
       adx_sclkn,
       adx_sdo,
       adx_srst,
       dac0_dacCal,
       dac0_dacClkDiv,
       dac0_dacDelay,
       dac0_dacRf,
       dac0_dacRz,
       dac0_dacSdrClk,
       dac0_dacSdrRst,
       dac0_syncMuten,
       dac0_syncMutep,
       dac0_syncOutn,
       dac0_syncOutp,
       dram_cas_n,
       dram_ras_n,
       dram_we_n,
       gps_ppsSyncOut,
       trnClk;

  // inlined wires
  wire [63 : 0] pciw_pci0_wTrnTxDat$wget;
  wire [7 : 0] pciw_pci0_wTrnTxRem$wget, pciw_pcie_irq_wInterruptDo$wget;
  wire pciw_pci0_pwTrnRx$whas,
       pciw_pci0_pwTrnTx$whas,
       pciw_pci0_wTrnRxCplS$wget,
       pciw_pci0_wTrnRxCplS$whas,
       pciw_pci0_wTrnRxNpOk$wget,
       pciw_pci0_wTrnRxNpOk$whas,
       pciw_pci0_wTrnTxDat$whas,
       pciw_pci0_wTrnTxDsc$wget,
       pciw_pci0_wTrnTxDsc$whas,
       pciw_pci0_wTrnTxEof$wget,
       pciw_pci0_wTrnTxEof$whas,
       pciw_pci0_wTrnTxRem$whas,
       pciw_pci0_wTrnTxSof$wget,
       pciw_pci0_wTrnTxSof$whas,
       pciw_pcie_irq_wInterruptDo$whas,
       pciw_pcie_irq_wInterruptRdyN$wget,
       pciw_pcie_irq_wInterruptRdyN$whas,
       tcW10_wti_sThreadBusy_pw$whas,
       tcW11_wti_sThreadBusy_pw$whas;

  // register pciDevice
  reg [15 : 0] pciDevice;
  wire [15 : 0] pciDevice$D_IN;
  wire pciDevice$EN;

  // register pciw_pcie_irq_rInterruptDi
  reg [7 : 0] pciw_pcie_irq_rInterruptDi;
  wire [7 : 0] pciw_pcie_irq_rInterruptDi$D_IN;
  wire pciw_pcie_irq_rInterruptDi$EN;

  // register pciw_pcie_irq_rInterruptN
  reg pciw_pcie_irq_rInterruptN;
  wire pciw_pcie_irq_rInterruptN$D_IN, pciw_pcie_irq_rInterruptN$EN;

  // register pciw_pcie_irq_rInterrupting
  reg pciw_pcie_irq_rInterrupting;
  wire pciw_pcie_irq_rInterrupting$D_IN, pciw_pcie_irq_rInterrupting$EN;

  // register pciw_pcie_irq_rMMEnabled
  reg [2 : 0] pciw_pcie_irq_rMMEnabled;
  wire [2 : 0] pciw_pcie_irq_rMMEnabled$D_IN;
  wire pciw_pcie_irq_rMMEnabled$EN;

  // register pciw_pcie_irq_rMSIEnabled
  reg pciw_pcie_irq_rMSIEnabled;
  wire pciw_pcie_irq_rMSIEnabled$D_IN, pciw_pcie_irq_rMSIEnabled$EN;

  // register pciw_rg
  reg [81 : 0] pciw_rg;
  wire [81 : 0] pciw_rg$D_IN;
  wire pciw_rg$EN;

  // register pciw_rg_1
  reg [81 : 0] pciw_rg_1;
  wire [81 : 0] pciw_rg_1$D_IN;
  wire pciw_rg_1$EN;

  // register tcW10_wti_nowReq
  reg [66 : 0] tcW10_wti_nowReq;
  wire [66 : 0] tcW10_wti_nowReq$D_IN;
  wire tcW10_wti_nowReq$EN;

  // register tcW10_wti_sThreadBusy_d
  reg tcW10_wti_sThreadBusy_d;
  wire tcW10_wti_sThreadBusy_d$D_IN, tcW10_wti_sThreadBusy_d$EN;

  // register tcW11_wti_nowReq
  reg [66 : 0] tcW11_wti_nowReq;
  wire [66 : 0] tcW11_wti_nowReq$D_IN;
  wire tcW11_wti_nowReq$EN;

  // register tcW11_wti_sThreadBusy_d
  reg tcW11_wti_sThreadBusy_d;
  wire tcW11_wti_sThreadBusy_d$D_IN, tcW11_wti_sThreadBusy_d$EN;

  // ports of submodule adc0Rst
  wire adc0Rst$OUT_RST_N;

  // ports of submodule adc0_clk
  wire adc0_clk$O;

  // ports of submodule adc1_clk
  wire adc1_clk$O;

  // ports of submodule adcW10
  wire [66 : 0] adcW10$wtiS0_req;
  wire [31 : 0] adcW10$wciS0_MData, adcW10$wciS0_SData, adcW10$wsiM0_MData;
  wire [19 : 0] adcW10$wciS0_MAddr;
  wire [11 : 0] adcW10$wsiM0_MBurstLength;
  wire [7 : 0] adcW10$wsiM0_MReqInfo;
  wire [6 : 0] adcW10$adc0_ddn_arg,
	       adcW10$adc0_ddp_arg,
	       adcW10$adc1_ddn_arg,
	       adcW10$adc1_ddp_arg;
  wire [3 : 0] adcW10$wciS0_MByteEn, adcW10$wsiM0_MByteEn;
  wire [2 : 0] adcW10$wciS0_MCmd, adcW10$wsiM0_MCmd;
  wire [1 : 0] adcW10$wciS0_MFlag, adcW10$wciS0_SFlag, adcW10$wciS0_SResp;
  wire adcW10$CLK_adc0_sclk,
       adcW10$CLK_adc0_sclkn,
       adcW10$CLK_adc1_sclk,
       adcW10$CLK_adc1_sclkn,
       adcW10$CLK_adcSdrClk,
       adcW10$CLK_adx_sclk,
       adcW10$CLK_adx_sclkn,
       adcW10$RST_N_adc0_rst,
       adcW10$RST_N_adc1_rst,
       adcW10$RST_N_adcSdrRst,
       adcW10$RST_N_adx_srst,
       adcW10$adc0_oe,
       adcW10$adc0_resetp,
       adcW10$adc0_sdata,
       adcW10$adc0_sdout_arg,
       adcW10$adc0_sen,
       adcW10$adc1_oe,
       adcW10$adc1_resetp,
       adcW10$adc1_sdata,
       adcW10$adc1_sdout_arg,
       adcW10$adc1_sen,
       adcW10$adx_csb,
       adcW10$adx_funct,
       adcW10$adx_sdi_arg,
       adcW10$adx_sdo,
       adcW10$adx_status_arg,
       adcW10$wciS0_MAddrSpace,
       adcW10$wciS0_SThreadBusy,
       adcW10$wsiM0_MBurstPrecise,
       adcW10$wsiM0_MReqLast,
       adcW10$wsiM0_MReset_n,
       adcW10$wsiM0_SReset_n,
       adcW10$wsiM0_SThreadBusy,
       adcW10$wtiS0_SThreadBusy;

  // ports of submodule adc_clk
  wire adc_clk$O;

  // ports of submodule ctop
  wire [152 : 0] ctop$server_request_put, ctop$server_response_get;
  wire [127 : 0] ctop$wmemiM_MData, ctop$wmemiM_SData;
  wire [63 : 0] ctop$cpNow;
  wire [35 : 0] ctop$wmemiM_MAddr;
  wire [31 : 0] ctop$wci_m_0_SData,
		ctop$wci_m_1_SData,
		ctop$wci_m_2_MData,
		ctop$wci_m_2_SData,
		ctop$wci_m_3_MData,
		ctop$wci_m_3_SData,
		ctop$wci_m_4_MData,
		ctop$wci_m_4_SData,
		ctop$wsi_m_dac_MData,
		ctop$wsi_s_adc_MData;
  wire [19 : 0] ctop$wci_m_2_MAddr, ctop$wci_m_3_MAddr, ctop$wci_m_4_MAddr;
  wire [15 : 0] ctop$wmemiM_MDataByteEn;
  wire [11 : 0] ctop$wmemiM_MBurstLength,
		ctop$wsi_m_dac_MBurstLength,
		ctop$wsi_s_adc_MBurstLength;
  wire [7 : 0] ctop$wsi_m_dac_MReqInfo, ctop$wsi_s_adc_MReqInfo;
  wire [3 : 0] ctop$wci_m_2_MByteEn,
	       ctop$wci_m_3_MByteEn,
	       ctop$wci_m_4_MByteEn,
	       ctop$wsi_m_dac_MByteEn,
	       ctop$wsi_s_adc_MByteEn;
  wire [2 : 0] ctop$switch_x,
	       ctop$wci_m_2_MCmd,
	       ctop$wci_m_3_MCmd,
	       ctop$wci_m_4_MCmd,
	       ctop$wmemiM_MCmd,
	       ctop$wsi_m_dac_MCmd,
	       ctop$wsi_s_adc_MCmd;
  wire [1 : 0] ctop$led,
	       ctop$wci_m_0_SFlag,
	       ctop$wci_m_0_SResp,
	       ctop$wci_m_1_SFlag,
	       ctop$wci_m_1_SResp,
	       ctop$wci_m_2_MFlag,
	       ctop$wci_m_2_SFlag,
	       ctop$wci_m_2_SResp,
	       ctop$wci_m_3_MFlag,
	       ctop$wci_m_3_SFlag,
	       ctop$wci_m_3_SResp,
	       ctop$wci_m_4_MFlag,
	       ctop$wci_m_4_SFlag,
	       ctop$wci_m_4_SResp,
	       ctop$wmemiM_SResp;
  wire ctop$EN_server_request_put,
       ctop$EN_server_response_get,
       ctop$RDY_server_request_put,
       ctop$RDY_server_response_get,
       ctop$RST_N_wci_m_2,
       ctop$RST_N_wci_m_3,
       ctop$RST_N_wci_m_4,
       ctop$gps_ppsSyncIn_x,
       ctop$gps_ppsSyncOut,
       ctop$wci_m_0_SThreadBusy,
       ctop$wci_m_1_SThreadBusy,
       ctop$wci_m_2_MAddrSpace,
       ctop$wci_m_2_SThreadBusy,
       ctop$wci_m_3_MAddrSpace,
       ctop$wci_m_3_SThreadBusy,
       ctop$wci_m_4_MAddrSpace,
       ctop$wci_m_4_SThreadBusy,
       ctop$wmemiM_MDataLast,
       ctop$wmemiM_MDataValid,
       ctop$wmemiM_MReqLast,
       ctop$wmemiM_MReset_n,
       ctop$wmemiM_SCmdAccept,
       ctop$wmemiM_SDataAccept,
       ctop$wmemiM_SRespLast,
       ctop$wsi_m_dac_MBurstPrecise,
       ctop$wsi_m_dac_MReqLast,
       ctop$wsi_m_dac_MReset_n,
       ctop$wsi_m_dac_SReset_n,
       ctop$wsi_m_dac_SThreadBusy,
       ctop$wsi_s_adc_MBurstPrecise,
       ctop$wsi_s_adc_MReqLast,
       ctop$wsi_s_adc_MReset_n,
       ctop$wsi_s_adc_SReset_n,
       ctop$wsi_s_adc_SThreadBusy;

  // ports of submodule dacW11
  wire [66 : 0] dacW11$wtiS0_req;
  wire [31 : 0] dacW11$wciS0_MData, dacW11$wciS0_SData, dacW11$wsiS0_MData;
  wire [19 : 0] dacW11$wciS0_MAddr;
  wire [11 : 0] dacW11$dac0_dan,
		dacW11$dac0_dap,
		dacW11$dac0_dbn,
		dacW11$dac0_dbp,
		dacW11$dac0_dcn,
		dacW11$dac0_dcp,
		dacW11$dac0_ddn,
		dacW11$dac0_ddp,
		dacW11$wsiS0_MBurstLength;
  wire [7 : 0] dacW11$wsiS0_MReqInfo;
  wire [3 : 0] dacW11$wciS0_MByteEn, dacW11$wsiS0_MByteEn;
  wire [2 : 0] dacW11$wciS0_MCmd, dacW11$wsiS0_MCmd;
  wire [1 : 0] dacW11$wciS0_MFlag, dacW11$wciS0_SFlag, dacW11$wciS0_SResp;
  wire dacW11$CLK_dac0_dacSdrClk,
       dacW11$RST_N_dac0_dacSdrRst,
       dacW11$dac0_dacCal,
       dacW11$dac0_dacClkDiv,
       dacW11$dac0_dacDelay,
       dacW11$dac0_dacRf,
       dacW11$dac0_dacRz,
       dacW11$dac0_syncMuten,
       dacW11$dac0_syncMutep,
       dacW11$dac0_syncOutn,
       dacW11$dac0_syncOutp,
       dacW11$wciS0_MAddrSpace,
       dacW11$wciS0_SThreadBusy,
       dacW11$wsiS0_MBurstPrecise,
       dacW11$wsiS0_MReqLast,
       dacW11$wsiS0_MReset_n,
       dacW11$wsiS0_SReset_n,
       dacW11$wsiS0_SThreadBusy,
       dacW11$wtiS0_SThreadBusy;

  // ports of submodule dac_clk
  wire dac_clk$O;

  // ports of submodule dac_rst
  wire dac_rst$OUT_RST_N;

  // ports of submodule dram0
  wire [127 : 0] dram0$wmemiS0_MData, dram0$wmemiS0_SData;
  wire [35 : 0] dram0$wmemiS0_MAddr;
  wire [31 : 0] dram0$dram_io_dq, dram0$wciS0_MData, dram0$wciS0_SData;
  wire [19 : 0] dram0$wciS0_MAddr;
  wire [15 : 0] dram0$wmemiS0_MDataByteEn;
  wire [12 : 0] dram0$dram_addr;
  wire [11 : 0] dram0$wmemiS0_MBurstLength;
  wire [3 : 0] dram0$dram_dm,
	       dram0$dram_io_dqs_n,
	       dram0$dram_io_dqs_p,
	       dram0$wciS0_MByteEn;
  wire [2 : 0] dram0$wciS0_MCmd, dram0$wmemiS0_MCmd;
  wire [1 : 0] dram0$dram_ba,
	       dram0$dram_ck_n,
	       dram0$dram_ck_p,
	       dram0$dram_cke,
	       dram0$dram_cs_n,
	       dram0$dram_odt,
	       dram0$wciS0_MFlag,
	       dram0$wciS0_SFlag,
	       dram0$wciS0_SResp,
	       dram0$wmemiS0_SResp;
  wire dram0$dram_cas_n,
       dram0$dram_ras_n,
       dram0$dram_we_n,
       dram0$wciS0_MAddrSpace,
       dram0$wciS0_SThreadBusy,
       dram0$wmemiS0_MDataLast,
       dram0$wmemiS0_MDataValid,
       dram0$wmemiS0_MReqLast,
       dram0$wmemiS0_MReset_n,
       dram0$wmemiS0_SCmdAccept,
       dram0$wmemiS0_SDataAccept,
       dram0$wmemiS0_SRespLast;

  // ports of submodule infLed
  wire [1 : 0] infLed$WGET, infLed$WVAL;

  // ports of submodule pciw_inFifo
  wire [80 : 0] pciw_inFifo$D_IN, pciw_inFifo$D_OUT;
  wire pciw_inFifo$CLR,
       pciw_inFifo$DEQ,
       pciw_inFifo$EMPTY_N,
       pciw_inFifo$ENQ,
       pciw_inFifo$FULL_N;

  // ports of submodule pciw_outFifo
  wire [80 : 0] pciw_outFifo$D_IN, pciw_outFifo$D_OUT;
  wire pciw_outFifo$CLR,
       pciw_outFifo$DEQ,
       pciw_outFifo$EMPTY_N,
       pciw_outFifo$ENQ,
       pciw_outFifo$FULL_N;

  // ports of submodule pciw_p125rst
  wire pciw_p125rst$OUT_RST_N;

  // ports of submodule pciw_pci0_clk
  wire pciw_pci0_clk$O;

  // ports of submodule pciw_pci0_pcie_ep
  wire [63 : 0] pciw_pci0_pcie_ep$cfg_dsn,
		pciw_pci0_pcie_ep$trn_rd,
		pciw_pci0_pcie_ep$trn_td;
  wire [47 : 0] pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pciw_pci0_pcie_ep$cfg_di;
  wire [9 : 0] pciw_pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_di,
	       pciw_pci0_pcie_ep$cfg_interrupt_do,
	       pciw_pci0_pcie_ep$pci_exp_rxn,
	       pciw_pci0_pcie_ep$pci_exp_rxp,
	       pciw_pci0_pcie_ep$pci_exp_txn,
	       pciw_pci0_pcie_ep$pci_exp_txp,
	       pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_trem_n;
  wire [6 : 0] pciw_pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pciw_pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pciw_pci0_pcie_ep$cfg_byte_en_n;
  wire [2 : 0] pciw_pci0_pcie_ep$cfg_function_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_mmenable;
  wire pciw_pci0_pcie_ep$cfg_err_cor_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_abort_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pciw_pci0_pcie_ep$cfg_err_ecrc_n,
       pciw_pci0_pcie_ep$cfg_err_locked_n,
       pciw_pci0_pcie_ep$cfg_err_posted_n,
       pciw_pci0_pcie_ep$cfg_err_ur_n,
       pciw_pci0_pcie_ep$cfg_interrupt_assert_n,
       pciw_pci0_pcie_ep$cfg_interrupt_msienable,
       pciw_pci0_pcie_ep$cfg_interrupt_n,
       pciw_pci0_pcie_ep$cfg_interrupt_rdy_n,
       pciw_pci0_pcie_ep$cfg_pm_wake_n,
       pciw_pci0_pcie_ep$cfg_rd_en_n,
       pciw_pci0_pcie_ep$cfg_trn_pending_n,
       pciw_pci0_pcie_ep$cfg_wr_en_n,
       pciw_pci0_pcie_ep$trn_clk,
       pciw_pci0_pcie_ep$trn_lnk_up_n,
       pciw_pci0_pcie_ep$trn_rcpl_streaming_n,
       pciw_pci0_pcie_ep$trn_rdst_rdy_n,
       pciw_pci0_pcie_ep$trn_reof_n,
       pciw_pci0_pcie_ep$trn_reset_n,
       pciw_pci0_pcie_ep$trn_rnp_ok_n,
       pciw_pci0_pcie_ep$trn_rsof_n,
       pciw_pci0_pcie_ep$trn_rsrc_rdy_n,
       pciw_pci0_pcie_ep$trn_tdst_rdy_n,
       pciw_pci0_pcie_ep$trn_teof_n,
       pciw_pci0_pcie_ep$trn_terrfwd_n,
       pciw_pci0_pcie_ep$trn_tsof_n,
       pciw_pci0_pcie_ep$trn_tsrc_dsc_n,
       pciw_pci0_pcie_ep$trn_tsrc_rdy_n;

  // ports of submodule pciw_pciDevice
  wire [15 : 0] pciw_pciDevice$sD_IN;
  wire pciw_pciDevice$sEN, pciw_pciDevice$sRDY;

  // ports of submodule pciw_pciLinkUp
  wire pciw_pciLinkUp$dD_OUT, pciw_pciLinkUp$sD_IN, pciw_pciLinkUp$sEN;

  // ports of submodule pciw_pcie_irq_fifoAssert
  wire [7 : 0] pciw_pcie_irq_fifoAssert$dD_OUT,
	       pciw_pcie_irq_fifoAssert$sD_IN;
  wire pciw_pcie_irq_fifoAssert$dDEQ,
       pciw_pcie_irq_fifoAssert$dEMPTY_N,
       pciw_pcie_irq_fifoAssert$sENQ;

  // ports of submodule pciw_uI2PF
  wire [152 : 0] pciw_uI2PF$D_IN, pciw_uI2PF$D_OUT;
  wire pciw_uI2PF$CLR,
       pciw_uI2PF$DEQ,
       pciw_uI2PF$EMPTY_N,
       pciw_uI2PF$ENQ,
       pciw_uI2PF$FULL_N;

  // ports of submodule pciw_uP2IF
  wire [152 : 0] pciw_uP2IF$D_IN, pciw_uP2IF$D_OUT;
  wire pciw_uP2IF$CLR,
       pciw_uP2IF$DEQ,
       pciw_uP2IF$EMPTY_N,
       pciw_uP2IF$ENQ,
       pciw_uP2IF$FULL_N;

  // ports of submodule sys0_clk
  wire sys0_clk$O;

  // ports of submodule sys0_rst
  wire sys0_rst$OUT_RST_N;

  // ports of submodule sys1_clk
  wire sys1_clk$O;

  // ports of submodule sys1_rst
  wire sys1_rst$OUT_RST_N;

  // ports of submodule tcW10_now
  wire [63 : 0] tcW10_now$dD_OUT, tcW10_now$sD_IN;
  wire tcW10_now$sEN, tcW10_now$sRDY;

  // ports of submodule tcW11_now
  wire [63 : 0] tcW11_now$dD_OUT, tcW11_now$sD_IN;
  wire tcW11_now$sEN, tcW11_now$sRDY;

  // rule scheduling signals
  wire WILL_FIRE_RL_pciw_connect_1,
       WILL_FIRE_RL_pciw_downconv_connect1,
       WILL_FIRE_RL_pciw_downconv_connect2,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_pciw_upconv_connect1,
       WILL_FIRE_RL_pciw_upconv_connect2;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_pciw_uP2IF$enq_1__VAL_1, MUX_pciw_uP2IF$enq_1__VAL_2;
  wire [81 : 0] MUX_pciw_rg$write_1__VAL_1, MUX_pciw_rg_1$write_1__VAL_1;
  wire [80 : 0] MUX_pciw_outFifo$enq_1__VAL_1;
  wire MUX_pciw_rg$write_1__SEL_1,
       MUX_pciw_rg_1$write_1__SEL_1,
       MUX_pciw_uP2IF$enq_1__SEL_1;

  // remaining internal signals
  wire [127 : 0] wOut_data__h3153, x_data__h3074;
  wire [15 : 0] wOut_be__h3152, x_be__h3073;

  // oscillator and gates for output clock dac0_dacSdrClk
  assign dac0_dacSdrClk = dacW11$CLK_dac0_dacSdrClk ;
  assign CLK_GATE_dac0_dacSdrClk = 1'b1 ;

  // oscillator and gates for output clock adx_sclk
  assign adx_sclk = adcW10$CLK_adx_sclk ;
  assign CLK_GATE_adx_sclk = 1'b1 ;

  // oscillator and gates for output clock adx_sclkn
  assign adx_sclkn = adcW10$CLK_adx_sclkn ;
  assign CLK_GATE_adx_sclkn = 1'b1 ;

  // oscillator and gates for output clock adc0_sclk
  assign adc0_sclk = adcW10$CLK_adc0_sclk ;
  assign CLK_GATE_adc0_sclk = 1'b1 ;

  // oscillator and gates for output clock adc0_sclkn
  assign adc0_sclkn = adcW10$CLK_adc0_sclkn ;
  assign CLK_GATE_adc0_sclkn = 1'b1 ;

  // oscillator and gates for output clock adc1_sclk
  assign adc1_sclk = adcW10$CLK_adc1_sclk ;
  assign CLK_GATE_adc1_sclk = 1'b1 ;

  // oscillator and gates for output clock adc1_sclkn
  assign adc1_sclkn = adcW10$CLK_adc1_sclkn ;
  assign CLK_GATE_adc1_sclkn = 1'b1 ;

  // oscillator and gates for output clock trnClk
  assign trnClk = pciw_pci0_pcie_ep$trn_clk ;
  assign CLK_GATE_trnClk = 1'b1 ;

  // output resets
  assign dac0_dacSdrRst = dacW11$RST_N_dac0_dacSdrRst ;
  assign adx_srst = adcW10$RST_N_adx_srst ;
  assign adc0_rst = adcW10$RST_N_adc0_rst ;
  assign adc1_rst = adcW10$RST_N_adc1_rst ;

  // value method pcie_txp
  assign pcie_txp = pciw_pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pciw_pci0_pcie_ep$pci_exp_txn ;

  // value method led
  assign led = { ~infLed$WGET, ~pciw_pciLinkUp$dD_OUT } ;

  // value method dac0_dap
  assign dac0_dap = dacW11$dac0_dap ;

  // value method dac0_dan
  assign dac0_dan = dacW11$dac0_dan ;

  // value method dac0_dbp
  assign dac0_dbp = dacW11$dac0_dbp ;

  // value method dac0_dbn
  assign dac0_dbn = dacW11$dac0_dbn ;

  // value method dac0_dcp
  assign dac0_dcp = dacW11$dac0_dcp ;

  // value method dac0_dcn
  assign dac0_dcn = dacW11$dac0_dcn ;

  // value method dac0_ddp
  assign dac0_ddp = dacW11$dac0_ddp ;

  // value method dac0_ddn
  assign dac0_ddn = dacW11$dac0_ddn ;

  // value method dac0_dacClkDiv
  assign dac0_dacClkDiv = dacW11$dac0_dacClkDiv ;

  // value method dac0_dacDelay
  assign dac0_dacDelay = dacW11$dac0_dacDelay ;

  // value method dac0_dacRf
  assign dac0_dacRf = dacW11$dac0_dacRf ;

  // value method dac0_dacRz
  assign dac0_dacRz = dacW11$dac0_dacRz ;

  // value method dac0_dacCal
  assign dac0_dacCal = dacW11$dac0_dacCal ;

  // value method dac0_syncOutp
  assign dac0_syncOutp = dacW11$dac0_syncOutp ;

  // value method dac0_syncOutn
  assign dac0_syncOutn = dacW11$dac0_syncOutn ;

  // value method dac0_syncMutep
  assign dac0_syncMutep = dacW11$dac0_syncMutep ;

  // value method dac0_syncMuten
  assign dac0_syncMuten = dacW11$dac0_syncMuten ;

  // value method adx_adx_csb
  assign adx_csb = adcW10$adx_csb ;

  // value method adx_adx_sdo
  assign adx_sdo = adcW10$adx_sdo ;

  // value method adx_adx_funct
  assign adx_funct = adcW10$adx_funct ;

  // value method adc0_oe
  assign adc0_oe = adcW10$adc0_oe ;

  // value method adc0_resetp
  assign adc0_resetp = adcW10$adc0_resetp ;

  // value method adc0_sen
  assign adc0_sen = adcW10$adc0_sen ;

  // value method adc0_sdata
  assign adc0_sdata = adcW10$adc0_sdata ;

  // value method adc1_oe
  assign adc1_oe = adcW10$adc1_oe ;

  // value method adc1_resetp
  assign adc1_resetp = adcW10$adc1_resetp ;

  // value method adc1_sen
  assign adc1_sen = adcW10$adc1_sen ;

  // value method adc1_sdata
  assign adc1_sdata = adcW10$adc1_sdata ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = ctop$gps_ppsSyncOut ;

  // value method dram_addr
  assign dram_addr = dram0$dram_addr ;

  // value method dram_ba
  assign dram_ba = dram0$dram_ba ;

  // value method dram_ras_n
  assign dram_ras_n = dram0$dram_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = dram0$dram_cas_n ;

  // value method dram_we_n
  assign dram_we_n = dram0$dram_we_n ;

  // value method dram_cs_n
  assign dram_cs_n = dram0$dram_cs_n ;

  // value method dram_odt
  assign dram_odt = dram0$dram_odt ;

  // value method dram_cke
  assign dram_cke = dram0$dram_cke ;

  // value method dram_dm
  assign dram_dm = dram0$dram_dm ;

  // value method dram_ck_p
  assign dram_ck_p = dram0$dram_ck_p ;

  // value method dram_ck_n
  assign dram_ck_n = dram0$dram_ck_n ;

  // submodule adc0Rst
  SyncResetA #(.RSTDELAY(32'd0)) adc0Rst(.CLK(adc0_clk$O),
					 .IN_RST_N(pciw_p125rst$OUT_RST_N),
					 .OUT_RST_N(adc0Rst$OUT_RST_N));

  // submodule adc0_clk
  IBUFDS adc0_clk(.I(adc0_clkp), .IB(adc0_clkn), .O(adc0_clk$O));

  // submodule adc1Rst
  SyncResetA #(.RSTDELAY(32'd0)) adc1Rst(.CLK(adc1_clk$O),
					 .IN_RST_N(pciw_p125rst$OUT_RST_N),
					 .OUT_RST_N());

  // submodule adc1_clk
  IBUFDS adc1_clk(.I(adc1_clkp), .IB(adc1_clkn), .O(adc1_clk$O));

  // submodule adcRst
  SyncResetA #(.RSTDELAY(32'd0)) adcRst(.CLK(adc_clk$O),
					.IN_RST_N(pciw_p125rst$OUT_RST_N),
					.OUT_RST_N());

  // submodule adcW10
  mkADCWorker adcW10(.CLK_sys0_clk(sys0_clk$O),
		     .RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		     .CLK_adc_clk(adc_clk$O),
		     .CLK_adc0_clk(adc0_clk$O),
		     .CLK_adc1_clk(adc1_clk$O),
		     .RST_N_adcx_rst(adc0Rst$OUT_RST_N),
		     .wciS0_Clk(pciw_pci0_pcie_ep$trn_clk),
		     .wciS0_MReset_n(ctop$RST_N_wci_m_2),
		     .adc0_ddn_arg(adcW10$adc0_ddn_arg),
		     .adc0_ddp_arg(adcW10$adc0_ddp_arg),
		     .adc0_sdout_arg(adcW10$adc0_sdout_arg),
		     .adc1_ddn_arg(adcW10$adc1_ddn_arg),
		     .adc1_ddp_arg(adcW10$adc1_ddp_arg),
		     .adc1_sdout_arg(adcW10$adc1_sdout_arg),
		     .adx_sdi_arg(adcW10$adx_sdi_arg),
		     .adx_status_arg(adcW10$adx_status_arg),
		     .wciS0_MAddr(adcW10$wciS0_MAddr),
		     .wciS0_MAddrSpace(adcW10$wciS0_MAddrSpace),
		     .wciS0_MByteEn(adcW10$wciS0_MByteEn),
		     .wciS0_MCmd(adcW10$wciS0_MCmd),
		     .wciS0_MData(adcW10$wciS0_MData),
		     .wciS0_MFlag(adcW10$wciS0_MFlag),
		     .wtiS0_req(adcW10$wtiS0_req),
		     .wsiM0_SThreadBusy(adcW10$wsiM0_SThreadBusy),
		     .wsiM0_SReset_n(adcW10$wsiM0_SReset_n),
		     .wciS0_SResp(adcW10$wciS0_SResp),
		     .wciS0_SData(adcW10$wciS0_SData),
		     .wciS0_SThreadBusy(adcW10$wciS0_SThreadBusy),
		     .wciS0_SFlag(adcW10$wciS0_SFlag),
		     .wtiS0_SThreadBusy(adcW10$wtiS0_SThreadBusy),
		     .wsiM0_MCmd(adcW10$wsiM0_MCmd),
		     .wsiM0_MReqLast(adcW10$wsiM0_MReqLast),
		     .wsiM0_MBurstPrecise(adcW10$wsiM0_MBurstPrecise),
		     .wsiM0_MBurstLength(adcW10$wsiM0_MBurstLength),
		     .wsiM0_MData(adcW10$wsiM0_MData),
		     .wsiM0_MByteEn(adcW10$wsiM0_MByteEn),
		     .wsiM0_MReqInfo(adcW10$wsiM0_MReqInfo),
		     .wsiM0_MReset_n(adcW10$wsiM0_MReset_n),
		     .adx_csb(adcW10$adx_csb),
		     .adx_sdo(adcW10$adx_sdo),
		     .adx_funct(adcW10$adx_funct),
		     .adc0_oe(adcW10$adc0_oe),
		     .adc0_resetp(adcW10$adc0_resetp),
		     .adc0_sen(adcW10$adc0_sen),
		     .adc0_sdata(adcW10$adc0_sdata),
		     .adc1_oe(adcW10$adc1_oe),
		     .adc1_resetp(adcW10$adc1_resetp),
		     .adc1_sen(adcW10$adc1_sen),
		     .adc1_sdata(adcW10$adc1_sdata),
		     .CLK_adx_sclk(adcW10$CLK_adx_sclk),
		     .CLK_GATE_adx_sclk(),
		     .CLK_adx_sclkn(adcW10$CLK_adx_sclkn),
		     .CLK_GATE_adx_sclkn(),
		     .CLK_adc0_sclk(adcW10$CLK_adc0_sclk),
		     .CLK_GATE_adc0_sclk(),
		     .CLK_adc0_sclkn(adcW10$CLK_adc0_sclkn),
		     .CLK_GATE_adc0_sclkn(),
		     .CLK_adc1_sclk(adcW10$CLK_adc1_sclk),
		     .CLK_GATE_adc1_sclk(),
		     .CLK_adc1_sclkn(adcW10$CLK_adc1_sclkn),
		     .CLK_GATE_adc1_sclkn(),
		     .CLK_adcSdrClk(adcW10$CLK_adcSdrClk),
		     .CLK_GATE_adcSdrClk(),
		     .RST_N_adx_srst(adcW10$RST_N_adx_srst),
		     .RST_N_adc0_rst(adcW10$RST_N_adc0_rst),
		     .RST_N_adc1_rst(adcW10$RST_N_adc1_rst),
		     .RST_N_adcSdrRst(adcW10$RST_N_adcSdrRst));

  // submodule adc_clk
  IBUFDS adc_clk(.I(adc_clkp), .IB(adc_clkn), .O(adc_clk$O));

  // submodule ctop
  mkCTop4B ctop(.pciDevice(pciDevice),
		.CLK_sys0_clk(sys0_clk$O),
		.RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		.CLK(pciw_pci0_pcie_ep$trn_clk),
		.RST_N(pciw_p125rst$OUT_RST_N),
		.gps_ppsSyncIn_x(ctop$gps_ppsSyncIn_x),
		.server_request_put(ctop$server_request_put),
		.switch_x(ctop$switch_x),
		.wci_m_0_SData(ctop$wci_m_0_SData),
		.wci_m_0_SFlag(ctop$wci_m_0_SFlag),
		.wci_m_0_SResp(ctop$wci_m_0_SResp),
		.wci_m_1_SData(ctop$wci_m_1_SData),
		.wci_m_1_SFlag(ctop$wci_m_1_SFlag),
		.wci_m_1_SResp(ctop$wci_m_1_SResp),
		.wci_m_2_SData(ctop$wci_m_2_SData),
		.wci_m_2_SFlag(ctop$wci_m_2_SFlag),
		.wci_m_2_SResp(ctop$wci_m_2_SResp),
		.wci_m_3_SData(ctop$wci_m_3_SData),
		.wci_m_3_SFlag(ctop$wci_m_3_SFlag),
		.wci_m_3_SResp(ctop$wci_m_3_SResp),
		.wci_m_4_SData(ctop$wci_m_4_SData),
		.wci_m_4_SFlag(ctop$wci_m_4_SFlag),
		.wci_m_4_SResp(ctop$wci_m_4_SResp),
		.wmemiM_SData(ctop$wmemiM_SData),
		.wmemiM_SResp(ctop$wmemiM_SResp),
		.wsi_s_adc_MBurstLength(ctop$wsi_s_adc_MBurstLength),
		.wsi_s_adc_MByteEn(ctop$wsi_s_adc_MByteEn),
		.wsi_s_adc_MCmd(ctop$wsi_s_adc_MCmd),
		.wsi_s_adc_MData(ctop$wsi_s_adc_MData),
		.wsi_s_adc_MReqInfo(ctop$wsi_s_adc_MReqInfo),
		.EN_server_request_put(ctop$EN_server_request_put),
		.EN_server_response_get(ctop$EN_server_response_get),
		.wci_m_0_SThreadBusy(ctop$wci_m_0_SThreadBusy),
		.wci_m_1_SThreadBusy(ctop$wci_m_1_SThreadBusy),
		.wci_m_2_SThreadBusy(ctop$wci_m_2_SThreadBusy),
		.wci_m_3_SThreadBusy(ctop$wci_m_3_SThreadBusy),
		.wci_m_4_SThreadBusy(ctop$wci_m_4_SThreadBusy),
		.wsi_s_adc_MReqLast(ctop$wsi_s_adc_MReqLast),
		.wsi_s_adc_MBurstPrecise(ctop$wsi_s_adc_MBurstPrecise),
		.wsi_s_adc_MReset_n(ctop$wsi_s_adc_MReset_n),
		.wsi_m_dac_SThreadBusy(ctop$wsi_m_dac_SThreadBusy),
		.wsi_m_dac_SReset_n(ctop$wsi_m_dac_SReset_n),
		.wmemiM_SRespLast(ctop$wmemiM_SRespLast),
		.wmemiM_SCmdAccept(ctop$wmemiM_SCmdAccept),
		.wmemiM_SDataAccept(ctop$wmemiM_SDataAccept),
		.RDY_server_request_put(ctop$RDY_server_request_put),
		.server_response_get(ctop$server_response_get),
		.RDY_server_response_get(ctop$RDY_server_response_get),
		.led(ctop$led),
		.wci_m_0_MCmd(),
		.wci_m_0_MAddrSpace(),
		.wci_m_0_MByteEn(),
		.wci_m_0_MAddr(),
		.wci_m_0_MData(),
		.wci_m_0_MFlag(),
		.wci_m_1_MCmd(),
		.wci_m_1_MAddrSpace(),
		.wci_m_1_MByteEn(),
		.wci_m_1_MAddr(),
		.wci_m_1_MData(),
		.wci_m_1_MFlag(),
		.wci_m_2_MCmd(ctop$wci_m_2_MCmd),
		.wci_m_2_MAddrSpace(ctop$wci_m_2_MAddrSpace),
		.wci_m_2_MByteEn(ctop$wci_m_2_MByteEn),
		.wci_m_2_MAddr(ctop$wci_m_2_MAddr),
		.wci_m_2_MData(ctop$wci_m_2_MData),
		.wci_m_2_MFlag(ctop$wci_m_2_MFlag),
		.wci_m_3_MCmd(ctop$wci_m_3_MCmd),
		.wci_m_3_MAddrSpace(ctop$wci_m_3_MAddrSpace),
		.wci_m_3_MByteEn(ctop$wci_m_3_MByteEn),
		.wci_m_3_MAddr(ctop$wci_m_3_MAddr),
		.wci_m_3_MData(ctop$wci_m_3_MData),
		.wci_m_3_MFlag(ctop$wci_m_3_MFlag),
		.wci_m_4_MCmd(ctop$wci_m_4_MCmd),
		.wci_m_4_MAddrSpace(ctop$wci_m_4_MAddrSpace),
		.wci_m_4_MByteEn(ctop$wci_m_4_MByteEn),
		.wci_m_4_MAddr(ctop$wci_m_4_MAddr),
		.wci_m_4_MData(ctop$wci_m_4_MData),
		.wci_m_4_MFlag(ctop$wci_m_4_MFlag),
		.cpNow(ctop$cpNow),
		.RDY_cpNow(),
		.wsi_s_adc_SThreadBusy(ctop$wsi_s_adc_SThreadBusy),
		.wsi_s_adc_SReset_n(ctop$wsi_s_adc_SReset_n),
		.wsi_m_dac_MCmd(ctop$wsi_m_dac_MCmd),
		.wsi_m_dac_MReqLast(ctop$wsi_m_dac_MReqLast),
		.wsi_m_dac_MBurstPrecise(ctop$wsi_m_dac_MBurstPrecise),
		.wsi_m_dac_MBurstLength(ctop$wsi_m_dac_MBurstLength),
		.wsi_m_dac_MData(ctop$wsi_m_dac_MData),
		.wsi_m_dac_MByteEn(ctop$wsi_m_dac_MByteEn),
		.wsi_m_dac_MReqInfo(ctop$wsi_m_dac_MReqInfo),
		.wsi_m_dac_MReset_n(ctop$wsi_m_dac_MReset_n),
		.wmemiM_MCmd(ctop$wmemiM_MCmd),
		.wmemiM_MReqLast(ctop$wmemiM_MReqLast),
		.wmemiM_MAddr(ctop$wmemiM_MAddr),
		.wmemiM_MBurstLength(ctop$wmemiM_MBurstLength),
		.wmemiM_MDataValid(ctop$wmemiM_MDataValid),
		.wmemiM_MDataLast(ctop$wmemiM_MDataLast),
		.wmemiM_MData(ctop$wmemiM_MData),
		.wmemiM_MDataByteEn(ctop$wmemiM_MDataByteEn),
		.wmemiM_MReset_n(ctop$wmemiM_MReset_n),
		.gps_ppsSyncOut(ctop$gps_ppsSyncOut),
		.RST_N_wci_m_0(),
		.RST_N_wci_m_1(),
		.RST_N_wci_m_2(ctop$RST_N_wci_m_2),
		.RST_N_wci_m_3(ctop$RST_N_wci_m_3),
		.RST_N_wci_m_4(ctop$RST_N_wci_m_4));

  // submodule dacW11
  mkDACWorker dacW11(.CLK_dac_clk(dac_clk$O),
		     .RST_N_dac_rst(dac_rst$OUT_RST_N),
		     .wciS0_Clk(pciw_pci0_pcie_ep$trn_clk),
		     .wciS0_MReset_n(ctop$RST_N_wci_m_3),
		     .wciS0_MAddr(dacW11$wciS0_MAddr),
		     .wciS0_MAddrSpace(dacW11$wciS0_MAddrSpace),
		     .wciS0_MByteEn(dacW11$wciS0_MByteEn),
		     .wciS0_MCmd(dacW11$wciS0_MCmd),
		     .wciS0_MData(dacW11$wciS0_MData),
		     .wciS0_MFlag(dacW11$wciS0_MFlag),
		     .wsiS0_MBurstLength(dacW11$wsiS0_MBurstLength),
		     .wsiS0_MByteEn(dacW11$wsiS0_MByteEn),
		     .wsiS0_MCmd(dacW11$wsiS0_MCmd),
		     .wsiS0_MData(dacW11$wsiS0_MData),
		     .wsiS0_MReqInfo(dacW11$wsiS0_MReqInfo),
		     .wtiS0_req(dacW11$wtiS0_req),
		     .wsiS0_MReqLast(dacW11$wsiS0_MReqLast),
		     .wsiS0_MBurstPrecise(dacW11$wsiS0_MBurstPrecise),
		     .wsiS0_MReset_n(dacW11$wsiS0_MReset_n),
		     .wciS0_SResp(dacW11$wciS0_SResp),
		     .wciS0_SData(dacW11$wciS0_SData),
		     .wciS0_SThreadBusy(dacW11$wciS0_SThreadBusy),
		     .wciS0_SFlag(dacW11$wciS0_SFlag),
		     .wtiS0_SThreadBusy(dacW11$wtiS0_SThreadBusy),
		     .wsiS0_SThreadBusy(dacW11$wsiS0_SThreadBusy),
		     .wsiS0_SReset_n(dacW11$wsiS0_SReset_n),
		     .dac0_dap(dacW11$dac0_dap),
		     .dac0_dan(dacW11$dac0_dan),
		     .dac0_dbp(dacW11$dac0_dbp),
		     .dac0_dbn(dacW11$dac0_dbn),
		     .dac0_dcp(dacW11$dac0_dcp),
		     .dac0_dcn(dacW11$dac0_dcn),
		     .dac0_ddp(dacW11$dac0_ddp),
		     .dac0_ddn(dacW11$dac0_ddn),
		     .dac0_dacClkDiv(dacW11$dac0_dacClkDiv),
		     .dac0_dacDelay(dacW11$dac0_dacDelay),
		     .dac0_dacRf(dacW11$dac0_dacRf),
		     .dac0_dacRz(dacW11$dac0_dacRz),
		     .dac0_dacCal(dacW11$dac0_dacCal),
		     .dac0_syncOutp(dacW11$dac0_syncOutp),
		     .dac0_syncOutn(dacW11$dac0_syncOutn),
		     .dac0_syncMutep(dacW11$dac0_syncMutep),
		     .dac0_syncMuten(dacW11$dac0_syncMuten),
		     .CLK_dac0_dacSdrClk(dacW11$CLK_dac0_dacSdrClk),
		     .CLK_GATE_dac0_dacSdrClk(),
		     .RST_N_dac0_dacSdrRst(dacW11$RST_N_dac0_dacSdrRst));

  // submodule dac_clk
  IBUFDS dac_clk(.I(dac_clkp), .IB(dac_clkn), .O(dac_clk$O));

  // submodule dac_rst
  SyncResetA #(.RSTDELAY(32'd0)) dac_rst(.CLK(dac_clk$O),
					 .IN_RST_N(pciw_p125rst$OUT_RST_N),
					 .OUT_RST_N(dac_rst$OUT_RST_N));

  // submodule dram0
  mkDramServer_v5 dram0(.CLK_sys0_clk(sys0_clk$O),
			.RST_N_sys0_rst(sys0_rst$OUT_RST_N),
			.CLK_sys1_clk(sys1_clk$O),
			.RST_N_sys1_rst(sys1_rst$OUT_RST_N),
			.wciS0_Clk(pciw_pci0_pcie_ep$trn_clk),
			.wciS0_MReset_n(ctop$RST_N_wci_m_4),
			.wciS0_MAddr(dram0$wciS0_MAddr),
			.wciS0_MAddrSpace(dram0$wciS0_MAddrSpace),
			.wciS0_MByteEn(dram0$wciS0_MByteEn),
			.wciS0_MCmd(dram0$wciS0_MCmd),
			.wciS0_MData(dram0$wciS0_MData),
			.wciS0_MFlag(dram0$wciS0_MFlag),
			.wmemiS0_MAddr(dram0$wmemiS0_MAddr),
			.wmemiS0_MBurstLength(dram0$wmemiS0_MBurstLength),
			.wmemiS0_MCmd(dram0$wmemiS0_MCmd),
			.wmemiS0_MData(dram0$wmemiS0_MData),
			.wmemiS0_MDataByteEn(dram0$wmemiS0_MDataByteEn),
			.wmemiS0_MReqLast(dram0$wmemiS0_MReqLast),
			.wmemiS0_MDataValid(dram0$wmemiS0_MDataValid),
			.wmemiS0_MDataLast(dram0$wmemiS0_MDataLast),
			.wmemiS0_MReset_n(dram0$wmemiS0_MReset_n),
			.wciS0_SResp(dram0$wciS0_SResp),
			.wciS0_SData(dram0$wciS0_SData),
			.wciS0_SThreadBusy(dram0$wciS0_SThreadBusy),
			.wciS0_SFlag(dram0$wciS0_SFlag),
			.wmemiS0_SResp(dram0$wmemiS0_SResp),
			.wmemiS0_SRespLast(dram0$wmemiS0_SRespLast),
			.wmemiS0_SData(dram0$wmemiS0_SData),
			.wmemiS0_SCmdAccept(dram0$wmemiS0_SCmdAccept),
			.wmemiS0_SDataAccept(dram0$wmemiS0_SDataAccept),
			.dram_addr(dram0$dram_addr),
			.dram_ba(dram0$dram_ba),
			.dram_ras_n(dram0$dram_ras_n),
			.dram_cas_n(dram0$dram_cas_n),
			.dram_we_n(dram0$dram_we_n),
			.dram_cs_n(dram0$dram_cs_n),
			.dram_odt(dram0$dram_odt),
			.dram_cke(dram0$dram_cke),
			.dram_dm(dram0$dram_dm),
			.dram_ck_p(dram0$dram_ck_p),
			.dram_ck_n(dram0$dram_ck_n),
			.dram_io_dq(dram_io_dq),
			.dram_io_dqs_p(dram_io_dqs_p),
			.dram_io_dqs_n(dram_io_dqs_n));

  // submodule infLed
  BypassCrossingWire #(.width(32'd2)) infLed(.WVAL(infLed$WVAL),
					     .WGET(infLed$WGET));

  // submodule pciw_inFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) pciw_inFifo(.RST_N(pciw_p125rst$OUT_RST_N),
				       .CLK(pciw_pci0_pcie_ep$trn_clk),
				       .D_IN(pciw_inFifo$D_IN),
				       .ENQ(pciw_inFifo$ENQ),
				       .DEQ(pciw_inFifo$DEQ),
				       .CLR(pciw_inFifo$CLR),
				       .D_OUT(pciw_inFifo$D_OUT),
				       .FULL_N(pciw_inFifo$FULL_N),
				       .EMPTY_N(pciw_inFifo$EMPTY_N));

  // submodule pciw_outFifo
  FIFO2 #(.width(32'd81),
	  .guarded(32'd1)) pciw_outFifo(.RST_N(pciw_p125rst$OUT_RST_N),
					.CLK(pciw_pci0_pcie_ep$trn_clk),
					.D_IN(pciw_outFifo$D_IN),
					.ENQ(pciw_outFifo$ENQ),
					.DEQ(pciw_outFifo$DEQ),
					.CLR(pciw_outFifo$CLR),
					.D_OUT(pciw_outFifo$D_OUT),
					.FULL_N(pciw_outFifo$FULL_N),
					.EMPTY_N(pciw_outFifo$EMPTY_N));

  // submodule pciw_p125rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p125rst(.CLK(pciw_pci0_pcie_ep$trn_clk),
					      .IN_RST_N(pciw_pci0_pcie_ep$trn_reset_n),
					      .OUT_RST_N(pciw_p125rst$OUT_RST_N));

  // submodule pciw_pci0_clk
  IBUFDS pciw_pci0_clk(.I(pci0_clkp), .IB(pci0_clkn), .O(pciw_pci0_clk$O));

  // submodule pciw_pci0_pcie_ep
  xilinx_v5_pcie_wrapper pciw_pci0_pcie_ep(.sys_clk(pciw_pci0_clk$O),
					   .sys_reset_n(pci0_rstn),
					   .fast_train_simulation_only(1'h0),
					   .cfg_byte_en_n(pciw_pci0_pcie_ep$cfg_byte_en_n),
					   .cfg_di(pciw_pci0_pcie_ep$cfg_di),
					   .cfg_dsn(pciw_pci0_pcie_ep$cfg_dsn),
					   .cfg_dwaddr(pciw_pci0_pcie_ep$cfg_dwaddr),
					   .cfg_err_cor_n(pciw_pci0_pcie_ep$cfg_err_cor_n),
					   .cfg_err_cpl_abort_n(pciw_pci0_pcie_ep$cfg_err_cpl_abort_n),
					   .cfg_err_cpl_timeout_n(pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n),
					   .cfg_err_cpl_unexpect_n(pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n),
					   .cfg_err_ecrc_n(pciw_pci0_pcie_ep$cfg_err_ecrc_n),
					   .cfg_err_locked_n(pciw_pci0_pcie_ep$cfg_err_locked_n),
					   .cfg_err_posted_n(pciw_pci0_pcie_ep$cfg_err_posted_n),
					   .cfg_err_tlp_cpl_header(pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header),
					   .cfg_err_ur_n(pciw_pci0_pcie_ep$cfg_err_ur_n),
					   .cfg_interrupt_assert_n(pciw_pci0_pcie_ep$cfg_interrupt_assert_n),
					   .cfg_interrupt_di(pciw_pci0_pcie_ep$cfg_interrupt_di),
					   .cfg_interrupt_n(pciw_pci0_pcie_ep$cfg_interrupt_n),
					   .cfg_pm_wake_n(pciw_pci0_pcie_ep$cfg_pm_wake_n),
					   .cfg_rd_en_n(pciw_pci0_pcie_ep$cfg_rd_en_n),
					   .cfg_trn_pending_n(pciw_pci0_pcie_ep$cfg_trn_pending_n),
					   .cfg_wr_en_n(pciw_pci0_pcie_ep$cfg_wr_en_n),
					   .pci_exp_rxn(pciw_pci0_pcie_ep$pci_exp_rxn),
					   .pci_exp_rxp(pciw_pci0_pcie_ep$pci_exp_rxp),
					   .trn_rcpl_streaming_n(pciw_pci0_pcie_ep$trn_rcpl_streaming_n),
					   .trn_rdst_rdy_n(pciw_pci0_pcie_ep$trn_rdst_rdy_n),
					   .trn_rnp_ok_n(pciw_pci0_pcie_ep$trn_rnp_ok_n),
					   .trn_td(pciw_pci0_pcie_ep$trn_td),
					   .trn_teof_n(pciw_pci0_pcie_ep$trn_teof_n),
					   .trn_terrfwd_n(pciw_pci0_pcie_ep$trn_terrfwd_n),
					   .trn_trem_n(pciw_pci0_pcie_ep$trn_trem_n),
					   .trn_tsof_n(pciw_pci0_pcie_ep$trn_tsof_n),
					   .trn_tsrc_dsc_n(pciw_pci0_pcie_ep$trn_tsrc_dsc_n),
					   .trn_tsrc_rdy_n(pciw_pci0_pcie_ep$trn_tsrc_rdy_n),
					   .pci_exp_txp(pciw_pci0_pcie_ep$pci_exp_txp),
					   .pci_exp_txn(pciw_pci0_pcie_ep$pci_exp_txn),
					   .cfg_do(),
					   .cfg_rd_wr_done_n(),
					   .cfg_to_turnoff_n(),
					   .cfg_bus_number(pciw_pci0_pcie_ep$cfg_bus_number),
					   .cfg_device_number(pciw_pci0_pcie_ep$cfg_device_number),
					   .cfg_function_number(pciw_pci0_pcie_ep$cfg_function_number),
					   .cfg_status(),
					   .cfg_command(),
					   .cfg_dstatus(),
					   .cfg_dcommand(),
					   .cfg_lstatus(),
					   .cfg_lcommand(),
					   .cfg_pcie_link_state_n(),
					   .trn_lnk_up_n(pciw_pci0_pcie_ep$trn_lnk_up_n),
					   .trn_rsof_n(pciw_pci0_pcie_ep$trn_rsof_n),
					   .trn_reof_n(pciw_pci0_pcie_ep$trn_reof_n),
					   .trn_rd(pciw_pci0_pcie_ep$trn_rd),
					   .trn_rrem_n(pciw_pci0_pcie_ep$trn_rrem_n),
					   .trn_rerrfwd_n(),
					   .trn_rsrc_rdy_n(pciw_pci0_pcie_ep$trn_rsrc_rdy_n),
					   .trn_rsrc_dsc_n(),
					   .trn_rbar_hit_n(pciw_pci0_pcie_ep$trn_rbar_hit_n),
					   .trn_rfc_ph_av(),
					   .trn_rfc_pd_av(),
					   .trn_rfc_nph_av(),
					   .trn_rfc_npd_av(),
					   .trn_tdst_rdy_n(pciw_pci0_pcie_ep$trn_tdst_rdy_n),
					   .trn_tdst_dsc_n(),
					   .trn_tbuf_av(),
					   .cfg_err_cpl_rdy_n(),
					   .cfg_interrupt_rdy_n(pciw_pci0_pcie_ep$cfg_interrupt_rdy_n),
					   .cfg_interrupt_mmenable(pciw_pci0_pcie_ep$cfg_interrupt_mmenable),
					   .cfg_interrupt_msienable(pciw_pci0_pcie_ep$cfg_interrupt_msienable),
					   .cfg_interrupt_do(pciw_pci0_pcie_ep$cfg_interrupt_do),
					   .trn_clk(pciw_pci0_pcie_ep$trn_clk),
					   .trn2_clk(),
					   .refclkout(),
					   .trn_reset_n(pciw_pci0_pcie_ep$trn_reset_n));

  // submodule pciw_pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciw_pciDevice(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					      .dCLK(pciw_pci0_pcie_ep$trn_clk),
					      .sRST_N(pciw_p125rst$OUT_RST_N),
					      .sD_IN(pciw_pciDevice$sD_IN),
					      .sEN(pciw_pciDevice$sEN),
					      .dD_OUT(),
					      .sRDY(pciw_pciDevice$sRDY));

  // submodule pciw_pciLinkUp
  SyncBit #(.init(32'd0)) pciw_pciLinkUp(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					 .dCLK(pciw_pci0_pcie_ep$trn_clk),
					 .sRST_N(pciw_p125rst$OUT_RST_N),
					 .sD_IN(pciw_pciLinkUp$sD_IN),
					 .sEN(pciw_pciLinkUp$sEN),
					 .dD_OUT(pciw_pciLinkUp$dD_OUT));

  // submodule pciw_pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) pciw_pcie_irq_fifoAssert(.sCLK(pciw_pci0_pcie_ep$trn_clk),
						       .dCLK(pciw_pci0_pcie_ep$trn_clk),
						       .sRST_N(pciw_p125rst$OUT_RST_N),
						       .sD_IN(pciw_pcie_irq_fifoAssert$sD_IN),
						       .sENQ(pciw_pcie_irq_fifoAssert$sENQ),
						       .dDEQ(pciw_pcie_irq_fifoAssert$dDEQ),
						       .dD_OUT(pciw_pcie_irq_fifoAssert$dD_OUT),
						       .sFULL_N(),
						       .dEMPTY_N(pciw_pcie_irq_fifoAssert$dEMPTY_N));

  // submodule pciw_uI2PF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_uI2PF(.RST_N(pciw_p125rst$OUT_RST_N),
				      .CLK(pciw_pci0_pcie_ep$trn_clk),
				      .D_IN(pciw_uI2PF$D_IN),
				      .ENQ(pciw_uI2PF$ENQ),
				      .DEQ(pciw_uI2PF$DEQ),
				      .CLR(pciw_uI2PF$CLR),
				      .D_OUT(pciw_uI2PF$D_OUT),
				      .FULL_N(pciw_uI2PF$FULL_N),
				      .EMPTY_N(pciw_uI2PF$EMPTY_N));

  // submodule pciw_uP2IF
  FIFO2 #(.width(32'd153),
	  .guarded(32'd1)) pciw_uP2IF(.RST_N(pciw_p125rst$OUT_RST_N),
				      .CLK(pciw_pci0_pcie_ep$trn_clk),
				      .D_IN(pciw_uP2IF$D_IN),
				      .ENQ(pciw_uP2IF$ENQ),
				      .DEQ(pciw_uP2IF$DEQ),
				      .CLR(pciw_uP2IF$CLR),
				      .D_OUT(pciw_uP2IF$D_OUT),
				      .FULL_N(pciw_uP2IF$FULL_N),
				      .EMPTY_N(pciw_uP2IF$EMPTY_N));

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk$O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys0_rst(.CLK(sys0_clk$O),
					  .IN_RST_N(pciw_p125rst$OUT_RST_N),
					  .OUT_RST_N(sys0_rst$OUT_RST_N));

  // submodule sys1_clk
  IBUFDS sys1_clk(.I(sys1_clkp), .IB(sys1_clkn), .O(sys1_clk$O));

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk$O),
					  .IN_RST_N(pciw_p125rst$OUT_RST_N),
					  .OUT_RST_N(sys1_rst$OUT_RST_N));

  // submodule tcW10_now
  SyncRegister #(.width(32'd64), .init(64'd0)) tcW10_now(.sCLK(sys0_clk$O),
							 .dCLK(adcW10$CLK_adcSdrClk),
							 .sRST_N(sys0_rst$OUT_RST_N),
							 .sD_IN(tcW10_now$sD_IN),
							 .sEN(tcW10_now$sEN),
							 .dD_OUT(tcW10_now$dD_OUT),
							 .sRDY(tcW10_now$sRDY));

  // submodule tcW11_now
  SyncRegister #(.width(32'd64), .init(64'd0)) tcW11_now(.sCLK(sys0_clk$O),
							 .dCLK(dac_clk$O),
							 .sRST_N(sys0_rst$OUT_RST_N),
							 .sD_IN(tcW11_now$sD_IN),
							 .sEN(tcW11_now$sEN),
							 .dD_OUT(tcW11_now$dD_OUT),
							 .sRDY(tcW11_now$sRDY));

  // rule RL_pciw_upconv_connect1
  assign WILL_FIRE_RL_pciw_upconv_connect1 =
	     pciw_inFifo$EMPTY_N &&
	     (!pciw_inFifo$D_OUT[79] || pciw_uP2IF$FULL_N) &&
	     !pciw_rg[81] ;

  // rule RL_pciw_upconv_connect2
  assign WILL_FIRE_RL_pciw_upconv_connect2 =
	     pciw_inFifo$EMPTY_N && pciw_uP2IF$FULL_N && pciw_rg[81] ;

  // rule RL_pciw_connect_1
  assign WILL_FIRE_RL_pciw_connect_1 =
	     pciw_outFifo$EMPTY_N &&
	     (pciw_outFifo$D_OUT[71:64] == 8'd0 ||
	      !pciw_pci0_pcie_ep$trn_tdst_rdy_n) ;

  // rule RL_pciw_downconv_connect1
  assign WILL_FIRE_RL_pciw_downconv_connect1 =
	     pciw_uI2PF$EMPTY_N && pciw_outFifo$FULL_N && !pciw_rg_1[81] ;

  // rule RL_pciw_downconv_connect2
  assign WILL_FIRE_RL_pciw_downconv_connect2 =
	     pciw_outFifo$FULL_N && pciw_rg_1[81] ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt =
	     pciw_pcie_irq_fifoAssert$dEMPTY_N && pciw_pcie_irq_rMSIEnabled &&
	     !pciw_pcie_irq_rInterrupting &&
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done =
	     pciw_pcie_irq_rMSIEnabled && pciw_pcie_irq_rInterrupting &&
	     !pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // inputs to muxes for submodule ports
  assign MUX_pciw_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_upconv_connect1 && !pciw_inFifo$D_OUT[79] ;
  assign MUX_pciw_rg_1$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_downconv_connect1 &&
	     pciw_uI2PF$D_OUT[135:128] != 8'd0 ;
  assign MUX_pciw_uP2IF$enq_1__SEL_1 =
	     WILL_FIRE_RL_pciw_upconv_connect1 && pciw_inFifo$D_OUT[79] ;
  assign MUX_pciw_outFifo$enq_1__VAL_1 =
	     (pciw_uI2PF$D_OUT[135:128] == 8'd0) ?
	       { pciw_uI2PF$D_OUT[152:136], pciw_uI2PF$D_OUT[127:64] } :
	       { pciw_uI2PF$D_OUT[152],
		 1'd0,
		 pciw_uI2PF$D_OUT[150:136],
		 pciw_uI2PF$D_OUT[127:64] } ;
  assign MUX_pciw_rg$write_1__VAL_1 = { 1'd1, pciw_inFifo$D_OUT } ;
  assign MUX_pciw_rg_1$write_1__VAL_1 =
	     { 2'd2,
	       pciw_uI2PF$D_OUT[151:144],
	       pciw_uI2PF$D_OUT[135:128],
	       pciw_uI2PF$D_OUT[63:0] } ;
  assign MUX_pciw_uP2IF$enq_1__VAL_1 =
	     { pciw_inFifo$D_OUT[80:72], x_be__h3073, x_data__h3074 } ;
  assign MUX_pciw_uP2IF$enq_1__VAL_2 =
	     { pciw_rg[80],
	       pciw_inFifo$D_OUT[79],
	       pciw_rg[78:72],
	       wOut_be__h3152,
	       wOut_data__h3153 } ;

  // inlined wires
  assign pciw_pci0_wTrnTxSof$wget = !pciw_outFifo$D_OUT[80] ;
  assign pciw_pci0_wTrnTxSof$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxEof$wget = !pciw_outFifo$D_OUT[79] ;
  assign pciw_pci0_wTrnTxEof$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxDsc$wget = 1'd1 ;
  assign pciw_pci0_wTrnTxDsc$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxRem$wget = pciw_outFifo$D_OUT[71:64] ;
  assign pciw_pci0_wTrnTxRem$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnTxDat$wget = pciw_outFifo$D_OUT[63:0] ;
  assign pciw_pci0_wTrnTxDat$whas = pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_wTrnRxNpOk$wget = 1'd0 ;
  assign pciw_pci0_wTrnRxNpOk$whas = 1'd1 ;
  assign pciw_pci0_wTrnRxCplS$wget = 1'd1 ;
  assign pciw_pci0_wTrnRxCplS$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptRdyN$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pciw_pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptDo$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_do ;
  assign pciw_pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign pciw_pci0_pwTrnTx$whas =
	     WILL_FIRE_RL_pciw_connect_1 &&
	     pciw_outFifo$D_OUT[71:64] != 8'd0 ;
  assign pciw_pci0_pwTrnRx$whas =
	     !pciw_pci0_pcie_ep$trn_rsrc_rdy_n && pciw_inFifo$FULL_N ;
  assign tcW10_wti_sThreadBusy_pw$whas = adcW10$wtiS0_SThreadBusy ;
  assign tcW11_wti_sThreadBusy_pw$whas = dacW11$wtiS0_SThreadBusy ;

  // register pciDevice
  assign pciDevice$D_IN = 16'h0 ;
  assign pciDevice$EN = 1'b0 ;

  // register pciw_pcie_irq_rInterruptDi
  assign pciw_pcie_irq_rInterruptDi$D_IN = pciw_pcie_irq_fifoAssert$dD_OUT ;
  assign pciw_pcie_irq_rInterruptDi$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rInterruptN
  assign pciw_pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;
  assign pciw_pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pciw_pcie_irq_rInterrupting
  assign pciw_pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pciw_pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rMMEnabled
  assign pciw_pcie_irq_rMMEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pciw_pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pciw_pcie_irq_rMSIEnabled
  assign pciw_pcie_irq_rMSIEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pciw_pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // register pciw_rg
  assign pciw_rg$D_IN =
	     MUX_pciw_rg$write_1__SEL_1 ?
	       MUX_pciw_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_rg$EN =
	     WILL_FIRE_RL_pciw_upconv_connect1 && !pciw_inFifo$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_upconv_connect2 ;

  // register pciw_rg_1
  assign pciw_rg_1$D_IN =
	     MUX_pciw_rg_1$write_1__SEL_1 ?
	       MUX_pciw_rg_1$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_rg_1$EN =
	     WILL_FIRE_RL_pciw_downconv_connect1 &&
	     pciw_uI2PF$D_OUT[135:128] != 8'd0 ||
	     WILL_FIRE_RL_pciw_downconv_connect2 ;

  // register tcW10_wti_nowReq
  assign tcW10_wti_nowReq$D_IN = { 3'd1, tcW10_now$dD_OUT } ;
  assign tcW10_wti_nowReq$EN = 1'd1 ;

  // register tcW10_wti_sThreadBusy_d
  assign tcW10_wti_sThreadBusy_d$D_IN = adcW10$wtiS0_SThreadBusy ;
  assign tcW10_wti_sThreadBusy_d$EN = 1'd1 ;

  // register tcW11_wti_nowReq
  assign tcW11_wti_nowReq$D_IN = { 3'd1, tcW11_now$dD_OUT } ;
  assign tcW11_wti_nowReq$EN = 1'd1 ;

  // register tcW11_wti_sThreadBusy_d
  assign tcW11_wti_sThreadBusy_d$D_IN = dacW11$wtiS0_SThreadBusy ;
  assign tcW11_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule adcW10
  assign adcW10$adc0_ddn_arg = adc0_ddn_arg ;
  assign adcW10$adc0_ddp_arg = adc0_ddp_arg ;
  assign adcW10$adc0_sdout_arg = adc0_sdout_arg ;
  assign adcW10$adc1_ddn_arg = adc1_ddn_arg ;
  assign adcW10$adc1_ddp_arg = adc1_ddp_arg ;
  assign adcW10$adc1_sdout_arg = adc1_sdout_arg ;
  assign adcW10$adx_sdi_arg = adx_sdi_arg ;
  assign adcW10$adx_status_arg = adx_status_arg ;
  assign adcW10$wciS0_MAddr = ctop$wci_m_2_MAddr ;
  assign adcW10$wciS0_MAddrSpace = ctop$wci_m_2_MAddrSpace ;
  assign adcW10$wciS0_MByteEn = ctop$wci_m_2_MByteEn ;
  assign adcW10$wciS0_MCmd = ctop$wci_m_2_MCmd ;
  assign adcW10$wciS0_MData = ctop$wci_m_2_MData ;
  assign adcW10$wciS0_MFlag = ctop$wci_m_2_MFlag ;
  assign adcW10$wtiS0_req =
	     tcW10_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       tcW10_wti_nowReq ;
  assign adcW10$wsiM0_SThreadBusy = ctop$wsi_s_adc_SThreadBusy ;
  assign adcW10$wsiM0_SReset_n = ctop$wsi_s_adc_SReset_n ;

  // submodule ctop
  assign ctop$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign ctop$server_request_put = pciw_uP2IF$D_OUT ;
  assign ctop$switch_x = 3'h0 ;
  assign ctop$wci_m_0_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop$wci_m_0_SFlag = 2'b0 ;
  assign ctop$wci_m_0_SResp = 2'd0 ;
  assign ctop$wci_m_1_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign ctop$wci_m_1_SFlag = 2'b0 ;
  assign ctop$wci_m_1_SResp = 2'd0 ;
  assign ctop$wci_m_2_SData = adcW10$wciS0_SData ;
  assign ctop$wci_m_2_SFlag = adcW10$wciS0_SFlag ;
  assign ctop$wci_m_2_SResp = adcW10$wciS0_SResp ;
  assign ctop$wci_m_3_SData = dacW11$wciS0_SData ;
  assign ctop$wci_m_3_SFlag = dacW11$wciS0_SFlag ;
  assign ctop$wci_m_3_SResp = dacW11$wciS0_SResp ;
  assign ctop$wci_m_4_SData = dram0$wciS0_SData ;
  assign ctop$wci_m_4_SFlag = dram0$wciS0_SFlag ;
  assign ctop$wci_m_4_SResp = dram0$wciS0_SResp ;
  assign ctop$wmemiM_SData = dram0$wmemiS0_SData ;
  assign ctop$wmemiM_SResp = dram0$wmemiS0_SResp ;
  assign ctop$wsi_s_adc_MBurstLength = adcW10$wsiM0_MBurstLength ;
  assign ctop$wsi_s_adc_MByteEn = adcW10$wsiM0_MByteEn ;
  assign ctop$wsi_s_adc_MCmd = adcW10$wsiM0_MCmd ;
  assign ctop$wsi_s_adc_MData = adcW10$wsiM0_MData ;
  assign ctop$wsi_s_adc_MReqInfo = adcW10$wsiM0_MReqInfo ;
  assign ctop$EN_server_request_put =
	     ctop$RDY_server_request_put && pciw_uP2IF$EMPTY_N ;
  assign ctop$EN_server_response_get =
	     ctop$RDY_server_response_get && pciw_uI2PF$FULL_N ;
  assign ctop$wci_m_0_SThreadBusy = 1'd1 ;
  assign ctop$wci_m_1_SThreadBusy = 1'd1 ;
  assign ctop$wci_m_2_SThreadBusy = adcW10$wciS0_SThreadBusy ;
  assign ctop$wci_m_3_SThreadBusy = dacW11$wciS0_SThreadBusy ;
  assign ctop$wci_m_4_SThreadBusy = dram0$wciS0_SThreadBusy ;
  assign ctop$wsi_s_adc_MReqLast = adcW10$wsiM0_MReqLast ;
  assign ctop$wsi_s_adc_MBurstPrecise = adcW10$wsiM0_MBurstPrecise ;
  assign ctop$wsi_s_adc_MReset_n = adcW10$wsiM0_MReset_n ;
  assign ctop$wsi_m_dac_SThreadBusy = dacW11$wsiS0_SThreadBusy ;
  assign ctop$wsi_m_dac_SReset_n = dacW11$wsiS0_SReset_n ;
  assign ctop$wmemiM_SRespLast = dram0$wmemiS0_SRespLast ;
  assign ctop$wmemiM_SCmdAccept = dram0$wmemiS0_SCmdAccept ;
  assign ctop$wmemiM_SDataAccept = dram0$wmemiS0_SDataAccept ;

  // submodule dacW11
  assign dacW11$wciS0_MAddr = ctop$wci_m_3_MAddr ;
  assign dacW11$wciS0_MAddrSpace = ctop$wci_m_3_MAddrSpace ;
  assign dacW11$wciS0_MByteEn = ctop$wci_m_3_MByteEn ;
  assign dacW11$wciS0_MCmd = ctop$wci_m_3_MCmd ;
  assign dacW11$wciS0_MData = ctop$wci_m_3_MData ;
  assign dacW11$wciS0_MFlag = ctop$wci_m_3_MFlag ;
  assign dacW11$wsiS0_MBurstLength = ctop$wsi_m_dac_MBurstLength ;
  assign dacW11$wsiS0_MByteEn = ctop$wsi_m_dac_MByteEn ;
  assign dacW11$wsiS0_MCmd = ctop$wsi_m_dac_MCmd ;
  assign dacW11$wsiS0_MData = ctop$wsi_m_dac_MData ;
  assign dacW11$wsiS0_MReqInfo = ctop$wsi_m_dac_MReqInfo ;
  assign dacW11$wtiS0_req =
	     tcW11_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       tcW11_wti_nowReq ;
  assign dacW11$wsiS0_MReqLast = ctop$wsi_m_dac_MReqLast ;
  assign dacW11$wsiS0_MBurstPrecise = ctop$wsi_m_dac_MBurstPrecise ;
  assign dacW11$wsiS0_MReset_n = ctop$wsi_m_dac_MReset_n ;

  // submodule dram0
  assign dram0$wciS0_MAddr = ctop$wci_m_4_MAddr ;
  assign dram0$wciS0_MAddrSpace = ctop$wci_m_4_MAddrSpace ;
  assign dram0$wciS0_MByteEn = ctop$wci_m_4_MByteEn ;
  assign dram0$wciS0_MCmd = ctop$wci_m_4_MCmd ;
  assign dram0$wciS0_MData = ctop$wci_m_4_MData ;
  assign dram0$wciS0_MFlag = ctop$wci_m_4_MFlag ;
  assign dram0$wmemiS0_MAddr = ctop$wmemiM_MAddr ;
  assign dram0$wmemiS0_MBurstLength = ctop$wmemiM_MBurstLength ;
  assign dram0$wmemiS0_MCmd = ctop$wmemiM_MCmd ;
  assign dram0$wmemiS0_MData = ctop$wmemiM_MData ;
  assign dram0$wmemiS0_MDataByteEn = ctop$wmemiM_MDataByteEn ;
  assign dram0$wmemiS0_MReqLast = ctop$wmemiM_MReqLast ;
  assign dram0$wmemiS0_MDataValid = ctop$wmemiM_MDataValid ;
  assign dram0$wmemiS0_MDataLast = ctop$wmemiM_MDataLast ;
  assign dram0$wmemiS0_MReset_n = ctop$wmemiM_MReset_n ;

  // submodule infLed
  assign infLed$WVAL = ctop$led ;

  // submodule pciw_inFifo
  assign pciw_inFifo$D_IN =
	     { !pciw_pci0_pcie_ep$trn_rsof_n,
	       !pciw_pci0_pcie_ep$trn_reof_n,
	       ~pciw_pci0_pcie_ep$trn_rbar_hit_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_rd } ;
  assign pciw_inFifo$ENQ = pciw_pci0_pwTrnRx$whas ;
  assign pciw_inFifo$DEQ =
	     WILL_FIRE_RL_pciw_upconv_connect2 ||
	     WILL_FIRE_RL_pciw_upconv_connect1 ;
  assign pciw_inFifo$CLR = 1'b0 ;

  // submodule pciw_outFifo
  assign pciw_outFifo$D_IN =
	     WILL_FIRE_RL_pciw_downconv_connect1 ?
	       MUX_pciw_outFifo$enq_1__VAL_1 :
	       pciw_rg_1[80:0] ;
  assign pciw_outFifo$ENQ =
	     WILL_FIRE_RL_pciw_downconv_connect1 ||
	     WILL_FIRE_RL_pciw_downconv_connect2 ;
  assign pciw_outFifo$DEQ = WILL_FIRE_RL_pciw_connect_1 ;
  assign pciw_outFifo$CLR = 1'b0 ;

  // submodule pciw_pci0_pcie_ep
  assign pciw_pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pciw_pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pciw_pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pciw_pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_di = pciw_pcie_irq_rInterruptDi ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_n = pciw_pcie_irq_rInterruptN ;
  assign pciw_pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pciw_pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pciw_pci0_pcie_ep$trn_rcpl_streaming_n = 1'b1 ;
  assign pciw_pci0_pcie_ep$trn_rdst_rdy_n = !pciw_pci0_pwTrnRx$whas ;
  assign pciw_pci0_pcie_ep$trn_rnp_ok_n = 1'b0 ;
  assign pciw_pci0_pcie_ep$trn_td =
	     pciw_pci0_pwTrnTx$whas ? pciw_outFifo$D_OUT[63:0] : 64'h0 ;
  assign pciw_pci0_pcie_ep$trn_teof_n =
	     !pciw_pci0_pwTrnTx$whas || !pciw_outFifo$D_OUT[79] ;
  assign pciw_pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$trn_trem_n =
	     pciw_pci0_pwTrnTx$whas ? ~pciw_outFifo$D_OUT[71:64] : 8'd255 ;
  assign pciw_pci0_pcie_ep$trn_tsof_n =
	     !pciw_pci0_pwTrnTx$whas || !pciw_outFifo$D_OUT[80] ;
  assign pciw_pci0_pcie_ep$trn_tsrc_dsc_n = 1'b1 ;
  assign pciw_pci0_pcie_ep$trn_tsrc_rdy_n = !pciw_pci0_pwTrnTx$whas ;

  // submodule pciw_pciDevice
  assign pciw_pciDevice$sD_IN =
	     { pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_device_number,
	       pciw_pci0_pcie_ep$cfg_function_number } ;
  assign pciw_pciDevice$sEN = pciw_pciDevice$sRDY ;

  // submodule pciw_pciLinkUp
  assign pciw_pciLinkUp$sD_IN = !pciw_pci0_pcie_ep$trn_lnk_up_n ;
  assign pciw_pciLinkUp$sEN = 1'd1 ;

  // submodule pciw_pcie_irq_fifoAssert
  assign pciw_pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pciw_pcie_irq_fifoAssert$sENQ = 1'b0 ;
  assign pciw_pcie_irq_fifoAssert$dDEQ =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // submodule pciw_uI2PF
  assign pciw_uI2PF$D_IN = ctop$server_response_get ;
  assign pciw_uI2PF$ENQ = ctop$RDY_server_response_get && pciw_uI2PF$FULL_N ;
  assign pciw_uI2PF$DEQ = WILL_FIRE_RL_pciw_downconv_connect1 ;
  assign pciw_uI2PF$CLR = 1'b0 ;

  // submodule pciw_uP2IF
  assign pciw_uP2IF$D_IN =
	     MUX_pciw_uP2IF$enq_1__SEL_1 ?
	       MUX_pciw_uP2IF$enq_1__VAL_1 :
	       MUX_pciw_uP2IF$enq_1__VAL_2 ;
  assign pciw_uP2IF$ENQ =
	     WILL_FIRE_RL_pciw_upconv_connect1 && pciw_inFifo$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_upconv_connect2 ;
  assign pciw_uP2IF$DEQ = ctop$RDY_server_request_put && pciw_uP2IF$EMPTY_N ;
  assign pciw_uP2IF$CLR = 1'b0 ;

  // submodule tcW10_now
  assign tcW10_now$sD_IN = ctop$cpNow ;
  assign tcW10_now$sEN = tcW10_now$sRDY ;

  // submodule tcW11_now
  assign tcW11_now$sD_IN = ctop$cpNow ;
  assign tcW11_now$sEN = tcW11_now$sRDY ;

  // remaining internal signals
  assign wOut_be__h3152 = { pciw_rg[71:64], pciw_inFifo$D_OUT[71:64] } ;
  assign wOut_data__h3153 = { pciw_rg[63:0], pciw_inFifo$D_OUT[63:0] } ;
  assign x_be__h3073 = { pciw_inFifo$D_OUT[71:64], 8'd0 } ;
  assign x_data__h3074 = { pciw_inFifo$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;

  // handling of inlined registers

  always@(posedge dac_clk$O)
  begin
    if (!dac_rst$OUT_RST_N)
      begin
        tcW11_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	tcW11_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (tcW11_wti_nowReq$EN)
	  tcW11_wti_nowReq <= `BSV_ASSIGNMENT_DELAY tcW11_wti_nowReq$D_IN;
	if (tcW11_wti_sThreadBusy_d$EN)
	  tcW11_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      tcW11_wti_sThreadBusy_d$D_IN;
      end
  end

  always@(posedge pciw_pci0_pcie_ep$trn_clk)
  begin
    if (!pciw_p125rst$OUT_RST_N)
      begin
        pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_rg <= `BSV_ASSIGNMENT_DELAY 82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_rg_1 <= `BSV_ASSIGNMENT_DELAY 82'h0AAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (pciDevice$EN) pciDevice <= `BSV_ASSIGNMENT_DELAY pciDevice$D_IN;
	if (pciw_pcie_irq_rInterruptDi$EN)
	  pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptDi$D_IN;
	if (pciw_pcie_irq_rInterruptN$EN)
	  pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptN$D_IN;
	if (pciw_pcie_irq_rInterrupting$EN)
	  pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterrupting$D_IN;
	if (pciw_rg$EN) pciw_rg <= `BSV_ASSIGNMENT_DELAY pciw_rg$D_IN;
	if (pciw_rg_1$EN) pciw_rg_1 <= `BSV_ASSIGNMENT_DELAY pciw_rg_1$D_IN;
      end
    if (pciw_pcie_irq_rMMEnabled$EN)
      pciw_pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMMEnabled$D_IN;
    if (pciw_pcie_irq_rMSIEnabled$EN)
      pciw_pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMSIEnabled$D_IN;
  end

  always@(posedge adcW10$CLK_adcSdrClk)
  begin
    if (!adcW10$RST_N_adcSdrRst)
      begin
        tcW10_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	tcW10_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (tcW10_wti_nowReq$EN)
	  tcW10_wti_nowReq <= `BSV_ASSIGNMENT_DELAY tcW10_wti_nowReq$D_IN;
	if (tcW10_wti_sThreadBusy_d$EN)
	  tcW10_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      tcW10_wti_sThreadBusy_d$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    pciDevice = 16'hAAAA;
    pciw_pcie_irq_rInterruptDi = 8'hAA;
    pciw_pcie_irq_rInterruptN = 1'h0;
    pciw_pcie_irq_rInterrupting = 1'h0;
    pciw_pcie_irq_rMMEnabled = 3'h2;
    pciw_pcie_irq_rMSIEnabled = 1'h0;
    pciw_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_rg_1 = 82'h2AAAAAAAAAAAAAAAAAAAA;
    tcW10_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    tcW10_wti_sThreadBusy_d = 1'h0;
    tcW11_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    tcW11_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop

