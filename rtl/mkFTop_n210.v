//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sun May  6 09:51:01 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// led                            O     5
// debug                          O    32
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1
// rxclkBnd                       O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// gmii_tx_tx_clk                 O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// gmii_rstn                      O     1 reset
// sysRst                         O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// gmii_sysclk                    I     1 clock
// gmii_rx_clk                    I     1 clock
// fpga_rstn                      I     1 reset
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1 unused
// gmii_crs_i                     I     1 unused
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop_n210(sys0_clkp,
		   sys0_clkn,
		   gmii_sysclk,
		   gmii_rx_clk,
		   fpga_rstn,

		   mdio_mdd,
		   mdio_mdc,

		   led,

		   debug,

		   gmii_rx_rxd_i,

		   gmii_rx_rx_dv_i,

		   gmii_rx_rx_er_i,

		   gmii_tx_txd,

		   gmii_tx_tx_en,

		   gmii_tx_tx_er,

		   gmii_col_i,

		   gmii_crs_i,

		   gmii_led,

		   rxclkBnd,
		   CLK_GATE_rxclkBnd,

		   gmii_tx_tx_clk,
		   CLK_GATE_gmii_tx_tx_clk,

		   gmii_rstn,
		   sysRst);
  input  sys0_clkp;
  input  sys0_clkn;
  input  gmii_sysclk;
  input  gmii_rx_clk;
  input  fpga_rstn;

  inout  mdio_mdd;
  inout  mdio_mdc;

  // value method led
  output [4 : 0] led;

  // value method debug
  output [31 : 0] debug;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock rxclkBnd
  output rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // oscillator and gates for output clock gmii_tx_tx_clk
  output gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // output resets
  output gmii_rstn;
  output sysRst;

  // signals for module outputs
  wire [31 : 0] debug;
  wire [7 : 0] gmii_tx_txd;
  wire [4 : 0] led;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       gmii_led,
       gmii_rstn,
       gmii_tx_tx_clk,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       rxclkBnd,
       sysRst;

  // register doInit
  reg doInit;
  wire doInit$D_IN, doInit$EN;

  // register freeCnt
  reg [31 : 0] freeCnt;
  wire [31 : 0] freeCnt$D_IN;
  wire freeCnt$EN;

  // ports of submodule gbe0
  wire [39 : 0] gbe0$cpClient_response_put;
  wire [7 : 0] gbe0$gmii_rx_rxd_i, gbe0$gmii_tx_txd;
  wire gbe0$CLK_gmii_tx_tx_clk,
       gbe0$CLK_rxclkBnd,
       gbe0$EN_cpClient_request_get,
       gbe0$EN_cpClient_response_put,
       gbe0$RST_N_gmii_rstn,
       gbe0$gmii_col_i,
       gbe0$gmii_crs_i,
       gbe0$gmii_led,
       gbe0$gmii_rx_rx_dv_i,
       gbe0$gmii_rx_rx_er_i,
       gbe0$gmii_tx_tx_en,
       gbe0$gmii_tx_tx_er,
       gbe0$mdio_mdc,
       gbe0$mdio_mdd;

  // ports of submodule sys0_clk
  wire sys0_clk$O;

  // ports of submodule sys0_rst
  wire sys0_rst$OUT_RST_N;

  // ports of submodule sys1_clk
  wire sys1_clk$O;

  // ports of submodule sys1_rst
  wire sys1_rst$OUT_RST_N;

  // remaining internal signals
  reg [4 : 0] CASE_freeCnt_BITS_26_TO_24_3_0_IF_freeCnt_BIT__ETC__q1;

  // oscillator and gates for output clock rxclkBnd
  assign rxclkBnd = gbe0$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_tx_clk
  assign gmii_tx_tx_clk = gbe0$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // output resets
  assign gmii_rstn = gbe0$RST_N_gmii_rstn ;
  assign sysRst = sys0_rst$OUT_RST_N ;

  // value method led
  assign led =
	     doInit ?
	       CASE_freeCnt_BITS_26_TO_24_3_0_IF_freeCnt_BIT__ETC__q1 :
	       (freeCnt[24] ? 5'd30 : 5'd31) ;

  // value method debug
  assign debug =
	     { freeCnt[15],
	       freeCnt[15] ^ freeCnt[14],
	       freeCnt[14] ^ freeCnt[13],
	       freeCnt[13] ^ freeCnt[12],
	       freeCnt[12] ^ freeCnt[11],
	       freeCnt[11] ^ freeCnt[10],
	       freeCnt[10] ^ freeCnt[9],
	       freeCnt[9] ^ freeCnt[8],
	       freeCnt[8] ^ freeCnt[7],
	       freeCnt[7] ^ freeCnt[6],
	       freeCnt[6] ^ freeCnt[5],
	       freeCnt[5] ^ freeCnt[4],
	       freeCnt[4] ^ freeCnt[3],
	       freeCnt[3] ^ freeCnt[2],
	       freeCnt[2] ^ freeCnt[1],
	       freeCnt[1] ^ freeCnt[0],
	       16'h0 } ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gbe0$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gbe0$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gbe0$gmii_tx_tx_er ;

  // value method gmii_led
  assign gmii_led = gbe0$gmii_led ;

  // submodule gbe0
  mkGbeLite #(.hasDebugLogic(1'd0)) gbe0(.CLK_gmii_rx_clk(gmii_rx_clk),
					 .CLK_sys1_clk(sys1_clk$O),
					 .RST_N_sys1_rst(sys1_rst$OUT_RST_N),
					 .wciS0_Clk(sys1_clk$O),
					 .wciS0_MReset_n(sys1_rst$OUT_RST_N),
					 .cpClient_response_put(gbe0$cpClient_response_put),
					 .gmii_col_i(gbe0$gmii_col_i),
					 .gmii_crs_i(gbe0$gmii_crs_i),
					 .gmii_rx_rx_dv_i(gbe0$gmii_rx_rx_dv_i),
					 .gmii_rx_rx_er_i(gbe0$gmii_rx_rx_er_i),
					 .gmii_rx_rxd_i(gbe0$gmii_rx_rxd_i),
					 .EN_cpClient_request_get(gbe0$EN_cpClient_request_get),
					 .EN_cpClient_response_put(gbe0$EN_cpClient_response_put),
					 .cpClient_request_get(),
					 .RDY_cpClient_request_get(),
					 .RDY_cpClient_response_put(),
					 .gmii_tx_txd(gbe0$gmii_tx_txd),
					 .gmii_tx_tx_en(gbe0$gmii_tx_tx_en),
					 .gmii_tx_tx_er(gbe0$gmii_tx_tx_er),
					 .gmii_led(gbe0$gmii_led),
					 .CLK_gmii_tx_tx_clk(gbe0$CLK_gmii_tx_tx_clk),
					 .CLK_GATE_gmii_tx_tx_clk(),
					 .CLK_rxclkBnd(gbe0$CLK_rxclkBnd),
					 .CLK_GATE_rxclkBnd(),
					 .RST_N_gmii_rstn(gbe0$RST_N_gmii_rstn),
					 .mdio_mdd(mdio_mdd),
					 .mdio_mdc(mdio_mdc));

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk$O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd1)) sys0_rst(.CLK(sys0_clk$O),
					  .IN_RST_N(fpga_rstn),
					  .OUT_RST_N(sys0_rst$OUT_RST_N));

  // submodule sys1_clk
  BUFG sys1_clk(.I(gmii_sysclk), .O(sys1_clk$O));

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd1)) sys1_rst(.CLK(sys1_clk$O),
					  .IN_RST_N(fpga_rstn),
					  .OUT_RST_N(sys1_rst$OUT_RST_N));

  // register doInit
  assign doInit$D_IN = 1'd0 ;
  assign doInit$EN = freeCnt > 32'h08000000 ;

  // register freeCnt
  assign freeCnt$D_IN = freeCnt + 32'd1 ;
  assign freeCnt$EN = 1'd1 ;

  // submodule gbe0
  assign gbe0$cpClient_response_put = 40'h0 ;
  assign gbe0$gmii_col_i = gmii_col_i ;
  assign gbe0$gmii_crs_i = gmii_crs_i ;
  assign gbe0$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gbe0$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gbe0$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gbe0$EN_cpClient_request_get = 1'b0 ;
  assign gbe0$EN_cpClient_response_put = 1'b0 ;

  // remaining internal signals
  always@(freeCnt)
  begin
    case (freeCnt[26:24])
      3'd0, 3'd1, 3'd2, 3'd6, 3'd7:
	  CASE_freeCnt_BITS_26_TO_24_3_0_IF_freeCnt_BIT__ETC__q1 =
	      freeCnt[22] ? 5'd3 : 5'd31;
      3'd3: CASE_freeCnt_BITS_26_TO_24_3_0_IF_freeCnt_BIT__ETC__q1 = 5'd27;
      3'd4: CASE_freeCnt_BITS_26_TO_24_3_0_IF_freeCnt_BIT__ETC__q1 = 5'd19;
      3'd5: CASE_freeCnt_BITS_26_TO_24_3_0_IF_freeCnt_BIT__ETC__q1 = 5'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge sys0_clk$O)
  begin
    if (!sys0_rst$OUT_RST_N)
      begin
        doInit <= `BSV_ASSIGNMENT_DELAY 1'd1;
	freeCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (doInit$EN) doInit <= `BSV_ASSIGNMENT_DELAY doInit$D_IN;
	if (freeCnt$EN) freeCnt <= `BSV_ASSIGNMENT_DELAY freeCnt$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    doInit = 1'h0;
    freeCnt = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop_n210

