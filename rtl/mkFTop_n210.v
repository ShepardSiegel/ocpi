//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Thu Aug 16 12:24:56 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// led                            O     5
// debug                          O    32 const
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// adc_oe                         O     1 const
// adc_sclkgate                   O     1 reg
// adc_resetp                     O     1 reg
// adc_sen                        O     1 reg
// adc_smosi                      O     1 reg
// flash_mosi                     O     1 reg
// flash_clk                      O     1 reg
// flash_csn                      O     1
// rxclkBnd                       O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// gmii_tx_tx_clk                 O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// adc_sclk                       O     1 clock
// CLK_GATE_adc_sclk              O     1 const
// adc_sclkn                      O     1 clock
// CLK_GATE_adc_sclkn             O     1 const
// sys0Clk                        O     1 clock
// CLK_GATE_sys0Clk               O     1 const
// gmii_rstn                      O     1 reset
// adc_rst                        O     1 reset
// sys0Rst                        O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// gmii_sysclk                    I     1 clock
// gmii_rx_clk                    I     1 clock
// adc_clkout                     I     1 clock
// fpga_rstn                      I     1 reset
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// adc_da_i                       I    14 reg
// adc_db_i                       I    14 reg
// adc_smiso_i                    I     1 reg
// flash_miso_i                   I     1 reg
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
// i2c_sda                       IO     1 inout
// i2c_scl                       IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop_n210(sys0_clkp,
		   sys0_clkn,
		   gmii_sysclk,
		   gmii_rx_clk,
		   adc_clkout,
		   fpga_rstn,

		   mdio_mdd,
		   mdio_mdc,
		   i2c_sda,
		   i2c_scl,

		   led,

		   debug,

		   gmii_rx_rxd_i,

		   gmii_rx_rx_dv_i,

		   gmii_rx_rx_er_i,

		   gmii_tx_txd,

		   gmii_tx_tx_en,

		   gmii_tx_tx_er,

		   gmii_col_i,

		   gmii_crs_i,

		   gmii_intr_i,

		   gmii_led,

		   adc_oe,

		   adc_da_i,

		   adc_db_i,

		   adc_sclkgate,

		   adc_resetp,

		   adc_sen,

		   adc_smosi,

		   adc_smiso_i,

		   flash_miso_i,

		   flash_mosi,

		   flash_clk,

		   flash_csn,

		   rxclkBnd,
		   CLK_GATE_rxclkBnd,

		   gmii_tx_tx_clk,
		   CLK_GATE_gmii_tx_tx_clk,

		   adc_sclk,
		   CLK_GATE_adc_sclk,

		   adc_sclkn,
		   CLK_GATE_adc_sclkn,

		   sys0Clk,
		   CLK_GATE_sys0Clk,

		   gmii_rstn,
		   adc_rst,
		   sys0Rst);
  input  sys0_clkp;
  input  sys0_clkn;
  input  gmii_sysclk;
  input  gmii_rx_clk;
  input  adc_clkout;
  input  fpga_rstn;

  inout  mdio_mdd;
  inout  mdio_mdc;
  inout  i2c_sda;
  inout  i2c_scl;

  // value method led
  output [4 : 0] led;

  // value method debug
  output [31 : 0] debug;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // value method adc_oe
  output adc_oe;

  // action method adc_da
  input  [13 : 0] adc_da_i;

  // action method adc_db
  input  [13 : 0] adc_db_i;

  // value method adc_sclkgate
  output adc_sclkgate;

  // value method adc_resetp
  output adc_resetp;

  // value method adc_sen
  output adc_sen;

  // value method adc_smosi
  output adc_smosi;

  // action method adc_smiso
  input  adc_smiso_i;

  // action method flash_miso
  input  flash_miso_i;

  // value method flash_mosi
  output flash_mosi;

  // value method flash_clk
  output flash_clk;

  // value method flash_csn
  output flash_csn;

  // oscillator and gates for output clock rxclkBnd
  output rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // oscillator and gates for output clock gmii_tx_tx_clk
  output gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock adc_sclk
  output adc_sclk;
  output CLK_GATE_adc_sclk;

  // oscillator and gates for output clock adc_sclkn
  output adc_sclkn;
  output CLK_GATE_adc_sclkn;

  // oscillator and gates for output clock sys0Clk
  output sys0Clk;
  output CLK_GATE_sys0Clk;

  // output resets
  output gmii_rstn;
  output adc_rst;
  output sys0Rst;

  // signals for module outputs
  wire [31 : 0] debug;
  wire [7 : 0] gmii_tx_txd;
  wire [4 : 0] led;
  wire CLK_GATE_adc_sclk,
       CLK_GATE_adc_sclkn,
       CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_GATE_sys0Clk,
       adc_oe,
       adc_resetp,
       adc_rst,
       adc_sclk,
       adc_sclkgate,
       adc_sclkn,
       adc_sen,
       adc_smosi,
       flash_clk,
       flash_csn,
       flash_mosi,
       gmii_led,
       gmii_rstn,
       gmii_tx_tx_clk,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       rxclkBnd,
       sys0Clk,
       sys0Rst;

  // inlined wires
  wire [95 : 0] pat0_wsiM_extStatusW$wget,
		sma0_wsiM_extStatusW$wget,
		sma0_wsiS_extStatusW$wget;
  wire [71 : 0] pat0_wci_wslv_wciReq$wget, sma0_wci_wslv_wciReq$wget;
  wire [60 : 0] pat0_wsiM_reqFifo_x_wire$wget,
		sma0_respF_wDataIn$wget,
		sma0_respF_wDataOut$wget,
		sma0_wsiM_reqFifo_x_wire$wget,
		sma0_wsiS_wsiReq$wget;
  wire [37 : 0] sma0_wmi_dhF_x_wire$wget;
  wire [33 : 0] pat0_wci_wslv_respF_x_wire$wget,
		sma0_wci_wslv_respF_x_wire$wget,
		sma0_wmi_wmiResponse$wget;
  wire [31 : 0] pat0_dataBram_serverAdapterA_outData_enqData$wget,
		pat0_dataBram_serverAdapterA_outData_outData$wget,
		pat0_dataBram_serverAdapterB_outData_enqData$wget,
		pat0_dataBram_serverAdapterB_outData_outData$wget,
		pat0_metaBram_serverAdapterA_1_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_1_outData_outData$wget,
		pat0_metaBram_serverAdapterA_2_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_2_outData_outData$wget,
		pat0_metaBram_serverAdapterA_3_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_3_outData_outData$wget,
		pat0_metaBram_serverAdapterA_outData_enqData$wget,
		pat0_metaBram_serverAdapterA_outData_outData$wget,
		pat0_metaBram_serverAdapterB_1_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_1_outData_outData$wget,
		pat0_metaBram_serverAdapterB_2_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_2_outData_outData$wget,
		pat0_metaBram_serverAdapterB_3_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_3_outData_outData$wget,
		pat0_metaBram_serverAdapterB_outData_enqData$wget,
		pat0_metaBram_serverAdapterB_outData_outData$wget,
		pat0_statusReg_w$wget,
		pat0_wci_wci_Es_mAddr_w$wget,
		pat0_wci_wci_Es_mData_w$wget,
		sma0_wci_wci_Es_mAddr_w$wget,
		sma0_wci_wci_Es_mData_w$wget,
		sma0_wmi_Em_sData_w$wget,
		sma0_wmi_mFlagF_x_wire$wget,
		sma0_wmi_reqF_x_wire$wget,
		sma0_wsi_Es_mData_w$wget;
  wire [15 : 0] pat0_metaPtr_modulus_bw$wget;
  wire [11 : 0] sma0_fabRespCredit_acc_v1$wget,
		sma0_fabRespCredit_acc_v2$wget,
		sma0_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] sma0_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] pat0_wci_wci_Es_mByteEn_w$wget,
	       sma0_wci_wci_Es_mByteEn_w$wget,
	       sma0_wsi_Es_mByteEn_w$wget;
  wire [2 : 0] pat0_dataBram_serverAdapterA_cnt_1$wget,
	       pat0_dataBram_serverAdapterA_cnt_2$wget,
	       pat0_dataBram_serverAdapterA_cnt_3$wget,
	       pat0_dataBram_serverAdapterB_cnt_1$wget,
	       pat0_dataBram_serverAdapterB_cnt_2$wget,
	       pat0_dataBram_serverAdapterB_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_1_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_1_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_1_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_2_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_2_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_2_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_3_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_3_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_3_cnt_3$wget,
	       pat0_metaBram_serverAdapterA_cnt_1$wget,
	       pat0_metaBram_serverAdapterA_cnt_2$wget,
	       pat0_metaBram_serverAdapterA_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_1_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_1_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_1_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_2_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_2_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_2_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_3_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_3_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_3_cnt_3$wget,
	       pat0_metaBram_serverAdapterB_cnt_1$wget,
	       pat0_metaBram_serverAdapterB_cnt_2$wget,
	       pat0_metaBram_serverAdapterB_cnt_3$wget,
	       pat0_wci_wci_Es_mCmd_w$wget,
	       pat0_wci_wslv_wEdge$wget,
	       sma0_wci_wci_Es_mCmd_w$wget,
	       sma0_wci_wslv_wEdge$wget,
	       sma0_wsi_Es_mCmd_w$wget;
  wire [1 : 0] pat0_dataBram_serverAdapterA_s1_1$wget,
	       pat0_dataBram_serverAdapterA_writeWithResp$wget,
	       pat0_dataBram_serverAdapterB_s1_1$wget,
	       pat0_dataBram_serverAdapterB_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_1_s1_1$wget,
	       pat0_metaBram_serverAdapterA_1_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_2_s1_1$wget,
	       pat0_metaBram_serverAdapterA_2_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_3_s1_1$wget,
	       pat0_metaBram_serverAdapterA_3_writeWithResp$wget,
	       pat0_metaBram_serverAdapterA_s1_1$wget,
	       pat0_metaBram_serverAdapterA_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_1_s1_1$wget,
	       pat0_metaBram_serverAdapterB_1_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_2_s1_1$wget,
	       pat0_metaBram_serverAdapterB_2_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_3_s1_1$wget,
	       pat0_metaBram_serverAdapterB_3_writeWithResp$wget,
	       pat0_metaBram_serverAdapterB_s1_1$wget,
	       pat0_metaBram_serverAdapterB_writeWithResp$wget,
	       sma0_wmi_Em_sResp_w$wget;
  wire pat0_dataBram_serverAdapterA_cnt_1$whas,
       pat0_dataBram_serverAdapterA_cnt_2$whas,
       pat0_dataBram_serverAdapterA_cnt_3$whas,
       pat0_dataBram_serverAdapterA_outData_deqCalled$whas,
       pat0_dataBram_serverAdapterA_outData_enqData$whas,
       pat0_dataBram_serverAdapterA_outData_outData$whas,
       pat0_dataBram_serverAdapterA_s1_1$whas,
       pat0_dataBram_serverAdapterA_writeWithResp$whas,
       pat0_dataBram_serverAdapterB_cnt_1$whas,
       pat0_dataBram_serverAdapterB_cnt_2$whas,
       pat0_dataBram_serverAdapterB_cnt_3$whas,
       pat0_dataBram_serverAdapterB_outData_deqCalled$whas,
       pat0_dataBram_serverAdapterB_outData_enqData$whas,
       pat0_dataBram_serverAdapterB_outData_outData$whas,
       pat0_dataBram_serverAdapterB_s1_1$whas,
       pat0_dataBram_serverAdapterB_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_1_cnt_1$whas,
       pat0_metaBram_serverAdapterA_1_cnt_2$whas,
       pat0_metaBram_serverAdapterA_1_cnt_3$whas,
       pat0_metaBram_serverAdapterA_1_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_1_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_1_outData_outData$whas,
       pat0_metaBram_serverAdapterA_1_s1_1$whas,
       pat0_metaBram_serverAdapterA_1_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_2_cnt_1$whas,
       pat0_metaBram_serverAdapterA_2_cnt_2$whas,
       pat0_metaBram_serverAdapterA_2_cnt_3$whas,
       pat0_metaBram_serverAdapterA_2_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_2_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_2_outData_outData$whas,
       pat0_metaBram_serverAdapterA_2_s1_1$whas,
       pat0_metaBram_serverAdapterA_2_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_3_cnt_1$whas,
       pat0_metaBram_serverAdapterA_3_cnt_2$whas,
       pat0_metaBram_serverAdapterA_3_cnt_3$whas,
       pat0_metaBram_serverAdapterA_3_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_3_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_3_outData_outData$whas,
       pat0_metaBram_serverAdapterA_3_s1_1$whas,
       pat0_metaBram_serverAdapterA_3_writeWithResp$whas,
       pat0_metaBram_serverAdapterA_cnt_1$whas,
       pat0_metaBram_serverAdapterA_cnt_2$whas,
       pat0_metaBram_serverAdapterA_cnt_3$whas,
       pat0_metaBram_serverAdapterA_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterA_outData_enqData$whas,
       pat0_metaBram_serverAdapterA_outData_outData$whas,
       pat0_metaBram_serverAdapterA_s1_1$whas,
       pat0_metaBram_serverAdapterA_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_1_cnt_1$whas,
       pat0_metaBram_serverAdapterB_1_cnt_2$whas,
       pat0_metaBram_serverAdapterB_1_cnt_3$whas,
       pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_1_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_1_outData_outData$whas,
       pat0_metaBram_serverAdapterB_1_s1_1$whas,
       pat0_metaBram_serverAdapterB_1_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_2_cnt_1$whas,
       pat0_metaBram_serverAdapterB_2_cnt_2$whas,
       pat0_metaBram_serverAdapterB_2_cnt_3$whas,
       pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_2_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_2_outData_outData$whas,
       pat0_metaBram_serverAdapterB_2_s1_1$whas,
       pat0_metaBram_serverAdapterB_2_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_3_cnt_1$whas,
       pat0_metaBram_serverAdapterB_3_cnt_2$whas,
       pat0_metaBram_serverAdapterB_3_cnt_3$whas,
       pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_3_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_3_outData_outData$whas,
       pat0_metaBram_serverAdapterB_3_s1_1$whas,
       pat0_metaBram_serverAdapterB_3_writeWithResp$whas,
       pat0_metaBram_serverAdapterB_cnt_1$whas,
       pat0_metaBram_serverAdapterB_cnt_2$whas,
       pat0_metaBram_serverAdapterB_cnt_3$whas,
       pat0_metaBram_serverAdapterB_outData_deqCalled$whas,
       pat0_metaBram_serverAdapterB_outData_enqData$whas,
       pat0_metaBram_serverAdapterB_outData_outData$whas,
       pat0_metaBram_serverAdapterB_s1_1$whas,
       pat0_metaBram_serverAdapterB_writeWithResp$whas,
       pat0_metaPtr_decAction$whas,
       pat0_metaPtr_incAction$whas,
       pat0_statusReg_w$whas,
       pat0_wci_wci_Es_mAddrSpace_w$wget,
       pat0_wci_wci_Es_mAddrSpace_w$whas,
       pat0_wci_wci_Es_mAddr_w$whas,
       pat0_wci_wci_Es_mByteEn_w$whas,
       pat0_wci_wci_Es_mCmd_w$whas,
       pat0_wci_wci_Es_mData_w$whas,
       pat0_wci_wslv_ctlAckReg_1$wget,
       pat0_wci_wslv_ctlAckReg_1$whas,
       pat0_wci_wslv_reqF_r_clr$whas,
       pat0_wci_wslv_reqF_r_deq$whas,
       pat0_wci_wslv_reqF_r_enq$whas,
       pat0_wci_wslv_respF_dequeueing$whas,
       pat0_wci_wslv_respF_enqueueing$whas,
       pat0_wci_wslv_respF_x_wire$whas,
       pat0_wci_wslv_sFlagReg_1$wget,
       pat0_wci_wslv_sFlagReg_1$whas,
       pat0_wci_wslv_sThreadBusy_pw$whas,
       pat0_wci_wslv_wEdge$whas,
       pat0_wci_wslv_wciReq$whas,
       pat0_wci_wslv_wci_cfrd_pw$whas,
       pat0_wci_wslv_wci_cfwr_pw$whas,
       pat0_wci_wslv_wci_ctrl_pw$whas,
       pat0_wsiM_operateD_1$wget,
       pat0_wsiM_operateD_1$whas,
       pat0_wsiM_peerIsReady_1$wget,
       pat0_wsiM_peerIsReady_1$whas,
       pat0_wsiM_reqFifo_dequeueing$whas,
       pat0_wsiM_reqFifo_enqueueing$whas,
       pat0_wsiM_reqFifo_x_wire$whas,
       pat0_wsiM_sThreadBusy_pw$whas,
       sma0_fabRespCredit_acc_v1$whas,
       sma0_fabRespCredit_acc_v2$whas,
       sma0_mesgPreRequest_1$wget,
       sma0_mesgPreRequest_1$whas,
       sma0_respF_pwDequeue$whas,
       sma0_respF_pwEnqueue$whas,
       sma0_respF_wDataIn$whas,
       sma0_respF_wDataOut$whas,
       sma0_wci_wci_Es_mAddrSpace_w$wget,
       sma0_wci_wci_Es_mAddrSpace_w$whas,
       sma0_wci_wci_Es_mAddr_w$whas,
       sma0_wci_wci_Es_mByteEn_w$whas,
       sma0_wci_wci_Es_mCmd_w$whas,
       sma0_wci_wci_Es_mData_w$whas,
       sma0_wci_wslv_ctlAckReg_1$wget,
       sma0_wci_wslv_ctlAckReg_1$whas,
       sma0_wci_wslv_reqF_r_clr$whas,
       sma0_wci_wslv_reqF_r_deq$whas,
       sma0_wci_wslv_reqF_r_enq$whas,
       sma0_wci_wslv_respF_dequeueing$whas,
       sma0_wci_wslv_respF_enqueueing$whas,
       sma0_wci_wslv_respF_x_wire$whas,
       sma0_wci_wslv_sFlagReg_1$wget,
       sma0_wci_wslv_sFlagReg_1$whas,
       sma0_wci_wslv_sThreadBusy_pw$whas,
       sma0_wci_wslv_wEdge$whas,
       sma0_wci_wslv_wciReq$whas,
       sma0_wci_wslv_wci_cfrd_pw$whas,
       sma0_wci_wslv_wci_cfwr_pw$whas,
       sma0_wci_wslv_wci_ctrl_pw$whas,
       sma0_wmi_Em_sData_w$whas,
       sma0_wmi_Em_sResp_w$whas,
       sma0_wmi_dhF_dequeueing$whas,
       sma0_wmi_dhF_enqueueing$whas,
       sma0_wmi_dhF_x_wire$whas,
       sma0_wmi_mFlagF_dequeueing$whas,
       sma0_wmi_mFlagF_enqueueing$whas,
       sma0_wmi_mFlagF_x_wire$whas,
       sma0_wmi_operateD_1$wget,
       sma0_wmi_operateD_1$whas,
       sma0_wmi_peerIsReady_1$wget,
       sma0_wmi_peerIsReady_1$whas,
       sma0_wmi_reqF_dequeueing$whas,
       sma0_wmi_reqF_enqueueing$whas,
       sma0_wmi_reqF_x_wire$whas,
       sma0_wmi_sDataThreadBusy_d_1$wget,
       sma0_wmi_sDataThreadBusy_d_1$whas,
       sma0_wmi_sThreadBusy_d_1$wget,
       sma0_wmi_sThreadBusy_d_1$whas,
       sma0_wmi_wmiResponse$whas,
       sma0_wsiM_operateD_1$wget,
       sma0_wsiM_operateD_1$whas,
       sma0_wsiM_peerIsReady_1$wget,
       sma0_wsiM_peerIsReady_1$whas,
       sma0_wsiM_reqFifo_dequeueing$whas,
       sma0_wsiM_reqFifo_enqueueing$whas,
       sma0_wsiM_reqFifo_x_wire$whas,
       sma0_wsiM_sThreadBusy_pw$whas,
       sma0_wsiS_operateD_1$wget,
       sma0_wsiS_operateD_1$whas,
       sma0_wsiS_peerIsReady_1$wget,
       sma0_wsiS_peerIsReady_1$whas,
       sma0_wsiS_reqFifo_doResetClr$whas,
       sma0_wsiS_reqFifo_doResetDeq$whas,
       sma0_wsiS_reqFifo_doResetEnq$whas,
       sma0_wsiS_reqFifo_r_clr$whas,
       sma0_wsiS_reqFifo_r_deq$whas,
       sma0_wsiS_reqFifo_r_enq$whas,
       sma0_wsiS_sThreadBusy_dw$wget,
       sma0_wsiS_sThreadBusy_dw$whas,
       sma0_wsiS_wsiReq$whas,
       sma0_wsi_Es_mBurstLength_w$whas,
       sma0_wsi_Es_mBurstPrecise_w$whas,
       sma0_wsi_Es_mByteEn_w$whas,
       sma0_wsi_Es_mCmd_w$whas,
       sma0_wsi_Es_mDataInfo_w$whas,
       sma0_wsi_Es_mData_w$whas,
       sma0_wsi_Es_mReqInfo_w$whas,
       sma0_wsi_Es_mReqLast_w$whas;

  // register pat0_bytesRemain
  reg [31 : 0] pat0_bytesRemain;
  wire [31 : 0] pat0_bytesRemain$D_IN;
  wire pat0_bytesRemain$EN;

  // register pat0_controlReg
  reg [31 : 0] pat0_controlReg;
  wire [31 : 0] pat0_controlReg$D_IN;
  wire pat0_controlReg$EN;

  // register pat0_dataBram_serverAdapterA_cnt
  reg [2 : 0] pat0_dataBram_serverAdapterA_cnt;
  wire [2 : 0] pat0_dataBram_serverAdapterA_cnt$D_IN;
  wire pat0_dataBram_serverAdapterA_cnt$EN;

  // register pat0_dataBram_serverAdapterA_s1
  reg [1 : 0] pat0_dataBram_serverAdapterA_s1;
  wire [1 : 0] pat0_dataBram_serverAdapterA_s1$D_IN;
  wire pat0_dataBram_serverAdapterA_s1$EN;

  // register pat0_dataBram_serverAdapterB_cnt
  reg [2 : 0] pat0_dataBram_serverAdapterB_cnt;
  wire [2 : 0] pat0_dataBram_serverAdapterB_cnt$D_IN;
  wire pat0_dataBram_serverAdapterB_cnt$EN;

  // register pat0_dataBram_serverAdapterB_s1
  reg [1 : 0] pat0_dataBram_serverAdapterB_s1;
  wire [1 : 0] pat0_dataBram_serverAdapterB_s1$D_IN;
  wire pat0_dataBram_serverAdapterB_s1$EN;

  // register pat0_dataCount
  reg [31 : 0] pat0_dataCount;
  reg [31 : 0] pat0_dataCount$D_IN;
  wire pat0_dataCount$EN;

  // register pat0_dataPtr
  reg [31 : 0] pat0_dataPtr;
  wire [31 : 0] pat0_dataPtr$D_IN;
  wire pat0_dataPtr$EN;

  // register pat0_doZLM
  reg pat0_doZLM;
  wire pat0_doZLM$D_IN, pat0_doZLM$EN;

  // register pat0_isFirst
  reg pat0_isFirst;
  wire pat0_isFirst$D_IN, pat0_isFirst$EN;

  // register pat0_mesgCount
  reg [31 : 0] pat0_mesgCount;
  reg [31 : 0] pat0_mesgCount$D_IN;
  wire pat0_mesgCount$EN;

  // register pat0_mesgLengthSoFar
  reg [13 : 0] pat0_mesgLengthSoFar;
  wire [13 : 0] pat0_mesgLengthSoFar$D_IN;
  wire pat0_mesgLengthSoFar$EN;

  // register pat0_mesgRemain
  reg [31 : 0] pat0_mesgRemain;
  wire [31 : 0] pat0_mesgRemain$D_IN;
  wire pat0_mesgRemain$EN;

  // register pat0_metaBram_serverAdapterA_1_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_1_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_1_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_1_cnt$EN;

  // register pat0_metaBram_serverAdapterA_1_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_1_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_1_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_1_s1$EN;

  // register pat0_metaBram_serverAdapterA_2_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_2_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_2_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_2_cnt$EN;

  // register pat0_metaBram_serverAdapterA_2_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_2_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_2_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_2_s1$EN;

  // register pat0_metaBram_serverAdapterA_3_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_3_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_3_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_3_cnt$EN;

  // register pat0_metaBram_serverAdapterA_3_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_3_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_3_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_3_s1$EN;

  // register pat0_metaBram_serverAdapterA_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterA_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterA_cnt$D_IN;
  wire pat0_metaBram_serverAdapterA_cnt$EN;

  // register pat0_metaBram_serverAdapterA_s1
  reg [1 : 0] pat0_metaBram_serverAdapterA_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterA_s1$D_IN;
  wire pat0_metaBram_serverAdapterA_s1$EN;

  // register pat0_metaBram_serverAdapterB_1_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_1_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_1_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_1_cnt$EN;

  // register pat0_metaBram_serverAdapterB_1_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_1_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_1_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_1_s1$EN;

  // register pat0_metaBram_serverAdapterB_2_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_2_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_2_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_2_cnt$EN;

  // register pat0_metaBram_serverAdapterB_2_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_2_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_2_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_2_s1$EN;

  // register pat0_metaBram_serverAdapterB_3_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_3_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_3_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_3_cnt$EN;

  // register pat0_metaBram_serverAdapterB_3_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_3_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_3_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_3_s1$EN;

  // register pat0_metaBram_serverAdapterB_cnt
  reg [2 : 0] pat0_metaBram_serverAdapterB_cnt;
  wire [2 : 0] pat0_metaBram_serverAdapterB_cnt$D_IN;
  wire pat0_metaBram_serverAdapterB_cnt$EN;

  // register pat0_metaBram_serverAdapterB_s1
  reg [1 : 0] pat0_metaBram_serverAdapterB_s1;
  wire [1 : 0] pat0_metaBram_serverAdapterB_s1$D_IN;
  wire pat0_metaBram_serverAdapterB_s1$EN;

  // register pat0_metaPtr_modulus
  reg [15 : 0] pat0_metaPtr_modulus;
  wire [15 : 0] pat0_metaPtr_modulus$D_IN;
  wire pat0_metaPtr_modulus$EN;

  // register pat0_metaPtr_value
  reg [15 : 0] pat0_metaPtr_value;
  wire [15 : 0] pat0_metaPtr_value$D_IN;
  wire pat0_metaPtr_value$EN;

  // register pat0_splitReadInFlight
  reg pat0_splitReadInFlight;
  wire pat0_splitReadInFlight$D_IN, pat0_splitReadInFlight$EN;

  // register pat0_thisLength
  reg [31 : 0] pat0_thisLength;
  wire [31 : 0] pat0_thisLength$D_IN;
  wire pat0_thisLength$EN;

  // register pat0_thisOpcode
  reg [31 : 0] pat0_thisOpcode;
  wire [31 : 0] pat0_thisOpcode$D_IN;
  wire pat0_thisOpcode$EN;

  // register pat0_thisTLS
  reg [31 : 0] pat0_thisTLS;
  wire [31 : 0] pat0_thisTLS$D_IN;
  wire pat0_thisTLS$EN;

  // register pat0_thisTMS
  reg [31 : 0] pat0_thisTMS;
  wire [31 : 0] pat0_thisTMS$D_IN;
  wire pat0_thisTMS$EN;

  // register pat0_unrollCnt
  reg [15 : 0] pat0_unrollCnt;
  wire [15 : 0] pat0_unrollCnt$D_IN;
  wire pat0_unrollCnt$EN;

  // register pat0_wci_wslv_cEdge
  reg [2 : 0] pat0_wci_wslv_cEdge;
  wire [2 : 0] pat0_wci_wslv_cEdge$D_IN;
  wire pat0_wci_wslv_cEdge$EN;

  // register pat0_wci_wslv_cState
  reg [2 : 0] pat0_wci_wslv_cState;
  wire [2 : 0] pat0_wci_wslv_cState$D_IN;
  wire pat0_wci_wslv_cState$EN;

  // register pat0_wci_wslv_ctlAckReg
  reg pat0_wci_wslv_ctlAckReg;
  wire pat0_wci_wslv_ctlAckReg$D_IN, pat0_wci_wslv_ctlAckReg$EN;

  // register pat0_wci_wslv_ctlOpActive
  reg pat0_wci_wslv_ctlOpActive;
  wire pat0_wci_wslv_ctlOpActive$D_IN, pat0_wci_wslv_ctlOpActive$EN;

  // register pat0_wci_wslv_illegalEdge
  reg pat0_wci_wslv_illegalEdge;
  wire pat0_wci_wslv_illegalEdge$D_IN, pat0_wci_wslv_illegalEdge$EN;

  // register pat0_wci_wslv_isReset_isInReset
  reg pat0_wci_wslv_isReset_isInReset;
  wire pat0_wci_wslv_isReset_isInReset$D_IN,
       pat0_wci_wslv_isReset_isInReset$EN;

  // register pat0_wci_wslv_nState
  reg [2 : 0] pat0_wci_wslv_nState;
  reg [2 : 0] pat0_wci_wslv_nState$D_IN;
  wire pat0_wci_wslv_nState$EN;

  // register pat0_wci_wslv_reqF_countReg
  reg [1 : 0] pat0_wci_wslv_reqF_countReg;
  wire [1 : 0] pat0_wci_wslv_reqF_countReg$D_IN;
  wire pat0_wci_wslv_reqF_countReg$EN;

  // register pat0_wci_wslv_respF_c_r
  reg [1 : 0] pat0_wci_wslv_respF_c_r;
  wire [1 : 0] pat0_wci_wslv_respF_c_r$D_IN;
  wire pat0_wci_wslv_respF_c_r$EN;

  // register pat0_wci_wslv_respF_q_0
  reg [33 : 0] pat0_wci_wslv_respF_q_0;
  reg [33 : 0] pat0_wci_wslv_respF_q_0$D_IN;
  wire pat0_wci_wslv_respF_q_0$EN;

  // register pat0_wci_wslv_respF_q_1
  reg [33 : 0] pat0_wci_wslv_respF_q_1;
  reg [33 : 0] pat0_wci_wslv_respF_q_1$D_IN;
  wire pat0_wci_wslv_respF_q_1$EN;

  // register pat0_wci_wslv_sFlagReg
  reg pat0_wci_wslv_sFlagReg;
  wire pat0_wci_wslv_sFlagReg$D_IN, pat0_wci_wslv_sFlagReg$EN;

  // register pat0_wci_wslv_sThreadBusy_d
  reg pat0_wci_wslv_sThreadBusy_d;
  wire pat0_wci_wslv_sThreadBusy_d$D_IN, pat0_wci_wslv_sThreadBusy_d$EN;

  // register pat0_wsiM_burstKind
  reg [1 : 0] pat0_wsiM_burstKind;
  wire [1 : 0] pat0_wsiM_burstKind$D_IN;
  wire pat0_wsiM_burstKind$EN;

  // register pat0_wsiM_errorSticky
  reg pat0_wsiM_errorSticky;
  wire pat0_wsiM_errorSticky$D_IN, pat0_wsiM_errorSticky$EN;

  // register pat0_wsiM_iMesgCount
  reg [31 : 0] pat0_wsiM_iMesgCount;
  wire [31 : 0] pat0_wsiM_iMesgCount$D_IN;
  wire pat0_wsiM_iMesgCount$EN;

  // register pat0_wsiM_isReset_isInReset
  reg pat0_wsiM_isReset_isInReset;
  wire pat0_wsiM_isReset_isInReset$D_IN, pat0_wsiM_isReset_isInReset$EN;

  // register pat0_wsiM_operateD
  reg pat0_wsiM_operateD;
  wire pat0_wsiM_operateD$D_IN, pat0_wsiM_operateD$EN;

  // register pat0_wsiM_pMesgCount
  reg [31 : 0] pat0_wsiM_pMesgCount;
  wire [31 : 0] pat0_wsiM_pMesgCount$D_IN;
  wire pat0_wsiM_pMesgCount$EN;

  // register pat0_wsiM_peerIsReady
  reg pat0_wsiM_peerIsReady;
  wire pat0_wsiM_peerIsReady$D_IN, pat0_wsiM_peerIsReady$EN;

  // register pat0_wsiM_reqFifo_c_r
  reg [1 : 0] pat0_wsiM_reqFifo_c_r;
  wire [1 : 0] pat0_wsiM_reqFifo_c_r$D_IN;
  wire pat0_wsiM_reqFifo_c_r$EN;

  // register pat0_wsiM_reqFifo_q_0
  reg [60 : 0] pat0_wsiM_reqFifo_q_0;
  reg [60 : 0] pat0_wsiM_reqFifo_q_0$D_IN;
  wire pat0_wsiM_reqFifo_q_0$EN;

  // register pat0_wsiM_reqFifo_q_1
  reg [60 : 0] pat0_wsiM_reqFifo_q_1;
  reg [60 : 0] pat0_wsiM_reqFifo_q_1$D_IN;
  wire pat0_wsiM_reqFifo_q_1$EN;

  // register pat0_wsiM_sThreadBusy_d
  reg pat0_wsiM_sThreadBusy_d;
  wire pat0_wsiM_sThreadBusy_d$D_IN, pat0_wsiM_sThreadBusy_d$EN;

  // register pat0_wsiM_statusR
  reg [7 : 0] pat0_wsiM_statusR;
  wire [7 : 0] pat0_wsiM_statusR$D_IN;
  wire pat0_wsiM_statusR$EN;

  // register pat0_wsiM_tBusyCount
  reg [31 : 0] pat0_wsiM_tBusyCount;
  wire [31 : 0] pat0_wsiM_tBusyCount$D_IN;
  wire pat0_wsiM_tBusyCount$EN;

  // register pat0_wsiM_trafficSticky
  reg pat0_wsiM_trafficSticky;
  wire pat0_wsiM_trafficSticky$D_IN, pat0_wsiM_trafficSticky$EN;

  // register sma0_abortCount
  reg [31 : 0] sma0_abortCount;
  wire [31 : 0] sma0_abortCount$D_IN;
  wire sma0_abortCount$EN;

  // register sma0_doAbort
  reg sma0_doAbort;
  wire sma0_doAbort$D_IN, sma0_doAbort$EN;

  // register sma0_endOfMessage
  reg sma0_endOfMessage;
  wire sma0_endOfMessage$D_IN, sma0_endOfMessage$EN;

  // register sma0_errCount
  reg [31 : 0] sma0_errCount;
  wire [31 : 0] sma0_errCount$D_IN;
  wire sma0_errCount$EN;

  // register sma0_fabRespCredit_value
  reg [11 : 0] sma0_fabRespCredit_value;
  wire [11 : 0] sma0_fabRespCredit_value$D_IN;
  wire sma0_fabRespCredit_value$EN;

  // register sma0_fabWordsCurReq
  reg [13 : 0] sma0_fabWordsCurReq;
  wire [13 : 0] sma0_fabWordsCurReq$D_IN;
  wire sma0_fabWordsCurReq$EN;

  // register sma0_fabWordsRemain
  reg [13 : 0] sma0_fabWordsRemain;
  wire [13 : 0] sma0_fabWordsRemain$D_IN;
  wire sma0_fabWordsRemain$EN;

  // register sma0_firstMsgReq
  reg sma0_firstMsgReq;
  wire sma0_firstMsgReq$D_IN, sma0_firstMsgReq$EN;

  // register sma0_lastMesg
  reg [31 : 0] sma0_lastMesg;
  wire [31 : 0] sma0_lastMesg$D_IN;
  wire sma0_lastMesg$EN;

  // register sma0_mesgCount
  reg [31 : 0] sma0_mesgCount;
  reg [31 : 0] sma0_mesgCount$D_IN;
  wire sma0_mesgCount$EN;

  // register sma0_mesgLengthSoFar
  reg [13 : 0] sma0_mesgLengthSoFar;
  wire [13 : 0] sma0_mesgLengthSoFar$D_IN;
  wire sma0_mesgLengthSoFar$EN;

  // register sma0_mesgPreRequest
  reg sma0_mesgPreRequest;
  wire sma0_mesgPreRequest$D_IN, sma0_mesgPreRequest$EN;

  // register sma0_mesgReqAddr
  reg [13 : 0] sma0_mesgReqAddr;
  wire [13 : 0] sma0_mesgReqAddr$D_IN;
  wire sma0_mesgReqAddr$EN;

  // register sma0_mesgReqOK
  reg sma0_mesgReqOK;
  wire sma0_mesgReqOK$D_IN, sma0_mesgReqOK$EN;

  // register sma0_opcode
  reg [8 : 0] sma0_opcode;
  wire [8 : 0] sma0_opcode$D_IN;
  wire sma0_opcode$EN;

  // register sma0_readyToPush
  reg sma0_readyToPush;
  wire sma0_readyToPush$D_IN, sma0_readyToPush$EN;

  // register sma0_readyToRequest
  reg sma0_readyToRequest;
  wire sma0_readyToRequest$D_IN, sma0_readyToRequest$EN;

  // register sma0_respF_rCache
  reg [73 : 0] sma0_respF_rCache;
  wire [73 : 0] sma0_respF_rCache$D_IN;
  wire sma0_respF_rCache$EN;

  // register sma0_respF_rRdPtr
  reg [11 : 0] sma0_respF_rRdPtr;
  wire [11 : 0] sma0_respF_rRdPtr$D_IN;
  wire sma0_respF_rRdPtr$EN;

  // register sma0_respF_rWrPtr
  reg [11 : 0] sma0_respF_rWrPtr;
  wire [11 : 0] sma0_respF_rWrPtr$D_IN;
  wire sma0_respF_rWrPtr$EN;

  // register sma0_smaCtrl
  reg [31 : 0] sma0_smaCtrl;
  wire [31 : 0] sma0_smaCtrl$D_IN;
  wire sma0_smaCtrl$EN;

  // register sma0_thisMesg
  reg [31 : 0] sma0_thisMesg;
  reg [31 : 0] sma0_thisMesg$D_IN;
  wire sma0_thisMesg$EN;

  // register sma0_unrollCnt
  reg [15 : 0] sma0_unrollCnt;
  wire [15 : 0] sma0_unrollCnt$D_IN;
  wire sma0_unrollCnt$EN;

  // register sma0_valExpect
  reg [31 : 0] sma0_valExpect;
  wire [31 : 0] sma0_valExpect$D_IN;
  wire sma0_valExpect$EN;

  // register sma0_wci_wslv_cEdge
  reg [2 : 0] sma0_wci_wslv_cEdge;
  wire [2 : 0] sma0_wci_wslv_cEdge$D_IN;
  wire sma0_wci_wslv_cEdge$EN;

  // register sma0_wci_wslv_cState
  reg [2 : 0] sma0_wci_wslv_cState;
  wire [2 : 0] sma0_wci_wslv_cState$D_IN;
  wire sma0_wci_wslv_cState$EN;

  // register sma0_wci_wslv_ctlAckReg
  reg sma0_wci_wslv_ctlAckReg;
  wire sma0_wci_wslv_ctlAckReg$D_IN, sma0_wci_wslv_ctlAckReg$EN;

  // register sma0_wci_wslv_ctlOpActive
  reg sma0_wci_wslv_ctlOpActive;
  wire sma0_wci_wslv_ctlOpActive$D_IN, sma0_wci_wslv_ctlOpActive$EN;

  // register sma0_wci_wslv_illegalEdge
  reg sma0_wci_wslv_illegalEdge;
  wire sma0_wci_wslv_illegalEdge$D_IN, sma0_wci_wslv_illegalEdge$EN;

  // register sma0_wci_wslv_isReset_isInReset
  reg sma0_wci_wslv_isReset_isInReset;
  wire sma0_wci_wslv_isReset_isInReset$D_IN,
       sma0_wci_wslv_isReset_isInReset$EN;

  // register sma0_wci_wslv_nState
  reg [2 : 0] sma0_wci_wslv_nState;
  reg [2 : 0] sma0_wci_wslv_nState$D_IN;
  wire sma0_wci_wslv_nState$EN;

  // register sma0_wci_wslv_reqF_countReg
  reg [1 : 0] sma0_wci_wslv_reqF_countReg;
  wire [1 : 0] sma0_wci_wslv_reqF_countReg$D_IN;
  wire sma0_wci_wslv_reqF_countReg$EN;

  // register sma0_wci_wslv_respF_c_r
  reg [1 : 0] sma0_wci_wslv_respF_c_r;
  wire [1 : 0] sma0_wci_wslv_respF_c_r$D_IN;
  wire sma0_wci_wslv_respF_c_r$EN;

  // register sma0_wci_wslv_respF_q_0
  reg [33 : 0] sma0_wci_wslv_respF_q_0;
  reg [33 : 0] sma0_wci_wslv_respF_q_0$D_IN;
  wire sma0_wci_wslv_respF_q_0$EN;

  // register sma0_wci_wslv_respF_q_1
  reg [33 : 0] sma0_wci_wslv_respF_q_1;
  reg [33 : 0] sma0_wci_wslv_respF_q_1$D_IN;
  wire sma0_wci_wslv_respF_q_1$EN;

  // register sma0_wci_wslv_sFlagReg
  reg sma0_wci_wslv_sFlagReg;
  wire sma0_wci_wslv_sFlagReg$D_IN, sma0_wci_wslv_sFlagReg$EN;

  // register sma0_wci_wslv_sThreadBusy_d
  reg sma0_wci_wslv_sThreadBusy_d;
  wire sma0_wci_wslv_sThreadBusy_d$D_IN, sma0_wci_wslv_sThreadBusy_d$EN;

  // register sma0_wmi_busyWithMessage
  reg sma0_wmi_busyWithMessage;
  wire sma0_wmi_busyWithMessage$D_IN, sma0_wmi_busyWithMessage$EN;

  // register sma0_wmi_dhF_c_r
  reg [1 : 0] sma0_wmi_dhF_c_r;
  wire [1 : 0] sma0_wmi_dhF_c_r$D_IN;
  wire sma0_wmi_dhF_c_r$EN;

  // register sma0_wmi_dhF_q_0
  reg [37 : 0] sma0_wmi_dhF_q_0;
  reg [37 : 0] sma0_wmi_dhF_q_0$D_IN;
  wire sma0_wmi_dhF_q_0$EN;

  // register sma0_wmi_dhF_q_1
  reg [37 : 0] sma0_wmi_dhF_q_1;
  reg [37 : 0] sma0_wmi_dhF_q_1$D_IN;
  wire sma0_wmi_dhF_q_1$EN;

  // register sma0_wmi_errorSticky
  reg sma0_wmi_errorSticky;
  wire sma0_wmi_errorSticky$D_IN, sma0_wmi_errorSticky$EN;

  // register sma0_wmi_isReset_isInReset
  reg sma0_wmi_isReset_isInReset;
  wire sma0_wmi_isReset_isInReset$D_IN, sma0_wmi_isReset_isInReset$EN;

  // register sma0_wmi_mFlagF_c_r
  reg [1 : 0] sma0_wmi_mFlagF_c_r;
  wire [1 : 0] sma0_wmi_mFlagF_c_r$D_IN;
  wire sma0_wmi_mFlagF_c_r$EN;

  // register sma0_wmi_mFlagF_q_0
  reg [31 : 0] sma0_wmi_mFlagF_q_0;
  reg [31 : 0] sma0_wmi_mFlagF_q_0$D_IN;
  wire sma0_wmi_mFlagF_q_0$EN;

  // register sma0_wmi_mFlagF_q_1
  reg [31 : 0] sma0_wmi_mFlagF_q_1;
  reg [31 : 0] sma0_wmi_mFlagF_q_1$D_IN;
  wire sma0_wmi_mFlagF_q_1$EN;

  // register sma0_wmi_operateD
  reg sma0_wmi_operateD;
  wire sma0_wmi_operateD$D_IN, sma0_wmi_operateD$EN;

  // register sma0_wmi_peerIsReady
  reg sma0_wmi_peerIsReady;
  wire sma0_wmi_peerIsReady$D_IN, sma0_wmi_peerIsReady$EN;

  // register sma0_wmi_reqF_c_r
  reg [1 : 0] sma0_wmi_reqF_c_r;
  wire [1 : 0] sma0_wmi_reqF_c_r$D_IN;
  wire sma0_wmi_reqF_c_r$EN;

  // register sma0_wmi_reqF_q_0
  reg [31 : 0] sma0_wmi_reqF_q_0;
  reg [31 : 0] sma0_wmi_reqF_q_0$D_IN;
  wire sma0_wmi_reqF_q_0$EN;

  // register sma0_wmi_reqF_q_1
  reg [31 : 0] sma0_wmi_reqF_q_1;
  reg [31 : 0] sma0_wmi_reqF_q_1$D_IN;
  wire sma0_wmi_reqF_q_1$EN;

  // register sma0_wmi_sDataThreadBusy_d
  reg sma0_wmi_sDataThreadBusy_d;
  wire sma0_wmi_sDataThreadBusy_d$D_IN, sma0_wmi_sDataThreadBusy_d$EN;

  // register sma0_wmi_sFlagReg
  reg [31 : 0] sma0_wmi_sFlagReg;
  wire [31 : 0] sma0_wmi_sFlagReg$D_IN;
  wire sma0_wmi_sFlagReg$EN;

  // register sma0_wmi_sThreadBusy_d
  reg sma0_wmi_sThreadBusy_d;
  wire sma0_wmi_sThreadBusy_d$D_IN, sma0_wmi_sThreadBusy_d$EN;

  // register sma0_wmi_statusR
  reg [7 : 0] sma0_wmi_statusR;
  wire [7 : 0] sma0_wmi_statusR$D_IN;
  wire sma0_wmi_statusR$EN;

  // register sma0_wmi_trafficSticky
  reg sma0_wmi_trafficSticky;
  wire sma0_wmi_trafficSticky$D_IN, sma0_wmi_trafficSticky$EN;

  // register sma0_wmwtBeginCount
  reg [31 : 0] sma0_wmwtBeginCount;
  wire [31 : 0] sma0_wmwtBeginCount$D_IN;
  wire sma0_wmwtBeginCount$EN;

  // register sma0_wmwtFinalCount
  reg [31 : 0] sma0_wmwtFinalCount;
  wire [31 : 0] sma0_wmwtFinalCount$D_IN;
  wire sma0_wmwtFinalCount$EN;

  // register sma0_wmwtPushCount
  reg [31 : 0] sma0_wmwtPushCount;
  wire [31 : 0] sma0_wmwtPushCount$D_IN;
  wire sma0_wmwtPushCount$EN;

  // register sma0_wsiM_burstKind
  reg [1 : 0] sma0_wsiM_burstKind;
  wire [1 : 0] sma0_wsiM_burstKind$D_IN;
  wire sma0_wsiM_burstKind$EN;

  // register sma0_wsiM_errorSticky
  reg sma0_wsiM_errorSticky;
  wire sma0_wsiM_errorSticky$D_IN, sma0_wsiM_errorSticky$EN;

  // register sma0_wsiM_iMesgCount
  reg [31 : 0] sma0_wsiM_iMesgCount;
  wire [31 : 0] sma0_wsiM_iMesgCount$D_IN;
  wire sma0_wsiM_iMesgCount$EN;

  // register sma0_wsiM_isReset_isInReset
  reg sma0_wsiM_isReset_isInReset;
  wire sma0_wsiM_isReset_isInReset$D_IN, sma0_wsiM_isReset_isInReset$EN;

  // register sma0_wsiM_operateD
  reg sma0_wsiM_operateD;
  wire sma0_wsiM_operateD$D_IN, sma0_wsiM_operateD$EN;

  // register sma0_wsiM_pMesgCount
  reg [31 : 0] sma0_wsiM_pMesgCount;
  wire [31 : 0] sma0_wsiM_pMesgCount$D_IN;
  wire sma0_wsiM_pMesgCount$EN;

  // register sma0_wsiM_peerIsReady
  reg sma0_wsiM_peerIsReady;
  wire sma0_wsiM_peerIsReady$D_IN, sma0_wsiM_peerIsReady$EN;

  // register sma0_wsiM_reqFifo_c_r
  reg [1 : 0] sma0_wsiM_reqFifo_c_r;
  wire [1 : 0] sma0_wsiM_reqFifo_c_r$D_IN;
  wire sma0_wsiM_reqFifo_c_r$EN;

  // register sma0_wsiM_reqFifo_q_0
  reg [60 : 0] sma0_wsiM_reqFifo_q_0;
  reg [60 : 0] sma0_wsiM_reqFifo_q_0$D_IN;
  wire sma0_wsiM_reqFifo_q_0$EN;

  // register sma0_wsiM_reqFifo_q_1
  reg [60 : 0] sma0_wsiM_reqFifo_q_1;
  reg [60 : 0] sma0_wsiM_reqFifo_q_1$D_IN;
  wire sma0_wsiM_reqFifo_q_1$EN;

  // register sma0_wsiM_sThreadBusy_d
  reg sma0_wsiM_sThreadBusy_d;
  wire sma0_wsiM_sThreadBusy_d$D_IN, sma0_wsiM_sThreadBusy_d$EN;

  // register sma0_wsiM_statusR
  reg [7 : 0] sma0_wsiM_statusR;
  wire [7 : 0] sma0_wsiM_statusR$D_IN;
  wire sma0_wsiM_statusR$EN;

  // register sma0_wsiM_tBusyCount
  reg [31 : 0] sma0_wsiM_tBusyCount;
  wire [31 : 0] sma0_wsiM_tBusyCount$D_IN;
  wire sma0_wsiM_tBusyCount$EN;

  // register sma0_wsiM_trafficSticky
  reg sma0_wsiM_trafficSticky;
  wire sma0_wsiM_trafficSticky$D_IN, sma0_wsiM_trafficSticky$EN;

  // register sma0_wsiS_burstKind
  reg [1 : 0] sma0_wsiS_burstKind;
  wire [1 : 0] sma0_wsiS_burstKind$D_IN;
  wire sma0_wsiS_burstKind$EN;

  // register sma0_wsiS_errorSticky
  reg sma0_wsiS_errorSticky;
  wire sma0_wsiS_errorSticky$D_IN, sma0_wsiS_errorSticky$EN;

  // register sma0_wsiS_iMesgCount
  reg [31 : 0] sma0_wsiS_iMesgCount;
  wire [31 : 0] sma0_wsiS_iMesgCount$D_IN;
  wire sma0_wsiS_iMesgCount$EN;

  // register sma0_wsiS_isReset_isInReset
  reg sma0_wsiS_isReset_isInReset;
  wire sma0_wsiS_isReset_isInReset$D_IN, sma0_wsiS_isReset_isInReset$EN;

  // register sma0_wsiS_mesgWordLength
  reg [11 : 0] sma0_wsiS_mesgWordLength;
  wire [11 : 0] sma0_wsiS_mesgWordLength$D_IN;
  wire sma0_wsiS_mesgWordLength$EN;

  // register sma0_wsiS_operateD
  reg sma0_wsiS_operateD;
  wire sma0_wsiS_operateD$D_IN, sma0_wsiS_operateD$EN;

  // register sma0_wsiS_pMesgCount
  reg [31 : 0] sma0_wsiS_pMesgCount;
  wire [31 : 0] sma0_wsiS_pMesgCount$D_IN;
  wire sma0_wsiS_pMesgCount$EN;

  // register sma0_wsiS_peerIsReady
  reg sma0_wsiS_peerIsReady;
  wire sma0_wsiS_peerIsReady$D_IN, sma0_wsiS_peerIsReady$EN;

  // register sma0_wsiS_reqFifo_countReg
  reg [1 : 0] sma0_wsiS_reqFifo_countReg;
  wire [1 : 0] sma0_wsiS_reqFifo_countReg$D_IN;
  wire sma0_wsiS_reqFifo_countReg$EN;

  // register sma0_wsiS_reqFifo_levelsValid
  reg sma0_wsiS_reqFifo_levelsValid;
  wire sma0_wsiS_reqFifo_levelsValid$D_IN, sma0_wsiS_reqFifo_levelsValid$EN;

  // register sma0_wsiS_statusR
  reg [7 : 0] sma0_wsiS_statusR;
  wire [7 : 0] sma0_wsiS_statusR$D_IN;
  wire sma0_wsiS_statusR$EN;

  // register sma0_wsiS_tBusyCount
  reg [31 : 0] sma0_wsiS_tBusyCount;
  wire [31 : 0] sma0_wsiS_tBusyCount$D_IN;
  wire sma0_wsiS_tBusyCount$EN;

  // register sma0_wsiS_trafficSticky
  reg sma0_wsiS_trafficSticky;
  wire sma0_wsiS_trafficSticky$D_IN, sma0_wsiS_trafficSticky$EN;

  // register sma0_wsiS_wordCount
  reg [11 : 0] sma0_wsiS_wordCount;
  wire [11 : 0] sma0_wsiS_wordCount$D_IN;
  wire sma0_wsiS_wordCount$EN;

  // ports of submodule cap0
  wire [63 : 0] cap0$wtiS0_MData;
  wire [31 : 0] cap0$wciS0_MAddr,
		cap0$wciS0_MData,
		cap0$wciS0_SData,
		cap0$wsiS0_MData;
  wire [11 : 0] cap0$wsiS0_MBurstLength;
  wire [7 : 0] cap0$wsiS0_MReqInfo;
  wire [3 : 0] cap0$wciS0_MByteEn, cap0$wsiS0_MByteEn;
  wire [2 : 0] cap0$wciS0_MCmd, cap0$wsiS0_MCmd, cap0$wtiS0_MCmd;
  wire [1 : 0] cap0$wciS0_MFlag, cap0$wciS0_SFlag, cap0$wciS0_SResp;
  wire cap0$wciS0_MAddrSpace,
       cap0$wciS0_SThreadBusy,
       cap0$wsiS0_MBurstPrecise,
       cap0$wsiS0_MReqLast,
       cap0$wsiS0_MReset_n,
       cap0$wsiS0_SReset_n,
       cap0$wsiS0_SThreadBusy;

  // ports of submodule clkIn
  wire clkIn$O;

  // ports of submodule clkN210
  wire clkN210$clk0_buf, clkN210$clk0_rstn;

  // ports of submodule cp
  wire [511 : 0] cp$uuid_arg;
  wire [58 : 0] cp$server_request_put;
  wire [39 : 0] cp$server_response_get;
  wire [31 : 0] cp$wci_Vm_0_SData,
		cp$wci_Vm_10_MAddr,
		cp$wci_Vm_10_MData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_MAddr,
		cp$wci_Vm_11_MData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_MAddr,
		cp$wci_Vm_13_MData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_MAddr,
		cp$wci_Vm_5_MData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_MAddr,
		cp$wci_Vm_6_MData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_MAddr,
		cp$wci_Vm_7_MData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_MAddr,
		cp$wci_Vm_9_MData,
		cp$wci_Vm_9_SData;
  wire [3 : 0] cp$wci_Vm_10_MByteEn,
	       cp$wci_Vm_11_MByteEn,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_5_MByteEn,
	       cp$wci_Vm_6_MByteEn,
	       cp$wci_Vm_7_MByteEn,
	       cp$wci_Vm_9_MByteEn;
  wire [2 : 0] cp$switch_x,
	       cp$wci_Vm_10_MCmd,
	       cp$wci_Vm_11_MCmd,
	       cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_5_MCmd,
	       cp$wci_Vm_6_MCmd,
	       cp$wci_Vm_7_MCmd,
	       cp$wci_Vm_9_MCmd;
  wire [1 : 0] cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_MFlag,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_MFlag,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_MFlag,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_MFlag,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_MFlag,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_10,
       cp$RST_N_wci_Vm_11,
       cp$RST_N_wci_Vm_13,
       cp$RST_N_wci_Vm_5,
       cp$RST_N_wci_Vm_6,
       cp$RST_N_wci_Vm_7,
       cp$RST_N_wci_Vm_9,
       cp$gps_ppsSyncIn_x,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_MAddrSpace,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_MAddrSpace,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_MAddrSpace,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_MAddrSpace,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_MAddrSpace,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_MAddrSpace,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_MAddrSpace,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule edp0
  wire [66 : 0] edp0$wtiS0_req;
  wire [31 : 0] edp0$wciS0_MAddr,
		edp0$wciS0_MData,
		edp0$wciS0_SData,
		edp0$wmiS0_MData,
		edp0$wmiS0_SData,
		edp0$wmiS0_SFlag,
		edp0$wmiS0_arg_mFlag;
  wire [13 : 0] edp0$wmiS0_MAddr;
  wire [11 : 0] edp0$wmiS0_MBurstLength;
  wire [9 : 0] edp0$server_request_put, edp0$server_response_get;
  wire [3 : 0] edp0$wciS0_MByteEn, edp0$wmiS0_MDataByteEn;
  wire [2 : 0] edp0$wciS0_MCmd, edp0$wmiS0_MCmd;
  wire [1 : 0] edp0$wciS0_MFlag,
	       edp0$wciS0_SFlag,
	       edp0$wciS0_SResp,
	       edp0$wmiS0_SResp;
  wire edp0$EN_server_request_put,
       edp0$EN_server_response_get,
       edp0$RDY_server_request_put,
       edp0$RDY_server_response_get,
       edp0$wciS0_MAddrSpace,
       edp0$wciS0_SThreadBusy,
       edp0$wmiS0_MAddrSpace,
       edp0$wmiS0_MDataLast,
       edp0$wmiS0_MDataValid,
       edp0$wmiS0_MReqInfo,
       edp0$wmiS0_MReqLast,
       edp0$wmiS0_MReset_n,
       edp0$wmiS0_SDataThreadBusy,
       edp0$wmiS0_SReset_n,
       edp0$wmiS0_SThreadBusy;

  // ports of submodule gbe0
  wire [58 : 0] gbe0$cpClient_request_get;
  wire [47 : 0] gbe0$macAddr_u;
  wire [39 : 0] gbe0$cpClient_response_put;
  wire [9 : 0] gbe0$dpClient_request_get, gbe0$dpClient_response_put;
  wire [7 : 0] gbe0$gmii_rx_rxd_i, gbe0$gmii_tx_txd;
  wire gbe0$CLK_gmii_tx_tx_clk,
       gbe0$CLK_rxclkBnd,
       gbe0$EN_cpClient_request_get,
       gbe0$EN_cpClient_response_put,
       gbe0$EN_dpClient_request_get,
       gbe0$EN_dpClient_response_put,
       gbe0$EN_macAddr,
       gbe0$RDY_cpClient_request_get,
       gbe0$RDY_cpClient_response_put,
       gbe0$RDY_dpClient_request_get,
       gbe0$RDY_dpClient_response_put,
       gbe0$RST_N_gmii_rstn,
       gbe0$gmii_col_i,
       gbe0$gmii_crs_i,
       gbe0$gmii_intr_i,
       gbe0$gmii_led,
       gbe0$gmii_rx_rx_dv_i,
       gbe0$gmii_rx_rx_er_i,
       gbe0$gmii_tx_tx_en,
       gbe0$gmii_tx_tx_er,
       gbe0$mdio_mdc,
       gbe0$mdio_mdd;

  // ports of submodule gbewrk
  wire [31 : 0] gbewrk$wciS0_MAddr, gbewrk$wciS0_MData, gbewrk$wciS0_SData;
  wire [3 : 0] gbewrk$wciS0_MByteEn;
  wire [2 : 0] gbewrk$wciS0_MCmd;
  wire [1 : 0] gbewrk$wciS0_MFlag, gbewrk$wciS0_SFlag, gbewrk$wciS0_SResp;
  wire gbewrk$wciS0_MAddrSpace, gbewrk$wciS0_SThreadBusy;

  // ports of submodule gmiixo_clk
  wire gmiixo_clk$O;

  // ports of submodule gmiixo_rst
  wire gmiixo_rst$OUT_RST_N;

  // ports of submodule iqadc
  wire [66 : 0] iqadc$wtiS0_req;
  wire [31 : 0] iqadc$wciS0_MAddr,
		iqadc$wciS0_MData,
		iqadc$wciS0_SData,
		iqadc$wsiM0_MData;
  wire [13 : 0] iqadc$adc_da_i, iqadc$adc_db_i;
  wire [11 : 0] iqadc$wsiM0_MBurstLength;
  wire [7 : 0] iqadc$wsiM0_MReqInfo;
  wire [3 : 0] iqadc$wciS0_MByteEn, iqadc$wsiM0_MByteEn;
  wire [2 : 0] iqadc$wciS0_MCmd, iqadc$wsiM0_MCmd;
  wire [1 : 0] iqadc$wciS0_MFlag, iqadc$wciS0_SFlag, iqadc$wciS0_SResp;
  wire iqadc$CLK_adcSdrClk,
       iqadc$CLK_adc_sclk,
       iqadc$CLK_adc_sclkn,
       iqadc$RST_N_adc_rst,
       iqadc$adc_oe,
       iqadc$adc_resetp,
       iqadc$adc_sclkgate,
       iqadc$adc_sen,
       iqadc$adc_smiso_i,
       iqadc$adc_smosi,
       iqadc$wciS0_MAddrSpace,
       iqadc$wciS0_SThreadBusy,
       iqadc$wsiM0_MBurstPrecise,
       iqadc$wsiM0_MReqLast,
       iqadc$wsiM0_MReset_n,
       iqadc$wsiM0_SReset_n,
       iqadc$wsiM0_SThreadBusy;

  // ports of submodule ledLogic
  wire [4 : 0] ledLogic$led, ledLogic$ledDrive_i;
  wire ledLogic$EN_ledDrive;

  // ports of submodule pat0_dataBram_memory
  wire [31 : 0] pat0_dataBram_memory$DIA,
		pat0_dataBram_memory$DIB,
		pat0_dataBram_memory$DOA,
		pat0_dataBram_memory$DOB;
  wire [9 : 0] pat0_dataBram_memory$ADDRA, pat0_dataBram_memory$ADDRB;
  wire pat0_dataBram_memory$ENA,
       pat0_dataBram_memory$ENB,
       pat0_dataBram_memory$WEA,
       pat0_dataBram_memory$WEB;

  // ports of submodule pat0_dataBram_serverAdapterA_outDataCore
  wire [31 : 0] pat0_dataBram_serverAdapterA_outDataCore$D_IN,
		pat0_dataBram_serverAdapterA_outDataCore$D_OUT;
  wire pat0_dataBram_serverAdapterA_outDataCore$CLR,
       pat0_dataBram_serverAdapterA_outDataCore$DEQ,
       pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N,
       pat0_dataBram_serverAdapterA_outDataCore$ENQ,
       pat0_dataBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule pat0_dataBram_serverAdapterB_outDataCore
  wire [31 : 0] pat0_dataBram_serverAdapterB_outDataCore$D_IN,
		pat0_dataBram_serverAdapterB_outDataCore$D_OUT;
  wire pat0_dataBram_serverAdapterB_outDataCore$CLR,
       pat0_dataBram_serverAdapterB_outDataCore$DEQ,
       pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N,
       pat0_dataBram_serverAdapterB_outDataCore$ENQ,
       pat0_dataBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule pat0_loopReqInFlightF
  wire pat0_loopReqInFlightF$CLR,
       pat0_loopReqInFlightF$DEQ,
       pat0_loopReqInFlightF$EMPTY_N,
       pat0_loopReqInFlightF$ENQ,
       pat0_loopReqInFlightF$FULL_N;

  // ports of submodule pat0_metaBram_memory
  wire [31 : 0] pat0_metaBram_memory$DIA,
		pat0_metaBram_memory$DIB,
		pat0_metaBram_memory$DOA,
		pat0_metaBram_memory$DOB;
  wire [9 : 0] pat0_metaBram_memory$ADDRA, pat0_metaBram_memory$ADDRB;
  wire pat0_metaBram_memory$ENA,
       pat0_metaBram_memory$ENB,
       pat0_metaBram_memory$WEA,
       pat0_metaBram_memory$WEB;

  // ports of submodule pat0_metaBram_memory_1
  wire [31 : 0] pat0_metaBram_memory_1$DIA,
		pat0_metaBram_memory_1$DIB,
		pat0_metaBram_memory_1$DOA,
		pat0_metaBram_memory_1$DOB;
  wire [9 : 0] pat0_metaBram_memory_1$ADDRA, pat0_metaBram_memory_1$ADDRB;
  wire pat0_metaBram_memory_1$ENA,
       pat0_metaBram_memory_1$ENB,
       pat0_metaBram_memory_1$WEA,
       pat0_metaBram_memory_1$WEB;

  // ports of submodule pat0_metaBram_memory_2
  wire [31 : 0] pat0_metaBram_memory_2$DIA,
		pat0_metaBram_memory_2$DIB,
		pat0_metaBram_memory_2$DOA,
		pat0_metaBram_memory_2$DOB;
  wire [9 : 0] pat0_metaBram_memory_2$ADDRA, pat0_metaBram_memory_2$ADDRB;
  wire pat0_metaBram_memory_2$ENA,
       pat0_metaBram_memory_2$ENB,
       pat0_metaBram_memory_2$WEA,
       pat0_metaBram_memory_2$WEB;

  // ports of submodule pat0_metaBram_memory_3
  wire [31 : 0] pat0_metaBram_memory_3$DIA,
		pat0_metaBram_memory_3$DIB,
		pat0_metaBram_memory_3$DOA,
		pat0_metaBram_memory_3$DOB;
  wire [9 : 0] pat0_metaBram_memory_3$ADDRA, pat0_metaBram_memory_3$ADDRB;
  wire pat0_metaBram_memory_3$ENA,
       pat0_metaBram_memory_3$ENB,
       pat0_metaBram_memory_3$WEA,
       pat0_metaBram_memory_3$WEB;

  // ports of submodule pat0_metaBram_serverAdapterA_1_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_1_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_1_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_1_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_1_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_1_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterA_2_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_2_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_2_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_2_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_2_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_2_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterA_3_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_3_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_3_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_3_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_3_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_3_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterA_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterA_outDataCore$D_IN,
		pat0_metaBram_serverAdapterA_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterA_outDataCore$CLR,
       pat0_metaBram_serverAdapterA_outDataCore$DEQ,
       pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterA_outDataCore$ENQ,
       pat0_metaBram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_1_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_1_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_1_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_1_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_1_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_1_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_2_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_2_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_2_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_2_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_2_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_2_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_3_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_3_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_3_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_3_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_3_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_3_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule pat0_metaBram_serverAdapterB_outDataCore
  wire [31 : 0] pat0_metaBram_serverAdapterB_outDataCore$D_IN,
		pat0_metaBram_serverAdapterB_outDataCore$D_OUT;
  wire pat0_metaBram_serverAdapterB_outDataCore$CLR,
       pat0_metaBram_serverAdapterB_outDataCore$DEQ,
       pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N,
       pat0_metaBram_serverAdapterB_outDataCore$ENQ,
       pat0_metaBram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule pat0_metaReqInFlightF
  wire pat0_metaReqInFlightF$CLR,
       pat0_metaReqInFlightF$DEQ,
       pat0_metaReqInFlightF$EMPTY_N,
       pat0_metaReqInFlightF$ENQ,
       pat0_metaReqInFlightF$FULL_N;

  // ports of submodule pat0_splaF
  wire [2 : 0] pat0_splaF$D_IN, pat0_splaF$D_OUT;
  wire pat0_splaF$CLR,
       pat0_splaF$DEQ,
       pat0_splaF$EMPTY_N,
       pat0_splaF$ENQ,
       pat0_splaF$FULL_N;

  // ports of submodule pat0_wci_wslv_reqF
  wire [71 : 0] pat0_wci_wslv_reqF$D_IN, pat0_wci_wslv_reqF$D_OUT;
  wire pat0_wci_wslv_reqF$CLR,
       pat0_wci_wslv_reqF$DEQ,
       pat0_wci_wslv_reqF$EMPTY_N,
       pat0_wci_wslv_reqF$ENQ;

  // ports of submodule pwrk
  wire [47 : 0] pwrk$macAddr;
  wire [31 : 0] pwrk$wciS0_MAddr, pwrk$wciS0_MData, pwrk$wciS0_SData;
  wire [3 : 0] pwrk$wciS0_MByteEn;
  wire [2 : 0] pwrk$wciS0_MCmd;
  wire [1 : 0] pwrk$wciS0_MFlag, pwrk$wciS0_SFlag, pwrk$wciS0_SResp;
  wire pwrk$i2cpad_scl,
       pwrk$i2cpad_sda,
       pwrk$spipad_clk,
       pwrk$spipad_csn,
       pwrk$spipad_miso_i,
       pwrk$spipad_mosi,
       pwrk$wciS0_MAddrSpace,
       pwrk$wciS0_SThreadBusy;

  // ports of submodule sma0_mesgTokenF
  wire sma0_mesgTokenF$CLR,
       sma0_mesgTokenF$DEQ,
       sma0_mesgTokenF$EMPTY_N,
       sma0_mesgTokenF$ENQ,
       sma0_mesgTokenF$FULL_N;

  // ports of submodule sma0_respF_memory
  wire [60 : 0] sma0_respF_memory$DIA,
		sma0_respF_memory$DIB,
		sma0_respF_memory$DOB;
  wire [10 : 0] sma0_respF_memory$ADDRA, sma0_respF_memory$ADDRB;
  wire sma0_respF_memory$ENA,
       sma0_respF_memory$ENB,
       sma0_respF_memory$WEA,
       sma0_respF_memory$WEB;

  // ports of submodule sma0_wci_wslv_reqF
  wire [71 : 0] sma0_wci_wslv_reqF$D_IN, sma0_wci_wslv_reqF$D_OUT;
  wire sma0_wci_wslv_reqF$CLR,
       sma0_wci_wslv_reqF$DEQ,
       sma0_wci_wslv_reqF$EMPTY_N,
       sma0_wci_wslv_reqF$ENQ;

  // ports of submodule sma0_wmi_respF
  wire [33 : 0] sma0_wmi_respF$D_IN, sma0_wmi_respF$D_OUT;
  wire sma0_wmi_respF$CLR,
       sma0_wmi_respF$DEQ,
       sma0_wmi_respF$EMPTY_N,
       sma0_wmi_respF$ENQ,
       sma0_wmi_respF$FULL_N;

  // ports of submodule sma0_wsiS_reqFifo
  wire [60 : 0] sma0_wsiS_reqFifo$D_IN, sma0_wsiS_reqFifo$D_OUT;
  wire sma0_wsiS_reqFifo$CLR,
       sma0_wsiS_reqFifo$DEQ,
       sma0_wsiS_reqFifo$EMPTY_N,
       sma0_wsiS_reqFifo$ENQ,
       sma0_wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_pat0_wci_cfrd,
       CAN_FIRE_RL_pat0_wci_cfwr,
       CAN_FIRE_RL_sma0_wmrd_mesgBodyPreRequest,
       CAN_FIRE_RL_sma0_wmwt_mesgBegin,
       CAN_FIRE_RL_sma0_wmwt_messagePush,
       WILL_FIRE_RL_pat0_advance_split_response,
       WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_doMessageEmit,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pat0_resp_meta,
       WILL_FIRE_RL_pat0_wci_cfrd,
       WILL_FIRE_RL_pat0_wci_cfwr,
       WILL_FIRE_RL_pat0_wci_ctrl_EiI,
       WILL_FIRE_RL_pat0_wci_ctrl_IsO,
       WILL_FIRE_RL_pat0_wci_ctrl_OrE,
       WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_pat0_wci_wslv_respF_both,
       WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_both,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_deq,
       WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_sma0_wci_cfrd,
       WILL_FIRE_RL_sma0_wci_cfwr,
       WILL_FIRE_RL_sma0_wci_ctrl_EiI,
       WILL_FIRE_RL_sma0_wci_ctrl_IsO,
       WILL_FIRE_RL_sma0_wci_ctrl_OrE,
       WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_sma0_wci_wslv_respF_both,
       WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_sma0_wmi_dhF_both,
       WILL_FIRE_RL_sma0_wmi_dhF_decCtr,
       WILL_FIRE_RL_sma0_wmi_dhF_incCtr,
       WILL_FIRE_RL_sma0_wmi_mFlagF_both,
       WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr,
       WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr,
       WILL_FIRE_RL_sma0_wmi_reqF_both,
       WILL_FIRE_RL_sma0_wmi_reqF_decCtr,
       WILL_FIRE_RL_sma0_wmi_reqF_deq,
       WILL_FIRE_RL_sma0_wmi_reqF_incCtr,
       WILL_FIRE_RL_sma0_wmrd_mesgBegin,
       WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest,
       WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse,
       WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi,
       WILL_FIRE_RL_sma0_wmwt_doAbort,
       WILL_FIRE_RL_sma0_wmwt_mesgBegin,
       WILL_FIRE_RL_sma0_wmwt_messageFinalize,
       WILL_FIRE_RL_sma0_wmwt_messagePush,
       WILL_FIRE_RL_sma0_wsiM_reqFifo_both,
       WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_sma0_wsiM_reqFifo_deq,
       WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_sma0_wsiS_reqFifo_enq,
       WILL_FIRE_RL_sma0_wsiS_reqFifo_reset,
       WILL_FIRE_RL_sma0_wsipass_doMessagePush;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1,
	       MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1;
  wire [60 : 0] MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_2,
		MUX_sma0_wsiM_reqFifo_q_1$write_1__VAL_2,
		MUX_sma0_wsiM_reqFifo_x_wire$wset_1__VAL_3;
  wire [37 : 0] MUX_sma0_wmi_dhF_q_0$write_1__VAL_1,
		MUX_sma0_wmi_dhF_q_0$write_1__VAL_2,
		MUX_sma0_wmi_dhF_q_1$write_1__VAL_2;
  wire [33 : 0] MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2,
		MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_2,
		MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2,
		MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3,
		MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_2,
		MUX_sma0_wci_wslv_respF_q_1$write_1__VAL_2,
		MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_2;
  wire [31 : 0] MUX_pat0_bytesRemain$write_1__VAL_2,
		MUX_pat0_dataCount$write_1__VAL_2,
		MUX_pat0_mesgCount$write_1__VAL_2,
		MUX_pat0_mesgRemain$write_1__VAL_2,
		MUX_sma0_mesgCount$write_1__VAL_1,
		MUX_sma0_thisMesg$write_1__VAL_1,
		MUX_sma0_thisMesg$write_1__VAL_2,
		MUX_sma0_wmi_mFlagF_q_0$write_1__VAL_2,
		MUX_sma0_wmi_mFlagF_q_1$write_1__VAL_2,
		MUX_sma0_wmi_mFlagF_x_wire$wset_1__VAL_2,
		MUX_sma0_wmi_reqF_q_0$write_1__VAL_1,
		MUX_sma0_wmi_reqF_q_0$write_1__VAL_2,
		MUX_sma0_wmi_reqF_q_1$write_1__VAL_2,
		MUX_sma0_wmi_reqF_x_wire$wset_1__VAL_1,
		MUX_sma0_wmi_reqF_x_wire$wset_1__VAL_2;
  wire [15 : 0] MUX_pat0_metaPtr_modulus$write_1__VAL_1,
		MUX_pat0_metaPtr_value$write_1__VAL_3,
		MUX_pat0_unrollCnt$write_1__VAL_1,
		MUX_pat0_unrollCnt$write_1__VAL_2,
		MUX_sma0_unrollCnt$write_1__VAL_1,
		MUX_sma0_unrollCnt$write_1__VAL_2;
  wire [13 : 0] MUX_sma0_fabWordsRemain$write_1__VAL_1,
		MUX_sma0_fabWordsRemain$write_1__VAL_2,
		MUX_sma0_mesgReqAddr$write_1__VAL_2;
  wire [11 : 0] MUX_sma0_fabRespCredit_value$write_1__VAL_2;
  wire [8 : 0] MUX_sma0_opcode$write_1__VAL_3;
  wire [1 : 0] MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_2,
	       MUX_sma0_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_sma0_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_sma0_wmi_dhF_c_r$write_1__VAL_1,
	       MUX_sma0_wmi_dhF_c_r$write_1__VAL_2,
	       MUX_sma0_wmi_mFlagF_c_r$write_1__VAL_1,
	       MUX_sma0_wmi_mFlagF_c_r$write_1__VAL_2,
	       MUX_sma0_wmi_reqF_c_r$write_1__VAL_1,
	       MUX_sma0_wmi_reqF_c_r$write_1__VAL_2,
	       MUX_sma0_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_sma0_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_pat0_controlReg$write_1__SEL_1,
       MUX_pat0_dataBram_memory$b_put_1__SEL_1,
       MUX_pat0_dataBram_memory$b_put_1__SEL_2,
       MUX_pat0_dataCount$write_1__SEL_1,
       MUX_pat0_mesgCount$write_1__SEL_1,
       MUX_pat0_mesgCount$write_1__SEL_2,
       MUX_pat0_mesgRemain$write_1__SEL_1,
       MUX_pat0_metaBram_memory$b_put_1__SEL_2,
       MUX_pat0_metaBram_memory$b_put_2__SEL_1,
       MUX_pat0_metaBram_memory_1$b_put_1__SEL_1,
       MUX_pat0_metaBram_memory_1$b_put_1__SEL_2,
       MUX_pat0_metaBram_memory_2$b_put_1__SEL_1,
       MUX_pat0_metaBram_memory_2$b_put_1__SEL_2,
       MUX_pat0_metaBram_memory_3$b_put_1__SEL_1,
       MUX_pat0_metaBram_memory_3$b_put_1__SEL_2,
       MUX_pat0_metaPtr_modulus$write_1__SEL_1,
       MUX_pat0_splitReadInFlight$write_1__SEL_1,
       MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_pat0_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_1,
       MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_1,
       MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1,
       MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_sma0_endOfMessage$write_1__SEL_1,
       MUX_sma0_mesgCount$write_1__SEL_1,
       MUX_sma0_mesgReqOK$write_1__SEL_3,
       MUX_sma0_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_sma0_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_sma0_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_sma0_wci_wslv_respF_q_0$write_1__SEL_1,
       MUX_sma0_wci_wslv_respF_q_1$write_1__SEL_1,
       MUX_sma0_wmi_dhF_q_0$write_1__SEL_1,
       MUX_sma0_wmi_dhF_q_1$write_1__SEL_1,
       MUX_sma0_wmi_mFlagF_q_0$write_1__SEL_1,
       MUX_sma0_wmi_mFlagF_q_1$write_1__SEL_1,
       MUX_sma0_wmi_mFlagF_x_wire$wset_1__SEL_1,
       MUX_sma0_wmi_reqF_q_0$write_1__SEL_1,
       MUX_sma0_wmi_reqF_q_1$write_1__SEL_1,
       MUX_sma0_wsiM_reqFifo_q_0$write_1__SEL_1,
       MUX_sma0_wsiM_reqFifo_q_1$write_1__SEL_1,
       MUX_sma0_wsiM_reqFifo_x_wire$wset_1__SEL_1,
       MUX_sma0_wsiM_reqFifo_x_wire$wset_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h30733,
	       v__h31826,
	       v__h32316,
	       v__h33303,
	       v__h38137,
	       v__h38311,
	       v__h38455,
	       v__h52674,
	       v__h56386,
	       v__h56445,
	       v__h5737,
	       v__h57787,
	       v__h57970,
	       v__h58166,
	       v__h58794,
	       v__h5911,
	       v__h6055;
  reg [31 : 0] IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1069,
	       g_data__h58336,
	       v__h33284;
  reg [1 : 0] CASE_edp0server_response_get_BITS_9_TO_8_3_0__ETC__q3,
	      CASE_gbe0dpClient_request_get_BITS_9_TO_8_3_0_ETC__q2;
  reg CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1,
      IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1036,
      IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518,
      IF_pat0_wci_wslv_reqF_first__3_BITS_63_TO_52_0_ETC___d1135;
  wire [55 : 0] IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2561;
  wire [31 : 0] b__h27160,
		g_data__h34295,
		rdat___1__h33460,
		rdat__h58423,
		residue__h27149,
		v__h26543,
		v__h30908,
		value__h41066,
		x__h27176,
		x__h28102,
		x__h53274,
		y_avValue__h31534,
		y_avValue__h31578,
		y_avValue__h31618,
		y_avValue__h31658,
		y_avValue__h31698;
  wire [23 : 0] b__h52385,
		mesgMetaF_length__h56967,
		residue__h52248,
		x__h52505;
  wire [15 : 0] wsiBurstLength__h53133, x__h58426, x_length__h57367;
  wire [13 : 0] b__h52758, mlB__h56800, mlInc__h56799;
  wire [11 : 0] b__h49573,
		sendData_burstLength__h53215,
		x__h50927,
		x_burstLength__h27936;
  wire [7 : 0] mesgMetaF_opcode__h56966;
  wire [3 : 0] sendData_byteEn__h53217, x_byteEn__h27938;
  wire [2 : 0] IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2525,
	       pat0_dataBram_serverAdapterA_cnt_82_PLUS_IF_pa_ETC___d288,
	       pat0_dataBram_serverAdapterB_cnt_41_PLUS_IF_pa_ETC___d347,
	       pat0_metaBram_serverAdapterA_1_cnt_18_PLUS_IF__ETC___d524,
	       pat0_metaBram_serverAdapterA_2_cnt_36_PLUS_IF__ETC___d642,
	       pat0_metaBram_serverAdapterA_3_cnt_54_PLUS_IF__ETC___d760,
	       pat0_metaBram_serverAdapterA_cnt_00_PLUS_IF_pa_ETC___d406,
	       pat0_metaBram_serverAdapterB_1_cnt_77_PLUS_IF__ETC___d583,
	       pat0_metaBram_serverAdapterB_2_cnt_95_PLUS_IF__ETC___d701,
	       pat0_metaBram_serverAdapterB_3_cnt_13_PLUS_IF__ETC___d819,
	       pat0_metaBram_serverAdapterB_cnt_59_PLUS_IF_pa_ETC___d465,
	       x__h57006,
	       x__h57018,
	       x__h57030,
	       y__h57007,
	       y__h57019,
	       y__h57031;
  wire [1 : 0] ab__h13546, ab__h16645, ab__h19572, ab__h22499, ab__h25426;
  wire IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1045,
       NOT_sma0_wmi_reqF_c_r_341_EQ_2_359_360_AND_sma_ETC___d1706,
       pat0_dataBram_serverAdapterB_cnt_41_SLT_3___d2278,
       pat0_doZLM_12_OR_pat0_dataBram_serverAdapterA__ETC___d916,
       pat0_doZLM_12_OR_pat0_dataBram_serverAdapterA__ETC___d926,
       pat0_metaBram_serverAdapterA_1_outData_outData_ETC___d879,
       pat0_metaReqInFlightF_i_notEmpty__67_AND_pat0__ETC___d883,
       pat0_splaF_i_notEmpty__014_AND_IF_pat0_splaF_f_ETC___d1047,
       sma0_wmi_respF_i_notEmpty__718_AND_sma0_smaCtr_ETC___d1723,
       sma0_wsiS_reqFifo_i_notEmpty__646_AND_NOT_sma0_ETC___d1851,
       x__h52929;

  // oscillator and gates for output clock rxclkBnd
  assign rxclkBnd = gbe0$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_tx_clk
  assign gmii_tx_tx_clk = gbe0$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock adc_sclk
  assign adc_sclk = iqadc$CLK_adc_sclk ;
  assign CLK_GATE_adc_sclk = 1'b1 ;

  // oscillator and gates for output clock adc_sclkn
  assign adc_sclkn = iqadc$CLK_adc_sclkn ;
  assign CLK_GATE_adc_sclkn = 1'b1 ;

  // oscillator and gates for output clock sys0Clk
  assign sys0Clk = clkN210$clk0_buf ;
  assign CLK_GATE_sys0Clk = 1'b1 ;

  // output resets
  assign gmii_rstn = gbe0$RST_N_gmii_rstn ;
  assign adc_rst = iqadc$RST_N_adc_rst ;
  assign sys0Rst = clkN210$clk0_rstn ;

  // value method led
  assign led = ledLogic$led ;

  // value method debug
  assign debug = 32'd1431633920 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gbe0$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gbe0$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gbe0$gmii_tx_tx_er ;

  // value method gmii_led
  assign gmii_led = gbe0$gmii_led ;

  // value method adc_oe
  assign adc_oe = iqadc$adc_oe ;

  // value method adc_sclkgate
  assign adc_sclkgate = iqadc$adc_sclkgate ;

  // value method adc_resetp
  assign adc_resetp = iqadc$adc_resetp ;

  // value method adc_sen
  assign adc_sen = iqadc$adc_sen ;

  // value method adc_smosi
  assign adc_smosi = iqadc$adc_smosi ;

  // value method flash_mosi
  assign flash_mosi = pwrk$spipad_mosi ;

  // value method flash_clk
  assign flash_clk = pwrk$spipad_clk ;

  // value method flash_csn
  assign flash_csn = pwrk$spipad_csn ;

  // submodule cap0
  mkWSICaptureWorker4B #(.hasDebugLogic(1'd1)) cap0(.wciS0_Clk(clkN210$clk0_buf),
						    .wciS0_MReset_n(cp$RST_N_wci_Vm_11),
						    .wciS0_MAddr(cap0$wciS0_MAddr),
						    .wciS0_MAddrSpace(cap0$wciS0_MAddrSpace),
						    .wciS0_MByteEn(cap0$wciS0_MByteEn),
						    .wciS0_MCmd(cap0$wciS0_MCmd),
						    .wciS0_MData(cap0$wciS0_MData),
						    .wciS0_MFlag(cap0$wciS0_MFlag),
						    .wsiS0_MBurstLength(cap0$wsiS0_MBurstLength),
						    .wsiS0_MByteEn(cap0$wsiS0_MByteEn),
						    .wsiS0_MCmd(cap0$wsiS0_MCmd),
						    .wsiS0_MData(cap0$wsiS0_MData),
						    .wsiS0_MReqInfo(cap0$wsiS0_MReqInfo),
						    .wtiS0_MCmd(cap0$wtiS0_MCmd),
						    .wtiS0_MData(cap0$wtiS0_MData),
						    .wsiS0_MReqLast(cap0$wsiS0_MReqLast),
						    .wsiS0_MBurstPrecise(cap0$wsiS0_MBurstPrecise),
						    .wsiS0_MReset_n(cap0$wsiS0_MReset_n),
						    .wciS0_SResp(cap0$wciS0_SResp),
						    .wciS0_SData(cap0$wciS0_SData),
						    .wciS0_SThreadBusy(cap0$wciS0_SThreadBusy),
						    .wciS0_SFlag(cap0$wciS0_SFlag),
						    .wsiS0_SThreadBusy(cap0$wsiS0_SThreadBusy),
						    .wsiS0_SReset_n(cap0$wsiS0_SReset_n),
						    .wtiS0_SThreadBusy(),
						    .wtiS0_SReset_n());

  // submodule clkIn
  IBUFDS clkIn(.I(sys0_clkp), .IB(sys0_clkn), .O(clkIn$O));

  // submodule clkN210
  clock_n210 clkN210(.clkIn(clkIn$O),
		     .rstIn(fpga_rstn),
		     .locked(),
		     .clk0_buf(clkN210$clk0_buf),
		     .clk0_rstn(clkN210$clk0_rstn));

  // submodule cp
  mkOCCP cp(.pciDevice(16'hAAAA),
	    .CLK_sys0_clk(clkN210$clk0_buf),
	    .RST_N_sys0_rst(clkN210$clk0_rstn),
	    .CLK(clkN210$clk0_buf),
	    .RST_N(clkN210$clk0_rstn),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .uuid_arg(cp$uuid_arg),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .wci_Vm_0_MCmd(),
	    .wci_Vm_0_MAddrSpace(),
	    .wci_Vm_0_MByteEn(),
	    .wci_Vm_0_MAddr(),
	    .wci_Vm_0_MData(),
	    .wci_Vm_0_MFlag(),
	    .wci_Vm_1_MCmd(),
	    .wci_Vm_1_MAddrSpace(),
	    .wci_Vm_1_MByteEn(),
	    .wci_Vm_1_MAddr(),
	    .wci_Vm_1_MData(),
	    .wci_Vm_1_MFlag(),
	    .wci_Vm_2_MCmd(),
	    .wci_Vm_2_MAddrSpace(),
	    .wci_Vm_2_MByteEn(),
	    .wci_Vm_2_MAddr(),
	    .wci_Vm_2_MData(),
	    .wci_Vm_2_MFlag(),
	    .wci_Vm_3_MCmd(),
	    .wci_Vm_3_MAddrSpace(),
	    .wci_Vm_3_MByteEn(),
	    .wci_Vm_3_MAddr(),
	    .wci_Vm_3_MData(),
	    .wci_Vm_3_MFlag(),
	    .wci_Vm_4_MCmd(),
	    .wci_Vm_4_MAddrSpace(),
	    .wci_Vm_4_MByteEn(),
	    .wci_Vm_4_MAddr(),
	    .wci_Vm_4_MData(),
	    .wci_Vm_4_MFlag(),
	    .wci_Vm_5_MCmd(cp$wci_Vm_5_MCmd),
	    .wci_Vm_5_MAddrSpace(cp$wci_Vm_5_MAddrSpace),
	    .wci_Vm_5_MByteEn(cp$wci_Vm_5_MByteEn),
	    .wci_Vm_5_MAddr(cp$wci_Vm_5_MAddr),
	    .wci_Vm_5_MData(cp$wci_Vm_5_MData),
	    .wci_Vm_5_MFlag(),
	    .wci_Vm_6_MCmd(cp$wci_Vm_6_MCmd),
	    .wci_Vm_6_MAddrSpace(cp$wci_Vm_6_MAddrSpace),
	    .wci_Vm_6_MByteEn(cp$wci_Vm_6_MByteEn),
	    .wci_Vm_6_MAddr(cp$wci_Vm_6_MAddr),
	    .wci_Vm_6_MData(cp$wci_Vm_6_MData),
	    .wci_Vm_6_MFlag(),
	    .wci_Vm_7_MCmd(cp$wci_Vm_7_MCmd),
	    .wci_Vm_7_MAddrSpace(cp$wci_Vm_7_MAddrSpace),
	    .wci_Vm_7_MByteEn(cp$wci_Vm_7_MByteEn),
	    .wci_Vm_7_MAddr(cp$wci_Vm_7_MAddr),
	    .wci_Vm_7_MData(cp$wci_Vm_7_MData),
	    .wci_Vm_7_MFlag(cp$wci_Vm_7_MFlag),
	    .wci_Vm_8_MCmd(),
	    .wci_Vm_8_MAddrSpace(),
	    .wci_Vm_8_MByteEn(),
	    .wci_Vm_8_MAddr(),
	    .wci_Vm_8_MData(),
	    .wci_Vm_8_MFlag(),
	    .wci_Vm_9_MCmd(cp$wci_Vm_9_MCmd),
	    .wci_Vm_9_MAddrSpace(cp$wci_Vm_9_MAddrSpace),
	    .wci_Vm_9_MByteEn(cp$wci_Vm_9_MByteEn),
	    .wci_Vm_9_MAddr(cp$wci_Vm_9_MAddr),
	    .wci_Vm_9_MData(cp$wci_Vm_9_MData),
	    .wci_Vm_9_MFlag(cp$wci_Vm_9_MFlag),
	    .wci_Vm_10_MCmd(cp$wci_Vm_10_MCmd),
	    .wci_Vm_10_MAddrSpace(cp$wci_Vm_10_MAddrSpace),
	    .wci_Vm_10_MByteEn(cp$wci_Vm_10_MByteEn),
	    .wci_Vm_10_MAddr(cp$wci_Vm_10_MAddr),
	    .wci_Vm_10_MData(cp$wci_Vm_10_MData),
	    .wci_Vm_10_MFlag(cp$wci_Vm_10_MFlag),
	    .wci_Vm_11_MCmd(cp$wci_Vm_11_MCmd),
	    .wci_Vm_11_MAddrSpace(cp$wci_Vm_11_MAddrSpace),
	    .wci_Vm_11_MByteEn(cp$wci_Vm_11_MByteEn),
	    .wci_Vm_11_MAddr(cp$wci_Vm_11_MAddr),
	    .wci_Vm_11_MData(cp$wci_Vm_11_MData),
	    .wci_Vm_11_MFlag(cp$wci_Vm_11_MFlag),
	    .wci_Vm_12_MCmd(),
	    .wci_Vm_12_MAddrSpace(),
	    .wci_Vm_12_MByteEn(),
	    .wci_Vm_12_MAddr(),
	    .wci_Vm_12_MData(),
	    .wci_Vm_12_MFlag(),
	    .wci_Vm_13_MCmd(cp$wci_Vm_13_MCmd),
	    .wci_Vm_13_MAddrSpace(cp$wci_Vm_13_MAddrSpace),
	    .wci_Vm_13_MByteEn(cp$wci_Vm_13_MByteEn),
	    .wci_Vm_13_MAddr(cp$wci_Vm_13_MAddr),
	    .wci_Vm_13_MData(cp$wci_Vm_13_MData),
	    .wci_Vm_13_MFlag(cp$wci_Vm_13_MFlag),
	    .wci_Vm_14_MCmd(),
	    .wci_Vm_14_MAddrSpace(),
	    .wci_Vm_14_MByteEn(),
	    .wci_Vm_14_MAddr(),
	    .wci_Vm_14_MData(),
	    .wci_Vm_14_MFlag(),
	    .cpNow(),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(),
	    .led(),
	    .RST_N_wci_Vm_0(),
	    .RST_N_wci_Vm_1(),
	    .RST_N_wci_Vm_2(),
	    .RST_N_wci_Vm_3(),
	    .RST_N_wci_Vm_4(),
	    .RST_N_wci_Vm_5(cp$RST_N_wci_Vm_5),
	    .RST_N_wci_Vm_6(cp$RST_N_wci_Vm_6),
	    .RST_N_wci_Vm_7(cp$RST_N_wci_Vm_7),
	    .RST_N_wci_Vm_8(),
	    .RST_N_wci_Vm_9(cp$RST_N_wci_Vm_9),
	    .RST_N_wci_Vm_10(cp$RST_N_wci_Vm_10),
	    .RST_N_wci_Vm_11(cp$RST_N_wci_Vm_11),
	    .RST_N_wci_Vm_12(),
	    .RST_N_wci_Vm_13(cp$RST_N_wci_Vm_13),
	    .RST_N_wci_Vm_14());

  // submodule edp0
  mkOCEDP4B #(.hasPush(1'd1),
	      .hasPull(1'd1),
	      .hasDebugLogic(1'd1)) edp0(.pciDevice(16'hAAAA),
					 .CLK(clkN210$clk0_buf),
					 .RST_N(cp$RST_N_wci_Vm_13),
					 .server_request_put(edp0$server_request_put),
					 .wciS0_MAddr(edp0$wciS0_MAddr),
					 .wciS0_MAddrSpace(edp0$wciS0_MAddrSpace),
					 .wciS0_MByteEn(edp0$wciS0_MByteEn),
					 .wciS0_MCmd(edp0$wciS0_MCmd),
					 .wciS0_MData(edp0$wciS0_MData),
					 .wciS0_MFlag(edp0$wciS0_MFlag),
					 .wmiS0_MAddr(edp0$wmiS0_MAddr),
					 .wmiS0_MAddrSpace(edp0$wmiS0_MAddrSpace),
					 .wmiS0_MBurstLength(edp0$wmiS0_MBurstLength),
					 .wmiS0_MCmd(edp0$wmiS0_MCmd),
					 .wmiS0_MData(edp0$wmiS0_MData),
					 .wmiS0_MDataByteEn(edp0$wmiS0_MDataByteEn),
					 .wmiS0_MReqInfo(edp0$wmiS0_MReqInfo),
					 .wmiS0_arg_mFlag(edp0$wmiS0_arg_mFlag),
					 .wtiS0_req(edp0$wtiS0_req),
					 .wmiS0_MReqLast(edp0$wmiS0_MReqLast),
					 .wmiS0_MDataValid(edp0$wmiS0_MDataValid),
					 .wmiS0_MDataLast(edp0$wmiS0_MDataLast),
					 .wmiS0_MReset_n(edp0$wmiS0_MReset_n),
					 .EN_server_request_put(edp0$EN_server_request_put),
					 .EN_server_response_get(edp0$EN_server_response_get),
					 .wciS0_SResp(edp0$wciS0_SResp),
					 .wciS0_SData(edp0$wciS0_SData),
					 .wciS0_SThreadBusy(edp0$wciS0_SThreadBusy),
					 .wciS0_SFlag(edp0$wciS0_SFlag),
					 .wtiS0_SThreadBusy(),
					 .wtiS0_SReset_n(),
					 .wmiS0_SResp(edp0$wmiS0_SResp),
					 .wmiS0_SData(edp0$wmiS0_SData),
					 .wmiS0_SThreadBusy(edp0$wmiS0_SThreadBusy),
					 .wmiS0_SDataThreadBusy(edp0$wmiS0_SDataThreadBusy),
					 .wmiS0_SRespLast(),
					 .wmiS0_SFlag(edp0$wmiS0_SFlag),
					 .wmiS0_SReset_n(edp0$wmiS0_SReset_n),
					 .RDY_server_request_put(edp0$RDY_server_request_put),
					 .server_response_get(edp0$server_response_get),
					 .RDY_server_response_get(edp0$RDY_server_response_get));

  // submodule gbe0
  mkGbeLite #(.hasDebugLogic(1'd0)) gbe0(.CLK_gmii_rx_clk(gmii_rx_clk),
					 .CLK_gmiixo_clk(gmiixo_clk$O),
					 .RST_N_gmiixo_rst(gmiixo_rst$OUT_RST_N),
					 .CLK_cpClock(clkN210$clk0_buf),
					 .RST_N_cpReset(clkN210$clk0_rstn),
					 .wciS0_Clk(gmii_sysclk),
					 .wciS0_MReset_n(gmiixo_rst$OUT_RST_N),
					 .cpClient_response_put(gbe0$cpClient_response_put),
					 .dpClient_response_put(gbe0$dpClient_response_put),
					 .gmii_col_i(gbe0$gmii_col_i),
					 .gmii_crs_i(gbe0$gmii_crs_i),
					 .gmii_intr_i(gbe0$gmii_intr_i),
					 .gmii_rx_rx_dv_i(gbe0$gmii_rx_rx_dv_i),
					 .gmii_rx_rx_er_i(gbe0$gmii_rx_rx_er_i),
					 .gmii_rx_rxd_i(gbe0$gmii_rx_rxd_i),
					 .macAddr_u(gbe0$macAddr_u),
					 .EN_macAddr(gbe0$EN_macAddr),
					 .EN_cpClient_request_get(gbe0$EN_cpClient_request_get),
					 .EN_cpClient_response_put(gbe0$EN_cpClient_response_put),
					 .EN_dpClient_request_get(gbe0$EN_dpClient_request_get),
					 .EN_dpClient_response_put(gbe0$EN_dpClient_response_put),
					 .RDY_macAddr(),
					 .cpClient_request_get(gbe0$cpClient_request_get),
					 .RDY_cpClient_request_get(gbe0$RDY_cpClient_request_get),
					 .RDY_cpClient_response_put(gbe0$RDY_cpClient_response_put),
					 .dpClient_request_get(gbe0$dpClient_request_get),
					 .RDY_dpClient_request_get(gbe0$RDY_dpClient_request_get),
					 .RDY_dpClient_response_put(gbe0$RDY_dpClient_response_put),
					 .gmii_tx_txd(gbe0$gmii_tx_txd),
					 .gmii_tx_tx_en(gbe0$gmii_tx_tx_en),
					 .gmii_tx_tx_er(gbe0$gmii_tx_tx_er),
					 .gmii_led(gbe0$gmii_led),
					 .CLK_gmii_tx_tx_clk(gbe0$CLK_gmii_tx_tx_clk),
					 .CLK_GATE_gmii_tx_tx_clk(),
					 .CLK_rxclkBnd(gbe0$CLK_rxclkBnd),
					 .CLK_GATE_rxclkBnd(),
					 .RST_N_gmii_rstn(gbe0$RST_N_gmii_rstn),
					 .mdio_mdd(mdio_mdd),
					 .mdio_mdc(mdio_mdc));

  // submodule gbewrk
  mkGbeWrk #(.hasDebugLogic(1'd1)) gbewrk(.wciS0_Clk(clkN210$clk0_buf),
					  .wciS0_MReset_n(cp$RST_N_wci_Vm_9),
					  .wciS0_MAddr(gbewrk$wciS0_MAddr),
					  .wciS0_MAddrSpace(gbewrk$wciS0_MAddrSpace),
					  .wciS0_MByteEn(gbewrk$wciS0_MByteEn),
					  .wciS0_MCmd(gbewrk$wciS0_MCmd),
					  .wciS0_MData(gbewrk$wciS0_MData),
					  .wciS0_MFlag(gbewrk$wciS0_MFlag),
					  .wciS0_SResp(gbewrk$wciS0_SResp),
					  .wciS0_SData(gbewrk$wciS0_SData),
					  .wciS0_SThreadBusy(gbewrk$wciS0_SThreadBusy),
					  .wciS0_SFlag(gbewrk$wciS0_SFlag),
					  .l2Dst(),
					  .RDY_l2Dst(),
					  .l2Typ(),
					  .RDY_l2Typ());

  // submodule gmiixo_clk
  BUFG gmiixo_clk(.I(gmii_sysclk), .O(gmiixo_clk$O));

  // submodule gmiixo_rst
  SyncResetA #(.RSTDELAY(32'd1)) gmiixo_rst(.CLK(gmiixo_clk$O),
					    .IN_RST_N(clkN210$clk0_rstn),
					    .OUT_RST_N(gmiixo_rst$OUT_RST_N));

  // submodule iqadc
  mkIQADCWorker #(.hasDebugLogic(1'd1)) iqadc(.CLK_sys0_clk(clkN210$clk0_buf),
					      .RST_N_sys0_rst(clkN210$clk0_rstn),
					      .CLK_adc_clock(clkN210$clk0_buf),
					      .RST_N_adc_reset(clkN210$clk0_rstn),
					      .CLK_adcCaptureClk(adc_clkout),
					      .wciS0_Clk(clkN210$clk0_buf),
					      .wciS0_MReset_n(cp$RST_N_wci_Vm_10),
					      .adc_da_i(iqadc$adc_da_i),
					      .adc_db_i(iqadc$adc_db_i),
					      .adc_smiso_i(iqadc$adc_smiso_i),
					      .wciS0_MAddr(iqadc$wciS0_MAddr),
					      .wciS0_MAddrSpace(iqadc$wciS0_MAddrSpace),
					      .wciS0_MByteEn(iqadc$wciS0_MByteEn),
					      .wciS0_MCmd(iqadc$wciS0_MCmd),
					      .wciS0_MData(iqadc$wciS0_MData),
					      .wciS0_MFlag(iqadc$wciS0_MFlag),
					      .wtiS0_req(iqadc$wtiS0_req),
					      .wsiM0_SThreadBusy(iqadc$wsiM0_SThreadBusy),
					      .wsiM0_SReset_n(iqadc$wsiM0_SReset_n),
					      .wciS0_SResp(iqadc$wciS0_SResp),
					      .wciS0_SData(iqadc$wciS0_SData),
					      .wciS0_SThreadBusy(iqadc$wciS0_SThreadBusy),
					      .wciS0_SFlag(iqadc$wciS0_SFlag),
					      .wtiS0_SThreadBusy(),
					      .wtiS0_SReset_n(),
					      .wsiM0_MCmd(iqadc$wsiM0_MCmd),
					      .wsiM0_MReqLast(iqadc$wsiM0_MReqLast),
					      .wsiM0_MBurstPrecise(iqadc$wsiM0_MBurstPrecise),
					      .wsiM0_MBurstLength(iqadc$wsiM0_MBurstLength),
					      .wsiM0_MData(iqadc$wsiM0_MData),
					      .wsiM0_MByteEn(iqadc$wsiM0_MByteEn),
					      .wsiM0_MReqInfo(iqadc$wsiM0_MReqInfo),
					      .wsiM0_MReset_n(iqadc$wsiM0_MReset_n),
					      .adc_oe(iqadc$adc_oe),
					      .adc_sclkgate(iqadc$adc_sclkgate),
					      .adc_resetp(iqadc$adc_resetp),
					      .adc_sen(iqadc$adc_sen),
					      .adc_smosi(iqadc$adc_smosi),
					      .CLK_adc_sclk(iqadc$CLK_adc_sclk),
					      .CLK_GATE_adc_sclk(),
					      .CLK_adc_sclkn(iqadc$CLK_adc_sclkn),
					      .CLK_GATE_adc_sclkn(),
					      .CLK_adcSdrClk(iqadc$CLK_adcSdrClk),
					      .CLK_GATE_adcSdrClk(),
					      .RST_N_adc_rst(iqadc$RST_N_adc_rst),
					      .RST_N_adcSdrRst());

  // submodule ledLogic
  mkLedN210 ledLogic(.CLK(clkN210$clk0_buf),
		     .RST_N(clkN210$clk0_rstn),
		     .ledDrive_i(ledLogic$ledDrive_i),
		     .EN_ledDrive(ledLogic$EN_ledDrive),
		     .RDY_ledDrive(),
		     .led(ledLogic$led));

  // submodule pat0_dataBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_dataBram_memory(.CLKA(clkN210$clk0_buf),
						   .CLKB(clkN210$clk0_buf),
						   .ADDRA(pat0_dataBram_memory$ADDRA),
						   .ADDRB(pat0_dataBram_memory$ADDRB),
						   .DIA(pat0_dataBram_memory$DIA),
						   .DIB(pat0_dataBram_memory$DIB),
						   .WEA(pat0_dataBram_memory$WEA),
						   .WEB(pat0_dataBram_memory$WEB),
						   .ENA(pat0_dataBram_memory$ENA),
						   .ENB(pat0_dataBram_memory$ENB),
						   .DOA(pat0_dataBram_memory$DOA),
						   .DOB(pat0_dataBram_memory$DOB));

  // submodule pat0_dataBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_dataBram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									.CLK(clkN210$clk0_buf),
									.D_IN(pat0_dataBram_serverAdapterA_outDataCore$D_IN),
									.ENQ(pat0_dataBram_serverAdapterA_outDataCore$ENQ),
									.DEQ(pat0_dataBram_serverAdapterA_outDataCore$DEQ),
									.CLR(pat0_dataBram_serverAdapterA_outDataCore$CLR),
									.D_OUT(pat0_dataBram_serverAdapterA_outDataCore$D_OUT),
									.FULL_N(pat0_dataBram_serverAdapterA_outDataCore$FULL_N),
									.EMPTY_N(pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule pat0_dataBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_dataBram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									.CLK(clkN210$clk0_buf),
									.D_IN(pat0_dataBram_serverAdapterB_outDataCore$D_IN),
									.ENQ(pat0_dataBram_serverAdapterB_outDataCore$ENQ),
									.DEQ(pat0_dataBram_serverAdapterB_outDataCore$DEQ),
									.CLR(pat0_dataBram_serverAdapterB_outDataCore$CLR),
									.D_OUT(pat0_dataBram_serverAdapterB_outDataCore$D_OUT),
									.FULL_N(pat0_dataBram_serverAdapterB_outDataCore$FULL_N),
									.EMPTY_N(pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule pat0_loopReqInFlightF
  FIFO10 #(.guarded(32'd1)) pat0_loopReqInFlightF(.RST_N(cp$RST_N_wci_Vm_5),
						  .CLK(clkN210$clk0_buf),
						  .ENQ(pat0_loopReqInFlightF$ENQ),
						  .DEQ(pat0_loopReqInFlightF$DEQ),
						  .CLR(pat0_loopReqInFlightF$CLR),
						  .FULL_N(pat0_loopReqInFlightF$FULL_N),
						  .EMPTY_N(pat0_loopReqInFlightF$EMPTY_N));

  // submodule pat0_metaBram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory(.CLKA(clkN210$clk0_buf),
						   .CLKB(clkN210$clk0_buf),
						   .ADDRA(pat0_metaBram_memory$ADDRA),
						   .ADDRB(pat0_metaBram_memory$ADDRB),
						   .DIA(pat0_metaBram_memory$DIA),
						   .DIB(pat0_metaBram_memory$DIB),
						   .WEA(pat0_metaBram_memory$WEA),
						   .WEB(pat0_metaBram_memory$WEB),
						   .ENA(pat0_metaBram_memory$ENA),
						   .ENB(pat0_metaBram_memory$ENB),
						   .DOA(pat0_metaBram_memory$DOA),
						   .DOB(pat0_metaBram_memory$DOB));

  // submodule pat0_metaBram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory_1(.CLKA(clkN210$clk0_buf),
						     .CLKB(clkN210$clk0_buf),
						     .ADDRA(pat0_metaBram_memory_1$ADDRA),
						     .ADDRB(pat0_metaBram_memory_1$ADDRB),
						     .DIA(pat0_metaBram_memory_1$DIA),
						     .DIB(pat0_metaBram_memory_1$DIB),
						     .WEA(pat0_metaBram_memory_1$WEA),
						     .WEB(pat0_metaBram_memory_1$WEB),
						     .ENA(pat0_metaBram_memory_1$ENA),
						     .ENB(pat0_metaBram_memory_1$ENB),
						     .DOA(pat0_metaBram_memory_1$DOA),
						     .DOB(pat0_metaBram_memory_1$DOB));

  // submodule pat0_metaBram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory_2(.CLKA(clkN210$clk0_buf),
						     .CLKB(clkN210$clk0_buf),
						     .ADDRA(pat0_metaBram_memory_2$ADDRA),
						     .ADDRB(pat0_metaBram_memory_2$ADDRB),
						     .DIA(pat0_metaBram_memory_2$DIA),
						     .DIB(pat0_metaBram_memory_2$DIB),
						     .WEA(pat0_metaBram_memory_2$WEA),
						     .WEB(pat0_metaBram_memory_2$WEB),
						     .ENA(pat0_metaBram_memory_2$ENA),
						     .ENB(pat0_metaBram_memory_2$ENB),
						     .DOA(pat0_metaBram_memory_2$DOA),
						     .DOB(pat0_metaBram_memory_2$DOB));

  // submodule pat0_metaBram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) pat0_metaBram_memory_3(.CLKA(clkN210$clk0_buf),
						     .CLKB(clkN210$clk0_buf),
						     .ADDRA(pat0_metaBram_memory_3$ADDRA),
						     .ADDRB(pat0_metaBram_memory_3$ADDRB),
						     .DIA(pat0_metaBram_memory_3$DIA),
						     .DIB(pat0_metaBram_memory_3$DIB),
						     .WEA(pat0_metaBram_memory_3$WEA),
						     .WEB(pat0_metaBram_memory_3$WEB),
						     .ENA(pat0_metaBram_memory_3$ENA),
						     .ENB(pat0_metaBram_memory_3$ENB),
						     .DOA(pat0_metaBram_memory_3$DOA),
						     .DOB(pat0_metaBram_memory_3$DOB));

  // submodule pat0_metaBram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									  .CLK(clkN210$clk0_buf),
									  .D_IN(pat0_metaBram_serverAdapterA_1_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterA_1_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterA_1_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterA_1_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterA_1_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									  .CLK(clkN210$clk0_buf),
									  .D_IN(pat0_metaBram_serverAdapterA_2_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterA_2_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterA_2_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterA_2_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterA_2_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									  .CLK(clkN210$clk0_buf),
									  .D_IN(pat0_metaBram_serverAdapterA_3_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterA_3_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterA_3_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterA_3_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterA_3_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									.CLK(clkN210$clk0_buf),
									.D_IN(pat0_metaBram_serverAdapterA_outDataCore$D_IN),
									.ENQ(pat0_metaBram_serverAdapterA_outDataCore$ENQ),
									.DEQ(pat0_metaBram_serverAdapterA_outDataCore$DEQ),
									.CLR(pat0_metaBram_serverAdapterA_outDataCore$CLR),
									.D_OUT(pat0_metaBram_serverAdapterA_outDataCore$D_OUT),
									.FULL_N(pat0_metaBram_serverAdapterA_outDataCore$FULL_N),
									.EMPTY_N(pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									  .CLK(clkN210$clk0_buf),
									  .D_IN(pat0_metaBram_serverAdapterB_1_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterB_1_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterB_1_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterB_1_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterB_1_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									  .CLK(clkN210$clk0_buf),
									  .D_IN(pat0_metaBram_serverAdapterB_2_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterB_2_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterB_2_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterB_2_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterB_2_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									  .CLK(clkN210$clk0_buf),
									  .D_IN(pat0_metaBram_serverAdapterB_3_outDataCore$D_IN),
									  .ENQ(pat0_metaBram_serverAdapterB_3_outDataCore$ENQ),
									  .DEQ(pat0_metaBram_serverAdapterB_3_outDataCore$DEQ),
									  .CLR(pat0_metaBram_serverAdapterB_3_outDataCore$CLR),
									  .D_OUT(pat0_metaBram_serverAdapterB_3_outDataCore$D_OUT),
									  .FULL_N(pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N),
									  .EMPTY_N(pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule pat0_metaBram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_metaBram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_5),
									.CLK(clkN210$clk0_buf),
									.D_IN(pat0_metaBram_serverAdapterB_outDataCore$D_IN),
									.ENQ(pat0_metaBram_serverAdapterB_outDataCore$ENQ),
									.DEQ(pat0_metaBram_serverAdapterB_outDataCore$DEQ),
									.CLR(pat0_metaBram_serverAdapterB_outDataCore$CLR),
									.D_OUT(pat0_metaBram_serverAdapterB_outDataCore$D_OUT),
									.FULL_N(pat0_metaBram_serverAdapterB_outDataCore$FULL_N),
									.EMPTY_N(pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule pat0_metaReqInFlightF
  FIFO10 #(.guarded(32'd1)) pat0_metaReqInFlightF(.RST_N(cp$RST_N_wci_Vm_5),
						  .CLK(clkN210$clk0_buf),
						  .ENQ(pat0_metaReqInFlightF$ENQ),
						  .DEQ(pat0_metaReqInFlightF$DEQ),
						  .CLR(pat0_metaReqInFlightF$CLR),
						  .FULL_N(pat0_metaReqInFlightF$FULL_N),
						  .EMPTY_N(pat0_metaReqInFlightF$EMPTY_N));

  // submodule pat0_splaF
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) pat0_splaF(.RST_N(cp$RST_N_wci_Vm_5),
				      .CLK(clkN210$clk0_buf),
				      .D_IN(pat0_splaF$D_IN),
				      .ENQ(pat0_splaF$ENQ),
				      .DEQ(pat0_splaF$DEQ),
				      .CLR(pat0_splaF$CLR),
				      .D_OUT(pat0_splaF$D_OUT),
				      .FULL_N(pat0_splaF$FULL_N),
				      .EMPTY_N(pat0_splaF$EMPTY_N));

  // submodule pat0_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pat0_wci_wslv_reqF(.RST_N(cp$RST_N_wci_Vm_5),
						  .CLK(clkN210$clk0_buf),
						  .D_IN(pat0_wci_wslv_reqF$D_IN),
						  .ENQ(pat0_wci_wslv_reqF$ENQ),
						  .DEQ(pat0_wci_wslv_reqF$DEQ),
						  .CLR(pat0_wci_wslv_reqF$CLR),
						  .D_OUT(pat0_wci_wslv_reqF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(pat0_wci_wslv_reqF$EMPTY_N));

  // submodule pwrk
  mkPWrk_n210 pwrk(.RST_N_sys0_rst(clkN210$clk0_rstn),
		   .wciS0_Clk(clkN210$clk0_buf),
		   .wciS0_MReset_n(cp$RST_N_wci_Vm_7),
		   .spipad_miso_i(pwrk$spipad_miso_i),
		   .wciS0_MAddr(pwrk$wciS0_MAddr),
		   .wciS0_MAddrSpace(pwrk$wciS0_MAddrSpace),
		   .wciS0_MByteEn(pwrk$wciS0_MByteEn),
		   .wciS0_MCmd(pwrk$wciS0_MCmd),
		   .wciS0_MData(pwrk$wciS0_MData),
		   .wciS0_MFlag(pwrk$wciS0_MFlag),
		   .macAddr(pwrk$macAddr),
		   .RDY_macAddr(),
		   .wciS0_SResp(pwrk$wciS0_SResp),
		   .wciS0_SData(pwrk$wciS0_SData),
		   .wciS0_SThreadBusy(pwrk$wciS0_SThreadBusy),
		   .wciS0_SFlag(pwrk$wciS0_SFlag),
		   .spipad_mosi(pwrk$spipad_mosi),
		   .spipad_clk(pwrk$spipad_clk),
		   .spipad_csn(pwrk$spipad_csn),
		   .i2cpad_sda(i2c_sda),
		   .i2cpad_scl(i2c_scl));

  // submodule sma0_mesgTokenF
  FIFO10 #(.guarded(32'd1)) sma0_mesgTokenF(.RST_N(cp$RST_N_wci_Vm_6),
					    .CLK(clkN210$clk0_buf),
					    .ENQ(sma0_mesgTokenF$ENQ),
					    .DEQ(sma0_mesgTokenF$DEQ),
					    .CLR(sma0_mesgTokenF$CLR),
					    .FULL_N(sma0_mesgTokenF$FULL_N),
					    .EMPTY_N(sma0_mesgTokenF$EMPTY_N));

  // submodule sma0_respF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd61),
	  .MEMSIZE(12'd2048)) sma0_respF_memory(.CLKA(clkN210$clk0_buf),
						.CLKB(clkN210$clk0_buf),
						.ADDRA(sma0_respF_memory$ADDRA),
						.ADDRB(sma0_respF_memory$ADDRB),
						.DIA(sma0_respF_memory$DIA),
						.DIB(sma0_respF_memory$DIB),
						.WEA(sma0_respF_memory$WEA),
						.WEB(sma0_respF_memory$WEB),
						.ENA(sma0_respF_memory$ENA),
						.ENB(sma0_respF_memory$ENB),
						.DOA(),
						.DOB(sma0_respF_memory$DOB));

  // submodule sma0_wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) sma0_wci_wslv_reqF(.RST_N(cp$RST_N_wci_Vm_6),
						  .CLK(clkN210$clk0_buf),
						  .D_IN(sma0_wci_wslv_reqF$D_IN),
						  .ENQ(sma0_wci_wslv_reqF$ENQ),
						  .DEQ(sma0_wci_wslv_reqF$DEQ),
						  .CLR(sma0_wci_wslv_reqF$CLR),
						  .D_OUT(sma0_wci_wslv_reqF$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(sma0_wci_wslv_reqF$EMPTY_N));

  // submodule sma0_wmi_respF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) sma0_wmi_respF(.RST_N(cp$RST_N_wci_Vm_6),
					  .CLK(clkN210$clk0_buf),
					  .D_IN(sma0_wmi_respF$D_IN),
					  .ENQ(sma0_wmi_respF$ENQ),
					  .DEQ(sma0_wmi_respF$DEQ),
					  .CLR(sma0_wmi_respF$CLR),
					  .D_OUT(sma0_wmi_respF$D_OUT),
					  .FULL_N(sma0_wmi_respF$FULL_N),
					  .EMPTY_N(sma0_wmi_respF$EMPTY_N));

  // submodule sma0_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) sma0_wsiS_reqFifo(.RST_N(cp$RST_N_wci_Vm_6),
						 .CLK(clkN210$clk0_buf),
						 .D_IN(sma0_wsiS_reqFifo$D_IN),
						 .ENQ(sma0_wsiS_reqFifo$ENQ),
						 .DEQ(sma0_wsiS_reqFifo$DEQ),
						 .CLR(sma0_wsiS_reqFifo$CLR),
						 .D_OUT(sma0_wsiS_reqFifo$D_OUT),
						 .FULL_N(sma0_wsiS_reqFifo$FULL_N),
						 .EMPTY_N(sma0_wsiS_reqFifo$EMPTY_N));

  // rule RL_pat0_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start =
	     pat0_wci_wslv_reqF$EMPTY_N && pat0_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wci_ctrl_IsO
  assign WILL_FIRE_RL_pat0_wci_ctrl_IsO =
	     pat0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     pat0_wci_wslv_cState == 3'd1 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_pat0_wci_ctrl_OrE
  assign WILL_FIRE_RL_pat0_wci_ctrl_OrE =
	     pat0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     pat0_wci_wslv_cState == 3'd2 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_pat0_wci_cfrd
  assign CAN_FIRE_RL_pat0_wci_cfrd =
	     pat0_wci_wslv_reqF$EMPTY_N &&
	     IF_pat0_wci_wslv_reqF_first__3_BITS_63_TO_52_0_ETC___d1135 &&
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 ||
	      pat0_wci_wslv_respF_c_r != 2'd2) &&
	     pat0_wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_pat0_wci_cfrd =
	     CAN_FIRE_RL_pat0_wci_cfrd &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_deq =
	     pat0_wsiM_reqFifo_c_r != 2'd0 && !pat0_wsiM_sThreadBusy_d ;

  // rule RL_pat0_wci_ctrl_EiI
  assign WILL_FIRE_RL_pat0_wci_ctrl_EiI =
	     pat0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     pat0_wci_wslv_cState == 3'd0 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways
  assign WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways =
	     (pat0_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     pat0_bytesRemain != 32'd0 ;

  // rule RL_pat0_doMessageEmit
  assign WILL_FIRE_RL_pat0_doMessageEmit =
	     pat0_wsiM_reqFifo_c_r != 2'd2 &&
	     pat0_doZLM_12_OR_pat0_dataBram_serverAdapterA__ETC___d926 &&
	     pat0_wci_wslv_cState == 3'd2 ;

  // rule RL_pat0_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr =
	     ((pat0_wsiM_reqFifo_c_r == 2'd0) ?
		WILL_FIRE_RL_pat0_doMessageEmit :
		pat0_wsiM_reqFifo_c_r != 2'd1 ||
		WILL_FIRE_RL_pat0_doMessageEmit) &&
	     WILL_FIRE_RL_pat0_doMessageEmit &&
	     !WILL_FIRE_RL_pat0_wsiM_reqFifo_deq ;

  // rule RL_pat0_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     !WILL_FIRE_RL_pat0_doMessageEmit ;

  // rule RL_pat0_wsiM_reqFifo_both
  assign WILL_FIRE_RL_pat0_wsiM_reqFifo_both =
	     ((pat0_wsiM_reqFifo_c_r == 2'd1) ?
		WILL_FIRE_RL_pat0_doMessageEmit :
		pat0_wsiM_reqFifo_c_r != 2'd2 ||
		WILL_FIRE_RL_pat0_doMessageEmit) &&
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     WILL_FIRE_RL_pat0_doMessageEmit ;

  // rule RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq =
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterA_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways =
	     (pat0_metaBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (pat0_metaBram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 &&
	     (pat0_metaBram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 &&
	     (pat0_metaBram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 &&
	     pat0_metaReqInFlightF$FULL_N &&
	     pat0_loopReqInFlightF$FULL_N &&
	     pat0_wci_wslv_cState == 3'd2 &&
	     pat0_controlReg[0] &&
	     pat0_mesgRemain != 32'd0 ;

  // rule RL_pat0_resp_meta
  assign WILL_FIRE_RL_pat0_resp_meta =
	     pat0_metaReqInFlightF_i_notEmpty__67_AND_pat0__ETC___d883 &&
	     pat0_wci_wslv_cState == 3'd2 &&
	     pat0_mesgRemain != 32'd0 ;

  // rule RL_pat0_wci_cfwr
  assign CAN_FIRE_RL_pat0_wci_cfwr =
	     pat0_wci_wslv_respF_c_r != 2'd2 && pat0_wci_wslv_reqF$EMPTY_N &&
	     ((pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
		pat0_dataBram_serverAdapterB_cnt_41_SLT_3___d2278 :
		pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518) &&
	     pat0_wci_wslv_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_pat0_wci_cfwr =
	     CAN_FIRE_RL_pat0_wci_cfwr &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete =
	     pat0_wci_wslv_respF_c_r != 2'd2 && pat0_wci_wslv_ctlOpActive &&
	     pat0_wci_wslv_ctlAckReg ;

  // rule RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;

  // rule RL_pat0_advance_split_response
  assign WILL_FIRE_RL_pat0_advance_split_response =
	     pat0_wci_wslv_respF_c_r != 2'd2 &&
	     pat0_splaF_i_notEmpty__014_AND_IF_pat0_splaF_f_ETC___d1047 &&
	     !pat0_wci_wslv_wci_cfwr_pw$whas &&
	     pat0_splitReadInFlight &&
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;

  // rule RL_pat0_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr =
	     ((pat0_wci_wslv_respF_c_r == 2'd0) ?
		pat0_wci_wslv_respF_x_wire$whas :
		pat0_wci_wslv_respF_c_r != 2'd1 ||
		pat0_wci_wslv_respF_x_wire$whas) &&
	     pat0_wci_wslv_respF_enqueueing$whas &&
	     !(pat0_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_pat0_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr =
	     pat0_wci_wslv_respF_c_r != 2'd0 &&
	     !pat0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_pat0_wci_wslv_respF_both
  assign WILL_FIRE_RL_pat0_wci_wslv_respF_both =
	     ((pat0_wci_wslv_respF_c_r == 2'd1) ?
		pat0_wci_wslv_respF_x_wire$whas :
		pat0_wci_wslv_respF_c_r != 2'd2 ||
		pat0_wci_wslv_respF_x_wire$whas) &&
	     pat0_wci_wslv_respF_c_r != 2'd0 &&
	     pat0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq =
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;

  // rule RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq
  assign WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq =
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;

  // rule RL_sma0_wmrd_mesgBodyPreRequest
  assign CAN_FIRE_RL_sma0_wmrd_mesgBodyPreRequest =
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h1 || sma0_smaCtrl[3:0] == 4'h4 ||
	      sma0_smaCtrl[3:0] == 4'h9) &&
	     sma0_fabWordsRemain != 14'd0 &&
	     (sma0_fabRespCredit_value ^ 12'h800) > 12'd2048 &&
	     sma0_mesgReqOK ;

  // rule RL_sma0_wmrd_mesgBodyRequest
  assign WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest =
	     NOT_sma0_wmi_reqF_c_r_341_EQ_2_359_360_AND_sma_ETC___d1706 &&
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h1 || sma0_smaCtrl[3:0] == 4'h4 ||
	      sma0_smaCtrl[3:0] == 4'h9) &&
	     sma0_mesgPreRequest ;

  // rule RL_sma0_wci_wslv_ctl_op_start
  assign WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start =
	     sma0_wci_wslv_reqF$EMPTY_N && sma0_wci_wslv_wci_ctrl_pw$whas &&
	     !WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete ;

  // rule RL_sma0_wci_ctrl_EiI
  assign WILL_FIRE_RL_sma0_wci_ctrl_EiI =
	     sma0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start &&
	     sma0_wci_wslv_cState == 3'd0 &&
	     sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;

  // rule RL_sma0_wci_ctrl_OrE
  assign WILL_FIRE_RL_sma0_wci_ctrl_OrE =
	     sma0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start &&
	     sma0_wci_wslv_cState == 3'd2 &&
	     sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;

  // rule RL_sma0_wmi_reqF_deq
  assign WILL_FIRE_RL_sma0_wmi_reqF_deq =
	     sma0_wmi_operateD && sma0_wmi_peerIsReady &&
	     !sma0_wmi_sThreadBusy_d ;

  // rule RL_sma0_wsiM_reqFifo_deq
  assign WILL_FIRE_RL_sma0_wsiM_reqFifo_deq =
	     sma0_wsiM_reqFifo_c_r != 2'd0 && !sma0_wsiM_sThreadBusy_d ;

  // rule RL_sma0_wsipass_doMessagePush
  assign WILL_FIRE_RL_sma0_wsipass_doMessagePush =
	     sma0_wsiS_reqFifo$EMPTY_N &&
	     (sma0_smaCtrl[4] || sma0_wsiM_reqFifo_c_r != 2'd2) &&
	     sma0_wci_wslv_cState == 3'd2 &&
	     sma0_smaCtrl[3:0] == 4'h0 ;

  // rule RL_sma0_wci_cfrd
  assign WILL_FIRE_RL_sma0_wci_cfrd =
	     sma0_wci_wslv_respF_c_r != 2'd2 && sma0_wci_wslv_reqF$EMPTY_N &&
	     sma0_wci_wslv_wci_cfrd_pw$whas &&
	     !WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete ;

  // rule RL_sma0_wmrd_mesgBegin
  assign WILL_FIRE_RL_sma0_wmrd_mesgBegin =
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h1 || sma0_smaCtrl[3:0] == 4'h4 ||
	      sma0_smaCtrl[3:0] == 4'h9) &&
	     !sma0_wmi_sThreadBusy_d &&
	     !sma0_wmi_sDataThreadBusy_d &&
	     sma0_unrollCnt == 16'd0 ;

  // rule RL_sma0_wmrd_mesgBodyResponse
  assign WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse =
	     sma0_wmi_respF_i_notEmpty__718_AND_sma0_smaCtr_ETC___d1723 &&
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h1 || sma0_smaCtrl[3:0] == 4'h4 ||
	      sma0_smaCtrl[3:0] == 4'h9) &&
	     sma0_unrollCnt != 16'd0 ;

  // rule RL_sma0_wmwt_mesgBegin
  assign CAN_FIRE_RL_sma0_wmwt_mesgBegin =
	     sma0_wsiS_reqFifo$EMPTY_N && sma0_mesgTokenF$FULL_N &&
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h2 || sma0_smaCtrl[3:0] == 4'h3) &&
	     !sma0_wmi_sThreadBusy_d &&
	     !sma0_wmi_sDataThreadBusy_d &&
	     !sma0_opcode[8] ;
  assign WILL_FIRE_RL_sma0_wmwt_mesgBegin =
	     CAN_FIRE_RL_sma0_wmwt_mesgBegin &&
	     !WILL_FIRE_RL_sma0_wmwt_messagePush ;

  // rule RL_sma0_wmwt_messagePush
  assign CAN_FIRE_RL_sma0_wmwt_messagePush =
	     sma0_wmi_reqF_c_r != 2'd2 && sma0_wmi_dhF_c_r != 2'd2 &&
	     sma0_wmi_operateD &&
	     sma0_wmi_peerIsReady &&
	     sma0_wsiS_reqFifo_i_notEmpty__646_AND_NOT_sma0_ETC___d1851 &&
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h2 || sma0_smaCtrl[3:0] == 4'h3) &&
	     sma0_readyToPush ;
  assign WILL_FIRE_RL_sma0_wmwt_messagePush =
	     CAN_FIRE_RL_sma0_wmwt_messagePush &&
	     !WILL_FIRE_RL_sma0_wmwt_messageFinalize ;

  // rule RL_sma0_wmwt_doAbort
  assign WILL_FIRE_RL_sma0_wmwt_doAbort =
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h2 || sma0_smaCtrl[3:0] == 4'h3) &&
	     sma0_doAbort ;

  // rule RL_sma0_wmwt_messageFinalize
  assign WILL_FIRE_RL_sma0_wmwt_messageFinalize =
	     sma0_mesgTokenF$EMPTY_N && sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h2 || sma0_smaCtrl[3:0] == 4'h3) &&
	     !sma0_doAbort &&
	     sma0_endOfMessage ;

  // rule RL_sma0_wmi_reqF_incCtr
  assign WILL_FIRE_RL_sma0_wmi_reqF_incCtr =
	     ((sma0_wmi_reqF_c_r == 2'd0) ?
		sma0_wmi_reqF_x_wire$whas :
		sma0_wmi_reqF_c_r != 2'd1 || sma0_wmi_reqF_x_wire$whas) &&
	     sma0_wmi_reqF_enqueueing$whas &&
	     !sma0_wmi_reqF_dequeueing$whas ;

  // rule RL_sma0_wmi_reqF_decCtr
  assign WILL_FIRE_RL_sma0_wmi_reqF_decCtr =
	     sma0_wmi_reqF_dequeueing$whas && !sma0_wmi_reqF_enqueueing$whas ;

  // rule RL_sma0_wmi_reqF_both
  assign WILL_FIRE_RL_sma0_wmi_reqF_both =
	     ((sma0_wmi_reqF_c_r == 2'd1) ?
		sma0_wmi_reqF_x_wire$whas :
		sma0_wmi_reqF_c_r != 2'd2 || sma0_wmi_reqF_x_wire$whas) &&
	     sma0_wmi_reqF_dequeueing$whas &&
	     sma0_wmi_reqF_enqueueing$whas ;

  // rule RL_sma0_wmi_mFlagF_incCtr
  assign WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr =
	     ((sma0_wmi_mFlagF_c_r == 2'd0) ?
		sma0_wmi_mFlagF_enqueueing$whas :
		sma0_wmi_mFlagF_c_r != 2'd1 ||
		sma0_wmi_mFlagF_enqueueing$whas) &&
	     sma0_wmi_mFlagF_enqueueing$whas &&
	     !sma0_wmi_mFlagF_dequeueing$whas ;

  // rule RL_sma0_wmi_mFlagF_decCtr
  assign WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr =
	     sma0_wmi_mFlagF_dequeueing$whas &&
	     !sma0_wmi_mFlagF_enqueueing$whas ;

  // rule RL_sma0_wmi_mFlagF_both
  assign WILL_FIRE_RL_sma0_wmi_mFlagF_both =
	     ((sma0_wmi_mFlagF_c_r == 2'd1) ?
		sma0_wmi_mFlagF_enqueueing$whas :
		sma0_wmi_mFlagF_c_r != 2'd2 ||
		sma0_wmi_mFlagF_enqueueing$whas) &&
	     sma0_wmi_mFlagF_dequeueing$whas &&
	     sma0_wmi_mFlagF_enqueueing$whas ;

  // rule RL_sma0_wmi_dhF_incCtr
  assign WILL_FIRE_RL_sma0_wmi_dhF_incCtr =
	     ((sma0_wmi_dhF_c_r == 2'd0) ?
		WILL_FIRE_RL_sma0_wmwt_messagePush :
		sma0_wmi_dhF_c_r != 2'd1 ||
		WILL_FIRE_RL_sma0_wmwt_messagePush) &&
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     !sma0_wmi_dhF_dequeueing$whas ;

  // rule RL_sma0_wmi_dhF_decCtr
  assign WILL_FIRE_RL_sma0_wmi_dhF_decCtr =
	     sma0_wmi_dhF_dequeueing$whas &&
	     !WILL_FIRE_RL_sma0_wmwt_messagePush ;

  // rule RL_sma0_wmi_dhF_both
  assign WILL_FIRE_RL_sma0_wmi_dhF_both =
	     ((sma0_wmi_dhF_c_r == 2'd1) ?
		WILL_FIRE_RL_sma0_wmwt_messagePush :
		sma0_wmi_dhF_c_r != 2'd2 ||
		WILL_FIRE_RL_sma0_wmwt_messagePush) &&
	     sma0_wmi_dhF_dequeueing$whas &&
	     WILL_FIRE_RL_sma0_wmwt_messagePush ;

  // rule RL_sma0_wmrd_mesgResptoWsi
  assign WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi =
	     sma0_wsiM_reqFifo_c_r != 2'd2 &&
	     sma0_respF_rRdPtr != sma0_respF_rWrPtr &&
	     sma0_wci_wslv_cState == 3'd2 &&
	     (sma0_smaCtrl[3:0] == 4'h1 || sma0_smaCtrl[3:0] == 4'h4 ||
	      sma0_smaCtrl[3:0] == 4'h9) ;

  // rule RL_sma0_wci_cfwr
  assign WILL_FIRE_RL_sma0_wci_cfwr =
	     sma0_wci_wslv_respF_c_r != 2'd2 && sma0_wci_wslv_reqF$EMPTY_N &&
	     sma0_wci_wslv_wci_cfwr_pw$whas &&
	     !WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete ;

  // rule RL_sma0_wsiM_reqFifo_incCtr
  assign WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr =
	     ((sma0_wsiM_reqFifo_c_r == 2'd0) ?
		sma0_wsiM_reqFifo_enqueueing$whas :
		sma0_wsiM_reqFifo_c_r != 2'd1 ||
		sma0_wsiM_reqFifo_enqueueing$whas) &&
	     sma0_wsiM_reqFifo_enqueueing$whas &&
	     !WILL_FIRE_RL_sma0_wsiM_reqFifo_deq ;

  // rule RL_sma0_wsiM_reqFifo_decCtr
  assign WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_deq &&
	     !sma0_wsiM_reqFifo_enqueueing$whas ;

  // rule RL_sma0_wsiM_reqFifo_both
  assign WILL_FIRE_RL_sma0_wsiM_reqFifo_both =
	     ((sma0_wsiM_reqFifo_c_r == 2'd1) ?
		sma0_wsiM_reqFifo_enqueueing$whas :
		sma0_wsiM_reqFifo_c_r != 2'd2 ||
		sma0_wsiM_reqFifo_enqueueing$whas) &&
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_deq &&
	     sma0_wsiM_reqFifo_enqueueing$whas ;

  // rule RL_sma0_wci_ctrl_IsO
  assign WILL_FIRE_RL_sma0_wci_ctrl_IsO =
	     sma0_wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start &&
	     sma0_wci_wslv_cState == 3'd1 &&
	     sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;

  // rule RL_sma0_wci_wslv_ctl_op_complete
  assign WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete =
	     sma0_wci_wslv_respF_c_r != 2'd2 && sma0_wci_wslv_ctlOpActive &&
	     sma0_wci_wslv_ctlAckReg ;

  // rule RL_sma0_wci_wslv_respF_incCtr
  assign WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr =
	     ((sma0_wci_wslv_respF_c_r == 2'd0) ?
		sma0_wci_wslv_respF_x_wire$whas :
		sma0_wci_wslv_respF_c_r != 2'd1 ||
		sma0_wci_wslv_respF_x_wire$whas) &&
	     sma0_wci_wslv_respF_enqueueing$whas &&
	     !(sma0_wci_wslv_respF_c_r != 2'd0) ;

  // rule RL_sma0_wci_wslv_respF_decCtr
  assign WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr =
	     sma0_wci_wslv_respF_c_r != 2'd0 &&
	     !sma0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_sma0_wci_wslv_respF_both
  assign WILL_FIRE_RL_sma0_wci_wslv_respF_both =
	     ((sma0_wci_wslv_respF_c_r == 2'd1) ?
		sma0_wci_wslv_respF_x_wire$whas :
		sma0_wci_wslv_respF_c_r != 2'd2 ||
		sma0_wci_wslv_respF_x_wire$whas) &&
	     sma0_wci_wslv_respF_c_r != 2'd0 &&
	     sma0_wci_wslv_respF_enqueueing$whas ;

  // rule RL_sma0_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_sma0_wsiS_reqFifo_enq =
	     sma0_wsiS_reqFifo$FULL_N && sma0_wsiS_operateD &&
	     sma0_wsiS_peerIsReady &&
	     sma0_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_sma0_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_sma0_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ||
	     sma0_wsiS_reqFifo_r_deq$whas ;

  // inputs to muxes for submodule ports
  assign MUX_pat0_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_pat0_dataBram_memory$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;
  assign MUX_pat0_dataBram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;
  assign MUX_pat0_dataCount$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0C ;
  assign MUX_pat0_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;
  assign MUX_pat0_mesgCount$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1 ;
  assign MUX_pat0_mesgRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h10 ;
  assign MUX_pat0_metaBram_memory$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;
  assign MUX_pat0_metaBram_memory$b_put_2__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;
  assign MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;
  assign MUX_pat0_metaBram_memory_1$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;
  assign MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;
  assign MUX_pat0_metaBram_memory_2$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;
  assign MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;
  assign MUX_pat0_metaBram_memory_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;
  assign MUX_pat0_metaPtr_modulus$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_pat0_splitReadInFlight$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ;
  assign MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	     pat0_wci_wslv_illegalEdge ;
  assign MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     (pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      pat0_wci_wslv_cState != 3'd0 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      pat0_wci_wslv_cState != 3'd1 &&
	      pat0_wci_wslv_cState != 3'd3 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      pat0_wci_wslv_cState != 3'd2 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      pat0_wci_wslv_cState != 3'd3 &&
	      pat0_wci_wslv_cState != 3'd2 &&
	      pat0_wci_wslv_cState != 3'd1 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ;
  assign MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_sma0_endOfMessage$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_wsiS_reqFifo$D_OUT[57] ;
  assign MUX_sma0_mesgCount$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse &&
	     sma0_unrollCnt == 16'd1 ;
  assign MUX_sma0_mesgReqOK$write_1__SEL_3 =
	     CAN_FIRE_RL_sma0_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ;
  assign MUX_sma0_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete &&
	     sma0_wci_wslv_illegalEdge ;
  assign MUX_sma0_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start &&
	     (sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      sma0_wci_wslv_cState != 3'd0 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      sma0_wci_wslv_cState != 3'd1 &&
	      sma0_wci_wslv_cState != 3'd3 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      sma0_wci_wslv_cState != 3'd2 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      sma0_wci_wslv_cState != 3'd3 &&
	      sma0_wci_wslv_cState != 3'd2 &&
	      sma0_wci_wslv_cState != 3'd1 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_sma0_wci_wslv_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr &&
	     sma0_wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_sma0_wci_wslv_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr &&
	     sma0_wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_sma0_wmi_dhF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmi_dhF_incCtr && sma0_wmi_dhF_c_r == 2'd0 ;
  assign MUX_sma0_wmi_dhF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmi_dhF_incCtr && sma0_wmi_dhF_c_r == 2'd1 ;
  assign MUX_sma0_wmi_mFlagF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr &&
	     sma0_wmi_mFlagF_c_r == 2'd0 ;
  assign MUX_sma0_wmi_mFlagF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr &&
	     sma0_wmi_mFlagF_c_r == 2'd1 ;
  assign MUX_sma0_wmi_mFlagF_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest && x__h52929 ;
  assign MUX_sma0_wmi_reqF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmi_reqF_incCtr && sma0_wmi_reqF_c_r == 2'd0 ;
  assign MUX_sma0_wmi_reqF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmi_reqF_incCtr && sma0_wmi_reqF_c_r == 2'd1 ;
  assign MUX_sma0_wsiM_reqFifo_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr &&
	     sma0_wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_sma0_wsiM_reqFifo_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr &&
	     sma0_wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_sma0_wsiM_reqFifo_x_wire$wset_1__SEL_1 =
	     WILL_FIRE_RL_sma0_wmwt_messagePush && sma0_smaCtrl[3:0] == 4'h3 ;
  assign MUX_sma0_wsiM_reqFifo_x_wire$wset_1__SEL_2 =
	     WILL_FIRE_RL_sma0_wsipass_doMessagePush && !sma0_smaCtrl[4] ;
  assign MUX_pat0_bytesRemain$write_1__VAL_2 =
	     (pat0_bytesRemain < 32'd4) ? 32'd0 : pat0_bytesRemain - 32'd4 ;
  assign MUX_pat0_dataCount$write_1__VAL_2 = pat0_dataCount + 32'd1 ;
  assign MUX_pat0_mesgCount$write_1__VAL_2 = pat0_mesgCount + 32'd1 ;
  assign MUX_pat0_mesgRemain$write_1__VAL_2 = pat0_mesgRemain - 32'd1 ;
  assign MUX_pat0_metaPtr_modulus$write_1__VAL_1 =
	     pat0_wci_wslv_reqF$D_OUT[15:0] - 16'd1 ;
  assign MUX_pat0_metaPtr_value$write_1__VAL_3 =
	     (pat0_metaPtr_value == pat0_metaPtr_modulus) ?
	       16'd0 :
	       pat0_metaPtr_value + 16'd1 ;
  assign MUX_pat0_unrollCnt$write_1__VAL_1 =
	     (v__h26543 == 32'd0) ? 16'd1 : b__h27160[15:0] ;
  assign MUX_pat0_unrollCnt$write_1__VAL_2 = pat0_unrollCnt - 16'd1 ;
  assign MUX_pat0_wci_wslv_illegalEdge$write_1__VAL_2 =
	     pat0_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     pat0_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_1 =
	     pat0_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_2 =
	     pat0_wci_wslv_respF_c_r - 2'd1 ;
  always@(MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1 or
	  MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete or
	  MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_pat0_advance_split_response or
	  MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3 or
	  WILL_FIRE_RL_pat0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pat0_wci_wslv_respF_x_wire$wset_1__SEL_1:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_pat0_advance_split_response:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3;
      WILL_FIRE_RL_pat0_wci_cfwr:
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 =
	     (pat0_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 :
	       pat0_wci_wslv_respF_q_1 ;
  assign MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_2 =
	     (pat0_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, g_data__h34295 } ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     pat0_wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_pat0_wci_wslv_respF_x_wire$wset_1__VAL_3 = { 2'd1, v__h30908 } ;
  assign MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     pat0_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     pat0_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     { 3'd1,
	       pat0_unrollCnt == 16'd1,
	       1'd0,
	       x_burstLength__h27936,
	       pat0_dataBram_serverAdapterA_outData_outData$wget,
	       x_byteEn__h27938,
	       pat0_thisOpcode[7:0] } ;
  assign MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (pat0_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       pat0_wsiM_reqFifo_q_1 ;
  assign MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (pat0_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_sma0_fabRespCredit_value$write_1__VAL_2 =
	     sma0_fabRespCredit_value +
	     (WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ? b__h49573 : 12'd0) +
	     (WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi ? 12'd1 : 12'd0) ;
  assign MUX_sma0_fabWordsRemain$write_1__VAL_1 =
	     (sma0_wmi_sFlagReg[23:0] == 24'd0) ? 14'd1 : b__h52385[13:0] ;
  assign MUX_sma0_fabWordsRemain$write_1__VAL_2 =
	     sma0_fabWordsRemain - sma0_fabWordsCurReq ;
  assign MUX_sma0_mesgCount$write_1__VAL_1 = sma0_mesgCount + 32'd1 ;
  assign MUX_sma0_mesgReqAddr$write_1__VAL_2 =
	     sma0_mesgReqAddr + { sma0_fabWordsCurReq[11:0], 2'd0 } ;
  assign MUX_sma0_opcode$write_1__VAL_3 =
	     { 1'd1, sma0_wsiS_reqFifo$D_OUT[7:0] } ;
  assign MUX_sma0_thisMesg$write_1__VAL_1 =
	     { sma0_mesgCount[7:0],
	       mesgMetaF_opcode__h56966,
	       x_length__h57367 } ;
  assign MUX_sma0_thisMesg$write_1__VAL_2 =
	     { sma0_mesgCount[7:0],
	       sma0_wmi_sFlagReg[31:24],
	       sma0_wmi_sFlagReg[15:0] } ;
  assign MUX_sma0_unrollCnt$write_1__VAL_1 =
	     (sma0_wmi_sFlagReg[23:0] == 24'd0) ? 16'd1 : b__h52385[15:0] ;
  assign MUX_sma0_unrollCnt$write_1__VAL_2 = sma0_unrollCnt - 16'd1 ;
  assign MUX_sma0_wci_wslv_illegalEdge$write_1__VAL_2 =
	     sma0_wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     sma0_wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     sma0_wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_sma0_wci_wslv_respF_c_r$write_1__VAL_1 =
	     sma0_wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_sma0_wci_wslv_respF_c_r$write_1__VAL_2 =
	     sma0_wci_wslv_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete or
	  MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wci_cfrd or
	  MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete:
	  MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_sma0_wci_cfrd:
	  MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_sma0_wci_cfwr:
	  MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_2 =
	     (sma0_wci_wslv_respF_c_r == 2'd1) ?
	       MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 :
	       sma0_wci_wslv_respF_q_1 ;
  assign MUX_sma0_wci_wslv_respF_q_1$write_1__VAL_2 =
	     (sma0_wci_wslv_respF_c_r == 2'd2) ?
	       MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     sma0_wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_sma0_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, g_data__h58336 } ;
  assign MUX_sma0_wmi_dhF_c_r$write_1__VAL_1 = sma0_wmi_dhF_c_r + 2'd1 ;
  assign MUX_sma0_wmi_dhF_c_r$write_1__VAL_2 = sma0_wmi_dhF_c_r - 2'd1 ;
  assign MUX_sma0_wmi_dhF_q_0$write_1__VAL_1 =
	     { 1'd1,
	       sma0_wsiS_reqFifo$D_OUT[57],
	       sma0_wsiS_reqFifo$D_OUT[43:8] } ;
  assign MUX_sma0_wmi_dhF_q_0$write_1__VAL_2 =
	     (sma0_wmi_dhF_c_r == 2'd1) ?
	       MUX_sma0_wmi_dhF_q_0$write_1__VAL_1 :
	       sma0_wmi_dhF_q_1 ;
  assign MUX_sma0_wmi_dhF_q_1$write_1__VAL_2 =
	     (sma0_wmi_dhF_c_r == 2'd2) ?
	       MUX_sma0_wmi_dhF_q_0$write_1__VAL_1 :
	       38'd0 ;
  assign MUX_sma0_wmi_mFlagF_c_r$write_1__VAL_1 = sma0_wmi_mFlagF_c_r + 2'd1 ;
  assign MUX_sma0_wmi_mFlagF_c_r$write_1__VAL_2 = sma0_wmi_mFlagF_c_r - 2'd1 ;
  assign MUX_sma0_wmi_mFlagF_q_0$write_1__VAL_2 =
	     (sma0_wmi_mFlagF_c_r == 2'd1) ?
	       value__h41066 :
	       sma0_wmi_mFlagF_q_1 ;
  assign MUX_sma0_wmi_mFlagF_q_1$write_1__VAL_2 =
	     (sma0_wmi_mFlagF_c_r == 2'd2) ? value__h41066 : 32'd0 ;
  assign MUX_sma0_wmi_mFlagF_x_wire$wset_1__VAL_2 =
	     { mesgMetaF_opcode__h56966, mesgMetaF_length__h56967 } ;
  assign MUX_sma0_wmi_reqF_c_r$write_1__VAL_1 = sma0_wmi_reqF_c_r + 2'd1 ;
  assign MUX_sma0_wmi_reqF_c_r$write_1__VAL_2 = sma0_wmi_reqF_c_r - 2'd1 ;
  assign MUX_sma0_wmi_reqF_q_0$write_1__VAL_1 =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ?
	       MUX_sma0_wmi_reqF_x_wire$wset_1__VAL_1 :
	       MUX_sma0_wmi_reqF_x_wire$wset_1__VAL_2 ;
  assign MUX_sma0_wmi_reqF_q_0$write_1__VAL_2 =
	     (sma0_wmi_reqF_c_r == 2'd1) ?
	       MUX_sma0_wmi_reqF_q_0$write_1__VAL_1 :
	       sma0_wmi_reqF_q_1 ;
  assign MUX_sma0_wmi_reqF_q_1$write_1__VAL_2 =
	     (sma0_wmi_reqF_c_r == 2'd2) ?
	       MUX_sma0_wmi_reqF_q_0$write_1__VAL_1 :
	       32'd0 ;
  assign MUX_sma0_wmi_reqF_x_wire$wset_1__VAL_1 =
	     { 4'd5,
	       x__h52929,
	       1'b0,
	       sma0_mesgReqAddr,
	       sma0_fabWordsCurReq[11:0] } ;
  assign MUX_sma0_wmi_reqF_x_wire$wset_1__VAL_2 =
	     { 4'd3,
	       sma0_wsiS_reqFifo$D_OUT[57],
	       1'b0,
	       sma0_mesgLengthSoFar,
	       12'd1 } ;
  assign MUX_sma0_wsiM_reqFifo_c_r$write_1__VAL_1 =
	     sma0_wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_sma0_wsiM_reqFifo_c_r$write_1__VAL_2 =
	     sma0_wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (MUX_sma0_wsiM_reqFifo_x_wire$wset_1__SEL_1 ||
	      MUX_sma0_wsiM_reqFifo_x_wire$wset_1__SEL_2) ?
	       sma0_wsiS_reqFifo$D_OUT :
	       MUX_sma0_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_2 =
	     (sma0_wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       sma0_wsiM_reqFifo_q_1 ;
  assign MUX_sma0_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     (sma0_wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_sma0_wsiM_reqFifo_x_wire$wset_1__VAL_3 =
	     (sma0_respF_rCache[73] &&
	      sma0_respF_rCache[72:61] == sma0_respF_rRdPtr) ?
	       sma0_respF_rCache[60:0] :
	       sma0_respF_memory$DOB ;

  // inlined wires
  assign pat0_wci_wslv_wciReq$wget =
	     { cp$wci_Vm_5_MCmd,
	       cp$wci_Vm_5_MAddrSpace,
	       cp$wci_Vm_5_MByteEn,
	       cp$wci_Vm_5_MAddr,
	       cp$wci_Vm_5_MData } ;
  assign pat0_wci_wslv_wciReq$whas = 1'd1 ;
  assign pat0_wci_wslv_respF_x_wire$wget =
	     MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 ;
  assign pat0_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_pat0_advance_split_response ||
	     WILL_FIRE_RL_pat0_wci_cfwr ;
  assign pat0_wci_wslv_wEdge$wget = pat0_wci_wslv_reqF$D_OUT[36:34] ;
  assign pat0_wci_wslv_wEdge$whas = WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;
  assign pat0_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign pat0_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign pat0_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign pat0_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_pat0_wci_ctrl_OrE ||
	     WILL_FIRE_RL_pat0_wci_ctrl_IsO ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;
  assign pat0_wci_wci_Es_mCmd_w$wget = cp$wci_Vm_5_MCmd ;
  assign pat0_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_5_MAddrSpace ;
  assign pat0_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mByteEn_w$wget = cp$wci_Vm_5_MByteEn ;
  assign pat0_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mAddr_w$wget = cp$wci_Vm_5_MAddr ;
  assign pat0_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign pat0_wci_wci_Es_mData_w$wget = cp$wci_Vm_5_MData ;
  assign pat0_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign pat0_wsiM_reqFifo_x_wire$wget =
	     MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign pat0_wsiM_reqFifo_x_wire$whas = WILL_FIRE_RL_pat0_doMessageEmit ;
  assign pat0_wsiM_operateD_1$wget = 1'd1 ;
  assign pat0_wsiM_operateD_1$whas = pat0_wci_wslv_cState == 3'd2 ;
  assign pat0_wsiM_peerIsReady_1$wget = 1'd1 ;
  assign pat0_wsiM_peerIsReady_1$whas =
	     !sma0_wsiS_isReset_isInReset && sma0_wsiS_operateD ;
  assign pat0_statusReg_w$wget = 32'hA0240A0A ;
  assign pat0_statusReg_w$whas = 1'd1 ;
  assign pat0_dataBram_serverAdapterA_outData_enqData$wget =
	     pat0_dataBram_memory$DOA ;
  assign pat0_dataBram_serverAdapterA_outData_enqData$whas =
	     (!pat0_dataBram_serverAdapterA_s1[0] ||
	      pat0_dataBram_serverAdapterA_outDataCore$FULL_N) &&
	     pat0_dataBram_serverAdapterA_s1[1] &&
	     pat0_dataBram_serverAdapterA_s1[0] ;
  assign pat0_dataBram_serverAdapterA_outData_outData$wget =
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N ?
	       pat0_dataBram_serverAdapterA_outDataCore$D_OUT :
	       pat0_dataBram_memory$DOA ;
  assign pat0_dataBram_serverAdapterA_outData_outData$whas =
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign pat0_dataBram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign pat0_dataBram_serverAdapterA_cnt_2$whas =
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas ;
  assign pat0_dataBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign pat0_dataBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign pat0_dataBram_serverAdapterA_writeWithResp$wget = 2'd0 ;
  assign pat0_dataBram_serverAdapterA_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_serverAdapterA_s1_1$wget = 2'd3 ;
  assign pat0_dataBram_serverAdapterA_s1_1$whas =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_serverAdapterB_outData_enqData$wget =
	     pat0_dataBram_memory$DOB ;
  assign pat0_dataBram_serverAdapterB_outData_enqData$whas =
	     (!pat0_dataBram_serverAdapterB_s1[0] ||
	      pat0_dataBram_serverAdapterB_outDataCore$FULL_N) &&
	     pat0_dataBram_serverAdapterB_s1[1] &&
	     pat0_dataBram_serverAdapterB_s1[0] ;
  assign pat0_dataBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h31534 ;
  assign pat0_dataBram_serverAdapterB_outData_outData$whas =
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign pat0_dataBram_serverAdapterB_cnt_1$whas =
	     (MUX_pat0_dataBram_memory$b_put_1__SEL_1 ||
	      MUX_pat0_dataBram_memory$b_put_1__SEL_2) &&
	     (!ab__h13546[1] || ab__h13546[0]) ;
  assign pat0_dataBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign pat0_dataBram_serverAdapterB_cnt_2$whas =
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas ;
  assign pat0_dataBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign pat0_dataBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign pat0_dataBram_serverAdapterB_writeWithResp$wget = ab__h13546 ;
  assign pat0_dataBram_serverAdapterB_writeWithResp$whas =
	     pat0_dataBram_serverAdapterB_s1_1$whas ;
  assign pat0_dataBram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h13546[1] || ab__h13546[0] } ;
  assign pat0_dataBram_serverAdapterB_s1_1$whas =
	     MUX_pat0_dataBram_memory$b_put_1__SEL_1 ||
	     MUX_pat0_dataBram_memory$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterA_outData_enqData$wget =
	     pat0_metaBram_memory$DOA ;
  assign pat0_metaBram_serverAdapterA_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_s1[0] ||
	      pat0_metaBram_serverAdapterA_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_s1[1] &&
	     pat0_metaBram_serverAdapterA_s1[0] ;
  assign pat0_metaBram_serverAdapterA_outData_outData$wget = v__h26543 ;
  assign pat0_metaBram_serverAdapterA_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_outData_enqData$wget =
	     pat0_metaBram_memory$DOB ;
  assign pat0_metaBram_serverAdapterB_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_s1[0] ||
	      pat0_metaBram_serverAdapterB_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_s1[1] &&
	     pat0_metaBram_serverAdapterB_s1[0] ;
  assign pat0_metaBram_serverAdapterB_outData_outData$wget =
	     y_avValue__h31578 ;
  assign pat0_metaBram_serverAdapterB_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_cnt_1$whas =
	     (MUX_pat0_metaBram_memory$b_put_2__SEL_1 ||
	      MUX_pat0_metaBram_memory$b_put_1__SEL_2) &&
	     (!ab__h16645[1] || ab__h16645[0]) ;
  assign pat0_metaBram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_writeWithResp$wget = ab__h16645 ;
  assign pat0_metaBram_serverAdapterB_writeWithResp$whas =
	     MUX_pat0_metaBram_memory$b_put_2__SEL_1 ||
	     MUX_pat0_metaBram_memory$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h16645[1] || ab__h16645[0] } ;
  assign pat0_metaBram_serverAdapterB_s1_1$whas =
	     pat0_metaBram_serverAdapterB_writeWithResp$whas ;
  assign pat0_metaBram_serverAdapterA_1_outData_enqData$wget =
	     pat0_metaBram_memory_1$DOA ;
  assign pat0_metaBram_serverAdapterA_1_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_1_s1[0] ||
	      pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_1_s1[1] &&
	     pat0_metaBram_serverAdapterA_1_s1[0] ;
  assign pat0_metaBram_serverAdapterA_1_outData_outData$wget =
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_1_outDataCore$D_OUT :
	       pat0_metaBram_memory_1$DOA ;
  assign pat0_metaBram_serverAdapterA_1_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_1_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_1_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_1_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_1_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_1_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_1_outData_enqData$wget =
	     pat0_metaBram_memory_1$DOB ;
  assign pat0_metaBram_serverAdapterB_1_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_1_s1[0] ||
	      pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_1_s1[1] &&
	     pat0_metaBram_serverAdapterB_1_s1[0] ;
  assign pat0_metaBram_serverAdapterB_1_outData_outData$wget =
	     y_avValue__h31618 ;
  assign pat0_metaBram_serverAdapterB_1_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_1_cnt_1$whas =
	     (MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ||
	      MUX_pat0_metaBram_memory_1$b_put_1__SEL_2) &&
	     (!ab__h19572[1] || ab__h19572[0]) ;
  assign pat0_metaBram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_1_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_1_writeWithResp$wget = ab__h19572 ;
  assign pat0_metaBram_serverAdapterB_1_writeWithResp$whas =
	     MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ||
	     MUX_pat0_metaBram_memory_1$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h19572[1] || ab__h19572[0] } ;
  assign pat0_metaBram_serverAdapterB_1_s1_1$whas =
	     pat0_metaBram_serverAdapterB_1_writeWithResp$whas ;
  assign pat0_metaBram_serverAdapterA_2_outData_enqData$wget =
	     pat0_metaBram_memory_2$DOA ;
  assign pat0_metaBram_serverAdapterA_2_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_2_s1[0] ||
	      pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_2_s1[1] &&
	     pat0_metaBram_serverAdapterA_2_s1[0] ;
  assign pat0_metaBram_serverAdapterA_2_outData_outData$wget =
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_2_outDataCore$D_OUT :
	       pat0_metaBram_memory_2$DOA ;
  assign pat0_metaBram_serverAdapterA_2_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_2_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_2_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_2_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_2_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_2_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_2_outData_enqData$wget =
	     pat0_metaBram_memory_2$DOB ;
  assign pat0_metaBram_serverAdapterB_2_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_2_s1[0] ||
	      pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_2_s1[1] &&
	     pat0_metaBram_serverAdapterB_2_s1[0] ;
  assign pat0_metaBram_serverAdapterB_2_outData_outData$wget =
	     y_avValue__h31658 ;
  assign pat0_metaBram_serverAdapterB_2_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_2_cnt_1$whas =
	     (MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ||
	      MUX_pat0_metaBram_memory_2$b_put_1__SEL_2) &&
	     (!ab__h22499[1] || ab__h22499[0]) ;
  assign pat0_metaBram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_2_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_2_writeWithResp$wget = ab__h22499 ;
  assign pat0_metaBram_serverAdapterB_2_writeWithResp$whas =
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ||
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h22499[1] || ab__h22499[0] } ;
  assign pat0_metaBram_serverAdapterB_2_s1_1$whas =
	     pat0_metaBram_serverAdapterB_2_writeWithResp$whas ;
  assign pat0_metaBram_serverAdapterA_3_outData_enqData$wget =
	     pat0_metaBram_memory_3$DOA ;
  assign pat0_metaBram_serverAdapterA_3_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterA_3_s1[0] ||
	      pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterA_3_s1[1] &&
	     pat0_metaBram_serverAdapterA_3_s1[0] ;
  assign pat0_metaBram_serverAdapterA_3_outData_outData$wget =
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_3_outDataCore$D_OUT :
	       pat0_metaBram_memory_3$DOA ;
  assign pat0_metaBram_serverAdapterA_3_outData_outData$whas =
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterA_3_cnt_2$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterA_3_writeWithResp$wget = 2'd0 ;
  assign pat0_metaBram_serverAdapterA_3_writeWithResp$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterA_3_s1_1$wget = 2'd3 ;
  assign pat0_metaBram_serverAdapterA_3_s1_1$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_serverAdapterB_3_outData_enqData$wget =
	     pat0_metaBram_memory_3$DOB ;
  assign pat0_metaBram_serverAdapterB_3_outData_enqData$whas =
	     (!pat0_metaBram_serverAdapterB_3_s1[0] ||
	      pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N) &&
	     pat0_metaBram_serverAdapterB_3_s1[1] &&
	     pat0_metaBram_serverAdapterB_3_s1[0] ;
  assign pat0_metaBram_serverAdapterB_3_outData_outData$wget =
	     y_avValue__h31698 ;
  assign pat0_metaBram_serverAdapterB_3_outData_outData$whas =
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     !pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign pat0_metaBram_serverAdapterB_3_cnt_1$whas =
	     (MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ||
	      MUX_pat0_metaBram_memory_3$b_put_1__SEL_2) &&
	     (!ab__h25426[1] || ab__h25426[0]) ;
  assign pat0_metaBram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign pat0_metaBram_serverAdapterB_3_cnt_2$whas =
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;
  assign pat0_metaBram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign pat0_metaBram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign pat0_metaBram_serverAdapterB_3_writeWithResp$wget = ab__h25426 ;
  assign pat0_metaBram_serverAdapterB_3_writeWithResp$whas =
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ||
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_2 ;
  assign pat0_metaBram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h25426[1] || ab__h25426[0] } ;
  assign pat0_metaBram_serverAdapterB_3_s1_1$whas =
	     pat0_metaBram_serverAdapterB_3_writeWithResp$whas ;
  assign sma0_wci_wslv_wciReq$wget =
	     { cp$wci_Vm_6_MCmd,
	       cp$wci_Vm_6_MAddrSpace,
	       cp$wci_Vm_6_MByteEn,
	       cp$wci_Vm_6_MAddr,
	       cp$wci_Vm_6_MData } ;
  assign sma0_wci_wslv_wciReq$whas = 1'd1 ;
  assign sma0_wci_wslv_respF_x_wire$wget =
	     MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 ;
  assign sma0_wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_sma0_wci_cfrd ||
	     WILL_FIRE_RL_sma0_wci_cfwr ;
  assign sma0_wci_wslv_wEdge$wget = sma0_wci_wslv_reqF$D_OUT[36:34] ;
  assign sma0_wci_wslv_wEdge$whas = WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start ;
  assign sma0_wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign sma0_wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign sma0_wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign sma0_wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_sma0_wci_ctrl_OrE ||
	     WILL_FIRE_RL_sma0_wci_ctrl_IsO ||
	     WILL_FIRE_RL_sma0_wci_ctrl_EiI ;
  assign sma0_wci_wci_Es_mCmd_w$wget = cp$wci_Vm_6_MCmd ;
  assign sma0_wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign sma0_wci_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_6_MAddrSpace ;
  assign sma0_wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign sma0_wci_wci_Es_mByteEn_w$wget = cp$wci_Vm_6_MByteEn ;
  assign sma0_wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign sma0_wci_wci_Es_mAddr_w$wget = cp$wci_Vm_6_MAddr ;
  assign sma0_wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign sma0_wci_wci_Es_mData_w$wget = cp$wci_Vm_6_MData ;
  assign sma0_wci_wci_Es_mData_w$whas = 1'd1 ;
  assign sma0_wmi_reqF_x_wire$wget = MUX_sma0_wmi_reqF_q_0$write_1__VAL_1 ;
  assign sma0_wmi_reqF_x_wire$whas =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_sma0_wmwt_messagePush ;
  assign sma0_wmi_mFlagF_x_wire$wget = value__h41066 ;
  assign sma0_wmi_mFlagF_x_wire$whas = sma0_wmi_mFlagF_enqueueing$whas ;
  assign sma0_wmi_dhF_x_wire$wget = MUX_sma0_wmi_dhF_q_0$write_1__VAL_1 ;
  assign sma0_wmi_dhF_x_wire$whas = WILL_FIRE_RL_sma0_wmwt_messagePush ;
  assign sma0_wmi_wmiResponse$wget = { edp0$wmiS0_SResp, edp0$wmiS0_SData } ;
  assign sma0_wmi_wmiResponse$whas = 1'd1 ;
  assign sma0_wmi_sThreadBusy_d_1$wget = 1'd1 ;
  assign sma0_wmi_sThreadBusy_d_1$whas = edp0$wmiS0_SThreadBusy ;
  assign sma0_wmi_sDataThreadBusy_d_1$wget = 1'd1 ;
  assign sma0_wmi_sDataThreadBusy_d_1$whas = edp0$wmiS0_SDataThreadBusy ;
  assign sma0_wmi_operateD_1$wget = 1'd1 ;
  assign sma0_wmi_operateD_1$whas = sma0_wci_wslv_cState == 3'd2 ;
  assign sma0_wmi_peerIsReady_1$wget = 1'd1 ;
  assign sma0_wmi_peerIsReady_1$whas = edp0$wmiS0_SReset_n ;
  assign sma0_wsiM_reqFifo_x_wire$wget =
	     MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1 ;
  assign sma0_wsiM_reqFifo_x_wire$whas = sma0_wsiM_reqFifo_enqueueing$whas ;
  assign sma0_wsiM_operateD_1$wget = 1'd1 ;
  assign sma0_wsiM_operateD_1$whas = sma0_wci_wslv_cState == 3'd2 ;
  assign sma0_wsiM_peerIsReady_1$wget = 1'b0 ;
  assign sma0_wsiM_peerIsReady_1$whas = 1'b0 ;
  assign sma0_wsiS_wsiReq$wget =
	     { sma0_wsi_Es_mCmd_w$wget,
	       sma0_wsi_Es_mReqLast_w$whas,
	       sma0_wsi_Es_mBurstPrecise_w$whas,
	       sma0_wsi_Es_mBurstLength_w$wget,
	       pat0_wsiM_reqFifo_q_0[43:8],
	       sma0_wsi_Es_mReqInfo_w$wget } ;
  assign sma0_wsiS_wsiReq$whas = 1'd1 ;
  assign sma0_wsiS_operateD_1$wget = 1'd1 ;
  assign sma0_wsiS_operateD_1$whas = sma0_wci_wslv_cState == 3'd2 ;
  assign sma0_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign sma0_wsiS_peerIsReady_1$whas =
	     !pat0_wsiM_isReset_isInReset && pat0_wsiM_operateD ;
  assign sma0_wsiS_sThreadBusy_dw$wget = sma0_wsiS_reqFifo_countReg > 2'd1 ;
  assign sma0_wsiS_sThreadBusy_dw$whas =
	     sma0_wsiS_reqFifo_levelsValid && sma0_wsiS_operateD &&
	     sma0_wsiS_peerIsReady ;
  assign sma0_fabRespCredit_acc_v1$wget = b__h49573 ;
  assign sma0_fabRespCredit_acc_v1$whas =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ;
  assign sma0_fabRespCredit_acc_v2$wget = 12'd1 ;
  assign sma0_fabRespCredit_acc_v2$whas =
	     WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi ;
  assign sma0_mesgPreRequest_1$wget = 1'd1 ;
  assign sma0_mesgPreRequest_1$whas = MUX_sma0_mesgReqOK$write_1__SEL_3 ;
  assign sma0_respF_wDataIn$wget =
	     { 3'd1,
	       sma0_unrollCnt == 16'd1,
	       !sma0_smaCtrl[5],
	       sendData_burstLength__h53215,
	       sma0_wmi_respF$D_OUT[31:0],
	       sendData_byteEn__h53217,
	       sma0_thisMesg[23:16] } ;
  assign sma0_respF_wDataIn$whas = sma0_respF_pwEnqueue$whas ;
  assign sma0_respF_wDataOut$wget =
	     MUX_sma0_wsiM_reqFifo_x_wire$wset_1__VAL_3 ;
  assign sma0_respF_wDataOut$whas = 1'd1 ;
  assign sma0_wsi_Es_mCmd_w$wget =
	     pat0_wsiM_sThreadBusy_d ? 3'd0 : pat0_wsiM_reqFifo_q_0[60:58] ;
  assign sma0_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign sma0_wsi_Es_mBurstLength_w$wget =
	     pat0_wsiM_sThreadBusy_d ? 12'd0 : pat0_wsiM_reqFifo_q_0[55:44] ;
  assign sma0_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign sma0_wsi_Es_mData_w$wget = pat0_wsiM_reqFifo_q_0[43:12] ;
  assign sma0_wsi_Es_mData_w$whas = 1'd1 ;
  assign sma0_wsi_Es_mByteEn_w$wget = pat0_wsiM_reqFifo_q_0[11:8] ;
  assign sma0_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign sma0_wsi_Es_mReqInfo_w$wget =
	     pat0_wsiM_sThreadBusy_d ? 8'd0 : pat0_wsiM_reqFifo_q_0[7:0] ;
  assign sma0_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign sma0_wmi_Em_sResp_w$wget = edp0$wmiS0_SResp ;
  assign sma0_wmi_Em_sResp_w$whas = 1'd1 ;
  assign sma0_wmi_Em_sData_w$wget = edp0$wmiS0_SData ;
  assign sma0_wmi_Em_sData_w$whas = 1'd1 ;
  assign pat0_wci_wslv_reqF_r_enq$whas =
	     pat0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign pat0_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_pat0_wci_cfrd || WILL_FIRE_RL_pat0_wci_cfwr ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;
  assign pat0_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign pat0_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h800 &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
	     WILL_FIRE_RL_pat0_advance_split_response ||
	     WILL_FIRE_RL_pat0_wci_cfwr ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;
  assign pat0_wci_wslv_respF_dequeueing$whas =
	     pat0_wci_wslv_respF_c_r != 2'd0 ;
  assign pat0_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign pat0_wci_wslv_wci_cfwr_pw$whas =
	     pat0_wci_wslv_reqF$EMPTY_N && pat0_wci_wslv_reqF$D_OUT[68] &&
	     pat0_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign pat0_wci_wslv_wci_cfrd_pw$whas =
	     pat0_wci_wslv_reqF$EMPTY_N && pat0_wci_wslv_reqF$D_OUT[68] &&
	     pat0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign pat0_wci_wslv_wci_ctrl_pw$whas =
	     pat0_wci_wslv_reqF$EMPTY_N && !pat0_wci_wslv_reqF$D_OUT[68] &&
	     pat0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign pat0_wsiM_reqFifo_enqueueing$whas = WILL_FIRE_RL_pat0_doMessageEmit ;
  assign pat0_wsiM_reqFifo_dequeueing$whas =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq ;
  assign pat0_wsiM_sThreadBusy_pw$whas =
	     !sma0_wsiS_sThreadBusy_dw$whas || sma0_wsiS_sThreadBusy_dw$wget ;
  assign pat0_metaPtr_incAction$whas =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaPtr_decAction$whas = 1'b0 ;
  assign pat0_dataBram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_doMessageEmit && !pat0_doZLM ;
  assign pat0_dataBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd0 ;
  assign pat0_metaBram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd0 ;
  assign pat0_metaBram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd1 ;
  assign pat0_metaBram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd2 ;
  assign pat0_metaBram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_pat0_advance_split_response &&
	     !pat0_splaF$D_OUT[2] &&
	     pat0_splaF$D_OUT[1:0] == 2'd3 ;
  assign sma0_wci_wslv_reqF_r_enq$whas =
	     sma0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign sma0_wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_sma0_wci_cfrd || WILL_FIRE_RL_sma0_wci_cfwr ||
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start ;
  assign sma0_wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign sma0_wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_sma0_wci_cfrd || WILL_FIRE_RL_sma0_wci_cfwr ||
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete ;
  assign sma0_wci_wslv_respF_dequeueing$whas =
	     sma0_wci_wslv_respF_c_r != 2'd0 ;
  assign sma0_wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign sma0_wci_wslv_wci_cfwr_pw$whas =
	     sma0_wci_wslv_reqF$EMPTY_N && sma0_wci_wslv_reqF$D_OUT[68] &&
	     sma0_wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign sma0_wci_wslv_wci_cfrd_pw$whas =
	     sma0_wci_wslv_reqF$EMPTY_N && sma0_wci_wslv_reqF$D_OUT[68] &&
	     sma0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign sma0_wci_wslv_wci_ctrl_pw$whas =
	     sma0_wci_wslv_reqF$EMPTY_N && !sma0_wci_wslv_reqF$D_OUT[68] &&
	     sma0_wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign sma0_wmi_reqF_enqueueing$whas =
	     WILL_FIRE_RL_sma0_wmwt_messagePush ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ;
  assign sma0_wmi_reqF_dequeueing$whas =
	     WILL_FIRE_RL_sma0_wmi_reqF_deq && sma0_wmi_reqF_c_r != 2'd0 ;
  assign sma0_wmi_mFlagF_enqueueing$whas =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest && x__h52929 ||
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_wsiS_reqFifo$D_OUT[57] ;
  assign sma0_wmi_mFlagF_dequeueing$whas =
	     WILL_FIRE_RL_sma0_wmi_reqF_deq && sma0_wmi_reqF_q_0[27] &&
	     sma0_wmi_mFlagF_c_r != 2'd0 ;
  assign sma0_wmi_dhF_enqueueing$whas = WILL_FIRE_RL_sma0_wmwt_messagePush ;
  assign sma0_wmi_dhF_dequeueing$whas =
	     sma0_wmi_operateD && sma0_wmi_peerIsReady &&
	     !sma0_wmi_sDataThreadBusy_d &&
	     sma0_wmi_dhF_c_r != 2'd0 ;
  assign sma0_wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_smaCtrl[3:0] == 4'h3 ||
	     WILL_FIRE_RL_sma0_wsipass_doMessagePush && !sma0_smaCtrl[4] ||
	     WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi ;
  assign sma0_wsiM_reqFifo_dequeueing$whas =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_deq ;
  assign sma0_wsiM_sThreadBusy_pw$whas = 1'b0 ;
  assign sma0_wsiS_reqFifo_r_enq$whas = WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ;
  assign sma0_wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_sma0_wsipass_doMessagePush ||
	     WILL_FIRE_RL_sma0_wmwt_messagePush ;
  assign sma0_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign sma0_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ;
  assign sma0_wsiS_reqFifo_doResetDeq$whas = sma0_wsiS_reqFifo_r_deq$whas ;
  assign sma0_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign sma0_respF_pwDequeue$whas = WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi ;
  assign sma0_respF_pwEnqueue$whas =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse && !sma0_smaCtrl[4] ;
  assign sma0_wsi_Es_mReqLast_w$whas =
	     !pat0_wsiM_sThreadBusy_d && pat0_wsiM_reqFifo_q_0[57] ;
  assign sma0_wsi_Es_mBurstPrecise_w$whas =
	     !pat0_wsiM_sThreadBusy_d && pat0_wsiM_reqFifo_q_0[56] ;
  assign sma0_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign pat0_wsiM_extStatusW$wget =
	     { pat0_wsiM_pMesgCount,
	       pat0_wsiM_iMesgCount,
	       pat0_wsiM_tBusyCount } ;
  assign pat0_metaPtr_modulus_bw$wget = pat0_metaPtr_modulus ;
  assign sma0_wsiM_extStatusW$wget =
	     { sma0_wsiM_pMesgCount,
	       sma0_wsiM_iMesgCount,
	       sma0_wsiM_tBusyCount } ;
  assign sma0_wsiS_extStatusW$wget =
	     { sma0_wsiS_pMesgCount,
	       sma0_wsiS_iMesgCount,
	       sma0_wsiS_tBusyCount } ;

  // register pat0_bytesRemain
  assign pat0_bytesRemain$D_IN =
	     WILL_FIRE_RL_pat0_resp_meta ?
	       v__h26543 :
	       MUX_pat0_bytesRemain$write_1__VAL_2 ;
  assign pat0_bytesRemain$EN =
	     WILL_FIRE_RL_pat0_resp_meta ||
	     (pat0_dataBram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     pat0_bytesRemain != 32'd0 ;

  // register pat0_controlReg
  assign pat0_controlReg$D_IN =
	     MUX_pat0_controlReg$write_1__SEL_1 ?
	       pat0_wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign pat0_controlReg$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_dataBram_serverAdapterA_cnt
  assign pat0_dataBram_serverAdapterA_cnt$D_IN =
	     pat0_dataBram_serverAdapterA_cnt_82_PLUS_IF_pa_ETC___d288 ;
  assign pat0_dataBram_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ||
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas ;

  // register pat0_dataBram_serverAdapterA_s1
  assign pat0_dataBram_serverAdapterA_s1$D_IN =
	     { WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_dataBram_serverAdapterA_s1$EN = 1'd1 ;

  // register pat0_dataBram_serverAdapterB_cnt
  assign pat0_dataBram_serverAdapterB_cnt$D_IN =
	     pat0_dataBram_serverAdapterB_cnt_41_PLUS_IF_pa_ETC___d347 ;
  assign pat0_dataBram_serverAdapterB_cnt$EN =
	     pat0_dataBram_serverAdapterB_cnt_1$whas ||
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas ;

  // register pat0_dataBram_serverAdapterB_s1
  assign pat0_dataBram_serverAdapterB_s1$D_IN =
	     { pat0_dataBram_serverAdapterB_s1_1$whas &&
	       pat0_dataBram_serverAdapterB_s1_1$wget[1],
	       pat0_dataBram_serverAdapterB_s1_1$wget[0] } ;
  assign pat0_dataBram_serverAdapterB_s1$EN = 1'd1 ;

  // register pat0_dataCount
  always@(MUX_pat0_dataCount$write_1__SEL_1 or
	  pat0_wci_wslv_reqF$D_OUT or
	  WILL_FIRE_RL_pat0_doMessageEmit or
	  MUX_pat0_dataCount$write_1__VAL_2 or WILL_FIRE_RL_pat0_wci_ctrl_EiI)
  case (1'b1)
    MUX_pat0_dataCount$write_1__SEL_1:
	pat0_dataCount$D_IN = pat0_wci_wslv_reqF$D_OUT[31:0];
    WILL_FIRE_RL_pat0_doMessageEmit:
	pat0_dataCount$D_IN = MUX_pat0_dataCount$write_1__VAL_2;
    WILL_FIRE_RL_pat0_wci_ctrl_EiI: pat0_dataCount$D_IN = 32'd0;
    default: pat0_dataCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign pat0_dataCount$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h0C ||
	     WILL_FIRE_RL_pat0_doMessageEmit ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_dataPtr
  assign pat0_dataPtr$D_IN = pat0_dataPtr + 32'd1 ;
  assign pat0_dataPtr$EN =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;

  // register pat0_doZLM
  assign pat0_doZLM$D_IN = WILL_FIRE_RL_pat0_resp_meta && v__h26543 == 32'd0 ;
  assign pat0_doZLM$EN =
	     WILL_FIRE_RL_pat0_doMessageEmit && pat0_doZLM ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_isFirst
  assign pat0_isFirst$D_IN = 1'b0 ;
  assign pat0_isFirst$EN = 1'b0 ;

  // register pat0_mesgCount
  always@(MUX_pat0_mesgCount$write_1__SEL_1 or
	  pat0_wci_wslv_reqF$D_OUT or
	  MUX_pat0_mesgCount$write_1__SEL_2 or
	  MUX_pat0_mesgCount$write_1__VAL_2 or WILL_FIRE_RL_pat0_wci_ctrl_EiI)
  case (1'b1)
    MUX_pat0_mesgCount$write_1__SEL_1:
	pat0_mesgCount$D_IN = pat0_wci_wslv_reqF$D_OUT[31:0];
    MUX_pat0_mesgCount$write_1__SEL_2:
	pat0_mesgCount$D_IN = MUX_pat0_mesgCount$write_1__VAL_2;
    WILL_FIRE_RL_pat0_wci_ctrl_EiI: pat0_mesgCount$D_IN = 32'd0;
    default: pat0_mesgCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign pat0_mesgCount$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h08 ||
	     WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_mesgLengthSoFar
  assign pat0_mesgLengthSoFar$D_IN = 14'h0 ;
  assign pat0_mesgLengthSoFar$EN = 1'b0 ;

  // register pat0_mesgRemain
  assign pat0_mesgRemain$D_IN =
	     MUX_pat0_mesgRemain$write_1__SEL_1 ?
	       pat0_wci_wslv_reqF$D_OUT[31:0] :
	       MUX_pat0_mesgRemain$write_1__VAL_2 ;
  assign pat0_mesgRemain$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h10 ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_1_cnt
  assign pat0_metaBram_serverAdapterA_1_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_1_cnt_18_PLUS_IF__ETC___d524 ;
  assign pat0_metaBram_serverAdapterA_1_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_1_s1
  assign pat0_metaBram_serverAdapterA_1_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_1_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterA_2_cnt
  assign pat0_metaBram_serverAdapterA_2_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_2_cnt_36_PLUS_IF__ETC___d642 ;
  assign pat0_metaBram_serverAdapterA_2_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_2_s1
  assign pat0_metaBram_serverAdapterA_2_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_2_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterA_3_cnt
  assign pat0_metaBram_serverAdapterA_3_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_3_cnt_54_PLUS_IF__ETC___d760 ;
  assign pat0_metaBram_serverAdapterA_3_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_3_s1
  assign pat0_metaBram_serverAdapterA_3_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_3_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterA_cnt
  assign pat0_metaBram_serverAdapterA_cnt$D_IN =
	     pat0_metaBram_serverAdapterA_cnt_00_PLUS_IF_pa_ETC___d406 ;
  assign pat0_metaBram_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ||
	     WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_metaBram_serverAdapterA_s1
  assign pat0_metaBram_serverAdapterA_s1$D_IN =
	     { WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways,
	       1'b1 } ;
  assign pat0_metaBram_serverAdapterA_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_1_cnt
  assign pat0_metaBram_serverAdapterB_1_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_1_cnt_77_PLUS_IF__ETC___d583 ;
  assign pat0_metaBram_serverAdapterB_1_cnt$EN =
	     pat0_metaBram_serverAdapterB_1_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_1_s1
  assign pat0_metaBram_serverAdapterB_1_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_1_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_1_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_1_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_1_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_2_cnt
  assign pat0_metaBram_serverAdapterB_2_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_2_cnt_95_PLUS_IF__ETC___d701 ;
  assign pat0_metaBram_serverAdapterB_2_cnt$EN =
	     pat0_metaBram_serverAdapterB_2_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_2_s1
  assign pat0_metaBram_serverAdapterB_2_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_2_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_2_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_2_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_2_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_3_cnt
  assign pat0_metaBram_serverAdapterB_3_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_3_cnt_13_PLUS_IF__ETC___d819 ;
  assign pat0_metaBram_serverAdapterB_3_cnt$EN =
	     pat0_metaBram_serverAdapterB_3_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_3_s1
  assign pat0_metaBram_serverAdapterB_3_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_3_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_3_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_3_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_3_s1$EN = 1'd1 ;

  // register pat0_metaBram_serverAdapterB_cnt
  assign pat0_metaBram_serverAdapterB_cnt$D_IN =
	     pat0_metaBram_serverAdapterB_cnt_59_PLUS_IF_pa_ETC___d465 ;
  assign pat0_metaBram_serverAdapterB_cnt$EN =
	     pat0_metaBram_serverAdapterB_cnt_1$whas ||
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas ;

  // register pat0_metaBram_serverAdapterB_s1
  assign pat0_metaBram_serverAdapterB_s1$D_IN =
	     { pat0_metaBram_serverAdapterB_writeWithResp$whas &&
	       pat0_metaBram_serverAdapterB_s1_1$wget[1],
	       pat0_metaBram_serverAdapterB_s1_1$wget[0] } ;
  assign pat0_metaBram_serverAdapterB_s1$EN = 1'd1 ;

  // register pat0_metaPtr_modulus
  assign pat0_metaPtr_modulus$D_IN =
	     MUX_pat0_metaPtr_modulus$write_1__SEL_1 ?
	       MUX_pat0_metaPtr_modulus$write_1__VAL_1 :
	       16'd0 ;
  assign pat0_metaPtr_modulus$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_pat0_wci_ctrl_EiI ;

  // register pat0_metaPtr_value
  assign pat0_metaPtr_value$D_IN =
	     MUX_pat0_metaPtr_modulus$write_1__SEL_1 ?
	       16'd0 :
	       MUX_pat0_metaPtr_value$write_1__VAL_3 ;
  assign pat0_metaPtr_value$EN =
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0 &&
	     pat0_wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;

  // register pat0_splitReadInFlight
  assign pat0_splitReadInFlight$D_IN =
	     MUX_pat0_splitReadInFlight$write_1__SEL_1 ;
  assign pat0_splitReadInFlight$EN =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	      pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400) ||
	     WILL_FIRE_RL_pat0_advance_split_response ;

  // register pat0_thisLength
  assign pat0_thisLength$D_IN = v__h26543 ;
  assign pat0_thisLength$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_thisOpcode
  assign pat0_thisOpcode$D_IN =
	     pat0_metaBram_serverAdapterA_1_outData_outData$wget ;
  assign pat0_thisOpcode$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_thisTLS
  assign pat0_thisTLS$D_IN =
	     pat0_metaBram_serverAdapterA_3_outData_outData$wget ;
  assign pat0_thisTLS$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_thisTMS
  assign pat0_thisTMS$D_IN =
	     pat0_metaBram_serverAdapterA_2_outData_outData$wget ;
  assign pat0_thisTMS$EN = WILL_FIRE_RL_pat0_resp_meta ;

  // register pat0_unrollCnt
  assign pat0_unrollCnt$D_IN =
	     WILL_FIRE_RL_pat0_resp_meta ?
	       MUX_pat0_unrollCnt$write_1__VAL_1 :
	       MUX_pat0_unrollCnt$write_1__VAL_2 ;
  assign pat0_unrollCnt$EN =
	     WILL_FIRE_RL_pat0_resp_meta || WILL_FIRE_RL_pat0_doMessageEmit ;

  // register pat0_wci_wslv_cEdge
  assign pat0_wci_wslv_cEdge$D_IN = pat0_wci_wslv_reqF$D_OUT[36:34] ;
  assign pat0_wci_wslv_cEdge$EN = WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;

  // register pat0_wci_wslv_cState
  assign pat0_wci_wslv_cState$D_IN = pat0_wci_wslv_nState ;
  assign pat0_wci_wslv_cState$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	     !pat0_wci_wslv_illegalEdge ;

  // register pat0_wci_wslv_ctlAckReg
  assign pat0_wci_wslv_ctlAckReg$D_IN = pat0_wci_wslv_ctlAckReg_1$whas ;
  assign pat0_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register pat0_wci_wslv_ctlOpActive
  assign pat0_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ;
  assign pat0_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start ;

  // register pat0_wci_wslv_illegalEdge
  assign pat0_wci_wslv_illegalEdge$D_IN =
	     !MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_pat0_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign pat0_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	     pat0_wci_wslv_illegalEdge ||
	     MUX_pat0_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register pat0_wci_wslv_isReset_isInReset
  assign pat0_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign pat0_wci_wslv_isReset_isInReset$EN =
	     pat0_wci_wslv_isReset_isInReset ;

  // register pat0_wci_wslv_nState
  always@(pat0_wci_wslv_reqF$D_OUT)
  begin
    case (pat0_wci_wslv_reqF$D_OUT[36:34])
      3'd0: pat0_wci_wslv_nState$D_IN = 3'd1;
      3'd1: pat0_wci_wslv_nState$D_IN = 3'd2;
      3'd2: pat0_wci_wslv_nState$D_IN = 3'd3;
      default: pat0_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign pat0_wci_wslv_nState$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start &&
	     (pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      pat0_wci_wslv_cState == 3'd0 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (pat0_wci_wslv_cState == 3'd1 ||
	       pat0_wci_wslv_cState == 3'd3) ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      pat0_wci_wslv_cState == 3'd2 ||
	      pat0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (pat0_wci_wslv_cState == 3'd3 || pat0_wci_wslv_cState == 3'd2 ||
	       pat0_wci_wslv_cState == 3'd1)) ;

  // register pat0_wci_wslv_reqF_countReg
  assign pat0_wci_wslv_reqF_countReg$D_IN =
	     (pat0_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       pat0_wci_wslv_reqF_countReg + 2'd1 :
	       pat0_wci_wslv_reqF_countReg - 2'd1 ;
  assign pat0_wci_wslv_reqF_countReg$EN =
	     (pat0_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     pat0_wci_wslv_reqF_r_deq$whas ;

  // register pat0_wci_wslv_respF_c_r
  assign pat0_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr ?
	       MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_pat0_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign pat0_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr ;

  // register pat0_wci_wslv_respF_q_0
  always@(MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_1 or
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_pat0_wci_wslv_respF_both or
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr or pat0_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pat0_wci_wslv_respF_q_0$write_1__SEL_1:
	  pat0_wci_wslv_respF_q_0$D_IN =
	      MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_pat0_wci_wslv_respF_both:
	  pat0_wci_wslv_respF_q_0$D_IN =
	      MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr:
	  pat0_wci_wslv_respF_q_0$D_IN = pat0_wci_wslv_respF_q_1;
      default: pat0_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr ;

  // register pat0_wci_wslv_respF_q_1
  always@(MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_1 or
	  MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_pat0_wci_wslv_respF_both or
	  MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pat0_wci_wslv_respF_q_1$write_1__SEL_1:
	  pat0_wci_wslv_respF_q_1$D_IN =
	      MUX_pat0_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_pat0_wci_wslv_respF_both:
	  pat0_wci_wslv_respF_q_1$D_IN =
	      MUX_pat0_wci_wslv_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr:
	  pat0_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: pat0_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_pat0_wci_wslv_respF_incCtr &&
	     pat0_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_pat0_wci_wslv_respF_decCtr ;

  // register pat0_wci_wslv_sFlagReg
  assign pat0_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign pat0_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register pat0_wci_wslv_sThreadBusy_d
  assign pat0_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign pat0_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register pat0_wsiM_burstKind
  assign pat0_wsiM_burstKind$D_IN =
	     (pat0_wsiM_burstKind == 2'd0) ?
	       (pat0_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign pat0_wsiM_burstKind$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (pat0_wsiM_burstKind == 2'd0 ||
	      (pat0_wsiM_burstKind == 2'd1 || pat0_wsiM_burstKind == 2'd2) &&
	      pat0_wsiM_reqFifo_q_0[57]) ;

  // register pat0_wsiM_errorSticky
  assign pat0_wsiM_errorSticky$D_IN = 1'b0 ;
  assign pat0_wsiM_errorSticky$EN = 1'b0 ;

  // register pat0_wsiM_iMesgCount
  assign pat0_wsiM_iMesgCount$D_IN = pat0_wsiM_iMesgCount + 32'd1 ;
  assign pat0_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     pat0_wsiM_burstKind == 2'd2 &&
	     pat0_wsiM_reqFifo_q_0[57] ;

  // register pat0_wsiM_isReset_isInReset
  assign pat0_wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign pat0_wsiM_isReset_isInReset$EN = pat0_wsiM_isReset_isInReset ;

  // register pat0_wsiM_operateD
  assign pat0_wsiM_operateD$D_IN = pat0_wci_wslv_cState == 3'd2 ;
  assign pat0_wsiM_operateD$EN = 1'd1 ;

  // register pat0_wsiM_pMesgCount
  assign pat0_wsiM_pMesgCount$D_IN = pat0_wsiM_pMesgCount + 32'd1 ;
  assign pat0_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     pat0_wsiM_burstKind == 2'd1 &&
	     pat0_wsiM_reqFifo_q_0[57] ;

  // register pat0_wsiM_peerIsReady
  assign pat0_wsiM_peerIsReady$D_IN = pat0_wsiM_peerIsReady_1$whas ;
  assign pat0_wsiM_peerIsReady$EN = 1'd1 ;

  // register pat0_wsiM_reqFifo_c_r
  assign pat0_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr ?
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_pat0_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign pat0_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr ;

  // register pat0_wsiM_reqFifo_q_0
  always@(MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_pat0_wsiM_reqFifo_both or
	  MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr or pat0_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pat0_wsiM_reqFifo_q_0$write_1__SEL_1:
	  pat0_wsiM_reqFifo_q_0$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_pat0_wsiM_reqFifo_both:
	  pat0_wsiM_reqFifo_q_0$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr:
	  pat0_wsiM_reqFifo_q_0$D_IN = pat0_wsiM_reqFifo_q_1;
      default: pat0_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr ;

  // register pat0_wsiM_reqFifo_q_1
  always@(MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_pat0_wsiM_reqFifo_both or
	  MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_pat0_wsiM_reqFifo_q_1$write_1__SEL_1:
	  pat0_wsiM_reqFifo_q_1$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_pat0_wsiM_reqFifo_both:
	  pat0_wsiM_reqFifo_q_1$D_IN =
	      MUX_pat0_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr:
	  pat0_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: pat0_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign pat0_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_incCtr &&
	     pat0_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_decCtr ;

  // register pat0_wsiM_sThreadBusy_d
  assign pat0_wsiM_sThreadBusy_d$D_IN = pat0_wsiM_sThreadBusy_pw$whas ;
  assign pat0_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register pat0_wsiM_statusR
  assign pat0_wsiM_statusR$D_IN =
	     { pat0_wsiM_isReset_isInReset,
	       !pat0_wsiM_peerIsReady,
	       !pat0_wsiM_operateD,
	       pat0_wsiM_errorSticky,
	       pat0_wsiM_burstKind != 2'd0,
	       pat0_wsiM_sThreadBusy_d,
	       1'd0,
	       pat0_wsiM_trafficSticky } ;
  assign pat0_wsiM_statusR$EN = 1'd1 ;

  // register pat0_wsiM_tBusyCount
  assign pat0_wsiM_tBusyCount$D_IN = pat0_wsiM_tBusyCount + 32'd1 ;
  assign pat0_wsiM_tBusyCount$EN =
	     pat0_wsiM_operateD && pat0_wsiM_peerIsReady &&
	     pat0_wsiM_sThreadBusy_d ;

  // register pat0_wsiM_trafficSticky
  assign pat0_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign pat0_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_pat0_wsiM_reqFifo_deq &&
	     pat0_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register sma0_abortCount
  assign sma0_abortCount$D_IN = sma0_abortCount + 32'd1 ;
  assign sma0_abortCount$EN = WILL_FIRE_RL_sma0_wmwt_doAbort ;

  // register sma0_doAbort
  assign sma0_doAbort$D_IN = 1'd0 ;
  assign sma0_doAbort$EN = WILL_FIRE_RL_sma0_wmwt_doAbort ;

  // register sma0_endOfMessage
  assign sma0_endOfMessage$D_IN = MUX_sma0_endOfMessage$write_1__SEL_1 ;
  assign sma0_endOfMessage$EN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_sma0_wmwt_messageFinalize ;

  // register sma0_errCount
  assign sma0_errCount$D_IN = sma0_errCount + 32'd1 ;
  assign sma0_errCount$EN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_wsiS_reqFifo$D_OUT[43:12] != sma0_valExpect &&
	     (!sma0_wsiS_reqFifo$D_OUT[57] ||
	      sma0_wsiS_reqFifo$D_OUT[11:8] != 4'd0 ||
	      sma0_mesgLengthSoFar != 14'd0) ;

  // register sma0_fabRespCredit_value
  assign sma0_fabRespCredit_value$D_IN =
	     WILL_FIRE_RL_sma0_wci_ctrl_IsO ?
	       12'd1024 :
	       MUX_sma0_fabRespCredit_value$write_1__VAL_2 ;
  assign sma0_fabRespCredit_value$EN = 1'b1 ;

  // register sma0_fabWordsCurReq
  assign sma0_fabWordsCurReq$D_IN =
	     (sma0_fabWordsRemain <= b__h52758) ?
	       sma0_fabWordsRemain :
	       b__h52758 ;
  assign sma0_fabWordsCurReq$EN = MUX_sma0_mesgReqOK$write_1__SEL_3 ;

  // register sma0_fabWordsRemain
  assign sma0_fabWordsRemain$D_IN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ?
	       MUX_sma0_fabWordsRemain$write_1__VAL_1 :
	       MUX_sma0_fabWordsRemain$write_1__VAL_2 ;
  assign sma0_fabWordsRemain$EN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ;

  // register sma0_firstMsgReq
  assign sma0_firstMsgReq$D_IN = 1'b0 ;
  assign sma0_firstMsgReq$EN = 1'b0 ;

  // register sma0_lastMesg
  assign sma0_lastMesg$D_IN =
	     (MUX_sma0_endOfMessage$write_1__SEL_1 ||
	      WILL_FIRE_RL_sma0_wmrd_mesgBegin) ?
	       sma0_thisMesg :
	       32'hFEFEFFFE ;
  assign sma0_lastMesg$EN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ||
	     WILL_FIRE_RL_sma0_wci_ctrl_IsO ;

  // register sma0_mesgCount
  always@(MUX_sma0_mesgCount$write_1__SEL_1 or
	  MUX_sma0_mesgCount$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wmwt_messageFinalize or
	  WILL_FIRE_RL_sma0_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_mesgCount$write_1__SEL_1:
	  sma0_mesgCount$D_IN = MUX_sma0_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wmwt_messageFinalize:
	  sma0_mesgCount$D_IN = MUX_sma0_mesgCount$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wci_ctrl_IsO: sma0_mesgCount$D_IN = 32'd0;
      default: sma0_mesgCount$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_mesgCount$EN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse &&
	     sma0_unrollCnt == 16'd1 ||
	     WILL_FIRE_RL_sma0_wmwt_messageFinalize ||
	     WILL_FIRE_RL_sma0_wci_ctrl_IsO ;

  // register sma0_mesgLengthSoFar
  assign sma0_mesgLengthSoFar$D_IN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush ? mlB__h56800 : 14'd0 ;
  assign sma0_mesgLengthSoFar$EN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush ||
	     WILL_FIRE_RL_sma0_wmwt_mesgBegin ;

  // register sma0_mesgPreRequest
  assign sma0_mesgPreRequest$D_IN = MUX_sma0_mesgReqOK$write_1__SEL_3 ;
  assign sma0_mesgPreRequest$EN = 1'd1 ;

  // register sma0_mesgReqAddr
  assign sma0_mesgReqAddr$D_IN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ?
	       14'd0 :
	       MUX_sma0_mesgReqAddr$write_1__VAL_2 ;
  assign sma0_mesgReqAddr$EN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ;

  // register sma0_mesgReqOK
  assign sma0_mesgReqOK$D_IN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ;
  assign sma0_mesgReqOK$EN =
	     CAN_FIRE_RL_sma0_wmrd_mesgBodyPreRequest &&
	     !WILL_FIRE_RL_sma0_wmrd_mesgBodyRequest ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse ;

  // register sma0_opcode
  assign sma0_opcode$D_IN =
	     (WILL_FIRE_RL_sma0_wmwt_messageFinalize ||
	      WILL_FIRE_RL_sma0_wmwt_doAbort) ?
	       9'd170 :
	       MUX_sma0_opcode$write_1__VAL_3 ;
  assign sma0_opcode$EN =
	     WILL_FIRE_RL_sma0_wmwt_mesgBegin ||
	     WILL_FIRE_RL_sma0_wmwt_messageFinalize ||
	     WILL_FIRE_RL_sma0_wmwt_doAbort ;

  // register sma0_readyToPush
  assign sma0_readyToPush$D_IN =
	     !WILL_FIRE_RL_sma0_wmwt_doAbort &&
	     !MUX_sma0_endOfMessage$write_1__SEL_1 ;
  assign sma0_readyToPush$EN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_sma0_wmwt_doAbort ||
	     WILL_FIRE_RL_sma0_wmwt_mesgBegin ;

  // register sma0_readyToRequest
  assign sma0_readyToRequest$D_IN = 1'b0 ;
  assign sma0_readyToRequest$EN = 1'b0 ;

  // register sma0_respF_rCache
  assign sma0_respF_rCache$D_IN =
	     { 1'd1,
	       sma0_respF_rWrPtr,
	       IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2525,
	       sma0_respF_pwEnqueue$whas && sma0_respF_wDataIn$wget[57],
	       sma0_respF_pwEnqueue$whas && sma0_respF_wDataIn$wget[56],
	       IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2561 } ;
  assign sma0_respF_rCache$EN = sma0_respF_pwEnqueue$whas ;

  // register sma0_respF_rRdPtr
  assign sma0_respF_rRdPtr$D_IN = x__h50927 ;
  assign sma0_respF_rRdPtr$EN = WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi ;

  // register sma0_respF_rWrPtr
  assign sma0_respF_rWrPtr$D_IN = sma0_respF_rWrPtr + 12'd1 ;
  assign sma0_respF_rWrPtr$EN = sma0_respF_pwEnqueue$whas ;

  // register sma0_smaCtrl
  assign sma0_smaCtrl$D_IN = sma0_wci_wslv_reqF$D_OUT[31:0] ;
  assign sma0_smaCtrl$EN =
	     WILL_FIRE_RL_sma0_wci_cfwr &&
	     sma0_wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;

  // register sma0_thisMesg
  always@(MUX_sma0_endOfMessage$write_1__SEL_1 or
	  MUX_sma0_thisMesg$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wmrd_mesgBegin or
	  MUX_sma0_thisMesg$write_1__VAL_2 or WILL_FIRE_RL_sma0_wci_ctrl_IsO)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_endOfMessage$write_1__SEL_1:
	  sma0_thisMesg$D_IN = MUX_sma0_thisMesg$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wmrd_mesgBegin:
	  sma0_thisMesg$D_IN = MUX_sma0_thisMesg$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wci_ctrl_IsO: sma0_thisMesg$D_IN = 32'hFEFEFFFE;
      default: sma0_thisMesg$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_thisMesg$EN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     sma0_wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ||
	     WILL_FIRE_RL_sma0_wci_ctrl_IsO ;

  // register sma0_unrollCnt
  assign sma0_unrollCnt$D_IN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ?
	       MUX_sma0_unrollCnt$write_1__VAL_1 :
	       MUX_sma0_unrollCnt$write_1__VAL_2 ;
  assign sma0_unrollCnt$EN =
	     WILL_FIRE_RL_sma0_wmrd_mesgBegin ||
	     WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse ;

  // register sma0_valExpect
  assign sma0_valExpect$D_IN = sma0_valExpect + 32'd1 ;
  assign sma0_valExpect$EN =
	     WILL_FIRE_RL_sma0_wmwt_messagePush &&
	     (!sma0_wsiS_reqFifo$D_OUT[57] ||
	      sma0_wsiS_reqFifo$D_OUT[11:8] != 4'd0 ||
	      sma0_mesgLengthSoFar != 14'd0) ;

  // register sma0_wci_wslv_cEdge
  assign sma0_wci_wslv_cEdge$D_IN = sma0_wci_wslv_reqF$D_OUT[36:34] ;
  assign sma0_wci_wslv_cEdge$EN = WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start ;

  // register sma0_wci_wslv_cState
  assign sma0_wci_wslv_cState$D_IN = sma0_wci_wslv_nState ;
  assign sma0_wci_wslv_cState$EN =
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete &&
	     !sma0_wci_wslv_illegalEdge ;

  // register sma0_wci_wslv_ctlAckReg
  assign sma0_wci_wslv_ctlAckReg$D_IN = sma0_wci_wslv_ctlAckReg_1$whas ;
  assign sma0_wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register sma0_wci_wslv_ctlOpActive
  assign sma0_wci_wslv_ctlOpActive$D_IN =
	     !WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete ;
  assign sma0_wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start ;

  // register sma0_wci_wslv_illegalEdge
  assign sma0_wci_wslv_illegalEdge$D_IN =
	     !MUX_sma0_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_sma0_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign sma0_wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete &&
	     sma0_wci_wslv_illegalEdge ||
	     MUX_sma0_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register sma0_wci_wslv_isReset_isInReset
  assign sma0_wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign sma0_wci_wslv_isReset_isInReset$EN =
	     sma0_wci_wslv_isReset_isInReset ;

  // register sma0_wci_wslv_nState
  always@(sma0_wci_wslv_reqF$D_OUT)
  begin
    case (sma0_wci_wslv_reqF$D_OUT[36:34])
      3'd0: sma0_wci_wslv_nState$D_IN = 3'd1;
      3'd1: sma0_wci_wslv_nState$D_IN = 3'd2;
      3'd2: sma0_wci_wslv_nState$D_IN = 3'd3;
      default: sma0_wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign sma0_wci_wslv_nState$EN =
	     WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start &&
	     (sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd0 &&
	      sma0_wci_wslv_cState == 3'd0 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (sma0_wci_wslv_cState == 3'd1 ||
	       sma0_wci_wslv_cState == 3'd3) ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd2 &&
	      sma0_wci_wslv_cState == 3'd2 ||
	      sma0_wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (sma0_wci_wslv_cState == 3'd3 || sma0_wci_wslv_cState == 3'd2 ||
	       sma0_wci_wslv_cState == 3'd1)) ;

  // register sma0_wci_wslv_reqF_countReg
  assign sma0_wci_wslv_reqF_countReg$D_IN =
	     (sma0_wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       sma0_wci_wslv_reqF_countReg + 2'd1 :
	       sma0_wci_wslv_reqF_countReg - 2'd1 ;
  assign sma0_wci_wslv_reqF_countReg$EN =
	     (sma0_wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     sma0_wci_wslv_reqF_r_deq$whas ;

  // register sma0_wci_wslv_respF_c_r
  assign sma0_wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr ?
	       MUX_sma0_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_sma0_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign sma0_wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr ;

  // register sma0_wci_wslv_respF_q_0
  always@(MUX_sma0_wci_wslv_respF_q_0$write_1__SEL_1 or
	  MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wci_wslv_respF_both or
	  MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr or sma0_wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wci_wslv_respF_q_0$write_1__SEL_1:
	  sma0_wci_wslv_respF_q_0$D_IN =
	      MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wci_wslv_respF_both:
	  sma0_wci_wslv_respF_q_0$D_IN =
	      MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr:
	  sma0_wci_wslv_respF_q_0$D_IN = sma0_wci_wslv_respF_q_1;
      default: sma0_wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr &&
	     sma0_wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_sma0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr ;

  // register sma0_wci_wslv_respF_q_1
  always@(MUX_sma0_wci_wslv_respF_q_1$write_1__SEL_1 or
	  MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wci_wslv_respF_both or
	  MUX_sma0_wci_wslv_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wci_wslv_respF_q_1$write_1__SEL_1:
	  sma0_wci_wslv_respF_q_1$D_IN =
	      MUX_sma0_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wci_wslv_respF_both:
	  sma0_wci_wslv_respF_q_1$D_IN =
	      MUX_sma0_wci_wslv_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr:
	  sma0_wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: sma0_wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_sma0_wci_wslv_respF_incCtr &&
	     sma0_wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_sma0_wci_wslv_respF_both ||
	     WILL_FIRE_RL_sma0_wci_wslv_respF_decCtr ;

  // register sma0_wci_wslv_sFlagReg
  assign sma0_wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign sma0_wci_wslv_sFlagReg$EN = 1'd1 ;

  // register sma0_wci_wslv_sThreadBusy_d
  assign sma0_wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign sma0_wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register sma0_wmi_busyWithMessage
  assign sma0_wmi_busyWithMessage$D_IN = 1'b0 ;
  assign sma0_wmi_busyWithMessage$EN = 1'b0 ;

  // register sma0_wmi_dhF_c_r
  assign sma0_wmi_dhF_c_r$D_IN =
	     WILL_FIRE_RL_sma0_wmi_dhF_incCtr ?
	       MUX_sma0_wmi_dhF_c_r$write_1__VAL_1 :
	       MUX_sma0_wmi_dhF_c_r$write_1__VAL_2 ;
  assign sma0_wmi_dhF_c_r$EN =
	     WILL_FIRE_RL_sma0_wmi_dhF_incCtr ||
	     WILL_FIRE_RL_sma0_wmi_dhF_decCtr ;

  // register sma0_wmi_dhF_q_0
  always@(MUX_sma0_wmi_dhF_q_0$write_1__SEL_1 or
	  MUX_sma0_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wmi_dhF_both or
	  MUX_sma0_wmi_dhF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wmi_dhF_decCtr or sma0_wmi_dhF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wmi_dhF_q_0$write_1__SEL_1:
	  sma0_wmi_dhF_q_0$D_IN = MUX_sma0_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wmi_dhF_both:
	  sma0_wmi_dhF_q_0$D_IN = MUX_sma0_wmi_dhF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wmi_dhF_decCtr:
	  sma0_wmi_dhF_q_0$D_IN = sma0_wmi_dhF_q_1;
      default: sma0_wmi_dhF_q_0$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wmi_dhF_q_0$EN =
	     WILL_FIRE_RL_sma0_wmi_dhF_incCtr && sma0_wmi_dhF_c_r == 2'd0 ||
	     WILL_FIRE_RL_sma0_wmi_dhF_both ||
	     WILL_FIRE_RL_sma0_wmi_dhF_decCtr ;

  // register sma0_wmi_dhF_q_1
  always@(MUX_sma0_wmi_dhF_q_1$write_1__SEL_1 or
	  MUX_sma0_wmi_dhF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wmi_dhF_both or
	  MUX_sma0_wmi_dhF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wmi_dhF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wmi_dhF_q_1$write_1__SEL_1:
	  sma0_wmi_dhF_q_1$D_IN = MUX_sma0_wmi_dhF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wmi_dhF_both:
	  sma0_wmi_dhF_q_1$D_IN = MUX_sma0_wmi_dhF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wmi_dhF_decCtr: sma0_wmi_dhF_q_1$D_IN = 38'd0;
      default: sma0_wmi_dhF_q_1$D_IN =
		   38'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wmi_dhF_q_1$EN =
	     WILL_FIRE_RL_sma0_wmi_dhF_incCtr && sma0_wmi_dhF_c_r == 2'd1 ||
	     WILL_FIRE_RL_sma0_wmi_dhF_both ||
	     WILL_FIRE_RL_sma0_wmi_dhF_decCtr ;

  // register sma0_wmi_errorSticky
  assign sma0_wmi_errorSticky$D_IN = 1'b0 ;
  assign sma0_wmi_errorSticky$EN = 1'b0 ;

  // register sma0_wmi_isReset_isInReset
  assign sma0_wmi_isReset_isInReset$D_IN = 1'd0 ;
  assign sma0_wmi_isReset_isInReset$EN = sma0_wmi_isReset_isInReset ;

  // register sma0_wmi_mFlagF_c_r
  assign sma0_wmi_mFlagF_c_r$D_IN =
	     WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr ?
	       MUX_sma0_wmi_mFlagF_c_r$write_1__VAL_1 :
	       MUX_sma0_wmi_mFlagF_c_r$write_1__VAL_2 ;
  assign sma0_wmi_mFlagF_c_r$EN =
	     WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr ||
	     WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr ;

  // register sma0_wmi_mFlagF_q_0
  always@(MUX_sma0_wmi_mFlagF_q_0$write_1__SEL_1 or
	  value__h41066 or
	  WILL_FIRE_RL_sma0_wmi_mFlagF_both or
	  MUX_sma0_wmi_mFlagF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr or sma0_wmi_mFlagF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wmi_mFlagF_q_0$write_1__SEL_1:
	  sma0_wmi_mFlagF_q_0$D_IN = value__h41066;
      WILL_FIRE_RL_sma0_wmi_mFlagF_both:
	  sma0_wmi_mFlagF_q_0$D_IN = MUX_sma0_wmi_mFlagF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr:
	  sma0_wmi_mFlagF_q_0$D_IN = sma0_wmi_mFlagF_q_1;
      default: sma0_wmi_mFlagF_q_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wmi_mFlagF_q_0$EN =
	     WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr &&
	     sma0_wmi_mFlagF_c_r == 2'd0 ||
	     WILL_FIRE_RL_sma0_wmi_mFlagF_both ||
	     WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr ;

  // register sma0_wmi_mFlagF_q_1
  always@(MUX_sma0_wmi_mFlagF_q_1$write_1__SEL_1 or
	  value__h41066 or
	  WILL_FIRE_RL_sma0_wmi_mFlagF_both or
	  MUX_sma0_wmi_mFlagF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wmi_mFlagF_q_1$write_1__SEL_1:
	  sma0_wmi_mFlagF_q_1$D_IN = value__h41066;
      WILL_FIRE_RL_sma0_wmi_mFlagF_both:
	  sma0_wmi_mFlagF_q_1$D_IN = MUX_sma0_wmi_mFlagF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr: sma0_wmi_mFlagF_q_1$D_IN = 32'd0;
      default: sma0_wmi_mFlagF_q_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wmi_mFlagF_q_1$EN =
	     WILL_FIRE_RL_sma0_wmi_mFlagF_incCtr &&
	     sma0_wmi_mFlagF_c_r == 2'd1 ||
	     WILL_FIRE_RL_sma0_wmi_mFlagF_both ||
	     WILL_FIRE_RL_sma0_wmi_mFlagF_decCtr ;

  // register sma0_wmi_operateD
  assign sma0_wmi_operateD$D_IN = sma0_wci_wslv_cState == 3'd2 ;
  assign sma0_wmi_operateD$EN = 1'd1 ;

  // register sma0_wmi_peerIsReady
  assign sma0_wmi_peerIsReady$D_IN = edp0$wmiS0_SReset_n ;
  assign sma0_wmi_peerIsReady$EN = 1'd1 ;

  // register sma0_wmi_reqF_c_r
  assign sma0_wmi_reqF_c_r$D_IN =
	     WILL_FIRE_RL_sma0_wmi_reqF_incCtr ?
	       MUX_sma0_wmi_reqF_c_r$write_1__VAL_1 :
	       MUX_sma0_wmi_reqF_c_r$write_1__VAL_2 ;
  assign sma0_wmi_reqF_c_r$EN =
	     WILL_FIRE_RL_sma0_wmi_reqF_incCtr ||
	     WILL_FIRE_RL_sma0_wmi_reqF_decCtr ;

  // register sma0_wmi_reqF_q_0
  always@(MUX_sma0_wmi_reqF_q_0$write_1__SEL_1 or
	  MUX_sma0_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wmi_reqF_both or
	  MUX_sma0_wmi_reqF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wmi_reqF_decCtr or sma0_wmi_reqF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wmi_reqF_q_0$write_1__SEL_1:
	  sma0_wmi_reqF_q_0$D_IN = MUX_sma0_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wmi_reqF_both:
	  sma0_wmi_reqF_q_0$D_IN = MUX_sma0_wmi_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wmi_reqF_decCtr:
	  sma0_wmi_reqF_q_0$D_IN = sma0_wmi_reqF_q_1;
      default: sma0_wmi_reqF_q_0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wmi_reqF_q_0$EN =
	     WILL_FIRE_RL_sma0_wmi_reqF_incCtr && sma0_wmi_reqF_c_r == 2'd0 ||
	     WILL_FIRE_RL_sma0_wmi_reqF_both ||
	     WILL_FIRE_RL_sma0_wmi_reqF_decCtr ;

  // register sma0_wmi_reqF_q_1
  always@(MUX_sma0_wmi_reqF_q_1$write_1__SEL_1 or
	  MUX_sma0_wmi_reqF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wmi_reqF_both or
	  MUX_sma0_wmi_reqF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wmi_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wmi_reqF_q_1$write_1__SEL_1:
	  sma0_wmi_reqF_q_1$D_IN = MUX_sma0_wmi_reqF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wmi_reqF_both:
	  sma0_wmi_reqF_q_1$D_IN = MUX_sma0_wmi_reqF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wmi_reqF_decCtr: sma0_wmi_reqF_q_1$D_IN = 32'd0;
      default: sma0_wmi_reqF_q_1$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wmi_reqF_q_1$EN =
	     WILL_FIRE_RL_sma0_wmi_reqF_incCtr && sma0_wmi_reqF_c_r == 2'd1 ||
	     WILL_FIRE_RL_sma0_wmi_reqF_both ||
	     WILL_FIRE_RL_sma0_wmi_reqF_decCtr ;

  // register sma0_wmi_sDataThreadBusy_d
  assign sma0_wmi_sDataThreadBusy_d$D_IN = edp0$wmiS0_SDataThreadBusy ;
  assign sma0_wmi_sDataThreadBusy_d$EN = 1'd1 ;

  // register sma0_wmi_sFlagReg
  assign sma0_wmi_sFlagReg$D_IN = edp0$wmiS0_SFlag ;
  assign sma0_wmi_sFlagReg$EN = 1'd1 ;

  // register sma0_wmi_sThreadBusy_d
  assign sma0_wmi_sThreadBusy_d$D_IN = edp0$wmiS0_SThreadBusy ;
  assign sma0_wmi_sThreadBusy_d$EN = 1'd1 ;

  // register sma0_wmi_statusR
  assign sma0_wmi_statusR$D_IN = 8'h0 ;
  assign sma0_wmi_statusR$EN = 1'b0 ;

  // register sma0_wmi_trafficSticky
  assign sma0_wmi_trafficSticky$D_IN = 1'b0 ;
  assign sma0_wmi_trafficSticky$EN = 1'b0 ;

  // register sma0_wmwtBeginCount
  assign sma0_wmwtBeginCount$D_IN = sma0_wmwtBeginCount + 32'd1 ;
  assign sma0_wmwtBeginCount$EN = WILL_FIRE_RL_sma0_wmwt_mesgBegin ;

  // register sma0_wmwtFinalCount
  assign sma0_wmwtFinalCount$D_IN = sma0_wmwtFinalCount + 32'd1 ;
  assign sma0_wmwtFinalCount$EN = WILL_FIRE_RL_sma0_wmwt_messageFinalize ;

  // register sma0_wmwtPushCount
  assign sma0_wmwtPushCount$D_IN = sma0_wmwtPushCount + 32'd1 ;
  assign sma0_wmwtPushCount$EN = WILL_FIRE_RL_sma0_wmwt_messagePush ;

  // register sma0_wsiM_burstKind
  assign sma0_wsiM_burstKind$D_IN =
	     (sma0_wsiM_burstKind == 2'd0) ?
	       (sma0_wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign sma0_wsiM_burstKind$EN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_deq &&
	     sma0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (sma0_wsiM_burstKind == 2'd0 ||
	      (sma0_wsiM_burstKind == 2'd1 || sma0_wsiM_burstKind == 2'd2) &&
	      sma0_wsiM_reqFifo_q_0[57]) ;

  // register sma0_wsiM_errorSticky
  assign sma0_wsiM_errorSticky$D_IN = 1'b0 ;
  assign sma0_wsiM_errorSticky$EN = 1'b0 ;

  // register sma0_wsiM_iMesgCount
  assign sma0_wsiM_iMesgCount$D_IN = sma0_wsiM_iMesgCount + 32'd1 ;
  assign sma0_wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_deq &&
	     sma0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     sma0_wsiM_burstKind == 2'd2 &&
	     sma0_wsiM_reqFifo_q_0[57] ;

  // register sma0_wsiM_isReset_isInReset
  assign sma0_wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign sma0_wsiM_isReset_isInReset$EN = sma0_wsiM_isReset_isInReset ;

  // register sma0_wsiM_operateD
  assign sma0_wsiM_operateD$D_IN = sma0_wci_wslv_cState == 3'd2 ;
  assign sma0_wsiM_operateD$EN = 1'd1 ;

  // register sma0_wsiM_pMesgCount
  assign sma0_wsiM_pMesgCount$D_IN = sma0_wsiM_pMesgCount + 32'd1 ;
  assign sma0_wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_deq &&
	     sma0_wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     sma0_wsiM_burstKind == 2'd1 &&
	     sma0_wsiM_reqFifo_q_0[57] ;

  // register sma0_wsiM_peerIsReady
  assign sma0_wsiM_peerIsReady$D_IN = 1'b0 ;
  assign sma0_wsiM_peerIsReady$EN = 1'd1 ;

  // register sma0_wsiM_reqFifo_c_r
  assign sma0_wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr ?
	       MUX_sma0_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_sma0_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign sma0_wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr ;

  // register sma0_wsiM_reqFifo_q_0
  always@(MUX_sma0_wsiM_reqFifo_q_0$write_1__SEL_1 or
	  MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wsiM_reqFifo_both or
	  MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr or sma0_wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wsiM_reqFifo_q_0$write_1__SEL_1:
	  sma0_wsiM_reqFifo_q_0$D_IN =
	      MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wsiM_reqFifo_both:
	  sma0_wsiM_reqFifo_q_0$D_IN =
	      MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr:
	  sma0_wsiM_reqFifo_q_0$D_IN = sma0_wsiM_reqFifo_q_1;
      default: sma0_wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr &&
	     sma0_wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr ;

  // register sma0_wsiM_reqFifo_q_1
  always@(MUX_sma0_wsiM_reqFifo_q_1$write_1__SEL_1 or
	  MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_sma0_wsiM_reqFifo_both or
	  MUX_sma0_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_sma0_wsiM_reqFifo_q_1$write_1__SEL_1:
	  sma0_wsiM_reqFifo_q_1$D_IN =
	      MUX_sma0_wsiM_reqFifo_q_0$write_1__VAL_1;
      WILL_FIRE_RL_sma0_wsiM_reqFifo_both:
	  sma0_wsiM_reqFifo_q_1$D_IN =
	      MUX_sma0_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr:
	  sma0_wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: sma0_wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sma0_wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_incCtr &&
	     sma0_wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_decCtr ;

  // register sma0_wsiM_sThreadBusy_d
  assign sma0_wsiM_sThreadBusy_d$D_IN = 1'b0 ;
  assign sma0_wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register sma0_wsiM_statusR
  assign sma0_wsiM_statusR$D_IN =
	     { sma0_wsiM_isReset_isInReset,
	       !sma0_wsiM_peerIsReady,
	       !sma0_wsiM_operateD,
	       sma0_wsiM_errorSticky,
	       sma0_wsiM_burstKind != 2'd0,
	       sma0_wsiM_sThreadBusy_d,
	       1'd0,
	       sma0_wsiM_trafficSticky } ;
  assign sma0_wsiM_statusR$EN = 1'd1 ;

  // register sma0_wsiM_tBusyCount
  assign sma0_wsiM_tBusyCount$D_IN = sma0_wsiM_tBusyCount + 32'd1 ;
  assign sma0_wsiM_tBusyCount$EN =
	     sma0_wsiM_operateD && sma0_wsiM_peerIsReady &&
	     sma0_wsiM_sThreadBusy_d ;

  // register sma0_wsiM_trafficSticky
  assign sma0_wsiM_trafficSticky$D_IN = 1'd1 ;
  assign sma0_wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_sma0_wsiM_reqFifo_deq &&
	     sma0_wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register sma0_wsiS_burstKind
  assign sma0_wsiS_burstKind$D_IN =
	     (sma0_wsiS_burstKind == 2'd0) ?
	       (sma0_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign sma0_wsiS_burstKind$EN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq &&
	     (sma0_wsiS_burstKind == 2'd0 ||
	      (sma0_wsiS_burstKind == 2'd1 || sma0_wsiS_burstKind == 2'd2) &&
	      sma0_wsiS_wsiReq$wget[57]) ;

  // register sma0_wsiS_errorSticky
  assign sma0_wsiS_errorSticky$D_IN = 1'b0 ;
  assign sma0_wsiS_errorSticky$EN = 1'b0 ;

  // register sma0_wsiS_iMesgCount
  assign sma0_wsiS_iMesgCount$D_IN = sma0_wsiS_iMesgCount + 32'd1 ;
  assign sma0_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq &&
	     sma0_wsiS_burstKind == 2'd2 &&
	     sma0_wsiS_wsiReq$wget[57] ;

  // register sma0_wsiS_isReset_isInReset
  assign sma0_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign sma0_wsiS_isReset_isInReset$EN = sma0_wsiS_isReset_isInReset ;

  // register sma0_wsiS_mesgWordLength
  assign sma0_wsiS_mesgWordLength$D_IN = sma0_wsiS_wordCount ;
  assign sma0_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq && sma0_wsiS_wsiReq$wget[57] ;

  // register sma0_wsiS_operateD
  assign sma0_wsiS_operateD$D_IN = sma0_wci_wslv_cState == 3'd2 ;
  assign sma0_wsiS_operateD$EN = 1'd1 ;

  // register sma0_wsiS_pMesgCount
  assign sma0_wsiS_pMesgCount$D_IN = sma0_wsiS_pMesgCount + 32'd1 ;
  assign sma0_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq &&
	     sma0_wsiS_burstKind == 2'd1 &&
	     sma0_wsiS_wsiReq$wget[57] ;

  // register sma0_wsiS_peerIsReady
  assign sma0_wsiS_peerIsReady$D_IN = sma0_wsiS_peerIsReady_1$whas ;
  assign sma0_wsiS_peerIsReady$EN = 1'd1 ;

  // register sma0_wsiS_reqFifo_countReg
  assign sma0_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ?
	       sma0_wsiS_reqFifo_countReg + 2'd1 :
	       sma0_wsiS_reqFifo_countReg - 2'd1 ;
  assign sma0_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq !=
	     sma0_wsiS_reqFifo_r_deq$whas ;

  // register sma0_wsiS_reqFifo_levelsValid
  assign sma0_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_reset ;
  assign sma0_wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_sma0_wsipass_doMessagePush ||
	     WILL_FIRE_RL_sma0_wmwt_messagePush ||
	     WILL_FIRE_RL_sma0_wsiS_reqFifo_reset ;

  // register sma0_wsiS_statusR
  assign sma0_wsiS_statusR$D_IN =
	     { sma0_wsiS_isReset_isInReset,
	       !sma0_wsiS_peerIsReady,
	       !sma0_wsiS_operateD,
	       sma0_wsiS_errorSticky,
	       sma0_wsiS_burstKind != 2'd0,
	       !sma0_wsiS_sThreadBusy_dw$whas ||
	       sma0_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       sma0_wsiS_trafficSticky } ;
  assign sma0_wsiS_statusR$EN = 1'd1 ;

  // register sma0_wsiS_tBusyCount
  assign sma0_wsiS_tBusyCount$D_IN = sma0_wsiS_tBusyCount + 32'd1 ;
  assign sma0_wsiS_tBusyCount$EN =
	     sma0_wsiS_operateD && sma0_wsiS_peerIsReady &&
	     (!sma0_wsiS_sThreadBusy_dw$whas ||
	      sma0_wsiS_sThreadBusy_dw$wget) ;

  // register sma0_wsiS_trafficSticky
  assign sma0_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign sma0_wsiS_trafficSticky$EN = WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ;

  // register sma0_wsiS_wordCount
  assign sma0_wsiS_wordCount$D_IN =
	     sma0_wsiS_wsiReq$wget[57] ? 12'd1 : sma0_wsiS_wordCount + 12'd1 ;
  assign sma0_wsiS_wordCount$EN = WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ;

  // submodule cap0
  assign cap0$wciS0_MAddr = cp$wci_Vm_11_MAddr ;
  assign cap0$wciS0_MAddrSpace = cp$wci_Vm_11_MAddrSpace ;
  assign cap0$wciS0_MByteEn = cp$wci_Vm_11_MByteEn ;
  assign cap0$wciS0_MCmd = cp$wci_Vm_11_MCmd ;
  assign cap0$wciS0_MData = cp$wci_Vm_11_MData ;
  assign cap0$wciS0_MFlag = cp$wci_Vm_11_MFlag ;
  assign cap0$wsiS0_MBurstLength = iqadc$wsiM0_MBurstLength ;
  assign cap0$wsiS0_MByteEn = iqadc$wsiM0_MByteEn ;
  assign cap0$wsiS0_MCmd = iqadc$wsiM0_MCmd ;
  assign cap0$wsiS0_MData = iqadc$wsiM0_MData ;
  assign cap0$wsiS0_MReqInfo = iqadc$wsiM0_MReqInfo ;
  assign cap0$wtiS0_MCmd = 3'h0 ;
  assign cap0$wtiS0_MData = 64'h0 ;
  assign cap0$wsiS0_MReqLast = iqadc$wsiM0_MReqLast ;
  assign cap0$wsiS0_MBurstPrecise = iqadc$wsiM0_MBurstPrecise ;
  assign cap0$wsiS0_MReset_n = iqadc$wsiM0_MReset_n ;

  // submodule cp
  assign cp$gps_ppsSyncIn_x = 1'b0 ;
  assign cp$server_request_put = gbe0$cpClient_request_get ;
  assign cp$switch_x = 3'h0 ;
  assign cp$uuid_arg = 512'h0 ;
  assign cp$wci_Vm_0_SData = 32'h0 ;
  assign cp$wci_Vm_0_SFlag = 2'h0 ;
  assign cp$wci_Vm_0_SResp = 2'h0 ;
  assign cp$wci_Vm_10_SData = iqadc$wciS0_SData ;
  assign cp$wci_Vm_10_SFlag = iqadc$wciS0_SFlag ;
  assign cp$wci_Vm_10_SResp = iqadc$wciS0_SResp ;
  assign cp$wci_Vm_11_SData = cap0$wciS0_SData ;
  assign cp$wci_Vm_11_SFlag = cap0$wciS0_SFlag ;
  assign cp$wci_Vm_11_SResp = cap0$wciS0_SResp ;
  assign cp$wci_Vm_12_SData = 32'h0 ;
  assign cp$wci_Vm_12_SFlag = 2'h0 ;
  assign cp$wci_Vm_12_SResp = 2'h0 ;
  assign cp$wci_Vm_13_SData = edp0$wciS0_SData ;
  assign cp$wci_Vm_13_SFlag = edp0$wciS0_SFlag ;
  assign cp$wci_Vm_13_SResp = edp0$wciS0_SResp ;
  assign cp$wci_Vm_14_SData = 32'h0 ;
  assign cp$wci_Vm_14_SFlag = 2'h0 ;
  assign cp$wci_Vm_14_SResp = 2'h0 ;
  assign cp$wci_Vm_1_SData = 32'h0 ;
  assign cp$wci_Vm_1_SFlag = 2'h0 ;
  assign cp$wci_Vm_1_SResp = 2'h0 ;
  assign cp$wci_Vm_2_SData = 32'h0 ;
  assign cp$wci_Vm_2_SFlag = 2'h0 ;
  assign cp$wci_Vm_2_SResp = 2'h0 ;
  assign cp$wci_Vm_3_SData = 32'h0 ;
  assign cp$wci_Vm_3_SFlag = 2'h0 ;
  assign cp$wci_Vm_3_SResp = 2'h0 ;
  assign cp$wci_Vm_4_SData = 32'h0 ;
  assign cp$wci_Vm_4_SFlag = 2'h0 ;
  assign cp$wci_Vm_4_SResp = 2'h0 ;
  assign cp$wci_Vm_5_SData = pat0_wci_wslv_respF_q_0[31:0] ;
  assign cp$wci_Vm_5_SFlag = { 1'd1, pat0_wci_wslv_sFlagReg } ;
  assign cp$wci_Vm_5_SResp = pat0_wci_wslv_respF_q_0[33:32] ;
  assign cp$wci_Vm_6_SData = sma0_wci_wslv_respF_q_0[31:0] ;
  assign cp$wci_Vm_6_SFlag = { 1'd1, sma0_wci_wslv_sFlagReg } ;
  assign cp$wci_Vm_6_SResp = sma0_wci_wslv_respF_q_0[33:32] ;
  assign cp$wci_Vm_7_SData = pwrk$wciS0_SData ;
  assign cp$wci_Vm_7_SFlag = pwrk$wciS0_SFlag ;
  assign cp$wci_Vm_7_SResp = pwrk$wciS0_SResp ;
  assign cp$wci_Vm_8_SData = 32'hAAAAAAAA /* unspecified value */  ;
  assign cp$wci_Vm_8_SFlag = 2'b0 ;
  assign cp$wci_Vm_8_SResp = 2'd0 ;
  assign cp$wci_Vm_9_SData = gbewrk$wciS0_SData ;
  assign cp$wci_Vm_9_SFlag = gbewrk$wciS0_SFlag ;
  assign cp$wci_Vm_9_SResp = gbewrk$wciS0_SResp ;
  assign cp$EN_server_request_put =
	     gbe0$RDY_cpClient_request_get && cp$RDY_server_request_put ;
  assign cp$EN_server_response_get =
	     gbe0$RDY_cpClient_response_put && cp$RDY_server_response_get ;
  assign cp$wci_Vm_0_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_1_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_2_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_3_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_4_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_5_SThreadBusy =
	     pat0_wci_wslv_reqF_countReg > 2'd1 ||
	     pat0_wci_wslv_isReset_isInReset ;
  assign cp$wci_Vm_6_SThreadBusy =
	     sma0_wci_wslv_reqF_countReg > 2'd1 ||
	     sma0_wci_wslv_isReset_isInReset ;
  assign cp$wci_Vm_7_SThreadBusy = pwrk$wciS0_SThreadBusy ;
  assign cp$wci_Vm_8_SThreadBusy = 1'd1 ;
  assign cp$wci_Vm_9_SThreadBusy = gbewrk$wciS0_SThreadBusy ;
  assign cp$wci_Vm_10_SThreadBusy = iqadc$wciS0_SThreadBusy ;
  assign cp$wci_Vm_11_SThreadBusy = cap0$wciS0_SThreadBusy ;
  assign cp$wci_Vm_12_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_13_SThreadBusy = edp0$wciS0_SThreadBusy ;
  assign cp$wci_Vm_14_SThreadBusy = 1'b0 ;

  // submodule edp0
  assign edp0$server_request_put =
	     { CASE_gbe0dpClient_request_get_BITS_9_TO_8_3_0_ETC__q2,
	       gbe0$dpClient_request_get[7:0] } ;
  assign edp0$wciS0_MAddr = cp$wci_Vm_13_MAddr ;
  assign edp0$wciS0_MAddrSpace = cp$wci_Vm_13_MAddrSpace ;
  assign edp0$wciS0_MByteEn = cp$wci_Vm_13_MByteEn ;
  assign edp0$wciS0_MCmd = cp$wci_Vm_13_MCmd ;
  assign edp0$wciS0_MData = cp$wci_Vm_13_MData ;
  assign edp0$wciS0_MFlag = cp$wci_Vm_13_MFlag ;
  assign edp0$wmiS0_MAddr =
	     sma0_wmi_sThreadBusy_d ? 14'd0 : sma0_wmi_reqF_q_0[25:12] ;
  assign edp0$wmiS0_MAddrSpace =
	     !sma0_wmi_sThreadBusy_d && sma0_wmi_reqF_q_0[26] ;
  assign edp0$wmiS0_MBurstLength =
	     sma0_wmi_sThreadBusy_d ? 12'd0 : sma0_wmi_reqF_q_0[11:0] ;
  assign edp0$wmiS0_MCmd =
	     sma0_wmi_sThreadBusy_d ? 3'd0 : sma0_wmi_reqF_q_0[31:29] ;
  assign edp0$wmiS0_MData =
	     sma0_wmi_sDataThreadBusy_d ? 32'd0 : sma0_wmi_dhF_q_0[35:4] ;
  assign edp0$wmiS0_MDataByteEn =
	     sma0_wmi_sDataThreadBusy_d ? 4'd0 : sma0_wmi_dhF_q_0[3:0] ;
  assign edp0$wmiS0_MReqInfo =
	     !sma0_wmi_sThreadBusy_d && sma0_wmi_reqF_q_0[27] ;
  assign edp0$wmiS0_arg_mFlag =
	     sma0_wmi_sThreadBusy_d ? 32'd0 : sma0_wmi_mFlagF_q_0 ;
  assign edp0$wtiS0_req = 67'h0 ;
  assign edp0$wmiS0_MReqLast =
	     !sma0_wmi_sThreadBusy_d && sma0_wmi_reqF_q_0[28] ;
  assign edp0$wmiS0_MDataValid =
	     !sma0_wmi_sDataThreadBusy_d && sma0_wmi_dhF_q_0[37] ;
  assign edp0$wmiS0_MDataLast =
	     !sma0_wmi_sDataThreadBusy_d && sma0_wmi_dhF_q_0[36] ;
  assign edp0$wmiS0_MReset_n =
	     !sma0_wmi_isReset_isInReset && sma0_wmi_operateD ;
  assign edp0$EN_server_request_put =
	     gbe0$RDY_dpClient_request_get && edp0$RDY_server_request_put ;
  assign edp0$EN_server_response_get =
	     gbe0$RDY_dpClient_response_put && edp0$RDY_server_response_get ;

  // submodule gbe0
  assign gbe0$cpClient_response_put = cp$server_response_get ;
  assign gbe0$dpClient_response_put =
	     { CASE_edp0server_response_get_BITS_9_TO_8_3_0__ETC__q3,
	       edp0$server_response_get[7:0] } ;
  assign gbe0$gmii_col_i = gmii_col_i ;
  assign gbe0$gmii_crs_i = gmii_crs_i ;
  assign gbe0$gmii_intr_i = gmii_intr_i ;
  assign gbe0$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gbe0$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gbe0$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gbe0$macAddr_u = pwrk$macAddr ;
  assign gbe0$EN_macAddr = 1'd1 ;
  assign gbe0$EN_cpClient_request_get =
	     gbe0$RDY_cpClient_request_get && cp$RDY_server_request_put ;
  assign gbe0$EN_cpClient_response_put =
	     gbe0$RDY_cpClient_response_put && cp$RDY_server_response_get ;
  assign gbe0$EN_dpClient_request_get =
	     gbe0$RDY_dpClient_request_get && edp0$RDY_server_request_put ;
  assign gbe0$EN_dpClient_response_put =
	     gbe0$RDY_dpClient_response_put && edp0$RDY_server_response_get ;

  // submodule gbewrk
  assign gbewrk$wciS0_MAddr = cp$wci_Vm_9_MAddr ;
  assign gbewrk$wciS0_MAddrSpace = cp$wci_Vm_9_MAddrSpace ;
  assign gbewrk$wciS0_MByteEn = cp$wci_Vm_9_MByteEn ;
  assign gbewrk$wciS0_MCmd = cp$wci_Vm_9_MCmd ;
  assign gbewrk$wciS0_MData = cp$wci_Vm_9_MData ;
  assign gbewrk$wciS0_MFlag = cp$wci_Vm_9_MFlag ;

  // submodule iqadc
  assign iqadc$adc_da_i = adc_da_i ;
  assign iqadc$adc_db_i = adc_db_i ;
  assign iqadc$adc_smiso_i = adc_smiso_i ;
  assign iqadc$wciS0_MAddr = cp$wci_Vm_10_MAddr ;
  assign iqadc$wciS0_MAddrSpace = cp$wci_Vm_10_MAddrSpace ;
  assign iqadc$wciS0_MByteEn = cp$wci_Vm_10_MByteEn ;
  assign iqadc$wciS0_MCmd = cp$wci_Vm_10_MCmd ;
  assign iqadc$wciS0_MData = cp$wci_Vm_10_MData ;
  assign iqadc$wciS0_MFlag = cp$wci_Vm_10_MFlag ;
  assign iqadc$wtiS0_req = 67'h0 ;
  assign iqadc$wsiM0_SThreadBusy = cap0$wsiS0_SThreadBusy ;
  assign iqadc$wsiM0_SReset_n = cap0$wsiS0_SReset_n ;

  // submodule ledLogic
  assign ledLogic$ledDrive_i = 5'h0 ;
  assign ledLogic$EN_ledDrive = 1'b0 ;

  // submodule pat0_dataBram_memory
  assign pat0_dataBram_memory$ADDRA = pat0_dataPtr[9:0] ;
  assign pat0_dataBram_memory$ADDRB = pat0_wci_wslv_reqF$D_OUT[43:34] ;
  assign pat0_dataBram_memory$DIA = 32'd0 ;
  assign pat0_dataBram_memory$DIB =
	     MUX_pat0_dataBram_memory$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_dataBram_memory$WEA = 1'd0 ;
  assign pat0_dataBram_memory$WEB = !MUX_pat0_dataBram_memory$b_put_1__SEL_1 ;
  assign pat0_dataBram_memory$ENA =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ;
  assign pat0_dataBram_memory$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800 ;

  // submodule pat0_dataBram_serverAdapterA_outDataCore
  assign pat0_dataBram_serverAdapterA_outDataCore$D_IN =
	     pat0_dataBram_memory$DOA ;
  assign pat0_dataBram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterA_outDataCore$FULL_N &&
	     !pat0_dataBram_serverAdapterA_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterA_outData_deqCalled$whas &&
	     !pat0_dataBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule pat0_dataBram_serverAdapterB_outDataCore
  assign pat0_dataBram_serverAdapterB_outDataCore$D_IN =
	     pat0_dataBram_memory$DOB ;
  assign pat0_dataBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterB_outDataCore$FULL_N &&
	     !pat0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_dataBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_dataBram_serverAdapterB_outData_deqCalled$whas &&
	     !pat0_dataBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_dataBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule pat0_loopReqInFlightF
  assign pat0_loopReqInFlightF$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_loopReqInFlightF$DEQ =
	     WILL_FIRE_RL_pat0_doMessageEmit &&
	     (pat0_thisLength == 32'd0 || pat0_unrollCnt == 16'd1) ;
  assign pat0_loopReqInFlightF$CLR = 1'b0 ;

  // submodule pat0_metaBram_memory
  assign pat0_metaBram_memory$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory$DIA = 32'd0 ;
  assign pat0_metaBram_memory$DIB =
	     MUX_pat0_metaBram_memory$b_put_2__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory$WEA = 1'd0 ;
  assign pat0_metaBram_memory$WEB = !MUX_pat0_metaBram_memory$b_put_2__SEL_1 ;
  assign pat0_metaBram_memory$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_memory$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd0 ;

  // submodule pat0_metaBram_memory_1
  assign pat0_metaBram_memory_1$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory_1$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory_1$DIA = 32'd0 ;
  assign pat0_metaBram_memory_1$DIB =
	     MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory_1$WEA = 1'd0 ;
  assign pat0_metaBram_memory_1$WEB =
	     !MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ;
  assign pat0_metaBram_memory_1$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_memory_1$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd1 ;

  // submodule pat0_metaBram_memory_2
  assign pat0_metaBram_memory_2$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory_2$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory_2$DIA = 32'd0 ;
  assign pat0_metaBram_memory_2$DIB =
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory_2$WEA = 1'd0 ;
  assign pat0_metaBram_memory_2$WEB =
	     !MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ;
  assign pat0_metaBram_memory_2$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_memory_2$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd2 ;

  // submodule pat0_metaBram_memory_3
  assign pat0_metaBram_memory_3$ADDRA = pat0_metaPtr_value[9:0] ;
  assign pat0_metaBram_memory_3$ADDRB = pat0_wci_wslv_reqF$D_OUT[45:36] ;
  assign pat0_metaBram_memory_3$DIA = 32'd0 ;
  assign pat0_metaBram_memory_3$DIB =
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ?
	       32'd0 :
	       pat0_wci_wslv_reqF$D_OUT[31:0] ;
  assign pat0_metaBram_memory_3$WEA = 1'd0 ;
  assign pat0_metaBram_memory_3$WEB =
	     !MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ;
  assign pat0_metaBram_memory_3$ENA =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaBram_memory_3$ENB =
	     WILL_FIRE_RL_pat0_wci_cfrd &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ||
	     WILL_FIRE_RL_pat0_wci_cfwr &&
	     pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h400 &&
	     pat0_wci_wslv_reqF$D_OUT[35:34] == 2'd3 ;

  // submodule pat0_metaBram_serverAdapterA_1_outDataCore
  assign pat0_metaBram_serverAdapterA_1_outDataCore$D_IN =
	     pat0_metaBram_memory_1$DOA ;
  assign pat0_metaBram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterA_2_outDataCore
  assign pat0_metaBram_serverAdapterA_2_outDataCore$D_IN =
	     pat0_metaBram_memory_2$DOA ;
  assign pat0_metaBram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterA_3_outDataCore
  assign pat0_metaBram_serverAdapterA_3_outDataCore$D_IN =
	     pat0_metaBram_memory_3$DOA ;
  assign pat0_metaBram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterA_outDataCore
  assign pat0_metaBram_serverAdapterA_outDataCore$D_IN =
	     pat0_metaBram_memory$DOA ;
  assign pat0_metaBram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_pat0_resp_meta &&
	     pat0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_pat0_resp_meta &&
	     !pat0_metaBram_serverAdapterA_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_1_outDataCore
  assign pat0_metaBram_serverAdapterB_1_outDataCore$D_IN =
	     pat0_metaBram_memory_1$DOB ;
  assign pat0_metaBram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_1_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_1_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_2_outDataCore
  assign pat0_metaBram_serverAdapterB_2_outDataCore$D_IN =
	     pat0_metaBram_memory_2$DOB ;
  assign pat0_metaBram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_2_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_2_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_3_outDataCore
  assign pat0_metaBram_serverAdapterB_3_outDataCore$D_IN =
	     pat0_metaBram_memory_3$DOB ;
  assign pat0_metaBram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_3_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_3_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaBram_serverAdapterB_outDataCore
  assign pat0_metaBram_serverAdapterB_outDataCore$D_IN =
	     pat0_metaBram_memory$DOB ;
  assign pat0_metaBram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_outDataCore$FULL_N &&
	     !pat0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     pat0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterB_outData_enqAndDeq ||
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N &&
	     pat0_metaBram_serverAdapterB_outData_deqCalled$whas &&
	     !pat0_metaBram_serverAdapterB_outData_enqData$whas ;
  assign pat0_metaBram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule pat0_metaReqInFlightF
  assign pat0_metaReqInFlightF$ENQ =
	     WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ;
  assign pat0_metaReqInFlightF$DEQ = WILL_FIRE_RL_pat0_resp_meta ;
  assign pat0_metaReqInFlightF$CLR = 1'b0 ;

  // submodule pat0_splaF
  assign pat0_splaF$D_IN =
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h800) ?
	       3'd4 :
	       { 1'd0, pat0_wci_wslv_reqF$D_OUT[35:34] } ;
  assign pat0_splaF$ENQ = MUX_pat0_splitReadInFlight$write_1__SEL_1 ;
  assign pat0_splaF$DEQ = WILL_FIRE_RL_pat0_advance_split_response ;
  assign pat0_splaF$CLR = 1'b0 ;

  // submodule pat0_wci_wslv_reqF
  assign pat0_wci_wslv_reqF$D_IN = pat0_wci_wslv_wciReq$wget ;
  assign pat0_wci_wslv_reqF$ENQ = pat0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign pat0_wci_wslv_reqF$DEQ = pat0_wci_wslv_reqF_r_deq$whas ;
  assign pat0_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule pwrk
  assign pwrk$spipad_miso_i = flash_miso_i ;
  assign pwrk$wciS0_MAddr = cp$wci_Vm_7_MAddr ;
  assign pwrk$wciS0_MAddrSpace = cp$wci_Vm_7_MAddrSpace ;
  assign pwrk$wciS0_MByteEn = cp$wci_Vm_7_MByteEn ;
  assign pwrk$wciS0_MCmd = cp$wci_Vm_7_MCmd ;
  assign pwrk$wciS0_MData = cp$wci_Vm_7_MData ;
  assign pwrk$wciS0_MFlag = cp$wci_Vm_7_MFlag ;

  // submodule sma0_mesgTokenF
  assign sma0_mesgTokenF$ENQ = WILL_FIRE_RL_sma0_wmwt_mesgBegin ;
  assign sma0_mesgTokenF$DEQ = WILL_FIRE_RL_sma0_wmwt_messageFinalize ;
  assign sma0_mesgTokenF$CLR = 1'b0 ;

  // submodule sma0_respF_memory
  assign sma0_respF_memory$ADDRA = sma0_respF_rWrPtr[10:0] ;
  assign sma0_respF_memory$ADDRB =
	     WILL_FIRE_RL_sma0_wmrd_mesgResptoWsi ?
	       x__h50927[10:0] :
	       sma0_respF_rRdPtr[10:0] ;
  assign sma0_respF_memory$DIA =
	     { IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2525,
	       sma0_respF_pwEnqueue$whas && sma0_respF_wDataIn$wget[57],
	       sma0_respF_pwEnqueue$whas && sma0_respF_wDataIn$wget[56],
	       IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2561 } ;
  assign sma0_respF_memory$DIB =
	     61'h0AAAAAAAAAAAAAAA /* unspecified value */  ;
  assign sma0_respF_memory$WEA = sma0_respF_pwEnqueue$whas ;
  assign sma0_respF_memory$WEB = 1'd0 ;
  assign sma0_respF_memory$ENA = 1'd1 ;
  assign sma0_respF_memory$ENB = 1'd1 ;

  // submodule sma0_wci_wslv_reqF
  assign sma0_wci_wslv_reqF$D_IN = sma0_wci_wslv_wciReq$wget ;
  assign sma0_wci_wslv_reqF$ENQ = sma0_wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign sma0_wci_wslv_reqF$DEQ = sma0_wci_wslv_reqF_r_deq$whas ;
  assign sma0_wci_wslv_reqF$CLR = 1'b0 ;

  // submodule sma0_wmi_respF
  assign sma0_wmi_respF$D_IN = sma0_wmi_wmiResponse$wget ;
  assign sma0_wmi_respF$ENQ =
	     sma0_wmi_respF$FULL_N && sma0_wmi_operateD &&
	     sma0_wmi_peerIsReady &&
	     sma0_wmi_wmiResponse$wget[33:32] != 2'd0 ;
  assign sma0_wmi_respF$DEQ = WILL_FIRE_RL_sma0_wmrd_mesgBodyResponse ;
  assign sma0_wmi_respF$CLR = 1'b0 ;

  // submodule sma0_wsiS_reqFifo
  assign sma0_wsiS_reqFifo$D_IN = sma0_wsiS_wsiReq$wget ;
  assign sma0_wsiS_reqFifo$ENQ = WILL_FIRE_RL_sma0_wsiS_reqFifo_enq ;
  assign sma0_wsiS_reqFifo$DEQ = sma0_wsiS_reqFifo_r_deq$whas ;
  assign sma0_wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1045 =
	     IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1036 &&
	     CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 ;
  assign IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2525 =
	     sma0_respF_pwEnqueue$whas ?
	       sma0_respF_wDataIn$wget[60:58] :
	       3'd0 ;
  assign IF_sma0_respF_wDataIn_whas__615_THEN_sma0_resp_ETC___d2561 =
	     sma0_respF_pwEnqueue$whas ?
	       sma0_respF_wDataIn$wget[55:0] :
	       56'd0 ;
  assign NOT_sma0_wmi_reqF_c_r_341_EQ_2_359_360_AND_sma_ETC___d1706 =
	     sma0_wmi_reqF_c_r != 2'd2 && sma0_wmi_operateD &&
	     sma0_wmi_peerIsReady &&
	     (!x__h52929 || sma0_wmi_mFlagF_c_r != 2'd2) ;
  assign ab__h13546 = MUX_pat0_dataBram_memory$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h16645 = MUX_pat0_metaBram_memory$b_put_2__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h19572 =
	     MUX_pat0_metaBram_memory_1$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h22499 =
	     MUX_pat0_metaBram_memory_2$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign ab__h25426 =
	     MUX_pat0_metaBram_memory_3$b_put_1__SEL_1 ? 2'd0 : 2'd2 ;
  assign b__h27160 = x__h27176 + residue__h27149 ;
  assign b__h49573 = -sma0_fabWordsCurReq[11:0] ;
  assign b__h52385 = x__h52505 + residue__h52248 ;
  assign b__h52758 =
	     { {2{sma0_fabRespCredit_value[11]}}, sma0_fabRespCredit_value } ;
  assign g_data__h34295 =
	     (pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0) ? v__h33284 : 32'd0 ;
  assign mesgMetaF_length__h56967 =
	     (sma0_wsiS_reqFifo$D_OUT[57] &&
	      sma0_wsiS_reqFifo$D_OUT[11:8] == 4'd0 &&
	      sma0_mesgLengthSoFar == 14'd0) ?
	       24'd0 :
	       { 10'd0, mlB__h56800 } ;
  assign mesgMetaF_opcode__h56966 = sma0_opcode[8] ? sma0_opcode[7:0] : 8'd0 ;
  assign mlB__h56800 = sma0_mesgLengthSoFar + mlInc__h56799 ;
  assign mlInc__h56799 =
	     sma0_wsiS_reqFifo$D_OUT[57] ?
	       { 11'd0, x__h57006 + y__h57007 } :
	       14'd4 ;
  assign pat0_dataBram_serverAdapterA_cnt_82_PLUS_IF_pa_ETC___d288 =
	     pat0_dataBram_serverAdapterA_cnt +
	     (WILL_FIRE_RL_pat0_dataBram_serverAdapterA_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (pat0_dataBram_serverAdapterA_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_dataBram_serverAdapterB_cnt_41_PLUS_IF_pa_ETC___d347 =
	     pat0_dataBram_serverAdapterB_cnt +
	     (pat0_dataBram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_dataBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_dataBram_serverAdapterB_cnt_41_SLT_3___d2278 =
	     (pat0_dataBram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pat0_doZLM_12_OR_pat0_dataBram_serverAdapterA__ETC___d916 =
	     pat0_doZLM ||
	     (pat0_dataBram_serverAdapterA_outDataCore$EMPTY_N ||
	      pat0_dataBram_serverAdapterA_outData_enqData$whas) &&
	     pat0_dataBram_serverAdapterA_outData_outData$whas ;
  assign pat0_doZLM_12_OR_pat0_dataBram_serverAdapterA__ETC___d926 =
	     pat0_doZLM_12_OR_pat0_dataBram_serverAdapterA__ETC___d916 &&
	     (pat0_thisLength != 32'd0 && pat0_unrollCnt != 16'd1 ||
	      pat0_loopReqInFlightF$EMPTY_N) ;
  assign pat0_metaBram_serverAdapterA_1_cnt_18_PLUS_IF__ETC___d524 =
	     pat0_metaBram_serverAdapterA_1_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterA_1_outData_outData_ETC___d879 =
	     pat0_metaBram_serverAdapterA_1_outData_outData$whas &&
	     (pat0_metaBram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_2_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_2_outData_outData$whas &&
	     (pat0_metaBram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_3_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_3_outData_outData$whas ;
  assign pat0_metaBram_serverAdapterA_2_cnt_36_PLUS_IF__ETC___d642 =
	     pat0_metaBram_serverAdapterA_2_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterA_3_cnt_54_PLUS_IF__ETC___d760 =
	     pat0_metaBram_serverAdapterA_3_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterA_cnt_00_PLUS_IF_pa_ETC___d406 =
	     pat0_metaBram_serverAdapterA_cnt +
	     (WILL_FIRE_RL_pat0_metaBram_serverAdapterA_1_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_pat0_resp_meta ? 3'd7 : 3'd0) ;
  assign pat0_metaBram_serverAdapterB_1_cnt_77_PLUS_IF__ETC___d583 =
	     pat0_metaBram_serverAdapterB_1_cnt +
	     (pat0_metaBram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaBram_serverAdapterB_2_cnt_95_PLUS_IF__ETC___d701 =
	     pat0_metaBram_serverAdapterB_2_cnt +
	     (pat0_metaBram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaBram_serverAdapterB_3_cnt_13_PLUS_IF__ETC___d819 =
	     pat0_metaBram_serverAdapterB_3_cnt +
	     (pat0_metaBram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaBram_serverAdapterB_cnt_59_PLUS_IF_pa_ETC___d465 =
	     pat0_metaBram_serverAdapterB_cnt +
	     (pat0_metaBram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (pat0_metaBram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign pat0_metaReqInFlightF_i_notEmpty__67_AND_pat0__ETC___d883 =
	     pat0_metaReqInFlightF$EMPTY_N &&
	     (pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_outData_outData$whas &&
	     (pat0_metaBram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterA_1_outData_enqData$whas) &&
	     pat0_metaBram_serverAdapterA_1_outData_outData_ETC___d879 ;
  assign pat0_splaF_i_notEmpty__014_AND_IF_pat0_splaF_f_ETC___d1047 =
	     pat0_splaF$EMPTY_N &&
	     (pat0_splaF$D_OUT[2] ?
		(pat0_splaF$D_OUT[1:0] != 2'd0 ||
		 pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N ||
		 pat0_dataBram_serverAdapterB_outData_enqData$whas) &&
		(pat0_splaF$D_OUT[1:0] != 2'd0 ||
		 pat0_dataBram_serverAdapterB_outData_outData$whas) :
		IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1045) ;
  assign rdat___1__h33460 = { 24'd0, pat0_wsiM_statusR } ;
  assign rdat__h58423 = { 16'd0, x__h58426 } ;
  assign residue__h27149 =
	     ({ 4'd0, v__h26543[1:0] } == 6'd0) ? 32'd0 : 32'd1 ;
  assign residue__h52248 =
	     ({ 4'd0, sma0_wmi_sFlagReg[1:0] } == 6'd0) ? 24'd0 : 24'd1 ;
  assign sendData_burstLength__h53215 =
	     (sma0_thisMesg[15:0] == 16'd0 ||
	      sma0_smaCtrl[5] && sma0_unrollCnt == 16'd1) ?
	       12'd1 :
	       (sma0_smaCtrl[5] ? 12'd4095 : wsiBurstLength__h53133[11:0]) ;
  assign sendData_byteEn__h53217 =
	     (sma0_thisMesg[15:0] == 16'd0) ?
	       4'd0 :
	       ((sma0_unrollCnt == 16'd1) ? x__h53274[3:0] : 4'd15) ;
  assign sma0_wmi_respF_i_notEmpty__718_AND_sma0_smaCtr_ETC___d1723 =
	     sma0_wmi_respF$EMPTY_N &&
	     (sma0_smaCtrl[4] ||
	      sma0_respF_rRdPtr + 12'd1024 != sma0_respF_rWrPtr) ;
  assign sma0_wsiS_reqFifo_i_notEmpty__646_AND_NOT_sma0_ETC___d1851 =
	     sma0_wsiS_reqFifo$EMPTY_N &&
	     (sma0_smaCtrl[3:0] != 4'h3 || sma0_wsiM_reqFifo_c_r != 2'd2) &&
	     (!sma0_wsiS_reqFifo$D_OUT[57] || sma0_wmi_mFlagF_c_r != 2'd2) ;
  assign v__h26543 =
	     pat0_metaBram_serverAdapterA_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterA_outDataCore$D_OUT :
	       pat0_metaBram_memory$DOA ;
  assign v__h30908 =
	     pat0_splaF$D_OUT[2] ?
	       y_avValue__h31534 :
	       IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1069 ;
  assign value__h41066 =
	     MUX_sma0_wmi_mFlagF_x_wire$wset_1__SEL_1 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       MUX_sma0_wmi_mFlagF_x_wire$wset_1__VAL_2 ;
  assign wsiBurstLength__h53133 =
	     sma0_smaCtrl[5] ? 16'd2 : { 2'd0, sma0_thisMesg[15:2] } ;
  assign x__h27176 = { 2'd0, v__h26543[31:2] } ;
  assign x__h28102 =
	     ({ 4'd0, pat0_thisLength[1:0] } == 6'd0) ?
	       32'hFFFFFFFF :
	       (({ 4'd0, pat0_thisLength[1:0] } <= 6'd1) ?
		  32'd1 :
		  (({ 4'd0, pat0_thisLength[1:0] } <= 6'd2) ?
		     32'd3 :
		     (({ 4'd0, pat0_thisLength[1:0] } <= 6'd3) ?
			32'd7 :
			(({ 4'd0, pat0_thisLength[1:0] } <= 6'd4) ?
			   32'd15 :
			   (({ 4'd0, pat0_thisLength[1:0] } <= 6'd5) ?
			      32'd31 :
			      (({ 4'd0, pat0_thisLength[1:0] } <= 6'd6) ?
				 32'd63 :
				 (({ 4'd0, pat0_thisLength[1:0] } <= 6'd7) ?
				    32'd127 :
				    (({ 4'd0, pat0_thisLength[1:0] } <=
				      6'd8) ?
				       32'd255 :
				       (({ 4'd0, pat0_thisLength[1:0] } <=
					 6'd9) ?
					  32'd511 :
					  (({ 4'd0, pat0_thisLength[1:0] } <=
					    6'd10) ?
					     32'd1023 :
					     (({ 4'd0,
						 pat0_thisLength[1:0] } <=
					       6'd11) ?
						32'd2047 :
						(({ 4'd0,
						    pat0_thisLength[1:0] } <=
						  6'd12) ?
						   32'd4095 :
						   (({ 4'd0,
						       pat0_thisLength[1:0] } <=
						     6'd13) ?
						      32'd8191 :
						      (({ 4'd0,
							  pat0_thisLength[1:0] } <=
							6'd14) ?
							 32'd16383 :
							 (({ 4'd0,
							     pat0_thisLength[1:0] } <=
							   6'd15) ?
							    32'd32767 :
							    (({ 4'd0,
								pat0_thisLength[1:0] } <=
							      6'd16) ?
							       32'd65535 :
							       (({ 4'd0,
								   pat0_thisLength[1:0] } <=
								 6'd17) ?
								  32'd131071 :
								  (({ 4'd0,
								      pat0_thisLength[1:0] } <=
								    6'd18) ?
								     32'd262143 :
								     (({ 4'd0,
									 pat0_thisLength[1:0] } <=
								       6'd19) ?
									32'd524287 :
									(({ 4'd0,
									    pat0_thisLength[1:0] } <=
									  6'd20) ?
									   32'd1048575 :
									   (({ 4'd0,
									       pat0_thisLength[1:0] } <=
									     6'd21) ?
									      32'd2097151 :
									      (({ 4'd0,
										  pat0_thisLength[1:0] } <=
										6'd22) ?
										 32'd4194303 :
										 (({ 4'd0,
										     pat0_thisLength[1:0] } <=
										   6'd23) ?
										    32'd8388607 :
										    (({ 4'd0,
											pat0_thisLength[1:0] } <=
										      6'd24) ?
										       32'd16777215 :
										       (({ 4'd0,
											   pat0_thisLength[1:0] } <=
											 6'd25) ?
											  32'd33554431 :
											  (({ 4'd0,
											      pat0_thisLength[1:0] } <=
											    6'd26) ?
											     32'd67108863 :
											     (({ 4'd0,
												 pat0_thisLength[1:0] } <=
											       6'd27) ?
												32'd134217727 :
												(({ 4'd0,
												    pat0_thisLength[1:0] } <=
												  6'd28) ?
												   32'd268435455 :
												   (({ 4'd0,
												       pat0_thisLength[1:0] } <=
												     6'd29) ?
												      32'd536870911 :
												      (({ 4'd0,
													  pat0_thisLength[1:0] } <=
													6'd30) ?
													 32'd1073741823 :
													 (({ 4'd0,
													     pat0_thisLength[1:0] } <=
													   6'd31) ?
													    32'h7FFFFFFF :
													    32'hFFFFFFFF))))))))))))))))))))))))))))))) ;
  assign x__h50927 = sma0_respF_rRdPtr + 12'd1 ;
  assign x__h52505 = { 2'd0, sma0_wmi_sFlagReg[23:2] } ;
  assign x__h52929 = sma0_fabWordsRemain == sma0_fabWordsCurReq ;
  assign x__h53274 =
	     ({ 4'd0, sma0_thisMesg[1:0] } == 6'd0) ?
	       32'hFFFFFFFF :
	       (({ 4'd0, sma0_thisMesg[1:0] } <= 6'd1) ?
		  32'd1 :
		  (({ 4'd0, sma0_thisMesg[1:0] } <= 6'd2) ?
		     32'd3 :
		     (({ 4'd0, sma0_thisMesg[1:0] } <= 6'd3) ?
			32'd7 :
			(({ 4'd0, sma0_thisMesg[1:0] } <= 6'd4) ?
			   32'd15 :
			   (({ 4'd0, sma0_thisMesg[1:0] } <= 6'd5) ?
			      32'd31 :
			      (({ 4'd0, sma0_thisMesg[1:0] } <= 6'd6) ?
				 32'd63 :
				 (({ 4'd0, sma0_thisMesg[1:0] } <= 6'd7) ?
				    32'd127 :
				    (({ 4'd0, sma0_thisMesg[1:0] } <= 6'd8) ?
				       32'd255 :
				       (({ 4'd0, sma0_thisMesg[1:0] } <=
					 6'd9) ?
					  32'd511 :
					  (({ 4'd0, sma0_thisMesg[1:0] } <=
					    6'd10) ?
					     32'd1023 :
					     (({ 4'd0, sma0_thisMesg[1:0] } <=
					       6'd11) ?
						32'd2047 :
						(({ 4'd0,
						    sma0_thisMesg[1:0] } <=
						  6'd12) ?
						   32'd4095 :
						   (({ 4'd0,
						       sma0_thisMesg[1:0] } <=
						     6'd13) ?
						      32'd8191 :
						      (({ 4'd0,
							  sma0_thisMesg[1:0] } <=
							6'd14) ?
							 32'd16383 :
							 (({ 4'd0,
							     sma0_thisMesg[1:0] } <=
							   6'd15) ?
							    32'd32767 :
							    (({ 4'd0,
								sma0_thisMesg[1:0] } <=
							      6'd16) ?
							       32'd65535 :
							       (({ 4'd0,
								   sma0_thisMesg[1:0] } <=
								 6'd17) ?
								  32'd131071 :
								  (({ 4'd0,
								      sma0_thisMesg[1:0] } <=
								    6'd18) ?
								     32'd262143 :
								     (({ 4'd0,
									 sma0_thisMesg[1:0] } <=
								       6'd19) ?
									32'd524287 :
									(({ 4'd0,
									    sma0_thisMesg[1:0] } <=
									  6'd20) ?
									   32'd1048575 :
									   (({ 4'd0,
									       sma0_thisMesg[1:0] } <=
									     6'd21) ?
									      32'd2097151 :
									      (({ 4'd0,
										  sma0_thisMesg[1:0] } <=
										6'd22) ?
										 32'd4194303 :
										 (({ 4'd0,
										     sma0_thisMesg[1:0] } <=
										   6'd23) ?
										    32'd8388607 :
										    (({ 4'd0,
											sma0_thisMesg[1:0] } <=
										      6'd24) ?
										       32'd16777215 :
										       (({ 4'd0,
											   sma0_thisMesg[1:0] } <=
											 6'd25) ?
											  32'd33554431 :
											  (({ 4'd0,
											      sma0_thisMesg[1:0] } <=
											    6'd26) ?
											     32'd67108863 :
											     (({ 4'd0,
												 sma0_thisMesg[1:0] } <=
											       6'd27) ?
												32'd134217727 :
												(({ 4'd0,
												    sma0_thisMesg[1:0] } <=
												  6'd28) ?
												   32'd268435455 :
												   (({ 4'd0,
												       sma0_thisMesg[1:0] } <=
												     6'd29) ?
												      32'd536870911 :
												      (({ 4'd0,
													  sma0_thisMesg[1:0] } <=
													6'd30) ?
													 32'd1073741823 :
													 (({ 4'd0,
													     sma0_thisMesg[1:0] } <=
													   6'd31) ?
													    32'h7FFFFFFF :
													    32'hFFFFFFFF))))))))))))))))))))))))))))))) ;
  assign x__h57006 = x__h57018 + y__h57019 ;
  assign x__h57018 = x__h57030 + y__h57031 ;
  assign x__h57030 = { 2'd0, sma0_wsiS_reqFifo$D_OUT[11] } ;
  assign x__h58426 = { sma0_wsiS_statusR, sma0_wsiM_statusR } ;
  assign x_burstLength__h27936 =
	     (pat0_thisLength == 32'd0 || pat0_unrollCnt == 16'd1) ?
	       12'd1 :
	       12'd4095 ;
  assign x_byteEn__h27938 =
	     (pat0_thisLength == 32'd0) ?
	       4'd0 :
	       ((pat0_unrollCnt == 16'd1) ? x__h28102[3:0] : 4'd15) ;
  assign x_length__h57367 = { 2'd0, mlB__h56800 } ;
  assign y__h57007 = { 2'd0, sma0_wsiS_reqFifo$D_OUT[8] } ;
  assign y__h57019 = { 2'd0, sma0_wsiS_reqFifo$D_OUT[9] } ;
  assign y__h57031 = { 2'd0, sma0_wsiS_reqFifo$D_OUT[10] } ;
  assign y_avValue__h31534 =
	     pat0_dataBram_serverAdapterB_outDataCore$EMPTY_N ?
	       pat0_dataBram_serverAdapterB_outDataCore$D_OUT :
	       pat0_dataBram_memory$DOB ;
  assign y_avValue__h31578 =
	     pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_outDataCore$D_OUT :
	       pat0_metaBram_memory$DOB ;
  assign y_avValue__h31618 =
	     pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_1_outDataCore$D_OUT :
	       pat0_metaBram_memory_1$DOB ;
  assign y_avValue__h31658 =
	     pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_2_outDataCore$D_OUT :
	       pat0_metaBram_memory_2$DOB ;
  assign y_avValue__h31698 =
	     pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       pat0_metaBram_serverAdapterB_3_outDataCore$D_OUT :
	       pat0_metaBram_memory_3$DOB ;
  always@(pat0_splaF$D_OUT or
	  y_avValue__h31698 or
	  y_avValue__h31578 or y_avValue__h31618 or y_avValue__h31658)
  begin
    case (pat0_splaF$D_OUT[1:0])
      2'd0:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1069 =
	      y_avValue__h31578;
      2'd1:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1069 =
	      y_avValue__h31618;
      2'd2:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1069 =
	      y_avValue__h31658;
      2'd3:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1069 =
	      y_avValue__h31698;
    endcase
  end
  always@(pat0_wci_wslv_reqF$D_OUT or
	  pat0_metaBram_serverAdapterB_3_cnt or
	  pat0_metaBram_serverAdapterB_cnt or
	  pat0_metaBram_serverAdapterB_1_cnt or
	  pat0_metaBram_serverAdapterB_2_cnt)
  begin
    case (pat0_wci_wslv_reqF$D_OUT[35:34])
      2'd0:
	  IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518 =
	      (pat0_metaBram_serverAdapterB_cnt ^ 3'h4) < 3'd7;
      2'd1:
	  IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518 =
	      (pat0_metaBram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7;
      2'd2:
	  IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518 =
	      (pat0_metaBram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7;
      2'd3:
	  IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518 =
	      pat0_wci_wslv_reqF$D_OUT[35:34] != 2'd3 ||
	      (pat0_metaBram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7;
    endcase
  end
  always@(pat0_wci_wslv_reqF$D_OUT or
	  pat0_splaF$FULL_N or
	  IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518 or
	  pat0_dataBram_serverAdapterB_cnt_41_SLT_3___d2278)
  begin
    case (pat0_wci_wslv_reqF$D_OUT[63:52])
      12'h0:
	  IF_pat0_wci_wslv_reqF_first__3_BITS_63_TO_52_0_ETC___d1135 = 1'b1;
      12'h800:
	  IF_pat0_wci_wslv_reqF_first__3_BITS_63_TO_52_0_ETC___d1135 =
	      pat0_dataBram_serverAdapterB_cnt_41_SLT_3___d2278 &&
	      pat0_splaF$FULL_N;
      default: IF_pat0_wci_wslv_reqF_first__3_BITS_63_TO_52_0_ETC___d1135 =
		   pat0_wci_wslv_reqF$D_OUT[63:52] != 12'h400 ||
		   pat0_splaF$FULL_N &&
		   IF_pat0_wci_wslv_reqF_first__3_BITS_35_TO_34_0_ETC___d2518;
    endcase
  end
  always@(pat0_wci_wslv_reqF$D_OUT or
	  pat0_controlReg or
	  pat0_mesgCount or
	  pat0_dataCount or
	  pat0_mesgRemain or rdat___1__h33460 or pat0_wsiM_extStatusW$wget)
  begin
    case (pat0_wci_wslv_reqF$D_OUT[39:32])
      8'h0: v__h33284 = pat0_controlReg;
      8'h08: v__h33284 = pat0_mesgCount;
      8'h0C: v__h33284 = pat0_dataCount;
      8'h10: v__h33284 = pat0_mesgRemain;
      8'h1C: v__h33284 = 32'hA0240A0A;
      8'h20: v__h33284 = rdat___1__h33460;
      8'h24: v__h33284 = pat0_wsiM_extStatusW$wget[95:64];
      8'h28: v__h33284 = pat0_wsiM_extStatusW$wget[63:32];
      8'h2C: v__h33284 = pat0_wsiM_extStatusW$wget[31:0];
      default: v__h33284 = 32'd0;
    endcase
  end
  always@(pat0_splaF$D_OUT or
	  pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_3_outData_enqData$whas or
	  pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_outData_enqData$whas or
	  pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_1_outData_enqData$whas or
	  pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N or
	  pat0_metaBram_serverAdapterB_2_outData_enqData$whas)
  begin
    case (pat0_splaF$D_OUT[1:0])
      2'd0:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1036 =
	      pat0_metaBram_serverAdapterB_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_outData_enqData$whas;
      2'd1:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1036 =
	      pat0_metaBram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_1_outData_enqData$whas;
      2'd2:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1036 =
	      pat0_metaBram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_2_outData_enqData$whas;
      2'd3:
	  IF_pat0_splaF_first__015_BITS_1_TO_0_017_EQ_0__ETC___d1036 =
	      pat0_splaF$D_OUT[1:0] != 2'd3 ||
	      pat0_metaBram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      pat0_metaBram_serverAdapterB_3_outData_enqData$whas;
    endcase
  end
  always@(pat0_splaF$D_OUT or
	  pat0_metaBram_serverAdapterB_3_outData_outData$whas or
	  pat0_metaBram_serverAdapterB_outData_outData$whas or
	  pat0_metaBram_serverAdapterB_1_outData_outData$whas or
	  pat0_metaBram_serverAdapterB_2_outData_outData$whas)
  begin
    case (pat0_splaF$D_OUT[1:0])
      2'd0:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_metaBram_serverAdapterB_outData_outData$whas;
      2'd1:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_metaBram_serverAdapterB_1_outData_outData$whas;
      2'd2:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_metaBram_serverAdapterB_2_outData_outData$whas;
      2'd3:
	  CASE_pat0_splaFD_OUT_BITS_1_TO_0_NOT_pat0_spl_ETC__q1 =
	      pat0_splaF$D_OUT[1:0] != 2'd3 ||
	      pat0_metaBram_serverAdapterB_3_outData_outData$whas;
    endcase
  end
  always@(sma0_wci_wslv_reqF$D_OUT or
	  sma0_smaCtrl or
	  sma0_mesgCount or
	  sma0_abortCount or
	  sma0_thisMesg or
	  sma0_lastMesg or
	  rdat__h58423 or
	  sma0_wsiS_extStatusW$wget or
	  sma0_wsiM_extStatusW$wget or
	  sma0_wmwtBeginCount or sma0_wmwtPushCount or sma0_wmwtFinalCount)
  begin
    case (sma0_wci_wslv_reqF$D_OUT[39:32])
      8'h0: g_data__h58336 = sma0_smaCtrl;
      8'h04: g_data__h58336 = sma0_mesgCount;
      8'h08: g_data__h58336 = sma0_abortCount;
      8'h10: g_data__h58336 = sma0_thisMesg;
      8'h14: g_data__h58336 = sma0_lastMesg;
      8'h18: g_data__h58336 = rdat__h58423;
      8'h20: g_data__h58336 = sma0_wsiS_extStatusW$wget[95:64];
      8'h24: g_data__h58336 = sma0_wsiS_extStatusW$wget[63:32];
      8'h28: g_data__h58336 = sma0_wsiS_extStatusW$wget[31:0];
      8'h2C: g_data__h58336 = sma0_wsiM_extStatusW$wget[95:64];
      8'h30: g_data__h58336 = sma0_wsiM_extStatusW$wget[63:32];
      8'h34: g_data__h58336 = sma0_wsiM_extStatusW$wget[31:0];
      8'h38: g_data__h58336 = sma0_wmwtBeginCount;
      8'h3C: g_data__h58336 = sma0_wmwtPushCount;
      8'h40: g_data__h58336 = sma0_wmwtFinalCount;
      8'h44: g_data__h58336 = 32'hFEEDC0DE;
      default: g_data__h58336 = 32'd0;
    endcase
  end
  always@(gbe0$dpClient_request_get)
  begin
    case (gbe0$dpClient_request_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gbe0dpClient_request_get_BITS_9_TO_8_3_0_ETC__q2 =
	      gbe0$dpClient_request_get[9:8];
      2'd3: CASE_gbe0dpClient_request_get_BITS_9_TO_8_3_0_ETC__q2 = 2'd3;
    endcase
  end
  always@(edp0$server_response_get)
  begin
    case (edp0$server_response_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edp0server_response_get_BITS_9_TO_8_3_0__ETC__q3 =
	      edp0$server_response_get[9:8];
      2'd3: CASE_edp0server_response_get_BITS_9_TO_8_3_0__ETC__q3 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge clkN210$clk0_buf)
  begin
    if (!cp$RST_N_wci_Vm_6)
      begin
        sma0_abortCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_doAbort <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_endOfMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_errCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY 12'd0;
	sma0_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY 14'd0;
	sma0_firstMsgReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	sma0_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	sma0_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_mesgReqOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	sma0_readyToPush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_readyToRequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_respF_rCache <= `BSV_ASSIGNMENT_DELAY 74'h0AAAAAAAAAAAAAAAAAA;
	sma0_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	sma0_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY 12'd0;
	sma0_smaCtrl <= `BSV_ASSIGNMENT_DELAY 32'h00000002;
	sma0_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	sma0_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	sma0_valExpect <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	sma0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	sma0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	sma0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	sma0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	sma0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	sma0_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY 38'd0;
	sma0_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY 38'd0;
	sma0_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wmwtBeginCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wmwtFinalCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wmwtPushCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	sma0_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	sma0_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	sma0_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sma0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	sma0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sma0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sma0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (sma0_abortCount$EN)
	  sma0_abortCount <= `BSV_ASSIGNMENT_DELAY sma0_abortCount$D_IN;
	if (sma0_doAbort$EN)
	  sma0_doAbort <= `BSV_ASSIGNMENT_DELAY sma0_doAbort$D_IN;
	if (sma0_endOfMessage$EN)
	  sma0_endOfMessage <= `BSV_ASSIGNMENT_DELAY sma0_endOfMessage$D_IN;
	if (sma0_errCount$EN)
	  sma0_errCount <= `BSV_ASSIGNMENT_DELAY sma0_errCount$D_IN;
	if (sma0_fabRespCredit_value$EN)
	  sma0_fabRespCredit_value <= `BSV_ASSIGNMENT_DELAY
	      sma0_fabRespCredit_value$D_IN;
	if (sma0_fabWordsRemain$EN)
	  sma0_fabWordsRemain <= `BSV_ASSIGNMENT_DELAY
	      sma0_fabWordsRemain$D_IN;
	if (sma0_firstMsgReq$EN)
	  sma0_firstMsgReq <= `BSV_ASSIGNMENT_DELAY sma0_firstMsgReq$D_IN;
	if (sma0_lastMesg$EN)
	  sma0_lastMesg <= `BSV_ASSIGNMENT_DELAY sma0_lastMesg$D_IN;
	if (sma0_mesgCount$EN)
	  sma0_mesgCount <= `BSV_ASSIGNMENT_DELAY sma0_mesgCount$D_IN;
	if (sma0_mesgLengthSoFar$EN)
	  sma0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      sma0_mesgLengthSoFar$D_IN;
	if (sma0_mesgPreRequest$EN)
	  sma0_mesgPreRequest <= `BSV_ASSIGNMENT_DELAY
	      sma0_mesgPreRequest$D_IN;
	if (sma0_mesgReqOK$EN)
	  sma0_mesgReqOK <= `BSV_ASSIGNMENT_DELAY sma0_mesgReqOK$D_IN;
	if (sma0_opcode$EN)
	  sma0_opcode <= `BSV_ASSIGNMENT_DELAY sma0_opcode$D_IN;
	if (sma0_readyToPush$EN)
	  sma0_readyToPush <= `BSV_ASSIGNMENT_DELAY sma0_readyToPush$D_IN;
	if (sma0_readyToRequest$EN)
	  sma0_readyToRequest <= `BSV_ASSIGNMENT_DELAY
	      sma0_readyToRequest$D_IN;
	if (sma0_respF_rCache$EN)
	  sma0_respF_rCache <= `BSV_ASSIGNMENT_DELAY sma0_respF_rCache$D_IN;
	if (sma0_respF_rRdPtr$EN)
	  sma0_respF_rRdPtr <= `BSV_ASSIGNMENT_DELAY sma0_respF_rRdPtr$D_IN;
	if (sma0_respF_rWrPtr$EN)
	  sma0_respF_rWrPtr <= `BSV_ASSIGNMENT_DELAY sma0_respF_rWrPtr$D_IN;
	if (sma0_smaCtrl$EN)
	  sma0_smaCtrl <= `BSV_ASSIGNMENT_DELAY sma0_smaCtrl$D_IN;
	if (sma0_thisMesg$EN)
	  sma0_thisMesg <= `BSV_ASSIGNMENT_DELAY sma0_thisMesg$D_IN;
	if (sma0_unrollCnt$EN)
	  sma0_unrollCnt <= `BSV_ASSIGNMENT_DELAY sma0_unrollCnt$D_IN;
	if (sma0_valExpect$EN)
	  sma0_valExpect <= `BSV_ASSIGNMENT_DELAY sma0_valExpect$D_IN;
	if (sma0_wci_wslv_cEdge$EN)
	  sma0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_cEdge$D_IN;
	if (sma0_wci_wslv_cState$EN)
	  sma0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_cState$D_IN;
	if (sma0_wci_wslv_ctlAckReg$EN)
	  sma0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_ctlAckReg$D_IN;
	if (sma0_wci_wslv_ctlOpActive$EN)
	  sma0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_ctlOpActive$D_IN;
	if (sma0_wci_wslv_illegalEdge$EN)
	  sma0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_illegalEdge$D_IN;
	if (sma0_wci_wslv_nState$EN)
	  sma0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_nState$D_IN;
	if (sma0_wci_wslv_reqF_countReg$EN)
	  sma0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_reqF_countReg$D_IN;
	if (sma0_wci_wslv_respF_c_r$EN)
	  sma0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_respF_c_r$D_IN;
	if (sma0_wci_wslv_respF_q_0$EN)
	  sma0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_respF_q_0$D_IN;
	if (sma0_wci_wslv_respF_q_1$EN)
	  sma0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_respF_q_1$D_IN;
	if (sma0_wci_wslv_sFlagReg$EN)
	  sma0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_sFlagReg$D_IN;
	if (sma0_wci_wslv_sThreadBusy_d$EN)
	  sma0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      sma0_wci_wslv_sThreadBusy_d$D_IN;
	if (sma0_wmi_busyWithMessage$EN)
	  sma0_wmi_busyWithMessage <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_busyWithMessage$D_IN;
	if (sma0_wmi_dhF_c_r$EN)
	  sma0_wmi_dhF_c_r <= `BSV_ASSIGNMENT_DELAY sma0_wmi_dhF_c_r$D_IN;
	if (sma0_wmi_dhF_q_0$EN)
	  sma0_wmi_dhF_q_0 <= `BSV_ASSIGNMENT_DELAY sma0_wmi_dhF_q_0$D_IN;
	if (sma0_wmi_dhF_q_1$EN)
	  sma0_wmi_dhF_q_1 <= `BSV_ASSIGNMENT_DELAY sma0_wmi_dhF_q_1$D_IN;
	if (sma0_wmi_errorSticky$EN)
	  sma0_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_errorSticky$D_IN;
	if (sma0_wmi_mFlagF_c_r$EN)
	  sma0_wmi_mFlagF_c_r <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_mFlagF_c_r$D_IN;
	if (sma0_wmi_mFlagF_q_0$EN)
	  sma0_wmi_mFlagF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_mFlagF_q_0$D_IN;
	if (sma0_wmi_mFlagF_q_1$EN)
	  sma0_wmi_mFlagF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_mFlagF_q_1$D_IN;
	if (sma0_wmi_operateD$EN)
	  sma0_wmi_operateD <= `BSV_ASSIGNMENT_DELAY sma0_wmi_operateD$D_IN;
	if (sma0_wmi_peerIsReady$EN)
	  sma0_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_peerIsReady$D_IN;
	if (sma0_wmi_reqF_c_r$EN)
	  sma0_wmi_reqF_c_r <= `BSV_ASSIGNMENT_DELAY sma0_wmi_reqF_c_r$D_IN;
	if (sma0_wmi_reqF_q_0$EN)
	  sma0_wmi_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY sma0_wmi_reqF_q_0$D_IN;
	if (sma0_wmi_reqF_q_1$EN)
	  sma0_wmi_reqF_q_1 <= `BSV_ASSIGNMENT_DELAY sma0_wmi_reqF_q_1$D_IN;
	if (sma0_wmi_sDataThreadBusy_d$EN)
	  sma0_wmi_sDataThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_sDataThreadBusy_d$D_IN;
	if (sma0_wmi_sFlagReg$EN)
	  sma0_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY sma0_wmi_sFlagReg$D_IN;
	if (sma0_wmi_sThreadBusy_d$EN)
	  sma0_wmi_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_sThreadBusy_d$D_IN;
	if (sma0_wmi_trafficSticky$EN)
	  sma0_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmi_trafficSticky$D_IN;
	if (sma0_wmwtBeginCount$EN)
	  sma0_wmwtBeginCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmwtBeginCount$D_IN;
	if (sma0_wmwtFinalCount$EN)
	  sma0_wmwtFinalCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wmwtFinalCount$D_IN;
	if (sma0_wmwtPushCount$EN)
	  sma0_wmwtPushCount <= `BSV_ASSIGNMENT_DELAY sma0_wmwtPushCount$D_IN;
	if (sma0_wsiM_burstKind$EN)
	  sma0_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_burstKind$D_IN;
	if (sma0_wsiM_errorSticky$EN)
	  sma0_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_errorSticky$D_IN;
	if (sma0_wsiM_iMesgCount$EN)
	  sma0_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_iMesgCount$D_IN;
	if (sma0_wsiM_operateD$EN)
	  sma0_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY sma0_wsiM_operateD$D_IN;
	if (sma0_wsiM_pMesgCount$EN)
	  sma0_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_pMesgCount$D_IN;
	if (sma0_wsiM_peerIsReady$EN)
	  sma0_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_peerIsReady$D_IN;
	if (sma0_wsiM_reqFifo_c_r$EN)
	  sma0_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_reqFifo_c_r$D_IN;
	if (sma0_wsiM_reqFifo_q_0$EN)
	  sma0_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_reqFifo_q_0$D_IN;
	if (sma0_wsiM_reqFifo_q_1$EN)
	  sma0_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_reqFifo_q_1$D_IN;
	if (sma0_wsiM_sThreadBusy_d$EN)
	  sma0_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_sThreadBusy_d$D_IN;
	if (sma0_wsiM_tBusyCount$EN)
	  sma0_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_tBusyCount$D_IN;
	if (sma0_wsiM_trafficSticky$EN)
	  sma0_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiM_trafficSticky$D_IN;
	if (sma0_wsiS_burstKind$EN)
	  sma0_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_burstKind$D_IN;
	if (sma0_wsiS_errorSticky$EN)
	  sma0_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_errorSticky$D_IN;
	if (sma0_wsiS_iMesgCount$EN)
	  sma0_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_iMesgCount$D_IN;
	if (sma0_wsiS_operateD$EN)
	  sma0_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY sma0_wsiS_operateD$D_IN;
	if (sma0_wsiS_pMesgCount$EN)
	  sma0_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_pMesgCount$D_IN;
	if (sma0_wsiS_peerIsReady$EN)
	  sma0_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_peerIsReady$D_IN;
	if (sma0_wsiS_reqFifo_countReg$EN)
	  sma0_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_reqFifo_countReg$D_IN;
	if (sma0_wsiS_reqFifo_levelsValid$EN)
	  sma0_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_reqFifo_levelsValid$D_IN;
	if (sma0_wsiS_tBusyCount$EN)
	  sma0_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_tBusyCount$D_IN;
	if (sma0_wsiS_trafficSticky$EN)
	  sma0_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_trafficSticky$D_IN;
	if (sma0_wsiS_wordCount$EN)
	  sma0_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      sma0_wsiS_wordCount$D_IN;
      end
    if (!cp$RST_N_wci_Vm_5)
      begin
        pat0_bytesRemain <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_dataPtr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_doZLM <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_isFirst <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pat0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pat0_mesgRemain <= `BSV_ASSIGNMENT_DELAY 32'd1;
	pat0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_metaPtr_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	pat0_metaPtr_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pat0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_thisLength <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_thisOpcode <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_thisTLS <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_thisTMS <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_unrollCnt <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pat0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	pat0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pat0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	pat0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	pat0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pat0_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pat0_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pat0_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	pat0_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	pat0_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pat0_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pat0_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (pat0_bytesRemain$EN)
	  pat0_bytesRemain <= `BSV_ASSIGNMENT_DELAY pat0_bytesRemain$D_IN;
	if (pat0_dataBram_serverAdapterA_cnt$EN)
	  pat0_dataBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterA_cnt$D_IN;
	if (pat0_dataBram_serverAdapterA_s1$EN)
	  pat0_dataBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterA_s1$D_IN;
	if (pat0_dataBram_serverAdapterB_cnt$EN)
	  pat0_dataBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterB_cnt$D_IN;
	if (pat0_dataBram_serverAdapterB_s1$EN)
	  pat0_dataBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_dataBram_serverAdapterB_s1$D_IN;
	if (pat0_dataPtr$EN)
	  pat0_dataPtr <= `BSV_ASSIGNMENT_DELAY pat0_dataPtr$D_IN;
	if (pat0_doZLM$EN)
	  pat0_doZLM <= `BSV_ASSIGNMENT_DELAY pat0_doZLM$D_IN;
	if (pat0_isFirst$EN)
	  pat0_isFirst <= `BSV_ASSIGNMENT_DELAY pat0_isFirst$D_IN;
	if (pat0_mesgLengthSoFar$EN)
	  pat0_mesgLengthSoFar <= `BSV_ASSIGNMENT_DELAY
	      pat0_mesgLengthSoFar$D_IN;
	if (pat0_mesgRemain$EN)
	  pat0_mesgRemain <= `BSV_ASSIGNMENT_DELAY pat0_mesgRemain$D_IN;
	if (pat0_metaBram_serverAdapterA_1_cnt$EN)
	  pat0_metaBram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_1_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_1_s1$EN)
	  pat0_metaBram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_1_s1$D_IN;
	if (pat0_metaBram_serverAdapterA_2_cnt$EN)
	  pat0_metaBram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_2_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_2_s1$EN)
	  pat0_metaBram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_2_s1$D_IN;
	if (pat0_metaBram_serverAdapterA_3_cnt$EN)
	  pat0_metaBram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_3_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_3_s1$EN)
	  pat0_metaBram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_3_s1$D_IN;
	if (pat0_metaBram_serverAdapterA_cnt$EN)
	  pat0_metaBram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_cnt$D_IN;
	if (pat0_metaBram_serverAdapterA_s1$EN)
	  pat0_metaBram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterA_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_1_cnt$EN)
	  pat0_metaBram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_1_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_1_s1$EN)
	  pat0_metaBram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_1_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_2_cnt$EN)
	  pat0_metaBram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_2_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_2_s1$EN)
	  pat0_metaBram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_2_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_3_cnt$EN)
	  pat0_metaBram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_3_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_3_s1$EN)
	  pat0_metaBram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_3_s1$D_IN;
	if (pat0_metaBram_serverAdapterB_cnt$EN)
	  pat0_metaBram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_cnt$D_IN;
	if (pat0_metaBram_serverAdapterB_s1$EN)
	  pat0_metaBram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaBram_serverAdapterB_s1$D_IN;
	if (pat0_metaPtr_modulus$EN)
	  pat0_metaPtr_modulus <= `BSV_ASSIGNMENT_DELAY
	      pat0_metaPtr_modulus$D_IN;
	if (pat0_metaPtr_value$EN)
	  pat0_metaPtr_value <= `BSV_ASSIGNMENT_DELAY pat0_metaPtr_value$D_IN;
	if (pat0_splitReadInFlight$EN)
	  pat0_splitReadInFlight <= `BSV_ASSIGNMENT_DELAY
	      pat0_splitReadInFlight$D_IN;
	if (pat0_thisLength$EN)
	  pat0_thisLength <= `BSV_ASSIGNMENT_DELAY pat0_thisLength$D_IN;
	if (pat0_thisOpcode$EN)
	  pat0_thisOpcode <= `BSV_ASSIGNMENT_DELAY pat0_thisOpcode$D_IN;
	if (pat0_thisTLS$EN)
	  pat0_thisTLS <= `BSV_ASSIGNMENT_DELAY pat0_thisTLS$D_IN;
	if (pat0_thisTMS$EN)
	  pat0_thisTMS <= `BSV_ASSIGNMENT_DELAY pat0_thisTMS$D_IN;
	if (pat0_unrollCnt$EN)
	  pat0_unrollCnt <= `BSV_ASSIGNMENT_DELAY pat0_unrollCnt$D_IN;
	if (pat0_wci_wslv_cEdge$EN)
	  pat0_wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_cEdge$D_IN;
	if (pat0_wci_wslv_cState$EN)
	  pat0_wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_cState$D_IN;
	if (pat0_wci_wslv_ctlAckReg$EN)
	  pat0_wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_ctlAckReg$D_IN;
	if (pat0_wci_wslv_ctlOpActive$EN)
	  pat0_wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_ctlOpActive$D_IN;
	if (pat0_wci_wslv_illegalEdge$EN)
	  pat0_wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_illegalEdge$D_IN;
	if (pat0_wci_wslv_nState$EN)
	  pat0_wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_nState$D_IN;
	if (pat0_wci_wslv_reqF_countReg$EN)
	  pat0_wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_reqF_countReg$D_IN;
	if (pat0_wci_wslv_respF_c_r$EN)
	  pat0_wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_respF_c_r$D_IN;
	if (pat0_wci_wslv_respF_q_0$EN)
	  pat0_wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_respF_q_0$D_IN;
	if (pat0_wci_wslv_respF_q_1$EN)
	  pat0_wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_respF_q_1$D_IN;
	if (pat0_wci_wslv_sFlagReg$EN)
	  pat0_wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_sFlagReg$D_IN;
	if (pat0_wci_wslv_sThreadBusy_d$EN)
	  pat0_wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      pat0_wci_wslv_sThreadBusy_d$D_IN;
	if (pat0_wsiM_burstKind$EN)
	  pat0_wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_burstKind$D_IN;
	if (pat0_wsiM_errorSticky$EN)
	  pat0_wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_errorSticky$D_IN;
	if (pat0_wsiM_iMesgCount$EN)
	  pat0_wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_iMesgCount$D_IN;
	if (pat0_wsiM_operateD$EN)
	  pat0_wsiM_operateD <= `BSV_ASSIGNMENT_DELAY pat0_wsiM_operateD$D_IN;
	if (pat0_wsiM_pMesgCount$EN)
	  pat0_wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_pMesgCount$D_IN;
	if (pat0_wsiM_peerIsReady$EN)
	  pat0_wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_peerIsReady$D_IN;
	if (pat0_wsiM_reqFifo_c_r$EN)
	  pat0_wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_reqFifo_c_r$D_IN;
	if (pat0_wsiM_reqFifo_q_0$EN)
	  pat0_wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_reqFifo_q_0$D_IN;
	if (pat0_wsiM_reqFifo_q_1$EN)
	  pat0_wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_reqFifo_q_1$D_IN;
	if (pat0_wsiM_sThreadBusy_d$EN)
	  pat0_wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_sThreadBusy_d$D_IN;
	if (pat0_wsiM_tBusyCount$EN)
	  pat0_wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_tBusyCount$D_IN;
	if (pat0_wsiM_trafficSticky$EN)
	  pat0_wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      pat0_wsiM_trafficSticky$D_IN;
      end
    if (pat0_controlReg$EN)
      pat0_controlReg <= `BSV_ASSIGNMENT_DELAY pat0_controlReg$D_IN;
    if (pat0_dataCount$EN)
      pat0_dataCount <= `BSV_ASSIGNMENT_DELAY pat0_dataCount$D_IN;
    if (pat0_mesgCount$EN)
      pat0_mesgCount <= `BSV_ASSIGNMENT_DELAY pat0_mesgCount$D_IN;
    if (pat0_wsiM_statusR$EN)
      pat0_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY pat0_wsiM_statusR$D_IN;
    if (sma0_fabWordsCurReq$EN)
      sma0_fabWordsCurReq <= `BSV_ASSIGNMENT_DELAY sma0_fabWordsCurReq$D_IN;
    if (sma0_mesgReqAddr$EN)
      sma0_mesgReqAddr <= `BSV_ASSIGNMENT_DELAY sma0_mesgReqAddr$D_IN;
    if (sma0_wmi_statusR$EN)
      sma0_wmi_statusR <= `BSV_ASSIGNMENT_DELAY sma0_wmi_statusR$D_IN;
    if (sma0_wsiM_statusR$EN)
      sma0_wsiM_statusR <= `BSV_ASSIGNMENT_DELAY sma0_wsiM_statusR$D_IN;
    if (sma0_wsiS_mesgWordLength$EN)
      sma0_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  sma0_wsiS_mesgWordLength$D_IN;
    if (sma0_wsiS_statusR$EN)
      sma0_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY sma0_wsiS_statusR$D_IN;
  end

  always@(posedge clkN210$clk0_buf or negedge cp$RST_N_wci_Vm_6)
  if (!cp$RST_N_wci_Vm_6)
    begin
      sma0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      sma0_wmi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      sma0_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      sma0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (sma0_wci_wslv_isReset_isInReset$EN)
	sma0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    sma0_wci_wslv_isReset_isInReset$D_IN;
      if (sma0_wmi_isReset_isInReset$EN)
	sma0_wmi_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    sma0_wmi_isReset_isInReset$D_IN;
      if (sma0_wsiM_isReset_isInReset$EN)
	sma0_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    sma0_wsiM_isReset_isInReset$D_IN;
      if (sma0_wsiS_isReset_isInReset$EN)
	sma0_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    sma0_wsiS_isReset_isInReset$D_IN;
    end

  always@(posedge clkN210$clk0_buf or negedge cp$RST_N_wci_Vm_5)
  if (!cp$RST_N_wci_Vm_5)
    begin
      pat0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      pat0_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pat0_wci_wslv_isReset_isInReset$EN)
	pat0_wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pat0_wci_wslv_isReset_isInReset$D_IN;
      if (pat0_wsiM_isReset_isInReset$EN)
	pat0_wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pat0_wsiM_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    pat0_bytesRemain = 32'hAAAAAAAA;
    pat0_controlReg = 32'hAAAAAAAA;
    pat0_dataBram_serverAdapterA_cnt = 3'h2;
    pat0_dataBram_serverAdapterA_s1 = 2'h2;
    pat0_dataBram_serverAdapterB_cnt = 3'h2;
    pat0_dataBram_serverAdapterB_s1 = 2'h2;
    pat0_dataCount = 32'hAAAAAAAA;
    pat0_dataPtr = 32'hAAAAAAAA;
    pat0_doZLM = 1'h0;
    pat0_isFirst = 1'h0;
    pat0_mesgCount = 32'hAAAAAAAA;
    pat0_mesgLengthSoFar = 14'h2AAA;
    pat0_mesgRemain = 32'hAAAAAAAA;
    pat0_metaBram_serverAdapterA_1_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_1_s1 = 2'h2;
    pat0_metaBram_serverAdapterA_2_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_2_s1 = 2'h2;
    pat0_metaBram_serverAdapterA_3_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_3_s1 = 2'h2;
    pat0_metaBram_serverAdapterA_cnt = 3'h2;
    pat0_metaBram_serverAdapterA_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_1_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_1_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_2_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_2_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_3_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_3_s1 = 2'h2;
    pat0_metaBram_serverAdapterB_cnt = 3'h2;
    pat0_metaBram_serverAdapterB_s1 = 2'h2;
    pat0_metaPtr_modulus = 16'hAAAA;
    pat0_metaPtr_value = 16'hAAAA;
    pat0_splitReadInFlight = 1'h0;
    pat0_thisLength = 32'hAAAAAAAA;
    pat0_thisOpcode = 32'hAAAAAAAA;
    pat0_thisTLS = 32'hAAAAAAAA;
    pat0_thisTMS = 32'hAAAAAAAA;
    pat0_unrollCnt = 16'hAAAA;
    pat0_wci_wslv_cEdge = 3'h2;
    pat0_wci_wslv_cState = 3'h2;
    pat0_wci_wslv_ctlAckReg = 1'h0;
    pat0_wci_wslv_ctlOpActive = 1'h0;
    pat0_wci_wslv_illegalEdge = 1'h0;
    pat0_wci_wslv_isReset_isInReset = 1'h0;
    pat0_wci_wslv_nState = 3'h2;
    pat0_wci_wslv_reqF_countReg = 2'h2;
    pat0_wci_wslv_respF_c_r = 2'h2;
    pat0_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    pat0_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    pat0_wci_wslv_sFlagReg = 1'h0;
    pat0_wci_wslv_sThreadBusy_d = 1'h0;
    pat0_wsiM_burstKind = 2'h2;
    pat0_wsiM_errorSticky = 1'h0;
    pat0_wsiM_iMesgCount = 32'hAAAAAAAA;
    pat0_wsiM_isReset_isInReset = 1'h0;
    pat0_wsiM_operateD = 1'h0;
    pat0_wsiM_pMesgCount = 32'hAAAAAAAA;
    pat0_wsiM_peerIsReady = 1'h0;
    pat0_wsiM_reqFifo_c_r = 2'h2;
    pat0_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    pat0_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    pat0_wsiM_sThreadBusy_d = 1'h0;
    pat0_wsiM_statusR = 8'hAA;
    pat0_wsiM_tBusyCount = 32'hAAAAAAAA;
    pat0_wsiM_trafficSticky = 1'h0;
    sma0_abortCount = 32'hAAAAAAAA;
    sma0_doAbort = 1'h0;
    sma0_endOfMessage = 1'h0;
    sma0_errCount = 32'hAAAAAAAA;
    sma0_fabRespCredit_value = 12'hAAA;
    sma0_fabWordsCurReq = 14'h2AAA;
    sma0_fabWordsRemain = 14'h2AAA;
    sma0_firstMsgReq = 1'h0;
    sma0_lastMesg = 32'hAAAAAAAA;
    sma0_mesgCount = 32'hAAAAAAAA;
    sma0_mesgLengthSoFar = 14'h2AAA;
    sma0_mesgPreRequest = 1'h0;
    sma0_mesgReqAddr = 14'h2AAA;
    sma0_mesgReqOK = 1'h0;
    sma0_opcode = 9'h0AA;
    sma0_readyToPush = 1'h0;
    sma0_readyToRequest = 1'h0;
    sma0_respF_rCache = 74'h2AAAAAAAAAAAAAAAAAA;
    sma0_respF_rRdPtr = 12'hAAA;
    sma0_respF_rWrPtr = 12'hAAA;
    sma0_smaCtrl = 32'hAAAAAAAA;
    sma0_thisMesg = 32'hAAAAAAAA;
    sma0_unrollCnt = 16'hAAAA;
    sma0_valExpect = 32'hAAAAAAAA;
    sma0_wci_wslv_cEdge = 3'h2;
    sma0_wci_wslv_cState = 3'h2;
    sma0_wci_wslv_ctlAckReg = 1'h0;
    sma0_wci_wslv_ctlOpActive = 1'h0;
    sma0_wci_wslv_illegalEdge = 1'h0;
    sma0_wci_wslv_isReset_isInReset = 1'h0;
    sma0_wci_wslv_nState = 3'h2;
    sma0_wci_wslv_reqF_countReg = 2'h2;
    sma0_wci_wslv_respF_c_r = 2'h2;
    sma0_wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    sma0_wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    sma0_wci_wslv_sFlagReg = 1'h0;
    sma0_wci_wslv_sThreadBusy_d = 1'h0;
    sma0_wmi_busyWithMessage = 1'h0;
    sma0_wmi_dhF_c_r = 2'h2;
    sma0_wmi_dhF_q_0 = 38'h2AAAAAAAAA;
    sma0_wmi_dhF_q_1 = 38'h2AAAAAAAAA;
    sma0_wmi_errorSticky = 1'h0;
    sma0_wmi_isReset_isInReset = 1'h0;
    sma0_wmi_mFlagF_c_r = 2'h2;
    sma0_wmi_mFlagF_q_0 = 32'hAAAAAAAA;
    sma0_wmi_mFlagF_q_1 = 32'hAAAAAAAA;
    sma0_wmi_operateD = 1'h0;
    sma0_wmi_peerIsReady = 1'h0;
    sma0_wmi_reqF_c_r = 2'h2;
    sma0_wmi_reqF_q_0 = 32'hAAAAAAAA;
    sma0_wmi_reqF_q_1 = 32'hAAAAAAAA;
    sma0_wmi_sDataThreadBusy_d = 1'h0;
    sma0_wmi_sFlagReg = 32'hAAAAAAAA;
    sma0_wmi_sThreadBusy_d = 1'h0;
    sma0_wmi_statusR = 8'hAA;
    sma0_wmi_trafficSticky = 1'h0;
    sma0_wmwtBeginCount = 32'hAAAAAAAA;
    sma0_wmwtFinalCount = 32'hAAAAAAAA;
    sma0_wmwtPushCount = 32'hAAAAAAAA;
    sma0_wsiM_burstKind = 2'h2;
    sma0_wsiM_errorSticky = 1'h0;
    sma0_wsiM_iMesgCount = 32'hAAAAAAAA;
    sma0_wsiM_isReset_isInReset = 1'h0;
    sma0_wsiM_operateD = 1'h0;
    sma0_wsiM_pMesgCount = 32'hAAAAAAAA;
    sma0_wsiM_peerIsReady = 1'h0;
    sma0_wsiM_reqFifo_c_r = 2'h2;
    sma0_wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    sma0_wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    sma0_wsiM_sThreadBusy_d = 1'h0;
    sma0_wsiM_statusR = 8'hAA;
    sma0_wsiM_tBusyCount = 32'hAAAAAAAA;
    sma0_wsiM_trafficSticky = 1'h0;
    sma0_wsiS_burstKind = 2'h2;
    sma0_wsiS_errorSticky = 1'h0;
    sma0_wsiS_iMesgCount = 32'hAAAAAAAA;
    sma0_wsiS_isReset_isInReset = 1'h0;
    sma0_wsiS_mesgWordLength = 12'hAAA;
    sma0_wsiS_operateD = 1'h0;
    sma0_wsiS_pMesgCount = 32'hAAAAAAAA;
    sma0_wsiS_peerIsReady = 1'h0;
    sma0_wsiS_reqFifo_countReg = 2'h2;
    sma0_wsiS_reqFifo_levelsValid = 1'h0;
    sma0_wsiS_statusR = 8'hAA;
    sma0_wsiS_tBusyCount = 32'hAAAAAAAA;
    sma0_wsiS_trafficSticky = 1'h0;
    sma0_wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge iqadc$CLK_adcSdrClk or negedge clkN210$clk0_buf)
  begin
    #0;
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start)
	begin
	  v__h5737 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h5737,
		 pat0_wci_wslv_reqF$D_OUT[36:34],
		 pat0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_ctrl_IsO && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_ctrl_IsO] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfrd &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h33303 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfrd &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h33303,
		 pat0_wci_wslv_reqF$D_OUT[63:32],
		 pat0_wci_wslv_reqF$D_OUT[67:64],
		 v__h33284);
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_ctrl_EiI && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_ctrl_EiI] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_ctrl_EiI && WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_ctrl_EiI] and\n  [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_dataBram_serverAdapterA_s1[1] &&
	  !pat0_dataBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1)
	begin
	  v__h30733 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_doMessageEmit && pat0_unrollCnt == 16'd1)
	$display("[%0d]: %m: wsi_source: End of WSI Producer Egress: mesgCount:%0x thisOpcode:%0x thisLength:%0x",
		 v__h30733,
		 pat0_mesgCount,
		 pat0_thisOpcode,
		 pat0_thisLength);
    if (cp$RST_N_wci_Vm_5)
      if (pat0_dataBram_serverAdapterB_s1[1] &&
	  !pat0_dataBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterA_s1[1] &&
	  !pat0_metaBram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterB_s1[1] &&
	  !pat0_metaBram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterA_1_s1[1] &&
	  !pat0_metaBram_serverAdapterA_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterB_1_s1[1] &&
	  !pat0_metaBram_serverAdapterB_1_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterA_2_s1[1] &&
	  !pat0_metaBram_serverAdapterA_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterB_2_s1[1] &&
	  !pat0_metaBram_serverAdapterB_2_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterA_3_s1[1] &&
	  !pat0_metaBram_serverAdapterA_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfwr &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	begin
	  v__h32316 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfwr &&
	  pat0_wci_wslv_reqF$D_OUT[63:52] == 12'h0)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h32316,
		 pat0_wci_wslv_reqF$D_OUT[63:32],
		 pat0_wci_wslv_reqF$D_OUT[67:64],
		 pat0_wci_wslv_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  pat0_wci_wslv_illegalEdge)
	begin
	  v__h6055 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  pat0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h6055,
		 pat0_wci_wslv_cEdge,
		 pat0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  !pat0_wci_wslv_illegalEdge)
	begin
	  v__h5911 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_wslv_ctl_op_complete &&
	  !pat0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h5911,
		 pat0_wci_wslv_cEdge,
		 pat0_wci_wslv_cState,
		 pat0_wci_wslv_nState);
    if (cp$RST_N_wci_Vm_5)
      if (pat0_metaBram_serverAdapterB_3_s1[1] &&
	  !pat0_metaBram_serverAdapterB_3_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_advance_split_response)
	begin
	  v__h31826 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_advance_split_response)
	$display("[%0d]: %m: WCI SPLIT READ Data:%0x", v__h31826, v__h30908);
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_advance_split_response &&
	  WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_advance_split_response]\n  and [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_advance_split_response &&
	  WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_advance_split_response]\n  and [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_advance_split_response &&
	  WILL_FIRE_RL_pat0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 90: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_advance_split_response]\n  and [RL_pat0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfwr &&
	  WILL_FIRE_RL_pat0_advance_split_response)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_advance_split_response] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfwr && WILL_FIRE_RL_pat0_wci_cfrd)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfwr] and\n  [RL_pat0_wci_cfrd] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfrd &&
	  WILL_FIRE_RL_pat0_advance_split_response)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_advance_split_response] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfrd && WILL_FIRE_RL_pat0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfrd && WILL_FIRE_RL_pat0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_5)
      if (WILL_FIRE_RL_pat0_wci_cfrd && WILL_FIRE_RL_pat0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/WSIPatternWorker.bsv\", line 226, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_pat0_wci_cfrd] and\n  [RL_pat0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start)
	begin
	  v__h38137 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h38137,
		 sma0_wci_wslv_reqF$D_OUT[36:34],
		 sma0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmrd_mesgBegin)
	begin
	  v__h52674 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmrd_mesgBegin)
	$display("[%0d]: %m: wmrd_mesgBegin mesgCount:%0h mesgLength:%0h reqInfo:%0h",
		 v__h52674,
		 sma0_mesgCount,
		 sma0_wmi_sFlagReg[23:0],
		 sma0_wmi_sFlagReg[31:24]);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_mesgBegin && sma0_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h56386 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_mesgBegin && sma0_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: mesgBegin PRECISE mesgCount:%0x WSI burstLength:%0x reqInfo:%0x",
		 v__h56386,
		 sma0_mesgCount,
		 sma0_wsiS_reqFifo$D_OUT[55:44],
		 sma0_wsiS_reqFifo$D_OUT[7:0]);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_mesgBegin && !sma0_wsiS_reqFifo$D_OUT[56])
	begin
	  v__h56445 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_mesgBegin && !sma0_wsiS_reqFifo$D_OUT[56])
	$display("[%0d]: %m: wmwt_mesgBegin IMPRECISE mesgCount:%0x",
		 v__h56445,
		 sma0_mesgCount);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_doAbort)
	begin
	  v__h57787 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_doAbort)
	$display("[%0d]: %m: wmwt_doAbort", v__h57787);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_messageFinalize)
	begin
	  v__h57970 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wmwt_messageFinalize)
	$display("[%0d]: %m: wmwt_messageFinalize mesgCount:%0x WSI mesgLength:%0x",
		 v__h57970,
		 sma0_mesgCount,
		 sma0_thisMesg[15:0]);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfwr)
	begin
	  v__h58166 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfwr)
	$display("[%0d]: %m: SMAdapter WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h58166,
		 sma0_wci_wslv_reqF$D_OUT[63:32],
		 sma0_wci_wslv_reqF$D_OUT[67:64],
		 sma0_wci_wslv_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_ctrl_IsO)
	begin
	  v__h58794 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_ctrl_IsO)
	$display("[%0d]: %m: Starting SMAdapter smaCtrl:%0x",
		 v__h58794,
		 sma0_smaCtrl);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfwr && WILL_FIRE_RL_sma0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_cfwr] and\n  [RL_sma0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfwr && WILL_FIRE_RL_sma0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_cfwr] and\n  [RL_sma0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfwr && WILL_FIRE_RL_sma0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_cfwr] and\n  [RL_sma0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfwr && WILL_FIRE_RL_sma0_wci_cfrd)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_cfwr] and\n  [RL_sma0_wci_cfrd] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfrd && WILL_FIRE_RL_sma0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_cfrd] and\n  [RL_sma0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfrd && WILL_FIRE_RL_sma0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_cfrd] and\n  [RL_sma0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_cfrd && WILL_FIRE_RL_sma0_wci_ctrl_EiI)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_cfrd] and\n  [RL_sma0_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_ctrl_IsO && WILL_FIRE_RL_sma0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_ctrl_IsO] and\n  [RL_sma0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_ctrl_EiI && WILL_FIRE_RL_sma0_wci_ctrl_OrE)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_ctrl_EiI] and\n  [RL_sma0_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_ctrl_EiI && WILL_FIRE_RL_sma0_wci_ctrl_IsO)
	$display("Error: \"bsv/wrk/SMAdapter.bsv\", line 300, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sma0_wci_ctrl_EiI] and\n  [RL_sma0_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete &&
	  sma0_wci_wslv_illegalEdge)
	begin
	  v__h38455 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete &&
	  sma0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h38455,
		 sma0_wci_wslv_cEdge,
		 sma0_wci_wslv_cState);
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete &&
	  !sma0_wci_wslv_illegalEdge)
	begin
	  v__h38311 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_6)
      if (WILL_FIRE_RL_sma0_wci_wslv_ctl_op_complete &&
	  !sma0_wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h38311,
		 sma0_wci_wslv_cEdge,
		 sma0_wci_wslv_cState,
		 sma0_wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkFTop_n210

