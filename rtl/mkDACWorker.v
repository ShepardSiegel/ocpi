//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Fri Jul 23 11:16:42 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// wci_s_resp                     O    34 reg
// wci_s_SThreadBusy              O     1
// wci_s_SFlag                    O     2
// wti_s_SThreadBusy              O     1
// wsiS1_SThreadBusy              O     1
// wsiS1_SReset_n                 O     1
// dac0_dap                       O    12
// dac0_dan                       O    12
// dac0_dbp                       O    12
// dac0_dbn                       O    12
// dac0_dcp                       O    12
// dac0_dcn                       O    12
// dac0_ddp                       O    12
// dac0_ddn                       O    12
// dac0_dacClkDiv                 O     1
// dac0_dacDelay                  O     1
// dac0_dacRf                     O     1
// dac0_dacRz                     O     1
// dac0_dacCal                    O     1 reg
// dac0_syncOutp                  O     1
// dac0_syncOutn                  O     1
// dac0_syncMutep                 O     1
// dac0_syncMuten                 O     1
// CLK_dac0_dacSdrClk             O     1 clock
// CLK_GATE_dac0_dacSdrClk        O     1 const
// RST_N_dac0_dacSdrRst           O     1 reset
// CLK_dac_clk                    I     1 clock
// RST_N_dac_rst                  I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wci_s_req                      I    60
// wci_s_MFlag                    I     2 unused
// wti_s_req                      I    67 reg
// wsiS1_MCmd                     I     3
// wsiS1_MBurstLength             I    12
// wsiS1_MData                    I    32
// wsiS1_MByteEn                  I     4
// wsiS1_MReqInfo                 I     8
// wsiS1_MReqLast                 I     1
// wsiS1_MBurstPrecise            I     1
// wsiS1_MReset_n                 I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkDACWorker(CLK_dac_clk,
		   RST_N_dac_rst,
		   CLK,
		   RST_N,

		   wci_s_req,

		   wci_s_resp,

		   wci_s_SThreadBusy,

		   wci_s_SFlag,

		   wci_s_MFlag,

		   wti_s_req,

		   wti_s_SThreadBusy,

		   wsiS1_MCmd,

		   wsiS1_MReqLast,

		   wsiS1_MBurstPrecise,

		   wsiS1_MBurstLength,

		   wsiS1_MData,

		   wsiS1_MByteEn,

		   wsiS1_MReqInfo,

		   wsiS1_SThreadBusy,

		   wsiS1_SReset_n,

		   wsiS1_MReset_n,

		   dac0_dap,

		   dac0_dan,

		   dac0_dbp,

		   dac0_dbn,

		   dac0_dcp,

		   dac0_dcn,

		   dac0_ddp,

		   dac0_ddn,

		   dac0_dacClkDiv,

		   dac0_dacDelay,

		   dac0_dacRf,

		   dac0_dacRz,

		   dac0_dacCal,

		   dac0_syncOutp,

		   dac0_syncOutn,

		   dac0_syncMutep,

		   dac0_syncMuten,

		   CLK_dac0_dacSdrClk,
		   CLK_GATE_dac0_dacSdrClk,

		   RST_N_dac0_dacSdrRst);
  input  CLK_dac_clk;
  input  RST_N_dac_rst;
  input  CLK;
  input  RST_N;

  // action method wci_s_putreq
  input  [59 : 0] wci_s_req;

  // value method wci_s_resp
  output [33 : 0] wci_s_resp;

  // value method wci_s_sThreadBusy
  output wci_s_SThreadBusy;

  // value method wci_s_sFlag
  output [1 : 0] wci_s_SFlag;

  // action method wci_s_mFlag
  input  [1 : 0] wci_s_MFlag;

  // action method wti_s_put
  input  [66 : 0] wti_s_req;

  // value method wti_s_sThreadBusy
  output wti_s_SThreadBusy;

  // action method wsiS1_mCmd
  input  [2 : 0] wsiS1_MCmd;

  // action method wsiS1_mReqLast
  input  wsiS1_MReqLast;

  // action method wsiS1_mBurstPrecise
  input  wsiS1_MBurstPrecise;

  // action method wsiS1_mBurstLength
  input  [11 : 0] wsiS1_MBurstLength;

  // action method wsiS1_mData
  input  [31 : 0] wsiS1_MData;

  // action method wsiS1_mByteEn
  input  [3 : 0] wsiS1_MByteEn;

  // action method wsiS1_mReqInfo
  input  [7 : 0] wsiS1_MReqInfo;

  // action method wsiS1_mDataInfo

  // value method wsiS1_sThreadBusy
  output wsiS1_SThreadBusy;

  // value method wsiS1_sReset_n
  output wsiS1_SReset_n;

  // action method wsiS1_mReset_n
  input  wsiS1_MReset_n;

  // value method dac0_dap
  output [11 : 0] dac0_dap;

  // value method dac0_dan
  output [11 : 0] dac0_dan;

  // value method dac0_dbp
  output [11 : 0] dac0_dbp;

  // value method dac0_dbn
  output [11 : 0] dac0_dbn;

  // value method dac0_dcp
  output [11 : 0] dac0_dcp;

  // value method dac0_dcn
  output [11 : 0] dac0_dcn;

  // value method dac0_ddp
  output [11 : 0] dac0_ddp;

  // value method dac0_ddn
  output [11 : 0] dac0_ddn;

  // value method dac0_dacClkDiv
  output dac0_dacClkDiv;

  // value method dac0_dacDelay
  output dac0_dacDelay;

  // value method dac0_dacRf
  output dac0_dacRf;

  // value method dac0_dacRz
  output dac0_dacRz;

  // value method dac0_dacCal
  output dac0_dacCal;

  // value method dac0_syncOutp
  output dac0_syncOutp;

  // value method dac0_syncOutn
  output dac0_syncOutn;

  // value method dac0_syncMutep
  output dac0_syncMutep;

  // value method dac0_syncMuten
  output dac0_syncMuten;

  // oscillator and gates for output clock CLK_dac0_dacSdrClk
  output CLK_dac0_dacSdrClk;
  output CLK_GATE_dac0_dacSdrClk;

  // output resets
  output RST_N_dac0_dacSdrRst;

  // signals for module outputs
  wire [33 : 0] wci_s_resp;
  wire [11 : 0] dac0_dan,
		dac0_dap,
		dac0_dbn,
		dac0_dbp,
		dac0_dcn,
		dac0_dcp,
		dac0_ddn,
		dac0_ddp;
  wire [1 : 0] wci_s_SFlag;
  wire CLK_GATE_dac0_dacSdrClk,
       CLK_dac0_dacSdrClk,
       RST_N_dac0_dacSdrRst,
       dac0_dacCal,
       dac0_dacClkDiv,
       dac0_dacDelay,
       dac0_dacRf,
       dac0_dacRz,
       dac0_syncMuten,
       dac0_syncMutep,
       dac0_syncOutn,
       dac0_syncOutp,
       wci_s_SThreadBusy,
       wsiS1_SReset_n,
       wsiS1_SThreadBusy,
       wti_s_SThreadBusy;

  // inlined wires
  wire [191 : 0] dacCore0_sampF_wDataIn$wget, dacCore0_sampF_wDataOut$wget;
  wire [95 : 0] wsiS_extStatusW$wget;
  wire [66 : 0] wti_wtiReq$wget;
  wire [60 : 0] wsiS_wsiReq$wget;
  wire [59 : 0] wci_wciReq$wget;
  wire [33 : 0] wci_respF_x_wire$wget;
  wire [31 : 0] wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] wsi_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wEdge$wget, wsi_Es_mCmd_w$wget;
  wire dacCore0_emitEn_pw$whas,
       dacCore0_iseqFsm_abort$wget,
       dacCore0_iseqFsm_abort$whas,
       dacCore0_iseqFsm_pw_list$whas,
       dacCore0_iseqFsm_pw_list_1$whas,
       dacCore0_iseqFsm_pw_list_2$whas,
       dacCore0_iseqFsm_pw_list_3$whas,
       dacCore0_iseqFsm_pw_list_4$whas,
       dacCore0_iseqFsm_pw_list_5$whas,
       dacCore0_iseqFsm_pw_list_6$whas,
       dacCore0_iseqFsm_pw_list_7$whas,
       dacCore0_iseqFsm_pw_list_8$whas,
       dacCore0_iseqFsm_start_reg_1$wget,
       dacCore0_iseqFsm_start_reg_1$whas,
       dacCore0_iseqFsm_start_wire$wget,
       dacCore0_iseqFsm_start_wire$whas,
       dacCore0_iseqFsm_state_run_pw$whas,
       dacCore0_iseqFsm_state_start_pw$whas,
       dacCore0_sampF_pwDequeue$whas,
       dacCore0_sampF_pwEnqueue$whas,
       dacCore0_sampF_rRdPtr_pwDecrement$whas,
       dacCore0_sampF_rRdPtr_pwIncrement$whas,
       dacCore0_sampF_rWrPtr_pwDecrement$whas,
       dacCore0_sampF_rWrPtr_pwIncrement$whas,
       dacCore0_sampF_wDataIn$whas,
       dacCore0_sampF_wDataOut$whas,
       dacCore0_toneEn_pw$whas,
       fcDac_grayCounter_pwDecrement$whas,
       fcDac_grayCounter_pwIncrement$whas,
       fcDac_pulseAction_1$wget,
       fcDac_pulseAction_1$whas,
       oneKHz_decAction$whas,
       oneKHz_incAction$whas,
       wci_ctlAckReg_1$wget,
       wci_ctlAckReg_1$whas,
       wci_reqF_r_clr$whas,
       wci_reqF_r_deq$whas,
       wci_reqF_r_enq$whas,
       wci_respF_dequeueing$whas,
       wci_respF_enqueueing$whas,
       wci_respF_x_wire$whas,
       wci_sFlagReg_1$wget,
       wci_sFlagReg_1$whas,
       wci_sThreadBusy_pw$whas,
       wci_wEdge$whas,
       wci_wciReq$whas,
       wci_wci_cfrd_pw$whas,
       wci_wci_cfwr_pw$whas,
       wci_wci_ctrl_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas,
       wti_wtiReq$whas;

  // register dacControl
  reg [31 : 0] dacControl;
  wire [31 : 0] dacControl$D_IN;
  wire dacControl$EN;

  // register dacCore0_calBit
  reg dacCore0_calBit;
  wire dacCore0_calBit$D_IN, dacCore0_calBit$EN;

  // register dacCore0_dacCount
  reg [7 : 0] dacCore0_dacCount;
  wire [7 : 0] dacCore0_dacCount$D_IN;
  wire dacCore0_dacCount$EN;

  // register dacCore0_dacCtrl_w
  reg [3 : 0] dacCore0_dacCtrl_w;
  wire [3 : 0] dacCore0_dacCtrl_w$D_IN;
  wire dacCore0_dacCtrl_w$EN;

  // register dacCore0_emit
  reg dacCore0_emit;
  wire dacCore0_emit$D_IN, dacCore0_emit$EN;

  // register dacCore0_emitCnt
  reg [31 : 0] dacCore0_emitCnt;
  wire [31 : 0] dacCore0_emitCnt$D_IN;
  wire dacCore0_emitCnt$EN;

  // register dacCore0_emitD
  reg dacCore0_emitD;
  wire dacCore0_emitD$D_IN, dacCore0_emitD$EN;

  // register dacCore0_iseqFsm_repeat_count
  reg [12 : 0] dacCore0_iseqFsm_repeat_count;
  wire [12 : 0] dacCore0_iseqFsm_repeat_count$D_IN;
  wire dacCore0_iseqFsm_repeat_count$EN;

  // register dacCore0_iseqFsm_start_reg
  reg dacCore0_iseqFsm_start_reg;
  wire dacCore0_iseqFsm_start_reg$D_IN, dacCore0_iseqFsm_start_reg$EN;

  // register dacCore0_iseqFsm_state_mkFSMstate
  reg [3 : 0] dacCore0_iseqFsm_state_mkFSMstate;
  reg [3 : 0] dacCore0_iseqFsm_state_mkFSMstate$D_IN;
  wire dacCore0_iseqFsm_state_mkFSMstate$EN;

  // register dacCore0_iseqFsm_state_standby
  reg dacCore0_iseqFsm_state_standby;
  wire dacCore0_iseqFsm_state_standby$D_IN, dacCore0_iseqFsm_state_standby$EN;

  // register dacCore0_muteDAC
  reg dacCore0_muteDAC;
  wire dacCore0_muteDAC$D_IN, dacCore0_muteDAC$EN;

  // register dacCore0_sampF_rRdPtr_rdCounter
  reg [10 : 0] dacCore0_sampF_rRdPtr_rdCounter;
  wire [10 : 0] dacCore0_sampF_rRdPtr_rdCounter$D_IN;
  wire dacCore0_sampF_rRdPtr_rdCounter$EN;

  // register dacCore0_sampF_rRdPtr_rdCounterPre
  reg [10 : 0] dacCore0_sampF_rRdPtr_rdCounterPre;
  wire [10 : 0] dacCore0_sampF_rRdPtr_rdCounterPre$D_IN;
  wire dacCore0_sampF_rRdPtr_rdCounterPre$EN;

  // register dacCore0_sampF_rRdPtr_rsCounter
  reg [10 : 0] dacCore0_sampF_rRdPtr_rsCounter;
  wire [10 : 0] dacCore0_sampF_rRdPtr_rsCounter$D_IN;
  wire dacCore0_sampF_rRdPtr_rsCounter$EN;

  // register dacCore0_sampF_rWrPtr_rdCounter
  reg [10 : 0] dacCore0_sampF_rWrPtr_rdCounter;
  wire [10 : 0] dacCore0_sampF_rWrPtr_rdCounter$D_IN;
  wire dacCore0_sampF_rWrPtr_rdCounter$EN;

  // register dacCore0_sampF_rWrPtr_rdCounterPre
  reg [10 : 0] dacCore0_sampF_rWrPtr_rdCounterPre;
  wire [10 : 0] dacCore0_sampF_rWrPtr_rdCounterPre$D_IN;
  wire dacCore0_sampF_rWrPtr_rdCounterPre$EN;

  // register dacCore0_sampF_rWrPtr_rsCounter
  reg [10 : 0] dacCore0_sampF_rWrPtr_rsCounter;
  wire [10 : 0] dacCore0_sampF_rWrPtr_rsCounter$D_IN;
  wire dacCore0_sampF_rWrPtr_rsCounter$EN;

  // register dacCore0_syncMute
  reg dacCore0_syncMute;
  wire dacCore0_syncMute$D_IN, dacCore0_syncMute$EN;

  // register dacCore0_syncOut
  reg dacCore0_syncOut;
  wire dacCore0_syncOut$D_IN, dacCore0_syncOut$EN;

  // register dacCore0_tone
  reg dacCore0_tone;
  wire dacCore0_tone$D_IN, dacCore0_tone$EN;

  // register dacCore0_undCount
  reg [31 : 0] dacCore0_undCount;
  wire [31 : 0] dacCore0_undCount$D_IN;
  wire dacCore0_undCount$EN;

  // register fcDac_countNow
  reg [15 : 0] fcDac_countNow;
  wire [15 : 0] fcDac_countNow$D_IN;
  wire fcDac_countNow$EN;

  // register fcDac_countPast
  reg [15 : 0] fcDac_countPast;
  wire [15 : 0] fcDac_countPast$D_IN;
  wire fcDac_countPast$EN;

  // register fcDac_frequency
  reg [15 : 0] fcDac_frequency;
  wire [15 : 0] fcDac_frequency$D_IN;
  wire fcDac_frequency$EN;

  // register fcDac_grayCounter_rdCounter
  reg [15 : 0] fcDac_grayCounter_rdCounter;
  wire [15 : 0] fcDac_grayCounter_rdCounter$D_IN;
  wire fcDac_grayCounter_rdCounter$EN;

  // register fcDac_grayCounter_rdCounterPre
  reg [15 : 0] fcDac_grayCounter_rdCounterPre;
  wire [15 : 0] fcDac_grayCounter_rdCounterPre$D_IN;
  wire fcDac_grayCounter_rdCounterPre$EN;

  // register fcDac_grayCounter_rsCounter
  reg [15 : 0] fcDac_grayCounter_rsCounter;
  wire [15 : 0] fcDac_grayCounter_rsCounter$D_IN;
  wire fcDac_grayCounter_rsCounter$EN;

  // register fcDac_pulseAction
  reg fcDac_pulseAction;
  wire fcDac_pulseAction$D_IN, fcDac_pulseAction$EN;

  // register fcDac_sampleCount
  reg [15 : 0] fcDac_sampleCount;
  wire [15 : 0] fcDac_sampleCount$D_IN;
  wire fcDac_sampleCount$EN;

  // register firstUnderflowMesg
  reg [31 : 0] firstUnderflowMesg;
  wire [31 : 0] firstUnderflowMesg$D_IN;
  wire firstUnderflowMesg$EN;

  // register hasUnderflowed
  reg hasUnderflowed;
  wire hasUnderflowed$D_IN, hasUnderflowed$EN;

  // register initOpInFlight
  reg initOpInFlight;
  wire initOpInFlight$D_IN, initOpInFlight$EN;

  // register mesgStart
  reg [31 : 0] mesgStart;
  wire [31 : 0] mesgStart$D_IN;
  wire mesgStart$EN;

  // register oneKHz_value
  reg [17 : 0] oneKHz_value;
  wire [17 : 0] oneKHz_value$D_IN;
  wire oneKHz_value$EN;

  // register opcode
  reg [8 : 0] opcode;
  wire [8 : 0] opcode$D_IN;
  wire opcode$EN;

  // register rf
  reg [11 : 0] rf;
  wire [11 : 0] rf$D_IN;
  wire rf$EN;

  // register rf_1
  reg [11 : 0] rf_1;
  wire [11 : 0] rf_1$D_IN;
  wire rf_1$EN;

  // register rf_10
  reg [11 : 0] rf_10;
  wire [11 : 0] rf_10$D_IN;
  wire rf_10$EN;

  // register rf_11
  reg [11 : 0] rf_11;
  wire [11 : 0] rf_11$D_IN;
  wire rf_11$EN;

  // register rf_12
  reg [11 : 0] rf_12;
  wire [11 : 0] rf_12$D_IN;
  wire rf_12$EN;

  // register rf_13
  reg [11 : 0] rf_13;
  wire [11 : 0] rf_13$D_IN;
  wire rf_13$EN;

  // register rf_14
  reg [11 : 0] rf_14;
  wire [11 : 0] rf_14$D_IN;
  wire rf_14$EN;

  // register rf_15
  reg [11 : 0] rf_15;
  wire [11 : 0] rf_15$D_IN;
  wire rf_15$EN;

  // register rf_2
  reg [11 : 0] rf_2;
  wire [11 : 0] rf_2$D_IN;
  wire rf_2$EN;

  // register rf_3
  reg [11 : 0] rf_3;
  wire [11 : 0] rf_3$D_IN;
  wire rf_3$EN;

  // register rf_4
  reg [11 : 0] rf_4;
  wire [11 : 0] rf_4$D_IN;
  wire rf_4$EN;

  // register rf_5
  reg [11 : 0] rf_5;
  wire [11 : 0] rf_5$D_IN;
  wire rf_5$EN;

  // register rf_6
  reg [11 : 0] rf_6;
  wire [11 : 0] rf_6$D_IN;
  wire rf_6$EN;

  // register rf_7
  reg [11 : 0] rf_7;
  wire [11 : 0] rf_7$D_IN;
  wire rf_7$EN;

  // register rf_8
  reg [11 : 0] rf_8;
  wire [11 : 0] rf_8$D_IN;
  wire rf_8$EN;

  // register rf_9
  reg [11 : 0] rf_9;
  wire [11 : 0] rf_9$D_IN;
  wire rf_9$EN;

  // register sFlagState
  reg sFlagState;
  wire sFlagState$D_IN, sFlagState$EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight$D_IN, splitReadInFlight$EN;

  // register srcCnt
  reg [1 : 0] srcCnt;
  wire [1 : 0] srcCnt$D_IN;
  wire srcCnt$EN;

  // register stageCount
  reg [31 : 0] stageCount;
  wire [31 : 0] stageCount$D_IN;
  wire stageCount$EN;

  // register syncCount
  reg [31 : 0] syncCount;
  wire [31 : 0] syncCount$D_IN;
  wire syncCount$EN;

  // register takeEven
  reg takeEven;
  wire takeEven$D_IN, takeEven$EN;

  // register wci_cEdge
  reg [2 : 0] wci_cEdge;
  wire [2 : 0] wci_cEdge$D_IN;
  wire wci_cEdge$EN;

  // register wci_cState
  reg [2 : 0] wci_cState;
  wire [2 : 0] wci_cState$D_IN;
  wire wci_cState$EN;

  // register wci_ctlAckReg
  reg wci_ctlAckReg;
  wire wci_ctlAckReg$D_IN, wci_ctlAckReg$EN;

  // register wci_ctlOpActive
  reg wci_ctlOpActive;
  wire wci_ctlOpActive$D_IN, wci_ctlOpActive$EN;

  // register wci_illegalEdge
  reg wci_illegalEdge;
  wire wci_illegalEdge$D_IN, wci_illegalEdge$EN;

  // register wci_nState
  reg [2 : 0] wci_nState;
  reg [2 : 0] wci_nState$D_IN;
  wire wci_nState$EN;

  // register wci_reqF_countReg
  reg [1 : 0] wci_reqF_countReg;
  wire [1 : 0] wci_reqF_countReg$D_IN;
  wire wci_reqF_countReg$EN;

  // register wci_respF_c_r
  reg [1 : 0] wci_respF_c_r;
  wire [1 : 0] wci_respF_c_r$D_IN;
  wire wci_respF_c_r$EN;

  // register wci_respF_q_0
  reg [33 : 0] wci_respF_q_0;
  reg [33 : 0] wci_respF_q_0$D_IN;
  wire wci_respF_q_0$EN;

  // register wci_respF_q_1
  reg [33 : 0] wci_respF_q_1;
  reg [33 : 0] wci_respF_q_1$D_IN;
  wire wci_respF_q_1$EN;

  // register wci_sFlagReg
  reg wci_sFlagReg;
  wire wci_sFlagReg$D_IN, wci_sFlagReg$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wordsConsumed
  reg [7 : 0] wordsConsumed;
  wire [7 : 0] wordsConsumed$D_IN;
  wire wordsConsumed$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // register wti_nowReq
  reg [66 : 0] wti_nowReq;
  wire [66 : 0] wti_nowReq$D_IN;
  wire wti_nowReq$EN;

  // ports of submodule dacCore0_dacCtrl_s
  wire [3 : 0] dacCore0_dacCtrl_s$WGET, dacCore0_dacCtrl_s$WVAL;

  // ports of submodule dacCore0_dcmLck_cc
  wire dacCore0_dcmLck_cc$dD_OUT,
       dacCore0_dcmLck_cc$sD_IN,
       dacCore0_dcmLck_cc$sEN;

  // ports of submodule dacCore0_ddrSDrv_dcmLock
  wire dacCore0_ddrSDrv_dcmLock$WGET, dacCore0_ddrSDrv_dcmLock$WVAL;

  // ports of submodule dacCore0_ddrSDrv_ddrV
  wire [11 : 0] dacCore0_ddrSDrv_ddrV$dan,
		dacCore0_ddrSDrv_ddrV$dap,
		dacCore0_ddrSDrv_ddrV$dbn,
		dacCore0_ddrSDrv_ddrV$dbp,
		dacCore0_ddrSDrv_ddrV$dcn,
		dacCore0_ddrSDrv_ddrV$dcp,
		dacCore0_ddrSDrv_ddrV$ddn,
		dacCore0_ddrSDrv_ddrV$ddp,
		dacCore0_ddrSDrv_ddrV$sdrData0,
		dacCore0_ddrSDrv_ddrV$sdrData1,
		dacCore0_ddrSDrv_ddrV$sdrData2,
		dacCore0_ddrSDrv_ddrV$sdrData3,
		dacCore0_ddrSDrv_ddrV$sdrData4,
		dacCore0_ddrSDrv_ddrV$sdrData5,
		dacCore0_ddrSDrv_ddrV$sdrData6,
		dacCore0_ddrSDrv_ddrV$sdrData7,
		dacCore0_ddrSDrv_ddrV$sdrData8,
		dacCore0_ddrSDrv_ddrV$sdrData9,
		dacCore0_ddrSDrv_ddrV$sdrDataA,
		dacCore0_ddrSDrv_ddrV$sdrDataB,
		dacCore0_ddrSDrv_ddrV$sdrDataC,
		dacCore0_ddrSDrv_ddrV$sdrDataD,
		dacCore0_ddrSDrv_ddrV$sdrDataE,
		dacCore0_ddrSDrv_ddrV$sdrDataF;
  wire dacCore0_ddrSDrv_ddrV$dcmLocked, dacCore0_ddrSDrv_ddrV$sdrClk;

  // ports of submodule dacCore0_emitCntCC
  wire [31 : 0] dacCore0_emitCntCC$dD_OUT, dacCore0_emitCntCC$sD_IN;
  wire dacCore0_emitCntCC$sEN, dacCore0_emitCntCC$sRDY;

  // ports of submodule dacCore0_emitEn_d
  wire dacCore0_emitEn_d$dD_OUT,
       dacCore0_emitEn_d$sD_IN,
       dacCore0_emitEn_d$sEN;

  // ports of submodule dacCore0_iSeqDone
  wire dacCore0_iSeqDone$dD_OUT,
       dacCore0_iSeqDone$sD_IN,
       dacCore0_iSeqDone$sEN;

  // ports of submodule dacCore0_sampF_memory
  wire [191 : 0] dacCore0_sampF_memory$DIA,
		 dacCore0_sampF_memory$DIB,
		 dacCore0_sampF_memory$DOB;
  wire [9 : 0] dacCore0_sampF_memory$ADDRA, dacCore0_sampF_memory$ADDRB;
  wire dacCore0_sampF_memory$ENA,
       dacCore0_sampF_memory$ENB,
       dacCore0_sampF_memory$WEA,
       dacCore0_sampF_memory$WEB;

  // ports of submodule dacCore0_sampF_rRdPtr_wdCounterCrossing
  wire [10 : 0] dacCore0_sampF_rRdPtr_wdCounterCrossing$WGET,
		dacCore0_sampF_rRdPtr_wdCounterCrossing$WVAL;

  // ports of submodule dacCore0_sampF_rWrPtr_wdCounterCrossing
  wire [10 : 0] dacCore0_sampF_rWrPtr_wdCounterCrossing$WGET,
		dacCore0_sampF_rWrPtr_wdCounterCrossing$WVAL;

  // ports of submodule dacCore0_sdrRst
  wire dacCore0_sdrRst$OUT_RST_N;

  // ports of submodule dacCore0_startIseqF
  wire dacCore0_startIseqF$dDEQ,
       dacCore0_startIseqF$sD_IN,
       dacCore0_startIseqF$sENQ,
       dacCore0_startIseqF$sFULL_N;

  // ports of submodule dacCore0_syncMute_obuf
  wire dacCore0_syncMute_obuf$I,
       dacCore0_syncMute_obuf$O,
       dacCore0_syncMute_obuf$OB;

  // ports of submodule dacCore0_syncOut_obuf
  wire dacCore0_syncOut_obuf$I,
       dacCore0_syncOut_obuf$O,
       dacCore0_syncOut_obuf$OB;

  // ports of submodule dacCore0_toneEn_d
  wire dacCore0_toneEn_d$dD_OUT,
       dacCore0_toneEn_d$sD_IN,
       dacCore0_toneEn_d$sEN;

  // ports of submodule dacCore0_undCountCC
  wire [31 : 0] dacCore0_undCountCC$dD_OUT, dacCore0_undCountCC$sD_IN;
  wire dacCore0_undCountCC$sEN, dacCore0_undCountCC$sRDY;

  // ports of submodule fcDac_grayCounter_wdCounterCrossing
  wire [15 : 0] fcDac_grayCounter_wdCounterCrossing$WGET,
		fcDac_grayCounter_wdCounterCrossing$WVAL;

  // ports of submodule stageF
  wire [31 : 0] stageF$D_IN, stageF$D_OUT;
  wire stageF$CLR, stageF$DEQ, stageF$EMPTY_N, stageF$ENQ, stageF$FULL_N;

  // ports of submodule wci_isReset
  wire wci_isReset$VAL;

  // ports of submodule wci_reqF
  wire [59 : 0] wci_reqF$D_IN, wci_reqF$D_OUT;
  wire wci_reqF$CLR, wci_reqF$DEQ, wci_reqF$EMPTY_N, wci_reqF$ENQ;

  // ports of submodule wsiS_isReset
  wire wsiS_isReset$VAL;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // ports of submodule wti_isReset
  wire wti_isReset$VAL;

  // rule scheduling signals
  wire CAN_FIRE_RL_capture_underflow,
       CAN_FIRE_RL_dacCore0_dacCtrl_s_clock_domain_crossing,
       CAN_FIRE_RL_dacCore0_dac_count,
       CAN_FIRE_RL_dacCore0_dcmLck_to_cc,
       CAN_FIRE_RL_dacCore0_ddrSDrv_dcmLock_clock_domain_crossing,
       CAN_FIRE_RL_dacCore0_donebit_to_cc,
       CAN_FIRE_RL_dacCore0_emit_to_sdr,
       CAN_FIRE_RL_dacCore0_emit_word,
       CAN_FIRE_RL_dacCore0_iseqFsm_action_l100c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_action_l101c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_action_l102c10,
       CAN_FIRE_RL_dacCore0_iseqFsm_action_l103c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_action_l105c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_action_l99c15,
       CAN_FIRE_RL_dacCore0_iseqFsm_action_np,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_1,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_2,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_3,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_4,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_5,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_6,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_np,
       CAN_FIRE_RL_dacCore0_iseqFsm_actionof_np_1,
       CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start,
       CAN_FIRE_RL_dacCore0_iseqFsm_start_reg__dreg_update,
       CAN_FIRE_RL_dacCore0_iseqFsm_state_update_standby,
       CAN_FIRE_RL_dacCore0_ramp_word,
       CAN_FIRE_RL_dacCore0_sampF_portA,
       CAN_FIRE_RL_dacCore0_sampF_portB,
       CAN_FIRE_RL_dacCore0_sampF_portB_read_data,
       CAN_FIRE_RL_dacCore0_sampF_rRdPtr_do_decrement,
       CAN_FIRE_RL_dacCore0_sampF_rRdPtr_do_increment,
       CAN_FIRE_RL_dacCore0_sampF_rRdPtr_synchronizer,
       CAN_FIRE_RL_dacCore0_sampF_rRdPtr_wdCounterCrossing_clock_domain_crossing,
       CAN_FIRE_RL_dacCore0_sampF_rWrPtr_do_decrement,
       CAN_FIRE_RL_dacCore0_sampF_rWrPtr_do_increment,
       CAN_FIRE_RL_dacCore0_sampF_rWrPtr_synchronizer,
       CAN_FIRE_RL_dacCore0_sampF_rWrPtr_wdCounterCrossing_clock_domain_crossing,
       CAN_FIRE_RL_dacCore0_sdr_emit_adv,
       CAN_FIRE_RL_dacCore0_sdr_tone_adv,
       CAN_FIRE_RL_dacCore0_synMut,
       CAN_FIRE_RL_dacCore0_synOut,
       CAN_FIRE_RL_dacCore0_tone_to_sdr,
       CAN_FIRE_RL_dacCore0_update_emitcnt,
       CAN_FIRE_RL_dacCore0_update_undcount,
       CAN_FIRE_RL_doEmit,
       CAN_FIRE_RL_doTone,
       CAN_FIRE_RL_emit_mesgBegin,
       CAN_FIRE_RL_emit_mesgConsume,
       CAN_FIRE_RL_fcDac_grayCounter_do_decrement,
       CAN_FIRE_RL_fcDac_grayCounter_do_increment,
       CAN_FIRE_RL_fcDac_grayCounter_synchronizer,
       CAN_FIRE_RL_fcDac_grayCounter_wdCounterCrossing_clock_domain_crossing,
       CAN_FIRE_RL_fcDac_gray_inc,
       CAN_FIRE_RL_fcDac_once_per_period,
       CAN_FIRE_RL_fcDac_pulseAction__dreg_update,
       CAN_FIRE_RL_inc_modcnt,
       CAN_FIRE_RL_init_complete_ok,
       CAN_FIRE_RL_oneKHz_ruleDec,
       CAN_FIRE_RL_oneKHz_ruleInc,
       CAN_FIRE_RL_operating_actions,
       CAN_FIRE_RL_pass_control,
       CAN_FIRE_RL_process_staged_data,
       CAN_FIRE_RL_send_pulse,
       CAN_FIRE_RL_updateSflag,
       CAN_FIRE_RL_wci_cfrd,
       CAN_FIRE_RL_wci_cfwr,
       CAN_FIRE_RL_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wci_ctl_op_complete,
       CAN_FIRE_RL_wci_ctl_op_start,
       CAN_FIRE_RL_wci_ctrl_EiI,
       CAN_FIRE_RL_wci_ctrl_IsO,
       CAN_FIRE_RL_wci_ctrl_OrE,
       CAN_FIRE_RL_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_wci_reqF_enq,
       CAN_FIRE_RL_wci_request_decode,
       CAN_FIRE_RL_wci_respF_both,
       CAN_FIRE_RL_wci_respF_decCtr,
       CAN_FIRE_RL_wci_respF_deq,
       CAN_FIRE_RL_wci_respF_incCtr,
       CAN_FIRE_RL_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_wci_sThreadBusy_reg,
       CAN_FIRE_RL_wsiS_backpressure,
       CAN_FIRE_RL_wsiS_ext_status_assign,
       CAN_FIRE_RL_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_wsiS_reqFifo_enq,
       CAN_FIRE_RL_wsiS_reqFifo_reset,
       CAN_FIRE_RL_wsiS_update_statusR,
       CAN_FIRE_RL_wsi_Es_doAlways,
       CAN_FIRE_wci_s_mFlag,
       CAN_FIRE_wci_s_putreq,
       CAN_FIRE_wsiS1_mBurstLength,
       CAN_FIRE_wsiS1_mBurstPrecise,
       CAN_FIRE_wsiS1_mByteEn,
       CAN_FIRE_wsiS1_mCmd,
       CAN_FIRE_wsiS1_mData,
       CAN_FIRE_wsiS1_mDataInfo,
       CAN_FIRE_wsiS1_mReqInfo,
       CAN_FIRE_wsiS1_mReqLast,
       CAN_FIRE_wsiS1_mReset_n,
       CAN_FIRE_wti_s_put,
       WILL_FIRE_RL_capture_underflow,
       WILL_FIRE_RL_dacCore0_dacCtrl_s_clock_domain_crossing,
       WILL_FIRE_RL_dacCore0_dac_count,
       WILL_FIRE_RL_dacCore0_dcmLck_to_cc,
       WILL_FIRE_RL_dacCore0_ddrSDrv_dcmLock_clock_domain_crossing,
       WILL_FIRE_RL_dacCore0_donebit_to_cc,
       WILL_FIRE_RL_dacCore0_emit_to_sdr,
       WILL_FIRE_RL_dacCore0_emit_word,
       WILL_FIRE_RL_dacCore0_iseqFsm_action_l100c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_action_l101c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_action_l102c10,
       WILL_FIRE_RL_dacCore0_iseqFsm_action_l103c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_action_l105c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_action_l99c15,
       WILL_FIRE_RL_dacCore0_iseqFsm_action_np,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_1,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_2,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_3,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_4,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_5,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_6,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np,
       WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np_1,
       WILL_FIRE_RL_dacCore0_iseqFsm_fsm_start,
       WILL_FIRE_RL_dacCore0_iseqFsm_start_reg__dreg_update,
       WILL_FIRE_RL_dacCore0_iseqFsm_state_update_standby,
       WILL_FIRE_RL_dacCore0_ramp_word,
       WILL_FIRE_RL_dacCore0_sampF_portA,
       WILL_FIRE_RL_dacCore0_sampF_portB,
       WILL_FIRE_RL_dacCore0_sampF_portB_read_data,
       WILL_FIRE_RL_dacCore0_sampF_rRdPtr_do_decrement,
       WILL_FIRE_RL_dacCore0_sampF_rRdPtr_do_increment,
       WILL_FIRE_RL_dacCore0_sampF_rRdPtr_synchronizer,
       WILL_FIRE_RL_dacCore0_sampF_rRdPtr_wdCounterCrossing_clock_domain_crossing,
       WILL_FIRE_RL_dacCore0_sampF_rWrPtr_do_decrement,
       WILL_FIRE_RL_dacCore0_sampF_rWrPtr_do_increment,
       WILL_FIRE_RL_dacCore0_sampF_rWrPtr_synchronizer,
       WILL_FIRE_RL_dacCore0_sampF_rWrPtr_wdCounterCrossing_clock_domain_crossing,
       WILL_FIRE_RL_dacCore0_sdr_emit_adv,
       WILL_FIRE_RL_dacCore0_sdr_tone_adv,
       WILL_FIRE_RL_dacCore0_synMut,
       WILL_FIRE_RL_dacCore0_synOut,
       WILL_FIRE_RL_dacCore0_tone_to_sdr,
       WILL_FIRE_RL_dacCore0_update_emitcnt,
       WILL_FIRE_RL_dacCore0_update_undcount,
       WILL_FIRE_RL_doEmit,
       WILL_FIRE_RL_doTone,
       WILL_FIRE_RL_emit_mesgBegin,
       WILL_FIRE_RL_emit_mesgConsume,
       WILL_FIRE_RL_fcDac_grayCounter_do_decrement,
       WILL_FIRE_RL_fcDac_grayCounter_do_increment,
       WILL_FIRE_RL_fcDac_grayCounter_synchronizer,
       WILL_FIRE_RL_fcDac_grayCounter_wdCounterCrossing_clock_domain_crossing,
       WILL_FIRE_RL_fcDac_gray_inc,
       WILL_FIRE_RL_fcDac_once_per_period,
       WILL_FIRE_RL_fcDac_pulseAction__dreg_update,
       WILL_FIRE_RL_inc_modcnt,
       WILL_FIRE_RL_init_complete_ok,
       WILL_FIRE_RL_oneKHz_ruleDec,
       WILL_FIRE_RL_oneKHz_ruleInc,
       WILL_FIRE_RL_operating_actions,
       WILL_FIRE_RL_pass_control,
       WILL_FIRE_RL_process_staged_data,
       WILL_FIRE_RL_send_pulse,
       WILL_FIRE_RL_updateSflag,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wci_ctl_op_complete,
       WILL_FIRE_RL_wci_ctl_op_start,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_wci_reqF_enq,
       WILL_FIRE_RL_wci_request_decode,
       WILL_FIRE_RL_wci_respF_both,
       WILL_FIRE_RL_wci_respF_decCtr,
       WILL_FIRE_RL_wci_respF_deq,
       WILL_FIRE_RL_wci_respF_incCtr,
       WILL_FIRE_RL_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_wci_sThreadBusy_reg,
       WILL_FIRE_RL_wsiS_backpressure,
       WILL_FIRE_RL_wsiS_ext_status_assign,
       WILL_FIRE_RL_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset,
       WILL_FIRE_RL_wsiS_update_statusR,
       WILL_FIRE_RL_wsi_Es_doAlways,
       WILL_FIRE_wci_s_mFlag,
       WILL_FIRE_wci_s_putreq,
       WILL_FIRE_wsiS1_mBurstLength,
       WILL_FIRE_wsiS1_mBurstPrecise,
       WILL_FIRE_wsiS1_mByteEn,
       WILL_FIRE_wsiS1_mCmd,
       WILL_FIRE_wsiS1_mData,
       WILL_FIRE_wsiS1_mDataInfo,
       WILL_FIRE_wsiS1_mReqInfo,
       WILL_FIRE_wsiS1_mReqLast,
       WILL_FIRE_wsiS1_mReset_n,
       WILL_FIRE_wti_s_put;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_respF_q_0$write_1__VAL_2;
  wire [33 : 0] MUX_wci_respF_q_0$write_1__VAL_1,
		MUX_wci_respF_q_1$write_1__VAL_1,
		MUX_wci_respF_x_wire$wset_1__VAL_1,
		MUX_wci_respF_x_wire$wset_1__VAL_2;
  wire [17 : 0] MUX_oneKHz_value$write_1__VAL_2;
  wire [15 : 0] MUX_fcDac_grayCounter_rsCounter$write_1__VAL_2;
  wire [11 : 0] MUX_dacCore0_ddrSDrv_ddrV$sdr0_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr0_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr1_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr1_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr2_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr2_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr3_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr4_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr4_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr5_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr5_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr6_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr6_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr7_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdr7_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr8_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdr9_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdrA_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdrB_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdrC_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdrD_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdrE_1__VAL_2,
		MUX_dacCore0_ddrSDrv_ddrV$sdrF_1__VAL_1,
		MUX_dacCore0_ddrSDrv_ddrV$sdrF_1__VAL_2;
  wire [10 : 0] MUX_dacCore0_sampF_rRdPtr_rsCounter$write_1__VAL_2,
		MUX_dacCore0_sampF_rWrPtr_rsCounter$write_1__VAL_2;
  wire [8 : 0] MUX_opcode$write_1__VAL_2;
  wire [1 : 0] MUX_wci_respF_c_r$write_1__VAL_1,
	       MUX_wci_respF_c_r$write_1__VAL_2;
  wire MUX_opcode$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_1,
       MUX_wci_illegalEdge$write_1__SEL_2,
       MUX_wci_illegalEdge$write_1__VAL_2,
       MUX_wci_respF_q_0$write_1__SEL_2,
       MUX_wci_respF_q_1$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h2631, v__h2778, v__h3677, v__h78971, v__h79459;
  reg [31 : 0] CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1;
  wire [31 : 0] IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_0_90_ETC___d1125,
		IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_0_25_ETC___d1124,
		IF_fcDac_grayCounter_rsCounter_28_BIT_0_29_OR__ETC___d1159,
		_theResult____h78955,
		dacStatusLs__h78881,
		rdat__h79050,
		rdat__h79123,
		result__h87501,
		x__h19583,
		x__h33820,
		x__h72733;
  wire [15 : 0] x__h71709, y__h72769;
  wire [12 : 0] x__h59790;
  wire [10 : 0] dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042,
		x__h12736,
		x__h26973,
		x__h36747,
		x_dReadBin__h33902,
		x_sReadBin__h33899,
		y__h19614,
		y__h33851;
  wire [9 : 0] x2__h36710;
  wire [5 : 0] x__h79105;
  wire IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_1_88_ETC___d1142,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_1_88_ETC___d1166,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1140,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1141,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1138,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1139,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1136,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1137,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1134,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1135,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1132,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1133,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1130,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1131,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1128,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1129,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1126,
       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1127,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_1_23_ETC___d1158,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_1_23_ETC___d1167,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1156,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1157,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1003,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1155,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1153,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1154,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1151,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1152,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1149,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1150,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1147,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1148,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1145,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1146,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1143,
       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1144,
       NOT_dacCore0_sampF_rWrPtr_rsCounter_30_EQ_dacC_ETC___d1169,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1024,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1025,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1026,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1027,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1032,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1034,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1041,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1043,
       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1045,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1004,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1005,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1006,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1007,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1008,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1009,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1031,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1033,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1044,
       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1048,
       dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1010,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1011,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1012,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1013,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1014,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1015,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1029,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1030,
       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1039,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1016,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1017,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1018,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1019,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1020,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1021,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1022,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1023,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1028,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1035,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1036,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1037,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1038,
       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1040,
       fcDac_grayCounter_rsCounter_28_BIT_0_29_XOR_fc_ETC___d1098,
       wsiS_reqFifo_notFull__12_AND_wsiS_burstKind_92_ETC___d331,
       z__h70644,
       z__h70651,
       z__h70658,
       z__h70665,
       z__h70672,
       z__h70679,
       z__h70686,
       z__h70693,
       z__h70700,
       z__h70707,
       z__h70714,
       z__h70721,
       z__h70728,
       z__h70735;

  // oscillator and gates for output clock CLK_dac0_dacSdrClk
  assign CLK_dac0_dacSdrClk = dacCore0_ddrSDrv_ddrV$sdrClk ;
  assign CLK_GATE_dac0_dacSdrClk = 1'b1 ;

  // output resets
  assign RST_N_dac0_dacSdrRst = dacCore0_sdrRst$OUT_RST_N ;

  // action method wci_s_putreq
  assign CAN_FIRE_wci_s_putreq = 1'd1 ;
  assign WILL_FIRE_wci_s_putreq = 1'd1 ;

  // value method wci_s_resp
  assign wci_s_resp = wci_respF_q_0 ;

  // value method wci_s_sThreadBusy
  assign wci_s_SThreadBusy = wci_reqF_countReg > 2'd1 || wci_isReset$VAL ;

  // value method wci_s_sFlag
  assign wci_s_SFlag = { 1'd1, wci_sFlagReg } ;

  // action method wci_s_mFlag
  assign CAN_FIRE_wci_s_mFlag = 1'd1 ;
  assign WILL_FIRE_wci_s_mFlag = 1'd1 ;

  // action method wti_s_put
  assign CAN_FIRE_wti_s_put = 1'd1 ;
  assign WILL_FIRE_wti_s_put = 1'd1 ;

  // value method wti_s_sThreadBusy
  assign wti_s_SThreadBusy = wti_isReset$VAL ;

  // action method wsiS1_mCmd
  assign CAN_FIRE_wsiS1_mCmd = 1'd1 ;
  assign WILL_FIRE_wsiS1_mCmd = 1'd1 ;

  // action method wsiS1_mReqLast
  assign CAN_FIRE_wsiS1_mReqLast = 1'd1 ;
  assign WILL_FIRE_wsiS1_mReqLast = wsiS1_MReqLast ;

  // action method wsiS1_mBurstPrecise
  assign CAN_FIRE_wsiS1_mBurstPrecise = 1'd1 ;
  assign WILL_FIRE_wsiS1_mBurstPrecise = wsiS1_MBurstPrecise ;

  // action method wsiS1_mBurstLength
  assign CAN_FIRE_wsiS1_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wsiS1_mBurstLength = 1'd1 ;

  // action method wsiS1_mData
  assign CAN_FIRE_wsiS1_mData = 1'd1 ;
  assign WILL_FIRE_wsiS1_mData = 1'd1 ;

  // action method wsiS1_mByteEn
  assign CAN_FIRE_wsiS1_mByteEn = 1'd1 ;
  assign WILL_FIRE_wsiS1_mByteEn = 1'd1 ;

  // action method wsiS1_mReqInfo
  assign CAN_FIRE_wsiS1_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wsiS1_mReqInfo = 1'd1 ;

  // action method wsiS1_mDataInfo
  assign CAN_FIRE_wsiS1_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wsiS1_mDataInfo = 1'd1 ;

  // value method wsiS1_sThreadBusy
  assign wsiS1_SThreadBusy =
	     !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget ;

  // value method wsiS1_sReset_n
  assign wsiS1_SReset_n = !wsiS_isReset$VAL && wsiS_operateD ;

  // action method wsiS1_mReset_n
  assign CAN_FIRE_wsiS1_mReset_n = 1'd1 ;
  assign WILL_FIRE_wsiS1_mReset_n = wsiS1_MReset_n ;

  // value method dac0_dap
  assign dac0_dap = dacCore0_ddrSDrv_ddrV$dap ;

  // value method dac0_dan
  assign dac0_dan = dacCore0_ddrSDrv_ddrV$dan ;

  // value method dac0_dbp
  assign dac0_dbp = dacCore0_ddrSDrv_ddrV$dbp ;

  // value method dac0_dbn
  assign dac0_dbn = dacCore0_ddrSDrv_ddrV$dbn ;

  // value method dac0_dcp
  assign dac0_dcp = dacCore0_ddrSDrv_ddrV$dcp ;

  // value method dac0_dcn
  assign dac0_dcn = dacCore0_ddrSDrv_ddrV$dcn ;

  // value method dac0_ddp
  assign dac0_ddp = dacCore0_ddrSDrv_ddrV$ddp ;

  // value method dac0_ddn
  assign dac0_ddn = dacCore0_ddrSDrv_ddrV$ddn ;

  // value method dac0_dacClkDiv
  assign dac0_dacClkDiv = dacCore0_dacCtrl_s$WGET[3] ;

  // value method dac0_dacDelay
  assign dac0_dacDelay = dacCore0_dacCtrl_s$WGET[2] ;

  // value method dac0_dacRf
  assign dac0_dacRf = dacCore0_dacCtrl_s$WGET[0] ;

  // value method dac0_dacRz
  assign dac0_dacRz = dacCore0_dacCtrl_s$WGET[1] ;

  // value method dac0_dacCal
  assign dac0_dacCal = dacCore0_calBit ;

  // value method dac0_syncOutp
  assign dac0_syncOutp = dacCore0_syncOut_obuf$O ;

  // value method dac0_syncOutn
  assign dac0_syncOutn = dacCore0_syncOut_obuf$OB ;

  // value method dac0_syncMutep
  assign dac0_syncMutep = dacCore0_syncMute_obuf$O ;

  // value method dac0_syncMuten
  assign dac0_syncMuten = dacCore0_syncMute_obuf$OB ;

  // submodule dacCore0_dacCtrl_s
  BypassWire #(.width(32'd4)) dacCore0_dacCtrl_s(.WVAL(dacCore0_dacCtrl_s$WVAL),
						 .WGET(dacCore0_dacCtrl_s$WGET));

  // submodule dacCore0_dcmLck_cc
  SyncBit #(.init(32'd0)) dacCore0_dcmLck_cc(.sCLK(dacCore0_ddrSDrv_ddrV$sdrClk),
					     .dCLK(CLK),
					     .sRST_N(dacCore0_sdrRst$OUT_RST_N),
					     .sD_IN(dacCore0_dcmLck_cc$sD_IN),
					     .sEN(dacCore0_dcmLck_cc$sEN),
					     .dD_OUT(dacCore0_dcmLck_cc$dD_OUT));

  // submodule dacCore0_ddrSDrv_dcmLock
  BypassWire #(.width(32'd1)) dacCore0_ddrSDrv_dcmLock(.WVAL(dacCore0_ddrSDrv_dcmLock$WVAL),
						       .WGET(dacCore0_ddrSDrv_dcmLock$WGET));

  // submodule dacCore0_ddrSDrv_ddrV
  ddrOutput2 dacCore0_ddrSDrv_ddrV(.dcmResetN(RST_N),
				   .ddrClk(CLK_dac_clk),
				   .sdrData0(dacCore0_ddrSDrv_ddrV$sdrData0),
				   .sdrData1(dacCore0_ddrSDrv_ddrV$sdrData1),
				   .sdrData2(dacCore0_ddrSDrv_ddrV$sdrData2),
				   .sdrData3(dacCore0_ddrSDrv_ddrV$sdrData3),
				   .sdrData4(dacCore0_ddrSDrv_ddrV$sdrData4),
				   .sdrData5(dacCore0_ddrSDrv_ddrV$sdrData5),
				   .sdrData6(dacCore0_ddrSDrv_ddrV$sdrData6),
				   .sdrData7(dacCore0_ddrSDrv_ddrV$sdrData7),
				   .sdrData8(dacCore0_ddrSDrv_ddrV$sdrData8),
				   .sdrData9(dacCore0_ddrSDrv_ddrV$sdrData9),
				   .sdrDataA(dacCore0_ddrSDrv_ddrV$sdrDataA),
				   .sdrDataB(dacCore0_ddrSDrv_ddrV$sdrDataB),
				   .sdrDataC(dacCore0_ddrSDrv_ddrV$sdrDataC),
				   .sdrDataD(dacCore0_ddrSDrv_ddrV$sdrDataD),
				   .sdrDataE(dacCore0_ddrSDrv_ddrV$sdrDataE),
				   .sdrDataF(dacCore0_ddrSDrv_ddrV$sdrDataF),
				   .ddp(dacCore0_ddrSDrv_ddrV$ddp),
				   .ddn(dacCore0_ddrSDrv_ddrV$ddn),
				   .dcmLocked(dacCore0_ddrSDrv_ddrV$dcmLocked),
				   .dap(dacCore0_ddrSDrv_ddrV$dap),
				   .dan(dacCore0_ddrSDrv_ddrV$dan),
				   .dbp(dacCore0_ddrSDrv_ddrV$dbp),
				   .dbn(dacCore0_ddrSDrv_ddrV$dbn),
				   .dcp(dacCore0_ddrSDrv_ddrV$dcp),
				   .dcn(dacCore0_ddrSDrv_ddrV$dcn),
				   .sdrClk(dacCore0_ddrSDrv_ddrV$sdrClk));

  // submodule dacCore0_ddrSDrv_isReset
  ResetToBool dacCore0_ddrSDrv_isReset(.RST(RST_N), .VAL());

  // submodule dacCore0_emitCntCC
  SyncRegister #(.width(32'd32),
		 .init(32'd0)) dacCore0_emitCntCC(.sCLK(dacCore0_ddrSDrv_ddrV$sdrClk),
						  .dCLK(CLK),
						  .sRST_N(dacCore0_sdrRst$OUT_RST_N),
						  .sD_IN(dacCore0_emitCntCC$sD_IN),
						  .sEN(dacCore0_emitCntCC$sEN),
						  .dD_OUT(dacCore0_emitCntCC$dD_OUT),
						  .sRDY(dacCore0_emitCntCC$sRDY));

  // submodule dacCore0_emitEn_d
  SyncBit #(.init(32'd0)) dacCore0_emitEn_d(.sCLK(CLK),
					    .dCLK(dacCore0_ddrSDrv_ddrV$sdrClk),
					    .sRST_N(RST_N),
					    .sD_IN(dacCore0_emitEn_d$sD_IN),
					    .sEN(dacCore0_emitEn_d$sEN),
					    .dD_OUT(dacCore0_emitEn_d$dD_OUT));

  // submodule dacCore0_iSeqDone
  SyncBit #(.init(32'd0)) dacCore0_iSeqDone(.sCLK(dacCore0_ddrSDrv_ddrV$sdrClk),
					    .dCLK(CLK),
					    .sRST_N(dacCore0_sdrRst$OUT_RST_N),
					    .sD_IN(dacCore0_iSeqDone$sD_IN),
					    .sEN(dacCore0_iSeqDone$sEN),
					    .dD_OUT(dacCore0_iSeqDone$dD_OUT));

  // submodule dacCore0_sampF_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd192),
	  .MEMSIZE(11'd1024)) dacCore0_sampF_memory(.CLKA(CLK),
						    .CLKB(dacCore0_ddrSDrv_ddrV$sdrClk),
						    .ADDRA(dacCore0_sampF_memory$ADDRA),
						    .ADDRB(dacCore0_sampF_memory$ADDRB),
						    .DIA(dacCore0_sampF_memory$DIA),
						    .DIB(dacCore0_sampF_memory$DIB),
						    .WEA(dacCore0_sampF_memory$WEA),
						    .WEB(dacCore0_sampF_memory$WEB),
						    .ENA(dacCore0_sampF_memory$ENA),
						    .ENB(dacCore0_sampF_memory$ENB),
						    .DOA(),
						    .DOB(dacCore0_sampF_memory$DOB));

  // submodule dacCore0_sampF_rRdPtr_wdCounterCrossing
  BypassWire #(.width(32'd11)) dacCore0_sampF_rRdPtr_wdCounterCrossing(.WVAL(dacCore0_sampF_rRdPtr_wdCounterCrossing$WVAL),
								       .WGET(dacCore0_sampF_rRdPtr_wdCounterCrossing$WGET));

  // submodule dacCore0_sampF_rWrPtr_wdCounterCrossing
  BypassWire #(.width(32'd11)) dacCore0_sampF_rWrPtr_wdCounterCrossing(.WVAL(dacCore0_sampF_rWrPtr_wdCounterCrossing$WVAL),
								       .WGET(dacCore0_sampF_rWrPtr_wdCounterCrossing$WGET));

  // submodule dacCore0_sdrRst
  SyncResetA #(.RSTDELAY(32'd0)) dacCore0_sdrRst(.CLK(dacCore0_ddrSDrv_ddrV$sdrClk),
						 .IN_RST_N(RST_N),
						 .OUT_RST_N(dacCore0_sdrRst$OUT_RST_N));

  // submodule dacCore0_startIseqF
  SyncFIFO #(.dataWidth(32'd1),
	     .depth(32'd2),
	     .indxWidth(32'd1),
	     .regFull(1'd1),
	     .regEmpty(1'd1)) dacCore0_startIseqF(.sCLK(CLK),
						  .dCLK(dacCore0_ddrSDrv_ddrV$sdrClk),
						  .sRST_N(RST_N),
						  .sD_IN(dacCore0_startIseqF$sD_IN),
						  .sENQ(dacCore0_startIseqF$sENQ),
						  .dDEQ(dacCore0_startIseqF$dDEQ),
						  .dD_OUT(),
						  .sFULL_N(dacCore0_startIseqF$sFULL_N),
						  .dEMPTY_N());

  // submodule dacCore0_syncMute_obuf
  OBUFDS dacCore0_syncMute_obuf(.I(dacCore0_syncMute_obuf$I),
				.O(dacCore0_syncMute_obuf$O),
				.OB(dacCore0_syncMute_obuf$OB));

  // submodule dacCore0_syncOut_obuf
  OBUFDS dacCore0_syncOut_obuf(.I(dacCore0_syncOut_obuf$I),
			       .O(dacCore0_syncOut_obuf$O),
			       .OB(dacCore0_syncOut_obuf$OB));

  // submodule dacCore0_toneEn_d
  SyncBit #(.init(32'd0)) dacCore0_toneEn_d(.sCLK(CLK),
					    .dCLK(dacCore0_ddrSDrv_ddrV$sdrClk),
					    .sRST_N(RST_N),
					    .sD_IN(dacCore0_toneEn_d$sD_IN),
					    .sEN(dacCore0_toneEn_d$sEN),
					    .dD_OUT(dacCore0_toneEn_d$dD_OUT));

  // submodule dacCore0_undCountCC
  SyncRegister #(.width(32'd32),
		 .init(32'd0)) dacCore0_undCountCC(.sCLK(dacCore0_ddrSDrv_ddrV$sdrClk),
						   .dCLK(CLK),
						   .sRST_N(dacCore0_sdrRst$OUT_RST_N),
						   .sD_IN(dacCore0_undCountCC$sD_IN),
						   .sEN(dacCore0_undCountCC$sEN),
						   .dD_OUT(dacCore0_undCountCC$dD_OUT),
						   .sRDY(dacCore0_undCountCC$sRDY));

  // submodule fcDac_grayCounter_wdCounterCrossing
  BypassWire #(.width(32'd16)) fcDac_grayCounter_wdCounterCrossing(.WVAL(fcDac_grayCounter_wdCounterCrossing$WVAL),
								   .WGET(fcDac_grayCounter_wdCounterCrossing$WGET));

  // submodule stageF
  FIFO2 #(.width(32'd32), .guarded(32'd1)) stageF(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(stageF$D_IN),
						  .ENQ(stageF$ENQ),
						  .DEQ(stageF$DEQ),
						  .CLR(stageF$CLR),
						  .D_OUT(stageF$D_OUT),
						  .FULL_N(stageF$FULL_N),
						  .EMPTY_N(stageF$EMPTY_N));

  // submodule wci_isReset
  ResetToBool wci_isReset(.RST(RST_N), .VAL(wci_isReset$VAL));

  // submodule wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_reqF(.RST_N(RST_N),
					.CLK(CLK),
					.D_IN(wci_reqF$D_IN),
					.ENQ(wci_reqF$ENQ),
					.DEQ(wci_reqF$DEQ),
					.CLR(wci_reqF$CLR),
					.D_OUT(wci_reqF$D_OUT),
					.FULL_N(),
					.EMPTY_N(wci_reqF$EMPTY_N));

  // submodule wsiS_isReset
  ResetToBool wsiS_isReset(.RST(RST_N), .VAL(wsiS_isReset$VAL));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(RST_N),
					    .CLK(CLK),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // submodule wti_isReset
  ResetToBool wti_isReset(.RST(RST_N_dac_rst), .VAL(wti_isReset$VAL));

  // rule RL_dacCore0_synOut
  assign CAN_FIRE_RL_dacCore0_synOut = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_synOut = 1'd1 ;

  // rule RL_dacCore0_synMut
  assign CAN_FIRE_RL_dacCore0_synMut = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_synMut = 1'd1 ;

  // rule RL_wsiS_backpressure
  assign CAN_FIRE_RL_wsiS_backpressure =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign WILL_FIRE_RL_wsiS_backpressure = CAN_FIRE_RL_wsiS_backpressure ;

  // rule RL_wci_request_decode
  assign CAN_FIRE_RL_wci_request_decode = wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wci_request_decode = wci_reqF$EMPTY_N ;

  // rule RL_wci_ctl_op_start
  assign CAN_FIRE_RL_wci_ctl_op_start =
	     wci_reqF$EMPTY_N && wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wci_ctl_op_start =
	     CAN_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_ctrl_IsO
  assign CAN_FIRE_RL_wci_ctrl_IsO =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd1 &&
	     wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_wci_ctrl_IsO =
	     CAN_FIRE_RL_wci_ctrl_IsO && !WILL_FIRE_RL_init_complete_ok ;

  // rule RL_wci_ctrl_OrE
  assign CAN_FIRE_RL_wci_ctrl_OrE =
	     wci_wci_ctrl_pw$whas && WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd2 &&
	     wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_wci_ctrl_OrE =
	     CAN_FIRE_RL_wci_ctrl_OrE && !WILL_FIRE_RL_init_complete_ok ;

  // rule RL_operating_actions
  assign CAN_FIRE_RL_operating_actions = wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_operating_actions = CAN_FIRE_RL_operating_actions ;

  // rule RL_wci_respF_deq
  assign CAN_FIRE_RL_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wci_respF_deq = 1'd1 ;

  // rule RL_wci_reqF_enq
  assign CAN_FIRE_RL_wci_reqF_enq = wci_s_req[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_wci_reqF_enq = CAN_FIRE_RL_wci_reqF_enq ;

  // rule RL_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_wsi_Es_doAlways
  assign CAN_FIRE_RL_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_wsi_Es_doAlways = 1'd1 ;

  // rule RL_wsiS_update_statusR
  assign CAN_FIRE_RL_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_update_statusR = 1'd1 ;

  // rule RL_wsiS_ext_status_assign
  assign CAN_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wci_reqF$EMPTY_N && wci_respF_c_r != 2'd2 &&
	     wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_wsiS_inc_tBusyCount =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_wsiS_inc_tBusyCount = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // rule RL_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_wsiS_reqFifo_enq = CAN_FIRE_RL_wsiS_reqFifo_enq ;

  // rule RL_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_init_complete_ok
  assign CAN_FIRE_RL_init_complete_ok =
	     initOpInFlight && dacCore0_iSeqDone$dD_OUT ;
  assign WILL_FIRE_RL_init_complete_ok = CAN_FIRE_RL_init_complete_ok ;

  // rule RL_wci_ctrl_EiI
  assign CAN_FIRE_RL_wci_ctrl_EiI =
	     dacCore0_startIseqF$sFULL_N && wci_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     wci_cState == 3'd0 &&
	     wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_wci_ctrl_EiI = CAN_FIRE_RL_wci_ctrl_EiI ;

  // rule RL_updateSflag
  assign CAN_FIRE_RL_updateSflag = sFlagState ;
  assign WILL_FIRE_RL_updateSflag = sFlagState ;

  // rule RL_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_send_pulse
  assign CAN_FIRE_RL_send_pulse = oneKHz_value == 18'd124999 ;
  assign WILL_FIRE_RL_send_pulse = CAN_FIRE_RL_send_pulse ;

  // rule RL_inc_modcnt
  assign CAN_FIRE_RL_inc_modcnt = 1'd1 ;
  assign WILL_FIRE_RL_inc_modcnt = 1'd1 ;

  // rule RL_capture_underflow
  assign CAN_FIRE_RL_capture_underflow =
	     wci_cState == 3'd2 && !hasUnderflowed &&
	     dacCore0_undCountCC$dD_OUT != 32'd0 ;
  assign WILL_FIRE_RL_capture_underflow = CAN_FIRE_RL_capture_underflow ;

  // rule RL_doTone
  assign CAN_FIRE_RL_doTone = wci_cState == 3'd2 && dacControl[7] ;
  assign WILL_FIRE_RL_doTone = CAN_FIRE_RL_doTone ;

  // rule RL_doEmit
  assign CAN_FIRE_RL_doEmit =
	     wci_cState == 3'd2 && dacControl[4] && wordsConsumed > 8'd127 ;
  assign WILL_FIRE_RL_doEmit = CAN_FIRE_RL_doEmit ;

  // rule RL_process_staged_data
  assign CAN_FIRE_RL_process_staged_data =
	     stageF$EMPTY_N &&
	     (dacControl[5] ?
		NOT_dacCore0_sampF_rWrPtr_rsCounter_30_EQ_dacC_ETC___d1169 :
		srcCnt != 2'h3 ||
		NOT_dacCore0_sampF_rWrPtr_rsCounter_30_EQ_dacC_ETC___d1169) &&
	     wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_process_staged_data = CAN_FIRE_RL_process_staged_data ;

  // rule RL_fcDac_once_per_period
  assign CAN_FIRE_RL_fcDac_once_per_period = fcDac_pulseAction ;
  assign WILL_FIRE_RL_fcDac_once_per_period = fcDac_pulseAction ;

  // rule RL_emit_mesgConsume
  assign CAN_FIRE_RL_emit_mesgConsume =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_emit_mesgConsume =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;

  // rule RL_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_wsiS_reqFifo_reset =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ||
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_wsiS_reqFifo_reset = CAN_FIRE_RL_wsiS_reqFifo_reset ;

  // rule RL_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 !=
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_emit_mesgBegin
  assign CAN_FIRE_RL_emit_mesgBegin =
	     wsiS_reqFifo$EMPTY_N && wci_cState == 3'd2 && !opcode[8] ;
  assign WILL_FIRE_RL_emit_mesgBegin = CAN_FIRE_RL_emit_mesgBegin ;

  // rule RL_wci_ctl_op_complete
  assign CAN_FIRE_RL_wci_ctl_op_complete =
	     wci_respF_c_r != 2'd2 && wci_ctlOpActive && wci_ctlAckReg ;
  assign WILL_FIRE_RL_wci_ctl_op_complete = CAN_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_oneKHz_ruleDec
  assign CAN_FIRE_RL_oneKHz_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_oneKHz_ruleDec = 1'b0 ;

  // rule RL_oneKHz_ruleInc
  assign CAN_FIRE_RL_oneKHz_ruleInc = 1'b1 ;
  assign WILL_FIRE_RL_oneKHz_ruleInc = 1'b1 ;

  // rule RL_fcDac_gray_inc
  assign CAN_FIRE_RL_fcDac_gray_inc = 1'd1 ;
  assign WILL_FIRE_RL_fcDac_gray_inc = 1'd1 ;

  // rule RL_fcDac_grayCounter_synchronizer
  assign CAN_FIRE_RL_fcDac_grayCounter_synchronizer = 1'd1 ;
  assign WILL_FIRE_RL_fcDac_grayCounter_synchronizer = 1'd1 ;

  // rule RL_fcDac_grayCounter_wdCounterCrossing_clock_domain_crossing
  assign CAN_FIRE_RL_fcDac_grayCounter_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_fcDac_grayCounter_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;

  // rule RL_fcDac_grayCounter_do_decrement
  assign CAN_FIRE_RL_fcDac_grayCounter_do_decrement = 1'b0 ;
  assign WILL_FIRE_RL_fcDac_grayCounter_do_decrement = 1'b0 ;

  // rule RL_fcDac_grayCounter_do_increment
  assign CAN_FIRE_RL_fcDac_grayCounter_do_increment = 1'b1 ;
  assign WILL_FIRE_RL_fcDac_grayCounter_do_increment = 1'b1 ;

  // rule RL_fcDac_pulseAction__dreg_update
  assign CAN_FIRE_RL_fcDac_pulseAction__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fcDac_pulseAction__dreg_update = 1'd1 ;

  // rule RL_dacCore0_ramp_word
  assign CAN_FIRE_RL_dacCore0_ramp_word = !dacCore0_emit ;
  assign WILL_FIRE_RL_dacCore0_ramp_word = CAN_FIRE_RL_dacCore0_ramp_word ;

  // rule RL_dacCore0_dac_count
  assign CAN_FIRE_RL_dacCore0_dac_count = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_dac_count = 1'd1 ;

  // rule RL_dacCore0_dcmLck_to_cc
  assign CAN_FIRE_RL_dacCore0_dcmLck_to_cc = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_dcmLck_to_cc = 1'd1 ;

  // rule RL_dacCore0_iseqFsm_fsm_start
  assign CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start =
	     (dacCore0_iseqFsm_state_mkFSMstate == 4'd7 ||
	      dacCore0_iseqFsm_state_mkFSMstate == 4'd1 &&
	      !dacCore0_iseqFsm_state_standby) &&
	     dacCore0_iseqFsm_start_reg ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_fsm_start =
	     CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start ;

  // rule RL_dacCore0_donebit_to_cc
  assign CAN_FIRE_RL_dacCore0_donebit_to_cc = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_donebit_to_cc = 1'd1 ;

  // rule RL_dacCore0_iseqFsm_actionof_l100c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l100c13 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l100c13 ;

  // rule RL_dacCore0_iseqFsm_action_l100c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_action_l100c13 =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd1 &&
	     (CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start ||
	      dacCore0_iseqFsm_state_standby) ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_action_l100c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l100c13 ;

  // rule RL_dacCore0_iseqFsm_actionof_l101c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l101c13 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l101c13 ;

  // rule RL_dacCore0_iseqFsm_action_l101c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_action_l101c13 =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd2 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_action_l101c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l101c13 ;

  // rule RL_dacCore0_iseqFsm_actionof_l103c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l103c13 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l103c13 ;

  // rule RL_dacCore0_iseqFsm_actionof_l102c10
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l102c10 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l102c10 ;

  // rule RL_dacCore0_iseqFsm_action_l102c10
  assign CAN_FIRE_RL_dacCore0_iseqFsm_action_l102c10 =
	     dacCore0_ddrSDrv_dcmLock$WGET &&
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd3 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_action_l102c10 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l102c10 ;

  // rule RL_dacCore0_iseqFsm_action_l103c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_action_l103c13 =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd4 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_action_l103c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l103c13 ;

  // rule RL_dacCore0_iseqFsm_actionof_np
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_np =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd5 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np =
	     CAN_FIRE_RL_dacCore0_iseqFsm_actionof_np ;

  // rule RL_dacCore0_iseqFsm_actionof_np_1
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_np_1 =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd6 &&
	     dacCore0_iseqFsm_repeat_count != 13'd0 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np_1 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_actionof_np_1 ;

  // rule RL_dacCore0_iseqFsm_action_np
  assign CAN_FIRE_RL_dacCore0_iseqFsm_action_np =
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_action_np =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_np ;

  // rule RL_dacCore0_iseqFsm_actionof_l105c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l105c13 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l105c13 ;

  // rule RL_dacCore0_iseqFsm_action_l105c13
  assign CAN_FIRE_RL_dacCore0_iseqFsm_action_l105c13 =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd6 &&
	     dacCore0_iseqFsm_repeat_count == 13'd0 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_action_l105c13 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l105c13 ;

  // rule RL_dacCore0_iseqFsm_actionof_l99c15
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15 = 1'b0 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15 = 1'b0 ;

  // rule RL_dacCore0_iseqFsm_actionof_l99c15_2
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_2 = 1'b0 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_2 = 1'b0 ;

  // rule RL_dacCore0_iseqFsm_actionof_l99c15_1
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_1 = 1'b0 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_1 = 1'b0 ;

  // rule RL_dacCore0_iseqFsm_actionof_l99c15_3
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_3 = 1'b0 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_3 = 1'b0 ;

  // rule RL_dacCore0_iseqFsm_actionof_l99c15_4
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_4 = 1'b0 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_4 = 1'b0 ;

  // rule RL_dacCore0_iseqFsm_actionof_l99c15_5
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_5 =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd7 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_5 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_5 ;

  // rule RL_dacCore0_iseqFsm_actionof_l99c15_6
  assign CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_6 =
	     dacCore0_iseqFsm_state_mkFSMstate == 4'd1 &&
	     !CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start &&
	     !dacCore0_iseqFsm_state_standby ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_6 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_6 ;

  // rule RL_dacCore0_iseqFsm_action_l99c15
  assign CAN_FIRE_RL_dacCore0_iseqFsm_action_l99c15 =
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_6 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_5 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_action_l99c15 =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l99c15 ;

  // rule RL_dacCore0_iseqFsm_state_update_standby
  assign CAN_FIRE_RL_dacCore0_iseqFsm_state_update_standby =
	     dacCore0_iseqFsm_state_run_pw$whas ||
	     CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_state_update_standby =
	     CAN_FIRE_RL_dacCore0_iseqFsm_state_update_standby ;

  // rule RL_dacCore0_iseqFsm_start_reg__dreg_update
  assign CAN_FIRE_RL_dacCore0_iseqFsm_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_iseqFsm_start_reg__dreg_update = 1'd1 ;

  // rule RL_dacCore0_sdr_tone_adv
  assign CAN_FIRE_RL_dacCore0_sdr_tone_adv = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sdr_tone_adv = 1'd1 ;

  // rule RL_dacCore0_tone_to_sdr
  assign CAN_FIRE_RL_dacCore0_tone_to_sdr = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_tone_to_sdr = 1'd1 ;

  // rule RL_dacCore0_update_undcount
  assign CAN_FIRE_RL_dacCore0_update_undcount = dacCore0_undCountCC$sRDY ;
  assign WILL_FIRE_RL_dacCore0_update_undcount = dacCore0_undCountCC$sRDY ;

  // rule RL_dacCore0_update_emitcnt
  assign CAN_FIRE_RL_dacCore0_update_emitcnt = dacCore0_emitCntCC$sRDY ;
  assign WILL_FIRE_RL_dacCore0_update_emitcnt = dacCore0_emitCntCC$sRDY ;

  // rule RL_dacCore0_emit_to_sdr
  assign CAN_FIRE_RL_dacCore0_emit_to_sdr = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_emit_to_sdr = 1'd1 ;

  // rule RL_dacCore0_dacCtrl_s_clock_domain_crossing
  assign CAN_FIRE_RL_dacCore0_dacCtrl_s_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_dacCtrl_s_clock_domain_crossing = 1'd1 ;

  // rule RL_pass_control
  assign CAN_FIRE_RL_pass_control = 1'd1 ;
  assign WILL_FIRE_RL_pass_control = 1'd1 ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wci_reqF$EMPTY_N && wci_respF_c_r != 2'd2 &&
	     wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wci_ctl_op_start &&
	     !WILL_FIRE_RL_wci_ctl_op_complete ;

  // rule RL_wci_respF_both
  assign CAN_FIRE_RL_wci_respF_both =
	     ((wci_respF_c_r == 2'd1) ?
		wci_respF_x_wire$whas :
		wci_respF_c_r != 2'd2 || wci_respF_x_wire$whas) &&
	     wci_respF_c_r != 2'd0 &&
	     wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_respF_both = CAN_FIRE_RL_wci_respF_both ;

  // rule RL_wci_respF_decCtr
  assign CAN_FIRE_RL_wci_respF_decCtr =
	     wci_respF_c_r != 2'd0 && !wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_respF_decCtr = CAN_FIRE_RL_wci_respF_decCtr ;

  // rule RL_wci_respF_incCtr
  assign CAN_FIRE_RL_wci_respF_incCtr =
	     ((wci_respF_c_r == 2'd0) ?
		wci_respF_x_wire$whas :
		wci_respF_c_r != 2'd1 || wci_respF_x_wire$whas) &&
	     wci_respF_enqueueing$whas &&
	     !(wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wci_respF_incCtr = CAN_FIRE_RL_wci_respF_incCtr ;

  // rule RL_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wci_reqF__updateLevelCounter =
	     (wci_s_req[59:57] != 3'd0) != wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wci_reqF__updateLevelCounter ;

  // rule RL_dacCore0_sampF_portB_read_data
  assign CAN_FIRE_RL_dacCore0_sampF_portB_read_data = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sampF_portB_read_data = 1'd1 ;

  // rule RL_dacCore0_emit_word
  assign CAN_FIRE_RL_dacCore0_emit_word = dacCore0_emit ;
  assign WILL_FIRE_RL_dacCore0_emit_word = dacCore0_emit ;

  // rule RL_dacCore0_sdr_emit_adv
  assign CAN_FIRE_RL_dacCore0_sdr_emit_adv = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sdr_emit_adv = 1'd1 ;

  // rule RL_dacCore0_sampF_portB
  assign CAN_FIRE_RL_dacCore0_sampF_portB = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sampF_portB = 1'd1 ;

  // rule RL_dacCore0_sampF_portA
  assign CAN_FIRE_RL_dacCore0_sampF_portA = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sampF_portA = 1'd1 ;

  // rule RL_dacCore0_sampF_rRdPtr_synchronizer
  assign CAN_FIRE_RL_dacCore0_sampF_rRdPtr_synchronizer = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sampF_rRdPtr_synchronizer = 1'd1 ;

  // rule RL_dacCore0_sampF_rRdPtr_wdCounterCrossing_clock_domain_crossing
  assign CAN_FIRE_RL_dacCore0_sampF_rRdPtr_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sampF_rRdPtr_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;

  // rule RL_dacCore0_sampF_rRdPtr_do_decrement
  assign CAN_FIRE_RL_dacCore0_sampF_rRdPtr_do_decrement = 1'b0 ;
  assign WILL_FIRE_RL_dacCore0_sampF_rRdPtr_do_decrement = 1'b0 ;

  // rule RL_dacCore0_sampF_rRdPtr_do_increment
  assign CAN_FIRE_RL_dacCore0_sampF_rRdPtr_do_increment =
	     dacCore0_sampF_pwDequeue$whas ;
  assign WILL_FIRE_RL_dacCore0_sampF_rRdPtr_do_increment =
	     dacCore0_sampF_pwDequeue$whas ;

  // rule RL_dacCore0_sampF_rWrPtr_synchronizer
  assign CAN_FIRE_RL_dacCore0_sampF_rWrPtr_synchronizer = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sampF_rWrPtr_synchronizer = 1'd1 ;

  // rule RL_dacCore0_sampF_rWrPtr_wdCounterCrossing_clock_domain_crossing
  assign CAN_FIRE_RL_dacCore0_sampF_rWrPtr_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;
  assign WILL_FIRE_RL_dacCore0_sampF_rWrPtr_wdCounterCrossing_clock_domain_crossing =
	     1'd1 ;

  // rule RL_dacCore0_sampF_rWrPtr_do_decrement
  assign CAN_FIRE_RL_dacCore0_sampF_rWrPtr_do_decrement = 1'b0 ;
  assign WILL_FIRE_RL_dacCore0_sampF_rWrPtr_do_decrement = 1'b0 ;

  // rule RL_dacCore0_sampF_rWrPtr_do_increment
  assign CAN_FIRE_RL_dacCore0_sampF_rWrPtr_do_increment =
	     dacCore0_sampF_pwEnqueue$whas ;
  assign WILL_FIRE_RL_dacCore0_sampF_rWrPtr_do_increment =
	     dacCore0_sampF_pwEnqueue$whas ;

  // rule RL_dacCore0_ddrSDrv_dcmLock_clock_domain_crossing
  assign CAN_FIRE_RL_dacCore0_ddrSDrv_dcmLock_clock_domain_crossing = 1'd1 ;
  assign WILL_FIRE_RL_dacCore0_ddrSDrv_dcmLock_clock_domain_crossing = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ;
  assign MUX_wci_illegalEdge$write_1__VAL_2 =
	     wci_reqF$D_OUT[36:34] != 3'd4 && wci_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_respF_c_r$write_1__VAL_1 = wci_respF_c_r - 2'd1 ;
  assign MUX_wci_respF_c_r$write_1__VAL_2 = wci_respF_c_r + 2'd1 ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_1 =
	     wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState != 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 && wci_cState != 3'd1 &&
	      wci_cState != 3'd3 ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState != 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 && wci_cState != 3'd3 &&
	      wci_cState != 3'd2 &&
	      wci_cState != 3'd1 ||
	      wci_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ;
  assign MUX_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 =
	     wsiS_reqFifo$EMPTY_N && stageF$FULL_N && wci_cState == 3'd2 &&
	     opcode[8] ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign MUX_wci_respF_x_wire$wset_1__VAL_2 = { 2'd1, _theResult____h78955 } ;
  always@(WILL_FIRE_RL_wci_ctl_op_complete or
	  MUX_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_ctl_op_complete:
	  MUX_wci_respF_q_0$write_1__VAL_2 =
	      MUX_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wci_respF_q_0$write_1__VAL_2 =
	      MUX_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr: MUX_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_respF_q_0$write_1__VAL_1 =
	     (wci_respF_c_r == 2'd1) ?
	       MUX_wci_respF_q_0$write_1__VAL_2 :
	       wci_respF_q_1 ;
  assign MUX_wci_respF_q_1$write_1__VAL_1 =
	     (wci_respF_c_r == 2'd2) ?
	       MUX_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_opcode$write_1__SEL_1 =
	     WILL_FIRE_RL_emit_mesgConsume && wsiS_reqFifo$D_OUT[57] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr0_1__VAL_1 =
	     dacCore0_tone ? 12'd3902 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr0_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[11:0] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr1_1__VAL_1 =
	     dacCore0_tone ? 12'd3467 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr1_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[23:12] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr2_1__VAL_1 =
	     dacCore0_tone ? 12'd2816 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr3_1__VAL_1 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[47:36] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr2_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[35:24] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr4_1__VAL_1 =
	     dacCore0_tone ? 12'd1280 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr4_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[59:48] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr5_1__VAL_1 =
	     dacCore0_tone ? 12'd629 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr5_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[71:60] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr6_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[83:72] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr6_1__VAL_1 =
	     dacCore0_tone ? 12'd194 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr7_1__VAL_1 =
	     dacCore0_tone ? 12'd41 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr7_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[95:84] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr8_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[107:96] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdr9_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[119:108] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdrA_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[131:120] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdrB_1__VAL_1 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[143:132] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdrC_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[155:144] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdrE_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[179:168] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdrD_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[167:156] ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdrF_1__VAL_1 =
	     dacCore0_tone ? 12'd4055 : 12'd2048 ;
  assign MUX_dacCore0_ddrSDrv_ddrV$sdrF_1__VAL_2 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ?
	       12'd2048 :
	       dacCore0_sampF_memory$DOB[191:180] ;
  assign MUX_dacCore0_sampF_rRdPtr_rsCounter$write_1__VAL_2 =
	     (~dacCore0_sampF_rRdPtr_rsCounter[x__h33820[3:0]]) ?
	       dacCore0_sampF_rRdPtr_rsCounter | x__h26973 :
	       dacCore0_sampF_rRdPtr_rsCounter & y__h33851 ;
  assign MUX_dacCore0_sampF_rWrPtr_rsCounter$write_1__VAL_2 =
	     (~dacCore0_sampF_rWrPtr_rsCounter[x__h19583[3:0]]) ?
	       dacCore0_sampF_rWrPtr_rsCounter | x__h12736 :
	       dacCore0_sampF_rWrPtr_rsCounter & y__h19614 ;
  assign MUX_fcDac_grayCounter_rsCounter$write_1__VAL_2 =
	     (~fcDac_grayCounter_rsCounter[x__h72733[3:0]]) ?
	       fcDac_grayCounter_rsCounter | x__h71709 :
	       fcDac_grayCounter_rsCounter & y__h72769 ;
  assign MUX_oneKHz_value$write_1__VAL_2 =
	     (oneKHz_value == 18'd124999) ? 18'd0 : oneKHz_value + 18'd1 ;
  assign MUX_opcode$write_1__VAL_2 = { 1'd1, wsiS_reqFifo$D_OUT[7:0] } ;

  // inlined wires
  assign wci_wciReq$wget = wci_s_req ;
  assign wci_wciReq$whas = 1'd1 ;
  assign wci_reqF_r_enq$whas = CAN_FIRE_RL_wci_reqF_enq ;
  assign wci_reqF_r_clr$whas = 1'b0 ;
  assign wci_respF_dequeueing$whas = wci_respF_c_r != 2'd0 ;
  assign wci_wEdge$wget = wci_reqF$D_OUT[36:34] ;
  assign wci_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_sFlagReg_1$wget = 1'd1 ;
  assign wci_sFlagReg_1$whas = sFlagState ;
  assign wci_wci_cfwr_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[56] &&
	     wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign wci_wci_cfrd_pw$whas =
	     wci_reqF$EMPTY_N && wci_reqF$D_OUT[56] &&
	     wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign wci_wci_ctrl_pw$whas =
	     wci_reqF$EMPTY_N && !wci_reqF$D_OUT[56] &&
	     wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_ctl_op_start ;
  assign wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_ctl_op_complete ;
  assign wci_respF_x_wire$whas =
	     WILL_FIRE_RL_wci_ctl_op_complete || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wEdge$whas = WILL_FIRE_RL_wci_ctl_op_start ;
  assign wsiS_wsiReq$wget =
	     { wsiS1_MCmd,
	       wsiS1_MReqLast,
	       wsiS1_MBurstPrecise,
	       wsiS1_MBurstLength,
	       wsiS1_MData,
	       wsiS1_MByteEn,
	       wsiS1_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_reqFifo_r_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_r_deq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo_doResetDeq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign wsiS_operateD_1$whas = CAN_FIRE_RL_operating_actions ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_sThreadBusy_dw$whas = CAN_FIRE_RL_wsiS_backpressure ;
  assign wsiS_peerIsReady_1$whas = wsiS1_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;
  assign wsi_Es_mCmd_w$wget = wsiS1_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mReqLast_w$whas = wsiS1_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsiS1_MBurstPrecise ;
  assign wsi_Es_mBurstLength_w$wget = wsiS1_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsiS1_MData ;
  assign wsi_Es_mByteEn_w$wget = wsiS1_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsiS1_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wci_respF_x_wire$wget = MUX_wci_respF_q_0$write_1__VAL_2 ;
  assign wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_init_complete_ok || WILL_FIRE_RL_wci_ctrl_OrE ||
	     WILL_FIRE_RL_wci_ctrl_IsO ;
  assign wti_wtiReq$whas = 1'b0 ;
  assign wti_wtiReq$wget = 67'h0 ;
  assign dacCore0_sampF_rWrPtr_pwDecrement$whas = 1'b0 ;
  assign dacCore0_sampF_rRdPtr_pwDecrement$whas = 1'b0 ;
  assign dacCore0_sampF_pwDequeue$whas =
	     dacCore0_emit &&
	     !dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ;
  assign dacCore0_sampF_rRdPtr_pwIncrement$whas =
	     dacCore0_sampF_pwDequeue$whas ;
  assign dacCore0_sampF_pwEnqueue$whas =
	     WILL_FIRE_RL_process_staged_data &&
	     (dacControl[5] || srcCnt == 2'h3) ;
  assign dacCore0_sampF_rWrPtr_pwIncrement$whas =
	     dacCore0_sampF_pwEnqueue$whas ;
  assign dacCore0_sampF_wDataIn$wget =
	     dacControl[5] ?
	       (takeEven ?
		  {16{stageF$D_OUT[15:4]}} :
		  {16{stageF$D_OUT[31:20]}}) :
	       { rf_15,
		 rf_14,
		 rf_13,
		 rf_12,
		 rf_11,
		 rf_10,
		 rf_9,
		 rf_8,
		 rf_7,
		 rf_6,
		 rf_5,
		 rf_4,
		 rf_3,
		 rf_2,
		 rf_1,
		 rf } ;
  assign dacCore0_sampF_wDataOut$wget = dacCore0_sampF_memory$DOB ;
  assign dacCore0_sampF_wDataIn$whas = dacCore0_sampF_pwEnqueue$whas ;
  assign dacCore0_sampF_wDataOut$whas = 1'd1 ;
  assign dacCore0_emitEn_pw$whas = CAN_FIRE_RL_doEmit ;
  assign dacCore0_toneEn_pw$whas = CAN_FIRE_RL_doTone ;
  assign dacCore0_iseqFsm_start_reg_1$wget = 1'b0 ;
  assign dacCore0_iseqFsm_start_reg_1$whas = 1'b0 ;
  assign dacCore0_iseqFsm_start_wire$wget = 1'd1 ;
  assign dacCore0_iseqFsm_abort$whas = 1'b0 ;
  assign dacCore0_iseqFsm_start_wire$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start ;
  assign dacCore0_iseqFsm_state_run_pw$whas =
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13 ;
  assign dacCore0_iseqFsm_abort$wget = 1'b0 ;
  assign dacCore0_iseqFsm_state_start_pw$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_fsm_start ;
  assign dacCore0_iseqFsm_pw_list$whas = 1'b0 ;
  assign dacCore0_iseqFsm_pw_list_1$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l99c15 ;
  assign dacCore0_iseqFsm_pw_list_2$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l100c13 ;
  assign dacCore0_iseqFsm_pw_list_3$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l101c13 ;
  assign dacCore0_iseqFsm_pw_list_4$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l102c10 ;
  assign dacCore0_iseqFsm_pw_list_6$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_np ;
  assign dacCore0_iseqFsm_pw_list_5$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l103c13 ;
  assign dacCore0_iseqFsm_pw_list_7$whas =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_l105c13 ;
  assign dacCore0_iseqFsm_pw_list_8$whas = 1'b0 ;
  assign fcDac_pulseAction_1$wget = 1'd1 ;
  assign fcDac_pulseAction_1$whas = CAN_FIRE_RL_send_pulse ;
  assign fcDac_grayCounter_pwIncrement$whas = 1'd1 ;
  assign oneKHz_incAction$whas = 1'd1 ;
  assign fcDac_grayCounter_pwDecrement$whas = 1'b0 ;
  assign oneKHz_decAction$whas = 1'b0 ;

  // register dacControl
  assign dacControl$D_IN = wci_reqF$D_OUT[31:0] ;
  assign dacControl$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_reqF$D_OUT[43:42] == 2'b0 &&
	     wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dacCore0_calBit
  assign dacCore0_calBit$D_IN =
	     !WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13 ;
  assign dacCore0_calBit$EN =
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13 ;

  // register dacCore0_dacCount
  assign dacCore0_dacCount$D_IN = dacCore0_dacCount + 8'd1 ;
  assign dacCore0_dacCount$EN = 1'd1 ;

  // register dacCore0_dacCtrl_w
  assign dacCore0_dacCtrl_w$D_IN = dacControl[3:0] ;
  assign dacCore0_dacCtrl_w$EN = 1'd1 ;

  // register dacCore0_emit
  assign dacCore0_emit$D_IN = dacCore0_emitEn_d$dD_OUT ;
  assign dacCore0_emit$EN = 1'd1 ;

  // register dacCore0_emitCnt
  assign dacCore0_emitCnt$D_IN = dacCore0_emitCnt + 32'd1 ;
  assign dacCore0_emitCnt$EN = dacCore0_sampF_pwDequeue$whas ;

  // register dacCore0_emitD
  assign dacCore0_emitD$D_IN = dacCore0_emit ;
  assign dacCore0_emitD$EN = 1'd1 ;

  // register dacCore0_iseqFsm_repeat_count
  assign dacCore0_iseqFsm_repeat_count$D_IN =
	     (dacCore0_iseqFsm_repeat_count == 13'd4095) ? 13'd0 : x__h59790 ;
  assign dacCore0_iseqFsm_repeat_count$EN =
	     CAN_FIRE_RL_dacCore0_iseqFsm_action_np ;

  // register dacCore0_iseqFsm_start_reg
  assign dacCore0_iseqFsm_start_reg$D_IN = 1'b0 ;
  assign dacCore0_iseqFsm_start_reg$EN = 1'd1 ;

  // register dacCore0_iseqFsm_state_mkFSMstate
  always@(CAN_FIRE_RL_dacCore0_iseqFsm_action_l99c15 or
	  WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13 or
	  WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13 or
	  WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10 or
	  WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13 or
	  CAN_FIRE_RL_dacCore0_iseqFsm_action_np or
	  WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13)
  begin
    case (1'b1) // synopsys parallel_case
      CAN_FIRE_RL_dacCore0_iseqFsm_action_l99c15:
	  dacCore0_iseqFsm_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13:
	  dacCore0_iseqFsm_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13:
	  dacCore0_iseqFsm_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10:
	  dacCore0_iseqFsm_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13:
	  dacCore0_iseqFsm_state_mkFSMstate$D_IN = 4'd5;
      CAN_FIRE_RL_dacCore0_iseqFsm_action_np:
	  dacCore0_iseqFsm_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13:
	  dacCore0_iseqFsm_state_mkFSMstate$D_IN = 4'd7;
      default: dacCore0_iseqFsm_state_mkFSMstate$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign dacCore0_iseqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_6 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l99c15_5 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l101c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l102c10 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l103c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np_1 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_np ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13 ;

  // register dacCore0_iseqFsm_state_standby
  assign dacCore0_iseqFsm_state_standby$D_IN =
	     !dacCore0_iseqFsm_state_run_pw$whas ;
  assign dacCore0_iseqFsm_state_standby$EN =
	     CAN_FIRE_RL_dacCore0_iseqFsm_state_update_standby ;

  // register dacCore0_muteDAC
  assign dacCore0_muteDAC$D_IN =
	     !WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13 ;
  assign dacCore0_muteDAC$EN =
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l105c13 ||
	     WILL_FIRE_RL_dacCore0_iseqFsm_actionof_l100c13 ;

  // register dacCore0_sampF_rRdPtr_rdCounter
  assign dacCore0_sampF_rRdPtr_rdCounter$D_IN =
	     dacCore0_sampF_rRdPtr_rdCounterPre ;
  assign dacCore0_sampF_rRdPtr_rdCounter$EN = 1'd1 ;

  // register dacCore0_sampF_rRdPtr_rdCounterPre
  assign dacCore0_sampF_rRdPtr_rdCounterPre$D_IN =
	     dacCore0_sampF_rRdPtr_wdCounterCrossing$WGET ;
  assign dacCore0_sampF_rRdPtr_rdCounterPre$EN = 1'd1 ;

  // register dacCore0_sampF_rRdPtr_rsCounter
  assign dacCore0_sampF_rRdPtr_rsCounter$D_IN =
	     MUX_dacCore0_sampF_rRdPtr_rsCounter$write_1__VAL_2 ;
  assign dacCore0_sampF_rRdPtr_rsCounter$EN = dacCore0_sampF_pwDequeue$whas ;

  // register dacCore0_sampF_rWrPtr_rdCounter
  assign dacCore0_sampF_rWrPtr_rdCounter$D_IN =
	     dacCore0_sampF_rWrPtr_rdCounterPre ;
  assign dacCore0_sampF_rWrPtr_rdCounter$EN = 1'd1 ;

  // register dacCore0_sampF_rWrPtr_rdCounterPre
  assign dacCore0_sampF_rWrPtr_rdCounterPre$D_IN =
	     dacCore0_sampF_rWrPtr_wdCounterCrossing$WGET ;
  assign dacCore0_sampF_rWrPtr_rdCounterPre$EN = 1'd1 ;

  // register dacCore0_sampF_rWrPtr_rsCounter
  assign dacCore0_sampF_rWrPtr_rsCounter$D_IN =
	     MUX_dacCore0_sampF_rWrPtr_rsCounter$write_1__VAL_2 ;
  assign dacCore0_sampF_rWrPtr_rsCounter$EN = dacCore0_sampF_pwEnqueue$whas ;

  // register dacCore0_syncMute
  assign dacCore0_syncMute$D_IN = 1'b0 ;
  assign dacCore0_syncMute$EN = 1'b0 ;

  // register dacCore0_syncOut
  assign dacCore0_syncOut$D_IN = dacCore0_dacCount == 8'd0 ;
  assign dacCore0_syncOut$EN = 1'd1 ;

  // register dacCore0_tone
  assign dacCore0_tone$D_IN = dacCore0_toneEn_d$dD_OUT ;
  assign dacCore0_tone$EN = 1'd1 ;

  // register dacCore0_undCount
  assign dacCore0_undCount$D_IN = dacCore0_undCount + 32'd1 ;
  assign dacCore0_undCount$EN =
	     dacCore0_emit &&
	     dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 ;

  // register fcDac_countNow
  assign fcDac_countNow$D_IN =
	     { fcDac_grayCounter_rdCounter[15],
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1016,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1038,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1017,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1037,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1040,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1028,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1036,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1018,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1035,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1019,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1020,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1023,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1022,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1021,
	       fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1021 ^
	       fcDac_grayCounter_rdCounter[0] } ;
  assign fcDac_countNow$EN = fcDac_pulseAction ;

  // register fcDac_countPast
  assign fcDac_countPast$D_IN = fcDac_countNow ;
  assign fcDac_countPast$EN = fcDac_pulseAction ;

  // register fcDac_frequency
  assign fcDac_frequency$D_IN = fcDac_countNow - fcDac_countPast ;
  assign fcDac_frequency$EN = fcDac_pulseAction ;

  // register fcDac_grayCounter_rdCounter
  assign fcDac_grayCounter_rdCounter$D_IN = fcDac_grayCounter_rdCounterPre ;
  assign fcDac_grayCounter_rdCounter$EN = 1'd1 ;

  // register fcDac_grayCounter_rdCounterPre
  assign fcDac_grayCounter_rdCounterPre$D_IN =
	     fcDac_grayCounter_wdCounterCrossing$WGET ;
  assign fcDac_grayCounter_rdCounterPre$EN = 1'd1 ;

  // register fcDac_grayCounter_rsCounter
  assign fcDac_grayCounter_rsCounter$D_IN =
	     MUX_fcDac_grayCounter_rsCounter$write_1__VAL_2 ;
  assign fcDac_grayCounter_rsCounter$EN = 1'b1 ;

  // register fcDac_pulseAction
  assign fcDac_pulseAction$D_IN = CAN_FIRE_RL_send_pulse ;
  assign fcDac_pulseAction$EN = 1'd1 ;

  // register fcDac_sampleCount
  assign fcDac_sampleCount$D_IN = fcDac_sampleCount + 16'd1 ;
  assign fcDac_sampleCount$EN = fcDac_pulseAction ;

  // register firstUnderflowMesg
  assign firstUnderflowMesg$D_IN = mesgStart ;
  assign firstUnderflowMesg$EN = CAN_FIRE_RL_capture_underflow ;

  // register hasUnderflowed
  assign hasUnderflowed$D_IN = 1'd1 ;
  assign hasUnderflowed$EN = CAN_FIRE_RL_capture_underflow ;

  // register initOpInFlight
  assign initOpInFlight$D_IN = WILL_FIRE_RL_wci_ctrl_EiI ;
  assign initOpInFlight$EN =
	     WILL_FIRE_RL_init_complete_ok || WILL_FIRE_RL_wci_ctrl_EiI ;

  // register mesgStart
  assign mesgStart$D_IN = mesgStart + 32'd1 ;
  assign mesgStart$EN = CAN_FIRE_RL_emit_mesgBegin ;

  // register oneKHz_value
  assign oneKHz_value$D_IN = MUX_oneKHz_value$write_1__VAL_2 ;
  assign oneKHz_value$EN = 1'b1 ;

  // register opcode
  assign opcode$D_IN =
	     MUX_opcode$write_1__SEL_1 ? 9'd170 : MUX_opcode$write_1__VAL_2 ;
  assign opcode$EN =
	     WILL_FIRE_RL_emit_mesgConsume && wsiS_reqFifo$D_OUT[57] ||
	     WILL_FIRE_RL_emit_mesgBegin ;

  // register rf
  assign rf$D_IN = stageF$D_OUT[15:4] ;
  assign rf$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h0 ;

  // register rf_1
  assign rf_1$D_IN = stageF$D_OUT[15:4] ;
  assign rf_1$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h0 ;

  // register rf_10
  assign rf_10$D_IN = stageF$D_OUT[31:20] ;
  assign rf_10$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h2 ;

  // register rf_11
  assign rf_11$D_IN = stageF$D_OUT[31:20] ;
  assign rf_11$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h2 ;

  // register rf_12
  assign rf_12$D_IN = stageF$D_OUT[15:4] ;
  assign rf_12$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h3 ;

  // register rf_13
  assign rf_13$D_IN = stageF$D_OUT[15:4] ;
  assign rf_13$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h3 ;

  // register rf_14
  assign rf_14$D_IN = stageF$D_OUT[31:20] ;
  assign rf_14$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h3 ;

  // register rf_15
  assign rf_15$D_IN = stageF$D_OUT[31:20] ;
  assign rf_15$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h3 ;

  // register rf_2
  assign rf_2$D_IN = stageF$D_OUT[31:20] ;
  assign rf_2$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h0 ;

  // register rf_3
  assign rf_3$D_IN = stageF$D_OUT[31:20] ;
  assign rf_3$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h0 ;

  // register rf_4
  assign rf_4$D_IN = stageF$D_OUT[15:4] ;
  assign rf_4$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h1 ;

  // register rf_5
  assign rf_5$D_IN = stageF$D_OUT[15:4] ;
  assign rf_5$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h1 ;

  // register rf_6
  assign rf_6$D_IN = stageF$D_OUT[31:20] ;
  assign rf_6$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h1 ;

  // register rf_7
  assign rf_7$D_IN = stageF$D_OUT[31:20] ;
  assign rf_7$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h1 ;

  // register rf_8
  assign rf_8$D_IN = stageF$D_OUT[15:4] ;
  assign rf_8$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h2 ;

  // register rf_9
  assign rf_9$D_IN = stageF$D_OUT[15:4] ;
  assign rf_9$EN =
	     WILL_FIRE_RL_process_staged_data && !dacControl[5] &&
	     srcCnt == 2'h2 ;

  // register sFlagState
  assign sFlagState$EN = 1'b0 ;
  assign sFlagState$D_IN = 1'b0 ;

  // register splitReadInFlight
  assign splitReadInFlight$D_IN = 1'b0 ;
  assign splitReadInFlight$EN = 1'b0 ;

  // register srcCnt
  assign srcCnt$D_IN = srcCnt + 2'd1 ;
  assign srcCnt$EN = WILL_FIRE_RL_process_staged_data && !dacControl[5] ;

  // register stageCount
  assign stageCount$D_IN = stageCount + 32'd1 ;
  assign stageCount$EN = dacCore0_sampF_pwEnqueue$whas ;

  // register syncCount
  assign syncCount$D_IN = 32'h0 ;
  assign syncCount$EN = 1'b0 ;

  // register takeEven
  assign takeEven$D_IN = !takeEven ;
  assign takeEven$EN = WILL_FIRE_RL_process_staged_data && dacControl[5] ;

  // register wci_cEdge
  assign wci_cEdge$D_IN = wci_reqF$D_OUT[36:34] ;
  assign wci_cEdge$EN = WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_cState
  assign wci_cState$D_IN = wci_nState ;
  assign wci_cState$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge ;

  // register wci_ctlAckReg
  assign wci_ctlAckReg$EN = 1'd1 ;
  assign wci_ctlAckReg$D_IN = wci_ctlAckReg_1$whas ;

  // register wci_ctlOpActive
  assign wci_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_ctl_op_complete ;
  assign wci_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete ||
	     WILL_FIRE_RL_wci_ctl_op_start ;

  // register wci_illegalEdge
  assign wci_illegalEdge$D_IN =
	     !MUX_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_illegalEdge$write_1__VAL_2 ;
  assign wci_illegalEdge$EN =
	     WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge ||
	     MUX_wci_illegalEdge$write_1__SEL_2 ;

  // register wci_nState
  always@(wci_reqF$D_OUT)
  begin
    case (wci_reqF$D_OUT[36:34])
      3'd0: wci_nState$D_IN = 3'd1;
      3'd1: wci_nState$D_IN = 3'd2;
      3'd2: wci_nState$D_IN = 3'd3;
      default: wci_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_nState$EN =
	     WILL_FIRE_RL_wci_ctl_op_start &&
	     (wci_reqF$D_OUT[36:34] == 3'd0 && wci_cState == 3'd0 ||
	      wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_cState == 3'd1 || wci_cState == 3'd3) ||
	      wci_reqF$D_OUT[36:34] == 3'd2 && wci_cState == 3'd2 ||
	      wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_cState == 3'd3 || wci_cState == 3'd2 ||
	       wci_cState == 3'd1)) ;

  // register wci_reqF_countReg
  assign wci_reqF_countReg$D_IN =
	     (wci_s_req[59:57] != 3'd0) ?
	       wci_reqF_countReg + 2'd1 :
	       wci_reqF_countReg - 2'd1 ;
  assign wci_reqF_countReg$EN = CAN_FIRE_RL_wci_reqF__updateLevelCounter ;

  // register wci_respF_c_r
  assign wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_respF_decCtr ?
	       MUX_wci_respF_c_r$write_1__VAL_1 :
	       MUX_wci_respF_c_r$write_1__VAL_2 ;
  assign wci_respF_c_r$EN =
	     WILL_FIRE_RL_wci_respF_decCtr || WILL_FIRE_RL_wci_respF_incCtr ;

  // register wci_respF_q_0
  assign wci_respF_q_0$EN =
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_respF_decCtr ;
  always@(WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_0$write_1__VAL_1 or
	  MUX_wci_respF_q_0$write_1__SEL_2 or
	  MUX_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_respF_decCtr or wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_1;
      MUX_wci_respF_q_0$write_1__SEL_2:
	  wci_respF_q_0$D_IN = MUX_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_0$D_IN = wci_respF_q_1;
      default: wci_respF_q_0$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register wci_respF_q_1
  assign wci_respF_q_1$EN =
	     WILL_FIRE_RL_wci_respF_both ||
	     WILL_FIRE_RL_wci_respF_incCtr && wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_respF_decCtr ;
  always@(WILL_FIRE_RL_wci_respF_both or
	  MUX_wci_respF_q_1$write_1__VAL_1 or
	  MUX_wci_respF_q_1$write_1__SEL_2 or
	  MUX_wci_respF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_respF_both:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_1$write_1__VAL_1;
      MUX_wci_respF_q_1$write_1__SEL_2:
	  wci_respF_q_1$D_IN = MUX_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_respF_decCtr: wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_respF_q_1$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register wci_sFlagReg
  assign wci_sFlagReg$D_IN = sFlagState ;
  assign wci_sFlagReg$EN = 1'd1 ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wordsConsumed
  assign wordsConsumed$D_IN = wordsConsumed + 8'd1 ;
  assign wordsConsumed$EN =
	     WILL_FIRE_RL_emit_mesgConsume && wordsConsumed != 8'd255 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__12_AND_wsiS_burstKind_92_ETC___d331 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = CAN_FIRE_RL_operating_actions ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS1_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_emit_mesgConsume ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset$VAL,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register wti_nowReq
  assign wti_nowReq$D_IN = wti_s_req ;
  assign wti_nowReq$EN = 1'd1 ;

  // submodule dacCore0_dacCtrl_s
  assign dacCore0_dacCtrl_s$WVAL = dacCore0_dacCtrl_w ;

  // submodule dacCore0_dcmLck_cc
  assign dacCore0_dcmLck_cc$sD_IN = dacCore0_ddrSDrv_dcmLock$WGET ;
  assign dacCore0_dcmLck_cc$sEN = 1'd1 ;

  // submodule dacCore0_ddrSDrv_dcmLock
  assign dacCore0_ddrSDrv_dcmLock$WVAL = dacCore0_ddrSDrv_ddrV$dcmLocked ;

  // submodule dacCore0_ddrSDrv_ddrV
  assign dacCore0_ddrSDrv_ddrV$sdrData0 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr0_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr0_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData1 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr1_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr1_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData2 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr2_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr2_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData3 =
	     dacCore0_emit ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr3_1__VAL_1 :
	       12'd2048 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData5 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr5_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr5_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData4 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr4_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr4_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData6 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr6_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr6_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData7 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr7_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr7_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData8 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr6_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr8_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrData9 =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr5_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdr9_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrDataA =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr4_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdrA_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrDataC =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr2_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdrC_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrDataB =
	     dacCore0_emit ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdrB_1__VAL_1 :
	       12'd2048 ;
  assign dacCore0_ddrSDrv_ddrV$sdrDataD =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr1_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdrD_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrDataE =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdr0_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdrE_1__VAL_2 ;
  assign dacCore0_ddrSDrv_ddrV$sdrDataF =
	     WILL_FIRE_RL_dacCore0_ramp_word ?
	       MUX_dacCore0_ddrSDrv_ddrV$sdrF_1__VAL_1 :
	       MUX_dacCore0_ddrSDrv_ddrV$sdrF_1__VAL_2 ;

  // submodule dacCore0_emitCntCC
  assign dacCore0_emitCntCC$sD_IN = dacCore0_emitCnt ;
  assign dacCore0_emitCntCC$sEN = dacCore0_emitCntCC$sRDY ;

  // submodule dacCore0_emitEn_d
  assign dacCore0_emitEn_d$sD_IN = CAN_FIRE_RL_doEmit ;
  assign dacCore0_emitEn_d$sEN = 1'd1 ;

  // submodule dacCore0_iSeqDone
  assign dacCore0_iSeqDone$sD_IN =
	     (dacCore0_iseqFsm_state_mkFSMstate == 4'd7 ||
	      dacCore0_iseqFsm_state_mkFSMstate == 4'd1 &&
	      !dacCore0_iseqFsm_state_standby) &&
	     !dacCore0_iseqFsm_start_reg ;
  assign dacCore0_iSeqDone$sEN = 1'd1 ;

  // submodule dacCore0_sampF_memory
  assign dacCore0_sampF_memory$WEA = dacCore0_sampF_pwEnqueue$whas ;
  assign dacCore0_sampF_memory$ADDRA =
	     { dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1010,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1011,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1012,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1013,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1030,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1014,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1015,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1039,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1029,
	       dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1029 ^
	       dacCore0_sampF_rWrPtr_rsCounter[0] } ;
  assign dacCore0_sampF_memory$DIA =
	     dacCore0_sampF_pwEnqueue$whas ?
	       dacCore0_sampF_wDataIn$wget :
	       192'd0 ;
  assign dacCore0_sampF_memory$WEB = 1'd0 ;
  assign dacCore0_sampF_memory$DIB =
	     192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign dacCore0_sampF_memory$ADDRB =
	     dacCore0_sampF_pwDequeue$whas ? x__h36747[9:0] : x2__h36710 ;
  assign dacCore0_sampF_memory$ENA = 1'd1 ;
  assign dacCore0_sampF_memory$ENB = 1'd1 ;

  // submodule dacCore0_sampF_rRdPtr_wdCounterCrossing
  assign dacCore0_sampF_rRdPtr_wdCounterCrossing$WVAL =
	     dacCore0_sampF_rRdPtr_rsCounter ;

  // submodule dacCore0_sampF_rWrPtr_wdCounterCrossing
  assign dacCore0_sampF_rWrPtr_wdCounterCrossing$WVAL =
	     dacCore0_sampF_rWrPtr_rsCounter ;

  // submodule dacCore0_startIseqF
  assign dacCore0_startIseqF$sD_IN = 1'b0 ;
  assign dacCore0_startIseqF$sENQ = CAN_FIRE_RL_wci_ctrl_EiI ;
  assign dacCore0_startIseqF$dDEQ = 1'b0 ;

  // submodule dacCore0_syncMute_obuf
  assign dacCore0_syncMute_obuf$I = dacCore0_syncMute ;

  // submodule dacCore0_syncOut_obuf
  assign dacCore0_syncOut_obuf$I = dacCore0_syncOut ;

  // submodule dacCore0_toneEn_d
  assign dacCore0_toneEn_d$sD_IN = CAN_FIRE_RL_doTone ;
  assign dacCore0_toneEn_d$sEN = 1'd1 ;

  // submodule dacCore0_undCountCC
  assign dacCore0_undCountCC$sD_IN = dacCore0_undCount ;
  assign dacCore0_undCountCC$sEN = dacCore0_undCountCC$sRDY ;

  // submodule fcDac_grayCounter_wdCounterCrossing
  assign fcDac_grayCounter_wdCounterCrossing$WVAL =
	     fcDac_grayCounter_rsCounter ;

  // submodule stageF
  assign stageF$D_IN =
	     dacControl[6] ? result__h87501 : wsiS_reqFifo$D_OUT[43:12] ;
  assign stageF$DEQ =
	     WILL_FIRE_RL_process_staged_data &&
	     (!takeEven || !dacControl[5]) ;
  assign stageF$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign stageF$CLR = 1'b0 ;

  // submodule wci_reqF
  assign wci_reqF$D_IN = wci_s_req ;
  assign wci_reqF$DEQ = wci_reqF_r_deq$whas ;
  assign wci_reqF$ENQ = CAN_FIRE_RL_wci_reqF_enq ;
  assign wci_reqF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$DEQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_2 ;
  assign wsiS_reqFifo$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_0_90_ETC___d1125 =
	     (dacCore0_sampF_rRdPtr_rsCounter[0] ||
	      dacCore0_sampF_rRdPtr_rsCounter[1] ||
	      dacCore0_sampF_rRdPtr_rsCounter[2] ||
	      dacCore0_sampF_rRdPtr_rsCounter[3] ||
	      dacCore0_sampF_rRdPtr_rsCounter[4] ||
	      dacCore0_sampF_rRdPtr_rsCounter[5] ||
	      dacCore0_sampF_rRdPtr_rsCounter[6] ||
	      dacCore0_sampF_rRdPtr_rsCounter[7] ||
	      dacCore0_sampF_rRdPtr_rsCounter[8] ||
	      dacCore0_sampF_rRdPtr_rsCounter[9]) ?
	       (dacCore0_sampF_rRdPtr_rsCounter[0] ?
		  32'd1 :
		  (dacCore0_sampF_rRdPtr_rsCounter[1] ?
		     32'd2 :
		     (dacCore0_sampF_rRdPtr_rsCounter[2] ?
			32'd3 :
			(dacCore0_sampF_rRdPtr_rsCounter[3] ?
			   32'd4 :
			   (dacCore0_sampF_rRdPtr_rsCounter[4] ?
			      32'd5 :
			      (dacCore0_sampF_rRdPtr_rsCounter[5] ?
				 32'd6 :
				 (dacCore0_sampF_rRdPtr_rsCounter[6] ?
				    32'd7 :
				    (dacCore0_sampF_rRdPtr_rsCounter[7] ?
				       32'd8 :
				       (dacCore0_sampF_rRdPtr_rsCounter[8] ?
					  32'd9 :
					  (dacCore0_sampF_rRdPtr_rsCounter[9] ?
					     32'd10 :
					     (dacCore0_sampF_rRdPtr_rsCounter[10] ?
						32'd11 :
						32'd12))))))))))) :
	       32'd10 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_1_88_ETC___d1142 =
	     dacCore0_sampF_rRdPtr_rsCounter[1] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1141 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1140 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_1_88_ETC___d1166 =
	     dacCore0_sampF_rRdPtr_rsCounter[1] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1140 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1141 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1140 =
	     dacCore0_sampF_rRdPtr_rsCounter[2] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1138 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1139 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_2_85_ETC___d1141 =
	     dacCore0_sampF_rRdPtr_rsCounter[2] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1139 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1138 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1138 =
	     dacCore0_sampF_rRdPtr_rsCounter[3] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1136 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1137 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_3_83_ETC___d1139 =
	     dacCore0_sampF_rRdPtr_rsCounter[3] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1137 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1136 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1136 =
	     dacCore0_sampF_rRdPtr_rsCounter[4] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1134 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1135 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_4_80_ETC___d1137 =
	     dacCore0_sampF_rRdPtr_rsCounter[4] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1135 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1134 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1134 =
	     dacCore0_sampF_rRdPtr_rsCounter[5] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1132 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1133 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_5_78_ETC___d1135 =
	     dacCore0_sampF_rRdPtr_rsCounter[5] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1133 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1132 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1132 =
	     dacCore0_sampF_rRdPtr_rsCounter[6] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1130 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1131 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_6_75_ETC___d1133 =
	     dacCore0_sampF_rRdPtr_rsCounter[6] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1131 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1130 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1130 =
	     dacCore0_sampF_rRdPtr_rsCounter[7] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1128 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1129 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_7_73_ETC___d1131 =
	     dacCore0_sampF_rRdPtr_rsCounter[7] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1129 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1128 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1128 =
	     dacCore0_sampF_rRdPtr_rsCounter[8] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1126 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1127 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_8_70_ETC___d1129 =
	     dacCore0_sampF_rRdPtr_rsCounter[8] ?
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1127 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1126 ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1126 =
	     dacCore0_sampF_rRdPtr_rsCounter[9] ^
	     dacCore0_sampF_rRdPtr_rsCounter[10] ;
  assign IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_9_68_ETC___d1127 =
	     !(dacCore0_sampF_rRdPtr_rsCounter[9] ^
	       dacCore0_sampF_rRdPtr_rsCounter[10]) ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_0_25_ETC___d1124 =
	     (dacCore0_sampF_rWrPtr_rsCounter[0] ||
	      dacCore0_sampF_rWrPtr_rsCounter[1] ||
	      dacCore0_sampF_rWrPtr_rsCounter[2] ||
	      dacCore0_sampF_rWrPtr_rsCounter[3] ||
	      dacCore0_sampF_rWrPtr_rsCounter[4] ||
	      dacCore0_sampF_rWrPtr_rsCounter[5] ||
	      dacCore0_sampF_rWrPtr_rsCounter[6] ||
	      dacCore0_sampF_rWrPtr_rsCounter[7] ||
	      dacCore0_sampF_rWrPtr_rsCounter[8] ||
	      dacCore0_sampF_rWrPtr_rsCounter[9]) ?
	       (dacCore0_sampF_rWrPtr_rsCounter[0] ?
		  32'd1 :
		  (dacCore0_sampF_rWrPtr_rsCounter[1] ?
		     32'd2 :
		     (dacCore0_sampF_rWrPtr_rsCounter[2] ?
			32'd3 :
			(dacCore0_sampF_rWrPtr_rsCounter[3] ?
			   32'd4 :
			   (dacCore0_sampF_rWrPtr_rsCounter[4] ?
			      32'd5 :
			      (dacCore0_sampF_rWrPtr_rsCounter[5] ?
				 32'd6 :
				 (dacCore0_sampF_rWrPtr_rsCounter[6] ?
				    32'd7 :
				    (dacCore0_sampF_rWrPtr_rsCounter[7] ?
				       32'd8 :
				       (dacCore0_sampF_rWrPtr_rsCounter[8] ?
					  32'd9 :
					  (dacCore0_sampF_rWrPtr_rsCounter[9] ?
					     32'd10 :
					     (dacCore0_sampF_rWrPtr_rsCounter[10] ?
						32'd11 :
						32'd12))))))))))) :
	       32'd10 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_1_23_ETC___d1158 =
	     dacCore0_sampF_rWrPtr_rsCounter[1] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1157 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1156 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_1_23_ETC___d1167 =
	     dacCore0_sampF_rWrPtr_rsCounter[1] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1156 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1157 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1156 =
	     dacCore0_sampF_rWrPtr_rsCounter[2] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1155 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1003 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_2_20_ETC___d1157 =
	     dacCore0_sampF_rWrPtr_rsCounter[2] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1003 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1155 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1003 =
	     dacCore0_sampF_rWrPtr_rsCounter[3] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1154 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1153 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_3_18_ETC___d1155 =
	     dacCore0_sampF_rWrPtr_rsCounter[3] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1153 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1154 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1153 =
	     dacCore0_sampF_rWrPtr_rsCounter[4] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1151 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1152 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_4_15_ETC___d1154 =
	     dacCore0_sampF_rWrPtr_rsCounter[4] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1152 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1151 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1151 =
	     dacCore0_sampF_rWrPtr_rsCounter[5] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1149 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1150 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_5_13_ETC___d1152 =
	     dacCore0_sampF_rWrPtr_rsCounter[5] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1150 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1149 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1149 =
	     dacCore0_sampF_rWrPtr_rsCounter[6] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1147 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1148 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_6_10_ETC___d1150 =
	     dacCore0_sampF_rWrPtr_rsCounter[6] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1148 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1147 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1147 =
	     dacCore0_sampF_rWrPtr_rsCounter[7] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1145 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1146 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_7_08_ETC___d1148 =
	     dacCore0_sampF_rWrPtr_rsCounter[7] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1146 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1145 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1145 =
	     dacCore0_sampF_rWrPtr_rsCounter[8] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1143 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1144 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_8_05_ETC___d1146 =
	     dacCore0_sampF_rWrPtr_rsCounter[8] ?
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1144 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1143 ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1143 =
	     dacCore0_sampF_rWrPtr_rsCounter[9] ^
	     dacCore0_sampF_rWrPtr_rsCounter[10] ;
  assign IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_9_03_ETC___d1144 =
	     !(dacCore0_sampF_rWrPtr_rsCounter[9] ^
	       dacCore0_sampF_rWrPtr_rsCounter[10]) ;
  assign IF_fcDac_grayCounter_rsCounter_28_BIT_0_29_OR__ETC___d1159 =
	     (fcDac_grayCounter_rsCounter[0] ||
	      fcDac_grayCounter_rsCounter[1] ||
	      fcDac_grayCounter_rsCounter[2] ||
	      fcDac_grayCounter_rsCounter[3] ||
	      fcDac_grayCounter_rsCounter[4] ||
	      fcDac_grayCounter_rsCounter[5] ||
	      fcDac_grayCounter_rsCounter[6] ||
	      fcDac_grayCounter_rsCounter[7] ||
	      fcDac_grayCounter_rsCounter[8] ||
	      fcDac_grayCounter_rsCounter[9] ||
	      fcDac_grayCounter_rsCounter[10] ||
	      fcDac_grayCounter_rsCounter[11] ||
	      fcDac_grayCounter_rsCounter[12] ||
	      fcDac_grayCounter_rsCounter[13] ||
	      fcDac_grayCounter_rsCounter[14]) ?
	       (fcDac_grayCounter_rsCounter[0] ?
		  32'd1 :
		  (fcDac_grayCounter_rsCounter[1] ?
		     32'd2 :
		     (fcDac_grayCounter_rsCounter[2] ?
			32'd3 :
			(fcDac_grayCounter_rsCounter[3] ?
			   32'd4 :
			   (fcDac_grayCounter_rsCounter[4] ?
			      32'd5 :
			      (fcDac_grayCounter_rsCounter[5] ?
				 32'd6 :
				 (fcDac_grayCounter_rsCounter[6] ?
				    32'd7 :
				    (fcDac_grayCounter_rsCounter[7] ?
				       32'd8 :
				       (fcDac_grayCounter_rsCounter[8] ?
					  32'd9 :
					  (fcDac_grayCounter_rsCounter[9] ?
					     32'd10 :
					     (fcDac_grayCounter_rsCounter[10] ?
						32'd11 :
						(fcDac_grayCounter_rsCounter[11] ?
						   32'd12 :
						   (fcDac_grayCounter_rsCounter[12] ?
						      32'd13 :
						      (fcDac_grayCounter_rsCounter[13] ?
							 32'd14 :
							 (fcDac_grayCounter_rsCounter[14] ?
							    32'd15 :
							    (fcDac_grayCounter_rsCounter[15] ?
							       32'd16 :
							       32'd17)))))))))))))))) :
	       32'd15 ;
  assign NOT_dacCore0_sampF_rWrPtr_rsCounter_30_EQ_dacC_ETC___d1169 =
	     dacCore0_sampF_rWrPtr_rsCounter !=
	     { dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[10],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[10] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[9],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[9] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[8],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[8] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[7],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[7] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[6],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[6] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[5],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[5] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[4],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[4] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[3],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[3] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[2],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[2] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[1],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[1] ^
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042[0] } ;
  assign _theResult____h78955 =
	     (wci_reqF$D_OUT[43:42] == 2'b0) ?
	       CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 :
	       32'd0 ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_C_ETC___d1042 =
	     x_dReadBin__h33902 + 11'd512 ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1024 =
	     dacCore0_sampF_rRdPtr_rdCounter[10] ^
	     dacCore0_sampF_rRdPtr_rdCounter[9] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1025 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1045 ^
	     dacCore0_sampF_rRdPtr_rdCounter[1] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1026 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1041 ^
	     dacCore0_sampF_rRdPtr_rdCounter[6] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1027 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1024 ^
	     dacCore0_sampF_rRdPtr_rdCounter[8] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1032 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1034 ^
	     dacCore0_sampF_rRdPtr_rdCounter[4] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1034 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1026 ^
	     dacCore0_sampF_rRdPtr_rdCounter[5] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1041 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1027 ^
	     dacCore0_sampF_rRdPtr_rdCounter[7] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1043 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1032 ^
	     dacCore0_sampF_rRdPtr_rdCounter[3] ;
  assign dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1045 =
	     dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1043 ^
	     dacCore0_sampF_rRdPtr_rdCounter[2] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1004 =
	     dacCore0_sampF_rRdPtr_rsCounter[10] ^
	     dacCore0_sampF_rRdPtr_rsCounter[9] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1005 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1004 ^
	     dacCore0_sampF_rRdPtr_rsCounter[8] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1006 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1005 ^
	     dacCore0_sampF_rRdPtr_rsCounter[7] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1007 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1033 ^
	     dacCore0_sampF_rRdPtr_rsCounter[3] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1008 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1007 ^
	     dacCore0_sampF_rRdPtr_rsCounter[2] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1009 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1008 ^
	     dacCore0_sampF_rRdPtr_rsCounter[1] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1031 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1006 ^
	     dacCore0_sampF_rRdPtr_rsCounter[6] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1033 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1044 ^
	     dacCore0_sampF_rRdPtr_rsCounter[4] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1044 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1031 ^
	     dacCore0_sampF_rRdPtr_rsCounter[5] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1048 =
	     dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1009 ^
	     dacCore0_sampF_rRdPtr_rsCounter[0] ;
  assign dacCore0_sampF_rRdPtr_rsCounter_29_EQ_dacCore0_ETC___d1171 =
	     dacCore0_sampF_rRdPtr_rsCounter ==
	     dacCore0_sampF_rWrPtr_rdCounter ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1010 =
	     dacCore0_sampF_rWrPtr_rsCounter[10] ^
	     dacCore0_sampF_rWrPtr_rsCounter[9] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1011 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1010 ^
	     dacCore0_sampF_rWrPtr_rsCounter[8] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1012 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1011 ^
	     dacCore0_sampF_rWrPtr_rsCounter[7] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1013 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1012 ^
	     dacCore0_sampF_rWrPtr_rsCounter[6] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1014 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1030 ^
	     dacCore0_sampF_rWrPtr_rsCounter[4] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1015 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1014 ^
	     dacCore0_sampF_rWrPtr_rsCounter[3] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1029 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1039 ^
	     dacCore0_sampF_rWrPtr_rsCounter[1] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1030 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1013 ^
	     dacCore0_sampF_rWrPtr_rsCounter[5] ;
  assign dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1039 =
	     dacCore0_sampF_rWrPtr_rsCounter_30_BIT_10_02_X_ETC___d1015 ^
	     dacCore0_sampF_rWrPtr_rsCounter[2] ;
  assign dacStatusLs__h78881 = { 26'd0, x__h79105 } ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1016 =
	     fcDac_grayCounter_rdCounter[15] ^
	     fcDac_grayCounter_rdCounter[14] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1017 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1038 ^
	     fcDac_grayCounter_rdCounter[12] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1018 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1036 ^
	     fcDac_grayCounter_rdCounter[7] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1019 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1035 ^
	     fcDac_grayCounter_rdCounter[5] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1020 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1019 ^
	     fcDac_grayCounter_rdCounter[4] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1021 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1022 ^
	     fcDac_grayCounter_rdCounter[1] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1022 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1023 ^
	     fcDac_grayCounter_rdCounter[2] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1023 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1020 ^
	     fcDac_grayCounter_rdCounter[3] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1028 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1040 ^
	     fcDac_grayCounter_rdCounter[9] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1035 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1018 ^
	     fcDac_grayCounter_rdCounter[6] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1036 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1028 ^
	     fcDac_grayCounter_rdCounter[8] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1037 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1017 ^
	     fcDac_grayCounter_rdCounter[11] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1038 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1016 ^
	     fcDac_grayCounter_rdCounter[13] ;
  assign fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1040 =
	     fcDac_grayCounter_rdCounter_79_BIT_15_80_XOR_f_ETC___d1037 ^
	     fcDac_grayCounter_rdCounter[10] ;
  assign fcDac_grayCounter_rsCounter_28_BIT_0_29_XOR_fc_ETC___d1098 =
	     z__h70735 ^ fcDac_grayCounter_rsCounter[15] ;
  assign rdat__h79050 = { 24'd0, wsiS_statusR } ;
  assign rdat__h79123 = { 16'd0, fcDac_frequency } ;
  assign result__h87501 =
	     { ~wsiS_reqFifo$D_OUT[43],
	       wsiS_reqFifo$D_OUT[42:28],
	       ~wsiS_reqFifo$D_OUT[27],
	       wsiS_reqFifo$D_OUT[26:12] } ;
  assign wsiS_reqFifo_notFull__12_AND_wsiS_burstKind_92_ETC___d331 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;
  assign x2__h36710 =
	     { dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1004,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1005,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1006,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1031,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1044,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1033,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1007,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1008,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1009,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1048 } ;
  assign x__h12736 = 11'd1 << x__h19583 ;
  assign x__h19583 =
	     (dacCore0_sampF_rWrPtr_rsCounter[0] ?
		IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_1_23_ETC___d1167 :
		IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_1_23_ETC___d1158) ?
	       32'd0 :
	       IF_dacCore0_sampF_rWrPtr_rsCounter_30_BIT_0_25_ETC___d1124 ;
  assign x__h26973 = 11'd1 << x__h33820 ;
  assign x__h33820 =
	     (dacCore0_sampF_rRdPtr_rsCounter[0] ?
		IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_1_88_ETC___d1166 :
		IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_1_88_ETC___d1142) ?
	       32'd0 :
	       IF_dacCore0_sampF_rRdPtr_rsCounter_29_BIT_0_90_ETC___d1125 ;
  assign x__h36747 = x_sReadBin__h33899 + 11'd1 ;
  assign x__h59790 = dacCore0_iseqFsm_repeat_count + 13'd1 ;
  assign x__h71709 = 16'd1 << x__h72733 ;
  assign x__h72733 =
	     fcDac_grayCounter_rsCounter_28_BIT_0_29_XOR_fc_ETC___d1098 ?
	       IF_fcDac_grayCounter_rsCounter_28_BIT_0_29_OR__ETC___d1159 :
	       32'd0 ;
  assign x__h79105 =
	     { splitReadInFlight,
	       initOpInFlight,
	       2'd2,
	       dacCore0_dcmLck_cc$dD_OUT,
	       dacCore0_iSeqDone$dD_OUT } ;
  assign x_dReadBin__h33902 =
	     { dacCore0_sampF_rRdPtr_rdCounter[10],
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1024,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1027,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1041,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1026,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1034,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1032,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1043,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1045,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1025,
	       dacCore0_sampF_rRdPtr_rdCounter_31_BIT_10_32_X_ETC___d1025 ^
	       dacCore0_sampF_rRdPtr_rdCounter[0] } ;
  assign x_sReadBin__h33899 =
	     { dacCore0_sampF_rRdPtr_rsCounter[10],
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1004,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1005,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1006,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1031,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1044,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1033,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1007,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1008,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1009,
	       dacCore0_sampF_rRdPtr_rsCounter_29_BIT_10_67_X_ETC___d1048 } ;
  assign y__h19614 = ~x__h12736 ;
  assign y__h33851 = ~x__h26973 ;
  assign y__h72769 = ~x__h71709 ;
  assign z__h70644 =
	     fcDac_grayCounter_rsCounter[0] ^ fcDac_grayCounter_rsCounter[1] ;
  assign z__h70651 = z__h70644 ^ fcDac_grayCounter_rsCounter[2] ;
  assign z__h70658 = z__h70651 ^ fcDac_grayCounter_rsCounter[3] ;
  assign z__h70665 = z__h70658 ^ fcDac_grayCounter_rsCounter[4] ;
  assign z__h70672 = z__h70665 ^ fcDac_grayCounter_rsCounter[5] ;
  assign z__h70679 = z__h70672 ^ fcDac_grayCounter_rsCounter[6] ;
  assign z__h70686 = z__h70679 ^ fcDac_grayCounter_rsCounter[7] ;
  assign z__h70693 = z__h70686 ^ fcDac_grayCounter_rsCounter[8] ;
  assign z__h70700 = z__h70693 ^ fcDac_grayCounter_rsCounter[9] ;
  assign z__h70707 = z__h70700 ^ fcDac_grayCounter_rsCounter[10] ;
  assign z__h70714 = z__h70707 ^ fcDac_grayCounter_rsCounter[11] ;
  assign z__h70721 = z__h70714 ^ fcDac_grayCounter_rsCounter[12] ;
  assign z__h70728 = z__h70721 ^ fcDac_grayCounter_rsCounter[13] ;
  assign z__h70735 = z__h70728 ^ fcDac_grayCounter_rsCounter[14] ;
  always@(wci_reqF$D_OUT or
	  rdat__h79050 or
	  dacStatusLs__h78881 or
	  dacControl or
	  rdat__h79123 or
	  dacCore0_emitCntCC$dD_OUT or
	  firstUnderflowMesg or
	  syncCount or
	  mesgStart or
	  dacCore0_undCountCC$dD_OUT or stageCount or wsiS_extStatusW$wget)
  begin
    case (wci_reqF$D_OUT[39:32])
      8'h0:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      rdat__h79050;
      8'h04:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      dacStatusLs__h78881;
      8'h0C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 = dacControl;
      8'h10:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      rdat__h79123;
      8'h14:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      dacCore0_emitCntCC$dD_OUT;
      8'h24:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      firstUnderflowMesg;
      8'h30:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 = syncCount;
      8'h34:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 = mesgStart;
      8'h38:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      dacCore0_undCountCC$dD_OUT;
      8'h3C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 = stageCount;
      8'h48:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      wsiS_extStatusW$wget[95:64];
      8'h4C:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      wsiS_extStatusW$wget[63:32];
      8'h50:
	  CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 =
	      wsiS_extStatusW$wget[31:0];
      default: CASE_wci_reqFD_OUT_BITS_39_TO_32_0_0x0_rdat90_ETC__q1 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        dacControl <= `BSV_ASSIGNMENT_DELAY 32'h00000008;
	dacCore0_dacCtrl_w <= `BSV_ASSIGNMENT_DELAY 4'h8;
	fcDac_countNow <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	fcDac_countPast <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	fcDac_frequency <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	fcDac_pulseAction <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fcDac_sampleCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	firstUnderflowMesg <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
	hasUnderflowed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initOpInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mesgStart <= `BSV_ASSIGNMENT_DELAY 32'd0;
	oneKHz_value <= `BSV_ASSIGNMENT_DELAY 18'd0;
	opcode <= `BSV_ASSIGNMENT_DELAY 9'd170;
	rf <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_1 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_10 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_11 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_12 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_13 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_14 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_15 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_2 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_3 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_4 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_5 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_6 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_7 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_8 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rf_9 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	sFlagState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	srcCnt <= `BSV_ASSIGNMENT_DELAY 2'd0;
	stageCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	syncCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	takeEven <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'd7;
	wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wordsConsumed <= `BSV_ASSIGNMENT_DELAY 8'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (dacControl$EN)
	  dacControl <= `BSV_ASSIGNMENT_DELAY dacControl$D_IN;
	if (dacCore0_dacCtrl_w$EN)
	  dacCore0_dacCtrl_w <= `BSV_ASSIGNMENT_DELAY dacCore0_dacCtrl_w$D_IN;
	if (fcDac_countNow$EN)
	  fcDac_countNow <= `BSV_ASSIGNMENT_DELAY fcDac_countNow$D_IN;
	if (fcDac_countPast$EN)
	  fcDac_countPast <= `BSV_ASSIGNMENT_DELAY fcDac_countPast$D_IN;
	if (fcDac_frequency$EN)
	  fcDac_frequency <= `BSV_ASSIGNMENT_DELAY fcDac_frequency$D_IN;
	if (fcDac_pulseAction$EN)
	  fcDac_pulseAction <= `BSV_ASSIGNMENT_DELAY fcDac_pulseAction$D_IN;
	if (fcDac_sampleCount$EN)
	  fcDac_sampleCount <= `BSV_ASSIGNMENT_DELAY fcDac_sampleCount$D_IN;
	if (firstUnderflowMesg$EN)
	  firstUnderflowMesg <= `BSV_ASSIGNMENT_DELAY firstUnderflowMesg$D_IN;
	if (hasUnderflowed$EN)
	  hasUnderflowed <= `BSV_ASSIGNMENT_DELAY hasUnderflowed$D_IN;
	if (initOpInFlight$EN)
	  initOpInFlight <= `BSV_ASSIGNMENT_DELAY initOpInFlight$D_IN;
	if (mesgStart$EN) mesgStart <= `BSV_ASSIGNMENT_DELAY mesgStart$D_IN;
	if (oneKHz_value$EN)
	  oneKHz_value <= `BSV_ASSIGNMENT_DELAY oneKHz_value$D_IN;
	if (opcode$EN) opcode <= `BSV_ASSIGNMENT_DELAY opcode$D_IN;
	if (rf$EN) rf <= `BSV_ASSIGNMENT_DELAY rf$D_IN;
	if (rf_1$EN) rf_1 <= `BSV_ASSIGNMENT_DELAY rf_1$D_IN;
	if (rf_10$EN) rf_10 <= `BSV_ASSIGNMENT_DELAY rf_10$D_IN;
	if (rf_11$EN) rf_11 <= `BSV_ASSIGNMENT_DELAY rf_11$D_IN;
	if (rf_12$EN) rf_12 <= `BSV_ASSIGNMENT_DELAY rf_12$D_IN;
	if (rf_13$EN) rf_13 <= `BSV_ASSIGNMENT_DELAY rf_13$D_IN;
	if (rf_14$EN) rf_14 <= `BSV_ASSIGNMENT_DELAY rf_14$D_IN;
	if (rf_15$EN) rf_15 <= `BSV_ASSIGNMENT_DELAY rf_15$D_IN;
	if (rf_2$EN) rf_2 <= `BSV_ASSIGNMENT_DELAY rf_2$D_IN;
	if (rf_3$EN) rf_3 <= `BSV_ASSIGNMENT_DELAY rf_3$D_IN;
	if (rf_4$EN) rf_4 <= `BSV_ASSIGNMENT_DELAY rf_4$D_IN;
	if (rf_5$EN) rf_5 <= `BSV_ASSIGNMENT_DELAY rf_5$D_IN;
	if (rf_6$EN) rf_6 <= `BSV_ASSIGNMENT_DELAY rf_6$D_IN;
	if (rf_7$EN) rf_7 <= `BSV_ASSIGNMENT_DELAY rf_7$D_IN;
	if (rf_8$EN) rf_8 <= `BSV_ASSIGNMENT_DELAY rf_8$D_IN;
	if (rf_9$EN) rf_9 <= `BSV_ASSIGNMENT_DELAY rf_9$D_IN;
	if (sFlagState$EN)
	  sFlagState <= `BSV_ASSIGNMENT_DELAY sFlagState$D_IN;
	if (splitReadInFlight$EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight$D_IN;
	if (srcCnt$EN) srcCnt <= `BSV_ASSIGNMENT_DELAY srcCnt$D_IN;
	if (stageCount$EN)
	  stageCount <= `BSV_ASSIGNMENT_DELAY stageCount$D_IN;
	if (syncCount$EN) syncCount <= `BSV_ASSIGNMENT_DELAY syncCount$D_IN;
	if (takeEven$EN) takeEven <= `BSV_ASSIGNMENT_DELAY takeEven$D_IN;
	if (wci_cEdge$EN) wci_cEdge <= `BSV_ASSIGNMENT_DELAY wci_cEdge$D_IN;
	if (wci_cState$EN)
	  wci_cState <= `BSV_ASSIGNMENT_DELAY wci_cState$D_IN;
	if (wci_ctlAckReg$EN)
	  wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_ctlAckReg$D_IN;
	if (wci_ctlOpActive$EN)
	  wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY wci_ctlOpActive$D_IN;
	if (wci_illegalEdge$EN)
	  wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY wci_illegalEdge$D_IN;
	if (wci_nState$EN)
	  wci_nState <= `BSV_ASSIGNMENT_DELAY wci_nState$D_IN;
	if (wci_reqF_countReg$EN)
	  wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY wci_reqF_countReg$D_IN;
	if (wci_respF_c_r$EN)
	  wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_respF_c_r$D_IN;
	if (wci_respF_q_0$EN)
	  wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_0$D_IN;
	if (wci_respF_q_1$EN)
	  wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_respF_q_1$D_IN;
	if (wci_sFlagReg$EN)
	  wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_sFlagReg$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wordsConsumed$EN)
	  wordsConsumed <= `BSV_ASSIGNMENT_DELAY wordsConsumed$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge CLK_dac_clk)
  begin
    if (!RST_N_dac_rst)
      begin
        wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (wti_nowReq$EN)
	  wti_nowReq <= `BSV_ASSIGNMENT_DELAY wti_nowReq$D_IN;
      end
  end

  always@(posedge dacCore0_ddrSDrv_ddrV$sdrClk)
  begin
    if (!dacCore0_sdrRst$OUT_RST_N)
      begin
        dacCore0_calBit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_emit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_emitCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dacCore0_emitD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_iseqFsm_repeat_count <= `BSV_ASSIGNMENT_DELAY 13'd0;
	dacCore0_iseqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_iseqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd1;
	dacCore0_iseqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_muteDAC <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_syncMute <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_syncOut <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_tone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dacCore0_undCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (dacCore0_calBit$EN)
	  dacCore0_calBit <= `BSV_ASSIGNMENT_DELAY dacCore0_calBit$D_IN;
	if (dacCore0_emit$EN)
	  dacCore0_emit <= `BSV_ASSIGNMENT_DELAY dacCore0_emit$D_IN;
	if (dacCore0_emitCnt$EN)
	  dacCore0_emitCnt <= `BSV_ASSIGNMENT_DELAY dacCore0_emitCnt$D_IN;
	if (dacCore0_emitD$EN)
	  dacCore0_emitD <= `BSV_ASSIGNMENT_DELAY dacCore0_emitD$D_IN;
	if (dacCore0_iseqFsm_repeat_count$EN)
	  dacCore0_iseqFsm_repeat_count <= `BSV_ASSIGNMENT_DELAY
	      dacCore0_iseqFsm_repeat_count$D_IN;
	if (dacCore0_iseqFsm_start_reg$EN)
	  dacCore0_iseqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      dacCore0_iseqFsm_start_reg$D_IN;
	if (dacCore0_iseqFsm_state_mkFSMstate$EN)
	  dacCore0_iseqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      dacCore0_iseqFsm_state_mkFSMstate$D_IN;
	if (dacCore0_iseqFsm_state_standby$EN)
	  dacCore0_iseqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY
	      dacCore0_iseqFsm_state_standby$D_IN;
	if (dacCore0_muteDAC$EN)
	  dacCore0_muteDAC <= `BSV_ASSIGNMENT_DELAY dacCore0_muteDAC$D_IN;
	if (dacCore0_syncMute$EN)
	  dacCore0_syncMute <= `BSV_ASSIGNMENT_DELAY dacCore0_syncMute$D_IN;
	if (dacCore0_syncOut$EN)
	  dacCore0_syncOut <= `BSV_ASSIGNMENT_DELAY dacCore0_syncOut$D_IN;
	if (dacCore0_tone$EN)
	  dacCore0_tone <= `BSV_ASSIGNMENT_DELAY dacCore0_tone$D_IN;
	if (dacCore0_undCount$EN)
	  dacCore0_undCount <= `BSV_ASSIGNMENT_DELAY dacCore0_undCount$D_IN;
      end
    if (dacCore0_dacCount$EN)
      dacCore0_dacCount <= `BSV_ASSIGNMENT_DELAY dacCore0_dacCount$D_IN;
  end

  always@(posedge CLK or negedge RST_N)
  if (!RST_N)
    begin
      dacCore0_sampF_rRdPtr_rdCounter <= `BSV_ASSIGNMENT_DELAY 11'd0;
      dacCore0_sampF_rRdPtr_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 11'd0;
      dacCore0_sampF_rWrPtr_rsCounter <= `BSV_ASSIGNMENT_DELAY 11'd0;
      fcDac_grayCounter_rdCounter <= `BSV_ASSIGNMENT_DELAY 16'd0;
      fcDac_grayCounter_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 16'd0;
    end
  else
    begin
      if (dacCore0_sampF_rRdPtr_rdCounter$EN)
	dacCore0_sampF_rRdPtr_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    dacCore0_sampF_rRdPtr_rdCounter$D_IN;
      if (dacCore0_sampF_rRdPtr_rdCounterPre$EN)
	dacCore0_sampF_rRdPtr_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    dacCore0_sampF_rRdPtr_rdCounterPre$D_IN;
      if (dacCore0_sampF_rWrPtr_rsCounter$EN)
	dacCore0_sampF_rWrPtr_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    dacCore0_sampF_rWrPtr_rsCounter$D_IN;
      if (fcDac_grayCounter_rdCounter$EN)
	fcDac_grayCounter_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    fcDac_grayCounter_rdCounter$D_IN;
      if (fcDac_grayCounter_rdCounterPre$EN)
	fcDac_grayCounter_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    fcDac_grayCounter_rdCounterPre$D_IN;
    end

  always@(posedge dacCore0_ddrSDrv_ddrV$sdrClk or
	  negedge dacCore0_sdrRst$OUT_RST_N)
  if (!dacCore0_sdrRst$OUT_RST_N)
    begin
      dacCore0_sampF_rRdPtr_rsCounter <= `BSV_ASSIGNMENT_DELAY 11'd0;
      dacCore0_sampF_rWrPtr_rdCounter <= `BSV_ASSIGNMENT_DELAY 11'd0;
      dacCore0_sampF_rWrPtr_rdCounterPre <= `BSV_ASSIGNMENT_DELAY 11'd0;
    end
  else
    begin
      if (dacCore0_sampF_rRdPtr_rsCounter$EN)
	dacCore0_sampF_rRdPtr_rsCounter <= `BSV_ASSIGNMENT_DELAY
	    dacCore0_sampF_rRdPtr_rsCounter$D_IN;
      if (dacCore0_sampF_rWrPtr_rdCounter$EN)
	dacCore0_sampF_rWrPtr_rdCounter <= `BSV_ASSIGNMENT_DELAY
	    dacCore0_sampF_rWrPtr_rdCounter$D_IN;
      if (dacCore0_sampF_rWrPtr_rdCounterPre$EN)
	dacCore0_sampF_rWrPtr_rdCounterPre <= `BSV_ASSIGNMENT_DELAY
	    dacCore0_sampF_rWrPtr_rdCounterPre$D_IN;
    end

  always@(posedge dacCore0_ddrSDrv_ddrV$sdrClk)
  begin
    if (fcDac_grayCounter_rsCounter$EN)
      fcDac_grayCounter_rsCounter <= `BSV_ASSIGNMENT_DELAY
	  fcDac_grayCounter_rsCounter$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dacControl = 32'hAAAAAAAA;
    dacCore0_calBit = 1'h0;
    dacCore0_dacCount = 8'hAA;
    dacCore0_dacCtrl_w = 4'hA;
    dacCore0_emit = 1'h0;
    dacCore0_emitCnt = 32'hAAAAAAAA;
    dacCore0_emitD = 1'h0;
    dacCore0_iseqFsm_repeat_count = 13'h0AAA;
    dacCore0_iseqFsm_start_reg = 1'h0;
    dacCore0_iseqFsm_state_mkFSMstate = 4'hA;
    dacCore0_iseqFsm_state_standby = 1'h0;
    dacCore0_muteDAC = 1'h0;
    dacCore0_sampF_rRdPtr_rdCounter = 11'h2AA;
    dacCore0_sampF_rRdPtr_rdCounterPre = 11'h2AA;
    dacCore0_sampF_rRdPtr_rsCounter = 11'h2AA;
    dacCore0_sampF_rWrPtr_rdCounter = 11'h2AA;
    dacCore0_sampF_rWrPtr_rdCounterPre = 11'h2AA;
    dacCore0_sampF_rWrPtr_rsCounter = 11'h2AA;
    dacCore0_syncMute = 1'h0;
    dacCore0_syncOut = 1'h0;
    dacCore0_tone = 1'h0;
    dacCore0_undCount = 32'hAAAAAAAA;
    fcDac_countNow = 16'hAAAA;
    fcDac_countPast = 16'hAAAA;
    fcDac_frequency = 16'hAAAA;
    fcDac_grayCounter_rdCounter = 16'hAAAA;
    fcDac_grayCounter_rdCounterPre = 16'hAAAA;
    fcDac_grayCounter_rsCounter = 16'hAAAA;
    fcDac_pulseAction = 1'h0;
    fcDac_sampleCount = 16'hAAAA;
    firstUnderflowMesg = 32'hAAAAAAAA;
    hasUnderflowed = 1'h0;
    initOpInFlight = 1'h0;
    mesgStart = 32'hAAAAAAAA;
    oneKHz_value = 18'h2AAAA;
    opcode = 9'h0AA;
    rf = 12'hAAA;
    rf_1 = 12'hAAA;
    rf_10 = 12'hAAA;
    rf_11 = 12'hAAA;
    rf_12 = 12'hAAA;
    rf_13 = 12'hAAA;
    rf_14 = 12'hAAA;
    rf_15 = 12'hAAA;
    rf_2 = 12'hAAA;
    rf_3 = 12'hAAA;
    rf_4 = 12'hAAA;
    rf_5 = 12'hAAA;
    rf_6 = 12'hAAA;
    rf_7 = 12'hAAA;
    rf_8 = 12'hAAA;
    rf_9 = 12'hAAA;
    sFlagState = 1'h0;
    splitReadInFlight = 1'h0;
    srcCnt = 2'h2;
    stageCount = 32'hAAAAAAAA;
    syncCount = 32'hAAAAAAAA;
    takeEven = 1'h0;
    wci_cEdge = 3'h2;
    wci_cState = 3'h2;
    wci_ctlAckReg = 1'h0;
    wci_ctlOpActive = 1'h0;
    wci_illegalEdge = 1'h0;
    wci_nState = 3'h2;
    wci_reqF_countReg = 2'h2;
    wci_respF_c_r = 2'h2;
    wci_respF_q_0 = 34'h2AAAAAAAA;
    wci_respF_q_1 = 34'h2AAAAAAAA;
    wci_sFlagReg = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wordsConsumed = 8'hAA;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
    wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	begin
	  v__h3677 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3677,
		 wci_reqF$D_OUT[36:34],
		 wci_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_OrE && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/DACWorker.bsv\", line 185, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_OrE and RL_wci_ctrl_IsO fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h78971 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h78971,
		 wci_reqF$D_OUT[51:32],
		 wci_reqF$D_OUT[55:52],
		 _theResult____h78955);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/DACWorker.bsv\", line 140, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfrd and RL_wci_ctrl_OrE fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/DACWorker.bsv\", line 140, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfrd and RL_wci_ctrl_IsO fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/DACWorker.bsv\", line 171, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_ctrl_OrE fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/DACWorker.bsv\", line 171, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_ctrl_IsO fired in the\n  same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/DACWorker.bsv\", line 171, column 6: (R0001)\n  Mutually exclusive rules RL_wci_ctrl_EiI and RL_wci_cfrd fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	begin
	  v__h2778 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h2778,
		 wci_cEdge,
		 wci_cState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	begin
	  v__h2631 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_ctl_op_complete && !wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h2631,
		 wci_cEdge,
		 wci_cState,
		 wci_nState);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h79459 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h79459,
		 wci_reqF$D_OUT[51:32],
		 wci_reqF$D_OUT[55:52],
		 wci_reqF$D_OUT[31:0]);
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/DACWorker.bsv\", line 127, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfwr and RL_wci_ctrl_OrE fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/DACWorker.bsv\", line 127, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfwr and RL_wci_ctrl_IsO fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/DACWorker.bsv\", line 127, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfwr and RL_wci_ctrl_EiI fired in the same\n  clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/DACWorker.bsv\", line 127, column 6: (R0001)\n  Mutually exclusive rules RL_wci_cfwr and RL_wci_cfrd fired in the same clock\n  cycle.\n");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge dacCore0_ddrSDrv_ddrV$sdrClk)
  begin
    #0;
    if (dacCore0_sdrRst$OUT_RST_N)
      if (WILL_FIRE_RL_dacCore0_iseqFsm_action_l100c13) $write("");
    if (dacCore0_sdrRst$OUT_RST_N)
      if (WILL_FIRE_RL_dacCore0_iseqFsm_action_l101c13) $write("");
    if (dacCore0_sdrRst$OUT_RST_N)
      if (WILL_FIRE_RL_dacCore0_iseqFsm_action_l102c10) $write("");
    if (dacCore0_sdrRst$OUT_RST_N)
      if (WILL_FIRE_RL_dacCore0_iseqFsm_action_l103c13) $write("");
    if (dacCore0_sdrRst$OUT_RST_N)
      if (WILL_FIRE_RL_dacCore0_iseqFsm_action_np) $write("");
    if (dacCore0_sdrRst$OUT_RST_N)
      if (WILL_FIRE_RL_dacCore0_iseqFsm_action_l105c13) $write("");
    if (dacCore0_sdrRst$OUT_RST_N)
      if (WILL_FIRE_RL_dacCore0_iseqFsm_action_l99c15) $write("");
  end
  // synopsys translate_on
endmodule  // mkDACWorker

