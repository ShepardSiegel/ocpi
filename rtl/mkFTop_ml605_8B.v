//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Thu Nov  3 16:01:53 EDT 2011
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     4
// pcie_txn                       O     4
// led                            O    13
// lcd_db                         O     4
// lcd_e                          O     1
// lcd_rs                         O     1
// lcd_rw                         O     1
// gps_ppsSyncOut                 O     1
// dram_addr                      O    13
// dram_ba                        O     3
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_reset_n                   O     1
// dram_cs_n                      O     1
// dram_odt                       O     1
// dram_cke                       O     1
// dram_dm                        O     8
// dram_ck_p                      O     1
// dram_ck_n                      O     1
// flash_addr                     O    24 reg
// flash_ce_n                     O     1
// flash_oe_n                     O     1
// flash_we_n                     O     1
// flash_wp_n                     O     1 const
// flash_rst_n                    O     1 const
// flash_adv_n                    O     1 const
// gmii_txd                       O     8
// gmii_tx_en                     O     1
// gmii_tx_er                     O     1
// p125clk                        O     1 clock
// CLK_GATE_p125clk               O     1 const
// rxclk                          O     1 clock
// CLK_GATE_rxclk                 O     1 const
// gmii_tx_clk                    O     1 clock
// CLK_GATE_gmii_tx_clk           O     1 const
// p125rst                        O     1 reset
// mrst_n                         O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// gmii_rx_clk                    I     1 clock
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// pci0_rstn                      I     1 reset
// pcie_rxp_i                     I     4
// pcie_rxn_i                     I     4
// gps_ppsSyncIn_x                I     1 reg
// flash_fwait_i                  I     1 reg
// gmii_rxd_i                     I     8
// gmii_rx_dv_i                   I     1
// gmii_rx_er_i                   I     1
// dram_io_dq                    IO    64 inout
// dram_io_dqs_p                 IO     8 inout
// dram_io_dqs_n                 IO     8 inout
// flash_io_dq                   IO    16 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop_ml605(sys0_clkp,
		    sys0_clkn,
		    sys1_clkp,
		    sys1_clkn,
		    gmii_rx_clk,
		    pci0_clkp,
		    pci0_clkn,
		    pci0_rstn,

		    dram_io_dq,
		    dram_io_dqs_p,
		    dram_io_dqs_n,
		    flash_io_dq,

		    pcie_rxp_i,

		    pcie_rxn_i,

		    pcie_txp,

		    pcie_txn,

		    led,

		    lcd_db,

		    lcd_e,

		    lcd_rs,

		    lcd_rw,

		    gps_ppsSyncIn_x,

		    gps_ppsSyncOut,

		    dram_addr,

		    dram_ba,

		    dram_ras_n,

		    dram_cas_n,

		    dram_we_n,

		    dram_reset_n,

		    dram_cs_n,

		    dram_odt,

		    dram_cke,

		    dram_dm,

		    dram_ck_p,

		    dram_ck_n,

		    flash_addr,

		    flash_ce_n,

		    flash_oe_n,

		    flash_we_n,

		    flash_wp_n,

		    flash_rst_n,

		    flash_adv_n,

		    flash_fwait_i,

		    gmii_txd,

		    gmii_tx_en,

		    gmii_tx_er,

		    gmii_rxd_i,

		    gmii_rx_dv_i,

		    gmii_rx_er_i,

		    p125clk,
		    CLK_GATE_p125clk,

		    rxclk,
		    CLK_GATE_rxclk,

		    gmii_tx_clk,
		    CLK_GATE_gmii_tx_clk,

		    p125rst,
		    mrst_n);
  input  sys0_clkp;
  input  sys0_clkn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  gmii_rx_clk;
  input  pci0_clkp;
  input  pci0_clkn;
  input  pci0_rstn;

  inout  [63 : 0] dram_io_dq;
  inout  [7 : 0] dram_io_dqs_p;
  inout  [7 : 0] dram_io_dqs_n;
  inout  [15 : 0] flash_io_dq;

  // action method pcie_rxp
  input  [3 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [3 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [3 : 0] pcie_txp;

  // value method pcie_txn
  output [3 : 0] pcie_txn;

  // value method led
  output [12 : 0] led;

  // value method lcd_db
  output [3 : 0] lcd_db;

  // value method lcd_e
  output lcd_e;

  // value method lcd_rs
  output lcd_rs;

  // value method lcd_rw
  output lcd_rw;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [2 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_reset_n
  output dram_reset_n;

  // value method dram_cs_n
  output dram_cs_n;

  // value method dram_odt
  output dram_odt;

  // value method dram_cke
  output dram_cke;

  // value method dram_dm
  output [7 : 0] dram_dm;

  // value method dram_ck_p
  output dram_ck_p;

  // value method dram_ck_n
  output dram_ck_n;

  // value method flash_addr
  output [23 : 0] flash_addr;

  // value method flash_ce_n
  output flash_ce_n;

  // value method flash_oe_n
  output flash_oe_n;

  // value method flash_we_n
  output flash_we_n;

  // value method flash_wp_n
  output flash_wp_n;

  // value method flash_rst_n
  output flash_rst_n;

  // value method flash_adv_n
  output flash_adv_n;

  // action method flash_fwait
  input  flash_fwait_i;

  // value method gmii_txd
  output [7 : 0] gmii_txd;

  // value method gmii_tx_en
  output gmii_tx_en;

  // value method gmii_tx_er
  output gmii_tx_er;

  // action method gmii_rxd
  input  [7 : 0] gmii_rxd_i;

  // action method gmii_rx_dv
  input  gmii_rx_dv_i;

  // action method gmii_rx_er
  input  gmii_rx_er_i;

  // oscillator and gates for output clock p125clk
  output p125clk;
  output CLK_GATE_p125clk;

  // oscillator and gates for output clock rxclk
  output rxclk;
  output CLK_GATE_rxclk;

  // oscillator and gates for output clock gmii_tx_clk
  output gmii_tx_clk;
  output CLK_GATE_gmii_tx_clk;

  // output resets
  output p125rst;
  output mrst_n;

  // signals for module outputs
  wire [23 : 0] flash_addr;
  wire [12 : 0] dram_addr, led;
  wire [7 : 0] dram_dm, gmii_txd;
  wire [3 : 0] lcd_db, pcie_txn, pcie_txp;
  wire [2 : 0] dram_ba;
  wire CLK_GATE_gmii_tx_clk,
       CLK_GATE_p125clk,
       CLK_GATE_rxclk,
       dram_cas_n,
       dram_ck_n,
       dram_ck_p,
       dram_cke,
       dram_cs_n,
       dram_odt,
       dram_ras_n,
       dram_reset_n,
       dram_we_n,
       flash_adv_n,
       flash_ce_n,
       flash_oe_n,
       flash_rst_n,
       flash_we_n,
       flash_wp_n,
       gmii_tx_clk,
       gmii_tx_en,
       gmii_tx_er,
       gps_ppsSyncOut,
       lcd_e,
       lcd_rs,
       lcd_rw,
       mrst_n,
       p125clk,
       p125rst,
       rxclk;

  // inlined wires
  wire [95 : 0] pmemMonW8_wsiS_extStatusW$wget;
  wire [60 : 0] pmemMonW8_wsiS_wsiReq$wget;
  wire [31 : 0] pmemMonW8_wsi_Es_mData_w$wget;
  wire [11 : 0] pmemMonW8_wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] pciw_pcie_irq_wInterruptDo$wget,
	       pmemMonW8_wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] pmemMonW8_wsi_Es_mByteEn_w$wget;
  wire [2 : 0] pmemMonW8_wsi_Es_mCmd_w$wget;
  wire [1 : 0] infLed$wget;
  wire pciw_i2pAF_dClear_pw$whas,
       pciw_i2pAF_deq_happened$whas,
       pciw_i2pAF_deq_pw$whas,
       pciw_i2pAF_enq_pw$whas,
       pciw_i2pAF_sClear_pw$whas,
       pciw_p2iAF_dClear_pw$whas,
       pciw_p2iAF_deq_happened$whas,
       pciw_p2iAF_deq_pw$whas,
       pciw_p2iAF_enq_pw$whas,
       pciw_p2iAF_sClear_pw$whas,
       pciw_pci0_pwTrnRx$whas,
       pciw_pci0_pwTrnTx$whas,
       pciw_pcie_irq_wInterruptDo$whas,
       pciw_pcie_irq_wInterruptRdyN$wget,
       pciw_pcie_irq_wInterruptRdyN$whas,
       pmemMonW8_pmBody_1$wget,
       pmemMonW8_pmBody_1$whas,
       pmemMonW8_pmHead_1$wget,
       pmemMonW8_pmHead_1$whas,
       pmemMonW8_wsiS_operateD_1$wget,
       pmemMonW8_wsiS_operateD_1$whas,
       pmemMonW8_wsiS_peerIsReady_1$wget,
       pmemMonW8_wsiS_peerIsReady_1$whas,
       pmemMonW8_wsiS_reqFifo_doResetClr$whas,
       pmemMonW8_wsiS_reqFifo_doResetDeq$whas,
       pmemMonW8_wsiS_reqFifo_doResetEnq$whas,
       pmemMonW8_wsiS_reqFifo_r_clr$whas,
       pmemMonW8_wsiS_reqFifo_r_deq$whas,
       pmemMonW8_wsiS_reqFifo_r_enq$whas,
       pmemMonW8_wsiS_sThreadBusy_dw$wget,
       pmemMonW8_wsiS_sThreadBusy_dw$whas,
       pmemMonW8_wsiS_wsiReq$whas,
       pmemMonW8_wsi_Es_mBurstLength_w$whas,
       pmemMonW8_wsi_Es_mBurstPrecise_w$whas,
       pmemMonW8_wsi_Es_mByteEn_w$whas,
       pmemMonW8_wsi_Es_mCmd_w$whas,
       pmemMonW8_wsi_Es_mDataInfo_w$whas,
       pmemMonW8_wsi_Es_mData_w$whas,
       pmemMonW8_wsi_Es_mReqInfo_w$whas,
       pmemMonW8_wsi_Es_mReqLast_w$whas,
       tcGbe0_wti_sThreadBusy_pw$whas;

  // register Prelude_inst_changeSpecialWires_1_isMReset_isInReset
  reg Prelude_inst_changeSpecialWires_1_isMReset_isInReset;
  wire Prelude_inst_changeSpecialWires_1_isMReset_isInReset$D_IN,
       Prelude_inst_changeSpecialWires_1_isMReset_isInReset$EN;

  // register needs_init
  reg needs_init;
  wire needs_init$D_IN, needs_init$EN;

  // register pciDevice
  reg [15 : 0] pciDevice;
  wire [15 : 0] pciDevice$D_IN;
  wire pciDevice$EN;

  // register pciw_Prelude_inst_changeSpecialWires_1_rg
  reg [81 : 0] pciw_Prelude_inst_changeSpecialWires_1_rg;
  wire [81 : 0] pciw_Prelude_inst_changeSpecialWires_1_rg$D_IN;
  wire pciw_Prelude_inst_changeSpecialWires_1_rg$EN;

  // register pciw_Prelude_inst_changeSpecialWires_2_rg
  reg [81 : 0] pciw_Prelude_inst_changeSpecialWires_2_rg;
  wire [81 : 0] pciw_Prelude_inst_changeSpecialWires_2_rg$D_IN;
  wire pciw_Prelude_inst_changeSpecialWires_2_rg$EN;

  // register pciw_i2pAF_dInReset_isInReset
  reg pciw_i2pAF_dInReset_isInReset;
  wire pciw_i2pAF_dInReset_isInReset$D_IN, pciw_i2pAF_dInReset_isInReset$EN;

  // register pciw_i2pAF_head_wrapped
  reg pciw_i2pAF_head_wrapped;
  wire pciw_i2pAF_head_wrapped$D_IN, pciw_i2pAF_head_wrapped$EN;

  // register pciw_i2pAF_sInReset_isInReset
  reg pciw_i2pAF_sInReset_isInReset;
  wire pciw_i2pAF_sInReset_isInReset$D_IN, pciw_i2pAF_sInReset_isInReset$EN;

  // register pciw_i2pAF_tail_wrapped
  reg pciw_i2pAF_tail_wrapped;
  wire pciw_i2pAF_tail_wrapped$D_IN, pciw_i2pAF_tail_wrapped$EN;

  // register pciw_i2pS
  reg [152 : 0] pciw_i2pS;
  wire [152 : 0] pciw_i2pS$D_IN;
  wire pciw_i2pS$EN;

  // register pciw_p2iAF_dInReset_isInReset
  reg pciw_p2iAF_dInReset_isInReset;
  wire pciw_p2iAF_dInReset_isInReset$D_IN, pciw_p2iAF_dInReset_isInReset$EN;

  // register pciw_p2iAF_head_wrapped
  reg pciw_p2iAF_head_wrapped;
  wire pciw_p2iAF_head_wrapped$D_IN, pciw_p2iAF_head_wrapped$EN;

  // register pciw_p2iAF_sInReset_isInReset
  reg pciw_p2iAF_sInReset_isInReset;
  wire pciw_p2iAF_sInReset_isInReset$D_IN, pciw_p2iAF_sInReset_isInReset$EN;

  // register pciw_p2iAF_tail_wrapped
  reg pciw_p2iAF_tail_wrapped;
  wire pciw_p2iAF_tail_wrapped$D_IN, pciw_p2iAF_tail_wrapped$EN;

  // register pciw_p2iS
  reg [152 : 0] pciw_p2iS;
  wire [152 : 0] pciw_p2iS$D_IN;
  wire pciw_p2iS$EN;

  // register pciw_pcie_irq_rInterruptDi
  reg [7 : 0] pciw_pcie_irq_rInterruptDi;
  wire [7 : 0] pciw_pcie_irq_rInterruptDi$D_IN;
  wire pciw_pcie_irq_rInterruptDi$EN;

  // register pciw_pcie_irq_rInterruptN
  reg pciw_pcie_irq_rInterruptN;
  wire pciw_pcie_irq_rInterruptN$D_IN, pciw_pcie_irq_rInterruptN$EN;

  // register pciw_pcie_irq_rInterrupting
  reg pciw_pcie_irq_rInterrupting;
  wire pciw_pcie_irq_rInterrupting$D_IN, pciw_pcie_irq_rInterrupting$EN;

  // register pciw_pcie_irq_rMMEnabled
  reg [2 : 0] pciw_pcie_irq_rMMEnabled;
  wire [2 : 0] pciw_pcie_irq_rMMEnabled$D_IN;
  wire pciw_pcie_irq_rMMEnabled$EN;

  // register pciw_pcie_irq_rMSIEnabled
  reg pciw_pcie_irq_rMSIEnabled;
  wire pciw_pcie_irq_rMSIEnabled$D_IN, pciw_pcie_irq_rMSIEnabled$EN;

  // register pmemMonW8_eventCount
  reg [31 : 0] pmemMonW8_eventCount;
  wire [31 : 0] pmemMonW8_eventCount$D_IN;
  wire pmemMonW8_eventCount$EN;

  // register pmemMonW8_msgActive
  reg pmemMonW8_msgActive;
  wire pmemMonW8_msgActive$D_IN, pmemMonW8_msgActive$EN;

  // register pmemMonW8_pmBody
  reg pmemMonW8_pmBody;
  wire pmemMonW8_pmBody$D_IN, pmemMonW8_pmBody$EN;

  // register pmemMonW8_pmGrab
  reg pmemMonW8_pmGrab;
  wire pmemMonW8_pmGrab$D_IN, pmemMonW8_pmGrab$EN;

  // register pmemMonW8_pmHead
  reg pmemMonW8_pmHead;
  wire pmemMonW8_pmHead$D_IN, pmemMonW8_pmHead$EN;

  // register pmemMonW8_pmh
  reg [31 : 0] pmemMonW8_pmh;
  wire [31 : 0] pmemMonW8_pmh$D_IN;
  wire pmemMonW8_pmh$EN;

  // register pmemMonW8_wsiS_burstKind
  reg [1 : 0] pmemMonW8_wsiS_burstKind;
  wire [1 : 0] pmemMonW8_wsiS_burstKind$D_IN;
  wire pmemMonW8_wsiS_burstKind$EN;

  // register pmemMonW8_wsiS_errorSticky
  reg pmemMonW8_wsiS_errorSticky;
  wire pmemMonW8_wsiS_errorSticky$D_IN, pmemMonW8_wsiS_errorSticky$EN;

  // register pmemMonW8_wsiS_iMesgCount
  reg [31 : 0] pmemMonW8_wsiS_iMesgCount;
  wire [31 : 0] pmemMonW8_wsiS_iMesgCount$D_IN;
  wire pmemMonW8_wsiS_iMesgCount$EN;

  // register pmemMonW8_wsiS_isReset_isInReset
  reg pmemMonW8_wsiS_isReset_isInReset;
  wire pmemMonW8_wsiS_isReset_isInReset$D_IN,
       pmemMonW8_wsiS_isReset_isInReset$EN;

  // register pmemMonW8_wsiS_mesgWordLength
  reg [11 : 0] pmemMonW8_wsiS_mesgWordLength;
  wire [11 : 0] pmemMonW8_wsiS_mesgWordLength$D_IN;
  wire pmemMonW8_wsiS_mesgWordLength$EN;

  // register pmemMonW8_wsiS_operateD
  reg pmemMonW8_wsiS_operateD;
  wire pmemMonW8_wsiS_operateD$D_IN, pmemMonW8_wsiS_operateD$EN;

  // register pmemMonW8_wsiS_pMesgCount
  reg [31 : 0] pmemMonW8_wsiS_pMesgCount;
  wire [31 : 0] pmemMonW8_wsiS_pMesgCount$D_IN;
  wire pmemMonW8_wsiS_pMesgCount$EN;

  // register pmemMonW8_wsiS_peerIsReady
  reg pmemMonW8_wsiS_peerIsReady;
  wire pmemMonW8_wsiS_peerIsReady$D_IN, pmemMonW8_wsiS_peerIsReady$EN;

  // register pmemMonW8_wsiS_reqFifo_countReg
  reg [1 : 0] pmemMonW8_wsiS_reqFifo_countReg;
  wire [1 : 0] pmemMonW8_wsiS_reqFifo_countReg$D_IN;
  wire pmemMonW8_wsiS_reqFifo_countReg$EN;

  // register pmemMonW8_wsiS_reqFifo_levelsValid
  reg pmemMonW8_wsiS_reqFifo_levelsValid;
  wire pmemMonW8_wsiS_reqFifo_levelsValid$D_IN,
       pmemMonW8_wsiS_reqFifo_levelsValid$EN;

  // register pmemMonW8_wsiS_statusR
  reg [7 : 0] pmemMonW8_wsiS_statusR;
  wire [7 : 0] pmemMonW8_wsiS_statusR$D_IN;
  wire pmemMonW8_wsiS_statusR$EN;

  // register pmemMonW8_wsiS_tBusyCount
  reg [31 : 0] pmemMonW8_wsiS_tBusyCount;
  wire [31 : 0] pmemMonW8_wsiS_tBusyCount$D_IN;
  wire pmemMonW8_wsiS_tBusyCount$EN;

  // register pmemMonW8_wsiS_trafficSticky
  reg pmemMonW8_wsiS_trafficSticky;
  wire pmemMonW8_wsiS_trafficSticky$D_IN, pmemMonW8_wsiS_trafficSticky$EN;

  // register pmemMonW8_wsiS_wordCount
  reg [11 : 0] pmemMonW8_wsiS_wordCount;
  wire [11 : 0] pmemMonW8_wsiS_wordCount$D_IN;
  wire pmemMonW8_wsiS_wordCount$EN;

  // register tcGbe0_wti_nowReq
  reg [66 : 0] tcGbe0_wti_nowReq;
  wire [66 : 0] tcGbe0_wti_nowReq$D_IN;
  wire tcGbe0_wti_nowReq$EN;

  // register tcGbe0_wti_sThreadBusy_d
  reg tcGbe0_wti_sThreadBusy_d;
  wire tcGbe0_wti_sThreadBusy_d$D_IN, tcGbe0_wti_sThreadBusy_d$EN;

  // ports of submodule ctop
  wire [152 : 0] ctop$server_request_put, ctop$server_response_get;
  wire [127 : 0] ctop$wmemiM0_MData, ctop$wmemiM0_SData;
  wire [63 : 0] ctop$cpNow, ctop$wsi_s_adc_MData;
  wire [35 : 0] ctop$wmemiM0_MAddr;
  wire [31 : 0] ctop$wci_m_0_MAddr,
		ctop$wci_m_0_MData,
		ctop$wci_m_0_SData,
		ctop$wci_m_1_MAddr,
		ctop$wci_m_1_MData,
		ctop$wci_m_1_SData,
		ctop$wci_m_2_MAddr,
		ctop$wci_m_2_MData,
		ctop$wci_m_2_SData,
		ctop$wci_m_3_MAddr,
		ctop$wci_m_3_MData,
		ctop$wci_m_3_SData,
		ctop$wci_m_4_MAddr,
		ctop$wci_m_4_MData,
		ctop$wci_m_4_SData;
  wire [15 : 0] ctop$wmemiM0_MDataByteEn;
  wire [11 : 0] ctop$wmemiM0_MBurstLength, ctop$wsi_s_adc_MBurstLength;
  wire [7 : 0] ctop$wsi_s_adc_MByteEn, ctop$wsi_s_adc_MReqInfo;
  wire [3 : 0] ctop$wci_m_0_MByteEn,
	       ctop$wci_m_1_MByteEn,
	       ctop$wci_m_2_MByteEn,
	       ctop$wci_m_3_MByteEn,
	       ctop$wci_m_4_MByteEn;
  wire [2 : 0] ctop$switch_x,
	       ctop$wci_m_0_MCmd,
	       ctop$wci_m_1_MCmd,
	       ctop$wci_m_2_MCmd,
	       ctop$wci_m_3_MCmd,
	       ctop$wci_m_4_MCmd,
	       ctop$wmemiM0_MCmd,
	       ctop$wsi_s_adc_MCmd;
  wire [1 : 0] ctop$led,
	       ctop$wci_m_0_MFlag,
	       ctop$wci_m_0_SFlag,
	       ctop$wci_m_0_SResp,
	       ctop$wci_m_1_MFlag,
	       ctop$wci_m_1_SFlag,
	       ctop$wci_m_1_SResp,
	       ctop$wci_m_2_MFlag,
	       ctop$wci_m_2_SFlag,
	       ctop$wci_m_2_SResp,
	       ctop$wci_m_3_MFlag,
	       ctop$wci_m_3_SFlag,
	       ctop$wci_m_3_SResp,
	       ctop$wci_m_4_MFlag,
	       ctop$wci_m_4_SFlag,
	       ctop$wci_m_4_SResp,
	       ctop$wmemiM0_SResp;
  wire ctop$EN_server_request_put,
       ctop$EN_server_response_get,
       ctop$RDY_server_request_put,
       ctop$RDY_server_response_get,
       ctop$RST_N_wci_m_0,
       ctop$RST_N_wci_m_1,
       ctop$RST_N_wci_m_2,
       ctop$RST_N_wci_m_4,
       ctop$gps_ppsSyncIn_x,
       ctop$gps_ppsSyncOut,
       ctop$wci_m_0_MAddrSpace,
       ctop$wci_m_0_SThreadBusy,
       ctop$wci_m_1_MAddrSpace,
       ctop$wci_m_1_SThreadBusy,
       ctop$wci_m_2_MAddrSpace,
       ctop$wci_m_2_SThreadBusy,
       ctop$wci_m_3_MAddrSpace,
       ctop$wci_m_3_SThreadBusy,
       ctop$wci_m_4_MAddrSpace,
       ctop$wci_m_4_SThreadBusy,
       ctop$wmemiM0_MDataLast,
       ctop$wmemiM0_MDataValid,
       ctop$wmemiM0_MReqLast,
       ctop$wmemiM0_MReset_n,
       ctop$wmemiM0_SCmdAccept,
       ctop$wmemiM0_SDataAccept,
       ctop$wmemiM0_SRespLast,
       ctop$wsi_m_dac_SReset_n,
       ctop$wsi_m_dac_SThreadBusy,
       ctop$wsi_s_adc_MBurstPrecise,
       ctop$wsi_s_adc_MReqLast,
       ctop$wsi_s_adc_MReset_n;

  // ports of submodule dram0
  wire [127 : 0] dram0$wmemiS0_MData, dram0$wmemiS0_SData;
  wire [63 : 0] dram0$dram_io_dq;
  wire [35 : 0] dram0$wmemiS0_MAddr;
  wire [31 : 0] dram0$wciS0_MAddr, dram0$wciS0_MData, dram0$wciS0_SData;
  wire [15 : 0] dram0$wmemiS0_MDataByteEn;
  wire [12 : 0] dram0$dram_addr;
  wire [11 : 0] dram0$wmemiS0_MBurstLength;
  wire [7 : 0] dram0$dram_dm, dram0$dram_io_dqs_n, dram0$dram_io_dqs_p;
  wire [3 : 0] dram0$wciS0_MByteEn;
  wire [2 : 0] dram0$dram_ba, dram0$wciS0_MCmd, dram0$wmemiS0_MCmd;
  wire [1 : 0] dram0$wciS0_MFlag,
	       dram0$wciS0_SFlag,
	       dram0$wciS0_SResp,
	       dram0$wmemiS0_SResp;
  wire dram0$dram_cas_n,
       dram0$dram_ck_n,
       dram0$dram_ck_p,
       dram0$dram_cke,
       dram0$dram_cs_n,
       dram0$dram_odt,
       dram0$dram_ras_n,
       dram0$dram_reset_n,
       dram0$dram_we_n,
       dram0$wciS0_MAddrSpace,
       dram0$wciS0_SThreadBusy,
       dram0$wmemiS0_MDataLast,
       dram0$wmemiS0_MDataValid,
       dram0$wmemiS0_MReqLast,
       dram0$wmemiS0_MReset_n,
       dram0$wmemiS0_SCmdAccept,
       dram0$wmemiS0_SDataAccept,
       dram0$wmemiS0_SRespLast;

  // ports of submodule flash0
  wire [31 : 0] flash0$wciS0_MAddr, flash0$wciS0_MData, flash0$wciS0_SData;
  wire [23 : 0] flash0$flash_addr;
  wire [15 : 0] flash0$flash_io_dq;
  wire [3 : 0] flash0$wciS0_MByteEn;
  wire [2 : 0] flash0$wciS0_MCmd;
  wire [1 : 0] flash0$wciS0_MFlag, flash0$wciS0_SFlag, flash0$wciS0_SResp;
  wire flash0$flash_adv_n,
       flash0$flash_ce_n,
       flash0$flash_fwait_i,
       flash0$flash_oe_n,
       flash0$flash_rst_n,
       flash0$flash_we_n,
       flash0$flash_wp_n,
       flash0$wciS0_MAddrSpace,
       flash0$wciS0_SThreadBusy;

  // ports of submodule gbe0
  wire [66 : 0] gbe0$wtiS0_req;
  wire [31 : 0] gbe0$wciS0_MAddr,
		gbe0$wciS0_MData,
		gbe0$wciS0_SData,
		gbe0$wciS1_MAddr,
		gbe0$wciS1_MData,
		gbe0$wciS1_SData,
		gbe0$wsiS0_MData;
  wire [11 : 0] gbe0$wsiS0_MBurstLength;
  wire [7 : 0] gbe0$gmii_rxd_i, gbe0$gmii_txd, gbe0$wsiS0_MReqInfo;
  wire [3 : 0] gbe0$wciS0_MByteEn, gbe0$wciS1_MByteEn, gbe0$wsiS0_MByteEn;
  wire [2 : 0] gbe0$wciS0_MCmd, gbe0$wciS1_MCmd, gbe0$wsiS0_MCmd;
  wire [1 : 0] gbe0$wciS0_MFlag,
	       gbe0$wciS0_SFlag,
	       gbe0$wciS0_SResp,
	       gbe0$wciS1_MFlag,
	       gbe0$wciS1_SFlag,
	       gbe0$wciS1_SResp;
  wire gbe0$CLK_gmii_tx_clk,
       gbe0$CLK_rxclk,
       gbe0$RST_N_mrst_n,
       gbe0$gmii_rx_dv_i,
       gbe0$gmii_rx_er_i,
       gbe0$gmii_tx_en,
       gbe0$gmii_tx_er,
       gbe0$wciS0_MAddrSpace,
       gbe0$wciS0_SThreadBusy,
       gbe0$wciS1_MAddrSpace,
       gbe0$wciS1_SThreadBusy,
       gbe0$wsiM0_SReset_n,
       gbe0$wsiM0_SThreadBusy,
       gbe0$wsiS0_MBurstPrecise,
       gbe0$wsiS0_MReqLast,
       gbe0$wsiS0_MReset_n,
       gbe0$wtiS0_SThreadBusy;

  // ports of submodule icap
  wire [31 : 0] icap$wciS0_MAddr, icap$wciS0_MData, icap$wciS0_SData;
  wire [3 : 0] icap$wciS0_MByteEn;
  wire [2 : 0] icap$wciS0_MCmd;
  wire [1 : 0] icap$wciS0_MFlag, icap$wciS0_SFlag, icap$wciS0_SResp;
  wire icap$wciS0_MAddrSpace, icap$wciS0_SThreadBusy;

  // ports of submodule lcd_ctrl
  wire [127 : 0] lcd_ctrl$setLine1_text, lcd_ctrl$setLine2_text;
  wire [3 : 0] lcd_ctrl$db;
  wire lcd_ctrl$EN_setLine1,
       lcd_ctrl$EN_setLine2,
       lcd_ctrl$e,
       lcd_ctrl$rs,
       lcd_ctrl$rw;

  // ports of submodule pciw_fI2P
  wire [80 : 0] pciw_fI2P$D_IN, pciw_fI2P$D_OUT;
  wire pciw_fI2P$CLR,
       pciw_fI2P$DEQ,
       pciw_fI2P$EMPTY_N,
       pciw_fI2P$ENQ,
       pciw_fI2P$FULL_N;

  // ports of submodule pciw_fP2I
  wire [80 : 0] pciw_fP2I$D_IN, pciw_fP2I$D_OUT;
  wire pciw_fP2I$CLR,
       pciw_fP2I$DEQ,
       pciw_fP2I$EMPTY_N,
       pciw_fP2I$ENQ,
       pciw_fP2I$FULL_N;

  // ports of submodule pciw_i2pAF_dCombinedReset
  wire pciw_i2pAF_dCombinedReset$RST_OUT;

  // ports of submodule pciw_i2pAF_dCrossedsReset
  wire pciw_i2pAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule pciw_i2pAF_sCombinedReset
  wire pciw_i2pAF_sCombinedReset$RST_OUT;

  // ports of submodule pciw_i2pAF_sCrosseddReset
  wire pciw_i2pAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule pciw_p125rst
  wire pciw_p125rst$OUT_RST_N;

  // ports of submodule pciw_p250rst
  wire pciw_p250rst$OUT_RST_N;

  // ports of submodule pciw_p2iAF_dCombinedReset
  wire pciw_p2iAF_dCombinedReset$RST_OUT;

  // ports of submodule pciw_p2iAF_dCrossedsReset
  wire pciw_p2iAF_dCrossedsReset$OUT_RST_N;

  // ports of submodule pciw_p2iAF_sCombinedReset
  wire pciw_p2iAF_sCombinedReset$RST_OUT;

  // ports of submodule pciw_p2iAF_sCrosseddReset
  wire pciw_p2iAF_sCrosseddReset$OUT_RST_N;

  // ports of submodule pciw_pci0_clk
  wire pciw_pci0_clk$O;

  // ports of submodule pciw_pci0_pcie_ep
  wire [63 : 0] pciw_pci0_pcie_ep$cfg_dsn,
		pciw_pci0_pcie_ep$trn_rd,
		pciw_pci0_pcie_ep$trn_td;
  wire [47 : 0] pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header;
  wire [31 : 0] pciw_pci0_pcie_ep$cfg_di;
  wire [9 : 0] pciw_pci0_pcie_ep$cfg_dwaddr;
  wire [7 : 0] pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_di,
	       pciw_pci0_pcie_ep$cfg_interrupt_do;
  wire [6 : 0] pciw_pci0_pcie_ep$trn_rbar_hit_n;
  wire [4 : 0] pciw_pci0_pcie_ep$cfg_device_number;
  wire [3 : 0] pciw_pci0_pcie_ep$cfg_byte_en_n,
	       pciw_pci0_pcie_ep$pci_exp_rxn,
	       pciw_pci0_pcie_ep$pci_exp_rxp,
	       pciw_pci0_pcie_ep$pci_exp_txn,
	       pciw_pci0_pcie_ep$pci_exp_txp;
  wire [2 : 0] pciw_pci0_pcie_ep$cfg_function_number,
	       pciw_pci0_pcie_ep$cfg_interrupt_mmenable,
	       pciw_pci0_pcie_ep$trn_fc_sel;
  wire [1 : 0] pciw_pci0_pcie_ep$pl_directed_link_change,
	       pciw_pci0_pcie_ep$pl_directed_link_width;
  wire pciw_pci0_pcie_ep$cfg_err_cor_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_abort_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n,
       pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n,
       pciw_pci0_pcie_ep$cfg_err_ecrc_n,
       pciw_pci0_pcie_ep$cfg_err_locked_n,
       pciw_pci0_pcie_ep$cfg_err_posted_n,
       pciw_pci0_pcie_ep$cfg_err_ur_n,
       pciw_pci0_pcie_ep$cfg_interrupt_assert_n,
       pciw_pci0_pcie_ep$cfg_interrupt_msienable,
       pciw_pci0_pcie_ep$cfg_interrupt_n,
       pciw_pci0_pcie_ep$cfg_interrupt_rdy_n,
       pciw_pci0_pcie_ep$cfg_pm_wake_n,
       pciw_pci0_pcie_ep$cfg_rd_en_n,
       pciw_pci0_pcie_ep$cfg_trn_pending_n,
       pciw_pci0_pcie_ep$cfg_turnoff_ok_n,
       pciw_pci0_pcie_ep$cfg_wr_en_n,
       pciw_pci0_pcie_ep$pl_directed_link_auton,
       pciw_pci0_pcie_ep$pl_directed_link_speed,
       pciw_pci0_pcie_ep$pl_upstream_prefer_deemph,
       pciw_pci0_pcie_ep$trn2_clk,
       pciw_pci0_pcie_ep$trn_clk,
       pciw_pci0_pcie_ep$trn_lnk_up_n,
       pciw_pci0_pcie_ep$trn_rdst_rdy_n,
       pciw_pci0_pcie_ep$trn_reof_n,
       pciw_pci0_pcie_ep$trn_reset_n,
       pciw_pci0_pcie_ep$trn_rnp_ok_n,
       pciw_pci0_pcie_ep$trn_rrem_n,
       pciw_pci0_pcie_ep$trn_rsof_n,
       pciw_pci0_pcie_ep$trn_rsrc_rdy_n,
       pciw_pci0_pcie_ep$trn_tcfg_gnt_n,
       pciw_pci0_pcie_ep$trn_tdst_rdy_n,
       pciw_pci0_pcie_ep$trn_teof_n,
       pciw_pci0_pcie_ep$trn_terrfwd_n,
       pciw_pci0_pcie_ep$trn_trem_n,
       pciw_pci0_pcie_ep$trn_tsof_n,
       pciw_pci0_pcie_ep$trn_tsrc_dsc_n,
       pciw_pci0_pcie_ep$trn_tsrc_rdy_n,
       pciw_pci0_pcie_ep$trn_tstr_n;

  // ports of submodule pciw_pciDevice
  wire [15 : 0] pciw_pciDevice$dD_OUT, pciw_pciDevice$sD_IN;
  wire pciw_pciDevice$sEN, pciw_pciDevice$sRDY;

  // ports of submodule pciw_pciLinkUp
  wire pciw_pciLinkUp$dD_OUT, pciw_pciLinkUp$sD_IN, pciw_pciLinkUp$sEN;

  // ports of submodule pciw_pcie_irq_fifoAssert
  wire [7 : 0] pciw_pcie_irq_fifoAssert$dD_OUT,
	       pciw_pcie_irq_fifoAssert$sD_IN;
  wire pciw_pcie_irq_fifoAssert$dDEQ,
       pciw_pcie_irq_fifoAssert$dEMPTY_N,
       pciw_pcie_irq_fifoAssert$sENQ;

  // ports of submodule pciw_preEdge
  wire pciw_preEdge$CLK_VAL;

  // ports of submodule pmemMonW8_pmemF
  wire [33 : 0] pmemMonW8_pmemF$D_IN, pmemMonW8_pmemF$D_OUT;
  wire pmemMonW8_pmemF$CLR,
       pmemMonW8_pmemF$DEQ,
       pmemMonW8_pmemF$EMPTY_N,
       pmemMonW8_pmemF$ENQ,
       pmemMonW8_pmemF$FULL_N;

  // ports of submodule pmemMonW8_wsiS_reqFifo
  wire [60 : 0] pmemMonW8_wsiS_reqFifo$D_IN, pmemMonW8_wsiS_reqFifo$D_OUT;
  wire pmemMonW8_wsiS_reqFifo$CLR,
       pmemMonW8_wsiS_reqFifo$DEQ,
       pmemMonW8_wsiS_reqFifo$EMPTY_N,
       pmemMonW8_wsiS_reqFifo$ENQ,
       pmemMonW8_wsiS_reqFifo$FULL_N;

  // ports of submodule sys0_clk
  wire sys0_clk$O;

  // ports of submodule sys0_rst
  wire sys0_rst$OUT_RST_N;

  // ports of submodule sys1_clk
  wire sys1_clk$O;

  // ports of submodule sys1_clki
  wire sys1_clki$O;

  // ports of submodule sys1_rst
  wire sys1_rst$OUT_RST_N;

  // ports of submodule tcGbe0_now
  wire [63 : 0] tcGbe0_now$dD_OUT, tcGbe0_now$sD_IN;
  wire tcGbe0_now$sEN, tcGbe0_now$sRDY;

  // ports of submodule wciMonW8
  wire [31 : 0] wciMonW8$observe_MAddr,
		wciMonW8$observe_MData,
		wciMonW8$observe_SData,
		wciMonW8$pmem_MData;
  wire [11 : 0] wciMonW8$pmem_MBurstLength;
  wire [7 : 0] wciMonW8$pmem_MReqInfo;
  wire [3 : 0] wciMonW8$observe_MByteEn, wciMonW8$pmem_MByteEn;
  wire [2 : 0] wciMonW8$observe_MCmd, wciMonW8$pmem_MCmd;
  wire [1 : 0] wciMonW8$observe_MFlag,
	       wciMonW8$observe_SFlag,
	       wciMonW8$observe_SResp;
  wire wciMonW8$observe_MAddrSpace,
       wciMonW8$observe_MReset_n,
       wciMonW8$observe_SThreadBusy,
       wciMonW8$pmem_MBurstPrecise,
       wciMonW8$pmem_MReqLast,
       wciMonW8$pmem_MReset_n,
       wciMonW8$pmem_SReset_n,
       wciMonW8$pmem_SThreadBusy;

  // rule scheduling signals
  wire WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2,
       WILL_FIRE_RL_pciw_i2pAF_deq_update_head,
       WILL_FIRE_RL_pciw_i2pAF_enq_update_tail,
       WILL_FIRE_RL_pciw_p2iAF_deq_update_head,
       WILL_FIRE_RL_pciw_p2iAF_enq_update_tail,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done,
       WILL_FIRE_RL_pmemMonW8_gen_message_body_dw,
       WILL_FIRE_RL_pmemMonW8_get_message_head_dw,
       WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq,
       WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_pciw_p2iS$write_1__VAL_1, MUX_pciw_p2iS$write_1__VAL_2;
  wire [81 : 0] MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1,
		MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1;
  wire [80 : 0] MUX_pciw_fI2P$enq_1__VAL_1;
  wire MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1,
       MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1,
       MUX_pciw_p2iS$write_1__SEL_1,
       MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h16039, v__h17533;
  reg [7 : 0] CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2,
	      CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1,
	      IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685;
  wire [127 : 0] val_data__h5593, wOut_data__h5699;
  wire [15 : 0] val_be__h5592, wOut_be__h5698;
  wire _dor1pmemMonW8_eventCount$EN_write,
       pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100,
       z__h14554,
       z__h14561,
       z__h14568,
       z__h14575,
       z__h14582,
       z__h14589,
       z__h14596,
       z__h14603,
       z__h14610,
       z__h14617,
       z__h14624,
       z__h14631,
       z__h14638,
       z__h14645,
       z__h14652,
       z__h14659,
       z__h14666,
       z__h14673,
       z__h14680,
       z__h14687,
       z__h14694,
       z__h14701,
       z__h14708,
       z__h14715,
       z__h14722,
       z__h14729,
       z__h14736,
       z__h14743,
       z__h14750,
       z__h14757;

  // oscillator and gates for output clock p125clk
  assign p125clk = pciw_pci0_pcie_ep$trn2_clk ;
  assign CLK_GATE_p125clk = 1'b1 ;

  // oscillator and gates for output clock rxclk
  assign rxclk = gbe0$CLK_rxclk ;
  assign CLK_GATE_rxclk = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_clk
  assign gmii_tx_clk = gbe0$CLK_gmii_tx_clk ;
  assign CLK_GATE_gmii_tx_clk = 1'b1 ;

  // output resets
  assign p125rst = pciw_p125rst$OUT_RST_N ;
  assign mrst_n = gbe0$RST_N_mrst_n ;

  // value method pcie_txp
  assign pcie_txp = pciw_pci0_pcie_ep$pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pciw_pci0_pcie_ep$pci_exp_txn ;

  // value method led
  assign led =
	     { 7'd83,
	       pmemMonW8_pmGrab,
	       pmemMonW8_pmHead,
	       pmemMonW8_pmBody,
	       ctop$led,
	       pciw_pciLinkUp$dD_OUT } ;

  // value method lcd_db
  assign lcd_db = lcd_ctrl$db ;

  // value method lcd_e
  assign lcd_e = lcd_ctrl$e ;

  // value method lcd_rs
  assign lcd_rs = lcd_ctrl$rs ;

  // value method lcd_rw
  assign lcd_rw = lcd_ctrl$rw ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = ctop$gps_ppsSyncOut ;

  // value method dram_addr
  assign dram_addr = dram0$dram_addr ;

  // value method dram_ba
  assign dram_ba = dram0$dram_ba ;

  // value method dram_ras_n
  assign dram_ras_n = dram0$dram_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = dram0$dram_cas_n ;

  // value method dram_we_n
  assign dram_we_n = dram0$dram_we_n ;

  // value method dram_reset_n
  assign dram_reset_n = dram0$dram_reset_n ;

  // value method dram_cs_n
  assign dram_cs_n = dram0$dram_cs_n ;

  // value method dram_odt
  assign dram_odt = dram0$dram_odt ;

  // value method dram_cke
  assign dram_cke = dram0$dram_cke ;

  // value method dram_dm
  assign dram_dm = dram0$dram_dm ;

  // value method dram_ck_p
  assign dram_ck_p = dram0$dram_ck_p ;

  // value method dram_ck_n
  assign dram_ck_n = dram0$dram_ck_n ;

  // value method flash_addr
  assign flash_addr = flash0$flash_addr ;

  // value method flash_ce_n
  assign flash_ce_n = flash0$flash_ce_n ;

  // value method flash_oe_n
  assign flash_oe_n = flash0$flash_oe_n ;

  // value method flash_we_n
  assign flash_we_n = flash0$flash_we_n ;

  // value method flash_wp_n
  assign flash_wp_n = flash0$flash_wp_n ;

  // value method flash_rst_n
  assign flash_rst_n = flash0$flash_rst_n ;

  // value method flash_adv_n
  assign flash_adv_n = flash0$flash_adv_n ;

  // value method gmii_txd
  assign gmii_txd = gbe0$gmii_txd ;

  // value method gmii_tx_en
  assign gmii_tx_en = gbe0$gmii_tx_en ;

  // value method gmii_tx_er
  assign gmii_tx_er = gbe0$gmii_tx_er ;

  // submodule ctop
  mkCTop8B ctop(.pciDevice(pciDevice),
		.CLK_sys0_clk(sys0_clk$O),
		.RST_N_sys0_rst(sys0_rst$OUT_RST_N),
		.CLK(pciw_pci0_pcie_ep$trn2_clk),
		.RST_N(pciw_p125rst$OUT_RST_N),
		.gps_ppsSyncIn_x(ctop$gps_ppsSyncIn_x),
		.server_request_put(ctop$server_request_put),
		.switch_x(ctop$switch_x),
		.wci_m_0_SData(ctop$wci_m_0_SData),
		.wci_m_0_SFlag(ctop$wci_m_0_SFlag),
		.wci_m_0_SResp(ctop$wci_m_0_SResp),
		.wci_m_1_SData(ctop$wci_m_1_SData),
		.wci_m_1_SFlag(ctop$wci_m_1_SFlag),
		.wci_m_1_SResp(ctop$wci_m_1_SResp),
		.wci_m_2_SData(ctop$wci_m_2_SData),
		.wci_m_2_SFlag(ctop$wci_m_2_SFlag),
		.wci_m_2_SResp(ctop$wci_m_2_SResp),
		.wci_m_3_SData(ctop$wci_m_3_SData),
		.wci_m_3_SFlag(ctop$wci_m_3_SFlag),
		.wci_m_3_SResp(ctop$wci_m_3_SResp),
		.wci_m_4_SData(ctop$wci_m_4_SData),
		.wci_m_4_SFlag(ctop$wci_m_4_SFlag),
		.wci_m_4_SResp(ctop$wci_m_4_SResp),
		.wmemiM0_SData(ctop$wmemiM0_SData),
		.wmemiM0_SResp(ctop$wmemiM0_SResp),
		.wsi_s_adc_MBurstLength(ctop$wsi_s_adc_MBurstLength),
		.wsi_s_adc_MByteEn(ctop$wsi_s_adc_MByteEn),
		.wsi_s_adc_MCmd(ctop$wsi_s_adc_MCmd),
		.wsi_s_adc_MData(ctop$wsi_s_adc_MData),
		.wsi_s_adc_MReqInfo(ctop$wsi_s_adc_MReqInfo),
		.EN_server_request_put(ctop$EN_server_request_put),
		.EN_server_response_get(ctop$EN_server_response_get),
		.wci_m_0_SThreadBusy(ctop$wci_m_0_SThreadBusy),
		.wci_m_1_SThreadBusy(ctop$wci_m_1_SThreadBusy),
		.wci_m_2_SThreadBusy(ctop$wci_m_2_SThreadBusy),
		.wci_m_3_SThreadBusy(ctop$wci_m_3_SThreadBusy),
		.wci_m_4_SThreadBusy(ctop$wci_m_4_SThreadBusy),
		.wsi_s_adc_MReqLast(ctop$wsi_s_adc_MReqLast),
		.wsi_s_adc_MBurstPrecise(ctop$wsi_s_adc_MBurstPrecise),
		.wsi_s_adc_MReset_n(ctop$wsi_s_adc_MReset_n),
		.wsi_m_dac_SThreadBusy(ctop$wsi_m_dac_SThreadBusy),
		.wsi_m_dac_SReset_n(ctop$wsi_m_dac_SReset_n),
		.wmemiM0_SRespLast(ctop$wmemiM0_SRespLast),
		.wmemiM0_SCmdAccept(ctop$wmemiM0_SCmdAccept),
		.wmemiM0_SDataAccept(ctop$wmemiM0_SDataAccept),
		.RDY_server_request_put(ctop$RDY_server_request_put),
		.server_response_get(ctop$server_response_get),
		.RDY_server_response_get(ctop$RDY_server_response_get),
		.led(ctop$led),
		.wci_m_0_MCmd(ctop$wci_m_0_MCmd),
		.wci_m_0_MAddrSpace(ctop$wci_m_0_MAddrSpace),
		.wci_m_0_MByteEn(ctop$wci_m_0_MByteEn),
		.wci_m_0_MAddr(ctop$wci_m_0_MAddr),
		.wci_m_0_MData(ctop$wci_m_0_MData),
		.wci_m_0_MFlag(ctop$wci_m_0_MFlag),
		.wci_m_1_MCmd(ctop$wci_m_1_MCmd),
		.wci_m_1_MAddrSpace(ctop$wci_m_1_MAddrSpace),
		.wci_m_1_MByteEn(ctop$wci_m_1_MByteEn),
		.wci_m_1_MAddr(ctop$wci_m_1_MAddr),
		.wci_m_1_MData(ctop$wci_m_1_MData),
		.wci_m_1_MFlag(ctop$wci_m_1_MFlag),
		.wci_m_2_MCmd(ctop$wci_m_2_MCmd),
		.wci_m_2_MAddrSpace(ctop$wci_m_2_MAddrSpace),
		.wci_m_2_MByteEn(ctop$wci_m_2_MByteEn),
		.wci_m_2_MAddr(ctop$wci_m_2_MAddr),
		.wci_m_2_MData(ctop$wci_m_2_MData),
		.wci_m_2_MFlag(ctop$wci_m_2_MFlag),
		.wci_m_3_MCmd(ctop$wci_m_3_MCmd),
		.wci_m_3_MAddrSpace(ctop$wci_m_3_MAddrSpace),
		.wci_m_3_MByteEn(ctop$wci_m_3_MByteEn),
		.wci_m_3_MAddr(ctop$wci_m_3_MAddr),
		.wci_m_3_MData(ctop$wci_m_3_MData),
		.wci_m_3_MFlag(ctop$wci_m_3_MFlag),
		.wci_m_4_MCmd(ctop$wci_m_4_MCmd),
		.wci_m_4_MAddrSpace(ctop$wci_m_4_MAddrSpace),
		.wci_m_4_MByteEn(ctop$wci_m_4_MByteEn),
		.wci_m_4_MAddr(ctop$wci_m_4_MAddr),
		.wci_m_4_MData(ctop$wci_m_4_MData),
		.wci_m_4_MFlag(ctop$wci_m_4_MFlag),
		.cpNow(ctop$cpNow),
		.RDY_cpNow(),
		.wsi_s_adc_SThreadBusy(),
		.wsi_s_adc_SReset_n(),
		.wsi_m_dac_MCmd(),
		.wsi_m_dac_MReqLast(),
		.wsi_m_dac_MBurstPrecise(),
		.wsi_m_dac_MBurstLength(),
		.wsi_m_dac_MData(),
		.wsi_m_dac_MByteEn(),
		.wsi_m_dac_MReqInfo(),
		.wsi_m_dac_MReset_n(),
		.wmemiM0_MCmd(ctop$wmemiM0_MCmd),
		.wmemiM0_MReqLast(ctop$wmemiM0_MReqLast),
		.wmemiM0_MAddr(ctop$wmemiM0_MAddr),
		.wmemiM0_MBurstLength(ctop$wmemiM0_MBurstLength),
		.wmemiM0_MDataValid(ctop$wmemiM0_MDataValid),
		.wmemiM0_MDataLast(ctop$wmemiM0_MDataLast),
		.wmemiM0_MData(ctop$wmemiM0_MData),
		.wmemiM0_MDataByteEn(ctop$wmemiM0_MDataByteEn),
		.wmemiM0_MReset_n(ctop$wmemiM0_MReset_n),
		.gps_ppsSyncOut(ctop$gps_ppsSyncOut),
		.RST_N_wci_m_0(ctop$RST_N_wci_m_0),
		.RST_N_wci_m_1(ctop$RST_N_wci_m_1),
		.RST_N_wci_m_2(ctop$RST_N_wci_m_2),
		.RST_N_wci_m_3(),
		.RST_N_wci_m_4(ctop$RST_N_wci_m_4));

  // submodule dram0
  mkDramServer_v6 #(.hasDebugLogic(1'd1)) dram0(.CLK_sys0_clk(sys0_clk$O),
						.RST_N_sys0_rst(sys0_rst$OUT_RST_N),
						.wciS0_Clk(pciw_pci0_pcie_ep$trn2_clk),
						.wciS0_MReset_n(ctop$RST_N_wci_m_4),
						.wciS0_MAddr(dram0$wciS0_MAddr),
						.wciS0_MAddrSpace(dram0$wciS0_MAddrSpace),
						.wciS0_MByteEn(dram0$wciS0_MByteEn),
						.wciS0_MCmd(dram0$wciS0_MCmd),
						.wciS0_MData(dram0$wciS0_MData),
						.wciS0_MFlag(dram0$wciS0_MFlag),
						.wmemiS0_MAddr(dram0$wmemiS0_MAddr),
						.wmemiS0_MBurstLength(dram0$wmemiS0_MBurstLength),
						.wmemiS0_MCmd(dram0$wmemiS0_MCmd),
						.wmemiS0_MData(dram0$wmemiS0_MData),
						.wmemiS0_MDataByteEn(dram0$wmemiS0_MDataByteEn),
						.wmemiS0_MReqLast(dram0$wmemiS0_MReqLast),
						.wmemiS0_MDataValid(dram0$wmemiS0_MDataValid),
						.wmemiS0_MDataLast(dram0$wmemiS0_MDataLast),
						.wmemiS0_MReset_n(dram0$wmemiS0_MReset_n),
						.wciS0_SResp(dram0$wciS0_SResp),
						.wciS0_SData(dram0$wciS0_SData),
						.wciS0_SThreadBusy(dram0$wciS0_SThreadBusy),
						.wciS0_SFlag(dram0$wciS0_SFlag),
						.wmemiS0_SResp(dram0$wmemiS0_SResp),
						.wmemiS0_SRespLast(dram0$wmemiS0_SRespLast),
						.wmemiS0_SData(dram0$wmemiS0_SData),
						.wmemiS0_SCmdAccept(dram0$wmemiS0_SCmdAccept),
						.wmemiS0_SDataAccept(dram0$wmemiS0_SDataAccept),
						.dram_addr(dram0$dram_addr),
						.dram_ba(dram0$dram_ba),
						.dram_ras_n(dram0$dram_ras_n),
						.dram_cas_n(dram0$dram_cas_n),
						.dram_we_n(dram0$dram_we_n),
						.dram_reset_n(dram0$dram_reset_n),
						.dram_cs_n(dram0$dram_cs_n),
						.dram_odt(dram0$dram_odt),
						.dram_cke(dram0$dram_cke),
						.dram_dm(dram0$dram_dm),
						.dram_ck_p(dram0$dram_ck_p),
						.dram_ck_n(dram0$dram_ck_n),
						.dram_io_dq(dram_io_dq),
						.dram_io_dqs_p(dram_io_dqs_p),
						.dram_io_dqs_n(dram_io_dqs_n));

  // submodule flash0
  mkFlashWorker #(.hasDebugLogic(1'd1)) flash0(.wciS0_Clk(pciw_pci0_pcie_ep$trn2_clk),
					       .wciS0_MReset_n(ctop$RST_N_wci_m_1),
					       .flash_fwait_i(flash0$flash_fwait_i),
					       .wciS0_MAddr(flash0$wciS0_MAddr),
					       .wciS0_MAddrSpace(flash0$wciS0_MAddrSpace),
					       .wciS0_MByteEn(flash0$wciS0_MByteEn),
					       .wciS0_MCmd(flash0$wciS0_MCmd),
					       .wciS0_MData(flash0$wciS0_MData),
					       .wciS0_MFlag(flash0$wciS0_MFlag),
					       .wciS0_SResp(flash0$wciS0_SResp),
					       .wciS0_SData(flash0$wciS0_SData),
					       .wciS0_SThreadBusy(flash0$wciS0_SThreadBusy),
					       .wciS0_SFlag(flash0$wciS0_SFlag),
					       .flash_addr(flash0$flash_addr),
					       .flash_ce_n(flash0$flash_ce_n),
					       .flash_oe_n(flash0$flash_oe_n),
					       .flash_we_n(flash0$flash_we_n),
					       .flash_wp_n(flash0$flash_wp_n),
					       .flash_rst_n(flash0$flash_rst_n),
					       .flash_adv_n(flash0$flash_adv_n),
					       .flash_io_dq(flash_io_dq));

  // submodule gbe0
  mkGbeWorker #(.hasDebugLogic(1'd1)) gbe0(.CLK_gmii_rx_clk(gmii_rx_clk),
					   .CLK_sys1_clk(sys1_clk$O),
					   .RST_N_sys1_rst(sys1_rst$OUT_RST_N),
					   .wciS0_Clk(pciw_pci0_pcie_ep$trn2_clk),
					   .wciS0_MReset_n(ctop$RST_N_wci_m_2),
					   .gmii_rx_dv_i(gbe0$gmii_rx_dv_i),
					   .gmii_rx_er_i(gbe0$gmii_rx_er_i),
					   .gmii_rxd_i(gbe0$gmii_rxd_i),
					   .wciS0_MAddr(gbe0$wciS0_MAddr),
					   .wciS0_MAddrSpace(gbe0$wciS0_MAddrSpace),
					   .wciS0_MByteEn(gbe0$wciS0_MByteEn),
					   .wciS0_MCmd(gbe0$wciS0_MCmd),
					   .wciS0_MData(gbe0$wciS0_MData),
					   .wciS0_MFlag(gbe0$wciS0_MFlag),
					   .wciS1_MAddr(gbe0$wciS1_MAddr),
					   .wciS1_MAddrSpace(gbe0$wciS1_MAddrSpace),
					   .wciS1_MByteEn(gbe0$wciS1_MByteEn),
					   .wciS1_MCmd(gbe0$wciS1_MCmd),
					   .wciS1_MData(gbe0$wciS1_MData),
					   .wciS1_MFlag(gbe0$wciS1_MFlag),
					   .wsiS0_MBurstLength(gbe0$wsiS0_MBurstLength),
					   .wsiS0_MByteEn(gbe0$wsiS0_MByteEn),
					   .wsiS0_MCmd(gbe0$wsiS0_MCmd),
					   .wsiS0_MData(gbe0$wsiS0_MData),
					   .wsiS0_MReqInfo(gbe0$wsiS0_MReqInfo),
					   .wtiS0_req(gbe0$wtiS0_req),
					   .wsiM0_SThreadBusy(gbe0$wsiM0_SThreadBusy),
					   .wsiM0_SReset_n(gbe0$wsiM0_SReset_n),
					   .wsiS0_MReqLast(gbe0$wsiS0_MReqLast),
					   .wsiS0_MBurstPrecise(gbe0$wsiS0_MBurstPrecise),
					   .wsiS0_MReset_n(gbe0$wsiS0_MReset_n),
					   .wciS0_SResp(gbe0$wciS0_SResp),
					   .wciS0_SData(gbe0$wciS0_SData),
					   .wciS0_SThreadBusy(gbe0$wciS0_SThreadBusy),
					   .wciS0_SFlag(gbe0$wciS0_SFlag),
					   .wciS1_SResp(gbe0$wciS1_SResp),
					   .wciS1_SData(gbe0$wciS1_SData),
					   .wciS1_SThreadBusy(gbe0$wciS1_SThreadBusy),
					   .wciS1_SFlag(gbe0$wciS1_SFlag),
					   .wtiS0_SThreadBusy(gbe0$wtiS0_SThreadBusy),
					   .wsiM0_MCmd(),
					   .wsiM0_MReqLast(),
					   .wsiM0_MBurstPrecise(),
					   .wsiM0_MBurstLength(),
					   .wsiM0_MData(),
					   .wsiM0_MByteEn(),
					   .wsiM0_MReqInfo(),
					   .wsiM0_MReset_n(),
					   .wsiS0_SThreadBusy(),
					   .wsiS0_SReset_n(),
					   .gmii_txd(gbe0$gmii_txd),
					   .gmii_tx_en(gbe0$gmii_tx_en),
					   .gmii_tx_er(gbe0$gmii_tx_er),
					   .CLK_gmii_tx_clk(gbe0$CLK_gmii_tx_clk),
					   .CLK_GATE_gmii_tx_clk(),
					   .CLK_rxclk(gbe0$CLK_rxclk),
					   .CLK_GATE_rxclk(),
					   .RST_N_mrst_n(gbe0$RST_N_mrst_n));

  // submodule icap
  mkICAPWorker #(.isV6ICAP(1'd1),
		 .hasDebugLogic(1'd1)) icap(.wciS0_Clk(pciw_pci0_pcie_ep$trn2_clk),
					    .wciS0_MReset_n(ctop$RST_N_wci_m_0),
					    .wciS0_MAddr(icap$wciS0_MAddr),
					    .wciS0_MAddrSpace(icap$wciS0_MAddrSpace),
					    .wciS0_MByteEn(icap$wciS0_MByteEn),
					    .wciS0_MCmd(icap$wciS0_MCmd),
					    .wciS0_MData(icap$wciS0_MData),
					    .wciS0_MFlag(icap$wciS0_MFlag),
					    .wciS0_SResp(icap$wciS0_SResp),
					    .wciS0_SData(icap$wciS0_SData),
					    .wciS0_SThreadBusy(icap$wciS0_SThreadBusy),
					    .wciS0_SFlag(icap$wciS0_SFlag));

  // submodule lcd_ctrl
  mkLCDController lcd_ctrl(.CLK(pciw_pci0_pcie_ep$trn2_clk),
			   .RST_N(pciw_p125rst$OUT_RST_N),
			   .setLine1_text(lcd_ctrl$setLine1_text),
			   .setLine2_text(lcd_ctrl$setLine2_text),
			   .EN_setLine1(lcd_ctrl$EN_setLine1),
			   .EN_setLine2(lcd_ctrl$EN_setLine2),
			   .db(lcd_ctrl$db),
			   .e(lcd_ctrl$e),
			   .rs(lcd_ctrl$rs),
			   .rw(lcd_ctrl$rw));

  // submodule pciw_fI2P
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pciw_fI2P(.RST_N(pciw_p250rst$OUT_RST_N),
					 .CLK(pciw_pci0_pcie_ep$trn_clk),
					 .D_IN(pciw_fI2P$D_IN),
					 .ENQ(pciw_fI2P$ENQ),
					 .DEQ(pciw_fI2P$DEQ),
					 .CLR(pciw_fI2P$CLR),
					 .D_OUT(pciw_fI2P$D_OUT),
					 .FULL_N(pciw_fI2P$FULL_N),
					 .EMPTY_N(pciw_fI2P$EMPTY_N));

  // submodule pciw_fP2I
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pciw_fP2I(.RST_N(pciw_p250rst$OUT_RST_N),
					 .CLK(pciw_pci0_pcie_ep$trn_clk),
					 .D_IN(pciw_fP2I$D_IN),
					 .ENQ(pciw_fP2I$ENQ),
					 .DEQ(pciw_fP2I$DEQ),
					 .CLR(pciw_fP2I$CLR),
					 .D_OUT(pciw_fP2I$D_OUT),
					 .FULL_N(pciw_fP2I$FULL_N),
					 .EMPTY_N(pciw_fP2I$EMPTY_N));

  // submodule pciw_i2pAF_dCombinedReset
  ResetEither pciw_i2pAF_dCombinedReset(.A_RST(pciw_p250rst$OUT_RST_N),
					.B_RST(pciw_i2pAF_dCrossedsReset$OUT_RST_N),
					.RST_OUT(pciw_i2pAF_dCombinedReset$RST_OUT));

  // submodule pciw_i2pAF_dCrossedsReset
  SyncReset0 pciw_i2pAF_dCrossedsReset(.IN_RST_N(pciw_p125rst$OUT_RST_N),
				       .OUT_RST_N(pciw_i2pAF_dCrossedsReset$OUT_RST_N));

  // submodule pciw_i2pAF_sCombinedReset
  ResetEither pciw_i2pAF_sCombinedReset(.A_RST(pciw_p125rst$OUT_RST_N),
					.B_RST(pciw_i2pAF_sCrosseddReset$OUT_RST_N),
					.RST_OUT(pciw_i2pAF_sCombinedReset$RST_OUT));

  // submodule pciw_i2pAF_sCrosseddReset
  SyncReset0 pciw_i2pAF_sCrosseddReset(.IN_RST_N(pciw_p250rst$OUT_RST_N),
				       .OUT_RST_N(pciw_i2pAF_sCrosseddReset$OUT_RST_N));

  // submodule pciw_p125rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p125rst(.CLK(pciw_pci0_pcie_ep$trn2_clk),
					      .IN_RST_N(pciw_pci0_pcie_ep$trn_reset_n),
					      .OUT_RST_N(pciw_p125rst$OUT_RST_N));

  // submodule pciw_p250rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p250rst(.CLK(pciw_pci0_pcie_ep$trn_clk),
					      .IN_RST_N(pciw_pci0_pcie_ep$trn_reset_n),
					      .OUT_RST_N(pciw_p250rst$OUT_RST_N));

  // submodule pciw_p2iAF_dCombinedReset
  ResetEither pciw_p2iAF_dCombinedReset(.A_RST(pciw_p125rst$OUT_RST_N),
					.B_RST(pciw_p2iAF_dCrossedsReset$OUT_RST_N),
					.RST_OUT(pciw_p2iAF_dCombinedReset$RST_OUT));

  // submodule pciw_p2iAF_dCrossedsReset
  SyncReset0 pciw_p2iAF_dCrossedsReset(.IN_RST_N(pciw_p250rst$OUT_RST_N),
				       .OUT_RST_N(pciw_p2iAF_dCrossedsReset$OUT_RST_N));

  // submodule pciw_p2iAF_sCombinedReset
  ResetEither pciw_p2iAF_sCombinedReset(.A_RST(pciw_p250rst$OUT_RST_N),
					.B_RST(pciw_p2iAF_sCrosseddReset$OUT_RST_N),
					.RST_OUT(pciw_p2iAF_sCombinedReset$RST_OUT));

  // submodule pciw_p2iAF_sCrosseddReset
  SyncReset0 pciw_p2iAF_sCrosseddReset(.IN_RST_N(pciw_p125rst$OUT_RST_N),
				       .OUT_RST_N(pciw_p2iAF_sCrosseddReset$OUT_RST_N));

  // submodule pciw_pci0_clk
  IBUFDS_GTXE1 pciw_pci0_clk(.I(pci0_clkp),
			     .IB(pci0_clkn),
			     .CEB(1'd0),
			     .O(pciw_pci0_clk$O),
			     .ODIV2());

  // submodule pciw_pci0_pcie_ep
  xilinx_v6_pcie_wrapper #(.PL_FAST_TRAIN("FALSE")) pciw_pci0_pcie_ep(.sys_clk(pciw_pci0_clk$O),
								      .sys_reset_n(pci0_rstn),
								      .cfg_byte_en_n(pciw_pci0_pcie_ep$cfg_byte_en_n),
								      .cfg_di(pciw_pci0_pcie_ep$cfg_di),
								      .cfg_dsn(pciw_pci0_pcie_ep$cfg_dsn),
								      .cfg_dwaddr(pciw_pci0_pcie_ep$cfg_dwaddr),
								      .cfg_err_cor_n(pciw_pci0_pcie_ep$cfg_err_cor_n),
								      .cfg_err_cpl_abort_n(pciw_pci0_pcie_ep$cfg_err_cpl_abort_n),
								      .cfg_err_cpl_timeout_n(pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n),
								      .cfg_err_cpl_unexpect_n(pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n),
								      .cfg_err_ecrc_n(pciw_pci0_pcie_ep$cfg_err_ecrc_n),
								      .cfg_err_locked_n(pciw_pci0_pcie_ep$cfg_err_locked_n),
								      .cfg_err_posted_n(pciw_pci0_pcie_ep$cfg_err_posted_n),
								      .cfg_err_tlp_cpl_header(pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header),
								      .cfg_err_ur_n(pciw_pci0_pcie_ep$cfg_err_ur_n),
								      .cfg_interrupt_assert_n(pciw_pci0_pcie_ep$cfg_interrupt_assert_n),
								      .cfg_interrupt_di(pciw_pci0_pcie_ep$cfg_interrupt_di),
								      .cfg_interrupt_n(pciw_pci0_pcie_ep$cfg_interrupt_n),
								      .cfg_pm_wake_n(pciw_pci0_pcie_ep$cfg_pm_wake_n),
								      .cfg_rd_en_n(pciw_pci0_pcie_ep$cfg_rd_en_n),
								      .cfg_trn_pending_n(pciw_pci0_pcie_ep$cfg_trn_pending_n),
								      .cfg_turnoff_ok_n(pciw_pci0_pcie_ep$cfg_turnoff_ok_n),
								      .cfg_wr_en_n(pciw_pci0_pcie_ep$cfg_wr_en_n),
								      .pci_exp_rxn(pciw_pci0_pcie_ep$pci_exp_rxn),
								      .pci_exp_rxp(pciw_pci0_pcie_ep$pci_exp_rxp),
								      .pl_directed_link_auton(pciw_pci0_pcie_ep$pl_directed_link_auton),
								      .pl_directed_link_change(pciw_pci0_pcie_ep$pl_directed_link_change),
								      .pl_directed_link_speed(pciw_pci0_pcie_ep$pl_directed_link_speed),
								      .pl_directed_link_width(pciw_pci0_pcie_ep$pl_directed_link_width),
								      .pl_upstream_prefer_deemph(pciw_pci0_pcie_ep$pl_upstream_prefer_deemph),
								      .trn_fc_sel(pciw_pci0_pcie_ep$trn_fc_sel),
								      .trn_rdst_rdy_n(pciw_pci0_pcie_ep$trn_rdst_rdy_n),
								      .trn_rnp_ok_n(pciw_pci0_pcie_ep$trn_rnp_ok_n),
								      .trn_tcfg_gnt_n(pciw_pci0_pcie_ep$trn_tcfg_gnt_n),
								      .trn_td(pciw_pci0_pcie_ep$trn_td),
								      .trn_teof_n(pciw_pci0_pcie_ep$trn_teof_n),
								      .trn_terrfwd_n(pciw_pci0_pcie_ep$trn_terrfwd_n),
								      .trn_trem_n(pciw_pci0_pcie_ep$trn_trem_n),
								      .trn_tsof_n(pciw_pci0_pcie_ep$trn_tsof_n),
								      .trn_tsrc_dsc_n(pciw_pci0_pcie_ep$trn_tsrc_dsc_n),
								      .trn_tsrc_rdy_n(pciw_pci0_pcie_ep$trn_tsrc_rdy_n),
								      .trn_tstr_n(pciw_pci0_pcie_ep$trn_tstr_n),
								      .pci_exp_txp(pciw_pci0_pcie_ep$pci_exp_txp),
								      .pci_exp_txn(pciw_pci0_pcie_ep$pci_exp_txn),
								      .cfg_do(),
								      .cfg_rd_wr_done_n(),
								      .cfg_bus_number(pciw_pci0_pcie_ep$cfg_bus_number),
								      .cfg_device_number(pciw_pci0_pcie_ep$cfg_device_number),
								      .cfg_function_number(pciw_pci0_pcie_ep$cfg_function_number),
								      .cfg_status(),
								      .cfg_command(),
								      .cfg_dstatus(),
								      .cfg_dcommand(),
								      .cfg_dcommand2(),
								      .cfg_lstatus(),
								      .cfg_lcommand(),
								      .cfg_to_turnoff_n(),
								      .cfg_pcie_link_state_n(),
								      .cfg_pmcsr_pme_en(),
								      .cfg_pmcsr_pme_status(),
								      .cfg_pmcsr_powerstate(),
								      .trn_rsof_n(pciw_pci0_pcie_ep$trn_rsof_n),
								      .trn_reof_n(pciw_pci0_pcie_ep$trn_reof_n),
								      .trn_rd(pciw_pci0_pcie_ep$trn_rd),
								      .trn_rrem_n(pciw_pci0_pcie_ep$trn_rrem_n),
								      .trn_rerrfwd_n(),
								      .trn_rsrc_rdy_n(pciw_pci0_pcie_ep$trn_rsrc_rdy_n),
								      .trn_rsrc_dsc_n(),
								      .trn_rbar_hit_n(pciw_pci0_pcie_ep$trn_rbar_hit_n),
								      .trn_tdst_rdy_n(pciw_pci0_pcie_ep$trn_tdst_rdy_n),
								      .trn_tbuf_av(),
								      .trn_terr_drop_n(),
								      .trn_tcfg_req_n(),
								      .trn_lnk_up_n(pciw_pci0_pcie_ep$trn_lnk_up_n),
								      .trn_fc_ph(),
								      .trn_fc_pd(),
								      .trn_fc_nph(),
								      .trn_fc_npd(),
								      .trn_fc_cplh(),
								      .trn_fc_cpld(),
								      .cfg_interrupt_rdy_n(pciw_pci0_pcie_ep$cfg_interrupt_rdy_n),
								      .cfg_interrupt_do(pciw_pci0_pcie_ep$cfg_interrupt_do),
								      .cfg_interrupt_mmenable(pciw_pci0_pcie_ep$cfg_interrupt_mmenable),
								      .cfg_interrupt_msienable(pciw_pci0_pcie_ep$cfg_interrupt_msienable),
								      .cfg_interrupt_msixenable(),
								      .cfg_interrupt_msixfm(),
								      .cfg_err_cpl_rdy_n(),
								      .pl_initial_link_width(),
								      .pl_lane_reversal_mode(),
								      .pl_link_gen2_capable(),
								      .pl_link_partner_gen2_supported(),
								      .pl_link_upcfg_capable(),
								      .pl_sel_link_rate(),
								      .pl_sel_link_width(),
								      .pl_ltssm_state(),
								      .pl_received_hot_rst(),
								      .trn_clk(pciw_pci0_pcie_ep$trn_clk),
								      .trn2_clk(pciw_pci0_pcie_ep$trn2_clk),
								      .trn_reset_n(pciw_pci0_pcie_ep$trn_reset_n));

  // submodule pciw_pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciw_pciDevice(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					      .dCLK(pciw_pci0_pcie_ep$trn2_clk),
					      .sRST_N(pciw_p250rst$OUT_RST_N),
					      .sD_IN(pciw_pciDevice$sD_IN),
					      .sEN(pciw_pciDevice$sEN),
					      .dD_OUT(pciw_pciDevice$dD_OUT),
					      .sRDY(pciw_pciDevice$sRDY));

  // submodule pciw_pciLinkUp
  SyncBit #(.init(1'd0)) pciw_pciLinkUp(.sCLK(pciw_pci0_pcie_ep$trn_clk),
					.dCLK(pciw_pci0_pcie_ep$trn2_clk),
					.sRST_N(pciw_p250rst$OUT_RST_N),
					.sD_IN(pciw_pciLinkUp$sD_IN),
					.sEN(pciw_pciLinkUp$sEN),
					.dD_OUT(pciw_pciLinkUp$dD_OUT));

  // submodule pciw_pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3)) pciw_pcie_irq_fifoAssert(.sCLK(pciw_pci0_pcie_ep$trn_clk),
							 .dCLK(pciw_pci0_pcie_ep$trn_clk),
							 .sRST_N(pciw_p250rst$OUT_RST_N),
							 .sD_IN(pciw_pcie_irq_fifoAssert$sD_IN),
							 .sENQ(pciw_pcie_irq_fifoAssert$sENQ),
							 .dDEQ(pciw_pcie_irq_fifoAssert$dDEQ),
							 .dD_OUT(pciw_pcie_irq_fifoAssert$dD_OUT),
							 .sFULL_N(),
							 .dEMPTY_N(pciw_pcie_irq_fifoAssert$dEMPTY_N));

  // submodule pciw_preEdge
  ClockInvToBool pciw_preEdge(.CLK_FAST(pciw_pci0_pcie_ep$trn_clk),
			      .CLK_SLOW(pciw_pci0_pcie_ep$trn2_clk),
			      .CLK_VAL(pciw_preEdge$CLK_VAL));

  // submodule pmemMonW8_pmemF
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) pmemMonW8_pmemF(.RST_N(pciw_p125rst$OUT_RST_N),
					   .CLK(pciw_pci0_pcie_ep$trn2_clk),
					   .D_IN(pmemMonW8_pmemF$D_IN),
					   .ENQ(pmemMonW8_pmemF$ENQ),
					   .DEQ(pmemMonW8_pmemF$DEQ),
					   .CLR(pmemMonW8_pmemF$CLR),
					   .D_OUT(pmemMonW8_pmemF$D_OUT),
					   .FULL_N(pmemMonW8_pmemF$FULL_N),
					   .EMPTY_N(pmemMonW8_pmemF$EMPTY_N));

  // submodule pmemMonW8_wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pmemMonW8_wsiS_reqFifo(.RST_N(pciw_p125rst$OUT_RST_N),
						      .CLK(pciw_pci0_pcie_ep$trn2_clk),
						      .D_IN(pmemMonW8_wsiS_reqFifo$D_IN),
						      .ENQ(pmemMonW8_wsiS_reqFifo$ENQ),
						      .DEQ(pmemMonW8_wsiS_reqFifo$DEQ),
						      .CLR(pmemMonW8_wsiS_reqFifo$CLR),
						      .D_OUT(pmemMonW8_wsiS_reqFifo$D_OUT),
						      .FULL_N(pmemMonW8_wsiS_reqFifo$FULL_N),
						      .EMPTY_N(pmemMonW8_wsiS_reqFifo$EMPTY_N));

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk$O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys0_rst(.CLK(sys0_clk$O),
					  .IN_RST_N(pciw_p125rst$OUT_RST_N),
					  .OUT_RST_N(sys0_rst$OUT_RST_N));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki$O), .O(sys1_clk$O));

  // submodule sys1_clki
  IBUFDS_GTXE1 sys1_clki(.I(sys1_clkp),
			 .IB(sys1_clkn),
			 .CEB(1'd0),
			 .O(sys1_clki$O),
			 .ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk$O),
					  .IN_RST_N(pciw_p125rst$OUT_RST_N),
					  .OUT_RST_N(sys1_rst$OUT_RST_N));

  // submodule tcGbe0_now
  SyncRegister #(.width(32'd64), .init(64'd0)) tcGbe0_now(.sCLK(sys0_clk$O),
							  .dCLK(sys1_clk$O),
							  .sRST_N(sys0_rst$OUT_RST_N),
							  .sD_IN(tcGbe0_now$sD_IN),
							  .sEN(tcGbe0_now$sEN),
							  .dD_OUT(tcGbe0_now$dD_OUT),
							  .sRDY(tcGbe0_now$sRDY));

  // submodule wciMonW8
  mkWciMonitor #(.monId(8'h42)) wciMonW8(.CLK(pciw_pci0_pcie_ep$trn2_clk),
					 .RST_N(pciw_p125rst$OUT_RST_N),
					 .observe_MAddr(wciMonW8$observe_MAddr),
					 .observe_MAddrSpace(wciMonW8$observe_MAddrSpace),
					 .observe_MByteEn(wciMonW8$observe_MByteEn),
					 .observe_MCmd(wciMonW8$observe_MCmd),
					 .observe_MData(wciMonW8$observe_MData),
					 .observe_MFlag(wciMonW8$observe_MFlag),
					 .observe_MReset_n(wciMonW8$observe_MReset_n),
					 .observe_SData(wciMonW8$observe_SData),
					 .observe_SFlag(wciMonW8$observe_SFlag),
					 .observe_SResp(wciMonW8$observe_SResp),
					 .observe_SThreadBusy(wciMonW8$observe_SThreadBusy),
					 .pmem_SThreadBusy(wciMonW8$pmem_SThreadBusy),
					 .pmem_SReset_n(wciMonW8$pmem_SReset_n),
					 .pmem_MCmd(wciMonW8$pmem_MCmd),
					 .pmem_MReqLast(wciMonW8$pmem_MReqLast),
					 .pmem_MBurstPrecise(wciMonW8$pmem_MBurstPrecise),
					 .pmem_MBurstLength(wciMonW8$pmem_MBurstLength),
					 .pmem_MData(wciMonW8$pmem_MData),
					 .pmem_MByteEn(wciMonW8$pmem_MByteEn),
					 .pmem_MReqInfo(wciMonW8$pmem_MReqInfo),
					 .pmem_MReset_n(wciMonW8$pmem_MReset_n));

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt =
	     pciw_pcie_irq_fifoAssert$dEMPTY_N && pciw_pcie_irq_rMSIEnabled &&
	     !pciw_pcie_irq_rInterrupting &&
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done =
	     pciw_pcie_irq_rMSIEnabled && pciw_pcie_irq_rInterrupting &&
	     !pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;

  // rule RL_pciw_p2iAF_deq_update_head
  assign WILL_FIRE_RL_pciw_p2iAF_deq_update_head =
	     !pciw_p2iAF_dInReset_isInReset && pciw_p2iAF_deq_pw$whas ;

  // rule RL_pciw_i2pAF_enq_update_tail
  assign WILL_FIRE_RL_pciw_i2pAF_enq_update_tail =
	     !pciw_i2pAF_sInReset_isInReset && pciw_i2pAF_enq_pw$whas ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     pciw_fP2I$EMPTY_N &&
	     (!pciw_fP2I$D_OUT[79] ||
	      pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100) &&
	     !pciw_Prelude_inst_changeSpecialWires_1_rg[81] ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100 &&
	     pciw_fP2I$EMPTY_N &&
	     pciw_Prelude_inst_changeSpecialWires_1_rg[81] ;

  // rule RL_pciw_p2iAF_enq_update_tail
  assign WILL_FIRE_RL_pciw_p2iAF_enq_update_tail =
	     !pciw_p2iAF_sInReset_isInReset && pciw_p2iAF_enq_pw$whas ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 =
	     pciw_i2pAF_head_wrapped != pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_dInReset_isInReset &&
	     pciw_preEdge$CLK_VAL &&
	     pciw_fI2P$FULL_N &&
	     !pciw_Prelude_inst_changeSpecialWires_2_rg[81] ;

  // rule RL_pciw_i2pAF_deq_update_head
  assign WILL_FIRE_RL_pciw_i2pAF_deq_update_head =
	     !pciw_i2pAF_dInReset_isInReset &&
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 =
	     pciw_fI2P$FULL_N &&
	     pciw_Prelude_inst_changeSpecialWires_2_rg[81] ;

  // rule RL_pmemMonW8_get_message_head_dw
  assign WILL_FIRE_RL_pmemMonW8_get_message_head_dw =
	     pmemMonW8_pmemF$EMPTY_N && !pmemMonW8_pmemF$D_OUT[32] ;

  // rule RL_pmemMonW8_gen_message_body_dw
  assign WILL_FIRE_RL_pmemMonW8_gen_message_body_dw =
	     pmemMonW8_pmemF$EMPTY_N && pmemMonW8_pmemF$D_OUT[32] ;

  // rule RL_pmemMonW8_wsiS_reqFifo_enq
  assign WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq =
	     pmemMonW8_wsiS_reqFifo$FULL_N && pmemMonW8_wsiS_operateD &&
	     pmemMonW8_wsiS_peerIsReady &&
	     pmemMonW8_wsiS_wsiReq$wget[60:58] == 3'd1 ;

  // rule RL_pmemMonW8_wsiS_reqFifo_reset
  assign WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ||
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !pciw_fP2I$D_OUT[79] ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     pciw_i2pS[135:128] != 8'd0 ;
  assign MUX_pciw_p2iS$write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     pciw_fP2I$D_OUT[79] ;
  assign MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 =
	     pmemMonW8_wsiS_reqFifo$EMPTY_N && pmemMonW8_pmemF$FULL_N ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 =
	     { 1'd1, pciw_fP2I$D_OUT } ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1 =
	     { 2'd2,
	       pciw_i2pS[151:144],
	       pciw_i2pS[135:128],
	       pciw_i2pS[63:0] } ;
  assign MUX_pciw_fI2P$enq_1__VAL_1 =
	     (pciw_i2pS[135:128] == 8'd0) ?
	       { pciw_i2pS[152:136], pciw_i2pS[127:64] } :
	       { pciw_i2pS[152],
		 1'd0,
		 pciw_i2pS[150:136],
		 pciw_i2pS[127:64] } ;
  assign MUX_pciw_p2iS$write_1__VAL_1 =
	     { pciw_fP2I$D_OUT[80:72], val_be__h5592, val_data__h5593 } ;
  assign MUX_pciw_p2iS$write_1__VAL_2 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[80],
	       pciw_fP2I$D_OUT[79],
	       pciw_Prelude_inst_changeSpecialWires_1_rg[78:72],
	       wOut_be__h5698,
	       wOut_data__h5699 } ;

  // inlined wires
  assign pciw_pcie_irq_wInterruptRdyN$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_rdy_n ;
  assign pciw_pcie_irq_wInterruptRdyN$whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptDo$wget =
	     pciw_pci0_pcie_ep$cfg_interrupt_do ;
  assign pciw_pcie_irq_wInterruptDo$whas = 1'd1 ;
  assign pmemMonW8_wsiS_wsiReq$wget =
	     { wciMonW8$pmem_MCmd,
	       wciMonW8$pmem_MReqLast,
	       wciMonW8$pmem_MBurstPrecise,
	       wciMonW8$pmem_MBurstLength,
	       wciMonW8$pmem_MData,
	       wciMonW8$pmem_MByteEn,
	       wciMonW8$pmem_MReqInfo } ;
  assign pmemMonW8_wsiS_wsiReq$whas = 1'd1 ;
  assign pmemMonW8_wsiS_operateD_1$wget = 1'd1 ;
  assign pmemMonW8_wsiS_operateD_1$whas = 1'd1 ;
  assign pmemMonW8_wsiS_peerIsReady_1$wget = 1'd1 ;
  assign pmemMonW8_wsiS_peerIsReady_1$whas = wciMonW8$pmem_MReset_n ;
  assign pmemMonW8_wsiS_sThreadBusy_dw$wget =
	     pmemMonW8_wsiS_reqFifo_countReg > 2'd1 ;
  assign pmemMonW8_wsiS_sThreadBusy_dw$whas =
	     pmemMonW8_wsiS_reqFifo_levelsValid && pmemMonW8_wsiS_operateD &&
	     pmemMonW8_wsiS_peerIsReady ;
  assign pmemMonW8_pmHead_1$wget = 1'd1 ;
  assign pmemMonW8_pmHead_1$whas =
	     WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pmemMonW8_pmBody_1$wget = 1'd1 ;
  assign pmemMonW8_pmBody_1$whas =
	     WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ;
  assign pmemMonW8_wsi_Es_mCmd_w$wget = wciMonW8$pmem_MCmd ;
  assign pmemMonW8_wsi_Es_mCmd_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mBurstLength_w$wget = wciMonW8$pmem_MBurstLength ;
  assign pmemMonW8_wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mData_w$wget = wciMonW8$pmem_MData ;
  assign pmemMonW8_wsi_Es_mData_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mByteEn_w$wget = wciMonW8$pmem_MByteEn ;
  assign pmemMonW8_wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign pmemMonW8_wsi_Es_mReqInfo_w$wget = wciMonW8$pmem_MReqInfo ;
  assign pmemMonW8_wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign pciw_pci0_pwTrnTx$whas =
	     !pciw_pci0_pcie_ep$trn_tdst_rdy_n && pciw_fI2P$EMPTY_N ;
  assign pciw_pci0_pwTrnRx$whas =
	     !pciw_pci0_pcie_ep$trn_rsrc_rdy_n && pciw_fP2I$FULL_N ;
  assign pciw_p2iAF_enq_pw$whas =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     pciw_fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;
  assign pciw_p2iAF_deq_pw$whas =
	     pciw_p2iAF_head_wrapped != pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_dInReset_isInReset &&
	     ctop$RDY_server_request_put ;
  assign pciw_p2iAF_sClear_pw$whas = 1'b0 ;
  assign pciw_p2iAF_dClear_pw$whas = 1'b0 ;
  assign pciw_p2iAF_deq_happened$whas = 1'b0 ;
  assign pciw_i2pAF_enq_pw$whas =
	     pciw_i2pAF_head_wrapped == pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_sInReset_isInReset &&
	     ctop$RDY_server_response_get ;
  assign pciw_i2pAF_deq_pw$whas =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;
  assign pciw_i2pAF_sClear_pw$whas = 1'b0 ;
  assign pciw_i2pAF_dClear_pw$whas = 1'b0 ;
  assign pciw_i2pAF_deq_happened$whas = 1'b0 ;
  assign pmemMonW8_wsiS_reqFifo_r_enq$whas =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ;
  assign pmemMonW8_wsiS_reqFifo_r_deq$whas =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMonW8_wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign pmemMonW8_wsiS_reqFifo_doResetEnq$whas =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ;
  assign pmemMonW8_wsiS_reqFifo_doResetDeq$whas =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMonW8_wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign pmemMonW8_wsi_Es_mReqLast_w$whas = wciMonW8$pmem_MReqLast ;
  assign pmemMonW8_wsi_Es_mBurstPrecise_w$whas = wciMonW8$pmem_MBurstPrecise ;
  assign pmemMonW8_wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign tcGbe0_wti_sThreadBusy_pw$whas = gbe0$wtiS0_SThreadBusy ;
  assign infLed$wget = ctop$led ;
  assign pmemMonW8_wsiS_extStatusW$wget =
	     { pmemMonW8_wsiS_pMesgCount,
	       pmemMonW8_wsiS_iMesgCount,
	       pmemMonW8_wsiS_tBusyCount } ;

  // register Prelude_inst_changeSpecialWires_1_isMReset_isInReset
  assign Prelude_inst_changeSpecialWires_1_isMReset_isInReset$D_IN = 1'd0 ;
  assign Prelude_inst_changeSpecialWires_1_isMReset_isInReset$EN =
	     Prelude_inst_changeSpecialWires_1_isMReset_isInReset ;

  // register needs_init
  assign needs_init$D_IN = 1'd0 ;
  assign needs_init$EN = needs_init ;

  // register pciDevice
  assign pciDevice$D_IN = pciw_pciDevice$dD_OUT ;
  assign pciDevice$EN = 1'd1 ;

  // register pciw_Prelude_inst_changeSpecialWires_1_rg
  assign pciw_Prelude_inst_changeSpecialWires_1_rg$D_IN =
	     MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__SEL_1 ?
	       MUX_pciw_Prelude_inst_changeSpecialWires_1_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_Prelude_inst_changeSpecialWires_1_rg$EN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !pciw_fP2I$D_OUT[79] ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // register pciw_Prelude_inst_changeSpecialWires_2_rg
  assign pciw_Prelude_inst_changeSpecialWires_2_rg$D_IN =
	     MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__SEL_1 ?
	       MUX_pciw_Prelude_inst_changeSpecialWires_2_rg$write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_Prelude_inst_changeSpecialWires_2_rg$EN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     pciw_i2pS[135:128] != 8'd0 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;

  // register pciw_i2pAF_dInReset_isInReset
  assign pciw_i2pAF_dInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_i2pAF_dInReset_isInReset$EN = pciw_i2pAF_dInReset_isInReset ;

  // register pciw_i2pAF_head_wrapped
  assign pciw_i2pAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_i2pAF_deq_update_head &&
	     !pciw_i2pAF_head_wrapped ;
  assign pciw_i2pAF_head_wrapped$EN =
	     WILL_FIRE_RL_pciw_i2pAF_deq_update_head ||
	     pciw_i2pAF_dInReset_isInReset ;

  // register pciw_i2pAF_sInReset_isInReset
  assign pciw_i2pAF_sInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_i2pAF_sInReset_isInReset$EN = pciw_i2pAF_sInReset_isInReset ;

  // register pciw_i2pAF_tail_wrapped
  assign pciw_i2pAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_i2pAF_enq_update_tail &&
	     !pciw_i2pAF_tail_wrapped ;
  assign pciw_i2pAF_tail_wrapped$EN =
	     WILL_FIRE_RL_pciw_i2pAF_enq_update_tail ||
	     pciw_i2pAF_sInReset_isInReset ;

  // register pciw_i2pS
  assign pciw_i2pS$D_IN = ctop$server_response_get ;
  assign pciw_i2pS$EN = pciw_i2pAF_enq_pw$whas ;

  // register pciw_p2iAF_dInReset_isInReset
  assign pciw_p2iAF_dInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_p2iAF_dInReset_isInReset$EN = pciw_p2iAF_dInReset_isInReset ;

  // register pciw_p2iAF_head_wrapped
  assign pciw_p2iAF_head_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_p2iAF_deq_update_head &&
	     !pciw_p2iAF_head_wrapped ;
  assign pciw_p2iAF_head_wrapped$EN =
	     WILL_FIRE_RL_pciw_p2iAF_deq_update_head ||
	     pciw_p2iAF_dInReset_isInReset ;

  // register pciw_p2iAF_sInReset_isInReset
  assign pciw_p2iAF_sInReset_isInReset$D_IN = 1'd0 ;
  assign pciw_p2iAF_sInReset_isInReset$EN = pciw_p2iAF_sInReset_isInReset ;

  // register pciw_p2iAF_tail_wrapped
  assign pciw_p2iAF_tail_wrapped$D_IN =
	     WILL_FIRE_RL_pciw_p2iAF_enq_update_tail &&
	     !pciw_p2iAF_tail_wrapped ;
  assign pciw_p2iAF_tail_wrapped$EN =
	     WILL_FIRE_RL_pciw_p2iAF_enq_update_tail ||
	     pciw_p2iAF_sInReset_isInReset ;

  // register pciw_p2iS
  assign pciw_p2iS$D_IN =
	     MUX_pciw_p2iS$write_1__SEL_1 ?
	       MUX_pciw_p2iS$write_1__VAL_1 :
	       MUX_pciw_p2iS$write_1__VAL_2 ;
  assign pciw_p2iS$EN = pciw_p2iAF_enq_pw$whas ;

  // register pciw_pcie_irq_rInterruptDi
  assign pciw_pcie_irq_rInterruptDi$D_IN = pciw_pcie_irq_fifoAssert$dD_OUT ;
  assign pciw_pcie_irq_rInterruptDi$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rInterruptN
  assign pciw_pcie_irq_rInterruptN$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;
  assign pciw_pcie_irq_rInterruptN$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pciw_pcie_irq_rInterrupting
  assign pciw_pcie_irq_rInterrupting$D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pciw_pcie_irq_rInterrupting$EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rMMEnabled
  assign pciw_pcie_irq_rMMEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_mmenable ;
  assign pciw_pcie_irq_rMMEnabled$EN = 1'd1 ;

  // register pciw_pcie_irq_rMSIEnabled
  assign pciw_pcie_irq_rMSIEnabled$D_IN =
	     pciw_pci0_pcie_ep$cfg_interrupt_msienable ;
  assign pciw_pcie_irq_rMSIEnabled$EN = 1'd1 ;

  // register pmemMonW8_eventCount
  assign pmemMonW8_eventCount$D_IN = pmemMonW8_eventCount + 32'd1 ;
  assign pmemMonW8_eventCount$EN =
	     _dor1pmemMonW8_eventCount$EN_write && pmemMonW8_pmemF$D_OUT[33] ;

  // register pmemMonW8_msgActive
  assign pmemMonW8_msgActive$D_IN = !pmemMonW8_wsiS_reqFifo$D_OUT[57] ;
  assign pmemMonW8_msgActive$EN =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register pmemMonW8_pmBody
  assign pmemMonW8_pmBody$D_IN = WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ;
  assign pmemMonW8_pmBody$EN = 1'd1 ;

  // register pmemMonW8_pmGrab
  assign pmemMonW8_pmGrab$D_IN = z__h14757 ^ pmemMonW8_pmh[31] ;
  assign pmemMonW8_pmGrab$EN = WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;

  // register pmemMonW8_pmHead
  assign pmemMonW8_pmHead$D_IN = WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pmemMonW8_pmHead$EN = 1'd1 ;

  // register pmemMonW8_pmh
  assign pmemMonW8_pmh$D_IN =
	     { pmemMonW8_pmemF$D_OUT[31:24],
	       CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2,
	       pmemMonW8_pmemF$D_OUT[15:0] } ;
  assign pmemMonW8_pmh$EN = WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;

  // register pmemMonW8_wsiS_burstKind
  assign pmemMonW8_wsiS_burstKind$D_IN =
	     (pmemMonW8_wsiS_burstKind == 2'd0) ?
	       (pmemMonW8_wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign pmemMonW8_wsiS_burstKind$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     (pmemMonW8_wsiS_burstKind == 2'd0 ||
	      (pmemMonW8_wsiS_burstKind == 2'd1 ||
	       pmemMonW8_wsiS_burstKind == 2'd2) &&
	      pmemMonW8_wsiS_wsiReq$wget[57]) ;

  // register pmemMonW8_wsiS_errorSticky
  assign pmemMonW8_wsiS_errorSticky$D_IN = 1'b0 ;
  assign pmemMonW8_wsiS_errorSticky$EN = 1'b0 ;

  // register pmemMonW8_wsiS_iMesgCount
  assign pmemMonW8_wsiS_iMesgCount$D_IN = pmemMonW8_wsiS_iMesgCount + 32'd1 ;
  assign pmemMonW8_wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_burstKind == 2'd2 &&
	     pmemMonW8_wsiS_wsiReq$wget[57] ;

  // register pmemMonW8_wsiS_isReset_isInReset
  assign pmemMonW8_wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign pmemMonW8_wsiS_isReset_isInReset$EN =
	     pmemMonW8_wsiS_isReset_isInReset ;

  // register pmemMonW8_wsiS_mesgWordLength
  assign pmemMonW8_wsiS_mesgWordLength$D_IN = pmemMonW8_wsiS_wordCount ;
  assign pmemMonW8_wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_wsiReq$wget[57] ;

  // register pmemMonW8_wsiS_operateD
  assign pmemMonW8_wsiS_operateD$D_IN = 1'b1 ;
  assign pmemMonW8_wsiS_operateD$EN = 1'd1 ;

  // register pmemMonW8_wsiS_pMesgCount
  assign pmemMonW8_wsiS_pMesgCount$D_IN = pmemMonW8_wsiS_pMesgCount + 32'd1 ;
  assign pmemMonW8_wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq &&
	     pmemMonW8_wsiS_burstKind == 2'd1 &&
	     pmemMonW8_wsiS_wsiReq$wget[57] ;

  // register pmemMonW8_wsiS_peerIsReady
  assign pmemMonW8_wsiS_peerIsReady$D_IN = wciMonW8$pmem_MReset_n ;
  assign pmemMonW8_wsiS_peerIsReady$EN = 1'd1 ;

  // register pmemMonW8_wsiS_reqFifo_countReg
  assign pmemMonW8_wsiS_reqFifo_countReg$D_IN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ?
	       pmemMonW8_wsiS_reqFifo_countReg + 2'd1 :
	       pmemMonW8_wsiS_reqFifo_countReg - 2'd1 ;
  assign pmemMonW8_wsiS_reqFifo_countReg$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq !=
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;

  // register pmemMonW8_wsiS_reqFifo_levelsValid
  assign pmemMonW8_wsiS_reqFifo_levelsValid$D_IN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset ;
  assign pmemMonW8_wsiS_reqFifo_levelsValid$EN =
	     pmemMonW8_wsiS_reqFifo$EMPTY_N && pmemMonW8_pmemF$FULL_N ||
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ||
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_reset ;

  // register pmemMonW8_wsiS_statusR
  assign pmemMonW8_wsiS_statusR$D_IN =
	     { pmemMonW8_wsiS_isReset_isInReset,
	       !pmemMonW8_wsiS_peerIsReady,
	       !pmemMonW8_wsiS_operateD,
	       pmemMonW8_wsiS_errorSticky,
	       pmemMonW8_wsiS_burstKind != 2'd0,
	       !pmemMonW8_wsiS_sThreadBusy_dw$whas ||
	       pmemMonW8_wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       pmemMonW8_wsiS_trafficSticky } ;
  assign pmemMonW8_wsiS_statusR$EN = 1'd1 ;

  // register pmemMonW8_wsiS_tBusyCount
  assign pmemMonW8_wsiS_tBusyCount$D_IN = pmemMonW8_wsiS_tBusyCount + 32'd1 ;
  assign pmemMonW8_wsiS_tBusyCount$EN =
	     pmemMonW8_wsiS_operateD && pmemMonW8_wsiS_peerIsReady &&
	     (!pmemMonW8_wsiS_sThreadBusy_dw$whas ||
	      pmemMonW8_wsiS_sThreadBusy_dw$wget) ;

  // register pmemMonW8_wsiS_trafficSticky
  assign pmemMonW8_wsiS_trafficSticky$D_IN = 1'd1 ;
  assign pmemMonW8_wsiS_trafficSticky$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ;

  // register pmemMonW8_wsiS_wordCount
  assign pmemMonW8_wsiS_wordCount$D_IN =
	     pmemMonW8_wsiS_wsiReq$wget[57] ?
	       12'd1 :
	       pmemMonW8_wsiS_wordCount + 12'd1 ;
  assign pmemMonW8_wsiS_wordCount$EN =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ;

  // register tcGbe0_wti_nowReq
  assign tcGbe0_wti_nowReq$D_IN = { 3'd1, tcGbe0_now$dD_OUT } ;
  assign tcGbe0_wti_nowReq$EN = 1'd1 ;

  // register tcGbe0_wti_sThreadBusy_d
  assign tcGbe0_wti_sThreadBusy_d$D_IN = gbe0$wtiS0_SThreadBusy ;
  assign tcGbe0_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule ctop
  assign ctop$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign ctop$server_request_put = pciw_p2iS ;
  assign ctop$switch_x = 3'h0 ;
  assign ctop$wci_m_0_SData = icap$wciS0_SData ;
  assign ctop$wci_m_0_SFlag = icap$wciS0_SFlag ;
  assign ctop$wci_m_0_SResp = icap$wciS0_SResp ;
  assign ctop$wci_m_1_SData = flash0$wciS0_SData ;
  assign ctop$wci_m_1_SFlag = flash0$wciS0_SFlag ;
  assign ctop$wci_m_1_SResp = flash0$wciS0_SResp ;
  assign ctop$wci_m_2_SData = gbe0$wciS0_SData ;
  assign ctop$wci_m_2_SFlag = gbe0$wciS0_SFlag ;
  assign ctop$wci_m_2_SResp = gbe0$wciS0_SResp ;
  assign ctop$wci_m_3_SData = gbe0$wciS1_SData ;
  assign ctop$wci_m_3_SFlag = gbe0$wciS1_SFlag ;
  assign ctop$wci_m_3_SResp = gbe0$wciS1_SResp ;
  assign ctop$wci_m_4_SData = dram0$wciS0_SData ;
  assign ctop$wci_m_4_SFlag = dram0$wciS0_SFlag ;
  assign ctop$wci_m_4_SResp = dram0$wciS0_SResp ;
  assign ctop$wmemiM0_SData = dram0$wmemiS0_SData ;
  assign ctop$wmemiM0_SResp = dram0$wmemiS0_SResp ;
  assign ctop$wsi_s_adc_MBurstLength = 12'h0 ;
  assign ctop$wsi_s_adc_MByteEn = 8'h0 ;
  assign ctop$wsi_s_adc_MCmd = 3'h0 ;
  assign ctop$wsi_s_adc_MData = 64'h0 ;
  assign ctop$wsi_s_adc_MReqInfo = 8'h0 ;
  assign ctop$EN_server_request_put =
	     pciw_p2iAF_head_wrapped != pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_dInReset_isInReset &&
	     ctop$RDY_server_request_put ;
  assign ctop$EN_server_response_get =
	     pciw_i2pAF_head_wrapped == pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_sInReset_isInReset &&
	     ctop$RDY_server_response_get ;
  assign ctop$wci_m_0_SThreadBusy = icap$wciS0_SThreadBusy ;
  assign ctop$wci_m_1_SThreadBusy = flash0$wciS0_SThreadBusy ;
  assign ctop$wci_m_2_SThreadBusy = gbe0$wciS0_SThreadBusy ;
  assign ctop$wci_m_3_SThreadBusy = gbe0$wciS1_SThreadBusy ;
  assign ctop$wci_m_4_SThreadBusy = dram0$wciS0_SThreadBusy ;
  assign ctop$wsi_s_adc_MReqLast = 1'b0 ;
  assign ctop$wsi_s_adc_MBurstPrecise = 1'b0 ;
  assign ctop$wsi_s_adc_MReset_n = 1'b0 ;
  assign ctop$wsi_m_dac_SThreadBusy = 1'b0 ;
  assign ctop$wsi_m_dac_SReset_n = 1'b0 ;
  assign ctop$wmemiM0_SRespLast = dram0$wmemiS0_SRespLast ;
  assign ctop$wmemiM0_SCmdAccept = dram0$wmemiS0_SCmdAccept ;
  assign ctop$wmemiM0_SDataAccept = dram0$wmemiS0_SDataAccept ;

  // submodule dram0
  assign dram0$wciS0_MAddr = ctop$wci_m_4_MAddr ;
  assign dram0$wciS0_MAddrSpace = ctop$wci_m_4_MAddrSpace ;
  assign dram0$wciS0_MByteEn = ctop$wci_m_4_MByteEn ;
  assign dram0$wciS0_MCmd = ctop$wci_m_4_MCmd ;
  assign dram0$wciS0_MData = ctop$wci_m_4_MData ;
  assign dram0$wciS0_MFlag = ctop$wci_m_4_MFlag ;
  assign dram0$wmemiS0_MAddr = ctop$wmemiM0_MAddr ;
  assign dram0$wmemiS0_MBurstLength = ctop$wmemiM0_MBurstLength ;
  assign dram0$wmemiS0_MCmd = ctop$wmemiM0_MCmd ;
  assign dram0$wmemiS0_MData = ctop$wmemiM0_MData ;
  assign dram0$wmemiS0_MDataByteEn = ctop$wmemiM0_MDataByteEn ;
  assign dram0$wmemiS0_MReqLast = ctop$wmemiM0_MReqLast ;
  assign dram0$wmemiS0_MDataValid = ctop$wmemiM0_MDataValid ;
  assign dram0$wmemiS0_MDataLast = ctop$wmemiM0_MDataLast ;
  assign dram0$wmemiS0_MReset_n = ctop$wmemiM0_MReset_n ;

  // submodule flash0
  assign flash0$flash_fwait_i = flash_fwait_i ;
  assign flash0$wciS0_MAddr = ctop$wci_m_1_MAddr ;
  assign flash0$wciS0_MAddrSpace = ctop$wci_m_1_MAddrSpace ;
  assign flash0$wciS0_MByteEn = ctop$wci_m_1_MByteEn ;
  assign flash0$wciS0_MCmd = ctop$wci_m_1_MCmd ;
  assign flash0$wciS0_MData = ctop$wci_m_1_MData ;
  assign flash0$wciS0_MFlag = ctop$wci_m_1_MFlag ;

  // submodule gbe0
  assign gbe0$gmii_rx_dv_i = gmii_rx_dv_i ;
  assign gbe0$gmii_rx_er_i = gmii_rx_er_i ;
  assign gbe0$gmii_rxd_i = gmii_rxd_i ;
  assign gbe0$wciS0_MAddr = ctop$wci_m_2_MAddr ;
  assign gbe0$wciS0_MAddrSpace = ctop$wci_m_2_MAddrSpace ;
  assign gbe0$wciS0_MByteEn = ctop$wci_m_2_MByteEn ;
  assign gbe0$wciS0_MCmd = ctop$wci_m_2_MCmd ;
  assign gbe0$wciS0_MData = ctop$wci_m_2_MData ;
  assign gbe0$wciS0_MFlag = ctop$wci_m_2_MFlag ;
  assign gbe0$wciS1_MAddr = ctop$wci_m_3_MAddr ;
  assign gbe0$wciS1_MAddrSpace = ctop$wci_m_3_MAddrSpace ;
  assign gbe0$wciS1_MByteEn = ctop$wci_m_3_MByteEn ;
  assign gbe0$wciS1_MCmd = ctop$wci_m_3_MCmd ;
  assign gbe0$wciS1_MData = ctop$wci_m_3_MData ;
  assign gbe0$wciS1_MFlag = ctop$wci_m_3_MFlag ;
  assign gbe0$wsiS0_MBurstLength = 12'h0 ;
  assign gbe0$wsiS0_MByteEn = 4'h0 ;
  assign gbe0$wsiS0_MCmd = 3'h0 ;
  assign gbe0$wsiS0_MData = 32'h0 ;
  assign gbe0$wsiS0_MReqInfo = 8'h0 ;
  assign gbe0$wtiS0_req =
	     tcGbe0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       tcGbe0_wti_nowReq ;
  assign gbe0$wsiM0_SThreadBusy = 1'b0 ;
  assign gbe0$wsiM0_SReset_n = 1'b0 ;
  assign gbe0$wsiS0_MReqLast = 1'b0 ;
  assign gbe0$wsiS0_MBurstPrecise = 1'b0 ;
  assign gbe0$wsiS0_MReset_n = 1'b0 ;

  // submodule icap
  assign icap$wciS0_MAddr = ctop$wci_m_0_MAddr ;
  assign icap$wciS0_MAddrSpace = ctop$wci_m_0_MAddrSpace ;
  assign icap$wciS0_MByteEn = ctop$wci_m_0_MByteEn ;
  assign icap$wciS0_MCmd = ctop$wci_m_0_MCmd ;
  assign icap$wciS0_MData = ctop$wci_m_0_MData ;
  assign icap$wciS0_MFlag = ctop$wci_m_0_MFlag ;

  // submodule lcd_ctrl
  assign lcd_ctrl$setLine1_text = 128'h202073656C75522063696D6F74412020 ;
  assign lcd_ctrl$setLine2_text = 128'h203530366C6D203A204950436E65704F ;
  assign lcd_ctrl$EN_setLine1 = needs_init ;
  assign lcd_ctrl$EN_setLine2 = needs_init ;

  // submodule pciw_fI2P
  assign pciw_fI2P$D_IN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ?
	       MUX_pciw_fI2P$enq_1__VAL_1 :
	       pciw_Prelude_inst_changeSpecialWires_2_rg[80:0] ;
  assign pciw_fI2P$ENQ =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;
  assign pciw_fI2P$DEQ = pciw_pci0_pwTrnTx$whas ;
  assign pciw_fI2P$CLR = 1'b0 ;

  // submodule pciw_fP2I
  assign pciw_fP2I$D_IN =
	     { !pciw_pci0_pcie_ep$trn_rsof_n,
	       !pciw_pci0_pcie_ep$trn_reof_n,
	       ~pciw_pci0_pcie_ep$trn_rbar_hit_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       ~pciw_pci0_pcie_ep$trn_rrem_n,
	       pciw_pci0_pcie_ep$trn_rd } ;
  assign pciw_fP2I$ENQ = pciw_pci0_pwTrnRx$whas ;
  assign pciw_fP2I$DEQ =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;
  assign pciw_fP2I$CLR = 1'b0 ;

  // submodule pciw_pci0_pcie_ep
  assign pciw_pci0_pcie_ep$cfg_byte_en_n = 4'd15 ;
  assign pciw_pci0_pcie_ep$cfg_di = 32'd0 ;
  assign pciw_pci0_pcie_ep$cfg_dsn = 64'h0000000101000A35 ;
  assign pciw_pci0_pcie_ep$cfg_dwaddr = 10'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_cor_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_abort_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_timeout_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_ecrc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_locked_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_posted_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_err_tlp_cpl_header = 48'd0 ;
  assign pciw_pci0_pcie_ep$cfg_err_ur_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_assert_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_di = pciw_pcie_irq_rInterruptDi ;
  assign pciw_pci0_pcie_ep$cfg_interrupt_n = pciw_pcie_irq_rInterruptN ;
  assign pciw_pci0_pcie_ep$cfg_pm_wake_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_rd_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_trn_pending_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_turnoff_ok_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$cfg_wr_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$pci_exp_rxn = pcie_rxn_i ;
  assign pciw_pci0_pcie_ep$pci_exp_rxp = pcie_rxp_i ;
  assign pciw_pci0_pcie_ep$pl_directed_link_auton = 1'b0 ;
  assign pciw_pci0_pcie_ep$pl_directed_link_change = 2'h0 ;
  assign pciw_pci0_pcie_ep$pl_directed_link_speed = 1'b0 ;
  assign pciw_pci0_pcie_ep$pl_directed_link_width = 2'h0 ;
  assign pciw_pci0_pcie_ep$pl_upstream_prefer_deemph = 1'b0 ;
  assign pciw_pci0_pcie_ep$trn_fc_sel = 3'h0 ;
  assign pciw_pci0_pcie_ep$trn_rdst_rdy_n = !pciw_pci0_pwTrnRx$whas ;
  assign pciw_pci0_pcie_ep$trn_rnp_ok_n = 1'd0 ;
  assign pciw_pci0_pcie_ep$trn_tcfg_gnt_n = 1'd0 ;
  assign pciw_pci0_pcie_ep$trn_td = pciw_fI2P$D_OUT[63:0] ;
  assign pciw_pci0_pcie_ep$trn_teof_n = !pciw_fI2P$D_OUT[79] ;
  assign pciw_pci0_pcie_ep$trn_terrfwd_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$trn_trem_n = pciw_fI2P$D_OUT[71:64] != 8'd255 ;
  assign pciw_pci0_pcie_ep$trn_tsof_n = !pciw_fI2P$D_OUT[80] ;
  assign pciw_pci0_pcie_ep$trn_tsrc_dsc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep$trn_tsrc_rdy_n = !pciw_pci0_pwTrnTx$whas ;
  assign pciw_pci0_pcie_ep$trn_tstr_n = 1'd1 ;

  // submodule pciw_pciDevice
  assign pciw_pciDevice$sD_IN =
	     { pciw_pci0_pcie_ep$cfg_bus_number,
	       pciw_pci0_pcie_ep$cfg_device_number,
	       pciw_pci0_pcie_ep$cfg_function_number } ;
  assign pciw_pciDevice$sEN = pciw_pciDevice$sRDY ;

  // submodule pciw_pciLinkUp
  assign pciw_pciLinkUp$sD_IN = !pciw_pci0_pcie_ep$trn_lnk_up_n ;
  assign pciw_pciLinkUp$sEN = 1'd1 ;

  // submodule pciw_pcie_irq_fifoAssert
  assign pciw_pcie_irq_fifoAssert$sD_IN = 8'h0 ;
  assign pciw_pcie_irq_fifoAssert$sENQ = 1'b0 ;
  assign pciw_pcie_irq_fifoAssert$dDEQ =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // submodule pmemMonW8_pmemF
  assign pmemMonW8_pmemF$D_IN =
	     { pmemMonW8_wsiS_reqFifo$D_OUT[57],
	       pmemMonW8_msgActive,
	       pmemMonW8_msgActive ?
		 pmemMonW8_wsiS_reqFifo$D_OUT[43:12] :
		 { pmemMonW8_wsiS_reqFifo$D_OUT[43:36],
		   CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1,
		   pmemMonW8_wsiS_reqFifo$D_OUT[27:12] } } ;
  assign pmemMonW8_pmemF$ENQ =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMonW8_pmemF$DEQ =
	     WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pmemMonW8_pmemF$CLR = 1'b0 ;

  // submodule pmemMonW8_wsiS_reqFifo
  assign pmemMonW8_wsiS_reqFifo$D_IN = pmemMonW8_wsiS_wsiReq$wget ;
  assign pmemMonW8_wsiS_reqFifo$ENQ =
	     WILL_FIRE_RL_pmemMonW8_wsiS_reqFifo_enq ;
  assign pmemMonW8_wsiS_reqFifo$DEQ =
	     MUX_pmemMonW8_wsiS_reqFifo_levelsValid$write_1__SEL_3 ;
  assign pmemMonW8_wsiS_reqFifo$CLR = 1'b0 ;

  // submodule tcGbe0_now
  assign tcGbe0_now$sD_IN = ctop$cpNow ;
  assign tcGbe0_now$sEN = tcGbe0_now$sRDY ;

  // submodule wciMonW8
  assign wciMonW8$observe_MAddr = ctop$wci_m_0_MAddr ;
  assign wciMonW8$observe_MAddrSpace = ctop$wci_m_0_MAddrSpace ;
  assign wciMonW8$observe_MByteEn = ctop$wci_m_0_MByteEn ;
  assign wciMonW8$observe_MCmd = ctop$wci_m_0_MCmd ;
  assign wciMonW8$observe_MData = ctop$wci_m_0_MData ;
  assign wciMonW8$observe_MFlag = ctop$wci_m_0_MFlag ;
  assign wciMonW8$observe_MReset_n =
	     !Prelude_inst_changeSpecialWires_1_isMReset_isInReset ;
  assign wciMonW8$observe_SData = icap$wciS0_SData ;
  assign wciMonW8$observe_SFlag = icap$wciS0_SFlag ;
  assign wciMonW8$observe_SResp = icap$wciS0_SResp ;
  assign wciMonW8$observe_SThreadBusy = icap$wciS0_SThreadBusy ;
  assign wciMonW8$pmem_SThreadBusy =
	     !pmemMonW8_wsiS_sThreadBusy_dw$whas ||
	     pmemMonW8_wsiS_sThreadBusy_dw$wget ;
  assign wciMonW8$pmem_SReset_n =
	     !pmemMonW8_wsiS_isReset_isInReset && pmemMonW8_wsiS_operateD ;

  // remaining internal signals
  assign _dor1pmemMonW8_eventCount$EN_write =
	     WILL_FIRE_RL_pmemMonW8_gen_message_body_dw ||
	     WILL_FIRE_RL_pmemMonW8_get_message_head_dw ;
  assign pciw_p2iAF_head_wrapped_crossed__1_EQ_pciw_p2i_ETC___d100 =
	     pciw_p2iAF_head_wrapped == pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_sInReset_isInReset &&
	     pciw_preEdge$CLK_VAL ;
  assign val_be__h5592 = { pciw_fP2I$D_OUT[71:64], 8'd0 } ;
  assign val_data__h5593 = { pciw_fP2I$D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign wOut_be__h5698 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[71:64],
	       pciw_fP2I$D_OUT[71:64] } ;
  assign wOut_data__h5699 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[63:0],
	       pciw_fP2I$D_OUT[63:0] } ;
  assign z__h14554 = pmemMonW8_pmh[0] ^ pmemMonW8_pmh[1] ;
  assign z__h14561 = z__h14554 ^ pmemMonW8_pmh[2] ;
  assign z__h14568 = z__h14561 ^ pmemMonW8_pmh[3] ;
  assign z__h14575 = z__h14568 ^ pmemMonW8_pmh[4] ;
  assign z__h14582 = z__h14575 ^ pmemMonW8_pmh[5] ;
  assign z__h14589 = z__h14582 ^ pmemMonW8_pmh[6] ;
  assign z__h14596 = z__h14589 ^ pmemMonW8_pmh[7] ;
  assign z__h14603 = z__h14596 ^ pmemMonW8_pmh[8] ;
  assign z__h14610 = z__h14603 ^ pmemMonW8_pmh[9] ;
  assign z__h14617 = z__h14610 ^ pmemMonW8_pmh[10] ;
  assign z__h14624 = z__h14617 ^ pmemMonW8_pmh[11] ;
  assign z__h14631 = z__h14624 ^ pmemMonW8_pmh[12] ;
  assign z__h14638 = z__h14631 ^ pmemMonW8_pmh[13] ;
  assign z__h14645 = z__h14638 ^ pmemMonW8_pmh[14] ;
  assign z__h14652 = z__h14645 ^ pmemMonW8_pmh[15] ;
  assign z__h14659 =
	     z__h14652 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[0] ;
  assign z__h14666 =
	     z__h14659 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[1] ;
  assign z__h14673 =
	     z__h14666 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[2] ;
  assign z__h14680 =
	     z__h14673 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[3] ;
  assign z__h14687 =
	     z__h14680 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[4] ;
  assign z__h14694 =
	     z__h14687 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[5] ;
  assign z__h14701 =
	     z__h14694 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[6] ;
  assign z__h14708 =
	     z__h14701 ^
	     IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685[7] ;
  assign z__h14715 = z__h14708 ^ pmemMonW8_pmh[24] ;
  assign z__h14722 = z__h14715 ^ pmemMonW8_pmh[25] ;
  assign z__h14729 = z__h14722 ^ pmemMonW8_pmh[26] ;
  assign z__h14736 = z__h14729 ^ pmemMonW8_pmh[27] ;
  assign z__h14743 = z__h14736 ^ pmemMonW8_pmh[28] ;
  assign z__h14750 = z__h14743 ^ pmemMonW8_pmh[29] ;
  assign z__h14757 = z__h14750 ^ pmemMonW8_pmh[30] ;
  always@(pmemMonW8_pmh)
  begin
    case (pmemMonW8_pmh[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160:
	  IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685 =
	      pmemMonW8_pmh[23:16];
      default: IF_pmemMonW8_pmh_90_BITS_23_TO_16_22_EQ_0_23_O_ETC___d685 =
		   8'd255;
    endcase
  end
  always@(pmemMonW8_wsiS_reqFifo$D_OUT)
  begin
    case (pmemMonW8_wsiS_reqFifo$D_OUT[35:28])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1 =
	      pmemMonW8_wsiS_reqFifo$D_OUT[35:28];
      default: CASE_pmemMonW8_wsiS_reqFifoD_OUT_BITS_35_TO_2_ETC__q1 = 8'd255;
    endcase
  end
  always@(pmemMonW8_pmemF$D_OUT)
  begin
    case (pmemMonW8_pmemF$D_OUT[23:16])
      8'd0,
      8'd1,
      8'd2,
      8'd3,
      8'd4,
      8'd5,
      8'd6,
      8'd7,
      8'd8,
      8'd9,
      8'd10,
      8'd11,
      8'd12,
      8'd13,
      8'd14,
      8'd16,
      8'd32,
      8'd48,
      8'd64,
      8'd80,
      8'd96,
      8'd97,
      8'd128,
      8'd144,
      8'd160:
	  CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2 =
	      pmemMonW8_pmemF$D_OUT[23:16];
      default: CASE_pmemMonW8_pmemFD_OUT_BITS_23_TO_16_255_0_ETC__q2 = 8'd255;
    endcase
  end

  // handling of inlined registers

  always@(posedge sys1_clk$O)
  begin
    if (!sys1_rst$OUT_RST_N)
      begin
        tcGbe0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	tcGbe0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (tcGbe0_wti_nowReq$EN)
	  tcGbe0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY tcGbe0_wti_nowReq$D_IN;
	if (tcGbe0_wti_sThreadBusy_d$EN)
	  tcGbe0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      tcGbe0_wti_sThreadBusy_d$D_IN;
      end
  end

  always@(posedge pciw_pci0_pcie_ep$trn_clk)
  begin
    if (!pciw_p250rst$OUT_RST_N)
      begin
        pciw_Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (pciw_Prelude_inst_changeSpecialWires_1_rg$EN)
	  pciw_Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	      pciw_Prelude_inst_changeSpecialWires_1_rg$D_IN;
	if (pciw_Prelude_inst_changeSpecialWires_2_rg$EN)
	  pciw_Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	      pciw_Prelude_inst_changeSpecialWires_2_rg$D_IN;
	if (pciw_i2pAF_head_wrapped$EN)
	  pciw_i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_i2pAF_head_wrapped$D_IN;
	if (pciw_p2iAF_tail_wrapped$EN)
	  pciw_p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_p2iAF_tail_wrapped$D_IN;
	if (pciw_pcie_irq_rInterruptDi$EN)
	  pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptDi$D_IN;
	if (pciw_pcie_irq_rInterruptN$EN)
	  pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptN$D_IN;
	if (pciw_pcie_irq_rInterrupting$EN)
	  pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterrupting$D_IN;
      end
    if (pciw_p2iS$EN) pciw_p2iS <= `BSV_ASSIGNMENT_DELAY pciw_p2iS$D_IN;
    if (pciw_pcie_irq_rMMEnabled$EN)
      pciw_pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMMEnabled$D_IN;
    if (pciw_pcie_irq_rMSIEnabled$EN)
      pciw_pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMSIEnabled$D_IN;
  end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk)
  begin
    if (!pciw_p125rst$OUT_RST_N)
      begin
        needs_init <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciw_i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_eventCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_msgActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_pmBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_pmHead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMonW8_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pmemMonW8_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pmemMonW8_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pmemMonW8_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pmemMonW8_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (needs_init$EN)
	  needs_init <= `BSV_ASSIGNMENT_DELAY needs_init$D_IN;
	if (pciDevice$EN) pciDevice <= `BSV_ASSIGNMENT_DELAY pciDevice$D_IN;
	if (pciw_i2pAF_tail_wrapped$EN)
	  pciw_i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_i2pAF_tail_wrapped$D_IN;
	if (pciw_p2iAF_head_wrapped$EN)
	  pciw_p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_p2iAF_head_wrapped$D_IN;
	if (pmemMonW8_eventCount$EN)
	  pmemMonW8_eventCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_eventCount$D_IN;
	if (pmemMonW8_msgActive$EN)
	  pmemMonW8_msgActive <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_msgActive$D_IN;
	if (pmemMonW8_pmBody$EN)
	  pmemMonW8_pmBody <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmBody$D_IN;
	if (pmemMonW8_pmHead$EN)
	  pmemMonW8_pmHead <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmHead$D_IN;
	if (pmemMonW8_wsiS_burstKind$EN)
	  pmemMonW8_wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_burstKind$D_IN;
	if (pmemMonW8_wsiS_errorSticky$EN)
	  pmemMonW8_wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_errorSticky$D_IN;
	if (pmemMonW8_wsiS_iMesgCount$EN)
	  pmemMonW8_wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_iMesgCount$D_IN;
	if (pmemMonW8_wsiS_operateD$EN)
	  pmemMonW8_wsiS_operateD <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_operateD$D_IN;
	if (pmemMonW8_wsiS_pMesgCount$EN)
	  pmemMonW8_wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_pMesgCount$D_IN;
	if (pmemMonW8_wsiS_peerIsReady$EN)
	  pmemMonW8_wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_peerIsReady$D_IN;
	if (pmemMonW8_wsiS_reqFifo_countReg$EN)
	  pmemMonW8_wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_reqFifo_countReg$D_IN;
	if (pmemMonW8_wsiS_reqFifo_levelsValid$EN)
	  pmemMonW8_wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_reqFifo_levelsValid$D_IN;
	if (pmemMonW8_wsiS_tBusyCount$EN)
	  pmemMonW8_wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_tBusyCount$D_IN;
	if (pmemMonW8_wsiS_trafficSticky$EN)
	  pmemMonW8_wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_trafficSticky$D_IN;
	if (pmemMonW8_wsiS_wordCount$EN)
	  pmemMonW8_wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY
	      pmemMonW8_wsiS_wordCount$D_IN;
      end
    if (pciw_i2pS$EN) pciw_i2pS <= `BSV_ASSIGNMENT_DELAY pciw_i2pS$D_IN;
    if (pmemMonW8_pmGrab$EN)
      pmemMonW8_pmGrab <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmGrab$D_IN;
    if (pmemMonW8_pmh$EN)
      pmemMonW8_pmh <= `BSV_ASSIGNMENT_DELAY pmemMonW8_pmh$D_IN;
    if (pmemMonW8_wsiS_mesgWordLength$EN)
      pmemMonW8_wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY
	  pmemMonW8_wsiS_mesgWordLength$D_IN;
    if (pmemMonW8_wsiS_statusR$EN)
      pmemMonW8_wsiS_statusR <= `BSV_ASSIGNMENT_DELAY
	  pmemMonW8_wsiS_statusR$D_IN;
  end

  always@(posedge pciw_pci0_pcie_ep$trn_clk or
	  negedge pciw_i2pAF_dCombinedReset$RST_OUT)
  if (!pciw_i2pAF_dCombinedReset$RST_OUT)
    begin
      pciw_i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_i2pAF_dInReset_isInReset$EN)
	pciw_i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_i2pAF_dInReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn_clk or
	  negedge pciw_p2iAF_sCombinedReset$RST_OUT)
  if (!pciw_p2iAF_sCombinedReset$RST_OUT)
    begin
      pciw_p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_p2iAF_sInReset_isInReset$EN)
	pciw_p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_p2iAF_sInReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk or negedge ctop$RST_N_wci_m_0)
  if (!ctop$RST_N_wci_m_0)
    begin
      Prelude_inst_changeSpecialWires_1_isMReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (Prelude_inst_changeSpecialWires_1_isMReset_isInReset$EN)
	Prelude_inst_changeSpecialWires_1_isMReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    Prelude_inst_changeSpecialWires_1_isMReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk or
	  negedge pciw_i2pAF_sCombinedReset$RST_OUT)
  if (!pciw_i2pAF_sCombinedReset$RST_OUT)
    begin
      pciw_i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_i2pAF_sInReset_isInReset$EN)
	pciw_i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_i2pAF_sInReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk or
	  negedge pciw_p2iAF_dCombinedReset$RST_OUT)
  if (!pciw_p2iAF_dCombinedReset$RST_OUT)
    begin
      pciw_p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_p2iAF_dInReset_isInReset$EN)
	pciw_p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_p2iAF_dInReset_isInReset$D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep$trn2_clk or
	  negedge pciw_p125rst$OUT_RST_N)
  if (!pciw_p125rst$OUT_RST_N)
    begin
      pmemMonW8_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pmemMonW8_wsiS_isReset_isInReset$EN)
	pmemMonW8_wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pmemMonW8_wsiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    Prelude_inst_changeSpecialWires_1_isMReset_isInReset = 1'h0;
    needs_init = 1'h0;
    pciDevice = 16'hAAAA;
    pciw_Prelude_inst_changeSpecialWires_1_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_Prelude_inst_changeSpecialWires_2_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_i2pAF_dInReset_isInReset = 1'h0;
    pciw_i2pAF_head_wrapped = 1'h0;
    pciw_i2pAF_sInReset_isInReset = 1'h0;
    pciw_i2pAF_tail_wrapped = 1'h0;
    pciw_i2pS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pciw_p2iAF_dInReset_isInReset = 1'h0;
    pciw_p2iAF_head_wrapped = 1'h0;
    pciw_p2iAF_sInReset_isInReset = 1'h0;
    pciw_p2iAF_tail_wrapped = 1'h0;
    pciw_p2iS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pciw_pcie_irq_rInterruptDi = 8'hAA;
    pciw_pcie_irq_rInterruptN = 1'h0;
    pciw_pcie_irq_rInterrupting = 1'h0;
    pciw_pcie_irq_rMMEnabled = 3'h2;
    pciw_pcie_irq_rMSIEnabled = 1'h0;
    pmemMonW8_eventCount = 32'hAAAAAAAA;
    pmemMonW8_msgActive = 1'h0;
    pmemMonW8_pmBody = 1'h0;
    pmemMonW8_pmGrab = 1'h0;
    pmemMonW8_pmHead = 1'h0;
    pmemMonW8_pmh = 32'hAAAAAAAA;
    pmemMonW8_wsiS_burstKind = 2'h2;
    pmemMonW8_wsiS_errorSticky = 1'h0;
    pmemMonW8_wsiS_iMesgCount = 32'hAAAAAAAA;
    pmemMonW8_wsiS_isReset_isInReset = 1'h0;
    pmemMonW8_wsiS_mesgWordLength = 12'hAAA;
    pmemMonW8_wsiS_operateD = 1'h0;
    pmemMonW8_wsiS_pMesgCount = 32'hAAAAAAAA;
    pmemMonW8_wsiS_peerIsReady = 1'h0;
    pmemMonW8_wsiS_reqFifo_countReg = 2'h2;
    pmemMonW8_wsiS_reqFifo_levelsValid = 1'h0;
    pmemMonW8_wsiS_statusR = 8'hAA;
    pmemMonW8_wsiS_tBusyCount = 32'hAAAAAAAA;
    pmemMonW8_wsiS_trafficSticky = 1'h0;
    pmemMonW8_wsiS_wordCount = 12'hAAA;
    tcGbe0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    tcGbe0_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge pciw_pci0_pcie_ep$trn2_clk)
  begin
    #0;
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	begin
	  v__h16039 = $time;
	  #0;
	end
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("[%0d]: %m: PMEM HEAD: ", v__h16039);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw) $write("PMEM_HEADER ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd0)
	$write("---None              ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd1)
	$write("---UnReset           ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd2)
	$write("---Reset             ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd3)
	$write("---UnAttention       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd4)
	$write("---Attention         ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd5)
	$write("---UnTerminate       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd6)
	$write("---Terminate         ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd7)
	$write("---Timeout           ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd8)
	$write("---Initialize        ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd9)
	$write("---Start             ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd10)
	$write("---Stop              ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd11)
	$write("---Release           ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd12)
	$write("---Test              ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd13)
	$write("---BeforeQuery       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd14)
	$write("---AfterConfig       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd16)
	$write("---WriteRequest      ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd32)
	$write("---ReadRequest       ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd48)
	$write("---WriteResponse     ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd64)
	$write("---ReadResponse      ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd80)
	$write("---ReqLastAsserted   ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd96)
	$write("---BPressureAssert   ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd97)
	$write("---BPressureDeassert ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd128)
	$write("---RequestError      ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd144)
	$write("---ResponseError     ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] == 8'd160)
	$write("---TransactionError  ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd0 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd1 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd2 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd3 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd4 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd5 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd6 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd7 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd8 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd9 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd10 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd11 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd12 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd13 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd14 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd16 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd32 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd48 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd64 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd80 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd96 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd97 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd128 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd144 &&
	  pmemMonW8_pmemF$D_OUT[23:16] != 8'd160)
	$write("---Pad               ");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("srcID:(%0x) ", pmemMonW8_pmemF$D_OUT[31:24]);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("srcTag:(%0x) ", pmemMonW8_pmemF$D_OUT[15:8]);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw)
	$write("info:(%0x) ", pmemMonW8_pmemF$D_OUT[7:0]);
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_get_message_head_dw) $write("\n");
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_gen_message_body_dw)
	begin
	  v__h17533 = $time;
	  #0;
	end
    if (pciw_p125rst$OUT_RST_N)
      if (WILL_FIRE_RL_pmemMonW8_gen_message_body_dw)
	$display("[%0d]: %m: PMEM BODY: srcId:%x srcTag:%x, Event Count:%d. Body Data:%0x ",
		 v__h17533,
		 pmemMonW8_pmh[31:24],
		 pmemMonW8_pmh[15:8],
		 pmemMonW8_eventCount,
		 pmemMonW8_pmemF$D_OUT[31:0]);
  end
  // synopsys translate_on
endmodule  // mkFTop_ml605

