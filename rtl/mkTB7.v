//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Fri Sep 17 17:44:44 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkTB7(CLK,
	     RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [59 : 0] wci_reqF_x_wire$wget;
  wire [33 : 0] wci_wciResponse$wget;
  wire [31 : 0] wci_Em_respData_w$wget;
  wire [1 : 0] wci_Em_resp_w$wget;
  wire wciSeqFsm_abort$wget,
       wciSeqFsm_abort$whas,
       wciSeqFsm_pw_list$whas,
       wciSeqFsm_pw_list_1$whas,
       wciSeqFsm_pw_list_10$whas,
       wciSeqFsm_pw_list_11$whas,
       wciSeqFsm_pw_list_12$whas,
       wciSeqFsm_pw_list_13$whas,
       wciSeqFsm_pw_list_14$whas,
       wciSeqFsm_pw_list_15$whas,
       wciSeqFsm_pw_list_16$whas,
       wciSeqFsm_pw_list_17$whas,
       wciSeqFsm_pw_list_18$whas,
       wciSeqFsm_pw_list_19$whas,
       wciSeqFsm_pw_list_2$whas,
       wciSeqFsm_pw_list_3$whas,
       wciSeqFsm_pw_list_4$whas,
       wciSeqFsm_pw_list_5$whas,
       wciSeqFsm_pw_list_6$whas,
       wciSeqFsm_pw_list_7$whas,
       wciSeqFsm_pw_list_8$whas,
       wciSeqFsm_pw_list_9$whas,
       wciSeqFsm_start_reg_1$wget,
       wciSeqFsm_start_reg_1$whas,
       wciSeqFsm_start_wire$wget,
       wciSeqFsm_start_wire$whas,
       wciSeqFsm_state_run_pw$whas,
       wciSeqFsm_state_start_pw$whas,
       wci_Em_respData_w$whas,
       wci_Em_resp_w$whas,
       wci_reqF_dequeueing$whas,
       wci_reqF_enqueueing$whas,
       wci_reqF_x_wire$whas,
       wci_sThreadBusy_pw$whas,
       wci_sfCapClear_1$wget,
       wci_sfCapClear_1$whas,
       wci_sfCapSet_1$wget,
       wci_sfCapSet_1$whas,
       wci_wciResponse$whas;

  // register simCycle
  reg [15 : 0] simCycle;
  wire [15 : 0] simCycle$D_IN;
  wire simCycle$EN;

  // register wciSeqFsm_start_reg
  reg wciSeqFsm_start_reg;
  wire wciSeqFsm_start_reg$D_IN, wciSeqFsm_start_reg$EN;

  // register wciSeqFsm_state_mkFSMstate
  reg [4 : 0] wciSeqFsm_state_mkFSMstate;
  reg [4 : 0] wciSeqFsm_state_mkFSMstate$D_IN;
  wire wciSeqFsm_state_mkFSMstate$EN;

  // register wciSeqFsm_state_standby
  reg wciSeqFsm_state_standby;
  wire wciSeqFsm_state_standby$D_IN, wciSeqFsm_state_standby$EN;

  // register wciSeqOnce_onceReady
  reg wciSeqOnce_onceReady;
  wire wciSeqOnce_onceReady$D_IN, wciSeqOnce_onceReady$EN;

  // register wci_busy
  reg wci_busy;
  wire wci_busy$D_IN, wci_busy$EN;

  // register wci_lastConfigAddr
  reg [32 : 0] wci_lastConfigAddr;
  wire [32 : 0] wci_lastConfigAddr$D_IN;
  wire wci_lastConfigAddr$EN;

  // register wci_lastConfigBE
  reg [4 : 0] wci_lastConfigBE;
  wire [4 : 0] wci_lastConfigBE$D_IN;
  wire wci_lastConfigBE$EN;

  // register wci_lastControlOp
  reg [3 : 0] wci_lastControlOp;
  wire [3 : 0] wci_lastControlOp$D_IN;
  wire wci_lastControlOp$EN;

  // register wci_lastOpWrite
  reg [1 : 0] wci_lastOpWrite;
  wire [1 : 0] wci_lastOpWrite$D_IN;
  wire wci_lastOpWrite$EN;

  // register wci_mFlagReg
  reg [1 : 0] wci_mFlagReg;
  wire [1 : 0] wci_mFlagReg$D_IN;
  wire wci_mFlagReg$EN;

  // register wci_reqERR
  reg [2 : 0] wci_reqERR;
  reg [2 : 0] wci_reqERR$D_IN;
  wire wci_reqERR$EN;

  // register wci_reqFAIL
  reg [2 : 0] wci_reqFAIL;
  reg [2 : 0] wci_reqFAIL$D_IN;
  wire wci_reqFAIL$EN;

  // register wci_reqF_c_r
  reg wci_reqF_c_r;
  wire wci_reqF_c_r$D_IN, wci_reqF_c_r$EN;

  // register wci_reqF_q_0
  reg [59 : 0] wci_reqF_q_0;
  reg [59 : 0] wci_reqF_q_0$D_IN;
  wire wci_reqF_q_0$EN;

  // register wci_reqPend
  reg [1 : 0] wci_reqPend;
  reg [1 : 0] wci_reqPend$D_IN;
  wire wci_reqPend$EN;

  // register wci_reqTO
  reg [2 : 0] wci_reqTO;
  reg [2 : 0] wci_reqTO$D_IN;
  wire wci_reqTO$EN;

  // register wci_respTimr
  reg [31 : 0] wci_respTimr;
  wire [31 : 0] wci_respTimr$D_IN;
  wire wci_respTimr$EN;

  // register wci_respTimrAct
  reg wci_respTimrAct;
  wire wci_respTimrAct$D_IN, wci_respTimrAct$EN;

  // register wci_sThreadBusy_d
  reg wci_sThreadBusy_d;
  wire wci_sThreadBusy_d$D_IN, wci_sThreadBusy_d$EN;

  // register wci_sfCap
  reg wci_sfCap;
  wire wci_sfCap$D_IN, wci_sfCap$EN;

  // register wci_sfCapClear
  reg wci_sfCapClear;
  wire wci_sfCapClear$D_IN, wci_sfCapClear$EN;

  // register wci_sfCapSet
  reg wci_sfCapSet;
  wire wci_sfCapSet$D_IN, wci_sfCapSet$EN;

  // register wci_slvPresent
  reg wci_slvPresent;
  wire wci_slvPresent$D_IN, wci_slvPresent$EN;

  // register wci_wReset_n
  reg wci_wReset_n;
  wire wci_wReset_n$D_IN, wci_wReset_n$EN;

  // register wci_wStatus
  reg [31 : 0] wci_wStatus;
  wire [31 : 0] wci_wStatus$D_IN;
  wire wci_wStatus$EN;

  // register wci_wTimeout
  reg [4 : 0] wci_wTimeout;
  wire [4 : 0] wci_wTimeout$D_IN;
  wire wci_wTimeout$EN;

  // ports of submodule a4ls
  wire [35 : 0] a4ls$wrData_data_value;
  wire [33 : 0] a4ls$rdResp_data;
  wire [22 : 0] a4ls$rdAddr_data_value, a4ls$wrAddr_data_value;
  wire [1 : 0] a4ls$wrResp_data;
  wire a4ls$rdAddr_ready,
       a4ls$rdAddr_valid_value,
       a4ls$rdResp_ready_value,
       a4ls$rdResp_valid,
       a4ls$wrAddr_ready,
       a4ls$wrAddr_valid_value,
       a4ls$wrData_ready,
       a4ls$wrData_valid_value,
       a4ls$wrResp_ready_value,
       a4ls$wrResp_valid;

  // ports of submodule wci2a4l
  wire [35 : 0] wci2a4l$axiM0_wrData_data;
  wire [33 : 0] wci2a4l$axiM0_rdResp_data_value;
  wire [31 : 0] wci2a4l$wciS0_MData, wci2a4l$wciS0_SData;
  wire [22 : 0] wci2a4l$axiM0_rdAddr_data, wci2a4l$axiM0_wrAddr_data;
  wire [19 : 0] wci2a4l$wciS0_MAddr;
  wire [3 : 0] wci2a4l$wciS0_MByteEn;
  wire [2 : 0] wci2a4l$wciS0_MCmd;
  wire [1 : 0] wci2a4l$axiM0_wrResp_data_value,
	       wci2a4l$wciS0_MFlag,
	       wci2a4l$wciS0_SFlag,
	       wci2a4l$wciS0_SResp;
  wire wci2a4l$axiM0_rdAddr_ready_value,
       wci2a4l$axiM0_rdAddr_valid,
       wci2a4l$axiM0_rdResp_ready,
       wci2a4l$axiM0_rdResp_valid_value,
       wci2a4l$axiM0_wrAddr_ready_value,
       wci2a4l$axiM0_wrAddr_valid,
       wci2a4l$axiM0_wrData_ready_value,
       wci2a4l$axiM0_wrData_valid,
       wci2a4l$axiM0_wrResp_ready,
       wci2a4l$axiM0_wrResp_valid_value,
       wci2a4l$wciS0_MAddrSpace,
       wci2a4l$wciS0_SThreadBusy;

  // ports of submodule wci_mReset
  wire wci_mReset$ASSERT_IN, wci_mReset$OUT_RST_N;

  // ports of submodule wci_respF
  reg [33 : 0] wci_respF$D_IN;
  wire wci_respF$CLR,
       wci_respF$DEQ,
       wci_respF$EMPTY_N,
       wci_respF$ENQ,
       wci_respF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_connect1,
       CAN_FIRE_RL_connect1_1,
       CAN_FIRE_RL_connect1_2,
       CAN_FIRE_RL_connect1_3,
       CAN_FIRE_RL_connect1_4,
       CAN_FIRE_RL_connect2,
       CAN_FIRE_RL_connect2_1,
       CAN_FIRE_RL_connect2_2,
       CAN_FIRE_RL_connect2_3,
       CAN_FIRE_RL_connect2_4,
       CAN_FIRE_RL_connect3,
       CAN_FIRE_RL_connect3_1,
       CAN_FIRE_RL_connect3_2,
       CAN_FIRE_RL_connect3_3,
       CAN_FIRE_RL_connect3_4,
       CAN_FIRE_RL_increment_simCycle,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mAddrSConnect,
       CAN_FIRE_RL_mBEConnect,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mFlagConnect,
       CAN_FIRE_RL_runWciSeq,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_terminate,
       CAN_FIRE_RL_wciSeqFsm_action_l29c3,
       CAN_FIRE_RL_wciSeqFsm_action_l30c5,
       CAN_FIRE_RL_wciSeqFsm_action_l31c10,
       CAN_FIRE_RL_wciSeqFsm_action_l33c5,
       CAN_FIRE_RL_wciSeqFsm_action_l34c8,
       CAN_FIRE_RL_wciSeqFsm_action_l35c5,
       CAN_FIRE_RL_wciSeqFsm_action_l37c5,
       CAN_FIRE_RL_wciSeqFsm_action_l38c8,
       CAN_FIRE_RL_wciSeqFsm_action_l39c5,
       CAN_FIRE_RL_wciSeqFsm_action_l41c5,
       CAN_FIRE_RL_wciSeqFsm_action_l42c8,
       CAN_FIRE_RL_wciSeqFsm_action_l43c5,
       CAN_FIRE_RL_wciSeqFsm_action_l45c5,
       CAN_FIRE_RL_wciSeqFsm_action_l46c8,
       CAN_FIRE_RL_wciSeqFsm_action_l47c5,
       CAN_FIRE_RL_wciSeqFsm_action_l49c5,
       CAN_FIRE_RL_wciSeqFsm_action_l50c8,
       CAN_FIRE_RL_wciSeqFsm_action_l51c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_1,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_10,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_11,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_12,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_13,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_14,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_15,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_16,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_17,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_2,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_3,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_4,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_6,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_7,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_9,
       CAN_FIRE_RL_wciSeqFsm_actionof_l30c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l31c10,
       CAN_FIRE_RL_wciSeqFsm_actionof_l33c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l34c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l35c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l37c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l38c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l39c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l41c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l42c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l43c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l45c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l46c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l47c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l49c5,
       CAN_FIRE_RL_wciSeqFsm_actionof_l50c8,
       CAN_FIRE_RL_wciSeqFsm_actionof_l51c5,
       CAN_FIRE_RL_wciSeqFsm_fsm_start,
       CAN_FIRE_RL_wciSeqFsm_start_reg__dreg_update,
       CAN_FIRE_RL_wciSeqFsm_state_update_standby,
       CAN_FIRE_RL_wci_Em_doAlways,
       CAN_FIRE_RL_wci_reqF_both,
       CAN_FIRE_RL_wci_reqF_decCtr,
       CAN_FIRE_RL_wci_reqF_deq,
       CAN_FIRE_RL_wci_reqF_incCtr,
       CAN_FIRE_RL_wci_sThreadBusy_reg,
       CAN_FIRE_RL_wci_sfCapClear__dreg_update,
       CAN_FIRE_RL_wci_sfCapSet__dreg_update,
       CAN_FIRE_RL_wci_sflagUpdate,
       CAN_FIRE_RL_wci_startTimer,
       CAN_FIRE_RL_wci_updateStatus,
       CAN_FIRE_RL_wci_workerReset,
       CAN_FIRE_RL_wci_wrkBusy,
       WILL_FIRE_RL_connect1,
       WILL_FIRE_RL_connect1_1,
       WILL_FIRE_RL_connect1_2,
       WILL_FIRE_RL_connect1_3,
       WILL_FIRE_RL_connect1_4,
       WILL_FIRE_RL_connect2,
       WILL_FIRE_RL_connect2_1,
       WILL_FIRE_RL_connect2_2,
       WILL_FIRE_RL_connect2_3,
       WILL_FIRE_RL_connect2_4,
       WILL_FIRE_RL_connect3,
       WILL_FIRE_RL_connect3_1,
       WILL_FIRE_RL_connect3_2,
       WILL_FIRE_RL_connect3_3,
       WILL_FIRE_RL_connect3_4,
       WILL_FIRE_RL_increment_simCycle,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mAddrSConnect,
       WILL_FIRE_RL_mBEConnect,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mFlagConnect,
       WILL_FIRE_RL_runWciSeq,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_terminate,
       WILL_FIRE_RL_wciSeqFsm_action_l29c3,
       WILL_FIRE_RL_wciSeqFsm_action_l30c5,
       WILL_FIRE_RL_wciSeqFsm_action_l31c10,
       WILL_FIRE_RL_wciSeqFsm_action_l33c5,
       WILL_FIRE_RL_wciSeqFsm_action_l34c8,
       WILL_FIRE_RL_wciSeqFsm_action_l35c5,
       WILL_FIRE_RL_wciSeqFsm_action_l37c5,
       WILL_FIRE_RL_wciSeqFsm_action_l38c8,
       WILL_FIRE_RL_wciSeqFsm_action_l39c5,
       WILL_FIRE_RL_wciSeqFsm_action_l41c5,
       WILL_FIRE_RL_wciSeqFsm_action_l42c8,
       WILL_FIRE_RL_wciSeqFsm_action_l43c5,
       WILL_FIRE_RL_wciSeqFsm_action_l45c5,
       WILL_FIRE_RL_wciSeqFsm_action_l46c8,
       WILL_FIRE_RL_wciSeqFsm_action_l47c5,
       WILL_FIRE_RL_wciSeqFsm_action_l49c5,
       WILL_FIRE_RL_wciSeqFsm_action_l50c8,
       WILL_FIRE_RL_wciSeqFsm_action_l51c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_1,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_10,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_11,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_12,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_13,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_14,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_15,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_16,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_17,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_2,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_3,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_4,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_6,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_7,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_9,
       WILL_FIRE_RL_wciSeqFsm_actionof_l30c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l31c10,
       WILL_FIRE_RL_wciSeqFsm_actionof_l33c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l34c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l35c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l37c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l38c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l39c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l41c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l42c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l43c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l45c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l46c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l47c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l49c5,
       WILL_FIRE_RL_wciSeqFsm_actionof_l50c8,
       WILL_FIRE_RL_wciSeqFsm_actionof_l51c5,
       WILL_FIRE_RL_wciSeqFsm_fsm_start,
       WILL_FIRE_RL_wciSeqFsm_start_reg__dreg_update,
       WILL_FIRE_RL_wciSeqFsm_state_update_standby,
       WILL_FIRE_RL_wci_Em_doAlways,
       WILL_FIRE_RL_wci_reqF_both,
       WILL_FIRE_RL_wci_reqF_decCtr,
       WILL_FIRE_RL_wci_reqF_deq,
       WILL_FIRE_RL_wci_reqF_incCtr,
       WILL_FIRE_RL_wci_sThreadBusy_reg,
       WILL_FIRE_RL_wci_sfCapClear__dreg_update,
       WILL_FIRE_RL_wci_sfCapSet__dreg_update,
       WILL_FIRE_RL_wci_sflagUpdate,
       WILL_FIRE_RL_wci_startTimer,
       WILL_FIRE_RL_wci_updateStatus,
       WILL_FIRE_RL_wci_workerReset,
       WILL_FIRE_RL_wci_wrkBusy;

  // inputs to muxes for submodule ports
  reg [59 : 0] MUX_wci_reqF_q_0$write_1__VAL_2;
  wire [59 : 0] MUX_wci_reqF_q_0$write_1__VAL_1;
  wire [33 : 0] MUX_wci_respF$enq_1__VAL_1;
  wire [31 : 0] MUX_wci_respTimr$write_1__VAL_2;
  wire MUX_wci_busy$write_1__PSEL_1,
       MUX_wci_busy$write_1__SEL_1,
       MUX_wci_busy$write_1__SEL_2,
       MUX_wci_lastConfigBE$write_1__SEL_1,
       MUX_wci_lastConfigBE$write_1__SEL_2,
       MUX_wci_lastControlOp$write_1__SEL_1,
       MUX_wci_lastControlOp$write_1__SEL_2,
       MUX_wci_reqF_c_r$write_1__VAL_1,
       MUX_wci_reqF_c_r$write_1__VAL_2,
       MUX_wci_reqF_q_0$write_1__SEL_2,
       MUX_wci_reqPend$write_1__PSEL_3,
       MUX_wci_reqPend$write_1__SEL_3,
       MUX_wci_reqPend$write_1__SEL_4,
       MUX_wci_respF$enq_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h28824,
	       v__h29147,
	       v__h2945,
	       v__h29966,
	       v__h30189,
	       v__h3034,
	       v__h30781,
	       v__h3123,
	       v__h31566,
	       v__h32391,
	       v__h32641,
	       v__h33280,
	       v__h3335,
	       v__h3424,
	       v__h3513,
	       v__h3730,
	       v__h3819,
	       v__h3908;
  wire [31 : 0] toCount__h2405, x__h2824;
  wire [26 : 0] IF_wci_lastControlOp_14_BIT_3_15_THEN_wci_last_ETC___d232;
  wire [3 : 0] x__h2579;
  wire NOT_wci_busy_5_6_AND_IF_wci_wReset_n_9_THEN_NO_ETC___d93,
       _dand1wci_busy$EN_write,
       _dand2wci_respF$EN_enq,
       _dor1wci_lastConfigAddr$EN_write,
       wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375;

  // submodule a4ls
  mkA4LS #(.hasDebugLogic(1'd1)) a4ls(.CLK(CLK),
				      .RST_N(wci_mReset$OUT_RST_N),
				      .rdAddr_data_value(a4ls$rdAddr_data_value),
				      .rdAddr_valid_value(a4ls$rdAddr_valid_value),
				      .rdResp_ready_value(a4ls$rdResp_ready_value),
				      .wrAddr_data_value(a4ls$wrAddr_data_value),
				      .wrAddr_valid_value(a4ls$wrAddr_valid_value),
				      .wrData_data_value(a4ls$wrData_data_value),
				      .wrData_valid_value(a4ls$wrData_valid_value),
				      .wrResp_ready_value(a4ls$wrResp_ready_value),
				      .wrAddr_ready(a4ls$wrAddr_ready),
				      .wrData_ready(a4ls$wrData_ready),
				      .wrResp_data(a4ls$wrResp_data),
				      .wrResp_valid(a4ls$wrResp_valid),
				      .rdAddr_ready(a4ls$rdAddr_ready),
				      .rdResp_data(a4ls$rdResp_data),
				      .rdResp_valid(a4ls$rdResp_valid));

  // submodule wci2a4l
  mkWCIS2A4LM #(.hasDebugLogic(1'd1)) wci2a4l(.wciS0_Clk(CLK),
					      .wciS0_MReset_n(wci_mReset$OUT_RST_N),
					      .axiM0_rdAddr_ready_value(wci2a4l$axiM0_rdAddr_ready_value),
					      .axiM0_rdResp_data_value(wci2a4l$axiM0_rdResp_data_value),
					      .axiM0_rdResp_valid_value(wci2a4l$axiM0_rdResp_valid_value),
					      .axiM0_wrAddr_ready_value(wci2a4l$axiM0_wrAddr_ready_value),
					      .axiM0_wrData_ready_value(wci2a4l$axiM0_wrData_ready_value),
					      .axiM0_wrResp_data_value(wci2a4l$axiM0_wrResp_data_value),
					      .axiM0_wrResp_valid_value(wci2a4l$axiM0_wrResp_valid_value),
					      .wciS0_MAddr(wci2a4l$wciS0_MAddr),
					      .wciS0_MAddrSpace(wci2a4l$wciS0_MAddrSpace),
					      .wciS0_MByteEn(wci2a4l$wciS0_MByteEn),
					      .wciS0_MCmd(wci2a4l$wciS0_MCmd),
					      .wciS0_MData(wci2a4l$wciS0_MData),
					      .wciS0_MFlag(wci2a4l$wciS0_MFlag),
					      .wciS0_SResp(wci2a4l$wciS0_SResp),
					      .wciS0_SData(wci2a4l$wciS0_SData),
					      .wciS0_SThreadBusy(wci2a4l$wciS0_SThreadBusy),
					      .wciS0_SFlag(wci2a4l$wciS0_SFlag),
					      .axiM0_wrAddr_data(wci2a4l$axiM0_wrAddr_data),
					      .axiM0_wrAddr_valid(wci2a4l$axiM0_wrAddr_valid),
					      .axiM0_wrData_data(wci2a4l$axiM0_wrData_data),
					      .axiM0_wrData_valid(wci2a4l$axiM0_wrData_valid),
					      .axiM0_wrResp_ready(wci2a4l$axiM0_wrResp_ready),
					      .axiM0_rdAddr_data(wci2a4l$axiM0_rdAddr_data),
					      .axiM0_rdAddr_valid(wci2a4l$axiM0_rdAddr_valid),
					      .axiM0_rdResp_ready(wci2a4l$axiM0_rdResp_ready));

  // submodule wci_mReset
  MakeResetA #(.RSTDELAY(32'd16), .init(32'd0)) wci_mReset(.CLK(CLK),
							   .RST_N(RST_N),
							   .DST_CLK(CLK),
							   .ASSERT_IN(wci_mReset$ASSERT_IN),
							   .ASSERT_OUT(),
							   .OUT_RST_N(wci_mReset$OUT_RST_N));

  // submodule wci_respF
  FIFO1 #(.width(32'd34), .guarded(32'd1)) wci_respF(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(wci_respF$D_IN),
						     .ENQ(wci_respF$ENQ),
						     .DEQ(wci_respF$DEQ),
						     .CLR(wci_respF$CLR),
						     .D_OUT(),
						     .FULL_N(wci_respF$FULL_N),
						     .EMPTY_N(wci_respF$EMPTY_N));

  // rule RL_terminate
  assign CAN_FIRE_RL_terminate = simCycle == 16'd1000 ;
  assign WILL_FIRE_RL_terminate = CAN_FIRE_RL_terminate ;

  // rule RL_increment_simCycle
  assign CAN_FIRE_RL_increment_simCycle = 1'd1 ;
  assign WILL_FIRE_RL_increment_simCycle = 1'd1 ;

  // rule RL_runWciSeq
  assign CAN_FIRE_RL_runWciSeq =
	     wciSeqOnce_onceReady &&
	     (wciSeqFsm_state_mkFSMstate == 5'd18 ||
	      wciSeqFsm_state_mkFSMstate == 5'd1 &&
	      !wciSeqFsm_state_standby) &&
	     !wciSeqFsm_start_reg ;
  assign WILL_FIRE_RL_runWciSeq = CAN_FIRE_RL_runWciSeq ;

  // rule RL_wciSeqFsm_fsm_start
  assign CAN_FIRE_RL_wciSeqFsm_fsm_start =
	     (wciSeqFsm_state_mkFSMstate == 5'd18 ||
	      wciSeqFsm_state_mkFSMstate == 5'd1 &&
	      !wciSeqFsm_state_standby) &&
	     wciSeqFsm_start_reg ;
  assign WILL_FIRE_RL_wciSeqFsm_fsm_start = CAN_FIRE_RL_wciSeqFsm_fsm_start ;

  // rule RL_wciSeqFsm_actionof_l30c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l30c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l30c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l30c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l30c5 ;

  // rule RL_wciSeqFsm_action_l30c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l30c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd1 &&
	     (CAN_FIRE_RL_wciSeqFsm_fsm_start || wciSeqFsm_state_standby) ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l30c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l30c5 ;

  // rule RL_wciSeqFsm_actionof_l31c10
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l31c10 =
	     CAN_FIRE_RL_wciSeqFsm_action_l31c10 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l31c10 =
	     CAN_FIRE_RL_wciSeqFsm_action_l31c10 ;

  // rule RL_wciSeqFsm_action_l31c10
  assign CAN_FIRE_RL_wciSeqFsm_action_l31c10 =
	     wci_slvPresent && wciSeqFsm_state_mkFSMstate == 5'd2 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l31c10 =
	     CAN_FIRE_RL_wciSeqFsm_action_l31c10 ;

  // rule RL_wciSeqFsm_actionof_l33c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l33c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l33c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l33c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l33c5 ;

  // rule RL_wciSeqFsm_action_l33c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l33c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd3 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l33c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l33c5 ;

  // rule RL_wciSeqFsm_actionof_l35c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l35c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l35c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l35c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l35c5 ;

  // rule RL_wciSeqFsm_action_l35c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l35c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd5 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l35c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l35c5 ;

  // rule RL_wciSeqFsm_actionof_l39c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l39c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l39c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l39c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l39c5 ;

  // rule RL_wciSeqFsm_actionof_l37c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l37c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l37c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l37c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l37c5 ;

  // rule RL_wciSeqFsm_action_l37c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l37c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd6 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l37c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l37c5 ;

  // rule RL_wciSeqFsm_action_l39c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l39c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd8 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l39c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l39c5 ;

  // rule RL_wciSeqFsm_actionof_l41c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l41c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd9 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l41c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l41c5 ;

  // rule RL_wciSeqFsm_action_l41c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l41c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l41c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l41c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l41c5 ;

  // rule RL_wciSeqFsm_actionof_l43c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l43c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l43c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l43c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l43c5 ;

  // rule RL_wciSeqFsm_action_l43c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l43c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd11 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l43c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l43c5 ;

  // rule RL_wciSeqFsm_actionof_l45c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l45c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l45c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l45c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l45c5 ;

  // rule RL_wciSeqFsm_action_l45c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l45c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd12 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l45c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l45c5 ;

  // rule RL_wciSeqFsm_actionof_l47c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l47c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l47c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l47c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l47c5 ;

  // rule RL_wciSeqFsm_action_l47c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l47c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd14 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l47c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l47c5 ;

  // rule RL_wciSeqFsm_actionof_l49c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l49c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l49c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l49c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l49c5 ;

  // rule RL_wciSeqFsm_action_l49c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l49c5 =
	     wciSeqFsm_state_mkFSMstate == 5'd15 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l49c5 =
	     CAN_FIRE_RL_wciSeqFsm_action_l49c5 ;

  // rule RL_wciSeqFsm_actionof_l29c3
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l51c5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l51c5 =
	     wci_respF$EMPTY_N && wciSeqFsm_state_mkFSMstate == 5'd17 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l51c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l51c5 ;

  // rule RL_wciSeqFsm_action_l51c5
  assign CAN_FIRE_RL_wciSeqFsm_action_l51c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l51c5 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l51c5 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l51c5 ;

  // rule RL_wciSeqFsm_actionof_l29c3_1
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_1 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_1 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_2
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_2 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_2 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_3
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_3 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_3 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_4
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_4 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_4 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_5
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_5 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_5 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_6
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_6 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_6 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_7
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_7 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_7 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_12
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_12 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_12 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_8 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_8 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_9
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_9 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_9 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_10
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_10 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_10 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_11
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_11 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_11 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_13
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_13 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_13 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_14
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_14 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_14 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_15
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_15 = 1'b0 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_15 = 1'b0 ;

  // rule RL_wciSeqFsm_actionof_l29c3_16
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_16 =
	     wciSeqFsm_state_mkFSMstate == 5'd18 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_16 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_16 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_wciSeqFsm_actionof_l29c3_17
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_17 =
	     wciSeqFsm_state_mkFSMstate == 5'd1 &&
	     !CAN_FIRE_RL_wciSeqFsm_fsm_start &&
	     !wciSeqFsm_state_standby ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_17 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l29c3_17 ;

  // rule RL_wciSeqFsm_action_l29c3
  assign CAN_FIRE_RL_wciSeqFsm_action_l29c3 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_17 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_16 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l29c3 =
	     CAN_FIRE_RL_wciSeqFsm_action_l29c3 ;

  // rule RL_wciSeqFsm_start_reg__dreg_update
  assign CAN_FIRE_RL_wciSeqFsm_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wciSeqFsm_start_reg__dreg_update = 1'd1 ;

  // rule RL_connect3_4
  assign CAN_FIRE_RL_connect3_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect3_4 = 1'd1 ;

  // rule RL_connect2_4
  assign CAN_FIRE_RL_connect2_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect2_4 = 1'd1 ;

  // rule RL_connect3_3
  assign CAN_FIRE_RL_connect3_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect3_3 = 1'd1 ;

  // rule RL_connect1_4
  assign CAN_FIRE_RL_connect1_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect1_4 = 1'd1 ;

  // rule RL_connect2_3
  assign CAN_FIRE_RL_connect2_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect2_3 = 1'd1 ;

  // rule RL_connect1_3
  assign CAN_FIRE_RL_connect1_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect1_3 = 1'd1 ;

  // rule RL_connect3_2
  assign CAN_FIRE_RL_connect3_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect3_2 = 1'd1 ;

  // rule RL_connect2_2
  assign CAN_FIRE_RL_connect2_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect2_2 = 1'd1 ;

  // rule RL_connect3_1
  assign CAN_FIRE_RL_connect3_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect3_1 = 1'd1 ;

  // rule RL_connect1_2
  assign CAN_FIRE_RL_connect1_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect1_2 = 1'd1 ;

  // rule RL_connect2_1
  assign CAN_FIRE_RL_connect2_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect2_1 = 1'd1 ;

  // rule RL_connect3
  assign CAN_FIRE_RL_connect3 = 1'd1 ;
  assign WILL_FIRE_RL_connect3 = 1'd1 ;

  // rule RL_connect1_1
  assign CAN_FIRE_RL_connect1_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect1_1 = 1'd1 ;

  // rule RL_connect2
  assign CAN_FIRE_RL_connect2 = 1'd1 ;
  assign WILL_FIRE_RL_connect2 = 1'd1 ;

  // rule RL_connect1
  assign CAN_FIRE_RL_connect1 = 1'd1 ;
  assign WILL_FIRE_RL_connect1 = 1'd1 ;

  // rule RL_mFlagConnect
  assign CAN_FIRE_RL_mFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect = 1'd1 ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect = wci2a4l$wciS0_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect = wci2a4l$wciS0_SThreadBusy ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mBEConnect
  assign CAN_FIRE_RL_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect = 1'd1 ;

  // rule RL_mAddrSConnect
  assign CAN_FIRE_RL_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect = 1'd1 ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_wci_updateStatus
  assign CAN_FIRE_RL_wci_updateStatus = 1'd1 ;
  assign WILL_FIRE_RL_wci_updateStatus = 1'd1 ;

  // rule RL_wciSeqFsm_actionof_l38c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l38c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l38c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l38c8 ;

  // rule RL_wciSeqFsm_action_l38c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l38c8 =
	     NOT_wci_busy_5_6_AND_IF_wci_wReset_n_9_THEN_NO_ETC___d93 &&
	     wciSeqFsm_state_mkFSMstate == 5'd7 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l38c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l38c8 ;

  // rule RL_wciSeqFsm_actionof_l42c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l42c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l42c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l42c8 ;

  // rule RL_wciSeqFsm_action_l42c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l42c8 =
	     NOT_wci_busy_5_6_AND_IF_wci_wReset_n_9_THEN_NO_ETC___d93 &&
	     wciSeqFsm_state_mkFSMstate == 5'd10 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l42c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l42c8 ;

  // rule RL_wciSeqFsm_actionof_l46c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l46c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l46c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l46c8 ;

  // rule RL_wciSeqFsm_action_l46c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l46c8 =
	     NOT_wci_busy_5_6_AND_IF_wci_wReset_n_9_THEN_NO_ETC___d93 &&
	     wciSeqFsm_state_mkFSMstate == 5'd13 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l46c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l46c8 ;

  // rule RL_wciSeqFsm_actionof_l50c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l50c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l50c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l50c8 ;

  // rule RL_wciSeqFsm_action_l50c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l50c8 =
	     NOT_wci_busy_5_6_AND_IF_wci_wReset_n_9_THEN_NO_ETC___d93 &&
	     wciSeqFsm_state_mkFSMstate == 5'd16 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l50c8 =
	     CAN_FIRE_RL_wciSeqFsm_action_l50c8 ;

  // rule RL_wci_Em_doAlways
  assign CAN_FIRE_RL_wci_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_wci_Em_doAlways = 1'd1 ;

  // rule RL_wci_sflagUpdate
  assign CAN_FIRE_RL_wci_sflagUpdate = 1'd1 ;
  assign WILL_FIRE_RL_wci_sflagUpdate = 1'd1 ;

  // rule RL_wci_wrkBusy
  assign CAN_FIRE_RL_wci_wrkBusy =
	     ((wci_wciResponse$wget[33:32] == 2'd0) ?
		wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 ||
		wci_respF$FULL_N :
		wci_respF$FULL_N) &&
	     wci_busy ;
  assign WILL_FIRE_RL_wci_wrkBusy = CAN_FIRE_RL_wci_wrkBusy ;

  // rule RL_wci_startTimer
  assign CAN_FIRE_RL_wci_startTimer = wci_reqF_c_r ;
  assign WILL_FIRE_RL_wci_startTimer = wci_reqF_c_r ;

  // rule RL_wci_reqF_deq
  assign CAN_FIRE_RL_wci_reqF_deq =
	     !wci_sThreadBusy_d && wci_wciResponse$wget[33:32] == 2'd0 ;
  assign WILL_FIRE_RL_wci_reqF_deq = CAN_FIRE_RL_wci_reqF_deq ;

  // rule RL_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_wci_workerReset
  assign CAN_FIRE_RL_wci_workerReset = !wci_wReset_n ;
  assign WILL_FIRE_RL_wci_workerReset = CAN_FIRE_RL_wci_workerReset ;

  // rule RL_wciSeqFsm_actionof_l34c8
  assign CAN_FIRE_RL_wciSeqFsm_actionof_l34c8 =
	     !wci_busy && wci_respF$FULL_N &&
	     wciSeqFsm_state_mkFSMstate == 5'd4 ;
  assign WILL_FIRE_RL_wciSeqFsm_actionof_l34c8 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l34c8 ;

  // rule RL_wciSeqFsm_action_l34c8
  assign CAN_FIRE_RL_wciSeqFsm_action_l34c8 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l34c8 ;
  assign WILL_FIRE_RL_wciSeqFsm_action_l34c8 =
	     CAN_FIRE_RL_wciSeqFsm_actionof_l34c8 ;

  // rule RL_wciSeqFsm_state_update_standby
  assign CAN_FIRE_RL_wciSeqFsm_state_update_standby =
	     wciSeqFsm_state_run_pw$whas || CAN_FIRE_RL_wciSeqFsm_fsm_start ;
  assign WILL_FIRE_RL_wciSeqFsm_state_update_standby =
	     CAN_FIRE_RL_wciSeqFsm_state_update_standby ;

  // rule RL_wci_sfCapClear__dreg_update
  assign CAN_FIRE_RL_wci_sfCapClear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_sfCapClear__dreg_update = 1'd1 ;

  // rule RL_wci_sfCapSet__dreg_update
  assign CAN_FIRE_RL_wci_sfCapSet__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_sfCapSet__dreg_update = 1'd1 ;

  // rule RL_wci_reqF_both
  assign CAN_FIRE_RL_wci_reqF_both =
	     (!wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_dequeueing$whas &&
	     wci_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_reqF_both = CAN_FIRE_RL_wci_reqF_both ;

  // rule RL_wci_reqF_decCtr
  assign CAN_FIRE_RL_wci_reqF_decCtr =
	     wci_reqF_dequeueing$whas && !wci_reqF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_reqF_decCtr = CAN_FIRE_RL_wci_reqF_decCtr ;

  // rule RL_wci_reqF_incCtr
  assign CAN_FIRE_RL_wci_reqF_incCtr =
	     (wci_reqF_c_r || wci_reqF_x_wire$whas) &&
	     wci_reqF_enqueueing$whas &&
	     !wci_reqF_dequeueing$whas ;
  assign WILL_FIRE_RL_wci_reqF_incCtr = CAN_FIRE_RL_wci_reqF_incCtr ;

  // inputs to muxes for submodule ports
  assign MUX_wci_busy$write_1__PSEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 ;
  assign MUX_wci_busy$write_1__SEL_1 =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign MUX_wci_lastConfigBE$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_1 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 && wci_wReset_n ;
  assign MUX_wci_lastConfigBE$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 && wci_wReset_n ;
  assign MUX_wci_lastControlOp$write_1__SEL_2 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 && wci_wReset_n ;
  assign MUX_wci_reqPend$write_1__PSEL_3 =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 ;
  assign MUX_wci_reqPend$write_1__SEL_3 =
	     MUX_wci_reqPend$write_1__PSEL_3 && wci_wReset_n ;
  assign MUX_wci_respF$enq_1__SEL_2 =
	     MUX_wci_busy$write_1__PSEL_1 && !wci_wReset_n ;
  assign MUX_wci_reqF_c_r$write_1__VAL_1 = wci_reqF_c_r - 1'd1 ;
  assign MUX_wci_reqF_c_r$write_1__VAL_2 = wci_reqF_c_r + 1'd1 ;
  always@(MUX_wci_lastControlOp$write_1__SEL_2 or
	  MUX_wci_lastControlOp$write_1__SEL_1 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_lastConfigBE$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastControlOp$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h4F00004AAAAAAAA;
      MUX_wci_lastControlOp$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h4F00000AAAAAAAA;
      MUX_wci_lastConfigBE$write_1__SEL_1:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h5A00004AAAAAAAA;
      MUX_wci_lastConfigBE$write_1__SEL_2:
	  MUX_wci_reqF_q_0$write_1__VAL_2 = 60'h3F0000400004242;
      default: MUX_wci_reqF_q_0$write_1__VAL_2 =
		   60'hAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_reqF_q_0$write_1__VAL_1 =
	     wci_reqF_c_r ?
	       MUX_wci_reqF_q_0$write_1__VAL_2 :
	       60'h0000000AAAAAAAA ;
  assign MUX_wci_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ;
  assign MUX_wci_reqPend$write_1__SEL_4 =
	     WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] != 2'd0 ;
  assign MUX_wci_respF$enq_1__VAL_1 =
	     (wci_wciResponse$wget[33:32] == 2'd0) ?
	       34'h1C0DE4203 :
	       wci_wciResponse$wget ;
  assign MUX_wci_respTimr$write_1__VAL_2 =
	     (wci_wciResponse$wget[33:32] == 2'd0) ?
	       (wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 ?
		  x__h2824 :
		  32'd0) :
	       32'd0 ;
  assign MUX_wci_reqF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ;

  // inlined wires
  assign wci_sThreadBusy_pw$whas = wci2a4l$wciS0_SThreadBusy ;
  assign wci_reqF_enqueueing$whas =
	     MUX_wci_busy$write_1__PSEL_1 && wci_wReset_n ;
  assign wci_reqF_x_wire$wget = MUX_wci_reqF_q_0$write_1__VAL_2 ;
  assign wci_reqF_x_wire$whas =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 && wci_wReset_n ;
  assign wci_sfCapClear_1$wget = 1'b0 ;
  assign wci_wciResponse$wget = { wci2a4l$wciS0_SResp, wci2a4l$wciS0_SData } ;
  assign wci_reqF_dequeueing$whas =
	     WILL_FIRE_RL_wci_reqF_deq && wci_reqF_c_r ;
  assign wci_wciResponse$whas = 1'd1 ;
  assign wci_sfCapClear_1$whas = 1'b0 ;
  assign wci_sfCapSet_1$wget = wci2a4l$wciS0_SFlag[0] ;
  assign wci_sfCapSet_1$whas = 1'd1 ;
  assign wci_Em_respData_w$wget = wci2a4l$wciS0_SData ;
  assign wci_Em_resp_w$wget = wci2a4l$wciS0_SResp ;
  assign wci_Em_respData_w$whas = 1'd1 ;
  assign wci_Em_resp_w$whas = 1'd1 ;
  assign wciSeqFsm_start_reg_1$wget = 1'd1 ;
  assign wciSeqFsm_start_reg_1$whas = CAN_FIRE_RL_runWciSeq ;
  assign wciSeqFsm_start_wire$wget = 1'd1 ;
  assign wciSeqFsm_start_wire$whas = CAN_FIRE_RL_wciSeqFsm_fsm_start ;
  assign wciSeqFsm_abort$wget = 1'b0 ;
  assign wciSeqFsm_abort$whas = 1'b0 ;
  assign wciSeqFsm_state_start_pw$whas = CAN_FIRE_RL_wciSeqFsm_fsm_start ;
  assign wciSeqFsm_state_run_pw$whas =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l51c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l49c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l47c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l45c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l43c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l41c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l39c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l37c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l35c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l34c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l33c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l31c10 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l30c5 ;
  assign wciSeqFsm_pw_list$whas = 1'b0 ;
  assign wciSeqFsm_pw_list_1$whas = CAN_FIRE_RL_wciSeqFsm_action_l29c3 ;
  assign wciSeqFsm_pw_list_2$whas = CAN_FIRE_RL_wciSeqFsm_action_l30c5 ;
  assign wciSeqFsm_pw_list_3$whas = CAN_FIRE_RL_wciSeqFsm_action_l31c10 ;
  assign wciSeqFsm_pw_list_4$whas = CAN_FIRE_RL_wciSeqFsm_action_l33c5 ;
  assign wciSeqFsm_pw_list_5$whas = CAN_FIRE_RL_wciSeqFsm_actionof_l34c8 ;
  assign wciSeqFsm_pw_list_6$whas = CAN_FIRE_RL_wciSeqFsm_action_l35c5 ;
  assign wciSeqFsm_pw_list_7$whas = CAN_FIRE_RL_wciSeqFsm_action_l37c5 ;
  assign wciSeqFsm_pw_list_8$whas = CAN_FIRE_RL_wciSeqFsm_action_l38c8 ;
  assign wciSeqFsm_pw_list_9$whas = CAN_FIRE_RL_wciSeqFsm_action_l39c5 ;
  assign wciSeqFsm_pw_list_10$whas = CAN_FIRE_RL_wciSeqFsm_actionof_l41c5 ;
  assign wciSeqFsm_pw_list_11$whas = CAN_FIRE_RL_wciSeqFsm_action_l42c8 ;
  assign wciSeqFsm_pw_list_12$whas = CAN_FIRE_RL_wciSeqFsm_action_l43c5 ;
  assign wciSeqFsm_pw_list_13$whas = CAN_FIRE_RL_wciSeqFsm_action_l45c5 ;
  assign wciSeqFsm_pw_list_14$whas = CAN_FIRE_RL_wciSeqFsm_action_l46c8 ;
  assign wciSeqFsm_pw_list_15$whas = CAN_FIRE_RL_wciSeqFsm_action_l47c5 ;
  assign wciSeqFsm_pw_list_16$whas = CAN_FIRE_RL_wciSeqFsm_action_l49c5 ;
  assign wciSeqFsm_pw_list_17$whas = CAN_FIRE_RL_wciSeqFsm_action_l50c8 ;
  assign wciSeqFsm_pw_list_18$whas = CAN_FIRE_RL_wciSeqFsm_actionof_l51c5 ;
  assign wciSeqFsm_pw_list_19$whas = 1'b0 ;

  // register simCycle
  assign simCycle$D_IN = simCycle + 16'd1 ;
  assign simCycle$EN = 1'd1 ;

  // register wciSeqFsm_start_reg
  assign wciSeqFsm_start_reg$D_IN = CAN_FIRE_RL_runWciSeq ;
  assign wciSeqFsm_start_reg$EN = 1'd1 ;

  // register wciSeqFsm_state_mkFSMstate
  always@(CAN_FIRE_RL_wciSeqFsm_action_l29c3 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l30c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l31c10 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l33c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l34c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l35c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l37c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l39c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l41c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l43c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l45c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l47c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l49c5 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 or
	  WILL_FIRE_RL_wciSeqFsm_actionof_l51c5)
  begin
    case (1'b1) // synopsys parallel_case
      CAN_FIRE_RL_wciSeqFsm_action_l29c3:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_wciSeqFsm_actionof_l30c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_wciSeqFsm_actionof_l31c10:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_wciSeqFsm_actionof_l33c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_wciSeqFsm_actionof_l34c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_wciSeqFsm_actionof_l35c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_wciSeqFsm_actionof_l37c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_wciSeqFsm_actionof_l38c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_wciSeqFsm_actionof_l39c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_wciSeqFsm_actionof_l41c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_wciSeqFsm_actionof_l42c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_wciSeqFsm_actionof_l43c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_wciSeqFsm_actionof_l45c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_wciSeqFsm_actionof_l46c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd14;
      WILL_FIRE_RL_wciSeqFsm_actionof_l47c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_wciSeqFsm_actionof_l49c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_wciSeqFsm_actionof_l50c8:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd17;
      WILL_FIRE_RL_wciSeqFsm_actionof_l51c5:
	  wciSeqFsm_state_mkFSMstate$D_IN = 5'd18;
      default: wciSeqFsm_state_mkFSMstate$D_IN =
		   5'b01010 /* unspecified value */ ;
    endcase
  end
  assign wciSeqFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_17 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l29c3_16 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l30c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l31c10 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l33c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l34c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l35c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l37c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l39c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l41c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l43c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l45c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l47c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l49c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l51c5 ;

  // register wciSeqFsm_state_standby
  assign wciSeqFsm_state_standby$D_IN = !wciSeqFsm_state_run_pw$whas ;
  assign wciSeqFsm_state_standby$EN =
	     CAN_FIRE_RL_wciSeqFsm_state_update_standby ;

  // register wciSeqOnce_onceReady
  assign wciSeqOnce_onceReady$D_IN = 1'd0 ;
  assign wciSeqOnce_onceReady$EN = CAN_FIRE_RL_runWciSeq ;

  // register wci_busy
  assign wci_busy$D_IN = MUX_wci_busy$write_1__SEL_1 ;
  assign wci_busy$EN =
	     _dand1wci_busy$EN_write ||
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ;

  // register wci_lastConfigAddr
  assign wci_lastConfigAddr$D_IN = 33'h100000004 ;
  assign wci_lastConfigAddr$EN =
	     _dor1wci_lastConfigAddr$EN_write && wci_wReset_n ;

  // register wci_lastConfigBE
  assign wci_lastConfigBE$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 5'd26 : 5'd31 ;
  assign wci_lastConfigBE$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 && wci_wReset_n ;

  // register wci_lastControlOp
  assign wci_lastControlOp$D_IN =
	     MUX_wci_lastControlOp$write_1__SEL_1 ? 4'd8 : 4'd9 ;
  assign wci_lastControlOp$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l38c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 && wci_wReset_n ;

  // register wci_lastOpWrite
  assign wci_lastOpWrite$D_IN =
	     MUX_wci_lastConfigBE$write_1__SEL_1 ? 2'd2 : 2'd3 ;
  assign wci_lastOpWrite$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 && wci_wReset_n ;

  // register wci_mFlagReg
  assign wci_mFlagReg$EN = 1'b0 ;
  assign wci_mFlagReg$D_IN = 2'h0 ;

  // register wci_reqERR
  always@(wci_reqPend or wci_reqERR)
  begin
    case (wci_reqPend)
      2'd1: wci_reqERR$D_IN = { 1'd1, wci_reqERR[1:0] };
      2'd2: wci_reqERR$D_IN = { wci_reqERR[2], 1'd1, wci_reqERR[0] };
      default: wci_reqERR$D_IN = { wci_reqERR[2:1], 1'd1 };
    endcase
  end
  assign wci_reqERR$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     wci_wciResponse$wget[33:32] == 2'd3 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqFAIL
  always@(wci_reqPend or wci_reqFAIL)
  begin
    case (wci_reqPend)
      2'd1: wci_reqFAIL$D_IN = { 1'd1, wci_reqFAIL[1:0] };
      2'd2: wci_reqFAIL$D_IN = { wci_reqFAIL[2], 1'd1, wci_reqFAIL[0] };
      default: wci_reqFAIL$D_IN = { wci_reqFAIL[2:1], 1'd1 };
    endcase
  end
  assign wci_reqFAIL$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     wci_wciResponse$wget[33:32] == 2'd2 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_reqF_c_r
  assign wci_reqF_c_r$D_IN =
	     WILL_FIRE_RL_wci_reqF_decCtr ?
	       MUX_wci_reqF_c_r$write_1__VAL_1 :
	       MUX_wci_reqF_c_r$write_1__VAL_2 ;
  assign wci_reqF_c_r$EN =
	     WILL_FIRE_RL_wci_reqF_decCtr || WILL_FIRE_RL_wci_reqF_incCtr ;

  // register wci_reqF_q_0
  always@(WILL_FIRE_RL_wci_reqF_both or
	  MUX_wci_reqF_q_0$write_1__VAL_1 or
	  MUX_wci_reqF_q_0$write_1__SEL_2 or
	  MUX_wci_reqF_q_0$write_1__VAL_2 or WILL_FIRE_RL_wci_reqF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_reqF_both:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_1;
      MUX_wci_reqF_q_0$write_1__SEL_2:
	  wci_reqF_q_0$D_IN = MUX_wci_reqF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_reqF_decCtr: wci_reqF_q_0$D_IN = 60'h0000000AAAAAAAA;
      default: wci_reqF_q_0$D_IN =
		   60'hAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_reqF_q_0$EN =
	     WILL_FIRE_RL_wci_reqF_both ||
	     WILL_FIRE_RL_wci_reqF_incCtr && !wci_reqF_c_r ||
	     WILL_FIRE_RL_wci_reqF_decCtr ;

  // register wci_reqPend
  always@(MUX_wci_lastConfigBE$write_1__SEL_2 or
	  MUX_wci_lastConfigBE$write_1__SEL_1 or
	  MUX_wci_reqPend$write_1__SEL_3 or MUX_wci_reqPend$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_lastConfigBE$write_1__SEL_2: wci_reqPend$D_IN = 2'd1;
      MUX_wci_lastConfigBE$write_1__SEL_1: wci_reqPend$D_IN = 2'd2;
      MUX_wci_reqPend$write_1__SEL_3: wci_reqPend$D_IN = 2'd3;
      MUX_wci_reqPend$write_1__SEL_4: wci_reqPend$D_IN = 2'd0;
      default: wci_reqPend$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign wci_reqPend$EN =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 && wci_wReset_n ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 && wci_wReset_n ||
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l38c8) &&
	     wci_wReset_n ||
	     WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] != 2'd0 ;

  // register wci_reqTO
  always@(wci_reqPend or wci_reqTO)
  begin
    case (wci_reqPend)
      2'd1: wci_reqTO$D_IN = { 1'd1, wci_reqTO[1:0] };
      2'd2: wci_reqTO$D_IN = { wci_reqTO[2], 1'd1, wci_reqTO[0] };
      default: wci_reqTO$D_IN = { wci_reqTO[2:1], 1'd1 };
    endcase
  end
  assign wci_reqTO$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     wci_wciResponse$wget[33:32] == 2'd0 &&
	     !wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 &&
	     (wci_reqPend == 2'd1 || wci_reqPend == 2'd2 ||
	      wci_reqPend == 2'd3) ;

  // register wci_respTimr
  assign wci_respTimr$D_IN =
	     wci_reqF_c_r ? 32'd0 : MUX_wci_respTimr$write_1__VAL_2 ;
  assign wci_respTimr$EN = WILL_FIRE_RL_wci_wrkBusy || wci_reqF_c_r ;

  // register wci_respTimrAct
  assign wci_respTimrAct$D_IN = wci_reqF_c_r ;
  assign wci_respTimrAct$EN =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ||
	     wci_reqF_c_r ;

  // register wci_sThreadBusy_d
  assign wci_sThreadBusy_d$D_IN = wci2a4l$wciS0_SThreadBusy ;
  assign wci_sThreadBusy_d$EN = 1'd1 ;

  // register wci_sfCap
  assign wci_sfCap$D_IN = wci_sfCapSet ;
  assign wci_sfCap$EN = wci_sfCapSet || wci_sfCapClear ;

  // register wci_sfCapClear
  assign wci_sfCapClear$D_IN = 1'b0 ;
  assign wci_sfCapClear$EN = 1'd1 ;

  // register wci_sfCapSet
  assign wci_sfCapSet$D_IN = wci2a4l$wciS0_SFlag[0] ;
  assign wci_sfCapSet$EN = 1'd1 ;

  // register wci_slvPresent
  assign wci_slvPresent$D_IN = wci2a4l$wciS0_SFlag[1] ;
  assign wci_slvPresent$EN = 1'd1 ;

  // register wci_wReset_n
  assign wci_wReset_n$D_IN = 1'd1 ;
  assign wci_wReset_n$EN = CAN_FIRE_RL_wciSeqFsm_actionof_l34c8 ;

  // register wci_wStatus
  assign wci_wStatus$D_IN =
	     { 4'b0,
	       !wci_lastOpWrite[1] || wci_lastOpWrite[0],
	       IF_wci_lastControlOp_14_BIT_3_15_THEN_wci_last_ETC___d232 } ;
  assign wci_wStatus$EN = 1'd1 ;

  // register wci_wTimeout
  assign wci_wTimeout$D_IN = 5'd4 ;
  assign wci_wTimeout$EN = CAN_FIRE_RL_wciSeqFsm_actionof_l34c8 ;

  // submodule a4ls
  assign a4ls$rdAddr_data_value = wci2a4l$axiM0_rdAddr_data ;
  assign a4ls$rdAddr_valid_value = wci2a4l$axiM0_rdAddr_valid ;
  assign a4ls$rdResp_ready_value = wci2a4l$axiM0_rdResp_ready ;
  assign a4ls$wrAddr_data_value = wci2a4l$axiM0_wrAddr_data ;
  assign a4ls$wrAddr_valid_value = wci2a4l$axiM0_wrAddr_valid ;
  assign a4ls$wrData_data_value = wci2a4l$axiM0_wrData_data ;
  assign a4ls$wrData_valid_value = wci2a4l$axiM0_wrData_valid ;
  assign a4ls$wrResp_ready_value = wci2a4l$axiM0_wrResp_ready ;

  // submodule wci2a4l
  assign wci2a4l$axiM0_rdAddr_ready_value = a4ls$rdAddr_ready ;
  assign wci2a4l$axiM0_rdResp_data_value = a4ls$rdResp_data ;
  assign wci2a4l$axiM0_rdResp_valid_value = a4ls$rdResp_valid ;
  assign wci2a4l$axiM0_wrAddr_ready_value = a4ls$wrAddr_ready ;
  assign wci2a4l$axiM0_wrData_ready_value = a4ls$wrData_ready ;
  assign wci2a4l$axiM0_wrResp_data_value = a4ls$wrResp_data ;
  assign wci2a4l$axiM0_wrResp_valid_value = a4ls$wrResp_valid ;
  assign wci2a4l$wciS0_MAddr =
	     wci_sThreadBusy_d ? 20'd0 : wci_reqF_q_0[51:32] ;
  assign wci2a4l$wciS0_MAddrSpace = !wci_sThreadBusy_d && wci_reqF_q_0[56] ;
  assign wci2a4l$wciS0_MByteEn =
	     wci_sThreadBusy_d ? 4'd0 : wci_reqF_q_0[55:52] ;
  assign wci2a4l$wciS0_MCmd = wci_sThreadBusy_d ? 3'd0 : wci_reqF_q_0[59:57] ;
  assign wci2a4l$wciS0_MData = wci_reqF_q_0[31:0] ;
  assign wci2a4l$wciS0_MFlag = wci_mFlagReg ;

  // submodule wci_mReset
  assign wci_mReset$ASSERT_IN = CAN_FIRE_RL_wci_workerReset ;

  // submodule wci_respF
  always@(MUX_wci_busy$write_1__SEL_2 or
	  MUX_wci_respF$enq_1__VAL_1 or
	  MUX_wci_respF$enq_1__SEL_2 or WILL_FIRE_RL_wciSeqFsm_actionof_l34c8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_busy$write_1__SEL_2:
	  wci_respF$D_IN = MUX_wci_respF$enq_1__VAL_1;
      MUX_wci_respF$enq_1__SEL_2: wci_respF$D_IN = 34'h1C0DE4204;
      WILL_FIRE_RL_wciSeqFsm_actionof_l34c8: wci_respF$D_IN = 34'h100000000;
      default: wci_respF$D_IN = 34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_respF$DEQ =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l51c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l47c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l43c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l39c5 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l35c5 ;
  assign wci_respF$ENQ =
	     WILL_FIRE_RL_wci_wrkBusy &&
	     (!wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 ||
	      wci_wciResponse$wget[33:32] != 2'd0) ||
	     _dand2wci_respF$EN_enq ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l34c8 ;
  assign wci_respF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_wci_lastControlOp_14_BIT_3_15_THEN_wci_last_ETC___d232 =
	     { wci_lastControlOp[3] ? wci_lastControlOp[2:0] : 3'b111,
	       x__h2579,
	       wci_lastOpWrite[1],
	       wci_lastControlOp[3],
	       wci_lastConfigBE[4],
	       wci_lastConfigAddr[32],
	       6'b0,
	       wci_sfCap,
	       wci_reqTO,
	       wci_reqFAIL,
	       wci_reqERR } ;
  assign NOT_wci_busy_5_6_AND_IF_wci_wReset_n_9_THEN_NO_ETC___d93 =
	     !wci_busy && (wci_wReset_n ? !wci_reqF_c_r : wci_respF$FULL_N) ;
  assign _dand1wci_busy$EN_write =
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l38c8) &&
	     wci_wReset_n ;
  assign _dand2wci_respF$EN_enq =
	     (WILL_FIRE_RL_wciSeqFsm_actionof_l50c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 ||
	      WILL_FIRE_RL_wciSeqFsm_actionof_l38c8) &&
	     !wci_wReset_n ;
  assign _dor1wci_lastConfigAddr$EN_write =
	     WILL_FIRE_RL_wciSeqFsm_actionof_l46c8 ||
	     WILL_FIRE_RL_wciSeqFsm_actionof_l42c8 ;
  assign toCount__h2405 = 32'd1 << wci_wTimeout ;
  assign wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 =
	     wci_respTimr < toCount__h2405 ;
  assign x__h2579 = wci_lastConfigBE[4] ? wci_lastConfigBE[3:0] : 4'hF ;
  assign x__h2824 = wci_respTimr + 32'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        simCycle <= `BSV_ASSIGNMENT_DELAY 16'd0;
	wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd1;
	wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY 5'd10;
	wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY 4'd2;
	wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY 2'b10;
	wci_reqERR <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY 60'h0000000AAAAAAAA;
	wci_reqPend <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_reqTO <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_respTimr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wci_sfCap <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_slvPresent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wReset_n <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wTimeout <= `BSV_ASSIGNMENT_DELAY 5'h04;
      end
    else
      begin
        if (simCycle$EN) simCycle <= `BSV_ASSIGNMENT_DELAY simCycle$D_IN;
	if (wciSeqFsm_start_reg$EN)
	  wciSeqFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_start_reg$D_IN;
	if (wciSeqFsm_state_mkFSMstate$EN)
	  wciSeqFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_mkFSMstate$D_IN;
	if (wciSeqFsm_state_standby$EN)
	  wciSeqFsm_state_standby <= `BSV_ASSIGNMENT_DELAY
	      wciSeqFsm_state_standby$D_IN;
	if (wciSeqOnce_onceReady$EN)
	  wciSeqOnce_onceReady <= `BSV_ASSIGNMENT_DELAY
	      wciSeqOnce_onceReady$D_IN;
	if (wci_busy$EN) wci_busy <= `BSV_ASSIGNMENT_DELAY wci_busy$D_IN;
	if (wci_lastConfigAddr$EN)
	  wci_lastConfigAddr <= `BSV_ASSIGNMENT_DELAY wci_lastConfigAddr$D_IN;
	if (wci_lastConfigBE$EN)
	  wci_lastConfigBE <= `BSV_ASSIGNMENT_DELAY wci_lastConfigBE$D_IN;
	if (wci_lastControlOp$EN)
	  wci_lastControlOp <= `BSV_ASSIGNMENT_DELAY wci_lastControlOp$D_IN;
	if (wci_lastOpWrite$EN)
	  wci_lastOpWrite <= `BSV_ASSIGNMENT_DELAY wci_lastOpWrite$D_IN;
	if (wci_mFlagReg$EN)
	  wci_mFlagReg <= `BSV_ASSIGNMENT_DELAY wci_mFlagReg$D_IN;
	if (wci_reqERR$EN)
	  wci_reqERR <= `BSV_ASSIGNMENT_DELAY wci_reqERR$D_IN;
	if (wci_reqFAIL$EN)
	  wci_reqFAIL <= `BSV_ASSIGNMENT_DELAY wci_reqFAIL$D_IN;
	if (wci_reqF_c_r$EN)
	  wci_reqF_c_r <= `BSV_ASSIGNMENT_DELAY wci_reqF_c_r$D_IN;
	if (wci_reqF_q_0$EN)
	  wci_reqF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_reqF_q_0$D_IN;
	if (wci_reqPend$EN)
	  wci_reqPend <= `BSV_ASSIGNMENT_DELAY wci_reqPend$D_IN;
	if (wci_reqTO$EN) wci_reqTO <= `BSV_ASSIGNMENT_DELAY wci_reqTO$D_IN;
	if (wci_respTimr$EN)
	  wci_respTimr <= `BSV_ASSIGNMENT_DELAY wci_respTimr$D_IN;
	if (wci_respTimrAct$EN)
	  wci_respTimrAct <= `BSV_ASSIGNMENT_DELAY wci_respTimrAct$D_IN;
	if (wci_sThreadBusy_d$EN)
	  wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wci_sThreadBusy_d$D_IN;
	if (wci_sfCap$EN) wci_sfCap <= `BSV_ASSIGNMENT_DELAY wci_sfCap$D_IN;
	if (wci_sfCapClear$EN)
	  wci_sfCapClear <= `BSV_ASSIGNMENT_DELAY wci_sfCapClear$D_IN;
	if (wci_sfCapSet$EN)
	  wci_sfCapSet <= `BSV_ASSIGNMENT_DELAY wci_sfCapSet$D_IN;
	if (wci_slvPresent$EN)
	  wci_slvPresent <= `BSV_ASSIGNMENT_DELAY wci_slvPresent$D_IN;
	if (wci_wReset_n$EN)
	  wci_wReset_n <= `BSV_ASSIGNMENT_DELAY wci_wReset_n$D_IN;
	if (wci_wTimeout$EN)
	  wci_wTimeout <= `BSV_ASSIGNMENT_DELAY wci_wTimeout$D_IN;
      end
    if (wci_wStatus$EN) wci_wStatus <= `BSV_ASSIGNMENT_DELAY wci_wStatus$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    simCycle = 16'hAAAA;
    wciSeqFsm_start_reg = 1'h0;
    wciSeqFsm_state_mkFSMstate = 5'h0A;
    wciSeqFsm_state_standby = 1'h0;
    wciSeqOnce_onceReady = 1'h0;
    wci_busy = 1'h0;
    wci_lastConfigAddr = 33'h0AAAAAAAA;
    wci_lastConfigBE = 5'h0A;
    wci_lastControlOp = 4'hA;
    wci_lastOpWrite = 2'h2;
    wci_mFlagReg = 2'h2;
    wci_reqERR = 3'h2;
    wci_reqFAIL = 3'h2;
    wci_reqF_c_r = 1'h0;
    wci_reqF_q_0 = 60'hAAAAAAAAAAAAAAA;
    wci_reqPend = 2'h2;
    wci_reqTO = 3'h2;
    wci_respTimr = 32'hAAAAAAAA;
    wci_respTimrAct = 1'h0;
    wci_sThreadBusy_d = 1'h0;
    wci_sfCap = 1'h0;
    wci_sfCapClear = 1'h0;
    wci_sfCapSet = 1'h0;
    wci_slvPresent = 1'h0;
    wci_wReset_n = 1'h0;
    wci_wStatus = 32'hAAAAAAAA;
    wci_wTimeout = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_terminate)
	begin
	  v__h33280 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_terminate)
	$display("[%0d]: %m: mkTB7 termination", v__h33280);
    if (RST_N) if (WILL_FIRE_RL_terminate) $finish(32'd1);
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l30c5)
	begin
	  v__h28824 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l30c5)
	$display("[%0d]: %m: Checking for DUT presence...", v__h28824);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l30c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l31c10) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l33c5)
	begin
	  v__h29147 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l33c5)
	$display("[%0d]: %m: Taking DUT out of Reset...", v__h29147);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l33c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l35c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l37c5)
	begin
	  v__h29966 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l37c5)
	$display("[%0d]: %m: CONTROL-OP: -INITIALIZE- DUT...", v__h29966);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l37c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l39c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l41c5)
	begin
	  v__h30781 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l41c5)
	$display("[%0d]: %m: Write Dataplane Config Properties...",
		 v__h30781);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l41c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l43c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l45c5)
	begin
	  v__h31566 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l45c5)
	$display("[%0d]: %m: Read Dataplane Config Properties...", v__h31566);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l45c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l47c5) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l49c5)
	begin
	  v__h32391 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l49c5)
	$display("[%0d]: %m: CONTROL-OP: -START- DUT...", v__h32391);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l49c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l51c5) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l29c3) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l38c8)
	begin
	  v__h30189 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l38c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h30189);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l38c8) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l42c8) $write("");
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l46c8) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l50c8)
	begin
	  v__h32641 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wciSeqFsm_actionof_l50c8)
	$display("[%0d]: %m: WORKER CONTROL ARM...", v__h32641);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l50c8) $write("");
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h2945 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE TIMEOUT", v__h2945);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3034 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  TIMEOUT", v__h3034);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3123 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd0 &&
	  !wci_respTimr_38_ULT_1_SL_wci_wTimeout_39_40___d375 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   TIMEOUT", v__h3123);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3335 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-FAIL", v__h3335);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3424 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-FAIL", v__h3424);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3513 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd2 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-FAIL", v__h3513);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	begin
	  v__h3730 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd1)
	$display("[%0d]: %m: WORKER CONFIG-WRITE RESPONSE-ERR", v__h3730);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	begin
	  v__h3819 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd2)
	$display("[%0d]: %m: WORKER CONFIG-READ  RESPONSE-ERR", v__h3819);
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	begin
	  v__h3908 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_wci_wrkBusy && wci_wciResponse$wget[33:32] == 2'd3 &&
	  wci_reqPend == 2'd3)
	$display("[%0d]: %m: WORKER CONTROL-OP   RESPONSE-ERR", v__h3908);
    if (RST_N) if (WILL_FIRE_RL_wciSeqFsm_action_l34c8) $write("");
  end
  // synopsys translate_on
endmodule  // mkTB7

