//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Mon Nov  8 07:13:11 EST 2010
//
//
// Ports:
// Name                         I/O  size props
// wciO0_mAWVALID                 O     1 const
// wciO0_sAWREADY                 O     1 const
// wciO0_mWVALID                  O     1 const
// wciO0_sWREADY                  O     1 const
// wciO0_sBVALID                  O     1 const
// wciO0_mBREADY                  O     1 const
// wciO0_mARVALID                 O     1 const
// wciO0_sARREADY                 O     1 const
// wciO0_RVALID                   O     1 const
// wciO0_mRREADY                  O     1 const
// wciO0_Clk                      I     1 unused
// wciO0_MReset_n                 I     1 unused
// wciO0_AWADDR                   I    32 unused
// wciO0_AWPROT                   I     3 unused
// wciO0_WDATA                    I    32 unused
// wciO0_WSTRB                    I     4 unused
// wciO0_BRESP                    I     2 unused
// wciO0_ARADDR                   I    32 unused
// wciO0_ARPROT                   I     3 unused
// wciO0_RDATA                    I    32 unused
// wciO0_RRESP                    I     2 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkWciAxiMonitor(wciO0_Clk,
		       wciO0_MReset_n,

		       wciO0_mAWVALID,

		       wciO0_sAWREADY,

		       wciO0_AWADDR,

		       wciO0_AWPROT,

		       wciO0_mWVALID,

		       wciO0_sWREADY,

		       wciO0_WDATA,

		       wciO0_WSTRB,

		       wciO0_sBVALID,

		       wciO0_mBREADY,

		       wciO0_BRESP,

		       wciO0_mARVALID,

		       wciO0_sARREADY,

		       wciO0_ARADDR,

		       wciO0_ARPROT,

		       wciO0_RVALID,

		       wciO0_mRREADY,

		       wciO0_RDATA,

		       wciO0_RRESP);
  input  wciO0_Clk;
  input  wciO0_MReset_n;

  // value method wciO0_mAWVALID
  output wciO0_mAWVALID;

  // value method wciO0_sAWREADY
  output wciO0_sAWREADY;

  // action method wciO0_mAWADDR
  input  [31 : 0] wciO0_AWADDR;

  // action method wciO0_mAWPROT
  input  [2 : 0] wciO0_AWPROT;

  // value method wciO0_mWVALID
  output wciO0_mWVALID;

  // value method wciO0_sWREADY
  output wciO0_sWREADY;

  // action method wciO0_mWDATA
  input  [31 : 0] wciO0_WDATA;

  // action method wciO0_mWSTRB
  input  [3 : 0] wciO0_WSTRB;

  // value method wciO0_sBVALID
  output wciO0_sBVALID;

  // value method wciO0_mBREADY
  output wciO0_mBREADY;

  // action method wciO0_sBRESP
  input  [1 : 0] wciO0_BRESP;

  // value method wciO0_mARVALID
  output wciO0_mARVALID;

  // value method wciO0_sARREADY
  output wciO0_sARREADY;

  // action method wciO0_mARADDR
  input  [31 : 0] wciO0_ARADDR;

  // action method wciO0_mARPROT
  input  [2 : 0] wciO0_ARPROT;

  // value method wciO0_sRVALID
  output wciO0_RVALID;

  // value method wciO0_mRREADY
  output wciO0_mRREADY;

  // action method wciO0_sRDATA
  input  [31 : 0] wciO0_RDATA;

  // action method wciO0_sRRESP
  input  [1 : 0] wciO0_RRESP;

  // signals for module outputs
  wire wciO0_RVALID,
       wciO0_mARVALID,
       wciO0_mAWVALID,
       wciO0_mBREADY,
       wciO0_mRREADY,
       wciO0_mWVALID,
       wciO0_sARREADY,
       wciO0_sAWREADY,
       wciO0_sBVALID,
       wciO0_sWREADY;

  // rule scheduling signals
  wire CAN_FIRE_wciO0_mARADDR,
       CAN_FIRE_wciO0_mARPROT,
       CAN_FIRE_wciO0_mAWADDR,
       CAN_FIRE_wciO0_mAWPROT,
       CAN_FIRE_wciO0_mWDATA,
       CAN_FIRE_wciO0_mWSTRB,
       CAN_FIRE_wciO0_sBRESP,
       CAN_FIRE_wciO0_sRDATA,
       CAN_FIRE_wciO0_sRRESP,
       WILL_FIRE_wciO0_mARADDR,
       WILL_FIRE_wciO0_mARPROT,
       WILL_FIRE_wciO0_mAWADDR,
       WILL_FIRE_wciO0_mAWPROT,
       WILL_FIRE_wciO0_mWDATA,
       WILL_FIRE_wciO0_mWSTRB,
       WILL_FIRE_wciO0_sBRESP,
       WILL_FIRE_wciO0_sRDATA,
       WILL_FIRE_wciO0_sRRESP;

  // value method wciO0_mAWVALID
  assign wciO0_mAWVALID = 1'h0 ;

  // value method wciO0_sAWREADY
  assign wciO0_sAWREADY = 1'h0 ;

  // action method wciO0_mAWADDR
  assign CAN_FIRE_wciO0_mAWADDR = 1'd1 ;
  assign WILL_FIRE_wciO0_mAWADDR = 1'd1 ;

  // action method wciO0_mAWPROT
  assign CAN_FIRE_wciO0_mAWPROT = 1'd1 ;
  assign WILL_FIRE_wciO0_mAWPROT = 1'd1 ;

  // value method wciO0_mWVALID
  assign wciO0_mWVALID = 1'h0 ;

  // value method wciO0_sWREADY
  assign wciO0_sWREADY = 1'h0 ;

  // action method wciO0_mWDATA
  assign CAN_FIRE_wciO0_mWDATA = 1'd1 ;
  assign WILL_FIRE_wciO0_mWDATA = 1'd1 ;

  // action method wciO0_mWSTRB
  assign CAN_FIRE_wciO0_mWSTRB = 1'd1 ;
  assign WILL_FIRE_wciO0_mWSTRB = 1'd1 ;

  // value method wciO0_sBVALID
  assign wciO0_sBVALID = 1'h0 ;

  // value method wciO0_mBREADY
  assign wciO0_mBREADY = 1'h0 ;

  // action method wciO0_sBRESP
  assign CAN_FIRE_wciO0_sBRESP = 1'd1 ;
  assign WILL_FIRE_wciO0_sBRESP = 1'd1 ;

  // value method wciO0_mARVALID
  assign wciO0_mARVALID = 1'h0 ;

  // value method wciO0_sARREADY
  assign wciO0_sARREADY = 1'h0 ;

  // action method wciO0_mARADDR
  assign CAN_FIRE_wciO0_mARADDR = 1'd1 ;
  assign WILL_FIRE_wciO0_mARADDR = 1'd1 ;

  // action method wciO0_mARPROT
  assign CAN_FIRE_wciO0_mARPROT = 1'd1 ;
  assign WILL_FIRE_wciO0_mARPROT = 1'd1 ;

  // value method wciO0_sRVALID
  assign wciO0_RVALID = 1'h0 ;

  // value method wciO0_mRREADY
  assign wciO0_mRREADY = 1'h0 ;

  // action method wciO0_sRDATA
  assign CAN_FIRE_wciO0_sRDATA = 1'd1 ;
  assign WILL_FIRE_wciO0_sRDATA = 1'd1 ;

  // action method wciO0_sRRESP
  assign CAN_FIRE_wciO0_sRRESP = 1'd1 ;
  assign WILL_FIRE_wciO0_sRRESP = 1'd1 ;
endmodule  // mkWciAxiMonitor

