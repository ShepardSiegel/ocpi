//
// Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
//
// On Mon Jul 25 19:45:33 EDT 2011
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// wsiS0_SThreadBusy              O     1
// wsiS0_SReset_n                 O     1
// wsiM0_MCmd                     O     3
// wsiM0_MReqLast                 O     1
// wsiM0_MBurstPrecise            O     1
// wsiM0_MBurstLength             O    12
// wsiM0_MData                    O    32 reg
// wsiM0_MByteEn                  O     4 reg
// wsiM0_MReqInfo                 O     8
// wsiM0_MReset_n                 O     1
// axiM0_TVALID                   O     1
// axiM0_TDATA                    O    32 reg
// axiM0_TSTRB                    O     4 reg
// axiM0_TUSER                    O   128 reg
// axiM0_TLAST                    O     1 reg
// axiS0_TREADY                   O     1 reg
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
// wsiS0_MCmd                     I     3
// wsiS0_MBurstLength             I    12
// wsiS0_MData                    I    32
// wsiS0_MByteEn                  I     4
// wsiS0_MReqInfo                 I     8
// axiS0_TDATA                    I    32 reg
// axiS0_TSTRB                    I     4 reg
// axiS0_TUSER                    I   128 reg
// wsiS0_MReqLast                 I     1
// wsiS0_MBurstPrecise            I     1
// wsiS0_MReset_n                 I     1 reg
// wsiM0_SThreadBusy              I     1 reg
// wsiM0_SReset_n                 I     1 reg
// axiM0_TREADY                   I     1
// axiS0_TVALID                   I     1
// axiS0_TLAST                    I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkAXISDWorker4B(wciS0_Clk,
		       wciS0_MReset_n,

		       wciS0_MCmd,

		       wciS0_MAddrSpace,

		       wciS0_MByteEn,

		       wciS0_MAddr,

		       wciS0_MData,

		       wciS0_SResp,

		       wciS0_SData,

		       wciS0_SThreadBusy,

		       wciS0_SFlag,

		       wciS0_MFlag,

		       wsiS0_MCmd,

		       wsiS0_MReqLast,

		       wsiS0_MBurstPrecise,

		       wsiS0_MBurstLength,

		       wsiS0_MData,

		       wsiS0_MByteEn,

		       wsiS0_MReqInfo,

		       wsiS0_SThreadBusy,

		       wsiS0_SReset_n,

		       wsiS0_MReset_n,

		       wsiM0_MCmd,

		       wsiM0_MReqLast,

		       wsiM0_MBurstPrecise,

		       wsiM0_MBurstLength,

		       wsiM0_MData,

		       wsiM0_MByteEn,

		       wsiM0_MReqInfo,

		       wsiM0_SThreadBusy,

		       wsiM0_MReset_n,

		       wsiM0_SReset_n,

		       axiM0_TVALID,

		       axiM0_TREADY,

		       axiM0_TDATA,

		       axiM0_TSTRB,

		       axiM0_TUSER,

		       axiM0_TLAST,

		       axiS0_TVALID,

		       axiS0_TREADY,

		       axiS0_TDATA,

		       axiS0_TSTRB,

		       axiS0_TUSER,

		       axiS0_TLAST);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // action method wsiS0_mCmd
  input  [2 : 0] wsiS0_MCmd;

  // action method wsiS0_mReqLast
  input  wsiS0_MReqLast;

  // action method wsiS0_mBurstPrecise
  input  wsiS0_MBurstPrecise;

  // action method wsiS0_mBurstLength
  input  [11 : 0] wsiS0_MBurstLength;

  // action method wsiS0_mData
  input  [31 : 0] wsiS0_MData;

  // action method wsiS0_mByteEn
  input  [3 : 0] wsiS0_MByteEn;

  // action method wsiS0_mReqInfo
  input  [7 : 0] wsiS0_MReqInfo;

  // action method wsiS0_mDataInfo

  // value method wsiS0_sThreadBusy
  output wsiS0_SThreadBusy;

  // value method wsiS0_sReset_n
  output wsiS0_SReset_n;

  // action method wsiS0_mReset_n
  input  wsiS0_MReset_n;

  // value method wsiM0_mCmd
  output [2 : 0] wsiM0_MCmd;

  // value method wsiM0_mReqLast
  output wsiM0_MReqLast;

  // value method wsiM0_mBurstPrecise
  output wsiM0_MBurstPrecise;

  // value method wsiM0_mBurstLength
  output [11 : 0] wsiM0_MBurstLength;

  // value method wsiM0_mData
  output [31 : 0] wsiM0_MData;

  // value method wsiM0_mByteEn
  output [3 : 0] wsiM0_MByteEn;

  // value method wsiM0_mReqInfo
  output [7 : 0] wsiM0_MReqInfo;

  // value method wsiM0_mDataInfo

  // action method wsiM0_sThreadBusy
  input  wsiM0_SThreadBusy;

  // value method wsiM0_mReset_n
  output wsiM0_MReset_n;

  // action method wsiM0_sReset_n
  input  wsiM0_SReset_n;

  // value method axiM0_mTVALID
  output axiM0_TVALID;

  // action method axiM0_sTREADY
  input  axiM0_TREADY;

  // value method axiM0_mTDATA
  output [31 : 0] axiM0_TDATA;

  // value method axiM0_mTSTRB
  output [3 : 0] axiM0_TSTRB;

  // value method axiM0_mTUSER
  output [127 : 0] axiM0_TUSER;

  // value method axiM0_mTKEEP

  // value method axiM0_mTLAST
  output axiM0_TLAST;

  // action method axiS0_mTVALID
  input  axiS0_TVALID;

  // value method axiS0_sTREADY
  output axiS0_TREADY;

  // action method axiS0_mTDATA
  input  [31 : 0] axiS0_TDATA;

  // action method axiS0_mTSTRB
  input  [3 : 0] axiS0_TSTRB;

  // action method axiS0_mTUSER
  input  [127 : 0] axiS0_TUSER;

  // action method axiS0_mTKEEP

  // action method axiS0_mTLAST
  input  axiS0_TLAST;

  // signals for module outputs
  wire [127 : 0] axiM0_TUSER;
  wire [31 : 0] axiM0_TDATA, wciS0_SData, wsiM0_MData;
  wire [11 : 0] wsiM0_MBurstLength;
  wire [7 : 0] wsiM0_MReqInfo;
  wire [3 : 0] axiM0_TSTRB, wsiM0_MByteEn;
  wire [2 : 0] wsiM0_MCmd;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire axiM0_TLAST,
       axiM0_TVALID,
       axiS0_TREADY,
       wciS0_SThreadBusy,
       wsiM0_MBurstPrecise,
       wsiM0_MReqLast,
       wsiM0_MReset_n,
       wsiS0_SReset_n,
       wsiS0_SThreadBusy;

  // inlined wires
  wire [164 : 0] axiM_axiM_fifof_x_wire$wget, axiS_axiS_data_wire$wget;
  wire [127 : 0] axiS_axi_Es_mTUser_w$wget;
  wire [95 : 0] wsiM_extStatusW$wget, wsiS_extStatusW$wget;
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire [60 : 0] wsiM_reqFifo_x_wire$wget, wsiS_wsiReq$wget;
  wire [33 : 0] wci_wslv_respF_x_wire$wget;
  wire [31 : 0] axiS_axi_Es_mTData_w$wget,
		wci_wci_Es_mAddr_w$wget,
		wci_wci_Es_mData_w$wget,
		wsi_Es_mData_w$wget;
  wire [11 : 0] wsi_Es_mBurstLength_w$wget;
  wire [7 : 0] wsi_Es_mReqInfo_w$wget;
  wire [3 : 0] axiS_axi_Es_mTStrb_w$wget,
	       wci_wci_Es_mByteEn_w$wget,
	       wsi_Es_mByteEn_w$wget;
  wire [2 : 0] wci_wci_Es_mCmd_w$wget,
	       wci_wslv_wEdge$wget,
	       wsi_Es_mCmd_w$wget;
  wire axiM_axiM_deq_deq$whas,
       axiM_axiM_deq_ready$whas,
       axiM_axiM_fifof_dequeueing$whas,
       axiM_axiM_fifof_enqueueing$whas,
       axiM_axiM_fifof_x_wire$whas,
       axiM_axi_Em_mTRdy_w$wget,
       axiM_axi_Em_mTRdy_w$whas,
       axiM_operateD_1$wget,
       axiM_operateD_1$whas,
       axiS_axiS_enq_enq$whas,
       axiS_axiS_enq_valid$whas,
       axiS_axi_Es_mTData_w$whas,
       axiS_axi_Es_mTKeep_w$whas,
       axiS_axi_Es_mTLast_w$wget,
       axiS_axi_Es_mTLast_w$whas,
       axiS_axi_Es_mTStrb_w$whas,
       axiS_axi_Es_mTUser_w$whas,
       axiS_axi_Es_mTVal_w$wget,
       axiS_axi_Es_mTVal_w$whas,
       axiS_operateD_1$wget,
       axiS_operateD_1$whas,
       axiS_reqFifo_doResetClr$whas,
       axiS_reqFifo_doResetDeq$whas,
       axiS_reqFifo_doResetEnq$whas,
       axiS_reqFifo_r_clr$whas,
       axiS_reqFifo_r_deq$whas,
       axiS_reqFifo_r_enq$whas,
       wci_wci_Es_mAddrSpace_w$wget,
       wci_wci_Es_mAddrSpace_w$whas,
       wci_wci_Es_mAddr_w$whas,
       wci_wci_Es_mByteEn_w$whas,
       wci_wci_Es_mCmd_w$whas,
       wci_wci_Es_mData_w$whas,
       wci_wslv_ctlAckReg_1$wget,
       wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_clr$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_reqF_r_enq$whas,
       wci_wslv_respF_dequeueing$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_sFlagReg_1$wget,
       wci_wslv_sFlagReg_1$whas,
       wci_wslv_sThreadBusy_pw$whas,
       wci_wslv_wEdge$whas,
       wci_wslv_wciReq$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas,
       wsiM_operateD_1$wget,
       wsiM_operateD_1$whas,
       wsiM_peerIsReady_1$wget,
       wsiM_peerIsReady_1$whas,
       wsiM_reqFifo_dequeueing$whas,
       wsiM_reqFifo_enqueueing$whas,
       wsiM_reqFifo_x_wire$whas,
       wsiM_sThreadBusy_pw$whas,
       wsiS_operateD_1$wget,
       wsiS_operateD_1$whas,
       wsiS_peerIsReady_1$wget,
       wsiS_peerIsReady_1$whas,
       wsiS_reqFifo_doResetClr$whas,
       wsiS_reqFifo_doResetDeq$whas,
       wsiS_reqFifo_doResetEnq$whas,
       wsiS_reqFifo_r_clr$whas,
       wsiS_reqFifo_r_deq$whas,
       wsiS_reqFifo_r_enq$whas,
       wsiS_sThreadBusy_dw$wget,
       wsiS_sThreadBusy_dw$whas,
       wsiS_wsiReq$whas,
       wsi_Es_mBurstLength_w$whas,
       wsi_Es_mBurstPrecise_w$whas,
       wsi_Es_mByteEn_w$whas,
       wsi_Es_mCmd_w$whas,
       wsi_Es_mDataInfo_w$whas,
       wsi_Es_mData_w$whas,
       wsi_Es_mReqInfo_w$whas,
       wsi_Es_mReqLast_w$whas;

  // register axiM_axiM_fifof_c_r
  reg [1 : 0] axiM_axiM_fifof_c_r;
  wire [1 : 0] axiM_axiM_fifof_c_r$D_IN;
  wire axiM_axiM_fifof_c_r$EN;

  // register axiM_axiM_fifof_q_0
  reg [164 : 0] axiM_axiM_fifof_q_0;
  reg [164 : 0] axiM_axiM_fifof_q_0$D_IN;
  wire axiM_axiM_fifof_q_0$EN;

  // register axiM_axiM_fifof_q_1
  reg [164 : 0] axiM_axiM_fifof_q_1;
  reg [164 : 0] axiM_axiM_fifof_q_1$D_IN;
  wire axiM_axiM_fifof_q_1$EN;

  // register axiM_operateD
  reg axiM_operateD;
  wire axiM_operateD$D_IN, axiM_operateD$EN;

  // register axiRecvCount
  reg [31 : 0] axiRecvCount;
  wire [31 : 0] axiRecvCount$D_IN;
  wire axiRecvCount$EN;

  // register axiS_operateD
  reg axiS_operateD;
  wire axiS_operateD$D_IN, axiS_operateD$EN;

  // register axiS_reqFifo_countReg
  reg [1 : 0] axiS_reqFifo_countReg;
  wire [1 : 0] axiS_reqFifo_countReg$D_IN;
  wire axiS_reqFifo_countReg$EN;

  // register axiS_reqFifo_levelsValid
  reg axiS_reqFifo_levelsValid;
  wire axiS_reqFifo_levelsValid$D_IN, axiS_reqFifo_levelsValid$EN;

  // register axiS_xfrActive
  reg axiS_xfrActive;
  wire axiS_xfrActive$D_IN, axiS_xfrActive$EN;

  // register axiS_xfrLenLSBs
  reg [1 : 0] axiS_xfrLenLSBs;
  wire [1 : 0] axiS_xfrLenLSBs$D_IN;
  wire axiS_xfrLenLSBs$EN;

  // register axiSendCount
  reg [31 : 0] axiSendCount;
  wire [31 : 0] axiSendCount$D_IN;
  wire axiSendCount$EN;

  // register bypassCount
  reg [31 : 0] bypassCount;
  wire [31 : 0] bypassCount$D_IN;
  wire bypassCount$EN;

  // register controlReg
  reg [31 : 0] controlReg;
  wire [31 : 0] controlReg$D_IN;
  wire controlReg$EN;

  // register spareValue
  reg [31 : 0] spareValue;
  wire [31 : 0] spareValue$D_IN;
  wire spareValue$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wsiM_burstKind
  reg [1 : 0] wsiM_burstKind;
  wire [1 : 0] wsiM_burstKind$D_IN;
  wire wsiM_burstKind$EN;

  // register wsiM_errorSticky
  reg wsiM_errorSticky;
  wire wsiM_errorSticky$D_IN, wsiM_errorSticky$EN;

  // register wsiM_iMesgCount
  reg [31 : 0] wsiM_iMesgCount;
  wire [31 : 0] wsiM_iMesgCount$D_IN;
  wire wsiM_iMesgCount$EN;

  // register wsiM_isReset_isInReset
  reg wsiM_isReset_isInReset;
  wire wsiM_isReset_isInReset$D_IN, wsiM_isReset_isInReset$EN;

  // register wsiM_operateD
  reg wsiM_operateD;
  wire wsiM_operateD$D_IN, wsiM_operateD$EN;

  // register wsiM_pMesgCount
  reg [31 : 0] wsiM_pMesgCount;
  wire [31 : 0] wsiM_pMesgCount$D_IN;
  wire wsiM_pMesgCount$EN;

  // register wsiM_peerIsReady
  reg wsiM_peerIsReady;
  wire wsiM_peerIsReady$D_IN, wsiM_peerIsReady$EN;

  // register wsiM_reqFifo_c_r
  reg [1 : 0] wsiM_reqFifo_c_r;
  wire [1 : 0] wsiM_reqFifo_c_r$D_IN;
  wire wsiM_reqFifo_c_r$EN;

  // register wsiM_reqFifo_q_0
  reg [60 : 0] wsiM_reqFifo_q_0;
  reg [60 : 0] wsiM_reqFifo_q_0$D_IN;
  wire wsiM_reqFifo_q_0$EN;

  // register wsiM_reqFifo_q_1
  reg [60 : 0] wsiM_reqFifo_q_1;
  reg [60 : 0] wsiM_reqFifo_q_1$D_IN;
  wire wsiM_reqFifo_q_1$EN;

  // register wsiM_sThreadBusy_d
  reg wsiM_sThreadBusy_d;
  wire wsiM_sThreadBusy_d$D_IN, wsiM_sThreadBusy_d$EN;

  // register wsiM_statusR
  reg [7 : 0] wsiM_statusR;
  wire [7 : 0] wsiM_statusR$D_IN;
  wire wsiM_statusR$EN;

  // register wsiM_tBusyCount
  reg [31 : 0] wsiM_tBusyCount;
  wire [31 : 0] wsiM_tBusyCount$D_IN;
  wire wsiM_tBusyCount$EN;

  // register wsiM_trafficSticky
  reg wsiM_trafficSticky;
  wire wsiM_trafficSticky$D_IN, wsiM_trafficSticky$EN;

  // register wsiS_burstKind
  reg [1 : 0] wsiS_burstKind;
  wire [1 : 0] wsiS_burstKind$D_IN;
  wire wsiS_burstKind$EN;

  // register wsiS_errorSticky
  reg wsiS_errorSticky;
  wire wsiS_errorSticky$D_IN, wsiS_errorSticky$EN;

  // register wsiS_iMesgCount
  reg [31 : 0] wsiS_iMesgCount;
  wire [31 : 0] wsiS_iMesgCount$D_IN;
  wire wsiS_iMesgCount$EN;

  // register wsiS_isReset_isInReset
  reg wsiS_isReset_isInReset;
  wire wsiS_isReset_isInReset$D_IN, wsiS_isReset_isInReset$EN;

  // register wsiS_mesgWordLength
  reg [11 : 0] wsiS_mesgWordLength;
  wire [11 : 0] wsiS_mesgWordLength$D_IN;
  wire wsiS_mesgWordLength$EN;

  // register wsiS_operateD
  reg wsiS_operateD;
  wire wsiS_operateD$D_IN, wsiS_operateD$EN;

  // register wsiS_pMesgCount
  reg [31 : 0] wsiS_pMesgCount;
  wire [31 : 0] wsiS_pMesgCount$D_IN;
  wire wsiS_pMesgCount$EN;

  // register wsiS_peerIsReady
  reg wsiS_peerIsReady;
  wire wsiS_peerIsReady$D_IN, wsiS_peerIsReady$EN;

  // register wsiS_reqFifo_countReg
  reg [1 : 0] wsiS_reqFifo_countReg;
  wire [1 : 0] wsiS_reqFifo_countReg$D_IN;
  wire wsiS_reqFifo_countReg$EN;

  // register wsiS_reqFifo_levelsValid
  reg wsiS_reqFifo_levelsValid;
  wire wsiS_reqFifo_levelsValid$D_IN, wsiS_reqFifo_levelsValid$EN;

  // register wsiS_statusR
  reg [7 : 0] wsiS_statusR;
  wire [7 : 0] wsiS_statusR$D_IN;
  wire wsiS_statusR$EN;

  // register wsiS_tBusyCount
  reg [31 : 0] wsiS_tBusyCount;
  wire [31 : 0] wsiS_tBusyCount$D_IN;
  wire wsiS_tBusyCount$EN;

  // register wsiS_trafficSticky
  reg wsiS_trafficSticky;
  wire wsiS_trafficSticky$D_IN, wsiS_trafficSticky$EN;

  // register wsiS_wordCount
  reg [11 : 0] wsiS_wordCount;
  wire [11 : 0] wsiS_wordCount$D_IN;
  wire wsiS_wordCount$EN;

  // ports of submodule axiM_reqFifo
  wire [60 : 0] axiM_reqFifo$D_IN, axiM_reqFifo$D_OUT;
  wire axiM_reqFifo$CLR,
       axiM_reqFifo$DEQ,
       axiM_reqFifo$EMPTY_N,
       axiM_reqFifo$ENQ,
       axiM_reqFifo$FULL_N;

  // ports of submodule axiS_axiS_fifof
  wire [164 : 0] axiS_axiS_fifof$D_IN, axiS_axiS_fifof$D_OUT;
  wire axiS_axiS_fifof$CLR,
       axiS_axiS_fifof$DEQ,
       axiS_axiS_fifof$EMPTY_N,
       axiS_axiS_fifof$ENQ,
       axiS_axiS_fifof$FULL_N;

  // ports of submodule axiS_reqFifo
  wire [60 : 0] axiS_reqFifo$D_IN, axiS_reqFifo$D_OUT;
  wire axiS_reqFifo$CLR,
       axiS_reqFifo$DEQ,
       axiS_reqFifo$EMPTY_N,
       axiS_reqFifo$ENQ,
       axiS_reqFifo$FULL_N;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // ports of submodule wsiS_reqFifo
  wire [60 : 0] wsiS_reqFifo$D_IN, wsiS_reqFifo$D_OUT;
  wire wsiS_reqFifo$CLR,
       wsiS_reqFifo$DEQ,
       wsiS_reqFifo$EMPTY_N,
       wsiS_reqFifo$ENQ,
       wsiS_reqFifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_axiM_advance_data,
       CAN_FIRE_RL_axiM_axiM_do_deq,
       CAN_FIRE_RL_axiM_axiM_fifof_both,
       CAN_FIRE_RL_axiM_axiM_fifof_decCtr,
       CAN_FIRE_RL_axiM_axiM_fifof_incCtr,
       CAN_FIRE_RL_axiM_axi_Em_doAlways,
       CAN_FIRE_RL_axiM_operateD__dreg_update,
       CAN_FIRE_RL_axiS_advance_data,
       CAN_FIRE_RL_axiS_axiS_do_enq,
       CAN_FIRE_RL_axiS_axi_Es_doAlways,
       CAN_FIRE_RL_axiS_operateD__dreg_update,
       CAN_FIRE_RL_axiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_axiS_reqFifo_reset,
       CAN_FIRE_RL_doMessageAXIrecv,
       CAN_FIRE_RL_doMessageAXIsend,
       CAN_FIRE_RL_doMessageBypass,
       CAN_FIRE_RL_operating_actions,
       CAN_FIRE_RL_wci_cfrd,
       CAN_FIRE_RL_wci_cfwr,
       CAN_FIRE_RL_wci_ctrl_EiI,
       CAN_FIRE_RL_wci_ctrl_IsO,
       CAN_FIRE_RL_wci_ctrl_OrE,
       CAN_FIRE_RL_wci_wci_Es_doAlways_Req,
       CAN_FIRE_RL_wci_wslv_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wci_wslv_ctl_op_complete,
       CAN_FIRE_RL_wci_wslv_ctl_op_start,
       CAN_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate,
       CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter,
       CAN_FIRE_RL_wci_wslv_reqF_enq,
       CAN_FIRE_RL_wci_wslv_request_decode,
       CAN_FIRE_RL_wci_wslv_respF_both,
       CAN_FIRE_RL_wci_wslv_respF_decCtr,
       CAN_FIRE_RL_wci_wslv_respF_deq,
       CAN_FIRE_RL_wci_wslv_respF_incCtr,
       CAN_FIRE_RL_wci_wslv_sFlagReg__dreg_update,
       CAN_FIRE_RL_wci_wslv_sThreadBusy_reg,
       CAN_FIRE_RL_wsiM_ext_status_assign,
       CAN_FIRE_RL_wsiM_inc_tBusyCount,
       CAN_FIRE_RL_wsiM_isReset_isResetAssertedUpdate,
       CAN_FIRE_RL_wsiM_operateD__dreg_update,
       CAN_FIRE_RL_wsiM_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiM_reqFifo_both,
       CAN_FIRE_RL_wsiM_reqFifo_decCtr,
       CAN_FIRE_RL_wsiM_reqFifo_deq,
       CAN_FIRE_RL_wsiM_reqFifo_incCtr,
       CAN_FIRE_RL_wsiM_sThreadBusy_reg,
       CAN_FIRE_RL_wsiM_update_statusR,
       CAN_FIRE_RL_wsiS_backpressure,
       CAN_FIRE_RL_wsiS_ext_status_assign,
       CAN_FIRE_RL_wsiS_inc_tBusyCount,
       CAN_FIRE_RL_wsiS_isReset_isResetAssertedUpdate,
       CAN_FIRE_RL_wsiS_operateD__dreg_update,
       CAN_FIRE_RL_wsiS_peerIsReady__dreg_update,
       CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       CAN_FIRE_RL_wsiS_reqFifo_enq,
       CAN_FIRE_RL_wsiS_reqFifo_reset,
       CAN_FIRE_RL_wsiS_update_statusR,
       CAN_FIRE_RL_wsi_Es_doAlways,
       CAN_FIRE___me_check_49,
       CAN_FIRE___me_check_52,
       CAN_FIRE___me_check_53,
       CAN_FIRE___me_check_54,
       CAN_FIRE___me_check_55,
       CAN_FIRE_axiM0_sTREADY,
       CAN_FIRE_axiS0_mTDATA,
       CAN_FIRE_axiS0_mTKEEP,
       CAN_FIRE_axiS0_mTLAST,
       CAN_FIRE_axiS0_mTSTRB,
       CAN_FIRE_axiS0_mTUSER,
       CAN_FIRE_axiS0_mTVALID,
       CAN_FIRE_wciS0_mAddr,
       CAN_FIRE_wciS0_mAddrSpace,
       CAN_FIRE_wciS0_mByteEn,
       CAN_FIRE_wciS0_mCmd,
       CAN_FIRE_wciS0_mData,
       CAN_FIRE_wciS0_mFlag,
       CAN_FIRE_wsiM0_sReset_n,
       CAN_FIRE_wsiM0_sThreadBusy,
       CAN_FIRE_wsiS0_mBurstLength,
       CAN_FIRE_wsiS0_mBurstPrecise,
       CAN_FIRE_wsiS0_mByteEn,
       CAN_FIRE_wsiS0_mCmd,
       CAN_FIRE_wsiS0_mData,
       CAN_FIRE_wsiS0_mDataInfo,
       CAN_FIRE_wsiS0_mReqInfo,
       CAN_FIRE_wsiS0_mReqLast,
       CAN_FIRE_wsiS0_mReset_n,
       WILL_FIRE_RL_axiM_advance_data,
       WILL_FIRE_RL_axiM_axiM_do_deq,
       WILL_FIRE_RL_axiM_axiM_fifof_both,
       WILL_FIRE_RL_axiM_axiM_fifof_decCtr,
       WILL_FIRE_RL_axiM_axiM_fifof_incCtr,
       WILL_FIRE_RL_axiM_axi_Em_doAlways,
       WILL_FIRE_RL_axiM_operateD__dreg_update,
       WILL_FIRE_RL_axiS_advance_data,
       WILL_FIRE_RL_axiS_axiS_do_enq,
       WILL_FIRE_RL_axiS_axi_Es_doAlways,
       WILL_FIRE_RL_axiS_operateD__dreg_update,
       WILL_FIRE_RL_axiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_axiS_reqFifo_reset,
       WILL_FIRE_RL_doMessageAXIrecv,
       WILL_FIRE_RL_doMessageAXIsend,
       WILL_FIRE_RL_doMessageBypass,
       WILL_FIRE_RL_operating_actions,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wci_Es_doAlways_Req,
       WILL_FIRE_RL_wci_wslv_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate,
       WILL_FIRE_RL_wci_wslv_reqF__updateLevelCounter,
       WILL_FIRE_RL_wci_wslv_reqF_enq,
       WILL_FIRE_RL_wci_wslv_request_decode,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_deq,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wci_wslv_sFlagReg__dreg_update,
       WILL_FIRE_RL_wci_wslv_sThreadBusy_reg,
       WILL_FIRE_RL_wsiM_ext_status_assign,
       WILL_FIRE_RL_wsiM_inc_tBusyCount,
       WILL_FIRE_RL_wsiM_isReset_isResetAssertedUpdate,
       WILL_FIRE_RL_wsiM_operateD__dreg_update,
       WILL_FIRE_RL_wsiM_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiM_reqFifo_both,
       WILL_FIRE_RL_wsiM_reqFifo_decCtr,
       WILL_FIRE_RL_wsiM_reqFifo_deq,
       WILL_FIRE_RL_wsiM_reqFifo_incCtr,
       WILL_FIRE_RL_wsiM_sThreadBusy_reg,
       WILL_FIRE_RL_wsiM_update_statusR,
       WILL_FIRE_RL_wsiS_backpressure,
       WILL_FIRE_RL_wsiS_ext_status_assign,
       WILL_FIRE_RL_wsiS_inc_tBusyCount,
       WILL_FIRE_RL_wsiS_isReset_isResetAssertedUpdate,
       WILL_FIRE_RL_wsiS_operateD__dreg_update,
       WILL_FIRE_RL_wsiS_peerIsReady__dreg_update,
       WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter,
       WILL_FIRE_RL_wsiS_reqFifo_enq,
       WILL_FIRE_RL_wsiS_reqFifo_reset,
       WILL_FIRE_RL_wsiS_update_statusR,
       WILL_FIRE_RL_wsi_Es_doAlways,
       WILL_FIRE___me_check_49,
       WILL_FIRE___me_check_52,
       WILL_FIRE___me_check_53,
       WILL_FIRE___me_check_54,
       WILL_FIRE___me_check_55,
       WILL_FIRE_axiM0_sTREADY,
       WILL_FIRE_axiS0_mTDATA,
       WILL_FIRE_axiS0_mTKEEP,
       WILL_FIRE_axiS0_mTLAST,
       WILL_FIRE_axiS0_mTSTRB,
       WILL_FIRE_axiS0_mTUSER,
       WILL_FIRE_axiS0_mTVALID,
       WILL_FIRE_wciS0_mAddr,
       WILL_FIRE_wciS0_mAddrSpace,
       WILL_FIRE_wciS0_mByteEn,
       WILL_FIRE_wciS0_mCmd,
       WILL_FIRE_wciS0_mData,
       WILL_FIRE_wciS0_mFlag,
       WILL_FIRE_wsiM0_sReset_n,
       WILL_FIRE_wsiM0_sThreadBusy,
       WILL_FIRE_wsiS0_mBurstLength,
       WILL_FIRE_wsiS0_mBurstPrecise,
       WILL_FIRE_wsiS0_mByteEn,
       WILL_FIRE_wsiS0_mCmd,
       WILL_FIRE_wsiS0_mData,
       WILL_FIRE_wsiS0_mDataInfo,
       WILL_FIRE_wsiS0_mReqInfo,
       WILL_FIRE_wsiS0_mReqLast,
       WILL_FIRE_wsiS0_mReset_n;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2;
  wire [164 : 0] MUX_axiM_axiM_fifof_q_0$write_1__VAL_1,
		 MUX_axiM_axiM_fifof_q_0$write_1__VAL_2,
		 MUX_axiM_axiM_fifof_q_1$write_1__VAL_1;
  wire [60 : 0] MUX_wsiM_reqFifo_q_0$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_1,
		MUX_wsiM_reqFifo_q_1$write_1__VAL_2;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1,
		MUX_wci_wslv_respF_q_1$write_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
  wire [1 : 0] MUX_axiM_axiM_fifof_c_r$write_1__VAL_1,
	       MUX_axiM_axiM_fifof_c_r$write_1__VAL_2,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1,
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2;
  wire MUX_axiM_axiM_fifof_q_0$write_1__SEL_2,
       MUX_axiM_axiM_fifof_q_1$write_1__SEL_2,
       MUX_controlReg$write_1__SEL_1,
       MUX_spareValue$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_wci_wslv_respF_q_0$write_1__SEL_2,
       MUX_wci_wslv_respF_q_1$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_0$write_1__SEL_2,
       MUX_wsiM_reqFifo_q_1$write_1__SEL_2,
       MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4;

  // remaining internal signals
  reg [63 : 0] v__h15165, v__h15318, v__h3626, v__h3800, v__h3944;
  reg [31 : 0] _theResult____h15302;
  wire [127 : 0] x_user__h11441;
  wire [31 : 0] rdat__h15392,
		rdat__h15492,
		rdat__h15506,
		rdat__h15514,
		rdat__h15520,
		rdat__h15534,
		rdat__h15542,
		rdat__h15548,
		rdat__h15554,
		rdat__h15560;
  wire [15 : 0] x__h15396;
  wire [11 : 0] axiM_reqFifoD_OUT_BITS_55_TO_44_MINUS_1__q1;
  wire [2 : 0] x__h11544,
	       x__h11556,
	       x__h11568,
	       y__h11545,
	       y__h11557,
	       y__h11569;
  wire wsiS_reqFifo_notFull__88_AND_wsiS_burstKind_03_ETC___d210;

  // action method wciS0_mCmd
  assign CAN_FIRE_wciS0_mCmd = 1'd1 ;
  assign WILL_FIRE_wciS0_mCmd = 1'd1 ;

  // action method wciS0_mAddrSpace
  assign CAN_FIRE_wciS0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wciS0_mAddrSpace = 1'd1 ;

  // action method wciS0_mByteEn
  assign CAN_FIRE_wciS0_mByteEn = 1'd1 ;
  assign WILL_FIRE_wciS0_mByteEn = 1'd1 ;

  // action method wciS0_mAddr
  assign CAN_FIRE_wciS0_mAddr = 1'd1 ;
  assign WILL_FIRE_wciS0_mAddr = 1'd1 ;

  // action method wciS0_mData
  assign CAN_FIRE_wciS0_mData = 1'd1 ;
  assign WILL_FIRE_wciS0_mData = 1'd1 ;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // action method wciS0_mFlag
  assign CAN_FIRE_wciS0_mFlag = 1'd1 ;
  assign WILL_FIRE_wciS0_mFlag = 1'd1 ;

  // action method wsiS0_mCmd
  assign CAN_FIRE_wsiS0_mCmd = 1'd1 ;
  assign WILL_FIRE_wsiS0_mCmd = 1'd1 ;

  // action method wsiS0_mReqLast
  assign CAN_FIRE_wsiS0_mReqLast = 1'd1 ;
  assign WILL_FIRE_wsiS0_mReqLast = wsiS0_MReqLast ;

  // action method wsiS0_mBurstPrecise
  assign CAN_FIRE_wsiS0_mBurstPrecise = 1'd1 ;
  assign WILL_FIRE_wsiS0_mBurstPrecise = wsiS0_MBurstPrecise ;

  // action method wsiS0_mBurstLength
  assign CAN_FIRE_wsiS0_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wsiS0_mBurstLength = 1'd1 ;

  // action method wsiS0_mData
  assign CAN_FIRE_wsiS0_mData = 1'd1 ;
  assign WILL_FIRE_wsiS0_mData = 1'd1 ;

  // action method wsiS0_mByteEn
  assign CAN_FIRE_wsiS0_mByteEn = 1'd1 ;
  assign WILL_FIRE_wsiS0_mByteEn = 1'd1 ;

  // action method wsiS0_mReqInfo
  assign CAN_FIRE_wsiS0_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wsiS0_mReqInfo = 1'd1 ;

  // action method wsiS0_mDataInfo
  assign CAN_FIRE_wsiS0_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wsiS0_mDataInfo = 1'd1 ;

  // value method wsiS0_sThreadBusy
  assign wsiS0_SThreadBusy =
	     !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget ;

  // value method wsiS0_sReset_n
  assign wsiS0_SReset_n = !wsiS_isReset_isInReset && wsiS_operateD ;

  // action method wsiS0_mReset_n
  assign CAN_FIRE_wsiS0_mReset_n = 1'd1 ;
  assign WILL_FIRE_wsiS0_mReset_n = wsiS0_MReset_n ;

  // value method wsiM0_mCmd
  assign wsiM0_MCmd = wsiM_sThreadBusy_d ? 3'd0 : wsiM_reqFifo_q_0[60:58] ;

  // value method wsiM0_mReqLast
  assign wsiM0_MReqLast = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[57] ;

  // value method wsiM0_mBurstPrecise
  assign wsiM0_MBurstPrecise = !wsiM_sThreadBusy_d && wsiM_reqFifo_q_0[56] ;

  // value method wsiM0_mBurstLength
  assign wsiM0_MBurstLength =
	     wsiM_sThreadBusy_d ? 12'd0 : wsiM_reqFifo_q_0[55:44] ;

  // value method wsiM0_mData
  assign wsiM0_MData = wsiM_reqFifo_q_0[43:12] ;

  // value method wsiM0_mByteEn
  assign wsiM0_MByteEn = wsiM_reqFifo_q_0[11:8] ;

  // value method wsiM0_mReqInfo
  assign wsiM0_MReqInfo = wsiM_sThreadBusy_d ? 8'd0 : wsiM_reqFifo_q_0[7:0] ;

  // action method wsiM0_sThreadBusy
  assign CAN_FIRE_wsiM0_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wsiM0_sThreadBusy = wsiM0_SThreadBusy ;

  // value method wsiM0_mReset_n
  assign wsiM0_MReset_n = !wsiM_isReset_isInReset && wsiM_operateD ;

  // action method wsiM0_sReset_n
  assign CAN_FIRE_wsiM0_sReset_n = 1'd1 ;
  assign WILL_FIRE_wsiM0_sReset_n = wsiM0_SReset_n ;

  // value method axiM0_mTVALID
  assign axiM0_TVALID = axiM_axiM_fifof_c_r != 2'd0 ;

  // action method axiM0_sTREADY
  assign CAN_FIRE_axiM0_sTREADY = 1'd1 ;
  assign WILL_FIRE_axiM0_sTREADY = axiM0_TREADY ;

  // value method axiM0_mTDATA
  assign axiM0_TDATA = axiM_axiM_fifof_q_0[164:133] ;

  // value method axiM0_mTSTRB
  assign axiM0_TSTRB = axiM_axiM_fifof_q_0[132:129] ;

  // value method axiM0_mTUSER
  assign axiM0_TUSER = axiM_axiM_fifof_q_0[128:1] ;

  // value method axiM0_mTLAST
  assign axiM0_TLAST = axiM_axiM_fifof_q_0[0] ;

  // action method axiS0_mTVALID
  assign CAN_FIRE_axiS0_mTVALID = 1'd1 ;
  assign WILL_FIRE_axiS0_mTVALID = axiS0_TVALID ;

  // value method axiS0_sTREADY
  assign axiS0_TREADY = axiS_axiS_fifof$FULL_N ;

  // action method axiS0_mTDATA
  assign CAN_FIRE_axiS0_mTDATA = 1'd1 ;
  assign WILL_FIRE_axiS0_mTDATA = 1'd1 ;

  // action method axiS0_mTSTRB
  assign CAN_FIRE_axiS0_mTSTRB = 1'd1 ;
  assign WILL_FIRE_axiS0_mTSTRB = 1'd1 ;

  // action method axiS0_mTUSER
  assign CAN_FIRE_axiS0_mTUSER = 1'd1 ;
  assign WILL_FIRE_axiS0_mTUSER = 1'd1 ;

  // action method axiS0_mTKEEP
  assign CAN_FIRE_axiS0_mTKEEP = 1'd1 ;
  assign WILL_FIRE_axiS0_mTKEEP = 1'd1 ;

  // action method axiS0_mTLAST
  assign CAN_FIRE_axiS0_mTLAST = 1'd1 ;
  assign WILL_FIRE_axiS0_mTLAST = axiS0_TLAST ;

  // submodule axiM_reqFifo
  FIFO2 #(.width(32'd61),
	  .guarded(32'd1)) axiM_reqFifo(.RST_N(wciS0_MReset_n),
					.CLK(wciS0_Clk),
					.D_IN(axiM_reqFifo$D_IN),
					.ENQ(axiM_reqFifo$ENQ),
					.DEQ(axiM_reqFifo$DEQ),
					.CLR(axiM_reqFifo$CLR),
					.D_OUT(axiM_reqFifo$D_OUT),
					.FULL_N(axiM_reqFifo$FULL_N),
					.EMPTY_N(axiM_reqFifo$EMPTY_N));

  // submodule axiS_axiS_fifof
  FIFO2 #(.width(32'd165),
	  .guarded(32'd1)) axiS_axiS_fifof(.RST_N(wciS0_MReset_n),
					   .CLK(wciS0_Clk),
					   .D_IN(axiS_axiS_fifof$D_IN),
					   .ENQ(axiS_axiS_fifof$ENQ),
					   .DEQ(axiS_axiS_fifof$DEQ),
					   .CLR(axiS_axiS_fifof$CLR),
					   .D_OUT(axiS_axiS_fifof$D_OUT),
					   .FULL_N(axiS_axiS_fifof$FULL_N),
					   .EMPTY_N(axiS_axiS_fifof$EMPTY_N));

  // submodule axiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) axiS_reqFifo(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(axiS_reqFifo$D_IN),
					    .ENQ(axiS_reqFifo$ENQ),
					    .DEQ(axiS_reqFifo$DEQ),
					    .CLR(axiS_reqFifo$CLR),
					    .D_OUT(axiS_reqFifo$D_OUT),
					    .FULL_N(axiS_reqFifo$FULL_N),
					    .EMPTY_N(axiS_reqFifo$EMPTY_N));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // submodule wsiS_reqFifo
  SizedFIFO #(.p1width(32'd61),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wsiS_reqFifo(.RST_N(wciS0_MReset_n),
					    .CLK(wciS0_Clk),
					    .D_IN(wsiS_reqFifo$D_IN),
					    .ENQ(wsiS_reqFifo$ENQ),
					    .DEQ(wsiS_reqFifo$DEQ),
					    .CLR(wsiS_reqFifo$CLR),
					    .D_OUT(wsiS_reqFifo$D_OUT),
					    .FULL_N(wsiS_reqFifo$FULL_N),
					    .EMPTY_N(wsiS_reqFifo$EMPTY_N));

  // rule RL_wsiS_backpressure
  assign CAN_FIRE_RL_wsiS_backpressure =
	     wsiS_reqFifo_levelsValid && wsiS_operateD && wsiS_peerIsReady ;
  assign WILL_FIRE_RL_wsiS_backpressure = CAN_FIRE_RL_wsiS_backpressure ;

  // rule RL_operating_actions
  assign CAN_FIRE_RL_operating_actions = wci_wslv_cState == 3'd2 ;
  assign WILL_FIRE_RL_operating_actions = CAN_FIRE_RL_operating_actions ;

  // rule RL_wci_wslv_request_decode
  assign CAN_FIRE_RL_wci_wslv_request_decode = wci_wslv_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wci_wslv_request_decode = wci_wslv_reqF$EMPTY_N ;

  // rule RL_wci_wslv_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_wslv_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_sThreadBusy_reg = 1'd1 ;

  // rule RL_wci_wslv_respF_deq
  assign CAN_FIRE_RL_wci_wslv_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_respF_deq = 1'd1 ;

  // rule RL_wci_wslv_ctl_op_start
  assign CAN_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     CAN_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign CAN_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_wci_ctrl_EiI = CAN_FIRE_RL_wci_ctrl_EiI ;

  // rule RL_wci_ctrl_IsO
  assign CAN_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_wci_ctrl_IsO = CAN_FIRE_RL_wci_ctrl_IsO ;

  // rule RL_wci_ctrl_OrE
  assign CAN_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_wci_ctrl_OrE = CAN_FIRE_RL_wci_ctrl_OrE ;

  // rule __me_check_54
  assign CAN_FIRE___me_check_54 = 1'b1 ;
  assign WILL_FIRE___me_check_54 = 1'b1 ;

  // rule __me_check_55
  assign CAN_FIRE___me_check_55 = 1'b1 ;
  assign WILL_FIRE___me_check_55 = 1'b1 ;

  // rule RL_wci_wslv_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wci_wslv_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wci_wslv_isReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate =
	     wci_wslv_isReset_isInReset ;
  assign WILL_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate =
	     wci_wslv_isReset_isInReset ;

  // rule RL_wci_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_wci_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_wci_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_wci_wslv_reqF_enq
  assign CAN_FIRE_RL_wci_wslv_reqF_enq = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign WILL_FIRE_RL_wci_wslv_reqF_enq = CAN_FIRE_RL_wci_wslv_reqF_enq ;

  // rule RL_wsiS_ext_status_assign
  assign CAN_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_ext_status_assign = 1'd1 ;

  // rule RL_wsiS_inc_tBusyCount
  assign CAN_FIRE_RL_wsiS_inc_tBusyCount =
	     wsiS_operateD && wsiS_peerIsReady &&
	     (!CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget) ;
  assign WILL_FIRE_RL_wsiS_inc_tBusyCount = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // rule RL_wsiS_update_statusR
  assign CAN_FIRE_RL_wsiS_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_update_statusR = 1'd1 ;

  // rule RL_wsiS_isReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_wsiS_isReset_isResetAssertedUpdate =
	     wsiS_isReset_isInReset ;
  assign WILL_FIRE_RL_wsiS_isReset_isResetAssertedUpdate =
	     wsiS_isReset_isInReset ;

  // rule RL_wsiM_ext_status_assign
  assign CAN_FIRE_RL_wsiM_ext_status_assign = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_ext_status_assign = 1'd1 ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_respF_c_r != 2'd2 &&
	     wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule __me_check_53
  assign CAN_FIRE___me_check_53 = 1'b1 ;
  assign WILL_FIRE___me_check_53 = 1'b1 ;

  // rule RL_doMessageAXIrecv
  assign CAN_FIRE_RL_doMessageAXIrecv =
	     wsiM_reqFifo_c_r != 2'd2 && axiS_reqFifo$EMPTY_N &&
	     wci_wslv_cState == 3'd2 &&
	     controlReg[0] ;
  assign WILL_FIRE_RL_doMessageAXIrecv = CAN_FIRE_RL_doMessageAXIrecv ;

  // rule RL_wsiM_inc_tBusyCount
  assign CAN_FIRE_RL_wsiM_inc_tBusyCount =
	     wsiM_operateD && wsiM_peerIsReady && wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiM_inc_tBusyCount = CAN_FIRE_RL_wsiM_inc_tBusyCount ;

  // rule RL_wsiM_update_statusR
  assign CAN_FIRE_RL_wsiM_update_statusR = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_update_statusR = 1'd1 ;

  // rule RL_wsiM_reqFifo_deq
  assign CAN_FIRE_RL_wsiM_reqFifo_deq =
	     wsiM_reqFifo_c_r != 2'd0 && !wsiM_sThreadBusy_d ;
  assign WILL_FIRE_RL_wsiM_reqFifo_deq = CAN_FIRE_RL_wsiM_reqFifo_deq ;

  // rule RL_wsiM_sThreadBusy_reg
  assign CAN_FIRE_RL_wsiM_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_sThreadBusy_reg = 1'd1 ;

  // rule RL_wsiM_isReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_wsiM_isReset_isResetAssertedUpdate =
	     wsiM_isReset_isInReset ;
  assign WILL_FIRE_RL_wsiM_isReset_isResetAssertedUpdate =
	     wsiM_isReset_isInReset ;

  // rule RL_wsiM_operateD__dreg_update
  assign CAN_FIRE_RL_wsiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_operateD__dreg_update = 1'd1 ;

  // rule RL_wsiM_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiM_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiM_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_axiM_advance_data
  assign CAN_FIRE_RL_axiM_advance_data =
	     axiM_axiM_fifof_c_r != 2'd2 && axiM_reqFifo$EMPTY_N &&
	     axiM_operateD ;
  assign WILL_FIRE_RL_axiM_advance_data = CAN_FIRE_RL_axiM_advance_data ;

  // rule RL_axiM_operateD__dreg_update
  assign CAN_FIRE_RL_axiM_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_axiM_operateD__dreg_update = 1'd1 ;

  // rule RL_axiM_axi_Em_doAlways
  assign CAN_FIRE_RL_axiM_axi_Em_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_axiM_axi_Em_doAlways = 1'd1 ;

  // rule RL_axiM_axiM_do_deq
  assign CAN_FIRE_RL_axiM_axiM_do_deq =
	     axiM_axiM_fifof_c_r != 2'd0 && axiM0_TREADY ;
  assign WILL_FIRE_RL_axiM_axiM_do_deq = CAN_FIRE_RL_axiM_axiM_do_deq ;

  // rule RL_axiM_axiM_fifof_incCtr
  assign CAN_FIRE_RL_axiM_axiM_fifof_incCtr =
	     ((axiM_axiM_fifof_c_r == 2'd0) ?
		CAN_FIRE_RL_axiM_advance_data :
		axiM_axiM_fifof_c_r != 2'd1 ||
		CAN_FIRE_RL_axiM_advance_data) &&
	     CAN_FIRE_RL_axiM_advance_data &&
	     !CAN_FIRE_RL_axiM_axiM_do_deq ;
  assign WILL_FIRE_RL_axiM_axiM_fifof_incCtr =
	     CAN_FIRE_RL_axiM_axiM_fifof_incCtr ;

  // rule RL_axiM_axiM_fifof_decCtr
  assign CAN_FIRE_RL_axiM_axiM_fifof_decCtr =
	     CAN_FIRE_RL_axiM_axiM_do_deq && !CAN_FIRE_RL_axiM_advance_data ;
  assign WILL_FIRE_RL_axiM_axiM_fifof_decCtr =
	     CAN_FIRE_RL_axiM_axiM_fifof_decCtr ;

  // rule RL_axiM_axiM_fifof_both
  assign CAN_FIRE_RL_axiM_axiM_fifof_both =
	     ((axiM_axiM_fifof_c_r == 2'd1) ?
		CAN_FIRE_RL_axiM_advance_data :
		axiM_axiM_fifof_c_r != 2'd2 ||
		CAN_FIRE_RL_axiM_advance_data) &&
	     CAN_FIRE_RL_axiM_axiM_do_deq &&
	     CAN_FIRE_RL_axiM_advance_data ;
  assign WILL_FIRE_RL_axiM_axiM_fifof_both =
	     CAN_FIRE_RL_axiM_axiM_fifof_both ;

  // rule RL_axiS_advance_data
  assign CAN_FIRE_RL_axiS_advance_data =
	     axiS_axiS_fifof$EMPTY_N && axiS_reqFifo$FULL_N && axiS_operateD ;
  assign WILL_FIRE_RL_axiS_advance_data = CAN_FIRE_RL_axiS_advance_data ;

  // rule RL_axiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_axiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_axiS_advance_data != CAN_FIRE_RL_doMessageAXIrecv ;
  assign WILL_FIRE_RL_axiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_axiS_reqFifo__updateLevelCounter ;

  // rule RL_axiS_reqFifo_reset
  assign CAN_FIRE_RL_axiS_reqFifo_reset =
	     CAN_FIRE_RL_axiS_advance_data || CAN_FIRE_RL_doMessageAXIrecv ;
  assign WILL_FIRE_RL_axiS_reqFifo_reset = CAN_FIRE_RL_axiS_reqFifo_reset ;

  // rule RL_axiS_operateD__dreg_update
  assign CAN_FIRE_RL_axiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_axiS_operateD__dreg_update = 1'd1 ;

  // rule RL_axiS_axi_Es_doAlways
  assign CAN_FIRE_RL_axiS_axi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_axiS_axi_Es_doAlways = 1'd1 ;

  // rule RL_axiS_axiS_do_enq
  assign CAN_FIRE_RL_axiS_axiS_do_enq =
	     axiS_axiS_fifof$FULL_N && axiS0_TVALID ;
  assign WILL_FIRE_RL_axiS_axiS_do_enq = CAN_FIRE_RL_axiS_axiS_do_enq ;

  // rule RL_wsi_Es_doAlways
  assign CAN_FIRE_RL_wsi_Es_doAlways = 1'd1 ;
  assign WILL_FIRE_RL_wsi_Es_doAlways = 1'd1 ;

  // rule RL_wsiS_reqFifo_enq
  assign CAN_FIRE_RL_wsiS_reqFifo_enq =
	     wsiS_operateD && wsiS_peerIsReady &&
	     wsiS_wsiReq$wget[60:58] == 3'd1 ;
  assign WILL_FIRE_RL_wsiS_reqFifo_enq = CAN_FIRE_RL_wsiS_reqFifo_enq ;

  // rule RL_doMessageBypass
  assign CAN_FIRE_RL_doMessageBypass =
	     wsiM_reqFifo_c_r != 2'd2 && wsiS_reqFifo$EMPTY_N &&
	     wci_wslv_cState == 3'd2 &&
	     !controlReg[0] ;
  assign WILL_FIRE_RL_doMessageBypass = CAN_FIRE_RL_doMessageBypass ;

  // rule RL_doMessageAXIsend
  assign CAN_FIRE_RL_doMessageAXIsend =
	     wsiS_reqFifo$EMPTY_N && axiM_reqFifo$FULL_N &&
	     wci_wslv_cState == 3'd2 &&
	     controlReg[0] ;
  assign WILL_FIRE_RL_doMessageAXIsend = CAN_FIRE_RL_doMessageAXIsend ;

  // rule __me_check_49
  assign CAN_FIRE___me_check_49 = 1'b1 ;
  assign WILL_FIRE___me_check_49 = 1'b1 ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_respF_c_r != 2'd2 &&
	     wci_wslv_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule __me_check_52
  assign CAN_FIRE___me_check_52 = 1'b1 ;
  assign WILL_FIRE___me_check_52 = 1'b1 ;

  // rule RL_wci_wslv_ctl_op_complete
  assign CAN_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     CAN_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_wci_wslv_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter ;

  // rule RL_wci_wslv_respF_incCtr
  assign CAN_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_enqueueing$whas :
		wci_wslv_respF_c_r != 2'd1 ||
		wci_wslv_respF_enqueueing$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     CAN_FIRE_RL_wci_wslv_respF_incCtr ;

  // rule RL_wci_wslv_respF_decCtr
  assign CAN_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     CAN_FIRE_RL_wci_wslv_respF_decCtr ;

  // rule RL_wci_wslv_respF_both
  assign CAN_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_enqueueing$whas :
		wci_wslv_respF_c_r != 2'd2 ||
		wci_wslv_respF_enqueueing$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_wslv_respF_both = CAN_FIRE_RL_wci_wslv_respF_both ;

  // rule RL_wci_wslv_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wci_wslv_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_wsiS_reqFifo__updateLevelCounter
  assign CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 !=
	     wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_wsiS_reqFifo__updateLevelCounter =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // rule RL_wsiS_reqFifo_reset
  assign CAN_FIRE_RL_wsiS_reqFifo_reset =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 ||
	     wsiS_reqFifo_r_deq$whas ;
  assign WILL_FIRE_RL_wsiS_reqFifo_reset = CAN_FIRE_RL_wsiS_reqFifo_reset ;

  // rule RL_wsiS_operateD__dreg_update
  assign CAN_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_operateD__dreg_update = 1'd1 ;

  // rule RL_wsiS_peerIsReady__dreg_update
  assign CAN_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wsiS_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_wsiM_reqFifo_incCtr
  assign CAN_FIRE_RL_wsiM_reqFifo_incCtr =
	     ((wsiM_reqFifo_c_r == 2'd0) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd1 || wsiM_reqFifo_enqueueing$whas) &&
	     wsiM_reqFifo_enqueueing$whas &&
	     !CAN_FIRE_RL_wsiM_reqFifo_deq ;
  assign WILL_FIRE_RL_wsiM_reqFifo_incCtr = CAN_FIRE_RL_wsiM_reqFifo_incCtr ;

  // rule RL_wsiM_reqFifo_decCtr
  assign CAN_FIRE_RL_wsiM_reqFifo_decCtr =
	     CAN_FIRE_RL_wsiM_reqFifo_deq && !wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_wsiM_reqFifo_decCtr = CAN_FIRE_RL_wsiM_reqFifo_decCtr ;

  // rule RL_wsiM_reqFifo_both
  assign CAN_FIRE_RL_wsiM_reqFifo_both =
	     ((wsiM_reqFifo_c_r == 2'd1) ?
		wsiM_reqFifo_enqueueing$whas :
		wsiM_reqFifo_c_r != 2'd2 || wsiM_reqFifo_enqueueing$whas) &&
	     CAN_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_enqueueing$whas ;
  assign WILL_FIRE_RL_wsiM_reqFifo_both = CAN_FIRE_RL_wsiM_reqFifo_both ;

  // inputs to muxes for submodule ports
  assign MUX_axiM_axiM_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_axiM_axiM_fifof_incCtr &&
	     axiM_axiM_fifof_c_r == 2'd0 ;
  assign MUX_axiM_axiM_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_axiM_axiM_fifof_incCtr &&
	     axiM_axiM_fifof_c_r == 2'd1 ;
  assign MUX_controlReg$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;
  assign MUX_spareValue$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ;
  assign MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ;
  assign MUX_axiM_axiM_fifof_c_r$write_1__VAL_1 = axiM_axiM_fifof_c_r + 2'd1 ;
  assign MUX_axiM_axiM_fifof_c_r$write_1__VAL_2 = axiM_axiM_fifof_c_r - 2'd1 ;
  assign MUX_axiM_axiM_fifof_q_0$write_1__VAL_1 =
	     (axiM_axiM_fifof_c_r == 2'd1) ?
	       MUX_axiM_axiM_fifof_q_0$write_1__VAL_2 :
	       axiM_axiM_fifof_q_1 ;
  assign MUX_axiM_axiM_fifof_q_0$write_1__VAL_2 =
	     { axiM_reqFifo$D_OUT[43:8],
	       x_user__h11441,
	       axiM_reqFifo$D_OUT[57] } ;
  assign MUX_axiM_axiM_fifof_q_1$write_1__VAL_1 =
	     (axiM_axiM_fifof_c_r == 2'd2) ?
	       MUX_axiM_axiM_fifof_q_0$write_1__VAL_2 :
	       165'd0 ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_2 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       wci_wslv_respF_q_1 ;
  always@(WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_1 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h15302 } ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_1 = wsiM_reqFifo_c_r + 2'd1 ;
  assign MUX_wsiM_reqFifo_c_r$write_1__VAL_2 = wsiM_reqFifo_c_r - 2'd1 ;
  assign MUX_wsiM_reqFifo_q_0$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd1) ?
	       MUX_wsiM_reqFifo_q_1$write_1__VAL_2 :
	       wsiM_reqFifo_q_1 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_1 =
	     (wsiM_reqFifo_c_r == 2'd2) ?
	       MUX_wsiM_reqFifo_q_1$write_1__VAL_2 :
	       61'h00000AAAAAAAAA00 ;
  assign MUX_wsiM_reqFifo_q_1$write_1__VAL_2 =
	     WILL_FIRE_RL_doMessageAXIrecv ?
	       axiS_reqFifo$D_OUT :
	       wsiS_reqFifo$D_OUT ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_wciReq$whas = 1'd1 ;
  assign wci_wslv_respF_x_wire$wget = MUX_wci_wslv_respF_q_0$write_1__VAL_2 ;
  assign wci_wslv_respF_x_wire$whas = wci_wslv_respF_enqueueing$whas ;
  assign wci_wslv_wEdge$wget = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_wEdge$whas = WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_sFlagReg_1$wget = 1'b0 ;
  assign wci_wslv_sFlagReg_1$whas = 1'b0 ;
  assign wci_wslv_ctlAckReg_1$wget = 1'd1 ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wci_Es_mCmd_w$wget = wciS0_MCmd ;
  assign wci_wci_Es_mCmd_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddrSpace_w$wget = wciS0_MAddrSpace ;
  assign wci_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign wci_wci_Es_mAddr_w$wget = wciS0_MAddr ;
  assign wci_wci_Es_mAddr_w$whas = 1'd1 ;
  assign wci_wci_Es_mData_w$wget = wciS0_MData ;
  assign wci_wci_Es_mData_w$whas = 1'd1 ;
  assign wci_wci_Es_mByteEn_w$wget = wciS0_MByteEn ;
  assign wci_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign wsiS_wsiReq$wget =
	     { wsiS0_MCmd,
	       wsiS0_MReqLast,
	       wsiS0_MBurstPrecise,
	       wsiS0_MBurstLength,
	       wsiS0_MData,
	       wsiS0_MByteEn,
	       wsiS0_MReqInfo } ;
  assign wsiS_wsiReq$whas = 1'd1 ;
  assign wsiS_operateD_1$wget = 1'd1 ;
  assign wsiS_operateD_1$whas = CAN_FIRE_RL_operating_actions ;
  assign wsiS_peerIsReady_1$wget = 1'd1 ;
  assign wsiS_peerIsReady_1$whas = wsiS0_MReset_n ;
  assign wsiS_sThreadBusy_dw$wget = wsiS_reqFifo_countReg > 2'd1 ;
  assign wsiS_sThreadBusy_dw$whas = CAN_FIRE_RL_wsiS_backpressure ;
  assign wsiM_reqFifo_x_wire$wget = MUX_wsiM_reqFifo_q_1$write_1__VAL_2 ;
  assign wsiM_reqFifo_x_wire$whas = wsiM_reqFifo_enqueueing$whas ;
  assign wsiM_operateD_1$wget = 1'd1 ;
  assign wsiM_operateD_1$whas = CAN_FIRE_RL_operating_actions ;
  assign wsiM_peerIsReady_1$wget = 1'd1 ;
  assign wsiM_peerIsReady_1$whas = wsiM0_SReset_n ;
  assign axiM_axiM_fifof_x_wire$wget =
	     MUX_axiM_axiM_fifof_q_0$write_1__VAL_2 ;
  assign axiM_axiM_fifof_x_wire$whas = CAN_FIRE_RL_axiM_advance_data ;
  assign axiM_operateD_1$wget = 1'd1 ;
  assign axiM_operateD_1$whas = CAN_FIRE_RL_operating_actions ;
  assign axiM_axi_Em_mTRdy_w$wget = 1'd1 ;
  assign axiM_axi_Em_mTRdy_w$whas = axiM0_TREADY ;
  assign axiS_operateD_1$wget = 1'd1 ;
  assign axiS_operateD_1$whas = CAN_FIRE_RL_operating_actions ;
  assign axiS_axi_Es_mTVal_w$wget = 1'd1 ;
  assign axiS_axi_Es_mTVal_w$whas = axiS0_TVALID ;
  assign axiS_axi_Es_mTLast_w$wget = 1'd1 ;
  assign axiS_axi_Es_mTLast_w$whas = axiS0_TLAST ;
  assign axiS_axi_Es_mTData_w$wget = axiS0_TDATA ;
  assign axiS_axi_Es_mTData_w$whas = 1'd1 ;
  assign axiS_axi_Es_mTStrb_w$wget = axiS0_TSTRB ;
  assign axiS_axi_Es_mTStrb_w$whas = 1'd1 ;
  assign axiS_axi_Es_mTUser_w$wget = axiS0_TUSER ;
  assign axiS_axi_Es_mTUser_w$whas = 1'd1 ;
  assign wsi_Es_mCmd_w$wget = wsiS0_MCmd ;
  assign wsi_Es_mCmd_w$whas = 1'd1 ;
  assign wsi_Es_mBurstLength_w$wget = wsiS0_MBurstLength ;
  assign wsi_Es_mBurstLength_w$whas = 1'd1 ;
  assign wsi_Es_mData_w$wget = wsiS0_MData ;
  assign wsi_Es_mData_w$whas = 1'd1 ;
  assign wsi_Es_mByteEn_w$wget = wsiS0_MByteEn ;
  assign wsi_Es_mByteEn_w$whas = 1'd1 ;
  assign wsi_Es_mReqInfo_w$wget = wsiS0_MReqInfo ;
  assign wsi_Es_mReqInfo_w$whas = 1'd1 ;
  assign wci_wslv_reqF_r_enq$whas = CAN_FIRE_RL_wci_wslv_reqF_enq ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_reqF_r_clr$whas = 1'b0 ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_respF_dequeueing$whas = wci_wslv_respF_c_r != 2'd0 ;
  assign wci_wslv_sThreadBusy_pw$whas = 1'b0 ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wsiS_reqFifo_r_enq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign wsiS_reqFifo_r_deq$whas =
	     WILL_FIRE_RL_doMessageAXIsend || WILL_FIRE_RL_doMessageBypass ;
  assign wsiS_reqFifo_r_clr$whas = 1'b0 ;
  assign wsiS_reqFifo_doResetEnq$whas =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign wsiS_reqFifo_doResetDeq$whas = wsiS_reqFifo_r_deq$whas ;
  assign wsiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign wsiM_reqFifo_enqueueing$whas =
	     WILL_FIRE_RL_doMessageAXIrecv || WILL_FIRE_RL_doMessageBypass ;
  assign wsiM_reqFifo_dequeueing$whas = CAN_FIRE_RL_wsiM_reqFifo_deq ;
  assign wsiM_sThreadBusy_pw$whas = wsiM0_SThreadBusy ;
  assign axiM_axiM_fifof_enqueueing$whas = CAN_FIRE_RL_axiM_advance_data ;
  assign axiM_axiM_fifof_dequeueing$whas = CAN_FIRE_RL_axiM_axiM_do_deq ;
  assign axiM_axiM_deq_ready$whas = axiM0_TREADY ;
  assign axiM_axiM_deq_deq$whas = 1'b0 ;
  assign axiS_axiS_enq_valid$whas = axiS0_TVALID ;
  assign axiS_axiS_enq_enq$whas = 1'b0 ;
  assign axiS_reqFifo_r_enq$whas = CAN_FIRE_RL_axiS_advance_data ;
  assign axiS_reqFifo_r_deq$whas = CAN_FIRE_RL_doMessageAXIrecv ;
  assign axiS_reqFifo_r_clr$whas = 1'b0 ;
  assign axiS_reqFifo_doResetEnq$whas = CAN_FIRE_RL_axiS_advance_data ;
  assign axiS_reqFifo_doResetDeq$whas = CAN_FIRE_RL_doMessageAXIrecv ;
  assign axiS_reqFifo_doResetClr$whas = 1'b0 ;
  assign axiS_axi_Es_mTKeep_w$whas = 1'd1 ;
  assign wsi_Es_mReqLast_w$whas = wsiS0_MReqLast ;
  assign wsi_Es_mBurstPrecise_w$whas = wsiS0_MBurstPrecise ;
  assign wsi_Es_mDataInfo_w$whas = 1'd1 ;
  assign wsiS_extStatusW$wget =
	     { wsiS_pMesgCount, wsiS_iMesgCount, wsiS_tBusyCount } ;
  assign wsiM_extStatusW$wget =
	     { wsiM_pMesgCount, wsiM_iMesgCount, wsiM_tBusyCount } ;
  assign axiS_axiS_data_wire$wget =
	     { axiS0_TDATA, axiS0_TSTRB, axiS0_TUSER, axiS0_TLAST } ;

  // register axiM_axiM_fifof_c_r
  assign axiM_axiM_fifof_c_r$D_IN =
	     WILL_FIRE_RL_axiM_axiM_fifof_incCtr ?
	       MUX_axiM_axiM_fifof_c_r$write_1__VAL_1 :
	       MUX_axiM_axiM_fifof_c_r$write_1__VAL_2 ;
  assign axiM_axiM_fifof_c_r$EN =
	     WILL_FIRE_RL_axiM_axiM_fifof_incCtr ||
	     WILL_FIRE_RL_axiM_axiM_fifof_decCtr ;

  // register axiM_axiM_fifof_q_0
  always@(WILL_FIRE_RL_axiM_axiM_fifof_both or
	  MUX_axiM_axiM_fifof_q_0$write_1__VAL_1 or
	  MUX_axiM_axiM_fifof_q_0$write_1__SEL_2 or
	  MUX_axiM_axiM_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_axiM_axiM_fifof_decCtr or axiM_axiM_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_axiM_axiM_fifof_both:
	  axiM_axiM_fifof_q_0$D_IN = MUX_axiM_axiM_fifof_q_0$write_1__VAL_1;
      MUX_axiM_axiM_fifof_q_0$write_1__SEL_2:
	  axiM_axiM_fifof_q_0$D_IN = MUX_axiM_axiM_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_axiM_axiM_fifof_decCtr:
	  axiM_axiM_fifof_q_0$D_IN = axiM_axiM_fifof_q_1;
      default: axiM_axiM_fifof_q_0$D_IN =
		   165'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign axiM_axiM_fifof_q_0$EN =
	     WILL_FIRE_RL_axiM_axiM_fifof_both ||
	     WILL_FIRE_RL_axiM_axiM_fifof_incCtr &&
	     axiM_axiM_fifof_c_r == 2'd0 ||
	     WILL_FIRE_RL_axiM_axiM_fifof_decCtr ;

  // register axiM_axiM_fifof_q_1
  always@(WILL_FIRE_RL_axiM_axiM_fifof_both or
	  MUX_axiM_axiM_fifof_q_1$write_1__VAL_1 or
	  MUX_axiM_axiM_fifof_q_1$write_1__SEL_2 or
	  MUX_axiM_axiM_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_axiM_axiM_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_axiM_axiM_fifof_both:
	  axiM_axiM_fifof_q_1$D_IN = MUX_axiM_axiM_fifof_q_1$write_1__VAL_1;
      MUX_axiM_axiM_fifof_q_1$write_1__SEL_2:
	  axiM_axiM_fifof_q_1$D_IN = MUX_axiM_axiM_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_axiM_axiM_fifof_decCtr: axiM_axiM_fifof_q_1$D_IN = 165'd0;
      default: axiM_axiM_fifof_q_1$D_IN =
		   165'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign axiM_axiM_fifof_q_1$EN =
	     WILL_FIRE_RL_axiM_axiM_fifof_both ||
	     WILL_FIRE_RL_axiM_axiM_fifof_incCtr &&
	     axiM_axiM_fifof_c_r == 2'd1 ||
	     WILL_FIRE_RL_axiM_axiM_fifof_decCtr ;

  // register axiM_operateD
  assign axiM_operateD$D_IN = CAN_FIRE_RL_operating_actions ;
  assign axiM_operateD$EN = 1'd1 ;

  // register axiRecvCount
  assign axiRecvCount$D_IN = axiRecvCount + 32'd1 ;
  assign axiRecvCount$EN = CAN_FIRE_RL_doMessageAXIrecv ;

  // register axiS_operateD
  assign axiS_operateD$D_IN = CAN_FIRE_RL_operating_actions ;
  assign axiS_operateD$EN = 1'd1 ;

  // register axiS_reqFifo_countReg
  assign axiS_reqFifo_countReg$D_IN =
	     CAN_FIRE_RL_axiS_advance_data ?
	       axiS_reqFifo_countReg + 2'd1 :
	       axiS_reqFifo_countReg - 2'd1 ;
  assign axiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_axiS_reqFifo__updateLevelCounter ;

  // register axiS_reqFifo_levelsValid
  assign axiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_axiS_reqFifo_reset ;
  assign axiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_axiS_advance_data ||
	     WILL_FIRE_RL_doMessageAXIrecv ||
	     WILL_FIRE_RL_axiS_reqFifo_reset ;

  // register axiS_xfrActive
  assign axiS_xfrActive$D_IN = !axiS_axiS_fifof$D_OUT[0] ;
  assign axiS_xfrActive$EN = CAN_FIRE_RL_axiS_advance_data ;

  // register axiS_xfrLenLSBs
  assign axiS_xfrLenLSBs$D_IN = axiS_axiS_fifof$D_OUT[2:1] ;
  assign axiS_xfrLenLSBs$EN =
	     WILL_FIRE_RL_axiS_advance_data && !axiS_xfrActive ;

  // register axiSendCount
  assign axiSendCount$D_IN = axiSendCount + 32'd1 ;
  assign axiSendCount$EN = CAN_FIRE_RL_doMessageAXIsend ;

  // register bypassCount
  assign bypassCount$D_IN = bypassCount + 32'd1 ;
  assign bypassCount$EN = CAN_FIRE_RL_doMessageBypass ;

  // register controlReg
  assign controlReg$D_IN =
	     MUX_controlReg$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       32'd1 ;
  assign controlReg$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;

  // register spareValue
  assign spareValue$D_IN =
	     MUX_spareValue$write_1__SEL_1 ?
	       wci_wslv_reqF$D_OUT[31:0] :
	       32'd0 ;
  assign spareValue$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0 ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     !MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ||
	     MUX_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      MUX_wci_wslv_respF_q_0$write_1__SEL_2:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_1 or
	  MUX_wci_wslv_respF_q_1$write_1__SEL_2 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_1;
      MUX_wci_wslv_respF_q_1$write_1__SEL_2:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = 1'b0 ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_burstKind
  assign wsiM_burstKind$D_IN =
	     (wsiM_burstKind == 2'd0) ?
	       (wsiM_reqFifo_q_0[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiM_burstKind$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     (wsiM_burstKind == 2'd0 ||
	      (wsiM_burstKind == 2'd1 || wsiM_burstKind == 2'd2) &&
	      wsiM_reqFifo_q_0[57]) ;

  // register wsiM_errorSticky
  assign wsiM_errorSticky$D_IN = 1'b0 ;
  assign wsiM_errorSticky$EN = 1'b0 ;

  // register wsiM_iMesgCount
  assign wsiM_iMesgCount$D_IN = wsiM_iMesgCount + 32'd1 ;
  assign wsiM_iMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd2 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_isReset_isInReset
  assign wsiM_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiM_isReset_isInReset$EN = wsiM_isReset_isInReset ;

  // register wsiM_operateD
  assign wsiM_operateD$D_IN = CAN_FIRE_RL_operating_actions ;
  assign wsiM_operateD$EN = 1'd1 ;

  // register wsiM_pMesgCount
  assign wsiM_pMesgCount$D_IN = wsiM_pMesgCount + 32'd1 ;
  assign wsiM_pMesgCount$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 &&
	     wsiM_burstKind == 2'd1 &&
	     wsiM_reqFifo_q_0[57] ;

  // register wsiM_peerIsReady
  assign wsiM_peerIsReady$D_IN = wsiM0_SReset_n ;
  assign wsiM_peerIsReady$EN = 1'd1 ;

  // register wsiM_reqFifo_c_r
  assign wsiM_reqFifo_c_r$D_IN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ?
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_1 :
	       MUX_wsiM_reqFifo_c_r$write_1__VAL_2 ;
  assign wsiM_reqFifo_c_r$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_0
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_0$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_0$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr or wsiM_reqFifo_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_0$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_0$write_1__SEL_2:
	  wsiM_reqFifo_q_0$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_0$D_IN = wsiM_reqFifo_q_1;
      default: wsiM_reqFifo_q_0$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_0$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd0 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_reqFifo_q_1
  always@(WILL_FIRE_RL_wsiM_reqFifo_both or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_1 or
	  MUX_wsiM_reqFifo_q_1$write_1__SEL_2 or
	  MUX_wsiM_reqFifo_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wsiM_reqFifo_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wsiM_reqFifo_both:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_1;
      MUX_wsiM_reqFifo_q_1$write_1__SEL_2:
	  wsiM_reqFifo_q_1$D_IN = MUX_wsiM_reqFifo_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wsiM_reqFifo_decCtr:
	  wsiM_reqFifo_q_1$D_IN = 61'h00000AAAAAAAAA00;
      default: wsiM_reqFifo_q_1$D_IN =
		   61'h0AAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wsiM_reqFifo_q_1$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_both ||
	     WILL_FIRE_RL_wsiM_reqFifo_incCtr && wsiM_reqFifo_c_r == 2'd1 ||
	     WILL_FIRE_RL_wsiM_reqFifo_decCtr ;

  // register wsiM_sThreadBusy_d
  assign wsiM_sThreadBusy_d$D_IN = wsiM0_SThreadBusy ;
  assign wsiM_sThreadBusy_d$EN = 1'd1 ;

  // register wsiM_statusR
  assign wsiM_statusR$D_IN =
	     { wsiM_isReset_isInReset,
	       !wsiM_peerIsReady,
	       !wsiM_operateD,
	       wsiM_errorSticky,
	       wsiM_burstKind != 2'd0,
	       wsiM_sThreadBusy_d,
	       1'd0,
	       wsiM_trafficSticky } ;
  assign wsiM_statusR$EN = 1'd1 ;

  // register wsiM_tBusyCount
  assign wsiM_tBusyCount$D_IN = wsiM_tBusyCount + 32'd1 ;
  assign wsiM_tBusyCount$EN = CAN_FIRE_RL_wsiM_inc_tBusyCount ;

  // register wsiM_trafficSticky
  assign wsiM_trafficSticky$D_IN = 1'd1 ;
  assign wsiM_trafficSticky$EN =
	     WILL_FIRE_RL_wsiM_reqFifo_deq &&
	     wsiM_reqFifo_q_0[60:58] == 3'd1 ;

  // register wsiS_burstKind
  assign wsiS_burstKind$D_IN =
	     (wsiS_burstKind == 2'd0) ?
	       (wsiS_wsiReq$wget[56] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wsiS_burstKind$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq &&
	     wsiS_reqFifo_notFull__88_AND_wsiS_burstKind_03_ETC___d210 ;

  // register wsiS_errorSticky
  assign wsiS_errorSticky$D_IN = 1'd1 ;
  assign wsiS_errorSticky$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && !wsiS_reqFifo$FULL_N ;

  // register wsiS_iMesgCount
  assign wsiS_iMesgCount$D_IN = wsiS_iMesgCount + 32'd1 ;
  assign wsiS_iMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd2 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_isReset_isInReset
  assign wsiS_isReset_isInReset$D_IN = 1'd0 ;
  assign wsiS_isReset_isInReset$EN = wsiS_isReset_isInReset ;

  // register wsiS_mesgWordLength
  assign wsiS_mesgWordLength$D_IN = wsiS_wordCount ;
  assign wsiS_mesgWordLength$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_operateD
  assign wsiS_operateD$D_IN = CAN_FIRE_RL_operating_actions ;
  assign wsiS_operateD$EN = 1'd1 ;

  // register wsiS_pMesgCount
  assign wsiS_pMesgCount$D_IN = wsiS_pMesgCount + 32'd1 ;
  assign wsiS_pMesgCount$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N &&
	     wsiS_burstKind == 2'd1 &&
	     wsiS_wsiReq$wget[57] ;

  // register wsiS_peerIsReady
  assign wsiS_peerIsReady$D_IN = wsiS0_MReset_n ;
  assign wsiS_peerIsReady$EN = 1'd1 ;

  // register wsiS_reqFifo_countReg
  assign wsiS_reqFifo_countReg$D_IN =
	     MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 ?
	       wsiS_reqFifo_countReg + 2'd1 :
	       wsiS_reqFifo_countReg - 2'd1 ;
  assign wsiS_reqFifo_countReg$EN =
	     CAN_FIRE_RL_wsiS_reqFifo__updateLevelCounter ;

  // register wsiS_reqFifo_levelsValid
  assign wsiS_reqFifo_levelsValid$D_IN = WILL_FIRE_RL_wsiS_reqFifo_reset ;
  assign wsiS_reqFifo_levelsValid$EN =
	     WILL_FIRE_RL_wsiS_reqFifo_enq && wsiS_reqFifo$FULL_N ||
	     WILL_FIRE_RL_doMessageAXIsend ||
	     WILL_FIRE_RL_doMessageBypass ||
	     WILL_FIRE_RL_wsiS_reqFifo_reset ;

  // register wsiS_statusR
  assign wsiS_statusR$D_IN =
	     { wsiS_isReset_isInReset,
	       !wsiS_peerIsReady,
	       !wsiS_operateD,
	       wsiS_errorSticky,
	       wsiS_burstKind != 2'd0,
	       !CAN_FIRE_RL_wsiS_backpressure || wsiS_sThreadBusy_dw$wget,
	       1'd0,
	       wsiS_trafficSticky } ;
  assign wsiS_statusR$EN = 1'd1 ;

  // register wsiS_tBusyCount
  assign wsiS_tBusyCount$D_IN = wsiS_tBusyCount + 32'd1 ;
  assign wsiS_tBusyCount$EN = CAN_FIRE_RL_wsiS_inc_tBusyCount ;

  // register wsiS_trafficSticky
  assign wsiS_trafficSticky$D_IN = 1'd1 ;
  assign wsiS_trafficSticky$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // register wsiS_wordCount
  assign wsiS_wordCount$D_IN =
	     wsiS_wsiReq$wget[57] ? 12'd1 : wsiS_wordCount + 12'd1 ;
  assign wsiS_wordCount$EN = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;

  // submodule axiM_reqFifo
  assign axiM_reqFifo$D_IN = wsiS_reqFifo$D_OUT ;
  assign axiM_reqFifo$ENQ = CAN_FIRE_RL_doMessageAXIsend ;
  assign axiM_reqFifo$DEQ = CAN_FIRE_RL_axiM_advance_data ;
  assign axiM_reqFifo$CLR = 1'b0 ;

  // submodule axiS_axiS_fifof
  assign axiS_axiS_fifof$D_IN = axiS_axiS_data_wire$wget ;
  assign axiS_axiS_fifof$ENQ = CAN_FIRE_RL_axiS_axiS_do_enq ;
  assign axiS_axiS_fifof$DEQ = CAN_FIRE_RL_axiS_advance_data ;
  assign axiS_axiS_fifof$CLR = 1'b0 ;

  // submodule axiS_reqFifo
  assign axiS_reqFifo$D_IN =
	     { 3'd1,
	       axiS_axiS_fifof$D_OUT[0],
	       1'd1,
	       axiS_axiS_fifof$D_OUT[14:3],
	       axiS_axiS_fifof$D_OUT[164:129],
	       axiS_axiS_fifof$D_OUT[32:25] } ;
  assign axiS_reqFifo$ENQ = CAN_FIRE_RL_axiS_advance_data ;
  assign axiS_reqFifo$DEQ = CAN_FIRE_RL_doMessageAXIrecv ;
  assign axiS_reqFifo$CLR = 1'b0 ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = CAN_FIRE_RL_wci_wslv_reqF_enq ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // submodule wsiS_reqFifo
  assign wsiS_reqFifo$D_IN = wsiS_wsiReq$wget ;
  assign wsiS_reqFifo$ENQ = MUX_wsiS_reqFifo_levelsValid$write_1__SEL_4 ;
  assign wsiS_reqFifo$DEQ = wsiS_reqFifo_r_deq$whas ;
  assign wsiS_reqFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign axiM_reqFifoD_OUT_BITS_55_TO_44_MINUS_1__q1 =
	     axiM_reqFifo$D_OUT[55:44] - 12'd1 ;
  assign rdat__h15392 = hasDebugLogic ? { 16'd0, x__h15396 } : 32'd0 ;
  assign rdat__h15492 = hasDebugLogic ? wsiS_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h15506 = hasDebugLogic ? wsiS_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h15514 = hasDebugLogic ? wsiS_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h15520 = hasDebugLogic ? wsiM_extStatusW$wget[95:64] : 32'd0 ;
  assign rdat__h15534 = hasDebugLogic ? wsiM_extStatusW$wget[63:32] : 32'd0 ;
  assign rdat__h15542 = hasDebugLogic ? wsiM_extStatusW$wget[31:0] : 32'd0 ;
  assign rdat__h15548 = hasDebugLogic ? bypassCount : 32'd0 ;
  assign rdat__h15554 = hasDebugLogic ? axiSendCount : 32'd0 ;
  assign rdat__h15560 = hasDebugLogic ? axiRecvCount : 32'd0 ;
  assign wsiS_reqFifo_notFull__88_AND_wsiS_burstKind_03_ETC___d210 =
	     wsiS_reqFifo$FULL_N &&
	     (wsiS_burstKind == 2'd0 ||
	      (wsiS_burstKind == 2'd1 || wsiS_burstKind == 2'd2) &&
	      wsiS_wsiReq$wget[57]) ;
  assign x__h11544 = x__h11556 + y__h11557 ;
  assign x__h11556 = x__h11568 + y__h11569 ;
  assign x__h11568 = { 2'd0, axiM_reqFifo$D_OUT[11] } ;
  assign x__h15396 = { wsiS_statusR, wsiM_statusR } ;
  assign x_user__h11441 =
	     { 104'd1,
	       axiM_reqFifo$D_OUT[7:0],
	       { 4'd0,
		 axiM_reqFifoD_OUT_BITS_55_TO_44_MINUS_1__q1[9:0],
		 2'd0 } +
	       { 13'd0, x__h11544 + y__h11545 } } ;
  assign y__h11545 = { 2'd0, axiM_reqFifo$D_OUT[8] } ;
  assign y__h11557 = { 2'd0, axiM_reqFifo$D_OUT[9] } ;
  assign y__h11569 = { 2'd0, axiM_reqFifo$D_OUT[10] } ;
  always@(wci_wslv_reqF$D_OUT or
	  spareValue or
	  controlReg or
	  rdat__h15392 or
	  rdat__h15492 or
	  rdat__h15506 or
	  rdat__h15514 or
	  rdat__h15520 or
	  rdat__h15534 or
	  rdat__h15542 or rdat__h15548 or rdat__h15554 or rdat__h15560)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0: _theResult____h15302 = spareValue;
      8'h04: _theResult____h15302 = controlReg;
      8'h20: _theResult____h15302 = rdat__h15392;
      8'h24: _theResult____h15302 = rdat__h15492;
      8'h28: _theResult____h15302 = rdat__h15506;
      8'h2C: _theResult____h15302 = rdat__h15514;
      8'h30: _theResult____h15302 = rdat__h15520;
      8'h34: _theResult____h15302 = rdat__h15534;
      8'h38: _theResult____h15302 = rdat__h15542;
      8'h3C: _theResult____h15302 = rdat__h15548;
      8'h40: _theResult____h15302 = rdat__h15554;
      8'h44: _theResult____h15302 = rdat__h15560;
      default: _theResult____h15302 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        axiM_axiM_fifof_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	axiM_axiM_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 165'd0;
	axiM_axiM_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 165'd0;
	axiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axiRecvCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	axiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	axiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	axiS_xfrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axiS_xfrLenLSBs <= `BSV_ASSIGNMENT_DELAY 2'd0;
	axiSendCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	bypassCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY 61'h00000AAAAAAAAA00;
	wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY 12'd1;
      end
    else
      begin
        if (axiM_axiM_fifof_c_r$EN)
	  axiM_axiM_fifof_c_r <= `BSV_ASSIGNMENT_DELAY
	      axiM_axiM_fifof_c_r$D_IN;
	if (axiM_axiM_fifof_q_0$EN)
	  axiM_axiM_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      axiM_axiM_fifof_q_0$D_IN;
	if (axiM_axiM_fifof_q_1$EN)
	  axiM_axiM_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      axiM_axiM_fifof_q_1$D_IN;
	if (axiM_operateD$EN)
	  axiM_operateD <= `BSV_ASSIGNMENT_DELAY axiM_operateD$D_IN;
	if (axiRecvCount$EN)
	  axiRecvCount <= `BSV_ASSIGNMENT_DELAY axiRecvCount$D_IN;
	if (axiS_operateD$EN)
	  axiS_operateD <= `BSV_ASSIGNMENT_DELAY axiS_operateD$D_IN;
	if (axiS_reqFifo_countReg$EN)
	  axiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      axiS_reqFifo_countReg$D_IN;
	if (axiS_reqFifo_levelsValid$EN)
	  axiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      axiS_reqFifo_levelsValid$D_IN;
	if (axiS_xfrActive$EN)
	  axiS_xfrActive <= `BSV_ASSIGNMENT_DELAY axiS_xfrActive$D_IN;
	if (axiS_xfrLenLSBs$EN)
	  axiS_xfrLenLSBs <= `BSV_ASSIGNMENT_DELAY axiS_xfrLenLSBs$D_IN;
	if (axiSendCount$EN)
	  axiSendCount <= `BSV_ASSIGNMENT_DELAY axiSendCount$D_IN;
	if (bypassCount$EN)
	  bypassCount <= `BSV_ASSIGNMENT_DELAY bypassCount$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wsiM_burstKind$EN)
	  wsiM_burstKind <= `BSV_ASSIGNMENT_DELAY wsiM_burstKind$D_IN;
	if (wsiM_errorSticky$EN)
	  wsiM_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiM_errorSticky$D_IN;
	if (wsiM_iMesgCount$EN)
	  wsiM_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_iMesgCount$D_IN;
	if (wsiM_operateD$EN)
	  wsiM_operateD <= `BSV_ASSIGNMENT_DELAY wsiM_operateD$D_IN;
	if (wsiM_pMesgCount$EN)
	  wsiM_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiM_pMesgCount$D_IN;
	if (wsiM_peerIsReady$EN)
	  wsiM_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiM_peerIsReady$D_IN;
	if (wsiM_reqFifo_c_r$EN)
	  wsiM_reqFifo_c_r <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_c_r$D_IN;
	if (wsiM_reqFifo_q_0$EN)
	  wsiM_reqFifo_q_0 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_0$D_IN;
	if (wsiM_reqFifo_q_1$EN)
	  wsiM_reqFifo_q_1 <= `BSV_ASSIGNMENT_DELAY wsiM_reqFifo_q_1$D_IN;
	if (wsiM_sThreadBusy_d$EN)
	  wsiM_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY wsiM_sThreadBusy_d$D_IN;
	if (wsiM_tBusyCount$EN)
	  wsiM_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiM_tBusyCount$D_IN;
	if (wsiM_trafficSticky$EN)
	  wsiM_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiM_trafficSticky$D_IN;
	if (wsiS_burstKind$EN)
	  wsiS_burstKind <= `BSV_ASSIGNMENT_DELAY wsiS_burstKind$D_IN;
	if (wsiS_errorSticky$EN)
	  wsiS_errorSticky <= `BSV_ASSIGNMENT_DELAY wsiS_errorSticky$D_IN;
	if (wsiS_iMesgCount$EN)
	  wsiS_iMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_iMesgCount$D_IN;
	if (wsiS_operateD$EN)
	  wsiS_operateD <= `BSV_ASSIGNMENT_DELAY wsiS_operateD$D_IN;
	if (wsiS_pMesgCount$EN)
	  wsiS_pMesgCount <= `BSV_ASSIGNMENT_DELAY wsiS_pMesgCount$D_IN;
	if (wsiS_peerIsReady$EN)
	  wsiS_peerIsReady <= `BSV_ASSIGNMENT_DELAY wsiS_peerIsReady$D_IN;
	if (wsiS_reqFifo_countReg$EN)
	  wsiS_reqFifo_countReg <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_countReg$D_IN;
	if (wsiS_reqFifo_levelsValid$EN)
	  wsiS_reqFifo_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      wsiS_reqFifo_levelsValid$D_IN;
	if (wsiS_tBusyCount$EN)
	  wsiS_tBusyCount <= `BSV_ASSIGNMENT_DELAY wsiS_tBusyCount$D_IN;
	if (wsiS_trafficSticky$EN)
	  wsiS_trafficSticky <= `BSV_ASSIGNMENT_DELAY wsiS_trafficSticky$D_IN;
	if (wsiS_wordCount$EN)
	  wsiS_wordCount <= `BSV_ASSIGNMENT_DELAY wsiS_wordCount$D_IN;
      end
    if (controlReg$EN) controlReg <= `BSV_ASSIGNMENT_DELAY controlReg$D_IN;
    if (spareValue$EN) spareValue <= `BSV_ASSIGNMENT_DELAY spareValue$D_IN;
    if (wsiM_statusR$EN)
      wsiM_statusR <= `BSV_ASSIGNMENT_DELAY wsiM_statusR$D_IN;
    if (wsiS_mesgWordLength$EN)
      wsiS_mesgWordLength <= `BSV_ASSIGNMENT_DELAY wsiS_mesgWordLength$D_IN;
    if (wsiS_statusR$EN)
      wsiS_statusR <= `BSV_ASSIGNMENT_DELAY wsiS_statusR$D_IN;
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
      if (wsiM_isReset_isInReset$EN)
	wsiM_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiM_isReset_isInReset$D_IN;
      if (wsiS_isReset_isInReset$EN)
	wsiS_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wsiS_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axiM_axiM_fifof_c_r = 2'h2;
    axiM_axiM_fifof_q_0 = 165'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axiM_axiM_fifof_q_1 = 165'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axiM_operateD = 1'h0;
    axiRecvCount = 32'hAAAAAAAA;
    axiS_operateD = 1'h0;
    axiS_reqFifo_countReg = 2'h2;
    axiS_reqFifo_levelsValid = 1'h0;
    axiS_xfrActive = 1'h0;
    axiS_xfrLenLSBs = 2'h2;
    axiSendCount = 32'hAAAAAAAA;
    bypassCount = 32'hAAAAAAAA;
    controlReg = 32'hAAAAAAAA;
    spareValue = 32'hAAAAAAAA;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wsiM_burstKind = 2'h2;
    wsiM_errorSticky = 1'h0;
    wsiM_iMesgCount = 32'hAAAAAAAA;
    wsiM_isReset_isInReset = 1'h0;
    wsiM_operateD = 1'h0;
    wsiM_pMesgCount = 32'hAAAAAAAA;
    wsiM_peerIsReady = 1'h0;
    wsiM_reqFifo_c_r = 2'h2;
    wsiM_reqFifo_q_0 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_reqFifo_q_1 = 61'h0AAAAAAAAAAAAAAA;
    wsiM_sThreadBusy_d = 1'h0;
    wsiM_statusR = 8'hAA;
    wsiM_tBusyCount = 32'hAAAAAAAA;
    wsiM_trafficSticky = 1'h0;
    wsiS_burstKind = 2'h2;
    wsiS_errorSticky = 1'h0;
    wsiS_iMesgCount = 32'hAAAAAAAA;
    wsiS_isReset_isInReset = 1'h0;
    wsiS_mesgWordLength = 12'hAAA;
    wsiS_operateD = 1'h0;
    wsiS_pMesgCount = 32'hAAAAAAAA;
    wsiS_peerIsReady = 1'h0;
    wsiS_reqFifo_countReg = 2'h2;
    wsiS_reqFifo_levelsValid = 1'h0;
    wsiS_statusR = 8'hAA;
    wsiS_tBusyCount = 32'hAAAAAAAA;
    wsiS_trafficSticky = 1'h0;
    wsiS_wordCount = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3626 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3626,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 62: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h15318 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h15318,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 _theResult____h15302);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_doMessageBypass && WILL_FIRE_RL_doMessageAXIrecv)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 49, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_doMessageBypass] and\n  [RL_doMessageAXIrecv] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_doMessageBypass && WILL_FIRE_RL_doMessageAXIsend)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 48, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_doMessageBypass] and\n  [RL_doMessageAXIsend] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h15165 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h15165,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 wci_wslv_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"bsv/axi/AXISDWorker.bsv\", line 71, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3944 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3944,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3800 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3800,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkAXISDWorker4B

