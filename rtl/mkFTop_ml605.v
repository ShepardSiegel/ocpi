//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Mon Nov  4 17:07:45 EST 2013
//
//
// Ports:
// Name                         I/O  size props
// pcie_txp                       O     4
// pcie_txn                       O     4
// led                            O    13
// lcd_db                         O     4
// lcd_e                          O     1
// lcd_rs                         O     1
// lcd_rw                         O     1
// gps_ppsSyncOut                 O     1
// dram_addr                      O    13
// dram_ba                        O     3
// dram_ras_n                     O     1
// dram_cas_n                     O     1
// dram_we_n                      O     1
// dram_reset_n                   O     1
// dram_cs_n                      O     1
// dram_odt                       O     1
// dram_cke                       O     1
// dram_dm                        O     8
// dram_ck_p                      O     1
// dram_ck_n                      O     1
// flash_addr                     O    24 reg
// flash_ce_n                     O     1
// flash_oe_n                     O     1
// flash_we_n                     O     1
// flash_wp_n                     O     1 const
// flash_rst_n                    O     1 const
// flash_adv_n                    O     1 const
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// flpCDC_sdo                     O     1 reg
// flpCDC_csb                     O     1 reg
// flpCDC_sclkgate                O     1 reg
// flpDAC_sdo                     O     1 reg
// flpDAC_csb                     O     1 reg
// flpDAC_sclkgate                O     1 reg
// p125clk                        O     1 clock
// CLK_GATE_p125clk               O     1 const
// rxclkBnd                       O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// gmii_tx_tx_clk                 O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// flpCDC_sclk                    O     1 clock
// CLK_GATE_flpCDC_sclk           O     1 const
// flpCDC_sclkn                   O     1 clock
// CLK_GATE_flpCDC_sclkn          O     1 const
// flpDAC_sclk                    O     1 clock
// CLK_GATE_flpDAC_sclk           O     1 const
// flpDAC_sclkn                   O     1 clock
// CLK_GATE_flpDAC_sclkn          O     1 const
// p125rst                        O     1 reset
// gmii_rstn                      O     1 reset
// flpCDC_srst                    O     1 reset
// flpDAC_srst                    O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// flp_cdc_clk_p                  I     1 clock
// flp_cdc_clk_n                  I     1 clock
// gmii_rx_clk                    I     1 clock
// pci0_clkp                      I     1 clock
// pci0_clkn                      I     1 clock
// pci0_rstn                      I     1 reset
// pcie_rxp_i                     I     4
// pcie_rxn_i                     I     4
// gps_ppsSyncIn_x                I     1 reg
// flash_fwait_i                  I     1 reg
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// flpCDC_sdi_arg                 I     1 reg
// flpDAC_sdi_arg                 I     1 reg
// dram_io_dq                    IO    64 inout
// dram_io_dqs_p                 IO     8 inout
// dram_io_dqs_n                 IO     8 inout
// flash_io_dq                   IO    16 inout
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFTop_ml605(sys0_clkp,
		    sys0_clkn,
		    sys1_clkp,
		    sys1_clkn,
		    flp_cdc_clk_p,
		    flp_cdc_clk_n,
		    gmii_rx_clk,
		    pci0_clkp,
		    pci0_clkn,
		    pci0_rstn,

		    dram_io_dq,
		    dram_io_dqs_p,
		    dram_io_dqs_n,
		    flash_io_dq,
		    mdio_mdd,
		    mdio_mdc,

		    pcie_rxp_i,

		    pcie_rxn_i,

		    pcie_txp,

		    pcie_txn,

		    led,

		    lcd_db,

		    lcd_e,

		    lcd_rs,

		    lcd_rw,

		    gps_ppsSyncIn_x,

		    gps_ppsSyncOut,

		    dram_addr,

		    dram_ba,

		    dram_ras_n,

		    dram_cas_n,

		    dram_we_n,

		    dram_reset_n,

		    dram_cs_n,

		    dram_odt,

		    dram_cke,

		    dram_dm,

		    dram_ck_p,

		    dram_ck_n,

		    flash_addr,

		    flash_ce_n,

		    flash_oe_n,

		    flash_we_n,

		    flash_wp_n,

		    flash_rst_n,

		    flash_adv_n,

		    flash_fwait_i,

		    gmii_rx_rxd_i,

		    gmii_rx_rx_dv_i,

		    gmii_rx_rx_er_i,

		    gmii_tx_txd,

		    gmii_tx_tx_en,

		    gmii_tx_tx_er,

		    gmii_col_i,

		    gmii_crs_i,

		    gmii_intr_i,

		    gmii_led,

		    flpCDC_sdo,

		    flpCDC_csb,

		    flpCDC_sclkgate,

		    flpCDC_sdi_arg,

		    flpDAC_sdo,

		    flpDAC_csb,

		    flpDAC_sclkgate,

		    flpDAC_sdi_arg,

		    p125clk,
		    CLK_GATE_p125clk,

		    rxclkBnd,
		    CLK_GATE_rxclkBnd,

		    gmii_tx_tx_clk,
		    CLK_GATE_gmii_tx_tx_clk,

		    flpCDC_sclk,
		    CLK_GATE_flpCDC_sclk,

		    flpCDC_sclkn,
		    CLK_GATE_flpCDC_sclkn,

		    flpDAC_sclk,
		    CLK_GATE_flpDAC_sclk,

		    flpDAC_sclkn,
		    CLK_GATE_flpDAC_sclkn,

		    p125rst,
		    gmii_rstn,
		    flpCDC_srst,
		    flpDAC_srst);
  input  sys0_clkp;
  input  sys0_clkn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  flp_cdc_clk_p;
  input  flp_cdc_clk_n;
  input  gmii_rx_clk;
  input  pci0_clkp;
  input  pci0_clkn;
  input  pci0_rstn;

  inout  [63 : 0] dram_io_dq;
  inout  [7 : 0] dram_io_dqs_p;
  inout  [7 : 0] dram_io_dqs_n;
  inout  [15 : 0] flash_io_dq;
  inout  mdio_mdd;
  inout  mdio_mdc;

  // action method pcie_rxp
  input  [3 : 0] pcie_rxp_i;

  // action method pcie_rxn
  input  [3 : 0] pcie_rxn_i;

  // value method pcie_txp
  output [3 : 0] pcie_txp;

  // value method pcie_txn
  output [3 : 0] pcie_txn;

  // value method led
  output [12 : 0] led;

  // value method lcd_db
  output [3 : 0] lcd_db;

  // value method lcd_e
  output lcd_e;

  // value method lcd_rs
  output lcd_rs;

  // value method lcd_rw
  output lcd_rw;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // value method dram_addr
  output [12 : 0] dram_addr;

  // value method dram_ba
  output [2 : 0] dram_ba;

  // value method dram_ras_n
  output dram_ras_n;

  // value method dram_cas_n
  output dram_cas_n;

  // value method dram_we_n
  output dram_we_n;

  // value method dram_reset_n
  output dram_reset_n;

  // value method dram_cs_n
  output dram_cs_n;

  // value method dram_odt
  output dram_odt;

  // value method dram_cke
  output dram_cke;

  // value method dram_dm
  output [7 : 0] dram_dm;

  // value method dram_ck_p
  output dram_ck_p;

  // value method dram_ck_n
  output dram_ck_n;

  // value method flash_addr
  output [23 : 0] flash_addr;

  // value method flash_ce_n
  output flash_ce_n;

  // value method flash_oe_n
  output flash_oe_n;

  // value method flash_we_n
  output flash_we_n;

  // value method flash_wp_n
  output flash_wp_n;

  // value method flash_rst_n
  output flash_rst_n;

  // value method flash_adv_n
  output flash_adv_n;

  // action method flash_fwait
  input  flash_fwait_i;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // value method flpCDC_sdo
  output flpCDC_sdo;

  // value method flpCDC_csb
  output flpCDC_csb;

  // value method flpCDC_sclkgate
  output flpCDC_sclkgate;

  // action method flpCDC_sdi
  input  flpCDC_sdi_arg;

  // value method flpDAC_sdo
  output flpDAC_sdo;

  // value method flpDAC_csb
  output flpDAC_csb;

  // value method flpDAC_sclkgate
  output flpDAC_sclkgate;

  // action method flpDAC_sdi
  input  flpDAC_sdi_arg;

  // oscillator and gates for output clock p125clk
  output p125clk;
  output CLK_GATE_p125clk;

  // oscillator and gates for output clock rxclkBnd
  output rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // oscillator and gates for output clock gmii_tx_tx_clk
  output gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock flpCDC_sclk
  output flpCDC_sclk;
  output CLK_GATE_flpCDC_sclk;

  // oscillator and gates for output clock flpCDC_sclkn
  output flpCDC_sclkn;
  output CLK_GATE_flpCDC_sclkn;

  // oscillator and gates for output clock flpDAC_sclk
  output flpDAC_sclk;
  output CLK_GATE_flpDAC_sclk;

  // oscillator and gates for output clock flpDAC_sclkn
  output flpDAC_sclkn;
  output CLK_GATE_flpDAC_sclkn;

  // output resets
  output p125rst;
  output gmii_rstn;
  output flpCDC_srst;
  output flpDAC_srst;

  // signals for module outputs
  wire [23 : 0] flash_addr;
  wire [12 : 0] dram_addr, led;
  wire [7 : 0] dram_dm, gmii_tx_txd;
  wire [3 : 0] lcd_db, pcie_txn, pcie_txp;
  wire [2 : 0] dram_ba;
  wire CLK_GATE_flpCDC_sclk,
       CLK_GATE_flpCDC_sclkn,
       CLK_GATE_flpDAC_sclk,
       CLK_GATE_flpDAC_sclkn,
       CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_p125clk,
       CLK_GATE_rxclkBnd,
       dram_cas_n,
       dram_ck_n,
       dram_ck_p,
       dram_cke,
       dram_cs_n,
       dram_odt,
       dram_ras_n,
       dram_reset_n,
       dram_we_n,
       flash_adv_n,
       flash_ce_n,
       flash_oe_n,
       flash_rst_n,
       flash_we_n,
       flash_wp_n,
       flpCDC_csb,
       flpCDC_sclk,
       flpCDC_sclkgate,
       flpCDC_sclkn,
       flpCDC_sdo,
       flpCDC_srst,
       flpDAC_csb,
       flpDAC_sclk,
       flpDAC_sclkgate,
       flpDAC_sclkn,
       flpDAC_sdo,
       flpDAC_srst,
       gmii_led,
       gmii_rstn,
       gmii_tx_tx_clk,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       gps_ppsSyncOut,
       lcd_e,
       lcd_rs,
       lcd_rw,
       p125clk,
       p125rst,
       rxclkBnd;

  // inlined wires
  wire [63 : 0] pciw_pci0_wTrnTxDat_wget;
  wire [7 : 0] pciw_pcie_irq_wInterruptDo_wget;
  wire [1 : 0] infLed_wget;
  wire blinkLed_wget,
       pciw_i2pAF_dClear_pw_whas,
       pciw_i2pAF_deq_happened_whas,
       pciw_i2pAF_deq_pw_whas,
       pciw_i2pAF_enq_pw_whas,
       pciw_i2pAF_sClear_pw_whas,
       pciw_p2iAF_dClear_pw_whas,
       pciw_p2iAF_deq_happened_whas,
       pciw_p2iAF_deq_pw_whas,
       pciw_p2iAF_enq_pw_whas,
       pciw_p2iAF_sClear_pw_whas,
       pciw_pci0_pwTrnRx_whas,
       pciw_pci0_pwTrnTx_whas,
       pciw_pci0_wTrnRxCplS_n_wget,
       pciw_pci0_wTrnRxCplS_n_whas,
       pciw_pci0_wTrnRxNpOk_n_wget,
       pciw_pci0_wTrnRxNpOk_n_whas,
       pciw_pci0_wTrnTxDat_whas,
       pciw_pci0_wTrnTxDsc_n_wget,
       pciw_pci0_wTrnTxDsc_n_whas,
       pciw_pci0_wTrnTxEof_n_wget,
       pciw_pci0_wTrnTxEof_n_whas,
       pciw_pci0_wTrnTxRem_n_wget,
       pciw_pci0_wTrnTxRem_n_whas,
       pciw_pci0_wTrnTxSof_n_wget,
       pciw_pci0_wTrnTxSof_n_whas,
       pciw_pcie_irq_wInterruptDo_whas,
       pciw_pcie_irq_wInterruptRdyN_wget,
       pciw_pcie_irq_wInterruptRdyN_whas;

  // register freeCnt
  reg [31 : 0] freeCnt;
  wire [31 : 0] freeCnt_D_IN;
  wire freeCnt_EN;

  // register needs_init
  reg needs_init;
  wire needs_init_D_IN, needs_init_EN;

  // register pciDevice
  reg [15 : 0] pciDevice;
  wire [15 : 0] pciDevice_D_IN;
  wire pciDevice_EN;

  // register pciw_Prelude_inst_changeSpecialWires_1_rg
  reg [81 : 0] pciw_Prelude_inst_changeSpecialWires_1_rg;
  wire [81 : 0] pciw_Prelude_inst_changeSpecialWires_1_rg_D_IN;
  wire pciw_Prelude_inst_changeSpecialWires_1_rg_EN;

  // register pciw_Prelude_inst_changeSpecialWires_2_rg
  reg [81 : 0] pciw_Prelude_inst_changeSpecialWires_2_rg;
  wire [81 : 0] pciw_Prelude_inst_changeSpecialWires_2_rg_D_IN;
  wire pciw_Prelude_inst_changeSpecialWires_2_rg_EN;

  // register pciw_i2pAF_dInReset_isInReset
  reg pciw_i2pAF_dInReset_isInReset;
  wire pciw_i2pAF_dInReset_isInReset_D_IN, pciw_i2pAF_dInReset_isInReset_EN;

  // register pciw_i2pAF_head_wrapped
  reg pciw_i2pAF_head_wrapped;
  wire pciw_i2pAF_head_wrapped_D_IN, pciw_i2pAF_head_wrapped_EN;

  // register pciw_i2pAF_sInReset_isInReset
  reg pciw_i2pAF_sInReset_isInReset;
  wire pciw_i2pAF_sInReset_isInReset_D_IN, pciw_i2pAF_sInReset_isInReset_EN;

  // register pciw_i2pAF_tail_wrapped
  reg pciw_i2pAF_tail_wrapped;
  wire pciw_i2pAF_tail_wrapped_D_IN, pciw_i2pAF_tail_wrapped_EN;

  // register pciw_i2pS
  reg [152 : 0] pciw_i2pS;
  wire [152 : 0] pciw_i2pS_D_IN;
  wire pciw_i2pS_EN;

  // register pciw_p2iAF_dInReset_isInReset
  reg pciw_p2iAF_dInReset_isInReset;
  wire pciw_p2iAF_dInReset_isInReset_D_IN, pciw_p2iAF_dInReset_isInReset_EN;

  // register pciw_p2iAF_head_wrapped
  reg pciw_p2iAF_head_wrapped;
  wire pciw_p2iAF_head_wrapped_D_IN, pciw_p2iAF_head_wrapped_EN;

  // register pciw_p2iAF_sInReset_isInReset
  reg pciw_p2iAF_sInReset_isInReset;
  wire pciw_p2iAF_sInReset_isInReset_D_IN, pciw_p2iAF_sInReset_isInReset_EN;

  // register pciw_p2iAF_tail_wrapped
  reg pciw_p2iAF_tail_wrapped;
  wire pciw_p2iAF_tail_wrapped_D_IN, pciw_p2iAF_tail_wrapped_EN;

  // register pciw_p2iS
  reg [152 : 0] pciw_p2iS;
  wire [152 : 0] pciw_p2iS_D_IN;
  wire pciw_p2iS_EN;

  // register pciw_pcie_irq_rInterruptDi
  reg [7 : 0] pciw_pcie_irq_rInterruptDi;
  wire [7 : 0] pciw_pcie_irq_rInterruptDi_D_IN;
  wire pciw_pcie_irq_rInterruptDi_EN;

  // register pciw_pcie_irq_rInterruptN
  reg pciw_pcie_irq_rInterruptN;
  wire pciw_pcie_irq_rInterruptN_D_IN, pciw_pcie_irq_rInterruptN_EN;

  // register pciw_pcie_irq_rInterrupting
  reg pciw_pcie_irq_rInterrupting;
  wire pciw_pcie_irq_rInterrupting_D_IN, pciw_pcie_irq_rInterrupting_EN;

  // register pciw_pcie_irq_rMMEnabled
  reg [2 : 0] pciw_pcie_irq_rMMEnabled;
  wire [2 : 0] pciw_pcie_irq_rMMEnabled_D_IN;
  wire pciw_pcie_irq_rMMEnabled_EN;

  // register pciw_pcie_irq_rMSIEnabled
  reg pciw_pcie_irq_rMSIEnabled;
  wire pciw_pcie_irq_rMSIEnabled_D_IN, pciw_pcie_irq_rMSIEnabled_EN;

  // ports of submodule cap0
  wire [63 : 0] cap0_wtiS0_MData;
  wire [31 : 0] cap0_wciS0_MAddr,
		cap0_wciS0_MData,
		cap0_wciS0_SData,
		cap0_wsiS0_MData;
  wire [11 : 0] cap0_wsiS0_MBurstLength;
  wire [7 : 0] cap0_wsiS0_MReqInfo;
  wire [3 : 0] cap0_wciS0_MByteEn, cap0_wsiS0_MByteEn;
  wire [2 : 0] cap0_wciS0_MCmd, cap0_wsiS0_MCmd, cap0_wtiS0_MCmd;
  wire [1 : 0] cap0_wciS0_MFlag, cap0_wciS0_SFlag, cap0_wciS0_SResp;
  wire cap0_wciS0_MAddrSpace,
       cap0_wciS0_SThreadBusy,
       cap0_wsiS0_MBurstPrecise,
       cap0_wsiS0_MReqLast,
       cap0_wsiS0_MReset_n,
       cap0_wsiS0_SReset_n,
       cap0_wsiS0_SThreadBusy;

  // ports of submodule ctop
  wire [152 : 0] ctop_server_request_put, ctop_server_response_get;
  wire [127 : 0] ctop_wmemiM0_MData, ctop_wmemiM0_SData, ctop_wsi_s_adc_MData;
  wire [63 : 0] ctop_cpNow;
  wire [58 : 0] ctop_cpServer_request_put;
  wire [39 : 0] ctop_cpServer_response_get;
  wire [35 : 0] ctop_wmemiM0_MAddr;
  wire [31 : 0] ctop_wci_m_0_MAddr,
		ctop_wci_m_0_MData,
		ctop_wci_m_0_SData,
		ctop_wci_m_1_MAddr,
		ctop_wci_m_1_MData,
		ctop_wci_m_1_SData,
		ctop_wci_m_2_MAddr,
		ctop_wci_m_2_MData,
		ctop_wci_m_2_SData,
		ctop_wci_m_3_MAddr,
		ctop_wci_m_3_MData,
		ctop_wci_m_3_SData,
		ctop_wci_m_4_MAddr,
		ctop_wci_m_4_MData,
		ctop_wci_m_4_SData;
  wire [15 : 0] ctop_wmemiM0_MDataByteEn, ctop_wsi_s_adc_MByteEn;
  wire [11 : 0] ctop_wmemiM0_MBurstLength, ctop_wsi_s_adc_MBurstLength;
  wire [7 : 0] ctop_wsi_s_adc_MReqInfo;
  wire [3 : 0] ctop_wci_m_0_MByteEn,
	       ctop_wci_m_1_MByteEn,
	       ctop_wci_m_2_MByteEn,
	       ctop_wci_m_3_MByteEn,
	       ctop_wci_m_4_MByteEn;
  wire [2 : 0] ctop_switch_x,
	       ctop_wci_m_0_MCmd,
	       ctop_wci_m_1_MCmd,
	       ctop_wci_m_2_MCmd,
	       ctop_wci_m_3_MCmd,
	       ctop_wci_m_4_MCmd,
	       ctop_wmemiM0_MCmd,
	       ctop_wsi_s_adc_MCmd;
  wire [1 : 0] ctop_led,
	       ctop_wci_m_0_MFlag,
	       ctop_wci_m_0_SFlag,
	       ctop_wci_m_0_SResp,
	       ctop_wci_m_1_MFlag,
	       ctop_wci_m_1_SFlag,
	       ctop_wci_m_1_SResp,
	       ctop_wci_m_2_MFlag,
	       ctop_wci_m_2_SFlag,
	       ctop_wci_m_2_SResp,
	       ctop_wci_m_3_MFlag,
	       ctop_wci_m_3_SFlag,
	       ctop_wci_m_3_SResp,
	       ctop_wci_m_4_MFlag,
	       ctop_wci_m_4_SFlag,
	       ctop_wci_m_4_SResp,
	       ctop_wmemiM0_SResp;
  wire ctop_EN_cpServer_request_put,
       ctop_EN_cpServer_response_get,
       ctop_EN_server_request_put,
       ctop_EN_server_response_get,
       ctop_RDY_cpServer_request_put,
       ctop_RDY_cpServer_response_get,
       ctop_RDY_server_request_put,
       ctop_RDY_server_response_get,
       ctop_RST_N_wci_m_0,
       ctop_RST_N_wci_m_1,
       ctop_RST_N_wci_m_2,
       ctop_RST_N_wci_m_3,
       ctop_RST_N_wci_m_4,
       ctop_gps_ppsSyncIn_x,
       ctop_gps_ppsSyncOut,
       ctop_wci_m_0_MAddrSpace,
       ctop_wci_m_0_SThreadBusy,
       ctop_wci_m_1_MAddrSpace,
       ctop_wci_m_1_SThreadBusy,
       ctop_wci_m_2_MAddrSpace,
       ctop_wci_m_2_SThreadBusy,
       ctop_wci_m_3_MAddrSpace,
       ctop_wci_m_3_SThreadBusy,
       ctop_wci_m_4_MAddrSpace,
       ctop_wci_m_4_SThreadBusy,
       ctop_wmemiM0_MDataLast,
       ctop_wmemiM0_MDataValid,
       ctop_wmemiM0_MReqLast,
       ctop_wmemiM0_MReset_n,
       ctop_wmemiM0_SCmdAccept,
       ctop_wmemiM0_SDataAccept,
       ctop_wmemiM0_SRespLast,
       ctop_wsi_m_dac_SReset_n,
       ctop_wsi_m_dac_SThreadBusy,
       ctop_wsi_s_adc_MBurstPrecise,
       ctop_wsi_s_adc_MReqLast,
       ctop_wsi_s_adc_MReset_n;

  // ports of submodule dram0
  wire [127 : 0] dram0_wmemiS0_MData, dram0_wmemiS0_SData;
  wire [63 : 0] dram0_dram_io_dq;
  wire [35 : 0] dram0_wmemiS0_MAddr;
  wire [31 : 0] dram0_wciS0_MAddr, dram0_wciS0_MData, dram0_wciS0_SData;
  wire [15 : 0] dram0_wmemiS0_MDataByteEn;
  wire [12 : 0] dram0_dram_addr;
  wire [11 : 0] dram0_wmemiS0_MBurstLength;
  wire [7 : 0] dram0_dram_dm, dram0_dram_io_dqs_n, dram0_dram_io_dqs_p;
  wire [3 : 0] dram0_wciS0_MByteEn;
  wire [2 : 0] dram0_dram_ba, dram0_wciS0_MCmd, dram0_wmemiS0_MCmd;
  wire [1 : 0] dram0_wciS0_MFlag,
	       dram0_wciS0_SFlag,
	       dram0_wciS0_SResp,
	       dram0_wmemiS0_SResp;
  wire dram0_dram_cas_n,
       dram0_dram_ck_n,
       dram0_dram_ck_p,
       dram0_dram_cke,
       dram0_dram_cs_n,
       dram0_dram_odt,
       dram0_dram_ras_n,
       dram0_dram_reset_n,
       dram0_dram_we_n,
       dram0_isInReset,
       dram0_isReset,
       dram0_isTrained,
       dram0_wciS0_MAddrSpace,
       dram0_wciS0_SThreadBusy,
       dram0_wmemiS0_MDataLast,
       dram0_wmemiS0_MDataValid,
       dram0_wmemiS0_MReqLast,
       dram0_wmemiS0_MReset_n,
       dram0_wmemiS0_SCmdAccept,
       dram0_wmemiS0_SDataAccept,
       dram0_wmemiS0_SRespLast;

  // ports of submodule flash0
  wire [31 : 0] flash0_wciS0_MAddr, flash0_wciS0_MData, flash0_wciS0_SData;
  wire [23 : 0] flash0_flash_addr;
  wire [15 : 0] flash0_flash_io_dq;
  wire [3 : 0] flash0_wciS0_MByteEn;
  wire [2 : 0] flash0_wciS0_MCmd;
  wire [1 : 0] flash0_wciS0_MFlag, flash0_wciS0_SFlag, flash0_wciS0_SResp;
  wire flash0_flash_adv_n,
       flash0_flash_ce_n,
       flash0_flash_fwait_i,
       flash0_flash_oe_n,
       flash0_flash_rst_n,
       flash0_flash_we_n,
       flash0_flash_wp_n,
       flash0_wciS0_MAddrSpace,
       flash0_wciS0_SThreadBusy;

  // ports of submodule flp_clk
  wire flp_clk_O;

  // ports of submodule flp_rst
  wire flp_rst_OUT_RST;

  // ports of submodule fmc150
  wire [31 : 0] fmc150_wciS0_MAddr, fmc150_wciS0_MData, fmc150_wciS0_SData;
  wire [3 : 0] fmc150_wciS0_MByteEn;
  wire [2 : 0] fmc150_wciS0_MCmd;
  wire [1 : 0] fmc150_wciS0_MFlag, fmc150_wciS0_SFlag, fmc150_wciS0_SResp;
  wire fmc150_CLK_padsCDC_sclk,
       fmc150_CLK_padsCDC_sclkn,
       fmc150_CLK_padsDAC_sclk,
       fmc150_CLK_padsDAC_sclkn,
       fmc150_RST_N_padsCDC_srst,
       fmc150_RST_N_padsDAC_srst,
       fmc150_padsCDC_csb,
       fmc150_padsCDC_sclkgate,
       fmc150_padsCDC_sdi_arg,
       fmc150_padsCDC_sdo,
       fmc150_padsDAC_csb,
       fmc150_padsDAC_sclkgate,
       fmc150_padsDAC_sdi_arg,
       fmc150_padsDAC_sdo,
       fmc150_wciS0_MAddrSpace,
       fmc150_wciS0_SThreadBusy;

  // ports of submodule gbe0
  wire [66 : 0] gbe0_wtiS0_req;
  wire [58 : 0] gbe0_cpClient_request_get;
  wire [39 : 0] gbe0_cpClient_response_put;
  wire [31 : 0] gbe0_wciS0_MAddr,
		gbe0_wciS0_MData,
		gbe0_wciS0_SData,
		gbe0_wsiM0_MData,
		gbe0_wsiS0_MData;
  wire [11 : 0] gbe0_wsiM0_MBurstLength, gbe0_wsiS0_MBurstLength;
  wire [7 : 0] gbe0_gmii_rx_rxd_i,
	       gbe0_gmii_tx_txd,
	       gbe0_wsiM0_MReqInfo,
	       gbe0_wsiS0_MReqInfo;
  wire [3 : 0] gbe0_wciS0_MByteEn, gbe0_wsiM0_MByteEn, gbe0_wsiS0_MByteEn;
  wire [2 : 0] gbe0_wciS0_MCmd, gbe0_wsiM0_MCmd, gbe0_wsiS0_MCmd;
  wire [1 : 0] gbe0_wciS0_MFlag, gbe0_wciS0_SFlag, gbe0_wciS0_SResp;
  wire gbe0_CLK_gmii_tx_tx_clk,
       gbe0_CLK_rxclkBnd,
       gbe0_EN_cpClient_request_get,
       gbe0_EN_cpClient_response_put,
       gbe0_RDY_cpClient_request_get,
       gbe0_RDY_cpClient_response_put,
       gbe0_RST_N_gmii_rstn,
       gbe0_gmii_col_i,
       gbe0_gmii_crs_i,
       gbe0_gmii_intr_i,
       gbe0_gmii_led,
       gbe0_gmii_rx_rx_dv_i,
       gbe0_gmii_rx_rx_er_i,
       gbe0_gmii_tx_tx_en,
       gbe0_gmii_tx_tx_er,
       gbe0_mdio_mdc,
       gbe0_mdio_mdd,
       gbe0_wciS0_MAddrSpace,
       gbe0_wciS0_SThreadBusy,
       gbe0_wsiM0_MBurstPrecise,
       gbe0_wsiM0_MReqLast,
       gbe0_wsiM0_MReset_n,
       gbe0_wsiM0_SReset_n,
       gbe0_wsiM0_SThreadBusy,
       gbe0_wsiS0_MBurstPrecise,
       gbe0_wsiS0_MReqLast,
       gbe0_wsiS0_MReset_n,
       gbe0_wtiS0_SReset_n,
       gbe0_wtiS0_SThreadBusy;

  // ports of submodule lcd_ctrl
  wire [127 : 0] lcd_ctrl_setLine1_text, lcd_ctrl_setLine2_text;
  wire [3 : 0] lcd_ctrl_db;
  wire lcd_ctrl_EN_setLine1,
       lcd_ctrl_EN_setLine2,
       lcd_ctrl_e,
       lcd_ctrl_rs,
       lcd_ctrl_rw;

  // ports of submodule pciw_fI2P
  wire [80 : 0] pciw_fI2P_D_IN, pciw_fI2P_D_OUT;
  wire pciw_fI2P_CLR,
       pciw_fI2P_DEQ,
       pciw_fI2P_EMPTY_N,
       pciw_fI2P_ENQ,
       pciw_fI2P_FULL_N;

  // ports of submodule pciw_fP2I
  wire [80 : 0] pciw_fP2I_D_IN, pciw_fP2I_D_OUT;
  wire pciw_fP2I_CLR,
       pciw_fP2I_DEQ,
       pciw_fP2I_EMPTY_N,
       pciw_fP2I_ENQ,
       pciw_fP2I_FULL_N;

  // ports of submodule pciw_i2pAF_dCombinedReset
  wire pciw_i2pAF_dCombinedReset_RST_OUT;

  // ports of submodule pciw_i2pAF_dCrossedsReset
  wire pciw_i2pAF_dCrossedsReset_OUT_RST;

  // ports of submodule pciw_i2pAF_sCombinedReset
  wire pciw_i2pAF_sCombinedReset_RST_OUT;

  // ports of submodule pciw_i2pAF_sCrosseddReset
  wire pciw_i2pAF_sCrosseddReset_OUT_RST;

  // ports of submodule pciw_p125rst
  wire pciw_p125rst_OUT_RST;

  // ports of submodule pciw_p250rst
  wire pciw_p250rst_OUT_RST;

  // ports of submodule pciw_p2iAF_dCombinedReset
  wire pciw_p2iAF_dCombinedReset_RST_OUT;

  // ports of submodule pciw_p2iAF_dCrossedsReset
  wire pciw_p2iAF_dCrossedsReset_OUT_RST;

  // ports of submodule pciw_p2iAF_sCombinedReset
  wire pciw_p2iAF_sCombinedReset_RST_OUT;

  // ports of submodule pciw_p2iAF_sCrosseddReset
  wire pciw_p2iAF_sCrosseddReset_OUT_RST;

  // ports of submodule pciw_pci0_clk
  wire pciw_pci0_clk_O;

  // ports of submodule pciw_pci0_pcie_ep
  wire [63 : 0] pciw_pci0_pcie_ep_cfg_dsn,
		pciw_pci0_pcie_ep_trn_rd,
		pciw_pci0_pcie_ep_trn_td;
  wire [47 : 0] pciw_pci0_pcie_ep_cfg_err_tlp_cpl_header;
  wire [31 : 0] pciw_pci0_pcie_ep_cfg_di;
  wire [9 : 0] pciw_pci0_pcie_ep_cfg_dwaddr;
  wire [7 : 0] pciw_pci0_pcie_ep_cfg_bus_number,
	       pciw_pci0_pcie_ep_cfg_interrupt_di,
	       pciw_pci0_pcie_ep_cfg_interrupt_do;
  wire [6 : 0] pciw_pci0_pcie_ep_trn_rbar_hit_n;
  wire [4 : 0] pciw_pci0_pcie_ep_cfg_device_number;
  wire [3 : 0] pciw_pci0_pcie_ep_cfg_byte_en_n,
	       pciw_pci0_pcie_ep_pci_exp_rxn,
	       pciw_pci0_pcie_ep_pci_exp_rxp,
	       pciw_pci0_pcie_ep_pci_exp_txn,
	       pciw_pci0_pcie_ep_pci_exp_txp;
  wire [2 : 0] pciw_pci0_pcie_ep_cfg_function_number,
	       pciw_pci0_pcie_ep_cfg_interrupt_mmenable,
	       pciw_pci0_pcie_ep_trn_fc_sel;
  wire [1 : 0] pciw_pci0_pcie_ep_pl_directed_link_change,
	       pciw_pci0_pcie_ep_pl_directed_link_width;
  wire pciw_pci0_pcie_ep_cfg_err_cor_n,
       pciw_pci0_pcie_ep_cfg_err_cpl_abort_n,
       pciw_pci0_pcie_ep_cfg_err_cpl_timeout_n,
       pciw_pci0_pcie_ep_cfg_err_cpl_unexpect_n,
       pciw_pci0_pcie_ep_cfg_err_ecrc_n,
       pciw_pci0_pcie_ep_cfg_err_locked_n,
       pciw_pci0_pcie_ep_cfg_err_posted_n,
       pciw_pci0_pcie_ep_cfg_err_ur_n,
       pciw_pci0_pcie_ep_cfg_interrupt_assert_n,
       pciw_pci0_pcie_ep_cfg_interrupt_msienable,
       pciw_pci0_pcie_ep_cfg_interrupt_n,
       pciw_pci0_pcie_ep_cfg_interrupt_rdy_n,
       pciw_pci0_pcie_ep_cfg_pm_wake_n,
       pciw_pci0_pcie_ep_cfg_rd_en_n,
       pciw_pci0_pcie_ep_cfg_trn_pending_n,
       pciw_pci0_pcie_ep_cfg_turnoff_ok_n,
       pciw_pci0_pcie_ep_cfg_wr_en_n,
       pciw_pci0_pcie_ep_pl_directed_link_auton,
       pciw_pci0_pcie_ep_pl_directed_link_speed,
       pciw_pci0_pcie_ep_pl_upstream_prefer_deemph,
       pciw_pci0_pcie_ep_trn2_clk,
       pciw_pci0_pcie_ep_trn_clk,
       pciw_pci0_pcie_ep_trn_lnk_up_n,
       pciw_pci0_pcie_ep_trn_rdst_rdy_n,
       pciw_pci0_pcie_ep_trn_reof_n,
       pciw_pci0_pcie_ep_trn_reset_n,
       pciw_pci0_pcie_ep_trn_rnp_ok_n,
       pciw_pci0_pcie_ep_trn_rrem_n,
       pciw_pci0_pcie_ep_trn_rsof_n,
       pciw_pci0_pcie_ep_trn_rsrc_rdy_n,
       pciw_pci0_pcie_ep_trn_tcfg_gnt_n,
       pciw_pci0_pcie_ep_trn_tdst_rdy_n,
       pciw_pci0_pcie_ep_trn_teof_n,
       pciw_pci0_pcie_ep_trn_terrfwd_n,
       pciw_pci0_pcie_ep_trn_trem_n,
       pciw_pci0_pcie_ep_trn_tsof_n,
       pciw_pci0_pcie_ep_trn_tsrc_dsc_n,
       pciw_pci0_pcie_ep_trn_tsrc_rdy_n,
       pciw_pci0_pcie_ep_trn_tstr_n;

  // ports of submodule pciw_pciDevice
  wire [15 : 0] pciw_pciDevice_dD_OUT, pciw_pciDevice_sD_IN;
  wire pciw_pciDevice_sEN, pciw_pciDevice_sRDY;

  // ports of submodule pciw_pciLinkUp
  wire pciw_pciLinkUp_dD_OUT, pciw_pciLinkUp_sD_IN, pciw_pciLinkUp_sEN;

  // ports of submodule pciw_pcie_irq_fifoAssert
  wire [7 : 0] pciw_pcie_irq_fifoAssert_dD_OUT,
	       pciw_pcie_irq_fifoAssert_sD_IN;
  wire pciw_pcie_irq_fifoAssert_dDEQ,
       pciw_pcie_irq_fifoAssert_dEMPTY_N,
       pciw_pcie_irq_fifoAssert_sENQ;

  // ports of submodule pciw_preEdge
  wire pciw_preEdge_CLK_VAL;

  // ports of submodule sys0_clk
  wire sys0_clk_O;

  // ports of submodule sys0_rst
  wire sys0_rst_OUT_RST;

  // ports of submodule sys1_clk
  wire sys1_clk_O;

  // ports of submodule sys1_clki
  wire sys1_clki_O;

  // ports of submodule sys1_rst
  wire sys1_rst_OUT_RST;

  // ports of submodule tcGbe0
  wire [66 : 0] tcGbe0_wti_m_req;
  wire [63 : 0] tcGbe0_gpsTime_arg;
  wire tcGbe0_EN_gpsTime,
       tcGbe0_RDY_gpsTime,
       tcGbe0_wti_m_SReset_n,
       tcGbe0_wti_m_SThreadBusy;

  // rule scheduling signals
  wire WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1,
       WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2,
       WILL_FIRE_RL_pciw_i2pAF_deq_update_head,
       WILL_FIRE_RL_pciw_i2pAF_enq_update_tail,
       WILL_FIRE_RL_pciw_p2iAF_deq_update_head,
       WILL_FIRE_RL_pciw_p2iAF_enq_update_tail,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt,
       WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_pciw_p2iS_write_1__VAL_1, MUX_pciw_p2iS_write_1__VAL_2;
  wire [81 : 0] MUX_pciw_Prelude_inst_changeSpecialWires_1_rg_write_1__VAL_1,
		MUX_pciw_Prelude_inst_changeSpecialWires_2_rg_write_1__VAL_1;
  wire [80 : 0] MUX_pciw_fI2P_enq_1__VAL_2;
  wire MUX_pciw_Prelude_inst_changeSpecialWires_1_rg_write_1__SEL_1,
       MUX_pciw_Prelude_inst_changeSpecialWires_2_rg_write_1__SEL_1,
       MUX_pciw_p2iS_write_1__SEL_1;

  // remaining internal signals
  wire [127 : 0] val_data__h6496, wOut_data__h6605;
  wire [15 : 0] val_be__h6495, wOut_be__h6604;
  wire pciw_p2iAF_head_wrapped_crossed__4_EQ_pciw_p2i_ETC___d123;

  // oscillator and gates for output clock p125clk
  assign p125clk = pciw_pci0_pcie_ep_trn2_clk ;
  assign CLK_GATE_p125clk = 1'b1 ;

  // oscillator and gates for output clock rxclkBnd
  assign rxclkBnd = gbe0_CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_tx_clk
  assign gmii_tx_tx_clk = gbe0_CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock flpCDC_sclk
  assign flpCDC_sclk = fmc150_CLK_padsCDC_sclk ;
  assign CLK_GATE_flpCDC_sclk = 1'b1 ;

  // oscillator and gates for output clock flpCDC_sclkn
  assign flpCDC_sclkn = fmc150_CLK_padsCDC_sclkn ;
  assign CLK_GATE_flpCDC_sclkn = 1'b1 ;

  // oscillator and gates for output clock flpDAC_sclk
  assign flpDAC_sclk = fmc150_CLK_padsDAC_sclk ;
  assign CLK_GATE_flpDAC_sclk = 1'b1 ;

  // oscillator and gates for output clock flpDAC_sclkn
  assign flpDAC_sclkn = fmc150_CLK_padsDAC_sclkn ;
  assign CLK_GATE_flpDAC_sclkn = 1'b1 ;

  // output resets
  assign p125rst = pciw_p125rst_OUT_RST ;
  assign gmii_rstn = gbe0_RST_N_gmii_rstn ;
  assign flpCDC_srst = fmc150_RST_N_padsCDC_srst ;
  assign flpDAC_srst = fmc150_RST_N_padsDAC_srst ;

  // value method pcie_txp
  assign pcie_txp = pciw_pci0_pcie_ep_pci_exp_txp ;

  // value method pcie_txn
  assign pcie_txn = pciw_pci0_pcie_ep_pci_exp_txn ;

  // value method led
  assign led =
	     { 5'b10100,
	       freeCnt[25],
	       1'b0,
	       dram0_isTrained,
	       dram0_isReset,
	       dram0_isInReset,
	       ctop_led,
	       pciw_pciLinkUp_dD_OUT } ;

  // value method lcd_db
  assign lcd_db = lcd_ctrl_db ;

  // value method lcd_e
  assign lcd_e = lcd_ctrl_e ;

  // value method lcd_rs
  assign lcd_rs = lcd_ctrl_rs ;

  // value method lcd_rw
  assign lcd_rw = lcd_ctrl_rw ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = ctop_gps_ppsSyncOut ;

  // value method dram_addr
  assign dram_addr = dram0_dram_addr ;

  // value method dram_ba
  assign dram_ba = dram0_dram_ba ;

  // value method dram_ras_n
  assign dram_ras_n = dram0_dram_ras_n ;

  // value method dram_cas_n
  assign dram_cas_n = dram0_dram_cas_n ;

  // value method dram_we_n
  assign dram_we_n = dram0_dram_we_n ;

  // value method dram_reset_n
  assign dram_reset_n = dram0_dram_reset_n ;

  // value method dram_cs_n
  assign dram_cs_n = dram0_dram_cs_n ;

  // value method dram_odt
  assign dram_odt = dram0_dram_odt ;

  // value method dram_cke
  assign dram_cke = dram0_dram_cke ;

  // value method dram_dm
  assign dram_dm = dram0_dram_dm ;

  // value method dram_ck_p
  assign dram_ck_p = dram0_dram_ck_p ;

  // value method dram_ck_n
  assign dram_ck_n = dram0_dram_ck_n ;

  // value method flash_addr
  assign flash_addr = flash0_flash_addr ;

  // value method flash_ce_n
  assign flash_ce_n = flash0_flash_ce_n ;

  // value method flash_oe_n
  assign flash_oe_n = flash0_flash_oe_n ;

  // value method flash_we_n
  assign flash_we_n = flash0_flash_we_n ;

  // value method flash_wp_n
  assign flash_wp_n = flash0_flash_wp_n ;

  // value method flash_rst_n
  assign flash_rst_n = flash0_flash_rst_n ;

  // value method flash_adv_n
  assign flash_adv_n = flash0_flash_adv_n ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gbe0_gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gbe0_gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gbe0_gmii_tx_tx_er ;

  // value method gmii_led
  assign gmii_led = gbe0_gmii_led ;

  // value method flpCDC_sdo
  assign flpCDC_sdo = fmc150_padsCDC_sdo ;

  // value method flpCDC_csb
  assign flpCDC_csb = fmc150_padsCDC_csb ;

  // value method flpCDC_sclkgate
  assign flpCDC_sclkgate = fmc150_padsCDC_sclkgate ;

  // value method flpDAC_sdo
  assign flpDAC_sdo = fmc150_padsDAC_sdo ;

  // value method flpDAC_csb
  assign flpDAC_csb = fmc150_padsDAC_csb ;

  // value method flpDAC_sclkgate
  assign flpDAC_sclkgate = fmc150_padsDAC_sclkgate ;

  // submodule cap0
  mkWSICaptureWorker4B #(.hasDebugLogic(1'd1)) cap0(.wciS0_Clk(pciw_pci0_pcie_ep_trn2_clk),
						    .wciS0_MReset_n(ctop_RST_N_wci_m_3),
						    .wciS0_MAddr(cap0_wciS0_MAddr),
						    .wciS0_MAddrSpace(cap0_wciS0_MAddrSpace),
						    .wciS0_MByteEn(cap0_wciS0_MByteEn),
						    .wciS0_MCmd(cap0_wciS0_MCmd),
						    .wciS0_MData(cap0_wciS0_MData),
						    .wciS0_MFlag(cap0_wciS0_MFlag),
						    .wsiS0_MBurstLength(cap0_wsiS0_MBurstLength),
						    .wsiS0_MByteEn(cap0_wsiS0_MByteEn),
						    .wsiS0_MCmd(cap0_wsiS0_MCmd),
						    .wsiS0_MData(cap0_wsiS0_MData),
						    .wsiS0_MReqInfo(cap0_wsiS0_MReqInfo),
						    .wtiS0_MCmd(cap0_wtiS0_MCmd),
						    .wtiS0_MData(cap0_wtiS0_MData),
						    .wsiS0_MReqLast(cap0_wsiS0_MReqLast),
						    .wsiS0_MBurstPrecise(cap0_wsiS0_MBurstPrecise),
						    .wsiS0_MReset_n(cap0_wsiS0_MReset_n),
						    .wciS0_SResp(cap0_wciS0_SResp),
						    .wciS0_SData(cap0_wciS0_SData),
						    .wciS0_SThreadBusy(cap0_wciS0_SThreadBusy),
						    .wciS0_SFlag(cap0_wciS0_SFlag),
						    .wsiS0_SThreadBusy(cap0_wsiS0_SThreadBusy),
						    .wsiS0_SReset_n(cap0_wsiS0_SReset_n),
						    .wtiS0_SThreadBusy(),
						    .wtiS0_SReset_n());

  // submodule ctop
  mkCTop16B ctop(.pciDevice(pciDevice),
		 .CLK_sys0_clk(sys0_clk_O),
		 .RST_N_sys0_rst(sys0_rst_OUT_RST),
		 .CLK(pciw_pci0_pcie_ep_trn2_clk),
		 .RST_N(pciw_p125rst_OUT_RST),
		 .cpServer_request_put(ctop_cpServer_request_put),
		 .gps_ppsSyncIn_x(ctop_gps_ppsSyncIn_x),
		 .server_request_put(ctop_server_request_put),
		 .switch_x(ctop_switch_x),
		 .wci_m_0_SData(ctop_wci_m_0_SData),
		 .wci_m_0_SFlag(ctop_wci_m_0_SFlag),
		 .wci_m_0_SResp(ctop_wci_m_0_SResp),
		 .wci_m_1_SData(ctop_wci_m_1_SData),
		 .wci_m_1_SFlag(ctop_wci_m_1_SFlag),
		 .wci_m_1_SResp(ctop_wci_m_1_SResp),
		 .wci_m_2_SData(ctop_wci_m_2_SData),
		 .wci_m_2_SFlag(ctop_wci_m_2_SFlag),
		 .wci_m_2_SResp(ctop_wci_m_2_SResp),
		 .wci_m_3_SData(ctop_wci_m_3_SData),
		 .wci_m_3_SFlag(ctop_wci_m_3_SFlag),
		 .wci_m_3_SResp(ctop_wci_m_3_SResp),
		 .wci_m_4_SData(ctop_wci_m_4_SData),
		 .wci_m_4_SFlag(ctop_wci_m_4_SFlag),
		 .wci_m_4_SResp(ctop_wci_m_4_SResp),
		 .wmemiM0_SData(ctop_wmemiM0_SData),
		 .wmemiM0_SResp(ctop_wmemiM0_SResp),
		 .wsi_s_adc_MBurstLength(ctop_wsi_s_adc_MBurstLength),
		 .wsi_s_adc_MByteEn(ctop_wsi_s_adc_MByteEn),
		 .wsi_s_adc_MCmd(ctop_wsi_s_adc_MCmd),
		 .wsi_s_adc_MData(ctop_wsi_s_adc_MData),
		 .wsi_s_adc_MReqInfo(ctop_wsi_s_adc_MReqInfo),
		 .EN_server_request_put(ctop_EN_server_request_put),
		 .EN_server_response_get(ctop_EN_server_response_get),
		 .EN_cpServer_request_put(ctop_EN_cpServer_request_put),
		 .EN_cpServer_response_get(ctop_EN_cpServer_response_get),
		 .wci_m_0_SThreadBusy(ctop_wci_m_0_SThreadBusy),
		 .wci_m_1_SThreadBusy(ctop_wci_m_1_SThreadBusy),
		 .wci_m_2_SThreadBusy(ctop_wci_m_2_SThreadBusy),
		 .wci_m_3_SThreadBusy(ctop_wci_m_3_SThreadBusy),
		 .wci_m_4_SThreadBusy(ctop_wci_m_4_SThreadBusy),
		 .wsi_s_adc_MReqLast(ctop_wsi_s_adc_MReqLast),
		 .wsi_s_adc_MBurstPrecise(ctop_wsi_s_adc_MBurstPrecise),
		 .wsi_s_adc_MReset_n(ctop_wsi_s_adc_MReset_n),
		 .wsi_m_dac_SThreadBusy(ctop_wsi_m_dac_SThreadBusy),
		 .wsi_m_dac_SReset_n(ctop_wsi_m_dac_SReset_n),
		 .wmemiM0_SRespLast(ctop_wmemiM0_SRespLast),
		 .wmemiM0_SCmdAccept(ctop_wmemiM0_SCmdAccept),
		 .wmemiM0_SDataAccept(ctop_wmemiM0_SDataAccept),
		 .RDY_server_request_put(ctop_RDY_server_request_put),
		 .server_response_get(ctop_server_response_get),
		 .RDY_server_response_get(ctop_RDY_server_response_get),
		 .RDY_cpServer_request_put(ctop_RDY_cpServer_request_put),
		 .cpServer_response_get(ctop_cpServer_response_get),
		 .RDY_cpServer_response_get(ctop_RDY_cpServer_response_get),
		 .led(ctop_led),
		 .wci_m_0_MCmd(ctop_wci_m_0_MCmd),
		 .wci_m_0_MAddrSpace(ctop_wci_m_0_MAddrSpace),
		 .wci_m_0_MByteEn(ctop_wci_m_0_MByteEn),
		 .wci_m_0_MAddr(ctop_wci_m_0_MAddr),
		 .wci_m_0_MData(ctop_wci_m_0_MData),
		 .wci_m_0_MFlag(ctop_wci_m_0_MFlag),
		 .wci_m_1_MCmd(ctop_wci_m_1_MCmd),
		 .wci_m_1_MAddrSpace(ctop_wci_m_1_MAddrSpace),
		 .wci_m_1_MByteEn(ctop_wci_m_1_MByteEn),
		 .wci_m_1_MAddr(ctop_wci_m_1_MAddr),
		 .wci_m_1_MData(ctop_wci_m_1_MData),
		 .wci_m_1_MFlag(ctop_wci_m_1_MFlag),
		 .wci_m_2_MCmd(ctop_wci_m_2_MCmd),
		 .wci_m_2_MAddrSpace(ctop_wci_m_2_MAddrSpace),
		 .wci_m_2_MByteEn(ctop_wci_m_2_MByteEn),
		 .wci_m_2_MAddr(ctop_wci_m_2_MAddr),
		 .wci_m_2_MData(ctop_wci_m_2_MData),
		 .wci_m_2_MFlag(ctop_wci_m_2_MFlag),
		 .wci_m_3_MCmd(ctop_wci_m_3_MCmd),
		 .wci_m_3_MAddrSpace(ctop_wci_m_3_MAddrSpace),
		 .wci_m_3_MByteEn(ctop_wci_m_3_MByteEn),
		 .wci_m_3_MAddr(ctop_wci_m_3_MAddr),
		 .wci_m_3_MData(ctop_wci_m_3_MData),
		 .wci_m_3_MFlag(ctop_wci_m_3_MFlag),
		 .wci_m_4_MCmd(ctop_wci_m_4_MCmd),
		 .wci_m_4_MAddrSpace(ctop_wci_m_4_MAddrSpace),
		 .wci_m_4_MByteEn(ctop_wci_m_4_MByteEn),
		 .wci_m_4_MAddr(ctop_wci_m_4_MAddr),
		 .wci_m_4_MData(ctop_wci_m_4_MData),
		 .wci_m_4_MFlag(ctop_wci_m_4_MFlag),
		 .cpNow(ctop_cpNow),
		 .RDY_cpNow(),
		 .wsi_s_adc_SThreadBusy(),
		 .wsi_s_adc_SReset_n(),
		 .wsi_m_dac_MCmd(),
		 .wsi_m_dac_MReqLast(),
		 .wsi_m_dac_MBurstPrecise(),
		 .wsi_m_dac_MBurstLength(),
		 .wsi_m_dac_MData(),
		 .wsi_m_dac_MByteEn(),
		 .wsi_m_dac_MReqInfo(),
		 .wsi_m_dac_MReset_n(),
		 .wmemiM0_MCmd(ctop_wmemiM0_MCmd),
		 .wmemiM0_MReqLast(ctop_wmemiM0_MReqLast),
		 .wmemiM0_MAddr(ctop_wmemiM0_MAddr),
		 .wmemiM0_MBurstLength(ctop_wmemiM0_MBurstLength),
		 .wmemiM0_MDataValid(ctop_wmemiM0_MDataValid),
		 .wmemiM0_MDataLast(ctop_wmemiM0_MDataLast),
		 .wmemiM0_MData(ctop_wmemiM0_MData),
		 .wmemiM0_MDataByteEn(ctop_wmemiM0_MDataByteEn),
		 .wmemiM0_MReset_n(ctop_wmemiM0_MReset_n),
		 .gps_ppsSyncOut(ctop_gps_ppsSyncOut),
		 .RST_N_wci_m_0(ctop_RST_N_wci_m_0),
		 .RST_N_wci_m_1(ctop_RST_N_wci_m_1),
		 .RST_N_wci_m_2(ctop_RST_N_wci_m_2),
		 .RST_N_wci_m_3(ctop_RST_N_wci_m_3),
		 .RST_N_wci_m_4(ctop_RST_N_wci_m_4));

  // submodule dram0
  mkDramServer_v6 #(.hasDebugLogic(1'd1)) dram0(.CLK_sys0_clk(sys0_clk_O),
						.RST_N_sys0_rst(sys0_rst_OUT_RST),
						.wciS0_Clk(pciw_pci0_pcie_ep_trn2_clk),
						.wciS0_MReset_n(ctop_RST_N_wci_m_4),
						.wciS0_MAddr(dram0_wciS0_MAddr),
						.wciS0_MAddrSpace(dram0_wciS0_MAddrSpace),
						.wciS0_MByteEn(dram0_wciS0_MByteEn),
						.wciS0_MCmd(dram0_wciS0_MCmd),
						.wciS0_MData(dram0_wciS0_MData),
						.wciS0_MFlag(dram0_wciS0_MFlag),
						.wmemiS0_MAddr(dram0_wmemiS0_MAddr),
						.wmemiS0_MBurstLength(dram0_wmemiS0_MBurstLength),
						.wmemiS0_MCmd(dram0_wmemiS0_MCmd),
						.wmemiS0_MData(dram0_wmemiS0_MData),
						.wmemiS0_MDataByteEn(dram0_wmemiS0_MDataByteEn),
						.wmemiS0_MReqLast(dram0_wmemiS0_MReqLast),
						.wmemiS0_MDataValid(dram0_wmemiS0_MDataValid),
						.wmemiS0_MDataLast(dram0_wmemiS0_MDataLast),
						.wmemiS0_MReset_n(dram0_wmemiS0_MReset_n),
						.wciS0_SResp(dram0_wciS0_SResp),
						.wciS0_SData(dram0_wciS0_SData),
						.wciS0_SThreadBusy(dram0_wciS0_SThreadBusy),
						.wciS0_SFlag(dram0_wciS0_SFlag),
						.wmemiS0_SResp(dram0_wmemiS0_SResp),
						.wmemiS0_SRespLast(dram0_wmemiS0_SRespLast),
						.wmemiS0_SData(dram0_wmemiS0_SData),
						.wmemiS0_SCmdAccept(dram0_wmemiS0_SCmdAccept),
						.wmemiS0_SDataAccept(dram0_wmemiS0_SDataAccept),
						.dram_addr(dram0_dram_addr),
						.dram_ba(dram0_dram_ba),
						.dram_ras_n(dram0_dram_ras_n),
						.dram_cas_n(dram0_dram_cas_n),
						.dram_we_n(dram0_dram_we_n),
						.dram_reset_n(dram0_dram_reset_n),
						.dram_cs_n(dram0_dram_cs_n),
						.dram_odt(dram0_dram_odt),
						.dram_cke(dram0_dram_cke),
						.dram_dm(dram0_dram_dm),
						.dram_ck_p(dram0_dram_ck_p),
						.dram_ck_n(dram0_dram_ck_n),
						.isInReset(dram0_isInReset),
						.isReset(dram0_isReset),
						.isTrained(dram0_isTrained),
						.dram_io_dq(dram_io_dq),
						.dram_io_dqs_p(dram_io_dqs_p),
						.dram_io_dqs_n(dram_io_dqs_n));

  // submodule flash0
  mkFlashWorker #(.hasDebugLogic(1'd1)) flash0(.wciS0_Clk(pciw_pci0_pcie_ep_trn2_clk),
					       .wciS0_MReset_n(ctop_RST_N_wci_m_1),
					       .flash_fwait_i(flash0_flash_fwait_i),
					       .wciS0_MAddr(flash0_wciS0_MAddr),
					       .wciS0_MAddrSpace(flash0_wciS0_MAddrSpace),
					       .wciS0_MByteEn(flash0_wciS0_MByteEn),
					       .wciS0_MCmd(flash0_wciS0_MCmd),
					       .wciS0_MData(flash0_wciS0_MData),
					       .wciS0_MFlag(flash0_wciS0_MFlag),
					       .wciS0_SResp(flash0_wciS0_SResp),
					       .wciS0_SData(flash0_wciS0_SData),
					       .wciS0_SThreadBusy(flash0_wciS0_SThreadBusy),
					       .wciS0_SFlag(flash0_wciS0_SFlag),
					       .flash_addr(flash0_flash_addr),
					       .flash_ce_n(flash0_flash_ce_n),
					       .flash_oe_n(flash0_flash_oe_n),
					       .flash_we_n(flash0_flash_we_n),
					       .flash_wp_n(flash0_flash_wp_n),
					       .flash_rst_n(flash0_flash_rst_n),
					       .flash_adv_n(flash0_flash_adv_n),
					       .flash_io_dq(flash_io_dq));

  // submodule flp_clk
  IBUFDS flp_clk(.I(flp_cdc_clk_p), .IB(flp_cdc_clk_n), .O(flp_clk_O));

  // submodule flp_rst
  SyncResetA #(.RSTDELAY(32'd0)) flp_rst(.CLK(flp_clk_O),
					 .IN_RST(pciw_p125rst_OUT_RST),
					 .OUT_RST(flp_rst_OUT_RST));

  // submodule fmc150
  mkFMC150 #(.hasDebugLogic(1'd1)) fmc150(.CLK_flp_clk(flp_clk_O),
					  .RST_N_flp_rst(flp_rst_OUT_RST),
					  .wciS0_Clk(pciw_pci0_pcie_ep_trn2_clk),
					  .wciS0_MReset_n(ctop_RST_N_wci_m_0),
					  .padsCDC_sdi_arg(fmc150_padsCDC_sdi_arg),
					  .padsDAC_sdi_arg(fmc150_padsDAC_sdi_arg),
					  .wciS0_MAddr(fmc150_wciS0_MAddr),
					  .wciS0_MAddrSpace(fmc150_wciS0_MAddrSpace),
					  .wciS0_MByteEn(fmc150_wciS0_MByteEn),
					  .wciS0_MCmd(fmc150_wciS0_MCmd),
					  .wciS0_MData(fmc150_wciS0_MData),
					  .wciS0_MFlag(fmc150_wciS0_MFlag),
					  .wciS0_SResp(fmc150_wciS0_SResp),
					  .wciS0_SData(fmc150_wciS0_SData),
					  .wciS0_SThreadBusy(fmc150_wciS0_SThreadBusy),
					  .wciS0_SFlag(fmc150_wciS0_SFlag),
					  .padsCDC_sdo(fmc150_padsCDC_sdo),
					  .padsCDC_csb(fmc150_padsCDC_csb),
					  .padsCDC_sclkgate(fmc150_padsCDC_sclkgate),
					  .padsDAC_sdo(fmc150_padsDAC_sdo),
					  .padsDAC_csb(fmc150_padsDAC_csb),
					  .padsDAC_sclkgate(fmc150_padsDAC_sclkgate),
					  .CLK_padsCDC_sclk(fmc150_CLK_padsCDC_sclk),
					  .CLK_GATE_padsCDC_sclk(),
					  .CLK_padsCDC_sclkn(fmc150_CLK_padsCDC_sclkn),
					  .CLK_GATE_padsCDC_sclkn(),
					  .CLK_padsDAC_sclk(fmc150_CLK_padsDAC_sclk),
					  .CLK_GATE_padsDAC_sclk(),
					  .CLK_padsDAC_sclkn(fmc150_CLK_padsDAC_sclkn),
					  .CLK_GATE_padsDAC_sclkn(),
					  .RST_N_padsCDC_srst(fmc150_RST_N_padsCDC_srst),
					  .RST_N_padsDAC_srst(fmc150_RST_N_padsDAC_srst));

  // submodule gbe0
  mkGbeWorker #(.hasDebugLogic(1'd1)) gbe0(.CLK_gmii_rx_clk(gmii_rx_clk),
					   .CLK_sys1_clk(sys1_clk_O),
					   .RST_N_sys1_rst(sys1_rst_OUT_RST),
					   .wciS0_Clk(pciw_pci0_pcie_ep_trn2_clk),
					   .wciS0_MReset_n(ctop_RST_N_wci_m_2),
					   .cpClient_response_put(gbe0_cpClient_response_put),
					   .gmii_col_i(gbe0_gmii_col_i),
					   .gmii_crs_i(gbe0_gmii_crs_i),
					   .gmii_intr_i(gbe0_gmii_intr_i),
					   .gmii_rx_rx_dv_i(gbe0_gmii_rx_rx_dv_i),
					   .gmii_rx_rx_er_i(gbe0_gmii_rx_rx_er_i),
					   .gmii_rx_rxd_i(gbe0_gmii_rx_rxd_i),
					   .wciS0_MAddr(gbe0_wciS0_MAddr),
					   .wciS0_MAddrSpace(gbe0_wciS0_MAddrSpace),
					   .wciS0_MByteEn(gbe0_wciS0_MByteEn),
					   .wciS0_MCmd(gbe0_wciS0_MCmd),
					   .wciS0_MData(gbe0_wciS0_MData),
					   .wciS0_MFlag(gbe0_wciS0_MFlag),
					   .wsiS0_MBurstLength(gbe0_wsiS0_MBurstLength),
					   .wsiS0_MByteEn(gbe0_wsiS0_MByteEn),
					   .wsiS0_MCmd(gbe0_wsiS0_MCmd),
					   .wsiS0_MData(gbe0_wsiS0_MData),
					   .wsiS0_MReqInfo(gbe0_wsiS0_MReqInfo),
					   .wtiS0_req(gbe0_wtiS0_req),
					   .wsiM0_SThreadBusy(gbe0_wsiM0_SThreadBusy),
					   .wsiM0_SReset_n(gbe0_wsiM0_SReset_n),
					   .wsiS0_MReqLast(gbe0_wsiS0_MReqLast),
					   .wsiS0_MBurstPrecise(gbe0_wsiS0_MBurstPrecise),
					   .wsiS0_MReset_n(gbe0_wsiS0_MReset_n),
					   .EN_cpClient_request_get(gbe0_EN_cpClient_request_get),
					   .EN_cpClient_response_put(gbe0_EN_cpClient_response_put),
					   .wciS0_SResp(gbe0_wciS0_SResp),
					   .wciS0_SData(gbe0_wciS0_SData),
					   .wciS0_SThreadBusy(gbe0_wciS0_SThreadBusy),
					   .wciS0_SFlag(gbe0_wciS0_SFlag),
					   .wtiS0_SThreadBusy(gbe0_wtiS0_SThreadBusy),
					   .wtiS0_SReset_n(gbe0_wtiS0_SReset_n),
					   .wsiM0_MCmd(gbe0_wsiM0_MCmd),
					   .wsiM0_MReqLast(gbe0_wsiM0_MReqLast),
					   .wsiM0_MBurstPrecise(gbe0_wsiM0_MBurstPrecise),
					   .wsiM0_MBurstLength(gbe0_wsiM0_MBurstLength),
					   .wsiM0_MData(gbe0_wsiM0_MData),
					   .wsiM0_MByteEn(gbe0_wsiM0_MByteEn),
					   .wsiM0_MReqInfo(gbe0_wsiM0_MReqInfo),
					   .wsiM0_MReset_n(gbe0_wsiM0_MReset_n),
					   .wsiS0_SThreadBusy(),
					   .wsiS0_SReset_n(),
					   .cpClient_request_get(gbe0_cpClient_request_get),
					   .RDY_cpClient_request_get(gbe0_RDY_cpClient_request_get),
					   .RDY_cpClient_response_put(gbe0_RDY_cpClient_response_put),
					   .gmii_tx_txd(gbe0_gmii_tx_txd),
					   .gmii_tx_tx_en(gbe0_gmii_tx_tx_en),
					   .gmii_tx_tx_er(gbe0_gmii_tx_tx_er),
					   .gmii_led(gbe0_gmii_led),
					   .CLK_gmii_tx_tx_clk(gbe0_CLK_gmii_tx_tx_clk),
					   .CLK_GATE_gmii_tx_tx_clk(),
					   .CLK_rxclkBnd(gbe0_CLK_rxclkBnd),
					   .CLK_GATE_rxclkBnd(),
					   .RST_N_gmii_rstn(gbe0_RST_N_gmii_rstn),
					   .mdio_mdd(mdio_mdd),
					   .mdio_mdc(mdio_mdc));

  // submodule lcd_ctrl
  mkLCDController lcd_ctrl(.CLK(pciw_pci0_pcie_ep_trn2_clk),
			   .RST_N(pciw_p125rst_OUT_RST),
			   .setLine1_text(lcd_ctrl_setLine1_text),
			   .setLine2_text(lcd_ctrl_setLine2_text),
			   .EN_setLine1(lcd_ctrl_EN_setLine1),
			   .EN_setLine2(lcd_ctrl_EN_setLine2),
			   .db(lcd_ctrl_db),
			   .e(lcd_ctrl_e),
			   .rs(lcd_ctrl_rs),
			   .rw(lcd_ctrl_rw));

  // submodule pciw_fI2P
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pciw_fI2P(.RST(pciw_p250rst_OUT_RST),
					 .CLK(pciw_pci0_pcie_ep_trn_clk),
					 .D_IN(pciw_fI2P_D_IN),
					 .ENQ(pciw_fI2P_ENQ),
					 .DEQ(pciw_fI2P_DEQ),
					 .CLR(pciw_fI2P_CLR),
					 .D_OUT(pciw_fI2P_D_OUT),
					 .FULL_N(pciw_fI2P_FULL_N),
					 .EMPTY_N(pciw_fI2P_EMPTY_N));

  // submodule pciw_fP2I
  SizedFIFO #(.p1width(32'd81),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pciw_fP2I(.RST(pciw_p250rst_OUT_RST),
					 .CLK(pciw_pci0_pcie_ep_trn_clk),
					 .D_IN(pciw_fP2I_D_IN),
					 .ENQ(pciw_fP2I_ENQ),
					 .DEQ(pciw_fP2I_DEQ),
					 .CLR(pciw_fP2I_CLR),
					 .D_OUT(pciw_fP2I_D_OUT),
					 .FULL_N(pciw_fP2I_FULL_N),
					 .EMPTY_N(pciw_fP2I_EMPTY_N));

  // submodule pciw_i2pAF_dCombinedReset
  ResetEither pciw_i2pAF_dCombinedReset(.A_RST(pciw_p250rst_OUT_RST),
					.B_RST(pciw_i2pAF_dCrossedsReset_OUT_RST),
					.RST_OUT(pciw_i2pAF_dCombinedReset_RST_OUT));

  // submodule pciw_i2pAF_dCrossedsReset
  SyncReset0 pciw_i2pAF_dCrossedsReset(.IN_RST(pciw_p125rst_OUT_RST),
				       .OUT_RST(pciw_i2pAF_dCrossedsReset_OUT_RST));

  // submodule pciw_i2pAF_sCombinedReset
  ResetEither pciw_i2pAF_sCombinedReset(.A_RST(pciw_p125rst_OUT_RST),
					.B_RST(pciw_i2pAF_sCrosseddReset_OUT_RST),
					.RST_OUT(pciw_i2pAF_sCombinedReset_RST_OUT));

  // submodule pciw_i2pAF_sCrosseddReset
  SyncReset0 pciw_i2pAF_sCrosseddReset(.IN_RST(pciw_p250rst_OUT_RST),
				       .OUT_RST(pciw_i2pAF_sCrosseddReset_OUT_RST));

  // submodule pciw_p125rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p125rst(.CLK(pciw_pci0_pcie_ep_trn2_clk),
					      .IN_RST(pciw_pci0_pcie_ep_trn_reset_n),
					      .OUT_RST(pciw_p125rst_OUT_RST));

  // submodule pciw_p250rst
  SyncResetA #(.RSTDELAY(32'd0)) pciw_p250rst(.CLK(pciw_pci0_pcie_ep_trn_clk),
					      .IN_RST(pciw_pci0_pcie_ep_trn_reset_n),
					      .OUT_RST(pciw_p250rst_OUT_RST));

  // submodule pciw_p2iAF_dCombinedReset
  ResetEither pciw_p2iAF_dCombinedReset(.A_RST(pciw_p125rst_OUT_RST),
					.B_RST(pciw_p2iAF_dCrossedsReset_OUT_RST),
					.RST_OUT(pciw_p2iAF_dCombinedReset_RST_OUT));

  // submodule pciw_p2iAF_dCrossedsReset
  SyncReset0 pciw_p2iAF_dCrossedsReset(.IN_RST(pciw_p250rst_OUT_RST),
				       .OUT_RST(pciw_p2iAF_dCrossedsReset_OUT_RST));

  // submodule pciw_p2iAF_sCombinedReset
  ResetEither pciw_p2iAF_sCombinedReset(.A_RST(pciw_p250rst_OUT_RST),
					.B_RST(pciw_p2iAF_sCrosseddReset_OUT_RST),
					.RST_OUT(pciw_p2iAF_sCombinedReset_RST_OUT));

  // submodule pciw_p2iAF_sCrosseddReset
  SyncReset0 pciw_p2iAF_sCrosseddReset(.IN_RST(pciw_p125rst_OUT_RST),
				       .OUT_RST(pciw_p2iAF_sCrosseddReset_OUT_RST));

  // submodule pciw_pci0_clk
  IBUFDS_GTXE1 pciw_pci0_clk(.I(pci0_clkp),
			     .IB(pci0_clkn),
			     .CEB(1'd0),
			     .O(pciw_pci0_clk_O),
			     .ODIV2());

  // submodule pciw_pci0_pcie_ep
  xilinx_v6_pcie_wrapper #(.PL_FAST_TRAIN("FALSE")) pciw_pci0_pcie_ep(.sys_clk(pciw_pci0_clk_O),
								      .sys_reset_n(pci0_rstn),
								      .cfg_byte_en_n(pciw_pci0_pcie_ep_cfg_byte_en_n),
								      .cfg_di(pciw_pci0_pcie_ep_cfg_di),
								      .cfg_dsn(pciw_pci0_pcie_ep_cfg_dsn),
								      .cfg_dwaddr(pciw_pci0_pcie_ep_cfg_dwaddr),
								      .cfg_err_cor_n(pciw_pci0_pcie_ep_cfg_err_cor_n),
								      .cfg_err_cpl_abort_n(pciw_pci0_pcie_ep_cfg_err_cpl_abort_n),
								      .cfg_err_cpl_timeout_n(pciw_pci0_pcie_ep_cfg_err_cpl_timeout_n),
								      .cfg_err_cpl_unexpect_n(pciw_pci0_pcie_ep_cfg_err_cpl_unexpect_n),
								      .cfg_err_ecrc_n(pciw_pci0_pcie_ep_cfg_err_ecrc_n),
								      .cfg_err_locked_n(pciw_pci0_pcie_ep_cfg_err_locked_n),
								      .cfg_err_posted_n(pciw_pci0_pcie_ep_cfg_err_posted_n),
								      .cfg_err_tlp_cpl_header(pciw_pci0_pcie_ep_cfg_err_tlp_cpl_header),
								      .cfg_err_ur_n(pciw_pci0_pcie_ep_cfg_err_ur_n),
								      .cfg_interrupt_assert_n(pciw_pci0_pcie_ep_cfg_interrupt_assert_n),
								      .cfg_interrupt_di(pciw_pci0_pcie_ep_cfg_interrupt_di),
								      .cfg_interrupt_n(pciw_pci0_pcie_ep_cfg_interrupt_n),
								      .cfg_pm_wake_n(pciw_pci0_pcie_ep_cfg_pm_wake_n),
								      .cfg_rd_en_n(pciw_pci0_pcie_ep_cfg_rd_en_n),
								      .cfg_trn_pending_n(pciw_pci0_pcie_ep_cfg_trn_pending_n),
								      .cfg_turnoff_ok_n(pciw_pci0_pcie_ep_cfg_turnoff_ok_n),
								      .cfg_wr_en_n(pciw_pci0_pcie_ep_cfg_wr_en_n),
								      .pci_exp_rxn(pciw_pci0_pcie_ep_pci_exp_rxn),
								      .pci_exp_rxp(pciw_pci0_pcie_ep_pci_exp_rxp),
								      .pl_directed_link_auton(pciw_pci0_pcie_ep_pl_directed_link_auton),
								      .pl_directed_link_change(pciw_pci0_pcie_ep_pl_directed_link_change),
								      .pl_directed_link_speed(pciw_pci0_pcie_ep_pl_directed_link_speed),
								      .pl_directed_link_width(pciw_pci0_pcie_ep_pl_directed_link_width),
								      .pl_upstream_prefer_deemph(pciw_pci0_pcie_ep_pl_upstream_prefer_deemph),
								      .trn_fc_sel(pciw_pci0_pcie_ep_trn_fc_sel),
								      .trn_rdst_rdy_n(pciw_pci0_pcie_ep_trn_rdst_rdy_n),
								      .trn_rnp_ok_n(pciw_pci0_pcie_ep_trn_rnp_ok_n),
								      .trn_tcfg_gnt_n(pciw_pci0_pcie_ep_trn_tcfg_gnt_n),
								      .trn_td(pciw_pci0_pcie_ep_trn_td),
								      .trn_teof_n(pciw_pci0_pcie_ep_trn_teof_n),
								      .trn_terrfwd_n(pciw_pci0_pcie_ep_trn_terrfwd_n),
								      .trn_trem_n(pciw_pci0_pcie_ep_trn_trem_n),
								      .trn_tsof_n(pciw_pci0_pcie_ep_trn_tsof_n),
								      .trn_tsrc_dsc_n(pciw_pci0_pcie_ep_trn_tsrc_dsc_n),
								      .trn_tsrc_rdy_n(pciw_pci0_pcie_ep_trn_tsrc_rdy_n),
								      .trn_tstr_n(pciw_pci0_pcie_ep_trn_tstr_n),
								      .pci_exp_txp(pciw_pci0_pcie_ep_pci_exp_txp),
								      .pci_exp_txn(pciw_pci0_pcie_ep_pci_exp_txn),
								      .cfg_do(),
								      .cfg_rd_wr_done_n(),
								      .cfg_bus_number(pciw_pci0_pcie_ep_cfg_bus_number),
								      .cfg_device_number(pciw_pci0_pcie_ep_cfg_device_number),
								      .cfg_function_number(pciw_pci0_pcie_ep_cfg_function_number),
								      .cfg_status(),
								      .cfg_command(),
								      .cfg_dstatus(),
								      .cfg_dcommand(),
								      .cfg_dcommand2(),
								      .cfg_lstatus(),
								      .cfg_lcommand(),
								      .cfg_to_turnoff_n(),
								      .cfg_pcie_link_state_n(),
								      .cfg_pmcsr_pme_en(),
								      .cfg_pmcsr_pme_status(),
								      .cfg_pmcsr_powerstate(),
								      .trn_rsof_n(pciw_pci0_pcie_ep_trn_rsof_n),
								      .trn_reof_n(pciw_pci0_pcie_ep_trn_reof_n),
								      .trn_rd(pciw_pci0_pcie_ep_trn_rd),
								      .trn_rrem_n(pciw_pci0_pcie_ep_trn_rrem_n),
								      .trn_rerrfwd_n(),
								      .trn_rsrc_rdy_n(pciw_pci0_pcie_ep_trn_rsrc_rdy_n),
								      .trn_rsrc_dsc_n(),
								      .trn_rbar_hit_n(pciw_pci0_pcie_ep_trn_rbar_hit_n),
								      .trn_tdst_rdy_n(pciw_pci0_pcie_ep_trn_tdst_rdy_n),
								      .trn_tbuf_av(),
								      .trn_terr_drop_n(),
								      .trn_tcfg_req_n(),
								      .trn_lnk_up_n(pciw_pci0_pcie_ep_trn_lnk_up_n),
								      .trn_fc_ph(),
								      .trn_fc_pd(),
								      .trn_fc_nph(),
								      .trn_fc_npd(),
								      .trn_fc_cplh(),
								      .trn_fc_cpld(),
								      .cfg_interrupt_rdy_n(pciw_pci0_pcie_ep_cfg_interrupt_rdy_n),
								      .cfg_interrupt_do(pciw_pci0_pcie_ep_cfg_interrupt_do),
								      .cfg_interrupt_mmenable(pciw_pci0_pcie_ep_cfg_interrupt_mmenable),
								      .cfg_interrupt_msienable(pciw_pci0_pcie_ep_cfg_interrupt_msienable),
								      .cfg_interrupt_msixenable(),
								      .cfg_interrupt_msixfm(),
								      .cfg_err_cpl_rdy_n(),
								      .pl_initial_link_width(),
								      .pl_lane_reversal_mode(),
								      .pl_link_gen2_capable(),
								      .pl_link_partner_gen2_supported(),
								      .pl_link_upcfg_capable(),
								      .pl_sel_link_rate(),
								      .pl_sel_link_width(),
								      .pl_ltssm_state(),
								      .pl_received_hot_rst(),
								      .trn_clk(pciw_pci0_pcie_ep_trn_clk),
								      .trn2_clk(pciw_pci0_pcie_ep_trn2_clk),
								      .trn_reset_n(pciw_pci0_pcie_ep_trn_reset_n));

  // submodule pciw_pciDevice
  SyncRegister #(.width(32'd16),
		 .init(16'd0)) pciw_pciDevice(.sCLK(pciw_pci0_pcie_ep_trn_clk),
					      .dCLK(pciw_pci0_pcie_ep_trn2_clk),
					      .sRST(pciw_p250rst_OUT_RST),
					      .sD_IN(pciw_pciDevice_sD_IN),
					      .sEN(pciw_pciDevice_sEN),
					      .dD_OUT(pciw_pciDevice_dD_OUT),
					      .sRDY(pciw_pciDevice_sRDY));

  // submodule pciw_pciLinkUp
  SyncBit #(.init(1'd0)) pciw_pciLinkUp(.sCLK(pciw_pci0_pcie_ep_trn_clk),
					.dCLK(pciw_pci0_pcie_ep_trn2_clk),
					.sRST(pciw_p250rst_OUT_RST),
					.sD_IN(pciw_pciLinkUp_sD_IN),
					.sEN(pciw_pciLinkUp_sEN),
					.dD_OUT(pciw_pciLinkUp_dD_OUT));

  // submodule pciw_pcie_irq_fifoAssert
  SyncFIFO #(.dataWidth(32'd8),
	     .depth(32'd8),
	     .indxWidth(32'd3)) pciw_pcie_irq_fifoAssert(.sCLK(pciw_pci0_pcie_ep_trn_clk),
							 .dCLK(pciw_pci0_pcie_ep_trn_clk),
							 .sRST(pciw_p250rst_OUT_RST),
							 .sD_IN(pciw_pcie_irq_fifoAssert_sD_IN),
							 .sENQ(pciw_pcie_irq_fifoAssert_sENQ),
							 .dDEQ(pciw_pcie_irq_fifoAssert_dDEQ),
							 .dD_OUT(pciw_pcie_irq_fifoAssert_dD_OUT),
							 .sFULL_N(),
							 .dEMPTY_N(pciw_pcie_irq_fifoAssert_dEMPTY_N));

  // submodule pciw_preEdge
  ClockInvToBool pciw_preEdge(.CLK_FAST(pciw_pci0_pcie_ep_trn_clk),
			      .CLK_SLOW(pciw_pci0_pcie_ep_trn2_clk),
			      .CLK_VAL(pciw_preEdge_CLK_VAL));

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk_O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys0_rst(.CLK(sys0_clk_O),
					  .IN_RST(pciw_p125rst_OUT_RST),
					  .OUT_RST(sys0_rst_OUT_RST));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki_O), .O(sys1_clk_O));

  // submodule sys1_clki
  IBUFDS_GTXE1 sys1_clki(.I(sys1_clkp),
			 .IB(sys1_clkn),
			 .CEB(1'd0),
			 .O(sys1_clki_O),
			 .ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk_O),
					  .IN_RST(pciw_p125rst_OUT_RST),
					  .OUT_RST(sys1_rst_OUT_RST));

  // submodule tcGbe0
  mkTimeClient tcGbe0(.CLK_sys0_clk(sys0_clk_O),
		      .RST_N_sys0_rst(sys0_rst_OUT_RST),
		      .CLK_wti_clk(sys1_clk_O),
		      .RST_N_wti_rst(sys1_rst_OUT_RST),
		      .CLK(pciw_pci0_pcie_ep_trn2_clk),
		      .RST_N(pciw_p125rst_OUT_RST),
		      .gpsTime_arg(tcGbe0_gpsTime_arg),
		      .EN_gpsTime(tcGbe0_EN_gpsTime),
		      .wti_m_SThreadBusy(tcGbe0_wti_m_SThreadBusy),
		      .wti_m_SReset_n(tcGbe0_wti_m_SReset_n),
		      .RDY_gpsTime(tcGbe0_RDY_gpsTime),
		      .wti_m_req(tcGbe0_wti_m_req));

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt =
	     pciw_pcie_irq_fifoAssert_dEMPTY_N && pciw_pcie_irq_rMSIEnabled &&
	     !pciw_pcie_irq_rInterrupting &&
	     pciw_pci0_pcie_ep_cfg_interrupt_rdy_n ;

  // rule RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done
  assign WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done =
	     pciw_pcie_irq_rMSIEnabled && pciw_pcie_irq_rInterrupting &&
	     !pciw_pci0_pcie_ep_cfg_interrupt_rdy_n ;

  // rule RL_pciw_p2iAF_deq_update_head
  assign WILL_FIRE_RL_pciw_p2iAF_deq_update_head =
	     !pciw_p2iAF_dInReset_isInReset && pciw_p2iAF_deq_pw_whas ;

  // rule RL_pciw_i2pAF_enq_update_tail
  assign WILL_FIRE_RL_pciw_i2pAF_enq_update_tail =
	     !pciw_i2pAF_sInReset_isInReset && pciw_i2pAF_enq_pw_whas ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 =
	     pciw_fP2I_EMPTY_N &&
	     (!pciw_fP2I_D_OUT[79] ||
	      pciw_p2iAF_head_wrapped_crossed__4_EQ_pciw_p2i_ETC___d123) &&
	     !pciw_Prelude_inst_changeSpecialWires_1_rg[81] ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 =
	     pciw_p2iAF_head_wrapped_crossed__4_EQ_pciw_p2i_ETC___d123 &&
	     pciw_fP2I_EMPTY_N &&
	     pciw_Prelude_inst_changeSpecialWires_1_rg[81] ;

  // rule RL_pciw_p2iAF_enq_update_tail
  assign WILL_FIRE_RL_pciw_p2iAF_enq_update_tail =
	     !pciw_p2iAF_sInReset_isInReset && pciw_p2iAF_enq_pw_whas ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 =
	     pciw_i2pAF_head_wrapped != pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_dInReset_isInReset &&
	     pciw_preEdge_CLK_VAL &&
	     pciw_fI2P_FULL_N &&
	     !pciw_Prelude_inst_changeSpecialWires_2_rg[81] ;

  // rule RL_pciw_i2pAF_deq_update_head
  assign WILL_FIRE_RL_pciw_i2pAF_deq_update_head =
	     !pciw_i2pAF_dInReset_isInReset &&
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;

  // rule RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2
  assign WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 =
	     pciw_fI2P_FULL_N &&
	     pciw_Prelude_inst_changeSpecialWires_2_rg[81] ;

  // inputs to muxes for submodule ports
  assign MUX_pciw_Prelude_inst_changeSpecialWires_1_rg_write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !pciw_fP2I_D_OUT[79] ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_2_rg_write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     pciw_i2pS[135:128] != 8'd0 ;
  assign MUX_pciw_p2iS_write_1__SEL_1 =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     pciw_fP2I_D_OUT[79] ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_1_rg_write_1__VAL_1 =
	     { 1'd1, pciw_fP2I_D_OUT } ;
  assign MUX_pciw_Prelude_inst_changeSpecialWires_2_rg_write_1__VAL_1 =
	     { 2'd2,
	       pciw_i2pS[151:144],
	       pciw_i2pS[135:128],
	       pciw_i2pS[63:0] } ;
  assign MUX_pciw_fI2P_enq_1__VAL_2 =
	     (pciw_i2pS[135:128] == 8'd0) ?
	       { pciw_i2pS[152:136], pciw_i2pS[127:64] } :
	       { pciw_i2pS[152],
		 1'd0,
		 pciw_i2pS[150:136],
		 pciw_i2pS[127:64] } ;
  assign MUX_pciw_p2iS_write_1__VAL_1 =
	     { pciw_fP2I_D_OUT[80:72], val_be__h6495, val_data__h6496 } ;
  assign MUX_pciw_p2iS_write_1__VAL_2 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[80],
	       pciw_fP2I_D_OUT[79],
	       pciw_Prelude_inst_changeSpecialWires_1_rg[78:72],
	       wOut_be__h6604,
	       wOut_data__h6605 } ;

  // inlined wires
  assign pciw_pci0_wTrnTxSof_n_wget = !pciw_fI2P_D_OUT[80] ;
  assign pciw_pci0_wTrnTxSof_n_whas = pciw_pci0_pwTrnTx_whas ;
  assign pciw_pci0_wTrnTxEof_n_wget = !pciw_fI2P_D_OUT[79] ;
  assign pciw_pci0_wTrnTxEof_n_whas = pciw_pci0_pwTrnTx_whas ;
  assign pciw_pci0_wTrnTxDsc_n_wget = 1'd1 ;
  assign pciw_pci0_wTrnTxDsc_n_whas = pciw_pci0_pwTrnTx_whas ;
  assign pciw_pci0_wTrnTxRem_n_wget = pciw_fI2P_D_OUT[71:64] != 8'd255 ;
  assign pciw_pci0_wTrnTxRem_n_whas = pciw_pci0_pwTrnTx_whas ;
  assign pciw_pci0_wTrnTxDat_wget = pciw_fI2P_D_OUT[63:0] ;
  assign pciw_pci0_wTrnTxDat_whas = pciw_pci0_pwTrnTx_whas ;
  assign pciw_pci0_wTrnRxNpOk_n_wget = 1'd0 ;
  assign pciw_pci0_wTrnRxNpOk_n_whas = 1'd1 ;
  assign pciw_pci0_wTrnRxCplS_n_wget = 1'b0 ;
  assign pciw_pci0_wTrnRxCplS_n_whas = 1'b0 ;
  assign pciw_pcie_irq_wInterruptRdyN_wget =
	     pciw_pci0_pcie_ep_cfg_interrupt_rdy_n ;
  assign pciw_pcie_irq_wInterruptRdyN_whas = 1'd1 ;
  assign pciw_pcie_irq_wInterruptDo_wget =
	     pciw_pci0_pcie_ep_cfg_interrupt_do ;
  assign pciw_pcie_irq_wInterruptDo_whas = 1'd1 ;
  assign pciw_pci0_pwTrnTx_whas =
	     !pciw_pci0_pcie_ep_trn_tdst_rdy_n && pciw_fI2P_EMPTY_N ;
  assign pciw_pci0_pwTrnRx_whas =
	     !pciw_pci0_pcie_ep_trn_rsrc_rdy_n && pciw_fP2I_FULL_N ;
  assign pciw_p2iAF_enq_pw_whas =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     pciw_fP2I_D_OUT[79] ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;
  assign pciw_p2iAF_deq_pw_whas =
	     pciw_p2iAF_head_wrapped != pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_dInReset_isInReset &&
	     ctop_RDY_server_request_put ;
  assign pciw_p2iAF_sClear_pw_whas = 1'b0 ;
  assign pciw_p2iAF_dClear_pw_whas = 1'b0 ;
  assign pciw_p2iAF_deq_happened_whas = 1'b0 ;
  assign pciw_i2pAF_enq_pw_whas =
	     pciw_i2pAF_head_wrapped == pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_sInReset_isInReset &&
	     ctop_RDY_server_response_get ;
  assign pciw_i2pAF_deq_pw_whas =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;
  assign pciw_i2pAF_sClear_pw_whas = 1'b0 ;
  assign pciw_i2pAF_dClear_pw_whas = 1'b0 ;
  assign pciw_i2pAF_deq_happened_whas = 1'b0 ;
  assign infLed_wget = ctop_led ;
  assign blinkLed_wget = freeCnt[25] ;

  // register freeCnt
  assign freeCnt_D_IN = freeCnt + 32'd1 ;
  assign freeCnt_EN = 1'd1 ;

  // register needs_init
  assign needs_init_D_IN = 1'd0 ;
  assign needs_init_EN = needs_init ;

  // register pciDevice
  assign pciDevice_D_IN = pciw_pciDevice_dD_OUT ;
  assign pciDevice_EN = 1'd1 ;

  // register pciw_Prelude_inst_changeSpecialWires_1_rg
  assign pciw_Prelude_inst_changeSpecialWires_1_rg_D_IN =
	     MUX_pciw_Prelude_inst_changeSpecialWires_1_rg_write_1__SEL_1 ?
	       MUX_pciw_Prelude_inst_changeSpecialWires_1_rg_write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_Prelude_inst_changeSpecialWires_1_rg_EN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 &&
	     !pciw_fP2I_D_OUT[79] ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ;

  // register pciw_Prelude_inst_changeSpecialWires_2_rg
  assign pciw_Prelude_inst_changeSpecialWires_2_rg_D_IN =
	     MUX_pciw_Prelude_inst_changeSpecialWires_2_rg_write_1__SEL_1 ?
	       MUX_pciw_Prelude_inst_changeSpecialWires_2_rg_write_1__VAL_1 :
	       82'h0AAAAAAAAAAAAAAAAAAAA ;
  assign pciw_Prelude_inst_changeSpecialWires_2_rg_EN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 &&
	     pciw_i2pS[135:128] != 8'd0 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ;

  // register pciw_i2pAF_dInReset_isInReset
  assign pciw_i2pAF_dInReset_isInReset_D_IN = 1'd0 ;
  assign pciw_i2pAF_dInReset_isInReset_EN = pciw_i2pAF_dInReset_isInReset ;

  // register pciw_i2pAF_head_wrapped
  assign pciw_i2pAF_head_wrapped_D_IN =
	     WILL_FIRE_RL_pciw_i2pAF_deq_update_head &&
	     !pciw_i2pAF_head_wrapped ;
  assign pciw_i2pAF_head_wrapped_EN =
	     WILL_FIRE_RL_pciw_i2pAF_deq_update_head ||
	     pciw_i2pAF_dInReset_isInReset ;

  // register pciw_i2pAF_sInReset_isInReset
  assign pciw_i2pAF_sInReset_isInReset_D_IN = 1'd0 ;
  assign pciw_i2pAF_sInReset_isInReset_EN = pciw_i2pAF_sInReset_isInReset ;

  // register pciw_i2pAF_tail_wrapped
  assign pciw_i2pAF_tail_wrapped_D_IN =
	     WILL_FIRE_RL_pciw_i2pAF_enq_update_tail &&
	     !pciw_i2pAF_tail_wrapped ;
  assign pciw_i2pAF_tail_wrapped_EN =
	     WILL_FIRE_RL_pciw_i2pAF_enq_update_tail ||
	     pciw_i2pAF_sInReset_isInReset ;

  // register pciw_i2pS
  assign pciw_i2pS_D_IN = ctop_server_response_get ;
  assign pciw_i2pS_EN = pciw_i2pAF_enq_pw_whas ;

  // register pciw_p2iAF_dInReset_isInReset
  assign pciw_p2iAF_dInReset_isInReset_D_IN = 1'd0 ;
  assign pciw_p2iAF_dInReset_isInReset_EN = pciw_p2iAF_dInReset_isInReset ;

  // register pciw_p2iAF_head_wrapped
  assign pciw_p2iAF_head_wrapped_D_IN =
	     WILL_FIRE_RL_pciw_p2iAF_deq_update_head &&
	     !pciw_p2iAF_head_wrapped ;
  assign pciw_p2iAF_head_wrapped_EN =
	     WILL_FIRE_RL_pciw_p2iAF_deq_update_head ||
	     pciw_p2iAF_dInReset_isInReset ;

  // register pciw_p2iAF_sInReset_isInReset
  assign pciw_p2iAF_sInReset_isInReset_D_IN = 1'd0 ;
  assign pciw_p2iAF_sInReset_isInReset_EN = pciw_p2iAF_sInReset_isInReset ;

  // register pciw_p2iAF_tail_wrapped
  assign pciw_p2iAF_tail_wrapped_D_IN =
	     WILL_FIRE_RL_pciw_p2iAF_enq_update_tail &&
	     !pciw_p2iAF_tail_wrapped ;
  assign pciw_p2iAF_tail_wrapped_EN =
	     WILL_FIRE_RL_pciw_p2iAF_enq_update_tail ||
	     pciw_p2iAF_sInReset_isInReset ;

  // register pciw_p2iS
  assign pciw_p2iS_D_IN =
	     MUX_pciw_p2iS_write_1__SEL_1 ?
	       MUX_pciw_p2iS_write_1__VAL_1 :
	       MUX_pciw_p2iS_write_1__VAL_2 ;
  assign pciw_p2iS_EN = pciw_p2iAF_enq_pw_whas ;

  // register pciw_pcie_irq_rInterruptDi
  assign pciw_pcie_irq_rInterruptDi_D_IN = pciw_pcie_irq_fifoAssert_dD_OUT ;
  assign pciw_pcie_irq_rInterruptDi_EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rInterruptN
  assign pciw_pcie_irq_rInterruptN_D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;
  assign pciw_pcie_irq_rInterruptN_EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;

  // register pciw_pcie_irq_rInterrupting
  assign pciw_pcie_irq_rInterrupting_D_IN =
	     !WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ;
  assign pciw_pcie_irq_rInterrupting_EN =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt_done ||
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // register pciw_pcie_irq_rMMEnabled
  assign pciw_pcie_irq_rMMEnabled_D_IN =
	     pciw_pci0_pcie_ep_cfg_interrupt_mmenable ;
  assign pciw_pcie_irq_rMMEnabled_EN = 1'd1 ;

  // register pciw_pcie_irq_rMSIEnabled
  assign pciw_pcie_irq_rMSIEnabled_D_IN =
	     pciw_pci0_pcie_ep_cfg_interrupt_msienable ;
  assign pciw_pcie_irq_rMSIEnabled_EN = 1'd1 ;

  // submodule cap0
  assign cap0_wciS0_MAddr = ctop_wci_m_3_MAddr ;
  assign cap0_wciS0_MAddrSpace = ctop_wci_m_3_MAddrSpace ;
  assign cap0_wciS0_MByteEn = ctop_wci_m_3_MByteEn ;
  assign cap0_wciS0_MCmd = ctop_wci_m_3_MCmd ;
  assign cap0_wciS0_MData = ctop_wci_m_3_MData ;
  assign cap0_wciS0_MFlag = ctop_wci_m_3_MFlag ;
  assign cap0_wsiS0_MBurstLength = gbe0_wsiM0_MBurstLength ;
  assign cap0_wsiS0_MByteEn = gbe0_wsiM0_MByteEn ;
  assign cap0_wsiS0_MCmd = gbe0_wsiM0_MCmd ;
  assign cap0_wsiS0_MData = gbe0_wsiM0_MData ;
  assign cap0_wsiS0_MReqInfo = gbe0_wsiM0_MReqInfo ;
  assign cap0_wtiS0_MCmd = 3'h0 ;
  assign cap0_wtiS0_MData = 64'h0 ;
  assign cap0_wsiS0_MReqLast = gbe0_wsiM0_MReqLast ;
  assign cap0_wsiS0_MBurstPrecise = gbe0_wsiM0_MBurstPrecise ;
  assign cap0_wsiS0_MReset_n = gbe0_wsiM0_MReset_n ;

  // submodule ctop
  assign ctop_cpServer_request_put = gbe0_cpClient_request_get ;
  assign ctop_gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign ctop_server_request_put = pciw_p2iS ;
  assign ctop_switch_x = 3'h0 ;
  assign ctop_wci_m_0_SData = fmc150_wciS0_SData ;
  assign ctop_wci_m_0_SFlag = fmc150_wciS0_SFlag ;
  assign ctop_wci_m_0_SResp = fmc150_wciS0_SResp ;
  assign ctop_wci_m_1_SData = flash0_wciS0_SData ;
  assign ctop_wci_m_1_SFlag = flash0_wciS0_SFlag ;
  assign ctop_wci_m_1_SResp = flash0_wciS0_SResp ;
  assign ctop_wci_m_2_SData = gbe0_wciS0_SData ;
  assign ctop_wci_m_2_SFlag = gbe0_wciS0_SFlag ;
  assign ctop_wci_m_2_SResp = gbe0_wciS0_SResp ;
  assign ctop_wci_m_3_SData = cap0_wciS0_SData ;
  assign ctop_wci_m_3_SFlag = cap0_wciS0_SFlag ;
  assign ctop_wci_m_3_SResp = cap0_wciS0_SResp ;
  assign ctop_wci_m_4_SData = dram0_wciS0_SData ;
  assign ctop_wci_m_4_SFlag = dram0_wciS0_SFlag ;
  assign ctop_wci_m_4_SResp = dram0_wciS0_SResp ;
  assign ctop_wmemiM0_SData = dram0_wmemiS0_SData ;
  assign ctop_wmemiM0_SResp = dram0_wmemiS0_SResp ;
  assign ctop_wsi_s_adc_MBurstLength = 12'h0 ;
  assign ctop_wsi_s_adc_MByteEn = 16'h0 ;
  assign ctop_wsi_s_adc_MCmd = 3'h0 ;
  assign ctop_wsi_s_adc_MData = 128'h0 ;
  assign ctop_wsi_s_adc_MReqInfo = 8'h0 ;
  assign ctop_EN_server_request_put =
	     pciw_p2iAF_head_wrapped != pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_dInReset_isInReset &&
	     ctop_RDY_server_request_put ;
  assign ctop_EN_server_response_get =
	     pciw_i2pAF_head_wrapped == pciw_i2pAF_tail_wrapped &&
	     !pciw_i2pAF_sInReset_isInReset &&
	     ctop_RDY_server_response_get ;
  assign ctop_EN_cpServer_request_put =
	     ctop_RDY_cpServer_request_put && gbe0_RDY_cpClient_request_get ;
  assign ctop_EN_cpServer_response_get =
	     ctop_RDY_cpServer_response_get &&
	     gbe0_RDY_cpClient_response_put ;
  assign ctop_wci_m_0_SThreadBusy = fmc150_wciS0_SThreadBusy ;
  assign ctop_wci_m_1_SThreadBusy = flash0_wciS0_SThreadBusy ;
  assign ctop_wci_m_2_SThreadBusy = gbe0_wciS0_SThreadBusy ;
  assign ctop_wci_m_3_SThreadBusy = cap0_wciS0_SThreadBusy ;
  assign ctop_wci_m_4_SThreadBusy = dram0_wciS0_SThreadBusy ;
  assign ctop_wsi_s_adc_MReqLast = 1'b0 ;
  assign ctop_wsi_s_adc_MBurstPrecise = 1'b0 ;
  assign ctop_wsi_s_adc_MReset_n = 1'b0 ;
  assign ctop_wsi_m_dac_SThreadBusy = 1'b0 ;
  assign ctop_wsi_m_dac_SReset_n = 1'b0 ;
  assign ctop_wmemiM0_SRespLast = dram0_wmemiS0_SRespLast ;
  assign ctop_wmemiM0_SCmdAccept = dram0_wmemiS0_SCmdAccept ;
  assign ctop_wmemiM0_SDataAccept = dram0_wmemiS0_SDataAccept ;

  // submodule dram0
  assign dram0_wciS0_MAddr = ctop_wci_m_4_MAddr ;
  assign dram0_wciS0_MAddrSpace = ctop_wci_m_4_MAddrSpace ;
  assign dram0_wciS0_MByteEn = ctop_wci_m_4_MByteEn ;
  assign dram0_wciS0_MCmd = ctop_wci_m_4_MCmd ;
  assign dram0_wciS0_MData = ctop_wci_m_4_MData ;
  assign dram0_wciS0_MFlag = ctop_wci_m_4_MFlag ;
  assign dram0_wmemiS0_MAddr = ctop_wmemiM0_MAddr ;
  assign dram0_wmemiS0_MBurstLength = ctop_wmemiM0_MBurstLength ;
  assign dram0_wmemiS0_MCmd = ctop_wmemiM0_MCmd ;
  assign dram0_wmemiS0_MData = ctop_wmemiM0_MData ;
  assign dram0_wmemiS0_MDataByteEn = ctop_wmemiM0_MDataByteEn ;
  assign dram0_wmemiS0_MReqLast = ctop_wmemiM0_MReqLast ;
  assign dram0_wmemiS0_MDataValid = ctop_wmemiM0_MDataValid ;
  assign dram0_wmemiS0_MDataLast = ctop_wmemiM0_MDataLast ;
  assign dram0_wmemiS0_MReset_n = ctop_wmemiM0_MReset_n ;

  // submodule flash0
  assign flash0_flash_fwait_i = flash_fwait_i ;
  assign flash0_wciS0_MAddr = ctop_wci_m_1_MAddr ;
  assign flash0_wciS0_MAddrSpace = ctop_wci_m_1_MAddrSpace ;
  assign flash0_wciS0_MByteEn = ctop_wci_m_1_MByteEn ;
  assign flash0_wciS0_MCmd = ctop_wci_m_1_MCmd ;
  assign flash0_wciS0_MData = ctop_wci_m_1_MData ;
  assign flash0_wciS0_MFlag = ctop_wci_m_1_MFlag ;

  // submodule fmc150
  assign fmc150_padsCDC_sdi_arg = flpCDC_sdi_arg ;
  assign fmc150_padsDAC_sdi_arg = flpDAC_sdi_arg ;
  assign fmc150_wciS0_MAddr = ctop_wci_m_0_MAddr ;
  assign fmc150_wciS0_MAddrSpace = ctop_wci_m_0_MAddrSpace ;
  assign fmc150_wciS0_MByteEn = ctop_wci_m_0_MByteEn ;
  assign fmc150_wciS0_MCmd = ctop_wci_m_0_MCmd ;
  assign fmc150_wciS0_MData = ctop_wci_m_0_MData ;
  assign fmc150_wciS0_MFlag = ctop_wci_m_0_MFlag ;

  // submodule gbe0
  assign gbe0_cpClient_response_put = ctop_cpServer_response_get ;
  assign gbe0_gmii_col_i = gmii_col_i ;
  assign gbe0_gmii_crs_i = gmii_crs_i ;
  assign gbe0_gmii_intr_i = gmii_intr_i ;
  assign gbe0_gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gbe0_gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gbe0_gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gbe0_wciS0_MAddr = ctop_wci_m_2_MAddr ;
  assign gbe0_wciS0_MAddrSpace = ctop_wci_m_2_MAddrSpace ;
  assign gbe0_wciS0_MByteEn = ctop_wci_m_2_MByteEn ;
  assign gbe0_wciS0_MCmd = ctop_wci_m_2_MCmd ;
  assign gbe0_wciS0_MData = ctop_wci_m_2_MData ;
  assign gbe0_wciS0_MFlag = ctop_wci_m_2_MFlag ;
  assign gbe0_wsiS0_MBurstLength = 12'h0 ;
  assign gbe0_wsiS0_MByteEn = 4'h0 ;
  assign gbe0_wsiS0_MCmd = 3'h0 ;
  assign gbe0_wsiS0_MData = 32'h0 ;
  assign gbe0_wsiS0_MReqInfo = 8'h0 ;
  assign gbe0_wtiS0_req = tcGbe0_wti_m_req ;
  assign gbe0_wsiM0_SThreadBusy = cap0_wsiS0_SThreadBusy ;
  assign gbe0_wsiM0_SReset_n = cap0_wsiS0_SReset_n ;
  assign gbe0_wsiS0_MReqLast = 1'b0 ;
  assign gbe0_wsiS0_MBurstPrecise = 1'b0 ;
  assign gbe0_wsiS0_MReset_n = 1'b0 ;
  assign gbe0_EN_cpClient_request_get =
	     ctop_RDY_cpServer_request_put && gbe0_RDY_cpClient_request_get ;
  assign gbe0_EN_cpClient_response_put =
	     ctop_RDY_cpServer_response_get &&
	     gbe0_RDY_cpClient_response_put ;

  // submodule lcd_ctrl
  assign lcd_ctrl_setLine1_text = 128'h202073656C75522063696D6F74412020 ;
  assign lcd_ctrl_setLine2_text = 128'h203530366C6D203A204950436E65704F ;
  assign lcd_ctrl_EN_setLine1 = needs_init ;
  assign lcd_ctrl_EN_setLine2 = needs_init ;

  // submodule pciw_fI2P
  assign pciw_fI2P_D_IN =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ?
	       pciw_Prelude_inst_changeSpecialWires_2_rg[80:0] :
	       MUX_pciw_fI2P_enq_1__VAL_2 ;
  assign pciw_fI2P_ENQ =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect2 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_2_downconv_connect1 ;
  assign pciw_fI2P_DEQ = pciw_pci0_pwTrnTx_whas ;
  assign pciw_fI2P_CLR = 1'b0 ;

  // submodule pciw_fP2I
  assign pciw_fP2I_D_IN =
	     { !pciw_pci0_pcie_ep_trn_rsof_n,
	       !pciw_pci0_pcie_ep_trn_reof_n,
	       ~pciw_pci0_pcie_ep_trn_rbar_hit_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       ~pciw_pci0_pcie_ep_trn_rrem_n,
	       pciw_pci0_pcie_ep_trn_rd } ;
  assign pciw_fP2I_ENQ = pciw_pci0_pwTrnRx_whas ;
  assign pciw_fP2I_DEQ =
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect2 ||
	     WILL_FIRE_RL_pciw_Prelude_inst_changeSpecialWires_1_upconv_connect1 ;
  assign pciw_fP2I_CLR = 1'b0 ;

  // submodule pciw_pci0_pcie_ep
  assign pciw_pci0_pcie_ep_cfg_byte_en_n = 4'd15 ;
  assign pciw_pci0_pcie_ep_cfg_di = 32'd0 ;
  assign pciw_pci0_pcie_ep_cfg_dsn = 64'h0000000101000A35 ;
  assign pciw_pci0_pcie_ep_cfg_dwaddr = 10'd0 ;
  assign pciw_pci0_pcie_ep_cfg_err_cor_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_err_cpl_abort_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_err_cpl_timeout_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_err_cpl_unexpect_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_err_ecrc_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_err_locked_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_err_posted_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_err_tlp_cpl_header = 48'd0 ;
  assign pciw_pci0_pcie_ep_cfg_err_ur_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_interrupt_assert_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_interrupt_di = pciw_pcie_irq_rInterruptDi ;
  assign pciw_pci0_pcie_ep_cfg_interrupt_n = pciw_pcie_irq_rInterruptN ;
  assign pciw_pci0_pcie_ep_cfg_pm_wake_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_rd_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_trn_pending_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_turnoff_ok_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_cfg_wr_en_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_pci_exp_rxn = pcie_rxn_i ;
  assign pciw_pci0_pcie_ep_pci_exp_rxp = pcie_rxp_i ;
  assign pciw_pci0_pcie_ep_pl_directed_link_auton = 1'b0 ;
  assign pciw_pci0_pcie_ep_pl_directed_link_change = 2'h0 ;
  assign pciw_pci0_pcie_ep_pl_directed_link_speed = 1'b0 ;
  assign pciw_pci0_pcie_ep_pl_directed_link_width = 2'h0 ;
  assign pciw_pci0_pcie_ep_pl_upstream_prefer_deemph = 1'b0 ;
  assign pciw_pci0_pcie_ep_trn_fc_sel = 3'h0 ;
  assign pciw_pci0_pcie_ep_trn_rdst_rdy_n = !pciw_pci0_pwTrnRx_whas ;
  assign pciw_pci0_pcie_ep_trn_rnp_ok_n = 1'b0 ;
  assign pciw_pci0_pcie_ep_trn_tcfg_gnt_n = 1'd0 ;
  assign pciw_pci0_pcie_ep_trn_td =
	     pciw_pci0_pwTrnTx_whas ? pciw_fI2P_D_OUT[63:0] : 64'h0 ;
  assign pciw_pci0_pcie_ep_trn_teof_n =
	     !pciw_pci0_pwTrnTx_whas || !pciw_fI2P_D_OUT[79] ;
  assign pciw_pci0_pcie_ep_trn_terrfwd_n = 1'd1 ;
  assign pciw_pci0_pcie_ep_trn_trem_n =
	     !pciw_pci0_pwTrnTx_whas || pciw_fI2P_D_OUT[71:64] != 8'd255 ;
  assign pciw_pci0_pcie_ep_trn_tsof_n =
	     !pciw_pci0_pwTrnTx_whas || !pciw_fI2P_D_OUT[80] ;
  assign pciw_pci0_pcie_ep_trn_tsrc_dsc_n = 1'b1 ;
  assign pciw_pci0_pcie_ep_trn_tsrc_rdy_n = !pciw_pci0_pwTrnTx_whas ;
  assign pciw_pci0_pcie_ep_trn_tstr_n = 1'd1 ;

  // submodule pciw_pciDevice
  assign pciw_pciDevice_sD_IN =
	     { pciw_pci0_pcie_ep_cfg_bus_number,
	       pciw_pci0_pcie_ep_cfg_device_number,
	       pciw_pci0_pcie_ep_cfg_function_number } ;
  assign pciw_pciDevice_sEN = pciw_pciDevice_sRDY ;

  // submodule pciw_pciLinkUp
  assign pciw_pciLinkUp_sD_IN = !pciw_pci0_pcie_ep_trn_lnk_up_n ;
  assign pciw_pciLinkUp_sEN = 1'd1 ;

  // submodule pciw_pcie_irq_fifoAssert
  assign pciw_pcie_irq_fifoAssert_sD_IN = 8'h0 ;
  assign pciw_pcie_irq_fifoAssert_sENQ = 1'b0 ;
  assign pciw_pcie_irq_fifoAssert_dDEQ =
	     WILL_FIRE_RL_pciw_pcie_irq_msi_enabled_assert_interrupt ;

  // submodule tcGbe0
  assign tcGbe0_gpsTime_arg = ctop_cpNow ;
  assign tcGbe0_EN_gpsTime = tcGbe0_RDY_gpsTime ;
  assign tcGbe0_wti_m_SThreadBusy = gbe0_wtiS0_SThreadBusy ;
  assign tcGbe0_wti_m_SReset_n = gbe0_wtiS0_SReset_n ;

  // remaining internal signals
  assign pciw_p2iAF_head_wrapped_crossed__4_EQ_pciw_p2i_ETC___d123 =
	     pciw_p2iAF_head_wrapped == pciw_p2iAF_tail_wrapped &&
	     !pciw_p2iAF_sInReset_isInReset &&
	     pciw_preEdge_CLK_VAL ;
  assign val_be__h6495 = { pciw_fP2I_D_OUT[71:64], 8'd0 } ;
  assign val_data__h6496 = { pciw_fP2I_D_OUT[63:0], 64'hAAAAAAAAAAAAAAAA } ;
  assign wOut_be__h6604 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[71:64],
	       pciw_fP2I_D_OUT[71:64] } ;
  assign wOut_data__h6605 =
	     { pciw_Prelude_inst_changeSpecialWires_1_rg[63:0],
	       pciw_fP2I_D_OUT[63:0] } ;

  // handling of inlined registers

  always@(posedge pciw_pci0_pcie_ep_trn_clk)
  begin
    if (pciw_p250rst_OUT_RST == `BSV_RESET_VALUE)
      begin
        pciw_Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	    82'h0AAAAAAAAAAAAAAAAAAAA;
	pciw_i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (pciw_Prelude_inst_changeSpecialWires_1_rg_EN)
	  pciw_Prelude_inst_changeSpecialWires_1_rg <= `BSV_ASSIGNMENT_DELAY
	      pciw_Prelude_inst_changeSpecialWires_1_rg_D_IN;
	if (pciw_Prelude_inst_changeSpecialWires_2_rg_EN)
	  pciw_Prelude_inst_changeSpecialWires_2_rg <= `BSV_ASSIGNMENT_DELAY
	      pciw_Prelude_inst_changeSpecialWires_2_rg_D_IN;
	if (pciw_i2pAF_head_wrapped_EN)
	  pciw_i2pAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_i2pAF_head_wrapped_D_IN;
	if (pciw_p2iAF_tail_wrapped_EN)
	  pciw_p2iAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_p2iAF_tail_wrapped_D_IN;
	if (pciw_pcie_irq_rInterruptDi_EN)
	  pciw_pcie_irq_rInterruptDi <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptDi_D_IN;
	if (pciw_pcie_irq_rInterruptN_EN)
	  pciw_pcie_irq_rInterruptN <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterruptN_D_IN;
	if (pciw_pcie_irq_rInterrupting_EN)
	  pciw_pcie_irq_rInterrupting <= `BSV_ASSIGNMENT_DELAY
	      pciw_pcie_irq_rInterrupting_D_IN;
      end
    if (pciw_p2iS_EN) pciw_p2iS <= `BSV_ASSIGNMENT_DELAY pciw_p2iS_D_IN;
    if (pciw_pcie_irq_rMMEnabled_EN)
      pciw_pcie_irq_rMMEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMMEnabled_D_IN;
    if (pciw_pcie_irq_rMSIEnabled_EN)
      pciw_pcie_irq_rMSIEnabled <= `BSV_ASSIGNMENT_DELAY
	  pciw_pcie_irq_rMSIEnabled_D_IN;
  end

  always@(posedge pciw_pci0_pcie_ep_trn2_clk)
  begin
    if (pciw_p125rst_OUT_RST == `BSV_RESET_VALUE)
      begin
        freeCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	needs_init <= `BSV_ASSIGNMENT_DELAY 1'd1;
	pciDevice <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pciw_i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pciw_p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (freeCnt_EN) freeCnt <= `BSV_ASSIGNMENT_DELAY freeCnt_D_IN;
	if (needs_init_EN)
	  needs_init <= `BSV_ASSIGNMENT_DELAY needs_init_D_IN;
	if (pciDevice_EN) pciDevice <= `BSV_ASSIGNMENT_DELAY pciDevice_D_IN;
	if (pciw_i2pAF_tail_wrapped_EN)
	  pciw_i2pAF_tail_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_i2pAF_tail_wrapped_D_IN;
	if (pciw_p2iAF_head_wrapped_EN)
	  pciw_p2iAF_head_wrapped <= `BSV_ASSIGNMENT_DELAY
	      pciw_p2iAF_head_wrapped_D_IN;
      end
    if (pciw_i2pS_EN) pciw_i2pS <= `BSV_ASSIGNMENT_DELAY pciw_i2pS_D_IN;
  end

  always@(posedge pciw_pci0_pcie_ep_trn_clk or
	  `BSV_RESET_EDGE pciw_i2pAF_dCombinedReset_RST_OUT)
  if (pciw_i2pAF_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      pciw_i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_i2pAF_dInReset_isInReset_EN)
	pciw_i2pAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_i2pAF_dInReset_isInReset_D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep_trn_clk or
	  `BSV_RESET_EDGE pciw_p2iAF_sCombinedReset_RST_OUT)
  if (pciw_p2iAF_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      pciw_p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_p2iAF_sInReset_isInReset_EN)
	pciw_p2iAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_p2iAF_sInReset_isInReset_D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep_trn2_clk or
	  `BSV_RESET_EDGE pciw_i2pAF_sCombinedReset_RST_OUT)
  if (pciw_i2pAF_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      pciw_i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_i2pAF_sInReset_isInReset_EN)
	pciw_i2pAF_sInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_i2pAF_sInReset_isInReset_D_IN;
    end

  always@(posedge pciw_pci0_pcie_ep_trn2_clk or
	  `BSV_RESET_EDGE pciw_p2iAF_dCombinedReset_RST_OUT)
  if (pciw_p2iAF_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      pciw_p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (pciw_p2iAF_dInReset_isInReset_EN)
	pciw_p2iAF_dInReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    pciw_p2iAF_dInReset_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    freeCnt = 32'hAAAAAAAA;
    needs_init = 1'h0;
    pciDevice = 16'hAAAA;
    pciw_Prelude_inst_changeSpecialWires_1_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_Prelude_inst_changeSpecialWires_2_rg = 82'h2AAAAAAAAAAAAAAAAAAAA;
    pciw_i2pAF_dInReset_isInReset = 1'h0;
    pciw_i2pAF_head_wrapped = 1'h0;
    pciw_i2pAF_sInReset_isInReset = 1'h0;
    pciw_i2pAF_tail_wrapped = 1'h0;
    pciw_i2pS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pciw_p2iAF_dInReset_isInReset = 1'h0;
    pciw_p2iAF_head_wrapped = 1'h0;
    pciw_p2iAF_sInReset_isInReset = 1'h0;
    pciw_p2iAF_tail_wrapped = 1'h0;
    pciw_p2iS = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pciw_pcie_irq_rInterruptDi = 8'hAA;
    pciw_pcie_irq_rInterruptN = 1'h0;
    pciw_pcie_irq_rInterrupting = 1'h0;
    pciw_pcie_irq_rMMEnabled = 3'h2;
    pciw_pcie_irq_rMSIEnabled = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop_ml605

