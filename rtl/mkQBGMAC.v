//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sun Sep  2 12:22:20 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// rx_get                         O    40
// RDY_rx_get                     O     1 reg
// RDY_tx_put                     O     1 reg
// RDY_rxOperate                  O     1 const
// RDY_txOperate                  O     1 const
// rxOverFlow                     O     1 const
// RDY_rxOverFlow                 O     1 const
// txUnderFlow                    O     1 const
// RDY_txUnderFlow                O     1 const
// phyInterrupt                   O     1 const
// RDY_phyInterrupt               O     1 const
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// CLK_rxClk                      I     1 clock
// CLK_txClk                      I     1 clock
// RST_N_gmRst                    I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// tx_put                         I    40
// EN_tx_put                      I     1
// EN_rxOperate                   I     1 unused
// EN_txOperate                   I     1 unused
// EN_rx_get                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkQBGMAC(CLK_rxClk,
		CLK_txClk,
		RST_N_gmRst,
		CLK,
		RST_N,

		gmii_rx_rxd_i,

		gmii_rx_rx_dv_i,

		gmii_rx_rx_er_i,

		gmii_tx_txd,

		gmii_tx_tx_en,

		gmii_tx_tx_er,

		gmii_col_i,

		gmii_crs_i,

		gmii_intr_i,

		gmii_led,

		EN_rx_get,
		rx_get,
		RDY_rx_get,

		tx_put,
		EN_tx_put,
		RDY_tx_put,

		EN_rxOperate,
		RDY_rxOperate,

		EN_txOperate,
		RDY_txOperate,

		rxOverFlow,
		RDY_rxOverFlow,

		txUnderFlow,
		RDY_txUnderFlow,

		phyInterrupt,
		RDY_phyInterrupt,

		CLK_gmii_tx_tx_clk,
		CLK_GATE_gmii_tx_tx_clk,

		CLK_rxclkBnd,
		CLK_GATE_rxclkBnd);
  input  CLK_rxClk;
  input  CLK_txClk;
  input  RST_N_gmRst;
  input  CLK;
  input  RST_N;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // actionvalue method rx_get
  input  EN_rx_get;
  output [39 : 0] rx_get;
  output RDY_rx_get;

  // action method tx_put
  input  [39 : 0] tx_put;
  input  EN_tx_put;
  output RDY_tx_put;

  // action method rxOperate
  input  EN_rxOperate;
  output RDY_rxOperate;

  // action method txOperate
  input  EN_txOperate;
  output RDY_txOperate;

  // value method rxOverFlow
  output rxOverFlow;
  output RDY_rxOverFlow;

  // value method txUnderFlow
  output txUnderFlow;
  output RDY_txUnderFlow;

  // value method phyInterrupt
  output phyInterrupt;
  output RDY_phyInterrupt;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // signals for module outputs
  wire [39 : 0] rx_get;
  wire [7 : 0] gmii_tx_txd;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       RDY_phyInterrupt,
       RDY_rxOperate,
       RDY_rxOverFlow,
       RDY_rx_get,
       RDY_txOperate,
       RDY_txUnderFlow,
       RDY_tx_put,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       phyInterrupt,
       rxOverFlow,
       txUnderFlow;

  // register rxfun_ptr
  reg [1 : 0] rxfun_ptr;
  wire [1 : 0] rxfun_ptr$D_IN;
  wire rxfun_ptr$EN;

  // register rxfun_sr
  reg [29 : 0] rxfun_sr;
  wire [29 : 0] rxfun_sr$D_IN;
  wire rxfun_sr$EN;

  // register txfun_ptr
  reg [1 : 0] txfun_ptr;
  wire [1 : 0] txfun_ptr$D_IN;
  wire txfun_ptr$EN;

  // ports of submodule gmac
  wire [9 : 0] gmac$rx_get, gmac$tx_put;
  wire [7 : 0] gmac$gmii_rx_rxd_i, gmac$gmii_tx_txd;
  wire gmac$CLK_gmii_tx_tx_clk,
       gmac$CLK_rxclkBnd,
       gmac$EN_rxOperate,
       gmac$EN_rx_get,
       gmac$EN_txOperate,
       gmac$EN_tx_put,
       gmac$RDY_rx_get,
       gmac$RDY_tx_put,
       gmac$gmii_col_i,
       gmac$gmii_crs_i,
       gmac$gmii_intr_i,
       gmac$gmii_led,
       gmac$gmii_rx_rx_dv_i,
       gmac$gmii_rx_rx_er_i,
       gmac$gmii_tx_tx_en,
       gmac$gmii_tx_tx_er;

  // ports of submodule ovfBit
  wire ovfBit$sD_IN, ovfBit$sEN;

  // ports of submodule rxF
  wire [39 : 0] rxF$sD_IN;
  wire rxF$dDEQ, rxF$sENQ;

  // ports of submodule rxfun_inF
  wire [9 : 0] rxfun_inF$D_IN, rxfun_inF$D_OUT;
  wire rxfun_inF$CLR,
       rxfun_inF$DEQ,
       rxfun_inF$EMPTY_N,
       rxfun_inF$ENQ,
       rxfun_inF$FULL_N;

  // ports of submodule rxfun_outF
  wire [39 : 0] rxfun_outF$D_IN, rxfun_outF$D_OUT;
  wire rxfun_outF$CLR,
       rxfun_outF$DEQ,
       rxfun_outF$EMPTY_N,
       rxfun_outF$ENQ,
       rxfun_outF$FULL_N;

  // ports of submodule txF
  wire [39 : 0] txF$sD_IN;
  wire txF$dDEQ, txF$sENQ;

  // ports of submodule txfun_inF
  wire [39 : 0] txfun_inF$D_IN, txfun_inF$D_OUT;
  wire txfun_inF$CLR,
       txfun_inF$DEQ,
       txfun_inF$EMPTY_N,
       txfun_inF$ENQ,
       txfun_inF$FULL_N;

  // ports of submodule txfun_outF
  wire [9 : 0] txfun_outF$D_IN, txfun_outF$D_OUT;
  wire txfun_outF$CLR,
       txfun_outF$DEQ,
       txfun_outF$EMPTY_N,
       txfun_outF$ENQ,
       txfun_outF$FULL_N;

  // ports of submodule unfBit
  wire unfBit$sD_IN, unfBit$sEN;

  // rule scheduling signals
  wire WILL_FIRE_RL_rxfun_unfunnel;

  // remaining internal signals
  reg [7 : 0] IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240;
  reg [1 : 0] CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q11,
	      CASE_rxfun_inFD_OUT_BITS_9_TO_8_3_0_rxfun_inF_ETC__q7,
	      CASE_rxfun_outFD_OUT_BITS_19_TO_18_3_0_rxfun__ETC__q3,
	      CASE_rxfun_outFD_OUT_BITS_29_TO_28_3_0_rxfun__ETC__q2,
	      CASE_rxfun_outFD_OUT_BITS_39_TO_38_3_0_rxfun__ETC__q1,
	      CASE_rxfun_outFD_OUT_BITS_9_TO_8_3_0_rxfun_ou_ETC__q4,
	      CASE_rxfun_sr_BITS_19_TO_18_3_0_rxfun_sr_BITS__ETC__q6,
	      CASE_rxfun_sr_BITS_29_TO_28_3_0_rxfun_sr_BITS__ETC__q12,
	      CASE_rxfun_sr_BITS_9_TO_8_3_0_rxfun_sr_BITS_9__ETC__q5,
	      CASE_tx_put_BITS_19_TO_18_3_0_tx_put_BITS_19_T_ETC__q15,
	      CASE_tx_put_BITS_29_TO_28_3_0_tx_put_BITS_29_T_ETC__q14,
	      CASE_tx_put_BITS_39_TO_38_3_0_tx_put_BITS_39_T_ETC__q13,
	      CASE_tx_put_BITS_9_TO_8_3_0_tx_put_BITS_9_TO_8_ETC__q16,
	      CASE_txfun_outFD_OUT_BITS_9_TO_8_3_0_txfun_ou_ETC__q10;
  reg CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q17,
      CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q8,
      CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q9,
      IF_txfun_ptr_4_EQ_0_5_THEN_NOT_txfun_inF_first_ETC___d297;
  wire [9 : 0] IF_IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__ETC___d120,
	       IF_IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__ETC___d121,
	       IF_rxfun_inF_first_BITS_9_TO_8_EQ_0_OR_rxfun_i_ETC___d241,
	       IF_rxfun_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_rxfun__ETC___d243,
	       IF_rxfun_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_rxfun_sr_ETC___d242;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = gmac$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac$gmii_tx_tx_er ;

  // value method gmii_led
  assign gmii_led = gmac$gmii_led ;

  // actionvalue method rx_get
  assign rx_get =
	     { CASE_rxfun_outFD_OUT_BITS_39_TO_38_3_0_rxfun__ETC__q1,
	       rxfun_outF$D_OUT[37:30],
	       CASE_rxfun_outFD_OUT_BITS_29_TO_28_3_0_rxfun__ETC__q2,
	       rxfun_outF$D_OUT[27:20],
	       CASE_rxfun_outFD_OUT_BITS_19_TO_18_3_0_rxfun__ETC__q3,
	       rxfun_outF$D_OUT[17:10],
	       CASE_rxfun_outFD_OUT_BITS_9_TO_8_3_0_rxfun_ou_ETC__q4,
	       rxfun_outF$D_OUT[7:0] } ;
  assign RDY_rx_get = rxfun_outF$EMPTY_N ;

  // action method tx_put
  assign RDY_tx_put = txfun_inF$FULL_N ;

  // action method rxOperate
  assign RDY_rxOperate = 1'd1 ;

  // action method txOperate
  assign RDY_txOperate = 1'd1 ;

  // value method rxOverFlow
  assign rxOverFlow = 1'h0 ;
  assign RDY_rxOverFlow = 1'd1 ;

  // value method txUnderFlow
  assign txUnderFlow = 1'h0 ;
  assign RDY_txUnderFlow = 1'd1 ;

  // value method phyInterrupt
  assign phyInterrupt = 1'h0 ;
  assign RDY_phyInterrupt = 1'd1 ;

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(CLK_rxClk),
	      .CLK_txClk(CLK_txClk),
	      .CLK(CLK_txClk),
	      .RST_N(RST_N_gmRst),
	      .gmii_col_i(gmac$gmii_col_i),
	      .gmii_crs_i(gmac$gmii_crs_i),
	      .gmii_intr_i(gmac$gmii_intr_i),
	      .gmii_rx_rx_dv_i(gmac$gmii_rx_rx_dv_i),
	      .gmii_rx_rx_er_i(gmac$gmii_rx_rx_er_i),
	      .gmii_rx_rxd_i(gmac$gmii_rx_rxd_i),
	      .tx_put(gmac$tx_put),
	      .EN_rx_get(gmac$EN_rx_get),
	      .EN_tx_put(gmac$EN_tx_put),
	      .EN_rxOperate(gmac$EN_rxOperate),
	      .EN_txOperate(gmac$EN_txOperate),
	      .gmii_tx_txd(gmac$gmii_tx_txd),
	      .gmii_tx_tx_en(gmac$gmii_tx_tx_en),
	      .gmii_tx_tx_er(gmac$gmii_tx_tx_er),
	      .gmii_led(gmac$gmii_led),
	      .rx_get(gmac$rx_get),
	      .RDY_rx_get(gmac$RDY_rx_get),
	      .RDY_tx_put(gmac$RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(),
	      .RDY_txUnderFlow(),
	      .phyInterrupt(),
	      .RDY_phyInterrupt(),
	      .CLK_gmii_tx_tx_clk(gmac$CLK_gmii_tx_tx_clk),
	      .CLK_GATE_gmii_tx_tx_clk(),
	      .CLK_rxclkBnd(gmac$CLK_rxclkBnd),
	      .CLK_GATE_rxclkBnd());

  // submodule ovfBit
  SyncBit #(.init(1'd0)) ovfBit(.sCLK(CLK_txClk),
				.dCLK(CLK),
				.sRST_N(RST_N_gmRst),
				.sD_IN(ovfBit$sD_IN),
				.sEN(ovfBit$sEN),
				.dD_OUT());

  // submodule rxF
  SyncFIFO #(.dataWidth(32'd40),
	     .depth(32'd8),
	     .indxWidth(32'd3)) rxF(.sCLK(CLK_txClk),
				    .dCLK(CLK),
				    .sRST_N(RST_N_gmRst),
				    .sD_IN(rxF$sD_IN),
				    .sENQ(rxF$sENQ),
				    .dDEQ(rxF$dDEQ),
				    .dD_OUT(),
				    .sFULL_N(),
				    .dEMPTY_N());

  // submodule rxfun_inF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) rxfun_inF(.RST_N(RST_N_gmRst),
						     .CLK(CLK_txClk),
						     .D_IN(rxfun_inF$D_IN),
						     .ENQ(rxfun_inF$ENQ),
						     .DEQ(rxfun_inF$DEQ),
						     .CLR(rxfun_inF$CLR),
						     .D_OUT(rxfun_inF$D_OUT),
						     .FULL_N(rxfun_inF$FULL_N),
						     .EMPTY_N(rxfun_inF$EMPTY_N));

  // submodule rxfun_outF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) rxfun_outF(.RST_N(RST_N_gmRst),
						      .CLK(CLK_txClk),
						      .D_IN(rxfun_outF$D_IN),
						      .ENQ(rxfun_outF$ENQ),
						      .DEQ(rxfun_outF$DEQ),
						      .CLR(rxfun_outF$CLR),
						      .D_OUT(rxfun_outF$D_OUT),
						      .FULL_N(rxfun_outF$FULL_N),
						      .EMPTY_N(rxfun_outF$EMPTY_N));

  // submodule txF
  SyncFIFO #(.dataWidth(32'd40),
	     .depth(32'd8),
	     .indxWidth(32'd3)) txF(.sCLK(CLK),
				    .dCLK(CLK_txClk),
				    .sRST_N(RST_N),
				    .sD_IN(txF$sD_IN),
				    .sENQ(txF$sENQ),
				    .dDEQ(txF$dDEQ),
				    .dD_OUT(),
				    .sFULL_N(),
				    .dEMPTY_N());

  // submodule txfun_inF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) txfun_inF(.RST_N(RST_N_gmRst),
						     .CLK(CLK_txClk),
						     .D_IN(txfun_inF$D_IN),
						     .ENQ(txfun_inF$ENQ),
						     .DEQ(txfun_inF$DEQ),
						     .CLR(txfun_inF$CLR),
						     .D_OUT(txfun_inF$D_OUT),
						     .FULL_N(txfun_inF$FULL_N),
						     .EMPTY_N(txfun_inF$EMPTY_N));

  // submodule txfun_outF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) txfun_outF(.RST_N(RST_N_gmRst),
						      .CLK(CLK_txClk),
						      .D_IN(txfun_outF$D_IN),
						      .ENQ(txfun_outF$ENQ),
						      .DEQ(txfun_outF$DEQ),
						      .CLR(txfun_outF$CLR),
						      .D_OUT(txfun_outF$D_OUT),
						      .FULL_N(txfun_outF$FULL_N),
						      .EMPTY_N(txfun_outF$EMPTY_N));

  // submodule unfBit
  SyncBit #(.init(1'd0)) unfBit(.sCLK(CLK_txClk),
				.dCLK(CLK),
				.sRST_N(RST_N_gmRst),
				.sD_IN(unfBit$sD_IN),
				.sEN(unfBit$sEN),
				.dD_OUT());

  // rule RL_rxfun_unfunnel
  assign WILL_FIRE_RL_rxfun_unfunnel =
	     rxfun_inF$EMPTY_N &&
	     (rxfun_ptr != 2'd3 && rxfun_inF$D_OUT[9:8] == 2'd0 ||
	      rxfun_outF$FULL_N) ;

  // register rxfun_ptr
  assign rxfun_ptr$D_IN =
	     (rxfun_inF$D_OUT[9:8] == 2'd0) ? rxfun_ptr + 2'd1 : 2'd0 ;
  assign rxfun_ptr$EN = WILL_FIRE_RL_rxfun_unfunnel ;

  // register rxfun_sr
  assign rxfun_sr$D_IN =
	     { IF_rxfun_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_rxfun__ETC___d243,
	       IF_rxfun_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_rxfun_sr_ETC___d242,
	       IF_rxfun_inF_first_BITS_9_TO_8_EQ_0_OR_rxfun_i_ETC___d241 } ;
  assign rxfun_sr$EN = WILL_FIRE_RL_rxfun_unfunnel ;

  // register txfun_ptr
  assign txfun_ptr$D_IN =
	     IF_txfun_ptr_4_EQ_0_5_THEN_NOT_txfun_inF_first_ETC___d297 ?
	       2'd0 :
	       txfun_ptr + 2'd1 ;
  assign txfun_ptr$EN = txfun_inF$EMPTY_N && txfun_outF$FULL_N ;

  // submodule gmac
  assign gmac$gmii_col_i = gmii_col_i ;
  assign gmac$gmii_crs_i = gmii_crs_i ;
  assign gmac$gmii_intr_i = gmii_intr_i ;
  assign gmac$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac$tx_put =
	     { CASE_txfun_outFD_OUT_BITS_9_TO_8_3_0_txfun_ou_ETC__q10,
	       txfun_outF$D_OUT[7:0] } ;
  assign gmac$EN_rx_get = gmac$RDY_rx_get && rxfun_inF$FULL_N ;
  assign gmac$EN_tx_put = gmac$RDY_tx_put && txfun_outF$EMPTY_N ;
  assign gmac$EN_rxOperate = 1'b0 ;
  assign gmac$EN_txOperate = 1'b0 ;

  // submodule ovfBit
  assign ovfBit$sD_IN = 1'b0 ;
  assign ovfBit$sEN = 1'b0 ;

  // submodule rxF
  assign rxF$sD_IN = 40'h0 ;
  assign rxF$sENQ = 1'b0 ;
  assign rxF$dDEQ = 1'b0 ;

  // submodule rxfun_inF
  assign rxfun_inF$D_IN =
	     { CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q11,
	       gmac$rx_get[7:0] } ;
  assign rxfun_inF$ENQ = gmac$RDY_rx_get && rxfun_inF$FULL_N ;
  assign rxfun_inF$DEQ = WILL_FIRE_RL_rxfun_unfunnel ;
  assign rxfun_inF$CLR = 1'b0 ;

  // submodule rxfun_outF
  assign rxfun_outF$D_IN =
	     { CASE_rxfun_sr_BITS_29_TO_28_3_0_rxfun_sr_BITS__ETC__q12,
	       rxfun_sr[27:20],
	       IF_rxfun_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_rxfun__ETC___d243,
	       IF_rxfun_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_rxfun_sr_ETC___d242,
	       IF_rxfun_inF_first_BITS_9_TO_8_EQ_0_OR_rxfun_i_ETC___d241 } ;
  assign rxfun_outF$ENQ =
	     WILL_FIRE_RL_rxfun_unfunnel &&
	     (rxfun_ptr == 2'd3 || rxfun_inF$D_OUT[9:8] != 2'd0) ;
  assign rxfun_outF$DEQ = EN_rx_get ;
  assign rxfun_outF$CLR = 1'b0 ;

  // submodule txF
  assign txF$sD_IN = 40'h0 ;
  assign txF$sENQ = 1'b0 ;
  assign txF$dDEQ = 1'b0 ;

  // submodule txfun_inF
  assign txfun_inF$D_IN =
	     { CASE_tx_put_BITS_39_TO_38_3_0_tx_put_BITS_39_T_ETC__q13,
	       tx_put[37:30],
	       CASE_tx_put_BITS_29_TO_28_3_0_tx_put_BITS_29_T_ETC__q14,
	       tx_put[27:20],
	       CASE_tx_put_BITS_19_TO_18_3_0_tx_put_BITS_19_T_ETC__q15,
	       tx_put[17:10],
	       CASE_tx_put_BITS_9_TO_8_3_0_tx_put_BITS_9_TO_8_ETC__q16,
	       tx_put[7:0] } ;
  assign txfun_inF$ENQ = EN_tx_put ;
  assign txfun_inF$DEQ =
	     txfun_inF$EMPTY_N && txfun_outF$FULL_N &&
	     (txfun_ptr == 2'd3 ||
	      IF_txfun_ptr_4_EQ_0_5_THEN_NOT_txfun_inF_first_ETC___d297) ;
  assign txfun_inF$CLR = 1'b0 ;

  // submodule txfun_outF
  assign txfun_outF$D_IN =
	     CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q17 ?
	       { 2'd0,
		 IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240 } :
	       IF_IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__ETC___d121 ;
  assign txfun_outF$ENQ = txfun_inF$EMPTY_N && txfun_outF$FULL_N ;
  assign txfun_outF$DEQ = gmac$RDY_tx_put && txfun_outF$EMPTY_N ;
  assign txfun_outF$CLR = 1'b0 ;

  // submodule unfBit
  assign unfBit$sD_IN = 1'b0 ;
  assign unfBit$sEN = 1'b0 ;

  // remaining internal signals
  assign IF_IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__ETC___d120 =
	     { CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q8 ?
		 2'd2 :
		 2'd3,
	       IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240 } ;
  assign IF_IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__ETC___d121 =
	     CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q9 ?
	       { 2'd1,
		 IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240 } :
	       IF_IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__ETC___d120 ;
  assign IF_rxfun_inF_first_BITS_9_TO_8_EQ_0_OR_rxfun_i_ETC___d241 =
	     { CASE_rxfun_inFD_OUT_BITS_9_TO_8_3_0_rxfun_inF_ETC__q7,
	       rxfun_inF$D_OUT[7:0] } ;
  assign IF_rxfun_sr_2_BITS_19_TO_18_3_EQ_0_4_OR_rxfun__ETC___d243 =
	     { CASE_rxfun_sr_BITS_19_TO_18_3_0_rxfun_sr_BITS__ETC__q6,
	       rxfun_sr[17:10] } ;
  assign IF_rxfun_sr_2_BITS_9_TO_8_4_EQ_0_5_OR_rxfun_sr_ETC___d242 =
	     { CASE_rxfun_sr_BITS_9_TO_8_3_0_rxfun_sr_BITS_9__ETC__q5,
	       rxfun_sr[7:0] } ;
  always@(rxfun_outF$D_OUT)
  begin
    case (rxfun_outF$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_39_TO_38_3_0_rxfun__ETC__q1 =
	      rxfun_outF$D_OUT[39:38];
      2'd3: CASE_rxfun_outFD_OUT_BITS_39_TO_38_3_0_rxfun__ETC__q1 = 2'd3;
    endcase
  end
  always@(rxfun_outF$D_OUT)
  begin
    case (rxfun_outF$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_29_TO_28_3_0_rxfun__ETC__q2 =
	      rxfun_outF$D_OUT[29:28];
      2'd3: CASE_rxfun_outFD_OUT_BITS_29_TO_28_3_0_rxfun__ETC__q2 = 2'd3;
    endcase
  end
  always@(rxfun_outF$D_OUT)
  begin
    case (rxfun_outF$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_19_TO_18_3_0_rxfun__ETC__q3 =
	      rxfun_outF$D_OUT[19:18];
      2'd3: CASE_rxfun_outFD_OUT_BITS_19_TO_18_3_0_rxfun__ETC__q3 = 2'd3;
    endcase
  end
  always@(rxfun_outF$D_OUT)
  begin
    case (rxfun_outF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_9_TO_8_3_0_rxfun_ou_ETC__q4 =
	      rxfun_outF$D_OUT[9:8];
      2'd3: CASE_rxfun_outFD_OUT_BITS_9_TO_8_3_0_rxfun_ou_ETC__q4 = 2'd3;
    endcase
  end
  always@(rxfun_sr)
  begin
    case (rxfun_sr[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_sr_BITS_9_TO_8_3_0_rxfun_sr_BITS_9__ETC__q5 =
	      rxfun_sr[9:8];
      2'd3: CASE_rxfun_sr_BITS_9_TO_8_3_0_rxfun_sr_BITS_9__ETC__q5 = 2'd3;
    endcase
  end
  always@(rxfun_sr)
  begin
    case (rxfun_sr[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_sr_BITS_19_TO_18_3_0_rxfun_sr_BITS__ETC__q6 =
	      rxfun_sr[19:18];
      2'd3: CASE_rxfun_sr_BITS_19_TO_18_3_0_rxfun_sr_BITS__ETC__q6 = 2'd3;
    endcase
  end
  always@(rxfun_inF$D_OUT)
  begin
    case (rxfun_inF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_inFD_OUT_BITS_9_TO_8_3_0_rxfun_inF_ETC__q7 =
	      rxfun_inF$D_OUT[9:8];
      2'd3: CASE_rxfun_inFD_OUT_BITS_9_TO_8_3_0_rxfun_inF_ETC__q7 = 2'd3;
    endcase
  end
  always@(txfun_ptr or txfun_inF$D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240 =
	      txfun_inF$D_OUT[7:0];
      2'd1:
	  IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240 =
	      txfun_inF$D_OUT[17:10];
      2'd2:
	  IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240 =
	      txfun_inF$D_OUT[27:20];
      2'd3:
	  IF_txfun_ptr_4_EQ_0_5_THEN_txfun_inF_first__6__ETC___d240 =
	      txfun_inF$D_OUT[37:30];
    endcase
  end
  always@(txfun_ptr or txfun_inF$D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q8 =
	      txfun_inF$D_OUT[9:8] == 2'd2;
      2'd1:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q8 =
	      txfun_inF$D_OUT[19:18] == 2'd2;
      2'd2:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q8 =
	      txfun_inF$D_OUT[29:28] == 2'd2;
      2'd3:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q8 =
	      txfun_ptr == 2'd3 && txfun_inF$D_OUT[39:38] == 2'd2;
    endcase
  end
  always@(txfun_ptr or txfun_inF$D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q9 =
	      txfun_inF$D_OUT[9:8] == 2'd1;
      2'd1:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q9 =
	      txfun_inF$D_OUT[19:18] == 2'd1;
      2'd2:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q9 =
	      txfun_inF$D_OUT[29:28] == 2'd1;
      2'd3:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q9 =
	      txfun_ptr == 2'd3 && txfun_inF$D_OUT[39:38] == 2'd1;
    endcase
  end
  always@(txfun_ptr or txfun_inF$D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  IF_txfun_ptr_4_EQ_0_5_THEN_NOT_txfun_inF_first_ETC___d297 =
	      txfun_inF$D_OUT[9:8] != 2'd0;
      2'd1:
	  IF_txfun_ptr_4_EQ_0_5_THEN_NOT_txfun_inF_first_ETC___d297 =
	      txfun_inF$D_OUT[19:18] != 2'd0;
      2'd2:
	  IF_txfun_ptr_4_EQ_0_5_THEN_NOT_txfun_inF_first_ETC___d297 =
	      txfun_inF$D_OUT[29:28] != 2'd0;
      2'd3:
	  IF_txfun_ptr_4_EQ_0_5_THEN_NOT_txfun_inF_first_ETC___d297 =
	      txfun_ptr != 2'd3 || txfun_inF$D_OUT[39:38] != 2'd0;
    endcase
  end
  always@(txfun_outF$D_OUT)
  begin
    case (txfun_outF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_txfun_outFD_OUT_BITS_9_TO_8_3_0_txfun_ou_ETC__q10 =
	      txfun_outF$D_OUT[9:8];
      2'd3: CASE_txfun_outFD_OUT_BITS_9_TO_8_3_0_txfun_ou_ETC__q10 = 2'd3;
    endcase
  end
  always@(gmac$rx_get)
  begin
    case (gmac$rx_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q11 =
	      gmac$rx_get[9:8];
      2'd3: CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q11 = 2'd3;
    endcase
  end
  always@(rxfun_sr)
  begin
    case (rxfun_sr[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_sr_BITS_29_TO_28_3_0_rxfun_sr_BITS__ETC__q12 =
	      rxfun_sr[29:28];
      2'd3: CASE_rxfun_sr_BITS_29_TO_28_3_0_rxfun_sr_BITS__ETC__q12 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_39_TO_38_3_0_tx_put_BITS_39_T_ETC__q13 =
	      tx_put[39:38];
      2'd3: CASE_tx_put_BITS_39_TO_38_3_0_tx_put_BITS_39_T_ETC__q13 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_29_TO_28_3_0_tx_put_BITS_29_T_ETC__q14 =
	      tx_put[29:28];
      2'd3: CASE_tx_put_BITS_29_TO_28_3_0_tx_put_BITS_29_T_ETC__q14 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_19_TO_18_3_0_tx_put_BITS_19_T_ETC__q15 =
	      tx_put[19:18];
      2'd3: CASE_tx_put_BITS_19_TO_18_3_0_tx_put_BITS_19_T_ETC__q15 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_9_TO_8_3_0_tx_put_BITS_9_TO_8_ETC__q16 =
	      tx_put[9:8];
      2'd3: CASE_tx_put_BITS_9_TO_8_3_0_tx_put_BITS_9_TO_8_ETC__q16 = 2'd3;
    endcase
  end
  always@(txfun_ptr or txfun_inF$D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q17 =
	      txfun_inF$D_OUT[9:8] == 2'd0;
      2'd1:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q17 =
	      txfun_inF$D_OUT[19:18] == 2'd0;
      2'd2:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q17 =
	      txfun_inF$D_OUT[29:28] == 2'd0;
      2'd3:
	  CASE_txfun_ptr_txfun_ptr_EQ_3_AND_txfun_inFD__ETC__q17 =
	      txfun_ptr == 2'd3 && txfun_inF$D_OUT[39:38] == 2'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK_txClk)
  begin
    if (!RST_N_gmRst)
      begin
        rxfun_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
	txfun_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (rxfun_ptr$EN) rxfun_ptr <= `BSV_ASSIGNMENT_DELAY rxfun_ptr$D_IN;
	if (txfun_ptr$EN) txfun_ptr <= `BSV_ASSIGNMENT_DELAY txfun_ptr$D_IN;
      end
    if (rxfun_sr$EN) rxfun_sr <= `BSV_ASSIGNMENT_DELAY rxfun_sr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rxfun_ptr = 2'h2;
    rxfun_sr = 30'h2AAAAAAA;
    txfun_ptr = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkQBGMAC

