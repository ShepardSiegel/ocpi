//
// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
//
// On Wed Nov  3 12:23:22 EDT 2010
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1
// server_response_get            O   153
// RDY_server_response_get        O     1
// led                            O     2 reg
// wci_m_0_MCmd                   O     3
// wci_m_0_MAddrSpace             O     1
// wci_m_0_MByteEn                O     4
// wci_m_0_MAddr                  O    20
// wci_m_0_MData                  O    32 reg
// wci_m_0_MFlag                  O     2 reg
// wci_m_1_MCmd                   O     3
// wci_m_1_MAddrSpace             O     1
// wci_m_1_MByteEn                O     4
// wci_m_1_MAddr                  O    20
// wci_m_1_MData                  O    32 reg
// wci_m_1_MFlag                  O     2 reg
// wci_m_2_MCmd                   O     3
// wci_m_2_MAddrSpace             O     1
// wci_m_2_MByteEn                O     4
// wci_m_2_MAddr                  O    20
// wci_m_2_MData                  O    32 reg
// wci_m_2_MFlag                  O     2 reg
// wci_m_3_MCmd                   O     3
// wci_m_3_MAddrSpace             O     1
// wci_m_3_MByteEn                O     4
// wci_m_3_MAddr                  O    20
// wci_m_3_MData                  O    32 reg
// wci_m_3_MFlag                  O     2 reg
// wci_m_4_MCmd                   O     3
// wci_m_4_MAddrSpace             O     1
// wci_m_4_MByteEn                O     4
// wci_m_4_MAddr                  O    20
// wci_m_4_MData                  O    32 reg
// wci_m_4_MFlag                  O     2 reg
// wci_m_5_MCmd                   O     3
// wci_m_5_MAddrSpace             O     1
// wci_m_5_MByteEn                O     4
// wci_m_5_MAddr                  O    20
// wci_m_5_MData                  O    32 reg
// wci_m_5_MFlag                  O     2 reg
// wci_m_6_MCmd                   O     3
// wci_m_6_MAddrSpace             O     1
// wci_m_6_MByteEn                O     4
// wci_m_6_MAddr                  O    20
// wci_m_6_MData                  O    32 reg
// wci_m_6_MFlag                  O     2 reg
// wci_m_7_MCmd                   O     3
// wci_m_7_MAddrSpace             O     1
// wci_m_7_MByteEn                O     4
// wci_m_7_MAddr                  O    20
// wci_m_7_MData                  O    32 reg
// wci_m_7_MFlag                  O     2 reg
// wci_m_8_MCmd                   O     3
// wci_m_8_MAddrSpace             O     1
// wci_m_8_MByteEn                O     4
// wci_m_8_MAddr                  O    20
// wci_m_8_MData                  O    32 reg
// wci_m_8_MFlag                  O     2 reg
// wci_m_9_MCmd                   O     3
// wci_m_9_MAddrSpace             O     1
// wci_m_9_MByteEn                O     4
// wci_m_9_MAddr                  O    20
// wci_m_9_MData                  O    32 reg
// wci_m_9_MFlag                  O     2 reg
// wci_m_10_MCmd                  O     3
// wci_m_10_MAddrSpace            O     1
// wci_m_10_MByteEn               O     4
// wci_m_10_MAddr                 O    20
// wci_m_10_MData                 O    32 reg
// wci_m_10_MFlag                 O     2 reg
// wci_m_11_MCmd                  O     3
// wci_m_11_MAddrSpace            O     1
// wci_m_11_MByteEn               O     4
// wci_m_11_MAddr                 O    20
// wci_m_11_MData                 O    32 reg
// wci_m_11_MFlag                 O     2 reg
// wci_m_12_MCmd                  O     3
// wci_m_12_MAddrSpace            O     1
// wci_m_12_MByteEn               O     4
// wci_m_12_MAddr                 O    20
// wci_m_12_MData                 O    32 reg
// wci_m_12_MFlag                 O     2 reg
// wmiS0_SResp                    O     2 reg
// wmiS0_SData                    O   256 reg
// wmiS0_SThreadBusy              O     1
// wmiS0_SDataThreadBusy          O     1
// wmiS0_SRespLast                O     1 const
// wmiS0_SFlag                    O    32 reg
// wmiS0_SReset_n                 O     1
// wmiS1_SResp                    O     2 reg
// wmiS1_SData                    O   256 reg
// wmiS1_SThreadBusy              O     1
// wmiS1_SDataThreadBusy          O     1
// wmiS1_SRespLast                O     1 const
// wmiS1_SFlag                    O    32 reg
// wmiS1_SReset_n                 O     1
// cpNow                          O    64 reg
// RDY_cpNow                      O     1 const
// gps_ppsSyncOut                 O     1
// RST_N_wci_m_0_mReset_n         O     1 reset
// RST_N_wci_m_1_mReset_n         O     1 reset
// RST_N_wci_m_2_mReset_n         O     1 reset
// RST_N_wci_m_3_mReset_n         O     1 reset
// RST_N_wci_m_4_mReset_n         O     1 reset
// RST_N_wci_m_5_mReset_n         O     1 reset
// RST_N_wci_m_6_mReset_n         O     1 reset
// RST_N_wci_m_7_mReset_n         O     1 reset
// RST_N_wci_m_8_mReset_n         O     1 reset
// RST_N_wci_m_9_mReset_n         O     1 reset
// RST_N_wci_m_10_mReset_n        O     1 reset
// RST_N_wci_m_11_mReset_n        O     1 reset
// RST_N_wci_m_12_mReset_n        O     1 reset
// pciDevice                      I    16
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rst                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I   153
// switch_x                       I     3 reg
// wci_m_0_SResp                  I     2
// wci_m_0_SData                  I    32
// wci_m_0_SFlag                  I     2 reg
// wci_m_1_SResp                  I     2
// wci_m_1_SData                  I    32
// wci_m_1_SFlag                  I     2 reg
// wci_m_2_SResp                  I     2
// wci_m_2_SData                  I    32
// wci_m_2_SFlag                  I     2 reg
// wci_m_3_SResp                  I     2
// wci_m_3_SData                  I    32
// wci_m_3_SFlag                  I     2 reg
// wci_m_4_SResp                  I     2
// wci_m_4_SData                  I    32
// wci_m_4_SFlag                  I     2 reg
// wci_m_5_SResp                  I     2
// wci_m_5_SData                  I    32
// wci_m_5_SFlag                  I     2 reg
// wci_m_6_SResp                  I     2
// wci_m_6_SData                  I    32
// wci_m_6_SFlag                  I     2 reg
// wci_m_7_SResp                  I     2
// wci_m_7_SData                  I    32
// wci_m_7_SFlag                  I     2 reg
// wci_m_8_SResp                  I     2
// wci_m_8_SData                  I    32
// wci_m_8_SFlag                  I     2 reg
// wci_m_9_SResp                  I     2
// wci_m_9_SData                  I    32
// wci_m_9_SFlag                  I     2 reg
// wci_m_10_SResp                 I     2
// wci_m_10_SData                 I    32
// wci_m_10_SFlag                 I     2 reg
// wci_m_11_SResp                 I     2
// wci_m_11_SData                 I    32
// wci_m_11_SFlag                 I     2 reg
// wci_m_12_SResp                 I     2
// wci_m_12_SData                 I    32
// wci_m_12_SFlag                 I     2 reg
// wmiS0_MCmd                     I     3
// wmiS0_MReqInfo                 I     1
// wmiS0_MAddrSpace               I     1
// wmiS0_MAddr                    I    14
// wmiS0_MBurstLength             I    12
// wmiS0_MData                    I   256
// wmiS0_MDataByteEn              I    32
// wmiS0_arg_mFlag                I    32 reg
// wmiS1_MCmd                     I     3
// wmiS1_MReqInfo                 I     1
// wmiS1_MAddrSpace               I     1
// wmiS1_MAddr                    I    14
// wmiS1_MBurstLength             I    12
// wmiS1_MData                    I   256
// wmiS1_MDataByteEn              I    32
// wmiS1_arg_mFlag                I    32 reg
// gps_ppsSyncIn_x                I     1 reg
// EN_server_request_put          I     1
// wci_m_0_SThreadBusy            I     1 reg
// wci_m_1_SThreadBusy            I     1 reg
// wci_m_2_SThreadBusy            I     1 reg
// wci_m_3_SThreadBusy            I     1 reg
// wci_m_4_SThreadBusy            I     1 reg
// wci_m_5_SThreadBusy            I     1 reg
// wci_m_6_SThreadBusy            I     1 reg
// wci_m_7_SThreadBusy            I     1 reg
// wci_m_8_SThreadBusy            I     1 reg
// wci_m_9_SThreadBusy            I     1 reg
// wci_m_10_SThreadBusy           I     1 reg
// wci_m_11_SThreadBusy           I     1 reg
// wci_m_12_SThreadBusy           I     1 reg
// wmiS0_MReqLast                 I     1
// wmiS0_MDataValid               I     1
// wmiS0_MDataLast                I     1
// wmiS0_MReset_n                 I     1 reg
// wmiS1_MReqLast                 I     1
// wmiS1_MDataValid               I     1
// wmiS1_MDataLast                I     1
// wmiS1_MReset_n                 I     1 reg
// EN_server_response_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOCInf32B(pciDevice,
		  CLK_sys0_clk,
		  RST_N_sys0_rst,
		  CLK,
		  RST_N,

		  server_request_put,
		  EN_server_request_put,
		  RDY_server_request_put,

		  EN_server_response_get,
		  server_response_get,
		  RDY_server_response_get,

		  led,

		  switch_x,

		  wci_m_0_MCmd,

		  wci_m_0_MAddrSpace,

		  wci_m_0_MByteEn,

		  wci_m_0_MAddr,

		  wci_m_0_MData,

		  wci_m_0_SResp,

		  wci_m_0_SData,

		  wci_m_0_SThreadBusy,

		  wci_m_0_SFlag,

		  wci_m_0_MFlag,

		  wci_m_1_MCmd,

		  wci_m_1_MAddrSpace,

		  wci_m_1_MByteEn,

		  wci_m_1_MAddr,

		  wci_m_1_MData,

		  wci_m_1_SResp,

		  wci_m_1_SData,

		  wci_m_1_SThreadBusy,

		  wci_m_1_SFlag,

		  wci_m_1_MFlag,

		  wci_m_2_MCmd,

		  wci_m_2_MAddrSpace,

		  wci_m_2_MByteEn,

		  wci_m_2_MAddr,

		  wci_m_2_MData,

		  wci_m_2_SResp,

		  wci_m_2_SData,

		  wci_m_2_SThreadBusy,

		  wci_m_2_SFlag,

		  wci_m_2_MFlag,

		  wci_m_3_MCmd,

		  wci_m_3_MAddrSpace,

		  wci_m_3_MByteEn,

		  wci_m_3_MAddr,

		  wci_m_3_MData,

		  wci_m_3_SResp,

		  wci_m_3_SData,

		  wci_m_3_SThreadBusy,

		  wci_m_3_SFlag,

		  wci_m_3_MFlag,

		  wci_m_4_MCmd,

		  wci_m_4_MAddrSpace,

		  wci_m_4_MByteEn,

		  wci_m_4_MAddr,

		  wci_m_4_MData,

		  wci_m_4_SResp,

		  wci_m_4_SData,

		  wci_m_4_SThreadBusy,

		  wci_m_4_SFlag,

		  wci_m_4_MFlag,

		  wci_m_5_MCmd,

		  wci_m_5_MAddrSpace,

		  wci_m_5_MByteEn,

		  wci_m_5_MAddr,

		  wci_m_5_MData,

		  wci_m_5_SResp,

		  wci_m_5_SData,

		  wci_m_5_SThreadBusy,

		  wci_m_5_SFlag,

		  wci_m_5_MFlag,

		  wci_m_6_MCmd,

		  wci_m_6_MAddrSpace,

		  wci_m_6_MByteEn,

		  wci_m_6_MAddr,

		  wci_m_6_MData,

		  wci_m_6_SResp,

		  wci_m_6_SData,

		  wci_m_6_SThreadBusy,

		  wci_m_6_SFlag,

		  wci_m_6_MFlag,

		  wci_m_7_MCmd,

		  wci_m_7_MAddrSpace,

		  wci_m_7_MByteEn,

		  wci_m_7_MAddr,

		  wci_m_7_MData,

		  wci_m_7_SResp,

		  wci_m_7_SData,

		  wci_m_7_SThreadBusy,

		  wci_m_7_SFlag,

		  wci_m_7_MFlag,

		  wci_m_8_MCmd,

		  wci_m_8_MAddrSpace,

		  wci_m_8_MByteEn,

		  wci_m_8_MAddr,

		  wci_m_8_MData,

		  wci_m_8_SResp,

		  wci_m_8_SData,

		  wci_m_8_SThreadBusy,

		  wci_m_8_SFlag,

		  wci_m_8_MFlag,

		  wci_m_9_MCmd,

		  wci_m_9_MAddrSpace,

		  wci_m_9_MByteEn,

		  wci_m_9_MAddr,

		  wci_m_9_MData,

		  wci_m_9_SResp,

		  wci_m_9_SData,

		  wci_m_9_SThreadBusy,

		  wci_m_9_SFlag,

		  wci_m_9_MFlag,

		  wci_m_10_MCmd,

		  wci_m_10_MAddrSpace,

		  wci_m_10_MByteEn,

		  wci_m_10_MAddr,

		  wci_m_10_MData,

		  wci_m_10_SResp,

		  wci_m_10_SData,

		  wci_m_10_SThreadBusy,

		  wci_m_10_SFlag,

		  wci_m_10_MFlag,

		  wci_m_11_MCmd,

		  wci_m_11_MAddrSpace,

		  wci_m_11_MByteEn,

		  wci_m_11_MAddr,

		  wci_m_11_MData,

		  wci_m_11_SResp,

		  wci_m_11_SData,

		  wci_m_11_SThreadBusy,

		  wci_m_11_SFlag,

		  wci_m_11_MFlag,

		  wci_m_12_MCmd,

		  wci_m_12_MAddrSpace,

		  wci_m_12_MByteEn,

		  wci_m_12_MAddr,

		  wci_m_12_MData,

		  wci_m_12_SResp,

		  wci_m_12_SData,

		  wci_m_12_SThreadBusy,

		  wci_m_12_SFlag,

		  wci_m_12_MFlag,

		  wmiS0_MCmd,

		  wmiS0_MReqLast,

		  wmiS0_MReqInfo,

		  wmiS0_MAddrSpace,

		  wmiS0_MAddr,

		  wmiS0_MBurstLength,

		  wmiS0_MDataValid,

		  wmiS0_MDataLast,

		  wmiS0_MData,

		  wmiS0_MDataByteEn,

		  wmiS0_SResp,

		  wmiS0_SData,

		  wmiS0_SThreadBusy,

		  wmiS0_SDataThreadBusy,

		  wmiS0_SRespLast,

		  wmiS0_SFlag,

		  wmiS0_arg_mFlag,

		  wmiS0_SReset_n,

		  wmiS0_MReset_n,

		  wmiS1_MCmd,

		  wmiS1_MReqLast,

		  wmiS1_MReqInfo,

		  wmiS1_MAddrSpace,

		  wmiS1_MAddr,

		  wmiS1_MBurstLength,

		  wmiS1_MDataValid,

		  wmiS1_MDataLast,

		  wmiS1_MData,

		  wmiS1_MDataByteEn,

		  wmiS1_SResp,

		  wmiS1_SData,

		  wmiS1_SThreadBusy,

		  wmiS1_SDataThreadBusy,

		  wmiS1_SRespLast,

		  wmiS1_SFlag,

		  wmiS1_arg_mFlag,

		  wmiS1_SReset_n,

		  wmiS1_MReset_n,

		  cpNow,
		  RDY_cpNow,

		  gps_ppsSyncIn_x,

		  gps_ppsSyncOut,

		  RST_N_wci_m_0_mReset_n,
		  RST_N_wci_m_1_mReset_n,
		  RST_N_wci_m_2_mReset_n,
		  RST_N_wci_m_3_mReset_n,
		  RST_N_wci_m_4_mReset_n,
		  RST_N_wci_m_5_mReset_n,
		  RST_N_wci_m_6_mReset_n,
		  RST_N_wci_m_7_mReset_n,
		  RST_N_wci_m_8_mReset_n,
		  RST_N_wci_m_9_mReset_n,
		  RST_N_wci_m_10_mReset_n,
		  RST_N_wci_m_11_mReset_n,
		  RST_N_wci_m_12_mReset_n);
  input  [15 : 0] pciDevice;
  input  CLK_sys0_clk;
  input  RST_N_sys0_rst;
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [152 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [152 : 0] server_response_get;
  output RDY_server_response_get;

  // value method led
  output [1 : 0] led;

  // action method switch
  input  [2 : 0] switch_x;

  // value method wci_m_0_mCmd
  output [2 : 0] wci_m_0_MCmd;

  // value method wci_m_0_mAddrSpace
  output wci_m_0_MAddrSpace;

  // value method wci_m_0_mByteEn
  output [3 : 0] wci_m_0_MByteEn;

  // value method wci_m_0_mAddr
  output [19 : 0] wci_m_0_MAddr;

  // value method wci_m_0_mData
  output [31 : 0] wci_m_0_MData;

  // action method wci_m_0_sResp
  input  [1 : 0] wci_m_0_SResp;

  // action method wci_m_0_sData
  input  [31 : 0] wci_m_0_SData;

  // action method wci_m_0_sThreadBusy
  input  wci_m_0_SThreadBusy;

  // action method wci_m_0_sFlag
  input  [1 : 0] wci_m_0_SFlag;

  // value method wci_m_0_mFlag
  output [1 : 0] wci_m_0_MFlag;

  // value method wci_m_1_mCmd
  output [2 : 0] wci_m_1_MCmd;

  // value method wci_m_1_mAddrSpace
  output wci_m_1_MAddrSpace;

  // value method wci_m_1_mByteEn
  output [3 : 0] wci_m_1_MByteEn;

  // value method wci_m_1_mAddr
  output [19 : 0] wci_m_1_MAddr;

  // value method wci_m_1_mData
  output [31 : 0] wci_m_1_MData;

  // action method wci_m_1_sResp
  input  [1 : 0] wci_m_1_SResp;

  // action method wci_m_1_sData
  input  [31 : 0] wci_m_1_SData;

  // action method wci_m_1_sThreadBusy
  input  wci_m_1_SThreadBusy;

  // action method wci_m_1_sFlag
  input  [1 : 0] wci_m_1_SFlag;

  // value method wci_m_1_mFlag
  output [1 : 0] wci_m_1_MFlag;

  // value method wci_m_2_mCmd
  output [2 : 0] wci_m_2_MCmd;

  // value method wci_m_2_mAddrSpace
  output wci_m_2_MAddrSpace;

  // value method wci_m_2_mByteEn
  output [3 : 0] wci_m_2_MByteEn;

  // value method wci_m_2_mAddr
  output [19 : 0] wci_m_2_MAddr;

  // value method wci_m_2_mData
  output [31 : 0] wci_m_2_MData;

  // action method wci_m_2_sResp
  input  [1 : 0] wci_m_2_SResp;

  // action method wci_m_2_sData
  input  [31 : 0] wci_m_2_SData;

  // action method wci_m_2_sThreadBusy
  input  wci_m_2_SThreadBusy;

  // action method wci_m_2_sFlag
  input  [1 : 0] wci_m_2_SFlag;

  // value method wci_m_2_mFlag
  output [1 : 0] wci_m_2_MFlag;

  // value method wci_m_3_mCmd
  output [2 : 0] wci_m_3_MCmd;

  // value method wci_m_3_mAddrSpace
  output wci_m_3_MAddrSpace;

  // value method wci_m_3_mByteEn
  output [3 : 0] wci_m_3_MByteEn;

  // value method wci_m_3_mAddr
  output [19 : 0] wci_m_3_MAddr;

  // value method wci_m_3_mData
  output [31 : 0] wci_m_3_MData;

  // action method wci_m_3_sResp
  input  [1 : 0] wci_m_3_SResp;

  // action method wci_m_3_sData
  input  [31 : 0] wci_m_3_SData;

  // action method wci_m_3_sThreadBusy
  input  wci_m_3_SThreadBusy;

  // action method wci_m_3_sFlag
  input  [1 : 0] wci_m_3_SFlag;

  // value method wci_m_3_mFlag
  output [1 : 0] wci_m_3_MFlag;

  // value method wci_m_4_mCmd
  output [2 : 0] wci_m_4_MCmd;

  // value method wci_m_4_mAddrSpace
  output wci_m_4_MAddrSpace;

  // value method wci_m_4_mByteEn
  output [3 : 0] wci_m_4_MByteEn;

  // value method wci_m_4_mAddr
  output [19 : 0] wci_m_4_MAddr;

  // value method wci_m_4_mData
  output [31 : 0] wci_m_4_MData;

  // action method wci_m_4_sResp
  input  [1 : 0] wci_m_4_SResp;

  // action method wci_m_4_sData
  input  [31 : 0] wci_m_4_SData;

  // action method wci_m_4_sThreadBusy
  input  wci_m_4_SThreadBusy;

  // action method wci_m_4_sFlag
  input  [1 : 0] wci_m_4_SFlag;

  // value method wci_m_4_mFlag
  output [1 : 0] wci_m_4_MFlag;

  // value method wci_m_5_mCmd
  output [2 : 0] wci_m_5_MCmd;

  // value method wci_m_5_mAddrSpace
  output wci_m_5_MAddrSpace;

  // value method wci_m_5_mByteEn
  output [3 : 0] wci_m_5_MByteEn;

  // value method wci_m_5_mAddr
  output [19 : 0] wci_m_5_MAddr;

  // value method wci_m_5_mData
  output [31 : 0] wci_m_5_MData;

  // action method wci_m_5_sResp
  input  [1 : 0] wci_m_5_SResp;

  // action method wci_m_5_sData
  input  [31 : 0] wci_m_5_SData;

  // action method wci_m_5_sThreadBusy
  input  wci_m_5_SThreadBusy;

  // action method wci_m_5_sFlag
  input  [1 : 0] wci_m_5_SFlag;

  // value method wci_m_5_mFlag
  output [1 : 0] wci_m_5_MFlag;

  // value method wci_m_6_mCmd
  output [2 : 0] wci_m_6_MCmd;

  // value method wci_m_6_mAddrSpace
  output wci_m_6_MAddrSpace;

  // value method wci_m_6_mByteEn
  output [3 : 0] wci_m_6_MByteEn;

  // value method wci_m_6_mAddr
  output [19 : 0] wci_m_6_MAddr;

  // value method wci_m_6_mData
  output [31 : 0] wci_m_6_MData;

  // action method wci_m_6_sResp
  input  [1 : 0] wci_m_6_SResp;

  // action method wci_m_6_sData
  input  [31 : 0] wci_m_6_SData;

  // action method wci_m_6_sThreadBusy
  input  wci_m_6_SThreadBusy;

  // action method wci_m_6_sFlag
  input  [1 : 0] wci_m_6_SFlag;

  // value method wci_m_6_mFlag
  output [1 : 0] wci_m_6_MFlag;

  // value method wci_m_7_mCmd
  output [2 : 0] wci_m_7_MCmd;

  // value method wci_m_7_mAddrSpace
  output wci_m_7_MAddrSpace;

  // value method wci_m_7_mByteEn
  output [3 : 0] wci_m_7_MByteEn;

  // value method wci_m_7_mAddr
  output [19 : 0] wci_m_7_MAddr;

  // value method wci_m_7_mData
  output [31 : 0] wci_m_7_MData;

  // action method wci_m_7_sResp
  input  [1 : 0] wci_m_7_SResp;

  // action method wci_m_7_sData
  input  [31 : 0] wci_m_7_SData;

  // action method wci_m_7_sThreadBusy
  input  wci_m_7_SThreadBusy;

  // action method wci_m_7_sFlag
  input  [1 : 0] wci_m_7_SFlag;

  // value method wci_m_7_mFlag
  output [1 : 0] wci_m_7_MFlag;

  // value method wci_m_8_mCmd
  output [2 : 0] wci_m_8_MCmd;

  // value method wci_m_8_mAddrSpace
  output wci_m_8_MAddrSpace;

  // value method wci_m_8_mByteEn
  output [3 : 0] wci_m_8_MByteEn;

  // value method wci_m_8_mAddr
  output [19 : 0] wci_m_8_MAddr;

  // value method wci_m_8_mData
  output [31 : 0] wci_m_8_MData;

  // action method wci_m_8_sResp
  input  [1 : 0] wci_m_8_SResp;

  // action method wci_m_8_sData
  input  [31 : 0] wci_m_8_SData;

  // action method wci_m_8_sThreadBusy
  input  wci_m_8_SThreadBusy;

  // action method wci_m_8_sFlag
  input  [1 : 0] wci_m_8_SFlag;

  // value method wci_m_8_mFlag
  output [1 : 0] wci_m_8_MFlag;

  // value method wci_m_9_mCmd
  output [2 : 0] wci_m_9_MCmd;

  // value method wci_m_9_mAddrSpace
  output wci_m_9_MAddrSpace;

  // value method wci_m_9_mByteEn
  output [3 : 0] wci_m_9_MByteEn;

  // value method wci_m_9_mAddr
  output [19 : 0] wci_m_9_MAddr;

  // value method wci_m_9_mData
  output [31 : 0] wci_m_9_MData;

  // action method wci_m_9_sResp
  input  [1 : 0] wci_m_9_SResp;

  // action method wci_m_9_sData
  input  [31 : 0] wci_m_9_SData;

  // action method wci_m_9_sThreadBusy
  input  wci_m_9_SThreadBusy;

  // action method wci_m_9_sFlag
  input  [1 : 0] wci_m_9_SFlag;

  // value method wci_m_9_mFlag
  output [1 : 0] wci_m_9_MFlag;

  // value method wci_m_10_mCmd
  output [2 : 0] wci_m_10_MCmd;

  // value method wci_m_10_mAddrSpace
  output wci_m_10_MAddrSpace;

  // value method wci_m_10_mByteEn
  output [3 : 0] wci_m_10_MByteEn;

  // value method wci_m_10_mAddr
  output [19 : 0] wci_m_10_MAddr;

  // value method wci_m_10_mData
  output [31 : 0] wci_m_10_MData;

  // action method wci_m_10_sResp
  input  [1 : 0] wci_m_10_SResp;

  // action method wci_m_10_sData
  input  [31 : 0] wci_m_10_SData;

  // action method wci_m_10_sThreadBusy
  input  wci_m_10_SThreadBusy;

  // action method wci_m_10_sFlag
  input  [1 : 0] wci_m_10_SFlag;

  // value method wci_m_10_mFlag
  output [1 : 0] wci_m_10_MFlag;

  // value method wci_m_11_mCmd
  output [2 : 0] wci_m_11_MCmd;

  // value method wci_m_11_mAddrSpace
  output wci_m_11_MAddrSpace;

  // value method wci_m_11_mByteEn
  output [3 : 0] wci_m_11_MByteEn;

  // value method wci_m_11_mAddr
  output [19 : 0] wci_m_11_MAddr;

  // value method wci_m_11_mData
  output [31 : 0] wci_m_11_MData;

  // action method wci_m_11_sResp
  input  [1 : 0] wci_m_11_SResp;

  // action method wci_m_11_sData
  input  [31 : 0] wci_m_11_SData;

  // action method wci_m_11_sThreadBusy
  input  wci_m_11_SThreadBusy;

  // action method wci_m_11_sFlag
  input  [1 : 0] wci_m_11_SFlag;

  // value method wci_m_11_mFlag
  output [1 : 0] wci_m_11_MFlag;

  // value method wci_m_12_mCmd
  output [2 : 0] wci_m_12_MCmd;

  // value method wci_m_12_mAddrSpace
  output wci_m_12_MAddrSpace;

  // value method wci_m_12_mByteEn
  output [3 : 0] wci_m_12_MByteEn;

  // value method wci_m_12_mAddr
  output [19 : 0] wci_m_12_MAddr;

  // value method wci_m_12_mData
  output [31 : 0] wci_m_12_MData;

  // action method wci_m_12_sResp
  input  [1 : 0] wci_m_12_SResp;

  // action method wci_m_12_sData
  input  [31 : 0] wci_m_12_SData;

  // action method wci_m_12_sThreadBusy
  input  wci_m_12_SThreadBusy;

  // action method wci_m_12_sFlag
  input  [1 : 0] wci_m_12_SFlag;

  // value method wci_m_12_mFlag
  output [1 : 0] wci_m_12_MFlag;

  // action method wmiS0_mCmd
  input  [2 : 0] wmiS0_MCmd;

  // action method wmiS0_mReqLast
  input  wmiS0_MReqLast;

  // action method wmiS0_mReqInfo
  input  wmiS0_MReqInfo;

  // action method wmiS0_mAddrSpace
  input  wmiS0_MAddrSpace;

  // action method wmiS0_mAddr
  input  [13 : 0] wmiS0_MAddr;

  // action method wmiS0_mBurstLength
  input  [11 : 0] wmiS0_MBurstLength;

  // action method wmiS0_mDataValid
  input  wmiS0_MDataValid;

  // action method wmiS0_mDataLast
  input  wmiS0_MDataLast;

  // action method wmiS0_mData
  input  [255 : 0] wmiS0_MData;

  // action method wmiS0_mDataInfo

  // action method wmiS0_mDataByteEn
  input  [31 : 0] wmiS0_MDataByteEn;

  // value method wmiS0_sResp
  output [1 : 0] wmiS0_SResp;

  // value method wmiS0_sData
  output [255 : 0] wmiS0_SData;

  // value method wmiS0_sThreadBusy
  output wmiS0_SThreadBusy;

  // value method wmiS0_sDataThreadBusy
  output wmiS0_SDataThreadBusy;

  // value method wmiS0_sRespLast
  output wmiS0_SRespLast;

  // value method wmiS0_sFlag
  output [31 : 0] wmiS0_SFlag;

  // action method wmiS0_mFlag
  input  [31 : 0] wmiS0_arg_mFlag;

  // value method wmiS0_sReset_n
  output wmiS0_SReset_n;

  // action method wmiS0_mReset_n
  input  wmiS0_MReset_n;

  // action method wmiS1_mCmd
  input  [2 : 0] wmiS1_MCmd;

  // action method wmiS1_mReqLast
  input  wmiS1_MReqLast;

  // action method wmiS1_mReqInfo
  input  wmiS1_MReqInfo;

  // action method wmiS1_mAddrSpace
  input  wmiS1_MAddrSpace;

  // action method wmiS1_mAddr
  input  [13 : 0] wmiS1_MAddr;

  // action method wmiS1_mBurstLength
  input  [11 : 0] wmiS1_MBurstLength;

  // action method wmiS1_mDataValid
  input  wmiS1_MDataValid;

  // action method wmiS1_mDataLast
  input  wmiS1_MDataLast;

  // action method wmiS1_mData
  input  [255 : 0] wmiS1_MData;

  // action method wmiS1_mDataInfo

  // action method wmiS1_mDataByteEn
  input  [31 : 0] wmiS1_MDataByteEn;

  // value method wmiS1_sResp
  output [1 : 0] wmiS1_SResp;

  // value method wmiS1_sData
  output [255 : 0] wmiS1_SData;

  // value method wmiS1_sThreadBusy
  output wmiS1_SThreadBusy;

  // value method wmiS1_sDataThreadBusy
  output wmiS1_SDataThreadBusy;

  // value method wmiS1_sRespLast
  output wmiS1_SRespLast;

  // value method wmiS1_sFlag
  output [31 : 0] wmiS1_SFlag;

  // action method wmiS1_mFlag
  input  [31 : 0] wmiS1_arg_mFlag;

  // value method wmiS1_sReset_n
  output wmiS1_SReset_n;

  // action method wmiS1_mReset_n
  input  wmiS1_MReset_n;

  // value method cpNow
  output [63 : 0] cpNow;
  output RDY_cpNow;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // output resets
  output RST_N_wci_m_0_mReset_n;
  output RST_N_wci_m_1_mReset_n;
  output RST_N_wci_m_2_mReset_n;
  output RST_N_wci_m_3_mReset_n;
  output RST_N_wci_m_4_mReset_n;
  output RST_N_wci_m_5_mReset_n;
  output RST_N_wci_m_6_mReset_n;
  output RST_N_wci_m_7_mReset_n;
  output RST_N_wci_m_8_mReset_n;
  output RST_N_wci_m_9_mReset_n;
  output RST_N_wci_m_10_mReset_n;
  output RST_N_wci_m_11_mReset_n;
  output RST_N_wci_m_12_mReset_n;

  // signals for module outputs
  wire [255 : 0] wmiS0_SData, wmiS1_SData;
  wire [152 : 0] server_response_get;
  wire [63 : 0] cpNow;
  wire [31 : 0] wci_m_0_MData,
		wci_m_10_MData,
		wci_m_11_MData,
		wci_m_12_MData,
		wci_m_1_MData,
		wci_m_2_MData,
		wci_m_3_MData,
		wci_m_4_MData,
		wci_m_5_MData,
		wci_m_6_MData,
		wci_m_7_MData,
		wci_m_8_MData,
		wci_m_9_MData,
		wmiS0_SFlag,
		wmiS1_SFlag;
  wire [19 : 0] wci_m_0_MAddr,
		wci_m_10_MAddr,
		wci_m_11_MAddr,
		wci_m_12_MAddr,
		wci_m_1_MAddr,
		wci_m_2_MAddr,
		wci_m_3_MAddr,
		wci_m_4_MAddr,
		wci_m_5_MAddr,
		wci_m_6_MAddr,
		wci_m_7_MAddr,
		wci_m_8_MAddr,
		wci_m_9_MAddr;
  wire [3 : 0] wci_m_0_MByteEn,
	       wci_m_10_MByteEn,
	       wci_m_11_MByteEn,
	       wci_m_12_MByteEn,
	       wci_m_1_MByteEn,
	       wci_m_2_MByteEn,
	       wci_m_3_MByteEn,
	       wci_m_4_MByteEn,
	       wci_m_5_MByteEn,
	       wci_m_6_MByteEn,
	       wci_m_7_MByteEn,
	       wci_m_8_MByteEn,
	       wci_m_9_MByteEn;
  wire [2 : 0] wci_m_0_MCmd,
	       wci_m_10_MCmd,
	       wci_m_11_MCmd,
	       wci_m_12_MCmd,
	       wci_m_1_MCmd,
	       wci_m_2_MCmd,
	       wci_m_3_MCmd,
	       wci_m_4_MCmd,
	       wci_m_5_MCmd,
	       wci_m_6_MCmd,
	       wci_m_7_MCmd,
	       wci_m_8_MCmd,
	       wci_m_9_MCmd;
  wire [1 : 0] led,
	       wci_m_0_MFlag,
	       wci_m_10_MFlag,
	       wci_m_11_MFlag,
	       wci_m_12_MFlag,
	       wci_m_1_MFlag,
	       wci_m_2_MFlag,
	       wci_m_3_MFlag,
	       wci_m_4_MFlag,
	       wci_m_5_MFlag,
	       wci_m_6_MFlag,
	       wci_m_7_MFlag,
	       wci_m_8_MFlag,
	       wci_m_9_MFlag,
	       wmiS0_SResp,
	       wmiS1_SResp;
  wire RDY_cpNow,
       RDY_server_request_put,
       RDY_server_response_get,
       RST_N_wci_m_0_mReset_n,
       RST_N_wci_m_10_mReset_n,
       RST_N_wci_m_11_mReset_n,
       RST_N_wci_m_12_mReset_n,
       RST_N_wci_m_1_mReset_n,
       RST_N_wci_m_2_mReset_n,
       RST_N_wci_m_3_mReset_n,
       RST_N_wci_m_4_mReset_n,
       RST_N_wci_m_5_mReset_n,
       RST_N_wci_m_6_mReset_n,
       RST_N_wci_m_7_mReset_n,
       RST_N_wci_m_8_mReset_n,
       RST_N_wci_m_9_mReset_n,
       gps_ppsSyncOut,
       wci_m_0_MAddrSpace,
       wci_m_10_MAddrSpace,
       wci_m_11_MAddrSpace,
       wci_m_12_MAddrSpace,
       wci_m_1_MAddrSpace,
       wci_m_2_MAddrSpace,
       wci_m_3_MAddrSpace,
       wci_m_4_MAddrSpace,
       wci_m_5_MAddrSpace,
       wci_m_6_MAddrSpace,
       wci_m_7_MAddrSpace,
       wci_m_8_MAddrSpace,
       wci_m_9_MAddrSpace,
       wmiS0_SDataThreadBusy,
       wmiS0_SReset_n,
       wmiS0_SRespLast,
       wmiS0_SThreadBusy,
       wmiS1_SDataThreadBusy,
       wmiS1_SReset_n,
       wmiS1_SRespLast,
       wmiS1_SThreadBusy;

  // inlined wires
  wire [289 : 0] dp0_wmi_wmi_wmiDh$wget, dp1_wmi_wmi_wmiDh$wget;
  wire [257 : 0] dp0_wmi_wmi_respF_x_wire$wget, dp1_wmi_wmi_respF_x_wire$wget;
  wire [255 : 0] dp0_wmi_Es_mData_w$wget, dp1_wmi_Es_mData_w$wget;
  wire [66 : 0] dp0_wti_wtiReq$wget, dp1_wti_wtiReq$wget;
  wire [63 : 0] dp0_wmi_nowW$wget, dp1_wmi_nowW$wget;
  wire [59 : 0] dp0_wci_wciReq$wget, dp1_wci_wciReq$wget;
  wire [33 : 0] dp0_wci_respF_x_wire$wget, dp1_wci_respF_x_wire$wget;
  wire [31 : 0] dp0_bram_serverAdapterA_1_outData_enqData$wget,
		dp0_bram_serverAdapterA_1_outData_outData$wget,
		dp0_bram_serverAdapterA_2_outData_enqData$wget,
		dp0_bram_serverAdapterA_2_outData_outData$wget,
		dp0_bram_serverAdapterA_3_outData_enqData$wget,
		dp0_bram_serverAdapterA_3_outData_outData$wget,
		dp0_bram_serverAdapterA_outData_enqData$wget,
		dp0_bram_serverAdapterA_outData_outData$wget,
		dp0_bram_serverAdapterB_1_outData_enqData$wget,
		dp0_bram_serverAdapterB_1_outData_outData$wget,
		dp0_bram_serverAdapterB_2_outData_enqData$wget,
		dp0_bram_serverAdapterB_2_outData_outData$wget,
		dp0_bram_serverAdapterB_3_outData_enqData$wget,
		dp0_bram_serverAdapterB_3_outData_outData$wget,
		dp0_bram_serverAdapterB_outData_enqData$wget,
		dp0_bram_serverAdapterB_outData_outData$wget,
		dp0_wci_Es_mData_w$wget,
		dp0_wmi_Es_mDataByteEn_w$wget,
		dp0_wmi_wmi_wmiMFlag$wget,
		dp0_wmi_wmi_wmiReq$wget,
		dp1_bram_serverAdapterA_1_outData_enqData$wget,
		dp1_bram_serverAdapterA_1_outData_outData$wget,
		dp1_bram_serverAdapterA_2_outData_enqData$wget,
		dp1_bram_serverAdapterA_2_outData_outData$wget,
		dp1_bram_serverAdapterA_3_outData_enqData$wget,
		dp1_bram_serverAdapterA_3_outData_outData$wget,
		dp1_bram_serverAdapterA_outData_enqData$wget,
		dp1_bram_serverAdapterA_outData_outData$wget,
		dp1_bram_serverAdapterB_1_outData_enqData$wget,
		dp1_bram_serverAdapterB_1_outData_outData$wget,
		dp1_bram_serverAdapterB_2_outData_enqData$wget,
		dp1_bram_serverAdapterB_2_outData_outData$wget,
		dp1_bram_serverAdapterB_3_outData_enqData$wget,
		dp1_bram_serverAdapterB_3_outData_outData$wget,
		dp1_bram_serverAdapterB_outData_enqData$wget,
		dp1_bram_serverAdapterB_outData_outData$wget,
		dp1_wci_Es_mData_w$wget,
		dp1_wmi_Es_mDataByteEn_w$wget,
		dp1_wmi_wmi_wmiMFlag$wget,
		dp1_wmi_wmi_wmiReq$wget;
  wire [19 : 0] dp0_wci_Es_mAddr_w$wget, dp1_wci_Es_mAddr_w$wget;
  wire [15 : 0] dp0_bml_crdBuf_modulus_bw$wget,
		dp0_bml_fabBuf_modulus_bw$wget,
		dp0_bml_lclBuf_modulus_bw$wget,
		dp0_bml_remBuf_modulus_bw$wget,
		dp1_bml_crdBuf_modulus_bw$wget,
		dp1_bml_fabBuf_modulus_bw$wget,
		dp1_bml_lclBuf_modulus_bw$wget,
		dp1_bml_remBuf_modulus_bw$wget;
  wire [13 : 0] dp0_wmi_Es_mAddr_w$wget, dp1_wmi_Es_mAddr_w$wget;
  wire [11 : 0] dp0_wmi_Es_mBurstLength_w$wget,
		dp1_wmi_Es_mBurstLength_w$wget;
  wire [3 : 0] dp0_bml_dpControl$wget,
	       dp0_tlp_dpControl$wget,
	       dp0_wci_Es_mByteEn_w$wget,
	       dp0_wmi_dpControl$wget,
	       dp1_bml_dpControl$wget,
	       dp1_tlp_dpControl$wget,
	       dp1_wci_Es_mByteEn_w$wget,
	       dp1_wmi_dpControl$wget;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_1$wget,
	       dp0_bram_serverAdapterA_1_cnt_2$wget,
	       dp0_bram_serverAdapterA_1_cnt_3$wget,
	       dp0_bram_serverAdapterA_2_cnt_1$wget,
	       dp0_bram_serverAdapterA_2_cnt_2$wget,
	       dp0_bram_serverAdapterA_2_cnt_3$wget,
	       dp0_bram_serverAdapterA_3_cnt_1$wget,
	       dp0_bram_serverAdapterA_3_cnt_2$wget,
	       dp0_bram_serverAdapterA_3_cnt_3$wget,
	       dp0_bram_serverAdapterA_cnt_1$wget,
	       dp0_bram_serverAdapterA_cnt_2$wget,
	       dp0_bram_serverAdapterA_cnt_3$wget,
	       dp0_bram_serverAdapterB_1_cnt_1$wget,
	       dp0_bram_serverAdapterB_1_cnt_2$wget,
	       dp0_bram_serverAdapterB_1_cnt_3$wget,
	       dp0_bram_serverAdapterB_2_cnt_1$wget,
	       dp0_bram_serverAdapterB_2_cnt_2$wget,
	       dp0_bram_serverAdapterB_2_cnt_3$wget,
	       dp0_bram_serverAdapterB_3_cnt_1$wget,
	       dp0_bram_serverAdapterB_3_cnt_2$wget,
	       dp0_bram_serverAdapterB_3_cnt_3$wget,
	       dp0_bram_serverAdapterB_cnt_1$wget,
	       dp0_bram_serverAdapterB_cnt_2$wget,
	       dp0_bram_serverAdapterB_cnt_3$wget,
	       dp0_wci_Es_mCmd_w$wget,
	       dp0_wci_wEdge$wget,
	       dp0_wmi_Es_mCmd_w$wget,
	       dp1_bram_serverAdapterA_1_cnt_1$wget,
	       dp1_bram_serverAdapterA_1_cnt_2$wget,
	       dp1_bram_serverAdapterA_1_cnt_3$wget,
	       dp1_bram_serverAdapterA_2_cnt_1$wget,
	       dp1_bram_serverAdapterA_2_cnt_2$wget,
	       dp1_bram_serverAdapterA_2_cnt_3$wget,
	       dp1_bram_serverAdapterA_3_cnt_1$wget,
	       dp1_bram_serverAdapterA_3_cnt_2$wget,
	       dp1_bram_serverAdapterA_3_cnt_3$wget,
	       dp1_bram_serverAdapterA_cnt_1$wget,
	       dp1_bram_serverAdapterA_cnt_2$wget,
	       dp1_bram_serverAdapterA_cnt_3$wget,
	       dp1_bram_serverAdapterB_1_cnt_1$wget,
	       dp1_bram_serverAdapterB_1_cnt_2$wget,
	       dp1_bram_serverAdapterB_1_cnt_3$wget,
	       dp1_bram_serverAdapterB_2_cnt_1$wget,
	       dp1_bram_serverAdapterB_2_cnt_2$wget,
	       dp1_bram_serverAdapterB_2_cnt_3$wget,
	       dp1_bram_serverAdapterB_3_cnt_1$wget,
	       dp1_bram_serverAdapterB_3_cnt_2$wget,
	       dp1_bram_serverAdapterB_3_cnt_3$wget,
	       dp1_bram_serverAdapterB_cnt_1$wget,
	       dp1_bram_serverAdapterB_cnt_2$wget,
	       dp1_bram_serverAdapterB_cnt_3$wget,
	       dp1_wci_Es_mCmd_w$wget,
	       dp1_wci_wEdge$wget,
	       dp1_wmi_Es_mCmd_w$wget;
  wire [1 : 0] dp0_bram_serverAdapterA_1_s1_1$wget,
	       dp0_bram_serverAdapterA_1_writeWithResp$wget,
	       dp0_bram_serverAdapterA_2_s1_1$wget,
	       dp0_bram_serverAdapterA_2_writeWithResp$wget,
	       dp0_bram_serverAdapterA_3_s1_1$wget,
	       dp0_bram_serverAdapterA_3_writeWithResp$wget,
	       dp0_bram_serverAdapterA_s1_1$wget,
	       dp0_bram_serverAdapterA_writeWithResp$wget,
	       dp0_bram_serverAdapterB_1_s1_1$wget,
	       dp0_bram_serverAdapterB_1_writeWithResp$wget,
	       dp0_bram_serverAdapterB_2_s1_1$wget,
	       dp0_bram_serverAdapterB_2_writeWithResp$wget,
	       dp0_bram_serverAdapterB_3_s1_1$wget,
	       dp0_bram_serverAdapterB_3_writeWithResp$wget,
	       dp0_bram_serverAdapterB_s1_1$wget,
	       dp0_bram_serverAdapterB_writeWithResp$wget,
	       dp1_bram_serverAdapterA_1_s1_1$wget,
	       dp1_bram_serverAdapterA_1_writeWithResp$wget,
	       dp1_bram_serverAdapterA_2_s1_1$wget,
	       dp1_bram_serverAdapterA_2_writeWithResp$wget,
	       dp1_bram_serverAdapterA_3_s1_1$wget,
	       dp1_bram_serverAdapterA_3_writeWithResp$wget,
	       dp1_bram_serverAdapterA_s1_1$wget,
	       dp1_bram_serverAdapterA_writeWithResp$wget,
	       dp1_bram_serverAdapterB_1_s1_1$wget,
	       dp1_bram_serverAdapterB_1_writeWithResp$wget,
	       dp1_bram_serverAdapterB_2_s1_1$wget,
	       dp1_bram_serverAdapterB_2_writeWithResp$wget,
	       dp1_bram_serverAdapterB_3_s1_1$wget,
	       dp1_bram_serverAdapterB_3_writeWithResp$wget,
	       dp1_bram_serverAdapterB_s1_1$wget,
	       dp1_bram_serverAdapterB_writeWithResp$wget;
  wire dp0_bml_crdBuf_decAction$whas,
       dp0_bml_crdBuf_incAction$whas,
       dp0_bml_dpControl$whas,
       dp0_bml_fabAvail_1$wget,
       dp0_bml_fabAvail_1$whas,
       dp0_bml_fabBuf_decAction$whas,
       dp0_bml_fabBuf_incAction$whas,
       dp0_bml_fabDone_1$wget,
       dp0_bml_fabDone_1$whas,
       dp0_bml_lclBufDone_1$wget,
       dp0_bml_lclBufDone_1$whas,
       dp0_bml_lclBufStart_1$wget,
       dp0_bml_lclBufStart_1$whas,
       dp0_bml_lclBuf_decAction$whas,
       dp0_bml_lclBuf_incAction$whas,
       dp0_bml_remBuf_decAction$whas,
       dp0_bml_remBuf_incAction$whas,
       dp0_bml_remDone_1$wget,
       dp0_bml_remDone_1$whas,
       dp0_bml_remStart_1$wget,
       dp0_bml_remStart_1$whas,
       dp0_bram_serverAdapterA_1_cnt_1$whas,
       dp0_bram_serverAdapterA_1_cnt_2$whas,
       dp0_bram_serverAdapterA_1_cnt_3$whas,
       dp0_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_1_outData_enqData$whas,
       dp0_bram_serverAdapterA_1_outData_outData$whas,
       dp0_bram_serverAdapterA_1_s1_1$whas,
       dp0_bram_serverAdapterA_1_writeWithResp$whas,
       dp0_bram_serverAdapterA_2_cnt_1$whas,
       dp0_bram_serverAdapterA_2_cnt_2$whas,
       dp0_bram_serverAdapterA_2_cnt_3$whas,
       dp0_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_2_outData_enqData$whas,
       dp0_bram_serverAdapterA_2_outData_outData$whas,
       dp0_bram_serverAdapterA_2_s1_1$whas,
       dp0_bram_serverAdapterA_2_writeWithResp$whas,
       dp0_bram_serverAdapterA_3_cnt_1$whas,
       dp0_bram_serverAdapterA_3_cnt_2$whas,
       dp0_bram_serverAdapterA_3_cnt_3$whas,
       dp0_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_3_outData_enqData$whas,
       dp0_bram_serverAdapterA_3_outData_outData$whas,
       dp0_bram_serverAdapterA_3_s1_1$whas,
       dp0_bram_serverAdapterA_3_writeWithResp$whas,
       dp0_bram_serverAdapterA_cnt_1$whas,
       dp0_bram_serverAdapterA_cnt_2$whas,
       dp0_bram_serverAdapterA_cnt_3$whas,
       dp0_bram_serverAdapterA_outData_deqCalled$whas,
       dp0_bram_serverAdapterA_outData_enqData$whas,
       dp0_bram_serverAdapterA_outData_outData$whas,
       dp0_bram_serverAdapterA_s1_1$whas,
       dp0_bram_serverAdapterA_writeWithResp$whas,
       dp0_bram_serverAdapterB_1_cnt_1$whas,
       dp0_bram_serverAdapterB_1_cnt_2$whas,
       dp0_bram_serverAdapterB_1_cnt_3$whas,
       dp0_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_1_outData_enqData$whas,
       dp0_bram_serverAdapterB_1_outData_outData$whas,
       dp0_bram_serverAdapterB_1_s1_1$whas,
       dp0_bram_serverAdapterB_1_writeWithResp$whas,
       dp0_bram_serverAdapterB_2_cnt_1$whas,
       dp0_bram_serverAdapterB_2_cnt_2$whas,
       dp0_bram_serverAdapterB_2_cnt_3$whas,
       dp0_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_2_outData_enqData$whas,
       dp0_bram_serverAdapterB_2_outData_outData$whas,
       dp0_bram_serverAdapterB_2_s1_1$whas,
       dp0_bram_serverAdapterB_2_writeWithResp$whas,
       dp0_bram_serverAdapterB_3_cnt_1$whas,
       dp0_bram_serverAdapterB_3_cnt_2$whas,
       dp0_bram_serverAdapterB_3_cnt_3$whas,
       dp0_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_3_outData_enqData$whas,
       dp0_bram_serverAdapterB_3_outData_outData$whas,
       dp0_bram_serverAdapterB_3_s1_1$whas,
       dp0_bram_serverAdapterB_3_writeWithResp$whas,
       dp0_bram_serverAdapterB_cnt_1$whas,
       dp0_bram_serverAdapterB_cnt_2$whas,
       dp0_bram_serverAdapterB_cnt_3$whas,
       dp0_bram_serverAdapterB_outData_deqCalled$whas,
       dp0_bram_serverAdapterB_outData_enqData$whas,
       dp0_bram_serverAdapterB_outData_outData$whas,
       dp0_bram_serverAdapterB_s1_1$whas,
       dp0_bram_serverAdapterB_writeWithResp$whas,
       dp0_tlp_creditReady_1$wget,
       dp0_tlp_creditReady_1$whas,
       dp0_tlp_dpControl$whas,
       dp0_tlp_farBufReady_1$wget,
       dp0_tlp_farBufReady_1$whas,
       dp0_tlp_nearBufReady_1$wget,
       dp0_tlp_nearBufReady_1$whas,
       dp0_tlp_pullTagMatch_1$wget,
       dp0_tlp_pullTagMatch_1$whas,
       dp0_tlp_remDone_1$wget,
       dp0_tlp_remDone_1$whas,
       dp0_tlp_remStart_1$wget,
       dp0_tlp_remStart_1$whas,
       dp0_wci_Es_mAddrSpace_w$wget,
       dp0_wci_Es_mAddrSpace_w$whas,
       dp0_wci_Es_mAddr_w$whas,
       dp0_wci_Es_mByteEn_w$whas,
       dp0_wci_Es_mCmd_w$whas,
       dp0_wci_Es_mData_w$whas,
       dp0_wci_ctlAckReg_1$wget,
       dp0_wci_ctlAckReg_1$whas,
       dp0_wci_reqF_r_clr$whas,
       dp0_wci_reqF_r_deq$whas,
       dp0_wci_reqF_r_enq$whas,
       dp0_wci_respF_dequeueing$whas,
       dp0_wci_respF_enqueueing$whas,
       dp0_wci_respF_x_wire$whas,
       dp0_wci_sFlagReg_1$wget,
       dp0_wci_sFlagReg_1$whas,
       dp0_wci_sThreadBusy_pw$whas,
       dp0_wci_wEdge$whas,
       dp0_wci_wciReq$whas,
       dp0_wci_wci_cfrd_pw$whas,
       dp0_wci_wci_cfwr_pw$whas,
       dp0_wci_wci_ctrl_pw$whas,
       dp0_wmi_Es_mAddrSpace_w$wget,
       dp0_wmi_Es_mAddrSpace_w$whas,
       dp0_wmi_Es_mAddr_w$whas,
       dp0_wmi_Es_mBurstLength_w$whas,
       dp0_wmi_Es_mCmd_w$whas,
       dp0_wmi_Es_mDataByteEn_w$whas,
       dp0_wmi_Es_mDataInfo_w$whas,
       dp0_wmi_Es_mDataLast_w$whas,
       dp0_wmi_Es_mDataValid_w$whas,
       dp0_wmi_Es_mData_w$whas,
       dp0_wmi_Es_mReqInfo_w$wget,
       dp0_wmi_Es_mReqInfo_w$whas,
       dp0_wmi_Es_mReqLast_w$whas,
       dp0_wmi_dpControl$whas,
       dp0_wmi_mesgBufReady_1$wget,
       dp0_wmi_mesgBufReady_1$whas,
       dp0_wmi_mesgDone_1$wget,
       dp0_wmi_mesgDone_1$whas,
       dp0_wmi_mesgStart_1$wget,
       dp0_wmi_mesgStart_1$whas,
       dp0_wmi_nowW$whas,
       dp0_wmi_wmi_dhF_doResetClr$whas,
       dp0_wmi_wmi_dhF_doResetDeq$whas,
       dp0_wmi_wmi_dhF_doResetEnq$whas,
       dp0_wmi_wmi_dhF_r_clr$whas,
       dp0_wmi_wmi_dhF_r_deq$whas,
       dp0_wmi_wmi_dhF_r_enq$whas,
       dp0_wmi_wmi_forceSThreadBusy_pw$whas,
       dp0_wmi_wmi_mFlagF_doResetClr$whas,
       dp0_wmi_wmi_mFlagF_doResetDeq$whas,
       dp0_wmi_wmi_mFlagF_doResetEnq$whas,
       dp0_wmi_wmi_mFlagF_r_clr$whas,
       dp0_wmi_wmi_mFlagF_r_deq$whas,
       dp0_wmi_wmi_mFlagF_r_enq$whas,
       dp0_wmi_wmi_operateD_1$wget,
       dp0_wmi_wmi_operateD_1$whas,
       dp0_wmi_wmi_peerIsReady_1$wget,
       dp0_wmi_wmi_peerIsReady_1$whas,
       dp0_wmi_wmi_reqF_doResetClr$whas,
       dp0_wmi_wmi_reqF_doResetDeq$whas,
       dp0_wmi_wmi_reqF_doResetEnq$whas,
       dp0_wmi_wmi_reqF_r_clr$whas,
       dp0_wmi_wmi_reqF_r_deq$whas,
       dp0_wmi_wmi_reqF_r_enq$whas,
       dp0_wmi_wmi_respF_dequeueing$whas,
       dp0_wmi_wmi_respF_enqueueing$whas,
       dp0_wmi_wmi_respF_x_wire$whas,
       dp0_wmi_wmi_sDataThreadBusy_dw$wget,
       dp0_wmi_wmi_sDataThreadBusy_dw$whas,
       dp0_wmi_wmi_sThreadBusy_dw$wget,
       dp0_wmi_wmi_sThreadBusy_dw$whas,
       dp0_wmi_wmi_wmiDh$whas,
       dp0_wmi_wmi_wmiMFlag$whas,
       dp0_wmi_wmi_wmiReq$whas,
       dp0_wti_wtiReq$whas,
       dp1_bml_crdBuf_decAction$whas,
       dp1_bml_crdBuf_incAction$whas,
       dp1_bml_dpControl$whas,
       dp1_bml_fabAvail_1$wget,
       dp1_bml_fabAvail_1$whas,
       dp1_bml_fabBuf_decAction$whas,
       dp1_bml_fabBuf_incAction$whas,
       dp1_bml_fabDone_1$wget,
       dp1_bml_fabDone_1$whas,
       dp1_bml_lclBufDone_1$wget,
       dp1_bml_lclBufDone_1$whas,
       dp1_bml_lclBufStart_1$wget,
       dp1_bml_lclBufStart_1$whas,
       dp1_bml_lclBuf_decAction$whas,
       dp1_bml_lclBuf_incAction$whas,
       dp1_bml_remBuf_decAction$whas,
       dp1_bml_remBuf_incAction$whas,
       dp1_bml_remDone_1$wget,
       dp1_bml_remDone_1$whas,
       dp1_bml_remStart_1$wget,
       dp1_bml_remStart_1$whas,
       dp1_bram_serverAdapterA_1_cnt_1$whas,
       dp1_bram_serverAdapterA_1_cnt_2$whas,
       dp1_bram_serverAdapterA_1_cnt_3$whas,
       dp1_bram_serverAdapterA_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_1_outData_enqData$whas,
       dp1_bram_serverAdapterA_1_outData_outData$whas,
       dp1_bram_serverAdapterA_1_s1_1$whas,
       dp1_bram_serverAdapterA_1_writeWithResp$whas,
       dp1_bram_serverAdapterA_2_cnt_1$whas,
       dp1_bram_serverAdapterA_2_cnt_2$whas,
       dp1_bram_serverAdapterA_2_cnt_3$whas,
       dp1_bram_serverAdapterA_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_2_outData_enqData$whas,
       dp1_bram_serverAdapterA_2_outData_outData$whas,
       dp1_bram_serverAdapterA_2_s1_1$whas,
       dp1_bram_serverAdapterA_2_writeWithResp$whas,
       dp1_bram_serverAdapterA_3_cnt_1$whas,
       dp1_bram_serverAdapterA_3_cnt_2$whas,
       dp1_bram_serverAdapterA_3_cnt_3$whas,
       dp1_bram_serverAdapterA_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_3_outData_enqData$whas,
       dp1_bram_serverAdapterA_3_outData_outData$whas,
       dp1_bram_serverAdapterA_3_s1_1$whas,
       dp1_bram_serverAdapterA_3_writeWithResp$whas,
       dp1_bram_serverAdapterA_cnt_1$whas,
       dp1_bram_serverAdapterA_cnt_2$whas,
       dp1_bram_serverAdapterA_cnt_3$whas,
       dp1_bram_serverAdapterA_outData_deqCalled$whas,
       dp1_bram_serverAdapterA_outData_enqData$whas,
       dp1_bram_serverAdapterA_outData_outData$whas,
       dp1_bram_serverAdapterA_s1_1$whas,
       dp1_bram_serverAdapterA_writeWithResp$whas,
       dp1_bram_serverAdapterB_1_cnt_1$whas,
       dp1_bram_serverAdapterB_1_cnt_2$whas,
       dp1_bram_serverAdapterB_1_cnt_3$whas,
       dp1_bram_serverAdapterB_1_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_1_outData_enqData$whas,
       dp1_bram_serverAdapterB_1_outData_outData$whas,
       dp1_bram_serverAdapterB_1_s1_1$whas,
       dp1_bram_serverAdapterB_1_writeWithResp$whas,
       dp1_bram_serverAdapterB_2_cnt_1$whas,
       dp1_bram_serverAdapterB_2_cnt_2$whas,
       dp1_bram_serverAdapterB_2_cnt_3$whas,
       dp1_bram_serverAdapterB_2_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_2_outData_enqData$whas,
       dp1_bram_serverAdapterB_2_outData_outData$whas,
       dp1_bram_serverAdapterB_2_s1_1$whas,
       dp1_bram_serverAdapterB_2_writeWithResp$whas,
       dp1_bram_serverAdapterB_3_cnt_1$whas,
       dp1_bram_serverAdapterB_3_cnt_2$whas,
       dp1_bram_serverAdapterB_3_cnt_3$whas,
       dp1_bram_serverAdapterB_3_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_3_outData_enqData$whas,
       dp1_bram_serverAdapterB_3_outData_outData$whas,
       dp1_bram_serverAdapterB_3_s1_1$whas,
       dp1_bram_serverAdapterB_3_writeWithResp$whas,
       dp1_bram_serverAdapterB_cnt_1$whas,
       dp1_bram_serverAdapterB_cnt_2$whas,
       dp1_bram_serverAdapterB_cnt_3$whas,
       dp1_bram_serverAdapterB_outData_deqCalled$whas,
       dp1_bram_serverAdapterB_outData_enqData$whas,
       dp1_bram_serverAdapterB_outData_outData$whas,
       dp1_bram_serverAdapterB_s1_1$whas,
       dp1_bram_serverAdapterB_writeWithResp$whas,
       dp1_tlp_creditReady_1$wget,
       dp1_tlp_creditReady_1$whas,
       dp1_tlp_dpControl$whas,
       dp1_tlp_farBufReady_1$wget,
       dp1_tlp_farBufReady_1$whas,
       dp1_tlp_nearBufReady_1$wget,
       dp1_tlp_nearBufReady_1$whas,
       dp1_tlp_pullTagMatch_1$wget,
       dp1_tlp_pullTagMatch_1$whas,
       dp1_tlp_remDone_1$wget,
       dp1_tlp_remDone_1$whas,
       dp1_tlp_remStart_1$wget,
       dp1_tlp_remStart_1$whas,
       dp1_wci_Es_mAddrSpace_w$wget,
       dp1_wci_Es_mAddrSpace_w$whas,
       dp1_wci_Es_mAddr_w$whas,
       dp1_wci_Es_mByteEn_w$whas,
       dp1_wci_Es_mCmd_w$whas,
       dp1_wci_Es_mData_w$whas,
       dp1_wci_ctlAckReg_1$wget,
       dp1_wci_ctlAckReg_1$whas,
       dp1_wci_reqF_r_clr$whas,
       dp1_wci_reqF_r_deq$whas,
       dp1_wci_reqF_r_enq$whas,
       dp1_wci_respF_dequeueing$whas,
       dp1_wci_respF_enqueueing$whas,
       dp1_wci_respF_x_wire$whas,
       dp1_wci_sFlagReg_1$wget,
       dp1_wci_sFlagReg_1$whas,
       dp1_wci_sThreadBusy_pw$whas,
       dp1_wci_wEdge$whas,
       dp1_wci_wciReq$whas,
       dp1_wci_wci_cfrd_pw$whas,
       dp1_wci_wci_cfwr_pw$whas,
       dp1_wci_wci_ctrl_pw$whas,
       dp1_wmi_Es_mAddrSpace_w$wget,
       dp1_wmi_Es_mAddrSpace_w$whas,
       dp1_wmi_Es_mAddr_w$whas,
       dp1_wmi_Es_mBurstLength_w$whas,
       dp1_wmi_Es_mCmd_w$whas,
       dp1_wmi_Es_mDataByteEn_w$whas,
       dp1_wmi_Es_mDataInfo_w$whas,
       dp1_wmi_Es_mDataLast_w$whas,
       dp1_wmi_Es_mDataValid_w$whas,
       dp1_wmi_Es_mData_w$whas,
       dp1_wmi_Es_mReqInfo_w$wget,
       dp1_wmi_Es_mReqInfo_w$whas,
       dp1_wmi_Es_mReqLast_w$whas,
       dp1_wmi_dpControl$whas,
       dp1_wmi_mesgBufReady_1$wget,
       dp1_wmi_mesgBufReady_1$whas,
       dp1_wmi_mesgDone_1$wget,
       dp1_wmi_mesgDone_1$whas,
       dp1_wmi_mesgStart_1$wget,
       dp1_wmi_mesgStart_1$whas,
       dp1_wmi_nowW$whas,
       dp1_wmi_wmi_dhF_doResetClr$whas,
       dp1_wmi_wmi_dhF_doResetDeq$whas,
       dp1_wmi_wmi_dhF_doResetEnq$whas,
       dp1_wmi_wmi_dhF_r_clr$whas,
       dp1_wmi_wmi_dhF_r_deq$whas,
       dp1_wmi_wmi_dhF_r_enq$whas,
       dp1_wmi_wmi_forceSThreadBusy_pw$whas,
       dp1_wmi_wmi_mFlagF_doResetClr$whas,
       dp1_wmi_wmi_mFlagF_doResetDeq$whas,
       dp1_wmi_wmi_mFlagF_doResetEnq$whas,
       dp1_wmi_wmi_mFlagF_r_clr$whas,
       dp1_wmi_wmi_mFlagF_r_deq$whas,
       dp1_wmi_wmi_mFlagF_r_enq$whas,
       dp1_wmi_wmi_operateD_1$wget,
       dp1_wmi_wmi_operateD_1$whas,
       dp1_wmi_wmi_peerIsReady_1$wget,
       dp1_wmi_wmi_peerIsReady_1$whas,
       dp1_wmi_wmi_reqF_doResetClr$whas,
       dp1_wmi_wmi_reqF_doResetDeq$whas,
       dp1_wmi_wmi_reqF_doResetEnq$whas,
       dp1_wmi_wmi_reqF_r_clr$whas,
       dp1_wmi_wmi_reqF_r_deq$whas,
       dp1_wmi_wmi_reqF_r_enq$whas,
       dp1_wmi_wmi_respF_dequeueing$whas,
       dp1_wmi_wmi_respF_enqueueing$whas,
       dp1_wmi_wmi_respF_x_wire$whas,
       dp1_wmi_wmi_sDataThreadBusy_dw$wget,
       dp1_wmi_wmi_sDataThreadBusy_dw$whas,
       dp1_wmi_wmi_sThreadBusy_dw$wget,
       dp1_wmi_wmi_sThreadBusy_dw$whas,
       dp1_wmi_wmi_wmiDh$whas,
       dp1_wmi_wmi_wmiMFlag$whas,
       dp1_wmi_wmi_wmiReq$whas,
       dp1_wti_wtiReq$whas,
       itc0_wti_sThreadBusy_pw$whas,
       itc1_wti_sThreadBusy_pw$whas;

  // register chompCnt
  reg [7 : 0] chompCnt;
  wire [7 : 0] chompCnt$D_IN;
  wire chompCnt$EN;

  // register dp0_bml_crdBuf_modulus
  reg [15 : 0] dp0_bml_crdBuf_modulus;
  wire [15 : 0] dp0_bml_crdBuf_modulus$D_IN;
  wire dp0_bml_crdBuf_modulus$EN;

  // register dp0_bml_crdBuf_value
  reg [15 : 0] dp0_bml_crdBuf_value;
  wire [15 : 0] dp0_bml_crdBuf_value$D_IN;
  wire dp0_bml_crdBuf_value$EN;

  // register dp0_bml_fabAvail
  reg dp0_bml_fabAvail;
  wire dp0_bml_fabAvail$D_IN, dp0_bml_fabAvail$EN;

  // register dp0_bml_fabBuf_modulus
  reg [15 : 0] dp0_bml_fabBuf_modulus;
  wire [15 : 0] dp0_bml_fabBuf_modulus$D_IN;
  wire dp0_bml_fabBuf_modulus$EN;

  // register dp0_bml_fabBuf_value
  reg [15 : 0] dp0_bml_fabBuf_value;
  wire [15 : 0] dp0_bml_fabBuf_value$D_IN;
  wire dp0_bml_fabBuf_value$EN;

  // register dp0_bml_fabBufsAvail
  reg [15 : 0] dp0_bml_fabBufsAvail;
  wire [15 : 0] dp0_bml_fabBufsAvail$D_IN;
  wire dp0_bml_fabBufsAvail$EN;

  // register dp0_bml_fabDone
  reg dp0_bml_fabDone;
  wire dp0_bml_fabDone$D_IN, dp0_bml_fabDone$EN;

  // register dp0_bml_fabFlowAddr
  reg [31 : 0] dp0_bml_fabFlowAddr;
  reg [31 : 0] dp0_bml_fabFlowAddr$D_IN;
  wire dp0_bml_fabFlowAddr$EN;

  // register dp0_bml_fabFlowBase
  reg [31 : 0] dp0_bml_fabFlowBase;
  wire [31 : 0] dp0_bml_fabFlowBase$D_IN;
  wire dp0_bml_fabFlowBase$EN;

  // register dp0_bml_fabFlowSize
  reg [31 : 0] dp0_bml_fabFlowSize;
  wire [31 : 0] dp0_bml_fabFlowSize$D_IN;
  wire dp0_bml_fabFlowSize$EN;

  // register dp0_bml_fabMesgAddr
  reg [31 : 0] dp0_bml_fabMesgAddr;
  wire [31 : 0] dp0_bml_fabMesgAddr$D_IN;
  wire dp0_bml_fabMesgAddr$EN;

  // register dp0_bml_fabMesgBase
  reg [31 : 0] dp0_bml_fabMesgBase;
  wire [31 : 0] dp0_bml_fabMesgBase$D_IN;
  wire dp0_bml_fabMesgBase$EN;

  // register dp0_bml_fabMesgSize
  reg [31 : 0] dp0_bml_fabMesgSize;
  wire [31 : 0] dp0_bml_fabMesgSize$D_IN;
  wire dp0_bml_fabMesgSize$EN;

  // register dp0_bml_fabMetaAddr
  reg [31 : 0] dp0_bml_fabMetaAddr;
  wire [31 : 0] dp0_bml_fabMetaAddr$D_IN;
  wire dp0_bml_fabMetaAddr$EN;

  // register dp0_bml_fabMetaBase
  reg [31 : 0] dp0_bml_fabMetaBase;
  wire [31 : 0] dp0_bml_fabMetaBase$D_IN;
  wire dp0_bml_fabMetaBase$EN;

  // register dp0_bml_fabMetaSize
  reg [31 : 0] dp0_bml_fabMetaSize;
  wire [31 : 0] dp0_bml_fabMetaSize$D_IN;
  wire dp0_bml_fabMetaSize$EN;

  // register dp0_bml_fabNumBufs
  reg [15 : 0] dp0_bml_fabNumBufs;
  wire [15 : 0] dp0_bml_fabNumBufs$D_IN;
  wire dp0_bml_fabNumBufs$EN;

  // register dp0_bml_lclBufDone
  reg dp0_bml_lclBufDone;
  wire dp0_bml_lclBufDone$D_IN, dp0_bml_lclBufDone$EN;

  // register dp0_bml_lclBufStart
  reg dp0_bml_lclBufStart;
  wire dp0_bml_lclBufStart$D_IN, dp0_bml_lclBufStart$EN;

  // register dp0_bml_lclBuf_modulus
  reg [15 : 0] dp0_bml_lclBuf_modulus;
  wire [15 : 0] dp0_bml_lclBuf_modulus$D_IN;
  wire dp0_bml_lclBuf_modulus$EN;

  // register dp0_bml_lclBuf_value
  reg [15 : 0] dp0_bml_lclBuf_value;
  wire [15 : 0] dp0_bml_lclBuf_value$D_IN;
  wire dp0_bml_lclBuf_value$EN;

  // register dp0_bml_lclBufsAR
  reg [15 : 0] dp0_bml_lclBufsAR;
  wire [15 : 0] dp0_bml_lclBufsAR$D_IN;
  wire dp0_bml_lclBufsAR$EN;

  // register dp0_bml_lclBufsCF
  reg [15 : 0] dp0_bml_lclBufsCF;
  wire [15 : 0] dp0_bml_lclBufsCF$D_IN;
  wire dp0_bml_lclBufsCF$EN;

  // register dp0_bml_lclCredit
  reg [15 : 0] dp0_bml_lclCredit;
  wire [15 : 0] dp0_bml_lclCredit$D_IN;
  wire dp0_bml_lclCredit$EN;

  // register dp0_bml_lclDones
  reg [15 : 0] dp0_bml_lclDones;
  wire [15 : 0] dp0_bml_lclDones$D_IN;
  wire dp0_bml_lclDones$EN;

  // register dp0_bml_lclMesgAddr
  reg [15 : 0] dp0_bml_lclMesgAddr;
  wire [15 : 0] dp0_bml_lclMesgAddr$D_IN;
  wire dp0_bml_lclMesgAddr$EN;

  // register dp0_bml_lclMetaAddr
  reg [15 : 0] dp0_bml_lclMetaAddr;
  wire [15 : 0] dp0_bml_lclMetaAddr$D_IN;
  wire dp0_bml_lclMetaAddr$EN;

  // register dp0_bml_lclNumBufs
  reg [15 : 0] dp0_bml_lclNumBufs;
  wire [15 : 0] dp0_bml_lclNumBufs$D_IN;
  wire dp0_bml_lclNumBufs$EN;

  // register dp0_bml_lclStarts
  reg [15 : 0] dp0_bml_lclStarts;
  wire [15 : 0] dp0_bml_lclStarts$D_IN;
  wire dp0_bml_lclStarts$EN;

  // register dp0_bml_mesgBase
  reg [15 : 0] dp0_bml_mesgBase;
  wire [15 : 0] dp0_bml_mesgBase$D_IN;
  wire dp0_bml_mesgBase$EN;

  // register dp0_bml_mesgSize
  reg [15 : 0] dp0_bml_mesgSize;
  wire [15 : 0] dp0_bml_mesgSize$D_IN;
  wire dp0_bml_mesgSize$EN;

  // register dp0_bml_metaBase
  reg [15 : 0] dp0_bml_metaBase;
  wire [15 : 0] dp0_bml_metaBase$D_IN;
  wire dp0_bml_metaBase$EN;

  // register dp0_bml_metaSize
  reg [15 : 0] dp0_bml_metaSize;
  wire [15 : 0] dp0_bml_metaSize$D_IN;
  wire dp0_bml_metaSize$EN;

  // register dp0_bml_remBuf_modulus
  reg [15 : 0] dp0_bml_remBuf_modulus;
  wire [15 : 0] dp0_bml_remBuf_modulus$D_IN;
  wire dp0_bml_remBuf_modulus$EN;

  // register dp0_bml_remBuf_value
  reg [15 : 0] dp0_bml_remBuf_value;
  wire [15 : 0] dp0_bml_remBuf_value$D_IN;
  wire dp0_bml_remBuf_value$EN;

  // register dp0_bml_remDone
  reg dp0_bml_remDone;
  wire dp0_bml_remDone$D_IN, dp0_bml_remDone$EN;

  // register dp0_bml_remDones
  reg [15 : 0] dp0_bml_remDones;
  wire [15 : 0] dp0_bml_remDones$D_IN;
  wire dp0_bml_remDones$EN;

  // register dp0_bml_remMesgAddr
  reg [15 : 0] dp0_bml_remMesgAddr;
  wire [15 : 0] dp0_bml_remMesgAddr$D_IN;
  wire dp0_bml_remMesgAddr$EN;

  // register dp0_bml_remMetaAddr
  reg [15 : 0] dp0_bml_remMetaAddr;
  wire [15 : 0] dp0_bml_remMetaAddr$D_IN;
  wire dp0_bml_remMetaAddr$EN;

  // register dp0_bml_remStart
  reg dp0_bml_remStart;
  wire dp0_bml_remStart$D_IN, dp0_bml_remStart$EN;

  // register dp0_bml_remStarts
  reg [15 : 0] dp0_bml_remStarts;
  wire [15 : 0] dp0_bml_remStarts$D_IN;
  wire dp0_bml_remStarts$EN;

  // register dp0_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt$D_IN;
  wire dp0_bram_serverAdapterA_1_cnt$EN;

  // register dp0_bram_serverAdapterA_1_s1
  reg [1 : 0] dp0_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_1_s1$D_IN;
  wire dp0_bram_serverAdapterA_1_s1$EN;

  // register dp0_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_2_cnt$D_IN;
  wire dp0_bram_serverAdapterA_2_cnt$EN;

  // register dp0_bram_serverAdapterA_2_s1
  reg [1 : 0] dp0_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_2_s1$D_IN;
  wire dp0_bram_serverAdapterA_2_s1$EN;

  // register dp0_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_3_cnt$D_IN;
  wire dp0_bram_serverAdapterA_3_cnt$EN;

  // register dp0_bram_serverAdapterA_3_s1
  reg [1 : 0] dp0_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_3_s1$D_IN;
  wire dp0_bram_serverAdapterA_3_s1$EN;

  // register dp0_bram_serverAdapterA_cnt
  reg [2 : 0] dp0_bram_serverAdapterA_cnt;
  wire [2 : 0] dp0_bram_serverAdapterA_cnt$D_IN;
  wire dp0_bram_serverAdapterA_cnt$EN;

  // register dp0_bram_serverAdapterA_s1
  reg [1 : 0] dp0_bram_serverAdapterA_s1;
  wire [1 : 0] dp0_bram_serverAdapterA_s1$D_IN;
  wire dp0_bram_serverAdapterA_s1$EN;

  // register dp0_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_1_cnt$D_IN;
  wire dp0_bram_serverAdapterB_1_cnt$EN;

  // register dp0_bram_serverAdapterB_1_s1
  reg [1 : 0] dp0_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_1_s1$D_IN;
  wire dp0_bram_serverAdapterB_1_s1$EN;

  // register dp0_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_2_cnt$D_IN;
  wire dp0_bram_serverAdapterB_2_cnt$EN;

  // register dp0_bram_serverAdapterB_2_s1
  reg [1 : 0] dp0_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_2_s1$D_IN;
  wire dp0_bram_serverAdapterB_2_s1$EN;

  // register dp0_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_3_cnt$D_IN;
  wire dp0_bram_serverAdapterB_3_cnt$EN;

  // register dp0_bram_serverAdapterB_3_s1
  reg [1 : 0] dp0_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_3_s1$D_IN;
  wire dp0_bram_serverAdapterB_3_s1$EN;

  // register dp0_bram_serverAdapterB_cnt
  reg [2 : 0] dp0_bram_serverAdapterB_cnt;
  wire [2 : 0] dp0_bram_serverAdapterB_cnt$D_IN;
  wire dp0_bram_serverAdapterB_cnt$EN;

  // register dp0_bram_serverAdapterB_s1
  reg [1 : 0] dp0_bram_serverAdapterB_s1;
  wire [1 : 0] dp0_bram_serverAdapterB_s1$D_IN;
  wire dp0_bram_serverAdapterB_s1$EN;

  // register dp0_dpControl
  reg [3 : 0] dp0_dpControl;
  wire [3 : 0] dp0_dpControl$D_IN;
  wire dp0_dpControl$EN;

  // register dp0_tlp_creditReady
  reg dp0_tlp_creditReady;
  wire dp0_tlp_creditReady$D_IN, dp0_tlp_creditReady$EN;

  // register dp0_tlp_debugBdata
  reg [127 : 0] dp0_tlp_debugBdata;
  wire [127 : 0] dp0_tlp_debugBdata$D_IN;
  wire dp0_tlp_debugBdata$EN;

  // register dp0_tlp_dmaDoTailEvent
  reg dp0_tlp_dmaDoTailEvent;
  reg dp0_tlp_dmaDoTailEvent$D_IN;
  wire dp0_tlp_dmaDoTailEvent$EN;

  // register dp0_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen;
  reg [9 : 0] dp0_tlp_dmaPullRemainDWLen$D_IN;
  wire dp0_tlp_dmaPullRemainDWLen$EN;

  // register dp0_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp0_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp0_tlp_dmaPullRemainDWSub$D_IN;
  wire dp0_tlp_dmaPullRemainDWSub$EN;

  // register dp0_tlp_dmaReqTag
  reg [4 : 0] dp0_tlp_dmaReqTag;
  wire [4 : 0] dp0_tlp_dmaReqTag$D_IN;
  wire dp0_tlp_dmaReqTag$EN;

  // register dp0_tlp_dmaTag
  reg [4 : 0] dp0_tlp_dmaTag;
  wire [4 : 0] dp0_tlp_dmaTag$D_IN;
  wire dp0_tlp_dmaTag$EN;

  // register dp0_tlp_doXmtMetaBody
  reg dp0_tlp_doXmtMetaBody;
  wire dp0_tlp_doXmtMetaBody$D_IN, dp0_tlp_doXmtMetaBody$EN;

  // register dp0_tlp_fabFlowAddr
  reg [31 : 0] dp0_tlp_fabFlowAddr;
  wire [31 : 0] dp0_tlp_fabFlowAddr$D_IN;
  wire dp0_tlp_fabFlowAddr$EN;

  // register dp0_tlp_fabMesgAccu
  reg [31 : 0] dp0_tlp_fabMesgAccu;
  reg [31 : 0] dp0_tlp_fabMesgAccu$D_IN;
  wire dp0_tlp_fabMesgAccu$EN;

  // register dp0_tlp_fabMesgAddr
  reg [31 : 0] dp0_tlp_fabMesgAddr;
  wire [31 : 0] dp0_tlp_fabMesgAddr$D_IN;
  wire dp0_tlp_fabMesgAddr$EN;

  // register dp0_tlp_fabMeta
  reg [128 : 0] dp0_tlp_fabMeta;
  reg [128 : 0] dp0_tlp_fabMeta$D_IN;
  wire dp0_tlp_fabMeta$EN;

  // register dp0_tlp_fabMetaAddr
  reg [31 : 0] dp0_tlp_fabMetaAddr;
  wire [31 : 0] dp0_tlp_fabMetaAddr$D_IN;
  wire dp0_tlp_fabMetaAddr$EN;

  // register dp0_tlp_farBufReady
  reg dp0_tlp_farBufReady;
  wire dp0_tlp_farBufReady$D_IN, dp0_tlp_farBufReady$EN;

  // register dp0_tlp_flowDiagCount
  reg [31 : 0] dp0_tlp_flowDiagCount;
  wire [31 : 0] dp0_tlp_flowDiagCount$D_IN;
  wire dp0_tlp_flowDiagCount$EN;

  // register dp0_tlp_gotResponseHeader
  reg dp0_tlp_gotResponseHeader;
  reg dp0_tlp_gotResponseHeader$D_IN;
  wire dp0_tlp_gotResponseHeader$EN;

  // register dp0_tlp_inIgnorePkt
  reg dp0_tlp_inIgnorePkt;
  wire dp0_tlp_inIgnorePkt$D_IN, dp0_tlp_inIgnorePkt$EN;

  // register dp0_tlp_maxPayloadSize
  reg [12 : 0] dp0_tlp_maxPayloadSize;
  wire [12 : 0] dp0_tlp_maxPayloadSize$D_IN;
  wire dp0_tlp_maxPayloadSize$EN;

  // register dp0_tlp_maxReadReqSize
  reg [12 : 0] dp0_tlp_maxReadReqSize;
  wire [12 : 0] dp0_tlp_maxReadReqSize$D_IN;
  wire dp0_tlp_maxReadReqSize$EN;

  // register dp0_tlp_mesgComplReceived
  reg [16 : 0] dp0_tlp_mesgComplReceived;
  reg [16 : 0] dp0_tlp_mesgComplReceived$D_IN;
  wire dp0_tlp_mesgComplReceived$EN;

  // register dp0_tlp_mesgLengthRemainPull
  reg [16 : 0] dp0_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPull$D_IN;
  wire dp0_tlp_mesgLengthRemainPull$EN;

  // register dp0_tlp_mesgLengthRemainPush
  reg [16 : 0] dp0_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp0_tlp_mesgLengthRemainPush$D_IN;
  wire dp0_tlp_mesgLengthRemainPush$EN;

  // register dp0_tlp_nearBufReady
  reg dp0_tlp_nearBufReady;
  wire dp0_tlp_nearBufReady$D_IN, dp0_tlp_nearBufReady$EN;

  // register dp0_tlp_outDwRemain
  reg [9 : 0] dp0_tlp_outDwRemain;
  wire [9 : 0] dp0_tlp_outDwRemain$D_IN;
  wire dp0_tlp_outDwRemain$EN;

  // register dp0_tlp_postSeqDwell
  reg [3 : 0] dp0_tlp_postSeqDwell;
  wire [3 : 0] dp0_tlp_postSeqDwell$D_IN;
  wire dp0_tlp_postSeqDwell$EN;

  // register dp0_tlp_pullTagMatch
  reg dp0_tlp_pullTagMatch;
  wire dp0_tlp_pullTagMatch$D_IN, dp0_tlp_pullTagMatch$EN;

  // register dp0_tlp_rdRespDwRemain
  reg [9 : 0] dp0_tlp_rdRespDwRemain;
  wire [9 : 0] dp0_tlp_rdRespDwRemain$D_IN;
  wire dp0_tlp_rdRespDwRemain$EN;

  // register dp0_tlp_readHeaderSent
  reg dp0_tlp_readHeaderSent;
  wire dp0_tlp_readHeaderSent$D_IN, dp0_tlp_readHeaderSent$EN;

  // register dp0_tlp_readNxtDWAddr
  reg [12 : 0] dp0_tlp_readNxtDWAddr;
  wire [12 : 0] dp0_tlp_readNxtDWAddr$D_IN;
  wire dp0_tlp_readNxtDWAddr$EN;

  // register dp0_tlp_readRemainDWLen
  reg [9 : 0] dp0_tlp_readRemainDWLen;
  wire [9 : 0] dp0_tlp_readRemainDWLen$D_IN;
  wire dp0_tlp_readRemainDWLen$EN;

  // register dp0_tlp_readStarted
  reg dp0_tlp_readStarted;
  wire dp0_tlp_readStarted$D_IN, dp0_tlp_readStarted$EN;

  // register dp0_tlp_remDone
  reg dp0_tlp_remDone;
  wire dp0_tlp_remDone$D_IN, dp0_tlp_remDone$EN;

  // register dp0_tlp_remMesgAccu
  reg [15 : 0] dp0_tlp_remMesgAccu;
  reg [15 : 0] dp0_tlp_remMesgAccu$D_IN;
  wire dp0_tlp_remMesgAccu$EN;

  // register dp0_tlp_remMesgAddr
  reg [15 : 0] dp0_tlp_remMesgAddr;
  wire [15 : 0] dp0_tlp_remMesgAddr$D_IN;
  wire dp0_tlp_remMesgAddr$EN;

  // register dp0_tlp_remMetaAddr
  reg [15 : 0] dp0_tlp_remMetaAddr;
  wire [15 : 0] dp0_tlp_remMetaAddr$D_IN;
  wire dp0_tlp_remMetaAddr$EN;

  // register dp0_tlp_remStart
  reg dp0_tlp_remStart;
  wire dp0_tlp_remStart$D_IN, dp0_tlp_remStart$EN;

  // register dp0_tlp_reqMesgInFlight
  reg dp0_tlp_reqMesgInFlight;
  reg dp0_tlp_reqMesgInFlight$D_IN;
  wire dp0_tlp_reqMesgInFlight$EN;

  // register dp0_tlp_reqMetaBodyInFlight
  reg dp0_tlp_reqMetaBodyInFlight;
  wire dp0_tlp_reqMetaBodyInFlight$D_IN, dp0_tlp_reqMetaBodyInFlight$EN;

  // register dp0_tlp_reqMetaInFlight
  reg dp0_tlp_reqMetaInFlight;
  reg dp0_tlp_reqMetaInFlight$D_IN;
  wire dp0_tlp_reqMetaInFlight$EN;

  // register dp0_tlp_srcMesgAccu
  reg [31 : 0] dp0_tlp_srcMesgAccu;
  wire [31 : 0] dp0_tlp_srcMesgAccu$D_IN;
  wire dp0_tlp_srcMesgAccu$EN;

  // register dp0_tlp_tlpMetaSent
  reg dp0_tlp_tlpMetaSent;
  wire dp0_tlp_tlpMetaSent$D_IN, dp0_tlp_tlpMetaSent$EN;

  // register dp0_tlp_tlpRcvBusy
  reg dp0_tlp_tlpRcvBusy;
  reg dp0_tlp_tlpRcvBusy$D_IN;
  wire dp0_tlp_tlpRcvBusy$EN;

  // register dp0_tlp_tlpXmtBusy
  reg dp0_tlp_tlpXmtBusy;
  reg dp0_tlp_tlpXmtBusy$D_IN;
  wire dp0_tlp_tlpXmtBusy$EN;

  // register dp0_tlp_writeDWAddr
  reg [12 : 0] dp0_tlp_writeDWAddr;
  wire [12 : 0] dp0_tlp_writeDWAddr$D_IN;
  wire dp0_tlp_writeDWAddr$EN;

  // register dp0_tlp_writeLastBE
  reg [3 : 0] dp0_tlp_writeLastBE;
  wire [3 : 0] dp0_tlp_writeLastBE$D_IN;
  wire dp0_tlp_writeLastBE$EN;

  // register dp0_tlp_writeRemainDWLen
  reg [9 : 0] dp0_tlp_writeRemainDWLen;
  wire [9 : 0] dp0_tlp_writeRemainDWLen$D_IN;
  wire dp0_tlp_writeRemainDWLen$EN;

  // register dp0_tlp_xmtMetaInFlight
  reg dp0_tlp_xmtMetaInFlight;
  wire dp0_tlp_xmtMetaInFlight$D_IN, dp0_tlp_xmtMetaInFlight$EN;

  // register dp0_tlp_xmtMetaOK
  reg dp0_tlp_xmtMetaOK;
  reg dp0_tlp_xmtMetaOK$D_IN;
  wire dp0_tlp_xmtMetaOK$EN;

  // register dp0_wci_cEdge
  reg [2 : 0] dp0_wci_cEdge;
  wire [2 : 0] dp0_wci_cEdge$D_IN;
  wire dp0_wci_cEdge$EN;

  // register dp0_wci_cState
  reg [2 : 0] dp0_wci_cState;
  wire [2 : 0] dp0_wci_cState$D_IN;
  wire dp0_wci_cState$EN;

  // register dp0_wci_ctlAckReg
  reg dp0_wci_ctlAckReg;
  wire dp0_wci_ctlAckReg$D_IN, dp0_wci_ctlAckReg$EN;

  // register dp0_wci_ctlOpActive
  reg dp0_wci_ctlOpActive;
  wire dp0_wci_ctlOpActive$D_IN, dp0_wci_ctlOpActive$EN;

  // register dp0_wci_illegalEdge
  reg dp0_wci_illegalEdge;
  wire dp0_wci_illegalEdge$D_IN, dp0_wci_illegalEdge$EN;

  // register dp0_wci_nState
  reg [2 : 0] dp0_wci_nState;
  reg [2 : 0] dp0_wci_nState$D_IN;
  wire dp0_wci_nState$EN;

  // register dp0_wci_reqF_countReg
  reg [1 : 0] dp0_wci_reqF_countReg;
  wire [1 : 0] dp0_wci_reqF_countReg$D_IN;
  wire dp0_wci_reqF_countReg$EN;

  // register dp0_wci_respF_c_r
  reg [1 : 0] dp0_wci_respF_c_r;
  wire [1 : 0] dp0_wci_respF_c_r$D_IN;
  wire dp0_wci_respF_c_r$EN;

  // register dp0_wci_respF_q_0
  reg [33 : 0] dp0_wci_respF_q_0;
  reg [33 : 0] dp0_wci_respF_q_0$D_IN;
  wire dp0_wci_respF_q_0$EN;

  // register dp0_wci_respF_q_1
  reg [33 : 0] dp0_wci_respF_q_1;
  reg [33 : 0] dp0_wci_respF_q_1$D_IN;
  wire dp0_wci_respF_q_1$EN;

  // register dp0_wci_sFlagReg
  reg dp0_wci_sFlagReg;
  wire dp0_wci_sFlagReg$D_IN, dp0_wci_sFlagReg$EN;

  // register dp0_wci_sThreadBusy_d
  reg dp0_wci_sThreadBusy_d;
  wire dp0_wci_sThreadBusy_d$D_IN, dp0_wci_sThreadBusy_d$EN;

  // register dp0_wmi_addr
  reg [13 : 0] dp0_wmi_addr;
  wire [13 : 0] dp0_wmi_addr$D_IN;
  wire dp0_wmi_addr$EN;

  // register dp0_wmi_bufDwell
  reg [1 : 0] dp0_wmi_bufDwell;
  wire [1 : 0] dp0_wmi_bufDwell$D_IN;
  wire dp0_wmi_bufDwell$EN;

  // register dp0_wmi_bytesRemainReq
  reg [13 : 0] dp0_wmi_bytesRemainReq;
  wire [13 : 0] dp0_wmi_bytesRemainReq$D_IN;
  wire dp0_wmi_bytesRemainReq$EN;

  // register dp0_wmi_bytesRemainResp
  reg [13 : 0] dp0_wmi_bytesRemainResp;
  wire [13 : 0] dp0_wmi_bytesRemainResp$D_IN;
  wire dp0_wmi_bytesRemainResp$EN;

  // register dp0_wmi_doneWithMesg
  reg dp0_wmi_doneWithMesg;
  wire dp0_wmi_doneWithMesg$D_IN, dp0_wmi_doneWithMesg$EN;

  // register dp0_wmi_lastMesg
  reg [31 : 0] dp0_wmi_lastMesg;
  wire [31 : 0] dp0_wmi_lastMesg$D_IN;
  wire dp0_wmi_lastMesg$EN;

  // register dp0_wmi_lclMesgAddr
  reg [14 : 0] dp0_wmi_lclMesgAddr;
  wire [14 : 0] dp0_wmi_lclMesgAddr$D_IN;
  wire dp0_wmi_lclMesgAddr$EN;

  // register dp0_wmi_lclMetaAddr
  reg [14 : 0] dp0_wmi_lclMetaAddr;
  wire [14 : 0] dp0_wmi_lclMetaAddr$D_IN;
  wire dp0_wmi_lclMetaAddr$EN;

  // register dp0_wmi_mesgBufReady
  reg dp0_wmi_mesgBufReady;
  wire dp0_wmi_mesgBufReady$D_IN, dp0_wmi_mesgBufReady$EN;

  // register dp0_wmi_mesgBusy
  reg dp0_wmi_mesgBusy;
  wire dp0_wmi_mesgBusy$D_IN, dp0_wmi_mesgBusy$EN;

  // register dp0_wmi_mesgCount
  reg [31 : 0] dp0_wmi_mesgCount;
  wire [31 : 0] dp0_wmi_mesgCount$D_IN;
  wire dp0_wmi_mesgCount$EN;

  // register dp0_wmi_mesgDone
  reg dp0_wmi_mesgDone;
  wire dp0_wmi_mesgDone$D_IN, dp0_wmi_mesgDone$EN;

  // register dp0_wmi_mesgMeta
  reg [128 : 0] dp0_wmi_mesgMeta;
  wire [128 : 0] dp0_wmi_mesgMeta$D_IN;
  wire dp0_wmi_mesgMeta$EN;

  // register dp0_wmi_mesgStart
  reg dp0_wmi_mesgStart;
  wire dp0_wmi_mesgStart$D_IN, dp0_wmi_mesgStart$EN;

  // register dp0_wmi_metaBusy
  reg dp0_wmi_metaBusy;
  wire dp0_wmi_metaBusy$D_IN, dp0_wmi_metaBusy$EN;

  // register dp0_wmi_p4B
  reg [1 : 0] dp0_wmi_p4B;
  wire [1 : 0] dp0_wmi_p4B$D_IN;
  wire dp0_wmi_p4B$EN;

  // register dp0_wmi_rdActive
  reg dp0_wmi_rdActive;
  wire dp0_wmi_rdActive$D_IN, dp0_wmi_rdActive$EN;

  // register dp0_wmi_reqCount
  reg [15 : 0] dp0_wmi_reqCount;
  wire [15 : 0] dp0_wmi_reqCount$D_IN;
  wire dp0_wmi_reqCount$EN;

  // register dp0_wmi_thisMesg
  reg [31 : 0] dp0_wmi_thisMesg;
  wire [31 : 0] dp0_wmi_thisMesg$D_IN;
  wire dp0_wmi_thisMesg$EN;

  // register dp0_wmi_wmi_blockReq
  reg dp0_wmi_wmi_blockReq;
  wire dp0_wmi_wmi_blockReq$D_IN, dp0_wmi_wmi_blockReq$EN;

  // register dp0_wmi_wmi_dhF_countReg
  reg [1 : 0] dp0_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp0_wmi_wmi_dhF_countReg$D_IN;
  wire dp0_wmi_wmi_dhF_countReg$EN;

  // register dp0_wmi_wmi_dhF_levelsValid
  reg dp0_wmi_wmi_dhF_levelsValid;
  wire dp0_wmi_wmi_dhF_levelsValid$D_IN, dp0_wmi_wmi_dhF_levelsValid$EN;

  // register dp0_wmi_wmi_errorSticky
  reg dp0_wmi_wmi_errorSticky;
  wire dp0_wmi_wmi_errorSticky$D_IN, dp0_wmi_wmi_errorSticky$EN;

  // register dp0_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp0_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp0_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp0_wmi_wmi_mFlagF_countReg$EN;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  reg dp0_wmi_wmi_mFlagF_levelsValid;
  wire dp0_wmi_wmi_mFlagF_levelsValid$D_IN, dp0_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp0_wmi_wmi_mFlagReg
  reg [31 : 0] dp0_wmi_wmi_mFlagReg;
  wire [31 : 0] dp0_wmi_wmi_mFlagReg$D_IN;
  wire dp0_wmi_wmi_mFlagReg$EN;

  // register dp0_wmi_wmi_operateD
  reg dp0_wmi_wmi_operateD;
  wire dp0_wmi_wmi_operateD$D_IN, dp0_wmi_wmi_operateD$EN;

  // register dp0_wmi_wmi_peerIsReady
  reg dp0_wmi_wmi_peerIsReady;
  wire dp0_wmi_wmi_peerIsReady$D_IN, dp0_wmi_wmi_peerIsReady$EN;

  // register dp0_wmi_wmi_reqF_countReg
  reg [1 : 0] dp0_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp0_wmi_wmi_reqF_countReg$D_IN;
  wire dp0_wmi_wmi_reqF_countReg$EN;

  // register dp0_wmi_wmi_reqF_levelsValid
  reg dp0_wmi_wmi_reqF_levelsValid;
  wire dp0_wmi_wmi_reqF_levelsValid$D_IN, dp0_wmi_wmi_reqF_levelsValid$EN;

  // register dp0_wmi_wmi_respF_c_r
  reg [1 : 0] dp0_wmi_wmi_respF_c_r;
  wire [1 : 0] dp0_wmi_wmi_respF_c_r$D_IN;
  wire dp0_wmi_wmi_respF_c_r$EN;

  // register dp0_wmi_wmi_respF_q_0
  reg [257 : 0] dp0_wmi_wmi_respF_q_0;
  wire [257 : 0] dp0_wmi_wmi_respF_q_0$D_IN;
  wire dp0_wmi_wmi_respF_q_0$EN;

  // register dp0_wmi_wmi_respF_q_1
  reg [257 : 0] dp0_wmi_wmi_respF_q_1;
  wire [257 : 0] dp0_wmi_wmi_respF_q_1$D_IN;
  wire dp0_wmi_wmi_respF_q_1$EN;

  // register dp0_wmi_wmi_sFlagReg
  reg [31 : 0] dp0_wmi_wmi_sFlagReg;
  wire [31 : 0] dp0_wmi_wmi_sFlagReg$D_IN;
  wire dp0_wmi_wmi_sFlagReg$EN;

  // register dp0_wmi_wmi_statusR
  reg [7 : 0] dp0_wmi_wmi_statusR;
  wire [7 : 0] dp0_wmi_wmi_statusR$D_IN;
  wire dp0_wmi_wmi_statusR$EN;

  // register dp0_wmi_wmi_trafficSticky
  reg dp0_wmi_wmi_trafficSticky;
  wire dp0_wmi_wmi_trafficSticky$D_IN, dp0_wmi_wmi_trafficSticky$EN;

  // register dp0_wmi_wrActive
  reg dp0_wmi_wrActive;
  wire dp0_wmi_wrActive$D_IN, dp0_wmi_wrActive$EN;

  // register dp0_wmi_wrFinalize
  reg dp0_wmi_wrFinalize;
  wire dp0_wmi_wrFinalize$D_IN, dp0_wmi_wrFinalize$EN;

  // register dp0_wmi_wrtCount
  reg [15 : 0] dp0_wmi_wrtCount;
  wire [15 : 0] dp0_wmi_wrtCount$D_IN;
  wire dp0_wmi_wrtCount$EN;

  // register dp0_wti_nowReq
  reg [66 : 0] dp0_wti_nowReq;
  wire [66 : 0] dp0_wti_nowReq$D_IN;
  wire dp0_wti_nowReq$EN;

  // register dp1_bml_crdBuf_modulus
  reg [15 : 0] dp1_bml_crdBuf_modulus;
  wire [15 : 0] dp1_bml_crdBuf_modulus$D_IN;
  wire dp1_bml_crdBuf_modulus$EN;

  // register dp1_bml_crdBuf_value
  reg [15 : 0] dp1_bml_crdBuf_value;
  wire [15 : 0] dp1_bml_crdBuf_value$D_IN;
  wire dp1_bml_crdBuf_value$EN;

  // register dp1_bml_fabAvail
  reg dp1_bml_fabAvail;
  wire dp1_bml_fabAvail$D_IN, dp1_bml_fabAvail$EN;

  // register dp1_bml_fabBuf_modulus
  reg [15 : 0] dp1_bml_fabBuf_modulus;
  wire [15 : 0] dp1_bml_fabBuf_modulus$D_IN;
  wire dp1_bml_fabBuf_modulus$EN;

  // register dp1_bml_fabBuf_value
  reg [15 : 0] dp1_bml_fabBuf_value;
  wire [15 : 0] dp1_bml_fabBuf_value$D_IN;
  wire dp1_bml_fabBuf_value$EN;

  // register dp1_bml_fabBufsAvail
  reg [15 : 0] dp1_bml_fabBufsAvail;
  wire [15 : 0] dp1_bml_fabBufsAvail$D_IN;
  wire dp1_bml_fabBufsAvail$EN;

  // register dp1_bml_fabDone
  reg dp1_bml_fabDone;
  wire dp1_bml_fabDone$D_IN, dp1_bml_fabDone$EN;

  // register dp1_bml_fabFlowAddr
  reg [31 : 0] dp1_bml_fabFlowAddr;
  reg [31 : 0] dp1_bml_fabFlowAddr$D_IN;
  wire dp1_bml_fabFlowAddr$EN;

  // register dp1_bml_fabFlowBase
  reg [31 : 0] dp1_bml_fabFlowBase;
  wire [31 : 0] dp1_bml_fabFlowBase$D_IN;
  wire dp1_bml_fabFlowBase$EN;

  // register dp1_bml_fabFlowSize
  reg [31 : 0] dp1_bml_fabFlowSize;
  wire [31 : 0] dp1_bml_fabFlowSize$D_IN;
  wire dp1_bml_fabFlowSize$EN;

  // register dp1_bml_fabMesgAddr
  reg [31 : 0] dp1_bml_fabMesgAddr;
  wire [31 : 0] dp1_bml_fabMesgAddr$D_IN;
  wire dp1_bml_fabMesgAddr$EN;

  // register dp1_bml_fabMesgBase
  reg [31 : 0] dp1_bml_fabMesgBase;
  wire [31 : 0] dp1_bml_fabMesgBase$D_IN;
  wire dp1_bml_fabMesgBase$EN;

  // register dp1_bml_fabMesgSize
  reg [31 : 0] dp1_bml_fabMesgSize;
  wire [31 : 0] dp1_bml_fabMesgSize$D_IN;
  wire dp1_bml_fabMesgSize$EN;

  // register dp1_bml_fabMetaAddr
  reg [31 : 0] dp1_bml_fabMetaAddr;
  wire [31 : 0] dp1_bml_fabMetaAddr$D_IN;
  wire dp1_bml_fabMetaAddr$EN;

  // register dp1_bml_fabMetaBase
  reg [31 : 0] dp1_bml_fabMetaBase;
  wire [31 : 0] dp1_bml_fabMetaBase$D_IN;
  wire dp1_bml_fabMetaBase$EN;

  // register dp1_bml_fabMetaSize
  reg [31 : 0] dp1_bml_fabMetaSize;
  wire [31 : 0] dp1_bml_fabMetaSize$D_IN;
  wire dp1_bml_fabMetaSize$EN;

  // register dp1_bml_fabNumBufs
  reg [15 : 0] dp1_bml_fabNumBufs;
  wire [15 : 0] dp1_bml_fabNumBufs$D_IN;
  wire dp1_bml_fabNumBufs$EN;

  // register dp1_bml_lclBufDone
  reg dp1_bml_lclBufDone;
  wire dp1_bml_lclBufDone$D_IN, dp1_bml_lclBufDone$EN;

  // register dp1_bml_lclBufStart
  reg dp1_bml_lclBufStart;
  wire dp1_bml_lclBufStart$D_IN, dp1_bml_lclBufStart$EN;

  // register dp1_bml_lclBuf_modulus
  reg [15 : 0] dp1_bml_lclBuf_modulus;
  wire [15 : 0] dp1_bml_lclBuf_modulus$D_IN;
  wire dp1_bml_lclBuf_modulus$EN;

  // register dp1_bml_lclBuf_value
  reg [15 : 0] dp1_bml_lclBuf_value;
  wire [15 : 0] dp1_bml_lclBuf_value$D_IN;
  wire dp1_bml_lclBuf_value$EN;

  // register dp1_bml_lclBufsAR
  reg [15 : 0] dp1_bml_lclBufsAR;
  wire [15 : 0] dp1_bml_lclBufsAR$D_IN;
  wire dp1_bml_lclBufsAR$EN;

  // register dp1_bml_lclBufsCF
  reg [15 : 0] dp1_bml_lclBufsCF;
  wire [15 : 0] dp1_bml_lclBufsCF$D_IN;
  wire dp1_bml_lclBufsCF$EN;

  // register dp1_bml_lclCredit
  reg [15 : 0] dp1_bml_lclCredit;
  wire [15 : 0] dp1_bml_lclCredit$D_IN;
  wire dp1_bml_lclCredit$EN;

  // register dp1_bml_lclDones
  reg [15 : 0] dp1_bml_lclDones;
  wire [15 : 0] dp1_bml_lclDones$D_IN;
  wire dp1_bml_lclDones$EN;

  // register dp1_bml_lclMesgAddr
  reg [15 : 0] dp1_bml_lclMesgAddr;
  wire [15 : 0] dp1_bml_lclMesgAddr$D_IN;
  wire dp1_bml_lclMesgAddr$EN;

  // register dp1_bml_lclMetaAddr
  reg [15 : 0] dp1_bml_lclMetaAddr;
  wire [15 : 0] dp1_bml_lclMetaAddr$D_IN;
  wire dp1_bml_lclMetaAddr$EN;

  // register dp1_bml_lclNumBufs
  reg [15 : 0] dp1_bml_lclNumBufs;
  wire [15 : 0] dp1_bml_lclNumBufs$D_IN;
  wire dp1_bml_lclNumBufs$EN;

  // register dp1_bml_lclStarts
  reg [15 : 0] dp1_bml_lclStarts;
  wire [15 : 0] dp1_bml_lclStarts$D_IN;
  wire dp1_bml_lclStarts$EN;

  // register dp1_bml_mesgBase
  reg [15 : 0] dp1_bml_mesgBase;
  wire [15 : 0] dp1_bml_mesgBase$D_IN;
  wire dp1_bml_mesgBase$EN;

  // register dp1_bml_mesgSize
  reg [15 : 0] dp1_bml_mesgSize;
  wire [15 : 0] dp1_bml_mesgSize$D_IN;
  wire dp1_bml_mesgSize$EN;

  // register dp1_bml_metaBase
  reg [15 : 0] dp1_bml_metaBase;
  wire [15 : 0] dp1_bml_metaBase$D_IN;
  wire dp1_bml_metaBase$EN;

  // register dp1_bml_metaSize
  reg [15 : 0] dp1_bml_metaSize;
  wire [15 : 0] dp1_bml_metaSize$D_IN;
  wire dp1_bml_metaSize$EN;

  // register dp1_bml_remBuf_modulus
  reg [15 : 0] dp1_bml_remBuf_modulus;
  wire [15 : 0] dp1_bml_remBuf_modulus$D_IN;
  wire dp1_bml_remBuf_modulus$EN;

  // register dp1_bml_remBuf_value
  reg [15 : 0] dp1_bml_remBuf_value;
  wire [15 : 0] dp1_bml_remBuf_value$D_IN;
  wire dp1_bml_remBuf_value$EN;

  // register dp1_bml_remDone
  reg dp1_bml_remDone;
  wire dp1_bml_remDone$D_IN, dp1_bml_remDone$EN;

  // register dp1_bml_remDones
  reg [15 : 0] dp1_bml_remDones;
  wire [15 : 0] dp1_bml_remDones$D_IN;
  wire dp1_bml_remDones$EN;

  // register dp1_bml_remMesgAddr
  reg [15 : 0] dp1_bml_remMesgAddr;
  wire [15 : 0] dp1_bml_remMesgAddr$D_IN;
  wire dp1_bml_remMesgAddr$EN;

  // register dp1_bml_remMetaAddr
  reg [15 : 0] dp1_bml_remMetaAddr;
  wire [15 : 0] dp1_bml_remMetaAddr$D_IN;
  wire dp1_bml_remMetaAddr$EN;

  // register dp1_bml_remStart
  reg dp1_bml_remStart;
  wire dp1_bml_remStart$D_IN, dp1_bml_remStart$EN;

  // register dp1_bml_remStarts
  reg [15 : 0] dp1_bml_remStarts;
  wire [15 : 0] dp1_bml_remStarts$D_IN;
  wire dp1_bml_remStarts$EN;

  // register dp1_bram_serverAdapterA_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_1_cnt$D_IN;
  wire dp1_bram_serverAdapterA_1_cnt$EN;

  // register dp1_bram_serverAdapterA_1_s1
  reg [1 : 0] dp1_bram_serverAdapterA_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_1_s1$D_IN;
  wire dp1_bram_serverAdapterA_1_s1$EN;

  // register dp1_bram_serverAdapterA_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_2_cnt$D_IN;
  wire dp1_bram_serverAdapterA_2_cnt$EN;

  // register dp1_bram_serverAdapterA_2_s1
  reg [1 : 0] dp1_bram_serverAdapterA_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_2_s1$D_IN;
  wire dp1_bram_serverAdapterA_2_s1$EN;

  // register dp1_bram_serverAdapterA_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_3_cnt$D_IN;
  wire dp1_bram_serverAdapterA_3_cnt$EN;

  // register dp1_bram_serverAdapterA_3_s1
  reg [1 : 0] dp1_bram_serverAdapterA_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_3_s1$D_IN;
  wire dp1_bram_serverAdapterA_3_s1$EN;

  // register dp1_bram_serverAdapterA_cnt
  reg [2 : 0] dp1_bram_serverAdapterA_cnt;
  wire [2 : 0] dp1_bram_serverAdapterA_cnt$D_IN;
  wire dp1_bram_serverAdapterA_cnt$EN;

  // register dp1_bram_serverAdapterA_s1
  reg [1 : 0] dp1_bram_serverAdapterA_s1;
  wire [1 : 0] dp1_bram_serverAdapterA_s1$D_IN;
  wire dp1_bram_serverAdapterA_s1$EN;

  // register dp1_bram_serverAdapterB_1_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_1_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_1_cnt$D_IN;
  wire dp1_bram_serverAdapterB_1_cnt$EN;

  // register dp1_bram_serverAdapterB_1_s1
  reg [1 : 0] dp1_bram_serverAdapterB_1_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_1_s1$D_IN;
  wire dp1_bram_serverAdapterB_1_s1$EN;

  // register dp1_bram_serverAdapterB_2_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_2_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_2_cnt$D_IN;
  wire dp1_bram_serverAdapterB_2_cnt$EN;

  // register dp1_bram_serverAdapterB_2_s1
  reg [1 : 0] dp1_bram_serverAdapterB_2_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_2_s1$D_IN;
  wire dp1_bram_serverAdapterB_2_s1$EN;

  // register dp1_bram_serverAdapterB_3_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_3_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_3_cnt$D_IN;
  wire dp1_bram_serverAdapterB_3_cnt$EN;

  // register dp1_bram_serverAdapterB_3_s1
  reg [1 : 0] dp1_bram_serverAdapterB_3_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_3_s1$D_IN;
  wire dp1_bram_serverAdapterB_3_s1$EN;

  // register dp1_bram_serverAdapterB_cnt
  reg [2 : 0] dp1_bram_serverAdapterB_cnt;
  wire [2 : 0] dp1_bram_serverAdapterB_cnt$D_IN;
  wire dp1_bram_serverAdapterB_cnt$EN;

  // register dp1_bram_serverAdapterB_s1
  reg [1 : 0] dp1_bram_serverAdapterB_s1;
  wire [1 : 0] dp1_bram_serverAdapterB_s1$D_IN;
  wire dp1_bram_serverAdapterB_s1$EN;

  // register dp1_dpControl
  reg [3 : 0] dp1_dpControl;
  wire [3 : 0] dp1_dpControl$D_IN;
  wire dp1_dpControl$EN;

  // register dp1_tlp_creditReady
  reg dp1_tlp_creditReady;
  wire dp1_tlp_creditReady$D_IN, dp1_tlp_creditReady$EN;

  // register dp1_tlp_debugBdata
  reg [127 : 0] dp1_tlp_debugBdata;
  wire [127 : 0] dp1_tlp_debugBdata$D_IN;
  wire dp1_tlp_debugBdata$EN;

  // register dp1_tlp_dmaDoTailEvent
  reg dp1_tlp_dmaDoTailEvent;
  reg dp1_tlp_dmaDoTailEvent$D_IN;
  wire dp1_tlp_dmaDoTailEvent$EN;

  // register dp1_tlp_dmaPullRemainDWLen
  reg [9 : 0] dp1_tlp_dmaPullRemainDWLen;
  reg [9 : 0] dp1_tlp_dmaPullRemainDWLen$D_IN;
  wire dp1_tlp_dmaPullRemainDWLen$EN;

  // register dp1_tlp_dmaPullRemainDWSub
  reg [9 : 0] dp1_tlp_dmaPullRemainDWSub;
  wire [9 : 0] dp1_tlp_dmaPullRemainDWSub$D_IN;
  wire dp1_tlp_dmaPullRemainDWSub$EN;

  // register dp1_tlp_dmaReqTag
  reg [4 : 0] dp1_tlp_dmaReqTag;
  wire [4 : 0] dp1_tlp_dmaReqTag$D_IN;
  wire dp1_tlp_dmaReqTag$EN;

  // register dp1_tlp_dmaTag
  reg [4 : 0] dp1_tlp_dmaTag;
  wire [4 : 0] dp1_tlp_dmaTag$D_IN;
  wire dp1_tlp_dmaTag$EN;

  // register dp1_tlp_doXmtMetaBody
  reg dp1_tlp_doXmtMetaBody;
  wire dp1_tlp_doXmtMetaBody$D_IN, dp1_tlp_doXmtMetaBody$EN;

  // register dp1_tlp_fabFlowAddr
  reg [31 : 0] dp1_tlp_fabFlowAddr;
  wire [31 : 0] dp1_tlp_fabFlowAddr$D_IN;
  wire dp1_tlp_fabFlowAddr$EN;

  // register dp1_tlp_fabMesgAccu
  reg [31 : 0] dp1_tlp_fabMesgAccu;
  reg [31 : 0] dp1_tlp_fabMesgAccu$D_IN;
  wire dp1_tlp_fabMesgAccu$EN;

  // register dp1_tlp_fabMesgAddr
  reg [31 : 0] dp1_tlp_fabMesgAddr;
  wire [31 : 0] dp1_tlp_fabMesgAddr$D_IN;
  wire dp1_tlp_fabMesgAddr$EN;

  // register dp1_tlp_fabMeta
  reg [128 : 0] dp1_tlp_fabMeta;
  reg [128 : 0] dp1_tlp_fabMeta$D_IN;
  wire dp1_tlp_fabMeta$EN;

  // register dp1_tlp_fabMetaAddr
  reg [31 : 0] dp1_tlp_fabMetaAddr;
  wire [31 : 0] dp1_tlp_fabMetaAddr$D_IN;
  wire dp1_tlp_fabMetaAddr$EN;

  // register dp1_tlp_farBufReady
  reg dp1_tlp_farBufReady;
  wire dp1_tlp_farBufReady$D_IN, dp1_tlp_farBufReady$EN;

  // register dp1_tlp_flowDiagCount
  reg [31 : 0] dp1_tlp_flowDiagCount;
  wire [31 : 0] dp1_tlp_flowDiagCount$D_IN;
  wire dp1_tlp_flowDiagCount$EN;

  // register dp1_tlp_gotResponseHeader
  reg dp1_tlp_gotResponseHeader;
  reg dp1_tlp_gotResponseHeader$D_IN;
  wire dp1_tlp_gotResponseHeader$EN;

  // register dp1_tlp_inIgnorePkt
  reg dp1_tlp_inIgnorePkt;
  wire dp1_tlp_inIgnorePkt$D_IN, dp1_tlp_inIgnorePkt$EN;

  // register dp1_tlp_maxPayloadSize
  reg [12 : 0] dp1_tlp_maxPayloadSize;
  wire [12 : 0] dp1_tlp_maxPayloadSize$D_IN;
  wire dp1_tlp_maxPayloadSize$EN;

  // register dp1_tlp_maxReadReqSize
  reg [12 : 0] dp1_tlp_maxReadReqSize;
  wire [12 : 0] dp1_tlp_maxReadReqSize$D_IN;
  wire dp1_tlp_maxReadReqSize$EN;

  // register dp1_tlp_mesgComplReceived
  reg [16 : 0] dp1_tlp_mesgComplReceived;
  reg [16 : 0] dp1_tlp_mesgComplReceived$D_IN;
  wire dp1_tlp_mesgComplReceived$EN;

  // register dp1_tlp_mesgLengthRemainPull
  reg [16 : 0] dp1_tlp_mesgLengthRemainPull;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPull$D_IN;
  wire dp1_tlp_mesgLengthRemainPull$EN;

  // register dp1_tlp_mesgLengthRemainPush
  reg [16 : 0] dp1_tlp_mesgLengthRemainPush;
  wire [16 : 0] dp1_tlp_mesgLengthRemainPush$D_IN;
  wire dp1_tlp_mesgLengthRemainPush$EN;

  // register dp1_tlp_nearBufReady
  reg dp1_tlp_nearBufReady;
  wire dp1_tlp_nearBufReady$D_IN, dp1_tlp_nearBufReady$EN;

  // register dp1_tlp_outDwRemain
  reg [9 : 0] dp1_tlp_outDwRemain;
  wire [9 : 0] dp1_tlp_outDwRemain$D_IN;
  wire dp1_tlp_outDwRemain$EN;

  // register dp1_tlp_postSeqDwell
  reg [3 : 0] dp1_tlp_postSeqDwell;
  wire [3 : 0] dp1_tlp_postSeqDwell$D_IN;
  wire dp1_tlp_postSeqDwell$EN;

  // register dp1_tlp_pullTagMatch
  reg dp1_tlp_pullTagMatch;
  wire dp1_tlp_pullTagMatch$D_IN, dp1_tlp_pullTagMatch$EN;

  // register dp1_tlp_rdRespDwRemain
  reg [9 : 0] dp1_tlp_rdRespDwRemain;
  wire [9 : 0] dp1_tlp_rdRespDwRemain$D_IN;
  wire dp1_tlp_rdRespDwRemain$EN;

  // register dp1_tlp_readHeaderSent
  reg dp1_tlp_readHeaderSent;
  wire dp1_tlp_readHeaderSent$D_IN, dp1_tlp_readHeaderSent$EN;

  // register dp1_tlp_readNxtDWAddr
  reg [12 : 0] dp1_tlp_readNxtDWAddr;
  wire [12 : 0] dp1_tlp_readNxtDWAddr$D_IN;
  wire dp1_tlp_readNxtDWAddr$EN;

  // register dp1_tlp_readRemainDWLen
  reg [9 : 0] dp1_tlp_readRemainDWLen;
  wire [9 : 0] dp1_tlp_readRemainDWLen$D_IN;
  wire dp1_tlp_readRemainDWLen$EN;

  // register dp1_tlp_readStarted
  reg dp1_tlp_readStarted;
  wire dp1_tlp_readStarted$D_IN, dp1_tlp_readStarted$EN;

  // register dp1_tlp_remDone
  reg dp1_tlp_remDone;
  wire dp1_tlp_remDone$D_IN, dp1_tlp_remDone$EN;

  // register dp1_tlp_remMesgAccu
  reg [15 : 0] dp1_tlp_remMesgAccu;
  reg [15 : 0] dp1_tlp_remMesgAccu$D_IN;
  wire dp1_tlp_remMesgAccu$EN;

  // register dp1_tlp_remMesgAddr
  reg [15 : 0] dp1_tlp_remMesgAddr;
  wire [15 : 0] dp1_tlp_remMesgAddr$D_IN;
  wire dp1_tlp_remMesgAddr$EN;

  // register dp1_tlp_remMetaAddr
  reg [15 : 0] dp1_tlp_remMetaAddr;
  wire [15 : 0] dp1_tlp_remMetaAddr$D_IN;
  wire dp1_tlp_remMetaAddr$EN;

  // register dp1_tlp_remStart
  reg dp1_tlp_remStart;
  wire dp1_tlp_remStart$D_IN, dp1_tlp_remStart$EN;

  // register dp1_tlp_reqMesgInFlight
  reg dp1_tlp_reqMesgInFlight;
  reg dp1_tlp_reqMesgInFlight$D_IN;
  wire dp1_tlp_reqMesgInFlight$EN;

  // register dp1_tlp_reqMetaBodyInFlight
  reg dp1_tlp_reqMetaBodyInFlight;
  wire dp1_tlp_reqMetaBodyInFlight$D_IN, dp1_tlp_reqMetaBodyInFlight$EN;

  // register dp1_tlp_reqMetaInFlight
  reg dp1_tlp_reqMetaInFlight;
  reg dp1_tlp_reqMetaInFlight$D_IN;
  wire dp1_tlp_reqMetaInFlight$EN;

  // register dp1_tlp_srcMesgAccu
  reg [31 : 0] dp1_tlp_srcMesgAccu;
  wire [31 : 0] dp1_tlp_srcMesgAccu$D_IN;
  wire dp1_tlp_srcMesgAccu$EN;

  // register dp1_tlp_tlpMetaSent
  reg dp1_tlp_tlpMetaSent;
  wire dp1_tlp_tlpMetaSent$D_IN, dp1_tlp_tlpMetaSent$EN;

  // register dp1_tlp_tlpRcvBusy
  reg dp1_tlp_tlpRcvBusy;
  reg dp1_tlp_tlpRcvBusy$D_IN;
  wire dp1_tlp_tlpRcvBusy$EN;

  // register dp1_tlp_tlpXmtBusy
  reg dp1_tlp_tlpXmtBusy;
  reg dp1_tlp_tlpXmtBusy$D_IN;
  wire dp1_tlp_tlpXmtBusy$EN;

  // register dp1_tlp_writeDWAddr
  reg [12 : 0] dp1_tlp_writeDWAddr;
  wire [12 : 0] dp1_tlp_writeDWAddr$D_IN;
  wire dp1_tlp_writeDWAddr$EN;

  // register dp1_tlp_writeLastBE
  reg [3 : 0] dp1_tlp_writeLastBE;
  wire [3 : 0] dp1_tlp_writeLastBE$D_IN;
  wire dp1_tlp_writeLastBE$EN;

  // register dp1_tlp_writeRemainDWLen
  reg [9 : 0] dp1_tlp_writeRemainDWLen;
  wire [9 : 0] dp1_tlp_writeRemainDWLen$D_IN;
  wire dp1_tlp_writeRemainDWLen$EN;

  // register dp1_tlp_xmtMetaInFlight
  reg dp1_tlp_xmtMetaInFlight;
  wire dp1_tlp_xmtMetaInFlight$D_IN, dp1_tlp_xmtMetaInFlight$EN;

  // register dp1_tlp_xmtMetaOK
  reg dp1_tlp_xmtMetaOK;
  reg dp1_tlp_xmtMetaOK$D_IN;
  wire dp1_tlp_xmtMetaOK$EN;

  // register dp1_wci_cEdge
  reg [2 : 0] dp1_wci_cEdge;
  wire [2 : 0] dp1_wci_cEdge$D_IN;
  wire dp1_wci_cEdge$EN;

  // register dp1_wci_cState
  reg [2 : 0] dp1_wci_cState;
  wire [2 : 0] dp1_wci_cState$D_IN;
  wire dp1_wci_cState$EN;

  // register dp1_wci_ctlAckReg
  reg dp1_wci_ctlAckReg;
  wire dp1_wci_ctlAckReg$D_IN, dp1_wci_ctlAckReg$EN;

  // register dp1_wci_ctlOpActive
  reg dp1_wci_ctlOpActive;
  wire dp1_wci_ctlOpActive$D_IN, dp1_wci_ctlOpActive$EN;

  // register dp1_wci_illegalEdge
  reg dp1_wci_illegalEdge;
  wire dp1_wci_illegalEdge$D_IN, dp1_wci_illegalEdge$EN;

  // register dp1_wci_nState
  reg [2 : 0] dp1_wci_nState;
  reg [2 : 0] dp1_wci_nState$D_IN;
  wire dp1_wci_nState$EN;

  // register dp1_wci_reqF_countReg
  reg [1 : 0] dp1_wci_reqF_countReg;
  wire [1 : 0] dp1_wci_reqF_countReg$D_IN;
  wire dp1_wci_reqF_countReg$EN;

  // register dp1_wci_respF_c_r
  reg [1 : 0] dp1_wci_respF_c_r;
  wire [1 : 0] dp1_wci_respF_c_r$D_IN;
  wire dp1_wci_respF_c_r$EN;

  // register dp1_wci_respF_q_0
  reg [33 : 0] dp1_wci_respF_q_0;
  reg [33 : 0] dp1_wci_respF_q_0$D_IN;
  wire dp1_wci_respF_q_0$EN;

  // register dp1_wci_respF_q_1
  reg [33 : 0] dp1_wci_respF_q_1;
  reg [33 : 0] dp1_wci_respF_q_1$D_IN;
  wire dp1_wci_respF_q_1$EN;

  // register dp1_wci_sFlagReg
  reg dp1_wci_sFlagReg;
  wire dp1_wci_sFlagReg$D_IN, dp1_wci_sFlagReg$EN;

  // register dp1_wci_sThreadBusy_d
  reg dp1_wci_sThreadBusy_d;
  wire dp1_wci_sThreadBusy_d$D_IN, dp1_wci_sThreadBusy_d$EN;

  // register dp1_wmi_addr
  reg [13 : 0] dp1_wmi_addr;
  wire [13 : 0] dp1_wmi_addr$D_IN;
  wire dp1_wmi_addr$EN;

  // register dp1_wmi_bufDwell
  reg [1 : 0] dp1_wmi_bufDwell;
  wire [1 : 0] dp1_wmi_bufDwell$D_IN;
  wire dp1_wmi_bufDwell$EN;

  // register dp1_wmi_bytesRemainReq
  reg [13 : 0] dp1_wmi_bytesRemainReq;
  wire [13 : 0] dp1_wmi_bytesRemainReq$D_IN;
  wire dp1_wmi_bytesRemainReq$EN;

  // register dp1_wmi_bytesRemainResp
  reg [13 : 0] dp1_wmi_bytesRemainResp;
  wire [13 : 0] dp1_wmi_bytesRemainResp$D_IN;
  wire dp1_wmi_bytesRemainResp$EN;

  // register dp1_wmi_doneWithMesg
  reg dp1_wmi_doneWithMesg;
  wire dp1_wmi_doneWithMesg$D_IN, dp1_wmi_doneWithMesg$EN;

  // register dp1_wmi_lastMesg
  reg [31 : 0] dp1_wmi_lastMesg;
  wire [31 : 0] dp1_wmi_lastMesg$D_IN;
  wire dp1_wmi_lastMesg$EN;

  // register dp1_wmi_lclMesgAddr
  reg [14 : 0] dp1_wmi_lclMesgAddr;
  wire [14 : 0] dp1_wmi_lclMesgAddr$D_IN;
  wire dp1_wmi_lclMesgAddr$EN;

  // register dp1_wmi_lclMetaAddr
  reg [14 : 0] dp1_wmi_lclMetaAddr;
  wire [14 : 0] dp1_wmi_lclMetaAddr$D_IN;
  wire dp1_wmi_lclMetaAddr$EN;

  // register dp1_wmi_mesgBufReady
  reg dp1_wmi_mesgBufReady;
  wire dp1_wmi_mesgBufReady$D_IN, dp1_wmi_mesgBufReady$EN;

  // register dp1_wmi_mesgBusy
  reg dp1_wmi_mesgBusy;
  wire dp1_wmi_mesgBusy$D_IN, dp1_wmi_mesgBusy$EN;

  // register dp1_wmi_mesgCount
  reg [31 : 0] dp1_wmi_mesgCount;
  wire [31 : 0] dp1_wmi_mesgCount$D_IN;
  wire dp1_wmi_mesgCount$EN;

  // register dp1_wmi_mesgDone
  reg dp1_wmi_mesgDone;
  wire dp1_wmi_mesgDone$D_IN, dp1_wmi_mesgDone$EN;

  // register dp1_wmi_mesgMeta
  reg [128 : 0] dp1_wmi_mesgMeta;
  wire [128 : 0] dp1_wmi_mesgMeta$D_IN;
  wire dp1_wmi_mesgMeta$EN;

  // register dp1_wmi_mesgStart
  reg dp1_wmi_mesgStart;
  wire dp1_wmi_mesgStart$D_IN, dp1_wmi_mesgStart$EN;

  // register dp1_wmi_metaBusy
  reg dp1_wmi_metaBusy;
  wire dp1_wmi_metaBusy$D_IN, dp1_wmi_metaBusy$EN;

  // register dp1_wmi_p4B
  reg [1 : 0] dp1_wmi_p4B;
  wire [1 : 0] dp1_wmi_p4B$D_IN;
  wire dp1_wmi_p4B$EN;

  // register dp1_wmi_rdActive
  reg dp1_wmi_rdActive;
  wire dp1_wmi_rdActive$D_IN, dp1_wmi_rdActive$EN;

  // register dp1_wmi_reqCount
  reg [15 : 0] dp1_wmi_reqCount;
  wire [15 : 0] dp1_wmi_reqCount$D_IN;
  wire dp1_wmi_reqCount$EN;

  // register dp1_wmi_thisMesg
  reg [31 : 0] dp1_wmi_thisMesg;
  wire [31 : 0] dp1_wmi_thisMesg$D_IN;
  wire dp1_wmi_thisMesg$EN;

  // register dp1_wmi_wmi_blockReq
  reg dp1_wmi_wmi_blockReq;
  wire dp1_wmi_wmi_blockReq$D_IN, dp1_wmi_wmi_blockReq$EN;

  // register dp1_wmi_wmi_dhF_countReg
  reg [1 : 0] dp1_wmi_wmi_dhF_countReg;
  wire [1 : 0] dp1_wmi_wmi_dhF_countReg$D_IN;
  wire dp1_wmi_wmi_dhF_countReg$EN;

  // register dp1_wmi_wmi_dhF_levelsValid
  reg dp1_wmi_wmi_dhF_levelsValid;
  wire dp1_wmi_wmi_dhF_levelsValid$D_IN, dp1_wmi_wmi_dhF_levelsValid$EN;

  // register dp1_wmi_wmi_errorSticky
  reg dp1_wmi_wmi_errorSticky;
  wire dp1_wmi_wmi_errorSticky$D_IN, dp1_wmi_wmi_errorSticky$EN;

  // register dp1_wmi_wmi_mFlagF_countReg
  reg [1 : 0] dp1_wmi_wmi_mFlagF_countReg;
  wire [1 : 0] dp1_wmi_wmi_mFlagF_countReg$D_IN;
  wire dp1_wmi_wmi_mFlagF_countReg$EN;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  reg dp1_wmi_wmi_mFlagF_levelsValid;
  wire dp1_wmi_wmi_mFlagF_levelsValid$D_IN, dp1_wmi_wmi_mFlagF_levelsValid$EN;

  // register dp1_wmi_wmi_mFlagReg
  reg [31 : 0] dp1_wmi_wmi_mFlagReg;
  wire [31 : 0] dp1_wmi_wmi_mFlagReg$D_IN;
  wire dp1_wmi_wmi_mFlagReg$EN;

  // register dp1_wmi_wmi_operateD
  reg dp1_wmi_wmi_operateD;
  wire dp1_wmi_wmi_operateD$D_IN, dp1_wmi_wmi_operateD$EN;

  // register dp1_wmi_wmi_peerIsReady
  reg dp1_wmi_wmi_peerIsReady;
  wire dp1_wmi_wmi_peerIsReady$D_IN, dp1_wmi_wmi_peerIsReady$EN;

  // register dp1_wmi_wmi_reqF_countReg
  reg [1 : 0] dp1_wmi_wmi_reqF_countReg;
  wire [1 : 0] dp1_wmi_wmi_reqF_countReg$D_IN;
  wire dp1_wmi_wmi_reqF_countReg$EN;

  // register dp1_wmi_wmi_reqF_levelsValid
  reg dp1_wmi_wmi_reqF_levelsValid;
  wire dp1_wmi_wmi_reqF_levelsValid$D_IN, dp1_wmi_wmi_reqF_levelsValid$EN;

  // register dp1_wmi_wmi_respF_c_r
  reg [1 : 0] dp1_wmi_wmi_respF_c_r;
  wire [1 : 0] dp1_wmi_wmi_respF_c_r$D_IN;
  wire dp1_wmi_wmi_respF_c_r$EN;

  // register dp1_wmi_wmi_respF_q_0
  reg [257 : 0] dp1_wmi_wmi_respF_q_0;
  wire [257 : 0] dp1_wmi_wmi_respF_q_0$D_IN;
  wire dp1_wmi_wmi_respF_q_0$EN;

  // register dp1_wmi_wmi_respF_q_1
  reg [257 : 0] dp1_wmi_wmi_respF_q_1;
  wire [257 : 0] dp1_wmi_wmi_respF_q_1$D_IN;
  wire dp1_wmi_wmi_respF_q_1$EN;

  // register dp1_wmi_wmi_sFlagReg
  reg [31 : 0] dp1_wmi_wmi_sFlagReg;
  wire [31 : 0] dp1_wmi_wmi_sFlagReg$D_IN;
  wire dp1_wmi_wmi_sFlagReg$EN;

  // register dp1_wmi_wmi_statusR
  reg [7 : 0] dp1_wmi_wmi_statusR;
  wire [7 : 0] dp1_wmi_wmi_statusR$D_IN;
  wire dp1_wmi_wmi_statusR$EN;

  // register dp1_wmi_wmi_trafficSticky
  reg dp1_wmi_wmi_trafficSticky;
  wire dp1_wmi_wmi_trafficSticky$D_IN, dp1_wmi_wmi_trafficSticky$EN;

  // register dp1_wmi_wrActive
  reg dp1_wmi_wrActive;
  wire dp1_wmi_wrActive$D_IN, dp1_wmi_wrActive$EN;

  // register dp1_wmi_wrFinalize
  reg dp1_wmi_wrFinalize;
  wire dp1_wmi_wrFinalize$D_IN, dp1_wmi_wrFinalize$EN;

  // register dp1_wmi_wrtCount
  reg [15 : 0] dp1_wmi_wrtCount;
  wire [15 : 0] dp1_wmi_wrtCount$D_IN;
  wire dp1_wmi_wrtCount$EN;

  // register dp1_wti_nowReq
  reg [66 : 0] dp1_wti_nowReq;
  wire [66 : 0] dp1_wti_nowReq$D_IN;
  wire dp1_wti_nowReq$EN;

  // register itc0_wti_nowReq
  reg [66 : 0] itc0_wti_nowReq;
  wire [66 : 0] itc0_wti_nowReq$D_IN;
  wire itc0_wti_nowReq$EN;

  // register itc0_wti_sThreadBusy_d
  reg itc0_wti_sThreadBusy_d;
  wire itc0_wti_sThreadBusy_d$D_IN, itc0_wti_sThreadBusy_d$EN;

  // register itc1_wti_nowReq
  reg [66 : 0] itc1_wti_nowReq;
  wire [66 : 0] itc1_wti_nowReq$D_IN;
  wire itc1_wti_nowReq$EN;

  // register itc1_wti_sThreadBusy_d
  reg itc1_wti_sThreadBusy_d;
  wire itc1_wti_sThreadBusy_d$D_IN, itc1_wti_sThreadBusy_d$EN;

  // ports of submodule cp
  wire [152 : 0] cp$server_request_put, cp$server_response_get;
  wire [63 : 0] cp$cpNow;
  wire [31 : 0] cp$wci_Vm_0_MData,
		cp$wci_Vm_0_SData,
		cp$wci_Vm_10_MData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_MData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_MData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_MData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_MData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_MData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_MData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_MData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_MData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_MData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_MData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_MData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_MData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_MData,
		cp$wci_Vm_9_SData;
  wire [19 : 0] cp$wci_Vm_0_MAddr,
		cp$wci_Vm_10_MAddr,
		cp$wci_Vm_11_MAddr,
		cp$wci_Vm_12_MAddr,
		cp$wci_Vm_13_MAddr,
		cp$wci_Vm_14_MAddr,
		cp$wci_Vm_1_MAddr,
		cp$wci_Vm_2_MAddr,
		cp$wci_Vm_3_MAddr,
		cp$wci_Vm_4_MAddr,
		cp$wci_Vm_5_MAddr,
		cp$wci_Vm_6_MAddr,
		cp$wci_Vm_7_MAddr,
		cp$wci_Vm_8_MAddr,
		cp$wci_Vm_9_MAddr;
  wire [3 : 0] cp$wci_Vm_0_MByteEn,
	       cp$wci_Vm_10_MByteEn,
	       cp$wci_Vm_11_MByteEn,
	       cp$wci_Vm_12_MByteEn,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_1_MByteEn,
	       cp$wci_Vm_2_MByteEn,
	       cp$wci_Vm_3_MByteEn,
	       cp$wci_Vm_4_MByteEn,
	       cp$wci_Vm_5_MByteEn,
	       cp$wci_Vm_6_MByteEn,
	       cp$wci_Vm_7_MByteEn,
	       cp$wci_Vm_8_MByteEn,
	       cp$wci_Vm_9_MByteEn;
  wire [2 : 0] cp$switch_x,
	       cp$wci_Vm_0_MCmd,
	       cp$wci_Vm_10_MCmd,
	       cp$wci_Vm_11_MCmd,
	       cp$wci_Vm_12_MCmd,
	       cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_1_MCmd,
	       cp$wci_Vm_2_MCmd,
	       cp$wci_Vm_3_MCmd,
	       cp$wci_Vm_4_MCmd,
	       cp$wci_Vm_5_MCmd,
	       cp$wci_Vm_6_MCmd,
	       cp$wci_Vm_7_MCmd,
	       cp$wci_Vm_8_MCmd,
	       cp$wci_Vm_9_MCmd;
  wire [1 : 0] cp$led,
	       cp$wci_Vm_0_MFlag,
	       cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_MFlag,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_MFlag,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_MFlag,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_MFlag,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_MFlag,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_MFlag,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_MFlag,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_MFlag,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_MFlag,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_MFlag,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_MFlag,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_MFlag,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_0_mReset_n,
       cp$RST_N_wci_Vm_10_mReset_n,
       cp$RST_N_wci_Vm_11_mReset_n,
       cp$RST_N_wci_Vm_12_mReset_n,
       cp$RST_N_wci_Vm_13_mReset_n,
       cp$RST_N_wci_Vm_14_mReset_n,
       cp$RST_N_wci_Vm_1_mReset_n,
       cp$RST_N_wci_Vm_2_mReset_n,
       cp$RST_N_wci_Vm_3_mReset_n,
       cp$RST_N_wci_Vm_4_mReset_n,
       cp$RST_N_wci_Vm_5_mReset_n,
       cp$RST_N_wci_Vm_6_mReset_n,
       cp$RST_N_wci_Vm_7_mReset_n,
       cp$RST_N_wci_Vm_8_mReset_n,
       cp$RST_N_wci_Vm_9_mReset_n,
       cp$gps_ppsSyncIn_x,
       cp$gps_ppsSyncOut,
       cp$wci_Vm_0_MAddrSpace,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_MAddrSpace,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_MAddrSpace,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_MAddrSpace,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_MAddrSpace,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_MAddrSpace,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_MAddrSpace,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_MAddrSpace,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_MAddrSpace,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_MAddrSpace,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_MAddrSpace,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_MAddrSpace,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_MAddrSpace,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_MAddrSpace,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_MAddrSpace,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule dp0_bram_memory
  reg [31 : 0] dp0_bram_memory$DIA;
  reg [10 : 0] dp0_bram_memory$ADDRA;
  wire [31 : 0] dp0_bram_memory$DIB, dp0_bram_memory$DOA, dp0_bram_memory$DOB;
  wire [10 : 0] dp0_bram_memory$ADDRB;
  wire dp0_bram_memory$ENA,
       dp0_bram_memory$ENB,
       dp0_bram_memory$WEA,
       dp0_bram_memory$WEB;

  // ports of submodule dp0_bram_memory_1
  reg [31 : 0] dp0_bram_memory_1$DIA;
  reg [10 : 0] dp0_bram_memory_1$ADDRA;
  wire [31 : 0] dp0_bram_memory_1$DIB,
		dp0_bram_memory_1$DOA,
		dp0_bram_memory_1$DOB;
  wire [10 : 0] dp0_bram_memory_1$ADDRB;
  wire dp0_bram_memory_1$ENA,
       dp0_bram_memory_1$ENB,
       dp0_bram_memory_1$WEA,
       dp0_bram_memory_1$WEB;

  // ports of submodule dp0_bram_memory_2
  reg [31 : 0] dp0_bram_memory_2$DIA;
  reg [10 : 0] dp0_bram_memory_2$ADDRA;
  wire [31 : 0] dp0_bram_memory_2$DIB,
		dp0_bram_memory_2$DOA,
		dp0_bram_memory_2$DOB;
  wire [10 : 0] dp0_bram_memory_2$ADDRB;
  wire dp0_bram_memory_2$ENA,
       dp0_bram_memory_2$ENB,
       dp0_bram_memory_2$WEA,
       dp0_bram_memory_2$WEB;

  // ports of submodule dp0_bram_memory_3
  reg [31 : 0] dp0_bram_memory_3$DIA;
  reg [10 : 0] dp0_bram_memory_3$ADDRA;
  wire [31 : 0] dp0_bram_memory_3$DIB,
		dp0_bram_memory_3$DOA,
		dp0_bram_memory_3$DOB;
  wire [10 : 0] dp0_bram_memory_3$ADDRB;
  wire dp0_bram_memory_3$ENA,
       dp0_bram_memory_3$ENB,
       dp0_bram_memory_3$WEA,
       dp0_bram_memory_3$WEB;

  // ports of submodule dp0_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_1_outDataCore$D_IN,
		dp0_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_1_outDataCore$CLR,
       dp0_bram_serverAdapterA_1_outDataCore$DEQ,
       dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_1_outDataCore$ENQ,
       dp0_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_2_outDataCore$D_IN,
		dp0_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_2_outDataCore$CLR,
       dp0_bram_serverAdapterA_2_outDataCore$DEQ,
       dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_2_outDataCore$ENQ,
       dp0_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_3_outDataCore$D_IN,
		dp0_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_3_outDataCore$CLR,
       dp0_bram_serverAdapterA_3_outDataCore$DEQ,
       dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_3_outDataCore$ENQ,
       dp0_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterA_outDataCore$D_IN,
		dp0_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterA_outDataCore$CLR,
       dp0_bram_serverAdapterA_outDataCore$DEQ,
       dp0_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterA_outDataCore$ENQ,
       dp0_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_1_outDataCore$D_IN,
		dp0_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_1_outDataCore$CLR,
       dp0_bram_serverAdapterB_1_outDataCore$DEQ,
       dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_1_outDataCore$ENQ,
       dp0_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_2_outDataCore$D_IN,
		dp0_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_2_outDataCore$CLR,
       dp0_bram_serverAdapterB_2_outDataCore$DEQ,
       dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_2_outDataCore$ENQ,
       dp0_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_3_outDataCore$D_IN,
		dp0_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_3_outDataCore$CLR,
       dp0_bram_serverAdapterB_3_outDataCore$DEQ,
       dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_3_outDataCore$ENQ,
       dp0_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp0_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp0_bram_serverAdapterB_outDataCore$D_IN,
		dp0_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp0_bram_serverAdapterB_outDataCore$CLR,
       dp0_bram_serverAdapterB_outDataCore$DEQ,
       dp0_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp0_bram_serverAdapterB_outDataCore$ENQ,
       dp0_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp0_tlp_inF
  wire [152 : 0] dp0_tlp_inF$D_IN, dp0_tlp_inF$D_OUT;
  wire dp0_tlp_inF$CLR,
       dp0_tlp_inF$DEQ,
       dp0_tlp_inF$EMPTY_N,
       dp0_tlp_inF$ENQ,
       dp0_tlp_inF$FULL_N;

  // ports of submodule dp0_tlp_mReqF
  reg [129 : 0] dp0_tlp_mReqF$D_IN;
  wire [129 : 0] dp0_tlp_mReqF$D_OUT;
  wire dp0_tlp_mReqF$CLR,
       dp0_tlp_mReqF$DEQ,
       dp0_tlp_mReqF$EMPTY_N,
       dp0_tlp_mReqF$ENQ,
       dp0_tlp_mReqF$FULL_N;

  // ports of submodule dp0_tlp_mRespF
  wire [138 : 0] dp0_tlp_mRespF$D_IN, dp0_tlp_mRespF$D_OUT;
  wire dp0_tlp_mRespF$CLR,
       dp0_tlp_mRespF$DEQ,
       dp0_tlp_mRespF$EMPTY_N,
       dp0_tlp_mRespF$ENQ,
       dp0_tlp_mRespF$FULL_N;

  // ports of submodule dp0_tlp_outF
  reg [152 : 0] dp0_tlp_outF$D_IN;
  wire [152 : 0] dp0_tlp_outF$D_OUT;
  wire dp0_tlp_outF$CLR,
       dp0_tlp_outF$DEQ,
       dp0_tlp_outF$EMPTY_N,
       dp0_tlp_outF$ENQ,
       dp0_tlp_outF$FULL_N;

  // ports of submodule dp0_tlp_readReq
  wire [59 : 0] dp0_tlp_readReq$D_IN, dp0_tlp_readReq$D_OUT;
  wire dp0_tlp_readReq$CLR,
       dp0_tlp_readReq$DEQ,
       dp0_tlp_readReq$EMPTY_N,
       dp0_tlp_readReq$ENQ,
       dp0_tlp_readReq$FULL_N;

  // ports of submodule dp0_wci_isReset
  wire dp0_wci_isReset$VAL;

  // ports of submodule dp0_wci_reqF
  wire [59 : 0] dp0_wci_reqF$D_IN, dp0_wci_reqF$D_OUT;
  wire dp0_wci_reqF$CLR,
       dp0_wci_reqF$DEQ,
       dp0_wci_reqF$EMPTY_N,
       dp0_wci_reqF$ENQ;

  // ports of submodule dp0_wmi_wmi_dhF
  wire [289 : 0] dp0_wmi_wmi_dhF$D_IN;
  wire dp0_wmi_wmi_dhF$CLR,
       dp0_wmi_wmi_dhF$DEQ,
       dp0_wmi_wmi_dhF$EMPTY_N,
       dp0_wmi_wmi_dhF$ENQ,
       dp0_wmi_wmi_dhF$FULL_N;

  // ports of submodule dp0_wmi_wmi_isReset
  wire dp0_wmi_wmi_isReset$VAL;

  // ports of submodule dp0_wmi_wmi_mFlagF
  wire [31 : 0] dp0_wmi_wmi_mFlagF$D_IN, dp0_wmi_wmi_mFlagF$D_OUT;
  wire dp0_wmi_wmi_mFlagF$CLR,
       dp0_wmi_wmi_mFlagF$DEQ,
       dp0_wmi_wmi_mFlagF$EMPTY_N,
       dp0_wmi_wmi_mFlagF$ENQ,
       dp0_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule dp0_wmi_wmi_reqF
  wire [31 : 0] dp0_wmi_wmi_reqF$D_IN, dp0_wmi_wmi_reqF$D_OUT;
  wire dp0_wmi_wmi_reqF$CLR,
       dp0_wmi_wmi_reqF$DEQ,
       dp0_wmi_wmi_reqF$EMPTY_N,
       dp0_wmi_wmi_reqF$ENQ,
       dp0_wmi_wmi_reqF$FULL_N;

  // ports of submodule dp0_wti_isReset
  wire dp0_wti_isReset$VAL;

  // ports of submodule dp1_bram_memory
  reg [31 : 0] dp1_bram_memory$DIA;
  reg [10 : 0] dp1_bram_memory$ADDRA;
  wire [31 : 0] dp1_bram_memory$DIB, dp1_bram_memory$DOA, dp1_bram_memory$DOB;
  wire [10 : 0] dp1_bram_memory$ADDRB;
  wire dp1_bram_memory$ENA,
       dp1_bram_memory$ENB,
       dp1_bram_memory$WEA,
       dp1_bram_memory$WEB;

  // ports of submodule dp1_bram_memory_1
  reg [31 : 0] dp1_bram_memory_1$DIA;
  reg [10 : 0] dp1_bram_memory_1$ADDRA;
  wire [31 : 0] dp1_bram_memory_1$DIB,
		dp1_bram_memory_1$DOA,
		dp1_bram_memory_1$DOB;
  wire [10 : 0] dp1_bram_memory_1$ADDRB;
  wire dp1_bram_memory_1$ENA,
       dp1_bram_memory_1$ENB,
       dp1_bram_memory_1$WEA,
       dp1_bram_memory_1$WEB;

  // ports of submodule dp1_bram_memory_2
  reg [31 : 0] dp1_bram_memory_2$DIA;
  reg [10 : 0] dp1_bram_memory_2$ADDRA;
  wire [31 : 0] dp1_bram_memory_2$DIB,
		dp1_bram_memory_2$DOA,
		dp1_bram_memory_2$DOB;
  wire [10 : 0] dp1_bram_memory_2$ADDRB;
  wire dp1_bram_memory_2$ENA,
       dp1_bram_memory_2$ENB,
       dp1_bram_memory_2$WEA,
       dp1_bram_memory_2$WEB;

  // ports of submodule dp1_bram_memory_3
  reg [31 : 0] dp1_bram_memory_3$DIA;
  reg [10 : 0] dp1_bram_memory_3$ADDRA;
  wire [31 : 0] dp1_bram_memory_3$DIB,
		dp1_bram_memory_3$DOA,
		dp1_bram_memory_3$DOB;
  wire [10 : 0] dp1_bram_memory_3$ADDRB;
  wire dp1_bram_memory_3$ENA,
       dp1_bram_memory_3$ENB,
       dp1_bram_memory_3$WEA,
       dp1_bram_memory_3$WEB;

  // ports of submodule dp1_bram_serverAdapterA_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_1_outDataCore$D_IN,
		dp1_bram_serverAdapterA_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_1_outDataCore$CLR,
       dp1_bram_serverAdapterA_1_outDataCore$DEQ,
       dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_1_outDataCore$ENQ,
       dp1_bram_serverAdapterA_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_2_outDataCore$D_IN,
		dp1_bram_serverAdapterA_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_2_outDataCore$CLR,
       dp1_bram_serverAdapterA_2_outDataCore$DEQ,
       dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_2_outDataCore$ENQ,
       dp1_bram_serverAdapterA_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_3_outDataCore$D_IN,
		dp1_bram_serverAdapterA_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_3_outDataCore$CLR,
       dp1_bram_serverAdapterA_3_outDataCore$DEQ,
       dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_3_outDataCore$ENQ,
       dp1_bram_serverAdapterA_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterA_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterA_outDataCore$D_IN,
		dp1_bram_serverAdapterA_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterA_outDataCore$CLR,
       dp1_bram_serverAdapterA_outDataCore$DEQ,
       dp1_bram_serverAdapterA_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterA_outDataCore$ENQ,
       dp1_bram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_1_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_1_outDataCore$D_IN,
		dp1_bram_serverAdapterB_1_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_1_outDataCore$CLR,
       dp1_bram_serverAdapterB_1_outDataCore$DEQ,
       dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_1_outDataCore$ENQ,
       dp1_bram_serverAdapterB_1_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_2_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_2_outDataCore$D_IN,
		dp1_bram_serverAdapterB_2_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_2_outDataCore$CLR,
       dp1_bram_serverAdapterB_2_outDataCore$DEQ,
       dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_2_outDataCore$ENQ,
       dp1_bram_serverAdapterB_2_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_3_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_3_outDataCore$D_IN,
		dp1_bram_serverAdapterB_3_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_3_outDataCore$CLR,
       dp1_bram_serverAdapterB_3_outDataCore$DEQ,
       dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_3_outDataCore$ENQ,
       dp1_bram_serverAdapterB_3_outDataCore$FULL_N;

  // ports of submodule dp1_bram_serverAdapterB_outDataCore
  wire [31 : 0] dp1_bram_serverAdapterB_outDataCore$D_IN,
		dp1_bram_serverAdapterB_outDataCore$D_OUT;
  wire dp1_bram_serverAdapterB_outDataCore$CLR,
       dp1_bram_serverAdapterB_outDataCore$DEQ,
       dp1_bram_serverAdapterB_outDataCore$EMPTY_N,
       dp1_bram_serverAdapterB_outDataCore$ENQ,
       dp1_bram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule dp1_tlp_inF
  wire [152 : 0] dp1_tlp_inF$D_IN, dp1_tlp_inF$D_OUT;
  wire dp1_tlp_inF$CLR,
       dp1_tlp_inF$DEQ,
       dp1_tlp_inF$EMPTY_N,
       dp1_tlp_inF$ENQ,
       dp1_tlp_inF$FULL_N;

  // ports of submodule dp1_tlp_mReqF
  reg [129 : 0] dp1_tlp_mReqF$D_IN;
  wire [129 : 0] dp1_tlp_mReqF$D_OUT;
  wire dp1_tlp_mReqF$CLR,
       dp1_tlp_mReqF$DEQ,
       dp1_tlp_mReqF$EMPTY_N,
       dp1_tlp_mReqF$ENQ,
       dp1_tlp_mReqF$FULL_N;

  // ports of submodule dp1_tlp_mRespF
  wire [138 : 0] dp1_tlp_mRespF$D_IN, dp1_tlp_mRespF$D_OUT;
  wire dp1_tlp_mRespF$CLR,
       dp1_tlp_mRespF$DEQ,
       dp1_tlp_mRespF$EMPTY_N,
       dp1_tlp_mRespF$ENQ,
       dp1_tlp_mRespF$FULL_N;

  // ports of submodule dp1_tlp_outF
  reg [152 : 0] dp1_tlp_outF$D_IN;
  wire [152 : 0] dp1_tlp_outF$D_OUT;
  wire dp1_tlp_outF$CLR,
       dp1_tlp_outF$DEQ,
       dp1_tlp_outF$EMPTY_N,
       dp1_tlp_outF$ENQ,
       dp1_tlp_outF$FULL_N;

  // ports of submodule dp1_tlp_readReq
  wire [59 : 0] dp1_tlp_readReq$D_IN, dp1_tlp_readReq$D_OUT;
  wire dp1_tlp_readReq$CLR,
       dp1_tlp_readReq$DEQ,
       dp1_tlp_readReq$EMPTY_N,
       dp1_tlp_readReq$ENQ,
       dp1_tlp_readReq$FULL_N;

  // ports of submodule dp1_wci_isReset
  wire dp1_wci_isReset$VAL;

  // ports of submodule dp1_wci_reqF
  wire [59 : 0] dp1_wci_reqF$D_IN, dp1_wci_reqF$D_OUT;
  wire dp1_wci_reqF$CLR,
       dp1_wci_reqF$DEQ,
       dp1_wci_reqF$EMPTY_N,
       dp1_wci_reqF$ENQ;

  // ports of submodule dp1_wmi_wmi_dhF
  wire [289 : 0] dp1_wmi_wmi_dhF$D_IN;
  wire dp1_wmi_wmi_dhF$CLR,
       dp1_wmi_wmi_dhF$DEQ,
       dp1_wmi_wmi_dhF$EMPTY_N,
       dp1_wmi_wmi_dhF$ENQ,
       dp1_wmi_wmi_dhF$FULL_N;

  // ports of submodule dp1_wmi_wmi_isReset
  wire dp1_wmi_wmi_isReset$VAL;

  // ports of submodule dp1_wmi_wmi_mFlagF
  wire [31 : 0] dp1_wmi_wmi_mFlagF$D_IN, dp1_wmi_wmi_mFlagF$D_OUT;
  wire dp1_wmi_wmi_mFlagF$CLR,
       dp1_wmi_wmi_mFlagF$DEQ,
       dp1_wmi_wmi_mFlagF$EMPTY_N,
       dp1_wmi_wmi_mFlagF$ENQ,
       dp1_wmi_wmi_mFlagF$FULL_N;

  // ports of submodule dp1_wmi_wmi_reqF
  wire [31 : 0] dp1_wmi_wmi_reqF$D_IN, dp1_wmi_wmi_reqF$D_OUT;
  wire dp1_wmi_wmi_reqF$CLR,
       dp1_wmi_wmi_reqF$DEQ,
       dp1_wmi_wmi_reqF$EMPTY_N,
       dp1_wmi_wmi_reqF$ENQ,
       dp1_wmi_wmi_reqF$FULL_N;

  // ports of submodule dp1_wti_isReset
  wire dp1_wti_isReset$VAL;

  // ports of submodule itc0_now
  wire [63 : 0] itc0_now$dD_OUT, itc0_now$sD_IN;
  wire itc0_now$sEN, itc0_now$sRDY;

  // ports of submodule itc1_now
  wire [63 : 0] itc1_now$dD_OUT, itc1_now$sD_IN;
  wire itc1_now$sEN, itc1_now$sRDY;

  // ports of submodule sm0
  wire [152 : 0] sm0$c0_request_get,
		 sm0$c0_response_put,
		 sm0$c1_request_get,
		 sm0$c1_response_put,
		 sm0$s_request_put,
		 sm0$s_response_get;
  wire sm0$EN_c0_request_get,
       sm0$EN_c0_response_put,
       sm0$EN_c1_request_get,
       sm0$EN_c1_response_put,
       sm0$EN_s_request_put,
       sm0$EN_s_response_get,
       sm0$RDY_c0_request_get,
       sm0$RDY_c0_response_put,
       sm0$RDY_c1_request_get,
       sm0$RDY_c1_response_put,
       sm0$RDY_s_request_put,
       sm0$RDY_s_response_get;

  // ports of submodule sm1
  wire [152 : 0] sm1$c0_request_get,
		 sm1$c0_response_put,
		 sm1$c1_request_get,
		 sm1$c1_response_put,
		 sm1$s_request_put,
		 sm1$s_response_get;
  wire sm1$EN_c0_request_get,
       sm1$EN_c0_response_put,
       sm1$EN_c1_request_get,
       sm1$EN_c1_response_put,
       sm1$EN_s_request_put,
       sm1$EN_s_response_get,
       sm1$RDY_c0_request_get,
       sm1$RDY_c0_response_put,
       sm1$RDY_c1_request_get,
       sm1$RDY_c1_response_put,
       sm1$RDY_s_request_put,
       sm1$RDY_s_response_get;

  // ports of submodule sm2
  wire [152 : 0] sm2$c0_request_get,
		 sm2$c0_response_put,
		 sm2$c1_response_put,
		 sm2$s_request_put,
		 sm2$s_response_get;
  wire sm2$EN_c0_request_get,
       sm2$EN_c0_response_put,
       sm2$EN_c1_request_get,
       sm2$EN_c1_response_put,
       sm2$EN_s_request_put,
       sm2$EN_s_response_get,
       sm2$RDY_c0_request_get,
       sm2$RDY_c0_response_put,
       sm2$RDY_c1_request_get,
       sm2$RDY_s_request_put,
       sm2$RDY_s_response_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerRequest_4,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_ClientServerResponse_4,
       CAN_FIRE_RL_chomp_rogue,
       CAN_FIRE_RL_dp0_assignControl,
       CAN_FIRE_RL_dp0_bml_cntLclDone,
       CAN_FIRE_RL_dp0_bml_cntLclStart,
       CAN_FIRE_RL_dp0_bml_cntRemDone,
       CAN_FIRE_RL_dp0_bml_cntRemStart,
       CAN_FIRE_RL_dp0_bml_crdAdvance,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_fabDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_fba,
       CAN_FIRE_RL_dp0_bml_initAccumulators,
       CAN_FIRE_RL_dp0_bml_lbar,
       CAN_FIRE_RL_dp0_bml_lbcf,
       CAN_FIRE_RL_dp0_bml_lclAdvance,
       CAN_FIRE_RL_dp0_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_lcredit,
       CAN_FIRE_RL_dp0_bml_remAdvance,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleDec,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleInc,
       CAN_FIRE_RL_dp0_bml_remBuf_ruleMod,
       CAN_FIRE_RL_dp0_bml_remDone__dreg_update,
       CAN_FIRE_RL_dp0_bml_remStart__dreg_update,
       CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_dp0_mkConnectionVtoAf,
       CAN_FIRE_RL_dp0_operating_actions,
       CAN_FIRE_RL_dp0_rBMesg,
       CAN_FIRE_RL_dp0_rBMesg_1,
       CAN_FIRE_RL_dp0_rBMeta,
       CAN_FIRE_RL_dp0_rBMeta_1,
       CAN_FIRE_RL_dp0_rCredit_1,
       CAN_FIRE_RL_dp0_rDone,
       CAN_FIRE_RL_dp0_rDone_1,
       CAN_FIRE_RL_dp0_rFFlow_1,
       CAN_FIRE_RL_dp0_rFMesg_1,
       CAN_FIRE_RL_dp0_rFMeta_1,
       CAN_FIRE_RL_dp0_rFRdy_1,
       CAN_FIRE_RL_dp0_rRdy,
       CAN_FIRE_RL_dp0_rRdy_1,
       CAN_FIRE_RL_dp0_rStart,
       CAN_FIRE_RL_dp0_rStart_1,
       CAN_FIRE_RL_dp0_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_dataXmt_Body,
       CAN_FIRE_RL_dp0_tlp_dataXmt_Header,
       CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_dp0_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_dp0_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_dp0_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_dp0_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_dp0_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_dp0_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_dp0_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_dp0_tlp_read_FirstReq,
       CAN_FIRE_RL_dp0_tlp_read_FirstResp,
       CAN_FIRE_RL_dp0_tlp_read_NextReq,
       CAN_FIRE_RL_dp0_tlp_read_NextResp,
       CAN_FIRE_RL_dp0_tlp_remDone__dreg_update,
       CAN_FIRE_RL_dp0_tlp_remStart__dreg_update,
       CAN_FIRE_RL_dp0_tlp_tlpRcv,
       CAN_FIRE_RL_dp0_tlp_writeData,
       CAN_FIRE_RL_dp0_tlp_writeReq,
       CAN_FIRE_RL_dp0_wci_Es_doAlways_Req,
       CAN_FIRE_RL_dp0_wci_cfrd,
       CAN_FIRE_RL_dp0_wci_cfwr,
       CAN_FIRE_RL_dp0_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_dp0_wci_ctl_op_complete,
       CAN_FIRE_RL_dp0_wci_ctl_op_start,
       CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wci_reqF_enq,
       CAN_FIRE_RL_dp0_wci_request_decode,
       CAN_FIRE_RL_dp0_wci_respF_both,
       CAN_FIRE_RL_dp0_wci_respF_decCtr,
       CAN_FIRE_RL_dp0_wci_respF_deq,
       CAN_FIRE_RL_dp0_wci_respF_incCtr,
       CAN_FIRE_RL_dp0_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_dp0_wci_sThreadBusy_reg,
       CAN_FIRE_RL_dp0_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_dp0_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_dp0_wmi_doDwell,
       CAN_FIRE_RL_dp0_wmi_doReadReq,
       CAN_FIRE_RL_dp0_wmi_doReadResp,
       CAN_FIRE_RL_dp0_wmi_doWriteFinalize,
       CAN_FIRE_RL_dp0_wmi_doWriteReq,
       CAN_FIRE_RL_dp0_wmi_getRequest,
       CAN_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_dp0_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_dp0_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_dp0_wmi_reqMetadata,
       CAN_FIRE_RL_dp0_wmi_respMetadata,
       CAN_FIRE_RL_dp0_wmi_throttleWmi,
       CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_both,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_deq,
       CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_dp1_assignControl,
       CAN_FIRE_RL_dp1_bml_cntLclDone,
       CAN_FIRE_RL_dp1_bml_cntLclStart,
       CAN_FIRE_RL_dp1_bml_cntRemDone,
       CAN_FIRE_RL_dp1_bml_cntRemStart,
       CAN_FIRE_RL_dp1_bml_crdAdvance,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_crdBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_fabAvail__dreg_update,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_fabBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_fabDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_fba,
       CAN_FIRE_RL_dp1_bml_initAccumulators,
       CAN_FIRE_RL_dp1_bml_lbar,
       CAN_FIRE_RL_dp1_bml_lbcf,
       CAN_FIRE_RL_dp1_bml_lclAdvance,
       CAN_FIRE_RL_dp1_bml_lclBufDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_lclBufStart__dreg_update,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_lclBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_lcredit,
       CAN_FIRE_RL_dp1_bml_remAdvance,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleDec,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleInc,
       CAN_FIRE_RL_dp1_bml_remBuf_ruleMod,
       CAN_FIRE_RL_dp1_bml_remDone__dreg_update,
       CAN_FIRE_RL_dp1_bml_remStart__dreg_update,
       CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI,
       CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_dp1_mkConnectionVtoAf,
       CAN_FIRE_RL_dp1_operating_actions,
       CAN_FIRE_RL_dp1_rBMesg,
       CAN_FIRE_RL_dp1_rBMesg_1,
       CAN_FIRE_RL_dp1_rBMeta,
       CAN_FIRE_RL_dp1_rBMeta_1,
       CAN_FIRE_RL_dp1_rCredit_1,
       CAN_FIRE_RL_dp1_rDone,
       CAN_FIRE_RL_dp1_rDone_1,
       CAN_FIRE_RL_dp1_rFFlow_1,
       CAN_FIRE_RL_dp1_rFMesg_1,
       CAN_FIRE_RL_dp1_rFMeta_1,
       CAN_FIRE_RL_dp1_rFRdy_1,
       CAN_FIRE_RL_dp1_rRdy,
       CAN_FIRE_RL_dp1_rRdy_1,
       CAN_FIRE_RL_dp1_rStart,
       CAN_FIRE_RL_dp1_rStart_1,
       CAN_FIRE_RL_dp1_tlp_creditReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_dataXmt_Body,
       CAN_FIRE_RL_dp1_tlp_dataXmt_Header,
       CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell,
       CAN_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg,
       CAN_FIRE_RL_dp1_tlp_dmaPullResponseBody,
       CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeader,
       CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag,
       CAN_FIRE_RL_dp1_tlp_dmaPullTailEvent,
       CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody,
       CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader,
       CAN_FIRE_RL_dp1_tlp_dmaRequestFarMeta,
       CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta,
       CAN_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta,
       CAN_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta,
       CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody,
       CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead,
       CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell,
       CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody,
       CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       CAN_FIRE_RL_dp1_tlp_farBufReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_nearBufReady__dreg_update,
       CAN_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update,
       CAN_FIRE_RL_dp1_tlp_read_FirstReq,
       CAN_FIRE_RL_dp1_tlp_read_FirstResp,
       CAN_FIRE_RL_dp1_tlp_read_NextReq,
       CAN_FIRE_RL_dp1_tlp_read_NextResp,
       CAN_FIRE_RL_dp1_tlp_remDone__dreg_update,
       CAN_FIRE_RL_dp1_tlp_remStart__dreg_update,
       CAN_FIRE_RL_dp1_tlp_tlpRcv,
       CAN_FIRE_RL_dp1_tlp_writeData,
       CAN_FIRE_RL_dp1_tlp_writeReq,
       CAN_FIRE_RL_dp1_wci_Es_doAlways_Req,
       CAN_FIRE_RL_dp1_wci_cfrd,
       CAN_FIRE_RL_dp1_wci_cfwr,
       CAN_FIRE_RL_dp1_wci_ctlAckReg__dreg_update,
       CAN_FIRE_RL_dp1_wci_ctl_op_complete,
       CAN_FIRE_RL_dp1_wci_ctl_op_start,
       CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wci_reqF_enq,
       CAN_FIRE_RL_dp1_wci_request_decode,
       CAN_FIRE_RL_dp1_wci_respF_both,
       CAN_FIRE_RL_dp1_wci_respF_decCtr,
       CAN_FIRE_RL_dp1_wci_respF_deq,
       CAN_FIRE_RL_dp1_wci_respF_incCtr,
       CAN_FIRE_RL_dp1_wci_sFlagReg__dreg_update,
       CAN_FIRE_RL_dp1_wci_sThreadBusy_reg,
       CAN_FIRE_RL_dp1_wmi_Es_doAlways_Dh,
       CAN_FIRE_RL_dp1_wmi_Es_doAlways_Req,
       CAN_FIRE_RL_dp1_wmi_doDwell,
       CAN_FIRE_RL_dp1_wmi_doReadReq,
       CAN_FIRE_RL_dp1_wmi_doReadResp,
       CAN_FIRE_RL_dp1_wmi_doWriteFinalize,
       CAN_FIRE_RL_dp1_wmi_doWriteReq,
       CAN_FIRE_RL_dp1_wmi_getRequest,
       CAN_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update,
       CAN_FIRE_RL_dp1_wmi_mesgDone__dreg_update,
       CAN_FIRE_RL_dp1_wmi_mesgStart__dreg_update,
       CAN_FIRE_RL_dp1_wmi_reqMetadata,
       CAN_FIRE_RL_dp1_wmi_respMetadata,
       CAN_FIRE_RL_dp1_wmi_throttleWmi,
       CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh,
       CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update,
       CAN_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq,
       CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_both,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_deq,
       CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr,
       CAN_FIRE_RL_itc0_send_time,
       CAN_FIRE_RL_itc0_wti_sThreadBusy_reg,
       CAN_FIRE_RL_itc1_send_time,
       CAN_FIRE_RL_itc1_wti_sThreadBusy_reg,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mAddrConnect_1,
       CAN_FIRE_RL_mAddrSConnect,
       CAN_FIRE_RL_mAddrSConnect_1,
       CAN_FIRE_RL_mBEConnect,
       CAN_FIRE_RL_mBEConnect_1,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mCmdConnect_1,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mDataConnect_1,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_reqConnect,
       CAN_FIRE_RL_reqConnect_1,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sDataConnect_1,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sFlagConnect_1,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_sRespConnect_1,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_RL_stbConnect_1,
       CAN_FIRE_RL_stbConnect_2,
       CAN_FIRE_RL_stbConnect_3,
       CAN_FIRE_gps_ppsSyncIn,
       CAN_FIRE_server_request_put,
       CAN_FIRE_server_response_get,
       CAN_FIRE_switch,
       CAN_FIRE_wci_m_0_sData,
       CAN_FIRE_wci_m_0_sFlag,
       CAN_FIRE_wci_m_0_sResp,
       CAN_FIRE_wci_m_0_sThreadBusy,
       CAN_FIRE_wci_m_10_sData,
       CAN_FIRE_wci_m_10_sFlag,
       CAN_FIRE_wci_m_10_sResp,
       CAN_FIRE_wci_m_10_sThreadBusy,
       CAN_FIRE_wci_m_11_sData,
       CAN_FIRE_wci_m_11_sFlag,
       CAN_FIRE_wci_m_11_sResp,
       CAN_FIRE_wci_m_11_sThreadBusy,
       CAN_FIRE_wci_m_12_sData,
       CAN_FIRE_wci_m_12_sFlag,
       CAN_FIRE_wci_m_12_sResp,
       CAN_FIRE_wci_m_12_sThreadBusy,
       CAN_FIRE_wci_m_1_sData,
       CAN_FIRE_wci_m_1_sFlag,
       CAN_FIRE_wci_m_1_sResp,
       CAN_FIRE_wci_m_1_sThreadBusy,
       CAN_FIRE_wci_m_2_sData,
       CAN_FIRE_wci_m_2_sFlag,
       CAN_FIRE_wci_m_2_sResp,
       CAN_FIRE_wci_m_2_sThreadBusy,
       CAN_FIRE_wci_m_3_sData,
       CAN_FIRE_wci_m_3_sFlag,
       CAN_FIRE_wci_m_3_sResp,
       CAN_FIRE_wci_m_3_sThreadBusy,
       CAN_FIRE_wci_m_4_sData,
       CAN_FIRE_wci_m_4_sFlag,
       CAN_FIRE_wci_m_4_sResp,
       CAN_FIRE_wci_m_4_sThreadBusy,
       CAN_FIRE_wci_m_5_sData,
       CAN_FIRE_wci_m_5_sFlag,
       CAN_FIRE_wci_m_5_sResp,
       CAN_FIRE_wci_m_5_sThreadBusy,
       CAN_FIRE_wci_m_6_sData,
       CAN_FIRE_wci_m_6_sFlag,
       CAN_FIRE_wci_m_6_sResp,
       CAN_FIRE_wci_m_6_sThreadBusy,
       CAN_FIRE_wci_m_7_sData,
       CAN_FIRE_wci_m_7_sFlag,
       CAN_FIRE_wci_m_7_sResp,
       CAN_FIRE_wci_m_7_sThreadBusy,
       CAN_FIRE_wci_m_8_sData,
       CAN_FIRE_wci_m_8_sFlag,
       CAN_FIRE_wci_m_8_sResp,
       CAN_FIRE_wci_m_8_sThreadBusy,
       CAN_FIRE_wci_m_9_sData,
       CAN_FIRE_wci_m_9_sFlag,
       CAN_FIRE_wci_m_9_sResp,
       CAN_FIRE_wci_m_9_sThreadBusy,
       CAN_FIRE_wmiS0_mAddr,
       CAN_FIRE_wmiS0_mAddrSpace,
       CAN_FIRE_wmiS0_mBurstLength,
       CAN_FIRE_wmiS0_mCmd,
       CAN_FIRE_wmiS0_mData,
       CAN_FIRE_wmiS0_mDataByteEn,
       CAN_FIRE_wmiS0_mDataInfo,
       CAN_FIRE_wmiS0_mDataLast,
       CAN_FIRE_wmiS0_mDataValid,
       CAN_FIRE_wmiS0_mFlag,
       CAN_FIRE_wmiS0_mReqInfo,
       CAN_FIRE_wmiS0_mReqLast,
       CAN_FIRE_wmiS0_mReset_n,
       CAN_FIRE_wmiS1_mAddr,
       CAN_FIRE_wmiS1_mAddrSpace,
       CAN_FIRE_wmiS1_mBurstLength,
       CAN_FIRE_wmiS1_mCmd,
       CAN_FIRE_wmiS1_mData,
       CAN_FIRE_wmiS1_mDataByteEn,
       CAN_FIRE_wmiS1_mDataInfo,
       CAN_FIRE_wmiS1_mDataLast,
       CAN_FIRE_wmiS1_mDataValid,
       CAN_FIRE_wmiS1_mFlag,
       CAN_FIRE_wmiS1_mReqInfo,
       CAN_FIRE_wmiS1_mReqLast,
       CAN_FIRE_wmiS1_mReset_n,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerRequest_4,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_ClientServerResponse_4,
       WILL_FIRE_RL_chomp_rogue,
       WILL_FIRE_RL_dp0_assignControl,
       WILL_FIRE_RL_dp0_bml_cntLclDone,
       WILL_FIRE_RL_dp0_bml_cntLclStart,
       WILL_FIRE_RL_dp0_bml_cntRemDone,
       WILL_FIRE_RL_dp0_bml_cntRemStart,
       WILL_FIRE_RL_dp0_bml_crdAdvance,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_fabDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_fba,
       WILL_FIRE_RL_dp0_bml_initAccumulators,
       WILL_FIRE_RL_dp0_bml_lbar,
       WILL_FIRE_RL_dp0_bml_lbcf,
       WILL_FIRE_RL_dp0_bml_lclAdvance,
       WILL_FIRE_RL_dp0_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_lcredit,
       WILL_FIRE_RL_dp0_bml_remAdvance,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleDec,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleInc,
       WILL_FIRE_RL_dp0_bml_remBuf_ruleMod,
       WILL_FIRE_RL_dp0_bml_remDone__dreg_update,
       WILL_FIRE_RL_dp0_bml_remStart__dreg_update,
       WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_dp0_mkConnectionVtoAf,
       WILL_FIRE_RL_dp0_operating_actions,
       WILL_FIRE_RL_dp0_rBMesg,
       WILL_FIRE_RL_dp0_rBMesg_1,
       WILL_FIRE_RL_dp0_rBMeta,
       WILL_FIRE_RL_dp0_rBMeta_1,
       WILL_FIRE_RL_dp0_rCredit_1,
       WILL_FIRE_RL_dp0_rDone,
       WILL_FIRE_RL_dp0_rDone_1,
       WILL_FIRE_RL_dp0_rFFlow_1,
       WILL_FIRE_RL_dp0_rFMesg_1,
       WILL_FIRE_RL_dp0_rFMeta_1,
       WILL_FIRE_RL_dp0_rFRdy_1,
       WILL_FIRE_RL_dp0_rRdy,
       WILL_FIRE_RL_dp0_rRdy_1,
       WILL_FIRE_RL_dp0_rStart,
       WILL_FIRE_RL_dp0_rStart_1,
       WILL_FIRE_RL_dp0_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp0_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_dp0_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_dp0_tlp_read_FirstReq,
       WILL_FIRE_RL_dp0_tlp_read_FirstResp,
       WILL_FIRE_RL_dp0_tlp_read_NextReq,
       WILL_FIRE_RL_dp0_tlp_read_NextResp,
       WILL_FIRE_RL_dp0_tlp_remDone__dreg_update,
       WILL_FIRE_RL_dp0_tlp_remStart__dreg_update,
       WILL_FIRE_RL_dp0_tlp_tlpRcv,
       WILL_FIRE_RL_dp0_tlp_writeData,
       WILL_FIRE_RL_dp0_tlp_writeReq,
       WILL_FIRE_RL_dp0_wci_Es_doAlways_Req,
       WILL_FIRE_RL_dp0_wci_cfrd,
       WILL_FIRE_RL_dp0_wci_cfwr,
       WILL_FIRE_RL_dp0_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_dp0_wci_ctl_op_complete,
       WILL_FIRE_RL_dp0_wci_ctl_op_start,
       WILL_FIRE_RL_dp0_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wci_reqF_enq,
       WILL_FIRE_RL_dp0_wci_request_decode,
       WILL_FIRE_RL_dp0_wci_respF_both,
       WILL_FIRE_RL_dp0_wci_respF_decCtr,
       WILL_FIRE_RL_dp0_wci_respF_deq,
       WILL_FIRE_RL_dp0_wci_respF_incCtr,
       WILL_FIRE_RL_dp0_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_dp0_wci_sThreadBusy_reg,
       WILL_FIRE_RL_dp0_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_dp0_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_dp0_wmi_doDwell,
       WILL_FIRE_RL_dp0_wmi_doReadReq,
       WILL_FIRE_RL_dp0_wmi_doReadResp,
       WILL_FIRE_RL_dp0_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp0_wmi_doWriteReq,
       WILL_FIRE_RL_dp0_wmi_getRequest,
       WILL_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_dp0_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_dp0_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_dp0_wmi_reqMetadata,
       WILL_FIRE_RL_dp0_wmi_respMetadata,
       WILL_FIRE_RL_dp0_wmi_throttleWmi,
       WILL_FIRE_RL_dp0_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_dp0_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_deq,
       WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_dp1_assignControl,
       WILL_FIRE_RL_dp1_bml_cntLclDone,
       WILL_FIRE_RL_dp1_bml_cntLclStart,
       WILL_FIRE_RL_dp1_bml_cntRemDone,
       WILL_FIRE_RL_dp1_bml_cntRemStart,
       WILL_FIRE_RL_dp1_bml_crdAdvance,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_crdBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_fabAvail__dreg_update,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_fabBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_fabDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_fba,
       WILL_FIRE_RL_dp1_bml_initAccumulators,
       WILL_FIRE_RL_dp1_bml_lbar,
       WILL_FIRE_RL_dp1_bml_lbcf,
       WILL_FIRE_RL_dp1_bml_lclAdvance,
       WILL_FIRE_RL_dp1_bml_lclBufDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_lclBufStart__dreg_update,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_lclBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_lcredit,
       WILL_FIRE_RL_dp1_bml_remAdvance,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleDec,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleInc,
       WILL_FIRE_RL_dp1_bml_remBuf_ruleMod,
       WILL_FIRE_RL_dp1_bml_remDone__dreg_update,
       WILL_FIRE_RL_dp1_bml_remStart__dreg_update,
       WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI,
       WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_dp1_mkConnectionVtoAf,
       WILL_FIRE_RL_dp1_operating_actions,
       WILL_FIRE_RL_dp1_rBMesg,
       WILL_FIRE_RL_dp1_rBMesg_1,
       WILL_FIRE_RL_dp1_rBMeta,
       WILL_FIRE_RL_dp1_rBMeta_1,
       WILL_FIRE_RL_dp1_rCredit_1,
       WILL_FIRE_RL_dp1_rDone,
       WILL_FIRE_RL_dp1_rDone_1,
       WILL_FIRE_RL_dp1_rFFlow_1,
       WILL_FIRE_RL_dp1_rFMesg_1,
       WILL_FIRE_RL_dp1_rFMeta_1,
       WILL_FIRE_RL_dp1_rFRdy_1,
       WILL_FIRE_RL_dp1_rRdy,
       WILL_FIRE_RL_dp1_rRdy_1,
       WILL_FIRE_RL_dp1_rStart,
       WILL_FIRE_RL_dp1_rStart_1,
       WILL_FIRE_RL_dp1_tlp_creditReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Body,
       WILL_FIRE_RL_dp1_tlp_dataXmt_Header,
       WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell,
       WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg,
       WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody,
       WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader,
       WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag,
       WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent,
       WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody,
       WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader,
       WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta,
       WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta,
       WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta,
       WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody,
       WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead,
       WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent,
       WILL_FIRE_RL_dp1_tlp_farBufReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_nearBufReady__dreg_update,
       WILL_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update,
       WILL_FIRE_RL_dp1_tlp_read_FirstReq,
       WILL_FIRE_RL_dp1_tlp_read_FirstResp,
       WILL_FIRE_RL_dp1_tlp_read_NextReq,
       WILL_FIRE_RL_dp1_tlp_read_NextResp,
       WILL_FIRE_RL_dp1_tlp_remDone__dreg_update,
       WILL_FIRE_RL_dp1_tlp_remStart__dreg_update,
       WILL_FIRE_RL_dp1_tlp_tlpRcv,
       WILL_FIRE_RL_dp1_tlp_writeData,
       WILL_FIRE_RL_dp1_tlp_writeReq,
       WILL_FIRE_RL_dp1_wci_Es_doAlways_Req,
       WILL_FIRE_RL_dp1_wci_cfrd,
       WILL_FIRE_RL_dp1_wci_cfwr,
       WILL_FIRE_RL_dp1_wci_ctlAckReg__dreg_update,
       WILL_FIRE_RL_dp1_wci_ctl_op_complete,
       WILL_FIRE_RL_dp1_wci_ctl_op_start,
       WILL_FIRE_RL_dp1_wci_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wci_reqF_enq,
       WILL_FIRE_RL_dp1_wci_request_decode,
       WILL_FIRE_RL_dp1_wci_respF_both,
       WILL_FIRE_RL_dp1_wci_respF_decCtr,
       WILL_FIRE_RL_dp1_wci_respF_deq,
       WILL_FIRE_RL_dp1_wci_respF_incCtr,
       WILL_FIRE_RL_dp1_wci_sFlagReg__dreg_update,
       WILL_FIRE_RL_dp1_wci_sThreadBusy_reg,
       WILL_FIRE_RL_dp1_wmi_Es_doAlways_Dh,
       WILL_FIRE_RL_dp1_wmi_Es_doAlways_Req,
       WILL_FIRE_RL_dp1_wmi_doDwell,
       WILL_FIRE_RL_dp1_wmi_doReadReq,
       WILL_FIRE_RL_dp1_wmi_doReadResp,
       WILL_FIRE_RL_dp1_wmi_doWriteFinalize,
       WILL_FIRE_RL_dp1_wmi_doWriteReq,
       WILL_FIRE_RL_dp1_wmi_getRequest,
       WILL_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update,
       WILL_FIRE_RL_dp1_wmi_mesgDone__dreg_update,
       WILL_FIRE_RL_dp1_wmi_mesgStart__dreg_update,
       WILL_FIRE_RL_dp1_wmi_reqMetadata,
       WILL_FIRE_RL_dp1_wmi_respMetadata,
       WILL_FIRE_RL_dp1_wmi_throttleWmi,
       WILL_FIRE_RL_dp1_wmi_wmi_backpressure_dh,
       WILL_FIRE_RL_dp1_wmi_wmi_backpressure_req,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update,
       WILL_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq,
       WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_both,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_deq,
       WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr,
       WILL_FIRE_RL_itc0_send_time,
       WILL_FIRE_RL_itc0_wti_sThreadBusy_reg,
       WILL_FIRE_RL_itc1_send_time,
       WILL_FIRE_RL_itc1_wti_sThreadBusy_reg,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mAddrConnect_1,
       WILL_FIRE_RL_mAddrSConnect,
       WILL_FIRE_RL_mAddrSConnect_1,
       WILL_FIRE_RL_mBEConnect,
       WILL_FIRE_RL_mBEConnect_1,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mCmdConnect_1,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mDataConnect_1,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_reqConnect,
       WILL_FIRE_RL_reqConnect_1,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sDataConnect_1,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sFlagConnect_1,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_sRespConnect_1,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_RL_stbConnect_1,
       WILL_FIRE_RL_stbConnect_2,
       WILL_FIRE_RL_stbConnect_3,
       WILL_FIRE_gps_ppsSyncIn,
       WILL_FIRE_server_request_put,
       WILL_FIRE_server_response_get,
       WILL_FIRE_switch,
       WILL_FIRE_wci_m_0_sData,
       WILL_FIRE_wci_m_0_sFlag,
       WILL_FIRE_wci_m_0_sResp,
       WILL_FIRE_wci_m_0_sThreadBusy,
       WILL_FIRE_wci_m_10_sData,
       WILL_FIRE_wci_m_10_sFlag,
       WILL_FIRE_wci_m_10_sResp,
       WILL_FIRE_wci_m_10_sThreadBusy,
       WILL_FIRE_wci_m_11_sData,
       WILL_FIRE_wci_m_11_sFlag,
       WILL_FIRE_wci_m_11_sResp,
       WILL_FIRE_wci_m_11_sThreadBusy,
       WILL_FIRE_wci_m_12_sData,
       WILL_FIRE_wci_m_12_sFlag,
       WILL_FIRE_wci_m_12_sResp,
       WILL_FIRE_wci_m_12_sThreadBusy,
       WILL_FIRE_wci_m_1_sData,
       WILL_FIRE_wci_m_1_sFlag,
       WILL_FIRE_wci_m_1_sResp,
       WILL_FIRE_wci_m_1_sThreadBusy,
       WILL_FIRE_wci_m_2_sData,
       WILL_FIRE_wci_m_2_sFlag,
       WILL_FIRE_wci_m_2_sResp,
       WILL_FIRE_wci_m_2_sThreadBusy,
       WILL_FIRE_wci_m_3_sData,
       WILL_FIRE_wci_m_3_sFlag,
       WILL_FIRE_wci_m_3_sResp,
       WILL_FIRE_wci_m_3_sThreadBusy,
       WILL_FIRE_wci_m_4_sData,
       WILL_FIRE_wci_m_4_sFlag,
       WILL_FIRE_wci_m_4_sResp,
       WILL_FIRE_wci_m_4_sThreadBusy,
       WILL_FIRE_wci_m_5_sData,
       WILL_FIRE_wci_m_5_sFlag,
       WILL_FIRE_wci_m_5_sResp,
       WILL_FIRE_wci_m_5_sThreadBusy,
       WILL_FIRE_wci_m_6_sData,
       WILL_FIRE_wci_m_6_sFlag,
       WILL_FIRE_wci_m_6_sResp,
       WILL_FIRE_wci_m_6_sThreadBusy,
       WILL_FIRE_wci_m_7_sData,
       WILL_FIRE_wci_m_7_sFlag,
       WILL_FIRE_wci_m_7_sResp,
       WILL_FIRE_wci_m_7_sThreadBusy,
       WILL_FIRE_wci_m_8_sData,
       WILL_FIRE_wci_m_8_sFlag,
       WILL_FIRE_wci_m_8_sResp,
       WILL_FIRE_wci_m_8_sThreadBusy,
       WILL_FIRE_wci_m_9_sData,
       WILL_FIRE_wci_m_9_sFlag,
       WILL_FIRE_wci_m_9_sResp,
       WILL_FIRE_wci_m_9_sThreadBusy,
       WILL_FIRE_wmiS0_mAddr,
       WILL_FIRE_wmiS0_mAddrSpace,
       WILL_FIRE_wmiS0_mBurstLength,
       WILL_FIRE_wmiS0_mCmd,
       WILL_FIRE_wmiS0_mData,
       WILL_FIRE_wmiS0_mDataByteEn,
       WILL_FIRE_wmiS0_mDataInfo,
       WILL_FIRE_wmiS0_mDataLast,
       WILL_FIRE_wmiS0_mDataValid,
       WILL_FIRE_wmiS0_mFlag,
       WILL_FIRE_wmiS0_mReqInfo,
       WILL_FIRE_wmiS0_mReqLast,
       WILL_FIRE_wmiS0_mReset_n,
       WILL_FIRE_wmiS1_mAddr,
       WILL_FIRE_wmiS1_mAddrSpace,
       WILL_FIRE_wmiS1_mBurstLength,
       WILL_FIRE_wmiS1_mCmd,
       WILL_FIRE_wmiS1_mData,
       WILL_FIRE_wmiS1_mDataByteEn,
       WILL_FIRE_wmiS1_mDataInfo,
       WILL_FIRE_wmiS1_mDataLast,
       WILL_FIRE_wmiS1_mDataValid,
       WILL_FIRE_wmiS1_mFlag,
       WILL_FIRE_wmiS1_mReqInfo,
       WILL_FIRE_wmiS1_mReqLast,
       WILL_FIRE_wmiS1_mReset_n;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_2,
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2;
  reg [10 : 0] MUX_dp0_bram_memory$a_put_2__VAL_2,
	       MUX_dp0_bram_memory$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_2,
	       MUX_dp0_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_2,
	       MUX_dp0_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp0_bram_memory_3$a_put_2__VAL_4,
	       MUX_dp1_bram_memory$a_put_2__VAL_2,
	       MUX_dp1_bram_memory$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_2,
	       MUX_dp1_bram_memory_1$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_2,
	       MUX_dp1_bram_memory_2$a_put_2__VAL_4,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_3,
	       MUX_dp1_bram_memory_3$a_put_2__VAL_4;
  wire [152 : 0] MUX_dp0_tlp_outF$enq_1__VAL_1,
		 MUX_dp0_tlp_outF$enq_1__VAL_2,
		 MUX_dp0_tlp_outF$enq_1__VAL_3,
		 MUX_dp0_tlp_outF$enq_1__VAL_4,
		 MUX_dp0_tlp_outF$enq_1__VAL_5,
		 MUX_dp0_tlp_outF$enq_1__VAL_6,
		 MUX_dp0_tlp_outF$enq_1__VAL_7,
		 MUX_dp0_tlp_outF$enq_1__VAL_8,
		 MUX_dp1_tlp_outF$enq_1__VAL_1,
		 MUX_dp1_tlp_outF$enq_1__VAL_2,
		 MUX_dp1_tlp_outF$enq_1__VAL_3,
		 MUX_dp1_tlp_outF$enq_1__VAL_4,
		 MUX_dp1_tlp_outF$enq_1__VAL_5,
		 MUX_dp1_tlp_outF$enq_1__VAL_6,
		 MUX_dp1_tlp_outF$enq_1__VAL_7,
		 MUX_dp1_tlp_outF$enq_1__VAL_8;
  wire [138 : 0] MUX_dp0_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp0_tlp_mRespF$enq_1__VAL_2,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_1,
		 MUX_dp1_tlp_mRespF$enq_1__VAL_2;
  wire [129 : 0] MUX_dp0_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_3,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_4,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_5,
		 MUX_dp0_tlp_mReqF$enq_1__VAL_6,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_1,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_2,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_3,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_4,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_5,
		 MUX_dp1_tlp_mReqF$enq_1__VAL_6;
  wire [128 : 0] MUX_dp0_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp0_tlp_fabMeta$write_1__VAL_3,
		 MUX_dp0_wmi_mesgMeta$write_1__VAL_2,
		 MUX_dp1_tlp_fabMeta$write_1__VAL_1,
		 MUX_dp1_tlp_fabMeta$write_1__VAL_3,
		 MUX_dp1_wmi_mesgMeta$write_1__VAL_2;
  wire [33 : 0] MUX_dp0_wci_respF_q_0$write_1__VAL_1,
		MUX_dp0_wci_respF_q_1$write_1__VAL_1,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp0_wci_respF_x_wire$wset_1__VAL_2,
		MUX_dp1_wci_respF_q_0$write_1__VAL_1,
		MUX_dp1_wci_respF_q_1$write_1__VAL_1,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_1,
		MUX_dp1_wci_respF_x_wire$wset_1__VAL_2;
  wire [31 : 0] MUX_dp0_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp0_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp0_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp0_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp0_bram_memory$a_put_3__VAL_2,
		MUX_dp0_bram_memory$a_put_3__VAL_3,
		MUX_dp0_bram_memory$b_put_3__VAL_2,
		MUX_dp0_bram_memory_1$a_put_3__VAL_2,
		MUX_dp0_bram_memory_1$b_put_3__VAL_2,
		MUX_dp0_bram_memory_2$a_put_3__VAL_2,
		MUX_dp0_bram_memory_3$a_put_3__VAL_3,
		MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_dp0_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_dp0_wmi_mesgCount$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_1,
		MUX_dp1_bml_fabFlowAddr$write_1__VAL_3,
		MUX_dp1_bml_fabMesgAddr$write_1__VAL_1,
		MUX_dp1_bml_fabMetaAddr$write_1__VAL_1,
		MUX_dp1_bram_memory$a_put_3__VAL_2,
		MUX_dp1_bram_memory$a_put_3__VAL_3,
		MUX_dp1_bram_memory$b_put_3__VAL_2,
		MUX_dp1_bram_memory_1$a_put_3__VAL_2,
		MUX_dp1_bram_memory_1$b_put_3__VAL_2,
		MUX_dp1_bram_memory_2$a_put_3__VAL_2,
		MUX_dp1_bram_memory_3$a_put_3__VAL_3,
		MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2,
		MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3,
		MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2,
		MUX_dp1_wmi_mesgCount$write_1__VAL_1;
  wire [16 : 0] MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2,
		MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1,
		MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2,
		MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1,
		MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1,
		MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2;
  wire [15 : 0] MUX_dp0_bml_crdBuf_value$write_1__VAL_2,
		MUX_dp0_bml_fabBuf_value$write_1__VAL_2,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp0_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp0_bml_lclBuf_value$write_1__VAL_2,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp0_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp0_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp0_bml_lclCredit$write_1__VAL_1,
		MUX_dp0_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp0_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp0_bml_remBuf_value$write_1__VAL_2,
		MUX_dp0_bml_remMesgAddr$write_1__VAL_1,
		MUX_dp0_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp0_tlp_remMesgAccu$write_1__VAL_2,
		MUX_dp0_tlp_remMesgAccu$write_1__VAL_3,
		MUX_dp1_bml_crdBuf_value$write_1__VAL_2,
		MUX_dp1_bml_fabBuf_value$write_1__VAL_2,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_1,
		MUX_dp1_bml_fabBufsAvail$write_1__VAL_2,
		MUX_dp1_bml_lclBuf_value$write_1__VAL_2,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_1,
		MUX_dp1_bml_lclBufsAR$write_1__VAL_2,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_1,
		MUX_dp1_bml_lclBufsCF$write_1__VAL_2,
		MUX_dp1_bml_lclCredit$write_1__VAL_1,
		MUX_dp1_bml_lclMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_lclMetaAddr$write_1__VAL_2,
		MUX_dp1_bml_remBuf_value$write_1__VAL_2,
		MUX_dp1_bml_remMesgAddr$write_1__VAL_2,
		MUX_dp1_bml_remMetaAddr$write_1__VAL_2,
		MUX_dp1_tlp_remMesgAccu$write_1__VAL_2,
		MUX_dp1_tlp_remMesgAccu$write_1__VAL_3;
  wire [13 : 0] MUX_dp0_wmi_addr$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2,
		MUX_dp1_wmi_addr$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1,
		MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2,
		MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2;
  wire [12 : 0] MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp0_tlp_writeDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_1,
		MUX_dp1_tlp_writeDWAddr$write_1__VAL_2;
  wire [9 : 0] MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3,
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1,
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1,
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1,
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2;
  wire [3 : 0] MUX_dp0_tlp_postSeqDwell$write_1__VAL_1,
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1;
  wire [1 : 0] MUX_dp0_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1,
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2,
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3,
	       MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1;
  wire MUX_dp0_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp0_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp0_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp0_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp0_bml_lclCredit$write_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_1,
       MUX_dp0_bram_memory$a_put_1__SEL_2,
       MUX_dp0_bram_memory$a_put_1__SEL_3,
       MUX_dp0_bram_memory_1$a_put_1__SEL_1,
       MUX_dp0_bram_memory_1$a_put_1__SEL_2,
       MUX_dp0_bram_memory_1$a_put_1__SEL_3,
       MUX_dp0_bram_memory_2$a_put_1__SEL_1,
       MUX_dp0_bram_memory_2$a_put_1__SEL_2,
       MUX_dp0_bram_memory_2$a_put_1__SEL_3,
       MUX_dp0_bram_memory_3$a_put_1__SEL_1,
       MUX_dp0_bram_memory_3$a_put_1__SEL_2,
       MUX_dp0_bram_memory_3$a_put_1__SEL_3,
       MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_dp0_tlp_mReqF$enq_1__SEL_1,
       MUX_dp0_tlp_mReqF$enq_1__SEL_6,
       MUX_dp0_tlp_outDwRemain$write_1__SEL_1,
       MUX_dp0_tlp_outDwRemain$write_1__SEL_2,
       MUX_dp0_tlp_outF$enq_1__SEL_8,
       MUX_dp0_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp0_tlp_readStarted$write_1__SEL_1,
       MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_1,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_dp0_tlp_xmtMetaOK$write_1__SEL_2,
       MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_dp0_wci_illegalEdge$write_1__SEL_1,
       MUX_dp0_wci_illegalEdge$write_1__SEL_2,
       MUX_dp0_wci_illegalEdge$write_1__VAL_2,
       MUX_dp0_wci_respF_q_0$write_1__SEL_2,
       MUX_dp0_wci_respF_q_1$write_1__SEL_2,
       MUX_dp0_wmi_addr$write_1__SEL_1,
       MUX_dp0_wmi_bufDwell$write_1__SEL_1,
       MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp0_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp0_wmi_mesgBusy$write_1__SEL_1,
       MUX_dp0_wmi_rdActive$write_1__SEL_1,
       MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_dp0_wmi_wrActive$write_1__SEL_1,
       MUX_dp0_wmi_wrFinalize$write_1__SEL_1,
       MUX_dp1_bml_fabBufsAvail$write_1__SEL_1,
       MUX_dp1_bml_fabFlowAddr$write_1__SEL_1,
       MUX_dp1_bml_lclBufsAR$write_1__SEL_1,
       MUX_dp1_bml_lclBufsCF$write_1__SEL_1,
       MUX_dp1_bml_lclCredit$write_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_1,
       MUX_dp1_bram_memory$a_put_1__SEL_2,
       MUX_dp1_bram_memory$a_put_1__SEL_3,
       MUX_dp1_bram_memory_1$a_put_1__SEL_1,
       MUX_dp1_bram_memory_1$a_put_1__SEL_2,
       MUX_dp1_bram_memory_1$a_put_1__SEL_3,
       MUX_dp1_bram_memory_2$a_put_1__SEL_1,
       MUX_dp1_bram_memory_2$a_put_1__SEL_2,
       MUX_dp1_bram_memory_2$a_put_1__SEL_3,
       MUX_dp1_bram_memory_3$a_put_1__SEL_1,
       MUX_dp1_bram_memory_3$a_put_1__SEL_2,
       MUX_dp1_bram_memory_3$a_put_1__SEL_3,
       MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3,
       MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1,
       MUX_dp1_tlp_mReqF$enq_1__SEL_1,
       MUX_dp1_tlp_mReqF$enq_1__SEL_6,
       MUX_dp1_tlp_outDwRemain$write_1__SEL_1,
       MUX_dp1_tlp_outDwRemain$write_1__SEL_2,
       MUX_dp1_tlp_outF$enq_1__SEL_8,
       MUX_dp1_tlp_readHeaderSent$write_1__SEL_1,
       MUX_dp1_tlp_readStarted$write_1__SEL_1,
       MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_1,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2,
       MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2,
       MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3,
       MUX_dp1_wci_illegalEdge$write_1__SEL_1,
       MUX_dp1_wci_illegalEdge$write_1__SEL_2,
       MUX_dp1_wci_illegalEdge$write_1__VAL_2,
       MUX_dp1_wci_respF_q_0$write_1__SEL_2,
       MUX_dp1_wci_respF_q_1$write_1__SEL_2,
       MUX_dp1_wmi_addr$write_1__SEL_1,
       MUX_dp1_wmi_bufDwell$write_1__SEL_1,
       MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1,
       MUX_dp1_wmi_doneWithMesg$write_1__SEL_1,
       MUX_dp1_wmi_mesgBusy$write_1__SEL_1,
       MUX_dp1_wmi_rdActive$write_1__SEL_1,
       MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2,
       MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3,
       MUX_dp1_wmi_wrActive$write_1__SEL_1,
       MUX_dp1_wmi_wrFinalize$write_1__SEL_1;

  // remaining internal signals
  reg [127 : 0] rdata__h120798, rdata__h44234;
  reg [63 : 0] v__h100351,
	       v__h102958,
	       v__h103973,
	       v__h104380,
	       v__h104919,
	       v__h105262,
	       v__h108323,
	       v__h109245,
	       v__h110266,
	       v__h110888,
	       v__h113972,
	       v__h115109,
	       v__h116203,
	       v__h136166,
	       v__h136499,
	       v__h136945,
	       v__h144461,
	       v__h152743,
	       v__h153471,
	       v__h153845,
	       v__h157733,
	       v__h16685,
	       v__h16843,
	       v__h17742,
	       v__h22716,
	       v__h23772,
	       v__h26379,
	       v__h27394,
	       v__h27807,
	       v__h28346,
	       v__h28689,
	       v__h31750,
	       v__h32672,
	       v__h33693,
	       v__h34324,
	       v__h37408,
	       v__h38545,
	       v__h39639,
	       v__h59602,
	       v__h59935,
	       v__h60381,
	       v__h67897,
	       v__h76184,
	       v__h76912,
	       v__h77286,
	       v__h93279,
	       v__h93437,
	       v__h94333,
	       v__h99301;
  reg [31 : 0] IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832,
	       IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224,
	       IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844,
	       IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235,
	       IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848,
	       IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913,
	       IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853,
	       IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914,
	       IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821,
	       IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212,
	       _theResult____h152727,
	       _theResult____h76168;
  reg [15 : 0] CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q22,
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q21;
  reg [1 : 0] lowAddr10__h122873,
	      lowAddr10__h46309,
	      x__h122996,
	      x__h123028,
	      x__h46432,
	      x__h46464;
  reg CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q18,
      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q28,
      CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q20,
      CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q25,
      CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q26,
      CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q19,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q2,
      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q27,
      CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q1,
      CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q23,
      CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q24,
      CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q17,
      IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3198,
      IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4575,
      IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1040,
      IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4547,
      IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3208,
      IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4572,
      IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1050,
      IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4548,
      IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3218,
      IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4573,
      IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1060,
      IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4602,
      IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3228,
      IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4574,
      IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1070,
      IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4549,
      IF_dp0_bml_dpControl_wget__408_BITS_1_TO_0_409_ETC___d2494,
      IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3022,
      IF_dp1_bml_dpControl_wget__48_BITS_1_TO_0_49_E_ETC___d334,
      IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d864;
  wire [127 : 0] pkt__h134007,
		 pkt__h57443,
		 w_data__h100534,
		 w_data__h103126,
		 w_data__h104482,
		 w_data__h110788,
		 w_data__h116119,
		 w_data__h21891,
		 w_data__h23955,
		 w_data__h26547,
		 w_data__h27909,
		 w_data__h34218,
		 w_data__h39555,
		 w_data__h98476;
  wire [31 : 0] dp0_bml_fabFlowAddr_418_PLUS_dp0_bml_fabFlowSi_ETC___d5141,
		dp1_bml_fabFlowAddr_58_PLUS_dp1_bml_fabFlowSiz_ETC___d5142,
		mesgMeta_opcode__h143813,
		mesgMeta_opcode__h67249,
		nowLS__h105329,
		nowLS__h110978,
		nowLS__h28756,
		nowLS__h34414,
		nowMS__h105328,
		nowMS__h110977,
		nowMS__h28755,
		nowMS__h34413,
		opcode__h105327,
		opcode__h110976,
		opcode__h28754,
		opcode__h34412,
		rdat__h152800,
		rdat__h152808,
		rdat__h152816,
		rdat__h152824,
		rdat__h152832,
		rdat__h152840,
		rdat__h152848,
		rdat__h152870,
		rdat__h152875,
		rdat__h152886,
		rdat__h152891,
		rdat__h152954,
		rdat__h76241,
		rdat__h76249,
		rdat__h76257,
		rdat__h76265,
		rdat__h76273,
		rdat__h76281,
		rdat__h76289,
		rdat__h76311,
		rdat__h76316,
		rdat__h76327,
		rdat__h76332,
		rdat__h76395,
		rresp_data__h122915,
		rresp_data__h46351,
		x3__h143770,
		x3__h67206,
		x__h105388,
		x__h111008,
		x__h146282,
		x__h146283,
		x__h146284,
		x__h146285,
		x__h28815,
		x__h34444,
		x__h69718,
		x__h69719,
		x__h69720,
		x__h69721,
		y__h104627,
		y__h105092,
		y__h110586,
		y__h28054,
		y__h28519,
		y__h34016,
		y_avValue__h122790,
		y_avValue__h122810,
		y_avValue__h122830,
		y_avValue__h122850,
		y_avValue__h46226,
		y_avValue__h46246,
		y_avValue__h46266,
		y_avValue__h46286;
  wire [16 : 0] x__h105032,
		x__h110529,
		x__h28459,
		x__h33959,
		y__h105019,
		y__h105034,
		y__h110521,
		y__h110531,
		y__h136475,
		y__h28446,
		y__h28461,
		y__h33951,
		y__h33961,
		y__h59911;
  wire [15 : 0] w_be__h104105,
		w_be__h27532,
		x__h150793,
		x__h151410,
		x__h151415,
		x__h151452,
		x__h151457,
		x__h151533,
		x__h151538,
		x__h151605,
		x__h151610,
		x__h74232,
		x__h74849,
		x__h74854,
		x__h74891,
		x__h74896,
		x__h74972,
		x__h74977,
		x__h75044,
		x__h75049,
		y__h105142,
		y__h136580,
		y__h28569,
		y__h60016;
  wire [12 : 0] dp0_tlp_readNxtDWAddr_PLUS_1__q7,
		dp0_tlp_readNxtDWAddr_PLUS_2__q8,
		dp0_tlp_readNxtDWAddr_PLUS_3__q6,
		dp0_tlp_writeDWAddr_PLUS_1__q4,
		dp0_tlp_writeDWAddr_PLUS_2__q5,
		dp0_tlp_writeDWAddr_PLUS_3__q3,
		dp1_tlp_readNxtDWAddr_PLUS_1__q12,
		dp1_tlp_readNxtDWAddr_PLUS_2__q13,
		dp1_tlp_readNxtDWAddr_PLUS_3__q11,
		dp1_tlp_writeDWAddr_PLUS_1__q15,
		dp1_tlp_writeDWAddr_PLUS_2__q16,
		dp1_tlp_writeDWAddr_PLUS_3__q14,
		spanToNextPage__h104978,
		spanToNextPage__h110495,
		spanToNextPage__h28405,
		spanToNextPage__h33925,
		thisRequestLength__h104979,
		thisRequestLength__h110496,
		thisRequestLength__h28406,
		thisRequestLength__h33926;
  wire [11 : 0] byteCount__h122875,
		byteCount__h46311,
		x__h122987,
		x__h122989,
		x__h46423,
		x__h46425,
		y__h122988,
		y__h122990,
		y__h46424,
		y__h46426;
  wire [9 : 0] x__h104630,
	       x__h136478,
	       x__h136583,
	       x__h28057,
	       x__h59914,
	       x__h60019;
  wire [7 : 0] rreq_tag__h105193,
	       rreq_tag__h28620,
	       tag__h116113,
	       tag__h39549,
	       tagm__h113997,
	       tagm__h37433;
  wire [6 : 0] lowAddr__h122874, lowAddr__h46310;
  wire [3 : 0] lastBE__h104507,
	       lastBE__h110815,
	       lastBE__h27934,
	       lastBE__h34251;
  wire [2 : 0] dp0_bram_serverAdapterA_1_cnt_083_PLUS_IF_dp0__ETC___d4282,
	       dp0_bram_serverAdapterA_2_cnt_085_PLUS_IF_dp0__ETC___d4170,
	       dp0_bram_serverAdapterA_3_cnt_087_PLUS_IF_dp0__ETC___d4058,
	       dp0_bram_serverAdapterA_cnt_081_PLUS_IF_dp0_br_ETC___d4394,
	       dp0_bram_serverAdapterB_1_cnt_651_PLUS_IF_dp0__ETC___d4226,
	       dp0_bram_serverAdapterB_2_cnt_653_PLUS_IF_dp0__ETC___d4114,
	       dp0_bram_serverAdapterB_3_cnt_656_PLUS_IF_dp0__ETC___d4002,
	       dp0_bram_serverAdapterB_cnt_649_PLUS_IF_dp0_br_ETC___d4338,
	       dp1_bram_serverAdapterA_1_cnt_25_PLUS_IF_dp1_b_ETC___d2129,
	       dp1_bram_serverAdapterA_2_cnt_27_PLUS_IF_dp1_b_ETC___d2017,
	       dp1_bram_serverAdapterA_3_cnt_29_PLUS_IF_dp1_b_ETC___d1905,
	       dp1_bram_serverAdapterA_cnt_23_PLUS_IF_dp1_bra_ETC___d2241,
	       dp1_bram_serverAdapterB_1_cnt_92_PLUS_IF_dp1_b_ETC___d2073,
	       dp1_bram_serverAdapterB_2_cnt_94_PLUS_IF_dp1_b_ETC___d1961,
	       dp1_bram_serverAdapterB_3_cnt_97_PLUS_IF_dp1_b_ETC___d1849,
	       dp1_bram_serverAdapterB_cnt_90_PLUS_IF_dp1_bra_ETC___d2185;
  wire [1 : 0] ab__h10959,
	       ab__h12490,
	       ab__h13888,
	       ab__h3701,
	       ab__h5101,
	       ab__h6632,
	       ab__h8030,
	       ab__h80301,
	       ab__h81701,
	       ab__h83232,
	       ab__h84630,
	       ab__h86161,
	       ab__h87559,
	       ab__h89090,
	       ab__h90488,
	       ab__h9561,
	       idx__h124168,
	       idx__h124649,
	       idx__h125030,
	       idx__h125411,
	       idx__h126555,
	       idx__h128700,
	       idx__h129942,
	       idx__h131184,
	       idx__h47604,
	       idx__h48085,
	       idx__h48466,
	       idx__h48847,
	       idx__h49991,
	       idx__h52136,
	       idx__h53378,
	       idx__h54620;
  wire IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3231,
       IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1073,
       IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3027,
       IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d869,
       NOT_dp0_bml_lclBufDone_447_451_AND_IF_dp0_bml__ETC___d2487,
       NOT_dp0_tlp_mReqF_first__101_BITS_28_TO_19_156_ETC___d3170,
       NOT_dp0_wmi_wrActive_684_702_OR_NOT_dp0_wmi_rd_ETC___d2710,
       NOT_dp1_bml_lclBufDone_87_91_AND_IF_dp1_bml_dp_ETC___d327,
       NOT_dp1_tlp_mReqF_first__43_BITS_28_TO_19_98_E_ETC___d1012,
       NOT_dp1_wmi_wrActive_25_43_OR_NOT_dp1_wmi_rdAc_ETC___d551,
       _dfoo15,
       _dfoo5,
       dp0_bml_crdBuf_value_531_EQ_dp0_bml_crdBuf_mod_ETC___d4609,
       dp0_bml_fabBuf_value_520_EQ_dp0_bml_fabBuf_mod_ETC___d5195,
       dp0_bml_lclBufDone_447_AND_IF_dp0_bml_dpContro_ETC___d4604,
       dp0_bml_lclBuf_value_351_EQ_dp0_bml_lclBuf_mod_ETC___d5196,
       dp0_bml_remBuf_value_350_EQ_dp0_bml_remBuf_mod_ETC___d5194,
       dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779,
       dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780,
       dp0_bram_serverAdapterA_2_outData_outData_whas_ETC___d2943,
       dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781,
       dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778,
       dp0_bram_serverAdapterA_outData_outData_whas___ETC___d2947,
       dp0_bram_serverAdapterB_1_cnt_651_SLT_3___d2652,
       dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d2747,
       dp0_bram_serverAdapterB_2_cnt_653_SLT_3___d2654,
       dp0_bram_serverAdapterB_3_cnt_656_SLT_3___d2657,
       dp0_bram_serverAdapterB_cnt_649_SLT_3___d2650,
       dp0_tlp_dmaPullRemainDWLen_494_ULE_dp0_tlp_dma_ETC___d4777,
       dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776,
       dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3477,
       dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3617,
       dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3640,
       dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3816,
       dp0_tlp_inF_first__398_BITS_63_TO_56_544_EQ_pc_ETC___d3551,
       dp0_tlp_inF_first__398_BIT_152_399_AND_NOT_dp0_ETC___d3431,
       dp0_tlp_mReqF_RDY_deq__093_AND_IF_dp0_tlp_mReq_ETC___d3334,
       dp0_tlp_mRespF_first__352_BITS_71_TO_62_377_ULE_1___d4452,
       dp0_tlp_outDwRemain_358_ULE_4___d4675,
       dp0_tlp_rdRespDwRemain_935_ULE_4___d2936,
       dp0_tlp_readRemainDWLen_090_ULE_4___d3091,
       dp0_tlp_writeRemainDWLen_185_ULE_1___d4454,
       dp0_tlp_writeRemainDWLen_185_ULE_2___d4447,
       dp0_tlp_writeRemainDWLen_185_ULE_3___d4450,
       dp0_wmi_dpControl_whas__727_AND_dp0_bram_serve_ETC___d2751,
       dp1_bml_crdBuf_value_71_EQ_dp1_bml_crdBuf_modu_ETC___d5251,
       dp1_bml_fabBuf_value_60_EQ_dp1_bml_fabBuf_modu_ETC___d5250,
       dp1_bml_lclBufDone_87_AND_IF_dp1_bml_dpControl_ETC___d4513,
       dp1_bml_lclBuf_value_91_EQ_dp1_bml_lclBuf_modu_ETC___d5252,
       dp1_bml_remBuf_value_90_EQ_dp1_bml_remBuf_modu_ETC___d5249,
       dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146,
       dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147,
       dp1_bram_serverAdapterA_2_outData_outData_whas_ETC___d785,
       dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148,
       dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145,
       dp1_bram_serverAdapterA_outData_outData_whas___ETC___d789,
       dp1_bram_serverAdapterB_1_cnt_92_SLT_3___d493,
       dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d588,
       dp1_bram_serverAdapterB_2_cnt_94_SLT_3___d495,
       dp1_bram_serverAdapterB_3_cnt_97_SLT_3___d498,
       dp1_bram_serverAdapterB_cnt_90_SLT_3___d491,
       dp1_tlp_dmaPullRemainDWLen_337_ULE_dp1_tlp_dma_ETC___d5144,
       dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143,
       dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1320,
       dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1462,
       dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1485,
       dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1661,
       dp1_tlp_inF_first__241_BITS_63_TO_56_387_EQ_pc_ETC___d1396,
       dp1_tlp_inF_first__241_BIT_152_242_AND_NOT_dp1_ETC___d1274,
       dp1_tlp_mReqF_RDY_deq__35_AND_IF_dp1_tlp_mReqF_ETC___d1176,
       dp1_tlp_mRespF_first__194_BITS_71_TO_62_219_ULE_1___d4497,
       dp1_tlp_outDwRemain_200_ULE_4___d4985,
       dp1_tlp_rdRespDwRemain_77_ULE_4___d778,
       dp1_tlp_readRemainDWLen_32_ULE_4___d933,
       dp1_tlp_writeRemainDWLen_027_ULE_1___d4504,
       dp1_tlp_writeRemainDWLen_027_ULE_2___d4499,
       dp1_tlp_writeRemainDWLen_027_ULE_3___d4500,
       dp1_wmi_dpControl_whas__68_AND_dp1_bram_server_ETC___d592;

  // output resets
  assign RST_N_wci_m_0_mReset_n = cp$RST_N_wci_Vm_0_mReset_n ;
  assign RST_N_wci_m_2_mReset_n = cp$RST_N_wci_Vm_2_mReset_n ;
  assign RST_N_wci_m_1_mReset_n = cp$RST_N_wci_Vm_1_mReset_n ;
  assign RST_N_wci_m_4_mReset_n = cp$RST_N_wci_Vm_4_mReset_n ;
  assign RST_N_wci_m_6_mReset_n = cp$RST_N_wci_Vm_6_mReset_n ;
  assign RST_N_wci_m_3_mReset_n = cp$RST_N_wci_Vm_3_mReset_n ;
  assign RST_N_wci_m_5_mReset_n = cp$RST_N_wci_Vm_5_mReset_n ;
  assign RST_N_wci_m_8_mReset_n = cp$RST_N_wci_Vm_8_mReset_n ;
  assign RST_N_wci_m_7_mReset_n = cp$RST_N_wci_Vm_7_mReset_n ;
  assign RST_N_wci_m_9_mReset_n = cp$RST_N_wci_Vm_9_mReset_n ;
  assign RST_N_wci_m_10_mReset_n = cp$RST_N_wci_Vm_10_mReset_n ;
  assign RST_N_wci_m_12_mReset_n = cp$RST_N_wci_Vm_12_mReset_n ;
  assign RST_N_wci_m_11_mReset_n = cp$RST_N_wci_Vm_11_mReset_n ;

  // action method server_request_put
  assign RDY_server_request_put = sm0$RDY_s_request_put ;
  assign CAN_FIRE_server_request_put = sm0$RDY_s_request_put ;
  assign WILL_FIRE_server_request_put = EN_server_request_put ;

  // actionvalue method server_response_get
  assign server_response_get = sm0$s_response_get ;
  assign RDY_server_response_get = sm0$RDY_s_response_get ;
  assign CAN_FIRE_server_response_get = sm0$RDY_s_response_get ;
  assign WILL_FIRE_server_response_get = EN_server_response_get ;

  // value method led
  assign led = cp$led ;

  // action method switch
  assign CAN_FIRE_switch = 1'd1 ;
  assign WILL_FIRE_switch = 1'd1 ;

  // value method wci_m_0_mCmd
  assign wci_m_0_MCmd = cp$wci_Vm_0_MCmd ;

  // value method wci_m_0_mAddrSpace
  assign wci_m_0_MAddrSpace = cp$wci_Vm_0_MAddrSpace ;

  // value method wci_m_0_mByteEn
  assign wci_m_0_MByteEn = cp$wci_Vm_0_MByteEn ;

  // value method wci_m_0_mAddr
  assign wci_m_0_MAddr = cp$wci_Vm_0_MAddr ;

  // value method wci_m_0_mData
  assign wci_m_0_MData = cp$wci_Vm_0_MData ;

  // action method wci_m_0_sResp
  assign CAN_FIRE_wci_m_0_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sResp = 1'd1 ;

  // action method wci_m_0_sData
  assign CAN_FIRE_wci_m_0_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sData = 1'd1 ;

  // action method wci_m_0_sThreadBusy
  assign CAN_FIRE_wci_m_0_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sThreadBusy = wci_m_0_SThreadBusy ;

  // action method wci_m_0_sFlag
  assign CAN_FIRE_wci_m_0_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_0_sFlag = 1'd1 ;

  // value method wci_m_0_mFlag
  assign wci_m_0_MFlag = cp$wci_Vm_0_MFlag ;

  // value method wci_m_1_mCmd
  assign wci_m_1_MCmd = cp$wci_Vm_1_MCmd ;

  // value method wci_m_1_mAddrSpace
  assign wci_m_1_MAddrSpace = cp$wci_Vm_1_MAddrSpace ;

  // value method wci_m_1_mByteEn
  assign wci_m_1_MByteEn = cp$wci_Vm_1_MByteEn ;

  // value method wci_m_1_mAddr
  assign wci_m_1_MAddr = cp$wci_Vm_1_MAddr ;

  // value method wci_m_1_mData
  assign wci_m_1_MData = cp$wci_Vm_1_MData ;

  // action method wci_m_1_sResp
  assign CAN_FIRE_wci_m_1_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sResp = 1'd1 ;

  // action method wci_m_1_sData
  assign CAN_FIRE_wci_m_1_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sData = 1'd1 ;

  // action method wci_m_1_sThreadBusy
  assign CAN_FIRE_wci_m_1_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sThreadBusy = wci_m_1_SThreadBusy ;

  // action method wci_m_1_sFlag
  assign CAN_FIRE_wci_m_1_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_1_sFlag = 1'd1 ;

  // value method wci_m_1_mFlag
  assign wci_m_1_MFlag = cp$wci_Vm_1_MFlag ;

  // value method wci_m_2_mCmd
  assign wci_m_2_MCmd = cp$wci_Vm_2_MCmd ;

  // value method wci_m_2_mAddrSpace
  assign wci_m_2_MAddrSpace = cp$wci_Vm_2_MAddrSpace ;

  // value method wci_m_2_mByteEn
  assign wci_m_2_MByteEn = cp$wci_Vm_2_MByteEn ;

  // value method wci_m_2_mAddr
  assign wci_m_2_MAddr = cp$wci_Vm_2_MAddr ;

  // value method wci_m_2_mData
  assign wci_m_2_MData = cp$wci_Vm_2_MData ;

  // action method wci_m_2_sResp
  assign CAN_FIRE_wci_m_2_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sResp = 1'd1 ;

  // action method wci_m_2_sData
  assign CAN_FIRE_wci_m_2_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sData = 1'd1 ;

  // action method wci_m_2_sThreadBusy
  assign CAN_FIRE_wci_m_2_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sThreadBusy = wci_m_2_SThreadBusy ;

  // action method wci_m_2_sFlag
  assign CAN_FIRE_wci_m_2_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_2_sFlag = 1'd1 ;

  // value method wci_m_2_mFlag
  assign wci_m_2_MFlag = cp$wci_Vm_2_MFlag ;

  // value method wci_m_3_mCmd
  assign wci_m_3_MCmd = cp$wci_Vm_3_MCmd ;

  // value method wci_m_3_mAddrSpace
  assign wci_m_3_MAddrSpace = cp$wci_Vm_3_MAddrSpace ;

  // value method wci_m_3_mByteEn
  assign wci_m_3_MByteEn = cp$wci_Vm_3_MByteEn ;

  // value method wci_m_3_mAddr
  assign wci_m_3_MAddr = cp$wci_Vm_3_MAddr ;

  // value method wci_m_3_mData
  assign wci_m_3_MData = cp$wci_Vm_3_MData ;

  // action method wci_m_3_sResp
  assign CAN_FIRE_wci_m_3_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sResp = 1'd1 ;

  // action method wci_m_3_sData
  assign CAN_FIRE_wci_m_3_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sData = 1'd1 ;

  // action method wci_m_3_sThreadBusy
  assign CAN_FIRE_wci_m_3_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sThreadBusy = wci_m_3_SThreadBusy ;

  // action method wci_m_3_sFlag
  assign CAN_FIRE_wci_m_3_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_3_sFlag = 1'd1 ;

  // value method wci_m_3_mFlag
  assign wci_m_3_MFlag = cp$wci_Vm_3_MFlag ;

  // value method wci_m_4_mCmd
  assign wci_m_4_MCmd = cp$wci_Vm_4_MCmd ;

  // value method wci_m_4_mAddrSpace
  assign wci_m_4_MAddrSpace = cp$wci_Vm_4_MAddrSpace ;

  // value method wci_m_4_mByteEn
  assign wci_m_4_MByteEn = cp$wci_Vm_4_MByteEn ;

  // value method wci_m_4_mAddr
  assign wci_m_4_MAddr = cp$wci_Vm_4_MAddr ;

  // value method wci_m_4_mData
  assign wci_m_4_MData = cp$wci_Vm_4_MData ;

  // action method wci_m_4_sResp
  assign CAN_FIRE_wci_m_4_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sResp = 1'd1 ;

  // action method wci_m_4_sData
  assign CAN_FIRE_wci_m_4_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sData = 1'd1 ;

  // action method wci_m_4_sThreadBusy
  assign CAN_FIRE_wci_m_4_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sThreadBusy = wci_m_4_SThreadBusy ;

  // action method wci_m_4_sFlag
  assign CAN_FIRE_wci_m_4_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_4_sFlag = 1'd1 ;

  // value method wci_m_4_mFlag
  assign wci_m_4_MFlag = cp$wci_Vm_4_MFlag ;

  // value method wci_m_5_mCmd
  assign wci_m_5_MCmd = cp$wci_Vm_5_MCmd ;

  // value method wci_m_5_mAddrSpace
  assign wci_m_5_MAddrSpace = cp$wci_Vm_5_MAddrSpace ;

  // value method wci_m_5_mByteEn
  assign wci_m_5_MByteEn = cp$wci_Vm_5_MByteEn ;

  // value method wci_m_5_mAddr
  assign wci_m_5_MAddr = cp$wci_Vm_5_MAddr ;

  // value method wci_m_5_mData
  assign wci_m_5_MData = cp$wci_Vm_5_MData ;

  // action method wci_m_5_sResp
  assign CAN_FIRE_wci_m_5_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sResp = 1'd1 ;

  // action method wci_m_5_sData
  assign CAN_FIRE_wci_m_5_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sData = 1'd1 ;

  // action method wci_m_5_sThreadBusy
  assign CAN_FIRE_wci_m_5_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sThreadBusy = wci_m_5_SThreadBusy ;

  // action method wci_m_5_sFlag
  assign CAN_FIRE_wci_m_5_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_5_sFlag = 1'd1 ;

  // value method wci_m_5_mFlag
  assign wci_m_5_MFlag = cp$wci_Vm_5_MFlag ;

  // value method wci_m_6_mCmd
  assign wci_m_6_MCmd = cp$wci_Vm_6_MCmd ;

  // value method wci_m_6_mAddrSpace
  assign wci_m_6_MAddrSpace = cp$wci_Vm_6_MAddrSpace ;

  // value method wci_m_6_mByteEn
  assign wci_m_6_MByteEn = cp$wci_Vm_6_MByteEn ;

  // value method wci_m_6_mAddr
  assign wci_m_6_MAddr = cp$wci_Vm_6_MAddr ;

  // value method wci_m_6_mData
  assign wci_m_6_MData = cp$wci_Vm_6_MData ;

  // action method wci_m_6_sResp
  assign CAN_FIRE_wci_m_6_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sResp = 1'd1 ;

  // action method wci_m_6_sData
  assign CAN_FIRE_wci_m_6_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sData = 1'd1 ;

  // action method wci_m_6_sThreadBusy
  assign CAN_FIRE_wci_m_6_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sThreadBusy = wci_m_6_SThreadBusy ;

  // action method wci_m_6_sFlag
  assign CAN_FIRE_wci_m_6_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_6_sFlag = 1'd1 ;

  // value method wci_m_6_mFlag
  assign wci_m_6_MFlag = cp$wci_Vm_6_MFlag ;

  // value method wci_m_7_mCmd
  assign wci_m_7_MCmd = cp$wci_Vm_7_MCmd ;

  // value method wci_m_7_mAddrSpace
  assign wci_m_7_MAddrSpace = cp$wci_Vm_7_MAddrSpace ;

  // value method wci_m_7_mByteEn
  assign wci_m_7_MByteEn = cp$wci_Vm_7_MByteEn ;

  // value method wci_m_7_mAddr
  assign wci_m_7_MAddr = cp$wci_Vm_7_MAddr ;

  // value method wci_m_7_mData
  assign wci_m_7_MData = cp$wci_Vm_7_MData ;

  // action method wci_m_7_sResp
  assign CAN_FIRE_wci_m_7_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sResp = 1'd1 ;

  // action method wci_m_7_sData
  assign CAN_FIRE_wci_m_7_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sData = 1'd1 ;

  // action method wci_m_7_sThreadBusy
  assign CAN_FIRE_wci_m_7_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sThreadBusy = wci_m_7_SThreadBusy ;

  // action method wci_m_7_sFlag
  assign CAN_FIRE_wci_m_7_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_7_sFlag = 1'd1 ;

  // value method wci_m_7_mFlag
  assign wci_m_7_MFlag = cp$wci_Vm_7_MFlag ;

  // value method wci_m_8_mCmd
  assign wci_m_8_MCmd = cp$wci_Vm_8_MCmd ;

  // value method wci_m_8_mAddrSpace
  assign wci_m_8_MAddrSpace = cp$wci_Vm_8_MAddrSpace ;

  // value method wci_m_8_mByteEn
  assign wci_m_8_MByteEn = cp$wci_Vm_8_MByteEn ;

  // value method wci_m_8_mAddr
  assign wci_m_8_MAddr = cp$wci_Vm_8_MAddr ;

  // value method wci_m_8_mData
  assign wci_m_8_MData = cp$wci_Vm_8_MData ;

  // action method wci_m_8_sResp
  assign CAN_FIRE_wci_m_8_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sResp = 1'd1 ;

  // action method wci_m_8_sData
  assign CAN_FIRE_wci_m_8_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sData = 1'd1 ;

  // action method wci_m_8_sThreadBusy
  assign CAN_FIRE_wci_m_8_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sThreadBusy = wci_m_8_SThreadBusy ;

  // action method wci_m_8_sFlag
  assign CAN_FIRE_wci_m_8_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_8_sFlag = 1'd1 ;

  // value method wci_m_8_mFlag
  assign wci_m_8_MFlag = cp$wci_Vm_8_MFlag ;

  // value method wci_m_9_mCmd
  assign wci_m_9_MCmd = cp$wci_Vm_9_MCmd ;

  // value method wci_m_9_mAddrSpace
  assign wci_m_9_MAddrSpace = cp$wci_Vm_9_MAddrSpace ;

  // value method wci_m_9_mByteEn
  assign wci_m_9_MByteEn = cp$wci_Vm_9_MByteEn ;

  // value method wci_m_9_mAddr
  assign wci_m_9_MAddr = cp$wci_Vm_9_MAddr ;

  // value method wci_m_9_mData
  assign wci_m_9_MData = cp$wci_Vm_9_MData ;

  // action method wci_m_9_sResp
  assign CAN_FIRE_wci_m_9_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sResp = 1'd1 ;

  // action method wci_m_9_sData
  assign CAN_FIRE_wci_m_9_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sData = 1'd1 ;

  // action method wci_m_9_sThreadBusy
  assign CAN_FIRE_wci_m_9_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sThreadBusy = wci_m_9_SThreadBusy ;

  // action method wci_m_9_sFlag
  assign CAN_FIRE_wci_m_9_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_9_sFlag = 1'd1 ;

  // value method wci_m_9_mFlag
  assign wci_m_9_MFlag = cp$wci_Vm_9_MFlag ;

  // value method wci_m_10_mCmd
  assign wci_m_10_MCmd = cp$wci_Vm_10_MCmd ;

  // value method wci_m_10_mAddrSpace
  assign wci_m_10_MAddrSpace = cp$wci_Vm_10_MAddrSpace ;

  // value method wci_m_10_mByteEn
  assign wci_m_10_MByteEn = cp$wci_Vm_10_MByteEn ;

  // value method wci_m_10_mAddr
  assign wci_m_10_MAddr = cp$wci_Vm_10_MAddr ;

  // value method wci_m_10_mData
  assign wci_m_10_MData = cp$wci_Vm_10_MData ;

  // action method wci_m_10_sResp
  assign CAN_FIRE_wci_m_10_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sResp = 1'd1 ;

  // action method wci_m_10_sData
  assign CAN_FIRE_wci_m_10_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sData = 1'd1 ;

  // action method wci_m_10_sThreadBusy
  assign CAN_FIRE_wci_m_10_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sThreadBusy = wci_m_10_SThreadBusy ;

  // action method wci_m_10_sFlag
  assign CAN_FIRE_wci_m_10_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_10_sFlag = 1'd1 ;

  // value method wci_m_10_mFlag
  assign wci_m_10_MFlag = cp$wci_Vm_10_MFlag ;

  // value method wci_m_11_mCmd
  assign wci_m_11_MCmd = cp$wci_Vm_11_MCmd ;

  // value method wci_m_11_mAddrSpace
  assign wci_m_11_MAddrSpace = cp$wci_Vm_11_MAddrSpace ;

  // value method wci_m_11_mByteEn
  assign wci_m_11_MByteEn = cp$wci_Vm_11_MByteEn ;

  // value method wci_m_11_mAddr
  assign wci_m_11_MAddr = cp$wci_Vm_11_MAddr ;

  // value method wci_m_11_mData
  assign wci_m_11_MData = cp$wci_Vm_11_MData ;

  // action method wci_m_11_sResp
  assign CAN_FIRE_wci_m_11_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sResp = 1'd1 ;

  // action method wci_m_11_sData
  assign CAN_FIRE_wci_m_11_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sData = 1'd1 ;

  // action method wci_m_11_sThreadBusy
  assign CAN_FIRE_wci_m_11_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sThreadBusy = wci_m_11_SThreadBusy ;

  // action method wci_m_11_sFlag
  assign CAN_FIRE_wci_m_11_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_11_sFlag = 1'd1 ;

  // value method wci_m_11_mFlag
  assign wci_m_11_MFlag = cp$wci_Vm_11_MFlag ;

  // value method wci_m_12_mCmd
  assign wci_m_12_MCmd = cp$wci_Vm_12_MCmd ;

  // value method wci_m_12_mAddrSpace
  assign wci_m_12_MAddrSpace = cp$wci_Vm_12_MAddrSpace ;

  // value method wci_m_12_mByteEn
  assign wci_m_12_MByteEn = cp$wci_Vm_12_MByteEn ;

  // value method wci_m_12_mAddr
  assign wci_m_12_MAddr = cp$wci_Vm_12_MAddr ;

  // value method wci_m_12_mData
  assign wci_m_12_MData = cp$wci_Vm_12_MData ;

  // action method wci_m_12_sResp
  assign CAN_FIRE_wci_m_12_sResp = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sResp = 1'd1 ;

  // action method wci_m_12_sData
  assign CAN_FIRE_wci_m_12_sData = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sData = 1'd1 ;

  // action method wci_m_12_sThreadBusy
  assign CAN_FIRE_wci_m_12_sThreadBusy = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sThreadBusy = wci_m_12_SThreadBusy ;

  // action method wci_m_12_sFlag
  assign CAN_FIRE_wci_m_12_sFlag = 1'd1 ;
  assign WILL_FIRE_wci_m_12_sFlag = 1'd1 ;

  // value method wci_m_12_mFlag
  assign wci_m_12_MFlag = cp$wci_Vm_12_MFlag ;

  // action method wmiS0_mCmd
  assign CAN_FIRE_wmiS0_mCmd = 1'd1 ;
  assign WILL_FIRE_wmiS0_mCmd = 1'd1 ;

  // action method wmiS0_mReqLast
  assign CAN_FIRE_wmiS0_mReqLast = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReqLast = wmiS0_MReqLast ;

  // action method wmiS0_mReqInfo
  assign CAN_FIRE_wmiS0_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReqInfo = 1'd1 ;

  // action method wmiS0_mAddrSpace
  assign CAN_FIRE_wmiS0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wmiS0_mAddrSpace = 1'd1 ;

  // action method wmiS0_mAddr
  assign CAN_FIRE_wmiS0_mAddr = 1'd1 ;
  assign WILL_FIRE_wmiS0_mAddr = 1'd1 ;

  // action method wmiS0_mBurstLength
  assign CAN_FIRE_wmiS0_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wmiS0_mBurstLength = 1'd1 ;

  // action method wmiS0_mDataValid
  assign CAN_FIRE_wmiS0_mDataValid = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataValid = wmiS0_MDataValid ;

  // action method wmiS0_mDataLast
  assign CAN_FIRE_wmiS0_mDataLast = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataLast = wmiS0_MDataLast ;

  // action method wmiS0_mData
  assign CAN_FIRE_wmiS0_mData = 1'd1 ;
  assign WILL_FIRE_wmiS0_mData = 1'd1 ;

  // action method wmiS0_mDataInfo
  assign CAN_FIRE_wmiS0_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataInfo = 1'd1 ;

  // action method wmiS0_mDataByteEn
  assign CAN_FIRE_wmiS0_mDataByteEn = 1'd1 ;
  assign WILL_FIRE_wmiS0_mDataByteEn = 1'd1 ;

  // value method wmiS0_sResp
  assign wmiS0_SResp = dp0_wmi_wmi_respF_q_0[257:256] ;

  // value method wmiS0_sData
  assign wmiS0_SData = dp0_wmi_wmi_respF_q_0[255:0] ;

  // value method wmiS0_sThreadBusy
  assign wmiS0_SThreadBusy =
	     !CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ||
	     dp0_wmi_wmi_sThreadBusy_dw$wget ;

  // value method wmiS0_sDataThreadBusy
  assign wmiS0_SDataThreadBusy =
	     !CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ||
	     dp0_wmi_wmi_sDataThreadBusy_dw$wget ;

  // value method wmiS0_sRespLast
  assign wmiS0_SRespLast = 1'd0 ;

  // value method wmiS0_sFlag
  assign wmiS0_SFlag = dp0_wmi_wmi_sFlagReg ;

  // action method wmiS0_mFlag
  assign CAN_FIRE_wmiS0_mFlag = 1'd1 ;
  assign WILL_FIRE_wmiS0_mFlag = 1'd1 ;

  // value method wmiS0_sReset_n
  assign wmiS0_SReset_n = !dp0_wmi_wmi_isReset$VAL && dp0_wmi_wmi_operateD ;

  // action method wmiS0_mReset_n
  assign CAN_FIRE_wmiS0_mReset_n = 1'd1 ;
  assign WILL_FIRE_wmiS0_mReset_n = wmiS0_MReset_n ;

  // action method wmiS1_mCmd
  assign CAN_FIRE_wmiS1_mCmd = 1'd1 ;
  assign WILL_FIRE_wmiS1_mCmd = 1'd1 ;

  // action method wmiS1_mReqLast
  assign CAN_FIRE_wmiS1_mReqLast = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReqLast = wmiS1_MReqLast ;

  // action method wmiS1_mReqInfo
  assign CAN_FIRE_wmiS1_mReqInfo = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReqInfo = 1'd1 ;

  // action method wmiS1_mAddrSpace
  assign CAN_FIRE_wmiS1_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wmiS1_mAddrSpace = 1'd1 ;

  // action method wmiS1_mAddr
  assign CAN_FIRE_wmiS1_mAddr = 1'd1 ;
  assign WILL_FIRE_wmiS1_mAddr = 1'd1 ;

  // action method wmiS1_mBurstLength
  assign CAN_FIRE_wmiS1_mBurstLength = 1'd1 ;
  assign WILL_FIRE_wmiS1_mBurstLength = 1'd1 ;

  // action method wmiS1_mDataValid
  assign CAN_FIRE_wmiS1_mDataValid = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataValid = wmiS1_MDataValid ;

  // action method wmiS1_mDataLast
  assign CAN_FIRE_wmiS1_mDataLast = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataLast = wmiS1_MDataLast ;

  // action method wmiS1_mData
  assign CAN_FIRE_wmiS1_mData = 1'd1 ;
  assign WILL_FIRE_wmiS1_mData = 1'd1 ;

  // action method wmiS1_mDataInfo
  assign CAN_FIRE_wmiS1_mDataInfo = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataInfo = 1'd1 ;

  // action method wmiS1_mDataByteEn
  assign CAN_FIRE_wmiS1_mDataByteEn = 1'd1 ;
  assign WILL_FIRE_wmiS1_mDataByteEn = 1'd1 ;

  // value method wmiS1_sResp
  assign wmiS1_SResp = dp1_wmi_wmi_respF_q_0[257:256] ;

  // value method wmiS1_sData
  assign wmiS1_SData = dp1_wmi_wmi_respF_q_0[255:0] ;

  // value method wmiS1_sThreadBusy
  assign wmiS1_SThreadBusy =
	     !CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ||
	     dp1_wmi_wmi_sThreadBusy_dw$wget ;

  // value method wmiS1_sDataThreadBusy
  assign wmiS1_SDataThreadBusy =
	     !CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ||
	     dp1_wmi_wmi_sDataThreadBusy_dw$wget ;

  // value method wmiS1_sRespLast
  assign wmiS1_SRespLast = 1'd0 ;

  // value method wmiS1_sFlag
  assign wmiS1_SFlag = dp1_wmi_wmi_sFlagReg ;

  // action method wmiS1_mFlag
  assign CAN_FIRE_wmiS1_mFlag = 1'd1 ;
  assign WILL_FIRE_wmiS1_mFlag = 1'd1 ;

  // value method wmiS1_sReset_n
  assign wmiS1_SReset_n = !dp1_wmi_wmi_isReset$VAL && dp1_wmi_wmi_operateD ;

  // action method wmiS1_mReset_n
  assign CAN_FIRE_wmiS1_mReset_n = 1'd1 ;
  assign WILL_FIRE_wmiS1_mReset_n = wmiS1_MReset_n ;

  // value method cpNow
  assign cpNow = cp$cpNow ;
  assign RDY_cpNow = 1'd1 ;

  // action method gps_ppsSyncIn
  assign CAN_FIRE_gps_ppsSyncIn = 1'd1 ;
  assign WILL_FIRE_gps_ppsSyncIn = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = cp$gps_ppsSyncOut ;

  // submodule cp
  mkOCCP cp(.pciDevice(pciDevice),
	    .CLK_sys0_clk(CLK_sys0_clk),
	    .RST_N_sys0_rst(RST_N_sys0_rst),
	    .CLK(CLK),
	    .RST_N(RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .led(cp$led),
	    .wci_Vm_0_MCmd(cp$wci_Vm_0_MCmd),
	    .wci_Vm_0_MAddrSpace(cp$wci_Vm_0_MAddrSpace),
	    .wci_Vm_0_MByteEn(cp$wci_Vm_0_MByteEn),
	    .wci_Vm_0_MAddr(cp$wci_Vm_0_MAddr),
	    .wci_Vm_0_MData(cp$wci_Vm_0_MData),
	    .wci_Vm_0_MFlag(cp$wci_Vm_0_MFlag),
	    .wci_Vm_1_MCmd(cp$wci_Vm_1_MCmd),
	    .wci_Vm_1_MAddrSpace(cp$wci_Vm_1_MAddrSpace),
	    .wci_Vm_1_MByteEn(cp$wci_Vm_1_MByteEn),
	    .wci_Vm_1_MAddr(cp$wci_Vm_1_MAddr),
	    .wci_Vm_1_MData(cp$wci_Vm_1_MData),
	    .wci_Vm_1_MFlag(cp$wci_Vm_1_MFlag),
	    .wci_Vm_2_MCmd(cp$wci_Vm_2_MCmd),
	    .wci_Vm_2_MAddrSpace(cp$wci_Vm_2_MAddrSpace),
	    .wci_Vm_2_MByteEn(cp$wci_Vm_2_MByteEn),
	    .wci_Vm_2_MAddr(cp$wci_Vm_2_MAddr),
	    .wci_Vm_2_MData(cp$wci_Vm_2_MData),
	    .wci_Vm_2_MFlag(cp$wci_Vm_2_MFlag),
	    .wci_Vm_3_MCmd(cp$wci_Vm_3_MCmd),
	    .wci_Vm_3_MAddrSpace(cp$wci_Vm_3_MAddrSpace),
	    .wci_Vm_3_MByteEn(cp$wci_Vm_3_MByteEn),
	    .wci_Vm_3_MAddr(cp$wci_Vm_3_MAddr),
	    .wci_Vm_3_MData(cp$wci_Vm_3_MData),
	    .wci_Vm_3_MFlag(cp$wci_Vm_3_MFlag),
	    .wci_Vm_4_MCmd(cp$wci_Vm_4_MCmd),
	    .wci_Vm_4_MAddrSpace(cp$wci_Vm_4_MAddrSpace),
	    .wci_Vm_4_MByteEn(cp$wci_Vm_4_MByteEn),
	    .wci_Vm_4_MAddr(cp$wci_Vm_4_MAddr),
	    .wci_Vm_4_MData(cp$wci_Vm_4_MData),
	    .wci_Vm_4_MFlag(cp$wci_Vm_4_MFlag),
	    .wci_Vm_5_MCmd(cp$wci_Vm_5_MCmd),
	    .wci_Vm_5_MAddrSpace(cp$wci_Vm_5_MAddrSpace),
	    .wci_Vm_5_MByteEn(cp$wci_Vm_5_MByteEn),
	    .wci_Vm_5_MAddr(cp$wci_Vm_5_MAddr),
	    .wci_Vm_5_MData(cp$wci_Vm_5_MData),
	    .wci_Vm_5_MFlag(cp$wci_Vm_5_MFlag),
	    .wci_Vm_6_MCmd(cp$wci_Vm_6_MCmd),
	    .wci_Vm_6_MAddrSpace(cp$wci_Vm_6_MAddrSpace),
	    .wci_Vm_6_MByteEn(cp$wci_Vm_6_MByteEn),
	    .wci_Vm_6_MAddr(cp$wci_Vm_6_MAddr),
	    .wci_Vm_6_MData(cp$wci_Vm_6_MData),
	    .wci_Vm_6_MFlag(cp$wci_Vm_6_MFlag),
	    .wci_Vm_7_MCmd(cp$wci_Vm_7_MCmd),
	    .wci_Vm_7_MAddrSpace(cp$wci_Vm_7_MAddrSpace),
	    .wci_Vm_7_MByteEn(cp$wci_Vm_7_MByteEn),
	    .wci_Vm_7_MAddr(cp$wci_Vm_7_MAddr),
	    .wci_Vm_7_MData(cp$wci_Vm_7_MData),
	    .wci_Vm_7_MFlag(cp$wci_Vm_7_MFlag),
	    .wci_Vm_8_MCmd(cp$wci_Vm_8_MCmd),
	    .wci_Vm_8_MAddrSpace(cp$wci_Vm_8_MAddrSpace),
	    .wci_Vm_8_MByteEn(cp$wci_Vm_8_MByteEn),
	    .wci_Vm_8_MAddr(cp$wci_Vm_8_MAddr),
	    .wci_Vm_8_MData(cp$wci_Vm_8_MData),
	    .wci_Vm_8_MFlag(cp$wci_Vm_8_MFlag),
	    .wci_Vm_9_MCmd(cp$wci_Vm_9_MCmd),
	    .wci_Vm_9_MAddrSpace(cp$wci_Vm_9_MAddrSpace),
	    .wci_Vm_9_MByteEn(cp$wci_Vm_9_MByteEn),
	    .wci_Vm_9_MAddr(cp$wci_Vm_9_MAddr),
	    .wci_Vm_9_MData(cp$wci_Vm_9_MData),
	    .wci_Vm_9_MFlag(cp$wci_Vm_9_MFlag),
	    .wci_Vm_10_MCmd(cp$wci_Vm_10_MCmd),
	    .wci_Vm_10_MAddrSpace(cp$wci_Vm_10_MAddrSpace),
	    .wci_Vm_10_MByteEn(cp$wci_Vm_10_MByteEn),
	    .wci_Vm_10_MAddr(cp$wci_Vm_10_MAddr),
	    .wci_Vm_10_MData(cp$wci_Vm_10_MData),
	    .wci_Vm_10_MFlag(cp$wci_Vm_10_MFlag),
	    .wci_Vm_11_MCmd(cp$wci_Vm_11_MCmd),
	    .wci_Vm_11_MAddrSpace(cp$wci_Vm_11_MAddrSpace),
	    .wci_Vm_11_MByteEn(cp$wci_Vm_11_MByteEn),
	    .wci_Vm_11_MAddr(cp$wci_Vm_11_MAddr),
	    .wci_Vm_11_MData(cp$wci_Vm_11_MData),
	    .wci_Vm_11_MFlag(cp$wci_Vm_11_MFlag),
	    .wci_Vm_12_MCmd(cp$wci_Vm_12_MCmd),
	    .wci_Vm_12_MAddrSpace(cp$wci_Vm_12_MAddrSpace),
	    .wci_Vm_12_MByteEn(cp$wci_Vm_12_MByteEn),
	    .wci_Vm_12_MAddr(cp$wci_Vm_12_MAddr),
	    .wci_Vm_12_MData(cp$wci_Vm_12_MData),
	    .wci_Vm_12_MFlag(cp$wci_Vm_12_MFlag),
	    .wci_Vm_13_MCmd(cp$wci_Vm_13_MCmd),
	    .wci_Vm_13_MAddrSpace(cp$wci_Vm_13_MAddrSpace),
	    .wci_Vm_13_MByteEn(cp$wci_Vm_13_MByteEn),
	    .wci_Vm_13_MAddr(cp$wci_Vm_13_MAddr),
	    .wci_Vm_13_MData(cp$wci_Vm_13_MData),
	    .wci_Vm_13_MFlag(),
	    .wci_Vm_14_MCmd(cp$wci_Vm_14_MCmd),
	    .wci_Vm_14_MAddrSpace(cp$wci_Vm_14_MAddrSpace),
	    .wci_Vm_14_MByteEn(cp$wci_Vm_14_MByteEn),
	    .wci_Vm_14_MAddr(cp$wci_Vm_14_MAddr),
	    .wci_Vm_14_MData(cp$wci_Vm_14_MData),
	    .wci_Vm_14_MFlag(),
	    .cpNow(cp$cpNow),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(cp$gps_ppsSyncOut),
	    .RST_N_wci_Vm_0_mReset_n(cp$RST_N_wci_Vm_0_mReset_n),
	    .RST_N_wci_Vm_1_mReset_n(cp$RST_N_wci_Vm_1_mReset_n),
	    .RST_N_wci_Vm_2_mReset_n(cp$RST_N_wci_Vm_2_mReset_n),
	    .RST_N_wci_Vm_3_mReset_n(cp$RST_N_wci_Vm_3_mReset_n),
	    .RST_N_wci_Vm_4_mReset_n(cp$RST_N_wci_Vm_4_mReset_n),
	    .RST_N_wci_Vm_5_mReset_n(cp$RST_N_wci_Vm_5_mReset_n),
	    .RST_N_wci_Vm_6_mReset_n(cp$RST_N_wci_Vm_6_mReset_n),
	    .RST_N_wci_Vm_7_mReset_n(cp$RST_N_wci_Vm_7_mReset_n),
	    .RST_N_wci_Vm_8_mReset_n(cp$RST_N_wci_Vm_8_mReset_n),
	    .RST_N_wci_Vm_9_mReset_n(cp$RST_N_wci_Vm_9_mReset_n),
	    .RST_N_wci_Vm_10_mReset_n(cp$RST_N_wci_Vm_10_mReset_n),
	    .RST_N_wci_Vm_11_mReset_n(cp$RST_N_wci_Vm_11_mReset_n),
	    .RST_N_wci_Vm_12_mReset_n(cp$RST_N_wci_Vm_12_mReset_n),
	    .RST_N_wci_Vm_13_mReset_n(cp$RST_N_wci_Vm_13_mReset_n),
	    .RST_N_wci_Vm_14_mReset_n(cp$RST_N_wci_Vm_14_mReset_n));

  // submodule dp0_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(dp0_bram_memory$ADDRA),
					      .ADDRB(dp0_bram_memory$ADDRB),
					      .DIA(dp0_bram_memory$DIA),
					      .DIB(dp0_bram_memory$DIB),
					      .WEA(dp0_bram_memory$WEA),
					      .WEB(dp0_bram_memory$WEB),
					      .ENA(dp0_bram_memory$ENA),
					      .ENB(dp0_bram_memory$ENB),
					      .DOA(dp0_bram_memory$DOA),
					      .DOB(dp0_bram_memory$DOB));

  // submodule dp0_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_1(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp0_bram_memory_1$ADDRA),
						.ADDRB(dp0_bram_memory_1$ADDRB),
						.DIA(dp0_bram_memory_1$DIA),
						.DIB(dp0_bram_memory_1$DIB),
						.WEA(dp0_bram_memory_1$WEA),
						.WEB(dp0_bram_memory_1$WEB),
						.ENA(dp0_bram_memory_1$ENA),
						.ENB(dp0_bram_memory_1$ENB),
						.DOA(dp0_bram_memory_1$DOA),
						.DOB(dp0_bram_memory_1$DOB));

  // submodule dp0_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_2(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp0_bram_memory_2$ADDRA),
						.ADDRB(dp0_bram_memory_2$ADDRB),
						.DIA(dp0_bram_memory_2$DIA),
						.DIB(dp0_bram_memory_2$DIB),
						.WEA(dp0_bram_memory_2$WEA),
						.WEB(dp0_bram_memory_2$WEB),
						.ENA(dp0_bram_memory_2$ENA),
						.ENB(dp0_bram_memory_2$ENB),
						.DOA(dp0_bram_memory_2$DOA),
						.DOB(dp0_bram_memory_2$DOB));

  // submodule dp0_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp0_bram_memory_3(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp0_bram_memory_3$ADDRA),
						.ADDRB(dp0_bram_memory_3$ADDRB),
						.DIA(dp0_bram_memory_3$DIA),
						.DIB(dp0_bram_memory_3$DIB),
						.WEA(dp0_bram_memory_3$WEA),
						.WEB(dp0_bram_memory_3$WEB),
						.ENA(dp0_bram_memory_3$ENA),
						.ENB(dp0_bram_memory_3$ENB),
						.DOA(dp0_bram_memory_3$DOA),
						.DOB(dp0_bram_memory_3$DOB));

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								   .CLK(CLK),
								   .D_IN(dp0_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp0_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp0_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp0_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp0_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp0_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp0_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp0_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
								   .CLK(CLK),
								   .D_IN(dp0_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp0_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp0_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp0_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp0_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp0_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp0_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp0_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_inF(.CLK(CLK),
					  .RST_N(cp$RST_N_wci_Vm_13_mReset_n),
					  .D_IN(dp0_tlp_inF$D_IN),
					  .ENQ(dp0_tlp_inF$ENQ),
					  .DEQ(dp0_tlp_inF$DEQ),
					  .CLR(dp0_tlp_inF$CLR),
					  .D_OUT(dp0_tlp_inF$D_OUT),
					  .EMPTY_N(dp0_tlp_inF$EMPTY_N),
					  .FULL_N(dp0_tlp_inF$FULL_N));

  // submodule dp0_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_mReqF(.CLK(CLK),
					    .RST_N(cp$RST_N_wci_Vm_13_mReset_n),
					    .D_IN(dp0_tlp_mReqF$D_IN),
					    .ENQ(dp0_tlp_mReqF$ENQ),
					    .DEQ(dp0_tlp_mReqF$DEQ),
					    .CLR(dp0_tlp_mReqF$CLR),
					    .D_OUT(dp0_tlp_mReqF$D_OUT),
					    .EMPTY_N(dp0_tlp_mReqF$EMPTY_N),
					    .FULL_N(dp0_tlp_mReqF$FULL_N));

  // submodule dp0_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp0_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
					  .CLK(CLK),
					  .D_IN(dp0_tlp_mRespF$D_IN),
					  .ENQ(dp0_tlp_mRespF$ENQ),
					  .DEQ(dp0_tlp_mRespF$DEQ),
					  .CLR(dp0_tlp_mRespF$CLR),
					  .D_OUT(dp0_tlp_mRespF$D_OUT),
					  .FULL_N(dp0_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp0_tlp_mRespF$EMPTY_N));

  // submodule dp0_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_outF(.CLK(CLK),
					   .RST_N(cp$RST_N_wci_Vm_13_mReset_n),
					   .D_IN(dp0_tlp_outF$D_IN),
					   .ENQ(dp0_tlp_outF$ENQ),
					   .DEQ(dp0_tlp_outF$DEQ),
					   .CLR(dp0_tlp_outF$CLR),
					   .D_OUT(dp0_tlp_outF$D_OUT),
					   .EMPTY_N(dp0_tlp_outF$EMPTY_N),
					   .FULL_N(dp0_tlp_outF$FULL_N));

  // submodule dp0_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp0_tlp_readReq(.CLK(CLK),
					      .RST_N(cp$RST_N_wci_Vm_13_mReset_n),
					      .D_IN(dp0_tlp_readReq$D_IN),
					      .ENQ(dp0_tlp_readReq$ENQ),
					      .DEQ(dp0_tlp_readReq$DEQ),
					      .CLR(dp0_tlp_readReq$CLR),
					      .D_OUT(dp0_tlp_readReq$D_OUT),
					      .EMPTY_N(dp0_tlp_readReq$EMPTY_N),
					      .FULL_N(dp0_tlp_readReq$FULL_N));

  // submodule dp0_wci_isReset
  ResetToBool dp0_wci_isReset(.RST(cp$RST_N_wci_Vm_13_mReset_n),
			      .VAL(dp0_wci_isReset$VAL));

  // submodule dp0_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wci_reqF(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
					    .CLK(CLK),
					    .D_IN(dp0_wci_reqF$D_IN),
					    .ENQ(dp0_wci_reqF$ENQ),
					    .DEQ(dp0_wci_reqF$DEQ),
					    .CLR(dp0_wci_reqF$CLR),
					    .D_OUT(dp0_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp0_wci_reqF$EMPTY_N));

  // submodule dp0_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd290),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
					       .CLK(CLK),
					       .D_IN(dp0_wmi_wmi_dhF$D_IN),
					       .ENQ(dp0_wmi_wmi_dhF$ENQ),
					       .DEQ(dp0_wmi_wmi_dhF$DEQ),
					       .CLR(dp0_wmi_wmi_dhF$CLR),
					       .D_OUT(),
					       .FULL_N(dp0_wmi_wmi_dhF$FULL_N),
					       .EMPTY_N(dp0_wmi_wmi_dhF$EMPTY_N));

  // submodule dp0_wmi_wmi_isReset
  ResetToBool dp0_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_13_mReset_n),
				  .VAL(dp0_wmi_wmi_isReset$VAL));

  // submodule dp0_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
						  .CLK(CLK),
						  .D_IN(dp0_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp0_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp0_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp0_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp0_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(dp0_wmi_wmi_mFlagF$FULL_N),
						  .EMPTY_N(dp0_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp0_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp0_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_13_mReset_n),
						.CLK(CLK),
						.D_IN(dp0_wmi_wmi_reqF$D_IN),
						.ENQ(dp0_wmi_wmi_reqF$ENQ),
						.DEQ(dp0_wmi_wmi_reqF$DEQ),
						.CLR(dp0_wmi_wmi_reqF$CLR),
						.D_OUT(dp0_wmi_wmi_reqF$D_OUT),
						.FULL_N(dp0_wmi_wmi_reqF$FULL_N),
						.EMPTY_N(dp0_wmi_wmi_reqF$EMPTY_N));

  // submodule dp0_wti_isReset
  ResetToBool dp0_wti_isReset(.RST(cp$RST_N_wci_Vm_13_mReset_n),
			      .VAL(dp0_wti_isReset$VAL));

  // submodule dp1_bram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(dp1_bram_memory$ADDRA),
					      .ADDRB(dp1_bram_memory$ADDRB),
					      .DIA(dp1_bram_memory$DIA),
					      .DIB(dp1_bram_memory$DIB),
					      .WEA(dp1_bram_memory$WEA),
					      .WEB(dp1_bram_memory$WEB),
					      .ENA(dp1_bram_memory$ENA),
					      .ENB(dp1_bram_memory$ENB),
					      .DOA(dp1_bram_memory$DOA),
					      .DOB(dp1_bram_memory$DOB));

  // submodule dp1_bram_memory_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_1(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp1_bram_memory_1$ADDRA),
						.ADDRB(dp1_bram_memory_1$ADDRB),
						.DIA(dp1_bram_memory_1$DIA),
						.DIB(dp1_bram_memory_1$DIB),
						.WEA(dp1_bram_memory_1$WEA),
						.WEB(dp1_bram_memory_1$WEB),
						.ENA(dp1_bram_memory_1$ENA),
						.ENB(dp1_bram_memory_1$ENB),
						.DOA(dp1_bram_memory_1$DOA),
						.DOB(dp1_bram_memory_1$DOB));

  // submodule dp1_bram_memory_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_2(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp1_bram_memory_2$ADDRA),
						.ADDRB(dp1_bram_memory_2$ADDRB),
						.DIA(dp1_bram_memory_2$DIA),
						.DIB(dp1_bram_memory_2$DIB),
						.WEA(dp1_bram_memory_2$WEA),
						.WEB(dp1_bram_memory_2$WEB),
						.ENA(dp1_bram_memory_2$ENA),
						.ENB(dp1_bram_memory_2$ENB),
						.DOA(dp1_bram_memory_2$DOA),
						.DOB(dp1_bram_memory_2$DOB));

  // submodule dp1_bram_memory_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) dp1_bram_memory_3(.CLKA(CLK),
						.CLKB(CLK),
						.ADDRA(dp1_bram_memory_3$ADDRA),
						.ADDRB(dp1_bram_memory_3$ADDRB),
						.DIA(dp1_bram_memory_3$DIA),
						.DIB(dp1_bram_memory_3$DIB),
						.WEA(dp1_bram_memory_3$WEA),
						.WEB(dp1_bram_memory_3$WEB),
						.ENA(dp1_bram_memory_3$ENA),
						.ENB(dp1_bram_memory_3$ENB),
						.DOA(dp1_bram_memory_3$DOA),
						.DOB(dp1_bram_memory_3$DOB));

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterA_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterA_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterA_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterA_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterA_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterA_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterA_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterA_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterA_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								   .CLK(CLK),
								   .D_IN(dp1_bram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterA_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_1_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterB_1_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_1_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_1_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_1_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_1_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_1_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_2_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterB_2_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_2_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_2_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_2_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_2_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_2_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_3_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								     .CLK(CLK),
								     .D_IN(dp1_bram_serverAdapterB_3_outDataCore$D_IN),
								     .ENQ(dp1_bram_serverAdapterB_3_outDataCore$ENQ),
								     .DEQ(dp1_bram_serverAdapterB_3_outDataCore$DEQ),
								     .CLR(dp1_bram_serverAdapterB_3_outDataCore$CLR),
								     .D_OUT(dp1_bram_serverAdapterB_3_outDataCore$D_OUT),
								     .FULL_N(dp1_bram_serverAdapterB_3_outDataCore$FULL_N),
								     .EMPTY_N(dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N));

  // submodule dp1_bram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_bram_serverAdapterB_outDataCore(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
								   .CLK(CLK),
								   .D_IN(dp1_bram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(dp1_bram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(dp1_bram_serverAdapterB_outDataCore$DEQ),
								   .CLR(dp1_bram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(dp1_bram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(dp1_bram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(dp1_bram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule dp1_tlp_inF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_inF(.CLK(CLK),
					  .RST_N(cp$RST_N_wci_Vm_14_mReset_n),
					  .D_IN(dp1_tlp_inF$D_IN),
					  .ENQ(dp1_tlp_inF$ENQ),
					  .DEQ(dp1_tlp_inF$DEQ),
					  .CLR(dp1_tlp_inF$CLR),
					  .D_OUT(dp1_tlp_inF$D_OUT),
					  .EMPTY_N(dp1_tlp_inF$EMPTY_N),
					  .FULL_N(dp1_tlp_inF$FULL_N));

  // submodule dp1_tlp_mReqF
  arSRLFIFO #(.width(32'd130),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_mReqF(.CLK(CLK),
					    .RST_N(cp$RST_N_wci_Vm_14_mReset_n),
					    .D_IN(dp1_tlp_mReqF$D_IN),
					    .ENQ(dp1_tlp_mReqF$ENQ),
					    .DEQ(dp1_tlp_mReqF$DEQ),
					    .CLR(dp1_tlp_mReqF$CLR),
					    .D_OUT(dp1_tlp_mReqF$D_OUT),
					    .EMPTY_N(dp1_tlp_mReqF$EMPTY_N),
					    .FULL_N(dp1_tlp_mReqF$FULL_N));

  // submodule dp1_tlp_mRespF
  FIFO2 #(.width(32'd139),
	  .guarded(32'd1)) dp1_tlp_mRespF(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
					  .CLK(CLK),
					  .D_IN(dp1_tlp_mRespF$D_IN),
					  .ENQ(dp1_tlp_mRespF$ENQ),
					  .DEQ(dp1_tlp_mRespF$DEQ),
					  .CLR(dp1_tlp_mRespF$CLR),
					  .D_OUT(dp1_tlp_mRespF$D_OUT),
					  .FULL_N(dp1_tlp_mRespF$FULL_N),
					  .EMPTY_N(dp1_tlp_mRespF$EMPTY_N));

  // submodule dp1_tlp_outF
  arSRLFIFO #(.width(32'd153),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_outF(.CLK(CLK),
					   .RST_N(cp$RST_N_wci_Vm_14_mReset_n),
					   .D_IN(dp1_tlp_outF$D_IN),
					   .ENQ(dp1_tlp_outF$ENQ),
					   .DEQ(dp1_tlp_outF$DEQ),
					   .CLR(dp1_tlp_outF$CLR),
					   .D_OUT(dp1_tlp_outF$D_OUT),
					   .EMPTY_N(dp1_tlp_outF$EMPTY_N),
					   .FULL_N(dp1_tlp_outF$FULL_N));

  // submodule dp1_tlp_readReq
  arSRLFIFO #(.width(32'd60),
	      .l2depth(32'd4),
	      .depth(32'd16)) dp1_tlp_readReq(.CLK(CLK),
					      .RST_N(cp$RST_N_wci_Vm_14_mReset_n),
					      .D_IN(dp1_tlp_readReq$D_IN),
					      .ENQ(dp1_tlp_readReq$ENQ),
					      .DEQ(dp1_tlp_readReq$DEQ),
					      .CLR(dp1_tlp_readReq$CLR),
					      .D_OUT(dp1_tlp_readReq$D_OUT),
					      .EMPTY_N(dp1_tlp_readReq$EMPTY_N),
					      .FULL_N(dp1_tlp_readReq$FULL_N));

  // submodule dp1_wci_isReset
  ResetToBool dp1_wci_isReset(.RST(cp$RST_N_wci_Vm_14_mReset_n),
			      .VAL(dp1_wci_isReset$VAL));

  // submodule dp1_wci_reqF
  SizedFIFO #(.p1width(32'd60),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wci_reqF(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
					    .CLK(CLK),
					    .D_IN(dp1_wci_reqF$D_IN),
					    .ENQ(dp1_wci_reqF$ENQ),
					    .DEQ(dp1_wci_reqF$DEQ),
					    .CLR(dp1_wci_reqF$CLR),
					    .D_OUT(dp1_wci_reqF$D_OUT),
					    .FULL_N(),
					    .EMPTY_N(dp1_wci_reqF$EMPTY_N));

  // submodule dp1_wmi_wmi_dhF
  SizedFIFO #(.p1width(32'd290),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_dhF(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
					       .CLK(CLK),
					       .D_IN(dp1_wmi_wmi_dhF$D_IN),
					       .ENQ(dp1_wmi_wmi_dhF$ENQ),
					       .DEQ(dp1_wmi_wmi_dhF$DEQ),
					       .CLR(dp1_wmi_wmi_dhF$CLR),
					       .D_OUT(),
					       .FULL_N(dp1_wmi_wmi_dhF$FULL_N),
					       .EMPTY_N(dp1_wmi_wmi_dhF$EMPTY_N));

  // submodule dp1_wmi_wmi_isReset
  ResetToBool dp1_wmi_wmi_isReset(.RST(cp$RST_N_wci_Vm_14_mReset_n),
				  .VAL(dp1_wmi_wmi_isReset$VAL));

  // submodule dp1_wmi_wmi_mFlagF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_mFlagF(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
						  .CLK(CLK),
						  .D_IN(dp1_wmi_wmi_mFlagF$D_IN),
						  .ENQ(dp1_wmi_wmi_mFlagF$ENQ),
						  .DEQ(dp1_wmi_wmi_mFlagF$DEQ),
						  .CLR(dp1_wmi_wmi_mFlagF$CLR),
						  .D_OUT(dp1_wmi_wmi_mFlagF$D_OUT),
						  .FULL_N(dp1_wmi_wmi_mFlagF$FULL_N),
						  .EMPTY_N(dp1_wmi_wmi_mFlagF$EMPTY_N));

  // submodule dp1_wmi_wmi_reqF
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) dp1_wmi_wmi_reqF(.RST_N(cp$RST_N_wci_Vm_14_mReset_n),
						.CLK(CLK),
						.D_IN(dp1_wmi_wmi_reqF$D_IN),
						.ENQ(dp1_wmi_wmi_reqF$ENQ),
						.DEQ(dp1_wmi_wmi_reqF$DEQ),
						.CLR(dp1_wmi_wmi_reqF$CLR),
						.D_OUT(dp1_wmi_wmi_reqF$D_OUT),
						.FULL_N(dp1_wmi_wmi_reqF$FULL_N),
						.EMPTY_N(dp1_wmi_wmi_reqF$EMPTY_N));

  // submodule dp1_wti_isReset
  ResetToBool dp1_wti_isReset(.RST(cp$RST_N_wci_Vm_14_mReset_n),
			      .VAL(dp1_wti_isReset$VAL));

  // submodule itc0_now
  SyncRegister #(.width(32'd64), .init(64'd0)) itc0_now(.sCLK(CLK_sys0_clk),
							.dCLK(CLK),
							.sRST_N(RST_N_sys0_rst),
							.sD_IN(itc0_now$sD_IN),
							.sEN(itc0_now$sEN),
							.dD_OUT(itc0_now$dD_OUT),
							.sRDY(itc0_now$sRDY));

  // submodule itc1_now
  SyncRegister #(.width(32'd64), .init(64'd0)) itc1_now(.sCLK(CLK_sys0_clk),
							.dCLK(CLK),
							.sRST_N(RST_N_sys0_rst),
							.sD_IN(itc1_now$sD_IN),
							.sEN(itc1_now$sEN),
							.dD_OUT(itc1_now$dD_OUT),
							.sRDY(itc1_now$sRDY));

  // submodule sm0
  mkTLPSM sm0(.pfk(14'd1360),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm0$c0_response_put),
	      .c1_response_put(sm0$c1_response_put),
	      .s_request_put(sm0$s_request_put),
	      .EN_s_request_put(sm0$EN_s_request_put),
	      .EN_s_response_get(sm0$EN_s_response_get),
	      .EN_c0_request_get(sm0$EN_c0_request_get),
	      .EN_c0_response_put(sm0$EN_c0_response_put),
	      .EN_c1_request_get(sm0$EN_c1_request_get),
	      .EN_c1_response_put(sm0$EN_c1_response_put),
	      .RDY_s_request_put(sm0$RDY_s_request_put),
	      .s_response_get(sm0$s_response_get),
	      .RDY_s_response_get(sm0$RDY_s_response_get),
	      .c0_request_get(sm0$c0_request_get),
	      .RDY_c0_request_get(sm0$RDY_c0_request_get),
	      .RDY_c0_response_put(sm0$RDY_c0_response_put),
	      .c1_request_get(sm0$c1_request_get),
	      .RDY_c1_request_get(sm0$RDY_c1_request_get),
	      .RDY_c1_response_put(sm0$RDY_c1_response_put));

  // submodule sm1
  mkTLPSM sm1(.pfk(14'd9488),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm1$c0_response_put),
	      .c1_response_put(sm1$c1_response_put),
	      .s_request_put(sm1$s_request_put),
	      .EN_s_request_put(sm1$EN_s_request_put),
	      .EN_s_response_get(sm1$EN_s_response_get),
	      .EN_c0_request_get(sm1$EN_c0_request_get),
	      .EN_c0_response_put(sm1$EN_c0_response_put),
	      .EN_c1_request_get(sm1$EN_c1_request_get),
	      .EN_c1_response_put(sm1$EN_c1_response_put),
	      .RDY_s_request_put(sm1$RDY_s_request_put),
	      .s_response_get(sm1$s_response_get),
	      .RDY_s_response_get(sm1$RDY_s_response_get),
	      .c0_request_get(sm1$c0_request_get),
	      .RDY_c0_request_get(sm1$RDY_c0_request_get),
	      .RDY_c0_response_put(sm1$RDY_c0_response_put),
	      .c1_request_get(sm1$c1_request_get),
	      .RDY_c1_request_get(sm1$RDY_c1_request_get),
	      .RDY_c1_response_put(sm1$RDY_c1_response_put));

  // submodule sm2
  mkTLPSM sm2(.pfk(14'd9497),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .c0_response_put(sm2$c0_response_put),
	      .c1_response_put(sm2$c1_response_put),
	      .s_request_put(sm2$s_request_put),
	      .EN_s_request_put(sm2$EN_s_request_put),
	      .EN_s_response_get(sm2$EN_s_response_get),
	      .EN_c0_request_get(sm2$EN_c0_request_get),
	      .EN_c0_response_put(sm2$EN_c0_response_put),
	      .EN_c1_request_get(sm2$EN_c1_request_get),
	      .EN_c1_response_put(sm2$EN_c1_response_put),
	      .RDY_s_request_put(sm2$RDY_s_request_put),
	      .s_response_get(sm2$s_response_get),
	      .RDY_s_response_get(sm2$RDY_s_response_get),
	      .c0_request_get(sm2$c0_request_get),
	      .RDY_c0_request_get(sm2$RDY_c0_request_get),
	      .RDY_c0_response_put(sm2$RDY_c0_response_put),
	      .c1_request_get(),
	      .RDY_c1_request_get(sm2$RDY_c1_request_get),
	      .RDY_c1_response_put());

  // rule RL_dp0_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh =
	     dp0_wmi_wmi_dhF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ;

  // rule RL_dp0_assignControl
  assign CAN_FIRE_RL_dp0_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_dp0_assignControl = 1'd1 ;

  // rule RL_dp0_wmi_throttleWmi
  assign CAN_FIRE_RL_dp0_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_throttleWmi = 1'd1 ;

  // rule RL_dp0_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req =
	     dp0_wmi_wmi_reqF_levelsValid && dp0_wmi_wmi_operateD &&
	     dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ;

  // rule RL_dp1_wmi_wmi_backpressure_dh
  assign CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh =
	     dp1_wmi_wmi_dhF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_backpressure_dh =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ;

  // rule RL_dp1_assignControl
  assign CAN_FIRE_RL_dp1_assignControl = 1'd1 ;
  assign WILL_FIRE_RL_dp1_assignControl = 1'd1 ;

  // rule RL_dp1_wmi_throttleWmi
  assign CAN_FIRE_RL_dp1_wmi_throttleWmi = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_throttleWmi = 1'd1 ;

  // rule RL_dp1_wmi_wmi_backpressure_req
  assign CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req =
	     dp1_wmi_wmi_reqF_levelsValid && dp1_wmi_wmi_operateD &&
	     dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_forceSThreadBusy_pw$whas ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_backpressure_req =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ;

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = itc0_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = itc0_now$sRDY ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = itc1_now$sRDY ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = itc1_now$sRDY ;

  // rule RL_stbConnect_1
  assign CAN_FIRE_RL_stbConnect_1 =
	     dp1_wci_reqF_countReg > 2'd1 || dp1_wci_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_1 = CAN_FIRE_RL_stbConnect_1 ;

  // rule RL_mDataConnect_1
  assign CAN_FIRE_RL_mDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect_1 = 1'd1 ;

  // rule RL_mCmdConnect_1
  assign CAN_FIRE_RL_mCmdConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect_1 = 1'd1 ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect =
	     dp0_wci_reqF_countReg > 2'd1 || dp0_wci_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect = CAN_FIRE_RL_stbConnect ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_dp0_wci_request_decode
  assign CAN_FIRE_RL_dp0_wci_request_decode = dp0_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_wci_request_decode = dp0_wci_reqF$EMPTY_N ;

  // rule RL_dp0_wci_ctl_op_start
  assign CAN_FIRE_RL_dp0_wci_ctl_op_start =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_ctl_op_start =
	     CAN_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wmi_doReadResp
  assign CAN_FIRE_RL_dp0_wmi_doReadResp = dp0_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_doReadResp = CAN_FIRE_RL_dp0_wmi_doReadResp ;

  // rule RL_dp0_wci_cfrd
  assign CAN_FIRE_RL_dp0_wci_cfrd =
	     dp0_wci_respF_c_r != 2'd2 && dp0_wci_reqF$EMPTY_N &&
	     dp0_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_cfrd =
	     CAN_FIRE_RL_dp0_wci_cfrd && !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp1_wci_request_decode
  assign CAN_FIRE_RL_dp1_wci_request_decode = dp1_wci_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_wci_request_decode = dp1_wci_reqF$EMPTY_N ;

  // rule RL_dp1_wci_ctl_op_start
  assign CAN_FIRE_RL_dp1_wci_ctl_op_start =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_ctl_op_start =
	     CAN_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wmi_doReadResp
  assign CAN_FIRE_RL_dp1_wmi_doReadResp = dp1_wmi_bytesRemainResp != 14'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_doReadResp = CAN_FIRE_RL_dp1_wmi_doReadResp ;

  // rule RL_dp1_wci_cfrd
  assign CAN_FIRE_RL_dp1_wci_cfrd =
	     dp1_wci_respF_c_r != 2'd2 && dp1_wci_reqF$EMPTY_N &&
	     dp1_wci_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_cfrd =
	     CAN_FIRE_RL_dp1_wci_cfrd && !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_chomp_rogue
  assign CAN_FIRE_RL_chomp_rogue = sm2$RDY_c1_request_get ;
  assign WILL_FIRE_RL_chomp_rogue = sm2$RDY_c1_request_get ;

  // rule RL_ClientServerRequest_4
  assign CAN_FIRE_RL_ClientServerRequest_4 =
	     dp1_tlp_inF$FULL_N && sm2$RDY_c0_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_4 =
	     CAN_FIRE_RL_ClientServerRequest_4 ;

  // rule RL_ClientServerResponse_4
  assign CAN_FIRE_RL_ClientServerResponse_4 =
	     dp1_tlp_outF$EMPTY_N && sm2$RDY_c0_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_4 =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     sm1$RDY_c1_request_get && sm2$RDY_s_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     sm1$RDY_c1_response_put && sm2$RDY_s_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     dp0_tlp_inF$FULL_N && sm1$RDY_c0_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     dp0_tlp_outF$EMPTY_N && sm1$RDY_c0_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     sm0$RDY_c1_response_put && sm1$RDY_s_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     sm0$RDY_c1_request_get && sm1$RDY_s_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     sm0$RDY_c0_request_get && cp$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     sm0$RDY_c0_response_put && cp$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_stbConnect_3
  assign CAN_FIRE_RL_stbConnect_3 = dp1_wti_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_3 = dp1_wti_isReset$VAL ;

  // rule RL_stbConnect_2
  assign CAN_FIRE_RL_stbConnect_2 = dp0_wti_isReset$VAL ;
  assign WILL_FIRE_RL_stbConnect_2 = dp0_wti_isReset$VAL ;

  // rule RL_sFlagConnect_1
  assign CAN_FIRE_RL_sFlagConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect_1 = 1'd1 ;

  // rule RL_mBEConnect_1
  assign CAN_FIRE_RL_mBEConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect_1 = 1'd1 ;

  // rule RL_sDataConnect_1
  assign CAN_FIRE_RL_sDataConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect_1 = 1'd1 ;

  // rule RL_sRespConnect_1
  assign CAN_FIRE_RL_sRespConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect_1 = 1'd1 ;

  // rule RL_mAddrConnect_1
  assign CAN_FIRE_RL_mAddrConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect_1 = 1'd1 ;

  // rule RL_mAddrSConnect_1
  assign CAN_FIRE_RL_mAddrSConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect_1 = 1'd1 ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mBEConnect
  assign CAN_FIRE_RL_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect = 1'd1 ;

  // rule RL_mAddrSConnect
  assign CAN_FIRE_RL_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect = 1'd1 ;

  // rule RL_dp1_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_dp1_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_dp1_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_dp1_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp1_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_dp1_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp1_mkConnectionVtoAf
  assign CAN_FIRE_RL_dp1_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_dp1_mkConnectionVtoAf = 1'd1 ;

  // rule RL_dp1_wmi_reqMetadata
  assign CAN_FIRE_RL_dp1_wmi_reqMetadata =
	     dp1_bram_serverAdapterB_cnt_90_SLT_3___d491 &&
	     dp1_bram_serverAdapterB_1_cnt_92_SLT_3___d493 &&
	     dp1_bram_serverAdapterB_2_cnt_94_SLT_3___d495 &&
	     dp1_bram_serverAdapterB_3_cnt_97_SLT_3___d498 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     !dp1_wmi_metaBusy &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_reqMetadata =
	     CAN_FIRE_RL_dp1_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_reqConnect_1
  assign CAN_FIRE_RL_reqConnect_1 = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect_1 = 1'd1 ;

  // rule RL_itc1_send_time
  assign CAN_FIRE_RL_itc1_send_time = 1'd1 ;
  assign WILL_FIRE_RL_itc1_send_time = 1'd1 ;

  // rule RL_itc1_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_itc1_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_itc1_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp1_operating_actions
  assign CAN_FIRE_RL_dp1_operating_actions = dp1_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_dp1_operating_actions =
	     CAN_FIRE_RL_dp1_operating_actions ;

  // rule RL_dp1_rCredit_1
  assign CAN_FIRE_RL_dp1_rCredit_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rCredit_1 = CAN_FIRE_RL_dp1_rCredit_1 ;

  // rule RL_dp1_rFRdy_1
  assign CAN_FIRE_RL_dp1_rFRdy_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rFRdy_1 = CAN_FIRE_RL_dp1_rFRdy_1 ;

  // rule RL_dp1_rRdy_1
  assign CAN_FIRE_RL_dp1_rRdy_1 =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rRdy_1 = CAN_FIRE_RL_dp1_rRdy_1 ;

  // rule RL_dp1_rDone_1
  assign CAN_FIRE_RL_dp1_rDone_1 = dp1_tlp_remDone ;
  assign WILL_FIRE_RL_dp1_rDone_1 = dp1_tlp_remDone ;

  // rule RL_dp1_rStart_1
  assign CAN_FIRE_RL_dp1_rStart_1 = dp1_tlp_remStart ;
  assign WILL_FIRE_RL_dp1_rStart_1 = dp1_tlp_remStart ;

  // rule RL_dp1_rBMesg
  assign CAN_FIRE_RL_dp1_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMesg = 1'd1 ;

  // rule RL_dp1_rRdy
  assign CAN_FIRE_RL_dp1_rRdy =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_dp1_rRdy = CAN_FIRE_RL_dp1_rRdy ;

  // rule RL_dp1_rDone
  assign CAN_FIRE_RL_dp1_rDone = dp1_wmi_mesgDone ;
  assign WILL_FIRE_RL_dp1_rDone = dp1_wmi_mesgDone ;

  // rule RL_dp1_rStart
  assign CAN_FIRE_RL_dp1_rStart = dp1_wmi_mesgStart ;
  assign WILL_FIRE_RL_dp1_rStart = dp1_wmi_mesgStart ;

  // rule RL_dp1_bml_lcredit
  assign CAN_FIRE_RL_dp1_bml_lcredit =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_bml_lcredit = CAN_FIRE_RL_dp1_bml_lcredit ;

  // rule RL_dp1_bml_fba
  assign CAN_FIRE_RL_dp1_bml_fba =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fba = CAN_FIRE_RL_dp1_bml_fba ;

  // rule RL_dp1_bml_lbcf
  assign CAN_FIRE_RL_dp1_bml_lbcf = CAN_FIRE_RL_dp1_operating_actions ;
  assign WILL_FIRE_RL_dp1_bml_lbcf = CAN_FIRE_RL_dp1_operating_actions ;

  // rule RL_dp1_bml_lbar
  assign CAN_FIRE_RL_dp1_bml_lbar = CAN_FIRE_RL_dp1_operating_actions ;
  assign WILL_FIRE_RL_dp1_bml_lbar = CAN_FIRE_RL_dp1_operating_actions ;

  // rule RL_dp1_bml_cntRemDone
  assign CAN_FIRE_RL_dp1_bml_cntRemDone =
	     dp1_wci_cState == 3'd2 && dp1_bml_remDone ;
  assign WILL_FIRE_RL_dp1_bml_cntRemDone = CAN_FIRE_RL_dp1_bml_cntRemDone ;

  // rule RL_dp1_bml_cntRemStart
  assign CAN_FIRE_RL_dp1_bml_cntRemStart =
	     dp1_wci_cState == 3'd2 && dp1_bml_remStart ;
  assign WILL_FIRE_RL_dp1_bml_cntRemStart = CAN_FIRE_RL_dp1_bml_cntRemStart ;

  // rule RL_dp1_bml_cntLclDone
  assign CAN_FIRE_RL_dp1_bml_cntLclDone =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufDone ;
  assign WILL_FIRE_RL_dp1_bml_cntLclDone = CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // rule RL_dp1_bml_cntLclStart
  assign CAN_FIRE_RL_dp1_bml_cntLclStart =
	     dp1_wci_cState == 3'd2 && dp1_bml_lclBufStart ;
  assign WILL_FIRE_RL_dp1_bml_cntLclStart = CAN_FIRE_RL_dp1_bml_cntLclStart ;

  // rule RL_dp1_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd2 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_dp1_bml_wci_ctrl_OrE ;

  // rule RL_dp1_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd0 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_dp1_bml_wci_ctrl_EiI ;

  // rule RL_dp1_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_dp1_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_dp1_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_doDwell
  assign CAN_FIRE_RL_dp1_wmi_doDwell = dp1_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_doDwell = CAN_FIRE_RL_dp1_wmi_doDwell ;

  // rule RL_dp1_wmi_doWriteFinalize
  assign CAN_FIRE_RL_dp1_wmi_doWriteFinalize =
	     dp1_bram_serverAdapterB_cnt_90_SLT_3___d491 &&
	     dp1_bram_serverAdapterB_1_cnt_92_SLT_3___d493 &&
	     dp1_bram_serverAdapterB_2_cnt_94_SLT_3___d495 &&
	     dp1_bram_serverAdapterB_3_cnt_97_SLT_3___d498 &&
	     dp1_wmi_wrFinalize ;
  assign WILL_FIRE_RL_dp1_wmi_doWriteFinalize =
	     CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // rule RL_dp1_rBMeta
  assign CAN_FIRE_RL_dp1_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMeta = 1'd1 ;

  // rule RL_dp1_bml_lclAdvance
  assign CAN_FIRE_RL_dp1_bml_lclAdvance = CAN_FIRE_RL_dp1_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp1_bml_lclAdvance = CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // rule RL_dp1_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_lclBuf_ruleInc = CAN_FIRE_RL_dp1_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp1_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // rule RL_dp1_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_dp1_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiDh$wget[289] ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq = CAN_FIRE_RL_dp1_wmi_wmi_dhF_enq ;

  // rule RL_dp1_wmi_doWriteReq
  assign CAN_FIRE_RL_dp1_wmi_doWriteReq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_dhF$EMPTY_N &&
	     dp1_wmi_wrActive ;
  assign WILL_FIRE_RL_dp1_wmi_doWriteReq = CAN_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     dp1_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_enq ;

  // rule RL_dp1_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF_enq ;

  // rule RL_dp1_wmi_getRequest
  assign CAN_FIRE_RL_dp1_wmi_getRequest =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     !dp1_wmi_wmi_blockReq &&
	     dp1_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp1_wmi_wrActive_25_43_OR_NOT_dp1_wmi_rdAc_ETC___d551 &&
	     dp1_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_getRequest =
	     CAN_FIRE_RL_dp1_wmi_getRequest &&
	     !WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_respF_both
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_both = 1'b0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_both = 1'b0 ;

  // rule RL_dp1_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr =
	     dp1_wmi_wmi_respF_c_r != 2'd0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // rule RL_dp1_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_dp1_wmi_wmi_respF_incCtr = 1'b0 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_respF_incCtr = 1'b0 ;

  // rule RL_dp1_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     CAN_FIRE_RL_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF_reset ;

  // rule RL_dp1_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     CAN_FIRE_RL_dp1_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ||
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;

  // rule RL_dp1_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 !=
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_dp1_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF_reset ;

  // rule RL_dp1_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_dp1_tlp_writeData
  assign CAN_FIRE_RL_dp1_tlp_writeData =
	     dp1_tlp_mReqF$EMPTY_N && dp1_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1040 ||
	      dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145) &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1073 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_writeData = CAN_FIRE_RL_dp1_tlp_writeData ;

  // rule RL_dp1_tlp_writeReq
  assign CAN_FIRE_RL_dp1_tlp_writeReq =
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_mReqF_RDY_deq__35_AND_IF_dp1_tlp_mReqF_ETC___d1176 &&
	     dp1_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_writeReq = CAN_FIRE_RL_dp1_tlp_writeReq ;

  // rule RL_dp1_tlp_dataXmt_Body
  assign CAN_FIRE_RL_dp1_tlp_dataXmt_Body =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Body =
	     CAN_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_tlp_dataXmt_Header
  assign CAN_FIRE_RL_dp1_tlp_dataXmt_Header =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dataXmt_Header =
	     CAN_FIRE_RL_dp1_tlp_dataXmt_Header ;

  // rule RL_dp1_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_dp1_tlp_dmaPullTailEvent =
	     dp1_tlp_outF$FULL_N &&
	     dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1320 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag =
	     dp1_tlp_inF$EMPTY_N && dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag ;

  // rule RL_dp1_tlp_tlpRcv
  assign CAN_FIRE_RL_dp1_tlp_tlpRcv =
	     dp1_tlp_inF$EMPTY_N &&
	     (dp1_tlp_inF$D_OUT[152] ?
		dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
		dp1_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp1_tlp_mReqF$FULL_N :
		dp1_tlp_inIgnorePkt || dp1_tlp_mReqF$FULL_N) &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_reqMesgInFlight &&
	     !dp1_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_dp1_tlp_tlpRcv = CAN_FIRE_RL_dp1_tlp_tlpRcv ;

  // rule RL_dp1_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_dp1_tlp_dmaPullResponseBody =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_reqMesgInFlight &&
	     dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;

  // rule RL_dp1_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeader =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_reqMesgInFlight &&
	     !dp1_tlp_tlpRcvBusy &&
	     dp1_tlp_pullTagMatch &&
	     !dp1_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;

  // rule RL_dp1_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_reqMesgInFlight &&
	     dp1_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1462 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;

  // rule RL_dp1_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta =
	     dp1_tlp_inF$EMPTY_N && dp1_tlp_mReqF$FULL_N &&
	     dp1_dpControl[3:2] == 2'd2 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_reqMetaBodyInFlight &&
	     !dp1_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;

  // rule RL_dp1_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRequestFarMeta =
	     dp1_tlp_outF$FULL_N &&
	     dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1485 &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[1:0] == 2'd2 &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_postSeqDwell == 4'd0 &&
	     dp1_tlp_creditReady ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell = dp1_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_dp1_tlp_dmaPostSeqDwell ;

  // rule RL_dp1_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_xmtMetaInFlight &&
	     dp1_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_rFMeta_1
  assign CAN_FIRE_RL_dp1_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFMeta_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // rule RL_dp1_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader =
	     dp1_tlp_outF$FULL_N && dp1_tlp_mRespF$EMPTY_N &&
	     dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;

  // rule RL_dp1_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     dp1_tlp_mReqF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     dp1_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp1_tlp_tlpRcvBusy &&
	     dp1_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_dp1_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody &&
	     !WILL_FIRE_RL_dp1_tlp_tlpRcv ;

  // rule RL_dp1_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     dp1_tlp_outF$FULL_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_tlpMetaSent &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_dp1_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // rule RL_dp1_rFFlow_1
  assign CAN_FIRE_RL_dp1_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFFlow_1 = 1'd1 ;

  // rule RL_dp1_bml_crdAdvance
  assign CAN_FIRE_RL_dp1_bml_crdAdvance =
	     dp1_wci_cState == 3'd2 && dp1_dpControl[1:0] == 2'd2 &&
	     dp1_bml_remStart ;
  assign WILL_FIRE_RL_dp1_bml_crdAdvance =
	     CAN_FIRE_RL_dp1_bml_crdAdvance &&
	     !WILL_FIRE_RL_dp1_bml_remAdvance ;

  // rule RL_dp1_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_crdBuf_ruleInc =
	     WILL_FIRE_RL_dp1_bml_crdAdvance ;
  assign WILL_FIRE_RL_dp1_bml_crdBuf_ruleInc =
	     WILL_FIRE_RL_dp1_bml_crdAdvance ;

  // rule RL_dp1_bml_remStart__dreg_update
  assign CAN_FIRE_RL_dp1_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ;

  // rule RL_dp1_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta =
	     dp1_tlp_mReqF$FULL_N &&
	     dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1661 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_dp1_tlp_dmaRequestNearMeta &&
	     !WILL_FIRE_RL_dp1_tlp_tlpRcv ;

  // rule RL_dp1_rBMeta_1
  assign CAN_FIRE_RL_dp1_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMeta_1 = 1'd1 ;

  // rule RL_dp1_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody =
	     dp1_tlp_mRespF$EMPTY_N && dp1_dpControl[3:2] == 2'd1 &&
	     dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_mRespF$D_OUT[138] &&
	     dp1_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ;

  // rule RL_dp1_rFMesg_1
  assign CAN_FIRE_RL_dp1_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rFMesg_1 = 1'd1 ;

  // rule RL_dp1_rBMesg_1
  assign CAN_FIRE_RL_dp1_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp1_rBMesg_1 = 1'd1 ;

  // rule RL_dp1_bml_remAdvance
  assign CAN_FIRE_RL_dp1_bml_remAdvance = CAN_FIRE_RL_dp1_bml_cntRemDone ;
  assign WILL_FIRE_RL_dp1_bml_remAdvance = CAN_FIRE_RL_dp1_bml_cntRemDone ;

  // rule RL_dp1_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_fabBuf_ruleInc =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_dp1_bml_fabBuf_ruleInc =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_dp1_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_dp1_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_dp1_bml_remBuf_ruleInc = CAN_FIRE_RL_dp1_bml_cntRemDone ;
  assign WILL_FIRE_RL_dp1_bml_remBuf_ruleInc =
	     CAN_FIRE_RL_dp1_bml_cntRemDone ;

  // rule RL_dp1_bml_initAccumulators
  assign CAN_FIRE_RL_dp1_bml_initAccumulators =
	     dp1_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     dp1_wci_cState == 3'd1 &&
	     dp1_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_dp1_bml_initAccumulators =
	     CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // rule RL_dp1_wci_ctl_op_complete
  assign CAN_FIRE_RL_dp1_wci_ctl_op_complete =
	     dp1_wci_respF_c_r != 2'd2 && dp1_wci_ctlOpActive &&
	     dp1_wci_ctlAckReg ;
  assign WILL_FIRE_RL_dp1_wci_ctl_op_complete =
	     CAN_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_wci_cfwr
  assign CAN_FIRE_RL_dp1_wci_cfwr =
	     dp1_wci_respF_c_r != 2'd2 && dp1_wci_reqF$EMPTY_N &&
	     dp1_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_dp1_wci_cfwr =
	     CAN_FIRE_RL_dp1_wci_cfwr && !WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;

  // rule RL_dp1_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_dp1_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_dp1_bml_remDone__dreg_update
  assign CAN_FIRE_RL_dp1_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_dp1_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_dp1_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_dp1_wci_reqF_enq
  assign CAN_FIRE_RL_dp1_wci_reqF_enq = dp1_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_dp1_wci_reqF_enq = CAN_FIRE_RL_dp1_wci_reqF_enq ;

  // rule RL_dp1_wci_respF_deq
  assign CAN_FIRE_RL_dp1_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_respF_deq = 1'd1 ;

  // rule RL_dp1_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_dp1_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp1_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_dp1_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_dp1_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_dp1_wci_respF_both
  assign CAN_FIRE_RL_dp1_wci_respF_both =
	     ((dp1_wci_respF_c_r == 2'd1) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd2 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_c_r != 2'd0 &&
	     dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp1_wci_respF_both = CAN_FIRE_RL_dp1_wci_respF_both ;

  // rule RL_dp1_wci_respF_decCtr
  assign CAN_FIRE_RL_dp1_wci_respF_decCtr =
	     dp1_wci_respF_c_r != 2'd0 && !dp1_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp1_wci_respF_decCtr =
	     CAN_FIRE_RL_dp1_wci_respF_decCtr ;

  // rule RL_dp1_wci_respF_incCtr
  assign CAN_FIRE_RL_dp1_wci_respF_incCtr =
	     ((dp1_wci_respF_c_r == 2'd0) ?
		dp1_wci_respF_x_wire$whas :
		dp1_wci_respF_c_r != 2'd1 || dp1_wci_respF_x_wire$whas) &&
	     dp1_wci_respF_enqueueing$whas &&
	     !(dp1_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp1_wci_respF_incCtr =
	     CAN_FIRE_RL_dp1_wci_respF_incCtr ;

  // rule RL_dp1_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter =
	     (dp1_wci_wciReq$wget[59:57] != 3'd0) != dp1_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_dp1_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter ;

  // rule RL_dp1_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun =
	     dp1_bram_serverAdapterB_3_s1[1] &&
	     !dp1_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_overRun ;

  // rule RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_3_s1[0] ||
	      dp1_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstCore =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun =
	     dp1_bram_serverAdapterA_3_s1[1] &&
	     !dp1_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_overRun ;

  // rule RL_dp1_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_3_s1[0] ||
	      dp1_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstCore =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun =
	     dp1_bram_serverAdapterB_2_s1[1] &&
	     !dp1_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_overRun ;

  // rule RL_dp1_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_2_s1[0] ||
	      dp1_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstCore =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun =
	     dp1_bram_serverAdapterA_2_s1[1] &&
	     !dp1_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_overRun ;

  // rule RL_dp1_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_2_s1[0] ||
	      dp1_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstCore =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun =
	     dp1_bram_serverAdapterB_1_s1[1] &&
	     !dp1_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_overRun ;

  // rule RL_dp1_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_1_s1[0] ||
	      dp1_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstCore =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_dp1_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun =
	     dp1_bram_serverAdapterA_1_s1[1] &&
	     !dp1_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_overRun ;

  // rule RL_dp1_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_1_s1[0] ||
	      dp1_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstCore =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_dp0_wmi_Es_doAlways_Dh
  assign CAN_FIRE_RL_dp0_wmi_Es_doAlways_Dh = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_Es_doAlways_Dh = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun =
	     dp1_bram_serverAdapterB_s1[1] &&
	     !dp1_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_overRun ;

  // rule RL_dp1_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO =
	     (!dp1_bram_serverAdapterB_s1[0] ||
	      dp1_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     !dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstCore =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_dp1_wmi_respMetadata
  assign CAN_FIRE_RL_dp1_wmi_respMetadata =
	     dp1_wmi_wmi_operateD && dp1_wmi_wmi_peerIsReady &&
	     dp1_wmi_dpControl_whas__68_AND_dp1_bram_server_ETC___d592 &&
	     dp1_dpControl[3:2] != 2'd1 &&
	     !dp1_wmi_mesgMeta[128] &&
	     dp1_wmi_mesgBufReady &&
	     dp1_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp1_wmi_respMetadata =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;

  // rule RL_dp1_wmi_doReadReq
  assign CAN_FIRE_RL_dp1_wmi_doReadReq = dp1_wmi_rdActive ;
  assign WILL_FIRE_RL_dp1_wmi_doReadReq =
	     dp1_wmi_rdActive && !WILL_FIRE_RL_dp1_wmi_doWriteFinalize &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // rule RL_dp1_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_dp1_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     dp1_bram_serverAdapterB_3_cnt_1$whas ||
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     !dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     dp1_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     dp1_bram_serverAdapterB_2_cnt_1$whas ||
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     !dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     dp1_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     dp1_bram_serverAdapterB_1_cnt_1$whas ||
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     !dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     dp1_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd =
	     dp1_bram_serverAdapterB_cnt_1$whas ||
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     !dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly =
	     dp1_bram_serverAdapterB_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp1_wmi_respMetadata &&
	     dp1_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun =
	     dp1_bram_serverAdapterA_s1[1] &&
	     !dp1_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_overRun ;

  // rule RL_dp1_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO =
	     (!dp1_bram_serverAdapterA_s1[0] ||
	      dp1_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp1_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_dp1_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     !dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_dp1_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstCore =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_dp1_tlp_read_NextResp
  assign CAN_FIRE_RL_dp1_tlp_read_NextResp =
	     dp1_tlp_readReq$EMPTY_N &&
	     (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_outData_outData_whas___ETC___d789 &&
	     dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp1_tlp_read_NextResp =
	     CAN_FIRE_RL_dp1_tlp_read_NextResp ;

  // rule RL_dp1_tlp_read_FirstResp
  assign CAN_FIRE_RL_dp1_tlp_read_FirstResp =
	     dp1_tlp_readReq$EMPTY_N && dp1_tlp_mRespF$FULL_N &&
	     IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d869 &&
	     (dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      dp1_tlp_readReq$EMPTY_N) &&
	     !dp1_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp1_tlp_read_FirstResp =
	     CAN_FIRE_RL_dp1_tlp_read_FirstResp ;

  // rule RL_dp1_tlp_read_NextReq
  assign CAN_FIRE_RL_dp1_tlp_read_NextReq =
	     dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145 &&
	     dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146 &&
	     dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147 &&
	     dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148 &&
	     dp1_tlp_mReqF$EMPTY_N &&
	     dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_read_NextReq =
	     CAN_FIRE_RL_dp1_tlp_read_NextReq ;

  // rule RL_dp1_tlp_read_FirstReq
  assign CAN_FIRE_RL_dp1_tlp_read_FirstReq =
	     dp1_tlp_mReqF$EMPTY_N && dp1_tlp_readReq$FULL_N &&
	     NOT_dp1_tlp_mReqF_first__43_BITS_28_TO_19_98_E_ETC___d1012 &&
	     !dp1_tlp_readStarted &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp1_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp1_tlp_read_FirstReq =
	     CAN_FIRE_RL_dp1_tlp_read_FirstReq ;

  // rule RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_dp1_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     dp1_bram_serverAdapterA_3_cnt_1$whas ||
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     dp1_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_dp1_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     dp1_bram_serverAdapterA_2_cnt_1$whas ||
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     dp1_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_dp1_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     dp1_bram_serverAdapterA_1_cnt_1$whas ||
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_dp1_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     dp1_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_dp1_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp1_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_dp1_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_dp1_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd =
	     dp1_bram_serverAdapterA_cnt_1$whas ||
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_dp1_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_dp1_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly =
	     dp1_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly ;

  // rule RL_dp1_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp1_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp1_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_dp0_wmi_Es_doAlways_Req
  assign CAN_FIRE_RL_dp0_wmi_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp0_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_dp0_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_dp0_mkConnectionVtoAf
  assign CAN_FIRE_RL_dp0_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_dp0_mkConnectionVtoAf = 1'd1 ;

  // rule RL_dp0_wmi_reqMetadata
  assign CAN_FIRE_RL_dp0_wmi_reqMetadata =
	     dp0_bram_serverAdapterB_cnt_649_SLT_3___d2650 &&
	     dp0_bram_serverAdapterB_1_cnt_651_SLT_3___d2652 &&
	     dp0_bram_serverAdapterB_2_cnt_653_SLT_3___d2654 &&
	     dp0_bram_serverAdapterB_3_cnt_656_SLT_3___d2657 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     !dp0_wmi_metaBusy &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_reqMetadata =
	     CAN_FIRE_RL_dp0_wmi_reqMetadata &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_reqConnect
  assign CAN_FIRE_RL_reqConnect = 1'd1 ;
  assign WILL_FIRE_RL_reqConnect = 1'd1 ;

  // rule RL_itc0_send_time
  assign CAN_FIRE_RL_itc0_send_time = 1'd1 ;
  assign WILL_FIRE_RL_itc0_send_time = 1'd1 ;

  // rule RL_itc0_wti_sThreadBusy_reg
  assign CAN_FIRE_RL_itc0_wti_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_itc0_wti_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp0_operating_actions
  assign CAN_FIRE_RL_dp0_operating_actions = dp0_wci_cState == 3'd2 ;
  assign WILL_FIRE_RL_dp0_operating_actions =
	     CAN_FIRE_RL_dp0_operating_actions ;

  // rule RL_dp0_rCredit_1
  assign CAN_FIRE_RL_dp0_rCredit_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclCredit != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rCredit_1 = CAN_FIRE_RL_dp0_rCredit_1 ;

  // rule RL_dp0_rFRdy_1
  assign CAN_FIRE_RL_dp0_rFRdy_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_fabBufsAvail != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rFRdy_1 = CAN_FIRE_RL_dp0_rFRdy_1 ;

  // rule RL_dp0_rRdy_1
  assign CAN_FIRE_RL_dp0_rRdy_1 =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsCF != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rRdy_1 = CAN_FIRE_RL_dp0_rRdy_1 ;

  // rule RL_dp0_rDone_1
  assign CAN_FIRE_RL_dp0_rDone_1 = dp0_tlp_remDone ;
  assign WILL_FIRE_RL_dp0_rDone_1 = dp0_tlp_remDone ;

  // rule RL_dp0_rStart_1
  assign CAN_FIRE_RL_dp0_rStart_1 = dp0_tlp_remStart ;
  assign WILL_FIRE_RL_dp0_rStart_1 = dp0_tlp_remStart ;

  // rule RL_dp0_rBMesg
  assign CAN_FIRE_RL_dp0_rBMesg = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMesg = 1'd1 ;

  // rule RL_dp0_rRdy
  assign CAN_FIRE_RL_dp0_rRdy =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufsAR != 16'd0 ;
  assign WILL_FIRE_RL_dp0_rRdy = CAN_FIRE_RL_dp0_rRdy ;

  // rule RL_dp0_rDone
  assign CAN_FIRE_RL_dp0_rDone = dp0_wmi_mesgDone ;
  assign WILL_FIRE_RL_dp0_rDone = dp0_wmi_mesgDone ;

  // rule RL_dp0_rStart
  assign CAN_FIRE_RL_dp0_rStart = dp0_wmi_mesgStart ;
  assign WILL_FIRE_RL_dp0_rStart = dp0_wmi_mesgStart ;

  // rule RL_dp0_bml_lcredit
  assign CAN_FIRE_RL_dp0_bml_lcredit =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 ;
  assign WILL_FIRE_RL_dp0_bml_lcredit = CAN_FIRE_RL_dp0_bml_lcredit ;

  // rule RL_dp0_bml_fba
  assign CAN_FIRE_RL_dp0_bml_fba =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fba = CAN_FIRE_RL_dp0_bml_fba ;

  // rule RL_dp0_bml_lbcf
  assign CAN_FIRE_RL_dp0_bml_lbcf = CAN_FIRE_RL_dp0_operating_actions ;
  assign WILL_FIRE_RL_dp0_bml_lbcf = CAN_FIRE_RL_dp0_operating_actions ;

  // rule RL_dp0_bml_lbar
  assign CAN_FIRE_RL_dp0_bml_lbar = CAN_FIRE_RL_dp0_operating_actions ;
  assign WILL_FIRE_RL_dp0_bml_lbar = CAN_FIRE_RL_dp0_operating_actions ;

  // rule RL_dp0_bml_cntRemDone
  assign CAN_FIRE_RL_dp0_bml_cntRemDone =
	     dp0_wci_cState == 3'd2 && dp0_bml_remDone ;
  assign WILL_FIRE_RL_dp0_bml_cntRemDone = CAN_FIRE_RL_dp0_bml_cntRemDone ;

  // rule RL_dp0_bml_cntRemStart
  assign CAN_FIRE_RL_dp0_bml_cntRemStart =
	     dp0_wci_cState == 3'd2 && dp0_bml_remStart ;
  assign WILL_FIRE_RL_dp0_bml_cntRemStart = CAN_FIRE_RL_dp0_bml_cntRemStart ;

  // rule RL_dp0_bml_cntLclDone
  assign CAN_FIRE_RL_dp0_bml_cntLclDone =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufDone ;
  assign WILL_FIRE_RL_dp0_bml_cntLclDone = CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // rule RL_dp0_bml_cntLclStart
  assign CAN_FIRE_RL_dp0_bml_cntLclStart =
	     dp0_wci_cState == 3'd2 && dp0_bml_lclBufStart ;
  assign WILL_FIRE_RL_dp0_bml_cntLclStart = CAN_FIRE_RL_dp0_bml_cntLclStart ;

  // rule RL_dp0_bml_wci_ctrl_OrE
  assign CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd2 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE =
	     CAN_FIRE_RL_dp0_bml_wci_ctrl_OrE ;

  // rule RL_dp0_bml_wci_ctrl_EiI
  assign CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd0 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI =
	     CAN_FIRE_RL_dp0_bml_wci_ctrl_EiI ;

  // rule RL_dp0_bml_crdBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_fabBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_remBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_lclBuf_ruleMod
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleMod = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleMod = 1'd1 ;

  // rule RL_dp0_bml_lclBufStart__dreg_update
  assign CAN_FIRE_RL_dp0_bml_lclBufStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBufStart__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_doDwell
  assign CAN_FIRE_RL_dp0_wmi_doDwell = dp0_wmi_bufDwell != 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_doDwell = CAN_FIRE_RL_dp0_wmi_doDwell ;

  // rule RL_dp0_wmi_doWriteFinalize
  assign CAN_FIRE_RL_dp0_wmi_doWriteFinalize =
	     dp0_bram_serverAdapterB_cnt_649_SLT_3___d2650 &&
	     dp0_bram_serverAdapterB_1_cnt_651_SLT_3___d2652 &&
	     dp0_bram_serverAdapterB_2_cnt_653_SLT_3___d2654 &&
	     dp0_bram_serverAdapterB_3_cnt_656_SLT_3___d2657 &&
	     dp0_wmi_wrFinalize ;
  assign WILL_FIRE_RL_dp0_wmi_doWriteFinalize =
	     CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // rule RL_dp0_rBMeta
  assign CAN_FIRE_RL_dp0_rBMeta = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMeta = 1'd1 ;

  // rule RL_dp0_bml_lclAdvance
  assign CAN_FIRE_RL_dp0_bml_lclAdvance = CAN_FIRE_RL_dp0_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp0_bml_lclAdvance = CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // rule RL_dp0_bml_lclBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_lclBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_lclBuf_ruleInc = CAN_FIRE_RL_dp0_bml_cntLclDone ;
  assign WILL_FIRE_RL_dp0_bml_lclBuf_ruleInc =
	     CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // rule RL_dp0_bml_lclBufDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_lclBufDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_lclBufDone__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_respF_deq
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_deq = 1'd1 ;

  // rule RL_dp0_wmi_wmi_dhF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiDh$wget[289] ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq = CAN_FIRE_RL_dp0_wmi_wmi_dhF_enq ;

  // rule RL_dp0_wmi_doWriteReq
  assign CAN_FIRE_RL_dp0_wmi_doWriteReq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_dhF$EMPTY_N &&
	     dp0_wmi_wrActive ;
  assign WILL_FIRE_RL_dp0_wmi_doWriteReq = CAN_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_wmi_wmi_mFlagF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 &&
	     dp0_wmi_wmi_wmiReq$wget[27] ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_enq ;

  // rule RL_dp0_wmi_wmi_reqF_enq
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_wmi_wmiReq$wget[31:29] != 3'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF_enq ;

  // rule RL_dp0_wmi_getRequest
  assign CAN_FIRE_RL_dp0_wmi_getRequest =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     !dp0_wmi_wmi_blockReq &&
	     dp0_wmi_wmi_reqF$EMPTY_N &&
	     NOT_dp0_wmi_wrActive_684_702_OR_NOT_dp0_wmi_rd_ETC___d2710 &&
	     dp0_wmi_bufDwell == 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_getRequest =
	     CAN_FIRE_RL_dp0_wmi_getRequest &&
	     !WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     !WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_wmi_mesgStart__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgStart__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_respF_both
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_both = 1'b0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_both = 1'b0 ;

  // rule RL_dp0_wmi_wmi_respF_decCtr
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr =
	     dp0_wmi_wmi_respF_c_r != 2'd0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_decCtr =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // rule RL_dp0_wmi_wmi_respF_incCtr
  assign CAN_FIRE_RL_dp0_wmi_wmi_respF_incCtr = 1'b0 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_respF_incCtr = 1'b0 ;

  // rule RL_dp0_wmi_wmi_dhF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ||
	     CAN_FIRE_RL_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF_reset ;

  // rule RL_dp0_wmi_wmi_dhF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 !=
	     CAN_FIRE_RL_dp0_wmi_doWriteReq ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_mFlagF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ||
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;

  // rule RL_dp0_wmi_wmi_mFlagF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 !=
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // rule RL_dp0_wmi_wmi_reqF_reset
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF_reset ;

  // rule RL_dp0_wmi_wmi_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 !=
	     WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // rule RL_dp0_tlp_writeData
  assign CAN_FIRE_RL_dp0_tlp_writeData =
	     dp0_tlp_mReqF$EMPTY_N && dp0_tlp_mReqF$EMPTY_N &&
	     (IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3198 ||
	      dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778) &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3231 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_writeData = CAN_FIRE_RL_dp0_tlp_writeData ;

  // rule RL_dp0_tlp_writeReq
  assign CAN_FIRE_RL_dp0_tlp_writeReq =
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_mReqF_RDY_deq__093_AND_IF_dp0_tlp_mReq_ETC___d3334 &&
	     dp0_tlp_mReqF$D_OUT[129:128] == 2'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_writeReq = CAN_FIRE_RL_dp0_tlp_writeReq ;

  // rule RL_dp0_tlp_dataXmt_Body
  assign CAN_FIRE_RL_dp0_tlp_dataXmt_Body =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Body =
	     CAN_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_tlp_dataXmt_Header
  assign CAN_FIRE_RL_dp0_tlp_dataXmt_Header =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dataXmt_Header =
	     CAN_FIRE_RL_dp0_tlp_dataXmt_Header ;

  // rule RL_dp0_tlp_dmaPullTailEvent
  assign CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent =
	     dp0_tlp_outF$FULL_N &&
	     dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3477 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent =
	     CAN_FIRE_RL_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_tlp_dmaPullResponseHeaderTag
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag =
	     dp0_tlp_inF$EMPTY_N && dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag ;

  // rule RL_dp0_tlp_tlpRcv
  assign CAN_FIRE_RL_dp0_tlp_tlpRcv =
	     dp0_tlp_inF$EMPTY_N &&
	     (dp0_tlp_inF$D_OUT[152] ?
		dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
		dp0_tlp_inF$D_OUT[124:120] != 5'b0 ||
		dp0_tlp_mReqF$FULL_N :
		dp0_tlp_inIgnorePkt || dp0_tlp_mReqF$FULL_N) &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight ;
  assign WILL_FIRE_RL_dp0_tlp_tlpRcv = CAN_FIRE_RL_dp0_tlp_tlpRcv ;

  // rule RL_dp0_tlp_dmaPullResponseBody
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // rule RL_dp0_tlp_dmaPullResponseHeader
  assign CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_reqMesgInFlight &&
	     !dp0_tlp_tlpRcvBusy &&
	     dp0_tlp_pullTagMatch &&
	     !dp0_tlp_gotResponseHeader ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // rule RL_dp0_tlp_dmaPullRequestFarMesg
  assign CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMesgInFlight &&
	     dp0_tlp_mesgLengthRemainPull != 17'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg =
	     CAN_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_tlp_dmaRespBodyFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_dpControl[3:2] == 2'd2 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_tlpRcvBusy ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // rule RL_dp0_tlp_dmaRespHeadFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta =
	     dp0_tlp_inF$EMPTY_N && dp0_tlp_mReqF$FULL_N &&
	     dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3617 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;

  // rule RL_dp0_tlp_dmaRequestFarMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta =
	     dp0_tlp_outF$FULL_N &&
	     dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3640 &&
	     dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRequestFarMeta &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_tlp_dmaXmtDoorbell
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[1:0] == 2'd2 &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_creditReady ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtDoorbell &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_tlp_dmaPostSeqDwell
  assign CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell = dp0_tlp_postSeqDwell != 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell =
	     CAN_FIRE_RL_dp0_tlp_dmaPostSeqDwell ;

  // rule RL_dp0_tlp_dmaXmtMetaBody
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtMetaBody =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_doXmtMetaBody ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_tlp_dmaXmtMetaHead
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtMetaHead =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_xmtMetaInFlight &&
	     dp0_tlp_xmtMetaOK ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_rFMeta_1
  assign CAN_FIRE_RL_dp0_rFMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFMeta_1 = 1'd1 ;

  // rule RL_dp0_tlp_dmaPushResponseBody
  assign CAN_FIRE_RL_dp0_tlp_dmaPushResponseBody =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd2 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody =
	     CAN_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;

  // rule RL_dp0_tlp_dmaPushResponseHeader
  assign CAN_FIRE_RL_dp0_tlp_dmaPushResponseHeader =
	     dp0_tlp_outF$FULL_N && dp0_tlp_mRespF$EMPTY_N &&
	     dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd2 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader =
	     CAN_FIRE_RL_dp0_tlp_dmaPushResponseHeader &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;

  // rule RL_dp0_tlp_dmaPushRequestMesg
  assign CAN_FIRE_RL_dp0_tlp_dmaPushRequestMesg =
	     dp0_tlp_mReqF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     dp0_tlp_fabMeta[127:96] != 32'd0 &&
	     !dp0_tlp_tlpRcvBusy &&
	     dp0_tlp_mesgLengthRemainPush != 17'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg =
	     CAN_FIRE_RL_dp0_tlp_dmaPushRequestMesg &&
	     !WILL_FIRE_RL_dp0_tlp_tlpRcv ;

  // rule RL_dp0_tlp_dmaXmtTailEvent
  assign CAN_FIRE_RL_dp0_tlp_dmaXmtTailEvent =
	     dp0_tlp_outF$FULL_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_tlpMetaSent &&
	     dp0_tlp_postSeqDwell == 4'd0 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent =
	     CAN_FIRE_RL_dp0_tlp_dmaXmtTailEvent &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // rule RL_dp0_rFFlow_1
  assign CAN_FIRE_RL_dp0_rFFlow_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFFlow_1 = 1'd1 ;

  // rule RL_dp0_bml_crdAdvance
  assign CAN_FIRE_RL_dp0_bml_crdAdvance =
	     dp0_wci_cState == 3'd2 && dp0_dpControl[1:0] == 2'd2 &&
	     dp0_bml_remStart ;
  assign WILL_FIRE_RL_dp0_bml_crdAdvance =
	     CAN_FIRE_RL_dp0_bml_crdAdvance &&
	     !WILL_FIRE_RL_dp0_bml_remAdvance ;

  // rule RL_dp0_bml_crdBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_crdBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_crdBuf_ruleInc =
	     WILL_FIRE_RL_dp0_bml_crdAdvance ;
  assign WILL_FIRE_RL_dp0_bml_crdBuf_ruleInc =
	     WILL_FIRE_RL_dp0_bml_crdAdvance ;

  // rule RL_dp0_bml_remStart__dreg_update
  assign CAN_FIRE_RL_dp0_bml_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remStart__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_dmaResponseNearMetaHead
  assign CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead =
	     dp0_tlp_mRespF$EMPTY_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[89:88] == 2'd3 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead =
	     CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ;

  // rule RL_dp0_tlp_dmaRequestNearMeta
  assign CAN_FIRE_RL_dp0_tlp_dmaRequestNearMeta =
	     dp0_tlp_mReqF$FULL_N &&
	     dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3816 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta =
	     CAN_FIRE_RL_dp0_tlp_dmaRequestNearMeta &&
	     !WILL_FIRE_RL_dp0_tlp_tlpRcv ;

  // rule RL_dp0_rBMeta_1
  assign CAN_FIRE_RL_dp0_rBMeta_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMeta_1 = 1'd1 ;

  // rule RL_dp0_tlp_dmaResponseNearMetaBody
  assign CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody =
	     dp0_tlp_mRespF$EMPTY_N && dp0_dpControl[3:2] == 2'd1 &&
	     dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_mRespF$D_OUT[138] &&
	     dp0_tlp_mRespF$D_OUT[137:136] == 2'd3 ;
  assign WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody =
	     CAN_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody &&
	     !WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ;

  // rule RL_dp0_rFMesg_1
  assign CAN_FIRE_RL_dp0_rFMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rFMesg_1 = 1'd1 ;

  // rule RL_dp0_rBMesg_1
  assign CAN_FIRE_RL_dp0_rBMesg_1 = 1'd1 ;
  assign WILL_FIRE_RL_dp0_rBMesg_1 = 1'd1 ;

  // rule RL_dp0_bml_remAdvance
  assign CAN_FIRE_RL_dp0_bml_remAdvance = CAN_FIRE_RL_dp0_bml_cntRemDone ;
  assign WILL_FIRE_RL_dp0_bml_remAdvance = CAN_FIRE_RL_dp0_bml_cntRemDone ;

  // rule RL_dp0_bml_fabBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_fabBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_fabBuf_ruleInc =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign WILL_FIRE_RL_dp0_bml_fabBuf_ruleInc =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;

  // rule RL_dp0_bml_remBuf_ruleDec
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleDec = 1'b0 ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleDec = 1'b0 ;

  // rule RL_dp0_bml_remBuf_ruleInc
  assign CAN_FIRE_RL_dp0_bml_remBuf_ruleInc = CAN_FIRE_RL_dp0_bml_cntRemDone ;
  assign WILL_FIRE_RL_dp0_bml_remBuf_ruleInc =
	     CAN_FIRE_RL_dp0_bml_cntRemDone ;

  // rule RL_dp0_bml_initAccumulators
  assign CAN_FIRE_RL_dp0_bml_initAccumulators =
	     dp0_wci_wci_ctrl_pw$whas && WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     dp0_wci_cState == 3'd1 &&
	     dp0_wci_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_dp0_bml_initAccumulators =
	     CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // rule RL_dp0_wci_ctl_op_complete
  assign CAN_FIRE_RL_dp0_wci_ctl_op_complete =
	     dp0_wci_respF_c_r != 2'd2 && dp0_wci_ctlOpActive &&
	     dp0_wci_ctlAckReg ;
  assign WILL_FIRE_RL_dp0_wci_ctl_op_complete =
	     CAN_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_wci_cfwr
  assign CAN_FIRE_RL_dp0_wci_cfwr =
	     dp0_wci_respF_c_r != 2'd2 && dp0_wci_reqF$EMPTY_N &&
	     dp0_wci_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_dp0_wci_cfwr =
	     CAN_FIRE_RL_dp0_wci_cfwr && !WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;

  // rule RL_dp0_bml_fabAvail__dreg_update
  assign CAN_FIRE_RL_dp0_bml_fabAvail__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabAvail__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_fabDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_fabDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_fabDone__dreg_update = 1'd1 ;

  // rule RL_dp0_bml_remDone__dreg_update
  assign CAN_FIRE_RL_dp0_bml_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bml_remDone__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_pullTagMatch__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_pullTagMatch__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_creditReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_creditReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_creditReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_farBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_farBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_farBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_nearBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_nearBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_remDone__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_remDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_remDone__dreg_update = 1'd1 ;

  // rule RL_dp0_tlp_remStart__dreg_update
  assign CAN_FIRE_RL_dp0_tlp_remStart__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_remStart__dreg_update = 1'd1 ;

  // rule RL_dp0_wci_respF_deq
  assign CAN_FIRE_RL_dp0_wci_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_respF_deq = 1'd1 ;

  // rule RL_dp0_wci_sThreadBusy_reg
  assign CAN_FIRE_RL_dp0_wci_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_sThreadBusy_reg = 1'd1 ;

  // rule RL_dp0_wci_reqF_enq
  assign CAN_FIRE_RL_dp0_wci_reqF_enq = dp0_wci_wciReq$wget[59:57] != 3'd0 ;
  assign WILL_FIRE_RL_dp0_wci_reqF_enq = CAN_FIRE_RL_dp0_wci_reqF_enq ;

  // rule RL_dp0_wci_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_dp0_wci_sFlagReg__dreg_update
  assign CAN_FIRE_RL_dp0_wci_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wci_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_dp0_wci_respF_both
  assign CAN_FIRE_RL_dp0_wci_respF_both =
	     ((dp0_wci_respF_c_r == 2'd1) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd2 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_c_r != 2'd0 &&
	     dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp0_wci_respF_both = CAN_FIRE_RL_dp0_wci_respF_both ;

  // rule RL_dp0_wci_respF_decCtr
  assign CAN_FIRE_RL_dp0_wci_respF_decCtr =
	     dp0_wci_respF_c_r != 2'd0 && !dp0_wci_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_dp0_wci_respF_decCtr =
	     CAN_FIRE_RL_dp0_wci_respF_decCtr ;

  // rule RL_dp0_wci_respF_incCtr
  assign CAN_FIRE_RL_dp0_wci_respF_incCtr =
	     ((dp0_wci_respF_c_r == 2'd0) ?
		dp0_wci_respF_x_wire$whas :
		dp0_wci_respF_c_r != 2'd1 || dp0_wci_respF_x_wire$whas) &&
	     dp0_wci_respF_enqueueing$whas &&
	     !(dp0_wci_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_dp0_wci_respF_incCtr =
	     CAN_FIRE_RL_dp0_wci_respF_incCtr ;

  // rule RL_dp0_wci_reqF__updateLevelCounter
  assign CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter =
	     (dp0_wci_wciReq$wget[59:57] != 3'd0) != dp0_wci_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_dp0_wci_reqF__updateLevelCounter =
	     CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter ;

  // rule RL_dp0_bram_serverAdapterB_3_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun =
	     dp0_bram_serverAdapterB_3_s1[1] &&
	     !dp0_bram_serverAdapterB_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_overRun ;

  // rule RL_dp0_bram_serverAdapterB_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_3_s1[0] ||
	      dp0_bram_serverAdapterB_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_3_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_3_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstCore =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_3_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun =
	     dp0_bram_serverAdapterA_3_s1[1] &&
	     !dp0_bram_serverAdapterA_3_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_overRun ;

  // rule RL_dp0_bram_serverAdapterA_3_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_3_s1[0] ||
	      dp0_bram_serverAdapterA_3_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_3_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstCore =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_2_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun =
	     dp0_bram_serverAdapterB_2_s1[1] &&
	     !dp0_bram_serverAdapterB_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_overRun ;

  // rule RL_dp0_bram_serverAdapterB_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_2_s1[0] ||
	      dp0_bram_serverAdapterB_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_2_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_2_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstCore =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_2_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun =
	     dp0_bram_serverAdapterA_2_s1[1] &&
	     !dp0_bram_serverAdapterA_2_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_overRun ;

  // rule RL_dp0_bram_serverAdapterA_2_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_2_s1[0] ||
	      dp0_bram_serverAdapterA_2_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_2_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstCore =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_1_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun =
	     dp0_bram_serverAdapterB_1_s1[1] &&
	     !dp0_bram_serverAdapterB_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_overRun ;

  // rule RL_dp0_bram_serverAdapterB_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_1_s1[0] ||
	      dp0_bram_serverAdapterB_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_1_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_1_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstCore =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterA_1_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun =
	     dp0_bram_serverAdapterA_1_s1[1] &&
	     !dp0_bram_serverAdapterA_1_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_overRun ;

  // rule RL_dp0_bram_serverAdapterA_1_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_1_s1[0] ||
	      dp0_bram_serverAdapterA_1_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_1_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstCore =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ;

  // rule RL_dp0_bram_serverAdapterB_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun =
	     dp0_bram_serverAdapterB_s1[1] &&
	     !dp0_bram_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_overRun ;

  // rule RL_dp0_bram_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO =
	     (!dp0_bram_serverAdapterB_s1[0] ||
	      dp0_bram_serverAdapterB_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     !dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstCore =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_dp0_wmi_respMetadata
  assign CAN_FIRE_RL_dp0_wmi_respMetadata =
	     dp0_wmi_wmi_operateD && dp0_wmi_wmi_peerIsReady &&
	     dp0_wmi_dpControl_whas__727_AND_dp0_bram_serve_ETC___d2751 &&
	     dp0_dpControl[3:2] != 2'd1 &&
	     !dp0_wmi_mesgMeta[128] &&
	     dp0_wmi_mesgBufReady &&
	     dp0_wmi_metaBusy ;
  assign WILL_FIRE_RL_dp0_wmi_respMetadata =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;

  // rule RL_dp0_wmi_doReadReq
  assign CAN_FIRE_RL_dp0_wmi_doReadReq = dp0_wmi_rdActive ;
  assign WILL_FIRE_RL_dp0_wmi_doReadReq =
	     dp0_wmi_rdActive && !WILL_FIRE_RL_dp0_wmi_doWriteFinalize &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // rule RL_dp0_wmi_mesgBufReady__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgBufReady__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_mesgDone__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_mesgDone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_mesgDone__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_peerIsReady__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_peerIsReady__dreg_update = 1'd1 ;

  // rule RL_dp0_wmi_wmi_operateD__dreg_update
  assign CAN_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_wmi_wmi_operateD__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterB_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     dp0_bram_serverAdapterB_3_cnt_1$whas ||
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     !dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_3_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     dp0_bram_serverAdapterB_3_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     dp0_bram_serverAdapterB_2_cnt_1$whas ||
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     !dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_2_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     dp0_bram_serverAdapterB_2_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     dp0_bram_serverAdapterB_1_cnt_1$whas ||
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     !dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_1_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     dp0_bram_serverAdapterB_1_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd =
	     dp0_bram_serverAdapterB_cnt_1$whas ||
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     !dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly =
	     dp0_bram_serverAdapterB_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_dp0_wmi_respMetadata &&
	     dp0_bram_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_overRun
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun =
	     dp0_bram_serverAdapterA_s1[1] &&
	     !dp0_bram_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_overRun ;

  // rule RL_dp0_bram_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO =
	     (!dp0_bram_serverAdapterA_s1[0] ||
	      dp0_bram_serverAdapterA_outDataCore$FULL_N) &&
	     dp0_bram_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO ;

  // rule RL_dp0_bram_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     !dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq ;

  // rule RL_dp0_bram_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstCore =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_dp0_tlp_read_NextResp
  assign CAN_FIRE_RL_dp0_tlp_read_NextResp =
	     dp0_tlp_readReq$EMPTY_N &&
	     (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_outData_outData_whas___ETC___d2947 &&
	     dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp0_tlp_read_NextResp =
	     CAN_FIRE_RL_dp0_tlp_read_NextResp ;

  // rule RL_dp0_tlp_read_FirstResp
  assign CAN_FIRE_RL_dp0_tlp_read_FirstResp =
	     dp0_tlp_readReq$EMPTY_N && dp0_tlp_mRespF$FULL_N &&
	     IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3027 &&
	     (dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ||
	      dp0_tlp_readReq$EMPTY_N) &&
	     !dp0_tlp_readHeaderSent ;
  assign WILL_FIRE_RL_dp0_tlp_read_FirstResp =
	     CAN_FIRE_RL_dp0_tlp_read_FirstResp ;

  // rule RL_dp0_tlp_read_NextReq
  assign CAN_FIRE_RL_dp0_tlp_read_NextReq =
	     dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778 &&
	     dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779 &&
	     dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780 &&
	     dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781 &&
	     dp0_tlp_mReqF$EMPTY_N &&
	     dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_read_NextReq =
	     CAN_FIRE_RL_dp0_tlp_read_NextReq ;

  // rule RL_dp0_tlp_read_FirstReq
  assign CAN_FIRE_RL_dp0_tlp_read_FirstReq =
	     dp0_tlp_mReqF$EMPTY_N && dp0_tlp_readReq$FULL_N &&
	     NOT_dp0_tlp_mReqF_first__101_BITS_28_TO_19_156_ETC___d3170 &&
	     !dp0_tlp_readStarted &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd0 &&
	     dp0_tlp_mReqF$D_OUT[129:128] != 2'd1 ;
  assign WILL_FIRE_RL_dp0_tlp_read_FirstReq =
	     CAN_FIRE_RL_dp0_tlp_read_FirstReq ;

  // rule RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     MUX_dp0_bram_memory_3$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_3$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_3_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_3_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     dp0_bram_serverAdapterA_3_cnt_1$whas ||
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_3_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     dp0_bram_serverAdapterA_3_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_3_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_3_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     MUX_dp0_bram_memory_2$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_2$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_2_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_2_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     dp0_bram_serverAdapterA_2_cnt_1$whas ||
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_2_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     dp0_bram_serverAdapterA_2_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_2_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_2_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     MUX_dp0_bram_memory_1$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory_1$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_1_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_1_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     dp0_bram_serverAdapterA_1_cnt_1$whas ||
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_1_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     dp0_bram_serverAdapterA_1_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_1_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_1_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly ;

  // rule RL_dp0_bram_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     MUX_dp0_bram_memory$a_put_1__SEL_1 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_2 ||
	     MUX_dp0_bram_memory$a_put_1__SEL_3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;

  // rule RL_dp0_bram_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_dp0_bram_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd =
	     dp0_bram_serverAdapterA_cnt_1$whas ||
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd ;

  // rule RL_dp0_bram_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ;

  // rule RL_dp0_bram_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N &&
	     dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     !dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly ;

  // rule RL_dp0_bram_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly =
	     dp0_bram_serverAdapterA_outDataCore$FULL_N &&
	     !dp0_bram_serverAdapterA_outData_deqCalled$whas &&
	     dp0_bram_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly ;

  // inputs to muxes for submodule ports
  assign MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ;
  assign MUX_dp0_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ;
  assign MUX_dp0_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ;
  assign MUX_dp0_tlp_outDwRemain$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader && _dfoo15 ;
  assign MUX_dp0_tlp_xmtMetaOK$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader &&
	     dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ;
  assign MUX_dp0_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doDwell && dp0_wmi_bufDwell == 2'd1 ;
  assign MUX_dp0_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 ;
  assign MUX_dp0_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lbar &&
	     (IF_dp1_bml_dpControl_wget__48_BITS_1_TO_0_49_E_ETC___d334 &&
	      !dp1_bml_lclBufStart ||
	      CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q2 &&
	      dp1_bml_lclBufStart) ;
  assign MUX_dp1_bml_lclCredit$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ;
  assign MUX_dp1_tlp_outDwRemain$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ;
  assign MUX_dp1_tlp_outDwRemain$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo5 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ;
  assign MUX_dp1_wmi_mesgBusy$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doDwell && dp1_wmi_bufDwell == 2'd1 ;
  assign MUX_dp1_wmi_wrActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 ;
  assign MUX_dp1_wmi_wrFinalize$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? dp0_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? 16'd0 : dp0_bml_lclNumBufs ;
  always@(idx__h49991 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h49991)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_2 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h47604 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h47604)
      2'd0: MUX_dp0_bram_memory$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory$a_put_3__VAL_3 =
	     { dp0_tlp_mReqF$D_OUT[7:0],
	       dp0_tlp_mReqF$D_OUT[15:8],
	       dp0_tlp_mReqF$D_OUT[23:16],
	       dp0_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp0_bram_memory$b_put_3__VAL_2 =
	     { 8'd0, dp0_wmi_wmi_mFlagReg[23:0] } ;
  always@(idx__h52136 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h52136)
      2'd0: MUX_dp0_bram_memory_1$a_put_2__VAL_2 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h48085 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h48085)
      2'd0:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  assign MUX_dp0_bram_memory_1$b_put_3__VAL_2 =
	     { 24'h800000, dp0_wmi_wmi_mFlagReg[31:24] } ;
  always@(idx__h53378 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h53378)
      2'd0: MUX_dp0_bram_memory_2$a_put_2__VAL_2 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h48466 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h48466)
      2'd0:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  always@(idx__h54620 or
	  dp0_tlp_writeDWAddr_PLUS_3__q3 or
	  dp0_tlp_writeDWAddr or
	  dp0_tlp_writeDWAddr_PLUS_1__q4 or dp0_tlp_writeDWAddr_PLUS_2__q5)
  begin
    case (idx__h54620)
      2'd0: MUX_dp0_bram_memory_3$a_put_2__VAL_3 = dp0_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_1__q4[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_2__q5[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 =
	      dp0_tlp_writeDWAddr_PLUS_3__q3[12:2];
    endcase
  end
  always@(idx__h48847 or
	  dp0_tlp_readNxtDWAddr_PLUS_3__q6 or
	  dp0_tlp_readNxtDWAddr or
	  dp0_tlp_readNxtDWAddr_PLUS_1__q7 or
	  dp0_tlp_readNxtDWAddr_PLUS_2__q8)
  begin
    case (idx__h48847)
      2'd0:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 = dp0_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_1__q7[12:2];
      2'd2:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_2__q8[12:2];
      2'd3:
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4 =
	      dp0_tlp_readNxtDWAddr_PLUS_3__q6[12:2];
    endcase
  end
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp0_tlp_fabMesgAccu + y__h28054 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3 =
	     dp0_tlp_fabMesgAccu + y__h34016 ;
  assign MUX_dp0_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h28815,
	       opcode__h28754,
	       nowMS__h28755,
	       nowLS__h28756 } ;
  assign MUX_dp0_tlp_fabMeta$write_1__VAL_3 =
	     { 1'd1,
	       x__h34444,
	       opcode__h34412,
	       nowMS__h34413,
	       nowLS__h34414 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_1 =
	     dp0_tlp_inF$D_OUT[152] ?
	       (dp0_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp0_tlp_inF$D_OUT[95:80],
		    dp0_tlp_inF$D_OUT[46:34],
		    dp0_tlp_inF$D_OUT[105:96],
		    dp0_tlp_inF$D_OUT[67:64],
		    dp0_tlp_inF$D_OUT[71:68],
		    dp0_tlp_inF$D_OUT[79:72],
		    dp0_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       dp0_tlp_remMesgAccu[14:2],
	       thisRequestLength__h28406[11:2],
	       8'd255,
	       rreq_tag__h28620,
	       3'h2 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       dp0_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMetaAddr[14:2],
	       18'd1279,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp0_tlp_remMesgAccu[14:2],
	       dp0_tlp_inF$D_OUT[105:96],
	       8'd255,
	       dp0_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 =
	     dp0_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_dp0_tlp_mReqF$enq_1__VAL_6 = { 2'd1, dp0_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { dp0_tlp_inF$D_OUT[8],
	       dp0_tlp_inF$D_OUT[23:16],
	       dp0_tlp_inF$D_OUT[31:24] } ;
  assign MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     dp0_tlp_mesgLengthRemainPull - y__h33951 ;
  assign MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { dp0_tlp_mRespF$D_OUT[8],
	       dp0_tlp_mRespF$D_OUT[23:16],
	       dp0_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     dp0_tlp_mesgLengthRemainPush - y__h28446 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_2 =
	     dp0_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_outDwRemain$write_1__VAL_1 =
	     dp0_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_1 = { 25'd25362416, w_data__h39555 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_2 = { 25'd25362416, w_data__h34218 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_4 = { 25'd8585200, w_data__h23955 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_3 = { 25'd16973823, w_data__h26547 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_5 =
	     { 1'd1,
	       dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h57443 } ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_8 = { 25'd25296895, w_data__h21891 } ;
  assign MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 =
	     dp0_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp0_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp0_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp0_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp0_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 =
	     dp0_tlp_remMesgAccu + y__h28569 ;
  assign MUX_dp0_tlp_remMesgAccu$write_1__VAL_3 =
	     dp0_tlp_remMesgAccu + y__h60016 ;
  assign MUX_dp0_tlp_srcMesgAccu$write_1__VAL_2 =
	     dp0_tlp_srcMesgAccu + y__h28519 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 =
	     dp0_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 =
	     dp0_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp0_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp0_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_1 = dp0_wci_respF_c_r - 2'd1 ;
  assign MUX_dp0_wci_illegalEdge$write_1__VAL_2 =
	     dp0_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp0_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp0_wci_respF_c_r$write_1__VAL_2 = dp0_wci_respF_c_r + 2'd1 ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 =
	     dp0_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp0_wmi_addr$write_1__VAL_1 = dp0_wmi_addr + 14'd32 ;
  assign MUX_dp0_wmi_bufDwell$write_1__VAL_3 = dp0_wmi_bufDwell - 2'd1 ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 =
	     { dp0_wmi_wmi_reqF$D_OUT[8:0], 5'd0 } ;
  assign MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 =
	     dp0_wmi_bytesRemainReq - 14'd32 ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp0_wmi_bytesRemainResp - 14'd32 ;
  assign MUX_dp0_wmi_mesgCount$write_1__VAL_1 = dp0_wmi_mesgCount + 32'd1 ;
  assign MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp0_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? dp1_bml_lclNumBufs : 16'd0 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? 16'd0 : dp1_bml_lclNumBufs ;
  assign MUX_dp1_bram_memory$a_put_3__VAL_3 =
	     { dp1_tlp_mReqF$D_OUT[7:0],
	       dp1_tlp_mReqF$D_OUT[15:8],
	       dp1_tlp_mReqF$D_OUT[23:16],
	       dp1_tlp_mReqF$D_OUT[31:24] } ;
  assign MUX_dp1_bram_memory$b_put_3__VAL_2 =
	     { 8'd0, dp1_wmi_wmi_mFlagReg[23:0] } ;
  assign MUX_dp1_bram_memory_1$b_put_3__VAL_2 =
	     { 24'h800000, dp1_wmi_wmi_mFlagReg[31:24] } ;
  assign MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_dmaPullRemainDWLen - 10'd1 ;
  assign MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 =
	     dp1_tlp_inF$D_OUT[105:96] - 10'd1 ;
  assign MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1 =
	     dp1_tlp_mesgComplReceived + 17'd4 ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_1 =
	     dp1_tlp_inF$D_OUT[152] ?
	       (dp1_tlp_inF$D_OUT[126] ?
		  { 67'h0AAAAAAAAAAAAAAAA,
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[31:0] } :
		  { 72'hAAAAAAAAAAAAAAAAA9,
		    dp1_tlp_inF$D_OUT[95:80],
		    dp1_tlp_inF$D_OUT[46:34],
		    dp1_tlp_inF$D_OUT[105:96],
		    dp1_tlp_inF$D_OUT[67:64],
		    dp1_tlp_inF$D_OUT[71:68],
		    dp1_tlp_inF$D_OUT[79:72],
		    dp1_tlp_inF$D_OUT[118:116] }) :
	       { 2'd1, dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_2 =
	     { 88'hAAAAAAAAAAAAAAAAABFFF8,
	       dp1_tlp_remMetaAddr[14:2],
	       29'd2620074 } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_4 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp1_tlp_remMetaAddr[14:2],
	       18'd1279,
	       dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_5 =
	     { 67'h0AAAAAAAAAAAAAAAA,
	       dp1_tlp_remMesgAccu[14:2],
	       dp1_tlp_inF$D_OUT[105:96],
	       8'd255,
	       dp1_tlp_inF$D_OUT[31:0] } ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_6 = { 2'd1, dp1_tlp_inF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 =
	     { dp1_tlp_inF$D_OUT[8],
	       dp1_tlp_inF$D_OUT[23:16],
	       dp1_tlp_inF$D_OUT[31:24] } ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 =
	     { dp1_tlp_mRespF$D_OUT[8],
	       dp1_tlp_mRespF$D_OUT[23:16],
	       dp1_tlp_mRespF$D_OUT[31:24] } ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_1 =
	     dp1_tlp_mRespF$D_OUT[71:62] - 10'd1 ;
  assign MUX_dp1_tlp_outDwRemain$write_1__VAL_2 =
	     dp1_tlp_outDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 =
	     dp1_tlp_postSeqDwell - 4'd1 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 =
	     dp1_tlp_rdRespDwRemain - 10'd4 ;
  assign MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 =
	     dp1_tlp_readReq$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 =
	     dp1_tlp_readNxtDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 =
	     dp1_tlp_mReqF$D_OUT[41:29] + 13'd1 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_readRemainDWLen - 10'd4 ;
  assign MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_mReqF$D_OUT[28:19] - 10'd1 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 =
	     dp1_tlp_writeDWAddr + 13'd4 ;
  assign MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 =
	     dp1_tlp_mReqF$D_OUT[62:50] + 13'd1 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 =
	     dp1_tlp_writeRemainDWLen - 10'd4 ;
  assign MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 =
	     dp1_tlp_mReqF$D_OUT[49:40] - 10'd1 ;
  assign MUX_dp1_wci_illegalEdge$write_1__VAL_2 =
	     dp1_wci_reqF$D_OUT[36:34] != 3'd4 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd5 &&
	     dp1_wci_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_1 = dp1_wci_respF_c_r - 2'd1 ;
  assign MUX_dp1_wci_respF_c_r$write_1__VAL_2 = dp1_wci_respF_c_r + 2'd1 ;
  assign MUX_dp1_wmi_addr$write_1__VAL_1 = dp1_wmi_addr + 14'd32 ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 =
	     dp1_wci_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_dp1_wmi_bufDwell$write_1__VAL_3 = dp1_wmi_bufDwell - 2'd1 ;
  assign MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 =
	     { dp1_wmi_wmi_reqF$D_OUT[8:0], 5'd0 } ;
  assign MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 =
	     dp1_wmi_bytesRemainReq - 14'd32 ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 =
	     dp1_wmi_bytesRemainResp - 14'd32 ;
  assign MUX_dp1_wmi_mesgCount$write_1__VAL_1 = dp1_wmi_mesgCount + 32'd1 ;
  assign MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 =
	     dp1_wmi_wmi_respF_c_r - 2'd1 ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_1 =
	     { 1'd1,
	       dp0_tlp_readReq$D_OUT[59:58],
	       dp0_tlp_readReq$D_OUT[10:3],
	       rdata__h44234 } ;
  assign MUX_dp0_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState != 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 && dp0_wci_cState != 3'd1 &&
	      dp0_wci_cState != 3'd3 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState != 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 && dp0_wci_cState != 3'd3 &&
	      dp0_wci_cState != 3'd2 &&
	      dp0_wci_cState != 3'd1 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp0_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ;
  assign MUX_dp0_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ;
  assign MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     dp0_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && dp0_wmi_wmi_reqF$FULL_N ;
  assign MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && dp0_wmi_wmi_dhF$FULL_N ;
  assign MUX_dp1_wci_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState != 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 && dp1_wci_cState != 3'd1 &&
	      dp1_wci_cState != 3'd3 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState != 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 && dp1_wci_cState != 3'd3 &&
	      dp1_wci_cState != 3'd2 &&
	      dp1_wci_cState != 3'd1 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd4 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd5 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd6 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_dp1_wci_respF_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ;
  assign MUX_dp1_wci_respF_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ;
  assign MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     dp1_wmi_wmi_mFlagF$FULL_N ;
  assign MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && dp1_wmi_wmi_reqF$FULL_N ;
  assign MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && dp1_wmi_wmi_dhF$FULL_N ;
  assign MUX_dp1_tlp_remMesgAccu$write_1__VAL_3 =
	     dp1_tlp_remMesgAccu + y__h136580 ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 =
	     dp1_tlp_fabMesgAccu + y__h104627 ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_5 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       pkt__h134007 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_4 = { 25'd8585200, w_data__h100534 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_3 = { 25'd16973823, w_data__h103126 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_8 = { 25'd25296895, w_data__h98476 } ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_2 = { 25'd25362416, w_data__h116119 } ;
  assign MUX_dp0_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1, x__h69718, x__h69719, x__h69720, x__h69721 } ;
  assign MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h76168 } ;
  always@(WILL_FIRE_RL_dp0_wci_ctl_op_complete or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp0_wci_cfrd or
	  MUX_dp0_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp0_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_ctl_op_complete:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp0_wci_cfrd:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp0_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_cfwr:
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_dp0_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp0_wci_respF_q_0$write_1__VAL_1 =
	     (dp0_wci_respF_c_r == 2'd1) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_2 :
	       dp0_wci_respF_q_1 ;
  assign MUX_dp0_wci_respF_q_1$write_1__VAL_1 =
	     (dp0_wci_respF_c_r == 2'd2) ?
	       MUX_dp0_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_tlp_fabMeta$write_1__VAL_1 =
	     { 1'd1,
	       x__h105388,
	       opcode__h105327,
	       nowMS__h105328,
	       nowLS__h105329 } ;
  assign MUX_dp1_tlp_fabMeta$write_1__VAL_3 =
	     { 1'd1,
	       x__h111008,
	       opcode__h110976,
	       nowMS__h110977,
	       nowLS__h110978 } ;
  assign MUX_dp1_wmi_mesgMeta$write_1__VAL_2 =
	     { 1'd1, x__h146282, x__h146283, x__h146284, x__h146285 } ;
  assign MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 =
	     { 2'd1, _theResult____h152727 } ;
  always@(WILL_FIRE_RL_dp1_wci_cfrd or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_dp1_wci_ctl_op_complete or
	  MUX_dp1_wci_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_dp1_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_cfrd:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_dp1_wci_ctl_op_complete:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
	      MUX_dp1_wci_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_cfwr:
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 = 34'h1C0DE4201;
      default: MUX_dp1_wci_respF_q_0$write_1__VAL_2 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_dp1_wci_respF_q_0$write_1__VAL_1 =
	     (dp1_wci_respF_c_r == 2'd1) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2 :
	       dp1_wci_respF_q_1 ;
  assign MUX_dp1_wci_respF_q_1$write_1__VAL_1 =
	     (dp1_wci_respF_c_r == 2'd2) ?
	       MUX_dp1_wci_respF_q_0$write_1__VAL_2 :
	       34'h0AAAAAAAA ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_1 =
	     { 1'd1,
	       dp1_tlp_readReq$D_OUT[59:58],
	       dp1_tlp_readReq$D_OUT[10:3],
	       rdata__h120798 } ;
  assign MUX_dp0_bml_lclCredit$write_1__VAL_1 =
	     (dp0_bml_lclBufDone && !dp0_bml_remStart) ?
	       x__h74849 :
	       x__h74854 ;
  always@(idx__h124168 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q11 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q12 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h124168)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  always@(idx__h129942 or
	  dp1_tlp_writeDWAddr_PLUS_3__q14 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q15 or dp1_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h129942)
      2'd0: MUX_dp1_bram_memory_2$a_put_2__VAL_2 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h126555 or
	  dp1_tlp_writeDWAddr_PLUS_3__q14 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q15 or dp1_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h126555)
      2'd0: MUX_dp1_bram_memory$a_put_2__VAL_2 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_dp1_bram_memory$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_dp1_bram_memory$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h124649 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q11 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q12 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h124649)
      2'd0:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  always@(idx__h128700 or
	  dp1_tlp_writeDWAddr_PLUS_3__q14 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q15 or dp1_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h128700)
      2'd0: MUX_dp1_bram_memory_1$a_put_2__VAL_2 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 =
	      dp1_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  always@(idx__h125030 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q11 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q12 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h125030)
      2'd0:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  always@(idx__h125411 or
	  dp1_tlp_readNxtDWAddr_PLUS_3__q11 or
	  dp1_tlp_readNxtDWAddr or
	  dp1_tlp_readNxtDWAddr_PLUS_1__q12 or
	  dp1_tlp_readNxtDWAddr_PLUS_2__q13)
  begin
    case (idx__h125411)
      2'd0:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 = dp1_tlp_readNxtDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_1__q12[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_2__q13[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4 =
	      dp1_tlp_readNxtDWAddr_PLUS_3__q11[12:2];
    endcase
  end
  always@(idx__h131184 or
	  dp1_tlp_writeDWAddr_PLUS_3__q14 or
	  dp1_tlp_writeDWAddr or
	  dp1_tlp_writeDWAddr_PLUS_1__q15 or dp1_tlp_writeDWAddr_PLUS_2__q16)
  begin
    case (idx__h131184)
      2'd0: MUX_dp1_bram_memory_3$a_put_2__VAL_3 = dp1_tlp_writeDWAddr[12:2];
      2'd1:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_1__q15[12:2];
      2'd2:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_2__q16[12:2];
      2'd3:
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 =
	      dp1_tlp_writeDWAddr_PLUS_3__q14[12:2];
    endcase
  end
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp0_bml_fabAvail && !dp0_bml_remStart) ? x__h74891 : x__h74896 ;
  assign MUX_dp1_bml_lclCredit$write_1__VAL_1 =
	     (dp1_bml_lclBufDone && !dp1_bml_remStart) ?
	       x__h151410 :
	       x__h151415 ;
  assign MUX_dp1_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp1_bml_dpControl_wget__48_BITS_1_TO_0_49_E_ETC___d334 &&
	      !dp1_bml_lclBufStart) ?
	       x__h151605 :
	       x__h151610 ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 =
	     (dp1_bml_fabAvail && !dp1_bml_remStart) ?
	       x__h151452 :
	       x__h151457 ;
  assign MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp0_dpControl[3:2] == 2'd1) ? x__h74232 : 16'd0 ;
  assign MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 =
	     dp1_tlp_remMesgAccu + y__h105142 ;
  assign MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 =
	     dp1_tlp_mesgLengthRemainPush - y__h105019 ;
  assign MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 =
	     dp1_tlp_srcMesgAccu + y__h105092 ;
  assign MUX_dp1_tlp_mReqF$enq_1__VAL_3 =
	     { 88'hAAAAAAAAAAAAAAAAAAFFF8,
	       dp1_tlp_remMesgAccu[14:2],
	       thisRequestLength__h104979[11:2],
	       8'd255,
	       rreq_tag__h105193,
	       3'h2 } ;
  assign MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 =
	     dp1_tlp_mesgLengthRemainPull - y__h110521 ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3 =
	     dp1_tlp_fabMesgAccu + y__h110586 ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_1 = { 25'd25362416, w_data__h110788 } ;
  assign MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 =
	     (dp1_dpControl[3:2] == 2'd1) ? x__h150793 : 16'd0 ;
  assign MUX_dp1_wmi_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;
  assign MUX_dp1_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp1_wmi_addr$write_1__SEL_1 &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ;
  assign MUX_dp1_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 ;
  assign MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_77_ULE_4___d778 ;
  assign MUX_dp1_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;
  assign MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ;
  assign MUX_dp1_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;
  assign MUX_dp0_bml_lclBufsAR$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lbar &&
	     (IF_dp0_bml_dpControl_wget__408_BITS_1_TO_0_409_ETC___d2494 &&
	      !dp0_bml_lclBufStart ||
	      CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q18 &&
	      dp0_bml_lclBufStart) ;
  assign MUX_dp0_bml_lclBufsAR$write_1__VAL_1 =
	     (IF_dp0_bml_dpControl_wget__408_BITS_1_TO_0_409_ETC___d2494 &&
	      !dp0_bml_lclBufStart) ?
	       x__h75044 :
	       x__h75049 ;
  assign MUX_dp0_wmi_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;
  assign MUX_dp0_wmi_bufDwell$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 =
	     MUX_dp0_wmi_addr$write_1__SEL_1 &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ;
  assign MUX_dp0_wmi_rdActive$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 ;
  assign MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ;
  assign MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_935_ULE_4___d2936 ;
  assign MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_6 =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;
  assign MUX_dp0_tlp_outF$enq_1__SEL_8 =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  assign MUX_dp0_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__398_BIT_152_399_AND_NOT_dp0_ETC___d3431 ;
  assign MUX_dp1_tlp_mReqF$enq_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__241_BIT_152_242_AND_NOT_dp1_ETC___d1274 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_dp1_tlp_outDwRemain$write_1__SEL_2 &&
	     dp1_tlp_outDwRemain_200_ULE_4___d4985 ;
  assign MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_200_ULE_4___d4985 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       dp1_tlp_outDwRemain_200_ULE_4___d4985,
	       7'h02,
	       w_be__h104105,
	       dp1_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3 =
	     MUX_dp0_tlp_outDwRemain$write_1__SEL_2 &&
	     dp0_tlp_outDwRemain_358_ULE_4___d4675 ;
  assign MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     dp0_tlp_outDwRemain_358_ULE_4___d4675 &&
	     dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_7 =
	     { 1'd0,
	       dp0_tlp_outDwRemain_358_ULE_4___d4675,
	       7'h02,
	       w_be__h27532,
	       dp0_tlp_mRespF$D_OUT[127:0] } ;
  assign MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 ?
	       dp1_tlp_dmaPullRemainDWLen - dp1_tlp_dmaPullRemainDWSub :
	       dp1_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 ?
	       10'd0 :
	       dp1_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2 =
	     dp1_tlp_mesgComplReceived + y__h136475 ;
  assign MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__194_BITS_71_TO_62_219_ULE_1___d4497 ;
  assign MUX_dp1_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       dp1_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h104482 } ;
  assign MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 &&
	     dp1_tlp_dmaPullRemainDWLen_337_ULE_dp1_tlp_dma_ETC___d5144 ;
  assign MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_1 =
	     !dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 ||
	     !dp1_tlp_dmaPullRemainDWLen_337_ULE_dp1_tlp_dma_ETC___d5144 ;
  assign MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !dp0_tlp_mRespF_first__352_BITS_71_TO_62_377_ULE_1___d4452 ;
  assign MUX_dp0_tlp_outF$enq_1__VAL_6 =
	     { 1'd1,
	       dp0_tlp_mRespF$D_OUT[71:62] == 10'd1,
	       23'd196607,
	       w_data__h27909 } ;
  assign MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 ?
	       dp0_tlp_dmaPullRemainDWLen - dp0_tlp_dmaPullRemainDWSub :
	       dp0_tlp_dmaPullRemainDWLen - 10'd4 ;
  assign MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 =
	     dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 ?
	       10'd0 :
	       dp0_tlp_dmaPullRemainDWSub - 10'd4 ;
  assign MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 =
	     dp0_tlp_mesgComplReceived + y__h59911 ;
  assign MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 =
	     dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 &&
	     dp0_tlp_dmaPullRemainDWLen_494_ULE_dp0_tlp_dma_ETC___d4777 ;
  assign MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_1 =
	     !dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 ||
	     !dp0_tlp_dmaPullRemainDWLen_494_ULE_dp0_tlp_dma_ETC___d4777 ;
  assign MUX_dp1_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_32_ULE_4___d933 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp0_tlp_readStarted$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_090_ULE_4___d3091 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_1 =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ;
  assign MUX_dp1_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_dp1_bml_lbcf &&
	     (dp1_bml_lclBufDone_87_AND_IF_dp1_bml_dpControl_ETC___d4513 ||
	      NOT_dp1_bml_lclBufDone_87_91_AND_IF_dp1_bml_dp_ETC___d327) ;
  assign MUX_dp1_bml_lclBufsCF$write_1__VAL_1 =
	     dp1_bml_lclBufDone_87_AND_IF_dp1_bml_dpControl_ETC___d4513 ?
	       x__h151533 :
	       x__h151538 ;
  assign MUX_dp0_bml_lclBufsCF$write_1__SEL_1 =
	     WILL_FIRE_RL_dp0_bml_lbcf &&
	     (dp0_bml_lclBufDone_447_AND_IF_dp0_bml_dpContro_ETC___d4604 ||
	      NOT_dp0_bml_lclBufDone_447_451_AND_IF_dp0_bml__ETC___d2487) ;
  assign MUX_dp0_bml_lclBufsCF$write_1__VAL_1 =
	     dp0_bml_lclBufDone_447_AND_IF_dp0_bml_dpContro_ETC___d4604 ?
	       x__h74972 :
	       x__h74977 ;
  assign MUX_dp1_bram_memory_1$a_put_3__VAL_2 =
	     { IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235[7:0],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235[15:8],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235[23:16],
	       IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235[31:24] } ;
  assign MUX_dp1_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4547 ;
  assign MUX_dp1_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4548 ;
  assign MUX_dp1_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4602 ;
  assign MUX_dp1_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4549 ;
  assign MUX_dp0_bram_memory$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4575 ;
  assign MUX_dp0_bram_memory_1$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4572 ;
  assign MUX_dp0_bram_memory_2$a_put_1__SEL_2 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4573 ;
  assign MUX_dp0_bram_memory_3$a_put_1__SEL_3 =
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4574 ;
  assign MUX_dp1_bml_remBuf_value$write_1__VAL_2 =
	     dp1_bml_remBuf_value_90_EQ_dp1_bml_remBuf_modu_ETC___d5249 ?
	       16'd0 :
	       dp1_bml_remBuf_value + 16'd1 ;
  assign MUX_dp1_bml_remMesgAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_90_EQ_dp1_bml_remBuf_modu_ETC___d5249 ?
	       dp1_bml_mesgBase :
	       dp1_bml_remMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_remMetaAddr$write_1__VAL_2 =
	     dp1_bml_remBuf_value_90_EQ_dp1_bml_remBuf_modu_ETC___d5249 ?
	       dp1_bml_metaBase :
	       dp1_bml_remMetaAddr + dp1_bml_metaSize ;
  assign MUX_dp1_bml_fabBuf_value$write_1__VAL_2 =
	     dp1_bml_fabBuf_value_60_EQ_dp1_bml_fabBuf_modu_ETC___d5250 ?
	       16'd0 :
	       dp1_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_60_EQ_dp1_bml_fabBuf_modu_ETC___d5250 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_58_PLUS_dp1_bml_fabFlowSiz_ETC___d5142 ;
  assign MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_60_EQ_dp1_bml_fabBuf_modu_ETC___d5250 ?
	       dp1_bml_fabMesgBase :
	       dp1_bml_fabMesgAddr + dp1_bml_fabMesgSize ;
  assign MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 =
	     dp1_bml_fabBuf_value_60_EQ_dp1_bml_fabBuf_modu_ETC___d5250 ?
	       dp1_bml_fabMetaBase :
	       dp1_bml_fabMetaAddr + dp1_bml_fabMetaSize ;
  assign MUX_dp1_bml_crdBuf_value$write_1__VAL_2 =
	     dp1_bml_crdBuf_value_71_EQ_dp1_bml_crdBuf_modu_ETC___d5251 ?
	       16'd0 :
	       dp1_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp1_bml_fabFlowAddr$write_1__VAL_3 =
	     dp1_bml_crdBuf_value_71_EQ_dp1_bml_crdBuf_modu_ETC___d5251 ?
	       dp1_bml_fabFlowBase :
	       dp1_bml_fabFlowAddr_58_PLUS_dp1_bml_fabFlowSiz_ETC___d5142 ;
  assign MUX_dp0_bml_remBuf_value$write_1__VAL_2 =
	     dp0_bml_remBuf_value_350_EQ_dp0_bml_remBuf_mod_ETC___d5194 ?
	       16'd0 :
	       dp0_bml_remBuf_value + 16'd1 ;
  assign MUX_dp0_bml_remMesgAddr$write_1__VAL_1 =
	     dp0_bml_remBuf_value_350_EQ_dp0_bml_remBuf_mod_ETC___d5194 ?
	       dp0_bml_mesgBase :
	       dp0_bml_remMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_remMetaAddr$write_1__VAL_2 =
	     dp0_bml_remBuf_value_350_EQ_dp0_bml_remBuf_mod_ETC___d5194 ?
	       dp0_bml_metaBase :
	       dp0_bml_remMetaAddr + dp0_bml_metaSize ;
  assign MUX_dp1_bml_lclBuf_value$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_91_EQ_dp1_bml_lclBuf_modu_ETC___d5252 ?
	       16'd0 :
	       dp1_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_91_EQ_dp1_bml_lclBuf_modu_ETC___d5252 ?
	       dp1_bml_mesgBase :
	       dp1_bml_lclMesgAddr + dp1_bml_mesgSize ;
  assign MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 =
	     dp1_bml_lclBuf_value_91_EQ_dp1_bml_lclBuf_modu_ETC___d5252 ?
	       dp1_bml_metaBase :
	       dp1_bml_lclMetaAddr + dp1_bml_metaSize ;
  assign MUX_dp0_bml_fabBuf_value$write_1__VAL_2 =
	     dp0_bml_fabBuf_value_520_EQ_dp0_bml_fabBuf_mod_ETC___d5195 ?
	       16'd0 :
	       dp0_bml_fabBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_520_EQ_dp0_bml_fabBuf_mod_ETC___d5195 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_418_PLUS_dp0_bml_fabFlowSi_ETC___d5141 ;
  assign MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_520_EQ_dp0_bml_fabBuf_mod_ETC___d5195 ?
	       dp0_bml_fabMesgBase :
	       dp0_bml_fabMesgAddr + dp0_bml_fabMesgSize ;
  assign MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 =
	     dp0_bml_fabBuf_value_520_EQ_dp0_bml_fabBuf_mod_ETC___d5195 ?
	       dp0_bml_fabMetaBase :
	       dp0_bml_fabMetaAddr + dp0_bml_fabMetaSize ;
  assign MUX_dp0_bml_crdBuf_value$write_1__VAL_2 =
	     dp0_bml_crdBuf_value_531_EQ_dp0_bml_crdBuf_mod_ETC___d4609 ?
	       16'd0 :
	       dp0_bml_crdBuf_value + 16'd1 ;
  assign MUX_dp0_bml_fabFlowAddr$write_1__VAL_3 =
	     dp0_bml_crdBuf_value_531_EQ_dp0_bml_crdBuf_mod_ETC___d4609 ?
	       dp0_bml_fabFlowBase :
	       dp0_bml_fabFlowAddr_418_PLUS_dp0_bml_fabFlowSi_ETC___d5141 ;
  assign MUX_dp1_tlp_mRespF$enq_1__VAL_2 =
	     { 49'h0AAAAAAAAAAAA,
	       dp1_tlp_readReq$D_OUT[59:42],
	       dp1_tlp_readReq$D_OUT[28:19],
	       lowAddr__h122874,
	       byteCount__h122875,
	       dp1_tlp_readReq$D_OUT[10:0],
	       rresp_data__h122915 } ;
  assign MUX_dp0_bml_lclBuf_value$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_351_EQ_dp0_bml_lclBuf_mod_ETC___d5196 ?
	       16'd0 :
	       dp0_bml_lclBuf_value + 16'd1 ;
  assign MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_351_EQ_dp0_bml_lclBuf_mod_ETC___d5196 ?
	       dp0_bml_mesgBase :
	       dp0_bml_lclMesgAddr + dp0_bml_mesgSize ;
  assign MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 =
	     dp0_bml_lclBuf_value_351_EQ_dp0_bml_lclBuf_mod_ETC___d5196 ?
	       dp0_bml_metaBase :
	       dp0_bml_lclMetaAddr + dp0_bml_metaSize ;
  assign MUX_dp1_bram_memory$a_put_3__VAL_2 =
	     { IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224[7:0],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224[15:8],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224[23:16],
	       IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224[31:24] } ;
  assign MUX_dp1_bram_memory_2$a_put_3__VAL_2 =
	     { IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913[7:0],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913[15:8],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913[23:16],
	       IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913[31:24] } ;
  assign MUX_dp1_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914[7:0],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914[15:8],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914[23:16],
	       IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914[31:24] } ;
  assign MUX_dp0_tlp_mRespF$enq_1__VAL_2 =
	     { 49'h0AAAAAAAAAAAA,
	       dp0_tlp_readReq$D_OUT[59:42],
	       dp0_tlp_readReq$D_OUT[28:19],
	       lowAddr__h46310,
	       byteCount__h46311,
	       dp0_tlp_readReq$D_OUT[10:0],
	       rresp_data__h46351 } ;
  assign MUX_dp0_bram_memory$a_put_3__VAL_2 =
	     { IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832[7:0],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832[15:8],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832[23:16],
	       IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832[31:24] } ;
  assign MUX_dp0_bram_memory_1$a_put_3__VAL_2 =
	     { IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844[7:0],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844[15:8],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844[23:16],
	       IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844[31:24] } ;
  assign MUX_dp0_bram_memory_2$a_put_3__VAL_2 =
	     { IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848[7:0],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848[15:8],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848[23:16],
	       IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848[31:24] } ;
  assign MUX_dp0_bram_memory_3$a_put_3__VAL_3 =
	     { IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853[7:0],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853[15:8],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853[23:16],
	       IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853[31:24] } ;

  // inlined wires
  assign dp0_bram_serverAdapterA_outData_enqData$wget = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_s1[0] ;
  assign dp0_bram_serverAdapterA_outData_outData$wget = y_avValue__h46226 ;
  assign dp0_bram_serverAdapterA_outData_outData$whas =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_outData_enqData$wget = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_s1[0] ;
  assign dp0_bram_serverAdapterB_outData_outData$wget =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_outDataCore$D_OUT :
	       dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outData_outData$whas =
	     dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_1_s1[0] ;
  assign dp0_bram_serverAdapterA_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outData_outData$wget = y_avValue__h46246 ;
  assign dp0_bram_serverAdapterA_1_outData_outData$whas =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$wget =
	     dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_1_s1[0] ;
  assign dp0_bram_serverAdapterB_1_outData_outData$wget =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outData_outData$whas =
	     dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_2_s1[0] ;
  assign dp0_bram_serverAdapterA_2_outData_outData$wget = y_avValue__h46266 ;
  assign dp0_bram_serverAdapterA_2_outData_outData$whas =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$wget =
	     dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_2_s1[0] ;
  assign dp0_bram_serverAdapterB_2_outData_outData$wget =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outData_outData$whas =
	     dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_moveToOutFIFO &&
	     dp0_bram_serverAdapterA_3_s1[0] ;
  assign dp0_bram_serverAdapterA_3_outData_outData$wget = y_avValue__h46286 ;
  assign dp0_bram_serverAdapterA_3_outData_outData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq ||
	     dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ;
  assign dp0_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp0_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$wget =
	     dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_moveToOutFIFO &&
	     dp0_bram_serverAdapterB_3_s1[0] ;
  assign dp0_bram_serverAdapterB_3_outData_outData$wget =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outData_outData$whas =
	     dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign dp0_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp0_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp0_wci_wciReq$wget =
	     { cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_13_MAddrSpace,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_13_MAddr,
	       cp$wci_Vm_13_MData } ;
  assign dp0_wci_wciReq$whas = 1'd1 ;
  assign dp0_wci_reqF_r_enq$whas = CAN_FIRE_RL_dp0_wci_reqF_enq ;
  assign dp0_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp0_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wci_respF_dequeueing$whas = dp0_wci_respF_c_r != 2'd0 ;
  assign dp0_wci_wEdge$wget = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp0_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp0_wci_wci_cfwr_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign dp0_wci_wci_cfrd_pw$whas =
	     dp0_wci_reqF$EMPTY_N && dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp0_wti_wtiReq$wget = 67'h0 ;
  assign dp0_wci_wci_ctrl_pw$whas =
	     dp0_wci_reqF$EMPTY_N && !dp0_wci_reqF$D_OUT[56] &&
	     dp0_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp0_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp0_wci_cfrd || WILL_FIRE_RL_dp0_wci_cfwr ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_cfrd ||
	     WILL_FIRE_RL_dp0_wci_cfwr ;
  assign dp0_wci_wEdge$whas = WILL_FIRE_RL_dp0_wci_ctl_op_start ;
  assign dp0_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp0_wti_wtiReq$whas = 1'b0 ;
  assign dp0_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_dp0_bml_wci_ctrl_OrE ;
  assign dp0_tlp_remStart_1$wget = 1'd1 ;
  assign dp0_tlp_remDone_1$wget = 1'd1 ;
  assign dp0_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp0_tlp_nearBufReady_1$whas = CAN_FIRE_RL_dp0_rRdy_1 ;
  assign dp0_tlp_farBufReady_1$whas = CAN_FIRE_RL_dp0_rFRdy_1 ;
  assign dp0_tlp_creditReady_1$wget = 1'd1 ;
  assign dp0_tlp_creditReady_1$whas = CAN_FIRE_RL_dp0_rCredit_1 ;
  assign dp0_tlp_dpControl$wget = dp0_dpControl ;
  assign dp0_tlp_dpControl$whas = 1'd1 ;
  assign dp0_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag ;
  assign dp0_wmi_wmi_wmiReq$wget =
	     { wmiS0_MCmd,
	       wmiS0_MReqLast,
	       wmiS0_MReqInfo,
	       wmiS0_MAddrSpace,
	       wmiS0_MAddr,
	       wmiS0_MBurstLength } ;
  assign dp0_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp0_wmi_wmi_wmiMFlag$wget = wmiS0_arg_mFlag ;
  assign dp0_wmi_wmi_wmiDh$wget =
	     { wmiS0_MDataValid,
	       wmiS0_MDataLast,
	       wmiS0_MData,
	       wmiS0_MDataByteEn } ;
  assign dp0_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign dp0_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp0_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp0_dpControl[3:2] != 2'd1 && !dp0_wmi_mesgMeta[128] ||
	     dp0_dpControl[3:2] == 2'd1 && !dp0_wmi_mesgBufReady ;
  assign dp0_wmi_wmi_reqF_r_enq$whas =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_r_enq$whas =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF_r_deq$whas = CAN_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp0_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF_doResetDeq$whas = CAN_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp0_wmi_wmi_respF_enqueueing$whas = 1'b0 ;
  assign dp0_wmi_wmi_respF_x_wire$wget = 258'h0 ;
  assign dp0_wmi_wmi_respF_x_wire$whas = 1'b0 ;
  assign dp0_wmi_wmi_respF_dequeueing$whas =
	     CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;
  assign dp0_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp0_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_dp0_operating_actions ;
  assign dp0_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign dp0_wmi_wmi_peerIsReady_1$whas = wmiS0_MReset_n ;
  assign dp0_wmi_wmi_sThreadBusy_dw$wget = dp0_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_req ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp0_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp0_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp0_wmi_wmi_backpressure_dh ;
  assign dp0_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp0_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp0_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp0_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_dp0_rRdy ;
  assign dp0_wmi_dpControl$wget = dp0_dpControl ;
  assign dp0_wmi_dpControl$whas = 1'd1 ;
  assign dp0_wmi_nowW$wget = dp0_wti_nowReq[63:0] ;
  assign dp0_wmi_nowW$whas = 1'd1 ;
  assign dp0_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp0_bml_lclBufStart_1$whas = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufDone_1$whas = dp0_wmi_mesgDone ;
  assign dp0_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp0_bml_remStart_1$wget = 1'd1 ;
  assign dp0_bml_remStart_1$whas = dp0_tlp_remStart ;
  assign dp0_bml_remDone_1$wget = 1'd1 ;
  assign dp0_bml_fabDone_1$wget = 1'd1 ;
  assign dp0_bml_remDone_1$whas = dp0_tlp_remDone ;
  assign dp0_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] != 2'd1 ;
  assign dp0_bml_fabAvail_1$wget = 1'd1 ;
  assign dp0_bml_lclBuf_modulus_bw$wget = dp0_bml_lclBuf_modulus ;
  assign dp0_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp0_wci_cfwr &&
	     dp0_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp0_dpControl[1:0] == 2'd1 ;
  assign dp0_bml_lclBuf_incAction$whas = CAN_FIRE_RL_dp0_bml_cntLclDone ;
  assign dp0_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_remBuf_modulus_bw$wget = dp0_bml_remBuf_modulus ;
  assign dp0_bml_remBuf_incAction$whas = CAN_FIRE_RL_dp0_bml_cntRemDone ;
  assign dp0_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_fabBuf_modulus_bw$wget = dp0_bml_fabBuf_modulus ;
  assign dp0_bml_fabBuf_incAction$whas =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp0_bml_crdBuf_modulus_bw$wget = dp0_bml_crdBuf_modulus ;
  assign dp0_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_crdBuf_incAction$whas = WILL_FIRE_RL_dp0_bml_crdAdvance ;
  assign dp0_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp0_bml_dpControl$wget = dp0_dpControl ;
  assign dp0_wci_Es_mCmd_w$wget = cp$wci_Vm_13_MCmd ;
  assign dp0_bml_dpControl$whas = 1'd1 ;
  assign dp0_wci_Es_mCmd_w$whas = 1'd1 ;
  assign dp0_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_13_MAddrSpace ;
  assign dp0_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp0_wci_Es_mAddr_w$whas = 1'd1 ;
  assign dp0_wci_Es_mAddr_w$wget = cp$wci_Vm_13_MAddr ;
  assign dp0_wci_Es_mData_w$wget = cp$wci_Vm_13_MData ;
  assign dp0_wci_Es_mData_w$whas = 1'd1 ;
  assign dp0_wci_Es_mByteEn_w$wget = cp$wci_Vm_13_MByteEn ;
  assign dp0_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mCmd_w$wget = wmiS0_MCmd ;
  assign dp0_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mReqLast_w$whas = wmiS0_MReqLast ;
  assign dp0_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mReqInfo_w$wget = wmiS0_MReqInfo ;
  assign dp0_wmi_Es_mAddrSpace_w$wget = wmiS0_MAddrSpace ;
  assign dp0_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mAddr_w$wget = wmiS0_MAddr ;
  assign dp0_wmi_Es_mBurstLength_w$wget = wmiS0_MBurstLength ;
  assign dp0_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mDataValid_w$whas = wmiS0_MDataValid ;
  assign dp0_wmi_Es_mData_w$wget = wmiS0_MData ;
  assign dp0_wmi_Es_mDataLast_w$whas = wmiS0_MDataLast ;
  assign dp0_wmi_Es_mData_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign dp0_wmi_Es_mDataByteEn_w$wget = wmiS0_MDataByteEn ;
  assign dp0_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign dp1_bram_serverAdapterA_outData_enqData$wget = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_s1[0] ;
  assign dp1_bram_serverAdapterA_outData_outData$wget =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_outDataCore$D_OUT :
	       dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outData_outData$whas =
	     dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_outData_enqData$wget = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_s1[0] ;
  assign dp1_bram_serverAdapterB_outData_outData$wget =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_outDataCore$D_OUT :
	       dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outData_outData$whas =
	     dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_1_s1[0] ;
  assign dp1_bram_serverAdapterA_1_outData_outData$wget =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outData_outData$whas =
	     dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$wget =
	     dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_1_s1[0] ;
  assign dp1_bram_serverAdapterB_1_outData_outData$wget =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_1_outDataCore$D_OUT :
	       dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outData_outData$whas =
	     dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_1_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_1_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_1_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_1_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_2_s1[0] ;
  assign dp1_bram_serverAdapterA_2_outData_outData$wget =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outData_outData$whas =
	     dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$wget =
	     dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_2_s1[0] ;
  assign dp1_bram_serverAdapterB_2_outData_outData$wget =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_2_outDataCore$D_OUT :
	       dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outData_outData$whas =
	     dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_2_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_2_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_2_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_2_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterA_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_moveToOutFIFO &&
	     dp1_bram_serverAdapterA_3_s1[0] ;
  assign dp1_bram_serverAdapterA_3_outData_outData$wget =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterA_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outData_outData$whas =
	     dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterA_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterA_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterA_3_cnt_3$whas = 1'b0 ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$wget =
	     dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outData_enqData$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_moveToOutFIFO &&
	     dp1_bram_serverAdapterB_3_s1[0] ;
  assign dp1_bram_serverAdapterB_3_outData_outData$wget =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ?
	       dp1_bram_serverAdapterB_3_outDataCore$D_OUT :
	       dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outData_outData$whas =
	     dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_setFirstEnq ;
  assign dp1_bram_serverAdapterB_3_cnt_1$wget = 3'd1 ;
  assign dp1_bram_serverAdapterB_3_cnt_2$wget = 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_3$wget = 3'h0 ;
  assign dp1_bram_serverAdapterB_3_cnt_3$whas = 1'b0 ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$wget =
	     dp1_wmi_wmi_dhF_countReg > 2'd1 ;
  assign dp1_wci_wciReq$wget =
	     { cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_14_MAddrSpace,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_14_MAddr,
	       cp$wci_Vm_14_MData } ;
  assign dp1_wci_wciReq$whas = 1'd1 ;
  assign dp1_wci_reqF_r_enq$whas = CAN_FIRE_RL_dp1_wci_reqF_enq ;
  assign dp1_wci_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wci_respF_dequeueing$whas = dp1_wci_respF_c_r != 2'd0 ;
  assign dp1_wci_wEdge$wget = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_sThreadBusy_pw$whas = 1'b0 ;
  assign dp1_wci_sFlagReg_1$wget = 1'b0 ;
  assign dp1_wci_sFlagReg_1$whas = 1'b0 ;
  assign dp1_wci_wci_cfwr_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd1 ;
  assign dp1_wci_wci_cfrd_pw$whas =
	     dp1_wci_reqF$EMPTY_N && dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp1_wci_wci_ctrl_pw$whas =
	     dp1_wci_reqF$EMPTY_N && !dp1_wci_reqF$D_OUT[56] &&
	     dp1_wci_reqF$D_OUT[59:57] == 3'd2 ;
  assign dp1_wci_reqF_r_deq$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_respF_enqueueing$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd || WILL_FIRE_RL_dp1_wci_cfwr ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_respF_x_wire$whas =
	     WILL_FIRE_RL_dp1_wci_cfrd ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_cfwr ;
  assign dp1_wci_wEdge$whas = WILL_FIRE_RL_dp1_wci_ctl_op_start ;
  assign dp1_wci_ctlAckReg_1$wget = 1'd1 ;
  assign dp1_wci_ctlAckReg_1$whas =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_wci_ctrl_EiI ||
	     WILL_FIRE_RL_dp1_bml_wci_ctrl_OrE ;
  assign dp1_wti_wtiReq$wget = 67'h0 ;
  assign dp1_wti_wtiReq$whas = 1'b0 ;
  assign dp1_tlp_remStart_1$wget = 1'd1 ;
  assign dp1_tlp_remDone_1$wget = 1'd1 ;
  assign dp1_tlp_nearBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_nearBufReady_1$whas = CAN_FIRE_RL_dp1_rRdy_1 ;
  assign dp1_tlp_farBufReady_1$wget = 1'd1 ;
  assign dp1_tlp_farBufReady_1$whas = CAN_FIRE_RL_dp1_rFRdy_1 ;
  assign dp1_tlp_creditReady_1$wget = 1'd1 ;
  assign dp1_tlp_dpControl$wget = dp1_dpControl ;
  assign dp1_tlp_creditReady_1$whas = CAN_FIRE_RL_dp1_rCredit_1 ;
  assign dp1_tlp_dpControl$whas = 1'd1 ;
  assign dp1_tlp_pullTagMatch_1$whas =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag ;
  assign dp1_wmi_wmi_wmiReq$wget =
	     { wmiS1_MCmd,
	       wmiS1_MReqLast,
	       wmiS1_MReqInfo,
	       wmiS1_MAddrSpace,
	       wmiS1_MAddr,
	       wmiS1_MBurstLength } ;
  assign dp1_wmi_wmi_wmiReq$whas = 1'd1 ;
  assign dp1_wmi_wmi_wmiMFlag$wget = wmiS1_arg_mFlag ;
  assign dp1_wmi_wmi_wmiMFlag$whas = 1'd1 ;
  assign dp1_wmi_wmi_wmiDh$wget =
	     { wmiS1_MDataValid,
	       wmiS1_MDataLast,
	       wmiS1_MData,
	       wmiS1_MDataByteEn } ;
  assign dp1_wmi_wmi_wmiDh$whas = 1'd1 ;
  assign dp1_wmi_wmi_forceSThreadBusy_pw$whas =
	     dp1_dpControl[3:2] != 2'd1 && !dp1_wmi_mesgMeta[128] ||
	     dp1_dpControl[3:2] == 2'd1 && !dp1_wmi_mesgBufReady ;
  assign dp1_wmi_wmi_reqF_r_enq$whas =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_reqF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_reqF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF_r_enq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_r_enq$whas =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF_r_deq$whas = CAN_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_r_clr$whas = 1'b0 ;
  assign dp1_wmi_wmi_dhF_doResetDeq$whas = CAN_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF_doResetEnq$whas =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF_doResetClr$whas = 1'b0 ;
  assign dp1_wmi_wmi_respF_enqueueing$whas = 1'b0 ;
  assign dp1_wmi_wmi_respF_x_wire$whas = 1'b0 ;
  assign dp1_wmi_wmi_respF_x_wire$wget = 258'h0 ;
  assign dp1_wmi_wmi_respF_dequeueing$whas =
	     CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;
  assign dp1_wmi_wmi_operateD_1$wget = 1'd1 ;
  assign dp1_wmi_wmi_operateD_1$whas = CAN_FIRE_RL_dp1_operating_actions ;
  assign dp1_wmi_wmi_peerIsReady_1$whas = wmiS1_MReset_n ;
  assign dp1_wmi_wmi_peerIsReady_1$wget = 1'd1 ;
  assign dp1_wmi_wmi_sThreadBusy_dw$wget = dp1_wmi_wmi_reqF_countReg > 2'd1 ;
  assign dp1_wmi_wmi_sThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_req ;
  assign dp1_wmi_wmi_sDataThreadBusy_dw$whas =
	     CAN_FIRE_RL_dp1_wmi_wmi_backpressure_dh ;
  assign dp1_wmi_mesgStart_1$wget = 1'd1 ;
  assign dp1_wmi_mesgDone_1$wget = 1'd1 ;
  assign dp1_wmi_mesgBufReady_1$whas = CAN_FIRE_RL_dp1_rRdy ;
  assign dp1_wmi_mesgBufReady_1$wget = 1'd1 ;
  assign dp1_wmi_dpControl$wget = dp1_dpControl ;
  assign dp1_bml_remBuf_modulus_bw$wget = dp1_bml_remBuf_modulus ;
  assign dp1_wmi_dpControl$whas = 1'd1 ;
  assign dp1_wmi_nowW$wget = dp1_wti_nowReq[63:0] ;
  assign dp1_wmi_nowW$whas = 1'd1 ;
  assign dp1_bml_lclBufStart_1$wget = 1'd1 ;
  assign dp1_bml_lclBufStart_1$whas = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufDone_1$wget = 1'd1 ;
  assign dp1_bml_lclBufDone_1$whas = dp1_wmi_mesgDone ;
  assign dp1_bml_remStart_1$wget = 1'd1 ;
  assign dp1_bml_remStart_1$whas = dp1_tlp_remStart ;
  assign dp1_bml_remDone_1$wget = 1'd1 ;
  assign dp1_bml_remDone_1$whas = dp1_tlp_remDone ;
  assign dp1_bml_fabDone_1$wget = 1'd1 ;
  assign dp1_bml_fabDone_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] != 2'd1 ;
  assign dp1_bml_fabAvail_1$wget = 1'd1 ;
  assign dp1_bml_fabAvail_1$whas =
	     WILL_FIRE_RL_dp1_wci_cfwr &&
	     dp1_wci_reqF$D_OUT[39:32] == 8'h18 &&
	     dp1_dpControl[1:0] == 2'd1 ;
  assign dp1_bml_lclBuf_modulus_bw$wget = dp1_bml_lclBuf_modulus ;
  assign dp1_bml_lclBuf_incAction$whas = CAN_FIRE_RL_dp1_bml_cntLclDone ;
  assign dp1_bml_lclBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_remBuf_incAction$whas = CAN_FIRE_RL_dp1_bml_cntRemDone ;
  assign dp1_bml_remBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_fabBuf_modulus_bw$wget = dp1_bml_fabBuf_modulus ;
  assign dp1_bml_fabBuf_incAction$whas =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ;
  assign dp1_bml_fabBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_crdBuf_modulus_bw$wget = dp1_bml_crdBuf_modulus ;
  assign dp1_bml_crdBuf_incAction$whas = WILL_FIRE_RL_dp1_bml_crdAdvance ;
  assign dp1_bml_crdBuf_decAction$whas = 1'b0 ;
  assign dp1_bml_dpControl$wget = dp1_dpControl ;
  assign dp1_bml_dpControl$whas = 1'd1 ;
  assign dp1_wci_Es_mCmd_w$wget = cp$wci_Vm_14_MCmd ;
  assign dp1_wci_Es_mCmd_w$whas = 1'd1 ;
  assign dp1_wci_Es_mAddrSpace_w$wget = cp$wci_Vm_14_MAddrSpace ;
  assign dp1_wci_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp1_wci_Es_mAddr_w$wget = cp$wci_Vm_14_MAddr ;
  assign dp1_wci_Es_mAddr_w$whas = 1'd1 ;
  assign dp1_wci_Es_mData_w$wget = cp$wci_Vm_14_MData ;
  assign dp1_wci_Es_mData_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mAddr_w$wget = wmiS1_MAddr ;
  assign dp1_wci_Es_mByteEn_w$wget = cp$wci_Vm_14_MByteEn ;
  assign dp1_wci_Es_mByteEn_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mCmd_w$wget = wmiS1_MCmd ;
  assign dp1_wmi_Es_mCmd_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mReqLast_w$whas = wmiS1_MReqLast ;
  assign dp1_wmi_Es_mReqInfo_w$wget = wmiS1_MReqInfo ;
  assign dp1_wmi_Es_mReqInfo_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mAddrSpace_w$wget = wmiS1_MAddrSpace ;
  assign dp1_wmi_Es_mAddrSpace_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mAddr_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mBurstLength_w$wget = wmiS1_MBurstLength ;
  assign dp1_wmi_Es_mBurstLength_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mDataValid_w$whas = wmiS1_MDataValid ;
  assign dp1_wmi_Es_mDataLast_w$whas = wmiS1_MDataLast ;
  assign dp1_wmi_Es_mData_w$wget = wmiS1_MData ;
  assign dp1_wmi_Es_mData_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mDataInfo_w$whas = 1'd1 ;
  assign dp1_wmi_Es_mDataByteEn_w$wget = wmiS1_MDataByteEn ;
  assign itc0_wti_sThreadBusy_pw$whas = dp0_wti_isReset$VAL ;
  assign dp1_wmi_Es_mDataByteEn_w$whas = 1'd1 ;
  assign itc1_wti_sThreadBusy_pw$whas = dp1_wti_isReset$VAL ;
  assign dp0_wci_respF_x_wire$wget = MUX_dp0_wci_respF_q_0$write_1__VAL_2 ;
  assign dp1_wci_respF_x_wire$wget = MUX_dp1_wci_respF_q_0$write_1__VAL_2 ;
  assign dp1_bram_serverAdapterB_writeWithResp$wget =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign dp1_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$wget =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign dp1_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$wget =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign dp1_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$wget =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign dp1_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h81701[1] || ab__h81701[0]) ;
  assign dp1_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h81701[1] || ab__h81701[0] } ;
  assign dp1_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h84630[1] || ab__h84630[0]) ;
  assign dp1_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h84630[1] || ab__h84630[0] } ;
  assign dp1_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h87559[1] || ab__h87559[0]) ;
  assign dp1_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h87559[1] || ab__h87559[0] } ;
  assign dp1_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h90488[1] || ab__h90488[0]) ;
  assign dp1_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h90488[1] || ab__h90488[0] } ;
  assign dp1_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp1_wmi_getRequest ;
  assign dp1_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp1_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp1_wmi_getRequest && !dp1_wmi_mesgBusy ;
  assign dp1_bram_serverAdapterB_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterB_cnt_2$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterB_1_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterB_1_cnt_2$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterB_2_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterB_2_cnt_2$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterB_3_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterB_3_cnt_2$whas =
	     CAN_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterA_cnt_2$whas =
	     dp1_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterA_1_cnt_2$whas =
	     dp1_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterA_2_cnt_2$whas =
	     dp1_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp1_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ;
  assign dp1_bram_serverAdapterA_3_cnt_2$whas =
	     dp1_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp1_tlp_remDone_1$whas =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;
  assign dp1_tlp_pullTagMatch_1$wget =
	     tagm__h113997 == dp1_tlp_inF$D_OUT[47:40] &&
	     dp1_tlp_inF_first__241_BITS_63_TO_56_387_EQ_pc_ETC___d1396 ;
  assign dp1_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ;
  assign dp0_bram_serverAdapterB_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_stageReadResponseAlways &&
	     (!ab__h5101[1] || ab__h5101[0]) ;
  assign dp0_bram_serverAdapterB_writeWithResp$wget = ab__h5101 ;
  assign dp0_bram_serverAdapterB_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_s1_1$wget =
	     { 1'd1, !ab__h5101[1] || ab__h5101[0] } ;
  assign dp0_bram_serverAdapterB_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_1_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_stageReadResponseAlways &&
	     (!ab__h8030[1] || ab__h8030[0]) ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$wget = ab__h8030 ;
  assign dp0_bram_serverAdapterB_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_1_s1_1$wget =
	     { 1'd1, !ab__h8030[1] || ab__h8030[0] } ;
  assign dp0_bram_serverAdapterB_1_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_2_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_stageReadResponseAlways &&
	     (!ab__h10959[1] || ab__h10959[0]) ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$wget = ab__h10959 ;
  assign dp0_bram_serverAdapterB_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_2_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_2_s1_1$wget =
	     { 1'd1, !ab__h10959[1] || ab__h10959[0] } ;
  assign dp0_bram_serverAdapterB_3_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	     (!ab__h13888[1] || ab__h13888[0]) ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$wget = ab__h13888 ;
  assign dp0_bram_serverAdapterB_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterB_3_s1_1$wget =
	     { 1'd1, !ab__h13888[1] || ab__h13888[0] } ;
  assign dp0_bram_serverAdapterB_3_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_wmi_mesgDone_1$whas =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_wmi_reqF_r_deq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_reqF_doResetDeq$whas = WILL_FIRE_RL_dp0_wmi_getRequest ;
  assign dp0_wmi_wmi_mFlagF_r_deq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_wmi_mesgStart_1$whas =
	     WILL_FIRE_RL_dp0_wmi_getRequest && !dp0_wmi_mesgBusy ;
  assign dp0_wmi_wmi_mFlagF_doResetDeq$whas =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;
  assign dp0_bram_serverAdapterB_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterB_cnt_2$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterB_1_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterB_1_cnt_2$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterB_2_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterB_2_cnt_2$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterB_3_outData_deqCalled$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterB_3_cnt_2$whas =
	     CAN_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_bram_serverAdapterA_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterA_cnt_2$whas =
	     dp0_bram_serverAdapterA_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_1_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterA_1_cnt_2$whas =
	     dp0_bram_serverAdapterA_1_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_2_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterA_2_cnt_2$whas =
	     dp0_bram_serverAdapterA_2_outData_deqCalled$whas ;
  assign dp0_bram_serverAdapterA_3_outData_deqCalled$whas =
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ;
  assign dp0_bram_serverAdapterA_3_cnt_2$whas =
	     dp0_bram_serverAdapterA_3_outData_deqCalled$whas ;
  assign dp0_tlp_remDone_1$whas =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  assign dp0_tlp_pullTagMatch_1$wget =
	     tagm__h37433 == dp0_tlp_inF$D_OUT[47:40] &&
	     dp0_tlp_inF_first__398_BITS_63_TO_56_544_EQ_pc_ETC___d3551 ;
  assign dp0_tlp_remStart_1$whas =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;
  assign dp1_bram_serverAdapterA_writeWithResp$wget =
	     (MUX_dp1_bram_memory$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$wget =
	     (MUX_dp1_bram_memory_1$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$wget =
	     (MUX_dp1_bram_memory_2$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$wget =
	     (MUX_dp1_bram_memory_3$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign dp1_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h80301[1] || ab__h80301[0] } ;
  assign dp1_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h83232[1] || ab__h83232[0] } ;
  assign dp1_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h86161[1] || ab__h86161[0] } ;
  assign dp1_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h89090[1] || ab__h89090[0] } ;
  assign dp0_bram_serverAdapterA_writeWithResp$wget = ab__h3701 ;
  assign dp0_bram_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h3701[1] || ab__h3701[0] } ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$wget = ab__h6632 ;
  assign dp0_bram_serverAdapterA_1_s1_1$wget =
	     { 1'd1, !ab__h6632[1] || ab__h6632[0] } ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$wget = ab__h9561 ;
  assign dp0_bram_serverAdapterA_2_s1_1$wget =
	     { 1'd1, !ab__h9561[1] || ab__h9561[0] } ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$wget = ab__h12490 ;
  assign dp0_bram_serverAdapterA_3_s1_1$wget =
	     { 1'd1, !ab__h12490[1] || ab__h12490[0] } ;
  assign dp1_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h80301[1] || ab__h80301[0]) ;
  assign dp1_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h83232[1] || ab__h83232[0]) ;
  assign dp1_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h86161[1] || ab__h86161[0]) ;
  assign dp1_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h89090[1] || ab__h89090[0]) ;
  assign dp1_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp1_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h3701[1] || ab__h3701[0]) ;
  assign dp0_bram_serverAdapterA_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_1_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	     (!ab__h6632[1] || ab__h6632[0]) ;
  assign dp0_bram_serverAdapterA_1_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_1_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_2_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	     (!ab__h9561[1] || ab__h9561[0]) ;
  assign dp0_bram_serverAdapterA_2_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_2_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_3_cnt_1$whas =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	     (!ab__h12490[1] || ab__h12490[0]) ;
  assign dp0_bram_serverAdapterA_3_writeWithResp$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;
  assign dp0_bram_serverAdapterA_3_s1_1$whas =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways ;

  // register chompCnt
  assign chompCnt$D_IN = chompCnt + 8'd1 ;
  assign chompCnt$EN = sm2$RDY_c1_request_get && chompCnt != 8'd255 ;

  // register dp0_bml_crdBuf_modulus
  assign dp0_bml_crdBuf_modulus$D_IN = dp0_bml_lclNumBufs - 16'd1 ;
  assign dp0_bml_crdBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_crdBuf_value
  assign dp0_bml_crdBuf_value$EN =
	     WILL_FIRE_RL_dp0_bml_crdAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_crdBuf_value$write_1__VAL_2 ;

  // register dp0_bml_fabAvail
  assign dp0_bml_fabAvail$D_IN = dp0_bml_fabAvail_1$whas ;
  assign dp0_bml_fabAvail$EN = 1'd1 ;

  // register dp0_bml_fabBuf_modulus
  assign dp0_bml_fabBuf_modulus$D_IN = dp0_bml_fabNumBufs - 16'd1 ;
  assign dp0_bml_fabBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_fabBuf_value
  assign dp0_bml_fabBuf_value$EN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_fabBuf_value$write_1__VAL_2 ;

  // register dp0_bml_fabBufsAvail
  assign dp0_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp0_bml_fba &&
	     (dp0_bml_fabAvail && !dp0_bml_remStart ||
	      !dp0_bml_fabAvail && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_fabBufsAvail$D_IN =
	     MUX_dp0_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp0_bml_fabBufsAvail$write_1__VAL_2 ;

  // register dp0_bml_fabDone
  assign dp0_bml_fabDone$D_IN = dp0_bml_fabDone_1$whas ;
  assign dp0_bml_fabDone$EN = 1'd1 ;

  // register dp0_bml_fabFlowAddr
  assign dp0_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_crdAdvance ;
  always@(MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_bml_initAccumulators or
	  dp0_bml_fabFlowBase or
	  WILL_FIRE_RL_dp0_bml_crdAdvance or
	  MUX_dp0_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bml_fabFlowAddr$write_1__SEL_1:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp0_bml_initAccumulators:
	  dp0_bml_fabFlowAddr$D_IN = dp0_bml_fabFlowBase;
      WILL_FIRE_RL_dp0_bml_crdAdvance:
	  dp0_bml_fabFlowAddr$D_IN = MUX_dp0_bml_fabFlowAddr$write_1__VAL_3;
      default: dp0_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register dp0_bml_fabFlowBase
  assign dp0_bml_fabFlowBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp0_bml_fabFlowSize
  assign dp0_bml_fabFlowSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp0_bml_fabMesgAddr
  assign dp0_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_fabMesgAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMesgAddr$write_1__VAL_1 :
	       dp0_bml_fabMesgBase ;

  // register dp0_bml_fabMesgBase
  assign dp0_bml_fabMesgBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp0_bml_fabMesgSize
  assign dp0_bml_fabMesgSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp0_bml_fabMetaAddr
  assign dp0_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance && dp0_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_fabMetaAddr$D_IN =
	     MUX_dp0_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp0_bml_fabMetaAddr$write_1__VAL_1 :
	       dp0_bml_fabMetaBase ;

  // register dp0_bml_fabMetaBase
  assign dp0_bml_fabMetaBase$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp0_bml_fabMetaSize
  assign dp0_bml_fabMetaSize$D_IN = dp0_wci_reqF$D_OUT[31:0] ;
  assign dp0_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp0_bml_fabNumBufs
  assign dp0_bml_fabNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp0_bml_lclBufDone
  assign dp0_bml_lclBufDone$D_IN = dp0_wmi_mesgDone ;
  assign dp0_bml_lclBufDone$EN = 1'd1 ;

  // register dp0_bml_lclBufStart
  assign dp0_bml_lclBufStart$D_IN = dp0_wmi_mesgStart ;
  assign dp0_bml_lclBufStart$EN = 1'd1 ;

  // register dp0_bml_lclBuf_modulus
  assign dp0_bml_lclBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_lclBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBuf_value
  assign dp0_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_dp0_bml_cntLclDone ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_lclBuf_value$write_1__VAL_2 ;

  // register dp0_bml_lclBufsAR
  assign dp0_bml_lclBufsAR$D_IN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsAR$write_1__VAL_2 ;
  assign dp0_bml_lclBufsAR$EN =
	     MUX_dp0_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclBufsCF
  assign dp0_bml_lclBufsCF$D_IN =
	     MUX_dp0_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp0_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp0_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_dp0_bml_lbcf &&
	     (dp0_bml_lclBufDone_447_AND_IF_dp0_bml_dpContro_ETC___d4604 ||
	      NOT_dp0_bml_lclBufDone_447_451_AND_IF_dp0_bml__ETC___d2487) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_lclCredit
  assign dp0_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp0_bml_lcredit &&
	     (dp0_bml_lclBufDone && !dp0_bml_remStart ||
	      !dp0_bml_lclBufDone && dp0_bml_remStart) ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_lclCredit$D_IN =
	     MUX_dp0_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp0_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;

  // register dp0_bml_lclDones
  assign dp0_bml_lclDones$D_IN = dp0_bml_lclDones + 16'd1 ;
  assign dp0_bml_lclDones$EN = CAN_FIRE_RL_dp0_bml_cntLclDone ;

  // register dp0_bml_lclMesgAddr
  assign dp0_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;
  assign dp0_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_mesgBase :
	       MUX_dp0_bml_lclMesgAddr$write_1__VAL_2 ;

  // register dp0_bml_lclMetaAddr
  assign dp0_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_lclAdvance ;
  assign dp0_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_lclMetaAddr$write_1__VAL_2 ;

  // register dp0_bml_lclNumBufs
  assign dp0_bml_lclNumBufs$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp0_bml_lclStarts
  assign dp0_bml_lclStarts$D_IN = dp0_bml_lclStarts + 16'd1 ;
  assign dp0_bml_lclStarts$EN = CAN_FIRE_RL_dp0_bml_cntLclStart ;

  // register dp0_bml_mesgBase
  assign dp0_bml_mesgBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp0_bml_mesgSize
  assign dp0_bml_mesgSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp0_bml_metaBase
  assign dp0_bml_metaBase$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaBase$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp0_bml_metaSize
  assign dp0_bml_metaSize$D_IN = dp0_wci_reqF$D_OUT[15:0] ;
  assign dp0_bml_metaSize$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp0_bml_remBuf_modulus
  assign dp0_bml_remBuf_modulus$D_IN = dp0_bml_crdBuf_modulus$D_IN ;
  assign dp0_bml_remBuf_modulus$EN = CAN_FIRE_RL_dp0_bml_initAccumulators ;

  // register dp0_bml_remBuf_value
  assign dp0_bml_remBuf_value$EN =
	     CAN_FIRE_RL_dp0_bml_cntRemDone ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp0_bml_remBuf_value$write_1__VAL_2 ;

  // register dp0_bml_remDone
  assign dp0_bml_remDone$D_IN = dp0_tlp_remDone ;
  assign dp0_bml_remDone$EN = 1'd1 ;

  // register dp0_bml_remDones
  assign dp0_bml_remDones$D_IN = dp0_bml_remDones + 16'd1 ;
  assign dp0_bml_remDones$EN = CAN_FIRE_RL_dp0_bml_cntRemDone ;

  // register dp0_bml_remMesgAddr
  assign dp0_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp0_bml_remAdvance ||
	     WILL_FIRE_RL_dp0_bml_initAccumulators ;
  assign dp0_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_remAdvance ?
	       MUX_dp0_bml_remMesgAddr$write_1__VAL_1 :
	       dp0_bml_mesgBase ;

  // register dp0_bml_remMetaAddr
  assign dp0_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ||
	     WILL_FIRE_RL_dp0_bml_remAdvance ;
  assign dp0_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp0_bml_initAccumulators ?
	       dp0_bml_metaBase :
	       MUX_dp0_bml_remMetaAddr$write_1__VAL_2 ;

  // register dp0_bml_remStart
  assign dp0_bml_remStart$D_IN = dp0_tlp_remStart ;
  assign dp0_bml_remStart$EN = 1'd1 ;

  // register dp0_bml_remStarts
  assign dp0_bml_remStarts$D_IN = dp0_bml_remStarts + 16'd1 ;
  assign dp0_bml_remStarts$EN = CAN_FIRE_RL_dp0_bml_cntRemStart ;

  // register dp0_bram_serverAdapterA_1_cnt
  assign dp0_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_1_cnt_finalAdd ;
  assign dp0_bram_serverAdapterA_1_cnt$D_IN =
	     dp0_bram_serverAdapterA_1_cnt_083_PLUS_IF_dp0__ETC___d4282 ;

  // register dp0_bram_serverAdapterA_1_s1
  assign dp0_bram_serverAdapterA_1_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_1_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_1_s1_1$wget[1],
	       dp0_bram_serverAdapterA_1_s1_1$wget[0] } ;

  // register dp0_bram_serverAdapterA_2_cnt
  assign dp0_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_2_cnt_finalAdd ;
  assign dp0_bram_serverAdapterA_2_cnt$D_IN =
	     dp0_bram_serverAdapterA_2_cnt_085_PLUS_IF_dp0__ETC___d4170 ;

  // register dp0_bram_serverAdapterA_2_s1
  assign dp0_bram_serverAdapterA_2_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_2_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_2_s1_1$wget[1],
	       dp0_bram_serverAdapterA_2_s1_1$wget[0] } ;

  // register dp0_bram_serverAdapterA_3_cnt
  assign dp0_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_3_cnt_finalAdd ;
  assign dp0_bram_serverAdapterA_3_cnt$D_IN =
	     dp0_bram_serverAdapterA_3_cnt_087_PLUS_IF_dp0__ETC___d4058 ;

  // register dp0_bram_serverAdapterA_3_s1
  assign dp0_bram_serverAdapterA_3_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_3_s1_1$wget[1],
	       dp0_bram_serverAdapterA_3_s1_1$wget[0] } ;

  // register dp0_bram_serverAdapterA_cnt
  assign dp0_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterA_cnt_finalAdd ;
  assign dp0_bram_serverAdapterA_cnt$D_IN =
	     dp0_bram_serverAdapterA_cnt_081_PLUS_IF_dp0_br_ETC___d4394 ;

  // register dp0_bram_serverAdapterA_s1
  assign dp0_bram_serverAdapterA_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterA_stageReadResponseAlways &&
	       dp0_bram_serverAdapterA_s1_1$wget[1],
	       dp0_bram_serverAdapterA_s1_1$wget[0] } ;

  // register dp0_bram_serverAdapterB_1_cnt
  assign dp0_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_1_cnt_finalAdd ;
  assign dp0_bram_serverAdapterB_1_cnt$D_IN =
	     dp0_bram_serverAdapterB_1_cnt_651_PLUS_IF_dp0__ETC___d4226 ;

  // register dp0_bram_serverAdapterB_1_s1
  assign dp0_bram_serverAdapterB_1_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_1_s1_1$wget[1],
	       dp0_bram_serverAdapterB_1_s1_1$wget[0] } ;

  // register dp0_bram_serverAdapterB_2_cnt
  assign dp0_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_2_cnt_finalAdd ;
  assign dp0_bram_serverAdapterB_2_cnt$D_IN =
	     dp0_bram_serverAdapterB_2_cnt_653_PLUS_IF_dp0__ETC___d4114 ;

  // register dp0_bram_serverAdapterB_2_s1
  assign dp0_bram_serverAdapterB_2_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_2_s1_1$wget[1],
	       dp0_bram_serverAdapterB_2_s1_1$wget[0] } ;

  // register dp0_bram_serverAdapterB_3_cnt
  assign dp0_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_cnt_finalAdd ;
  assign dp0_bram_serverAdapterB_3_cnt$D_IN =
	     dp0_bram_serverAdapterB_3_cnt_656_PLUS_IF_dp0__ETC___d4002 ;

  // register dp0_bram_serverAdapterB_3_s1
  assign dp0_bram_serverAdapterB_3_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_3_s1_1$wget[1],
	       dp0_bram_serverAdapterB_3_s1_1$wget[0] } ;

  // register dp0_bram_serverAdapterB_cnt
  assign dp0_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_cnt_finalAdd ;
  assign dp0_bram_serverAdapterB_cnt$D_IN =
	     dp0_bram_serverAdapterB_cnt_649_PLUS_IF_dp0_br_ETC___d4338 ;

  // register dp0_bram_serverAdapterB_s1
  assign dp0_bram_serverAdapterB_s1$EN = 1'd1 ;
  assign dp0_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp0_bram_serverAdapterB_s1_1$wget[1],
	       dp0_bram_serverAdapterB_s1_1$wget[0] } ;

  // register dp0_dpControl
  assign dp0_dpControl$D_IN = dp0_wci_reqF$D_OUT[3:0] ;
  assign dp0_dpControl$EN =
	     WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp0_tlp_creditReady
  assign dp0_tlp_creditReady$D_IN = CAN_FIRE_RL_dp0_rCredit_1 ;
  assign dp0_tlp_creditReady$EN = 1'd1 ;

  // register dp0_tlp_debugBdata
  assign dp0_tlp_debugBdata$D_IN =
	     { y_avValue__h46286[7:0],
	       y_avValue__h46286[15:8],
	       y_avValue__h46286[23:16],
	       y_avValue__h46286[31:24],
	       y_avValue__h46266[7:0],
	       y_avValue__h46266[15:8],
	       y_avValue__h46266[23:16],
	       y_avValue__h46266[31:24],
	       y_avValue__h46246[7:0],
	       y_avValue__h46246[15:8],
	       y_avValue__h46246[23:16],
	       y_avValue__h46246[31:24],
	       y_avValue__h46226[7:0],
	       y_avValue__h46226[15:8],
	       y_avValue__h46226[23:16],
	       y_avValue__h46226[31:24] } ;
  assign dp0_tlp_debugBdata$EN = CAN_FIRE_RL_dp0_tlp_read_NextResp ;

  // register dp0_tlp_dmaDoTailEvent
  assign dp0_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  always@(WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta or
	  dp0_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	dp0_tlp_dmaDoTailEvent$D_IN = dp0_tlp_dmaPullRemainDWLen == 10'd1;
    WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	dp0_tlp_dmaDoTailEvent$D_IN =
	    MUX_dp0_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent: dp0_tlp_dmaDoTailEvent$D_IN = 1'd0;
    default: dp0_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase

  // register dp0_tlp_dmaPullRemainDWLen
  assign dp0_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h33926 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_dmaPullRemainDWLen$D_IN = thisRequestLength__h33926[11:2];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp0_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: dp0_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end

  // register dp0_tlp_dmaPullRemainDWSub
  assign dp0_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;
  assign dp0_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ?
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_dp0_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;

  // register dp0_tlp_dmaReqTag
  assign dp0_tlp_dmaReqTag$D_IN = dp0_tlp_dmaTag ;
  assign dp0_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_dmaTag
  assign dp0_tlp_dmaTag$D_IN = dp0_tlp_dmaTag + 5'd1 ;
  assign dp0_tlp_dmaTag$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_doXmtMetaBody
  assign dp0_tlp_doXmtMetaBody$D_IN = !WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ;
  assign dp0_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_tlp_fabFlowAddr
  assign dp0_tlp_fabFlowAddr$D_IN = dp0_bml_fabFlowAddr ;
  assign dp0_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMesgAccu
  always@(MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp0_tlp_fabMesgAddr or
	  WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader or
	  MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  dp0_tlp_fabMesgAccu$D_IN = dp0_tlp_fabMesgAddr;
      WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader:
	  dp0_tlp_fabMesgAccu$D_IN = MUX_dp0_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_fabMesgAccu$D_IN = MUX_dp0_tlp_fabMesgAccu$write_1__VAL_3;
      default: dp0_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_fabMesgAddr
  assign dp0_tlp_fabMesgAddr$D_IN = dp0_bml_fabMesgAddr ;
  assign dp0_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_fabMeta
  always@(WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody or
	  MUX_dp0_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent or
	  WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta or
	  MUX_dp0_tlp_fabMeta$write_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody:
	dp0_tlp_fabMeta$D_IN = MUX_dp0_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent:
	dp0_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	dp0_tlp_fabMeta$D_IN = MUX_dp0_tlp_fabMeta$write_1__VAL_3;
    WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent:
	dp0_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: dp0_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign dp0_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // register dp0_tlp_fabMetaAddr
  assign dp0_tlp_fabMetaAddr$D_IN = dp0_bml_fabMetaAddr ;
  assign dp0_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_farBufReady
  assign dp0_tlp_farBufReady$D_IN = CAN_FIRE_RL_dp0_rFRdy_1 ;
  assign dp0_tlp_farBufReady$EN = 1'd1 ;

  // register dp0_tlp_flowDiagCount
  assign dp0_tlp_flowDiagCount$D_IN = dp0_tlp_flowDiagCount + 32'd1 ;
  assign dp0_tlp_flowDiagCount$EN = WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ;

  // register dp0_tlp_gotResponseHeader
  assign dp0_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_inF$D_OUT or WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_gotResponseHeader$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_gotResponseHeader$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_gotResponseHeader$D_IN = 1'd0;
      default: dp0_tlp_gotResponseHeader$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end

  // register dp0_tlp_inIgnorePkt
  assign dp0_tlp_inIgnorePkt$D_IN =
	     dp0_tlp_inF$D_OUT[110] || dp0_tlp_inF$D_OUT[125] ||
	     dp0_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp0_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv && dp0_tlp_inF$D_OUT[152] ;

  // register dp0_tlp_maxPayloadSize
  assign dp0_tlp_maxPayloadSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxPayloadSize$EN = 1'b0 ;

  // register dp0_tlp_maxReadReqSize
  assign dp0_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp0_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp0_tlp_mesgComplReceived
  assign dp0_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_mesgComplReceived$D_IN =
	      MUX_dp0_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta:
	  dp0_tlp_mesgComplReceived$D_IN = 17'd0;
      default: dp0_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end

  // register dp0_tlp_mesgLengthRemainPull
  assign dp0_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ?
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_dp0_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign dp0_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;

  // register dp0_tlp_mesgLengthRemainPush
  assign dp0_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ?
	       MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_dp0_tlp_mesgLengthRemainPush$write_1__VAL_2 ;
  assign dp0_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ;

  // register dp0_tlp_nearBufReady
  assign dp0_tlp_nearBufReady$D_IN = CAN_FIRE_RL_dp0_rRdy_1 ;
  assign dp0_tlp_nearBufReady$EN = 1'd1 ;

  // register dp0_tlp_outDwRemain
  assign dp0_tlp_outDwRemain$D_IN =
	     MUX_dp0_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;

  // register dp0_tlp_postSeqDwell
  assign dp0_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell ?
	       MUX_dp0_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign dp0_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;

  // register dp0_tlp_pullTagMatch
  assign dp0_tlp_pullTagMatch$EN = 1'd1 ;
  assign dp0_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_dp0_tlp_dmaPullResponseHeaderTag &&
	     dp0_tlp_pullTagMatch_1$wget ;

  // register dp0_tlp_rdRespDwRemain
  assign dp0_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ?
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp0_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp0_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ;

  // register dp0_tlp_readHeaderSent
  assign dp0_tlp_readHeaderSent$D_IN =
	     !MUX_dp0_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp0_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_935_ULE_4___d2936 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] != 10'd1 ;

  // register dp0_tlp_readNxtDWAddr
  assign dp0_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ?
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ;

  // register dp0_tlp_readRemainDWLen
  assign dp0_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ?
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq ;

  // register dp0_tlp_readStarted
  assign dp0_tlp_readStarted$D_IN = !MUX_dp0_tlp_readStarted$write_1__SEL_1 ;
  assign dp0_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_090_ULE_4___d3091 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 ;

  // register dp0_tlp_remDone
  assign dp0_tlp_remDone$EN = 1'd1 ;
  assign dp0_tlp_remDone$D_IN = dp0_tlp_remDone_1$whas ;

  // register dp0_tlp_remMesgAccu
  always@(MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp0_tlp_remMesgAddr or
	  WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg or
	  MUX_dp0_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_fabMesgAccu$write_1__SEL_1:
	  dp0_tlp_remMesgAccu$D_IN = dp0_tlp_remMesgAddr;
      WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg:
	  dp0_tlp_remMesgAccu$D_IN = MUX_dp0_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_remMesgAccu$D_IN = MUX_dp0_tlp_remMesgAccu$write_1__VAL_3;
      default: dp0_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ;

  // register dp0_tlp_remMesgAddr
  assign dp0_tlp_remMesgAddr$D_IN = dp0_bml_remMesgAddr ;
  assign dp0_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp0_tlp_remMetaAddr
  assign dp0_tlp_remMetaAddr$D_IN = dp0_bml_remMetaAddr ;
  assign dp0_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp0_tlp_remStart
  assign dp0_tlp_remStart$EN = 1'd1 ;
  assign dp0_tlp_remStart$D_IN = dp0_tlp_remStart_1$whas ;

  // register dp0_tlp_reqMesgInFlight
  assign dp0_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ;
  always@(WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  dp0_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_reqMesgInFlight$D_IN =
	      MUX_dp0_tlp_reqMesgInFlight$write_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_reqMesgInFlight$D_IN = dp0_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: dp0_tlp_reqMesgInFlight$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end

  // register dp0_tlp_reqMetaBodyInFlight
  assign dp0_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ;
  assign dp0_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ;

  // register dp0_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta or
	  WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody:
	dp0_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ||
    WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta:
	dp0_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta:
	dp0_tlp_reqMetaInFlight$D_IN = 1'd0;
    default: dp0_tlp_reqMetaInFlight$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp0_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ;

  // register dp0_tlp_srcMesgAccu
  assign dp0_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ?
	       dp0_tlp_fabMesgAddr :
	       MUX_dp0_tlp_srcMesgAccu$write_1__VAL_2 ;
  assign dp0_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ;

  // register dp0_tlp_tlpMetaSent
  assign dp0_tlp_tlpMetaSent$D_IN = !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;
  assign dp0_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ;

  // register dp0_tlp_tlpRcvBusy
  assign dp0_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ;
  always@(WILL_FIRE_RL_dp0_tlp_tlpRcv or
	  dp0_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody or
	  dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_tlpRcv:
	  dp0_tlp_tlpRcvBusy$D_IN = !dp0_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody:
	  dp0_tlp_tlpRcvBusy$D_IN =
	      !dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_tlpRcvBusy$D_IN = dp0_tlp_inF$D_OUT[105:96] != 10'd1;
      default: dp0_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end

  // register dp0_tlp_tlpXmtBusy
  always@(MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1 or
	  dp0_tlp_mRespF$D_OUT or
	  MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody or
	  MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_1:
	  dp0_tlp_tlpXmtBusy$D_IN = dp0_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody:
	  dp0_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_dp0_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead:
	  dp0_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: dp0_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader && _dfoo15 ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header &&
	     !dp0_tlp_mRespF_first__352_BITS_71_TO_62_377_ULE_1___d4452 ||
	     (WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ||
	      WILL_FIRE_RL_dp0_tlp_dataXmt_Body) &&
	     dp0_tlp_outDwRemain_358_ULE_4___d4675 ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_tlp_writeDWAddr
  assign dp0_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeData ?
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp0_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp0_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp0_tlp_writeData || WILL_FIRE_RL_dp0_tlp_writeReq ;

  // register dp0_tlp_writeLastBE
  assign dp0_tlp_writeLastBE$D_IN = dp0_tlp_mReqF$D_OUT[35:32] ;
  assign dp0_tlp_writeLastBE$EN = CAN_FIRE_RL_dp0_tlp_writeReq ;

  // register dp0_tlp_writeRemainDWLen
  assign dp0_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp0_tlp_writeData ?
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp0_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp0_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp0_tlp_writeData || WILL_FIRE_RL_dp0_tlp_writeReq ;

  // register dp0_tlp_xmtMetaInFlight
  assign dp0_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ;
  assign dp0_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody or
	  dp0_tlp_mesgLengthRemainPush or
	  MUX_dp0_tlp_xmtMetaOK$write_1__SEL_2 or
	  MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead)
  case (1'b1)
    WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody:
	dp0_tlp_xmtMetaOK$D_IN = dp0_tlp_mesgLengthRemainPush == 17'd0;
    MUX_dp0_tlp_xmtMetaOK$write_1__SEL_2 ||
    MUX_dp0_tlp_xmtMetaOK$write_1__SEL_3:
	dp0_tlp_xmtMetaOK$D_IN = 1'd1;
    WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead: dp0_tlp_xmtMetaOK$D_IN = 1'd0;
    default: dp0_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp0_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader &&
	     dp0_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody &&
	     dp0_tlp_outDwRemain_358_ULE_4___d4675 &&
	     dp0_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ;

  // register dp0_wci_cEdge
  assign dp0_wci_cEdge$D_IN = dp0_wci_reqF$D_OUT[36:34] ;
  assign dp0_wci_cEdge$EN = WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_cState
  assign dp0_wci_cState$D_IN = dp0_wci_nState ;
  assign dp0_wci_cState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge ;

  // register dp0_wci_ctlAckReg
  assign dp0_wci_ctlAckReg$D_IN = dp0_wci_ctlAckReg_1$whas ;
  assign dp0_wci_ctlAckReg$EN = 1'd1 ;

  // register dp0_wci_ctlOpActive
  assign dp0_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp0_wci_ctl_op_complete ;
  assign dp0_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp0_wci_ctl_op_start ;

  // register dp0_wci_illegalEdge
  assign dp0_wci_illegalEdge$D_IN =
	     !MUX_dp0_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp0_wci_illegalEdge$write_1__VAL_2 ;
  assign dp0_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge ||
	     MUX_dp0_wci_illegalEdge$write_1__SEL_2 ;

  // register dp0_wci_nState
  always@(dp0_wci_reqF$D_OUT)
  begin
    case (dp0_wci_reqF$D_OUT[36:34])
      3'd0: dp0_wci_nState$D_IN = 3'd1;
      3'd1: dp0_wci_nState$D_IN = 3'd2;
      3'd2: dp0_wci_nState$D_IN = 3'd3;
      default: dp0_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp0_wci_nState$EN =
	     WILL_FIRE_RL_dp0_wci_ctl_op_start &&
	     (dp0_wci_reqF$D_OUT[36:34] == 3'd0 && dp0_wci_cState == 3'd0 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp0_wci_cState == 3'd1 || dp0_wci_cState == 3'd3) ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd2 && dp0_wci_cState == 3'd2 ||
	      dp0_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp0_wci_cState == 3'd3 || dp0_wci_cState == 3'd2 ||
	       dp0_wci_cState == 3'd1)) ;

  // register dp0_wci_reqF_countReg
  assign dp0_wci_reqF_countReg$D_IN =
	     (dp0_wci_wciReq$wget[59:57] != 3'd0) ?
	       dp0_wci_reqF_countReg + 2'd1 :
	       dp0_wci_reqF_countReg - 2'd1 ;
  assign dp0_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_dp0_wci_reqF__updateLevelCounter ;

  // register dp0_wci_respF_c_r
  assign dp0_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ?
	       MUX_dp0_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp0_wci_respF_c_r$write_1__VAL_2 ;
  assign dp0_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ||
	     WILL_FIRE_RL_dp0_wci_respF_incCtr ;

  // register dp0_wci_respF_q_0
  assign dp0_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;
  always@(WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_1 or
	  MUX_dp0_wci_respF_q_0$write_1__SEL_2 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr or dp0_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_1;
      MUX_dp0_wci_respF_q_0$write_1__SEL_2:
	  dp0_wci_respF_q_0$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_0$D_IN = dp0_wci_respF_q_1;
      default: dp0_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register dp0_wci_respF_q_1
  assign dp0_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp0_wci_respF_both ||
	     WILL_FIRE_RL_dp0_wci_respF_incCtr && dp0_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp0_wci_respF_decCtr ;
  always@(WILL_FIRE_RL_dp0_wci_respF_both or
	  MUX_dp0_wci_respF_q_1$write_1__VAL_1 or
	  MUX_dp0_wci_respF_q_1$write_1__SEL_2 or
	  MUX_dp0_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp0_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_wci_respF_both:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_1$write_1__VAL_1;
      MUX_dp0_wci_respF_q_1$write_1__SEL_2:
	  dp0_wci_respF_q_1$D_IN = MUX_dp0_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp0_wci_respF_decCtr:
	  dp0_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp0_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register dp0_wci_sFlagReg
  assign dp0_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp0_wci_sFlagReg$EN = 1'd1 ;

  // register dp0_wci_sThreadBusy_d
  assign dp0_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp0_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp0_wmi_addr
  assign dp0_wmi_addr$D_IN =
	     MUX_dp0_wmi_addr$write_1__SEL_1 ?
	       MUX_dp0_wmi_addr$write_1__VAL_1 :
	       dp0_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp0_wmi_addr$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_bufDwell
  assign dp0_wmi_bufDwell$D_IN =
	     (MUX_dp0_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp0_wmi_bufDwell$write_1__VAL_3 ;
  assign dp0_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doDwell ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_bytesRemainReq
  assign dp0_wmi_bytesRemainReq$D_IN =
	     WILL_FIRE_RL_dp0_wmi_getRequest ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_dp0_wmi_doReadReq ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ;

  // register dp0_wmi_bytesRemainResp
  assign dp0_wmi_bytesRemainResp$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp0_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp0_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp0_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_doneWithMesg
  assign dp0_wmi_doneWithMesg$D_IN =
	     !MUX_dp0_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ;
  assign dp0_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp0_wmi_doReadReq ||
	      WILL_FIRE_RL_dp0_wmi_doWriteReq) &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_lastMesg
  assign dp0_wmi_lastMesg$D_IN = dp0_wmi_thisMesg ;
  assign dp0_wmi_lastMesg$EN = CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_lclMesgAddr
  assign dp0_wmi_lclMesgAddr$D_IN = dp0_bml_lclMesgAddr[14:0] ;
  assign dp0_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp0_wmi_lclMetaAddr
  assign dp0_wmi_lclMetaAddr$D_IN = dp0_bml_lclMetaAddr[14:0] ;
  assign dp0_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp0_wmi_mesgBufReady
  assign dp0_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_dp0_rRdy ;
  assign dp0_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp0_wmi_mesgBusy
  assign dp0_wmi_mesgBusy$D_IN = !MUX_dp0_wmi_mesgBusy$write_1__SEL_1 ;
  assign dp0_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_dp0_wmi_doDwell && dp0_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_mesgCount
  assign dp0_wmi_mesgCount$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp0_wmi_mesgCount$write_1__VAL_1 ;
  assign dp0_wmi_mesgCount$EN = dp0_wmi_mesgDone_1$whas ;

  // register dp0_wmi_mesgDone
  assign dp0_wmi_mesgDone$EN = 1'd1 ;
  assign dp0_wmi_mesgDone$D_IN = dp0_wmi_mesgDone_1$whas ;

  // register dp0_wmi_mesgMeta
  assign dp0_wmi_mesgMeta$D_IN =
	     MUX_dp0_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp0_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp0_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_mesgStart
  assign dp0_wmi_mesgStart$EN = 1'd1 ;
  assign dp0_wmi_mesgStart$D_IN = dp0_wmi_mesgStart_1$whas ;

  // register dp0_wmi_metaBusy
  assign dp0_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp0_wmi_respMetadata ;
  assign dp0_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp0_wmi_respMetadata ||
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ;

  // register dp0_wmi_p4B
  assign dp0_wmi_p4B$D_IN =
	     MUX_dp0_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp0_wmi_wmi_reqF$D_OUT[15:14] :
	       dp0_wmi_p4B ;
  assign dp0_wmi_p4B$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp0_wmi_doReadResp ;

  // register dp0_wmi_rdActive
  assign dp0_wmi_rdActive$D_IN =
	     !MUX_dp0_wmi_rdActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp0_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_reqCount
  assign dp0_wmi_reqCount$D_IN = dp0_wmi_reqCount + 16'd1 ;
  assign dp0_wmi_reqCount$EN = WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_thisMesg
  assign dp0_wmi_thisMesg$D_IN =
	     { dp0_wmi_mesgCount[7:0],
	       dp0_wmi_wmi_mFlagReg[31:24],
	       dp0_wmi_wmi_mFlagReg[15:0] } ;
  assign dp0_wmi_thisMesg$EN = CAN_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_blockReq
  assign dp0_wmi_wmi_blockReq$D_IN =
	     !MUX_dp0_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;
  assign dp0_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[28] &&
	     dp0_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp0_wmi_doReadReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wmi_dhF_countReg
  assign dp0_wmi_wmi_dhF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       dp0_wmi_wmi_dhF_countReg + 2'd1 :
	       dp0_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_dhF__updateLevelCounter ;

  // register dp0_wmi_wmi_dhF_levelsValid
  assign dp0_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset ;
  assign dp0_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && dp0_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_reset ;

  // register dp0_wmi_wmi_errorSticky
  assign dp0_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign dp0_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_dhF_enq && !dp0_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     !dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && !dp0_wmi_wmi_reqF$FULL_N ;

  // register dp0_wmi_wmi_mFlagF_countReg
  assign dp0_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ?
	       dp0_wmi_wmi_mFlagF_countReg + 2'd1 :
	       dp0_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_mFlagF__updateLevelCounter ;

  // register dp0_wmi_wmi_mFlagF_levelsValid
  assign dp0_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;
  assign dp0_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_getRequest && dp0_wmi_wmi_reqF$D_OUT[27] &&
	     dp0_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_enq &&
	     dp0_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_wmi_mFlagF_reset ;

  // register dp0_wmi_wmi_mFlagReg
  assign dp0_wmi_wmi_mFlagReg$D_IN = dp0_wmi_wmi_mFlagF$D_OUT ;
  assign dp0_wmi_wmi_mFlagReg$EN =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;

  // register dp0_wmi_wmi_operateD
  assign dp0_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_dp0_operating_actions ;
  assign dp0_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp0_wmi_wmi_peerIsReady
  assign dp0_wmi_wmi_peerIsReady$D_IN = wmiS0_MReset_n ;
  assign dp0_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp0_wmi_wmi_reqF_countReg
  assign dp0_wmi_wmi_reqF_countReg$D_IN =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       dp0_wmi_wmi_reqF_countReg + 2'd1 :
	       dp0_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp0_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_dp0_wmi_wmi_reqF__updateLevelCounter ;

  // register dp0_wmi_wmi_reqF_levelsValid
  assign dp0_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset ;
  assign dp0_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_enq && dp0_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ||
	     WILL_FIRE_RL_dp0_wmi_wmi_reqF_reset ;

  // register dp0_wmi_wmi_respF_c_r
  assign dp0_wmi_wmi_respF_c_r$D_IN =
	     MUX_dp0_wmi_wmi_respF_c_r$write_1__VAL_1 ;
  assign dp0_wmi_wmi_respF_c_r$EN = CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_0
  assign dp0_wmi_wmi_respF_q_0$D_IN = dp0_wmi_wmi_respF_q_1 ;
  assign dp0_wmi_wmi_respF_q_0$EN = CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_respF_q_1
  assign dp0_wmi_wmi_respF_q_1$D_IN =
	     258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign dp0_wmi_wmi_respF_q_1$EN = CAN_FIRE_RL_dp0_wmi_wmi_respF_decCtr ;

  // register dp0_wmi_wmi_sFlagReg
  assign dp0_wmi_wmi_sFlagReg$D_IN = { x__h69719[7:0], x__h69718[23:0] } ;
  assign dp0_wmi_wmi_sFlagReg$EN = CAN_FIRE_RL_dp0_wmi_respMetadata ;

  // register dp0_wmi_wmi_statusR
  assign dp0_wmi_wmi_statusR$EN = 1'b0 ;
  assign dp0_wmi_wmi_statusR$D_IN = 8'h0 ;

  // register dp0_wmi_wmi_trafficSticky
  assign dp0_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp0_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp0_wmi_wrActive
  assign dp0_wmi_wrActive$D_IN =
	     !MUX_dp0_wmi_wrActive$write_1__SEL_1 &&
	     dp0_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp0_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 ||
	     WILL_FIRE_RL_dp0_wmi_getRequest ;

  // register dp0_wmi_wrFinalize
  assign dp0_wmi_wrFinalize$D_IN = MUX_dp0_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp0_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp0_wmi_doWriteReq &&
	     dp0_wmi_bytesRemainReq == 14'd32 &&
	     dp0_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp0_wmi_doWriteFinalize ;

  // register dp0_wmi_wrtCount
  assign dp0_wmi_wrtCount$D_IN = dp0_wmi_wrtCount + 16'd1 ;
  assign dp0_wmi_wrtCount$EN = CAN_FIRE_RL_dp0_wmi_doWriteReq ;

  // register dp0_wti_nowReq
  assign dp0_wti_nowReq$D_IN =
	     itc0_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       itc0_wti_nowReq ;
  assign dp0_wti_nowReq$EN = 1'd1 ;

  // register dp1_bml_crdBuf_modulus
  assign dp1_bml_crdBuf_modulus$D_IN = dp1_bml_lclNumBufs - 16'd1 ;
  assign dp1_bml_crdBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_crdBuf_value
  assign dp1_bml_crdBuf_value$EN =
	     WILL_FIRE_RL_dp1_bml_crdAdvance ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_crdBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_crdBuf_value$write_1__VAL_2 ;

  // register dp1_bml_fabAvail
  assign dp1_bml_fabAvail$D_IN = dp1_bml_fabAvail_1$whas ;
  assign dp1_bml_fabAvail$EN = 1'd1 ;

  // register dp1_bml_fabBuf_modulus
  assign dp1_bml_fabBuf_modulus$D_IN = dp1_bml_fabNumBufs - 16'd1 ;
  assign dp1_bml_fabBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_fabBuf_value
  assign dp1_bml_fabBuf_value$EN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_fabBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_fabBuf_value$write_1__VAL_2 ;

  // register dp1_bml_fabBufsAvail
  assign dp1_bml_fabBufsAvail$EN =
	     WILL_FIRE_RL_dp1_bml_fba &&
	     (dp1_bml_fabAvail && !dp1_bml_remStart ||
	      !dp1_bml_fabAvail && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_fabBufsAvail$D_IN =
	     MUX_dp1_bml_fabBufsAvail$write_1__SEL_1 ?
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_1 :
	       MUX_dp1_bml_fabBufsAvail$write_1__VAL_2 ;

  // register dp1_bml_fabDone
  assign dp1_bml_fabDone$D_IN = dp1_bml_fabDone_1$whas ;
  assign dp1_bml_fabDone$EN = 1'd1 ;

  // register dp1_bml_fabFlowAddr
  assign dp1_bml_fabFlowAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_crdAdvance ;
  always@(MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_bml_initAccumulators or
	  dp1_bml_fabFlowBase or
	  WILL_FIRE_RL_dp1_bml_crdAdvance or
	  MUX_dp1_bml_fabFlowAddr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bml_fabFlowAddr$write_1__SEL_1:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_1;
      WILL_FIRE_RL_dp1_bml_initAccumulators:
	  dp1_bml_fabFlowAddr$D_IN = dp1_bml_fabFlowBase;
      WILL_FIRE_RL_dp1_bml_crdAdvance:
	  dp1_bml_fabFlowAddr$D_IN = MUX_dp1_bml_fabFlowAddr$write_1__VAL_3;
      default: dp1_bml_fabFlowAddr$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register dp1_bml_fabFlowBase
  assign dp1_bml_fabFlowBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h60 ;

  // register dp1_bml_fabFlowSize
  assign dp1_bml_fabFlowSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabFlowSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h64 ;

  // register dp1_bml_fabMesgAddr
  assign dp1_bml_fabMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_fabMesgAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMesgAddr$write_1__VAL_1 :
	       dp1_bml_fabMesgBase ;

  // register dp1_bml_fabMesgBase
  assign dp1_bml_fabMesgBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h50 ;

  // register dp1_bml_fabMesgSize
  assign dp1_bml_fabMesgSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h58 ;

  // register dp1_bml_fabMetaAddr
  assign dp1_bml_fabMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_remAdvance && dp1_dpControl[1:0] == 2'd1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_fabMetaAddr$D_IN =
	     MUX_dp1_bml_fabFlowAddr$write_1__SEL_1 ?
	       MUX_dp1_bml_fabMetaAddr$write_1__VAL_1 :
	       dp1_bml_fabMetaBase ;

  // register dp1_bml_fabMetaBase
  assign dp1_bml_fabMetaBase$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h54 ;

  // register dp1_bml_fabMetaSize
  assign dp1_bml_fabMetaSize$D_IN = dp1_wci_reqF$D_OUT[31:0] ;
  assign dp1_bml_fabMetaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h5C ;

  // register dp1_bml_fabNumBufs
  assign dp1_bml_fabNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_fabNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h04 ;

  // register dp1_bml_lclBufDone
  assign dp1_bml_lclBufDone$D_IN = dp1_wmi_mesgDone ;
  assign dp1_bml_lclBufDone$EN = 1'd1 ;

  // register dp1_bml_lclBufStart
  assign dp1_bml_lclBufStart$D_IN = dp1_wmi_mesgStart ;
  assign dp1_bml_lclBufStart$EN = 1'd1 ;

  // register dp1_bml_lclBuf_modulus
  assign dp1_bml_lclBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_lclBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclBuf_value
  assign dp1_bml_lclBuf_value$EN =
	     CAN_FIRE_RL_dp1_bml_cntLclDone ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_lclBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_lclBuf_value$write_1__VAL_2 ;

  // register dp1_bml_lclBufsAR
  assign dp1_bml_lclBufsAR$EN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_lclBufsAR$D_IN =
	     MUX_dp1_bml_lclBufsAR$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsAR$write_1__VAL_2 ;

  // register dp1_bml_lclBufsCF
  assign dp1_bml_lclBufsCF$D_IN =
	     MUX_dp1_bml_lclBufsCF$write_1__SEL_1 ?
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_1 :
	       MUX_dp1_bml_lclBufsCF$write_1__VAL_2 ;
  assign dp1_bml_lclBufsCF$EN =
	     WILL_FIRE_RL_dp1_bml_lbcf &&
	     (dp1_bml_lclBufDone_87_AND_IF_dp1_bml_dpControl_ETC___d4513 ||
	      NOT_dp1_bml_lclBufDone_87_91_AND_IF_dp1_bml_dp_ETC___d327) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_lclCredit
  assign dp1_bml_lclCredit$EN =
	     WILL_FIRE_RL_dp1_bml_lcredit &&
	     (dp1_bml_lclBufDone && !dp1_bml_remStart ||
	      !dp1_bml_lclBufDone && dp1_bml_remStart) ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_lclCredit$D_IN =
	     MUX_dp1_bml_lclCredit$write_1__SEL_1 ?
	       MUX_dp1_bml_lclCredit$write_1__VAL_1 :
	       16'd0 ;

  // register dp1_bml_lclDones
  assign dp1_bml_lclDones$D_IN = dp1_bml_lclDones + 16'd1 ;
  assign dp1_bml_lclDones$EN = CAN_FIRE_RL_dp1_bml_cntLclDone ;

  // register dp1_bml_lclMesgAddr
  assign dp1_bml_lclMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;
  assign dp1_bml_lclMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_lclMesgAddr$write_1__VAL_2 ;

  // register dp1_bml_lclMetaAddr
  assign dp1_bml_lclMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_lclAdvance ;
  assign dp1_bml_lclMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_lclMetaAddr$write_1__VAL_2 ;

  // register dp1_bml_lclNumBufs
  assign dp1_bml_lclNumBufs$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_lclNumBufs$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0 ;

  // register dp1_bml_lclStarts
  assign dp1_bml_lclStarts$D_IN = dp1_bml_lclStarts + 16'd1 ;
  assign dp1_bml_lclStarts$EN = CAN_FIRE_RL_dp1_bml_cntLclStart ;

  // register dp1_bml_mesgBase
  assign dp1_bml_mesgBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h08 ;

  // register dp1_bml_mesgSize
  assign dp1_bml_mesgSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_mesgSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h10 ;

  // register dp1_bml_metaBase
  assign dp1_bml_metaBase$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaBase$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h0C ;

  // register dp1_bml_metaSize
  assign dp1_bml_metaSize$D_IN = dp1_wci_reqF$D_OUT[15:0] ;
  assign dp1_bml_metaSize$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h14 ;

  // register dp1_bml_remBuf_modulus
  assign dp1_bml_remBuf_modulus$D_IN = dp1_bml_crdBuf_modulus$D_IN ;
  assign dp1_bml_remBuf_modulus$EN = CAN_FIRE_RL_dp1_bml_initAccumulators ;

  // register dp1_bml_remBuf_value
  assign dp1_bml_remBuf_value$EN =
	     CAN_FIRE_RL_dp1_bml_cntRemDone ||
	     WILL_FIRE_RL_dp1_bml_initAccumulators ;
  assign dp1_bml_remBuf_value$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       16'd0 :
	       MUX_dp1_bml_remBuf_value$write_1__VAL_2 ;

  // register dp1_bml_remDone
  assign dp1_bml_remDone$D_IN = dp1_tlp_remDone ;
  assign dp1_bml_remDone$EN = 1'd1 ;

  // register dp1_bml_remDones
  assign dp1_bml_remDones$D_IN = dp1_bml_remDones + 16'd1 ;
  assign dp1_bml_remDones$EN = CAN_FIRE_RL_dp1_bml_cntRemDone ;

  // register dp1_bml_remMesgAddr
  assign dp1_bml_remMesgAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;
  assign dp1_bml_remMesgAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_mesgBase :
	       MUX_dp1_bml_remMesgAddr$write_1__VAL_2 ;

  // register dp1_bml_remMetaAddr
  assign dp1_bml_remMetaAddr$EN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ||
	     WILL_FIRE_RL_dp1_bml_remAdvance ;
  assign dp1_bml_remMetaAddr$D_IN =
	     WILL_FIRE_RL_dp1_bml_initAccumulators ?
	       dp1_bml_metaBase :
	       MUX_dp1_bml_remMetaAddr$write_1__VAL_2 ;

  // register dp1_bml_remStart
  assign dp1_bml_remStart$D_IN = dp1_tlp_remStart ;
  assign dp1_bml_remStart$EN = 1'd1 ;

  // register dp1_bml_remStarts
  assign dp1_bml_remStarts$D_IN = dp1_bml_remStarts + 16'd1 ;
  assign dp1_bml_remStarts$EN = CAN_FIRE_RL_dp1_bml_cntRemStart ;

  // register dp1_bram_serverAdapterA_1_cnt
  assign dp1_bram_serverAdapterA_1_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_1_cnt_finalAdd ;
  assign dp1_bram_serverAdapterA_1_cnt$D_IN =
	     dp1_bram_serverAdapterA_1_cnt_25_PLUS_IF_dp1_b_ETC___d2129 ;

  // register dp1_bram_serverAdapterA_1_s1
  assign dp1_bram_serverAdapterA_1_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterA_1_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_1_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_1_s1_1$wget[1],
	       dp1_bram_serverAdapterA_1_s1_1$wget[0] } ;

  // register dp1_bram_serverAdapterA_2_cnt
  assign dp1_bram_serverAdapterA_2_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_2_cnt_finalAdd ;
  assign dp1_bram_serverAdapterA_2_cnt$D_IN =
	     dp1_bram_serverAdapterA_2_cnt_27_PLUS_IF_dp1_b_ETC___d2017 ;

  // register dp1_bram_serverAdapterA_2_s1
  assign dp1_bram_serverAdapterA_2_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterA_2_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_2_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_2_s1_1$wget[1],
	       dp1_bram_serverAdapterA_2_s1_1$wget[0] } ;

  // register dp1_bram_serverAdapterA_3_cnt
  assign dp1_bram_serverAdapterA_3_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_3_cnt_finalAdd ;
  assign dp1_bram_serverAdapterA_3_cnt$D_IN =
	     dp1_bram_serverAdapterA_3_cnt_29_PLUS_IF_dp1_b_ETC___d1905 ;

  // register dp1_bram_serverAdapterA_3_s1
  assign dp1_bram_serverAdapterA_3_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterA_3_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_3_s1_1$wget[1],
	       dp1_bram_serverAdapterA_3_s1_1$wget[0] } ;

  // register dp1_bram_serverAdapterA_cnt
  assign dp1_bram_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterA_cnt_finalAdd ;
  assign dp1_bram_serverAdapterA_cnt$D_IN =
	     dp1_bram_serverAdapterA_cnt_23_PLUS_IF_dp1_bra_ETC___d2241 ;

  // register dp1_bram_serverAdapterA_s1
  assign dp1_bram_serverAdapterA_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterA_stageReadResponseAlways &&
	       dp1_bram_serverAdapterA_s1_1$wget[1],
	       dp1_bram_serverAdapterA_s1_1$wget[0] } ;

  // register dp1_bram_serverAdapterB_1_cnt
  assign dp1_bram_serverAdapterB_1_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_1_cnt_finalAdd ;
  assign dp1_bram_serverAdapterB_1_cnt$D_IN =
	     dp1_bram_serverAdapterB_1_cnt_92_PLUS_IF_dp1_b_ETC___d2073 ;

  // register dp1_bram_serverAdapterB_1_s1
  assign dp1_bram_serverAdapterB_1_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterB_1_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_1_s1_1$wget[1],
	       dp1_bram_serverAdapterB_1_s1_1$wget[0] } ;

  // register dp1_bram_serverAdapterB_2_cnt
  assign dp1_bram_serverAdapterB_2_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_2_cnt_finalAdd ;
  assign dp1_bram_serverAdapterB_2_cnt$D_IN =
	     dp1_bram_serverAdapterB_2_cnt_94_PLUS_IF_dp1_b_ETC___d1961 ;

  // register dp1_bram_serverAdapterB_2_s1
  assign dp1_bram_serverAdapterB_2_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterB_2_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_2_s1_1$wget[1],
	       dp1_bram_serverAdapterB_2_s1_1$wget[0] } ;

  // register dp1_bram_serverAdapterB_3_cnt
  assign dp1_bram_serverAdapterB_3_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_cnt_finalAdd ;
  assign dp1_bram_serverAdapterB_3_cnt$D_IN =
	     dp1_bram_serverAdapterB_3_cnt_97_PLUS_IF_dp1_b_ETC___d1849 ;

  // register dp1_bram_serverAdapterB_3_s1
  assign dp1_bram_serverAdapterB_3_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterB_3_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_3_s1_1$wget[1],
	       dp1_bram_serverAdapterB_3_s1_1$wget[0] } ;

  // register dp1_bram_serverAdapterB_cnt
  assign dp1_bram_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_cnt_finalAdd ;
  assign dp1_bram_serverAdapterB_cnt$D_IN =
	     dp1_bram_serverAdapterB_cnt_90_PLUS_IF_dp1_bra_ETC___d2185 ;

  // register dp1_bram_serverAdapterB_s1
  assign dp1_bram_serverAdapterB_s1$EN = 1'd1 ;
  assign dp1_bram_serverAdapterB_s1$D_IN =
	     { CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways &&
	       dp1_bram_serverAdapterB_s1_1$wget[1],
	       dp1_bram_serverAdapterB_s1_1$wget[0] } ;

  // register dp1_dpControl
  assign dp1_dpControl$D_IN = dp1_wci_reqF$D_OUT[3:0] ;
  assign dp1_dpControl$EN =
	     WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h68 ;

  // register dp1_tlp_creditReady
  assign dp1_tlp_creditReady$D_IN = CAN_FIRE_RL_dp1_rCredit_1 ;
  assign dp1_tlp_creditReady$EN = 1'd1 ;

  // register dp1_tlp_debugBdata
  assign dp1_tlp_debugBdata$D_IN =
	     { y_avValue__h122850[7:0],
	       y_avValue__h122850[15:8],
	       y_avValue__h122850[23:16],
	       y_avValue__h122850[31:24],
	       y_avValue__h122830[7:0],
	       y_avValue__h122830[15:8],
	       y_avValue__h122830[23:16],
	       y_avValue__h122830[31:24],
	       y_avValue__h122810[7:0],
	       y_avValue__h122810[15:8],
	       y_avValue__h122810[23:16],
	       y_avValue__h122810[31:24],
	       y_avValue__h122790[7:0],
	       y_avValue__h122790[15:8],
	       y_avValue__h122790[23:16],
	       y_avValue__h122790[31:24] } ;
  assign dp1_tlp_debugBdata$EN = CAN_FIRE_RL_dp1_tlp_read_NextResp ;

  // register dp1_tlp_dmaDoTailEvent
  assign dp1_tlp_dmaDoTailEvent$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;
  always@(WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta or
	  dp1_tlp_mesgLengthRemainPull or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  dp1_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta:
	dp1_tlp_dmaDoTailEvent$D_IN = dp1_tlp_mesgLengthRemainPull == 17'd0;
    WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	dp1_tlp_dmaDoTailEvent$D_IN = dp1_tlp_dmaPullRemainDWLen == 10'd1;
    WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	dp1_tlp_dmaDoTailEvent$D_IN =
	    MUX_dp1_tlp_dmaDoTailEvent$write_1__VAL_3;
    WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent: dp1_tlp_dmaDoTailEvent$D_IN = 1'd0;
    default: dp1_tlp_dmaDoTailEvent$D_IN = 1'b0 /* unspecified value */ ;
  endcase

  // register dp1_tlp_dmaPullRemainDWLen
  assign dp1_tlp_dmaPullRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg or
	  thisRequestLength__h110496 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_dmaPullRemainDWLen$D_IN = thisRequestLength__h110496[11:2];
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_dmaPullRemainDWLen$D_IN =
	      MUX_dp1_tlp_dmaPullRemainDWLen$write_1__VAL_3;
      default: dp1_tlp_dmaPullRemainDWLen$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end

  // register dp1_tlp_dmaPullRemainDWSub
  assign dp1_tlp_dmaPullRemainDWSub$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;
  assign dp1_tlp_dmaPullRemainDWSub$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ?
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_1 :
	       MUX_dp1_tlp_dmaPullRemainDWSub$write_1__VAL_2 ;

  // register dp1_tlp_dmaReqTag
  assign dp1_tlp_dmaReqTag$D_IN = dp1_tlp_dmaTag ;
  assign dp1_tlp_dmaReqTag$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_dmaTag
  assign dp1_tlp_dmaTag$D_IN = dp1_tlp_dmaTag + 5'd1 ;
  assign dp1_tlp_dmaTag$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_doXmtMetaBody
  assign dp1_tlp_doXmtMetaBody$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;
  assign dp1_tlp_doXmtMetaBody$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_fabFlowAddr
  assign dp1_tlp_fabFlowAddr$D_IN = dp1_bml_fabFlowAddr ;
  assign dp1_tlp_fabFlowAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMesgAccu
  always@(MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp1_tlp_fabMesgAddr or
	  WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader or
	  MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  dp1_tlp_fabMesgAccu$D_IN = dp1_tlp_fabMesgAddr;
      WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader:
	  dp1_tlp_fabMesgAccu$D_IN = MUX_dp1_tlp_fabMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_fabMesgAccu$D_IN = MUX_dp1_tlp_fabMesgAccu$write_1__VAL_3;
      default: dp1_tlp_fabMesgAccu$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_fabMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_fabMesgAddr
  assign dp1_tlp_fabMesgAddr$D_IN = dp1_bml_fabMesgAddr ;
  assign dp1_tlp_fabMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_fabMeta
  always@(WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  MUX_dp1_tlp_fabMeta$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent or
	  WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta or
	  MUX_dp1_tlp_fabMeta$write_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody:
	dp1_tlp_fabMeta$D_IN = MUX_dp1_tlp_fabMeta$write_1__VAL_1;
    WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent:
	dp1_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta:
	dp1_tlp_fabMeta$D_IN = MUX_dp1_tlp_fabMeta$write_1__VAL_3;
    WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent:
	dp1_tlp_fabMeta$D_IN = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    default: dp1_tlp_fabMeta$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign dp1_tlp_fabMeta$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;

  // register dp1_tlp_fabMetaAddr
  assign dp1_tlp_fabMetaAddr$D_IN = dp1_bml_fabMetaAddr ;
  assign dp1_tlp_fabMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_farBufReady
  assign dp1_tlp_farBufReady$D_IN = CAN_FIRE_RL_dp1_rFRdy_1 ;
  assign dp1_tlp_farBufReady$EN = 1'd1 ;

  // register dp1_tlp_flowDiagCount
  assign dp1_tlp_flowDiagCount$D_IN = dp1_tlp_flowDiagCount + 32'd1 ;
  assign dp1_tlp_flowDiagCount$EN = WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ;

  // register dp1_tlp_gotResponseHeader
  assign dp1_tlp_gotResponseHeader$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  dp1_tlp_inF$D_OUT or WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_gotResponseHeader$D_IN =
	      !dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_gotResponseHeader$D_IN = dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_gotResponseHeader$D_IN = 1'd0;
      default: dp1_tlp_gotResponseHeader$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end

  // register dp1_tlp_inIgnorePkt
  assign dp1_tlp_inIgnorePkt$D_IN =
	     dp1_tlp_inF$D_OUT[110] || dp1_tlp_inF$D_OUT[125] ||
	     dp1_tlp_inF$D_OUT[124:120] != 5'b0 ;
  assign dp1_tlp_inIgnorePkt$EN =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv && dp1_tlp_inF$D_OUT[152] ;

  // register dp1_tlp_maxPayloadSize
  assign dp1_tlp_maxPayloadSize$EN = 1'b0 ;
  assign dp1_tlp_maxPayloadSize$D_IN = 13'h0 ;

  // register dp1_tlp_maxReadReqSize
  assign dp1_tlp_maxReadReqSize$D_IN = 13'h0 ;
  assign dp1_tlp_maxReadReqSize$EN = 1'b0 ;

  // register dp1_tlp_mesgComplReceived
  assign dp1_tlp_mesgComplReceived$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ;
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_mesgComplReceived$D_IN =
	      MUX_dp1_tlp_mesgComplReceived$write_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_mesgComplReceived$D_IN =
	      MUX_dp1_tlp_mesgComplReceived$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta:
	  dp1_tlp_mesgComplReceived$D_IN = 17'd0;
      default: dp1_tlp_mesgComplReceived$D_IN =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end

  // register dp1_tlp_mesgLengthRemainPull
  assign dp1_tlp_mesgLengthRemainPull$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ?
	       MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_1 :
	       MUX_dp1_tlp_mesgLengthRemainPull$write_1__VAL_2 ;
  assign dp1_tlp_mesgLengthRemainPull$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;

  // register dp1_tlp_mesgLengthRemainPush
  assign dp1_tlp_mesgLengthRemainPush$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;
  assign dp1_tlp_mesgLengthRemainPush$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ?
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_1 :
	       MUX_dp1_tlp_mesgLengthRemainPush$write_1__VAL_2 ;

  // register dp1_tlp_nearBufReady
  assign dp1_tlp_nearBufReady$D_IN = CAN_FIRE_RL_dp1_rRdy_1 ;
  assign dp1_tlp_nearBufReady$EN = 1'd1 ;

  // register dp1_tlp_outDwRemain
  assign dp1_tlp_outDwRemain$D_IN =
	     MUX_dp1_tlp_outDwRemain$write_1__SEL_1 ?
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_outDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_outDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;

  // register dp1_tlp_postSeqDwell
  assign dp1_tlp_postSeqDwell$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell ?
	       MUX_dp1_tlp_postSeqDwell$write_1__VAL_1 :
	       4'd3 ;
  assign dp1_tlp_postSeqDwell$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPostSeqDwell ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;

  // register dp1_tlp_pullTagMatch
  assign dp1_tlp_pullTagMatch$EN = 1'd1 ;
  assign dp1_tlp_pullTagMatch$D_IN =
	     CAN_FIRE_RL_dp1_tlp_dmaPullResponseHeaderTag &&
	     dp1_tlp_pullTagMatch_1$wget ;

  // register dp1_tlp_rdRespDwRemain
  assign dp1_tlp_rdRespDwRemain$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ?
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_1 :
	       MUX_dp1_tlp_rdRespDwRemain$write_1__VAL_2 ;
  assign dp1_tlp_rdRespDwRemain$EN =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ;

  // register dp1_tlp_readHeaderSent
  assign dp1_tlp_readHeaderSent$D_IN =
	     !MUX_dp1_tlp_readHeaderSent$write_1__SEL_1 ;
  assign dp1_tlp_readHeaderSent$EN =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_77_ULE_4___d778 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] != 10'd1 ;

  // register dp1_tlp_readNxtDWAddr
  assign dp1_tlp_readNxtDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ?
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_readNxtDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_readNxtDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ;

  // register dp1_tlp_readRemainDWLen
  assign dp1_tlp_readRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ?
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_readRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_readRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq ;

  // register dp1_tlp_readStarted
  assign dp1_tlp_readStarted$D_IN = !MUX_dp1_tlp_readStarted$write_1__SEL_1 ;
  assign dp1_tlp_readStarted$EN =
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_32_ULE_4___d933 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 ;

  // register dp1_tlp_remDone
  assign dp1_tlp_remDone$EN = 1'd1 ;
  assign dp1_tlp_remDone$D_IN = dp1_tlp_remDone_1$whas ;

  // register dp1_tlp_remMesgAccu
  always@(MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1 or
	  dp1_tlp_remMesgAddr or
	  WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg or
	  MUX_dp1_tlp_remMesgAccu$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_remMesgAccu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_fabMesgAccu$write_1__SEL_1:
	  dp1_tlp_remMesgAccu$D_IN = dp1_tlp_remMesgAddr;
      WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg:
	  dp1_tlp_remMesgAccu$D_IN = MUX_dp1_tlp_remMesgAccu$write_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_remMesgAccu$D_IN = MUX_dp1_tlp_remMesgAccu$write_1__VAL_3;
      default: dp1_tlp_remMesgAccu$D_IN =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_remMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ;

  // register dp1_tlp_remMesgAddr
  assign dp1_tlp_remMesgAddr$D_IN = dp1_bml_remMesgAddr ;
  assign dp1_tlp_remMesgAddr$EN = 1'd1 ;

  // register dp1_tlp_remMetaAddr
  assign dp1_tlp_remMetaAddr$D_IN = dp1_bml_remMetaAddr ;
  assign dp1_tlp_remMetaAddr$EN = 1'd1 ;

  // register dp1_tlp_remStart
  assign dp1_tlp_remStart$EN = 1'd1 ;
  assign dp1_tlp_remStart$D_IN = dp1_tlp_remStart_1$whas ;

  // register dp1_tlp_reqMesgInFlight
  assign dp1_tlp_reqMesgInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ;
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  dp1_tlp_dmaPullRemainDWLen or
	  WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_reqMesgInFlight$D_IN =
	      MUX_dp1_tlp_reqMesgInFlight$write_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_reqMesgInFlight$D_IN = dp1_tlp_dmaPullRemainDWLen != 10'd1;
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_reqMesgInFlight$D_IN = 1'd1;
      default: dp1_tlp_reqMesgInFlight$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end

  // register dp1_tlp_reqMetaBodyInFlight
  assign dp1_tlp_reqMetaBodyInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ;
  assign dp1_tlp_reqMetaBodyInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ;

  // register dp1_tlp_reqMetaInFlight
  always@(WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta or
	  WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody:
	dp1_tlp_reqMetaInFlight$D_IN = 1'd0;
    WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ||
    WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta:
	dp1_tlp_reqMetaInFlight$D_IN = 1'd1;
    WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta:
	dp1_tlp_reqMetaInFlight$D_IN = 1'd0;
    default: dp1_tlp_reqMetaInFlight$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp1_tlp_reqMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ;

  // register dp1_tlp_srcMesgAccu
  assign dp1_tlp_srcMesgAccu$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ;
  assign dp1_tlp_srcMesgAccu$D_IN =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ?
	       dp1_tlp_fabMesgAddr :
	       MUX_dp1_tlp_srcMesgAccu$write_1__VAL_2 ;

  // register dp1_tlp_tlpMetaSent
  assign dp1_tlp_tlpMetaSent$D_IN = !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_tlpMetaSent$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ;

  // register dp1_tlp_tlpRcvBusy
  assign dp1_tlp_tlpRcvBusy$EN =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ;
  always@(WILL_FIRE_RL_dp1_tlp_tlpRcv or
	  dp1_tlp_inF$D_OUT or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody or
	  dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_tlpRcv:
	  dp1_tlp_tlpRcvBusy$D_IN = !dp1_tlp_inF$D_OUT[151];
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody:
	  dp1_tlp_tlpRcvBusy$D_IN =
	      !dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_tlpRcvBusy$D_IN = dp1_tlp_inF$D_OUT[105:96] != 10'd1;
      default: dp1_tlp_tlpRcvBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end

  // register dp1_tlp_tlpXmtBusy
  always@(MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1 or
	  dp1_tlp_mRespF$D_OUT or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_1:
	  dp1_tlp_tlpXmtBusy$D_IN = dp1_tlp_mRespF$D_OUT[71:62] != 10'd1;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_3 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd0;
      MUX_dp1_tlp_tlpXmtBusy$write_1__SEL_2 ||
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_tlpXmtBusy$D_IN = 1'd1;
      default: dp1_tlp_tlpXmtBusy$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_tlpXmtBusy$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader && _dfoo5 ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header &&
	     !dp1_tlp_mRespF_first__194_BITS_71_TO_62_219_ULE_1___d4497 ||
	     (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	      WILL_FIRE_RL_dp1_tlp_dataXmt_Body) &&
	     dp1_tlp_outDwRemain_200_ULE_4___d4985 ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_writeDWAddr
  assign dp1_tlp_writeDWAddr$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeData ?
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_1 :
	       MUX_dp1_tlp_writeDWAddr$write_1__VAL_2 ;
  assign dp1_tlp_writeDWAddr$EN =
	     WILL_FIRE_RL_dp1_tlp_writeData || WILL_FIRE_RL_dp1_tlp_writeReq ;

  // register dp1_tlp_writeLastBE
  assign dp1_tlp_writeLastBE$D_IN = dp1_tlp_mReqF$D_OUT[35:32] ;
  assign dp1_tlp_writeLastBE$EN = CAN_FIRE_RL_dp1_tlp_writeReq ;

  // register dp1_tlp_writeRemainDWLen
  assign dp1_tlp_writeRemainDWLen$D_IN =
	     WILL_FIRE_RL_dp1_tlp_writeData ?
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_1 :
	       MUX_dp1_tlp_writeRemainDWLen$write_1__VAL_2 ;
  assign dp1_tlp_writeRemainDWLen$EN =
	     WILL_FIRE_RL_dp1_tlp_writeData || WILL_FIRE_RL_dp1_tlp_writeReq ;

  // register dp1_tlp_xmtMetaInFlight
  assign dp1_tlp_xmtMetaInFlight$D_IN =
	     !WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ;
  assign dp1_tlp_xmtMetaInFlight$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_tlp_xmtMetaOK
  always@(WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody or
	  dp1_tlp_mesgLengthRemainPush or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 or
	  MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
  case (1'b1)
    WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody:
	dp1_tlp_xmtMetaOK$D_IN = dp1_tlp_mesgLengthRemainPush == 17'd0;
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_2 ||
    MUX_dp1_tlp_xmtMetaOK$write_1__SEL_3:
	dp1_tlp_xmtMetaOK$D_IN = 1'd1;
    WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead: dp1_tlp_xmtMetaOK$D_IN = 1'd0;
    default: dp1_tlp_xmtMetaOK$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign dp1_tlp_xmtMetaOK$EN =
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader &&
	     dp1_tlp_mRespF$D_OUT[71:62] == 10'd1 &&
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody &&
	     dp1_tlp_outDwRemain_200_ULE_4___d4985 &&
	     dp1_tlp_mRespF$D_OUT[135:128] == 8'h01 ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ;

  // register dp1_wci_cEdge
  assign dp1_wci_cEdge$D_IN = dp1_wci_reqF$D_OUT[36:34] ;
  assign dp1_wci_cEdge$EN = WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_cState
  assign dp1_wci_cState$D_IN = dp1_wci_nState ;
  assign dp1_wci_cState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge ;

  // register dp1_wci_ctlAckReg
  assign dp1_wci_ctlAckReg$D_IN = dp1_wci_ctlAckReg_1$whas ;
  assign dp1_wci_ctlAckReg$EN = 1'd1 ;

  // register dp1_wci_ctlOpActive
  assign dp1_wci_ctlOpActive$D_IN = !WILL_FIRE_RL_dp1_wci_ctl_op_complete ;
  assign dp1_wci_ctlOpActive$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete ||
	     WILL_FIRE_RL_dp1_wci_ctl_op_start ;

  // register dp1_wci_illegalEdge
  assign dp1_wci_illegalEdge$D_IN =
	     !MUX_dp1_wci_illegalEdge$write_1__SEL_1 &&
	     MUX_dp1_wci_illegalEdge$write_1__VAL_2 ;
  assign dp1_wci_illegalEdge$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge ||
	     MUX_dp1_wci_illegalEdge$write_1__SEL_2 ;

  // register dp1_wci_nState
  always@(dp1_wci_reqF$D_OUT)
  begin
    case (dp1_wci_reqF$D_OUT[36:34])
      3'd0: dp1_wci_nState$D_IN = 3'd1;
      3'd1: dp1_wci_nState$D_IN = 3'd2;
      3'd2: dp1_wci_nState$D_IN = 3'd3;
      default: dp1_wci_nState$D_IN = 3'd0;
    endcase
  end
  assign dp1_wci_nState$EN =
	     WILL_FIRE_RL_dp1_wci_ctl_op_start &&
	     (dp1_wci_reqF$D_OUT[36:34] == 3'd0 && dp1_wci_cState == 3'd0 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd1 &&
	      (dp1_wci_cState == 3'd1 || dp1_wci_cState == 3'd3) ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd2 && dp1_wci_cState == 3'd2 ||
	      dp1_wci_reqF$D_OUT[36:34] == 3'd3 &&
	      (dp1_wci_cState == 3'd3 || dp1_wci_cState == 3'd2 ||
	       dp1_wci_cState == 3'd1)) ;

  // register dp1_wci_reqF_countReg
  assign dp1_wci_reqF_countReg$D_IN =
	     (dp1_wci_wciReq$wget[59:57] != 3'd0) ?
	       dp1_wci_reqF_countReg + 2'd1 :
	       dp1_wci_reqF_countReg - 2'd1 ;
  assign dp1_wci_reqF_countReg$EN =
	     CAN_FIRE_RL_dp1_wci_reqF__updateLevelCounter ;

  // register dp1_wci_respF_c_r
  assign dp1_wci_respF_c_r$D_IN =
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ?
	       MUX_dp1_wci_respF_c_r$write_1__VAL_1 :
	       MUX_dp1_wci_respF_c_r$write_1__VAL_2 ;
  assign dp1_wci_respF_c_r$EN =
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ||
	     WILL_FIRE_RL_dp1_wci_respF_incCtr ;

  // register dp1_wci_respF_q_0
  assign dp1_wci_respF_q_0$EN =
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;
  always@(WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_1 or
	  MUX_dp1_wci_respF_q_0$write_1__SEL_2 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr or dp1_wci_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_1;
      MUX_dp1_wci_respF_q_0$write_1__SEL_2:
	  dp1_wci_respF_q_0$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_0$D_IN = dp1_wci_respF_q_1;
      default: dp1_wci_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register dp1_wci_respF_q_1
  assign dp1_wci_respF_q_1$EN =
	     WILL_FIRE_RL_dp1_wci_respF_both ||
	     WILL_FIRE_RL_dp1_wci_respF_incCtr && dp1_wci_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_dp1_wci_respF_decCtr ;
  always@(WILL_FIRE_RL_dp1_wci_respF_both or
	  MUX_dp1_wci_respF_q_1$write_1__VAL_1 or
	  MUX_dp1_wci_respF_q_1$write_1__SEL_2 or
	  MUX_dp1_wci_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_dp1_wci_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_wci_respF_both:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_1$write_1__VAL_1;
      MUX_dp1_wci_respF_q_1$write_1__SEL_2:
	  dp1_wci_respF_q_1$D_IN = MUX_dp1_wci_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_dp1_wci_respF_decCtr:
	  dp1_wci_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: dp1_wci_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register dp1_wci_sFlagReg
  assign dp1_wci_sFlagReg$D_IN = 1'b0 ;
  assign dp1_wci_sFlagReg$EN = 1'd1 ;

  // register dp1_wci_sThreadBusy_d
  assign dp1_wci_sThreadBusy_d$D_IN = 1'b0 ;
  assign dp1_wci_sThreadBusy_d$EN = 1'd1 ;

  // register dp1_wmi_addr
  assign dp1_wmi_addr$D_IN =
	     MUX_dp1_wmi_addr$write_1__SEL_1 ?
	       MUX_dp1_wmi_addr$write_1__VAL_1 :
	       dp1_wmi_wmi_reqF$D_OUT[25:12] ;
  assign dp1_wmi_addr$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_bufDwell
  assign dp1_wmi_bufDwell$D_IN =
	     (MUX_dp1_wmi_bufDwell$write_1__SEL_1 ||
	      WILL_FIRE_RL_dp1_wmi_doWriteFinalize) ?
	       2'd3 :
	       MUX_dp1_wmi_bufDwell$write_1__VAL_3 ;
  assign dp1_wmi_bufDwell$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doDwell ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_bytesRemainReq
  assign dp1_wmi_bytesRemainReq$D_IN =
	     WILL_FIRE_RL_dp1_wmi_getRequest ?
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_2 ;
  assign dp1_wmi_bytesRemainReq$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest ||
	     WILL_FIRE_RL_dp1_wmi_doReadReq ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ;

  // register dp1_wmi_bytesRemainResp
  assign dp1_wmi_bytesRemainResp$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       MUX_dp1_wmi_bytesRemainReq$write_1__VAL_1 :
	       MUX_dp1_wmi_bytesRemainResp$write_1__VAL_2 ;
  assign dp1_wmi_bytesRemainResp$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_doneWithMesg
  assign dp1_wmi_doneWithMesg$D_IN =
	     !MUX_dp1_wmi_doneWithMesg$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ;
  assign dp1_wmi_doneWithMesg$EN =
	     (WILL_FIRE_RL_dp1_wmi_doReadReq ||
	      WILL_FIRE_RL_dp1_wmi_doWriteReq) &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_lastMesg
  assign dp1_wmi_lastMesg$D_IN = dp1_wmi_thisMesg ;
  assign dp1_wmi_lastMesg$EN = CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_lclMesgAddr
  assign dp1_wmi_lclMesgAddr$D_IN = dp1_bml_lclMesgAddr[14:0] ;
  assign dp1_wmi_lclMesgAddr$EN = 1'd1 ;

  // register dp1_wmi_lclMetaAddr
  assign dp1_wmi_lclMetaAddr$D_IN = dp1_bml_lclMetaAddr[14:0] ;
  assign dp1_wmi_lclMetaAddr$EN = 1'd1 ;

  // register dp1_wmi_mesgBufReady
  assign dp1_wmi_mesgBufReady$D_IN = CAN_FIRE_RL_dp1_rRdy ;
  assign dp1_wmi_mesgBufReady$EN = 1'd1 ;

  // register dp1_wmi_mesgBusy
  assign dp1_wmi_mesgBusy$D_IN = !MUX_dp1_wmi_mesgBusy$write_1__SEL_1 ;
  assign dp1_wmi_mesgBusy$EN =
	     WILL_FIRE_RL_dp1_wmi_doDwell && dp1_wmi_bufDwell == 2'd1 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_mesgCount
  assign dp1_wmi_mesgCount$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 :
	       MUX_dp1_wmi_mesgCount$write_1__VAL_1 ;
  assign dp1_wmi_mesgCount$EN = dp1_wmi_mesgDone_1$whas ;

  // register dp1_wmi_mesgDone
  assign dp1_wmi_mesgDone$EN = 1'd1 ;
  assign dp1_wmi_mesgDone$D_IN = dp1_wmi_mesgDone_1$whas ;

  // register dp1_wmi_mesgMeta
  assign dp1_wmi_mesgMeta$D_IN =
	     MUX_dp1_wmi_bufDwell$write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_dp1_wmi_mesgMeta$write_1__VAL_2 ;
  assign dp1_wmi_mesgMeta$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_mesgStart
  assign dp1_wmi_mesgStart$EN = 1'd1 ;
  assign dp1_wmi_mesgStart$D_IN = dp1_wmi_mesgStart_1$whas ;

  // register dp1_wmi_metaBusy
  assign dp1_wmi_metaBusy$D_IN = !WILL_FIRE_RL_dp1_wmi_respMetadata ;
  assign dp1_wmi_metaBusy$EN =
	     WILL_FIRE_RL_dp1_wmi_respMetadata ||
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ;

  // register dp1_wmi_p4B
  assign dp1_wmi_p4B$D_IN =
	     MUX_dp1_wmi_bytesRemainResp$write_1__SEL_1 ?
	       dp1_wmi_wmi_reqF$D_OUT[15:14] :
	       dp1_wmi_p4B ;
  assign dp1_wmi_p4B$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ||
	     WILL_FIRE_RL_dp1_wmi_doReadResp ;

  // register dp1_wmi_rdActive
  assign dp1_wmi_rdActive$D_IN =
	     !MUX_dp1_wmi_rdActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd2 ;
  assign dp1_wmi_rdActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_reqCount
  assign dp1_wmi_reqCount$D_IN = dp1_wmi_reqCount + 16'd1 ;
  assign dp1_wmi_reqCount$EN = WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_thisMesg
  assign dp1_wmi_thisMesg$D_IN =
	     { dp1_wmi_mesgCount[7:0],
	       dp1_wmi_wmi_mFlagReg[31:24],
	       dp1_wmi_wmi_mFlagReg[15:0] } ;
  assign dp1_wmi_thisMesg$EN = CAN_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_blockReq
  assign dp1_wmi_wmi_blockReq$D_IN =
	     !MUX_dp1_wmi_bufDwell$write_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;
  assign dp1_wmi_wmi_blockReq$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[28] &&
	     dp1_wmi_wmi_reqF$D_OUT[27] ||
	     WILL_FIRE_RL_dp1_wmi_doReadReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wmi_dhF_countReg
  assign dp1_wmi_wmi_dhF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ?
	       dp1_wmi_wmi_dhF_countReg + 2'd1 :
	       dp1_wmi_wmi_dhF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_dhF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_dhF__updateLevelCounter ;

  // register dp1_wmi_wmi_dhF_levelsValid
  assign dp1_wmi_wmi_dhF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset ;
  assign dp1_wmi_wmi_dhF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && dp1_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_doWriteReq ||
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_reset ;

  // register dp1_wmi_wmi_errorSticky
  assign dp1_wmi_wmi_errorSticky$D_IN = 1'd1 ;
  assign dp1_wmi_wmi_errorSticky$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_dhF_enq && !dp1_wmi_wmi_dhF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     !dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && !dp1_wmi_wmi_reqF$FULL_N ;

  // register dp1_wmi_wmi_mFlagF_countReg
  assign dp1_wmi_wmi_mFlagF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ?
	       dp1_wmi_wmi_mFlagF_countReg + 2'd1 :
	       dp1_wmi_wmi_mFlagF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_mFlagF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_mFlagF__updateLevelCounter ;

  // register dp1_wmi_wmi_mFlagF_levelsValid
  assign dp1_wmi_wmi_mFlagF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;
  assign dp1_wmi_wmi_mFlagF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_getRequest && dp1_wmi_wmi_reqF$D_OUT[27] &&
	     dp1_wmi_wmi_mFlagF$EMPTY_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_enq &&
	     dp1_wmi_wmi_mFlagF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_wmi_mFlagF_reset ;

  // register dp1_wmi_wmi_mFlagReg
  assign dp1_wmi_wmi_mFlagReg$D_IN = dp1_wmi_wmi_mFlagF$D_OUT ;
  assign dp1_wmi_wmi_mFlagReg$EN =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;

  // register dp1_wmi_wmi_operateD
  assign dp1_wmi_wmi_operateD$D_IN = CAN_FIRE_RL_dp1_operating_actions ;
  assign dp1_wmi_wmi_operateD$EN = 1'd1 ;

  // register dp1_wmi_wmi_peerIsReady
  assign dp1_wmi_wmi_peerIsReady$D_IN = wmiS1_MReset_n ;
  assign dp1_wmi_wmi_peerIsReady$EN = 1'd1 ;

  // register dp1_wmi_wmi_reqF_countReg
  assign dp1_wmi_wmi_reqF_countReg$D_IN =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ?
	       dp1_wmi_wmi_reqF_countReg + 2'd1 :
	       dp1_wmi_wmi_reqF_countReg - 2'd1 ;
  assign dp1_wmi_wmi_reqF_countReg$EN =
	     CAN_FIRE_RL_dp1_wmi_wmi_reqF__updateLevelCounter ;

  // register dp1_wmi_wmi_reqF_levelsValid
  assign dp1_wmi_wmi_reqF_levelsValid$D_IN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset ;
  assign dp1_wmi_wmi_reqF_levelsValid$EN =
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_enq && dp1_wmi_wmi_reqF$FULL_N ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ||
	     WILL_FIRE_RL_dp1_wmi_wmi_reqF_reset ;

  // register dp1_wmi_wmi_respF_c_r
  assign dp1_wmi_wmi_respF_c_r$D_IN =
	     MUX_dp1_wmi_wmi_respF_c_r$write_1__VAL_1 ;
  assign dp1_wmi_wmi_respF_c_r$EN = CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_0
  assign dp1_wmi_wmi_respF_q_0$D_IN = dp1_wmi_wmi_respF_q_1 ;
  assign dp1_wmi_wmi_respF_q_0$EN = CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_respF_q_1
  assign dp1_wmi_wmi_respF_q_1$D_IN =
	     258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign dp1_wmi_wmi_respF_q_1$EN = CAN_FIRE_RL_dp1_wmi_wmi_respF_decCtr ;

  // register dp1_wmi_wmi_sFlagReg
  assign dp1_wmi_wmi_sFlagReg$D_IN = { x__h146283[7:0], x__h146282[23:0] } ;
  assign dp1_wmi_wmi_sFlagReg$EN = CAN_FIRE_RL_dp1_wmi_respMetadata ;

  // register dp1_wmi_wmi_statusR
  assign dp1_wmi_wmi_statusR$D_IN = 8'h0 ;
  assign dp1_wmi_wmi_statusR$EN = 1'b0 ;

  // register dp1_wmi_wmi_trafficSticky
  assign dp1_wmi_wmi_trafficSticky$D_IN = 1'b0 ;
  assign dp1_wmi_wmi_trafficSticky$EN = 1'b0 ;

  // register dp1_wmi_wrActive
  assign dp1_wmi_wrActive$D_IN =
	     !MUX_dp1_wmi_wrActive$write_1__SEL_1 &&
	     dp1_wmi_wmi_reqF$D_OUT[31:29] == 3'd1 ;
  assign dp1_wmi_wrActive$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 ||
	     WILL_FIRE_RL_dp1_wmi_getRequest ;

  // register dp1_wmi_wrFinalize
  assign dp1_wmi_wrFinalize$D_IN = MUX_dp1_wmi_wrFinalize$write_1__SEL_1 ;
  assign dp1_wmi_wrFinalize$EN =
	     WILL_FIRE_RL_dp1_wmi_doWriteReq &&
	     dp1_wmi_bytesRemainReq == 14'd32 &&
	     dp1_wmi_doneWithMesg ||
	     WILL_FIRE_RL_dp1_wmi_doWriteFinalize ;

  // register dp1_wmi_wrtCount
  assign dp1_wmi_wrtCount$D_IN = dp1_wmi_wrtCount + 16'd1 ;
  assign dp1_wmi_wrtCount$EN = CAN_FIRE_RL_dp1_wmi_doWriteReq ;

  // register dp1_wti_nowReq
  assign dp1_wti_nowReq$D_IN =
	     itc1_wti_sThreadBusy_d ?
	       67'h0AAAAAAAAAAAAAAAA :
	       itc1_wti_nowReq ;
  assign dp1_wti_nowReq$EN = 1'd1 ;

  // register itc0_wti_nowReq
  assign itc0_wti_nowReq$D_IN = { 3'd1, itc0_now$dD_OUT } ;
  assign itc0_wti_nowReq$EN = 1'd1 ;

  // register itc0_wti_sThreadBusy_d
  assign itc0_wti_sThreadBusy_d$D_IN = dp0_wti_isReset$VAL ;
  assign itc0_wti_sThreadBusy_d$EN = 1'd1 ;

  // register itc1_wti_nowReq
  assign itc1_wti_nowReq$D_IN = { 3'd1, itc1_now$dD_OUT } ;
  assign itc1_wti_nowReq$EN = 1'd1 ;

  // register itc1_wti_sThreadBusy_d
  assign itc1_wti_sThreadBusy_d$D_IN = dp1_wti_isReset$VAL ;
  assign itc1_wti_sThreadBusy_d$EN = 1'd1 ;

  // submodule cp
  assign cp$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest ;
  assign cp$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse ;
  assign cp$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign cp$server_request_put = sm0$c0_request_get ;
  assign cp$switch_x = switch_x ;
  assign cp$wci_Vm_0_SData = wci_m_0_SData ;
  assign cp$wci_Vm_0_SFlag = wci_m_0_SFlag ;
  assign cp$wci_Vm_0_SResp = wci_m_0_SResp ;
  assign cp$wci_Vm_10_SData = wci_m_10_SData ;
  assign cp$wci_Vm_10_SFlag = wci_m_10_SFlag ;
  assign cp$wci_Vm_10_SResp = wci_m_10_SResp ;
  assign cp$wci_Vm_11_SData = wci_m_11_SData ;
  assign cp$wci_Vm_11_SFlag = wci_m_11_SFlag ;
  assign cp$wci_Vm_11_SResp = wci_m_11_SResp ;
  assign cp$wci_Vm_12_SData = wci_m_12_SData ;
  assign cp$wci_Vm_12_SFlag = wci_m_12_SFlag ;
  assign cp$wci_Vm_12_SResp = wci_m_12_SResp ;
  assign cp$wci_Vm_13_SFlag = { 1'd1, dp0_wci_sFlagReg } ;
  assign cp$wci_Vm_13_SData = dp0_wci_respF_q_0[31:0] ;
  assign cp$wci_Vm_13_SResp = dp0_wci_respF_q_0[33:32] ;
  assign cp$wci_Vm_14_SData = dp1_wci_respF_q_0[31:0] ;
  assign cp$wci_Vm_14_SFlag = { 1'd1, dp1_wci_sFlagReg } ;
  assign cp$wci_Vm_14_SResp = dp1_wci_respF_q_0[33:32] ;
  assign cp$wci_Vm_1_SData = wci_m_1_SData ;
  assign cp$wci_Vm_1_SFlag = wci_m_1_SFlag ;
  assign cp$wci_Vm_1_SResp = wci_m_1_SResp ;
  assign cp$wci_Vm_2_SData = wci_m_2_SData ;
  assign cp$wci_Vm_2_SFlag = wci_m_2_SFlag ;
  assign cp$wci_Vm_2_SResp = wci_m_2_SResp ;
  assign cp$wci_Vm_3_SData = wci_m_3_SData ;
  assign cp$wci_Vm_3_SFlag = wci_m_3_SFlag ;
  assign cp$wci_Vm_3_SResp = wci_m_3_SResp ;
  assign cp$wci_Vm_4_SData = wci_m_4_SData ;
  assign cp$wci_Vm_4_SFlag = wci_m_4_SFlag ;
  assign cp$wci_Vm_4_SResp = wci_m_4_SResp ;
  assign cp$wci_Vm_5_SFlag = wci_m_5_SFlag ;
  assign cp$wci_Vm_5_SData = wci_m_5_SData ;
  assign cp$wci_Vm_5_SResp = wci_m_5_SResp ;
  assign cp$wci_Vm_6_SData = wci_m_6_SData ;
  assign cp$wci_Vm_6_SFlag = wci_m_6_SFlag ;
  assign cp$wci_Vm_6_SResp = wci_m_6_SResp ;
  assign cp$wci_Vm_7_SData = wci_m_7_SData ;
  assign cp$wci_Vm_7_SFlag = wci_m_7_SFlag ;
  assign cp$wci_Vm_7_SResp = wci_m_7_SResp ;
  assign cp$wci_Vm_8_SData = wci_m_8_SData ;
  assign cp$wci_Vm_8_SFlag = wci_m_8_SFlag ;
  assign cp$wci_Vm_8_SResp = wci_m_8_SResp ;
  assign cp$wci_Vm_9_SData = wci_m_9_SData ;
  assign cp$wci_Vm_9_SFlag = wci_m_9_SFlag ;
  assign cp$wci_Vm_9_SResp = wci_m_9_SResp ;
  assign cp$wci_Vm_0_SThreadBusy = wci_m_0_SThreadBusy ;
  assign cp$wci_Vm_10_SThreadBusy = wci_m_10_SThreadBusy ;
  assign cp$wci_Vm_11_SThreadBusy = wci_m_11_SThreadBusy ;
  assign cp$wci_Vm_12_SThreadBusy = wci_m_12_SThreadBusy ;
  assign cp$wci_Vm_13_SThreadBusy = CAN_FIRE_RL_stbConnect ;
  assign cp$wci_Vm_14_SThreadBusy = CAN_FIRE_RL_stbConnect_1 ;
  assign cp$wci_Vm_1_SThreadBusy = wci_m_1_SThreadBusy ;
  assign cp$wci_Vm_2_SThreadBusy = wci_m_2_SThreadBusy ;
  assign cp$wci_Vm_3_SThreadBusy = wci_m_3_SThreadBusy ;
  assign cp$wci_Vm_4_SThreadBusy = wci_m_4_SThreadBusy ;
  assign cp$wci_Vm_5_SThreadBusy = wci_m_5_SThreadBusy ;
  assign cp$wci_Vm_6_SThreadBusy = wci_m_6_SThreadBusy ;
  assign cp$wci_Vm_7_SThreadBusy = wci_m_7_SThreadBusy ;
  assign cp$wci_Vm_8_SThreadBusy = wci_m_8_SThreadBusy ;
  assign cp$wci_Vm_9_SThreadBusy = wci_m_9_SThreadBusy ;

  // submodule dp0_bram_memory
  assign dp0_bram_memory$ADDRB = dp0_wmi_lclMetaAddr[14:4] ;
  assign dp0_bram_memory$WEB = !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory$DIB =
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ?
	       32'd0 :
	       MUX_dp0_bram_memory$b_put_3__VAL_2 ;
  assign dp0_bram_memory$ENB =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_memory$WEA =
	     !MUX_dp0_bram_memory$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory$a_put_2__VAL_2 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_1:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory$a_put_1__SEL_2:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_2;
      MUX_dp0_bram_memory$a_put_1__SEL_3:
	  dp0_bram_memory$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$ADDRA = MUX_dp0_bram_memory$a_put_2__VAL_4;
      default: dp0_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory$ENA =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4575 ||
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory$a_put_3__VAL_2 or
	  MUX_dp0_bram_memory$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory$a_put_1__SEL_2:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_2;
      MUX_dp0_bram_memory$a_put_1__SEL_3:
	  dp0_bram_memory$DIA = MUX_dp0_bram_memory$a_put_3__VAL_3;
      MUX_dp0_bram_memory$a_put_1__SEL_1 || WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory$DIA = 32'd0;
      default: dp0_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp0_bram_memory_1
  assign dp0_bram_memory_1$ADDRB = dp0_wmi_lclMetaAddr[14:4] ;
  assign dp0_bram_memory_1$WEB = !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_1$DIB =
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ?
	       32'd0 :
	       MUX_dp0_bram_memory_1$b_put_3__VAL_2 ;
  assign dp0_bram_memory_1$ENB =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_memory_1$WEA =
	     !MUX_dp0_bram_memory_1$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_2 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_1:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_1$a_put_1__SEL_2:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_2;
      MUX_dp0_bram_memory_1$a_put_1__SEL_3:
	  dp0_bram_memory_1$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$ADDRA = MUX_dp0_bram_memory_1$a_put_2__VAL_4;
      default: dp0_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4572 ||
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_1$a_put_3__VAL_2 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_1$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_1$a_put_1__SEL_2:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory_1$a_put_3__VAL_2;
      MUX_dp0_bram_memory_1$a_put_1__SEL_3:
	  dp0_bram_memory_1$DIA = MUX_dp0_bram_memory$a_put_3__VAL_3;
      MUX_dp0_bram_memory_1$a_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_1$DIA = 32'd0;
      default: dp0_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp0_bram_memory_2
  assign dp0_bram_memory_2$ADDRB = dp0_wmi_lclMetaAddr[14:4] ;
  assign dp0_bram_memory_2$WEB = !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_2$DIB =
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ?
	       32'd0 :
	       dp0_wmi_nowW$wget[63:32] ;
  assign dp0_bram_memory_2$ENB =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_memory_2$WEA =
	     !MUX_dp0_bram_memory_2$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_2 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_1:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_2$a_put_1__SEL_2:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_2;
      MUX_dp0_bram_memory_2$a_put_1__SEL_3:
	  dp0_bram_memory_2$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$ADDRA = MUX_dp0_bram_memory_2$a_put_2__VAL_4;
      default: dp0_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4573 ||
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_2$a_put_3__VAL_2 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_2$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_2$a_put_1__SEL_2:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory_2$a_put_3__VAL_2;
      MUX_dp0_bram_memory_2$a_put_1__SEL_3:
	  dp0_bram_memory_2$DIA = MUX_dp0_bram_memory$a_put_3__VAL_3;
      MUX_dp0_bram_memory_2$a_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_2$DIA = 32'd0;
      default: dp0_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp0_bram_memory_3
  assign dp0_bram_memory_3$ADDRB = dp0_wmi_lclMetaAddr[14:4] ;
  assign dp0_bram_memory_3$WEB = !WILL_FIRE_RL_dp0_wmi_reqMetadata ;
  assign dp0_bram_memory_3$DIB =
	     WILL_FIRE_RL_dp0_wmi_reqMetadata ?
	       32'd0 :
	       dp0_wmi_nowW$wget[31:0] ;
  assign dp0_bram_memory_3$ENB =
	     CAN_FIRE_RL_dp0_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp0_bram_memory_3$WEA =
	     !MUX_dp0_bram_memory_3$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  dp0_tlp_mReqF$D_OUT or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq or
	  MUX_dp0_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_1:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[41:31];
      MUX_dp0_bram_memory_3$a_put_1__SEL_2:
	  dp0_bram_memory_3$ADDRA = dp0_tlp_mReqF$D_OUT[62:52];
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$ADDRA = MUX_dp0_bram_memory_3$a_put_2__VAL_4;
      default: dp0_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign dp0_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_writeReq &&
	     dp0_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp0_tlp_writeData &&
	     IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4574 ||
	     WILL_FIRE_RL_dp0_tlp_read_NextReq ;
  always@(MUX_dp0_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp0_bram_memory$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp0_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp0_bram_memory_3$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp0_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_bram_memory_3$a_put_1__SEL_2:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory$a_put_3__VAL_3;
      MUX_dp0_bram_memory_3$a_put_1__SEL_3:
	  dp0_bram_memory_3$DIA = MUX_dp0_bram_memory_3$a_put_3__VAL_3;
      MUX_dp0_bram_memory_3$a_put_1__SEL_1 ||
      WILL_FIRE_RL_dp0_tlp_read_NextReq:
	  dp0_bram_memory_3$DIA = 32'd0;
      default: dp0_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp0_bram_serverAdapterA_1_outDataCore
  assign dp0_bram_serverAdapterA_1_outDataCore$D_IN = dp0_bram_memory_1$DOA ;
  assign dp0_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_1_outData_enqAndDeq ;

  // submodule dp0_bram_serverAdapterA_2_outDataCore
  assign dp0_bram_serverAdapterA_2_outDataCore$D_IN = dp0_bram_memory_2$DOA ;
  assign dp0_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_2_outData_enqAndDeq ;

  // submodule dp0_bram_serverAdapterA_3_outDataCore
  assign dp0_bram_serverAdapterA_3_outDataCore$D_IN = dp0_bram_memory_3$DOA ;
  assign dp0_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_enqAndDeq ;

  // submodule dp0_bram_serverAdapterA_outDataCore
  assign dp0_bram_serverAdapterA_outDataCore$D_IN = dp0_bram_memory$DOA ;
  assign dp0_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_outData_enqAndDeq ;

  // submodule dp0_bram_serverAdapterB_1_outDataCore
  assign dp0_bram_serverAdapterB_1_outDataCore$D_IN = dp0_bram_memory_1$DOB ;
  assign dp0_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_1_outData_enqAndDeq ;

  // submodule dp0_bram_serverAdapterB_2_outDataCore
  assign dp0_bram_serverAdapterB_2_outDataCore$D_IN = dp0_bram_memory_2$DOB ;
  assign dp0_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_2_outData_enqAndDeq ;

  // submodule dp0_bram_serverAdapterB_3_outDataCore
  assign dp0_bram_serverAdapterB_3_outDataCore$D_IN = dp0_bram_memory_3$DOB ;
  assign dp0_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_3_outData_enqAndDeq ;

  // submodule dp0_bram_serverAdapterB_outDataCore
  assign dp0_bram_serverAdapterB_outDataCore$D_IN = dp0_bram_memory$DOB ;
  assign dp0_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;
  assign dp0_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_deqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ;
  assign dp0_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqOnly ||
	     WILL_FIRE_RL_dp0_bram_serverAdapterB_outData_enqAndDeq ;

  // submodule dp0_tlp_inF
  assign dp0_tlp_inF$D_IN = sm1$c0_request_get ;
  assign dp0_tlp_inF$ENQ = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign dp0_tlp_inF$CLR = 1'b0 ;
  assign dp0_tlp_inF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_tlpRcv ;

  // submodule dp0_tlp_mReqF
  assign dp0_tlp_mReqF$CLR = 1'b0 ;
  always@(MUX_dp0_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader or
	  MUX_dp0_tlp_mReqF$enq_1__VAL_5 or
	  MUX_dp0_tlp_mReqF$enq_1__SEL_6 or MUX_dp0_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp0_tlp_mReqF$enq_1__SEL_1:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_5;
      MUX_dp0_tlp_mReqF$enq_1__SEL_6:
	  dp0_tlp_mReqF$D_IN = MUX_dp0_tlp_mReqF$enq_1__VAL_6;
      default: dp0_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp0_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_tlpRcv &&
	     dp0_tlp_inF_first__398_BIT_152_399_AND_NOT_dp0_ETC___d3431 ||
	     WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody ;
  assign dp0_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_NextReq &&
	     dp0_tlp_readRemainDWLen_090_ULE_4___d3091 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstReq &&
	     dp0_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp0_tlp_writeReq ||
	     WILL_FIRE_RL_dp0_tlp_writeData ;

  // submodule dp0_tlp_mRespF
  assign dp0_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ;
  assign dp0_tlp_mRespF$CLR = 1'b0 ;
  assign dp0_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp ;
  assign dp0_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp ?
	       MUX_dp0_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp0_tlp_mRespF$enq_1__VAL_2 ;

  // submodule dp0_tlp_outF
  assign dp0_tlp_outF$DEQ = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign dp0_tlp_outF$CLR = 1'b0 ;
  assign dp0_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp0_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent ;
  always@(WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta or
	  MUX_dp0_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg or
	  MUX_dp0_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead or
	  MUX_dp0_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody or
	  MUX_dp0_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp0_tlp_dataXmt_Header or
	  MUX_dp0_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader or
	  MUX_dp0_tlp_outF$enq_1__VAL_6 or
	  MUX_dp0_tlp_outDwRemain$write_1__SEL_2 or
	  MUX_dp0_tlp_outF$enq_1__VAL_7 or
	  MUX_dp0_tlp_outF$enq_1__SEL_8 or MUX_dp0_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp0_tlp_dataXmt_Header:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_6;
      MUX_dp0_tlp_outDwRemain$write_1__SEL_2:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_7;
      MUX_dp0_tlp_outF$enq_1__SEL_8:
	  dp0_tlp_outF$D_IN = MUX_dp0_tlp_outF$enq_1__VAL_8;
      default: dp0_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp0_tlp_readReq
  assign dp0_tlp_readReq$D_IN = dp0_tlp_mReqF$D_OUT[59:0] ;
  assign dp0_tlp_readReq$CLR = 1'b0 ;
  assign dp0_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp0_tlp_read_NextResp &&
	     dp0_tlp_rdRespDwRemain_935_ULE_4___d2936 ||
	     WILL_FIRE_RL_dp0_tlp_read_FirstResp &&
	     dp0_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp0_tlp_readReq$ENQ = CAN_FIRE_RL_dp0_tlp_read_FirstReq ;

  // submodule dp0_wci_reqF
  assign dp0_wci_reqF$D_IN = dp0_wci_wciReq$wget ;
  assign dp0_wci_reqF$DEQ = dp0_wci_reqF_r_deq$whas ;
  assign dp0_wci_reqF$ENQ = CAN_FIRE_RL_dp0_wci_reqF_enq ;
  assign dp0_wci_reqF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_dhF
  assign dp0_wmi_wmi_dhF$D_IN = dp0_wmi_wmi_wmiDh$wget ;
  assign dp0_wmi_wmi_dhF$DEQ = CAN_FIRE_RL_dp0_wmi_doWriteReq ;
  assign dp0_wmi_wmi_dhF$ENQ =
	     MUX_dp0_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp0_wmi_wmi_mFlagF
  assign dp0_wmi_wmi_mFlagF$D_IN = wmiS0_arg_mFlag ;
  assign dp0_wmi_wmi_mFlagF$ENQ =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_mFlagF$CLR = 1'b0 ;
  assign dp0_wmi_wmi_mFlagF$DEQ =
	     MUX_dp0_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;

  // submodule dp0_wmi_wmi_reqF
  assign dp0_wmi_wmi_reqF$D_IN = dp0_wmi_wmi_wmiReq$wget ;
  assign dp0_wmi_wmi_reqF$ENQ =
	     MUX_dp0_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp0_wmi_wmi_reqF$CLR = 1'b0 ;
  assign dp0_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp0_wmi_getRequest ;

  // submodule dp1_bram_memory
  assign dp1_bram_memory$ADDRB = dp1_wmi_lclMetaAddr[14:4] ;
  assign dp1_bram_memory$WEB = !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory$DIB =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ?
	       32'd0 :
	       MUX_dp1_bram_memory$b_put_3__VAL_2 ;
  assign dp1_bram_memory$ENB =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_memory$WEA =
	     !MUX_dp1_bram_memory$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  always@(MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory$a_put_2__VAL_2 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_1:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory$a_put_1__SEL_2:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_2;
      MUX_dp1_bram_memory$a_put_1__SEL_3:
	  dp1_bram_memory$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$ADDRA = MUX_dp1_bram_memory$a_put_2__VAL_4;
      default: dp1_bram_memory$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory$ENA =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4547 ||
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd0 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  always@(MUX_dp1_bram_memory$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory$a_put_3__VAL_2 or
	  MUX_dp1_bram_memory$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory$a_put_1__SEL_2:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_2;
      MUX_dp1_bram_memory$a_put_1__SEL_3:
	  dp1_bram_memory$DIA = MUX_dp1_bram_memory$a_put_3__VAL_3;
      MUX_dp1_bram_memory$a_put_1__SEL_1 || WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory$DIA = 32'd0;
      default: dp1_bram_memory$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp1_bram_memory_1
  assign dp1_bram_memory_1$ADDRB = dp1_wmi_lclMetaAddr[14:4] ;
  assign dp1_bram_memory_1$WEB = !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_1$DIB =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ?
	       32'd0 :
	       MUX_dp1_bram_memory_1$b_put_3__VAL_2 ;
  assign dp1_bram_memory_1$ENB =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_memory_1$WEA =
	     !MUX_dp1_bram_memory_1$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_2 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_1$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_1:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_1$a_put_1__SEL_2:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_2;
      MUX_dp1_bram_memory_1$a_put_1__SEL_3:
	  dp1_bram_memory_1$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$ADDRA = MUX_dp1_bram_memory_1$a_put_2__VAL_4;
      default: dp1_bram_memory_1$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dp1_bram_memory_1$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_1$a_put_3__VAL_2 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_1$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_1$a_put_1__SEL_2:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory_1$a_put_3__VAL_2;
      MUX_dp1_bram_memory_1$a_put_1__SEL_3:
	  dp1_bram_memory_1$DIA = MUX_dp1_bram_memory$a_put_3__VAL_3;
      MUX_dp1_bram_memory_1$a_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_1$DIA = 32'd0;
      default: dp1_bram_memory_1$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_1$ENA =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4548 ||
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd1 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;

  // submodule dp1_bram_memory_2
  assign dp1_bram_memory_2$ADDRB = dp1_wmi_lclMetaAddr[14:4] ;
  assign dp1_bram_memory_2$WEB = !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_2$DIB =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ?
	       32'd0 :
	       dp1_wmi_nowW$wget[63:32] ;
  assign dp1_bram_memory_2$ENB =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_memory_2$WEA =
	     !MUX_dp1_bram_memory_2$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_2 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_2$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_1:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_2$a_put_1__SEL_2:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_2;
      MUX_dp1_bram_memory_2$a_put_1__SEL_3:
	  dp1_bram_memory_2$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$ADDRA = MUX_dp1_bram_memory_2$a_put_2__VAL_4;
      default: dp1_bram_memory_2$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_2$ENA =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4602 ||
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd2 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  always@(MUX_dp1_bram_memory_2$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_2$a_put_3__VAL_2 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_2$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_2$a_put_1__SEL_2:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory_2$a_put_3__VAL_2;
      MUX_dp1_bram_memory_2$a_put_1__SEL_3:
	  dp1_bram_memory_2$DIA = MUX_dp1_bram_memory$a_put_3__VAL_3;
      MUX_dp1_bram_memory_2$a_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_2$DIA = 32'd0;
      default: dp1_bram_memory_2$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp1_bram_memory_3
  assign dp1_bram_memory_3$ADDRB = dp1_wmi_lclMetaAddr[14:4] ;
  assign dp1_bram_memory_3$WEB = !WILL_FIRE_RL_dp1_wmi_reqMetadata ;
  assign dp1_bram_memory_3$DIB =
	     WILL_FIRE_RL_dp1_wmi_reqMetadata ?
	       32'd0 :
	       dp1_wmi_nowW$wget[31:0] ;
  assign dp1_bram_memory_3$ENB =
	     CAN_FIRE_RL_dp1_bram_serverAdapterB_3_stageReadResponseAlways ;
  assign dp1_bram_memory_3$WEA =
	     !MUX_dp1_bram_memory_3$a_put_1__SEL_1 &&
	     !WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  dp1_tlp_mReqF$D_OUT or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq or
	  MUX_dp1_bram_memory_3$a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_1:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[41:31];
      MUX_dp1_bram_memory_3$a_put_1__SEL_2:
	  dp1_bram_memory_3$ADDRA = dp1_tlp_mReqF$D_OUT[62:52];
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_3;
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$ADDRA = MUX_dp1_bram_memory_3$a_put_2__VAL_4;
      default: dp1_bram_memory_3$ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign dp1_bram_memory_3$ENA =
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[30:29] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_writeReq &&
	     dp1_tlp_mReqF$D_OUT[51:50] == 2'd3 ||
	     WILL_FIRE_RL_dp1_tlp_writeData &&
	     IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4549 ||
	     WILL_FIRE_RL_dp1_tlp_read_NextReq ;
  always@(MUX_dp1_bram_memory_3$a_put_1__SEL_2 or
	  MUX_dp1_bram_memory$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_3 or
	  MUX_dp1_bram_memory_3$a_put_3__VAL_3 or
	  MUX_dp1_bram_memory_3$a_put_1__SEL_1 or
	  WILL_FIRE_RL_dp1_tlp_read_NextReq)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_bram_memory_3$a_put_1__SEL_2:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory$a_put_3__VAL_3;
      MUX_dp1_bram_memory_3$a_put_1__SEL_3:
	  dp1_bram_memory_3$DIA = MUX_dp1_bram_memory_3$a_put_3__VAL_3;
      MUX_dp1_bram_memory_3$a_put_1__SEL_1 ||
      WILL_FIRE_RL_dp1_tlp_read_NextReq:
	  dp1_bram_memory_3$DIA = 32'd0;
      default: dp1_bram_memory_3$DIA = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp1_bram_serverAdapterA_1_outDataCore
  assign dp1_bram_serverAdapterA_1_outDataCore$D_IN = dp1_bram_memory_1$DOA ;
  assign dp1_bram_serverAdapterA_1_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterA_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterA_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_1_outData_enqAndDeq ;

  // submodule dp1_bram_serverAdapterA_2_outDataCore
  assign dp1_bram_serverAdapterA_2_outDataCore$D_IN = dp1_bram_memory_2$DOA ;
  assign dp1_bram_serverAdapterA_2_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterA_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterA_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_2_outData_enqAndDeq ;

  // submodule dp1_bram_serverAdapterA_3_outDataCore
  assign dp1_bram_serverAdapterA_3_outDataCore$D_IN = dp1_bram_memory_3$DOA ;
  assign dp1_bram_serverAdapterA_3_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterA_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterA_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_3_outData_enqAndDeq ;

  // submodule dp1_bram_serverAdapterA_outDataCore
  assign dp1_bram_serverAdapterA_outDataCore$D_IN = dp1_bram_memory$DOA ;
  assign dp1_bram_serverAdapterA_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterA_outData_enqAndDeq ;

  // submodule dp1_bram_serverAdapterB_1_outDataCore
  assign dp1_bram_serverAdapterB_1_outDataCore$D_IN = dp1_bram_memory_1$DOB ;
  assign dp1_bram_serverAdapterB_1_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterB_1_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterB_1_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_1_outData_enqAndDeq ;

  // submodule dp1_bram_serverAdapterB_2_outDataCore
  assign dp1_bram_serverAdapterB_2_outDataCore$D_IN = dp1_bram_memory_2$DOB ;
  assign dp1_bram_serverAdapterB_2_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterB_2_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterB_2_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_2_outData_enqAndDeq ;

  // submodule dp1_bram_serverAdapterB_3_outDataCore
  assign dp1_bram_serverAdapterB_3_outDataCore$D_IN = dp1_bram_memory_3$DOB ;
  assign dp1_bram_serverAdapterB_3_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterB_3_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterB_3_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_3_outData_enqAndDeq ;

  // submodule dp1_bram_serverAdapterB_outDataCore
  assign dp1_bram_serverAdapterB_outDataCore$D_IN = dp1_bram_memory$DOB ;
  assign dp1_bram_serverAdapterB_outDataCore$CLR = 1'b0 ;
  assign dp1_bram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_deqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ;
  assign dp1_bram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqOnly ||
	     WILL_FIRE_RL_dp1_bram_serverAdapterB_outData_enqAndDeq ;

  // submodule dp1_tlp_inF
  assign dp1_tlp_inF$D_IN = sm2$c0_request_get ;
  assign dp1_tlp_inF$ENQ = CAN_FIRE_RL_ClientServerRequest_4 ;
  assign dp1_tlp_inF$CLR = 1'b0 ;
  assign dp1_tlp_inF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_tlpRcv ;

  // submodule dp1_tlp_mReqF
  assign dp1_tlp_mReqF$CLR = 1'b0 ;
  always@(MUX_dp1_tlp_mReqF$enq_1__SEL_1 or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader or
	  MUX_dp1_tlp_mReqF$enq_1__VAL_5 or
	  MUX_dp1_tlp_mReqF$enq_1__SEL_6 or MUX_dp1_tlp_mReqF$enq_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dp1_tlp_mReqF$enq_1__SEL_1:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_3;
      WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_4;
      WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_5;
      MUX_dp1_tlp_mReqF$enq_1__SEL_6:
	  dp1_tlp_mReqF$D_IN = MUX_dp1_tlp_mReqF$enq_1__VAL_6;
      default: dp1_tlp_mReqF$D_IN =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dp1_tlp_mReqF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_tlpRcv &&
	     dp1_tlp_inF_first__241_BIT_152_242_AND_NOT_dp1_ETC___d1274 ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody ;
  assign dp1_tlp_mReqF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_NextReq &&
	     dp1_tlp_readRemainDWLen_32_ULE_4___d933 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstReq &&
	     dp1_tlp_mReqF$D_OUT[28:19] == 10'd1 ||
	     WILL_FIRE_RL_dp1_tlp_writeReq ||
	     WILL_FIRE_RL_dp1_tlp_writeData ;

  // submodule dp1_tlp_mRespF
  assign dp1_tlp_mRespF$DEQ =
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ;
  assign dp1_tlp_mRespF$CLR = 1'b0 ;
  assign dp1_tlp_mRespF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp ;
  assign dp1_tlp_mRespF$D_IN =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp ?
	       MUX_dp1_tlp_mRespF$enq_1__VAL_1 :
	       MUX_dp1_tlp_mRespF$enq_1__VAL_2 ;

  // submodule dp1_tlp_outF
  assign dp1_tlp_outF$DEQ = CAN_FIRE_RL_ClientServerResponse_4 ;
  assign dp1_tlp_outF$CLR = 1'b0 ;
  assign dp1_tlp_outF$ENQ =
	     WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg ||
	     WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Header ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader ||
	     WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody ||
	     WILL_FIRE_RL_dp1_tlp_dataXmt_Body ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent ||
	     WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell ||
	     WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent ;
  always@(WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg or
	  MUX_dp1_tlp_outF$enq_1__VAL_1 or
	  WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta or
	  MUX_dp1_tlp_outF$enq_1__VAL_2 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead or
	  MUX_dp1_tlp_outF$enq_1__VAL_3 or
	  WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody or
	  MUX_dp1_tlp_outF$enq_1__VAL_4 or
	  WILL_FIRE_RL_dp1_tlp_dataXmt_Header or
	  MUX_dp1_tlp_outF$enq_1__VAL_5 or
	  WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader or
	  MUX_dp1_tlp_outF$enq_1__VAL_6 or
	  MUX_dp1_tlp_outDwRemain$write_1__SEL_2 or
	  MUX_dp1_tlp_outF$enq_1__VAL_7 or
	  MUX_dp1_tlp_outF$enq_1__SEL_8 or MUX_dp1_tlp_outF$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_1;
      WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_2;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_3;
      WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_4;
      WILL_FIRE_RL_dp1_tlp_dataXmt_Header:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_5;
      WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_6;
      MUX_dp1_tlp_outDwRemain$write_1__SEL_2:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_7;
      MUX_dp1_tlp_outF$enq_1__SEL_8:
	  dp1_tlp_outF$D_IN = MUX_dp1_tlp_outF$enq_1__VAL_8;
      default: dp1_tlp_outF$D_IN =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // submodule dp1_tlp_readReq
  assign dp1_tlp_readReq$D_IN = dp1_tlp_mReqF$D_OUT[59:0] ;
  assign dp1_tlp_readReq$CLR = 1'b0 ;
  assign dp1_tlp_readReq$DEQ =
	     WILL_FIRE_RL_dp1_tlp_read_NextResp &&
	     dp1_tlp_rdRespDwRemain_77_ULE_4___d778 ||
	     WILL_FIRE_RL_dp1_tlp_read_FirstResp &&
	     dp1_tlp_readReq$D_OUT[28:19] == 10'd1 ;
  assign dp1_tlp_readReq$ENQ = CAN_FIRE_RL_dp1_tlp_read_FirstReq ;

  // submodule dp1_wci_reqF
  assign dp1_wci_reqF$D_IN = dp1_wci_wciReq$wget ;
  assign dp1_wci_reqF$DEQ = dp1_wci_reqF_r_deq$whas ;
  assign dp1_wci_reqF$ENQ = CAN_FIRE_RL_dp1_wci_reqF_enq ;
  assign dp1_wci_reqF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_dhF
  assign dp1_wmi_wmi_dhF$D_IN = dp1_wmi_wmi_wmiDh$wget ;
  assign dp1_wmi_wmi_dhF$DEQ = CAN_FIRE_RL_dp1_wmi_doWriteReq ;
  assign dp1_wmi_wmi_dhF$ENQ =
	     MUX_dp1_wmi_wmi_dhF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_dhF$CLR = 1'b0 ;

  // submodule dp1_wmi_wmi_mFlagF
  assign dp1_wmi_wmi_mFlagF$D_IN = wmiS1_arg_mFlag ;
  assign dp1_wmi_wmi_mFlagF$ENQ =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_mFlagF$CLR = 1'b0 ;
  assign dp1_wmi_wmi_mFlagF$DEQ =
	     MUX_dp1_wmi_wmi_mFlagF_levelsValid$write_1__SEL_2 ;

  // submodule dp1_wmi_wmi_reqF
  assign dp1_wmi_wmi_reqF$D_IN = dp1_wmi_wmi_wmiReq$wget ;
  assign dp1_wmi_wmi_reqF$ENQ =
	     MUX_dp1_wmi_wmi_reqF_levelsValid$write_1__SEL_3 ;
  assign dp1_wmi_wmi_reqF$CLR = 1'b0 ;
  assign dp1_wmi_wmi_reqF$DEQ = WILL_FIRE_RL_dp1_wmi_getRequest ;

  // submodule itc0_now
  assign itc0_now$sD_IN = cp$cpNow ;
  assign itc0_now$sEN = itc0_now$sRDY ;

  // submodule itc1_now
  assign itc1_now$sD_IN = cp$cpNow ;
  assign itc1_now$sEN = itc1_now$sRDY ;

  // submodule sm0
  assign sm0$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest ;
  assign sm0$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse ;
  assign sm0$EN_c1_request_get = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign sm0$EN_c1_response_put = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign sm0$EN_s_request_put = EN_server_request_put ;
  assign sm0$EN_s_response_get = EN_server_response_get ;
  assign sm0$c0_response_put = cp$server_response_get ;
  assign sm0$c1_response_put = sm1$s_response_get ;
  assign sm0$s_request_put = server_request_put ;

  // submodule sm1
  assign sm1$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign sm1$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_2 ;
  assign sm1$EN_c1_request_get = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign sm1$EN_c1_response_put = CAN_FIRE_RL_ClientServerResponse_3 ;
  assign sm1$EN_s_request_put = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign sm1$EN_s_response_get = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign sm1$c0_response_put = dp0_tlp_outF$D_OUT ;
  assign sm1$c1_response_put = sm2$s_response_get ;
  assign sm1$s_request_put = sm0$c1_request_get ;

  // submodule sm2
  assign sm2$EN_c0_request_get = CAN_FIRE_RL_ClientServerRequest_4 ;
  assign sm2$EN_c0_response_put = CAN_FIRE_RL_ClientServerResponse_4 ;
  assign sm2$EN_c1_request_get = sm2$RDY_c1_request_get ;
  assign sm2$EN_s_request_put = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign sm2$EN_s_response_get = CAN_FIRE_RL_ClientServerResponse_3 ;
  assign sm2$EN_c1_response_put = 1'b0 ;
  assign sm2$c0_response_put = dp1_tlp_outF$D_OUT ;
  assign sm2$s_request_put = sm1$c1_request_get ;
  assign sm2$c1_response_put = 153'h0 ;

  // remaining internal signals
  assign IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3231 =
	     (IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3208 ||
	      dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779) &&
	     (IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3218 ||
	      dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780) &&
	     (IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3228 ||
	      dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781) ;
  assign IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1073 =
	     (IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1050 ||
	      dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146) &&
	     (IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1060 ||
	      dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147) &&
	     (IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1070 ||
	      dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148) ;
  assign IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3027 =
	     (dp0_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp0_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp0_bram_serverAdapterA_outData_enqData$whas) &&
	       dp0_bram_serverAdapterA_outData_outData$whas :
	       IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3022 &&
	       CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q19 ;
  assign IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d869 =
	     (dp1_tlp_readReq$D_OUT[30:29] == 2'd0) ?
	       (dp1_bram_serverAdapterA_outDataCore$EMPTY_N ||
		dp1_bram_serverAdapterA_outData_enqData$whas) &&
	       dp1_bram_serverAdapterA_outData_outData$whas :
	       IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d864 &&
	       CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q17 ;
  assign NOT_dp0_bml_lclBufDone_447_451_AND_IF_dp0_bml__ETC___d2487 =
	     !dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q20 ;
  assign NOT_dp0_tlp_mReqF_first__101_BITS_28_TO_19_156_ETC___d3170 =
	     (dp0_tlp_mReqF$D_OUT[28:19] != 10'd1 || dp0_tlp_mReqF$EMPTY_N) &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q25 ;
  assign NOT_dp0_wmi_wrActive_684_702_OR_NOT_dp0_wmi_rd_ETC___d2710 =
	     (!dp0_wmi_wrActive || !dp0_wmi_rdActive) &&
	     !dp0_wmi_wrFinalize &&
	     (dp0_wmi_mesgBufReady || dp0_wmi_mesgBusy) ;
  assign NOT_dp1_bml_lclBufDone_87_91_AND_IF_dp1_bml_dp_ETC___d327 =
	     !dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q1 ;
  assign NOT_dp1_tlp_mReqF_first__43_BITS_28_TO_19_98_E_ETC___d1012 =
	     (dp1_tlp_mReqF$D_OUT[28:19] != 10'd1 || dp1_tlp_mReqF$EMPTY_N) &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q23 ;
  assign NOT_dp1_wmi_wrActive_25_43_OR_NOT_dp1_wmi_rdAc_ETC___d551 =
	     (!dp1_wmi_wrActive || !dp1_wmi_rdActive) &&
	     !dp1_wmi_wrFinalize &&
	     (dp1_wmi_mesgBufReady || dp1_wmi_mesgBusy) ;
  assign _dfoo15 =
	     dp0_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     dp0_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign _dfoo5 =
	     dp1_tlp_mRespF$D_OUT[71:62] != 10'd1 ||
	     dp1_tlp_mRespF$D_OUT[42:35] == 8'h01 ;
  assign ab__h10959 = WILL_FIRE_RL_dp0_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign ab__h12490 =
	     (MUX_dp0_bram_memory_3$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h13888 = WILL_FIRE_RL_dp0_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign ab__h3701 =
	     (MUX_dp0_bram_memory$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h5101 = WILL_FIRE_RL_dp0_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign ab__h6632 =
	     (MUX_dp0_bram_memory_1$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign ab__h8030 = WILL_FIRE_RL_dp0_wmi_reqMetadata ? 2'd0 : 2'd2 ;
  assign ab__h80301 = dp1_bram_serverAdapterA_writeWithResp$wget ;
  assign ab__h81701 = dp1_bram_serverAdapterB_writeWithResp$wget ;
  assign ab__h83232 = dp1_bram_serverAdapterA_1_writeWithResp$wget ;
  assign ab__h84630 = dp1_bram_serverAdapterB_1_writeWithResp$wget ;
  assign ab__h86161 = dp1_bram_serverAdapterA_2_writeWithResp$wget ;
  assign ab__h87559 = dp1_bram_serverAdapterB_2_writeWithResp$wget ;
  assign ab__h89090 = dp1_bram_serverAdapterA_3_writeWithResp$wget ;
  assign ab__h90488 = dp1_bram_serverAdapterB_3_writeWithResp$wget ;
  assign ab__h9561 =
	     (MUX_dp0_bram_memory_2$a_put_1__SEL_1 ||
	      WILL_FIRE_RL_dp0_tlp_read_NextReq) ?
	       2'd0 :
	       2'd2 ;
  assign byteCount__h122875 = x__h122987 - y__h122988 ;
  assign byteCount__h46311 = x__h46423 - y__h46424 ;
  assign dp0_bml_crdBuf_value_531_EQ_dp0_bml_crdBuf_mod_ETC___d4609 =
	     dp0_bml_crdBuf_value == dp0_bml_crdBuf_modulus ;
  assign dp0_bml_fabBuf_value_520_EQ_dp0_bml_fabBuf_mod_ETC___d5195 =
	     dp0_bml_fabBuf_value == dp0_bml_fabBuf_modulus ;
  assign dp0_bml_fabFlowAddr_418_PLUS_dp0_bml_fabFlowSi_ETC___d5141 =
	     dp0_bml_fabFlowAddr + dp0_bml_fabFlowSize ;
  assign dp0_bml_lclBufDone_447_AND_IF_dp0_bml_dpContro_ETC___d4604 =
	     dp0_bml_lclBufDone &&
	     CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q28 ;
  assign dp0_bml_lclBuf_value_351_EQ_dp0_bml_lclBuf_mod_ETC___d5196 =
	     dp0_bml_lclBuf_value == dp0_bml_lclBuf_modulus ;
  assign dp0_bml_remBuf_value_350_EQ_dp0_bml_remBuf_mod_ETC___d5194 =
	     dp0_bml_remBuf_value == dp0_bml_remBuf_modulus ;
  assign dp0_bram_serverAdapterA_1_cnt_083_PLUS_IF_dp0__ETC___d4282 =
	     dp0_bram_serverAdapterA_1_cnt +
	     (dp0_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779 =
	     (dp0_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_cnt_085_PLUS_IF_dp0__ETC___d4170 =
	     dp0_bram_serverAdapterA_2_cnt +
	     (dp0_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780 =
	     (dp0_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_2_outData_outData_whas_ETC___d2943 =
	     dp0_bram_serverAdapterA_2_outData_outData$whas &&
	     (dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_3_outData_outData$whas &&
	     dp0_tlp_mRespF$FULL_N &&
	     (!dp0_tlp_rdRespDwRemain_935_ULE_4___d2936 ||
	      dp0_tlp_readReq$EMPTY_N) ;
  assign dp0_bram_serverAdapterA_3_cnt_087_PLUS_IF_dp0__ETC___d4058 =
	     dp0_bram_serverAdapterA_3_cnt +
	     (dp0_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781 =
	     (dp0_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_cnt_081_PLUS_IF_dp0_br_ETC___d4394 =
	     dp0_bram_serverAdapterA_cnt +
	     (dp0_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp0_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778 =
	     (dp0_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterA_outData_outData_whas___ETC___d2947 =
	     dp0_bram_serverAdapterA_outData_outData$whas &&
	     (dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_1_outData_outData$whas &&
	     (dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas) &&
	     dp0_bram_serverAdapterA_2_outData_outData_whas_ETC___d2943 ;
  assign dp0_bram_serverAdapterB_1_cnt_651_PLUS_IF_dp0__ETC___d4226 =
	     dp0_bram_serverAdapterB_1_cnt +
	     (dp0_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp0_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterB_1_cnt_651_SLT_3___d2652 =
	     (dp0_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d2747 =
	     dp0_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp0_bram_serverAdapterB_2_cnt_653_PLUS_IF_dp0__ETC___d4114 =
	     dp0_bram_serverAdapterB_2_cnt +
	     (dp0_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp0_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterB_2_cnt_653_SLT_3___d2654 =
	     (dp0_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_3_cnt_656_PLUS_IF_dp0__ETC___d4002 =
	     dp0_bram_serverAdapterB_3_cnt +
	     (dp0_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp0_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterB_3_cnt_656_SLT_3___d2657 =
	     (dp0_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_bram_serverAdapterB_cnt_649_PLUS_IF_dp0_br_ETC___d4338 =
	     dp0_bram_serverAdapterB_cnt +
	     (dp0_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp0_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp0_bram_serverAdapterB_cnt_649_SLT_3___d2650 =
	     (dp0_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp0_tlp_dmaPullRemainDWLen_494_ULE_dp0_tlp_dma_ETC___d4777 =
	     dp0_tlp_dmaPullRemainDWLen <= dp0_tlp_dmaPullRemainDWSub ;
  assign dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 =
	     dp0_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3477 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_fabMeta[128] &&
	     !dp0_tlp_tlpXmtBusy &&
	     dp0_tlp_dmaDoTailEvent &&
	     dp0_tlp_postSeqDwell == 4'd0 &&
	     dp0_tlp_mesgComplReceived == dp0_tlp_fabMeta[112:96] ;
  assign dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3617 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_tlpRcvBusy &&
	     tagm__h37433 == dp0_tlp_inF$D_OUT[47:40] &&
	     dp0_tlp_inF_first__398_BITS_63_TO_56_544_EQ_pc_ETC___d3551 ;
  assign dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3640 =
	     dp0_dpControl[3:2] == 2'd2 && dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_tlpXmtBusy &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_reqMetaBodyInFlight &&
	     !dp0_tlp_fabMeta[128] &&
	     dp0_tlp_nearBufReady &&
	     dp0_tlp_farBufReady ;
  assign dp0_tlp_dpControl_wget__457_BITS_3_TO_2_458_EQ_ETC___d3816 =
	     dp0_dpControl[3:2] == 2'd1 && dp0_dpControl[1:0] == 2'd1 &&
	     !dp0_tlp_tlpRcvBusy &&
	     !dp0_tlp_reqMetaInFlight &&
	     !dp0_tlp_fabMeta[128] &&
	     dp0_tlp_nearBufReady &&
	     dp0_tlp_farBufReady &&
	     dp0_tlp_postSeqDwell == 4'd0 ;
  assign dp0_tlp_inF_first__398_BITS_63_TO_56_544_EQ_pc_ETC___d3551 =
	     dp0_tlp_inF$D_OUT[63:56] == pciDevice[15:8] &&
	     dp0_tlp_inF$D_OUT[55:51] == pciDevice[7:3] &&
	     dp0_tlp_inF$D_OUT[50:48] == 3'd0 ;
  assign dp0_tlp_inF_first__398_BIT_152_399_AND_NOT_dp0_ETC___d3431 =
	     dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inF$D_OUT[110] &&
	     !dp0_tlp_inF$D_OUT[125] &&
	     dp0_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp0_tlp_inF$D_OUT[152] && !dp0_tlp_inIgnorePkt ;
  assign dp0_tlp_mReqF_RDY_deq__093_AND_IF_dp0_tlp_mReq_ETC___d3334 =
	     dp0_tlp_mReqF$EMPTY_N &&
	     CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q26 ;
  assign dp0_tlp_mRespF_first__352_BITS_71_TO_62_377_ULE_1___d4452 =
	     dp0_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign dp0_tlp_outDwRemain_358_ULE_4___d4675 =
	     dp0_tlp_outDwRemain <= 10'd4 ;
  assign dp0_tlp_rdRespDwRemain_935_ULE_4___d2936 =
	     dp0_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_1__q7 = dp0_tlp_readNxtDWAddr + 13'd1 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_2__q8 = dp0_tlp_readNxtDWAddr + 13'd2 ;
  assign dp0_tlp_readNxtDWAddr_PLUS_3__q6 = dp0_tlp_readNxtDWAddr + 13'd3 ;
  assign dp0_tlp_readRemainDWLen_090_ULE_4___d3091 =
	     dp0_tlp_readRemainDWLen <= 10'd4 ;
  assign dp0_tlp_writeDWAddr_PLUS_1__q4 = dp0_tlp_writeDWAddr + 13'd1 ;
  assign dp0_tlp_writeDWAddr_PLUS_2__q5 = dp0_tlp_writeDWAddr + 13'd2 ;
  assign dp0_tlp_writeDWAddr_PLUS_3__q3 = dp0_tlp_writeDWAddr + 13'd3 ;
  assign dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 =
	     dp0_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp0_tlp_writeRemainDWLen_185_ULE_2___d4447 =
	     dp0_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 =
	     dp0_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp0_wmi_dpControl_whas__727_AND_dp0_bram_serve_ETC___d2751 =
	     (dp0_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_outData_outData$whas &&
	     (dp0_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp0_bram_serverAdapterB_1_outData_outData_whas_ETC___d2747 ;
  assign dp1_bml_crdBuf_value_71_EQ_dp1_bml_crdBuf_modu_ETC___d5251 =
	     dp1_bml_crdBuf_value == dp1_bml_crdBuf_modulus ;
  assign dp1_bml_fabBuf_value_60_EQ_dp1_bml_fabBuf_modu_ETC___d5250 =
	     dp1_bml_fabBuf_value == dp1_bml_fabBuf_modulus ;
  assign dp1_bml_fabFlowAddr_58_PLUS_dp1_bml_fabFlowSiz_ETC___d5142 =
	     dp1_bml_fabFlowAddr + dp1_bml_fabFlowSize ;
  assign dp1_bml_lclBufDone_87_AND_IF_dp1_bml_dpControl_ETC___d4513 =
	     dp1_bml_lclBufDone &&
	     CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q27 ;
  assign dp1_bml_lclBuf_value_91_EQ_dp1_bml_lclBuf_modu_ETC___d5252 =
	     dp1_bml_lclBuf_value == dp1_bml_lclBuf_modulus ;
  assign dp1_bml_remBuf_value_90_EQ_dp1_bml_remBuf_modu_ETC___d5249 =
	     dp1_bml_remBuf_value == dp1_bml_remBuf_modulus ;
  assign dp1_bram_serverAdapterA_1_cnt_25_PLUS_IF_dp1_b_ETC___d2129 =
	     dp1_bram_serverAdapterA_1_cnt +
	     (dp1_bram_serverAdapterA_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_1_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146 =
	     (dp1_bram_serverAdapterA_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_cnt_27_PLUS_IF_dp1_b_ETC___d2017 =
	     dp1_bram_serverAdapterA_2_cnt +
	     (dp1_bram_serverAdapterA_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_2_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147 =
	     (dp1_bram_serverAdapterA_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_2_outData_outData_whas_ETC___d785 =
	     dp1_bram_serverAdapterA_2_outData_outData$whas &&
	     (dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_3_outData_outData$whas &&
	     dp1_tlp_mRespF$FULL_N &&
	     (!dp1_tlp_rdRespDwRemain_77_ULE_4___d778 ||
	      dp1_tlp_readReq$EMPTY_N) ;
  assign dp1_bram_serverAdapterA_3_cnt_29_PLUS_IF_dp1_b_ETC___d1905 =
	     dp1_bram_serverAdapterA_3_cnt +
	     (dp1_bram_serverAdapterA_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_3_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148 =
	     (dp1_bram_serverAdapterA_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_cnt_23_PLUS_IF_dp1_bra_ETC___d2241 =
	     dp1_bram_serverAdapterA_cnt +
	     (dp1_bram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (dp1_bram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145 =
	     (dp1_bram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterA_outData_outData_whas___ETC___d789 =
	     dp1_bram_serverAdapterA_outData_outData$whas &&
	     (dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_1_outData_outData$whas &&
	     (dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas) &&
	     dp1_bram_serverAdapterA_2_outData_outData_whas_ETC___d785 ;
  assign dp1_bram_serverAdapterB_1_cnt_92_PLUS_IF_dp1_b_ETC___d2073 =
	     dp1_bram_serverAdapterB_1_cnt +
	     (dp1_bram_serverAdapterB_1_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp1_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterB_1_cnt_92_SLT_3___d493 =
	     (dp1_bram_serverAdapterB_1_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d588 =
	     dp1_bram_serverAdapterB_1_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_2_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_2_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_3_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_3_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_3_outData_outData$whas ;
  assign dp1_bram_serverAdapterB_2_cnt_94_PLUS_IF_dp1_b_ETC___d1961 =
	     dp1_bram_serverAdapterB_2_cnt +
	     (dp1_bram_serverAdapterB_2_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp1_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterB_2_cnt_94_SLT_3___d495 =
	     (dp1_bram_serverAdapterB_2_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_3_cnt_97_PLUS_IF_dp1_b_ETC___d1849 =
	     dp1_bram_serverAdapterB_3_cnt +
	     (dp1_bram_serverAdapterB_3_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp1_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterB_3_cnt_97_SLT_3___d498 =
	     (dp1_bram_serverAdapterB_3_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_bram_serverAdapterB_cnt_90_PLUS_IF_dp1_bra_ETC___d2185 =
	     dp1_bram_serverAdapterB_cnt +
	     (dp1_bram_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_dp1_wmi_respMetadata ? 3'd7 : 3'd0) ;
  assign dp1_bram_serverAdapterB_cnt_90_SLT_3___d491 =
	     (dp1_bram_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign dp1_tlp_dmaPullRemainDWLen_337_ULE_dp1_tlp_dma_ETC___d5144 =
	     dp1_tlp_dmaPullRemainDWLen <= dp1_tlp_dmaPullRemainDWSub ;
  assign dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 =
	     dp1_tlp_dmaPullRemainDWSub <= 10'd4 ;
  assign dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1320 =
	     dp1_dpControl[3:2] == 2'd2 && dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_fabMeta[128] &&
	     !dp1_tlp_tlpXmtBusy &&
	     dp1_tlp_dmaDoTailEvent &&
	     dp1_tlp_postSeqDwell == 4'd0 &&
	     dp1_tlp_mesgComplReceived == dp1_tlp_fabMeta[112:96] ;
  assign dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1462 =
	     dp1_dpControl[3:2] == 2'd2 && dp1_dpControl[1:0] == 2'd1 &&
	     dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_tlpRcvBusy &&
	     tagm__h113997 == dp1_tlp_inF$D_OUT[47:40] &&
	     dp1_tlp_inF_first__241_BITS_63_TO_56_387_EQ_pc_ETC___d1396 ;
  assign dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1485 =
	     dp1_dpControl[3:2] == 2'd2 && dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_tlpXmtBusy &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_reqMetaBodyInFlight &&
	     !dp1_tlp_fabMeta[128] &&
	     dp1_tlp_nearBufReady &&
	     dp1_tlp_farBufReady ;
  assign dp1_tlp_dpControl_wget__300_BITS_3_TO_2_301_EQ_ETC___d1661 =
	     dp1_dpControl[3:2] == 2'd1 && dp1_dpControl[1:0] == 2'd1 &&
	     !dp1_tlp_tlpRcvBusy &&
	     !dp1_tlp_reqMetaInFlight &&
	     !dp1_tlp_fabMeta[128] &&
	     dp1_tlp_nearBufReady &&
	     dp1_tlp_farBufReady &&
	     dp1_tlp_postSeqDwell == 4'd0 ;
  assign dp1_tlp_inF_first__241_BITS_63_TO_56_387_EQ_pc_ETC___d1396 =
	     dp1_tlp_inF$D_OUT[63:56] == pciDevice[15:8] &&
	     dp1_tlp_inF$D_OUT[55:51] == pciDevice[7:3] &&
	     dp1_tlp_inF$D_OUT[50:48] == 3'd1 ;
  assign dp1_tlp_inF_first__241_BIT_152_242_AND_NOT_dp1_ETC___d1274 =
	     dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inF$D_OUT[110] &&
	     !dp1_tlp_inF$D_OUT[125] &&
	     dp1_tlp_inF$D_OUT[124:120] == 5'b0 ||
	     !dp1_tlp_inF$D_OUT[152] && !dp1_tlp_inIgnorePkt ;
  assign dp1_tlp_mReqF_RDY_deq__35_AND_IF_dp1_tlp_mReqF_ETC___d1176 =
	     dp1_tlp_mReqF$EMPTY_N &&
	     CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q24 ;
  assign dp1_tlp_mRespF_first__194_BITS_71_TO_62_219_ULE_1___d4497 =
	     dp1_tlp_mRespF$D_OUT[71:62] <= 10'd1 ;
  assign dp1_tlp_outDwRemain_200_ULE_4___d4985 =
	     dp1_tlp_outDwRemain <= 10'd4 ;
  assign dp1_tlp_rdRespDwRemain_77_ULE_4___d778 =
	     dp1_tlp_rdRespDwRemain <= 10'd4 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_1__q12 = dp1_tlp_readNxtDWAddr + 13'd1 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_2__q13 = dp1_tlp_readNxtDWAddr + 13'd2 ;
  assign dp1_tlp_readNxtDWAddr_PLUS_3__q11 = dp1_tlp_readNxtDWAddr + 13'd3 ;
  assign dp1_tlp_readRemainDWLen_32_ULE_4___d933 =
	     dp1_tlp_readRemainDWLen <= 10'd4 ;
  assign dp1_tlp_writeDWAddr_PLUS_1__q15 = dp1_tlp_writeDWAddr + 13'd1 ;
  assign dp1_tlp_writeDWAddr_PLUS_2__q16 = dp1_tlp_writeDWAddr + 13'd2 ;
  assign dp1_tlp_writeDWAddr_PLUS_3__q14 = dp1_tlp_writeDWAddr + 13'd3 ;
  assign dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 =
	     dp1_tlp_writeRemainDWLen <= 10'd1 ;
  assign dp1_tlp_writeRemainDWLen_027_ULE_2___d4499 =
	     dp1_tlp_writeRemainDWLen <= 10'd2 ;
  assign dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 =
	     dp1_tlp_writeRemainDWLen <= 10'd3 ;
  assign dp1_wmi_dpControl_whas__68_AND_dp1_bram_server_ETC___d592 =
	     (dp1_bram_serverAdapterB_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_outData_outData$whas &&
	     (dp1_bram_serverAdapterB_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterB_1_outData_enqData$whas) &&
	     dp1_bram_serverAdapterB_1_outData_outData_whas_ETC___d588 ;
  assign idx__h124168 = 2'd0 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h124649 = 2'd1 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h125030 = 2'd2 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h125411 = 2'd3 - dp1_tlp_readNxtDWAddr[1:0] ;
  assign idx__h126555 = 2'd0 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h128700 = 2'd1 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h129942 = 2'd2 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h131184 = 2'd3 - dp1_tlp_writeDWAddr[1:0] ;
  assign idx__h47604 = 2'd0 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h48085 = 2'd1 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h48466 = 2'd2 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h48847 = 2'd3 - dp0_tlp_readNxtDWAddr[1:0] ;
  assign idx__h49991 = 2'd0 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h52136 = 2'd1 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h53378 = 2'd2 - dp0_tlp_writeDWAddr[1:0] ;
  assign idx__h54620 = 2'd3 - dp0_tlp_writeDWAddr[1:0] ;
  assign lastBE__h104507 =
	     dp1_tlp_mRespF_first__194_BITS_71_TO_62_219_ULE_1___d4497 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h110815 =
	     (thisRequestLength__h110496[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lastBE__h27934 =
	     dp0_tlp_mRespF_first__352_BITS_71_TO_62_377_ULE_1___d4452 ?
	       4'd0 :
	       4'd15 ;
  assign lastBE__h34251 =
	     (thisRequestLength__h33926[11:2] == 10'd1) ? 4'd0 : 4'd15 ;
  assign lowAddr__h122874 =
	     { dp1_tlp_readReq$D_OUT[33:29], lowAddr10__h122873 } ;
  assign lowAddr__h46310 =
	     { dp0_tlp_readReq$D_OUT[33:29], lowAddr10__h46309 } ;
  assign mesgMeta_opcode__h143813 = MUX_dp1_bram_memory_1$b_put_3__VAL_2 ;
  assign mesgMeta_opcode__h67249 = MUX_dp0_bram_memory_1$b_put_3__VAL_2 ;
  assign nowLS__h105329 =
	     { dp1_tlp_mRespF$D_OUT[39:32],
	       dp1_tlp_mRespF$D_OUT[47:40],
	       dp1_tlp_mRespF$D_OUT[55:48],
	       dp1_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h110978 =
	     { dp1_tlp_inF$D_OUT[39:32],
	       dp1_tlp_inF$D_OUT[47:40],
	       dp1_tlp_inF$D_OUT[55:48],
	       dp1_tlp_inF$D_OUT[63:56] } ;
  assign nowLS__h28756 =
	     { dp0_tlp_mRespF$D_OUT[39:32],
	       dp0_tlp_mRespF$D_OUT[47:40],
	       dp0_tlp_mRespF$D_OUT[55:48],
	       dp0_tlp_mRespF$D_OUT[63:56] } ;
  assign nowLS__h34414 =
	     { dp0_tlp_inF$D_OUT[39:32],
	       dp0_tlp_inF$D_OUT[47:40],
	       dp0_tlp_inF$D_OUT[55:48],
	       dp0_tlp_inF$D_OUT[63:56] } ;
  assign nowMS__h105328 =
	     { dp1_tlp_mRespF$D_OUT[71:64],
	       dp1_tlp_mRespF$D_OUT[79:72],
	       dp1_tlp_mRespF$D_OUT[87:80],
	       dp1_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h110977 =
	     { dp1_tlp_inF$D_OUT[71:64],
	       dp1_tlp_inF$D_OUT[79:72],
	       dp1_tlp_inF$D_OUT[87:80],
	       dp1_tlp_inF$D_OUT[95:88] } ;
  assign nowMS__h28755 =
	     { dp0_tlp_mRespF$D_OUT[71:64],
	       dp0_tlp_mRespF$D_OUT[79:72],
	       dp0_tlp_mRespF$D_OUT[87:80],
	       dp0_tlp_mRespF$D_OUT[95:88] } ;
  assign nowMS__h34413 =
	     { dp0_tlp_inF$D_OUT[71:64],
	       dp0_tlp_inF$D_OUT[79:72],
	       dp0_tlp_inF$D_OUT[87:80],
	       dp0_tlp_inF$D_OUT[95:88] } ;
  assign opcode__h105327 =
	     { dp1_tlp_mRespF$D_OUT[103:96],
	       dp1_tlp_mRespF$D_OUT[111:104],
	       dp1_tlp_mRespF$D_OUT[119:112],
	       dp1_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h110976 =
	     { dp1_tlp_inF$D_OUT[103:96],
	       dp1_tlp_inF$D_OUT[111:104],
	       dp1_tlp_inF$D_OUT[119:112],
	       dp1_tlp_inF$D_OUT[127:120] } ;
  assign opcode__h28754 =
	     { dp0_tlp_mRespF$D_OUT[103:96],
	       dp0_tlp_mRespF$D_OUT[111:104],
	       dp0_tlp_mRespF$D_OUT[119:112],
	       dp0_tlp_mRespF$D_OUT[127:120] } ;
  assign opcode__h34412 =
	     { dp0_tlp_inF$D_OUT[103:96],
	       dp0_tlp_inF$D_OUT[111:104],
	       dp0_tlp_inF$D_OUT[119:112],
	       dp0_tlp_inF$D_OUT[127:120] } ;
  assign pkt__h134007 =
	     { 9'd148,
	       dp1_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd16,
	       dp1_tlp_mRespF$D_OUT[54:43],
	       dp1_tlp_mRespF$D_OUT[87:72],
	       dp1_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp1_tlp_mRespF$D_OUT[61:55],
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign pkt__h57443 =
	     { 9'd148,
	       dp0_tlp_mRespF$D_OUT[34:32],
	       10'd0,
	       dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       7'd0,
	       dp0_tlp_mRespF$D_OUT[54:43],
	       dp0_tlp_mRespF$D_OUT[87:72],
	       dp0_tlp_mRespF$D_OUT[42:35],
	       1'b0,
	       dp0_tlp_mRespF$D_OUT[61:55],
	       dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign rdat__h152800 = { 16'd0, dp1_bml_lclNumBufs } ;
  assign rdat__h152808 = { 16'd0, dp1_bml_fabNumBufs } ;
  assign rdat__h152816 = { 16'd0, dp1_bml_mesgBase } ;
  assign rdat__h152824 = { 16'd0, dp1_bml_metaBase } ;
  assign rdat__h152832 = { 16'd0, dp1_bml_mesgSize } ;
  assign rdat__h152840 = { 16'd0, dp1_bml_metaSize } ;
  assign rdat__h152848 = { 16'd0, dp1_bml_lclBufsCF } ;
  assign rdat__h152870 = { dp1_bml_lclBufsAR, dp1_bml_fabBufsAvail } ;
  assign rdat__h152875 = { dp1_bml_remBuf_value, dp1_bml_lclBuf_value } ;
  assign rdat__h152886 = { dp1_bml_lclStarts, dp1_bml_lclDones } ;
  assign rdat__h152891 = { dp1_bml_remStarts, dp1_bml_remDones } ;
  assign rdat__h152954 = { 28'd0, dp1_dpControl } ;
  assign rdat__h76241 = { 16'd0, dp0_bml_lclNumBufs } ;
  assign rdat__h76249 = { 16'd0, dp0_bml_fabNumBufs } ;
  assign rdat__h76257 = { 16'd0, dp0_bml_mesgBase } ;
  assign rdat__h76265 = { 16'd0, dp0_bml_metaBase } ;
  assign rdat__h76273 = { 16'd0, dp0_bml_mesgSize } ;
  assign rdat__h76281 = { 16'd0, dp0_bml_metaSize } ;
  assign rdat__h76289 = { 16'd0, dp0_bml_lclBufsCF } ;
  assign rdat__h76311 = { dp0_bml_lclBufsAR, dp0_bml_fabBufsAvail } ;
  assign rdat__h76316 = { dp0_bml_remBuf_value, dp0_bml_lclBuf_value } ;
  assign rdat__h76327 = { dp0_bml_lclStarts, dp0_bml_lclDones } ;
  assign rdat__h76332 = { dp0_bml_remStarts, dp0_bml_remDones } ;
  assign rdat__h76395 = { 28'd0, dp0_dpControl } ;
  assign rreq_tag__h105193 =
	     (y__h105019 == dp1_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rreq_tag__h28620 =
	     (y__h28446 == dp0_tlp_mesgLengthRemainPush) ? 8'h01 : 8'h0 ;
  assign rresp_data__h122915 =
	     { IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212[7:0],
	       IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212[15:8],
	       IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212[23:16],
	       IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212[31:24] } ;
  assign rresp_data__h46351 =
	     { IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821[7:0],
	       IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821[15:8],
	       IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821[23:16],
	       IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821[31:24] } ;
  assign spanToNextPage__h104978 =
	     13'd4096 - { 1'd0, dp1_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h110495 =
	     13'd4096 - { 1'd0, dp1_tlp_fabMesgAccu[11:0] } ;
  assign spanToNextPage__h28405 =
	     13'd4096 - { 1'd0, dp0_tlp_srcMesgAccu[11:0] } ;
  assign spanToNextPage__h33925 =
	     13'd4096 - { 1'd0, dp0_tlp_fabMesgAccu[11:0] } ;
  assign tag__h116113 = { 3'd0, dp1_tlp_dmaTag } ;
  assign tag__h39549 = { 3'd0, dp0_tlp_dmaTag } ;
  assign tagm__h113997 = { 3'd0, dp1_tlp_dmaReqTag } ;
  assign tagm__h37433 = { 3'd0, dp0_tlp_dmaReqTag } ;
  assign thisRequestLength__h104979 =
	     (x__h105032[12:0] <= spanToNextPage__h104978) ?
	       x__h105032[12:0] :
	       spanToNextPage__h104978 ;
  assign thisRequestLength__h110496 =
	     (x__h110529[12:0] <= spanToNextPage__h110495) ?
	       x__h110529[12:0] :
	       spanToNextPage__h110495 ;
  assign thisRequestLength__h28406 =
	     (x__h28459[12:0] <= spanToNextPage__h28405) ?
	       x__h28459[12:0] :
	       spanToNextPage__h28405 ;
  assign thisRequestLength__h33926 =
	     (x__h33959[12:0] <= spanToNextPage__h33925) ?
	       x__h33959[12:0] :
	       spanToNextPage__h33925 ;
  assign w_be__h104105 =
	     dp1_tlp_outDwRemain_200_ULE_4___d4985 ?
	       CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q21 :
	       16'd65535 ;
  assign w_be__h27532 =
	     dp0_tlp_outDwRemain_358_ULE_4___d4675 ?
	       CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q22 :
	       16'd65535 ;
  assign w_data__h100534 =
	     { dp1_tlp_fabMeta[71:64],
	       dp1_tlp_fabMeta[79:72],
	       dp1_tlp_fabMeta[87:80],
	       dp1_tlp_fabMeta[95:88],
	       dp1_tlp_fabMeta[39:32],
	       dp1_tlp_fabMeta[47:40],
	       dp1_tlp_fabMeta[55:48],
	       dp1_tlp_fabMeta[63:56],
	       dp1_tlp_fabMeta[7:0],
	       dp1_tlp_fabMeta[15:8],
	       dp1_tlp_fabMeta[23:16],
	       dp1_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h103126 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd65791,
	       dp1_tlp_fabMetaAddr,
	       dp1_tlp_fabMeta[103:96],
	       dp1_tlp_fabMeta[111:104],
	       dp1_tlp_fabMeta[119:112],
	       dp1_tlp_fabMeta[127:120] } ;
  assign w_data__h104482 =
	     { 22'd1048580,
	       dp1_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd256,
	       lastBE__h104507,
	       4'd15,
	       dp1_tlp_fabMesgAccu,
	       dp1_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h110788 =
	     { 22'd4,
	       thisRequestLength__h110496[11:2],
	       pciDevice[15:3],
	       3'd1,
	       tag__h116113,
	       lastBE__h110815,
	       4'd15,
	       dp1_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign w_data__h116119 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd1,
	       tag__h116113,
	       8'd255,
	       dp1_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h21891 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd15,
	       dp0_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign w_data__h23955 =
	     { dp0_tlp_fabMeta[71:64],
	       dp0_tlp_fabMeta[79:72],
	       dp0_tlp_fabMeta[87:80],
	       dp0_tlp_fabMeta[95:88],
	       dp0_tlp_fabMeta[39:32],
	       dp0_tlp_fabMeta[47:40],
	       dp0_tlp_fabMeta[55:48],
	       dp0_tlp_fabMeta[63:56],
	       dp0_tlp_fabMeta[7:0],
	       dp0_tlp_fabMeta[15:8],
	       dp0_tlp_fabMeta[23:16],
	       dp0_tlp_fabMeta[31:24],
	       32'b0 } ;
  assign w_data__h26547 =
	     { 32'd1073745924,
	       pciDevice[15:3],
	       19'd255,
	       dp0_tlp_fabMetaAddr,
	       dp0_tlp_fabMeta[103:96],
	       dp0_tlp_fabMeta[111:104],
	       dp0_tlp_fabMeta[119:112],
	       dp0_tlp_fabMeta[127:120] } ;
  assign w_data__h27909 =
	     { 22'd1048580,
	       dp0_tlp_mRespF$D_OUT[71:62],
	       pciDevice[15:3],
	       11'd0,
	       lastBE__h27934,
	       4'd15,
	       dp0_tlp_fabMesgAccu,
	       dp0_tlp_mRespF$D_OUT[31:0] } ;
  assign w_data__h34218 =
	     { 22'd4,
	       thisRequestLength__h33926[11:2],
	       pciDevice[15:3],
	       3'd0,
	       tag__h39549,
	       lastBE__h34251,
	       4'd15,
	       dp0_tlp_fabMesgAccu[31:2],
	       34'd0 } ;
  assign w_data__h39555 =
	     { 32'd4100,
	       pciDevice[15:3],
	       3'd0,
	       tag__h39549,
	       8'd255,
	       dp0_tlp_fabMetaAddr[31:2],
	       34'd0 } ;
  assign w_data__h98476 =
	     { 32'd1073745921,
	       pciDevice[15:3],
	       19'd65551,
	       dp1_tlp_fabFlowAddr,
	       32'd16777216 } ;
  assign x3__h143770 = MUX_dp1_bram_memory$b_put_3__VAL_2 ;
  assign x3__h67206 = MUX_dp0_bram_memory$b_put_3__VAL_2 ;
  assign x__h104630 = { dp1_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h105032 =
	     (dp1_tlp_mesgLengthRemainPush <= y__h105034) ?
	       dp1_tlp_mesgLengthRemainPush :
	       y__h105034 ;
  assign x__h105388 = { 15'd0, dp1_tlp_mesgLengthRemainPush } ;
  assign x__h110529 =
	     (dp1_tlp_mesgLengthRemainPull <= y__h110531) ?
	       dp1_tlp_mesgLengthRemainPull :
	       y__h110531 ;
  assign x__h111008 = { 15'd0, dp1_tlp_mesgLengthRemainPull } ;
  assign x__h122987 = x__h122989 - y__h122990 ;
  assign x__h122989 = { dp1_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h136478 = { dp1_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h136583 = { dp1_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h146282 = dp1_bram_serverAdapterB_outData_outData$wget ;
  assign x__h146283 = dp1_bram_serverAdapterB_1_outData_outData$wget ;
  assign x__h146284 = dp1_bram_serverAdapterB_2_outData_outData$wget ;
  assign x__h146285 = dp1_bram_serverAdapterB_3_outData_outData$wget ;
  assign x__h150793 =
	     (dp1_dpControl[1:0] == 2'd1) ? dp1_bml_fabNumBufs : 16'd0 ;
  assign x__h151410 = dp1_bml_lclCredit + 16'd1 ;
  assign x__h151415 = dp1_bml_lclCredit - 16'd1 ;
  assign x__h151452 = dp1_bml_fabBufsAvail + 16'd1 ;
  assign x__h151457 = dp1_bml_fabBufsAvail - 16'd1 ;
  assign x__h151533 = dp1_bml_lclBufsCF + 16'd1 ;
  assign x__h151538 = dp1_bml_lclBufsCF - 16'd1 ;
  assign x__h151605 = dp1_bml_lclBufsAR + 16'd1 ;
  assign x__h151610 = dp1_bml_lclBufsAR - 16'd1 ;
  assign x__h28057 = { dp0_tlp_mRespF$D_OUT[69:62], 2'd0 } ;
  assign x__h28459 =
	     (dp0_tlp_mesgLengthRemainPush <= y__h28461) ?
	       dp0_tlp_mesgLengthRemainPush :
	       y__h28461 ;
  assign x__h28815 = { 15'd0, dp0_tlp_mesgLengthRemainPush } ;
  assign x__h33959 =
	     (dp0_tlp_mesgLengthRemainPull <= y__h33961) ?
	       dp0_tlp_mesgLengthRemainPull :
	       y__h33961 ;
  assign x__h34444 = { 15'd0, dp0_tlp_mesgLengthRemainPull } ;
  assign x__h46423 = x__h46425 - y__h46426 ;
  assign x__h46425 = { dp0_tlp_readReq$D_OUT[28:19], 2'b0 } ;
  assign x__h59914 = { dp0_tlp_dmaPullRemainDWSub[7:0], 2'd0 } ;
  assign x__h60019 = { dp0_tlp_inF$D_OUT[103:96], 2'd0 } ;
  assign x__h69718 = dp0_bram_serverAdapterB_outData_outData$wget ;
  assign x__h69719 = dp0_bram_serverAdapterB_1_outData_outData$wget ;
  assign x__h69720 = dp0_bram_serverAdapterB_2_outData_outData$wget ;
  assign x__h69721 = dp0_bram_serverAdapterB_3_outData_outData$wget ;
  assign x__h74232 =
	     (dp0_dpControl[1:0] == 2'd1) ? dp0_bml_fabNumBufs : 16'd0 ;
  assign x__h74849 = dp0_bml_lclCredit + 16'd1 ;
  assign x__h74854 = dp0_bml_lclCredit - 16'd1 ;
  assign x__h74891 = dp0_bml_fabBufsAvail + 16'd1 ;
  assign x__h74896 = dp0_bml_fabBufsAvail - 16'd1 ;
  assign x__h74972 = dp0_bml_lclBufsCF + 16'd1 ;
  assign x__h74977 = dp0_bml_lclBufsCF - 16'd1 ;
  assign x__h75044 = dp0_bml_lclBufsAR + 16'd1 ;
  assign x__h75049 = dp0_bml_lclBufsAR - 16'd1 ;
  assign y__h104627 = { 22'd0, x__h104630 } ;
  assign y__h105019 = { 4'd0, thisRequestLength__h104979 } ;
  assign y__h105034 = { 4'd0, dp1_tlp_maxPayloadSize } ;
  assign y__h105092 = { 19'd0, thisRequestLength__h104979 } ;
  assign y__h105142 = { 3'd0, thisRequestLength__h104979 } ;
  assign y__h110521 = { 4'd0, thisRequestLength__h110496 } ;
  assign y__h110531 = { 4'd0, dp1_tlp_maxReadReqSize } ;
  assign y__h110586 = { 19'd0, thisRequestLength__h110496 } ;
  assign y__h122988 =
	     (dp1_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h123028 } ;
  assign y__h122990 = { 10'd0, x__h122996 } ;
  assign y__h136475 =
	     dp1_tlp_dmaPullRemainDWSub_335_ULE_4___d5143 ?
	       { 7'd0, x__h136478 } :
	       17'd16 ;
  assign y__h136580 = { 6'd0, x__h136583 } ;
  assign y__h28054 = { 22'd0, x__h28057 } ;
  assign y__h28446 = { 4'd0, thisRequestLength__h28406 } ;
  assign y__h28461 = { 4'd0, dp0_tlp_maxPayloadSize } ;
  assign y__h28519 = { 19'd0, thisRequestLength__h28406 } ;
  assign y__h28569 = { 3'd0, thisRequestLength__h28406 } ;
  assign y__h33951 = { 4'd0, thisRequestLength__h33926 } ;
  assign y__h33961 = { 4'd0, dp0_tlp_maxReadReqSize } ;
  assign y__h34016 = { 19'd0, thisRequestLength__h33926 } ;
  assign y__h46424 =
	     (dp0_tlp_readReq$D_OUT[28:19] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h46464 } ;
  assign y__h46426 = { 10'd0, x__h46432 } ;
  assign y__h59911 =
	     dp0_tlp_dmaPullRemainDWSub_492_ULE_4___d4776 ?
	       { 7'd0, x__h59914 } :
	       17'd16 ;
  assign y__h60016 = { 6'd0, x__h60019 } ;
  assign y_avValue__h122790 = dp1_bram_serverAdapterA_outData_outData$wget ;
  assign y_avValue__h122810 = dp1_bram_serverAdapterA_1_outData_outData$wget ;
  assign y_avValue__h122830 = dp1_bram_serverAdapterA_2_outData_outData$wget ;
  assign y_avValue__h122850 = dp1_bram_serverAdapterA_3_outData_outData$wget ;
  assign y_avValue__h46226 =
	     dp0_bram_serverAdapterA_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_outDataCore$D_OUT :
	       dp0_bram_memory$DOA ;
  assign y_avValue__h46246 =
	     dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_1_outDataCore$D_OUT :
	       dp0_bram_memory_1$DOA ;
  assign y_avValue__h46266 =
	     dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ?
	       dp0_bram_serverAdapterA_2_outDataCore$D_OUT :
	       dp0_bram_memory_2$DOA ;
  assign y_avValue__h46286 =
	     WILL_FIRE_RL_dp0_bram_serverAdapterA_3_outData_setFirstEnq ?
	       dp0_bram_memory_3$DOA :
	       dp0_bram_serverAdapterA_3_outDataCore$D_OUT ;
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h46432 = 2'b10;
      4'b1110: x__h46432 = 2'b01;
      4'b1111: x__h46432 = 2'b0;
      default: x__h46432 = 2'b11;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h46464 = 2'b10;
      4'b1110: x__h46464 = 2'b01;
      4'b1111: x__h46464 = 2'b0;
      default: x__h46464 = 2'b11;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT)
  begin
    case (dp0_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h46309 = 2'b11;
      4'b1100: lowAddr10__h46309 = 2'b10;
      4'b1110: lowAddr10__h46309 = 2'b01;
      default: lowAddr10__h46309 = 2'b0;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  IF_dp1_bml_dpControl_wget__48_BITS_1_TO_0_49_E_ETC___d334 =
	      dp1_bml_fabDone;
      2'd1:
	  IF_dp1_bml_dpControl_wget__48_BITS_1_TO_0_49_E_ETC___d334 =
	      dp1_bml_remDone;
      default: IF_dp1_bml_dpControl_wget__48_BITS_1_TO_0_49_E_ETC___d334 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q1 =
	      dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q1 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		dp1_bml_remDone :
		dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_dp1_bml_fabDone_ETC__q1 =
		   dp1_bml_fabDone;
    endcase
  end
  always@(dp1_dpControl or dp1_bml_fabDone or dp1_bml_remDone)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q2 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q2 =
	      !dp1_bml_remDone;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q2 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(dp0_tlp_readNxtDWAddr or
	  y_avValue__h46286 or
	  y_avValue__h46226 or y_avValue__h46246 or y_avValue__h46266)
  begin
    case (dp0_tlp_readNxtDWAddr[1:0])
      2'd0:
	  rdata__h44234 =
	      { y_avValue__h46226[7:0],
		y_avValue__h46226[15:8],
		y_avValue__h46226[23:16],
		y_avValue__h46226[31:24],
		y_avValue__h46246[7:0],
		y_avValue__h46246[15:8],
		y_avValue__h46246[23:16],
		y_avValue__h46246[31:24],
		y_avValue__h46266[7:0],
		y_avValue__h46266[15:8],
		y_avValue__h46266[23:16],
		y_avValue__h46266[31:24],
		y_avValue__h46286[7:0],
		y_avValue__h46286[15:8],
		y_avValue__h46286[23:16],
		y_avValue__h46286[31:24] };
      2'd1:
	  rdata__h44234 =
	      { y_avValue__h46246[7:0],
		y_avValue__h46246[15:8],
		y_avValue__h46246[23:16],
		y_avValue__h46246[31:24],
		y_avValue__h46266[7:0],
		y_avValue__h46266[15:8],
		y_avValue__h46266[23:16],
		y_avValue__h46266[31:24],
		y_avValue__h46286[7:0],
		y_avValue__h46286[15:8],
		y_avValue__h46286[23:16],
		y_avValue__h46286[31:24],
		y_avValue__h46226[7:0],
		y_avValue__h46226[15:8],
		y_avValue__h46226[23:16],
		y_avValue__h46226[31:24] };
      2'd2:
	  rdata__h44234 =
	      { y_avValue__h46266[7:0],
		y_avValue__h46266[15:8],
		y_avValue__h46266[23:16],
		y_avValue__h46266[31:24],
		y_avValue__h46286[7:0],
		y_avValue__h46286[15:8],
		y_avValue__h46286[23:16],
		y_avValue__h46286[31:24],
		y_avValue__h46226[7:0],
		y_avValue__h46226[15:8],
		y_avValue__h46226[23:16],
		y_avValue__h46226[31:24],
		y_avValue__h46246[7:0],
		y_avValue__h46246[15:8],
		y_avValue__h46246[23:16],
		y_avValue__h46246[31:24] };
      2'd3:
	  rdata__h44234 =
	      { y_avValue__h46286[7:0],
		y_avValue__h46286[15:8],
		y_avValue__h46286[23:16],
		y_avValue__h46286[31:24],
		y_avValue__h46226[7:0],
		y_avValue__h46226[15:8],
		y_avValue__h46226[23:16],
		y_avValue__h46226[31:24],
		y_avValue__h46246[7:0],
		y_avValue__h46246[15:8],
		y_avValue__h46246[23:16],
		y_avValue__h46246[31:24],
		y_avValue__h46266[7:0],
		y_avValue__h46266[15:8],
		y_avValue__h46266[23:16],
		y_avValue__h46266[31:24] };
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[14:11])
      4'b1100: x__h123028 = 2'b10;
      4'b1110: x__h123028 = 2'b01;
      4'b1111: x__h123028 = 2'b0;
      default: x__h123028 = 2'b11;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1100: x__h122996 = 2'b10;
      4'b1110: x__h122996 = 2'b01;
      4'b1111: x__h122996 = 2'b0;
      default: x__h122996 = 2'b11;
    endcase
  end
  always@(dp0_wci_reqF$D_OUT or
	  rdat__h76241 or
	  rdat__h76249 or
	  rdat__h76257 or
	  rdat__h76265 or
	  rdat__h76273 or
	  rdat__h76281 or
	  rdat__h76289 or
	  rdat__h76311 or
	  rdat__h76316 or
	  rdat__h76327 or
	  rdat__h76332 or
	  dp0_bml_fabMesgBase or
	  dp0_bml_fabMetaBase or
	  dp0_bml_fabMesgSize or
	  dp0_bml_fabMetaSize or
	  dp0_bml_fabFlowBase or dp0_bml_fabFlowSize or rdat__h76395)
  begin
    case (dp0_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h76168 = rdat__h76241;
      8'h04: _theResult____h76168 = rdat__h76249;
      8'h08: _theResult____h76168 = rdat__h76257;
      8'h0C: _theResult____h76168 = rdat__h76265;
      8'h10: _theResult____h76168 = rdat__h76273;
      8'h14: _theResult____h76168 = rdat__h76281;
      8'h20: _theResult____h76168 = rdat__h76289;
      8'h24: _theResult____h76168 = 32'hF00DFACE;
      8'h28: _theResult____h76168 = rdat__h76311;
      8'h2C: _theResult____h76168 = rdat__h76316;
      8'h30: _theResult____h76168 = rdat__h76327;
      8'h34: _theResult____h76168 = rdat__h76332;
      8'h48: _theResult____h76168 = 32'hDADEBABE;
      8'h4C: _theResult____h76168 = 32'h00008000;
      8'h50: _theResult____h76168 = dp0_bml_fabMesgBase;
      8'h54: _theResult____h76168 = dp0_bml_fabMetaBase;
      8'h58: _theResult____h76168 = dp0_bml_fabMesgSize;
      8'h5C: _theResult____h76168 = dp0_bml_fabMetaSize;
      8'h60: _theResult____h76168 = dp0_bml_fabFlowBase;
      8'h64: _theResult____h76168 = dp0_bml_fabFlowSize;
      8'h68: _theResult____h76168 = rdat__h76395;
      default: _theResult____h76168 = 32'd0;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT)
  begin
    case (dp1_tlp_readReq$D_OUT[18:15])
      4'b1000: lowAddr10__h122873 = 2'b11;
      4'b1100: lowAddr10__h122873 = 2'b10;
      4'b1110: lowAddr10__h122873 = 2'b01;
      default: lowAddr10__h122873 = 2'b0;
    endcase
  end
  always@(dp1_wci_reqF$D_OUT or
	  rdat__h152800 or
	  rdat__h152808 or
	  rdat__h152816 or
	  rdat__h152824 or
	  rdat__h152832 or
	  rdat__h152840 or
	  rdat__h152848 or
	  rdat__h152870 or
	  rdat__h152875 or
	  rdat__h152886 or
	  rdat__h152891 or
	  dp1_bml_fabMesgBase or
	  dp1_bml_fabMetaBase or
	  dp1_bml_fabMesgSize or
	  dp1_bml_fabMetaSize or
	  dp1_bml_fabFlowBase or dp1_bml_fabFlowSize or rdat__h152954)
  begin
    case (dp1_wci_reqF$D_OUT[39:32])
      8'h0: _theResult____h152727 = rdat__h152800;
      8'h04: _theResult____h152727 = rdat__h152808;
      8'h08: _theResult____h152727 = rdat__h152816;
      8'h0C: _theResult____h152727 = rdat__h152824;
      8'h10: _theResult____h152727 = rdat__h152832;
      8'h14: _theResult____h152727 = rdat__h152840;
      8'h20: _theResult____h152727 = rdat__h152848;
      8'h24: _theResult____h152727 = 32'hF00DFACE;
      8'h28: _theResult____h152727 = rdat__h152870;
      8'h2C: _theResult____h152727 = rdat__h152875;
      8'h30: _theResult____h152727 = rdat__h152886;
      8'h34: _theResult____h152727 = rdat__h152891;
      8'h48: _theResult____h152727 = 32'hDADEBABE;
      8'h4C: _theResult____h152727 = 32'h00008000;
      8'h50: _theResult____h152727 = dp1_bml_fabMesgBase;
      8'h54: _theResult____h152727 = dp1_bml_fabMetaBase;
      8'h58: _theResult____h152727 = dp1_bml_fabMesgSize;
      8'h5C: _theResult____h152727 = dp1_bml_fabMetaSize;
      8'h60: _theResult____h152727 = dp1_bml_fabFlowBase;
      8'h64: _theResult____h152727 = dp1_bml_fabFlowSize;
      8'h68: _theResult____h152727 = rdat__h152954;
      default: _theResult____h152727 = 32'd0;
    endcase
  end
  always@(dp1_tlp_readNxtDWAddr or
	  y_avValue__h122850 or
	  y_avValue__h122790 or y_avValue__h122810 or y_avValue__h122830)
  begin
    case (dp1_tlp_readNxtDWAddr[1:0])
      2'd0:
	  rdata__h120798 =
	      { y_avValue__h122790[7:0],
		y_avValue__h122790[15:8],
		y_avValue__h122790[23:16],
		y_avValue__h122790[31:24],
		y_avValue__h122810[7:0],
		y_avValue__h122810[15:8],
		y_avValue__h122810[23:16],
		y_avValue__h122810[31:24],
		y_avValue__h122830[7:0],
		y_avValue__h122830[15:8],
		y_avValue__h122830[23:16],
		y_avValue__h122830[31:24],
		y_avValue__h122850[7:0],
		y_avValue__h122850[15:8],
		y_avValue__h122850[23:16],
		y_avValue__h122850[31:24] };
      2'd1:
	  rdata__h120798 =
	      { y_avValue__h122810[7:0],
		y_avValue__h122810[15:8],
		y_avValue__h122810[23:16],
		y_avValue__h122810[31:24],
		y_avValue__h122830[7:0],
		y_avValue__h122830[15:8],
		y_avValue__h122830[23:16],
		y_avValue__h122830[31:24],
		y_avValue__h122850[7:0],
		y_avValue__h122850[15:8],
		y_avValue__h122850[23:16],
		y_avValue__h122850[31:24],
		y_avValue__h122790[7:0],
		y_avValue__h122790[15:8],
		y_avValue__h122790[23:16],
		y_avValue__h122790[31:24] };
      2'd2:
	  rdata__h120798 =
	      { y_avValue__h122830[7:0],
		y_avValue__h122830[15:8],
		y_avValue__h122830[23:16],
		y_avValue__h122830[31:24],
		y_avValue__h122850[7:0],
		y_avValue__h122850[15:8],
		y_avValue__h122850[23:16],
		y_avValue__h122850[31:24],
		y_avValue__h122790[7:0],
		y_avValue__h122790[15:8],
		y_avValue__h122790[23:16],
		y_avValue__h122790[31:24],
		y_avValue__h122810[7:0],
		y_avValue__h122810[15:8],
		y_avValue__h122810[23:16],
		y_avValue__h122810[31:24] };
      2'd3:
	  rdata__h120798 =
	      { y_avValue__h122850[7:0],
		y_avValue__h122850[15:8],
		y_avValue__h122850[23:16],
		y_avValue__h122850[31:24],
		y_avValue__h122790[7:0],
		y_avValue__h122790[15:8],
		y_avValue__h122790[23:16],
		y_avValue__h122790[31:24],
		y_avValue__h122810[7:0],
		y_avValue__h122810[15:8],
		y_avValue__h122810[23:16],
		y_avValue__h122810[31:24],
		y_avValue__h122830[7:0],
		y_avValue__h122830[15:8],
		y_avValue__h122830[23:16],
		y_avValue__h122830[31:24] };
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_3_outData_enqData$whas or
	  dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_1_outData_enqData$whas or
	  dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp1_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d864 =
	      dp1_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d864 =
	      dp1_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp1_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d864 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp1_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  dp1_bram_serverAdapterA_3_outData_outData$whas or
	  dp1_bram_serverAdapterA_1_outData_outData$whas or
	  dp1_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q17 =
	      dp1_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q17 =
	      dp1_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp1_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q17 =
		   dp1_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp1_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  IF_dp0_bml_dpControl_wget__408_BITS_1_TO_0_409_ETC___d2494 =
	      dp0_bml_fabDone;
      2'd1:
	  IF_dp0_bml_dpControl_wget__408_BITS_1_TO_0_409_ETC___d2494 =
	      dp0_bml_remDone;
      default: IF_dp0_bml_dpControl_wget__408_BITS_1_TO_0_409_ETC___d2494 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp0_dpControl or dp0_bml_fabDone or dp0_bml_remDone)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q18 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q18 =
	      !dp0_bml_remDone;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q18 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_3_outData_enqData$whas or
	  dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_1_outData_enqData$whas or
	  dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N or
	  dp0_bram_serverAdapterA_2_outData_enqData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3022 =
	      dp0_bram_serverAdapterA_1_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_1_outData_enqData$whas;
      2'd2:
	  IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3022 =
	      dp0_bram_serverAdapterA_2_outDataCore$EMPTY_N ||
	      dp0_bram_serverAdapterA_2_outData_enqData$whas;
      default: IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d3022 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outDataCore$EMPTY_N ||
		   dp0_bram_serverAdapterA_3_outData_enqData$whas;
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  dp0_bram_serverAdapterA_3_outData_outData$whas or
	  dp0_bram_serverAdapterA_1_outData_outData$whas or
	  dp0_bram_serverAdapterA_2_outData_outData$whas)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd1:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q19 =
	      dp0_bram_serverAdapterA_1_outData_outData$whas;
      2'd2:
	  CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q19 =
	      dp0_bram_serverAdapterA_2_outData_outData$whas;
      default: CASE_dp0_tlp_readReqD_OUT_BITS_30_TO_29_NOT_d_ETC__q19 =
		   dp0_tlp_readReq$D_OUT[30:29] != 2'd3 ||
		   dp0_bram_serverAdapterA_3_outData_outData$whas;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q20 =
	      dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q20 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		dp0_bml_remDone :
		dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_dp0_bml_fabDone_ETC__q20 =
		   dp0_bml_fabDone;
    endcase
  end
  always@(dp1_tlp_outDwRemain)
  begin
    case (dp1_tlp_outDwRemain[1:0])
      2'b0:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q21 = 16'hFFFF;
      2'b01:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q21 = 16'hF000;
      2'b10:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q21 = 16'hFF00;
      2'd3:
	  CASE_dp1_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q21 = 16'hFFF0;
    endcase
  end
  always@(dp0_tlp_outDwRemain)
  begin
    case (dp0_tlp_outDwRemain[1:0])
      2'b0:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q22 = 16'hFFFF;
      2'b01:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q22 = 16'hF000;
      2'b10:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q22 = 16'hFF00;
      2'd3:
	  CASE_dp0_tlp_outDwRemain_BITS_1_TO_0_0xFFF0_0b_ETC__q22 = 16'hFFF0;
    endcase
  end
  always@(idx__h126555 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h126555)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1040 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1040 =
	      dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1040 =
	      dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1040 =
	      dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h128700 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h128700)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1050 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1050 =
	      dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1050 =
	      dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1050 =
	      dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h129942 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h129942)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1060 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1060 =
	      dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1060 =
	      dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1060 =
	      dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h131184 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h131184)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1070 =
	      dp1_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1070 =
	      dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1070 =
	      dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d1070 =
	      dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h49991 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h49991)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3198 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3198 =
	      dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3198 =
	      dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3198 =
	      dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(idx__h52136 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h52136)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3208 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3208 =
	      dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3208 =
	      dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3208 =
	      dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(idx__h53378 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h53378)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3218 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3218 =
	      dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3218 =
	      dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3218 =
	      dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(idx__h54620 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h54620)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3228 =
	      dp0_tlp_writeRemainDWLen == 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3228 =
	      dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3228 =
	      dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d3228 =
	      dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148 or
	  dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145 or
	  dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146 or
	  dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147)
  begin
    case (dp1_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q23 =
	      dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q23 =
	      dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q23 =
	      dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp1_ETC__q23 =
	      dp1_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148;
    endcase
  end
  always@(dp1_tlp_mReqF$D_OUT or
	  dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148 or
	  dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145 or
	  dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146 or
	  dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147)
  begin
    case (dp1_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q24 =
	      dp1_bram_serverAdapterA_cnt_23_SLT_3___d5145;
      2'd1:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q24 =
	      dp1_bram_serverAdapterA_1_cnt_25_SLT_3___d5146;
      2'd2:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q24 =
	      dp1_bram_serverAdapterA_2_cnt_27_SLT_3___d5147;
      2'd3:
	  CASE_dp1_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp1_ETC__q24 =
	      dp1_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp1_bram_serverAdapterA_3_cnt_29_SLT_3___d5148;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781 or
	  dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778 or
	  dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779 or
	  dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780)
  begin
    case (dp0_tlp_mReqF$D_OUT[30:29])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q25 =
	      dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q25 =
	      dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q25 =
	      dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_30_TO_29_NOT_dp0_ETC__q25 =
	      dp0_tlp_mReqF$D_OUT[30:29] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781;
    endcase
  end
  always@(dp0_tlp_mReqF$D_OUT or
	  dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781 or
	  dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778 or
	  dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779 or
	  dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780)
  begin
    case (dp0_tlp_mReqF$D_OUT[51:50])
      2'd0:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q26 =
	      dp0_bram_serverAdapterA_cnt_081_SLT_3___d4778;
      2'd1:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q26 =
	      dp0_bram_serverAdapterA_1_cnt_083_SLT_3___d4779;
      2'd2:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q26 =
	      dp0_bram_serverAdapterA_2_cnt_085_SLT_3___d4780;
      2'd3:
	  CASE_dp0_tlp_mReqFD_OUT_BITS_51_TO_50_NOT_dp0_ETC__q26 =
	      dp0_tlp_mReqF$D_OUT[51:50] != 2'd3 ||
	      dp0_bram_serverAdapterA_3_cnt_087_SLT_3___d4781;
    endcase
  end
  always@(dp1_dpControl or
	  dp1_bml_fabDone or dp1_bml_remDone or dp1_bml_remStart)
  begin
    case (dp1_dpControl[1:0])
      2'd0:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q27 =
	      !dp1_bml_fabDone;
      2'd1:
	  CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q27 =
	      (dp1_dpControl[3:2] == 2'd1) ?
		!dp1_bml_remDone :
		!dp1_bml_remStart;
      default: CASE_dp1_dpControl_BITS_1_TO_0_NOT_dp1_bml_fab_ETC__q27 =
		   !dp1_bml_fabDone;
    endcase
  end
  always@(dp0_dpControl or
	  dp0_bml_fabDone or dp0_bml_remDone or dp0_bml_remStart)
  begin
    case (dp0_dpControl[1:0])
      2'd0:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q28 =
	      !dp0_bml_fabDone;
      2'd1:
	  CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q28 =
	      (dp0_dpControl[3:2] == 2'd1) ?
		!dp0_bml_remDone :
		!dp0_bml_remStart;
      default: CASE_dp0_dpControl_BITS_1_TO_0_NOT_dp0_bml_fab_ETC__q28 =
		   !dp0_bml_fabDone;
    endcase
  end
  always@(idx__h128700 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h128700)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5235 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h126555 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h126555)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4547 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4547 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4547 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4547 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h128700 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h128700)
      2'd0:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4548 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4548 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4548 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_1_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4548 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h129942 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h129942)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4602 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4602 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4602 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4602 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h131184 or
	  dp1_tlp_writeRemainDWLen_027_ULE_3___d4500 or
	  dp1_tlp_writeRemainDWLen or
	  dp1_tlp_writeRemainDWLen_027_ULE_1___d4504 or
	  dp1_tlp_writeRemainDWLen_027_ULE_2___d4499)
  begin
    case (idx__h131184)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4549 =
	      dp1_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4549 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_1___d4504;
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4549 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_2___d4499;
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4549 =
	      !dp1_tlp_writeRemainDWLen_027_ULE_3___d4500;
    endcase
  end
  always@(idx__h49991 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h49991)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4575 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4575 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4575 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4575 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(idx__h52136 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h52136)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4572 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4572 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4572 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4572 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(idx__h53378 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h53378)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4573 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4573 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4573 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4573 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(idx__h54620 or
	  dp0_tlp_writeRemainDWLen_185_ULE_3___d4450 or
	  dp0_tlp_writeRemainDWLen or
	  dp0_tlp_writeRemainDWLen_185_ULE_1___d4454 or
	  dp0_tlp_writeRemainDWLen_185_ULE_2___d4447)
  begin
    case (idx__h54620)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4574 =
	      dp0_tlp_writeRemainDWLen != 10'd0;
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4574 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_1___d4454;
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4574 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_2___d4447;
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4574 =
	      !dp0_tlp_writeRemainDWLen_185_ULE_3___d4450;
    endcase
  end
  always@(dp1_tlp_readReq$D_OUT or
	  y_avValue__h122850 or
	  y_avValue__h122790 or y_avValue__h122810 or y_avValue__h122830)
  begin
    case (dp1_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212 =
	      y_avValue__h122790;
      2'd1:
	  IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212 =
	      y_avValue__h122810;
      2'd2:
	  IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212 =
	      y_avValue__h122830;
      2'd3:
	  IF_dp1_tlp_readReq_first__25_BITS_30_TO_29_55__ETC___d5212 =
	      y_avValue__h122850;
    endcase
  end
  always@(idx__h126555 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h126555)
      2'd0:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d5224 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h129942 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h129942)
      2'd0:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4913 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h131184 or dp1_tlp_mReqF$D_OUT)
  begin
    case (idx__h131184)
      2'd0:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914 =
	      dp1_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914 =
	      dp1_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914 =
	      dp1_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp1_tlp_writeDWAddr_023_BITS_1_TO_0_ETC___d4914 =
	      dp1_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(dp0_tlp_readReq$D_OUT or
	  y_avValue__h46286 or
	  y_avValue__h46226 or y_avValue__h46246 or y_avValue__h46266)
  begin
    case (dp0_tlp_readReq$D_OUT[30:29])
      2'd0:
	  IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821 =
	      y_avValue__h46226;
      2'd1:
	  IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821 =
	      y_avValue__h46246;
      2'd2:
	  IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821 =
	      y_avValue__h46266;
      2'd3:
	  IF_dp0_tlp_readReq_first__983_BITS_30_TO_29_01_ETC___d4821 =
	      y_avValue__h46286;
    endcase
  end
  always@(idx__h49991 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h49991)
      2'd0:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_0_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4832 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h52136 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h52136)
      2'd0:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_1_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4844 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h53378 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h53378)
      2'd0:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_2_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4848 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end
  always@(idx__h54620 or dp0_tlp_mReqF$D_OUT)
  begin
    case (idx__h54620)
      2'd0:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853 =
	      dp0_tlp_mReqF$D_OUT[127:96];
      2'd1:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853 =
	      dp0_tlp_mReqF$D_OUT[95:64];
      2'd2:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853 =
	      dp0_tlp_mReqF$D_OUT[63:32];
      2'd3:
	  IF_3_MINUS_dp0_tlp_writeDWAddr_181_BITS_1_TO_0_ETC___d4853 =
	      dp0_tlp_mReqF$D_OUT[31:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
	itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (chompCnt$EN) chompCnt <= `BSV_ASSIGNMENT_DELAY chompCnt$D_IN;
	if (itc0_wti_nowReq$EN)
	  itc0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY itc0_wti_nowReq$D_IN;
	if (itc0_wti_sThreadBusy_d$EN)
	  itc0_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      itc0_wti_sThreadBusy_d$D_IN;
	if (itc1_wti_nowReq$EN)
	  itc1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY itc1_wti_nowReq$D_IN;
	if (itc1_wti_sThreadBusy_d$EN)
	  itc1_wti_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      itc1_wti_sThreadBusy_d$D_IN;
      end
    if (!cp$RST_N_wci_Vm_14_mReset_n)
      begin
        dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp1_bml_crdBuf_modulus$EN)
	  dp1_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_modulus$D_IN;
	if (dp1_bml_crdBuf_value$EN)
	  dp1_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_crdBuf_value$D_IN;
	if (dp1_bml_fabAvail$EN)
	  dp1_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabAvail$D_IN;
	if (dp1_bml_fabBuf_modulus$EN)
	  dp1_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_modulus$D_IN;
	if (dp1_bml_fabBuf_value$EN)
	  dp1_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabBuf_value$D_IN;
	if (dp1_bml_fabDone$EN)
	  dp1_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabDone$D_IN;
	if (dp1_bml_fabFlowBase$EN)
	  dp1_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowBase$D_IN;
	if (dp1_bml_fabFlowSize$EN)
	  dp1_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabFlowSize$D_IN;
	if (dp1_bml_fabMesgBase$EN)
	  dp1_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgBase$D_IN;
	if (dp1_bml_fabMesgSize$EN)
	  dp1_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMesgSize$D_IN;
	if (dp1_bml_fabMetaBase$EN)
	  dp1_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaBase$D_IN;
	if (dp1_bml_fabMetaSize$EN)
	  dp1_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_fabMetaSize$D_IN;
	if (dp1_bml_fabNumBufs$EN)
	  dp1_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabNumBufs$D_IN;
	if (dp1_bml_lclBufDone$EN)
	  dp1_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufDone$D_IN;
	if (dp1_bml_lclBufStart$EN)
	  dp1_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBufStart$D_IN;
	if (dp1_bml_lclBuf_modulus$EN)
	  dp1_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_modulus$D_IN;
	if (dp1_bml_lclBuf_value$EN)
	  dp1_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_lclBuf_value$D_IN;
	if (dp1_bml_lclDones$EN)
	  dp1_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclDones$D_IN;
	if (dp1_bml_lclNumBufs$EN)
	  dp1_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclNumBufs$D_IN;
	if (dp1_bml_lclStarts$EN)
	  dp1_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclStarts$D_IN;
	if (dp1_bml_mesgBase$EN)
	  dp1_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgBase$D_IN;
	if (dp1_bml_mesgSize$EN)
	  dp1_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_mesgSize$D_IN;
	if (dp1_bml_metaBase$EN)
	  dp1_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaBase$D_IN;
	if (dp1_bml_metaSize$EN)
	  dp1_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp1_bml_metaSize$D_IN;
	if (dp1_bml_remBuf_modulus$EN)
	  dp1_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_modulus$D_IN;
	if (dp1_bml_remBuf_value$EN)
	  dp1_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp1_bml_remBuf_value$D_IN;
	if (dp1_bml_remDone$EN)
	  dp1_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDone$D_IN;
	if (dp1_bml_remDones$EN)
	  dp1_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp1_bml_remDones$D_IN;
	if (dp1_bml_remStart$EN)
	  dp1_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStart$D_IN;
	if (dp1_bml_remStarts$EN)
	  dp1_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp1_bml_remStarts$D_IN;
	if (dp1_bram_serverAdapterA_1_cnt$EN)
	  dp1_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_cnt$D_IN;
	if (dp1_bram_serverAdapterA_1_s1$EN)
	  dp1_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_1_s1$D_IN;
	if (dp1_bram_serverAdapterA_2_cnt$EN)
	  dp1_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_cnt$D_IN;
	if (dp1_bram_serverAdapterA_2_s1$EN)
	  dp1_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_2_s1$D_IN;
	if (dp1_bram_serverAdapterA_3_cnt$EN)
	  dp1_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_cnt$D_IN;
	if (dp1_bram_serverAdapterA_3_s1$EN)
	  dp1_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_3_s1$D_IN;
	if (dp1_bram_serverAdapterA_cnt$EN)
	  dp1_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_cnt$D_IN;
	if (dp1_bram_serverAdapterA_s1$EN)
	  dp1_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterA_s1$D_IN;
	if (dp1_bram_serverAdapterB_1_cnt$EN)
	  dp1_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_cnt$D_IN;
	if (dp1_bram_serverAdapterB_1_s1$EN)
	  dp1_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_1_s1$D_IN;
	if (dp1_bram_serverAdapterB_2_cnt$EN)
	  dp1_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_cnt$D_IN;
	if (dp1_bram_serverAdapterB_2_s1$EN)
	  dp1_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_2_s1$D_IN;
	if (dp1_bram_serverAdapterB_3_cnt$EN)
	  dp1_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_cnt$D_IN;
	if (dp1_bram_serverAdapterB_3_s1$EN)
	  dp1_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_3_s1$D_IN;
	if (dp1_bram_serverAdapterB_cnt$EN)
	  dp1_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_cnt$D_IN;
	if (dp1_bram_serverAdapterB_s1$EN)
	  dp1_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_bram_serverAdapterB_s1$D_IN;
	if (dp1_dpControl$EN)
	  dp1_dpControl <= `BSV_ASSIGNMENT_DELAY dp1_dpControl$D_IN;
	if (dp1_tlp_creditReady$EN)
	  dp1_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_creditReady$D_IN;
	if (dp1_tlp_debugBdata$EN)
	  dp1_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp1_tlp_debugBdata$D_IN;
	if (dp1_tlp_dmaDoTailEvent$EN)
	  dp1_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_dmaDoTailEvent$D_IN;
	if (dp1_tlp_dmaTag$EN)
	  dp1_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaTag$D_IN;
	if (dp1_tlp_doXmtMetaBody$EN)
	  dp1_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_doXmtMetaBody$D_IN;
	if (dp1_tlp_fabMeta$EN)
	  dp1_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMeta$D_IN;
	if (dp1_tlp_farBufReady$EN)
	  dp1_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_farBufReady$D_IN;
	if (dp1_tlp_flowDiagCount$EN)
	  dp1_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_flowDiagCount$D_IN;
	if (dp1_tlp_gotResponseHeader$EN)
	  dp1_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_gotResponseHeader$D_IN;
	if (dp1_tlp_maxPayloadSize$EN)
	  dp1_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxPayloadSize$D_IN;
	if (dp1_tlp_maxReadReqSize$EN)
	  dp1_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_maxReadReqSize$D_IN;
	if (dp1_tlp_nearBufReady$EN)
	  dp1_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_nearBufReady$D_IN;
	if (dp1_tlp_postSeqDwell$EN)
	  dp1_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_postSeqDwell$D_IN;
	if (dp1_tlp_pullTagMatch$EN)
	  dp1_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_pullTagMatch$D_IN;
	if (dp1_tlp_readHeaderSent$EN)
	  dp1_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readHeaderSent$D_IN;
	if (dp1_tlp_readStarted$EN)
	  dp1_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_readStarted$D_IN;
	if (dp1_tlp_remDone$EN)
	  dp1_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remDone$D_IN;
	if (dp1_tlp_remStart$EN)
	  dp1_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remStart$D_IN;
	if (dp1_tlp_reqMesgInFlight$EN)
	  dp1_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMesgInFlight$D_IN;
	if (dp1_tlp_reqMetaBodyInFlight$EN)
	  dp1_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaBodyInFlight$D_IN;
	if (dp1_tlp_reqMetaInFlight$EN)
	  dp1_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_reqMetaInFlight$D_IN;
	if (dp1_tlp_tlpMetaSent$EN)
	  dp1_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_tlpMetaSent$D_IN;
	if (dp1_tlp_tlpRcvBusy$EN)
	  dp1_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpRcvBusy$D_IN;
	if (dp1_tlp_tlpXmtBusy$EN)
	  dp1_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp1_tlp_tlpXmtBusy$D_IN;
	if (dp1_tlp_xmtMetaInFlight$EN)
	  dp1_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp1_tlp_xmtMetaInFlight$D_IN;
	if (dp1_tlp_xmtMetaOK$EN)
	  dp1_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp1_tlp_xmtMetaOK$D_IN;
	if (dp1_wci_cEdge$EN)
	  dp1_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp1_wci_cEdge$D_IN;
	if (dp1_wci_cState$EN)
	  dp1_wci_cState <= `BSV_ASSIGNMENT_DELAY dp1_wci_cState$D_IN;
	if (dp1_wci_ctlAckReg$EN)
	  dp1_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_ctlAckReg$D_IN;
	if (dp1_wci_ctlOpActive$EN)
	  dp1_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_ctlOpActive$D_IN;
	if (dp1_wci_illegalEdge$EN)
	  dp1_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_illegalEdge$D_IN;
	if (dp1_wci_nState$EN)
	  dp1_wci_nState <= `BSV_ASSIGNMENT_DELAY dp1_wci_nState$D_IN;
	if (dp1_wci_reqF_countReg$EN)
	  dp1_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_reqF_countReg$D_IN;
	if (dp1_wci_respF_c_r$EN)
	  dp1_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_c_r$D_IN;
	if (dp1_wci_respF_q_0$EN)
	  dp1_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_0$D_IN;
	if (dp1_wci_respF_q_1$EN)
	  dp1_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp1_wci_respF_q_1$D_IN;
	if (dp1_wci_sFlagReg$EN)
	  dp1_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp1_wci_sFlagReg$D_IN;
	if (dp1_wci_sThreadBusy_d$EN)
	  dp1_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp1_wci_sThreadBusy_d$D_IN;
	if (dp1_wmi_bufDwell$EN)
	  dp1_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp1_wmi_bufDwell$D_IN;
	if (dp1_wmi_bytesRemainResp$EN)
	  dp1_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_bytesRemainResp$D_IN;
	if (dp1_wmi_doneWithMesg$EN)
	  dp1_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_doneWithMesg$D_IN;
	if (dp1_wmi_lastMesg$EN)
	  dp1_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lastMesg$D_IN;
	if (dp1_wmi_mesgBufReady$EN)
	  dp1_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_mesgBufReady$D_IN;
	if (dp1_wmi_mesgBusy$EN)
	  dp1_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgBusy$D_IN;
	if (dp1_wmi_mesgCount$EN)
	  dp1_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgCount$D_IN;
	if (dp1_wmi_mesgDone$EN)
	  dp1_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgDone$D_IN;
	if (dp1_wmi_mesgMeta$EN)
	  dp1_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgMeta$D_IN;
	if (dp1_wmi_mesgStart$EN)
	  dp1_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp1_wmi_mesgStart$D_IN;
	if (dp1_wmi_metaBusy$EN)
	  dp1_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp1_wmi_metaBusy$D_IN;
	if (dp1_wmi_p4B$EN)
	  dp1_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp1_wmi_p4B$D_IN;
	if (dp1_wmi_rdActive$EN)
	  dp1_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_rdActive$D_IN;
	if (dp1_wmi_reqCount$EN)
	  dp1_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_reqCount$D_IN;
	if (dp1_wmi_thisMesg$EN)
	  dp1_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp1_wmi_thisMesg$D_IN;
	if (dp1_wmi_wmi_blockReq$EN)
	  dp1_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_blockReq$D_IN;
	if (dp1_wmi_wmi_dhF_countReg$EN)
	  dp1_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_countReg$D_IN;
	if (dp1_wmi_wmi_dhF_levelsValid$EN)
	  dp1_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp1_wmi_wmi_errorSticky$EN)
	  dp1_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_errorSticky$D_IN;
	if (dp1_wmi_wmi_mFlagF_countReg$EN)
	  dp1_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp1_wmi_wmi_mFlagF_levelsValid$EN)
	  dp1_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp1_wmi_wmi_mFlagReg$EN)
	  dp1_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_mFlagReg$D_IN;
	if (dp1_wmi_wmi_operateD$EN)
	  dp1_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_operateD$D_IN;
	if (dp1_wmi_wmi_peerIsReady$EN)
	  dp1_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_peerIsReady$D_IN;
	if (dp1_wmi_wmi_reqF_countReg$EN)
	  dp1_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_countReg$D_IN;
	if (dp1_wmi_wmi_reqF_levelsValid$EN)
	  dp1_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp1_wmi_wmi_respF_c_r$EN)
	  dp1_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_c_r$D_IN;
	if (dp1_wmi_wmi_respF_q_0$EN)
	  dp1_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_0$D_IN;
	if (dp1_wmi_wmi_respF_q_1$EN)
	  dp1_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_respF_q_1$D_IN;
	if (dp1_wmi_wmi_sFlagReg$EN)
	  dp1_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_sFlagReg$D_IN;
	if (dp1_wmi_wmi_trafficSticky$EN)
	  dp1_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp1_wmi_wmi_trafficSticky$D_IN;
	if (dp1_wmi_wrActive$EN)
	  dp1_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrActive$D_IN;
	if (dp1_wmi_wrFinalize$EN)
	  dp1_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrFinalize$D_IN;
	if (dp1_wmi_wrtCount$EN)
	  dp1_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wrtCount$D_IN;
	if (dp1_wti_nowReq$EN)
	  dp1_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp1_wti_nowReq$D_IN;
      end
    if (!cp$RST_N_wci_Vm_13_mReset_n)
      begin
        dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0018;
	dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY 32'h00000004;
	dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF0000;
	dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY 32'h00000800;
	dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY 32'hFFFF3800;
	dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY 32'h00000010;
	dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY 16'd1;
	dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY 16'h0;
	dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY 16'h0800;
	dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY 16'h3800;
	dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY 16'h0010;
	dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_dpControl <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY 128'd0;
	dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY 5'd0;
	dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY 13'd128;
	dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY 13'd4096;
	dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY 14'd0;
	dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY 32'hFEFEFFFE;
	dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	    258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	    258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY 16'd0;
	dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY 67'd0;
      end
    else
      begin
        if (dp0_bml_crdBuf_modulus$EN)
	  dp0_bml_crdBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_modulus$D_IN;
	if (dp0_bml_crdBuf_value$EN)
	  dp0_bml_crdBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_crdBuf_value$D_IN;
	if (dp0_bml_fabAvail$EN)
	  dp0_bml_fabAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabAvail$D_IN;
	if (dp0_bml_fabBuf_modulus$EN)
	  dp0_bml_fabBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_modulus$D_IN;
	if (dp0_bml_fabBuf_value$EN)
	  dp0_bml_fabBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabBuf_value$D_IN;
	if (dp0_bml_fabDone$EN)
	  dp0_bml_fabDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabDone$D_IN;
	if (dp0_bml_fabFlowBase$EN)
	  dp0_bml_fabFlowBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowBase$D_IN;
	if (dp0_bml_fabFlowSize$EN)
	  dp0_bml_fabFlowSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabFlowSize$D_IN;
	if (dp0_bml_fabMesgBase$EN)
	  dp0_bml_fabMesgBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgBase$D_IN;
	if (dp0_bml_fabMesgSize$EN)
	  dp0_bml_fabMesgSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMesgSize$D_IN;
	if (dp0_bml_fabMetaBase$EN)
	  dp0_bml_fabMetaBase <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaBase$D_IN;
	if (dp0_bml_fabMetaSize$EN)
	  dp0_bml_fabMetaSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_fabMetaSize$D_IN;
	if (dp0_bml_fabNumBufs$EN)
	  dp0_bml_fabNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabNumBufs$D_IN;
	if (dp0_bml_lclBufDone$EN)
	  dp0_bml_lclBufDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufDone$D_IN;
	if (dp0_bml_lclBufStart$EN)
	  dp0_bml_lclBufStart <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBufStart$D_IN;
	if (dp0_bml_lclBuf_modulus$EN)
	  dp0_bml_lclBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_modulus$D_IN;
	if (dp0_bml_lclBuf_value$EN)
	  dp0_bml_lclBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_lclBuf_value$D_IN;
	if (dp0_bml_lclDones$EN)
	  dp0_bml_lclDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclDones$D_IN;
	if (dp0_bml_lclNumBufs$EN)
	  dp0_bml_lclNumBufs <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclNumBufs$D_IN;
	if (dp0_bml_lclStarts$EN)
	  dp0_bml_lclStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclStarts$D_IN;
	if (dp0_bml_mesgBase$EN)
	  dp0_bml_mesgBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgBase$D_IN;
	if (dp0_bml_mesgSize$EN)
	  dp0_bml_mesgSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_mesgSize$D_IN;
	if (dp0_bml_metaBase$EN)
	  dp0_bml_metaBase <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaBase$D_IN;
	if (dp0_bml_metaSize$EN)
	  dp0_bml_metaSize <= `BSV_ASSIGNMENT_DELAY dp0_bml_metaSize$D_IN;
	if (dp0_bml_remBuf_modulus$EN)
	  dp0_bml_remBuf_modulus <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_modulus$D_IN;
	if (dp0_bml_remBuf_value$EN)
	  dp0_bml_remBuf_value <= `BSV_ASSIGNMENT_DELAY
	      dp0_bml_remBuf_value$D_IN;
	if (dp0_bml_remDone$EN)
	  dp0_bml_remDone <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDone$D_IN;
	if (dp0_bml_remDones$EN)
	  dp0_bml_remDones <= `BSV_ASSIGNMENT_DELAY dp0_bml_remDones$D_IN;
	if (dp0_bml_remStart$EN)
	  dp0_bml_remStart <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStart$D_IN;
	if (dp0_bml_remStarts$EN)
	  dp0_bml_remStarts <= `BSV_ASSIGNMENT_DELAY dp0_bml_remStarts$D_IN;
	if (dp0_bram_serverAdapterA_1_cnt$EN)
	  dp0_bram_serverAdapterA_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_cnt$D_IN;
	if (dp0_bram_serverAdapterA_1_s1$EN)
	  dp0_bram_serverAdapterA_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_1_s1$D_IN;
	if (dp0_bram_serverAdapterA_2_cnt$EN)
	  dp0_bram_serverAdapterA_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_cnt$D_IN;
	if (dp0_bram_serverAdapterA_2_s1$EN)
	  dp0_bram_serverAdapterA_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_2_s1$D_IN;
	if (dp0_bram_serverAdapterA_3_cnt$EN)
	  dp0_bram_serverAdapterA_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_cnt$D_IN;
	if (dp0_bram_serverAdapterA_3_s1$EN)
	  dp0_bram_serverAdapterA_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_3_s1$D_IN;
	if (dp0_bram_serverAdapterA_cnt$EN)
	  dp0_bram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_cnt$D_IN;
	if (dp0_bram_serverAdapterA_s1$EN)
	  dp0_bram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterA_s1$D_IN;
	if (dp0_bram_serverAdapterB_1_cnt$EN)
	  dp0_bram_serverAdapterB_1_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_cnt$D_IN;
	if (dp0_bram_serverAdapterB_1_s1$EN)
	  dp0_bram_serverAdapterB_1_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_1_s1$D_IN;
	if (dp0_bram_serverAdapterB_2_cnt$EN)
	  dp0_bram_serverAdapterB_2_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_cnt$D_IN;
	if (dp0_bram_serverAdapterB_2_s1$EN)
	  dp0_bram_serverAdapterB_2_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_2_s1$D_IN;
	if (dp0_bram_serverAdapterB_3_cnt$EN)
	  dp0_bram_serverAdapterB_3_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_cnt$D_IN;
	if (dp0_bram_serverAdapterB_3_s1$EN)
	  dp0_bram_serverAdapterB_3_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_3_s1$D_IN;
	if (dp0_bram_serverAdapterB_cnt$EN)
	  dp0_bram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_cnt$D_IN;
	if (dp0_bram_serverAdapterB_s1$EN)
	  dp0_bram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_bram_serverAdapterB_s1$D_IN;
	if (dp0_dpControl$EN)
	  dp0_dpControl <= `BSV_ASSIGNMENT_DELAY dp0_dpControl$D_IN;
	if (dp0_tlp_creditReady$EN)
	  dp0_tlp_creditReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_creditReady$D_IN;
	if (dp0_tlp_debugBdata$EN)
	  dp0_tlp_debugBdata <= `BSV_ASSIGNMENT_DELAY dp0_tlp_debugBdata$D_IN;
	if (dp0_tlp_dmaDoTailEvent$EN)
	  dp0_tlp_dmaDoTailEvent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_dmaDoTailEvent$D_IN;
	if (dp0_tlp_dmaTag$EN)
	  dp0_tlp_dmaTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaTag$D_IN;
	if (dp0_tlp_doXmtMetaBody$EN)
	  dp0_tlp_doXmtMetaBody <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_doXmtMetaBody$D_IN;
	if (dp0_tlp_fabMeta$EN)
	  dp0_tlp_fabMeta <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMeta$D_IN;
	if (dp0_tlp_farBufReady$EN)
	  dp0_tlp_farBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_farBufReady$D_IN;
	if (dp0_tlp_flowDiagCount$EN)
	  dp0_tlp_flowDiagCount <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_flowDiagCount$D_IN;
	if (dp0_tlp_gotResponseHeader$EN)
	  dp0_tlp_gotResponseHeader <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_gotResponseHeader$D_IN;
	if (dp0_tlp_maxPayloadSize$EN)
	  dp0_tlp_maxPayloadSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxPayloadSize$D_IN;
	if (dp0_tlp_maxReadReqSize$EN)
	  dp0_tlp_maxReadReqSize <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_maxReadReqSize$D_IN;
	if (dp0_tlp_nearBufReady$EN)
	  dp0_tlp_nearBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_nearBufReady$D_IN;
	if (dp0_tlp_postSeqDwell$EN)
	  dp0_tlp_postSeqDwell <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_postSeqDwell$D_IN;
	if (dp0_tlp_pullTagMatch$EN)
	  dp0_tlp_pullTagMatch <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_pullTagMatch$D_IN;
	if (dp0_tlp_readHeaderSent$EN)
	  dp0_tlp_readHeaderSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readHeaderSent$D_IN;
	if (dp0_tlp_readStarted$EN)
	  dp0_tlp_readStarted <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_readStarted$D_IN;
	if (dp0_tlp_remDone$EN)
	  dp0_tlp_remDone <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remDone$D_IN;
	if (dp0_tlp_remStart$EN)
	  dp0_tlp_remStart <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remStart$D_IN;
	if (dp0_tlp_reqMesgInFlight$EN)
	  dp0_tlp_reqMesgInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMesgInFlight$D_IN;
	if (dp0_tlp_reqMetaBodyInFlight$EN)
	  dp0_tlp_reqMetaBodyInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaBodyInFlight$D_IN;
	if (dp0_tlp_reqMetaInFlight$EN)
	  dp0_tlp_reqMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_reqMetaInFlight$D_IN;
	if (dp0_tlp_tlpMetaSent$EN)
	  dp0_tlp_tlpMetaSent <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_tlpMetaSent$D_IN;
	if (dp0_tlp_tlpRcvBusy$EN)
	  dp0_tlp_tlpRcvBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpRcvBusy$D_IN;
	if (dp0_tlp_tlpXmtBusy$EN)
	  dp0_tlp_tlpXmtBusy <= `BSV_ASSIGNMENT_DELAY dp0_tlp_tlpXmtBusy$D_IN;
	if (dp0_tlp_xmtMetaInFlight$EN)
	  dp0_tlp_xmtMetaInFlight <= `BSV_ASSIGNMENT_DELAY
	      dp0_tlp_xmtMetaInFlight$D_IN;
	if (dp0_tlp_xmtMetaOK$EN)
	  dp0_tlp_xmtMetaOK <= `BSV_ASSIGNMENT_DELAY dp0_tlp_xmtMetaOK$D_IN;
	if (dp0_wci_cEdge$EN)
	  dp0_wci_cEdge <= `BSV_ASSIGNMENT_DELAY dp0_wci_cEdge$D_IN;
	if (dp0_wci_cState$EN)
	  dp0_wci_cState <= `BSV_ASSIGNMENT_DELAY dp0_wci_cState$D_IN;
	if (dp0_wci_ctlAckReg$EN)
	  dp0_wci_ctlAckReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_ctlAckReg$D_IN;
	if (dp0_wci_ctlOpActive$EN)
	  dp0_wci_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_ctlOpActive$D_IN;
	if (dp0_wci_illegalEdge$EN)
	  dp0_wci_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_illegalEdge$D_IN;
	if (dp0_wci_nState$EN)
	  dp0_wci_nState <= `BSV_ASSIGNMENT_DELAY dp0_wci_nState$D_IN;
	if (dp0_wci_reqF_countReg$EN)
	  dp0_wci_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_reqF_countReg$D_IN;
	if (dp0_wci_respF_c_r$EN)
	  dp0_wci_respF_c_r <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_c_r$D_IN;
	if (dp0_wci_respF_q_0$EN)
	  dp0_wci_respF_q_0 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_0$D_IN;
	if (dp0_wci_respF_q_1$EN)
	  dp0_wci_respF_q_1 <= `BSV_ASSIGNMENT_DELAY dp0_wci_respF_q_1$D_IN;
	if (dp0_wci_sFlagReg$EN)
	  dp0_wci_sFlagReg <= `BSV_ASSIGNMENT_DELAY dp0_wci_sFlagReg$D_IN;
	if (dp0_wci_sThreadBusy_d$EN)
	  dp0_wci_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      dp0_wci_sThreadBusy_d$D_IN;
	if (dp0_wmi_bufDwell$EN)
	  dp0_wmi_bufDwell <= `BSV_ASSIGNMENT_DELAY dp0_wmi_bufDwell$D_IN;
	if (dp0_wmi_bytesRemainResp$EN)
	  dp0_wmi_bytesRemainResp <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_bytesRemainResp$D_IN;
	if (dp0_wmi_doneWithMesg$EN)
	  dp0_wmi_doneWithMesg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_doneWithMesg$D_IN;
	if (dp0_wmi_lastMesg$EN)
	  dp0_wmi_lastMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lastMesg$D_IN;
	if (dp0_wmi_mesgBufReady$EN)
	  dp0_wmi_mesgBufReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_mesgBufReady$D_IN;
	if (dp0_wmi_mesgBusy$EN)
	  dp0_wmi_mesgBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgBusy$D_IN;
	if (dp0_wmi_mesgCount$EN)
	  dp0_wmi_mesgCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgCount$D_IN;
	if (dp0_wmi_mesgDone$EN)
	  dp0_wmi_mesgDone <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgDone$D_IN;
	if (dp0_wmi_mesgMeta$EN)
	  dp0_wmi_mesgMeta <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgMeta$D_IN;
	if (dp0_wmi_mesgStart$EN)
	  dp0_wmi_mesgStart <= `BSV_ASSIGNMENT_DELAY dp0_wmi_mesgStart$D_IN;
	if (dp0_wmi_metaBusy$EN)
	  dp0_wmi_metaBusy <= `BSV_ASSIGNMENT_DELAY dp0_wmi_metaBusy$D_IN;
	if (dp0_wmi_p4B$EN)
	  dp0_wmi_p4B <= `BSV_ASSIGNMENT_DELAY dp0_wmi_p4B$D_IN;
	if (dp0_wmi_rdActive$EN)
	  dp0_wmi_rdActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_rdActive$D_IN;
	if (dp0_wmi_reqCount$EN)
	  dp0_wmi_reqCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_reqCount$D_IN;
	if (dp0_wmi_thisMesg$EN)
	  dp0_wmi_thisMesg <= `BSV_ASSIGNMENT_DELAY dp0_wmi_thisMesg$D_IN;
	if (dp0_wmi_wmi_blockReq$EN)
	  dp0_wmi_wmi_blockReq <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_blockReq$D_IN;
	if (dp0_wmi_wmi_dhF_countReg$EN)
	  dp0_wmi_wmi_dhF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_countReg$D_IN;
	if (dp0_wmi_wmi_dhF_levelsValid$EN)
	  dp0_wmi_wmi_dhF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_dhF_levelsValid$D_IN;
	if (dp0_wmi_wmi_errorSticky$EN)
	  dp0_wmi_wmi_errorSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_errorSticky$D_IN;
	if (dp0_wmi_wmi_mFlagF_countReg$EN)
	  dp0_wmi_wmi_mFlagF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_countReg$D_IN;
	if (dp0_wmi_wmi_mFlagF_levelsValid$EN)
	  dp0_wmi_wmi_mFlagF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagF_levelsValid$D_IN;
	if (dp0_wmi_wmi_mFlagReg$EN)
	  dp0_wmi_wmi_mFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_mFlagReg$D_IN;
	if (dp0_wmi_wmi_operateD$EN)
	  dp0_wmi_wmi_operateD <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_operateD$D_IN;
	if (dp0_wmi_wmi_peerIsReady$EN)
	  dp0_wmi_wmi_peerIsReady <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_peerIsReady$D_IN;
	if (dp0_wmi_wmi_reqF_countReg$EN)
	  dp0_wmi_wmi_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_countReg$D_IN;
	if (dp0_wmi_wmi_reqF_levelsValid$EN)
	  dp0_wmi_wmi_reqF_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_reqF_levelsValid$D_IN;
	if (dp0_wmi_wmi_respF_c_r$EN)
	  dp0_wmi_wmi_respF_c_r <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_c_r$D_IN;
	if (dp0_wmi_wmi_respF_q_0$EN)
	  dp0_wmi_wmi_respF_q_0 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_0$D_IN;
	if (dp0_wmi_wmi_respF_q_1$EN)
	  dp0_wmi_wmi_respF_q_1 <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_respF_q_1$D_IN;
	if (dp0_wmi_wmi_sFlagReg$EN)
	  dp0_wmi_wmi_sFlagReg <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_sFlagReg$D_IN;
	if (dp0_wmi_wmi_trafficSticky$EN)
	  dp0_wmi_wmi_trafficSticky <= `BSV_ASSIGNMENT_DELAY
	      dp0_wmi_wmi_trafficSticky$D_IN;
	if (dp0_wmi_wrActive$EN)
	  dp0_wmi_wrActive <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrActive$D_IN;
	if (dp0_wmi_wrFinalize$EN)
	  dp0_wmi_wrFinalize <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrFinalize$D_IN;
	if (dp0_wmi_wrtCount$EN)
	  dp0_wmi_wrtCount <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wrtCount$D_IN;
	if (dp0_wti_nowReq$EN)
	  dp0_wti_nowReq <= `BSV_ASSIGNMENT_DELAY dp0_wti_nowReq$D_IN;
      end
    if (dp0_bml_fabBufsAvail$EN)
      dp0_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabBufsAvail$D_IN;
    if (dp0_bml_fabFlowAddr$EN)
      dp0_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabFlowAddr$D_IN;
    if (dp0_bml_fabMesgAddr$EN)
      dp0_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMesgAddr$D_IN;
    if (dp0_bml_fabMetaAddr$EN)
      dp0_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_fabMetaAddr$D_IN;
    if (dp0_bml_lclBufsAR$EN)
      dp0_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsAR$D_IN;
    if (dp0_bml_lclBufsCF$EN)
      dp0_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclBufsCF$D_IN;
    if (dp0_bml_lclCredit$EN)
      dp0_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclCredit$D_IN;
    if (dp0_bml_lclMesgAddr$EN)
      dp0_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMesgAddr$D_IN;
    if (dp0_bml_lclMetaAddr$EN)
      dp0_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_lclMetaAddr$D_IN;
    if (dp0_bml_remMesgAddr$EN)
      dp0_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMesgAddr$D_IN;
    if (dp0_bml_remMetaAddr$EN)
      dp0_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_bml_remMetaAddr$D_IN;
    if (dp0_tlp_dmaPullRemainDWLen$EN)
      dp0_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWLen$D_IN;
    if (dp0_tlp_dmaPullRemainDWSub$EN)
      dp0_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_dmaPullRemainDWSub$D_IN;
    if (dp0_tlp_dmaReqTag$EN)
      dp0_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp0_tlp_dmaReqTag$D_IN;
    if (dp0_tlp_fabFlowAddr$EN)
      dp0_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabFlowAddr$D_IN;
    if (dp0_tlp_fabMesgAccu$EN)
      dp0_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAccu$D_IN;
    if (dp0_tlp_fabMesgAddr$EN)
      dp0_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMesgAddr$D_IN;
    if (dp0_tlp_fabMetaAddr$EN)
      dp0_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_fabMetaAddr$D_IN;
    if (dp0_tlp_inIgnorePkt$EN)
      dp0_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp0_tlp_inIgnorePkt$D_IN;
    if (dp0_tlp_mesgComplReceived$EN)
      dp0_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgComplReceived$D_IN;
    if (dp0_tlp_mesgLengthRemainPull$EN)
      dp0_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPull$D_IN;
    if (dp0_tlp_mesgLengthRemainPush$EN)
      dp0_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_mesgLengthRemainPush$D_IN;
    if (dp0_tlp_outDwRemain$EN)
      dp0_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp0_tlp_outDwRemain$D_IN;
    if (dp0_tlp_rdRespDwRemain$EN)
      dp0_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_rdRespDwRemain$D_IN;
    if (dp0_tlp_readNxtDWAddr$EN)
      dp0_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readNxtDWAddr$D_IN;
    if (dp0_tlp_readRemainDWLen$EN)
      dp0_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_readRemainDWLen$D_IN;
    if (dp0_tlp_remMesgAccu$EN)
      dp0_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAccu$D_IN;
    if (dp0_tlp_remMesgAddr$EN)
      dp0_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMesgAddr$D_IN;
    if (dp0_tlp_remMetaAddr$EN)
      dp0_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_remMetaAddr$D_IN;
    if (dp0_tlp_srcMesgAccu$EN)
      dp0_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp0_tlp_srcMesgAccu$D_IN;
    if (dp0_tlp_writeDWAddr$EN)
      dp0_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeDWAddr$D_IN;
    if (dp0_tlp_writeLastBE$EN)
      dp0_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp0_tlp_writeLastBE$D_IN;
    if (dp0_tlp_writeRemainDWLen$EN)
      dp0_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp0_tlp_writeRemainDWLen$D_IN;
    if (dp0_wmi_addr$EN)
      dp0_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_addr$D_IN;
    if (dp0_wmi_bytesRemainReq$EN)
      dp0_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp0_wmi_bytesRemainReq$D_IN;
    if (dp0_wmi_lclMesgAddr$EN)
      dp0_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMesgAddr$D_IN;
    if (dp0_wmi_lclMetaAddr$EN)
      dp0_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp0_wmi_lclMetaAddr$D_IN;
    if (dp0_wmi_wmi_statusR$EN)
      dp0_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp0_wmi_wmi_statusR$D_IN;
    if (dp1_bml_fabBufsAvail$EN)
      dp1_bml_fabBufsAvail <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabBufsAvail$D_IN;
    if (dp1_bml_fabFlowAddr$EN)
      dp1_bml_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabFlowAddr$D_IN;
    if (dp1_bml_fabMesgAddr$EN)
      dp1_bml_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMesgAddr$D_IN;
    if (dp1_bml_fabMetaAddr$EN)
      dp1_bml_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_fabMetaAddr$D_IN;
    if (dp1_bml_lclBufsAR$EN)
      dp1_bml_lclBufsAR <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsAR$D_IN;
    if (dp1_bml_lclBufsCF$EN)
      dp1_bml_lclBufsCF <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclBufsCF$D_IN;
    if (dp1_bml_lclCredit$EN)
      dp1_bml_lclCredit <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclCredit$D_IN;
    if (dp1_bml_lclMesgAddr$EN)
      dp1_bml_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMesgAddr$D_IN;
    if (dp1_bml_lclMetaAddr$EN)
      dp1_bml_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_lclMetaAddr$D_IN;
    if (dp1_bml_remMesgAddr$EN)
      dp1_bml_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMesgAddr$D_IN;
    if (dp1_bml_remMetaAddr$EN)
      dp1_bml_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_bml_remMetaAddr$D_IN;
    if (dp1_tlp_dmaPullRemainDWLen$EN)
      dp1_tlp_dmaPullRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWLen$D_IN;
    if (dp1_tlp_dmaPullRemainDWSub$EN)
      dp1_tlp_dmaPullRemainDWSub <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_dmaPullRemainDWSub$D_IN;
    if (dp1_tlp_dmaReqTag$EN)
      dp1_tlp_dmaReqTag <= `BSV_ASSIGNMENT_DELAY dp1_tlp_dmaReqTag$D_IN;
    if (dp1_tlp_fabFlowAddr$EN)
      dp1_tlp_fabFlowAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabFlowAddr$D_IN;
    if (dp1_tlp_fabMesgAccu$EN)
      dp1_tlp_fabMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAccu$D_IN;
    if (dp1_tlp_fabMesgAddr$EN)
      dp1_tlp_fabMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMesgAddr$D_IN;
    if (dp1_tlp_fabMetaAddr$EN)
      dp1_tlp_fabMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_fabMetaAddr$D_IN;
    if (dp1_tlp_inIgnorePkt$EN)
      dp1_tlp_inIgnorePkt <= `BSV_ASSIGNMENT_DELAY dp1_tlp_inIgnorePkt$D_IN;
    if (dp1_tlp_mesgComplReceived$EN)
      dp1_tlp_mesgComplReceived <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgComplReceived$D_IN;
    if (dp1_tlp_mesgLengthRemainPull$EN)
      dp1_tlp_mesgLengthRemainPull <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPull$D_IN;
    if (dp1_tlp_mesgLengthRemainPush$EN)
      dp1_tlp_mesgLengthRemainPush <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_mesgLengthRemainPush$D_IN;
    if (dp1_tlp_outDwRemain$EN)
      dp1_tlp_outDwRemain <= `BSV_ASSIGNMENT_DELAY dp1_tlp_outDwRemain$D_IN;
    if (dp1_tlp_rdRespDwRemain$EN)
      dp1_tlp_rdRespDwRemain <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_rdRespDwRemain$D_IN;
    if (dp1_tlp_readNxtDWAddr$EN)
      dp1_tlp_readNxtDWAddr <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readNxtDWAddr$D_IN;
    if (dp1_tlp_readRemainDWLen$EN)
      dp1_tlp_readRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_readRemainDWLen$D_IN;
    if (dp1_tlp_remMesgAccu$EN)
      dp1_tlp_remMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAccu$D_IN;
    if (dp1_tlp_remMesgAddr$EN)
      dp1_tlp_remMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMesgAddr$D_IN;
    if (dp1_tlp_remMetaAddr$EN)
      dp1_tlp_remMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_remMetaAddr$D_IN;
    if (dp1_tlp_srcMesgAccu$EN)
      dp1_tlp_srcMesgAccu <= `BSV_ASSIGNMENT_DELAY dp1_tlp_srcMesgAccu$D_IN;
    if (dp1_tlp_writeDWAddr$EN)
      dp1_tlp_writeDWAddr <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeDWAddr$D_IN;
    if (dp1_tlp_writeLastBE$EN)
      dp1_tlp_writeLastBE <= `BSV_ASSIGNMENT_DELAY dp1_tlp_writeLastBE$D_IN;
    if (dp1_tlp_writeRemainDWLen$EN)
      dp1_tlp_writeRemainDWLen <= `BSV_ASSIGNMENT_DELAY
	  dp1_tlp_writeRemainDWLen$D_IN;
    if (dp1_wmi_addr$EN)
      dp1_wmi_addr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_addr$D_IN;
    if (dp1_wmi_bytesRemainReq$EN)
      dp1_wmi_bytesRemainReq <= `BSV_ASSIGNMENT_DELAY
	  dp1_wmi_bytesRemainReq$D_IN;
    if (dp1_wmi_lclMesgAddr$EN)
      dp1_wmi_lclMesgAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMesgAddr$D_IN;
    if (dp1_wmi_lclMetaAddr$EN)
      dp1_wmi_lclMetaAddr <= `BSV_ASSIGNMENT_DELAY dp1_wmi_lclMetaAddr$D_IN;
    if (dp1_wmi_wmi_statusR$EN)
      dp1_wmi_wmi_statusR <= `BSV_ASSIGNMENT_DELAY dp1_wmi_wmi_statusR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    chompCnt = 8'hAA;
    dp0_bml_crdBuf_modulus = 16'hAAAA;
    dp0_bml_crdBuf_value = 16'hAAAA;
    dp0_bml_fabAvail = 1'h0;
    dp0_bml_fabBuf_modulus = 16'hAAAA;
    dp0_bml_fabBuf_value = 16'hAAAA;
    dp0_bml_fabBufsAvail = 16'hAAAA;
    dp0_bml_fabDone = 1'h0;
    dp0_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp0_bml_fabFlowBase = 32'hAAAAAAAA;
    dp0_bml_fabFlowSize = 32'hAAAAAAAA;
    dp0_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp0_bml_fabMesgBase = 32'hAAAAAAAA;
    dp0_bml_fabMesgSize = 32'hAAAAAAAA;
    dp0_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp0_bml_fabMetaBase = 32'hAAAAAAAA;
    dp0_bml_fabMetaSize = 32'hAAAAAAAA;
    dp0_bml_fabNumBufs = 16'hAAAA;
    dp0_bml_lclBufDone = 1'h0;
    dp0_bml_lclBufStart = 1'h0;
    dp0_bml_lclBuf_modulus = 16'hAAAA;
    dp0_bml_lclBuf_value = 16'hAAAA;
    dp0_bml_lclBufsAR = 16'hAAAA;
    dp0_bml_lclBufsCF = 16'hAAAA;
    dp0_bml_lclCredit = 16'hAAAA;
    dp0_bml_lclDones = 16'hAAAA;
    dp0_bml_lclMesgAddr = 16'hAAAA;
    dp0_bml_lclMetaAddr = 16'hAAAA;
    dp0_bml_lclNumBufs = 16'hAAAA;
    dp0_bml_lclStarts = 16'hAAAA;
    dp0_bml_mesgBase = 16'hAAAA;
    dp0_bml_mesgSize = 16'hAAAA;
    dp0_bml_metaBase = 16'hAAAA;
    dp0_bml_metaSize = 16'hAAAA;
    dp0_bml_remBuf_modulus = 16'hAAAA;
    dp0_bml_remBuf_value = 16'hAAAA;
    dp0_bml_remDone = 1'h0;
    dp0_bml_remDones = 16'hAAAA;
    dp0_bml_remMesgAddr = 16'hAAAA;
    dp0_bml_remMetaAddr = 16'hAAAA;
    dp0_bml_remStart = 1'h0;
    dp0_bml_remStarts = 16'hAAAA;
    dp0_bram_serverAdapterA_1_cnt = 3'h2;
    dp0_bram_serverAdapterA_1_s1 = 2'h2;
    dp0_bram_serverAdapterA_2_cnt = 3'h2;
    dp0_bram_serverAdapterA_2_s1 = 2'h2;
    dp0_bram_serverAdapterA_3_cnt = 3'h2;
    dp0_bram_serverAdapterA_3_s1 = 2'h2;
    dp0_bram_serverAdapterA_cnt = 3'h2;
    dp0_bram_serverAdapterA_s1 = 2'h2;
    dp0_bram_serverAdapterB_1_cnt = 3'h2;
    dp0_bram_serverAdapterB_1_s1 = 2'h2;
    dp0_bram_serverAdapterB_2_cnt = 3'h2;
    dp0_bram_serverAdapterB_2_s1 = 2'h2;
    dp0_bram_serverAdapterB_3_cnt = 3'h2;
    dp0_bram_serverAdapterB_3_s1 = 2'h2;
    dp0_bram_serverAdapterB_cnt = 3'h2;
    dp0_bram_serverAdapterB_s1 = 2'h2;
    dp0_dpControl = 4'hA;
    dp0_tlp_creditReady = 1'h0;
    dp0_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_dmaDoTailEvent = 1'h0;
    dp0_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp0_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp0_tlp_dmaReqTag = 5'h0A;
    dp0_tlp_dmaTag = 5'h0A;
    dp0_tlp_doXmtMetaBody = 1'h0;
    dp0_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp0_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp0_tlp_farBufReady = 1'h0;
    dp0_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp0_tlp_gotResponseHeader = 1'h0;
    dp0_tlp_inIgnorePkt = 1'h0;
    dp0_tlp_maxPayloadSize = 13'h0AAA;
    dp0_tlp_maxReadReqSize = 13'h0AAA;
    dp0_tlp_mesgComplReceived = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp0_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp0_tlp_nearBufReady = 1'h0;
    dp0_tlp_outDwRemain = 10'h2AA;
    dp0_tlp_postSeqDwell = 4'hA;
    dp0_tlp_pullTagMatch = 1'h0;
    dp0_tlp_rdRespDwRemain = 10'h2AA;
    dp0_tlp_readHeaderSent = 1'h0;
    dp0_tlp_readNxtDWAddr = 13'h0AAA;
    dp0_tlp_readRemainDWLen = 10'h2AA;
    dp0_tlp_readStarted = 1'h0;
    dp0_tlp_remDone = 1'h0;
    dp0_tlp_remMesgAccu = 16'hAAAA;
    dp0_tlp_remMesgAddr = 16'hAAAA;
    dp0_tlp_remMetaAddr = 16'hAAAA;
    dp0_tlp_remStart = 1'h0;
    dp0_tlp_reqMesgInFlight = 1'h0;
    dp0_tlp_reqMetaBodyInFlight = 1'h0;
    dp0_tlp_reqMetaInFlight = 1'h0;
    dp0_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp0_tlp_tlpMetaSent = 1'h0;
    dp0_tlp_tlpRcvBusy = 1'h0;
    dp0_tlp_tlpXmtBusy = 1'h0;
    dp0_tlp_writeDWAddr = 13'h0AAA;
    dp0_tlp_writeLastBE = 4'hA;
    dp0_tlp_writeRemainDWLen = 10'h2AA;
    dp0_tlp_xmtMetaInFlight = 1'h0;
    dp0_tlp_xmtMetaOK = 1'h0;
    dp0_wci_cEdge = 3'h2;
    dp0_wci_cState = 3'h2;
    dp0_wci_ctlAckReg = 1'h0;
    dp0_wci_ctlOpActive = 1'h0;
    dp0_wci_illegalEdge = 1'h0;
    dp0_wci_nState = 3'h2;
    dp0_wci_reqF_countReg = 2'h2;
    dp0_wci_respF_c_r = 2'h2;
    dp0_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp0_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp0_wci_sFlagReg = 1'h0;
    dp0_wci_sThreadBusy_d = 1'h0;
    dp0_wmi_addr = 14'h2AAA;
    dp0_wmi_bufDwell = 2'h2;
    dp0_wmi_bytesRemainReq = 14'h2AAA;
    dp0_wmi_bytesRemainResp = 14'h2AAA;
    dp0_wmi_doneWithMesg = 1'h0;
    dp0_wmi_lastMesg = 32'hAAAAAAAA;
    dp0_wmi_lclMesgAddr = 15'h2AAA;
    dp0_wmi_lclMetaAddr = 15'h2AAA;
    dp0_wmi_mesgBufReady = 1'h0;
    dp0_wmi_mesgBusy = 1'h0;
    dp0_wmi_mesgCount = 32'hAAAAAAAA;
    dp0_wmi_mesgDone = 1'h0;
    dp0_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_wmi_mesgStart = 1'h0;
    dp0_wmi_metaBusy = 1'h0;
    dp0_wmi_p4B = 2'h2;
    dp0_wmi_rdActive = 1'h0;
    dp0_wmi_reqCount = 16'hAAAA;
    dp0_wmi_thisMesg = 32'hAAAAAAAA;
    dp0_wmi_wmi_blockReq = 1'h0;
    dp0_wmi_wmi_dhF_countReg = 2'h2;
    dp0_wmi_wmi_dhF_levelsValid = 1'h0;
    dp0_wmi_wmi_errorSticky = 1'h0;
    dp0_wmi_wmi_mFlagF_countReg = 2'h2;
    dp0_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp0_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_operateD = 1'h0;
    dp0_wmi_wmi_peerIsReady = 1'h0;
    dp0_wmi_wmi_reqF_countReg = 2'h2;
    dp0_wmi_wmi_reqF_levelsValid = 1'h0;
    dp0_wmi_wmi_respF_c_r = 2'h2;
    dp0_wmi_wmi_respF_q_0 =
	258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_wmi_wmi_respF_q_1 =
	258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp0_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp0_wmi_wmi_statusR = 8'hAA;
    dp0_wmi_wmi_trafficSticky = 1'h0;
    dp0_wmi_wrActive = 1'h0;
    dp0_wmi_wrFinalize = 1'h0;
    dp0_wmi_wrtCount = 16'hAAAA;
    dp0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    dp1_bml_crdBuf_modulus = 16'hAAAA;
    dp1_bml_crdBuf_value = 16'hAAAA;
    dp1_bml_fabAvail = 1'h0;
    dp1_bml_fabBuf_modulus = 16'hAAAA;
    dp1_bml_fabBuf_value = 16'hAAAA;
    dp1_bml_fabBufsAvail = 16'hAAAA;
    dp1_bml_fabDone = 1'h0;
    dp1_bml_fabFlowAddr = 32'hAAAAAAAA;
    dp1_bml_fabFlowBase = 32'hAAAAAAAA;
    dp1_bml_fabFlowSize = 32'hAAAAAAAA;
    dp1_bml_fabMesgAddr = 32'hAAAAAAAA;
    dp1_bml_fabMesgBase = 32'hAAAAAAAA;
    dp1_bml_fabMesgSize = 32'hAAAAAAAA;
    dp1_bml_fabMetaAddr = 32'hAAAAAAAA;
    dp1_bml_fabMetaBase = 32'hAAAAAAAA;
    dp1_bml_fabMetaSize = 32'hAAAAAAAA;
    dp1_bml_fabNumBufs = 16'hAAAA;
    dp1_bml_lclBufDone = 1'h0;
    dp1_bml_lclBufStart = 1'h0;
    dp1_bml_lclBuf_modulus = 16'hAAAA;
    dp1_bml_lclBuf_value = 16'hAAAA;
    dp1_bml_lclBufsAR = 16'hAAAA;
    dp1_bml_lclBufsCF = 16'hAAAA;
    dp1_bml_lclCredit = 16'hAAAA;
    dp1_bml_lclDones = 16'hAAAA;
    dp1_bml_lclMesgAddr = 16'hAAAA;
    dp1_bml_lclMetaAddr = 16'hAAAA;
    dp1_bml_lclNumBufs = 16'hAAAA;
    dp1_bml_lclStarts = 16'hAAAA;
    dp1_bml_mesgBase = 16'hAAAA;
    dp1_bml_mesgSize = 16'hAAAA;
    dp1_bml_metaBase = 16'hAAAA;
    dp1_bml_metaSize = 16'hAAAA;
    dp1_bml_remBuf_modulus = 16'hAAAA;
    dp1_bml_remBuf_value = 16'hAAAA;
    dp1_bml_remDone = 1'h0;
    dp1_bml_remDones = 16'hAAAA;
    dp1_bml_remMesgAddr = 16'hAAAA;
    dp1_bml_remMetaAddr = 16'hAAAA;
    dp1_bml_remStart = 1'h0;
    dp1_bml_remStarts = 16'hAAAA;
    dp1_bram_serverAdapterA_1_cnt = 3'h2;
    dp1_bram_serverAdapterA_1_s1 = 2'h2;
    dp1_bram_serverAdapterA_2_cnt = 3'h2;
    dp1_bram_serverAdapterA_2_s1 = 2'h2;
    dp1_bram_serverAdapterA_3_cnt = 3'h2;
    dp1_bram_serverAdapterA_3_s1 = 2'h2;
    dp1_bram_serverAdapterA_cnt = 3'h2;
    dp1_bram_serverAdapterA_s1 = 2'h2;
    dp1_bram_serverAdapterB_1_cnt = 3'h2;
    dp1_bram_serverAdapterB_1_s1 = 2'h2;
    dp1_bram_serverAdapterB_2_cnt = 3'h2;
    dp1_bram_serverAdapterB_2_s1 = 2'h2;
    dp1_bram_serverAdapterB_3_cnt = 3'h2;
    dp1_bram_serverAdapterB_3_s1 = 2'h2;
    dp1_bram_serverAdapterB_cnt = 3'h2;
    dp1_bram_serverAdapterB_s1 = 2'h2;
    dp1_dpControl = 4'hA;
    dp1_tlp_creditReady = 1'h0;
    dp1_tlp_debugBdata = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_dmaDoTailEvent = 1'h0;
    dp1_tlp_dmaPullRemainDWLen = 10'h2AA;
    dp1_tlp_dmaPullRemainDWSub = 10'h2AA;
    dp1_tlp_dmaReqTag = 5'h0A;
    dp1_tlp_dmaTag = 5'h0A;
    dp1_tlp_doXmtMetaBody = 1'h0;
    dp1_tlp_fabFlowAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_fabMesgAddr = 32'hAAAAAAAA;
    dp1_tlp_fabMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_tlp_fabMetaAddr = 32'hAAAAAAAA;
    dp1_tlp_farBufReady = 1'h0;
    dp1_tlp_flowDiagCount = 32'hAAAAAAAA;
    dp1_tlp_gotResponseHeader = 1'h0;
    dp1_tlp_inIgnorePkt = 1'h0;
    dp1_tlp_maxPayloadSize = 13'h0AAA;
    dp1_tlp_maxReadReqSize = 13'h0AAA;
    dp1_tlp_mesgComplReceived = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPull = 17'h0AAAA;
    dp1_tlp_mesgLengthRemainPush = 17'h0AAAA;
    dp1_tlp_nearBufReady = 1'h0;
    dp1_tlp_outDwRemain = 10'h2AA;
    dp1_tlp_postSeqDwell = 4'hA;
    dp1_tlp_pullTagMatch = 1'h0;
    dp1_tlp_rdRespDwRemain = 10'h2AA;
    dp1_tlp_readHeaderSent = 1'h0;
    dp1_tlp_readNxtDWAddr = 13'h0AAA;
    dp1_tlp_readRemainDWLen = 10'h2AA;
    dp1_tlp_readStarted = 1'h0;
    dp1_tlp_remDone = 1'h0;
    dp1_tlp_remMesgAccu = 16'hAAAA;
    dp1_tlp_remMesgAddr = 16'hAAAA;
    dp1_tlp_remMetaAddr = 16'hAAAA;
    dp1_tlp_remStart = 1'h0;
    dp1_tlp_reqMesgInFlight = 1'h0;
    dp1_tlp_reqMetaBodyInFlight = 1'h0;
    dp1_tlp_reqMetaInFlight = 1'h0;
    dp1_tlp_srcMesgAccu = 32'hAAAAAAAA;
    dp1_tlp_tlpMetaSent = 1'h0;
    dp1_tlp_tlpRcvBusy = 1'h0;
    dp1_tlp_tlpXmtBusy = 1'h0;
    dp1_tlp_writeDWAddr = 13'h0AAA;
    dp1_tlp_writeLastBE = 4'hA;
    dp1_tlp_writeRemainDWLen = 10'h2AA;
    dp1_tlp_xmtMetaInFlight = 1'h0;
    dp1_tlp_xmtMetaOK = 1'h0;
    dp1_wci_cEdge = 3'h2;
    dp1_wci_cState = 3'h2;
    dp1_wci_ctlAckReg = 1'h0;
    dp1_wci_ctlOpActive = 1'h0;
    dp1_wci_illegalEdge = 1'h0;
    dp1_wci_nState = 3'h2;
    dp1_wci_reqF_countReg = 2'h2;
    dp1_wci_respF_c_r = 2'h2;
    dp1_wci_respF_q_0 = 34'h2AAAAAAAA;
    dp1_wci_respF_q_1 = 34'h2AAAAAAAA;
    dp1_wci_sFlagReg = 1'h0;
    dp1_wci_sThreadBusy_d = 1'h0;
    dp1_wmi_addr = 14'h2AAA;
    dp1_wmi_bufDwell = 2'h2;
    dp1_wmi_bytesRemainReq = 14'h2AAA;
    dp1_wmi_bytesRemainResp = 14'h2AAA;
    dp1_wmi_doneWithMesg = 1'h0;
    dp1_wmi_lastMesg = 32'hAAAAAAAA;
    dp1_wmi_lclMesgAddr = 15'h2AAA;
    dp1_wmi_lclMetaAddr = 15'h2AAA;
    dp1_wmi_mesgBufReady = 1'h0;
    dp1_wmi_mesgBusy = 1'h0;
    dp1_wmi_mesgCount = 32'hAAAAAAAA;
    dp1_wmi_mesgDone = 1'h0;
    dp1_wmi_mesgMeta = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_wmi_mesgStart = 1'h0;
    dp1_wmi_metaBusy = 1'h0;
    dp1_wmi_p4B = 2'h2;
    dp1_wmi_rdActive = 1'h0;
    dp1_wmi_reqCount = 16'hAAAA;
    dp1_wmi_thisMesg = 32'hAAAAAAAA;
    dp1_wmi_wmi_blockReq = 1'h0;
    dp1_wmi_wmi_dhF_countReg = 2'h2;
    dp1_wmi_wmi_dhF_levelsValid = 1'h0;
    dp1_wmi_wmi_errorSticky = 1'h0;
    dp1_wmi_wmi_mFlagF_countReg = 2'h2;
    dp1_wmi_wmi_mFlagF_levelsValid = 1'h0;
    dp1_wmi_wmi_mFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_operateD = 1'h0;
    dp1_wmi_wmi_peerIsReady = 1'h0;
    dp1_wmi_wmi_reqF_countReg = 2'h2;
    dp1_wmi_wmi_reqF_levelsValid = 1'h0;
    dp1_wmi_wmi_respF_c_r = 2'h2;
    dp1_wmi_wmi_respF_q_0 =
	258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_wmi_wmi_respF_q_1 =
	258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dp1_wmi_wmi_sFlagReg = 32'hAAAAAAAA;
    dp1_wmi_wmi_statusR = 8'hAA;
    dp1_wmi_wmi_trafficSticky = 1'h0;
    dp1_wmi_wrActive = 1'h0;
    dp1_wmi_wrFinalize = 1'h0;
    dp1_wmi_wrtCount = 16'hAAAA;
    dp1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc0_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc0_wti_sThreadBusy_d = 1'h0;
    itc1_wti_nowReq = 67'h2AAAAAAAAAAAAAAAA;
    itc1_wti_sThreadBusy_d = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	begin
	  v__h17742 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h17742,
		 dp0_wci_reqF$D_OUT[36:34],
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	begin
	  v__h76184 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h76184,
		 dp0_wci_reqF$D_OUT[51:32],
		 dp0_wci_reqF$D_OUT[55:52],
		 _theResult____h76168);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	begin
	  v__h94333 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h94333,
		 dp1_wci_reqF$D_OUT[36:34],
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	begin
	  v__h152743 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h152743,
		 dp1_wci_reqF$D_OUT[51:32],
		 dp1_wci_reqF$D_OUT[55:52],
		 _theResult____h152727);
    if (RST_N)
      if (sm2$RDY_c1_request_get)
	begin
	  v__h157733 = $time;
	  #0;
	end
    if (RST_N)
      if (sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h157733,
		 $unsigned(chompCnt));
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	begin
	  v__h144461 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h144461,
		 dp1_wmi_lclMetaAddr,
		 x3__h143770,
		 mesgMeta_opcode__h143813,
		 dp1_wmi_nowW$wget[63:32],
		 dp1_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent)
	  begin
	    v__h136166 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullTailEvent)
	  $display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5",
		   v__h136166);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody)
	begin
	  v__h136499 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h136499);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader)
	begin
	  v__h136945 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h136945);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h110888 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h110888);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta)
	  begin
	    v__h115109 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRespHeadFarMeta)
	  $display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		   v__h115109,
		   { dp1_tlp_inF$D_OUT[7:0],
		     dp1_tlp_inF$D_OUT[15:8],
		     dp1_tlp_inF$D_OUT[23:16],
		     dp1_tlp_inF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta)
	begin
	  v__h113972 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h113972,
		 opcode__h110976,
		 nowMS__h110977,
		 nowLS__h110978);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta)
	  begin
	    v__h116203 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h116203);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	  begin
	    v__h99301 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtDoorbell)
	  $display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		   v__h99301);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  begin
	    v__h103973 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h103973);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	begin
	  v__h102958 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h102958);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	begin
	  v__h104380 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h104380);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  begin
	    v__h104919 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h104919);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	begin
	  v__h105262 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h105262);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	  begin
	    v__h100351 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp1_tlp_dmaXmtTailEvent)
	  $display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7",
		   v__h100351);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	begin
	  v__h109245 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h109245,
		 { dp1_tlp_mRespF$D_OUT[7:0],
		   dp1_tlp_mRespF$D_OUT[15:8],
		   dp1_tlp_mRespF$D_OUT[23:16],
		   dp1_tlp_mRespF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	begin
	  v__h110266 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h110266);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	begin
	  v__h108323 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h108323,
		 opcode__h105327,
		 nowMS__h105328,
		 nowLS__h105329);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	begin
	  v__h93437 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h93437,
		 dp1_wci_cEdge,
		 dp1_wci_cState);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	begin
	  v__h93279 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_ctl_op_complete && !dp1_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h93279,
		 dp1_wci_cEdge,
		 dp1_wci_cState,
		 dp1_wci_nState);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h153471 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_cfwr && dp1_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h153471);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	begin
	  v__h153845 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h153845,
		 dp1_wci_reqF$D_OUT[51:32],
		 dp1_wci_reqF$D_OUT[55:52],
		 dp1_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_wci_cfwr && WILL_FIRE_RL_dp1_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp1_wci_cfwr and RL_dp1_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_14_mReset_n)
      if (WILL_FIRE_RL_dp1_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	begin
	  v__h67897 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wmi_doWriteFinalize)
	$display("[%0d]: %m: doWriteFinalize lclMetaAddr :%0x length:%0x opcode:%0x nowMS:%0x nowLS:%0x ",
		 v__h67897,
		 dp0_wmi_lclMetaAddr,
		 x3__h67206,
		 mesgMeta_opcode__h67249,
		 dp0_wmi_nowW$wget[63:32],
		 dp0_wmi_nowW$wget[31:0]);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	  begin
	    v__h59602 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullTailEvent)
	  $display("[%0d]: %m: dmaPullTailEvent FPactMesg-Step5/5",
		   v__h59602);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	begin
	  v__h59935 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseBody)
	$display("[%0d]: %m: dmaPullResponseBody FPactMesg-Step4b/5",
		 v__h59935);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	begin
	  v__h60381 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPullResponseHeader)
	$display("[%0d]: %m: dmaPullResponseHeader FPactMesg-Step4a/5",
		 v__h60381);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  begin
	    v__h34324 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPullRequestFarMesg)
	  $display("[%0d]: %m: dmaPullRequestFarMesg FCactMesg-Step3/5",
		   v__h34324);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	begin
	  v__h37408 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaRespBodyFarMeta)
	$display("[%0d]: %m: dmaRespBodyFarMeta FPactMesg-Step2b/N opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h37408,
		 opcode__h34412,
		 nowMS__h34413,
		 nowLS__h34414);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	  begin
	    v__h38545 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRespHeadFarMeta)
	  $display("[%0d]: %m: dmaRespHeadFarMeta FPactMesg-Step2a/N fabMeta:%0x",
		   v__h38545,
		   { dp0_tlp_inF$D_OUT[7:0],
		     dp0_tlp_inF$D_OUT[15:8],
		     dp0_tlp_inF$D_OUT[23:16],
		     dp0_tlp_inF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  begin
	    v__h39639 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaRequestFarMeta)
	  $display("[%0d]: %m: dmaRequestFarMeta FCactMesg-Step1/5",
		   v__h39639);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	  begin
	    v__h22716 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtDoorbell)
	  $display("[%0d]: %m: dmaXmtDoorbell FC/FPactFlow-Step1/1",
		   v__h22716);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody)
	begin
	  v__h26379 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaBody)
	$display("[%0d]: %m: dmaXmtMetaBody FPactMesg-Step6/7", v__h26379);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead)
	  begin
	    v__h27394 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtMetaHead)
	  $display("[%0d]: %m: dmaXmtMetaHead FPactMesg-Step5/7", v__h27394);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody)
	begin
	  v__h27807 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseBody)
	$display("[%0d]: %m: dmaPushResponseBody FPactMesg-Step4b/7",
		 v__h27807);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader)
	  begin
	    v__h28346 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaPushResponseHeader)
	  $display("[%0d]: %m: dmaPushResponseHeader FPactMesg-Step4a/7",
		   v__h28346);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg)
	begin
	  v__h28689 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaPushRequestMesg)
	$display("[%0d]: %m: dmaPushRequestMesg FPactMesg-Step3/7",
		 v__h28689);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent)
	  begin
	    v__h23772 = $time;
	    #0;
	  end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (RST_N)
	if (WILL_FIRE_RL_dp0_tlp_dmaXmtTailEvent)
	  $display("[%0d]: %m: dmaXmtTailEvent FPactMesg-Step7/7", v__h23772);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead)
	begin
	  v__h32672 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaHead)
	$display("[%0d]: %m: dmaResponseNearMetaHead FPactMesg-Step2a/7 mesgLength:%0x",
		 v__h32672,
		 { dp0_tlp_mRespF$D_OUT[7:0],
		   dp0_tlp_mRespF$D_OUT[15:8],
		   dp0_tlp_mRespF$D_OUT[23:16],
		   dp0_tlp_mRespF$D_OUT[31:24] });
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta)
	begin
	  v__h33693 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaRequestNearMeta)
	$display("[%0d]: %m: dmaRequestNearMeta FPactMesg-Step1/7",
		 v__h33693);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody)
	begin
	  v__h31750 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_tlp_dmaResponseNearMetaBody)
	$display("[%0d]: %m: dmaResponseNearMetaBody FPactMesg-Step2b/7 opcode:%0x nowMS:%0x nowLS:%0x",
		 v__h31750,
		 opcode__h28754,
		 nowMS__h28755,
		 nowLS__h28756);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	begin
	  v__h16843 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h16843,
		 dp0_wci_cEdge,
		 dp0_wci_cState);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	begin
	  v__h16685 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_ctl_op_complete && !dp0_wci_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h16685,
		 dp0_wci_cEdge,
		 dp0_wci_cState,
		 dp0_wci_nState);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	begin
	  v__h76912 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_cfwr && dp0_wci_reqF$D_OUT[39:32] == 8'h18)
	$display("[%0d] %m: fabDoneAvail Event", v__h76912);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	begin
	  v__h77286 = $time;
	  #0;
	end
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h77286,
		 dp0_wci_reqF$D_OUT[51:32],
		 dp0_wci_reqF$D_OUT[55:52],
		 dp0_wci_reqF$D_OUT[31:0]);
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_wci_cfwr && WILL_FIRE_RL_dp0_wci_cfrd)
	$display("Error: \"bsv/OCDP.bsv\", line 65, column 8: (R0001)\n  Mutually exclusive rules RL_dp0_wci_cfwr and RL_dp0_wci_cfrd fired in the\n  same clock cycle.\n");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_3_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_2_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_1_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (cp$RST_N_wci_Vm_13_mReset_n)
      if (WILL_FIRE_RL_dp0_bram_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkOCInf32B

