//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sun Sep 16 10:46:01 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1 reg
// server_response_get            O    40
// RDY_server_response_get        O     1 reg
// client0_request_get            O    40
// RDY_client0_request_get        O     1 reg
// RDY_client0_response_put       O     1 reg
// client1_request_get            O    40
// RDY_client1_request_get        O     1 reg
// RDY_client1_response_put       O     1 reg
// et0                            I    16
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I    40
// client0_response_put           I    40
// client1_response_put           I    40
// EN_server_request_put          I     1
// EN_client0_response_put        I     1
// EN_client1_response_put        I     1
// EN_server_response_get         I     1
// EN_client0_request_get         I     1
// EN_client1_request_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkQABSMF(et0,
		CLK,
		RST_N,

		server_request_put,
		EN_server_request_put,
		RDY_server_request_put,

		EN_server_response_get,
		server_response_get,
		RDY_server_response_get,

		EN_client0_request_get,
		client0_request_get,
		RDY_client0_request_get,

		client0_response_put,
		EN_client0_response_put,
		RDY_client0_response_put,

		EN_client1_request_get,
		client1_request_get,
		RDY_client1_request_get,

		client1_response_put,
		EN_client1_response_put,
		RDY_client1_response_put);
  input  [15 : 0] et0;
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [39 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [39 : 0] server_response_get;
  output RDY_server_response_get;

  // actionvalue method client0_request_get
  input  EN_client0_request_get;
  output [39 : 0] client0_request_get;
  output RDY_client0_request_get;

  // action method client0_response_put
  input  [39 : 0] client0_response_put;
  input  EN_client0_response_put;
  output RDY_client0_response_put;

  // actionvalue method client1_request_get
  input  EN_client1_request_get;
  output [39 : 0] client1_request_get;
  output RDY_client1_request_get;

  // action method client1_response_put
  input  [39 : 0] client1_response_put;
  input  EN_client1_response_put;
  output RDY_client1_response_put;

  // signals for module outputs
  wire [39 : 0] client0_request_get, client1_request_get, server_response_get;
  wire RDY_client0_request_get,
       RDY_client0_response_put,
       RDY_client1_request_get,
       RDY_client1_response_put,
       RDY_server_request_put,
       RDY_server_response_get;

  // register frk_decided
  reg frk_decided;
  wire frk_decided$D_IN, frk_decided$EN;

  // register frk_match0
  reg frk_match0;
  wire frk_match0$D_IN, frk_match0$EN;

  // register frk_ptr
  reg [2 : 0] frk_ptr;
  reg [2 : 0] frk_ptr$D_IN;
  wire frk_ptr$EN;

  // register frk_sr
  reg [119 : 0] frk_sr;
  wire [119 : 0] frk_sr$D_IN;
  wire frk_sr$EN;

  // register frk_stageSent
  reg frk_stageSent;
  wire frk_stageSent$D_IN, frk_stageSent$EN;

  // register frk_staged
  reg frk_staged;
  wire frk_staged$D_IN, frk_staged$EN;

  // register merge_fi0Active
  reg merge_fi0Active;
  wire merge_fi0Active$D_IN, merge_fi0Active$EN;

  // register merge_fi0HasPrio
  reg merge_fi0HasPrio;
  reg merge_fi0HasPrio$D_IN;
  wire merge_fi0HasPrio$EN;

  // register merge_fi1Active
  reg merge_fi1Active;
  wire merge_fi1Active$D_IN, merge_fi1Active$EN;

  // ports of submodule frk_d0F
  wire [39 : 0] frk_d0F$D_IN, frk_d0F$D_OUT;
  wire frk_d0F$CLR, frk_d0F$DEQ, frk_d0F$EMPTY_N, frk_d0F$ENQ, frk_d0F$FULL_N;

  // ports of submodule frk_d1F
  wire [39 : 0] frk_d1F$D_IN, frk_d1F$D_OUT;
  wire frk_d1F$CLR, frk_d1F$DEQ, frk_d1F$EMPTY_N, frk_d1F$ENQ, frk_d1F$FULL_N;

  // ports of submodule frk_srcF
  wire [39 : 0] frk_srcF$D_IN, frk_srcF$D_OUT;
  wire frk_srcF$CLR,
       frk_srcF$DEQ,
       frk_srcF$EMPTY_N,
       frk_srcF$ENQ,
       frk_srcF$FULL_N;

  // ports of submodule merge_fi0
  wire [39 : 0] merge_fi0$D_IN, merge_fi0$D_OUT;
  wire merge_fi0$CLR,
       merge_fi0$DEQ,
       merge_fi0$EMPTY_N,
       merge_fi0$ENQ,
       merge_fi0$FULL_N;

  // ports of submodule merge_fi1
  wire [39 : 0] merge_fi1$D_IN, merge_fi1$D_OUT;
  wire merge_fi1$CLR,
       merge_fi1$DEQ,
       merge_fi1$EMPTY_N,
       merge_fi1$ENQ,
       merge_fi1$FULL_N;

  // ports of submodule merge_fo
  reg [39 : 0] merge_fo$D_IN;
  wire [39 : 0] merge_fo$D_OUT;
  wire merge_fo$CLR,
       merge_fo$DEQ,
       merge_fo$EMPTY_N,
       merge_fo$ENQ,
       merge_fo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_frk_decide,
       WILL_FIRE_RL_frk_egress,
       WILL_FIRE_RL_frk_stage,
       WILL_FIRE_RL_merge_arbitrate,
       WILL_FIRE_RL_merge_fi0_advance,
       WILL_FIRE_RL_merge_fi1_advance;

  // inputs to muxes for submodule ports
  wire [39 : 0] MUX_merge_fo$enq_1__VAL_1,
		MUX_merge_fo$enq_1__VAL_2,
		MUX_merge_fo$enq_1__VAL_3;
  wire [2 : 0] MUX_frk_ptr$write_1__VAL_1, MUX_frk_ptr$write_1__VAL_2;
  wire MUX_frk_decided$write_1__SEL_1,
       MUX_frk_ptr$write_1__SEL_1,
       MUX_merge_fi0Active$write_1__SEL_1,
       MUX_merge_fi0Active$write_1__VAL_1,
       MUX_merge_fi0Active$write_1__VAL_2,
       MUX_merge_fi1Active$write_1__SEL_1,
       MUX_merge_fi1Active$write_1__VAL_2;

  // remaining internal signals
  reg [7 : 0] IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_17_T_ETC___d692,
	      IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_27_T_ETC___d691,
	      IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_37_T_ETC___d690,
	      IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_7_TO_ETC___d693;
  reg [1 : 0] CASE_client0_response_put_BITS_19_TO_18_3_0_cl_ETC__q51,
	      CASE_client0_response_put_BITS_29_TO_28_3_0_cl_ETC__q50,
	      CASE_client0_response_put_BITS_39_TO_38_3_0_cl_ETC__q49,
	      CASE_client0_response_put_BITS_9_TO_8_3_0_clie_ETC__q52,
	      CASE_client1_response_put_BITS_19_TO_18_3_0_cl_ETC__q55,
	      CASE_client1_response_put_BITS_29_TO_28_3_0_cl_ETC__q54,
	      CASE_client1_response_put_BITS_39_TO_38_3_0_cl_ETC__q53,
	      CASE_client1_response_put_BITS_9_TO_8_3_0_clie_ETC__q56,
	      CASE_frk_d0FD_OUT_BITS_19_TO_18_3_0_frk_d0FD_ETC__q7,
	      CASE_frk_d0FD_OUT_BITS_29_TO_28_3_0_frk_d0FD_ETC__q6,
	      CASE_frk_d0FD_OUT_BITS_39_TO_38_3_0_frk_d0FD_ETC__q5,
	      CASE_frk_d0FD_OUT_BITS_9_TO_8_3_0_frk_d0FD_O_ETC__q8,
	      CASE_frk_d1FD_OUT_BITS_19_TO_18_3_0_frk_d1FD_ETC__q3,
	      CASE_frk_d1FD_OUT_BITS_29_TO_28_3_0_frk_d1FD_ETC__q2,
	      CASE_frk_d1FD_OUT_BITS_39_TO_38_3_0_frk_d1FD_ETC__q1,
	      CASE_frk_d1FD_OUT_BITS_9_TO_8_3_0_frk_d1FD_O_ETC__q4,
	      CASE_frk_sr_BITS_109_TO_108_3_0_frk_sr_BITS_10_ETC__q38,
	      CASE_frk_sr_BITS_119_TO_118_3_0_frk_sr_BITS_11_ETC__q37,
	      CASE_frk_sr_BITS_49_TO_48_3_0_frk_sr_BITS_49_T_ETC__q44,
	      CASE_frk_sr_BITS_59_TO_58_3_0_frk_sr_BITS_59_T_ETC__q43,
	      CASE_frk_sr_BITS_69_TO_68_3_0_frk_sr_BITS_69_T_ETC__q42,
	      CASE_frk_sr_BITS_79_TO_78_3_0_frk_sr_BITS_79_T_ETC__q41,
	      CASE_frk_sr_BITS_89_TO_88_3_0_frk_sr_BITS_89_T_ETC__q40,
	      CASE_frk_sr_BITS_99_TO_98_3_0_frk_sr_BITS_99_T_ETC__q39,
	      CASE_frk_srcFD_OUT_BITS_19_TO_18_3_0_frk_srcF_ETC__q27,
	      CASE_frk_srcFD_OUT_BITS_29_TO_28_3_0_frk_srcF_ETC__q26,
	      CASE_frk_srcFD_OUT_BITS_39_TO_38_3_0_frk_srcF_ETC__q25,
	      CASE_frk_srcFD_OUT_BITS_9_TO_8_3_0_frk_srcFD_ETC__q28,
	      CASE_merge_fi0D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q31,
	      CASE_merge_fi0D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q30,
	      CASE_merge_fi0D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q29,
	      CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q32,
	      CASE_merge_fi1D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q35,
	      CASE_merge_fi1D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q34,
	      CASE_merge_fi1D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q33,
	      CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q36,
	      CASE_merge_foD_OUT_BITS_19_TO_18_3_0_merge_fo_ETC__q11,
	      CASE_merge_foD_OUT_BITS_29_TO_28_3_0_merge_fo_ETC__q10,
	      CASE_merge_foD_OUT_BITS_39_TO_38_3_0_merge_fo_ETC__q9,
	      CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q12,
	      CASE_server_request_put_BITS_19_TO_18_3_0_serv_ETC__q47,
	      CASE_server_request_put_BITS_29_TO_28_3_0_serv_ETC__q46,
	      CASE_server_request_put_BITS_39_TO_38_3_0_serv_ETC__q45,
	      CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q48;
  reg CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q13,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q14,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q15,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q16,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q17,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q18,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q22,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q23,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q24,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q19,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q20,
      CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q21;
  wire [39 : 0] IF_frk_srcF_first__68_BITS_39_TO_38_69_EQ_0_70_ETC___d694;
  wire [19 : 0] IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d136;
  wire [15 : 0] seenEt__h10679;
  wire [9 : 0] IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d395,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d396,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d397,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d371,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d372,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d373,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d348,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d349,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d350,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d418,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d419,
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d420,
	       IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d124,
	       IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d134,
	       IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d145,
	       IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d155;
  wire [7 : 0] IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d686,
	       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d687,
	       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d688,
	       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d689;
  wire [2 : 0] frk_ptr_08_PLUS_1___d749;
  wire [1 : 0] IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d122,
	       IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d132,
	       IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d143,
	       IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d153;
  wire IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d865,
       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d866,
       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d867,
       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d875,
       NOT_frk_stageSent_16_17_OR_frk_srcF_i_notEmpty_ETC___d323,
       merge_fo_i_notFull_AND_IF_merge_fi0HasPrio_06__ETC___d108;

  // action method server_request_put
  assign RDY_server_request_put = frk_srcF$FULL_N ;

  // actionvalue method server_response_get
  assign server_response_get =
	     { CASE_merge_foD_OUT_BITS_39_TO_38_3_0_merge_fo_ETC__q9,
	       merge_fo$D_OUT[37:30],
	       CASE_merge_foD_OUT_BITS_29_TO_28_3_0_merge_fo_ETC__q10,
	       merge_fo$D_OUT[27:20],
	       CASE_merge_foD_OUT_BITS_19_TO_18_3_0_merge_fo_ETC__q11,
	       merge_fo$D_OUT[17:10],
	       CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q12,
	       merge_fo$D_OUT[7:0] } ;
  assign RDY_server_response_get = merge_fo$EMPTY_N ;

  // actionvalue method client0_request_get
  assign client0_request_get =
	     { CASE_frk_d0FD_OUT_BITS_39_TO_38_3_0_frk_d0FD_ETC__q5,
	       frk_d0F$D_OUT[37:30],
	       CASE_frk_d0FD_OUT_BITS_29_TO_28_3_0_frk_d0FD_ETC__q6,
	       frk_d0F$D_OUT[27:20],
	       CASE_frk_d0FD_OUT_BITS_19_TO_18_3_0_frk_d0FD_ETC__q7,
	       frk_d0F$D_OUT[17:10],
	       CASE_frk_d0FD_OUT_BITS_9_TO_8_3_0_frk_d0FD_O_ETC__q8,
	       frk_d0F$D_OUT[7:0] } ;
  assign RDY_client0_request_get = frk_d0F$EMPTY_N ;

  // action method client0_response_put
  assign RDY_client0_response_put = merge_fi0$FULL_N ;

  // actionvalue method client1_request_get
  assign client1_request_get =
	     { CASE_frk_d1FD_OUT_BITS_39_TO_38_3_0_frk_d1FD_ETC__q1,
	       frk_d1F$D_OUT[37:30],
	       CASE_frk_d1FD_OUT_BITS_29_TO_28_3_0_frk_d1FD_ETC__q2,
	       frk_d1F$D_OUT[27:20],
	       CASE_frk_d1FD_OUT_BITS_19_TO_18_3_0_frk_d1FD_ETC__q3,
	       frk_d1F$D_OUT[17:10],
	       CASE_frk_d1FD_OUT_BITS_9_TO_8_3_0_frk_d1FD_O_ETC__q4,
	       frk_d1F$D_OUT[7:0] } ;
  assign RDY_client1_request_get = frk_d1F$EMPTY_N ;

  // action method client1_response_put
  assign RDY_client1_response_put = merge_fi1$FULL_N ;

  // submodule frk_d0F
  FIFO2 #(.width(32'd40), .guarded(32'd1)) frk_d0F(.RST_N(RST_N),
						   .CLK(CLK),
						   .D_IN(frk_d0F$D_IN),
						   .ENQ(frk_d0F$ENQ),
						   .DEQ(frk_d0F$DEQ),
						   .CLR(frk_d0F$CLR),
						   .D_OUT(frk_d0F$D_OUT),
						   .FULL_N(frk_d0F$FULL_N),
						   .EMPTY_N(frk_d0F$EMPTY_N));

  // submodule frk_d1F
  FIFO2 #(.width(32'd40), .guarded(32'd1)) frk_d1F(.RST_N(RST_N),
						   .CLK(CLK),
						   .D_IN(frk_d1F$D_IN),
						   .ENQ(frk_d1F$ENQ),
						   .DEQ(frk_d1F$DEQ),
						   .CLR(frk_d1F$CLR),
						   .D_OUT(frk_d1F$D_OUT),
						   .FULL_N(frk_d1F$FULL_N),
						   .EMPTY_N(frk_d1F$EMPTY_N));

  // submodule frk_srcF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) frk_srcF(.RST_N(RST_N),
						    .CLK(CLK),
						    .D_IN(frk_srcF$D_IN),
						    .ENQ(frk_srcF$ENQ),
						    .DEQ(frk_srcF$DEQ),
						    .CLR(frk_srcF$CLR),
						    .D_OUT(frk_srcF$D_OUT),
						    .FULL_N(frk_srcF$FULL_N),
						    .EMPTY_N(frk_srcF$EMPTY_N));

  // submodule merge_fi0
  FIFO2 #(.width(32'd40), .guarded(32'd1)) merge_fi0(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(merge_fi0$D_IN),
						     .ENQ(merge_fi0$ENQ),
						     .DEQ(merge_fi0$DEQ),
						     .CLR(merge_fi0$CLR),
						     .D_OUT(merge_fi0$D_OUT),
						     .FULL_N(merge_fi0$FULL_N),
						     .EMPTY_N(merge_fi0$EMPTY_N));

  // submodule merge_fi1
  FIFO2 #(.width(32'd40), .guarded(32'd1)) merge_fi1(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(merge_fi1$D_IN),
						     .ENQ(merge_fi1$ENQ),
						     .DEQ(merge_fi1$DEQ),
						     .CLR(merge_fi1$CLR),
						     .D_OUT(merge_fi1$D_OUT),
						     .FULL_N(merge_fi1$FULL_N),
						     .EMPTY_N(merge_fi1$EMPTY_N));

  // submodule merge_fo
  FIFO2 #(.width(32'd40), .guarded(32'd1)) merge_fo(.RST_N(RST_N),
						    .CLK(CLK),
						    .D_IN(merge_fo$D_IN),
						    .ENQ(merge_fo$ENQ),
						    .DEQ(merge_fo$DEQ),
						    .CLR(merge_fo$CLR),
						    .D_OUT(merge_fo$D_OUT),
						    .FULL_N(merge_fo$FULL_N),
						    .EMPTY_N(merge_fo$EMPTY_N));

  // rule RL_merge_arbitrate
  assign WILL_FIRE_RL_merge_arbitrate =
	     merge_fo_i_notFull_AND_IF_merge_fi0HasPrio_06__ETC___d108 &&
	     merge_fi0$EMPTY_N &&
	     merge_fi1$EMPTY_N &&
	     !merge_fi0Active &&
	     !merge_fi1Active ;

  // rule RL_merge_fi0_advance
  assign WILL_FIRE_RL_merge_fi0_advance =
	     merge_fi0$EMPTY_N && merge_fo$FULL_N && !merge_fi1Active &&
	     !WILL_FIRE_RL_merge_arbitrate ;

  // rule RL_merge_fi1_advance
  assign WILL_FIRE_RL_merge_fi1_advance =
	     merge_fo$FULL_N && merge_fi1$EMPTY_N && !merge_fi0Active &&
	     !WILL_FIRE_RL_merge_fi0_advance &&
	     !WILL_FIRE_RL_merge_arbitrate ;

  // rule RL_frk_stage
  assign WILL_FIRE_RL_frk_stage =
	     frk_srcF$EMPTY_N && !frk_staged && !frk_decided ;

  // rule RL_frk_decide
  assign WILL_FIRE_RL_frk_decide =
	     frk_srcF$EMPTY_N && frk_staged && !frk_decided ;

  // rule RL_frk_egress
  assign WILL_FIRE_RL_frk_egress =
	     NOT_frk_stageSent_16_17_OR_frk_srcF_i_notEmpty_ETC___d323 &&
	     frk_staged &&
	     frk_decided ;

  // inputs to muxes for submodule ports
  assign MUX_frk_decided$write_1__SEL_1 =
	     WILL_FIRE_RL_frk_egress && frk_stageSent &&
	     (frk_srcF$D_OUT[9:8] != 2'd0 || frk_srcF$D_OUT[19:18] != 2'd0 ||
	      frk_srcF$D_OUT[29:28] != 2'd0 ||
	      frk_srcF$D_OUT[39:38] != 2'd0) ;
  assign MUX_frk_ptr$write_1__SEL_1 =
	     WILL_FIRE_RL_frk_egress &&
	     (frk_srcF$D_OUT[9:8] != 2'd0 || frk_srcF$D_OUT[19:18] != 2'd0 ||
	      frk_srcF$D_OUT[29:28] != 2'd0 ||
	      frk_srcF$D_OUT[39:38] != 2'd0 ||
	      !frk_stageSent) ;
  assign MUX_merge_fi0Active$write_1__SEL_1 =
	     WILL_FIRE_RL_merge_arbitrate && merge_fi0HasPrio ;
  assign MUX_merge_fi1Active$write_1__SEL_1 =
	     WILL_FIRE_RL_merge_arbitrate && !merge_fi0HasPrio ;
  assign MUX_frk_ptr$write_1__VAL_1 =
	     frk_stageSent ? 3'd0 : frk_ptr_08_PLUS_1___d749 ;
  assign MUX_frk_ptr$write_1__VAL_2 =
	     (frk_srcF$D_OUT[9:8] != 2'd0 || frk_srcF$D_OUT[19:18] != 2'd0 ||
	      frk_srcF$D_OUT[29:28] != 2'd0 ||
	      frk_srcF$D_OUT[39:38] != 2'd0) ?
	       3'd0 :
	       frk_ptr_08_PLUS_1___d749 ;
  assign MUX_merge_fi0Active$write_1__VAL_1 =
	     IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d867 &&
	     IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d866 &&
	     IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d865 &&
	     IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d875 ;
  assign MUX_merge_fi0Active$write_1__VAL_2 =
	     merge_fi0$D_OUT[9:8] == 2'd0 && merge_fi0$D_OUT[19:18] == 2'd0 &&
	     merge_fi0$D_OUT[29:28] == 2'd0 &&
	     merge_fi0$D_OUT[39:38] == 2'd0 ;
  assign MUX_merge_fi1Active$write_1__VAL_2 =
	     merge_fi1$D_OUT[9:8] == 2'd0 && merge_fi1$D_OUT[19:18] == 2'd0 &&
	     merge_fi1$D_OUT[29:28] == 2'd0 &&
	     merge_fi1$D_OUT[39:38] == 2'd0 ;
  assign MUX_merge_fo$enq_1__VAL_1 =
	     { CASE_merge_fi0D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q29,
	       merge_fi0$D_OUT[37:30],
	       CASE_merge_fi0D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q30,
	       merge_fi0$D_OUT[27:20],
	       CASE_merge_fi0D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q31,
	       merge_fi0$D_OUT[17:10],
	       CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q32,
	       merge_fi0$D_OUT[7:0] } ;
  assign MUX_merge_fo$enq_1__VAL_2 =
	     { CASE_merge_fi1D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q33,
	       merge_fi1$D_OUT[37:30],
	       CASE_merge_fi1D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q34,
	       merge_fi1$D_OUT[27:20],
	       CASE_merge_fi1D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q35,
	       merge_fi1$D_OUT[17:10],
	       CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q36,
	       merge_fi1$D_OUT[7:0] } ;
  assign MUX_merge_fo$enq_1__VAL_3 =
	     { IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d136,
	       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d866 ?
		 { 2'd0,
		   IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d688 } :
		 IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d145,
	       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d867 ?
		 { 2'd0,
		   IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d689 } :
		 IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d155 } ;

  // register frk_decided
  assign frk_decided$D_IN = !MUX_frk_decided$write_1__SEL_1 ;
  assign frk_decided$EN =
	     WILL_FIRE_RL_frk_egress && frk_stageSent &&
	     (frk_srcF$D_OUT[9:8] != 2'd0 || frk_srcF$D_OUT[19:18] != 2'd0 ||
	      frk_srcF$D_OUT[29:28] != 2'd0 ||
	      frk_srcF$D_OUT[39:38] != 2'd0) ||
	     WILL_FIRE_RL_frk_decide ;

  // register frk_match0
  assign frk_match0$D_IN = seenEt__h10679 == et0 ;
  assign frk_match0$EN = WILL_FIRE_RL_frk_decide ;

  // register frk_ptr
  always@(MUX_frk_ptr$write_1__SEL_1 or
	  MUX_frk_ptr$write_1__VAL_1 or
	  WILL_FIRE_RL_frk_stage or
	  MUX_frk_ptr$write_1__VAL_2 or WILL_FIRE_RL_frk_decide)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_frk_ptr$write_1__SEL_1: frk_ptr$D_IN = MUX_frk_ptr$write_1__VAL_1;
      WILL_FIRE_RL_frk_stage: frk_ptr$D_IN = MUX_frk_ptr$write_1__VAL_2;
      WILL_FIRE_RL_frk_decide: frk_ptr$D_IN = 3'd0;
      default: frk_ptr$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign frk_ptr$EN =
	     WILL_FIRE_RL_frk_egress &&
	     (frk_srcF$D_OUT[9:8] != 2'd0 || frk_srcF$D_OUT[19:18] != 2'd0 ||
	      frk_srcF$D_OUT[29:28] != 2'd0 ||
	      frk_srcF$D_OUT[39:38] != 2'd0 ||
	      !frk_stageSent) ||
	     WILL_FIRE_RL_frk_stage ||
	     WILL_FIRE_RL_frk_decide ;

  // register frk_sr
  assign frk_sr$D_IN =
	     { IF_frk_srcF_first__68_BITS_39_TO_38_69_EQ_0_70_ETC___d694,
	       CASE_frk_sr_BITS_119_TO_118_3_0_frk_sr_BITS_11_ETC__q37,
	       frk_sr[117:110],
	       CASE_frk_sr_BITS_109_TO_108_3_0_frk_sr_BITS_10_ETC__q38,
	       frk_sr[107:100],
	       CASE_frk_sr_BITS_99_TO_98_3_0_frk_sr_BITS_99_T_ETC__q39,
	       frk_sr[97:90],
	       CASE_frk_sr_BITS_89_TO_88_3_0_frk_sr_BITS_89_T_ETC__q40,
	       frk_sr[87:80],
	       CASE_frk_sr_BITS_79_TO_78_3_0_frk_sr_BITS_79_T_ETC__q41,
	       frk_sr[77:70],
	       CASE_frk_sr_BITS_69_TO_68_3_0_frk_sr_BITS_69_T_ETC__q42,
	       frk_sr[67:60],
	       CASE_frk_sr_BITS_59_TO_58_3_0_frk_sr_BITS_59_T_ETC__q43,
	       frk_sr[57:50],
	       CASE_frk_sr_BITS_49_TO_48_3_0_frk_sr_BITS_49_T_ETC__q44,
	       frk_sr[47:40] } ;
  assign frk_sr$EN = WILL_FIRE_RL_frk_stage ;

  // register frk_stageSent
  assign frk_stageSent$D_IN = !frk_stageSent && frk_ptr == 3'd2 ;
  assign frk_stageSent$EN = MUX_frk_ptr$write_1__SEL_1 ;

  // register frk_staged
  assign frk_staged$D_IN =
	     !MUX_frk_decided$write_1__SEL_1 && frk_ptr == 3'd2 ;
  assign frk_staged$EN =
	     WILL_FIRE_RL_frk_egress && frk_stageSent &&
	     (frk_srcF$D_OUT[9:8] != 2'd0 || frk_srcF$D_OUT[19:18] != 2'd0 ||
	      frk_srcF$D_OUT[29:28] != 2'd0 ||
	      frk_srcF$D_OUT[39:38] != 2'd0) ||
	     WILL_FIRE_RL_frk_stage ;

  // register merge_fi0Active
  assign merge_fi0Active$D_IN =
	     MUX_merge_fi0Active$write_1__SEL_1 ?
	       MUX_merge_fi0Active$write_1__VAL_1 :
	       MUX_merge_fi0Active$write_1__VAL_2 ;
  assign merge_fi0Active$EN =
	     WILL_FIRE_RL_merge_arbitrate && merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi0_advance ;

  // register merge_fi0HasPrio
  always@(WILL_FIRE_RL_merge_arbitrate or
	  merge_fi0HasPrio or
	  WILL_FIRE_RL_merge_fi0_advance or WILL_FIRE_RL_merge_fi1_advance)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_merge_arbitrate: merge_fi0HasPrio$D_IN = !merge_fi0HasPrio;
      WILL_FIRE_RL_merge_fi0_advance: merge_fi0HasPrio$D_IN = 1'd0;
      WILL_FIRE_RL_merge_fi1_advance: merge_fi0HasPrio$D_IN = 1'd1;
      default: merge_fi0HasPrio$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign merge_fi0HasPrio$EN =
	     WILL_FIRE_RL_merge_arbitrate || WILL_FIRE_RL_merge_fi0_advance ||
	     WILL_FIRE_RL_merge_fi1_advance ;

  // register merge_fi1Active
  assign merge_fi1Active$D_IN =
	     MUX_merge_fi1Active$write_1__SEL_1 ?
	       MUX_merge_fi0Active$write_1__VAL_1 :
	       MUX_merge_fi1Active$write_1__VAL_2 ;
  assign merge_fi1Active$EN =
	     WILL_FIRE_RL_merge_arbitrate && !merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi1_advance ;

  // submodule frk_d0F
  assign frk_d0F$D_IN =
	     frk_stageSent ?
	       IF_frk_srcF_first__68_BITS_39_TO_38_69_EQ_0_70_ETC___d694 :
	       { IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d350,
		 IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d373,
		 IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d397,
		 IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d420 } ;
  assign frk_d0F$ENQ = WILL_FIRE_RL_frk_egress && frk_match0 ;
  assign frk_d0F$DEQ = EN_client0_request_get ;
  assign frk_d0F$CLR = 1'b0 ;

  // submodule frk_d1F
  assign frk_d1F$D_IN = frk_d0F$D_IN ;
  assign frk_d1F$ENQ = WILL_FIRE_RL_frk_egress && !frk_match0 ;
  assign frk_d1F$DEQ = EN_client1_request_get ;
  assign frk_d1F$CLR = 1'b0 ;

  // submodule frk_srcF
  assign frk_srcF$D_IN =
	     { CASE_server_request_put_BITS_39_TO_38_3_0_serv_ETC__q45,
	       server_request_put[37:30],
	       CASE_server_request_put_BITS_29_TO_28_3_0_serv_ETC__q46,
	       server_request_put[27:20],
	       CASE_server_request_put_BITS_19_TO_18_3_0_serv_ETC__q47,
	       server_request_put[17:10],
	       CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q48,
	       server_request_put[7:0] } ;
  assign frk_srcF$ENQ = EN_server_request_put ;
  assign frk_srcF$DEQ =
	     WILL_FIRE_RL_frk_egress && frk_stageSent ||
	     WILL_FIRE_RL_frk_stage ;
  assign frk_srcF$CLR = 1'b0 ;

  // submodule merge_fi0
  assign merge_fi0$D_IN =
	     { CASE_client0_response_put_BITS_39_TO_38_3_0_cl_ETC__q49,
	       client0_response_put[37:30],
	       CASE_client0_response_put_BITS_29_TO_28_3_0_cl_ETC__q50,
	       client0_response_put[27:20],
	       CASE_client0_response_put_BITS_19_TO_18_3_0_cl_ETC__q51,
	       client0_response_put[17:10],
	       CASE_client0_response_put_BITS_9_TO_8_3_0_clie_ETC__q52,
	       client0_response_put[7:0] } ;
  assign merge_fi0$ENQ = EN_client0_response_put ;
  assign merge_fi0$DEQ =
	     WILL_FIRE_RL_merge_arbitrate && merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi0_advance ;
  assign merge_fi0$CLR = 1'b0 ;

  // submodule merge_fi1
  assign merge_fi1$D_IN =
	     { CASE_client1_response_put_BITS_39_TO_38_3_0_cl_ETC__q53,
	       client1_response_put[37:30],
	       CASE_client1_response_put_BITS_29_TO_28_3_0_cl_ETC__q54,
	       client1_response_put[27:20],
	       CASE_client1_response_put_BITS_19_TO_18_3_0_cl_ETC__q55,
	       client1_response_put[17:10],
	       CASE_client1_response_put_BITS_9_TO_8_3_0_clie_ETC__q56,
	       client1_response_put[7:0] } ;
  assign merge_fi1$ENQ = EN_client1_response_put ;
  assign merge_fi1$DEQ =
	     WILL_FIRE_RL_merge_arbitrate && !merge_fi0HasPrio ||
	     WILL_FIRE_RL_merge_fi1_advance ;
  assign merge_fi1$CLR = 1'b0 ;

  // submodule merge_fo
  always@(WILL_FIRE_RL_merge_fi0_advance or
	  MUX_merge_fo$enq_1__VAL_1 or
	  WILL_FIRE_RL_merge_fi1_advance or
	  MUX_merge_fo$enq_1__VAL_2 or
	  WILL_FIRE_RL_merge_arbitrate or MUX_merge_fo$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_merge_fi0_advance:
	  merge_fo$D_IN = MUX_merge_fo$enq_1__VAL_1;
      WILL_FIRE_RL_merge_fi1_advance:
	  merge_fo$D_IN = MUX_merge_fo$enq_1__VAL_2;
      WILL_FIRE_RL_merge_arbitrate: merge_fo$D_IN = MUX_merge_fo$enq_1__VAL_3;
      default: merge_fo$D_IN = 40'hAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign merge_fo$ENQ =
	     WILL_FIRE_RL_merge_fi0_advance ||
	     WILL_FIRE_RL_merge_fi1_advance ||
	     WILL_FIRE_RL_merge_arbitrate ;
  assign merge_fo$DEQ = EN_server_response_get ;
  assign merge_fo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d395 =
	     { CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q19 ?
		 2'd2 :
		 2'd3,
	       IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_17_T_ETC___d692 } ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d396 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q20 ?
	       { 2'd1,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_17_T_ETC___d692 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d395 ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d397 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q21 ?
	       { 2'd0,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_17_T_ETC___d692 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_1_ETC___d396 ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d371 =
	     { CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q13 ?
		 2'd2 :
		 2'd3,
	       IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_27_T_ETC___d691 } ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d372 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q14 ?
	       { 2'd1,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_27_T_ETC___d691 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d371 ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d373 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q15 ?
	       { 2'd0,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_27_T_ETC___d691 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_2_ETC___d372 ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d348 =
	     { CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q16 ?
		 2'd2 :
		 2'd3,
	       IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_37_T_ETC___d690 } ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d349 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q17 ?
	       { 2'd1,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_37_T_ETC___d690 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d348 ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d350 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q18 ?
	       { 2'd0,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_37_T_ETC___d690 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_3_ETC___d349 ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d418 =
	     { CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q22 ?
		 2'd2 :
		 2'd3,
	       IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_7_TO_ETC___d693 } ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d419 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q23 ?
	       { 2'd1,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_7_TO_ETC___d693 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d418 ;
  assign IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d420 =
	     CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q24 ?
	       { 2'd0,
		 IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_7_TO_ETC___d693 } :
	       IF_IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_9_ETC___d419 ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d122 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[39:38] == 2'd2 :
		merge_fi1$D_OUT[39:38] == 2'd2) ?
	       2'd2 :
	       2'd3 ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d124 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[39:38] == 2'd1 :
		merge_fi1$D_OUT[39:38] == 2'd1) ?
	       { 2'd1,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d686 } :
	       { IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d122,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d686 } ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d132 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[29:28] == 2'd2 :
		merge_fi1$D_OUT[29:28] == 2'd2) ?
	       2'd2 :
	       2'd3 ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d134 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[29:28] == 2'd1 :
		merge_fi1$D_OUT[29:28] == 2'd1) ?
	       { 2'd1,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d687 } :
	       { IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d132,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d687 } ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d136 =
	     { IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d875 ?
		 { 2'd0,
		   IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d686 } :
		 IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d124,
	       IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d865 ?
		 { 2'd0,
		   IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d687 } :
		 IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d134 } ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d143 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[19:18] == 2'd2 :
		merge_fi1$D_OUT[19:18] == 2'd2) ?
	       2'd2 :
	       2'd3 ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d145 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[19:18] == 2'd1 :
		merge_fi1$D_OUT[19:18] == 2'd1) ?
	       { 2'd1,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d688 } :
	       { IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d143,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d688 } ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d153 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[9:8] == 2'd2 :
		merge_fi1$D_OUT[9:8] == 2'd2) ?
	       2'd2 :
	       2'd3 ;
  assign IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d155 =
	     (merge_fi0HasPrio ?
		merge_fi0$D_OUT[9:8] == 2'd1 :
		merge_fi1$D_OUT[9:8] == 2'd1) ?
	       { 2'd1,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d689 } :
	       { IF_IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_ETC___d153,
		 IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d689 } ;
  assign IF_frk_srcF_first__68_BITS_39_TO_38_69_EQ_0_70_ETC___d694 =
	     { CASE_frk_srcFD_OUT_BITS_39_TO_38_3_0_frk_srcF_ETC__q25,
	       frk_srcF$D_OUT[37:30],
	       CASE_frk_srcFD_OUT_BITS_29_TO_28_3_0_frk_srcF_ETC__q26,
	       frk_srcF$D_OUT[27:20],
	       CASE_frk_srcFD_OUT_BITS_19_TO_18_3_0_frk_srcF_ETC__q27,
	       frk_srcF$D_OUT[17:10],
	       CASE_frk_srcFD_OUT_BITS_9_TO_8_3_0_frk_srcFD_ETC__q28,
	       frk_srcF$D_OUT[7:0] } ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d686 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[37:30] :
	       merge_fi1$D_OUT[37:30] ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d687 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[27:20] :
	       merge_fi1$D_OUT[27:20] ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d688 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[17:10] :
	       merge_fi1$D_OUT[17:10] ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d689 =
	     merge_fi0HasPrio ? merge_fi0$D_OUT[7:0] : merge_fi1$D_OUT[7:0] ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d865 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[29:28] == 2'd0 :
	       merge_fi1$D_OUT[29:28] == 2'd0 ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d866 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[19:18] == 2'd0 :
	       merge_fi1$D_OUT[19:18] == 2'd0 ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d867 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[9:8] == 2'd0 :
	       merge_fi1$D_OUT[9:8] == 2'd0 ;
  assign IF_merge_fi0HasPrio_06_THEN_merge_fi0_first_BI_ETC___d875 =
	     merge_fi0HasPrio ?
	       merge_fi0$D_OUT[39:38] == 2'd0 :
	       merge_fi1$D_OUT[39:38] == 2'd0 ;
  assign NOT_frk_stageSent_16_17_OR_frk_srcF_i_notEmpty_ETC___d323 =
	     (!frk_stageSent || frk_srcF$EMPTY_N) &&
	     (frk_match0 ? frk_d0F$FULL_N : frk_d1F$FULL_N) ;
  assign frk_ptr_08_PLUS_1___d749 = frk_ptr + 3'd1 ;
  assign merge_fo_i_notFull_AND_IF_merge_fi0HasPrio_06__ETC___d108 =
	     merge_fo$FULL_N &&
	     (merge_fi0HasPrio ? merge_fi0$EMPTY_N : merge_fi1$EMPTY_N) ;
  assign seenEt__h10679 = { frk_srcF$D_OUT[7:0], frk_srcF$D_OUT[17:10] } ;
  always@(frk_d1F$D_OUT)
  begin
    case (frk_d1F$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d1FD_OUT_BITS_39_TO_38_3_0_frk_d1FD_ETC__q1 =
	      frk_d1F$D_OUT[39:38];
      2'd3: CASE_frk_d1FD_OUT_BITS_39_TO_38_3_0_frk_d1FD_ETC__q1 = 2'd3;
    endcase
  end
  always@(frk_d1F$D_OUT)
  begin
    case (frk_d1F$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d1FD_OUT_BITS_29_TO_28_3_0_frk_d1FD_ETC__q2 =
	      frk_d1F$D_OUT[29:28];
      2'd3: CASE_frk_d1FD_OUT_BITS_29_TO_28_3_0_frk_d1FD_ETC__q2 = 2'd3;
    endcase
  end
  always@(frk_d1F$D_OUT)
  begin
    case (frk_d1F$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d1FD_OUT_BITS_19_TO_18_3_0_frk_d1FD_ETC__q3 =
	      frk_d1F$D_OUT[19:18];
      2'd3: CASE_frk_d1FD_OUT_BITS_19_TO_18_3_0_frk_d1FD_ETC__q3 = 2'd3;
    endcase
  end
  always@(frk_d1F$D_OUT)
  begin
    case (frk_d1F$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d1FD_OUT_BITS_9_TO_8_3_0_frk_d1FD_O_ETC__q4 =
	      frk_d1F$D_OUT[9:8];
      2'd3: CASE_frk_d1FD_OUT_BITS_9_TO_8_3_0_frk_d1FD_O_ETC__q4 = 2'd3;
    endcase
  end
  always@(frk_d0F$D_OUT)
  begin
    case (frk_d0F$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d0FD_OUT_BITS_39_TO_38_3_0_frk_d0FD_ETC__q5 =
	      frk_d0F$D_OUT[39:38];
      2'd3: CASE_frk_d0FD_OUT_BITS_39_TO_38_3_0_frk_d0FD_ETC__q5 = 2'd3;
    endcase
  end
  always@(frk_d0F$D_OUT)
  begin
    case (frk_d0F$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d0FD_OUT_BITS_29_TO_28_3_0_frk_d0FD_ETC__q6 =
	      frk_d0F$D_OUT[29:28];
      2'd3: CASE_frk_d0FD_OUT_BITS_29_TO_28_3_0_frk_d0FD_ETC__q6 = 2'd3;
    endcase
  end
  always@(frk_d0F$D_OUT)
  begin
    case (frk_d0F$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d0FD_OUT_BITS_19_TO_18_3_0_frk_d0FD_ETC__q7 =
	      frk_d0F$D_OUT[19:18];
      2'd3: CASE_frk_d0FD_OUT_BITS_19_TO_18_3_0_frk_d0FD_ETC__q7 = 2'd3;
    endcase
  end
  always@(frk_d0F$D_OUT)
  begin
    case (frk_d0F$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_d0FD_OUT_BITS_9_TO_8_3_0_frk_d0FD_O_ETC__q8 =
	      frk_d0F$D_OUT[9:8];
      2'd3: CASE_frk_d0FD_OUT_BITS_9_TO_8_3_0_frk_d0FD_O_ETC__q8 = 2'd3;
    endcase
  end
  always@(merge_fo$D_OUT)
  begin
    case (merge_fo$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_foD_OUT_BITS_39_TO_38_3_0_merge_fo_ETC__q9 =
	      merge_fo$D_OUT[39:38];
      2'd3: CASE_merge_foD_OUT_BITS_39_TO_38_3_0_merge_fo_ETC__q9 = 2'd3;
    endcase
  end
  always@(merge_fo$D_OUT)
  begin
    case (merge_fo$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_foD_OUT_BITS_29_TO_28_3_0_merge_fo_ETC__q10 =
	      merge_fo$D_OUT[29:28];
      2'd3: CASE_merge_foD_OUT_BITS_29_TO_28_3_0_merge_fo_ETC__q10 = 2'd3;
    endcase
  end
  always@(merge_fo$D_OUT)
  begin
    case (merge_fo$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_foD_OUT_BITS_19_TO_18_3_0_merge_fo_ETC__q11 =
	      merge_fo$D_OUT[19:18];
      2'd3: CASE_merge_foD_OUT_BITS_19_TO_18_3_0_merge_fo_ETC__q11 = 2'd3;
    endcase
  end
  always@(merge_fo$D_OUT)
  begin
    case (merge_fo$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q12 =
	      merge_fo$D_OUT[9:8];
      2'd3: CASE_merge_foD_OUT_BITS_9_TO_8_3_0_merge_foD_ETC__q12 = 2'd3;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_27_T_ETC___d691 =
	      frk_sr[27:20];
      3'd1:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_27_T_ETC___d691 =
	      frk_sr[67:60];
      default: IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_27_T_ETC___d691 =
		   frk_sr[107:100];
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q13 =
	      frk_sr[29:28] == 2'd2;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q13 =
	      frk_sr[69:68] == 2'd2;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q13 =
		   frk_ptr == 3'd2 && frk_sr[109:108] == 2'd2;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q14 =
	      frk_sr[29:28] == 2'd1;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q14 =
	      frk_sr[69:68] == 2'd1;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q14 =
		   frk_ptr == 3'd2 && frk_sr[109:108] == 2'd1;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q15 =
	      frk_sr[29:28] == 2'd0;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q15 =
	      frk_sr[69:68] == 2'd0;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_109__ETC__q15 =
		   frk_ptr == 3'd2 && frk_sr[109:108] == 2'd0;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_37_T_ETC___d690 =
	      frk_sr[37:30];
      3'd1:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_37_T_ETC___d690 =
	      frk_sr[77:70];
      default: IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_37_T_ETC___d690 =
		   frk_sr[117:110];
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q16 =
	      frk_sr[39:38] == 2'd2;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q16 =
	      frk_sr[79:78] == 2'd2;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q16 =
		   frk_ptr == 3'd2 && frk_sr[119:118] == 2'd2;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q17 =
	      frk_sr[39:38] == 2'd1;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q17 =
	      frk_sr[79:78] == 2'd1;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q17 =
		   frk_ptr == 3'd2 && frk_sr[119:118] == 2'd1;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q18 =
	      frk_sr[39:38] == 2'd0;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q18 =
	      frk_sr[79:78] == 2'd0;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_119__ETC__q18 =
		   frk_ptr == 3'd2 && frk_sr[119:118] == 2'd0;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_17_T_ETC___d692 =
	      frk_sr[17:10];
      3'd1:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_17_T_ETC___d692 =
	      frk_sr[57:50];
      default: IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_17_T_ETC___d692 =
		   frk_sr[97:90];
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q19 =
	      frk_sr[19:18] == 2'd2;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q19 =
	      frk_sr[59:58] == 2'd2;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q19 =
		   frk_ptr == 3'd2 && frk_sr[99:98] == 2'd2;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q20 =
	      frk_sr[19:18] == 2'd1;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q20 =
	      frk_sr[59:58] == 2'd1;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q20 =
		   frk_ptr == 3'd2 && frk_sr[99:98] == 2'd1;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q21 =
	      frk_sr[19:18] == 2'd0;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q21 =
	      frk_sr[59:58] == 2'd0;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_99_T_ETC__q21 =
		   frk_ptr == 3'd2 && frk_sr[99:98] == 2'd0;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_7_TO_ETC___d693 =
	      frk_sr[7:0];
      3'd1:
	  IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_7_TO_ETC___d693 =
	      frk_sr[47:40];
      default: IF_frk_ptr_08_EQ_0_26_THEN_frk_sr_12_BITS_7_TO_ETC___d693 =
		   frk_sr[87:80];
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q22 =
	      frk_sr[9:8] == 2'd2;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q22 =
	      frk_sr[49:48] == 2'd2;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q22 =
		   frk_ptr == 3'd2 && frk_sr[89:88] == 2'd2;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q23 =
	      frk_sr[9:8] == 2'd1;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q23 =
	      frk_sr[49:48] == 2'd1;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q23 =
		   frk_ptr == 3'd2 && frk_sr[89:88] == 2'd1;
    endcase
  end
  always@(frk_ptr or frk_sr)
  begin
    case (frk_ptr)
      3'd0:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q24 =
	      frk_sr[9:8] == 2'd0;
      3'd1:
	  CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q24 =
	      frk_sr[49:48] == 2'd0;
      default: CASE_frk_ptr_frk_ptr_EQ_2_AND_frk_sr_BITS_89_T_ETC__q24 =
		   frk_ptr == 3'd2 && frk_sr[89:88] == 2'd0;
    endcase
  end
  always@(frk_srcF$D_OUT)
  begin
    case (frk_srcF$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_srcFD_OUT_BITS_39_TO_38_3_0_frk_srcF_ETC__q25 =
	      frk_srcF$D_OUT[39:38];
      2'd3: CASE_frk_srcFD_OUT_BITS_39_TO_38_3_0_frk_srcF_ETC__q25 = 2'd3;
    endcase
  end
  always@(frk_srcF$D_OUT)
  begin
    case (frk_srcF$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_srcFD_OUT_BITS_29_TO_28_3_0_frk_srcF_ETC__q26 =
	      frk_srcF$D_OUT[29:28];
      2'd3: CASE_frk_srcFD_OUT_BITS_29_TO_28_3_0_frk_srcF_ETC__q26 = 2'd3;
    endcase
  end
  always@(frk_srcF$D_OUT)
  begin
    case (frk_srcF$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_srcFD_OUT_BITS_19_TO_18_3_0_frk_srcF_ETC__q27 =
	      frk_srcF$D_OUT[19:18];
      2'd3: CASE_frk_srcFD_OUT_BITS_19_TO_18_3_0_frk_srcF_ETC__q27 = 2'd3;
    endcase
  end
  always@(frk_srcF$D_OUT)
  begin
    case (frk_srcF$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_srcFD_OUT_BITS_9_TO_8_3_0_frk_srcFD_ETC__q28 =
	      frk_srcF$D_OUT[9:8];
      2'd3: CASE_frk_srcFD_OUT_BITS_9_TO_8_3_0_frk_srcFD_ETC__q28 = 2'd3;
    endcase
  end
  always@(merge_fi0$D_OUT)
  begin
    case (merge_fi0$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi0D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q29 =
	      merge_fi0$D_OUT[39:38];
      2'd3: CASE_merge_fi0D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q29 = 2'd3;
    endcase
  end
  always@(merge_fi0$D_OUT)
  begin
    case (merge_fi0$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi0D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q30 =
	      merge_fi0$D_OUT[29:28];
      2'd3: CASE_merge_fi0D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q30 = 2'd3;
    endcase
  end
  always@(merge_fi0$D_OUT)
  begin
    case (merge_fi0$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi0D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q31 =
	      merge_fi0$D_OUT[19:18];
      2'd3: CASE_merge_fi0D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q31 = 2'd3;
    endcase
  end
  always@(merge_fi0$D_OUT)
  begin
    case (merge_fi0$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q32 =
	      merge_fi0$D_OUT[9:8];
      2'd3: CASE_merge_fi0D_OUT_BITS_9_TO_8_3_0_merge_fi0_ETC__q32 = 2'd3;
    endcase
  end
  always@(merge_fi1$D_OUT)
  begin
    case (merge_fi1$D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi1D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q33 =
	      merge_fi1$D_OUT[39:38];
      2'd3: CASE_merge_fi1D_OUT_BITS_39_TO_38_3_0_merge_f_ETC__q33 = 2'd3;
    endcase
  end
  always@(merge_fi1$D_OUT)
  begin
    case (merge_fi1$D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi1D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q34 =
	      merge_fi1$D_OUT[29:28];
      2'd3: CASE_merge_fi1D_OUT_BITS_29_TO_28_3_0_merge_f_ETC__q34 = 2'd3;
    endcase
  end
  always@(merge_fi1$D_OUT)
  begin
    case (merge_fi1$D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi1D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q35 =
	      merge_fi1$D_OUT[19:18];
      2'd3: CASE_merge_fi1D_OUT_BITS_19_TO_18_3_0_merge_f_ETC__q35 = 2'd3;
    endcase
  end
  always@(merge_fi1$D_OUT)
  begin
    case (merge_fi1$D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q36 =
	      merge_fi1$D_OUT[9:8];
      2'd3: CASE_merge_fi1D_OUT_BITS_9_TO_8_3_0_merge_fi1_ETC__q36 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[119:118])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_119_TO_118_3_0_frk_sr_BITS_11_ETC__q37 =
	      frk_sr[119:118];
      2'd3: CASE_frk_sr_BITS_119_TO_118_3_0_frk_sr_BITS_11_ETC__q37 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[109:108])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_109_TO_108_3_0_frk_sr_BITS_10_ETC__q38 =
	      frk_sr[109:108];
      2'd3: CASE_frk_sr_BITS_109_TO_108_3_0_frk_sr_BITS_10_ETC__q38 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[99:98])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_99_TO_98_3_0_frk_sr_BITS_99_T_ETC__q39 =
	      frk_sr[99:98];
      2'd3: CASE_frk_sr_BITS_99_TO_98_3_0_frk_sr_BITS_99_T_ETC__q39 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[89:88])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_89_TO_88_3_0_frk_sr_BITS_89_T_ETC__q40 =
	      frk_sr[89:88];
      2'd3: CASE_frk_sr_BITS_89_TO_88_3_0_frk_sr_BITS_89_T_ETC__q40 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[79:78])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_79_TO_78_3_0_frk_sr_BITS_79_T_ETC__q41 =
	      frk_sr[79:78];
      2'd3: CASE_frk_sr_BITS_79_TO_78_3_0_frk_sr_BITS_79_T_ETC__q41 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[69:68])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_69_TO_68_3_0_frk_sr_BITS_69_T_ETC__q42 =
	      frk_sr[69:68];
      2'd3: CASE_frk_sr_BITS_69_TO_68_3_0_frk_sr_BITS_69_T_ETC__q42 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[59:58])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_59_TO_58_3_0_frk_sr_BITS_59_T_ETC__q43 =
	      frk_sr[59:58];
      2'd3: CASE_frk_sr_BITS_59_TO_58_3_0_frk_sr_BITS_59_T_ETC__q43 = 2'd3;
    endcase
  end
  always@(frk_sr)
  begin
    case (frk_sr[49:48])
      2'd0, 2'd1, 2'd2:
	  CASE_frk_sr_BITS_49_TO_48_3_0_frk_sr_BITS_49_T_ETC__q44 =
	      frk_sr[49:48];
      2'd3: CASE_frk_sr_BITS_49_TO_48_3_0_frk_sr_BITS_49_T_ETC__q44 = 2'd3;
    endcase
  end
  always@(server_request_put)
  begin
    case (server_request_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_server_request_put_BITS_39_TO_38_3_0_serv_ETC__q45 =
	      server_request_put[39:38];
      2'd3: CASE_server_request_put_BITS_39_TO_38_3_0_serv_ETC__q45 = 2'd3;
    endcase
  end
  always@(server_request_put)
  begin
    case (server_request_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_server_request_put_BITS_29_TO_28_3_0_serv_ETC__q46 =
	      server_request_put[29:28];
      2'd3: CASE_server_request_put_BITS_29_TO_28_3_0_serv_ETC__q46 = 2'd3;
    endcase
  end
  always@(server_request_put)
  begin
    case (server_request_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_server_request_put_BITS_19_TO_18_3_0_serv_ETC__q47 =
	      server_request_put[19:18];
      2'd3: CASE_server_request_put_BITS_19_TO_18_3_0_serv_ETC__q47 = 2'd3;
    endcase
  end
  always@(server_request_put)
  begin
    case (server_request_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q48 =
	      server_request_put[9:8];
      2'd3: CASE_server_request_put_BITS_9_TO_8_3_0_server_ETC__q48 = 2'd3;
    endcase
  end
  always@(client0_response_put)
  begin
    case (client0_response_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_client0_response_put_BITS_39_TO_38_3_0_cl_ETC__q49 =
	      client0_response_put[39:38];
      2'd3: CASE_client0_response_put_BITS_39_TO_38_3_0_cl_ETC__q49 = 2'd3;
    endcase
  end
  always@(client0_response_put)
  begin
    case (client0_response_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_client0_response_put_BITS_29_TO_28_3_0_cl_ETC__q50 =
	      client0_response_put[29:28];
      2'd3: CASE_client0_response_put_BITS_29_TO_28_3_0_cl_ETC__q50 = 2'd3;
    endcase
  end
  always@(client0_response_put)
  begin
    case (client0_response_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_client0_response_put_BITS_19_TO_18_3_0_cl_ETC__q51 =
	      client0_response_put[19:18];
      2'd3: CASE_client0_response_put_BITS_19_TO_18_3_0_cl_ETC__q51 = 2'd3;
    endcase
  end
  always@(client0_response_put)
  begin
    case (client0_response_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_client0_response_put_BITS_9_TO_8_3_0_clie_ETC__q52 =
	      client0_response_put[9:8];
      2'd3: CASE_client0_response_put_BITS_9_TO_8_3_0_clie_ETC__q52 = 2'd3;
    endcase
  end
  always@(client1_response_put)
  begin
    case (client1_response_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_client1_response_put_BITS_39_TO_38_3_0_cl_ETC__q53 =
	      client1_response_put[39:38];
      2'd3: CASE_client1_response_put_BITS_39_TO_38_3_0_cl_ETC__q53 = 2'd3;
    endcase
  end
  always@(client1_response_put)
  begin
    case (client1_response_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_client1_response_put_BITS_29_TO_28_3_0_cl_ETC__q54 =
	      client1_response_put[29:28];
      2'd3: CASE_client1_response_put_BITS_29_TO_28_3_0_cl_ETC__q54 = 2'd3;
    endcase
  end
  always@(client1_response_put)
  begin
    case (client1_response_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_client1_response_put_BITS_19_TO_18_3_0_cl_ETC__q55 =
	      client1_response_put[19:18];
      2'd3: CASE_client1_response_put_BITS_19_TO_18_3_0_cl_ETC__q55 = 2'd3;
    endcase
  end
  always@(client1_response_put)
  begin
    case (client1_response_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_client1_response_put_BITS_9_TO_8_3_0_clie_ETC__q56 =
	      client1_response_put[9:8];
      2'd3: CASE_client1_response_put_BITS_9_TO_8_3_0_clie_ETC__q56 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        frk_decided <= `BSV_ASSIGNMENT_DELAY 1'd0;
	frk_match0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	frk_ptr <= `BSV_ASSIGNMENT_DELAY 3'd0;
	frk_stageSent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	frk_staged <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merge_fi0Active <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merge_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	merge_fi1Active <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (frk_decided$EN)
	  frk_decided <= `BSV_ASSIGNMENT_DELAY frk_decided$D_IN;
	if (frk_match0$EN)
	  frk_match0 <= `BSV_ASSIGNMENT_DELAY frk_match0$D_IN;
	if (frk_ptr$EN) frk_ptr <= `BSV_ASSIGNMENT_DELAY frk_ptr$D_IN;
	if (frk_stageSent$EN)
	  frk_stageSent <= `BSV_ASSIGNMENT_DELAY frk_stageSent$D_IN;
	if (frk_staged$EN)
	  frk_staged <= `BSV_ASSIGNMENT_DELAY frk_staged$D_IN;
	if (merge_fi0Active$EN)
	  merge_fi0Active <= `BSV_ASSIGNMENT_DELAY merge_fi0Active$D_IN;
	if (merge_fi0HasPrio$EN)
	  merge_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY merge_fi0HasPrio$D_IN;
	if (merge_fi1Active$EN)
	  merge_fi1Active <= `BSV_ASSIGNMENT_DELAY merge_fi1Active$D_IN;
      end
    if (frk_sr$EN) frk_sr <= `BSV_ASSIGNMENT_DELAY frk_sr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    frk_decided = 1'h0;
    frk_match0 = 1'h0;
    frk_ptr = 3'h2;
    frk_sr = 120'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    frk_stageSent = 1'h0;
    frk_staged = 1'h0;
    merge_fi0Active = 1'h0;
    merge_fi0HasPrio = 1'h0;
    merge_fi1Active = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkQABSMF

