//
// Generated by Bluespec Compiler, version 2012.09.beta1 (build 29570, 2012-09.11)
//
// On Sat Sep 29 14:30:31 EDT 2012
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1 reg
// server_response_get            O   153 reg
// RDY_server_response_get        O     1 reg
// RDY_cpServer_request_put       O     1 reg
// cpServer_response_get          O    40 reg
// RDY_cpServer_response_get      O     1 reg
// led                            O     2 reg
// wci_m_0_MCmd                   O     3
// wci_m_0_MAddrSpace             O     1
// wci_m_0_MByteEn                O     4
// wci_m_0_MAddr                  O    32
// wci_m_0_MData                  O    32 reg
// wci_m_0_MFlag                  O     2 reg
// wci_m_1_MCmd                   O     3
// wci_m_1_MAddrSpace             O     1
// wci_m_1_MByteEn                O     4
// wci_m_1_MAddr                  O    32
// wci_m_1_MData                  O    32 reg
// wci_m_1_MFlag                  O     2 reg
// wci_m_2_MCmd                   O     3
// wci_m_2_MAddrSpace             O     1
// wci_m_2_MByteEn                O     4
// wci_m_2_MAddr                  O    32
// wci_m_2_MData                  O    32 reg
// wci_m_2_MFlag                  O     2 reg
// wci_m_3_MCmd                   O     3
// wci_m_3_MAddrSpace             O     1
// wci_m_3_MByteEn                O     4
// wci_m_3_MAddr                  O    32
// wci_m_3_MData                  O    32 reg
// wci_m_3_MFlag                  O     2 reg
// wci_m_4_MCmd                   O     3
// wci_m_4_MAddrSpace             O     1
// wci_m_4_MByteEn                O     4
// wci_m_4_MAddr                  O    32
// wci_m_4_MData                  O    32 reg
// wci_m_4_MFlag                  O     2 reg
// wci_m_5_MCmd                   O     3
// wci_m_5_MAddrSpace             O     1
// wci_m_5_MByteEn                O     4
// wci_m_5_MAddr                  O    32
// wci_m_5_MData                  O    32 reg
// wci_m_5_MFlag                  O     2 reg
// wci_m_6_MCmd                   O     3
// wci_m_6_MAddrSpace             O     1
// wci_m_6_MByteEn                O     4
// wci_m_6_MAddr                  O    32
// wci_m_6_MData                  O    32 reg
// wci_m_6_MFlag                  O     2 reg
// wci_m_7_MCmd                   O     3
// wci_m_7_MAddrSpace             O     1
// wci_m_7_MByteEn                O     4
// wci_m_7_MAddr                  O    32
// wci_m_7_MData                  O    32 reg
// wci_m_7_MFlag                  O     2 reg
// wci_m_8_MCmd                   O     3
// wci_m_8_MAddrSpace             O     1
// wci_m_8_MByteEn                O     4
// wci_m_8_MAddr                  O    32
// wci_m_8_MData                  O    32 reg
// wci_m_8_MFlag                  O     2 reg
// wci_m_9_MCmd                   O     3
// wci_m_9_MAddrSpace             O     1
// wci_m_9_MByteEn                O     4
// wci_m_9_MAddr                  O    32
// wci_m_9_MData                  O    32 reg
// wci_m_9_MFlag                  O     2 reg
// wci_m_10_MCmd                  O     3
// wci_m_10_MAddrSpace            O     1
// wci_m_10_MByteEn               O     4
// wci_m_10_MAddr                 O    32
// wci_m_10_MData                 O    32 reg
// wci_m_10_MFlag                 O     2 reg
// wci_m_11_MCmd                  O     3
// wci_m_11_MAddrSpace            O     1
// wci_m_11_MByteEn               O     4
// wci_m_11_MAddr                 O    32
// wci_m_11_MData                 O    32 reg
// wci_m_11_MFlag                 O     2 reg
// wci_m_12_MCmd                  O     3
// wci_m_12_MAddrSpace            O     1
// wci_m_12_MByteEn               O     4
// wci_m_12_MAddr                 O    32
// wci_m_12_MData                 O    32 reg
// wci_m_12_MFlag                 O     2 reg
// wmiDP0_SResp                   O     2 reg
// wmiDP0_SData                   O    32 reg
// wmiDP0_SThreadBusy             O     1
// wmiDP0_SDataThreadBusy         O     1
// wmiDP0_SRespLast               O     1 const
// wmiDP0_SFlag                   O    32 reg
// wmiDP0_SReset_n                O     1
// wmiDP1_SResp                   O     2 reg
// wmiDP1_SData                   O    32 reg
// wmiDP1_SThreadBusy             O     1
// wmiDP1_SDataThreadBusy         O     1
// wmiDP1_SRespLast               O     1 const
// wmiDP1_SFlag                   O    32 reg
// wmiDP1_SReset_n                O     1
// cpNow                          O    64 reg
// RDY_cpNow                      O     1 const
// gps_ppsSyncOut                 O     1
// RDY_uuid                       O     1 const
// RST_N_wci_m_0                  O     1 reset
// RST_N_wci_m_1                  O     1 reset
// RST_N_wci_m_2                  O     1 reset
// RST_N_wci_m_3                  O     1 reset
// RST_N_wci_m_4                  O     1 reset
// RST_N_wci_m_5                  O     1 reset
// RST_N_wci_m_6                  O     1 reset
// RST_N_wci_m_7                  O     1 reset
// RST_N_wci_m_8                  O     1 reset
// RST_N_wci_m_9                  O     1 reset
// RST_N_wci_m_10                 O     1 reset
// RST_N_wci_m_11                 O     1 reset
// RST_N_wci_m_12                 O     1 reset
// pciDevice                      I    16
// CLK_sys0_clk                   I     1 clock
// RST_N_sys0_rst                 I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I   153 reg
// cpServer_request_put           I    59 reg
// switch_x                       I     3 reg
// wci_m_0_SResp                  I     2
// wci_m_0_SData                  I    32
// wci_m_0_SFlag                  I     2 reg
// wci_m_1_SResp                  I     2
// wci_m_1_SData                  I    32
// wci_m_1_SFlag                  I     2 reg
// wci_m_2_SResp                  I     2
// wci_m_2_SData                  I    32
// wci_m_2_SFlag                  I     2 reg
// wci_m_3_SResp                  I     2
// wci_m_3_SData                  I    32
// wci_m_3_SFlag                  I     2 reg
// wci_m_4_SResp                  I     2
// wci_m_4_SData                  I    32
// wci_m_4_SFlag                  I     2 reg
// wci_m_5_SResp                  I     2
// wci_m_5_SData                  I    32
// wci_m_5_SFlag                  I     2 reg
// wci_m_6_SResp                  I     2
// wci_m_6_SData                  I    32
// wci_m_6_SFlag                  I     2 reg
// wci_m_7_SResp                  I     2
// wci_m_7_SData                  I    32
// wci_m_7_SFlag                  I     2 reg
// wci_m_8_SResp                  I     2
// wci_m_8_SData                  I    32
// wci_m_8_SFlag                  I     2 reg
// wci_m_9_SResp                  I     2
// wci_m_9_SData                  I    32
// wci_m_9_SFlag                  I     2 reg
// wci_m_10_SResp                 I     2
// wci_m_10_SData                 I    32
// wci_m_10_SFlag                 I     2 reg
// wci_m_11_SResp                 I     2
// wci_m_11_SData                 I    32
// wci_m_11_SFlag                 I     2 reg
// wci_m_12_SResp                 I     2
// wci_m_12_SData                 I    32
// wci_m_12_SFlag                 I     2 reg
// wmiDP0_MCmd                    I     3
// wmiDP0_MReqInfo                I     1
// wmiDP0_MAddrSpace              I     1
// wmiDP0_MAddr                   I    14
// wmiDP0_MBurstLength            I    12
// wmiDP0_MData                   I    32
// wmiDP0_MDataByteEn             I     4
// wmiDP0_arg_mFlag               I    32 reg
// wmiDP1_MCmd                    I     3
// wmiDP1_MReqInfo                I     1
// wmiDP1_MAddrSpace              I     1
// wmiDP1_MAddr                   I    14
// wmiDP1_MBurstLength            I    12
// wmiDP1_MData                   I    32
// wmiDP1_MDataByteEn             I     4
// wmiDP1_arg_mFlag               I    32 reg
// gps_ppsSyncIn_x                I     1 reg
// uuid_arg                       I   512
// EN_server_request_put          I     1
// EN_cpServer_request_put        I     1
// wci_m_0_SThreadBusy            I     1 reg
// wci_m_1_SThreadBusy            I     1 reg
// wci_m_2_SThreadBusy            I     1 reg
// wci_m_3_SThreadBusy            I     1 reg
// wci_m_4_SThreadBusy            I     1 reg
// wci_m_5_SThreadBusy            I     1 reg
// wci_m_6_SThreadBusy            I     1 reg
// wci_m_7_SThreadBusy            I     1 reg
// wci_m_8_SThreadBusy            I     1 reg
// wci_m_9_SThreadBusy            I     1 reg
// wci_m_10_SThreadBusy           I     1 reg
// wci_m_11_SThreadBusy           I     1 reg
// wci_m_12_SThreadBusy           I     1 reg
// wmiDP0_MReqLast                I     1
// wmiDP0_MDataValid              I     1
// wmiDP0_MDataLast               I     1
// wmiDP0_MReset_n                I     1 reg
// wmiDP1_MReqLast                I     1
// wmiDP1_MDataValid              I     1
// wmiDP1_MDataLast               I     1
// wmiDP1_MReset_n                I     1 reg
// EN_uuid                        I     1 inhigh
// EN_server_response_get         I     1
// EN_cpServer_response_get       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkOCInf4B(pciDevice,
		 CLK_sys0_clk,
		 RST_N_sys0_rst,
		 CLK,
		 RST_N,

		 server_request_put,
		 EN_server_request_put,
		 RDY_server_request_put,

		 EN_server_response_get,
		 server_response_get,
		 RDY_server_response_get,

		 cpServer_request_put,
		 EN_cpServer_request_put,
		 RDY_cpServer_request_put,

		 EN_cpServer_response_get,
		 cpServer_response_get,
		 RDY_cpServer_response_get,

		 led,

		 switch_x,

		 wci_m_0_MCmd,

		 wci_m_0_MAddrSpace,

		 wci_m_0_MByteEn,

		 wci_m_0_MAddr,

		 wci_m_0_MData,

		 wci_m_0_SResp,

		 wci_m_0_SData,

		 wci_m_0_SThreadBusy,

		 wci_m_0_SFlag,

		 wci_m_0_MFlag,

		 wci_m_1_MCmd,

		 wci_m_1_MAddrSpace,

		 wci_m_1_MByteEn,

		 wci_m_1_MAddr,

		 wci_m_1_MData,

		 wci_m_1_SResp,

		 wci_m_1_SData,

		 wci_m_1_SThreadBusy,

		 wci_m_1_SFlag,

		 wci_m_1_MFlag,

		 wci_m_2_MCmd,

		 wci_m_2_MAddrSpace,

		 wci_m_2_MByteEn,

		 wci_m_2_MAddr,

		 wci_m_2_MData,

		 wci_m_2_SResp,

		 wci_m_2_SData,

		 wci_m_2_SThreadBusy,

		 wci_m_2_SFlag,

		 wci_m_2_MFlag,

		 wci_m_3_MCmd,

		 wci_m_3_MAddrSpace,

		 wci_m_3_MByteEn,

		 wci_m_3_MAddr,

		 wci_m_3_MData,

		 wci_m_3_SResp,

		 wci_m_3_SData,

		 wci_m_3_SThreadBusy,

		 wci_m_3_SFlag,

		 wci_m_3_MFlag,

		 wci_m_4_MCmd,

		 wci_m_4_MAddrSpace,

		 wci_m_4_MByteEn,

		 wci_m_4_MAddr,

		 wci_m_4_MData,

		 wci_m_4_SResp,

		 wci_m_4_SData,

		 wci_m_4_SThreadBusy,

		 wci_m_4_SFlag,

		 wci_m_4_MFlag,

		 wci_m_5_MCmd,

		 wci_m_5_MAddrSpace,

		 wci_m_5_MByteEn,

		 wci_m_5_MAddr,

		 wci_m_5_MData,

		 wci_m_5_SResp,

		 wci_m_5_SData,

		 wci_m_5_SThreadBusy,

		 wci_m_5_SFlag,

		 wci_m_5_MFlag,

		 wci_m_6_MCmd,

		 wci_m_6_MAddrSpace,

		 wci_m_6_MByteEn,

		 wci_m_6_MAddr,

		 wci_m_6_MData,

		 wci_m_6_SResp,

		 wci_m_6_SData,

		 wci_m_6_SThreadBusy,

		 wci_m_6_SFlag,

		 wci_m_6_MFlag,

		 wci_m_7_MCmd,

		 wci_m_7_MAddrSpace,

		 wci_m_7_MByteEn,

		 wci_m_7_MAddr,

		 wci_m_7_MData,

		 wci_m_7_SResp,

		 wci_m_7_SData,

		 wci_m_7_SThreadBusy,

		 wci_m_7_SFlag,

		 wci_m_7_MFlag,

		 wci_m_8_MCmd,

		 wci_m_8_MAddrSpace,

		 wci_m_8_MByteEn,

		 wci_m_8_MAddr,

		 wci_m_8_MData,

		 wci_m_8_SResp,

		 wci_m_8_SData,

		 wci_m_8_SThreadBusy,

		 wci_m_8_SFlag,

		 wci_m_8_MFlag,

		 wci_m_9_MCmd,

		 wci_m_9_MAddrSpace,

		 wci_m_9_MByteEn,

		 wci_m_9_MAddr,

		 wci_m_9_MData,

		 wci_m_9_SResp,

		 wci_m_9_SData,

		 wci_m_9_SThreadBusy,

		 wci_m_9_SFlag,

		 wci_m_9_MFlag,

		 wci_m_10_MCmd,

		 wci_m_10_MAddrSpace,

		 wci_m_10_MByteEn,

		 wci_m_10_MAddr,

		 wci_m_10_MData,

		 wci_m_10_SResp,

		 wci_m_10_SData,

		 wci_m_10_SThreadBusy,

		 wci_m_10_SFlag,

		 wci_m_10_MFlag,

		 wci_m_11_MCmd,

		 wci_m_11_MAddrSpace,

		 wci_m_11_MByteEn,

		 wci_m_11_MAddr,

		 wci_m_11_MData,

		 wci_m_11_SResp,

		 wci_m_11_SData,

		 wci_m_11_SThreadBusy,

		 wci_m_11_SFlag,

		 wci_m_11_MFlag,

		 wci_m_12_MCmd,

		 wci_m_12_MAddrSpace,

		 wci_m_12_MByteEn,

		 wci_m_12_MAddr,

		 wci_m_12_MData,

		 wci_m_12_SResp,

		 wci_m_12_SData,

		 wci_m_12_SThreadBusy,

		 wci_m_12_SFlag,

		 wci_m_12_MFlag,

		 wmiDP0_MCmd,

		 wmiDP0_MReqLast,

		 wmiDP0_MReqInfo,

		 wmiDP0_MAddrSpace,

		 wmiDP0_MAddr,

		 wmiDP0_MBurstLength,

		 wmiDP0_MDataValid,

		 wmiDP0_MDataLast,

		 wmiDP0_MData,

		 wmiDP0_MDataByteEn,

		 wmiDP0_SResp,

		 wmiDP0_SData,

		 wmiDP0_SThreadBusy,

		 wmiDP0_SDataThreadBusy,

		 wmiDP0_SRespLast,

		 wmiDP0_SFlag,

		 wmiDP0_arg_mFlag,

		 wmiDP0_SReset_n,

		 wmiDP0_MReset_n,

		 wmiDP1_MCmd,

		 wmiDP1_MReqLast,

		 wmiDP1_MReqInfo,

		 wmiDP1_MAddrSpace,

		 wmiDP1_MAddr,

		 wmiDP1_MBurstLength,

		 wmiDP1_MDataValid,

		 wmiDP1_MDataLast,

		 wmiDP1_MData,

		 wmiDP1_MDataByteEn,

		 wmiDP1_SResp,

		 wmiDP1_SData,

		 wmiDP1_SThreadBusy,

		 wmiDP1_SDataThreadBusy,

		 wmiDP1_SRespLast,

		 wmiDP1_SFlag,

		 wmiDP1_arg_mFlag,

		 wmiDP1_SReset_n,

		 wmiDP1_MReset_n,

		 cpNow,
		 RDY_cpNow,

		 gps_ppsSyncIn_x,

		 gps_ppsSyncOut,

		 uuid_arg,
		 EN_uuid,
		 RDY_uuid,

		 RST_N_wci_m_0,
		 RST_N_wci_m_1,
		 RST_N_wci_m_2,
		 RST_N_wci_m_3,
		 RST_N_wci_m_4,
		 RST_N_wci_m_5,
		 RST_N_wci_m_6,
		 RST_N_wci_m_7,
		 RST_N_wci_m_8,
		 RST_N_wci_m_9,
		 RST_N_wci_m_10,
		 RST_N_wci_m_11,
		 RST_N_wci_m_12);
  input  [15 : 0] pciDevice;
  input  CLK_sys0_clk;
  input  RST_N_sys0_rst;
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [152 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [152 : 0] server_response_get;
  output RDY_server_response_get;

  // action method cpServer_request_put
  input  [58 : 0] cpServer_request_put;
  input  EN_cpServer_request_put;
  output RDY_cpServer_request_put;

  // actionvalue method cpServer_response_get
  input  EN_cpServer_response_get;
  output [39 : 0] cpServer_response_get;
  output RDY_cpServer_response_get;

  // value method led
  output [1 : 0] led;

  // action method switch
  input  [2 : 0] switch_x;

  // value method wci_m_0_mCmd
  output [2 : 0] wci_m_0_MCmd;

  // value method wci_m_0_mAddrSpace
  output wci_m_0_MAddrSpace;

  // value method wci_m_0_mByteEn
  output [3 : 0] wci_m_0_MByteEn;

  // value method wci_m_0_mAddr
  output [31 : 0] wci_m_0_MAddr;

  // value method wci_m_0_mData
  output [31 : 0] wci_m_0_MData;

  // action method wci_m_0_sResp
  input  [1 : 0] wci_m_0_SResp;

  // action method wci_m_0_sData
  input  [31 : 0] wci_m_0_SData;

  // action method wci_m_0_sThreadBusy
  input  wci_m_0_SThreadBusy;

  // action method wci_m_0_sFlag
  input  [1 : 0] wci_m_0_SFlag;

  // value method wci_m_0_mFlag
  output [1 : 0] wci_m_0_MFlag;

  // value method wci_m_1_mCmd
  output [2 : 0] wci_m_1_MCmd;

  // value method wci_m_1_mAddrSpace
  output wci_m_1_MAddrSpace;

  // value method wci_m_1_mByteEn
  output [3 : 0] wci_m_1_MByteEn;

  // value method wci_m_1_mAddr
  output [31 : 0] wci_m_1_MAddr;

  // value method wci_m_1_mData
  output [31 : 0] wci_m_1_MData;

  // action method wci_m_1_sResp
  input  [1 : 0] wci_m_1_SResp;

  // action method wci_m_1_sData
  input  [31 : 0] wci_m_1_SData;

  // action method wci_m_1_sThreadBusy
  input  wci_m_1_SThreadBusy;

  // action method wci_m_1_sFlag
  input  [1 : 0] wci_m_1_SFlag;

  // value method wci_m_1_mFlag
  output [1 : 0] wci_m_1_MFlag;

  // value method wci_m_2_mCmd
  output [2 : 0] wci_m_2_MCmd;

  // value method wci_m_2_mAddrSpace
  output wci_m_2_MAddrSpace;

  // value method wci_m_2_mByteEn
  output [3 : 0] wci_m_2_MByteEn;

  // value method wci_m_2_mAddr
  output [31 : 0] wci_m_2_MAddr;

  // value method wci_m_2_mData
  output [31 : 0] wci_m_2_MData;

  // action method wci_m_2_sResp
  input  [1 : 0] wci_m_2_SResp;

  // action method wci_m_2_sData
  input  [31 : 0] wci_m_2_SData;

  // action method wci_m_2_sThreadBusy
  input  wci_m_2_SThreadBusy;

  // action method wci_m_2_sFlag
  input  [1 : 0] wci_m_2_SFlag;

  // value method wci_m_2_mFlag
  output [1 : 0] wci_m_2_MFlag;

  // value method wci_m_3_mCmd
  output [2 : 0] wci_m_3_MCmd;

  // value method wci_m_3_mAddrSpace
  output wci_m_3_MAddrSpace;

  // value method wci_m_3_mByteEn
  output [3 : 0] wci_m_3_MByteEn;

  // value method wci_m_3_mAddr
  output [31 : 0] wci_m_3_MAddr;

  // value method wci_m_3_mData
  output [31 : 0] wci_m_3_MData;

  // action method wci_m_3_sResp
  input  [1 : 0] wci_m_3_SResp;

  // action method wci_m_3_sData
  input  [31 : 0] wci_m_3_SData;

  // action method wci_m_3_sThreadBusy
  input  wci_m_3_SThreadBusy;

  // action method wci_m_3_sFlag
  input  [1 : 0] wci_m_3_SFlag;

  // value method wci_m_3_mFlag
  output [1 : 0] wci_m_3_MFlag;

  // value method wci_m_4_mCmd
  output [2 : 0] wci_m_4_MCmd;

  // value method wci_m_4_mAddrSpace
  output wci_m_4_MAddrSpace;

  // value method wci_m_4_mByteEn
  output [3 : 0] wci_m_4_MByteEn;

  // value method wci_m_4_mAddr
  output [31 : 0] wci_m_4_MAddr;

  // value method wci_m_4_mData
  output [31 : 0] wci_m_4_MData;

  // action method wci_m_4_sResp
  input  [1 : 0] wci_m_4_SResp;

  // action method wci_m_4_sData
  input  [31 : 0] wci_m_4_SData;

  // action method wci_m_4_sThreadBusy
  input  wci_m_4_SThreadBusy;

  // action method wci_m_4_sFlag
  input  [1 : 0] wci_m_4_SFlag;

  // value method wci_m_4_mFlag
  output [1 : 0] wci_m_4_MFlag;

  // value method wci_m_5_mCmd
  output [2 : 0] wci_m_5_MCmd;

  // value method wci_m_5_mAddrSpace
  output wci_m_5_MAddrSpace;

  // value method wci_m_5_mByteEn
  output [3 : 0] wci_m_5_MByteEn;

  // value method wci_m_5_mAddr
  output [31 : 0] wci_m_5_MAddr;

  // value method wci_m_5_mData
  output [31 : 0] wci_m_5_MData;

  // action method wci_m_5_sResp
  input  [1 : 0] wci_m_5_SResp;

  // action method wci_m_5_sData
  input  [31 : 0] wci_m_5_SData;

  // action method wci_m_5_sThreadBusy
  input  wci_m_5_SThreadBusy;

  // action method wci_m_5_sFlag
  input  [1 : 0] wci_m_5_SFlag;

  // value method wci_m_5_mFlag
  output [1 : 0] wci_m_5_MFlag;

  // value method wci_m_6_mCmd
  output [2 : 0] wci_m_6_MCmd;

  // value method wci_m_6_mAddrSpace
  output wci_m_6_MAddrSpace;

  // value method wci_m_6_mByteEn
  output [3 : 0] wci_m_6_MByteEn;

  // value method wci_m_6_mAddr
  output [31 : 0] wci_m_6_MAddr;

  // value method wci_m_6_mData
  output [31 : 0] wci_m_6_MData;

  // action method wci_m_6_sResp
  input  [1 : 0] wci_m_6_SResp;

  // action method wci_m_6_sData
  input  [31 : 0] wci_m_6_SData;

  // action method wci_m_6_sThreadBusy
  input  wci_m_6_SThreadBusy;

  // action method wci_m_6_sFlag
  input  [1 : 0] wci_m_6_SFlag;

  // value method wci_m_6_mFlag
  output [1 : 0] wci_m_6_MFlag;

  // value method wci_m_7_mCmd
  output [2 : 0] wci_m_7_MCmd;

  // value method wci_m_7_mAddrSpace
  output wci_m_7_MAddrSpace;

  // value method wci_m_7_mByteEn
  output [3 : 0] wci_m_7_MByteEn;

  // value method wci_m_7_mAddr
  output [31 : 0] wci_m_7_MAddr;

  // value method wci_m_7_mData
  output [31 : 0] wci_m_7_MData;

  // action method wci_m_7_sResp
  input  [1 : 0] wci_m_7_SResp;

  // action method wci_m_7_sData
  input  [31 : 0] wci_m_7_SData;

  // action method wci_m_7_sThreadBusy
  input  wci_m_7_SThreadBusy;

  // action method wci_m_7_sFlag
  input  [1 : 0] wci_m_7_SFlag;

  // value method wci_m_7_mFlag
  output [1 : 0] wci_m_7_MFlag;

  // value method wci_m_8_mCmd
  output [2 : 0] wci_m_8_MCmd;

  // value method wci_m_8_mAddrSpace
  output wci_m_8_MAddrSpace;

  // value method wci_m_8_mByteEn
  output [3 : 0] wci_m_8_MByteEn;

  // value method wci_m_8_mAddr
  output [31 : 0] wci_m_8_MAddr;

  // value method wci_m_8_mData
  output [31 : 0] wci_m_8_MData;

  // action method wci_m_8_sResp
  input  [1 : 0] wci_m_8_SResp;

  // action method wci_m_8_sData
  input  [31 : 0] wci_m_8_SData;

  // action method wci_m_8_sThreadBusy
  input  wci_m_8_SThreadBusy;

  // action method wci_m_8_sFlag
  input  [1 : 0] wci_m_8_SFlag;

  // value method wci_m_8_mFlag
  output [1 : 0] wci_m_8_MFlag;

  // value method wci_m_9_mCmd
  output [2 : 0] wci_m_9_MCmd;

  // value method wci_m_9_mAddrSpace
  output wci_m_9_MAddrSpace;

  // value method wci_m_9_mByteEn
  output [3 : 0] wci_m_9_MByteEn;

  // value method wci_m_9_mAddr
  output [31 : 0] wci_m_9_MAddr;

  // value method wci_m_9_mData
  output [31 : 0] wci_m_9_MData;

  // action method wci_m_9_sResp
  input  [1 : 0] wci_m_9_SResp;

  // action method wci_m_9_sData
  input  [31 : 0] wci_m_9_SData;

  // action method wci_m_9_sThreadBusy
  input  wci_m_9_SThreadBusy;

  // action method wci_m_9_sFlag
  input  [1 : 0] wci_m_9_SFlag;

  // value method wci_m_9_mFlag
  output [1 : 0] wci_m_9_MFlag;

  // value method wci_m_10_mCmd
  output [2 : 0] wci_m_10_MCmd;

  // value method wci_m_10_mAddrSpace
  output wci_m_10_MAddrSpace;

  // value method wci_m_10_mByteEn
  output [3 : 0] wci_m_10_MByteEn;

  // value method wci_m_10_mAddr
  output [31 : 0] wci_m_10_MAddr;

  // value method wci_m_10_mData
  output [31 : 0] wci_m_10_MData;

  // action method wci_m_10_sResp
  input  [1 : 0] wci_m_10_SResp;

  // action method wci_m_10_sData
  input  [31 : 0] wci_m_10_SData;

  // action method wci_m_10_sThreadBusy
  input  wci_m_10_SThreadBusy;

  // action method wci_m_10_sFlag
  input  [1 : 0] wci_m_10_SFlag;

  // value method wci_m_10_mFlag
  output [1 : 0] wci_m_10_MFlag;

  // value method wci_m_11_mCmd
  output [2 : 0] wci_m_11_MCmd;

  // value method wci_m_11_mAddrSpace
  output wci_m_11_MAddrSpace;

  // value method wci_m_11_mByteEn
  output [3 : 0] wci_m_11_MByteEn;

  // value method wci_m_11_mAddr
  output [31 : 0] wci_m_11_MAddr;

  // value method wci_m_11_mData
  output [31 : 0] wci_m_11_MData;

  // action method wci_m_11_sResp
  input  [1 : 0] wci_m_11_SResp;

  // action method wci_m_11_sData
  input  [31 : 0] wci_m_11_SData;

  // action method wci_m_11_sThreadBusy
  input  wci_m_11_SThreadBusy;

  // action method wci_m_11_sFlag
  input  [1 : 0] wci_m_11_SFlag;

  // value method wci_m_11_mFlag
  output [1 : 0] wci_m_11_MFlag;

  // value method wci_m_12_mCmd
  output [2 : 0] wci_m_12_MCmd;

  // value method wci_m_12_mAddrSpace
  output wci_m_12_MAddrSpace;

  // value method wci_m_12_mByteEn
  output [3 : 0] wci_m_12_MByteEn;

  // value method wci_m_12_mAddr
  output [31 : 0] wci_m_12_MAddr;

  // value method wci_m_12_mData
  output [31 : 0] wci_m_12_MData;

  // action method wci_m_12_sResp
  input  [1 : 0] wci_m_12_SResp;

  // action method wci_m_12_sData
  input  [31 : 0] wci_m_12_SData;

  // action method wci_m_12_sThreadBusy
  input  wci_m_12_SThreadBusy;

  // action method wci_m_12_sFlag
  input  [1 : 0] wci_m_12_SFlag;

  // value method wci_m_12_mFlag
  output [1 : 0] wci_m_12_MFlag;

  // action method wmiDP0_mCmd
  input  [2 : 0] wmiDP0_MCmd;

  // action method wmiDP0_mReqLast
  input  wmiDP0_MReqLast;

  // action method wmiDP0_mReqInfo
  input  wmiDP0_MReqInfo;

  // action method wmiDP0_mAddrSpace
  input  wmiDP0_MAddrSpace;

  // action method wmiDP0_mAddr
  input  [13 : 0] wmiDP0_MAddr;

  // action method wmiDP0_mBurstLength
  input  [11 : 0] wmiDP0_MBurstLength;

  // action method wmiDP0_mDataValid
  input  wmiDP0_MDataValid;

  // action method wmiDP0_mDataLast
  input  wmiDP0_MDataLast;

  // action method wmiDP0_mData
  input  [31 : 0] wmiDP0_MData;

  // action method wmiDP0_mDataInfo

  // action method wmiDP0_mDataByteEn
  input  [3 : 0] wmiDP0_MDataByteEn;

  // value method wmiDP0_sResp
  output [1 : 0] wmiDP0_SResp;

  // value method wmiDP0_sData
  output [31 : 0] wmiDP0_SData;

  // value method wmiDP0_sThreadBusy
  output wmiDP0_SThreadBusy;

  // value method wmiDP0_sDataThreadBusy
  output wmiDP0_SDataThreadBusy;

  // value method wmiDP0_sRespLast
  output wmiDP0_SRespLast;

  // value method wmiDP0_sFlag
  output [31 : 0] wmiDP0_SFlag;

  // action method wmiDP0_mFlag
  input  [31 : 0] wmiDP0_arg_mFlag;

  // value method wmiDP0_sReset_n
  output wmiDP0_SReset_n;

  // action method wmiDP0_mReset_n
  input  wmiDP0_MReset_n;

  // action method wmiDP1_mCmd
  input  [2 : 0] wmiDP1_MCmd;

  // action method wmiDP1_mReqLast
  input  wmiDP1_MReqLast;

  // action method wmiDP1_mReqInfo
  input  wmiDP1_MReqInfo;

  // action method wmiDP1_mAddrSpace
  input  wmiDP1_MAddrSpace;

  // action method wmiDP1_mAddr
  input  [13 : 0] wmiDP1_MAddr;

  // action method wmiDP1_mBurstLength
  input  [11 : 0] wmiDP1_MBurstLength;

  // action method wmiDP1_mDataValid
  input  wmiDP1_MDataValid;

  // action method wmiDP1_mDataLast
  input  wmiDP1_MDataLast;

  // action method wmiDP1_mData
  input  [31 : 0] wmiDP1_MData;

  // action method wmiDP1_mDataInfo

  // action method wmiDP1_mDataByteEn
  input  [3 : 0] wmiDP1_MDataByteEn;

  // value method wmiDP1_sResp
  output [1 : 0] wmiDP1_SResp;

  // value method wmiDP1_sData
  output [31 : 0] wmiDP1_SData;

  // value method wmiDP1_sThreadBusy
  output wmiDP1_SThreadBusy;

  // value method wmiDP1_sDataThreadBusy
  output wmiDP1_SDataThreadBusy;

  // value method wmiDP1_sRespLast
  output wmiDP1_SRespLast;

  // value method wmiDP1_sFlag
  output [31 : 0] wmiDP1_SFlag;

  // action method wmiDP1_mFlag
  input  [31 : 0] wmiDP1_arg_mFlag;

  // value method wmiDP1_sReset_n
  output wmiDP1_SReset_n;

  // action method wmiDP1_mReset_n
  input  wmiDP1_MReset_n;

  // value method cpNow
  output [63 : 0] cpNow;
  output RDY_cpNow;

  // action method gps_ppsSyncIn
  input  gps_ppsSyncIn_x;

  // value method gps_ppsSyncOut
  output gps_ppsSyncOut;

  // action method uuid
  input  [511 : 0] uuid_arg;
  input  EN_uuid;
  output RDY_uuid;

  // output resets
  output RST_N_wci_m_0;
  output RST_N_wci_m_1;
  output RST_N_wci_m_2;
  output RST_N_wci_m_3;
  output RST_N_wci_m_4;
  output RST_N_wci_m_5;
  output RST_N_wci_m_6;
  output RST_N_wci_m_7;
  output RST_N_wci_m_8;
  output RST_N_wci_m_9;
  output RST_N_wci_m_10;
  output RST_N_wci_m_11;
  output RST_N_wci_m_12;

  // signals for module outputs
  wire [152 : 0] server_response_get;
  wire [63 : 0] cpNow;
  wire [39 : 0] cpServer_response_get;
  wire [31 : 0] wci_m_0_MAddr,
		wci_m_0_MData,
		wci_m_10_MAddr,
		wci_m_10_MData,
		wci_m_11_MAddr,
		wci_m_11_MData,
		wci_m_12_MAddr,
		wci_m_12_MData,
		wci_m_1_MAddr,
		wci_m_1_MData,
		wci_m_2_MAddr,
		wci_m_2_MData,
		wci_m_3_MAddr,
		wci_m_3_MData,
		wci_m_4_MAddr,
		wci_m_4_MData,
		wci_m_5_MAddr,
		wci_m_5_MData,
		wci_m_6_MAddr,
		wci_m_6_MData,
		wci_m_7_MAddr,
		wci_m_7_MData,
		wci_m_8_MAddr,
		wci_m_8_MData,
		wci_m_9_MAddr,
		wci_m_9_MData,
		wmiDP0_SData,
		wmiDP0_SFlag,
		wmiDP1_SData,
		wmiDP1_SFlag;
  wire [3 : 0] wci_m_0_MByteEn,
	       wci_m_10_MByteEn,
	       wci_m_11_MByteEn,
	       wci_m_12_MByteEn,
	       wci_m_1_MByteEn,
	       wci_m_2_MByteEn,
	       wci_m_3_MByteEn,
	       wci_m_4_MByteEn,
	       wci_m_5_MByteEn,
	       wci_m_6_MByteEn,
	       wci_m_7_MByteEn,
	       wci_m_8_MByteEn,
	       wci_m_9_MByteEn;
  wire [2 : 0] wci_m_0_MCmd,
	       wci_m_10_MCmd,
	       wci_m_11_MCmd,
	       wci_m_12_MCmd,
	       wci_m_1_MCmd,
	       wci_m_2_MCmd,
	       wci_m_3_MCmd,
	       wci_m_4_MCmd,
	       wci_m_5_MCmd,
	       wci_m_6_MCmd,
	       wci_m_7_MCmd,
	       wci_m_8_MCmd,
	       wci_m_9_MCmd;
  wire [1 : 0] led,
	       wci_m_0_MFlag,
	       wci_m_10_MFlag,
	       wci_m_11_MFlag,
	       wci_m_12_MFlag,
	       wci_m_1_MFlag,
	       wci_m_2_MFlag,
	       wci_m_3_MFlag,
	       wci_m_4_MFlag,
	       wci_m_5_MFlag,
	       wci_m_6_MFlag,
	       wci_m_7_MFlag,
	       wci_m_8_MFlag,
	       wci_m_9_MFlag,
	       wmiDP0_SResp,
	       wmiDP1_SResp;
  wire RDY_cpNow,
       RDY_cpServer_request_put,
       RDY_cpServer_response_get,
       RDY_server_request_put,
       RDY_server_response_get,
       RDY_uuid,
       RST_N_wci_m_0,
       RST_N_wci_m_1,
       RST_N_wci_m_10,
       RST_N_wci_m_11,
       RST_N_wci_m_12,
       RST_N_wci_m_2,
       RST_N_wci_m_3,
       RST_N_wci_m_4,
       RST_N_wci_m_5,
       RST_N_wci_m_6,
       RST_N_wci_m_7,
       RST_N_wci_m_8,
       RST_N_wci_m_9,
       gps_ppsSyncOut,
       wci_m_0_MAddrSpace,
       wci_m_10_MAddrSpace,
       wci_m_11_MAddrSpace,
       wci_m_12_MAddrSpace,
       wci_m_1_MAddrSpace,
       wci_m_2_MAddrSpace,
       wci_m_3_MAddrSpace,
       wci_m_4_MAddrSpace,
       wci_m_5_MAddrSpace,
       wci_m_6_MAddrSpace,
       wci_m_7_MAddrSpace,
       wci_m_8_MAddrSpace,
       wci_m_9_MAddrSpace,
       wmiDP0_SDataThreadBusy,
       wmiDP0_SReset_n,
       wmiDP0_SRespLast,
       wmiDP0_SThreadBusy,
       wmiDP1_SDataThreadBusy,
       wmiDP1_SReset_n,
       wmiDP1_SRespLast,
       wmiDP1_SThreadBusy;

  // register cpTlp_cmpActive
  reg cpTlp_cmpActive;
  wire cpTlp_cmpActive$D_IN, cpTlp_cmpActive$EN;

  // register cpTlp_cmpDWRemain
  reg [9 : 0] cpTlp_cmpDWRemain;
  wire [9 : 0] cpTlp_cmpDWRemain$D_IN;
  wire cpTlp_cmpDWRemain$EN;

  // register cpTlp_rdp
  reg [1 : 0] cpTlp_rdp;
  wire [1 : 0] cpTlp_rdp$D_IN;
  wire cpTlp_rdp$EN;

  // register cpTlp_rdv
  reg [127 : 0] cpTlp_rdv;
  wire [127 : 0] cpTlp_rdv$D_IN;
  wire cpTlp_rdv$EN;

  // register cpTlp_rss
  reg [1 : 0] cpTlp_rss;
  wire [1 : 0] cpTlp_rss$D_IN;
  wire cpTlp_rss$EN;

  // register cpTlp_tlpActive
  reg cpTlp_tlpActive;
  wire cpTlp_tlpActive$D_IN, cpTlp_tlpActive$EN;

  // register cpTlp_tlpDW
  reg [31 : 0] cpTlp_tlpDW;
  wire [31 : 0] cpTlp_tlpDW$D_IN;
  wire cpTlp_tlpDW$EN;

  // register cpTlp_tlpDWAddr
  reg [29 : 0] cpTlp_tlpDWAddr;
  wire [29 : 0] cpTlp_tlpDWAddr$D_IN;
  wire cpTlp_tlpDWAddr$EN;

  // register cpTlp_tlpDWp
  reg [1 : 0] cpTlp_tlpDWp;
  wire [1 : 0] cpTlp_tlpDWp$D_IN;
  wire cpTlp_tlpDWp$EN;

  // register cpTlp_tlpFirst
  reg cpTlp_tlpFirst;
  wire cpTlp_tlpFirst$D_IN, cpTlp_tlpFirst$EN;

  // register cpTlp_tlpReq
  reg [63 : 0] cpTlp_tlpReq;
  wire [63 : 0] cpTlp_tlpReq$D_IN;
  wire cpTlp_tlpReq$EN;

  // register cpTlp_tlpUnroll
  reg [9 : 0] cpTlp_tlpUnroll;
  wire [9 : 0] cpTlp_tlpUnroll$D_IN;
  wire cpTlp_tlpUnroll$EN;

  // register noc_chompCnt
  reg [7 : 0] noc_chompCnt;
  wire [7 : 0] noc_chompCnt$D_IN;
  wire noc_chompCnt$EN;

  // ports of submodule cp
  wire [511 : 0] cp$uuid_arg;
  wire [63 : 0] cp$cpNow;
  wire [58 : 0] cp$server_request_put;
  wire [39 : 0] cp$server_response_get;
  wire [31 : 0] cp$wci_Vm_0_MAddr,
		cp$wci_Vm_0_MData,
		cp$wci_Vm_0_SData,
		cp$wci_Vm_10_MAddr,
		cp$wci_Vm_10_MData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_MAddr,
		cp$wci_Vm_11_MData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_MAddr,
		cp$wci_Vm_12_MData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_MAddr,
		cp$wci_Vm_13_MData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_MAddr,
		cp$wci_Vm_14_MData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_MAddr,
		cp$wci_Vm_1_MData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_MAddr,
		cp$wci_Vm_2_MData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_MAddr,
		cp$wci_Vm_3_MData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_MAddr,
		cp$wci_Vm_4_MData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_MAddr,
		cp$wci_Vm_5_MData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_MAddr,
		cp$wci_Vm_6_MData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_MAddr,
		cp$wci_Vm_7_MData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_MAddr,
		cp$wci_Vm_8_MData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_MAddr,
		cp$wci_Vm_9_MData,
		cp$wci_Vm_9_SData;
  wire [3 : 0] cp$wci_Vm_0_MByteEn,
	       cp$wci_Vm_10_MByteEn,
	       cp$wci_Vm_11_MByteEn,
	       cp$wci_Vm_12_MByteEn,
	       cp$wci_Vm_13_MByteEn,
	       cp$wci_Vm_14_MByteEn,
	       cp$wci_Vm_1_MByteEn,
	       cp$wci_Vm_2_MByteEn,
	       cp$wci_Vm_3_MByteEn,
	       cp$wci_Vm_4_MByteEn,
	       cp$wci_Vm_5_MByteEn,
	       cp$wci_Vm_6_MByteEn,
	       cp$wci_Vm_7_MByteEn,
	       cp$wci_Vm_8_MByteEn,
	       cp$wci_Vm_9_MByteEn;
  wire [2 : 0] cp$switch_x,
	       cp$wci_Vm_0_MCmd,
	       cp$wci_Vm_10_MCmd,
	       cp$wci_Vm_11_MCmd,
	       cp$wci_Vm_12_MCmd,
	       cp$wci_Vm_13_MCmd,
	       cp$wci_Vm_14_MCmd,
	       cp$wci_Vm_1_MCmd,
	       cp$wci_Vm_2_MCmd,
	       cp$wci_Vm_3_MCmd,
	       cp$wci_Vm_4_MCmd,
	       cp$wci_Vm_5_MCmd,
	       cp$wci_Vm_6_MCmd,
	       cp$wci_Vm_7_MCmd,
	       cp$wci_Vm_8_MCmd,
	       cp$wci_Vm_9_MCmd;
  wire [1 : 0] cp$led,
	       cp$wci_Vm_0_MFlag,
	       cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_MFlag,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_MFlag,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_MFlag,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_MFlag,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_MFlag,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_MFlag,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_MFlag,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_MFlag,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_MFlag,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_MFlag,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_MFlag,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_MFlag,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_MFlag,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_MFlag,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_0,
       cp$RST_N_wci_Vm_1,
       cp$RST_N_wci_Vm_10,
       cp$RST_N_wci_Vm_11,
       cp$RST_N_wci_Vm_12,
       cp$RST_N_wci_Vm_13,
       cp$RST_N_wci_Vm_14,
       cp$RST_N_wci_Vm_2,
       cp$RST_N_wci_Vm_3,
       cp$RST_N_wci_Vm_4,
       cp$RST_N_wci_Vm_5,
       cp$RST_N_wci_Vm_6,
       cp$RST_N_wci_Vm_7,
       cp$RST_N_wci_Vm_8,
       cp$RST_N_wci_Vm_9,
       cp$gps_ppsSyncIn_x,
       cp$gps_ppsSyncOut,
       cp$wci_Vm_0_MAddrSpace,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_MAddrSpace,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_MAddrSpace,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_MAddrSpace,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_MAddrSpace,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_MAddrSpace,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_MAddrSpace,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_MAddrSpace,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_MAddrSpace,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_MAddrSpace,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_MAddrSpace,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_MAddrSpace,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_MAddrSpace,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_MAddrSpace,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_MAddrSpace,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule cpMux_aActF
  wire cpMux_aActF$CLR,
       cpMux_aActF$DEQ,
       cpMux_aActF$D_IN,
       cpMux_aActF$D_OUT,
       cpMux_aActF$EMPTY_N,
       cpMux_aActF$ENQ,
       cpMux_aActF$FULL_N;

  // ports of submodule cpMux_cpReqF
  wire [58 : 0] cpMux_cpReqF$D_IN, cpMux_cpReqF$D_OUT;
  wire cpMux_cpReqF$CLR,
       cpMux_cpReqF$DEQ,
       cpMux_cpReqF$EMPTY_N,
       cpMux_cpReqF$ENQ,
       cpMux_cpReqF$FULL_N;

  // ports of submodule cpMux_cpRespF
  wire [39 : 0] cpMux_cpRespF$D_IN, cpMux_cpRespF$D_OUT;
  wire cpMux_cpRespF$CLR,
       cpMux_cpRespF$DEQ,
       cpMux_cpRespF$EMPTY_N,
       cpMux_cpRespF$ENQ,
       cpMux_cpRespF$FULL_N;

  // ports of submodule cpMux_reqAF
  wire [58 : 0] cpMux_reqAF$D_IN, cpMux_reqAF$D_OUT;
  wire cpMux_reqAF$CLR,
       cpMux_reqAF$DEQ,
       cpMux_reqAF$EMPTY_N,
       cpMux_reqAF$ENQ,
       cpMux_reqAF$FULL_N;

  // ports of submodule cpMux_reqBF
  wire [58 : 0] cpMux_reqBF$D_IN, cpMux_reqBF$D_OUT;
  wire cpMux_reqBF$CLR,
       cpMux_reqBF$DEQ,
       cpMux_reqBF$EMPTY_N,
       cpMux_reqBF$ENQ,
       cpMux_reqBF$FULL_N;

  // ports of submodule cpMux_respAF
  wire [39 : 0] cpMux_respAF$D_IN, cpMux_respAF$D_OUT;
  wire cpMux_respAF$CLR,
       cpMux_respAF$DEQ,
       cpMux_respAF$EMPTY_N,
       cpMux_respAF$ENQ,
       cpMux_respAF$FULL_N;

  // ports of submodule cpMux_respBF
  wire [39 : 0] cpMux_respBF$D_IN, cpMux_respBF$D_OUT;
  wire cpMux_respBF$CLR,
       cpMux_respBF$DEQ,
       cpMux_respBF$EMPTY_N,
       cpMux_respBF$ENQ,
       cpMux_respBF$FULL_N;

  // ports of submodule cpTlp_cmpF
  wire [55 : 0] cpTlp_cmpF$D_IN, cpTlp_cmpF$D_OUT;
  wire cpTlp_cmpF$CLR,
       cpTlp_cmpF$DEQ,
       cpTlp_cmpF$EMPTY_N,
       cpTlp_cmpF$ENQ,
       cpTlp_cmpF$FULL_N;

  // ports of submodule cpTlp_cpReqF
  wire [58 : 0] cpTlp_cpReqF$D_IN, cpTlp_cpReqF$D_OUT;
  wire cpTlp_cpReqF$CLR,
       cpTlp_cpReqF$DEQ,
       cpTlp_cpReqF$EMPTY_N,
       cpTlp_cpReqF$ENQ,
       cpTlp_cpReqF$FULL_N;

  // ports of submodule cpTlp_cpRespF
  wire [39 : 0] cpTlp_cpRespF$D_IN, cpTlp_cpRespF$D_OUT;
  wire cpTlp_cpRespF$CLR,
       cpTlp_cpRespF$DEQ,
       cpTlp_cpRespF$EMPTY_N,
       cpTlp_cpRespF$ENQ,
       cpTlp_cpRespF$FULL_N;

  // ports of submodule cpTlp_inF
  wire [152 : 0] cpTlp_inF$D_IN, cpTlp_inF$D_OUT;
  wire cpTlp_inF$CLR,
       cpTlp_inF$DEQ,
       cpTlp_inF$EMPTY_N,
       cpTlp_inF$ENQ,
       cpTlp_inF$FULL_N;

  // ports of submodule cpTlp_outF
  wire [152 : 0] cpTlp_outF$D_IN, cpTlp_outF$D_OUT;
  wire cpTlp_outF$CLR,
       cpTlp_outF$DEQ,
       cpTlp_outF$EMPTY_N,
       cpTlp_outF$ENQ,
       cpTlp_outF$FULL_N;

  // ports of submodule dp0
  wire [152 : 0] dp0$server_request_put, dp0$server_response_get;
  wire [66 : 0] dp0$wti_s_req;
  wire [31 : 0] dp0$wci_s_MAddr,
		dp0$wci_s_MData,
		dp0$wci_s_SData,
		dp0$wmiS0_MData,
		dp0$wmiS0_SData,
		dp0$wmiS0_SFlag,
		dp0$wmiS0_arg_mFlag;
  wire [13 : 0] dp0$wmiS0_MAddr;
  wire [11 : 0] dp0$wmiS0_MBurstLength;
  wire [3 : 0] dp0$wci_s_MByteEn, dp0$wmiS0_MDataByteEn;
  wire [2 : 0] dp0$wci_s_MCmd, dp0$wmiS0_MCmd;
  wire [1 : 0] dp0$wci_s_MFlag,
	       dp0$wci_s_SFlag,
	       dp0$wci_s_SResp,
	       dp0$wmiS0_SResp;
  wire dp0$EN_server_request_put,
       dp0$EN_server_response_get,
       dp0$RDY_server_request_put,
       dp0$RDY_server_response_get,
       dp0$wci_s_MAddrSpace,
       dp0$wci_s_SThreadBusy,
       dp0$wmiS0_MAddrSpace,
       dp0$wmiS0_MDataLast,
       dp0$wmiS0_MDataValid,
       dp0$wmiS0_MReqInfo,
       dp0$wmiS0_MReqLast,
       dp0$wmiS0_MReset_n,
       dp0$wmiS0_SDataThreadBusy,
       dp0$wmiS0_SReset_n,
       dp0$wmiS0_SRespLast,
       dp0$wmiS0_SThreadBusy,
       dp0$wti_s_SReset_n,
       dp0$wti_s_SThreadBusy;

  // ports of submodule dp1
  wire [152 : 0] dp1$server_request_put, dp1$server_response_get;
  wire [66 : 0] dp1$wti_s_req;
  wire [31 : 0] dp1$wci_s_MAddr,
		dp1$wci_s_MData,
		dp1$wci_s_SData,
		dp1$wmiS0_MData,
		dp1$wmiS0_SData,
		dp1$wmiS0_SFlag,
		dp1$wmiS0_arg_mFlag;
  wire [13 : 0] dp1$wmiS0_MAddr;
  wire [11 : 0] dp1$wmiS0_MBurstLength;
  wire [3 : 0] dp1$wci_s_MByteEn, dp1$wmiS0_MDataByteEn;
  wire [2 : 0] dp1$wci_s_MCmd, dp1$wmiS0_MCmd;
  wire [1 : 0] dp1$wci_s_MFlag,
	       dp1$wci_s_SFlag,
	       dp1$wci_s_SResp,
	       dp1$wmiS0_SResp;
  wire dp1$EN_server_request_put,
       dp1$EN_server_response_get,
       dp1$RDY_server_request_put,
       dp1$RDY_server_response_get,
       dp1$wci_s_MAddrSpace,
       dp1$wci_s_SThreadBusy,
       dp1$wmiS0_MAddrSpace,
       dp1$wmiS0_MDataLast,
       dp1$wmiS0_MDataValid,
       dp1$wmiS0_MReqInfo,
       dp1$wmiS0_MReqLast,
       dp1$wmiS0_MReset_n,
       dp1$wmiS0_SDataThreadBusy,
       dp1$wmiS0_SReset_n,
       dp1$wmiS0_SRespLast,
       dp1$wmiS0_SThreadBusy,
       dp1$wti_s_SReset_n,
       dp1$wti_s_SThreadBusy;

  // ports of submodule itc0
  wire [66 : 0] itc0$wti_m_req;
  wire [63 : 0] itc0$gpsTime_arg;
  wire itc0$EN_gpsTime,
       itc0$RDY_gpsTime,
       itc0$wti_m_SReset_n,
       itc0$wti_m_SThreadBusy;

  // ports of submodule itc1
  wire [66 : 0] itc1$wti_m_req;
  wire [63 : 0] itc1$gpsTime_arg;
  wire itc1$EN_gpsTime,
       itc1$RDY_gpsTime,
       itc1$wti_m_SReset_n,
       itc1$wti_m_SThreadBusy;

  // ports of submodule noc_sm0
  wire [152 : 0] noc_sm0$c0_request_get,
		 noc_sm0$c0_response_put,
		 noc_sm0$c1_request_get,
		 noc_sm0$c1_response_put,
		 noc_sm0$s_request_put,
		 noc_sm0$s_response_get;
  wire noc_sm0$EN_c0_request_get,
       noc_sm0$EN_c0_response_put,
       noc_sm0$EN_c1_request_get,
       noc_sm0$EN_c1_response_put,
       noc_sm0$EN_s_request_put,
       noc_sm0$EN_s_response_get,
       noc_sm0$RDY_c0_request_get,
       noc_sm0$RDY_c0_response_put,
       noc_sm0$RDY_c1_request_get,
       noc_sm0$RDY_c1_response_put,
       noc_sm0$RDY_s_request_put,
       noc_sm0$RDY_s_response_get;

  // ports of submodule noc_sm1
  wire [152 : 0] noc_sm1$c0_request_get,
		 noc_sm1$c0_response_put,
		 noc_sm1$c1_request_get,
		 noc_sm1$c1_response_put,
		 noc_sm1$s_request_put,
		 noc_sm1$s_response_get;
  wire noc_sm1$EN_c0_request_get,
       noc_sm1$EN_c0_response_put,
       noc_sm1$EN_c1_request_get,
       noc_sm1$EN_c1_response_put,
       noc_sm1$EN_s_request_put,
       noc_sm1$EN_s_response_get,
       noc_sm1$RDY_c0_request_get,
       noc_sm1$RDY_c0_response_put,
       noc_sm1$RDY_c1_request_get,
       noc_sm1$RDY_c1_response_put,
       noc_sm1$RDY_s_request_put,
       noc_sm1$RDY_s_response_get;

  // ports of submodule noc_sm2
  wire [152 : 0] noc_sm2$c0_request_get,
		 noc_sm2$c0_response_put,
		 noc_sm2$c1_response_put,
		 noc_sm2$s_request_put,
		 noc_sm2$s_response_get;
  wire noc_sm2$EN_c0_request_get,
       noc_sm2$EN_c0_response_put,
       noc_sm2$EN_c1_request_get,
       noc_sm2$EN_c1_response_put,
       noc_sm2$EN_s_request_put,
       noc_sm2$EN_s_response_get,
       noc_sm2$RDY_c0_request_get,
       noc_sm2$RDY_c0_response_put,
       noc_sm2$RDY_c1_request_get,
       noc_sm2$RDY_s_request_put,
       noc_sm2$RDY_s_response_get;

  // rule scheduling signals
  wire WILL_FIRE_RL_cpMux_request_portA,
       WILL_FIRE_RL_cpMux_request_portB,
       WILL_FIRE_RL_cpMux_response_cp,
       WILL_FIRE_RL_cpTlp_tlpFirstComplWord,
       WILL_FIRE_RL_cpTlp_tlpFirstRcv,
       WILL_FIRE_RL_cpTlp_tlpNextComplWord,
       WILL_FIRE_RL_cpTlp_tlpReqGen,
       WILL_FIRE_RL_cpTlp_tlpStageNextWord;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_cpTlp_outF$enq_1__VAL_1, MUX_cpTlp_outF$enq_1__VAL_2;
  wire [29 : 0] MUX_cpTlp_tlpDWAddr$write_1__VAL_2;
  wire [9 : 0] MUX_cpTlp_cmpDWRemain$write_1__VAL_1,
	       MUX_cpTlp_cmpDWRemain$write_1__VAL_2,
	       MUX_cpTlp_tlpUnroll$write_1__VAL_2;
  wire [1 : 0] MUX_cpTlp_rdp$write_1__VAL_1,
	       MUX_cpTlp_rss$write_1__VAL_1,
	       MUX_cpTlp_tlpDWp$write_1__VAL_2;
  wire MUX_cpMux_aActF$enq_1__SEL_1,
       MUX_cpTlp_cmpActive$write_1__SEL_1,
       MUX_cpTlp_rss$write_1__SEL_1,
       MUX_cpTlp_tlpActive$write_1__SEL_1,
       MUX_cpTlp_tlpDWAddr$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h1839;
  reg [31 : 0] v__h5693;
  reg [15 : 0] lastRema__h10373;
  reg [1 : 0] lowAddr10__h5218, x__h5448, x__h5471;
  reg CASE_cpTlp_tlpDWp_NOT_cpTlp_tlpDWp_EQ_3_OR_cpT_ETC__q1;
  wire [127 : 0] pkt__h7418, pw_data__h10406;
  wire [57 : 0] IF_cpTlp_tlpReq_6_BIT_62_7_THEN_cpTlp_tlpDWAdd_ETC___d147;
  wire [31 : 0] IF_cpTlp_tlpReq_6_BIT_62_7_AND_NOT_cpTlp_tlpFi_ETC___d338,
		wreq_data__h6249;
  wire [15 : 0] pw_be__h10405, x__h2791, x__h3085;
  wire [11 : 0] byteCount__h5220, x__h5439, x__h5441, y__h5440, y__h5442;
  wire [6 : 0] lowAddr__h5219;
  wire [3 : 0] _theResult_____2__h5635;
  wire [2 : 0] x__h10825;
  wire cpMux_aActF_i_notEmpty__45_AND_IF_cpMux_aActF__ETC___d250,
       cpTlp_tlpFirst_9_OR_IF_cpTlp_tlpDWp_00_EQ_0_01_ETC___d110;

  // output resets
  assign RST_N_wci_m_0 = cp$RST_N_wci_Vm_0 ;
  assign RST_N_wci_m_1 = cp$RST_N_wci_Vm_1 ;
  assign RST_N_wci_m_2 = cp$RST_N_wci_Vm_2 ;
  assign RST_N_wci_m_3 = cp$RST_N_wci_Vm_3 ;
  assign RST_N_wci_m_4 = cp$RST_N_wci_Vm_4 ;
  assign RST_N_wci_m_5 = cp$RST_N_wci_Vm_5 ;
  assign RST_N_wci_m_6 = cp$RST_N_wci_Vm_6 ;
  assign RST_N_wci_m_7 = cp$RST_N_wci_Vm_7 ;
  assign RST_N_wci_m_8 = cp$RST_N_wci_Vm_8 ;
  assign RST_N_wci_m_9 = cp$RST_N_wci_Vm_9 ;
  assign RST_N_wci_m_10 = cp$RST_N_wci_Vm_10 ;
  assign RST_N_wci_m_11 = cp$RST_N_wci_Vm_11 ;
  assign RST_N_wci_m_12 = cp$RST_N_wci_Vm_12 ;

  // action method server_request_put
  assign RDY_server_request_put = noc_sm0$RDY_s_request_put ;

  // actionvalue method server_response_get
  assign server_response_get = noc_sm0$s_response_get ;
  assign RDY_server_response_get = noc_sm0$RDY_s_response_get ;

  // action method cpServer_request_put
  assign RDY_cpServer_request_put = cpMux_reqBF$FULL_N ;

  // actionvalue method cpServer_response_get
  assign cpServer_response_get = cpMux_respBF$D_OUT ;
  assign RDY_cpServer_response_get = cpMux_respBF$EMPTY_N ;

  // value method led
  assign led = cp$led ;

  // value method wci_m_0_mCmd
  assign wci_m_0_MCmd = cp$wci_Vm_0_MCmd ;

  // value method wci_m_0_mAddrSpace
  assign wci_m_0_MAddrSpace = cp$wci_Vm_0_MAddrSpace ;

  // value method wci_m_0_mByteEn
  assign wci_m_0_MByteEn = cp$wci_Vm_0_MByteEn ;

  // value method wci_m_0_mAddr
  assign wci_m_0_MAddr = cp$wci_Vm_0_MAddr ;

  // value method wci_m_0_mData
  assign wci_m_0_MData = cp$wci_Vm_0_MData ;

  // value method wci_m_0_mFlag
  assign wci_m_0_MFlag = cp$wci_Vm_0_MFlag ;

  // value method wci_m_1_mCmd
  assign wci_m_1_MCmd = cp$wci_Vm_1_MCmd ;

  // value method wci_m_1_mAddrSpace
  assign wci_m_1_MAddrSpace = cp$wci_Vm_1_MAddrSpace ;

  // value method wci_m_1_mByteEn
  assign wci_m_1_MByteEn = cp$wci_Vm_1_MByteEn ;

  // value method wci_m_1_mAddr
  assign wci_m_1_MAddr = cp$wci_Vm_1_MAddr ;

  // value method wci_m_1_mData
  assign wci_m_1_MData = cp$wci_Vm_1_MData ;

  // value method wci_m_1_mFlag
  assign wci_m_1_MFlag = cp$wci_Vm_1_MFlag ;

  // value method wci_m_2_mCmd
  assign wci_m_2_MCmd = cp$wci_Vm_2_MCmd ;

  // value method wci_m_2_mAddrSpace
  assign wci_m_2_MAddrSpace = cp$wci_Vm_2_MAddrSpace ;

  // value method wci_m_2_mByteEn
  assign wci_m_2_MByteEn = cp$wci_Vm_2_MByteEn ;

  // value method wci_m_2_mAddr
  assign wci_m_2_MAddr = cp$wci_Vm_2_MAddr ;

  // value method wci_m_2_mData
  assign wci_m_2_MData = cp$wci_Vm_2_MData ;

  // value method wci_m_2_mFlag
  assign wci_m_2_MFlag = cp$wci_Vm_2_MFlag ;

  // value method wci_m_3_mCmd
  assign wci_m_3_MCmd = cp$wci_Vm_3_MCmd ;

  // value method wci_m_3_mAddrSpace
  assign wci_m_3_MAddrSpace = cp$wci_Vm_3_MAddrSpace ;

  // value method wci_m_3_mByteEn
  assign wci_m_3_MByteEn = cp$wci_Vm_3_MByteEn ;

  // value method wci_m_3_mAddr
  assign wci_m_3_MAddr = cp$wci_Vm_3_MAddr ;

  // value method wci_m_3_mData
  assign wci_m_3_MData = cp$wci_Vm_3_MData ;

  // value method wci_m_3_mFlag
  assign wci_m_3_MFlag = cp$wci_Vm_3_MFlag ;

  // value method wci_m_4_mCmd
  assign wci_m_4_MCmd = cp$wci_Vm_4_MCmd ;

  // value method wci_m_4_mAddrSpace
  assign wci_m_4_MAddrSpace = cp$wci_Vm_4_MAddrSpace ;

  // value method wci_m_4_mByteEn
  assign wci_m_4_MByteEn = cp$wci_Vm_4_MByteEn ;

  // value method wci_m_4_mAddr
  assign wci_m_4_MAddr = cp$wci_Vm_4_MAddr ;

  // value method wci_m_4_mData
  assign wci_m_4_MData = cp$wci_Vm_4_MData ;

  // value method wci_m_4_mFlag
  assign wci_m_4_MFlag = cp$wci_Vm_4_MFlag ;

  // value method wci_m_5_mCmd
  assign wci_m_5_MCmd = cp$wci_Vm_5_MCmd ;

  // value method wci_m_5_mAddrSpace
  assign wci_m_5_MAddrSpace = cp$wci_Vm_5_MAddrSpace ;

  // value method wci_m_5_mByteEn
  assign wci_m_5_MByteEn = cp$wci_Vm_5_MByteEn ;

  // value method wci_m_5_mAddr
  assign wci_m_5_MAddr = cp$wci_Vm_5_MAddr ;

  // value method wci_m_5_mData
  assign wci_m_5_MData = cp$wci_Vm_5_MData ;

  // value method wci_m_5_mFlag
  assign wci_m_5_MFlag = cp$wci_Vm_5_MFlag ;

  // value method wci_m_6_mCmd
  assign wci_m_6_MCmd = cp$wci_Vm_6_MCmd ;

  // value method wci_m_6_mAddrSpace
  assign wci_m_6_MAddrSpace = cp$wci_Vm_6_MAddrSpace ;

  // value method wci_m_6_mByteEn
  assign wci_m_6_MByteEn = cp$wci_Vm_6_MByteEn ;

  // value method wci_m_6_mAddr
  assign wci_m_6_MAddr = cp$wci_Vm_6_MAddr ;

  // value method wci_m_6_mData
  assign wci_m_6_MData = cp$wci_Vm_6_MData ;

  // value method wci_m_6_mFlag
  assign wci_m_6_MFlag = cp$wci_Vm_6_MFlag ;

  // value method wci_m_7_mCmd
  assign wci_m_7_MCmd = cp$wci_Vm_7_MCmd ;

  // value method wci_m_7_mAddrSpace
  assign wci_m_7_MAddrSpace = cp$wci_Vm_7_MAddrSpace ;

  // value method wci_m_7_mByteEn
  assign wci_m_7_MByteEn = cp$wci_Vm_7_MByteEn ;

  // value method wci_m_7_mAddr
  assign wci_m_7_MAddr = cp$wci_Vm_7_MAddr ;

  // value method wci_m_7_mData
  assign wci_m_7_MData = cp$wci_Vm_7_MData ;

  // value method wci_m_7_mFlag
  assign wci_m_7_MFlag = cp$wci_Vm_7_MFlag ;

  // value method wci_m_8_mCmd
  assign wci_m_8_MCmd = cp$wci_Vm_8_MCmd ;

  // value method wci_m_8_mAddrSpace
  assign wci_m_8_MAddrSpace = cp$wci_Vm_8_MAddrSpace ;

  // value method wci_m_8_mByteEn
  assign wci_m_8_MByteEn = cp$wci_Vm_8_MByteEn ;

  // value method wci_m_8_mAddr
  assign wci_m_8_MAddr = cp$wci_Vm_8_MAddr ;

  // value method wci_m_8_mData
  assign wci_m_8_MData = cp$wci_Vm_8_MData ;

  // value method wci_m_8_mFlag
  assign wci_m_8_MFlag = cp$wci_Vm_8_MFlag ;

  // value method wci_m_9_mCmd
  assign wci_m_9_MCmd = cp$wci_Vm_9_MCmd ;

  // value method wci_m_9_mAddrSpace
  assign wci_m_9_MAddrSpace = cp$wci_Vm_9_MAddrSpace ;

  // value method wci_m_9_mByteEn
  assign wci_m_9_MByteEn = cp$wci_Vm_9_MByteEn ;

  // value method wci_m_9_mAddr
  assign wci_m_9_MAddr = cp$wci_Vm_9_MAddr ;

  // value method wci_m_9_mData
  assign wci_m_9_MData = cp$wci_Vm_9_MData ;

  // value method wci_m_9_mFlag
  assign wci_m_9_MFlag = cp$wci_Vm_9_MFlag ;

  // value method wci_m_10_mCmd
  assign wci_m_10_MCmd = cp$wci_Vm_10_MCmd ;

  // value method wci_m_10_mAddrSpace
  assign wci_m_10_MAddrSpace = cp$wci_Vm_10_MAddrSpace ;

  // value method wci_m_10_mByteEn
  assign wci_m_10_MByteEn = cp$wci_Vm_10_MByteEn ;

  // value method wci_m_10_mAddr
  assign wci_m_10_MAddr = cp$wci_Vm_10_MAddr ;

  // value method wci_m_10_mData
  assign wci_m_10_MData = cp$wci_Vm_10_MData ;

  // value method wci_m_10_mFlag
  assign wci_m_10_MFlag = cp$wci_Vm_10_MFlag ;

  // value method wci_m_11_mCmd
  assign wci_m_11_MCmd = cp$wci_Vm_11_MCmd ;

  // value method wci_m_11_mAddrSpace
  assign wci_m_11_MAddrSpace = cp$wci_Vm_11_MAddrSpace ;

  // value method wci_m_11_mByteEn
  assign wci_m_11_MByteEn = cp$wci_Vm_11_MByteEn ;

  // value method wci_m_11_mAddr
  assign wci_m_11_MAddr = cp$wci_Vm_11_MAddr ;

  // value method wci_m_11_mData
  assign wci_m_11_MData = cp$wci_Vm_11_MData ;

  // value method wci_m_11_mFlag
  assign wci_m_11_MFlag = cp$wci_Vm_11_MFlag ;

  // value method wci_m_12_mCmd
  assign wci_m_12_MCmd = cp$wci_Vm_12_MCmd ;

  // value method wci_m_12_mAddrSpace
  assign wci_m_12_MAddrSpace = cp$wci_Vm_12_MAddrSpace ;

  // value method wci_m_12_mByteEn
  assign wci_m_12_MByteEn = cp$wci_Vm_12_MByteEn ;

  // value method wci_m_12_mAddr
  assign wci_m_12_MAddr = cp$wci_Vm_12_MAddr ;

  // value method wci_m_12_mData
  assign wci_m_12_MData = cp$wci_Vm_12_MData ;

  // value method wci_m_12_mFlag
  assign wci_m_12_MFlag = cp$wci_Vm_12_MFlag ;

  // value method wmiDP0_sResp
  assign wmiDP0_SResp = dp0$wmiS0_SResp ;

  // value method wmiDP0_sData
  assign wmiDP0_SData = dp0$wmiS0_SData ;

  // value method wmiDP0_sThreadBusy
  assign wmiDP0_SThreadBusy = dp0$wmiS0_SThreadBusy ;

  // value method wmiDP0_sDataThreadBusy
  assign wmiDP0_SDataThreadBusy = dp0$wmiS0_SDataThreadBusy ;

  // value method wmiDP0_sRespLast
  assign wmiDP0_SRespLast = dp0$wmiS0_SRespLast ;

  // value method wmiDP0_sFlag
  assign wmiDP0_SFlag = dp0$wmiS0_SFlag ;

  // value method wmiDP0_sReset_n
  assign wmiDP0_SReset_n = dp0$wmiS0_SReset_n ;

  // value method wmiDP1_sResp
  assign wmiDP1_SResp = dp1$wmiS0_SResp ;

  // value method wmiDP1_sData
  assign wmiDP1_SData = dp1$wmiS0_SData ;

  // value method wmiDP1_sThreadBusy
  assign wmiDP1_SThreadBusy = dp1$wmiS0_SThreadBusy ;

  // value method wmiDP1_sDataThreadBusy
  assign wmiDP1_SDataThreadBusy = dp1$wmiS0_SDataThreadBusy ;

  // value method wmiDP1_sRespLast
  assign wmiDP1_SRespLast = dp1$wmiS0_SRespLast ;

  // value method wmiDP1_sFlag
  assign wmiDP1_SFlag = dp1$wmiS0_SFlag ;

  // value method wmiDP1_sReset_n
  assign wmiDP1_SReset_n = dp1$wmiS0_SReset_n ;

  // value method cpNow
  assign cpNow = cp$cpNow ;
  assign RDY_cpNow = 1'd1 ;

  // value method gps_ppsSyncOut
  assign gps_ppsSyncOut = cp$gps_ppsSyncOut ;

  // action method uuid
  assign RDY_uuid = 1'd1 ;

  // submodule cp
  mkOCCP cp(.pciDevice(pciDevice),
	    .CLK_time_clk(CLK_sys0_clk),
	    .RST_N_time_rst(RST_N_sys0_rst),
	    .CLK(CLK),
	    .RST_N(RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .uuid_arg(cp$uuid_arg),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .wci_Vm_0_MCmd(cp$wci_Vm_0_MCmd),
	    .wci_Vm_0_MAddrSpace(cp$wci_Vm_0_MAddrSpace),
	    .wci_Vm_0_MByteEn(cp$wci_Vm_0_MByteEn),
	    .wci_Vm_0_MAddr(cp$wci_Vm_0_MAddr),
	    .wci_Vm_0_MData(cp$wci_Vm_0_MData),
	    .wci_Vm_0_MFlag(cp$wci_Vm_0_MFlag),
	    .wci_Vm_1_MCmd(cp$wci_Vm_1_MCmd),
	    .wci_Vm_1_MAddrSpace(cp$wci_Vm_1_MAddrSpace),
	    .wci_Vm_1_MByteEn(cp$wci_Vm_1_MByteEn),
	    .wci_Vm_1_MAddr(cp$wci_Vm_1_MAddr),
	    .wci_Vm_1_MData(cp$wci_Vm_1_MData),
	    .wci_Vm_1_MFlag(cp$wci_Vm_1_MFlag),
	    .wci_Vm_2_MCmd(cp$wci_Vm_2_MCmd),
	    .wci_Vm_2_MAddrSpace(cp$wci_Vm_2_MAddrSpace),
	    .wci_Vm_2_MByteEn(cp$wci_Vm_2_MByteEn),
	    .wci_Vm_2_MAddr(cp$wci_Vm_2_MAddr),
	    .wci_Vm_2_MData(cp$wci_Vm_2_MData),
	    .wci_Vm_2_MFlag(cp$wci_Vm_2_MFlag),
	    .wci_Vm_3_MCmd(cp$wci_Vm_3_MCmd),
	    .wci_Vm_3_MAddrSpace(cp$wci_Vm_3_MAddrSpace),
	    .wci_Vm_3_MByteEn(cp$wci_Vm_3_MByteEn),
	    .wci_Vm_3_MAddr(cp$wci_Vm_3_MAddr),
	    .wci_Vm_3_MData(cp$wci_Vm_3_MData),
	    .wci_Vm_3_MFlag(cp$wci_Vm_3_MFlag),
	    .wci_Vm_4_MCmd(cp$wci_Vm_4_MCmd),
	    .wci_Vm_4_MAddrSpace(cp$wci_Vm_4_MAddrSpace),
	    .wci_Vm_4_MByteEn(cp$wci_Vm_4_MByteEn),
	    .wci_Vm_4_MAddr(cp$wci_Vm_4_MAddr),
	    .wci_Vm_4_MData(cp$wci_Vm_4_MData),
	    .wci_Vm_4_MFlag(cp$wci_Vm_4_MFlag),
	    .wci_Vm_5_MCmd(cp$wci_Vm_5_MCmd),
	    .wci_Vm_5_MAddrSpace(cp$wci_Vm_5_MAddrSpace),
	    .wci_Vm_5_MByteEn(cp$wci_Vm_5_MByteEn),
	    .wci_Vm_5_MAddr(cp$wci_Vm_5_MAddr),
	    .wci_Vm_5_MData(cp$wci_Vm_5_MData),
	    .wci_Vm_5_MFlag(cp$wci_Vm_5_MFlag),
	    .wci_Vm_6_MCmd(cp$wci_Vm_6_MCmd),
	    .wci_Vm_6_MAddrSpace(cp$wci_Vm_6_MAddrSpace),
	    .wci_Vm_6_MByteEn(cp$wci_Vm_6_MByteEn),
	    .wci_Vm_6_MAddr(cp$wci_Vm_6_MAddr),
	    .wci_Vm_6_MData(cp$wci_Vm_6_MData),
	    .wci_Vm_6_MFlag(cp$wci_Vm_6_MFlag),
	    .wci_Vm_7_MCmd(cp$wci_Vm_7_MCmd),
	    .wci_Vm_7_MAddrSpace(cp$wci_Vm_7_MAddrSpace),
	    .wci_Vm_7_MByteEn(cp$wci_Vm_7_MByteEn),
	    .wci_Vm_7_MAddr(cp$wci_Vm_7_MAddr),
	    .wci_Vm_7_MData(cp$wci_Vm_7_MData),
	    .wci_Vm_7_MFlag(cp$wci_Vm_7_MFlag),
	    .wci_Vm_8_MCmd(cp$wci_Vm_8_MCmd),
	    .wci_Vm_8_MAddrSpace(cp$wci_Vm_8_MAddrSpace),
	    .wci_Vm_8_MByteEn(cp$wci_Vm_8_MByteEn),
	    .wci_Vm_8_MAddr(cp$wci_Vm_8_MAddr),
	    .wci_Vm_8_MData(cp$wci_Vm_8_MData),
	    .wci_Vm_8_MFlag(cp$wci_Vm_8_MFlag),
	    .wci_Vm_9_MCmd(cp$wci_Vm_9_MCmd),
	    .wci_Vm_9_MAddrSpace(cp$wci_Vm_9_MAddrSpace),
	    .wci_Vm_9_MByteEn(cp$wci_Vm_9_MByteEn),
	    .wci_Vm_9_MAddr(cp$wci_Vm_9_MAddr),
	    .wci_Vm_9_MData(cp$wci_Vm_9_MData),
	    .wci_Vm_9_MFlag(cp$wci_Vm_9_MFlag),
	    .wci_Vm_10_MCmd(cp$wci_Vm_10_MCmd),
	    .wci_Vm_10_MAddrSpace(cp$wci_Vm_10_MAddrSpace),
	    .wci_Vm_10_MByteEn(cp$wci_Vm_10_MByteEn),
	    .wci_Vm_10_MAddr(cp$wci_Vm_10_MAddr),
	    .wci_Vm_10_MData(cp$wci_Vm_10_MData),
	    .wci_Vm_10_MFlag(cp$wci_Vm_10_MFlag),
	    .wci_Vm_11_MCmd(cp$wci_Vm_11_MCmd),
	    .wci_Vm_11_MAddrSpace(cp$wci_Vm_11_MAddrSpace),
	    .wci_Vm_11_MByteEn(cp$wci_Vm_11_MByteEn),
	    .wci_Vm_11_MAddr(cp$wci_Vm_11_MAddr),
	    .wci_Vm_11_MData(cp$wci_Vm_11_MData),
	    .wci_Vm_11_MFlag(cp$wci_Vm_11_MFlag),
	    .wci_Vm_12_MCmd(cp$wci_Vm_12_MCmd),
	    .wci_Vm_12_MAddrSpace(cp$wci_Vm_12_MAddrSpace),
	    .wci_Vm_12_MByteEn(cp$wci_Vm_12_MByteEn),
	    .wci_Vm_12_MAddr(cp$wci_Vm_12_MAddr),
	    .wci_Vm_12_MData(cp$wci_Vm_12_MData),
	    .wci_Vm_12_MFlag(cp$wci_Vm_12_MFlag),
	    .wci_Vm_13_MCmd(cp$wci_Vm_13_MCmd),
	    .wci_Vm_13_MAddrSpace(cp$wci_Vm_13_MAddrSpace),
	    .wci_Vm_13_MByteEn(cp$wci_Vm_13_MByteEn),
	    .wci_Vm_13_MAddr(cp$wci_Vm_13_MAddr),
	    .wci_Vm_13_MData(cp$wci_Vm_13_MData),
	    .wci_Vm_13_MFlag(cp$wci_Vm_13_MFlag),
	    .wci_Vm_14_MCmd(cp$wci_Vm_14_MCmd),
	    .wci_Vm_14_MAddrSpace(cp$wci_Vm_14_MAddrSpace),
	    .wci_Vm_14_MByteEn(cp$wci_Vm_14_MByteEn),
	    .wci_Vm_14_MAddr(cp$wci_Vm_14_MAddr),
	    .wci_Vm_14_MData(cp$wci_Vm_14_MData),
	    .wci_Vm_14_MFlag(cp$wci_Vm_14_MFlag),
	    .cpNow(cp$cpNow),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(cp$gps_ppsSyncOut),
	    .led(cp$led),
	    .RST_N_wci_Vm_0(cp$RST_N_wci_Vm_0),
	    .RST_N_wci_Vm_1(cp$RST_N_wci_Vm_1),
	    .RST_N_wci_Vm_2(cp$RST_N_wci_Vm_2),
	    .RST_N_wci_Vm_3(cp$RST_N_wci_Vm_3),
	    .RST_N_wci_Vm_4(cp$RST_N_wci_Vm_4),
	    .RST_N_wci_Vm_5(cp$RST_N_wci_Vm_5),
	    .RST_N_wci_Vm_6(cp$RST_N_wci_Vm_6),
	    .RST_N_wci_Vm_7(cp$RST_N_wci_Vm_7),
	    .RST_N_wci_Vm_8(cp$RST_N_wci_Vm_8),
	    .RST_N_wci_Vm_9(cp$RST_N_wci_Vm_9),
	    .RST_N_wci_Vm_10(cp$RST_N_wci_Vm_10),
	    .RST_N_wci_Vm_11(cp$RST_N_wci_Vm_11),
	    .RST_N_wci_Vm_12(cp$RST_N_wci_Vm_12),
	    .RST_N_wci_Vm_13(cp$RST_N_wci_Vm_13),
	    .RST_N_wci_Vm_14(cp$RST_N_wci_Vm_14));

  // submodule cpMux_aActF
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cpMux_aActF(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(cpMux_aActF$D_IN),
						      .ENQ(cpMux_aActF$ENQ),
						      .DEQ(cpMux_aActF$DEQ),
						      .CLR(cpMux_aActF$CLR),
						      .D_OUT(cpMux_aActF$D_OUT),
						      .FULL_N(cpMux_aActF$FULL_N),
						      .EMPTY_N(cpMux_aActF$EMPTY_N));

  // submodule cpMux_cpReqF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) cpMux_cpReqF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(cpMux_cpReqF$D_IN),
							.ENQ(cpMux_cpReqF$ENQ),
							.DEQ(cpMux_cpReqF$DEQ),
							.CLR(cpMux_cpReqF$CLR),
							.D_OUT(cpMux_cpReqF$D_OUT),
							.FULL_N(cpMux_cpReqF$FULL_N),
							.EMPTY_N(cpMux_cpReqF$EMPTY_N));

  // submodule cpMux_cpRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) cpMux_cpRespF(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(cpMux_cpRespF$D_IN),
							 .ENQ(cpMux_cpRespF$ENQ),
							 .DEQ(cpMux_cpRespF$DEQ),
							 .CLR(cpMux_cpRespF$CLR),
							 .D_OUT(cpMux_cpRespF$D_OUT),
							 .FULL_N(cpMux_cpRespF$FULL_N),
							 .EMPTY_N(cpMux_cpRespF$EMPTY_N));

  // submodule cpMux_reqAF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) cpMux_reqAF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(cpMux_reqAF$D_IN),
						       .ENQ(cpMux_reqAF$ENQ),
						       .DEQ(cpMux_reqAF$DEQ),
						       .CLR(cpMux_reqAF$CLR),
						       .D_OUT(cpMux_reqAF$D_OUT),
						       .FULL_N(cpMux_reqAF$FULL_N),
						       .EMPTY_N(cpMux_reqAF$EMPTY_N));

  // submodule cpMux_reqBF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) cpMux_reqBF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(cpMux_reqBF$D_IN),
						       .ENQ(cpMux_reqBF$ENQ),
						       .DEQ(cpMux_reqBF$DEQ),
						       .CLR(cpMux_reqBF$CLR),
						       .D_OUT(cpMux_reqBF$D_OUT),
						       .FULL_N(cpMux_reqBF$FULL_N),
						       .EMPTY_N(cpMux_reqBF$EMPTY_N));

  // submodule cpMux_respAF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) cpMux_respAF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(cpMux_respAF$D_IN),
							.ENQ(cpMux_respAF$ENQ),
							.DEQ(cpMux_respAF$DEQ),
							.CLR(cpMux_respAF$CLR),
							.D_OUT(cpMux_respAF$D_OUT),
							.FULL_N(cpMux_respAF$FULL_N),
							.EMPTY_N(cpMux_respAF$EMPTY_N));

  // submodule cpMux_respBF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) cpMux_respBF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(cpMux_respBF$D_IN),
							.ENQ(cpMux_respBF$ENQ),
							.DEQ(cpMux_respBF$DEQ),
							.CLR(cpMux_respBF$CLR),
							.D_OUT(cpMux_respBF$D_OUT),
							.FULL_N(cpMux_respBF$FULL_N),
							.EMPTY_N(cpMux_respBF$EMPTY_N));

  // submodule cpTlp_cmpF
  FIFO2 #(.width(32'd56), .guarded(32'd1)) cpTlp_cmpF(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(cpTlp_cmpF$D_IN),
						      .ENQ(cpTlp_cmpF$ENQ),
						      .DEQ(cpTlp_cmpF$DEQ),
						      .CLR(cpTlp_cmpF$CLR),
						      .D_OUT(cpTlp_cmpF$D_OUT),
						      .FULL_N(cpTlp_cmpF$FULL_N),
						      .EMPTY_N(cpTlp_cmpF$EMPTY_N));

  // submodule cpTlp_cpReqF
  FIFO2 #(.width(32'd59), .guarded(32'd1)) cpTlp_cpReqF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(cpTlp_cpReqF$D_IN),
							.ENQ(cpTlp_cpReqF$ENQ),
							.DEQ(cpTlp_cpReqF$DEQ),
							.CLR(cpTlp_cpReqF$CLR),
							.D_OUT(cpTlp_cpReqF$D_OUT),
							.FULL_N(cpTlp_cpReqF$FULL_N),
							.EMPTY_N(cpTlp_cpReqF$EMPTY_N));

  // submodule cpTlp_cpRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) cpTlp_cpRespF(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(cpTlp_cpRespF$D_IN),
							 .ENQ(cpTlp_cpRespF$ENQ),
							 .DEQ(cpTlp_cpRespF$DEQ),
							 .CLR(cpTlp_cpRespF$CLR),
							 .D_OUT(cpTlp_cpRespF$D_OUT),
							 .FULL_N(cpTlp_cpRespF$FULL_N),
							 .EMPTY_N(cpTlp_cpRespF$EMPTY_N));

  // submodule cpTlp_inF
  FIFO2 #(.width(32'd153), .guarded(32'd1)) cpTlp_inF(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(cpTlp_inF$D_IN),
						      .ENQ(cpTlp_inF$ENQ),
						      .DEQ(cpTlp_inF$DEQ),
						      .CLR(cpTlp_inF$CLR),
						      .D_OUT(cpTlp_inF$D_OUT),
						      .FULL_N(cpTlp_inF$FULL_N),
						      .EMPTY_N(cpTlp_inF$EMPTY_N));

  // submodule cpTlp_outF
  FIFO2 #(.width(32'd153), .guarded(32'd1)) cpTlp_outF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(cpTlp_outF$D_IN),
						       .ENQ(cpTlp_outF$ENQ),
						       .DEQ(cpTlp_outF$DEQ),
						       .CLR(cpTlp_outF$CLR),
						       .D_OUT(cpTlp_outF$D_OUT),
						       .FULL_N(cpTlp_outF$FULL_N),
						       .EMPTY_N(cpTlp_outF$EMPTY_N));

  // submodule dp0
  mkOCDP4B #(.hasPush(1'd0),
	     .hasPull(1'd1),
	     .hasDebugLogic(1'd1)) dp0(.pciDevice(x__h2791),
				       .CLK(CLK),
				       .RST_N(cp$RST_N_wci_Vm_13),
				       .server_request_put(dp0$server_request_put),
				       .wci_s_MAddr(dp0$wci_s_MAddr),
				       .wci_s_MAddrSpace(dp0$wci_s_MAddrSpace),
				       .wci_s_MByteEn(dp0$wci_s_MByteEn),
				       .wci_s_MCmd(dp0$wci_s_MCmd),
				       .wci_s_MData(dp0$wci_s_MData),
				       .wci_s_MFlag(dp0$wci_s_MFlag),
				       .wmiS0_MAddr(dp0$wmiS0_MAddr),
				       .wmiS0_MAddrSpace(dp0$wmiS0_MAddrSpace),
				       .wmiS0_MBurstLength(dp0$wmiS0_MBurstLength),
				       .wmiS0_MCmd(dp0$wmiS0_MCmd),
				       .wmiS0_MData(dp0$wmiS0_MData),
				       .wmiS0_MDataByteEn(dp0$wmiS0_MDataByteEn),
				       .wmiS0_MReqInfo(dp0$wmiS0_MReqInfo),
				       .wmiS0_arg_mFlag(dp0$wmiS0_arg_mFlag),
				       .wti_s_req(dp0$wti_s_req),
				       .wmiS0_MReqLast(dp0$wmiS0_MReqLast),
				       .wmiS0_MDataValid(dp0$wmiS0_MDataValid),
				       .wmiS0_MDataLast(dp0$wmiS0_MDataLast),
				       .wmiS0_MReset_n(dp0$wmiS0_MReset_n),
				       .EN_server_request_put(dp0$EN_server_request_put),
				       .EN_server_response_get(dp0$EN_server_response_get),
				       .wci_s_SResp(dp0$wci_s_SResp),
				       .wci_s_SData(dp0$wci_s_SData),
				       .wci_s_SThreadBusy(dp0$wci_s_SThreadBusy),
				       .wci_s_SFlag(dp0$wci_s_SFlag),
				       .wti_s_SThreadBusy(dp0$wti_s_SThreadBusy),
				       .wti_s_SReset_n(dp0$wti_s_SReset_n),
				       .wmiS0_SResp(dp0$wmiS0_SResp),
				       .wmiS0_SData(dp0$wmiS0_SData),
				       .wmiS0_SThreadBusy(dp0$wmiS0_SThreadBusy),
				       .wmiS0_SDataThreadBusy(dp0$wmiS0_SDataThreadBusy),
				       .wmiS0_SRespLast(dp0$wmiS0_SRespLast),
				       .wmiS0_SFlag(dp0$wmiS0_SFlag),
				       .wmiS0_SReset_n(dp0$wmiS0_SReset_n),
				       .RDY_server_request_put(dp0$RDY_server_request_put),
				       .server_response_get(dp0$server_response_get),
				       .RDY_server_response_get(dp0$RDY_server_response_get));

  // submodule dp1
  mkOCDP4B #(.hasPush(1'd1),
	     .hasPull(1'd0),
	     .hasDebugLogic(1'd1)) dp1(.pciDevice(x__h3085),
				       .CLK(CLK),
				       .RST_N(cp$RST_N_wci_Vm_14),
				       .server_request_put(dp1$server_request_put),
				       .wci_s_MAddr(dp1$wci_s_MAddr),
				       .wci_s_MAddrSpace(dp1$wci_s_MAddrSpace),
				       .wci_s_MByteEn(dp1$wci_s_MByteEn),
				       .wci_s_MCmd(dp1$wci_s_MCmd),
				       .wci_s_MData(dp1$wci_s_MData),
				       .wci_s_MFlag(dp1$wci_s_MFlag),
				       .wmiS0_MAddr(dp1$wmiS0_MAddr),
				       .wmiS0_MAddrSpace(dp1$wmiS0_MAddrSpace),
				       .wmiS0_MBurstLength(dp1$wmiS0_MBurstLength),
				       .wmiS0_MCmd(dp1$wmiS0_MCmd),
				       .wmiS0_MData(dp1$wmiS0_MData),
				       .wmiS0_MDataByteEn(dp1$wmiS0_MDataByteEn),
				       .wmiS0_MReqInfo(dp1$wmiS0_MReqInfo),
				       .wmiS0_arg_mFlag(dp1$wmiS0_arg_mFlag),
				       .wti_s_req(dp1$wti_s_req),
				       .wmiS0_MReqLast(dp1$wmiS0_MReqLast),
				       .wmiS0_MDataValid(dp1$wmiS0_MDataValid),
				       .wmiS0_MDataLast(dp1$wmiS0_MDataLast),
				       .wmiS0_MReset_n(dp1$wmiS0_MReset_n),
				       .EN_server_request_put(dp1$EN_server_request_put),
				       .EN_server_response_get(dp1$EN_server_response_get),
				       .wci_s_SResp(dp1$wci_s_SResp),
				       .wci_s_SData(dp1$wci_s_SData),
				       .wci_s_SThreadBusy(dp1$wci_s_SThreadBusy),
				       .wci_s_SFlag(dp1$wci_s_SFlag),
				       .wti_s_SThreadBusy(dp1$wti_s_SThreadBusy),
				       .wti_s_SReset_n(dp1$wti_s_SReset_n),
				       .wmiS0_SResp(dp1$wmiS0_SResp),
				       .wmiS0_SData(dp1$wmiS0_SData),
				       .wmiS0_SThreadBusy(dp1$wmiS0_SThreadBusy),
				       .wmiS0_SDataThreadBusy(dp1$wmiS0_SDataThreadBusy),
				       .wmiS0_SRespLast(dp1$wmiS0_SRespLast),
				       .wmiS0_SFlag(dp1$wmiS0_SFlag),
				       .wmiS0_SReset_n(dp1$wmiS0_SReset_n),
				       .RDY_server_request_put(dp1$RDY_server_request_put),
				       .server_response_get(dp1$server_response_get),
				       .RDY_server_response_get(dp1$RDY_server_response_get));

  // submodule itc0
  mkTimeClient itc0(.CLK_sys0_clk(CLK_sys0_clk),
		    .RST_N_sys0_rst(RST_N_sys0_rst),
		    .CLK_wti_clk(CLK),
		    .RST_N_wti_rst(RST_N),
		    .CLK(CLK),
		    .RST_N(RST_N),
		    .gpsTime_arg(itc0$gpsTime_arg),
		    .EN_gpsTime(itc0$EN_gpsTime),
		    .wti_m_SThreadBusy(itc0$wti_m_SThreadBusy),
		    .wti_m_SReset_n(itc0$wti_m_SReset_n),
		    .RDY_gpsTime(itc0$RDY_gpsTime),
		    .wti_m_req(itc0$wti_m_req));

  // submodule itc1
  mkTimeClient itc1(.CLK_sys0_clk(CLK_sys0_clk),
		    .RST_N_sys0_rst(RST_N_sys0_rst),
		    .CLK_wti_clk(CLK),
		    .RST_N_wti_rst(RST_N),
		    .CLK(CLK),
		    .RST_N(RST_N),
		    .gpsTime_arg(itc1$gpsTime_arg),
		    .EN_gpsTime(itc1$EN_gpsTime),
		    .wti_m_SThreadBusy(itc1$wti_m_SThreadBusy),
		    .wti_m_SReset_n(itc1$wti_m_SReset_n),
		    .RDY_gpsTime(itc1$RDY_gpsTime),
		    .wti_m_req(itc1$wti_m_req));

  // submodule noc_sm0
  mkTLPSM noc_sm0(.pfk(14'd1360),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(noc_sm0$c0_response_put),
		  .c1_response_put(noc_sm0$c1_response_put),
		  .s_request_put(noc_sm0$s_request_put),
		  .EN_s_request_put(noc_sm0$EN_s_request_put),
		  .EN_s_response_get(noc_sm0$EN_s_response_get),
		  .EN_c0_request_get(noc_sm0$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm0$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm0$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm0$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm0$RDY_s_request_put),
		  .s_response_get(noc_sm0$s_response_get),
		  .RDY_s_response_get(noc_sm0$RDY_s_response_get),
		  .c0_request_get(noc_sm0$c0_request_get),
		  .RDY_c0_request_get(noc_sm0$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm0$RDY_c0_response_put),
		  .c1_request_get(noc_sm0$c1_request_get),
		  .RDY_c1_request_get(noc_sm0$RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm0$RDY_c1_response_put));

  // submodule noc_sm1
  mkTLPSM noc_sm1(.pfk(14'd9488),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(noc_sm1$c0_response_put),
		  .c1_response_put(noc_sm1$c1_response_put),
		  .s_request_put(noc_sm1$s_request_put),
		  .EN_s_request_put(noc_sm1$EN_s_request_put),
		  .EN_s_response_get(noc_sm1$EN_s_response_get),
		  .EN_c0_request_get(noc_sm1$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm1$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm1$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm1$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm1$RDY_s_request_put),
		  .s_response_get(noc_sm1$s_response_get),
		  .RDY_s_response_get(noc_sm1$RDY_s_response_get),
		  .c0_request_get(noc_sm1$c0_request_get),
		  .RDY_c0_request_get(noc_sm1$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm1$RDY_c0_response_put),
		  .c1_request_get(noc_sm1$c1_request_get),
		  .RDY_c1_request_get(noc_sm1$RDY_c1_request_get),
		  .RDY_c1_response_put(noc_sm1$RDY_c1_response_put));

  // submodule noc_sm2
  mkTLPSM noc_sm2(.pfk(14'd9497),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .c0_response_put(noc_sm2$c0_response_put),
		  .c1_response_put(noc_sm2$c1_response_put),
		  .s_request_put(noc_sm2$s_request_put),
		  .EN_s_request_put(noc_sm2$EN_s_request_put),
		  .EN_s_response_get(noc_sm2$EN_s_response_get),
		  .EN_c0_request_get(noc_sm2$EN_c0_request_get),
		  .EN_c0_response_put(noc_sm2$EN_c0_response_put),
		  .EN_c1_request_get(noc_sm2$EN_c1_request_get),
		  .EN_c1_response_put(noc_sm2$EN_c1_response_put),
		  .RDY_s_request_put(noc_sm2$RDY_s_request_put),
		  .s_response_get(noc_sm2$s_response_get),
		  .RDY_s_response_get(noc_sm2$RDY_s_response_get),
		  .c0_request_get(noc_sm2$c0_request_get),
		  .RDY_c0_request_get(noc_sm2$RDY_c0_request_get),
		  .RDY_c0_response_put(noc_sm2$RDY_c0_response_put),
		  .c1_request_get(),
		  .RDY_c1_request_get(noc_sm2$RDY_c1_request_get),
		  .RDY_c1_response_put());

  // rule RL_cpTlp_tlpFirstRcv
  assign WILL_FIRE_RL_cpTlp_tlpFirstRcv =
	     cpTlp_inF$EMPTY_N &&
	     (!cpTlp_inF$D_OUT[152] || cpTlp_inF$D_OUT[110] ||
	      cpTlp_inF$D_OUT[125] ||
	      cpTlp_inF$D_OUT[124:120] != 5'b0 ||
	      cpTlp_inF$D_OUT[126] ||
	      cpTlp_cmpF$FULL_N) &&
	     !cpTlp_tlpActive ;

  // rule RL_cpTlp_tlpReqGen
  assign WILL_FIRE_RL_cpTlp_tlpReqGen =
	     cpTlp_cpReqF$FULL_N &&
	     (!cpTlp_tlpReq[62] ||
	      cpTlp_tlpFirst_9_OR_IF_cpTlp_tlpDWp_00_EQ_0_01_ETC___d110) &&
	     (!cpTlp_tlpReq[62] || cpTlp_tlpFirst || cpTlp_inF$EMPTY_N) &&
	     cpTlp_tlpActive ;

  // rule RL_cpTlp_tlpFirstComplWord
  assign WILL_FIRE_RL_cpTlp_tlpFirstComplWord =
	     cpTlp_cmpF$EMPTY_N && cpTlp_cpRespF$EMPTY_N &&
	     cpTlp_outF$FULL_N &&
	     !cpTlp_cmpActive ;

  // rule RL_cpTlp_tlpStageNextWord
  assign WILL_FIRE_RL_cpTlp_tlpStageNextWord =
	     cpTlp_cpRespF$EMPTY_N && cpTlp_cmpActive &&
	     cpTlp_cmpDWRemain != 10'd0 &&
	     !WILL_FIRE_RL_cpTlp_tlpNextComplWord ;

  // rule RL_cpTlp_tlpNextComplWord
  assign WILL_FIRE_RL_cpTlp_tlpNextComplWord =
	     cpTlp_outF$FULL_N && cpTlp_cmpActive && cpTlp_rss != 2'd0 ;

  // rule RL_cpMux_request_portA
  assign WILL_FIRE_RL_cpMux_request_portA =
	     cpMux_reqAF$EMPTY_N && cpMux_cpReqF$FULL_N &&
	     (!cpMux_reqAF$D_OUT[58] || cpMux_aActF$FULL_N) ;

  // rule RL_cpMux_request_portB
  assign WILL_FIRE_RL_cpMux_request_portB =
	     cpMux_cpReqF$FULL_N && cpMux_reqBF$EMPTY_N &&
	     (!cpMux_reqBF$D_OUT[58] || cpMux_aActF$FULL_N) &&
	     !WILL_FIRE_RL_cpMux_request_portA ;

  // rule RL_cpMux_response_cp
  assign WILL_FIRE_RL_cpMux_response_cp =
	     cpMux_cpRespF$EMPTY_N &&
	     cpMux_aActF_i_notEmpty__45_AND_IF_cpMux_aActF__ETC___d250 ;

  // inputs to muxes for submodule ports
  assign MUX_cpMux_aActF$enq_1__SEL_1 =
	     WILL_FIRE_RL_cpMux_request_portA && cpMux_reqAF$D_OUT[58] ;
  assign MUX_cpTlp_cmpActive$write_1__SEL_1 =
	     WILL_FIRE_RL_cpTlp_tlpFirstComplWord &&
	     cpTlp_cmpF$D_OUT[21:12] != 10'd1 ;
  assign MUX_cpTlp_rss$write_1__SEL_1 =
	     WILL_FIRE_RL_cpTlp_tlpStageNextWord &&
	     (cpTlp_cmpDWRemain == 10'd1 || cpTlp_rdp == 2'd3) ;
  assign MUX_cpTlp_tlpActive$write_1__SEL_1 =
	     WILL_FIRE_RL_cpTlp_tlpReqGen && cpTlp_tlpUnroll == 10'd1 ;
  assign MUX_cpTlp_tlpDWAddr$write_1__SEL_1 =
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv && cpTlp_inF$D_OUT[152] &&
	     !cpTlp_inF$D_OUT[110] &&
	     !cpTlp_inF$D_OUT[125] &&
	     cpTlp_inF$D_OUT[124:120] == 5'b0 ;
  assign MUX_cpTlp_cmpDWRemain$write_1__VAL_1 =
	     cpTlp_cmpF$D_OUT[21:12] - 10'd1 ;
  assign MUX_cpTlp_cmpDWRemain$write_1__VAL_2 = cpTlp_cmpDWRemain - 10'd1 ;
  assign MUX_cpTlp_outF$enq_1__VAL_1 =
	     { 1'd1,
	       cpTlp_cmpF$D_OUT[21:12] == 10'd1,
	       23'h2AFFFF,
	       pkt__h7418 } ;
  assign MUX_cpTlp_outF$enq_1__VAL_2 =
	     { 1'd0,
	       cpTlp_rss == 2'd2,
	       7'h2A,
	       pw_be__h10405,
	       pw_data__h10406 } ;
  assign MUX_cpTlp_rdp$write_1__VAL_1 = cpTlp_rdp + 2'd1 ;
  assign MUX_cpTlp_rss$write_1__VAL_1 =
	     (cpTlp_cmpDWRemain == 10'd1) ? 2'd2 : 2'd1 ;
  assign MUX_cpTlp_tlpDWAddr$write_1__VAL_2 = cpTlp_tlpDWAddr + 30'd1 ;
  assign MUX_cpTlp_tlpDWp$write_1__VAL_2 = cpTlp_tlpDWp - 2'd1 ;
  assign MUX_cpTlp_tlpUnroll$write_1__VAL_2 = cpTlp_tlpUnroll - 10'd1 ;

  // register cpTlp_cmpActive
  assign cpTlp_cmpActive$D_IN = MUX_cpTlp_cmpActive$write_1__SEL_1 ;
  assign cpTlp_cmpActive$EN =
	     WILL_FIRE_RL_cpTlp_tlpFirstComplWord &&
	     cpTlp_cmpF$D_OUT[21:12] != 10'd1 ||
	     WILL_FIRE_RL_cpTlp_tlpNextComplWord && cpTlp_rss == 2'd2 ;

  // register cpTlp_cmpDWRemain
  assign cpTlp_cmpDWRemain$D_IN =
	     WILL_FIRE_RL_cpTlp_tlpFirstComplWord ?
	       MUX_cpTlp_cmpDWRemain$write_1__VAL_1 :
	       MUX_cpTlp_cmpDWRemain$write_1__VAL_2 ;
  assign cpTlp_cmpDWRemain$EN =
	     WILL_FIRE_RL_cpTlp_tlpFirstComplWord ||
	     WILL_FIRE_RL_cpTlp_tlpStageNextWord ;

  // register cpTlp_rdp
  assign cpTlp_rdp$D_IN =
	     WILL_FIRE_RL_cpTlp_tlpStageNextWord ?
	       MUX_cpTlp_rdp$write_1__VAL_1 :
	       2'd0 ;
  assign cpTlp_rdp$EN =
	     WILL_FIRE_RL_cpTlp_tlpStageNextWord ||
	     WILL_FIRE_RL_cpTlp_tlpNextComplWord ;

  // register cpTlp_rdv
  assign cpTlp_rdv$D_IN =
	     { cpTlp_rdv[95:0],
	       cpTlp_cpRespF$D_OUT[7:0],
	       cpTlp_cpRespF$D_OUT[15:8],
	       cpTlp_cpRespF$D_OUT[23:16],
	       cpTlp_cpRespF$D_OUT[31:24] } ;
  assign cpTlp_rdv$EN = WILL_FIRE_RL_cpTlp_tlpStageNextWord ;

  // register cpTlp_rss
  assign cpTlp_rss$D_IN =
	     MUX_cpTlp_rss$write_1__SEL_1 ?
	       MUX_cpTlp_rss$write_1__VAL_1 :
	       2'd0 ;
  assign cpTlp_rss$EN =
	     WILL_FIRE_RL_cpTlp_tlpStageNextWord &&
	     (cpTlp_cmpDWRemain == 10'd1 || cpTlp_rdp == 2'd3) ||
	     WILL_FIRE_RL_cpTlp_tlpNextComplWord && cpTlp_rss == 2'd2 ;

  // register cpTlp_tlpActive
  assign cpTlp_tlpActive$D_IN = !MUX_cpTlp_tlpActive$write_1__SEL_1 ;
  assign cpTlp_tlpActive$EN =
	     WILL_FIRE_RL_cpTlp_tlpReqGen && cpTlp_tlpUnroll == 10'd1 ||
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv ;

  // register cpTlp_tlpDW
  assign cpTlp_tlpDW$D_IN = cpTlp_inF$D_OUT[31:0] ;
  assign cpTlp_tlpDW$EN = MUX_cpTlp_tlpDWAddr$write_1__SEL_1 ;

  // register cpTlp_tlpDWAddr
  assign cpTlp_tlpDWAddr$D_IN =
	     MUX_cpTlp_tlpDWAddr$write_1__SEL_1 ?
	       cpTlp_inF$D_OUT[63:34] :
	       MUX_cpTlp_tlpDWAddr$write_1__VAL_2 ;
  assign cpTlp_tlpDWAddr$EN =
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv && cpTlp_inF$D_OUT[152] &&
	     !cpTlp_inF$D_OUT[110] &&
	     !cpTlp_inF$D_OUT[125] &&
	     cpTlp_inF$D_OUT[124:120] == 5'b0 ||
	     WILL_FIRE_RL_cpTlp_tlpReqGen ;

  // register cpTlp_tlpDWp
  assign cpTlp_tlpDWp$D_IN =
	     MUX_cpTlp_tlpDWAddr$write_1__SEL_1 ?
	       2'd3 :
	       MUX_cpTlp_tlpDWp$write_1__VAL_2 ;
  assign cpTlp_tlpDWp$EN =
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv && cpTlp_inF$D_OUT[152] &&
	     !cpTlp_inF$D_OUT[110] &&
	     !cpTlp_inF$D_OUT[125] &&
	     cpTlp_inF$D_OUT[124:120] == 5'b0 ||
	     WILL_FIRE_RL_cpTlp_tlpReqGen && cpTlp_tlpReq[62] &&
	     !cpTlp_tlpFirst ;

  // register cpTlp_tlpFirst
  assign cpTlp_tlpFirst$D_IN = MUX_cpTlp_tlpDWAddr$write_1__SEL_1 ;
  assign cpTlp_tlpFirst$EN =
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv && cpTlp_inF$D_OUT[152] &&
	     !cpTlp_inF$D_OUT[110] &&
	     !cpTlp_inF$D_OUT[125] &&
	     cpTlp_inF$D_OUT[124:120] == 5'b0 ||
	     WILL_FIRE_RL_cpTlp_tlpReqGen ;

  // register cpTlp_tlpReq
  assign cpTlp_tlpReq$D_IN =
	     { 1'b0,
	       cpTlp_inF$D_OUT[126:120],
	       1'b0,
	       cpTlp_inF$D_OUT[118:116],
	       4'b0,
	       cpTlp_inF$D_OUT[111:108],
	       2'b0,
	       cpTlp_inF$D_OUT[105:64] } ;
  assign cpTlp_tlpReq$EN = MUX_cpTlp_tlpDWAddr$write_1__SEL_1 ;

  // register cpTlp_tlpUnroll
  assign cpTlp_tlpUnroll$D_IN =
	     MUX_cpTlp_tlpDWAddr$write_1__SEL_1 ?
	       cpTlp_inF$D_OUT[105:96] :
	       MUX_cpTlp_tlpUnroll$write_1__VAL_2 ;
  assign cpTlp_tlpUnroll$EN =
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv && cpTlp_inF$D_OUT[152] &&
	     !cpTlp_inF$D_OUT[110] &&
	     !cpTlp_inF$D_OUT[125] &&
	     cpTlp_inF$D_OUT[124:120] == 5'b0 ||
	     WILL_FIRE_RL_cpTlp_tlpReqGen ;

  // register noc_chompCnt
  assign noc_chompCnt$D_IN = noc_chompCnt + 8'd1 ;
  assign noc_chompCnt$EN =
	     noc_sm2$RDY_c1_request_get && noc_chompCnt != 8'd255 ;

  // submodule cp
  assign cp$gps_ppsSyncIn_x = gps_ppsSyncIn_x ;
  assign cp$server_request_put = cpMux_cpReqF$D_OUT ;
  assign cp$switch_x = switch_x ;
  assign cp$uuid_arg = uuid_arg ;
  assign cp$wci_Vm_0_SData = wci_m_0_SData ;
  assign cp$wci_Vm_0_SFlag = wci_m_0_SFlag ;
  assign cp$wci_Vm_0_SResp = wci_m_0_SResp ;
  assign cp$wci_Vm_10_SData = wci_m_10_SData ;
  assign cp$wci_Vm_10_SFlag = wci_m_10_SFlag ;
  assign cp$wci_Vm_10_SResp = wci_m_10_SResp ;
  assign cp$wci_Vm_11_SData = wci_m_11_SData ;
  assign cp$wci_Vm_11_SFlag = wci_m_11_SFlag ;
  assign cp$wci_Vm_11_SResp = wci_m_11_SResp ;
  assign cp$wci_Vm_12_SData = wci_m_12_SData ;
  assign cp$wci_Vm_12_SFlag = wci_m_12_SFlag ;
  assign cp$wci_Vm_12_SResp = wci_m_12_SResp ;
  assign cp$wci_Vm_13_SData = dp0$wci_s_SData ;
  assign cp$wci_Vm_13_SFlag = dp0$wci_s_SFlag ;
  assign cp$wci_Vm_13_SResp = dp0$wci_s_SResp ;
  assign cp$wci_Vm_14_SData = dp1$wci_s_SData ;
  assign cp$wci_Vm_14_SFlag = dp1$wci_s_SFlag ;
  assign cp$wci_Vm_14_SResp = dp1$wci_s_SResp ;
  assign cp$wci_Vm_1_SData = wci_m_1_SData ;
  assign cp$wci_Vm_1_SFlag = wci_m_1_SFlag ;
  assign cp$wci_Vm_1_SResp = wci_m_1_SResp ;
  assign cp$wci_Vm_2_SData = wci_m_2_SData ;
  assign cp$wci_Vm_2_SFlag = wci_m_2_SFlag ;
  assign cp$wci_Vm_2_SResp = wci_m_2_SResp ;
  assign cp$wci_Vm_3_SData = wci_m_3_SData ;
  assign cp$wci_Vm_3_SFlag = wci_m_3_SFlag ;
  assign cp$wci_Vm_3_SResp = wci_m_3_SResp ;
  assign cp$wci_Vm_4_SData = wci_m_4_SData ;
  assign cp$wci_Vm_4_SFlag = wci_m_4_SFlag ;
  assign cp$wci_Vm_4_SResp = wci_m_4_SResp ;
  assign cp$wci_Vm_5_SData = wci_m_5_SData ;
  assign cp$wci_Vm_5_SFlag = wci_m_5_SFlag ;
  assign cp$wci_Vm_5_SResp = wci_m_5_SResp ;
  assign cp$wci_Vm_6_SData = wci_m_6_SData ;
  assign cp$wci_Vm_6_SFlag = wci_m_6_SFlag ;
  assign cp$wci_Vm_6_SResp = wci_m_6_SResp ;
  assign cp$wci_Vm_7_SData = wci_m_7_SData ;
  assign cp$wci_Vm_7_SFlag = wci_m_7_SFlag ;
  assign cp$wci_Vm_7_SResp = wci_m_7_SResp ;
  assign cp$wci_Vm_8_SData = wci_m_8_SData ;
  assign cp$wci_Vm_8_SFlag = wci_m_8_SFlag ;
  assign cp$wci_Vm_8_SResp = wci_m_8_SResp ;
  assign cp$wci_Vm_9_SData = wci_m_9_SData ;
  assign cp$wci_Vm_9_SFlag = wci_m_9_SFlag ;
  assign cp$wci_Vm_9_SResp = wci_m_9_SResp ;
  assign cp$EN_server_request_put =
	     cp$RDY_server_request_put && cpMux_cpReqF$EMPTY_N ;
  assign cp$EN_server_response_get =
	     cp$RDY_server_response_get && cpMux_cpRespF$FULL_N ;
  assign cp$wci_Vm_0_SThreadBusy = wci_m_0_SThreadBusy ;
  assign cp$wci_Vm_1_SThreadBusy = wci_m_1_SThreadBusy ;
  assign cp$wci_Vm_2_SThreadBusy = wci_m_2_SThreadBusy ;
  assign cp$wci_Vm_3_SThreadBusy = wci_m_3_SThreadBusy ;
  assign cp$wci_Vm_4_SThreadBusy = wci_m_4_SThreadBusy ;
  assign cp$wci_Vm_5_SThreadBusy = wci_m_5_SThreadBusy ;
  assign cp$wci_Vm_6_SThreadBusy = wci_m_6_SThreadBusy ;
  assign cp$wci_Vm_7_SThreadBusy = wci_m_7_SThreadBusy ;
  assign cp$wci_Vm_8_SThreadBusy = wci_m_8_SThreadBusy ;
  assign cp$wci_Vm_9_SThreadBusy = wci_m_9_SThreadBusy ;
  assign cp$wci_Vm_10_SThreadBusy = wci_m_10_SThreadBusy ;
  assign cp$wci_Vm_11_SThreadBusy = wci_m_11_SThreadBusy ;
  assign cp$wci_Vm_12_SThreadBusy = wci_m_12_SThreadBusy ;
  assign cp$wci_Vm_13_SThreadBusy = dp0$wci_s_SThreadBusy ;
  assign cp$wci_Vm_14_SThreadBusy = dp1$wci_s_SThreadBusy ;

  // submodule cpMux_aActF
  assign cpMux_aActF$D_IN = MUX_cpMux_aActF$enq_1__SEL_1 ;
  assign cpMux_aActF$ENQ =
	     WILL_FIRE_RL_cpMux_request_portA && cpMux_reqAF$D_OUT[58] ||
	     WILL_FIRE_RL_cpMux_request_portB && cpMux_reqBF$D_OUT[58] ;
  assign cpMux_aActF$DEQ = WILL_FIRE_RL_cpMux_response_cp ;
  assign cpMux_aActF$CLR = 1'b0 ;

  // submodule cpMux_cpReqF
  assign cpMux_cpReqF$D_IN =
	     WILL_FIRE_RL_cpMux_request_portA ?
	       cpMux_reqAF$D_OUT :
	       cpMux_reqBF$D_OUT ;
  assign cpMux_cpReqF$ENQ =
	     WILL_FIRE_RL_cpMux_request_portA ||
	     WILL_FIRE_RL_cpMux_request_portB ;
  assign cpMux_cpReqF$DEQ =
	     cp$RDY_server_request_put && cpMux_cpReqF$EMPTY_N ;
  assign cpMux_cpReqF$CLR = 1'b0 ;

  // submodule cpMux_cpRespF
  assign cpMux_cpRespF$D_IN = cp$server_response_get ;
  assign cpMux_cpRespF$ENQ =
	     cp$RDY_server_response_get && cpMux_cpRespF$FULL_N ;
  assign cpMux_cpRespF$DEQ = WILL_FIRE_RL_cpMux_response_cp ;
  assign cpMux_cpRespF$CLR = 1'b0 ;

  // submodule cpMux_reqAF
  assign cpMux_reqAF$D_IN = cpTlp_cpReqF$D_OUT ;
  assign cpMux_reqAF$ENQ = cpTlp_cpReqF$EMPTY_N && cpMux_reqAF$FULL_N ;
  assign cpMux_reqAF$DEQ = WILL_FIRE_RL_cpMux_request_portA ;
  assign cpMux_reqAF$CLR = 1'b0 ;

  // submodule cpMux_reqBF
  assign cpMux_reqBF$D_IN = cpServer_request_put ;
  assign cpMux_reqBF$ENQ = EN_cpServer_request_put ;
  assign cpMux_reqBF$DEQ = WILL_FIRE_RL_cpMux_request_portB ;
  assign cpMux_reqBF$CLR = 1'b0 ;

  // submodule cpMux_respAF
  assign cpMux_respAF$D_IN = cpMux_cpRespF$D_OUT ;
  assign cpMux_respAF$ENQ =
	     WILL_FIRE_RL_cpMux_response_cp && cpMux_aActF$D_OUT ;
  assign cpMux_respAF$DEQ = cpMux_respAF$EMPTY_N && cpTlp_cpRespF$FULL_N ;
  assign cpMux_respAF$CLR = 1'b0 ;

  // submodule cpMux_respBF
  assign cpMux_respBF$D_IN = cpMux_cpRespF$D_OUT ;
  assign cpMux_respBF$ENQ =
	     WILL_FIRE_RL_cpMux_response_cp && !cpMux_aActF$D_OUT ;
  assign cpMux_respBF$DEQ = EN_cpServer_response_get ;
  assign cpMux_respBF$CLR = 1'b0 ;

  // submodule cpTlp_cmpF
  assign cpTlp_cmpF$D_IN =
	     { cpTlp_inF$D_OUT[95:80],
	       cpTlp_inF$D_OUT[118:116],
	       cpTlp_inF$D_OUT[79:72],
	       lowAddr__h5219,
	       cpTlp_inF$D_OUT[105:96],
	       byteCount__h5220 } ;
  assign cpTlp_cmpF$ENQ =
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv && cpTlp_inF$D_OUT[152] &&
	     !cpTlp_inF$D_OUT[110] &&
	     !cpTlp_inF$D_OUT[125] &&
	     cpTlp_inF$D_OUT[124:120] == 5'b0 &&
	     !cpTlp_inF$D_OUT[126] ;
  assign cpTlp_cmpF$DEQ = WILL_FIRE_RL_cpTlp_tlpFirstComplWord ;
  assign cpTlp_cmpF$CLR = 1'b0 ;

  // submodule cpTlp_cpReqF
  assign cpTlp_cpReqF$D_IN =
	     { !cpTlp_tlpReq[62],
	       IF_cpTlp_tlpReq_6_BIT_62_7_THEN_cpTlp_tlpDWAdd_ETC___d147 } ;
  assign cpTlp_cpReqF$ENQ = WILL_FIRE_RL_cpTlp_tlpReqGen ;
  assign cpTlp_cpReqF$DEQ = cpTlp_cpReqF$EMPTY_N && cpMux_reqAF$FULL_N ;
  assign cpTlp_cpReqF$CLR = 1'b0 ;

  // submodule cpTlp_cpRespF
  assign cpTlp_cpRespF$D_IN = cpMux_respAF$D_OUT ;
  assign cpTlp_cpRespF$ENQ = cpMux_respAF$EMPTY_N && cpTlp_cpRespF$FULL_N ;
  assign cpTlp_cpRespF$DEQ =
	     WILL_FIRE_RL_cpTlp_tlpFirstComplWord ||
	     WILL_FIRE_RL_cpTlp_tlpStageNextWord ;
  assign cpTlp_cpRespF$CLR = 1'b0 ;

  // submodule cpTlp_inF
  assign cpTlp_inF$D_IN = noc_sm0$c0_request_get ;
  assign cpTlp_inF$ENQ = noc_sm0$RDY_c0_request_get && cpTlp_inF$FULL_N ;
  assign cpTlp_inF$DEQ =
	     WILL_FIRE_RL_cpTlp_tlpReqGen && cpTlp_tlpReq[62] &&
	     !cpTlp_tlpFirst ||
	     WILL_FIRE_RL_cpTlp_tlpFirstRcv ;
  assign cpTlp_inF$CLR = 1'b0 ;

  // submodule cpTlp_outF
  assign cpTlp_outF$D_IN =
	     WILL_FIRE_RL_cpTlp_tlpFirstComplWord ?
	       MUX_cpTlp_outF$enq_1__VAL_1 :
	       MUX_cpTlp_outF$enq_1__VAL_2 ;
  assign cpTlp_outF$ENQ =
	     WILL_FIRE_RL_cpTlp_tlpFirstComplWord ||
	     WILL_FIRE_RL_cpTlp_tlpNextComplWord ;
  assign cpTlp_outF$DEQ = noc_sm0$RDY_c0_response_put && cpTlp_outF$EMPTY_N ;
  assign cpTlp_outF$CLR = 1'b0 ;

  // submodule dp0
  assign dp0$server_request_put = noc_sm1$c0_request_get ;
  assign dp0$wci_s_MAddr = cp$wci_Vm_13_MAddr ;
  assign dp0$wci_s_MAddrSpace = cp$wci_Vm_13_MAddrSpace ;
  assign dp0$wci_s_MByteEn = cp$wci_Vm_13_MByteEn ;
  assign dp0$wci_s_MCmd = cp$wci_Vm_13_MCmd ;
  assign dp0$wci_s_MData = cp$wci_Vm_13_MData ;
  assign dp0$wci_s_MFlag = cp$wci_Vm_13_MFlag ;
  assign dp0$wmiS0_MAddr = wmiDP0_MAddr ;
  assign dp0$wmiS0_MAddrSpace = wmiDP0_MAddrSpace ;
  assign dp0$wmiS0_MBurstLength = wmiDP0_MBurstLength ;
  assign dp0$wmiS0_MCmd = wmiDP0_MCmd ;
  assign dp0$wmiS0_MData = wmiDP0_MData ;
  assign dp0$wmiS0_MDataByteEn = wmiDP0_MDataByteEn ;
  assign dp0$wmiS0_MReqInfo = wmiDP0_MReqInfo ;
  assign dp0$wmiS0_arg_mFlag = wmiDP0_arg_mFlag ;
  assign dp0$wti_s_req = itc0$wti_m_req ;
  assign dp0$wmiS0_MReqLast = wmiDP0_MReqLast ;
  assign dp0$wmiS0_MDataValid = wmiDP0_MDataValid ;
  assign dp0$wmiS0_MDataLast = wmiDP0_MDataLast ;
  assign dp0$wmiS0_MReset_n = wmiDP0_MReset_n ;
  assign dp0$EN_server_request_put =
	     noc_sm1$RDY_c0_request_get && dp0$RDY_server_request_put ;
  assign dp0$EN_server_response_get =
	     noc_sm1$RDY_c0_response_put && dp0$RDY_server_response_get ;

  // submodule dp1
  assign dp1$server_request_put = noc_sm2$c0_request_get ;
  assign dp1$wci_s_MAddr = cp$wci_Vm_14_MAddr ;
  assign dp1$wci_s_MAddrSpace = cp$wci_Vm_14_MAddrSpace ;
  assign dp1$wci_s_MByteEn = cp$wci_Vm_14_MByteEn ;
  assign dp1$wci_s_MCmd = cp$wci_Vm_14_MCmd ;
  assign dp1$wci_s_MData = cp$wci_Vm_14_MData ;
  assign dp1$wci_s_MFlag = cp$wci_Vm_14_MFlag ;
  assign dp1$wmiS0_MAddr = wmiDP1_MAddr ;
  assign dp1$wmiS0_MAddrSpace = wmiDP1_MAddrSpace ;
  assign dp1$wmiS0_MBurstLength = wmiDP1_MBurstLength ;
  assign dp1$wmiS0_MCmd = wmiDP1_MCmd ;
  assign dp1$wmiS0_MData = wmiDP1_MData ;
  assign dp1$wmiS0_MDataByteEn = wmiDP1_MDataByteEn ;
  assign dp1$wmiS0_MReqInfo = wmiDP1_MReqInfo ;
  assign dp1$wmiS0_arg_mFlag = wmiDP1_arg_mFlag ;
  assign dp1$wti_s_req = itc1$wti_m_req ;
  assign dp1$wmiS0_MReqLast = wmiDP1_MReqLast ;
  assign dp1$wmiS0_MDataValid = wmiDP1_MDataValid ;
  assign dp1$wmiS0_MDataLast = wmiDP1_MDataLast ;
  assign dp1$wmiS0_MReset_n = wmiDP1_MReset_n ;
  assign dp1$EN_server_request_put =
	     noc_sm2$RDY_c0_request_get && dp1$RDY_server_request_put ;
  assign dp1$EN_server_response_get =
	     noc_sm2$RDY_c0_response_put && dp1$RDY_server_response_get ;

  // submodule itc0
  assign itc0$gpsTime_arg = cp$cpNow ;
  assign itc0$EN_gpsTime = itc0$RDY_gpsTime ;
  assign itc0$wti_m_SThreadBusy = dp0$wti_s_SThreadBusy ;
  assign itc0$wti_m_SReset_n = dp0$wti_s_SReset_n ;

  // submodule itc1
  assign itc1$gpsTime_arg = cp$cpNow ;
  assign itc1$EN_gpsTime = itc1$RDY_gpsTime ;
  assign itc1$wti_m_SThreadBusy = dp1$wti_s_SThreadBusy ;
  assign itc1$wti_m_SReset_n = dp1$wti_s_SReset_n ;

  // submodule noc_sm0
  assign noc_sm0$c0_response_put = cpTlp_outF$D_OUT ;
  assign noc_sm0$c1_response_put = noc_sm1$s_response_get ;
  assign noc_sm0$s_request_put = server_request_put ;
  assign noc_sm0$EN_s_request_put = EN_server_request_put ;
  assign noc_sm0$EN_s_response_get = EN_server_response_get ;
  assign noc_sm0$EN_c0_request_get =
	     noc_sm0$RDY_c0_request_get && cpTlp_inF$FULL_N ;
  assign noc_sm0$EN_c0_response_put =
	     noc_sm0$RDY_c0_response_put && cpTlp_outF$EMPTY_N ;
  assign noc_sm0$EN_c1_request_get =
	     noc_sm0$RDY_c1_request_get && noc_sm1$RDY_s_request_put ;
  assign noc_sm0$EN_c1_response_put =
	     noc_sm0$RDY_c1_response_put && noc_sm1$RDY_s_response_get ;

  // submodule noc_sm1
  assign noc_sm1$c0_response_put = dp0$server_response_get ;
  assign noc_sm1$c1_response_put = noc_sm2$s_response_get ;
  assign noc_sm1$s_request_put = noc_sm0$c1_request_get ;
  assign noc_sm1$EN_s_request_put =
	     noc_sm0$RDY_c1_request_get && noc_sm1$RDY_s_request_put ;
  assign noc_sm1$EN_s_response_get =
	     noc_sm0$RDY_c1_response_put && noc_sm1$RDY_s_response_get ;
  assign noc_sm1$EN_c0_request_get =
	     noc_sm1$RDY_c0_request_get && dp0$RDY_server_request_put ;
  assign noc_sm1$EN_c0_response_put =
	     noc_sm1$RDY_c0_response_put && dp0$RDY_server_response_get ;
  assign noc_sm1$EN_c1_request_get =
	     noc_sm1$RDY_c1_request_get && noc_sm2$RDY_s_request_put ;
  assign noc_sm1$EN_c1_response_put =
	     noc_sm1$RDY_c1_response_put && noc_sm2$RDY_s_response_get ;

  // submodule noc_sm2
  assign noc_sm2$c0_response_put = dp1$server_response_get ;
  assign noc_sm2$c1_response_put = 153'h0 ;
  assign noc_sm2$s_request_put = noc_sm1$c1_request_get ;
  assign noc_sm2$EN_s_request_put =
	     noc_sm1$RDY_c1_request_get && noc_sm2$RDY_s_request_put ;
  assign noc_sm2$EN_s_response_get =
	     noc_sm1$RDY_c1_response_put && noc_sm2$RDY_s_response_get ;
  assign noc_sm2$EN_c0_request_get =
	     noc_sm2$RDY_c0_request_get && dp1$RDY_server_request_put ;
  assign noc_sm2$EN_c0_response_put =
	     noc_sm2$RDY_c0_response_put && dp1$RDY_server_response_get ;
  assign noc_sm2$EN_c1_request_get = noc_sm2$RDY_c1_request_get ;
  assign noc_sm2$EN_c1_response_put = 1'b0 ;

  // remaining internal signals
  assign IF_cpTlp_tlpReq_6_BIT_62_7_AND_NOT_cpTlp_tlpFi_ETC___d338 =
	     (cpTlp_tlpReq[62] && !cpTlp_tlpFirst) ? v__h5693 : cpTlp_tlpDW ;
  assign IF_cpTlp_tlpReq_6_BIT_62_7_THEN_cpTlp_tlpDWAdd_ETC___d147 =
	     cpTlp_tlpReq[62] ?
	       { cpTlp_tlpDWAddr[21:0],
		 _theResult_____2__h5635,
		 wreq_data__h6249 } :
	       { 24'hAAAAAA,
		 cpTlp_tlpReq[15:8],
		 cpTlp_tlpDWAddr[21:0],
		 _theResult_____2__h5635 } ;
  assign _theResult_____2__h5635 =
	     cpTlp_tlpFirst ?
	       cpTlp_tlpReq[3:0] :
	       ((cpTlp_tlpUnroll == 10'd1) ? cpTlp_tlpReq[7:4] : 4'hF) ;
  assign byteCount__h5220 = x__h5439 - y__h5440 ;
  assign cpMux_aActF_i_notEmpty__45_AND_IF_cpMux_aActF__ETC___d250 =
	     cpMux_aActF$EMPTY_N &&
	     (cpMux_aActF$D_OUT ? cpMux_respAF$FULL_N : cpMux_respBF$FULL_N) ;
  assign cpTlp_tlpFirst_9_OR_IF_cpTlp_tlpDWp_00_EQ_0_01_ETC___d110 =
	     cpTlp_tlpFirst ||
	     CASE_cpTlp_tlpDWp_NOT_cpTlp_tlpDWp_EQ_3_OR_cpT_ETC__q1 ;
  assign lowAddr__h5219 = { cpTlp_inF$D_OUT[38:34], lowAddr10__h5218 } ;
  assign pkt__h7418 =
	     { 9'd148,
	       cpTlp_cmpF$D_OUT[39:37],
	       10'd0,
	       cpTlp_cmpF$D_OUT[21:12],
	       pciDevice,
	       4'd0,
	       cpTlp_cmpF$D_OUT[11:0],
	       cpTlp_cmpF$D_OUT[55:40],
	       cpTlp_cmpF$D_OUT[36:29],
	       1'b0,
	       cpTlp_cmpF$D_OUT[28:22],
	       cpTlp_cpRespF$D_OUT[7:0],
	       cpTlp_cpRespF$D_OUT[15:8],
	       cpTlp_cpRespF$D_OUT[23:16],
	       cpTlp_cpRespF$D_OUT[31:24] } ;
  assign pw_be__h10405 = (cpTlp_rss == 2'd2) ? lastRema__h10373 : 16'd65535 ;
  assign pw_data__h10406 =
	     x__h10825[1] ?
	       (x__h10825[0] ?
		  { cpTlp_rdv[31:0], cpTlp_rdv[127:32] } :
		  { cpTlp_rdv[63:0], cpTlp_rdv[127:64] }) :
	       (x__h10825[0] ?
		  { cpTlp_rdv[95:0], cpTlp_rdv[127:96] } :
		  cpTlp_rdv) ;
  assign wreq_data__h6249 =
	     { IF_cpTlp_tlpReq_6_BIT_62_7_AND_NOT_cpTlp_tlpFi_ETC___d338[7:0],
	       IF_cpTlp_tlpReq_6_BIT_62_7_AND_NOT_cpTlp_tlpFi_ETC___d338[15:8],
	       IF_cpTlp_tlpReq_6_BIT_62_7_AND_NOT_cpTlp_tlpFi_ETC___d338[23:16],
	       IF_cpTlp_tlpReq_6_BIT_62_7_AND_NOT_cpTlp_tlpFi_ETC___d338[31:24] } ;
  assign x__h10825 = 3'h4 - { 1'd0, cpTlp_rdp } ;
  assign x__h2791 = { pciDevice[15:3], 3'd0 } ;
  assign x__h3085 = { pciDevice[15:3], 3'd1 } ;
  assign x__h5439 = x__h5441 - y__h5442 ;
  assign x__h5441 = { cpTlp_inF$D_OUT[105:96], 2'b0 } ;
  assign y__h5440 =
	     (cpTlp_inF$D_OUT[105:96] == 10'd1) ?
	       12'd0 :
	       { 10'd0, x__h5471 } ;
  assign y__h5442 = { 10'd0, x__h5448 } ;
  always@(cpTlp_inF$D_OUT)
  begin
    case (cpTlp_inF$D_OUT[67:64])
      4'b1100: x__h5448 = 2'b10;
      4'b1110: x__h5448 = 2'b01;
      4'b1111: x__h5448 = 2'b0;
      default: x__h5448 = 2'b11;
    endcase
  end
  always@(cpTlp_inF$D_OUT)
  begin
    case (cpTlp_inF$D_OUT[71:68])
      4'b1100: x__h5471 = 2'b10;
      4'b1110: x__h5471 = 2'b01;
      4'b1111: x__h5471 = 2'b0;
      default: x__h5471 = 2'b11;
    endcase
  end
  always@(cpTlp_tlpDWp or cpTlp_inF$D_OUT)
  begin
    case (cpTlp_tlpDWp)
      2'd0: v__h5693 = cpTlp_inF$D_OUT[31:0];
      2'd1: v__h5693 = cpTlp_inF$D_OUT[63:32];
      2'd2: v__h5693 = cpTlp_inF$D_OUT[95:64];
      2'd3: v__h5693 = cpTlp_inF$D_OUT[127:96];
    endcase
  end
  always@(cpTlp_rdp)
  begin
    case (cpTlp_rdp)
      2'b0: lastRema__h10373 = 16'hFFFF;
      2'b01: lastRema__h10373 = 16'hF000;
      2'b10: lastRema__h10373 = 16'hFF00;
      2'd3: lastRema__h10373 = 16'hFFF0;
    endcase
  end
  always@(cpTlp_inF$D_OUT)
  begin
    case (cpTlp_inF$D_OUT[67:64])
      4'b1000: lowAddr10__h5218 = 2'b11;
      4'b1100: lowAddr10__h5218 = 2'b10;
      4'b1110: lowAddr10__h5218 = 2'b01;
      default: lowAddr10__h5218 = 2'b0;
    endcase
  end
  always@(cpTlp_tlpDWp or cpTlp_inF$EMPTY_N)
  begin
    case (cpTlp_tlpDWp)
      2'd0, 2'd1, 2'd2:
	  CASE_cpTlp_tlpDWp_NOT_cpTlp_tlpDWp_EQ_3_OR_cpT_ETC__q1 =
	      cpTlp_inF$EMPTY_N;
      2'd3:
	  CASE_cpTlp_tlpDWp_NOT_cpTlp_tlpDWp_EQ_3_OR_cpT_ETC__q1 =
	      cpTlp_tlpDWp != 2'd3 || cpTlp_inF$EMPTY_N;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cpTlp_cmpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cpTlp_rdp <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cpTlp_rss <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cpTlp_tlpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	noc_chompCnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (cpTlp_cmpActive$EN)
	  cpTlp_cmpActive <= `BSV_ASSIGNMENT_DELAY cpTlp_cmpActive$D_IN;
	if (cpTlp_rdp$EN) cpTlp_rdp <= `BSV_ASSIGNMENT_DELAY cpTlp_rdp$D_IN;
	if (cpTlp_rss$EN) cpTlp_rss <= `BSV_ASSIGNMENT_DELAY cpTlp_rss$D_IN;
	if (cpTlp_tlpActive$EN)
	  cpTlp_tlpActive <= `BSV_ASSIGNMENT_DELAY cpTlp_tlpActive$D_IN;
	if (noc_chompCnt$EN)
	  noc_chompCnt <= `BSV_ASSIGNMENT_DELAY noc_chompCnt$D_IN;
      end
    if (cpTlp_cmpDWRemain$EN)
      cpTlp_cmpDWRemain <= `BSV_ASSIGNMENT_DELAY cpTlp_cmpDWRemain$D_IN;
    if (cpTlp_rdv$EN) cpTlp_rdv <= `BSV_ASSIGNMENT_DELAY cpTlp_rdv$D_IN;
    if (cpTlp_tlpDW$EN) cpTlp_tlpDW <= `BSV_ASSIGNMENT_DELAY cpTlp_tlpDW$D_IN;
    if (cpTlp_tlpDWAddr$EN)
      cpTlp_tlpDWAddr <= `BSV_ASSIGNMENT_DELAY cpTlp_tlpDWAddr$D_IN;
    if (cpTlp_tlpDWp$EN)
      cpTlp_tlpDWp <= `BSV_ASSIGNMENT_DELAY cpTlp_tlpDWp$D_IN;
    if (cpTlp_tlpFirst$EN)
      cpTlp_tlpFirst <= `BSV_ASSIGNMENT_DELAY cpTlp_tlpFirst$D_IN;
    if (cpTlp_tlpReq$EN)
      cpTlp_tlpReq <= `BSV_ASSIGNMENT_DELAY cpTlp_tlpReq$D_IN;
    if (cpTlp_tlpUnroll$EN)
      cpTlp_tlpUnroll <= `BSV_ASSIGNMENT_DELAY cpTlp_tlpUnroll$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cpTlp_cmpActive = 1'h0;
    cpTlp_cmpDWRemain = 10'h2AA;
    cpTlp_rdp = 2'h2;
    cpTlp_rdv = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cpTlp_rss = 2'h2;
    cpTlp_tlpActive = 1'h0;
    cpTlp_tlpDW = 32'hAAAAAAAA;
    cpTlp_tlpDWAddr = 30'h2AAAAAAA;
    cpTlp_tlpDWp = 2'h2;
    cpTlp_tlpFirst = 1'h0;
    cpTlp_tlpReq = 64'hAAAAAAAAAAAAAAAA;
    cpTlp_tlpUnroll = 10'h2AA;
    noc_chompCnt = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (noc_sm2$RDY_c1_request_get)
	begin
	  v__h1839 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (noc_sm2$RDY_c1_request_get)
	$display("[%0d]: %m: UNHANDLED TLP chompCnt:%0x",
		 v__h1839,
		 $unsigned(noc_chompCnt));
  end
  // synopsys translate_on
endmodule  // mkOCInf4B

